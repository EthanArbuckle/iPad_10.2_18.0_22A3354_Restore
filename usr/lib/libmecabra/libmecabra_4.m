void sub_20B996C4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v12;
  va_list va;

  va_start(va, a11);
  *(_QWORD *)(v11 + 48) = v12;
  sub_20B996068((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B996CD8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t result;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 48);
  if (v2 == v3)
  {
    v4 = 0;
  }
  else
  {
    LODWORD(v4) = 0;
    v5 = (_QWORD *)MEMORY[0x24BEDB310];
    do
    {
      v6 = (*(_QWORD *)(v2 + 32) - *(_QWORD *)(v2 + 24)) >> 3;
      if (v6 >= 0x100)
      {
        v7 = sub_20B828F84(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/mecabra/Dictionary/MecabraJapaneseDictionaryCompiler.cpp", 102);
        sub_20B828F84(v7, (uint64_t)"(", 1);
        v8 = (_QWORD *)std::ostream::operator<<();
        v9 = sub_20B828F84(v8, (uint64_t)") [", 3);
        v10 = sub_20B828F84(v9, (uint64_t)"homographCount <= 0xff", 22);
        v11 = sub_20B828F84(v10, (uint64_t)"] ", 2);
        sub_20B828F84(v11, (uint64_t)"homographCount is greater than 0xff.\n", 37);
        sub_20B89423C();
      }
      if (BYTE3(v4))
      {
        v12 = sub_20B828F84(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/mecabra/Dictionary/MecabraJapaneseDictionaryCompiler.cpp", 102);
        sub_20B828F84(v12, (uint64_t)"(", 1);
        v13 = (_QWORD *)std::ostream::operator<<();
        v14 = sub_20B828F84(v13, (uint64_t)") [", 3);
        v15 = sub_20B828F84(v14, (uint64_t)"tokenIndex <= 0x00ffffff", 24);
        v16 = sub_20B828F84(v15, (uint64_t)"] ", 2);
        sub_20B828F84(v16, (uint64_t)"tokenIndex is greater than 0x00ffffff.\n", 39);
        sub_20B89423C();
      }
      sub_20B9974C0(*(_QWORD **)(a1 + 8), (__int128 *)v2, v6 + ((_DWORD)v4 << 8));
      sub_20B9974C0(*(_QWORD **)(a1 + 88), (__int128 *)v2, 0);
      v4 = v4 + ((*(_QWORD *)(v2 + 32) - *(_QWORD *)(v2 + 24)) >> 3);
      v2 += 48;
    }
    while (v2 != v3);
  }
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 88) + 16))(*(_QWORD *)(a1 + 88)) & 1) == 0)
    return 0;
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
  if ((_DWORD)result)
  {
    sub_20B873120(a1 + 96, v4);
    v18 = *(void **)(a1 + 96);
    v19 = *(_QWORD *)(a1 + 104) - (_QWORD)v18;
    if (v19)
      bzero(v18, v19 & 0xFFFFFFFFFFFFFFFCLL);
    v20 = *(_QWORD *)(a1 + 40);
    v21 = *(_QWORD *)(a1 + 48);
    if (v20 != v21)
    {
      v22 = 0;
      do
      {
        v23 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 88) + 24))(*(_QWORD *)(a1 + 88), v20);
        v24 = *(_QWORD *)(v20 + 32) - *(_QWORD *)(v20 + 24);
        if (v24)
        {
          v25 = *(_QWORD *)(a1 + 96);
          v26 = 1;
          do
            *(_DWORD *)(v25 + 4 * (v22 + v26 - 1)) = v23;
          while (v24 >> 3 > (unint64_t)v26++);
        }
        v22 += (unint64_t)v24 >> 3;
        v20 += 48;
      }
      while (v20 != v21);
    }
    return 1;
  }
  return result;
}

void sub_20B996F3C()
{
  sub_20B89423C();
}

void sub_20B996F54()
{
  _Unwind_Exception *v0;

  _Unwind_Resume(v0);
}

uint64_t sub_20B996F5C(_QWORD *a1)
{
  _QWORD *v1;
  __int128 *v2;
  __int128 *i;
  __int128 v4;
  char *v5;
  char *v6;
  int v7;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  _BOOL8 v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  int v21;
  int v22;
  int v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  const std::nothrow_t *v39;
  unint64_t v40;
  unsigned int *v41;
  BOOL v42;
  _QWORD *v43;
  unsigned int *v44;
  char *v45;
  void *v46;
  void **v47;
  void **v48;
  uint64_t v50;
  unint64_t v51;
  void **v52;
  __int128 v53;
  void *__p[2];
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;

  v1 = a1;
  v2 = (__int128 *)a1[5];
  for (i = (__int128 *)a1[6]; v2 != i; v2 += 3)
  {
    if (*((char *)v2 + 23) < 0)
    {
      sub_20B80ACE0(__p, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v4 = *v2;
      v55 = *((_QWORD *)v2 + 2);
      *(_OWORD *)__p = v4;
    }
    v56 = 0;
    v57 = 0;
    v58 = 0;
    sub_20B9979B8(&v56, *((const void **)v2 + 3), *((_QWORD *)v2 + 4), (uint64_t)(*((_QWORD *)v2 + 4) - *((_QWORD *)v2 + 3)) >> 3);
    v5 = v56;
    v6 = v57;
    if (v56 != v57)
    {
      do
      {
        if ((*(_DWORD *)(*(_QWORD *)v5 + 16) - 1) >= 2)
          sub_20B9974C0((_QWORD *)*v1, (__int128 *)(*(_QWORD *)v5 + 48), 0);
        v5 += 8;
      }
      while (v5 != v6);
      v5 = v56;
    }
    if (v5)
    {
      v57 = v5;
      operator delete(v5);
    }
    if (SHIBYTE(v55) < 0)
      operator delete(__p[0]);
  }
  if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v1 + 16))(*v1) & 1) == 0)
    return 0;
  v7 = *((_DWORD *)v1 + 52);
  if (v7 != 5 && v7 != 0)
    return 1;
  v9 = v1[13] - v1[12];
  if (v9)
  {
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFFDLL)
      sub_20B80CDD8();
    v10 = (char *)sub_20B87FB70(v9 >> 2);
    v12 = &v10[8 * v11];
  }
  else
  {
    v10 = 0;
    v12 = 0;
  }
  v14 = v1[5];
  v50 = v1[6];
  if (v14 == v50)
  {
    v16 = v10;
  }
  else
  {
    v15 = 0;
    v16 = v10;
    do
    {
      v17 = *(_QWORD *)(v14 + 32) - *(_QWORD *)(v14 + 24);
      v51 = v17;
      if (v17)
      {
        v18 = 0;
        v19 = 0;
        v20 = v17 >> 3;
        do
        {
          v21 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v1 + 24))(*v1, *(_QWORD *)(*(_QWORD *)(v14 + 24) + 8 * v18) + 48);
          v22 = v21;
          v23 = v19 + v15;
          if (v16 >= v12)
          {
            v24 = v12;
            v25 = v14;
            v26 = v15;
            v27 = v1;
            v28 = (v16 - v10) >> 3;
            v29 = v28 + 1;
            if ((unint64_t)(v28 + 1) >> 61)
              sub_20B80CDD8();
            v30 = v24 - v10;
            v31 = (v24 - v10) >> 2;
            if (v31 > v29)
              v29 = v31;
            if (v30 >= 0x7FFFFFFFFFFFFFF8)
              v32 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v32 = v29;
            v33 = (char *)sub_20B87FB70(v32);
            v35 = &v33[8 * v28];
            *(_DWORD *)v35 = v23;
            *((_DWORD *)v35 + 1) = v22;
            v36 = v35;
            v1 = v27;
            while (v16 != v10)
            {
              v37 = *((_QWORD *)v16 - 1);
              v16 -= 8;
              *((_QWORD *)v36 - 1) = v37;
              v36 -= 8;
            }
            v38 = &v33[8 * v34];
            v16 = v35 + 8;
            v15 = v26;
            if (v10)
              operator delete(v10);
            v10 = v36;
            v14 = v25;
            v12 = v38;
          }
          else
          {
            *(_DWORD *)v16 = v23;
            *((_DWORD *)v16 + 1) = v21;
            v16 += 8;
          }
          v18 = ++v19;
        }
        while (v20 > v19);
      }
      v15 = v15 + (v51 >> 3);
      v14 += 48;
    }
    while (v14 != v50);
  }
  if (v16 - v10 < 1)
  {
LABEL_52:
    v43 = v1;
    sub_20B998698(v10, v16, (v16 - v10) >> 3, 0, 0);
  }
  else
  {
    v39 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
    v40 = (v16 - v10) >> 3;
    while (1)
    {
      v41 = (unsigned int *)operator new(8 * v40, v39);
      if (v41)
        break;
      v42 = v40 > 1;
      v40 >>= 1;
      if (!v42)
        goto LABEL_52;
    }
    v44 = v41;
    v43 = v1;
    sub_20B998698(v10, v16, (v16 - v10) >> 3, v41, v40);
    operator delete(v44);
  }
  __p[0] = 0;
  __p[1] = 0;
  v55 = 0;
  if (v10 != v16)
  {
    v45 = v10;
    do
    {
      sub_20B9362E8((uint64_t *)__p, *((_DWORD *)v45 + 1), *(_DWORD *)v45);
      v45 += 8;
    }
    while (v45 != v16);
  }
  sub_20B9364A4((uint64_t *)__p, (uint64_t *)&v52);
  v46 = (void *)v43[15];
  if (v46)
  {
    v43[16] = v46;
    operator delete(v46);
    v43[15] = 0;
    v43[16] = 0;
    v43[17] = 0;
  }
  v47 = v52;
  v43[15] = v52;
  v48 = (void **)v53;
  *((_OWORD *)v43 + 8) = v53;
  v13 = v47 != v48;
  v52 = __p;
  sub_20B83B400(&v52);
  if (v10)
    operator delete(v10);
  return v13;
}

void sub_20B997320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  void *v15;

  a12 = (void **)&a15;
  sub_20B83B400(&a12);
  if (v15)
    operator delete(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_20B997380(_QWORD *a1, uint64_t **a2, int a3, uint64_t *a4)
{
  _QWORD *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int16x4_t **v10;
  int16x4_t **i;
  int16x4_t *v12;
  __int32 v13;
  int v14;
  int16x4_t v15;
  _QWORD *v16;
  uint64_t v17;
  int16x4_t v19;
  __int32 v20;

  *((_DWORD *)a1 + 52) = a3;
  sub_20B995C3C(a1, a2);
  v6 = (_QWORD *)*a4;
  v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[1] + 32))(a1[1]);
  v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[1] + 40))(a1[1]);
  sub_20B969098(0, 0, v7, v8);
  sub_20B9C60C8(v6, v9);
  sub_20B9C6274(*a4, (const std::string *)(*a1 + 112));
  v10 = (int16x4_t **)a1[18];
  for (i = (int16x4_t **)a1[19]; v10 != i; ++v10)
  {
    v12 = *v10;
    v13 = (*v10)[2].i32[0];
    if ((v13 - 1) >= 2)
    {
      v14 = (*(uint64_t (**)(_QWORD, int16x4_t *))(*(_QWORD *)*a1 + 24))(*a1, v12 + 6);
      v13 = v12[2].i32[0];
    }
    else
    {
      v14 = 0;
    }
    v15 = vrev32_s16(*v12);
    v15.i32[0] = (__int32)*v12;
    v19 = v15;
    v20 = v13 + 4 * v14;
    std::string::append((std::string *)a1 + 10, (const std::string::value_type *)&v19, 0xCuLL);
  }
  v16 = a1 + 30;
  if (*((char *)a1 + 263) < 0)
    v16 = (_QWORD *)*v16;
  *(_QWORD *)(*a4 + 352) = v16;
  v17 = *a4;
  *(_DWORD *)(v17 + 380) = *((_DWORD *)a1 + 52);
  *(_DWORD *)(v17 + 376) = 107;
  return 1;
}

void sub_20B9974C0(_QWORD *a1, __int128 *a2, int a3)
{
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  _DWORD *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  int v19;

  v5 = a1 + 1;
  v6 = a1[2];
  if (v6 >= a1[3])
  {
    v7 = sub_20B8AD184(v5, a2);
  }
  else
  {
    sub_20B83C1A0(v5, a2);
    v7 = v6 + 24;
  }
  v8 = a1[6];
  a1[2] = v7;
  v9 = (char *)a1[5];
  if ((unint64_t)v9 >= v8)
  {
    v11 = (char *)a1[4];
    v12 = (v9 - v11) >> 2;
    if ((unint64_t)(v12 + 1) >> 62)
      sub_20B80CDD8();
    v13 = v8 - (_QWORD)v11;
    v14 = (uint64_t)(v8 - (_QWORD)v11) >> 1;
    if (v14 <= v12 + 1)
      v14 = v12 + 1;
    if (v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v15 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    if (v15)
    {
      v16 = (char *)sub_20B8127BC((uint64_t)(a1 + 6), v15);
      v11 = (char *)a1[4];
      v9 = (char *)a1[5];
    }
    else
    {
      v16 = 0;
    }
    v17 = &v16[4 * v12];
    v18 = &v16[4 * v15];
    *(_DWORD *)v17 = a3;
    v10 = v17 + 4;
    while (v9 != v11)
    {
      v19 = *((_DWORD *)v9 - 1);
      v9 -= 4;
      *((_DWORD *)v17 - 1) = v19;
      v17 -= 4;
    }
    a1[4] = v17;
    a1[5] = v10;
    a1[6] = v18;
    if (v11)
      operator delete(v11);
  }
  else
  {
    *(_DWORD *)v9 = a3;
    v10 = v9 + 4;
  }
  a1[5] = v10;
}

uint64_t sub_20B9975C4(uint64_t a1)
{
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = &off_24C461AE0;
  sub_20B7F8B20((_OWORD *)(a1 + 56));
  sub_20B80627C((_QWORD *)(a1 + 104));
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  return a1;
}

void sub_20B997628(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_20B7F8B30(v2);
  sub_20B8A7918(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B99764C(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24C4616D0;
  sub_20B9977B0((void ****)(a1 + 56), 0);
  return sub_20B8A7918(a1);
}

void sub_20B997680(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24C4616D0;
  sub_20B9977B0((void ****)(a1 + 56), 0);
  sub_20B8A7918(a1);
  JUMPOUT(0x20BD39CB0);
}

BOOL sub_20B9976C8(uint64_t a1)
{
  uint64_t **v2;
  _DWORD **v3;
  uint64_t *v4;

  v2 = (uint64_t **)(a1 + 8);
  v3 = (_DWORD **)(a1 + 32);
  v4 = (uint64_t *)operator new();
  sub_20BA2010C(v4, v2, v3);
  sub_20B9977B0((void ****)(a1 + 56), (void ***)v4);
  return *(_QWORD *)(a1 + 56) != 0;
}

void sub_20B997734(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x80C40B8603338);
  _Unwind_Resume(a1);
}

uint64_t sub_20B997758()
{
  return 0;
}

uint64_t sub_20B997760(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = *(uint64_t **)(a1 + 56);
  if (v1 && (v2 = *v1) != 0)
    return *(_QWORD *)(v2 + 8);
  else
    return 0;
}

uint64_t sub_20B997780(uint64_t a1)
{
  _QWORD *v1;
  _DWORD *v2;

  v1 = *(_QWORD **)(a1 + 56);
  if (v1 && (v2 = (_DWORD *)*v1) != 0)
    return (v2[4] - v2[2] + v2[6]);
  else
    return 0;
}

void ****sub_20B9977B0(void ****result, void ***a2)
{
  void ***v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    if (*v2)
      sub_20B969128(*v2);
    JUMPOUT(0x20BD39CB0);
  }
  return result;
}

void sub_20B997800(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 3);
        if (v6)
        {
          *((_QWORD *)v4 - 2) = v6;
          operator delete(v6);
        }
        if (*(v4 - 25) < 0)
          operator delete(*((void **)v4 - 6));
        v4 -= 48;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_20B997888(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        sub_20B9978F8(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_20B9978F8(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

_QWORD *sub_20B99793C(_QWORD *a1, size_t a2, _BYTE *a3)
{
  size_t v5;
  _BYTE *v6;
  _BYTE *v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    v5 = a2;
    sub_20B80EEA8(a1, a2);
    v6 = (_BYTE *)a1[1];
    v7 = &v6[v5];
    do
    {
      *v6++ = *a3;
      --v5;
    }
    while (v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_20B99799C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B9979B8(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  _QWORD *v7;
  uint64_t v8;
  size_t v9;

  if (a4)
  {
    v4 = result;
    if (a4 >> 61)
      sub_20B80CDD8();
    result = sub_20B800BE8((uint64_t)(result + 2), a4);
    v7 = result;
    *v4 = result;
    v4[1] = result;
    v4[2] = &result[v8];
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memmove(result, a2, v9);
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_20B997A38(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B997A54(int64x2_t *a1, __int128 *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  int64x2_t v13;
  char *v14;
  char *v16;
  int64x2_t v17;
  char *v18;
  int64x2_t *v19;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((a1->i64[1] - a1->i64[0]) >> 4);
  v3 = v2 + 1;
  if (v2 + 1 > 0x555555555555555)
    sub_20B80CDD8();
  if (0x5555555555555556 * ((a1[1].i64[0] - a1->i64[0]) >> 4) > v3)
    v3 = 0x5555555555555556 * ((a1[1].i64[0] - a1->i64[0]) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[1].i64[0] - a1->i64[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v6 = 0x555555555555555;
  else
    v6 = v3;
  v19 = a1 + 1;
  if (v6)
  {
    if (v6 > 0x555555555555555)
      sub_20B800BC0();
    v7 = (char *)operator new(48 * v6);
  }
  else
  {
    v7 = 0;
  }
  v16 = v7;
  v17.i64[0] = (uint64_t)&v7[48 * v2];
  v18 = &v7[48 * v6];
  sub_20B997BDC(v17.i64[0], a2);
  v8 = v17.i64[0];
  v9 = v17.i64[0] + 48;
  v17.i64[1] = v17.i64[0] + 48;
  v11 = a1->i64[0];
  v10 = a1->u64[1];
  if (v10 == a1->i64[0])
  {
    v13 = vdupq_n_s64(v10);
  }
  else
  {
    do
    {
      v12 = *(_OWORD *)(v10 - 48);
      *(_QWORD *)(v8 - 32) = *(_QWORD *)(v10 - 32);
      *(_OWORD *)(v8 - 48) = v12;
      *(_QWORD *)(v10 - 40) = 0;
      *(_QWORD *)(v10 - 32) = 0;
      *(_QWORD *)(v10 - 48) = 0;
      *(_QWORD *)(v8 - 24) = 0;
      *(_QWORD *)(v8 - 16) = 0;
      *(_QWORD *)(v8 - 8) = 0;
      *(_OWORD *)(v8 - 24) = *(_OWORD *)(v10 - 24);
      *(_QWORD *)(v8 - 8) = *(_QWORD *)(v10 - 8);
      v8 -= 48;
      *(_QWORD *)(v10 - 24) = 0;
      *(_QWORD *)(v10 - 16) = 0;
      *(_QWORD *)(v10 - 8) = 0;
      v10 -= 48;
    }
    while (v10 != v11);
    v13 = *a1;
    v9 = v17.i64[1];
  }
  a1->i64[0] = v8;
  a1->i64[1] = v9;
  v17 = v13;
  v14 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v18;
  v18 = v14;
  v16 = (char *)v13.i64[0];
  sub_20B997C60((uint64_t)&v16);
  return v9;
}

void sub_20B997BC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B997C60((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B997BDC(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20B80ACE0(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  __dst[3] = 0;
  __dst[4] = 0;
  __dst[5] = 0;
  sub_20B9979B8(__dst + 3, *((const void **)a2 + 3), *((_QWORD *)a2 + 4), (uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3);
  return __dst;
}

void sub_20B997C44(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B997C60(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 48;
    sub_20B9978F8(i - 48);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20B997CAC(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    sub_20BA00EDC(result);
    JUMPOUT(0x20BD39CB0);
  }
  return result;
}

uint64_t sub_20B997CE8(uint64_t result, char *a2, unint64_t a3, uint64_t *a4, uint64_t a5)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  char *v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t *v22;
  char *v23;
  uint64_t *v24;
  uint64_t *v25;
  char *v26;
  uint64_t v27;
  char v28;
  uint64_t *v29;
  uint64_t v30;

  if (a3 >= 2)
  {
    v6 = (_QWORD *)result;
    if (a3 == 2)
    {
      result = sub_20B871BA8((_QWORD *)(*((_QWORD *)a2 - 1) + 24), (void **)(*(_QWORD *)result + 24));
      if ((result & 0x80) != 0)
      {
        v7 = *v6;
        *v6 = *((_QWORD *)a2 - 1);
        *((_QWORD *)a2 - 1) = v7;
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      v18 = (char *)a4;
      v19 = a3 >> 1;
      v20 = (char *)(result + 8 * (a3 >> 1));
      v21 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        sub_20B997F44(result, v20, v21, a4);
        v22 = (uint64_t *)&v18[8 * v19];
        result = sub_20B997F44((uint64_t)&v6[a3 >> 1], a2, a3 - (a3 >> 1), v22);
        v23 = &v18[8 * a3];
        v24 = v22;
        while (v24 != (uint64_t *)v23)
        {
          v25 = v24;
          result = sub_20B871BA8((_QWORD *)(*v24 + 24), (void **)(*(_QWORD *)v18 + 24));
          if ((result & 0x80u) != 0)
            v26 = (char *)v25;
          else
            v26 = v18;
          v18 += 8 * ((result & 0x80) == 0);
          v24 = &v25[(result >> 7) & 1];
          *v6++ = *(_QWORD *)v26;
          if (v18 == (char *)v22)
          {
            if (v24 != (uint64_t *)v23)
            {
              v27 = 0;
              if ((result & 0x80u) != 0)
                v28 = 1;
              else
                v28 = 2;
              v29 = &v25[v28 & 1];
              do
              {
                v6[v27] = v29[v27];
                ++v27;
              }
              while (&v29[v27] != (uint64_t *)v23);
            }
            return result;
          }
        }
        if (v18 != (char *)v22)
        {
          v30 = 0;
          do
          {
            v6[v30] = *(_QWORD *)&v18[v30 * 8];
            ++v30;
          }
          while (&v18[v30 * 8] != (char *)v22);
        }
      }
      else
      {
        sub_20B997CE8(result, v20, v21, a4, a5);
        sub_20B997CE8(&v6[a3 >> 1], a2, a3 - (a3 >> 1), v18, a5);
        return sub_20B99815C((uint64_t)v6, (char *)&v6[a3 >> 1], a2, a3 >> 1, a3 - (a3 >> 1), v18, a5);
      }
    }
    else if ((char *)result != a2)
    {
      v9 = (_QWORD *)(result + 8);
      if ((char *)(result + 8) != a2)
      {
        v10 = 0;
        v11 = (_QWORD *)result;
        do
        {
          v12 = *v11;
          v11 = v9;
          result = sub_20B871BA8((_QWORD *)(*v9 + 24), (void **)(v12 + 24));
          if ((result & 0x80) != 0)
          {
            v13 = *v11;
            v14 = (_QWORD *)(*v11 + 24);
            v15 = v10;
            while (1)
            {
              *(_QWORD *)((char *)v6 + v15 + 8) = *(_QWORD *)((char *)v6 + v15);
              if (!v15)
                break;
              result = sub_20B871BA8(v14, (void **)(*(_QWORD *)((char *)v6 + v15 - 8) + 24));
              v15 -= 8;
              if ((result & 0x80) == 0)
              {
                v16 = (_QWORD *)((char *)v6 + v15 + 8);
                goto LABEL_15;
              }
            }
            v16 = v6;
LABEL_15:
            *v16 = v13;
          }
          v9 = v11 + 1;
          v10 += 8;
        }
        while (v11 + 1 != (_QWORD *)a2);
      }
    }
  }
  return result;
}

uint64_t sub_20B997F44(uint64_t result, char *a2, unint64_t a3, uint64_t *a4)
{
  uint64_t *v4;
  char *v6;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;

  if (a3)
  {
    v4 = a4;
    v6 = (char *)result;
    if (a3 == 1)
    {
LABEL_9:
      *v4 = *(_QWORD *)v6;
      return result;
    }
    if (a3 == 2)
    {
      v8 = a2 - 8;
      result = sub_20B871BA8((_QWORD *)(*((_QWORD *)a2 - 1) + 24), (void **)(*(_QWORD *)result + 24));
      if ((result & 0x80u) == 0)
        v9 = v6;
      else
        v9 = v8;
      *v4++ = *(_QWORD *)v9;
      if ((result & 0x80u) == 0)
        v6 = v8;
      goto LABEL_9;
    }
    if ((uint64_t)a3 > 8)
    {
      v18 = result + 8 * (a3 >> 1);
      sub_20B997CE8(result, v18, a3 >> 1, a4, a3 >> 1);
      result = sub_20B997CE8(&v6[8 * (a3 >> 1)], a2, a3 - (a3 >> 1), &v4[a3 >> 1], a3 - (a3 >> 1));
      v19 = &v6[8 * (a3 >> 1)];
      while (v19 != a2)
      {
        v20 = v19;
        result = sub_20B871BA8((_QWORD *)(*(_QWORD *)v19 + 24), (void **)(*(_QWORD *)v6 + 24));
        if ((result & 0x80u) != 0)
          v21 = v20;
        else
          v21 = v6;
        v19 = &v20[8 * ((result >> 7) & 1)];
        v6 += 8 * ((result & 0x80) == 0);
        *v4++ = *(_QWORD *)v21;
        if (v6 == (char *)v18)
        {
          if (v19 != a2)
          {
            v22 = 0;
            v23 = &v20[((char)result >> 4) & 8];
            do
            {
              v4[v22] = *(_QWORD *)&v23[v22 * 8];
              ++v22;
            }
            while (&v23[v22 * 8] != a2);
          }
          return result;
        }
      }
      if (v6 != (char *)v18)
      {
        v24 = 0;
        do
        {
          v4[v24] = *(_QWORD *)&v6[v24 * 8];
          ++v24;
        }
        while (&v6[v24 * 8] != (char *)v18);
      }
    }
    else if ((char *)result != a2)
    {
      v10 = result + 8;
      *a4 = *(_QWORD *)result;
      if ((char *)(result + 8) != a2)
      {
        v11 = 0;
        v12 = a4;
        do
        {
          v13 = v12;
          v14 = *v12++;
          result = sub_20B871BA8((_QWORD *)(*(_QWORD *)v10 + 24), (void **)(v14 + 24));
          v15 = v12;
          if ((result & 0x80) != 0)
          {
            v13[1] = *v13;
            v15 = v4;
            if (v13 != v4)
            {
              v17 = v11;
              while (1)
              {
                v15 = (uint64_t *)((char *)v4 + v17);
                result = sub_20B871BA8((_QWORD *)(*(_QWORD *)v10 + 24), (void **)(*(uint64_t *)((char *)v4 + v17 - 8) + 24));
                if ((result & 0x80) == 0)
                  break;
                *v15 = *(v15 - 1);
                v17 -= 8;
                if (!v17)
                {
                  v15 = v4;
                  break;
                }
              }
            }
          }
          v16 = *(_QWORD *)v10;
          v10 += 8;
          *v15 = v16;
          v11 += 8;
        }
        while ((char *)v10 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_20B99815C(uint64_t result, char *a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  uint64_t v9;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  char *v40;
  size_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  BOOL v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  unint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *__src;
  char *v83;

  if (a5)
  {
    v9 = a5;
    v13 = (char *)result;
    while (a4 > a7 && v9 > a7)
    {
      if (!a4)
        return result;
      v14 = 0;
      v15 = -a4;
      while (1)
      {
        result = sub_20B871BA8((_QWORD *)(*(_QWORD *)a2 + 24), (void **)(*(_QWORD *)&v13[v14] + 24));
        if ((result & 0x80) != 0)
          break;
        v14 += 8;
        if (__CFADD__(v15++, 1))
          return result;
      }
      v17 = -v15;
      v81 = &v13[v14];
      __src = a6;
      v83 = a3;
      if (-v15 >= v9)
      {
        if (v15 == -1)
        {
          v74 = *(_QWORD *)&v13[v14];
          *(_QWORD *)&v13[v14] = *(_QWORD *)a2;
          *(_QWORD *)a2 = v74;
          return result;
        }
        if (v15 > 0)
          v17 = 1 - v15;
        v26 = v17 >> 1;
        v21 = &v13[8 * (v17 >> 1) + v14];
        v27 = a3;
        v20 = a2;
        if (a2 != v27)
        {
          v77 = v26;
          v28 = (v83 - a2) >> 3;
          v20 = a2;
          do
          {
            v29 = &v20[8 * (v28 >> 1)];
            v31 = *(_QWORD *)v29;
            v30 = v29 + 8;
            v32 = (char)sub_20B871BA8((_QWORD *)(v31 + 24), (void **)(*(_QWORD *)v21 + 24));
            if (v32 >= 0)
              v28 >>= 1;
            else
              v28 += ~(v28 >> 1);
            if (v32 < 0)
              v20 = v30;
          }
          while (v28);
          v26 = v77;
        }
        v19 = (v20 - a2) >> 3;
      }
      else
      {
        if (v9 >= 0)
          v18 = v9;
        else
          v18 = v9 + 1;
        v19 = v18 >> 1;
        v20 = &a2[8 * (v18 >> 1)];
        v21 = a2;
        if (a2 - v13 != v14)
        {
          v76 = v18 >> 1;
          v78 = a7;
          v22 = (uint64_t)(a2 - v13 - v14) >> 3;
          v21 = &v13[v14];
          do
          {
            v23 = &v21[8 * (v22 >> 1)];
            v25 = *(_QWORD *)v23;
            v24 = v23 + 8;
            if ((sub_20B871BA8((_QWORD *)(*(_QWORD *)v20 + 24), (void **)(v25 + 24)) & 0x80u) != 0)
            {
              v22 >>= 1;
            }
            else
            {
              v21 = v24;
              v22 += ~(v22 >> 1);
            }
          }
          while (v22);
          a7 = v78;
          v19 = v76;
        }
        v26 = (uint64_t)(v21 - v13 - v14) >> 3;
      }
      if (v21 == a2)
      {
        a2 = v20;
      }
      else
      {
        v33 = v20 - a2;
        if (v20 == a2)
        {
          a2 = v21;
        }
        else
        {
          v34 = v21 + 8;
          if (v21 + 8 == a2)
          {
            v79 = a7;
            v39 = *(_QWORD *)v21;
            v40 = a2;
            v41 = v20 - a2;
            v42 = v26;
            v43 = v19;
            memmove(v21, v40, v41);
            v19 = v43;
            v26 = v42;
            a2 = &v21[v33];
            *(_QWORD *)&v21[v33] = v39;
            a7 = v79;
          }
          else
          {
            v35 = a2 + 8;
            if (a2 + 8 == v20)
            {
              v44 = *((_QWORD *)v20 - 1);
              a2 = v21 + 8;
              if (v20 - 8 != v21)
              {
                v45 = v26;
                v46 = v19;
                v80 = *((_QWORD *)v20 - 1);
                memmove(v21 + 8, v21, v20 - 8 - v21);
                v44 = v80;
                v19 = v46;
                v26 = v45;
              }
              *(_QWORD *)v21 = v44;
            }
            else
            {
              v36 = (a2 - v21) >> 3;
              if (v36 == v33 >> 3)
              {
                do
                {
                  v37 = *((_QWORD *)v34 - 1);
                  *((_QWORD *)v34 - 1) = *((_QWORD *)v35 - 1);
                  *((_QWORD *)v35 - 1) = v37;
                  if (v34 == a2)
                    break;
                  v34 += 8;
                  v38 = v35 == v20;
                  v35 += 8;
                }
                while (!v38);
              }
              else
              {
                v47 = v33 >> 3;
                v48 = (a2 - v21) >> 3;
                do
                {
                  v49 = v48;
                  v48 = v47;
                  v47 = v49 % v47;
                }
                while (v47);
                if (v48)
                {
                  v50 = &v21[8 * v48];
                  do
                  {
                    v52 = *((_QWORD *)v50 - 1);
                    v50 -= 8;
                    v51 = v52;
                    v53 = &v50[8 * v36];
                    v54 = v50;
                    do
                    {
                      v55 = v53;
                      *(_QWORD *)v54 = *(_QWORD *)v53;
                      v56 = &v53[8 * v36];
                      v57 = __OFSUB__(v36, (v20 - v53) >> 3);
                      v59 = v36 - ((v20 - v53) >> 3);
                      v58 = (v59 < 0) ^ v57;
                      v53 = &v21[8 * v59];
                      if (v58)
                        v53 = v56;
                      v54 = v55;
                    }
                    while (v53 != v50);
                    *(_QWORD *)v55 = v51;
                  }
                  while (v50 != v21);
                }
                a2 = &v21[8 * (v33 >> 3)];
              }
            }
          }
        }
      }
      a4 = -v26 - v15;
      v60 = v9 - v19;
      if (v26 + v19 >= v9 - (v26 + v19) - v15)
      {
        v62 = a7;
        v63 = a2;
        v64 = v20;
        v65 = v26;
        v66 = v19;
        result = sub_20B99815C(a2, v64, v83, -v26 - v15, v60, __src, v62);
        a2 = v21;
        a6 = __src;
        v60 = v66;
        a4 = v65;
        a3 = v63;
        a7 = v62;
        v13 = v81;
      }
      else
      {
        v61 = v21;
        a6 = __src;
        result = sub_20B99815C(&v13[v14], v61, a2, v26, v19, __src, a7);
        v13 = a2;
        a2 = v20;
        a3 = v83;
      }
      v9 = v60;
      if (!v60)
        return result;
    }
    if (a4 <= v9)
    {
      if (v13 != a2)
      {
        v71 = 0;
        do
        {
          *(_QWORD *)&a6[v71] = *(_QWORD *)&v13[v71];
          v71 += 8;
        }
        while (&v13[v71] != a2);
        if (v71)
        {
          v72 = a6;
          while (a2 != a3)
          {
            result = sub_20B871BA8((_QWORD *)(*(_QWORD *)a2 + 24), (void **)(*(_QWORD *)v72 + 24));
            if ((result & 0x80u) != 0)
              v73 = a2;
            else
              v73 = v72;
            a2 += 8 * ((result >> 7) & 1);
            v72 += 8 * ((result & 0x80) == 0);
            *(_QWORD *)v13 = *(_QWORD *)v73;
            v13 += 8;
            if (&a6[v71] == v72)
              return result;
          }
          return (uint64_t)memmove(v13, v72, a6 - v72 + v71);
        }
      }
    }
    else if (a3 != a2)
    {
      v67 = 0;
      do
      {
        *(_QWORD *)&a6[v67] = *(_QWORD *)&a2[v67];
        v67 += 8;
      }
      while (&a2[v67] != a3);
      if (v67)
      {
        v68 = &a6[v67];
        v69 = a3 - 8;
        while (a2 != v13)
        {
          result = sub_20B871BA8((_QWORD *)(*((_QWORD *)v68 - 1) + 24), (void **)(*((_QWORD *)a2 - 1) + 24));
          if ((result & 0x80u) == 0)
            v70 = v68;
          else
            v70 = a2;
          if ((result & 0x80u) == 0)
            v68 -= 8;
          else
            a2 -= 8;
          *(_QWORD *)v69 = *((_QWORD *)v70 - 1);
          v69 -= 8;
          if (v68 == a6)
            return result;
        }
        v75 = 0;
        do
        {
          *(_QWORD *)&v69[v75] = *(_QWORD *)&v68[v75 - 8];
          v75 -= 8;
        }
        while (&v68[v75] != a6);
      }
    }
  }
  return result;
}

char *sub_20B998698(char *result, char *a2, unint64_t a3, unsigned int *a4, uint64_t a5)
{
  char *v6;
  unsigned int v7;
  int v8;
  char v9;
  unsigned int v10;
  unsigned int v11;
  BOOL v12;
  BOOL v13;
  int v14;
  unsigned int *v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  char *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  BOOL v27;
  char v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  char v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  char *v36;
  int v37;
  char v38;
  unsigned int v39;
  BOOL v40;
  char *v41;
  unsigned int *v42;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int v45;
  char v46;
  unsigned int v47;
  unsigned int v48;
  BOOL v49;
  unsigned int *v50;
  uint64_t v51;
  unsigned int *v52;
  char *v53;
  uint64_t v54;
  unsigned int *v55;
  char *v56;

  if (a3 >= 2)
  {
    v6 = result;
    if (a3 == 2)
    {
      v7 = *((_DWORD *)a2 - 2);
      v8 = *(_DWORD *)result;
      v9 = -1;
      if (v7 >= *(_DWORD *)result)
        v9 = 1;
      if (v7 == v8)
      {
        v10 = *((_DWORD *)a2 - 1);
        v11 = *((_DWORD *)result + 1);
        v12 = v10 >= v11;
        v13 = v10 == v11;
        v9 = -1;
        if (v12)
          v9 = 1;
        if (v13)
          v9 = 0;
      }
      if (v9 < 0)
      {
        *(_DWORD *)result = v7;
        *((_DWORD *)a2 - 2) = v8;
        v14 = *((_DWORD *)result + 1);
        *((_DWORD *)result + 1) = *((_DWORD *)a2 - 1);
        *((_DWORD *)a2 - 1) = v14;
      }
    }
    else if ((uint64_t)a3 <= 0)
    {
      if (result != a2)
      {
        v21 = (unsigned int *)(result + 8);
        if (result + 8 != a2)
        {
          v22 = 0;
          v23 = result;
          do
          {
            v24 = v21;
            v25 = *v21;
            v26 = *(_DWORD *)v23;
            v27 = v25 == *(_DWORD *)v23;
            if (v25 >= *(_DWORD *)v23)
              v28 = 1;
            else
              v28 = -1;
            if (v27)
            {
              v29 = *((_DWORD *)v23 + 3);
              v30 = *((_DWORD *)v23 + 1);
              v31 = v29 == v30;
              if (v29 >= v30)
                v32 = 1;
              else
                v32 = -1;
              if (v31)
                v28 = 0;
              else
                v28 = v32;
            }
            if (v28 < 0)
            {
              v33 = *v24;
              v34 = v24[1];
              v35 = v22;
              while (1)
              {
                v36 = &result[v35];
                v37 = *(_DWORD *)&result[v35 + 4];
                *((_DWORD *)v36 + 2) = v26;
                *((_DWORD *)v36 + 3) = v37;
                if (!v35)
                  break;
                v26 = *((_DWORD *)v36 - 2);
                if (v26 <= v33)
                  v38 = 1;
                else
                  v38 = -1;
                if (v26 == v33)
                {
                  v39 = *(_DWORD *)&result[v35 - 4];
                  v40 = v39 == v34;
                  v38 = v39 <= v34 ? 1 : -1;
                  if (v40)
                    v38 = 0;
                }
                v35 -= 8;
                if ((v38 & 0x80) == 0)
                {
                  v41 = &result[v35 + 8];
                  goto LABEL_46;
                }
              }
              v41 = result;
LABEL_46:
              *(_DWORD *)v41 = v33;
              *((_DWORD *)v41 + 1) = v34;
            }
            v21 = v24 + 2;
            v22 += 8;
            v23 = (char *)v24;
          }
          while (v24 + 2 != (unsigned int *)a2);
        }
      }
    }
    else
    {
      v17 = a4;
      v18 = a3 >> 1;
      v19 = &result[8 * (a3 >> 1)];
      v20 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        sub_20B998970(result, v19, v20, a4);
        v42 = &v17[2 * v18];
        result = sub_20B998970(&v6[8 * (a3 >> 1)], a2, a3 - (a3 >> 1), v42);
        v43 = &v17[2 * a3];
        v44 = v42;
        while (v44 != v43)
        {
          v45 = *v44;
          if (*v44 >= *v17)
            v46 = 1;
          else
            v46 = -1;
          if (v45 == *v17)
          {
            v47 = v44[1];
            v48 = v17[1];
            v49 = v47 == v48;
            v46 = v47 >= v48 ? 1 : -1;
            if (v49)
              v46 = 0;
          }
          if (v46 < 0)
          {
            v50 = v44;
          }
          else
          {
            v45 = *v17;
            v50 = v17;
          }
          if (v46 < 0)
            v44 += 2;
          else
            v17 += 2;
          *(_DWORD *)v6 = v45;
          *((_DWORD *)v6 + 1) = v50[1];
          v6 += 8;
          if (v17 == v42)
          {
            if (v44 != v43)
            {
              v51 = 0;
              do
              {
                v52 = &v44[v51];
                v53 = &v6[v51 * 4];
                *(_DWORD *)v53 = v44[v51];
                *((_DWORD *)v53 + 1) = v44[v51 + 1];
                v51 += 2;
              }
              while (v52 + 2 != v43);
            }
            return result;
          }
        }
        if (v17 != v42)
        {
          v54 = 0;
          do
          {
            v55 = &v17[v54];
            v56 = &v6[v54 * 4];
            *(_DWORD *)v56 = v17[v54];
            *((_DWORD *)v56 + 1) = v17[v54 + 1];
            v54 += 2;
          }
          while (v55 + 2 != v42);
        }
      }
      else
      {
        sub_20B998698(result, v19, v20, a4, a5);
        sub_20B998698(&v6[8 * (a3 >> 1)], a2, a3 - (a3 >> 1), v17, a5);
        return sub_20B998C08(v6, &v6[8 * (a3 >> 1)], a2, a3 >> 1, a3 - (a3 >> 1), (char *)v17, a5);
      }
    }
  }
  return result;
}

char *sub_20B998970(char *result, char *a2, unint64_t a3, unsigned int *a4)
{
  unsigned int *v4;
  char *v6;
  unsigned int v8;
  BOOL v9;
  char v10;
  unsigned int v11;
  unsigned int v12;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  char *v16;
  unsigned int *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  BOOL v23;
  char v24;
  unsigned int v25;
  unsigned int v26;
  BOOL v27;
  unsigned int *v28;
  uint64_t v29;
  unsigned int v30;
  char v31;
  unsigned int v32;
  unsigned int v33;
  BOOL v34;
  unsigned int *v35;
  unsigned int v36;
  char *v37;
  char *v38;
  char *v39;
  unint64_t v40;
  unsigned int v41;
  unsigned int v42;
  BOOL v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;

  if (a3)
  {
    v4 = a4;
    v6 = result;
    if (a3 == 1)
    {
LABEL_19:
      *(_QWORD *)v4 = *(_QWORD *)v6;
      return result;
    }
    if (a3 == 2)
    {
      v8 = *((_DWORD *)a2 - 2);
      v9 = v8 == *(_DWORD *)result;
      if (v8 >= *(_DWORD *)result)
        v10 = 1;
      else
        v10 = -1;
      if (v9)
      {
        v11 = *((_DWORD *)a2 - 1);
        v12 = *((_DWORD *)result + 1);
        v13 = v11 >= v12;
        v14 = v11 == v12;
        v10 = -1;
        if (v13)
          v10 = 1;
        if (v14)
          v10 = 0;
      }
      v15 = (v10 & 0x80) == 0;
      if (v10 < 0)
        v16 = a2 - 8;
      else
        v16 = result;
      *(_QWORD *)a4 = *(_QWORD *)v16;
      v4 = a4 + 2;
      if (v15)
        v6 = a2 - 8;
      goto LABEL_19;
    }
    if ((uint64_t)a3 > 8)
    {
      v37 = &result[8 * (a3 >> 1)];
      sub_20B998698(result, v37, a3 >> 1, a4, a3 >> 1);
      result = (char *)sub_20B998698(&v6[8 * (a3 >> 1)], a2, a3 - (a3 >> 1), &v4[2 * (a3 >> 1)], a3 - (a3 >> 1));
      v38 = &v6[8 * (a3 >> 1)];
      while (v38 != a2)
      {
        v39 = v38;
        if (*(_DWORD *)v38 >= *(_DWORD *)v6)
          v40 = 1;
        else
          v40 = 255;
        if (*(_DWORD *)v38 == *(_DWORD *)v6)
        {
          v41 = *((_DWORD *)v38 + 1);
          v42 = *((_DWORD *)v6 + 1);
          v43 = v41 == v42;
          v40 = v41 >= v42 ? 1 : 255;
          if (v43)
            v40 = 0;
        }
        v44 = v40 & 0x80;
        if ((v40 & 0x80) != 0)
          v45 = v39;
        else
          v45 = v6;
        v38 = &v39[v44 >> 4];
        v6 += (v44 >> 4) ^ 8;
        *(_QWORD *)v4 = *(_QWORD *)v45;
        v4 += 2;
        if (v6 == v37)
        {
          if (v38 != a2)
          {
            v46 = 0;
            v47 = &v39[(v40 >> 4) & 8];
            do
            {
              *(_QWORD *)&v4[v46] = *(_QWORD *)&v47[v46 * 4];
              v46 += 2;
            }
            while (&v47[v46 * 4] != a2);
          }
          return result;
        }
      }
      if (v6 != v37)
      {
        v48 = 0;
        do
        {
          *(_QWORD *)&v4[v48] = *(_QWORD *)&v6[v48 * 4];
          v48 += 2;
        }
        while (&v6[v48 * 4] != v37);
      }
    }
    else if (result != a2)
    {
      v17 = (unsigned int *)(result + 8);
      *(_QWORD *)a4 = *(_QWORD *)result;
      if (result + 8 != a2)
      {
        v18 = 0;
        v19 = a4;
        v20 = a4;
        do
        {
          v21 = v17;
          v22 = *v20;
          v20 += 2;
          v23 = *v17 == v22;
          if (*v17 >= v22)
            v24 = 1;
          else
            v24 = -1;
          if (v23)
          {
            v25 = *((_DWORD *)v6 + 3);
            v26 = v19[1];
            v27 = v25 == v26;
            v24 = v25 >= v26 ? 1 : -1;
            if (v27)
              v24 = 0;
          }
          if (v24 < 0)
          {
            *((_QWORD *)v19 + 1) = *(_QWORD *)v19;
            v28 = a4;
            if (v19 != a4)
            {
              v29 = v18;
              while (1)
              {
                v30 = *(unsigned int *)((char *)a4 + v29 - 8);
                if (*v21 >= v30)
                  v31 = 1;
                else
                  v31 = -1;
                if (*v21 == v30)
                {
                  v32 = *((_DWORD *)v6 + 3);
                  v33 = *(unsigned int *)((char *)a4 + v29 - 4);
                  v34 = v32 == v33;
                  v31 = v32 >= v33 ? 1 : -1;
                  if (v34)
                    v31 = 0;
                }
                if ((v31 & 0x80) == 0)
                  break;
                v35 = (unsigned int *)((char *)a4 + v29);
                v36 = *(unsigned int *)((char *)a4 + v29 - 4);
                *v35 = v30;
                v35[1] = v36;
                v29 -= 8;
                if (!v29)
                {
                  v28 = a4;
                  goto LABEL_52;
                }
              }
              v28 = (unsigned int *)((char *)a4 + v29);
            }
LABEL_52:
            *v28 = *v21;
            v28[1] = *((_DWORD *)v6 + 3);
          }
          else
          {
            *(_QWORD *)v20 = *(_QWORD *)v21;
          }
          v17 = v21 + 2;
          v18 += 8;
          v19 = v20;
          v6 = (char *)v21;
        }
        while (v21 + 2 != (unsigned int *)a2);
      }
    }
  }
  return result;
}

char *sub_20B998C08(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  char v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  unsigned int v23;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char v28;
  unsigned int v29;
  BOOL v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char v39;
  unsigned int v40;
  BOOL v41;
  char *v42;
  unsigned int v43;
  int v44;
  char *v45;
  char *i;
  int v47;
  int v48;
  char *v49;
  char *v50;
  int v51;
  int v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  unsigned int v61;
  unsigned int v62;
  char v63;
  unsigned int v64;
  unsigned int v65;
  BOOL v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  unsigned int v71;
  char v72;
  unsigned int v73;
  unsigned int v74;
  BOOL v75;
  char *v76;
  char *v77;
  int v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  char *v83;

  if (a5)
  {
    while (a4 > a7 && a5 > a7)
    {
      if (!a4)
        return result;
      v10 = 0;
      v11 = *(_DWORD *)a2;
      v12 = -a4;
      while (1)
      {
        v13 = *(_DWORD *)&result[v10];
        if (v11 >= v13)
          v14 = 1;
        else
          v14 = -1;
        if (v11 == v13)
        {
          v15 = *((_DWORD *)a2 + 1);
          v16 = *(_DWORD *)&result[v10 + 4];
          v17 = v15 == v16;
          v14 = v15 >= v16 ? 1 : -1;
          if (v17)
            v14 = 0;
        }
        if (v14 < 0)
          break;
        v10 += 8;
        if (__CFADD__(v12++, 1))
          return result;
      }
      if (-v12 >= a5)
      {
        if (v12 == -1)
        {
          v77 = &result[v10];
          *(_DWORD *)v77 = v11;
          *(_DWORD *)a2 = v13;
          v78 = *((_DWORD *)v77 + 1);
          *((_DWORD *)v77 + 1) = *((_DWORD *)a2 + 1);
          *((_DWORD *)a2 + 1) = v78;
          return result;
        }
        if (v12 <= 0)
          v33 = -v12;
        else
          v33 = 1 - v12;
        v32 = v33 >> 1;
        v22 = &result[8 * (v33 >> 1) + v10];
        v21 = a2;
        if (a2 != a3)
        {
          v34 = *(_DWORD *)v22;
          v35 = *((_DWORD *)v22 + 1);
          v36 = (a3 - a2) >> 3;
          v21 = a2;
          do
          {
            v37 = v36 >> 1;
            v38 = &v21[8 * (v36 >> 1)];
            if (*(_DWORD *)v38 >= v34)
              v39 = 1;
            else
              v39 = -1;
            if (*(_DWORD *)v38 == v34)
            {
              v40 = *((_DWORD *)v38 + 1);
              v41 = v40 == v35;
              v39 = v40 >= v35 ? 1 : -1;
              if (v41)
                v39 = 0;
            }
            v42 = v38 + 8;
            v36 += ~v37;
            if (v39 < 0)
              v21 = v42;
            else
              v36 = v37;
          }
          while (v36);
        }
        v20 = (v21 - a2) >> 3;
      }
      else
      {
        if (a5 >= 0)
          v19 = a5;
        else
          v19 = a5 + 1;
        v20 = v19 >> 1;
        v21 = &a2[8 * (v19 >> 1)];
        v22 = a2;
        if (a2 - result != v10)
        {
          v23 = *(_DWORD *)v21;
          v24 = *((_DWORD *)v21 + 1);
          v25 = (a2 - result - v10) >> 3;
          v22 = &result[v10];
          do
          {
            v26 = v25 >> 1;
            v27 = &v22[8 * (v25 >> 1)];
            if (*(_DWORD *)v27 <= v23)
              v28 = 1;
            else
              v28 = -1;
            if (*(_DWORD *)v27 == v23)
            {
              v29 = *((_DWORD *)v27 + 1);
              v30 = v29 == v24;
              v28 = v29 <= v24 ? 1 : -1;
              if (v30)
                v28 = 0;
            }
            v31 = v27 + 8;
            v25 += ~v26;
            if (v28 < 0)
              v25 = v26;
            else
              v22 = v31;
          }
          while (v25);
        }
        v32 = (v22 - result - v10) >> 3;
      }
      if (v22 == a2)
      {
        v45 = v21;
      }
      else if (v21 == a2)
      {
        v45 = v22;
      }
      else
      {
        v43 = *(_DWORD *)v22;
        *(_DWORD *)v22 = v11;
        *(_DWORD *)a2 = v43;
        v44 = *((_DWORD *)v22 + 1);
        *((_DWORD *)v22 + 1) = *((_DWORD *)a2 + 1);
        *((_DWORD *)a2 + 1) = v44;
        v45 = v22 + 8;
        for (i = a2 + 8; i != v21; i += 8)
        {
          if (v45 == a2)
            a2 = i;
          v47 = *(_DWORD *)v45;
          *(_DWORD *)v45 = *(_DWORD *)i;
          *(_DWORD *)i = v47;
          v48 = *((_DWORD *)v45 + 1);
          *((_DWORD *)v45 + 1) = *((_DWORD *)i + 1);
          *((_DWORD *)i + 1) = v48;
          v45 += 8;
        }
        if (v45 != a2)
        {
          v49 = v45;
          v50 = a2;
          do
          {
            while (1)
            {
              v51 = *(_DWORD *)v49;
              *(_DWORD *)v49 = *(_DWORD *)v50;
              *(_DWORD *)v50 = v51;
              v52 = *((_DWORD *)v49 + 1);
              *((_DWORD *)v49 + 1) = *((_DWORD *)v50 + 1);
              *((_DWORD *)v50 + 1) = v52;
              v49 += 8;
              v50 += 8;
              if (v50 == v21)
                break;
              if (v49 == a2)
                a2 = v50;
            }
            v50 = a2;
          }
          while (v49 != a2);
        }
      }
      a4 = -v32 - v12;
      v53 = a5 - v20;
      if (v32 + v20 >= a5 - (v32 + v20) - v12)
      {
        v56 = v21;
        v57 = &result[v10];
        sub_20B998C08(v45, v56, a3, a4, a5 - v20, a6, a7);
        result = v57;
        a2 = v22;
        v53 = v20;
        a4 = v32;
        a3 = v45;
      }
      else
      {
        v54 = v22;
        v55 = a3;
        sub_20B998C08(&result[v10], v54, v45, v32, v20, a6, a7);
        a3 = v55;
        result = v45;
        a2 = v21;
      }
      a5 = v53;
      if (!v53)
        return result;
    }
    if (a4 <= a5)
    {
      if (result != a2)
      {
        v68 = 0;
        do
        {
          *(_QWORD *)&a6[v68] = *(_QWORD *)&result[v68];
          v68 += 8;
        }
        while (&result[v68] != a2);
        if (v68)
        {
          v69 = &a6[v68];
          v70 = (uint64_t)&a6[v68 - 8];
          while (a2 != a3)
          {
            v71 = *(_DWORD *)a2;
            if (*(_DWORD *)a2 >= *(_DWORD *)a6)
              v72 = 1;
            else
              v72 = -1;
            if (v71 == *(_DWORD *)a6)
            {
              v73 = *((_DWORD *)a2 + 1);
              v74 = *((_DWORD *)a6 + 1);
              v75 = v73 == v74;
              v72 = v73 >= v74 ? 1 : -1;
              if (v75)
                v72 = 0;
            }
            if (v72 < 0)
            {
              v76 = a2;
            }
            else
            {
              v71 = *(_DWORD *)a6;
              v76 = a6;
            }
            if (v72 < 0)
              a2 += 8;
            else
              a6 += 8;
            *(_DWORD *)result = v71;
            *((_DWORD *)result + 1) = *((_DWORD *)v76 + 1);
            result += 8;
            if (v69 == a6)
              return result;
          }
          v81 = 0;
          do
          {
            v82 = &result[v81];
            v83 = &a6[v81];
            *(_DWORD *)v82 = *(_DWORD *)&a6[v81];
            *((_DWORD *)v82 + 1) = *(_DWORD *)&a6[v81 + 4];
            v81 += 8;
          }
          while ((char *)v70 != v83);
        }
      }
    }
    else if (a3 != a2)
    {
      v58 = 0;
      do
      {
        *(_QWORD *)&a6[v58] = *(_QWORD *)&a2[v58];
        v58 += 8;
      }
      while (&a2[v58] != a3);
      if (v58)
      {
        v59 = &a6[v58];
        v60 = a3 - 4;
        while (a2 != result)
        {
          v61 = *((_DWORD *)a2 - 2);
          v62 = *((_DWORD *)v59 - 2);
          if (v62 >= v61)
            v63 = 1;
          else
            v63 = -1;
          if (v62 == v61)
          {
            v64 = *((_DWORD *)v59 - 1);
            v65 = *((_DWORD *)a2 - 1);
            v66 = v64 == v65;
            v63 = v64 >= v65 ? 1 : -1;
            if (v66)
              v63 = 0;
          }
          if (v63 < 0)
          {
            v67 = a2;
          }
          else
          {
            v61 = *((_DWORD *)v59 - 2);
            v67 = v59;
          }
          if (v63 < 0)
            a2 -= 8;
          else
            v59 -= 8;
          *((_DWORD *)v60 - 1) = v61;
          *(_DWORD *)v60 = *((_DWORD *)v67 - 1);
          v60 -= 8;
          if (v59 == a6)
            return result;
        }
        v79 = 0;
        do
        {
          v80 = &v60[v79];
          *((_DWORD *)v80 - 1) = *(_DWORD *)&v59[v79 - 8];
          *(_DWORD *)v80 = *(_DWORD *)&v59[v79 - 4];
          v79 -= 8;
        }
        while (&v59[v79] != a6);
      }
    }
  }
  return result;
}

uint64_t sub_20B9990E4(int a1, __CFDictionary *a2, void *lpsrc, char a4)
{
  _DWORD *v6;
  uint64_t result;
  unsigned int v8;
  const void **v9;
  const void *v10;
  int v11;
  unsigned int v12;
  const void *v13;

  if (!lpsrc)
    return 0;
  v6 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C5C8, 0);
  result = 0;
  if (v6 && (a4 & 1) == 0)
  {
    if (((*(uint64_t (**)(_DWORD *))(*(_QWORD *)v6 + 88))(v6) & 1) == 0
      && ((*(uint64_t (**)(_DWORD *))(*(_QWORD *)v6 + 80))(v6) & 1) == 0
      && !*((_BYTE *)v6 + 224)
      && ((*(uint64_t (**)(_DWORD *))(*(_QWORD *)v6 + 176))(v6) & 1) == 0)
    {
      v8 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v6 + 96))(v6) - 65;
      if (v8 >= 0x1A || ((0x2848453u >> v8) & 1) == 0)
      {
        v9 = (const void **)MEMORY[0x24BDBD270];
        if ((v6[48] & 0x80000000) == 0)
        {
          v10 = (const void *)*MEMORY[0x24BDBD270];
          CFDictionaryAddValue(a2, CFSTR("candidateWithStaticLMProb"), (const void *)*MEMORY[0x24BDBD270]);
          v11 = v6[48];
          if (v11)
          {
            if (v11 > 3)
            {
LABEL_20:
              v12 = v6[49];
              if ((v12 & 0x80000000) != 0)
                return 1;
              v13 = *v9;
              if (v12)
              {
                if (v12 > 3)
                  goto LABEL_26;
              }
              else
              {
                CFDictionaryAddValue(a2, CFSTR("candidateWithTop1HybridCost"), *v9);
              }
              CFDictionaryAddValue(a2, CFSTR("candidateWithTop4HybridCost"), v13);
LABEL_26:
              CFDictionaryAddValue(a2, CFSTR("candidateWithHybridCost"), v13);
              return 1;
            }
          }
          else
          {
            CFDictionaryAddValue(a2, CFSTR("candidateWithTop1StaticLMProb"), v10);
          }
          CFDictionaryAddValue(a2, CFSTR("candidateWithTop4StaticLMProb"), v10);
          goto LABEL_20;
        }
        if ((v6[49] & 0x80000000) == 0)
          goto LABEL_20;
      }
    }
    return 0;
  }
  return result;
}

void sub_20B9992A4()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B9992B8(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24C45FF48;
  v2 = a1 + 1;
  sub_20B929658(a1 + 7);
  sub_20B9998D4(v2);
  return a1;
}

void sub_20B9992F8(_QWORD *a1)
{
  _QWORD *v1;

  *a1 = &off_24C45FF48;
  v1 = a1 + 1;
  sub_20B929658(a1 + 7);
  sub_20B9998D4(v1);
  JUMPOUT(0x20BD39CB0);
}

void sub_20B999348(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;

  v2 = a1[4] - a1[3];
  v3 = v2 >> 3;
  if ((unint64_t)v2 >= 0x10 && v3 > a2)
  {
    v5 = a2;
    v6 = a1 + 1;
    do
      sub_20B999C0C(v6, v5++);
    while (v3 != v5);
  }
}

uint64_t sub_20B9993A0(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  const void **v6;
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  CFStringRef v16;
  const __CFString *v17;
  int v18;
  const __CFString *v19;
  const __CFString *v20;
  const __CFArray *v21;
  __CFString *Mutable;
  CFIndex Count;
  CFIndex i;
  const __CFString *ValueAtIndex;
  __int16 Length;
  void *v27;
  CFIndex v28;
  const void **v30;
  void *__p[2];
  uint64_t v32;
  __CFString *v33;
  const __CFArray *v34;
  const __CFString *v35;

  *(_DWORD *)(a1 + 8) = a2;
  *(_OWORD *)(a1 + 48) = 0u;
  v6 = (const void **)(a1 + 48);
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  v7 = a1 + 64;
  *(_QWORD *)a1 = &off_24C468608;
  *(_OWORD *)(a1 + 73) = 0u;
  *(_QWORD *)(a1 + 32) = 16;
  *(_QWORD *)(a1 + 40) = 0;
  if (a2 >= 0x258)
  {
    v30 = (const void **)(a1 + 56);
    v12 = *(_QWORD *)(a5 + 72);
    if (v12)
      v13 = *(_QWORD *)(*(_QWORD *)(v12 + 8) + 32);
    else
      v13 = 0;
    if (sub_20B9C45B0(v13, a2))
    {
      v14 = (const void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, a2);
      sub_20B87E150(v6, v14);
      *(_DWORD *)(a1 + 40) = 14;
    }
    else
    {
      v15 = sub_20B978A58(a4, a2);
      if (v15 && (*(_WORD *)(v15 + 4) & 0x800) == 0)
      {
        v16 = sub_20B97895C(a4, a2);
        sub_20B87E150(v6, v16);
      }
    }
    v17 = (const __CFString *)*v6;
    if (*v6)
    {
      v18 = sub_20B8D0E3C(*(_DWORD *)a5);
      v19 = (const __CFString *)sub_20BA31190(v17, v18);
      v20 = v19;
      v35 = v19;
      if (v19)
      {
        v21 = sub_20B8D2F34(v19, *(_DWORD *)a5 == 5);
        v34 = v21;
        if (v21)
        {
          Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0);
          v33 = Mutable;
          Count = CFArrayGetCount(v21);
          sub_20B80FC98(__p, Count);
          if (Count >= 1)
          {
            for (i = 0; i != Count; ++i)
            {
              ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v21, i);
              CFStringAppend(Mutable, ValueAtIndex);
              Length = CFStringGetLength(ValueAtIndex);
              *((_WORD *)__p[0] + i) = Length;
            }
          }
          sub_20B88B52C(v30, Mutable);
          v27 = *(void **)v7;
          if (*(_QWORD *)v7)
          {
            *(_QWORD *)(a1 + 72) = v27;
            operator delete(v27);
            *(_QWORD *)v7 = 0;
            *(_QWORD *)(v7 + 8) = 0;
            *(_QWORD *)(v7 + 16) = 0;
          }
          *(_OWORD *)(a1 + 64) = *(_OWORD *)__p;
          *(_QWORD *)(a1 + 80) = v32;
          __p[1] = 0;
          v32 = 0;
          __p[0] = 0;
          if (*(_QWORD *)(a1 + 56))
          {
            v28 = CFStringGetLength((CFStringRef)*v6);
            *(_QWORD *)(a1 + 16) = a3;
            *(_QWORD *)(a1 + 24) = v28;
            *(_BYTE *)(a1 + 88) = 1;
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
          }
          if (Mutable)
            CFRelease(Mutable);
          CFRelease(v21);
        }
        CFRelease(v20);
      }
    }
  }
  return a1;
}

void sub_20B999608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void **a10, void *__p, uint64_t a12, uint64_t a13, const void *a14, const void *a15, const void *a16)
{
  uint64_t v16;
  const void **v17;
  void **v18;
  void *v20;

  if (__p)
    operator delete(__p);
  sub_20B8A89DC(&a14, 0);
  sub_20B88B74C(&a15, 0);
  sub_20B87E150(&a16, 0);
  v20 = *v18;
  if (*v18)
  {
    *(_QWORD *)(v16 + 72) = v20;
    operator delete(v20);
  }
  sub_20B87E150(a10, 0);
  sub_20B87E150(v17, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9996A8(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  const __CFString *v6;
  CFAllocatorRef *v7;
  CFStringRef Copy;
  const __CFString *v9;
  CFStringRef v10;

  *(_QWORD *)a1 = &off_24C467C40;
  v4 = *(_OWORD *)(a2 + 8);
  v5 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 8) = v4;
  *(_QWORD *)a1 = &off_24C468608;
  v6 = *(const __CFString **)(a2 + 48);
  v7 = (CFAllocatorRef *)MEMORY[0x24BDBD240];
  if (v6)
    Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], v6);
  else
    Copy = 0;
  *(_QWORD *)(a1 + 48) = Copy;
  v9 = *(const __CFString **)(a2 + 56);
  if (v9)
    v10 = CFStringCreateCopy(*v7, v9);
  else
    v10 = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  sub_20B87ACC8((_QWORD *)(a1 + 64), *(const void **)(a2 + 64), *(_QWORD *)(a2 + 72), (uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 1);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  return a1;
}

void sub_20B999774(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B87E150((const void **)(v1 + 48), 0);
  _Unwind_Resume(a1);
}

void sub_20B9997A4(uint64_t a1)
{
  sub_20B99980C(a1);
  JUMPOUT(0x20BD39CB0);
}

const __CFString *sub_20B9997C8(uint64_t a1)
{
  const __CFString *result;

  result = *(const __CFString **)(a1 + 56);
  if (result)
    LOWORD(result) = CFStringGetLength(result);
  return (const __CFString *)(unsigned __int16)result;
}

_QWORD *sub_20B9997E8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return sub_20B87ACC8(a2, *(const void **)(a1 + 64), *(_QWORD *)(a1 + 72), (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 1);
}

uint64_t sub_20B999804(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56);
}

uint64_t sub_20B99980C(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_24C468608;
  v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v2);
  }
  sub_20B87E150((const void **)(a1 + 56), 0);
  sub_20B87E150((const void **)(a1 + 48), 0);
  return a1;
}

_QWORD *sub_20B999860(_QWORD *a1, uint64_t a2)
{
  *a1 = &off_24C45F500;
  a1[1] = a2;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = operator new[]();
  return a1;
}

void sub_20B9998B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;

  v3 = v2;
  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 24) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B9998D4(_QWORD *a1)
{
  uint64_t v2;
  void *v3;

  *a1 = &off_24C45F500;
  sub_20B999938((uint64_t)a1, 0);
  v2 = a1[5];
  if (v2)
    MEMORY[0x20BD39C80](v2, 0x1000C80BDFB0063);
  v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_20B999938(uint64_t result, unint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t i;
  uint64_t v7;

  v3 = (_QWORD *)result;
  v5 = *(_QWORD *)(result + 16);
  v4 = *(_QWORD *)(result + 24);
  for (i = (v4 - v5) >> 3; i > a2; i = (v4 - v5) >> 3)
  {
    result = *(_QWORD *)(v5 + 8 * i - 8);
    if (result)
    {
      v7 = sub_20B882354(result);
      result = MEMORY[0x20BD39CB0](v7, 0x80C407D3415B1);
      v5 = v3[2];
      v4 = v3[3];
    }
    v4 -= 8;
    v3[3] = v4;
  }
  if (!a2)
    return sub_20B9689BC(*(uint64_t **)(*(_QWORD *)(v3[1] + 72) + 8));
  return result;
}

void sub_20B9999CC(_QWORD *a1)
{
  sub_20B9998D4(a1);
  JUMPOUT(0x20BD39CB0);
}

void sub_20B9999F0(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  char **v4;
  unint64_t v5;
  _OWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;

  v3 = a1[2];
  v4 = (char **)(a1 + 2);
  v5 = (a1[3] - v3) >> 3;
  if (v5 >= a3)
  {
    if (v5 == a3)
    {
      v9 = (_OWORD *)operator new();
      *v9 = 0u;
      v9[1] = 0u;
      v9[2] = 0u;
      v10 = a1[4];
      v11 = (_QWORD *)a1[3];
      if ((unint64_t)v11 >= v10)
      {
        v13 = ((char *)v11 - *v4) >> 3;
        if ((unint64_t)(v13 + 1) >> 61)
          sub_20B99A620();
        v14 = v10 - (_QWORD)*v4;
        v15 = v14 >> 2;
        if (v14 >> 2 <= (unint64_t)(v13 + 1))
          v15 = v13 + 1;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
          v16 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v16 = v15;
        if (v16)
          v17 = (char *)sub_20B800BE8((uint64_t)(a1 + 4), v16);
        else
          v17 = 0;
        v18 = &v17[8 * v13];
        v19 = &v17[8 * v16];
        *(_QWORD *)v18 = v9;
        v12 = v18 + 8;
        v21 = (char *)a1[2];
        v20 = (char *)a1[3];
        if (v20 != v21)
        {
          do
          {
            v22 = *((_QWORD *)v20 - 1);
            v20 -= 8;
            *((_QWORD *)v18 - 1) = v22;
            v18 -= 8;
          }
          while (v20 != v21);
          v20 = *v4;
        }
        a1[2] = v18;
        a1[3] = v12;
        a1[4] = v19;
        if (v20)
          operator delete(v20);
      }
      else
      {
        *v11 = v9;
        v12 = v11 + 1;
      }
      a1[3] = v12;
      v3 = a1[2];
    }
    sub_20B999B38(*(void ***)(v3 + 8 * a3), a2);
  }
}

void sub_20B999B38(void **a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = (unint64_t)a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = ((char *)v7 - (_BYTE *)*a1) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      sub_20B929898();
    v10 = v5 - (_QWORD)*a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)sub_20B800BE8(v4, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = a2;
    v8 = v14 + 8;
    v17 = (char *)*a1;
    v16 = (char *)a1[1];
    if (v16 != *a1)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *((_QWORD *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      v16 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v8;
    a1[2] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v7 = a2;
    v8 = v7 + 1;
  }
  a1[1] = v8;
}

void sub_20B999C0C(_QWORD *a1, unint64_t a2)
{
  uint64_t ***v2;
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;

  v2 = (uint64_t ***)a1[2];
  if (a2 < (uint64_t)(a1[3] - (_QWORD)v2) >> 3)
  {
    if (a2 > 1)
      goto LABEL_7;
    if ((*v2)[4] == (*v2)[3])
      sub_20B999CA8((uint64_t)a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[1] + 72) + 8) + 8), *v2);
    if (a2)
    {
      v2 = (uint64_t ***)a1[2];
LABEL_7:
      v5 = v2[a2 - 1];
      v6 = v5[3];
      v7 = v5[4];
      while (v6 != v7)
      {
        v8 = *v6++;
        sub_20B999CA8((uint64_t)a1, v8, *(uint64_t ***)(a1[2] + 8 * a2));
      }
    }
  }
}

void sub_20B999CA8(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  const __CFString *v8;
  uint64_t CursorByAdvancingWithCharacters;
  CFRange v10;

  if (LMLexiconCursorHasChildren())
  {
    v5 = *a3;
    v6 = a3[1];
    while (v5 != v6)
    {
      v7 = *v5;
      v8 = *(const __CFString **)(*v5 + 8);
      v10.length = CFStringGetLength(v8);
      v10.location = 0;
      CFStringGetCharacters(v8, v10, *(UniChar **)(a1 + 40));
      CFStringGetLength(*(CFStringRef *)(v7 + 8));
      CursorByAdvancingWithCharacters = LMLexiconGetCursorByAdvancingWithCharacters();
      if (CursorByAdvancingWithCharacters)
        sub_20B999D74(a3, CursorByAdvancingWithCharacters);
      ++v5;
    }
  }
}

void sub_20B999D74(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v6 = a1[5];
  v4 = (uint64_t)(a1 + 5);
  v5 = v6;
  v7 = *(_QWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = (void **)(v4 - 16);
    v10 = *(_QWORD *)(v4 - 16);
    v11 = ((uint64_t)v7 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61)
      sub_20B8AD01C();
    v12 = v5 - v10;
    v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
      v15 = (char *)sub_20B800BE8(v4, v14);
    else
      v15 = 0;
    v16 = &v15[8 * v11];
    v17 = &v15[8 * v14];
    *(_QWORD *)v16 = a2;
    v8 = v16 + 8;
    v19 = (char *)a1[3];
    v18 = (char *)a1[4];
    if (v18 != v19)
    {
      do
      {
        v20 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      v18 = (char *)*v9;
    }
    a1[3] = v16;
    a1[4] = v8;
    a1[5] = v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v7 = a2;
    v8 = v7 + 1;
  }
  a1[4] = v8;
}

uint64_t sub_20B999E4C(uint64_t result, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  char v13;

  v3 = *(_QWORD *)(result + 16);
  if (a2 < (*(_QWORD *)(result + 24) - v3) >> 3)
  {
    v13 = 0;
    v4 = *(_QWORD *)(v3 + 8 * a2);
    v5 = *(uint64_t **)(v4 + 24);
    v6 = *(uint64_t **)(v4 + 32);
    if (v5 != v6)
    {
      v8 = result;
      do
      {
        v9 = *v5;
        result = LMLexiconCursorHasEntries();
        if ((_DWORD)result)
        {
          v10 = LMLexiconCursorTraversedLength();
          LMLexiconCursorGetTraversedCharacters();
          if (v9)
          {
            if (**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v8 + 8) + 72) + 8))
              LMLexiconCursorFirstTokenID();
          }
          v11 = *(_QWORD *)(v8 + 40);
          LMLanguageModelConditionalProbability();
          result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *))(a3 + 16))(a3, v11, v10, (int)(v12 * -1000000.0), &v13);
          if (v13)
            break;
        }
        ++v5;
      }
      while (v5 != v6);
    }
  }
  return result;
}

uint64_t sub_20B999F90(uint64_t result, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char v9;

  v3 = *(_QWORD *)(result + 16);
  if (a2 < (*(_QWORD *)(result + 24) - v3) >> 3)
  {
    v9 = 0;
    v4 = *(_QWORD **)(v3 + 8 * a2);
    v5 = v4[1];
    if (*v4 != v5)
    {
      v7 = *v4 + 8;
      do
      {
        result = (*(uint64_t (**)(uint64_t, _QWORD, char *))(a3 + 16))(a3, *(_QWORD *)(v7 - 8), &v9);
        if (v9)
          v8 = 1;
        else
          v8 = v7 == v5;
        v7 += 8;
      }
      while (!v8);
    }
  }
  return result;
}

void sub_20B99A00C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  void *__p[2];
  char v11;

  v2 = sub_20B9547EC();
  sub_20B99A098(a1, __p);
  if (v11 >= 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  sub_20B954D48((uint64_t)v2, 0x80000u, (uint64_t)v8, v3, v4, v5, v6, v7, v9);
  if (v11 < 0)
    operator delete(__p[0]);
}

void sub_20B99A07C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B99A098@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t **v3;
  uint64_t v4;
  std::locale::id *v5;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  uint64_t v11;
  uint64_t v12;
  std::locale::__imp *locale;
  size_t v14;
  _QWORD *v15;
  std::locale::id *v16;
  const std::locale::facet *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  const std::locale::facet *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  CFIndex v25;
  const __CFString *v26;
  std::locale::__imp *v27;
  size_t v28;
  _QWORD *v29;
  _QWORD *v30;
  const std::locale::facet *v31;
  const std::locale::facet *v32;
  uint64_t v33;
  uint64_t **v36;
  uint64_t **v37;
  _QWORD v38[2];
  uint64_t v39;
  _QWORD v40[10];
  char v41;
  uint64_t v42;
  std::locale v43;

  sub_20B83BFEC((uint64_t)v38);
  v3 = *(uint64_t ***)(a1 + 16);
  v36 = *(uint64_t ***)(a1 + 24);
  if (v3 != v36)
  {
    v4 = 0;
    v5 = (std::locale::id *)MEMORY[0x24BEDB350];
    do
    {
      v6 = *v3;
      sub_20B828F84(&v39, (uint64_t)"------------Characters at pos ", 30);
      v7 = (_QWORD *)std::ostream::operator<<();
      sub_20B828F84(v7, (uint64_t)", ", 2);
      v8 = (_QWORD *)std::ostream::operator<<();
      v9 = sub_20B828F84(v8, (uint64_t)" characters --------------- ", 28);
      std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
      v10 = std::locale::use_facet(&v43, v5);
      ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
      std::locale::~locale(&v43);
      std::ostream::put();
      std::ostream::flush();
      v11 = *v6;
      v12 = v6[1];
      while (v11 != v12)
      {
        sub_20B8D154C(*(const __CFString **)(*(_QWORD *)v11 + 8), (char **)&v43);
        locale = v43.__locale_;
        v14 = strlen((const char *)v43.__locale_);
        v15 = sub_20B828F84(&v39, (uint64_t)v43.__locale_, v14);
        sub_20B828F84(v15, (uint64_t)", ", 2);
        if (locale)
          MEMORY[0x20BD39C80](locale, 0x1000C8077774924);
        v11 += 8;
      }
      std::ios_base::getloc((const std::ios_base *)((char *)&v40[-1] + *(_QWORD *)(v39 - 24)));
      v16 = (std::locale::id *)MEMORY[0x24BEDB350];
      v17 = std::locale::use_facet(&v43, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
      std::locale::~locale(&v43);
      std::ostream::put();
      std::ostream::flush();
      sub_20B828F84(&v39, (uint64_t)"------------words at pos ", 25);
      v18 = (_QWORD *)std::ostream::operator<<();
      sub_20B828F84(v18, (uint64_t)", ", 2);
      v19 = (_QWORD *)std::ostream::operator<<();
      v20 = sub_20B828F84(v19, (uint64_t)" cursors --------------- ", 25);
      std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(_QWORD *)(*v20 - 24)));
      v21 = std::locale::use_facet(&v43, v16);
      ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
      std::locale::~locale(&v43);
      std::ostream::put();
      std::ostream::flush();
      v37 = v3;
      v23 = (uint64_t *)v6[3];
      v22 = (uint64_t *)v6[4];
      while (v23 != v22)
      {
        v24 = *v23;
        if (LMLexiconCursorHasEntries())
        {
          v25 = LMLexiconCursorTraversedLength();
          LMLexiconCursorGetTraversedCharacters();
          v26 = CFStringCreateWithCharacters(0, *(const UniChar **)(a1 + 40), v25);
          sub_20B8D154C(v26, (char **)&v43);
          v27 = v43.__locale_;
          v28 = strlen((const char *)v43.__locale_);
          v29 = sub_20B828F84(&v39, (uint64_t)v43.__locale_, v28);
          sub_20B828F84(v29, (uint64_t)"(", 1);
          if (v24 && **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) + 8))
            LMLexiconCursorFirstTokenID();
          LMLanguageModelConditionalProbability();
          v30 = (_QWORD *)std::ostream::operator<<();
          sub_20B828F84(v30, (uint64_t)"),", 2);
          CFRelease(v26);
          if (v27)
            MEMORY[0x20BD39C80](v27, 0x1000C8077774924);
        }
        ++v23;
      }
      std::ios_base::getloc((const std::ios_base *)((char *)&v40[-1] + *(_QWORD *)(v39 - 24)));
      v5 = (std::locale::id *)MEMORY[0x24BEDB350];
      v31 = std::locale::use_facet(&v43, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v31->__vftable[2].~facet_0)(v31, 10);
      std::locale::~locale(&v43);
      std::ostream::put();
      std::ostream::flush();
      ++v4;
      v3 = v37 + 1;
    }
    while (v37 + 1 != v36);
  }
  std::ios_base::getloc((const std::ios_base *)((char *)&v40[-1] + *(_QWORD *)(v39 - 24)));
  v32 = std::locale::use_facet(&v43, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v32->__vftable[2].~facet_0)(v32, 10);
  std::locale::~locale(&v43);
  std::ostream::put();
  std::ostream::flush();
  sub_20B871648((uint64_t)v40, a2);
  v38[0] = *MEMORY[0x24BEDB7F0];
  v33 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v38 + *(_QWORD *)(v38[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v39 = v33;
  v40[0] = MEMORY[0x24BEDB848] + 16;
  if (v41 < 0)
    operator delete((void *)v40[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x20BD39C2C](&v42);
}

void sub_20B99A5A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  std::locale::~locale((std::locale *)(v4 - 112));
  sub_20B83C118((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B99A620()
{
  sub_20B80AD80("vector");
}

uint64_t sub_20B99A634(uint64_t a1, const __CFURL *a2)
{
  uint64_t v4;
  __n128 v5;
  char *v6;
  void **v7;
  void *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  void *__p[2];
  char v31;
  UInt8 buffer[8];
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24C461790;
  v4 = operator new();
  v5.n128_f64[0] = sub_20B82E8E0(v4);
  if (!a2 || !CFURLResourceIsReachable(a2, 0))
    goto LABEL_9;
  if (CFURLGetFileSystemRepresentation(a2, 1u, buffer, 1024))
    v6 = (char *)buffer;
  else
    v6 = (char *)&unk_20BA71DF9;
  sub_20B80BBD0(__p, v6);
  if ((v31 & 0x80000000) == 0)
  {
    if (v31)
    {
      v7 = __p;
      goto LABEL_12;
    }
LABEL_9:
    *(_QWORD *)(a1 + 8) = 0;
LABEL_18:
    (*(void (**)(uint64_t, __n128))(*(_QWORD *)v4 + 8))(v4, v5);
    goto LABEL_19;
  }
  if (!__p[1])
  {
LABEL_13:
    v9 = 0;
    goto LABEL_15;
  }
  v7 = (void **)__p[0];
LABEL_12:
  (*(void (**)(UInt8 *__return_ptr, uint64_t, void **))(*(_QWORD *)v4 + 16))(buffer, v4, v7);
  v8 = *(void **)buffer;
  sub_20B853D84((uint64_t *)buffer);
  if (v8)
    goto LABEL_13;
  (*(void (**)(UInt8 *__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)v4 + 96))(buffer, v4, "bos", 3);
  sub_20B853D84((uint64_t *)buffer);
  v9 = v4;
  v4 = 0;
LABEL_15:
  v10 = v31;
  *(_QWORD *)(a1 + 8) = v9;
  if (v10 < 0)
    operator delete(__p[0]);
  if (v4)
    goto LABEL_18;
LABEL_19:
  *(_QWORD *)(a1 + 16) = &off_24C4699A8;
  *(_QWORD *)(a1 + 40) = a1 + 16;
  v11 = *(_QWORD *)(a1 + 8);
  if (!v11)
  {
    *(_DWORD *)(a1 + 48) = 0;
    goto LABEL_43;
  }
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 496))(v11);
  v13 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 48) = v12;
  if (!v13)
  {
LABEL_43:
    *(_QWORD *)(a1 + 52) = 0;
    goto LABEL_44;
  }
  v14 = (*(uint64_t (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)v13 + 504))(v13, "▁", 3);
  v15 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 52) = v14;
  if (!v15)
  {
    *(_QWORD *)(a1 + 56) = 0;
LABEL_48:
    *(_QWORD *)(a1 + 64) = 0;
LABEL_49:
    v28 = 0;
    *(_QWORD *)(a1 + 72) = 0;
    goto LABEL_50;
  }
  v33 = 5;
  strcpy((char *)buffer, "xSYMx");
  v16 = (*(uint64_t (**)(uint64_t, UInt8 *, uint64_t))(*(_QWORD *)v15 + 504))(v15, buffer, 5);
  if (v33 < 0)
    operator delete(*(void **)buffer);
  v17 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 56) = v16;
  if (!v17)
  {
LABEL_44:
    *(_QWORD *)(a1 + 60) = 0;
LABEL_45:
    *(_QWORD *)(a1 + 68) = 0;
LABEL_46:
    v28 = 0;
    *(_DWORD *)(a1 + 76) = 0;
    goto LABEL_50;
  }
  v33 = 6;
  strcpy((char *)buffer, "xOLTRx");
  v18 = (*(uint64_t (**)(uint64_t, UInt8 *, uint64_t))(*(_QWORD *)v17 + 504))(v17, buffer, 6);
  if (v33 < 0)
    operator delete(*(void **)buffer);
  v19 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 60) = v18;
  if (!v19)
    goto LABEL_48;
  v33 = 6;
  strcpy((char *)buffer, "xPERGx");
  v20 = (*(uint64_t (**)(uint64_t, UInt8 *, uint64_t))(*(_QWORD *)v19 + 504))(v19, buffer, 6);
  if (v33 < 0)
    operator delete(*(void **)buffer);
  v21 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 64) = v20;
  if (!v21)
    goto LABEL_45;
  v33 = 6;
  strcpy((char *)buffer, "xPERFx");
  v22 = (*(uint64_t (**)(uint64_t, UInt8 *, uint64_t))(*(_QWORD *)v21 + 504))(v21, buffer, 6);
  if (v33 < 0)
    operator delete(*(void **)buffer);
  v23 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 68) = v22;
  if (!v23)
    goto LABEL_49;
  v33 = 6;
  strcpy((char *)buffer, "xPERLx");
  v24 = (*(uint64_t (**)(uint64_t, UInt8 *, uint64_t))(*(_QWORD *)v23 + 504))(v23, buffer, 6);
  if (v33 < 0)
    operator delete(*(void **)buffer);
  v25 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 72) = v24;
  if (!v25)
    goto LABEL_46;
  v33 = 7;
  strcpy((char *)buffer, "xPROPNx");
  v26 = (*(uint64_t (**)(uint64_t, UInt8 *, uint64_t))(*(_QWORD *)v25 + 504))(v25, buffer, 7);
  if (v33 < 0)
    operator delete(*(void **)buffer);
  v27 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 76) = v26;
  if (v27)
  {
    v33 = 5;
    strcpy((char *)buffer, "xLOCx");
    v28 = (*(uint64_t (**)(uint64_t, UInt8 *, uint64_t))(*(_QWORD *)v27 + 504))(v27, buffer, 5);
    if (v33 < 0)
      operator delete(*(void **)buffer);
  }
  else
  {
    v28 = 0;
  }
LABEL_50:
  *(_DWORD *)(a1 + 80) = v28;
  return a1;
}

void sub_20B99AA94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;

  if (a20 < 0)
    operator delete(__p);
  v23 = *(_QWORD **)(v20 + 40);
  if (v23 == v21)
  {
    v24 = 4;
    v23 = v21;
  }
  else
  {
    if (!v23)
      goto LABEL_8;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_8:
  v25 = *(_QWORD *)(v20 + 8);
  *(_QWORD *)(v20 + 8) = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20B99AB68@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 8) + 168))(&v3);
  return sub_20B853D84(&v3);
}

void sub_20B99ABB4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20B99ABD0@<X0>(uint64_t a1@<X0>, char *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v8;
  char *v9;
  uint64_t v10;
  std::string::size_type size;
  unint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  _DWORD *v26;
  _DWORD *v27;
  int v28;
  _DWORD *v29;
  _DWORD *v30;
  NSObject *v31;
  NSObject *v32;
  int v34;
  char *v35;
  uint64_t *v36;
  std::string *p_p;
  int v38;
  std::string __p;
  uint64_t v40;
  uint8_t buf[4];
  uint64_t *v42;
  __int16 v43;
  std::string *v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 8) + 144))(&v40);
  if (!v40)
  {
    v30 = *(_DWORD **)a4;
    if (*(_QWORD *)a4 != *(_QWORD *)(a4 + 8))
      goto LABEL_35;
  }
  v8 = a2[23];
  if (v8 >= 0)
    v9 = a2;
  else
    v9 = *(char **)a2;
  if (v8 >= 0)
    v10 = a2[23];
  else
    v10 = *((_QWORD *)a2 + 1);
  sub_20B8AE824(v9, v10, (uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v12 = size + 2;
  v13 = *(_DWORD **)a4;
  v14 = *(_QWORD *)(a4 + 8);
  v15 = v14 - *(_QWORD *)a4;
  v16 = v15 >> 2;
  if (size + 2 > v15 >> 2)
  {
    v17 = *(_QWORD *)(a4 + 16);
    if (v12 - v16 > (v17 - v14) >> 2)
    {
      v38 = a3;
      if (v12 >> 62)
        sub_20B80CDD8();
      v18 = v17 - (_QWORD)v13;
      v19 = v18 >> 1;
      if (v18 >> 1 <= v12)
        v19 = size + 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
        v20 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v20 = v19;
      v21 = (char *)sub_20B8127BC(a4 + 16, v20);
      v23 = v22;
      v24 = &v21[4 * v16];
      bzero(v24, ((4 * size - v15 + 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
      v25 = &v21[4 * v23];
      v26 = *(_DWORD **)a4;
      v27 = *(_DWORD **)(a4 + 8);
      if (v27 == *(_DWORD **)a4)
      {
        a3 = v38;
      }
      else
      {
        a3 = v38;
        do
        {
          v28 = *--v27;
          *((_DWORD *)v24 - 1) = v28;
          v24 -= 4;
        }
        while (v27 != v26);
      }
      *(_QWORD *)a4 = v24;
      *(_QWORD *)(a4 + 8) = &v21[4 * v12];
      *(_QWORD *)(a4 + 16) = v25;
      if (v26)
        operator delete(v26);
      goto LABEL_32;
    }
    bzero(*(void **)(a4 + 8), ((4 * size - v15 + 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
    v29 = (_DWORD *)(v14 + 4 * (v12 - v16));
    goto LABEL_28;
  }
  if (v12 < v16)
  {
    v29 = &v13[v12];
LABEL_28:
    *(_QWORD *)(a4 + 8) = v29;
  }
LABEL_32:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_DWORD *)(*(_QWORD *)(a4 + 8) - 4) = *(_DWORD *)(a1 + 52);
  v30 = *(_DWORD **)a4;
LABEL_35:
  *v30 = a3;
  v31 = sub_20B9A7C5C(7u);
  if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
  {
    v32 = sub_20B9A7C5C(7u);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
    {
      v34 = a2[23];
      v35 = *(char **)a2;
      sub_20B99AF14(a4, " ", 1uLL, &__p);
      if (v34 >= 0)
        v36 = (uint64_t *)a2;
      else
        v36 = (uint64_t *)v35;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315394;
      v42 = v36;
      v43 = 2080;
      v44 = p_p;
      _os_log_debug_impl(&dword_20B7F7000, v32, OS_LOG_TYPE_DEBUG, "[SentencePiece tokens] input = [%s]: ids = [%s]", buf, 0x16u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  return sub_20B853D84(&v40);
}

void sub_20B99AEC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
  uint64_t v17;
  void *v19;

  if (a16 < 0)
    operator delete(__p);
  sub_20B853D84(&a17);
  v19 = *(void **)v17;
  if (*(_QWORD *)v17)
  {
    *(_QWORD *)(v17 + 8) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(a1);
}

void sub_20B99AF14(uint64_t a1@<X0>, const std::string::value_type *a2@<X1>, std::string::size_type a3@<X2>, std::string *a4@<X8>)
{
  int *v5;
  std::string *v9;
  std::string::size_type size;
  unint64_t v11;
  std::string *v12;
  std::string::size_type v13;
  std::string v14;

  v5 = *(int **)a1;
  if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
  {
    sub_20B80BBD0(a4, "");
  }
  else
  {
    a4->__r_.__value_.__r.__words[0] = 0;
    a4->__r_.__value_.__l.__size_ = 0;
    a4->__r_.__value_.__r.__words[2] = 0;
    std::to_string(&v14, *v5);
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v9 = &v14;
    else
      v9 = (std::string *)v14.__r_.__value_.__r.__words[0];
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
    else
      size = v14.__r_.__value_.__l.__size_;
    std::string::append(a4, (const std::string::value_type *)v9, size);
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v14.__r_.__value_.__l.__data_);
    if (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1 >= 5uLL)
    {
      v11 = 1;
      do
      {
        std::string::append(a4, a2, a3);
        std::to_string(&v14, *(_DWORD *)(*(_QWORD *)a1 + 4 * v11));
        if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v12 = &v14;
        else
          v12 = (std::string *)v14.__r_.__value_.__r.__words[0];
        if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v13 = HIBYTE(v14.__r_.__value_.__r.__words[2]);
        else
          v13 = v14.__r_.__value_.__l.__size_;
        std::string::append(a4, (const std::string::value_type *)v12, v13);
        if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v14.__r_.__value_.__l.__data_);
        ++v11;
      }
      while (v11 < (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2);
    }
  }
}

void sub_20B99B048(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

void sub_20B99B088(_QWORD **a1@<X0>, _QWORD *a2@<X8>)
{
  NSObject *v4;
  NSObject *v5;
  int v6;
  void **v7;
  void **p_p;
  std::string *v9;
  std::string v10;
  uint64_t v11;
  void *__p;
  char v13;
  uint8_t buf[4];
  void **v15;
  __int16 v16;
  std::string *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  ((void (*)(void **__return_ptr))(*a1)[4])(&__p);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*a1[1] + 144))(&v11);
  sub_20B853D84(&v11);
  v4 = sub_20B9A7C5C(7u);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    v5 = sub_20B9A7C5C(7u);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      v6 = v13;
      v7 = (void **)__p;
      sub_20B99AF14((uint64_t)a2, " ", 1uLL, &v10);
      p_p = &__p;
      if (v6 < 0)
        p_p = v7;
      if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v9 = &v10;
      else
        v9 = (std::string *)v10.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315394;
      v15 = p_p;
      v16 = 2080;
      v17 = v9;
      _os_log_debug_impl(&dword_20B7F7000, v5, OS_LOG_TYPE_DEBUG, "Context: input = [%s]: ids = [%s]", buf, 0x16u);
      if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v10.__r_.__value_.__l.__data_);
    }
  }
  if (v13 < 0)
    operator delete(__p);
}

void sub_20B99B214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;
  void *v21;

  v21 = *(void **)v19;
  if (*(_QWORD *)v19)
  {
    *(_QWORD *)(v19 + 8) = v21;
    operator delete(v21);
  }
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_20B99B250(_DWORD *a1, unsigned int a2)
{
  return a2 < 3
      || a1[14] == a2
      || a1[15] == a2
      || a1[16] == a2
      || a1[17] == a2
      || a1[18] == a2
      || a1[19] == a2
      || a1[20] == a2;
}

void sub_20B99B2B8(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  _BOOL4 v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  const std::string::value_type *v16;
  std::string::size_type v17;
  void *v18;
  void **v19;
  std::string::size_type v20;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  void *__p[2];
  unsigned __int8 v26;

  if (a3)
  {
    a4->__r_.__value_.__r.__words[0] = 0;
    a4->__r_.__value_.__l.__size_ = 0;
    a4->__r_.__value_.__r.__words[2] = 0;
    std::string::reserve(a4, 3 * a3);
    if (a3 != -1)
    {
      v8 = 0;
      v9 = 0;
      v10 = *a2 != 32;
      while (1)
      {
        v11 = v10;
        if (v8 != a3)
          v11 = a2[v8] == 32;
        if (v10 && v11)
          break;
        if (!v10 && !v11)
        {
          while (v8 != v9)
          {
            std::string::push_back(a4, 32);
            ++v9;
          }
          v10 = 1;
          goto LABEL_33;
        }
LABEL_34:
        if (v8++ == a3)
          return;
      }
      v12 = a2[v9];
      v13 = v12 - 48;
      v14 = (unsigned __int16)(v12 + 240);
      if (v13 >= 0xA && v14 > 9)
      {
        v24 = 0;
        v22 = 0u;
        v23 = 0u;
        (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 40))(__p, a1);
        if ((v26 & 0x80u) == 0)
          v19 = __p;
        else
          v19 = (void **)__p[0];
        if ((v26 & 0x80u) == 0)
          v20 = v26;
        else
          v20 = (std::string::size_type)__p[1];
        std::string::append(a4, (const std::string::value_type *)v19, v20);
        if (((char)v26 & 0x80000000) == 0)
          goto LABEL_31;
        v18 = __p[0];
      }
      else
      {
        (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a1 + 48))(&v22, a1);
        if ((SBYTE7(v23) & 0x80u) == 0)
          v16 = (const std::string::value_type *)&v22;
        else
          v16 = (const std::string::value_type *)v22;
        if ((SBYTE7(v23) & 0x80u) == 0)
          v17 = BYTE7(v23);
        else
          v17 = *((_QWORD *)&v22 + 1);
        std::string::append(a4, v16, v17);
        if ((SBYTE7(v23) & 0x80000000) == 0)
          goto LABEL_31;
        v18 = (void *)v22;
      }
      operator delete(v18);
LABEL_31:
      v10 = 0;
LABEL_33:
      v9 = v8;
      goto LABEL_34;
    }
  }
  else
  {
    sub_20B80BBD0(a4, "");
  }
}

void sub_20B99B488(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (*(char *)(v22 + 23) < 0)
    operator delete(*(void **)v22);
  _Unwind_Resume(exception_object);
}

void sub_20B99B4DC(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int16 *v12;
  uint64_t v13;
  _QWORD v14[2];

  v7 = *(_QWORD *)(a2 + 32);
  v5 = a2 + 32;
  v6 = v7;
  v8 = *(char *)(v5 + 23);
  v9 = v8 < 0;
  if (v8 >= 0)
    v6 = v5;
  v10 = *(unsigned __int8 *)(v5 + 23);
  if (v9)
    v10 = *(_QWORD *)(v5 + 8);
  v14[0] = v6;
  v14[1] = v10;
  v11 = *(_QWORD *)(a1 + 40);
  if (!v11)
    sub_20B80BB74();
  v12 = (unsigned __int16 *)(*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v11 + 48))(v11, v14);
  sub_20B99B2B8(a1, v12, v13, a3);
}

void sub_20B99B560(uint64_t a1@<X1>, uint64_t a2@<X2>, std::string *a3@<X8>)
{
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  _BOOL4 v10;
  __int16 *v11;
  uint64_t v12;
  uint64_t v13;
  __int16 *v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  __int16 *v18;
  BOOL v19;
  int v20;
  const char *v21;
  BOOL v22;
  _BOOL4 v23;
  const char *v24;
  _BOOL4 v25;
  int v26;
  unint64_t v27;
  std::string *v28;
  std::string::size_type v29;
  std::string::size_type v30;
  unint64_t v31;
  std::string *p_p;
  std::string::size_type size;
  uint64_t i;
  std::string __p;

  v3 = a2;
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  std::string::reserve(a3, 3 * a2);
  if (v3)
  {
    v5 = 0;
    v6 = 0;
    for (i = v3; i != v5; v3 = i)
    {
      v7 = 0;
      v8 = *(unsigned __int16 *)(a1 + 2 * v5);
      v10 = (v8 - 48) < 0xA || (unsigned __int16)(v8 + 240) < 0xAu;
      while ((unsigned __int16)word_20BA94376[v7] != v8)
      {
        if (++v7 == 13)
        {
          v11 = 0;
          goto LABEL_13;
        }
      }
      v11 = &word_20BA94376[v7];
LABEL_13:
      v12 = 0;
      if (v11)
        v13 = v11 - word_20BA94376;
      else
        v13 = -1;
      while ((unsigned __int16)asc_20BA55B5C[v12] != v8)
      {
        if (++v12 == 32)
        {
          v14 = 0;
          goto LABEL_20;
        }
      }
      v14 = &asc_20BA55B5C[v12];
LABEL_20:
      v15 = 0;
      if (v14)
        v16 = (char *)v14 - (char *)asc_20BA55B5C == -2;
      else
        v16 = 1;
      v17 = !v16;
      while ((unsigned __int16)word_20BA55B9E[v15] != v8)
      {
        if (++v15 == 37)
        {
          v18 = 0;
          goto LABEL_30;
        }
      }
      v18 = &word_20BA55B9E[v15];
LABEL_30:
      if (v18)
        v19 = (char *)v18 - (char *)word_20BA55B9E == -2;
      else
        v19 = 1;
      v20 = !v19;
      v21 = (const char *)&unk_20BA94372;
      if (v8 != 65292)
        v21 = 0;
      v22 = v8 == 44;
      v23 = v8 == 44 || v8 == 65292;
      if (v22)
        v24 = ",";
      else
        v24 = v21;
      v25 = v24 - "," != -2 && v23;
      v26 = v13 != -1 || v10;
      if ((v17 | v25 | v26 | v20) != 1)
        goto LABEL_64;
      if (v5 > v6)
      {
        v27 = a1 ? v5 - v6 : 0;
        sub_20B8D15F4((void *)(a1 + 2 * v6), v27, &__p);
        v28 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__p
            : (std::string *)__p.__r_.__value_.__r.__words[0];
        v29 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? HIBYTE(__p.__r_.__value_.__r.__words[2])
            : __p.__r_.__value_.__l.__size_;
        std::string::append(a3, (const std::string::value_type *)v28, v29);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      v6 = v5 + 1;
      if (!v25)
      {
LABEL_64:
        if (v10)
          std::string::append(a3, "0", 1uLL);
        if (v13 == -1)
        {
          if (v17)
            std::string::append(a3, "xSYMx", 5uLL);
        }
        else
        {
          v30 = strlen(off_24C49F998[v13]);
          std::string::append(a3, off_24C49F998[v13], v30);
        }
      }
      ++v5;
    }
  }
  else
  {
    v6 = 0;
  }
  if (a1)
    v31 = v3 - v6;
  else
    v31 = 0;
  sub_20B8D15F4((void *)(a1 + 2 * v6), v31, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  std::string::append(a3, (const std::string::value_type *)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20B99B820(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  if (*(char *)(a11 + 23) < 0)
    operator delete(*(void **)a11);
  _Unwind_Resume(exception_object);
}

void sub_20B99B86C(unsigned __int16 *a1@<X1>, unint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unsigned int v7;
  unsigned __int16 *v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  const char *v13;
  std::string::size_type v14;
  std::string *v15;
  __int128 v16;
  void **v17;
  std::string::size_type v18;
  const char *v19;
  std::string::size_type size;
  size_t v21;
  std::string *v22;
  void *v23;
  std::string v24;
  void *__p[2];
  int64_t v26;
  std::string v27;

  memset(&v27, 0, sizeof(v27));
  std::string::reserve(&v27, 3 * a2);
  if (a2)
  {
    v6 = 0;
    v7 = 0;
    v8 = a1;
    while (1)
    {
      v9 = *v8;
      if (v9 != 44)
      {
        v10 = v9 - 48;
        v11 = (unsigned __int16)(v9 + 240);
        if (v10 >= 0xA && v11 > 9)
        {
          if (!v6)
          {
            sub_20B8D15F4(a1, a2, (std::string *)a3);
            goto LABEL_41;
          }
          if (v7 >= 4)
            v7 = 4;
          v13 = (const char *)*((_QWORD *)&off_24C49FA00 + v7);
          sub_20B8D15F4(v8, 1uLL, &v24);
          v14 = strlen(v13);
          v15 = std::string::insert(&v24, 0, v13, v14);
          v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
          v26 = v15->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v16;
          v15->__r_.__value_.__l.__size_ = 0;
          v15->__r_.__value_.__r.__words[2] = 0;
          v15->__r_.__value_.__r.__words[0] = 0;
          if (v26 >= 0)
            v17 = __p;
          else
            v17 = (void **)__p[0];
          if (v26 >= 0)
            v18 = HIBYTE(v26);
          else
            v18 = (std::string::size_type)__p[1];
          std::string::append(&v27, (const std::string::value_type *)v17, v18);
          if (SHIBYTE(v26) < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v24.__r_.__value_.__l.__data_);
          v7 = 0;
        }
        else
        {
          ++v7;
        }
      }
      ++v6;
      ++v8;
      if (a2 == v6)
        goto LABEL_26;
    }
  }
  v7 = 0;
LABEL_26:
  if (v7 >= 4)
    v7 = 4;
  v19 = (const char *)*((_QWORD *)&off_24C49FA00 + v7);
  if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v27.__r_.__value_.__r.__words[2]);
  else
    size = v27.__r_.__value_.__l.__size_;
  v21 = strlen(v19);
  sub_20B8298D4(a3, size + v21);
  if (*(char *)(a3 + 23) < 0)
    a3 = *(_QWORD *)a3;
  if (size)
  {
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v22 = &v27;
    else
      v22 = (std::string *)v27.__r_.__value_.__r.__words[0];
    memmove((void *)a3, v22, size);
  }
  v23 = (void *)(a3 + size);
  if (v21)
    memmove(v23, v19, v21);
  *((_BYTE *)v23 + v21) = 0;
LABEL_41:
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
}

void sub_20B99BA7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B99BAD8(_QWORD *a1)
{
  sub_20B8BACE8(a1);
  JUMPOUT(0x20BD39CB0);
}

void sub_20B99BB00()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B99BB14()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C4699A8;
  return result;
}

void sub_20B99BB38(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C4699A8;
}

uint64_t sub_20B99BB50(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

uint64_t sub_20B99BB58(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45EC90))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B99BB94()
{
  return &unk_24C45EC90;
}

uint64_t sub_20B99BBA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  void **v5;
  void **v6;
  uint64_t result;
  uint64_t v8;
  void **v9;

  if (!a3)
    return sub_20B8F8CD8(a4, a1);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 120))(&v8, a2, a1);
  sub_20B8F8CD8(a4, (uint64_t)&v8);
  v5 = v9;
  v9 = 0;
  if (v5)
  {
    v6 = sub_20B8F8AB8(v5);
    MEMORY[0x20BD39CB0](v6, 0x20C4093837F09);
  }
  result = v8;
  v8 = 0;
  if (result)
    return MEMORY[0x20BD39CB0](result, 0x1010C40E4C6A875);
  return result;
}

void sub_20B99BC4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20B8F8A30(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B99BC60(int a1, __CFDictionary *a2, void *lpsrc)
{
  uint64_t result;
  uint64_t v6;
  const void *v7;
  CFNumberRef v8;
  uint64_t valuePtr;

  if (!lpsrc)
    return 0;
  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
  if (result)
  {
    v6 = result;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
    if (result)
    {
      if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 56))(v6)
        || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 216))(v6), (_DWORD)result))
      {
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 216))(v6);
        if ((_DWORD)result)
        {
          v7 = (const void *)*MEMORY[0x24BDBD270];
          CFDictionaryAddValue(a2, CFSTR("englishCandidateAccepted"), (const void *)*MEMORY[0x24BDBD270]);
          if ((*(unsigned int (**)(void *))(*(_QWORD *)lpsrc + 96))(lpsrc) == 71)
            CFDictionaryAddValue(a2, CFSTR("englishLexiconCandidateAccepted"), v7);
          valuePtr = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 464))(v6);
          v8 = CFNumberCreate(0, kCFNumberCFIndexType, &valuePtr);
          CFDictionaryAddValue(a2, CFSTR("acceptedEnglishCandidateLength"), v8);
          if (v8)
            CFRelease(v8);
          return 1;
        }
      }
    }
  }
  return result;
}

void sub_20B99BDB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  sub_20B88AE28(&a9, 0);
  _Unwind_Resume(a1);
}

void sub_20B99BDD4()
{
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B99BDE8(unsigned __int16 *a1, uint64_t a2, UChar *a3, int a4)
{
  int v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t result;
  int v12;
  UChar *src;
  int v14;

  *a3 = 0;
  v14 = 0;
  if (a2)
  {
    v7 = 0;
    v8 = 2 * a2 - 2;
    do
    {
      v9 = *a1;
      LODWORD(src) = v7;
      if ((sub_20B99BEEC(&v14, &src, v9, a4) & 1) == 0)
        return 0;
      v7 = (int)src;
      v14 = (int)src;
      ++a1;
      if (src >> 24)
        v10 = 1;
      else
        v10 = v8 == 0;
      v8 -= 2;
    }
    while (!v10);
    result = 0;
    if ((~(_DWORD)src & 0xFF0000) != 0 && src <= 4u && ((unsigned __int16)src & 0xFF00) != 0xFF00)
    {
      if (!(src >> 24))
        return v7;
      src = 0;
      v12 = sub_20B99C25C((unsigned __int8 *)&v14, &src, a4);
      result = 0;
      if (v12)
      {
        u_strcpy(a3, src);
        return v7;
      }
    }
  }
  else
  {
    LOBYTE(v7) = 0;
    return v7;
  }
  return result;
}

uint64_t sub_20B99BEEC(_BYTE *a1, _BYTE *a2, int a3, char a4)
{
  uint64_t v4;
  int v6;
  uint64_t v7;
  __int16 *v8;
  uint64_t v9;
  __int16 *v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _UNKNOWN **v18;
  __int16 *v19;
  unint64_t v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  __int16 *v24;
  unint64_t v25;
  uint64_t v26;
  __int16 *v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  unint64_t v32;
  int v33;

  if (a1[3])
    return 0;
  switch(*a1)
  {
    case 0:
      if ((a3 - 97) > 0x19)
        return 0;
      a2[2] = a3 - 97;
      v6 = byte_20BA4C496[(a3 - 97)];
      a2[1] = v6;
      v4 = 1;
      *a2 = 1;
      a2[3] = v6 == 255;
      if (v6 == 255)
        a2[1] = 0;
      return v4;
    case 1:
      v9 = 0;
      if ((a4 & 1) != 0)
      {
        v10 = L"bcdfghjklmpqrstvwxyz'aeinouyxa";
        while ((unsigned __int16)word_20BA4C57E[v9] != a3)
        {
          if (++v9 == 11)
            goto LABEL_31;
        }
        v10 = &word_20BA4C57E[v9];
LABEL_31:
        v20 = (char *)v10 - (char *)word_20BA4C57E;
        if ((char *)v10 - (char *)word_20BA4C57E != 22)
        {
          v21 = a1[1];
          a2[1] = v21;
          v22 = v20 >> 1;
          a2[2] = v20 >> 1;
          v4 = 1;
          a2[3] = 1;
          *a2 = 2;
          if (*(_WORD *)*(&off_24C49EC40 + 11 * v21 + v22))
            return v4;
        }
        v23 = 0;
        v24 = (__int16 *)byte_20BA4C4CA;
        while ((unsigned __int16)aAeinouhkstwy[v23 + 7] != a3)
        {
          if (++v23 == 6)
            goto LABEL_49;
        }
        v24 = &aAeinouhkstwy[v23 + 7];
LABEL_49:
        if ((char *)v24 - (char *)&aAeinouhkstwy[7] == 12)
          return 0;
        v4 = (unint64_t)((char *)v24 - (char *)&aAeinouhkstwy[7]) >> 1;
        a2[2] = v4;
        v29 = byte_20BA4C4CA[6 * a1[1] + v4];
        a2[1] = v29;
        a2[3] = 0;
        v30 = (*a1 + 1);
        *a2 = *a1 + 1;
        LODWORD(v4) = (_BYTE)v4 != 0xFF;
        if (v30 >= 5 || v29 == 255)
          return 0;
        else
          return v4;
      }
      v19 = &aAeinouhkstwy[7];
      while ((unsigned __int16)aAeinouhkstwy[v9] != a3)
      {
        if (++v9 == 7)
          goto LABEL_38;
      }
      v19 = &aAeinouhkstwy[v9];
LABEL_38:
      v25 = (char *)v19 - (char *)aAeinouhkstwy;
      if ((char *)v19 - (char *)aAeinouhkstwy != 14)
      {
        v28 = a1[1];
        a2[1] = v28;
        v16 = v25 >> 1;
        a2[2] = v16;
        a2[3] = 1;
        *a2 = 2;
        v17 = 7 * v28;
        v18 = &off_24C49E168;
        goto LABEL_44;
      }
      v26 = 0;
      v27 = (__int16 *)byte_20BA4C4CA;
      while ((unsigned __int16)aAeinouhkstwy[v26 + 7] != a3)
      {
        if (++v26 == 6)
          goto LABEL_57;
      }
      v27 = &aAeinouhkstwy[v26 + 7];
LABEL_57:
      if ((char *)v27 - (char *)&aAeinouhkstwy[7] == 12)
        return 0;
      v32 = (unint64_t)((char *)v27 - (char *)&aAeinouhkstwy[7]) >> 1;
      a2[2] = v32;
      v33 = byte_20BA4C4CA[6 * a1[1] + v32];
      a2[1] = v33;
      a2[3] = 0;
      *a2 = 2;
      v14 = (_BYTE)v32 == 0xFF || v33 == 255;
      return !v14;
    case 2:
      v7 = 0;
      v8 = (__int16 *)byte_20BA4C552;
      break;
    case 3:
      if (a3 != 117)
        return 0;
      *(_WORD *)a2 = 4;
      a2[2] = a1[2];
      v4 = 1;
      a2[3] = 1;
      return v4;
    default:
      return 0;
  }
  while ((unsigned __int16)aAeiou[v7] != a3)
  {
    if (++v7 == 5)
      goto LABEL_20;
  }
  v8 = &aAeiou[v7];
LABEL_20:
  v11 = (char *)v8 - (char *)aAeiou;
  if ((char *)v8 - (char *)aAeiou == 10)
  {
    if (a3 != 115)
      return 0;
    v12 = a1[1];
    v14 = v12 == 255;
    a2[2] = v12;
    v13 = byte_20BA4C552[v12];
    a2[1] = v13;
    a2[3] = 0;
    *a2 = 3;
    v14 = v14 || v13 == 255;
  }
  else
  {
    v15 = a1[1];
    a2[1] = v15;
    v16 = v11 >> 1;
    a2[2] = v16;
    a2[3] = 1;
    *a2 = 3;
    v17 = 5 * v15;
    v18 = &off_24C49E600;
LABEL_44:
    v14 = *(unsigned __int16 *)*(&v18[v17] + v16) == 0;
  }
  return !v14;
}

uint64_t sub_20B99C25C(unsigned __int8 *a1, _QWORD *a2, int a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _WORD *v7;
  _WORD **v8;
  _UNKNOWN **v9;

  result = 0;
  if (*a1 <= 4u)
  {
    v5 = a1[1];
    if ((_DWORD)v5 != 255)
    {
      v6 = a1[2];
      if ((_DWORD)v6 != 255)
      {
        switch(*a1)
        {
          case 1u:
            v7 = *(&off_24C49E098 + v6);
            goto LABEL_12;
          case 2u:
            if (!a1[3])
              goto LABEL_18;
            v8 = (_WORD **)(&off_24C49E168 + 8 * v5 + v6 - v5);
            v9 = &off_24C49EC40 + 11 * v5 + v6;
            if (a3)
              v8 = (_WORD **)v9;
            v7 = *v8;
            goto LABEL_12;
          case 3u:
            if (!a1[3])
              goto LABEL_18;
            v7 = *(&off_24C49E600 + 5 * v5 + v6);
LABEL_12:
            if (*v7)
              goto LABEL_16;
LABEL_18:
            result = 0;
            break;
          case 4u:
            if (!a1[3])
              goto LABEL_18;
            v7 = &unk_20BA4C57A;
LABEL_16:
            *a2 = v7;
            result = 1;
            break;
          default:
            goto LABEL_18;
        }
      }
    }
  }
  return result;
}

BOOL sub_20B99C348(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  _BOOL8 v13;
  _BOOL8 result;
  uint64_t v15;
  uint64_t v16;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 24))(&v16);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(&v15, a1, v16, a2, a3);
  v9 = v15;
  v8 = v16;
  v15 = 0;
  v16 = v9;
  if (v8)
  {
    MEMORY[0x20BD39CB0](v8, 0x1000C4052888210);
    v10 = v15;
    v15 = 0;
    if (v10)
      MEMORY[0x20BD39CB0](v10, 0x1000C4052888210);
  }
  v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v16);
  v12 = v16;
  if ((v11 & 1) != 0)
  {
    if (*(_BYTE *)(v16 + 3))
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, v16, a4);
      v12 = v16;
      v13 = *(_BYTE *)(v16 + 3) != 0;
    }
    else
    {
      v13 = 0;
    }
    v16 = 0;
    goto LABEL_11;
  }
  v13 = 0;
  result = 0;
  v16 = 0;
  if (v12)
  {
LABEL_11:
    MEMORY[0x20BD39CB0](v12, 0x1000C4052888210);
    return v13;
  }
  return result;
}

void sub_20B99C474(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    MEMORY[0x20BD39CB0](a10, 0x1000C4052888210);
  _Unwind_Resume(exception_object);
}

_BYTE *sub_20B99C4A4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  int v12;
  _BYTE *v13;
  _BYTE *v14;
  unint64_t v15;
  uint64_t v16;
  _BYTE *result;
  char v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;

  (*(void (**)(_BYTE **__return_ptr))(*(_QWORD *)a1 + 24))(&v20);
  v19 = 0;
  if (a3 >= 2)
  {
    v8 = 0;
    v9 = a3 >> 1;
    if (a3 >> 1 <= 1)
      v10 = 1;
    else
      v10 = a3 >> 1;
    v11 = v20;
    while (1)
    {
      v12 = *(unsigned __int16 *)(a2 + 2 * v8);
      v13 = (_BYTE *)operator new();
      *(_DWORD *)v13 = *v11;
      v14 = v20;
      if ((sub_20B99BEEC(v20, v13, v12, 0) & 1) == 0)
      {
        MEMORY[0x20BD39CB0](v13, 0x1000C4052888210);
        goto LABEL_18;
      }
      v20 = v13;
      MEMORY[0x20BD39CB0](v14, 0x1000C4052888210);
      if (!(*(unsigned int (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 32))(a1, v20))
        goto LABEL_18;
      v11 = v20;
      if (v20[3])
        break;
      if (v10 == ++v8)
        goto LABEL_18;
    }
    if ((*(unsigned int (**)(uint64_t, _BYTE *, uint64_t *))(*(_QWORD *)a1 + 48))(a1, v20, &v19))
    {
      if (v9 >= v8 + 1)
        v15 = v8 + 1;
      else
        v15 = v9;
      v18 = 0;
      v16 = *(_QWORD *)(a4 + 24);
      v21 = 2 * v15;
      v22 = a2;
      if (!v16)
        sub_20B80BB74();
      (*(void (**)(uint64_t, uint64_t *, uint64_t *, uint64_t *, char *))(*(_QWORD *)v16 + 48))(v16, &v19, &v22, &v21, &v18);
    }
  }
LABEL_18:
  result = v20;
  v20 = 0;
  if (result)
    return (_BYTE *)MEMORY[0x20BD39CB0](result, 0x1000C4052888210);
  return result;
}

void sub_20B99C654(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    MEMORY[0x20BD39CB0](a12, 0x1000C4052888210);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B99C68C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 24))(&v15);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(&v14, a1, v15, a2, a3);
  v11 = v14;
  v10 = v15;
  v14 = 0;
  v15 = v11;
  if (v10)
  {
    MEMORY[0x20BD39CB0](v10, 0x1000C4052888210);
    v12 = v14;
    v14 = 0;
    if (v12)
      MEMORY[0x20BD39CB0](v12, 0x1000C4052888210);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, v15, a4, a5);
  result = v15;
  v15 = 0;
  if (result)
    return MEMORY[0x20BD39CB0](result, 0x1000C4052888210);
  return result;
}

void sub_20B99C77C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    MEMORY[0x20BD39CB0](a10, 0x1000C4052888210);
  _Unwind_Resume(exception_object);
}

_DWORD *sub_20B99C7AC@<X0>(_QWORD *a1@<X8>)
{
  _DWORD *result;

  result = (_DWORD *)operator new();
  *result = 0;
  *a1 = result;
  return result;
}

BOOL sub_20B99C7E8(uint64_t a1, unsigned __int8 *a2)
{
  _BOOL8 result;

  result = 0;
  if (*a2 <= 4u && a2[1] != 255)
    return a2[2] != 255;
  return result;
}

_DWORD *sub_20B99C814@<X0>(_DWORD *a1@<X1>, unsigned __int16 *a2@<X2>, unint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  _DWORD *result;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  int v12;
  _DWORD *v13;

  result = (_DWORD *)operator new();
  v9 = result;
  *result = *a1;
  if (a3 >= 2)
  {
    v11 = 2 * (a3 >> 1);
    do
    {
      v12 = *a2;
      v10 = (_BYTE *)operator new();
      *(_DWORD *)v10 = *(_DWORD *)v9;
      if ((sub_20B99BEEC(v9, v10, v12, 0) & 1) == 0)
      {
        v13 = (_DWORD *)operator new();
        *v13 = 0xFFFFFF;
        *a4 = v13;
        MEMORY[0x20BD39CB0](v10, 0x1000C4052888210);
        JUMPOUT(0x20BD39CB0);
      }
      result = (_DWORD *)MEMORY[0x20BD39CB0](v9, 0x1000C4052888210);
      ++a2;
      v9 = v10;
      v11 -= 2;
    }
    while (v11);
  }
  else
  {
    v10 = result;
  }
  *a4 = v10;
  return result;
}

void sub_20B99C958(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x20BD39CB0](v2, 0x1000C4052888210);
  MEMORY[0x20BD39CB0](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

uint64_t sub_20B99C99C(uint64_t a1, unsigned __int8 *a2, _QWORD *a3)
{
  return sub_20B99C25C(a2, a3, 0);
}

void sub_20B99C9AC(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unsigned int v6;
  unsigned int i;
  int v8;
  unsigned int v9;
  unsigned int v10;
  __int16 v11;
  uint64_t v12;
  const __int16 *v13;
  uint64_t v14;
  const __int16 *v15;
  uint64_t v16;
  const __int16 *v17;
  void *p_p;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _WORD *v25;
  uint64_t v26;
  __int16 *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  void *__p;
  uint64_t v34;
  unsigned __int8 v35;
  uint64_t v36;
  _BYTE v37[24];
  _BYTE *v38;
  _BYTE v39[24];
  _BYTE *v40;
  _QWORD __src[3];

  __src[2] = *MEMORY[0x24BDAC8D0];
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1))
  {
    if (*a2 <= 4u && a2[1] != 255 && a2[2] != 255)
    {
      v6 = *(_DWORD *)a2;
      *((_WORD *)__src + *(_DWORD *)a2) = 0;
      for (i = v6; i; *((_WORD *)__src + i) = v11)
      {
        v8 = BYTE1(v6);
        v9 = HIWORD(v6);
        v10 = HIBYTE(v6);
        switch(i)
        {
          case 1u:
            v10 = 0;
            LOBYTE(v9) = 0;
            v8 = 0;
            i = 0;
            v11 = BYTE2(v6) + 97;
            break;
          case 2u:
            if (v10)
            {
              v10 = 0;
              v11 = aAeinouhkstwy[BYTE2(v6)];
            }
            else
            {
              v14 = 0;
              v11 = aAeinouhkstwy[BYTE2(v6) + 7];
              while (BYTE1(v6) != byte_20BA4C4CA[v14])
              {
                if (++v14 == 126)
                {
                  v15 = aAeiou;
                  goto LABEL_26;
                }
              }
              v15 = (const __int16 *)&byte_20BA4C4CA[v14];
LABEL_26:
              v8 = ((((unint64_t)((char *)v15 - byte_20BA4C4CA)
                                                   * (unsigned __int128)0xAAAAAAAAAAAAAAABLL) >> 64) >> 2);
            }
            v16 = 0;
            while (byte_20BA4C496[v16] != v8)
            {
              if (++v16 == 26)
              {
                v17 = aAeinouhkstwy;
                goto LABEL_32;
              }
            }
            v17 = (const __int16 *)&byte_20BA4C496[v16];
LABEL_32:
            LOBYTE(v9) = (_BYTE)v17 - byte_20BA4C496;
            i = 1;
            break;
          case 3u:
            if (v10)
            {
              v10 = 0;
              v11 = aAeiou[BYTE2(v6)];
            }
            else
            {
              v11 = 115;
              v8 = BYTE2(v6);
            }
            v12 = 0;
            while (byte_20BA4C4CA[v12] != v8)
            {
              if (++v12 == 126)
              {
                v13 = aAeiou;
                goto LABEL_20;
              }
            }
            v13 = (const __int16 *)&byte_20BA4C4CA[v12];
LABEL_20:
            v9 = (_DWORD)v13 - byte_20BA4C4CA - 6 * (((char *)v13 - byte_20BA4C4CA) / 6uLL);
            i = 2;
            break;
          case 4u:
            v10 = 0;
            v8 = 0;
            v11 = 117;
            i = 3;
            break;
          default:
            v11 = 0;
            break;
        }
        v6 = (v10 << 24) | (v9 << 16) | (v8 << 8);
      }
    }
    p_p = &__p;
    sub_20B87C9E0(&__p, (char *)__src);
    v19 = v35;
    if ((v35 & 0x80u) != 0)
    {
      p_p = __p;
      v19 = v34;
    }
    v20 = 2 * v19;
    v32 = 0;
    if (a2[3])
    {
      if ((*(unsigned int (**)(uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)a1 + 48))(a1, a2, &v32))
      {
        v31 = 0;
        v21 = *(_QWORD *)(a3 + 24);
        __src[0] = p_p;
        v36 = v20;
        if (!v21)
          sub_20B80BB74();
        (*(void (**)(uint64_t, uint64_t *, _QWORD *, uint64_t *, char *))(*(_QWORD *)v21 + 48))(v21, &v32, __src, &v36, &v31);
      }
      goto LABEL_61;
    }
    v40 = 0;
    v22 = operator new(0x20uLL);
    *v22 = &off_24C46AC90;
    v22[1] = p_p;
    v22[2] = v20;
    v22[3] = a3;
    v40 = v22;
    sub_20B99CE48(a2, (uint64_t)v39);
    v23 = v40;
    if (v40 == v39)
    {
      v24 = 4;
      v23 = v39;
    }
    else
    {
      if (!v40)
        goto LABEL_45;
      v24 = 5;
    }
    (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_45:
    if ((char)v35 < 0)
    {
      if (v34 != 1)
      {
LABEL_62:
        operator delete(__p);
        return;
      }
      v25 = __p;
    }
    else
    {
      if (v35 != 1)
        return;
      v25 = &__p;
    }
    v26 = 0;
    v27 = L"'aeinouyxa";
    while (aBcdfghjklmpqrs_1[v26] != *v25)
    {
      if (++v26 == 20)
        goto LABEL_55;
    }
    v27 = &aBcdfghjklmpqrs_1[v26];
LABEL_55:
    if ((char *)v27 - (char *)L"bcdfghjklmpqrstvwxyz'aeinouyxa" != 40)
    {
      LOWORD(__src[0]) = 12387;
      v38 = 0;
      v28 = operator new(0x28uLL);
      *v28 = &off_24C46ACE8;
      v28[1] = p_p;
      v28[2] = v20;
      v28[3] = a3;
      v28[4] = __src;
      v38 = v28;
      sub_20B99CE48(a2, (uint64_t)v37);
      v29 = v38;
      if (v38 == v37)
      {
        v30 = 4;
        v29 = v37;
      }
      else
      {
        if (!v38)
          goto LABEL_61;
        v30 = 5;
      }
      (*(void (**)(void))(*v29 + 8 * v30))();
    }
LABEL_61:
    if (((char)v35 & 0x80000000) == 0)
      return;
    goto LABEL_62;
  }
}

void sub_20B99CDCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char *a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  char *v26;
  char *v28;
  uint64_t v29;

  v28 = a22;
  if (a22 == v26)
  {
    v29 = 4;
    v28 = &a19;
  }
  else
  {
    if (!a22)
      goto LABEL_6;
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
LABEL_6:
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *sub_20B99CE48(unsigned __int8 *result, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned int v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[24];
  unsigned __int8 *v15;
  _BYTE v16[24];
  unsigned __int8 *v17;
  _BYTE v18[24];
  unsigned __int8 *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (result[3])
    return result;
  v2 = result;
  v3 = *result;
  if (v3 > 4 || result[1] == 255 || result[2] == 255)
    return result;
  v12 = 0;
  switch(v3)
  {
    case 0u:
      sub_20B86D7F0((uint64_t)v18, a2);
      v4 = 0;
      do
      {
        if (**(_WORD **)((char *)&off_24C49E098 + v4))
        {
          v13 = *(_UNKNOWN **)((char *)&off_24C49E098 + v4);
          if (!v19)
            sub_20B80BB74();
          (*(void (**)(unsigned __int8 *, void **, char *))(*(_QWORD *)v19 + 48))(v19, &v13, &v12);
        }
        if (v12)
          break;
        v5 = v4 == 200;
        v4 += 8;
      }
      while (!v5);
      result = v19;
      if (v19 != v18)
        goto LABEL_42;
      v6 = 4;
      result = v18;
      return (unsigned __int8 *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v6))();
    case 1u:
      sub_20B86D7F0((uint64_t)v16, a2);
      v9 = 0;
      break;
    case 2u:
      sub_20B86D7F0((uint64_t)v14, a2);
      v7 = 0;
      do
      {
        if (**(_WORD **)((char *)&off_24C49E600 + 40 * v2[1] + v7))
        {
          v13 = *(_UNKNOWN **)((char *)&off_24C49E600 + 40 * v2[1] + v7);
          if (!v15)
            sub_20B80BB74();
          (*(void (**)(unsigned __int8 *, void **, char *))(*(_QWORD *)v15 + 48))(v15, &v13, &v12);
        }
        if (v12)
          break;
        v5 = v7 == 32;
        v7 += 8;
      }
      while (!v5);
      result = v15;
      if (v15 != v14)
        goto LABEL_42;
      v6 = 4;
      result = v14;
      return (unsigned __int8 *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v6))();
    case 3u:
      v13 = &unk_20BA4C57A;
      v8 = *(_QWORD *)(a2 + 24);
      if (!v8)
        sub_20B80BB74();
      return (unsigned __int8 *)(*(uint64_t (**)(uint64_t, void **, char *))(*(_QWORD *)v8 + 48))(v8, &v13, &v12);
    default:
      return result;
  }
  while (1)
  {
    v10 = (unsigned __int16)aAeinouhkstwy[v9];
    if (v10 == 110)
    {
      v11 = 0x17u;
    }
    else
    {
      if (v10 != 39)
        break;
      v11 = 0xDu;
    }
    if (byte_20BA4C496[v11] != v2[1])
      break;
    if (v9 > 5)
      goto LABEL_41;
LABEL_40:
    ++v9;
  }
  if (*(_WORD *)*(&off_24C49E168 + 7 * v2[1] + v9))
  {
    v13 = *(&off_24C49E168 + 7 * v2[1] + v9);
    if (!v17)
      sub_20B80BB74();
    (*(void (**)(unsigned __int8 *, void **, char *))(*(_QWORD *)v17 + 48))(v17, &v13, &v12);
  }
  if (v9 <= 5 && !v12)
    goto LABEL_40;
LABEL_41:
  result = v17;
  if (v17 == v16)
  {
    v6 = 4;
    result = v16;
    return (unsigned __int8 *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v6))();
  }
  else
  {
LABEL_42:
    if (result)
    {
      v6 = 5;
      return (unsigned __int8 *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v6))();
    }
  }
  return result;
}

void sub_20B99D114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  _Unwind_Resume(exception_object);
}

void sub_20B99D1A8()
{
  JUMPOUT(0x20BD39CB0);
}

void sub_20B99D1C0()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B99D1D4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24C46AC90;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_20B99D214(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C46AC90;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20B99D23C(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = *a2;
  v3 = a1[2];
  v4 = a1[1];
  v5 = *(_QWORD *)(a1[3] + 24);
  v9 = v4;
  v8 = v3;
  if (!v5)
    sub_20B80BB74();
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)v5 + 48))(v5, &v7, &v9, &v8, a3);
}

uint64_t sub_20B99D294(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45F000))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B99D2D0()
{
  return &unk_24C45F000;
}

void sub_20B99D2E0()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B99D2F4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24C46ACE8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_20B99D334(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C46ACE8;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20B99D35C(_QWORD *a1, const UChar **a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  u_strcpy((UChar *)(a1[4] + 2), *a2);
  v5 = a1[3];
  v9 = a1[4];
  v6 = a1[1];
  v7 = *(_QWORD *)(v5 + 24);
  v10 = a1[2];
  v11 = v6;
  if (!v7)
    sub_20B80BB74();
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)v7 + 48))(v7, &v9, &v11, &v10, a3);
}

uint64_t sub_20B99D3CC(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45F010))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B99D408()
{
  return &unk_24C45F010;
}

uint64_t sub_20B99D414@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _DWORD **v3;
  void **v4;
  void **v5;
  uint64_t result;
  uint64_t v7;
  void **v8;

  v3 = *(_DWORD ***)(a1 + 16);
  if (v3)
    sub_20B908378(&v7, *v3);
  else
    sub_20B902288(&v7, 0, 0, 0);
  sub_20B8F8CD8(a2, (uint64_t)&v7);
  v4 = v8;
  v8 = 0;
  if (v4)
  {
    v5 = sub_20B8F8AB8(v4);
    MEMORY[0x20BD39CB0](v5, 0x20C4093837F09);
  }
  result = v7;
  v7 = 0;
  if (result)
    return MEMORY[0x20BD39CB0](result, 0x1010C40E4C6A875);
  return result;
}

void sub_20B99D4C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20B8F8A30(&a9);
  _Unwind_Resume(a1);
}

BOOL sub_20B99D4E4(uint64_t a1, _OWORD *a2)
{
  return *a2 != 0 && (**(_BYTE **)a2 & 3) != 0;
}

uint64_t sub_20B99D508(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4, BOOL *a5)
{
  uint64_t v8;
  BOOL v9;

  *a4 = 0;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  v9 = 0;
  if ((_DWORD)v8)
    v9 = (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, a2) != 0;
  *a5 = v9;
  return v8;
}

uint64_t sub_20B99D574(_QWORD **a1, _DWORD **a2)
{
  if (a1[2] && ((unsigned int (*)(_QWORD **))(*a1)[11])(a1))
    return sub_20BA20514(a1[2], a2);
  else
    return 0;
}

uint64_t *sub_20B99D5C4@<X0>(_QWORD **a1@<X0>, _DWORD **a2@<X1>, unsigned __int8 *a3@<X2>, unint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  if (a1[2] && (((uint64_t (*)(_QWORD **))(*a1)[11])(a1) & 1) != 0)
    return sub_20BA203BC(a1[2], a2, a3, a4, a5);
  else
    return sub_20B902288(a5, 0, 0, 0);
}

uint64_t sub_20B99D650(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, 0, a3);
}

_DWORD *sub_20B99D664(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v6;
  void **v7;
  void **v8;
  _DWORD *result;
  _QWORD v10[5];
  _DWORD *v11;
  void **v12;

  v6 = *(uint64_t **)(a1 + 16);
  sub_20B8F8CD8((uint64_t)&v11, a2);
  v10[0] = MEMORY[0x24BDAC760];
  v10[1] = 0x40000000;
  v10[2] = sub_20B99D73C;
  v10[3] = &unk_24C46C608;
  v10[4] = a4;
  sub_20B9083D0(&v11, *v6, a3, (uint64_t)v10);
  v7 = v12;
  v12 = 0;
  if (v7)
  {
    v8 = sub_20B8F8AB8(v7);
    MEMORY[0x20BD39CB0](v8, 0x20C4093837F09);
  }
  result = v11;
  v11 = 0;
  if (result)
    return (_DWORD *)MEMORY[0x20BD39CB0](result, 0x1010C40E4C6A875);
  return result;
}

void sub_20B99D728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20B8FD7F0((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B99D73C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_20B99D748(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t sub_20B99D750(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  const std::locale::facet *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  std::string::size_type size;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  void *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  void *v42;
  uint64_t v43;
  unint64_t v44;
  std::string *v45;
  __int128 v46;
  std::string *p_dst;
  std::string::size_type v48;
  std::string *v49;
  std::string::size_type v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  void *v58;
  uint64_t v59;
  _BYTE *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  size_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE *v68;
  _BYTE *v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  void *v76;
  uint64_t v77;
  unint64_t i;
  std::string::size_type v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  void *v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  int v90;
  std::string::size_type v92;
  std::string *v93;
  BOOL v94;
  char v95;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  void *v102;
  uint64_t v103;
  std::string::size_type v104;
  std::string *v105;
  std::string *v106;
  unsigned __int16 ***v107;
  std::string *v108;
  uint64_t v109;
  std::string::size_type v110;
  uint64_t v111;
  int v112;
  _QWORD *v113;
  _QWORD *v114;
  _QWORD *v115;
  _QWORD *v116;
  _QWORD *v117;
  _QWORD *v118;
  void *v119;
  uint64_t v120;
  char v121;
  char *v122;
  char *v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  size_t v128;
  char *v129;
  char *v130;
  char *v131;
  char *v132;
  char v133;
  unsigned __int16 ****v134;
  char *v135;
  char *v136;
  uint64_t j;
  std::string *v138;
  _QWORD *v139;
  _QWORD *v140;
  _QWORD *v141;
  _QWORD *v142;
  _QWORD *v143;
  _QWORD *v144;
  void *v145;
  uint64_t v146;
  std::string *v147;
  std::string::value_type v148;
  char *v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  size_t v154;
  char *v155;
  char *v156;
  std::string::value_type *v157;
  char *v158;
  char v159;
  unint64_t v160;
  char *v161;
  _DWORD *v162;
  void **v163;
  int v164;
  std::string::size_type v165;
  _DWORD *v166;
  uint64_t v167;
  unint64_t v168;
  int64_t v169;
  unint64_t v170;
  char *v171;
  int *v172;
  int v173;
  unsigned __int8 v174;
  std::string::size_type v175;
  unint64_t v176;
  int v177;
  std::string::size_type v178;
  int v179;
  _QWORD *v180;
  _QWORD *v181;
  _QWORD *v182;
  _QWORD *v183;
  _QWORD *v184;
  _QWORD *v185;
  void *v186;
  uint64_t v187;
  uint64_t v188;
  _QWORD *v189;
  _QWORD *v190;
  _QWORD *v191;
  _QWORD *v192;
  _QWORD *v193;
  _QWORD *v194;
  void *v195;
  uint64_t v196;
  std::string::size_type v197;
  uint64_t v198;
  size_t v199;
  char *v200;
  unsigned __int16 *v201;
  BOOL v202;
  size_t v203;
  BOOL v204;
  int v205;
  uint64_t v206;
  uint64_t *v207;
  char v208;
  uint64_t *v209;
  _QWORD *v210;
  _QWORD *v211;
  _QWORD *v212;
  _QWORD *v213;
  _QWORD *v214;
  _QWORD *v215;
  void *v216;
  uint64_t v217;
  char *v218;
  char *v219;
  char *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  char *v225;
  char *v226;
  __int16 v227;
  std::string::size_type v229;
  std::string *v230;
  std::string *v231;
  char *v232;
  std::string::value_type v233;
  _QWORD *v234;
  _QWORD *v235;
  _QWORD *v236;
  _QWORD *v237;
  _QWORD *v238;
  _QWORD *v239;
  void *v240;
  uint64_t v241;
  std::string::size_type v242;
  _QWORD *v243;
  _QWORD *v244;
  _QWORD *v245;
  _QWORD *v246;
  _QWORD *v247;
  _QWORD *v248;
  void *v249;
  uint64_t v250;
  _OWORD *v251;
  __int128 v252;
  uint64_t v253;
  uint64_t k;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  char *v259;
  unint64_t v260;
  std::locale v261;
  int v262;
  void *v263;
  uint64_t v264;
  unsigned __int8 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  std::string v269;
  std::string v270;
  std::string v271;
  void *v272;
  void *v273;
  uint64_t v274;
  void *v275;
  void *v276;
  uint64_t v277;
  std::string __str;
  void *v279;
  void *v280;
  uint64_t v281;
  void *v282;
  char *v283;
  char *v284;
  void *v285[2];
  unsigned __int8 v286;
  void *__p;
  char *v288;
  char *v289;
  std::string v290;
  char __s[8192];
  _QWORD v292[2];
  uint64_t v293;
  uint64_t v294;
  std::string __dst;
  __int16 v296;
  _QWORD v297[3];
  __int16 v298;
  uint64_t v299;

  v1 = MEMORY[0x24BDAC7A8](a1);
  v256 = v2;
  v3 = v1;
  v299 = *MEMORY[0x24BDAC8D0];
  sub_20B88EF60(v292);
  v257 = v3 + 24;
  v258 = v3;
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v292 + *(_QWORD *)(v292[0] - 24)));
    v4 = std::locale::use_facet(&v261, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
    std::locale::~locale(&v261);
    v5 = (_QWORD *)std::istream::getline();
    if ((*((_BYTE *)v5 + *(_QWORD *)(*v5 - 24) + 32) & 5) != 0)
      break;
    v261.__locale_ = 0;
    v262 = 0;
    sub_20B80BBD0(&v263, __s);
    v267 = 0u;
    v268 = 0u;
    v266 = 0u;
    v279 = 0;
    v280 = 0;
    v281 = 0;
    if (sub_20B99F29C(__s, &v279, 5uLL) != 5)
    {
      v6 = sub_20B828F84(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/seaweed/Dictionary/SeaweedChineseDictionaryCompiler.cpp", 101);
      sub_20B828F84(v6, (uint64_t)"(", 1);
      v7 = (_QWORD *)std::ostream::operator<<();
      v8 = sub_20B828F84(v7, (uint64_t)") [", 3);
      v9 = sub_20B828F84(v8, (uint64_t)"columnCount == kOriginalFeatureStartColumn + 1", 46);
      v10 = sub_20B828F84(v9, (uint64_t)"] ", 2);
      v11 = sub_20B828F84(v10, (uint64_t)"CSV format error: ", 18);
      if ((v265 & 0x80u) == 0)
        v12 = &v263;
      else
        v12 = v263;
      if ((v265 & 0x80u) == 0)
        v13 = v265;
      else
        v13 = v264;
      sub_20B828F84(v11, (uint64_t)v12, v13);
      sub_20B89423C();
    }
    v14 = v279;
    LODWORD(v261.__locale_) = atoi(*((const char **)v279 + 1));
    HIDWORD(v261.__locale_) = atoi(*((const char **)v14 + 2));
    v262 = atoi(*((const char **)v14 + 3));
    sub_20B80BBD0(&__str, *((char **)v14 + 4));
    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __str.__r_.__value_.__l.__size_;
    if (!size)
    {
      v16 = sub_20B828F84(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/seaweed/Dictionary/SeaweedChineseDictionaryCompiler.cpp", 101);
      sub_20B828F84(v16, (uint64_t)"(", 1);
      v17 = (_QWORD *)std::ostream::operator<<();
      v18 = sub_20B828F84(v17, (uint64_t)") [", 3);
      v19 = sub_20B828F84(v18, (uint64_t)"originalFeature.size()", 22);
      v20 = sub_20B828F84(v19, (uint64_t)"] ", 2);
      v21 = sub_20B828F84(v20, (uint64_t)"feature empty error: ", 21);
      if ((v265 & 0x80u) == 0)
        v22 = &v263;
      else
        v22 = v263;
      if ((v265 & 0x80u) == 0)
        v23 = v265;
      else
        v23 = v264;
      sub_20B828F84(v21, (uint64_t)v22, v23);
      sub_20B89423C();
    }
    v275 = 0;
    v276 = 0;
    v277 = 0;
    v24 = *(_QWORD *)(v3 + 104);
    if (*(_BYTE *)(v24 + 24))
    {
      v25 = sub_20B99F29C(*((const char **)v279 + 4), &v275, ((uint64_t)(*(_QWORD *)(v24 + 8) - *(_QWORD *)v24) >> 3) + 1);
      v26 = *(_QWORD **)(v258 + 104);
      v27 = v26[4];
      if (v25 <= v27)
      {
        v28 = sub_20B828F84(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/seaweed/Dictionary/SeaweedChineseDictionaryCompiler.cpp", 101);
        sub_20B828F84(v28, (uint64_t)"(", 1);
        v29 = (_QWORD *)std::ostream::operator<<();
        v30 = sub_20B828F84(v29, (uint64_t)") [", 3);
        v31 = sub_20B828F84(v30, (uint64_t)"featureColumnCount > data.syllableIDIndexCount()", 48);
        v32 = sub_20B828F84(v31, (uint64_t)"] ", 2);
        v33 = sub_20B828F84(v32, (uint64_t)"feature format error: ", 22);
        if ((v265 & 0x80u) == 0)
          v34 = &v263;
        else
          v34 = v263;
        if ((v265 & 0x80u) == 0)
          v35 = v265;
        else
          v35 = v264;
        sub_20B828F84(v33, (uint64_t)v34, v35);
        sub_20B89423C();
      }
      if (v27 > (uint64_t)(v26[1] - *v26) >> 3)
      {
        v36 = sub_20B828F84(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/seaweed/Dictionary/SeaweedChineseDictionaryCompiler.cpp", 101);
        sub_20B828F84(v36, (uint64_t)"(", 1);
        v37 = (_QWORD *)std::ostream::operator<<();
        v38 = sub_20B828F84(v37, (uint64_t)") [", 3);
        v39 = sub_20B828F84(v38, (uint64_t)"data.syllableIDIndexCount() <= data.indexCount()", 48);
        v40 = sub_20B828F84(v39, (uint64_t)"] ", 2);
        v41 = sub_20B828F84(v40, (uint64_t)"feature format error (syllable ID index count is too big): ", 59);
        if ((v265 & 0x80u) == 0)
          v42 = &v263;
        else
          v42 = v263;
        if ((v265 & 0x80u) == 0)
          v43 = v265;
        else
          v43 = v264;
        sub_20B828F84(v41, (uint64_t)v42, v43);
        sub_20B89423C();
      }
      v44 = v25 - 1;
      v3 = v258;
      if (v27 < v25 - 1)
      {
        do
        {
          sub_20B80BBD0(&v290, *((char **)v275 + v27));
          v45 = std::string::append(&v290, ",", 1uLL);
          v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
          __dst.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v46;
          v45->__r_.__value_.__l.__size_ = 0;
          v45->__r_.__value_.__r.__words[2] = 0;
          v45->__r_.__value_.__r.__words[0] = 0;
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_dst = &__dst;
          else
            p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v48 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
          else
            v48 = __dst.__r_.__value_.__l.__size_;
          std::string::append((std::string *)&v266, (const std::string::value_type *)p_dst, v48);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst.__r_.__value_.__l.__data_);
          if (SHIBYTE(v290.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v290.__r_.__value_.__l.__data_);
          ++v27;
        }
        while (v44 != v27);
      }
      sub_20B80BBD0(&__dst, *((char **)v275 + v44));
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v49 = &__dst;
      else
        v49 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v50 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      else
        v50 = __dst.__r_.__value_.__l.__size_;
      std::string::append((std::string *)&v266, (const std::string::value_type *)v49, v50);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
    }
    else
    {
      std::string::operator=((std::string *)&v266, &__str);
    }
    v51 = BYTE7(v267);
    if (SBYTE7(v267) < 0)
      v51 = *((_QWORD *)&v266 + 1);
    if (!v51 || (sub_20B8B4030(v257, (std::string *)&v266) & 1) == 0)
    {
      v52 = sub_20B828F84(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/seaweed/Dictionary/SeaweedChineseDictionaryCompiler.cpp", 101);
      sub_20B828F84(v52, (uint64_t)"(", 1);
      v53 = (_QWORD *)std::ostream::operator<<();
      v54 = sub_20B828F84(v53, (uint64_t)") [", 3);
      v55 = sub_20B828F84(v54, (uint64_t)"false", 5);
      v56 = sub_20B828F84(v55, (uint64_t)"] ", 2);
      v57 = sub_20B828F84(v56, (uint64_t)"feature format error: ", 22);
      if ((v265 & 0x80u) == 0)
        v58 = &v263;
      else
        v58 = v263;
      if ((v265 & 0x80u) == 0)
        v59 = v265;
      else
        v59 = v264;
      sub_20B828F84(v57, (uint64_t)v58, v59);
      sub_20B89423C();
    }
    v272 = 0;
    v273 = 0;
    v274 = 0;
    v61 = *(uint64_t **)(v3 + 104);
    v62 = *v61;
    v63 = v61[1];
    __dst.__r_.__value_.__r.__words[0] = *(_QWORD *)v279;
    v60 = (_BYTE *)__dst.__r_.__value_.__r.__words[0];
    v64 = strlen(__dst.__r_.__value_.__l.__data_);
    v65 = v63 - v62;
    if (v63 == v62)
    {
      v66 = 0;
    }
    else
    {
      v66 = 0;
      v67 = v65 >> 3;
      v68 = (_BYTE *)(__dst.__r_.__value_.__r.__words[0] + v64);
      while (1)
      {
        v69 = v68;
        if (v60 != v68)
        {
          while (*v60 != 9)
          {
            if (++v60 == v68)
            {
              v69 = v68;
              goto LABEL_77;
            }
          }
          v69 = v60;
        }
LABEL_77:
        *v69 = 0;
        __p = &v272;
        sub_20B8A7450((void ***)&__p, &__dst);
        ++v66;
        if (v69 == v68)
          break;
        v60 = v69 + 1;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)(v69 + 1);
        if (v66 == v67)
        {
          v66 = v67;
          break;
        }
      }
      v3 = v258;
      v61 = *(uint64_t **)(v258 + 104);
      v63 = v61[1];
    }
    if (v66 != (v63 - *v61) >> 3)
    {
      v70 = sub_20B828F84(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/seaweed/Dictionary/SeaweedChineseDictionaryCompiler.cpp", 101);
      sub_20B828F84(v70, (uint64_t)"(", 1);
      v71 = (_QWORD *)std::ostream::operator<<();
      v72 = sub_20B828F84(v71, (uint64_t)") [", 3);
      v73 = sub_20B828F84(v72, (uint64_t)"readingColumnCount == data.indexCount()", 39);
      v74 = sub_20B828F84(v73, (uint64_t)"] ", 2);
      v75 = sub_20B828F84(v74, (uint64_t)"reading format error: ", 22);
      if ((v265 & 0x80u) == 0)
        v76 = &v263;
      else
        v76 = v263;
      if ((v265 & 0x80u) == 0)
        v77 = v265;
      else
        v77 = v264;
      sub_20B828F84(v75, (uint64_t)v76, v77);
      sub_20B89423C();
    }
    if (v63 != *v61)
    {
      for (i = 0; i < (uint64_t)(*(_QWORD *)(*(_QWORD *)(v3 + 104) + 8) - **(_QWORD **)(v3 + 104)) >> 3; ++i)
      {
        memset(&v271, 0, sizeof(v271));
        sub_20B80BBD0(&v270, *((char **)v272 + i));
        v79 = HIBYTE(v270.__r_.__value_.__r.__words[2]);
        if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v79 = v270.__r_.__value_.__l.__size_;
        if (!v79)
        {
          v80 = sub_20B828F84(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/seaweed/Dictionary/SeaweedChineseDictionaryCompiler.cpp", 101);
          sub_20B828F84(v80, (uint64_t)"(", 1);
          v81 = (_QWORD *)std::ostream::operator<<();
          v82 = sub_20B828F84(v81, (uint64_t)") [", 3);
          v83 = sub_20B828F84(v82, (uint64_t)"!readingString.empty()", 22);
          v84 = sub_20B828F84(v83, (uint64_t)"] ", 2);
          v85 = sub_20B828F84(v84, (uint64_t)"readingString error: ", 21);
          if ((v265 & 0x80u) == 0)
            v86 = &v263;
          else
            v86 = v263;
          if ((v265 & 0x80u) == 0)
            v87 = v265;
          else
            v87 = v264;
          sub_20B828F84(v85, (uint64_t)v86, v87);
          sub_20B89423C();
        }
        v88 = *(uint64_t **)(v3 + 104);
        v89 = *v88;
        v90 = *(_DWORD *)(*v88 + 8 * i);
        if (*((_DWORD *)v88 + 10) == 1 || v90 != 1)
        {
          v92 = HIBYTE(v270.__r_.__value_.__r.__words[2]);
          if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v92 = v270.__r_.__value_.__l.__size_;
          if (v92 == 1)
          {
            v93 = (std::string *)v270.__r_.__value_.__r.__words[0];
            if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v93 = &v270;
            if (v93->__r_.__value_.__s.__data_[0] == 42 && (unint64_t)(v88[1] - v89) >= 9)
            {
              std::string::operator=(&v271, &v270);
              goto LABEL_358;
            }
          }
          if (v90 != 1)
          {
            if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0)
              sub_20B80ACE0(&__dst, v270.__r_.__value_.__l.__data_, v270.__r_.__value_.__l.__size_);
            else
              __dst = v270;
            if (SHIBYTE(v271.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v271.__r_.__value_.__l.__data_);
            v271 = __dst;
            if (*(_BYTE *)(v89 + 8 * i + 4))
            {
              v229 = HIBYTE(v271.__r_.__value_.__r.__words[2]);
              v230 = &v271;
              if ((v271.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              {
                v229 = v271.__r_.__value_.__l.__size_;
                v230 = (std::string *)v271.__r_.__value_.__r.__words[0];
              }
              if (v229)
              {
                v231 = (std::string *)((char *)v230 + v229 - 1);
                if (v231 > v230)
                {
                  v232 = &v230->__r_.__value_.__s.__data_[1];
                  do
                  {
                    v233 = *(v232 - 1);
                    *(v232 - 1) = v231->__r_.__value_.__s.__data_[0];
                    v231->__r_.__value_.__s.__data_[0] = v233;
                    v231 = (std::string *)((char *)v231 - 1);
                    v204 = v232++ >= (char *)v231;
                  }
                  while (!v204);
                }
              }
            }
            if ((sub_20B8B4030(v257, &v271) & 1) == 0)
            {
              v234 = sub_20B828F84(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/seaweed/Dictionary/SeaweedChineseDictionaryCompiler.cpp", 101);
              sub_20B828F84(v234, (uint64_t)"(", 1);
              v235 = (_QWORD *)std::ostream::operator<<();
              v236 = sub_20B828F84(v235, (uint64_t)") [", 3);
              v237 = sub_20B828F84(v236, (uint64_t)"iconv.convert(&convertedReading)", 32);
              v238 = sub_20B828F84(v237, (uint64_t)"] ", 2);
              v239 = sub_20B828F84(v238, (uint64_t)"convert reading error: ", 23);
              if ((v265 & 0x80u) == 0)
                v240 = &v263;
              else
                v240 = v263;
              if ((v265 & 0x80u) == 0)
                v241 = v265;
              else
                v241 = v264;
              sub_20B828F84(v239, (uint64_t)v240, v241);
              sub_20B89423C();
            }
            goto LABEL_358;
          }
        }
        v260 = i;
        if (i)
          v94 = 0;
        else
          v94 = *(_DWORD *)(v3 + 40) == 2;
        v95 = v94;
        if (v94 && (sub_20B8B4030(v257, &v270) & 1) == 0)
        {
          v96 = sub_20B828F84(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/seaweed/Dictionary/SeaweedChineseDictionaryCompiler.cpp", 101);
          sub_20B828F84(v96, (uint64_t)"(", 1);
          v97 = (_QWORD *)std::ostream::operator<<();
          v98 = sub_20B828F84(v97, (uint64_t)") [", 3);
          v99 = sub_20B828F84(v98, (uint64_t)"iconv.convert(&readingString)", 29);
          v100 = sub_20B828F84(v99, (uint64_t)"] ", 2);
          v101 = sub_20B828F84(v100, (uint64_t)"convert reading error: ", 23);
          if ((v265 & 0x80u) == 0)
            v102 = &v263;
          else
            v102 = v263;
          if ((v265 & 0x80u) == 0)
            v103 = v265;
          else
            v103 = v264;
          sub_20B828F84(v101, (uint64_t)v102, v103);
          sub_20B89423C();
        }
        if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v104 = HIBYTE(v270.__r_.__value_.__r.__words[2]);
        else
          v104 = v270.__r_.__value_.__l.__size_;
        if (v104 != 1)
          goto LABEL_140;
        v105 = (std::string *)v270.__r_.__value_.__r.__words[0];
        if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v105 = &v270;
        if (v105->__r_.__value_.__s.__data_[0] != 42)
        {
LABEL_140:
          if ((v95 & 1) != 0)
          {
            v107 = *(unsigned __int16 ****)(v3 + 8);
            v259 = *(char **)v275;
            memset(&v290, 0, sizeof(v290));
            __p = 0;
            v288 = 0;
            v289 = 0;
            if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v108 = &v270;
            else
              v108 = (std::string *)v270.__r_.__value_.__r.__words[0];
            if (v104 >= 2)
            {
              v109 = 0;
              v110 = v104 >> 1;
              do
              {
                v111 = 0;
                v112 = *((unsigned __int16 *)&v108->__r_.__value_.__l.__data_ + v109);
                while ((unsigned __int16)word_20BA4B1C4[v111] != v112)
                {
                  if (++v111 == 5)
                  {
                    if ((v112 - 12549) < 0x25)
                      goto LABEL_160;
LABEL_153:
                    v113 = sub_20B828F84(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/seaweed/Dictionary/SeaweedChineseDictionaryCompiler.cpp", 101);
                    sub_20B828F84(v113, (uint64_t)"(", 1);
                    v114 = (_QWORD *)std::ostream::operator<<();
                    v115 = sub_20B828F84(v114, (uint64_t)") [", 3);
                    v116 = sub_20B828F84(v115, (uint64_t)"InputEngine::isZhuyinToneMark(zhuyin[i]) || InputEngine::isValidZhuyin(zhuyin[i])", 81);
                    v117 = sub_20B828F84(v116, (uint64_t)"] ", 2);
                    v118 = sub_20B828F84(v117, (uint64_t)"not valid zhuyin error: ", 24);
                    if ((v265 & 0x80u) == 0)
                      v119 = &v263;
                    else
                      v119 = v263;
                    if ((v265 & 0x80u) == 0)
                      v120 = v265;
                    else
                      v120 = v264;
                    sub_20B828F84(v118, (uint64_t)v119, v120);
                    sub_20B89423C();
                  }
                }
                if ((v112 - 12549) >= 0x25 && v111 == -1)
                  goto LABEL_153;
LABEL_160:
                v121 = 49;
                switch(*((_WORD *)&v108->__r_.__value_.__l.__data_ + v109))
                {
                  case 0x2C7:
                    v121 = 51;
                    break;
                  case 0x2C8:
                    goto LABEL_164;
                  case 0x2C9:
                    break;
                  case 0x2CA:
                    v121 = 50;
                    break;
                  case 0x2CB:
                    v121 = 52;
                    break;
                  default:
                    if (v112 == 729)
                      v121 = 53;
                    else
LABEL_164:
                      v121 = v112 + 49;
                    break;
                }
                v122 = v288;
                if (v288 >= v289)
                {
                  v124 = (unint64_t)__p;
                  v125 = v288 - (_BYTE *)__p;
                  v126 = v288 - (_BYTE *)__p + 1;
                  if (v126 < 0)
                    sub_20B80CDD8();
                  v127 = v289 - (_BYTE *)__p;
                  if (2 * (v289 - (_BYTE *)__p) > (unint64_t)v126)
                    v126 = 2 * v127;
                  if (v127 >= 0x3FFFFFFFFFFFFFFFLL)
                    v128 = 0x7FFFFFFFFFFFFFFFLL;
                  else
                    v128 = v126;
                  if (v128)
                    v129 = (char *)operator new(v128);
                  else
                    v129 = 0;
                  v130 = &v129[v125];
                  v131 = &v129[v125];
                  *v131 = v121;
                  v123 = v131 + 1;
                  if (v122 != (char *)v124)
                  {
                    v132 = &v122[~v124];
                    do
                    {
                      v133 = *--v122;
                      (v132--)[(_QWORD)v129] = v133;
                    }
                    while (v122 != (char *)v124);
                    v122 = (char *)__p;
                    v130 = v129;
                  }
                  __p = v130;
                  v288 = v123;
                  v289 = &v129[v128];
                  if (v122)
                    operator delete(v122);
                }
                else
                {
                  *v288 = v121;
                  v123 = v122 + 1;
                }
                v288 = v123;
                ++v109;
              }
              while (v109 != v110);
            }
LABEL_222:
            v135 = v259;
          }
          else
          {
            if (*(_DWORD *)(v3 + 40) == 5)
              v134 = (unsigned __int16 ****)(v3 + 16);
            else
              v134 = (unsigned __int16 ****)v3;
            v107 = *v134;
            v135 = (char *)*((_QWORD *)v275 + v260);
            memset(&v290, 0, sizeof(v290));
            __p = 0;
            v288 = 0;
            v289 = 0;
            if (v104)
            {
              v259 = v135;
              v136 = 0;
              for (j = 0; j != v104; ++j)
              {
                v138 = &v270;
                if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v138 = (std::string *)v270.__r_.__value_.__r.__words[0];
                if (v138->__r_.__value_.__s.__data_[j] - 97 >= 0x1A
                  && v138->__r_.__value_.__s.__data_[j] != 42)
                {
                  v139 = sub_20B828F84(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/seaweed/Dictionary/SeaweedChineseDictionaryCompiler.cpp", 101);
                  sub_20B828F84(v139, (uint64_t)"(", 1);
                  v140 = (_QWORD *)std::ostream::operator<<();
                  v141 = sub_20B828F84(v140, (uint64_t)") [", 3);
                  v142 = sub_20B828F84(v141, (uint64_t)"(reading[i] >= 'a' && reading[i] <= 'z') || reading[i] == '*'", 61);
                  v143 = sub_20B828F84(v142, (uint64_t)"] ", 2);
                  v144 = sub_20B828F84(v143, (uint64_t)"not valid pinyin error: ", 24);
                  if ((v265 & 0x80u) == 0)
                    v145 = &v263;
                  else
                    v145 = v263;
                  if ((v265 & 0x80u) == 0)
                    v146 = v265;
                  else
                    v146 = v264;
                  sub_20B828F84(v144, (uint64_t)v145, v146);
                  sub_20B89423C();
                }
                v147 = &v270;
                if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v147 = (std::string *)v270.__r_.__value_.__r.__words[0];
                v148 = v147->__r_.__value_.__s.__data_[j];
                if (v136 >= v289)
                {
                  v150 = (unint64_t)__p;
                  v151 = v136 - (_BYTE *)__p;
                  v152 = v136 - (_BYTE *)__p + 1;
                  if (v152 < 0)
                    sub_20B80CDD8();
                  v153 = v289 - (_BYTE *)__p;
                  if (2 * (v289 - (_BYTE *)__p) > (unint64_t)v152)
                    v152 = 2 * v153;
                  if (v153 >= 0x3FFFFFFFFFFFFFFFLL)
                    v154 = 0x7FFFFFFFFFFFFFFFLL;
                  else
                    v154 = v152;
                  if (v154)
                    v155 = (char *)operator new(v154);
                  else
                    v155 = 0;
                  v156 = &v155[v151];
                  v157 = &v155[v151];
                  *v157 = v148;
                  v149 = v157 + 1;
                  if (v136 != (char *)v150)
                  {
                    v158 = &v136[~v150];
                    do
                    {
                      v159 = *--v136;
                      (v158--)[(_QWORD)v155] = v159;
                    }
                    while (v136 != (char *)v150);
                    v136 = (char *)__p;
                    v156 = v155;
                  }
                  __p = v156;
                  v288 = v149;
                  v289 = &v155[v154];
                  if (v136)
                    operator delete(v136);
                }
                else
                {
                  *v136 = v148;
                  v149 = v136 + 1;
                }
                v288 = v149;
                v136 = v149;
              }
              goto LABEL_222;
            }
          }
          sub_20B80BBD0(v285, v135);
          if ((v286 & 0x80u) == 0)
            v160 = v286;
          else
            v160 = (unint64_t)v285[1];
          if (v160)
          {
            v161 = 0;
            v162 = (_DWORD *)v290.__r_.__value_.__l.__size_;
            do
            {
              if ((v286 & 0x80u) == 0)
                v163 = v285;
              else
                v163 = (void **)v285[0];
              v164 = v161[(_QWORD)v163] - 48;
              if ((unint64_t)v162 >= v290.__r_.__value_.__r.__words[2])
              {
                v166 = (_DWORD *)v290.__r_.__value_.__r.__words[0];
                v167 = (uint64_t)((uint64_t)v162 - v290.__r_.__value_.__r.__words[0]) >> 2;
                v168 = v167 + 1;
                if ((unint64_t)(v167 + 1) >> 62)
                  sub_20B80CDD8();
                v169 = v290.__r_.__value_.__r.__words[2] - v290.__r_.__value_.__r.__words[0];
                if ((uint64_t)(v290.__r_.__value_.__r.__words[2] - v290.__r_.__value_.__r.__words[0]) >> 1 > v168)
                  v168 = v169 >> 1;
                if ((unint64_t)v169 >= 0x7FFFFFFFFFFFFFFCLL)
                  v170 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v170 = v168;
                if (v170)
                {
                  v171 = (char *)sub_20B8127BC((uint64_t)&v290.__r_.__value_.__r.__words[2], v170);
                  v162 = (_DWORD *)v290.__r_.__value_.__l.__size_;
                  v166 = (_DWORD *)v290.__r_.__value_.__r.__words[0];
                }
                else
                {
                  v171 = 0;
                }
                v172 = (int *)&v171[4 * v167];
                *v172 = v164;
                v165 = (std::string::size_type)(v172 + 1);
                while (v162 != v166)
                {
                  v173 = *--v162;
                  *--v172 = v173;
                }
                v290.__r_.__value_.__r.__words[0] = (std::string::size_type)v172;
                v290.__r_.__value_.__l.__size_ = v165;
                v290.__r_.__value_.__r.__words[2] = (std::string::size_type)&v171[4 * v170];
                if (v166)
                  operator delete(v166);
              }
              else
              {
                *v162 = v164;
                v165 = (std::string::size_type)(v162 + 1);
              }
              v290.__r_.__value_.__l.__size_ = v165;
              ++v161;
              v162 = (_DWORD *)v165;
            }
            while (v161 != (char *)v160);
          }
          v282 = 0;
          v283 = 0;
          v284 = 0;
          v174 = atomic_load((unsigned __int8 *)&qword_25472BEF8);
          if ((v174 & 1) == 0 && __cxa_guard_acquire(&qword_25472BEF8))
          {
            sub_20B80BBD0(&__dst, "person");
            v296 = 5000;
            sub_20B80BBD0(v297, "KKK1");
            v298 = 5000;
            sub_20B9A4944((uint64_t)&__dst, 2);
            for (k = 0; k != -8; k -= 4)
            {
              if (SHIBYTE(v297[k + 2]) < 0)
                operator delete((void *)v297[k]);
            }
            __cxa_atexit((void (*)(void *))sub_20B9A491C, &qword_25472BF00, &dword_20B7F7000);
            __cxa_guard_release(&qword_25472BEF8);
          }
          v175 = v290.__r_.__value_.__l.__size_;
          if (v290.__r_.__value_.__l.__size_ == v290.__r_.__value_.__r.__words[0])
          {
            v188 = 0;
            v178 = v290.__r_.__value_.__l.__size_;
          }
          else
          {
            v176 = 0;
            v177 = 0;
            v178 = v290.__r_.__value_.__l.__size_;
            v175 = v290.__r_.__value_.__r.__words[0];
            do
            {
              v179 = *(_DWORD *)(v290.__r_.__value_.__r.__words[0] + 4 * v176);
              if (!v179)
              {
                v180 = sub_20B828F84(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/seaweed/Dictionary/SeaweedChineseDictionaryCompiler.cpp", 101);
                sub_20B828F84(v180, (uint64_t)"(", 1);
                v181 = (_QWORD *)std::ostream::operator<<();
                v182 = sub_20B828F84(v181, (uint64_t)") [", 3);
                v183 = sub_20B828F84(v182, (uint64_t)"syllableLengths[i]", 18);
                v184 = sub_20B828F84(v183, (uint64_t)"] ", 2);
                v185 = sub_20B828F84(v184, (uint64_t)"syllable length is zero: ", 25);
                if ((v265 & 0x80u) == 0)
                  v186 = &v263;
                else
                  v186 = v263;
                if ((v265 & 0x80u) == 0)
                  v187 = v265;
                else
                  v187 = v264;
                sub_20B828F84(v185, (uint64_t)v186, v187);
                sub_20B89423C();
              }
              v177 += v179;
              ++v176;
            }
            while (v176 < (uint64_t)(v290.__r_.__value_.__l.__size_ - v290.__r_.__value_.__r.__words[0]) >> 2);
            v188 = v177;
          }
          if (v288 - (_BYTE *)__p != v188)
          {
            v189 = sub_20B828F84(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/seaweed/Dictionary/SeaweedChineseDictionaryCompiler.cpp", 101);
            sub_20B828F84(v189, (uint64_t)"(", 1);
            v190 = (_QWORD *)std::ostream::operator<<();
            v191 = sub_20B828F84(v190, (uint64_t)") [", 3);
            v192 = sub_20B828F84(v191, (uint64_t)"total == reading.size()", 23);
            v193 = sub_20B828F84(v192, (uint64_t)"] ", 2);
            v194 = sub_20B828F84(v193, (uint64_t)"syllable length doesn't match reading: ", 39);
            if ((v265 & 0x80u) == 0)
              v195 = &v263;
            else
              v195 = v263;
            if ((v265 & 0x80u) == 0)
              v196 = v265;
            else
              v196 = v264;
            sub_20B828F84(v194, (uint64_t)v195, v196);
            sub_20B89423C();
          }
          v197 = (v178 - v175) >> 2;
          v198 = (v197 - 1);
          if ((int)v197 - 1 >= 0)
          {
            do
            {
              v199 = *(int *)(v290.__r_.__value_.__r.__words[0] + 4 * v198);
              v188 -= v199;
              v200 = (char *)__p + v188;
              v201 = **v107;
              if ((_DWORD)v199)
                v202 = v201 == 0;
              else
                v202 = 1;
              if (!v202)
              {
                v203 = 0;
                do
                {
                  v201 = sub_20B9F17AC((uint64_t)v107, v201, v200[v203++]);
                  if (v201)
                    v204 = v203 >= v199;
                  else
                    v204 = 1;
                }
                while (!v204);
              }
              if (!v201 || (v205 = v201[1], v205 == 0xFFFF))
              {
                sub_20B82E068(&__dst, v200, v199);
                v206 = qword_25472BF08;
                if (!qword_25472BF08)
                  goto LABEL_296;
                v207 = &qword_25472BF08;
                do
                {
                  v208 = sub_20B871BA8((_QWORD *)(v206 + 32), (void **)&__dst.__r_.__value_.__l.__data_);
                  if (v208 >= 0)
                    v209 = (uint64_t *)v206;
                  else
                    v209 = (uint64_t *)(v206 + 8);
                  if (v208 >= 0)
                    v207 = (uint64_t *)v206;
                  v206 = *v209;
                }
                while (*v209);
                if (v207 == &qword_25472BF08 || (sub_20B871BA8(&__dst, (void **)v207 + 4) & 0x80) != 0)
LABEL_296:
                  v205 = 0xFFFF;
                else
                  v205 = *((unsigned __int16 *)v207 + 28);
                if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__dst.__r_.__value_.__l.__data_);
                if (v205 == 0xFFFF)
                {
                  v210 = sub_20B828F84(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/seaweed/Dictionary/SeaweedChineseDictionaryCompiler.cpp", 101);
                  sub_20B828F84(v210, (uint64_t)"(", 1);
                  v211 = (_QWORD *)std::ostream::operator<<();
                  v212 = sub_20B828F84(v211, (uint64_t)") [", 3);
                  v213 = sub_20B828F84(v212, (uint64_t)"syllableID != kInvalidIndex", 27);
                  v214 = sub_20B828F84(v213, (uint64_t)"] ", 2);
                  v215 = sub_20B828F84(v214, (uint64_t)"cannot get syllable ID from syllable trie: ", 43);
                  if ((v265 & 0x80u) == 0)
                    v216 = &v263;
                  else
                    v216 = v263;
                  if ((v265 & 0x80u) == 0)
                    v217 = v265;
                  else
                    v217 = v264;
                  sub_20B828F84(v215, (uint64_t)v216, v217);
                  sub_20B89423C();
                }
              }
              v218 = v283;
              if (v283 >= v284)
              {
                v220 = (char *)v282;
                v221 = v283 - (_BYTE *)v282;
                if (v283 - (_BYTE *)v282 <= -3)
                  sub_20B80CDD8();
                v222 = v221 >> 1;
                if (v284 - (_BYTE *)v282 <= (unint64_t)((v221 >> 1) + 1))
                  v223 = v222 + 1;
                else
                  v223 = v284 - (_BYTE *)v282;
                if ((unint64_t)(v284 - (_BYTE *)v282) >= 0x7FFFFFFFFFFFFFFELL)
                  v224 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v224 = v223;
                if (v224)
                {
                  v225 = (char *)sub_20B80FD48((uint64_t)&v284, v224);
                  v220 = (char *)v282;
                  v218 = v283;
                }
                else
                {
                  v225 = 0;
                }
                v226 = &v225[2 * v222];
                *(_WORD *)v226 = v205;
                v219 = v226 + 2;
                while (v218 != v220)
                {
                  v227 = *((_WORD *)v218 - 1);
                  v218 -= 2;
                  *((_WORD *)v226 - 1) = v227;
                  v226 -= 2;
                }
                v282 = v226;
                v283 = v219;
                v284 = &v225[2 * v224];
                if (v220)
                  operator delete(v220);
              }
              else
              {
                *(_WORD *)v283 = v205;
                v219 = v218 + 2;
              }
              v283 = v219;
            }
            while (v198-- > 0);
          }
          sub_20B82E068(&v269, v282, v283 - (_BYTE *)v282);
          if (v282)
          {
            v283 = (char *)v282;
            operator delete(v282);
          }
          v3 = v258;
          i = v260;
          if ((char)v286 < 0)
            operator delete(v285[0]);
          if (__p)
          {
            v288 = (char *)__p;
            operator delete(__p);
          }
          if (v290.__r_.__value_.__r.__words[0])
          {
            v290.__r_.__value_.__l.__size_ = v290.__r_.__value_.__r.__words[0];
            operator delete(v290.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v271.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v271.__r_.__value_.__l.__data_);
          v271 = v269;
          goto LABEL_358;
        }
        if (SHIBYTE(v271.__r_.__value_.__r.__words[2]) < 0)
        {
          v271.__r_.__value_.__l.__size_ = 1;
          v106 = (std::string *)v271.__r_.__value_.__r.__words[0];
        }
        else
        {
          *((_BYTE *)&v271.__r_.__value_.__s + 23) = 1;
          v106 = &v271;
        }
        i = v260;
        LOWORD(v106->__r_.__value_.__l.__data_) = 42;
LABEL_358:
        v242 = HIBYTE(v271.__r_.__value_.__r.__words[2]);
        if ((v271.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v242 = v271.__r_.__value_.__l.__size_;
        if (!v242)
        {
          v243 = sub_20B828F84(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/seaweed/Dictionary/SeaweedChineseDictionaryCompiler.cpp", 101);
          sub_20B828F84(v243, (uint64_t)"(", 1);
          v244 = (_QWORD *)std::ostream::operator<<();
          v245 = sub_20B828F84(v244, (uint64_t)") [", 3);
          v246 = sub_20B828F84(v245, (uint64_t)"!convertedReading.empty()", 25);
          v247 = sub_20B828F84(v246, (uint64_t)"] ", 2);
          v248 = sub_20B828F84(v247, (uint64_t)"empty converted reading error: ", 31);
          if ((v265 & 0x80u) == 0)
            v249 = &v263;
          else
            v249 = v263;
          if ((v265 & 0x80u) == 0)
            v250 = v265;
          else
            v250 = v264;
          sub_20B828F84(v248, (uint64_t)v249, v250);
          sub_20B89423C();
        }
        v251 = (_OWORD *)v268;
        if ((unint64_t)v268 >= *((_QWORD *)&v268 + 1))
        {
          v253 = sub_20B8AD184((uint64_t *)&v267 + 1, (__int128 *)&v271);
        }
        else
        {
          if (SHIBYTE(v271.__r_.__value_.__r.__words[2]) < 0)
          {
            sub_20B80ACE0((_BYTE *)v268, v271.__r_.__value_.__l.__data_, v271.__r_.__value_.__l.__size_);
          }
          else
          {
            v252 = *(_OWORD *)&v271.__r_.__value_.__l.__data_;
            *(_QWORD *)(v268 + 16) = *((_QWORD *)&v271.__r_.__value_.__l + 2);
            *v251 = v252;
          }
          v253 = (uint64_t)v251 + 24;
        }
        *(_QWORD *)&v268 = v253;
        if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v270.__r_.__value_.__l.__data_);
        if (SHIBYTE(v271.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v271.__r_.__value_.__l.__data_);
      }
    }
    if (v272)
    {
      v273 = v272;
      operator delete(v272);
    }
    if (v275)
    {
      v276 = v275;
      operator delete(v275);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (v279)
    {
      v280 = v279;
      operator delete(v279);
    }
    (*(void (**)(uint64_t, std::locale *))(v256 + 16))(v256, &v261);
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v267 + 8;
    sub_20B83AFD0((void ***)&__dst);
    if (SBYTE7(v267) < 0)
      operator delete((void *)v266);
    if ((char)v265 < 0)
      operator delete(v263);
  }
  v292[0] = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)((char *)v292 + *(_QWORD *)(v292[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 24);
  MEMORY[0x20BD399D4](&v293);
  std::istream::~istream();
  return MEMORY[0x20BD39C2C](&v294);
}

void sub_20B99EF84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::locale a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  void *a65;
  void *__p;
  void *a71;
  char a72;
  void *a73;
  void *a74;
  uint64_t a75;
  uint64_t v75;
  uint64_t v77;
  uint64_t v78;

  v77 = 0;
  v78 = v75 - 176;
  while (1)
  {
    if (*(char *)(v78 + v77 + 55) < 0)
      operator delete(*(void **)(v78 + v77 + 32));
    v77 -= 32;
    if (v77 == -64)
    {
      __cxa_guard_abort(&qword_25472BEF8);
      if (__p)
        operator delete(__p);
      if (a72 < 0)
        operator delete(a71);
      if (a73)
        operator delete(a73);
      if (a74)
      {
        a75 = (uint64_t)a74;
        operator delete(a74);
      }
      if (a45 < 0)
        operator delete(a40);
      if (a51 < 0)
        operator delete(a46);
      if (a53)
        operator delete(a53);
      if (a56)
        operator delete(a56);
      if (a64 < 0)
        operator delete(a59);
      if (a65)
        operator delete(a65);
      a74 = a11;
      sub_20B83AFD0((void ***)&a74);
      if (a33 < 0)
        operator delete(a28);
      if (a27 < 0)
        operator delete(a22);
      sub_20B82EC24(&STACK[0x21C0]);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t sub_20B99F244(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 64);
  sub_20B83AFD0(&v3);
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

unint64_t sub_20B99F29C(const char *a1, void **a2, unint64_t a3)
{
  const char *v5;
  int64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 *i;
  int v12;
  unsigned __int8 *v13;
  unsigned __int8 *j;
  int v15;
  int v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  _BYTE *v19;
  _BYTE *v20;
  void **v22;
  unsigned __int8 *v23;

  v5 = a1;
  v6 = strlen(a1);
  v23 = 0;
  if (v6 >= 1)
  {
    v7 = 0;
    v8 = (unint64_t)&v5[v6];
    v9 = a3;
    while (1)
    {
      v10 = v9;
      for (i = (unsigned __int8 *)v5; ; ++i)
      {
        v12 = *i;
        if (v12 != 9 && v12 != 32)
          break;
        ++v5;
      }
      if (v12 == 34)
      {
        v13 = i + 1;
        v23 = i + 1;
        for (j = i + 1; (unint64_t)j < v8; ++j)
        {
          v15 = *j;
          if (v15 == 34)
          {
            v16 = *++j;
            if (v16 != 34)
              break;
          }
          *v13++ = v15;
        }
        v17 = (unsigned __int8 *)memchr(j, 44, v8 - (_QWORD)j);
        if (v17)
          v18 = v17;
        else
          v18 = (unsigned __int8 *)v8;
      }
      else
      {
        v23 = i;
        v19 = memchr(i, 44, v8 - (_QWORD)v5);
        if (v19)
          v20 = v19;
        else
          v20 = (_BYTE *)v8;
        v18 = &i[v20 - v5];
        v13 = v18;
      }
      v9 = v10 - 1;
      if (v10 < 2)
      {
        v22 = a2;
        sub_20B8A7450(&v22, &v23);
        if (v10 == 1)
          return a3;
      }
      else
      {
        *v13 = 0;
        v22 = a2;
        sub_20B8A7450(&v22, &v23);
      }
      ++v7;
      v5 = (const char *)(v18 + 1);
      if ((unint64_t)(v18 + 1) >= v8)
        return v7;
    }
  }
  return 0;
}

uint64_t sub_20B99F404(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char v9;

  v9 = 0;
  v2 = **(_QWORD **)(result + 8);
  v3 = *(_QWORD *)(*(_QWORD *)(result + 8) + 8);
  if (v2 != v3)
  {
    v5 = 0;
    v6 = ((v3 - v2) >> 5) - 1;
    v7 = v2 + 32;
    do
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, BOOL, char *))(a2 + 16))(a2, v7 - 32, *(_QWORD *)(v7 - 8), v5, v6 == v5, &v9);
      ++v5;
      if (v9)
        v8 = 1;
      else
        v8 = v7 == v3;
      v7 += 32;
    }
    while (!v8);
  }
  return result;
}

uint64_t sub_20B99F49C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t **v9;
  BOOL v10;
  char v11;

  v11 = 0;
  v2 = **(_QWORD **)(result + 8);
  v3 = *(_QWORD *)(*(_QWORD *)(result + 8) + 8);
  if (v2 != v3)
  {
    v5 = result;
    v6 = 0;
    v7 = ((v3 - v2) >> 5) - 1;
    v8 = v2 + 32;
    do
    {
      v9 = *(uint64_t ***)(v5 + 16);
      if (*((char *)v9 + 23) < 0)
        v9 = (uint64_t **)*v9;
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, BOOL, char *))(a2 + 16))(a2, v8 - 32, (uint64_t)v9 + 12 * *(unsigned int *)(v8 - 8), v6, v7 == v6, &v11);
      ++v6;
      if (v11)
        v10 = 1;
      else
        v10 = v8 == v3;
      v8 += 32;
    }
    while (!v10);
  }
  return result;
}

void sub_20B99F558(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  unsigned int v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  int *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v37;
  int v38;
  const std::string::value_type *v39;
  int v40;
  int v41;
  const std::string::value_type *v42;
  std::string::size_type v43;
  std::string *v44;
  __int128 v45;
  __int128 v46;
  std::locale::__imp *v47;
  __int128 v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  std::string::size_type v54;
  uint64_t v55;
  __int128 v56;
  std::locale::__imp *v57;
  unint64_t v58;
  std::locale::__imp *v59;
  std::locale::__imp *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  unsigned int *v67;
  unsigned int *v68;
  unsigned int *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  unsigned int *v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  _BYTE *v80;
  uint64_t v81;
  __int128 v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  int v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  std::string::size_type v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  uint64_t *v100;
  unsigned int *v101;
  unsigned int *v102;
  unsigned int *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char *v108;
  unsigned int *v109;
  char *v110;
  unsigned int v111;
  void **v112;
  __n128 *v113;
  const std::nothrow_t *v114;
  unint64_t v115;
  __n128 *v116;
  BOOL v117;
  __n128 *v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int v123;
  int v124;
  unsigned __int8 **v125;
  uint64_t v126;
  unsigned __int8 *v127;
  unsigned __int8 *v128;
  int v129;
  unsigned __int8 *v130;
  unsigned __int8 *v131;
  uint64_t v132;
  uint64_t v133;
  std::string::size_type size;
  __int128 v135;
  _QWORD *v136;
  _QWORD *v137;
  _QWORD *v138;
  _QWORD *v139;
  _QWORD *v140;
  _QWORD *v141;
  _QWORD *v142;
  _BYTE *v143;
  uint64_t v144;
  _QWORD *v145;
  std::string::size_type v146;
  unsigned int v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  __int128 *v151;
  __int128 v152;
  char v153;
  std::string::size_type v154;
  size_t v155;
  std::string::size_type v156;
  std::string::size_type v157;
  std::string *v158;
  unsigned __int8 *v159;
  uint64_t v160;
  size_t v161;
  std::string *v162;
  char v163;
  const void *v164;
  int v165;
  unsigned __int8 *v167;
  int v168;
  int v169;
  int v170;
  int v171;
  int v172;
  std::locale::__imp *v173;
  std::locale::__imp *v174;
  std::locale::__imp *locale;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t v179;
  char *v180;
  std::locale::__imp *v181;
  int v182;
  uint64_t v183;
  _OWORD *v184;
  __int128 v185;
  std::string::size_type v186;
  int v187;
  std::locale::__imp *v188;
  std::locale::__imp *v189;
  std::locale::__imp *v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  unint64_t v194;
  char *v195;
  std::locale::__imp *v196;
  char *v197;
  int v198;
  unint64_t v199;
  void ***v200;
  _QWORD *v201;
  uint64_t v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  char *v206;
  void ***v207;
  char *v208;
  _QWORD *v209;
  void **v210;
  __int128 v211;
  char *v212;
  void **v213;
  uint64_t v214;
  uint64_t i;
  uint64_t v216;
  int v217;
  uint64_t v218;
  uint64_t v219;
  unsigned int v220;
  int v221;
  int v223;
  _QWORD *v224;
  _QWORD *v225;
  _QWORD *v226;
  _QWORD *v227;
  _QWORD *v228;
  _QWORD *v229;
  const std::locale::facet *v230;
  uint64_t v231;
  unsigned int v232;
  uint64_t v233;
  int v234;
  char *v235;
  _QWORD *v236;
  _QWORD *v237;
  _QWORD *v238;
  _QWORD *v239;
  _QWORD *v240;
  _QWORD *v241;
  const std::locale::facet *v242;
  _QWORD *v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  char *v247;
  _QWORD *v248;
  _QWORD *v249;
  _QWORD *v250;
  _QWORD *v251;
  _QWORD *v252;
  _QWORD *v253;
  const std::locale::facet *v254;
  uint64_t v255;
  char *v256;
  _QWORD *v257;
  _QWORD *v258;
  _QWORD *v259;
  _QWORD *v260;
  _QWORD *v261;
  _QWORD *v262;
  const std::locale::facet *v263;
  int v264;
  uint64_t v265;
  uint64_t v266;
  _QWORD *v267;
  _QWORD *v268;
  const std::locale::facet *v269;
  uint64_t *v270;
  _QWORD *v271;
  uint64_t v272;
  int v273;
  int v274;
  unsigned int v275;
  unsigned int v276;
  unsigned int v277;
  uint64_t v278;
  unsigned int v279;
  uint64_t v280;
  int v281;
  unsigned int v282;
  std::string __p;
  int v284;
  uint64_t v285;
  uint64_t v286;
  int v287;
  uint64_t v288;
  uint64_t v289;
  void (*v290)(_QWORD *, int *);
  void *v291;
  _QWORD *v292;
  _QWORD *v293;
  _QWORD *v294;
  uint64_t *v295;
  _QWORD *v296;
  _QWORD *v297;
  uint64_t *v298;
  uint64_t *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t *v302;
  uint64_t v303;
  __n128 (*v304)(_QWORD *, uint64_t);
  void (*v305)(uint64_t);
  void *v306;
  void *v307;
  uint64_t v308;
  _QWORD v309[5];
  _BYTE v310[32];
  int v311;
  _QWORD v312[5];
  _BYTE v313[32];
  int v314;
  _QWORD v315[5];
  _BYTE v316[32];
  int v317;
  uint64_t v318;
  uint64_t *v319;
  uint64_t v320;
  __n128 (*v321)(_QWORD *, uint64_t);
  void (*v322)(uint64_t);
  _BYTE v323[24];
  _QWORD v324[3];
  int v325;
  _QWORD v326[4];
  unsigned int *v327;
  unsigned int *v328;
  unsigned int *v329;
  uint64_t v330;
  uint64_t *v331;
  uint64_t v332;
  __n128 (*v333)(_QWORD *, uint64_t);
  void (*v334)(uint64_t);
  _BYTE v335[24];
  void **v336;
  std::string __dst;
  __int128 v338;
  unint64_t v339;
  std::locale v340;
  std::locale::__imp *v341;
  std::locale::__imp *v342;
  _BYTE v343[32];
  __int128 v344;
  __int128 v345;
  __int128 v346;
  __int128 v347;
  __int128 v348;
  __int128 v349;
  uint64_t v350;
  std::string v351;
  char *v352;
  _QWORD v353[48];
  _QWORD v354[22];

  v354[19] = *MEMORY[0x24BDAC8D0];
  v330 = 0;
  v331 = &v330;
  v332 = 0x4002000000;
  v333 = sub_20B9A1628;
  v334 = sub_20B9A164C;
  memset(v335, 0, sizeof(v335));
  v328 = 0;
  v329 = 0;
  v326[0] = 0;
  v326[1] = v326;
  v326[2] = 0x2000000000;
  v326[3] = 0;
  v327 = 0;
  v324[0] = 0;
  v324[1] = v324;
  v324[2] = 0x2000000000;
  v325 = 0;
  v318 = 0;
  v319 = &v318;
  v320 = 0x4002000000;
  v321 = sub_20B9A1674;
  v322 = sub_20B9A1698;
  memset(v323, 0, sizeof(v323));
  v315[0] = 0;
  v315[1] = v315;
  v315[2] = 0x5002000000;
  v315[3] = sub_20B9A16C0;
  v315[4] = sub_20B9A1730;
  memset(v316, 0, sizeof(v316));
  v317 = 1065353216;
  v312[0] = 0;
  v312[1] = v312;
  v312[2] = 0x5002000000;
  v312[3] = sub_20B9A16C0;
  v312[4] = sub_20B9A1730;
  memset(v313, 0, sizeof(v313));
  v314 = 1065353216;
  v309[1] = v309;
  v309[2] = 0x5002000000;
  v309[3] = sub_20B9A1738;
  v309[4] = sub_20B9A17A8;
  memset(v310, 0, sizeof(v310));
  v311 = 1065353216;
  v301 = 0;
  v302 = &v301;
  v303 = 0x4002000000;
  v304 = sub_20B9A17B0;
  v305 = sub_20B9A17D4;
  v308 = 0;
  v309[0] = 0;
  v306 = 0;
  v307 = 0;
  v288 = MEMORY[0x24BDAC760];
  v289 = 0x40000000;
  v290 = sub_20B9A17EC;
  v291 = &unk_24C46C630;
  v292 = v326;
  v293 = v315;
  v294 = v309;
  v295 = &v330;
  v296 = v312;
  v297 = v324;
  v298 = &v318;
  v299 = &v301;
  v300 = a1;
  sub_20B99D750(a1);
  v278 = a1;
  v2 = *(uint64_t **)(a1 + 104);
  v4 = *v2;
  v3 = v2[1];
  if (v3 - *v2 == 8)
  {
    v5 = v331;
    v7 = v331 + 5;
    v6 = v331[5];
    v8 = v331[6];
    v9 = v8 - v6;
    if ((unint64_t)(v8 - v6) >= 0x1FFFFE1)
    {
      v10 = sub_20B828F84(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/seaweed/Dictionary/SeaweedChineseDictionaryCompiler.cpp", 101);
      sub_20B828F84(v10, (uint64_t)"(", 1);
      v11 = (_QWORD *)std::ostream::operator<<();
      v12 = sub_20B828F84(v11, (uint64_t)") [", 3);
      v13 = sub_20B828F84(v12, (uint64_t)"keyTokenPairs.size() <= kMaxTrieEntryCount", 42);
      v14 = sub_20B828F84(v13, (uint64_t)"] ", 2);
      sub_20B828F84(v14, (uint64_t)"trie can hold a maximum of ", 27);
      v15 = (_QWORD *)std::ostream::operator<<();
      sub_20B828F84(v15, (uint64_t)" entries.", 9);
      sub_20B89423C();
    }
    if (v8 != v6)
    {
      v16 = 0;
      v17 = v9 >> 5;
      if ((unint64_t)(v9 >> 5) <= 1)
        v17 = 1;
      v18 = (char *)(v6 + 23);
      while ((*v18 & 0x80000000) == 0)
      {
        LODWORD(v19) = *v18;
        if (v16 < v19)
          goto LABEL_10;
LABEL_11:
        v18 += 32;
        if (!--v17)
          goto LABEL_116;
      }
      v19 = *(_QWORD *)(v18 - 15);
      if (v19 <= v16)
        goto LABEL_11;
LABEL_10:
      v16 = v19;
      goto LABEL_11;
    }
    v16 = 0;
LABEL_116:
    v101 = v328;
    if (v328 >= v329)
    {
      v103 = v327;
      v104 = v328 - v327;
      v105 = v104 + 1;
      if ((unint64_t)(v104 + 1) >> 62)
        sub_20B80CDD8();
      v106 = (char *)v329 - (char *)v327;
      if (((char *)v329 - (char *)v327) >> 1 > v105)
        v105 = v106 >> 1;
      if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFFCLL)
        v107 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v107 = v105;
      if (v107)
      {
        v108 = (char *)sub_20B8127BC((uint64_t)&v329, v107);
        v103 = v327;
        v101 = v328;
      }
      else
      {
        v108 = 0;
      }
      v109 = (unsigned int *)&v108[4 * v104];
      v110 = &v108[4 * v107];
      *v109 = v16;
      v102 = v109 + 1;
      while (v101 != v103)
      {
        v111 = *--v101;
        *--v109 = v111;
      }
      v327 = v109;
      v328 = v102;
      v329 = (unsigned int *)v110;
      if (v103)
        operator delete(v103);
    }
    else
    {
      *v328 = v16;
      v102 = v101 + 1;
    }
    v328 = v102;
    v112 = (void **)v5[5];
    v113 = (__n128 *)v5[6];
    if ((char *)v113 - (char *)v112 < 1)
    {
LABEL_136:
      v118 = 0;
      v115 = 0;
    }
    else
    {
      v114 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
      v115 = ((char *)v113 - (char *)v112) >> 5;
      while (1)
      {
        v116 = (__n128 *)operator new(32 * v115, v114);
        if (v116)
          break;
        v117 = v115 > 1;
        v115 >>= 1;
        if (!v117)
          goto LABEL_136;
      }
      v118 = v116;
    }
    sub_20B9A5FD8(v112, v113, ((char *)v113 - (char *)v112) >> 5, v118, v115);
    if (v118)
      operator delete(v118);
    memset(v343, 0, 24);
    memset(&__p, 0, sizeof(__p));
    v341 = 0;
    v342 = 0;
    v338 = 0uLL;
    v339 = 0;
    v340.__locale_ = 0;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C4604D0;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v7;
    sub_20B9A2E70((uint64_t)&__dst, (uint64_t)&v338);
    v119 = v5[6];
    if (v119 == v5[5])
    {
      v124 = 0;
      v123 = 0;
      goto LABEL_245;
    }
    v120 = 0;
    v121 = 0;
    v122 = 0;
    v123 = 0;
    v124 = 0;
    v271 = v7;
    v119 = v5[5];
LABEL_142:
    if (!v121)
      goto LABEL_162;
    v125 = (unsigned __int8 **)(v119 + 32 * v120);
    v126 = v343[23];
    if (v343[23] >= 0)
      v127 = (unsigned __int8 *)v343[23];
    else
      v127 = *(unsigned __int8 **)&v343[8];
    v128 = (unsigned __int8 *)*((unsigned __int8 *)v125 + 23);
    v129 = (char)v128;
    if ((char)v128 < 0)
      v128 = v125[1];
    if (v127 == v128)
    {
      if (v129 >= 0)
        v130 = (unsigned __int8 *)(v119 + 32 * v120);
      else
        v130 = *v125;
      if ((v343[23] & 0x80) == 0)
      {
        if (v343[23])
        {
          v131 = v343;
          while (*v131 == *v130)
          {
            ++v131;
            ++v130;
            if (!--v126)
              goto LABEL_162;
          }
          goto LABEL_159;
        }
LABEL_162:
        if (++v124 >= 0x100)
        {
          v136 = sub_20B828F84(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/seaweed/Dictionary/SeaweedChineseDictionaryCompiler.cpp", 101);
          sub_20B828F84(v136, (uint64_t)"(", 1);
          v137 = (_QWORD *)std::ostream::operator<<();
          v138 = sub_20B828F84(v137, (uint64_t)") [", 3);
          v139 = sub_20B828F84(v138, (uint64_t)"homographCount <= kMaxHomographEntryCount", 41);
          v140 = sub_20B828F84(v139, (uint64_t)"] ", 2);
          sub_20B828F84(v140, (uint64_t)"number of homograph words is greater than ", 42);
          v141 = (_QWORD *)std::ostream::operator<<();
          v142 = sub_20B828F84(v141, (uint64_t)". string =", 10);
          if (v343[23] >= 0)
            v143 = v343;
          else
            v143 = *(_BYTE **)v343;
          if (v343[23] >= 0)
            v144 = v343[23];
          else
            v144 = *(_QWORD *)&v343[8];
          v145 = sub_20B828F84(v142, (uint64_t)v143, v144);
          sub_20B828F84(v145, (uint64_t)" count=", 7);
          std::ostream::operator<<();
          sub_20B89423C();
        }
        goto LABEL_242;
      }
      if (!memcmp(*(const void **)v343, v130, *(size_t *)&v343[8]))
        goto LABEL_162;
    }
LABEL_159:
    v277 = v123;
    v132 = v123;
    v133 = v119 + 32 * v123;
    size = __p.__r_.__value_.__l.__size_;
    v276 = v122;
    v275 = v121;
    v273 = v124;
    if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
    {
      v146 = sub_20B8AD184((uint64_t *)&__p, (__int128 *)v133);
      v147 = v277;
    }
    else
    {
      if (*(char *)(v133 + 23) < 0)
      {
        sub_20B80ACE0((_BYTE *)__p.__r_.__value_.__l.__size_, *(void **)v133, *(_QWORD *)(v133 + 8));
      }
      else
      {
        v135 = *(_OWORD *)v133;
        *(_QWORD *)(__p.__r_.__value_.__l.__size_ + 16) = *(_QWORD *)(v133 + 16);
        *(_OWORD *)size = v135;
      }
      v146 = size + 24;
      v147 = v277;
    }
    __p.__r_.__value_.__l.__size_ = v146;
    v148 = *v7 + 32 * v132;
    v149 = v147 + 1;
    while (1)
    {
      while (1)
      {
        v150 = v5[5];
        if (v149 >= (v5[6] - v150) >> 5)
        {
          LOBYTE(size) = 1;
LABEL_222:
          v167 = (unsigned __int8 *)(v338 + 3 * v276);
          v168 = v167[1];
          v169 = *v167;
          v170 = v167[2];
          if ((size & 1) != 0)
            v171 = 2048;
          else
            v171 = 0;
          v172 = v273 + (v277 << 12) + v171 + (v168 << 8) + (v169 << 9) + (v170 << 10);
          v173 = v341;
          v121 = v275;
          if (v341 >= v342)
          {
            locale = v340.__locale_;
            v176 = (v341 - v340.__locale_) >> 2;
            v177 = v176 + 1;
            v7 = v271;
            if ((unint64_t)(v176 + 1) >> 62)
              sub_20B80CDD8();
            v178 = v342 - v340.__locale_;
            if ((v342 - v340.__locale_) >> 1 > v177)
              v177 = v178 >> 1;
            if ((unint64_t)v178 >= 0x7FFFFFFFFFFFFFFCLL)
              v179 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v179 = v177;
            if (v179)
            {
              v180 = (char *)sub_20B8127BC((uint64_t)&v342, v179);
              locale = v340.__locale_;
              v173 = v341;
            }
            else
            {
              v180 = 0;
            }
            v181 = (std::locale::__imp *)&v180[4 * v176];
            *(_DWORD *)v181 = v172;
            v174 = (std::locale::__imp *)((char *)v181 + 4);
            while (v173 != locale)
            {
              v182 = *((_DWORD *)v173 - 1);
              v173 = (std::locale::__imp *)((char *)v173 - 4);
              *((_DWORD *)v181 - 1) = v182;
              v181 = (std::locale::__imp *)((char *)v181 - 4);
            }
            v340.__locale_ = v181;
            v341 = v174;
            v342 = (std::locale::__imp *)&v180[4 * v179];
            if (locale)
              operator delete(locale);
          }
          else
          {
            *(_DWORD *)v341 = v172;
            v174 = (std::locale::__imp *)((char *)v173 + 4);
            v7 = v271;
          }
          v341 = v174;
          v122 = v276 + 1;
          v124 = 1;
          v123 = v275;
LABEL_242:
          std::string::operator=((std::string *)v343, (const std::string *)(*v7 + 32 * v120));
          v119 = v5[5];
          v120 = ++v121;
          if (v121 >= (unint64_t)((v5[6] - v119) >> 5))
          {
LABEL_245:
            v183 = v119 + 32 * v123;
            v184 = (_OWORD *)__p.__r_.__value_.__l.__size_;
            if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
            {
              v186 = sub_20B8AD184((uint64_t *)&__p, (__int128 *)v183);
            }
            else
            {
              if (*(char *)(v183 + 23) < 0)
              {
                sub_20B80ACE0((_BYTE *)__p.__r_.__value_.__l.__size_, *(void **)v183, *(_QWORD *)(v183 + 8));
              }
              else
              {
                v185 = *(_OWORD *)v183;
                *(_QWORD *)(__p.__r_.__value_.__l.__size_ + 16) = *(_QWORD *)(v183 + 16);
                *v184 = v185;
              }
              v186 = (std::string::size_type)v184 + 24;
            }
            __p.__r_.__value_.__l.__size_ = v186;
            v187 = v124
                 + (v123 << 12)
                 + (*(unsigned __int8 *)(*((_QWORD *)&v338 + 1) - 2) << 8)
                 + (*(unsigned __int8 *)(*((_QWORD *)&v338 + 1) - 3) << 9)
                 + (*(unsigned __int8 *)(*((_QWORD *)&v338 + 1) - 1) << 10)
                 + 2048;
            v188 = v341;
            if (v341 >= v342)
            {
              v190 = v340.__locale_;
              v191 = (v341 - v340.__locale_) >> 2;
              v192 = v191 + 1;
              if ((unint64_t)(v191 + 1) >> 62)
                sub_20B80CDD8();
              v193 = v342 - v340.__locale_;
              if ((v342 - v340.__locale_) >> 1 > v192)
                v192 = v193 >> 1;
              if ((unint64_t)v193 >= 0x7FFFFFFFFFFFFFFCLL)
                v194 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v194 = v192;
              if (v194)
              {
                v195 = (char *)sub_20B8127BC((uint64_t)&v342, v194);
                v190 = v340.__locale_;
                v188 = v341;
              }
              else
              {
                v195 = 0;
              }
              v196 = (std::locale::__imp *)&v195[4 * v191];
              v197 = &v195[4 * v194];
              *(_DWORD *)v196 = v187;
              v189 = (std::locale::__imp *)((char *)v196 + 4);
              while (v188 != v190)
              {
                v198 = *((_DWORD *)v188 - 1);
                v188 = (std::locale::__imp *)((char *)v188 - 4);
                *((_DWORD *)v196 - 1) = v198;
                v196 = (std::locale::__imp *)((char *)v196 - 4);
              }
              v340.__locale_ = v196;
              v341 = v189;
              v342 = (std::locale::__imp *)v197;
              if (v190)
                operator delete(v190);
            }
            else
            {
              *(_DWORD *)v341 = v187;
              v189 = (std::locale::__imp *)((char *)v188 + 4);
            }
            v341 = v189;
            sub_20BA2010C((uint64_t *)&v336, (uint64_t **)&__p, &v340);
            v199 = *(_QWORD *)(v278 + 176);
            v200 = *(void ****)(v278 + 168);
            if ((unint64_t)v200 >= v199)
            {
              v201 = *(_QWORD **)(v278 + 160);
              v202 = v200 - (void ***)v201;
              if ((unint64_t)(v202 + 1) >> 61)
                sub_20B80CDD8();
              v203 = v199 - (_QWORD)v201;
              v204 = (uint64_t)(v199 - (_QWORD)v201) >> 2;
              if (v204 <= v202 + 1)
                v204 = v202 + 1;
              if (v203 >= 0x7FFFFFFFFFFFFFF8)
                v205 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v205 = v204;
              v353[0] = v278 + 176;
              if (v205)
              {
                v206 = (char *)sub_20B800BE8(v278 + 176, v205);
                v201 = *(_QWORD **)(v278 + 160);
                v200 = *(void ****)(v278 + 168);
              }
              else
              {
                v206 = 0;
              }
              v207 = (void ***)&v206[8 * v202];
              v208 = &v206[8 * v205];
              v352 = v208;
              *v207 = v336;
              v209 = v207 + 1;
              v336 = 0;
              v351.__r_.__value_.__r.__words[2] = (std::string::size_type)(v207 + 1);
              if (v200 != v201)
              {
                do
                {
                  v210 = *--v200;
                  *--v207 = v210;
                  *v200 = 0;
                }
                while (v200 != v201);
                v209 = (_QWORD *)v351.__r_.__value_.__r.__words[2];
                v208 = v352;
              }
              v211 = *(_OWORD *)(v278 + 160);
              *(_QWORD *)(v278 + 160) = v207;
              *(_QWORD *)(v278 + 168) = v209;
              *(_OWORD *)&v351.__r_.__value_.__r.__words[1] = v211;
              v212 = *(char **)(v278 + 176);
              *(_QWORD *)(v278 + 176) = v208;
              v352 = v212;
              v351.__r_.__value_.__r.__words[0] = v211;
              sub_20B9A5800((uint64_t)&v351);
              v213 = v336;
              *(_QWORD *)(v278 + 168) = v209;
              if (v213)
                sub_20B969128(v213);
            }
            else
            {
              *v200 = v336;
              *(_QWORD *)(v278 + 168) = v200 + 1;
            }
            if ((_QWORD)v338)
            {
              *((_QWORD *)&v338 + 1) = v338;
              operator delete((void *)v338);
            }
            if (v340.__locale_)
            {
              v341 = v340.__locale_;
              operator delete(v340.__locale_);
            }
            v351.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
            sub_20B83AFD0((void ***)&v351);
            if ((v343[23] & 0x80000000) != 0)
              operator delete(*(void **)v343);
            v214 = v331[5];
            for (i = v331[6]; v214 != i; v214 += 32)
            {
              std::string::append((std::string *)(v278 + 112), *(const std::string::value_type **)(v214 + 24), 0xCuLL);
              v216 = *(_QWORD *)(v214 + 24);
              if (v216)
                MEMORY[0x20BD39CB0](v216, 0x1000C403E1C8BA9);
            }
            goto LABEL_293;
          }
          goto LABEL_142;
        }
        v151 = (__int128 *)(v150 + 32 * v149);
        if (*((char *)v151 + 23) < 0)
        {
          sub_20B80ACE0(&v351, *(void **)v151, *((_QWORD *)v151 + 1));
        }
        else
        {
          v152 = *v151;
          v351.__r_.__value_.__r.__words[2] = *((_QWORD *)v151 + 2);
          *(_OWORD *)&v351.__r_.__value_.__l.__data_ = v152;
        }
        v153 = *(_BYTE *)(v148 + 23);
        v154 = v153 >= 0 ? *(unsigned __int8 *)(v148 + 23) : *(_QWORD *)(v148 + 8);
        v155 = HIBYTE(v351.__r_.__value_.__r.__words[2]);
        v156 = v351.__r_.__value_.__l.__size_;
        v157 = (v351.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
             ? HIBYTE(v351.__r_.__value_.__r.__words[2])
             : v351.__r_.__value_.__l.__size_;
        if (v154 == v157)
          break;
LABEL_195:
        if ((v155 & 0x80) != 0)
        {
          if (v154 == -1)
LABEL_343:
            sub_20B88FD0C();
          if (v156 >= v154)
            v161 = v154;
          else
            v161 = v156;
          v162 = (std::string *)v351.__r_.__value_.__r.__words[0];
        }
        else
        {
          if (v154 == -1)
            goto LABEL_343;
          if (v155 >= v154)
            v161 = v154;
          else
            v161 = v155;
          v162 = &v351;
        }
        if (v153 >= 0)
          v164 = (const void *)v148;
        else
          v164 = *(const void **)v148;
        v165 = memcmp(v162, v164, v161);
        v163 = 0;
        LOBYTE(size) = v161 != v154 || v165 != 0;
        if ((v155 & 0x80) == 0)
          goto LABEL_219;
LABEL_202:
        operator delete(v351.__r_.__value_.__l.__data_);
        if ((v163 & 1) == 0)
          goto LABEL_222;
      }
      if ((v351.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v158 = &v351;
      else
        v158 = (std::string *)v351.__r_.__value_.__r.__words[0];
      if ((*(_BYTE *)(v148 + 23) & 0x80) != 0)
      {
        if (memcmp(*(const void **)v148, v158, *(_QWORD *)(v148 + 8)))
          goto LABEL_195;
      }
      else if (*(_BYTE *)(v148 + 23))
      {
        v159 = (unsigned __int8 *)v148;
        v160 = *(unsigned __int8 *)(v148 + 23);
        while (*v159 == v158->__r_.__value_.__s.__data_[0])
        {
          ++v159;
          v158 = (std::string *)((char *)v158 + 1);
          if (!--v160)
            goto LABEL_201;
        }
        goto LABEL_195;
      }
LABEL_201:
      ++v149;
      v163 = 1;
      if ((v155 & 0x80) != 0)
        goto LABEL_202;
LABEL_219:
      if ((v163 & 1) == 0)
        goto LABEL_222;
    }
  }
  v20 = v319;
  v21 = v302;
  if (v319[6] == v319[5])
  {
    v22 = sub_20B828F84(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/seaweed/Dictionary/SeaweedChineseDictionaryCompiler.cpp", 101);
    sub_20B828F84(v22, (uint64_t)"(", 1);
    v23 = (_QWORD *)std::ostream::operator<<();
    v24 = sub_20B828F84(v23, (uint64_t)") [", 3);
    v25 = sub_20B828F84(v24, (uint64_t)"allKeys.size()", 14);
    v26 = sub_20B828F84(v25, (uint64_t)"] ", 2);
    sub_20B828F84(v26, (uint64_t)"no reading error. ", 18);
    sub_20B89423C();
  }
  if (v3 != v4)
  {
    v27 = 0;
    v270 = v302;
    do
    {
      v28 = (int *)(v4 + 8 * v27);
      v29 = *v28;
      v340.__locale_ = 0;
      v341 = 0;
      v342 = 0;
      memset(v343, 0, sizeof(v343));
      LODWORD(v344) = 1065353216;
      v30 = v20[5];
      v31 = v20[6];
      v274 = v29;
      if (v31 == v30)
      {
        v60 = 0;
        v59 = 0;
        v34 = 0;
        goto LABEL_65;
      }
      v272 = v4;
      v32 = 0;
      v33 = 0;
      v34 = 0;
      do
      {
        v35 = *(_QWORD *)(v30 + v32) + 24 * v27;
        if (*(_DWORD *)(*(_QWORD *)(v278 + 104) + 40) != 1 && *v28 == 1)
          goto LABEL_32;
        v37 = *(unsigned __int8 *)(v35 + 23);
        v38 = (char)v37;
        if ((v37 & 0x80u) != 0)
          v37 = *(_QWORD *)(v35 + 8);
        if (v37 != 1
          || (v38 >= 0
            ? (v39 = (const std::string::value_type *)(*(_QWORD *)(v30 + v32) + 24 * v27))
            : (v39 = *(const std::string::value_type **)v35),
              *v39 != 42))
        {
LABEL_32:
          v40 = *(_DWORD *)(v30 + v32 + 24);
          sub_20B9A1F4C(&v351);
          v41 = *(char *)(v35 + 23);
          if (v41 >= 0)
            v42 = (const std::string::value_type *)v35;
          else
            v42 = *(const std::string::value_type **)v35;
          if (v41 >= 0)
            v43 = *(unsigned __int8 *)(v35 + 23);
          else
            v43 = *(_QWORD *)(v35 + 8);
          v44 = std::string::insert(&v351, 0, v42, v43);
          v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
          v339 = v44->__r_.__value_.__r.__words[2];
          v338 = v45;
          v44->__r_.__value_.__l.__size_ = 0;
          v44->__r_.__value_.__r.__words[2] = 0;
          v44->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v351.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v351.__r_.__value_.__l.__data_);
          if (!sub_20B87A31C(v343, (unsigned __int8 *)&v338))
          {
            sub_20B9A58CC((uint64_t *)v343, (unsigned __int8 *)&v338, (uint64_t)&v338);
            if (*(char *)(v35 + 23) < 0)
            {
              sub_20B80ACE0(&__p, *(void **)v35, *(_QWORD *)(v35 + 8));
            }
            else
            {
              v46 = *(_OWORD *)v35;
              __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v35 + 16);
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v46;
            }
            v284 = v40;
            v47 = v341;
            if (v341 >= v342)
            {
              v49 = (v341 - v340.__locale_) >> 5;
              v50 = v49 + 1;
              if ((unint64_t)(v49 + 1) >> 59)
                sub_20B8AD01C();
              v51 = v342 - v340.__locale_;
              if ((v342 - v340.__locale_) >> 4 > v50)
                v50 = v51 >> 4;
              if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFE0)
                v52 = 0x7FFFFFFFFFFFFFFLL;
              else
                v52 = v50;
              v353[0] = &v342;
              v53 = (char *)sub_20B8156D4((uint64_t)&v342, v52);
              v54 = (std::string::size_type)&v53[32 * v49];
              v351.__r_.__value_.__r.__words[0] = (std::string::size_type)v53;
              v351.__r_.__value_.__l.__size_ = v54;
              v352 = &v53[32 * v55];
              v56 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
              *(_QWORD *)(v54 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
              *(_OWORD *)v54 = v56;
              memset(&__p, 0, sizeof(__p));
              *(_DWORD *)(v54 + 24) = v284;
              v351.__r_.__value_.__r.__words[2] = v54 + 32;
              sub_20B8AD030((uint64_t *)&v340, &v351);
              v57 = v341;
              sub_20B86EE7C((uint64_t)&v351);
              v341 = v57;
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
            }
            else
            {
              v48 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
              *((_QWORD *)v341 + 2) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
              *(_OWORD *)v47 = v48;
              memset(&__p, 0, sizeof(__p));
              *((_DWORD *)v47 + 6) = v284;
              v341 = (std::locale::__imp *)((char *)v47 + 32);
            }
            if (*(char *)(v35 + 23) < 0)
            {
              v58 = *(_QWORD *)(v35 + 8);
              if (v58 > v34)
LABEL_56:
                v34 = v58;
            }
            else
            {
              LODWORD(v58) = *(unsigned __int8 *)(v35 + 23);
              if (v34 < v58)
                goto LABEL_56;
            }
          }
          if (SHIBYTE(v339) < 0)
            operator delete((void *)v338);
          v30 = v20[5];
          v31 = v20[6];
        }
        ++v33;
        v32 += 32;
      }
      while (v33 < (v31 - v30) >> 5);
      v60 = v340.__locale_;
      v59 = v341;
      v21 = v270;
      v4 = v272;
      v29 = v274;
LABEL_65:
      if ((unint64_t)(v59 - v60) > 0x1FFFFE0)
      {
        v61 = sub_20B828F84(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/seaweed/Dictionary/SeaweedChineseDictionaryCompiler.cpp", 101);
        sub_20B828F84(v61, (uint64_t)"(", 1);
        v62 = (_QWORD *)std::ostream::operator<<();
        v63 = sub_20B828F84(v62, (uint64_t)") [", 3);
        v64 = sub_20B828F84(v63, (uint64_t)"keyTokenOffsetPairs.size() <= kMaxTrieEntryCount", 48);
        v65 = sub_20B828F84(v64, (uint64_t)"] ", 2);
        sub_20B828F84(v65, (uint64_t)"trie can hold a maximum of ", 27);
        v66 = (_QWORD *)std::ostream::operator<<();
        sub_20B828F84(v66, (uint64_t)" entries.", 9);
        sub_20B89423C();
      }
      v67 = v328;
      if (v328 >= v329)
      {
        v69 = v327;
        v70 = v328 - v327;
        v71 = v70 + 1;
        if ((unint64_t)(v70 + 1) >> 62)
          sub_20B80CDD8();
        v72 = (char *)v329 - (char *)v327;
        if (((char *)v329 - (char *)v327) >> 1 > v71)
          v71 = v72 >> 1;
        if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL)
          v73 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v73 = v71;
        if (v73)
        {
          v74 = (char *)sub_20B8127BC((uint64_t)&v329, v73);
          v69 = v327;
          v67 = v328;
        }
        else
        {
          v74 = 0;
        }
        v75 = (unsigned int *)&v74[4 * v70];
        *v75 = v34;
        v68 = v75 + 1;
        while (v67 != v69)
        {
          v76 = *--v67;
          *--v75 = v76;
        }
        v327 = v75;
        v328 = v68;
        v329 = (unsigned int *)&v74[4 * v73];
        if (v69)
          operator delete(v69);
      }
      else
      {
        *v328 = v34;
        v68 = v67 + 1;
      }
      v328 = v68;
      sub_20B9A3084((uint64_t *)&v340);
      sub_20B9A31DC((_QWORD *)v278, (uint64_t *)&v340, v29 == 1);
      if (*(_BYTE *)(**(_QWORD **)(v278 + 104) + 8 * v27 + 5))
      {
        v338 = 0uLL;
        v339 = 0;
        v77 = v20[5];
        if (v20[6] != v77)
        {
          v78 = 0;
          v79 = 0;
          v80 = (_BYTE *)(v4 + 8 * v27 + 4);
          do
          {
            v81 = *(_QWORD *)(v77 + v78) + 24 * v27;
            if (*(char *)(v81 + 23) < 0)
            {
              sub_20B80ACE0(&__dst, *(void **)v81, *(_QWORD *)(v81 + 8));
            }
            else
            {
              v82 = *(_OWORD *)v81;
              __dst.__r_.__value_.__r.__words[2] = *(_QWORD *)(v81 + 16);
              *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v82;
            }
            if (*(_QWORD *)(*(_QWORD *)(v278 + 104) + 32) >= (unint64_t)((uint64_t)(*(_QWORD *)(*(_QWORD *)(v278 + 104) + 8)
                                                                                           - **(_QWORD **)(v278 + 104)) >> 3))
            {
              v83 = sub_20B828F84(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/seaweed/Dictionary/SeaweedChineseDictionaryCompiler.cpp", 101);
              sub_20B828F84(v83, (uint64_t)"(", 1);
              v84 = (_QWORD *)std::ostream::operator<<();
              v85 = sub_20B828F84(v84, (uint64_t)") [", 3);
              v86 = sub_20B828F84(v85, (uint64_t)"m_data.indexCount() > m_data.syllableIDIndexCount()", 51);
              v87 = sub_20B828F84(v86, (uint64_t)"] ", 2);
              sub_20B828F84(v87, (uint64_t)"trie must hold at least one one non-syllable index", 50);
              sub_20B89423C();
            }
            if ((*(_DWORD *)(v21[5] + 4 * v79) & 0x10000) != 0)
            {
              if (*v80)
              {
                sub_20B9A2D38(&v351, (const void **)&__dst.__r_.__value_.__l.__data_);
                if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__dst.__r_.__value_.__l.__data_);
                __dst = v351;
              }
              v88 = *(_DWORD *)(v20[5] + v78 + 24);
              if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                sub_20B80ACE0(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
              else
                __p = __dst;
              v284 = v88;
              v89 = *((_QWORD *)&v338 + 1);
              if (*((_QWORD *)&v338 + 1) >= v339)
              {
                v91 = (uint64_t)(*((_QWORD *)&v338 + 1) - v338) >> 5;
                v92 = v91 + 1;
                if ((unint64_t)(v91 + 1) >> 59)
                  sub_20B8AD01C();
                v93 = v339 - v338;
                if ((uint64_t)(v339 - v338) >> 4 > v92)
                  v92 = v93 >> 4;
                if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFE0)
                  v94 = 0x7FFFFFFFFFFFFFFLL;
                else
                  v94 = v92;
                v353[0] = &v339;
                v95 = (char *)sub_20B8156D4((uint64_t)&v339, v94);
                v96 = (std::string::size_type)&v95[32 * v91];
                v351.__r_.__value_.__r.__words[0] = (std::string::size_type)v95;
                v351.__r_.__value_.__l.__size_ = v96;
                v352 = &v95[32 * v97];
                v98 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
                *(_QWORD *)(v96 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
                *(_OWORD *)v96 = v98;
                memset(&__p, 0, sizeof(__p));
                *(_DWORD *)(v96 + 24) = v284;
                v351.__r_.__value_.__r.__words[2] = v96 + 32;
                sub_20B8AD030((uint64_t *)&v338, &v351);
                v99 = *((_QWORD *)&v338 + 1);
                sub_20B86EE7C((uint64_t)&v351);
                *((_QWORD *)&v338 + 1) = v99;
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
              }
              else
              {
                v90 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
                *(_QWORD *)(*((_QWORD *)&v338 + 1) + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
                *(_OWORD *)v89 = v90;
                memset(&__p, 0, sizeof(__p));
                *(_DWORD *)(v89 + 24) = v284;
                *((_QWORD *)&v338 + 1) = v89 + 32;
              }
            }
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__dst.__r_.__value_.__l.__data_);
            ++v79;
            v77 = v20[5];
            v78 += 32;
          }
          while (v79 < (v20[6] - v77) >> 5);
        }
        sub_20B9A3084((uint64_t *)&v338);
        sub_20B9A31DC((_QWORD *)v278, (uint64_t *)&v338, v274 == 1);
        v351.__r_.__value_.__r.__words[0] = (std::string::size_type)&v338;
        sub_20B86F120((void ***)&v351);
      }
      sub_20B89AE0C((uint64_t)v343);
      v351.__r_.__value_.__r.__words[0] = (std::string::size_type)&v340;
      sub_20B86F120((void ***)&v351);
      ++v27;
      v100 = *(uint64_t **)(v278 + 104);
      v4 = *v100;
    }
    while (v27 < (v100[1] - *v100) >> 3);
  }
LABEL_293:
  while (1)
  {
    v217 = *(char *)(v278 + 135);
    if ((v217 & 0x80000000) == 0)
      break;
    v218 = *(_QWORD *)(v278 + 120);
    if ((v218 & 7) == 0)
      goto LABEL_298;
LABEL_297:
    LODWORD(v351.__r_.__value_.__r.__words[1]) = 0;
    v351.__r_.__value_.__r.__words[0] = 0;
    std::string::append((std::string *)(v278 + 112), (const std::string::value_type *)&v351, 0xCuLL);
  }
  if ((v217 & 7) != 0)
    goto LABEL_297;
  LODWORD(v218) = *(unsigned __int8 *)(v278 + 135);
LABEL_298:
  if (*(char *)(v278 + 159) < 0)
    v219 = *(_QWORD *)(v278 + 144);
  else
    LODWORD(v219) = *(unsigned __int8 *)(v278 + 159);
  v220 = *(_DWORD *)(*(_QWORD *)(v278 + 104) + 40);
  v117 = v220 > 0xF;
  v221 = (1 << v220) & 0x9040;
  v223 = !v117 && v221 != 0;
  sub_20B851EFC(&v351);
  if ((*((_BYTE *)v353 + *(_QWORD *)(v351.__r_.__value_.__r.__words[0] - 24)) & 5) != 0)
  {
    v224 = sub_20B828F84(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/seaweed/Dictionary/SeaweedChineseDictionaryCompiler.cpp", 101);
    sub_20B828F84(v224, (uint64_t)"(", 1);
    v225 = (_QWORD *)std::ostream::operator<<();
    v226 = sub_20B828F84(v225, (uint64_t)") [", 3);
    v227 = sub_20B828F84(v226, (uint64_t)"out", 3);
    v228 = sub_20B828F84(v227, (uint64_t)"] ", 2);
    v229 = sub_20B828F84(v228, (uint64_t)"permission denied: ", 19);
    std::ios_base::getloc((const std::ios_base *)((char *)v229 + *(_QWORD *)(*v229 - 24)));
    v230 = std::locale::use_facet((const std::locale *)v343, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v230->__vftable[2].~facet_0)(v230, 10);
    std::locale::~locale((std::locale *)v343);
    std::ostream::put();
    std::ostream::flush();
    sub_20B89423C();
  }
  v231 = *(_QWORD *)(v278 + 104);
  v232 = *(_DWORD *)(v231 + 40);
  v233 = (*(_QWORD *)(v231 + 8) - *(_QWORD *)v231) >> 3;
  v234 = *(_DWORD *)(v278 + 96);
  LODWORD(__p.__r_.__value_.__l.__data_) = 105;
  HIDWORD(__p.__r_.__value_.__r.__words[0]) = v234;
  __p.__r_.__value_.__l.__size_ = __PAIR64__(v218, v232);
  __p.__r_.__value_.__r.__words[2] = __PAIR64__(v233, v219);
  v284 = v223;
  v286 = 0;
  v285 = 0;
  v287 = 0;
  std::ostream::write();
  v235 = (char *)&v351 + *(_QWORD *)(v351.__r_.__value_.__r.__words[0] - 24);
  if ((v235[32] & 5) != 0)
  {
    v348 = 0u;
    v349 = 0u;
    v346 = 0u;
    v347 = 0u;
    v344 = 0u;
    v345 = 0u;
    memset(v343, 0, sizeof(v343));
    v350 = -1;
    goto LABEL_312;
  }
  (*(void (**)(_BYTE *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v235 + 5) + 32))(v343, *((_QWORD *)v235 + 5), 0, 1, 16);
  if ((v350 & 7) != 0)
  {
LABEL_312:
    v236 = sub_20B828F84(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/seaweed/Dictionary/SeaweedChineseDictionaryCompiler.cpp", 101);
    sub_20B828F84(v236, (uint64_t)"(", 1);
    v237 = (_QWORD *)std::ostream::operator<<();
    v238 = sub_20B828F84(v237, (uint64_t)") [", 3);
    v239 = sub_20B828F84(v238, (uint64_t)"(out.tellp() % kAlignmentNumber) == 0", 37);
    v240 = sub_20B828F84(v239, (uint64_t)"] ", 2);
    v241 = sub_20B828F84(v240, (uint64_t)"header is not aligned: ", 23);
    std::ios_base::getloc((const std::ios_base *)((char *)v241 + *(_QWORD *)(*v241 - 24)));
    v242 = std::locale::use_facet(&v340, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v242->__vftable[2].~facet_0)(v242, 10);
    std::locale::~locale(&v340);
    std::ostream::put();
    std::ostream::flush();
    sub_20B89423C();
  }
  v243 = (_QWORD *)v278;
  if (*(_QWORD *)(*(_QWORD *)(v278 + 104) + 8) != **(_QWORD **)(v278 + 104))
  {
    v244 = 0;
    v245 = 0;
    v246 = 5;
    do
    {
      LODWORD(v338) = 0;
      LODWORD(v338) = v327[v244];
      LODWORD(__dst.__r_.__value_.__l.__data_) = 0;
      LODWORD(v336) = 0;
      v282 = 0;
      sub_20B9A208C(v243, v245, &__dst, &v336, &v282);
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      v281 = 0;
      v281 = *(unsigned __int8 *)(**(_QWORD **)(v278 + 104) + v246);
      v280 = 0;
      v279 = 0;
      if (v281)
        sub_20B9A208C((_QWORD *)v278, v245 + 1, (_DWORD *)&v280 + 1, &v280, &v279);
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      v247 = (char *)&v351 + *(_QWORD *)(v351.__r_.__value_.__r.__words[0] - 24);
      if ((v247[32] & 5) != 0)
      {
        v348 = 0u;
        v349 = 0u;
        v346 = 0u;
        v347 = 0u;
        v344 = 0u;
        v345 = 0u;
        memset(v343, 0, sizeof(v343));
        v350 = -1;
LABEL_320:
        v248 = sub_20B828F84(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/seaweed/Dictionary/SeaweedChineseDictionaryCompiler.cpp", 101);
        sub_20B828F84(v248, (uint64_t)"(", 1);
        v249 = (_QWORD *)std::ostream::operator<<();
        v250 = sub_20B828F84(v249, (uint64_t)") [", 3);
        v251 = sub_20B828F84(v250, (uint64_t)"(out.tellp() % kAlignmentNumber) == 0", 37);
        v252 = sub_20B828F84(v251, (uint64_t)"] ", 2);
        v253 = sub_20B828F84(v252, (uint64_t)"trie data header is not aligned: ", 33);
        std::ios_base::getloc((const std::ios_base *)((char *)v253 + *(_QWORD *)(*v253 - 24)));
        v254 = std::locale::use_facet(&v340, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v254->__vftable[2].~facet_0)(v254, 10);
        std::locale::~locale(&v340);
        std::ostream::put();
        std::ostream::flush();
        sub_20B89423C();
      }
      (*(void (**)(_BYTE *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v247 + 5) + 32))(v343, *((_QWORD *)v247 + 5), 0, 1, 16);
      if ((v350 & 7) != 0)
        goto LABEL_320;
      sub_20B9A2104(v278, &v351, v245, v282);
      if (v281 && (sub_20B9A2104(v278, &v351, v245 + 1, v279), v281))
        v255 = 2;
      else
        v255 = 1;
      v245 += v255;
      ++v244;
      v243 = (_QWORD *)v278;
      v246 += 8;
    }
    while (v244 < (uint64_t)(*(_QWORD *)(*(_QWORD *)(v278 + 104) + 8) - **(_QWORD **)(v278 + 104)) >> 3);
  }
  std::ostream::write();
  v256 = (char *)&v351 + *(_QWORD *)(v351.__r_.__value_.__r.__words[0] - 24);
  if ((v256[32] & 5) != 0)
  {
    v348 = 0u;
    v349 = 0u;
    v346 = 0u;
    v347 = 0u;
    v344 = 0u;
    v345 = 0u;
    memset(v343, 0, sizeof(v343));
    v350 = -1;
    goto LABEL_329;
  }
  (*(void (**)(_BYTE *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v256 + 5) + 32))(v343, *((_QWORD *)v256 + 5), 0, 1, 16);
  if ((v350 & 7) != 0)
  {
LABEL_329:
    v257 = sub_20B828F84(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/seaweed/Dictionary/SeaweedChineseDictionaryCompiler.cpp", 101);
    sub_20B828F84(v257, (uint64_t)"(", 1);
    v258 = (_QWORD *)std::ostream::operator<<();
    v259 = sub_20B828F84(v258, (uint64_t)") [", 3);
    v260 = sub_20B828F84(v259, (uint64_t)"(out.tellp() % kAlignmentNumber) == 0", 37);
    v261 = sub_20B828F84(v260, (uint64_t)"] ", 2);
    v262 = sub_20B828F84(v261, (uint64_t)"token buffer is not aligned: ", 29);
    std::ios_base::getloc((const std::ios_base *)((char *)v262 + *(_QWORD *)(*v262 - 24)));
    v263 = std::locale::use_facet(&v340, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v263->__vftable[2].~facet_0)(v263, 10);
    std::locale::~locale(&v340);
    std::ostream::put();
    std::ostream::flush();
    sub_20B89423C();
  }
  std::ostream::write();
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)((char *)&v351 + *(_QWORD *)(v351.__r_.__value_.__r.__words[0] - 24)), *(_DWORD *)((char *)v353 + *(_QWORD *)(v351.__r_.__value_.__r.__words[0] - 24)) | 4);
  v264 = *(char *)(v278 + 95);
  if (v264 >= 0)
    v265 = v278 + 72;
  else
    v265 = *(_QWORD *)(v278 + 72);
  if (v264 >= 0)
    v266 = *(unsigned __int8 *)(v278 + 95);
  else
    v266 = *(_QWORD *)(v278 + 80);
  v267 = sub_20B828F84(MEMORY[0x24BEDB318], v265, v266);
  v268 = sub_20B828F84(v267, (uint64_t)" compiled successfully.", 23);
  std::ios_base::getloc((const std::ios_base *)((char *)v268 + *(_QWORD *)(*v268 - 24)));
  v269 = std::locale::use_facet((const std::locale *)v343, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v269->__vftable[2].~facet_0)(v269, 10);
  std::locale::~locale((std::locale *)v343);
  std::ostream::put();
  std::ostream::flush();
  v351.__r_.__value_.__r.__words[0] = *MEMORY[0x24BEDB7E8];
  *(std::string::size_type *)((char *)v351.__r_.__value_.__r.__words
                            + *(_QWORD *)(v351.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E8]
                                                                                               + 24);
  MEMORY[0x20BD399D4](&v351.__r_.__value_.__r.__words[1]);
  std::ostream::~ostream();
  MEMORY[0x20BD39C2C](v354);
  _Block_object_dispose(&v301, 8);
  if (v306)
  {
    v307 = v306;
    operator delete(v306);
  }
  _Block_object_dispose(v309, 8);
  sub_20B89AE0C((uint64_t)v310);
  _Block_object_dispose(v312, 8);
  sub_20B8CECB0((uint64_t)v313);
  _Block_object_dispose(v315, 8);
  sub_20B8CECB0((uint64_t)v316);
  _Block_object_dispose(&v318, 8);
  v351.__r_.__value_.__r.__words[0] = (std::string::size_type)v323;
  sub_20B83B494((void ***)&v351);
  _Block_object_dispose(v324, 8);
  _Block_object_dispose(v326, 8);
  if (v327)
  {
    v328 = v327;
    operator delete(v327);
  }
  _Block_object_dispose(&v330, 8);
  v351.__r_.__value_.__r.__words[0] = (std::string::size_type)v335;
  sub_20B9A4BFC((void ***)&v351);
}

void sub_20B9A12AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,void *a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  uint64_t v63;
  void *v65;
  void *v66;
  void *v67;

  v65 = *(void **)(v63 + 416);
  if (v65)
  {
    *(_QWORD *)(v63 + 424) = v65;
    operator delete(v65);
  }
  v66 = *(void **)(v63 + 440);
  if (v66)
  {
    *(_QWORD *)(v63 + 448) = v66;
    operator delete(v66);
  }
  *(_QWORD *)(v63 + 440) = &__p;
  sub_20B83AFD0((void ***)&STACK[0x368]);
  if (SLOBYTE(STACK[0x397]) < 0)
    operator delete(*(void **)(v63 + 464));
  _Block_object_dispose(&a45, 8);
  if (a50)
  {
    a51 = a50;
    operator delete(a50);
  }
  _Block_object_dispose(&a53, 8);
  sub_20B89AE0C(a10);
  _Block_object_dispose(&a63, 8);
  sub_20B8CECB0(a11);
  _Block_object_dispose(&STACK[0x200], 8);
  sub_20B8CECB0(a12);
  _Block_object_dispose(&STACK[0x250], 8);
  *(_QWORD *)(v63 + 80) = a13;
  sub_20B83B494((void ***)&STACK[0x200]);
  _Block_object_dispose(&STACK[0x290], 8);
  _Block_object_dispose(&STACK[0x2B0], 8);
  v67 = *(void **)(v63 + 288);
  if (v67)
  {
    *(_QWORD *)(v63 + 296) = v67;
    operator delete(v67);
  }
  _Block_object_dispose(&STACK[0x2E8], 8);
  *(_QWORD *)(v63 + 80) = a14;
  sub_20B9A4BFC((void ***)&STACK[0x200]);
  _Unwind_Resume(a1);
}

__n128 sub_20B9A1628(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void sub_20B9A164C(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 40);
  sub_20B9A4BFC(&v1);
}

__n128 sub_20B9A1674(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void sub_20B9A1698(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 40);
  sub_20B83B494(&v1);
}

uint64_t sub_20B9A16C0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = a2[5];
  a2[5] = 0;
  *(_QWORD *)(result + 40) = v2;
  *(_QWORD *)(result + 48) = a2[6];
  a2[6] = 0;
  v5 = a2[7];
  v3 = a2 + 7;
  v4 = v5;
  *(_QWORD *)(result + 56) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 64) = v6;
  *(_DWORD *)(result + 72) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 48);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 56;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t sub_20B9A1730(uint64_t a1)
{
  return sub_20B8CECB0(a1 + 40);
}

uint64_t sub_20B9A1738(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = a2[5];
  a2[5] = 0;
  *(_QWORD *)(result + 40) = v2;
  *(_QWORD *)(result + 48) = a2[6];
  a2[6] = 0;
  v5 = a2[7];
  v3 = a2 + 7;
  v4 = v5;
  *(_QWORD *)(result + 56) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 64) = v6;
  *(_DWORD *)(result + 72) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 48);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 56;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t sub_20B9A17A8(uint64_t a1)
{
  return sub_20B89AE0C(a1 + 40);
}

__n128 sub_20B9A17B0(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void sub_20B9A17D4(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void sub_20B9A17EC(_QWORD *a1, int *a2)
{
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  _QWORD *v18;
  __int128 *v19;
  __int128 v20;
  unsigned __int8 *v21;
  int v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  _QWORD *v42;
  int v43;
  char *v44;
  unint64_t v45;
  _DWORD *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  int v55;
  void *v56;
  unint64_t v57;
  unint64_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  std::string::size_type v66;
  char *v67;
  __int128 v68;
  int64x2_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  std::string *v73;
  std::string::size_type size;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  std::string __p;
  uint64_t v80;
  void *v81[2];
  std::string::size_type v82;
  std::string v83;
  unint64_t v84;
  _QWORD *v85;

  if (*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) >= 0xFFFFFFFFuLL)
    __assert_rtn("compile_block_invoke", "SeaweedChineseDictionaryCompiler.cpp", 664, "featureDataOffset < UINT32_MAX");
  v4 = a1[12];
  v5 = (unsigned __int8 *)(a2 + 10);
  v6 = sub_20B87A31C((_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40), (unsigned __int8 *)a2 + 40);
  v7 = v6;
  if (v6)
    v8 = *((_DWORD *)v6 + 10);
  else
    v8 = *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
  v9 = operator new();
  v10 = *a2;
  v11 = a2[2];
  *(_DWORD *)v9 = a2[1];
  *(_WORD *)(v9 + 4) = v10;
  *(_WORD *)(v9 + 6) = v11;
  *(_DWORD *)(v9 + 8) = v8;
  if (*(_QWORD *)(*(_QWORD *)(v4 + 104) + 8) - **(_QWORD **)(v4 + 104) == 8)
  {
    v12 = *((_QWORD *)a2 + 8);
    sub_20B9A1F4C(&v83);
    v13 = *(char *)(v12 + 23);
    if (v13 >= 0)
      v14 = (const std::string::value_type *)v12;
    else
      v14 = *(const std::string::value_type **)v12;
    if (v13 >= 0)
      v15 = *(unsigned __int8 *)(v12 + 23);
    else
      v15 = *(_QWORD *)(v12 + 8);
    v16 = std::string::insert(&v83, 0, v14, v15);
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v82 = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)v81 = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v83.__r_.__value_.__l.__data_);
    if (!sub_20B87A31C((_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40), (unsigned __int8 *)v81))
    {
      sub_20B9A58CC((uint64_t *)(*(_QWORD *)(a1[6] + 8) + 40), (unsigned __int8 *)v81, (uint64_t)v81);
      v18 = *(_QWORD **)(a1[7] + 8);
      v19 = (__int128 *)*((_QWORD *)a2 + 8);
      if (*((char *)v19 + 23) < 0)
      {
        sub_20B80ACE0(&__p, *(void **)v19, *((_QWORD *)v19 + 1));
      }
      else
      {
        v20 = *v19;
        __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v19 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
      }
      v80 = v9;
      v57 = v18[7];
      v58 = v18[6];
      if (v58 >= v57)
      {
        v78 = v4;
        v60 = v18[5];
        v61 = (uint64_t)(v58 - v60) >> 5;
        v62 = v61 + 1;
        if ((unint64_t)(v61 + 1) >> 59)
          sub_20B80CDD8();
        if ((uint64_t)(v57 - v60) >> 4 > v62)
          v62 = (uint64_t)(v57 - v60) >> 4;
        if (v57 - v60 >= 0x7FFFFFFFFFFFFFE0)
          v63 = 0x7FFFFFFFFFFFFFFLL;
        else
          v63 = v62;
        v85 = v18 + 7;
        if (v63 >> 59)
          sub_20B800BC0();
        v64 = (char *)operator new(32 * v63);
        v65 = &v64[32 * v61];
        *(_OWORD *)v65 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v66 = __p.__r_.__value_.__r.__words[2];
        memset(&__p, 0, sizeof(__p));
        *((_QWORD *)v65 + 2) = v66;
        *((_QWORD *)v65 + 3) = v9;
        v67 = v65 + 32;
        if (v58 == v60)
        {
          v69 = vdupq_n_s64(v58);
          v4 = v78;
        }
        else
        {
          v4 = v78;
          do
          {
            v68 = *(_OWORD *)(v58 - 32);
            *((_QWORD *)v65 - 2) = *(_QWORD *)(v58 - 16);
            *((_OWORD *)v65 - 2) = v68;
            *(_QWORD *)(v58 - 24) = 0;
            *(_QWORD *)(v58 - 16) = 0;
            *(_QWORD *)(v58 - 32) = 0;
            *((_QWORD *)v65 - 1) = *(_QWORD *)(v58 - 8);
            v65 -= 32;
            v58 -= 32;
          }
          while (v58 != v60);
          v69 = *(int64x2_t *)(v18 + 5);
          v57 = v18[7];
        }
        v18[5] = v65;
        v18[6] = v67;
        *(int64x2_t *)&v83.__r_.__value_.__r.__words[1] = v69;
        v18[7] = &v64[32 * v63];
        v84 = v57;
        v83.__r_.__value_.__r.__words[0] = v69.i64[0];
        sub_20B9195DC((uint64_t)&v83);
        v70 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        v18[6] = v67;
        if (v70 < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        v59 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(_QWORD *)(v58 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)v58 = v59;
        memset(&__p, 0, sizeof(__p));
        *(_QWORD *)(v58 + 24) = v80;
        v18[6] = v58 + 32;
      }
    }
    if ((SHIBYTE(v82) & 0x80000000) == 0)
      goto LABEL_74;
    v56 = v81[0];
LABEL_77:
    operator delete(v56);
    if (v7)
      return;
    goto LABEL_78;
  }
  sub_20B9A1F4C(&__p);
  v21 = sub_20B87A31C((_QWORD *)(*(_QWORD *)(a1[8] + 8) + 40), (unsigned __int8 *)&__p);
  if (v21)
  {
    v22 = *((_DWORD *)v21 + 10);
  }
  else
  {
    v22 = *(_DWORD *)(*(_QWORD *)(a1[9] + 8) + 24);
    v23 = *(_QWORD *)(a1[8] + 8) + 40;
    v83.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    *((_DWORD *)sub_20B9A5D1C(v23, (unsigned __int8 *)&__p, (__int128 **)&v83) + 10) = v22;
    std::string::append((std::string *)(v4 + 112), (const std::string::value_type *)v9, 0xCuLL);
    ++*(_DWORD *)(*(_QWORD *)(a1[9] + 8) + 24);
  }
  v24 = *(_QWORD **)(a1[10] + 8);
  memset(&v83, 0, sizeof(v83));
  sub_20B83C498((char *)&v83, *((__int128 **)a2 + 8), *((__int128 **)a2 + 9), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 9) - *((_QWORD *)a2 + 8)) >> 3));
  LODWORD(v84) = v22;
  v25 = v24[6];
  v26 = v24[7];
  if (v25 >= v26)
  {
    v28 = v24[5];
    v29 = (uint64_t)(v25 - v28) >> 5;
    v30 = v29 + 1;
    if ((unint64_t)(v29 + 1) >> 59)
      sub_20B80CDD8();
    v31 = v26 - v28;
    if (v31 >> 4 > v30)
      v30 = v31 >> 4;
    if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFE0)
      v32 = 0x7FFFFFFFFFFFFFFLL;
    else
      v32 = v30;
    if (v32 >> 59)
      sub_20B800BC0();
    v33 = (char *)operator new(32 * v32);
    v34 = &v33[32 * v29];
    v35 = &v33[32 * v32];
    *(std::string *)v34 = v83;
    memset(&v83, 0, sizeof(v83));
    *((_DWORD *)v34 + 6) = v22;
    v27 = v34 + 32;
    v36 = (char *)v24[5];
    v37 = (char *)v24[6];
    if (v37 == v36)
    {
      v24[5] = v34;
      v24[6] = v27;
      v24[7] = v35;
    }
    else
    {
      v38 = 0;
      do
      {
        v39 = &v34[v38];
        v40 = &v37[v38];
        *((_QWORD *)v39 - 4) = 0;
        *((_QWORD *)v39 - 3) = 0;
        *((_QWORD *)v39 - 2) = 0;
        *((_OWORD *)v39 - 2) = *(_OWORD *)&v37[v38 - 32];
        *((_QWORD *)v39 - 2) = *(_QWORD *)&v37[v38 - 16];
        *((_QWORD *)v40 - 4) = 0;
        *((_QWORD *)v40 - 3) = 0;
        *((_QWORD *)v40 - 2) = 0;
        *((_DWORD *)v39 - 2) = *(_DWORD *)&v37[v38 - 8];
        v38 -= 32;
      }
      while (&v37[v38] != v36);
      v37 = (char *)v24[5];
      v41 = (char *)v24[6];
      v24[5] = &v34[v38];
      v24[6] = v27;
      v24[7] = v35;
      while (v41 != v37)
      {
        v41 -= 32;
        v81[0] = v41;
        sub_20B83AFD0((void ***)v81);
      }
    }
    if (v37)
      operator delete(v37);
  }
  else
  {
    *(_QWORD *)v25 = 0;
    *(_QWORD *)(v25 + 8) = 0;
    *(_QWORD *)(v25 + 16) = 0;
    *(std::string *)v25 = v83;
    memset(&v83, 0, sizeof(v83));
    *(_DWORD *)(v25 + 24) = v84;
    v27 = (char *)(v25 + 32);
  }
  v24[6] = v27;
  v81[0] = &v83;
  sub_20B83AFD0((void ***)v81);
  v42 = *(_QWORD **)(a1[11] + 8);
  v43 = *a2;
  v44 = (char *)v42[6];
  v45 = v42[7];
  if ((unint64_t)v44 >= v45)
  {
    v47 = (char *)v42[5];
    v48 = (v44 - v47) >> 2;
    if ((unint64_t)(v48 + 1) >> 62)
      sub_20B80CDD8();
    v49 = v45 - (_QWORD)v47;
    v50 = (uint64_t)(v45 - (_QWORD)v47) >> 1;
    if (v50 <= v48 + 1)
      v50 = v48 + 1;
    if (v49 >= 0x7FFFFFFFFFFFFFFCLL)
      v51 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v51 = v50;
    if (v51)
    {
      v52 = (char *)sub_20B8127BC((uint64_t)(v42 + 7), v51);
      v47 = (char *)v42[5];
      v44 = (char *)v42[6];
    }
    else
    {
      v52 = 0;
    }
    v53 = &v52[4 * v48];
    v54 = &v52[4 * v51];
    *(_DWORD *)v53 = v43;
    v46 = v53 + 4;
    while (v44 != v47)
    {
      v55 = *((_DWORD *)v44 - 1);
      v44 -= 4;
      *((_DWORD *)v53 - 1) = v55;
      v53 -= 4;
    }
    v42[5] = v53;
    v42[6] = v46;
    v42[7] = v54;
    if (v47)
      operator delete(v47);
  }
  else
  {
    *(_DWORD *)v44 = v43;
    v46 = v44 + 4;
  }
  v42[6] = v46;
  MEMORY[0x20BD39CB0](v9, 0x1000C403E1C8BA9);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    v56 = (void *)__p.__r_.__value_.__r.__words[0];
    goto LABEL_77;
  }
LABEL_74:
  if (v7)
    return;
LABEL_78:
  v71 = *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
  v72 = *(_QWORD *)(a1[5] + 8) + 40;
  v83.__r_.__value_.__r.__words[0] = (std::string::size_type)v5;
  *((_DWORD *)sub_20B9A5D1C(v72, v5, (__int128 **)&v83) + 10) = v71;
  sub_20B8A9EB8((const void **)v5, 0, (uint64_t)&__p);
  std::string::push_back(&__p, 0);
  v83 = __p;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v73 = &v83;
  else
    v73 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  std::string::append((std::string *)(v4 + 136), (const std::string::value_type *)v73, size);
  v75 = *(_QWORD *)(a1[4] + 8);
  v76 = *(_QWORD *)(v75 + 24);
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
  {
    v77 = (void *)v83.__r_.__value_.__r.__words[0];
    *(_QWORD *)(v75 + 24) = v83.__r_.__value_.__l.__size_ + v76;
    operator delete(v77);
  }
  else
  {
    *(_QWORD *)(v75 + 24) = v76 + HIBYTE(v83.__r_.__value_.__r.__words[2]);
  }
}

void sub_20B9A1EC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B9A1F4C(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[2];
  uint64_t v5;
  _QWORD v6[10];
  char v7;
  uint64_t v8;
  char v9;

  sub_20B83BFEC((uint64_t)v4);
  std::ostream::operator<<();
  v9 = 44;
  sub_20B828F84(&v5, (uint64_t)&v9, 1);
  std::ostream::operator<<();
  v9 = 44;
  sub_20B828F84(&v5, (uint64_t)&v9, 1);
  std::ostream::operator<<();
  v9 = 44;
  sub_20B828F84(&v5, (uint64_t)&v9, 1);
  std::ostream::operator<<();
  sub_20B871648((uint64_t)v6, a1);
  v4[0] = *MEMORY[0x24BEDB7F0];
  v2 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v4 + *(_QWORD *)(v4[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v5 = v2;
  v6[0] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x20BD39C2C](&v8);
}

void sub_20B9A2078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B83C118((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B9A208C(_QWORD *result, uint64_t a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  _DWORD *v5;
  uint64_t v6;

  v5 = *(_DWORD **)(result[20] + 8 * a2);
  if (v5)
    LODWORD(v5) = v5[4] - v5[2] + v5[6];
  *a3 = (_DWORD)v5;
  *a4 = 0;
  if (*(_QWORD *)(result[13] + 8) - *(_QWORD *)result[13] != 8)
  {
    v6 = result[23] + 24 * a2;
    if (*(char *)(v6 + 23) < 0)
      v6 = *(_QWORD *)(v6 + 8);
    else
      LODWORD(v6) = *(unsigned __int8 *)(v6 + 23);
    *a4 = v6;
  }
  *a5 = ((*a3 + 7) & 0xFFFFFFF8) - *a3;
  return result;
}

_QWORD *sub_20B9A2104(uint64_t a1, _QWORD *a2, uint64_t a3, unsigned int a4)
{
  char *v7;
  _QWORD *result;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  const std::locale::facet *v15;
  char *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  const std::locale::facet *v23;
  std::locale v24;
  void *__p[2];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  std::ostream::write();
  if (a4)
  {
    LOBYTE(v24.__locale_) = 0;
    sub_20B99793C(__p, a4, &v24);
    std::ostream::write();
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  v7 = (char *)a2 + *(_QWORD *)(*a2 - 24);
  if ((v7[32] & 5) != 0)
  {
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    *(_OWORD *)__p = 0u;
    v26 = 0u;
    v33 = -1;
    goto LABEL_7;
  }
  result = (*(_QWORD *(**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v7 + 5)
                                                                                            + 32))(__p, *((_QWORD *)v7 + 5), 0, 1, 16);
  if ((v33 & 7) != 0)
  {
LABEL_7:
    v9 = sub_20B828F84(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/seaweed/Dictionary/SeaweedChineseDictionaryCompiler.cpp", 101);
    sub_20B828F84(v9, (uint64_t)"(", 1);
    v10 = (_QWORD *)std::ostream::operator<<();
    v11 = sub_20B828F84(v10, (uint64_t)") [", 3);
    v12 = sub_20B828F84(v11, (uint64_t)"(out.tellp() % kAlignmentNumber) == 0", 37);
    v13 = sub_20B828F84(v12, (uint64_t)"] ", 2);
    v14 = sub_20B828F84(v13, (uint64_t)"trie data is not aligned: ", 26);
    std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(_QWORD *)(*v14 - 24)));
    v15 = std::locale::use_facet(&v24, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
    std::locale::~locale(&v24);
    std::ostream::put();
    std::ostream::flush();
    sub_20B89423C();
  }
  if (*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) - **(_QWORD **)(a1 + 104) != 8)
  {
    std::ostream::write();
    v16 = (char *)a2 + *(_QWORD *)(*a2 - 24);
    if ((v16[32] & 5) != 0)
    {
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      *(_OWORD *)__p = 0u;
      v26 = 0u;
      v33 = -1;
      goto LABEL_12;
    }
    result = (*(_QWORD *(**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v16 + 5)
                                                                                              + 32))(__p, *((_QWORD *)v16 + 5), 0, 1, 16);
    if ((v33 & 7) != 0)
    {
LABEL_12:
      v17 = sub_20B828F84(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/seaweed/Dictionary/SeaweedChineseDictionaryCompiler.cpp", 101);
      sub_20B828F84(v17, (uint64_t)"(", 1);
      v18 = (_QWORD *)std::ostream::operator<<();
      v19 = sub_20B828F84(v18, (uint64_t)") [", 3);
      v20 = sub_20B828F84(v19, (uint64_t)"(out.tellp() % kAlignmentNumber) == 0", 37);
      v21 = sub_20B828F84(v20, (uint64_t)"] ", 2);
      v22 = sub_20B828F84(v21, (uint64_t)"token index buffer is not aligned: ", 35);
      std::ios_base::getloc((const std::ios_base *)((char *)v22 + *(_QWORD *)(*v22 - 24)));
      v23 = std::locale::use_facet(&v24, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
      std::locale::~locale(&v24);
      std::ostream::put();
      std::ostream::flush();
      sub_20B89423C();
    }
  }
  return result;
}

void sub_20B9A248C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, std::locale a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B9A24D8(_QWORD *a1, unsigned __int8 *a2)
{
  int *v2;
  unsigned __int8 *v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 *v15;
  uint64_t *v16;
  uint64_t v18;
  int v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  const std::locale::facet *v28;
  __int128 v29;
  uint64_t v30;
  std::locale::__imp *v31;
  void *locale;
  _QWORD *v33;
  _QWORD *v34;
  const std::locale::facet *v35;
  void **v36;
  void **v37;
  uint64_t v38;
  void **v39;
  void **v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  unsigned __int8 *v46;
  int *v47;
  unsigned __int8 *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[7];
  std::locale v52[2];
  uint64_t v53;
  std::locale __dst[2];
  uint64_t v55;
  _QWORD v56[7];
  uint64_t v57;
  void **v58;
  uint64_t v59;
  void **v60;
  std::string v61;
  char v62;

  if (*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) >= 0xFFFFFFFFuLL)
    __assert_rtn("validate_block_invoke", "SeaweedChineseDictionaryCompiler.cpp", 819, "featureOffset < UINT32_MAX");
  v2 = (int *)a2;
  v50 = a1[8];
  v48 = a2 + 40;
  v4 = sub_20B87A31C((_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40), a2 + 40);
  v46 = v4;
  if (v4)
    v5 = *((_DWORD *)v4 + 10);
  else
    v5 = *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
  v6 = operator new();
  v7 = *v2;
  v8 = v2[2];
  *(_DWORD *)v6 = v2[1];
  *(_WORD *)(v6 + 4) = v7;
  *(_WORD *)(v6 + 6) = v8;
  v49 = v6;
  *(_DWORD *)(v6 + 8) = v5;
  ++*(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24);
  v9 = *(uint64_t **)(v50 + 104);
  v10 = *v9;
  if (v9[1] != *v9)
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v47 = v2;
    do
    {
      (*(void (**)(_QWORD, unint64_t))(*(_QWORD *)a1[9] + 48))(a1[9], v13);
      v14 = *((_QWORD *)v2 + 8);
      v15 = (__int128 *)(v14 + v11);
      v16 = *(uint64_t **)(v50 + 104);
      if (*((_DWORD *)v16 + 10) != 1 && *(_DWORD *)(v10 + v12) == 1)
        goto LABEL_20;
      v18 = *((unsigned __int8 *)v15 + 23);
      v19 = (char)v18;
      if ((v18 & 0x80u) != 0)
        v18 = *((_QWORD *)v15 + 1);
      if (v18 == 1
        && (v19 >= 0 ? (v20 = (_BYTE *)(v14 + v11)) : (v20 = *(_BYTE **)v15),
            *v20 == 42 && (v21 = *v16, v22 = v16[1] - *v16, (unint64_t)v22 > 8)))
      {
        v10 = v21;
      }
      else
      {
LABEL_20:
        v61.__r_.__value_.__r.__words[0] = 0;
        v61.__r_.__value_.__l.__size_ = (std::string::size_type)&v61;
        v61.__r_.__value_.__r.__words[2] = 0x2000000000;
        v62 = 0;
        (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1[9] + 56))(&v59);
        v23 = v14 + v11;
        if (*(char *)(v14 + v11 + 23) < 0)
          v24 = *(_QWORD *)(v23 + 8);
        else
          v24 = *(unsigned __int8 *)(v14 + v11 + 23);
        sub_20B99BBA0((uint64_t)&v59, a1[9], v24, (uint64_t)&v57);
        if ((*(unsigned int (**)(_QWORD, uint64_t *))(*(_QWORD *)a1[9] + 88))(a1[9], &v57)
          && (*(unsigned int (**)(_QWORD, uint64_t *))(*(_QWORD *)a1[9] + 104))(a1[9], &v57))
        {
          v25 = a1[9];
          v56[0] = MEMORY[0x24BDAC760];
          v56[1] = 0x40000000;
          v56[2] = sub_20B9A2BC8;
          v56[3] = &unk_24C49FC20;
          v56[5] = v48;
          v56[6] = v49;
          v56[4] = &v61;
          (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v25 + 64))(v25, &v57, v56);
        }
        if (!*(_BYTE *)(v61.__r_.__value_.__l.__size_ + 24))
        {
          sub_20B828F84(MEMORY[0x24BEDB310], (uint64_t)"[ERROR] validation failed on index ", 35);
          v26 = (_QWORD *)std::ostream::operator<<();
          sub_20B828F84(v26, (uint64_t)" for line ", 10);
          v27 = (_QWORD *)std::ostream::operator<<();
          std::ios_base::getloc((const std::ios_base *)((char *)v27 + *(_QWORD *)(*v27 - 24)));
          v28 = std::locale::use_facet(__dst, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 10);
          std::locale::~locale(__dst);
          std::ostream::put();
          v2 = v47;
          std::ostream::flush();
          *(_BYTE *)(*(_QWORD *)(a1[7] + 8) + 24) = 0;
        }
        if (*(_BYTE *)(**(_QWORD **)(v50 + 104) + v12 + 5) && (*((_BYTE *)v2 + 2) & 1) != 0)
        {
          if (*(char *)(v23 + 23) < 0)
          {
            sub_20B80ACE0(__dst, *(void **)(v14 + v11), *(_QWORD *)(v14 + v11 + 8));
          }
          else
          {
            v29 = *v15;
            v55 = *((_QWORD *)v15 + 2);
            *(_OWORD *)&__dst[0].__locale_ = v29;
          }
          if (*(_BYTE *)(v10 + v12 + 4))
          {
            sub_20B9A2D38(v52, (const void **)&__dst[0].__locale_);
            if (SHIBYTE(v55) < 0)
              operator delete(__dst[0].__locale_);
            *(_OWORD *)&__dst[0].__locale_ = *(_OWORD *)&v52[0].__locale_;
            v55 = v53;
          }
          *(_BYTE *)(v61.__r_.__value_.__l.__size_ + 24) = 0;
          v30 = a1[9];
          v31 = (std::locale::__imp *)HIBYTE(v55);
          if (v55 >= 0)
            locale = __dst;
          else
            locale = __dst[0].__locale_;
          if (v55 < 0)
            v31 = __dst[1].__locale_;
          v51[0] = MEMORY[0x24BDAC760];
          v51[1] = 0x40000000;
          v51[2] = sub_20B9A2DFC;
          v51[3] = &unk_24C49FC48;
          v51[5] = v48;
          v51[6] = v49;
          v51[4] = &v61;
          (*(void (**)(uint64_t, void *, uint64_t, _QWORD, _QWORD *))(*(_QWORD *)v30 + 128))(v30, locale, (uint64_t)v31 - 2, 0, v51);
          if (!*(_BYTE *)(v61.__r_.__value_.__l.__size_ + 24))
          {
            sub_20B828F84(MEMORY[0x24BEDB310], (uint64_t)"[ERROR] validation failed on index ", 35);
            v33 = (_QWORD *)std::ostream::operator<<();
            sub_20B828F84(v33, (uint64_t)" for line ", 10);
            v34 = (_QWORD *)std::ostream::operator<<();
            std::ios_base::getloc((const std::ios_base *)((char *)v34 + *(_QWORD *)(*v34 - 24)));
            v35 = std::locale::use_facet(v52, MEMORY[0x24BEDB350]);
            ((void (*)(const std::locale::facet *, uint64_t))v35->__vftable[2].~facet_0)(v35, 10);
            std::locale::~locale(v52);
            std::ostream::put();
            v2 = v47;
            std::ostream::flush();
            *(_BYTE *)(*(_QWORD *)(a1[7] + 8) + 24) = 0;
          }
          if (SHIBYTE(v55) < 0)
            operator delete(__dst[0].__locale_);
        }
        v36 = v58;
        v58 = 0;
        if (v36)
        {
          v37 = sub_20B8F8AB8(v36);
          MEMORY[0x20BD39CB0](v37, 0x20C4093837F09);
        }
        v38 = v57;
        v57 = 0;
        if (v38)
          MEMORY[0x20BD39CB0](v38, 0x1010C40E4C6A875);
        v39 = v60;
        v60 = 0;
        if (v39)
        {
          v40 = sub_20B8F8AB8(v39);
          MEMORY[0x20BD39CB0](v40, 0x20C4093837F09);
        }
        v41 = v59;
        v59 = 0;
        if (v41)
          MEMORY[0x20BD39CB0](v41, 0x1010C40E4C6A875);
        _Block_object_dispose(&v61, 8);
        v42 = *(uint64_t **)(v50 + 104);
        v10 = *v42;
        v22 = v42[1] - *v42;
      }
      ++v13;
      v12 += 8;
      v11 += 24;
    }
    while (v13 < v22 >> 3);
  }
  MEMORY[0x20BD39CB0](v49, 0x1000C403E1C8BA9);
  if (!v46)
  {
    v43 = *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
    v44 = *(_QWORD *)(a1[5] + 8) + 40;
    v61.__r_.__value_.__r.__words[0] = (std::string::size_type)v48;
    *((_DWORD *)sub_20B9A5D1C(v44, v48, (__int128 **)&v61) + 10) = v43;
    sub_20B8A9EB8((const void **)v48, 0, (uint64_t)&v61);
    std::string::push_back(&v61, 0);
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    {
      v45 = (void *)v61.__r_.__value_.__r.__words[0];
      *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) += v61.__r_.__value_.__l.__size_;
      operator delete(v45);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) += HIBYTE(v61.__r_.__value_.__r.__words[2]);
    }
  }
}

void sub_20B9A2B38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::locale a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  if (*(char *)(v30 - 113) < 0)
    operator delete(*(void **)(v30 - 136));
  _Unwind_Resume(exception_object);
}

BOOL sub_20B9A2BC8(uint64_t a1, char **a2, _BYTE *a3)
{
  _BOOL8 result;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  result = sub_20B9A2C3C(a2[1], *(unsigned __int8 **)(a1 + 40));
  if (result)
  {
    v7 = *(uint64_t **)(a1 + 48);
    v8 = *v7;
    v9 = *((unsigned int *)v7 + 2);
    if (v8 == *(_QWORD *)*a2 && v9 == *((_DWORD *)*a2 + 2))
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
      *a3 = 1;
    }
  }
  return result;
}

BOOL sub_20B9A2C3C(char *__src, unsigned __int8 *a2)
{
  size_t v3;
  int v4;
  size_t v5;
  uint64_t v6;
  int v7;
  unsigned __int8 *v8;
  uint64_t v9;
  void **p_s1;
  int v11;
  int v12;
  int v13;
  int v14;
  BOOL v16;
  _BOOL8 v17;
  void *v18;
  void *__s1;
  size_t __n;
  unsigned __int8 v22;

  if (*(_WORD *)__src)
  {
    v3 = 0;
    do
    {
      v4 = *(unsigned __int16 *)&__src[v3 + 2];
      v3 += 2;
    }
    while (v4);
  }
  else
  {
    v3 = 0;
  }
  sub_20B82E068(&__s1, __src, v3);
  if ((v22 & 0x80u) == 0)
    v5 = v22;
  else
    v5 = __n;
  v6 = a2[23];
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *((_QWORD *)a2 + 1);
  if (v5 == v6)
  {
    if (v7 >= 0)
      v8 = a2;
    else
      v8 = *(unsigned __int8 **)a2;
    if ((v22 & 0x80) != 0)
    {
      v18 = __s1;
      v17 = memcmp(__s1, v8, __n) == 0;
      goto LABEL_28;
    }
    if (!v22)
      return 1;
    v9 = v22 - 1;
    p_s1 = &__s1;
    do
    {
      v12 = *(unsigned __int8 *)p_s1;
      p_s1 = (void **)((char *)p_s1 + 1);
      v11 = v12;
      v14 = *v8++;
      v13 = v14;
      v16 = v9-- != 0;
      v17 = v11 == v13;
    }
    while (v11 == v13 && v16);
  }
  else
  {
    v17 = 0;
  }
  if ((v22 & 0x80) != 0)
  {
    v18 = __s1;
LABEL_28:
    operator delete(v18);
  }
  return v17;
}

void sub_20B9A2D38(_QWORD *a1, const void **a2)
{
  uint64_t v3;
  const void **v4;
  void *v5;
  char *v6;
  char *v7;
  char *v9;
  __int16 v10;
  BOOL v11;
  void *__p;
  char *v13;
  uint64_t v14;

  if (*((char *)a2 + 23) < 0)
  {
    v4 = a2;
    a2 = (const void **)*a2;
    v3 = (uint64_t)v4[1];
  }
  else
  {
    v3 = *((unsigned __int8 *)a2 + 23);
  }
  __p = 0;
  v13 = 0;
  v14 = 0;
  sub_20B909D70(&__p, a2, (uint64_t)a2 + (v3 & 0xFFFFFFFFFFFFFFFELL), v3 >> 1);
  v5 = __p;
  v6 = v13;
  v7 = v13 - 2;
  if (__p != v13 && v7 > __p)
  {
    v9 = (char *)__p + 2;
    do
    {
      v10 = *((_WORD *)v9 - 1);
      *((_WORD *)v9 - 1) = *(_WORD *)v7;
      *(_WORD *)v7 = v10;
      v7 -= 2;
      v11 = v9 >= v7;
      v9 += 2;
    }
    while (!v11);
  }
  sub_20B82E068(a1, v5, v6 - (_BYTE *)v5);
  if (__p)
  {
    v13 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B9A2DE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_20B9A2DFC(uint64_t a1, char **a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  _BOOL8 result;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  result = sub_20B9A2C3C(a2[1], *(unsigned __int8 **)(a1 + 40));
  if (result)
  {
    v9 = *(uint64_t **)(a1 + 48);
    v10 = *v9;
    v11 = *((unsigned int *)v9 + 2);
    if (v10 == *(_QWORD *)*a2 && v11 == *((_DWORD *)*a2 + 2))
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
      *a5 = 1;
    }
  }
  return result;
}

void sub_20B9A2E70(uint64_t a1, uint64_t a2)
{
  _QWORD v2[10];
  _QWORD v3[4];
  void **v4[5];
  void *__p;
  uint64_t v6;
  uint64_t v7;
  void **v8[5];
  _QWORD v9[3];
  void **v10[5];
  _QWORD v11[3];
  _QWORD v12[5];
  _QWORD v13[3];

  v12[0] = 0;
  v12[1] = v12;
  v12[2] = 0x4002000000;
  v12[3] = sub_20B9A4C74;
  v12[4] = sub_20B9A4C98;
  memset(v13, 0, sizeof(v13));
  v10[0] = 0;
  v10[1] = (void **)v10;
  v10[2] = (void **)0x4002000000;
  v10[3] = (void **)sub_20B9A4C74;
  v10[4] = (void **)sub_20B9A4C98;
  memset(v11, 0, sizeof(v11));
  v8[0] = 0;
  v8[1] = (void **)v8;
  v8[2] = (void **)0x4002000000;
  v8[3] = (void **)sub_20B9A4C74;
  v8[4] = (void **)sub_20B9A4C98;
  memset(v9, 0, sizeof(v9));
  v4[0] = 0;
  v4[1] = (void **)v4;
  v4[2] = (void **)0x4002000000;
  v4[3] = (void **)sub_20B9A4CC0;
  v4[4] = (void **)sub_20B9A4CDC;
  v6 = 0;
  v7 = 0;
  __p = 0;
  v3[0] = 0;
  v3[1] = v3;
  v3[2] = 0x2000000000;
  v3[3] = 0;
  v2[0] = MEMORY[0x24BDAC760];
  v2[1] = 0x40000000;
  v2[2] = sub_20B9A4CF0;
  v2[3] = &unk_24C49FC98;
  v2[4] = v4;
  v2[5] = v12;
  v2[6] = v3;
  v2[7] = v10;
  v2[8] = v8;
  v2[9] = a2;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 16))(a1, v2);
  _Block_object_dispose(v3, 8);
  _Block_object_dispose(v4, 8);
  if (SHIBYTE(v7) < 0)
    operator delete(__p);
  _Block_object_dispose(v8, 8);
  v4[0] = (void **)v9;
  sub_20B9A4BFC(v4);
  _Block_object_dispose(v10, 8);
  v8[0] = (void **)v11;
  sub_20B9A4BFC(v8);
  _Block_object_dispose(v12, 8);
  v10[0] = (void **)v13;
  sub_20B9A4BFC(v10);
}

void sub_20B9A3004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34)
{
  uint64_t v34;
  uint64_t v35;

  _Block_object_dispose(&a19, 8);
  _Block_object_dispose(&a23, 8);
  if (a33 < 0)
    operator delete(__p);
  _Block_object_dispose(&a34, 8);
  sub_20B9A4BFC((void ***)&a23);
  _Block_object_dispose((const void *)(v35 - 176), 8);
  sub_20B9A4BFC((void ***)&a34);
  _Block_object_dispose((const void *)(v35 - 112), 8);
  *(_QWORD *)(v35 - 176) = v34;
  sub_20B9A4BFC((void ***)(v35 - 176));
  _Unwind_Resume(a1);
}

void sub_20B9A3084(uint64_t *a1)
{
  unint64_t v2;
  unint64_t v3;
  __int128 v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  void *__p[2];
  uint64_t v16;
  int v17;
  _QWORD v18[5];

  if (a1[1] == *a1)
  {
    sub_20B80BBD0(__p, "*!@#$%");
    v17 = 0;
    v2 = a1[2];
    v3 = a1[1];
    if (v3 >= v2)
    {
      v5 = (uint64_t)(v3 - *a1) >> 5;
      v6 = v5 + 1;
      if ((unint64_t)(v5 + 1) >> 59)
        sub_20B8AD01C();
      v7 = v2 - *a1;
      if (v7 >> 4 > v6)
        v6 = v7 >> 4;
      if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFE0)
        v8 = 0x7FFFFFFFFFFFFFFLL;
      else
        v8 = v6;
      v18[4] = a1 + 2;
      v9 = (char *)sub_20B8156D4((uint64_t)(a1 + 2), v8);
      v10 = &v9[32 * v5];
      v18[0] = v9;
      v18[1] = v10;
      v18[3] = &v9[32 * v11];
      v12 = *(_OWORD *)__p;
      *((_QWORD *)v10 + 2) = v16;
      *(_OWORD *)v10 = v12;
      __p[1] = 0;
      v16 = 0;
      __p[0] = 0;
      *((_DWORD *)v10 + 6) = v17;
      v18[2] = v10 + 32;
      sub_20B8AD030(a1, v18);
      v13 = a1[1];
      sub_20B86EE7C((uint64_t)v18);
      v14 = SHIBYTE(v16);
      a1[1] = v13;
      if (v14 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v4 = *(_OWORD *)__p;
      *(_QWORD *)(v3 + 16) = v16;
      *(_OWORD *)v3 = v4;
      *(_DWORD *)(v3 + 24) = v17;
      a1[1] = v3 + 32;
    }
  }
}

void sub_20B9A31B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  sub_20B86EE7C((uint64_t)&a17);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20B9A31DC(_QWORD *a1, uint64_t *a2, int a3)
{
  uint64_t v4;
  __n128 *v5;
  uint64_t v6;
  unint64_t v7;
  const std::nothrow_t *v8;
  unint64_t v9;
  __n128 *v10;
  BOOL v11;
  __n128 *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  unsigned __int8 **v19;
  uint64_t v20;
  std::string::size_type v21;
  unsigned __int8 *v22;
  int v23;
  unsigned __int8 *v24;
  std::string *v25;
  uint64_t v26;
  __int128 *v27;
  __int128 v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  std::string *p_s1;
  std::string::size_type size;
  _QWORD *v38;
  __int128 *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  __int128 v43;
  char v44;
  size_t v45;
  size_t v46;
  size_t v47;
  uint64_t v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  uint64_t v51;
  size_t v52;
  _BYTE *v53;
  char v54;
  const void *v55;
  int v56;
  unsigned __int8 *v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  int *v72;
  int v73;
  uint64_t v74;
  __int128 *v75;
  __int128 v76;
  __int128 *v77;
  char *v78;
  int v79;
  char *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  int *v88;
  char *v89;
  int v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  std::string::value_type v94;
  unint64_t v95;
  void **v96;
  _QWORD *v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  char *v102;
  void **v103;
  char *v104;
  _QWORD *v105;
  void *v106;
  __int128 v107;
  char *v108;
  void **v109;
  unint64_t v110;
  __int128 v111;
  uint64_t v112;
  unsigned int v115;
  int v116;
  unsigned int v117;
  void *v118;
  std::string v119;
  _QWORD v120[3];
  void *v121;
  char *v122;
  uint64_t v123;
  void *__p;
  char *v125;
  char *v126;
  uint64_t *v127;
  __int128 *v128;
  unint64_t v129;
  std::string __s1;
  _BYTE __s[24];
  char *v132;
  _QWORD *v133;

  v4 = *a2;
  v5 = (__n128 *)a2[1];
  v6 = (uint64_t)v5 - *a2;
  v7 = v6 >> 5;
  if (v6 < 1)
  {
LABEL_5:
    v12 = 0;
    v9 = 0;
  }
  else
  {
    v8 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
    v9 = v6 >> 5;
    while (1)
    {
      v10 = (__n128 *)operator new(32 * v9, v8);
      if (v10)
        break;
      v11 = v9 > 1;
      v9 >>= 1;
      if (!v11)
        goto LABEL_5;
    }
    v12 = v10;
  }
  sub_20B9A6D8C(v4, v5, v7, v12, v9);
  if (v12)
    operator delete(v12);
  memset(&__s1, 0, sizeof(__s1));
  v127 = 0;
  v128 = 0;
  v129 = 0;
  __p = 0;
  v125 = 0;
  v126 = 0;
  v121 = 0;
  v122 = 0;
  v123 = 0;
  v120[0] = &off_24C460518;
  v120[1] = a2;
  v120[2] = a1 + 14;
  if (a3)
    sub_20B9A2E70((uint64_t)v120, (uint64_t)&v121);
  v13 = a2[1];
  if (v13 == *a2)
  {
    v18 = 0;
    v17 = 0;
    goto LABEL_118;
  }
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v13 = *a2;
  do
  {
    if (!v15)
    {
LABEL_33:
      if (++v18 >= 0x100)
      {
        v29 = sub_20B828F84(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/seaweed/Dictionary/SeaweedChineseDictionaryCompiler.cpp", 101);
        sub_20B828F84(v29, (uint64_t)"(", 1);
        v30 = (_QWORD *)std::ostream::operator<<();
        v31 = sub_20B828F84(v30, (uint64_t)") [", 3);
        v32 = sub_20B828F84(v31, (uint64_t)"homographCount <= kMaxHomographEntryCount", 41);
        v33 = sub_20B828F84(v32, (uint64_t)"] ", 2);
        sub_20B828F84(v33, (uint64_t)"number of homograph words is greater than ", 42);
        v34 = (_QWORD *)std::ostream::operator<<();
        v35 = sub_20B828F84(v34, (uint64_t)". string =", 10);
        if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_s1 = &__s1;
        else
          p_s1 = (std::string *)__s1.__r_.__value_.__r.__words[0];
        if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
        else
          size = __s1.__r_.__value_.__l.__size_;
        v38 = sub_20B828F84(v35, (uint64_t)p_s1, size);
        sub_20B828F84(v38, (uint64_t)" count=", 7);
        std::ostream::operator<<();
        sub_20B89423C();
      }
      goto LABEL_115;
    }
    v19 = (unsigned __int8 **)(v13 + 32 * v14);
    v20 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v21 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    else
      v21 = __s1.__r_.__value_.__l.__size_;
    v22 = (unsigned __int8 *)*((unsigned __int8 *)v19 + 23);
    v23 = (char)v22;
    if ((char)v22 < 0)
      v22 = v19[1];
    if ((unsigned __int8 *)v21 == v22)
    {
      if (v23 >= 0)
        v24 = (unsigned __int8 *)(v13 + 32 * v14);
      else
        v24 = *v19;
      if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        if (!memcmp(__s1.__r_.__value_.__l.__data_, v24, __s1.__r_.__value_.__l.__size_))
          goto LABEL_33;
      }
      else
      {
        if (!*((_BYTE *)&__s1.__r_.__value_.__s + 23))
          goto LABEL_33;
        v25 = &__s1;
        while (v25->__r_.__value_.__s.__data_[0] == *v24)
        {
          v25 = (std::string *)((char *)v25 + 1);
          ++v24;
          if (!--v20)
            goto LABEL_33;
        }
      }
    }
    v26 = v13 + 32 * v17;
    v27 = v128;
    v117 = v16;
    v116 = v18;
    if ((unint64_t)v128 >= v129)
    {
      v39 = (__int128 *)sub_20B8AD184((uint64_t *)&v127, (__int128 *)v26);
    }
    else
    {
      if (*(char *)(v26 + 23) < 0)
      {
        sub_20B80ACE0(v128, *(void **)v26, *(_QWORD *)(v26 + 8));
      }
      else
      {
        v28 = *(_OWORD *)v26;
        *((_QWORD *)v128 + 2) = *(_QWORD *)(v26 + 16);
        *v27 = v28;
      }
      v39 = (__int128 *)((char *)v27 + 24);
    }
    v128 = v39;
    v40 = *a2 + 32 * v17;
    v115 = v17;
    v41 = v17 + 1;
    while (v41 < (a2[1] - *a2) >> 5)
    {
      v42 = *a2 + 32 * v41;
      if (*(char *)(v42 + 23) < 0)
      {
        sub_20B80ACE0(__s, *(void **)v42, *(_QWORD *)(v42 + 8));
      }
      else
      {
        v43 = *(_OWORD *)v42;
        *(_QWORD *)&__s[16] = *(_QWORD *)(v42 + 16);
        *(_OWORD *)__s = v43;
      }
      v44 = *(_BYTE *)(v40 + 23);
      if (v44 >= 0)
        v45 = *(unsigned __int8 *)(v40 + 23);
      else
        v45 = *(_QWORD *)(v40 + 8);
      v46 = __s[23];
      v47 = *(_QWORD *)&__s[8];
      if (__s[23] >= 0)
        v48 = __s[23];
      else
        v48 = *(_QWORD *)&__s[8];
      if (v45 != v48)
        goto LABEL_66;
      if (__s[23] >= 0)
        v49 = __s;
      else
        v49 = *(unsigned __int8 **)__s;
      if ((*(_BYTE *)(v40 + 23) & 0x80) != 0)
      {
        if (memcmp(*(const void **)v40, v49, *(_QWORD *)(v40 + 8)))
          goto LABEL_66;
LABEL_72:
        ++v41;
        v54 = 1;
        if ((v46 & 0x80) != 0)
          goto LABEL_73;
LABEL_90:
        if ((v54 & 1) == 0)
          goto LABEL_93;
      }
      else
      {
        if (!*(_BYTE *)(v40 + 23))
          goto LABEL_72;
        v50 = (unsigned __int8 *)v40;
        v51 = *(unsigned __int8 *)(v40 + 23);
        while (*v50 == *v49)
        {
          ++v50;
          ++v49;
          if (!--v51)
            goto LABEL_72;
        }
LABEL_66:
        if ((v46 & 0x80) != 0)
        {
          if (v45 == -1)
LABEL_181:
            sub_20B88FD0C();
          if (v47 >= v45)
            v52 = v45;
          else
            v52 = v47;
          v53 = *(_BYTE **)__s;
        }
        else
        {
          if (v45 == -1)
            goto LABEL_181;
          if (v46 >= v45)
            v52 = v45;
          else
            v52 = v46;
          v53 = __s;
        }
        if (v44 >= 0)
          v55 = (const void *)v40;
        else
          v55 = *(const void **)v40;
        v56 = memcmp(v53, v55, v52);
        v54 = 0;
        LOBYTE(v27) = v52 != v45 || v56 != 0;
        if ((v46 & 0x80) == 0)
          goto LABEL_90;
LABEL_73:
        operator delete(*(void **)__s);
        if ((v54 & 1) == 0)
          goto LABEL_93;
      }
    }
    LOBYTE(v27) = 1;
LABEL_93:
    v58 = (unsigned __int8 *)v121 + 3 * v117;
    if (!a3)
      v58 = (unsigned __int8 *)&unk_20BA56001;
    v59 = v58[1];
    v60 = *v58;
    v61 = v58[2];
    if ((v27 & 1) != 0)
      v62 = 2048;
    else
      v62 = 0;
    v63 = v116 + (v115 << 12) + v62 + (v59 << 8) + (v60 << 9) + (v61 << 10);
    v64 = v125;
    if (v125 >= v126)
    {
      v66 = (char *)__p;
      v67 = (v125 - (_BYTE *)__p) >> 2;
      v68 = v67 + 1;
      if ((unint64_t)(v67 + 1) >> 62)
        sub_20B80CDD8();
      v69 = v126 - (_BYTE *)__p;
      if ((v126 - (_BYTE *)__p) >> 1 > v68)
        v68 = v69 >> 1;
      if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFFCLL)
        v70 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v70 = v68;
      if (v70)
      {
        v71 = (char *)sub_20B8127BC((uint64_t)&v126, v70);
        v66 = (char *)__p;
        v64 = v125;
      }
      else
      {
        v71 = 0;
      }
      v72 = (int *)&v71[4 * v67];
      *v72 = v63;
      v65 = (char *)(v72 + 1);
      while (v64 != v66)
      {
        v73 = *((_DWORD *)v64 - 1);
        v64 -= 4;
        *--v72 = v73;
      }
      __p = v72;
      v125 = v65;
      v126 = &v71[4 * v70];
      if (v66)
        operator delete(v66);
    }
    else
    {
      *(_DWORD *)v125 = v63;
      v65 = v64 + 4;
    }
    v125 = v65;
    v16 = v117 + 1;
    v18 = 1;
    v17 = v15;
LABEL_115:
    std::string::operator=(&__s1, (const std::string *)(*a2 + 32 * v14));
    v13 = *a2;
    v14 = ++v15;
  }
  while (v15 < (unint64_t)((a2[1] - *a2) >> 5));
LABEL_118:
  v74 = v13 + 32 * v17;
  v75 = v128;
  if ((unint64_t)v128 >= v129)
  {
    v77 = (__int128 *)sub_20B8AD184((uint64_t *)&v127, (__int128 *)v74);
  }
  else
  {
    if (*(char *)(v74 + 23) < 0)
    {
      sub_20B80ACE0(v128, *(void **)v74, *(_QWORD *)(v74 + 8));
    }
    else
    {
      v76 = *(_OWORD *)v74;
      *((_QWORD *)v128 + 2) = *(_QWORD *)(v74 + 16);
      *v75 = v76;
    }
    v77 = (__int128 *)((char *)v75 + 24);
  }
  v128 = v77;
  v78 = v122 - 3;
  if (!a3)
    v78 = (char *)&unk_20BA56001;
  v79 = v18
      + (v17 << 12)
      + (v78[1] << 8)
      + (*v78 << 9)
      + (v78[2] << 10)
      + 2048;
  v80 = v125;
  if (v125 >= v126)
  {
    v82 = (char *)__p;
    v83 = (v125 - (_BYTE *)__p) >> 2;
    v84 = v83 + 1;
    if ((unint64_t)(v83 + 1) >> 62)
      sub_20B80CDD8();
    v85 = v126 - (_BYTE *)__p;
    if ((v126 - (_BYTE *)__p) >> 1 > v84)
      v84 = v85 >> 1;
    if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFFCLL)
      v86 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v86 = v84;
    if (v86)
    {
      v87 = (char *)sub_20B8127BC((uint64_t)&v126, v86);
      v82 = (char *)__p;
      v80 = v125;
    }
    else
    {
      v87 = 0;
    }
    v88 = (int *)&v87[4 * v83];
    v89 = &v87[4 * v86];
    *v88 = v79;
    v81 = (char *)(v88 + 1);
    while (v80 != v82)
    {
      v90 = *((_DWORD *)v80 - 1);
      v80 -= 4;
      *--v88 = v90;
    }
    __p = v88;
    v125 = v81;
    v126 = v89;
    if (v82)
      operator delete(v82);
  }
  else
  {
    *(_DWORD *)v125 = v79;
    v81 = v80 + 4;
  }
  v125 = v81;
  memset(&v119, 0, sizeof(v119));
  v91 = *a2;
  if (a2[1] != *a2)
  {
    v92 = 0;
    v93 = 24;
    do
    {
      *(_DWORD *)__s = 0;
      *(_DWORD *)__s = *(_DWORD *)(v91 + v93);
      std::string::append(&v119, __s, 4uLL);
      ++v92;
      v91 = *a2;
      v93 += 32;
    }
    while (v92 < (a2[1] - *a2) >> 5);
    while (1)
    {
      v94 = HIBYTE(v119.__r_.__value_.__r.__words[2]);
      if ((v119.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v94 = v119.__r_.__value_.__s.__data_[8];
      if ((v94 & 7) == 0)
        break;
      *(_DWORD *)__s = 0;
      std::string::append(&v119, __s, 4uLL);
    }
  }
  sub_20BA2010C((uint64_t *)&v118, &v127, (_DWORD **)&__p);
  v95 = a1[22];
  v96 = (void **)a1[21];
  if ((unint64_t)v96 >= v95)
  {
    v97 = (_QWORD *)a1[20];
    v98 = v96 - (void **)v97;
    if ((unint64_t)(v98 + 1) >> 61)
      sub_20B80CDD8();
    v99 = v95 - (_QWORD)v97;
    v100 = (uint64_t)(v95 - (_QWORD)v97) >> 2;
    if (v100 <= v98 + 1)
      v100 = v98 + 1;
    if (v99 >= 0x7FFFFFFFFFFFFFF8)
      v101 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v101 = v100;
    v133 = a1 + 22;
    if (v101)
    {
      v102 = (char *)sub_20B800BE8((uint64_t)(a1 + 22), v101);
      v97 = (_QWORD *)a1[20];
      v96 = (void **)a1[21];
    }
    else
    {
      v102 = 0;
    }
    v103 = (void **)&v102[8 * v98];
    v104 = &v102[8 * v101];
    v132 = v104;
    *v103 = v118;
    v105 = v103 + 1;
    v118 = 0;
    *(_QWORD *)&__s[16] = v103 + 1;
    if (v96 != v97)
    {
      do
      {
        v106 = *--v96;
        *--v103 = v106;
        *v96 = 0;
      }
      while (v96 != v97);
      v105 = *(_QWORD **)&__s[16];
      v104 = v132;
    }
    v107 = *((_OWORD *)a1 + 10);
    a1[20] = v103;
    a1[21] = v105;
    *(_OWORD *)&__s[8] = v107;
    v108 = (char *)a1[22];
    a1[22] = v104;
    v132 = v108;
    *(_QWORD *)__s = v107;
    sub_20B9A5800((uint64_t)__s);
    v109 = (void **)v118;
    a1[21] = v105;
    if (v109)
      sub_20B969128(v109);
  }
  else
  {
    *v96 = v118;
    a1[21] = v96 + 1;
  }
  v110 = a1[24];
  if (v110 >= a1[25])
  {
    v112 = sub_20B8AD184(a1 + 23, (__int128 *)&v119);
  }
  else
  {
    if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_20B80ACE0((_BYTE *)a1[24], v119.__r_.__value_.__l.__data_, v119.__r_.__value_.__l.__size_);
    }
    else
    {
      v111 = *(_OWORD *)&v119.__r_.__value_.__l.__data_;
      *(_QWORD *)(v110 + 16) = *((_QWORD *)&v119.__r_.__value_.__l + 2);
      *(_OWORD *)v110 = v111;
    }
    v112 = v110 + 24;
    a1[24] = v110 + 24;
  }
  a1[24] = v112;
  if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v119.__r_.__value_.__l.__data_);
  if (v121)
  {
    v122 = (char *)v121;
    operator delete(v121);
  }
  if (__p)
  {
    v125 = (char *)__p;
    operator delete(__p);
  }
  *(_QWORD *)__s = &v127;
  sub_20B83AFD0((void ***)__s);
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s1.__r_.__value_.__l.__data_);
}

void sub_20B9A3AEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,char *a27,char *a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v40 = v38;
  *(_QWORD *)(v40 + 192) = v39;
  if (a20 < 0)
    operator delete(__p);
  if (a24)
    operator delete(a24);
  if (a27)
  {
    a28 = a27;
    operator delete(a27);
  }
  a27 = &a30;
  sub_20B83AFD0((void ***)&a27);
  if (a38 < 0)
    operator delete(a33);
  _Unwind_Resume(a1);
}

uint64_t SeaweedChineseDictionaryBuild(int a1, char **a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char *v12;
  uint64_t v13;
  void *v14;
  char *v15;
  uint64_t *v16;
  uint64_t *v17;
  int v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t *v23;
  uint64_t *v24;
  int v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t *v30;
  uint64_t *v31;
  unint64_t v32;
  void **v33;
  int v34;
  int v35;
  unint64_t v37;
  void **v38;
  int v39;
  int v40;
  unint64_t v42;
  void **v43;
  _BOOL4 v44;
  char *v45;
  void *v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  const std::locale::facet *v52;
  uint64_t v53;
  int v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  const std::locale::facet *v71;
  char v73;
  void *v74;
  uint64_t *v75;
  uint64_t *v76;
  _QWORD v77[2];
  int v78;
  void *__p[2];
  void *v80[4];
  int v81;
  uint64_t *v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  _BYTE v89[128];
  uint64_t v90;
  void *v91[2];
  unsigned __int8 v92;
  void *v93[2];
  unsigned __int8 v94;
  void *v95[2];
  unsigned __int8 v96;
  _QWORD *v97[2];
  void (*v98)(_QWORD *, unsigned __int8 *);
  void *v99;
  __int128 *v100;
  std::locale *v101;
  void **v102;
  void **v103;
  void **v104;
  uint64_t v105;
  std::locale v106;
  std::locale *v107;
  uint64_t v108;
  uint64_t (*v109)(uint64_t, _QWORD *);
  uint64_t (*v110)(uint64_t);
  _BYTE v111[32];
  int v112;
  char *v113;
  void **v114;
  uint64_t v115;
  char v116;
  void *v117[2];
  uint64_t v118;
  uint64_t v119;
  __int128 v120;
  uint64_t v121;
  uint64_t v122;

  MEMORY[0x20BD39BFC](&v73);
  sub_20B892C88((uint64_t)v89);
  if ((sub_20B8B8804((uint64_t)v89, a1, a2, (uint64_t)&off_24C49FA38) & 1) != 0)
  {
    if (!sub_20B8B993C((uint64_t)v89))
    {
      v53 = 0;
      goto LABEL_92;
    }
    v74 = 0;
    v75 = 0;
    v76 = 0;
    v77[0] = &off_24C4674A0;
    v77[1] = 0;
    v78 = -1;
    v82 = 0;
    *(_OWORD *)__p = 0u;
    memset(v80, 0, sizeof(v80));
    if (!sub_20B8B3F30((uint64_t)v77, "UTF-8", "UTF-16LE"))
    {
      v4 = sub_20B828F84(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/seaweed/Dictionary/SeaweedChineseDictionaryCompiler.cpp", 101);
      sub_20B828F84(v4, (uint64_t)"(", 1);
      v5 = (_QWORD *)std::ostream::operator<<();
      v6 = sub_20B828F84(v5, (uint64_t)") [", 3);
      v7 = sub_20B828F84(v6, (uint64_t)"m_converter.open(\"UTF-8\", \"UTF-16LE\")", 37);
      v8 = sub_20B828F84(v7, (uint64_t)"] ", 2);
      sub_20B828F84(v8, (uint64_t)"iconv_open() failed (from UTF-8 to UTF-16LE)", 44);
      sub_20B89423C();
    }
    sub_20B8938D8((uint64_t)v89, "index_config", &v106);
    sub_20B8938D8((uint64_t)v89, "type", v97);
    v9 = operator new();
    sub_20B8B0674(v9, (char *)&v106, v97);
    v10 = (uint64_t)v82;
    v82 = (uint64_t *)v9;
    if (v10)
      sub_20B9A588C(v10);
    v81 = sub_20B86FCF4((uint64_t)v89, "priority");
    sub_20B8938D8((uint64_t)v89, "input", &v120);
    if (SHIBYTE(v80[0]) < 0)
      operator delete(__p[0]);
    *(_OWORD *)__p = v120;
    v80[0] = (void *)v121;
    sub_20B8938D8((uint64_t)v89, "output", &v120);
    if (SHIBYTE(v80[3]) < 0)
      operator delete(v80[1]);
    *(_OWORD *)&v80[1] = v120;
    v80[3] = (void *)v121;
    sub_20B8938D8((uint64_t)v89, "pinyin_syllable", &v120);
    sub_20B8938D8((uint64_t)v89, "zhuyin_syllable", v117);
    sub_20B8938D8((uint64_t)v89, "jyutping_syllable", &v113);
    v11 = SHIBYTE(v121);
    v12 = (char *)v120;
    v13 = operator new();
    v14 = (void *)v13;
    if (v11 >= 0)
      v15 = (char *)&v120;
    else
      v15 = v12;
    sub_20B9F14AC(v13, v15);
    v16 = (uint64_t *)v74;
    v74 = v14;
    if (v16)
    {
      v17 = sub_20B9F16E8(v16);
      MEMORY[0x20BD39CB0](v17, 0x10B0C40A1109CE3);
    }
    v18 = SHIBYTE(v118);
    v19 = (char *)v117[0];
    v20 = operator new();
    v21 = v20;
    if (v18 >= 0)
      v22 = (char *)v117;
    else
      v22 = v19;
    sub_20B9F14AC(v20, v22);
    v23 = v75;
    v75 = (uint64_t *)v21;
    if (v23)
    {
      v24 = sub_20B9F16E8(v23);
      MEMORY[0x20BD39CB0](v24, 0x10B0C40A1109CE3);
    }
    v25 = SHIBYTE(v115);
    v26 = v113;
    v27 = operator new();
    v28 = v27;
    if (v25 >= 0)
      v29 = (char *)&v113;
    else
      v29 = v26;
    sub_20B9F14AC(v27, v29);
    v30 = v76;
    v76 = (uint64_t *)v28;
    if (v30)
    {
      v31 = sub_20B9F16E8(v30);
      MEMORY[0x20BD39CB0](v31, 0x10B0C40A1109CE3);
    }
    sub_20B8938D8((uint64_t)v89, "language", v95);
    v32 = v96;
    if ((v96 & 0x80u) != 0)
      v32 = (unint64_t)v95[1];
    if (v32 == 7)
    {
      v33 = (void **)v95[0];
      if ((v96 & 0x80u) == 0)
        v33 = v95;
      v34 = *(_DWORD *)v33;
      v35 = *(_DWORD *)((char *)v33 + 3);
      if (v34 == 1210935418 && v35 == 1953390920)
      {
        v54 = 0;
        if ((v96 & 0x80) == 0)
        {
LABEL_66:
          if (!v54)
            goto LABEL_71;
          goto LABEL_70;
        }
LABEL_69:
        operator delete(v95[0]);
        if (!v54)
        {
LABEL_71:
          sub_20B8938D8((uint64_t)v89, "language", v95);
          if ((v96 & 0x80u) == 0)
            v60 = (char *)v95;
          else
            v60 = (char *)v95[0];
          v78 = sub_20B8D1150(v60);
          if ((char)v96 < 0)
            operator delete(v95[0]);
          if (SHIBYTE(v115) < 0)
            operator delete(v113);
          if (SHIBYTE(v118) < 0)
            operator delete(v117[0]);
          if (SHIBYTE(v121) < 0)
            operator delete((void *)v120);
          if (SHIBYTE(v98) < 0)
            operator delete(v97[0]);
          if (SHIBYTE(v108) < 0)
            operator delete(v106.__locale_);
          v83 = 0u;
          v84 = 0u;
          v85 = 0u;
          v86 = 0u;
          v87 = 0u;
          v88 = 0u;
          sub_20B99F558((uint64_t)&v74);
          v61 = operator new();
          sub_20BA1B1B0(v61, v78);
          if (SHIBYTE(v80[3]) >= 0)
            v62 = (char *)&v80[1];
          else
            v62 = (char *)v80[1];
          sub_20BA1B3D4(v61, v62, (uint64_t)"r");
          v64 = *v82;
          v63 = v82[1];
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v61 + 32))(v61) != (v63 - v64) >> 3)
          {
            v65 = sub_20B828F84(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/seaweed/Dictionary/SeaweedChineseDictionaryCompiler.cpp", 101);
            sub_20B828F84(v65, (uint64_t)"(", 1);
            v66 = (_QWORD *)std::ostream::operator<<();
            v67 = sub_20B828F84(v66, (uint64_t)") [", 3);
            v68 = sub_20B828F84(v67, (uint64_t)"m_data.indexCount() == dictionary->indexCount()", 47);
            v69 = sub_20B828F84(v68, (uint64_t)"] ", 2);
            v70 = sub_20B828F84(v69, (uint64_t)"dictionary index count error. ", 30);
            std::ios_base::getloc((const std::ios_base *)((char *)v70 + *(_QWORD *)(*v70 - 24)));
            v71 = std::locale::use_facet(&v106, MEMORY[0x24BEDB350]);
            ((void (*)(const std::locale::facet *, uint64_t))v71->__vftable[2].~facet_0)(v71, 10);
            std::locale::~locale(&v106);
            std::ostream::put();
            std::ostream::flush();
            sub_20B89423C();
          }
          *(_QWORD *)&v120 = 0;
          *((_QWORD *)&v120 + 1) = &v120;
          v121 = 0x2000000000;
          v122 = 0;
          v117[0] = 0;
          v117[1] = v117;
          v118 = 0x2000000000;
          v119 = 0;
          v113 = 0;
          v114 = (void **)&v113;
          v115 = 0x2000000000;
          v116 = 1;
          v106.__locale_ = 0;
          v107 = &v106;
          v108 = 0x5002000000;
          v109 = sub_20B9A16C0;
          v110 = sub_20B9A1730;
          memset(v111, 0, sizeof(v111));
          v112 = 1065353216;
          v97[0] = (_QWORD *)MEMORY[0x24BDAC760];
          v97[1] = (_QWORD *)0x40000000;
          v98 = sub_20B9A24D8;
          v99 = &unk_24C49FC70;
          v104 = &v74;
          v100 = &v120;
          v101 = &v106;
          v102 = v117;
          v105 = v61;
          v103 = (void **)&v113;
          sub_20B99D750((uint64_t)&v74);
          (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
          v53 = *((_BYTE *)v114 + 24) == 0;
          _Block_object_dispose(&v106, 8);
          sub_20B8CECB0((uint64_t)v111);
          _Block_object_dispose(&v113, 8);
          _Block_object_dispose(v117, 8);
          _Block_object_dispose(&v120, 8);
          sub_20B9A4AC8((uint64_t)&v74);
          goto LABEL_92;
        }
LABEL_70:
        v55 = sub_20B828F84(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/seaweed/Dictionary/SeaweedChineseDictionaryCompiler.cpp", 101);
        sub_20B828F84(v55, (uint64_t)"(", 1);
        v56 = (_QWORD *)std::ostream::operator<<();
        v57 = sub_20B828F84(v56, (uint64_t)") [", 3);
        v58 = sub_20B828F84(v57, (uint64_t)"false", 5);
        v59 = sub_20B828F84(v58, (uint64_t)"] ", 2);
        sub_20B828F84(v59, (uint64_t)"wrong language\n", 15);
        sub_20B89423C();
      }
    }
    sub_20B8938D8((uint64_t)v89, "language", v93);
    v37 = v94;
    if ((v94 & 0x80u) != 0)
      v37 = (unint64_t)v93[1];
    if (v37 != 7)
      goto LABEL_44;
    v38 = (void **)v93[0];
    if ((v94 & 0x80u) == 0)
      v38 = v93;
    v39 = *(_DWORD *)v38;
    v40 = *(_DWORD *)((char *)v38 + 3);
    if (v39 == 1210935418 && v40 == 1936613704)
    {
      v54 = 0;
      if ((v94 & 0x80) != 0)
LABEL_64:
        operator delete(v93[0]);
    }
    else
    {
LABEL_44:
      sub_20B8938D8((uint64_t)v89, "language", v91);
      v42 = v92;
      if ((v92 & 0x80u) != 0)
        v42 = (unint64_t)v91[1];
      if (v42 == 8)
      {
        v43 = (void **)v91[0];
        if ((v92 & 0x80u) == 0)
          v43 = v91;
        v44 = *v43 == (void *)0x746E61482D657579;
      }
      else
      {
        v44 = 0;
      }
      v54 = !v44;
      if ((char)v92 < 0)
        operator delete(v91[0]);
      if ((v94 & 0x80) != 0)
        goto LABEL_64;
    }
    if ((v96 & 0x80) == 0)
      goto LABEL_66;
    goto LABEL_69;
  }
  v45 = (char *)sub_20B8715E0((uint64_t)&v90);
  sub_20B80BBD0(&v74, v45);
  if (SHIBYTE(v76) >= 0)
    v46 = &v74;
  else
    v46 = v74;
  if (SHIBYTE(v76) >= 0)
    v47 = HIBYTE(v76);
  else
    v47 = (uint64_t)v75;
  v48 = sub_20B828F84(MEMORY[0x24BEDB318], (uint64_t)v46, v47);
  v49 = sub_20B828F84(v48, (uint64_t)"\n\n", 2);
  v50 = sub_20B828F84(v49, (uint64_t)"MeCab: Yet Another Part-of-Speech and Morphological Analyzer\n\nCopyright(C) 2001-2012 Taku Kudo \nCopyright(C) 2004-2008 Nippon Telegraph and Telephone Corporation\n", 162);
  v51 = sub_20B828F84(v50, (uint64_t)"\ntry '--help' for more information.", 35);
  std::ios_base::getloc((const std::ios_base *)((char *)v51 + *(_QWORD *)(*v51 - 24)));
  v52 = std::locale::use_facet(&v106, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v52->__vftable[2].~facet_0)(v52, 10);
  std::locale::~locale(&v106);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(v76) < 0)
    operator delete(v74);
  v53 = 0xFFFFFFFFLL;
LABEL_92:
  sub_20B892E10((uint64_t)v89);
  std::ios_base::Init::~Init((std::ios_base::Init *)&v73);
  return v53;
}

void sub_20B9A4578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  _QWORD *v45;
  void **v46;
  void **v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;

  if (SLOBYTE(STACK[0x2A7]) < 0)
    operator delete(v47[81]);
  if (SLOBYTE(STACK[0x2BF]) < 0)
    operator delete(v47[84]);
  if (*(char *)(v49 - 153) < 0)
    operator delete(v46[10]);
  if (*(char *)(v49 - 121) < 0)
    operator delete(v46[14]);
  if (*(char *)(v49 - 89) < 0)
    operator delete(v46[18]);
  if (SLOBYTE(STACK[0x2D7]) < 0)
    operator delete(v47[87]);
  if (*(char *)(v49 - 233) < 0)
    operator delete(v47[97]);
  v51 = a32;
  a32 = 0;
  if (v51)
    sub_20B9A588C(v51);
  if (a30 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  sub_20B8B4180(v45);
  sub_20B9A5850((uint64_t **)(v48 + 16), 0);
  sub_20B9A5850((uint64_t **)(v48 + 8), 0);
  sub_20B9A5850((uint64_t **)&a13, 0);
  sub_20B892E10((uint64_t)&a45);
  std::ios_base::Init::~Init((std::ios_base::Init *)&a12);
  _Unwind_Resume(a1);
}

void sub_20B9A48F4()
{
  JUMPOUT(0x20BD39CB0);
}

void sub_20B9A4908()
{
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B9A491C(uint64_t a1)
{
  sub_20B88F9CC(a1, *(char **)(a1 + 8));
  return a1;
}

uint64_t sub_20B9A4944(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v8;
  BOOL v9;
  char *v10;
  _BYTE *v11;
  __int128 v12;
  uint64_t *v13;

  qword_25472BF10 = 0;
  qword_25472BF08 = 0;
  qword_25472BF00 = (uint64_t)&qword_25472BF08;
  if (a2)
  {
    v2 = result;
    v3 = 0;
    v4 = result + 32 * a2;
    v5 = &qword_25472BF08;
    while (1)
    {
      if (v5 == &qword_25472BF08)
      {
        v6 = &qword_25472BF08;
        if (v3)
          goto LABEL_8;
      }
      else
      {
        if (v3)
        {
          do
          {
            v6 = (uint64_t *)v3;
            v3 = *(_QWORD *)(v3 + 8);
          }
          while (v3);
        }
        else
        {
          v8 = &qword_25472BF08;
          do
          {
            v6 = (uint64_t *)v8[2];
            v9 = *v6 == (_QWORD)v8;
            v8 = v6;
          }
          while (v9);
        }
        result = sub_20B871BA8(v6 + 4, (void **)v2);
        if ((result & 0x80) == 0)
        {
          result = (uint64_t)sub_20B88A3C0((uint64_t)&qword_25472BF00, &v13, (void **)v2);
          v7 = (uint64_t **)result;
LABEL_13:
          if (*v7)
            goto LABEL_21;
          goto LABEL_17;
        }
        if (qword_25472BF08)
        {
LABEL_8:
          v13 = v6;
          v7 = (uint64_t **)(v6 + 1);
          goto LABEL_13;
        }
      }
      v13 = &qword_25472BF08;
      v7 = (uint64_t **)&qword_25472BF08;
LABEL_17:
      v10 = (char *)operator new(0x40uLL);
      v11 = v10 + 32;
      if (*(char *)(v2 + 23) < 0)
      {
        sub_20B80ACE0(v11, *(void **)v2, *(_QWORD *)(v2 + 8));
      }
      else
      {
        v12 = *(_OWORD *)v2;
        *((_QWORD *)v10 + 6) = *(_QWORD *)(v2 + 16);
        *(_OWORD *)v11 = v12;
      }
      *((_WORD *)v10 + 28) = *(_WORD *)(v2 + 24);
      result = (uint64_t)sub_20B8296A0((uint64_t **)&qword_25472BF00, (uint64_t)v13, v7, (uint64_t *)v10);
LABEL_21:
      v2 += 32;
      if (v2 == v4)
        return result;
      v5 = (uint64_t *)qword_25472BF00;
      v3 = qword_25472BF08;
    }
  }
  return result;
}

void sub_20B9A4AA0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  operator delete(v2);
  sub_20B88F9CC(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_20B9A4AC8(uint64_t a1)
{
  uint64_t v2;
  void **v4;

  v4 = (void **)(a1 + 184);
  sub_20B83AFD0(&v4);
  v4 = (void **)(a1 + 160);
  sub_20B9A4B8C(&v4);
  if (*(char *)(a1 + 159) < 0)
    operator delete(*(void **)(a1 + 136));
  if (*(char *)(a1 + 135) < 0)
    operator delete(*(void **)(a1 + 112));
  v2 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = 0;
  if (v2)
    sub_20B9A588C(v2);
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  sub_20B8B4180((_QWORD *)(a1 + 24));
  sub_20B9A5850((uint64_t **)(a1 + 16), 0);
  sub_20B9A5850((uint64_t **)(a1 + 8), 0);
  sub_20B9A5850((uint64_t **)a1, 0);
  return a1;
}

void sub_20B9A4B8C(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void **v6;
  void **v7;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = (void **)*((_QWORD *)v4 - 1);
        v4 -= 8;
        v6 = v7;
        if (v7)
          sub_20B969128(v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_20B9A4BFC(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 9) < 0)
          operator delete(*(v4 - 4));
        v4 -= 4;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

__n128 sub_20B9A4C74(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void sub_20B9A4C98(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 40);
  sub_20B9A4BFC(&v1);
}

__n128 sub_20B9A4CC0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(__n128 *)(a1 + 40) = result;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_20B9A4CDC(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

void sub_20B9A4CF0(_QWORD *a1, std::string *__str, uint64_t a3, uint64_t a4, char a5)
{
  std::string *v6;
  int v8;
  __int16 v9;
  _BOOL4 v11;
  BOOL v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::string *v17;
  size_t v18;
  uint64_t v19;
  std::string::size_type size;
  int v21;
  std::string *v22;
  uint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  _BYTE *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  __int16 v35;
  char v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  size_t v42;
  std::string *v43;
  const void *v44;
  BOOL v45;
  uint64_t v47;
  int v48;
  unint64_t v49;
  size_t v50;
  std::string *v51;
  const void *v52;
  uint64_t v54;
  uint64_t v55;
  void **v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  __int128 v69;
  char *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  int64x2_t v75;
  char *v76;
  int v77;
  int v78;
  unint64_t v79;
  size_t v80;
  std::string *v81;
  const void *v82;
  BOOL v83;
  uint64_t v85;
  int v86;
  unint64_t v87;
  size_t v88;
  std::string *v89;
  const void *v90;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void **v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  __int128 v110;
  char *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  __int128 v115;
  int64x2_t v116;
  char *v117;
  int v118;
  int v119;
  unint64_t v120;
  size_t v121;
  std::string *v122;
  const void *v123;
  BOOL v124;
  uint64_t v126;
  int v127;
  unint64_t v128;
  size_t v129;
  std::string *v130;
  const void *v131;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void **v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  __int128 v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  char *v148;
  uint64_t v149;
  char *v150;
  __int128 v151;
  char *v152;
  uint64_t v153;
  unint64_t v154;
  __int128 v155;
  int64x2_t v156;
  char *v157;
  int v158;
  void *__p[2];
  std::string::size_type v160;
  uint64_t v161;
  char *v162;
  int64x2_t v163;
  char *v164;
  _QWORD *v165;

  v6 = __str;
  v8 = *(__int16 *)(a3 + 4);
  v9 = *(_WORD *)(a3 + 4);
  v11 = (v8 & 0x20) == 0 || v8 < 0;
  v12 = (v8 & 0x400) == 0;
  v13 = (v8 & 0x100) == 0;
  v14 = *(_QWORD *)(a1[4] + 8);
  v15 = *(unsigned __int8 *)(v14 + 63);
  if (*(char *)(v14 + 63) < 0)
    v16 = *(_QWORD *)(v14 + 48);
  else
    v16 = *(unsigned __int8 *)(v14 + 63);
  v17 = (std::string *)(v14 + 40);
  if (v16)
  {
    v18 = *(_QWORD *)(v14 + 48);
    if ((v15 & 0x80u) == 0)
      v19 = *(unsigned __int8 *)(v14 + 63);
    else
      v19 = *(_QWORD *)(v14 + 48);
    size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    v21 = (char)size;
    if ((size & 0x80u) != 0)
      size = __str->__r_.__value_.__l.__size_;
    if (v19 == size)
    {
      if (v21 < 0)
        __str = (std::string *)__str->__r_.__value_.__r.__words[0];
      if ((v15 & 0x80) == 0)
      {
        if ((_DWORD)v15)
        {
          v22 = v17;
          while (v22->__r_.__value_.__s.__data_[0] == __str->__r_.__value_.__s.__data_[0])
          {
            v22 = (std::string *)((char *)v22 + 1);
            __str = (std::string *)((char *)__str + 1);
            if (!--v15)
              goto LABEL_37;
          }
          goto LABEL_26;
        }
LABEL_37:
        if (v11)
        {
          *(_BYTE *)(*(_QWORD *)(a1[9] + 8) - 3) = 1;
          if ((v9 & 0x400) != 0)
          {
LABEL_39:
            if ((v9 & 0x100) != 0)
              return;
            goto LABEL_258;
          }
        }
        else if ((v9 & 0x400) != 0)
        {
          goto LABEL_39;
        }
        *(_BYTE *)(*(_QWORD *)(a1[9] + 8) - 2) = 1;
        if ((v9 & 0x100) != 0)
          return;
LABEL_258:
        *(_BYTE *)(*(_QWORD *)(a1[9] + 8) - 1) = 1;
        return;
      }
      if (!memcmp(v17->__r_.__value_.__l.__data_, __str, v18))
        goto LABEL_37;
    }
  }
LABEL_26:
  std::string::operator=(v17, v6);
  v23 = a1[9];
  v25 = *(_BYTE **)(v23 + 8);
  v24 = *(_QWORD *)(v23 + 16);
  if ((unint64_t)v25 >= v24)
  {
    v27 = *(_BYTE **)v23;
    v28 = 0xAAAAAAAAAAAAAAABLL * (_QWORD)&v25[-*(_QWORD *)v23];
    v29 = v28 + 1;
    if (v28 + 1 >= 0x5555555555555556)
      sub_20B80CDD8();
    v30 = 0xAAAAAAAAAAAAAAABLL * (v24 - (_QWORD)v27);
    if (2 * v30 > v29)
      v29 = 2 * v30;
    if (v30 >= 0x2AAAAAAAAAAAAAAALL)
      v31 = 0x5555555555555555;
    else
      v31 = v29;
    if (v31)
    {
      if (v31 >= 0x5555555555555556)
        sub_20B800BC0();
      v32 = (char *)operator new(3 * v31);
      v27 = *(_BYTE **)v23;
      v25 = *(_BYTE **)(v23 + 8);
    }
    else
    {
      v32 = 0;
    }
    v33 = &v32[3 * v28];
    *v33 = v11;
    v34 = &v32[3 * v31];
    v33[1] = v12;
    v33[2] = v13;
    v26 = v33 + 3;
    if (v25 != v27)
    {
      do
      {
        v35 = *(_WORD *)(v25 - 3);
        v25 -= 3;
        v36 = v25[2];
        *(_WORD *)(v33 - 3) = v35;
        v33 -= 3;
        v33[2] = v36;
      }
      while (v25 != v27);
      v27 = *(_BYTE **)v23;
    }
    *(_QWORD *)v23 = v33;
    *(_QWORD *)(v23 + 8) = v26;
    *(_QWORD *)(v23 + 16) = v34;
    if (v27)
      operator delete(v27);
  }
  else
  {
    *v25 = v11;
    v25[1] = v12;
    v26 = v25 + 3;
    v25[2] = v13;
  }
  *(_QWORD *)(v23 + 8) = v26;
  while (1)
  {
    v37 = a1[5];
    v38 = *(_QWORD **)(v37 + 8);
    v39 = v38[6];
    if (v38[5] == v39)
      break;
    if ((a5 & 1) == 0)
    {
      v40 = *(char *)(v39 - 9);
      v41 = v40 >= 0 ? *(unsigned __int8 *)(v39 - 9) : *(_QWORD *)(v39 - 24);
      if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
      {
        if (v41 == -1)
          goto LABEL_259;
        v43 = (std::string *)v6->__r_.__value_.__r.__words[0];
        v42 = v6->__r_.__value_.__l.__size_ >= v41 ? v41 : v6->__r_.__value_.__l.__size_;
      }
      else
      {
        if (v41 == -1)
          goto LABEL_259;
        v42 = HIBYTE(v6->__r_.__value_.__r.__words[2]) >= v41 ? v41 : HIBYTE(v6->__r_.__value_.__r.__words[2]);
        v43 = v6;
      }
      v44 = v40 >= 0 ? (const void *)(v39 - 32) : *(const void **)(v39 - 32);
      v45 = !memcmp(v43, v44, v42) && v42 == v41;
      if (v45 && !v11)
        break;
    }
    if (v11)
    {
      v47 = *(_QWORD *)(v39 - 8);
      v48 = *(char *)(v39 - 9);
      if (v48 >= 0)
        v49 = *(unsigned __int8 *)(v39 - 9);
      else
        v49 = *(_QWORD *)(v39 - 24);
      if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
      {
        if (v49 == -1)
LABEL_259:
          sub_20B88FD0C();
        v51 = (std::string *)v6->__r_.__value_.__r.__words[0];
        if (v6->__r_.__value_.__l.__size_ >= v49)
          v50 = v49;
        else
          v50 = v6->__r_.__value_.__l.__size_;
      }
      else
      {
        if (v49 == -1)
          goto LABEL_259;
        if (HIBYTE(v6->__r_.__value_.__r.__words[2]) >= v49)
          v50 = v49;
        else
          v50 = HIBYTE(v6->__r_.__value_.__r.__words[2]);
        v51 = v6;
      }
      if (v48 >= 0)
        v52 = (const void *)(v39 - 32);
      else
        v52 = *(const void **)(v39 - 32);
      if (!memcmp(v51, v52, v50) && v50 == v49)
      {
        *(_BYTE *)(*(_QWORD *)a1[9] + 3 * v47) = 1;
        v37 = a1[5];
      }
    }
    v54 = *(_QWORD *)(v37 + 8);
    v55 = *(_QWORD *)(v54 + 48);
    v56 = (void **)(v55 - 32);
    if (*(char *)(v55 - 9) < 0)
      operator delete(*v56);
    *(_QWORD *)(v54 + 48) = v56;
  }
  v57 = *(_QWORD *)(a1[6] + 8);
  if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20B80ACE0(__p, v6->__r_.__value_.__l.__data_, v6->__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v160 = v6->__r_.__value_.__r.__words[2];
  }
  v161 = *(_QWORD *)(v57 + 24);
  v58 = v38[7];
  v59 = v38[6];
  if (v59 >= v58)
  {
    v61 = v38[5];
    v62 = (uint64_t)(v59 - v61) >> 5;
    v63 = v62 + 1;
    if ((unint64_t)(v62 + 1) >> 59)
      sub_20B80CDD8();
    v64 = v58 - v61;
    if (v64 >> 4 > v63)
      v63 = v64 >> 4;
    if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFE0)
      v65 = 0x7FFFFFFFFFFFFFFLL;
    else
      v65 = v63;
    v165 = v38 + 7;
    v66 = (char *)sub_20B9A57CC(v65);
    v67 = &v66[32 * v62];
    v162 = v66;
    v163.i64[0] = (uint64_t)v67;
    v164 = &v66[32 * v68];
    v69 = *(_OWORD *)__p;
    *((_QWORD *)v67 + 2) = v160;
    *(_OWORD *)v67 = v69;
    __p[1] = 0;
    v160 = 0;
    __p[0] = 0;
    *((_QWORD *)v67 + 3) = v161;
    v70 = v67 + 32;
    v163.i64[1] = (uint64_t)(v67 + 32);
    v72 = v38[5];
    v71 = v38[6];
    v73 = v163.i64[0];
    if (v71 == v72)
    {
      v75 = vdupq_n_s64(v71);
    }
    else
    {
      do
      {
        v74 = *(_OWORD *)(v71 - 32);
        *(_QWORD *)(v73 - 16) = *(_QWORD *)(v71 - 16);
        *(_OWORD *)(v73 - 32) = v74;
        *(_QWORD *)(v71 - 24) = 0;
        *(_QWORD *)(v71 - 16) = 0;
        *(_QWORD *)(v71 - 32) = 0;
        *(_QWORD *)(v73 - 8) = *(_QWORD *)(v71 - 8);
        v73 -= 32;
        v71 -= 32;
      }
      while (v71 != v72);
      v75 = *(int64x2_t *)(v38 + 5);
      v70 = (char *)v163.i64[1];
    }
    v38[5] = v73;
    v38[6] = v70;
    v163 = v75;
    v76 = (char *)v38[7];
    v38[7] = v164;
    v164 = v76;
    v162 = (char *)v75.i64[0];
    sub_20B9195DC((uint64_t)&v162);
    v77 = SHIBYTE(v160);
    v38[6] = v70;
    if (v77 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v60 = *(_OWORD *)__p;
    *(_QWORD *)(v59 + 16) = v160;
    *(_OWORD *)v59 = v60;
    __p[1] = 0;
    v160 = 0;
    __p[0] = 0;
    *(_QWORD *)(v59 + 24) = v161;
    v38[6] = v59 + 32;
  }
  while (1)
  {
    v92 = a1[7];
    v96 = *(_QWORD **)(v92 + 8);
    v97 = v96[6];
    if (v96[5] == v97)
      break;
    if ((a5 & 1) == 0)
    {
      v78 = *(char *)(v97 - 9);
      v79 = v78 >= 0 ? *(unsigned __int8 *)(v97 - 9) : *(_QWORD *)(v97 - 24);
      if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
      {
        if (v79 == -1)
          goto LABEL_259;
        v81 = (std::string *)v6->__r_.__value_.__r.__words[0];
        v80 = v6->__r_.__value_.__l.__size_ >= v79 ? v79 : v6->__r_.__value_.__l.__size_;
      }
      else
      {
        if (v79 == -1)
          goto LABEL_259;
        v80 = HIBYTE(v6->__r_.__value_.__r.__words[2]) >= v79 ? v79 : HIBYTE(v6->__r_.__value_.__r.__words[2]);
        v81 = v6;
      }
      v82 = v78 >= 0 ? (const void *)(v97 - 32) : *(const void **)(v97 - 32);
      v83 = !memcmp(v81, v82, v80) && v80 == v79;
      if (v83 && (v9 & 0x400) != 0)
        break;
    }
    if ((v9 & 0x400) == 0)
    {
      v85 = *(_QWORD *)(v97 - 8);
      v86 = *(char *)(v97 - 9);
      if (v86 >= 0)
        v87 = *(unsigned __int8 *)(v97 - 9);
      else
        v87 = *(_QWORD *)(v97 - 24);
      if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
      {
        if (v87 == -1)
          goto LABEL_259;
        v89 = (std::string *)v6->__r_.__value_.__r.__words[0];
        if (v6->__r_.__value_.__l.__size_ >= v87)
          v88 = v87;
        else
          v88 = v6->__r_.__value_.__l.__size_;
      }
      else
      {
        if (v87 == -1)
          goto LABEL_259;
        if (HIBYTE(v6->__r_.__value_.__r.__words[2]) >= v87)
          v88 = v87;
        else
          v88 = HIBYTE(v6->__r_.__value_.__r.__words[2]);
        v89 = v6;
      }
      if (v86 >= 0)
        v90 = (const void *)(v97 - 32);
      else
        v90 = *(const void **)(v97 - 32);
      if (!memcmp(v89, v90, v88) && v88 == v87)
      {
        *(_BYTE *)(*(_QWORD *)a1[9] + 3 * v85 + 1) = 1;
        v92 = a1[7];
      }
    }
    v93 = *(_QWORD *)(v92 + 8);
    v94 = *(_QWORD *)(v93 + 48);
    v95 = (void **)(v94 - 32);
    if (*(char *)(v94 - 9) < 0)
      operator delete(*v95);
    *(_QWORD *)(v93 + 48) = v95;
  }
  v98 = *(_QWORD *)(a1[6] + 8);
  if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20B80ACE0(__p, v6->__r_.__value_.__l.__data_, v6->__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v160 = v6->__r_.__value_.__r.__words[2];
  }
  v161 = *(_QWORD *)(v98 + 24);
  v99 = v96[7];
  v100 = v96[6];
  if (v100 >= v99)
  {
    v102 = v96[5];
    v103 = (uint64_t)(v100 - v102) >> 5;
    v104 = v103 + 1;
    if ((unint64_t)(v103 + 1) >> 59)
      sub_20B80CDD8();
    v105 = v99 - v102;
    if (v105 >> 4 > v104)
      v104 = v105 >> 4;
    if ((unint64_t)v105 >= 0x7FFFFFFFFFFFFFE0)
      v106 = 0x7FFFFFFFFFFFFFFLL;
    else
      v106 = v104;
    v165 = v96 + 7;
    v107 = (char *)sub_20B9A57CC(v106);
    v108 = &v107[32 * v103];
    v163.i64[0] = (uint64_t)v108;
    v164 = &v107[32 * v109];
    v110 = *(_OWORD *)__p;
    *((_QWORD *)v108 + 2) = v160;
    *(_OWORD *)v108 = v110;
    __p[1] = 0;
    v160 = 0;
    __p[0] = 0;
    *((_QWORD *)v108 + 3) = v161;
    v111 = v108 + 32;
    v163.i64[1] = (uint64_t)(v108 + 32);
    v113 = v96[5];
    v112 = v96[6];
    v114 = v163.i64[0];
    if (v112 == v113)
    {
      v116 = vdupq_n_s64(v112);
    }
    else
    {
      do
      {
        v115 = *(_OWORD *)(v112 - 32);
        *(_QWORD *)(v114 - 16) = *(_QWORD *)(v112 - 16);
        *(_OWORD *)(v114 - 32) = v115;
        *(_QWORD *)(v112 - 24) = 0;
        *(_QWORD *)(v112 - 16) = 0;
        *(_QWORD *)(v112 - 32) = 0;
        *(_QWORD *)(v114 - 8) = *(_QWORD *)(v112 - 8);
        v114 -= 32;
        v112 -= 32;
      }
      while (v112 != v113);
      v116 = *(int64x2_t *)(v96 + 5);
      v111 = (char *)v163.i64[1];
    }
    v96[5] = v114;
    v96[6] = v111;
    v163 = v116;
    v117 = (char *)v96[7];
    v96[7] = v164;
    v164 = v117;
    v162 = (char *)v116.i64[0];
    sub_20B9195DC((uint64_t)&v162);
    v118 = SHIBYTE(v160);
    v96[6] = v111;
    if (v118 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v101 = *(_OWORD *)__p;
    *(_QWORD *)(v100 + 16) = v160;
    *(_OWORD *)v100 = v101;
    __p[1] = 0;
    v160 = 0;
    __p[0] = 0;
    *(_QWORD *)(v100 + 24) = v161;
    v96[6] = v100 + 32;
  }
  while (1)
  {
    v133 = a1[8];
    v137 = *(_QWORD **)(v133 + 8);
    v138 = v137[6];
    if (v137[5] == v138)
      break;
    if ((a5 & 1) == 0)
    {
      v119 = *(char *)(v138 - 9);
      v120 = v119 >= 0 ? *(unsigned __int8 *)(v138 - 9) : *(_QWORD *)(v138 - 24);
      if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
      {
        if (v120 == -1)
          goto LABEL_259;
        v122 = (std::string *)v6->__r_.__value_.__r.__words[0];
        v121 = v6->__r_.__value_.__l.__size_ >= v120 ? v120 : v6->__r_.__value_.__l.__size_;
      }
      else
      {
        if (v120 == -1)
          goto LABEL_259;
        v121 = HIBYTE(v6->__r_.__value_.__r.__words[2]) >= v120 ? v120 : HIBYTE(v6->__r_.__value_.__r.__words[2]);
        v122 = v6;
      }
      v123 = v119 >= 0 ? (const void *)(v138 - 32) : *(const void **)(v138 - 32);
      v124 = !memcmp(v122, v123, v121) && v121 == v120;
      if (v124 && (v9 & 0x100) != 0)
        break;
    }
    if ((v9 & 0x100) == 0)
    {
      v126 = *(_QWORD *)(v138 - 8);
      v127 = *(char *)(v138 - 9);
      if (v127 >= 0)
        v128 = *(unsigned __int8 *)(v138 - 9);
      else
        v128 = *(_QWORD *)(v138 - 24);
      if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
      {
        if (v128 == -1)
          goto LABEL_259;
        v130 = (std::string *)v6->__r_.__value_.__r.__words[0];
        if (v6->__r_.__value_.__l.__size_ >= v128)
          v129 = v128;
        else
          v129 = v6->__r_.__value_.__l.__size_;
      }
      else
      {
        if (v128 == -1)
          goto LABEL_259;
        if (HIBYTE(v6->__r_.__value_.__r.__words[2]) >= v128)
          v129 = v128;
        else
          v129 = HIBYTE(v6->__r_.__value_.__r.__words[2]);
        v130 = v6;
      }
      if (v127 >= 0)
        v131 = (const void *)(v138 - 32);
      else
        v131 = *(const void **)(v138 - 32);
      if (!memcmp(v130, v131, v129) && v129 == v128)
      {
        *(_BYTE *)(*(_QWORD *)a1[9] + 3 * v126 + 2) = 1;
        v133 = a1[8];
      }
    }
    v134 = *(_QWORD *)(v133 + 8);
    v135 = *(_QWORD *)(v134 + 48);
    v136 = (void **)(v135 - 32);
    if (*(char *)(v135 - 9) < 0)
      operator delete(*v136);
    *(_QWORD *)(v134 + 48) = v136;
  }
  v139 = *(_QWORD *)(a1[6] + 8);
  if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20B80ACE0(__p, v6->__r_.__value_.__l.__data_, v6->__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v160 = v6->__r_.__value_.__r.__words[2];
  }
  v161 = *(_QWORD *)(v139 + 24);
  v140 = v137[7];
  v141 = v137[6];
  if (v141 >= v140)
  {
    v143 = v137[5];
    v144 = (uint64_t)(v141 - v143) >> 5;
    v145 = v144 + 1;
    if ((unint64_t)(v144 + 1) >> 59)
      sub_20B80CDD8();
    v146 = v140 - v143;
    if (v146 >> 4 > v145)
      v145 = v146 >> 4;
    if ((unint64_t)v146 >= 0x7FFFFFFFFFFFFFE0)
      v147 = 0x7FFFFFFFFFFFFFFLL;
    else
      v147 = v145;
    v165 = v137 + 7;
    v148 = (char *)sub_20B9A57CC(v147);
    v150 = &v148[32 * v144];
    v151 = *(_OWORD *)__p;
    *((_QWORD *)v150 + 2) = v160;
    *(_OWORD *)v150 = v151;
    __p[1] = 0;
    v160 = 0;
    __p[0] = 0;
    *((_QWORD *)v150 + 3) = v161;
    v152 = v150 + 32;
    v153 = v137[5];
    v154 = v137[6];
    if (v154 == v153)
    {
      v156 = vdupq_n_s64(v154);
    }
    else
    {
      do
      {
        v155 = *(_OWORD *)(v154 - 32);
        *((_QWORD *)v150 - 2) = *(_QWORD *)(v154 - 16);
        *((_OWORD *)v150 - 2) = v155;
        *(_QWORD *)(v154 - 24) = 0;
        *(_QWORD *)(v154 - 16) = 0;
        *(_QWORD *)(v154 - 32) = 0;
        *((_QWORD *)v150 - 1) = *(_QWORD *)(v154 - 8);
        v150 -= 32;
        v154 -= 32;
      }
      while (v154 != v153);
      v156 = *(int64x2_t *)(v137 + 5);
    }
    v137[5] = v150;
    v137[6] = v152;
    v163 = v156;
    v157 = (char *)v137[7];
    v137[7] = &v148[32 * v149];
    v164 = v157;
    v162 = (char *)v156.i64[0];
    sub_20B9195DC((uint64_t)&v162);
    v158 = SHIBYTE(v160);
    v137[6] = v152;
    if (v158 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v142 = *(_OWORD *)__p;
    *(_QWORD *)(v141 + 16) = v160;
    *(_OWORD *)v141 = v142;
    __p[1] = 0;
    v160 = 0;
    __p[0] = 0;
    *(_QWORD *)(v141 + 24) = v161;
    v137[6] = v141 + 32;
  }
  ++*(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24);
}

void sub_20B9A57A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *sub_20B9A57CC(unint64_t a1)
{
  if (a1 >> 59)
    sub_20B800BC0();
  return operator new(32 * a1);
}

uint64_t sub_20B9A5800(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void **v4;
  void **v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    v5 = *(void ***)(v2 - 8);
    v2 -= 8;
    v4 = v5;
    *(_QWORD *)(a1 + 16) = v2;
    if (v5)
    {
      sub_20B969128(v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t *sub_20B9A5850(uint64_t **a1, uint64_t *a2)
{
  uint64_t *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_20B9F16E8(result);
    JUMPOUT(0x20BD39CB0);
  }
  return result;
}

void sub_20B9A588C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD39CB0);
}

void sub_20B9A58CC(uint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  _QWORD *v16;
  _BYTE *v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  int8x8_t prime;
  void *v24;
  void *v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint8x8_t v29;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  void *v38;

  v7 = a1 + 3;
  v8 = sub_20B828414((uint64_t)(a1 + 3), (uint64_t)a2);
  v9 = v8;
  v10 = a1[1];
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((sub_20B8288BC((uint64_t)(a1 + 4), i + 16, a2) & 1) != 0)
            return;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  v16 = operator new(0x28uLL);
  *v16 = 0;
  v16[1] = v9;
  v17 = v16 + 2;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_20B80ACE0(v17, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)v17 = *(_OWORD *)a3;
    v16[4] = *(_QWORD *)(a3 + 16);
  }
  v18 = (float)(unint64_t)(a1[3] + 1);
  v19 = *((float *)a1 + 8);
  if (!v10 || (float)(v19 * (float)v10) < v18)
  {
    v20 = 1;
    if (v10 >= 3)
      v20 = (v10 & (v10 - 1)) != 0;
    v21 = v20 | (2 * v10);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      prime = (int8x8_t)v22;
    else
      prime = (int8x8_t)v21;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v10 = a1[1];
    if (*(_QWORD *)&prime > v10)
      goto LABEL_33;
    if (*(_QWORD *)&prime < v10)
    {
      v30 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v10 < 3 || (v31 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        v30 = std::__next_prime(v30);
      }
      else
      {
        v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2)
          v30 = v32;
      }
      if (*(_QWORD *)&prime <= v30)
        prime = (int8x8_t)v30;
      if (*(_QWORD *)&prime >= v10)
      {
        v10 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(_QWORD *)&prime >> 61)
            sub_20B800BC0();
          v24 = operator new(8 * *(_QWORD *)&prime);
          v25 = (void *)*a1;
          *a1 = (uint64_t)v24;
          if (v25)
            operator delete(v25);
          v26 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(_QWORD *)(*a1 + 8 * v26++) = 0;
          while (*(_QWORD *)&prime != v26);
          v27 = (_QWORD *)a1[2];
          if (v27)
          {
            v28 = v27[1];
            v29 = (uint8x8_t)vcnt_s8(prime);
            v29.i16[0] = vaddlv_u8(v29);
            if (v29.u32[0] > 1uLL)
            {
              if (v28 >= *(_QWORD *)&prime)
                v28 %= *(_QWORD *)&prime;
            }
            else
            {
              v28 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*a1 + 8 * v28) = a1 + 2;
            v33 = (_QWORD *)*v27;
            if (*v27)
            {
              do
              {
                v34 = v33[1];
                if (v29.u32[0] > 1uLL)
                {
                  if (v34 >= *(_QWORD *)&prime)
                    v34 %= *(_QWORD *)&prime;
                }
                else
                {
                  v34 &= *(_QWORD *)&prime - 1;
                }
                if (v34 != v28)
                {
                  if (!*(_QWORD *)(*a1 + 8 * v34))
                  {
                    *(_QWORD *)(*a1 + 8 * v34) = v27;
                    goto LABEL_58;
                  }
                  *v27 = *v33;
                  *v33 = **(_QWORD **)(*a1 + 8 * v34);
                  **(_QWORD **)(*a1 + 8 * v34) = v33;
                  v33 = v27;
                }
                v34 = v28;
LABEL_58:
                v27 = v33;
                v33 = (_QWORD *)*v33;
                v28 = v34;
              }
              while (v33);
            }
          }
          v10 = (unint64_t)prime;
          goto LABEL_62;
        }
        v38 = (void *)*a1;
        *a1 = 0;
        if (v38)
          operator delete(v38);
        v10 = 0;
        a1[1] = 0;
      }
    }
LABEL_62:
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v35 = *a1;
  v36 = *(_QWORD **)(*a1 + 8 * v3);
  if (v36)
  {
    *v16 = *v36;
LABEL_75:
    *v36 = v16;
    goto LABEL_76;
  }
  *v16 = a1[2];
  a1[2] = (uint64_t)v16;
  *(_QWORD *)(v35 + 8 * v3) = a1 + 2;
  if (*v16)
  {
    v37 = *(_QWORD *)(*v16 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v37 >= v10)
        v37 %= v10;
    }
    else
    {
      v37 &= v10 - 1;
    }
    v36 = (_QWORD *)(*a1 + 8 * v37);
    goto LABEL_75;
  }
LABEL_76:
  ++*v7;
}

void sub_20B9A5CF4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_20B9A5D1C(uint64_t a1, unsigned __int8 *a2, __int128 **a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  char **v13;
  char *i;
  unint64_t v15;
  __int128 *v16;
  char *v17;
  _BYTE *v18;
  __int128 v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  _QWORD *v26;
  unint64_t v27;

  v7 = (_QWORD *)(a1 + 24);
  v8 = sub_20B828414(a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(char ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(char **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((sub_20B8288BC(a1 + 32, (unsigned __int8 *)i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  v16 = *a3;
  v17 = (char *)operator new(0x30uLL);
  *(_QWORD *)v17 = 0;
  *((_QWORD *)v17 + 1) = v9;
  v18 = v17 + 16;
  if (*((char *)v16 + 23) < 0)
  {
    sub_20B80ACE0(v18, *(void **)v16, *((_QWORD *)v16 + 1));
  }
  else
  {
    v19 = *v16;
    *((_QWORD *)v17 + 4) = *((_QWORD *)v16 + 2);
    *(_OWORD *)v18 = v19;
  }
  *((_DWORD *)v17 + 10) = 0;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v10 || (float)(v21 * (float)v10) < v20)
  {
    v22 = 1;
    if (v10 >= 3)
      v22 = (v10 & (v10 - 1)) != 0;
    v23 = v22 | (2 * v10);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    sub_20B828960(a1, v25);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v26)
  {
    *(_QWORD *)v17 = *v26;
    *v26 = v17;
  }
  else
  {
    *(_QWORD *)v17 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v17;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v17)
    {
      v27 = *(_QWORD *)(*(_QWORD *)v17 + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v27 >= v10)
          v27 %= v10;
      }
      else
      {
        v27 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v27) = v17;
    }
  }
  i = v17;
  ++*v7;
  return i;
}

void sub_20B9A5FA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  uint64_t v10;
  void **v11;

  sub_20B828B94(v10, v11);
  _Unwind_Resume(a1);
}

void sub_20B9A5FD8(void **a1, __n128 *a2, unint64_t a3, __n128 *a4, uint64_t a5)
{
  void **v6;
  __n128 *v7;
  unint64_t v8;
  __n128 v9;
  unint64_t v10;
  unint64_t v11;
  __n128 *v14;
  unint64_t v15;
  __n128 *v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  void **v20;
  _QWORD *v21;
  __int128 v22;
  uint64_t v23;
  char *v24;
  void **v25;
  uint64_t v26;
  __int128 v27;
  __n128 *v28;
  __n128 *v29;
  __n128 *v30;
  __n128 *v31;
  char v32;
  int v33;
  __n128 v34;
  __n128 v35;
  unint64_t v36;
  void **v37;
  __n128 *v38;
  __n128 v39;
  unint64_t v40;
  void **v41;
  __n128 *v42;
  __n128 v43;
  unint64_t v44;
  __int128 v45;
  uint64_t v46;
  void *v47;

  if (a3 >= 2)
  {
    v6 = a1;
    if (a3 == 2)
    {
      v7 = a2 - 2;
      if ((sub_20B871BA8((__n128 *)a2[-2].n128_u64, a1) & 0x80) != 0)
      {
        v8 = (unint64_t)v6[2];
        v9 = *(__n128 *)v6;
        v10 = a2[-1].n128_u64[0];
        *(__n128 *)v6 = *v7;
        v6[2] = (void *)v10;
        *v7 = v9;
        a2[-1].n128_u64[0] = v8;
        v11 = (unint64_t)v6[3];
        v6[3] = (void *)a2[-1].n128_u64[1];
        a2[-1].n128_u64[1] = v11;
      }
    }
    else if ((uint64_t)a3 <= 0)
    {
      if (a1 != (void **)a2)
      {
        v18 = a1 + 4;
        if (a1 + 4 != (void **)a2)
        {
          v19 = 0;
          v20 = a1;
          do
          {
            v21 = v18;
            if ((sub_20B871BA8(v18, v20) & 0x80) != 0)
            {
              v22 = *(_OWORD *)v21;
              v46 = v21[2];
              v45 = v22;
              v21[1] = 0;
              v21[2] = 0;
              *v21 = 0;
              v47 = v20[7];
              v23 = v19;
              while (1)
              {
                v24 = (char *)v6 + v23;
                v25 = (void **)((char *)v6 + v23 + 32);
                if (*((char *)v6 + v23 + 55) < 0)
                  operator delete(*v25);
                *(_OWORD *)v25 = *(_OWORD *)v24;
                *(void **)((char *)v6 + v23 + 48) = (void *)*((_QWORD *)v24 + 2);
                v24[23] = 0;
                *v24 = 0;
                *((_QWORD *)v24 + 7) = *((_QWORD *)v24 + 3);
                if (!v23)
                  break;
                v23 -= 32;
                if ((sub_20B871BA8(&v45, (void **)((char *)v6 + v23)) & 0x80) == 0)
                {
                  v26 = (uint64_t)v6 + v23 + 32;
                  goto LABEL_19;
                }
              }
              v26 = (uint64_t)v6;
LABEL_19:
              if (*(char *)(v26 + 23) < 0)
                operator delete(*(void **)v26);
              v27 = v45;
              *(_QWORD *)(v26 + 16) = v46;
              *(_OWORD *)v26 = v27;
              *(_QWORD *)(v26 + 24) = v47;
            }
            v18 = v21 + 4;
            v19 += 32;
            v20 = (void **)v21;
          }
          while (v21 + 4 != (_QWORD *)a2);
        }
      }
    }
    else
    {
      v14 = a4;
      v15 = a3 >> 1;
      v16 = (__n128 *)&a1[4 * (a3 >> 1)];
      v17 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        sub_20B9A63A8((__n128 *)a1, v16, v17, a4);
        v28 = &v14[2 * v15];
        sub_20B9A63A8((__n128 *)&v6[4 * (a3 >> 1)], a2, a3 - (a3 >> 1), v28);
        v29 = &v14[2 * a3];
        v30 = v28;
        v31 = v14;
        while (v30 != v29)
        {
          v32 = sub_20B871BA8(v30, (void **)v31);
          v33 = *((char *)v6 + 23);
          if (v32 < 0)
          {
            if (v33 < 0)
              operator delete(*v6);
            v35 = *v30;
            v6[2] = (void *)v30[1].n128_u64[0];
            *(__n128 *)v6 = v35;
            v30[1].n128_u8[7] = 0;
            v30->n128_u8[0] = 0;
            v6[3] = (void *)v30[1].n128_u64[1];
            v30 += 2;
          }
          else
          {
            if (v33 < 0)
              operator delete(*v6);
            v34 = *v31;
            v6[2] = (void *)v31[1].n128_u64[0];
            *(__n128 *)v6 = v34;
            v31[1].n128_u8[7] = 0;
            v31->n128_u8[0] = 0;
            v6[3] = (void *)v31[1].n128_u64[1];
            v31 += 2;
          }
          v6 += 4;
          if (v31 == v28)
          {
            if (v30 != v29)
            {
              v36 = 0;
              do
              {
                v37 = &v6[v36 / 8];
                if (SHIBYTE(v6[v36 / 8 + 2]) < 0)
                  operator delete(*v37);
                v38 = &v30[v36 / 0x10];
                v39 = v30[v36 / 0x10];
                v37[2] = (void *)v30[v36 / 0x10 + 1].n128_u64[0];
                *(__n128 *)v37 = v39;
                v38[1].n128_u8[7] = 0;
                v38->n128_u8[0] = 0;
                v37[3] = (void *)v30[v36 / 0x10 + 1].n128_u64[1];
                v36 += 32;
              }
              while (&v38[2] != v29);
            }
            goto LABEL_45;
          }
        }
        if (v31 != v28)
        {
          v40 = 0;
          do
          {
            v41 = &v6[v40 / 8];
            if (SHIBYTE(v6[v40 / 8 + 2]) < 0)
              operator delete(*v41);
            v42 = &v31[v40 / 0x10];
            v43 = v31[v40 / 0x10];
            v41[2] = (void *)v31[v40 / 0x10 + 1].n128_u64[0];
            *(__n128 *)v41 = v43;
            v42[1].n128_u8[7] = 0;
            v42->n128_u8[0] = 0;
            v41[3] = (void *)v31[v40 / 0x10 + 1].n128_u64[1];
            v40 += 32;
          }
          while (&v42[2] != v28);
        }
LABEL_45:
        if (v14)
        {
          v44 = a3;
          do
          {
            if (v14[1].n128_i8[7] < 0)
              operator delete((void *)v14->n128_u64[0]);
            v14 += 2;
            --v44;
          }
          while (v44);
        }
      }
      else
      {
        sub_20B9A5FD8(a1, v16, v17, a4, a5);
        sub_20B9A5FD8(&v6[4 * (a3 >> 1)], a2, a3 - (a3 >> 1), v14, a5);
        sub_20B9A6750(v6, &v6[4 * (a3 >> 1)], (void **)a2, a3 >> 1, a3 - (a3 >> 1), (void **)v14, a5);
      }
    }
  }
}

void sub_20B9A6374(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v4;

  if (v1)
  {
    v4 = 0;
    do
    {
      if (*(char *)(v1 + 23) < 0)
        operator delete(*(void **)v1);
      ++v4;
      v1 += 32;
    }
    while (v4 < v2);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_20B9A63A8(__n128 *a1, __n128 *a2, unint64_t a3, __n128 *a4)
{
  __n128 *v4;
  __n128 *v7;
  __n128 result;
  __n128 *v9;
  char v10;
  __n128 *v11;
  __n128 v12;
  unint64_t *v13;
  __n128 *v14;
  uint64_t v15;
  __n128 *v16;
  __n128 *v17;
  __n128 *v18;
  unint64_t v19;
  __n128 *v20;
  uint64_t v21;
  char *v22;
  __n128 *v23;
  __n128 *v24;
  __n128 *v25;
  uint64_t v26;
  __n128 *v27;
  __n128 *v28;
  __n128 v29;
  uint64_t v30;
  __n128 *v31;
  __n128 *v32;

  if (a3)
  {
    v4 = a4;
    v7 = a1;
    if (a3 == 2)
    {
      v9 = a2 - 2;
      v10 = sub_20B871BA8((__n128 *)a2[-2].n128_u64, (void **)a1);
      v11 = v4 + 2;
      if (v10 < 0)
      {
        v29 = *v9;
        v4[1].n128_u64[0] = a2[-1].n128_u64[0];
        *v4 = v29;
        a2[-2].n128_u64[1] = 0;
        a2[-1].n128_u64[0] = 0;
        v9->n128_u64[0] = 0;
        v4[1].n128_u64[1] = a2[-1].n128_u64[1];
        result = *v7;
        v4[3].n128_u64[0] = v7[1].n128_u64[0];
        *v11 = result;
        v7->n128_u64[1] = 0;
        v7[1].n128_u64[0] = 0;
        v7->n128_u64[0] = 0;
        v13 = &v7[1].n128_u64[1];
      }
      else
      {
        v12 = *v7;
        v4[1].n128_u64[0] = v7[1].n128_u64[0];
        *v4 = v12;
        v7->n128_u64[1] = 0;
        v7[1].n128_u64[0] = 0;
        v7->n128_u64[0] = 0;
        v4[1].n128_u64[1] = v7[1].n128_u64[1];
        result = *v9;
        v4[3].n128_u64[0] = a2[-1].n128_u64[0];
        *v11 = result;
        a2[-2].n128_u64[1] = 0;
        a2[-1].n128_u64[0] = 0;
        v9->n128_u64[0] = 0;
        v13 = &a2[-1].n128_u64[1];
      }
      v4[3].n128_u64[1] = *v13;
    }
    else if (a3 == 1)
    {
      result = *a1;
      a4[1].n128_u64[0] = a1[1].n128_u64[0];
      *a4 = result;
      a1->n128_u64[1] = 0;
      a1[1].n128_u64[0] = 0;
      a1->n128_u64[0] = 0;
      a4[1].n128_u64[1] = a1[1].n128_u64[1];
    }
    else if ((uint64_t)a3 > 8)
    {
      v23 = &a1[2 * (a3 >> 1)];
      sub_20B9A5FD8(a1, v23, a3 >> 1, a4, a3 >> 1);
      sub_20B9A5FD8(&v7[2 * (a3 >> 1)], a2, a3 - (a3 >> 1), &v4[2 * (a3 >> 1)], a3 - (a3 >> 1));
      v24 = &v7[2 * (a3 >> 1)];
      while (v24 != a2)
      {
        if ((sub_20B871BA8(v24, (void **)v7) & 0x80) != 0)
        {
          result = *v24;
          v4[1].n128_u64[0] = v24[1].n128_u64[0];
          *v4 = result;
          v24->n128_u64[1] = 0;
          v24[1].n128_u64[0] = 0;
          v24->n128_u64[0] = 0;
          v25 = v24;
          v24 += 2;
        }
        else
        {
          result = *v7;
          v4[1].n128_u64[0] = v7[1].n128_u64[0];
          *v4 = result;
          v7->n128_u64[1] = 0;
          v7[1].n128_u64[0] = 0;
          v7->n128_u64[0] = 0;
          v25 = v7;
          v7 += 2;
        }
        v4[1].n128_u64[1] = v25[1].n128_u64[1];
        v4 += 2;
        if (v7 == v23)
        {
          if (v24 != a2)
          {
            v26 = 0;
            do
            {
              v27 = &v24[v26];
              v28 = &v4[v26];
              result = v24[v26];
              v28[1].n128_u64[0] = v24[v26 + 1].n128_u64[0];
              *v28 = result;
              v27->n128_u64[1] = 0;
              v27[1].n128_u64[0] = 0;
              v27->n128_u64[0] = 0;
              v28[1].n128_u64[1] = v24[v26 + 1].n128_u64[1];
              v26 += 2;
            }
            while (&v27[2] != a2);
          }
          return result;
        }
      }
      if (v7 != v23)
      {
        v30 = 0;
        do
        {
          v31 = &v4[v30];
          v32 = &v7[v30];
          result = v7[v30];
          v31[1].n128_u64[0] = v7[v30 + 1].n128_u64[0];
          *v31 = result;
          v32->n128_u64[1] = 0;
          v32[1].n128_u64[0] = 0;
          v32->n128_u64[0] = 0;
          v31[1].n128_u64[1] = v7[v30 + 1].n128_u64[1];
          v30 += 2;
        }
        while (&v32[2] != v23);
      }
    }
    else if (a1 != a2)
    {
      result = *a1;
      a4[1].n128_u64[0] = a1[1].n128_u64[0];
      *a4 = result;
      a1->n128_u64[1] = 0;
      a1[1].n128_u64[0] = 0;
      a1->n128_u64[0] = 0;
      a4[1].n128_u64[1] = a1[1].n128_u64[1];
      v14 = a1 + 2;
      if (&a1[2] != a2)
      {
        v15 = 0;
        v16 = a4;
        do
        {
          v17 = v14;
          v18 = v16 + 2;
          if ((sub_20B871BA8(v14, (void **)v16) & 0x80) != 0)
          {
            *v18 = *v16;
            v19 = v16[1].n128_u64[1];
            v16[3].n128_u64[0] = v16[1].n128_u64[0];
            v16->n128_u64[1] = 0;
            v16[1].n128_u64[0] = 0;
            v16->n128_u64[0] = 0;
            v16[3].n128_u64[1] = v19;
            v20 = v4;
            if (v16 != v4)
            {
              v21 = v15;
              while (1)
              {
                v20 = (__n128 *)((char *)v4 + v21);
                if ((sub_20B871BA8(v17, (void **)((char *)&v4[-2] + v21)) & 0x80) == 0)
                  break;
                if (v20[1].n128_i8[7] < 0)
                  operator delete((void *)v20->n128_u64[0]);
                v22 = (char *)v4 + v21;
                *v20 = *(__n128 *)((char *)v4 + v21 - 32);
                v20[1].n128_u64[0] = *(unint64_t *)((char *)v4[-1].n128_u64 + v21);
                *(v22 - 9) = 0;
                v20[-2].n128_u8[0] = 0;
                *((_QWORD *)v22 + 3) = *(unint64_t *)((char *)&v4->n128_u64[-1] + v21);
                v21 -= 32;
                if (!v21)
                {
                  v20 = v4;
                  break;
                }
              }
            }
            if (v20[1].n128_i8[7] < 0)
              operator delete((void *)v20->n128_u64[0]);
            result = *v17;
            v20[1].n128_u64[0] = v17[1].n128_u64[0];
            *v20 = result;
            v7[3].n128_u8[7] = 0;
            v17->n128_u8[0] = 0;
            v20[1].n128_u64[1] = v7[3].n128_u64[1];
          }
          else
          {
            result = *v17;
            v16[3].n128_u64[0] = v17[1].n128_u64[0];
            *v18 = result;
            v17->n128_u64[1] = 0;
            v17[1].n128_u64[0] = 0;
            v17->n128_u64[0] = 0;
            v16[3].n128_u64[1] = v7[3].n128_u64[1];
          }
          v14 = v17 + 2;
          v15 += 32;
          v16 += 2;
          v7 = v17;
        }
        while (&v17[2] != a2);
      }
    }
  }
  return result;
}

void sub_20B9A6750(void **a1, void **a2, void **a3, uint64_t a4, uint64_t a5, void **a6, uint64_t a7)
{
  uint64_t v8;
  void **v13;
  uint64_t v14;
  void **v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  void **v21;
  unint64_t v22;
  uint64_t v23;
  void **v24;
  unint64_t v25;
  void **v26;
  int v27;
  void **v28;
  void **v29;
  void **v30;
  __int128 v31;
  void *v32;
  void **v33;
  __int128 v34;
  void *v35;
  uint64_t v36;
  void **v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  __int128 *v43;
  void **v44;
  __int128 v45;
  void **v46;
  int v47;
  void **v48;
  int v49;
  void **v50;
  void **v51;
  void **v52;
  __int128 v53;
  unint64_t v54;
  __int128 *v55;
  void **v56;
  __int128 v57;
  __int128 *v58;
  uint64_t v59;
  void **v60;
  char v61;
  int v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  __int128 v66;
  void *v67;
  uint64_t v68;
  void **v69;
  __int128 *v70;
  __int128 v71;
  unint64_t v72;
  void **v73;
  __int128 *v74;
  __int128 v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void **v80;
  void **v81;
  void **v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  void *v87;
  void *v88;
  void *v89;

  if (a5)
  {
    v8 = a5;
    v83 = a7;
    while (a4 > a7 && v8 > a7)
    {
      if (!a4)
        return;
      v13 = 0;
      v14 = -a4;
      while (1)
      {
        v15 = (void **)((char *)v13 + (_QWORD)a1);
        if ((sub_20B871BA8(a2, (void **)((char *)v13 + (_QWORD)a1)) & 0x80) != 0)
          break;
        v13 += 4;
        if (__CFADD__(v14++, 1))
          return;
      }
      v17 = -v14;
      v79 = v8;
      v80 = a6;
      v82 = a3;
      if (-v14 >= v8)
      {
        if (v14 == -1)
        {
          v65 = (uint64_t)v13 + (_QWORD)a1;
          v89 = *(void **)((char *)v13 + (_QWORD)a1 + 16);
          v86 = *(_OWORD *)((char *)v13 + (_QWORD)a1);
          v66 = *(_OWORD *)a2;
          *(_QWORD *)(v65 + 16) = a2[2];
          *(_OWORD *)v65 = v66;
          *(_OWORD *)a2 = v86;
          a2[2] = v89;
          v67 = *(void **)((char *)v13 + (_QWORD)a1 + 24);
          *(_QWORD *)(v65 + 24) = a2[3];
          a2[3] = v67;
          return;
        }
        if (v14 > 0)
          v17 = 1 - v14;
        v23 = v17 >> 1;
        v21 = (void **)((char *)&a1[4 * (v17 >> 1)] + (_QWORD)v13);
        v24 = a3;
        v20 = a2;
        if (a2 != v24)
        {
          v78 = v23;
          v25 = ((char *)v82 - (char *)a2) >> 5;
          v20 = a2;
          do
          {
            v26 = &v20[4 * (v25 >> 1)];
            v27 = (char)sub_20B871BA8(v26, v21);
            if (v27 >= 0)
              v25 >>= 1;
            else
              v25 += ~(v25 >> 1);
            if (v27 < 0)
              v20 = v26 + 4;
          }
          while (v25);
          v23 = v78;
        }
        v19 = ((char *)v20 - (char *)a2) >> 5;
      }
      else
      {
        if (v8 >= 0)
          v18 = v8;
        else
          v18 = v8 + 1;
        v19 = v18 >> 1;
        v20 = &a2[4 * (v18 >> 1)];
        v21 = a2;
        if ((void **)((char *)a2 - (char *)a1) != v13)
        {
          v77 = v18 >> 1;
          v22 = ((char *)a2 - (char *)a1 - (uint64_t)v13) >> 5;
          v21 = (void **)((char *)v13 + (_QWORD)a1);
          do
          {
            if ((sub_20B871BA8(v20, &v21[4 * (v22 >> 1)]) & 0x80u) != 0)
            {
              v22 >>= 1;
            }
            else
            {
              v21 += 4 * (v22 >> 1) + 4;
              v22 += ~(v22 >> 1);
            }
          }
          while (v22);
          v19 = v77;
        }
        v23 = ((char *)v21 - (char *)a1 - (uint64_t)v13) >> 5;
      }
      if (v21 == a2)
      {
        v28 = v20;
      }
      else if (v20 == a2)
      {
        v28 = v21;
      }
      else
      {
        v28 = v21 + 4;
        v29 = v21 + 4;
        v30 = a2;
        while (1)
        {
          v87 = *(v29 - 2);
          v84 = *((_OWORD *)v29 - 2);
          v31 = *(_OWORD *)v30;
          *(v29 - 2) = v30[2];
          *((_OWORD *)v29 - 2) = v31;
          *(_OWORD *)v30 = v84;
          v30[2] = v87;
          v32 = *(v29 - 1);
          *(v29 - 1) = v30[3];
          v30[3] = v32;
          v30 += 4;
          if (v30 == v20)
            break;
          if (v29 == a2)
            a2 = v30;
          v29 += 4;
          v28 += 4;
        }
        if (v29 != a2)
        {
          v33 = a2;
          do
          {
            while (1)
            {
              v88 = v29[2];
              v85 = *(_OWORD *)v29;
              v34 = *(_OWORD *)v33;
              v29[2] = v33[2];
              *(_OWORD *)v29 = v34;
              v33[2] = v88;
              *(_OWORD *)v33 = v85;
              v35 = v29[3];
              v29[3] = v33[3];
              v33[3] = v35;
              v29 += 4;
              v33 += 4;
              if (v33 == v20)
                break;
              if (v29 == a2)
                a2 = v33;
            }
            v33 = a2;
          }
          while (v29 != a2);
        }
      }
      a4 = -v23 - v14;
      v36 = v79 - v19;
      if (v23 + v19 >= v79 - (v23 + v19) - v14)
      {
        v38 = v23;
        v39 = -v23 - v14;
        v40 = v19;
        sub_20B9A6750(v28, v20, v82, v39, v79 - v19, v80, v83);
        a2 = v21;
        a6 = v80;
        v36 = v40;
        a4 = v38;
        a3 = v28;
      }
      else
      {
        v37 = v21;
        a6 = v80;
        sub_20B9A6750((char *)v13 + (_QWORD)a1, v37, v28, v23, v19, v80, v83);
        v15 = v28;
        a2 = v20;
        a3 = v82;
      }
      v8 = v36;
      a1 = v15;
      a7 = v83;
      if (!v36)
        return;
    }
    if (a4 <= v8)
    {
      if (a1 == a2)
        return;
      v54 = 0;
      v42 = 0;
      do
      {
        v55 = (__int128 *)&a6[v54];
        v56 = &a1[v54];
        v57 = *(_OWORD *)&a1[v54];
        *((_QWORD *)v55 + 2) = a1[v54 + 2];
        *v55 = v57;
        v56[1] = 0;
        v56[2] = 0;
        *v56 = 0;
        *((_QWORD *)v55 + 3) = a1[v54 + 3];
        ++v42;
        v54 += 4;
      }
      while (v56 + 4 != a2);
      if (v54 * 8)
      {
        v58 = (__int128 *)&a6[v54];
        v59 = (uint64_t)&a6[v54 - 4];
        v60 = a6;
        while (a2 != a3)
        {
          v61 = sub_20B871BA8(a2, v60);
          v62 = *((char *)a1 + 23);
          if (v61 < 0)
          {
            if (v62 < 0)
              operator delete(*a1);
            v64 = *(_OWORD *)a2;
            a1[2] = a2[2];
            *(_OWORD *)a1 = v64;
            *((_BYTE *)a2 + 23) = 0;
            *(_BYTE *)a2 = 0;
            a1[3] = a2[3];
            a2 += 4;
          }
          else
          {
            if (v62 < 0)
              operator delete(*a1);
            v63 = *(_OWORD *)v60;
            a1[2] = v60[2];
            *(_OWORD *)a1 = v63;
            *((_BYTE *)v60 + 23) = 0;
            *(_BYTE *)v60 = 0;
            a1[3] = v60[3];
            v60 += 4;
          }
          a1 += 4;
          if (v58 == (__int128 *)v60)
            goto LABEL_105;
        }
        if (v58 != (__int128 *)v60)
        {
          v72 = 0;
          do
          {
            v73 = &a1[v72];
            if (SHIBYTE(a1[v72 + 2]) < 0)
              operator delete(*v73);
            v74 = (__int128 *)&v60[v72];
            v75 = *(_OWORD *)&v60[v72];
            v73[2] = v60[v72 + 2];
            *(_OWORD *)v73 = v75;
            *((_BYTE *)v74 + 23) = 0;
            *(_BYTE *)v74 = 0;
            v73[3] = v60[v72 + 3];
            v72 += 4;
          }
          while ((__int128 *)v59 != v74);
        }
      }
    }
    else
    {
      if (a3 == a2)
        return;
      v41 = 0;
      v42 = 0;
      do
      {
        v43 = (__int128 *)&a6[v41];
        v44 = &a2[v41];
        v45 = *(_OWORD *)&a2[v41];
        *((_QWORD *)v43 + 2) = a2[v41 + 2];
        *v43 = v45;
        v44[1] = 0;
        v44[2] = 0;
        *v44 = 0;
        *((_QWORD *)v43 + 3) = a2[v41 + 3];
        ++v42;
        v41 += 4;
      }
      while (v44 + 4 != a3);
      if (v41 * 8)
      {
        v46 = &a6[v41];
        v81 = a6;
        while (a2 != a1)
        {
          v47 = (char)sub_20B871BA8(v46 - 4, a2 - 4);
          v48 = a3 - 4;
          v49 = *((char *)a3 - 9);
          if (v47 >= 0)
            v50 = v46;
          else
            v50 = a2;
          v51 = a3;
          if (v47 >= 0)
            v52 = v46 - 4;
          else
            v52 = a2 - 4;
          if (v47 >= 0)
            v46 -= 4;
          else
            a2 -= 4;
          if (v49 < 0)
            operator delete(*v48);
          v53 = *(_OWORD *)v52;
          v48[2] = v52[2];
          *(_OWORD *)v48 = v53;
          *((_BYTE *)v50 - 9) = 0;
          *(_BYTE *)v52 = 0;
          *(v51 - 1) = *(v50 - 1);
          a3 = v48;
          a6 = v81;
          if (v46 == v81)
            goto LABEL_105;
        }
        if (v46 != a6)
        {
          v68 = 0;
          do
          {
            v69 = &a3[v68 - 4];
            if (*((char *)&a3[v68 - 1] - 1) < 0)
              operator delete(*v69);
            v70 = (__int128 *)&v46[v68 - 4];
            v71 = *v70;
            a3[v68 - 2] = v46[v68 - 2];
            *(_OWORD *)v69 = v71;
            *((_BYTE *)&v46[v68 - 1] - 1) = 0;
            *(_BYTE *)v70 = 0;
            a3[v68 - 1] = v46[v68 - 1];
            v68 -= 4;
          }
          while (&v46[v68] != a6);
        }
      }
    }
LABEL_105:
    if (a6)
    {
      v76 = 0;
      do
      {
        if (*((char *)a6 + 23) < 0)
          operator delete(*a6);
        ++v76;
        a6 += 4;
      }
      while (v76 < v42);
    }
  }
}

void sub_20B9A6D8C(uint64_t a1, __n128 *a2, unint64_t a3, __n128 *a4, uint64_t a5)
{
  __n128 *v7;
  unint64_t v8;
  __n128 v9;
  unint64_t v10;
  unint64_t v11;
  __n128 *v13;
  unint64_t v14;
  __n128 *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;
  uint64_t v25;
  __int128 v26;
  __n128 *v27;
  _DWORD *v28;
  __n128 *v29;
  __n128 *v30;
  __n128 *v31;
  void **v32;
  char v33;
  int v34;
  __n128 v35;
  __n128 v36;
  unint64_t v37;
  void **v38;
  __n128 *v39;
  __n128 v40;
  unint64_t v41;
  void **v42;
  __n128 *v43;
  __n128 v44;
  __int128 v45;
  uint64_t v46;
  int v47;

  if (a3 >= 2)
  {
    if (a3 == 2)
    {
      v7 = a2 - 2;
      if ((sub_20B871BA8((__n128 *)a2[-2].n128_u64, (void **)a1) & 0x80) != 0)
      {
        v8 = *(_QWORD *)(a1 + 16);
        v9 = *(__n128 *)a1;
        v10 = a2[-1].n128_u64[0];
        *(__n128 *)a1 = *v7;
        *(_QWORD *)(a1 + 16) = v10;
        *v7 = v9;
        a2[-1].n128_u64[0] = v8;
        LODWORD(v8) = *(_DWORD *)(a1 + 24);
        *(_DWORD *)(a1 + 24) = a2[-1].n128_u32[2];
        a2[-1].n128_u32[2] = v8;
      }
    }
    else
    {
      v11 = a3;
      if ((uint64_t)a3 <= 0)
      {
        if ((__n128 *)a1 != a2)
        {
          v17 = (_QWORD *)(a1 + 32);
          if ((__n128 *)(a1 + 32) != a2)
          {
            v18 = 0;
            v19 = (_QWORD *)a1;
            do
            {
              v20 = v17;
              if ((sub_20B871BA8(v17, (void **)v19) & 0x80) != 0)
              {
                v21 = *(_OWORD *)v20;
                v46 = v20[2];
                v45 = v21;
                v20[1] = 0;
                v20[2] = 0;
                *v20 = 0;
                v47 = *((_DWORD *)v19 + 14);
                v22 = v18;
                while (1)
                {
                  v23 = a1 + v22;
                  v24 = (void **)(a1 + v22 + 32);
                  if (*(char *)(a1 + v22 + 55) < 0)
                    operator delete(*v24);
                  *(_OWORD *)v24 = *(_OWORD *)v23;
                  *(_QWORD *)(a1 + v22 + 48) = *(_QWORD *)(v23 + 16);
                  *(_BYTE *)(v23 + 23) = 0;
                  *(_BYTE *)v23 = 0;
                  *(_DWORD *)(v23 + 56) = *(_DWORD *)(v23 + 24);
                  if (!v22)
                    break;
                  v22 -= 32;
                  if ((sub_20B871BA8(&v45, (void **)(v22 + a1)) & 0x80) == 0)
                  {
                    v25 = a1 + v22 + 32;
                    goto LABEL_19;
                  }
                }
                v25 = a1;
LABEL_19:
                if (*(char *)(v25 + 23) < 0)
                  operator delete(*(void **)v25);
                v26 = v45;
                *(_QWORD *)(v25 + 16) = v46;
                *(_OWORD *)v25 = v26;
                *(_DWORD *)(v25 + 24) = v47;
              }
              v17 = v20 + 4;
              v18 += 32;
              v19 = v20;
            }
            while (v20 + 4 != (_QWORD *)a2);
          }
        }
      }
      else
      {
        v13 = a4;
        v14 = a3 >> 1;
        v15 = (__n128 *)(a1 + 32 * (a3 >> 1));
        v16 = a3 >> 1;
        if ((uint64_t)v11 <= a5)
        {
          sub_20B9A716C((__n128 *)a1, v15, v16, a4);
          v27 = &v13[2 * v14];
          sub_20B9A716C((__n128 *)(a1 + 32 * (v11 >> 1)), a2, v11 - (v11 >> 1), v27);
          v28 = (_DWORD *)(a1 + 24);
          v29 = v27;
          v30 = v13;
          v31 = &v13[2 * v11];
          while (v29 != v31)
          {
            v32 = (void **)(v28 - 6);
            v33 = sub_20B871BA8(v29, (void **)v30);
            v34 = *((char *)v28 - 1);
            if (v33 < 0)
            {
              if (v34 < 0)
                operator delete(*v32);
              v36 = *v29;
              *((_QWORD *)v28 - 1) = v29[1].n128_u64[0];
              *(__n128 *)v32 = v36;
              v29[1].n128_u8[7] = 0;
              v29->n128_u8[0] = 0;
              *v28 = v29[1].n128_u32[2];
              v29 += 2;
            }
            else
            {
              if (v34 < 0)
                operator delete(*v32);
              v35 = *v30;
              *((_QWORD *)v28 - 1) = v30[1].n128_u64[0];
              *(__n128 *)v32 = v35;
              v30[1].n128_u8[7] = 0;
              v30->n128_u8[0] = 0;
              *v28 = v30[1].n128_u32[2];
              v30 += 2;
            }
            v28 += 8;
            if (v30 == v27)
            {
              if (v29 != v31)
              {
                v37 = 0;
                do
                {
                  v38 = (void **)&v28[v37 / 4 - 6];
                  if (SHIBYTE(v28[v37 / 4 - 1]) < 0)
                    operator delete(*v38);
                  v39 = &v29[v37 / 0x10];
                  v40 = v29[v37 / 0x10];
                  *(_QWORD *)&v28[v37 / 4 - 2] = v29[v37 / 0x10 + 1].n128_u64[0];
                  *(__n128 *)v38 = v40;
                  v39[1].n128_u8[7] = 0;
                  v39->n128_u8[0] = 0;
                  v28[v37 / 4] = v29[v37 / 0x10 + 1].n128_u32[2];
                  v37 += 32;
                }
                while (&v39[2] != v31);
              }
              goto LABEL_45;
            }
          }
          if (v30 != v27)
          {
            v41 = 0;
            do
            {
              v42 = (void **)&v28[v41 / 4 - 6];
              if (SHIBYTE(v28[v41 / 4 - 1]) < 0)
                operator delete(*v42);
              v43 = &v30[v41 / 0x10];
              v44 = v30[v41 / 0x10];
              *(_QWORD *)&v28[v41 / 4 - 2] = v30[v41 / 0x10 + 1].n128_u64[0];
              *(__n128 *)v42 = v44;
              v43[1].n128_u8[7] = 0;
              v43->n128_u8[0] = 0;
              v28[v41 / 4] = v30[v41 / 0x10 + 1].n128_u32[2];
              v41 += 32;
            }
            while (&v43[2] != v27);
          }
LABEL_45:
          if (v13)
          {
            do
            {
              if (v13[1].n128_i8[7] < 0)
                operator delete((void *)v13->n128_u64[0]);
              v13 += 2;
              --v11;
            }
            while (v11);
          }
        }
        else
        {
          sub_20B9A6D8C(a1, v15, v16, a4, a5);
          sub_20B9A6D8C(a1 + 32 * (v11 >> 1), a2, v11 - (v11 >> 1), v13, a5);
          sub_20B9A7518((void **)a1, (void **)(a1 + 32 * (v11 >> 1)), (void **)a2, v11 >> 1, v11 - (v11 >> 1), (void **)v13, a5);
        }
      }
    }
  }
}

void sub_20B9A7138(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v4;

  if (v1)
  {
    v4 = 0;
    do
    {
      if (*(char *)(v1 + 23) < 0)
        operator delete(*(void **)v1);
      ++v4;
      v1 += 32;
    }
    while (v4 < v2);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_20B9A716C(__n128 *a1, __n128 *a2, unint64_t a3, __n128 *a4)
{
  __n128 *v4;
  __n128 *v7;
  __n128 result;
  __n128 *v9;
  char v10;
  __n128 *v11;
  __n128 v12;
  unsigned __int32 *v13;
  __n128 *v14;
  uint64_t v15;
  __n128 *v16;
  __n128 *v17;
  __n128 *v18;
  __n128 *v19;
  uint64_t v20;
  char *v21;
  __n128 *v22;
  __n128 *v23;
  __n128 *v24;
  uint64_t v25;
  __n128 *v26;
  __n128 *v27;
  __n128 v28;
  uint64_t v29;
  __n128 *v30;
  __n128 *v31;

  if (a3)
  {
    v4 = a4;
    v7 = a1;
    if (a3 == 2)
    {
      v9 = a2 - 2;
      v10 = sub_20B871BA8((__n128 *)a2[-2].n128_u64, (void **)a1);
      v11 = v4 + 2;
      if (v10 < 0)
      {
        v28 = *v9;
        v4[1].n128_u64[0] = a2[-1].n128_u64[0];
        *v4 = v28;
        a2[-2].n128_u64[1] = 0;
        a2[-1].n128_u64[0] = 0;
        v9->n128_u64[0] = 0;
        v4[1].n128_u32[2] = a2[-1].n128_u32[2];
        result = *v7;
        v4[3].n128_u64[0] = v7[1].n128_u64[0];
        *v11 = result;
        v7->n128_u64[1] = 0;
        v7[1].n128_u64[0] = 0;
        v7->n128_u64[0] = 0;
        v13 = &v7[1].n128_u32[2];
      }
      else
      {
        v12 = *v7;
        v4[1].n128_u64[0] = v7[1].n128_u64[0];
        *v4 = v12;
        v7->n128_u64[1] = 0;
        v7[1].n128_u64[0] = 0;
        v7->n128_u64[0] = 0;
        v4[1].n128_u32[2] = v7[1].n128_u32[2];
        result = *v9;
        v4[3].n128_u64[0] = a2[-1].n128_u64[0];
        *v11 = result;
        a2[-2].n128_u64[1] = 0;
        a2[-1].n128_u64[0] = 0;
        v9->n128_u64[0] = 0;
        v13 = &a2[-1].n128_u32[2];
      }
      v4[3].n128_u32[2] = *v13;
    }
    else if (a3 == 1)
    {
      result = *a1;
      a4[1].n128_u64[0] = a1[1].n128_u64[0];
      *a4 = result;
      a1->n128_u64[1] = 0;
      a1[1].n128_u64[0] = 0;
      a1->n128_u64[0] = 0;
      a4[1].n128_u32[2] = a1[1].n128_u32[2];
    }
    else if ((uint64_t)a3 > 8)
    {
      v22 = &a1[2 * (a3 >> 1)];
      sub_20B9A6D8C(a1, v22, a3 >> 1, a4, a3 >> 1);
      sub_20B9A6D8C(&v7[2 * (a3 >> 1)], a2, a3 - (a3 >> 1), &v4[2 * (a3 >> 1)], a3 - (a3 >> 1));
      v23 = &v7[2 * (a3 >> 1)];
      while (v23 != a2)
      {
        if ((sub_20B871BA8(v23, (void **)v7) & 0x80) != 0)
        {
          result = *v23;
          v4[1].n128_u64[0] = v23[1].n128_u64[0];
          *v4 = result;
          v23->n128_u64[1] = 0;
          v23[1].n128_u64[0] = 0;
          v23->n128_u64[0] = 0;
          v24 = v23;
          v23 += 2;
        }
        else
        {
          result = *v7;
          v4[1].n128_u64[0] = v7[1].n128_u64[0];
          *v4 = result;
          v7->n128_u64[1] = 0;
          v7[1].n128_u64[0] = 0;
          v7->n128_u64[0] = 0;
          v24 = v7;
          v7 += 2;
        }
        v4[1].n128_u32[2] = v24[1].n128_u32[2];
        v4 += 2;
        if (v7 == v22)
        {
          if (v23 != a2)
          {
            v25 = 0;
            do
            {
              v26 = &v23[v25];
              v27 = &v4[v25];
              result = v23[v25];
              v27[1].n128_u64[0] = v23[v25 + 1].n128_u64[0];
              *v27 = result;
              v26->n128_u64[1] = 0;
              v26[1].n128_u64[0] = 0;
              v26->n128_u64[0] = 0;
              v27[1].n128_u32[2] = v23[v25 + 1].n128_u32[2];
              v25 += 2;
            }
            while (&v26[2] != a2);
          }
          return result;
        }
      }
      if (v7 != v22)
      {
        v29 = 0;
        do
        {
          v30 = &v4[v29];
          v31 = &v7[v29];
          result = v7[v29];
          v30[1].n128_u64[0] = v7[v29 + 1].n128_u64[0];
          *v30 = result;
          v31->n128_u64[1] = 0;
          v31[1].n128_u64[0] = 0;
          v31->n128_u64[0] = 0;
          v30[1].n128_u32[2] = v7[v29 + 1].n128_u32[2];
          v29 += 2;
        }
        while (&v31[2] != v22);
      }
    }
    else if (a1 != a2)
    {
      result = *a1;
      a4[1].n128_u64[0] = a1[1].n128_u64[0];
      *a4 = result;
      a1->n128_u64[1] = 0;
      a1[1].n128_u64[0] = 0;
      a1->n128_u64[0] = 0;
      a4[1].n128_u32[2] = a1[1].n128_u32[2];
      v14 = a1 + 2;
      if (&a1[2] != a2)
      {
        v15 = 0;
        v16 = a4;
        do
        {
          v17 = v14;
          v18 = v16 + 2;
          if ((sub_20B871BA8(v14, (void **)v16) & 0x80) != 0)
          {
            *v18 = *v16;
            v16[3].n128_u64[0] = v16[1].n128_u64[0];
            v16->n128_u64[1] = 0;
            v16[1].n128_u64[0] = 0;
            v16->n128_u64[0] = 0;
            v16[3].n128_u32[2] = v16[1].n128_u32[2];
            v19 = v4;
            if (v16 != v4)
            {
              v20 = v15;
              while (1)
              {
                v19 = (__n128 *)((char *)v4 + v20);
                if ((sub_20B871BA8(v17, (void **)((char *)&v4[-2] + v20)) & 0x80) == 0)
                  break;
                if (v19[1].n128_i8[7] < 0)
                  operator delete((void *)v19->n128_u64[0]);
                v21 = (char *)v4 + v20;
                *v19 = *(__n128 *)((char *)v4 + v20 - 32);
                v19[1].n128_u64[0] = *(unint64_t *)((char *)v4[-1].n128_u64 + v20);
                *(v21 - 9) = 0;
                v19[-2].n128_u8[0] = 0;
                *((_DWORD *)v21 + 6) = *(unsigned __int32 *)((char *)&v4->n128_u32[-2] + v20);
                v20 -= 32;
                if (!v20)
                {
                  v19 = v4;
                  break;
                }
              }
            }
            if (v19[1].n128_i8[7] < 0)
              operator delete((void *)v19->n128_u64[0]);
            result = *v17;
            v19[1].n128_u64[0] = v17[1].n128_u64[0];
            *v19 = result;
            v7[3].n128_u8[7] = 0;
            v17->n128_u8[0] = 0;
            v19[1].n128_u32[2] = v7[3].n128_u32[2];
          }
          else
          {
            result = *v17;
            v16[3].n128_u64[0] = v17[1].n128_u64[0];
            *v18 = result;
            v17->n128_u64[1] = 0;
            v17[1].n128_u64[0] = 0;
            v17->n128_u64[0] = 0;
            v16[3].n128_u32[2] = v7[3].n128_u32[2];
          }
          v14 = v17 + 2;
          v15 += 32;
          v16 += 2;
          v7 = v17;
        }
        while (&v17[2] != a2);
      }
    }
  }
  return result;
}

void sub_20B9A7518(void **a1, void **a2, void **a3, uint64_t a4, uint64_t a5, void **a6, uint64_t a7)
{
  uint64_t v8;
  void **v13;
  uint64_t v14;
  void **v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  void **v21;
  unint64_t v22;
  uint64_t v23;
  void **v24;
  unint64_t v25;
  void **v26;
  int v27;
  void **v28;
  void **v29;
  void **v30;
  __int128 v31;
  int v32;
  void **v33;
  __int128 v34;
  int v35;
  uint64_t v36;
  void **v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  __int128 *v43;
  void **v44;
  __int128 v45;
  void **v46;
  int v47;
  void **v48;
  int v49;
  void **v50;
  void **v51;
  void **v52;
  __int128 v53;
  unint64_t v54;
  __int128 *v55;
  void **v56;
  __int128 v57;
  __int128 *v58;
  uint64_t v59;
  void **v60;
  char v61;
  int v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  __int128 v66;
  int v67;
  uint64_t v68;
  void **v69;
  __int128 *v70;
  __int128 v71;
  unint64_t v72;
  void **v73;
  __int128 *v74;
  __int128 v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void **v80;
  void **v81;
  void **v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  void *v87;
  void *v88;
  void *v89;

  if (a5)
  {
    v8 = a5;
    v83 = a7;
    while (a4 > a7 && v8 > a7)
    {
      if (!a4)
        return;
      v13 = 0;
      v14 = -a4;
      while (1)
      {
        v15 = (void **)((char *)v13 + (_QWORD)a1);
        if ((sub_20B871BA8(a2, (void **)((char *)v13 + (_QWORD)a1)) & 0x80) != 0)
          break;
        v13 += 4;
        if (__CFADD__(v14++, 1))
          return;
      }
      v17 = -v14;
      v79 = v8;
      v80 = a6;
      v82 = a3;
      if (-v14 >= v8)
      {
        if (v14 == -1)
        {
          v65 = (uint64_t)v13 + (_QWORD)a1;
          v89 = *(void **)((char *)v13 + (_QWORD)a1 + 16);
          v86 = *(_OWORD *)((char *)v13 + (_QWORD)a1);
          v66 = *(_OWORD *)a2;
          *(_QWORD *)(v65 + 16) = a2[2];
          *(_OWORD *)v65 = v66;
          *(_OWORD *)a2 = v86;
          a2[2] = v89;
          v67 = *(_DWORD *)((char *)v13 + (_QWORD)a1 + 24);
          *(_DWORD *)(v65 + 24) = *((_DWORD *)a2 + 6);
          *((_DWORD *)a2 + 6) = v67;
          return;
        }
        if (v14 > 0)
          v17 = 1 - v14;
        v23 = v17 >> 1;
        v21 = (void **)((char *)&a1[4 * (v17 >> 1)] + (_QWORD)v13);
        v24 = a3;
        v20 = a2;
        if (a2 != v24)
        {
          v78 = v23;
          v25 = ((char *)v82 - (char *)a2) >> 5;
          v20 = a2;
          do
          {
            v26 = &v20[4 * (v25 >> 1)];
            v27 = (char)sub_20B871BA8(v26, v21);
            if (v27 >= 0)
              v25 >>= 1;
            else
              v25 += ~(v25 >> 1);
            if (v27 < 0)
              v20 = v26 + 4;
          }
          while (v25);
          v23 = v78;
        }
        v19 = ((char *)v20 - (char *)a2) >> 5;
      }
      else
      {
        if (v8 >= 0)
          v18 = v8;
        else
          v18 = v8 + 1;
        v19 = v18 >> 1;
        v20 = &a2[4 * (v18 >> 1)];
        v21 = a2;
        if ((void **)((char *)a2 - (char *)a1) != v13)
        {
          v77 = v18 >> 1;
          v22 = ((char *)a2 - (char *)a1 - (uint64_t)v13) >> 5;
          v21 = (void **)((char *)v13 + (_QWORD)a1);
          do
          {
            if ((sub_20B871BA8(v20, &v21[4 * (v22 >> 1)]) & 0x80u) != 0)
            {
              v22 >>= 1;
            }
            else
            {
              v21 += 4 * (v22 >> 1) + 4;
              v22 += ~(v22 >> 1);
            }
          }
          while (v22);
          v19 = v77;
        }
        v23 = ((char *)v21 - (char *)a1 - (uint64_t)v13) >> 5;
      }
      if (v21 == a2)
      {
        v28 = v20;
      }
      else if (v20 == a2)
      {
        v28 = v21;
      }
      else
      {
        v28 = v21 + 4;
        v29 = v21 + 4;
        v30 = a2;
        while (1)
        {
          v87 = *(v29 - 2);
          v84 = *((_OWORD *)v29 - 2);
          v31 = *(_OWORD *)v30;
          *(v29 - 2) = v30[2];
          *((_OWORD *)v29 - 2) = v31;
          *(_OWORD *)v30 = v84;
          v30[2] = v87;
          v32 = *((_DWORD *)v29 - 2);
          *((_DWORD *)v29 - 2) = *((_DWORD *)v30 + 6);
          *((_DWORD *)v30 + 6) = v32;
          v30 += 4;
          if (v30 == v20)
            break;
          if (v29 == a2)
            a2 = v30;
          v29 += 4;
          v28 += 4;
        }
        if (v29 != a2)
        {
          v33 = a2;
          do
          {
            while (1)
            {
              v88 = v29[2];
              v85 = *(_OWORD *)v29;
              v34 = *(_OWORD *)v33;
              v29[2] = v33[2];
              *(_OWORD *)v29 = v34;
              v33[2] = v88;
              *(_OWORD *)v33 = v85;
              v35 = *((_DWORD *)v29 + 6);
              *((_DWORD *)v29 + 6) = *((_DWORD *)v33 + 6);
              *((_DWORD *)v33 + 6) = v35;
              v29 += 4;
              v33 += 4;
              if (v33 == v20)
                break;
              if (v29 == a2)
                a2 = v33;
            }
            v33 = a2;
          }
          while (v29 != a2);
        }
      }
      a4 = -v23 - v14;
      v36 = v79 - v19;
      if (v23 + v19 >= v79 - (v23 + v19) - v14)
      {
        v38 = v23;
        v39 = -v23 - v14;
        v40 = v19;
        sub_20B9A7518(v28, v20, v82, v39, v79 - v19, v80, v83);
        a2 = v21;
        a6 = v80;
        v36 = v40;
        a4 = v38;
        a3 = v28;
      }
      else
      {
        v37 = v21;
        a6 = v80;
        sub_20B9A7518((char *)v13 + (_QWORD)a1, v37, v28, v23, v19, v80, v83);
        v15 = v28;
        a2 = v20;
        a3 = v82;
      }
      v8 = v36;
      a1 = v15;
      a7 = v83;
      if (!v36)
        return;
    }
    if (a4 <= v8)
    {
      if (a1 == a2)
        return;
      v54 = 0;
      v42 = 0;
      do
      {
        v55 = (__int128 *)&a6[v54];
        v56 = &a1[v54];
        v57 = *(_OWORD *)&a1[v54];
        *((_QWORD *)v55 + 2) = a1[v54 + 2];
        *v55 = v57;
        v56[1] = 0;
        v56[2] = 0;
        *v56 = 0;
        *((_DWORD *)v55 + 6) = a1[v54 + 3];
        ++v42;
        v54 += 4;
      }
      while (v56 + 4 != a2);
      if (v54 * 8)
      {
        v58 = (__int128 *)&a6[v54];
        v59 = (uint64_t)&a6[v54 - 4];
        v60 = a6;
        while (a2 != a3)
        {
          v61 = sub_20B871BA8(a2, v60);
          v62 = *((char *)a1 + 23);
          if (v61 < 0)
          {
            if (v62 < 0)
              operator delete(*a1);
            v64 = *(_OWORD *)a2;
            a1[2] = a2[2];
            *(_OWORD *)a1 = v64;
            *((_BYTE *)a2 + 23) = 0;
            *(_BYTE *)a2 = 0;
            *((_DWORD *)a1 + 6) = *((_DWORD *)a2 + 6);
            a2 += 4;
          }
          else
          {
            if (v62 < 0)
              operator delete(*a1);
            v63 = *(_OWORD *)v60;
            a1[2] = v60[2];
            *(_OWORD *)a1 = v63;
            *((_BYTE *)v60 + 23) = 0;
            *(_BYTE *)v60 = 0;
            *((_DWORD *)a1 + 6) = *((_DWORD *)v60 + 6);
            v60 += 4;
          }
          a1 += 4;
          if (v58 == (__int128 *)v60)
            goto LABEL_105;
        }
        if (v58 != (__int128 *)v60)
        {
          v72 = 0;
          do
          {
            v73 = &a1[v72];
            if (SHIBYTE(a1[v72 + 2]) < 0)
              operator delete(*v73);
            v74 = (__int128 *)&v60[v72];
            v75 = *(_OWORD *)&v60[v72];
            v73[2] = v60[v72 + 2];
            *(_OWORD *)v73 = v75;
            *((_BYTE *)v74 + 23) = 0;
            *(_BYTE *)v74 = 0;
            *((_DWORD *)v73 + 6) = v60[v72 + 3];
            v72 += 4;
          }
          while ((__int128 *)v59 != v74);
        }
      }
    }
    else
    {
      if (a3 == a2)
        return;
      v41 = 0;
      v42 = 0;
      do
      {
        v43 = (__int128 *)&a6[v41];
        v44 = &a2[v41];
        v45 = *(_OWORD *)&a2[v41];
        *((_QWORD *)v43 + 2) = a2[v41 + 2];
        *v43 = v45;
        v44[1] = 0;
        v44[2] = 0;
        *v44 = 0;
        *((_DWORD *)v43 + 6) = a2[v41 + 3];
        ++v42;
        v41 += 4;
      }
      while (v44 + 4 != a3);
      if (v41 * 8)
      {
        v46 = &a6[v41];
        v81 = a6;
        while (a2 != a1)
        {
          v47 = (char)sub_20B871BA8(v46 - 4, a2 - 4);
          v48 = a3 - 4;
          v49 = *((char *)a3 - 9);
          if (v47 >= 0)
            v50 = v46;
          else
            v50 = a2;
          v51 = a3;
          if (v47 >= 0)
            v52 = v46 - 4;
          else
            v52 = a2 - 4;
          if (v47 >= 0)
            v46 -= 4;
          else
            a2 -= 4;
          if (v49 < 0)
            operator delete(*v48);
          v53 = *(_OWORD *)v52;
          v48[2] = v52[2];
          *(_OWORD *)v48 = v53;
          *((_BYTE *)v50 - 9) = 0;
          *(_BYTE *)v52 = 0;
          *((_DWORD *)v51 - 2) = *((_DWORD *)v50 - 2);
          a3 = v48;
          a6 = v81;
          if (v46 == v81)
            goto LABEL_105;
        }
        if (v46 != a6)
        {
          v68 = 0;
          do
          {
            v69 = &a3[v68 - 4];
            if (*((char *)&a3[v68 - 1] - 1) < 0)
              operator delete(*v69);
            v70 = (__int128 *)&v46[v68 - 4];
            v71 = *v70;
            a3[v68 - 2] = v46[v68 - 2];
            *(_OWORD *)v69 = v71;
            *((_BYTE *)&v46[v68 - 1] - 1) = 0;
            *(_BYTE *)v70 = 0;
            LODWORD(a3[v68 - 1]) = v46[v68 - 1];
            v68 -= 4;
          }
          while (&v46[v68] != a6);
        }
      }
    }
LABEL_105:
    if (a6)
    {
      v76 = 0;
      do
      {
        if (*((char *)a6 + 23) < 0)
          operator delete(*a6);
        ++v76;
        a6 += 4;
      }
      while (v76 < v42);
    }
  }
}

uint64_t sub_20B9A7B54(uint64_t a1, double a2)
{
  double v2;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  double *v7;
  unint64_t v8;
  double *v9;
  double *v10;
  double v11;
  double *v12;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 400);
  if (v4 <= 0x30)
  {
    if (v4)
    {
      a2 = *(double *)(a1 + 408);
      if (a2 < v2)
        a2 = v2;
    }
    *(double *)(a1 + 408) = a2;
    *(_QWORD *)(a1 + 400) = v4 + 1;
    *(double *)(a1 + 8 * v4) = v2;
    return 1;
  }
  v5 = (_QWORD *)(a1 + 400);
  if (v4 == 49)
    std::__sort<std::__less<double,double> &,double *>();
  v6 = 50;
  v7 = (double *)a1;
  do
  {
    v8 = v6 >> 1;
    v9 = &v7[v6 >> 1];
    v11 = *v9;
    v10 = v9 + 1;
    v6 += ~(v6 >> 1);
    if (v11 > v2)
      v6 = v8;
    else
      v7 = v10;
  }
  while (v6);
  if ((unint64_t)v7 - a1 <= 0x18F)
  {
    v12 = v7;
    memmove(v7 + 1, v7, 392 - ((_QWORD)v7 - a1));
    *v12 = v2;
    if (v4 == 49)
      ++*v5;
    *(_QWORD *)(a1 + 408) = *(_QWORD *)(a1 + 392);
    return 1;
  }
  return 0;
}

uint64_t sub_20B9A7C5C(unsigned int a1)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  std::mutex *v4;
  uint64_t v6;

  v2 = atomic_load((unsigned __int8 *)&qword_25472D2A8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25472D2A8))
  {
    v6 = 0;
    sub_20B9A7E30(qword_25472D290, 0x10uLL, &v6);
    __cxa_atexit((void (*)(void *))sub_20B9A7DCC, qword_25472D290, &dword_20B7F7000);
    __cxa_guard_release(&qword_25472D2A8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25472D2C8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25472D2C8))
  {
    sub_20B9A7F04(qword_25472D2B0, 0x10uLL);
    __cxa_atexit((void (*)(void *))sub_20B9A7DFC, qword_25472D2B0, &dword_20B7F7000);
    __cxa_guard_release(&qword_25472D2C8);
  }
  v4 = (std::mutex *)(qword_25472D2B0[0] + ((unint64_t)a1 << 6));
  std::mutex::lock(v4);
  if (!*(_QWORD *)(qword_25472D290[0] + 8 * a1))
    *(_QWORD *)(qword_25472D290[0] + 8 * a1) = os_log_create("com.apple.mecabra", &aDefault_0[17 * a1]);
  std::mutex::unlock(v4);
  return *(_QWORD *)(qword_25472D290[0] + 8 * a1);
}

void sub_20B9A7DA4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472D2C8);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9A7DCC(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void **sub_20B9A7DFC(void **a1)
{
  void **v3;

  v3 = a1;
  sub_20B9A800C(&v3);
  return a1;
}

_QWORD *sub_20B9A7E30(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20B9A7EB0(a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_20B9A7E94(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_20B9A7EB0(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    sub_20B9A7EF0();
  result = (char *)sub_20B800BE8((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void sub_20B9A7EF0()
{
  sub_20B80AD80("vector");
}

_QWORD *sub_20B9A7F04(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20B9A7F98(a1, a2);
    v4 = a1[1];
    v5 = v4 + (a2 << 6);
    do
    {
      *(_QWORD *)v4 = 850045863;
      *(_OWORD *)(v4 + 8) = 0uLL;
      *(_OWORD *)(v4 + 24) = 0uLL;
      *(_OWORD *)(v4 + 40) = 0uLL;
      *(_QWORD *)(v4 + 56) = 0;
      v4 += 64;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_20B9A7F84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20B9A800C(&a9);
  _Unwind_Resume(a1);
}

char *sub_20B9A7F98(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 58)
    sub_20B9A7EF0();
  result = (char *)sub_20B9A7FD8((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[64 * v4];
  return result;
}

void *sub_20B9A7FD8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 58)
    sub_20B800BC0();
  return operator new(a2 << 6);
}

void sub_20B9A800C(void ***a1)
{
  void **v1;
  std::mutex *v2;
  std::mutex *v4;
  void *v5;

  v1 = *a1;
  v2 = (std::mutex *)**a1;
  if (v2)
  {
    v4 = (std::mutex *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        std::mutex::~mutex(v4 - 1);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_20B9A807C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  signed int v8;
  uint64_t v9;
  uint64_t v10;
  const __CFString *v11;
  _QWORD *v12;
  void **v13;
  void *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  int v20;
  __int128 v21;
  _QWORD v22[5];
  signed int v23;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  v4 = *(_QWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 216) = 0u;
  v5 = a1 + 216;
  *(_QWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_DWORD *)(a1 + 247) = 0;
  LODWORD(v4) = *(_DWORD *)a2;
  v6 = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 256) = 1;
  *(_DWORD *)(a1 + 260) = v4;
  *(_QWORD *)(a1 + 264) = v6;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  v7 = *(_DWORD *)a2;
  *(_BYTE *)(v5 + 120) = *(_DWORD *)a2 == 5;
  v20 = v7;
  v8 = sub_20B8D0E3C(v7);
  v9 = 0;
  v10 = MEMORY[0x24BDAC760];
  do
  {
    v11 = off_24C49FCB8[v9];
    v12 = (_QWORD *)sub_20B9AE60C();
    v13 = (void **)sub_20B9AE6A0(v12, v8, off_254729648[0], v11);
    v14 = (void *)*((unsigned __int8 *)v13 + 23);
    if ((char)v14 < 0)
      v14 = v13[1];
    if (v14)
    {
      v22[0] = v10;
      v22[1] = 0x40000000;
      v22[2] = sub_20B894E44;
      v22[3] = &unk_24C46C098;
      v23 = v8;
      v22[4] = v13;
      sub_20B8945C4(v13, (uint64_t)v22, 0, (uint64_t *)&v21);
      if ((_QWORD)v21)
      {
        sub_20B9054E0((char **)v5, &v21);
        sub_20B9A88E0((_QWORD *)a1, v21);
      }
      v15 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
      if (*((_QWORD *)&v21 + 1))
      {
        v16 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
    }
    ++v9;
  }
  while (v9 != 6);
  sub_20B9A83F4(a1);
  sub_20B9A851C((int **)a1);
  if (v20 > 4)
  {
    if (v20 == 5)
    {
      v18 = 0x200000000;
      goto LABEL_22;
    }
    if (v20 == 13)
      *(_DWORD *)(a1 + 240) = 0;
  }
  else
  {
    if (v20 == 2)
    {
      v18 = 0x100000000;
      goto LABEL_22;
    }
    if (v20 == 4)
    {
      v18 = 0x200000001;
LABEL_22:
      *(_QWORD *)(a1 + 240) = v18;
    }
  }
  return a1;
}

void sub_20B9A82A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, void **a12)
{
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;

  v15 = v12[41];
  v12[41] = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = v12[40];
  v12[40] = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = v12[39];
  v12[39] = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = v12[38];
  v12[38] = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  sub_20B9957F4((uint64_t *)(v13 + 40));
  a12 = (void **)v13;
  sub_20B8E736C(&a12);
  v19 = (void *)v12[24];
  if (v19)
  {
    v12[25] = v19;
    operator delete(v19);
  }
  v20 = (void *)v12[21];
  if (v20)
  {
    v12[22] = v20;
    operator delete(v20);
  }
  v21 = (void *)v12[18];
  if (v21)
  {
    v12[19] = v21;
    operator delete(v21);
  }
  v22 = (void *)v12[15];
  if (v22)
  {
    v12[16] = v22;
    operator delete(v22);
  }
  v23 = (void *)v12[12];
  if (v23)
  {
    v12[13] = v23;
    operator delete(v23);
  }
  v24 = (void *)v12[9];
  if (v24)
  {
    v12[10] = v24;
    operator delete(v24);
  }
  v25 = (void *)v12[6];
  if (v25)
  {
    v12[7] = v25;
    operator delete(v25);
  }
  v26 = *a10;
  if (*a10)
  {
    v12[4] = v26;
    operator delete(v26);
  }
  _Unwind_Resume(a1);
}

void sub_20B9A83F4(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  sub_20B9A8844((_QWORD *)a1, (const void **)&v11);
  v2 = v11;
  v3 = v12;
  if (v11 != v12)
  {
    do
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v2 + 48))(*v2, *(unsigned int *)(a1 + 240));
      ++v2;
    }
    while (v2 != v3);
    v2 = v11;
  }
  if (v2)
  {
    v12 = v2;
    operator delete(v2);
  }
  sub_20B9A8664((_QWORD *)a1, (const void **)&v11);
  v4 = v11;
  v5 = v12;
  if (v11 != v12)
  {
    do
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v4 + 48))(*v4, *(unsigned int *)(a1 + 240));
      ++v4;
    }
    while (v4 != v5);
    v4 = v11;
  }
  if (v4)
  {
    v12 = v4;
    operator delete(v4);
  }
  v6 = *(uint64_t **)(a1 + 72);
  v7 = *(uint64_t **)(a1 + 80);
  while (v6 != v7)
  {
    v9 = *v6++;
    v8 = v9;
    if ((*(_DWORD *)(*(_QWORD *)a1 + 24) & 0x800) != 0)
      v10 = 244;
    else
      v10 = 240;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 48))(v8, *(unsigned int *)(a1 + v10));
  }
}

void sub_20B9A84FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int **sub_20B9A851C(int **result)
{
  int **v1;
  uint64_t v2;
  int *v3;
  int v4;
  int *v5;
  int *v6;
  int *v7;

  if (!result[41])
  {
    v1 = result;
    if (!result[40] && (*((_BYTE *)*result + 27) & 8) == 0)
    {
      v2 = operator new();
      v3 = *v1;
      *(_QWORD *)v2 = &unk_24C45F3F8;
      *(_QWORD *)(v2 + 8) = v3;
      v4 = *v3;
      *(_BYTE *)(v2 + 16) = *v3 == 5;
      v5 = v1[41];
      v1[41] = (int *)v2;
      if (v5)
      {
        (*(void (**)(int *))(*(_QWORD *)v5 + 8))(v5);
        v2 = (uint64_t)v1[41];
        v4 = **v1;
      }
      v6 = (int *)operator new();
      sub_20BA15EBC((uint64_t)v6, 0, 0, v4, 0);
      *(_QWORD *)v6 = &unk_24C468FE8;
      *((_QWORD *)v6 + 42) = v2;
      v7 = v1[40];
      v1[40] = v6;
      if (v7)
      {
        (*(void (**)(int *))(*(_QWORD *)v7 + 8))(v7);
        v6 = v1[40];
      }
      sub_20B9A88E0(v1, (uint64_t)v6);
      return (int **)sub_20B9A99D0((uint64_t)v1);
    }
  }
  return result;
}

void sub_20B9A8640(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10B1C40A034DB5ALL);
  _Unwind_Resume(a1);
}

char *sub_20B9A8664@<X0>(_QWORD *a1@<X0>, const void **a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;

  v4 = a1 + 15;
  v5 = 15;
  if ((*(_DWORD *)(*a1 + 24) & 0x4000) == 0)
  {
    v5 = 12;
    v4 = a1 + 12;
  }
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  sub_20B9A9E4C(a2, (const void *)a1[v5], v4[1], (uint64_t)(v4[1] - a1[v5]) >> 3);
  return sub_20B9A9EC4(a2, (uint64_t)a2[1], *(uint64_t **)(a1[1] + 72), *(uint64_t **)(a1[1] + 80), (uint64_t)(*(_QWORD *)(a1[1] + 80) - *(_QWORD *)(a1[1] + 72)) >> 3);
}

void sub_20B9A86E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B9A8700(uint64_t a1@<X0>, void **a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = *(_QWORD **)(a1 + 24);
  v3 = *(_QWORD **)(a1 + 32);
  if (v2 != v3)
  {
    v5 = (uint64_t)(a2 + 2);
    do
    {
      v6 = *v2;
      if (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)*v2 + 16))(*v2))
      {
        v8 = a2[1];
        v7 = (unint64_t)a2[2];
        if ((unint64_t)v8 >= v7)
        {
          v10 = ((char *)v8 - (_BYTE *)*a2) >> 3;
          if ((unint64_t)(v10 + 1) >> 61)
            sub_20B80CDD8();
          v11 = v7 - (_QWORD)*a2;
          v12 = v11 >> 2;
          if (v11 >> 2 <= (unint64_t)(v10 + 1))
            v12 = v10 + 1;
          if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
            v13 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v13 = v12;
          if (v13)
            v14 = (char *)sub_20B800BE8(v5, v13);
          else
            v14 = 0;
          v15 = &v14[8 * v10];
          *(_QWORD *)v15 = v6;
          v9 = v15 + 8;
          v17 = (char *)*a2;
          v16 = (char *)a2[1];
          if (v16 != *a2)
          {
            do
            {
              v18 = *((_QWORD *)v16 - 1);
              v16 -= 8;
              *((_QWORD *)v15 - 1) = v18;
              v15 -= 8;
            }
            while (v16 != v17);
            v16 = (char *)*a2;
          }
          *a2 = v15;
          a2[1] = v9;
          a2[2] = &v14[8 * v13];
          if (v16)
            operator delete(v16);
        }
        else
        {
          *v8 = v6;
          v9 = v8 + 1;
        }
        a2[1] = v9;
      }
      ++v2;
    }
    while (v2 != v3);
  }
}

void sub_20B9A8824(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_20B9A8844@<X0>(_QWORD *a1@<X0>, const void **a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;

  v4 = a1 + 6;
  v5 = 6;
  if ((*(_DWORD *)(*a1 + 24) & 0x4000) == 0)
  {
    v5 = 3;
    v4 = a1 + 3;
  }
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  sub_20B9A9E4C(a2, (const void *)a1[v5], v4[1], (uint64_t)(v4[1] - a1[v5]) >> 3);
  return sub_20B9A9EC4(a2, (uint64_t)a2[1], *(uint64_t **)(a1[1] + 48), *(uint64_t **)(a1[1] + 56), (uint64_t)(*(_QWORD *)(a1[1] + 56) - *(_QWORD *)(a1[1] + 48)) >> 3);
}

void sub_20B9A88C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B9A88E0(_QWORD *a1, uint64_t a2)
{
  int v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  unint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  unint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  unint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  void **v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  char *v71;
  char *v72;
  _QWORD *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  char *v106;
  char *v107;
  char *v108;
  char *v109;
  char *v110;
  uint64_t v111;
  char *v112;
  char *v113;
  char *v114;
  char *v115;
  uint64_t v116;
  unint64_t v117;
  _QWORD *v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  char *v125;
  char *v126;
  char *v127;
  char *v128;
  char *v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  char *v140;
  char *v141;
  char *v142;
  char *v143;
  uint64_t v144;
  char *v145;
  char *v146;
  char *v147;
  char *v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  char *v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  unint64_t v164;
  _QWORD *v165;
  _QWORD *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  char *v172;
  char *v173;
  char *v174;
  char *v175;
  char *v176;
  uint64_t v177;

  if (!a2)
    return;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) & 1) == 0)
  {
    switch(v4)
    {
      case 0:
        v37 = a1[26];
        v38 = (_QWORD *)a1[25];
        if ((unint64_t)v38 >= v37)
        {
          v83 = a1[24];
          v84 = ((uint64_t)v38 - v83) >> 3;
          if ((unint64_t)(v84 + 1) >> 61)
            goto LABEL_219;
          v85 = v37 - v83;
          v86 = v85 >> 2;
          if (v85 >> 2 <= (unint64_t)(v84 + 1))
            v86 = v84 + 1;
          if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFF8)
            v87 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v87 = v86;
          if (v87)
            v88 = (char *)sub_20B800BE8((uint64_t)(a1 + 26), v87);
          else
            v88 = 0;
          v112 = &v88[8 * v84];
          v113 = &v88[8 * v87];
          *(_QWORD *)v112 = a2;
          v39 = v112 + 8;
          v115 = (char *)a1[24];
          v114 = (char *)a1[25];
          if (v114 != v115)
          {
            do
            {
              v116 = *((_QWORD *)v114 - 1);
              v114 -= 8;
              *((_QWORD *)v112 - 1) = v116;
              v112 -= 8;
            }
            while (v114 != v115);
            v114 = (char *)a1[24];
          }
          a1[24] = v112;
          a1[25] = v39;
          a1[26] = v113;
          if (v114)
            operator delete(v114);
        }
        else
        {
          *v38 = a2;
          v39 = v38 + 1;
        }
        a1[25] = v39;
LABEL_133:
        v117 = a1[5];
        v118 = (_QWORD *)a1[4];
        if ((unint64_t)v118 >= v117)
        {
          v120 = a1[3];
          v121 = ((uint64_t)v118 - v120) >> 3;
          if ((unint64_t)(v121 + 1) >> 61)
            goto LABEL_219;
          v122 = v117 - v120;
          v123 = v122 >> 2;
          if (v122 >> 2 <= (unint64_t)(v121 + 1))
            v123 = v121 + 1;
          if ((unint64_t)v122 >= 0x7FFFFFFFFFFFFFF8)
            v124 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v124 = v123;
          if (v124)
            v125 = (char *)sub_20B800BE8((uint64_t)(a1 + 5), v124);
          else
            v125 = 0;
          v126 = &v125[8 * v121];
          v127 = &v125[8 * v124];
          *(_QWORD *)v126 = a2;
          v119 = v126 + 8;
          v129 = (char *)a1[3];
          v128 = (char *)a1[4];
          if (v128 != v129)
          {
            do
            {
              v130 = *((_QWORD *)v128 - 1);
              v128 -= 8;
              *((_QWORD *)v126 - 1) = v130;
              v126 -= 8;
            }
            while (v128 != v129);
            v128 = (char *)a1[3];
          }
          a1[3] = v126;
          a1[4] = v119;
          a1[5] = v127;
          if (v128)
            operator delete(v128);
        }
        else
        {
          *v118 = a2;
          v119 = v118 + 1;
        }
        v131 = a1[8];
        a1[4] = v119;
        v55 = (_QWORD *)a1[7];
        if ((unint64_t)v55 < v131)
        {
LABEL_176:
          *v55 = a2;
          v73 = v55 + 1;
LABEL_198:
          a1[7] = v73;
          goto LABEL_199;
        }
        v56 = (void **)(a1 + 6);
        v132 = a1[6];
        v133 = ((uint64_t)v55 - v132) >> 3;
        if (!((unint64_t)(v133 + 1) >> 61))
        {
          v134 = v131 - v132;
          v135 = v134 >> 2;
          if (v134 >> 2 <= (unint64_t)(v133 + 1))
            v135 = v133 + 1;
          if ((unint64_t)v134 >= 0x7FFFFFFFFFFFFFF8)
            v136 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v136 = v135;
          if (v136)
            v137 = (char *)sub_20B800BE8((uint64_t)(a1 + 8), v136);
          else
            v137 = 0;
          v71 = &v137[8 * v133];
          v72 = &v137[8 * v136];
          *(_QWORD *)v71 = a2;
          v73 = v71 + 8;
          v138 = (char *)a1[6];
          v74 = (char *)a1[7];
          if (v74 == v138)
            goto LABEL_196;
          do
          {
            v139 = *((_QWORD *)v74 - 1);
            v74 -= 8;
            *((_QWORD *)v71 - 1) = v139;
            v71 -= 8;
          }
          while (v74 != v138);
LABEL_195:
          v74 = (char *)*v56;
LABEL_196:
          a1[6] = v71;
          a1[7] = v73;
          a1[8] = v72;
          if (v74)
            operator delete(v74);
          goto LABEL_198;
        }
LABEL_219:
        sub_20B80CDD8();
      case 1:
        v40 = a1[11];
        v41 = (_QWORD *)a1[10];
        if ((unint64_t)v41 >= v40)
        {
          v89 = a1[9];
          v90 = ((uint64_t)v41 - v89) >> 3;
          if ((unint64_t)(v90 + 1) >> 61)
            goto LABEL_219;
          v91 = v40 - v89;
          v92 = v91 >> 2;
          if (v91 >> 2 <= (unint64_t)(v90 + 1))
            v92 = v90 + 1;
          if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF8)
            v93 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v93 = v92;
          if (v93)
            v94 = (char *)sub_20B800BE8((uint64_t)(a1 + 11), v93);
          else
            v94 = 0;
          v140 = &v94[8 * v90];
          v141 = &v94[8 * v93];
          *(_QWORD *)v140 = a2;
          v42 = v140 + 8;
          v143 = (char *)a1[9];
          v142 = (char *)a1[10];
          if (v142 != v143)
          {
            do
            {
              v144 = *((_QWORD *)v142 - 1);
              v142 -= 8;
              *((_QWORD *)v140 - 1) = v144;
              v140 -= 8;
            }
            while (v142 != v143);
            v142 = (char *)a1[9];
          }
          a1[9] = v140;
          a1[10] = v42;
          a1[11] = v141;
          if (v142)
            operator delete(v142);
        }
        else
        {
          *v41 = a2;
          v42 = v41 + 1;
        }
        a1[10] = v42;
        goto LABEL_199;
      case 3:
        goto LABEL_133;
      case 5:
        v43 = a1[5];
        v44 = (_QWORD *)a1[4];
        if ((unint64_t)v44 >= v43)
        {
          v95 = a1[3];
          v96 = ((uint64_t)v44 - v95) >> 3;
          if ((unint64_t)(v96 + 1) >> 61)
            goto LABEL_219;
          v97 = v43 - v95;
          v98 = v97 >> 2;
          if (v97 >> 2 <= (unint64_t)(v96 + 1))
            v98 = v96 + 1;
          if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFF8)
            v99 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v99 = v98;
          if (v99)
            v100 = (char *)sub_20B800BE8((uint64_t)(a1 + 5), v99);
          else
            v100 = 0;
          v145 = &v100[8 * v96];
          v146 = &v100[8 * v99];
          *(_QWORD *)v145 = a2;
          v45 = v145 + 8;
          v148 = (char *)a1[3];
          v147 = (char *)a1[4];
          if (v147 != v148)
          {
            do
            {
              v149 = *((_QWORD *)v147 - 1);
              v147 -= 8;
              *((_QWORD *)v145 - 1) = v149;
              v145 -= 8;
            }
            while (v147 != v148);
            v147 = (char *)a1[3];
          }
          a1[3] = v145;
          a1[4] = v45;
          a1[5] = v146;
          if (v147)
            operator delete(v147);
        }
        else
        {
          *v44 = a2;
          v45 = v44 + 1;
        }
        v150 = a1[8];
        a1[4] = v45;
        v55 = (_QWORD *)a1[7];
        if ((unint64_t)v55 < v150)
          goto LABEL_176;
        v56 = (void **)(a1 + 6);
        v151 = a1[6];
        v152 = ((uint64_t)v55 - v151) >> 3;
        if (!((unint64_t)(v152 + 1) >> 61))
        {
          v153 = v150 - v151;
          v154 = v153 >> 2;
          if (v153 >> 2 <= (unint64_t)(v152 + 1))
            v154 = v152 + 1;
          if ((unint64_t)v153 >= 0x7FFFFFFFFFFFFFF8)
            v155 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v155 = v154;
          if (v155)
            v156 = (char *)sub_20B800BE8((uint64_t)(a1 + 8), v155);
          else
            v156 = 0;
          v71 = &v156[8 * v152];
          v72 = &v156[8 * v155];
          *(_QWORD *)v71 = a2;
          v73 = v71 + 8;
          v162 = (char *)a1[6];
          v74 = (char *)a1[7];
          if (v74 == v162)
            goto LABEL_196;
          do
          {
            v163 = *((_QWORD *)v74 - 1);
            v74 -= 8;
            *((_QWORD *)v71 - 1) = v163;
            v71 -= 8;
          }
          while (v74 != v162);
          goto LABEL_195;
        }
        goto LABEL_219;
      case 9:
        v46 = a1[26];
        v47 = (_QWORD *)a1[25];
        if ((unint64_t)v47 >= v46)
        {
          v101 = a1[24];
          v102 = ((uint64_t)v47 - v101) >> 3;
          if ((unint64_t)(v102 + 1) >> 61)
            goto LABEL_219;
          v103 = v46 - v101;
          v104 = v103 >> 2;
          if (v103 >> 2 <= (unint64_t)(v102 + 1))
            v104 = v102 + 1;
          if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFFF8)
            v105 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v105 = v104;
          if (v105)
            v106 = (char *)sub_20B800BE8((uint64_t)(a1 + 26), v105);
          else
            v106 = 0;
          v157 = &v106[8 * v102];
          v158 = &v106[8 * v105];
          *(_QWORD *)v157 = a2;
          v48 = v157 + 8;
          v160 = (char *)a1[24];
          v159 = (char *)a1[25];
          if (v159 != v160)
          {
            do
            {
              v161 = *((_QWORD *)v159 - 1);
              v159 -= 8;
              *((_QWORD *)v157 - 1) = v161;
              v157 -= 8;
            }
            while (v159 != v160);
            v159 = (char *)a1[24];
          }
          a1[24] = v157;
          a1[25] = v48;
          a1[26] = v158;
          if (v159)
            operator delete(v159);
        }
        else
        {
          *v47 = a2;
          v48 = v47 + 1;
        }
        a1[25] = v48;
LABEL_4:
        v5 = a1[5];
        v6 = (_QWORD *)a1[4];
        if ((unint64_t)v6 >= v5)
        {
          v17 = a1[3];
          v18 = ((uint64_t)v6 - v17) >> 3;
          if ((unint64_t)(v18 + 1) >> 61)
            goto LABEL_219;
          v19 = v5 - v17;
          v20 = v19 >> 2;
          if (v19 >> 2 <= (unint64_t)(v18 + 1))
            v20 = v18 + 1;
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
            v21 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v21 = v20;
          if (v21)
            v22 = (char *)sub_20B800BE8((uint64_t)(a1 + 5), v21);
          else
            v22 = 0;
          v49 = &v22[8 * v18];
          v50 = &v22[8 * v21];
          *(_QWORD *)v49 = a2;
          v7 = v49 + 8;
          v52 = (char *)a1[3];
          v51 = (char *)a1[4];
          if (v51 != v52)
          {
            do
            {
              v53 = *((_QWORD *)v51 - 1);
              v51 -= 8;
              *((_QWORD *)v49 - 1) = v53;
              v49 -= 8;
            }
            while (v51 != v52);
            v51 = (char *)a1[3];
          }
          a1[3] = v49;
          a1[4] = v7;
          a1[5] = v50;
          if (v51)
            operator delete(v51);
        }
        else
        {
          *v6 = a2;
          v7 = v6 + 1;
        }
        v54 = a1[8];
        a1[4] = v7;
        v55 = (_QWORD *)a1[7];
        if ((unint64_t)v55 < v54)
          goto LABEL_176;
        v56 = (void **)(a1 + 6);
        v57 = a1[6];
        v58 = ((uint64_t)v55 - v57) >> 3;
        if (!((unint64_t)(v58 + 1) >> 61))
        {
          v59 = v54 - v57;
          v60 = v59 >> 2;
          if (v59 >> 2 <= (unint64_t)(v58 + 1))
            v60 = v58 + 1;
          if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF8)
            v61 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v61 = v60;
          if (v61)
            v62 = (char *)sub_20B800BE8((uint64_t)(a1 + 8), v61);
          else
            v62 = 0;
          v71 = &v62[8 * v58];
          v72 = &v62[8 * v61];
          *(_QWORD *)v71 = a2;
          v73 = v71 + 8;
          v75 = (char *)a1[6];
          v74 = (char *)a1[7];
          if (v74 == v75)
            goto LABEL_196;
          do
          {
            v76 = *((_QWORD *)v74 - 1);
            v74 -= 8;
            *((_QWORD *)v71 - 1) = v76;
            v71 -= 8;
          }
          while (v74 != v75);
          goto LABEL_195;
        }
        goto LABEL_219;
      case 10:
      case 11:
      case 14:
      case 17:
        goto LABEL_4;
      default:
        return;
    }
  }
  v8 = a1[17];
  v9 = (_QWORD *)a1[16];
  if ((unint64_t)v9 >= v8)
  {
    v11 = a1[15];
    v12 = ((uint64_t)v9 - v11) >> 3;
    if ((unint64_t)(v12 + 1) >> 61)
      goto LABEL_219;
    v13 = v8 - v11;
    v14 = v13 >> 2;
    if (v13 >> 2 <= (unint64_t)(v12 + 1))
      v14 = v12 + 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v15 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    if (v15)
      v16 = (char *)sub_20B800BE8((uint64_t)(a1 + 17), v15);
    else
      v16 = 0;
    v23 = &v16[8 * v12];
    v24 = &v16[8 * v15];
    *(_QWORD *)v23 = a2;
    v10 = v23 + 8;
    v26 = (char *)a1[15];
    v25 = (char *)a1[16];
    if (v25 != v26)
    {
      do
      {
        v27 = *((_QWORD *)v25 - 1);
        v25 -= 8;
        *((_QWORD *)v23 - 1) = v27;
        v23 -= 8;
      }
      while (v25 != v26);
      v25 = (char *)a1[15];
    }
    a1[15] = v23;
    a1[16] = v10;
    a1[17] = v24;
    if (v25)
      operator delete(v25);
  }
  else
  {
    *v9 = a2;
    v10 = v9 + 1;
  }
  a1[16] = v10;
  if (v4 == 6)
    return;
  v28 = a1[14];
  v29 = (_QWORD *)a1[13];
  if ((unint64_t)v29 >= v28)
  {
    v31 = a1[12];
    v32 = ((uint64_t)v29 - v31) >> 3;
    if ((unint64_t)(v32 + 1) >> 61)
      goto LABEL_219;
    v33 = v28 - v31;
    v34 = v33 >> 2;
    if (v33 >> 2 <= (unint64_t)(v32 + 1))
      v34 = v32 + 1;
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
      v35 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v35 = v34;
    if (v35)
      v36 = (char *)sub_20B800BE8((uint64_t)(a1 + 14), v35);
    else
      v36 = 0;
    v63 = &v36[8 * v32];
    v64 = &v36[8 * v35];
    *(_QWORD *)v63 = a2;
    v30 = v63 + 8;
    v66 = (char *)a1[12];
    v65 = (char *)a1[13];
    if (v65 != v66)
    {
      do
      {
        v67 = *((_QWORD *)v65 - 1);
        v65 -= 8;
        *((_QWORD *)v63 - 1) = v67;
        v63 -= 8;
      }
      while (v65 != v66);
      v65 = (char *)a1[12];
    }
    a1[12] = v63;
    a1[13] = v30;
    a1[14] = v64;
    if (v65)
      operator delete(v65);
  }
  else
  {
    *v29 = a2;
    v30 = v29 + 1;
  }
  a1[13] = v30;
  if (v4 != 9 && v4 != 14)
  {
    if (v4 != 12)
      return;
    v68 = a1[23];
    v69 = (_QWORD *)a1[22];
    if ((unint64_t)v69 >= v68)
    {
      v77 = a1[21];
      v78 = ((uint64_t)v69 - v77) >> 3;
      if ((unint64_t)(v78 + 1) >> 61)
        goto LABEL_219;
      v79 = v68 - v77;
      v80 = v79 >> 2;
      if (v79 >> 2 <= (unint64_t)(v78 + 1))
        v80 = v78 + 1;
      if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFF8)
        v81 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v81 = v80;
      if (v81)
        v82 = (char *)sub_20B800BE8((uint64_t)(a1 + 23), v81);
      else
        v82 = 0;
      v107 = &v82[8 * v78];
      v108 = &v82[8 * v81];
      *(_QWORD *)v107 = a2;
      v70 = v107 + 8;
      v110 = (char *)a1[21];
      v109 = (char *)a1[22];
      if (v109 != v110)
      {
        do
        {
          v111 = *((_QWORD *)v109 - 1);
          v109 -= 8;
          *((_QWORD *)v107 - 1) = v111;
          v107 -= 8;
        }
        while (v109 != v110);
        v109 = (char *)a1[21];
      }
      a1[21] = v107;
      a1[22] = v70;
      a1[23] = v108;
      if (v109)
        operator delete(v109);
    }
    else
    {
      *v69 = a2;
      v70 = v69 + 1;
    }
    a1[22] = v70;
LABEL_199:
    if (v4 != 14 && v4 != 9)
      return;
  }
  v164 = a1[20];
  v165 = (_QWORD *)a1[19];
  if ((unint64_t)v165 >= v164)
  {
    v167 = a1[18];
    v168 = ((uint64_t)v165 - v167) >> 3;
    if ((unint64_t)(v168 + 1) >> 61)
      sub_20B80CDD8();
    v169 = v164 - v167;
    v170 = v169 >> 2;
    if (v169 >> 2 <= (unint64_t)(v168 + 1))
      v170 = v168 + 1;
    if ((unint64_t)v169 >= 0x7FFFFFFFFFFFFFF8)
      v171 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v171 = v170;
    if (v171)
      v172 = (char *)sub_20B800BE8((uint64_t)(a1 + 20), v171);
    else
      v172 = 0;
    v173 = &v172[8 * v168];
    v174 = &v172[8 * v171];
    *(_QWORD *)v173 = a2;
    v166 = v173 + 8;
    v176 = (char *)a1[18];
    v175 = (char *)a1[19];
    if (v175 != v176)
    {
      do
      {
        v177 = *((_QWORD *)v175 - 1);
        v175 -= 8;
        *((_QWORD *)v173 - 1) = v177;
        v173 -= 8;
      }
      while (v175 != v176);
      v175 = (char *)a1[18];
    }
    a1[18] = v173;
    a1[19] = v166;
    a1[20] = v174;
    if (v175)
      operator delete(v175);
  }
  else
  {
    *v165 = a2;
    v166 = v165 + 1;
  }
  a1[19] = v166;
}

_QWORD *sub_20B9A9230(_QWORD *result)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v1 = result;
  v2 = (uint64_t *)result[18];
  v3 = (uint64_t *)result[19];
  if (v2 != v3)
  {
    while (1)
    {
      v4 = *v2;
      v10 = v4;
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4) & 1) != 0)
        break;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
      if ((_DWORD)result == 14)
        goto LABEL_7;
      if ((_DWORD)result == 9)
      {
        v5 = sub_20B9A9400((_QWORD *)v1[24], (_QWORD *)v1[25], &v10);
        if ((_QWORD *)v1[25] != v5)
          v1[25] = v5;
LABEL_7:
        v6 = sub_20B9A9400((_QWORD *)v1[3], (_QWORD *)v1[4], &v10);
        if ((_QWORD *)v1[4] != v6)
          v1[4] = v6;
        result = sub_20B9A9400((_QWORD *)v1[6], (_QWORD *)v1[7], &v10);
        if ((_QWORD *)v1[7] == result)
          goto LABEL_16;
        v7 = result;
        v8 = v1 + 7;
LABEL_15:
        *v8 = v7;
      }
LABEL_16:
      if (++v2 == v3)
      {
        v2 = (uint64_t *)v1[18];
        goto LABEL_18;
      }
    }
    v9 = sub_20B9A9400((_QWORD *)v1[12], (_QWORD *)v1[13], &v10);
    if ((_QWORD *)v1[13] != v9)
      v1[13] = v9;
    result = sub_20B9A9400((_QWORD *)v1[15], (_QWORD *)v1[16], &v10);
    if ((_QWORD *)v1[16] == result)
      goto LABEL_16;
    v7 = result;
    v8 = v1 + 16;
    goto LABEL_15;
  }
LABEL_18:
  v1[19] = v2;
  return result;
}

_QWORD *sub_20B9A9400(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *i;

  if (result == a2)
  {
LABEL_4:
    result = a2;
  }
  else
  {
    while (*result != *a3)
    {
      if (++result == a2)
        goto LABEL_4;
    }
  }
  if (result != a2)
  {
    for (i = result + 1; i != a2; ++i)
    {
      if (*i != *a3)
        *result++ = *i;
    }
  }
  return result;
}

void sub_20B9A945C(_QWORD *a1, int a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;

  sub_20B98C590(a1 + 32, a2, (uint64_t)&v5);
  v3 = v5;
  v4 = v6;
  if (v5 != v6)
  {
    do
      sub_20B9A88E0(a1, *v3++);
    while (v3 != v4);
    v3 = v5;
  }
  if (v3)
  {
    v6 = v3;
    operator delete(v3);
  }
}

void sub_20B9A94CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B9A94E8(uint64_t a1, const void *a2, int a3)
{
  sub_20B98C4B4((unsigned __int8 *)(a1 + 256), a2, a3);
  if (a3 == 2)
  {
    if (!*(_BYTE *)(a1 + 250))
    {
      sub_20B9A945C((_QWORD *)a1, 2);
      *(_BYTE *)(a1 + 250) = 1;
    }
  }
  else if (a3 == 1)
  {
    if (!*(_BYTE *)(a1 + 249))
    {
      sub_20B9A945C((_QWORD *)a1, 1);
      *(_BYTE *)(a1 + 249) = 1;
    }
  }
  else if (!a3 && !*(_BYTE *)(a1 + 248))
  {
    sub_20B9A945C((_QWORD *)a1, 0);
    *(_BYTE *)(a1 + 248) = 1;
  }
}

uint64_t sub_20B9A9580(uint64_t a1)
{
  uint64_t v1;
  int v2;
  int v3;

  v1 = a1 + 256;
  v2 = sub_20B98C338(a1 + 256, 0);
  v3 = v2 | sub_20B98C338(v1, 1);
  return v3 | sub_20B98C338(v1, 2);
}

void sub_20B9A95CC(int **a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  int *v9;

  if (!a1[38])
  {
    v4 = **a1;
    v5 = operator new();
    sub_20BA15EBC(v5, a2, 0, v4, 1);
    v6 = a1[38];
    a1[38] = (int *)v5;
    if (v6)
    {
      (*(void (**)(int *))(*(_QWORD *)v6 + 8))(v6);
      v5 = (uint64_t)a1[38];
    }
    sub_20B9A88E0(a1, v5);
  }
  if (!*((_BYTE *)a1 + 336) && !a1[39])
  {
    v7 = **a1;
    v8 = operator new();
    sub_20BA15EBC(v8, a2, 1, v7, 0);
    v9 = a1[39];
    a1[39] = (int *)v8;
    if (v9)
    {
      (*(void (**)(int *))(*(_QWORD *)v9 + 8))(v9);
      v8 = (uint64_t)a1[39];
    }
    sub_20B9A88E0(a1, v8);
  }
}

void sub_20B9A96D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10B1C402BC3C895);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9A9700(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *__p;
  void *v12;
  uint64_t v13;
  char v14;

  if (a3[1] != *a3)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      v14 = 0;
      __p = 0;
      v12 = 0;
      v13 = 0;
      sub_20B90926C(*a2 + v6, *(unsigned __int16 ****)(a1 + 16), *(_BYTE *)(a1 + 336), &__p, &v14);
      if (v14)
        v8 = 304;
      else
        v8 = 312;
      v9 = *(_QWORD *)(a1 + v8);
      if (v9)
        sub_20BA1697C(v9, (uint64_t *)&__p, *(_DWORD *)(*a3 + 4 * v7));
      if (__p)
      {
        v12 = __p;
        operator delete(__p);
      }
      ++v7;
      v6 += 24;
    }
    while (v7 < (uint64_t)(a3[1] - *a3) >> 2);
  }
  return 1;
}

void sub_20B9A97D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B9A97F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  _QWORD v8[5];

  v4 = *(_QWORD *)(a1 + 304);
  if (v4)
    sub_20BA16808(v4);
  v5 = *(_QWORD *)(a1 + 312);
  if (v5)
    sub_20BA16808(v5);
  v8[0] = MEMORY[0x24BDAC760];
  v8[1] = 0x40000000;
  v8[2] = sub_20B9A988C;
  v8[3] = &unk_24C46C650;
  v8[4] = a1;
  sub_20B91853C(a2, (uint64_t)v8);
  v6 = *(_QWORD *)(a1 + 304);
  if (v6)
    sub_20BA16840(v6);
  result = *(_QWORD **)(a1 + 312);
  if (result)
    return sub_20BA16840((uint64_t)result);
  return result;
}

void sub_20B9A988C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *__p;
  void *v10;
  uint64_t v11;
  char v12;

  v6 = *(_QWORD *)(a1 + 32);
  if (sub_20B9090E4(a2))
  {
    v12 = 0;
    v10 = 0;
    v11 = 0;
    __p = 0;
    sub_20B90926C(a2, *(unsigned __int16 ****)(v6 + 16), *(_BYTE *)(v6 + 336), &__p, &v12);
    v7 = 304;
    if (!v12)
      v7 = 312;
    v8 = *(_QWORD *)(v6 + v7);
    if (v8)
      sub_20BA1687C(v8, (uint64_t)&__p, a4);
    if (__p)
    {
      v10 = __p;
      operator delete(__p);
    }
  }
}

void sub_20B9A9928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B9A9948(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  sub_20B9A9230(a1);
  v2 = a1[38];
  a1[38] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[39];
  a1[39] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[40];
  a1[40] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  result = a1[41];
  a1[41] = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *sub_20B9A99D0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  _QWORD v4[11];

  result = *(_QWORD **)(a1 + 320);
  if (result)
  {
    if (*(_QWORD *)(a1 + 328))
    {
      sub_20BA16808((uint64_t)result);
      v3 = *(_QWORD *)(a1 + 328);
      v4[0] = MEMORY[0x24BDAC760];
      v4[1] = 0x40000000;
      v4[2] = sub_20B9A9A84;
      v4[3] = &unk_24C49FCE8;
      v4[4] = a1;
      v4[5] = MEMORY[0x24BDAC760];
      v4[6] = 0x40000000;
      v4[7] = sub_20B8D4E08;
      v4[8] = &unk_24C46C1A0;
      v4[9] = v4;
      v4[10] = v3;
      LMLanguageModelEnumerateDynamicTokensWithBlock();
      return sub_20BA16840(*(_QWORD *)(a1 + 320));
    }
  }
  return result;
}

void sub_20B9A9A84(uint64_t a1, int a2, CFDictionaryRef theDict)
{
  uint64_t v4;
  int v5;
  int v6;
  void *__p;
  void *v8;
  uint64_t v9;
  char v10;

  v4 = *(_QWORD *)(a1 + 32);
  v10 = 0;
  v8 = 0;
  v9 = 0;
  __p = 0;
  v5 = sub_20B9094B8(theDict, *(unsigned __int16 ****)(v4 + 16), &__p, *(unsigned __int8 *)(v4 + 336), &v10);
  if (v10)
    v6 = v5;
  else
    v6 = 0;
  if (v6 == 1)
    sub_20BA1687C(*(_QWORD *)(v4 + 320), (uint64_t)&__p, a2);
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
}

void sub_20B9A9B08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B9A9B24(uint64_t a1, const __CFDictionary *a2)
{
  int v4;
  int v5;
  char v7;
  void *__p;
  void *v9;
  uint64_t v10;

  if (*(_QWORD *)(a1 + 320))
  {
    __p = 0;
    v9 = 0;
    v10 = 0;
    v7 = 0;
    if (*(_QWORD *)(a1 + 328) && LMLanguageModelAddOrUpdateTokenWithAttributes() <= 1)
    {
      v4 = sub_20B9094B8(a2, *(unsigned __int16 ****)(a1 + 16), &__p, *(unsigned __int8 *)(a1 + 336), &v7);
      v5 = v7 ? v4 : 0;
      if (v5 == 1)
        sub_20BA1687C(*(_QWORD *)(a1 + 320), (uint64_t)&__p, 0);
    }
    if (__p)
    {
      v9 = __p;
      operator delete(__p);
    }
  }
  return 0;
}

void sub_20B9A9BEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B9A9C08(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  void *__p;
  void *v7;
  uint64_t v8;
  char v9;

  v9 = 0;
  __p = 0;
  v7 = 0;
  v8 = 0;
  sub_20B90926C(a2, *(unsigned __int16 ****)(a1 + 16), *(_BYTE *)(a1 + 336), &__p, &v9);
  if (v9)
  {
    sub_20BA1687C(*(_QWORD *)(a1 + 304), (uint64_t)&__p, a3);
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 312);
    if (v5)
      sub_20BA1687C(v5, (uint64_t)&__p, a3);
  }
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
}

void sub_20B9A9C98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B9A9CB4(_QWORD *result)
{
  _QWORD *v1;
  _BYTE *v2;
  uint64_t v3;

  v1 = (_QWORD *)result[38];
  if (v1)
  {
    v2 = (_BYTE *)v1[6];
    if (*v2)
    {
      v1[3] = v1[2];
      v3 = result[39];
      if (v3)
        *(_QWORD *)(v3 + 24) = *(_QWORD *)(v3 + 16);
      return sub_20B9A97F8((uint64_t)result, (uint64_t)v2);
    }
  }
  return result;
}

void sub_20B9A9CE8(int **a1)
{
  signed int v1;
  _QWORD *v2;
  void **v3;
  void *v4;
  void **v5;
  void *v6;

  v1 = sub_20B8D0E3C(**a1);
  v2 = (_QWORD *)sub_20B9AE60C();
  v3 = (void **)sub_20B9AE6A0(v2, v1, off_254729648[0], CFSTR("sys.dic"));
  v4 = (void *)*((unsigned __int8 *)v3 + 23);
  if ((char)v4 < 0)
    v4 = v3[1];
  if (v4)
    sub_20B9A9DA8(v1, v3);
  v5 = (void **)sub_20B9AE6A0(v2, v1, off_254729648[0], CFSTR("supplement.dic"));
  v6 = (void *)*((unsigned __int8 *)v5 + 23);
  if ((char)v6 < 0)
    v6 = v5[1];
  if (v6)
    sub_20B9A9DA8(v1, v5);
}

void sub_20B9A9DA8(int a1, void **a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  _QWORD v7[5];
  int v8;

  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 0x40000000;
  v7[2] = sub_20B894E44;
  v7[3] = &unk_24C46C098;
  v8 = a1;
  v7[4] = a2;
  sub_20B8945C4(a2, (uint64_t)v7, 0, &v5);
  v2 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

_QWORD *sub_20B9A9E4C(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_20B812928(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20B9A9EA8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_20B9A9EC4(const void **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t *v9;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t *v21;
  char *v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t v25;
  char *v26;
  uint64_t *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  _BYTE *v42;
  uint64_t v43;
  void *v44;

  v5 = (char *)*a1;
  v6 = a2 - (_QWORD)*a1;
  v7 = (char *)*a1 + (v6 & 0xFFFFFFFFFFFFFFF8);
  if (a5 < 1)
    return v7;
  v9 = a3;
  v13 = a1[2];
  v11 = (uint64_t)(a1 + 2);
  v12 = v13;
  v14 = *(_QWORD *)(v11 - 8);
  if (a5 <= (uint64_t)&v13[-v14] >> 3)
  {
    v20 = (uint64_t)(v14 - (_QWORD)v7) >> 3;
    if (v20 >= a5)
    {
      v21 = &a3[a5];
      v22 = *(char **)(v11 - 8);
    }
    else
    {
      v21 = &a3[v20];
      v22 = *(char **)(v11 - 8);
      if (v21 != a4)
      {
        v23 = v21;
        v24 = *(_QWORD **)(v11 - 8);
        do
        {
          v25 = *v23++;
          *v24++ = v25;
          v22 += 8;
        }
        while (v23 != a4);
      }
      a1[1] = v22;
      if ((uint64_t)(v14 - (_QWORD)v7) < 1)
        return v7;
    }
    v26 = &v7[8 * a5];
    v27 = (uint64_t *)&v22[-8 * a5];
    v28 = v22;
    if ((unint64_t)v27 < v14)
    {
      v28 = v22;
      do
      {
        v29 = *v27++;
        *(_QWORD *)v28 = v29;
        v28 += 8;
      }
      while ((unint64_t)v27 < v14);
    }
    a1[1] = v28;
    if (v22 != v26)
      memmove(&v22[-8 * ((v22 - v26) >> 3)], v7, v22 - v26);
    if (v21 != v9)
    {
      v30 = v7;
      do
      {
        v31 = *v9++;
        *(_QWORD *)v30 = v31;
        v30 += 8;
      }
      while (v9 != v21);
    }
    return v7;
  }
  v15 = a5 + ((uint64_t)(v14 - (_QWORD)v5) >> 3);
  if (v15 >> 61)
    sub_20B80CDD8();
  v16 = v6 >> 3;
  v17 = v12 - v5;
  if (v17 >> 2 > v15)
    v15 = v17 >> 2;
  if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
    v18 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v18 = v15;
  if (v18)
    v19 = (char *)sub_20B800BE8(v11, v18);
  else
    v19 = 0;
  v32 = &v19[8 * v16];
  v33 = &v32[8 * a5];
  v34 = 8 * a5;
  v35 = v32;
  do
  {
    v36 = *v9++;
    *(_QWORD *)v35 = v36;
    v35 += 8;
    v34 -= 8;
  }
  while (v34);
  v37 = (char *)*a1;
  v38 = v32;
  if (*a1 != v7)
  {
    v39 = v7;
    v38 = v32;
    do
    {
      v40 = *((_QWORD *)v39 - 1);
      v39 -= 8;
      *((_QWORD *)v38 - 1) = v40;
      v38 -= 8;
    }
    while (v39 != v37);
  }
  v41 = &v19[8 * v18];
  v42 = a1[1];
  v43 = v42 - v7;
  if (v42 != v7)
    memmove(v33, v7, v42 - v7);
  v44 = (void *)*a1;
  *a1 = v38;
  a1[1] = &v33[v43];
  a1[2] = v41;
  if (v44)
    operator delete(v44);
  return v32;
}

void sub_20B9AA0BC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  const UniChar *v8;
  unsigned int v9;
  CFStringRef v10;
  CFStringRef v11;
  unsigned int v12;
  unsigned int v13;

  *(_DWORD *)(a5 + 8) = 0;
  *(_QWORD *)a5 = &off_24C467C40;
  *(_QWORD *)(a5 + 16) = a2;
  *(_QWORD *)(a5 + 24) = a3;
  *(_QWORD *)(a5 + 40) = 0xFFFFFFFFLL;
  *(_QWORD *)(a5 + 32) = 32;
  v13 = 0;
  v8 = (const UniChar *)(a1 + 2 * a2);
  sub_20B9689F0(*(uint64_t **)(*(_QWORD *)(a4 + 72) + 8), (uint64_t)v8, a3, &v13);
  v9 = v13;
  if (!v13)
  {
    v10 = CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x24BDBD240], v8, a3);
    if (v10)
    {
      v11 = v10;
      v12 = (*(uint64_t (**)(_QWORD, CFStringRef))(**(_QWORD **)(*(_QWORD *)(a4 + 8) + 32) + 16))(*(_QWORD *)(*(_QWORD *)(a4 + 8) + 32), v10);
      if (v12 <= 0x1F3)
      {
        if (v12 == 3)
          v12 = 501;
        else
          v12 = sub_20B8D2AD4((uint64_t)v11);
      }
      v13 = v12;
      CFRelease(v11);
    }
    v9 = v13;
  }
  *(_DWORD *)(a5 + 8) = v9;
}

void sub_20B9AA1B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  sub_20B87E150(&a9, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9AA1C8(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  *(_QWORD *)a1 = &off_24C467C40;
  *(_DWORD *)(a1 + 8) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  v8 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2) + 8);
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = a4;
  *(_DWORD *)(a1 + 44) = 0;
  v9 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 72))(a2) + 8);
  if (v9)
  {
    v10 = 0;
    v11 = 0;
    do
    {
      v11 = v11
          + *(unsigned __int16 *)(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 72))(a2) + 2 * v10)
          - 48;
      if (v11 <= 0x20)
        *(_DWORD *)(a1 + 44) |= 1 << (v11 - 1);
      ++v10;
    }
    while (v9 != v10);
  }
  return a1;
}

uint64_t sub_20B9AA2B0(uint64_t result, int a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5, uint64_t a6, int a7)
{
  int v7;
  unint64_t v8;
  unsigned int v9;

  *(_QWORD *)result = &off_24C467C40;
  *(_DWORD *)(result + 8) = a2;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a4;
  *(_QWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 40) = a7;
  *(_DWORD *)(result + 44) = 0;
  if (a6 >= 1)
  {
    v7 = 0;
    v8 = 0;
    do
    {
      v9 = *a5++;
      v8 = v8 + v9 - 48;
      if (v8 <= 0x20)
      {
        v7 |= 1 << (v8 - 1);
        *(_DWORD *)(result + 44) = v7;
      }
      --a6;
    }
    while (a6);
  }
  return result;
}

uint64_t sub_20B9AA310(uint64_t a1, int a2, uint64_t a3)
{
  unsigned __int16 *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unsigned __int16 *v9;
  unsigned int v10;
  unsigned __int16 *v12;
  unsigned __int16 *v13;
  uint64_t v14;

  v12 = 0;
  v13 = 0;
  v14 = 0;
  sub_20B87ACC8(&v12, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 1);
  *(_QWORD *)a1 = &off_24C467C40;
  *(_DWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 40) = 0xFFFFFFFFLL;
  v5 = v12;
  if (v13 != v12)
  {
    v6 = 0;
    v7 = 0;
    v8 = v13 - v12;
    if (v8 <= 1)
      v8 = 1;
    v9 = v12;
    do
    {
      v10 = *v9++;
      v7 += v10;
      if (v7 <= 0x20)
      {
        v6 |= 1 << (v7 - 1);
        *(_DWORD *)(a1 + 44) = v6;
      }
      --v8;
    }
    while (v8);
    goto LABEL_10;
  }
  if (v13)
  {
LABEL_10:
    v13 = v5;
    operator delete(v5);
  }
  return a1;
}

BOOL sub_20B9AA3D8(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if ((v1 & 0x20) != 0)
    return 0;
  if ((v1 & 0x40) != 0)
    return *(_DWORD *)(a1 + 8) != 0;
  return *(_DWORD *)(a1 + 40) == 0;
}

CFStringRef sub_20B9AA40C(uint64_t a1)
{
  CFMutableStringRef Mutable;
  uint64_t v3;
  __int16 v4;
  UniChar chars;
  _QWORD v7[5];

  if ((*(_BYTE *)(a1 + 32) & 0x60) != 0)
    return 0;
  if (*(_DWORD *)(a1 + 44))
  {
    Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0);
    v7[0] = MEMORY[0x24BDAC760];
    v7[1] = 0x40000000;
    v7[2] = sub_20B9AA7B0;
    v7[3] = &unk_24C46C670;
    v7[4] = Mutable;
    sub_20B9AA4E4((unsigned int *)a1, 0, v3, 0, 0, 0, (uint64_t)v7);
  }
  else
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    chars = v4 + 48;
    return CFStringCreateWithCharacters(0, &chars, 1);
  }
  return Mutable;
}

UniChar *sub_20B9AA4E4(unsigned int *a1, uint64_t *a2, uint64_t a3, const __CFString *a4, const __CFString *a5, int a6, uint64_t a7)
{
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  CFIndex v23;
  CFIndex v24;
  UniChar *result;
  uint64_t v26;
  UniChar *v27;
  unint64_t v28;
  uint64_t v29;
  UniChar *v30;
  CFIndex v31;
  CFIndex v32;
  uint64_t v33;
  uint64_t v34;
  UniChar *v35;
  UniChar *v36;
  UniChar *v37;
  char v38;

  v13 = a1[11];
  if (v13)
  {
    v14 = 0;
    v15 = 0;
LABEL_3:
    v16 = v14;
    if (v15 <= 0x20)
      v17 = 32;
    else
      v17 = v15;
    while (v17 != v15)
    {
      v18 = v15++;
      if (((v13 >> v18) & 1) != 0)
      {
        v14 = v16 + 1;
        if (v15 - 1 < 0xFFFFFFFFFFFFFFFELL)
          goto LABEL_3;
        break;
      }
    }
  }
  else
  {
    v16 = 0;
  }
  (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  v20 = v19;
  v38 = 0;
  if (v16 < 2)
    return (UniChar *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD, char *))(a7 + 16))(a7, 0, v19, a1[2], &v38);
  v21 = 0;
  while (v21 != 32)
  {
    v22 = a1[11] << v21++;
    if ((v22 & 0x80000000) != 0)
      goto LABEL_17;
  }
  v21 = -1;
LABEL_17:
  if (33 - v21 != v19)
    return (UniChar *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD, char *))(a7 + 16))(a7, 0, v19, a1[2], &v38);
  if (!a4)
  {
    v35 = 0;
    v37 = 0;
LABEL_24:
    v26 = 0;
    v27 = 0;
    do
    {
      v28 = sub_20B980FEC(a1[11], (unint64_t *)&v37, a6);
      if (!v28)
        break;
      v29 = v28;
      if (a5 && v28 == 1)
      {
        v30 = v27;
        if (!v27)
        {
          v31 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
          sub_20B8D06F4(a5, v31, v32, &v36);
          v27 = v36;
          v30 = v36;
        }
      }
      else
      {
        v30 = v35;
      }
      v33 = 0;
      LODWORD(v36) = 0;
      v34 = v29 + v26;
      if (a6)
        v26 = v20 - (v29 + v26);
      if (a2 && v30)
      {
        sub_20B9689F0(a2, (uint64_t)&v30[v26], v29, &v36);
        v33 = v36;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(a7 + 16))(a7, v26, v29, v33, &v38);
      if (v37 == (UniChar *)-1)
        break;
      v26 = v34;
    }
    while (!v38);
    if (v27)
      MEMORY[0x20BD39C80](v27, 0x1000C80BDFB0063);
    result = v35;
    goto LABEL_41;
  }
  v23 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  sub_20B8D06F4(a4, v23, v24, &v37);
  result = v37;
  v37 = 0;
  if (!v38)
  {
    v35 = result;
    goto LABEL_24;
  }
LABEL_41:
  if (result)
    return (UniChar *)MEMORY[0x20BD39C80](result, 0x1000C80BDFB0063);
  return result;
}

void sub_20B9AA760(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x20BD39C80](a9, 0x1000C80BDFB0063);
  _Unwind_Resume(exception_object);
}

void sub_20B9AA7B0(uint64_t a1, uint64_t a2, __int16 a3)
{
  const __CFString *v4;
  UniChar chars;

  chars = a3 + 48;
  v4 = CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x24BDBD240], &chars, 1);
  CFStringAppend(*(CFMutableStringRef *)(a1 + 32), v4);
  if (v4)
    CFRelease(v4);
}

void sub_20B9AA818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  sub_20B87E150(&a9, 0);
  _Unwind_Resume(a1);
}

CFStringRef sub_20B9AA830(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  const __CFString *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CFIndex v10;
  CFIndex v11;
  uint64_t v12;
  uint64_t v13;
  void *__p;
  _BYTE *v16;
  uint64_t v17;
  CFRange v18;

  if ((a1[32] & 0x10) == 0)
    return 0;
  v3 = (const __CFString *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 64))(a1);
  if (v3)
  {
    (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 24))(a1);
    if (a3 >= v7)
      return CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], v3);
    v17 = 0;
    (*(void (**)(void **__return_ptr, _BYTE *))(*(_QWORD *)a1 + 56))(&__p, a1);
    v8 = a2 + a3;
    if (a2 + a3 >= (unint64_t)((v16 - (_BYTE *)__p) >> 1))
      goto LABEL_18;
    if (v8)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      do
      {
        v12 = *((unsigned __int16 *)__p + v9);
        if (v9 >= a2)
          v13 = 0;
        else
          v13 = *((unsigned __int16 *)__p + v9);
        v11 += v13;
        if (v9 < a2)
          v12 = 0;
        v10 += v12;
        ++v9;
      }
      while (v8 != v9);
    }
    else
    {
      v11 = 0;
      v10 = 0;
    }
    if (v10 + v11 <= (unint64_t)CFStringGetLength(v3))
    {
      v18.location = v11;
      v18.length = v10;
      v3 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x24BDBD240], v3, v18);
    }
    else
    {
LABEL_18:
      v3 = 0;
    }
    if (__p)
    {
      v16 = __p;
      operator delete(__p);
    }
  }
  return v3;
}

void sub_20B9AA980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, const void *a12)
{
  if (__p)
    operator delete(__p);
  sub_20B87E150(&a12, 0);
  _Unwind_Resume(a1);
}

__CFString *sub_20B9AA9B0(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  __CFString *Mutable;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t i;
  UniChar chars;
  __CFString *v15;
  void *__p;
  void *v17;

  if ((a1[32] & 0x10) == 0)
    return 0;
  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 56))(&__p);
  v7 = v17;
  v8 = (_BYTE *)v17 - (_BYTE *)__p;
  if (v17 == __p)
  {
    Mutable = 0;
    if (!v17)
      return Mutable;
    goto LABEL_16;
  }
  v15 = 0;
  (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 24))(a1);
  if (a3 >= v9)
  {
    Mutable = sub_20B8D3518(&__p);
  }
  else
  {
    v10 = v8 >> 1;
    Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], v10);
    v15 = Mutable;
    v11 = a2 + a3;
    if (v11 && v11 < v10)
    {
      for (i = 0; i != v11; ++i)
      {
        if (i >= a2)
        {
          chars = 0;
          chars = *((_WORD *)__p + i) + 48;
          CFStringAppendCharacters(Mutable, &chars, 1);
        }
      }
    }
  }
  v7 = __p;
  if (__p)
  {
LABEL_16:
    v17 = v7;
    operator delete(v7);
  }
  return Mutable;
}

void sub_20B9AAAC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, const void *a11, void *__p, uint64_t a13)
{
  sub_20B87E150(&a11, 0);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_20B9AAAFC()
{
  JUMPOUT(0x20BD39CB0);
}

double sub_20B9AAB10(uint64_t a1, unsigned __int16 **a2, unsigned __int16 **a3, uint64_t *a4, uint64_t a5, int a6, int a7, char a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned __int16 *v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  BOOL v15;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  int v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  int v46;
  char *v47;
  unint64_t v48;
  _WORD *v49;
  double v50;
  double v51;
  unsigned __int16 *v52;
  unsigned __int16 *v53;
  char *v54;
  char *v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int16 v70;
  __int16 v71;
  __int16 v72;
  uint64_t v73;
  unint64_t v74;
  int v75;
  int v76;
  char *v77;
  char *v78;
  __int16 v79;
  uint64_t v80;
  unint64_t v81;
  int v82;
  int v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  int v90;
  int v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char *v111;
  int *v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  int *v116;
  int v117;
  __int16 v118;
  uint64_t v119;
  uint64_t v120;
  double v121;
  unsigned __int16 *v122;
  uint64_t v123;
  __int16 v124;
  unint64_t v125;
  unint64_t v126;
  int v127;
  int v128;
  char *v129;
  char *v130;
  char *v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  char *v136;
  int *v137;
  int v138;
  uint64_t v139;
  int *v140;
  int v141;
  unsigned __int16 *v142;
  uint64_t v143;
  double v144;
  char *v146;
  _WORD *v152;
  unint64_t v153;
  uint64_t v155;
  unsigned __int16 *v157;
  uint64_t v158;
  unsigned __int16 *v159;
  unint64_t v160;
  void *v161;
  char *v162;
  unint64_t v163;
  void *__p;
  char *v165;
  char *v166;
  unint64_t v167;

  v8 = 32;
  if (a7)
    v8 = 24;
  v155 = *(_QWORD *)(a1 + v8);
  v161 = 0;
  v162 = 0;
  v163 = 0;
  v9 = *a4;
  if (a4[1] == *a4)
  {
    v36 = 0;
    v33 = 0;
    v32 = 0;
    goto LABEL_48;
  }
  v10 = 0;
  v11 = *a2;
  do
  {
    if (!*(_WORD *)(v9 + 40 * v10 + 34)
      && *(unsigned __int16 *)(v9 + 40 * v10 + 30) == *(unsigned __int16 *)(v9 + 40 * v10 + 32))
    {
      v12 = *(unsigned __int16 *)(v9 + 40 * v10 + 24);
      if (!v11 || !*(_WORD *)(v9 + 40 * v10 + 24))
        goto LABEL_41;
      v13 = *v11;
      if ((v13 - 48) >= 0xA && (unsigned __int16)(v13 + 240) >= 0xAu)
      {
        v14 = 1;
        v15 = 1;
        do
        {
          if (sub_20B8DA100(v13))
            break;
          v15 = v14 < v12;
          if (v12 == v14)
            break;
          v13 = v11[v14++];
        }
        while ((v13 - 48) >= 0xA && (unsigned __int16)(v13 + 240) >= 0xAu);
        v9 = *a4;
        if (!v15)
        {
          LODWORD(v12) = *(unsigned __int16 *)(v9 + 40 * v10 + 24);
          goto LABEL_41;
        }
      }
    }
    LODWORD(v12) = *(unsigned __int16 *)(v9 + 40 * v10 + 24);
    if (v12 >= 2)
    {
      v17 = 0;
      do
      {
        if (ublock_getCode(v11[v17]) != UBLOCK_HIGH_SURROGATES)
        {
          v18 = v162;
          if ((unint64_t)v162 >= v163)
          {
            v20 = 0xAAAAAAAAAAAAAAABLL * ((v162 - (_BYTE *)v161) >> 2);
            v21 = v20 + 1;
            if ((unint64_t)(v20 + 1) > 0x1555555555555555)
              sub_20B80CDD8();
            if (0x5555555555555556 * ((uint64_t)(v163 - (_QWORD)v161) >> 2) > v21)
              v21 = 0x5555555555555556 * ((uint64_t)(v163 - (_QWORD)v161) >> 2);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v163 - (_QWORD)v161) >> 2) >= 0xAAAAAAAAAAAAAAALL)
              v22 = 0x1555555555555555;
            else
              v22 = v21;
            sub_20B9AC768(&__p, v22, v20, (uint64_t)&v163);
            v23 = v166;
            *(_DWORD *)v166 = v10;
            *((_DWORD *)v23 + 1) = v17;
            *((_DWORD *)v23 + 2) = -1;
            v19 = v23 + 12;
            v166 = v23 + 12;
            v25 = (char *)v161;
            v24 = v162;
            v26 = v165;
            if (v162 == v161)
            {
              v29 = v162;
            }
            else
            {
              do
              {
                v27 = *(_QWORD *)(v24 - 12);
                v24 -= 12;
                v28 = *((_DWORD *)v24 + 2);
                *(_QWORD *)(v26 - 12) = v27;
                v26 -= 12;
                *((_DWORD *)v26 + 2) = v28;
              }
              while (v24 != v25);
              v29 = (char *)v161;
              v24 = v162;
              v19 = v166;
            }
            v161 = v26;
            v162 = v19;
            v30 = v163;
            v163 = v167;
            __p = v29;
            v166 = v24;
            v167 = v30;
            v165 = v29;
            if (v24 != v29)
              v166 = &v24[-12 - 12 * ((v24 - v29 - 12) / 0xCuLL)];
            if (v29)
              operator delete(v29);
          }
          else
          {
            *(_DWORD *)v162 = v10;
            *((_DWORD *)v18 + 1) = v17;
            v19 = v18 + 12;
            *((_DWORD *)v18 + 2) = -1;
          }
          v162 = v19;
        }
        ++v17;
        v9 = *a4;
      }
      while (v17 < *(unsigned __int16 *)(*a4 + 40 * v10 + 24) - 1);
      LODWORD(v12) = *(unsigned __int16 *)(*a4 + 40 * v10 + 24);
    }
LABEL_41:
    v11 += v12;
    ++v10;
    v31 = 0xCCCCCCCCCCCCCCCDLL * ((a4[1] - v9) >> 3);
  }
  while (v31 > v10);
  v33 = v162;
  v32 = v163;
  if ((unint64_t)v162 < v163)
  {
    *(_QWORD *)v162 = -1;
    *((_DWORD *)v33 + 2) = -1;
    v34 = v33 + 12;
    v35 = a5;
    goto LABEL_63;
  }
  v36 = v161;
LABEL_48:
  v37 = 0xAAAAAAAAAAAAAAABLL * ((v33 - v36) >> 2);
  if ((unint64_t)(v37 + 1) > 0x1555555555555555)
    sub_20B80CDD8();
  v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v32 - (_QWORD)v36) >> 2);
  v39 = 2 * v38;
  if (2 * v38 <= v37 + 1)
    v39 = v37 + 1;
  if (v38 >= 0xAAAAAAAAAAAAAAALL)
    v40 = 0x1555555555555555;
  else
    v40 = v39;
  sub_20B9AC768(&__p, v40, v37, (uint64_t)&v163);
  v41 = v166;
  *(_QWORD *)v166 = -1;
  *((_DWORD *)v41 + 2) = -1;
  v34 = v41 + 12;
  v166 = v41 + 12;
  v43 = (char *)v161;
  v42 = v162;
  v44 = v165;
  v35 = a5;
  if (v162 == v161)
  {
    v47 = v162;
  }
  else
  {
    do
    {
      v45 = *(_QWORD *)(v42 - 12);
      v42 -= 12;
      v46 = *((_DWORD *)v42 + 2);
      *(_QWORD *)(v44 - 12) = v45;
      v44 -= 12;
      *((_DWORD *)v44 + 2) = v46;
    }
    while (v42 != v43);
    v47 = (char *)v161;
    v42 = v162;
    v34 = v166;
  }
  v161 = v44;
  v162 = v34;
  v48 = v163;
  v163 = v167;
  __p = v47;
  v166 = v42;
  v167 = v48;
  v165 = v47;
  if (v42 != v47)
    v166 = &v47[(v42 - v47 - 12) % 0xCuLL];
  if (v47)
    operator delete(v47);
  v31 = 0xCCCCCCCCCCCCCCCDLL * ((a4[1] - *a4) >> 3);
LABEL_63:
  v162 = v34;
  __p = 0;
  v165 = 0;
  v166 = 0;
  sub_20B820518(&__p, v31 + 1);
  v49 = v161;
  v146 = v34;
  if (v161 == v34)
  {
    v51 = -1.79769313e308;
  }
  else
  {
    v153 = v35 + 1;
    v50 = 0.0;
    v51 = -1.79769313e308;
    do
    {
      v52 = *a2;
      v53 = *a3;
      v54 = (char *)__p;
      v165 = (char *)__p;
      if (a6)
      {
        if (__p >= v166)
        {
          v56 = (v166 - (_BYTE *)__p) >> 1;
          if (v56 <= 1)
            v56 = 1;
          if ((unint64_t)(v166 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFCLL)
            v57 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v57 = v56;
          v59 = (char *)sub_20B8127BC((uint64_t)&v166, v57);
          v60 = (char *)__p;
          v61 = v165;
          *(_DWORD *)v59 = 1;
          v55 = v59 + 4;
          v62 = v59;
          while (v61 != v60)
          {
            v63 = *((_DWORD *)v61 - 1);
            v61 -= 4;
            *((_DWORD *)v62 - 1) = v63;
            v62 -= 4;
          }
          __p = v62;
          v165 = v59 + 4;
          v166 = &v59[4 * v58];
          if (v60)
            operator delete(v60);
        }
        else
        {
          *(_DWORD *)__p = 1;
          v55 = v54 + 4;
        }
        v165 = v55;
      }
      v152 = v49;
      v64 = *a4;
      v65 = a4[1] - *a4;
      if (v65)
      {
        v66 = 0;
        v67 = 0xCCCCCCCCCCCCCCCDLL * (v65 >> 3);
        do
        {
          if (v66 == v35 && v66 < v67 - 1)
          {
            v68 = v64 + 40 * v35;
            v69 = v64 + 40 * v153;
            v70 = *(_WORD *)(v69 + 24);
            v71 = *(_WORD *)(v68 + 28);
            v72 = *(_WORD *)(v69 + 28);
            v73 = (unsigned __int16)(v70 + *(_WORD *)(v68 + 24));
            if (v52)
              v74 = (unsigned __int16)(v70 + *(_WORD *)(v68 + 24));
            else
              v74 = 0;
            v75 = sub_20BA2F950(v155, v52, v74, *(_DWORD *)v68);
            v76 = v75;
            v77 = v165;
            if (v165 >= v166)
            {
              v94 = (char *)__p;
              v95 = (v165 - (_BYTE *)__p) >> 2;
              v96 = v95 + 1;
              if ((unint64_t)(v95 + 1) >> 62)
                sub_20B80CDD8();
              v97 = v166 - (_BYTE *)__p;
              if ((v166 - (_BYTE *)__p) >> 1 > v96)
                v96 = v97 >> 1;
              if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFFCLL)
                v98 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v98 = v96;
              if (v98)
              {
                v99 = (char *)sub_20B8127BC((uint64_t)&v166, v98);
                v94 = (char *)__p;
                v77 = v165;
              }
              else
              {
                v99 = 0;
              }
              v112 = (int *)&v99[4 * v95];
              *v112 = v76;
              v78 = (char *)(v112 + 1);
              while (v77 != v94)
              {
                v113 = *((_DWORD *)v77 - 1);
                v77 -= 4;
                *--v112 = v113;
              }
              __p = v112;
              v165 = v78;
              v166 = &v99[4 * v98];
              if (v94)
                operator delete(v94);
            }
            else
            {
              *(_DWORD *)v165 = v75;
              v78 = v77 + 4;
            }
            v165 = v78;
            v159 = v52;
            v160 = v74;
            v114 = (unsigned __int16)(v72 + v71);
            if (v53)
              v115 = (unsigned __int16)(v72 + v71);
            else
              v115 = 0;
            v157 = v53;
            v158 = v115;
            v50 = v50
                + sub_20B9AB6C0(v76, &v159, &v157, *(_DWORD *)(*a4 + 40 * v35), *(unsigned __int16 *)(*a4 + 40 * v35 + 32), **(_DWORD **)(a1 + 16));
            v52 += v73;
            v66 = v153;
            v53 += v114;
          }
          else if (v66 == *(_DWORD *)v152)
          {
            v79 = v152[4];
            v80 = (unsigned __int16)(v152[2] + 1);
            if (v52)
              v81 = (unsigned __int16)(v152[2] + 1);
            else
              v81 = 0;
            v82 = sub_20BA2F950(v155, v52, v81, *(_DWORD *)(v64 + 40 * v66));
            v83 = v82;
            v84 = v165;
            if (v165 >= v166)
            {
              v100 = (char *)__p;
              v101 = (v165 - (_BYTE *)__p) >> 2;
              v102 = v101 + 1;
              if ((unint64_t)(v101 + 1) >> 62)
                sub_20B80CDD8();
              v103 = v166 - (_BYTE *)__p;
              if ((v166 - (_BYTE *)__p) >> 1 > v102)
                v102 = v103 >> 1;
              if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFFFCLL)
                v104 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v104 = v102;
              if (v104)
              {
                v105 = (char *)sub_20B8127BC((uint64_t)&v166, v104);
                v100 = (char *)__p;
                v84 = v165;
              }
              else
              {
                v105 = 0;
              }
              v116 = (int *)&v105[4 * v101];
              *v116 = v83;
              v85 = (char *)(v116 + 1);
              while (v84 != v100)
              {
                v117 = *((_DWORD *)v84 - 1);
                v84 -= 4;
                *--v116 = v117;
              }
              __p = v116;
              v165 = v85;
              v166 = &v105[4 * v104];
              if (v100)
                operator delete(v100);
            }
            else
            {
              *(_DWORD *)v165 = v82;
              v85 = v84 + 4;
            }
            v118 = v79 + 1;
            v165 = v85;
            v159 = v52;
            v160 = v81;
            v119 = (unsigned __int16)(v79 + 1);
            if (v53)
              v120 = v119;
            else
              v120 = 0;
            v157 = v53;
            v158 = v120;
            v121 = sub_20B9AB6C0(v83, &v159, &v157, *(_DWORD *)(*a4 + 40 * v66), *(unsigned __int16 *)(*a4 + 40 * v66 + 32), **(_DWORD **)(a1 + 16));
            v122 = &v52[v80];
            v123 = *a4 + 40 * v66;
            v124 = *(_WORD *)(v123 + 28);
            v125 = (unsigned __int16)(*(_WORD *)(v123 + 24) - v80);
            if (v52)
              v126 = v125;
            else
              v126 = 0;
            v127 = sub_20BA2F950(v155, v122, v126, *(_DWORD *)v123);
            v128 = v127;
            v129 = v165;
            if (v165 >= v166)
            {
              v131 = (char *)__p;
              v132 = (v165 - (_BYTE *)__p) >> 2;
              v133 = v132 + 1;
              if ((unint64_t)(v132 + 1) >> 62)
                sub_20B80CDD8();
              v134 = v166 - (_BYTE *)__p;
              if ((v166 - (_BYTE *)__p) >> 1 > v133)
                v133 = v134 >> 1;
              if ((unint64_t)v134 >= 0x7FFFFFFFFFFFFFFCLL)
                v135 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v135 = v133;
              if (v135)
              {
                v136 = (char *)sub_20B8127BC((uint64_t)&v166, v135);
                v131 = (char *)__p;
                v129 = v165;
              }
              else
              {
                v136 = 0;
              }
              v140 = (int *)&v136[4 * v132];
              *v140 = v128;
              v130 = (char *)(v140 + 1);
              while (v129 != v131)
              {
                v141 = *((_DWORD *)v129 - 1);
                v129 -= 4;
                *--v140 = v141;
              }
              __p = v140;
              v165 = v130;
              v166 = &v136[4 * v135];
              if (v131)
                operator delete(v131);
            }
            else
            {
              *(_DWORD *)v165 = v127;
              v130 = v129 + 4;
            }
            v142 = &v53[v119];
            v165 = v130;
            v159 = v122;
            v160 = v126;
            if (v53)
              v143 = (unsigned __int16)(v124 - v118);
            else
              v143 = 0;
            v157 = v142;
            v158 = v143;
            v50 = v50
                + v121
                + sub_20B9AB6C0(v128, &v159, &v157, *(_DWORD *)(*a4 + 40 * v66), *(unsigned __int16 *)(*a4 + 40 * v66 + 32), **(_DWORD **)(a1 + 16));
            v52 = &v122[v125];
            v53 = &v142[(unsigned __int16)(v124 - v118)];
            v35 = a5;
          }
          else
          {
            v86 = v64 + 40 * v66;
            v87 = *(unsigned __int16 *)(v86 + 24);
            v88 = *(unsigned __int16 *)(v86 + 28);
            if (v52)
              v89 = *(unsigned __int16 *)(v86 + 24);
            else
              v89 = 0;
            v90 = sub_20BA2F950(v155, v52, v89, *(_DWORD *)v86);
            v91 = v90;
            v92 = v165;
            if (v165 >= v166)
            {
              v106 = (char *)__p;
              v107 = (v165 - (_BYTE *)__p) >> 2;
              v108 = v107 + 1;
              if ((unint64_t)(v107 + 1) >> 62)
                sub_20B80CDD8();
              v109 = v166 - (_BYTE *)__p;
              if ((v166 - (_BYTE *)__p) >> 1 > v108)
                v108 = v109 >> 1;
              if ((unint64_t)v109 >= 0x7FFFFFFFFFFFFFFCLL)
                v110 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v110 = v108;
              if (v110)
              {
                v111 = (char *)sub_20B8127BC((uint64_t)&v166, v110);
                v106 = (char *)__p;
                v92 = v165;
              }
              else
              {
                v111 = 0;
              }
              v137 = (int *)&v111[4 * v107];
              *v137 = v91;
              v93 = (char *)(v137 + 1);
              while (v92 != v106)
              {
                v138 = *((_DWORD *)v92 - 1);
                v92 -= 4;
                *--v137 = v138;
              }
              __p = v137;
              v165 = v93;
              v166 = &v111[4 * v110];
              if (v106)
                operator delete(v106);
            }
            else
            {
              *(_DWORD *)v165 = v90;
              v93 = v92 + 4;
            }
            v165 = v93;
            v159 = v52;
            v160 = v89;
            if (v53)
              v139 = v88;
            else
              v139 = 0;
            v157 = v53;
            v158 = v139;
            v50 = v50
                + sub_20B9AB6C0(v91, &v159, &v157, *(_DWORD *)(*a4 + 40 * v66), *(unsigned __int16 *)(*a4 + 40 * v66 + 32), **(_DWORD **)(a1 + 16));
            v52 += v87;
            v53 += v88;
          }
          ++v66;
          v64 = *a4;
          v67 = 0xCCCCCCCCCCCCCCCDLL * ((a4[1] - *a4) >> 3);
        }
        while (v66 < v67);
      }
      v144 = v50;
      if ((a8 & 1) == 0)
        v144 = v50 + sub_20BA30348(v155, __p, (v165 - (_BYTE *)__p) >> 2);
      if (v51 < v144)
        v51 = v144;
      v49 = v152 + 6;
    }
    while (v152 + 6 != (_WORD *)v146);
  }
  if (__p)
  {
    v165 = (char *)__p;
    operator delete(__p);
  }
  if (v161)
  {
    v162 = (char *)v161;
    operator delete(v161);
  }
  return v51;
}

void sub_20B9AB644(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30)
{
  if (__p)
    operator delete(__p);
  if (a26)
    operator delete(a26);
  _Unwind_Resume(exception_object);
}

double sub_20B9AB6C0(int a1, unsigned __int16 **a2, unsigned __int16 **a3, int a4, int a5, int a6)
{
  UChar32 v11;
  unint64_t v13;
  unsigned __int16 *v14;
  uint64_t v15;
  unsigned int v16;
  UChar32 v17;
  unsigned __int16 *v18;
  int v19;
  BOOL v20;
  int v21;
  double v22;
  BOOL v23;
  unint64_t v25;
  unsigned __int16 *v26;
  BOOL v27;
  unint64_t i;
  unsigned __int16 v29;
  unsigned int v30;
  unsigned __int16 v31;
  unsigned __int16 *v34;
  BOOL v35;
  unsigned __int16 *j;
  unsigned __int16 v37;
  unsigned int v38;
  unsigned __int16 v39;
  BOOL v42;
  unint64_t k;
  UBlockCode Code;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  int32_t IntPropertyValue;
  BOOL v50;
  int32_t v51;
  BOOL v52;
  int v53;

  if (a3[1] != (unsigned __int16 *)1)
    goto LABEL_15;
  v11 = **a3;
  if (v11 == 9787 || (u_charType(v11) - 19) > 0xA)
    goto LABEL_15;
  if ((a6 & 0x1000000) != 0)
  {
    v14 = *a2;
    v13 = (unint64_t)a2[1];
    if (*a2 && v13 && *v14 - 48 <= 9)
    {
      v15 = 1;
      while (v13 != v15)
      {
        v16 = v14[v15++] - 48;
        if (v16 >= 0xA)
        {
          if (v15 - 1 >= v13)
            goto LABEL_15;
          goto LABEL_13;
        }
      }
      goto LABEL_15;
    }
  }
  else
  {
    v13 = (unint64_t)a2[1];
  }
LABEL_13:
  if (v13 != 1
    || (v17 = **a3, v17 != **a2)
    && ((IntPropertyValue = u_getIntPropertyValue(v17, UCHAR_EAST_ASIAN_WIDTH), IntPropertyValue != 3)
      ? (v50 = IntPropertyValue == 5)
      : (v50 = 1),
        v50
     || (v51 = u_getIntPropertyValue(**a2, UCHAR_EAST_ASIAN_WIDTH),
         v51 != 5 ? (v52 = v51 == 3) : (v52 = 1),
         !v52 || (v53 = **a3, v53 != sub_20B8D9E14(**a2)))))
  {
    if ((a6 & 0x4000000) != 0)
      return -100.0;
    else
      return -10.0;
  }
LABEL_15:
  if (a1)
  {
    if (a1 == 3 && a2[1] == (unsigned __int16 *)3)
    {
      v18 = *a2;
      if ((*a2)[1] == 12289)
      {
        v19 = *v18;
        v20 = (v19 - 48) >= 0xA && (unsigned __int16)(v19 + 240) >= 0xAu;
        if (!v20 || sub_20B8D9FF4(v19))
        {
          v21 = v18[2];
          v22 = -2.0;
          v23 = (v21 - 48) >= 0xA && (unsigned __int16)(v21 + 240) >= 0xAu;
          if (!v23 || sub_20B8D9FF4(v21))
            return v22;
        }
      }
    }
    return 0.0;
  }
  if ((a4 - 3) < 4)
    return 0.0;
  v26 = *a2;
  v25 = (unint64_t)a2[1];
  if (v25)
  {
    v27 = 0;
    for (i = 0; i != v25; v27 = i >= v25)
    {
      v29 = v26[i];
      v20 = (unsigned __int16)((v29 & 0xFFDF) - 65) >= 0x1Au;
      v30 = (unsigned __int16)(v29 + 191);
      v31 = v29 + 223;
      if (v20 && v30 >= 0x1A && v31 > 0x19u)
        break;
      ++i;
    }
    if (!v27)
      goto LABEL_59;
  }
  v34 = a3[1];
  if (!v34)
    goto LABEL_59;
  v35 = 0;
  for (j = 0; j != v34; v35 = j >= v34)
  {
    v37 = (*a3)[(_QWORD)j];
    v20 = (unsigned __int16)((v37 & 0xFFDF) - 65) >= 0x1Au;
    v38 = (unsigned __int16)(v37 + 191);
    v39 = v37 + 223;
    if (v20 && v38 >= 0x1A && v39 > 0x19u)
      break;
    j = (unsigned __int16 *)((char *)j + 1);
  }
  v22 = -1.0;
  if (v35)
  {
LABEL_59:
    if (v25 > 2 || !v26 || !v25)
      return 0.0;
    v42 = 0;
    for (k = 0; k != v25; v42 = k >= v25)
    {
      Code = ublock_getCode(v26[k]);
      if ((Code - 58) > 0x25 || ((1 << (Code - 58)) & 0x3000203003) == 0)
        break;
      if (sub_20B8DA100(v26[k]))
        break;
      ++k;
    }
    v22 = 0.0;
    if (v42)
    {
      sub_20B8B2334(0);
      v46 = (uint64_t *)(&off_24C499C48 + 2 * word_20BA3BB2A[7 * a5 + 1]);
      if (v46[1] == 4)
      {
        v47 = 0;
        v48 = *v46;
        v22 = -2.5;
        while (asc_20BA928CA[v47] == *(_WORD *)(v48 + v47 * 2))
        {
          if (++v47 == 4)
            return v22;
        }
      }
      return -1.0;
    }
  }
  return v22;
}

void sub_20B9ABA44(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *__p;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;

  if (!a3 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3))
    return;
  v10 = 32;
  if (a4)
    v10 = 24;
  v11 = *(_QWORD *)(a1 + v10);
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 96))(a3);
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  __p = 0;
  v22 = 0;
  v23 = 0;
  sub_20B9C3090(a2, a3, &v27, &v24, &__p, *(_QWORD *)(v11 + 32) - 1);
  if (v12 == 76 || v12 == 74)
  {
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 408))(a3) && (a5 & 1) == 0)
    {
      sub_20B9AAB10(a1, (unsigned __int16 **)&v27, (unsigned __int16 **)&v24, (uint64_t *)&__p, -1, 0, a4, 1);
      goto LABEL_26;
    }
LABEL_13:
    v14 = *(_QWORD *)(a2 + 8);
    v13 = *(_QWORD *)(a2 + 16);
    if (v12 != 70 || v13 == v14)
      v16 = -1;
    else
      v16 = 0xCCCCCCCCCCCCCCCDLL * ((v13 - v14) >> 3) - 1;
    sub_20B9AAB10(a1, (unsigned __int16 **)&v27, (unsigned __int16 **)&v24, (uint64_t *)&__p, v16, 0, a4, 0);
    if (v13 == v14)
      sub_20B9AAB10(a1, (unsigned __int16 **)&v27, (unsigned __int16 **)&v24, (uint64_t *)&__p, v16, 1, a4, 0);
    v17 = *(_QWORD *)(a1 + 40);
    v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 408))(a3);
    (*(void (**)(uint64_t, void **, void **, void **, uint64_t))(*(_QWORD *)v17 + 24))(v17, &v27, &v24, &__p, v18);
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3) >= *(_QWORD *)(v11 + 32)
                                                                                              - 1)
      v19 = *(_QWORD *)(v11 + 32) - 1;
    else
      v19 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
    sub_20B8F2C74((uint64_t)&__p, v19);
    if (v13 != v14)
      sub_20B9AAB10(a1, (unsigned __int16 **)&v27, (unsigned __int16 **)&v24, (uint64_t *)&__p, -1, 0, a4, 0);
    goto LABEL_26;
  }
  if (v12 != 71)
    goto LABEL_13;
  (*(double (**)(uint64_t))(*(_QWORD *)a3 + 392))(a3);
LABEL_26:
  v20 = 112;
  if (a5)
    v20 = 384;
  (*(void (**)(uint64_t))(*(_QWORD *)a3 + v20))(a3);
  sub_20B896F94();
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
  if (v24)
  {
    v25 = v24;
    operator delete(v24);
  }
  if (v27)
  {
    v28 = v27;
    operator delete(v27);
  }
}

void sub_20B9ABDE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_20B9ABE30(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  double *v7;
  uint64_t v8;
  double *v9;
  double *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  double *v25;
  NSObject *v26;
  NSObject *v27;
  unint64_t v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  int v32;
  double *v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  const void *v37;
  int v38;
  int v39;
  void *v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  double *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  int v49;
  int v51;
  uint64_t v52;
  unint64_t v53;
  const __CFString *v54;
  unint64_t Length;
  int v56;
  BOOL v57;
  BOOL v58;
  int v59;
  char *v60;
  _QWORD *v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  double *v73;
  uint64_t v74;
  double v75;
  int v76;
  double *v77;
  NSObject *v78;
  _QWORD *v79;
  _QWORD *i;
  uint64_t v81;
  NSObject *v82;
  uint64_t v83;
  int v84;
  int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  _BYTE buf[24];
  int v91;
  __int16 v92;
  uint64_t v93;
  __int16 v94;
  uint64_t v95;
  uint8_t v96[4];
  uint64_t v97;
  __int16 v98;
  int v99;
  uint64_t v100;

  v100 = *MEMORY[0x24BDAC8D0];
  if (!a1[3] || !a1[4])
    return;
  v6 = a1[1];
  if (*(_WORD *)(v6 + 304))
  {
    v7 = (double *)sub_20B871730(*(unsigned __int16 *)(v6 + 304));
    v9 = &v7[3 * v8];
    v10 = v7;
  }
  else
  {
    v10 = 0;
    v9 = 0;
  }
  v11 = a2[6];
  if (a2[7] == v11)
    goto LABEL_118;
  v12 = 0;
  v13 = (unint64_t)v10;
  do
  {
    v14 = *(_QWORD *)(v11 + 8 * v12);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 408))(v14) == 1)
      break;
    sub_20B9ABA44((uint64_t)a1, a3, v14, 1, 0);
    v16 = v15;
    sub_20B9ABA44((uint64_t)a1, a3, v14, 0, 1);
    v18 = v17;
    if (v13 >= (unint64_t)v9)
    {
      v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (_QWORD)v10) >> 3) + 1;
      if (v19 > 0xAAAAAAAAAAAAAAALL)
        sub_20B80CDD8();
      if (0x5555555555555556 * (v9 - v10) > v19)
        v19 = 0x5555555555555556 * (v9 - v10);
      if (0xAAAAAAAAAAAAAAABLL * (v9 - v10) >= 0x555555555555555)
        v20 = 0xAAAAAAAAAAAAAAALL;
      else
        v20 = v19;
      if (v20)
        v20 = (unint64_t)sub_20B871730(v20);
      else
        v21 = 0;
      v22 = v20 + 8 * ((uint64_t)(v13 - (_QWORD)v10) >> 3);
      *(_DWORD *)v22 = v12;
      *(_QWORD *)(v22 + 8) = v16;
      *(_QWORD *)(v22 + 16) = v18;
      if ((double *)v13 == v10)
      {
        v25 = (double *)(v20 + 8 * ((uint64_t)(v13 - (_QWORD)v10) >> 3));
      }
      else
      {
        v23 = v20 + 8 * ((uint64_t)(v13 - (_QWORD)v10) >> 3);
        do
        {
          v24 = *(_OWORD *)(v13 - 24);
          v25 = (double *)(v23 - 24);
          *(_QWORD *)(v23 - 8) = *(_QWORD *)(v13 - 8);
          *(_OWORD *)(v23 - 24) = v24;
          v13 -= 24;
          v23 -= 24;
        }
        while ((double *)v13 != v10);
      }
      v9 = (double *)(v20 + 24 * v21);
      v13 = v22 + 24;
      if (v10)
        operator delete(v10);
      v10 = v25;
    }
    else
    {
      *(_DWORD *)v13 = v12;
      *(_QWORD *)(v13 + 8) = v16;
      *(_QWORD *)(v13 + 16) = v17;
      v13 += 24;
    }
    ++v12;
    v11 = a2[6];
  }
  while (v12 < (a2[7] - v11) >> 3);
  if (v10 == (double *)v13)
    goto LABEL_118;
  *(_QWORD *)buf = sub_20B9AC714;
  v89 = (uint64_t)(v13 - (_QWORD)v10) / 24;
  sub_20B9AC7E0((uint64_t)v10, v13, (uint64_t (**)(__int128 *, __int128 *))buf, 126 - 2 * __clz(v89), 1);
  v26 = sub_20B9A7C5C(0xCu);
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
  {
    v27 = sub_20B9A7C5C(0xCu);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_20B7F7000, v27, OS_LOG_TYPE_DEBUG, "## Sorted ##", buf, 2u);
    }
    v28 = 0;
    do
    {
      v29 = *(_QWORD *)(a2[6] + 8 * SLODWORD(v10[3 * v28]));
      v30 = sub_20B9A7C5C(0xCu);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
      {
        v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 24))(v29);
        v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 112))(v29);
        v33 = &v10[3 * v28];
        v35 = *((_QWORD *)v33 + 1);
        v34 = *((_QWORD *)v33 + 2);
        ++v28;
        *(_DWORD *)buf = 134219010;
        *(_QWORD *)&buf[4] = v28;
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = v31;
        *(_WORD *)&buf[22] = 1024;
        v91 = v32;
        v92 = 2048;
        v93 = v35;
        v94 = 2048;
        v95 = v34;
        _os_log_debug_impl(&dword_20B7F7000, v30, OS_LOG_TYPE_DEBUG, "index: %lu, surface: %@, cost: %d, dynamic-score: %lf, static-score: %lf", buf, 0x30u);
      }
      else
      {
        ++v28;
      }
    }
    while (v28 < v89);
  }
  v36 = (int *)v10;
  while (1)
  {
    v37 = *(const void **)(a2[6] + 8 * *v36);
    if (v37)
    {
      v38 = (*(uint64_t (**)(const void *))(*(_QWORD *)v37 + 96))(v37);
      if (v38 != 76 && v38 != 74)
        break;
      v39 = (*(uint64_t (**)(const void *))(*(_QWORD *)v37 + 384))(v37);
      if (v39 != (*(unsigned int (**)(const void *))(*(_QWORD *)v37 + 112))(v37)
        && (*(unsigned int (**)(const void *))(*(_QWORD *)v37 + 408))(v37) != 2)
      {
        break;
      }
    }
    v36 += 6;
    if (v36 == (int *)v13)
      goto LABEL_48;
  }
  if ((*(unsigned int (**)(const void *))(*(_QWORD *)v37 + 408))(v37) == 1)
  {
LABEL_48:
    v40 = 0;
    goto LABEL_49;
  }
  v40 = __dynamic_cast(v37, (const struct __class_type_info *)&unk_24C45C148, (const struct __class_type_info *)&unk_24C45C5C8, 0);
LABEL_49:
  sub_20B9ABA44((uint64_t)a1, a3, (uint64_t)v40, 0, 1);
  v41 = 0;
  v87 = 0;
  v88 = 0;
  v85 = (int)v42 + 15000;
  v86 = (int)v42;
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  if (v89 <= 1)
    v43 = 1;
  else
    v43 = (uint64_t)(v13 - (_QWORD)v10) / 24;
  *(_QWORD *)&buf[16] = 0;
  do
  {
    v44 = &v10[3 * v41];
    v45 = *(int *)v44;
    v46 = a2[6];
    v47 = *(_QWORD *)(v46 + 8 * v45);
    if (v47)
    {
      v48 = v44[2];
      v49 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v47 + 96))(*(_QWORD *)(v46 + 8 * v45));
      if ((v49 - 66) <= 0x11 && ((1 << (v49 - 66)) & 0x24521) != 0)
        goto LABEL_93;
      v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 408))(v47);
      sub_20B8B2334(0);
      v52 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 48))(v47);
      v53 = sub_20B8DBD3C((uint64_t)&qword_25472C9B0, v47);
      v54 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 232))(v47);
      Length = CFStringGetLength(v54);
      v56 = (int)v48;
      if (v51 == 2)
      {
        if (v49 == 70)
          goto LABEL_93;
        if (v85 >= v56 && (unint64_t)++v87 <= 5)
          goto LABEL_93;
      }
      else
      {
        if (v51)
          v57 = 1;
        else
          v57 = v52 == 1;
        if (v57)
          goto LABEL_93;
        v58 = Length >= 5 && v53 >= 2;
        v59 = v58 ? 13000 : 20000;
        if (v59 + v86 >= v56 && (unint64_t)++v88 < 7)
          goto LABEL_93;
      }
    }
    v60 = *(char **)&buf[8];
    if (*(_QWORD *)&buf[8] >= *(_QWORD *)&buf[16])
    {
      v62 = *(char **)buf;
      v63 = (uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3;
      v64 = v63 + 1;
      if ((unint64_t)(v63 + 1) >> 61)
        sub_20B80CDD8();
      v65 = *(_QWORD *)&buf[16] - *(_QWORD *)buf;
      if ((uint64_t)(*(_QWORD *)&buf[16] - *(_QWORD *)buf) >> 2 > v64)
        v64 = v65 >> 2;
      if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF8)
        v66 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v66 = v64;
      if (v66)
      {
        v67 = (char *)sub_20B800BE8((uint64_t)&buf[16], v66);
        v62 = *(char **)buf;
        v60 = *(char **)&buf[8];
      }
      else
      {
        v67 = 0;
      }
      v68 = &v67[8 * v63];
      *(_QWORD *)v68 = v45;
      v61 = v68 + 8;
      while (v60 != v62)
      {
        v69 = *((_QWORD *)v60 - 1);
        v60 -= 8;
        *((_QWORD *)v68 - 1) = v69;
        v68 -= 8;
      }
      *(_QWORD *)buf = v68;
      *(_QWORD *)&buf[8] = v61;
      *(_QWORD *)&buf[16] = &v67[8 * v66];
      if (v62)
        operator delete(v62);
    }
    else
    {
      **(_QWORD **)&buf[8] = v45;
      v61 = v60 + 8;
    }
    *(_QWORD *)&buf[8] = v61;
LABEL_93:
    ++v41;
  }
  while (v41 != v43);
  v70 = *(_QWORD **)buf;
  if (v89 == (uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3)
  {
    if (*(_QWORD *)buf == *(_QWORD *)&buf[8])
    {
      v71 = *(_QWORD *)buf;
    }
    else
    {
      v71 = *(_QWORD *)buf;
      while (*v70 != *(_DWORD *)v10)
      {
        ++v70;
        v71 += 8;
        if (v70 == *(_QWORD **)&buf[8])
        {
          v71 = *(_QWORD *)&buf[8];
          break;
        }
      }
    }
    v72 = *(_QWORD *)&buf[8] - (v71 + 8);
    if (*(_QWORD *)&buf[8] != v71 + 8)
      memmove((void *)v71, (const void *)(v71 + 8), *(_QWORD *)&buf[8] - (v71 + 8));
    *(_QWORD *)&buf[8] = v71 + v72;
  }
  v73 = v10 + 1;
  do
  {
    v74 = *(_QWORD *)(a2[6] + 8 * *((int *)v73 - 2));
    v75 = *v73;
    v76 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v74 + 112))(v74);
    v77 = (double *)sub_20B896F94();
    (*(void (**)(uint64_t, double))(*(_QWORD *)v74 + 400))(v74, -((double)(int)v75 - v77[1] * (double)v76) / (double)*((int *)v77 + 1));
    v73 += 3;
    --v43;
  }
  while (v43);
  v78 = sub_20B9A7C5C(0xBu);
  if (os_log_type_enabled(v78, OS_LOG_TYPE_DEBUG))
  {
    v79 = *(_QWORD **)buf;
    for (i = *(_QWORD **)&buf[8]; v79 != i; ++v79)
    {
      v81 = *(_QWORD *)(a2[6] + 8 * *v79);
      v82 = sub_20B9A7C5C(0xBu);
      if (os_log_type_enabled(v82, OS_LOG_TYPE_DEBUG))
      {
        v83 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v81 + 24))(v81);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v81 + 96))(v81))
          v84 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v81 + 96))(v81);
        else
          v84 = 48;
        *(_DWORD *)v96 = 138412546;
        v97 = v83;
        v98 = 1024;
        v99 = v84;
        _os_log_debug_impl(&dword_20B7F7000, v82, OS_LOG_TYPE_DEBUG, "Pruning %@ (kind:%c) (after reranking)", v96, 0x12u);
      }
    }
  }
  sub_20B8FEACC(a2, (unint64_t **)buf);
  if (*(_QWORD *)buf)
  {
    *(_QWORD *)&buf[8] = *(_QWORD *)buf;
    operator delete(*(void **)buf);
  }
LABEL_118:
  if (v10)
    operator delete(v10);
}

void sub_20B9AC6BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  void *v18;

  if (__p)
    operator delete(__p);
  if (v18)
    operator delete(v18);
  _Unwind_Resume(exception_object);
}

BOOL sub_20B9AC714(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  BOOL v4;
  double v5;
  double v6;

  v2 = *(double *)(a1 + 8);
  v3 = *(double *)(a2 + 8);
  v4 = v2 < v3;
  if (v2 == v3)
  {
    v5 = *(double *)(a1 + 16);
    v6 = *(double *)(a2 + 16);
    v4 = v5 < v6;
    if (v5 == v6)
      return *(_DWORD *)a1 > *(_DWORD *)a2;
  }
  return v4;
}

void sub_20B9AC754()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B9AC768(_QWORD *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v7;
  char *v8;

  a1[3] = 0;
  a1[4] = a4;
  if (a2)
  {
    if (a2 >= 0x1555555555555556)
      sub_20B800BC0();
    v7 = (char *)operator new(12 * a2);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[12 * a3];
  *a1 = v7;
  a1[1] = v8;
  a1[2] = v8;
  a1[3] = &v7[12 * a2];
  return a1;
}

void sub_20B9AC7E0(uint64_t a1, unint64_t a2, uint64_t (**a3)(__int128 *, __int128 *), uint64_t a4, char a5)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  unint64_t v22;
  __int128 *v23;
  unint64_t v24;
  __int128 *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  BOOL v32;
  __int128 v33;
  __int128 *v34;
  int v35;
  unint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 *v46;
  BOOL v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  __int128 *v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  int64_t v57;
  int64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  int64_t v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  __int128 *v76;
  __int128 v77;
  __int128 v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  __int128 v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  BOOL v88;
  uint64_t v89;
  __int128 *v90;
  __int128 v91;
  uint64_t v92;
  char v93;
  __int128 v94;
  __int128 *v95;
  __int128 *v96;
  unint64_t v97;
  uint64_t v98;
  int64_t v99;
  __int128 v100;
  uint64_t v101;
  __int128 v102;
  uint64_t v103;

uint64_t sub_20B9AD114(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t (**a4)(__int128 *, __int128 *))
{
  char v8;
  uint64_t result;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  v8 = (*a4)(a2, a1);
  result = (*a4)(a3, a2);
  if ((v8 & 1) != 0)
  {
    if ((_DWORD)result)
    {
      v10 = *((_QWORD *)a1 + 2);
      v11 = *a1;
      v12 = *((_QWORD *)a3 + 2);
      *a1 = *a3;
      *((_QWORD *)a1 + 2) = v12;
    }
    else
    {
      v19 = *((_QWORD *)a1 + 2);
      v20 = *a1;
      v21 = *((_QWORD *)a2 + 2);
      *a1 = *a2;
      *((_QWORD *)a1 + 2) = v21;
      *a2 = v20;
      *((_QWORD *)a2 + 2) = v19;
      result = (*a4)(a3, a2);
      if (!(_DWORD)result)
        return result;
      v10 = *((_QWORD *)a2 + 2);
      v11 = *a2;
      v22 = *((_QWORD *)a3 + 2);
      *a2 = *a3;
      *((_QWORD *)a2 + 2) = v22;
    }
    *a3 = v11;
    *((_QWORD *)a3 + 2) = v10;
  }
  else if ((_DWORD)result)
  {
    v13 = *((_QWORD *)a2 + 2);
    v14 = *a2;
    v15 = *((_QWORD *)a3 + 2);
    *a2 = *a3;
    *((_QWORD *)a2 + 2) = v15;
    *a3 = v14;
    *((_QWORD *)a3 + 2) = v13;
    result = (*a4)(a2, a1);
    if ((_DWORD)result)
    {
      v16 = *((_QWORD *)a1 + 2);
      v17 = *a1;
      v18 = *((_QWORD *)a2 + 2);
      *a1 = *a2;
      *((_QWORD *)a1 + 2) = v18;
      *a2 = v17;
      *((_QWORD *)a2 + 2) = v16;
    }
  }
  return result;
}

BOOL sub_20B9AD24C(uint64_t a1, uint64_t a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  unint64_t v6;
  _BOOL8 result;
  __int128 *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = (__int128 *)(a2 - 24);
      if ((*a3)((__int128 *)(a2 - 24), (__int128 *)a1))
      {
        v9 = *(_QWORD *)(a1 + 16);
        v10 = *(_OWORD *)a1;
        v11 = *(_QWORD *)(a2 - 8);
        *(_OWORD *)a1 = *v8;
        *(_QWORD *)(a1 + 16) = v11;
        *v8 = v10;
        *(_QWORD *)(a2 - 8) = v9;
      }
      return 1;
    case 3uLL:
      sub_20B9AD114((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a2 - 24), a3);
      return 1;
    case 4uLL:
      sub_20B9AD438(a1, a1 + 24, a1 + 48, a2 - 24, a3);
      return 1;
    case 5uLL:
      sub_20B9AD520((__n128 *)a1, a1 + 24, a1 + 48, a1 + 72, a2 - 24, a3);
      return 1;
    default:
      v12 = (__int128 *)(a1 + 48);
      sub_20B9AD114((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a1 + 48), a3);
      v13 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v14 = 0;
      v15 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)((__int128 *)v13, v12))
    {
      v19 = *(_OWORD *)v13;
      v20 = *(_QWORD *)(v13 + 16);
      v16 = v14;
      while (1)
      {
        v17 = a1 + v16;
        *(_OWORD *)(v17 + 72) = *(_OWORD *)(a1 + v16 + 48);
        *(_QWORD *)(v17 + 88) = *(_QWORD *)(a1 + v16 + 64);
        if (v16 == -48)
          break;
        v16 -= 24;
        if (((*a3)(&v19, (__int128 *)(v17 + 24)) & 1) == 0)
        {
          v18 = a1 + v16 + 72;
          goto LABEL_12;
        }
      }
      v18 = a1;
LABEL_12:
      *(_OWORD *)v18 = v19;
      *(_QWORD *)(v18 + 16) = v20;
      if (++v15 == 8)
        return v13 + 24 == a2;
    }
    v12 = (__int128 *)v13;
    v14 += 24;
    v13 += 24;
    if (v13 == a2)
      return 1;
  }
}

__n128 sub_20B9AD438(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(__int128 *, __int128 *))
{
  __n128 result;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  sub_20B9AD114((__int128 *)a1, (__int128 *)a2, (__int128 *)a3, a5);
  if ((*a5)((__int128 *)a4, (__int128 *)a3))
  {
    v11 = *(_QWORD *)(a3 + 16);
    v12 = *(_OWORD *)a3;
    v13 = *(_QWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_QWORD *)(a3 + 16) = v13;
    *(_OWORD *)a4 = v12;
    *(_QWORD *)(a4 + 16) = v11;
    if ((*a5)((__int128 *)a3, (__int128 *)a2))
    {
      v14 = *(_QWORD *)(a2 + 16);
      v15 = *(_OWORD *)a2;
      v16 = *(_QWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_QWORD *)(a2 + 16) = v16;
      *(_OWORD *)a3 = v15;
      *(_QWORD *)(a3 + 16) = v14;
      if ((*a5)((__int128 *)a2, (__int128 *)a1))
      {
        v17 = *(_QWORD *)(a1 + 16);
        result = *(__n128 *)a1;
        v18 = *(_QWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = v18;
        *(__n128 *)a2 = result;
        *(_QWORD *)(a2 + 16) = v17;
      }
    }
  }
  return result;
}

__n128 sub_20B9AD520(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (**a6)(__int128 *, __int128 *))
{
  __n128 v12;
  __n128 result;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;

  v12 = sub_20B9AD438((uint64_t)a1, a2, a3, a4, a6);
  if (((unsigned int (*)(uint64_t, uint64_t, __n128))*a6)(a5, a4, v12))
  {
    v14 = *(_QWORD *)(a4 + 16);
    v15 = *(_OWORD *)a4;
    v16 = *(_QWORD *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_QWORD *)(a4 + 16) = v16;
    *(_OWORD *)a5 = v15;
    *(_QWORD *)(a5 + 16) = v14;
    if ((*a6)((__int128 *)a4, (__int128 *)a3))
    {
      v17 = *(_QWORD *)(a3 + 16);
      v18 = *(_OWORD *)a3;
      v19 = *(_QWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_QWORD *)(a3 + 16) = v19;
      *(_OWORD *)a4 = v18;
      *(_QWORD *)(a4 + 16) = v17;
      if ((*a6)((__int128 *)a3, (__int128 *)a2))
      {
        v20 = *(_QWORD *)(a2 + 16);
        v21 = *(__n128 *)a2;
        v22 = *(_QWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_QWORD *)(a2 + 16) = v22;
        *(__n128 *)a3 = v21;
        *(_QWORD *)(a3 + 16) = v20;
        if ((*a6)((__int128 *)a2, (__int128 *)a1))
        {
          v23 = a1[1].n128_u64[0];
          result = *a1;
          v24 = *(_QWORD *)(a2 + 16);
          *a1 = *(__n128 *)a2;
          a1[1].n128_u64[0] = v24;
          *(__n128 *)a2 = result;
          *(_QWORD *)(a2 + 16) = v23;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20B9AD640(UChar *a1, UChar *s, unint64_t a3)
{
  unint64_t v3;
  UChar *v4;
  UChar v5;

  v3 = a3 >> 1;
  if (a3 >> 1 == 1)
    goto LABEL_7;
  v4 = s;
  while (1)
  {
    v5 = *v4;
    if (!*v4)
      break;
    ++v4;
    *a1++ = v5;
    if (--v3 == 1)
      goto LABEL_7;
  }
  if (v3)
LABEL_7:
    *a1 = 0;
  return 2 * u_strlen(s);
}

uint64_t sub_20B9AD698(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v4 = 0;
  if (a3 >= 0)
    v5 = a3;
  else
    v5 = a3 + 1;
  v6 = v5 >> 1;
  v7 = v6;
  while (v7)
  {
    v8 = *(unsigned __int16 *)(a2 + v4);
    *(_WORD *)(a1 + v4) = v8;
    v4 += 2;
    --v7;
    if (!v8)
    {
      if (v7)
        bzero((void *)(a1 + v4), 2 * v6 - v4);
      return a1;
    }
  }
  return a1;
}

uint64_t sub_20B9AD6F8(uint64_t a1, UChar *s, unint64_t a3)
{
  UChar *v4;
  int32_t v6;
  int32_t v7;
  unint64_t v8;
  int v9;
  UChar v10;

  v4 = s;
  v6 = u_strlen(s);
  v7 = u_strlen((const UChar *)a1);
  v8 = a3 >> 1;
  if (*(_WORD *)a1)
  {
    do
    {
      v9 = *(unsigned __int16 *)(a1 + 2);
      a1 += 2;
      --v8;
    }
    while (v9);
  }
  while (1)
  {
    if (v8 == 1)
      goto LABEL_7;
    v10 = *v4;
    if (!*v4)
      break;
    ++v4;
    *(_WORD *)a1 = v10;
    a1 += 2;
    --v8;
  }
  if (v8)
LABEL_7:
    *(_WORD *)a1 = 0;
  return 2 * v7 + (uint64_t)(2 * v6);
}

uint64_t sub_20B9AD78C(uint64_t a1, unsigned int a2)
{
  *(_QWORD *)a1 = sub_20B8D0FCC(a2);
  *(_DWORD *)(a1 + 8) = a2;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 48) = 1065353216;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 88) = 1065353216;
  if (a2 != 5 || (LDEnumerateAssetDataItems(), !*(_QWORD *)(a1 + 40)))
    LDEnumerateAssetDataItems();
  return a1;
}

void sub_20B9AD8C4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_20B9AF3CC(v2);
  sub_20B9AF3CC(v1);
  _Unwind_Resume(a1);
}

void sub_20B9AD8E0(uint64_t a1, const __CFURL *a2, int a3, uint64_t a4, const __CFString *a5)
{
  if (a2 && a5 && *(_DWORD *)(a1 + 40) == a3)
    sub_20B9AD908(a2, a5, *(_QWORD *)(a1 + 32));
}

void sub_20B9AD908(const __CFURL *a1, const __CFString *a2, uint64_t a3)
{
  unint64_t v3;
  CFStringRef v7;
  const __CFString *v8;
  const __CFString *PathComponent;
  std::string *v10;
  __int128 v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint8x8_t v20;
  unint64_t v21;
  std::string::size_type *v22;
  std::string::size_type v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _BYTE *v27;
  float v28;
  float v29;
  _BOOL8 v30;
  unint64_t v31;
  unint64_t v32;
  int8x8_t prime;
  void *v34;
  void *v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  uint8x8_t v39;
  unint64_t v40;
  uint8x8_t v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  std::string::size_type *v45;
  unint64_t v46;
  void **v47;
  void *v48;
  void *__p[2];
  unsigned __int8 v50;
  std::string v51;
  void *v52[2];
  std::string::size_type v53;
  const __CFString *v54;
  CFStringRef v55;
  std::string v56;

  v7 = CFURLCopyFileSystemPath(a1, kCFURLPOSIXPathStyle);
  v55 = v7;
  if (v7)
  {
    v8 = v7;
    PathComponent = CFURLCopyLastPathComponent(a1);
    v54 = PathComponent;
    if (!PathComponent)
    {
LABEL_97:
      CFRelease(v8);
      return;
    }
    sub_20B8D1C98(a2, &v51);
    v10 = std::string::append(&v51, "-", 1uLL);
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v56.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    sub_20B8D1C98(PathComponent, __p);
    if ((v50 & 0x80u) == 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    if ((v50 & 0x80u) == 0)
      v13 = v50;
    else
      v13 = (std::string::size_type)__p[1];
    v14 = std::string::append(&v56, (const std::string::value_type *)v12, v13);
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v53 = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)v52 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    if ((char)v50 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v56.__r_.__value_.__l.__data_);
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v51.__r_.__value_.__l.__data_);
    sub_20B8D1C98(v8, &v51);
    v16 = (_QWORD *)(a3 + 24);
    v17 = sub_20B828414(a3 + 24, (uint64_t)v52);
    v18 = v17;
    v19 = *(_QWORD *)(a3 + 8);
    if (v19)
    {
      v20 = (uint8x8_t)vcnt_s8((int8x8_t)v19);
      v20.i16[0] = vaddlv_u8(v20);
      v21 = v20.u32[0];
      if (v20.u32[0] > 1uLL)
      {
        v3 = v17;
        if (v17 >= v19)
          v3 = v17 % v19;
      }
      else
      {
        v3 = (v19 - 1) & v17;
      }
      v22 = *(std::string::size_type **)(*(_QWORD *)a3 + 8 * v3);
      if (v22)
      {
        v23 = *v22;
        if (*v22)
        {
          while (1)
          {
            v24 = *(_QWORD *)(v23 + 8);
            if (v24 == v18)
            {
              if ((sub_20B8288BC(a3 + 32, (unsigned __int8 *)(v23 + 16), (unsigned __int8 *)v52) & 1) != 0)
                goto LABEL_92;
            }
            else
            {
              if (v21 > 1)
              {
                if (v24 >= v19)
                  v24 %= v19;
              }
              else
              {
                v24 &= v19 - 1;
              }
              if (v24 != v3)
              {
LABEL_32:
                v16 = (_QWORD *)(a3 + 24);
                break;
              }
            }
            v23 = *(_QWORD *)v23;
            if (!v23)
              goto LABEL_32;
          }
        }
      }
    }
    v25 = operator new(0x40uLL);
    v26 = (_QWORD *)(a3 + 16);
    v56.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
    v56.__r_.__value_.__l.__size_ = a3 + 16;
    v56.__r_.__value_.__s.__data_[16] = 0;
    *v25 = 0;
    v25[1] = v18;
    v27 = v25 + 2;
    if (SHIBYTE(v53) < 0)
    {
      sub_20B80ACE0(v27, v52[0], (unint64_t)v52[1]);
    }
    else
    {
      *(_OWORD *)v27 = *(_OWORD *)v52;
      v25[4] = v53;
    }
    v25[5] = 0;
    v25[6] = 0;
    v25[7] = 0;
    v56.__r_.__value_.__s.__data_[16] = 1;
    v28 = (float)(unint64_t)(*(_QWORD *)(a3 + 24) + 1);
    v29 = *(float *)(a3 + 32);
    if (v19 && (float)(v29 * (float)v19) >= v28)
    {
LABEL_82:
      v45 = *(std::string::size_type **)(*(_QWORD *)a3 + 8 * v3);
      v23 = v56.__r_.__value_.__r.__words[0];
      if (v45)
      {
        *(_QWORD *)v56.__r_.__value_.__l.__data_ = *v45;
      }
      else
      {
        *(_QWORD *)v56.__r_.__value_.__l.__data_ = *(_QWORD *)(a3 + 16);
        *(_QWORD *)(a3 + 16) = v23;
        *(_QWORD *)(*(_QWORD *)a3 + 8 * v3) = v26;
        if (!*(_QWORD *)v23)
          goto LABEL_91;
        v46 = *(_QWORD *)(*(_QWORD *)v23 + 8);
        if ((v19 & (v19 - 1)) != 0)
        {
          if (v46 >= v19)
            v46 %= v19;
        }
        else
        {
          v46 &= v19 - 1;
        }
        v45 = (std::string::size_type *)(*(_QWORD *)a3 + 8 * v46);
      }
      *v45 = v23;
LABEL_91:
      v56.__r_.__value_.__r.__words[0] = 0;
      ++*v16;
      sub_20B9AF258((uint64_t)&v56);
LABEL_92:
      v47 = (void **)(v23 + 40);
      if (*(char *)(v23 + 63) < 0)
        operator delete(*v47);
      *(_OWORD *)v47 = *(_OWORD *)&v51.__r_.__value_.__l.__data_;
      *(_QWORD *)(v23 + 56) = *((_QWORD *)&v51.__r_.__value_.__l + 2);
      if (SHIBYTE(v53) < 0)
        operator delete(v52[0]);
      CFRelease(PathComponent);
      goto LABEL_97;
    }
    v30 = 1;
    if (v19 >= 3)
      v30 = (v19 & (v19 - 1)) != 0;
    v31 = v30 | (2 * v19);
    v32 = vcvtps_u32_f32(v28 / v29);
    if (v31 <= v32)
      prime = (int8x8_t)v32;
    else
      prime = (int8x8_t)v31;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v19 = *(_QWORD *)(a3 + 8);
    if (*(_QWORD *)&prime > v19)
      goto LABEL_48;
    if (*(_QWORD *)&prime < v19)
    {
      v40 = vcvtps_u32_f32((float)*(unint64_t *)(a3 + 24) / *(float *)(a3 + 32));
      if (v19 < 3 || (v41 = (uint8x8_t)vcnt_s8((int8x8_t)v19), v41.i16[0] = vaddlv_u8(v41), v41.u32[0] > 1uLL))
      {
        v40 = std::__next_prime(v40);
      }
      else
      {
        v42 = 1 << -(char)__clz(v40 - 1);
        if (v40 >= 2)
          v40 = v42;
      }
      if (*(_QWORD *)&prime <= v40)
        prime = (int8x8_t)v40;
      if (*(_QWORD *)&prime >= v19)
      {
        v19 = *(_QWORD *)(a3 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_48:
          if (*(_QWORD *)&prime >> 61)
            sub_20B800BC0();
          v34 = operator new(8 * *(_QWORD *)&prime);
          v35 = *(void **)a3;
          *(_QWORD *)a3 = v34;
          if (v35)
            operator delete(v35);
          v36 = 0;
          *(int8x8_t *)(a3 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a3 + 8 * v36++) = 0;
          while (*(_QWORD *)&prime != v36);
          v37 = (_QWORD *)*v26;
          if (*v26)
          {
            v38 = v37[1];
            v39 = (uint8x8_t)vcnt_s8(prime);
            v39.i16[0] = vaddlv_u8(v39);
            if (v39.u32[0] > 1uLL)
            {
              if (v38 >= *(_QWORD *)&prime)
                v38 %= *(_QWORD *)&prime;
            }
            else
            {
              v38 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a3 + 8 * v38) = v26;
            v43 = (_QWORD *)*v37;
            if (*v37)
            {
              do
              {
                v44 = v43[1];
                if (v39.u32[0] > 1uLL)
                {
                  if (v44 >= *(_QWORD *)&prime)
                    v44 %= *(_QWORD *)&prime;
                }
                else
                {
                  v44 &= *(_QWORD *)&prime - 1;
                }
                if (v44 != v38)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a3 + 8 * v44))
                  {
                    *(_QWORD *)(*(_QWORD *)a3 + 8 * v44) = v37;
                    goto LABEL_73;
                  }
                  *v37 = *v43;
                  *v43 = **(_QWORD **)(*(_QWORD *)a3 + 8 * v44);
                  **(_QWORD **)(*(_QWORD *)a3 + 8 * v44) = v43;
                  v43 = v37;
                }
                v44 = v38;
LABEL_73:
                v37 = v43;
                v43 = (_QWORD *)*v43;
                v38 = v44;
              }
              while (v43);
            }
          }
          v19 = (unint64_t)prime;
          goto LABEL_77;
        }
        v48 = *(void **)a3;
        *(_QWORD *)a3 = 0;
        if (v48)
          operator delete(v48);
        v19 = 0;
        *(_QWORD *)(a3 + 8) = 0;
      }
    }
LABEL_77:
    if ((v19 & (v19 - 1)) != 0)
    {
      if (v18 >= v19)
        v3 = v18 % v19;
      else
        v3 = v18;
    }
    else
    {
      v3 = (v19 - 1) & v18;
    }
    goto LABEL_82;
  }
}

void sub_20B9ADE84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,const void *a30,const void *a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  sub_20B9AF258((uint64_t)&a32);
  if (a22 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  sub_20B87E150(&a30, 0);
  sub_20B87E150(&a31, 0);
  _Unwind_Resume(a1);
}

void sub_20B9ADF38()
{
  JUMPOUT(0x20B9ADF20);
}

void *sub_20B9ADF40(uint64_t a1, const __CFString *a2, const __CFString *a3, int a4)
{
  unsigned __int8 v7;
  std::string *v8;
  __int128 v9;
  void **v10;
  std::string::size_type v11;
  std::string *v12;
  __int128 v13;
  _QWORD *v14;
  unsigned __int8 *v15;
  void *v16;
  const __CFString *v18;
  int v19;
  void *__p[2];
  unsigned __int8 v21;
  std::string v22;
  void *v23[2];
  std::string::size_type v24;
  std::string v25;
  void *v26;
  uint64_t v27;
  int v28;

  v7 = atomic_load((unsigned __int8 *)&qword_25472BF18);
  if ((v7 & 1) == 0)
  {
    v18 = a2;
    v19 = __cxa_guard_acquire(&qword_25472BF18);
    a2 = v18;
    if (v19)
    {
      __cxa_atexit(MEMORY[0x24BEDACF0], &unk_25472BF28, &dword_20B7F7000);
      __cxa_guard_release(&qword_25472BF18);
      a2 = v18;
    }
  }
  sub_20B8D1C98(a2, &v22);
  v8 = std::string::append(&v22, "-", 1uLL);
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  sub_20B8D1C98(a3, __p);
  if ((v21 & 0x80u) == 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  if ((v21 & 0x80u) == 0)
    v11 = v21;
  else
    v11 = (std::string::size_type)__p[1];
  v12 = std::string::append(&v25, (const std::string::value_type *)v10, v11);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v24 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)v23 = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if ((char)v21 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (a4 == 1)
  {
    if (*(_DWORD *)(a1 + 8) == 5)
    {
      v14 = (_QWORD *)(a1 + 56);
      goto LABEL_20;
    }
  }
  else if (!a4)
  {
    v14 = (_QWORD *)(a1 + 16);
    goto LABEL_20;
  }
  sub_20B9AF440(a1 + 56);
  v25.__r_.__value_.__r.__words[0] = MEMORY[0x24BDAC760];
  v25.__r_.__value_.__l.__size_ = 0x40000000;
  v25.__r_.__value_.__r.__words[2] = (std::string::size_type)sub_20B9AD8E0;
  v26 = &unk_24C46C690;
  v28 = a4;
  v27 = a1 + 56;
  LDEnumerateAssetDataItems();
  v14 = (_QWORD *)(a1 + 56);
LABEL_20:
  v15 = sub_20B87A31C(v14, (unsigned __int8 *)v23);
  if (v15)
    v16 = v15 + 40;
  else
    v16 = &unk_25472BF28;
  if (SHIBYTE(v24) < 0)
    operator delete(v23[0]);
  return v16;
}

void sub_20B9AE130(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

CFURLRef sub_20B9AE190(uint64_t a1, int a2)
{
  CFURLRef v2;
  _QWORD *v3;
  int v4;
  CFIndex v5;
  const UInt8 *v6;
  const __CFURL *v7;
  const __CFURL *v8;
  const __CFURL *PathComponent;

  v3 = sub_20B9ADF40(a1, (const __CFString *)qword_254729640, off_2547295B8[0], a2);
  v4 = *((char *)v3 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)v3 + 23);
  else
    v5 = v3[1];
  if (!v5)
    return 0;
  v6 = v4 >= 0 ? (const UInt8 *)v3 : (const UInt8 *)*v3;
  v7 = CFURLCreateFromFileSystemRepresentation(0, v6, v5, 0);
  if (!v7)
    return 0;
  v8 = v7;
  PathComponent = CFURLCreateCopyDeletingLastPathComponent(0, v7);
  if (PathComponent)
  {
    v2 = CFURLCreateCopyDeletingLastPathComponent(0, PathComponent);
    CFRelease(PathComponent);
  }
  CFRelease(v8);
  if (!PathComponent)
    return 0;
  return v2;
}

void sub_20B9AE248(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B9AE278(uint64_t a1, const __CFURL *a2)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  sub_20B9AF440(a1 + 56);
  v6[0] = &off_24C469F80;
  v6[1] = a1;
  v7 = v6;
  sub_20B9AE358(a2, (uint64_t)v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_20B9AE320(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_20B9AE358(const __CFURL *a1, uint64_t a2)
{
  CFArrayRef v4;
  const __CFArray *v5;
  const __CFURL *v6;
  CFIndex v7;
  const __CFDictionary *ValueAtIndex;
  const __CFString *Value;
  const void *v10;
  const void *v11;
  CFURLRef v12;
  CFURLRef v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  Boolean v18;
  int v19;
  unsigned __int8 v20;
  const __CFURL *v21;
  CFArrayRef v22;
  stat v23;
  _BYTE *v24;
  UInt8 buffer[1024];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20B9AF29C(a1);
  v22 = v4;
  if (!v4)
    return;
  v5 = v4;
  v6 = CFURLCreateCopyAppendingPathComponent(0, a1, (CFStringRef)qword_254729650, 1u);
  v7 = 0;
  v21 = v6;
  v20 = 0;
LABEL_3:
  if (v7 < CFArrayGetCount(v5))
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v5, v7);
    Value = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, CFSTR("ContentPath"));
    v10 = CFDictionaryGetValue(ValueAtIndex, CFSTR("ContentType"));
    if (!Value)
      goto LABEL_15;
    v11 = v10;
    if (!v10)
      goto LABEL_15;
    v12 = CFURLCreateCopyAppendingPathComponent(0, v6, Value, 0);
    v24 = v12;
    if (!CFURLGetFileSystemRepresentation(v12, 1u, buffer, 1024) || stat((const char *)buffer, &v23))
    {
      if (v12)
        CFRelease(v12);
      v13 = 0;
      goto LABEL_11;
    }
    v16 = 0;
    v17 = 0;
    v18 = (v23.st_mode & 0xF000) == 0x4000;
    while (1)
    {
      v19 = buffer[v16];
      if (v19 != 47)
        break;
      if (buffer[++v16] != 47)
        goto LABEL_21;
LABEL_22:
      if (v16 == 1024)
      {
LABEL_23:
        v13 = CFURLCreateFromFileSystemRepresentation(0, buffer, v17, v18);
        if (v12)
          CFRelease(v12);
LABEL_11:
        v14 = *(_QWORD *)(a2 + 24);
        *(_QWORD *)&v23.st_dev = v11;
        v24 = &v20;
        *(_QWORD *)buffer = v13;
        if (!v14)
          sub_20B80BB74();
        (*(void (**)(uint64_t, UInt8 *, stat *, _BYTE **))(*(_QWORD *)v14 + 48))(v14, buffer, &v23, &v24);
        v15 = v20;
        if (v13)
          CFRelease(v13);
        if (v15)
          goto LABEL_25;
LABEL_15:
        ++v7;
        goto LABEL_3;
      }
    }
    if (!buffer[v16])
      goto LABEL_23;
    ++v16;
LABEL_21:
    buffer[v17++] = v19;
    goto LABEL_22;
  }
LABEL_25:
  if (v6)
    CFRelease(v6);
  CFRelease(v5);
}

void sub_20B9AE588(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  if (a2)
    sub_20B854468(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B9AE60C()
{
  unsigned __int8 v0;
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_25472D2D8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25472D2D8))
  {
    v2 = operator new();
    *(_OWORD *)v2 = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
    *(_DWORD *)(v2 + 32) = 1065353216;
    qword_25472D2D0 = v2;
    __cxa_guard_release(&qword_25472D2D8);
  }
  return qword_25472D2D0;
}

void sub_20B9AE688(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472D2D8);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B9AE6A0(_QWORD *a1, signed int a2, const __CFString *a3, const __CFString *a4)
{
  const __CFString *v4;
  const __CFString *v5;
  _QWORD *v6;
  _QWORD *result;
  uint64_t v8;
  int v9;

  v4 = a4;
  v5 = a3;
  v6 = a1;
  if (a2 != 5)
  {
    v9 = 0;
    return sub_20B9AE738(a1, a2, a3, a4, v9);
  }
  result = sub_20B9AE738(a1, 5, a3, a4, 0);
  v8 = *((unsigned __int8 *)result + 23);
  if ((v8 & 0x80u) != 0)
    v8 = result[1];
  if (!v8)
  {
    a1 = v6;
    a2 = 5;
    a3 = v5;
    a4 = v4;
    v9 = 1;
    return sub_20B9AE738(a1, a2, a3, a4, v9);
  }
  return result;
}

void *sub_20B9AE738(_QWORD *a1, signed int a2, const __CFString *a3, const __CFString *a4, int a5)
{
  unsigned __int8 v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  signed int v14;
  int v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v8 = atomic_load((unsigned __int8 *)&qword_25472D2F8);
  if ((v8 & 1) == 0)
  {
    v17 = a1;
    v14 = a2;
    v15 = __cxa_guard_acquire(&qword_25472D2F8);
    a2 = v14;
    v16 = v15;
    a1 = v17;
    if (v16)
    {
      __cxa_atexit(MEMORY[0x24BEDACF0], &unk_25472D2E0, &dword_20B7F7000);
      __cxa_guard_release(&qword_25472D2F8);
      a1 = v17;
      a2 = v14;
    }
  }
  v9 = &unk_25472D2E0;
  if (a3)
  {
    if (a4)
    {
      sub_20B9AE858(a1, a2, &v18);
      v9 = sub_20B9ADF40(v18, a3, a4, a5);
      v10 = v19;
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
  }
  return v9;
}

void sub_20B9AE844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B811FE4((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B9AE858@<X0>(_QWORD *a1@<X0>, signed int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v5;
  uint64_t *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v12;
  __int128 v13;
  signed int v14;

  v14 = a2;
  *a3 = 0;
  a3[1] = 0;
  *(_QWORD *)&v13 = a2;
  v5 = sub_20B891738(a1, (unint64_t *)&v13);
  if (v5)
  {
    v6 = v5 + 3;
    v7 = a3;
  }
  else
  {
    sub_20B9AF56C((unsigned int *)&v14, &v13);
    sub_20B82E770((uint64_t)a3, &v13);
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
    if (*((_QWORD *)&v13 + 1))
    {
      v9 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v12 = v14;
    *(_QWORD *)&v13 = &v12;
    v7 = sub_20B9AF68C((uint64_t)a1, &v12, (uint64_t)&unk_20BA37B7A, (_QWORD **)&v13) + 3;
    v6 = a3;
  }
  return sub_20B9AEA64(v7, v6);
}

void sub_20B9AE938(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B811FE4(v1);
  _Unwind_Resume(a1);
}

CFURLRef sub_20B9AE954(_QWORD *a1, signed int a2, int a3)
{
  CFURLRef v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v9;
  std::__shared_weak_count *v10;

  sub_20B9AE858(a1, a2, &v9);
  v4 = sub_20B9AE190(v9, a3);
  v5 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

void sub_20B9AE9CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B811FE4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B9AE9E0(_QWORD *a1, signed int a2, const __CFURL *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  sub_20B9AE858(a1, a2, &v7);
  sub_20B9AE278(v7, a3);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_20B9AEA50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B811FE4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B9AEA64(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  v3 = a2[1];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

BOOL sub_20B9AEADC(const __CFURL *a1)
{
  const __CFDictionary *v1;
  const __CFDictionary *v2;
  const __CFNumber *Value;
  _BOOL8 v4;
  int valuePtr;
  const __CFDictionary *v7;

  v1 = sub_20B9AEB74(a1);
  v7 = v1;
  if (!v1)
    return 0;
  v2 = v1;
  Value = (const __CFNumber *)CFDictionaryGetValue(v1, (const void *)qword_254729660);
  if (Value)
  {
    valuePtr = 0;
    CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
    v4 = valuePtr != 0;
  }
  else
  {
    v4 = 0;
  }
  CFRelease(v2);
  return v4;
}

void sub_20B9AEB54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B87AA1C((const void **)va, 0);
  _Unwind_Resume(a1);
}

CFDictionaryRef sub_20B9AEB74(CFURLRef bundleURL)
{
  __CFBundle *v1;
  __CFBundle *v2;
  const __CFDictionary *InfoDictionary;
  const __CFDictionary *Value;
  CFDictionaryRef Copy;

  v1 = CFBundleCreate(0, bundleURL);
  if (!v1)
    return 0;
  v2 = v1;
  InfoDictionary = CFBundleGetInfoDictionary(v1);
  if (InfoDictionary
    && (Value = (const __CFDictionary *)CFDictionaryGetValue(InfoDictionary, (const void *)qword_254729658)) != 0)
  {
    Copy = CFDictionaryCreateCopy(0, Value);
  }
  else
  {
    Copy = 0;
  }
  CFRelease(v2);
  return Copy;
}

void sub_20B9AEBF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B9AF32C((const void **)va, 0);
  _Unwind_Resume(a1);
}

CFArrayRef sub_20B9AEC10(const __CFArray *a1)
{
  const __CFURL *ValueAtIndex;
  const __CFArray *v2;
  const __CFURL *v3;
  CFIndex i;
  const __CFDictionary *v5;
  const __CFString *Value;
  unsigned __int8 v7;
  uint64_t v8;
  CFComparisonResult v9;
  NSObject *v11;
  const __CFString *v12;
  const __CFURL *v13;
  CFStringRef v14;
  CFArrayRef v15;
  const __CFAllocator *allocator;
  CFIndex idx;
  void *values[2];
  _BYTE buf[12];
  __int16 v22;
  const __CFString *v23;
  __int16 v24;
  _BOOL4 v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  allocator = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  idx = 0;
  values[0] = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  while (idx < CFArrayGetCount(a1))
  {
    ValueAtIndex = (const __CFURL *)CFArrayGetValueAtIndex(a1, idx);
    v2 = sub_20B9AF29C(ValueAtIndex);
    if (!v2)
      goto LABEL_25;
    v3 = CFURLCreateCopyAppendingPathComponent(0, ValueAtIndex, (CFStringRef)qword_254729650, 1u);
    for (i = 0; i < CFArrayGetCount(v2); ++i)
    {
      v5 = (const __CFDictionary *)CFArrayGetValueAtIndex(v2, i);
      Value = (const __CFString *)CFDictionaryGetValue(v5, CFSTR("ContentType"));
      v7 = atomic_load((unsigned __int8 *)&qword_25472BF20);
      if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_25472BF20))
      {
        qword_25472BF40 = qword_254729640;
        unk_25472BF48 = CFSTR("RNNLanguageModel");
        qword_25472BF50 = (uint64_t)off_254729648[0];
        unk_25472BF58 = CFSTR("LexiconDelta");
        qword_25472BF60 = (uint64_t)CFSTR("CharacterConversionTrie");
        __cxa_guard_release(&qword_25472BF20);
      }
      v8 = 0;
      do
      {
        v9 = CFStringCompare(Value, (CFStringRef)qword_25472BF18[v8 + 5], 0);
        if (v9 == kCFCompareEqualTo)
          break;
      }
      while (v8++ != 4);
      v11 = sub_20B9A7C5C(9u);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "getPathsForLMAndLexiconAssets";
        v22 = 2112;
        v23 = Value;
        v24 = 1024;
        v25 = v9 == kCFCompareEqualTo;
        _os_log_debug_impl(&dword_20B7F7000, v11, OS_LOG_TYPE_DEBUG, "[%s] contentType:%@ isSupportedAssetType:0x%x", buf, 0x1Cu);
        if (v9)
          continue;
      }
      else if (v9)
      {
        continue;
      }
      v12 = (const __CFString *)CFDictionaryGetValue(v5, CFSTR("ContentPath"));
      v13 = CFURLCreateCopyAppendingPathComponent(0, v3, v12, 0);
      *(_QWORD *)buf = v13;
      v14 = CFURLCopyFileSystemPath(v13, kCFURLPOSIXPathStyle);
      values[1] = (void *)v14;
      CFArrayAppendValue((CFMutableArrayRef)values[0], v14);
      if (v14)
        CFRelease(v14);
      if (v13)
        CFRelease(v13);
    }
    if (v3)
      CFRelease(v3);
    CFRelease(v2);
LABEL_25:
    ++idx;
  }
  *(_QWORD *)buf = CFDictionaryCreate(allocator, (const void **)&kMecabraAssetDataFilePathsKey, (const void **)values, 1, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v15 = CFArrayCreate(allocator, (const void **)buf, 1, MEMORY[0x24BDBD690]);
  if (*(_QWORD *)buf)
    CFRelease(*(CFTypeRef *)buf);
  if (values[0])
    CFRelease(values[0]);
  return v15;
}

void sub_20B9AEF34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, CFTypeRef cf, char a16, int a17, __int16 a18, char a19, char a20)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_20B854468(exception_object);
}

const __CFString *sub_20B9AEFFC(CFStringRef theString)
{
  const __CFString *v1;
  CFRange v2;
  const __CFString *v3;
  CFRange v5;

  v1 = theString;
  if (theString)
  {
    v2 = CFStringFind(theString, (CFStringRef)qword_254729650, 0);
    if (v2.length)
    {
      v5.length = v2.length + v2.location + 1;
      v5.location = 0;
      v3 = CFStringCreateWithSubstring(0, v1, v5);
      v1 = (const __CFString *)CFURLCreateWithFileSystemPath(0, v3, kCFURLPOSIXPathStyle, 1u);
      if (v3)
        CFRelease(v3);
    }
    else
    {
      return 0;
    }
  }
  return v1;
}

void sub_20B9AF090(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B87E150((const void **)va, 0);
  _Unwind_Resume(a1);
}

const __CFString *sub_20B9AF0A8(CFLocaleIdentifier localeIdentifier)
{
  CFLocaleRef v1;
  const __CFString *v2;
  const __CFString *v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  void (*v9)(uint64_t);
  CFTypeRef cf;

  v1 = CFLocaleCreate(0, localeIdentifier);
  v5 = 0;
  v6 = &v5;
  v7 = 0x3002000000;
  v8 = sub_20B9AF360;
  v9 = sub_20B9AF370;
  cf = 0;
  LDEnumerateAssetDataItems();
  v2 = (const __CFString *)v6[5];
  v6[5] = 0;
  _Block_object_dispose(&v5, 8);
  if (cf)
    CFRelease(cf);
  v3 = sub_20B9AEFFC(v2);
  if (v2)
    CFRelease(v2);
  if (v1)
    CFRelease(v1);
  return v3;
}

void sub_20B9AF1AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  sub_20B87E150((const void **)va, 0);
  sub_20B8B0328((const void **)va1, 0);
  _Unwind_Resume(a1);
}

const __CFString *sub_20B9AF1E8(char *cStr)
{
  const __CFString *v1;
  const __CFString *v2;

  v1 = CFStringCreateWithCString(0, cStr, 0x8000100u);
  v2 = sub_20B9AF0A8(v1);
  if (v1)
    CFRelease(v1);
  return v2;
}

void sub_20B9AF240(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B87E150((const void **)va, 0);
  _Unwind_Resume(a1);
}

void sub_20B9AF258(uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20B892DCC((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

CFArrayRef sub_20B9AF29C(const __CFURL *a1)
{
  const __CFDictionary *v1;
  const __CFDictionary *v2;
  const __CFArray *Value;
  CFArrayRef Copy;

  v1 = sub_20B9AEB74(a1);
  if (!v1)
    return 0;
  v2 = v1;
  Value = (const __CFArray *)CFDictionaryGetValue(v1, CFSTR("Contents"));
  if (Value)
    Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], Value);
  else
    Copy = 0;
  CFRelease(v2);
  return Copy;
}

void sub_20B9AF314(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B87AA1C((const void **)va, 0);
  _Unwind_Resume(a1);
}

void sub_20B9AF32C(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

uint64_t sub_20B9AF360(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(result + 40) = v2;
  return result;
}

void sub_20B9AF370(uint64_t a1)
{
  sub_20B87E150((const void **)(a1 + 40), 0);
}

void sub_20B9AF37C(uint64_t a1, CFURLRef anURL, int a3, uint64_t a4, uint64_t a5, _BYTE *a6)
{
  const void **v7;
  CFStringRef v8;

  if (!a3)
  {
    v7 = (const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
    v8 = CFURLCopyFileSystemPath(anURL, kCFURLPOSIXPathStyle);
    sub_20B87E150(v7, v8);
    *a6 = 1;
  }
}

uint64_t sub_20B9AF3CC(uint64_t a1)
{
  void *v2;

  sub_20B9AF404(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20B9AF404(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20B892DCC((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20B9AF440(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    sub_20B9AF404(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void sub_20B9AF498()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B9AF4AC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C469F80;
  result[1] = v3;
  return result;
}

uint64_t sub_20B9AF4E0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C469F80;
  a2[1] = v2;
  return result;
}

void sub_20B9AF4FC(uint64_t a1, const __CFURL **a2, const __CFString **a3)
{
  const __CFURL *v4;
  const __CFString *v5;
  BOOL v6;

  v4 = *a2;
  v5 = *a3;
  if (v4)
    v6 = v5 == 0;
  else
    v6 = 1;
  if (!v6)
    sub_20B9AD908(v4, v5, *(_QWORD *)(a1 + 8) + 56);
}

uint64_t sub_20B9AF524(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45EDA0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B9AF560()
{
  return &unk_24C45EDA0;
}

_QWORD *sub_20B9AF56C@<X0>(unsigned int *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x78uLL);
  result = sub_20B9AF5C4(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_20B9AF5B0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B9AF5C4(_QWORD *a1, unsigned int *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24C46B7C0;
  sub_20B9AD78C((uint64_t)(a1 + 3), *a2);
  return a1;
}

void sub_20B9AF5FC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_20B9AF610(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C46B7C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B9AF620(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C46B7C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B9AF650(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 24);
  if (v2)
    CFRelease(v2);
  sub_20B9AF3CC(a1 + 80);
  return sub_20B9AF3CC(a1 + 40);
}

_QWORD *sub_20B9AF68C(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  int8x8_t prime;
  void *v21;
  void *v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint8x8_t v26;
  unint64_t v27;
  uint8x8_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  void *v35;
  _QWORD v36[2];
  char v37;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  v14 = operator new(0x28uLL);
  v36[0] = v14;
  v36[1] = a1 + 16;
  *v14 = 0;
  v14[1] = v7;
  v14[2] = **a4;
  v14[3] = 0;
  v14[4] = 0;
  v37 = 1;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = (int8x8_t)v19;
    else
      prime = (int8x8_t)v18;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (*(_QWORD *)&prime > v8)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v8)
    {
      v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v28 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        v27 = std::__next_prime(v27);
      }
      else
      {
        v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2)
          v27 = v29;
      }
      if (*(_QWORD *)&prime <= v27)
        prime = (int8x8_t)v27;
      if (*(_QWORD *)&prime >= v8)
      {
        v8 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            sub_20B800BC0();
          v21 = operator new(8 * *(_QWORD *)&prime);
          v22 = *(void **)a1;
          *(_QWORD *)a1 = v21;
          if (v22)
            operator delete(v22);
          v23 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v23++) = 0;
          while (*(_QWORD *)&prime != v23);
          v24 = (_QWORD *)*v13;
          if (*v13)
          {
            v25 = v24[1];
            v26 = (uint8x8_t)vcnt_s8(prime);
            v26.i16[0] = vaddlv_u8(v26);
            if (v26.u32[0] > 1uLL)
            {
              if (v25 >= *(_QWORD *)&prime)
                v25 %= *(_QWORD *)&prime;
            }
            else
            {
              v25 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = v13;
            v30 = (_QWORD *)*v24;
            if (*v24)
            {
              do
              {
                v31 = v30[1];
                if (v26.u32[0] > 1uLL)
                {
                  if (v31 >= *(_QWORD *)&prime)
                    v31 %= *(_QWORD *)&prime;
                }
                else
                {
                  v31 &= *(_QWORD *)&prime - 1;
                }
                if (v31 != v25)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v31))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v31) = v24;
                    goto LABEL_55;
                  }
                  *v24 = *v30;
                  *v30 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v31);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v31) = v30;
                  v30 = v24;
                }
                v31 = v25;
LABEL_55:
                v24 = v30;
                v30 = (_QWORD *)*v30;
                v25 = v31;
              }
              while (v30);
            }
          }
          v8 = (unint64_t)prime;
          goto LABEL_59;
        }
        v35 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v35)
          operator delete(v35);
        v8 = 0;
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
LABEL_59:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  i = (_QWORD *)v36[0];
  if (v32)
  {
    *(_QWORD *)v36[0] = *v32;
LABEL_72:
    *v32 = i;
    goto LABEL_73;
  }
  *(_QWORD *)v36[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v13;
  if (*i)
  {
    v33 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v33 >= v8)
        v33 %= v8;
    }
    else
    {
      v33 &= v8 - 1;
    }
    v32 = (_QWORD *)(*(_QWORD *)a1 + 8 * v33);
    goto LABEL_72;
  }
LABEL_73:
  v36[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20B9AFAB0((uint64_t)v36);
  return i;
}

void sub_20B9AFA9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B9AFAB0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B9AFAB0(uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20B811FE4((uint64_t)v1 + 24);
    operator delete(v1);
  }
}

uint64_t sub_20B9AFAF4(uint64_t a1, const __CFURL *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void **v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *__p[2];
  char v20;
  CFErrorRef error;
  UInt8 buffer[1024];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 16) = 0;
  v5 = (uint64_t *)(a1 + 16);
  *(_QWORD *)a1 = &off_24C461710;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = &off_24C460D48;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  v6 = *a3;
  *a3 = 0;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  if (v7)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v6 = *(_QWORD *)(a1 + 8);
  }
  if (v6 && *(_QWORD *)(v6 + 8))
  {
    v8 = sub_20B8115F0(0x2000000000, *(_DWORD *)(v6 + 48));
    v9 = v8;
    v10 = 0;
    error = 0;
    if (a2 && v8)
    {
      if (!CFURLResourceIsReachable(a2, &error))
      {
        if (error)
          CFRelease(error);
        v10 = 0;
        goto LABEL_30;
      }
      if (CFURLGetFileSystemRepresentation(a2, 1u, buffer, 1024))
        v11 = (char *)buffer;
      else
        v11 = (char *)&unk_20BA71DF9;
      sub_20B80BBD0(__p, v11);
      if (v20 < 0)
      {
        if (!__p[1])
        {
          v10 = 0;
LABEL_28:
          operator delete(__p[0]);
          goto LABEL_29;
        }
        v12 = (void **)__p[0];
      }
      else
      {
        if (!v20)
        {
          v10 = 0;
          goto LABEL_29;
        }
        v12 = __p;
      }
      v13 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v9 + 16))(v9, v12);
      if (v13)
        v10 = v9;
      else
        v10 = 0;
      if (v13)
        v9 = 0;
      if (v20 < 0)
        goto LABEL_28;
    }
LABEL_29:
    if (!v9)
    {
LABEL_31:
      v14 = *v5;
      *v5 = v10;
      if (v14)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
        v10 = *v5;
      }
      if (v10)
      {
        (*(void (**)(UInt8 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v10 + 64))(buffer, v10, 32);
        v15 = *(_QWORD *)buffer;
      }
      else
      {
        v15 = 0;
      }
      *(_QWORD *)buffer = 0;
      v16 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 24) = v15;
      if (v16)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
        v17 = *(_QWORD *)buffer;
        *(_QWORD *)buffer = 0;
        if (v17)
          (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
      }
      *(_DWORD *)(a1 + 72) = 1;
      return a1;
    }
LABEL_30:
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    goto LABEL_31;
  }
  return a1;
}

void sub_20B9AFD24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (a15 < 0)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v15[5] = v18;
  v20 = (void *)v15[6];
  if (v20)
  {
    v15[7] = v20;
    operator delete(v20);
  }
  v21 = v15[4];
  v15[4] = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = v15[3];
  v15[3] = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  v23 = *v17;
  *v17 = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = v15[1];
  *v15 = &unk_24C4629A8;
  v15[1] = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B9AFDE4(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24C460D48;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_20B9AFE20(uint64_t result, int a2)
{
  *(_DWORD *)(result + 32) = a2;
  return result;
}

void sub_20B9AFE28(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  int v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::string *v13;
  std::string __p;
  unsigned int **v15[3];
  uint8_t buf[24];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v6 = -1431655765 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  if (!v6)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    if (!a3)
      return;
    goto LABEL_11;
  }
  sub_20B9B00C8((uint64_t *)v15, (uint64_t **)a2, v6, *(_DWORD *)(*(_QWORD *)(a1 + 8) + 48));
  v7 = sub_20B9A7C5C(0xCu);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    v8 = sub_20B9A7C5C(7u);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      sub_20B9B04F0(&__p, v15[0], v15[1]);
      v13 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v13;
      _os_log_debug_impl(&dword_20B7F7000, v8, OS_LOG_TYPE_DEBUG, "batches:\n%s", buf, 0xCu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  sub_20B80EB88(&__p);
  v9 = v6;
  do
  {
    sub_20B80EC5C((uint64_t)&__p, a1 + 48);
    --v9;
  }
  while (v9);
  *(_QWORD *)buf = sub_20B80ED34((uint64_t)&__p);
  sub_20B80EC34(&__p);
  (*(void (**)(_QWORD, uint8_t *))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), buf);
  (*(void (**)(_QWORD, unsigned int ***, _QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16), v15, *(_QWORD *)(a1 + 24));
  v10 = *(_QWORD *)buf;
  *(_QWORD *)buf = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
  sub_20B83B400((void ***)&__p);
  if (a3)
  {
LABEL_11:
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 24))(*(_QWORD *)(a1 + 24));
    v12 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v11;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
}

void sub_20B9B004C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void **a15)
{
  a15 = (void **)&a12;
  sub_20B83B400(&a15);
  _Unwind_Resume(a1);
}

void sub_20B9B00C8(uint64_t *a1, uint64_t **a2, int a3, int a4)
{
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char *v20;
  _DWORD *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  int v33;
  int v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t *v48;
  __int128 v49;
  char *v50;
  char *v51;
  char *v52;
  _QWORD *v53;
  char *v54;
  uint64_t *v55;

  v5 = *a2;
  v6 = a2[1];
  if (*a2 == v6)
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    return;
  }
  v10 = 0;
  do
  {
    v12 = *v5;
    v11 = v5[1];
    v5 += 3;
    v13 = (v11 - v12) >> 2;
    if (v10 <= v13)
      v10 = v13;
  }
  while (v5 != v6);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v46 = (uint64_t)(a1 + 2);
  if (v10)
  {
    if (v10 > 0xAAAAAAAAAAAAAAALL)
      sub_20B873738();
    v55 = a1 + 2;
    v51 = (char *)sub_20B828D70(v46, v10);
    v52 = v51;
    v53 = v51;
    v54 = &v51[24 * v14];
    sub_20B93683C(a1, &v51);
    sub_20B83CBC8((uint64_t)&v51);
    v15 = 0;
    v47 = a3;
    v48 = a1;
    if ((unint64_t)a3 <= 1)
      v16 = 1;
    else
      v16 = a3;
    do
    {
      v49 = 0uLL;
      v50 = 0;
      sub_20B820518((void **)&v49, v47);
      v17 = 0;
      do
      {
        v18 = (*a2)[3 * v17];
        if (v15 >= ((*a2)[3 * v17 + 1] - v18) >> 2)
        {
          v22 = (char *)*((_QWORD *)&v49 + 1);
          if (*((_QWORD *)&v49 + 1) < (unint64_t)v50)
          {
            **((_DWORD **)&v49 + 1) = a4;
            v21 = v22 + 4;
            goto LABEL_44;
          }
          v23 = (char *)v49;
          v29 = (uint64_t)(*((_QWORD *)&v49 + 1) - v49) >> 2;
          v30 = v29 + 1;
          if ((unint64_t)(v29 + 1) >> 62)
            sub_20B80CDD8();
          v31 = (uint64_t)&v50[-v49];
          if ((uint64_t)&v50[-v49] >> 1 > v30)
            v30 = v31 >> 1;
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL)
            v27 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v27 = v30;
          if (v27)
          {
            v28 = (char *)sub_20B8127BC((uint64_t)&v50, v27);
            v22 = (char *)*((_QWORD *)&v49 + 1);
            v23 = (char *)v49;
          }
          else
          {
            v28 = 0;
          }
          v32 = &v28[4 * v29];
          *(_DWORD *)v32 = a4;
          v21 = v32 + 4;
          while (v22 != v23)
          {
            v34 = *((_DWORD *)v22 - 1);
            v22 -= 4;
            *((_DWORD *)v32 - 1) = v34;
            v32 -= 4;
          }
        }
        else
        {
          v19 = *(_DWORD *)(v18 + 4 * v15);
          v20 = (char *)*((_QWORD *)&v49 + 1);
          if (*((_QWORD *)&v49 + 1) < (unint64_t)v50)
          {
            **((_DWORD **)&v49 + 1) = v19;
            v21 = v20 + 4;
            goto LABEL_44;
          }
          v23 = (char *)v49;
          v24 = (uint64_t)(*((_QWORD *)&v49 + 1) - v49) >> 2;
          v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 62)
            sub_20B80CDD8();
          v26 = (uint64_t)&v50[-v49];
          if ((uint64_t)&v50[-v49] >> 1 > v25)
            v25 = v26 >> 1;
          if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL)
            v27 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v27 = v25;
          if (v27)
          {
            v28 = (char *)sub_20B8127BC((uint64_t)&v50, v27);
            v20 = (char *)*((_QWORD *)&v49 + 1);
            v23 = (char *)v49;
          }
          else
          {
            v28 = 0;
          }
          v32 = &v28[4 * v24];
          *(_DWORD *)v32 = v19;
          v21 = v32 + 4;
          while (v20 != v23)
          {
            v33 = *((_DWORD *)v20 - 1);
            v20 -= 4;
            *((_DWORD *)v32 - 1) = v33;
            v32 -= 4;
          }
        }
        *(_QWORD *)&v49 = v32;
        *((_QWORD *)&v49 + 1) = v21;
        v50 = &v28[4 * v27];
        if (v23)
          operator delete(v23);
LABEL_44:
        *((_QWORD *)&v49 + 1) = v21;
        ++v17;
      }
      while (v17 != v16);
      v35 = (_QWORD *)v48[1];
      v36 = v48[2];
      if ((unint64_t)v35 >= v36)
      {
        v37 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v35 - *v48) >> 3);
        v38 = v37 + 1;
        if (v37 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20B873738();
        v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - *v48) >> 3);
        if (2 * v39 > v38)
          v38 = 2 * v39;
        if (v39 >= 0x555555555555555)
          v40 = 0xAAAAAAAAAAAAAAALL;
        else
          v40 = v38;
        v55 = (uint64_t *)v46;
        v41 = (char *)sub_20B828D70(v46, v40);
        v42 = &v41[24 * v37];
        v51 = v41;
        v52 = v42;
        v54 = &v41[24 * v43];
        *(_QWORD *)v42 = 0;
        *((_QWORD *)v42 + 1) = 0;
        *((_QWORD *)v42 + 2) = 0;
        *(_OWORD *)v42 = v49;
        *((_QWORD *)v42 + 2) = v50;
        v49 = 0uLL;
        v50 = 0;
        v53 = v42 + 24;
        sub_20B93683C(v48, &v51);
        v44 = v48[1];
        sub_20B83CBC8((uint64_t)&v51);
        v45 = (void *)v49;
        v48[1] = v44;
        if (v45)
        {
          *((_QWORD *)&v49 + 1) = v45;
          operator delete(v45);
        }
      }
      else
      {
        *v35 = 0;
        v35[1] = 0;
        v35[2] = 0;
        *(_OWORD *)v35 = v49;
        v35[2] = v50;
        v48[1] = (uint64_t)(v35 + 3);
      }
      ++v15;
    }
    while (v15 != v10);
  }
}

void sub_20B9B0488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16)
{
  sub_20B83CBC8((uint64_t)&a16);
  sub_20B83B400((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_20B9B04F0(std::string *a1, unsigned int **a2, unsigned int **a3)
{
  unsigned int **v4;
  unsigned int *v6;
  std::string *v7;
  std::string::size_type size;
  unsigned int *v9;
  unint64_t v10;
  std::string *v11;
  std::string::size_type v12;
  std::string *p_p;
  std::string::size_type v14;
  std::string __p;
  std::string v16;

  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  if (a2 != a3)
  {
    v4 = a2;
    do
    {
      memset(&__p, 0, sizeof(__p));
      v6 = *v4;
      if (*v4 == v4[1])
      {
        v9 = *v4;
      }
      else
      {
        std::to_string(&v16, *v6);
        if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v7 = &v16;
        else
          v7 = (std::string *)v16.__r_.__value_.__r.__words[0];
        if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v16.__r_.__value_.__r.__words[2]);
        else
          size = v16.__r_.__value_.__l.__size_;
        std::string::append(&__p, (const std::string::value_type *)v7, size);
        if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v16.__r_.__value_.__l.__data_);
        v6 = *v4;
        v9 = v4[1];
      }
      if ((unint64_t)((char *)v9 - (char *)v6) >= 5)
      {
        v10 = 1;
        do
        {
          std::string::append(&__p, " ", 1uLL);
          std::to_string(&v16, (*v4)[v10]);
          if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v11 = &v16;
          else
            v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
          if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v12 = HIBYTE(v16.__r_.__value_.__r.__words[2]);
          else
            v12 = v16.__r_.__value_.__l.__size_;
          std::string::append(&__p, (const std::string::value_type *)v11, v12);
          if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v16.__r_.__value_.__l.__data_);
          ++v10;
        }
        while (v10 < v4[1] - *v4);
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v14 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v14 = __p.__r_.__value_.__l.__size_;
      std::string::append(a1, (const std::string::value_type *)p_p, v14);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      std::string::push_back(a1, 10);
      v4 += 3;
    }
    while (v4 != a3);
  }
}

void sub_20B9B066C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if (*(char *)(v20 + 23) < 0)
    operator delete(*(void **)v20);
  _Unwind_Resume(exception_object);
}

void sub_20B9B06C8(uint64_t a1@<X0>, void ***a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, char **a5@<X8>)
{
  void **v9;
  void **v10;
  int v11;
  int v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  void **v25;
  void **v26;
  void *v27;
  uint64_t v28;
  _BYTE *v29;
  unint64_t v30;
  _BYTE *v31;
  char *v32;
  char *v33;
  unint64_t v34;
  _QWORD *v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  int *v50;
  int *v51;
  int v52;
  int *v53;
  unint64_t v54;
  int *v55;
  int *v56;
  int *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int *v64;
  int *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  int *v70;
  uint64_t v71;
  uint64_t v72;
  float v73;
  int *v74;
  uint64_t v76;
  int *v77;
  int *v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  int *v98;
  int *v99;
  uint64_t v100[2];
  void *__p;
  char *v102;
  char *v103;

  __p = 0;
  v102 = 0;
  v103 = 0;
  sub_20B820518(&__p, a2[1] - *a2);
  v97 = a1;
  v9 = *a2;
  v10 = a2[1];
  if (*a2 != v10)
  {
    do
    {
      v11 = (*(uint64_t (**)(void *))(*(_QWORD *)*v9 + 32))(*v9);
      v12 = v11;
      v13 = v102;
      if (v102 >= v103)
      {
        v15 = (char *)__p;
        v16 = (v102 - (_BYTE *)__p) >> 2;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 62)
          sub_20B80CDD8();
        v18 = v103 - (_BYTE *)__p;
        if ((v103 - (_BYTE *)__p) >> 1 > v17)
          v17 = v18 >> 1;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
          v19 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19)
        {
          v20 = (char *)sub_20B8127BC((uint64_t)&v103, v19);
          v15 = (char *)__p;
          v13 = v102;
        }
        else
        {
          v20 = 0;
        }
        v21 = &v20[4 * v16];
        *(_DWORD *)v21 = v12;
        v14 = v21 + 4;
        while (v13 != v15)
        {
          v22 = *((_DWORD *)v13 - 1);
          v13 -= 4;
          *((_DWORD *)v21 - 1) = v22;
          v21 -= 4;
        }
        __p = v21;
        v102 = v14;
        v103 = &v20[4 * v19];
        if (v15)
          operator delete(v15);
      }
      else
      {
        *(_DWORD *)v102 = v11;
        v14 = v13 + 4;
      }
      v102 = v14;
      ++v9;
    }
    while (v9 != v10);
  }
  v23 = v97;
  v24 = *(_QWORD *)(v97 + 24);
  sub_20B80EB88(&v98);
  v25 = *a2;
  v26 = a2[1];
  if (*a2 != v26)
  {
    do
    {
      v27 = *v25;
      if (*v25)
        v27 = __dynamic_cast(v27, (const struct __class_type_info *)&unk_24C45BD18, (const struct __class_type_info *)&unk_24C45BCE8, 0);
      sub_20B80EC5C((uint64_t)&v98, (uint64_t)v27 + 8);
      ++v25;
    }
    while (v25 != v26);
  }
  v100[0] = (uint64_t)sub_20B80ED34((uint64_t)&v98);
  sub_20B80EC34(&v98);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v24 + 32))(v24, v100);
  v28 = v100[0];
  v100[0] = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  (*(void (**)(_QWORD, void **, _QWORD))(**(_QWORD **)(v97 + 16) + 56))(*(_QWORD *)(v97 + 16), &__p, *(_QWORD *)(v97 + 24));
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  v29 = __p;
  if (__p == v102)
  {
    v33 = 0;
    v32 = 0;
    v30 = 0;
    v31 = __p;
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v97 + 24) + 40))(*(_QWORD *)(v97 + 24), 0);
    v29 = __p;
    v31 = v102;
    v32 = a5[2];
    v33 = *a5;
  }
  if (v30 < a3)
    a3 = v30;
  v34 = ((v31 - v29) >> 2) * a3;
  v35 = a5 + 2;
  if (v34 > (v32 - v33) >> 3)
  {
    if (v34 >> 61)
      sub_20B80CDD8();
    v36 = a5[1];
    v37 = (char *)sub_20B800BE8((uint64_t)(a5 + 2), v34);
    v38 = &v37[(v36 - v33) & 0xFFFFFFFFFFFFFFF8];
    v40 = &v37[8 * v39];
    v42 = *a5;
    v41 = a5[1];
    v43 = v38;
    if (v41 != *a5)
    {
      do
      {
        v44 = *((_QWORD *)v41 - 1);
        v41 -= 8;
        *((_QWORD *)v43 - 1) = v44;
        v43 -= 8;
      }
      while (v41 != v42);
      v41 = *a5;
    }
    *a5 = v43;
    a5[1] = v38;
    a5[2] = v40;
    if (v41)
      operator delete(v41);
  }
  v45 = v102;
  if (v102 != __p)
  {
    v46 = 0;
    v47 = (unint64_t)(a3 - 2) >> 1;
    v96 = v47 + 1;
    v95 = v47;
    do
    {
      v48 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(v23 + 24) + 40))(*(_QWORD *)(v23 + 24), v46);
      v100[0] = v48;
      v100[1] = v49;
      sub_20B947150(&v98, v49);
      v50 = v98;
      v51 = v99;
      if (v98 != v99)
      {
        v52 = 0;
        v53 = v98;
        do
          *v53++ = v52++;
        while (v53 != v51);
      }
      if (a3)
      {
        if (a3 >= 2)
        {
          v54 = v96;
          v55 = &v50[v95];
          do
          {
            sub_20B9B1254((uint64_t)v50, v100, a3, v55--);
            --v54;
          }
          while (v54);
        }
        v56 = &v50[a3];
        if (v56 != v51)
        {
          v57 = &v50[a3];
          do
          {
            v58 = *v57;
            v59 = *v50;
            if (*(float *)(v48 + 4 * v58) > *(float *)(v48 + 4 * v59))
            {
              *v57 = v59;
              *v50 = v58;
              sub_20B9B1254((uint64_t)v50, v100, a3, v50);
            }
            ++v57;
          }
          while (v57 != v51);
        }
        v60 = v48;
        if (a3 >= 2)
        {
          v61 = a3 & 0x3FFFFFFFFFFFFFFFLL;
          do
          {
            v62 = 0;
            v63 = *v50;
            v60 = v100[0];
            v64 = v50;
            do
            {
              v65 = v64;
              v64 += v62 + 1;
              v66 = 2 * v62;
              v62 = (2 * v62) | 1;
              v67 = v66 + 2;
              if (v67 < v61 && *(float *)(v60 + 4 * *v64) > *(float *)(v60 + 4 * v64[1]))
              {
                ++v64;
                v62 = v67;
              }
              *v65 = *v64;
            }
            while (v62 <= (uint64_t)((unint64_t)(v61 - 2) >> 1));
            if (v64 == --v56)
            {
              *v64 = v63;
            }
            else
            {
              *v64 = *v56;
              *v56 = v63;
              v68 = (char *)v64 - (char *)v50 + 4;
              if (v68 >= 5)
              {
                v69 = (((unint64_t)v68 >> 2) - 2) >> 1;
                v70 = &v50[v69];
                v71 = *v70;
                v72 = *v64;
                v73 = *(float *)(v48 + 4 * v72);
                if (*(float *)(v48 + 4 * v71) > v73)
                {
                  do
                  {
                    v74 = v70;
                    *v64 = v71;
                    if (!v69)
                      break;
                    v69 = (v69 - 1) >> 1;
                    v70 = &v50[v69];
                    v71 = *v70;
                    v64 = v74;
                  }
                  while (*(float *)(v48 + 4 * v71) > v73);
                  *v74 = v72;
                }
              }
            }
          }
          while (v61-- > 2);
        }
        v76 = 0;
        v77 = (int *)a5[1];
        do
        {
          v78 = v98;
          v79 = v98[v76];
          v80 = v79;
          if ((unint64_t)v77 >= *v35)
          {
            v81 = ((char *)v77 - *a5) >> 3;
            if ((unint64_t)(v81 + 1) >> 61)
              sub_20B80CDD8();
            v82 = *v35 - (_QWORD)*a5;
            v83 = v82 >> 2;
            if (v82 >> 2 <= (unint64_t)(v81 + 1))
              v83 = v81 + 1;
            if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFF8)
              v84 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v84 = v83;
            v85 = (char *)sub_20B800BE8((uint64_t)(a5 + 2), v84);
            v87 = &v85[8 * v81];
            *(_DWORD *)v87 = v78[v76];
            *((_DWORD *)v87 + 1) = *(_DWORD *)(v60 + 4 * v80);
            v89 = *a5;
            v88 = a5[1];
            v90 = v87;
            if (v88 != *a5)
            {
              do
              {
                v91 = *((_QWORD *)v88 - 1);
                v88 -= 8;
                *((_QWORD *)v90 - 1) = v91;
                v90 -= 8;
              }
              while (v88 != v89);
              v88 = *a5;
            }
            v77 = (int *)(v87 + 8);
            *a5 = v90;
            a5[1] = v87 + 8;
            a5[2] = &v85[8 * v86];
            if (v88)
              operator delete(v88);
          }
          else
          {
            *v77 = v79;
            v77[1] = *(_DWORD *)(v60 + 4 * v79);
            v77 += 2;
          }
          a5[1] = (char *)v77;
          ++v76;
        }
        while (v76 != a3);
        v23 = v97;
        v50 = v98;
      }
      if (v50)
      {
        v99 = v50;
        operator delete(v50);
      }
      ++v46;
      v45 = (char *)__p;
    }
    while (v46 < (v102 - (_BYTE *)__p) >> 2);
  }
  if (v45)
  {
    v102 = v45;
    operator delete(v45);
  }
  if (a4)
  {
    v92 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v23 + 24) + 24))(*(_QWORD *)(v23 + 24));
    v93 = *(_QWORD *)(v23 + 32);
    *(_QWORD *)(v23 + 32) = v92;
    if (v93)
      (*(void (**)(uint64_t))(*(_QWORD *)v93 + 8))(v93);
  }
}

void sub_20B9B0D1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  uint64_t v21;
  void *v23;

  v23 = *(void **)v21;
  if (*(_QWORD *)v21)
  {
    *(_QWORD *)(v21 + 8) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B9B0DCC(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  void *__p[3];
  __int128 v5;
  uint64_t v6;
  uint64_t v7[3];
  void *v8;
  _BYTE *v9;
  void **v10;
  char v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 8) + 16))(&v8);
  v12 = 0;
  v13 = 0;
  v14 = 0;
  sub_20B83C9C4(&v12, v8, (uint64_t)v9, (v9 - (_BYTE *)v8) >> 2);
  v5 = 0uLL;
  v6 = 0;
  v10 = (void **)&v5;
  v11 = 0;
  *(_QWORD *)&v5 = operator new(0x18uLL);
  *((_QWORD *)&v5 + 1) = v5;
  v6 = v5 + 24;
  *((_QWORD *)&v5 + 1) = sub_20B88248C((uint64_t)&v6, (uint64_t)&v12, (uint64_t)&v15, (_QWORD *)v5);
  sub_20B9B00C8(v7, (uint64_t **)&v5, 1, *(_DWORD *)(*(_QWORD *)(a1 + 8) + 48));
  v10 = (void **)&v5;
  sub_20B83B400(&v10);
  if (v12)
  {
    v13 = v12;
    operator delete(v12);
  }
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), 1);
  (*(void (**)(void **__return_ptr, _QWORD, uint64_t *, _QWORD))(**(_QWORD **)(a1 + 16) + 40))(__p, *(_QWORD *)(a1 + 16), v7, *(_QWORD *)(a1 + 24));
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v2 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 24))(*(_QWORD *)(a1 + 24));
  sub_20B824B4C(v2, 0, &v5);
  v3 = *(void **)(a1 + 48);
  if (v3)
  {
    *(_QWORD *)(a1 + 56) = v3;
    operator delete(v3);
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
  }
  *(_OWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 64) = v6;
  *(_DWORD *)(a1 + 72) = *((_DWORD *)v9 - 1);
  if (v2)
    (*(void (**)(_QWORD *))(*v2 + 8))(v2);
  *(_QWORD *)&v5 = v7;
  sub_20B83B400((void ***)&v5);
  if (v8)
  {
    v9 = v8;
    operator delete(v8);
  }
}

void sub_20B9B0F9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  uint64_t v21;

  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  a13 = &a17;
  sub_20B83B400((void ***)&a13);
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

double sub_20B9B1030@<D0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  double result;
  __int128 v6;
  uint64_t v7;

  sub_20B824B4C(*(_QWORD **)(a1 + 32), a2, &v6);
  v4 = operator new();
  *(_QWORD *)v4 = &off_24C460D48;
  result = *(double *)&v6;
  *(_OWORD *)(v4 + 8) = v6;
  *(_QWORD *)(v4 + 24) = v7;
  *(_DWORD *)(v4 + 32) = 0;
  *a3 = v4;
  return result;
}

void sub_20B9B109C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B9B10BC(_QWORD *a1)
{
  sub_20B9B1330(a1);
  JUMPOUT(0x20BD39CB0);
}

BOOL sub_20B9B10E0(_QWORD *a1)
{
  return a1[2] && a1[3] && a1[1] != 0;
}

uint64_t sub_20B9B1108()
{
  return 1;
}

uint64_t sub_20B9B1110(uint64_t a1)
{
  return a1 + 40;
}

uint64_t *sub_20B9B1118@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_20B99ABD0(*(_QWORD *)(a1 + 8), a2, *(_DWORD *)(a1 + 72), a3);
}

void sub_20B9B1128(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24C460D48;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B9B1174@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  _QWORD *v5;
  _BYTE *v6;
  _BYTE *v7;
  size_t v8;
  char *v9;

  result = (_QWORD *)operator new();
  v5 = result;
  result[1] = 0;
  *result = &off_24C460D48;
  result[2] = 0;
  result[3] = 0;
  v7 = *(_BYTE **)(a1 + 8);
  v6 = *(_BYTE **)(a1 + 16);
  v8 = v6 - v7;
  if (v6 != v7)
  {
    sub_20B80EEA8(result + 1, v6 - v7);
    v9 = (char *)v5[2];
    result = memmove(v9, v7, v8);
    v5[2] = &v9[v8];
  }
  *((_DWORD *)v5 + 8) = *(_DWORD *)(a1 + 32);
  *a2 = v5;
  return result;
}

void sub_20B9B1218(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  MEMORY[0x20BD39CB0](v1, 0x1091C40E88550C8);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9B124C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t sub_20B9B1254(uint64_t result, uint64_t *a2, uint64_t a3, int *a4)
{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  uint64_t v14;

  if (a3 >= 2)
  {
    v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= ((uint64_t)a4 - result) >> 2)
    {
      v5 = ((uint64_t)a4 - result) >> 1;
      v6 = v5 | 1;
      v7 = (int *)(result + 4 * (v5 | 1));
      v8 = v5 + 2;
      v9 = *a2;
      if (v8 < a3 && *(float *)(v9 + 4 * *v7) > *(float *)(v9 + 4 * v7[1]))
      {
        ++v7;
        v6 = v8;
      }
      v10 = *v7;
      v11 = *a4;
      v12 = *(float *)(v9 + 4 * v11);
      if (*(float *)(v9 + 4 * v10) <= v12)
      {
        do
        {
          *a4 = v10;
          a4 = v7;
          if (v4 < v6)
            break;
          v13 = 2 * v6;
          v6 = (2 * v6) | 1;
          v7 = (int *)(result + 4 * v6);
          v14 = v13 + 2;
          if (v14 < a3 && *(float *)(v9 + 4 * *v7) > *(float *)(v9 + 4 * v7[1]))
          {
            ++v7;
            v6 = v14;
          }
          v10 = *v7;
        }
        while (*(float *)(v9 + 4 * v10) <= v12);
        *a4 = v11;
      }
    }
  }
  return result;
}

_QWORD *sub_20B9B1330(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = &off_24C461710;
  a1[5] = &off_24C460D48;
  v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  v3 = a1[4];
  a1[4] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[3];
  a1[3] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = a1[2];
  a1[2] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = a1[1];
  *a1 = &unk_24C4629A8;
  a1[1] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return a1;
}

uint64_t sub_20B9B13E4(uint64_t a1, uint64_t a2)
{
  _OWORD *v3;
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  char *v7;

  *(_QWORD *)a1 = &off_24C467CB0;
  *(_QWORD *)(a1 + 8) = a2;
  v3 = (_OWORD *)operator new[]();
  v4 = v3 + 1;
  *v3 = xmmword_20BA56390;
  v5 = v3 + 3;
  v6 = -14336;
  do
  {
    v7 = (char *)v5 + v6;
    *((_QWORD *)v7 + 1794) = 0;
    *((_OWORD *)v7 + 896) = 0uLL;
    v6 += 56;
  }
  while (v6);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = operator new[]();
  return a1;
}

_QWORD *sub_20B9B1478(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;

  *a1 = &off_24C467CB0;
  v2 = a1[2];
  if (v2)
  {
    v3 = *(_QWORD *)(v2 - 8);
    if (v3)
    {
      v4 = v2 + 56 * v3;
      do
      {
        v5 = *(_QWORD *)(v4 - 24);
        if (v5)
        {
          v6 = *(_QWORD *)(v4 - 16);
          v7 = *(void **)(v4 - 24);
          if (v6 != v5)
          {
            do
            {
              v6 -= 32;
              sub_20B9B34DC(v6);
            }
            while (v6 != v5);
            v7 = *(void **)(v4 - 24);
          }
          *(_QWORD *)(v4 - 16) = v5;
          operator delete(v7);
        }
        v4 -= 56;
      }
      while (v4 != v2);
    }
    MEMORY[0x20BD39C80](v2 - 16, 0x1020C80097B8DA0);
  }
  v8 = a1[5];
  if (v8)
    MEMORY[0x20BD39C80](v8, 0x1000C80BDFB0063);
  return a1;
}

void sub_20B9B154C(_QWORD *a1)
{
  sub_20B9B1478(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B9B1570(uint64_t a1, uint64_t *a2, int a3, int a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t result;
  char v8;
  uint64_t v9;
  int v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int64x2_t *v15;
  int64x2_t *v16;
  uint64_t *v17;
  int64x2_t *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  char *v27;
  void **v28;
  void **v29;
  void **v30;
  void **v31;
  void **v32;
  void **v33;
  void **v34;
  void **v35;
  uint64_t v36;
  void **v37;
  void **v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char **v68;
  char **v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  void **v73;
  void **v74;
  void **v75;
  __int16 v76;
  char v77[8];
  void **v78;
  void **v79;
  __int16 v80;
  uint64_t v81;
  void **v82;
  unsigned __int16 v83;

  v6 = a1;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = a4;
  v71 = 0;
  LODWORD(v70) = a3;
  result = sub_20B9B1C7C(a1, a2, a3 + 1, (unsigned int *)&v71, 1);
  v67 = v6;
  if (*(_BYTE *)(v6 + 32))
  {
    v8 = *(_BYTE *)(v6 + 35);
    if (v8)
    {
      v9 = *(_QWORD *)(v6 + 8);
      if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 16) - 8) + 16) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 16)
                                                                                                - 8)
                                                                                    + 8))
      {
        v8 = 0;
      }
      else
      {
        v10 = *(unsigned __int8 *)(v9 + 536);
        v8 = (int)v70 > 0 && v10 != 0;
      }
    }
    *(_BYTE *)(v6 + 36) = v8;
    if (!*(_QWORD *)(v6 + 24))
      return result;
    while (1)
    {
      result = sub_20B9B1C7C(v6, a2, v70, (unsigned int *)&v71, 0);
      if ((result & 1) != 0)
        break;
      if (v71 == 0xFFFF)
      {
        result = sub_20B9B20F4(v6, a2);
        if ((result & 1) != 0)
        {
          v55 = *(_QWORD *)(v6 + 16);
          v56 = *(_QWORD *)(v6 + 24);
          if (*(_BYTE *)(v6 + 33)
            && (v57 = v55 + 56 * (v56 - 1), v59 = *(_QWORD *)(v57 + 8), v58 = (_QWORD *)(v57 + 8), v59))
          {
            result = *(_QWORD *)(v55 + 56 * (v56 - 1));
            if (result)
            {
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
              if (*v58 + 1 == result)
              {
                v55 = *(_QWORD *)(v67 + 16);
                v56 = *(_QWORD *)(v67 + 24);
                goto LABEL_69;
              }
            }
          }
          else
          {
LABEL_69:
            result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a5 + 16))(a5, v55, v56);
          }
LABEL_75:
          v71 = 0;
          v6 = v67;
          goto LABEL_76;
        }
        v61 = *(_QWORD *)(v6 + 24) - 1;
        v62 = *(_QWORD *)(v6 + 16) + 56 * v61;
        LODWORD(v70) = *(_DWORD *)(v62 + 8);
        v71 = *(_DWORD *)(v62 + 16) + 1;
        *(_QWORD *)(v6 + 24) = v61;
        if (!v61)
          return result;
      }
      else
      {
        ++v71;
LABEL_76:
        if (!*(_QWORD *)(v6 + 24))
          return result;
      }
    }
    v46 = v6;
    v47 = *(_QWORD *)(v6 + 16);
    v48 = *(_QWORD *)(v46 + 24);
    v49 = v48 - 1;
    v50 = (uint64_t *)(v47 + 56 * (v48 - 1));
    if (*(_BYTE *)(v46 + 33))
    {
      v51 = v47 + 56 * v49;
      v53 = *(_QWORD *)(v51 + 8);
      v52 = (_QWORD *)(v51 + 8);
      v54 = v47;
      if (v53)
      {
        result = *v50;
        if (!*v50)
          goto LABEL_75;
        if (*v52 + 1 != (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v47))
        {
LABEL_73:
          result = *v50;
          if (*v50)
          {
            v60 = *(_DWORD *)(v47 + 56 * v49 + 8);
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
            LODWORD(v70) = v60 - result;
          }
          goto LABEL_75;
        }
        v54 = *(_QWORD *)(v67 + 16);
        v48 = *(_QWORD *)(v67 + 24);
      }
    }
    else
    {
      v54 = v47;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(a5 + 16))(a5, v54, v48);
    goto LABEL_73;
  }
  *(_BYTE *)(v6 + 36) = 0;
  v12 = *(_QWORD *)(v6 + 24);
  if (!v12)
    return result;
  v13 = 0;
  v14 = *(_QWORD *)(v6 + 16);
  do
  {
    v65 = v14;
    v66 = v12;
    v15 = (int64x2_t *)(v14 + 56 * v12);
    v16 = v15 + 2;
    v83 = -1;
    v17 = &v15[2].i64[1];
    v68 = (char **)&v15[-1];
    v69 = (char **)&v15[-2].i64[1];
    v64 = (uint64_t *)v15;
    v18 = v15 + 3;
    while (1)
    {
      result = sub_20B9E1DA8(*(_QWORD *)(v6 + 8), v70, v13);
      v83 = result;
      if ((_DWORD)result == 0xFFFF)
      {
LABEL_45:
        v14 = *(_QWORD *)(v6 + 16);
        v12 = *(_QWORD *)(v6 + 24) - 1;
        v40 = v14 + 56 * v12;
        v70 = *(_QWORD *)(v40 + 8);
        v13 = *(_DWORD *)(v40 + 16) + 1;
        *(_QWORD *)(v6 + 24) = v12;
        goto LABEL_52;
      }
      v19 = *v17;
      v20 = v16->i64[0];
      while (v19 != v20)
      {
        v19 -= 32;
        result = sub_20B9B34DC(v19);
      }
      *v17 = v20;
      v21 = *v69;
      v22 = *v68;
      if (*v69 == *v68)
      {
        v39 = v83;
        goto LABEL_44;
      }
      v23 = 0;
      do
      {
        v24 = *(_QWORD *)(*a2 + 8 * *v21);
        sub_20B99BBA0((uint64_t)(v21 + 8), v24, 2, (uint64_t)&v81);
        if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(_QWORD *)v24 + 88))(v24, &v81))
        {
          sub_20B8F8CD8((uint64_t)&v72, (uint64_t)&v81);
          v25 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v24 + 104))(v24, &v81);
          sub_20B8F8CD8((uint64_t)&v74, (uint64_t)&v72);
          LOBYTE(v76) = 0;
          HIBYTE(v76) = v25 != 0;
          v77[0] = *v21;
          v78 = 0;
          v79 = 0;
          sub_20B902340(&v78, &v74);
          v80 = v76;
          v26 = *v17;
          if ((unint64_t)*v17 >= v18->i64[0])
          {
            v27 = sub_20B9B352C(v16, v77);
          }
          else
          {
            *(_BYTE *)v26 = v77[0];
            *(_QWORD *)(v26 + 16) = 0;
            *(_QWORD *)(v26 + 8) = 0;
            sub_20B902340((void ***)(v26 + 8), &v78);
            *(_WORD *)(v26 + 24) = v80;
            v27 = (char *)(v26 + 32);
            *v17 = v26 + 32;
          }
          *v17 = (uint64_t)v27;
          v28 = v79;
          v79 = 0;
          if (v28)
          {
            v29 = sub_20B8F8AB8(v28);
            MEMORY[0x20BD39CB0](v29, 0x20C4093837F09);
          }
          v30 = v78;
          v78 = 0;
          if (v30)
            MEMORY[0x20BD39CB0](v30, 0x1010C40E4C6A875);
          v31 = v75;
          v75 = 0;
          if (v31)
          {
            v32 = sub_20B8F8AB8(v31);
            MEMORY[0x20BD39CB0](v32, 0x20C4093837F09);
          }
          v33 = v74;
          v74 = 0;
          if (v33)
            MEMORY[0x20BD39CB0](v33, 0x1010C40E4C6A875);
          v34 = v73;
          v73 = 0;
          if (v34)
          {
            v35 = sub_20B8F8AB8(v34);
            MEMORY[0x20BD39CB0](v35, 0x20C4093837F09);
          }
          v36 = v72;
          v72 = 0;
          if (v36)
            MEMORY[0x20BD39CB0](v36, 0x1010C40E4C6A875);
          v23 = 1;
        }
        v37 = v82;
        v82 = 0;
        if (v37)
        {
          v38 = sub_20B8F8AB8(v37);
          MEMORY[0x20BD39CB0](v38, 0x20C4093837F09);
        }
        result = v81;
        v81 = 0;
        if (result)
          result = MEMORY[0x20BD39CB0](result, 0x1010C40E4C6A875);
        v21 += 32;
      }
      while (v21 != v22);
      v39 = v83;
      if ((v23 & 1) != 0)
        break;
      v6 = v67;
LABEL_44:
      ++v13;
      if (v39 == 0xFFFF)
        goto LABEL_45;
    }
    v41 = v65 + 56 * v66;
    *(_QWORD *)(v41 + 8) = (int)v70;
    *(_QWORD *)(v41 + 16) = v13;
    *(_WORD *)(v41 + 26) = v39;
    *v64 = 0;
    v6 = v67;
    v14 = *(_QWORD *)(v67 + 16);
    v42 = *(_QWORD *)(v67 + 24);
    v12 = v42 + 1;
    *(_QWORD *)(v67 + 24) = v42 + 1;
    if (!*(_BYTE *)(v67 + 33)
      || (v43 = v14 + 56 * v42, v45 = *(_QWORD *)(v43 + 8), v44 = (_QWORD *)(v43 + 8), !v45)
      || (result = *(_QWORD *)(v14 + 56 * v42)) != 0
      && (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result),
          v14 = *(_QWORD *)(v67 + 16),
          v12 = *(_QWORD *)(v67 + 24),
          *v44 + 1 == result))
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 16))(a5, v14);
      v14 = *(_QWORD *)(v67 + 16);
      v12 = *(_QWORD *)(v67 + 24);
    }
    v13 = 0;
    v70 = *(_QWORD *)(v14 + 56 * v12 - 48) - 1;
LABEL_52:
    ;
  }
  while (v12);
  return result;
}

void sub_20B9B1B4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19, uint64_t a20,void **a21,uint64_t a22,uint64_t a23,uint64_t a24,void **a25)
{
  uint64_t v25;
  void **v27;
  void **v28;
  void **v29;
  void **v30;
  void **v31;
  uint64_t v32;

  if (a25)
  {
    v27 = sub_20B8F8AB8(a25);
    MEMORY[0x20BD39CB0](v27, 0x20C4093837F09);
  }
  if (a24)
    MEMORY[0x20BD39CB0](a24, 0x1010C40E4C6A875);
  if (a21)
  {
    v28 = sub_20B8F8AB8(a21);
    MEMORY[0x20BD39CB0](v28, 0x20C4093837F09);
  }
  if (a20)
    MEMORY[0x20BD39CB0](a20, 0x1010C40E4C6A875);
  if (a19)
  {
    v29 = sub_20B8F8AB8(a19);
    MEMORY[0x20BD39CB0](v29, 0x20C4093837F09);
  }
  if (a18)
    MEMORY[0x20BD39CB0](a18, 0x1010C40E4C6A875);
  v30 = *(void ***)(v25 - 104);
  *(_QWORD *)(v25 - 104) = 0;
  if (v30)
  {
    v31 = sub_20B8F8AB8(v30);
    MEMORY[0x20BD39CB0](v31, 0x20C4093837F09);
  }
  v32 = *(_QWORD *)(v25 - 112);
  *(_QWORD *)(v25 - 112) = 0;
  if (v32)
    MEMORY[0x20BD39CB0](v32, 0x1010C40E4C6A875);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B9B1C7C(uint64_t a1, uint64_t *a2, signed int a3, unsigned int *a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  int v16;
  char v17;
  int v18;
  __int16 v19;
  _BOOL4 v21;
  unint64_t v22;
  __int16 v23;
  __int16 v24;
  int v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64x2_t *v33;
  int64x2_t *v34;
  char *v35;
  uint64_t v36;
  uint64_t i;
  char **v38;
  uint64_t result;
  uint64_t v40;
  unsigned __int8 v41;
  unint64_t v42;
  _QWORD *v43;
  char *v44;
  char *v45;
  void **v46;
  void **v47;
  void **v48;
  void **v49;
  void **v50;
  void **v51;
  void **v52;
  void **v53;
  uint64_t v54;
  _BOOL4 v55;
  char v56;
  unsigned int *v57;
  uint64_t v58;
  void **v59;
  void **v60;
  void **v61;
  __int16 v62;
  char v63[8];
  void **v64;
  void **v65;
  __int16 v66;
  __int16 v67;

  v10 = *(_QWORD *)(a1 + 24);
  if (!v10)
  {
    v12 = 0;
LABEL_6:
    v13 = 0;
    if ((a5 & 1) == 0)
      goto LABEL_4;
    goto LABEL_7;
  }
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD **)(v11 + 56 * v10 - 56);
  if (v10 == 1)
    goto LABEL_6;
  v13 = *(_QWORD *)(v11 + 56 * v10 - 112);
  if ((a5 & 1) == 0)
  {
LABEL_4:
    v14 = sub_20B9E1E2C(*(_QWORD *)(a1 + 8), a3, a4, v12, v13, 0);
    v10 = *(_QWORD *)(a1 + 24);
    goto LABEL_8;
  }
LABEL_7:
  v14 = 0;
LABEL_8:
  v67 = 0;
  if (v10)
  {
    v15 = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v10 - 28);
    v16 = v15;
    if (!v14)
    {
      v21 = 1;
      goto LABEL_41;
    }
    if (((*(uint64_t (**)(_QWORD *))(*v14 + 88))(v14) & 1) == 0)
    {
      v17 = *(_BYTE *)(v14[1] + 8);
      v18 = (*(uint64_t (**)(_QWORD *))(*v14 + 64))(v14);
      v19 = v15 | 0x10;
      if (v18 != 4)
        v19 = v15;
      if ((v17 & 1) != 0)
      {
        v22 = *(_QWORD *)(a1 + 24);
        if (v22 == 1)
          v23 = 6;
        else
          v23 = 2;
        if ((v15 & 2) != 0)
          v23 = 0;
        v24 = v23 | v19;
        if ((v15 & 8) != 0 && v22 >= 3)
          LOWORD(v16) = v24 & 0xF7;
        else
          LOWORD(v16) = v24;
      }
      else
      {
        if ((v15 & 4) != 0)
          v19 &= 0xFBu;
        if ((v15 & 2) != 0 && *(_QWORD *)(a1 + 24) == 2)
          LOWORD(v16) = v19 | 8;
        else
          LOWORD(v16) = v19;
      }
      if ((*(unsigned int (**)(_QWORD *))(*v14 + 64))(v14) == 8)
        LOWORD(v16) = 2 * (*(_QWORD *)(a1 + 24) != 1);
    }
  }
  else
  {
    LOWORD(v16) = *(unsigned __int8 *)(a1 + 35);
  }
  v16 = (unsigned __int16)v16;
  v21 = v14 == 0;
  if (v14 && (a5 & 1) == 0)
  {
    v26 = sub_20B9B2918(a1, a2, (uint64_t)v14, *(_QWORD *)(a1 + 24) - 1, &v67, (unsigned __int16)v16);
    if (v26 == 0xFFFF)
      return 0;
    v56 = a5;
    v21 = 0;
    v27 = v67;
    goto LABEL_43;
  }
LABEL_41:
  if (!a5)
  {
    v57 = a4;
    result = 0;
    if (!v21)
      return result;
    goto LABEL_68;
  }
  v56 = a5;
  v27 = 0;
  LOWORD(v26) = -1;
LABEL_43:
  v28 = *(_QWORD *)(a1 + 16);
  v29 = *(_QWORD *)(a1 + 24);
  v30 = v28 + 56 * v29;
  *(_WORD *)(v30 + 24) = v27;
  *(_QWORD *)v30 = v14;
  *(_QWORD *)(v30 + 8) = a3;
  v57 = a4;
  *(_QWORD *)(v30 + 16) = (int)*a4;
  *(_WORD *)(v30 + 26) = v26;
  *(_DWORD *)(v30 + 28) = v16;
  v55 = v21;
  if (v21)
  {
    v31 = *a2;
    v32 = a2[1];
    v33 = (int64x2_t *)(v28 + 56 * v29);
    v36 = v33[2].i64[0];
    v34 = v33 + 2;
    v35 = (char *)v36;
    v38 = (char **)&v34->i64[1];
    for (i = v34->i64[1]; (char *)i != v35; sub_20B9B34DC(i))
      i -= 32;
    *v38 = v35;
    if (v32 != v31)
    {
      v40 = 0;
      v41 = 0;
      v42 = (v32 - v31) >> 3;
      v43 = (_QWORD *)(v28 + 56 * v29 + 48);
      do
      {
        (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(*a2 + 8 * v40) + 56))(&v58);
        sub_20B8F8CD8((uint64_t)&v60, (uint64_t)&v58);
        v62 = 256;
        v63[0] = v41;
        v64 = 0;
        v65 = 0;
        sub_20B902340(&v64, &v60);
        v66 = v62;
        v44 = *v38;
        if ((unint64_t)*v38 >= *v43)
        {
          v45 = sub_20B9B352C(v34, v63);
        }
        else
        {
          *v44 = v63[0];
          *((_QWORD *)v44 + 2) = 0;
          *((_QWORD *)v44 + 1) = 0;
          sub_20B902340((void ***)v44 + 1, &v64);
          *((_WORD *)v44 + 12) = v66;
          v45 = v44 + 32;
          *v38 = v44 + 32;
        }
        *v38 = v45;
        v46 = v65;
        v65 = 0;
        if (v46)
        {
          v47 = sub_20B8F8AB8(v46);
          MEMORY[0x20BD39CB0](v47, 0x20C4093837F09);
        }
        v48 = v64;
        v64 = 0;
        if (v48)
          MEMORY[0x20BD39CB0](v48, 0x1010C40E4C6A875);
        v49 = v61;
        v61 = 0;
        if (v49)
        {
          v50 = sub_20B8F8AB8(v49);
          MEMORY[0x20BD39CB0](v50, 0x20C4093837F09);
        }
        v51 = v60;
        v60 = 0;
        if (v51)
          MEMORY[0x20BD39CB0](v51, 0x1010C40E4C6A875);
        v52 = v59;
        v59 = 0;
        if (v52)
        {
          v53 = sub_20B8F8AB8(v52);
          MEMORY[0x20BD39CB0](v53, 0x20C4093837F09);
        }
        v54 = v58;
        v58 = 0;
        if (v54)
          MEMORY[0x20BD39CB0](v54, 0x1010C40E4C6A875);
        v40 = ++v41;
      }
      while (v42 > v41);
    }
  }
  ++*(_QWORD *)(a1 + 24);
  result = 1;
  LOBYTE(a5) = v56;
  if (v55)
  {
LABEL_68:
    if ((a5 & 1) == 0)
      *v57 = 0xFFFF;
  }
  return result;
}

void sub_20B9B20C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void **v4;
  va_list va;
  uint64_t v6;
  void **v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, void **);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, void **);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  sub_20B9B28CC((uint64_t)va2);
  sub_20B8FD7F0((void ***)va1);
  sub_20B8FD7F0((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9B20F4(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  __int16 v8;
  int v9;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2 < 2)
    return 0;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = v2 - 1;
  v5 = v3 + 56 * (v2 - 1);
  v6 = *(_QWORD *)v5;
  v7 = *(_DWORD *)(v5 + 28);
  v8 = *(_WORD *)(v5 + 24);
  v5 += 24;
  *(_WORD *)v5 = v8 + 1;
  v9 = sub_20B9B2918(a1, a2, v6, v2 - 2, (_WORD *)v5, v7);
  if (v9 == 0xFFFF)
    return 0;
  *(_WORD *)(v3 + 56 * v4 + 26) = v9;
  return 1;
}

void sub_20B9B2164(_QWORD *a1, uint64_t **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD v29[11];
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;

  v5 = a1[1];
  v39 = 0;
  v40 = 0;
  v38 = 0;
  sub_20B87ACC8(&v38, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 1);
  sub_20B9E2834(v5, &v38, 7uLL, &v41);
  if (v38)
  {
    v39 = v38;
    operator delete(v38);
  }
  v6 = v41;
  v7 = v42;
  v8 = (char *)v42 - (char *)v41;
  if (v42 != v41)
  {
    v9 = ((uint64_t)(*(_QWORD *)(a1[1] + 16) - *(_QWORD *)(a1[1] + 8)) >> 3) - 1;
    v10 = 56 * (v8 >> 3);
    v25 = v8 >> 3;
    v11 = 2 * (v8 >> 3) - 2;
    do
    {
      v12 = *v6;
      v13 = *(_WORD *)(*(_QWORD *)(*v6 + 8) + 2);
      *(_WORD *)(a1[5] + v11) = v13;
      v14 = a1[2] + v10;
      *(_WORD *)(v14 - 30) = v13;
      *(_QWORD *)(v14 - 56) = v12;
      *(_QWORD *)(v14 - 48) = v9;
      v9 -= (*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
      ++v6;
      v10 -= 56;
      v11 -= 2;
    }
    while (v6 != v7);
    v15 = 0;
    v16 = 1;
    if ((unint64_t)((char *)v42 - (char *)v41) <= 0x10)
      v16 = 2;
    v26 = v16;
    v34 = 0;
    v35 = &v34;
    v36 = 0x2000000000;
    v37 = 0;
    v30 = 0;
    v31 = &v30;
    v32 = 0x2000000000;
    v33 = 0;
    v17 = MEMORY[0x24BDAC760];
    v18 = &v30;
    v19 = v25;
    do
    {
      if ((unint64_t)v35[3] > 2)
        break;
      v20 = v19 - v15;
      if (v19 - v15 < v26)
        break;
      v22 = *a2;
      v21 = a2[1];
      if (*a2 != v21)
      {
        do
        {
          v23 = *v22;
          v24 = a1[5] + 2 * v15;
          v29[0] = v17;
          v29[1] = 0x40000000;
          v29[2] = sub_20B9B2404;
          v29[3] = &unk_24C46C6B8;
          v29[8] = v15;
          v29[9] = v20;
          v29[10] = v23;
          v29[4] = a4;
          v29[5] = &v30;
          v29[6] = &v34;
          v29[7] = a1;
          (*(void (**)(uint64_t, uint64_t, unint64_t, unint64_t, _QWORD *))(*(_QWORD *)v23 + 128))(v23, v24, 2 * v20, 2 * v20, v29);
          ++v22;
        }
        while (v22 != v21);
        v18 = v31;
        v19 = v25;
      }
      if (*((_BYTE *)v18 + 24))
        break;
      ++v15;
    }
    while (v15 < v19);
    _Block_object_dispose(&v30, 8);
    _Block_object_dispose(&v34, 8);
    v7 = v41;
  }
  if (v7)
  {
    v42 = v7;
    operator delete(v7);
  }
}

void sub_20B9B23B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;
  void *v30;

  v30 = *(void **)(v28 - 152);
  if (v30)
  {
    *(_QWORD *)(v28 - 144) = v30;
    operator delete(v30);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B9B2404(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, _BYTE *a5)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];

  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 16) + 56 * *(_QWORD *)(a1 + 64);
  v10 = a4 >> 1;
  if (!a3)
    v10 = 0;
  v16[0] = a3;
  v16[1] = v10;
  v11 = *(_QWORD *)(a1 + 72);
  v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80));
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t))(v8 + 16))(v8, v9, v11, v16, a2, v12, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  v14 = *(_QWORD *)(a1 + 72);
  v15 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  if (v14 > *(_QWORD *)(v15 + 24))
    *(_QWORD *)(v15 + 24) = v14;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
    *a5 = 1;
  return result;
}

void sub_20B9B24D4(_QWORD *a1, _QWORD *a2, int a3, uint64_t a4)
{
  uint64_t v7;
  int v8;
  int64x2_t *v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  void **v19;
  void **v20;
  void **v21;
  void **v22;
  void **v23;
  void **v24;
  void **v25;
  void **v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  int v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  void **v45;
  void **v46;
  void **v47;
  __int16 v48;
  char **v49;
  void **v50;
  void **v51;
  __int16 v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;

  v53 = 0;
  v54 = 0;
  v55 = 0;
  v7 = a1[1];
  if (a3)
    v8 = sub_20B9EA514(v7, &v53);
  else
    v8 = sub_20B9EA0B4(v7, (uint64_t)&v53);
  if (v8 && *(_QWORD *)(a1[1] + 16) - *(_QWORD *)(a1[1] + 8) >= 9uLL)
  {
    v43 = *(_QWORD *)(a1[1] + 16) - *(_QWORD *)(a1[1] + 8);
    v41 = v53;
    v42 = v54;
    v9 = (int64x2_t *)a1[2];
    v10 = v9[2].i64[0];
    for (i = v9[2].i64[1]; i != v10; sub_20B9B34DC(i))
      i -= 32;
    v9[2].i64[1] = v10;
    v12 = a2[1];
    v13 = v12 - *a2;
    if (v12 != *a2)
    {
      v14 = 0;
      v15 = 0;
      v16 = v13 >> 3;
      do
      {
        (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(*a2 + 8 * v14) + 56))(&v44);
        sub_20B8F8CD8((uint64_t)&v46, (uint64_t)&v44);
        v48 = 256;
        LOBYTE(v49) = v15;
        v50 = 0;
        v51 = 0;
        sub_20B902340(&v50, &v46);
        v52 = v48;
        v17 = v9[2].u64[1];
        if (v17 >= v9[3].i64[0])
        {
          v18 = sub_20B9B352C(v9 + 2, (char *)&v49);
        }
        else
        {
          *(_BYTE *)v17 = (_BYTE)v49;
          *(_QWORD *)(v17 + 16) = 0;
          *(_QWORD *)(v17 + 8) = 0;
          sub_20B902340((void ***)(v17 + 8), &v50);
          *(_WORD *)(v17 + 24) = v52;
          v18 = (char *)(v17 + 32);
          v9[2].i64[1] = v17 + 32;
        }
        v9[2].i64[1] = (uint64_t)v18;
        v19 = v51;
        v51 = 0;
        if (v19)
        {
          v20 = sub_20B8F8AB8(v19);
          MEMORY[0x20BD39CB0](v20, 0x20C4093837F09);
        }
        v21 = v50;
        v50 = 0;
        if (v21)
          MEMORY[0x20BD39CB0](v21, 0x1010C40E4C6A875);
        v22 = v47;
        v47 = 0;
        if (v22)
        {
          v23 = sub_20B8F8AB8(v22);
          MEMORY[0x20BD39CB0](v23, 0x20C4093837F09);
        }
        v24 = v46;
        v46 = 0;
        if (v24)
          MEMORY[0x20BD39CB0](v24, 0x1010C40E4C6A875);
        v25 = v45;
        v45 = 0;
        if (v25)
        {
          v26 = sub_20B8F8AB8(v25);
          MEMORY[0x20BD39CB0](v26, 0x20C4093837F09);
        }
        v27 = v44;
        v44 = 0;
        if (v27)
          MEMORY[0x20BD39CB0](v27, 0x1010C40E4C6A875);
        v14 = ++v15;
      }
      while (v16 > v15);
    }
    v28 = 0;
    v29 = 1;
    a1[3] = 1;
    v30 = (v43 >> 3) - 1;
    do
    {
      while (v29 < ((v42 - (uint64_t)v41) >> 4) + 1)
      {
        if (v28 > 0)
          break;
        v35 = *(_QWORD *)&v53[16 * v29 - 16];
        LOWORD(v46) = 0;
        if (!v35)
          break;
        v36 = sub_20B9B2918((uint64_t)a1, a2, v35, v29 - 1, &v46, 0x24u);
        if (v36 == 0xFFFF)
          break;
        v37 = a1[3];
        v38 = a1[2] + 56 * v37;
        *(_QWORD *)v38 = v35;
        v39 = (__int16)v46;
        *(_QWORD *)(v38 + 8) = v30;
        *(_WORD *)(v38 + 24) = v39;
        *(_QWORD *)(v38 + 16) = 0;
        *(_WORD *)(v38 + 26) = v36;
        *(_DWORD *)(v38 + 28) = 36;
        a1[3] = v37 + 1;
        if (v30 || ((*(void (**)(uint64_t))(a4 + 16))(a4), (v35 = *(_QWORD *)v38) != 0))
        {
          v40 = *(_QWORD *)(v38 + 8);
          v30 = v40 - (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 40))(v35);
        }
        else
        {
          v30 = 0;
        }
LABEL_40:
        v28 = 0;
        v29 = a1[3];
        if (!v29)
          goto LABEL_43;
      }
      v31 = sub_20B9B20F4((uint64_t)a1, a2);
      v32 = a1[2];
      v33 = a1[3];
      v29 = v33 - 1;
      v34 = *(_QWORD *)(v32 + 56 * (v33 - 1) + 8);
      if ((v31 & 1) != 0)
      {
        if (!v34)
          (*(void (**)(uint64_t))(a4 + 16))(a4);
        goto LABEL_40;
      }
      v28 = *(_DWORD *)(v32 + 56 * v29 + 16) + 1;
      a1[3] = v29;
      v30 = v34;
    }
    while (v33 != 1);
  }
LABEL_43:
  v49 = &v53;
  sub_20B8E736C((void ***)&v49);
}

void sub_20B9B287C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  a18 = (void **)&a22;
  sub_20B8E736C(&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9B28CC(uint64_t a1)
{
  uint64_t v2;

  sub_20B8F8A7C((void ***)(a1 + 16), 0);
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    MEMORY[0x20BD39CB0](v2, 0x1010C40E4C6A875);
  return a1;
}

uint64_t sub_20B9B2918(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, _WORD *a5, unsigned int a6)
{
  BOOL v9;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  __int16 *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char v29;
  uint64_t v30;
  unsigned int v31;
  BOOL v32;
  char v33;
  char v34;
  uint64_t v35;
  char *v36;
  void **v37;
  void **v38;
  void **v39;
  void **v40;
  void **v41;
  void **v42;
  void **v43;
  void **v44;
  uint64_t v45;
  void **v46;
  void **v47;
  uint64_t v48;
  _WORD *v50;
  uint64_t v51;
  unsigned int v53;
  int64x2_t *v55;
  _QWORD *v56;
  uint64_t v58;
  void **v59;
  void **v60;
  void **v61;
  __int16 v62;
  char v63[8];
  void **v64;
  void **v65;
  __int16 v66;
  uint64_t v67;
  void **v68;
  __int16 v69;
  _WORD v70[5];

  if (*(_BYTE *)(a1 + 36))
    v9 = a4 == 1;
  else
    v9 = 0;
  if (v9 && (a6 & 8) != 0)
  {
    v15 = sub_20B9E23E4(*(_QWORD *)(a1 + 8), a3, *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56));
    if ((v15 & 1) != 0)
      return 0xFFFFLL;
  }
  v11 = 0;
  v70[0] = 0;
  v12 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 40);
  v51 = a1;
  if ((v12 - 3) >= 2)
  {
    if (v12 == 5)
    {
      v13 = (a6 >> 5) & 1;
      v14 = 2;
      goto LABEL_16;
    }
    v11 = 1;
  }
  v13 = v11 & (a6 >> 5);
  v14 = (v12 - 3) < 2;
LABEL_16:
  v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(a3, v14, v13);
  v17 = (unsigned __int16)*a5;
  v18 = 0xFFFFLL;
  v53 = v16;
  if (v17 < v16)
  {
    v19 = *(_QWORD *)(a1 + 16) + 56 * a4;
    v20 = (uint64_t *)(v19 + 96);
    v55 = (int64x2_t *)(v19 + 88);
    v56 = (_QWORD *)(v19 + 104);
    v50 = a5;
    while (1)
    {
      v21 = *v20;
      v22 = v55->i64[0];
      if (*v20 != v55->i64[0])
      {
        do
        {
          v21 -= 32;
          sub_20B9B34DC(v21);
        }
        while (v21 != v22);
        LOWORD(v17) = *a5;
      }
      *v20 = v22;
      v23 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 56))(a3, (unsigned __int16)v17);
      if ((_DWORD)v23 != 0xFFFF)
      {
        v18 = v23;
        v24 = v23;
        if (*(_BYTE *)(v51 + 34))
        {
          v25 = (__int16 *)((char *)&unk_20BA5932C + 2 * v23 - 28);
          if (v23 >= 0x1AC)
            v25 = &aXxxxxfffffyyyy[v23 - 428];
          v24 = *v25;
        }
        v69 = v24;
        v26 = *(_QWORD *)(v51 + 16) + 56 * a4;
        v28 = *(char **)(v26 + 32);
        v27 = *(char **)(v26 + 40);
        if (v28 == v27)
        {
          a5 = v50;
        }
        else
        {
          v29 = 0;
          do
          {
            v30 = *(_QWORD *)(*a2 + 8 * *v28);
            if ((a6 & 6) == 0
              || ((v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 16))(v30), v31 <= 0x11)
                ? (v32 = ((1 << v31) & 0x24E83) == 0)
                : (v32 = 1),
                  !v32))
            {
              if (!v28[24])
              {
                sub_20B99BBA0((uint64_t)(v28 + 8), v30, 2, (uint64_t)&v67);
                if ((*(unsigned int (**)(uint64_t, uint64_t *, _QWORD, char *, _WORD *))(*(_QWORD *)v30 + 96))(v30, &v67, a6, (char *)v70 + 1, v70))
                {
                  sub_20B8F8CD8((uint64_t)&v58, (uint64_t)&v67);
                  v33 = HIBYTE(v70[0]);
                  v34 = v70[0];
                  sub_20B8F8CD8((uint64_t)&v60, (uint64_t)&v58);
                  LOBYTE(v62) = v33;
                  HIBYTE(v62) = v34;
                  v63[0] = *v28;
                  v64 = 0;
                  v65 = 0;
                  sub_20B902340(&v64, &v60);
                  v66 = v62;
                  v35 = *v20;
                  if ((unint64_t)*v20 >= *v56)
                  {
                    v36 = sub_20B9B352C(v55, v63);
                  }
                  else
                  {
                    *(_BYTE *)v35 = v63[0];
                    *(_QWORD *)(v35 + 16) = 0;
                    *(_QWORD *)(v35 + 8) = 0;
                    sub_20B902340((void ***)(v35 + 8), &v64);
                    *(_WORD *)(v35 + 24) = v66;
                    v36 = (char *)(v35 + 32);
                    *v20 = v35 + 32;
                  }
                  *v20 = (uint64_t)v36;
                  v37 = v65;
                  v65 = 0;
                  if (v37)
                  {
                    v38 = sub_20B8F8AB8(v37);
                    MEMORY[0x20BD39CB0](v38, 0x20C4093837F09);
                  }
                  v39 = v64;
                  v64 = 0;
                  if (v39)
                    MEMORY[0x20BD39CB0](v39, 0x1010C40E4C6A875);
                  v40 = v61;
                  v61 = 0;
                  if (v40)
                  {
                    v41 = sub_20B8F8AB8(v40);
                    MEMORY[0x20BD39CB0](v41, 0x20C4093837F09);
                  }
                  v42 = v60;
                  v60 = 0;
                  if (v42)
                    MEMORY[0x20BD39CB0](v42, 0x1010C40E4C6A875);
                  v43 = v59;
                  v59 = 0;
                  if (v43)
                  {
                    v44 = sub_20B8F8AB8(v43);
                    MEMORY[0x20BD39CB0](v44, 0x20C4093837F09);
                  }
                  v45 = v58;
                  v58 = 0;
                  if (v45)
                    MEMORY[0x20BD39CB0](v45, 0x1010C40E4C6A875);
                  v29 = 1;
                }
                v46 = v68;
                v68 = 0;
                if (v46)
                {
                  v47 = sub_20B8F8AB8(v46);
                  MEMORY[0x20BD39CB0](v47, 0x20C4093837F09);
                }
                v48 = v67;
                v67 = 0;
                if (v48)
                  MEMORY[0x20BD39CB0](v48, 0x1010C40E4C6A875);
              }
            }
            v28 += 32;
          }
          while (v28 != v27);
          a5 = v50;
          if ((v29 & 1) != 0)
            return v18;
        }
      }
      LOWORD(v17) = *a5 + 1;
      *a5 = v17;
      if (v53 <= (unsigned __int16)v17)
        return 0xFFFFLL;
    }
  }
  return v18;
}

void sub_20B9B2D68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  void **v12;
  va_list va;
  uint64_t v14;
  void **v15;
  va_list va1;
  uint64_t v17;
  uint64_t v18;
  va_list va2;

  va_start(va2, a10);
  va_start(va1, a10);
  va_start(va, a10);
  v12 = va_arg(va1, void **);
  v14 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v15 = va_arg(va2, void **);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  sub_20B9B28CC((uint64_t)va2);
  sub_20B8FD7F0((void ***)va1);
  sub_20B8FD7F0((void ***)va);
  sub_20B8FD7F0((void ***)(v10 - 112));
  _Unwind_Resume(a1);
}

__CFArray *sub_20B9B2DA8(uint64_t a1, CFIndex a2)
{
  __CFArray *Mutable;
  const __CFAllocator *v5;
  __CFSet *v6;
  const __CFString *v7;
  const __CFString *v8;
  char v9;
  const __CFArray *ArrayBySeparatingStrings;
  CFIndex Count;
  unint64_t v12;
  CFIndex v13;
  unint64_t v14;
  signed int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  int v23;
  const __CFArray *v24;
  const __CFString *v25;
  __CFSet *v26;

  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  v5 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v6 = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6B8]);
  v26 = v6;
  v7 = sub_20B9EC374(*(_QWORD *)(a1 + 8));
  v8 = v7;
  v25 = v7;
  if (*(_BYTE *)(a1 + 35))
    v9 = CFStringGetLength(v7) > 0;
  else
    v9 = 0;
  ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(v5, v8, CFSTR("'"));
  v24 = ArrayBySeparatingStrings;
  Count = CFArrayGetCount(ArrayBySeparatingStrings);
  *(_QWORD *)(a1 + 24) = 0;
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16) - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  if (v12)
  {
    v13 = Count - 1;
    v14 = v12 >> 3;
    v23 = 0;
    sub_20B9B2FFC((uint64_t *)a1, v12 >> 3, (unsigned int *)&v23, 1, Mutable, v9, v6, Count - 1);
    if (*(_QWORD *)(a1 + 24))
    {
      v15 = v14 - 1;
      do
      {
        while (1)
        {
          if (CFArrayGetCount(Mutable) >= a2)
            goto LABEL_15;
          if ((sub_20B9B2FFC((uint64_t *)a1, v15, (unsigned int *)&v23, 0, Mutable, v9, v6, v13) & 1) == 0)
            break;
          v16 = *(_QWORD *)(a1 + 16) + 56 * *(_QWORD *)(a1 + 24);
          v17 = *(_QWORD *)(v16 - 48);
          v18 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 - 56) + 40))(*(_QWORD *)(v16 - 56));
          v19 = 0;
          v15 = v17 - v18;
LABEL_14:
          v23 = v19;
          if (!*(_QWORD *)(a1 + 24))
            goto LABEL_15;
        }
        if (v23 != 0xFFFF)
        {
          v19 = v23 + 1;
          goto LABEL_14;
        }
        v20 = *(_QWORD *)(a1 + 24) - 1;
        v21 = *(_QWORD *)(a1 + 16) + 56 * v20;
        v15 = *(_DWORD *)(v21 + 8);
        v23 = *(_DWORD *)(v21 + 16) + 1;
        *(_QWORD *)(a1 + 24) = v20;
      }
      while (v20);
    }
  }
LABEL_15:
  if (ArrayBySeparatingStrings)
    CFRelease(ArrayBySeparatingStrings);
  if (v8)
    CFRelease(v8);
  if (v6)
    CFRelease(v6);
  return Mutable;
}

void sub_20B9B2FAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  const void *v5;
  va_list va1;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  va_copy(va2, va1);
  v5 = va_arg(va2, const void *);
  sub_20B88B74C((const void **)va, 0);
  sub_20B87E150((const void **)va1, 0);
  sub_20B88B718((const void **)va2, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9B2FFC(uint64_t *a1, signed int a2, unsigned int *a3, char a4, __CFArray *a5, char a6, __CFSet *a7, CFIndex a8)
{
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  const __CFAllocator *v20;
  const __CFArray *Mutable;
  const __CFArray *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  const __CFAllocator *v30;
  int v31;
  _BOOL4 v32;
  const __CFAllocator *v33;
  __CFArray *v34;
  __CFArray *v35;
  BOOL v36;
  int v37;
  const __CFString *v38;
  const __CFString *v39;
  const __CFString *v40;
  CFStringRef v41;
  const __CFString *v42;
  const __CFArray *ArrayBySeparatingStrings;
  __CFArray *v44;
  CFIndex i;
  const __CFString *ValueAtIndex;
  __CFString *MutableCopy;
  __CFString *v48;
  CFStringRef v49;
  char v50;
  uint64_t *v53;
  __CFArray *theArray;
  int v56;
  CFRange v57;

  v12 = a1;
  v13 = a1[3];
  if (!v13)
  {
    v15 = 0;
LABEL_7:
    v16 = 0;
    if ((a4 & 1) == 0)
      goto LABEL_4;
LABEL_8:
    result = 0;
    goto LABEL_9;
  }
  v14 = a1[2];
  v15 = *(_QWORD **)(v14 + 56 * v13 - 56);
  if (v13 == 1)
    goto LABEL_7;
  v16 = *(_QWORD *)(v14 + 56 * v13 - 112);
  if ((a4 & 1) != 0)
    goto LABEL_8;
LABEL_4:
  result = (uint64_t)sub_20B9E1E2C(a1[1], a2, a3, v15, v16, 1);
  if (!result)
  {
    *a3 = 0xFFFF;
    return result;
  }
  v13 = v12[3];
LABEL_9:
  v18 = v12[2];
  v12[3] = v13 + 1;
  v19 = v18 + 56 * v13;
  *(_DWORD *)(v19 + 24) = -65536;
  *(_QWORD *)v19 = result;
  *(_QWORD *)(v19 + 8) = a2;
  *(_QWORD *)(v19 + 16) = (int)*a3;
  if ((a4 & 1) != 0 || a2 - (*(unsigned int (**)(uint64_t))(*(_QWORD *)result + 40))(result) != -1)
    return 1;
  v20 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  v22 = Mutable;
  v23 = v12[3];
  v24 = v23 - 1;
  if (v23 == 1)
  {
    v42 = CFStringCreateByCombiningStrings(v20, Mutable, CFSTR(" "));
    if ((a6 & 1) != 0)
      goto LABEL_40;
  }
  else
  {
    v50 = a6;
    v25 = 0;
    v26 = 56 * v23 - 56;
    v53 = v12;
    theArray = Mutable;
    do
    {
      v27 = *(_QWORD *)(v12[2] + v26);
      if (v27)
      {
        v56 = v25;
        v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 64))(v27);
        v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 64))(v27);
        v30 = v20;
        v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 64))(v27);
        v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 64))(v27) == 2;
        v33 = v30;
        v34 = CFArrayCreateMutable(v30, 0, MEMORY[0x24BDBD690]);
        v35 = v34;
        v36 = v28 == 5 || v29 == 6;
        v37 = v36;
        if (v36)
        {
          if (v28 == 5)
            v38 = CFSTR("(");
          else
            v38 = CFSTR("[");
          CFArrayAppendValue(v34, v38);
        }
        v39 = CFSTR("Mixed");
        if (v31 != 7)
          v39 = (const __CFString *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v27 + 16))(v27, 1);
        CFArrayAppendValue(v35, v39);
        v20 = v33;
        if (v37)
        {
          if (v28 == 5)
            v40 = CFSTR(")");
          else
            v40 = CFSTR("]");
          CFArrayAppendValue(v35, v40);
        }
        v25 = v32 | v56;
        v41 = CFStringCreateByCombiningStrings(v20, v35, &stru_24C4B3660);
        v22 = theArray;
        CFArrayAppendValue(theArray, v41);
        CFRelease(v39);
        CFRelease(v41);
        CFRelease(v35);
        v12 = v53;
      }
      v26 -= 56;
      --v24;
    }
    while (v24);
    v42 = CFStringCreateByCombiningStrings(v20, v22, CFSTR(" "));
    if ((v50 & 1) != 0)
    {
      if ((v25 & 1) != 0)
        goto LABEL_57;
LABEL_40:
      ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(v20, v42, CFSTR("'"));
      v44 = CFArrayCreateMutable(v20, 0, MEMORY[0x24BDBD690]);
      for (i = 0; i < CFArrayGetCount(ArrayBySeparatingStrings); ++i)
      {
        ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, i);
        MutableCopy = CFStringCreateMutableCopy(v20, 0, ValueAtIndex);
        v48 = MutableCopy;
        if (i >= a8)
        {
          CFStringTrimWhitespace(MutableCopy);
        }
        else
        {
          v57.length = CFStringGetLength(ValueAtIndex);
          v57.location = 0;
          CFStringFindAndReplace(v48, CFSTR(" "), &stru_24C4B3660, v57, 0);
        }
        CFArrayAppendValue(v44, v48);
        if (v48)
          CFRelease(v48);
      }
      v49 = CFStringCreateByCombiningStrings(v20, v44, CFSTR("' "));
      if (!CFSetContainsValue(a7, v49))
      {
        CFArrayAppendValue(a5, v49);
        CFSetAddValue(a7, v49);
      }
      if (v49)
        CFRelease(v49);
      if (v44)
        CFRelease(v44);
      if (ArrayBySeparatingStrings)
        CFRelease(ArrayBySeparatingStrings);
      goto LABEL_57;
    }
  }
  CFArrayAppendValue(a5, v42);
LABEL_57:
  CFRelease(v42);
  CFRelease(v22);
  return 1;
}

void sub_20B9B3478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  const void *v10;
  va_list va;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, const void *);
  sub_20B8B035C((const void **)va, 0);
  sub_20B88B74C((const void **)va1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9B34DC(uint64_t a1)
{
  uint64_t result;

  sub_20B8F8A7C((void ***)(a1 + 16), 0);
  result = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (result)
    JUMPOUT(0x20BD39CB0);
  return result;
}

char *sub_20B9B352C(int64x2_t *a1, char *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64x2_t v15;
  char *v16;
  char *v18;
  int64x2_t v19;
  char *v20;
  int64x2_t *v21;

  v2 = (a1->i64[1] - a1->i64[0]) >> 5;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 59)
    sub_20B80CDD8();
  v6 = a1[1].i64[0] - a1->i64[0];
  if (v6 >> 4 > v3)
    v3 = v6 >> 4;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0)
    v7 = 0x7FFFFFFFFFFFFFFLL;
  else
    v7 = v3;
  v21 = a1 + 1;
  if (v7)
  {
    if (v7 >> 59)
      sub_20B800BC0();
    v8 = (char *)operator new(32 * v7);
  }
  else
  {
    v8 = 0;
  }
  v9 = &v8[32 * v2];
  v18 = v8;
  v19.i64[0] = (uint64_t)v9;
  v10 = &v8[32 * v7];
  v20 = v10;
  *v9 = *a2;
  *((_QWORD *)v9 + 2) = 0;
  *((_QWORD *)v9 + 1) = 0;
  sub_20B902340((void ***)v9 + 1, (void ***)a2 + 1);
  *((_WORD *)v9 + 12) = *((_WORD *)a2 + 12);
  v11 = v9 + 32;
  v19.i64[1] = (uint64_t)(v9 + 32);
  v13 = a1->i64[0];
  v12 = a1->u64[1];
  if (v12 == a1->i64[0])
  {
    v15 = vdupq_n_s64(v12);
  }
  else
  {
    v14 = 0;
    do
    {
      v9[v14 - 32] = *(_BYTE *)(v12 + v14 - 32);
      sub_20B8F8CD8((uint64_t)&v9[v14 - 24], v12 + v14 - 24);
      *(_WORD *)&v9[v14 - 8] = *(_WORD *)(v12 + v14 - 8);
      v14 -= 32;
    }
    while (v12 + v14 != v13);
    v15 = *a1;
    v9 += v14;
    v11 = (char *)v19.i64[1];
    v10 = v20;
  }
  a1->i64[0] = (uint64_t)v9;
  a1->i64[1] = (uint64_t)v11;
  v19 = v15;
  v16 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v10;
  v20 = v16;
  v18 = (char *)v15.i64[0];
  sub_20B9B36B4((uint64_t)&v18);
  return v11;
}

uint64_t sub_20B9B36B4(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 32;
    sub_20B9B34DC(i - 32);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20B9B3700(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *v6;

  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = sub_20B8D0E3C(a2);
  *(_QWORD *)(a1 + 8) = a3;
  v6 = (_QWORD *)operator new();
  *v6 = &unk_24C461E58;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  sub_20B947C00(a2, (uint64_t *)(a1 + 88));
  *(_BYTE *)(a1 + 96) = 1;
  *(_WORD *)(a1 + 98) = 0;
  return a1;
}

void sub_20B9B3798(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B9B37BC(uint64_t a1)
{
  uint64_t v2;

  sub_20B9A5850((uint64_t **)(a1 + 88), 0);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t sub_20B9B3800(uint64_t result, unsigned int a2, int a3, uint64_t a4)
{
  int v4;
  int v5;

  if ((a2 & 0xA000) == 0)
  {
    if ((a2 & 0x10000) != 0)
    {
      *(_DWORD *)(result + 28) = 1;
    }
    else if (a4)
    {
      v4 = *(_DWORD *)(a4 + 68);
      *(_DWORD *)(result + 28) = v4;
      if (v4)
        a2 |= 0x10000u;
    }
    else
    {
      *(_DWORD *)(result + 28) = 0;
    }
  }
  v5 = a2 & 0x38000 | (((a2 >> 13) & 1) << 14) | (((a2 >> 4) & 3) << 10) | (a2 >> 2) & 0x10 | (a2 >> 12) & 4 | (a2 >> 2) & 1 | (a2 >> 1) & 0x80000 | (a2 << 9) & 0x200000 | (a2 >> 1) & 0x400000;
  if (a3)
    v5 |= 0x8000004u;
  *(_DWORD *)(result + 24) = v5;
  return result;
}

void sub_20B9B38A4(uint64_t *a1, uint64_t *a2, _QWORD *a3, uint64_t a4, uint64_t *a5, int a6)
{
  uint64_t v9;
  int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  CFIndex v16;
  uint64_t v17;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  BOOL v27;
  uint64_t *v28;
  uint64_t v29;
  const __CFString *v30;
  uint64_t CursorByAdvancingWithCharacters;
  BOOL v32;
  int TokenIDForString;
  CFStringRef v34;
  unint64_t v35;
  _DWORD *v36;
  _DWORD *v37;
  _DWORD *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  int v45;
  uint64_t v46;
  const __CFAllocator *v47;
  const __CFAllocator *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;

  v9 = a3[1];
  if (v9 > 1)
    a6 = 1;
  if (a1[6])
    v11 = a6;
  else
    v11 = 0;
  v50 = v11;
  if (a5)
    v49 = *a5;
  else
    v49 = 0;
  if (v9 >= 1)
  {
    v12 = 0;
    v13 = 0;
    v14 = *a2;
    v51 = a2[1];
    v48 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v46 = a4 + 16;
    v47 = (const __CFAllocator *)*MEMORY[0x24BDBD258];
    while (1)
    {
      v15 = *(unsigned __int16 *)(*a3 + 2 * v12);
      v16 = v15 - 48;
      v17 = v15 - 48 + v13;
      if (v15 < 0x31 || v17 > v51)
        break;
      if (!v50)
        goto LABEL_67;
      if (v15 != 49 || v49 == 0)
        goto LABEL_37;
      if (*(_QWORD *)(v49 + 8) <= v13)
        goto LABEL_37;
      v20 = a1[5];
      v23 = *(_QWORD *)(v20 + 32);
      v21 = v20 + 32;
      v22 = v23;
      if (!v23)
        goto LABEL_37;
      v24 = *(unsigned __int16 *)(v14 + 2 * v13);
      v25 = v21;
      do
      {
        v26 = *(unsigned __int16 *)(v22 + 32);
        v27 = v26 >= v24;
        if (v26 >= v24)
          v28 = (uint64_t *)v22;
        else
          v28 = (uint64_t *)(v22 + 8);
        if (v27)
          v25 = v22;
        v22 = *v28;
      }
      while (*v28);
      if (v25 == v21 || *(unsigned __int16 *)(v25 + 32) > v24)
        goto LABEL_37;
      v29 = *(_QWORD *)(v49 + 24);
      if (!v29)
        v29 = *(_QWORD *)(v49 + 16);
      v30 = (const __CFString *)sub_20B9E08C0(*(unsigned __int16 *)(v29 + 2 * v13), *(_DWORD *)v49);
      sub_20B88F140(a1[5], v24, v30);
      CursorByAdvancingWithCharacters = LMLexiconGetCursorByAdvancingWithCharacters();
      if (!CursorByAdvancingWithCharacters)
LABEL_37:
        CursorByAdvancingWithCharacters = LMLexiconGetCursorByAdvancingWithCharacters();
      v32 = !CursorByAdvancingWithCharacters || *(_QWORD *)a1[6] == 0;
      if (v32 || (TokenIDForString = LMLexiconCursorFirstTokenID()) == 0)
      {
LABEL_67:
        if (a1[7])
        {
          v34 = CFStringCreateWithCharactersNoCopy(v48, (const UniChar *)(v14 + 2 * v13), v16, v47);
          TokenIDForString = LMLanguageModelGetTokenIDForString();
          CFRelease(v34);
        }
        else
        {
          TokenIDForString = 0;
        }
      }
      v36 = *(_DWORD **)(a4 + 8);
      v35 = *(_QWORD *)(a4 + 16);
      if ((unint64_t)v36 >= v35)
      {
        v38 = *(_DWORD **)a4;
        v39 = ((uint64_t)v36 - *(_QWORD *)a4) >> 2;
        v40 = v39 + 1;
        if ((unint64_t)(v39 + 1) >> 62)
          sub_20B80CDD8();
        v41 = v35 - (_QWORD)v38;
        if (v41 >> 1 > v40)
          v40 = v41 >> 1;
        if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL)
          v42 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v42 = v40;
        if (v42)
        {
          v43 = (char *)sub_20B8127BC(v46, v42);
          v38 = *(_DWORD **)a4;
          v36 = *(_DWORD **)(a4 + 8);
        }
        else
        {
          v43 = 0;
        }
        v44 = &v43[4 * v39];
        *(_DWORD *)v44 = TokenIDForString;
        v37 = v44 + 4;
        while (v36 != v38)
        {
          v45 = *--v36;
          *((_DWORD *)v44 - 1) = v45;
          v44 -= 4;
        }
        *(_QWORD *)a4 = v44;
        *(_QWORD *)(a4 + 8) = v37;
        *(_QWORD *)(a4 + 16) = &v43[4 * v42];
        if (v38)
          operator delete(v38);
      }
      else
      {
        *v36 = TokenIDForString;
        v37 = v36 + 1;
      }
      *(_QWORD *)(a4 + 8) = v37;
      ++v12;
      v13 = v17;
      if (v12 == v9)
        return;
    }
    *(_QWORD *)(a4 + 8) = *(_QWORD *)a4;
  }
}

uint64_t sub_20B9B3B94(uint64_t a1, unsigned __int16 **a2, const __CFString *a3)
{
  BOOL v4;
  BOOL v5;

  if (*(_QWORD *)(a1 + 48))
  {
    if (a3 && a2[1] == (unsigned __int16 *)1)
    {
      sub_20B88F140(*(_QWORD *)(a1 + 40), **a2, a3);
      if (LMLexiconGetCursorByAdvancingWithCharacters())
        v4 = **(_QWORD **)(a1 + 48) == 0;
      else
        v4 = 1;
      if (!v4)
        return LMLexiconCursorFirstTokenID();
    }
    else
    {
      if (LMLexiconGetCursorByAdvancingWithCharacters())
        v5 = **(_QWORD **)(a1 + 48) == 0;
      else
        v5 = 1;
      if (!v5)
        return LMLexiconCursorFirstTokenID();
    }
  }
  return 0;
}

_QWORD *sub_20B9B3C58(_QWORD *a1, const void *a2, const void *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  int64x2_t *v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  int64x2_t v21;
  char *v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  int64x2_t v38;
  char *v39;
  _QWORD *v40;
  unint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  int64x2_t v54;
  char *v55;
  _QWORD *v56;
  _QWORD *v57;
  unint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  int64x2_t v71;
  char *v72;
  _QWORD *v73;
  unint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  int64x2_t v87;
  char *v88;
  _QWORD *v90;
  uint64_t v91;
  int64x2_t v92;
  char *v93;
  _QWORD *v94;

  *sub_20B9718AC(a1, a2, 1) = off_24C4635F8;
  a1[16] = _Block_copy(a3);
  v5 = (_QWORD *)operator new();
  v6 = v5;
  v7 = (int64x2_t *)(a1 + 9);
  *v5 = &unk_24C462B80;
  v8 = a1[11];
  v9 = (_QWORD *)a1[10];
  if ((unint64_t)v9 >= v8)
  {
    v11 = ((uint64_t)v9 - v7->i64[0]) >> 3;
    if ((unint64_t)(v11 + 1) >> 61)
      sub_20B80CDD8();
    v12 = v8 - v7->i64[0];
    v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    v94 = a1 + 11;
    if (v14)
      v15 = (char *)sub_20B800BE8((uint64_t)(a1 + 11), v14);
    else
      v15 = 0;
    v16 = &v15[8 * v11];
    v17 = &v15[8 * v14];
    v93 = v17;
    *(_QWORD *)v16 = v6;
    v10 = v16 + 8;
    v92.i64[1] = (uint64_t)(v16 + 8);
    v19 = (_QWORD *)a1[9];
    v18 = (_QWORD *)a1[10];
    if (v18 == v19)
    {
      v21 = vdupq_n_s64((unint64_t)v18);
    }
    else
    {
      do
      {
        v20 = *--v18;
        *v18 = 0;
        *((_QWORD *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      v21 = *v7;
      v10 = (_QWORD *)v92.i64[1];
      v17 = v93;
    }
    a1[9] = v16;
    a1[10] = v10;
    v92 = v21;
    v22 = (char *)a1[11];
    a1[11] = v17;
    v93 = v22;
    v91 = v21.i64[0];
    sub_20B8821E8((uint64_t)&v91);
  }
  else
  {
    *v9 = v5;
    v10 = v9 + 1;
  }
  a1[10] = v10;
  v23 = (_QWORD *)operator new();
  v24 = v23;
  *v23 = &unk_24C465320;
  v26 = (_QWORD *)a1[10];
  v25 = a1[11];
  if ((unint64_t)v26 >= v25)
  {
    v28 = ((uint64_t)v26 - v7->i64[0]) >> 3;
    if ((unint64_t)(v28 + 1) >> 61)
      sub_20B80CDD8();
    v29 = v25 - v7->i64[0];
    v30 = v29 >> 2;
    if (v29 >> 2 <= (unint64_t)(v28 + 1))
      v30 = v28 + 1;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
      v31 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v31 = v30;
    v94 = a1 + 11;
    if (v31)
      v32 = (char *)sub_20B800BE8((uint64_t)(a1 + 11), v31);
    else
      v32 = 0;
    v33 = &v32[8 * v28];
    v34 = &v32[8 * v31];
    v93 = v34;
    *(_QWORD *)v33 = v24;
    v27 = v33 + 8;
    v92.i64[1] = (uint64_t)(v33 + 8);
    v36 = (_QWORD *)a1[9];
    v35 = (_QWORD *)a1[10];
    if (v35 == v36)
    {
      v38 = vdupq_n_s64((unint64_t)v35);
    }
    else
    {
      do
      {
        v37 = *--v35;
        *v35 = 0;
        *((_QWORD *)v33 - 1) = v37;
        v33 -= 8;
      }
      while (v35 != v36);
      v38 = *v7;
      v27 = (_QWORD *)v92.i64[1];
      v34 = v93;
    }
    a1[9] = v33;
    a1[10] = v27;
    v92 = v38;
    v39 = (char *)a1[11];
    a1[11] = v34;
    v93 = v39;
    v91 = v38.i64[0];
    sub_20B8821E8((uint64_t)&v91);
  }
  else
  {
    *v26 = v23;
    v27 = v26 + 1;
  }
  a1[10] = v27;
  v40 = (_QWORD *)operator new();
  *v40 = &unk_24C4651C8;
  v40[1] = &off_24C469ED0;
  v40[4] = v40 + 1;
  v40[2] = a1;
  v90 = v40;
  v42 = (_QWORD *)a1[10];
  v41 = a1[11];
  if ((unint64_t)v42 >= v41)
  {
    v44 = ((uint64_t)v42 - v7->i64[0]) >> 3;
    if ((unint64_t)(v44 + 1) >> 61)
      sub_20B80CDD8();
    v45 = v41 - v7->i64[0];
    v46 = v45 >> 2;
    if (v45 >> 2 <= (unint64_t)(v44 + 1))
      v46 = v44 + 1;
    if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8)
      v47 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v47 = v46;
    v94 = a1 + 11;
    if (v47)
    {
      v48 = (char *)sub_20B800BE8((uint64_t)(a1 + 11), v47);
      v40 = v90;
    }
    else
    {
      v48 = 0;
    }
    v49 = &v48[8 * v44];
    v50 = &v48[8 * v47];
    v93 = v50;
    v90 = 0;
    *(_QWORD *)v49 = v40;
    v43 = v49 + 8;
    v92.i64[1] = (uint64_t)(v49 + 8);
    v52 = (_QWORD *)a1[9];
    v51 = (_QWORD *)a1[10];
    if (v51 == v52)
    {
      v54 = vdupq_n_s64((unint64_t)v51);
    }
    else
    {
      do
      {
        v53 = *--v51;
        *v51 = 0;
        *((_QWORD *)v49 - 1) = v53;
        v49 -= 8;
      }
      while (v51 != v52);
      v54 = *v7;
      v43 = (_QWORD *)v92.i64[1];
      v50 = v93;
    }
    a1[9] = v49;
    a1[10] = v43;
    v92 = v54;
    v55 = (char *)a1[11];
    a1[11] = v50;
    v93 = v55;
    v91 = v54.i64[0];
    sub_20B8821E8((uint64_t)&v91);
  }
  else
  {
    v90 = 0;
    *v42 = v40;
    v43 = v42 + 1;
  }
  a1[10] = v43;
  sub_20B940CA0((uint64_t *)&v90, 0);
  v56 = (_QWORD *)operator new();
  v57 = v56;
  *v56 = &unk_24C4635D0;
  v59 = (_QWORD *)a1[10];
  v58 = a1[11];
  if ((unint64_t)v59 >= v58)
  {
    v61 = ((uint64_t)v59 - v7->i64[0]) >> 3;
    if ((unint64_t)(v61 + 1) >> 61)
      sub_20B80CDD8();
    v62 = v58 - v7->i64[0];
    v63 = v62 >> 2;
    if (v62 >> 2 <= (unint64_t)(v61 + 1))
      v63 = v61 + 1;
    if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8)
      v64 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v64 = v63;
    v94 = a1 + 11;
    if (v64)
      v65 = (char *)sub_20B800BE8((uint64_t)(a1 + 11), v64);
    else
      v65 = 0;
    v66 = &v65[8 * v61];
    v67 = &v65[8 * v64];
    v93 = v67;
    *(_QWORD *)v66 = v57;
    v60 = v66 + 8;
    v92.i64[1] = (uint64_t)(v66 + 8);
    v69 = (_QWORD *)a1[9];
    v68 = (_QWORD *)a1[10];
    if (v68 == v69)
    {
      v71 = vdupq_n_s64((unint64_t)v68);
    }
    else
    {
      do
      {
        v70 = *--v68;
        *v68 = 0;
        *((_QWORD *)v66 - 1) = v70;
        v66 -= 8;
      }
      while (v68 != v69);
      v71 = *v7;
      v60 = (_QWORD *)v92.i64[1];
      v67 = v93;
    }
    a1[9] = v66;
    a1[10] = v60;
    v92 = v71;
    v72 = (char *)a1[11];
    a1[11] = v67;
    v93 = v72;
    v91 = v71.i64[0];
    sub_20B8821E8((uint64_t)&v91);
  }
  else
  {
    *v59 = v56;
    v60 = v59 + 1;
  }
  a1[10] = v60;
  v73 = (_QWORD *)operator new();
  v73[1] = &off_24C469F28;
  *v73 = &unk_24C462A28;
  v73[4] = v73 + 1;
  v90 = v73;
  v75 = (_QWORD *)a1[10];
  v74 = a1[11];
  if ((unint64_t)v75 >= v74)
  {
    v77 = ((uint64_t)v75 - v7->i64[0]) >> 3;
    if ((unint64_t)(v77 + 1) >> 61)
      sub_20B80CDD8();
    v78 = v74 - v7->i64[0];
    v79 = v78 >> 2;
    if (v78 >> 2 <= (unint64_t)(v77 + 1))
      v79 = v77 + 1;
    if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFF8)
      v80 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v80 = v79;
    v94 = a1 + 11;
    if (v80)
    {
      v81 = (char *)sub_20B800BE8((uint64_t)(a1 + 11), v80);
      v73 = v90;
    }
    else
    {
      v81 = 0;
    }
    v82 = &v81[8 * v77];
    v83 = &v81[8 * v80];
    v93 = v83;
    v90 = 0;
    *(_QWORD *)v82 = v73;
    v76 = v82 + 8;
    v92.i64[1] = (uint64_t)(v82 + 8);
    v85 = (_QWORD *)a1[9];
    v84 = (_QWORD *)a1[10];
    if (v84 == v85)
    {
      v87 = vdupq_n_s64((unint64_t)v84);
    }
    else
    {
      do
      {
        v86 = *--v84;
        *v84 = 0;
        *((_QWORD *)v82 - 1) = v86;
        v82 -= 8;
      }
      while (v84 != v85);
      v87 = *v7;
      v76 = (_QWORD *)v92.i64[1];
      v83 = v93;
    }
    a1[9] = v82;
    a1[10] = v76;
    v92 = v87;
    v88 = (char *)a1[11];
    a1[11] = v83;
    v93 = v88;
    v91 = v87.i64[0];
    sub_20B8821E8((uint64_t)&v91);
  }
  else
  {
    v90 = 0;
    *v75 = v73;
    v76 = v75 + 1;
  }
  a1[10] = v76;
  sub_20B940CA0((uint64_t *)&v90, 0);
  return a1;
}

void sub_20B9B424C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;

  sub_20B940CA0(&a9, 0);
  sub_20B9720A4(v9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B9B42D8(_QWORD *a1)
{
  const void *v2;

  *a1 = off_24C4635F8;
  v2 = (const void *)a1[16];
  if (v2)
    _Block_release(v2);
  return sub_20B9720A4(a1);
}

uint64_t sub_20B9B431C()
{
  return 500;
}

uint64_t sub_20B9B4324()
{
  return 600;
}

BOOL sub_20B9B432C(uint64_t *a1)
{
  _BOOL8 v2;
  const __CFArray *v3;
  const __CFArray *v4;
  CFIndex Count;
  CFIndex v6;
  CFIndex i;
  const void *ValueAtIndex;
  const char *v9;
  uint64_t v10;

  v2 = sub_20B972178(a1);
  if (v2)
  {
    v3 = (const __CFArray *)(*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 160))(a1, a1[5]);
    if (v3)
    {
      v4 = v3;
      Count = CFArrayGetCount(v3);
      if (Count >= 1)
      {
        v6 = Count;
        for (i = 0; i != v6; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v4, i);
          sub_20B93AAE8((uint64_t)ValueAtIndex, v9, v10);
        }
      }
      CFRelease(v4);
    }
  }
  return v2;
}

uint64_t sub_20B9B43B4(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t AnalysisString;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  AnalysisString = MecabraCandidateGetAnalysisString(a2, (const char *)a2, a3);
  v8 = objc_msgSend_rawCandidate(a2, v6, v7);
  if (v8)
  {
    v9 = (_QWORD *)v8;
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
    v11 = 40;
    if (!v10)
      v11 = 24;
    v12 = (*(uint64_t (**)(_QWORD *))(*v9 + v11))(v9);
  }
  else
  {
    v12 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, AnalysisString, v12);
}

uint64_t sub_20B9B4440(uint64_t a1, uint64_t a2, const __CFString *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  const __CFString *v8;
  _QWORD v10[3];
  _BYTE v11[24];
  std::string __p;
  uint64_t *v13;
  _QWORD *v14[2];
  void **v15;

  if (!*(_QWORD *)(a1 + 8))
    return 0;
  v3 = 0;
  if (!a2)
    return v3;
  v5 = *(_QWORD *)(a1 + 128);
  if (!v5)
    return v3;
  v7 = (*(uint64_t (**)(void))(v5 + 16))();
  if (!v7)
    return 0;
  v8 = (const __CFString *)v7;
  v14[0] = 0;
  v14[1] = 0;
  v13 = (uint64_t *)v14;
  sub_20B80BBD0(&__p, off_2547292D0);
  sub_20B908BB0(&v13, a3, (__int128 *)&__p);
  sub_20B8A741C(&__p, off_2547292C8[0]);
  sub_20B908BB0(&v13, v8, (__int128 *)&__p);
  memset(v10, 0, sizeof(v10));
  v3 = sub_20B9183C4(*(_QWORD *)(a1 + 8), (uint64_t)&v13, (uint64_t)v11, (uint64_t)v10);
  CFRelease(v8);
  v15 = (void **)v10;
  sub_20B909E78(&v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  sub_20B8896CC((uint64_t)&v13, v14[0]);
  return v3;
}

void sub_20B9B4554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  sub_20B8896CC(v21 - 64, *(_QWORD **)(v21 - 56));
  _Unwind_Resume(a1);
}

void sub_20B9B4598(uint64_t a1, uint64_t *a2)
{
  unsigned __int8 v3;
  __int128 v4;
  uint64_t v5;
  void **v6;

  v3 = atomic_load((unsigned __int8 *)&qword_25472BF68);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25472BF68))
  {
    sub_20B80BBD0(&qword_25472BF78, off_2547292C8[0]);
    dword_25472BF90 = 0;
    word_25472BF94 = 1;
    byte_25472BF96 = 0;
    sub_20B80BBD0(qword_25472BF98, off_2547292D0);
    *(int *)((char *)&dword_25472BFB0 + 3) = 0;
    dword_25472BFB0 = 0;
    __cxa_atexit((void (*)(void *))sub_20B9B52A8, 0, &dword_20B7F7000);
    __cxa_guard_release(&qword_25472BF68);
  }
  v4 = 0uLL;
  v5 = 0;
  sub_20B9777DC((char *)&v4, &qword_25472BF78, &xmmword_25472BFB8, 2uLL);
  sub_20B8825BC(a2);
  *(_OWORD *)a2 = v4;
  a2[2] = v5;
  v5 = 0;
  v4 = 0uLL;
  v6 = (void **)&v4;
  sub_20B86F120(&v6);
}

void sub_20B9B46A0(_Unwind_Exception *a1)
{
  if (byte_25472BF8F < 0)
    operator delete((void *)qword_25472BF78);
  __cxa_guard_abort(&qword_25472BF68);
  _Unwind_Resume(a1);
}

void sub_20B9B46D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const __CFString *v4;
  const __CFString *v5;
  uint64_t *v6;
  _QWORD *v7[2];
  std::string __p;

  if (a2 && a3)
  {
    v7[0] = 0;
    v7[1] = 0;
    v6 = (uint64_t *)v7;
    v5 = *(const __CFString **)(a3 + 8);
    v4 = *(const __CFString **)(a3 + 16);
    memset(&__p, 0, sizeof(__p));
    sub_20B8A741C(&__p, off_2547292C8[0]);
    sub_20B908BB0(&v6, v5, (__int128 *)&__p);
    sub_20B8A741C(&__p, off_2547292D0);
    sub_20B908BB0(&v6, v4, (__int128 *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    sub_20B917E98(a2, (uint64_t)&v6, 0);
    sub_20B8896CC((uint64_t)&v6, v7[0]);
  }
}

void sub_20B9B479C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_20B8896CC((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

BOOL sub_20B9B47CC(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a1[1];
  if (v2)
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*a1 + 208))(a1, a1[1], a2);
  return v2 != 0;
}

void sub_20B9B480C(_QWORD *a1, uint64_t a2)
{
  const __CFString *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  const __CFString *v8;
  const __CFString *v9;
  BOOL v10;
  _QWORD v11[5];

  v4 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
  v6 = a1[16];
  if (v6)
    v7 = v5 == 0;
  else
    v7 = 1;
  if (!v7)
  {
    v8 = (const __CFString *)(*(uint64_t (**)(void))(v6 + 16))();
    v9 = v8;
    v11[4] = v8;
    if (v8)
      v10 = v4 == 0;
    else
      v10 = 1;
    if (!v10)
    {
      if (CFStringGetLength(v8) >= 1 && CFStringGetLength(v4) >= 1)
      {
        v11[1] = v9;
        v11[2] = v4;
        v11[3] = 1;
        CFRetain(v9);
        CFRetain(v4);
        v11[0] = &off_24C45F770;
        (*(void (**)(_QWORD *, _QWORD *))(*a1 + 216))(a1, v11);
        sub_20B9776FC(v11);
      }
      goto LABEL_15;
    }
    if (v8)
LABEL_15:
      CFRelease(v9);
  }
}

void sub_20B9B4904(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_20B9776FC((uint64_t *)va);
  sub_20B87E150((const void **)va1, 0);
  _Unwind_Resume(a1);
}

const __CFString *sub_20B9B4938()
{
  return CFSTR("DynamicPhraseLexicon_zh_Hans_Stroke.db");
}

const __CFString *sub_20B9B4944()
{
  return CFSTR("DynamicPhraseLexicon_zh_Hant_Sucheng.db");
}

const __CFString *sub_20B9B4950()
{
  return CFSTR("DynamicPhraseLexicon_yue_Hant_Sucheng.db");
}

const __CFString *sub_20B9B495C()
{
  return CFSTR("DynamicPhraseLexicon_zh_Hant_Stroke.db");
}

const __CFString *sub_20B9B4968()
{
  return CFSTR("DynamicPhraseLexicon_yue_Hant_Stroke.db");
}

_QWORD *sub_20B9B4974(_QWORD *a1, const void *a2, const void *a3, const void *a4)
{
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  int64x2_t v21;
  char *v22;
  uint64_t v24;
  int64x2_t v25;
  char *v26;
  _QWORD *v27;

  *sub_20B9B3C58(a1, a2, a3) = &off_24C4624D0;
  a1[17] = _Block_copy(a4);
  v6 = (_QWORD *)operator new();
  *v6 = &unk_24C465000;
  v7 = a1[11];
  v8 = (_QWORD *)a1[10];
  if ((unint64_t)v8 >= v7)
  {
    v10 = a1[9];
    v11 = ((uint64_t)v8 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61)
      sub_20B80CDD8();
    v12 = v7 - v10;
    v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    v27 = a1 + 11;
    if (v14)
      v15 = (char *)sub_20B800BE8((uint64_t)(a1 + 11), v14);
    else
      v15 = 0;
    v16 = &v15[8 * v11];
    v17 = &v15[8 * v14];
    v26 = v17;
    *(_QWORD *)v16 = v6;
    v9 = v16 + 8;
    v25.i64[1] = (uint64_t)(v16 + 8);
    v19 = (_QWORD *)a1[9];
    v18 = (_QWORD *)a1[10];
    if (v18 == v19)
    {
      v21 = vdupq_n_s64((unint64_t)v18);
    }
    else
    {
      do
      {
        v20 = *--v18;
        *v18 = 0;
        *((_QWORD *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      v21 = *(int64x2_t *)(a1 + 9);
      v9 = (_QWORD *)v25.i64[1];
      v17 = v26;
    }
    a1[9] = v16;
    a1[10] = v9;
    v25 = v21;
    v22 = (char *)a1[11];
    a1[11] = v17;
    v26 = v22;
    v24 = v21.i64[0];
    sub_20B8821E8((uint64_t)&v24);
  }
  else
  {
    *v8 = v6;
    v9 = v8 + 1;
  }
  a1[10] = v9;
  return a1;
}

void sub_20B9B4AD4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  MEMORY[0x20BD39CB0](v2, 0x81C40B8603338);
  sub_20B9B42D8(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B9B4B0C(_QWORD *a1)
{
  const void *v2;

  *a1 = &off_24C4624D0;
  v2 = (const void *)a1[17];
  if (v2)
    _Block_release(v2);
  return sub_20B9B42D8(a1);
}

void sub_20B9B4B4C(_QWORD *a1)
{
  sub_20B9B4B0C(a1);
  JUMPOUT(0x20BD39CB0);
}

const __CFString *sub_20B9B4B70()
{
  return CFSTR("DynamicPhraseLexicon_zh_Hans_Wubixing_v2.db");
}

void sub_20B9B4B7C(uint64_t *a1, uint64_t a2)
{
  const __CFString *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t (**v10)(CFTypeRef, uint64_t *, uint64_t);
  uint64_t (**v11)(CFTypeRef, uint64_t *, uint64_t);
  uint64_t v12;
  __int16 v13;
  int v14;
  std::string __p;
  uint64_t *v16;
  _QWORD *v17[3];

  if (!a1[1])
    return;
  v4 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
  v6 = a1[16];
  if (!v6 || v5 == 0)
    return;
  v8 = (uint64_t *)(*(uint64_t (**)(void))(v6 + 16))();
  v16 = v8;
  if (!v8)
    return;
  v9 = v8;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 104))(a2) & 0x10000) != 0)
  {
    v11 = (uint64_t (**)(CFTypeRef, uint64_t *, uint64_t))a1[17];
    if (!v11)
      goto LABEL_12;
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    v10 = (uint64_t (**)(CFTypeRef, uint64_t *, uint64_t))v11[2](v11, v9, v12);
  }
  else
  {
    v10 = (uint64_t (**)(CFTypeRef, uint64_t *, uint64_t))CFRetain(v9);
  }
  v11 = v10;
LABEL_12:
  CFRelease(v9);
  v17[2] = v11;
  if (v11 && v4)
  {
    if (CFStringGetLength((CFStringRef)v11) >= 1 && CFStringGetLength(v4) >= 1)
    {
      v17[0] = 0;
      v17[1] = 0;
      v16 = (uint64_t *)v17;
      sub_20B80BBD0(&__p, off_2547292C8[0]);
      sub_20B908BB0(&v16, (CFStringRef)v11, (__int128 *)&__p);
      sub_20B8A741C(&__p, off_2547292D0);
      sub_20B908BB0(&v16, v4, (__int128 *)&__p);
      sub_20B8A741C(&__p, off_2547292B8);
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 104))(a2);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 80))(a2))
        v14 = (2 * ((v13 & 0x8080) == 0)) | 4;
      else
        v14 = 2 * ((v13 & 0x8080) == 0);
      sub_20B908C5C(&v16, v14, (__int128 *)&__p);
      sub_20B917E98(a1[1], (uint64_t)&v16, 0);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      sub_20B8896CC((uint64_t)&v16, v17[0]);
    }
  }
  else if (!v11)
  {
    return;
  }
  CFRelease(v11);
}

void sub_20B9B4D84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, _QWORD *a17, uint64_t a18, const void *a19)
{
  sub_20B8896CC((uint64_t)&a16, a17);
  sub_20B87E150(&a19, 0);
  _Unwind_Resume(a1);
}

void sub_20B9B4DE0(uint64_t a1, uint64_t *a2)
{
  unsigned __int8 v3;
  __int128 v4;
  uint64_t v5;
  void **v6;

  v3 = atomic_load((unsigned __int8 *)&qword_25472BF70);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25472BF70))
  {
    sub_20B80BBD0(&xmmword_25472BFB8, off_2547292C8[0]);
    dword_25472BFD0 = 0;
    word_25472BFD4 = 1;
    byte_25472BFD6 = 0;
    sub_20B80BBD0(qword_25472BFD8, off_2547292D0);
    *(int *)((char *)&dword_25472BFF0 + 3) = 0;
    dword_25472BFF0 = 0;
    sub_20B80BBD0(&qword_25472BFF8, off_2547292B8);
    dword_25472C010 = 1;
    word_25472C014 = 0;
    byte_25472C016 = 0;
    __cxa_atexit((void (*)(void *))sub_20B9B52EC, 0, &dword_20B7F7000);
    __cxa_guard_release(&qword_25472BF70);
  }
  v4 = 0uLL;
  v5 = 0;
  sub_20B9777DC((char *)&v4, &xmmword_25472BFB8, (__int128 *)&qword_25472C018, 3uLL);
  sub_20B8825BC(a2);
  *(_OWORD *)a2 = v4;
  a2[2] = v5;
  v5 = 0;
  v4 = 0uLL;
  v6 = (void **)&v4;
  sub_20B86F120(&v6);
}

void sub_20B9B4F28(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472BF70);
  _Unwind_Resume(a1);
}

CFArrayRef sub_20B9B4F64(int a1, CFURLRef url)
{
  CFArrayRef v2;
  void *values;

  if (!url)
    return 0;
  values = sub_20B8D0DEC(url, CFSTR("DynamicPhraseLexicon_zh_Hans_Wubixing.db"));
  if (!values)
    return 0;
  v2 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], (const void **)&values, 1, MEMORY[0x24BDBD690]);
  if (values)
    CFRelease(values);
  return v2;
}

void sub_20B9B4FE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B876164((const void **)va, 0);
  _Unwind_Resume(a1);
}

void sub_20B9B5000(_QWORD *a1)
{
  sub_20B9B42D8(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B9B5024()
{
  return 7;
}

const __CFString *sub_20B9B502C()
{
  return CFSTR("LearningDictionary");
}

uint64_t sub_20B9B5038()
{
  return 1;
}

uint64_t sub_20B9B5040()
{
  return 0;
}

const __CFString *sub_20B9B5048()
{
  return CFSTR("TapTyping");
}

void sub_20B9B505C(_QWORD *a1)
{
  sub_20B9B42D8(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B9B5080()
{
  return 9;
}

void sub_20B9B508C(_QWORD *a1)
{
  sub_20B9B42D8(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B9B50B0()
{
  return 16;
}

void sub_20B9B50BC(_QWORD *a1)
{
  sub_20B9B42D8(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B9B50E0()
{
  return 8;
}

void sub_20B9B50EC(_QWORD *a1)
{
  sub_20B9B42D8(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B9B5110()
{
  return 15;
}

uint64_t sub_20B9B5118()
{
  return 10;
}

void sub_20B9B5120(_QWORD *a1)
{
  sub_20B9776FC(a1);
  JUMPOUT(0x20BD39CB0);
}

void sub_20B9B5148()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B9B515C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C469ED0;
  result[1] = v3;
  return result;
}

uint64_t sub_20B9B5190(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C469ED0;
  a2[1] = v2;
  return result;
}

uint64_t sub_20B9B51AC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 152))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20B9B51BC(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45ED80))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B9B51F8()
{
  return &unk_24C45ED80;
}

void sub_20B9B5208()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B9B521C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C469F28;
  return result;
}

void sub_20B9B5240(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C469F28;
}

uint64_t sub_20B9B5258()
{
  return 0;
}

uint64_t sub_20B9B5260(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45ED90))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B9B529C()
{
  return &unk_24C45ED90;
}

void sub_20B9B52A8()
{
  uint64_t i;

  for (i = 0; i != -64; i -= 32)
  {
    if (*((char *)&unk_25472BF68 + i + 71) < 0)
      operator delete(*(void **)((char *)&unk_25472BF68 + i + 48));
  }
}

void sub_20B9B52EC()
{
  uint64_t i;

  for (i = 0; i != -12; i -= 4)
  {
    if (SHIBYTE(qword_25472BF68[i + 20]) < 0)
      operator delete((void *)qword_25472BF68[i + 18]);
  }
}

CFIndex sub_20B9B5330(CFIndex a1, CFStringRef theString, int a3)
{
  CFIndex v3;
  CFIndex v6;
  CFStringCompareFlags v7;
  CFIndex v8;
  const __CFCharacterSet *Predefined;
  int CharacterFromSet;
  CFIndex length;
  CFRange v13;
  CFRange v14;

  v3 = a1;
  if (theString)
  {
    v6 = 0;
    if (a3)
      v7 = 0;
    else
      v7 = 4;
    v8 = a1;
    if ((a3 & 1) == 0)
    {
      v8 = CFStringGetLength(theString) - a1;
      v6 = v3;
    }
    Predefined = CFCharacterSetGetPredefined(kCFCharacterSetWhitespace);
    v14.location = v6;
    v14.length = v8;
    CharacterFromSet = CFStringFindCharacterFromSet(theString, Predefined, v14, v7, &v13);
    length = v13.length;
    if (a3)
      length = 0;
    if (CharacterFromSet)
      return length + v13.location;
  }
  return v3;
}

void sub_20B9B53D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __CFString *v6;
  const __CFString *v7;
  const __CFString *v8;
  __CFString *Mutable;
  __CFString *v10;
  CFIndex Length;
  CFIndex v12;
  uint64_t v13;
  CFIndex v14;
  CFIndex v15;
  CFIndex v16;
  const __CFString *v17;
  CFIndex v18;
  void *__p;
  _BYTE *v20;
  const __CFString *v21;
  __CFString *v22;
  __CFString *v23;
  CFRange v24;

  if (!a1)
    return;
  if (*(_DWORD *)(a1 + 112) != 3)
    return;
  v6 = sub_20B96AC58(a2);
  v23 = v6;
  v7 = *(const __CFString **)(a2 + 88);
  if (!((unint64_t)v6 | (unint64_t)v7))
    return;
  v8 = v6;
  Mutable = CFStringCreateMutable(0, 0);
  v10 = Mutable;
  v22 = Mutable;
  if (v8)
    CFStringAppend(Mutable, v8);
  if (v7)
    CFStringAppend(v10, v7);
  if (!v8)
  {
    Length = 0;
    if (v7)
      goto LABEL_10;
LABEL_12:
    v12 = 0;
    goto LABEL_13;
  }
  Length = CFStringGetLength(v8);
  if (!v7)
    goto LABEL_12;
LABEL_10:
  v12 = CFStringGetLength(v7);
LABEL_13:
  v13 = *(_QWORD *)(a1 + 120);
  if (Length >= v13)
    v14 = Length - v13;
  else
    v14 = 0;
  v15 = sub_20B9B5330(v14, v8, 0);
  if (v12 >= v13)
    v16 = v13;
  else
    v16 = v12;
  v24.length = Length - v15 + sub_20B9B5330(v16, v7, 1);
  v24.location = v15;
  v17 = CFStringCreateWithSubstring(0, v10, v24);
  v21 = v17;
  sub_20B8D0790(v17, (UniChar **)&__p);
  if (v8)
    v18 = CFStringGetLength(v8);
  else
    v18 = 0;
  sub_20B8F65F0(a1, (uint64_t)__p, (v20 - (_BYTE *)__p) >> 1, v18 - v15, a3);
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
  if (v17)
    CFRelease(v17);
  if (v10)
    CFRelease(v10);
  if (v8)
    CFRelease(v8);
}

void sub_20B9B557C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, const void *a12, const void *a13, const void *a14)
{
  if (__p)
    operator delete(__p);
  sub_20B87E150(&a12, 0);
  sub_20B8A89DC(&a13, 0);
  sub_20B87E150(&a14, 0);
  _Unwind_Resume(a1);
}

void sub_20B9B55E0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = off_24C460C88;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 32) = 0;
  if (a2 != a1)
    sub_20B9B5E30(a2 + 8, *(__int128 ***)(a1 + 8), *(__int128 ***)(a1 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3));
  *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 32);
}

void sub_20B9B565C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  *v2 = v3;
  sub_20B8B66F8((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9B5678(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_24C460C88;
  v3 = (void **)(a1 + 8);
  sub_20B8B66F8(&v3);
  return a1;
}

unint64_t sub_20B9B56BC(uint64_t a1)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3);
}

unint64_t sub_20B9B56D8(uint64_t a1, uint64_t a2)
{
  return 0xAAAAAAAAAAAAAAABLL
       * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24 * a2 + 8) - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24 * a2)) >> 4);
}

double sub_20B9B5700(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24 * a2) + 48 * a3 + 24);
}

uint64_t sub_20B9B5720(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24 * a2) + 48 * a3 + 32);
}

char *sub_20B9B5740(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *result;

  result = (char *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24 * a2) + 48 * a3);
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

BOOL sub_20B9B5770(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24 * a2);
  return *(unsigned __int8 *)(v3 + 48 * a3 + 40) <= 4u
      && *(unsigned __int8 *)(v3 + 48 * a3 + 41) != 255
      && *(unsigned __int8 *)(v3 + 48 * a3 + 42) != 255
      && *(_BYTE *)(v3 + 48 * a3 + 43) == 0;
}

_QWORD *sub_20B9B57DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;
  uint64_t v5;
  int v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24 * a2) + 48 * a3 + 40);
  v7[0] = &off_24C49FD40;
  v7[1] = a4;
  v8 = v7;
  sub_20B99C9AC((uint64_t)&off_254729668, (unsigned __int8 *)&v6, (uint64_t)v7);
  result = v8;
  if (v8 == v7)
  {
    v5 = 4;
    result = v7;
  }
  else
  {
    if (!v8)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_20B9B58A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

BOOL sub_20B9B58DC(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned __int16 *v7;
  uint64_t v8;
  int v9;
  int v10;
  int v12;
  int v13;
  int v16;
  unsigned __int16 *v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;

  v5 = *(_QWORD *)(a1 + 8);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 16) - v5) >> 3) <= a2)
    return 1;
  v6 = *(_QWORD *)(v5 + 24 * a2);
  v7 = (unsigned __int16 *)(v6 + 48 * a3);
  v8 = *(_QWORD *)(v5 + 24 * a4);
  v9 = *((unsigned __int8 *)v7 + 46);
  if (v9 != 255)
  {
    v10 = *(unsigned __int8 *)(v8 + 48 * a5 + 46);
    if (v10 != 255 && v9 != v10 && *(unsigned __int8 *)(v6 + 48 * a3 + 47) == *(unsigned __int8 *)(v8 + 48 * a5 + 47))
      return 0;
  }
  if (*(_QWORD *)(v6 + 48 * a3 + 32) != 1)
    return 1;
  v12 = *((char *)v7 + 23);
  if (v12 < 0)
  {
    if (*((_QWORD *)v7 + 1) != 1)
      return 1;
    v7 = *(unsigned __int16 **)v7;
  }
  else if (v12 != 1)
  {
    return 1;
  }
  v13 = *v7;
  if (v13 != 12387)
  {
    if (v13 == 12435)
    {
      v16 = *(unsigned __int16 *)(v8 + 48 * a5 + 44);
      if (!*(_WORD *)(v8 + 48 * a5 + 44))
      {
        v17 = (unsigned __int16 *)(v8 + 48 * a5);
        if (*((char *)v17 + 23) < 0)
          v17 = *(unsigned __int16 **)v17;
        v16 = *v17;
      }
      v18 = atomic_load((unsigned __int8 *)&qword_25472C020);
      if ((v18 & 1) == 0)
      {
        v22 = v16;
        v21 = __cxa_guard_acquire(&qword_25472C020);
        v16 = v22;
        if (v21)
        {
          qword_25472C018 = (uint64_t)L"'aeinouyxa";
          __cxa_guard_release(&qword_25472C020);
          v16 = v22;
        }
      }
      v19 = 0;
      v20 = qword_25472C018 + 16;
      while (*(unsigned __int16 *)(qword_25472C018 + v19) != v16)
      {
        v19 += 2;
        if (v19 == 16)
          return v20 - qword_25472C018 == 16;
      }
      v20 = qword_25472C018 + v19;
      return v20 - qword_25472C018 == 16;
    }
    return 1;
  }
  return *(unsigned __int16 *)(v6 + 48 * a3 + 44) == *(unsigned __int16 *)(v8 + 48 * a5 + 44);
}

void sub_20B9B5A9C(uint64_t a1, unint64_t a2)
{
  void **v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  void **v8;

  v3 = *(void ***)(a1 + 8);
  v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *(_QWORD *)a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    sub_20B9B668C((char **)a1, v6);
  }
  else if (!v5)
  {
    v7 = *(_QWORD *)a1 + 24 * a2;
    while (v3 != (void **)v7)
    {
      v3 -= 3;
      v8 = v3;
      sub_20B8B6768(&v8);
    }
    *(_QWORD *)(a1 + 8) = v7;
  }
}

uint64_t *sub_20B9B5B30(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  void **v5;
  void **v6;
  void **v7;
  char v9;
  void **v10;

  if (a2 != (uint64_t *)a3)
  {
    sub_20B9B688C((uint64_t)&v9, a3, *(_QWORD *)(a1 + 8), a2);
    v6 = v5;
    v7 = *(void ***)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        v7 -= 3;
        v10 = v7;
        sub_20B8B6768(&v10);
      }
      while (v7 != v6);
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  return a2;
}

_QWORD *sub_20B9B5BB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *result;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD *v15;
  _BYTE v16[24];
  _BYTE *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 8);
  sub_20B86D7F0((uint64_t)v14, a3);
  v5 = (uint64_t *)(v4 + 24 * a2);
  v6 = v5[1];
  v7 = *v5;
  v8 = (uint64_t)v15;
  if (!v15)
    goto LABEL_4;
  if (v15 != v14)
  {
    v8 = (*(uint64_t (**)(void))(*v15 + 16))();
LABEL_4:
    v17 = (_BYTE *)v8;
    goto LABEL_6;
  }
  v17 = v16;
  (*(void (**)(_QWORD *, _BYTE *))(v14[0] + 24))(v14, v16);
LABEL_6:
  v9 = sub_20B9B6978(v7, v6, (uint64_t)v16);
  sub_20B9B6900((uint64_t)v5, v9, v5[1]);
  v10 = v17;
  if (v17 == v16)
  {
    v11 = 4;
    v10 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_11;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_11:
  result = v15;
  if (v15 == v14)
  {
    v13 = 4;
    result = v14;
  }
  else
  {
    if (!v15)
      return result;
    v13 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v13))();
}

void sub_20B9B5CF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  char *v18;
  uint64_t v19;

  v18 = a13;
  if (a13 == &a10)
  {
    v19 = 4;
    v18 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B9B5D74(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_24C460C88;
  v3 = (void **)(a1 + 8);
  sub_20B8B66F8(&v3);
  return MEMORY[0x20BD39CB0](a1, 0x10A1C407F0BD61ELL);
}

char *sub_20B9B5DCC(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    sub_20B9B5E1C();
  result = (char *)sub_20B828D70((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void sub_20B9B5E1C()
{
  sub_20B80AD80("vector");
}

void sub_20B9B5E30(uint64_t a1, __int128 **a2, __int128 **a3, unint64_t a4)
{
  uint64_t v8;
  void **v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 **v13;
  uint64_t v14;
  void **v15;
  void **v16;

  v8 = a1 + 16;
  v9 = *(void ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    sub_20B8CC7B0((void ***)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      sub_20B9B5E1C();
    v10 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    sub_20B9B5DCC((_QWORD *)a1, v11);
    v12 = sub_20B9B5FA8(v8, a2, a3, *(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = &a2[(uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3];
    sub_20B9B62C4(a2, v13, (uint64_t)v9);
    v12 = sub_20B9B5FA8(v8, v13, a3, *(_QWORD *)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  v14 = sub_20B9B62C4(a2, a3, (uint64_t)v9);
  v15 = *(void ***)(a1 + 8);
  while (v15 != (void **)v14)
  {
    v15 -= 3;
    v16 = v15;
    sub_20B8B6768(&v16);
  }
  *(_QWORD *)(a1 + 8) = v14;
}

void sub_20B9B5F98(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20B9B5FA0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_20B9B5FA8(uint64_t a1, __int128 **a2, __int128 **a3, uint64_t a4)
{
  uint64_t v4;
  __int128 **v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_QWORD *)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      sub_20B9B6064((char *)v4, *v6, v6[1], 0xAAAAAAAAAAAAAAABLL * (v6[1] - *v6));
      v4 = v11 + 24;
      v11 += 24;
      v6 += 3;
    }
    while (v6 != a3);
  }
  v9 = 1;
  sub_20B9B6264((uint64_t)v8);
  return v4;
}

void sub_20B9B6050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B9B6264((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *sub_20B9B6064(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;

  if (a4)
  {
    v6 = result;
    sub_20B9B60E8(result, a4);
    result = sub_20B9B6138((uint64_t)(v6 + 16), a2, a3, *((char **)v6 + 1));
    *((_QWORD *)v6 + 1) = result;
  }
  return result;
}

void sub_20B9B60C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_20B8B6768(&a9);
  _Unwind_Resume(a1);
}

char *sub_20B9B60E8(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x555555555555556)
    sub_20B80CDD8();
  result = (char *)sub_20B87374C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[48 * v4];
  return result;
}

char *sub_20B9B6138(uint64_t a1, __int128 *a2, __int128 *a3, char *__dst)
{
  char *v4;
  __int128 *v6;
  __int128 v7;
  char *v8;
  __int128 v9;
  _QWORD v11[3];
  char v12;
  char *v13;
  char *v14;

  v4 = __dst;
  v13 = __dst;
  v14 = __dst;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  v12 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_20B88DD4C(v4, *(void **)v6, *((_QWORD *)v6 + 1));
        v8 = v14;
      }
      else
      {
        v7 = *v6;
        *((_QWORD *)v4 + 2) = *((_QWORD *)v6 + 2);
        *(_OWORD *)v4 = v7;
        v8 = v4;
      }
      v9 = *(__int128 *)((char *)v6 + 24);
      *((_QWORD *)v4 + 5) = *((_QWORD *)v6 + 5);
      *(_OWORD *)(v4 + 24) = v9;
      v6 += 3;
      v4 = v8 + 48;
      v14 = v8 + 48;
    }
    while (v6 != a3);
  }
  v12 = 1;
  sub_20B9B6208((uint64_t)v11);
  return v4;
}

void sub_20B9B61F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B9B6208((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9B6208(uint64_t a1)
{
  uint64_t v3;
  uint64_t i;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 8);
    for (i = **(_QWORD **)(a1 + 16); i != v3; i -= 48)
    {
      if (*(char *)(i - 25) < 0)
        operator delete(*(void **)(i - 48));
    }
  }
  return a1;
}

uint64_t sub_20B9B6264(uint64_t a1)
{
  void **v3;
  void **v4;
  void **v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(void ****)(a1 + 8);
    v4 = **(void ****)(a1 + 16);
    while (v4 != v3)
    {
      v4 -= 3;
      v5 = v4;
      sub_20B8B6768(&v5);
    }
  }
  return a1;
}

uint64_t sub_20B9B62C4(__int128 **a1, __int128 **a2, uint64_t a3)
{
  __int128 **v5;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      if (v5 != (__int128 **)a3)
        sub_20B9B6334(a3, *v5, v5[1], 0xAAAAAAAAAAAAAAABLL * (v5[1] - *v5));
      v5 += 3;
      a3 += 24;
    }
    while (v5 != a2);
  }
  return a3;
}

void sub_20B9B6334(uint64_t a1, __int128 *a2, __int128 *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  __int128 *v13;
  uint64_t v14;
  uint64_t i;

  v8 = a1 + 16;
  v9 = *(_QWORD *)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) < a4)
  {
    sub_20B9B64A8((uint64_t *)a1);
    if (a4 > 0x555555555555555)
      sub_20B80CDD8();
    v10 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
      v11 = 0x555555555555555;
    else
      v11 = v10;
    sub_20B9B60E8((_QWORD *)a1, v11);
    v12 = sub_20B9B6138(v8, a2, a3, *(char **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 8) - v9) >> 4) < a4)
  {
    v13 = &a2[(*(_QWORD *)(a1 + 8) - v9) >> 4];
    sub_20B9B64E0((uint64_t)a2, (uint64_t)v13, v9);
    v12 = sub_20B9B6138(v8, v13, a3, *(char **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  v14 = sub_20B9B64E0((uint64_t)a2, (uint64_t)a3, v9);
  for (i = *(_QWORD *)(a1 + 8); i != v14; i -= 48)
  {
    if (*(char *)(i - 25) < 0)
      operator delete(*(void **)(i - 48));
  }
  *(_QWORD *)(a1 + 8) = v14;
}

void sub_20B9B6498(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20B9B64A0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20B9B64A8(uint64_t *a1)
{
  if (*a1)
  {
    sub_20B8B67A8(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_20B9B64E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      sub_20B9B6544((void **)a3, (void **)v5);
      v6 = *(_QWORD *)(v5 + 40);
      *(_OWORD *)(a3 + 24) = *(_OWORD *)(v5 + 24);
      *(_QWORD *)(a3 + 40) = v6;
      a3 += 48;
      v5 += 48;
    }
    while (v5 != a2);
  }
  return a3;
}

void **sub_20B9B6544(void **result, void **a2)
{
  __int128 v2;
  unint64_t v3;
  unint64_t v4;

  if (result != a2)
  {
    if (*((char *)result + 23) < 0)
    {
      v3 = (unint64_t)a2[1];
      if (*((char *)a2 + 23) >= 0)
      {
        v4 = *((unsigned __int8 *)a2 + 23);
      }
      else
      {
        a2 = (void **)*a2;
        v4 = v3;
      }
      return sub_20B9B6604(result, a2, v4);
    }
    else if ((*((_BYTE *)a2 + 23) & 0x80) != 0)
    {
      return (void **)sub_20B9B6594(result, *a2, (unint64_t)a2[1]);
    }
    else
    {
      v2 = *(_OWORD *)a2;
      result[2] = a2[2];
      *(_OWORD *)result = v2;
    }
  }
  return result;
}

_BYTE *sub_20B9B6594(_BYTE *__dst, void *__src, unint64_t a3)
{
  BOOL v5;
  unint64_t v6;

  v5 = a3 > 0xA;
  v6 = a3 - 10;
  if (v5)
  {
    sub_20B88DB90((uint64_t)__dst, 0xAuLL, v6, __dst[23] & 0x7F, 0, __dst[23] & 0x7F, a3, __src);
  }
  else
  {
    __dst[23] = a3;
    if (a3)
      memmove(__dst, __src, 2 * a3);
    *(_WORD *)&__dst[2 * a3] = 0;
  }
  return __dst;
}

void **sub_20B9B6604(void **a1, void *__src, unint64_t a3)
{
  unint64_t v5;
  void *v6;

  v5 = (unint64_t)a1[2] & 0x7FFFFFFFFFFFFFFFLL;
  if (v5 <= a3)
  {
    sub_20B88DB90((uint64_t)a1, v5 - 1, a3 - v5 + 1, (uint64_t)a1[1], 0, (uint64_t)a1[1], a3, __src);
  }
  else
  {
    v6 = *a1;
    a1[1] = (void *)a3;
    if (a3)
      memmove(v6, __src, 2 * a3);
    *((_WORD *)v6 + a3) = 0;
  }
  return a1;
}

void sub_20B9B668C(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  int64x2_t v21;
  char *v22;
  uint64_t v23;
  int64x2_t v24;
  char *v25;
  uint64_t v26;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_20B9B5E1C();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v26 = v4;
    if (v11)
      v12 = (char *)sub_20B828D70(v4, v11);
    else
      v12 = 0;
    v14 = &v12[24 * v8];
    v15 = &v12[24 * v11];
    v25 = v15;
    v16 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v14, v16);
    v17 = &v14[v16];
    v24.i64[1] = (uint64_t)&v14[v16];
    v19 = *a1;
    v18 = a1[1];
    if (v18 == *a1)
    {
      v21 = vdupq_n_s64((unint64_t)v18);
    }
    else
    {
      do
      {
        *((_QWORD *)v14 - 3) = 0;
        *((_QWORD *)v14 - 2) = 0;
        v14 -= 24;
        *((_QWORD *)v14 + 2) = 0;
        v20 = *(_OWORD *)(v18 - 24);
        v18 -= 24;
        *(_OWORD *)v14 = v20;
        *((_QWORD *)v14 + 2) = *((_QWORD *)v18 + 2);
        *(_QWORD *)v18 = 0;
        *((_QWORD *)v18 + 1) = 0;
        *((_QWORD *)v18 + 2) = 0;
      }
      while (v18 != v19);
      v21 = *(int64x2_t *)a1;
      v17 = (char *)v24.i64[1];
      v15 = v25;
    }
    *a1 = v14;
    a1[1] = v17;
    v24 = v21;
    v22 = a1[2];
    a1[2] = v15;
    v25 = v22;
    v23 = v21.i64[0];
    sub_20B9B6830((uint64_t)&v23);
  }
}

uint64_t sub_20B9B6830(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void **v4;
  void **v6;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v6 = v4;
    sub_20B8B6768(&v6);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20B9B688C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    sub_20B9B64A8(a4);
    *(_OWORD *)a4 = *(_OWORD *)v5;
    a4[2] = *(_QWORD *)(v5 + 16);
    *(_QWORD *)v5 = 0;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    a4 += 3;
    v5 += 24;
  }
  while (v5 != v6);
  return v6;
}

uint64_t sub_20B9B6900(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a2 != a3)
  {
    sub_20B9B6A3C(a3, *(_QWORD *)(a1 + 8), a2);
    v6 = v5;
    v7 = *(_QWORD *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        if (*(char *)(v7 - 25) < 0)
          operator delete(*(void **)(v7 - 48));
        v7 -= 48;
      }
      while (v7 != v6);
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  return a2;
}

uint64_t sub_20B9B6978(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;

  if (a1 == a2)
    return a2;
  v5 = a1;
  while (1)
  {
    v6 = *(_QWORD *)(a3 + 24);
    if (!v6)
LABEL_16:
      sub_20B80BB74();
    if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 48))(v6, v5) & 1) != 0)
      break;
    v5 += 48;
    if (v5 == a2)
      return a2;
  }
  if (v5 == a2)
    return a2;
  for (i = v5 + 48; i != a2; i += 48)
  {
    v8 = *(_QWORD *)(a3 + 24);
    if (!v8)
      goto LABEL_16;
    if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 48))(v8, i) & 1) == 0)
    {
      sub_20B9B6544((void **)v5, (void **)i);
      v9 = *(_QWORD *)(i + 40);
      *(_OWORD *)(v5 + 24) = *(_OWORD *)(i + 24);
      *(_QWORD *)(v5 + 40) = v9;
      v5 += 48;
    }
  }
  return v5;
}

uint64_t sub_20B9B6A3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a1;
  if (a1 == a2)
    return a1;
  v5 = a2;
  do
  {
    sub_20B9B6544((void **)a3, (void **)v4);
    v6 = *(_QWORD *)(v4 + 40);
    *(_OWORD *)(a3 + 24) = *(_OWORD *)(v4 + 24);
    *(_QWORD *)(a3 + 40) = v6;
    a3 += 48;
    v4 += 48;
  }
  while (v4 != v5);
  return v5;
}

uint64_t sub_20B9B6AAC(_QWORD *a1, uint64_t a2, __int128 **a3, __int128 **a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 **v9;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  __int128 **v19;
  uint64_t v20;
  __int128 **v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v46;
  _QWORD *v47;
  __int128 v48;
  char *v49;
  _QWORD *v50;
  _QWORD v51[3];
  char v52;
  char *v53;
  _QWORD *v54;

  v5 = (_QWORD *)*a1;
  v6 = (a2 - *a1) / 24;
  v7 = *a1 + 24 * v6;
  if (a5 < 1)
    return v7;
  v9 = a3;
  v12 = a1 + 2;
  v11 = a1[2];
  v13 = a1[1];
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v13) >> 3)) >= a5)
  {
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - v7) >> 3)) >= a5)
    {
      v19 = &a3[3 * a5];
      v20 = a1[1];
LABEL_30:
      v35 = v7 + 24 * a5;
      v36 = v20 - 24 * a5;
      v37 = (_QWORD *)v20;
      if (v36 < v13)
      {
        v37 = (_QWORD *)v20;
        do
        {
          *v37 = 0;
          v37[1] = 0;
          v37[2] = 0;
          *(_OWORD *)v37 = *(_OWORD *)v36;
          v37[2] = *(_QWORD *)(v36 + 16);
          *(_QWORD *)v36 = 0;
          *(_QWORD *)(v36 + 8) = 0;
          *(_QWORD *)(v36 + 16) = 0;
          v37 += 3;
          v36 += 24;
        }
        while (v36 < v13);
      }
      a1[1] = v37;
      if (v20 != v35)
      {
        v38 = 0;
        v39 = 0xAAAAAAAAAAAAAAABLL * ((v20 - v35) >> 3);
        v40 = &v5[3 * v39 + 3 * v6];
        v41 = -24 * v39;
        do
        {
          v42 = &v40[v38 / 8];
          v43 = v20 + v38;
          sub_20B9B64A8((uint64_t *)(v20 + v38 - 24));
          *(_OWORD *)(v43 - 24) = *(_OWORD *)&v40[v38 / 8 - 3];
          *(_QWORD *)(v43 - 8) = v40[v38 / 8 - 1];
          *(v42 - 3) = 0;
          *(v42 - 2) = 0;
          *(v42 - 1) = 0;
          v38 -= 24;
        }
        while (v41 != v38);
      }
      if (v19 != v9)
      {
        v44 = v7;
        do
        {
          if (v9 != (__int128 **)v44)
            sub_20B9B6334(v44, *v9, v9[1], 0xAAAAAAAAAAAAAAABLL * (v9[1] - *v9));
          v9 += 3;
          v44 += 24;
        }
        while (v9 != v19);
      }
      return v7;
    }
    v47 = a1 + 2;
    v51[0] = v13;
    v54 = (_QWORD *)v13;
    v19 = &a3[(uint64_t)(v13 - v7) >> 3];
    *(_QWORD *)&v48 = &v54;
    *((_QWORD *)&v48 + 1) = v51;
    LOBYTE(v49) = 0;
    if (v19 == a4)
    {
      v20 = v13;
    }
    else
    {
      v46 = v5;
      v20 = v13;
      v21 = &a3[(uint64_t)(v13 - v7) >> 3];
      do
      {
        *(_QWORD *)v20 = 0;
        *(_QWORD *)(v20 + 8) = 0;
        *(_QWORD *)(v20 + 16) = 0;
        sub_20B9B6064((char *)v20, *v21, v21[1], 0xAAAAAAAAAAAAAAABLL * (v21[1] - *v21));
        v20 = v51[0] + 24;
        v51[0] += 24;
        v21 += 3;
      }
      while (v21 != a4);
      v5 = v46;
    }
    LOBYTE(v49) = 1;
    sub_20B9B6264((uint64_t)&v47);
    a1[1] = v20;
    if ((uint64_t)(v13 - v7) >= 1)
      goto LABEL_30;
    return v7;
  }
  v14 = a5 - 0x5555555555555555 * ((uint64_t)(v13 - (_QWORD)v5) >> 3);
  if (v14 > 0xAAAAAAAAAAAAAAALL)
    sub_20B9B5E1C();
  v15 = 0xAAAAAAAAAAAAAAABLL * ((v11 - (uint64_t)v5) >> 3);
  if (2 * v15 > v14)
    v14 = 2 * v15;
  if (v15 >= 0x555555555555555)
    v16 = 0xAAAAAAAAAAAAAAALL;
  else
    v16 = v14;
  v50 = a1 + 2;
  if (v16)
    v17 = (char *)sub_20B828D70((uint64_t)(a1 + 2), v16);
  else
    v17 = 0;
  v22 = &v17[24 * v6];
  v47 = v17;
  *(_QWORD *)&v48 = v22;
  *((_QWORD *)&v48 + 1) = v22;
  v49 = &v17[24 * v16];
  v23 = 3 * a5;
  v24 = &v22[24 * a5];
  v25 = 8 * v23;
  do
  {
    *(_QWORD *)v22 = 0;
    *((_QWORD *)v22 + 1) = 0;
    *((_QWORD *)v22 + 2) = 0;
    sub_20B9B6064(v22, *v9, v9[1], 0xAAAAAAAAAAAAAAABLL * (v9[1] - *v9));
    v22 += 24;
    v9 += 3;
    v25 -= 24;
  }
  while (v25);
  *((_QWORD *)&v48 + 1) = v24;
  v26 = v48;
  v27 = (_QWORD *)*a1;
  v28 = v48;
  if (*a1 != v7)
  {
    v28 = v48;
    v29 = (_QWORD *)v7;
    do
    {
      *(_QWORD *)(v28 - 24) = 0;
      *(_QWORD *)(v28 - 16) = 0;
      v28 -= 24;
      *(_QWORD *)(v28 + 16) = 0;
      v30 = *(_OWORD *)(v29 - 3);
      v29 -= 3;
      *(_OWORD *)v28 = v30;
      *(_QWORD *)(v28 + 16) = v29[2];
      *v29 = 0;
      v29[1] = 0;
      v29[2] = 0;
    }
    while (v29 != v27);
    v24 = (char *)*((_QWORD *)&v48 + 1);
  }
  *(_QWORD *)&v48 = v28;
  v31 = a1[1];
  v54 = v24;
  v53 = v24;
  v51[0] = v12;
  v51[1] = &v53;
  v51[2] = &v54;
  if (v31 != v7)
  {
    do
    {
      *(_QWORD *)v24 = 0;
      *((_QWORD *)v24 + 1) = 0;
      *((_QWORD *)v24 + 2) = 0;
      *(_OWORD *)v24 = *(_OWORD *)v7;
      *((_QWORD *)v24 + 2) = *(_QWORD *)(v7 + 16);
      *(_QWORD *)v7 = 0;
      *(_QWORD *)(v7 + 8) = 0;
      *(_QWORD *)(v7 + 16) = 0;
      v24 += 24;
      v7 += 24;
    }
    while (v7 != v31);
    v54 = v24;
  }
  v52 = 1;
  sub_20B9B6264((uint64_t)v51);
  v32 = *(_OWORD *)a1;
  v33 = v49;
  *a1 = v48;
  a1[1] = v24;
  v48 = v32;
  v34 = (char *)a1[2];
  a1[2] = v33;
  v49 = v34;
  v47 = (_QWORD *)v32;
  sub_20B9B6830((uint64_t)&v47);
  return v26;
}

void sub_20B9B6ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  uint64_t v5;
  va_list va;

  va_start(va, a4);
  sub_20B9B6264((uint64_t)va);
  *(_QWORD *)(v4 + 8) = v5;
  _Unwind_Resume(a1);
}

void sub_20B9B6EFC()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B9B6F10(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C49FD40;
  result[1] = v3;
  return result;
}

uint64_t sub_20B9B6F44(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C49FD40;
  a2[1] = v2;
  return result;
}

uint64_t sub_20B9B6F60(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  _QWORD v11[2];

  v5 = *(_QWORD *)(a1 + 8);
  if (*(_WORD *)*a2)
  {
    v6 = 0;
    do
      v7 = v6 + 1;
    while (*(unsigned __int16 *)(*a2 + 2 + 2 * v6++));
  }
  else
  {
    v7 = 0;
  }
  v11[0] = *a2;
  v11[1] = v7;
  v9 = *(_QWORD *)(v5 + 24);
  if (!v9)
    sub_20B80BB74();
  return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v9 + 48))(v9, v11, a5);
}

uint64_t sub_20B9B6FCC(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C49FDA0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B9B7008()
{
  return &unk_24C49FDA0;
}

void sub_20B9B7014(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, float *a4@<X3>, uint64_t a5@<X4>, int64x2_t *a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  int64x2_t v26;
  void **v27;
  _QWORD *v28;
  void *v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  _DWORD **v33;
  _DWORD *v34;
  unint64_t v35;
  unint64_t v36;
  __int128 v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void **v42;
  void **v43;
  uint64_t v44;
  __int128 v45;
  void **v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  int64x2_t v51;
  void **v52;
  int v53;
  void *__p[2];
  void *v55;
  _QWORD *v56;
  _QWORD *v57;
  __int128 v58;
  unint64_t v59;
  void **v60;
  int64x2_t v61;
  void **v62;
  unint64_t *v63;
  _BYTE v64[24];
  _BYTE *v65;
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  v58 = 0uLL;
  v59 = 0;
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a2 + 16))(__p, a2);
  v11 = operator new();
  v12 = v11;
  *(_DWORD *)v11 = 0;
  *(_QWORD *)(v11 + 8) = 0;
  *(_QWORD *)(v11 + 16) = 0;
  v13 = __p[0];
  __p[0] = 0;
  *(_QWORD *)(v11 + 24) = 0;
  *(_QWORD *)(v11 + 32) = v13;
  *(_BYTE *)(v11 + 40) = 0;
  v56 = (_QWORD *)v11;
  v14 = *((_QWORD *)&v58 + 1);
  if (*((_QWORD *)&v58 + 1) >= v59)
  {
    v17 = (uint64_t)(*((_QWORD *)&v58 + 1) - v58) >> 3;
    if ((unint64_t)(v17 + 1) >> 61)
      sub_20B80CDD8();
    v18 = (uint64_t)(v59 - v58) >> 2;
    if (v18 <= v17 + 1)
      v18 = v17 + 1;
    if (v59 - (unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8)
      v19 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v19 = v18;
    v63 = &v59;
    if (v19)
      v19 = (unint64_t)sub_20B87FB70(v19);
    else
      v20 = 0;
    v21 = (uint64_t *)(v19 + 8 * v17);
    v22 = v19 + 8 * v20;
    v62 = (void **)v22;
    v56 = 0;
    *v21 = v12;
    v16 = (uint64_t)(v21 + 1);
    v61.i64[1] = (uint64_t)(v21 + 1);
    v23 = (_QWORD *)*((_QWORD *)&v58 + 1);
    v24 = (_QWORD *)v58;
    if (*((_QWORD *)&v58 + 1) == (_QWORD)v58)
    {
      v15 = 0;
      v26 = vdupq_n_s64(*((unint64_t *)&v58 + 1));
    }
    else
    {
      do
      {
        v25 = *--v23;
        *v23 = 0;
        *--v21 = v25;
      }
      while (v23 != v24);
      v26 = (int64x2_t)v58;
      v16 = v61.i64[1];
      v22 = (unint64_t)v62;
      v15 = v56;
    }
    *(_QWORD *)&v58 = v21;
    *((_QWORD *)&v58 + 1) = v16;
    v61 = v26;
    v27 = (void **)v59;
    v59 = v22;
    v62 = v27;
    v60 = (void **)v26.i64[0];
    sub_20B9B88C8((uint64_t)&v60);
  }
  else
  {
    v15 = 0;
    **((_QWORD **)&v58 + 1) = v11;
    v16 = v14 + 8;
  }
  *((_QWORD *)&v58 + 1) = v16;
  sub_20B9B8A10(v58, v16, (v16 - (uint64_t)v58) >> 3);
  v56 = 0;
  if (v15)
  {
    v28 = sub_20B9B89C8(v15);
    MEMORY[0x20BD39CB0](v28, 0x1030C40AAFF5DBDLL);
  }
  v29 = __p[0];
  __p[0] = 0;
  if (v29)
    (*(void (**)(void *))(*(_QWORD *)v29 + 8))(v29);
  sub_20B86D7F0((uint64_t)v64, a5);
  sub_20B9B7638((uint64_t *)&v56, a1, (uint64_t *)&v58, a4, (uint64_t)v64);
  v30 = v65;
  if (v65 == v64)
  {
    v31 = 4;
    v30 = v64;
  }
  else
  {
    if (!v65)
      goto LABEL_26;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_26:
  a6->i64[0] = 0;
  a6->i64[1] = 0;
  a6[1].i64[0] = 0;
  if (a3)
  {
    v32 = v57;
    do
    {
      v33 = (_DWORD **)v56;
      if (v56 == v32)
        break;
      sub_20B99AB68(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), __p);
      v34 = *v33;
      v35 = a6->u64[1];
      v36 = a6[1].u64[0];
      if (v35 >= v36)
      {
        v38 = (uint64_t)(v35 - a6->i64[0]) >> 5;
        v39 = v38 + 1;
        if ((unint64_t)(v38 + 1) >> 59)
          sub_20B80CDD8();
        v40 = v36 - a6->i64[0];
        if (v40 >> 4 > v39)
          v39 = v40 >> 4;
        v41 = (unint64_t)v40 >= 0x7FFFFFFFFFFFFFE0 ? 0x7FFFFFFFFFFFFFFLL : v39;
        v63 = (unint64_t *)&a6[1];
        v42 = (void **)sub_20B9A57CC(v41);
        v43 = &v42[4 * v38];
        v60 = v42;
        v61.i64[0] = (uint64_t)v43;
        v62 = &v42[4 * v44];
        v45 = *(_OWORD *)__p;
        v43[2] = v55;
        *(_OWORD *)v43 = v45;
        __p[1] = 0;
        v55 = 0;
        __p[0] = 0;
        *((_DWORD *)v43 + 6) = *v34;
        v46 = v43 + 4;
        v61.i64[1] = (uint64_t)(v43 + 4);
        v48 = a6->i64[0];
        v47 = a6->u64[1];
        v49 = v61.i64[0];
        if (v47 == a6->i64[0])
        {
          v51 = vdupq_n_s64(v47);
        }
        else
        {
          do
          {
            v50 = *(_OWORD *)(v47 - 32);
            *(_QWORD *)(v49 - 16) = *(_QWORD *)(v47 - 16);
            *(_OWORD *)(v49 - 32) = v50;
            *(_QWORD *)(v47 - 24) = 0;
            *(_QWORD *)(v47 - 16) = 0;
            *(_QWORD *)(v47 - 32) = 0;
            *(_DWORD *)(v49 - 8) = *(_DWORD *)(v47 - 8);
            v49 -= 32;
            v47 -= 32;
          }
          while (v47 != v48);
          v51 = *a6;
          v46 = (void **)v61.i64[1];
        }
        a6->i64[0] = v49;
        a6->i64[1] = (uint64_t)v46;
        v61 = v51;
        v52 = (void **)a6[1].i64[0];
        a6[1].i64[0] = (uint64_t)v62;
        v62 = v52;
        v60 = (void **)v51.i64[0];
        sub_20B9195DC((uint64_t)&v60);
        v53 = SHIBYTE(v55);
        a6->i64[1] = (uint64_t)v46;
        if (v53 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v37 = *(_OWORD *)__p;
        *(_QWORD *)(v35 + 16) = v55;
        *(_OWORD *)v35 = v37;
        __p[1] = 0;
        v55 = 0;
        __p[0] = 0;
        *(_DWORD *)(v35 + 24) = *v34;
        a6->i64[1] = v35 + 32;
      }
      sub_20B9B8B7C(v56, (uint64_t)v57);
      v32 = v57 - 1;
      sub_20B9B898C((_QWORD **)v57 - 1, 0);
      v57 = v32;
    }
    while (a3 > (a6->i64[1] - a6->i64[0]) >> 5);
  }
  v60 = (void **)&v56;
  sub_20B9B8918(&v60);
  v60 = (void **)&v58;
  sub_20B9B8918(&v60);
}

void sub_20B9B7448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char *a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  sub_20B9B898C((_QWORD **)&a16, 0);
  if (__p)
    (*(void (**)(void *))(*(_QWORD *)__p + 8))(__p);
  a16 = &a20;
  sub_20B9B8918((void ***)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9B750C(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  int64x2_t v20;
  uint64_t v21;
  uint64_t v23;
  int64x2_t v24;
  unint64_t v25;
  uint64_t *v26;

  v4 = a1 + 2;
  v5 = a1[2];
  v6 = (_QWORD *)a1[1];
  if ((unint64_t)v6 >= v5)
  {
    v9 = ((uint64_t)v6 - *a1) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      sub_20B80CDD8();
    v10 = v5 - *a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v26 = v4;
    if (v12)
      v12 = (unint64_t)sub_20B87FB70(v12);
    else
      v13 = 0;
    v14 = (_QWORD *)(v12 + 8 * v9);
    v15 = v12 + 8 * v13;
    v25 = v15;
    v16 = *a2;
    *a2 = 0;
    *v14 = v16;
    v8 = (uint64_t)(v14 + 1);
    v24.i64[1] = (uint64_t)(v14 + 1);
    v18 = (_QWORD *)*a1;
    v17 = (_QWORD *)a1[1];
    if (v17 == (_QWORD *)*a1)
    {
      v20 = vdupq_n_s64((unint64_t)v17);
    }
    else
    {
      do
      {
        v19 = *--v17;
        *v17 = 0;
        *--v14 = v19;
      }
      while (v17 != v18);
      v20 = *(int64x2_t *)a1;
      v8 = v24.i64[1];
      v15 = v25;
    }
    *a1 = (uint64_t)v14;
    a1[1] = v8;
    v24 = v20;
    v21 = a1[2];
    a1[2] = v15;
    v25 = v21;
    v23 = v20.i64[0];
    sub_20B9B88C8((uint64_t)&v23);
  }
  else
  {
    v7 = *a2;
    *a2 = 0;
    *v6 = v7;
    v8 = (uint64_t)(v6 + 1);
  }
  a1[1] = v8;
  return sub_20B9B8A10(*a1, v8, (v8 - *a1) >> 3);
}

void sub_20B9B7638(uint64_t *a1, uint64_t a2, uint64_t *a3, float *a4, uint64_t a5)
{
  float *v5;
  uint64_t *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  int64x2_t v18;
  unint64_t v19;
  _BYTE *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t i;
  int *v29;
  uint64_t v30;
  int v31;
  char v32;
  void *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  int64x2_t v45;
  _QWORD *v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  _QWORD **v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t j;
  float *v64;
  uint64_t v65;
  float v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unsigned __int16 *v70;
  unint64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  float v77;
  float *v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  char *v82;
  char *v83;
  unint64_t v84;
  _DWORD *v85;
  BOOL v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  char *v92;
  char *v93;
  int v94;
  _BOOL4 v95;
  uint64_t *v96;
  uint64_t *v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v104;
  unint64_t v105;
  int v106;
  uint64_t v107;
  _QWORD *v108;
  void *v109[3];
  _QWORD *v110;
  void *__p;
  char *v112;
  char *v113;
  int64x2_t v114;
  _QWORD v115[2];
  _BYTE v116[24];
  unint64_t v117;
  _QWORD *v118;

  v106 = **(_DWORD **)(a2 + 8);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  if (*(_QWORD *)a4)
  {
    v5 = a4;
    v6 = a3;
    v7 = a2;
    v105 = 0;
    do
    {
      v8 = (char *)*v6;
      v9 = (char *)v6[1];
      if ((char *)*v6 == v9)
        break;
      v114 = 0uLL;
      v115[0] = 0;
      __p = 0;
      v112 = 0;
      v113 = 0;
      v10 = v9 - v8;
      if (*((_QWORD *)v5 + 1) >= (unint64_t)(v10 >> 3))
        v11 = v10 >> 3;
      else
        v11 = *((_QWORD *)v5 + 1);
      if (v11)
      {
        if (v11 >> 61)
          sub_20B80CDD8();
        v118 = v115;
        v12 = (char *)sub_20B87FB70(v11);
        v14 = (_QWORD *)v114.i64[1];
        v15 = (_QWORD *)v114.i64[0];
        if (v114.i64[1] == v114.i64[0])
        {
          v18 = vdupq_n_s64(v114.u64[1]);
          v16 = v12;
        }
        else
        {
          v16 = v12;
          do
          {
            v17 = *--v14;
            *v14 = 0;
            *((_QWORD *)v16 - 1) = v17;
            v16 -= 8;
          }
          while (v14 != v15);
          v18 = v114;
        }
        v114.i64[0] = (uint64_t)v16;
        v114.i64[1] = (uint64_t)v12;
        *(int64x2_t *)&v116[8] = v18;
        v19 = v115[0];
        v115[0] = &v12[8 * v13];
        v117 = v19;
        *(_QWORD *)v116 = v18.i64[0];
        sub_20B9B88C8((uint64_t)v116);
        v20 = __p;
        if (v11 > (v113 - (_BYTE *)__p) >> 3)
        {
          v21 = v112;
          v22 = (char *)sub_20B87FB70(v11);
          v25 = (char *)__p;
          v24 = v112;
          v26 = &v22[(v21 - v20) & 0xFFFFFFFFFFFFFFF8];
          if (v112 != __p)
          {
            do
            {
              v27 = *((_QWORD *)v24 - 1);
              v24 -= 8;
              *((_QWORD *)v26 - 1) = v27;
              v26 -= 8;
            }
            while (v24 != v25);
            v24 = (char *)__p;
          }
          __p = v26;
          v112 = &v22[(v21 - v20) & 0xFFFFFFFFFFFFFFF8];
          v113 = &v22[8 * v23];
          if (v24)
            operator delete(v24);
        }
        for (i = 0; i != v11; ++i)
        {
          v29 = *(int **)*v6;
          (*(void (**)(void **__return_ptr))(**((_QWORD **)v29 + 4) + 16))(v109);
          v30 = operator new();
          v31 = *v29;
          memset(v116, 0, sizeof(v116));
          sub_20B83C9C4(v116, *((const void **)v29 + 1), *((_QWORD *)v29 + 2), (uint64_t)(*((_QWORD *)v29 + 2) - *((_QWORD *)v29 + 1)) >> 2);
          v32 = *((_BYTE *)v29 + 40);
          *(_DWORD *)v30 = v31;
          *(_OWORD *)(v30 + 8) = *(_OWORD *)v116;
          v33 = v109[0];
          *(_QWORD *)(v30 + 24) = *(_QWORD *)&v116[16];
          *(_QWORD *)(v30 + 32) = v33;
          *(_BYTE *)(v30 + 40) = v32;
          v110 = (_QWORD *)v30;
          v34 = v114.i64[1];
          if (v114.i64[1] >= v115[0])
          {
            v36 = (v114.i64[1] - v114.i64[0]) >> 3;
            if ((unint64_t)(v36 + 1) >> 61)
              sub_20B80CDD8();
            v37 = (v115[0] - v114.i64[0]) >> 2;
            if (v37 <= v36 + 1)
              v37 = v36 + 1;
            if (v115[0] - v114.i64[0] >= 0x7FFFFFFFFFFFFFF8uLL)
              v38 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v38 = v37;
            v118 = v115;
            if (v38)
              v38 = (unint64_t)sub_20B87FB70(v38);
            else
              v39 = 0;
            v40 = (uint64_t *)(v38 + 8 * v36);
            v41 = v38 + 8 * v39;
            v117 = v41;
            v110 = 0;
            *v40 = v30;
            v35 = v40 + 1;
            *(_QWORD *)&v116[16] = v40 + 1;
            v42 = (_QWORD *)v114.i64[1];
            v43 = (_QWORD *)v114.i64[0];
            if (v114.i64[1] == v114.i64[0])
            {
              v46 = 0;
              v45 = vdupq_n_s64(v114.u64[1]);
            }
            else
            {
              do
              {
                v44 = *--v42;
                *v42 = 0;
                *--v40 = v44;
              }
              while (v42 != v43);
              v45 = v114;
              v35 = *(_QWORD **)&v116[16];
              v41 = v117;
              v46 = v110;
            }
            v114.i64[0] = (uint64_t)v40;
            v114.i64[1] = (uint64_t)v35;
            *(int64x2_t *)&v116[8] = v45;
            v47 = v115[0];
            v115[0] = v41;
            v117 = v47;
            *(_QWORD *)v116 = v45.i64[0];
            sub_20B9B88C8((uint64_t)v116);
            v114.i64[1] = (uint64_t)v35;
            if (v46)
            {
              v48 = sub_20B9B89C8(v46);
              MEMORY[0x20BD39CB0](v48, 0x1030C40AAFF5DBDLL);
              v35 = (_QWORD *)v114.i64[1];
            }
          }
          else
          {
            v110 = 0;
            *(_QWORD *)v114.i64[1] = v30;
            v35 = (_QWORD *)(v34 + 8);
            v114.i64[1] = (uint64_t)v35;
          }
          v49 = *(_QWORD *)(*(v35 - 1) + 32);
          v50 = v112;
          if (v112 >= v113)
          {
            v52 = (v112 - (_BYTE *)__p) >> 3;
            if ((unint64_t)(v52 + 1) >> 61)
              sub_20B80CDD8();
            v53 = (v113 - (_BYTE *)__p) >> 2;
            if (v53 <= v52 + 1)
              v53 = v52 + 1;
            if ((unint64_t)(v113 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
              v54 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v54 = v53;
            if (v54)
              v54 = (unint64_t)sub_20B87FB70(v54);
            else
              v55 = 0;
            v56 = (char *)(v54 + 8 * v52);
            *(_QWORD *)v56 = v49;
            v51 = v56 + 8;
            v58 = (char *)__p;
            v57 = v112;
            if (v112 == __p)
            {
              v7 = a2;
            }
            else
            {
              v7 = a2;
              do
              {
                v59 = *((_QWORD *)v57 - 1);
                v57 -= 8;
                *((_QWORD *)v56 - 1) = v59;
                v56 -= 8;
              }
              while (v57 != v58);
              v57 = (char *)__p;
            }
            __p = v56;
            v112 = v51;
            v113 = (char *)(v54 + 8 * v55);
            if (v57)
              operator delete(v57);
          }
          else
          {
            *(_QWORD *)v112 = v49;
            v51 = v50 + 8;
            v7 = a2;
          }
          v112 = v51;
          sub_20B9B8B7C((_QWORD *)*v6, v6[1]);
          v60 = (_QWORD **)(v6[1] - 8);
          sub_20B9B898C(v60, 0);
          v6[1] = (uint64_t)v60;
        }
      }
      (*(void (**)(void **__return_ptr, _QWORD, void **, _QWORD, uint64_t))(**(_QWORD **)(v7 + 16) + 80))(v109, *(_QWORD *)(v7 + 16), &__p, *((_QWORD *)v5 + 2), 1);
      v104 = v114.i64[0];
      if (v114.i64[1] != v114.i64[0])
      {
        v61 = 0;
        do
        {
          (*(void (**)(_QWORD **__return_ptr, _QWORD, unint64_t))(**(_QWORD **)(v7 + 16) + 96))(&v110, *(_QWORD *)(v7 + 16), v61);
          v62 = *((_QWORD *)v5 + 2);
          if (v62)
          {
            for (j = 0; j < v62; ++j)
            {
              v64 = (float *)((char *)v109[0] + 8 * j + 8 * v62 * v61);
              v65 = *(unsigned int *)v64;
              v66 = v64[1];
              v67 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 16) + 8) + 8);
              v68 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v67 + 512))(v67, v65);
              v70 = (unsigned __int16 *)v68;
              v71 = v69;
              if ((v106 & 0x2000) != 0 || !v69)
              {
LABEL_66:
                if (!sub_20B99B250(*(_DWORD **)(*(_QWORD *)(v7 + 16) + 8), v65))
                {
                  v74 = 0;
                  *(_QWORD *)v116 = v70;
                  *(_QWORD *)&v116[8] = v71;
                  do
                  {
                    v75 = sub_20B83B264((uint64_t *)v116, (&off_24C49FDB0)[v74], (int64_t)(&off_24C49FDB0)[v74 + 1], 0);
                    if (v75 != -1)
                      break;
                    v86 = v74 == 28;
                    v74 += 2;
                  }
                  while (!v86);
                  if (v75 == -1 && (v105 != *(_QWORD *)v5 - 1 || sub_20B8AE7D4((uint64_t)v70, v71)))
                  {
                    if (v105)
                      goto LABEL_77;
                    if (v71 != 3 || (*v70 == 38626 ? (v86 = *((unsigned __int8 *)v70 + 2) == 129) : (v86 = 0), !v86))
                    {
                      *(_QWORD *)v116 = v70;
                      *(_QWORD *)&v116[8] = v71;
                      v87 = *(_QWORD *)(a5 + 24);
                      if (!v87)
                        sub_20B80BB74();
                      if ((*(unsigned int (**)(uint64_t, _BYTE *))(*(_QWORD *)v87 + 48))(v87, v116))
                      {
LABEL_77:
                        v76 = *(_QWORD *)(v104 + 8 * v61);
                        v77 = v66 + *(float *)v76;
                        if (*a1 == a1[1] || (float)(v77 / **(float **)*a1) <= v5[6])
                        {
                          (*(void (**)(uint64_t *__return_ptr))(*v110 + 16))(&v107);
                          v78 = v5;
                          v79 = *(_QWORD *)(v104 + 8 * v61);
                          v80 = operator new();
                          memset(v116, 0, sizeof(v116));
                          sub_20B83C9C4(v116, *(const void **)(v76 + 8), *(_QWORD *)(v76 + 16), (uint64_t)(*(_QWORD *)(v76 + 16) - *(_QWORD *)(v76 + 8)) >> 2);
                          v81 = *(_BYTE *)(v79 + 40);
                          *(float *)v80 = v77;
                          v83 = *(char **)&v116[8];
                          v82 = *(char **)v116;
                          *(_QWORD *)(v80 + 8) = *(_QWORD *)v116;
                          v84 = *(_QWORD *)&v116[16];
                          *(_QWORD *)(v80 + 24) = *(_QWORD *)&v116[16];
                          *(_QWORD *)(v80 + 16) = v83;
                          *(_QWORD *)(v80 + 32) = v107;
                          *(_BYTE *)(v80 + 40) = v81;
                          v108 = (_QWORD *)v80;
                          if ((unint64_t)v83 >= v84)
                          {
                            v88 = (v83 - v82) >> 2;
                            if ((unint64_t)(v88 + 1) >> 62)
                              sub_20B80CDD8();
                            v5 = v78;
                            v89 = v84 - (_QWORD)v82;
                            v90 = (uint64_t)(v84 - (_QWORD)v82) >> 1;
                            if (v90 <= v88 + 1)
                              v90 = v88 + 1;
                            if (v89 >= 0x7FFFFFFFFFFFFFFCLL)
                              v91 = 0x3FFFFFFFFFFFFFFFLL;
                            else
                              v91 = v90;
                            v6 = a3;
                            if (v91)
                            {
                              v92 = (char *)sub_20B8127BC(v80 + 24, v91);
                              v82 = *(char **)(v80 + 8);
                              v83 = *(char **)(v80 + 16);
                            }
                            else
                            {
                              v92 = 0;
                            }
                            v93 = &v92[4 * v88];
                            *(_DWORD *)v93 = v65;
                            v85 = v93 + 4;
                            while (v83 != v82)
                            {
                              v94 = *((_DWORD *)v83 - 1);
                              v83 -= 4;
                              *((_DWORD *)v93 - 1) = v94;
                              v93 -= 4;
                            }
                            *(_QWORD *)(v80 + 8) = v93;
                            *(_QWORD *)(v80 + 16) = v85;
                            *(_QWORD *)(v80 + 24) = &v92[4 * v91];
                            if (v82)
                              operator delete(v82);
                          }
                          else
                          {
                            *(_DWORD *)v83 = v65;
                            v85 = v83 + 4;
                            v5 = v78;
                            v6 = a3;
                          }
                          *(_QWORD *)(v80 + 16) = v85;
                          (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v80 + 32) + 24))(*(_QWORD *)(v80 + 32), v65);
                          v95 = sub_20B8AE7D4((uint64_t)v70, v71);
                          v96 = *(uint64_t **)(a2 + 16);
                          if (v95)
                          {
                            sub_20B9B85EC(v80, v96, (uint64_t)"Add to result");
                            v97 = a1;
                          }
                          else
                          {
                            sub_20B9B85EC(v80, v96, (uint64_t)"Add to open states");
                            v97 = v6;
                          }
                          sub_20B9B750C(v97, (uint64_t *)&v108);
                          if (v108)
                          {
                            v98 = sub_20B9B89C8(v108);
                            MEMORY[0x20BD39CB0](v98, 0x1030C40AAFF5DBDLL);
                          }
                          v7 = a2;
                        }
                      }
                    }
                  }
                }
              }
              else
              {
                v72 = v69;
                v73 = (char *)v68;
                while (*v73 < 0)
                {
                  ++v73;
                  if (!--v72)
                    goto LABEL_66;
                }
              }
              v62 = *((_QWORD *)v5 + 2);
            }
          }
          v99 = v110;
          v110 = 0;
          if (v99)
            (*(void (**)(_QWORD *))(*v99 + 8))(v99);
          ++v61;
          v104 = v114.i64[0];
        }
        while (v61 < (v114.i64[1] - v114.i64[0]) >> 3);
      }
      if (v109[0])
      {
        v109[1] = v109[0];
        operator delete(v109[0]);
      }
      if (__p)
      {
        v112 = (char *)__p;
        operator delete(__p);
      }
      *(_QWORD *)v116 = &v114;
      sub_20B9B8918((void ***)v116);
      ++v105;
    }
    while (v105 < *(_QWORD *)v5);
  }
}

void sub_20B9B7E7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t *__p,uint64_t *a25,uint64_t a26,uint64_t a27)
{
  if (__p)
  {
    a25 = __p;
    operator delete(__p);
  }
  __p = &a27;
  sub_20B9B8918((void ***)&__p);
  a27 = a13;
  sub_20B9B8918((void ***)&a27);
  _Unwind_Resume(a1);
}

void sub_20B9B7FBC(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, float *a4@<X3>, uint64_t a5@<X4>, std::string::size_type *a6@<X8>)
{
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  void *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  int64x2_t v33;
  char *v34;
  _QWORD *v35;
  void *v36;
  _QWORD *v37;
  uint64_t v38;
  _DWORD **v39;
  std::string *v40;
  __int128 v41;
  _DWORD *v42;
  std::string::size_type v43;
  std::string::size_type v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _DWORD *v51;
  char *v52;
  std::string::size_type size;
  __int128 v54;
  char *v55;
  unint64_t v56;
  std::string::size_type v57;
  __int128 v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;
  void *__p[2];
  std::string::size_type v66;
  _QWORD *v67;
  _QWORD *v68;
  __int128 v69;
  unint64_t v70;
  std::string v71;
  char *v72;
  unint64_t *v73;
  _BYTE v74[24];
  _BYTE *v75;
  uint64_t v76;

  v76 = *MEMORY[0x24BDAC8D0];
  v69 = 0uLL;
  v70 = 0;
  v9 = *(_QWORD **)a2;
  v8 = *(_QWORD **)(a2 + 8);
  v10 = (unint64_t)v8 - *(_QWORD *)a2;
  if (v8 != *(_QWORD **)a2)
  {
    do
    {
      v11 = *(_QWORD *)(a1 + 16);
      v12 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v9 + 32))(*v9);
      v13 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v11 + 8) + 8) + 512))(*(_QWORD *)(*(_QWORD *)(v11 + 8) + 8), v12);
      v15 = v14;
      (*(void (**)(void **__return_ptr))(*(_QWORD *)*v9 + 16))(__p);
      v16 = sub_20B8AE7D4(v13, v15);
      v17 = operator new();
      v18 = v17;
      *(_DWORD *)v17 = 0;
      v19 = v10 > 8 && v16;
      *(_QWORD *)(v17 + 8) = 0;
      *(_QWORD *)(v17 + 16) = 0;
      v20 = __p[0];
      __p[0] = 0;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = v20;
      *(_BYTE *)(v17 + 40) = v19;
      v67 = (_QWORD *)v17;
      v21 = *((_QWORD *)&v69 + 1);
      if (*((_QWORD *)&v69 + 1) >= v70)
      {
        v24 = (uint64_t)(*((_QWORD *)&v69 + 1) - v69) >> 3;
        if ((unint64_t)(v24 + 1) >> 61)
          sub_20B80CDD8();
        v25 = (uint64_t)(v70 - v69) >> 2;
        if (v25 <= v24 + 1)
          v25 = v24 + 1;
        if (v70 - (unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8)
          v26 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v26 = v25;
        v73 = &v70;
        if (v26)
          v26 = (unint64_t)sub_20B87FB70(v26);
        else
          v27 = 0;
        v28 = (uint64_t *)(v26 + 8 * v24);
        v29 = v26 + 8 * v27;
        v72 = (char *)v29;
        v67 = 0;
        *v28 = v18;
        v23 = (uint64_t)(v28 + 1);
        v71.__r_.__value_.__r.__words[2] = (std::string::size_type)(v28 + 1);
        v30 = (_QWORD *)*((_QWORD *)&v69 + 1);
        v31 = (_QWORD *)v69;
        if (*((_QWORD *)&v69 + 1) == (_QWORD)v69)
        {
          v22 = 0;
          v33 = vdupq_n_s64(*((unint64_t *)&v69 + 1));
        }
        else
        {
          do
          {
            v32 = *--v30;
            *v30 = 0;
            *--v28 = v32;
          }
          while (v30 != v31);
          v33 = (int64x2_t)v69;
          v23 = v71.__r_.__value_.__r.__words[2];
          v29 = (unint64_t)v72;
          v22 = v67;
        }
        *(_QWORD *)&v69 = v28;
        *((_QWORD *)&v69 + 1) = v23;
        *(int64x2_t *)&v71.__r_.__value_.__r.__words[1] = v33;
        v34 = (char *)v70;
        v70 = v29;
        v72 = v34;
        v71.__r_.__value_.__r.__words[0] = v33.i64[0];
        sub_20B9B88C8((uint64_t)&v71);
      }
      else
      {
        v22 = 0;
        **((_QWORD **)&v69 + 1) = v17;
        v23 = v21 + 8;
      }
      *((_QWORD *)&v69 + 1) = v23;
      sub_20B9B8A10(v69, v23, (v23 - (uint64_t)v69) >> 3);
      v67 = 0;
      if (v22)
      {
        v35 = sub_20B9B89C8(v22);
        MEMORY[0x20BD39CB0](v35, 0x1030C40AAFF5DBDLL);
      }
      v36 = __p[0];
      __p[0] = 0;
      if (v36)
        (*(void (**)(void *))(*(_QWORD *)v36 + 8))(v36);
      ++v9;
    }
    while (v9 != v8);
  }
  sub_20B86D7F0((uint64_t)v74, a5);
  sub_20B9B7638((uint64_t *)&v67, a1, (uint64_t *)&v69, a4, (uint64_t)v74);
  v37 = v75;
  if (v75 == v74)
  {
    v38 = 4;
    v37 = v74;
  }
  else
  {
    if (!v75)
      goto LABEL_31;
    v38 = 5;
  }
  (*(void (**)(void))(*v37 + 8 * v38))();
LABEL_31:
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  if (a3)
  {
    do
    {
      v39 = (_DWORD **)v67;
      if (v67 == v68)
        break;
      if (*(_BYTE *)(*v67 + 40))
      {
        sub_20B99AB68(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), &v71);
        v40 = std::string::insert(&v71, 0, " ", 1uLL);
        v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
        v66 = v40->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v41;
        v40->__r_.__value_.__l.__size_ = 0;
        v40->__r_.__value_.__r.__words[2] = 0;
        v40->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v71.__r_.__value_.__l.__data_);
      }
      else
      {
        sub_20B99AB68(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), __p);
      }
      v42 = *v39;
      v44 = a6[1];
      v43 = a6[2];
      if (v44 >= v43)
      {
        v46 = (uint64_t)(v44 - *a6) >> 5;
        if ((unint64_t)(v46 + 1) >> 59)
          sub_20B80CDD8();
        v47 = v43 - *a6;
        v48 = v47 >> 4;
        if (v47 >> 4 <= (unint64_t)(v46 + 1))
          v48 = v46 + 1;
        v49 = (unint64_t)v47 >= 0x7FFFFFFFFFFFFFE0 ? 0x7FFFFFFFFFFFFFFLL : v48;
        v73 = a6 + 2;
        if (v49)
        {
          v51 = sub_20B9A57CC(v49);
        }
        else
        {
          v51 = 0;
          v50 = 0;
        }
        size = (std::string::size_type)&v51[8 * v46];
        v71.__r_.__value_.__r.__words[0] = (std::string::size_type)v51;
        v71.__r_.__value_.__l.__size_ = size;
        v71.__r_.__value_.__r.__words[2] = size;
        v72 = (char *)&v51[8 * v50];
        if (SHIBYTE(v66) < 0)
        {
          sub_20B80ACE0((_BYTE *)size, __p[0], (unint64_t)__p[1]);
          v55 = (char *)v71.__r_.__value_.__r.__words[2];
          size = v71.__r_.__value_.__l.__size_;
        }
        else
        {
          v54 = *(_OWORD *)__p;
          *(_QWORD *)(size + 16) = v66;
          *(_OWORD *)size = v54;
          v55 = (char *)&v51[8 * v46];
        }
        v51[8 * v46 + 6] = *v42;
        v52 = v55 + 32;
        v71.__r_.__value_.__r.__words[2] = (std::string::size_type)(v55 + 32);
        v57 = *a6;
        v56 = a6[1];
        if (v56 == *a6)
        {
          v59 = vdupq_n_s64(v56);
        }
        else
        {
          do
          {
            v58 = *(_OWORD *)(v56 - 32);
            *(_QWORD *)(size - 16) = *(_QWORD *)(v56 - 16);
            *(_OWORD *)(size - 32) = v58;
            *(_QWORD *)(v56 - 24) = 0;
            *(_QWORD *)(v56 - 16) = 0;
            *(_QWORD *)(v56 - 32) = 0;
            *(_DWORD *)(size - 8) = *(_DWORD *)(v56 - 8);
            size -= 32;
            v56 -= 32;
          }
          while (v56 != v57);
          v59 = *(int64x2_t *)a6;
          v52 = (char *)v71.__r_.__value_.__r.__words[2];
        }
        *a6 = size;
        a6[1] = (std::string::size_type)v52;
        *(int64x2_t *)&v71.__r_.__value_.__r.__words[1] = v59;
        v60 = (char *)a6[2];
        a6[2] = (std::string::size_type)v72;
        v72 = v60;
        v71.__r_.__value_.__r.__words[0] = v59.i64[0];
        sub_20B9195DC((uint64_t)&v71);
      }
      else
      {
        if (SHIBYTE(v66) < 0)
        {
          sub_20B80ACE0((_BYTE *)a6[1], __p[0], (unint64_t)__p[1]);
        }
        else
        {
          v45 = *(_OWORD *)__p;
          *(_QWORD *)(v44 + 16) = v66;
          *(_OWORD *)v44 = v45;
        }
        *(_DWORD *)(v44 + 24) = *v42;
        v52 = (char *)(v44 + 32);
        a6[1] = v44 + 32;
      }
      a6[1] = (std::string::size_type)v52;
      sub_20B9B8B7C(v67, (uint64_t)v68);
      v61 = v68 - 1;
      sub_20B9B898C((_QWORD **)v68 - 1, 0);
      v68 = v61;
      if (SHIBYTE(v66) < 0)
        operator delete(__p[0]);
    }
    while (a3 > (uint64_t)(a6[1] - *a6) >> 5);
  }
  v71.__r_.__value_.__r.__words[0] = (std::string::size_type)&v67;
  sub_20B9B8918((void ***)&v71);
  v71.__r_.__value_.__r.__words[0] = (std::string::size_type)&v69;
  sub_20B9B8918((void ***)&v71);
}

void sub_20B9B84EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char *a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v37;
  uint64_t v38;

  v37 = *(_QWORD **)(v35 - 104);
  if (v37 == v34)
  {
    v38 = 4;
    v37 = (_QWORD *)(v35 - 128);
  }
  else
  {
    if (!v37)
      goto LABEL_6;
    v38 = 5;
  }
  (*(void (**)(_QWORD *))(*v37 + 8 * v38))(v37);
LABEL_6:
  a20 = &a24;
  sub_20B9B8918((void ***)&a20);
  _Unwind_Resume(a1);
}

void sub_20B9B85EC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  int *v8;
  int *i;
  std::string *v10;
  __int128 v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  NSObject *v14;
  int v15;
  const char *v16;
  std::string *v17;
  std::string *v18;
  double v19;
  std::string v20;
  std::string v21;
  _BYTE __p[24];
  std::string *v23;
  __int16 v24;
  double v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v6 = sub_20B9A7C5C(0xAu);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    v7 = sub_20B9A7C5C(0xAu);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      v15 = (*(uint64_t (**)(uint64_t *))(*a2 + 56))(a2);
      v16 = "Montreal";
      if (v15 == 1)
        v16 = "RNNLM";
      *(_DWORD *)__p = 136315138;
      *(_QWORD *)&__p[4] = v16;
      _os_log_debug_impl(&dword_20B7F7000, v7, OS_LOG_TYPE_DEBUG, "[Prediction Engine: %s]", __p, 0xCu);
    }
    memset(&v21, 0, sizeof(v21));
    v8 = *(int **)(a1 + 8);
    for (i = *(int **)(a1 + 16); v8 != i; ++v8)
    {
      std::to_string(&v20, *v8);
      v10 = std::string::append(&v20, " ", 1uLL);
      v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      *(_QWORD *)&__p[16] = *((_QWORD *)&v10->__r_.__value_.__l + 2);
      *(_OWORD *)__p = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      if (__p[23] >= 0)
        v12 = __p;
      else
        v12 = *(const std::string::value_type **)__p;
      if (__p[23] >= 0)
        v13 = __p[23];
      else
        v13 = *(_QWORD *)&__p[8];
      std::string::append(&v21, v12, v13);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v20.__r_.__value_.__l.__data_);
    }
    v14 = sub_20B9A7C5C(0xAu);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      sub_20B99AB68(a2[1], &v20);
      if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v17 = &v20;
      else
        v17 = (std::string *)v20.__r_.__value_.__r.__words[0];
      v18 = &v21;
      if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v18 = (std::string *)v21.__r_.__value_.__r.__words[0];
      v19 = *(float *)a1;
      *(_DWORD *)__p = 136315906;
      *(_QWORD *)&__p[4] = a3;
      *(_WORD *)&__p[12] = 2080;
      *(_QWORD *)&__p[14] = v17;
      *(_WORD *)&__p[22] = 2080;
      v23 = v18;
      v24 = 2048;
      v25 = v19;
      _os_log_debug_impl(&dword_20B7F7000, v14, OS_LOG_TYPE_DEBUG, "%s: %s (%sprob:%f)", __p, 0x2Au);
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v20.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v21.__r_.__value_.__l.__data_);
  }
}

void sub_20B9B885C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B9B88B4()
{
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B9B88C8(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    sub_20B9B898C((_QWORD **)(i - 8), 0);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20B9B8918(void ***a1)
{
  void **v1;
  _QWORD **v2;
  _QWORD **v4;
  void *v5;

  v1 = *a1;
  v2 = (_QWORD **)**a1;
  if (v2)
  {
    v4 = (_QWORD **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
        sub_20B9B898C(--v4, 0);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *sub_20B9B898C(_QWORD **a1, _QWORD *a2)
{
  _QWORD *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_20B9B89C8(result);
    JUMPOUT(0x20BD39CB0);
  }
  return result;
}

_QWORD *sub_20B9B89C8(_QWORD *a1)
{
  uint64_t v2;
  void *v3;

  v2 = a1[4];
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_20B9B8A10(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  float **v6;
  uint64_t v7;
  _QWORD **v8;
  float v9;
  float *v10;
  float **v11;
  unint64_t v12;
  float *v13;
  float v14;

  v3 = a3 - 2;
  if (a3 >= 2)
  {
    v4 = result;
    v5 = v3 >> 1;
    v6 = (float **)(result + 8 * (v3 >> 1));
    v8 = (_QWORD **)(a2 - 8);
    v7 = *(_QWORD *)(a2 - 8);
    v9 = **v6;
    if (v9 == *(float *)v7)
    {
      result = sub_20B9B8B1C(*((_DWORD **)*v6 + 1), *((_QWORD *)*v6 + 2), *(_DWORD **)(v7 + 8), *(_QWORD *)(v7 + 16));
      if ((result & 0x80) == 0)
        return result;
    }
    else if (v9 >= *(float *)v7)
    {
      return result;
    }
    *v8 = 0;
    v10 = *v6;
    *v6 = 0;
    sub_20B9B898C(v8, v10);
    if (v3 >= 2)
    {
      do
      {
        v12 = v5 - 1;
        v5 = (v5 - 1) >> 1;
        v11 = (float **)(v4 + 8 * v5);
        v13 = *v11;
        v14 = **v11;
        if (v14 == *(float *)v7)
        {
          if ((sub_20B9B8B1C(*((_DWORD **)v13 + 1), *((_QWORD *)v13 + 2), *(_DWORD **)(v7 + 8), *(_QWORD *)(v7 + 16)) & 0x80) == 0)
            goto LABEL_7;
        }
        else if (v14 >= *(float *)v7)
        {
          goto LABEL_7;
        }
        *v11 = 0;
        sub_20B9B898C((_QWORD **)v6, v13);
        v6 = (float **)(v4 + 8 * v5);
      }
      while (v12 > 1);
    }
    else
    {
LABEL_7:
      v11 = v6;
    }
    return (uint64_t)sub_20B9B898C((_QWORD **)v11, (_QWORD *)v7);
  }
  return result;
}

uint64_t sub_20B9B8B1C(_DWORD *a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  unsigned int v8;

  v4 = (a2 - (uint64_t)a1) >> 2;
  v5 = (a4 - (uint64_t)a3) >> 2;
  if (v5 >= v4)
    v6 = (a2 - (uint64_t)a1) >> 2;
  else
    v6 = (a4 - (uint64_t)a3) >> 2;
  if (v6 < 1)
  {
LABEL_7:
    v7 = v4 == v5;
    if (v4 < v5)
      v8 = -1;
    else
      v8 = 1;
    if (v7)
      return 0;
    else
      return v8;
  }
  else
  {
    while (*a1 == *a3)
    {
      ++a1;
      ++a3;
      if (!--v6)
        goto LABEL_7;
    }
    if (*a1 < *a3)
      return 0xFFFFFFFFLL;
    else
      return 1;
  }
}

_QWORD *sub_20B9B8B7C(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD **v11;
  _QWORD **v12;
  uint64_t v13;
  uint64_t v14;
  float *v15;
  float v16;
  _DWORD *v17;
  _QWORD **v18;
  _QWORD *v19;

  v2 = a2 - (_QWORD)result;
  if (a2 - (uint64_t)result >= 9)
  {
    v4 = (uint64_t)result;
    v5 = 0;
    v6 = v2 >> 3;
    v7 = (_QWORD *)*result;
    *result = 0;
    v8 = __OFSUB__(v2 >> 3, 2);
    v9 = (v2 >> 3) - 2;
    if (v9 < 0 != v8)
      v9 = v6 - 1;
    v10 = v9 >> 1;
    v11 = (_QWORD **)result;
    while (1)
    {
      v12 = v11;
      v11 += v5 + 1;
      v13 = 2 * v5;
      v5 = (2 * v5) | 1;
      v14 = v13 + 2;
      if (v13 + 2 < v6)
      {
        v15 = (float *)v11[1];
        v16 = *(float *)*v11;
        if (v16 != *v15)
        {
          if (v16 >= *v15)
            goto LABEL_9;
LABEL_8:
          ++v11;
          v5 = v14;
          goto LABEL_9;
        }
        if ((sub_20B9B8B1C((_DWORD *)(*v11)[1], (*v11)[2], *((_DWORD **)v15 + 1), *((_QWORD *)v15 + 2)) & 0x80) != 0)
          goto LABEL_8;
      }
LABEL_9:
      v17 = *v11;
      *v11 = 0;
      sub_20B9B898C(v12, v17);
      if (v5 > v10)
      {
        v18 = (_QWORD **)(a2 - 8);
        if (v18 == v11)
          return sub_20B9B898C(v11, v7);
        v19 = *v18;
        *v18 = 0;
        sub_20B9B898C(v11, v19);
        sub_20B9B898C(v18, v7);
        return (_QWORD *)sub_20B9B8A10(v4, (uint64_t)(v11 + 1), ((uint64_t)v11 - v4 + 8) >> 3);
      }
    }
  }
  return result;
}

uint64_t sub_20B9B8CE8(uint64_t a1)
{
  _DWORD *v1;
  _DWORD *v2;
  unint64_t v3;
  _DWORD *i;
  unsigned int v5;

  v2 = *(_DWORD **)a1;
  v1 = *(_DWORD **)(a1 + 8);
  v3 = (unint64_t)v1 - *(_QWORD *)a1;
  if (v3 == 4)
  {
    if (*v2 == 1)
      return 1;
  }
  else if (v3 > 8)
  {
    v2 = v1 - 2;
  }
  for (i = *(_DWORD **)(a1 + 8); i != v2; --i)
  {
    v5 = *(i - 1);
    if (i == v1 && v5 == 502)
      break;
    if (v5 >= 0x258)
      return 1;
  }
  return 0;
}

uint64_t sub_20B9B8D50(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _BOOL8 v5;

  v2 = a1[1];
  if (*a1 == v2)
    return 1;
  v4 = *(unsigned int *)(v2 - 4);
  v5 = sub_20B9C45B0(a2, *(_DWORD *)(v2 - 4));
  if (!v5
    && (*(double (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 40))(a2, v4, 0, 0) >= -7.0)
  {
    return 1;
  }
  return v5;
}

uint64_t sub_20B9B8DC8(uint64_t a1, int a2)
{
  uint64_t result;

  result = LMLanguageModelTokenIDisUnknown();
  if ((_DWORD)result)
    return !sub_20B9C45B0(a1, a2);
  return result;
}

uint64_t sub_20B9B8E04(int **a1, uint64_t a2)
{
  int *v2;
  int *v3;
  int *v6;
  char v7;
  uint64_t result;
  char v9;

  v2 = *a1;
  v3 = a1[1];
  if (v3 == *a1)
    return 0;
  v6 = v3 - 1;
  v7 = 1;
  while (*v6 == 1)
  {
LABEL_6:
    result = 0;
    v9 = v7 & (v6-- != v2);
    v7 = 0;
    if ((v9 & 1) == 0)
      return result;
  }
  if (sub_20B9B8DC8(a2, *v6))
  {
    v2 = *a1;
    goto LABEL_6;
  }
  return 1;
}

void sub_20B9B8E88(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C46B8D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B9B8E98(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C46B8D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD39CB0);
}

void sub_20B9B8EC8(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    CFRelease(v1);
}

void sub_20B9B8EEC(uint64_t a1, uint64_t a2)
{
  id v3;

  *(_BYTE *)a1 = 1;
  v3 = (id)sub_20B8E1754(a2);
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 8), v3);

}

void sub_20B9B8F34(uint64_t a1, uint64_t a2, _QWORD *a3, int a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  const __CFString *v14;
  const __CFString *v15;
  const __CFString *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[2];
  uint64_t v20[2];

  v10 = sub_20B9F1A84(*(_DWORD *)(*(_QWORD *)(a1 + 16) + 4));
  v20[0] = sub_20B9F1C60(v10, *(_WORD **)(a2 + 8));
  v20[1] = v11;
  v12 = 1;
  v19[0] = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v10 + 24))(v10, *(_QWORD *)(a2 + 8), 1);
  v19[1] = v13;
  v14 = sub_20B88F830();
  v15 = v14;
  if (!*(_BYTE *)(*a3 + 239))
  {
    if (a5 == 9)
      v12 = sub_20B896464(v14);
    else
      v12 = 0;
  }
  v16 = sub_20B9B9144(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 64), (uint64_t)v15, v12);
  if (v16)
  {
    v17 = operator new();
    sub_20B98E550(v17, v16, v15, v20, (uint64_t)v19, a2, a3, a4, a5);
    sub_20B9B8EEC(a1, v17);
    CFRelease(v16);
  }
  else
  {
    v18 = operator new();
    sub_20B98E550(v18, v15, 0, v20, (uint64_t)v19, a2, a3, a4, a5);
    sub_20B9B8EEC(a1, v18);
  }
  if (v15)
    CFRelease(v15);
}

void sub_20B9B90E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B87E150((const void **)va, 0);
  _Unwind_Resume(a1);
}

CFStringRef sub_20B9B9144(uint64_t a1, uint64_t a2, int a3)
{
  BOOL v3;

  if (a1 && *(_BYTE *)(a1 + 104) && (!*(_BYTE *)(a1 + 105) ? (v3 = a3 == 0) : (v3 = 1), !v3))
    return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR(" %@"), a2);
  else
    return 0;
}

void sub_20B9B91A0(uint64_t a1, _QWORD *a2, _QWORD *a3, int a4, int a5, uint64_t a6)
{
  CFStringRef v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  int v21;
  __CFString *v22;
  int v23;
  uint64_t *v24;
  double v25;
  uint64_t v26;
  int v27;
  void *__p;
  void *v29;
  _QWORD *v30;
  CFTypeRef cf;

  (*(void (**)(_QWORD *))(*a2 + 56))(a2);
  v12 = sub_20B88F830();
  cf = v12;
  if (a5 == 14 && CEMStringIsSingleEmoji())
    goto LABEL_27;
  v13 = *((_DWORD *)a2 + 2);
  if (v13 == 8)
  {
    v14 = *(_QWORD *)(a1 + 16);
    v15 = *(_QWORD *)(v14 + 72);
    if (v15)
      v16 = *(_QWORD *)(*(_QWORD *)(v15 + 8) + 32);
    else
      v16 = 0;
    v17 = sub_20B9DC240((uint64_t)a2, v16, *(_QWORD *)(v14 + 64) + 48);
    if (a2[13] >= 2uLL)
    {
      v18 = operator new(8uLL);
      *v18 = a2;
      v29 = v18 + 1;
      v30 = v18 + 1;
      __p = v18;
      v19 = operator new();
      v20 = (*(uint64_t (**)(_QWORD *))(*a2 + 16))(a2);
      sub_20B9D33D0(v19, v20, (uint64_t *)&__p, *(_QWORD *)(a1 + 16), a6, v17);
      sub_20B9B8EEC(a1, v19);
      if (__p)
      {
        v29 = __p;
        operator delete(__p);
      }
LABEL_22:
      v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 112))(v19);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v19 + 480))(v19, -v23);
      goto LABEL_27;
    }
  }
  else
  {
    v17 = -1.79769313e308;
  }
  if (*(_BYTE *)(*a3 + 239))
  {
    v21 = 1;
  }
  else if (a5 == 9)
  {
    v21 = sub_20B896464(v12);
  }
  else
  {
    v21 = 0;
  }
  v22 = (__CFString *)sub_20B9B9144(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 64), (uint64_t)v12, v21);
  __p = v22;
  v19 = operator new();
  if (v22)
    sub_20B98E3E8(v19, v22, v12, (uint64_t)a2, a3, a4, a5, v17);
  else
    sub_20B98E3E8(v19, v12, 0, (uint64_t)a2, a3, a4, a5, v17);
  sub_20B9B8EEC(a1, v19);
  if (v22)
    CFRelease(v22);
  if (v13 == 8)
    goto LABEL_22;
  v24 = (uint64_t *)a2[2];
  v25 = 1.0;
  if (v24)
  {
    v26 = *v24;
    if (v26)
      v25 = *(float *)(v26 + 56);
  }
  v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 112))(v19);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v19 + 480))(v19, (int)((double)v27 + (1.0 - v25) * 2000.0));
LABEL_27:
  if (cf)
    CFRelease(cf);
}

void sub_20B9B9488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, const void *a12)
{
  sub_20B87E150(&a12, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9B952C(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[3];
  _QWORD *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = off_24C467F80;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = 0;
  v11 = a1 + 16;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_WORD *)(a1 + 40) = 1;
  *(_QWORD *)(a1 + 48) = a3;
  sub_20B95169C(a1 + 56, 0, 0);
  sub_20B9E0DE4(a1 + 80, (uint64_t)a2, a1, a4, a5, a6);
  sub_20B9C2B7C((_QWORD *)(a1 + 960));
  *(_DWORD *)(a1 + 1072) = 0;
  *(_QWORD *)(a1 + 1080) = 0;
  *(_QWORD *)(a1 + 1096) = 0;
  *(_QWORD *)(a1 + 1088) = 0;
  *(_QWORD *)(a1 + 1112) = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  *(_QWORD *)(a1 + 1120) = a2;
  *(_QWORD *)(a1 + 1136) = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  *(_QWORD *)(a1 + 1144) = a2;
  *(_QWORD *)(a1 + 1160) = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  *(_QWORD *)(a1 + 1168) = a2;
  *(_QWORD *)(a1 + 1184) = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  *(_QWORD *)(a1 + 1192) = a2;
  *(_QWORD *)(a1 + 1208) = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  *(_QWORD *)(a1 + 1216) = a2;
  *(_QWORD *)(a1 + 1232) = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  *(_QWORD *)(a1 + 1240) = a2;
  *(_QWORD *)(a1 + 1264) = 0;
  *(_QWORD *)(a1 + 1256) = 0;
  *(_QWORD *)(a1 + 1248) = a1 + 1256;
  v12 = *a2;
  if (*a2 > 4)
  {
    if (v12 == 5)
    {
      v13 = 1;
      goto LABEL_10;
    }
    if (v12 == 13)
    {
      v13 = 2;
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  v13 = 0;
  if (v12 != 2 && v12 != 4)
LABEL_9:
    v13 = -1;
LABEL_10:
  *(_DWORD *)(a1 + 1272) = v13;
  *(_QWORD *)(a1 + 1280) = 0xFFFFLL;
  *(_BYTE *)(a1 + 1288) = 0;
  *(_QWORD *)(a1 + 1304) = 0;
  *(_WORD *)(a1 + 1312) = 0;
  *(_BYTE *)(a1 + 1328) = a6;
  v14 = operator new();
  sub_20B9B13E4(v14, a1 + 80);
  *(_QWORD *)(a1 + 1064) = v14;
  v19[0] = &off_24C46A6B8;
  v19[1] = a1;
  v20 = v19;
  *(_QWORD *)(a1 + 952) = sub_20B9F925C((uint64_t)a2, v11, (uint64_t)v19);
  v15 = v20;
  if (v20 == v19)
  {
    v16 = 4;
    v15 = v19;
    goto LABEL_14;
  }
  if (v20)
  {
    v16 = 5;
LABEL_14:
    (*(void (**)(void))(*v15 + 8 * v16))();
  }
  *(_QWORD *)(a1 + 1296) = CFSetCreateMutable(0, 0, MEMORY[0x24BDBD6B8]);
  v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) + 8) + 32);
  *(double *)(a1 + 1304) = (*(double (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v17 + 40))(v17, 502, 0, 0);
  *(_QWORD *)(a1 + 1320) = sub_20B96621C();
  return a1;
}

void sub_20B9B9800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, void ***a13)
{
  const void **v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  void ***v17;
  _QWORD **v18;
  void ***v20;
  uint64_t v21;
  void *v22;

  v20 = a13;
  if (a13 == v17)
  {
    v21 = 4;
    v20 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v21 = 5;
  }
  ((void (*)(void))(*v20)[v21])();
LABEL_6:
  sub_20B8292CC(v14 + 1248, *v18);
  sub_20B8B035C((const void **)(v14 + 1232), 0);
  sub_20B8B035C((const void **)(v14 + 1208), 0);
  sub_20B8B035C((const void **)(v14 + 1184), 0);
  sub_20B8B035C((const void **)(v14 + 1160), 0);
  sub_20B8B035C((const void **)(v14 + 1136), 0);
  sub_20B8B035C((const void **)(v14 + 1112), 0);
  v22 = *(void **)(v14 + 1080);
  if (v22)
  {
    *(_QWORD *)(v14 + 1088) = v22;
    operator delete(v22);
  }
  sub_20B9C2BD8(v16);
  sub_20B9E1898(v15);
  sub_20B951828(v13);
  sub_20B882394(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9B9938(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  const void *v4;
  void *v5;
  void **v7;

  *(_QWORD *)a1 = off_24C467F80;
  v2 = *(_QWORD *)(a1 + 1064);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 952);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(const void **)(a1 + 1296);
  if (v4)
    CFRelease(v4);
  sub_20B8292CC(a1 + 1248, *(_QWORD **)(a1 + 1256));
  sub_20B8B035C((const void **)(a1 + 1232), 0);
  sub_20B8B035C((const void **)(a1 + 1208), 0);
  sub_20B8B035C((const void **)(a1 + 1184), 0);
  sub_20B8B035C((const void **)(a1 + 1160), 0);
  sub_20B8B035C((const void **)(a1 + 1136), 0);
  sub_20B8B035C((const void **)(a1 + 1112), 0);
  v5 = *(void **)(a1 + 1080);
  if (v5)
  {
    *(_QWORD *)(a1 + 1088) = v5;
    operator delete(v5);
  }
  sub_20B9C2BD8((void **)(a1 + 960));
  sub_20B9E1898(a1 + 80);
  sub_20B951828((const void **)(a1 + 56));
  v7 = (void **)(a1 + 16);
  sub_20B882394(&v7);
  return a1;
}

void sub_20B9B9A34(uint64_t a1)
{
  sub_20B9B9938(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B9B9A58(int64x2_t *a1, unsigned int (***a2)(_QWORD), uint64_t a3)
{
  _DWORD *v6;
  int v7;
  void *v8;
  uint64_t v9;
  void *v10;

  if ((**a2)(a2) == 2)
  {
    v6 = __dynamic_cast(a2, (const struct __class_type_info *)&unk_24C45BCA0, (const struct __class_type_info *)&unk_24C45CA68, 0);
    v7 = (a3 & 1) != 0 || v6[16] == 2;
    sub_20B9B9BB0(a1, (uint64_t)v6, v7);
    goto LABEL_13;
  }
  if (!(**a2)(a2))
    goto LABEL_10;
  if ((**a2)(a2) != 1)
  {
    if ((**a2)(a2) == 3)
    {
      v10 = __dynamic_cast(a2, (const struct __class_type_info *)&unk_24C45BCA0, (const struct __class_type_info *)&unk_24C45C120, 0);
      sub_20B9B9DA8((uint64_t)a1, (uint64_t)v10);
    }
    goto LABEL_13;
  }
  if (!a1[83].i8[0])
  {
LABEL_10:
    sub_20B9B9C3C((uint64_t)a1, (float **)a2);
LABEL_13:
    v9 = 1;
    goto LABEL_14;
  }
  v8 = __dynamic_cast(a2, (const struct __class_type_info *)&unk_24C45BCA0, (const struct __class_type_info *)&unk_24C45C108, 0);
  v9 = sub_20B9B9D0C((uint64_t)a1, (uint64_t)v8, a3);
LABEL_14:
  sub_20B9B9E08((uint64_t)a1, (uint64_t (***)(_QWORD))a2, a3);
  return v9;
}

void sub_20B9B9BB0(int64x2_t *a1, uint64_t a2, int a3)
{
  uint64_t v6;

  sub_20B9B9E80((uint64_t)a1, 2);
  if (!a1[79].i32[2])
    sub_20B967604(a1[82].i64[1], a2);
  sub_20B9ECB60((uint64_t)a1[5].i64, a2, a3);
  if (a3)
  {
    v6 = a1[54].i64[1];
    if (v6 >= 1)
    {
      sub_20B941338(a1 + 1, 2, v6);
      sub_20B9BA1D8((uint64_t)a1);
    }
  }
}

_BYTE *sub_20B9B9C3C(uint64_t a1, float **a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *result;

  sub_20B9E32C0(a1 + 80, a2, *(_DWORD *)(*(_QWORD *)(a1 + 8) + 24), (CFArrayRef *)(a1 + 56));
  v4 = *(_QWORD *)(a1 + 96);
  if (*(_QWORD *)(a1 + 88) == v4 || (*(_DWORD *)(*(_QWORD *)(v4 - 8) + 168) - 1) >= 2)
  {
    v5 = (*((uint64_t (**)(float **))*a2 + 1))(a2);
    sub_20B9410B4((uint64_t **)(a1 + 16), 0, v5);
  }
  sub_20B9678B0(*(const void ****)(a1 + 1320));
  if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 32) != 1)
    sub_20B9BA1D8(a1);
  result = sub_20B9547EC();
  if (*result)
  {
    if ((result[9] & 8) != 0)
      return (_BYTE *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 952) + 88))(*(_QWORD *)(a1 + 952));
  }
  return result;
}

uint64_t sub_20B9B9D0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = (uint64_t **)(a1 + 16);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
  sub_20B9410B4(v6, 1, v7);
  sub_20B9B9E80(a1, 1);
  v8 = sub_20B9ECC0C((_QWORD *)(a1 + 80), a2, a3);
  if ((_DWORD)v8)
  {
    if ((_DWORD)a3)
    {
      v9 = *(_QWORD *)(a1 + 872);
      if (v9 >= 1)
      {
        sub_20B941338((int64x2_t *)v6, 1, v9);
        sub_20B9BA1D8(a1);
      }
    }
  }
  return v8;
}

void sub_20B9B9DA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_20B9BA674(a1);
  sub_20B9EBCAC((_QWORD *)(a1 + 80), a2);
  sub_20B9678B0(*(const void ****)(a1 + 1320));
  v4 = *(_QWORD *)(a1 + 872);
  if (v4 >= 1)
  {
    sub_20B941338((int64x2_t *)(a1 + 16), 2, v4);
    sub_20B9BA1D8(a1);
  }
}

_DWORD *sub_20B9B9E08(uint64_t a1, uint64_t (***a2)(_QWORD), char a3)
{
  _DWORD *result;

  result = (_DWORD *)(**a2)(a2);
  if ((_DWORD)result != 2
    || (result = __dynamic_cast(a2, (const struct __class_type_info *)&unk_24C45BCA0, (const struct __class_type_info *)&unk_24C45CA68, 0), result[16] == 2)&& (a3 & 1) == 0)
  {
    *(_BYTE *)(a1 + 1313) = 1;
  }
  return result;
}

void sub_20B9B9E80(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const void **v16;
  __CFArray *v17;
  __CFArray *v18;
  const __CFString *v19;
  uint64_t v20;
  void *__p[3];
  __CFArray *v22;

  v4 = 912;
  if (a2 == 2)
    v4 = 904;
  v5 = *(_QWORD *)(a1 + v4);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5) ^ 1;
  else
    v6 = 0;
  v7 = *(_QWORD *)(a1 + 944);
  if (v7)
    LODWORD(v7) = *(_QWORD *)(v7 + 16) != *(_QWORD *)(v7 + 8);
  if (((v6 | v7) & 1) == 0)
  {
    v8 = a1 + 80;
    v9 = *(uint64_t **)(a1 + 16);
    v10 = *(uint64_t **)(a1 + 24);
    if (v9 == v10)
      goto LABEL_15;
    v11 = 0;
    do
    {
      v12 = *v9++;
      v11 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
    }
    while (v9 != v10);
    if (!v11
      || (v13 = *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 16) != v13)
      && ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v13 - 8) + 24))(*(_QWORD *)(v13 - 8)) & 1) != 0)
    {
LABEL_15:
      v22 = 0;
      v14 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 64);
      if (!v14
        || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14) & 1) != 0
        || (v15 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 64),
            v16 = *(const void ***)(v15 + 72),
            v16 == *(const void ***)(v15 + 80))
        || !*v16)
      {
        v18 = 0;
      }
      else
      {
        v17 = (__CFArray *)__dynamic_cast(*v16, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45D698, 0);
        v18 = v17;
        if (v17)
        {
          v19 = (const __CFString *)(*(uint64_t (**)(__CFArray *))(*(_QWORD *)v17 + 232))(v17);
          (*(void (**)(void **__return_ptr, __CFArray *, _QWORD))(*(_QWORD *)v18 + 432))(__p, v18, 0);
          v18 = sub_20B8D30B4((__int16 **)__p);
          v22 = v18;
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          goto LABEL_24;
        }
      }
      v19 = 0;
LABEL_24:
      sub_20B9EBD6C(v8, v19, v18, a2);
      if (v18)
        CFRelease(v18);
      return;
    }
    v20 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 952) + 104))(*(_QWORD *)(a1 + 952));
    if (v20)
      sub_20B9EBD44(a1 + 80, (_QWORD *)(v20 + 32), a2);
  }
}

void sub_20B9BA064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, const void *a12)
{
  if (__p)
    operator delete(__p);
  sub_20B88B74C(&a12, 0);
  _Unwind_Resume(a1);
}

__CFArray *sub_20B9BA0A0(uint64_t a1, const __CFArray *a2, uint64_t a3)
{
  const __CFString *v6;
  uint64_t *v7;
  _BYTE *v8;
  __CFArray *v9;
  __CFArray *v10;
  void *__p;
  _BYTE *v13;

  v6 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 56))(a3);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a3 + 432))(&__p, a3, 1);
  v7 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 560))(a3);
  v8 = __p;
  if (!v6 || __p == v13 || (v13 - (_BYTE *)__p) >> 1 != (v7[1] - *v7) >> 2)
  {
    v10 = 0;
    if (!__p)
      return v10;
LABEL_9:
    v13 = v8;
    operator delete(v8);
    return v10;
  }
  v9 = sub_20B8D30B4((__int16 **)&__p);
  v10 = sub_20B9EC3E4(a1 + 80, a2, v6, v9, v7);
  if (v9)
    CFRelease(v9);
  v8 = __p;
  if (__p)
    goto LABEL_9;
  return v10;
}

void sub_20B9BA1A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  sub_20B88B74C((const void **)&a9, 0);
  if (__p)
  {
    a11 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_20B9BA1D8(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int16 *v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  void *__p;
  void *v44;

  *(_BYTE *)(a1 + 1312) = 0;
  sub_20B9A9CB4(*(_QWORD **)(a1 + 48));
  v2 = *(_QWORD *)(a1 + 576);
  (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 952) + 16))(*(_QWORD *)(a1 + 952), v2);
  v3 = *(_QWORD *)(a1 + 1280);
  if (v3 != 0xFFFF && v2 <= v3)
  {
    v5 = v2 - 1;
    if (!v2)
      v5 = 0xFFFFLL;
    *(_QWORD *)(a1 + 1280) = v5;
  }
  v6 = *(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88);
  if (v6)
  {
    v7 = *(uint64_t **)(a1 + 16);
    v8 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 24);
    v9 = ((v6 << 29) - 0x100000000) >> 32;
    v10 = *(uint64_t **)(a1 + 24);
    if (v7 == v10)
    {
      v11 = 0;
    }
    else
    {
      v11 = 0;
      do
      {
        v12 = *v7++;
        v11 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
      }
      while (v7 != v10);
    }
    v13 = v11 - 1;
    *(_BYTE *)(a1 + 1288) = v9 == v13;
    *(_BYTE *)(a1 + 1152) = 1;
    CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 1160));
    *(_BYTE *)(a1 + 1104) = 1;
    CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 1112));
    if ((v8 & 0x800) != 0)
    {
      sub_20B9BAC18(a1, *(_QWORD *)(a1 + 48) + 72, v9, 1);
    }
    else
    {
      if (v2 <= v9)
      {
        v14 = a1 + 80;
        v41 = v13;
        v42 = v9;
        do
        {
          v15 = *(_QWORD *)(a1 + 24);
          if (*(_QWORD *)(a1 + 16) == v15
            || !(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v15 - 8) + 24))(*(_QWORD *)(v15 - 8)))
          {
            v18 = v9 == v13 && v2 == v9;
            *(_BYTE *)(a1 + 1288) = v18;
            sub_20B9A8844(*(_QWORD **)(a1 + 48), (const void **)&__p);
            sub_20B9BAC18(a1, (uint64_t)&__p, v2, 1);
            if (__p)
            {
              v44 = __p;
              operator delete(__p);
            }
            sub_20B9A8664(*(_QWORD **)(a1 + 48), (const void **)&__p);
            sub_20B9BAC18(a1, (uint64_t)&__p, v2, 0);
            if (__p)
            {
              v44 = __p;
              operator delete(__p);
            }
            v16 = v2 + 1;
            if ((v2 & 0x80000000) == 0)
            {
              v19 = *(_QWORD *)(a1 + 88);
              if (v2 < (unint64_t)((*(_QWORD *)(a1 + 96) - v19) >> 3))
              {
                v21 = *(_QWORD *)(v19 + 8 * v2) + 104;
                v20 = *(uint64_t **)v21;
                if (*(_QWORD *)(v21 + 8) != *(_QWORD *)v21)
                {
                  v22 = *v20;
                  if (*v20)
                  {
                    v23 = 1;
                    do
                    {
                      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v22 + 64))(v22) != 7)
                      {
                        v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 64))(v22);
                        if (v24 == 6)
                          v25 = 5;
                        else
                          v25 = 4;
                        v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 32))(v22);
                        v27 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 112))(v22);
                        v28 = *(uint64_t **)(*(_QWORD *)(a1 + 8) + 48);
                        LODWORD(__p) = 0;
                        sub_20B9689F0(v28, *v27, v27[1], &__p);
                        v29 = __p;
                        if (!(_DWORD)__p)
                        {
                          v30 = v27[1];
                          if (v30)
                          {
                            v31 = (unsigned __int16 *)*v27;
                            while (1)
                            {
                              v33 = *v31++;
                              v32 = v33;
                              if (v33 > 0xFFuLL || (*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v32 + 60) & 0x400) == 0)
                                break;
                              if (!--v30)
                                goto LABEL_47;
                            }
                            if (v24 == 6)
                              v29 = 502;
                            else
                              v29 = 0;
                          }
                          else
                          {
LABEL_47:
                            v29 = 501;
                          }
                        }
                        v34 = *(_QWORD *)(a1 + 952);
                        v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 104))(v22);
                        v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 112))(v22);
                        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))(*(_QWORD *)v34 + 48))(v34, v35, v26, v25, v36, v29, v2 + 1);
                        v14 = a1 + 80;
                      }
                      v22 = sub_20B9E27E0(v14, v2, v23++);
                    }
                    while (v22);
                    v13 = v41;
                    v9 = v42;
                  }
                  else
                  {
                    v9 = v42;
                  }
                }
              }
            }
          }
          else
          {
            *(_BYTE *)(a1 + 1288) = v2 == v9;
            *(_BYTE *)(*(_QWORD *)(a1 + 8) + 80) = v2 == v9;
            sub_20B9A8844(*(_QWORD **)(a1 + 48), (const void **)&__p);
            sub_20B9BAC18(a1, (uint64_t)&__p, v2, 1);
            if (__p)
            {
              v44 = __p;
              operator delete(__p);
            }
            v16 = v2 + 1;
          }
          v2 = v16;
        }
        while (v16 <= v9);
      }
      v37 = *(_QWORD *)(a1 + 8);
      if (!*(_WORD *)(v37 + 98) && *(_BYTE *)(a1 + 1288) && (*(_BYTE *)(v37 + 27) & 8) == 0)
      {
        v38 = *(_QWORD *)(a1 + 16) != *(_QWORD *)(a1 + 24) && *(_BYTE *)(a1 + 40) == 0;
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 952) + 96))(*(_QWORD *)(a1 + 952));
        if (!v38)
        {
          sub_20B9BAE28(a1);
          sub_20B9BAFA8(a1);
        }
        v39 = *(_QWORD **)(a1 + 16);
        v40 = *(_QWORD **)(a1 + 24);
        while (v39 != v40)
        {
          if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v39 + 56))(*v39) == 1)
            goto LABEL_71;
          ++v39;
        }
        sub_20B9BB218(a1);
        sub_20B9BB984(a1, (uint64_t *)(*(_QWORD *)(a1 + 48) + 72));
LABEL_71:
        if (!v38)
          sub_20B9BBE28(a1);
      }
    }
  }
}

void sub_20B9BA650(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B9BA674(uint64_t a1)
{
  *(_WORD *)(a1 + 1312) = 0;
  sub_20B940FF4((_QWORD *)(a1 + 16));
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 952) + 16))(*(_QWORD *)(a1 + 952), 0);
  sub_20B9C2DAC(a1 + 960, *(_QWORD **)(a1 + 960));
  *(_QWORD *)(a1 + 1000) = 0;
  *(_QWORD *)(a1 + 992) = 0;
  sub_20B95515C(a1 + 1008);
  sub_20B9E1A10(a1 + 80, 0, 1);
  *(_DWORD *)(a1 + 1072) = 0;
  *(_QWORD *)(a1 + 1088) = *(_QWORD *)(a1 + 1080);
  *(_BYTE *)(a1 + 1128) = 1;
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 1136));
  *(_BYTE *)(a1 + 1152) = 1;
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 1160));
  *(_BYTE *)(a1 + 1176) = 1;
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 1184));
  *(_BYTE *)(a1 + 1200) = 1;
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 1208));
  sub_20B8292CC(a1 + 1248, *(_QWORD **)(a1 + 1256));
  *(_QWORD *)(a1 + 1248) = a1 + 1256;
  *(_QWORD *)(a1 + 1264) = 0;
  *(_QWORD *)(a1 + 1256) = 0;
  *(_BYTE *)(a1 + 1224) = 1;
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 1232));
  *(_BYTE *)(a1 + 1104) = 1;
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 1112));
  *(_QWORD *)(a1 + 1280) = 0xFFFFLL;
  *(_BYTE *)(a1 + 616) = 1;
  sub_20B9670A4(*(uint64_t **)(a1 + 1320));
  CFSetRemoveAllValues(*(CFMutableSetRef *)(a1 + 1296));
}

void sub_20B9BA770(uint64_t a1, unsigned int a2, int a3, id *a4)
{
  sub_20B9B3800(*(_QWORD *)(a1 + 8), a2, a3, (uint64_t)a4);
  sub_20B9A83F4(*(_QWORD *)(a1 + 48));
  sub_20B9E1C48((id ***)(a1 + 80), *(_DWORD **)(a1 + 8), a4);
  sub_20B96756C(*(_QWORD *)(a1 + 1320), (uint64_t)a4);
}

uint64_t sub_20B9BA7B8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 *v17;
  const void *v18;
  uint64_t v19;
  _QWORD v21[6];
  _QWORD v22[3];
  char v23;
  _QWORD v24[3];
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (!a2)
    return 1;
  v7 = *a3;
  v8 = *a4;
  if (*a3)
  {
    v9 = *(_QWORD *)(v7 + 8);
    if (!v8)
      return 1;
  }
  else
  {
    v9 = 0;
    if (!v8)
      return 1;
  }
  result = 1;
  if (v9)
  {
    v11 = *(_QWORD *)(v8 + 8);
    if (v11)
    {
      if ((*(_BYTE *)(v7 + 41) & 1) != 0 && (*(_BYTE *)(v8 + 41) & 1) != 0)
      {
        if (v9 >= 2)
          v12 = 2;
        else
          v12 = v9;
        v24[0] = 0;
        v24[1] = v24;
        if (v11 >= 2)
          v13 = 2;
        else
          v13 = v11;
        v24[2] = 0x2000000000;
        v25 = 0;
        v22[0] = 0;
        v22[1] = v22;
        v22[2] = 0x2000000000;
        v23 = 0;
        v21[0] = MEMORY[0x24BDAC760];
        v21[1] = 0x40000000;
        v21[2] = sub_20B9BFE84;
        v21[3] = &unk_24C4A0108;
        v21[4] = v22;
        v21[5] = v24;
        if (sub_20B9BFE84((uint64_t)v21, v13, *(_QWORD *)(v8 + 32)))
        {
          _Block_object_dispose(v22, 8);
          _Block_object_dispose(v24, 8);
          return 1;
        }
        v14 = sub_20B9BFE84((uint64_t)v21, v12, *(_QWORD *)(v7 + 32) + 4 * *(_QWORD *)(v7 + 8) - 4 * v12);
        _Block_object_dispose(v22, 8);
        _Block_object_dispose(v24, 8);
        if (v14)
          return 1;
        MEMORY[0x24BDAC7A8](v15);
        v17 = (unsigned __int16 *)((char *)&v21[-1] - v16);
        memcpy((char *)&v21[-1] - v16, v18, 2 * v12);
        memcpy(&v17[v12], *(const void **)(v8 + 16), 2 * v13);
        if (v13 == 1)
        {
          if (a4[2] + a2 == (uint64_t)(*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 3)
            v19 = a4[2];
          else
            v19 = 0;
        }
        else
        {
          v19 = 0;
        }
        return sub_20B9ECCA4(a1 + 80, a2 - v12, v17, v13 + v12, v19);
      }
    }
  }
  return result;
}

uint64_t sub_20B9BA9EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[5];

  v4 = a1 + 1152;
  *(_BYTE *)(a1 + 1152) = 1;
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 1160));
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 296);
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 0x40000000;
  v7[2] = sub_20B9BAA78;
  v7[3] = &unk_24C46C6D8;
  v7[4] = a1;
  sub_20B9B53D8(v5, a2, (uint64_t)v7);
  return v4;
}

void sub_20B9BAA78(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const __CFString *v4;
  CFIndex Length;
  _DWORD *v6;
  uint64_t v7;
  CFNumberRef v8;
  _DWORD *v9;
  char *v10;
  char *v11;
  void **valuePtr;
  char v13;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = CFStringCreateWithCharacters(0, *(const UniChar **)(a2 + 16), *(_QWORD *)(a2 + 24));
  Length = CFStringGetLength(v4);
  v9 = 0;
  v10 = 0;
  v11 = 0;
  valuePtr = (void **)&v9;
  v13 = 0;
  v6 = operator new(0x30uLL);
  v10 = (char *)(v6 + 12);
  v11 = (char *)(v6 + 12);
  *(_QWORD *)v6 = &off_24C467C40;
  v6[2] = 0;
  *((_QWORD *)v6 + 2) = 0;
  *((_QWORD *)v6 + 3) = Length;
  *((_QWORD *)v6 + 4) = 64;
  *((_QWORD *)v6 + 5) = 0xFFFFFFFFLL;
  v9 = v6;
  v7 = operator new();
  sub_20B8A0098(v7, 5, 0x200000, v4, (uint64_t)&v9);
  valuePtr = (void **)*(unsigned __int16 *)(a2 + 32);
  v8 = CFNumberCreate(0, kCFNumberCFIndexType, &valuePtr);
  sub_20B88AE28((const void **)(v7 + 72), v8);
  sub_20B8A0398(v7, *(char **)(a2 + 40), *(_QWORD *)(a2 + 48));
  sub_20B9B8EEC(v3 + 1152, v7);
  valuePtr = (void **)&v9;
  sub_20B8737E0(&valuePtr);
  if (v4)
    CFRelease(v4);
}

void sub_20B9BAB9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  const void *v14;

  a14 = (void **)&a9;
  sub_20B8737E0(&a14);
  if (v14)
    CFRelease(v14);
  _Unwind_Resume(a1);
}

void sub_20B9BAC18(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  _DWORD *v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  _QWORD v22[6];
  char v23;
  void *__p;
  void *v25;
  _QWORD *v26;

  v8 = *(_QWORD *)(a1 + 8);
  if (!*(_WORD *)(v8 + 98))
  {
    v15 = *(_QWORD *)(v8 + 64);
    if (!v15
      || (v16 = *(_QWORD *)(v15 + 8)) == 0
      || sub_20B88826C(v16, kMecabraContextOptionPrivateMode) != (const void *)*MEMORY[0x24BDBD270])
    {
      __p = 0;
      v25 = 0;
      v26 = 0;
      sub_20B9A9E4C(&__p, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
      goto LABEL_19;
    }
    v8 = *(_QWORD *)(a1 + 8);
  }
  v9 = *(_QWORD *)(v8 + 64);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (v10)
    {
      if (sub_20B88826C(v10, kMecabraContextOptionPrivateMode) == (const void *)*MEMORY[0x24BDBD270])
      {
        sub_20B9BC624(&__p, *(const void **)a2, *(_QWORD *)(a2 + 8));
        goto LABEL_19;
      }
      v8 = *(_QWORD *)(a1 + 8);
    }
  }
  if (!*(_WORD *)(v8 + 98))
    goto LABEL_13;
  v11 = *(_QWORD **)a2;
  v12 = *(_QWORD **)(a2 + 8);
  if (*(_QWORD **)a2 == v12)
    goto LABEL_13;
  while ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v11 + 16))(*v11) != 17)
  {
    if (++v11 == v12)
    {
      v11 = v12;
      break;
    }
  }
  if (v11 == *(_QWORD **)(a2 + 8))
  {
LABEL_13:
    __p = 0;
    v25 = 0;
    v26 = 0;
  }
  else
  {
    v13 = *v11;
    v14 = operator new(8uLL);
    __p = v14;
    *v14 = v13;
    v25 = v14 + 1;
    v26 = v14 + 1;
  }
LABEL_19:
  v17 = __p;
  if (__p != v25)
  {
    v18 = *(_DWORD **)(a1 + 8);
    v19 = v18[6];
    if ((v19 & 0x800) != 0)
      v20 = (*v18 == 5) << 16;
    else
      v20 = 0;
    v21 = *(_QWORD *)(a1 + 1064);
    v22[0] = MEMORY[0x24BDAC760];
    v22[1] = 0x40000000;
    v22[2] = sub_20B9BC824;
    v22[3] = &unk_24C49FEA0;
    v23 = a4;
    v22[4] = a1;
    v22[5] = &__p;
    sub_20B9B1570(v21, (uint64_t *)&__p, a3, a4 & 0xFEFFFFFF | (((v19 >> 14) & 1) << 24) | v20, (uint64_t)v22);
    v17 = __p;
  }
  if (v17)
  {
    v25 = v17;
    operator delete(v17);
  }
}

void sub_20B9BAE0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B9BAE28(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *i;
  char *v8;
  void *__p;
  void *v10;
  uint64_t v11;

  *(_BYTE *)(a1 + 1104) = 1;
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 1112));
  if (sub_20B9BE224(a1))
  {
    v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 952) + 104))(*(_QWORD *)(a1 + 952));
    if (!*(_BYTE *)(v2 + 9))
    {
      v3 = v2;
      sub_20B9BE2D4((_QWORD *)a1, (_QWORD *)(v2 + 32), 0);
      if (!CFArrayGetCount(*(CFArrayRef *)(a1 + 1112)))
      {
        if (*(_BYTE *)(v3 + 8))
        {
          __p = 0;
          v10 = 0;
          v11 = 0;
          v4 = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD, void *))(**(_QWORD **)(a1 + 952) + 72))(*(_QWORD *)(a1 + 952), 0, &unk_24C4A00B8);
          if (v4)
          {
            do
            {
              if ((*(_DWORD *)(*v4 + 8) - 1) >= 2)
              {
                v5 = **(_QWORD **)(*v4 + 16);
                if (!v5)
                {
                  v10 = __p;
                  goto LABEL_17;
                }
                v6 = *(_QWORD *)(v5 + 8);
                for (i = (char *)(*(_QWORD *)(v5 + 16) + 2 * v6 - 2); (--v6 & 0x8000000000000000) == 0; i = v8)
                {
                  v8 = i - 2;
                  sub_20B8B473C((uint64_t)&__p, (char *)__p, i);
                }
              }
              v4 = (_QWORD *)v4[1];
            }
            while (v4);
            if (__p != v10)
              goto LABEL_18;
          }
LABEL_17:
          sub_20B9E2A10(a1 + 80, (uint64_t *)(v3 + 56), (char **)&__p);
LABEL_18:
          sub_20B9BE2D4((_QWORD *)a1, &__p, 1);
          if (__p)
          {
            v10 = __p;
            operator delete(__p);
          }
        }
      }
    }
  }
}

void sub_20B9BAF88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B9BAFA8(uint64_t a1)
{
  _DWORD *v1;
  int v2;
  uint64_t v4;
  uint64_t v5;
  __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  char v15;
  int v16;
  _QWORD *v17;
  _QWORD v18[5];
  void *v19;
  void *v20;
  uint64_t v21;
  BOOL v22;
  void *__p;
  void *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;

  v1 = *(_DWORD **)(a1 + 8);
  v2 = v1[6];
  if ((v2 & 0x8014800) != 0)
    return;
  if (*v1 == 5)
  {
    if ((v2 & 0x400000) == 0)
      return;
    goto LABEL_26;
  }
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 952) + 104))(*(_QWORD *)(a1 + 952));
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 952) + 104))(*(_QWORD *)(a1 + 952));
  v6 = *(__int16 **)(v5 + 32);
  v7 = *(_QWORD *)(v5 + 40);
  v8 = v7 - (_QWORD)v6;
  if (v7 - (_QWORD)v6 != 2)
  {
    if ((unint64_t)v8 > 3)
      goto LABEL_11;
    goto LABEL_10;
  }
  if (*v6 != -1)
  {
LABEL_10:
    if (!*(_BYTE *)(v4 + 8))
      return;
LABEL_11:
    v24 = 0;
    v25 = 0;
    v9 = v8 >> 1;
    __p = 0;
    sub_20B87ACC8(&__p, v6, v7, v8 >> 1);
    sub_20B9E2834(a1 + 80, &__p, v9, &v26);
    if (__p)
    {
      v24 = __p;
      operator delete(__p);
    }
    v10 = v26;
    v11 = v27;
    if ((unint64_t)((char *)v27 - (char *)v26) < 0x11)
      goto LABEL_23;
    v12 = v27 - v26;
    if (v26 == v27)
    {
      v13 = 0;
    }
    else
    {
      v13 = 0;
      v14 = v26;
      do
      {
        if ((*(_BYTE *)(*(_QWORD *)(*v14 + 8) + 8) & 1) != 0 || sub_20B9EF850(*v14))
          ++v13;
        ++v14;
      }
      while (v14 != v11);
    }
    if ((double)(unint64_t)v12 * 0.5 >= (double)v13)
    {
      v15 = 0;
      if (!v10)
      {
LABEL_25:
        if ((v15 & 1) == 0)
          return;
        goto LABEL_26;
      }
    }
    else
    {
LABEL_23:
      v15 = 1;
      if (!v10)
        goto LABEL_25;
    }
    v27 = v10;
    operator delete(v10);
    goto LABEL_25;
  }
LABEL_26:
  v16 = **(_DWORD **)(a1 + 8);
  sub_20B9A8700(*(_QWORD *)(a1 + 48), (void **)&v26);
  v17 = *(_QWORD **)(a1 + 1064);
  v18[0] = MEMORY[0x24BDAC760];
  v18[1] = 1174405120;
  v18[2] = sub_20B9BE8F4;
  v18[3] = &unk_24C46C998;
  v18[4] = a1;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  sub_20B9A9E4C(&v19, v26, (uint64_t)v27, v27 - v26);
  v22 = v16 == 5;
  sub_20B9B24D4(v17, &v26, v16 == 5, (uint64_t)v18);
  if (v19)
  {
    v20 = v19;
    operator delete(v19);
  }
  if (v26)
  {
    v27 = v26;
    operator delete(v26);
  }
}

void sub_20B9BB1D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B9BB218(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  const __CFString *v4;
  const __CFString *v5;
  const char *v6;
  uint64_t v7;
  uint64_t Length;
  void ***v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  const __CFSet *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  int v17;
  CFIndex v18;
  CFIndex v19;
  _QWORD *v20;
  _QWORD *v21;
  const void *v22;
  double v23;
  const __CFSet *v24;
  CFIndex v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  _BOOL4 v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  CFIndex Count;
  CFMutableSetRef v33;
  const void *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  const __CFString *v38;
  _BYTE *v39;
  _QWORD v40[13];
  _QWORD v41[5];
  _QWORD v42[5];
  _QWORD v43[3];
  char v44;
  _QWORD v45[3];
  char v46;
  _QWORD v47[6];
  std::__shared_weak_count *v48;
  _QWORD v49[4];
  _QWORD v50[4];
  _QWORD v51[4];
  _QWORD v52[4];
  _QWORD v53[3];
  char v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  _QWORD v57[3];
  void *__p;
  void *v59;
  _QWORD v60[3];
  __int128 v61;
  __int128 v62;
  CFMutableSetRef theSet;
  void *v64;
  char *v65;
  uint64_t v66;
  UniChar buffer[64];
  UniChar v68[64];
  uint64_t v69;
  CFRange v70;
  CFRange v71;

  v69 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 8) + 24) & 4) != 0)
    return;
  v53[0] = 0;
  v53[1] = v53;
  v53[2] = 0x2000000000;
  v54 = 1;
  v52[0] = 0;
  v52[1] = v52;
  v52[2] = 0x2000000000;
  v52[3] = 0;
  v51[0] = 0;
  v51[1] = v51;
  v51[2] = 0x2000000000;
  v51[3] = 0;
  v50[0] = 0;
  v50[1] = v50;
  v50[2] = 0x2000000000;
  v50[3] = 0;
  v49[0] = 0;
  v49[1] = v49;
  v49[2] = 0x2000000000;
  v49[3] = 0;
  v47[0] = 0;
  v47[1] = v47;
  v47[2] = 0x3802000000;
  v47[3] = sub_20B9BD418;
  v47[4] = sub_20B9BD428;
  v47[5] = 0;
  v48 = 0;
  v45[0] = 0;
  v45[1] = v45;
  v45[2] = 0x2000000000;
  v46 = 0;
  v43[0] = 0;
  v43[1] = v43;
  v43[2] = 0x2000000000;
  v44 = 1;
  v2 = *(_QWORD *)(a1 + 952);
  v41[4] = a1;
  v42[0] = MEMORY[0x24BDAC760];
  v42[1] = 0x40000000;
  v42[2] = sub_20B9BDBA8;
  v42[3] = &unk_24C49FF10;
  v42[4] = a1;
  v40[12] = a1;
  v41[0] = MEMORY[0x24BDAC760];
  v41[1] = 0x40000000;
  v41[2] = sub_20B9BDBB8;
  v41[3] = &unk_24C49FF30;
  v40[0] = MEMORY[0x24BDAC760];
  v40[1] = 0x40000000;
  v40[2] = sub_20B9BDBC8;
  v40[3] = &unk_24C49FF58;
  v40[4] = v53;
  v40[5] = v51;
  v40[6] = v52;
  v40[7] = v50;
  v40[8] = v49;
  v40[9] = v43;
  v40[10] = v45;
  v40[11] = v47;
  (*(void (**)(uint64_t, uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v2 + 24))(v2, a1 + 1248, v42, v41, v40);
  v3 = *(_QWORD *)(a1 + 24);
  if (*(_QWORD *)(a1 + 16) != v3)
  {
    if (*(_BYTE *)(a1 + 40))
    {
      v4 = (const __CFString *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 - 8) + 48))(*(_QWORD *)(v3 - 8));
      v5 = v4;
      if (v4)
      {
        Length = CFStringGetLength(v4);
        v9 = *(void ****)(a1 + 624);
        if (v9)
        {
          v10 = (void *)objc_msgSend_prefixes(**v9, v6, v7);
          sub_20BA3064C(v10, v11, v12, &v64);
        }
        else
        {
          v65 = 0;
          v64 = 0;
          v66 = 0;
        }
        theSet = CFSetCreateMutable(0, 0, MEMORY[0x24BDBD6B8]);
        v13 = *(const __CFSet **)(a1 + 1296);
        v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 952) + 104))(*(_QWORD *)(a1 + 952));
        *(_BYTE *)(a1 + 1200) = 1;
        CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 1208));
        *(_BYTE *)(a1 + 1224) = 1;
        CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 1232));
        v39 = (_BYTE *)(a1 + 1200);
        v15 = (char *)v64;
        v16 = v65;
        if (v64 != v65)
        {
          v17 = 0;
          v38 = v5;
          do
          {
            v18 = CFStringGetLength(*((CFStringRef *)v15 + 2));
            v19 = v18;
            if (v18 <= 64 && Length <= 64)
            {
              v21 = *(_QWORD **)(v14 + 56);
              v20 = *(_QWORD **)(v14 + 64);
              if (v21 != v20)
              {
                while (*v21 != *((_QWORD *)v15 + 1))
                {
                  if (++v21 == v20)
                  {
                    v21 = *(_QWORD **)(v14 + 64);
                    break;
                  }
                }
              }
              v22 = (const void *)*((_QWORD *)v15 + 2);
              if (v21 == v20)
              {
                v17 |= CFSetContainsValue(v13, v22) != 0;
              }
              else if (v18 == Length)
              {
                v23 = sub_20B9BF474(a1, (uint64_t)v22);
                sub_20B9BF524(a1, v5, v5, *((CFStringRef *)v15 + 2), v23);
                *(_BYTE *)(a1 + 1312) = v23
                                      + *(double *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 952) + 104))(*(_QWORD *)(a1 + 952))
                                                  + 16) > 1.0;
              }
              else if (sub_20B9BF474(a1, (uint64_t)v22) >= -8.5)
              {
                v70.location = 0;
                v70.length = Length;
                CFStringGetCharacters(v5, v70, buffer);
                v71.location = 0;
                v71.length = v19;
                CFStringGetCharacters(*((CFStringRef *)v15 + 2), v71, v68);
                v24 = v13;
                v25 = *((_QWORD *)v15 + 1);
                *(_QWORD *)&v62 = v68;
                *((_QWORD *)&v62 + 1) = v19;
                v60[0] = 0;
                v60[1] = CFStringCreateWithCharacters(0, buffer, v25);
                v60[2] = v25;
                v61 = xmmword_20BA56960;
                sub_20B9DDF14((uint64_t)v57, 5, &v62, 0, (uint64_t)v60);
                v26 = operator new();
                sub_20B9C7DDC(v26, (uint64_t)v57, 0, *(int **)(a1 + 8), a1 + 16);
                v55 = v26;
                v27 = (std::__shared_weak_count *)operator new();
                v27->__vftable = (std::__shared_weak_count_vtbl *)&off_24C46BC20;
                v27->__shared_owners_ = 0;
                v27->__shared_weak_owners_ = 0;
                v27[1].__vftable = (std::__shared_weak_count_vtbl *)v26;
                v56 = v27;
                sub_20B9B91A0((uint64_t)v39, v57, &v55, 128, 13, a1 + 16);
                CFSetAddValue(theSet, *((const void **)v15 + 2));
                v28 = CFSetContainsValue(v24, v24) == 0;
                v29 = v56;
                if (v56)
                {
                  p_shared_owners = (unint64_t *)&v56->__shared_owners_;
                  do
                    v31 = __ldaxr(p_shared_owners);
                  while (__stlxr(v31 - 1, p_shared_owners));
                  if (!v31)
                  {
                    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
                    std::__shared_weak_count::__release_weak(v29);
                  }
                }
                v57[0] = off_24C4693E0;
                if (__p)
                {
                  v59 = __p;
                  operator delete(__p);
                }
                v17 |= v28;
                sub_20B9F8DD0((uint64_t)v60);
                v13 = v24;
                v5 = v38;
              }
            }
            v15 += 72;
          }
          while (v15 != v16);
          if ((v17 & 1) != 0)
            goto LABEL_34;
        }
        Count = CFSetGetCount(v13);
        if (Count == CFArrayGetCount(*(CFArrayRef *)(a1 + 1208)))
        {
          *v39 = 0;
          v33 = theSet;
          if (!theSet)
          {
LABEL_38:
            if (v64)
            {
              v65 = (char *)v64;
              operator delete(v64);
            }
            goto LABEL_40;
          }
        }
        else
        {
LABEL_34:
          v34 = *(const void **)(a1 + 1296);
          if (v34)
            CFRelease(v34);
          v33 = theSet;
          *(_QWORD *)(a1 + 1296) = CFRetain(theSet);
          if (!v33)
            goto LABEL_38;
        }
        CFRelease(v33);
        goto LABEL_38;
      }
    }
  }
LABEL_40:
  _Block_object_dispose(v43, 8);
  _Block_object_dispose(v45, 8);
  _Block_object_dispose(v47, 8);
  v35 = v48;
  if (v48)
  {
    v36 = (unint64_t *)&v48->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  _Block_object_dispose(v49, 8);
  _Block_object_dispose(v50, 8);
  _Block_object_dispose(v51, 8);
  _Block_object_dispose(v52, 8);
  _Block_object_dispose(v53, 8);
}

void sub_20B9BB834(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20B854468(a1);
  _Unwind_Resume(a1);
}

void sub_20B9BB984(uint64_t a1, uint64_t *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  char v10;
  char v11;
  unsigned __int16 *v12;
  char *v13;
  unsigned __int16 v14;
  char *v15;
  unsigned __int16 v16;
  unsigned int v17;
  BOOL v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned __int16 *v28;
  unsigned __int16 *v29;
  unsigned __int16 *v30;
  char v31;
  int64_t v32;
  _WORD *v33;
  unint64_t v34;
  unsigned __int16 *v35;
  int64_t v36;
  uint64_t v37;
  _WORD *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  __int16 v47;
  unsigned __int16 *v48;
  unint64_t v49;
  unsigned __int16 *v50;
  unsigned __int16 *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  __int16 v56;
  _QWORD v57[7];
  void *__p;
  unsigned __int16 *v59;
  uint64_t v60;

  v4 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 24);
  __p = 0;
  v59 = 0;
  v60 = 0;
  sub_20B87ACC8(&__p, *(const void **)(a1 + 664), *(_QWORD *)(a1 + 672), (uint64_t)(*(_QWORD *)(a1 + 672) - *(_QWORD *)(a1 + 664)) >> 1);
  v5 = *(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88);
  *(_BYTE *)(a1 + 616) = v5 == 8;
  v56 = v4;
  v6 = v4 & 0x4000;
  v8 = __p;
  v7 = v59;
  v9 = *(_QWORD *)(a1 + 24);
  if (*(_QWORD *)(a1 + 16) == v9)
  {
    if (!(_DWORD)v6)
      goto LABEL_20;
    goto LABEL_9;
  }
  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 - 8) + 24))(*(_QWORD *)(v9 - 8));
  if ((_DWORD)v6)
    v11 = v10;
  else
    v11 = 1;
  if ((v11 & 1) == 0)
  {
LABEL_9:
    if ((v56 & 0x8000) == 0 && v7 != v8)
    {
      v12 = (unsigned __int16 *)__p;
      if (__p != v59)
      {
        v13 = (char *)__p + 2;
        if ((char *)__p + 2 != (char *)v59)
        {
          v14 = *(_WORD *)__p;
          v15 = (char *)__p + 2;
          do
          {
            v17 = *(unsigned __int16 *)v15;
            v15 += 2;
            v16 = v17;
            v18 = v14 >= v17;
            if (v14 <= v17)
              v14 = v16;
            if (!v18)
              v12 = (unsigned __int16 *)v13;
            v13 = v15;
          }
          while (v15 != (char *)v59);
        }
      }
      if (v5 >> 3 <= (unint64_t)*v12 + 2)
        goto LABEL_24;
    }
    goto LABEL_20;
  }
  if ((v10 & 1) != 0)
  {
LABEL_24:
    v23 = 1;
    goto LABEL_25;
  }
LABEL_20:
  v19 = v7 - v8;
  v20 = *(_QWORD *)(a1 + 1088);
  v21 = *(_QWORD *)(a1 + 1080);
  if (v7 - v8 != v20 - v21 || (v56 & 4) != 0)
    goto LABEL_24;
  v35 = (unsigned __int16 *)__p;
  if (__p == v59)
  {
    v23 = 0;
  }
  else
  {
    do
    {
      v36 = v19;
      if (v21 != v20)
      {
        v36 = 0;
        while (*(unsigned __int16 *)(v21 + v36) != *v35)
        {
          v36 += 2;
          if (v21 + v36 == v20)
          {
            v36 = v19;
            break;
          }
        }
      }
      v37 = v21 + v36;
      v23 = v37 == v20;
      if (v37 == v20)
        break;
      ++v35;
    }
    while (v35 != v59);
  }
LABEL_25:
  v24 = *(_QWORD *)(a1 + 24);
  if (*(_QWORD *)(a1 + 16) != v24
    && ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v24 - 8) + 24))(*(_QWORD *)(v24 - 8)) & 1) != 0
    || (v56 & 0x2000) != 0
    || **(_DWORD **)(a1 + 8) == 5
    || (v25 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 952) + 104))(*(_QWORD *)(a1 + 952)),
        v26 = *(_QWORD *)(v25 + 64),
        v26 == *(_QWORD *)(v25 + 56)))
  {
    if (!v23)
      goto LABEL_84;
    v28 = *(unsigned __int16 **)(a1 + 1080);
    LOWORD(v27) = -1;
    goto LABEL_41;
  }
  v27 = *(_DWORD *)(v26 - 8) - 1;
  v28 = *(unsigned __int16 **)(a1 + 1080);
  v29 = *(unsigned __int16 **)(a1 + 1088);
  v30 = v28;
  if (v28 != v29)
  {
    while (*v30 != (unsigned __int16)v27)
    {
      if (++v30 == v29)
      {
        v30 = *(unsigned __int16 **)(a1 + 1088);
        break;
      }
    }
  }
  v31 = v30 == v29 || v23;
  if ((v31 & 1) != 0)
  {
LABEL_41:
    v32 = a1 + 1080;
    *(_QWORD *)(a1 + 1088) = v28;
    if ((void **)(a1 + 1080) != &__p)
      sub_20B886194((char *)(a1 + 1080), (char *)__p, (uint64_t)v59, ((char *)v59 - (_BYTE *)__p) >> 1);
    if ((_WORD)v27 != 0xFFFF)
    {
      v33 = *(_WORD **)(a1 + 1088);
      v34 = *(_QWORD *)(a1 + 1096);
      if ((unint64_t)v33 >= v34)
      {
        v38 = *(_WORD **)v32;
        v39 = (uint64_t)v33 - *(_QWORD *)v32;
        if (v39 <= -3)
          sub_20B80CDD8();
        v40 = v39 >> 1;
        v41 = v34 - (_QWORD)v38;
        if (v41 <= (v39 >> 1) + 1)
          v42 = v40 + 1;
        else
          v42 = v41;
        if (v41 >= 0x7FFFFFFFFFFFFFFELL)
          v43 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v43 = v42;
        if (v43)
        {
          v44 = (char *)sub_20B80FD48(a1 + 1096, v43);
          v33 = *(_WORD **)(a1 + 1088);
          v38 = *(_WORD **)(a1 + 1080);
        }
        else
        {
          v44 = 0;
        }
        v45 = &v44[2 * v40];
        v46 = &v44[2 * v43];
        *(_WORD *)v45 = v27;
        v32 = (int64_t)(v45 + 2);
        while (v33 != v38)
        {
          v47 = *--v33;
          *((_WORD *)v45 - 1) = v47;
          v45 -= 2;
        }
        *(_QWORD *)(a1 + 1080) = v45;
        *(_QWORD *)(a1 + 1088) = v32;
        *(_QWORD *)(a1 + 1096) = v46;
        if (v38)
          operator delete(v38);
      }
      else
      {
        *v33 = v27;
        v32 = (int64_t)(v33 + 1);
      }
      *(_QWORD *)(a1 + 1088) = v32;
    }
    *(_BYTE *)(a1 + 1128) = 1;
    CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 1136));
    v48 = *(unsigned __int16 **)(a1 + 1080);
    if (*(unsigned __int16 **)(a1 + 1088) != v48)
    {
      v49 = 0xFFFFFFFFLL;
      if ((_DWORD)v6)
      {
        v32 = *(_QWORD *)(a1 + 648) - *(_QWORD *)(a1 + 640);
        if ((unint64_t)v32 >= 9)
        {
          if (sub_20B9E89E8(a1 + 80, 0, *v48 + 1))
            v49 = 0x258uLL / (v32 >> 3);
          else
            v49 = 0xFFFFFFFFLL;
        }
      }
      v50 = *(unsigned __int16 **)(a1 + 1080);
      v51 = *(unsigned __int16 **)(a1 + 1088);
      if (v50 != v51)
      {
        v52 = (v6 << 10) | 0x101;
        v53 = MEMORY[0x24BDAC760];
        do
        {
          v54 = *v50;
          if ((v56 & 4) == 0 || ((uint64_t)(*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 3) - 1 <= v54)
          {
            v55 = *(_QWORD *)(a1 + 1064);
            v57[0] = v53;
            v57[1] = 0x40000000;
            v57[2] = sub_20B9BDE30;
            v57[3] = &unk_24C49FF78;
            v57[4] = a1;
            v57[5] = a2;
            v32 = v32 & 0xFFFFFFFF00000000 | v52;
            v57[6] = v49;
            sub_20B9B1570(v55, a2, v54, v32, (uint64_t)v57);
          }
          ++v50;
        }
        while (v50 != v51);
      }
    }
  }
LABEL_84:
  *(_BYTE *)(a1 + 616) = 1;
  if (__p)
  {
    v59 = (unsigned __int16 *)__p;
    operator delete(__p);
  }
}

void sub_20B9BBDFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B9BBE28(uint64_t a1)
{
  uint64_t v2;
  const __CFString *v3;
  const __CFString *v4;
  BOOL v5;
  uint64_t v6;
  const __CFString *v7;
  uint64_t result;
  uint64_t *v9;
  __CFString *v10;
  CFStringRef v11;
  uint64_t v12;
  uint64_t *v13;
  CFStringRef v14;
  uint64_t v15;
  uint64_t *v16;
  CFStringRef v17;
  uint64_t v18;
  const void **v19;
  CFStringRef *v20;
  uint64_t *v21;
  __CFString *v22;
  CFStringRef v23;
  uint64_t v24;
  uint64_t *v25;
  CFStringRef v26;
  uint64_t v27;
  void *ValueAtIndex;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  BOOL v33;
  double v34;
  uint64_t *v35;
  __CFString *v36;
  CFStringRef v37;
  uint64_t v38;
  uint64_t *v39;
  __CFString *v40;
  CFStringRef v41;
  uint64_t v42;
  double v43;
  const void **v44;
  double v45;
  CFIndex v46;
  BOOL v47;
  uint64_t v48;
  const __CFString *v49;
  BOOL v50;
  uint64_t v51;
  const char *v52;
  uint64_t v53;
  CFStringRef v54;
  unsigned int v55;
  CFIndex Length;
  void ***v57;
  CFIndex v58;
  double v59;
  char v60;
  CFStringRef *v61;
  CFStringRef *v62;
  uint64_t v63;
  __int128 v64;
  CFStringRef theString[2];
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 8) + 25) & 0x40) == 0)
  {
    v2 = *(_QWORD *)(a1 + 24);
    if (*(_QWORD *)(a1 + 16) == v2 || !*(_BYTE *)(a1 + 40))
    {
      v4 = 0;
    }
    else
    {
      v3 = (const __CFString *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 - 8) + 48))(*(_QWORD *)(v2 - 8));
      v4 = v3;
      if (v3 && CFStringGetLength(v3) != 1)
      {
LABEL_13:
        result = sub_20B9BF9AC(a1, 1, 1);
        if (!(_DWORD)result)
          return result;
        v61 = 0;
        v62 = 0;
        v63 = 0;
        v60 = 0;
        v9 = *(uint64_t **)(a1 + 1320);
        v10 = (__CFString *)operator new(0x20uLL);
        v10->isa = &off_24C46A5B0;
        v10->info = a1;
        v10->data = (char *)&v61;
        v10->length = (uint64_t)&v60;
        theString[1] = v10;
        sub_20B966398(v9, v4, 0, 2u, (uint64_t)&v64, 2, -6.5);
        v11 = theString[1];
        if ((__int128 *)theString[1] == &v64)
        {
          v12 = 4;
          v11 = (CFStringRef)&v64;
        }
        else
        {
          if (!theString[1])
            goto LABEL_30;
          v12 = 5;
        }
        (*((void (**)(void))v11->isa + v12))();
LABEL_30:
        v19 = (const void **)v61;
        v20 = v62;
        if (v61 == v62)
        {
          if (!sub_20B9BF9AC(a1, 1, 0))
            return (uint64_t)sub_20B9BFD5C((const void ***)&v61);
          v19 = (const void **)v61;
          v20 = v62;
        }
        v60 = 0;
        if (v19 != (const void **)v20)
        {
LABEL_54:
          if (v19 != (const void **)v20)
            goto LABEL_61;
          v60 = 1;
          v35 = *(uint64_t **)(a1 + 1320);
          v36 = (__CFString *)operator new(0x20uLL);
          v36->isa = &off_24C46A5B0;
          v36->info = a1;
          v36->data = (char *)&v61;
          v36->length = (uint64_t)&v60;
          theString[1] = v36;
          sub_20B966398(v35, v4, 0, 2u, (uint64_t)&v64, 1, -8.0);
          v37 = theString[1];
          if ((__int128 *)theString[1] == &v64)
          {
            v38 = 4;
            v37 = (CFStringRef)&v64;
          }
          else
          {
            if (!theString[1])
            {
LABEL_60:
              v19 = (const void **)v61;
              v20 = v62;
LABEL_61:
              if (v19 != (const void **)v20)
                goto LABEL_68;
              v60 = 0;
              v39 = *(uint64_t **)(a1 + 1320);
              v40 = (__CFString *)operator new(0x20uLL);
              v40->isa = &off_24C46A5B0;
              v40->info = a1;
              v40->data = (char *)&v61;
              v40->length = (uint64_t)&v60;
              theString[1] = v40;
              sub_20B966398(v39, v4, 5, 1u, (uint64_t)&v64, 0, -6.5);
              v41 = theString[1];
              if ((__int128 *)theString[1] == &v64)
              {
                v42 = 4;
                v41 = (CFStringRef)&v64;
              }
              else
              {
                if (!theString[1])
                {
LABEL_67:
                  if (v61 != v62)
                    goto LABEL_68;
                  v51 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 952) + 104))(*(_QWORD *)(a1 + 952));
                  if ((*(_QWORD *)v51 < 2uLL || !*(_BYTE *)(v51 + 10))
                    && (!*(_BYTE *)(v51 + 8) && !*(_BYTE *)(v51 + 9) || *(double *)(v51 + 16) <= 9.0))
                  {
                    goto LABEL_68;
                  }
                  v54 = 0;
                  v68 = 0;
                  v66 = 0u;
                  v67 = 0u;
                  v64 = 0u;
                  *(_OWORD *)theString = 0u;
                  v55 = *(_DWORD *)(a1 + 120);
                  if (v55 > 5)
                  {
                    Length = 0;
                    goto LABEL_98;
                  }
                  Length = 0;
                  if (((1 << v55) & 0x25) != 0)
                  {
                    v57 = *(void ****)(a1 + 624);
                    if (v57)
                    {
                      sub_20BA308D0(v57, v52, v53, (uint64_t)&v64);
                      v54 = theString[0];
                      if (theString[0])
                      {
                        Length = CFStringGetLength(theString[0]);
                        goto LABEL_98;
                      }
                    }
                    else
                    {
                      v54 = 0;
                    }
                    Length = 0;
                  }
LABEL_98:
                  v58 = CFStringGetLength(v4);
                  if (Length >= 1 && Length >= v58)
                  {
                    v59 = sub_20B9BF474(a1, (uint64_t)v54);
                    sub_20B9BFC00((uint64_t *)&v61, v54, v54, 0, v59);
                  }
LABEL_68:
                  if (v61 != v62)
                  {
                    sub_20B9C0B84((uint64_t)v61, v62, 126 - 2 * __clz(((char *)v62 - (char *)v61) >> 5), 1);
                    v43 = *(double *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 952) + 104))(*(_QWORD *)(a1 + 952))
                                    + 16);
                    v44 = (const void **)v61;
                    v45 = *((double *)v61 + 3);
                    if (v19 == (const void **)v20)
                    {
                      v47 = 0;
                    }
                    else
                    {
                      v46 = CFStringGetLength(v4);
                      if (v46 == CFStringGetLength((CFStringRef)v44[1]))
                      {
LABEL_75:
                        v48 = *(_QWORD *)(a1 + 24);
                        if (*(_QWORD *)(a1 + 16) == v48 || !*(_BYTE *)(a1 + 40))
                          v49 = 0;
                        else
                          v49 = (const __CFString *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v48 - 8) + 48))(*(_QWORD *)(v48 - 8));
                        sub_20B9BF524(a1, v49, (const __CFString *)v44[1], (CFStringRef)*v44, v45);
                        if (*((_BYTE *)v44 + 16))
                          v50 = 1;
                        else
                          v50 = v45
                              + *(double *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 952) + 104))(*(_QWORD *)(a1 + 952))
                                          + 16) > 1.0;
                        *(_BYTE *)(a1 + 1312) = v50;
                        return (uint64_t)sub_20B9BFD5C((const void ***)&v61);
                      }
                      v47 = *((_BYTE *)v44 + 16) != 0;
                    }
                    if (v47 || v43 + v45 > 0.0)
                      goto LABEL_75;
                  }
                  return (uint64_t)sub_20B9BFD5C((const void ***)&v61);
                }
                v42 = 5;
              }
              (*((void (**)(void))v41->isa + v42))();
              goto LABEL_67;
            }
            v38 = 5;
          }
          (*((void (**)(void))v37->isa + v38))();
          goto LABEL_60;
        }
        v21 = *(uint64_t **)(a1 + 1320);
        v22 = (__CFString *)operator new(0x20uLL);
        v22->isa = &off_24C46A5B0;
        v22->info = a1;
        v22->data = (char *)&v61;
        v22->length = (uint64_t)&v60;
        theString[1] = v22;
        sub_20B966398(v21, v4, 0, 2u, (uint64_t)&v64, 0, -6.5);
        v23 = theString[1];
        if ((__int128 *)theString[1] == &v64)
        {
          v24 = 4;
          v23 = (CFStringRef)&v64;
        }
        else
        {
          if (!theString[1])
          {
LABEL_53:
            v19 = (const void **)v61;
            v20 = v62;
            goto LABEL_54;
          }
          v24 = 5;
        }
        (*((void (**)(void))v23->isa + v24))();
        goto LABEL_53;
      }
    }
    sub_20B967138(*(_QWORD *)(a1 + 1320));
    goto LABEL_13;
  }
  LOBYTE(v61) = 0;
  v5 = 0;
  if (!sub_20B9BF9AC(a1, 0, 0))
    goto LABEL_46;
  v6 = *(_QWORD *)(a1 + 24);
  if (*(_QWORD *)(a1 + 16) == v6 || !*(_BYTE *)(a1 + 40))
    v7 = 0;
  else
    v7 = (const __CFString *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 - 8) + 48))(*(_QWORD *)(v6 - 8));
  LOBYTE(v61) = 0;
  v13 = *(uint64_t **)(a1 + 1320);
  *(_QWORD *)&v64 = &off_24C46A608;
  *((_QWORD *)&v64 + 1) = a1;
  theString[0] = (CFStringRef)&v61;
  theString[1] = (CFStringRef)&v64;
  sub_20B966398(v13, v7, 0, 2u, (uint64_t)&v64, 0, -6.5);
  v14 = theString[1];
  if ((__int128 *)theString[1] == &v64)
  {
    v15 = 4;
    v14 = (CFStringRef)&v64;
  }
  else
  {
    if (!theString[1])
      goto LABEL_23;
    v15 = 5;
  }
  (*((void (**)(void))v14->isa + v15))();
LABEL_23:
  if (sub_20B9BF9AC(a1, 1, 0))
  {
    LOBYTE(v61) = 1;
    v16 = *(uint64_t **)(a1 + 1320);
    *(_QWORD *)&v64 = &off_24C46A608;
    *((_QWORD *)&v64 + 1) = a1;
    theString[0] = (CFStringRef)&v61;
    theString[1] = (CFStringRef)&v64;
    sub_20B966398(v16, v7, 0, 2u, (uint64_t)&v64, 1, -8.0);
    v17 = theString[1];
    if ((__int128 *)theString[1] == &v64)
    {
      v18 = 4;
      v17 = (CFStringRef)&v64;
    }
    else
    {
      if (!theString[1])
      {
LABEL_39:
        v5 = CFArrayGetCount(*(CFArrayRef *)(a1 + 1232)) != 0;
        goto LABEL_40;
      }
      v18 = 5;
    }
    (*((void (**)(void))v17->isa + v18))();
    goto LABEL_39;
  }
  v5 = 0;
LABEL_40:
  if (!sub_20B9BF9AC(a1, 1, 0))
    goto LABEL_46;
  LOBYTE(v61) = 0;
  v25 = *(uint64_t **)(a1 + 1320);
  *(_QWORD *)&v64 = &off_24C46A608;
  *((_QWORD *)&v64 + 1) = a1;
  theString[0] = (CFStringRef)&v61;
  theString[1] = (CFStringRef)&v64;
  sub_20B966398(v25, v7, 5, 1u, (uint64_t)&v64, 0, -6.5);
  v26 = theString[1];
  if ((__int128 *)theString[1] == &v64)
  {
    v27 = 4;
    v26 = (CFStringRef)&v64;
  }
  else
  {
    if (!theString[1])
      goto LABEL_46;
    v27 = 5;
  }
  (*((void (**)(void))v26->isa + v27))();
LABEL_46:
  result = CFArrayGetCount(*(CFArrayRef *)(a1 + 1232));
  if (result)
  {
    ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 1232), 0);
    v31 = objc_msgSend_rawCandidate(ValueAtIndex, v29, v30);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 392))(v31);
    if (v5)
    {
      v33 = 1;
    }
    else
    {
      v34 = v32;
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 952) + 104))(*(_QWORD *)(a1 + 952));
      v33 = v34 + *(double *)(result + 16) > 3.0;
    }
    *(_BYTE *)(a1 + 1312) = v33;
  }
  return result;
}

void sub_20B9BC548(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B9BFD5C((const void ***)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B9BC624(_QWORD *a1, const void *a2, uint64_t a3)
{
  _QWORD *result;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *i;
  uint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = sub_20B9A9E4C(a1, a2, a3, (a3 - (uint64_t)a2) >> 3);
  v5 = (_QWORD *)*a1;
  v6 = (_QWORD *)a1[1];
  if ((_QWORD *)*a1 != v6)
  {
    while (1)
    {
      v7 = *v5;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v5 + 16))(*v5);
      if ((_DWORD)result == 10)
        break;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
      if ((_DWORD)result == 11)
        break;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
      if ((_DWORD)result == 9)
        break;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
      if ((_DWORD)result == 14)
        break;
      if (++v5 == v6)
      {
        v5 = v6;
        goto LABEL_17;
      }
    }
    if (v5 != v6)
    {
      for (i = v5 + 1; i != v6; ++i)
      {
        v9 = *i;
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*i + 16))(*i);
        if ((_DWORD)result != 10)
        {
          result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
          if ((_DWORD)result != 11)
          {
            result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
            if ((_DWORD)result != 9)
            {
              result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
              if ((_DWORD)result != 14)
                *v5++ = *i;
            }
          }
        }
      }
    }
  }
LABEL_17:
  if (v5 != (_QWORD *)a1[1])
    a1[1] = v5;
  return result;
}

void sub_20B9BC7A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_20B9BC7C0(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  unsigned __int16 *v6;

  if (a2 != 17)
    return 1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(unsigned __int16 *)(v3 + 98);
  if (!*(_WORD *)(v3 + 98))
    return 1;
  sub_20B9F1A84(*(_DWORD *)(v3 + 4));
  v6 = *(unsigned __int16 **)(a3 + 8);
  if (v6)
  {
    while (*v6++)
      ;
    LODWORD(v6) = *v6;
  }
  return v4 == (_DWORD)v6;
}

void sub_20B9BC824(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  unsigned __int8 **v7;
  unint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  char *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  int v16;
  int v17;
  unint64_t v18;
  _BOOL4 v19;
  uint64_t v20;
  int v21;
  _QWORD *v23;
  _QWORD *v24;
  int v25;
  int v26;
  _QWORD *v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BOOL4 v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  uint64_t v45;
  const UniChar *v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  BOOL v50;
  BOOL v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  __int16 *v55;
  __int16 v56;
  CFIndex v57;
  int v58;
  const __CFString *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *p_shared_owners;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  unsigned int v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  unsigned __int8 *v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  _BOOL4 v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  void *v91;
  const UniChar **v92;
  uint64_t v93;
  char *v94;
  unsigned int v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  void *v100;
  const UniChar **v101;
  _QWORD *v102;
  std::__shared_weak_count *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  BOOL v108;
  _QWORD v109[4];
  const UniChar *v110;
  _QWORD *v111;
  uint64_t v112;
  __n128 (*v113)(uint64_t, uint64_t);
  uint64_t (*v114)(uint64_t);
  uint64_t v115;
  std::__shared_weak_count *v116;

  v5 = *(_QWORD *)(a1 + 32);
  v86 = v5;
  v87 = *(_QWORD **)(a1 + 40);
  if (!*(_BYTE *)(a1 + 48))
  {
    v38 = a3 - 1;
    v39 = a2 + 56 * (a3 - 1);
    v40 = *(_QWORD *)(v39 + 8);
    if (v40)
    {
      v41 = *(_QWORD *)(a2 + 56 * v38);
      if (!v41)
      {
        v85 = 0;
LABEL_66:
        v43 = *(unsigned __int8 **)(v39 + 32);
        v44 = *(unsigned __int8 **)(a2 + 56 * v38 + 40);
        if (v43 != v44)
        {
          v45 = a2;
          v46 = 0;
          v83 = v5 + 16;
          v77 = v45 + 56 * a3 - 30;
          v79 = a3 - 1;
          v81 = v44;
          do
          {
            v47 = *(_QWORD *)(*v87 + 8 * *v43);
            v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 16))(v47);
            v49 = v48;
            if (v48 - 9 < 8
              || (v48 <= 7 ? (v50 = ((1 << v48) & 0xA1) == 0) : (v50 = 1), v50 ? (v51 = !v85) : (v51 = 0), !v51))
            {
              if (v43[25])
              {
                v52 = sub_20B8FB104(*(_DWORD *)(*(_QWORD *)(v5 + 8) + 24), v48, 0);
                if (!v46)
                {
                  v53 = operator new[]();
                  v46 = (const UniChar *)v53;
                  if (v38 >= 1)
                  {
                    v54 = 0;
                    v55 = (__int16 *)v77;
                    do
                    {
                      v56 = *v55;
                      v55 -= 28;
                      *(_WORD *)(v53 + 2 * v54++) = v56;
                    }
                    while (v38 != v54);
                  }
                }
                if (v49 <= 0x11 && ((1 << v49) & 0x20056) != 0)
                {
                  if (*(_BYTE *)(v86 + 1288))
                  {
                    v57 = v38;
                    v58 = v52;
                    v59 = CFStringCreateWithCharacters(0, v46, v57);
                    v60 = operator new();
                    sub_20B9C8B6C(v60, v59, 0, *(int **)(v86 + 8), v83, 0);
                    v61 = (std::__shared_weak_count *)operator new();
                    v61->__shared_owners_ = 0;
                    p_shared_owners = (unint64_t *)&v61->__shared_owners_;
                    v61->__vftable = (std::__shared_weak_count_vtbl *)&off_24C46BC20;
                    v61->__shared_weak_owners_ = 0;
                    v61[1].__vftable = (std::__shared_weak_count_vtbl *)v60;
                    v97 = MEMORY[0x24BDAC760];
                    v98 = 1174405120;
                    v99 = sub_20B9BD7B8;
                    v100 = &unk_24C46CC60;
                    LODWORD(v104) = v49;
                    v101 = (const UniChar **)v86;
                    v102 = (_QWORD *)v60;
                    v103 = v61;
                    do
                      v63 = __ldxr(p_shared_owners);
                    while (__stxr(v63 + 1, p_shared_owners));
                    HIDWORD(v104) = v58;
                    (*(void (**)(uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)v47 + 64))(v47, v43 + 8, &v97);
                    v44 = v81;
                    CFRelease(v59);
                    v5 = v86;
                    v38 = v79;
                    v64 = v103;
                    if (v103)
                    {
                      v65 = (unint64_t *)&v103->__shared_owners_;
                      do
                        v66 = __ldaxr(v65);
                      while (__stlxr(v66 - 1, v65));
                      if (!v66)
                      {
                        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
                        std::__shared_weak_count::__release_weak(v64);
                      }
                    }
                    do
                      v67 = __ldaxr(p_shared_owners);
                    while (__stlxr(v67 - 1, p_shared_owners));
                    if (!v67)
                    {
                      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                      std::__shared_weak_count::__release_weak(v61);
                    }
                  }
                  else
                  {
                    v5 = v86;
                  }
                }
                else
                {
                  v68 = *(_QWORD *)(v86 + 952);
                  v110 = v46;
                  v111 = (_QWORD *)v38;
                  v88 = MEMORY[0x24BDAC760];
                  v89 = 0x40000000;
                  v90 = sub_20B9BD654;
                  v91 = &unk_24C46CBA0;
                  BYTE4(v94) = v85;
                  LODWORD(v94) = v52;
                  v92 = (const UniChar **)v86;
                  v93 = v47;
                  v5 = v86;
                  (*(void (**)(uint64_t, uint64_t, unsigned __int8 *, const UniChar **))(*(_QWORD *)v68 + 40))(v68, v47, v43 + 8, &v110);
                }
              }
            }
            v43 += 32;
          }
          while (v43 != v44);
          if (v46)
            MEMORY[0x20BD39C80](v46, 0x1000C80BDFB0063);
        }
        return;
      }
      v42 = v40 + 1 == (*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 40))(v41);
    }
    else
    {
      v42 = 1;
    }
    v85 = v42;
    goto LABEL_66;
  }
  v72 = *(_DWORD *)(*(_QWORD *)(v5 + 8) + 24);
  v6 = (_QWORD *)(a2 + 56 * (a3 - 1));
  v7 = (unsigned __int8 **)(v6 + 4);
  v69 = *(_QWORD *)(a2 + 64);
  v8 = v6[1];
  v71 = v6;
  if (v8)
    v8 = v8 - (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v6 + 40))(*v6) + 1;
  v110 = 0;
  v111 = &v110;
  v112 = 0x3802000000;
  v113 = sub_20B9BD418;
  v114 = sub_20B9BD428;
  v115 = 0;
  v116 = 0;
  v9 = *v7;
  v78 = a2;
  v10 = *(unsigned __int8 **)(a2 + 56 * (a3 - 1) + 40);
  if (v9 != v10)
  {
    v84 = 0;
    v80 = 0;
    v11 = 0;
    LOBYTE(v82) = 0;
    v70 = v5 + 80;
    v74 = v5 + 960;
    v75 = v5 + 1008;
    v73 = 1;
    do
    {
      v12 = *(_QWORD *)(*v87 + 8 * *v9);
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
      v14 = v13;
      if (!v8 || v13 - 9 < 8 || (v13 <= 7 ? (v15 = ((1 << v13) & 0xA1) == 0) : (v15 = 1), !v15))
      {
        if (v9[25])
        {
          v16 = sub_20B8FB104(*(_DWORD *)(*(_QWORD *)(v5 + 8) + 24), v13, 0);
          if (!v11)
          {
            v17 = *(_DWORD *)(v5 + 1272);
            v11 = sub_20B9C2C30(v75);
            sub_20B9D6100((uint64_t)v11, v78, a3, v17, (v72 >> 14) & 1, v74);
            v18 = *((_QWORD *)v11 + 5);
            v5 = v86;
            if ((*(_BYTE *)(*(_QWORD *)(v86 + 8) + 25) & 0x40) != 0)
            {
              v19 = sub_20B9E89E8(v70, v8, *((_QWORD *)v11 + 6));
              v20 = *((_QWORD *)v11 + 5);
              v5 = v86;
            }
            else
            {
              v19 = 0;
              v20 = *((_QWORD *)v11 + 5);
            }
            v82 = (v18 >> 2) & 1;
            v21 = (4 * v20) & 8;
            if (v8)
              v21 = 0;
            v80 = (v20 >> 1) & 6 | v19 | v21 | (*((_QWORD *)v11 + 1) == 1) & (v20 >> 4);
          }
          if (v14 > 0x11 || ((1 << v14) & 0x20056) == 0)
          {
            if ((v73 & 1) != 0)
            {
              if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v78 + 56) + 64))(*(_QWORD *)(v78 + 56)) == 4)
              {
                v25 = v84;
                if (*(_QWORD *)(*(_QWORD *)(v78 + 56) + 120))
                  v25 = v84 | 2;
                v84 = v25;
              }
              v26 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v71 + 64))(*v71);
              v27 = (_QWORD *)*v71;
              if (v26 == 4)
              {
                v28 = v84;
                if (v27[16])
                  v28 = v84 | 4;
                v84 = v28;
              }
              v29 = (*(uint64_t (**)(_QWORD *))(*v27 + 72))(v27);
              v30 = v84;
              if (v29 == 7)
                v30 = v84 | 0x10;
              v84 = v30;
            }
            if ((v72 & 0x4000) != 0
              && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 96) - 8) + 16) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 96) - 8)
                                                                                          + 8))
            {
              v31 = *((_QWORD *)v11 + 5);
              if ((v31 & 2) != 0 || (v31 & 4) != 0 && *((_QWORD *)v11 + 1) == 1)
              {
                v32 = v84;
                if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v5 + 88) + 8 * v69) + 164))
                  v32 = v84 | 0x20;
                v84 = v32;
              }
            }
            v33 = 0xFFFFFFFFLL;
            if ((v82 & 1) != 0)
              v33 = 10;
            v109[0] = 0;
            v109[1] = v109;
            v109[2] = 0x2000000000;
            v109[3] = 0;
            v34 = *(_QWORD *)(v5 + 952);
            v97 = MEMORY[0x24BDAC760];
            v98 = 0x40000000;
            v99 = sub_20B9BD430;
            v100 = &unk_24C49FEC8;
            v108 = v8 == 0;
            v103 = (std::__shared_weak_count *)v5;
            v104 = v11;
            v107 = v16;
            v101 = &v110;
            v102 = v109;
            v105 = v12;
            v106 = v33;
            (*(void (**)(uint64_t, uint64_t, unsigned __int8 *, BOOL, uint64_t, char *, _QWORD, _QWORD, uint64_t *))(*(_QWORD *)v34 + 32))(v34, v12, v9 + 8, v8 == 0, v69 + 1, v11, v80, v84, &v97);
            _Block_object_dispose(v109, 8);
            v73 = 0;
          }
          else if (*(_BYTE *)(v5 + 1288))
          {
            v23 = *(_QWORD **)(v5 + 16);
            v24 = *(_QWORD **)(v5 + 24);
            while (1)
            {
              if (v23 == v24)
              {
                v88 = MEMORY[0x24BDAC760];
                v89 = 0x40000000;
                v90 = sub_20B9BD570;
                v91 = &unk_24C49FEF0;
                v5 = v86;
                v92 = &v110;
                v93 = v86;
                v94 = v11;
                v95 = v14;
                v96 = v16;
                (*(void (**)(uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)v12 + 64))(v12, v9 + 8, &v88);
                goto LABEL_54;
              }
              if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v23 + 56))(*v23) == 1)
                break;
              ++v23;
            }
            v5 = v86;
          }
        }
      }
LABEL_54:
      v9 += 32;
    }
    while (v9 != v10);
  }
  _Block_object_dispose(&v110, 8);
  v35 = v116;
  if (v116)
  {
    v36 = (unint64_t *)&v116->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
}

void sub_20B9BD128(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Block_object_dispose((const void *)(v1 - 160), 8);
  v3 = *(std::__shared_weak_count **)(v1 - 112);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(a1);
}

BOOL sub_20B9BD23C(uint64_t a1, _QWORD *a2, int a3)
{
  int v4;
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  _QWORD *v10;
  char v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;

  v4 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 24);
  if ((v4 & 0x4000) != 0)
  {
    v5 = a2[2];
    if (v5)
      LODWORD(v5) = (*(unsigned __int8 *)(v5 + 28) >> 5) & 1;
  }
  else
  {
    LOBYTE(v5) = 0;
  }
  if (!a3)
  {
    v7 = *(_QWORD *)a2[2];
    if (!v7)
      return 1;
    v8 = *(_QWORD *)(v7 + 8);
    if ((*(_BYTE *)(v7 + 40) & 0x10) != 0 && *(float *)(v7 + 56) < 1.0)
    {
      if (v8 == 1 || ((*(uint64_t (**)(_QWORD *))(*a2 + 40))(a2) & 0x802) != 0)
        return 0;
      if (*((_DWORD *)a2 + 2) != 8)
      {
        v9 = (*(uint64_t (**)(_QWORD *))(*a2 + 16))(a2);
        result = v9 < 0x2711;
        if (v9 > 0x2710)
          return result;
LABEL_28:
        if ((v4 & 0x4000) == 0)
          return result;
LABEL_38:
        if ((*(_QWORD *)(v7 + 40) & 0x88) == 0x80)
        {
          v15 = (*(uint64_t (**)(_QWORD *))(*a2 + 16))(a2);
          v16 = 10001;
          return v15 < v16;
        }
        return 1;
      }
    }
    else
    {
      v12 = v5 ^ 1;
      if (v8 != 1)
        v12 = 1;
      if ((v12 & 1) == 0)
      {
        v13 = *(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88);
        result = v13 < 9;
        if (v13 > 8)
          return result;
        goto LABEL_28;
      }
    }
    if ((v4 & 0x4000) == 0)
      return 1;
    goto LABEL_38;
  }
  if ((v5 & 1) != 0)
    return 0;
  if ((v4 & 0x4000) == 0 || (*((_DWORD *)a2 + 2) - 4) > 2)
  {
    if ((unint64_t)CFArrayGetCount(*(CFArrayRef *)(a1 + 1184)) >= 6 && *((_DWORD *)a2 + 2) != 8)
    {
      v14 = *(_QWORD *)a2[2];
      if (!v14 || *(_QWORD *)(v14 + 8) <= 2uLL)
      {
        v15 = (*(uint64_t (**)(_QWORD *))(*a2 + 16))(a2);
        if ((v4 & 0x4000) != 0)
          v16 = 10111;
        else
          v16 = 11001;
        return v15 < v16;
      }
    }
    return 1;
  }
  v10 = *(_QWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 952) + 104))(*(_QWORD *)(a1 + 952)) + 24);
  return v10 && v10 == a2;
}

__n128 sub_20B9BD418(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  return result;
}

uint64_t sub_20B9BD428(uint64_t a1)
{
  return sub_20B811FE4(a1 + 40);
}

void sub_20B9BD430(uint64_t a1, _QWORD *a2, _BYTE *a3)
{
  uint64_t v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;

  if (*(_BYTE *)(a1 + 84))
  {
    v4 = *(_QWORD *)(a1 + 48);
    if (*(_BYTE *)(v4 + 1288))
    {
      if (sub_20B9BD23C(*(_QWORD *)(a1 + 48), a2, 0))
      {
        v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
        if (!*(_QWORD *)(v7 + 40))
        {
          sub_20B9C22FC((uint64_t *)&v16, *(_QWORD **)(a1 + 56), *(int **)(v4 + 8), v4 + 16);
          sub_20B82E770(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40, &v16);
          v8 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
          if (*((_QWORD *)&v16 + 1))
          {
            v9 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
            do
              v10 = __ldaxr(v9);
            while (__stlxr(v10 - 1, v9));
            if (!v10)
            {
              ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
              std::__shared_weak_count::__release_weak(v8);
            }
          }
          v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
        }
        v11 = (_QWORD *)(v7 + 40);
        v12 = *(_DWORD *)(a1 + 80);
        v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 16))(*(_QWORD *)(a1 + 64));
        sub_20B9B91A0(v4 + 1152, a2, v11, v12, v13, v4 + 16);
        v14 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
        v15 = *(_QWORD *)(v14 + 24) + 1;
        *(_QWORD *)(v14 + 24) = v15;
        if (v15 == *(_QWORD *)(a1 + 72))
          *a3 = 1;
      }
    }
  }
}

void sub_20B9BD570(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;

  v4 = *(_QWORD *)(a1 + 40);
  if (sub_20B9BC7C0(v4, *(_DWORD *)(a1 + 56), a2))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    if (!*(_QWORD *)(v5 + 40))
    {
      sub_20B9C22FC((uint64_t *)&v9, *(_QWORD **)(a1 + 48), *(int **)(v4 + 8), v4 + 16);
      sub_20B82E770(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40, &v9);
      v6 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
      if (*((_QWORD *)&v9 + 1))
      {
        v7 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    }
    sub_20B9B8F34(v4 + 1152, a2, (_QWORD *)(v5 + 40), *(_DWORD *)(a1 + 60), *(_DWORD *)(a1 + 56));
  }
}

void sub_20B9BD654(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  int v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;

  if (*(_BYTE *)(a1 + 52))
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (*(_BYTE *)(v3 + 1288))
    {
      v5 = operator new();
      sub_20B9C7DDC(v5, (uint64_t)a2, 0, *(int **)(v3 + 8), v3 + 16);
      v11 = v5;
      v6 = (std::__shared_weak_count *)operator new();
      v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24C46BC20;
      v6->__shared_owners_ = 0;
      v6->__shared_weak_owners_ = 0;
      v6[1].__vftable = (std::__shared_weak_count_vtbl *)v5;
      v12 = v6;
      LODWORD(v5) = *(_DWORD *)(a1 + 48);
      v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40));
      sub_20B9B91A0(v3 + 1152, a2, &v11, v5, v7, v3 + 16);
      v8 = v12;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
  }
}

void sub_20B9BD76C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_20B9BD7B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 32);
  if (sub_20B9BC7C0(v4, *(_DWORD *)(a1 + 56), a2))
    sub_20B9B8F34(v4 + 1152, a2, (_QWORD *)(a1 + 40), *(_DWORD *)(a1 + 60), *(_DWORD *)(a1 + 56));
}

uint64_t sub_20B9BD818(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t sub_20B9BD83C(uint64_t a1)
{
  return sub_20B811FE4(a1 + 40);
}

void sub_20B9BD844(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  int v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  _QWORD *v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v20;
  int v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  int v25;
  __int16 v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;

  v5 = *(_QWORD *)(a1 + 56);
  if (*(_BYTE *)(a1 + 96))
  {
    if (*(_BYTE *)(a1 + 97))
    {
      if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
      {
        sub_20B9C22FC((uint64_t *)&v37, *(_QWORD **)(a1 + 64), *(int **)(v5 + 8), v5 + 16);
        sub_20B82E770(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40, &v37);
        v22 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
        if (*((_QWORD *)&v37 + 1))
        {
          v23 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
      }
      if ((*(_WORD *)(*(_QWORD *)a2 + 4) & 8) == 0)
      {
        v6 = v5 + 1152;
        v7 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
        v8 = *(_DWORD *)(a1 + 88);
        v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 16))(*(_QWORD *)(a1 + 72));
        sub_20B9B8F34(v6, a2, v7, v8, v9);
      }
      return;
    }
    if (*(_QWORD *)(a1 + 80) == 0xFFFFFFFFLL)
      goto LABEL_45;
    v20 = *(_QWORD *)a2;
    v21 = *(_DWORD *)(a1 + 92);
    if ((v21 & 1) != 0)
    {
      v25 = *(unsigned __int16 *)(v20 + 4);
      if ((v25 & 0x80) != 0)
        goto LABEL_44;
      if ((v21 & 2) == 0)
      {
        if ((v21 & 8) != 0)
        {
          if ((~v25 & 0x300) != 0)
            goto LABEL_45;
        }
        else if ((v21 & 4) == 0 || (v25 & 0x200) == 0)
        {
          goto LABEL_45;
        }
        goto LABEL_44;
      }
      if ((v25 & 0x400) != 0)
LABEL_44:
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
    }
    else
    {
      if ((v21 & 2) != 0)
      {
        v26 = *(_WORD *)(v20 + 4);
        if ((v21 & 0x10) != 0)
        {
          if ((v26 & 0x2000) == 0)
            goto LABEL_45;
        }
        else if ((v26 & 0x40) == 0)
        {
          goto LABEL_45;
        }
        goto LABEL_44;
      }
      if ((v21 & 8) == 0)
      {
        if ((v21 & 4) == 0)
          goto LABEL_45;
        LOWORD(v20) = *(_WORD *)(v20 + 4);
        if ((v20 & 0x20) == 0)
          goto LABEL_45;
LABEL_40:
        if ((v21 & 0x20) != 0 && (__int16)v20 < 0)
          goto LABEL_45;
        goto LABEL_44;
      }
      LODWORD(v20) = *(unsigned __int16 *)(v20 + 4);
      if ((~(_DWORD)v20 & 0x210) == 0)
        goto LABEL_40;
    }
LABEL_45:
    if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
      goto LABEL_54;
    v27 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    if (!*(_QWORD *)(v27 + 40))
    {
      sub_20B9C22FC((uint64_t *)&v37, *(_QWORD **)(a1 + 64), *(int **)(v5 + 8), v5 + 16);
      sub_20B82E770(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40, &v37);
      v28 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
      if (*((_QWORD *)&v37 + 1))
      {
        v29 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      v27 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    }
    v31 = v5 + 1128;
    v32 = (_QWORD *)(v27 + 40);
    v33 = *(_DWORD *)(a1 + 88);
    v34 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 16))(*(_QWORD *)(a1 + 72));
    sub_20B9B8F34(v31, a2, v32, v33, v34);
    v35 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v36 = *(_QWORD *)(v35 + 24) + 1;
    *(_QWORD *)(v35 + 24) = v36;
    if (v36 == *(_QWORD *)(a1 + 80))
LABEL_54:
      *a3 = 1;
    return;
  }
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (!*(_QWORD *)(v10 + 40))
  {
    sub_20B9C22FC((uint64_t *)&v37, *(_QWORD **)(a1 + 64), *(int **)(v5 + 8), v5 + 16);
    sub_20B82E770(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40, &v37);
    v11 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
    if (*((_QWORD *)&v37 + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  }
  v14 = *(unsigned __int8 *)(a1 + 97);
  v15 = (_QWORD *)(v10 + 40);
  v16 = *(_DWORD *)(a1 + 88);
  v17 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 16))(*(_QWORD *)(a1 + 72));
  if (v14)
    v18 = v5 + 1152;
  else
    v18 = v5 + 1128;
  sub_20B9B8F34(v18, a2, v15, v16, v17);
}

uint64_t sub_20B9BDBA8(uint64_t a1, uint64_t a2)
{
  return sub_20B9E8F44(*(_QWORD *)(a1 + 32) + 80, a2 - 1);
}

uint64_t sub_20B9BDBB8(uint64_t a1, uint64_t a2)
{
  return sub_20B9ECEB0(*(_QWORD *)(a1 + 32) + 80, a2, 4uLL);
}

void sub_20B9BDBC8(_QWORD *a1, _QWORD *a2, _BYTE *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  int *v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;

  v6 = a1[12];
  if (*(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24))
  {
    *(_BYTE *)(v6 + 1176) = 1;
    CFArrayRemoveAllValues(*(CFMutableArrayRef *)(v6 + 1184));
    CFSetRemoveAllValues(*(CFMutableSetRef *)(v6 + 1296));
    *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = 0;
  }
  if (a2 && *(_QWORD *)(v6 + 1264) && sub_20B9BD23C(v6, a2, 1))
  {
    v7 = a2[2];
    v8 = *(_QWORD *)(a1[5] + 8);
    if (v7 != *(_QWORD *)(v8 + 24))
    {
      *(_QWORD *)(v8 + 24) = v7;
      *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24) = *(_QWORD *)v7;
      v9 = *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24);
      if (v9)
      {
        v10 = (*(_BYTE *)(v9 + 40) & 4) == 0;
        v11 = 10;
        if (v10)
          v11 = 0xFFFFFFFFLL;
      }
      else
      {
        v11 = 0xFFFFFFFFLL;
      }
      *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 24) = v11;
      *(_QWORD *)(*(_QWORD *)(a1[8] + 8) + 24) = 0;
      *(_BYTE *)(*(_QWORD *)(a1[9] + 8) + 24) = 1;
      *(_BYTE *)(*(_QWORD *)(a1[10] + 8) + 24) = *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24) == 0;
    }
    if (*(_BYTE *)(*(_QWORD *)(a1[9] + 8) + 24))
    {
      v12 = *(int **)(v6 + 8);
      v13 = operator new(0x110uLL);
      v13[1] = 0;
      v13[2] = 0;
      *v13 = &off_24C46B830;
      *(_QWORD *)&v19 = sub_20B9C7DDC((uint64_t)(v13 + 3), (uint64_t)a2, 0, v12, v6 + 16);
      *((_QWORD *)&v19 + 1) = v13;
      sub_20B82E770(*(_QWORD *)(a1[11] + 8) + 40, &v19);
      v14 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
      if (*((_QWORD *)&v19 + 1))
      {
        v15 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      *(_BYTE *)(*(_QWORD *)(a1[9] + 8) + 24) = 0;
    }
    sub_20B9B91A0(v6 + 1176, a2, (_QWORD *)(*(_QWORD *)(a1[11] + 8) + 40), *(_DWORD *)(v7 + 32), *(_DWORD *)(v7 + 36), v6 + 16);
    if (!*(_BYTE *)(*(_QWORD *)(a1[10] + 8) + 24))
      *(_BYTE *)(*(_QWORD *)(a1[9] + 8) + 24) = 1;
    v17 = *(_QWORD *)(a1[8] + 8);
    v18 = *(_QWORD *)(v17 + 24) + 1;
    *(_QWORD *)(v17 + 24) = v18;
    if (v18 == *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 24))
      *a3 = 1;
  }
}

void sub_20B9BDE18(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_20B9BDE30(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  int v8;
  int v9;
  char *v10;
  uint64_t v11;
  unsigned __int16 *v12;
  BOOL v13;
  uint64_t v14;
  unsigned __int8 **v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const __CFString *v21;
  unint64_t v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  int v29;
  int v30;
  int v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  uint64_t v35;
  _QWORD v36[11];
  int v37;
  int v38;
  char v39;
  BOOL v40;
  _QWORD v41[6];
  std::__shared_weak_count *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;

  v5 = a1[4];
  v6 = (_QWORD *)a1[5];
  v7 = a1[6];
  v8 = *(_DWORD *)(v5 + 1272);
  v9 = (*(_DWORD *)(*(_QWORD *)(v5 + 8) + 24) >> 14) & 1;
  v10 = sub_20B9C2C30(v5 + 1008);
  v35 = sub_20B9D6100((uint64_t)v10, a2, a3, v8, v9, v5 + 960);
  if ((*(_BYTE *)(v35 + 40) & 0x10) == 0
    || a3 != 2
    || *(float *)(v35 + 56) >= 1.0
    || (v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 952) + 104))(*(_QWORD *)(v5 + 952))) == 0
    || (v12 = *(unsigned __int16 **)(v11 + 32), v12 == *(unsigned __int16 **)(v11 + 40))
    || !*(_QWORD *)(v35 + 8)
    || *v12 == **(unsigned __int16 **)(v35 + 16))
  {
    v13 = 0;
    v14 = a3 - 1;
    v15 = (unsigned __int8 **)(a2 + 56 * (a3 - 1) + 32);
    v16 = *(_DWORD *)(*(_QWORD *)(v5 + 8) + 24);
    v17 = *(_QWORD *)(v35 + 40);
    if ((v16 & 0x4000) != 0 && v7 != 0xFFFFFFFF && (v17 & 4) == 0)
    {
      v18 = v7;
      v19 = *(_QWORD *)(a2 + 64) + 1;
      v20 = *(_QWORD *)(v5 + 24);
      if (*(_QWORD *)(v5 + 16) == v20 || !*(_BYTE *)(v5 + 40))
        v21 = 0;
      else
        v21 = (const __CFString *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v20 - 8) + 48))(*(_QWORD *)(v20 - 8));
      v13 = v19 == CFStringGetLength(v21);
      v7 = v18;
    }
    if ((v17 & 4) != 0)
      v22 = 20;
    else
      v22 = v7;
    v47 = 0;
    v48 = &v47;
    v49 = 0x2000000000;
    v50 = 0;
    v43 = 0;
    v44 = &v43;
    v45 = 0x2000000000;
    v46 = 1;
    v41[0] = 0;
    v41[1] = v41;
    v41[2] = 0x3802000000;
    v41[3] = sub_20B9BD418;
    v41[4] = sub_20B9BD428;
    v41[5] = 0;
    v42 = 0;
    v23 = *v15;
    v24 = *(unsigned __int8 **)(a2 + 56 * v14 + 40);
    if (v23 != v24)
    {
      v25 = (v16 >> 18) & 0x10 | (v16 >> 14) & 1 | v17 & 4 | (8 * ((v17 >> 1) & 1)) | (v17 >> 2) & 2;
      do
      {
        v26 = *(_QWORD *)(*v6 + 8 * *v23);
        v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26) - 9;
        if (v27 < 9 && ((0x127u >> v27) & 1) != 0)
        {
          v28 = 0;
        }
        else
        {
          if (!*((_BYTE *)v44 + 24))
            goto LABEL_28;
          v28 = 1;
        }
        v29 = *(_DWORD *)(*(_QWORD *)(v5 + 8) + 24);
        v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26);
        if (v23[25])
        {
          v31 = sub_20B8FB104(v29, v30, 0);
          v36[0] = MEMORY[0x24BDAC760];
          v36[1] = 0x40000000;
          v36[2] = sub_20B9BD844;
          v36[3] = &unk_24C46C978;
          v39 = v28;
          v40 = v13;
          v36[8] = v35;
          v36[9] = v26;
          v36[10] = v22;
          v37 = v31;
          v38 = v25;
          v36[4] = v41;
          v36[5] = &v43;
          v36[6] = &v47;
          v36[7] = v5;
          (*(void (**)(uint64_t, unsigned __int8 *, _QWORD *))(*(_QWORD *)v26 + 64))(v26, v23 + 8, v36);
          if (v48[3] >= v22)
            break;
        }
LABEL_28:
        v23 += 32;
      }
      while (v23 != v24);
    }
    _Block_object_dispose(v41, 8);
    v32 = v42;
    if (v42)
    {
      p_shared_owners = (unint64_t *)&v42->__shared_owners_;
      do
        v34 = __ldaxr(p_shared_owners);
      while (__stlxr(v34 - 1, p_shared_owners));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    _Block_object_dispose(&v43, 8);
    _Block_object_dispose(&v47, 8);
  }
}

void sub_20B9BE1B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29,char a30)
{
  uint64_t v30;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;

  _Block_object_dispose(&a23, 8);
  v32 = a29;
  if (a29)
  {
    p_shared_owners = (unint64_t *)&a29->__shared_owners_;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose((const void *)(v30 - 136), 8);
  _Unwind_Resume(a1);
}

BOOL sub_20B9BE224(uint64_t a1)
{
  uint64_t v2;
  unsigned __int16 *v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 24);
  if (*(_QWORD *)(a1 + 16) != v2
    && ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 - 8) + 24))(*(_QWORD *)(v2 - 8)) & 1) != 0)
  {
    return 0;
  }
  if ((*(_DWORD *)(*(_QWORD *)(a1 + 8) + 24) & 0x8004800) != 0
    || (unint64_t)CFArrayGetCount(*(CFArrayRef *)(a1 + 1160)) > 0xA)
  {
    return 0;
  }
  v3 = *(unsigned __int16 **)(a1 + 664);
  v4 = *(unsigned __int16 **)(a1 + 672) == v3 ? 1 : *v3 + 1;
  return (uint64_t)(*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 3 != v4
      && (*(_BYTE *)(*(_QWORD *)(a1 + 8) + 25) & 0x40) == 0;
}

void sub_20B9BE2D4(_QWORD *a1, _QWORD *a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD v13[10];
  char v14;
  char v15;
  _QWORD v16[3];
  char v17;
  _QWORD v18[4];
  _QWORD v19[3];
  __int16 v20;
  _QWORD v21[4];
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;

  if (*a2 != a2[1])
  {
    v6 = a1[6];
    v7 = *(_QWORD *)(a1[1] + 64);
    if (v7
      && (v8 = *(_QWORD *)(v7 + 8)) != 0
      && sub_20B88826C(v8, kMecabraContextOptionPrivateMode) == (const void *)*MEMORY[0x24BDBD270])
    {
      sub_20B9BC624(&v22, *(const void **)(v6 + 192), *(_QWORD *)(v6 + 200));
    }
    else
    {
      v22 = 0;
      v23 = 0;
      v24 = 0;
      sub_20B9A9E4C(&v22, *(const void **)(v6 + 192), *(_QWORD *)(v6 + 200), (uint64_t)(*(_QWORD *)(v6 + 200) - *(_QWORD *)(v6 + 192)) >> 3);
    }
    v9 = v22;
    if (v22 != v23)
    {
      v10 = (*(_DWORD *)(a1[1] + 24) >> 14) & 1;
      v11 = (uint64_t)(a1[12] - a1[11]) >> 3;
      v21[0] = 0;
      v21[1] = v21;
      v21[2] = 0x2000000000;
      v21[3] = 0xFFEFFFFFFFFFFFFFLL;
      v19[0] = 0;
      v19[1] = v19;
      v19[2] = 0x2000000000;
      v20 = -1;
      v18[0] = 0;
      v18[1] = v18;
      v18[2] = 0x2000000000;
      v18[3] = 0;
      v16[0] = 0;
      v16[1] = v16;
      v16[2] = 0x2000000000;
      v17 = 0;
      v12 = (_QWORD *)a1[133];
      v13[0] = MEMORY[0x24BDAC760];
      v13[1] = 0x40000000;
      v13[2] = sub_20B9BE4D8;
      v13[3] = &unk_24C49FFE8;
      v14 = v10;
      v13[8] = a1;
      v13[9] = v11;
      v13[4] = v19;
      v13[5] = v21;
      v13[6] = v16;
      v13[7] = v18;
      v15 = a3;
      sub_20B9B2164(v12, &v22, (uint64_t)a2, (uint64_t)v13);
      _Block_object_dispose(v16, 8);
      _Block_object_dispose(v18, 8);
      _Block_object_dispose(v19, 8);
      _Block_object_dispose(v21, 8);
      v9 = v22;
    }
    if (v9)
    {
      v23 = v9;
      operator delete(v9);
    }
  }
}

void sub_20B9BE48C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v12;
  void *v14;
  uint64_t v15;
  va_list va;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va1;

  va_start(va1, a12);
  va_start(va, a12);
  v15 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v12 - 136), 8);
  _Block_object_dispose((const void *)(v12 - 104), 8);
  v14 = *(void **)(v12 - 72);
  if (v14)
  {
    *(_QWORD *)(v12 - 64) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20B9BE4D8(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, _BYTE *a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  char *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  char *v27;
  int v28;
  __int16 v29;
  _BYTE *v30;
  _BYTE *v31;
  _QWORD v32[4];
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  int v38;
  __int16 v39;
  BOOL v40;

  v13 = result;
  v14 = *(_QWORD *)(result + 64);
  v15 = a2[1];
  if (v15
    && (result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2), v15 != result - 1)
    || (v16 = *a5) == 0
    || (*(_WORD *)(v16 + 4) & 0x800) != 0)
  {
    if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v13 + 48) + 8) + 24) && !*(_BYTE *)(v13 + 81))
    {
      v31 = a7;
      v25 = *(_DWORD *)(v14 + 1272);
      v26 = *(unsigned __int8 *)(v13 + 80);
      v27 = sub_20B9C2C30(v14 + 1008);
      v28 = v26;
      a7 = v31;
      sub_20B9D6464((uint64_t)v27, a2, a3, a4, v25, v28, v14 + 960);
      result = (*(uint64_t (**)(_QWORD, _QWORD, char *, uint64_t, uint64_t *, uint64_t, void *))(**(_QWORD **)(v14 + 952) + 56))(*(_QWORD *)(v14 + 952), *(_QWORD *)(v13 + 72), v27, a6, a5, 1, &unk_24C46CEF0);
      ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 56) + 8) + 24);
    }
  }
  else if ((_DWORD)a6 == 9
         || *(unsigned __int16 *)(v16 + 6) < *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v13 + 32) + 8)
                                                                               + 24))
  {
    v30 = a7;
    v17 = *(_DWORD *)(v14 + 1272);
    v18 = *(unsigned __int8 *)(v13 + 80);
    v29 = *(_WORD *)(v16 + 6);
    v19 = sub_20B9C2C30(v14 + 1008);
    v20 = v17;
    a7 = v30;
    sub_20B9D6464((uint64_t)v19, a2, a3, a4, v20, v18, v14 + 960);
    v21 = *(_QWORD *)(v14 + 952);
    v22 = *(_QWORD *)(v13 + 72);
    v32[0] = MEMORY[0x24BDAC760];
    v32[1] = 0x40000000;
    v32[2] = sub_20B9BE704;
    v32[3] = &unk_24C49FFA0;
    v36 = v14;
    v37 = v19;
    v38 = a6;
    v33 = *(_OWORD *)(v13 + 40);
    v40 = (_DWORD)a6 == 9;
    v23 = *(_QWORD *)(v13 + 32);
    v39 = v29;
    v24 = *(_QWORD *)(v13 + 56);
    v34 = v23;
    v35 = v24;
    result = (*(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t *, _QWORD, _QWORD *))(*(_QWORD *)v21 + 56))(v21, v22, v19, a6, a5, 0, v32);
  }
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 56) + 8) + 24) >= 0x33uLL)
    *a7 = 1;
  return result;
}

void sub_20B9BE704(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  int v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  v4 = *(_QWORD *)(a1 + 64);
  v5 = *(_QWORD *)(v4 + 8);
  v6 = *(_QWORD *)(v5 + 72);
  if (v6)
    v7 = *(_QWORD *)(*(_QWORD *)(v6 + 8) + 32);
  else
    v7 = 0;
  v8 = sub_20B9DC240((uint64_t)a2, v7, *(_QWORD *)(v5 + 64) + 48);
  if (v8 > *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    v9 = operator new();
    sub_20B9C7DDC(v9, (uint64_t)a2, *(_QWORD **)(a1 + 72), *(int **)(v4 + 8), v4 + 16);
    v15 = v9;
    v10 = (std::__shared_weak_count *)operator new();
    v10->__vftable = (std::__shared_weak_count_vtbl *)&off_24C46BC20;
    v10->__shared_owners_ = 0;
    v10->__shared_weak_owners_ = 0;
    v10[1].__vftable = (std::__shared_weak_count_vtbl *)v9;
    v16 = v10;
    LODWORD(v9) = *(_DWORD *)(a1 + 80);
    v11 = sub_20B8FB104(*(_DWORD *)(*(_QWORD *)(v4 + 8) + 24), v9, 1);
    sub_20B9B91A0(v4 + 1104, a2, &v15, v11, v9, v4 + 16);
    *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v8;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
    if (!*(_BYTE *)(a1 + 86))
      *(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = *(_WORD *)(a1 + 84);
    ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
    v12 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
}

void sub_20B9BE8A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B811FE4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B9BE8F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD v22[9];
  int v23;
  char v24;
  _QWORD v25[6];
  std::__shared_weak_count *v26;

  v3 = *(_QWORD *)(a1 + 32);
  v25[0] = 0;
  v25[1] = v25;
  v25[2] = 0x3802000000;
  v25[3] = sub_20B9BD418;
  v25[4] = sub_20B9BD428;
  v25[5] = 0;
  v26 = 0;
  v4 = a2 + 56 * a3;
  v5 = *(_QWORD *)(v4 - 24);
  v6 = *(_QWORD *)(v4 - 16);
  if (v5 != v6)
  {
    v9 = 0;
    v10 = v5 + 8;
    do
    {
      v11 = v10 - 8;
      v12 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * *(unsigned __int8 *)(v10 - 8));
      v13 = *(_DWORD *)(*(_QWORD *)(v3 + 8) + 24);
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
      v15 = sub_20B8FB104(v13, v14, 0);
      if (*(_BYTE *)(v10 + 17))
      {
        v16 = v15;
        if (!v9)
        {
          v17 = *(_DWORD *)(v3 + 1272);
          v9 = sub_20B9C2C30(v3 + 1008);
          sub_20B9D6100((uint64_t)v9, a2, a3, v17, 0, v3 + 960);
        }
        v22[0] = MEMORY[0x24BDAC760];
        v22[1] = 0x40000000;
        v22[2] = sub_20B9BEAF0;
        v22[3] = &unk_24C4A0010;
        v24 = *(_BYTE *)(a1 + 64);
        v22[4] = v25;
        v22[5] = v3;
        v23 = v16;
        v22[6] = v9;
        v22[7] = v12;
        v22[8] = a3;
        (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v12 + 64))(v12, v10, v22);
      }
      v10 += 32;
    }
    while (v11 + 32 != v6);
  }
  _Block_object_dispose(v25, 8);
  v18 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_20B9BEAD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  sub_20B811FE4(a2);
  _Unwind_Resume(a1);
}

void sub_20B9BEAF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  int v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;
  void *__p;
  void *v15;
  __int16 v16;

  v4 = *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a1 + 76))
  {
    if ((*(_WORD *)(*(_QWORD *)a2 + 4) & 0x2000) != 0)
      return;
  }
  else if ((*(_WORD *)(*(_QWORD *)a2 + 4) & 0x40) != 0)
  {
    return;
  }
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
  {
    sub_20B9C22FC((uint64_t *)&v13, *(_QWORD **)(a1 + 48), *(int **)(v4 + 8), v4 + 16);
    sub_20B82E770(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40, &v13);
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
    if (*((_QWORD *)&v13 + 1))
    {
      v11 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  v5 = sub_20B9F1A84(*(_DWORD *)(*(_QWORD *)(v4 + 8) + 4));
  v6 = *(unsigned __int16 *)(*(_QWORD *)a2 + 6);
  if (*(_BYTE *)(a1 + 76) && *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) == 2)
    v6 = (int)((double)v6 * 0.9);
  sub_20B9DDC68((uint64_t)&v13, *(_QWORD *)a2, *(_WORD **)(a2 + 8), v5, 0, *(uint64_t **)(v4 + 8), 0, 0);
  *(_QWORD *)&v13 = &unk_24C469360;
  v16 = v6;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v8 = *(_DWORD *)(a1 + 72);
  v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 16))(*(_QWORD *)(a1 + 56));
  sub_20B9B91A0(v4 + 1152, &v13, (_QWORD *)(v7 + 40), v8, v9, v4 + 16);
  if ((unint64_t)(*(_QWORD *)(a1 + 64) - 6) <= 0xFFFFFFFFFFFFFFFALL)
    *(_BYTE *)(v4 + 1312) = 1;
  *(_QWORD *)&v13 = off_24C4693E0;
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
}

void sub_20B9BEC98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B9BECC4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v2 = (_QWORD *)(a1 + 40);
  v2[2] = 0;
  return sub_20B9A9E4C(v2, *(const void **)(a2 + 40), *(_QWORD *)(a2 + 48), (uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 3);
}

void sub_20B9BECE0(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void sub_20B9BECF8(_QWORD *a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;
  _BOOL4 v7;
  uint64_t v8;
  double *v9;
  double *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  __int128 v21;
  _QWORD v22[6];
  BOOL v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  __n128 (*v27)(_QWORD *, uint64_t);
  void (*v28)(uint64_t);
  void *__p;
  void *v30;
  uint64_t v31;

  v24 = 0;
  v25 = &v24;
  v26 = 0x4002000000;
  v27 = sub_20B9BEEC8;
  v28 = sub_20B9BEEEC;
  v30 = 0;
  v31 = 0;
  __p = 0;
  if (!a2)
    goto LABEL_8;
  v5 = (_QWORD *)a1[2];
  v6 = (_QWORD *)a1[3];
  while (v5 != v6)
  {
    if (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)*v5 + 56))(*v5))
      goto LABEL_8;
    ++v5;
  }
  if (a1[103])
    v7 = a1[110] < 1;
  else
LABEL_8:
    v7 = 0;
  v8 = a1[119];
  v22[0] = MEMORY[0x24BDAC760];
  v22[1] = 0x40000000;
  v22[2] = sub_20B9BEF04;
  v22[3] = &unk_24C4A0038;
  v23 = v7;
  v22[4] = &v24;
  v22[5] = a1;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v8 + 80))(v8, v22);
  if (v7)
  {
    v9 = (double *)v25[5];
    v10 = (double *)v25[6];
    v11 = 126 - 2 * __clz(((char *)v10 - (char *)v9) >> 4);
    if (v10 == v9)
      v12 = 0;
    else
      v12 = v11;
    sub_20B9BFEFC(v9, v10, v12, 1);
  }
  v13 = v25;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v14 = (char *)v13[5];
  v15 = (char *)v13[6];
  v16 = v15 - v14;
  if (v15 != v14)
  {
    if (v16 < 0)
      sub_20B80CDD8();
    v17 = sub_20B8F6ECC(v16 >> 4);
    v18 = 0;
    *a3 = v17;
    a3[1] = v17;
    a3[2] = &v17[v19];
    v20 = v17;
    do
    {
      v21 = *(_OWORD *)v14;
      v14 += 16;
      *v20++ = v21;
      ++v18;
    }
    while (v14 != v15);
    a3[1] = &v17[v18];
  }
  _Block_object_dispose(&v24, 8);
  if (__p)
  {
    v30 = __p;
    operator delete(__p);
  }
}

void sub_20B9BEE98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  _Block_object_dispose(&a17, 8);
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

__n128 sub_20B9BEEC8(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void sub_20B9BEEEC(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void sub_20B9BEF04(uint64_t a1, _QWORD *a2, double a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  unsigned int v32;
  int8x8_t v33;
  double v34;
  uint8x8_t v35;
  unint64_t v36;
  double **v37;
  double *v38;
  unint64_t v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  void *__dst;
  char *v51;
  uint64_t v52;

  if (!*(_BYTE *)(a1 + 48))
  {
    v11 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
    v13 = v11[6];
    v12 = v11[7];
    if (v13 < v12)
      goto LABEL_42;
    v14 = v11[5];
    v15 = (uint64_t)(v13 - v14) >> 4;
    v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 60)
      goto LABEL_58;
    v17 = v12 - v14;
    if (v17 >> 3 > v16)
      v16 = v17 >> 3;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
      v18 = 0xFFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    v19 = (char *)sub_20B8F6ECC(v18);
    v20 = &v19[16 * v15];
    v22 = &v19[16 * v21];
    *(_QWORD *)v20 = a2;
    *((double *)v20 + 1) = a3;
    v23 = v20 + 16;
    v25 = (char *)v11[5];
    v24 = (char *)v11[6];
    if (v24 != v25)
    {
      do
      {
        *((_OWORD *)v20 - 1) = *((_OWORD *)v24 - 1);
        v20 -= 16;
        v24 -= 16;
      }
      while (v24 != v25);
LABEL_52:
      v24 = (char *)v11[5];
    }
LABEL_53:
    v11[5] = v20;
    v11[6] = v23;
    v11[7] = v22;
    if (v24)
      operator delete(v24);
LABEL_55:
    v11[6] = v23;
    return;
  }
  v6 = *(_QWORD *)(a1 + 40);
  __dst = 0;
  v51 = 0;
  v52 = 0;
  if (a2)
  {
    v7 = a2;
    do
    {
      v8 = *(_QWORD *)(*v7 + 16);
      if (v8)
        sub_20B87D600((uint64_t)&__dst, (uint64_t)__dst, *(char **)(*(_QWORD *)v8 + 16), (char *)(*(_QWORD *)(*(_QWORD *)v8 + 16) + 2 * *(_QWORD *)(*(_QWORD *)v8 + 8)), *(_QWORD *)(*(_QWORD *)v8 + 8));
      v7 = (_QWORD *)v7[1];
    }
    while (v7);
    v9 = (char *)__dst;
    v10 = v51;
  }
  else
  {
    v10 = 0;
    v9 = 0;
  }
  v27 = v10 - v9;
  v26 = v27 == 0;
  v28 = v27 >> 1;
  v29 = 0;
  if (!v26)
  {
    v30 = v9;
    v31 = v28;
    do
    {
      v32 = *(unsigned __int16 *)v30;
      v30 += 2;
      v29 = v32 + 542 * v29;
      --v31;
    }
    while (v31);
  }
  v33 = *(int8x8_t *)(v6 + 808);
  v34 = 5.0;
  if (!*(_QWORD *)&v33)
    goto LABEL_38;
  v35 = (uint8x8_t)vcnt_s8(v33);
  v35.i16[0] = vaddlv_u8(v35);
  if (v35.u32[0] > 1uLL)
  {
    v36 = v29;
    if (*(_QWORD *)&v33 <= v29)
      v36 = v29 % *(_QWORD *)&v33;
  }
  else
  {
    v36 = (*(_QWORD *)&v33 - 1) & v29;
  }
  v37 = *(double ***)(*(_QWORD *)(v6 + 800) + 8 * v36);
  if (!v37 || (v38 = *v37) == 0)
  {
LABEL_38:
    v40 = 0;
    if (!v9)
      goto LABEL_40;
    goto LABEL_39;
  }
  while (1)
  {
    v39 = *((_QWORD *)v38 + 1);
    if (v39 == v29)
      break;
    if (v35.u32[0] > 1uLL)
    {
      if (v39 >= *(_QWORD *)&v33)
        v39 %= *(_QWORD *)&v33;
    }
    else
    {
      v39 &= *(_QWORD *)&v33 - 1;
    }
    if (v39 != v36)
      goto LABEL_38;
LABEL_37:
    v38 = *(double **)v38;
    if (!v38)
      goto LABEL_38;
  }
  if (*((_QWORD *)v38 + 2) != v29)
    goto LABEL_37;
  v34 = -(v38[3] - (double)(unint64_t)v28 * -0.35);
  v40 = 1;
  if (v9)
  {
LABEL_39:
    v51 = v9;
    operator delete(v9);
  }
LABEL_40:
  if (v40)
  {
    v11 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
    a3 = v34 + a3;
    v13 = v11[6];
    v41 = v11[7];
    if (v13 < v41)
    {
LABEL_42:
      *(_QWORD *)v13 = a2;
      *(double *)(v13 + 8) = a3;
      v23 = (char *)(v13 + 16);
      goto LABEL_55;
    }
    v42 = v11[5];
    v43 = (uint64_t)(v13 - v42) >> 4;
    v44 = v43 + 1;
    if (!((unint64_t)(v43 + 1) >> 60))
    {
      v45 = v41 - v42;
      if (v45 >> 3 > v44)
        v44 = v45 >> 3;
      if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF0)
        v46 = 0xFFFFFFFFFFFFFFFLL;
      else
        v46 = v44;
      v47 = (char *)sub_20B8F6ECC(v46);
      v20 = &v47[16 * v43];
      v22 = &v47[16 * v48];
      *(_QWORD *)v20 = a2;
      *((double *)v20 + 1) = a3;
      v23 = v20 + 16;
      v49 = (char *)v11[5];
      v24 = (char *)v11[6];
      if (v24 != v49)
      {
        do
        {
          *((_OWORD *)v20 - 1) = *((_OWORD *)v24 - 1);
          v20 -= 16;
          v24 -= 16;
        }
        while (v24 != v49);
        goto LABEL_52;
      }
      goto LABEL_53;
    }
LABEL_58:
    sub_20B80CDD8();
  }
  (*(void (**)(_QWORD, _QWORD *, const char *, double))(**(_QWORD **)(v6 + 952) + 120))(*(_QWORD *)(v6 + 952), a2, "Dropped: ", v34 + a3);
}

void sub_20B9BF220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_20B9BF23C(uint64_t a1, uint64_t a2)
{
  return a2 && (*(_DWORD *)(*(_QWORD *)a2 + 8) - 9) < 2;
}

uint64_t sub_20B9BF260(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  if (!a2)
    return 1;
  while (1)
  {
    v2 = *a2;
    if (*a2)
    {
      v3 = *(uint64_t **)(v2 + 16);
      if (v3)
      {
        v4 = *v3;
        if (v4)
        {
          if ((*(_BYTE *)(v4 + 40) & 0x10) != 0 && *(float *)(v4 + 56) < 1.0)
            break;
        }
      }
      if ((*(_DWORD *)(v2 + 8) - 9) < 2)
        break;
    }
    a2 = (uint64_t *)a2[1];
    if (!a2)
      return 1;
  }
  return 0;
}

void sub_20B9BF2BC(uint64_t a1, int a2)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;

  sub_20B94104C((_QWORD *)(a1 + 16), a2);
  v3 = *(uint64_t **)(a1 + 16);
  v4 = *(uint64_t **)(a1 + 24);
  if (v3 == v4)
  {
    v5 = 0;
  }
  else
  {
    v5 = 0;
    do
    {
      v6 = *v3++;
      v5 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    }
    while (v3 != v4);
  }
  sub_20B9E1A10(a1 + 80, v5, 1);
}

__CFArray *sub_20B9BF328(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  CFMutableArrayRef Mutable;
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v4 = a1[3];
  if (a1[2] == v4 || !(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v4 - 8) + 24))(*(_QWORD *)(v4 - 8)))
    return sub_20B9B2DA8(a1[133], a2);
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  v9[0] = &off_24C46B6E0;
  v9[1] = a1;
  v9[2] = &Mutable;
  v10 = v9;
  sub_20B9EBA78((uint64_t)(a1 + 10), a2, (uint64_t)v9);
  v5 = v10;
  if (v10 == v9)
  {
    v6 = 4;
    v5 = v9;
    goto LABEL_8;
  }
  if (v10)
  {
    v6 = 5;
LABEL_8:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return Mutable;
}

void sub_20B9BF43C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

double sub_20B9BF474(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double v3;
  unsigned int *v4;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  double v10;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 72);
  v3 = -20.0;
  if (v2)
  {
    v4 = *(unsigned int **)(v2 + 40);
    if (v4)
    {
      sub_20B87646C(*(_QWORD *)(v2 + 40));
      v7 = atomic_load(v4 + 10);
      if (v7 == 2)
      {
        v8 = *(_QWORD *)v4;
        if (v8)
        {
          v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, a2);
          if ((_DWORD)v9)
            (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v8 + 40))(v8, v9, 0, 0);
          else
            v10 = -20.0;
          return v10 + *(double *)(a1 + 1304);
        }
      }
    }
  }
  return v3;
}

uint64_t sub_20B9BF524(uint64_t a1, CFStringRef prefix, const __CFString *a3, CFStringRef theString, double a5)
{
  const __CFString *v6;
  const __CFAllocator *v10;
  CFIndex Length;
  CFMutableStringRef MutableCopy;
  CFIndex v13;
  CFIndex v14;
  CFIndex v15;
  uint64_t v16;
  _QWORD *v17;
  const __CFString *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t result;
  __int128 v26;
  _QWORD v27[3];
  void *__p;
  void *v29;
  _QWORD v30[3];
  __int128 v31;
  uint64_t v32;
  CFIndex v33;
  const UniChar *v34;
  CFIndex v35;
  uint64_t v36;
  CFIndex v37;

  v6 = theString;
  if (prefix && a3 && !CFStringHasPrefix(theString, prefix))
  {
    v10 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    Length = CFStringGetLength(a3);
    MutableCopy = CFStringCreateMutableCopy(v10, Length, a3);
    v27[0] = MutableCopy;
    CFStringLowercase(MutableCopy, 0);
    if (CFStringCompare(a3, MutableCopy, 0))
      v6 = a3;
    if (MutableCopy)
      CFRelease(MutableCopy);
  }
  v37 = 0;
  sub_20B8D0624(prefix, &v37, &v36);
  v35 = 0;
  sub_20B8D0624(a3, &v35, &v34);
  v33 = 0;
  sub_20B8D0624(v6, &v33, &v32);
  if (v34)
    v13 = v35;
  else
    v13 = 0;
  v14 = v37;
  v30[0] = 0;
  v30[1] = CFStringCreateWithCharacters(0, v34, v13);
  v30[2] = v14;
  v31 = xmmword_20BA56960;
  v15 = v33;
  if (!v32)
    v15 = 0;
  *(_QWORD *)&v26 = v32;
  *((_QWORD *)&v26 + 1) = v15;
  sub_20B9DDF14((uint64_t)v27, 5, &v26, 0, (uint64_t)v30);
  v16 = operator new();
  sub_20B9C8B6C(v16, a3, prefix, *(int **)(a1 + 8), a1 + 16, 1);
  *(_QWORD *)&v26 = v16;
  v17 = (_QWORD *)operator new();
  *v17 = &off_24C46BC20;
  v17[1] = 0;
  v17[2] = 0;
  v17[3] = v16;
  *((_QWORD *)&v26 + 1) = v17;
  v18 = sub_20B9B9144(*(_QWORD *)(*(_QWORD *)(a1 + 1240) + 64), (uint64_t)v6, *(unsigned __int8 *)(v26 + 239));
  v19 = a1 + 1224;
  if (v18)
  {
    v20 = operator new();
    sub_20B98E3E8(v20, v18, v6, (uint64_t)v27, &v26, 128, 13, a5);
    sub_20B9B8EEC(v19, v20);
    CFRelease(v18);
  }
  else
  {
    v21 = operator new();
    sub_20B98E3E8(v21, v6, 0, (uint64_t)v27, &v26, 128, 13, a5);
    sub_20B9B8EEC(v19, v21);
  }
  v22 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
  if (*((_QWORD *)&v26 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v27[0] = off_24C4693E0;
  if (__p)
  {
    v29 = __p;
    operator delete(__p);
  }
  sub_20B9F8DD0((uint64_t)v30);
  if (v32)
    MEMORY[0x20BD39C80](v32, 0x1000C80BDFB0063);
  if (v34)
    MEMORY[0x20BD39C80](v34, 0x1000C80BDFB0063);
  result = v36;
  if (v36)
    return MEMORY[0x20BD39C80](v36, 0x1000C80BDFB0063);
  return result;
}

void sub_20B9BF85C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, __int16 a11, char a12, char a13, uint64_t a14, void (**a15)(), uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;

  MEMORY[0x20BD39CB0](v28, 0x10E1C403F77FCFDLL);
  sub_20B87E150(&a10, 0);
  sub_20B811FE4((uint64_t)&a11);
  a15 = off_24C4693E0;
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_20B9F8DD0((uint64_t)&a26);
  if (v27)
    MEMORY[0x20BD39C80](v27, 0x1000C80BDFB0063);
  if (v26)
    MEMORY[0x20BD39C80](v26, 0x1000C80BDFB0063);
  v31 = *(_QWORD *)(v29 - 96);
  if (v31)
    MEMORY[0x20BD39C80](v31, 0x1000C80BDFB0063);
  _Unwind_Resume(a1);
}

BOOL sub_20B9BF9AC(uint64_t a1, int a2, char a3)
{
  _BOOL8 result;
  uint64_t v7;
  const __CFString *v8;
  unint64_t Length;
  CFIndex Count;
  unint64_t v11;
  unint64_t v12;
  void *ValueAtIndex;
  const char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;

  if ((*(_DWORD *)(*(_QWORD *)(a1 + 8) + 24) & 0x8000800) != 0)
    return 0;
  v7 = *(_QWORD *)(a1 + 24);
  if (*(_QWORD *)(a1 + 16) == v7 || !*(_BYTE *)(a1 + 40))
    v8 = 0;
  else
    v8 = (const __CFString *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 - 8) + 48))(*(_QWORD *)(v7 - 8));
  Length = CFStringGetLength(v8);
  result = Length - 2 < 0x18;
  if (Length - 2 <= 0x17 && a2)
  {
    if (Length < 5)
      return 0;
    Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 1232));
    result = Count == 0;
    if (Count || (a3 & 1) != 0)
      return result;
    if ((unint64_t)CFArrayGetCount(*(CFArrayRef *)(a1 + 1160)) > 9)
      return 0;
    if (CFArrayGetCount(*(CFArrayRef *)(a1 + 1160)))
    {
      v11 = 0;
      v12 = 0;
      do
      {
        ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 1160), v11);
        if (!MecabraCandidateIsAutocorrectionCandidate(ValueAtIndex, v14, v15))
        {
          v18 = objc_msgSend_rawCandidate(ValueAtIndex, v16, v17);
          if (v18)
            v19 = ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v18 + 104))(v18) >> 9) & 1;
          else
            v19 = 0;
          if (!v19)
            ++v12;
        }
        ++v11;
      }
      while (v11 < CFArrayGetCount(*(CFArrayRef *)(a1 + 1160)));
    }
    else
    {
      v12 = 0;
    }
    return v12 < 2;
  }
  return result;
}

unint64_t sub_20B9BFAEC(uint64_t a1)
{
  unint64_t result;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  result = sub_20B967650(*(_QWORD *)(a1 + 1320));
  if ((_DWORD)result)
  {
    if (*(_BYTE *)(a1 + 1313))
      return 0;
    v6 = 0;
    v3 = *(_QWORD *)(a1 + 1320);
    v7[0] = &off_24C46A660;
    v7[1] = &v6;
    v7[2] = a1;
    v8 = v7;
    sub_20B9676A8(v3, 2, (uint64_t)v7, 0.7, -6.5);
    v4 = v8;
    if (v8 == v7)
    {
      v5 = 4;
      v4 = v7;
    }
    else
    {
      if (!v8)
        return v6 != 0;
      v5 = 5;
    }
    (*(void (**)(void))(*v4 + 8 * v5))();
    return v6 != 0;
  }
  return result;
}

void sub_20B9BFBC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B9BFC00(uint64_t *a1, CFTypeRef cf, const void *a3, char a4, double a5)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t *v23;

  v10 = a1[2];
  v11 = a1[1];
  if (v11 >= v10)
  {
    v14 = (uint64_t)(v11 - *a1) >> 5;
    if ((unint64_t)(v14 + 1) >> 59)
      sub_20B80CDD8();
    v15 = v10 - *a1;
    v16 = v15 >> 4;
    if (v15 >> 4 <= (unint64_t)(v14 + 1))
      v16 = v14 + 1;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFE0)
      v17 = 0x7FFFFFFFFFFFFFFLL;
    else
      v17 = v16;
    v23 = a1 + 2;
    if (v17)
    {
      if (v17 >> 59)
        sub_20B800BC0();
      v18 = (char *)operator new(32 * v17);
    }
    else
    {
      v18 = 0;
    }
    v19 = v18;
    v20 = &v18[32 * v14];
    v22 = &v18[32 * v17];
    sub_20B9C0A00((uint64_t)v20, cf, a3, a4 != 0, a5);
    v21 = v20 + 32;
    sub_20B9C0A74(a1, &v19);
    v13 = a1[1];
    result = sub_20B9C0AE4((uint64_t)&v19);
  }
  else
  {
    result = sub_20B9C0A00(a1[1], cf, a3, a4 != 0, a5);
    v13 = v11 + 32;
    a1[1] = v11 + 32;
  }
  a1[1] = v13;
  return result;
}

void sub_20B9BFD3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B9C0AE4((uint64_t)va);
  _Unwind_Resume(a1);
}

const void ***sub_20B9BFD5C(const void ***a1)
{
  const void **v2;
  const void **v3;
  const void **v4;
  const void **v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = v3 - 4;
        sub_20B87E150(v3 - 3, 0);
        sub_20B87E150(v5, 0);
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_20B9BFDD0(_QWORD *a1, int a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  int v6;
  _QWORD v8[5];

  v4 = (uint64_t *)(a1[6] + 168);
  v5 = a1[133];
  v6 = *(_DWORD *)(a1[1] + 24);
  v8[0] = MEMORY[0x24BDAC760];
  v8[1] = 0x40000000;
  v8[2] = sub_20B9BFE48;
  v8[3] = &unk_24C4A00E0;
  v8[4] = a3;
  return sub_20B9B1570(v5, v4, a2, (v6 << 10) & 0x1000000, (uint64_t)v8);
}

uint64_t sub_20B9BFE48(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2 + 56 * (a3 - 1);
  v4 = *(_QWORD *)(v3 + 32);
  v5 = *(_QWORD *)(v3 + 40);
  while (v4 != v5)
  {
    if (*(_BYTE *)(v4 + 25))
      return (*(uint64_t (**)(void))(*(_QWORD *)(result + 32) + 16))();
    v4 += 32;
  }
  return result;
}

BOOL sub_20B9BFE84(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char *v4;
  BOOL v5;
  char v6;
  char v7;
  uint64_t v8;

  if (a2)
  {
    v3 = 0;
    v4 = (char *)(a3 + 3);
    v5 = 1;
    while (1)
    {
      v7 = *v4;
      v4 += 4;
      v6 = v7;
      if ((v7 & 2) != 0)
      {
        v8 = *(_QWORD *)(a1 + 32);
      }
      else
      {
        v8 = *(_QWORD *)(a1 + 40);
        if ((v6 & 1) == 0)
          goto LABEL_8;
      }
      *(_BYTE *)(*(_QWORD *)(v8 + 8) + 24) = 1;
      v8 = *(_QWORD *)(a1 + 40);
LABEL_8:
      if (!*(_BYTE *)(*(_QWORD *)(v8 + 8) + 24) || !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      {
        v5 = ++v3 < a2;
        if (a2 != v3)
          continue;
      }
      return v5;
    }
  }
  return 0;
}

double *sub_20B9BFEFC(double *result, double *a2, uint64_t a3, char a4)
{
  double *v7;
  double *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  double *v12;
  double v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  double v17;
  double v18;
  double *v19;
  double *v20;
  double *v21;
  double v22;
  double *v23;
  double v24;
  double *v25;
  double v26;
  uint64_t v27;
  double v28;
  double v29;
  BOOL v30;
  double *v31;
  double v32;
  double *v33;
  double v34;
  double *v35;
  double *v36;
  double v37;
  double v38;
  double v39;
  uint64_t v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  uint64_t v48;
  double v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  uint64_t v54;
  double v55;
  double v56;
  double *v57;
  BOOL v59;
  uint64_t v60;
  double *v61;
  double v62;
  double v63;
  double v64;
  uint64_t v65;
  double *v66;
  uint64_t v67;
  int64_t v68;
  int64_t v69;
  int64_t v70;
  uint64_t v71;
  double *v72;
  double v73;
  double v74;
  double *v75;
  uint64_t v76;
  double *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  double v82;
  double v83;
  double *v84;
  double *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  double v90;
  uint64_t v91;
  double *v92;
  double *v94;
  double v95;
  double v96;
  double v97;
  double *v98;
  double *v99;
  uint64_t v100;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v43 = *(a2 - 1);
        v44 = v8[1];
        if (v43 < v44)
        {
          v45 = *v8;
          *v8 = *(a2 - 2);
          *(a2 - 2) = v45;
          v8[1] = v43;
          *(a2 - 1) = v44;
        }
        return result;
      case 3uLL:
        return sub_20B9C068C(v8, v8 + 2, a2 - 2);
      case 4uLL:
        return sub_20B9C0954(v8, v8 + 2, v8 + 4, a2 - 2);
      case 5uLL:
        result = sub_20B9C0954(v8, v8 + 2, v8 + 4, v8 + 6);
        v46 = *(a2 - 1);
        v47 = v8[7];
        if (v46 < v47)
        {
          v48 = *((_QWORD *)v8 + 6);
          v8[6] = *(a2 - 2);
          *((_QWORD *)a2 - 2) = v48;
          v8[7] = v46;
          *(a2 - 1) = v47;
          v49 = v8[7];
          v50 = v8[5];
          if (v49 < v50)
          {
            v51 = *((_QWORD *)v8 + 4);
            v52 = *((_QWORD *)v8 + 6);
            *((_QWORD *)v8 + 4) = v52;
            *((_QWORD *)v8 + 6) = v51;
            v8[5] = v49;
            v8[7] = v50;
            v53 = v8[3];
            if (v49 < v53)
            {
              v54 = *((_QWORD *)v8 + 2);
              *((_QWORD *)v8 + 2) = v52;
              *((_QWORD *)v8 + 4) = v54;
              v8[3] = v49;
              v8[5] = v53;
              v55 = v8[1];
              if (v49 < v55)
              {
                v56 = *v8;
                *(_QWORD *)v8 = v52;
                v8[2] = v56;
                v8[1] = v49;
                v8[3] = v55;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 383)
        {
          v57 = v8 + 2;
          v59 = v8 == a2 || v57 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v59)
            {
              v60 = 0;
              v61 = v8;
              do
              {
                v62 = v61[3];
                v63 = v61[1];
                v61 = v57;
                if (v62 < v63)
                {
                  v64 = *v57;
                  v65 = v60;
                  while (1)
                  {
                    v66 = (double *)((char *)v8 + v65);
                    v66[2] = *(double *)((char *)v8 + v65);
                    v66[3] = *(double *)((char *)v8 + v65 + 8);
                    if (!v65)
                      break;
                    v65 -= 16;
                    if (v62 >= *(v66 - 1))
                    {
                      v67 = (uint64_t)v8 + v65 + 16;
                      goto LABEL_80;
                    }
                  }
                  v67 = (uint64_t)v8;
LABEL_80:
                  *(double *)v67 = v64;
                  *(double *)(v67 + 8) = v62;
                }
                v57 = v61 + 2;
                v60 += 16;
              }
              while (v61 + 2 != a2);
            }
          }
          else if (!v59)
          {
            v94 = v8 + 3;
            do
            {
              v95 = v7[3];
              v96 = v7[1];
              v7 = v57;
              if (v95 < v96)
              {
                v97 = *v57;
                v98 = v94;
                do
                {
                  v99 = v98;
                  *(v98 - 1) = *(v98 - 3);
                  v100 = *((_QWORD *)v98 - 2);
                  v98 -= 2;
                  *(_QWORD *)v99 = v100;
                }
                while (v95 < *(v99 - 4));
                *(v98 - 1) = v97;
                *v98 = v95;
              }
              v57 = v7 + 2;
              v94 += 2;
            }
            while (v7 + 2 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 == a2)
            return result;
          v68 = (v10 - 2) >> 1;
          v69 = v68;
          do
          {
            v70 = v69;
            if (v68 >= v69)
            {
              v71 = (2 * v69) | 1;
              v72 = &v8[2 * v71];
              if (2 * v70 + 2 < (uint64_t)v10 && v72[1] < v72[3])
              {
                v72 += 2;
                v71 = 2 * v70 + 2;
              }
              v73 = v72[1];
              v74 = v8[2 * v70 + 1];
              if (v73 >= v74)
              {
                v75 = &v8[2 * v70];
                v76 = *(_QWORD *)v75;
                do
                {
                  v77 = v75;
                  v75 = v72;
                  *v77 = *v72;
                  v77[1] = v73;
                  if (v68 < v71)
                    break;
                  v78 = 2 * v71;
                  v71 = (2 * v71) | 1;
                  v72 = &v8[2 * v71];
                  v79 = v78 + 2;
                  if (v79 < (uint64_t)v10 && v72[1] < v72[3])
                  {
                    v72 += 2;
                    v71 = v79;
                  }
                  v73 = v72[1];
                }
                while (v73 >= v74);
                *(_QWORD *)v75 = v76;
                v75[1] = v74;
              }
            }
            v69 = v70 - 1;
          }
          while (v70);
          v80 = (unint64_t)v9 >> 4;
          while (2)
          {
            v81 = 0;
            v82 = *v8;
            v83 = v8[1];
            v84 = v8;
            do
            {
              v85 = v84;
              v84 += 2 * v81 + 2;
              v86 = 2 * v81;
              v81 = (2 * v81) | 1;
              v87 = v86 + 2;
              if (v87 < v80 && v84[1] < v84[3])
              {
                v84 += 2;
                v81 = v87;
              }
              *v85 = *v84;
              v85[1] = v84[1];
            }
            while (v81 <= (uint64_t)((unint64_t)(v80 - 2) >> 1));
            if (v84 != a2 - 2)
            {
              *v84 = *(a2 - 2);
              v84[1] = *(a2 - 1);
              *(a2 - 2) = v82;
              *(a2 - 1) = v83;
              v88 = (char *)v84 - (char *)v8 + 16;
              if (v88 >= 17)
              {
                v89 = (((unint64_t)v88 >> 4) - 2) >> 1;
                v90 = v8[2 * v89 + 1];
                v83 = v84[1];
                if (v90 < v83)
                {
                  v91 = *(_QWORD *)v84;
                  do
                  {
                    v92 = v84;
                    v84 = &v8[2 * v89];
                    *v92 = *v84;
                    v92[1] = v90;
                    if (!v89)
                      break;
                    v89 = (v89 - 1) >> 1;
                    v90 = v8[2 * v89 + 1];
                  }
                  while (v90 < v83);
                  *(_QWORD *)v84 = v91;
LABEL_112:
                  v84[1] = v83;
                }
              }
              a2 -= 2;
              if (v80-- <= 2)
                return result;
              continue;
            }
            break;
          }
          *v84 = v82;
          goto LABEL_112;
        }
        v11 = v10 >> 1;
        v12 = &v8[2 * (v10 >> 1)];
        if ((unint64_t)v9 < 0x801)
        {
          result = sub_20B9C068C(&v7[2 * (v10 >> 1)], v7, a2 - 2);
        }
        else
        {
          sub_20B9C068C(v7, &v7[2 * (v10 >> 1)], a2 - 2);
          sub_20B9C068C(v7 + 2, v12 - 2, a2 - 4);
          sub_20B9C068C(v7 + 4, &v7[2 * v11 + 2], a2 - 6);
          result = sub_20B9C068C(v12 - 2, v12, &v7[2 * v11 + 2]);
          v13 = *v7;
          *v7 = *v12;
          *v12 = v13;
          v14 = *((_QWORD *)v7 + 1);
          v7[1] = v12[1];
          *((_QWORD *)v12 + 1) = v14;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v15 = v7[1];
          if (*(v7 - 1) < v15)
            goto LABEL_12;
          if (v15 >= *(a2 - 1))
          {
            v33 = v7 + 2;
            do
            {
              v8 = v33;
              if (v33 >= a2)
                break;
              v34 = v33[1];
              v33 += 2;
            }
            while (v15 >= v34);
          }
          else
          {
            v31 = v7;
            do
            {
              v8 = v31 + 2;
              v32 = v31[3];
              v31 += 2;
            }
            while (v15 >= v32);
          }
          v35 = a2;
          if (v8 < a2)
          {
            v36 = a2;
            do
            {
              v35 = v36 - 2;
              v37 = *(v36 - 1);
              v36 -= 2;
            }
            while (v15 < v37);
          }
          v38 = *v7;
          while (v8 < v35)
          {
            v39 = *v8;
            *v8 = *v35;
            *v35 = v39;
            v40 = *((_QWORD *)v8 + 1);
            v8[1] = v35[1];
            *((_QWORD *)v35 + 1) = v40;
            do
            {
              v41 = v8[3];
              v8 += 2;
            }
            while (v15 >= v41);
            do
            {
              v42 = *(v35 - 1);
              v35 -= 2;
            }
            while (v15 < v42);
          }
          if (v8 - 2 != v7)
          {
            *v7 = *(v8 - 2);
            v7[1] = *(v8 - 1);
          }
          a4 = 0;
          *(v8 - 2) = v38;
          *(v8 - 1) = v15;
          continue;
        }
        v15 = v7[1];
LABEL_12:
        v16 = 0;
        v17 = *v7;
        do
        {
          v18 = v7[v16 + 3];
          v16 += 2;
        }
        while (v18 < v15);
        v19 = &v7[v16];
        v20 = a2;
        if (v16 == 2)
        {
          v23 = a2;
          while (v19 < v23)
          {
            v21 = v23 - 2;
            v24 = *(v23 - 1);
            v23 -= 2;
            if (v24 < v15)
              goto LABEL_22;
          }
          v21 = v23;
        }
        else
        {
          do
          {
            v21 = v20 - 2;
            v22 = *(v20 - 1);
            v20 -= 2;
          }
          while (v22 >= v15);
        }
LABEL_22:
        v8 = v19;
        if (v19 < v21)
        {
          v25 = v21;
          do
          {
            v26 = *v8;
            *v8 = *v25;
            *v25 = v26;
            v27 = *((_QWORD *)v8 + 1);
            v8[1] = v25[1];
            *((_QWORD *)v25 + 1) = v27;
            do
            {
              v28 = v8[3];
              v8 += 2;
            }
            while (v28 < v15);
            do
            {
              v29 = *(v25 - 1);
              v25 -= 2;
            }
            while (v29 >= v15);
          }
          while (v8 < v25);
        }
        if (v8 - 2 != v7)
        {
          *v7 = *(v8 - 2);
          v7[1] = *(v8 - 1);
        }
        *(v8 - 2) = v17;
        *(v8 - 1) = v15;
        if (v19 < v21)
        {
LABEL_33:
          result = (double *)sub_20B9BFEFC(v7, v8 - 2, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v30 = sub_20B9C0744(v7, v8 - 2);
        result = (double *)sub_20B9C0744(v8, a2);
        if (!(_DWORD)result)
        {
          if (v30)
            continue;
          goto LABEL_33;
        }
        a2 = v8 - 2;
        if (!v30)
          goto LABEL_2;
        return result;
    }
  }
}

double *sub_20B9C068C(double *result, double *a2, double *a3)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;

  v3 = a2[1];
  v4 = result[1];
  v5 = a3[1];
  if (v3 >= v4)
  {
    if (v5 < v3)
    {
      v7 = *a2;
      *a2 = *a3;
      *a3 = v7;
      a2[1] = v5;
      a3[1] = v3;
      v8 = a2[1];
      v9 = result[1];
      if (v8 < v9)
      {
        v10 = *result;
        *result = *a2;
        *a2 = v10;
        result[1] = v8;
        a2[1] = v9;
      }
    }
  }
  else
  {
    v6 = *result;
    if (v5 >= v3)
    {
      *result = *a2;
      *a2 = v6;
      result[1] = v3;
      a2[1] = v4;
      v11 = a3[1];
      if (v11 >= v4)
        return result;
      *a2 = *a3;
      *a3 = v6;
      a2[1] = v11;
    }
    else
    {
      *result = *a3;
      *a3 = v6;
      result[1] = v5;
    }
    a3[1] = v4;
  }
  return result;
}

BOOL sub_20B9C0744(double *a1, double *a2)
{
  uint64_t v4;
  _BOOL8 result;
  double v6;
  double v7;
  double v8;
  double *v9;
  double *v10;
  uint64_t v11;
  int v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  double v27;
  double v28;

  v4 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = a1[1];
      if (v6 < v7)
      {
        v8 = *a1;
        *a1 = *(a2 - 2);
        *(a2 - 2) = v8;
        a1[1] = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_20B9C068C(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      sub_20B9C0954(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      sub_20B9C0954(a1, a1 + 2, a1 + 4, a1 + 6);
      v18 = *(a2 - 1);
      v19 = a1[7];
      if (v18 < v19)
      {
        v20 = *((_QWORD *)a1 + 6);
        a1[6] = *(a2 - 2);
        *((_QWORD *)a2 - 2) = v20;
        a1[7] = v18;
        *(a2 - 1) = v19;
        v21 = a1[7];
        v22 = a1[5];
        if (v21 < v22)
        {
          v23 = *((_QWORD *)a1 + 4);
          v24 = *((_QWORD *)a1 + 6);
          *((_QWORD *)a1 + 4) = v24;
          *((_QWORD *)a1 + 6) = v23;
          a1[5] = v21;
          a1[7] = v22;
          v25 = a1[3];
          if (v21 < v25)
          {
            v26 = *((_QWORD *)a1 + 2);
            *((_QWORD *)a1 + 2) = v24;
            *((_QWORD *)a1 + 4) = v26;
            a1[3] = v21;
            a1[5] = v25;
            v27 = a1[1];
            if (v21 < v27)
            {
              v28 = *a1;
              *(_QWORD *)a1 = v24;
              a1[2] = v28;
              a1[1] = v21;
              a1[3] = v27;
            }
          }
        }
      }
      return 1;
    default:
      v9 = a1 + 4;
      sub_20B9C068C(a1, a1 + 2, a1 + 4);
      v10 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = v10[1];
    if (v13 < v9[1])
    {
      v14 = *(_QWORD *)v10;
      v15 = v11;
      while (1)
      {
        v16 = (double *)((char *)a1 + v15);
        v16[6] = *(double *)((char *)a1 + v15 + 32);
        v16[7] = *(double *)((char *)a1 + v15 + 40);
        if (v15 == -32)
          break;
        v15 -= 16;
        if (v13 >= v16[3])
        {
          v17 = (uint64_t)a1 + v15 + 48;
          goto LABEL_13;
        }
      }
      v17 = (uint64_t)a1;
LABEL_13:
      *(_QWORD *)v17 = v14;
      *(double *)(v17 + 8) = v13;
      if (++v12 == 8)
        return v10 + 2 == a2;
    }
    v9 = v10;
    v11 += 16;
    v10 += 2;
    if (v10 == a2)
      return 1;
  }
}

double *sub_20B9C0954(double *a1, double *a2, double *a3, double *a4)
{
  double *result;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;

  result = sub_20B9C068C(a1, a2, a3);
  v9 = a4[1];
  v10 = a3[1];
  if (v9 < v10)
  {
    v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    a3[1] = v9;
    a4[1] = v10;
    v12 = a3[1];
    v13 = a2[1];
    if (v12 < v13)
    {
      v14 = *a2;
      *a2 = *a3;
      *a3 = v14;
      a2[1] = v12;
      a3[1] = v13;
      v15 = a2[1];
      v16 = a1[1];
      if (v15 < v16)
      {
        v17 = *a1;
        *a1 = *a2;
        *a2 = v17;
        a1[1] = v15;
        a2[1] = v16;
      }
    }
  }
  return result;
}

uint64_t sub_20B9C0A00(uint64_t a1, CFTypeRef cf, const void *a3, char a4, double a5)
{
  *(_QWORD *)a1 = CFRetain(cf);
  *(_QWORD *)(a1 + 8) = CFRetain(a3);
  *(_BYTE *)(a1 + 16) = a4;
  *(double *)(a1 + 24) = a5;
  return a1;
}

void sub_20B9C0A5C(_Unwind_Exception *a1)
{
  const void **v1;

  sub_20B87E150(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B9C0A74(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    v5 = *(_QWORD *)(v2 - 32);
    v2 -= 32;
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v4 - 32) = v5;
    v4 -= 32;
    v6 = *(_QWORD *)(v2 + 8);
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v4 + 8) = v6;
    *(_OWORD *)(v4 + 16) = *(_OWORD *)(v2 + 16);
  }
  a2[1] = v4;
  v7 = *result;
  *result = v4;
  a2[1] = v7;
  v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20B9C0AE4(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  const void **v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (const void **)(i - 32);
    *(_QWORD *)(a1 + 16) = i - 32;
    sub_20B87E150((const void **)(i - 24), 0);
    sub_20B87E150(v4, 0);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

const void **sub_20B9C0B4C(const void **a1)
{
  sub_20B87E150(a1 + 1, 0);
  sub_20B87E150(a1, 0);
  return a1;
}

void sub_20B9C0B84(uint64_t a1, CFStringRef *a2, uint64_t a3, char a4)
{
  unint64_t j;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  CFStringRef v11;
  const void *v12;
  const void *v13;
  const void *v14;
  double v15;
  double v16;
  CFIndex v17;
  uint64_t v18;
  const __CFString *v19;
  uint64_t v20;
  double v21;
  double v22;
  CFIndex v23;
  unint64_t v24;
  unint64_t v25;
  double v26;
  CFStringRef *v27;
  CFIndex v28;
  double v29;
  double v30;
  unint64_t v31;
  double v32;
  CFIndex v33;
  double v34;
  unint64_t v35;
  CFIndex v36;
  double v37;
  const void *v38;
  const void *v39;
  BOOL v40;
  CFStringRef *v41;
  CFIndex v42;
  BOOL v43;
  double v44;
  const __CFString *v45;
  uint64_t v46;
  double v47;
  CFIndex v48;
  double v49;
  double v50;
  CFIndex v51;
  double *v52;
  CFIndex v53;
  double v54;
  unint64_t k;
  double v56;
  CFIndex v57;
  double v58;
  double *v59;
  CFIndex v60;
  double v61;
  double v62;
  CFIndex v63;
  const void *v64;
  const void *v65;
  double v66;
  double v67;
  CFIndex Length;
  CFStringRef *v69;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  double v75;
  double v76;
  CFIndex v77;
  const void *v78;
  const __CFString *v79;
  uint64_t v80;
  double v81;
  CFStringRef v82;
  const void *v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  double v87;
  CFIndex v88;
  const void *v89;
  const void *v90;
  int64_t v91;
  int64_t v92;
  int64_t v93;
  uint64_t v94;
  uint64_t v95;
  double v96;
  double v97;
  CFIndex v98;
  double v99;
  uint64_t v100;
  double *v101;
  double v102;
  double v103;
  BOOL v104;
  uint64_t v105;
  CFIndex v106;
  uint64_t v107;
  const void *v108;
  CFStringRef v109;
  const void *v110;
  uint64_t i;
  uint64_t v112;
  uint64_t v113;
  double v114;
  double v115;
  CFIndex v116;
  BOOL v117;
  double v118;
  CFIndex v119;
  CFStringRef v120;
  const void *v121;
  uint64_t v122;
  const void **v123;
  uint64_t v124;
  const void **v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  double v130;
  double v131;
  CFIndex v132;
  CFStringRef v133;
  const void *v134;
  _OWORD *v135;
  const void *v136;
  const void **v137;
  const void *v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  double v143;
  double v144;
  CFIndex v145;
  const __CFString *v146;
  CFStringRef v147;
  const void *v148;
  _QWORD *v149;
  uint64_t v150;
  unint64_t v151;
  double v152;
  CFIndex v153;
  CFStringRef v154;
  const void *v155;
  _OWORD *v156;
  uint64_t v157;
  double v158;
  double v159;
  CFIndex v160;
  const __CFString *v161;
  const void *v162;
  uint64_t v163;
  _OWORD *v164;
  double v165;
  const void *v166;
  const void *v167;
  double v168;
  CFIndex v169;
  uint64_t v170;
  uint64_t v171;
  CFStringRef *v172;
  uint64_t v174;
  uint64_t v175;
  const void *v176;
  uint64_t v177;
  CFStringRef theString;
  CFStringRef theStringa;
  const __CFString *theStringb;
  CFStringRef *v181;
  const void *v182;
  CFStringRef v183;
  const void *v184;
  unint64_t v185;
  const void *v186;
  const void **v187;
  __int128 v188;
  __int128 v189;

void sub_20B9C19F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, CFTypeRef a13, CFTypeRef cf, CFTypeRef a15, CFTypeRef a16)
{
  const void *v16;

  if (cf)
    CFRelease(cf);
  if (v16)
    CFRelease(v16);
  _Unwind_Resume(exception_object);
}

__n128 sub_20B9C1B4C(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void **v5;
  const void *v6;
  const void *v7;
  const void *v8;
  __n128 result;
  __n128 v10;

  v4 = *(const void **)a1;
  v5 = (const void **)(a1 + 8);
  v6 = *(const void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = 0;
  v10 = *(__n128 *)(a1 + 16);
  v7 = *(const void **)a2;
  *(_QWORD *)a2 = 0;
  sub_20B87E150((const void **)a1, v7);
  v8 = *(const void **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  sub_20B87E150(v5, v8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_20B87E150((const void **)a2, v4);
  sub_20B87E150((const void **)(a2 + 8), v6);
  result = v10;
  *(__n128 *)(a2 + 16) = v10;
  return result;
}

double sub_20B9C1BE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double result;
  double v11;
  CFIndex v12;
  double v13;
  CFIndex v14;
  double v15;
  CFIndex v16;
  double v17;
  CFIndex Length;

  sub_20B9C2138(a1, a2, a3, a4);
  result = *(double *)(a5 + 24);
  v11 = *(double *)(a4 + 24);
  if (result > v11
    || result == v11 && (v12 = CFStringGetLength(*(CFStringRef *)a5), v12 < CFStringGetLength(*(CFStringRef *)a4)))
  {
    sub_20B9C1B4C(a4, a5);
    result = *(double *)(a4 + 24);
    v13 = *(double *)(a3 + 24);
    if (result > v13
      || result == v13 && (v14 = CFStringGetLength(*(CFStringRef *)a4), v14 < CFStringGetLength(*(CFStringRef *)a3)))
    {
      sub_20B9C1B4C(a3, a4);
      result = *(double *)(a3 + 24);
      v15 = *(double *)(a2 + 24);
      if (result > v15
        || result == v15 && (v16 = CFStringGetLength(*(CFStringRef *)a3), v16 < CFStringGetLength(*(CFStringRef *)a2)))
      {
        sub_20B9C1B4C(a2, a3);
        result = *(double *)(a2 + 24);
        v17 = *(double *)(a1 + 24);
        if (result > v17
          || result == v17
          && (Length = CFStringGetLength(*(CFStringRef *)a2), Length < CFStringGetLength(*(CFStringRef *)a1)))
        {
          *(_QWORD *)&result = sub_20B9C1B4C(a1, a2).n128_u64[0];
        }
      }
    }
  }
  return result;
}

double sub_20B9C1D28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;
  double v7;
  CFIndex v8;
  CFIndex v9;
  double v10;
  CFIndex Length;
  uint64_t v12;
  double v13;
  CFIndex v14;
  double v15;
  CFIndex v16;
  double v17;
  CFIndex v18;

  result = *(double *)(a2 + 24);
  v7 = *(double *)(a1 + 24);
  if (result > v7
    || result == v7
    && (v8 = CFStringGetLength(*(CFStringRef *)a2),
        v9 = CFStringGetLength(*(CFStringRef *)a1),
        result = *(double *)(a2 + 24),
        v8 < v9))
  {
    v10 = *(double *)(a3 + 24);
    if (v10 > result
      || v10 == result
      && (Length = CFStringGetLength(*(CFStringRef *)a3), Length < CFStringGetLength(*(CFStringRef *)a2)))
    {
      v12 = a1;
LABEL_19:
      *(_QWORD *)&result = sub_20B9C1B4C(v12, a3).n128_u64[0];
      return result;
    }
    sub_20B9C1B4C(a1, a2);
    result = *(double *)(a3 + 24);
    v17 = *(double *)(a2 + 24);
    if (result > v17
      || result == v17 && (v18 = CFStringGetLength(*(CFStringRef *)a3), v18 < CFStringGetLength(*(CFStringRef *)a2)))
    {
      v12 = a2;
      goto LABEL_19;
    }
  }
  else
  {
    v13 = *(double *)(a3 + 24);
    if (v13 > result
      || v13 == result && (v14 = CFStringGetLength(*(CFStringRef *)a3), v14 < CFStringGetLength(*(CFStringRef *)a2)))
    {
      sub_20B9C1B4C(a2, a3);
      result = *(double *)(a2 + 24);
      v15 = *(double *)(a1 + 24);
      if (result > v15
        || result == v15 && (v16 = CFStringGetLength(*(CFStringRef *)a2), v16 < CFStringGetLength(*(CFStringRef *)a1)))
      {
        *(_QWORD *)&result = sub_20B9C1B4C(a1, a2).n128_u64[0];
      }
    }
  }
  return result;
}

BOOL sub_20B9C1E84(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  CFStringRef *v6;
  double v7;
  double v8;
  CFIndex Length;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  double v14;
  double v15;
  CFIndex v16;
  __int128 v17;
  __int128 v18;
  CFStringRef v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  CFStringRef v24;
  CFIndex v25;
  const void *v26;
  const void *v27;
  _OWORD *v28;
  const void **v29;
  uint64_t v30;
  const void **v31;
  CFStringRef theString[2];
  __int128 v33;

  v4 = (a2 - a1) >> 5;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (CFStringRef *)(a2 - 32);
      v7 = *(double *)(a2 - 8);
      v8 = *(double *)(a1 + 24);
      if (v7 > v8)
        goto LABEL_5;
      if (v7 == v8)
      {
        Length = CFStringGetLength(*v6);
        if (Length >= CFStringGetLength(*(CFStringRef *)a1))
          return 1;
LABEL_5:
        sub_20B9C1B4C(a1, (uint64_t)v6);
        return 1;
      }
      return result;
    case 3:
      sub_20B9C1D28(a1, a1 + 32, a2 - 32);
      return 1;
    case 4:
      sub_20B9C2138(a1, a1 + 32, a1 + 64, a2 - 32);
      return 1;
    case 5:
      sub_20B9C1BE8(a1, a1 + 32, a1 + 64, a1 + 96, a2 - 32);
      return 1;
    default:
      v10 = a1 + 64;
      sub_20B9C1D28(a1, a1 + 32, a1 + 64);
      v11 = a1 + 96;
      if (a1 + 96 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    v14 = *(double *)(v11 + 24);
    v15 = *(double *)(v10 + 24);
    if (v14 > v15
      || v14 == v15 && (v16 = CFStringGetLength(*(CFStringRef *)v11), v16 < CFStringGetLength(*(CFStringRef *)v10)))
    {
      v17 = *(_OWORD *)v11;
      v18 = *(_OWORD *)(v11 + 16);
      *(_QWORD *)v11 = 0;
      *(_QWORD *)(v11 + 8) = 0;
      *(_OWORD *)theString = v17;
      v33 = v18;
      v19 = *(CFStringRef *)v10;
      *(_QWORD *)v10 = 0;
      sub_20B87E150((const void **)v11, v19);
      v20 = *(const void **)(v10 + 8);
      *(_QWORD *)(v10 + 8) = 0;
      sub_20B87E150((const void **)(v11 + 8), v20);
      *(_OWORD *)(v11 + 16) = *(_OWORD *)(v10 + 16);
      if (v10 == a1)
      {
        v28 = (_OWORD *)(v10 + 16);
LABEL_19:
        v24 = theString[0];
        v29 = (const void **)a1;
      }
      else
      {
        v21 = v12;
        while (1)
        {
          v22 = a1 + v21;
          v23 = *(double *)(a1 + v21 + 56);
          if (*((double *)&v33 + 1) <= v23)
          {
            v24 = theString[0];
            if (*((double *)&v33 + 1) != v23)
              break;
            v25 = CFStringGetLength(theString[0]);
            if (v25 >= CFStringGetLength(*(CFStringRef *)(v22 + 32)))
              break;
          }
          v26 = *(const void **)(v22 + 32);
          *(_QWORD *)(v22 + 32) = 0;
          sub_20B87E150((const void **)(v22 + 64), v26);
          v27 = *(const void **)(v22 + 40);
          *(_QWORD *)(v22 + 40) = 0;
          sub_20B87E150((const void **)(v22 + 72), v27);
          *(_OWORD *)(v22 + 80) = *(_OWORD *)(v22 + 48);
          v21 -= 32;
          if (v21 == -64)
          {
            v28 = (_OWORD *)(a1 + 16);
            goto LABEL_19;
          }
        }
        v30 = a1 + v21;
        v28 = (_OWORD *)(a1 + v21 + 80);
        v29 = (const void **)(v30 + 64);
      }
      v31 = v29 + 1;
      sub_20B87E150(v29, v24);
      sub_20B87E150(v31, theString[1]);
      *v28 = v33;
      if (++v13 == 8)
        return v11 + 32 == a2;
    }
    v10 = v11;
    v12 += 32;
    v11 += 32;
    if (v11 == a2)
      return 1;
  }
}

void sub_20B9C2124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  sub_20B9C0B4C(&a9);
  _Unwind_Resume(a1);
}

double sub_20B9C2138(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double result;
  double v9;
  CFIndex v10;
  double v11;
  CFIndex v12;
  double v13;
  CFIndex Length;

  sub_20B9C1D28(a1, a2, a3);
  result = *(double *)(a4 + 24);
  v9 = *(double *)(a3 + 24);
  if (result > v9
    || result == v9 && (v10 = CFStringGetLength(*(CFStringRef *)a4), v10 < CFStringGetLength(*(CFStringRef *)a3)))
  {
    sub_20B9C1B4C(a3, a4);
    result = *(double *)(a3 + 24);
    v11 = *(double *)(a2 + 24);
    if (result > v11
      || result == v11 && (v12 = CFStringGetLength(*(CFStringRef *)a3), v12 < CFStringGetLength(*(CFStringRef *)a2)))
    {
      sub_20B9C1B4C(a2, a3);
      result = *(double *)(a2 + 24);
      v13 = *(double *)(a1 + 24);
      if (result > v13
        || result == v13
        && (Length = CFStringGetLength(*(CFStringRef *)a2), Length < CFStringGetLength(*(CFStringRef *)a1)))
      {
        *(_QWORD *)&result = sub_20B9C1B4C(a1, a2).n128_u64[0];
      }
    }
  }
  return result;
}

void sub_20B9C223C()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B9C2250(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C46A6B8;
  result[1] = v3;
  return result;
}

uint64_t sub_20B9C2284(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C46A6B8;
  a2[1] = v2;
  return result;
}

uint64_t sub_20B9C22A0(uint64_t a1, uint64_t *a2, uint64_t **a3, uint64_t **a4)
{
  return sub_20B9BA7B8(*(_QWORD *)(a1 + 8), *a2, *a3, *a4);
}

uint64_t sub_20B9C22B4(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45EEF0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B9C22F0()
{
  return &unk_24C45EEF0;
}

uint64_t sub_20B9C22FC(uint64_t *a1, _QWORD *a2, int *a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t result;

  v8 = operator new(0x110uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_24C46B830;
  result = sub_20B9C7DDC((uint64_t)(v8 + 3), 0, a2, a3, a4);
  *a1 = result;
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_20B9C2368(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_20B9C2380(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C46B830;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B9C2390(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C46B830;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B9C23C0(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_20B9C23D4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B9C23F8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20B9C2410(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45E568))
    return a1 + 24;
  else
    return 0;
}

void sub_20B9C2454()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B9C2468(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C46B6E0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20B9C24A0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C46B6E0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20B9C24C0(uint64_t a1, uint64_t a2, const void **a3)
{
  CFArrayAppendValue(**(CFMutableArrayRef **)(a1 + 16), *a3);
}

uint64_t sub_20B9C24D0(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45F1E0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B9C250C()
{
  return &unk_24C45F1E0;
}

void sub_20B9C251C()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B9C2530(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C46A608;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20B9C2568(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C46A608;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20B9C2588(uint64_t a1, const __CFString **a2, CFStringRef *a3, double *a4)
{
  const __CFString *v4;
  const __CFString *v5;
  BOOL v6;
  double v8;
  uint64_t v9;
  CFIndex Length;
  uint64_t v11;
  const __CFString *v12;
  CFIndex v13;
  CFIndex v14;
  double v15;
  CFMutableStringRef MutableCopy;
  const __CFString *v17;
  const __CFString *v18;
  CFRange v19;
  CFRange v20;

  v4 = *a2;
  v5 = *a3;
  if (*a2)
    v6 = v5 == 0;
  else
    v6 = 1;
  if (!v6)
  {
    v8 = *a4;
    v9 = *(_QWORD *)(a1 + 8);
    Length = CFStringGetLength(*a3);
    v11 = *(_QWORD *)(v9 + 24);
    if (*(_QWORD *)(v9 + 16) == v11 || !*(_BYTE *)(v9 + 40))
      v12 = 0;
    else
      v12 = (const __CFString *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 - 8) + 48))(*(_QWORD *)(v11 - 8));
    v13 = CFStringGetLength(v12);
    if (Length)
    {
      if (**(_BYTE **)(a1 + 16) || (v14 = v13, v15 = sub_20B9BF474(v9, (uint64_t)v4), v8 = v15, **(_BYTE **)(a1 + 16)))
      {
        if (!CFStringHasSuffix(v4, CFSTR("'")) && !CFStringHasSuffix(v4, CFSTR("'s")))
        {
          MutableCopy = CFStringCreateMutableCopy(0, 0, v5);
          v20.length = CFStringGetLength(v5) - 2;
          v20.location = 1;
          CFStringFindAndReplace(MutableCopy, CFSTR(" "), &stru_24C4B3660, v20, 0);
          sub_20B9BF524(v9, MutableCopy, v5, v4, v8);
          if (MutableCopy)
            CFRelease(MutableCopy);
        }
      }
      else if (v14 >= Length)
      {
        sub_20B9BF524(v9, v5, v5, v4, v15);
      }
      else
      {
        v19.location = 0;
        v19.length = v14;
        v17 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x24BDBD240], v5, v19);
        if (v17)
        {
          v18 = v17;
          sub_20B9BF524(v9, v17, v5, v4, v8);
          CFRelease(v18);
        }
      }
    }
  }
}

void sub_20B9C2750(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9C2784(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45EED0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B9C27C0()
{
  return &unk_24C45EED0;
}

void sub_20B9C27D0()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B9C27E4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C46A660;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20B9C281C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C46A660;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20B9C283C(uint64_t a1, uint64_t *a2, const __CFString **a3, double *a4)
{
  const __CFString *v5;
  const __CFString *v6;
  double v7;
  uint64_t v8;

  v5 = (const __CFString *)*a2;
  v6 = *a3;
  v7 = *a4;
  v8 = *(_QWORD *)(a1 + 16);
  if (sub_20B9BF474(v8, *a2) >= -8.5)
  {
    sub_20B9BF524(v8, 0, v6, v5, v7);
    **(_BYTE **)(a1 + 8) = 1;
  }
}

uint64_t sub_20B9C28B4(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45EEE0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B9C28F0()
{
  return &unk_24C45EEE0;
}

void sub_20B9C2900()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B9C2914(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24C46A5B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_20B9C2954(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C46A5B0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20B9C297C(uint64_t result, const __CFString **a2, const void **a3, double *a4)
{
  const __CFString *v4;
  const void *v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  double v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t *v25;

  v4 = *a2;
  v5 = *a3;
  if (*a2)
    v6 = v5 == 0;
  else
    v6 = 1;
  if (v6)
    return result;
  v7 = result;
  v8 = *(_QWORD *)(result + 8);
  v9 = *(char **)(result + 24);
  if (*v9)
  {
    v10 = *a4;
    result = CFStringHasSuffix(v4, CFSTR("'"));
    if ((_DWORD)result)
      return result;
    result = CFStringHasSuffix(v4, CFSTR("'s"));
    if ((_DWORD)result)
      return result;
    v12 = v7 + 16;
    v11 = *(uint64_t **)(v7 + 16);
    v9 = *(char **)(v12 + 8);
    if (*v9)
      goto LABEL_12;
  }
  else
  {
    v11 = *(uint64_t **)(result + 16);
  }
  v10 = sub_20B9BF474(v8, (uint64_t)v4);
LABEL_12:
  v13 = v11[2];
  v14 = v11[1];
  if (v14 >= v13)
  {
    v16 = (uint64_t)(v14 - *v11) >> 5;
    if ((unint64_t)(v16 + 1) >> 59)
      sub_20B80CDD8();
    v17 = v13 - *v11;
    v18 = v17 >> 4;
    if (v17 >> 4 <= (unint64_t)(v16 + 1))
      v18 = v16 + 1;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0)
      v19 = 0x7FFFFFFFFFFFFFFLL;
    else
      v19 = v18;
    v25 = v11 + 2;
    if (v19)
    {
      if (v19 >> 59)
        sub_20B800BC0();
      v20 = (char *)operator new(32 * v19);
    }
    else
    {
      v20 = 0;
    }
    v21 = v20;
    v22 = &v20[32 * v16];
    v23 = (uint64_t)v22;
    v24 = &v20[32 * v19];
    sub_20B9C0A00((uint64_t)v22, v4, v5, *v9, v10);
    v23 = (uint64_t)(v22 + 32);
    sub_20B9C0A74(v11, &v21);
    v15 = v11[1];
    result = sub_20B9C0AE4((uint64_t)&v21);
  }
  else
  {
    result = sub_20B9C0A00(v11[1], v4, v5, *v9, v10);
    v15 = v14 + 32;
    v11[1] = v14 + 32;
  }
  v11[1] = v15;
  return result;
}

void sub_20B9C2B14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B9C0AE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9C2B34(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45EEC0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B9C2B70()
{
  return &unk_24C45EEC0;
}

_QWORD *sub_20B9C2B7C(_QWORD *a1)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 1024;
  a1[4] = 0;
  a1[5] = 0;
  sub_20B9C2E0C(a1 + 6, 256);
  return a1;
}

void sub_20B9C2BC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B9C2D6C((void ***)va);
  _Unwind_Resume(a1);
}

void **sub_20B9C2BD8(void **a1)
{
  void **v3;

  sub_20B9C2DAC((uint64_t)a1, *a1);
  a1[4] = 0;
  a1[5] = 0;
  sub_20B95515C((uint64_t)(a1 + 6));
  sub_20B958794((uint64_t)(a1 + 6));
  v3 = a1;
  sub_20B9C2D6C(&v3);
  return a1;
}

char *sub_20B9C2C30(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  size_t v5;
  char *v6;
  unint64_t v7;
  char **v8;
  _QWORD *v9;
  char **v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    v4 = *(char **)(a1 + 32);
    v3 = *(_QWORD *)(a1 + 40);
    v5 = (size_t)&v4[-v2];
    if (v3 != (uint64_t)&v4[-v2] >> 6)
      goto LABEL_23;
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 40) << 6;
  }
  v6 = (char *)malloc_type_malloc(v5, 0x1030040F03CD2BDuLL);
  v4 = v6;
  v8 = *(char ***)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v8 >= v7)
  {
    v10 = *(char ***)a1;
    v11 = ((uint64_t)v8 - *(_QWORD *)a1) >> 3;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 61)
      sub_20B80CDD8();
    v13 = v7 - (_QWORD)v10;
    if (v13 >> 2 > v12)
      v12 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 61)
        sub_20B800BC0();
      v15 = (char *)operator new(8 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[8 * v11];
    *(_QWORD *)v16 = v4;
    v9 = v16 + 8;
    if (v8 != v10)
    {
      do
      {
        v17 = (uint64_t)*--v8;
        *((_QWORD *)v16 - 1) = v17;
        v16 -= 8;
      }
      while (v8 != v10);
      v8 = *(char ***)a1;
    }
    *(_QWORD *)a1 = v16;
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = &v15[8 * v14];
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v8 = v6;
    v9 = v8 + 1;
  }
  *(_QWORD *)(a1 + 8) = v9;
  *(_QWORD *)(a1 + 24) = v4;
LABEL_23:
  ++*(_DWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = v4 + 64;
  return v4;
}

void sub_20B9C2D6C(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_20B9C2DAC((uint64_t)v2, *v2);
    operator delete(**a1);
  }
}

uint64_t sub_20B9C2DAC(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v3 = result;
  v4 = *(_QWORD **)(result + 8);
  while (v4 != a2)
  {
    v5 = *--v4;
    result = v5;
    *v4 = 0;
    if (v5)
      result = MEMORY[0x20BD39C80](result, 0x1000C8077774924);
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

_QWORD *sub_20B9C2E0C(_QWORD *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[5] = a2;
  sub_20B95515C((uint64_t)a1);
  return a1;
}

void sub_20B9C2E3C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B9C2E58(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = a2;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 120) = 0;
  sub_20B9C2F0C((_QWORD *)a1);
  return a1;
}

void sub_20B9C2EB0(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v4 = (void *)v1[13];
  if (v4)
  {
    v1[14] = v4;
    operator delete(v4);
  }
  v5 = (void *)v1[10];
  if (v5)
  {
    v1[11] = v5;
    operator delete(v5);
  }
  v6 = (void *)v1[7];
  if (v6)
  {
    v1[8] = v6;
    operator delete(v6);
  }
  v7 = (void *)v1[4];
  if (v7)
  {
    v1[5] = v7;
    operator delete(v7);
  }
  v8 = *v2;
  if (*v2)
  {
    v1[2] = v8;
    operator delete(v8);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B9C2F0C(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  char *v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;

  v2 = (uint64_t)(a1 + 12);
  v3 = a1[12];
  v4 = (char *)a1[11];
  if ((unint64_t)v4 >= v3)
  {
    v6 = (char *)a1[10];
    v7 = (v4 - v6) >> 3;
    if ((unint64_t)(v7 + 1) >> 61)
      goto LABEL_34;
    v8 = v3 - (_QWORD)v6;
    v9 = (uint64_t)(v3 - (_QWORD)v6) >> 2;
    if (v9 <= v7 + 1)
      v9 = v7 + 1;
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    if (v10)
    {
      v11 = (char *)sub_20B800BE8(v2, v10);
      v6 = (char *)a1[10];
      v4 = (char *)a1[11];
    }
    else
    {
      v11 = 0;
    }
    v12 = &v11[8 * v7];
    v13 = &v11[8 * v10];
    *(_QWORD *)v12 = 0;
    v5 = v12 + 8;
    while (v4 != v6)
    {
      v14 = *((_QWORD *)v4 - 1);
      v4 -= 8;
      *((_QWORD *)v12 - 1) = v14;
      v12 -= 8;
    }
    a1[10] = v12;
    a1[11] = v5;
    a1[12] = v13;
    if (v6)
      operator delete(v6);
  }
  else
  {
    *(_QWORD *)v4 = 0;
    v5 = v4 + 8;
  }
  v15 = a1[15];
  a1[11] = v5;
  v16 = (char *)a1[14];
  if ((unint64_t)v16 < v15)
  {
    *(_QWORD *)v16 = 0;
    v17 = v16 + 8;
    goto LABEL_33;
  }
  v18 = (char *)a1[13];
  v19 = (v16 - v18) >> 3;
  if ((unint64_t)(v19 + 1) >> 61)
LABEL_34:
    sub_20B80CDD8();
  v20 = v15 - (_QWORD)v18;
  v21 = (uint64_t)(v15 - (_QWORD)v18) >> 2;
  if (v21 <= v19 + 1)
    v21 = v19 + 1;
  if (v20 >= 0x7FFFFFFFFFFFFFF8)
    v22 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v22 = v21;
  if (v22)
  {
    v23 = (char *)sub_20B800BE8((uint64_t)(a1 + 15), v22);
    v18 = (char *)a1[13];
    v16 = (char *)a1[14];
  }
  else
  {
    v23 = 0;
  }
  v24 = &v23[8 * v19];
  v25 = &v23[8 * v22];
  *(_QWORD *)v24 = 0;
  v17 = v24 + 8;
  while (v16 != v18)
  {
    v26 = *((_QWORD *)v16 - 1);
    v16 -= 8;
    *((_QWORD *)v24 - 1) = v26;
    v24 -= 8;
  }
  a1[13] = v24;
  a1[14] = v17;
  a1[15] = v25;
  if (v18)
    operator delete(v18);
LABEL_33:
  a1[14] = v17;
}

_WORD *sub_20B9C3090(uint64_t a1, uint64_t a2, void **a3, void **a4, void **a5, unint64_t a6)
{
  void **v7;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _WORD *v31;
  _WORD *v32;
  unint64_t v34;
  unint64_t v35;
  _WORD *v37;
  _WORD *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  void *__p;
  __int128 *v46;
  uint64_t v47;

  v7 = a3;
  v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3);
  if (v10 >= a6)
    v11 = a6;
  else
    v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3);
  v12 = v10 - v11;
  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8 * v12);
  v14 = *(_QWORD *)(a1 + 56);
  v15 = (*(_QWORD *)(a1 + 64) - v14) >> 1;
  v16 = v15 - v13;
  v40 = v15;
  v41 = v14;
  if (!v14)
    v16 = 0;
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v12);
  v18 = *(_QWORD *)(a1 + 32);
  if (v15 <= v13)
    v16 = 0;
  v43 = v16;
  v19 = (*(_QWORD *)(a1 + 40) - v18) >> 1;
  v20 = v19 - v17;
  v39 = *(_QWORD *)(a1 + 32);
  if (!v18)
    v20 = 0;
  v34 = v13;
  v35 = (*(_QWORD *)(a1 + 40) - v18) >> 1;
  if (v19 <= v17)
    v20 = 0;
  v44 = v20;
  if (a2)
  {
    v37 = (_WORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 544))(a2);
    v22 = v21;
    v38 = (_WORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 552))(a2);
    v24 = v23;
    v25 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 304))(a2);
    v26 = (v25[1] - *v25) / 40;
    v27 = v26 + v11;
    if (v25[1] == *v25)
    {
      v7 = a3;
      v29 = v24;
    }
    else
    {
      v28 = 0;
      do
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 560))(a2, v28);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 560))(a2, v28++);
      }
      while (v26 != v28);
      v7 = a3;
      v29 = v24;
    }
  }
  else
  {
    v37 = 0;
    v38 = 0;
    v22 = 0;
    v29 = 0;
    v27 = v11;
  }
  sub_20B8B3708(a5, v27);
  sub_20B87D570(v7, v22 + v44);
  sub_20B87D570(a4, v29 + v43);
  sub_20B8F4258((__int128 *)(*(_QWORD *)(a1 + 16) - 40 * v11), *(__int128 **)(a1 + 16), a5);
  if (a2)
  {
    v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 304))(a2);
    v46 = 0;
    v47 = 0;
    __p = 0;
    sub_20B882248(&__p, *(const void **)v30, *(_QWORD *)(v30 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v30 + 8) - *(_QWORD *)v30) >> 3));
    sub_20B8F4258((__int128 *)__p, v46, a5);
    if (__p)
    {
      v46 = (__int128 *)__p;
      operator delete(__p);
    }
  }
  if (v40 <= v34)
    v31 = 0;
  else
    v31 = (_WORD *)(v41 + 2 * v34);
  if (v35 <= v17)
    v32 = 0;
  else
    v32 = (_WORD *)(v39 + 2 * v17);
  sub_20B8B17F4(v32, &v32[v44], (uint64_t)v7);
  sub_20B8B17F4(v37, &v37[v22], (uint64_t)v7);
  sub_20B8B17F4(v31, &v31[v43], (uint64_t)a4);
  return sub_20B8B17F4(v38, &v38[v29], (uint64_t)a4);
}

void sub_20B9C3360(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_20B9C337C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 *v7;
  __int16 *v8;

  v1 = a1[1];
  v2 = a1[2] - v1;
  if (!v2)
    return 0;
  v3 = 0xCCCCCCCCCCCCCCCDLL * (v2 >> 3) - 1;
  if (*(_WORD *)(v1 + 40 * v3 + 24) != 1)
    return 0;
  v4 = *(_QWORD *)(a1[10] + 8 * v3);
  v5 = a1[4];
  v6 = a1[5] - v5;
  v7 = (__int16 *)(v5 + 2 * v4);
  if (v4 >= v6 >> 1)
    v8 = 0;
  else
    v8 = v7;
  return sub_20B8D9E98(*v8);
}

void sub_20B9C33DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void **v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  unint64_t *v41;
  unint64_t v42;
  void **v43;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 304))(a2);
  sub_20B8B35B4((char *)(a1 + 8), *(char **)v4, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v4 + 8) - *(_QWORD *)v4) >> 3));
  v5 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 544))(a2);
  v7 = v6;
  v8 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 552))(a2);
  v10 = v9;
  sub_20B87C64C((char *)(a1 + 32), v5, v7);
  sub_20B87C64C((char *)(a1 + 56), v8, v10);
  if (*(_QWORD *)(v4 + 8) != *(_QWORD *)v4)
  {
    v11 = 0;
    v12 = (uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 1;
    v13 = (uint64_t)(*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56)) >> 1;
    v14 = (void **)(a1 + 104);
    v43 = (void **)(a1 + 80);
    do
    {
      v15 = *(_QWORD *)(*(_QWORD *)(a1 + 88) - 8);
      v16 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)a2 + 568))(a2, v11);
      if (v15 + (unint64_t)v16 >= v12)
        v17 = v12;
      else
        v17 = v15 + v16;
      v18 = *(_QWORD *)(*(_QWORD *)(a1 + 112) - 8);
      v19 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)a2 + 320))(a2, v11);
      if (v18 + (unint64_t)v19 >= v13)
        v20 = v13;
      else
        v20 = v18 + v19;
      v22 = *(char **)(a1 + 88);
      v21 = *(_QWORD *)(a1 + 96);
      if ((unint64_t)v22 >= v21)
      {
        v24 = (char *)*v43;
        v25 = (v22 - (_BYTE *)*v43) >> 3;
        v26 = v25 + 1;
        if ((unint64_t)(v25 + 1) >> 61)
          sub_20B80CDD8();
        v27 = v21 - (_QWORD)v24;
        if (v27 >> 2 > v26)
          v26 = v27 >> 2;
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
          v28 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v28 = v26;
        if (v28)
        {
          v29 = (char *)sub_20B800BE8(a1 + 96, v28);
          v24 = *(char **)(a1 + 80);
          v22 = *(char **)(a1 + 88);
        }
        else
        {
          v29 = 0;
        }
        v30 = (unint64_t *)&v29[8 * v25];
        *v30 = v17;
        v23 = v30 + 1;
        while (v22 != v24)
        {
          v31 = *((_QWORD *)v22 - 1);
          v22 -= 8;
          *--v30 = v31;
        }
        *(_QWORD *)(a1 + 80) = v30;
        *(_QWORD *)(a1 + 88) = v23;
        *(_QWORD *)(a1 + 96) = &v29[8 * v28];
        if (v24)
          operator delete(v24);
      }
      else
      {
        *(_QWORD *)v22 = v17;
        v23 = v22 + 8;
      }
      *(_QWORD *)(a1 + 88) = v23;
      v33 = *(char **)(a1 + 112);
      v32 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v33 >= v32)
      {
        v35 = (char *)*v14;
        v36 = (v33 - (_BYTE *)*v14) >> 3;
        v37 = v36 + 1;
        if ((unint64_t)(v36 + 1) >> 61)
          sub_20B80CDD8();
        v38 = v32 - (_QWORD)v35;
        if (v38 >> 2 > v37)
          v37 = v38 >> 2;
        if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8)
          v39 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v39 = v37;
        if (v39)
        {
          v40 = (char *)sub_20B800BE8(a1 + 120, v39);
          v35 = *(char **)(a1 + 104);
          v33 = *(char **)(a1 + 112);
        }
        else
        {
          v40 = 0;
        }
        v41 = (unint64_t *)&v40[8 * v36];
        *v41 = v20;
        v34 = v41 + 1;
        while (v33 != v35)
        {
          v42 = *((_QWORD *)v33 - 1);
          v33 -= 8;
          *--v41 = v42;
        }
        *(_QWORD *)(a1 + 104) = v41;
        *(_QWORD *)(a1 + 112) = v34;
        *(_QWORD *)(a1 + 120) = &v40[8 * v39];
        if (v35)
          operator delete(v35);
      }
      else
      {
        *(_QWORD *)v33 = v20;
        v34 = v33 + 8;
      }
      *(_QWORD *)(a1 + 112) = v34;
      ++v11;
    }
    while (v11 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v4 + 8) - *(_QWORD *)v4) >> 3));
  }
}

void sub_20B9C36B8(_QWORD *a1, unint64_t a2, uint64_t *a3, void **a4, _WORD *a5, _WORD *a6)
{
  uint64_t *v9;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  __int16 v21;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  unint64_t v27;
  __int16 v28;
  __int128 __dst;
  void *v30;

  v9 = a3;
  v12 = a1[1];
  v13 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v12) >> 3);
  v14 = v13 - a2;
  if (v13 <= a2)
  {
    if (*((char *)a3 + 23) < 0)
    {
      a3[1] = 0;
      v9 = (uint64_t *)*a3;
    }
    else
    {
      *((_BYTE *)a3 + 23) = 0;
    }
    v21 = 0;
    *(_WORD *)v9 = 0;
  }
  else
  {
    v15 = v14 - 1;
    v16 = *(_QWORD *)(a1[10] + 8 * (v14 - 1));
    v17 = a1[4];
    if (v16 >= (a1[5] - v17) >> 1)
    {
      v18 = 0;
      v20 = 0;
    }
    else
    {
      v18 = (void *)(v17 + 2 * v16);
      v19 = *(unsigned __int16 *)(v12 + 40 * v15 + 24);
      if (v17)
        v20 = v19;
      else
        v20 = 0;
    }
    sub_20B877ED0(&__dst, v18, v20);
    if (*((char *)v9 + 23) < 0)
      operator delete((void *)*v9);
    *(_OWORD *)v9 = __dst;
    v9[2] = (uint64_t)v30;
    v21 = *(_WORD *)(a1[1] + 40 * v15 + 32);
  }
  *a5 = v21;
  if (v13 >= a2 && v14 >= 2)
  {
    v23 = v14 - 2;
    v24 = *(_QWORD *)(a1[10] + 8 * (v14 - 2));
    v25 = a1[4];
    if (v24 >= (a1[5] - v25) >> 1)
    {
      v26 = 0;
      v27 = 0;
    }
    else
    {
      v26 = (void *)(v25 + 2 * v24);
      if (v25)
        v27 = *(unsigned __int16 *)(a1[1] + 40 * v23 + 24);
      else
        v27 = 0;
    }
    sub_20B877ED0(&__dst, v26, v27);
    if (*((char *)a4 + 23) < 0)
      operator delete(*a4);
    *(_OWORD *)a4 = __dst;
    a4[2] = v30;
    v28 = *(_WORD *)(a1[1] + 40 * v23 + 32);
  }
  else
  {
    if (*((char *)a4 + 23) < 0)
    {
      a4[1] = 0;
      a4 = (void **)*a4;
    }
    else
    {
      *((_BYTE *)a4 + 23) = 0;
    }
    v28 = 0;
    *(_WORD *)a4 = 0;
  }
  *a6 = v28;
}

uint64_t sub_20B9C3880(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(_QWORD *)(result + 8);
  if (*(_QWORD *)(result + 16) != v2)
  {
    v4 = (_QWORD *)result;
    v5 = 0;
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(v4[10] + 8 * v6);
      v8 = v4[4];
      if (v7 >= (v4[5] - v8) >> 1)
      {
        v9 = 0;
        v10 = 0;
      }
      else
      {
        v9 = v8 + 2 * v7;
        if (v8)
          v10 = *(unsigned __int16 *)(v2 + v5 + 24);
        else
          v10 = 0;
      }
      v11 = *(_QWORD *)(v4[13] + 8 * v6);
      v12 = v4[7];
      if (v11 >= (v4[8] - v12) >> 1)
      {
        v13 = 0;
        v14 = 0;
      }
      else
      {
        v13 = v12 + 2 * v11;
        if (v12)
          v14 = *(unsigned __int16 *)(v2 + v5 + 28);
        else
          v14 = 0;
      }
      result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(a2 + 16))(a2, v6++, v9, v10, v13, v14, *(unsigned __int16 *)(v2 + v5 + 30), *(unsigned __int16 *)(v2 + v5 + 32));
      v2 = v4[1];
      v5 += 40;
    }
    while (v6 < 0xCCCCCCCCCCCCCCCDLL * ((v4[2] - v2) >> 3));
  }
  return result;
}

uint64_t sub_20B9C3978(uint64_t a1)
{
  NSObject *v2;
  uint64_t result;

  v2 = sub_20B9A7C5C(4u);
  result = os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG);
  if ((_DWORD)result)
    return sub_20B9C3880(a1, (uint64_t)&unk_24C46CF10);
  return result;
}

void sub_20B9C39C0(uint64_t a1, uint64_t a2, void *a3, unint64_t a4, void *a5, unint64_t a6, int a7, int a8)
{
  NSObject *v15;
  int v16;
  std::string::size_type v17;
  std::string *v18;
  std::string *p_p;
  std::string __p;
  std::string v21;
  uint8_t buf[4];
  uint64_t v23;
  __int16 v24;
  std::string *v25;
  __int16 v26;
  std::string *v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v15 = sub_20B9A7C5C(4u);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
  {
    sub_20B8D15F4(a3, a4, &v21);
    v16 = SHIBYTE(v21.__r_.__value_.__r.__words[2]);
    v17 = v21.__r_.__value_.__r.__words[0];
    sub_20B8D15F4(a5, a6, &__p);
    v18 = &v21;
    if (v16 < 0)
      v18 = (std::string *)v17;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 134219010;
    v23 = a2;
    v24 = 2080;
    v25 = v18;
    v26 = 2080;
    v27 = p_p;
    v28 = 1024;
    v29 = a7;
    v30 = 1024;
    v31 = a8;
    _os_log_debug_impl(&dword_20B7F7000, v15, OS_LOG_TYPE_DEBUG, "Word history %ld: [%s] [%s] (lc:%d rc:%d)", buf, 0x2Cu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v21.__r_.__value_.__l.__data_);
  }
}

void sub_20B9C3B28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B9C3B4C(uint64_t a1, unsigned int a2, CFLocaleIdentifier localeIdentifier, const void *a4, const void *a5, const __CFString *a6, const void *a7, int a8, unsigned __int8 a9, unsigned __int8 a10, char a11)
{
  uint64_t *v18;
  CFLocaleRef v19;
  CFLocaleRef v20;

  *(_QWORD *)a1 = &off_24C460D80;
  *(_OWORD *)(a1 + 8) = 0u;
  v18 = (uint64_t *)(a1 + 8);
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_BYTE *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 80) = 1065353216;
  if (localeIdentifier)
    v19 = CFLocaleCreate(0, localeIdentifier);
  else
    v19 = sub_20B8D0FCC(a2);
  v20 = v19;
  *v18 = sub_20B9C3CE0(v19, a4, a5, a6, a7, a8, a9, a10, a11);
  *(_QWORD *)(a1 + 32) = LMLanguageModelGetOrder();
  *(_BYTE *)(a1 + 40) = LMLanguageModelAdaptationIsEnabled();
  if (a9 && *(uint64_t *)(a1 + 32) <= 0)
    *(_QWORD *)(a1 + 32) = 3;
  if (a2 == 1 && *v18 && (a8 & 1) == 0)
  {
    LMVocabularyGetSharedVocabulary();
    LMLanguageModelAddTransientVocabulary();
  }
  if (v20)
    CFRelease(v20);
  return a1;
}

void sub_20B9C3C98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;

  sub_20B84055C(a11);
  sub_20B87E150((const void **)(v11 + 24), 0);
  sub_20B87E150((const void **)(v11 + 16), 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9C3CE0(const void *a1, const void *a2, const void *a3, const __CFString *a4, const void *a5, int a6, int a7, int a8, char a9)
{
  __CFDictionary *Mutable;
  const void **v17;
  const void *v18;
  const void *v19;
  const void *v20;
  CFAllocatorRef *v21;
  CFNumberRef v22;
  __CFArray *v23;
  const __CFString *v24;
  const void *v25;
  const __CFString *v26;
  CFComparisonResult v27;
  CFNumberRef v28;
  const __CFString *v29;
  uint64_t v30;
  int valuePtr;
  CFNumberRef v34;
  __CFDictionary *v35;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v35 = Mutable;
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BE5EEB8], a1);
  v17 = (const void **)MEMORY[0x24BDBD268];
  if (a5)
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BE5EE78], a5);
  else
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BE5EE60], (const void *)*MEMORY[0x24BDBD268]);
  if (a2)
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BE5EE80], a2);
  if (a4)
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BE5EE70], a4);
  v18 = (const void *)*MEMORY[0x24BDBD270];
  v19 = *v17;
  if (a6)
    v20 = (const void *)*MEMORY[0x24BDBD270];
  else
    v20 = *v17;
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BE5EEE0], v20);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BE5EEB0], v19);
  v21 = (CFAllocatorRef *)MEMORY[0x24BDBD240];
  if (a7)
  {
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BE5EED0], v19);
    v22 = CFNumberCreate(*v21, kCFNumberCFIndexType, &unk_20BA57028);
    v34 = v22;
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BE5EE98], v22);
    if (v22)
      CFRelease(v22);
  }
  if (a8)
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BE5EEC8], v18);
  v23 = CFArrayCreateMutable(*v21, 0, MEMORY[0x24BDBD690]);
  v34 = v23;
  v24 = (const __CFString *)MEMORY[0x20BD38EA0](a1);
  if (CFStringCompare(v24, CFSTR("ja"), 0))
  {
    if (a4 && CFStringCompare(a4, off_2547295B8[0], 0) == kCFCompareEqualTo)
    {
      v25 = a9 ? v18 : v19;
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BE5EEA8], v25);
      v26 = (const __CFString *)MEMORY[0x20BD38EA0](a1);
      v27 = CFStringCompare(v26, CFSTR("zh-Hans"), 0);
      if (a3)
      {
        if (v27 == kCFCompareEqualTo && (a6 & 1) == 0)
        {
          if (a2)
          {
            CFArrayAppendValue(v23, a2);
          }
          else
          {
            v29 = sub_20B9AF0A8(CFSTR("zh-Hans"));
            CFArrayAppendValue(v23, v29);
            if (v29)
              CFRelease(v29);
          }
          CFArrayAppendValue(v23, a3);
          CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BE5EE80], v23);
        }
      }
    }
  }
  else
  {
    valuePtr = 0;
    v28 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
    if (v28)
    {
      CFDictionarySetValue(Mutable, CFSTR("NewWordPenalty"), v28);
      CFRelease(v28);
    }
  }
  v30 = LMLanguageModelCreate();
  if (v23)
    CFRelease(v23);
  if (Mutable)
    CFRelease(Mutable);
  return v30;
}

void sub_20B9C4020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  const void *v4;
  va_list va;
  uint64_t v6;
  const void *v7;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, const void *);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, const void *);
  sub_20B876164((const void **)va, 0);
  sub_20B8B035C((const void **)va1, 0);
  sub_20B8CE418((const void **)va2, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9C40A8(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24C460D80;
  sub_20B9C4108(a1);
  if (*(_QWORD *)(a1 + 8))
    LMLanguageModelRelease();
  sub_20B84055C(a1 + 48);
  sub_20B87E150((const void **)(a1 + 24), 0);
  sub_20B87E150((const void **)(a1 + 16), 0);
  return a1;
}

uint64_t sub_20B9C4108(uint64_t a1)
{
  _QWORD *i;
  _BYTE v4[16];
  _QWORD *v5;

  sub_20B9C4ACC((uint64_t)v4, a1 + 48);
  for (i = v5; i; i = (_QWORD *)*i)
    sub_20B9C4664(a1, i[2]);
  return sub_20B84055C((uint64_t)v4);
}

void sub_20B9C415C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B84055C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B9C4174(uint64_t a1)
{
  sub_20B9C40A8(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B9C4198(uint64_t a1, const __CFString *a2)
{
  const void **v2;
  CFStringRef Copy;

  v2 = (const void **)(a1 + 16);
  if (*(const __CFString **)(a1 + 16) == a2)
    return 0;
  LMLanguageModelResetDynamicData();
  if (a2 && CFStringGetLength(a2) >= 1)
    Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], a2);
  else
    Copy = 0;
  sub_20B87E150(v2, Copy);
  return LMLanguageModelSetParameterValue();
}

uint64_t sub_20B9C4244(uint64_t a1, const __CFString *a2)
{
  const void **v2;
  CFStringRef Copy;

  v2 = (const void **)(a1 + 24);
  if (*(const __CFString **)(a1 + 24) == a2)
    return 0;
  LMLanguageModelResetDynamicData();
  if (a2 && CFStringGetLength(a2) >= 1)
    Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], a2);
  else
    Copy = 0;
  sub_20B87E150(v2, Copy);
  return LMLanguageModelSetParameterValue();
}

uint64_t sub_20B9C42F0()
{
  return LMLanguageModelGetTokenIDForString();
}

uint64_t sub_20B9C42FC()
{
  return LMLanguageModelAddTokenForString();
}

uint64_t sub_20B9C4304()
{
  return LMLanguageModelCreateStringForTokenID();
}

double sub_20B9C430C()
{
  double v0;
  double v1;
  double v2;

  if (LMLanguageModelAdaptationIsEnabled())
  {
    LMLanguageModelSetParameterValue();
    LMLanguageModelConditionalProbability();
    v1 = -v0;
    LMLanguageModelSetParameterValue();
  }
  else
  {
    LMLanguageModelConditionalProbability();
    return -v2;
  }
  return v1;
}

double sub_20B9C43D0()
{
  double v0;
  double v1;
  double v2;

  if (LMLanguageModelAdaptationIsEnabled())
  {
    LMLanguageModelSetParameterValue();
    LMLanguageModelJointProbability();
    v1 = -v0;
    LMLanguageModelSetParameterValue();
  }
  else
  {
    LMLanguageModelJointProbability();
    return -v2;
  }
  return v1;
}

uint64_t sub_20B9C4480()
{
  return LMLanguageModelConditionalProbability();
}

uint64_t sub_20B9C4488()
{
  return LMLanguageModelJointProbability();
}

uint64_t sub_20B9C4490(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a6)
    return LMLanguageModelIncrementUsageCountWithEffectiveTime();
  else
    return LMLanguageModelIncrementUsageCount();
}

uint64_t sub_20B9C44AC()
{
  return LMLanguageModelResetDynamicData();
}

uint64_t sub_20B9C44B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t Prediction;
  uint64_t v12;
  double v13;
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  LMLanguageModelCreatePredictionEnumerator();
  v14 = 0;
  v8 = 4 * a5;
  do
  {
    v9 = LMPredictionEnumeratorAdvance();
    if (!(_DWORD)v9)
      break;
    MEMORY[0x24BDAC7A8](v9);
    v12 = 0;
    v13 = 0.0;
    Prediction = LMPredictionEnumeratorGetPrediction();
    (*(void (**)(uint64_t, char *, uint64_t, uint64_t, char *, double))(a6 + 16))(a6, (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), Prediction, v12, &v14, v13);
  }
  while (!v14);
  return LMPredictionEnumeratorRelease();
}

BOOL sub_20B9C45B0(uint64_t a1, int a2)
{
  int DynamicTokenIDRange;
  _BOOL8 result;

  DynamicTokenIDRange = LMLanguageModelGetDynamicTokenIDRange();
  result = 0;
  if (DynamicTokenIDRange)
    return a2 == 0;
  return result;
}

_QWORD *sub_20B9C4608(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;

  v5 = a3;
  v6 = a2;
  v3 = a1 + 48;
  result = sub_20B9C4780((_QWORD *)(a1 + 48), &v6);
  if (!result)
  {
    sub_20B9C486C(v3, &v6, &v6, &v5);
    return (_QWORD *)LMLanguageModelAddObserver();
  }
  return result;
}

_QWORD *sub_20B9C4664(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *result;
  uint64_t v4;

  v4 = a2;
  v2 = (_QWORD *)(a1 + 48);
  result = sub_20B9C4780((_QWORD *)(a1 + 48), &v4);
  if (result)
  {
    sub_20B9C4D90(v2, &v4);
    return (_QWORD *)LMLanguageModelRemoveObserver();
  }
  return result;
}

uint64_t sub_20B9C46B8(uint64_t a1, uint64_t a2)
{
  _QWORD *i;
  _BYTE v6[16];
  _QWORD *v7;

  sub_20B9C4ACC((uint64_t)v6, a2 + 48);
  for (i = v7; i; i = (_QWORD *)*i)
  {
    sub_20B9C4664(a2, i[2]);
    sub_20B9C4608(a1, i[2], i[3]);
  }
  return sub_20B84055C((uint64_t)v6);
}

void sub_20B9C4724(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B84055C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9C4738()
{
  uint64_t result;

  LMVocabularyGetSharedVocabulary();
  result = LMVocabularyContainsLemma();
  if ((_DWORD)result)
    return LMLanguageModelGetTokenIDForString();
  return result;
}

_QWORD *sub_20B9C4780(_QWORD *a1, _QWORD *a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v4 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = v5 & (*(_QWORD *)&v2 - 1);
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    do
    {
      v10 = result[1];
      if (v5 == v10)
      {
        if (result[2] == *a2)
          return result;
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(_QWORD *)&v2)
            v10 %= *(_QWORD *)&v2;
        }
        else
        {
          v10 &= *(_QWORD *)&v2 - 1;
        }
        if (v10 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

_QWORD *sub_20B9C486C(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  _QWORD **v13;
  _QWORD *i;
  unint64_t v15;
  uint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v8 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v9 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v8 >> 47) ^ v8);
  v10 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = v10 & (v11 - 1);
    }
    v13 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      for (i = *v13; i; i = (_QWORD *)*i)
      {
        v15 = i[1];
        if (v15 == v10)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v12.u32[0] > 1uLL)
          {
            if (v15 >= v11)
              v15 %= v11;
          }
          else
          {
            v15 &= v11 - 1;
          }
          if (v15 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v10;
  v16 = *a4;
  i[2] = *a3;
  i[3] = v16;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    sub_20B828960(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v24)
  {
    *i = *v24;
LABEL_38:
    *v24 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v23 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v25 = *(_QWORD *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v25 >= v11)
        v25 %= v11;
    }
    else
    {
      v25 &= v11 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_20B9C4AB8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9C4ACC(uint64_t a1, uint64_t a2)
{
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_20B828960(a1, *(_QWORD *)(a2 + 8));
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    sub_20B9C4B40(a1, i + 2, (_OWORD *)i + 1);
  return a1;
}

void sub_20B9C4B28(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B84055C(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B9C4B40(uint64_t a1, _QWORD *a2, _OWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v8;
  *((_OWORD *)i + 1) = *a3;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    v16 = 1;
    if (v9 >= 3)
      v16 = (v9 & (v9 - 1)) != 0;
    v17 = v16 | (2 * v9);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    sub_20B828960(a1, v19);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v21)
  {
    *i = *v21;
LABEL_38:
    *v21 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9)
        v22 %= v9;
    }
    else
    {
      v22 &= v9 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_20B9C4D7C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B9C4D90(_QWORD *a1, _QWORD *a2)
{
  uint64_t *result;

  result = sub_20B9C4DC4(a1, a2);
  if (result)
  {
    sub_20B9000C0(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

_QWORD *sub_20B9C4DC4(_QWORD *a1, _QWORD *a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v4 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = v5 & (*(_QWORD *)&v2 - 1);
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    do
    {
      v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == *a2)
          return result;
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(_QWORD *)&v2)
            v10 %= *(_QWORD *)&v2;
        }
        else
        {
          v10 &= *(_QWORD *)&v2 - 1;
        }
        if (v10 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t sub_20B9C4EB0(uint64_t a1, char a2)
{
  uint64_t v4;

  v4 = sub_20B8A9044(a1);
  *(_QWORD *)v4 = &off_24C4673B8;
  *(_OWORD *)(v4 + 800) = 0u;
  sub_20B80627C((_QWORD *)(v4 + 824));
  sub_20B80627C((_QWORD *)(a1 + 832));
  *(_QWORD *)(a1 + 856) = 0;
  *(_OWORD *)(a1 + 840) = 0u;
  sub_20B80627C((_QWORD *)(a1 + 864));
  *(_QWORD *)(a1 + 872) = 0;
  sub_20B7F8B20((_OWORD *)(a1 + 904));
  *(_OWORD *)(a1 + 952) = 0u;
  *(_BYTE *)(a1 + 1224) = a2;
  return a1;
}

void sub_20B9C4F4C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  sub_20B806284(v4);
  v6 = *(_QWORD *)(v1 + 856);
  *(_QWORD *)(v1 + 856) = 0;
  if (v6)
    MEMORY[0x20BD39CB0](v6, 0x1050C40717B85FCLL);
  sub_20B806284(v3);
  sub_20B806284(v2);
  sub_20B811FE4(v1 + 800);
  sub_20B8A90E8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9C4FB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _DWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void **v13;
  void **v14;
  uint64_t result;
  _QWORD v16[6];
  uint64_t v17;
  void **v18;

  v4 = *(_QWORD *)(a1 + 744);
  v5 = *(_QWORD *)(a1 + 752);
  if (v4 == v5 || (v6 = *(unsigned int *)(a1 + 712), v6 >= (v5 - v4) >> 3))
    v7 = 0;
  else
    v7 = *(_DWORD **)(v4 + 8 * v6);
  v8 = sub_20B908378(&v17, v7);
  v9 = *(_QWORD *)(a1 + 744);
  v10 = *(_QWORD *)(a1 + 752);
  if (v9 == v10 || (v11 = *(unsigned int *)(a1 + 712), v11 >= (v10 - v9) >> 3))
    v12 = 0;
  else
    v12 = *(_QWORD *)(v9 + 8 * v11);
  v16[0] = MEMORY[0x24BDAC760];
  v16[1] = 0x40000000;
  v16[2] = sub_20B9C50D8;
  v16[3] = &unk_24C46C720;
  v16[4] = a2;
  v16[5] = a1;
  sub_20B90843C((_DWORD **)v8, v12, 0, a1 + 968, (uint64_t)v16);
  v13 = v18;
  v18 = 0;
  if (v13)
  {
    v14 = sub_20B8F8AB8(v13);
    MEMORY[0x20BD39CB0](v14, 0x20C4093837F09);
  }
  result = v17;
  v17 = 0;
  if (result)
    return MEMORY[0x20BD39CB0](result, 0x1010C40E4C6A875);
  return result;
}

void sub_20B9C50C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B8FD7F0((void ***)(v1 - 32));
  _Unwind_Resume(a1);
}

uint64_t sub_20B9C50D8(uint64_t result, unsigned int a2, uint64_t a3, _BYTE *a4)
{
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;

  v4 = a2;
  if ((_BYTE)a2 && !*a4)
  {
    v6 = result;
    v7 = *(_QWORD *)(*(_QWORD *)(result + 40) + 352) + 12 * (a2 >> 8);
    v8 = 1;
    do
    {
      result = (*(uint64_t (**)(void))(*(_QWORD *)(v6 + 32) + 16))();
      if (*a4)
        v9 = 1;
      else
        v9 = v8 >= v4;
      ++v8;
      v7 += 12;
    }
    while (!v9);
  }
  return result;
}

void sub_20B9C5174(uint64_t a1, unsigned __int16 *a2, unint64_t a3, int a4, int a5, unsigned __int16 *a6, unint64_t a7, unsigned int a8, uint64_t a9)
{
  unint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  void **v22;
  uint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  BOOL v30;
  void *v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t (**v34)();
  _QWORD v35[4];
  void *__p[2];
  __int128 v37;
  int v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a1 + 872) || !(a7 | a3) || !*(_QWORD *)(a1 + 952))
    return;
  if (a6)
    v15 = a7 >> 1;
  else
    v15 = 0;
  sub_20BA04898(a6, v15, 0, 0, 0, (uint64_t)&v34);
  v16 = a3 >> 1;
  if (!a2)
    v16 = 0;
  if (a4)
  {
    *(_OWORD *)__p = 0u;
    v37 = 0u;
    v38 = 1065353216;
    if (a5)
      v17 = 31;
    else
      v17 = 1;
    sub_20B8B4B90(a1 + 816, (uint64_t)&v34, (uint64_t)a2, v16, v17, (uint64_t)__p, 0, 0);
    sub_20B84055C((uint64_t)__p);
  }
  else
  {
    sub_20BA04238((unsigned __int16 **)&v34, a2, v16, (a8 >> 6) & 8 | a8 & 0x20 | (a8 >> 4) & 0x10 | ((char)a8 >> 7) & 6, 0, 0);
  }
  sub_20B80BBD0(__p, (char *)&unk_20BA6E04F);
  if (SBYTE7(v37) < 0)
    operator delete(__p[0]);
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v19 = v35[0];
  v18 = v35[1];
  v20 = *((float *)sub_20B896F94() + 98);
  v21 = *(_QWORD *)(a1 + 952);
  __p[0] = &off_24C46A2F0;
  __p[1] = &v31;
  *((_QWORD *)&v37 + 1) = __p;
  (*(void (**)(uint64_t, uint64_t (***)(), void **, _QWORD))(*(_QWORD *)v21 + 112))(v21, &v34, __p, (int)(float)((float)((float)(1.0 / v20) + -1.0) * (float)(0xAAAAAAAAAAAAAAABLL * ((v18 - v19) >> 3))));
  v22 = (void **)*((_QWORD *)&v37 + 1);
  if (*((void ***)&v37 + 1) == __p)
  {
    v23 = 4;
    v22 = __p;
  }
  else
  {
    if (!*((_QWORD *)&v37 + 1))
      goto LABEL_22;
    v23 = 5;
  }
  (*((void (**)(void))*v22 + v23))();
LABEL_22:
  v24 = 0;
  LOBYTE(__p[0]) = 0;
  while (1)
  {
    v25 = v31;
    if (v24 >= (v32 - (_BYTE *)v31) >> 3)
      break;
    v26 = *((_DWORD *)v31 + 2 * v24);
    if (*((_DWORD *)v31 + 2 * v24))
    {
      v27 = *(_QWORD *)(a1 + 872) + 12 * (*((_DWORD *)v31 + 2 * v24) >> 8);
      v28 = 1;
      do
      {
        (*(void (**)(uint64_t, uint64_t, void **, float))(a9 + 16))(a9, v27, __p, *((float *)v31 + 2 * v24 + 1));
        v29 = LOBYTE(__p[0]);
        if (LOBYTE(__p[0]))
          v30 = 1;
        else
          v30 = v28 >= v26;
        ++v28;
        v27 += 12;
      }
      while (!v30);
    }
    else
    {
      v29 = 0;
    }
    ++v24;
    if (v29)
    {
      v25 = v31;
      break;
    }
  }
  if (v25)
  {
    v32 = v25;
    operator delete(v25);
  }
  v34 = off_24C460C88;
  __p[0] = v35;
  sub_20B8B66F8((void ***)__p);
}

void sub_20B9C5440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t *a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a17 = &a13;
  sub_20B8B66F8((void ***)&a17);
  _Unwind_Resume(a1);
}

void sub_20B9C54DC(uint64_t a1, unsigned __int16 *a2, unint64_t a3, int a4, int a5, unsigned __int16 *a6, unint64_t a7, unsigned int a8, uint64_t a9)
{
  _QWORD v9[7];
  _QWORD v10[3];
  char v11;

  v10[0] = 0;
  v10[1] = v10;
  v10[2] = 0x2000000000;
  v11 = 0;
  v9[0] = MEMORY[0x24BDAC760];
  v9[1] = 0x40000000;
  v9[2] = sub_20B9C557C;
  v9[3] = &unk_24C4A0130;
  v9[5] = v10;
  v9[6] = a1;
  v9[4] = a9;
  sub_20B9C5174(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t)v9);
  _Block_object_dispose(v10, 8);
}

void sub_20B9C5564(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_20B9C557C(_QWORD *a1, uint64_t a2, _BYTE *a3, float a4)
{
  uint64_t v8;
  uint64_t v9;
  const std::string::value_type *v10;
  _DWORD __len[5];
  void *v12[2];
  void *__p[2];
  __int128 v14;
  float v15;

  v8 = a1[6];
  memset(&__len[1], 0, 10);
  *(_OWORD *)v12 = 0u;
  *(_OWORD *)__p = 0u;
  v14 = 0u;
  v15 = 0.0;
  LOWORD(__len[1]) = *(_WORD *)a2;
  sub_20B7F8C4C(v8 + 904, *(unsigned int *)(a2 + 8));
  sub_20B80681C((unint64_t *)(v8 + 864), v8 + 904);
  __len[0] = *(_DWORD *)(v8 + 936);
  sub_20B8A7360((std::string *)&__p[1], *(const std::string::value_type **)(v8 + 928), __len[0]);
  v9 = *(_QWORD *)(v8 + 352) + 12 * *(unsigned int *)(a2 + 4);
  v10 = (const std::string::value_type *)sub_20B9C56C4(v8, *(_DWORD *)(v9 + 8), __len);
  sub_20B8A7360((std::string *)v12, v10, __len[0]);
  *(_QWORD *)((char *)&__len[1] + 2) = *(_QWORD *)v9;
  v15 = a4;
  (*(void (**)(void))(a1[4] + 16))();
  if (*(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24))
    *a3 = 1;
  if (SHIBYTE(v14) < 0)
    operator delete(__p[1]);
  if (SHIBYTE(__p[0]) < 0)
    operator delete(v12[0]);
}

void sub_20B9C56AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B9C574C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9C56C4(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v6;
  unint64_t *v7;

  if ((a2 & 3) != 0)
    return 0;
  v6 = a2 >> 2;
  v7 = (unint64_t *)(a1 + 824);
  if (sub_20B806900(a1 + 824) <= v6)
    return 0;
  sub_20B7F8C4C(a1 + 904, v6);
  sub_20B80681C(v7, a1 + 904);
  *a3 = *(_DWORD *)(a1 + 936);
  return *(_QWORD *)(a1 + 928);
}

uint64_t sub_20B9C574C(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t sub_20B9C578C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;

  v4 = a1 + 904;
  sub_20B7F8BDC((_QWORD *)(a1 + 904), a2, a3);
  result = sub_20B8067D0((uint64_t *)(a1 + 824), v4);
  if ((_DWORD)result)
    return *(unsigned int *)(a1 + 940);
  return result;
}

uint64_t sub_20B9C57C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  void ***v6;
  uint64_t v7;
  uint64_t (**v9)();
  _QWORD v10[3];
  char v11;
  void **v12[3];
  void ***v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v9 = off_24C460C88;
  memset(v10, 0, sizeof(v10));
  v11 = 0;
  v12[0] = (void **)&off_24C459448;
  v13 = v12;
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t (***)(), uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, a3, a4, &v9, a5);
  v6 = v13;
  if (v13 == v12)
  {
    v7 = 4;
    v6 = v12;
    goto LABEL_5;
  }
  if (v13)
  {
    v7 = 5;
LABEL_5:
    ((void (*)(void))(*v6)[v7])();
  }
  v9 = off_24C460C88;
  v12[0] = (void **)v10;
  sub_20B8B66F8(v12);
  return v5;
}

void sub_20B9C58B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,void ***a21)
{
  void ***v21;
  void ***v23;
  uint64_t v24;

  v23 = a21;
  if (a21 == v21)
  {
    v24 = 4;
    v23 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v24 = 5;
  }
  ((void (*)(void))(*v23)[v24])();
LABEL_6:
  sub_20B8B66F8(&a18);
  _Unwind_Resume(a1);
}

unint64_t sub_20B9C5904(uint64_t a1, int a2, void **a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  uint64_t v12;
  uint64_t v13;
  unint64_t v15;
  unint64_t v18;
  int v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  int v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  BOOL v34;
  char v35;
  void *v36;
  void **v37;
  void **v38;
  uint64_t v39;
  void ***v40;
  uint64_t v41;
  void **v42;
  char *v43;
  void **v44;
  char *v45;
  uint64_t v46;
  int v47;
  _QWORD *v48;
  __int128 *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  _QWORD *v53;
  uint64_t v54;
  int v55;
  _QWORD *v56;
  void *v57;
  uint64_t v58;
  void ***v59;
  uint64_t v60;
  void ***v61;
  void ***v62;
  uint64_t v63;
  _QWORD v64[2];
  void *__p[2];
  uint64_t v66;
  void *v67[2];
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  void **v71;
  uint64_t v72;
  _QWORD v73[2];
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  _BYTE v79[256];
  uint64_t v80;
  void **v81[2];
  char v82;
  void ***v83;
  __int128 v84;
  __int128 v85;
  int v86;
  uint64_t v87;

  v87 = *MEMORY[0x24BDAC8D0];
  v12 = *(_QWORD *)(a1 + 744);
  v13 = *(_QWORD *)(a1 + 752);
  if (v12 == v13)
    return 0;
  v15 = *(unsigned int *)(a1 + 712);
  if (v15 >= (v13 - v12) >> 3)
    return 0;
  v18 = 0;
  if (((a7 | a4) & 1) != 0 || !*(_QWORD *)(v12 + 8 * v15))
    return v18;
  v24 = a2;
  if (a2 == 2)
    v25 = 1;
  else
    v25 = 2 * (a2 == 1);
  if (a2 == 1)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1))
    {
      v12 = *(_QWORD *)(a1 + 744);
      v13 = *(_QWORD *)(a1 + 752);
      goto LABEL_11;
    }
    return 0;
  }
LABEL_11:
  v80 = 0;
  memset(v79, 0, sizeof(v79));
  v77 = 0u;
  v78 = 0u;
  v75 = 0u;
  v76 = 0u;
  v74 = 0u;
  if (v12 == v13 || (v26 = *(unsigned int *)(a1 + 712), v26 >= (v13 - v12) >> 3))
    v27 = 0;
  else
    v27 = *(_QWORD *)(v12 + 8 * v26);
  v73[0] = v27;
  v73[1] = a6;
  *((_QWORD *)&v74 + 1) = a3;
  LODWORD(v75) = a4;
  *((_QWORD *)&v75 + 1) = a9;
  *(_QWORD *)&v76 = a8;
  *((_QWORD *)&v76 + 1) = a7;
  LOBYTE(v78) = (a2 & 0x800) == 0;
  BYTE1(v78) = (a2 & 0xF100) != 0;
  v29 = (v24 == 1) & ((unsigned __int16)(a2 & 0x800) >> 11);
  v79[0] = (v24 == 1) & ((unsigned __int16)(a2 & 0x800) >> 11);
  LODWORD(v77) = v25;
  v79[1] = 1;
  if (a4 >= 0x80)
  {
    v29 = 0;
    v79[0] = 0;
  }
  *((_QWORD *)&v78 + 1) = &v79[2];
  v30 = ~a2 & 0x10900;
  if ((a2 & 0x109FF) == 0x10901)
    v31 = 8;
  else
    v31 = 64;
  if (a4 < 3)
    v32 = 1;
  else
    v32 = v31;
  if (!v30)
  {
    v71 = 0;
    v72 = a8;
    if (a3)
      v33 = a4 >> 1;
    else
      v33 = 0;
    if (v29)
      v34 = 1;
    else
      v34 = v24 == 2;
    v67[0] = 0;
    v67[1] = 0;
    v68 = 0;
    v84 = 0uLL;
    v85 = 0uLL;
    v86 = 1065353216;
    if (v34)
      v35 = 31;
    else
      v35 = 30;
    sub_20B8B4B04(a1 + 816, (uint64_t)a3, v33, v35, (uint64_t)&v84, (char **)v67, &v71, (uint64_t)__p);
    sub_20B80BBD0(v81, (char *)&unk_20BA6E04F);
    if (v82 < 0)
      operator delete(v81[0]);
    v36 = (void *)HIBYTE(v68);
    v37 = v67;
    if (v68 < 0)
    {
      v37 = (void **)v67[0];
      v36 = v67[1];
    }
    if (!v37)
      v36 = 0;
    v64[0] = v37;
    v64[1] = v36;
    v70 = 0;
    v38 = v71;
    if (v25)
    {
      if (v25 == 1)
      {
        v60 = *(_QWORD *)(a1 + 960);
        v61 = (void ***)operator new(0x40uLL);
        *v61 = (void **)&off_24C46A348;
        v61[1] = __p;
        v61[2] = (void **)&v70;
        v61[3] = (void **)v73;
        v61[4] = (void **)&v72;
        v61[5] = (void **)v64;
        v61[6] = v38;
        v61[7] = (void **)&v84;
        v83 = v61;
        (*(void (**)(uint64_t, void **, void ***))(*(_QWORD *)v60 + 96))(v60, __p, v81);
      }
      else
      {
        if (v25 != 2)
          goto LABEL_80;
        v39 = *(_QWORD *)(a1 + 960);
        v40 = (void ***)operator new(0x40uLL);
        *v40 = (void **)&off_24C46A348;
        v40[1] = __p;
        v40[2] = (void **)&v70;
        v40[3] = (void **)v73;
        v40[4] = (void **)&v72;
        v40[5] = (void **)v64;
        v40[6] = v38;
        v40[7] = (void **)&v84;
        v83 = v40;
        (*(void (**)(uint64_t, void **, void ***, uint64_t))(*(_QWORD *)v39 + 112))(v39, __p, v81, v32);
      }
    }
    else
    {
      v58 = *(_QWORD *)(a1 + 960);
      v59 = (void ***)operator new(0x40uLL);
      *v59 = (void **)&off_24C46A348;
      v59[1] = __p;
      v59[2] = (void **)&v70;
      v59[3] = (void **)v73;
      v59[4] = (void **)&v72;
      v59[5] = (void **)v64;
      v59[6] = v38;
      v59[7] = (void **)&v84;
      v83 = v59;
      (*(void (**)(uint64_t, void **, void ***))(*(_QWORD *)v58 + 80))(v58, __p, v81);
    }
    v62 = v83;
    if (v83 == v81)
    {
      v63 = 4;
      v62 = v81;
    }
    else
    {
      if (!v83)
        goto LABEL_80;
      v63 = 5;
    }
    ((void (*)(void ***, uint64_t))(*v62)[v63])(v62, v41);
LABEL_80:
    v18 = v70;
    __p[0] = off_24C460C88;
    v81[0] = &__p[1];
    sub_20B8B66F8(v81);
    sub_20B84055C((uint64_t)&v84);
    if (SHIBYTE(v68) < 0)
    {
      v57 = v67[0];
      goto LABEL_82;
    }
    return v18;
  }
  v64[0] = a8;
  v71 = a12;
  v72 = a11;
  if (a3)
    v42 = (void **)(a4 >> 1);
  else
    v42 = 0;
  v81[0] = a3;
  v81[1] = v42;
  v70 = 0;
  __p[0] = 0;
  __p[1] = 0;
  v66 = 0;
  *(_OWORD *)v67 = *(_OWORD *)sub_20B947CC4();
  if (!(_BYTE)v78)
  {
    sub_20B87B938((uint64_t *)v81, &v70, 0, 0, &v84);
    if (SHIBYTE(v66) < 0)
      operator delete(__p[0]);
    v66 = v85;
    *(_OWORD *)__p = v84;
    v43 = (char *)BYTE7(v85);
    v44 = __p;
    if (SBYTE7(v85) < 0)
      v44 = (void **)__p[0];
    if (v66 < 0)
      v43 = (char *)__p[1];
    v45 = &v43[-v70];
    if (!v44)
      v45 = 0;
    v67[0] = v44;
    v67[1] = v45;
  }
  sub_20B80BBD0(&v84, (char *)&unk_20BA6E04F);
  if (SBYTE7(v85) < 0)
    operator delete((void *)v84);
  v69 = 0;
  if (v25)
  {
    if (v25 != 1)
    {
      if (v25 != 2)
        goto LABEL_71;
      v46 = *(_QWORD *)(a1 + 960);
      v47 = v72;
      v48 = operator new(0x58uLL);
      *v48 = &off_24C4593F0;
      v48[1] = &v69;
      v48[2] = v73;
      v48[3] = v64;
      v48[4] = a5;
      v48[5] = &v70;
      v48[6] = &v72;
      v48[7] = v81;
      v48[8] = v67;
      v48[9] = a10;
      v48[10] = &v71;
      *((_QWORD *)&v85 + 1) = v48;
      sub_20B8FA044(v46, a5, v47, (uint64_t)&v84, v32);
      v49 = (__int128 *)*((_QWORD *)&v85 + 1);
      if (*((__int128 **)&v85 + 1) == &v84)
        goto LABEL_64;
      goto LABEL_68;
    }
    v51 = *(_QWORD *)(a1 + 960);
    v52 = v72;
    v53 = operator new(0x58uLL);
    *v53 = &off_24C4593F0;
    v53[1] = &v69;
    v53[2] = v73;
    v53[3] = v64;
    v53[4] = a5;
    v53[5] = &v70;
    v53[6] = &v72;
    v53[7] = v81;
    v53[8] = v67;
    v53[9] = a10;
    v53[10] = &v71;
    *((_QWORD *)&v85 + 1) = v53;
    sub_20B8F90E0(v51, a5, (uint64_t)&v84, 0, v52);
  }
  else
  {
    v54 = *(_QWORD *)(a1 + 960);
    v55 = v72;
    v56 = operator new(0x58uLL);
    *v56 = &off_24C4593F0;
    v56[1] = &v69;
    v56[2] = v73;
    v56[3] = v64;
    v56[4] = a5;
    v56[5] = &v70;
    v56[6] = &v72;
    v56[7] = v81;
    v56[8] = v67;
    v56[9] = a10;
    v56[10] = &v71;
    *((_QWORD *)&v85 + 1) = v56;
    sub_20B8F90E0(v54, a5, (uint64_t)&v84, 1u, v55);
  }
  v49 = (__int128 *)*((_QWORD *)&v85 + 1);
  if (*((__int128 **)&v85 + 1) == &v84)
  {
LABEL_64:
    v50 = 4;
    v49 = &v84;
    goto LABEL_70;
  }
LABEL_68:
  if (!v49)
    goto LABEL_71;
  v50 = 5;
LABEL_70:
  (*(void (**)(__int128 *))(*(_QWORD *)v49 + 8 * v50))(v49);
LABEL_71:
  v18 = v69;
  if (SHIBYTE(v66) < 0)
  {
    v57 = __p[0];
LABEL_82:
    operator delete(v57);
  }
  return v18;
}

void sub_20B9C5FC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v28;
  uint64_t v29;

  v28 = *(_QWORD **)(v26 - 152);
  if (v28 == v25)
  {
    v29 = 4;
    v28 = (_QWORD *)(v26 - 176);
  }
  else
  {
    if (!v28)
      goto LABEL_6;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_6:
  *(_QWORD *)(v26 - 176) = &a12;
  sub_20B8B66F8((void ***)(v26 - 176));
  sub_20B84055C(v26 - 144);
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9C60C8(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t result;

  (*(void (**)(_QWORD *))(*a1 + 24))(a1);
  v4 = (uint64_t *)a1[94];
  v5 = a1[95];
  if ((unint64_t)v4 >= v5)
  {
    v7 = a1[93];
    v8 = ((uint64_t)v4 - v7) >> 3;
    if ((unint64_t)(v8 + 1) >> 61)
      sub_20B8AD01C();
    v9 = v5 - v7;
    v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1))
      v10 = v8 + 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
      v12 = (char *)sub_20B800BE8((uint64_t)(a1 + 95), v11);
    else
      v12 = 0;
    v13 = (uint64_t *)&v12[8 * v8];
    v14 = &v12[8 * v11];
    *v13 = a2;
    v6 = v13 + 1;
    v15 = (char *)a1[94];
    v16 = (char *)a1[93];
    if (v15 != v16)
    {
      do
      {
        v17 = *((_QWORD *)v15 - 1);
        v15 -= 8;
        *--v13 = v17;
      }
      while (v15 != v16);
      v15 = (char *)a1[93];
    }
    a1[93] = v13;
    a1[94] = v6;
    a1[95] = v14;
    if (v15)
      operator delete(v15);
  }
  else
  {
    *v4 = a2;
    v6 = v4 + 1;
  }
  a1[94] = v6;
  v18 = (_QWORD *)operator new();
  v19 = (_QWORD *)operator new();
  sub_20B8F7EF0(v19, a2);
  *v18 = &unk_24C49BF40;
  v18[1] = 0;
  v18[5] = 0;
  v18[6] = v19;
  result = a1[120];
  a1[120] = v18;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 72))(result);
  return result;
}

void sub_20B9C6230(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x20BD39CB0](v2, 0x10A1C40079592F6);
  MEMORY[0x20BD39CB0](v1, 0x10A1C4088EF1EDBLL);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9C6274(uint64_t a1, const std::string *a2)
{
  uint64_t v3;
  _QWORD v5[13];
  char v6;
  uint64_t v7;

  sub_20B9C6330(v5, a2, 24);
  sub_20B806944((uint64_t)v5, (_QWORD **)(a1 + 824));
  v5[0] = *MEMORY[0x24BEDB7F0];
  v3 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v5[2] = v3;
  v5[3] = MEMORY[0x24BEDB848] + 16;
  if (v6 < 0)
    operator delete((void *)v5[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x20BD39C2C](&v7);
}

void sub_20B9C631C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B83C118((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B9C6330(_QWORD *a1, const std::string *a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  std::ios_base *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = MEMORY[0x24BEDB858];
  v6 = MEMORY[0x24BEDB858] + 104;
  a1[16] = MEMORY[0x24BEDB858] + 104;
  a1[2] = v5 + 64;
  v7 = a1 + 2;
  v8 = (uint64_t)(a1 + 3);
  v9 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v10 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 16);
  v11 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 24);
  *a1 = v10;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v10 - 24)) = v11;
  a1[1] = 0;
  v12 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v12, a1 + 3);
  v12[1].__vftable = 0;
  v12[1].__fmtflags_ = -1;
  v13 = v9[4];
  v14 = v9[5];
  a1[2] = v13;
  *(_QWORD *)((char *)v7 + *(_QWORD *)(v13 - 24)) = v14;
  v15 = v9[1];
  *a1 = v15;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v15 - 24)) = v9[6];
  *a1 = v5 + 24;
  a1[16] = v6;
  a1[2] = v5 + 64;
  sub_20B8CED44(v8, a2, a3);
  return a1;
}

void sub_20B9C6428(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x20BD39C2C](v1);
  _Unwind_Resume(a1);
}

BOOL sub_20B9C6450(uint64_t a1, char *a2, uint64_t a3)
{
  _DWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  int v44;
  unsigned int *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v49;
  unsigned int *v50;
  uint64_t v51;
  unint64_t v52;
  unsigned int *v53;
  unsigned int *v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;

  *(_DWORD *)(a1 + 376) = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 380) = *((_DWORD *)a2 + 1);
  v6 = a2 + 16;
  v7 = *((unsigned int *)a2 + 2);
  v8 = *((unsigned int *)a2 + 3);
  sub_20B969098(0, 0, (uint64_t)(a2 + 16), v7);
  sub_20B9C60C8((_QWORD *)a1, v9);
  v10 = (_DWORD *)((char *)v6 + v7 + v8);
  v11 = v10 + 2;
  v12 = *v10;
  v13 = v10[1];
  sub_20B8064EC((_QWORD **)(a1 + 824), (uint64_t)(v10 + 2), v12);
  v14 = (unsigned int *)((char *)v11 + v12 + v13);
  v15 = v14 + 2;
  v16 = *v14;
  v17 = v14[1];
  if ((_DWORD)v16)
    sub_20B8064EC((_QWORD **)(a1 + 864), (uint64_t)(v14 + 2), *v14);
  else
    v16 = 0;
  v18 = (unsigned int *)((char *)v15 + v16 + v17);
  v19 = (uint64_t)(v18 + 2);
  v20 = *v18;
  v21 = v18[1];
  if ((_DWORD)v20)
  {
    v22 = (_QWORD *)operator new();
    v23 = (_QWORD *)operator new();
    sub_20B9C790C(v23, v19, v20);
    *v22 = &unk_24C49BF40;
    v22[1] = 0;
    v22[5] = 0;
    v22[6] = v23;
    v24 = *(_QWORD *)(a1 + 952);
    *(_QWORD *)(a1 + 952) = v22;
    if (v24)
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 72))(v24);
  }
  else
  {
    v20 = 0;
  }
  v25 = (unsigned int *)(v19 + v20 + v21);
  v26 = *v25;
  *(_DWORD *)(a1 + 396) = v26;
  v27 = v25 + 2;
  v28 = v25[1];
  *(_QWORD *)(a1 + 352) = v27;
  v29 = (unsigned int *)((char *)v27 + v26 + v28);
  v30 = (unsigned int *)&a2[a3];
  if (v29 >= (unsigned int *)&a2[a3])
    return 0;
  v31 = v29 + 2;
  v33 = *v29;
  v32 = v29[1];
  *(_QWORD *)(a1 + 880) = v31;
  v34 = (unsigned int *)((char *)v31 + v33 + v32);
  if (v34 >= v30)
    return 0;
  v35 = v34 + 2;
  v37 = *v34;
  v36 = v34[1];
  *(_QWORD *)(a1 + 888) = v35;
  *(_QWORD *)(a1 + 896) = v37;
  v38 = (unsigned int *)((char *)v35 + v37 + v36);
  if (v38 >= v30)
    return 0;
  v39 = (unsigned int *)((char *)v38 + *v38 + v38[1] + 8);
  if (v39 >= v30)
    return 0;
  v40 = v39 + 2;
  v42 = *v39;
  v41 = v39[1];
  *(_QWORD *)(a1 + 872) = v40;
  v43 = (char *)v40 + v42 + v41;
  if (*(_DWORD *)(a1 + 376) >= 0x6Au)
  {
    v44 = *(_DWORD *)(a1 + 380);
    if (v44 == 5 || !v44)
    {
      v45 = (unsigned int *)(v43 + 8);
      v46 = *(unsigned int *)v43;
      v47 = *((unsigned int *)v43 + 1);
      if ((_DWORD)v46)
        sub_20B8064EC((_QWORD **)(a1 + 832), (uint64_t)(v43 + 8), *(unsigned int *)v43);
      else
        v46 = 0;
      v49 = (unsigned int *)((char *)v45 + v46 + v47);
      v50 = v49 + 2;
      v52 = *v49;
      v51 = v49[1];
      *(_QWORD *)(a1 + 840) = v50;
      *(_QWORD *)(a1 + 848) = v52 >> 2;
      v53 = (unsigned int *)((char *)v50 + v52 + v51);
      v54 = v53 + 2;
      v56 = *v53;
      v55 = v53[1];
      v57 = (_QWORD *)operator new();
      *v57 = v54;
      v57[1] = v56 >> 2;
      v58 = *(_QWORD *)(a1 + 856);
      *(_QWORD *)(a1 + 856) = v57;
      if (v58)
        MEMORY[0x20BD39CB0](v58, 0x1050C40717B85FCLL);
      v43 = (char *)v54 + v56 + v55;
    }
  }
  return v43 - a2 == a3;
}

void sub_20B9C6700(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x20BD39CB0](v2, 0x10A1C40079592F6);
  MEMORY[0x20BD39CB0](v1, 0x10A1C4088EF1EDBLL);
  _Unwind_Resume(a1);
}

BOOL sub_20B9C6744(uint64_t a1, char *a2, uint64_t a3)
{
  char ***v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v11;

  sub_20B8A741C((std::string *)(a1 + 400), a2);
  sub_20B90CFC0(a2, a3, 1, &v11);
  v6 = (char ***)(a1 + 800);
  sub_20B82E770(a1 + 800, &v11);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return *v6 && sub_20B9C6450(a1, **v6, (uint64_t)(*v6)[1]);
}

const char *sub_20B9C680C()
{
  return "UTF-16LE";
}

_QWORD *sub_20B9C6818(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[120];
  a1[120] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
  return sub_20B8A91DC(a1);
}

uint64_t sub_20B9C6850@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_20B9C6864(a4, (uint64_t *)(a1 + 832), a2, a3);
}

uint64_t sub_20B9C6864(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  __int16 v8;
  _OWORD v10[2];
  int v11;
  int v12;

  sub_20B7F8B20(v10);
  sub_20B7F8BDC(v10, a3, a4);
  *(_WORD *)a1 = 0;
  *(_QWORD *)(a1 + 12) = 0;
  *(_QWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 20) = 0;
  if ((sub_20B8067D0(a2, (uint64_t)v10) & 1) != 0)
  {
    v8 = v11;
    *(_DWORD *)(a1 + 8) = v12;
    *(_WORD *)(a1 + 12) = v8;
  }
  return sub_20B7F8B30((uint64_t)v10);
}

void sub_20B9C68E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B7F8B30((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unint64_t sub_20B9C68FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  uint64_t *v11;
  _WORD *i;
  char v13;
  char v14;
  __int16 v15;
  _OWORD v17[2];
  int v18;
  int v19;

  sub_20B7F8B20(v17);
  sub_20B7F8BDC(v17, a2, a3);
  v10 = 0;
  v11 = (uint64_t *)(a1 + 824);
  for (i = (_WORD *)(a4 + 12); ; i += 12)
  {
    v13 = sub_20B806868(v11, (uint64_t)v17);
    v14 = v10 < a5 ? v13 : 0;
    if ((v14 & 1) == 0)
      break;
    v15 = v18;
    *((_DWORD *)i - 1) = v19;
    *i = v15;
    ++v10;
  }
  sub_20B7F8B30((uint64_t)v17);
  return v10;
}

void sub_20B9C699C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B7F8B30((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9C69B4@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  __int128 v7;
  void *__src;
  unsigned int v9;

  sub_20B7F8B20(&v7);
  sub_20B7F8C4C((uint64_t)&v7, *(unsigned int *)(*(_QWORD *)(a1 + 840) + 4 * a2));
  sub_20B80681C((unint64_t *)(a1 + 832), (uint64_t)&v7);
  sub_20B877ED0(a3, __src, (unint64_t)v9 >> 1);
  return sub_20B7F8B30((uint64_t)&v7);
}

void sub_20B9C6A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B7F8B30((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_BYTE *sub_20B9C6A40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _BYTE *result;
  BOOL v7;
  uint64_t v8;
  unsigned int v9;
  __int16 v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  result = (_BYTE *)sub_20B9C6864((uint64_t)&v8, (uint64_t *)(a1 + 824), a2, a3);
  if (v9)
    v7 = 0;
  else
    v7 = v10 == 0;
  if (v7)
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_20B936674(&v11, *(uint64_t **)(a1 + 856), v9);
    if (v12 >= v13)
      return sub_20B87C9E0((_BYTE *)a4, byte_20BA93B9E);
    else
      return (_BYTE *)sub_20B9C69B4(a1, *(_DWORD *)(*v11 + 4 * v12), (_QWORD *)a4);
  }
  return result;
}

uint64_t sub_20B9C6AE0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_24C4673B8;
  v2 = a1[120];
  a1[120] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
  v3 = a1[119];
  a1[119] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
  sub_20B7F8B30((uint64_t)(a1 + 113));
  sub_20B806284(a1 + 108);
  v4 = a1[107];
  a1[107] = 0;
  if (v4)
    MEMORY[0x20BD39CB0](v4, 0x1050C40717B85FCLL);
  sub_20B806284(a1 + 104);
  sub_20B806284(a1 + 103);
  sub_20B811FE4((uint64_t)(a1 + 100));
  return sub_20B8A90E8((uint64_t)a1);
}

void sub_20B9C6B84(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_24C4673B8;
  v2 = a1[120];
  a1[120] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
  v3 = a1[119];
  a1[119] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
  sub_20B7F8B30((uint64_t)(a1 + 113));
  sub_20B806284(a1 + 108);
  v4 = a1[107];
  a1[107] = 0;
  if (v4)
    MEMORY[0x20BD39CB0](v4, 0x1050C40717B85FCLL);
  sub_20B806284(a1 + 104);
  sub_20B806284(a1 + 103);
  sub_20B811FE4((uint64_t)(a1 + 100));
  sub_20B8A90E8((uint64_t)a1);
  JUMPOUT(0x20BD39CB0);
}

BOOL sub_20B9C6C3C(uint64_t a1)
{
  return *(_BYTE *)(a1 + 1224) == 0;
}

uint64_t sub_20B9C6C4C()
{
  return 0;
}

void sub_20B9C6C58()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B9C6C6C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C46A2F0;
  result[1] = v3;
  return result;
}

uint64_t sub_20B9C6CA0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C46A2F0;
  a2[1] = v2;
  return result;
}

void sub_20B9C6CBC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, _BYTE *a6)
{
  char **v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v9 = *(char ***)(a1 + 8);
  v11 = v9[1];
  v10 = (unint64_t)v9[2];
  if ((unint64_t)v11 >= v10)
  {
    v13 = *v9;
    v14 = (v11 - *v9) >> 3;
    v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61)
      sub_20B80CDD8();
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 2 > v15)
      v15 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    if (v17)
    {
      if (v17 >> 61)
        sub_20B800BC0();
      v18 = (char *)operator new(8 * v17);
    }
    else
    {
      v18 = 0;
    }
    v19 = &v18[8 * v14];
    *(_QWORD *)v19 = *a2;
    v12 = v19 + 8;
    if (v11 != v13)
    {
      do
      {
        v20 = *((_QWORD *)v11 - 1);
        v11 -= 8;
        *((_QWORD *)v19 - 1) = v20;
        v19 -= 8;
      }
      while (v11 != v13);
      v11 = *v9;
    }
    *v9 = v19;
    v9[1] = v12;
    v9[2] = &v18[8 * v17];
    if (v11)
      operator delete(v11);
  }
  else
  {
    *(_QWORD *)v11 = *a2;
    v12 = v11 + 8;
  }
  v9[1] = v12;
  if (*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) - **(_QWORD **)(a1 + 8) >= 0x1F9uLL)
    *a6 = 1;
}

uint64_t sub_20B9C6DD8(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45EE40))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B9C6E14()
{
  return &unk_24C45EE40;
}

void sub_20B9C6E24()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B9C6E38()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C459448;
  return result;
}

void sub_20B9C6E5C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C459448;
}

uint64_t sub_20B9C6E74()
{
  return 0;
}

uint64_t sub_20B9C6E7C(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C458E48))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B9C6EB8()
{
  return &unk_24C458E48;
}

void sub_20B9C6EC8()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B9C6EDC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &off_24C46A348;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

__n128 sub_20B9C6F2C(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24C46A348;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20B9C6F64(uint64_t a1, _DWORD *a2, uint64_t *a3, unint64_t *a4, uint64_t *a5, _BYTE *a6)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  _BOOL4 v22;
  char *v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint8x8_t v27;
  _QWORD **v28;
  _QWORD *i;
  unint64_t v30;
  float v31;
  float v32;
  _BOOL8 v33;
  unint64_t v34;
  unint64_t v35;
  size_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  _BYTE *v43;
  unint64_t v44;
  _QWORD v45[2];

  v9 = *a3;
  v10 = *a4;
  v11 = *a5;
  if (*a3)
    v12 = *a4 >> 1;
  else
    v12 = 0;
  v45[0] = *a3;
  v45[1] = v12;
  v13 = *(_QWORD *)(a1 + 24);
  if (*(_DWORD *)(v13 + 64) == 2)
  {
    if ((sub_20B96A0A4(*(uint64_t **)(a1 + 8), v9, v12, *(_QWORD *)(a1 + 48), 0, 0) & 1) != 0)
      return;
    v13 = *(_QWORD *)(a1 + 24);
  }
  v14 = **(_QWORD **)(a1 + 32);
  v15 = *(_QWORD **)(a1 + 16);
  v16 = (*v15)++;
  v17 = v14 + 24 * v16;
  v18 = *(unsigned int *)(v13 + 32);
  if (2 * v11 < v18)
    LOWORD(v18) = 2 * v11;
  *(_WORD *)(v17 + 12) = v18;
  v19 = *(_QWORD *)(a1 + 40);
  v20 = *(_QWORD *)(v19 + 8);
  if (v10 <= 2 * v20)
    v21 = 0;
  else
    v21 = v10 - 2 * v20;
  *(_WORD *)(v17 + 14) = v21;
  *(_DWORD *)(v17 + 8) = *a2;
  *(_DWORD *)(v17 + 4) = a2[1];
  v22 = sub_20B947D74(v19, (uint64_t)v45);
  *(_BYTE *)(v17 + 1) = !v22;
  v23 = (char *)(v17 + 1);
  if (!v22)
    goto LABEL_54;
  v24 = *(_QWORD **)(a1 + 56);
  v44 = v12;
  if (!sub_20B891738(v24, &v44))
    goto LABEL_54;
  v25 = *(_QWORD *)(a1 + 56);
  v26 = *(_QWORD *)(v25 + 8);
  v43 = a6;
  if (v26)
  {
    v27 = (uint8x8_t)vcnt_s8((int8x8_t)v26);
    v27.i16[0] = vaddlv_u8(v27);
    if (v27.u32[0] > 1uLL)
    {
      v10 = v12;
      if (v26 <= v12)
        v10 = v12 % v26;
    }
    else
    {
      v10 = (v26 - 1) & v12;
    }
    v28 = *(_QWORD ***)(*(_QWORD *)v25 + 8 * v10);
    if (v28)
    {
      for (i = *v28; i; i = (_QWORD *)*i)
      {
        v30 = i[1];
        if (v30 == v12)
        {
          if (i[2] == v12)
            goto LABEL_53;
        }
        else
        {
          if (v27.u32[0] > 1uLL)
          {
            if (v30 >= v26)
              v30 %= v26;
          }
          else
          {
            v30 &= v26 - 1;
          }
          if (v30 != v10)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v12;
  i[2] = v12;
  i[3] = 0;
  v31 = (float)(unint64_t)(*(_QWORD *)(v25 + 24) + 1);
  v32 = *(float *)(v25 + 32);
  if (!v26 || (float)(v32 * (float)v26) < v31)
  {
    v33 = 1;
    if (v26 >= 3)
      v33 = (v26 & (v26 - 1)) != 0;
    v34 = v33 | (2 * v26);
    v35 = vcvtps_u32_f32(v31 / v32);
    if (v34 <= v35)
      v36 = v35;
    else
      v36 = v34;
    sub_20B828960(v25, v36);
    v26 = *(_QWORD *)(v25 + 8);
    if ((v26 & (v26 - 1)) != 0)
    {
      if (v26 <= v12)
        v10 = v12 % v26;
      else
        v10 = v12;
    }
    else
    {
      v10 = (v26 - 1) & v12;
    }
  }
  v37 = *(_QWORD *)v25;
  v38 = *(_QWORD **)(*(_QWORD *)v25 + 8 * v10);
  if (v38)
  {
    *i = *v38;
LABEL_51:
    *v38 = i;
    goto LABEL_52;
  }
  *i = *(_QWORD *)(v25 + 16);
  *(_QWORD *)(v25 + 16) = i;
  *(_QWORD *)(v37 + 8 * v10) = v25 + 16;
  if (*i)
  {
    v39 = *(_QWORD *)(*i + 8);
    if ((v26 & (v26 - 1)) != 0)
    {
      if (v39 >= v26)
        v39 %= v26;
    }
    else
    {
      v39 &= v26 - 1;
    }
    v38 = (_QWORD *)(*(_QWORD *)v25 + 8 * v39);
    goto LABEL_51;
  }
LABEL_52:
  ++*(_QWORD *)(v25 + 24);
LABEL_53:
  v40 = i[3];
  a6 = v43;
  if (v40 != v11)
  {
    v41 = 1;
    goto LABEL_59;
  }
LABEL_54:
  if (!*v23
    || 2 * v11 != *(_DWORD *)(*(_QWORD *)(a1 + 24) + 32)
    || !sub_20B87C89C(*(_QWORD *)(a1 + 40), (uint64_t)v45))
  {
    goto LABEL_60;
  }
  v41 = 2;
LABEL_59:
  *v23 = v41;
LABEL_60:
  v42 = *(_QWORD *)(a1 + 24);
  *(_BYTE *)v17 = *(_BYTE *)(v42 + 82);
  if (*(_QWORD *)(v42 + 40) <= **(_QWORD **)(a1 + 16))
    *a6 = 1;
}

void sub_20B9C72BC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9C72D0(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45EE50))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B9C730C()
{
  return &unk_24C45EE50;
}

void sub_20B9C731C()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B9C7330(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x58uLL);
  *(_QWORD *)v2 = &off_24C4593F0;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20B9C7388(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24C4593F0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  v3 = *(_OWORD *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 40) = v3;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void sub_20B9C73C8(uint64_t a1, uint64_t a2, unsigned __int16 **a3, unint64_t *a4, uint64_t **a5, uint64_t *a6, uint64_t *a7, _BYTE *a8)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  float v27;
  char v28;
  size_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unsigned __int8 v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  BOOL v45;
  char v46;
  uint64_t v47;
  int v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  _QWORD *v52;
  BOOL v53;
  uint64_t *v55;
  uint64_t v56;
  __int16 v57;
  uint64_t v58;
  uint64_t v59;
  __int16 v60;
  uint64_t v61;
  uint64_t v62;
  void **p_p;
  uint64_t v64;
  void *v65;
  int v66;
  void **v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  unint64_t v72;
  __int16 v73;
  BOOL v74;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  int v80;
  _BYTE *v81;
  void **v82;
  __int16 v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  void **v87;
  uint64_t v88;
  unsigned __int8 v89;
  unint64_t v90;
  uint64_t v91[2];
  void *__p;
  uint64_t v93;
  unsigned __int8 v94;

  v8 = *(uint64_t **)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *v8;
  if (*(_QWORD *)(v9 + 40) > (unint64_t)*v8)
  {
    v14 = *a3;
    v15 = *a4;
    v16 = *a5;
    v17 = *a6;
    v18 = *a7;
    v19 = *(_DWORD *)(v9 + 64);
    if (!*(_BYTE *)(v9 + 80))
    {
      if (v19 == 2)
      {
        v21 = v17;
        v22 = *a5;
        v23 = *a7;
        if ((sub_20B96A0A4(*(uint64_t **)(a1 + 32), (uint64_t)v14, v15 >> 1, **(_QWORD **)(a1 + 40), 0, **(_QWORD **)(a1 + 48)) & 1) != 0)return;
        v17 = v21;
        v16 = v22;
        v18 = v23;
        v8 = *(uint64_t **)(a1 + 8);
        v9 = *(_QWORD *)(a1 + 16);
        v10 = *v8;
        v20 = *(unsigned __int8 *)(v9 + 80);
      }
      else
      {
        v20 = 0;
      }
LABEL_10:
      v24 = **(_QWORD **)(a1 + 24);
      v25 = v10 + 1;
      *v8 = v10 + 1;
      v26 = v24 + 24 * v10;
      *(_DWORD *)(v26 + 8) = *(_DWORD *)a2;
      v27 = *(float *)(a2 + 4);
      *(float *)(v26 + 4) = v27;
      *(_BYTE *)v26 = *(_BYTE *)(v9 + 82);
      if (v20)
      {
        v28 = *(_BYTE *)(v9 + 81);
        if (v28)
        {
          if (*(unsigned int *)(v9 + 32) >= v15)
            v29 = v15;
          else
            v29 = *(unsigned int *)(v9 + 32);
          v28 = memcmp(v14, *(const void **)(v9 + 24), v29) != 0;
        }
        v30 = v24 + 24 * v10;
        *(_BYTE *)(v30 + 1) = v28;
        *(_WORD *)(v30 + 12) = v15;
        goto LABEL_90;
      }
      v31 = 0;
      v86 = v24;
      if (v14 && v15 >= 2)
      {
        v32 = *v14;
        if ((v32 - 12353) >= 0x56)
        {
          v34 = v32 == 12316 || v32 == 12540;
          v33 = v34;
        }
        else
        {
          v33 = 1;
        }
        v31 = v33 ^ 1;
      }
      v35 = *(_QWORD *)(a1 + 32);
      if (*(_BYTE *)(v35 + 32))
      {
        v85 = v15;
        v36 = **(_QWORD **)(a1 + 48);
        v37 = **(_QWORD ***)(a1 + 80);
        if (v17)
        {
          v38 = *(_QWORD *)(*(_QWORD *)(v35 + 8) + 24 * v36) + 48 * *v16;
          v39 = *(_BYTE *)(v38 + 46) + 1;
          v40 = *(unsigned __int8 *)(v38 + 47) + 1;
        }
        else
        {
          v40 = 0;
          v39 = 0;
        }
        v50 = *(_QWORD *)(*(_QWORD *)(v9 + 8) + 80);
        v51 = v39 | (unsigned __int16)(v40 << 8);
        if (v37 && v39 | (unsigned __int16)(v40 << 8) && v37[2])
        {
          v52 = (_QWORD *)*v37;
          v53 = !*(_WORD *)(*v37 + 26) || v39 == 0;
          if (!v53 && HIBYTE(*(unsigned __int16 *)(*v37 + 26)) == v40)
          {
            v77 = v37 + 1;
            if (v52 == v77)
            {
LABEL_101:
              *v8 = v10;
              return;
            }
            while (*((unsigned __int8 *)v52 + 26) != v39)
            {
              v78 = (_QWORD *)v52[1];
              if (v78)
              {
                do
                {
                  v79 = v78;
                  v78 = (_QWORD *)*v78;
                }
                while (v78);
              }
              else
              {
                do
                {
                  v79 = (_QWORD *)v52[2];
                  v34 = *v79 == (_QWORD)v52;
                  v52 = v79;
                }
                while (!v34);
              }
              v52 = v79;
              if (v79 == v77)
                goto LABEL_101;
            }
          }
        }
        v83 = v51;
        v84 = *(_QWORD *)(a1 + 72);
        v80 = v31;
        v81 = a8;
        v55 = v16;
        v56 = v17;
        v57 = v18;
        sub_20BA04978(v35, v50, v36, v16, v17, (unint64_t)&__p);
        *(_WORD *)(v86 + 24 * v10 + 12) = 2 * v57;
        v58 = v94;
        v59 = v93;
        v82 = (void **)__p;
        v60 = sub_20BA04ADC((_QWORD *)v35, v36, v55, v56);
        v61 = *(_QWORD *)(v84 + 24);
        if ((v58 & 0x80u) == 0)
          v62 = v58;
        else
          v62 = v59;
        p_p = &__p;
        if ((v58 & 0x80u) != 0)
          p_p = v82;
        v87 = p_p;
        v88 = v62;
        LOWORD(v91[0]) = v83;
        LOWORD(v90) = v60;
        if (!v61)
          sub_20B80BB74();
        *(_QWORD *)(v86 + 24 * v10 + 16) = (*(uint64_t (**)(uint64_t, void ***, uint64_t *, unint64_t *))(*(_QWORD *)v61 + 48))(v61, &v87, v91, &v90);
        v64 = v94;
        v65 = &__p;
        if ((v94 & 0x80u) != 0)
        {
          v65 = __p;
          v64 = v93;
        }
        v91[0] = (uint64_t)v65;
        v91[1] = v64;
        v90 = 0;
        sub_20B87B938(v91, &v90, 0, 0, &v87);
        v66 = (char)v89;
        v67 = v87;
        v68 = v88;
        if ((v89 & 0x80u) == 0)
          v68 = v89;
        v69 = v68 - v90;
        if (v87)
          v70 = 0;
        else
          v70 = (v89 & 0x80u) != 0;
        v71 = 2 * v69;
        if (v70)
          v72 = 0;
        else
          v72 = v71;
        a8 = v81;
        if (v85 <= v72)
        {
          v73 = 0;
          v74 = *(float *)(v26 + 4) != 0.0 && v85 == v72;
        }
        else
        {
          v73 = v85 - v72;
          v74 = 1;
        }
        v76 = v86 + 24 * v10;
        *(_BYTE *)(v76 + 1) = v74;
        *(_WORD *)(v76 + 14) = v73;
        if (v66 < 0)
          operator delete(v67);
        if ((char)v94 < 0)
          operator delete(__p);
        if (!v80)
          goto LABEL_89;
      }
      else
      {
        v41 = 56;
        if (v31)
          v41 = 48;
        v42 = *(_QWORD *)(*(_QWORD *)(a1 + v41 + 8) + 8);
        v43 = 2 * v42;
        v45 = v27 != 0.0 && v15 == v43;
        v46 = v15 > 2 * v42 || v45;
        v47 = v86 + 24 * v10;
        *(_BYTE *)(v47 + 1) = v46;
        LOWORD(v48) = 2 * v18;
        if (2 * v18 >= (unint64_t)*(unsigned int *)(v9 + 32))
          v48 = *(_DWORD *)(v9 + 32);
        *(_WORD *)(v47 + 12) = v48;
        v49 = v15 - v43;
        if (v15 <= v43)
          v49 = 0;
        *(_WORD *)(v47 + 14) = v49;
        if (!v31)
          goto LABEL_89;
      }
      *(_BYTE *)v26 = 1;
LABEL_89:
      v9 = *(_QWORD *)(a1 + 16);
      v25 = **(_QWORD **)(a1 + 8);
LABEL_90:
      if (*(_QWORD *)(v9 + 40) <= v25)
        *a8 = 1;
      return;
    }
    if (v19 != 2 || v15 != *(_DWORD *)(v9 + 32))
    {
      v20 = 1;
      goto LABEL_10;
    }
  }
}

void sub_20B9C78A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B9C78C4(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C458E38))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B9C7900()
{
  return &unk_24C458E38;
}

_QWORD *sub_20B9C790C(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  *a1 = &unk_24C49BDB8;
  sub_20B969098(0, 0, a2, a3);
  v8[0] = &off_24C4A0160;
  v9 = v8;
  a1[1] = v4;
  sub_20B8F892C((uint64_t)(a1 + 2), (uint64_t)v8);
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

void sub_20B9C79D8()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B9C79EC()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C4A0160;
  return result;
}

void sub_20B9C7A10(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C4A0160;
}

void sub_20B9C7A28(uint64_t a1, void ***a2)
{
  sub_20B969128(*a2);
}

uint64_t sub_20B9C7A30(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C4A01C0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B9C7A6C()
{
  return &unk_24C4A01C0;
}

uint64_t sub_20B9C7A78(uint64_t a1)
{
  uint64_t v1;
  unsigned __int16 v2;

  v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  return v2;
}

uint64_t sub_20B9C7AA4(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

uint64_t sub_20B9C7AD4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 312))(a1);
}

void sub_20B9C7AE0(uint64_t a1@<X0>, char **a2@<X8>)
{
  uint64_t v4;
  uint64_t i;
  int v6;
  unint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  int v17;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  if (v4 >= 1)
  {
    for (i = 0; i != v4; ++i)
    {
      v6 = *(_DWORD *)((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, i) + 8);
      v8 = a2[1];
      v7 = (unint64_t)a2[2];
      if ((unint64_t)v8 >= v7)
      {
        v10 = *a2;
        v11 = (v8 - *a2) >> 2;
        v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 62)
          sub_20B80CDD8();
        v13 = v7 - (_QWORD)v10;
        if (v13 >> 1 > v12)
          v12 = v13 >> 1;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
          v14 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v14 = v12;
        if (v14)
        {
          v15 = (char *)sub_20B8127BC((uint64_t)(a2 + 2), v14);
          v10 = *a2;
          v8 = a2[1];
        }
        else
        {
          v15 = 0;
        }
        v16 = &v15[4 * v11];
        *(_DWORD *)v16 = v6;
        v9 = v16 + 4;
        while (v8 != v10)
        {
          v17 = *((_DWORD *)v8 - 1);
          v8 -= 4;
          *((_DWORD *)v16 - 1) = v17;
          v16 -= 4;
        }
        *a2 = v16;
        a2[1] = v9;
        a2[2] = &v15[4 * v14];
        if (v10)
          operator delete(v10);
      }
      else
      {
        *(_DWORD *)v8 = v6;
        v9 = v8 + 4;
      }
      a2[1] = v9;
    }
  }
}

void sub_20B9C7C1C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B9C7C40(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  return result;
}

uint64_t sub_20B9C7C70(uint64_t result, int a2)
{
  *(_DWORD *)(result + 20) = a2;
  return result;
}

uint64_t sub_20B9C7C7C(uint64_t result, char a2)
{
  *(_BYTE *)(result + 24) = a2;
  return result;
}

uint64_t sub_20B9C7C84(uint64_t a1)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 56))(v1);
}

void sub_20B9C7CB8(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  if (v6)
  {
    v7 = v6;
    for (i = 0; i != v7; ++i)
    {
      v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, i);
      if (a2)
      {
        if (a2 == 1)
          (*(void (**)(char **__return_ptr))(*(_QWORD *)v9 + 40))(&v11);
        else
          (*(void (**)(char **__return_ptr))(*(_QWORD *)v9 + 48))(&v11);
      }
      else
      {
        (*(void (**)(char **__return_ptr))(*(_QWORD *)v9 + 56))(&v11);
      }
      v10 = v11;
      sub_20B943104((uint64_t)a3, a3[1], v11, v12, (v12 - v11) >> 1);
      if (v10)
        operator delete(v10);
    }
  }
}

void sub_20B9C7DA0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B9C7DDC(uint64_t a1, uint64_t a2, _QWORD *a3, int *a4, uint64_t a5)
{
  _QWORD *v6;
  int v9;
  int v10;
  uint64_t v11;
  _BOOL4 v12;
  int v13;
  _QWORD *v14;
  _QWORD *v15;
  _BOOL4 v17;
  uint64_t v18;
  unsigned int v19;
  _QWORD *v20;
  const __CFString *v22;
  uint64_t v23;
  CFStringRef v24;
  uint64_t *v25;
  CFTypeRef v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  _WORD *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  __int16 v44;
  unint64_t v45;
  char *v46;
  _WORD *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  __int16 v56;
  uint64_t v57;
  unsigned __int8 *v58;
  __int16 v59;
  __int16 v60;
  unint64_t v61;
  char *v62;
  _WORD *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  __int16 v72;
  __int16 v73;
  unint64_t v74;
  char *v75;
  _WORD *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  __int16 v85;
  unsigned int v86;
  int v87;
  unint64_t v88;
  char *v89;
  _DWORD *v90;
  char *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  int *v97;
  int v98;
  _QWORD *v99;
  _QWORD *v100;
  __CFString *v101;
  _QWORD *v102;
  CFMutableStringRef v103;
  __CFString *v104;
  const void *Copy;
  const void **v106;
  uint64_t v107;
  const __CFString *v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t Length;
  const __CFAllocator *v112;
  uint64_t v113;
  BOOL v115;
  const __CFString *v116;
  CFTypeRef v117;
  CFTypeRef v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  _QWORD *v123;
  char *v124;
  __int16 v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  __int16 v135;
  _QWORD *v136;
  _QWORD *v137;
  unint64_t v138;
  const __CFString *v140;
  _BOOL4 v141;
  uint64_t v142;
  const void **v143;
  const void **v144;
  _QWORD *v145;
  const void **v147;
  void **v148;
  void **v149;
  char **v150;
  void **v151;
  void **v152;
  void *v153;
  void *v154;
  _QWORD *v155;
  CFRange v156;
  CFRange v157;

  v6 = a3;
  *(_QWORD *)a1 = &off_24C4604F8;
  *(_OWORD *)(a1 + 8) = 0u;
  v151 = (void **)(a1 + 8);
  *(_OWORD *)(a1 + 56) = 0u;
  v152 = (void **)(a1 + 56);
  *(_OWORD *)(a1 + 152) = 0u;
  v150 = (char **)(a1 + 152);
  *(_OWORD *)(a1 + 200) = 0u;
  v143 = (const void **)(a1 + 200);
  *(_QWORD *)(a1 + 216) = 0;
  v147 = (const void **)(a1 + 216);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_DWORD *)(a1 + 224) = a4[6];
  v9 = *a4;
  if (*a4 > 4)
  {
    if (v9 != 5)
    {
      if (v9 == 13)
      {
        v10 = 2;
        goto LABEL_10;
      }
      goto LABEL_8;
    }
    v10 = 1;
  }
  else
  {
    v10 = 0;
    if (v9 != 2 && v9 != 4)
LABEL_8:
      v10 = -1;
  }
LABEL_10:
  *(_DWORD *)(a1 + 232) = v10;
  *(_DWORD *)(a1 + 236) = 0;
  *(_QWORD *)(a1 + 240) = a4;
  if (a2)
  {
    v11 = *(_QWORD *)(a2 + 16);
    v12 = v11 != 0;
    if (!a3 && v11)
    {
      v6 = *(_QWORD **)v11;
      v12 = 1;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v148 = (void **)(a1 + 128);
  v149 = (void **)(a1 + 32);
  v142 = a1 + 176;
  v13 = *(unsigned __int8 *)(a5 + 25);
  v14 = *(_QWORD **)a5;
  v144 = (const void **)(a1 + 208);
  if (!v6)
  {
    v20 = *(_QWORD **)(a5 + 8);
    if (v14 != v20
      && *(_BYTE *)(a5 + 24)
      && (*(uint64_t (**)(_QWORD))(*(_QWORD *)*(v20 - 1) + 48))(*(v20 - 1))
      && v12)
    {
      v22 = 0;
      v23 = *(_QWORD *)(a5 + 8);
      if (*(_QWORD *)a5 != v23 && *(_BYTE *)(a5 + 24))
        v22 = (const __CFString *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v23 - 8) + 48))(*(_QWORD *)(v23 - 8), 0);
      v156.length = *(_QWORD *)(v11 + 16);
      v156.location = 0;
      v24 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x24BDBD240], v22, v156);
      sub_20B87E150((const void **)(a1 + 208), v24);
    }
    v25 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
    if (v12)
      v26 = CFRetain(*(CFTypeRef *)(v11 + 8));
    else
      v26 = 0;
    sub_20B87E150(v143, v26);
    v117 = CFRetain(*v143);
    sub_20B87E150(v147, v117);
    *(_BYTE *)(a1 + 239) = (*(_DWORD *)(a2 + 8) - 4) < 3;
    if (!*(_QWORD *)(a1 + 208))
    {
      v118 = CFRetain(*v143);
      sub_20B87E150((const void **)(a1 + 208), v118);
    }
    v120 = *v25;
    v119 = v25[1];
    LODWORD(v153) = 0;
    sub_20B9C893C(v150, v119, &v153);
    if (v119)
    {
      v121 = 0;
      v122 = 0;
      v123 = (_QWORD *)(a1 + 72);
      v124 = *(char **)(a1 + 64);
      do
      {
        v125 = *(_WORD *)(v120 + 2 * v121) - 48;
        if ((unint64_t)v124 >= *v123)
        {
          v127 = (char *)*v152;
          v128 = v124 - (_BYTE *)*v152;
          if (v128 <= -3)
            sub_20B80CDD8();
          v129 = v128 >> 1;
          v130 = *v123 - (_QWORD)v127;
          if (v130 <= (v128 >> 1) + 1)
            v131 = v129 + 1;
          else
            v131 = *v123 - (_QWORD)v127;
          if (v130 >= 0x7FFFFFFFFFFFFFFELL)
            v132 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v132 = v131;
          if (v132)
          {
            v133 = (char *)sub_20B80FD48(a1 + 72, v132);
            v127 = *(char **)(a1 + 56);
            v124 = *(char **)(a1 + 64);
          }
          else
          {
            v133 = 0;
          }
          v134 = &v133[2 * v129];
          *(_WORD *)v134 = v125;
          v126 = v134 + 2;
          while (v124 != v127)
          {
            v135 = *((_WORD *)v124 - 1);
            v124 -= 2;
            *((_WORD *)v134 - 1) = v135;
            v134 -= 2;
          }
          *(_QWORD *)(a1 + 56) = v134;
          *(_QWORD *)(a1 + 64) = v126;
          *(_QWORD *)(a1 + 72) = &v133[2 * v132];
          if (v127)
            operator delete(v127);
        }
        else
        {
          *(_WORD *)v124 = v125;
          v126 = v124 + 2;
        }
        *(_QWORD *)(a1 + 64) = v126;
        v122 = v122 + *(unsigned __int16 *)(v120 + 2 * v121++) - 48;
        v124 = v126;
      }
      while (v121 != v119);
    }
    else
    {
      v122 = 0;
    }
    if (v13)
      goto LABEL_195;
    v136 = *(_QWORD **)a5;
    v137 = *(_QWORD **)(a5 + 8);
    if (*(_QWORD **)a5 == v137)
    {
      v138 = 0;
    }
    else
    {
      v138 = 0;
      do
      {
        v138 += (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v136 + 32))(*v136);
        ++v136;
      }
      while (v136 != v137);
    }
    if (v122 < v138)
LABEL_195:
      *(_DWORD *)(a1 + 228) = 1;
    else
      *(_DWORD *)(a1 + 228) = 0;
    goto LABEL_196;
  }
  v15 = *(_QWORD **)(a5 + 8);
  v17 = v14 != v15 && *(_BYTE *)(a5 + 24) == 0;
  v18 = v6[5];
  *(_BYTE *)(a1 + 236) = (v18 & 0x20) != 0;
  *(_BYTE *)(a1 + 237) = (v18 & 4) != 0;
  *(_BYTE *)(a1 + 238) = (v18 & 0x10) != 0;
  v141 = v17;
  if (v13)
    goto LABEL_23;
  if (v14 == v15)
  {
LABEL_41:
    v19 = (v18 >> 6) & 2;
    goto LABEL_42;
  }
  v27 = 0;
  do
  {
    v27 += (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v14 + 32))(*v14);
    ++v14;
  }
  while (v14 != v15);
  if (v6[6] >= v27)
  {
    v18 = v6[5];
    goto LABEL_41;
  }
LABEL_23:
  v19 = 1;
LABEL_42:
  *(_DWORD *)(a1 + 228) = v19;
  v145 = v6;
  v28 = v6[1];
  if (v28)
  {
    v29 = 0;
    v30 = v145[2];
    v31 = v145[3];
    v32 = v145[4];
    do
    {
      v34 = *(char **)(a1 + 16);
      v33 = *(_QWORD *)(a1 + 24);
      if ((unint64_t)v34 >= v33)
      {
        v36 = (char *)*v151;
        v37 = v34 - (_BYTE *)*v151;
        if (v37 <= -3)
          goto LABEL_210;
        v38 = v37 >> 1;
        v39 = v33 - (_QWORD)v36;
        if (v39 <= (v37 >> 1) + 1)
          v40 = v38 + 1;
        else
          v40 = v39;
        if (v39 >= 0x7FFFFFFFFFFFFFFELL)
          v41 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v41 = v40;
        if (v41)
        {
          v42 = (char *)sub_20B80FD48(a1 + 24, v41);
          v36 = *(char **)(a1 + 8);
          v34 = *(char **)(a1 + 16);
        }
        else
        {
          v42 = 0;
        }
        v43 = &v42[2 * v38];
        *(_WORD *)v43 = *(_WORD *)(v30 + 2 * v29);
        v35 = v43 + 2;
        while (v34 != v36)
        {
          v44 = *((_WORD *)v34 - 1);
          v34 -= 2;
          *((_WORD *)v43 - 1) = v44;
          v43 -= 2;
        }
        *(_QWORD *)(a1 + 8) = v43;
        *(_QWORD *)(a1 + 16) = v35;
        *(_QWORD *)(a1 + 24) = &v42[2 * v41];
        if (v36)
          operator delete(v36);
      }
      else
      {
        *(_WORD *)v34 = *(_WORD *)(v30 + 2 * v29);
        v35 = v34 + 2;
      }
      *(_QWORD *)(a1 + 16) = v35;
      if (v31)
      {
        v46 = *(char **)(a1 + 40);
        v45 = *(_QWORD *)(a1 + 48);
        if ((unint64_t)v46 >= v45)
        {
          v48 = (char *)*v149;
          v49 = v46 - (_BYTE *)*v149;
          if (v49 < -2)
LABEL_210:
            sub_20B80CDD8();
          v50 = v49 >> 1;
          v51 = v45 - (_QWORD)v48;
          if (v51 <= (v49 >> 1) + 1)
            v52 = v50 + 1;
          else
            v52 = v51;
          if (v51 >= 0x7FFFFFFFFFFFFFFELL)
            v53 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v53 = v52;
          if (v53)
          {
            v54 = (char *)sub_20B80FD48(a1 + 48, v53);
            v48 = *(char **)(a1 + 32);
            v46 = *(char **)(a1 + 40);
          }
          else
          {
            v54 = 0;
          }
          v55 = &v54[2 * v50];
          *(_WORD *)v55 = *(_WORD *)(v31 + 2 * v29);
          v47 = v55 + 2;
          while (v46 != v48)
          {
            v56 = *((_WORD *)v46 - 1);
            v46 -= 2;
            *((_WORD *)v55 - 1) = v56;
            v55 -= 2;
          }
          *(_QWORD *)(a1 + 32) = v55;
          *(_QWORD *)(a1 + 40) = v47;
          *(_QWORD *)(a1 + 48) = &v54[2 * v53];
          if (v48)
            operator delete(v48);
        }
        else
        {
          *(_WORD *)v46 = *(_WORD *)(v31 + 2 * v29);
          v47 = v46 + 2;
        }
        *(_QWORD *)(a1 + 40) = v47;
      }
      if (*(_BYTE *)(v32 + 4 * v29))
      {
        v57 = v32 + 4 * v29;
        v59 = *(unsigned __int8 *)(v57 + 2);
        v58 = (unsigned __int8 *)(v57 + 2);
        v60 = v59 + *(unsigned __int8 *)(v32 + 4 * v29);
        v62 = *(char **)(a1 + 64);
        v61 = *(_QWORD *)(a1 + 72);
        if ((unint64_t)v62 >= v61)
        {
          v64 = (char *)*v152;
          v65 = v62 - (_BYTE *)*v152;
          if (v65 <= -3)
            sub_20B80CDD8();
          v66 = v65 >> 1;
          v67 = v61 - (_QWORD)v64;
          if (v67 <= (v65 >> 1) + 1)
            v68 = v66 + 1;
          else
            v68 = v67;
          if (v67 >= 0x7FFFFFFFFFFFFFFELL)
            v69 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v69 = v68;
          if (v69)
          {
            v70 = (char *)sub_20B80FD48(a1 + 72, v69);
            v64 = *(char **)(a1 + 56);
            v62 = *(char **)(a1 + 64);
          }
          else
          {
            v70 = 0;
          }
          v71 = &v70[2 * v66];
          *(_WORD *)v71 = v60;
          v63 = v71 + 2;
          while (v62 != v64)
          {
            v72 = *((_WORD *)v62 - 1);
            v62 -= 2;
            *((_WORD *)v71 - 1) = v72;
            v71 -= 2;
          }
          *(_QWORD *)(a1 + 56) = v71;
          *(_QWORD *)(a1 + 64) = v63;
          *(_QWORD *)(a1 + 72) = &v70[2 * v69];
          if (v64)
            operator delete(v64);
        }
        else
        {
          *(_WORD *)v62 = v60;
          v63 = v62 + 2;
        }
        *(_QWORD *)(a1 + 64) = v63;
        v73 = *v58;
        v75 = *(char **)(a1 + 136);
        v74 = *(_QWORD *)(a1 + 144);
        if ((unint64_t)v75 >= v74)
        {
          v77 = (char *)*v148;
          v78 = v75 - (_BYTE *)*v148;
          if (v78 <= -3)
            sub_20B80CDD8();
          v79 = v78 >> 1;
          v80 = v74 - (_QWORD)v77;
          if (v80 <= (v78 >> 1) + 1)
            v81 = v79 + 1;
          else
            v81 = v80;
          if (v80 >= 0x7FFFFFFFFFFFFFFELL)
            v82 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v82 = v81;
          if (v82)
          {
            v83 = (char *)sub_20B80FD48(a1 + 144, v82);
            v77 = *(char **)(a1 + 128);
            v75 = *(char **)(a1 + 136);
          }
          else
          {
            v83 = 0;
          }
          v84 = &v83[2 * v79];
          *(_WORD *)v84 = v73;
          v76 = v84 + 2;
          while (v75 != v77)
          {
            v85 = *((_WORD *)v75 - 1);
            v75 -= 2;
            *((_WORD *)v84 - 1) = v85;
            v84 -= 2;
          }
          *(_QWORD *)(a1 + 128) = v84;
          *(_QWORD *)(a1 + 136) = v76;
          *(_QWORD *)(a1 + 144) = &v83[2 * v82];
          if (v77)
            operator delete(v77);
        }
        else
        {
          *(_WORD *)v75 = v73;
          v76 = v75 + 2;
        }
        *(_QWORD *)(a1 + 136) = v76;
        v86 = *(unsigned __int8 *)(v32 + 4 * v29 + 3);
        if ((v86 & 1) != 0)
          v87 = 2;
        else
          v87 = (v86 >> 1) & 1;
        v89 = *(char **)(a1 + 160);
        v88 = *(_QWORD *)(a1 + 168);
        if ((unint64_t)v89 >= v88)
        {
          v91 = *v150;
          v92 = (v89 - *v150) >> 2;
          v93 = v92 + 1;
          if ((unint64_t)(v92 + 1) >> 62)
            sub_20B80CDD8();
          v94 = v88 - (_QWORD)v91;
          if (v94 >> 1 > v93)
            v93 = v94 >> 1;
          if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFFCLL)
            v95 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v95 = v93;
          if (v95)
          {
            v96 = (char *)sub_20B8127BC(a1 + 168, v95);
            v91 = *(char **)(a1 + 152);
            v89 = *(char **)(a1 + 160);
          }
          else
          {
            v96 = 0;
          }
          v97 = (int *)&v96[4 * v92];
          *v97 = v87;
          v90 = v97 + 1;
          while (v89 != v91)
          {
            v98 = *((_DWORD *)v89 - 1);
            v89 -= 4;
            *--v97 = v98;
          }
          *(_QWORD *)(a1 + 152) = v97;
          *(_QWORD *)(a1 + 160) = v90;
          *(_QWORD *)(a1 + 168) = &v96[4 * v95];
          if (v91)
            operator delete(v91);
        }
        else
        {
          *(_DWORD *)v89 = v87;
          v90 = v89 + 4;
        }
        *(_QWORD *)(a1 + 160) = v90;
      }
      ++v29;
    }
    while (v29 != v28);
  }
  v99 = *(_QWORD **)a5;
  v100 = *(_QWORD **)(a5 + 8);
  if (*(_QWORD **)a5 == v100)
  {
LABEL_139:
    if (v141)
    {
      v101 = sub_20B941888((_QWORD *)a5, (uint64_t)v145, 0);
      sub_20B87E150(v144, v101);
    }
  }
  else
  {
    while ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v99 + 56))(*v99) != 1)
    {
      if (++v99 == v100)
        goto LABEL_139;
    }
    v102 = operator new(8uLL);
    v153 = v102;
    *v102 = v145;
    v154 = v102 + 1;
    v155 = v102 + 1;
    v103 = sub_20B9415BC((_QWORD *)a5, (uint64_t *)&v153, v142);
    sub_20B87E150(v144, v103);
    if (!*v144)
    {
      v104 = sub_20B941888((_QWORD *)a5, (uint64_t)v145, 0);
      sub_20B87E150(v144, v104);
    }
    if (v153)
    {
      v154 = v153;
      operator delete(v153);
    }
  }
  if (*v144)
  {
    Copy = CFRetain(*v144);
    v106 = v147;
LABEL_147:
    sub_20B87E150(v106, Copy);
    goto LABEL_196;
  }
  v107 = *(_QWORD *)(a5 + 8);
  if (*(_QWORD *)a5 != v107
    && *(_BYTE *)(a5 + 24)
    && (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v107 - 8) + 48))(*(_QWORD *)(v107 - 8)))
  {
    v108 = 0;
    v109 = v145[6];
    v110 = *(_QWORD *)(a5 + 8);
    if (*(_QWORD *)a5 != v110 && *(_BYTE *)(a5 + 24))
      v108 = (const __CFString *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v110 - 8) + 48))(*(_QWORD *)(v110 - 8));
    Length = CFStringGetLength(v108);
    v112 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v113 = *(_QWORD *)(a5 + 8);
    v115 = *(_QWORD *)a5 == v113 || *(_BYTE *)(a5 + 24) == 0;
    if (v109 >= Length)
    {
      if (v115)
        v140 = 0;
      else
        v140 = (const __CFString *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v113 - 8) + 48))(*(_QWORD *)(v113 - 8));
      Copy = CFStringCreateCopy(v112, v140);
    }
    else
    {
      if (v115)
        v116 = 0;
      else
        v116 = (const __CFString *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v113 - 8) + 48))(*(_QWORD *)(v113 - 8));
      v157.length = v145[6];
      v157.location = 0;
      Copy = CFStringCreateWithSubstring(v112, v116, v157);
    }
    v106 = v144;
    goto LABEL_147;
  }
LABEL_196:
  if (*(_WORD *)(*(_QWORD *)(a1 + 240) + 98))
    sub_20B9C8A5C(a1);
  return a1;
}

void sub_20B9C8818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, const void **a12, const void **a13, uint64_t a14, uint64_t a15, const void **a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,void **a23,void **a24,void **a25)
{
  _QWORD *v25;
  uint64_t v26;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;

  sub_20B87E150(a16, 0);
  sub_20B87E150(a13, 0);
  sub_20B87E150(a12, 0);
  v28 = *a11;
  if (*a11)
  {
    v25[23] = v28;
    operator delete(v28);
  }
  v29 = *a24;
  if (*a24)
  {
    v25[20] = v29;
    operator delete(v29);
  }
  v30 = *a22;
  if (*a22)
  {
    v25[17] = v30;
    operator delete(v30);
  }
  v31 = (void *)v25[13];
  if (v31)
  {
    v25[14] = v31;
    operator delete(v31);
  }
  v32 = (void *)v25[10];
  if (v32)
  {
    v25[11] = v32;
    operator delete(v32);
  }
  v33 = **(void ***)(v26 - 120);
  if (v33)
  {
    v25[8] = v33;
    operator delete(v33);
  }
  v34 = *a23;
  if (*a23)
  {
    v25[5] = v34;
    operator delete(v34);
  }
  v35 = *a25;
  if (*a25)
  {
    v25[2] = v35;
    operator delete(v35);
  }
  _Unwind_Resume(a1);
}

void sub_20B9C893C(char **a1, unint64_t a2, _DWORD *a3)
{
  char *v5;
  char *v6;
  unint64_t v7;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *i;
  int v23;
  char *v24;
  uint64_t v25;

  v6 = *a1;
  v5 = a1[1];
  v7 = (v5 - *a1) >> 2;
  if (a2 <= v7)
  {
    if (a2 < v7)
      a1[1] = &v6[4 * a2];
  }
  else
  {
    v9 = (uint64_t)(a1 + 2);
    v10 = a1[2];
    if (a2 - v7 <= (v10 - v5) >> 2)
    {
      v24 = &v5[4 * (a2 - v7)];
      v25 = 4 * a2 - 4 * v7;
      do
      {
        *(_DWORD *)v5 = *a3;
        v5 += 4;
        v25 -= 4;
      }
      while (v25);
      a1[1] = v24;
    }
    else
    {
      if (a2 >> 62)
        sub_20B80CDD8();
      v11 = v10 - v6;
      v12 = (v10 - v6) >> 1;
      if (v12 <= a2)
        v12 = a2;
      if (v11 >= 0x7FFFFFFFFFFFFFFCLL)
        v13 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      v14 = (char *)sub_20B8127BC(v9, v13);
      v16 = &v14[4 * v7];
      v17 = &v14[4 * a2];
      v18 = 4 * a2 - 4 * v7;
      v19 = v16;
      do
      {
        *(_DWORD *)v19 = *a3;
        v19 += 4;
        v18 -= 4;
      }
      while (v18);
      v20 = &v14[4 * v15];
      v21 = *a1;
      for (i = a1[1]; i != v21; i -= 4)
      {
        v23 = *((_DWORD *)i - 1);
        *((_DWORD *)v16 - 1) = v23;
        v16 -= 4;
      }
      *a1 = v16;
      a1[1] = v17;
      a1[2] = v20;
      if (v21)
        operator delete(v21);
    }
  }
}

void sub_20B9C8A5C(uint64_t a1)
{
  CFStringRef v2;
  CFStringRef v3;
  uint64_t v4;
  CFAllocatorRef *v5;
  CFStringRef v6;
  uint64_t v7;
  CFStringRef v8;
  uint64_t v9;
  const void **v10;
  uint64_t v11;
  CFStringRef v12;
  UniChar chars;

  chars = *(_WORD *)(*(_QWORD *)(a1 + 240) + 98);
  if (chars)
  {
    v2 = CFStringCreateWithCharacters(0, &chars, 1);
    if (v2)
    {
      v3 = v2;
      v4 = *(_QWORD *)(a1 + 208);
      v5 = (CFAllocatorRef *)MEMORY[0x24BDBD240];
      if (v4)
      {
        v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("%@%@"), v2, v4, v2);
        sub_20B87E150((const void **)(a1 + 208), v6);
      }
      v7 = *(_QWORD *)(a1 + 216);
      if (v7)
      {
        v8 = CFStringCreateWithFormat(*v5, 0, CFSTR("%@%@"), v3, v7);
        sub_20B87E150((const void **)(a1 + 216), v8);
      }
      v11 = *(_QWORD *)(a1 + 200);
      v10 = (const void **)(a1 + 200);
      v9 = v11;
      if (v11)
      {
        v12 = CFStringCreateWithFormat(*v5, 0, CFSTR("%@%@"), v3, v9);
        sub_20B87E150(v10, v12);
      }
      CFRelease(v3);
    }
  }
}

void sub_20B9C8B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B87E150((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9C8B6C(uint64_t a1, const __CFString *cf, const void *a3, int *a4, uint64_t a5, char a6)
{
  char **v12;
  CFTypeRef v13;
  CFTypeRef *v14;
  CFTypeRef v15;
  int v16;
  int v17;
  uint64_t v18;
  CFIndex Length;
  const __CFString *v20;
  uint64_t v21;
  CFIndex v22;
  const __CFAllocator *v23;
  uint64_t v24;
  BOOL v26;
  const __CFString *v27;
  const __CFString *v28;
  CFStringRef Copy;
  CFIndex v30;
  int v31;
  _QWORD *v32;
  _QWORD *v33;
  CFIndex v34;
  int v36;
  CFTypeRef v37;
  _QWORD *v38;
  _QWORD *v39;
  __int16 v40;
  unint64_t v41;
  char *v42;
  _WORD *v43;
  __int16 v44;
  unint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  char *v60;
  unint64_t v61;
  _WORD *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  __int16 v71;
  _QWORD *v72;
  _QWORD *v73;
  char *v74;
  char *v75;
  __int16 v76;
  __int16 v77;
  void **v79;
  const void **v80;
  int v81;
  int v82;
  int v83;
  CFRange v84;

  *(_QWORD *)a1 = &off_24C4604F8;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  v79 = (void **)(a1 + 56);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  v12 = (char **)(a1 + 152);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  v13 = CFRetain(cf);
  *(_QWORD *)(a1 + 208) = 0;
  v14 = (CFTypeRef *)(a1 + 208);
  *(_QWORD *)(a1 + 200) = v13;
  if (a3)
    v15 = CFRetain(a3);
  else
    v15 = 0;
  *(_QWORD *)(a1 + 216) = v15;
  *(_QWORD *)(a1 + 224) = a4[6];
  v16 = *a4;
  if (*a4 > 4)
  {
    if (v16 == 5)
    {
      v17 = 1;
      goto LABEL_14;
    }
    if (v16 != 13)
    {
LABEL_11:
      v17 = -1;
      goto LABEL_14;
    }
    v17 = 2;
  }
  else
  {
    if (v16 == 2)
    {
      v17 = 0;
      goto LABEL_14;
    }
    v17 = 0;
    if (v16 != 4)
      goto LABEL_11;
  }
LABEL_14:
  v80 = (const void **)(a1 + 216);
  *(_DWORD *)(a1 + 232) = v17;
  *(_WORD *)(a1 + 236) = 0;
  *(_BYTE *)(a1 + 238) = 0;
  *(_BYTE *)(a1 + 239) = a6;
  *(_QWORD *)(a1 + 240) = a4;
  v18 = *(_QWORD *)(a5 + 8);
  if (*(_QWORD *)a5 != v18
    && *(_BYTE *)(a5 + 24)
    && (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v18 - 8) + 48))(*(_QWORD *)(v18 - 8)))
  {
    Length = CFStringGetLength(cf);
    v20 = 0;
    v21 = *(_QWORD *)(a5 + 8);
    if (*(_QWORD *)a5 != v21 && *(_BYTE *)(a5 + 24))
      v20 = (const __CFString *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v21 - 8) + 48))(*(_QWORD *)(v21 - 8));
    v22 = CFStringGetLength(v20);
    v23 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v24 = *(_QWORD *)(a5 + 8);
    v26 = *(_QWORD *)a5 == v24 || *(_BYTE *)(a5 + 24) == 0;
    if (Length >= v22)
    {
      if (v26)
        v28 = 0;
      else
        v28 = (const __CFString *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v24 - 8) + 48))(*(_QWORD *)(v24 - 8));
      Copy = CFStringCreateCopy(v23, v28);
    }
    else
    {
      if (v26)
        v27 = 0;
      else
        v27 = (const __CFString *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v24 - 8) + 48))(*(_QWORD *)(v24 - 8));
      v84.length = CFStringGetLength(cf);
      v84.location = 0;
      Copy = CFStringCreateWithSubstring(v23, v27, v84);
    }
    sub_20B87E150((const void **)(a1 + 208), Copy);
  }
  v30 = CFStringGetLength(cf);
  v31 = *(unsigned __int8 *)(a5 + 25);
  v33 = *(_QWORD **)a5;
  v32 = *(_QWORD **)(a5 + 8);
  if (*(_QWORD **)a5 == v32)
  {
    v34 = 0;
    if (*(_BYTE *)(a5 + 25))
    {
LABEL_47:
      v36 = 1;
LABEL_48:
      *(_DWORD *)(a1 + 228) = v36;
      goto LABEL_49;
    }
  }
  else
  {
    v34 = 0;
    do
    {
      v34 += (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v33 + 32))(*v33);
      ++v33;
    }
    while (v33 != v32);
    if (v31)
      goto LABEL_47;
  }
  if (*(_QWORD *)a5 == *(_QWORD *)(a5 + 8) || *(_BYTE *)(a5 + 24) != 0)
  {
    if (v30 < v34)
      goto LABEL_47;
    if (v30 > v34)
    {
      v36 = 2;
      goto LABEL_48;
    }
  }
LABEL_49:
  if (!*v80)
  {
    if ((*(_BYTE *)(a1 + 225) & 0x40) != 0 || !*v14)
      v37 = CFRetain(cf);
    else
      v37 = CFRetain(*v14);
    sub_20B87E150(v80, v37);
  }
  v38 = *(_QWORD **)a5;
  v39 = *(_QWORD **)(a5 + 8);
  if (*(_QWORD **)a5 == v39 || *(_BYTE *)(a5 + 24))
  {
    if (*v14)
    {
      v44 = CFStringGetLength((CFStringRef)*v14);
      v45 = *(_QWORD *)(a1 + 72);
      v46 = *(char **)(a1 + 64);
      if ((unint64_t)v46 >= v45)
      {
        v47 = (char *)*v79;
        v48 = v46 - (_BYTE *)*v79;
        if (v48 <= -3)
          sub_20B80CDD8();
        v49 = v48 >> 1;
        v50 = v45 - (_QWORD)v47;
        if (v50 <= (v48 >> 1) + 1)
          v51 = v49 + 1;
        else
          v51 = v50;
        if (v50 >= 0x7FFFFFFFFFFFFFFELL)
          v52 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v52 = v51;
        if (v52)
        {
          v53 = (char *)sub_20B80FD48(a1 + 72, v52);
          v47 = *(char **)(a1 + 56);
          v46 = *(char **)(a1 + 64);
        }
        else
        {
          v53 = 0;
        }
        v74 = &v53[2 * v49];
        v75 = &v53[2 * v52];
        *(_WORD *)v74 = v44;
        v62 = v74 + 2;
        while (v46 != v47)
        {
          v76 = *((_WORD *)v46 - 1);
          v46 -= 2;
          *((_WORD *)v74 - 1) = v76;
          v74 -= 2;
        }
LABEL_114:
        *(_QWORD *)(a1 + 56) = v74;
        *(_QWORD *)(a1 + 64) = v62;
        *(_QWORD *)(a1 + 72) = v75;
        if (v47)
          operator delete(v47);
        goto LABEL_116;
      }
    }
    else
    {
      v44 = CFStringGetLength((CFStringRef)*v80);
      v61 = *(_QWORD *)(a1 + 72);
      v46 = *(char **)(a1 + 64);
      if ((unint64_t)v46 >= v61)
      {
        v47 = (char *)*v79;
        v63 = v46 - (_BYTE *)*v79;
        if (v63 <= -3)
          sub_20B80CDD8();
        v64 = v63 >> 1;
        v65 = v61 - (_QWORD)v47;
        if (v65 <= (v63 >> 1) + 1)
          v66 = v64 + 1;
        else
          v66 = v65;
        if (v65 >= 0x7FFFFFFFFFFFFFFELL)
          v67 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v67 = v66;
        if (v67)
        {
          v68 = (char *)sub_20B80FD48(a1 + 72, v67);
          v47 = *(char **)(a1 + 56);
          v46 = *(char **)(a1 + 64);
        }
        else
        {
          v68 = 0;
        }
        v74 = &v68[2 * v64];
        v75 = &v68[2 * v67];
        *(_WORD *)v74 = v44;
        v62 = v74 + 2;
        while (v46 != v47)
        {
          v77 = *((_WORD *)v46 - 1);
          v46 -= 2;
          *((_WORD *)v74 - 1) = v77;
          v74 -= 2;
        }
        goto LABEL_114;
      }
    }
    *(_WORD *)v46 = v44;
    v62 = v46 + 2;
LABEL_116:
    *(_QWORD *)(a1 + 64) = v62;
    v81 = 0;
    sub_20B9C893C(v12, 1uLL, &v81);
    goto LABEL_117;
  }
  v40 = 0;
  do
  {
    v40 += (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v38 + 32))(*v38);
    ++v38;
  }
  while (v38 != v39);
  v41 = *(_QWORD *)(a1 + 72);
  v42 = *(char **)(a1 + 64);
  if ((unint64_t)v42 >= v41)
  {
    v54 = (char *)*v79;
    v55 = v42 - (_BYTE *)*v79;
    if (v55 <= -3)
      sub_20B80CDD8();
    v56 = v55 >> 1;
    v57 = v41 - (_QWORD)v54;
    if (v57 <= (v55 >> 1) + 1)
      v58 = v56 + 1;
    else
      v58 = v57;
    if (v57 >= 0x7FFFFFFFFFFFFFFELL)
      v59 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v59 = v58;
    if (v59)
    {
      v60 = (char *)sub_20B80FD48(a1 + 72, v59);
      v54 = *(char **)(a1 + 56);
      v42 = *(char **)(a1 + 64);
    }
    else
    {
      v60 = 0;
    }
    v69 = &v60[2 * v56];
    v70 = &v60[2 * v59];
    *(_WORD *)v69 = v40;
    v43 = v69 + 2;
    while (v42 != v54)
    {
      v71 = *((_WORD *)v42 - 1);
      v42 -= 2;
      *((_WORD *)v69 - 1) = v71;
      v69 -= 2;
    }
    *(_QWORD *)(a1 + 56) = v69;
    *(_QWORD *)(a1 + 64) = v43;
    *(_QWORD *)(a1 + 72) = v70;
    if (v54)
      operator delete(v54);
  }
  else
  {
    *(_WORD *)v42 = v40;
    v43 = v42 + 2;
  }
  *(_QWORD *)(a1 + 64) = v43;
  v72 = *(_QWORD **)a5;
  v73 = *(_QWORD **)(a5 + 8);
  while (1)
  {
    if (v72 == v73)
    {
      v82 = 1;
      sub_20B9C893C(v12, 1uLL, &v82);
      goto LABEL_117;
    }
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v72 + 56))(*v72) == 2)
      break;
    ++v72;
  }
  v83 = 2;
  sub_20B9C893C(v12, 1uLL, &v83);
LABEL_117:
  if (*(_WORD *)(*(_QWORD *)(a1 + 240) + 98))
    sub_20B9C8A5C(a1);
  return a1;
}

void sub_20B9C915C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, const void **a12)
{
  uint64_t v12;
  void **v13;
  const void **v14;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  sub_20B87E150(a12, 0);
  sub_20B87E150(v14, 0);
  sub_20B87E150((const void **)(v12 + 200), 0);
  v16 = *(void **)(v12 + 176);
  if (v16)
  {
    *(_QWORD *)(v12 + 184) = v16;
    operator delete(v16);
  }
  v17 = *v13;
  if (*v13)
  {
    *(_QWORD *)(v12 + 160) = v17;
    operator delete(v17);
  }
  v18 = *(void **)(v12 + 128);
  if (v18)
  {
    *(_QWORD *)(v12 + 136) = v18;
    operator delete(v18);
  }
  v19 = *(void **)(v12 + 104);
  if (v19)
  {
    *(_QWORD *)(v12 + 112) = v19;
    operator delete(v19);
  }
  v20 = *(void **)(v12 + 80);
  if (v20)
  {
    *(_QWORD *)(v12 + 88) = v20;
    operator delete(v20);
  }
  v21 = *a11;
  if (*a11)
  {
    *(_QWORD *)(v12 + 64) = v21;
    operator delete(v21);
  }
  v22 = *(void **)(v12 + 32);
  if (v22)
  {
    *(_QWORD *)(v12 + 40) = v22;
    operator delete(v22);
  }
  v23 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v12 + 16) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20B9C9254(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  *(_QWORD *)a1 = &off_24C4604F8;
  sub_20B87E150((const void **)(a1 + 216), 0);
  sub_20B87E150((const void **)(a1 + 208), 0);
  sub_20B87E150((const void **)(a1 + 200), 0);
  v2 = *(void **)(a1 + 176);
  if (v2)
  {
    *(_QWORD *)(a1 + 184) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 152);
  if (v3)
  {
    *(_QWORD *)(a1 + 160) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 128);
  if (v4)
  {
    *(_QWORD *)(a1 + 136) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 104);
  if (v5)
  {
    *(_QWORD *)(a1 + 112) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 80);
  if (v6)
  {
    *(_QWORD *)(a1 + 88) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 56);
  if (v7)
  {
    *(_QWORD *)(a1 + 64) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 32);
  if (v8)
  {
    *(_QWORD *)(a1 + 40) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(a1 + 8);
  if (v9)
  {
    *(_QWORD *)(a1 + 16) = v9;
    operator delete(v9);
  }
  return a1;
}

void sub_20B9C9324(uint64_t a1)
{
  sub_20B9C9254(a1);
  JUMPOUT(0x20BD39CB0);
}

const void *sub_20B9C9348(uint64_t a1)
{
  const void *result;
  const void **v3;
  uint64_t v4;
  uint64_t v5;
  __CFString *Mutable;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  const __CFString *v9;

  v3 = (const void **)(a1 + 200);
  result = *(const void **)(a1 + 200);
  if (!result)
  {
    if (*(_QWORD *)(a1 + 40) == *(_QWORD *)(a1 + 32))
      v4 = 8;
    else
      v4 = 32;
    if (*(_QWORD *)(a1 + 40) == *(_QWORD *)(a1 + 32))
      v5 = a1 + 8;
    else
      v5 = a1 + 32;
    Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0);
    v7 = *(unsigned __int16 **)(a1 + v4);
    v8 = *(unsigned __int16 **)(v5 + 8);
    while (v7 != v8)
    {
      v9 = (const __CFString *)sub_20B9E08C0(*v7, *(_DWORD *)(a1 + 232));
      if (v9)
        CFStringAppend(Mutable, v9);
      ++v7;
    }
    sub_20B87E150(v3, Mutable);
    return *v3;
  }
  return result;
}

const void *sub_20B9C9400(uint64_t a1)
{
  const void *result;
  const void **v3;
  const void *v4;
  __CFString *Mutable;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const __CFString *v14;
  const __CFString *v15;
  unint64_t v16;
  const __CFString *v17;
  int v18;
  const __CFAllocator *alloc;
  CFRange v20;

  v3 = (const void **)(a1 + 216);
  result = *(const void **)(a1 + 216);
  if (!result)
  {
    if ((*(_BYTE *)(a1 + 225) & 0x40) == 0)
    {
      v4 = *(const void **)(a1 + 208);
      if (!v4)
      {
        Mutable = 0;
LABEL_24:
        sub_20B87E150(v3, Mutable);
        return *v3;
      }
LABEL_23:
      Mutable = (__CFString *)CFRetain(v4);
      goto LABEL_24;
    }
    v6 = *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8);
    if (!v6)
    {
      v4 = *(const void **)(a1 + 200);
      goto LABEL_23;
    }
    v7 = v6 >> 1;
    alloc = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0);
    v8 = *(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56);
    if (v7 >= v8 >> 1)
      v9 = v8 >> 1;
    else
      v9 = v7;
    if (!v9)
      goto LABEL_24;
    v10 = 0;
    while (1)
    {
      v11 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 128) + 2 * v10);
      v12 = 80;
      if (*(_QWORD *)(a1 + 88) == *(_QWORD *)(a1 + 80))
        v12 = 56;
      v13 = *(unsigned __int16 *)(*(_QWORD *)(a1 + v12) + 2 * v10);
      v14 = (const __CFString *)sub_20B9E08C0(*(unsigned __int16 *)(*(_QWORD *)(a1 + 8) + 2 * v10), *(_DWORD *)(a1 + 232));
      v15 = v14;
      if (v14 && (v16 = v13 - v11, v16 < CFStringGetLength(v14)))
      {
        v20.location = 0;
        v20.length = v16;
        v17 = CFStringCreateWithSubstring(alloc, v15, v20);
        CFStringAppend(Mutable, v17);
        CFRelease(v17);
        if ((_DWORD)v11)
          goto LABEL_18;
      }
      else
      {
        CFStringAppend(Mutable, v15);
        if ((_DWORD)v11)
        {
LABEL_18:
          v18 = 0;
          do
          {
            CFStringAppend(Mutable, CFSTR("'"));
            ++v18;
          }
          while (v11 > v18);
        }
      }
      if (++v10 == v9)
        goto LABEL_24;
    }
  }
  return result;
}

void **sub_20B9C9594(uint64_t a1)
{
  void **v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  const __CFString *v9;
  __int16 Length;
  unint64_t v11;
  char *v12;
  _WORD *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  __int16 v22;

  v1 = (void **)(a1 + 104);
  if (*(_QWORD *)(a1 + 112) == *(_QWORD *)(a1 + 104))
  {
    if (*(_QWORD *)(a1 + 40) == *(_QWORD *)(a1 + 32))
      v3 = 8;
    else
      v3 = 32;
    if (*(_QWORD *)(a1 + 40) == *(_QWORD *)(a1 + 32))
      v4 = a1 + 8;
    else
      v4 = a1 + 32;
    v5 = *(_QWORD *)(v4 + 8) - *(_QWORD *)(a1 + v3);
    if (v5)
    {
      v6 = 0;
      v7 = v5 >> 1;
      if (v7 <= 1)
        v8 = 1;
      else
        v8 = v7;
      do
      {
        v9 = (const __CFString *)sub_20B9E08C0(*(unsigned __int16 *)(*(_QWORD *)(a1 + v3) + 2 * v6), *(_DWORD *)(a1 + 232));
        if (v9)
          Length = CFStringGetLength(v9);
        else
          Length = 0;
        v12 = *(char **)(a1 + 112);
        v11 = *(_QWORD *)(a1 + 120);
        if ((unint64_t)v12 >= v11)
        {
          v14 = (char *)*v1;
          v15 = v12 - (_BYTE *)*v1;
          if (v15 <= -3)
            sub_20B80CDD8();
          v16 = v15 >> 1;
          v17 = v11 - (_QWORD)v14;
          if (v17 <= (v15 >> 1) + 1)
            v18 = v16 + 1;
          else
            v18 = v17;
          if (v17 >= 0x7FFFFFFFFFFFFFFELL)
            v19 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v19 = v18;
          if (v19)
          {
            v20 = (char *)sub_20B80FD48(a1 + 120, v19);
            v14 = *(char **)(a1 + 104);
            v12 = *(char **)(a1 + 112);
          }
          else
          {
            v20 = 0;
          }
          v21 = &v20[2 * v16];
          *(_WORD *)v21 = Length;
          v13 = v21 + 2;
          while (v12 != v14)
          {
            v22 = *((_WORD *)v12 - 1);
            v12 -= 2;
            *((_WORD *)v21 - 1) = v22;
            v21 -= 2;
          }
          *(_QWORD *)(a1 + 104) = v21;
          *(_QWORD *)(a1 + 112) = v13;
          *(_QWORD *)(a1 + 120) = &v20[2 * v19];
          if (v14)
            operator delete(v14);
        }
        else
        {
          *(_WORD *)v12 = Length;
          v13 = v12 + 2;
        }
        *(_QWORD *)(a1 + 112) = v13;
        ++v6;
      }
      while (v6 != v8);
    }
    else
    {
      return (void **)(a1 + 56);
    }
  }
  return v1;
}

uint64_t sub_20B9C970C(uint64_t a1, const __CFString *a2, CFStringRef theString, const __CFString *a4, int a5, double a6)
{
  __int16 Length;
  _WORD *v12;
  _QWORD v14[3];
  int v15;

  v15 = a5;
  Length = CFStringGetLength(theString);
  v12 = operator new(2uLL);
  *v12 = Length;
  v14[1] = v12 + 1;
  v14[2] = v12 + 1;
  v14[0] = v12;
  *(_WORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_24C460098;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 24) = &unk_24C460190;
  sub_20BA07F40((_QWORD *)(a1 + 32), a2, theString, a4, &v15, (uint64_t)v14);
  *(double *)(a1 + 104) = a6;
  *(_DWORD *)(a1 + 112) = 544;
  operator delete(v12);
  return a1;
}

void sub_20B9C97D0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B9C97E4(_QWORD *a1)
{
  *a1 = off_24C460098;
  a1[3] = &unk_24C460190;
  sub_20B9C9A14((uint64_t)(a1 + 4));
  return a1;
}

void sub_20B9C9820(_QWORD *a1)
{
  *a1 = off_24C460098;
  a1[3] = &unk_24C460190;
  sub_20B9C9A14((uint64_t)(a1 + 4));
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B9C986C(uint64_t a1, uint64_t a2)
{
  if (a2)
    return 0;
  else
    return a1 + 32;
}

const __CFString *sub_20B9C987C(uint64_t a1, uint64_t a2)
{
  const __CFString *result;

  if (a2)
  {
    LOWORD(result) = 0;
  }
  else
  {
    result = *(const __CFString **)(a1 + 88);
    if (result)
      LOWORD(result) = CFStringGetLength(result);
  }
  return (const __CFString *)(unsigned __int16)result;
}

uint64_t sub_20B9C98A8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
}

uint64_t sub_20B9C98B4()
{
  return 0;
}

uint64_t sub_20B9C98BC()
{
  return 1;
}

uint64_t sub_20B9C98C4()
{
  return 2;
}

uint64_t sub_20B9C98CC()
{
  return 0;
}

uint64_t sub_20B9C98D4()
{
  return 0;
}

uint64_t sub_20B9C98DC(uint64_t a1)
{
  return (int)((*(double (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1) * 1000.0);
}

uint64_t sub_20B9C9908()
{
  return 0;
}

uint64_t sub_20B9C9910(uint64_t a1)
{
  const __CFString *v1;

  v1 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  return sub_20B8D345C(v1);
}

uint64_t sub_20B9C992C()
{
  return 0;
}

uint64_t sub_20B9C9934(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_WORD *)(v2 + 16) = 0;
  *(_QWORD *)v2 = off_24C460098;
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 24) = &unk_24C460190;
  sub_20BA08078(v2 + 32, a1 + 8);
  *(_QWORD *)(v2 + 104) = *(_QWORD *)(a1 + 80);
  *(_DWORD *)(v2 + 112) = *(_DWORD *)(a1 + 88);
  return v2;
}

void sub_20B9C99A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10E1C40347CB710);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9C99C8(_QWORD *a1)
{
  return sub_20B9C9934((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
}

uint64_t sub_20B9C99D8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 88);
}

uint64_t sub_20B9C99E0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 112);
}

double sub_20B9C99E8(uint64_t a1)
{
  return *(double *)(a1 + 104);
}

uint64_t sub_20B9C99F0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
}

uint64_t sub_20B9C99FC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 80);
}

uint64_t sub_20B9C9A04(uint64_t a1)
{
  return *(_QWORD *)(a1 + 80);
}

uint64_t sub_20B9C9A0C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 96);
}

uint64_t sub_20B9C9A14(uint64_t a1)
{
  const void **v2;

  *(_QWORD *)a1 = &off_24C45FA58;
  v2 = (const void **)(a1 + 48);
  sub_20B87E150((const void **)(a1 + 64), 0);
  sub_20B87E150((const void **)(a1 + 56), 0);
  sub_20B87E150(v2, 0);
  return a1;
}

uint64_t sub_20B9C9A6C(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  os_signpost_id_t v5;
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  CFMutableArrayRef Mutable;
  const __CFURL *v11;
  uint64_t v12;
  const void *v13;
  _QWORD *v14;
  uint64_t v15;
  const void *v16;
  const void **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  const void *v28;
  uint64_t v29;
  NSObject *v30;
  NSObject *v31;
  __int128 v33;
  uint8_t v34[8];
  uint64_t v35;
  uint8_t buf[16];

  v4 = sub_20B9A7C5C(0xDu);
  v5 = os_signpost_id_make_with_pointer(v4, (const void *)a1);
  v6 = sub_20B9A7C5C(0xDu);
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v7 = v6;
    if (os_signpost_enabled(v6))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_20B7F7000, v7, OS_SIGNPOST_INTERVAL_BEGIN, v5, "MecabraKoreanInit", "KoreanEngine engine init", buf, 2u);
    }
  }
  v8 = operator new();
  *(_DWORD *)(v8 + 48) = 0;
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_QWORD *)(v8 + 56) = a2;
  *(_QWORD *)(v8 + 64) = 0;
  v9 = operator new();
  *(_OWORD *)(v9 + 32) = 0u;
  *(_OWORD *)(v9 + 48) = 0u;
  *(_OWORD *)v9 = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  *(_QWORD *)v9 = off_24C461CC8;
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  *(_QWORD *)(v9 + 16) = -1;
  *(_OWORD *)(v9 + 24) = 0u;
  *(_OWORD *)(v9 + 40) = 0u;
  *(_DWORD *)(v9 + 56) = 1065353216;
  *(_QWORD *)v9 = &unk_24C462908;
  *(_QWORD *)(v9 + 8) = Mutable;
  *(_QWORD *)(v8 + 72) = v9;
  sub_20B9CA214((_QWORD *)(v8 + 80), *(const __CFURL **)(a1 + 16), 0);
  sub_20B9CA214((_QWORD *)(v8 + 88), *(const __CFURL **)(a1 + 16), 1);
  sub_20B9F4098(*(const __CFURL **)(a1 + 16), CFSTR("ko.rnnlm"), CFSTR("ko"), (uint64_t *)(v8 + 96));
  v11 = *(const __CFURL **)(a1 + 24);
  v12 = operator new();
  sub_20BA140A0(v12, v11);
  *(_QWORD *)(v8 + 104) = v12;
  v13 = *(const void **)(a1 + 24);
  v14 = (_QWORD *)operator new();
  sub_20B9718AC(v14, v13, 1);
  *v14 = &unk_24C4677D0;
  v14[16] = v12;
  *(_QWORD *)(v8 + 112) = v14;
  v15 = operator new();
  sub_20BA223A0(v15, CFSTR("ko_KR"));
  *(_QWORD *)(v8 + 120) = v15;
  v16 = *(const void **)(a1 + 64);
  v17 = (const void **)operator new();
  sub_20B951E9C(v17, CFSTR("ko_KR"), 1300, v16);
  *(_QWORD *)(v8 + 128) = v17;
  sub_20B9F4778(*(const __CFURL **)(a1 + 16), CFSTR("customized_lexicon.dat"), CFSTR("ko"), (uint64_t *)(v8 + 136));
  sub_20B9F4778(*(const __CFURL **)(a1 + 16), CFSTR("blocklistV2.dat"), CFSTR("ko"), (uint64_t *)(v8 + 144));
  v33 = *(_OWORD *)(v8 + 80);
  v18 = *(_QWORD *)(v8 + 120);
  v19 = *(_QWORD *)(v8 + 96);
  v20 = operator new();
  *(_QWORD *)v20 = &unk_24C4617D8;
  *(_QWORD *)(v20 + 8) = v18;
  v21 = (_QWORD *)operator new();
  *v21 = &unk_24C460BC0;
  v21[1] = v19;
  *(_QWORD *)(v20 + 16) = v21;
  *(_QWORD *)(v20 + 24) = 0;
  *(_QWORD *)v20 = &unk_24C4678F0;
  *(_OWORD *)(v20 + 32) = v33;
  *(_QWORD *)(v8 + 152) = v20;
  v22 = *(_QWORD *)(v8 + 96);
  v23 = *(_QWORD *)(v8 + 120);
  v24 = (_QWORD *)operator new();
  *v24 = &unk_24C460230;
  v24[1] = v8 + 48;
  v24[2] = v22;
  v25 = (_QWORD *)operator new();
  v26 = v24[2];
  *v25 = &unk_24C461F30;
  v25[1] = v8 + 48;
  v25[2] = v26;
  v24[3] = v25;
  v24[4] = v23;
  v24[5] = 0;
  *v24 = &unk_24C467968;
  *(_QWORD *)(v8 + 168) = 0;
  *(_QWORD *)(v8 + 160) = v24;
  *(_QWORD *)(v8 + 176) = 0;
  *(_QWORD *)(v8 + 184) = 0;
  v27 = operator new();
  sub_20B919DB8(v27, 0, CFSTR("ko_KR"));
  *(_QWORD *)(v8 + 192) = v27;
  v28 = *(const void **)(a1 + 64);
  v29 = operator new();
  sub_20B919DB8(v29, 0, v28);
  *(_QWORD *)(v8 + 200) = v29;
  *(_WORD *)(v8 + 208) = 1;
  v35 = v8;
  v30 = sub_20B9A7C5C(0xDu);
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v31 = v30;
    if (os_signpost_enabled(v30))
    {
      *(_WORD *)v34 = 0;
      _os_signpost_emit_with_name_impl(&dword_20B7F7000, v31, OS_SIGNPOST_INTERVAL_END, v5, "MecabraKoreanInit", (const char *)&unk_20BA9505F, v34, 2u);
    }
  }
  return v8;
}

void sub_20B9C9F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20B8E699C((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void sub_20B9CA124()
{
  JUMPOUT(0x20B9CA054);
}

void sub_20B9CA12C()
{
  JUMPOUT(0x20B9CA060);
}

void sub_20B9CA134()
{
  uint64_t v0;

  MEMORY[0x20BD39CB0](v0, 0x60C4044C4A2DFLL);
  JUMPOUT(0x20B9CA06CLL);
}

void sub_20B9CA154()
{
  JUMPOUT(0x20B9CA06CLL);
}

void sub_20B9CA15C()
{
  uint64_t v0;

  MEMORY[0x20BD39CB0](v0, 0x60C4045F868BCLL);
  JUMPOUT(0x20B9CA078);
}

void sub_20B9CA17C()
{
  JUMPOUT(0x20B9CA078);
}

void sub_20B9CA184()
{
  uint64_t v0;

  MEMORY[0x20BD39CB0](v0, 0x10E1C4017B55C18);
  JUMPOUT(0x20B9CA090);
}

void sub_20B9CA1A4()
{
  JUMPOUT(0x20B9CA090);
}

void sub_20B9CA1AC()
{
  uint64_t v0;

  MEMORY[0x20BD39CB0](v0, 0x60C4082687C62);
  JUMPOUT(0x20B9CA09CLL);
}

void sub_20B9CA1CC()
{
  JUMPOUT(0x20B9CA09CLL);
}

void sub_20B9CA1D4()
{
  JUMPOUT(0x20B9CA0B8);
}

void sub_20B9CA1DC()
{
  JUMPOUT(0x20B9CA0C4);
}

void sub_20B9CA1E4()
{
  JUMPOUT(0x20B9CA0D0);
}

void sub_20B9CA1EC()
{
  uint64_t v0;

  MEMORY[0x20BD39CB0](v0, 0x10A1C4010E18BA4);
  JUMPOUT(0x20B9CA0E8);
}

void sub_20B9CA20C()
{
  JUMPOUT(0x20B9CA0E8);
}

void sub_20B9CA214(_QWORD *a1, const __CFURL *a2, int a3)
{
  const __CFString *v5;
  CFTypeRef cf;

  if (a3)
    v5 = CFSTR("hangul_trie_tenkey.dat");
  else
    v5 = CFSTR("hangul_trie_full.dat");
  sub_20B9F3EF0(CFSTR("ko"), a2, v5, 0, &cf);
  if (cf)
  {
    sub_20B9DC01C((const __CFURL *)cf, a1);
    if (cf)
      CFRelease(cf);
  }
  else
  {
    *a1 = 0;
  }
}

void sub_20B9CA294(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B876164((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9CA2AC(uint64_t a1, const __CFString *a2, uint64_t a3, uint64_t a4, const void *a5)
{
  uint64_t v6;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  os_signpost_id_t v12;
  NSObject *v13;
  CFIndex Length;
  CFArrayRef *v15;
  uint8_t *v17;
  uint64_t v18;
  uint64_t *v19;
  NSObject *v20;
  os_signpost_id_t v21;
  NSObject *v22;
  const void **v23;
  os_signpost_id_t ptr;
  uint8_t v25[8];
  BOOL (*v26)(_QWORD *, _QWORD *);
  uint8_t *v27;
  _BYTE buf[24];
  __int128 v29;
  int v30;
  _QWORD v31[4];

  v31[3] = *MEMORY[0x24BDAC8D0];
  if (!a2)
    return 0;
  v6 = *(_QWORD *)(a1 + 152);
  if (!*(_QWORD *)(v6 + 32) || !*(_QWORD *)(v6 + 40))
    return 0;
  v9 = sub_20B9A7C5C(3u);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = a2;
    _os_log_debug_impl(&dword_20B7F7000, v9, OS_LOG_TYPE_DEBUG, "[KoreanEngine::analyzeString] analysisStr: [%@]", buf, 0xCu);
  }
  ptr = 0;
  v10 = sub_20B9A7C5C(0xDu);
  ptr = os_signpost_id_make_with_pointer(v10, &ptr);
  v11 = sub_20B9A7C5C(0xDu);
  v12 = ptr;
  if (ptr - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v13 = v11;
    if (os_signpost_enabled(v11))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_20B7F7000, v13, OS_SIGNPOST_INTERVAL_BEGIN, v12, "MecabraAnalyzeStringWithContext", (const char *)&unk_20BA9505F, buf, 2u);
    }
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 112) + 32))(*(_QWORD *)(a1 + 112));
  sub_20B9727D8(*(_QWORD *)(a1 + 112), 1);
  if (a5 && (Length = CFStringGetLength(a2), Length <= CFArrayGetCount((CFArrayRef)a5)))
  {
    v15 = (CFArrayRef *)operator new();
    sub_20B95169C((uint64_t)v15, a5, a2);
  }
  else
  {
    v15 = 0;
  }
  *(_QWORD *)buf = &unk_24C460D28;
  *(_OWORD *)&buf[8] = 0u;
  v29 = 0u;
  v30 = 1065353216;
  memset(v31, 0, 24);
  sub_20B9CA658(a1, buf, a2, v15, 0);
  *(_QWORD *)v25 = &unk_24C469588;
  v26 = sub_20B8FF4E0;
  v27 = v25;
  sub_20B8FDD20(buf, (uint64_t)v25);
  v17 = v27;
  if (v27 == v25)
  {
    v18 = 4;
    v17 = v25;
  }
  else
  {
    if (!v27)
      goto LABEL_19;
    v18 = 5;
  }
  (*(void (**)(uint8_t *))(*(_QWORD *)v17 + 8 * v18))(v17);
LABEL_19:
  v19 = sub_20B947CC4();
  sub_20B9CA930(a1, buf, (char *)*v19, v19[1]);
  v20 = sub_20B9A7C5C(0xDu);
  v21 = ptr;
  if (ptr - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v22 = v20;
    if (os_signpost_enabled(v20))
    {
      *(_WORD *)v25 = 0;
      _os_signpost_emit_with_name_impl(&dword_20B7F7000, v22, OS_SIGNPOST_INTERVAL_END, v21, "MecabraAnalyzeStringWithContext", (const char *)&unk_20BA9505F, v25, 2u);
    }
  }
  sub_20B9CAEE4(a1, (uint64_t)buf);
  *(_QWORD *)buf = &unk_24C460D28;
  *(_QWORD *)v25 = v31;
  sub_20B882410((void ***)v25);
  sub_20B84055C((uint64_t)&buf[8]);
  if (v15)
  {
    v23 = sub_20B951828((const void **)v15);
    MEMORY[0x20BD39CB0](v23, 0x60C40AA6EF139);
  }
  return 1;
}

void sub_20B9CA5CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void **a9)
{
  uint64_t v9;

  MEMORY[0x20BD39CB0](v9, 0x60C40AA6EF139);
  sub_20B931EA8(&a9, 0);
  _Unwind_Resume(a1);
}

void sub_20B9CA658(uint64_t a1, _QWORD *a2, const __CFString *a3, CFArrayRef *a4, int a5)
{
  UniChar *v9;
  UniChar *v10;
  BOOL v11;
  int v12;
  int v13;
  unsigned __int16 *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  UniChar *v18;
  UniChar *v19;
  uint64_t *v20;
  uint64_t v21;
  void **v22;
  __int128 v23;
  uint64_t v24[2];
  __int128 v25;
  void **v26;
  uint64_t v27;
  uint64_t v28;
  void **v29;
  void ***v30;
  CFTypeRef cf;
  CFTypeRef v32;
  void **v33[16];
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  unsigned __int8 v38;
  unsigned __int16 *v39;
  uint64_t v40;
  unsigned __int8 v41;
  UniChar *v42;
  UniChar *v43;

  sub_20B8D0790(a3, &v42);
  if ((a5 & 1) != 0)
  {
    v9 = v42;
    v10 = v43;
    if (*(_BYTE *)(a1 + 209))
      v11 = v42 == v43;
    else
      v11 = 1;
    if (!v11)
    {
      v12 = sub_20B9DF3E8(*v42);
      if (v12)
        *v9 = v12;
    }
  }
  else
  {
    v9 = v42;
    v10 = v43;
  }
  v13 = (*(_DWORD *)(a1 + 48) >> 14) & 1;
  sub_20B88CEDC(*(_QWORD *)(a1 + 152), v9, v10 - v9, v13, (uint64_t)&v39);
  if ((v41 & 0x80u) == 0)
    v14 = (unsigned __int16 *)&v39;
  else
    v14 = v39;
  if ((v41 & 0x80u) == 0)
    v15 = v41;
  else
    v15 = v40;
  sub_20B9DEF34(v14, v15, &v36);
  if ((v38 & 0x80u) == 0)
    v16 = v38;
  else
    v16 = v37;
  sub_20BA1EED0((uint64_t)v42, v43 - v42, a4, a5, (uint64_t *)&v34);
  sub_20B88D10C(*(_QWORD *)(a1 + 152), v42, v43 - v42, (uint64_t)&v34, v13, 1, (uint64_t)v33);
  sub_20BA1F898((uint64_t)v42, v43 - v42, a4, a5, &v32);
  v17 = v16;
  v18 = v42;
  v19 = v43;
  v20 = sub_20B947CC4();
  v21 = v41;
  v22 = (void **)&v39;
  if ((v41 & 0x80u) != 0)
  {
    v22 = (void **)v39;
    v21 = v40;
  }
  v23 = *(_OWORD *)v20;
  v24[0] = (uint64_t)v18;
  v24[1] = v19 - v18;
  v25 = v23;
  v26 = v22;
  v27 = v21;
  v28 = v17;
  v29 = &v34;
  v30 = v33;
  cf = 0;
  sub_20B9CF764(&cf, v32);
  sub_20B9CC588(a1, a2, v24, a5);
  if (cf)
    CFRelease(cf);
  if (v32)
    CFRelease(v32);
  sub_20B9D98E4((uint64_t)v33);
  v34 = &unk_24C499568;
  v33[0] = (void **)&v35;
  sub_20B88DF54(v33);
  if ((char)v38 < 0)
    operator delete(v36);
  if ((char)v41 < 0)
    operator delete(v39);
  if (v42)
  {
    v43 = v42;
    operator delete(v42);
  }
}

void sub_20B9CA888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, const void *a19, void **a20)
{
  const void **v20;
  uint64_t v21;
  void *v23;

  sub_20B930A90(v20, 0);
  sub_20B930A90(&a19, 0);
  sub_20B9D98E4((uint64_t)&a20);
  *(_QWORD *)(v21 - 168) = &unk_24C499568;
  a20 = (void **)(v21 - 160);
  sub_20B88DF54(&a20);
  if (*(char *)(v21 - 113) < 0)
    operator delete(*(void **)(v21 - 136));
  if (*(char *)(v21 - 89) < 0)
    operator delete(*(void **)(v21 - 112));
  v23 = *(void **)(v21 - 88);
  if (v23)
  {
    *(_QWORD *)(v21 - 80) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20B9CA930(uint64_t a1, _QWORD *a2, char *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  unsigned __int16 *v17;
  uint64_t v18;
  uint64_t result;
  char v20;
  int v21;
  void *v22;
  unint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  int v27;
  unsigned __int16 *v28;
  uint64_t v29;
  int v30;
  unsigned __int16 *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  int v36;
  BOOL v37;
  unint64_t v38;
  unint64_t v39;
  _BOOL4 v41;
  _BOOL4 v42;
  uint64_t v43;
  int v44;
  int v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v50;
  unint64_t v51;
  unsigned __int16 *v52;
  unsigned __int16 *p_p;
  uint64_t v54;
  _WORD *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  const void *v69;
  int v70;
  uint64_t v71;
  void *__p;
  unint64_t v73;
  unsigned __int8 v74;
  void *v75;
  unint64_t v76;
  unsigned __int8 v77;
  uint64_t v78;

  v8 = sub_20B8FDA18((uint64_t)a2, 81);
  if ((unint64_t)(v8 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v9 = *(_QWORD *)(a2[6] + 8 * v8);
    v10 = *(unsigned __int8 *)(v9 + 55);
    v11 = *(_QWORD *)(v9 + 40);
    if ((v10 & 0x80u) == 0)
      v11 = v10;
    if (v11 == 1)
    {
      sub_20B8FEA7C(a2, v8, &v75);
      sub_20B8FDEF4((uint64_t)a2, (uint64_t *)&v75, 0);
      v12 = v75;
      v75 = 0;
      if (v12)
        (*(void (**)(void *))(*(_QWORD *)v12 + 16))(v12);
    }
  }
  v13 = sub_20B8FDA18((uint64_t)a2, 83);
  v14 = (uint64_t *)a2[6];
  if (v14 == (uint64_t *)a2[7])
    v15 = 0;
  else
    v15 = *v14;
  v16 = *(char *)(v15 + 55);
  if (v16 >= 0)
    v17 = (unsigned __int16 *)(v15 + 32);
  else
    v17 = *(unsigned __int16 **)(v15 + 32);
  if (v16 >= 0)
    v18 = *(unsigned __int8 *)(v15 + 55);
  else
    v18 = *(_QWORD *)(v15 + 40);
  result = sub_20B9DFB60((uint64_t)a3, a4, v17, v18);
  if (v13 != -1)
  {
    v20 = result;
    if (!v13)
    {
      if ((result & 1) == 0)
        return result;
      sub_20B8FEA7C(a2, 0, &v78);
LABEL_21:
      v21 = *(char *)(v15 + 55);
      if (v21 >= 0)
        v22 = (void *)(v15 + 32);
      else
        v22 = *(void **)(v15 + 32);
      if (v21 >= 0)
        v23 = *(unsigned __int8 *)(v15 + 55);
      else
        v23 = *(_QWORD *)(v15 + 40);
      sub_20B88C9DC(a3, a4, v22, v23, 1, 71, 4, 0, (uint64_t *)&v75, 0.0);
      v24 = v75;
      v75 = 0;
      __p = v24;
      sub_20B8FDEF4((uint64_t)a2, (uint64_t *)&__p, 0);
      v25 = __p;
      __p = 0;
      if (v25)
        (*(void (**)(void *))(*(_QWORD *)v25 + 16))(v25);
      v26 = v75;
      v75 = 0;
      if (v26)
      {
        (*(void (**)(void *))(*(_QWORD *)v26 + 16))(v26);
        if (!a4)
          goto LABEL_127;
        goto LABEL_100;
      }
      goto LABEL_99;
    }
    sub_20B8FEA7C(a2, v13, &v78);
    if ((v20 & 1) != 0)
      goto LABEL_21;
    v27 = *(char *)(v15 + 55);
    if (v27 >= 0)
      v28 = (unsigned __int16 *)(v15 + 32);
    else
      v28 = *(unsigned __int16 **)(v15 + 32);
    if (v27 >= 0)
      v29 = *(unsigned __int8 *)(v15 + 55);
    else
      v29 = *(_QWORD *)(v15 + 40);
    sub_20B9DEF34(v28, v29, &v75);
    v30 = *(char *)(v78 + 55);
    if (v30 >= 0)
      v31 = (unsigned __int16 *)(v78 + 32);
    else
      v31 = *(unsigned __int16 **)(v78 + 32);
    if (v30 >= 0)
      v32 = *(unsigned __int8 *)(v78 + 55);
    else
      v32 = *(_QWORD *)(v78 + 40);
    v33 = (uint64_t)v31;
    if (v32 == 1)
    {
      v34 = 0;
      while (*(unsigned __int16 *)&a114171g1k1n111[v34] != *v31)
      {
        v34 += 2;
        if (v34 == 18)
        {
          v35 = 0;
          goto LABEL_51;
        }
      }
      v35 = &a114171g1k1n111[v34];
LABEL_51:
      if (v35)
      else
        v37 = 1;
      v36 = !v37;
    }
    else
    {
      v36 = 0;
    }
    sub_20B9DEF34(v31, v32, &__p);
    v70 = v36;
    v38 = v77;
    if ((v77 & 0x80u) != 0)
      v38 = v76;
    v39 = v74;
    if ((v74 & 0x80u) != 0)
      v39 = v73;
    v41 = v32 == 1 && v38 > v39;
    if (v32 >= 2)
    {
      v43 = 2 * v32 - 2;
      v44 = *(unsigned __int16 *)((char *)v31 + v43);
      do
      {
        v45 = *v31++;
        v42 = v44 == v45;
        v46 = v44 != v45 || v43 == 0;
        v43 -= 2;
      }
      while (!v46);
    }
    else
    {
      v42 = 0;
    }
    sub_20B9DEB60(v33, v32);
    v48 = v47;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 96))(v15) == 73 && v32 - v48 == 1)
    {
      v50 = v77;
      if ((v77 & 0x80u) != 0)
        v50 = v76;
      v51 = v74;
      if ((v74 & 0x80u) != 0)
        v51 = v73;
      if (v50 != v51)
        goto LABEL_95;
      if (v50)
      {
        v52 = (unsigned __int16 *)&v75;
        if ((v77 & 0x80u) != 0)
          v52 = (unsigned __int16 *)v75;
        p_p = (unsigned __int16 *)&__p;
        if ((v74 & 0x80u) != 0)
          p_p = (unsigned __int16 *)__p;
        while (*p_p == *v52)
        {
          ++v52;
          ++p_p;
          if (!--v50)
            goto LABEL_79;
        }
        goto LABEL_95;
      }
    }
LABEL_79:
    if (((v70 | v41 | v42) & 1) == 0 && *(_QWORD *)(a1 + 96))
    {
LABEL_96:
      if ((char)v74 < 0)
        operator delete(__p);
      if ((char)v77 < 0)
      {
        operator delete(v75);
        if (!a4)
        {
LABEL_127:
          result = v78;
          v78 = 0;
          if (result)
            return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
          return result;
        }
LABEL_100:
        v54 = a2[6];
        v55 = *(_WORD **)(*(_QWORD *)v54 + 32);
        v56 = *(char *)(*(_QWORD *)v54 + 55);
        if (v56 >= 0)
          v55 = (_WORD *)(*(_QWORD *)v54 + 32);
        v57 = *(_QWORD *)(*(_QWORD *)v54 + 40);
        if (v56 >= 0)
          v57 = *(unsigned __int8 *)(*(_QWORD *)v54 + 55);
        if (v57)
        {
          v58 = 2 * v57;
          while ((unsigned __int16)(*v55 + 10332) <= 0xD45Bu && (unsigned __int16)(*v55 - 12644) < 0xFFCDu)
          {
            ++v55;
            v58 -= 2;
            if (!v58)
              goto LABEL_109;
          }
        }
        else
        {
LABEL_109:
          v59 = a2[7] - v54;
          if ((unint64_t)v59 >= 9)
          {
            v60 = v59 >> 3;
            if (v60 <= 2)
              v61 = 2;
            else
              v61 = v60;
            v62 = 1;
            while (1)
            {
              v63 = *(_QWORD *)(v54 + 8 * v62);
              v64 = *(unsigned __int8 *)(v63 + 55);
              v65 = (char)v64;
              if ((v64 & 0x80u) != 0)
                v64 = *(_QWORD *)(v63 + 40);
              if (v64 == a4)
              {
                v68 = *(_QWORD *)(v63 + 32);
                v66 = v63 + 32;
                v67 = v68;
                v69 = (const void *)(v65 >= 0 ? v66 : v67);
                if (!memcmp(v69, a3, 2 * a4))
                  break;
              }
              if (v61 == ++v62)
                goto LABEL_127;
            }
            sub_20B8FEA7C(a2, v62, &v71);
            if (v71)
              (*(void (**)(uint64_t))(*(_QWORD *)v71 + 16))(v71);
          }
        }
        goto LABEL_127;
      }
LABEL_99:
      if (!a4)
        goto LABEL_127;
      goto LABEL_100;
    }
LABEL_95:
    sub_20B8FDEF4((uint64_t)a2, &v78, 0);
    goto LABEL_96;
  }
  return result;
}

void sub_20B9CAE38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24)
{
  if (a24)
    (*(void (**)(uint64_t))(*(_QWORD *)a24 + 16))(a24);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B9CAEE4(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 56))(*(_QWORD *)(a1 + 72));
  v4 = *(uint64_t **)(a2 + 48);
  v5 = *(uint64_t **)(a2 + 56);
  if (v4 != v5)
  {
    v6 = 1;
    do
    {
      v7 = *v4;
      *(_QWORD *)(*v4 + 8) = v6;
      if (v6 <= 9)
      {
        (*(void (**)(uint64_t, uint64_t, const char *, uint64_t))(*(_QWORD *)v7 + 528))(v7, 12, "Autocorrected", 1);
        v7 = *v4;
      }
      *v4++ = 0;
      v8 = (void *)sub_20B8E1754(v7);
      (*(void (**)(_QWORD, void *))(**(_QWORD **)(a1 + 72) + 16))(*(_QWORD *)(a1 + 72), v8);

      ++v6;
    }
    while (v4 != v5);
  }
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 64))(*(_QWORD *)(a1 + 72));
}

uint64_t sub_20B9CAFA4(uint64_t a1, const __CFString *a2, int a3, uint64_t a4)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;

  if (!a2)
    return 0;
  v5 = *(_QWORD *)(a1 + 152);
  if (!*(_QWORD *)(v5 + 32) || !*(_QWORD *)(v5 + 40))
    return 0;
  v6 = (_QWORD *)a4;
  sub_20B9CB048(a1, a4, a3, 0);
  if (v6)
  {
    sub_20B96AE80((uint64_t)v6);
    v6 = (_QWORD *)v6[6];
  }
  if (CFStringGetLength(a2) >= 1)
    return sub_20B9CA2AC(a1, a2, v8, v9, v6);
  sub_20B9CB170(a1);
  return 1;
}

uint64_t sub_20B9CB048(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  if (a2)
  {
    v8 = operator new();
    sub_20B96A820(v8, a2);
    v9 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 64) = v8;
    if (v9)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      v8 = *(_QWORD *)(a1 + 64);
    }
    sub_20B8B362C(a1, v8);
    v10 = *(_QWORD *)(a1 + 112);
    v11 = sub_20B88826C(a2, kMecabraContextOptionPrivateMode) != (const void *)*MEMORY[0x24BDBD270];
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 64) = 0;
    if (v12)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      v13 = *(_QWORD *)(a1 + 64);
    }
    else
    {
      v13 = 0;
    }
    sub_20B8B362C(a1, v13);
    v10 = *(_QWORD *)(a1 + 112);
    v11 = 1;
  }
  *(_BYTE *)(v10 + 96) = v11;
  result = sub_20B9F4868(a3, a2, a4);
  *(_DWORD *)(a1 + 48) = result;
  return result;
}

void sub_20B9CB14C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10E1C4095D43ACALL);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9CB170(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  NSObject *v5;
  uint8_t *v6;
  uint64_t v7;
  NSObject *v8;
  os_signpost_id_t v9;
  NSObject *v10;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  os_signpost_id_t ptr;
  uint8_t buf[8];
  BOOL (*v17)(_QWORD *, _QWORD *);
  uint8_t *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  ptr = 0;
  v2 = sub_20B9A7C5C(0xDu);
  ptr = os_signpost_id_make_with_pointer(v2, &ptr);
  v3 = sub_20B9A7C5C(0xDu);
  v4 = ptr;
  if (ptr - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v5 = v3;
    if (os_signpost_enabled(v3))
    {
      LOWORD(v12) = 0;
      _os_signpost_emit_with_name_impl(&dword_20B7F7000, v5, OS_SIGNPOST_INTERVAL_BEGIN, v4, "MecabraPredictionAnalyzeWithContext", (const char *)&unk_20BA9505F, (uint8_t *)&v12, 2u);
    }
  }
  (*(void (**)(void **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 160) + 16))(&v12, *(_QWORD *)(a1 + 160), a1);
  *(_QWORD *)buf = &unk_24C469588;
  v17 = sub_20B8FF4E0;
  v18 = buf;
  sub_20B8FDD20(&v12, (uint64_t)buf);
  v6 = v18;
  if (v18 == buf)
  {
    v7 = 4;
    v6 = buf;
    goto LABEL_8;
  }
  if (v18)
  {
    v7 = 5;
LABEL_8:
    (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
  }
  sub_20B8FED50((uint64_t)&v12, 5u, (uint64_t)"Final", 0, 1u);
  sub_20B9CAEE4(a1, (uint64_t)&v12);
  v8 = sub_20B9A7C5C(0xDu);
  v9 = ptr;
  if (ptr - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v10 = v8;
    if (os_signpost_enabled(v8))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_20B7F7000, v10, OS_SIGNPOST_INTERVAL_END, v9, "MecabraPredictionAnalyzeWithContext", (const char *)&unk_20BA9505F, buf, 2u);
    }
  }
  v12 = &unk_24C460D28;
  *(_QWORD *)buf = &v14;
  sub_20B882410((void ***)buf);
  sub_20B84055C((uint64_t)&v13);
  return 1;
}

void sub_20B9CB358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B881268((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9CB3AC(uint64_t a1, const __CFArray *a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  NSObject *v20;
  CFTypeRef *v21;
  uint64_t v22;
  const __CFString *v23;
  NSObject *v24;
  NSObject *v25;
  NSObject *v26;
  os_signpost_id_t v27;
  NSObject *v28;
  int v29;
  unsigned __int16 *p_p;
  uint64_t v31;
  void **v32;
  void **v33;
  CFIndex (*v34)(CFIndex, CFStringRef, float);
  void **v35;
  void **v36;
  void ***v37;
  __int128 *v38;
  uint64_t v39;
  char *v40;
  unint64_t v41;
  NSObject *v42;
  os_signpost_id_t v43;
  NSObject *v44;
  _QWORD ptr[2];
  void *v46;
  __int128 v47;
  __int128 v48;
  void **v49;
  __int128 *v50;
  void **v51;
  uint64_t v52;
  void *__p;
  void **v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  void **v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  _QWORD v62[4];
  void *v63;
  void *v64;
  uint64_t v65;
  void *v66;
  void *v67;
  uint64_t v68;
  uint64_t (*v69)(uint64_t, uint64_t);
  void (*v70)(uint64_t);
  CFTypeRef Mutable;
  uint8_t v72[8];
  uint64_t v73;
  CFIndex (*v74)(CFIndex, CFStringRef, float);
  void *v75;
  void **v76;
  void **v77;
  void **v78;
  void **v79;
  __int128 *p_buf;
  CFTypeRef cf;
  CFTypeRef v82[3];
  CFTypeRef *v83;
  __int128 buf;
  uint64_t v85;
  __int128 *v86;
  uint64_t (*v87)(uint64_t);
  void *v88;
  _BYTE v89[32];
  int v90;
  _QWORD v91[7];

  v91[6] = *MEMORY[0x24BDAC8D0];
  if (!a2)
    return 0;
  v5 = *(_QWORD *)(a1 + 152);
  if (!*(_QWORD *)(v5 + 32) || !*(_QWORD *)(v5 + 40))
    return 0;
  v9 = sub_20B9112A8(a2);
  if (!v9)
  {
    sub_20B9CB048(a1, a4, a3, 0);
    v23 = sub_20B911348(a2);
    ptr[1] = v23;
    if (!CFStringGetLength(v23))
    {
      sub_20B9CB170(a1);
      if (!v23)
        return 1;
      goto LABEL_79;
    }
    v24 = sub_20B9A7C5C(3u);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf) = 138412290;
      *(_QWORD *)((char *)&buf + 4) = v23;
      _os_log_debug_impl(&dword_20B7F7000, v24, OS_LOG_TYPE_DEBUG, "[KoreanEngine::analyzeGesturesWithContext] analysisStr: [%@]", (uint8_t *)&buf, 0xCu);
    }
    ptr[0] = 0;
    v25 = sub_20B9A7C5C(0xDu);
    ptr[0] = os_signpost_id_make_with_pointer(v25, ptr);
    v26 = sub_20B9A7C5C(0xDu);
    v27 = ptr[0];
    if ((unint64_t)(ptr[0] - 1) <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v28 = v26;
      if (os_signpost_enabled(v26))
      {
        LOWORD(buf) = 0;
        _os_signpost_emit_with_name_impl(&dword_20B7F7000, v28, OS_SIGNPOST_INTERVAL_BEGIN, v27, "analyzeGesturesWithContext", (const char *)&unk_20BA9505F, (uint8_t *)&buf, 2u);
      }
    }
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 112) + 32))(*(_QWORD *)(a1 + 112));
    sub_20B9727D8(*(_QWORD *)(a1 + 112), 1);
    v46 = &unk_24C460D28;
    v47 = 0u;
    v48 = 0u;
    LODWORD(v49) = 1065353216;
    v51 = 0;
    v52 = 0;
    v50 = 0;
    sub_20B8D0790(v23, (UniChar **)&v66);
    sub_20BA1FB2C(a2, (uint64_t)&v57);
    v29 = (*(_DWORD *)(a1 + 48) >> 14) & 1;
    sub_20B88CEDC(*(_QWORD *)(a1 + 152), v66, ((_BYTE *)v67 - (_BYTE *)v66) >> 1, v29, (uint64_t)&__p);
    if (v55 >= 0)
      p_p = (unsigned __int16 *)&__p;
    else
      p_p = (unsigned __int16 *)__p;
    if (v55 >= 0)
      v31 = HIBYTE(v55);
    else
      v31 = (uint64_t)v54;
    sub_20B9DEF34(p_p, v31, &buf);
    if (SHIBYTE(v85) < 0)
    {
      v32 = (void **)*((_QWORD *)&buf + 1);
      operator delete((void *)buf);
    }
    else
    {
      v32 = (void **)HIBYTE(v85);
    }
    sub_20BA1F0A4(a2, 0, (uint64_t *)&v61);
    sub_20B88D10C(*(_QWORD *)(a1 + 152), v66, ((_BYTE *)v67 - (_BYTE *)v66) >> 1, (uint64_t)&v61, v29, 1, (uint64_t)&buf);
    sub_20BA1F9DC(a2, 0, v82);
    v33 = (void **)HIBYTE(v59);
    v34 = (CFIndex (*)(CFIndex, CFStringRef, float))&v57;
    if (v59 < 0)
    {
      v34 = (CFIndex (*)(CFIndex, CFStringRef, float))v57;
      v33 = v58;
    }
    v35 = (void **)HIBYTE(v55);
    v36 = &__p;
    if (v55 < 0)
    {
      v36 = (void **)__p;
      v35 = v54;
    }
    *(_QWORD *)v72 = v66;
    v73 = ((_BYTE *)v67 - (_BYTE *)v66) >> 1;
    v74 = v34;
    v75 = v33;
    v76 = v36;
    v77 = v35;
    v78 = v32;
    v79 = &v61;
    p_buf = &buf;
    cf = 0;
    sub_20B9CF764(&cf, v82[0]);
    sub_20B9CC588(a1, &v46, (uint64_t *)v72, 0);
    if (cf)
      CFRelease(cf);
    if (v82[0])
      CFRelease(v82[0]);
    v37 = (void ***)sub_20B9D98E4((uint64_t)&buf);
    v61 = &unk_24C499568;
    *(_QWORD *)&buf = v62;
    sub_20B88DF54(v37);
    if (SHIBYTE(v55) < 0)
      operator delete(__p);
    if (SHIBYTE(v59) < 0)
      operator delete(v57);
    if (v66)
    {
      v67 = v66;
      operator delete(v66);
    }
    *(_QWORD *)&buf = &unk_24C469588;
    *((_QWORD *)&buf + 1) = sub_20B8FF4E0;
    v86 = &buf;
    sub_20B8FDD20(&v46, (uint64_t)&buf);
    v38 = v86;
    if (v86 == &buf)
    {
      v39 = 4;
      v38 = &buf;
    }
    else
    {
      if (!v86)
        goto LABEL_67;
      v39 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v38 + 8 * v39))();
LABEL_67:
    sub_20BA1FB2C(a2, (uint64_t)&buf);
    if (v85 >= 0)
      v40 = (char *)&buf;
    else
      v40 = (char *)buf;
    if (v85 >= 0)
      v41 = HIBYTE(v85);
    else
      v41 = *((_QWORD *)&buf + 1);
    sub_20B9CA930(a1, &v46, v40, v41);
    v42 = sub_20B9A7C5C(0xDu);
    v43 = ptr[0];
    if ((unint64_t)(ptr[0] - 1) <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v44 = v42;
      if (os_signpost_enabled(v42))
      {
        *(_WORD *)v72 = 0;
        _os_signpost_emit_with_name_impl(&dword_20B7F7000, v44, OS_SIGNPOST_INTERVAL_END, v43, "analyzeGesturesWithContext", (const char *)&unk_20BA9505F, v72, 2u);
      }
    }
    sub_20B9CAEE4(a1, (uint64_t)&v46);
    if (SHIBYTE(v85) < 0)
      operator delete((void *)buf);
    v46 = &unk_24C460D28;
    *(_QWORD *)&buf = &v50;
    sub_20B882410((void ***)&buf);
    sub_20B84055C((uint64_t)&v47);
    if (!v23)
      return 1;
LABEL_79:
    CFRelease(v23);
    return 1;
  }
  if (v9 != CFArrayGetCount(a2))
    return 0;
  v10 = *(_QWORD *)(a1 + 192);
  if (!v10)
    return 0;
  result = *(_QWORD *)(v10 + 8);
  if (result)
  {
    result = sub_20B911EF0((_QWORD *)result);
    if ((_DWORD)result)
    {
      sub_20B9CB048(a1, a4, a3, 1);
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 112) + 32))(*(_QWORD *)(a1 + 112));
      sub_20B9727D8(*(_QWORD *)(a1 + 112), 1);
      v12 = *(_QWORD *)(a1 + 192);
      if (v12)
      {
        v13 = *(_QWORD **)(v12 + 8);
        if (v13)
        {
          if (sub_20B911EF0(v13))
            sub_20B919E2C(*(_QWORD *)(a1 + 192));
        }
      }
      v14 = *(_QWORD *)(a1 + 200);
      if (v14)
      {
        v15 = *(_QWORD **)(v14 + 8);
        if (v15)
        {
          if (sub_20B911EF0(v15))
            sub_20B919E2C(*(_QWORD *)(a1 + 200));
        }
      }
      result = sub_20B91A2B4(*(_QWORD *)(a1 + 192), a2);
      if ((_DWORD)result)
      {
        v16 = *(_QWORD *)(a1 + 8);
        if (v16 != *(_QWORD *)a1 && *(_WORD *)(v16 - 2) != 32)
          sub_20B8B31AC(a1);
        v66 = 0;
        v67 = &v66;
        v68 = 0x3002000000;
        v69 = sub_20B9CBDF4;
        v70 = sub_20B9CBE04;
        Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
        v61 = 0;
        v62[0] = &v61;
        v62[1] = 0x4002000000;
        v62[2] = sub_20B9CBE10;
        v62[3] = sub_20B9CBE34;
        v64 = 0;
        v65 = 0;
        v63 = 0;
        *(_QWORD *)&buf = 0;
        *((_QWORD *)&buf + 1) = &buf;
        v85 = 0x7002000000;
        v86 = (__int128 *)sub_20B9CBE4C;
        v87 = sub_20B9CBEA8;
        v88 = &unk_24C460D28;
        memset(v89, 0, sizeof(v89));
        v90 = 1065353216;
        memset(v91, 0, 24);
        v57 = 0;
        v58 = &v57;
        v59 = 0x2000000000;
        v60 = 0;
        v17 = *(_QWORD *)(a1 + 192);
        v18 = (void *)MEMORY[0x24BDAC760];
        *(_QWORD *)v72 = MEMORY[0x24BDAC760];
        v73 = 0x40000000;
        v74 = sub_20B9CBEF4;
        v75 = &unk_24C46C748;
        v79 = (void **)&buf;
        p_buf = (__int128 *)a1;
        v76 = &v66;
        v77 = &v61;
        v78 = &v57;
        sub_20B91A390(v17, (uint64_t)v72);
        __p = 0;
        v54 = &__p;
        v55 = 0x2000000000;
        v56 = 0;
        if ((*(_BYTE *)(a1 + 49) & 0x20) != 0 && sub_20B91A2B4(*(_QWORD *)(a1 + 200), a2))
        {
          v19 = *(_QWORD *)(a1 + 200);
          v46 = v18;
          *(_QWORD *)&v47 = 0x40000000;
          *((_QWORD *)&v47 + 1) = sub_20B9CC280;
          *(_QWORD *)&v48 = &unk_24C4A01D8;
          *((_QWORD *)&v48 + 1) = &v66;
          v49 = &v61;
          v50 = &buf;
          v51 = &__p;
          v52 = a1;
          sub_20B91A390(v19, (uint64_t)&v46);
        }
        v20 = sub_20B9A7C5C(0xFu);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
          sub_20B9F4A64((unint64_t)"[Input Transcoder]", *((const __CFArray **)v67 + 5), (_QWORD *)(v62[0] + 40));
        v82[0] = &unk_24C469588;
        v82[1] = sub_20B8FF4E0;
        v83 = v82;
        sub_20B8FDD20((_QWORD *)(*((_QWORD *)&buf + 1) + 40), (uint64_t)v82);
        v21 = v83;
        if (v83 == v82)
        {
          v22 = 4;
          v21 = v82;
        }
        else
        {
          if (!v83)
          {
LABEL_83:
            sub_20B9CAEE4(a1, *((_QWORD *)&buf + 1) + 40);
            _Block_object_dispose(&__p, 8);
            _Block_object_dispose(&v57, 8);
            _Block_object_dispose(&buf, 8);
            v88 = &unk_24C460D28;
            v57 = v91;
            sub_20B882410((void ***)&v57);
            sub_20B84055C((uint64_t)v89);
            _Block_object_dispose(&v61, 8);
            if (v63)
            {
              v64 = v63;
              operator delete(v63);
            }
            _Block_object_dispose(&v66, 8);
            if (Mutable)
              CFRelease(Mutable);
            return 1;
          }
          v22 = 5;
        }
        (*((void (**)(void))*v21 + v22))();
        goto LABEL_83;
      }
    }
  }
  return result;
}

void sub_20B9CBBFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  if (a2)
    sub_20B854468(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B9CBDF4(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(result + 40) = v2;
  return result;
}

void sub_20B9CBE04(uint64_t a1)
{
  sub_20B8B035C((const void **)(a1 + 40), 0);
}

__n128 sub_20B9CBE10(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void sub_20B9CBE34(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

__n128 sub_20B9CBE4C(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = &unk_24C460D28;
  sub_20B95FDD8((uint64_t)(a1 + 6), (uint64_t *)(a2 + 48));
  a1[11] = 0;
  a1[12] = 0;
  a1[13] = 0;
  result = *(__n128 *)(a2 + 88);
  *(__n128 *)(a1 + 11) = result;
  a1[13] = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  return result;
}

uint64_t sub_20B9CBEA8(uint64_t a1)
{
  void **v3;

  *(_QWORD *)(a1 + 40) = &unk_24C460D28;
  v3 = (void **)(a1 + 88);
  sub_20B882410(&v3);
  return sub_20B84055C(a1 + 48);
}

CFIndex sub_20B9CBEF4(CFIndex result, CFStringRef theString, float a3)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  float *v8;
  unint64_t v9;
  float *v10;
  float *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  float *v17;
  char *v18;
  int v19;
  unsigned __int8 **v20;
  unsigned __int8 **v21;
  unsigned __int8 *v22;
  int v23;
  unsigned __int8 *v24;
  _WORD *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  void *v32;
  _OWORD v33[2];
  int v34;
  unsigned __int8 **v35;
  unsigned __int8 **v36;
  uint64_t v37;
  unsigned __int8 ***v38;
  _QWORD v39[3];
  _QWORD *v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  if (theString)
  {
    v5 = (_QWORD *)result;
    v6 = *(_QWORD *)(result + 64);
    result = CFStringGetLength(theString);
    if (result)
    {
      CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(v5[4] + 8) + 40), theString);
      v7 = *(_QWORD **)(v5[5] + 8);
      v8 = (float *)v7[6];
      v9 = v7[7];
      if ((unint64_t)v8 >= v9)
      {
        v11 = (float *)v7[5];
        v12 = v8 - v11;
        if ((unint64_t)(v12 + 1) >> 62)
          sub_20B80CDD8();
        v13 = v9 - (_QWORD)v11;
        v14 = (uint64_t)(v9 - (_QWORD)v11) >> 1;
        if (v14 <= v12 + 1)
          v14 = v12 + 1;
        if (v13 >= 0x7FFFFFFFFFFFFFFCLL)
          v15 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        if (v15)
        {
          v16 = (char *)sub_20B8127BC((uint64_t)(v7 + 7), v15);
          v11 = (float *)v7[5];
          v8 = (float *)v7[6];
        }
        else
        {
          v16 = 0;
        }
        v17 = (float *)&v16[4 * v12];
        v18 = &v16[4 * v15];
        *v17 = a3;
        v10 = v17 + 1;
        while (v8 != v11)
        {
          v19 = *((_DWORD *)v8-- - 1);
          *((_DWORD *)v17-- - 1) = v19;
        }
        v7[5] = v17;
        v7[6] = v10;
        v7[7] = v18;
        if (v11)
          operator delete(v11);
      }
      else
      {
        *v8 = a3;
        v10 = v8 + 1;
      }
      if ((v7[6] = v10, a3 >= 0.05) && *(uint64_t *)(*(_QWORD *)(v5[6] + 8) + 24) < 20
        || *(_QWORD *)(*(_QWORD *)(v5[7] + 8) + 96) - *(_QWORD *)(*(_QWORD *)(v5[7] + 8) + 88) < 0x29uLL
        || (result = sub_20B9DF758(theString), (_DWORD)result))
      {
        v32 = &unk_24C460D28;
        memset(v33, 0, sizeof(v33));
        v34 = 1065353216;
        v36 = 0;
        v37 = 0;
        v35 = 0;
        sub_20B9CA658(v6, &v32, theString, 0, 1);
        v20 = v35;
        v21 = v36;
        if (v35 != v36)
        {
          while (1)
          {
            v22 = *v20;
            v23 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)*v20 + 112))(*v20);
            (*(void (**)(unsigned __int8 *, _QWORD))(*(_QWORD *)v22 + 480))(v22, (v23 - (int)(float)(a3 * 11000.0)));
            v24 = *v20;
            v25 = *v20 + 32;
            v26 = (char)(*v20)[55];
            if (v26 < 0)
              v25 = (_WORD *)*((_QWORD *)*v20 + 4);
            v27 = *((_QWORD *)v24 + 5);
            if (v26 >= 0)
              v27 = (*v20)[55];
            if (v27)
            {
              v28 = 2 * v27;
              while ((unsigned __int16)((unsigned __int16)(*v25 + 21504) >> 2) < 0xAE9u)
              {
                ++v25;
                v28 -= 2;
                if (!v28)
                  goto LABEL_32;
              }
              goto LABEL_37;
            }
LABEL_32:
            v24[152] = 0;
            v29 = *(_QWORD *)(v5[7] + 8);
            v39[0] = &unk_24C459188;
            v40 = v39;
            sub_20B8FDA94((_QWORD *)(v29 + 40), (_QWORD **)v20, 1, 0, (uint64_t)v39);
            v30 = v40;
            if (v40 == v39)
              break;
            if (v40)
            {
              v31 = 5;
LABEL_36:
              (*(void (**)(void))(*v30 + 8 * v31))();
            }
LABEL_37:
            if (++v20 == v21)
              goto LABEL_38;
          }
          v30 = v39;
          v31 = 4;
          goto LABEL_36;
        }
LABEL_38:
        ++*(_QWORD *)(*(_QWORD *)(v5[6] + 8) + 24);
        v32 = &unk_24C460D28;
        v38 = &v35;
        sub_20B882410((void ***)&v38);
        return sub_20B84055C((uint64_t)v33);
      }
    }
  }
  return result;
}

void sub_20B9CC230(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B881268((uint64_t)va);
  _Unwind_Resume(a1);
}

CFIndex sub_20B9CC280(CFIndex result, CFStringRef theString, _BYTE *a3, float a4)
{
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  float *v10;
  unint64_t v11;
  float *v12;
  float *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  float *v19;
  char *v20;
  int v21;
  _QWORD **v22;
  _QWORD **v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  _OWORD v32[2];
  int v33;
  _QWORD **v34;
  _QWORD **v35;
  uint64_t v36;
  void **v37;
  _QWORD v38[3];
  _QWORD *v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  if (theString)
  {
    v7 = (_QWORD *)result;
    v8 = *(_QWORD *)(result + 64);
    result = CFStringGetLength(theString);
    if (result)
    {
      CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(v7[4] + 8) + 40), theString);
      v9 = *(_QWORD **)(v7[5] + 8);
      v10 = (float *)v9[6];
      v11 = v9[7];
      if ((unint64_t)v10 >= v11)
      {
        v13 = (float *)v9[5];
        v14 = v10 - v13;
        if ((unint64_t)(v14 + 1) >> 62)
          sub_20B80CDD8();
        v15 = v11 - (_QWORD)v13;
        v16 = (uint64_t)(v11 - (_QWORD)v13) >> 1;
        if (v16 <= v14 + 1)
          v16 = v14 + 1;
        if (v15 >= 0x7FFFFFFFFFFFFFFCLL)
          v17 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        if (v17)
        {
          v18 = (char *)sub_20B8127BC((uint64_t)(v9 + 7), v17);
          v13 = (float *)v9[5];
          v10 = (float *)v9[6];
        }
        else
        {
          v18 = 0;
        }
        v19 = (float *)&v18[4 * v14];
        v20 = &v18[4 * v17];
        *v19 = a4;
        v12 = v19 + 1;
        while (v10 != v13)
        {
          v21 = *((_DWORD *)v10-- - 1);
          *((_DWORD *)v19-- - 1) = v21;
        }
        v9[5] = v19;
        v9[6] = v12;
        v9[7] = v20;
        if (v13)
          operator delete(v13);
      }
      else
      {
        *v10 = a4;
        v12 = v10 + 1;
      }
      v9[6] = v12;
      v31 = &unk_24C460D28;
      memset(v32, 0, sizeof(v32));
      v33 = 1065353216;
      v35 = 0;
      v36 = 0;
      v34 = 0;
      sub_20B9CA658(v8, &v31, theString, 0, 1);
      v22 = v34;
      v23 = v35;
      if (v34 != v35)
      {
        while (1)
        {
          v24 = (uint64_t)*v22;
          v25 = (*(uint64_t (**)(_QWORD))(**v22 + 112))(*v22);
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v24 + 480))(v24, (v25 - (int)(float)(a4 * 11000.0)));
          *((_BYTE *)*v22 + 152) = 0;
          v26 = *(_QWORD *)(v7[6] + 8);
          v38[0] = &unk_24C459188;
          v39 = v38;
          sub_20B8FDA94((_QWORD *)(v26 + 40), v22, 1, 0, (uint64_t)v38);
          v27 = v39;
          if (v39 == v38)
            break;
          if (v39)
          {
            v28 = 5;
LABEL_24:
            (*(void (**)(void))(*v27 + 8 * v28))();
          }
          if (++v22 == v23)
            goto LABEL_26;
        }
        v27 = v38;
        v28 = 4;
        goto LABEL_24;
      }
LABEL_26:
      v29 = *(_QWORD *)(v7[7] + 8);
      v30 = *(_QWORD *)(v29 + 24);
      *(_QWORD *)(v29 + 24) = v30 + 1;
      if (v30 > 3)
        *a3 = 1;
      v31 = &unk_24C460D28;
      v37 = (void **)&v34;
      sub_20B882410(&v37);
      return sub_20B84055C((uint64_t)v32);
    }
  }
  return result;
}

void sub_20B9CC538(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B881268((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B9CC588(uint64_t a1, _QWORD *a2, uint64_t *a3, char a4)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  _BYTE *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  void **v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t (**v21)();
  void **v22;
  uint64_t *v23;
  __int128 v24;
  int v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  void *v35;
  uint64_t *v36;
  uint64_t *v37;
  unint64_t v38;
  BOOL v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t v42;
  unsigned __int16 *v43;
  uint64_t v44;
  unsigned __int16 *v45;
  char *v46;
  uint64_t **v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  _BOOL4 v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  int v62;
  _QWORD *v63;
  BOOL v64;
  unint64_t v65;
  char *v66;
  unint64_t v67;
  uint64_t (**v68)();
  void ***v69;
  void *v70;
  uint64_t v71;
  uint64_t (**v72)();
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  _QWORD *v77;
  uint64_t v78;
  char v79;
  void **v80;
  unint64_t v81;
  char *p_p;
  unint64_t v83;
  float v84;
  char v85;
  int v86;
  uint64_t (***v87)();
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  double v91;
  float *v92;
  int v93;
  void *v94;
  unint64_t v95;
  void **v96;
  void *v97;
  char *v98;
  unint64_t v99;
  int v100;
  void *v101;
  unint64_t v102;
  float v103;
  char v104;
  int v105;
  _QWORD *v106;
  _QWORD *v107;
  int v108;
  void **v109;
  uint64_t v110;
  _QWORD *v111;
  _QWORD *v112;
  _QWORD *v113;
  _QWORD *v114;
  _QWORD *v115;
  uint64_t v116;
  _BOOL4 v117;
  int v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  uint64_t (***v122)();
  uint64_t v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  BOOL v131;
  uint64_t v132;
  void **v133;
  uint64_t v134;
  _QWORD *v135;
  int v136;
  char *v137;
  char *v138;
  char *v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t *v148;
  void **v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  void ***v154;
  uint64_t v155;
  uint64_t *v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t (***v159)();
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  void ***v164;
  uint64_t v165;
  uint64_t *v166;
  uint64_t *v167;
  uint64_t v168;
  unsigned __int16 *v169;
  int v170;
  const void *v171;
  _BOOL8 v172;
  int v173;
  uint64_t (***v174)();
  uint64_t v175;
  uint64_t v176;
  unsigned __int8 v177;
  unsigned __int8 v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  _QWORD *v182;
  uint64_t v183;
  uint64_t v184;
  unsigned __int8 v185;
  unsigned __int8 v186;
  BOOL v187;
  uint64_t v188;
  uint64_t v189;
  _QWORD *v190;
  _QWORD *v191;
  uint64_t v192;
  uint64_t v193;
  unsigned __int8 v194;
  unsigned __int8 v195;
  uint64_t v196;
  uint64_t v197;
  _QWORD *v198;
  _QWORD *v199;
  uint64_t v200;
  int v201;
  uint64_t v202;
  _QWORD *v203;
  uint64_t v204;
  _QWORD *v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  char *v210;
  char *v211;
  __int128 v212;
  float v213;
  char *v214;
  unint64_t v215;
  void *v216;
  uint64_t (***v217)();
  uint64_t v218;
  void *v219;
  void *v220;
  uint64_t *v221;
  uint64_t *v222;
  _QWORD *v223;
  uint64_t v224;
  int v225;
  int v226;
  uint64_t v227;
  unint64_t v228;
  uint64_t v229;
  char v231;
  BOOL v232;
  BOOL v233;
  _QWORD *v234;
  _QWORD *v235;
  _QWORD *v236[2];
  _QWORD *v237;
  void *__p;
  char *v239;
  char *v240;
  void *v241[2];
  unsigned __int8 v242;
  void **v243;
  void *v244[2];
  uint64_t v245;
  void **v246;
  uint64_t (**v247)();
  BOOL (*v248)(uint64_t, uint64_t);
  unsigned __int8 v249;
  void **v250;
  _BYTE __dst[24];
  __int128 v252;
  uint64_t v253;
  uint64_t *v254;
  uint64_t *v255;
  uint64_t v256;
  float v257;
  __int16 v258;
  void **v259;
  __int128 v260;
  __int128 v261;
  int v262;
  uint64_t *v263;
  uint64_t *v264;
  uint64_t v265;
  uint64_t v266;

  v6 = a1;
  v266 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a1 + 49) & 0x40) != 0)
  {
    *(_QWORD *)__dst = &off_24C469530;
    *(_QWORD *)&__dst[8] = sub_20B9DE8F8;
    *(_QWORD *)&v252 = __dst;
    sub_20B9CE82C(*(_QWORD *)(a1 + 152), a3, (uint64_t)__dst, 1);
  }
  else
  {
    *(_QWORD *)__dst = &off_24C469530;
    *(_QWORD *)&__dst[8] = sub_20B9DE93C;
    *(_QWORD *)&v252 = __dst;
    sub_20B9CE82C(*(_QWORD *)(a1 + 152), a3, (uint64_t)__dst, 0);
  }
  v7 = (_QWORD *)v252;
  if ((_BYTE *)v252 == __dst)
  {
    v8 = 4;
    v7 = __dst;
  }
  else
  {
    if (!(_QWORD)v252)
      goto LABEL_9;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_9:
  v9 = *(_DWORD *)(v6 + 48);
  v229 = v6;
  if ((v9 & 2) == 0)
    goto LABEL_20;
  if ((v9 & 0x40000) == 0)
  {
    v10 = *(_QWORD *)(v6 + 168);
    if (v10)
    {
      v11 = atomic_load((unsigned __int8 *)(v10 + 97));
      if ((v11 & 1) == 0)
      {
        v12 = atomic_load((unsigned __int8 *)(v10 + 96));
        if ((v12 & 1) != 0)
        {
          LODWORD(v259) = 0;
          v13 = *(_BYTE **)(v6 + 168);
          v14 = a3[7];
          v15 = operator new(0x20uLL);
          *v15 = &off_24C46B3C8;
          v15[1] = a2;
          v15[2] = a3;
          v15[3] = &v259;
          *(_QWORD *)&v252 = v15;
          sub_20B8F63BC(v13, v14, (uint64_t)__dst, -1);
          v16 = (_QWORD *)v252;
          v6 = v229;
          if ((_BYTE *)v252 == __dst)
          {
            v17 = 4;
            v16 = __dst;
          }
          else
          {
            if (!(_QWORD)v252)
              goto LABEL_19;
            v17 = 5;
          }
          (*(void (**)(void))(*v16 + 8 * v17))();
        }
      }
    }
  }
LABEL_19:
  if (a2[6] != a2[7])
    return;
LABEL_20:
  if ((a4 & 1) != 0)
    goto LABEL_30;
  sub_20B88C9DC((char *)a3[4], a3[5], (void *)*a3, a3[1], 0, 83, 4, 1, (uint64_t *)&v259, 0.0);
  v18 = v259;
  v259 = 0;
  v247 = (uint64_t (**)())v18;
  *(_QWORD *)__dst = &unk_24C459188;
  *(_QWORD *)&v252 = __dst;
  sub_20B8FDA94(a2, &v247, 1, 0, (uint64_t)__dst);
  v19 = (_QWORD *)v252;
  v6 = v229;
  if ((_BYTE *)v252 == __dst)
  {
    v20 = 4;
    v19 = __dst;
    goto LABEL_25;
  }
  if ((_QWORD)v252)
  {
    v20 = 5;
LABEL_25:
    (*(void (**)(void))(*v19 + 8 * v20))();
  }
  v21 = v247;
  v247 = 0;
  if (v21)
    (*((void (**)(uint64_t (**)()))*v21 + 2))(v21);
  v22 = v259;
  v259 = 0;
  if (v22)
    (*((void (**)(void **))*v22 + 2))(v22);
LABEL_30:
  LOBYTE(v235) = a4;
  v23 = *(uint64_t **)(v6 + 128);
  if (*v23)
  {
    v24 = *((_OWORD *)a3 + 1);
    *(_OWORD *)v244 = *(_OWORD *)a3;
    v25 = *(_DWORD *)(v6 + 48);
    LOBYTE(v234) = (v25 & 0x4000) != 0;
    v233 = (v25 & 2) != 0;
    v232 = (v25 & 0x2000) != 0;
    *(_OWORD *)v241 = v24;
    v259 = 0;
    v260 = 0uLL;
    v231 = 0;
    v236[0] = 0;
    v26 = operator new(0x68uLL);
    *v26 = &off_24C46B210;
    v26[1] = v244;
    v26[2] = &v235;
    v26[3] = v241;
    v26[4] = &v233;
    v26[5] = &v232;
    v26[6] = v6;
    v26[7] = a3;
    v26[8] = &v234;
    v26[9] = v236;
    v26[10] = &v259;
    v26[11] = &v231;
    v26[12] = a2;
    *(_QWORD *)&v252 = v26;
    sub_20B951FF8(v23);
    v27 = (_QWORD *)v252;
    if ((_BYTE *)v252 == __dst)
    {
      v28 = 4;
      v27 = __dst;
    }
    else
    {
      if (!(_QWORD)v252)
        goto LABEL_36;
      v28 = 5;
    }
    (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_36:
    sub_20B88CCE0(*(_QWORD *)(v6 + 152), a3, (uint64_t)&v247);
    if ((v249 & 0x80u) == 0)
      v29 = v249;
    else
      v29 = (unint64_t)v248;
    if (!v29)
    {
LABEL_56:
      (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(v6 + 152) + 24))(*(_QWORD *)(v6 + 152), a2, v6);
      v36 = (uint64_t *)a2[6];
      v37 = (uint64_t *)a2[7];
      while (v36 != v37)
        sub_20B9CF270(v6, *v36++, a3[6]);
      if (!(_BYTE)v235 && (v260 >= 0 ? (v38 = HIBYTE(v260)) : (v38 = v260), v38 ? (v39 = v231 == 0) : (v39 = 0), v39))
      {
        if (v260 >= 0)
          v46 = (char *)&v259;
        else
          v46 = (char *)v259;
        sub_20B88C9DC(v46, v38, v46, v38, 0, 0, 4, 0, (uint64_t *)&v237, 0.0);
        __p = v237;
        if (v237)
        {
          v47 = sub_20B8CD218(a2 + 1, &__p);
          if (v47)
          {
            v48 = v47[3];
            if (v48 != (uint64_t *)-1)
            {
              v49 = *(_QWORD *)(a2[6] + 8 * (_QWORD)v48);
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v49 + 96))(v49) == 83)
              {
                if (*(char *)(v49 + 55) >= 0)
                  LODWORD(v50) = *(unsigned __int8 *)(v49 + 55);
                else
                  v50 = *(_QWORD *)(v49 + 40);
                v51 = -7000;
              }
              else
              {
                LODWORD(v50) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 48))(v49);
                v51 = -22000;
              }
              v62 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 112))(v49);
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v49 + 480))(v49, (v62 + v51 * v50));
              sub_20B88CB9C(*(_QWORD *)(v6 + 152), a2);
            }
          }
        }
        v63 = v237;
        v237 = 0;
        if (v63)
          (*(void (**)(_QWORD *))(*v63 + 16))(v63);
      }
      else
      {
        sub_20B88CB9C(*(_QWORD *)(v6 + 152), a2);
      }
      if ((char)v249 < 0)
        operator delete(v247);
      if (SHIBYTE(v260) < 0)
        operator delete(v259);
      goto LABEL_72;
    }
    if ((v249 & 0x80u) == 0)
      v30 = (char *)&v247;
    else
      v30 = (char *)v247;
    sub_20B88C9DC(v30, v29, (void *)*a3, a3[1], 1, 79, 4, 0, (uint64_t *)&__p, 0.0);
    v237 = __p;
    __p = 0;
    *(_QWORD *)__dst = &unk_24C459188;
    *(_QWORD *)&v252 = __dst;
    sub_20B8FDA94(a2, &v237, 1, 0, (uint64_t)__dst);
    v31 = (_QWORD *)v252;
    if ((_BYTE *)v252 == __dst)
    {
      v32 = 4;
      v31 = __dst;
    }
    else
    {
      if (!(_QWORD)v252)
      {
LABEL_48:
        v33 = v237;
        v237 = 0;
        if (v33)
          (*(void (**)(_QWORD *))(*v33 + 16))(v33);
        v34 = HIBYTE(v260);
        if (v260 < 0)
          v34 = v260;
        if (!v34)
          sub_20B9B6544((void **)&v259, (void **)&v247);
        v35 = __p;
        __p = 0;
        if (v35)
          (*(void (**)(void *))(*(_QWORD *)v35 + 16))(v35);
        goto LABEL_56;
      }
      v32 = 5;
    }
    (*(void (**)(void))(*v31 + 8 * v32))();
    goto LABEL_48;
  }
LABEL_72:
  v40 = a2;
  if (a2[6] != a2[7])
  {
    if (*(_QWORD *)(v6 + 96))
    {
      v41 = a3[1];
      if (v41 >= 5)
      {
        v42 = a3[5];
        if (v42)
        {
          v43 = (unsigned __int16 *)*a3;
          v44 = 2 * v42;
          v45 = (unsigned __int16 *)a3[4];
          while (*v45 - 12593 < 0x33)
          {
            ++v45;
            v44 -= 2;
            if (!v44)
              goto LABEL_218;
          }
          v52 = sub_20B9DEB60(a3[4], v42);
          v228 = v53;
          v54 = (void *)v52;
          v55 = 0;
          v56 = v41 - v53;
          v57 = v41 - v53 - 1;
          v226 = v43[v57];
          while (*(unsigned __int16 *)&aA1b1e1g1[v55] != v43[v57])
          {
            v55 += 2;
            if (v55 == 8)
            {
              v58 = 0;
              v59 = v56 - 2;
              goto LABEL_112;
            }
          }
          v59 = v56 - 2;
          if (v55 == -2)
          {
            v58 = 0;
          }
          else
          {
            v60 = 0;
            while (*(unsigned __int16 *)&aO1p1q1r1s1t1u1[v60] != v43[v59])
            {
              v60 += 2;
              if (v60 == 42)
              {
                v61 = 0;
                goto LABEL_106;
              }
            }
            v61 = &aO1p1q1r1s1t1u1[v60];
LABEL_106:
            v58 = !v64;
          }
LABEL_112:
          v6 = v229;
          v40 = a2;
          if ((v58 | sub_20B9DEA54(&v43[v59], 2 * (v43 != 0))) == 1)
          {
            *(_QWORD *)__dst = &unk_24C460D28;
            *(_OWORD *)&__dst[8] = 0u;
            v252 = 0u;
            LODWORD(v253) = 1065353216;
            v255 = 0;
            v256 = 0;
            v254 = 0;
            if (v43)
              v65 = v57;
            else
              v65 = 0;
            v225 = (*(_DWORD *)(v229 + 48) >> 14) & 1;
            sub_20B88CEDC(*(_QWORD *)(v229 + 152), v43, v65, v225, (uint64_t)v241);
            if ((v242 & 0x80u) == 0)
              v66 = (char *)v241;
            else
              v66 = (char *)v241[0];
            if ((v242 & 0x80u) == 0)
              v67 = v242;
            else
              v67 = (unint64_t)v241[1];
            sub_20B88C9DC(v66, v67, v43, v56, 0, 83, 4, 0, (uint64_t *)&v237, 0.0);
            v68 = (uint64_t (**)())v237;
            v237 = 0;
            v247 = v68;
            v259 = (void **)&unk_24C459188;
            *(_QWORD *)&v261 = &v259;
            sub_20B8FDA94(__dst, &v247, 1, 0, (uint64_t)&v259);
            v69 = (void ***)v261;
            if ((void ***)v261 == &v259)
            {
              v71 = 4;
              v69 = &v259;
              v70 = v54;
            }
            else
            {
              v70 = v54;
              if (!(_QWORD)v261)
                goto LABEL_127;
              v71 = 5;
            }
            ((void (*)(void))(*v69)[v71])();
LABEL_127:
            v72 = v247;
            v247 = 0;
            if (v72)
              (*((void (**)(uint64_t (**)()))*v72 + 2))(v72);
            v73 = (uint64_t)(a2[7] - a2[6]) >> 3;
            if (v73 >= 3)
              v73 = 3;
            if (v73)
            {
              v74 = 0;
              v227 = 8 * v73;
              do
              {
                v75 = *(_QWORD *)(v40[6] + v74);
                v76 = *(char *)(v75 + 55);
                if (v76 >= 0)
                  v77 = (_QWORD *)(v75 + 32);
                else
                  v77 = *(_QWORD **)(v75 + 32);
                if (v76 >= 0)
                  v78 = *(unsigned __int8 *)(v75 + 55);
                else
                  v78 = *(_QWORD *)(v75 + 40);
                v236[0] = v77;
                v236[1] = (_QWORD *)v78;
                if (v228)
                {
                  if (sub_20B947DC0((uint64_t *)v236, v70, v228))
                  {
                    v78 -= v228;
LABEL_143:
                    sub_20B9DEF34((unsigned __int16 *)v77, v78, v244);
                    v79 = HIBYTE(v245);
                    if (v245 >= 0)
                      v80 = v244;
                    else
                      v80 = (void **)v244[0];
                    if (v245 >= 0)
                      v81 = HIBYTE(v245);
                    else
                      v81 = (unint64_t)v244[1];
                    if (*((unsigned __int16 *)v80 + v81 - 1) == v226)
                    {
                      sub_20B88CEDC(*(_QWORD *)(v6 + 152), v80, v81 - 1, v225, (uint64_t)&__p);
                      if (SHIBYTE(v240) >= 0)
                        p_p = (char *)&__p;
                      else
                        p_p = (char *)__p;
                      if (SHIBYTE(v240) >= 0)
                        v83 = HIBYTE(v240);
                      else
                        v83 = (unint64_t)v239;
                      v84 = *(float *)(v75 + 96);
                      v85 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v75 + 200))(v75);
                      v86 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v75 + 96))(v75);
                      sub_20B88C9DC(p_p, v83, v80, v81, v85, v86, 4, 0, (uint64_t *)&v235, v84);
                      v234 = v235;
                      v235 = 0;
                      v247 = (uint64_t (**)())&unk_24C459188;
                      v250 = (void **)&v247;
                      sub_20B8FDA94(__dst, &v234, 1, 0, (uint64_t)&v247);
                      v87 = (uint64_t (***)())v250;
                      v6 = v229;
                      v40 = a2;
                      if (v250 == (void **)&v247)
                      {
                        v87 = &v247;
                        v88 = 4;
LABEL_160:
                        (*v87)[v88]();
                      }
                      else if (v250)
                      {
                        v88 = 5;
                        goto LABEL_160;
                      }
                      v89 = v234;
                      v234 = 0;
                      if (v89)
                        (*(void (**)(_QWORD *))(*v89 + 16))(v89);
                      v90 = v235;
                      v235 = 0;
                      if (v90)
                        (*(void (**)(_QWORD *))(*v90 + 16))(v90);
                      if (SHIBYTE(v240) < 0)
                        operator delete(__p);
                      v79 = HIBYTE(v245);
                    }
                    if (v79 < 0)
                      operator delete(v244[0]);
                  }
                }
                else if (*((unsigned __int16 *)v77 + v78 - 1) - 12593 >= 0x33)
                {
                  goto LABEL_143;
                }
                v74 += 8;
              }
              while (v227 != v74);
            }
            (*(void (**)(_QWORD, _BYTE *, uint64_t))(**(_QWORD **)(v6 + 152) + 24))(*(_QWORD *)(v6 + 152), __dst, v6);
            v91 = (*(double (**)(_QWORD))(**(_QWORD **)v40[6] + 392))(*(_QWORD *)v40[6]);
            if ((*(double (**)(uint64_t))(*(_QWORD *)*v254 + 392))(*v254) - v91 < 1.0)
              goto LABEL_213;
            if (v254 == v255)
              v92 = 0;
            else
              v92 = (float *)*v254;
            v93 = *((char *)v92 + 87);
            if (v93 >= 0)
              v94 = v92 + 16;
            else
              v94 = (void *)*((_QWORD *)v92 + 8);
            if (v93 >= 0)
              v95 = *((unsigned __int8 *)v92 + 87);
            else
              v95 = *((_QWORD *)v92 + 9);
            sub_20B88CEDC(*(_QWORD *)(v6 + 152), v94, v95, v225, (uint64_t)&__p);
            if (v228)
            {
              sub_20B877ED0(v244, v70, v228);
              v96 = v245 >= 0 ? v244 : (void **)v244[0];
              v97 = v245 >= 0 ? (void *)HIBYTE(v245) : v244[1];
              sub_20B88DACC((uint64_t)&__p, v96, (unint64_t)v97);
              if (SHIBYTE(v245) < 0)
                operator delete(v244[0]);
            }
            if (SHIBYTE(v240) >= 0)
              v98 = (char *)&__p;
            else
              v98 = (char *)__p;
            if (SHIBYTE(v240) >= 0)
              v99 = HIBYTE(v240);
            else
              v99 = (unint64_t)v239;
            v100 = *((char *)v92 + 87);
            if (v100 >= 0)
              v101 = v92 + 16;
            else
              v101 = (void *)*((_QWORD *)v92 + 8);
            if (v100 >= 0)
              v102 = *((unsigned __int8 *)v92 + 87);
            else
              v102 = *((_QWORD *)v92 + 9);
            v103 = v92[24];
            v104 = (*(uint64_t (**)(float *))(*(_QWORD *)v92 + 200))(v92);
            v105 = (*(uint64_t (**)(float *))(*(_QWORD *)v92 + 96))(v92);
            sub_20B88C9DC(v98, v99, v101, v102, v104, v105, 4, 0, (uint64_t *)v236, v103);
            v106 = v236[0];
            (*(void (**)(float *))(*(_QWORD *)v92 + 392))(v92);
            (*(void (**)(_QWORD *))(*v106 + 400))(v106);
            v107 = v236[0];
            v108 = (*(uint64_t (**)(float *))(*(_QWORD *)v92 + 112))(v92);
            (*(void (**)(_QWORD *, _QWORD))(*v107 + 480))(v107, (v108 + 1));
            v235 = v236[0];
            v236[0] = 0;
            v244[0] = &off_24C459028;
            v244[1] = sub_20B9CF614;
            v246 = v244;
            sub_20B8FDA94(a2, &v235, 1, 0, (uint64_t)v244);
            v6 = v229;
            v109 = v246;
            if (v246 == v244)
            {
              v110 = 4;
              v109 = v244;
            }
            else
            {
              if (!v246)
              {
LABEL_207:
                v111 = v235;
                v235 = 0;
                if (v111)
                  (*(void (**)(_QWORD *))(*v111 + 16))(v111);
                v112 = v236[0];
                v236[0] = 0;
                if (v112)
                  (*(void (**)(_QWORD *))(*v112 + 16))(v112);
                if (SHIBYTE(v240) < 0)
                  operator delete(__p);
LABEL_213:
                v113 = v237;
                v237 = 0;
                if (v113)
                  (*(void (**)(_QWORD *))(*v113 + 16))(v113);
                if ((char)v242 < 0)
                  operator delete(v241[0]);
                *(_QWORD *)__dst = &unk_24C460D28;
                v241[0] = &v254;
                sub_20B882410((void ***)v241);
                sub_20B84055C((uint64_t)&__dst[8]);
                v40 = a2;
                goto LABEL_218;
              }
              v110 = 5;
            }
            (*((void (**)(void))*v109 + v110))();
            goto LABEL_207;
          }
        }
      }
    }
  }
LABEL_218:
  v114 = (_QWORD *)v40[6];
  v115 = (_QWORD *)v40[7];
  if (v114 == v115)
    goto LABEL_303;
  if (*(_QWORD *)(v6 + 96) && (*(_BYTE *)(v6 + 48) & 2) != 0)
  {
    *(_QWORD *)__dst = &unk_24C460D28;
    *(_OWORD *)&__dst[8] = 0u;
    v252 = 0u;
    LODWORD(v253) = 1065353216;
    v255 = 0;
    v256 = 0;
    v254 = 0;
    v116 = *v114;
    v117 = (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v114 + 96))(*v114) != 81
        && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v116 + 96))(v116) != 71;
    v118 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v116 + 248))(v116, 0, 0);
    v119 = *(_QWORD *)(v116 + 32);
    v120 = *(char *)(v116 + 55);
    if (v120 >= 0)
      v119 = v116 + 32;
    v121 = *(_QWORD *)(v116 + 40);
    if (v120 >= 0)
      v121 = *(unsigned __int8 *)(v116 + 55);
    if (*(unsigned __int16 *)(v119 + 2 * v121 - 2) - 12593 < 0x33 || !v117 || ((v118 ^ 1) & 1) != 0)
      goto LABEL_240;
    (*(void (**)(uint64_t, uint64_t, const char *, uint64_t))(*(_QWORD *)v116 + 528))(v116, 3, "add completion", 1);
    (*(void (**)(void ***__return_ptr, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v6 + 160) + 24))(&v259, *(_QWORD *)(v6 + 160), v6, v116);
    if (v263 == v264)
    {
LABEL_239:
      v259 = (void **)&unk_24C460D28;
      __p = &v263;
      sub_20B882410((void ***)&__p);
      sub_20B84055C((uint64_t)&v260);
LABEL_240:
      __p = 0;
      v239 = 0;
      v240 = 0;
      v126 = a2[6];
      v125 = a2[7];
      if (v125 != v126)
      {
        v127 = 0;
        while (1)
        {
          v128 = *(_QWORD *)(v126 + 8 * v127);
          v129 = *(char *)(v128 + 55);
          v130 = v128 + 32;
          v131 = v129 < 0;
          if (v129 < 0)
            v130 = *(_QWORD *)(v128 + 32);
          v132 = *(unsigned __int8 *)(v128 + 55);
          if (v131)
            v132 = *(_QWORD *)(v128 + 40);
          if (*(unsigned __int16 *)(v130 + 2 * v132 - 2) - 12593 > 0x32)
            goto LABEL_275;
          (*(void (**)(void ***__return_ptr, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v229 + 160) + 24))(&v259, *(_QWORD *)(v229 + 160), v229, v128);
          if (v263 != v264)
            break;
LABEL_255:
          v136 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v128 + 96))(v128);
          if (v136 != 73 && v136 != 83)
          {
            v137 = v239;
            if (v239 >= v240)
            {
              v139 = (char *)__p;
              v140 = (v239 - (_BYTE *)__p) >> 3;
              v141 = v140 + 1;
              if ((unint64_t)(v140 + 1) >> 61)
                sub_20B80CDD8();
              v142 = v240 - (_BYTE *)__p;
              if ((v240 - (_BYTE *)__p) >> 2 > v141)
                v141 = v142 >> 2;
              if ((unint64_t)v142 >= 0x7FFFFFFFFFFFFFF8)
                v143 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v143 = v141;
              if (v143)
              {
                v144 = (char *)sub_20B800BE8((uint64_t)&v240, v143);
                v139 = (char *)__p;
                v137 = v239;
              }
              else
              {
                v144 = 0;
              }
              v145 = &v144[8 * v140];
              *(_QWORD *)v145 = v127;
              v138 = v145 + 8;
              while (v137 != v139)
              {
                v146 = *((_QWORD *)v137 - 1);
                v137 -= 8;
                *((_QWORD *)v145 - 1) = v146;
                v145 -= 8;
              }
              __p = v145;
              v239 = v138;
              v240 = &v144[8 * v143];
              if (v139)
                operator delete(v139);
            }
            else
            {
              *(_QWORD *)v239 = v127;
              v138 = v137 + 8;
            }
            v239 = v138;
          }
          v259 = (void **)&unk_24C460D28;
          v236[0] = &v263;
          sub_20B882410((void ***)v236);
          sub_20B84055C((uint64_t)&v260);
          v126 = a2[6];
          v125 = a2[7];
LABEL_275:
          if (++v127 >= (unint64_t)((v125 - v126) >> 3))
            goto LABEL_276;
        }
        sub_20B8FEA7C(&v259, 0, v236);
        v244[0] = &unk_24C459188;
        v246 = v244;
        sub_20B8FDA94(__dst, v236, 1, 0, (uint64_t)v244);
        v133 = v246;
        if (v246 == v244)
        {
          v133 = v244;
          v134 = 4;
        }
        else
        {
          if (!v246)
            goto LABEL_253;
          v134 = 5;
        }
        (*((void (**)(void))*v133 + v134))();
LABEL_253:
        v135 = v236[0];
        v236[0] = 0;
        if (v135)
          (*(void (**)(_QWORD *))(*v135 + 16))(v135);
        goto LABEL_255;
      }
LABEL_276:
      sub_20B8FEACC(a2, (unint64_t **)&__p);
      v6 = v229;
      (*(void (**)(_QWORD, _BYTE *, uint64_t))(**(_QWORD **)(v229 + 152) + 24))(*(_QWORD *)(v229 + 152), __dst, v229);
      v148 = v254;
      v147 = v255;
      if (v254 != v255)
      {
        while (1)
        {
          sub_20B9CF270(v229, *v148, a3[6]);
          v241[0] = &unk_24C459188;
          v243 = v241;
          sub_20B8FDA94(a2, (_QWORD **)v148, 1, 0, (uint64_t)v241);
          v149 = v243;
          if (v243 == v241)
            break;
          if (v243)
          {
            v150 = 5;
LABEL_281:
            (*((void (**)(void))*v149 + v150))();
          }
          if (++v148 == v147)
            goto LABEL_283;
        }
        v149 = v241;
        v150 = 4;
        goto LABEL_281;
      }
LABEL_283:
      if (__p)
      {
        v239 = (char *)__p;
        operator delete(__p);
      }
      *(_QWORD *)__dst = &unk_24C460D28;
      v259 = (void **)&v254;
      sub_20B882410(&v259);
      sub_20B84055C((uint64_t)&__dst[8]);
      v114 = (_QWORD *)a2[6];
      v115 = (_QWORD *)a2[7];
      goto LABEL_286;
    }
    sub_20B8FEA7C(&v259, 0, &__p);
    v247 = (uint64_t (**)())&unk_24C459188;
    v250 = (void **)&v247;
    sub_20B8FDA94(__dst, (_QWORD **)&__p, 1, 0, (uint64_t)&v247);
    v122 = (uint64_t (***)())v250;
    if (v250 == (void **)&v247)
    {
      v123 = 4;
      v122 = &v247;
    }
    else
    {
      if (!v250)
        goto LABEL_237;
      v123 = 5;
    }
    (*v122)[v123]();
LABEL_237:
    v124 = __p;
    __p = 0;
    if (v124)
      (*(void (**)(void *))(*(_QWORD *)v124 + 16))(v124);
    goto LABEL_239;
  }
LABEL_286:
  if (v114 == v115 || (*(_BYTE *)(v6 + 48) & 2) == 0)
    goto LABEL_303;
  *(_QWORD *)__dst = &unk_24C460D28;
  *(_OWORD *)&__dst[8] = 0u;
  v252 = 0u;
  LODWORD(v253) = 1065353216;
  v255 = 0;
  v256 = 0;
  v254 = 0;
  v244[0] = 0;
  v151 = *(_QWORD *)(v6 + 120);
  v152 = a3[7];
  v153 = operator new(0x28uLL);
  *v153 = &off_24C46B160;
  v153[1] = v6;
  v153[2] = __dst;
  v153[3] = a3;
  v153[4] = v244;
  *(_QWORD *)&v261 = v153;
  sub_20BA2266C(v151, v152, 0, (uint64_t)&v259, 4);
  v154 = (void ***)v261;
  if ((void ***)v261 == &v259)
  {
    v155 = 4;
    v154 = &v259;
    goto LABEL_292;
  }
  if ((_QWORD)v261)
  {
    v155 = 5;
LABEL_292:
    ((void (*)(void))(*v154)[v155])();
  }
  (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v229 + 152) + 24))(*(_QWORD *)(v229 + 152), __dst);
  v157 = v254;
  v156 = v255;
  if (v254 != v255)
  {
    v158 = (unint64_t)((char *)v255 - (char *)v254) > 8;
    while (1)
    {
      sub_20B9CF270(v229, *v157, a3[6]);
      v247 = &off_24C459028;
      v248 = sub_20B9CF614;
      v250 = (void **)&v247;
      sub_20B8FDA94(a2, (_QWORD **)v157, 1, 0, (uint64_t)&v247);
      v159 = (uint64_t (***)())v250;
      if (v250 == (void **)&v247)
      {
        v159 = &v247;
        v160 = 4;
      }
      else
      {
        if (!v250)
          goto LABEL_300;
        v160 = 5;
      }
      (*v159)[v160]();
LABEL_300:
      if (v158)
      {
        ++v157;
        --v158;
        if (v157 != v156)
          continue;
      }
      break;
    }
  }
  *(_QWORD *)__dst = &unk_24C460D28;
  v259 = (void **)&v254;
  sub_20B882410(&v259);
  sub_20B84055C((uint64_t)&__dst[8]);
  v6 = v229;
LABEL_303:
  *(_QWORD *)__dst = &unk_24C460D28;
  *(_OWORD *)&__dst[8] = 0u;
  v252 = 0u;
  LODWORD(v253) = 1065353216;
  v255 = 0;
  v256 = 0;
  v254 = 0;
  v161 = *(_QWORD *)(v6 + 136);
  if (!*(_QWORD *)(v161 + 344))
    goto LABEL_327;
  v162 = a3[8];
  *(_QWORD *)&v261 = 0;
  v163 = operator new(0x20uLL);
  *v163 = &off_24C46B268;
  v163[1] = v6;
  v163[2] = __dst;
  v163[3] = a3;
  *(_QWORD *)&v261 = v163;
  sub_20B9D70B4(v161, v162, (uint64_t)&v259);
  v164 = (void ***)v261;
  if ((void ***)v261 == &v259)
  {
    v165 = 4;
    v164 = &v259;
  }
  else
  {
    if (!(_QWORD)v261)
      goto LABEL_309;
    v165 = 5;
  }
  ((void (*)(void))(*v164)[v165])();
LABEL_309:
  (*(void (**)(_QWORD, _BYTE *, uint64_t))(**(_QWORD **)(v6 + 152) + 24))(*(_QWORD *)(v6 + 152), __dst, v6);
  v166 = v254;
  v167 = v255;
  if (v254 != v255)
  {
    while (1)
    {
      v168 = *v166;
      sub_20B9CF270(v6, *v166, a3[6]);
      v169 = (unsigned __int16 *)*(unsigned __int8 *)(v168 + 55);
      v170 = (char)v169;
      if ((char)v169 < 0)
        v169 = *(unsigned __int16 **)(v168 + 40);
      if (v169 == (unsigned __int16 *)a3[5])
      {
        v171 = v170 >= 0 ? (const void *)(v168 + 32) : *(const void **)(v168 + 32);
        v172 = memcmp(v171, (const void *)a3[4], 2 * (_QWORD)v169) != 0;
      }
      else
      {
        v172 = 1;
      }
      (*(void (**)(uint64_t, _BOOL8))(*(_QWORD *)v168 + 512))(v168, v172);
      v173 = v172 ? 77 : 83;
      *(_DWORD *)(v168 + 136) = v173;
      v247 = &off_24C459028;
      v248 = sub_20B9CF614;
      v250 = (void **)&v247;
      sub_20B8FDA94(a2, (_QWORD **)v166, 1, 0, (uint64_t)&v247);
      v174 = (uint64_t (***)())v250;
      v6 = v229;
      if (v250 == (void **)&v247)
        break;
      if (v250)
      {
        v175 = 5;
LABEL_325:
        (*v174)[v175]();
      }
      if (++v166 == v167)
        goto LABEL_327;
    }
    v174 = &v247;
    v175 = 4;
    goto LABEL_325;
  }
LABEL_327:
  *(_QWORD *)__dst = &unk_24C460D28;
  v244[0] = &v254;
  sub_20B882410((void ***)v244);
  sub_20B84055C((uint64_t)&__dst[8]);
  if ((*(_BYTE *)(v6 + 50) & 4) == 0)
  {
    v176 = *(_QWORD *)(v6 + 168);
    if (v176)
    {
      v177 = atomic_load((unsigned __int8 *)(v176 + 97));
      if ((v177 & 1) == 0)
      {
        v178 = atomic_load((unsigned __int8 *)(v176 + 96));
        if ((v178 & 1) != 0)
        {
          LODWORD(v259) = 0;
          v179 = *(_QWORD *)(v6 + 168);
          v180 = a3[7];
          v181 = operator new(0x20uLL);
          *v181 = &off_24C46B420;
          v181[1] = a2;
          v181[2] = a3;
          v181[3] = &v259;
          *(_QWORD *)&v252 = v181;
          sub_20B8F62A0(v179, v180, (uint64_t)__dst, 3);
          v182 = (_QWORD *)v252;
          v6 = v229;
          if ((_BYTE *)v252 == __dst)
          {
            v183 = 4;
            v182 = __dst;
            goto LABEL_335;
          }
          if ((_QWORD)v252)
          {
            v183 = 5;
LABEL_335:
            (*(void (**)(void))(*v182 + 8 * v183))();
          }
        }
      }
    }
  }
  if ((*(_BYTE *)(v6 + 50) & 4) == 0)
  {
    v184 = *(_QWORD *)(v6 + 176);
    if (v184)
    {
      v185 = atomic_load((unsigned __int8 *)(v184 + 97));
      if ((v185 & 1) == 0)
      {
        v186 = atomic_load((unsigned __int8 *)(v184 + 96));
        if ((v186 & 1) != 0)
        {
          LODWORD(v259) = 0;
          v187 = (*(_DWORD *)(v6 + 48) & 2) == 0;
          v188 = *(_QWORD *)(v6 + 176);
          v189 = a3[7];
          v190 = operator new(0x28uLL);
          v6 = v229;
          *v190 = &off_24C46B370;
          v190[1] = v229;
          v190[2] = a2;
          v190[3] = a3;
          v190[4] = &v259;
          *(_QWORD *)&v252 = v190;
          if (v187)
            sub_20B8F5F30(v188, v189, (uint64_t)__dst);
          else
            sub_20B8F62A0(v188, v189, (uint64_t)__dst, 3);
          v191 = (_QWORD *)v252;
          if ((_BYTE *)v252 == __dst)
          {
            v192 = 4;
            v191 = __dst;
            goto LABEL_347;
          }
          if ((_QWORD)v252)
          {
            v192 = 5;
LABEL_347:
            (*(void (**)(void))(*v191 + 8 * v192))();
          }
        }
      }
    }
  }
  if ((*(_BYTE *)(v6 + 50) & 4) == 0)
  {
    v193 = *(_QWORD *)(v6 + 184);
    if (v193)
    {
      v194 = atomic_load((unsigned __int8 *)(v193 + 97));
      if ((v194 & 1) == 0)
      {
        v195 = atomic_load((unsigned __int8 *)(v193 + 96));
        if ((v195 & 1) != 0)
        {
          LODWORD(v259) = 0;
          v196 = *(_QWORD *)(v6 + 184);
          v197 = a3[7];
          v198 = operator new(0x28uLL);
          v6 = v229;
          *v198 = &off_24C46B318;
          v198[1] = v229;
          v198[2] = a2;
          v198[3] = a3;
          v198[4] = &v259;
          *(_QWORD *)&v252 = v198;
          sub_20B8F5F30(v196, v197, (uint64_t)__dst);
          v199 = (_QWORD *)v252;
          if ((_BYTE *)v252 == __dst)
          {
            v200 = 4;
            v199 = __dst;
            goto LABEL_356;
          }
          if ((_QWORD)v252)
          {
            v200 = 5;
LABEL_356:
            (*(void (**)(void))(*v199 + 8 * v200))();
          }
        }
      }
    }
  }
  v201 = *(_DWORD *)(v6 + 48);
  if ((v201 & 0x40000) != 0)
    return;
  v202 = *(_QWORD *)(v6 + 112);
  if (!v202)
    return;
  v203 = *(_QWORD **)(v202 + 8);
  if (!v203)
    return;
  v244[0] = 0;
  v244[1] = 0;
  v245 = 0;
  v204 = a3[7];
  *(_QWORD *)__dst = &off_24C46B2C0;
  *(_QWORD *)&__dst[8] = v244;
  *(_QWORD *)&__dst[16] = a3;
  *(_QWORD *)&v252 = __dst;
  if ((v201 & 2) != 0)
    sub_20B9189A8(v203, v204, (uint64_t)__dst);
  else
    sub_20B918790(v203, v204, (uint64_t)__dst);
  v205 = (_QWORD *)v252;
  if ((_BYTE *)v252 == __dst)
  {
    v206 = 4;
    v205 = __dst;
  }
  else
  {
    if (!(_QWORD)v252)
      goto LABEL_368;
    v206 = 5;
  }
  (*(void (**)(void))(*v205 + 8 * v206))();
LABEL_368:
  if (v244[0] == v244[1])
    goto LABEL_414;
  sub_20B9CF7B0((uint64_t)v244[0], (__int128 *)v244[1], 126 - 2 * __clz(0x2E8BA2E8BA2E8BA3 * (((char *)v244[1] - (char *)v244[0]) >> 3)), 1);
  v207 = 0x2E8BA2E8BA2E8BA3 * (((char *)v244[1] - (char *)v244[0]) >> 3);
  v259 = (void **)&unk_24C460D28;
  v260 = 0u;
  if (v207 >= 2)
    v207 = 2;
  v261 = 0uLL;
  v262 = 1065353216;
  v264 = 0;
  v265 = 0;
  v263 = 0;
  if (!v207)
  {
LABEL_399:
    (*(void (**)(_QWORD, void ***))(**(_QWORD **)(v229 + 152) + 24))(*(_QWORD *)(v229 + 152), &v259);
    v222 = v263;
    v221 = v264;
    if (v263 == v264)
      goto LABEL_413;
    while (1)
    {
      sub_20B9CF270(v229, *v222, a3[6]);
      *(_QWORD *)__dst = &off_24C459028;
      *(_QWORD *)&__dst[8] = sub_20B9CF614;
      *(_QWORD *)&v252 = __dst;
      sub_20B8FDA94(a2, (_QWORD **)v222, 1, 0, (uint64_t)__dst);
      v223 = (_QWORD *)v252;
      if ((_BYTE *)v252 == __dst)
        break;
      if ((_QWORD)v252)
      {
        v224 = 5;
LABEL_404:
        (*(void (**)(void))(*v223 + 8 * v224))();
      }
      if (++v222 == v221)
        goto LABEL_413;
    }
    v223 = __dst;
    v224 = 4;
    goto LABEL_404;
  }
  v208 = 0;
  v209 = 88 * v207;
  while (1)
  {
    v210 = (char *)v244[0];
    v211 = (char *)v244[0] + v208;
    if (*((char *)v244[0] + v208 + 23) < 0)
    {
      sub_20B88DD4C(__dst, *(void **)v211, *((_QWORD *)v211 + 1));
    }
    else
    {
      v212 = *(_OWORD *)v211;
      *(_QWORD *)&__dst[16] = *((_QWORD *)v211 + 2);
      *(_OWORD *)__dst = v212;
    }
    v252 = 0uLL;
    v253 = 0;
    sub_20B88DCD4(&v252, *(const void **)&v210[v208 + 24], *(_QWORD *)&v210[v208 + 32], (uint64_t)(*(_QWORD *)&v210[v208 + 32] - *(_QWORD *)&v210[v208 + 24]) >> 3);
    v254 = 0;
    v255 = 0;
    v256 = 0;
    sub_20B87ACC8(&v254, *(const void **)&v210[v208 + 48], *(_QWORD *)&v210[v208 + 56], (uint64_t)(*(_QWORD *)&v210[v208 + 56] - *(_QWORD *)&v210[v208 + 48]) >> 1);
    v213 = *(float *)&v210[v208 + 72];
    v258 = *(_WORD *)&v210[v208 + 76];
    v257 = v213;
    v214 = __dst[23] >= 0 ? __dst : *(char **)__dst;
    v215 = __dst[23] >= 0 ? __dst[23] : *(_QWORD *)&__dst[8];
    sub_20B88C9DC(v214, v215, (void *)*a3, a3[1], v258 & 1, 76, 4, 0, (uint64_t *)v241, v257);
    v216 = v241[0];
    if (!v241[0])
      break;
    v241[0] = 0;
    __p = v216;
    v247 = (uint64_t (**)())&unk_24C459188;
    v250 = (void **)&v247;
    sub_20B8FDA94(&v259, (_QWORD **)&__p, 1, 0, (uint64_t)&v247);
    v217 = (uint64_t (***)())v250;
    if (v250 == (void **)&v247)
    {
      v217 = &v247;
      v218 = 4;
      goto LABEL_387;
    }
    if (v250)
    {
      v218 = 5;
LABEL_387:
      (*v217)[v218]();
    }
    v219 = __p;
    __p = 0;
    if (v219)
      (*(void (**)(void *))(*(_QWORD *)v219 + 16))(v219);
    v220 = v241[0];
    v241[0] = 0;
    if (v220)
      (*(void (**)(void *))(*(_QWORD *)v220 + 16))(v220);
    if (v254)
    {
      v255 = v254;
      operator delete(v254);
    }
    if ((_QWORD)v252)
    {
      *((_QWORD *)&v252 + 1) = v252;
      operator delete((void *)v252);
    }
    if ((__dst[23] & 0x80000000) != 0)
      operator delete(*(void **)__dst);
    v208 += 88;
    if (v209 == v208)
      goto LABEL_399;
  }
  if (v254)
  {
    v255 = v254;
    operator delete(v254);
  }
  if ((_QWORD)v252)
  {
    *((_QWORD *)&v252 + 1) = v252;
    operator delete((void *)v252);
  }
  if ((__dst[23] & 0x80000000) != 0)
    operator delete(*(void **)__dst);
LABEL_413:
  v259 = (void **)&unk_24C460D28;
  v241[0] = &v263;
  sub_20B882410((void ***)v241);
  sub_20B84055C((uint64_t)&v260);
LABEL_414:
  v259 = v244;
  sub_20B931D88(&v259);
}

void sub_20B9CE178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,char a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,char a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (a40 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  if (a21)
    (*(void (**)(uint64_t))(*(_QWORD *)a21 + 16))(a21);
  if (a33 < 0)
    operator delete(a28);
  sub_20B881268((uint64_t)&a49);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B9CE82C(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v6[0] = &off_24C46B1B8;
  v6[1] = a2;
  v7 = v6;
  sub_20B88D3F4(a1, a2, a3, (uint64_t)v6, a4, 0);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_20B9CE8C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B9CE904(uint64_t a1, const __CFString *a2)
{
  char *v2;
  uint64_t v3;
  void **v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *__p[2];
  unsigned __int8 v11;
  uint64_t v12;
  void *v13;
  _BYTE *v14;

  sub_20B8D0790(a2, (UniChar **)&v13);
  v2 = (char *)v13;
  v3 = (v14 - (_BYTE *)v13) >> 1;
  sub_20B9DEF34((unsigned __int16 *)v13, v3, __p);
  if ((v11 & 0x80u) == 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if ((v11 & 0x80u) == 0)
    v5 = v11;
  else
    v5 = (unint64_t)__p[1];
  sub_20B88C9DC(v2, v3, v4, v5, 0, 0, 4, 1, &v12, 0.0);
  if ((char)v11 < 0)
    operator delete(__p[0]);
  v6 = v12;
  *(_BYTE *)(v12 + 152) = 0;
  v12 = 0;
  v7 = sub_20B8E1754(v6);
  v8 = v12;
  v12 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
  if (v13)
  {
    v14 = v13;
    operator delete(v13);
  }
  return v7;
}

void sub_20B9CE9E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (a16)
    (*(void (**)(uint64_t))(*(_QWORD *)a16 + 16))(a16);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B9CEA38(uint64_t a1, const char *a2, void *a3)
{
  void *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  const __CFString *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  const __CFString *v15;

  if (!a3)
    return 0;
  v4 = *(void **)(*(_QWORD *)(a1 + 112) + 104);
  if (!v4)
    return 0;
  v5 = objc_msgSend_rawCandidate(a3, a2, (uint64_t)a3);
  v8 = (const __CFString *)v5;
  if (v5)
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    v10 = 40;
    if (!v9)
      v10 = 24;
    v8 = (const __CFString *)(*(uint64_t (**)(const __CFString *))((char *)v8->isa + v10))(v8);
  }
  v11 = objc_msgSend_rawCandidate(v4, v6, v7);
  if (v11)
  {
    v12 = (_QWORD *)v11;
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
    v14 = 40;
    if (!v13)
      v14 = 24;
    v15 = (const __CFString *)(*(uint64_t (**)(_QWORD *))(*v12 + v14))(v12);
  }
  else
  {
    v15 = 0;
  }
  if (CFStringCompare(v8, v15, 0) == kCFCompareEqualTo)
    return sub_20B9730D8(*(_QWORD *)(a1 + 112));
  else
    return 0;
}

uint64_t sub_20B9CEB20(uint64_t a1)
{
  uint64_t result;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 112) + 80))(*(_QWORD *)(a1 + 112));
  result = **(_QWORD **)(a1 + 104);
  if (result)
    return LXVulgarWordUsageDatabasePerformMaintenance();
  return result;
}

void sub_20B9CEB68(_QWORD *a1)
{
  uint64_t v2;
  CFURLRef v3;
  CFURLRef v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const __CFString *v10;
  _QWORD *v11;
  const __CFString *v12;
  _QWORD *v13;
  void *__p[2];
  char v15;
  uint64_t v16;

  v2 = a1[7];
  if (!*(_BYTE *)(v2 + 7))
    goto LABEL_11;
  v3 = CFURLCreateWithFileSystemPath(0, *(CFStringRef *)(v2 + 136), kCFURLPOSIXPathStyle, 1u);
  __p[0] = v3;
  if (v3)
  {
    v4 = v3;
    sub_20B9F4098(v3, CFSTR("ko.rnnlm"), CFSTR("ko"), &v16);
    v5 = v16;
    if (v16)
    {
      v16 = 0;
      v6 = a1[12];
      a1[12] = v5;
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
        v7 = a1[12];
        v6 = v16;
      }
      else
      {
        v7 = v5;
      }
      *(_QWORD *)(*(_QWORD *)(a1[19] + 16) + 8) = v7;
      v8 = a1[20];
      v9 = a1[12];
      *(_QWORD *)(v8 + 16) = v9;
      *(_QWORD *)(*(_QWORD *)(v8 + 24) + 16) = v9;
      *(_BYTE *)(a1[7] + 7) = 0;
      v16 = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    }
    CFRelease(v4);
    if (v5)
    {
      v2 = a1[7];
LABEL_11:
      v10 = *(const __CFString **)(v2 + 152);
      if (v10)
      {
        v11 = (_QWORD *)a1[18];
        sub_20B8D1C98(v10, __p);
        sub_20B9D6BF4(v11, (char *)__p);
        if (v15 < 0)
          operator delete(__p[0]);
        *(_QWORD *)(a1[19] + 24) = a1[18];
        *(_QWORD *)(a1[20] + 40) = a1[18];
        v2 = a1[7];
      }
      v12 = *(const __CFString **)(v2 + 144);
      if (v12)
      {
        v13 = (_QWORD *)a1[17];
        sub_20B8D1C98(v12, __p);
        sub_20B9D6BF4(v13, (char *)__p);
        if (v15 < 0)
          operator delete(__p[0]);
      }
    }
  }
}

void sub_20B9CECD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B9CED08(uint64_t a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;

  if (a2)
  {
    v4 = operator new();
    *(_OWORD *)(v4 + 8) = 0u;
    *(_OWORD *)(v4 + 24) = 0u;
    *(_OWORD *)(v4 + 40) = 0u;
    *(_OWORD *)(v4 + 56) = 0u;
    *(_OWORD *)(v4 + 72) = 0u;
    *(_DWORD *)(v4 + 88) = 1065353216;
    *(_WORD *)(v4 + 96) = 0;
    *(_QWORD *)(v4 + 104) = 0;
    *(_DWORD *)(v4 + 112) = 2;
    *(_QWORD *)(v4 + 120) = 0;
    *(_QWORD *)v4 = &unk_24C462890;
    v5 = *(_QWORD *)(a1 + 176);
    *(_QWORD *)(a1 + 176) = v4;
    if (v5)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      v4 = *(_QWORD *)(a1 + 176);
    }
    sub_20B8F4AC4(v4, a2, *(unsigned __int8 *)(a1 + 208));
  }
}

void sub_20B9CEDB4(uint64_t a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;

  if (a2)
  {
    v4 = operator new();
    *(_OWORD *)(v4 + 8) = 0u;
    *(_OWORD *)(v4 + 24) = 0u;
    *(_OWORD *)(v4 + 40) = 0u;
    *(_OWORD *)(v4 + 56) = 0u;
    *(_OWORD *)(v4 + 72) = 0u;
    *(_DWORD *)(v4 + 88) = 1065353216;
    *(_WORD *)(v4 + 96) = 0;
    *(_QWORD *)(v4 + 104) = 0;
    *(_DWORD *)(v4 + 112) = 1;
    *(_QWORD *)(v4 + 120) = 0;
    *(_QWORD *)v4 = &unk_24C462890;
    v5 = *(_QWORD *)(a1 + 184);
    *(_QWORD *)(a1 + 184) = v4;
    if (v5)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      v4 = *(_QWORD *)(a1 + 184);
    }
    sub_20B8F4AC4(v4, a2, *(unsigned __int8 *)(a1 + 208));
  }
}

void sub_20B9CEE60(uint64_t a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;

  if (a2)
  {
    v4 = operator new();
    *(_OWORD *)(v4 + 8) = 0u;
    *(_OWORD *)(v4 + 24) = 0u;
    *(_OWORD *)(v4 + 40) = 0u;
    *(_OWORD *)(v4 + 56) = 0u;
    *(_OWORD *)(v4 + 72) = 0u;
    *(_DWORD *)(v4 + 88) = 1065353216;
    *(_WORD *)(v4 + 96) = 0;
    *(_QWORD *)(v4 + 104) = 0;
    *(_DWORD *)(v4 + 112) = 3;
    *(_QWORD *)(v4 + 120) = 0;
    *(_QWORD *)v4 = &unk_24C462890;
    v5 = *(_QWORD *)(a1 + 168);
    *(_QWORD *)(a1 + 168) = v4;
    if (v5)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      v4 = *(_QWORD *)(a1 + 168);
    }
    sub_20B8F4AC4(v4, a2, *(unsigned __int8 *)(a1 + 208));
  }
}

uint64_t sub_20B9CEF0C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  __n128 (*v14)(_QWORD *, uint64_t);
  uint64_t (*v15)(uint64_t);
  void *v16;
  _OWORD v17[2];
  int v18;
  _QWORD v19[3];
  void **v20;

  v11 = 0;
  v12 = &v11;
  v13 = 0x7002000000;
  v14 = sub_20B9CBE4C;
  v15 = sub_20B9CBEA8;
  v16 = &unk_24C460D28;
  memset(v17, 0, sizeof(v17));
  v18 = 1065353216;
  memset(v19, 0, sizeof(v19));
  v3 = *(_QWORD *)(a1 + 168);
  v10[0] = MEMORY[0x24BDAC760];
  v10[1] = 0x40000000;
  v10[2] = sub_20B9CF0A0;
  v10[3] = &unk_24C4A0200;
  v10[4] = &v11;
  sub_20B9B53D8(v3, a2, (uint64_t)v10);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 56))(*(_QWORD *)(a1 + 72));
  v4 = (uint64_t *)v12[11];
  v5 = (uint64_t *)v12[12];
  while (v4 != v5)
  {
    v6 = *v4;
    *v4 = 0;
    v7 = (void *)sub_20B8E1754(v6);
    (*(void (**)(_QWORD, void *))(**(_QWORD **)(a1 + 72) + 16))(*(_QWORD *)(a1 + 72), v7);

    ++v4;
  }
  (*(void (**)(_QWORD, uint64_t (*)(void *, char *, uint64_t), uint64_t))(**(_QWORD **)(a1 + 72)
                                                                                           + 32))(*(_QWORD *)(a1 + 72), sub_20B935CB0, 1);
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
  _Block_object_dispose(&v11, 8);
  v16 = &unk_24C460D28;
  v20 = (void **)v19;
  sub_20B882410(&v20);
  sub_20B84055C((uint64_t)v17);
  return v8;
}

void sub_20B9CF078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  sub_20B881268(v6 + 40);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9CF0A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  CFNumberRef v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t result;
  int v12[2];
  _QWORD *valuePtr;
  _QWORD v14[3];
  _QWORD *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  sub_20B88C9DC(*(char **)(a2 + 16), *(_QWORD *)(a2 + 24), *(void **)(a2 + 16), *(_QWORD *)(a2 + 24), 0, 89, 4, 0, (uint64_t *)v12, 0.0);
  v4 = *(_QWORD *)v12;
  valuePtr = (_QWORD *)*(unsigned __int16 *)(a2 + 32);
  v5 = CFNumberCreate(0, kCFNumberCFIndexType, &valuePtr);
  sub_20B88AE28((const void **)(v4 + 120), v5);
  sub_20B959CC0(*(uint64_t *)v12, *(char **)(a2 + 40), *(_QWORD *)(a2 + 48));
  v6 = *(_QWORD **)v12;
  *(_BYTE *)(*(_QWORD *)v12 + 152) = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  *(_QWORD *)v12 = 0;
  valuePtr = v6;
  v14[0] = &unk_24C459188;
  v15 = v14;
  sub_20B8FDA94((_QWORD *)(v7 + 40), &valuePtr, 1, 0, (uint64_t)v14);
  v8 = v15;
  if (v15 == v14)
  {
    v9 = 4;
    v8 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_6;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_6:
  v10 = valuePtr;
  valuePtr = 0;
  if (v10)
    (*(void (**)(_QWORD *))(*v10 + 16))(v10);
  result = *(_QWORD *)v12;
  *(_QWORD *)v12 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

void sub_20B9CF1F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 16))(a11);
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 16))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B9CF270(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v6;
  unsigned __int16 *v7;
  int v8;
  unsigned __int16 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  int v15;
  int v16;
  _BOOL4 v17;
  _BYTE *v18;
  BOOL v19;
  int v20;
  _BYTE *v21;
  uint64_t v22;
  unsigned __int16 *v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned __int16 *v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  BOOL v36;
  unsigned __int16 *v37;
  uint64_t v38;
  unsigned __int16 *v39;
  uint64_t v40;
  int v41;
  _BOOL4 v42;
  unsigned int v43;
  void *__p;
  uint64_t v46;
  unsigned __int8 v47;

  v3 = a3;
  v6 = *(_DWORD *)(a1 + 48);
  v7 = (unsigned __int16 *)(a2 + 32);
  v8 = *(char *)(a2 + 55);
  if (v8 >= 0)
    v9 = (unsigned __int16 *)(a2 + 32);
  else
    v9 = *(unsigned __int16 **)(a2 + 32);
  if (v8 >= 0)
    v10 = *(unsigned __int8 *)(a2 + 55);
  else
    v10 = *(_QWORD *)(a2 + 40);
  if (!v10)
    goto LABEL_27;
  v11 = 0;
  v12 = 2 * v10;
  v13 = 2 * v10;
  v14 = v9;
  do
  {
    v16 = *v14++;
    v15 = v16;
    v17 = v16 == 45;
    if (v16 == 45)
      v18 = &unk_20BA58EB4;
    else
      v18 = 0;
    v19 = v15 == 39;
    v20 = v15 == 39 || v17;
    if (v19)
      v21 = &unk_20BA58EB2;
    else
      v21 = v18;
    LODWORD(v22) = v20 ^ 1;
    if (v21 - (_BYTE *)&unk_20BA58EB2 == -2)
      v22 = 1;
    else
      v22 = v22;
    v11 += v22;
    v13 -= 2;
  }
  while (v13);
  v23 = v9;
  while ((*v23 & 0xFFDFu) - 65 > 0x19)
  {
    ++v23;
    v12 -= 2;
    if (!v12)
      goto LABEL_27;
  }
  v24 = a3;
  if (v11 != a3)
  {
LABEL_27:
    sub_20B9DEF34(v9, v10, &__p);
    if ((v47 & 0x80u) == 0)
      v24 = v47;
    else
      v24 = v46;
    if ((char)v47 < 0)
      operator delete(__p);
  }
  v25 = v24 - v3;
  v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2);
  switch(v27)
  {
    case 'G':
    case 'O':
    case 'V':
      if (*(_QWORD *)(a1 + 96))
      {
        if (v25 >= 1)
        {
          LODWORD(v26) = v26 + 3600 * v25;
          if (v10)
          {
            if (v27 == 71)
            {
              v28 = 2 * v10;
              v29 = v9;
              while ((*v29 & 0xFFDFu) - 65 > 0x19)
              {
                ++v29;
                v28 -= 2;
                if (!v28)
                  goto LABEL_84;
              }
              LODWORD(v26) = v26 + 2000;
            }
          }
        }
LABEL_84:
        v42 = sub_20B9DF4A0((uint64_t)v9, v10);
        v43 = v26 + 2000;
        goto LABEL_85;
      }
      v26 = 15000;
      goto LABEL_88;
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'N':
    case 'P':
    case 'Q':
    case 'R':
    case 'T':
    case 'W':
      goto LABEL_88;
    case 'L':
      if (*(_QWORD *)(a1 + 96)
        && (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2) & 1) != 0 || (v6 & 0x2000) != 0))
      {
        if (v25 >= 1)
          v26 = (v26 + 3000 * v25);
        else
          v26 = (v26 - 3000 * v10);
      }
      else
      {
        v26 = 5000;
      }
      goto LABEL_88;
    case 'M':
      if (*(_QWORD *)(a1 + 96))
      {
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2) & 1) != 0)
          v26 = v26;
        else
          v26 = (v26 - 16500 * v10);
      }
      else
      {
        v26 = 11000;
      }
      goto LABEL_88;
    case 'S':
      v35 = *(char *)(a2 + 55);
      v36 = v35 < 0;
      v37 = *(unsigned __int16 **)(a2 + 32);
      if (v35 >= 0)
        v37 = v7;
      v38 = *(unsigned __int8 *)(a2 + 55);
      if (v36)
        v38 = *(_QWORD *)(a2 + 40);
      if (!v38)
        goto LABEL_71;
      v39 = &v37[v38];
      break;
    case 'U':
      v34 = (int)(*(float *)(a2 + 96) * -4400.0);
      v31 = 7000;
      goto LABEL_75;
    case 'X':
      v41 = 3600 * v25;
      if (v25 <= 0)
        v41 = 0;
      LODWORD(v26) = v41 + v26;
      v42 = sub_20B9DF4A0((uint64_t)v9, v10);
      v43 = v26 + 16000;
LABEL_85:
      if (v42)
        v26 = v43;
      else
        v26 = v26;
      goto LABEL_88;
    default:
      if (v27 != 65)
        goto LABEL_88;
      if ((int)v10 <= 2)
        v30 = 25000;
      else
        v30 = 20000;
      v31 = (int)(*(float *)(a2 + 96) * -4400.0);
      if ((int)v10 <= 2)
        v32 = 5000;
      else
        v32 = 3000;
      v33 = v32 * v25;
      if (v25 <= 0)
        v33 = 0;
      v34 = v33 + v30;
LABEL_75:
      v26 = (v34 + v31);
      goto LABEL_88;
  }
  do
  {
    v40 = 0;
    while (*(unsigned __int16 *)&a112141718191a1[v40] != *v37)
    {
      v40 += 2;
      if (v40 == 38)
        goto LABEL_88;
    }
    ++v37;
  }
  while (v37 != v39);
LABEL_71:
  if ((v6 & 0x2000) != 0)
    v26 = (v26 - 4000);
  else
    v26 = (v26 - 9500 * v10);
LABEL_88:
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2) & 1) == 0)
    *(_DWORD *)(a2 + 136) = 83;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 480))(a2, v26);
}

BOOL sub_20B9CF614(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  void *__p;
  void *v9;
  uint64_t v10;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  if (v4 > v5)
  {
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 304))(a1);
    v9 = 0;
    v10 = 0;
    __p = 0;
    sub_20B882248(&__p, *(const void **)v6, *(_QWORD *)(v6 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 3));
    (*(void (**)(uint64_t, void **))(*(_QWORD *)a2 + 520))(a2, &__p);
    if (__p)
    {
      v9 = __p;
      operator delete(__p);
    }
  }
  return v4 > v5;
}

void sub_20B9CF6D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_20B9CF6F0(uint64_t a1, const __CFArray *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _BOOL8 result;

  v4 = *(_QWORD *)(a1 + 192);
  if (v4)
  {
    v5 = *(_QWORD **)(v4 + 8);
    if (v5)
    {
      if (sub_20B911EF0(v5))
        sub_20B919FDC(*(_QWORD *)(a1 + 192), a2);
    }
  }
  v6 = *(_QWORD *)(a1 + 200);
  if (v6)
  {
    v7 = *(_QWORD **)(v6 + 8);
    if (v7)
    {
      if (sub_20B911EF0(v7))
        sub_20B919FDC(*(_QWORD *)(a1 + 200), a2);
    }
  }
  result = sub_20B9DFAC8((_BOOL8)a2);
  *(_BYTE *)(a1 + 209) = result;
  return result;
}

void sub_20B9CF764(const void **a1, CFTypeRef cf)
{
  if (*a1 != cf)
  {
    CFRetain(cf);
    sub_20B930A90(a1, cf);
  }
}

void sub_20B9CF7B0(uint64_t a1, __int128 *a2, uint64_t a3, char a4)
{
  __int128 *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 *v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  __int128 v17;
  int v18;
  int v19;
  unint64_t v20;
  __int128 *v21;
  __int128 *v22;
  int v23;
  __int128 *v24;
  int v25;
  unint64_t v26;
  __int128 *v27;
  int v28;
  int v29;
  int v30;
  __int128 *v31;
  BOOL v32;
  __int128 v33;
  int v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  int v38;
  __int128 *v39;
  __int128 *v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  __int128 v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  int64_t v61;
  int64_t v62;
  int64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  uint64_t v69;
  __int128 v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  int64_t v76;
  uint64_t v77;
  __int128 v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  uint64_t v87;
  unint64_t v88;
  int v89;
  __int128 v90;
  int v91;
  uint64_t v92;
  uint64_t v94;
  uint64_t v95;
  int v96;
  __int128 v97;
  uint64_t v98;
  int v99;
  void *v101[2];
  uint64_t v102;
  void *v103[2];
  uint64_t v104;
  void *v105[2];
  uint64_t v106;
  int v107;
  __int16 v108;
  int v109;
  void *v110[2];
  uint64_t v111;
  void *v112[2];
  uint64_t v113;
  void *__p[2];
  uint64_t v115;
  int v116;
  __int16 v117;
  int v118;

BOOL sub_20B9D03E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  void *v22[2];
  uint64_t v23;
  void *v24[2];
  uint64_t v25;
  void *__p[2];
  uint64_t v27;
  int v28;
  __int16 v29;
  int v30;

  v4 = 0x2E8BA2E8BA2E8BA3 * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(_DWORD *)(a2 - 8) > *(_DWORD *)(a1 + 80))
      {
        sub_20B931AE8((uint64_t *)a1, (__int128 *)(a2 - 88));
        v6 = *(_DWORD *)(a1 + 80);
        *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 - 8);
        *(_DWORD *)(a2 - 8) = v6;
        return 1;
      }
      return result;
    case 3:
      sub_20B9316FC(a1, a1 + 88, a2 - 88);
      return 1;
    case 4:
      sub_20B931C54(a1, a1 + 88, a1 + 176, a2 - 88);
      return 1;
    case 5:
      sub_20B931C54(a1, a1 + 88, a1 + 176, a1 + 264);
      if (*(_DWORD *)(a2 - 8) > *(_DWORD *)(a1 + 344))
      {
        sub_20B931AE8((uint64_t *)(a1 + 264), (__int128 *)(a2 - 88));
        v16 = *(_DWORD *)(a1 + 344);
        *(_DWORD *)(a1 + 344) = *(_DWORD *)(a2 - 8);
        *(_DWORD *)(a2 - 8) = v16;
        if (*(_DWORD *)(a1 + 344) > *(_DWORD *)(a1 + 256))
        {
          sub_20B931AE8((uint64_t *)(a1 + 176), (__int128 *)(a1 + 264));
          v17 = *(_DWORD *)(a1 + 256);
          v18 = *(_DWORD *)(a1 + 344);
          *(_DWORD *)(a1 + 256) = v18;
          *(_DWORD *)(a1 + 344) = v17;
          if (v18 > *(_DWORD *)(a1 + 168))
          {
            sub_20B931AE8((uint64_t *)(a1 + 88), (__int128 *)(a1 + 176));
            v19 = *(_DWORD *)(a1 + 168);
            v20 = *(_DWORD *)(a1 + 256);
            *(_DWORD *)(a1 + 168) = v20;
            *(_DWORD *)(a1 + 256) = v19;
            if (v20 > *(_DWORD *)(a1 + 80))
            {
              sub_20B931AE8((uint64_t *)a1, (__int128 *)(a1 + 88));
              v21 = *(_DWORD *)(a1 + 80);
              *(_DWORD *)(a1 + 80) = *(_DWORD *)(a1 + 168);
              *(_DWORD *)(a1 + 168) = v21;
            }
          }
        }
      }
      return 1;
    default:
      v7 = a1 + 176;
      sub_20B9316FC(a1, a1 + 88, a1 + 176);
      v8 = a1 + 264;
      if (a1 + 264 == a2)
        return 1;
      v9 = 0;
      v10 = 0;
      break;
  }
  while (1)
  {
    v11 = *(_DWORD *)(v8 + 80);
    if (v11 > *(_DWORD *)(v7 + 80))
    {
      *(_OWORD *)v22 = *(_OWORD *)v8;
      v23 = *(_QWORD *)(v8 + 16);
      *(_QWORD *)v8 = 0;
      *(_QWORD *)(v8 + 8) = 0;
      *(_OWORD *)v24 = *(_OWORD *)(v8 + 24);
      v25 = *(_QWORD *)(v8 + 40);
      *(_QWORD *)(v8 + 16) = 0;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_QWORD *)(v8 + 40) = 0;
      *(_OWORD *)__p = *(_OWORD *)(v8 + 48);
      v27 = *(_QWORD *)(v8 + 64);
      *(_QWORD *)(v8 + 56) = 0;
      *(_QWORD *)(v8 + 64) = 0;
      *(_QWORD *)(v8 + 48) = 0;
      v12 = *(_DWORD *)(v8 + 72);
      v29 = *(_WORD *)(v8 + 76);
      v28 = v12;
      v13 = v9;
      v30 = v11;
      while (1)
      {
        sub_20B931D0C(a1 + v13 + 264, (__int128 *)(a1 + v13 + 176));
        if (v13 == -176)
          break;
        v14 = *(_DWORD *)(a1 + v13 + 168);
        v13 -= 88;
        if (v30 <= v14)
        {
          v15 = a1 + v13 + 264;
          goto LABEL_13;
        }
      }
      v15 = a1;
LABEL_13:
      sub_20B931D0C(v15, (__int128 *)v22);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (v24[0])
      {
        v24[1] = v24[0];
        operator delete(v24[0]);
      }
      if (SHIBYTE(v23) < 0)
        operator delete(v22[0]);
      if (++v10 == 8)
        return v8 + 88 == a2;
    }
    v7 = v8;
    v9 += 88;
    v8 += 88;
    if (v8 == a2)
      return 1;
  }
}

void sub_20B9D06DC()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B9D06F0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C469530;
  result[1] = v3;
  return result;
}

uint64_t sub_20B9D0724(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C469530;
  a2[1] = v2;
  return result;
}

uint64_t sub_20B9D0740(uint64_t a1, unsigned __int16 *a2)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*a2);
}

uint64_t sub_20B9D074C(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45EB70))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B9D0788()
{
  return &unk_24C45EB70;
}

void sub_20B9D0798()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B9D07AC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C46B1B8;
  result[1] = v3;
  return result;
}

uint64_t sub_20B9D07E0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C46B1B8;
  a2[1] = v2;
  return result;
}

void sub_20B9D07FC(uint64_t a1, uint64_t *a2, const UniChar **a3, CFIndex *a4, double *a5, uint64_t *a6)
{
  uint64_t v7;
  UniChar *v8;
  unint64_t v9;
  double v10;
  uint64_t v11;
  CFStringRef v12;

  v7 = *a2;
  v8 = (UniChar *)*a3;
  v9 = *a4;
  v10 = *a5;
  v11 = *a6;
  v12 = CFStringCreateWithCharacters(0, *a3, *a4);
  LXLatticeAddNode();
  sub_20B9D0908(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56), v7, v8, v9, v11, v10);
  if (v12)
    CFRelease(v12);
}

void sub_20B9D08A4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B9D08C0(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45F0F0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B9D08FC()
{
  return &unk_24C45F0F0;
}

uint64_t sub_20B9D0908(uint64_t a1, uint64_t a2, void *__src, unint64_t a4, uint64_t a5, double a6)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t result;
  uint64_t v14;
  double v15;
  unint64_t v16;
  void *v17;

  v16 = a4;
  v17 = __src;
  v15 = a6;
  v14 = a5;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = v6 + 24 * a2;
  v9 = *(_QWORD *)(v7 + 8);
  v8 = *(_QWORD *)(v7 + 16);
  v10 = (_QWORD *)(v7 + 8);
  if (v9 >= v8)
  {
    result = sub_20B9D09B0((uint64_t *)(v6 + 24 * a2), &v17, &v16, (uint64_t *)&v15, &v14);
  }
  else
  {
    sub_20B877ED0((_QWORD *)v9, __src, a4);
    *(double *)(v9 + 24) = a6;
    *(_QWORD *)(v9 + 32) = a5;
    result = v9 + 40;
    *v10 = v9 + 40;
  }
  *v10 = result;
  return result;
}

void sub_20B9D09A8(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;

  *v2 = v1;
  _Unwind_Resume(a1);
}

uint64_t sub_20B9D09B0(uint64_t *a1, void **a2, unint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t *v26;

  v6 = *a1;
  v7 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v8 = v7 + 1;
  if (v7 + 1 > 0x666666666666666)
    sub_20B80CDD8();
  v13 = (uint64_t)(a1 + 2);
  v14 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v6) >> 3);
  if (2 * v14 > v8)
    v8 = 2 * v14;
  if (v14 >= 0x333333333333333)
    v15 = 0x666666666666666;
  else
    v15 = v8;
  v26 = a1 + 2;
  if (v15)
    v16 = (char *)sub_20B882310(v13, v15);
  else
    v16 = 0;
  v22 = v16;
  v23 = &v16[40 * v7];
  v24 = v23;
  v25 = &v16[40 * v15];
  v17 = *a4;
  v18 = *a5;
  sub_20B877ED0(v23, *a2, *a3);
  v19 = v23;
  *((_QWORD *)v23 + 3) = v17;
  *((_QWORD *)v19 + 4) = v18;
  v24 += 40;
  sub_20B9D0AF4(a1, &v22);
  v20 = a1[1];
  sub_20B9D0CC0((uint64_t)&v22);
  return v20;
}

void sub_20B9D0AE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B9D0CC0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9D0AF4(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20B9D0B68((uint64_t)(a1 + 2), a1[1], (__int128 *)a1[1], *a1, (__int128 *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20B9D0B68(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, __int128 *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  void **v9;
  _BYTE *v10;
  __int128 *v11;
  __int128 v12;
  uint64_t v13;
  _QWORD v15[3];
  char v16;
  __int128 v17;
  __int128 v18;

  v7 = a7;
  *(_QWORD *)&v18 = a6;
  *((_QWORD *)&v18 + 1) = a7;
  v17 = v18;
  v15[0] = a1;
  v15[1] = &v17;
  v15[2] = &v18;
  v16 = 0;
  if (a3 == a5)
  {
    v13 = a6;
  }
  else
  {
    v9 = (void **)a3;
    do
    {
      v10 = (_BYTE *)(v7 - 40);
      v11 = (__int128 *)(v9 - 5);
      if (*((char *)v9 - 17) < 0)
      {
        sub_20B88DD4C(v10, *(v9 - 5), (unint64_t)*(v9 - 4));
      }
      else
      {
        v12 = *v11;
        *(_QWORD *)(v7 - 24) = *(v9 - 3);
        *(_OWORD *)v10 = v12;
      }
      *(_OWORD *)(v7 - 16) = *((_OWORD *)v9 - 1);
      v7 = *((_QWORD *)&v18 + 1) - 40;
      *((_QWORD *)&v18 + 1) -= 40;
      v9 -= 5;
    }
    while (v11 != a5);
    v13 = v18;
  }
  v16 = 1;
  sub_20B9D0C48((uint64_t)v15);
  return v13;
}

void sub_20B9D0C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B9D0C48((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9D0C48(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20B9D0C7C(a1);
  return a1;
}

void sub_20B9D0C7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 40;
  }
}

uint64_t sub_20B9D0CC0(uint64_t a1)
{
  sub_20B9D0CF4(a1, *(void ***)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20B9D0CF4(uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 5;
      *(_QWORD *)(a1 + 16) = v2 - 5;
      if (*((char *)v2 - 17) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

void sub_20B9D0D4C()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B9D0D60(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x68uLL);
  *(_QWORD *)v2 = &off_24C46B210;
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_20B9D0DC0(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a2 = &off_24C46B210;
  v2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  result = *(__n128 *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  v5 = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 72) = v5;
  *(_OWORD *)(a2 + 56) = v4;
  *(__n128 *)(a2 + 40) = result;
  return result;
}

void sub_20B9D0E08(uint64_t a1, CFTypeRef *a2, _BYTE *a3)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  const void *v10;
  _BOOL4 v11;
  unint64_t v12;
  unint64_t v13;
  unsigned __int16 **v14;
  unint64_t v15;
  unsigned __int16 *v16;
  int v17;
  uint64_t v18;
  int v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  BOOL v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  unint64_t v32;
  double v33;
  unint64_t v34;
  char *v35;
  float v36;
  uint64_t v37;
  double v38;
  double v39;
  double v40;
  int v41;
  void *v42;
  unint64_t v43;
  uint64_t v44;
  __int128 v45;
  int v46;
  _QWORD *v47;
  __int128 *v48;
  uint64_t v49;
  _QWORD *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  CFTypeRef v55;
  _QWORD *v56;
  uint64_t v57[17];
  CFTypeRef cf;
  int8x16_t v59;
  __int128 v60;
  _QWORD v61[3];
  __int16 v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  __n128 (*v94)(_QWORD *, uint64_t);
  void (*v95)(uint64_t);
  void *__p;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  __n128 (*v102)(uint64_t, uint64_t);
  void (*v103)(uint64_t);
  void *v104;
  uint64_t v105;
  uint64_t v106;
  __int128 __dst;
  uint64_t v108;
  __int128 *p_dst;
  uint64_t v110;

  v110 = *MEMORY[0x24BDAC8D0];
  v55 = 0;
  sub_20B952228(&v55, *a2);
  v4 = *(_QWORD *)(a1 + 48);
  v99 = 0;
  v100 = &v99;
  v101 = 0x4002000000;
  v102 = sub_20B9D1600;
  v103 = sub_20B9D161C;
  v105 = 0;
  v106 = 0;
  v104 = 0;
  v91 = 0;
  v92 = &v91;
  v93 = 0x4002000000;
  v94 = sub_20B9D1630;
  v95 = sub_20B9D1654;
  v98 = 0;
  __p = 0;
  v97 = 0;
  v87 = 0;
  v88 = &v87;
  v89 = 0x2000000000;
  v90 = 0;
  v83 = 0;
  v84 = &v83;
  v85 = 0x2000000000;
  v86 = 0;
  v79 = 0;
  v80 = &v79;
  v81 = 0x2000000000;
  v82 = 1;
  v75 = 0;
  v76 = &v75;
  v77 = 0x2000000000;
  v78 = 1;
  v71 = 0;
  v72 = &v71;
  v73 = 0x2000000000;
  v74 = 0;
  v67 = 0;
  v68 = &v67;
  v69 = 0x2000000000;
  v70 = 0;
  v63 = 0;
  v64 = &v63;
  v65 = 0x2000000000;
  v66 = 86;
  v61[0] = 0;
  v61[1] = v61;
  v61[2] = 0x2000000000;
  v62 = 0;
  v57[1] = MEMORY[0x24BDAC760];
  v57[2] = 1174405120;
  v57[3] = (uint64_t)sub_20B9D166C;
  v57[4] = (uint64_t)&unk_24C4A0228;
  v5 = *(_QWORD *)(a1 + 8);
  v57[5] = (uint64_t)v61;
  v57[6] = (uint64_t)&v71;
  v57[15] = v4;
  v57[16] = v5;
  v57[7] = (uint64_t)&v91;
  cf = 0;
  sub_20B952228(&cf, v55);
  v6 = *(_OWORD *)(a1 + 32);
  v59 = vextq_s8(*(int8x16_t *)(a1 + 16), *(int8x16_t *)(a1 + 16), 8uLL);
  v60 = v6;
  v57[8] = (uint64_t)&v63;
  v57[9] = (uint64_t)&v67;
  v57[10] = (uint64_t)&v99;
  v57[11] = (uint64_t)&v87;
  v57[12] = (uint64_t)&v83;
  v57[13] = (uint64_t)&v79;
  v57[14] = (uint64_t)&v75;
  LXAnalyzerCandidateEnumerateMorphemeLexiconEntriesAndLengths();
  if (*((_BYTE *)v72 + 24))
    goto LABEL_2;
  v7 = *((unsigned __int8 *)v100 + 63);
  v8 = (char)v7;
  if ((v7 & 0x80u) != 0)
    v7 = v100[6];
  v9 = *(_QWORD *)(a1 + 56);
  if (v7 == *(_QWORD *)(v9 + 40))
  {
    if (v8 >= 0)
      v10 = v100 + 5;
    else
      v10 = (const void *)v100[5];
    v11 = memcmp(v10, *(const void **)(v9 + 32), 2 * v7) != 0;
  }
  else
  {
    v11 = 1;
  }
  sub_20B951E38(&__dst);
  if (SHIBYTE(v108) < 0)
  {
    v12 = *((_QWORD *)&__dst + 1);
    operator delete((void *)__dst);
  }
  else
  {
    v12 = HIBYTE(v108);
  }
  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  if (!v11)
  {
    v19 = 83;
    goto LABEL_31;
  }
  if (*((_DWORD *)v64 + 6) != 73)
  {
    if (v12 >= v13 || **(_BYTE **)(a1 + 64))
    {
      if (*((_BYTE *)v68 + 24))
      {
        if (LXAnalyzerCandidateGetMorphemeCount() == 1)
          v46 = 71;
        else
          v46 = 79;
        *((_DWORD *)v64 + 6) = v46;
      }
      goto LABEL_32;
    }
    v19 = 81;
LABEL_31:
    *((_DWORD *)v64 + 6) = v19;
    goto LABEL_32;
  }
  if (**(_BYTE **)(a1 + 40))
  {
    v14 = *(unsigned __int16 ***)(a1 + 8);
    v15 = (unint64_t)v14[1];
    if (v15 >= 2)
    {
      v16 = *v14;
      v17 = v16[v15 - 1];
      v18 = 2 * v15;
      while (v17 == *v16)
      {
        ++v16;
        v18 -= 2;
        if (!v18)
          goto LABEL_2;
      }
    }
  }
LABEL_32:
  v20 = *(_QWORD **)(v4 + 144);
  if (v20)
  {
    v21 = *((char *)v100 + 63);
    if (v21 >= 0)
      v22 = (uint64_t)(v100 + 5);
    else
      v22 = v100[5];
    if (v21 >= 0)
      v23 = *((unsigned __int8 *)v100 + 63);
    else
      v23 = v100[6];
    LOBYTE(v20) = sub_20B9D72A8(v20, v22, v23, v12 > v13);
  }
  v24 = *((_BYTE *)v88 + 24) | v20;
  *((_BYTE *)v88 + 24) = v24;
  if (*((_BYTE *)v80 + 24) && (!*((_BYTE *)v84 + 24) ? (v25 = v24 == 0) : (v25 = 1), v25)
    || !v11 && !**(_BYTE **)(a1 + 16))
  {
    v26 = v100 + 5;
    v27 = (_QWORD *)v100[5];
    v28 = *((unsigned __int8 *)v100 + 63);
    v29 = v100[6];
    v30 = *(_QWORD *)(a1 + 56);
    v31 = *(void **)v30;
    v32 = *(_QWORD *)(v30 + 8);
    LXAnalyzerCandidateGetNodeScore();
    v34 = (v28 & 0x80u) == 0 ? v28 : v29;
    v35 = (char *)((v28 & 0x80u) == 0 ? v26 : v27);
    v36 = v33;
    sub_20B88C9DC(v35, v34, v31, v32, v11, *((_DWORD *)v64 + 6), 4, 0, v57, v36);
    v37 = v57[0];
    if (v57[0])
    {
      *(_BYTE *)(v57[0] + 152) = *((_BYTE *)v76 + 24);
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v37 + 520))(v37, v92 + 5);
      LXAnalyzerCandidateGetNodeScore();
      v39 = v38;
      if (**(_QWORD **)(a1 + 72) || (LXAnalyzerCandidateGetScore(), v40 <= -15.0))
      {
        if (v39 == 0.0 && *((_DWORD *)v64 + 6) == 71)
          **(_BYTE **)(a1 + 88) = 1;
      }
      else if (!v11 || *((_DWORD *)v64 + 6) == 79 && v39 == 0.0)
      {
        v41 = *(char *)(v57[0] + 55);
        if (v41 >= 0)
          v42 = (void *)(v57[0] + 32);
        else
          v42 = *(void **)(v57[0] + 32);
        if (v41 >= 0)
          v43 = *(unsigned __int8 *)(v57[0] + 55);
        else
          v43 = *(_QWORD *)(v57[0] + 40);
        sub_20B877ED0(&__dst, v42, v43);
        v44 = *(_QWORD *)(a1 + 80);
        if (*(char *)(v44 + 23) < 0)
          operator delete(*(void **)v44);
        v45 = __dst;
        *(_QWORD *)(v44 + 16) = v108;
        *(_OWORD *)v44 = v45;
      }
      v47 = *(_QWORD **)(a1 + 96);
      v56 = (_QWORD *)v57[0];
      v57[0] = 0;
      *(_QWORD *)&__dst = &unk_24C459188;
      p_dst = &__dst;
      sub_20B8FDA94(v47, &v56, 0, 0, (uint64_t)&__dst);
      v48 = p_dst;
      if (p_dst == &__dst)
      {
        v49 = 4;
        v48 = &__dst;
      }
      else
      {
        if (!p_dst)
        {
LABEL_83:
          v50 = v56;
          v56 = 0;
          if (v50)
            (*(void (**)(_QWORD *))(*v50 + 16))(v50);
          v51 = *(unint64_t **)(a1 + 72);
          v52 = *v51 + 1;
          *v51 = v52;
          if (v52 >= 0xA)
            *a3 = 1;
          v53 = v57[0];
          v57[0] = 0;
          if (v53)
            (*(void (**)(uint64_t))(*(_QWORD *)v53 + 16))(v53);
          goto LABEL_2;
        }
        v49 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v48 + 8 * v49))();
      goto LABEL_83;
    }
  }
LABEL_2:
  if (cf)
    CFRelease(cf);
  cf = 0;
  _Block_object_dispose(v61, 8);
  _Block_object_dispose(&v63, 8);
  _Block_object_dispose(&v67, 8);
  _Block_object_dispose(&v71, 8);
  _Block_object_dispose(&v75, 8);
  _Block_object_dispose(&v79, 8);
  _Block_object_dispose(&v83, 8);
  _Block_object_dispose(&v87, 8);
  _Block_object_dispose(&v91, 8);
  if (__p)
  {
    v97 = __p;
    operator delete(__p);
  }
  _Block_object_dispose(&v99, 8);
  if (SHIBYTE(v106) < 0)
    operator delete(v104);
  if (v55)
    CFRelease(v55);
}

void sub_20B9D1458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, CFTypeRef a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,CFTypeRef cf,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  char a67;
  void *__p;
  uint64_t v72;
  void *v74;

  if (a13)
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 16))(a13);
  if (cf)
    CFRelease(cf);
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose(&a39, 8);
  _Block_object_dispose(&a43, 8);
  _Block_object_dispose(&a47, 8);
  _Block_object_dispose(&a51, 8);
  _Block_object_dispose(&a55, 8);
  _Block_object_dispose(&a59, 8);
  _Block_object_dispose(&a63, 8);
  _Block_object_dispose(&a67, 8);
  v74 = __p;
  if (__p)
  {
    STACK[0x200] = (unint64_t)__p;
    operator delete(v74);
  }
  _Block_object_dispose((const void *)(v72 - 208), 8);
  if (*(char *)(v72 - 145) < 0)
    operator delete(*(void **)(v72 - 168));
  if (a11)
    CFRelease(a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9D15B8(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45F100))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B9D15F4()
{
  return &unk_24C45F100;
}

__n128 sub_20B9D1600(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(__n128 *)(a1 + 40) = result;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_20B9D161C(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

__n128 sub_20B9D1630(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void sub_20B9D1654(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void sub_20B9D166C(uint64_t a1, uint64_t a2, unsigned int a3, _BYTE *a4)
{
  uint64_t v7;
  const __CFString *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  unint64_t v18;
  int v19;
  _WORD *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _WORD *v24;
  _WORD *v25;
  unint64_t v26;
  void **v27;
  uint64_t v28;
  void **v29;
  unint64_t v30;
  void **v31;
  CFIndex v32;
  CFStringRef v33;
  int MetaFlags;
  char v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  BOOL v39;
  __int16 v40;
  __int16 v41;
  unsigned int v42;
  _QWORD *v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  unint64_t v66;
  void *v68;
  __int128 v69;
  unint64_t v70;
  void *__p[2];
  uint64_t v72;
  void *v73;
  unint64_t v74;
  unsigned __int8 v75;
  const __CFString *v76;

  v7 = *(_QWORD *)(a1 + 112);
  v8 = (const __CFString *)LXEntryCopyString();
  v76 = v8;
  sub_20B8D09C0(v8, &v73);
  __p[1] = 0;
  v72 = 0;
  __p[0] = 0;
  v9 = a3 >> 1;
  v10 = **(_QWORD **)(a1 + 120);
  if (v10)
    v11 = v9;
  else
    v11 = 0;
  if ((v75 & 0x80u) == 0)
    v12 = &v73;
  else
    v12 = v73;
  if ((v75 & 0x80u) == 0)
    v13 = v75;
  else
    v13 = v74;
  if (!sub_20B9DEC04(v10 + 2 * *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), v11, (uint64_t)v12, v13))goto LABEL_112;
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v16 = *(_QWORD *)(v14 + 40);
  v15 = *(_QWORD *)(v14 + 48);
  if (0xCCCCCCCCCCCCCCCDLL * ((v15 - v16) >> 3) != LXAnalyzerCandidateGetMorphemeCount() - 1
    || ((v75 & 0x80u) == 0 ? (v17 = &v73) : (v17 = v73),
        (v75 & 0x80u) == 0 ? (v18 = v75) : (v18 = v74),
        !sub_20B9DEA9C((uint64_t)v17, v18)))
  {
    if ((v75 & 0x80u) == 0)
      v20 = &v73;
    else
      v20 = v73;
    if ((v75 & 0x80u) == 0)
      v21 = v75;
    else
      v21 = v74;
    if (!v21)
    {
LABEL_34:
      sub_20B9B6544(__p, &v73);
      v19 = 5;
      goto LABEL_44;
    }
    v22 = 2 * v21;
    v23 = 2 * v21;
    v24 = v20;
    do
    {
      if ((unsigned __int16)(*v24 + 10332) > 0xD45Bu || (unsigned __int16)(*v24 - 12644) >= 0xFFCDu)
      {
        sub_20B88CEDC(*(_QWORD *)(v7 + 152), v20, v21, 0, (uint64_t)&v69);
        if (SHIBYTE(v72) < 0)
          operator delete(__p[0]);
        *(_OWORD *)__p = v69;
        v72 = v70;
        v26 = HIBYTE(v70);
        v27 = __p;
        if ((v70 & 0x8000000000000000) != 0)
        {
          v26 = *((_QWORD *)&v69 + 1);
          v27 = (void **)v69;
        }
        if (!v26)
        {
LABEL_43:
          v19 = 0;
          goto LABEL_44;
        }
        v28 = 2 * v26;
        while ((unsigned __int16)((unsigned __int16)(*(_WORD *)v27 + 21504) >> 2) < 0xAE9u)
        {
          v27 = (void **)((char *)v27 + 2);
          v28 -= 2;
          if (!v28)
            goto LABEL_43;
        }
        goto LABEL_112;
      }
      ++v24;
      v23 -= 2;
    }
    while (v23);
    v25 = v20;
    while ((*v25 & 0xFFDFu) - 65 > 0x19)
    {
      ++v25;
      v22 -= 2;
      if (!v22)
        goto LABEL_34;
    }
    v59 = 120;
    if (!**(_BYTE **)(a1 + 144))
      v59 = 136;
    v60 = **(_QWORD **)(a1 + v59);
    if (v60)
      v61 = v9;
    else
      v61 = 0;
    sub_20B9DFD10((unsigned __int16 *)(v60 + 2 * *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24)), v61, v20, v21, (unsigned __int16 *)&v69);
    if (SHIBYTE(v72) < 0)
      operator delete(__p[0]);
    *(_OWORD *)__p = v69;
    v72 = v70;
    v62 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v63 = *(_QWORD *)(v62 + 40);
    v64 = *(_QWORD *)(v62 + 48);
    if (**(_BYTE **)(a1 + 152))
    {
      v65 = 0;
    }
    else
    {
      v66 = v75;
      if ((v75 & 0x80u) != 0)
        v66 = v74;
      v65 = v66 > v9;
    }
    if (v63 == v64 && **(_BYTE **)(a1 + 160) && !v65)
    {
      v68 = (void *)HIBYTE(v72);
      if (v72 < 0)
        v68 = __p[1];
      if (v68)
      {
        v19 = 1;
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 1;
        goto LABEL_44;
      }
    }
LABEL_112:
    *a4 = 1;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
    goto LABEL_113;
  }
  sub_20B9B6544(__p, &v73);
  v19 = 0;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 73;
LABEL_44:
  if (v72 >= 0)
    v29 = __p;
  else
    v29 = (void **)__p[0];
  if (v72 >= 0)
    v30 = HIBYTE(v72);
  else
    v30 = (unint64_t)__p[1];
  sub_20B88DACC(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40, v29, v30);
  *(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += v9;
  if (v72 >= 0)
    v31 = __p;
  else
    v31 = (void **)__p[0];
  if (v72 >= 0)
    v32 = HIBYTE(v72);
  else
    v32 = (CFIndex)__p[1];
  v33 = CFStringCreateWithCharacters(0, (const UniChar *)v31, v32);
  *(_QWORD *)&v69 = v33;
  MetaFlags = LXEntryGetMetaFlags();
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24) = (MetaFlags & 0x3000000 | *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24)) != 0;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24) = (MetaFlags & 0x800000 | *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24)) != 0;
  if ((MetaFlags & 0x800000) != 0)
  {
    if ((*(_BYTE *)(v7 + 50) & 4) != 0)
      v35 = 0;
    else
      v35 = sub_20BA14534(*(uint64_t **)(v7 + 104), (uint64_t)v33);
  }
  else
  {
    v35 = 1;
  }
  v36 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
  if (*(_BYTE *)(v36 + 24))
    v37 = v35;
  else
    v37 = 0;
  *(_BYTE *)(v36 + 24) = v37;
  v38 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8);
  if (*(_BYTE *)(v38 + 24))
    v39 = (MetaFlags & 0x3800000) == 0;
  else
    v39 = 0;
  *(_BYTE *)(v38 + 24) = v39;
  if (v72 >= 0)
    v40 = HIBYTE(v72);
  else
    v40 = (__int16)__p[1];
  if ((v75 & 0x80u) == 0)
    v41 = v75;
  else
    v41 = v74;
  v42 = ((MetaFlags & 0x3800000) == 0) | ((MetaFlags & 0x800000u) >> 19);
  v43 = *(_QWORD **)(*(_QWORD *)(a1 + 48) + 8);
  v44 = v43[6];
  v45 = v43[7];
  if (v44 >= v45)
  {
    v47 = v43[5];
    v48 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v44 - v47) >> 3);
    v49 = v48 + 1;
    if (v48 + 1 > 0x666666666666666)
      sub_20B8821D4();
    v50 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v45 - v47) >> 3);
    if (2 * v50 > v49)
      v49 = 2 * v50;
    if (v50 >= 0x333333333333333)
      v51 = 0x666666666666666;
    else
      v51 = v49;
    if (v51)
      v52 = (char *)sub_20B882310((uint64_t)(v43 + 7), v51);
    else
      v52 = 0;
    v53 = &v52[40 * v48];
    *(_DWORD *)v53 = v19;
    v54 = &v52[40 * v51];
    *((_DWORD *)v53 + 5) = 0;
    *(_QWORD *)(v53 + 12) = 0;
    *(_QWORD *)(v53 + 4) = 0;
    *((_WORD *)v53 + 12) = v40;
    *((_WORD *)v53 + 13) = v9;
    *((_WORD *)v53 + 14) = v41;
    *(_DWORD *)(v53 + 30) = 0;
    *(_DWORD *)(v53 + 33) = 0;
    v53[37] = v42;
    *((_WORD *)v53 + 19) = 0;
    v46 = v53 + 40;
    v56 = (char *)v43[5];
    v55 = (char *)v43[6];
    if (v55 != v56)
    {
      do
      {
        v57 = *(_OWORD *)(v55 - 40);
        v58 = *(_OWORD *)(v55 - 24);
        *((_QWORD *)v53 - 1) = *((_QWORD *)v55 - 1);
        *(_OWORD *)(v53 - 24) = v58;
        *(_OWORD *)(v53 - 40) = v57;
        v53 -= 40;
        v55 -= 40;
      }
      while (v55 != v56);
      v55 = (char *)v43[5];
    }
    v43[5] = v53;
    v43[6] = v46;
    v43[7] = v54;
    if (v55)
      operator delete(v55);
  }
  else
  {
    *(_DWORD *)v44 = v19;
    *(_QWORD *)(v44 + 12) = 0;
    *(_QWORD *)(v44 + 4) = 0;
    *(_DWORD *)(v44 + 20) = 0;
    *(_WORD *)(v44 + 24) = v40;
    *(_WORD *)(v44 + 26) = v9;
    *(_WORD *)(v44 + 28) = v41;
    *(_DWORD *)(v44 + 30) = 0;
    *(_DWORD *)(v44 + 33) = 0;
    *(_BYTE *)(v44 + 37) = v42;
    v46 = (char *)(v44 + 40);
    *(_WORD *)(v44 + 38) = 0;
  }
  v43[6] = v46;
  if (v33)
    CFRelease(v33);
LABEL_113:
  if (SHIBYTE(v72) < 0)
    operator delete(__p[0]);
  if ((char)v75 < 0)
  {
    operator delete(v73);
    if (!v8)
      return;
  }
  else if (!v8)
  {
    return;
  }
  CFRelease(v8);
}

void sub_20B9D1C90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,const void *a26)
{
  if (a18 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  sub_20B87E150(&a26, 0);
  _Unwind_Resume(a1);
}

void sub_20B9D1CFC(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 128) = 0;
  sub_20B952228((const void **)(a1 + 128), *(CFTypeRef *)(a2 + 128));
}

void sub_20B9D1D08(uint64_t a1)
{
  sub_20B952274((const void **)(a1 + 128), 0);
}

void sub_20B9D1D18()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B9D1D2C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C459028;
  result[1] = v3;
  return result;
}

uint64_t sub_20B9D1D60(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C459028;
  a2[1] = v2;
  return result;
}

uint64_t sub_20B9D1D7C(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(a1 + 8))(*a2, *a3);
}

uint64_t sub_20B9D1D8C(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C458D78))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B9D1DC8()
{
  return &unk_24C458D78;
}

void sub_20B9D1DD8()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B9D1DEC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24C46B160;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_20B9D1E2C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C46B160;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20B9D1E54(_QWORD *a1, uint64_t *a2, double *a3, uint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7)
{
  void *v10;
  unint64_t v11;
  int v12;
  double v13;
  uint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  void *p_p;
  uint64_t v18;
  void **v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  void *__p;
  uint64_t v33;
  unsigned __int8 v34;
  _QWORD v35[3];
  _QWORD *v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v10 = (void *)*a2;
  v11 = a2[1];
  v12 = *(_DWORD *)a3;
  v13 = a3[1];
  v14 = a1[1];
  v15 = (uint64_t *)a1[3];
  if (sub_20B9DEC04(*v15, v15[1], *a2, v11) && v11 > v15[6])
  {
    sub_20B88CEDC(*(_QWORD *)(v14 + 152), v10, v11, 0, (uint64_t)&__p);
    v16 = *(_QWORD **)(v14 + 144);
    if (v16)
    {
      if ((v34 & 0x80u) == 0)
        p_p = &__p;
      else
        p_p = __p;
      if ((v34 & 0x80u) == 0)
        v18 = v34;
      else
        v18 = v33;
      LOBYTE(v16) = sub_20B9D72A8(v16, (uint64_t)p_p, v18, 1);
    }
    if ((v16 & 1) != 0 || (v12 & 2) != 0 || (v12 & 4) != 0 || v13 < -4.0)
      goto LABEL_36;
    v19 = (v34 & 0x80u) == 0 ? &__p : (void **)__p;
    v20 = (v34 & 0x80u) == 0 ? v34 : v33;
    v21 = a1[3];
    v22 = v20 != *(_QWORD *)(v21 + 40) || memcmp(v19, *(const void **)(v21 + 32), 2 * v20) != 0;
    sub_20B88C9DC((char *)v19, v20, *(void **)v21, *(_QWORD *)(v21 + 8), v22, 71, 4, 0, (uint64_t *)&v31, *(float *)(a4 + 4));
    if (!v31)
      goto LABEL_36;
    v23 = (_QWORD *)a1[2];
    v30 = v31;
    v31 = 0;
    v35[0] = &unk_24C459188;
    v36 = v35;
    sub_20B8FDA94(v23, &v30, 1, 0, (uint64_t)v35);
    v24 = v36;
    if (v36 == v35)
    {
      v25 = 4;
      v24 = v35;
    }
    else
    {
      if (!v36)
      {
LABEL_30:
        v26 = v30;
        v30 = 0;
        if (v26)
          (*(void (**)(_QWORD *))(*v26 + 16))(v26);
        v27 = (unint64_t *)a1[4];
        v28 = *v27 + 1;
        *v27 = v28;
        if (v28 >= 2)
          *a7 = 1;
        v29 = v31;
        v31 = 0;
        if (v29)
          (*(void (**)(_QWORD *))(*v29 + 16))(v29);
LABEL_36:
        if ((char)v34 < 0)
          operator delete(__p);
        return;
      }
      v25 = 5;
    }
    (*(void (**)(void))(*v24 + 8 * v25))();
    goto LABEL_30;
  }
}

void sub_20B9D2094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, char *a20)
{
  char *v20;
  char *v22;
  uint64_t v23;

  v22 = a20;
  if (a20 == v20)
  {
    v23 = 4;
    v22 = &a17;
  }
  else
  {
    if (!a20)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 16))(a9);
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 16))(a10);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B9D2120(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45F0E0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B9D215C()
{
  return &unk_24C45F0E0;
}

void sub_20B9D216C()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B9D2180(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24C46B268;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_20B9D21C0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C46B268;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20B9D21E8(uint64_t result, uint64_t a2, uint64_t a3, float *a4)
{
  uint64_t v5;
  float v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  uint64_t v10;
  char v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD v18[3];
  _QWORD *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (*(_WORD *)(a2 + 32))
    return result;
  v5 = result;
  v6 = *a4;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 24);
  if (v7 == v8)
  {
    result = memcmp(*(const void **)a2, *(const void **)(a2 + 16), 2 * v7);
    v9 = (_DWORD)result != 0;
  }
  else
  {
    v9 = 1;
  }
  if (v6 < 0.0 && v9)
    return result;
  v10 = *(_QWORD *)(v5 + 24);
  v11 = v7 != *(_QWORD *)(v10 + 40) || memcmp(*(const void **)a2, *(const void **)(v10 + 32), 2 * v7) != 0;
  sub_20B88C9DC(*(char **)(a2 + 16), v8, *(void **)v10, *(_QWORD *)(v10 + 8), v11, 77, 4, 0, (uint64_t *)&v17, v6);
  v12 = *(_QWORD **)(v5 + 16);
  v16 = v17;
  v17 = 0;
  v18[0] = &unk_24C459188;
  v19 = v18;
  sub_20B8FDA94(v12, &v16, 1, 0, (uint64_t)v18);
  v13 = v19;
  if (v19 == v18)
  {
    v14 = 4;
    v13 = v18;
    goto LABEL_14;
  }
  if (v19)
  {
    v14 = 5;
LABEL_14:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  v15 = v16;
  v16 = 0;
  if (v15)
    (*(void (**)(_QWORD *))(*v15 + 16))(v15);
  result = (uint64_t)v17;
  v17 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

void sub_20B9D2384(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 16))(a10);
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 16))(a11);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B9D23F4(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45F110))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B9D2430()
{
  return &unk_24C45F110;
}

void sub_20B9D2440()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B9D2454(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24C46B3C8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_20B9D2494(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C46B3C8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20B9D24BC(_QWORD *a1, uint64_t a2, float *a3)
{
  float v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char v11;
  uint64_t v12;
  _DWORD *v13;
  int v14;
  uint64_t v15;
  CFNumberRef v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t result;
  _QWORD *v23;
  int v24[2];
  _QWORD valuePtr[3];
  _QWORD *v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v5 = *a3;
  v6 = a1[2];
  v7 = *(_QWORD *)(v6 + 32);
  v8 = *(_QWORD *)(v6 + 40) - 1;
  if (!v7)
    v8 = 0;
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(char **)(a2 + 16);
  v11 = v9 != v8 || memcmp(*(const void **)(a2 + 16), (const void *)(v7 + 2), 2 * v8) != 0;
  sub_20B88C9DC(v10, v9, *(void **)v6, *(_QWORD *)(v6 + 8), v11, 89, 4, 0, (uint64_t *)v24, v5);
  v12 = *(_QWORD *)v24;
  v13 = (_DWORD *)a1[3];
  v14 = (*v13)++;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 480))(v12, (v14 + 10000));
  v15 = *(_QWORD *)v24;
  valuePtr[0] = *(unsigned __int16 *)(a2 + 32);
  v16 = CFNumberCreate(0, kCFNumberCFIndexType, valuePtr);
  sub_20B88AE28((const void **)(v15 + 120), v16);
  sub_20B959CC0(*(uint64_t *)v24, *(char **)(a2 + 40), *(_QWORD *)(a2 + 48));
  v17 = *(_QWORD **)v24;
  *(_BYTE *)(*(_QWORD *)v24 + 152) = 0;
  v18 = (_QWORD *)a1[1];
  v23 = v17;
  *(_QWORD *)v24 = 0;
  valuePtr[0] = &unk_24C459188;
  v26 = valuePtr;
  sub_20B8FDA94(v18, &v23, 1, 0, (uint64_t)valuePtr);
  v19 = v26;
  if (v26 == valuePtr)
  {
    v20 = 4;
    v19 = valuePtr;
  }
  else
  {
    if (!v26)
      goto LABEL_11;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_11:
  v21 = v23;
  v23 = 0;
  if (v21)
    (*(void (**)(_QWORD *))(*v21 + 16))(v21);
  result = *(_QWORD *)v24;
  *(_QWORD *)v24 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

void sub_20B9D268C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 16))(a10);
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 16))(a11);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B9D2704(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45F150))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B9D2740()
{
  return &unk_24C45F150;
}

void sub_20B9D2750()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B9D2764(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24C46B420;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_20B9D27A4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C46B420;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20B9D27CC(_QWORD *a1, uint64_t a2, float *a3)
{
  float v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  char v9;
  uint64_t v10;
  _DWORD *v11;
  int v12;
  uint64_t v13;
  CFNumberRef v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t result;
  _QWORD *v21;
  int v22[2];
  _QWORD valuePtr[3];
  _QWORD *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v5 = *a3;
  v6 = a1[2];
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(char **)(a2 + 16);
  v9 = v7 != *(_QWORD *)(v6 + 40) || memcmp(*(const void **)(a2 + 16), *(const void **)(v6 + 32), 2 * v7) != 0;
  sub_20B88C9DC(v8, v7, *(void **)v6, *(_QWORD *)(v6 + 8), v9, 89, 4, 0, (uint64_t *)v22, v5);
  v10 = *(_QWORD *)v22;
  v11 = (_DWORD *)a1[3];
  v12 = (*v11)++;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 480))(v10, (v12 + 10000));
  v13 = *(_QWORD *)v22;
  valuePtr[0] = *(unsigned __int16 *)(a2 + 32);
  v14 = CFNumberCreate(0, kCFNumberCFIndexType, valuePtr);
  sub_20B88AE28((const void **)(v13 + 120), v14);
  sub_20B959CC0(*(uint64_t *)v22, *(char **)(a2 + 40), *(_QWORD *)(a2 + 48));
  v15 = *(_QWORD **)v22;
  *(_BYTE *)(*(_QWORD *)v22 + 152) = 0;
  v16 = (_QWORD *)a1[1];
  v21 = v15;
  *(_QWORD *)v22 = 0;
  valuePtr[0] = &unk_24C459188;
  v24 = valuePtr;
  sub_20B8FDA94(v16, &v21, 1, 0, (uint64_t)valuePtr);
  v17 = v24;
  if (v24 == valuePtr)
  {
    v18 = 4;
    v17 = valuePtr;
  }
  else
  {
    if (!v24)
      goto LABEL_9;
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_9:
  v19 = v21;
  v21 = 0;
  if (v19)
    (*(void (**)(_QWORD *))(*v19 + 16))(v19);
  result = *(_QWORD *)v22;
  *(_QWORD *)v22 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

void sub_20B9D2990(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 16))(a10);
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 16))(a11);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B9D2A08(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45F160))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B9D2A44()
{
  return &unk_24C45F160;
}

void sub_20B9D2A54()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B9D2A68(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24C46B370;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_20B9D2AA8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C46B370;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *sub_20B9D2AD0(uint64_t a1, uint64_t a2, float *a3, _BYTE *a4)
{
  float v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  char v10;
  _QWORD *v11;
  int v12;
  _DWORD *v13;
  int v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *result;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD v22[3];
  _QWORD *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v5 = *a3;
  v6 = *(_QWORD *)(a1 + 8);
  if (**(int **)(a1 + 32) >= 2)
    *a4 = 1;
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(void **)(a2 + 16);
  v10 = v8 != *(_QWORD *)(v7 + 40) || memcmp(v9, *(const void **)(v7 + 32), 2 * v8) != 0;
  sub_20B88C9DC((char *)v9, v8, *(void **)v7, *(_QWORD *)(v7 + 8), v10, 65, 4, 0, (uint64_t *)&v21, v5);
  sub_20B9CF270(v6, (uint64_t)v21, *(_QWORD *)(*(_QWORD *)(a1 + 24) + 48));
  v11 = v21;
  v12 = (*(uint64_t (**)(_QWORD *))(*v21 + 112))(v21);
  v13 = *(_DWORD **)(a1 + 32);
  v14 = (*v13)++;
  (*(void (**)(_QWORD *, _QWORD))(*v11 + 480))(v11, (v14 + v12));
  v15 = *(_QWORD **)(a1 + 16);
  v20 = v21;
  v21 = 0;
  v22[0] = &off_24C459028;
  v22[1] = sub_20B9CF614;
  v23 = v22;
  sub_20B8FDA94(v15, &v20, 1, 0, (uint64_t)v22);
  v16 = v23;
  if (v23 == v22)
  {
    v17 = 4;
    v16 = v22;
  }
  else
  {
    if (!v23)
      goto LABEL_11;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_11:
  v18 = v20;
  v20 = 0;
  if (v18)
    (*(void (**)(_QWORD *))(*v18 + 16))(v18);
  result = v21;
  v21 = 0;
  if (result)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 16))(result);
  return result;
}

void sub_20B9D2C9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 16))(a10);
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 16))(a11);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B9D2D14(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45F140))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B9D2D50()
{
  return &unk_24C45F140;
}

void sub_20B9D2D60()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B9D2D74(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24C46B318;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_20B9D2DB4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C46B318;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *sub_20B9D2DDC(_QWORD *result, uint64_t a2, float *a3, _BYTE *a4)
{
  _QWORD *v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  char v10;
  _QWORD *v11;
  int v12;
  _DWORD *v13;
  int v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD v21[3];
  _QWORD *v22;
  uint64_t v23;

  v4 = result;
  v23 = *MEMORY[0x24BDAC8D0];
  v5 = *a3;
  v6 = result[1];
  if (*(int *)result[4] >= 2)
    *a4 = 1;
  if (v5 >= 0.0)
  {
    v7 = result[3];
    v8 = *(_QWORD *)(a2 + 24);
    v9 = *(void **)(a2 + 16);
    v10 = v8 != *(_QWORD *)(v7 + 40) || memcmp(v9, *(const void **)(v7 + 32), 2 * v8) != 0;
    sub_20B88C9DC((char *)v9, v8, *(void **)v7, *(_QWORD *)(v7 + 8), v10, 85, 4, 0, (uint64_t *)&v20, v5);
    sub_20B9CF270(v6, (uint64_t)v20, *(_QWORD *)(v4[3] + 48));
    v11 = v20;
    v12 = (*(uint64_t (**)(_QWORD *))(*v20 + 112))(v20);
    v13 = (_DWORD *)v4[4];
    v14 = (*v13)++;
    (*(void (**)(_QWORD *, _QWORD))(*v11 + 480))(v11, (v14 + v12));
    v15 = (_QWORD *)v4[2];
    v19 = v20;
    v20 = 0;
    v21[0] = &off_24C459028;
    v21[1] = sub_20B9CF614;
    v22 = v21;
    sub_20B8FDA94(v15, &v19, 1, 0, (uint64_t)v21);
    v16 = v22;
    if (v22 == v21)
    {
      v17 = 4;
      v16 = v21;
    }
    else
    {
      if (!v22)
      {
LABEL_12:
        v18 = v19;
        v19 = 0;
        if (v18)
          (*(void (**)(_QWORD *))(*v18 + 16))(v18);
        result = v20;
        v20 = 0;
        if (result)
          return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 16))(result);
        return result;
      }
      v17 = 5;
    }
    (*(void (**)(void))(*v16 + 8 * v17))();
    goto LABEL_12;
  }
  return result;
}

void sub_20B9D2FB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 16))(a10);
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 16))(a11);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B9D3028(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45F130))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B9D3064()
{
  return &unk_24C45F130;
}

void sub_20B9D3074()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B9D3088(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C46B2C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20B9D30C0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C46B2C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20B9D30E0(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  __int16 **v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  __int16 v10;
  int v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  void *v15[2];
  uint64_t v16;
  void *v17[2];
  void *__p[2];
  __int128 v19;
  int v20;
  __int16 v21;
  __int128 v22;
  uint64_t v23;
  int v24;

  v24 = *a4;
  v6 = (__int16 **)sub_20B909B78(a3, off_2547292D0);
  sub_20B932868(&v22, *v6, v6[1], v6[1] - *v6);
  v7 = HIBYTE(v23);
  if (v23 < 0)
    v7 = *((_QWORD *)&v22 + 1);
  v8 = *(_QWORD *)(a1 + 16);
  if (v7 == *(_QWORD *)(v8 + 40))
  {
    if (v23 >= 0)
      v9 = &v22;
    else
      v9 = (__int128 *)v22;
    v10 = memcmp(v9, *(const void **)(v8 + 32), 2 * v7) != 0;
  }
  else
  {
    v10 = 1;
  }
  v11 = *(_DWORD *)(a2 + 4);
  v16 = v23;
  *(_OWORD *)v15 = v22;
  v23 = 0;
  v22 = 0uLL;
  *(_OWORD *)v17 = 0u;
  *(_OWORD *)__p = 0u;
  v19 = 0u;
  v20 = v11;
  v21 = v10;
  v12 = *(uint64_t **)(a1 + 8);
  v13 = v12[1];
  if (v13 >= v12[2])
  {
    v14 = sub_20B932904(v12, (__int128 *)v15, &v24);
  }
  else
  {
    sub_20B932A28((_QWORD *)v12[1], (__int128 *)v15, &v24);
    v14 = v13 + 88;
    v12[1] = v13 + 88;
  }
  v12[1] = v14;
  if (__p[1])
  {
    *(void **)&v19 = __p[1];
    operator delete(__p[1]);
  }
  if (v17[0])
  {
    v17[1] = v17[0];
    operator delete(v17[0]);
  }
  if (SHIBYTE(v16) < 0)
    operator delete(v15[0]);
  if (SHIBYTE(v23) < 0)
    operator delete((void *)v22);
}

void sub_20B9D3244(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  uint64_t v19;

  if (__p)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  if (a14 < 0)
    operator delete(a9);
  if (*(char *)(v19 - 41) < 0)
    operator delete(*(void **)(v19 - 64));
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B9D32A0(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45F120))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B9D32DC()
{
  return &unk_24C45F120;
}

__n128 sub_20B9D32E8(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void sub_20B9D330C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

__n128 sub_20B9D3324(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void sub_20B9D3348(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

__n128 sub_20B9D3360(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void sub_20B9D3384(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

_QWORD *sub_20B9D339C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  v2 = (_QWORD *)(a1 + 120);
  v2[2] = 0;
  return sub_20B87ACC8(v2, *(const void **)(a2 + 120), *(_QWORD *)(a2 + 128), (uint64_t)(*(_QWORD *)(a2 + 128) - *(_QWORD *)(a2 + 120)) >> 1);
}

void sub_20B9D33B8(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 120);
  if (v2)
  {
    *(_QWORD *)(a1 + 128) = v2;
    operator delete(v2);
  }
}

uint64_t sub_20B9D33D0(uint64_t a1, int a2, uint64_t *a3, uint64_t a4, uint64_t a5, double a6)
{
  unsigned int v8;
  BOOL v9;
  int v10;
  int v11;
  uint64_t v12;
  const __CFAllocator *v13;
  uint64_t v14;
  unint64_t v15;
  CFIndex v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  CFIndex v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __CFString *v24;
  const void *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  _QWORD *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  const void **v40;
  const void **v41;
  CFTypeRef *v42;
  const __CFAllocator *v43;
  uint64_t v44;
  const __CFString *v46;
  CFIndex Length;
  uint64_t v48;
  BOOL v50;
  const __CFString *v51;
  const __CFString *v52;
  CFStringRef Copy;
  CFStringRef v54;
  CFStringRef v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t *v61;
  uint64_t v62;
  _QWORD *v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  CFMutableStringRef v72;
  CFStringRef v73;
  CFStringRef v74;
  CFStringRef v75;
  uint64_t v77;
  uint64_t *v78;
  const void **v79;
  const __CFAllocator *v80;
  const void **v81;
  const void **v82;
  const void **v83;
  const void **v84;
  int v85;
  void **v86;
  __CFArray *theArray;
  int v88;
  BOOL v89;
  uint64_t capacity;
  __CFArray *Mutable;
  int v93;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD v98[15];
  void *__p;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  char v106;
  BOOL v107;
  void *v108;
  void *v109;
  unint64_t v110;
  __n128 (*v111)(_QWORD *, uint64_t);
  void (*v112)(uint64_t);
  void *v113;
  void *v114;
  uint64_t v115;
  _QWORD v116[3];
  char v117;
  _QWORD v118[3];
  char v119;
  _QWORD v120[5];
  void *v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  _BYTE *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  __n128 (*v134)(_QWORD *, uint64_t);
  void (*v135)(uint64_t);
  void *v136;
  void *v137;
  uint64_t v138;
  CFRange v139;

  *(_WORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = a2;
  *(_BYTE *)(a1 + 24) = 0;
  *(double *)(a1 + 32) = a6;
  *(_QWORD *)a1 = off_24C467CE0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = &unk_24C467F48;
  *(_DWORD *)(a1 + 48) = 0;
  v8 = *(_DWORD *)(a4 + 24);
  *(_QWORD *)(a1 + 52) = v8;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  v84 = (const void **)(a1 + 80);
  *(_OWORD *)(a1 + 96) = 0u;
  v79 = (const void **)(a1 + 96);
  *(_OWORD *)(a1 + 128) = 0u;
  v77 = a1 + 128;
  *(_OWORD *)(a1 + 140) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_DWORD *)(a1 + 156) = *(_DWORD *)a4;
  *(_DWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  v86 = (void **)(a1 + 168);
  *(_OWORD *)(a1 + 200) = 0u;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  v9 = *(_QWORD *)a5 != *(_QWORD *)(a5 + 8) && *(_BYTE *)(a5 + 24) == 0;
  v10 = v9;
  v85 = v10;
  v11 = (v8 >> 14) & 1;
  if (v9)
    v11 = 1;
  v93 = v11;
  v12 = *(_QWORD *)(a4 + 64);
  v89 = v12 && *(_BYTE *)(v12 + 104) && *(_BYTE *)(v12 + 105) == 0;
  v81 = (const void **)(a1 + 88);
  v82 = (const void **)(a1 + 72);
  v13 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  capacity = (a3[1] - *a3) >> 3;
  v83 = (const void **)(a1 + 64);
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], capacity, MEMORY[0x24BDBD690]);
  theArray = 0;
  v131 = 0;
  v132 = &v131;
  v134 = sub_20B9D32E8;
  v135 = sub_20B9D330C;
  v133 = 0x4002000000;
  v137 = 0;
  v138 = 0;
  v136 = 0;
  v128 = 0;
  v129 = 0;
  v130 = 0;
  if (v93)
    theArray = CFArrayCreateMutable(v13, capacity, MEMORY[0x24BDBD690]);
  v124 = 0;
  v125 = &v124;
  v126 = 0x2000000000;
  v127 = 0;
  v120[0] = 0;
  v120[1] = v120;
  v120[2] = 0x4002000000;
  v120[3] = sub_20B9D3324;
  v120[4] = sub_20B9D3348;
  v123 = 0;
  v121 = 0;
  v122 = 0;
  v118[0] = 0;
  v118[1] = v118;
  v118[2] = 0x2000000000;
  v119 = 0;
  v116[0] = 0;
  v116[1] = v116;
  v116[2] = 0x2000000000;
  v117 = 0;
  v14 = *a3;
  v95 = a3[1];
  v80 = v13;
  v78 = a3;
  if (*a3 == v95)
  {
    v16 = 0;
  }
  else
  {
    v15 = 0;
    v97 = 0;
    v16 = 0;
    v88 = (v8 >> 17) & 1;
    do
    {
      v17 = *(_QWORD **)v14;
      v18 = *(_QWORD *)(*(_QWORD *)v14 + 16);
      if (v18)
      {
        v19 = v15;
        v20 = v16;
        v21 = *(_QWORD *)v18;
        v96 = *(_QWORD *)(v18 + 16);
        *(_DWORD *)(a1 + 48) |= *(_DWORD *)(v18 + 32);
        *(_BYTE *)(a1 + 155) |= (*((_DWORD *)v17 + 2) - 4) < 3;
        v22 = (*(uint64_t (**)(_QWORD *))(*v17 + 56))(v17);
        sub_20B87D600((uint64_t)&v128, (uint64_t)v129, *(char **)v22, (char *)(*(_QWORD *)v22 + 2 * *(_QWORD *)(v22 + 8)), *(_QWORD *)(v22 + 8));
        v108 = 0;
        v109 = &v108;
        v110 = 0x4002000000;
        v111 = sub_20B9D3360;
        v112 = sub_20B9D3384;
        v114 = 0;
        v115 = 0;
        v113 = 0;
        if (v21)
        {
          v23 = *(_QWORD *)(v21 + 40);
          *(_BYTE *)(a1 + 152) |= (v23 & 0x20) != 0;
          *(_BYTE *)(a1 + 153) |= (v23 & 0x10) != 0;
          *(_BYTE *)(a1 + 154) |= (v23 & 4) != 0;
          if (v97 == capacity - 1 && (v23 & 0x80) != 0)
            *(_DWORD *)(a1 + 56) = 2;
          if (v93)
          {
            if (!v85 || (v24 = sub_20B941888((_QWORD *)a5, v21, v19)) == 0)
              v24 = sub_20B9D69C4(v21);
            CFArrayAppendValue(theArray, v24);
            CFRelease(v24);
          }
          CFArrayAppendValue(Mutable, *(const void **)(v18 + 8));
        }
        else
        {
          v25 = *(const void **)(v18 + 8);
          CFArrayAppendValue(Mutable, v25);
          if (v93)
            CFArrayAppendValue(theArray, v25);
        }
        v26 = *(_QWORD *)((*(uint64_t (**)(_QWORD *))(*v17 + 56))(v17) + 8);
        v28 = *(char **)(a1 + 176);
        v27 = *(_QWORD *)(a1 + 184);
        if ((unint64_t)v28 >= v27)
        {
          v30 = (char *)*v86;
          v31 = (v28 - (_BYTE *)*v86) >> 3;
          v32 = v31 + 1;
          if ((unint64_t)(v31 + 1) >> 61)
            sub_20B80CDD8();
          v33 = v27 - (_QWORD)v30;
          if (v33 >> 2 > v32)
            v32 = v33 >> 2;
          if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
            v34 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v34 = v32;
          if (v34)
          {
            v35 = (char *)sub_20B800BE8(a1 + 184, v34);
            v30 = *(char **)(a1 + 168);
            v28 = *(char **)(a1 + 176);
          }
          else
          {
            v35 = 0;
          }
          v36 = &v35[8 * v31];
          *(_QWORD *)v36 = v26;
          v29 = v36 + 8;
          while (v28 != v30)
          {
            v37 = *((_QWORD *)v28 - 1);
            v28 -= 8;
            *((_QWORD *)v36 - 1) = v37;
            v36 -= 8;
          }
          *(_QWORD *)(a1 + 168) = v36;
          *(_QWORD *)(a1 + 176) = v29;
          *(_QWORD *)(a1 + 184) = &v35[8 * v34];
          if (v30)
            operator delete(v30);
        }
        else
        {
          *(_QWORD *)v28 = v26;
          v29 = v28 + 8;
        }
        *(_QWORD *)(a1 + 176) = v29;
        v38 = v125;
        v98[0] = MEMORY[0x24BDAC760];
        v98[1] = 1174405120;
        v98[2] = sub_20B9D3F20;
        v98[3] = &unk_24C4A0260;
        v98[4] = &v108;
        v98[5] = v120;
        v98[10] = a1;
        v98[11] = v21;
        v98[6] = &v124;
        v98[12] = v17;
        v98[13] = v22;
        v98[14] = v18;
        v100 = 0;
        v101 = 0;
        __p = 0;
        sub_20B87ACC8(&__p, v128, (uint64_t)v129, (v129 - (_BYTE *)v128) >> 1);
        v105 = 0;
        v98[7] = v118;
        v98[8] = v116;
        v106 = v88;
        v107 = v89;
        v98[9] = &v131;
        v102 = a4;
        v103 = v97;
        v104 = capacity;
        sub_20B9DC470(v17, (_DWORD *)a4, a5, v19, v38 + 3, (uint64_t)v98);
        v39 = *(_QWORD *)(v17[2] + 16);
        if (__p)
        {
          v100 = __p;
          operator delete(__p);
        }
        _Block_object_dispose(&v108, 8);
        if (v113)
        {
          v114 = v113;
          operator delete(v113);
        }
        v16 = v96 + v20;
        ++v97;
        v15 = v39 + v19;
      }
      v14 += 8;
    }
    while (v14 != v95);
  }
  v41 = v82;
  v40 = v83;
  v43 = v80;
  v42 = v81;
  if ((v85 & 1) == 0)
  {
    v44 = *(_QWORD *)(a5 + 8);
    if (*(_QWORD *)a5 == v44 || *(_BYTE *)(a5 + 24) == 0)
      v46 = 0;
    else
      v46 = (const __CFString *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v44 - 8) + 48))(*(_QWORD *)(v44 - 8));
    Length = CFStringGetLength(v46);
    v48 = *(_QWORD *)(a5 + 8);
    v50 = *(_QWORD *)a5 == v48 || *(_BYTE *)(a5 + 24) == 0;
    if (v16 >= Length)
    {
      if (v50)
        v52 = 0;
      else
        v52 = (const __CFString *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v48 - 8) + 48))(*(_QWORD *)(v48 - 8));
      Copy = CFStringCreateCopy(v80, v52);
    }
    else
    {
      if (v50)
        v51 = 0;
      else
        v51 = (const __CFString *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v48 - 8) + 48))(*(_QWORD *)(v48 - 8));
      v139.location = 0;
      v139.length = v16;
      Copy = CFStringCreateWithSubstring(v80, v51, v139);
    }
    sub_20B87E150(v84, Copy);
  }
  if (v93)
  {
    v54 = CFStringCreateByCombiningStrings(v80, theArray, &stru_24C4B3660);
    sub_20B87E150(v81, v54);
    CFRelease(theArray);
  }
  else
  {
    v55 = CFStringCreateCopy(v80, (CFStringRef)*v84);
    sub_20B87E150(v81, v55);
  }
  v56 = *(_QWORD **)a5;
  v57 = *(_QWORD **)(a5 + 8);
  while (v56 != v57)
  {
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v56 + 56))(*v56) == 1)
    {
      v58 = *v78;
      v59 = v78[1];
      v108 = 0;
      v109 = 0;
      v110 = 0;
      if (v58 == v59)
      {
LABEL_107:
        v72 = sub_20B9415BC((_QWORD *)a5, (uint64_t *)&v108, v77);
      }
      else
      {
        v60 = 0;
        while (1)
        {
          v61 = *(uint64_t **)(*(_QWORD *)v58 + 16);
          if (!v61)
            break;
          v62 = *v61;
          if (!*v61)
            break;
          if ((unint64_t)v60 >= v110)
          {
            v64 = (char *)v108;
            v65 = (v60 - (_BYTE *)v108) >> 3;
            v66 = v65 + 1;
            if ((unint64_t)(v65 + 1) >> 61)
              sub_20B80CDD8();
            v67 = v110 - (_QWORD)v108;
            if ((uint64_t)(v110 - (_QWORD)v108) >> 2 > v66)
              v66 = v67 >> 2;
            if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF8)
              v68 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v68 = v66;
            if (v68)
            {
              if (v68 >> 61)
                sub_20B800BC0();
              v69 = (char *)operator new(8 * v68);
            }
            else
            {
              v69 = 0;
            }
            v70 = &v69[8 * v65];
            *(_QWORD *)v70 = v62;
            v63 = v70 + 8;
            if (v60 != v64)
            {
              do
              {
                v71 = *((_QWORD *)v60 - 1);
                v60 -= 8;
                *((_QWORD *)v70 - 1) = v71;
                v70 -= 8;
              }
              while (v60 != v64);
              v60 = (char *)v108;
            }
            v108 = v70;
            v110 = (unint64_t)&v69[8 * v68];
            if (v60)
              operator delete(v60);
          }
          else
          {
            *(_QWORD *)v60 = v62;
            v63 = v60 + 8;
          }
          v109 = v63;
          v58 += 8;
          v60 = (char *)v63;
          if (v58 == v59)
            goto LABEL_107;
        }
        v72 = 0;
      }
      v41 = v82;
      v40 = v83;
      v43 = v80;
      v42 = v81;
      if (v108)
      {
        v109 = v108;
        operator delete(v108);
      }
      if (v72)
        sub_20B87E150(v81, v72);
      break;
    }
    ++v56;
  }
  if (v85)
    sub_20B88B52C(v84, *v42);
  v73 = CFStringCreateByCombiningStrings(v43, Mutable, &stru_24C4B3660);
  sub_20B87E150(v79, v73);
  v74 = sub_20B88F830();
  sub_20B87E150(v41, v74);
  if (v132[6] == v132[5])
  {
    if (*v41)
      sub_20B88B52C(v40, *v41);
  }
  else
  {
    v75 = sub_20B88F830();
    sub_20B87E150(v40, v75);
  }
  *(_DWORD *)(a1 + 160) = sub_20B8D345C((const __CFString *)*v40);
  CFRelease(Mutable);
  _Block_object_dispose(v116, 8);
  _Block_object_dispose(v118, 8);
  _Block_object_dispose(v120, 8);
  if (v121)
  {
    v122 = v121;
    operator delete(v121);
  }
  _Block_object_dispose(&v124, 8);
  if (v128)
  {
    v129 = v128;
    operator delete(v128);
  }
  _Block_object_dispose(&v131, 8);
  if (v136)
  {
    v137 = v136;
    operator delete(v136);
  }
  return a1;
}

void sub_20B9D3D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void **a10, uint64_t a11, const void **a12, uint64_t a13, const void **a14, const void **a15, const void **a16, const void **a17, uint64_t a18, uint64_t a19, void **a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;
  char a69;
  uint64_t v69;
  uint64_t v70;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;

  if (__p)
    operator delete(__p);
  _Block_object_dispose(&a65, 8);
  _Block_object_dispose(&a69, 8);
  _Block_object_dispose(&STACK[0x200], 8);
  v72 = (void *)STACK[0x228];
  if (STACK[0x228])
  {
    STACK[0x230] = (unint64_t)v72;
    operator delete(v72);
  }
  _Block_object_dispose((const void *)(v70 - 224), 8);
  v73 = *(void **)(v70 - 192);
  if (v73)
  {
    *(_QWORD *)(v70 - 184) = v73;
    operator delete(v73);
  }
  _Block_object_dispose((const void *)(v70 - 168), 8);
  v74 = *(void **)(v70 - 128);
  if (v74)
  {
    *(_QWORD *)(v70 - 120) = v74;
    operator delete(v74);
  }
  sub_20B87E150((const void **)(v69 + 224), 0);
  v75 = *a9;
  if (*a9)
  {
    *(_QWORD *)(v69 + 208) = v75;
    operator delete(v75);
  }
  v76 = *a20;
  if (*a20)
  {
    *(_QWORD *)(v69 + 176) = v76;
    operator delete(v76);
  }
  v77 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v69 + 136) = v77;
    operator delete(v77);
  }
  *(_QWORD *)(v70 - 168) = v69 + 104;
  sub_20B8E736C((void ***)(v70 - 168));
  sub_20B87E150(a12, 0);
  sub_20B87E150(a14, 0);
  sub_20B87E150(a17, 0);
  sub_20B87E150(a15, 0);
  sub_20B87E150(a16, 0);
  _Unwind_Resume(a1);
}

void sub_20B9D3F20(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char **a7)
{
  _QWORD *v13;
  _QWORD *v14;
  char *v15;
  unint64_t v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t *v24;
  char *v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  void **v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  int64_t v59;
  char *v60;
  char *v61;
  int *v62;
  char *v63;
  int v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  int v69;
  char *v70;
  char *v71;
  int v72;
  char *v73;
  _BYTE *v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  __CFString *Copy;
  const __CFString *v81;
  const __CFString *v82;
  uint64_t v83;
  unsigned __int16 *v84;
  CFIndex v85;
  uint64_t v86;
  int v87;
  int v88;
  std::__shared_weak_count *v89;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v91;
  uint64_t v92;
  unint64_t v93;
  std::__shared_weak_count **v94;
  unint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  char *v102;
  std::__shared_weak_count **v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  int v107;
  int v108;
  const __CFString *v109;
  _QWORD *v110;
  char *v111;
  unint64_t v112;
  _WORD *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  char *v122;
  __int16 v123;
  _QWORD *v124;
  char *v125;
  unint64_t v126;
  _WORD *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  __int16 v137;
  unsigned int v138;
  int v139;
  uint64_t v140;
  char v141[8];
  uint64_t v142;
  uint64_t v143;
  unsigned int v145;
  uint64_t v146;
  unsigned __int16 *v147;
  CFIndex v148;
  _QWORD v149[6];

  v13 = *(_QWORD **)(a1 + 80);
  v14 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  v15 = (char *)v14[6];
  v16 = v14[7];
  if ((unint64_t)v15 >= v16)
  {
    v18 = (char *)v14[5];
    v19 = (v15 - v18) >> 4;
    v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 60)
      sub_20B80CDD8();
    v21 = v16 - (_QWORD)v18;
    if (v21 >> 3 > v20)
      v20 = v21 >> 3;
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0)
      v22 = 0xFFFFFFFFFFFFFFFLL;
    else
      v22 = v20;
    if (v22)
    {
      v23 = (char *)sub_20B829AD0((uint64_t)(v14 + 7), v22);
      v18 = (char *)v14[5];
      v15 = (char *)v14[6];
    }
    else
    {
      v23 = 0;
    }
    v24 = (uint64_t *)&v23[16 * v19];
    v25 = &v23[16 * v22];
    *v24 = a2;
    v24[1] = a3;
    v17 = v24 + 2;
    if (v15 != v18)
    {
      do
      {
        *((_OWORD *)v24 - 1) = *((_OWORD *)v15 - 1);
        v24 -= 2;
        v15 -= 16;
      }
      while (v15 != v18);
      v18 = (char *)v14[5];
    }
    v14[5] = v24;
    v14[6] = v17;
    v14[7] = v25;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *(_QWORD *)v15 = a2;
    *((_QWORD *)v15 + 1) = a3;
    v17 = v15 + 16;
  }
  v143 = a4;
  v14[6] = v17;
  v26 = *(_QWORD **)(*(_QWORD *)(a1 + 40) + 8);
  v27 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
  v28 = (char *)v26[6];
  v29 = v26[7];
  if ((unint64_t)v28 >= v29)
  {
    v31 = (char *)v26[5];
    v32 = (v28 - v31) >> 3;
    if ((unint64_t)(v32 + 1) >> 61)
      sub_20B80CDD8();
    v33 = v29 - (_QWORD)v31;
    v34 = (uint64_t)(v29 - (_QWORD)v31) >> 2;
    if (v34 <= v32 + 1)
      v34 = v32 + 1;
    if (v33 >= 0x7FFFFFFFFFFFFFF8)
      v35 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v35 = v34;
    if (v35)
    {
      v36 = (char *)sub_20B800BE8((uint64_t)(v26 + 7), v35);
      v31 = (char *)v26[5];
      v28 = (char *)v26[6];
    }
    else
    {
      v36 = 0;
    }
    v37 = &v36[8 * v32];
    v38 = &v36[8 * v35];
    *(_QWORD *)v37 = v27;
    v30 = v37 + 8;
    while (v28 != v31)
    {
      v39 = *((_QWORD *)v28 - 1);
      v28 -= 8;
      *((_QWORD *)v37 - 1) = v39;
      v37 -= 8;
    }
    v26[5] = v37;
    v26[6] = v30;
    v26[7] = v38;
    if (v31)
      operator delete(v31);
  }
  else
  {
    *(_QWORD *)v28 = v27;
    v30 = v28 + 8;
  }
  v26[6] = v30;
  v40 = *(_QWORD *)(a1 + 88);
  v146 = a2;
  v142 = a6;
  if (v40)
  {
    v41 = *(_QWORD *)(v40 + 40);
    *(_DWORD *)v141 = (v41 >> 2) & 1;
    *(_DWORD *)&v141[4] = (v41 >> 5) & 1;
    v140 = (v41 >> 4) & 1;
  }
  else
  {
    LOBYTE(v140) = 0;
    *(_QWORD *)v141 = 0;
  }
  v145 = *(_DWORD *)(*(_QWORD *)(a1 + 96) + 8) - 4;
  v139 = v145 < 3;
  v43 = *a7;
  v42 = a7[1];
  v44 = v42 - *a7;
  if (v44 >= 1)
  {
    v45 = v13[25];
    v46 = v13[26];
    v47 = (void **)(v13 + 25);
    v48 = v44 >> 2;
    v49 = v46 - v45;
    v50 = (char *)(v45 + ((v46 - v45) & 0xFFFFFFFFFFFFFFFCLL));
    v51 = v13[27];
    if (v48 > (uint64_t)(v51 - v46) >> 2)
    {
      v52 = v49 >> 2;
      v53 = (v49 >> 2) + v48;
      if (v53 >> 62)
        sub_20B80CDD8();
      v54 = v51 - v45;
      if (v54 >> 1 > v53)
        v53 = v54 >> 1;
      if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFFCLL)
        v55 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v55 = v53;
      if (v55)
        v56 = (char *)sub_20B8127BC((uint64_t)(v13 + 27), v55);
      else
        v56 = 0;
      v65 = &v56[4 * v52];
      v66 = &v65[4 * v48];
      v67 = 4 * v48;
      v68 = v65;
      do
      {
        v69 = *(_DWORD *)v43;
        v43 += 4;
        *(_DWORD *)v68 = v69;
        v68 += 4;
        v67 -= 4;
      }
      while (v67);
      v70 = (char *)*v47;
      if (*v47 != v50)
      {
        v71 = v50;
        do
        {
          v72 = *((_DWORD *)v71 - 1);
          v71 -= 4;
          *((_DWORD *)v65 - 1) = v72;
          v65 -= 4;
        }
        while (v71 != v70);
      }
      v73 = &v56[4 * v55];
      v74 = (_BYTE *)v13[26];
      v75 = v74 - v50;
      if (v74 != v50)
        memmove(v66, v50, v74 - v50);
      v76 = (void *)v13[25];
      v13[25] = v65;
      v13[26] = &v66[v75];
      v13[27] = v73;
      if (v76)
        operator delete(v76);
      goto LABEL_69;
    }
    v57 = (uint64_t)(v46 - (_QWORD)v50) >> 2;
    if (v57 >= v48)
    {
      v58 = &v43[4 * v48];
      v60 = (char *)v13[26];
    }
    else
    {
      v58 = &v43[4 * v57];
      v59 = v42 - v58;
      if (v42 != v58)
        memmove((void *)v13[26], &v43[4 * v57], v42 - v58);
      v60 = (char *)(v46 + v59);
      v13[26] = v46 + v59;
      if ((uint64_t)(v46 - (_QWORD)v50) < 1)
        goto LABEL_69;
    }
    v61 = &v50[4 * v48];
    v62 = (int *)&v60[-4 * v48];
    v63 = v60;
    if ((unint64_t)v62 < v46)
    {
      v63 = v60;
      do
      {
        v64 = *v62++;
        *(_DWORD *)v63 = v64;
        v63 += 4;
      }
      while ((unint64_t)v62 < v46);
    }
    v13[26] = v63;
    if (v60 != v61)
      memmove(&v60[-4 * ((v60 - v61) >> 2)], v50, v60 - v61);
    if (v58 != v43)
      memmove(v50, v43, v58 - v43);
  }
LABEL_69:
  v77 = *(_QWORD *)(a1 + 88);
  if ((*(_DWORD *)(*(_QWORD *)(a1 + 96) + 8) & 0xFFFFFFFD) == 8)
    v78 = 9;
  else
    v78 = 0;
  v138 = *(_DWORD *)(*(_QWORD *)(a1 + 96) + 8) & 0xFFFFFFFD;
  if (v77)
  {
    v79 = v146;
    Copy = sub_20B9D6774(v77, v146, a3);
LABEL_74:
    v81 = Copy;
    goto LABEL_79;
  }
  v79 = v146;
  if (a3 >= *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8))
  {
    v82 = *(const __CFString **)(*(_QWORD *)(a1 + 112) + 8);
    if (v82)
    {
      Copy = (__CFString *)CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], v82);
      goto LABEL_74;
    }
  }
  v81 = 0;
LABEL_79:
  v83 = *(_QWORD *)(a1 + 120);
  v84 = (unsigned __int16 *)(v83 + 2 * v79);
  if (v83)
    v85 = a3;
  else
    v85 = 0;
  v147 = v84;
  v148 = v85;
  if (*(_BYTE *)(a1 + 168) || a3 != *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8))
  {
    v86 = a3;
    v87 = sub_20B9B3B94(*(_QWORD *)(a1 + 144), &v147, v81);
  }
  else
  {
    v86 = a3;
    v87 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 24))(*(_QWORD *)(a1 + 96));
  }
  v88 = v87;
  v89 = (std::__shared_weak_count *)operator new(0xA0uLL);
  v89->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v89->__shared_owners_;
  v89->__shared_weak_owners_ = 0;
  v89->__vftable = (std::__shared_weak_count_vtbl *)&off_24C46B9B8;
  v91 = v89 + 1;
  v92 = v86;
  sub_20B8BDC08((uint64_t)&v89[1], v146, v86, v88, v78, 0, v81, v142, v143, a5, v141[4], v141[0], v140, v145 < 3);
  v93 = v13[15];
  v94 = (std::__shared_weak_count **)v13[14];
  if ((unint64_t)v94 >= v93)
  {
    v97 = v13[13];
    v98 = ((uint64_t)v94 - v97) >> 4;
    v99 = v98 + 1;
    if ((unint64_t)(v98 + 1) >> 60)
      sub_20B80CDD8();
    v100 = v93 - v97;
    if (v100 >> 3 > v99)
      v99 = v100 >> 3;
    if ((unint64_t)v100 >= 0x7FFFFFFFFFFFFFF0)
      v101 = 0xFFFFFFFFFFFFFFFLL;
    else
      v101 = v99;
    v149[4] = v13 + 15;
    v102 = (char *)sub_20B8F6ECC(v101);
    v103 = (std::__shared_weak_count **)&v102[16 * v98];
    v149[0] = v102;
    v149[1] = v103;
    v149[3] = &v102[16 * v104];
    *v103 = v91;
    v103[1] = v89;
    do
      v105 = __ldxr(p_shared_owners);
    while (__stxr(v105 + 1, p_shared_owners));
    v149[2] = v103 + 2;
    sub_20B9D5EF4(v13 + 13, v149);
    v96 = (_QWORD *)v13[14];
    sub_20B9061D0((uint64_t)v149);
  }
  else
  {
    *v94 = v91;
    v94[1] = v89;
    do
      v95 = __ldxr(p_shared_owners);
    while (__stxr(v95 + 1, p_shared_owners));
    v96 = v94 + 2;
  }
  v13[14] = v96;
  do
    v106 = __ldaxr(p_shared_owners);
  while (__stlxr(v106 - 1, p_shared_owners));
  if (!v106)
  {
    ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
    std::__shared_weak_count::__release_weak(v89);
  }
  if (v81)
    CFRelease(v81);
  v107 = sub_20B8D2B6C((uint64_t *)&v147, (_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24), (_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24));
  if (*(_BYTE *)(a1 + 169))
    goto LABEL_168;
  v108 = v107;
  if (!*(_BYTE *)(a1 + 170) || v145 < 3 || v138 != 8)
    goto LABEL_114;
  v109 = CFStringCreateWithCharacters(0, v147, v148);
  v149[0] = v109;
  v139 = sub_20B896464(v109);
  if (v109)
    CFRelease(v109);
  if (*(_BYTE *)(a1 + 169))
  {
LABEL_168:
    if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24))
      goto LABEL_117;
  }
  else
  {
LABEL_114:
    if (!v108)
      goto LABEL_117;
  }
  if (*(uint64_t *)(a1 + 152) > 0 || v146 > 0)
    goto LABEL_120;
LABEL_117:
  if (!(*(_QWORD *)(a1 + 152) | v146) && *(_BYTE *)(a1 + 170) && v139)
  {
LABEL_120:
    v110 = *(_QWORD **)(*(_QWORD *)(a1 + 72) + 8);
    v111 = (char *)v110[6];
    v112 = v110[7];
    if ((unint64_t)v111 >= v112)
    {
      v114 = (char *)v110[5];
      v115 = v111 - v114;
      if (v111 - v114 <= -3)
        goto LABEL_164;
      v116 = v115 >> 1;
      v117 = v112 - (_QWORD)v114;
      if (v117 <= (v115 >> 1) + 1)
        v118 = v116 + 1;
      else
        v118 = v117;
      if (v117 >= 0x7FFFFFFFFFFFFFFELL)
        v119 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v119 = v118;
      if (v119)
      {
        v120 = (char *)sub_20B80FD48((uint64_t)(v110 + 7), v119);
        v114 = (char *)v110[5];
        v111 = (char *)v110[6];
      }
      else
      {
        v120 = 0;
      }
      v121 = &v120[2 * v116];
      v122 = &v120[2 * v119];
      *(_WORD *)v121 = 32;
      v113 = v121 + 2;
      while (v111 != v114)
      {
        v123 = *((_WORD *)v111 - 1);
        v111 -= 2;
        *((_WORD *)v121 - 1) = v123;
        v121 -= 2;
      }
      v110[5] = v121;
      v110[6] = v113;
      v110[7] = v122;
      if (v114)
        operator delete(v114);
    }
    else
    {
      *(_WORD *)v111 = 32;
      v113 = v111 + 2;
    }
    v110[6] = v113;
  }
  sub_20B87D600(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 48), (char *)v147, (char *)&v147[v148], v148);
  if (*(_BYTE *)(a1 + 169)
    && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24)
    && (*(_QWORD *)(a1 + 152) < *(_QWORD *)(a1 + 160) - 1
     || v92 + v146 < (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 128) - *(_QWORD *)(a1 + 120)) >> 1)))
  {
    v124 = *(_QWORD **)(*(_QWORD *)(a1 + 72) + 8);
    v125 = (char *)v124[6];
    v126 = v124[7];
    if ((unint64_t)v125 < v126)
    {
      *(_WORD *)v125 = 32;
      v127 = v125 + 2;
LABEL_159:
      v124[6] = v127;
      return;
    }
    v128 = (char *)v124[5];
    v129 = v125 - v128;
    if (v125 - v128 > -3)
    {
      v130 = v129 >> 1;
      v131 = v126 - (_QWORD)v128;
      if (v131 <= (v129 >> 1) + 1)
        v132 = v130 + 1;
      else
        v132 = v131;
      if (v131 >= 0x7FFFFFFFFFFFFFFELL)
        v133 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v133 = v132;
      if (v133)
      {
        v134 = (char *)sub_20B80FD48((uint64_t)(v124 + 7), v133);
        v128 = (char *)v124[5];
        v125 = (char *)v124[6];
      }
      else
      {
        v134 = 0;
      }
      v135 = &v134[2 * v130];
      v136 = &v134[2 * v133];
      *(_WORD *)v135 = 32;
      v127 = v135 + 2;
      while (v125 != v128)
      {
        v137 = *((_WORD *)v125 - 1);
        v125 -= 2;
        *((_WORD *)v135 - 1) = v137;
        v135 -= 2;
      }
      v124[5] = v135;
      v124[6] = v127;
      v124[7] = v136;
      if (v128)
        operator delete(v128);
      goto LABEL_159;
    }
LABEL_164:
    sub_20B80CDD8();
  }
}

void sub_20B9D4838(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B87E150((const void **)(v1 - 128), 0);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B9D487C(uint64_t *result, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[5];

  if (a2 > (result[2] - *result) >> 4)
  {
    if (a2 >> 60)
      sub_20B80CDD8();
    v2 = result;
    v3 = result[1] - *result;
    v5[4] = result + 2;
    v5[0] = sub_20B8F6ECC(a2);
    v5[1] = v5[0] + v3;
    v5[2] = v5[0] + v3;
    v5[3] = v5[0] + 16 * v4;
    sub_20B9D5EF4(v2, v5);
    return (uint64_t *)sub_20B9061D0((uint64_t)v5);
  }
  return result;
}

uint64_t sub_20B9D48FC(uint64_t a1, uint64_t a2, const __CFString *a3, CFStringRef theString, uint64_t *a5, int a6, int a7)
{
  char v7;
  uint64_t v12;
  uint64_t v13;
  const __CFAllocator *v14;
  CFStringRef Copy;
  int v16;
  int v17;
  uint64_t v18;
  CFIndex v19;
  CFIndex v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count **v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  std::__shared_weak_count **v36;
  uint64_t v37;
  unint64_t v38;
  unsigned __int16 *v39;
  uint64_t v40;
  unint64_t v41;
  unsigned int v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  unint64_t v45;
  unsigned __int16 *v46;
  unsigned int v47;
  uint64_t v48;
  unint64_t v49;
  unsigned __int16 *v50;
  unsigned int v51;
  unint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  unint64_t v56;
  int v57;
  _BYTE *v58;
  CFIndex Length;
  int v60;
  int v61;
  int v62;
  std::__shared_weak_count *v63;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v65;
  unint64_t v66;
  std::__shared_weak_count **v67;
  unint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  std::__shared_weak_count **v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  CFStringRef v79;
  CFIndex v80;
  const __CFString *v81;
  CFStringRef v82;
  CFIndex v83;
  const __CFString *v84;
  CFStringRef v85;
  CFIndex v86;
  const __CFString *v87;
  CFRange v88;
  CFStringRef v89;
  const void **v91;
  const void **v92;
  const void **v93;
  const void **v94;
  const __CFAllocator *alloc;
  CFStringRef theStringa;
  const __CFString *theStringb;
  uint64_t *v98;
  CFIndex range;
  int rangea;
  uint64_t v101;
  unsigned __int16 *v102;
  unsigned __int16 *v103;
  void *__p;
  std::__shared_weak_count *v105;
  std::__shared_weak_count *v106;
  std::__shared_weak_count *v107;
  void *v108[3];
  void *v109[3];
  void *v110[3];
  unsigned __int16 *v111;
  std::__shared_weak_count **v112;
  _QWORD *v113;
  char *v114;
  CFStringRef v115;
  CFRange v116;
  CFRange v117;

  v7 = a7;
  v12 = a1;
  v13 = *(_QWORD *)(a2 + 32);
  *(_WORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = a6;
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = v13;
  *(_QWORD *)a1 = off_24C467CE0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = &unk_24C467F48;
  *(_DWORD *)(a1 + 48) = a7;
  *(_QWORD *)(a1 + 52) = *(_QWORD *)(a2 + 52);
  v14 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  *(_QWORD *)(a1 + 64) = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], theString);
  Copy = CFStringCreateCopy(v14, a3);
  *(_OWORD *)(v12 + 80) = 0u;
  *(_QWORD *)(v12 + 72) = Copy;
  *(_OWORD *)(v12 + 96) = 0u;
  v92 = (const void **)(v12 + 96);
  v93 = (const void **)(v12 + 88);
  v98 = (uint64_t *)(v12 + 104);
  *(_OWORD *)(v12 + 112) = 0u;
  *(_OWORD *)(v12 + 128) = 0u;
  *(_QWORD *)(v12 + 144) = 0;
  *(_DWORD *)(v12 + 152) = *(_DWORD *)(a2 + 152);
  v94 = (const void **)(v12 + 80);
  *(_DWORD *)(v12 + 156) = *(_DWORD *)(a2 + 156);
  v16 = sub_20B8D345C(theString);
  *(_QWORD *)(v12 + 168) = 0;
  *(_DWORD *)(v12 + 160) = v16;
  *(_QWORD *)(v12 + 176) = 0;
  *(_QWORD *)(v12 + 184) = 0;
  sub_20B995634((_QWORD *)(v12 + 168), *(const void **)(a2 + 168), *(_QWORD *)(a2 + 176), (uint64_t)(*(_QWORD *)(a2 + 176) - *(_QWORD *)(a2 + 168)) >> 3);
  v17 = *(_DWORD *)(a2 + 192);
  *(_QWORD *)(v12 + 200) = 0;
  *(_DWORD *)(v12 + 192) = v17;
  *(_QWORD *)(v12 + 208) = 0;
  *(_QWORD *)(v12 + 216) = 0;
  v101 = v12;
  sub_20B94308C((_QWORD *)(v12 + 200), *(const void **)(a2 + 200), *(_QWORD *)(a2 + 208), (uint64_t)(*(_QWORD *)(a2 + 208) - *(_QWORD *)(a2 + 200)) >> 2);
  *(_QWORD *)(v12 + 224) = 0;
  v91 = (const void **)(v12 + 224);
  sub_20B9D487C((uint64_t *)(v12 + 104), (uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 4);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 432))(v110, a2, 1);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 432))(v109, a2, 2);
  (*(void (**)(void **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a2 + 432))(v108, a2, 0);
  alloc = v14;
  if ((v7 & 0x40) != 0)
  {
    if (*a5 == a5[1])
    {
      range = 0;
      v20 = 0;
      v19 = 0;
    }
    else
    {
      v53 = 0;
      v54 = 0;
      v55 = 0;
      v56 = 0;
      v57 = *(_DWORD *)(**(_QWORD **)(a2 + 104) + 40);
      do
      {
        v58 = *(_BYTE **)(*(_QWORD *)(a2 + 104) + v53);
        v55 += (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v58 + 16))(v58);
        v54 |= v58[32] & 1;
        ++v56;
        v53 += 16;
      }
      while (v56 < (a5[1] - *a5) >> 2);
      rangea = v57;
      Length = CFStringGetLength(theString);
      theStringb = *(const __CFString **)(a2 + 96);
      v60 = *(unsigned __int8 *)(a2 + 152);
      v61 = *(unsigned __int8 *)(a2 + 153);
      v62 = *(unsigned __int8 *)(a2 + 155);
      v63 = (std::__shared_weak_count *)operator new(0xA0uLL);
      v63->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v63->__shared_owners_;
      v63->__shared_weak_owners_ = 0;
      v63->__vftable = (std::__shared_weak_count_vtbl *)&off_24C46B9B8;
      v65 = v63 + 1;
      sub_20B8BDC08((uint64_t)&v63[1], 0, Length, 0, rangea, (unsigned __int16)v55, theStringb, (uint64_t)v110, (uint64_t)v109, (uint64_t)v108, v60 != 0, v54 != 0, v61 != 0, v62 != 0);
      __p = &v63[1];
      v105 = v63;
      v12 = v101;
      v66 = *(_QWORD *)(v101 + 120);
      v67 = *(std::__shared_weak_count ***)(v101 + 112);
      v14 = alloc;
      if ((unint64_t)v67 >= v66)
      {
        v70 = ((uint64_t)v67 - *v98) >> 4;
        v71 = v70 + 1;
        if ((unint64_t)(v70 + 1) >> 60)
          sub_20B80CDD8();
        v72 = v66 - *v98;
        if (v72 >> 3 > v71)
          v71 = v72 >> 3;
        if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF0)
          v73 = 0xFFFFFFFFFFFFFFFLL;
        else
          v73 = v71;
        v115 = (CFStringRef)(v101 + 120);
        v74 = (char *)sub_20B8F6ECC(v73);
        v75 = (std::__shared_weak_count **)&v74[16 * v70];
        v111 = (unsigned __int16 *)v74;
        v112 = v75;
        v114 = &v74[16 * v76];
        *v75 = v65;
        v75[1] = v63;
        do
          v77 = __ldxr(p_shared_owners);
        while (__stxr(v77 + 1, p_shared_owners));
        v113 = v75 + 2;
        sub_20B9D5EF4(v98, &v111);
        v69 = *(_QWORD **)(v101 + 112);
        sub_20B9061D0((uint64_t)&v111);
      }
      else
      {
        *v67 = v65;
        v67[1] = v63;
        do
          v68 = __ldxr(p_shared_owners);
        while (__stxr(v68 + 1, p_shared_owners));
        v69 = v67 + 2;
      }
      *(_QWORD *)(v101 + 112) = v69;
      v19 = CFStringGetLength(*(CFStringRef *)(a2 + 80));
      v20 = CFStringGetLength(*(CFStringRef *)(a2 + 88));
      range = CFStringGetLength(*(CFStringRef *)(a2 + 96));
      do
        v78 = __ldaxr(p_shared_owners);
      while (__stlxr(v78 - 1, p_shared_owners));
      if (!v78)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
    v79 = CFStringCreateCopy(v14, *(CFStringRef *)(a2 + 64));
    sub_20B87E150(v91, v79);
  }
  else
  {
    v18 = *a5;
    if (a5[1] != *a5)
    {
      v19 = 0;
      v20 = 0;
      range = 0;
      v21 = 0;
      theStringa = (CFStringRef)(v12 + 120);
      while (1)
      {
        v22 = *(_QWORD *)(*(_QWORD *)(a2 + 104) + 16 * v21);
        v23 = *(_DWORD *)(v18 + 4 * v21);
        v24 = (std::__shared_weak_count *)operator new(0xA0uLL);
        v24->__shared_owners_ = 0;
        v25 = (unint64_t *)&v24->__shared_owners_;
        v24->__shared_weak_owners_ = 0;
        v24->__vftable = (std::__shared_weak_count_vtbl *)&off_24C46B9B8;
        v26 = v24 + 1;
        sub_20B8BDF1C((uint64_t)&v24[1], v22, v23);
        v106 = v24 + 1;
        v107 = v24;
        v27 = *(std::__shared_weak_count ***)(v101 + 112);
        v28 = *(_QWORD *)(v101 + 120);
        if ((unint64_t)v27 >= v28)
        {
          v31 = ((uint64_t)v27 - *v98) >> 4;
          v32 = v31 + 1;
          if ((unint64_t)(v31 + 1) >> 60)
            sub_20B80CDD8();
          v33 = v28 - *v98;
          if (v33 >> 3 > v32)
            v32 = v33 >> 3;
          v34 = (unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v32;
          v115 = theStringa;
          v35 = (char *)sub_20B8F6ECC(v34);
          v36 = (std::__shared_weak_count **)&v35[16 * v31];
          v111 = (unsigned __int16 *)v35;
          v112 = v36;
          v114 = &v35[16 * v37];
          *v36 = v26;
          v36[1] = v24;
          do
            v38 = __ldxr(v25);
          while (__stxr(v38 + 1, v25));
          v113 = v36 + 2;
          sub_20B9D5EF4(v98, &v111);
          v12 = v101;
          v30 = *(_QWORD **)(v101 + 112);
          sub_20B9061D0((uint64_t)&v111);
        }
        else
        {
          *v27 = v26;
          v27[1] = v24;
          do
            v29 = __ldxr(v25);
          while (__stxr(v29 + 1, v25));
          v30 = v27 + 2;
          v12 = v101;
        }
        *(_QWORD *)(v12 + 112) = v30;
        (*(void (**)(unsigned __int16 **__return_ptr, uint64_t))(*(_QWORD *)v22 + 40))(&v111, v22);
        (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v22 + 48))(&__p, v22);
        (*(void (**)(unsigned __int16 **__return_ptr, uint64_t))(*(_QWORD *)v22 + 56))(&v102, v22);
        v39 = v111;
        v40 = 0;
        if (v112 != (std::__shared_weak_count **)v111)
        {
          v41 = ((char *)v112 - (char *)v111) >> 1;
          if (v41 <= 1)
            v41 = 1;
          do
          {
            v42 = *v39++;
            v40 += v42;
            --v41;
          }
          while (v41);
        }
        v43 = (std::__shared_weak_count *)__p;
        v44 = 0;
        if (v105 != __p)
        {
          v45 = ((char *)v105 - (_BYTE *)__p) >> 1;
          if (v45 <= 1)
            v45 = 1;
          v46 = (unsigned __int16 *)__p;
          do
          {
            v47 = *v46++;
            v44 += v47;
            --v45;
          }
          while (v45);
        }
        if (v103 != v102)
          break;
        if (v103)
          goto LABEL_33;
LABEL_34:
        if (v43)
        {
          v105 = v43;
          operator delete(v43);
        }
        if (v111)
        {
          v112 = (std::__shared_weak_count **)v111;
          operator delete(v111);
        }
        v19 += v40;
        v20 += v44;
        do
          v52 = __ldaxr(v25);
        while (__stlxr(v52 - 1, v25));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
        ++v21;
        v18 = *a5;
        if (v21 >= (a5[1] - *a5) >> 2)
          goto LABEL_67;
      }
      v48 = 0;
      v49 = v103 - v102;
      if (v49 <= 1)
        v49 = 1;
      v50 = v102;
      do
      {
        v51 = *v50++;
        v48 += v51;
        --v49;
      }
      while (v49);
      range += v48;
LABEL_33:
      v103 = v102;
      operator delete(v102);
      v43 = (std::__shared_weak_count *)__p;
      goto LABEL_34;
    }
    range = 0;
    v20 = 0;
    v19 = 0;
  }
LABEL_67:
  v80 = CFStringGetLength(*(CFStringRef *)(a2 + 80));
  v81 = *(const __CFString **)(a2 + 80);
  if (v19 <= v80)
  {
    v116.location = 0;
    v116.length = v19;
    v82 = CFStringCreateWithSubstring(alloc, v81, v116);
  }
  else
  {
    v82 = CFStringCreateCopy(alloc, v81);
  }
  sub_20B87E150(v94, v82);
  v83 = CFStringGetLength(*(CFStringRef *)(a2 + 88));
  v84 = *(const __CFString **)(a2 + 88);
  if (v20 <= v83)
  {
    v117.location = 0;
    v117.length = v20;
    v85 = CFStringCreateWithSubstring(alloc, v84, v117);
  }
  else
  {
    v85 = CFStringCreateCopy(alloc, v84);
  }
  sub_20B87E150(v93, v85);
  v86 = CFStringGetLength(*(CFStringRef *)(a2 + 96));
  v87 = *(const __CFString **)(a2 + 96);
  v88.length = range;
  if (range >= v86)
  {
    v89 = CFStringCreateCopy(alloc, v87);
  }
  else
  {
    v88.location = 0;
    v89 = CFStringCreateWithSubstring(alloc, v87, v88);
  }
  sub_20B87E150(v92, v89);
  if (v108[0])
  {
    v108[1] = v108[0];
    operator delete(v108[0]);
  }
  if (v109[0])
  {
    v109[1] = v109[0];
    operator delete(v109[0]);
  }
  if (v110[0])
  {
    v110[1] = v110[0];
    operator delete(v110[0]);
  }
  return v12;
}

void sub_20B9D50BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, void **a13, const void **a14, const void **a15, const void **a16, const void **a17, const void **a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,_QWORD *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,void *__p,uint64_t a33)
{
  std::__shared_weak_count *v33;
  uint64_t v34;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;

  std::__shared_weak_count::~__shared_weak_count(v33);
  operator delete(v36);
  if (__p)
    operator delete(__p);
  v37 = *(void **)(v34 - 176);
  if (v37)
  {
    *(_QWORD *)(v34 - 168) = v37;
    operator delete(v37);
  }
  v38 = *(void **)(v34 - 152);
  if (v38)
  {
    *(_QWORD *)(v34 - 144) = v38;
    operator delete(v38);
  }
  sub_20B87E150(a15, 0);
  v39 = *a12;
  if (*a12)
  {
    a23[26] = v39;
    operator delete(v39);
  }
  v40 = *a13;
  if (*a13)
  {
    a23[22] = v40;
    operator delete(v40);
  }
  v41 = (void *)a23[16];
  if (v41)
  {
    a23[17] = v41;
    operator delete(v41);
  }
  *(_QWORD *)(v34 - 152) = a21;
  sub_20B8E736C((void ***)(v34 - 152));
  sub_20B87E150(a16, 0);
  sub_20B87E150(a17, 0);
  sub_20B87E150(a18, 0);
  sub_20B87E150(a14 + 1, 0);
  sub_20B87E150(a14, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9D5258(uint64_t a1)
{
  uint64_t v1;
  unsigned __int16 v2;

  v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  else
    return 0;
  return v2;
}

uint64_t sub_20B9D5290(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

uint64_t sub_20B9D52C0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 312))(a1);
}

CFStringRef sub_20B9D52CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  __int16 v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  __int16 v16;
  CFStringRef v17;
  void *v19;
  void *v20;
  void *__p;
  char *v22;
  char *v23;

  __p = 0;
  v22 = 0;
  v23 = 0;
  v1 = *(_QWORD *)(a1 + 104);
  v2 = *(_QWORD *)(a1 + 112);
  do
  {
    (*(void (**)(void **__return_ptr))(**(_QWORD **)v1 + 56))(&v19);
    v3 = v20;
    if (v20 != v19)
    {
      v4 = 0;
      if ((unint64_t)(((_BYTE *)v20 - (_BYTE *)v19) >> 1) <= 1)
        v5 = 1;
      else
        v5 = ((_BYTE *)v20 - (_BYTE *)v19) >> 1;
      v6 = v22;
      do
      {
        v7 = *((_WORD *)v19 + v4) + 48;
        if (v6 >= v23)
        {
          v9 = (char *)__p;
          v10 = v6 - (_BYTE *)__p;
          if (v6 - (_BYTE *)__p <= -3)
            sub_20B80CDD8();
          v11 = v10 >> 1;
          if (v23 - (_BYTE *)__p <= (unint64_t)((v10 >> 1) + 1))
            v12 = v11 + 1;
          else
            v12 = v23 - (_BYTE *)__p;
          if ((unint64_t)(v23 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFELL)
            v13 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v13 = v12;
          if (v13)
          {
            v14 = (char *)sub_20B80FD48((uint64_t)&v23, v13);
            v9 = (char *)__p;
            v6 = v22;
          }
          else
          {
            v14 = 0;
          }
          v15 = &v14[2 * v11];
          *(_WORD *)v15 = v7;
          v8 = v15 + 2;
          while (v6 != v9)
          {
            v16 = *((_WORD *)v6 - 1);
            v6 -= 2;
            *((_WORD *)v15 - 1) = v16;
            v15 -= 2;
          }
          __p = v15;
          v22 = v8;
          v23 = &v14[2 * v13];
          if (v9)
            operator delete(v9);
        }
        else
        {
          *(_WORD *)v6 = v7;
          v8 = v6 + 2;
        }
        v22 = v8;
        ++v4;
        v6 = v8;
      }
      while (v4 != v5);
      v3 = v19;
    }
    if (v3)
    {
      v20 = v3;
      operator delete(v3);
    }
    v1 += 16;
  }
  while (v1 != v2);
  v17 = CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x24BDBD240], (const UniChar *)__p, (v22 - (_BYTE *)__p) >> 1);
  if (__p)
  {
    v22 = (char *)__p;
    operator delete(__p);
  }
  return v17;
}

void sub_20B9D546C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__CFString *sub_20B9D54A8(uint64_t a1)
{
  __CFString *Mutable;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  const __CFString *v6;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0);
  v3 = *(uint64_t **)(a1 + 104);
  v4 = *(uint64_t **)(a1 + 112);
  while (v3 != v4)
  {
    v5 = *v3;
    v3 += 2;
    v6 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5);
    CFStringAppend(Mutable, v6);
    CFRelease(v6);
  }
  return Mutable;
}

uint64_t sub_20B9D5520(_QWORD *a1, unint64_t a2)
{
  if ((a2 & 0x8000000000000000) != 0)
    return 0;
  if ((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) <= a2)
    return 0;
  return *(_QWORD *)(a1[13] + 16 * a2);
}

CFIndex sub_20B9D5574(const __CFString *a1, const __CFString *a2, uint64_t a3)
{
  CFIndex Length;
  CFIndex v7;
  uint64_t v9;
  CFIndex v10;
  CFIndex v11;
  CFIndex v12;
  int CharacterAtIndex;

  Length = CFStringGetLength(a1);
  v7 = CFStringGetLength(a2);
  if (Length < v7)
    return 0;
  v9 = 0;
  if (a3 < 1 || Length < 1)
  {
    v11 = 0;
  }
  else
  {
    v10 = v7;
    v11 = 0;
    if (v7 >= 1)
    {
      v12 = 0;
      v11 = 0;
      v9 = 0;
      do
      {
        CharacterAtIndex = CFStringGetCharacterAtIndex(a1, v11);
        if (CharacterAtIndex == CFStringGetCharacterAtIndex(a2, v12))
        {
          ++v9;
          ++v12;
        }
        else if (CharacterAtIndex != 32)
        {
          return 0;
        }
        ++v11;
      }
      while (v9 < a3 && v11 < Length && v12 < v10);
    }
  }
  if (v9 == a3)
    return v11;
  else
    return 0;
}

uint64_t sub_20B9D566C(int *a1, CFStringRef theString, const __CFString *a3, uint64_t *a4, int a5, int a6, uint64_t a7)
{
  CFIndex Length;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  CFIndex v19;
  CFIndex v20;
  const __CFAllocator *v21;
  const __CFString *v22;
  const __CFString *v23;
  uint64_t v24;
  CFRange v26;
  CFRange v27;

  Length = CFStringGetLength(theString);
  if (Length > a6)
  {
    Length = 0;
    if ((a7 & 0x8000000000000000) == 0)
    {
      v15 = 0;
      do
      {
        v16 = (*(uint64_t (**)(int *, uint64_t))(*(_QWORD *)a1 + 120))(a1, v15);
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
        Length += v17;
        ++v15;
      }
      while (a7 + 1 != v15);
    }
    v18 = *a4 + 4 * a7 + 4;
    if (v18 != a4[1])
      a4[1] = v18;
  }
  v19 = sub_20B9D5574(a3, theString, Length);
  if (v19 < 1)
    return 0;
  v20 = v19;
  v21 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v26.location = 0;
  v26.length = Length;
  v22 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x24BDBD240], theString, v26);
  v27.location = 0;
  v27.length = v20;
  v23 = CFStringCreateWithSubstring(v21, a3, v27);
  v24 = operator new();
  sub_20B9D48FC(v24, (uint64_t)a1, v22, v23, a4, a5, a1[12]);
  CFRelease(v22);
  CFRelease(v23);
  return v24;
}

void sub_20B9D57DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10F1C400B1D9961);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9D5800(uint64_t a1, const __CFString *a2)
{
  uint64_t v4;
  void *__p[3];

  v4 = operator new();
  sub_20B9C7AE0(a1, (char **)__p);
  sub_20B9D48FC(v4, a1, a2, a2, (uint64_t *)__p, 0, 64);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v4;
}

void sub_20B9D588C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x20BD39CB0](v11, 0x10F1C400B1D9961);
  _Unwind_Resume(a1);
}

CFIndex sub_20B9D58C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  CFIndex Length;
  std::__shared_weak_count *v4;
  _BYTE *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  const __CFString *v8;
  const __CFString *v9;
  unint64_t *v10;
  unint64_t v11;

  v1 = *(_QWORD *)(a1 + 104);
  v2 = *(_QWORD *)(a1 + 112);
  if (v1 == v2)
    return 0;
  Length = 0;
  do
  {
    v5 = *(_BYTE **)v1;
    v4 = *(std::__shared_weak_count **)(v1 + 8);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    if ((v5[32] & 8) != 0)
    {
      v8 = (const __CFString *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v5 + 64))(v5);
      if (CFStringGetLength(v8) > Length)
      {
        v9 = (const __CFString *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v5 + 64))(v5);
        Length = CFStringGetLength(v9);
      }
    }
    if (v4)
    {
      v10 = (unint64_t *)&v4->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    v1 += 16;
  }
  while (v1 != v2);
  return Length;
}

void sub_20B9D59B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B811FE4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9D59C4(uint64_t a1)
{
  uint64_t v2;
  const __CFAllocator *v3;
  CFStringRef Copy;
  _QWORD *v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD v26[5];

  v2 = operator new();
  *(_WORD *)(v2 + 16) = 0;
  *(_DWORD *)(v2 + 20) = *(_DWORD *)(a1 - 20);
  *(_BYTE *)(v2 + 24) = *(_BYTE *)(a1 - 16);
  *(_QWORD *)(v2 + 32) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)v2 = off_24C467CE0;
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 40) = &unk_24C467F48;
  *(_QWORD *)(v2 + 48) = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(v2 + 56) = *(_DWORD *)(a1 + 16);
  v3 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  *(_QWORD *)(v2 + 64) = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], *(CFStringRef *)(a1 + 24));
  *(_QWORD *)(v2 + 72) = CFStringCreateCopy(v3, *(CFStringRef *)(a1 + 32));
  *(_QWORD *)(v2 + 80) = CFStringCreateCopy(v3, *(CFStringRef *)(a1 + 40));
  *(_QWORD *)(v2 + 88) = CFStringCreateCopy(v3, *(CFStringRef *)(a1 + 40));
  Copy = CFStringCreateCopy(v3, *(CFStringRef *)(a1 + 56));
  *(_OWORD *)(v2 + 104) = 0u;
  v5 = (_QWORD *)(v2 + 104);
  *(_QWORD *)(v2 + 96) = Copy;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_DWORD *)(v2 + 152) = *(_DWORD *)(a1 + 112);
  *(_QWORD *)(v2 + 156) = *(_QWORD *)(a1 + 116);
  *(_QWORD *)(v2 + 168) = 0;
  *(_QWORD *)(v2 + 176) = 0;
  *(_QWORD *)(v2 + 184) = 0;
  sub_20B995634((_QWORD *)(v2 + 168), *(const void **)(a1 + 128), *(_QWORD *)(a1 + 136), (uint64_t)(*(_QWORD *)(a1 + 136) - *(_QWORD *)(a1 + 128)) >> 3);
  v6 = *(_DWORD *)(a1 + 152);
  *(_QWORD *)(v2 + 200) = 0;
  *(_DWORD *)(v2 + 192) = v6;
  *(_QWORD *)(v2 + 208) = 0;
  *(_QWORD *)(v2 + 216) = 0;
  sub_20B94308C((_QWORD *)(v2 + 200), *(const void **)(a1 + 160), *(_QWORD *)(a1 + 168), (uint64_t)(*(_QWORD *)(a1 + 168) - *(_QWORD *)(a1 + 160)) >> 2);
  *(_QWORD *)(v2 + 224) = 0;
  sub_20B9D487C((uint64_t *)(v2 + 104), (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 4);
  if (*(_QWORD *)(a1 + 72) != *(_QWORD *)(a1 + 64))
  {
    v7 = 0;
    do
    {
      v8 = operator new();
      sub_20B8BDDD8(v8, *(_QWORD *)(*(_QWORD *)(a1 + 64) + 16 * v7));
      v9 = (std::__shared_weak_count *)operator new();
      v10 = v9;
      v9->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C46BEC0;
      v9->__shared_weak_owners_ = 0;
      v9[1].__vftable = (std::__shared_weak_count_vtbl *)v8;
      v12 = *(uint64_t **)(v2 + 112);
      v13 = *(_QWORD *)(v2 + 120);
      if ((unint64_t)v12 >= v13)
      {
        v16 = ((uint64_t)v12 - *v5) >> 4;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 60)
          sub_20B80CDD8();
        v18 = v13 - *v5;
        if (v18 >> 3 > v17)
          v17 = v18 >> 3;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0)
          v19 = 0xFFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        v26[4] = v2 + 120;
        v20 = (char *)sub_20B8F6ECC(v19);
        v21 = (uint64_t *)&v20[16 * v16];
        v26[0] = v20;
        v26[1] = v21;
        v26[3] = &v20[16 * v22];
        *v21 = v8;
        v21[1] = (uint64_t)v10;
        do
          v23 = __ldxr(p_shared_owners);
        while (__stxr(v23 + 1, p_shared_owners));
        v26[2] = v21 + 2;
        sub_20B9D5EF4((uint64_t *)(v2 + 104), v26);
        v15 = *(_QWORD **)(v2 + 112);
        sub_20B9061D0((uint64_t)v26);
      }
      else
      {
        *v12 = v8;
        v12[1] = (uint64_t)v9;
        do
          v14 = __ldxr(p_shared_owners);
        while (__stxr(v14 + 1, p_shared_owners));
        v15 = v12 + 2;
      }
      *(_QWORD *)(v2 + 112) = v15;
      do
        v24 = __ldaxr(p_shared_owners);
      while (__stlxr(v24 - 1, p_shared_owners));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
      ++v7;
    }
    while (v7 < (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 4);
  }
  return v2;
}

void sub_20B9D5CC0(_Unwind_Exception *a1, const void **a2, void **a3, void **a4, ...)
{
  uint64_t v4;
  void *v6;
  void *v7;
  void *v8;
  va_list va;

  va_start(va, a4);
  sub_20B87E150(a2, 0);
  v6 = *a3;
  if (*a3)
  {
    *(_QWORD *)(v4 + 208) = v6;
    operator delete(v6);
  }
  v7 = *a4;
  if (*a4)
  {
    *(_QWORD *)(v4 + 176) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(v4 + 128);
  if (v8)
  {
    *(_QWORD *)(v4 + 136) = v8;
    operator delete(v8);
  }
  sub_20B8E736C((void ***)va);
  sub_20B87E150((const void **)(v4 + 96), 0);
  sub_20B87E150((const void **)(v4 + 88), 0);
  sub_20B87E150((const void **)(v4 + 80), 0);
  sub_20B87E150((const void **)(v4 + 72), 0);
  sub_20B87E150((const void **)(v4 + 64), 0);
  MEMORY[0x20BD39CB0](v4, 0x10F1C400B1D9961);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9D5DFC(_QWORD *a1)
{
  return sub_20B9D59C4((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
}

void sub_20B9D5E10(uint64_t a1)
{
  sub_20B9D5F6C(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B9D5E34(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

uint64_t sub_20B9D5E3C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_20B9D5E44(uint64_t a1)
{
  return (uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 4;
}

uint64_t sub_20B9D5E54(uint64_t a1)
{
  return *(_QWORD *)(a1 + 80);
}

uint64_t sub_20B9D5E5C()
{
  return 0;
}

uint64_t sub_20B9D5E64(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_20B9D5E6C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 160);
}

uint64_t sub_20B9D5E74(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 152);
}

uint64_t sub_20B9D5E7C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 153);
}

uint64_t sub_20B9D5E84(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 154);
}

uint64_t sub_20B9D5E8C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 155);
}

uint64_t sub_20B9D5E94(uint64_t a1)
{
  return *(_QWORD *)(a1 + 88);
}

uint64_t sub_20B9D5E9C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 96);
}

uint64_t sub_20B9D5EA4()
{
  return 1;
}

uint64_t sub_20B9D5EAC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 56);
}

uint64_t sub_20B9D5EB4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 52);
}

uint64_t sub_20B9D5EBC()
{
  return 1;
}

uint64_t sub_20B9D5EC4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 224);
}

BOOL sub_20B9D5ECC(uint64_t a1)
{
  return *(_DWORD *)(a1 + 156) == 5;
}

uint64_t sub_20B9D5EDC(uint64_t a1)
{
  return a1 + 200;
}

uint64_t sub_20B9D5EE4(uint64_t a1)
{
  return a1 + 168;
}

uint64_t sub_20B9D5EEC(uint64_t a1)
{
  return a1 + 128;
}

uint64_t *sub_20B9D5EF4(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    v5 = *(_QWORD *)(v2 - 16);
    v2 -= 16;
    *(_QWORD *)(v4 - 16) = v5;
    v4 -= 16;
    v6 = *(_QWORD *)(v2 + 8);
    *(_QWORD *)(v4 + 8) = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
  }
  a2[1] = v4;
  v9 = *result;
  *result = v4;
  a2[1] = v9;
  v10 = result[1];
  result[1] = a2[2];
  a2[2] = v10;
  v11 = result[2];
  result[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20B9D5F6C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void **v6;

  *(_QWORD *)a1 = off_24C467CE0;
  *(_QWORD *)(a1 + 40) = &unk_24C467F48;
  sub_20B87E150((const void **)(a1 + 224), 0);
  v2 = *(void **)(a1 + 200);
  if (v2)
  {
    *(_QWORD *)(a1 + 208) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 168);
  if (v3)
  {
    *(_QWORD *)(a1 + 176) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 128);
  if (v4)
  {
    *(_QWORD *)(a1 + 136) = v4;
    operator delete(v4);
  }
  v6 = (void **)(a1 + 104);
  sub_20B8E736C(&v6);
  sub_20B87E150((const void **)(a1 + 96), 0);
  sub_20B87E150((const void **)(a1 + 88), 0);
  sub_20B87E150((const void **)(a1 + 80), 0);
  sub_20B87E150((const void **)(a1 + 72), 0);
  sub_20B87E150((const void **)(a1 + 64), 0);
  return a1;
}

void sub_20B9D6030(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C46B9B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B9D6040(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C46B9B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B9D6070(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_20B9D6084(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B9D60A8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20B9D60C0(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45E7B8))
    return a1 + 24;
  else
    return 0;
}

uint64_t sub_20B9D6100(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  _BYTE *v19;
  __int16 v20;
  unsigned int v21;
  char v22;
  float v23;
  float v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char **v40;

  v6 = a3;
  *(_DWORD *)a1 = a4;
  *(_OWORD *)(a1 + 16) = 0u;
  v9 = a3 - 1;
  *(_QWORD *)(a1 + 8) = a3 - 1;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1065353216;
  v40 = (char **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = sub_20B9F6A38(a6, 2 * (a3 - 1));
  v10 = sub_20B9F6A38(a6, 4 * *(_QWORD *)(a1 + 8));
  v11 = *(unsigned int *)(a2 + 56 * v9 + 28);
  v12 = *(_QWORD *)(a1 + 40) & 0xFFFFFFFFFFFFFFF1 | (v11 >> 2) & 2 | (4 * ((v11 >> 1) & 3));
  *(_QWORD *)(a1 + 32) = v10;
  *(_QWORD *)(a1 + 40) = v12;
  v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 56) + 96))(*(_QWORD *)(a2 + 56));
  v14 = 128;
  if (v13)
    v14 = 0;
  v15 = *(_QWORD *)(a1 + 40) & 0xFFFFFFFFFFFFFF7FLL | v14;
  *(_QWORD *)(a1 + 40) = v15;
  if (v9 < 1)
  {
LABEL_37:
    *(_QWORD *)(a1 + 40) = v15 | 1;
    return a1;
  }
  v16 = 0;
  v17 = (unsigned __int16 *)(a2 + 56 * v6 - 56);
  v18 = 3;
  LOBYTE(v6) = 1;
  do
  {
    v19 = *(_BYTE **)v17;
    v20 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)v17 + 56))(*(_QWORD *)v17, v17[12]);
    v21 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v19 + 40))(v19);
    v22 = v19[16];
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + v18) = 0;
    v23 = *(float *)(a1 + 56);
    if (v23 >= (*(float (**)(_BYTE *))(*(_QWORD *)v19 + 80))(v19))
      v24 = (*(float (**)(_BYTE *))(*(_QWORD *)v19 + 80))(v19);
    else
      v24 = *(float *)(a1 + 56);
    *(float *)(a1 + 56) = v24;
    if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v19 + 64))(v19) == 9
      || (*(unsigned int (**)(_BYTE *))(*(_QWORD *)v19 + 64))(v19) == 10)
    {
      *(_BYTE *)(*(_QWORD *)(a1 + 32) + v18 - 3) = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v19 + 32))(v19);
      v25 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v19 + 64))(v19);
      v26 = *(_QWORD *)(a1 + 32);
      v27 = *(_QWORD *)(a1 + 40);
      if (v25 == 9)
        v28 = 1;
      else
        v28 = 2;
      *(_BYTE *)(v26 + v18) |= v28;
      v29 = v27 | 0x100;
    }
    else
    {
      v26 = *(_QWORD *)(a1 + 32);
      v30 = *(_QWORD *)(a1 + 40);
      *(_BYTE *)(v26 + v18 - 3) = v21 - v22;
      v29 = v30 | 0x200;
    }
    v31 = v26 + v18;
    *(_BYTE *)(v31 - 2) = v21;
    *(_BYTE *)(v31 - 1) = v22;
    v32 = *(_QWORD *)(a1 + 48) + v21;
    *(_QWORD *)(a1 + 40) = v29;
    *(_QWORD *)(a1 + 48) = v32;
    if ((v6 & 1) != 0)
      LODWORD(v6) = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v19 + 96))(v19);
    else
      LODWORD(v6) = 0;
    v33 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v19 + 64))(v19);
    if (v33 == 4)
    {
      v35 = *(_QWORD *)(a1 + 40);
      if ((v35 & 0x40) == 0 && (*((_QWORD *)v19 + 15) || *((_QWORD *)v19 + 16)))
        v35 |= 0x40uLL;
      *(_BYTE *)(*(_QWORD *)(a1 + 32) + v18) |= 4u;
      *(_QWORD *)(a1 + 40) = v35 | 0x10;
    }
    else if (v33 == 2)
    {
      if (a5)
      {
        v34 = *(char **)(a1 + 24);
        if (!v34)
        {
          v34 = (char *)sub_20B9F6A38(a6, 2 * *(_QWORD *)(a1 + 8));
          *(_QWORD *)(a1 + 24) = v34;
          if (v18 != 3)
          {
            memcpy(v34, *(const void **)(a1 + 16), v16);
            v34 = *(char **)(a1 + 24);
          }
        }
        *(_WORD *)&(*v40)[v16] = *((_WORD *)v19 + 56);
      }
      else
      {
        v34 = *v40;
      }
      *(_WORD *)&v34[v16] = v20;
      v37 = *(_QWORD *)(a1 + 40);
      *(_BYTE *)(*(_QWORD *)(a1 + 32) + v18) |= 8u;
      *(_QWORD *)(a1 + 40) = v37 | 0x20;
      goto LABEL_34;
    }
    v36 = *(_QWORD *)(a1 + 24);
    *(_WORD *)(*(_QWORD *)(a1 + 16) + v16) = v20;
    if (v36)
      *(_WORD *)(v36 + v16) = v20;
LABEL_34:
    v17 -= 28;
    v16 += 2;
    v18 += 4;
    --v9;
  }
  while (v9);
  if ((_DWORD)v6)
  {
    v15 = *(_QWORD *)(a1 + 40);
    goto LABEL_37;
  }
  return a1;
}

uint64_t sub_20B9D6464(uint64_t a1, _WORD *a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7)
{
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  _WORD *v19;
  __int16 v20;
  unsigned int v21;
  char v22;
  float v23;
  float v24;
  float v25;
  _BYTE *v26;
  int v27;
  _WORD *v28;
  _WORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v36;
  _QWORD *v37;

  *(_DWORD *)a1 = a5;
  v11 = *(_QWORD *)(a4 + 8);
  *(_OWORD *)(a1 + 16) = 0u;
  v12 = (_QWORD *)(a1 + 16);
  v13 = v11 + a3;
  *(_QWORD *)(a1 + 8) = v13;
  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 56) = 1065353216;
  *(_QWORD *)(a1 + 16) = sub_20B9F6A38(a7, 2 * v13);
  v36 = a7;
  v14 = sub_20B9F6A38(a7, 4 * *(_QWORD *)(a1 + 8));
  v15 = *(_QWORD *)(a1 + 40) | 0x83;
  *(_QWORD *)(a1 + 32) = v14;
  *(_QWORD *)(a1 + 40) = v15;
  if (a3)
  {
    v37 = v12;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    while (1)
    {
      v19 = *(_WORD **)a2;
      v20 = a2[13];
      v21 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 40))(*(_QWORD *)a2);
      v22 = *((_BYTE *)v19 + 16);
      v23 = *(float *)(a1 + 56);
      if (v23 >= (*(float (**)(_WORD *))(*(_QWORD *)v19 + 80))(v19))
      {
        (*(void (**)(_WORD *))(*(_QWORD *)v19 + 80))(v19);
        v24 = *(float *)(a1 + 56);
      }
      else
      {
        v24 = *(float *)(a1 + 56);
        v25 = v24;
      }
      *(float *)(a1 + 56) = v24 * v25;
      v26 = (_BYTE *)(*(_QWORD *)(a1 + 32) + v16);
      *v26 = v21 - v22;
      v26[1] = v21 - v22;
      v26[2] = v22;
      v26[3] = 0;
      *(_QWORD *)(a1 + 48) += v21;
      v27 = (*(uint64_t (**)(_WORD *))(*(_QWORD *)v19 + 64))(v19);
      if (v27 == 4)
        break;
      if (v27 != 2)
        goto LABEL_14;
      if (a6)
      {
        v28 = *(_WORD **)(a1 + 24);
        if (!v28)
        {
          v28 = (_WORD *)sub_20B9F6A38(v36, 2 * *(_QWORD *)(a1 + 8));
          *(_QWORD *)(a1 + 24) = v28;
          if (v18)
          {
            memcpy(v28, *(const void **)(a1 + 16), v17);
            v28 = *(_WORD **)(a1 + 24);
          }
        }
        v29 = (_WORD *)*v37;
        *(_WORD *)(*v37 + 2 * v18) = v19[56];
      }
      else
      {
        v28 = (_WORD *)*v37;
        v29 = (_WORD *)*v37;
      }
      v28[v18] = v20;
      v32 = *(_QWORD *)(a1 + 40);
      *(_BYTE *)(*(_QWORD *)(a1 + 32) + v16 + 3) |= 8u;
      *(_QWORD *)(a1 + 40) = v32 | 0x20;
LABEL_18:
      ++v18;
      v17 += 2;
      v16 += 4;
      a2 += 28;
      if (a3 == v18)
        goto LABEL_21;
    }
    v30 = *(_QWORD *)(a1 + 40);
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + v16 + 3) |= 4u;
    *(_QWORD *)(a1 + 40) = v30 | 0x10;
LABEL_14:
    v29 = *(_WORD **)(a1 + 16);
    v31 = *(_QWORD *)(a1 + 24);
    v29[v18] = v20;
    if (v31)
      *(_WORD *)(v31 + 2 * v18) = v20;
    goto LABEL_18;
  }
  v29 = (_WORD *)*v12;
LABEL_21:
  memcpy(&v29[a3], *(const void **)a4, 2 * *(_QWORD *)(a4 + 8));
  v33 = *(_QWORD *)(a1 + 24);
  if (v33)
    memcpy((void *)(v33 + 2 * a3), *(const void **)a4, 2 * *(_QWORD *)(a4 + 8));
  bzero((void *)(*(_QWORD *)(a1 + 32) + 4 * a3), 4 * *(_QWORD *)(a4 + 8));
  return a1;
}

__CFString *sub_20B9D66F0(uint64_t a1)
{
  __CFString *Mutable;
  unint64_t v3;
  uint64_t v4;
  const __CFString *v5;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0);
  if (*(_QWORD *)(a1 + 8))
  {
    v3 = 0;
    do
    {
      v4 = *(_QWORD *)(a1 + 24);
      if (!v4)
        v4 = *(_QWORD *)(a1 + 16);
      v5 = (const __CFString *)sub_20B9E08C0(*(unsigned __int16 *)(v4 + 2 * v3), *(_DWORD *)a1);
      if (v5)
        CFStringAppend(Mutable, v5);
      ++v3;
    }
    while (v3 < *(_QWORD *)(a1 + 8));
  }
  return Mutable;
}

__CFString *sub_20B9D6774(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v6;
  __CFString *Mutable;
  uint64_t v9;
  uint64_t v10;
  const __CFString *v11;

  if ((a2 & 0x8000000000000000) != 0)
    return 0;
  v3 = a3;
  v6 = a2 + a3;
  if (a2 + a3 > *(_QWORD *)(a1 + 8))
    return 0;
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0);
  if (a2 < v6)
  {
    v9 = 2 * a2;
    do
    {
      v10 = *(_QWORD *)(a1 + 24);
      if (!v10)
        v10 = *(_QWORD *)(a1 + 16);
      v11 = (const __CFString *)sub_20B9E08C0(*(unsigned __int16 *)(v10 + v9), *(_DWORD *)a1);
      if (v11)
        CFStringAppend(Mutable, v11);
      v9 += 2;
      --v3;
    }
    while (v3);
  }
  return Mutable;
}

const __CFString *sub_20B9D6820@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const __CFString *result;
  unint64_t v5;
  uint64_t v6;

  result = (const __CFString *)sub_20B80FC98(a2, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)(a1 + 8))
  {
    v5 = 0;
    do
    {
      v6 = *(_QWORD *)(a1 + 24);
      if (!v6)
        v6 = *(_QWORD *)(a1 + 16);
      result = (const __CFString *)sub_20B9E08C0(*(unsigned __int16 *)(v6 + 2 * v5), *(_DWORD *)a1);
      if (result)
        result = (const __CFString *)CFStringGetLength(result);
      *(_WORD *)(*a2 + 2 * v5++) = (_WORD)result;
    }
    while (v5 < *(_QWORD *)(a1 + 8));
  }
  return result;
}

void sub_20B9D6898(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

__CFString *sub_20B9D68B4(uint64_t a1, unint64_t a2)
{
  const __CFAllocator *v4;
  CFMutableStringRef Mutable;
  __CFString *v6;
  uint64_t v7;
  CFIndex v8;
  uint64_t v9;
  const __CFString *v10;
  const __CFString *v11;
  const __CFString *v12;
  CFRange v14;

  if (*(_QWORD *)(a1 + 8) <= a2)
    return 0;
  v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0);
  v6 = Mutable;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(unsigned __int8 *)(v7 + 4 * a2);
  if (!*(_BYTE *)(v7 + 4 * a2))
  {
    if (!Mutable)
      return v6;
    CFRelease(Mutable);
    return 0;
  }
  v9 = *(unsigned __int8 *)(v7 + 4 * a2 + 2);
  v10 = (const __CFString *)sub_20B9E08C0(*(unsigned __int16 *)(*(_QWORD *)(a1 + 16) + 2 * a2), *(_DWORD *)a1);
  v11 = v10;
  if (v10 && CFStringGetLength(v10) > v8)
  {
    v14.location = 0;
    v14.length = v8;
    v12 = CFStringCreateWithSubstring(v4, v11, v14);
    CFStringAppend(v6, v12);
    CFRelease(v12);
    if (!(_DWORD)v9)
      return v6;
  }
  else
  {
    CFStringAppend(v6, v11);
    if (!(_DWORD)v9)
      return v6;
  }
  do
  {
    CFStringAppend(v6, CFSTR("'"));
    --v9;
  }
  while (v9);
  return v6;
}

__CFString *sub_20B9D69C4(uint64_t a1)
{
  __CFString *Mutable;
  unint64_t v3;
  __CFString *v4;
  __CFString *v5;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0);
  if (*(_QWORD *)(a1 + 8))
  {
    v3 = 0;
    do
    {
      v4 = sub_20B9D68B4(a1, v3);
      if (!v4)
        break;
      v5 = v4;
      CFStringAppend(Mutable, v4);
      CFRelease(v5);
      ++v3;
    }
    while (v3 < *(_QWORD *)(a1 + 8));
  }
  return Mutable;
}

BOOL sub_20B9D6A48(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  const void *v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(const void **)a2;
  return v2 <= (uint64_t)(*(_QWORD *)(a2 + 8) - (_QWORD)v3) >> 1 && memcmp(*(const void **)(a1 + 16), v3, 2 * v2) == 0;
}

_QWORD *sub_20B9D6A88(_QWORD *a1, const __CFURL *a2)
{
  uint64_t v4;
  char *v5;
  unint64_t v6;
  unsigned __int8 v7;
  void *__p[2];
  unsigned __int8 v10;
  CFErrorRef error;
  UInt8 buffer[1024];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20B8789BC((uint64_t)a1);
  *(_OWORD *)(v4 + 360) = 0u;
  *(_OWORD *)(v4 + 376) = 0u;
  *(_OWORD *)(v4 + 344) = 0u;
  error = 0;
  if (!a2)
  {
LABEL_9:
    sub_20B80BBD0(__p, "");
    goto LABEL_10;
  }
  if (!CFURLResourceIsReachable(a2, &error))
  {
    if (error)
      CFRelease(error);
    goto LABEL_9;
  }
  if (CFURLGetFileSystemRepresentation(a2, 1u, buffer, 1024))
    v5 = (char *)buffer;
  else
    v5 = "";
  sub_20B80BBD0(__p, v5);
LABEL_10:
  v6 = v10;
  v7 = v10;
  if ((v10 & 0x80u) != 0)
    v6 = (unint64_t)__p[1];
  if (v6)
  {
    sub_20B9D6BF4(a1, (char *)__p);
    v7 = v10;
  }
  if ((v7 & 0x80) != 0)
    operator delete(__p[0]);
  return a1;
}

void sub_20B9D6BA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t *v16;
  void *v18;
  uint64_t v19;

  if (a15 < 0)
    operator delete(__p);
  v18 = *(void **)(v15 + 352);
  if (v18)
  {
    *(_QWORD *)(v15 + 360) = v18;
    operator delete(v18);
  }
  v19 = *v16;
  *v16 = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 72))(v19);
  sub_20B878A58(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9D6BF4(_QWORD *a1, char *a2)
{
  char *v4;
  _WORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD v21[11];
  char v22;
  uint64_t v23;
  void *__p;
  uint64_t v25;
  uint64_t v26;

  sub_20B827F10((uint64_t)v21);
  __p = 0;
  v25 = 0;
  v26 = 0;
  if (a2[23] >= 0)
    v4 = a2;
  else
    v4 = *(char **)a2;
  if ((sub_20B8769A0((uint64_t)a1, v4, "r") & 1) == 0)
  {
    std::ios_base::clear((std::ios_base *)((char *)v21 + *(_QWORD *)(v21[0] - 24)), 0);
    v16 = sub_20B828F84(v21, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/mecabra/Korean/CustomizedLexicon.cpp", 82);
    sub_20B828F84(v16, (uint64_t)"(", 1);
    v17 = (_QWORD *)std::ostream::operator<<();
    v18 = sub_20B828F84(v17, (uint64_t)") [", 3);
    v19 = sub_20B828F84(v18, (uint64_t)"m_mmap.open(filePath.c_str(), \"r\")", 34);
    sub_20B828F84(v19, (uint64_t)"] ", 2);
LABEL_15:
    v15 = 0;
    goto LABEL_16;
  }
  v5 = (_WORD *)a1[1];
  if (!v5 || !a1[2] || *v5 != 1)
    goto LABEL_15;
  v6 = (unsigned __int16)v5[1];
  v7 = (unsigned __int16)v5[2];
  v8 = (unsigned __int16)v5[3];
  v9 = (_QWORD *)operator new();
  sub_20B9C790C(v9, a1[1] + 8, v6);
  v10 = (_QWORD *)operator new();
  *v10 = &unk_24C49BF40;
  v10[1] = 0;
  v10[5] = 0;
  v10[6] = v9;
  v11 = a1[43];
  a1[43] = v10;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 72))(v11);
  v12 = a1[1];
  v13 = v12 + v8;
  if (v12)
    v14 = v7 >> 1;
  else
    v14 = 0;
  a1[47] = v13;
  a1[48] = v14;
  v15 = 1;
LABEL_16:
  if (SHIBYTE(v26) < 0)
    operator delete(__p);
  v21[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v21 + *(_QWORD *)(v21[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v21[1] = MEMORY[0x24BEDB848] + 16;
  if (v22 < 0)
    operator delete((void *)v21[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x20BD39C2C](&v23);
  return v15;
}

void sub_20B9D6E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  MEMORY[0x20BD39CB0](v9, 0x10A1C40079592F6);
  sub_20B8A0FF4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9D6E44(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  sub_20B878B18((uint64_t)a1);
  v2 = a1[43];
  a1[43] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
  v3 = (void *)a1[44];
  if (v3)
  {
    a1[45] = v3;
    operator delete(v3);
  }
  v4 = a1[43];
  a1[43] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4);
  return sub_20B878A58((uint64_t)a1);
}

void sub_20B9D6EAC(char **a1, uint64_t a2, int a3, unsigned __int16 *a4, uint64_t a5)
{
  char **v5;
  unsigned __int16 *v6;
  unint64_t v7;
  char *v9;
  unsigned __int16 *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int16 *v18;
  __int16 v19;
  char *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  char **v30;

  v5 = a1;
  if (a3)
  {
    v6 = (unsigned __int16 *)(*(_QWORD *)(a2 + 376) + 2 * a3);
    v7 = *v6;
    a1[1] = 0;
    a1[2] = 0;
    *a1 = 0;
    if (v7)
    {
      v9 = (char *)sub_20B9362A4(v7);
      v10 = a4;
      v11 = v9;
      v12 = 0;
      v14 = &v9[40 * v13];
      *v5 = v9;
      v5[1] = v9;
      v5[2] = v14;
      v30 = v5;
      do
      {
        v15 = v6 + 2;
        v16 = v6[1];
        v6 += v16 + 2;
        if ((_DWORD)v16)
          v17 = v16;
        else
          v17 = a5;
        if ((_DWORD)v16)
          v18 = v15;
        else
          v18 = v10;
        v19 = *v6;
        if (v11 >= v14)
        {
          v21 = *v5;
          v22 = 0xCCCCCCCCCCCCCCCDLL * ((v11 - v21) >> 3) + 1;
          if (v22 > 0x666666666666666)
            sub_20B80CDD8();
          if (0x999999999999999ALL * ((v14 - v21) >> 3) > v22)
            v22 = 0x999999999999999ALL * ((v14 - v21) >> 3);
          if (0xCCCCCCCCCCCCCCCDLL * ((v14 - v21) >> 3) >= 0x333333333333333)
            v23 = 0x666666666666666;
          else
            v23 = v22;
          v24 = (char *)sub_20B9362A4(v23);
          v26 = &v24[8 * ((v11 - v21) >> 3)];
          v10 = a4;
          *(_QWORD *)v26 = a4;
          *((_QWORD *)v26 + 1) = a5;
          *((_QWORD *)v26 + 2) = v18;
          *((_QWORD *)v26 + 3) = v17;
          *((_WORD *)v26 + 16) = v19;
          v27 = v26;
          if (v11 != v21)
          {
            do
            {
              v28 = *(_OWORD *)(v11 - 40);
              v29 = *(_OWORD *)(v11 - 24);
              *((_WORD *)v27 - 4) = *((_WORD *)v11 - 4);
              *(_OWORD *)(v27 - 24) = v29;
              *(_OWORD *)(v27 - 40) = v28;
              v27 -= 40;
              v11 -= 40;
            }
            while (v11 != v21);
            v11 = v21;
          }
          v14 = &v24[40 * v25];
          v20 = v26 + 40;
          v5 = v30;
          *v30 = v27;
          v30[1] = v26 + 40;
          v30[2] = v14;
          if (v11)
          {
            operator delete(v11);
            v10 = a4;
          }
        }
        else
        {
          *(_QWORD *)v11 = v10;
          *((_QWORD *)v11 + 1) = a5;
          *((_QWORD *)v11 + 2) = v18;
          *((_QWORD *)v11 + 3) = v17;
          v20 = v11 + 40;
          *((_WORD *)v11 + 16) = v19;
        }
        v5[1] = v20;
        ++v12;
        v11 = v20;
      }
      while (v12 != v7);
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_20B9D7090(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  if (v10)
  {
    *(_QWORD *)(a10 + 8) = v10;
    operator delete(v10);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B9D70B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v7;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  if (result)
  {
    result = *(_QWORD **)(a1 + 344);
    if (result)
    {
      v8[0] = &off_24C4A02A0;
      v8[1] = a1;
      v8[2] = a3;
      v9 = v8;
      (*(void (**)(_QWORD *, uint64_t, _QWORD *))(*result + 80))(result, a2, v8);
      result = v9;
      if (v9 == v8)
      {
        v7 = 4;
        result = v8;
      }
      else
      {
        if (!v9)
          return result;
        v7 = 5;
      }
      return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
    }
  }
  return result;
}

void sub_20B9D7184(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B9D71BC(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v4 = result;
    result = (_QWORD *)result[43];
    if (result)
    {
      v6[0] = &off_24C46A8C8;
      v6[1] = v4;
      v6[2] = a4;
      v7 = v6;
      (*(void (**)(_QWORD *, uint64_t, uint64_t, _QWORD *))(*result + 8))(result, a2, 2 * a3, v6);
      result = v7;
      if (v7 == v6)
      {
        v5 = 4;
        result = v6;
      }
      else
      {
        if (!v7)
          return result;
        v5 = 5;
      }
      return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
    }
  }
  return result;
}

void sub_20B9D726C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B9D72A8(_QWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  uint64_t v5;
  unsigned __int8 v7;
  char v8;
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v8 = a4;
  v7 = 0;
  v9[0] = &off_24C46A920;
  v9[1] = &v8;
  v9[2] = &v7;
  v10 = v9;
  sub_20B9D71BC(a1, a2, a3, (uint64_t)v9);
  v4 = v10;
  if (v10 == v9)
  {
    v5 = 4;
    v4 = v9;
    goto LABEL_5;
  }
  if (v10)
  {
    v5 = 5;
LABEL_5:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return v7;
}

void sub_20B9D7350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_20B9D7390()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B9D73A4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C4A02A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20B9D73DC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C4A02A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20B9D73FC(uint64_t a1, int *a2, unsigned __int16 **a3, _QWORD *a4, uint64_t *a5, _BYTE *a6)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  int v14;
  uint64_t v15;
  BOOL v16;
  char *v17;
  char *v18;
  int v19;
  uint64_t v20;

  v9 = *a5;
  if (*a3)
    v10 = *a4 >> 1;
  else
    v10 = 0;
  sub_20B9D6EAC(&v17, *(_QWORD *)(a1 + 8), *a2, *a3, v10);
  v11 = v17;
  v12 = v18;
  if (v17 != v18)
  {
    v13 = v17;
    do
    {
      v14 = a2[1];
      v15 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
      v20 = v9;
      v19 = v14;
      if (!v15)
        sub_20B80BB74();
      (*(void (**)(uint64_t, char *, uint64_t *, int *, _BYTE *))(*(_QWORD *)v15 + 48))(v15, v13, &v20, &v19, a6);
      v13 += 40;
      if (*a6)
        v16 = 1;
      else
        v16 = v13 == v12;
    }
    while (!v16);
  }
  if (v11)
    operator delete(v11);
}

void sub_20B9D74D8(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B9D74F4(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C4A0300))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B9D7530()
{
  return &unk_24C4A0300;
}

void sub_20B9D7540()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B9D7554(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C46A8C8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20B9D758C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C46A8C8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20B9D75AC(uint64_t a1, int *a2, unsigned __int16 **a3, _QWORD *a4, _BYTE *a5)
{
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  BOOL v12;
  char *v13;
  char *v14;

  if (*a3)
    v7 = *a4 >> 1;
  else
    v7 = 0;
  sub_20B9D6EAC(&v13, *(_QWORD *)(a1 + 8), *a2, *a3, v7);
  v8 = v13;
  v9 = v14;
  if (v13 != v14)
  {
    v10 = v13;
    do
    {
      v11 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
      if (!v11)
        sub_20B80BB74();
      (*(void (**)(uint64_t, char *, _BYTE *))(*(_QWORD *)v11 + 48))(v11, v10, a5);
      v10 += 40;
      if (*a5)
        v12 = 1;
      else
        v12 = v10 == v9;
    }
    while (!v12);
  }
  if (v8)
    operator delete(v8);
}

void sub_20B9D767C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B9D7698(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45EF50))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B9D76D4()
{
  return &unk_24C45EF50;
}

void sub_20B9D76E4()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B9D76F8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C46A920;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20B9D7730(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C46A920;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20B9D7750(uint64_t result, uint64_t a2, _BYTE *a3)
{
  __int16 v3;

  v3 = *(_WORD *)(a2 + 32);
  if ((v3 & 1) != 0 || (v3 & 2) != 0 && **(_BYTE **)(result + 8))
  {
    **(_BYTE **)(result + 16) = 1;
    *a3 = 1;
  }
  return result;
}

uint64_t sub_20B9D777C(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45EF60))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B9D77B8()
{
  return &unk_24C45EF60;
}

void sub_20B9D77C4(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  unint64_t *v20;
  unint64_t v21;
  void *__p;
  char *v23;
  char *v24;
  uint64_t v25;

  __p = 0;
  v23 = 0;
  v24 = 0;
  v3 = a2[6];
  if (a2[7] != v3)
  {
    v5 = 0;
    do
    {
      v6 = *(_QWORD *)(v3 + 8 * v5);
      v7 = *(char *)(v6 + 55);
      if (v7 >= 0)
        v8 = v6 + 32;
      else
        v8 = *(_QWORD *)(v6 + 32);
      if (v7 >= 0)
        v9 = *(unsigned __int8 *)(v6 + 55);
      else
        v9 = *(_QWORD *)(v6 + 40);
      v10 = *(_QWORD **)(a1 + 24);
      if (v10 && (sub_20B9D72A8(v10, v8, v9, 0) & 1) != 0
        || (v11 = *(_QWORD *)(a1 + 8)) != 0 && (LODWORD(v25) = 0, sub_20BA22818(v11, v8, v9, &v25)) && (v25 & 2) != 0)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 96))(v6) == 83)
        {
          *(_BYTE *)(v6 + 152) = 0;
        }
        else
        {
          v12 = v23;
          if (v23 >= v24)
          {
            v14 = (char *)__p;
            v15 = (v23 - (_BYTE *)__p) >> 3;
            v16 = v15 + 1;
            if ((unint64_t)(v15 + 1) >> 61)
              sub_20B80CDD8();
            v17 = v24 - (_BYTE *)__p;
            if ((v24 - (_BYTE *)__p) >> 2 > v16)
              v16 = v17 >> 2;
            if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
              v18 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v18 = v16;
            if (v18)
            {
              v19 = (char *)sub_20B800BE8((uint64_t)&v24, v18);
              v14 = (char *)__p;
              v12 = v23;
            }
            else
            {
              v19 = 0;
            }
            v20 = (unint64_t *)&v19[8 * v15];
            *v20 = v5;
            v13 = (char *)(v20 + 1);
            while (v12 != v14)
            {
              v21 = *((_QWORD *)v12 - 1);
              v12 -= 8;
              *--v20 = v21;
            }
            __p = v20;
            v23 = v13;
            v24 = &v19[8 * v18];
            if (v14)
              operator delete(v14);
          }
          else
          {
            *(_QWORD *)v23 = v5;
            v13 = v12 + 8;
          }
          v23 = v13;
        }
      }
      ++v5;
      v3 = a2[6];
    }
    while (v5 < (a2[7] - v3) >> 3);
  }
  sub_20B8FEACC(a2, (unint64_t **)&__p);
  if (__p)
  {
    v23 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B9D7994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B9D79B8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  unint64_t v11;
  double v12;
  double v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  unint64_t *v26;
  unint64_t v27;
  void *__p;
  char *v29;
  char *v30;
  uint64_t v31;

  v4 = a2[6];
  v5 = a2[7];
  v6 = v5 - v4;
  if ((unint64_t)(v5 - v4) >= 0x10)
  {
    if (*(_QWORD *)a3 >= (unint64_t)(v6 >> 3))
      v10 = v6 >> 3;
    else
      v10 = *(_QWORD *)a3;
    if (v10)
    {
      v11 = 0;
      v12 = -1.79769313e308;
      do
      {
        v13 = (*(double (**)(_QWORD))(**(_QWORD **)(v4 + 8 * v11) + 392))(*(_QWORD *)(v4 + 8 * v11));
        if (v12 < v13)
          v12 = v13;
        ++v11;
        v4 = a2[6];
        v5 = a2[7];
        if (*(_QWORD *)a3 >= (unint64_t)((v5 - v4) >> 3))
          v14 = (v5 - v4) >> 3;
        else
          v14 = *(_QWORD *)a3;
      }
      while (v11 < v14);
    }
    else
    {
      v12 = -1.79769313e308;
    }
    __p = 0;
    v29 = 0;
    v30 = 0;
    if (v5 != v4)
    {
      v15 = 0;
      do
      {
        v16 = *(_QWORD *)(v4 + 8 * v15);
        v31 = v16;
        v17 = *(_QWORD *)(a4 + 24);
        if (!v17)
          sub_20B80BB74();
        if (((*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v17 + 48))(v17, &v31) & 1) == 0
          && (v12 - (*(double (**)(uint64_t))(*(_QWORD *)v16 + 392))(v16) > *(double *)(a3 + 16)
           || v15 && (*(double (**)(uint64_t))(*(_QWORD *)v16 + 392))(v16) < *(double *)(a3 + 8)))
        {
          v18 = v29;
          if (v29 >= v30)
          {
            v20 = (char *)__p;
            v21 = (v29 - (_BYTE *)__p) >> 3;
            v22 = v21 + 1;
            if ((unint64_t)(v21 + 1) >> 61)
              sub_20B80CDD8();
            v23 = v30 - (_BYTE *)__p;
            if ((v30 - (_BYTE *)__p) >> 2 > v22)
              v22 = v23 >> 2;
            if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
              v24 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v24 = v22;
            if (v24)
            {
              v25 = (char *)sub_20B800BE8((uint64_t)&v30, v24);
              v20 = (char *)__p;
              v18 = v29;
            }
            else
            {
              v25 = 0;
            }
            v26 = (unint64_t *)&v25[8 * v21];
            *v26 = v15;
            v19 = (char *)(v26 + 1);
            while (v18 != v20)
            {
              v27 = *((_QWORD *)v18 - 1);
              v18 -= 8;
              *--v26 = v27;
            }
            __p = v26;
            v29 = v19;
            v30 = &v25[8 * v24];
            if (v20)
              operator delete(v20);
          }
          else
          {
            *(_QWORD *)v29 = v15;
            v19 = v18 + 8;
          }
          v29 = v19;
        }
        ++v15;
        v4 = a2[6];
      }
      while (v15 < (a2[7] - v4) >> 3);
    }
    sub_20B8FEACC(a2, (unint64_t **)&__p);
    if (__p)
    {
      v29 = (char *)__p;
      operator delete(__p);
    }
  }
}

void sub_20B9D7BE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_20B9D7C08(uint64_t *a1)
{
  uint64_t v2;

  sub_20B972178(a1);
  v2 = a1[5];
  if (v2)
    (*(void (**)(uint64_t *))(*a1 + 32))(a1);
  return v2 != 0;
}

uint64_t sub_20B9D7C48(uint64_t result)
{
  if (*(_BYTE *)(result + 96) && !*(_QWORD *)(result + 8))
  {
    if (*(_QWORD *)(result + 40))
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  }
  return result;
}

uint64_t sub_20B9D7C70()
{
  return 500;
}

uint64_t sub_20B9D7C78()
{
  return 600;
}

uint64_t sub_20B9D7C80(uint64_t a1)
{
  sub_20BA14628(*(_QWORD **)(a1 + 128));
  return sub_20B973178(a1);
}

void sub_20B9D7CA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const __CFString *v5;
  const __CFString *v6;
  void *__p[2];
  char v8;
  uint64_t *v9;
  _QWORD *v10[2];

  v10[0] = 0;
  v10[1] = 0;
  v9 = (uint64_t *)v10;
  v5 = *(const __CFString **)(a3 + 8);
  sub_20B80BBD0(__p, off_2547292C8[0]);
  sub_20B908BB0(&v9, v5, (__int128 *)__p);
  if (v8 < 0)
    operator delete(__p[0]);
  v6 = *(const __CFString **)(a3 + 16);
  sub_20B80BBD0(__p, off_2547292D0);
  sub_20B908BB0(&v9, v6, (__int128 *)__p);
  if (v8 < 0)
    operator delete(__p[0]);
  sub_20B917E98(a2, (uint64_t)&v9, 0);
  sub_20B8896CC((uint64_t)&v9, v10[0]);
}

void sub_20B9D7D74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, _QWORD *a16)
{
  sub_20B8896CC((uint64_t)&a15, a16);
  _Unwind_Resume(a1);
}

BOOL sub_20B9D7DB0(uint64_t a1, void *a2, uint64_t a3, int a4)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v12[3];
  _QWORD *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 128) && *(_BYTE *)(a1 + 96))
  {
    v8 = objc_msgSend_rawCandidate(a2, (const char *)a2, a3);
    v12[0] = &off_24C46A3A0;
    v12[1] = a1;
    v13 = v12;
    sub_20B959E14(v8, (uint64_t)v12);
    v9 = v13;
    if (v13 == v12)
    {
      v10 = 4;
      v9 = v12;
      goto LABEL_7;
    }
    if (v13)
    {
      v10 = 5;
LABEL_7:
      (*(void (**)(void))(*v9 + 8 * v10))();
    }
  }
  return sub_20B9729E4(a1, a2, a3, a4);
}

void sub_20B9D7E90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_20B9D7ED0(uint64_t a1, uint64_t a2)
{
  int v4;
  unsigned __int16 *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 *v10;
  uint64_t v11;
  unsigned __int16 *v12;
  uint64_t *v13;
  const __CFAllocator *v14;
  void **v15;
  CFIndex v16;
  CFStringRef v17;
  CFStringRef v18;
  CFStringRef v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int16 v22;
  unsigned int v23;
  unsigned int v24;
  BOOL v25;
  unsigned __int16 *v26;
  _QWORD v27[6];
  void *__p[2];
  unsigned __int8 v29;

  v4 = *(char *)(a2 + 55);
  if (v4 >= 0)
    v5 = (unsigned __int16 *)(a2 + 32);
  else
    v5 = *(unsigned __int16 **)(a2 + 32);
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a2 + 55);
  else
    v6 = *(_QWORD *)(a2 + 40);
  if (v6)
  {
    v7 = 0;
    v8 = 2 * v6;
    do
    {
      if (v5[v7 / 2] - 12593 >= 0x33)
      {
        v9 = 2 * v6;
        v10 = v5;
        while (*v10 - 48 < 0xA)
        {
          ++v10;
          v9 -= 2;
          if (!v9)
            goto LABEL_21;
        }
        v11 = 2 * v6;
        v12 = v5;
        while ((unsigned __int16)(*v12 + 10332) <= 0xD45Bu && (unsigned __int16)(*v12 - 12644) < 0xFFCDu)
        {
          ++v12;
          v11 -= 2;
          if (!v11)
            goto LABEL_21;
        }
        v21 = -v6;
        while (1)
        {
          v22 = v5[(unint64_t)v8 / 2 - 1];
          v23 = (unsigned __int16)(v22 + 21504) >> 2;
          v24 = (unsigned __int16)(v22 - 48);
          v25 = v23 >= 0xAE9 && v24 >= 0xA;
          if (!v25)
            break;
          v8 -= 2;
          v25 = __CFADD__(v21++, 1);
          if (v25)
            return;
        }
        v6 = -v21;
        v26 = v5;
        while (*v26 - 12593 > 0x32)
        {
          ++v26;
          v8 -= 2;
          if (!v8)
            goto LABEL_22;
        }
        goto LABEL_21;
      }
      v7 += 2;
    }
    while (v8 != v7);
    if ((unint64_t)(v6 - 2) >= 4)
      goto LABEL_21;
LABEL_23:
    sub_20B9DEF34(v5, v6, __p);
    v14 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    if ((v29 & 0x80u) == 0)
      v15 = __p;
    else
      v15 = (void **)__p[0];
    if ((v29 & 0x80u) == 0)
      v16 = v29;
    else
      v16 = (CFIndex)__p[1];
    v17 = CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x24BDBD240], (const UniChar *)v15, v16);
    v27[5] = v17;
    v18 = CFStringCreateWithCharacters(v14, v5, v6);
    v19 = v18;
    v27[4] = v18;
    if (v17)
    {
      if (!v18)
      {
LABEL_34:
        CFRelease(v17);
LABEL_35:
        if ((char)v29 < 0)
          operator delete(__p[0]);
        return;
      }
      v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
      v27[1] = v17;
      v27[2] = v19;
      v27[3] = v20;
      CFRetain(v17);
      CFRetain(v19);
      v27[0] = &unk_24C45F750;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 216))(a1, v27);
      sub_20B9776FC(v27);
    }
    else if (!v18)
    {
      goto LABEL_35;
    }
    CFRelease(v19);
    if (!v17)
      goto LABEL_35;
    goto LABEL_34;
  }
LABEL_21:
  v13 = sub_20B947CC4();
  v5 = (unsigned __int16 *)*v13;
  v6 = v13[1];
LABEL_22:
  if (v6)
    goto LABEL_23;
}

void sub_20B9D8128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, const void *a14, const void *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  sub_20B9776FC(&a10);
  sub_20B87E150(&a14, 0);
  sub_20B87E150(&a15, 0);
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

const __CFString *sub_20B9D8188(_QWORD *a1, uint64_t a2)
{
  const __CFString *result;
  CFIndex Length;
  unint64_t v6;
  BOOL v8;
  int v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (!a1[1])
    return 0;
  result = *(const __CFString **)(a2 + 8);
  if (!result)
    return result;
  if (!*(_QWORD *)(a2 + 16))
    return 0;
  Length = CFStringGetLength(result);
  v6 = CFStringGetLength(*(CFStringRef *)(a2 + 16));
  v8 = (unint64_t)(Length - 33) < 0xFFFFFFFFFFFFFFE0 || v6 == 0 || v6 > 0x20;
  v9 = v8;
  if (!v8)
  {
    v10 = sub_20B9A7C5C(6u);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      v12 = *(_QWORD *)(a2 + 8);
      v11 = *(_QWORD *)(a2 + 16);
      v13 = 138412546;
      v14 = v11;
      v15 = 2112;
      v16 = v12;
      _os_log_debug_impl(&dword_20B7F7000, v10, OS_LOG_TYPE_DEBUG, "[MJL::registerToLearningDictionary] Learning phrase %@ (%@)", (uint8_t *)&v13, 0x16u);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*a1 + 208))(a1, a1[1], a2);
  }
  return (const __CFString *)(v9 ^ 1u);
}

void sub_20B9D82A8(uint64_t a1, uint64_t *a2)
{
  unsigned __int8 v3;
  __int128 v4;
  uint64_t v5;
  void **v6;

  v3 = atomic_load((unsigned __int8 *)&qword_25472C028);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25472C028))
  {
    sub_20B80BBD0(&qword_25472C030, off_2547292C8[0]);
    dword_25472C048 = 0;
    word_25472C04C = 1;
    byte_25472C04E = 0;
    sub_20B80BBD0(qword_25472C050, off_2547292D0);
    *(int *)((char *)&dword_25472C068 + 3) = 0;
    dword_25472C068 = 0;
    __cxa_atexit((void (*)(void *))sub_20B9D8550, 0, &dword_20B7F7000);
    __cxa_guard_release(&qword_25472C028);
  }
  v4 = 0uLL;
  v5 = 0;
  sub_20B9777DC((char *)&v4, &qword_25472C030, (__int128 *)&qword_25472C070, 2uLL);
  sub_20B8825BC(a2);
  *(_OWORD *)a2 = v4;
  a2[2] = v5;
  v5 = 0;
  v4 = 0uLL;
  v6 = (void **)&v4;
  sub_20B86F120(&v6);
}

void sub_20B9D83B0(_Unwind_Exception *a1)
{
  if (byte_25472C047 < 0)
    operator delete((void *)qword_25472C030);
  __cxa_guard_abort(&qword_25472C028);
  _Unwind_Resume(a1);
}

const __CFString *sub_20B9D83E8()
{
  return CFSTR("LearningDictionaryKorean");
}

const __CFString *sub_20B9D83F4()
{
  return CFSTR("DynamicPhraseLexicon_ko_KR.db");
}

void sub_20B9D8404(_QWORD *a1)
{
  sub_20B9720A4(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B9D8428()
{
  return 0;
}

uint64_t sub_20B9D8430()
{
  return 0;
}

uint64_t sub_20B9D8438()
{
  return 17;
}

uint64_t sub_20B9D8440()
{
  return 0;
}

uint64_t sub_20B9D8448()
{
  return 1;
}

uint64_t sub_20B9D8454()
{
  return 0;
}

const __CFString *sub_20B9D845C()
{
  return CFSTR("TapTyping");
}

void sub_20B9D846C(_QWORD *a1)
{
  sub_20B9776FC(a1);
  JUMPOUT(0x20BD39CB0);
}

void sub_20B9D8494()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B9D84A8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C46A3A0;
  result[1] = v3;
  return result;
}

uint64_t sub_20B9D84DC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C46A3A0;
  a2[1] = v2;
  return result;
}

BOOL sub_20B9D84F8(uint64_t a1, uint64_t *a2)
{
  return sub_20BA14440(*(_QWORD **)(*(_QWORD *)(a1 + 8) + 128), *a2);
}

uint64_t sub_20B9D8508(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45EE60))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B9D8544()
{
  return &unk_24C45EE60;
}

void sub_20B9D8550()
{
  uint64_t i;

  for (i = 0; i != -64; i -= 32)
  {
    if (*((char *)&unk_25472C028 + i + 63) < 0)
      operator delete(*(void **)((char *)&unk_25472C028 + i + 40));
  }
}

uint64_t sub_20B9D8594(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  *(_QWORD *)a1 = &off_24C461C40;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = a4;
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 8) + 32) + 32) - 1;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 32) = 10;
  *(_QWORD *)(a1 + 40) = v5;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_QWORD *)(a1 + 96) = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  *(_WORD *)(a1 + 104) = 0;
  return a1;
}

void sub_20B9D8618(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = (void *)v1[9];
  if (v4)
  {
    v1[10] = v4;
    operator delete(v4);
  }
  v5 = *v2;
  if (*v2)
  {
    v1[7] = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B9D8644(uint64_t a1)
{
  void *v2;
  void *v3;

  *(_QWORD *)a1 = &off_24C461C40;
  CFRelease(*(CFTypeRef *)(a1 + 96));
  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 48);
  if (v3)
  {
    *(_QWORD *)(a1 + 56) = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_20B9D86A0(uint64_t a1)
{
  sub_20B9D8644(a1);
  JUMPOUT(0x20BD39CB0);
}

BOOL sub_20B9D86C4(uint64_t a1, uint64_t a2)
{
  const void *v2;
  uint64_t v3;
  size_t v4;
  const void *v5;
  uint64_t v6;

  if (a1 == a2)
    return 1;
  v3 = a1 + 48;
  v2 = *(const void **)(a1 + 48);
  v4 = *(_QWORD *)(v3 + 8) - (_QWORD)v2;
  v6 = a2 + 48;
  v5 = *(const void **)(a2 + 48);
  return v4 == *(_QWORD *)(v6 + 8) - (_QWORD)v5 && memcmp(v2, v5, v4) == 0;
}

void sub_20B9D8710(uint64_t *a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, void **a4@<X8>)
{
  void *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  CFIndex Count;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char v45;
  const __CFArray *v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  void *v50;
  const char *v51;
  uint64_t v52;
  void *v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t *v66;
  char *v67;
  char *v68;
  uint64_t v69;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v6 = (void *)a1[2];
  if (v6)
  {
    v7 = objc_msgSend_rawCandidate(v6, a2, a3);
    v8 = (unint64_t)a4[2];
    v9 = (uint64_t *)a4[1];
    if ((unint64_t)v9 >= v8)
    {
      v11 = ((char *)v9 - (_BYTE *)*a4) >> 3;
      if ((unint64_t)(v11 + 1) >> 61)
        sub_20B80CDD8();
      v12 = v8 - (_QWORD)*a4;
      v13 = v12 >> 2;
      if (v12 >> 2 <= (unint64_t)(v11 + 1))
        v13 = v11 + 1;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      if (v14)
        v15 = (char *)sub_20B800BE8((uint64_t)(a4 + 2), v14);
      else
        v15 = 0;
      v16 = (uint64_t *)&v15[8 * v11];
      v17 = &v15[8 * v14];
      *v16 = v7;
      v10 = v16 + 1;
      v19 = (char *)*a4;
      v18 = (char *)a4[1];
      if (v18 != *a4)
      {
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          *--v16 = v20;
        }
        while (v18 != v19);
        v18 = (char *)*a4;
      }
      *a4 = v16;
      a4[1] = v10;
      a4[2] = v17;
      if (v18)
        operator delete(v18);
    }
    else
    {
      *v9 = v7;
      v10 = v9 + 1;
    }
    a4[1] = v10;
  }
  v21 = a1[1];
  if (v21)
  {
    Count = CFArrayGetCount(*(CFArrayRef *)(v21 + 32));
    if (Count < 1 || a1[4] <= (unint64_t)(((_BYTE *)a4[1] - (_BYTE *)*a4) >> 3))
    {
LABEL_46:
      v45 = 0;
    }
    else
    {
      while (1)
      {
        v23 = (void *)sub_20B96ABC8(a1[1], Count - 1);
        v26 = objc_msgSend_rawCandidate(v23, v24, v25);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v26 + 72))(v26) == 6
          || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v26 + 72))(v26) == 7)
        {
          break;
        }
        if (v23 && objc_msgSend_rawCandidate(v23, v27, v28))
        {
          v31 = objc_msgSend_rawCandidate(v23, v29, v30);
          v32 = v31;
          v34 = (uint64_t *)a4[1];
          v33 = (unint64_t)a4[2];
          if ((unint64_t)v34 >= v33)
          {
            v36 = ((char *)v34 - (_BYTE *)*a4) >> 3;
            if ((unint64_t)(v36 + 1) >> 61)
              sub_20B80CDD8();
            v37 = v33 - (_QWORD)*a4;
            v38 = v37 >> 2;
            if (v37 >> 2 <= (unint64_t)(v36 + 1))
              v38 = v36 + 1;
            if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
              v39 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v39 = v38;
            if (v39)
              v40 = (char *)sub_20B800BE8((uint64_t)(a4 + 2), v39);
            else
              v40 = 0;
            v41 = (uint64_t *)&v40[8 * v36];
            *v41 = v32;
            v35 = v41 + 1;
            v43 = (char *)*a4;
            v42 = (char *)a4[1];
            if (v42 != *a4)
            {
              do
              {
                v44 = *((_QWORD *)v42 - 1);
                v42 -= 8;
                *--v41 = v44;
              }
              while (v42 != v43);
              v42 = (char *)*a4;
            }
            *a4 = v41;
            a4[1] = v35;
            a4[2] = &v40[8 * v39];
            if (v42)
              operator delete(v42);
          }
          else
          {
            *v34 = v31;
            v35 = v34 + 1;
          }
          a4[1] = v35;
          if (Count <= 1)
            goto LABEL_46;
        }
        else
        {
          if ((unint64_t)Count < 2)
            goto LABEL_46;
          v35 = a4[1];
        }
        --Count;
        if (a1[4] <= (unint64_t)(((char *)v35 - (_BYTE *)*a4) >> 3))
          goto LABEL_46;
      }
      v45 = 1;
    }
    v46 = *(const __CFArray **)(a1[1] + 16);
    if (v46)
    {
      v47 = CFArrayGetCount(v46);
      v48 = v47 < 1 ? 1 : v45;
      if ((v48 & 1) == 0)
      {
        do
        {
          if (a1[4] <= (unint64_t)(((_BYTE *)a4[1] - (_BYTE *)*a4) >> 3))
            break;
          v49 = v47--;
          v50 = (void *)sub_20B96AAF4(a1[1], v47);
          v53 = v50;
          if (v50 && objc_msgSend_rawCandidate(v50, v51, v52))
          {
            v56 = objc_msgSend_rawCandidate(v53, v54, v55);
            v57 = v56;
            v59 = (uint64_t *)a4[1];
            v58 = (unint64_t)a4[2];
            if ((unint64_t)v59 >= v58)
            {
              v61 = ((char *)v59 - (_BYTE *)*a4) >> 3;
              if ((unint64_t)(v61 + 1) >> 61)
                sub_20B80CDD8();
              v62 = v58 - (_QWORD)*a4;
              v63 = v62 >> 2;
              if (v62 >> 2 <= (unint64_t)(v61 + 1))
                v63 = v61 + 1;
              if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8)
                v64 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v64 = v63;
              if (v64)
                v65 = (char *)sub_20B800BE8((uint64_t)(a4 + 2), v64);
              else
                v65 = 0;
              v66 = (uint64_t *)&v65[8 * v61];
              *v66 = v57;
              v60 = v66 + 1;
              v68 = (char *)*a4;
              v67 = (char *)a4[1];
              if (v67 != *a4)
              {
                do
                {
                  v69 = *((_QWORD *)v67 - 1);
                  v67 -= 8;
                  *--v66 = v69;
                }
                while (v67 != v68);
                v67 = (char *)*a4;
              }
              *a4 = v66;
              a4[1] = v60;
              a4[2] = &v65[8 * v64];
              if (v67)
                operator delete(v67);
            }
            else
            {
              *v59 = v56;
              v60 = v59 + 1;
            }
            a4[1] = v60;
          }
        }
        while (v49 > 1);
      }
    }
  }
}

void sub_20B9D8ACC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_20B9D8B08(uint64_t a1, uint64_t a2)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 72))(a2) == 6
      || (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 72))(a2) == 7;
}

void sub_20B9D8B5C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const __CFString *v6;
  const __CFString *v7;
  CFIndex Length;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  const void *v13;
  uint64_t v14;
  unsigned int *v15;
  const void *v16;
  const __CFString *v17;
  const __CFString *v18;
  const __CFString *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  CFIndex v28;
  uint64_t v29;
  uint64_t v30;
  const __CFString *v31;
  unsigned int *v32;
  uint64_t *v33;
  uint64_t v34;
  const __CFString *v35;
  const __CFArray *v36;
  CFIndex Count;
  const __CFString *ValueAtIndex;
  uint64_t v39;
  const __CFString *v40;
  const __CFString *v41;
  uint64_t v42;
  __int128 v43;
  void *v44;
  uint64_t *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  const __CFString **v49;
  const __CFString *v50;
  unsigned int *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  char v55;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 32))(&v42);
  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    operator delete(v2);
  }
  v3 = v42;
  *(_QWORD *)(a1 + 72) = v42;
  v4 = v43;
  *(_OWORD *)(a1 + 80) = v43;
  if (v4 != v3)
  {
    v5 = sub_20B9D9040(a1);
    if (v5)
    {
      v6 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
      if (v6)
      {
        v7 = v6;
        if (CFStringGetLength(v6))
        {
          Length = CFStringGetLength(v7);
          *(_BYTE *)(a1 + 105) = CFStringGetCharacterAtIndex(v7, Length - 1) == 32;
        }
      }
    }
    v41 = 0;
    v9 = *(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72);
    if (v9 >= 1)
    {
      v10 = 0;
      v11 = (unint64_t)v9 >> 3;
      if (v11 <= 1)
        v11 = 1;
      v39 = v11;
      v40 = 0;
      v12 = 1;
      while (1)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, v10);
        v13 = *(const void **)(*(_QWORD *)(a1 + 72) + 8 * v10);
        if ((*(unsigned int (**)(const void *))(*(_QWORD *)v13 + 72))(v13) == 6
          || (*(unsigned int (**)(const void *))(*(_QWORD *)v13 + 72))(v13) == 7)
        {
          break;
        }
        if (v41 || (*(unsigned int (**)(const void *))(*(_QWORD *)v13 + 72))(v13) != 3)
        {
          v18 = (const __CFString *)(*(uint64_t (**)(const void *))(*(_QWORD *)v13 + 32))(v13);
          v19 = sub_20B9D90A4(a1, v13);
          if (v19 && CFStringCompare(v18, v19, 0) == kCFCompareEqualTo)
          {
            CFRelease(v19);
            v19 = 0;
          }
          v20 = (*(uint64_t (**)(const void *))(*(_QWORD *)v13 + 48))(v13);
          if (v20 - 1 >= 0)
          {
            v21 = v20;
            do
            {
              if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1) || !v12)
                break;
              v22 = (*(uint64_t (**)(const void *, uint64_t))(*(_QWORD *)v13 + 120))(v13, --v21);
              v52 = 0;
              v53 = &v52;
              v54 = 0x2000000000;
              v55 = 1;
              if (v22)
              {
                v23 = (unsigned int *)v22;
                v24 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 72) + 8);
                v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 24))(v22);
                v27 = v26;
                v28 = CFStringGetLength(v18);
                if ((v25 & 0x8000000000000000) == 0 && v25 + v27 <= v28)
                {
                  v29 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v23 + 24))(v23);
                  v30 = **(unsigned int **)(a1 + 24);
                  v42 = MEMORY[0x24BDAC760];
                  *(_QWORD *)&v43 = 0x40000000;
                  *((_QWORD *)&v43 + 1) = sub_20B9D94B8;
                  v44 = &unk_24C46C770;
                  v47 = (void *)v18;
                  v48 = v29;
                  v49 = &v41;
                  v50 = v40;
                  v51 = v23;
                  v45 = &v52;
                  v46 = a1;
                  sub_20B9AA4E4(v23, v24, v30, v18, v19, 1, (uint64_t)&v42);
                }
              }
              v12 = *((_BYTE *)v53 + 24) != 0;
              _Block_object_dispose(&v52, 8);
            }
            while (v21 > 0);
          }
          if (v19)
            CFRelease(v19);
        }
        else
        {
          v14 = (*(uint64_t (**)(const void *))(*(_QWORD *)v13 + 200))(v13);
          if ((*(uint64_t (**)(const void *))(*(_QWORD *)v13 + 48))(v13) == 1)
          {
            v15 = (unsigned int *)(*(uint64_t (**)(const void *, _QWORD))(*(_QWORD *)v13 + 120))(v13, 0);
            v16 = (const void *)(*(uint64_t (**)(const void *))(*(_QWORD *)v13 + 32))(v13);
            if (v14)
              v17 = CFStringCreateWithFormat(0, 0, CFSTR("%@%@"), v14, v16);
            else
              v17 = (const __CFString *)CFRetain(v16);
            v31 = v17;
            v32 = *(unsigned int **)(a1 + 24);
            v33 = *(uint64_t **)(*((_QWORD *)v32 + 9) + 8);
            v34 = *v32;
            v42 = MEMORY[0x24BDAC760];
            *(_QWORD *)&v43 = 0x40000000;
            *((_QWORD *)&v43 + 1) = sub_20B9D9708;
            v44 = &unk_24C46CA90;
            v45 = (uint64_t *)a1;
            v46 = (uint64_t)v17;
            v47 = v15;
            sub_20B9AA4E4(v15, v33, v34, v17, 0, 1, (uint64_t)&v42);
            CFRelease(v31);
          }
          v35 = (const __CFString *)(*(uint64_t (**)(const void *))(*(_QWORD *)v13 + 200))(v13);
          v40 = v35;
          if (v35)
            v35 = (const __CFString *)CFStringGetLength(v35);
          v41 = v35;
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, v10++);
        if (v10 == v39)
          goto LABEL_41;
      }
      sub_20B873328(a1 + 48, *(char **)(a1 + 48), byte_20BA58D40);
      CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(a1 + 96), 0, &stru_24C4B3660);
    }
LABEL_41:
    if (*(_QWORD *)(a1 + 56) != *(_QWORD *)(a1 + 48)
      && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1))
    {
      sub_20B873328(a1 + 48, *(char **)(a1 + 48), byte_20BA58D44);
      CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(a1 + 96), 0, &stru_24C4B3660);
    }
    v36 = *(const __CFArray **)(a1 + 96);
    Count = CFArrayGetCount(v36);
    if (Count)
    {
      ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v36, Count - 1);
      LOBYTE(Count) = sub_20B896464(ValueAtIndex);
    }
    *(_BYTE *)(a1 + 104) = Count;
  }
}

void sub_20B9D9020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9D9040(uint64_t a1)
{
  uint64_t v1;
  const __CFArray *v3;
  CFIndex Count;
  void *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1
    && (v3 = *(const __CFArray **)(v1 + 16)) != 0
    && (Count = CFArrayGetCount(v3), Count >= 1)
    && (v5 = (void *)sub_20B96AAF4(*(_QWORD *)(a1 + 8), Count - 1)) != 0
    && (v8 = v5, objc_msgSend_rawCandidate(v5, v6, v7)))
  {
    return objc_msgSend_rawCandidate(v8, v9, v10);
  }
  else
  {
    return 0;
  }
}

const __CFString *sub_20B9D90A4(uint64_t a1, const void *a2)
{
  const void *v2;
  const __CFString *result;
  const __CFString *v5;
  const __CFAllocator *v6;
  const __CFString *v7;
  uint64_t v8;
  void *v9;
  BOOL v10;
  const __CFString *v11;
  CFIndex Length;
  const __CFAllocator *v13;
  const __CFString *v14;
  CFIndex v15;
  CFMutableArrayRef Mutable;
  uint64_t v17;
  CFIndex v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  CFRange v23;
  _BYTE *v24;
  CFStringRef v25;
  const __CFString *v26;
  CFIndex v27;
  const __CFString *v28;
  uint64_t v29;
  const __CFString *v30;
  uint64_t v31;
  uint64_t v32;
  const void *v33;
  uint64_t v34;
  __CFString *theString;
  uint64_t v36;
  void *v37;
  void *__p;
  _BYTE *v39;
  CFRange v40;

  v2 = a2;
  if ((*(unsigned int (**)(const void *))(*(_QWORD *)a2 + 72))(a2) == 2)
  {
    result = (const __CFString *)__dynamic_cast(v2, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45B850, 0);
    if (result)
    {
      v5 = result;
      result = (const __CFString *)(*((uint64_t (**)(const __CFString *))result->isa + 26))(result);
      if (result)
      {
        v6 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v7 = (const __CFString *)(*((uint64_t (**)(const __CFString *))v5->isa + 26))(v5);
        return CFStringCreateCopy(v6, v7);
      }
    }
  }
  else
  {
    v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 88) + 8);
    v9 = __dynamic_cast(v2, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45D698, 0);
    result = 0;
    if (v9)
      v10 = v8 == 0;
    else
      v10 = 1;
    if (!v10)
    {
      if ((*(unsigned int (**)(void *))(*(_QWORD *)v9 + 104))(v9) != 64)
      {
        result = (const __CFString *)(*(uint64_t (**)(void *))(*(_QWORD *)v9 + 232))(v9);
        if (!result)
          return result;
        v11 = result;
        Length = CFStringGetLength(result);
        v13 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v14 = (const __CFString *)(*(uint64_t (**)(const void *))(*(_QWORD *)v2 + 32))(v2);
        v15 = CFStringGetLength(v14);
        theString = CFStringCreateMutable(v13, v15);
        Mutable = CFArrayCreateMutable(v13, 0, MEMORY[0x24BDBD690]);
        v34 = (*(uint64_t (**)(void *))(*(_QWORD *)v9 + 48))(v9);
        if (!v34)
        {
LABEL_33:
          CFRelease(Mutable);
          return theString;
        }
        v17 = 0;
        v18 = 0;
        v32 = v8;
        v33 = v2;
        v37 = v9;
        while (1)
        {
          CFArrayRemoveAllValues(Mutable);
          v36 = v17;
          v19 = (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v9 + 120))(v9, v17);
          (*(void (**)(void **__return_ptr))(*(_QWORD *)v19 + 56))(&__p);
          if (v39 != __p)
          {
            v20 = 0;
            v21 = 0;
            v22 = (unint64_t)((v39 - (_BYTE *)__p) >> 1) <= 1 ? 1 : (v39 - (_BYTE *)__p) >> 1;
            v23.location = v18;
            do
            {
              while (1)
              {
                v24 = __p;
                v23.length = *((unsigned __int16 *)__p + v20);
                v18 = v23.location + v23.length;
                if (v23.location + v23.length <= Length)
                  break;
                v21 = 1;
                v10 = v22 - 1 == v20++;
                if (v10)
                  goto LABEL_35;
              }
              v25 = CFStringCreateWithSubstring(v13, v11, v23);
              CFArrayAppendValue(Mutable, v25);
              CFRelease(v25);
              ++v20;
              v23.location = v18;
            }
            while (v22 != v20);
            v8 = v32;
            v2 = v33;
            if ((v21 & 1) != 0)
              break;
          }
          if ((*(unsigned int (**)(void *))(*(_QWORD *)v37 + 552))(v37) == 1
            && !sub_20B929184(Mutable))
          {
            break;
          }
          v26 = (const __CFString *)(*(uint64_t (**)(const void *))(*(_QWORD *)v2 + 32))(v2);
          v40.location = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
          v40.length = v27;
          v28 = CFStringCreateWithSubstring(v13, v26, v40);
          v29 = operator new();
          sub_20B90BD70(v29, v28, (uint64_t)Mutable, v8);
          if (*(_QWORD *)(v29 + 8 * (*(_BYTE *)(v29 + 16) == 0)))
            v30 = *(const __CFString **)(v29 + 8 * (*(_BYTE *)(v29 + 16) == 0));
          else
            v30 = v28;
          CFStringAppend(theString, v30);
          CFRelease(v28);
          v31 = sub_20B90C8AC(v29);
          MEMORY[0x20BD39CB0](v31, 0x1060C40285832E9);
          if (__p)
          {
            v39 = __p;
            operator delete(__p);
          }
          v9 = v37;
          v17 = v36 + 1;
          if (v36 + 1 == v34)
            goto LABEL_33;
        }
        v24 = __p;
        if (__p)
        {
LABEL_35:
          v39 = v24;
          operator delete(v24);
        }
        CFRelease(Mutable);
        CFRelease(theString);
      }
      return 0;
    }
  }
  return result;
}

void sub_20B9D945C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, void *__p, uint64_t a19)
{
  uint64_t v19;

  MEMORY[0x20BD39CB0](v19, 0x1060C40285832E9);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20B9D94B8(uint64_t a1, uint64_t a2, CFIndex range, uint64_t a4, _BYTE *a5)
{
  uint64_t v10;
  const __CFString *v11;
  CFRange v12;
  char *v14;
  const __CFString *v15;
  int v17;
  CFRange v18;

  v10 = *(_QWORD *)(a1 + 40);
  v18.location = *(_QWORD *)(a1 + 56) + a2;
  v18.length = range;
  v11 = CFStringCreateWithSubstring(0, *(CFStringRef *)(a1 + 48), v18);
  v12.length = **(_QWORD **)(a1 + 64);
  if (v12.length < 1 || v12.length < range)
  {
    v14 = *(char **)(v10 + 48);
    v17 = sub_20B9D9604((_QWORD *)v10, a4, *(_QWORD *)(a1 + 80), v11, a2, range);
    sub_20B873188(v10 + 48, v14, &v17);
    CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(v10 + 96), 0, v11);
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 56))(v10) & 1) == 0)
      *a5 = 1;
  }
  else
  {
    v12.location = 0;
    v15 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x24BDBD240], *(CFStringRef *)(a1 + 72), v12);
    if (CFStringHasSuffix(v15, v11))
    {
      **(_QWORD **)(a1 + 64) -= range;
    }
    else
    {
      *a5 = 1;
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
    }
    CFRelease(v15);
  }
  CFRelease(v11);
}

uint64_t sub_20B9D9604(_QWORD *a1, uint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, uint64_t a6)
{
  int v11;
  uint64_t v12;
  uint64_t v14;
  unsigned int v15;

  v15 = a2;
  if (!(_DWORD)a2)
  {
    sub_20B968A64(*(uint64_t **)(*(_QWORD *)(a1[3] + 72) + 8), a4, &v15);
    a2 = v15;
    if (!v15)
    {
      if (a4 && CFStringGetLength(a4))
      {
        v11 = CEMStringContainsEmoji();
        if (v11 || (v14 = sub_20B8D2AD4((uint64_t)a4), (_DWORD)v14 == 502) || (a2 = v14, !(_DWORD)v14))
        {
          a2 = (*(uint64_t (**)(_QWORD *, uint64_t, const __CFString *, uint64_t, uint64_t, BOOL))(*a1 + 72))(a1, a3, a4, a5, a6, v11 != 0);
          if (!(_DWORD)a2)
          {
            v12 = *(_QWORD *)(*(_QWORD *)(a1[3] + 8) + 32);
            return (*(uint64_t (**)(uint64_t, const __CFString *))(*(_QWORD *)v12 + 16))(v12, a4);
          }
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return a2;
}

uint64_t sub_20B9D9708(uint64_t a1, CFRange range, uint64_t a3, _BYTE *a4)
{
  CFIndex length;
  CFIndex location;
  uint64_t v9;
  const __CFString *v10;
  uint64_t result;
  int v12;
  CFRange v13;

  length = range.length;
  location = range.location;
  v9 = *(_QWORD *)(a1 + 32);
  v13.location = range.location;
  v13.length = length;
  v10 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x24BDBD240], *(CFStringRef *)(a1 + 40), v13);
  v12 = sub_20B9D9604((_QWORD *)v9, a3, *(_QWORD *)(a1 + 48), v10, location, length);
  sub_20B873328(v9 + 48, *(char **)(v9 + 48), (char *)&v12);
  CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(v9 + 96), 0, v10);
  CFRelease(v10);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 56))(v9);
  if ((result & 1) == 0)
    *a4 = 1;
  return result;
}

__CFString *sub_20B9D97DC(uint64_t a1, char a2)
{
  const __CFAllocator *v4;
  __CFString *Mutable;
  const __CFString *v6;
  uint64_t v7;
  CFIndex v8;
  uint64_t v9;
  uint64_t v10;
  const void *ValueAtIndex;
  const __CFString *v12;

  v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) & 1) != 0)
  {
    v6 = CFSTR("Empty Input Context.");
LABEL_10:
    CFStringAppend(Mutable, v6);
    return Mutable;
  }
  v7 = *(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48);
  if (v7 >= 1)
  {
    v8 = 0;
    v9 = (unint64_t)v7 >> 2;
    v10 = v9 <= 1 ? 1 : v9;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 96), v8);
      v12 = CFStringCreateWithFormat(v4, 0, CFSTR("%@(%d) "), ValueAtIndex, *(unsigned int *)(*(_QWORD *)(a1 + 48) + 4 * v8));
      CFStringAppend(Mutable, v12);
      CFRelease(v12);
      ++v8;
    }
    while (v10 != v8);
    if ((a2 & 1) != 0)
    {
      v6 = CFSTR(" EOS");
      goto LABEL_10;
    }
  }
  return Mutable;
}

uint64_t sub_20B9D98E4(uint64_t a1)
{
  void *v2;
  void *v3;
  void **v5;

  *(_QWORD *)a1 = &off_24C4613C8;
  sub_20B9D996C(a1);
  v2 = *(void **)(a1 + 104);
  if (v2)
  {
    *(_QWORD *)(a1 + 112) = v2;
    operator delete(v2);
  }
  v5 = (void **)(a1 + 80);
  sub_20B83B400(&v5);
  v5 = (void **)(a1 + 56);
  sub_20B83B400(&v5);
  v3 = *(void **)(a1 + 32);
  if (v3)
  {
    *(_QWORD *)(a1 + 40) = v3;
    operator delete(v3);
  }
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20B9D996C(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;

  sub_20B83B440((uint64_t *)(a1 + 56));
  sub_20B83B440((uint64_t *)(a1 + 80));
  if (*(char *)(a1 + 31) < 0)
  {
    **(_WORD **)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  else
  {
    *(_WORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 31) = 0;
  }
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 32);
  v2 = *(uint64_t **)(a1 + 104);
  v3 = *(uint64_t **)(a1 + 112);
  if (v2 != v3)
  {
    do
    {
      v4 = *v2;
      if (*v2)
      {
        if (*(char *)(v4 + 79) < 0)
          operator delete(*(void **)(v4 + 56));
        MEMORY[0x20BD39CB0](v4, 0x1072C4096C72C6FLL);
      }
      ++v2;
    }
    while (v2 != v3);
    v2 = *(uint64_t **)(a1 + 104);
  }
  *(_QWORD *)(a1 + 112) = v2;
}

void sub_20B9D9A1C(uint64_t a1)
{
  sub_20B9D98E4(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B9D9A40(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    return *(_QWORD *)(a1 + 16);
  else
    return *(unsigned __int8 *)(a1 + 31);
}

uint64_t sub_20B9D9A58(uint64_t a1, uint64_t a2)
{
  return (uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 24 * a2 + 8) - *(_QWORD *)(*(_QWORD *)(a1 + 56) + 24 * a2)) >> 3;
}

double sub_20B9D9A74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 24 * a2) + 8 * a3) + 28);
}

uint64_t sub_20B9D9A94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 24 * a2) + 8 * a3) + 18);
}

uint64_t sub_20B9D9AB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 24 * a2) + 8 * a3);
  result = v3 + 56;
  if (*(char *)(v3 + 79) < 0)
    return *(_QWORD *)result;
  return result;
}

uint64_t sub_20B9D9ADC()
{
  return 0;
}

uint64_t sub_20B9D9AE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char v8;
  _QWORD v9[2];

  v8 = 0;
  v9[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  v9[1] = v5;
  v6 = *(_QWORD *)(a4 + 24);
  if (!v6)
    sub_20B80BB74();
  return (*(uint64_t (**)(uint64_t, _QWORD *, char *))(*(_QWORD *)v6 + 48))(v6, v9, &v8);
}

uint64_t sub_20B9D9B3C(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v2 = operator new();
  v3 = a1[15];
  v4 = a1[13];
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  v5 = (uint64_t *)a1[14];
  v6 = ((uint64_t)v5 - v4) >> 3;
  *(_DWORD *)(v2 + 20) = v6;
  if ((unint64_t)v5 >= v3)
  {
    if ((unint64_t)(v6 + 1) >> 61)
      sub_20B80CDD8();
    v8 = v3 - v4;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v6 + 1))
      v9 = v6 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    if (v10)
      v11 = (char *)sub_20B800BE8((uint64_t)(a1 + 15), v10);
    else
      v11 = 0;
    v12 = (uint64_t *)&v11[8 * v6];
    v13 = &v11[8 * v10];
    *v12 = v2;
    v7 = v12 + 1;
    v15 = (char *)a1[13];
    v14 = (char *)a1[14];
    if (v14 != v15)
    {
      do
      {
        v16 = *((_QWORD *)v14 - 1);
        v14 -= 8;
        *--v12 = v16;
      }
      while (v14 != v15);
      v14 = (char *)a1[13];
    }
    a1[13] = v12;
    a1[14] = v7;
    a1[15] = v13;
    if (v14)
      operator delete(v14);
  }
  else
  {
    *v5 = v2;
    v7 = v5 + 1;
  }
  a1[14] = v7;
  return v2;
}

void sub_20B9D9C50(void **a1, void *a2, unint64_t a3)
{
  void **v6;
  uint64_t v7;
  void **v8;
  void ***v9;
  unint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void ***v17;
  char *v18;
  char *v19;
  void **v20;
  unint64_t v21;
  _QWORD *v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void ***v29;
  unint64_t v30;
  char *v31;
  char *v32;
  void **v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void **v39;
  uint64_t *v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t *v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void **v55;
  void **v56;
  uint64_t *v57;
  unint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t *v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  __int128 __dst;
  void *v71;

  sub_20B9D996C((uint64_t)a1);
  sub_20B877ED0(&__dst, a2, a3);
  v6 = a1 + 1;
  if (*((char *)a1 + 31) < 0)
    operator delete(*v6);
  *(_OWORD *)v6 = __dst;
  a1[3] = v71;
  if (*((char *)a1 + 31) < 0)
  {
    v6 = (void **)a1[1];
    v7 = (uint64_t)a1[2];
  }
  else
  {
    v7 = *((unsigned __int8 *)a1 + 31);
  }
  v8 = (void **)((char *)v6 + 2 * v7);
  if (v7 <= 0)
  {
    v9 = (void ***)a1[5];
  }
  else
  {
    v9 = (void ***)a1[5];
    do
    {
      v10 = (unint64_t)a1[6];
      if ((unint64_t)v9 >= v10)
      {
        v11 = a1[4];
        v12 = ((char *)v9 - v11) >> 3;
        if ((unint64_t)(v12 + 1) >> 61)
          goto LABEL_79;
        v13 = v10 - (_QWORD)v11;
        v14 = v13 >> 2;
        if (v13 >> 2 <= (unint64_t)(v12 + 1))
          v14 = v12 + 1;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
          v15 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        if (v15)
          v15 = (unint64_t)sub_20B87FB70(v15);
        else
          v16 = 0;
        v17 = (void ***)(v15 + 8 * v12);
        *v17 = v6;
        v9 = v17 + 1;
        v19 = (char *)a1[4];
        v18 = (char *)a1[5];
        if (v18 != v19)
        {
          do
          {
            v20 = (void **)*((_QWORD *)v18 - 1);
            v18 -= 8;
            *--v17 = v20;
          }
          while (v18 != v19);
          v18 = (char *)a1[4];
        }
        a1[4] = v17;
        a1[5] = v9;
        a1[6] = (void *)(v15 + 8 * v16);
        if (v18)
          operator delete(v18);
      }
      else
      {
        *v9++ = v6;
      }
      a1[5] = v9;
      v6 = (void **)((char *)v6 + 2);
    }
    while (v6 < v8);
  }
  v21 = (unint64_t)a1[6];
  if ((unint64_t)v9 >= v21)
  {
    v23 = a1[4];
    v24 = ((char *)v9 - v23) >> 3;
    if ((unint64_t)(v24 + 1) >> 61)
LABEL_79:
      sub_20B80CDD8();
    v25 = v21 - (_QWORD)v23;
    v26 = v25 >> 2;
    if (v25 >> 2 <= (unint64_t)(v24 + 1))
      v26 = v24 + 1;
    if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
      v27 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v27 = v26;
    if (v27)
      v27 = (unint64_t)sub_20B87FB70(v27);
    else
      v28 = 0;
    v29 = (void ***)(v27 + 8 * v24);
    v30 = v27 + 8 * v28;
    *v29 = v8;
    v22 = v29 + 1;
    v32 = (char *)a1[4];
    v31 = (char *)a1[5];
    if (v31 != v32)
    {
      do
      {
        v33 = (void **)*((_QWORD *)v31 - 1);
        v31 -= 8;
        *--v29 = v33;
      }
      while (v31 != v32);
      v31 = (char *)a1[4];
    }
    a1[4] = v29;
    a1[5] = v22;
    a1[6] = (void *)v30;
    if (v31)
      operator delete(v31);
  }
  else
  {
    *v9 = v8;
    v22 = v9 + 1;
  }
  a1[5] = v22;
  v34 = (*((uint64_t (**)(void **))*a1 + 3))(a1);
  v35 = ((v34 << 32) + 0x100000000) >> 32;
  sub_20B9DA06C((uint64_t)(a1 + 7), v35);
  sub_20B9DA06C((uint64_t)(a1 + 10), v35);
  if ((v34 & 0x80000000) == 0)
  {
    v36 = 0;
    v37 = (v34 + 1);
    do
    {
      sub_20B9DA268((uint64_t)a1[7] + v36);
      sub_20B9DA268((uint64_t)a1[10] + v36);
      v36 += 24;
      --v37;
    }
    while (v37);
  }
  v38 = sub_20B9D9B3C(a1);
  *(_DWORD *)(v38 + 48) = -1;
  *(_WORD *)(v38 + 16) = 0;
  v39 = (void **)a1[10];
  v40 = (uint64_t *)v39[1];
  v41 = (unint64_t)v39[2];
  if ((unint64_t)v40 >= v41)
  {
    v43 = ((char *)v40 - (_BYTE *)*v39) >> 3;
    if ((unint64_t)(v43 + 1) >> 61)
      sub_20B80CDD8();
    v44 = v41 - (_QWORD)*v39;
    v45 = v44 >> 2;
    if (v44 >> 2 <= (unint64_t)(v43 + 1))
      v45 = v43 + 1;
    if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
      v46 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v46 = v45;
    if (v46)
      v47 = (char *)sub_20B800BE8((uint64_t)(v39 + 2), v46);
    else
      v47 = 0;
    v48 = (uint64_t *)&v47[8 * v43];
    v49 = &v47[8 * v46];
    *v48 = v38;
    v42 = v48 + 1;
    v51 = (char *)*v39;
    v50 = (char *)v39[1];
    if (v50 != *v39)
    {
      do
      {
        v52 = *((_QWORD *)v50 - 1);
        v50 -= 8;
        *--v48 = v52;
      }
      while (v50 != v51);
      v50 = (char *)*v39;
    }
    *v39 = v48;
    v39[1] = v42;
    v39[2] = v49;
    if (v50)
      operator delete(v50);
  }
  else
  {
    *v40 = v38;
    v42 = v40 + 1;
  }
  v39[1] = v42;
  v53 = sub_20B9D9B3C(a1);
  v54 = v53;
  *(_DWORD *)(v53 + 48) = -1;
  *(_WORD *)(v53 + 16) = v34;
  v55 = (void **)((char *)a1[7] + 24 * (int)v34);
  v56 = v55 + 1;
  v57 = (uint64_t *)v55[1];
  v58 = (unint64_t)v55[2];
  if ((unint64_t)v57 >= v58)
  {
    v60 = ((char *)v57 - (_BYTE *)*v55) >> 3;
    if ((unint64_t)(v60 + 1) >> 61)
      sub_20B80CDD8();
    v61 = v58 - (_QWORD)*v55;
    v62 = v61 >> 2;
    if (v61 >> 2 <= (unint64_t)(v60 + 1))
      v62 = v60 + 1;
    if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8)
      v63 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v63 = v62;
    if (v63)
      v64 = (char *)sub_20B800BE8((uint64_t)(v55 + 2), v63);
    else
      v64 = 0;
    v65 = (uint64_t *)&v64[8 * v60];
    v66 = &v64[8 * v63];
    *v65 = v54;
    v59 = v65 + 1;
    v67 = (char *)*v56;
    v68 = (char *)*v55;
    if (*v56 != *v55)
    {
      do
      {
        v69 = *((_QWORD *)v67 - 1);
        v67 -= 8;
        *--v65 = v69;
      }
      while (v67 != v68);
      v67 = (char *)*v55;
    }
    *v55 = v65;
    *v56 = v59;
    v55[2] = v66;
    if (v67)
      operator delete(v67);
  }
  else
  {
    *v57 = v53;
    v59 = v57 + 1;
  }
  *v56 = v59;
}

void sub_20B9DA06C(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  __int128 v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  void *v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  void *v25;

  v4 = *(_QWORD **)a1;
  v3 = *(_QWORD **)(a1 + 8);
  v5 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *(_QWORD *)a1) >> 3);
  v6 = a2 - v5;
  if (a2 > v5)
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (0xAAAAAAAAAAAAAAABLL * ((v7 - (uint64_t)v3) >> 3) >= v6)
    {
      bzero(*(void **)(a1 + 8), 24 * ((24 * v6 - 24) / 0x18) + 24);
      *(_QWORD *)(a1 + 8) = &v3[3 * ((24 * v6 - 24) / 0x18) + 3];
      return;
    }
    if (a2 > 0xAAAAAAAAAAAAAAALL)
      sub_20B80CDD8();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (uint64_t)v4) >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= a2)
      v9 = a2;
    if (v8 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v9;
    if (v10 > 0xAAAAAAAAAAAAAAALL)
      sub_20B800BC0();
    v11 = 3 * v10;
    v12 = (char *)operator new(24 * v10);
    v13 = &v12[24 * v5];
    v14 = &v12[8 * v11];
    v15 = 24 * ((24 * v6 - 24) / 0x18) + 24;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v3 == v4)
    {
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (!v3)
        return;
    }
    else
    {
      do
      {
        v17 = *(_OWORD *)(v3 - 3);
        v3 -= 3;
        *(_OWORD *)(v13 - 24) = v17;
        v13 -= 24;
        *((_QWORD *)v13 + 2) = v3[2];
        *v3 = 0;
        v3[1] = 0;
        v3[2] = 0;
      }
      while (v3 != v4);
      v3 = *(_QWORD **)a1;
      v18 = *(_QWORD **)(a1 + 8);
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (v18 != v3)
      {
        v19 = v18;
        do
        {
          v21 = (void *)*(v19 - 3);
          v19 -= 3;
          v20 = v21;
          if (v21)
          {
            *(v18 - 2) = v20;
            operator delete(v20);
          }
          v18 = v19;
        }
        while (v19 != v3);
      }
      if (!v3)
        return;
    }
    operator delete(v3);
    return;
  }
  if (a2 < v5)
  {
    v22 = &v4[3 * a2];
    if (v3 != v22)
    {
      v23 = *(_QWORD **)(a1 + 8);
      do
      {
        v25 = (void *)*(v23 - 3);
        v23 -= 3;
        v24 = v25;
        if (v25)
        {
          *(v3 - 2) = v24;
          operator delete(v24);
        }
        v3 = v23;
      }
      while (v23 != v22);
    }
    *(_QWORD *)(a1 + 8) = v22;
  }
}

void sub_20B9DA268(uint64_t a1)
{
  _BYTE *v1;
  _BYTE *v3;
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;

  v1 = *(_BYTE **)a1;
  if (*(_QWORD *)(a1 + 16) - *(_QWORD *)a1 <= 0x7FuLL)
  {
    v3 = *(_BYTE **)(a1 + 8);
    v4 = (char *)operator new(0x80uLL);
    v5 = &v4[(v3 - v1) & 0xFFFFFFFFFFFFFFF8];
    v6 = v5;
    if (v3 != v1)
    {
      v6 = &v4[(v3 - v1) & 0xFFFFFFFFFFFFFFF8];
      do
      {
        v7 = *((_QWORD *)v3 - 1);
        v3 -= 8;
        *((_QWORD *)v6 - 1) = v7;
        v6 -= 8;
      }
      while (v3 != v1);
    }
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v4 + 128;
    if (v1)
      operator delete(v1);
  }
}

uint64_t sub_20B9DA2F8(uint64_t a1, int a2, int a3, __int16 a4, void *a5, unint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void **v15;
  uint64_t **v16;
  void **v17;
  uint64_t *v18;
  unint64_t v19;
  char **v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  void **v32;
  void **v33;
  uint64_t *v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t *v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  __int128 __dst;
  uint64_t v49;

  v12 = sub_20B9D9B3C((_QWORD *)a1);
  v13 = v12;
  v14 = (_QWORD *)(a1 + 8);
  if (*(char *)(a1 + 31) < 0)
    v14 = (_QWORD *)*v14;
  *(_QWORD *)v12 = (char *)v14 + 2 * a2;
  *(_QWORD *)(v12 + 8) = a3;
  *(_WORD *)(v12 + 16) = a2;
  *(_WORD *)(v12 + 18) = a3;
  *(_WORD *)(v12 + 52) = a4;
  sub_20B877ED0(&__dst, a5, a6);
  v15 = (void **)(v13 + 56);
  if (*(char *)(v13 + 79) < 0)
    operator delete(*v15);
  *(_OWORD *)v15 = __dst;
  *(_QWORD *)(v13 + 72) = v49;
  v16 = (uint64_t **)(*(_QWORD *)(a1 + 56) + 24 * a2);
  v17 = (void **)(v16 + 1);
  v18 = v16[1];
  v20 = (char **)(v16 + 2);
  v19 = (unint64_t)v16[2];
  if ((unint64_t)v18 >= v19)
  {
    v22 = v18 - *v16;
    if ((unint64_t)(v22 + 1) >> 61)
      sub_20B80CDD8();
    v23 = v19 - (_QWORD)*v16;
    v24 = v23 >> 2;
    if (v23 >> 2 <= (unint64_t)(v22 + 1))
      v24 = v22 + 1;
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
      v25 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v25 = v24;
    if (v25)
      v26 = (char *)sub_20B800BE8((uint64_t)v20, v25);
    else
      v26 = 0;
    v27 = (uint64_t *)&v26[8 * v22];
    v28 = &v26[8 * v25];
    *v27 = v13;
    v21 = v27 + 1;
    v29 = (char *)*v17;
    v30 = (char *)*v16;
    if (*v17 != *v16)
    {
      do
      {
        v31 = *((_QWORD *)v29 - 1);
        v29 -= 8;
        *--v27 = v31;
      }
      while (v29 != v30);
      v29 = (char *)*v16;
    }
    *v16 = v27;
    *v17 = v21;
    *v20 = v28;
    if (v29)
      operator delete(v29);
  }
  else
  {
    *v18 = v13;
    v21 = v18 + 1;
  }
  *v17 = v21;
  v32 = (void **)(*(_QWORD *)(a1 + 80) + 24 * (*(unsigned __int16 *)(v13 + 18) + a2));
  v33 = v32 + 1;
  v34 = (uint64_t *)v32[1];
  v35 = (unint64_t)v32[2];
  if ((unint64_t)v34 >= v35)
  {
    v37 = ((char *)v34 - (_BYTE *)*v32) >> 3;
    if ((unint64_t)(v37 + 1) >> 61)
      sub_20B80CDD8();
    v38 = v35 - (_QWORD)*v32;
    v39 = v38 >> 2;
    if (v38 >> 2 <= (unint64_t)(v37 + 1))
      v39 = v37 + 1;
    if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8)
      v40 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v40 = v39;
    if (v40)
      v41 = (char *)sub_20B800BE8((uint64_t)(v32 + 2), v40);
    else
      v41 = 0;
    v42 = (uint64_t *)&v41[8 * v37];
    v43 = &v41[8 * v40];
    *v42 = v13;
    v36 = v42 + 1;
    v44 = (char *)*v33;
    v45 = (char *)*v32;
    if (*v33 != *v32)
    {
      do
      {
        v46 = *((_QWORD *)v44 - 1);
        v44 -= 8;
        *--v42 = v46;
      }
      while (v44 != v45);
      v44 = (char *)*v32;
    }
    *v32 = v42;
    *v33 = v36;
    v32[2] = v43;
    if (v44)
      operator delete(v44);
  }
  else
  {
    *v34 = v13;
    v36 = v34 + 1;
  }
  *v33 = v36;
  return v13;
}

void sub_20B9DA554(unint64_t *a1, _QWORD *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  unint64_t v36;
  uint64_t v37;
  BOOL v38;

  v4 = (*(uint64_t (**)(_QWORD *))(*a2 + 24))(a2);
  v5 = a2[7];
  if (v4 < 0)
  {
LABEL_16:
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    v21 = *(_QWORD *)(**(_QWORD **)(v5 + 24 * v4) + 40);
    if (*(_QWORD *)(v21 + 40))
    {
      v22 = 0;
      v23 = a1 + 2;
      do
      {
        if ((unint64_t)v22 >= *v23)
        {
          v24 = (uint64_t)((uint64_t)v22 - *a1) >> 3;
          if ((unint64_t)(v24 + 1) >> 61)
            sub_20B80CDD8();
          v25 = *v23 - *a1;
          v26 = v25 >> 2;
          if (v25 >> 2 <= (unint64_t)(v24 + 1))
            v26 = v24 + 1;
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
            v27 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v27 = v26;
          if (v27)
            v28 = (char *)sub_20B800BE8((uint64_t)(a1 + 2), v27);
          else
            v28 = 0;
          v29 = &v28[8 * v24];
          *(_QWORD *)v29 = v21;
          v22 = v29 + 8;
          v31 = (char *)*a1;
          v30 = (char *)a1[1];
          if (v30 != (char *)*a1)
          {
            do
            {
              v32 = *((_QWORD *)v30 - 1);
              v30 -= 8;
              *((_QWORD *)v29 - 1) = v32;
              v29 -= 8;
            }
            while (v30 != v31);
            v30 = (char *)*a1;
          }
          *a1 = (unint64_t)v29;
          a1[1] = (unint64_t)v22;
          a1[2] = (unint64_t)&v28[8 * v27];
          if (v30)
            operator delete(v30);
        }
        else
        {
          *v22++ = v21;
        }
        a1[1] = (unint64_t)v22;
        v21 = *(_QWORD *)(v21 + 40);
      }
      while (*(_QWORD *)(v21 + 40));
      v33 = *a1;
      v34 = v22 - 1;
      if ((_QWORD *)*a1 != v22 && (unint64_t)v34 > v33)
      {
        v36 = v33 + 8;
        do
        {
          v37 = *(_QWORD *)(v36 - 8);
          *(_QWORD *)(v36 - 8) = *v34;
          *v34-- = v37;
          v38 = v36 >= (unint64_t)v34;
          v36 += 8;
        }
        while (!v38);
      }
    }
  }
  else
  {
    v6 = 0;
    while (1)
    {
      v7 = (uint64_t **)(v5 + 24 * v6);
      v8 = *v7;
      v9 = v7[1];
      if (v8 != v9)
        break;
LABEL_15:
      if (++v6 == v4 + 1)
        goto LABEL_16;
    }
    v10 = (uint64_t **)(a2[10] + 24 * v6);
    v11 = *v10;
    v12 = v10[1];
    while (1)
    {
      v13 = *v8;
      *(_QWORD *)(*v8 + 40) = 0;
      if (v11 == v12)
        break;
      v14 = 0;
      v15 = 0.0;
      v16 = v11;
      do
      {
        v18 = *v16++;
        v17 = v18;
        v19 = *(float *)(v13 + 24) + *(float *)(v18 + 32);
        if (v19 > v15 || v14 == 0)
        {
          v15 = v19;
          v14 = v17;
        }
      }
      while (v16 != v12);
      if (!v14)
        break;
      *(_QWORD *)(v13 + 40) = v14;
      *(float *)(v13 + 32) = v15;
      if (++v8 == v9)
        goto LABEL_15;
    }
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_20B9DA75C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B9DA77C(_QWORD *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  _QWORD *v7;
  __int128 v8;
  unint64_t v9;
  _QWORD *v10;
  char *v11;
  NSObject *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  int v17;
  char *v18;
  _QWORD *v19;
  int v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  _QWORD **v30;
  uint64_t **v31;
  uint64_t *v32;
  uint64_t v33;
  float *v34;
  float *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  _QWORD **v52;
  _QWORD *v53;
  char *v54;
  char *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  char *v68;
  NSObject *v69;
  char *v70;
  char *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  _QWORD *v90;
  uint64_t v91;
  int v92;
  unint64_t v93;
  uint64_t v94;
  float v95;
  uint64_t v96;
  unsigned __int16 *v97;
  int v98;
  void *v99;
  unint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  char *v103;
  void *v104;
  char *v105;
  int64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  char *v113;
  void *v114;
  char *v115;
  int64_t v116;
  uint64_t v117;
  int64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  __int16 v122;
  float v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  int v127;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  __int128 v133;
  char *v134;
  void *v135;
  int v136;
  unint64_t v137;
  unint64_t v138;
  __int16 v139;
  unint64_t v140;
  unint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  __int128 v145;
  uint64_t v146;
  unint64_t v147;
  __int128 *v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  unint64_t v152;
  __int128 v153;
  void *v154;
  unint64_t v155;
  unint64_t v156;
  __int16 v157;
  unint64_t v158;
  unint64_t v159;
  char *v160;
  char *v161;
  uint64_t v162;
  __int128 v163;
  int v164;
  unint64_t v165;
  _QWORD *v166;
  _QWORD *v167;
  _QWORD *v170;
  _QWORD *v171;
  int v172;
  uint64_t *v174;
  char **v175;
  char *v176;
  int v177;
  char *v178;
  int v179;
  char *v180;
  int v181;
  void *v182[3];
  _QWORD *v183;
  _QWORD *v184;
  _QWORD *v185;
  void *__p[2];
  char *v187;
  _QWORD *v188;
  _QWORD *v189;
  uint8_t buf[8];
  char *v191;
  char *v192;
  uint64_t v193;
  _QWORD *v194;
  __int128 v195;
  uint64_t v196;
  uint64_t v197;

  v4 = a4;
  v197 = *MEMORY[0x24BDAC8D0];
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v167 = a4 + 2;
  if (!a2)
  {
    v12 = sub_20B9A7C5C(5u);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_20B7F7000, v12, OS_LOG_TYPE_DEBUG, "nbest_size >= 1. Returns empty result.", buf, 2u);
    }
    v183 = 0;
    v184 = 0;
    v185 = 0;
    goto LABEL_140;
  }
  if (a2 > 0x333333333333333)
    sub_20B80CDD8();
  v194 = a4 + 2;
  *(_QWORD *)buf = sub_20B9DBB38(a2);
  v191 = *(char **)buf;
  v192 = *(char **)buf;
  v193 = *(_QWORD *)buf + 80 * v6;
  sub_20B9DBA64(v4, buf);
  sub_20B9DBB7C((uint64_t)buf);
  if (a2 == 1)
  {
    sub_20B9DA554((unint64_t *)&v195, a1);
    v183 = 0;
    v184 = 0;
    v185 = 0;
    v182[0] = &v183;
    LOBYTE(v182[1]) = 0;
    v7 = operator new(0x18uLL);
    v183 = v7;
    v184 = v7;
    v185 = v7 + 3;
    v188 = v7;
    v189 = v7;
    *(_QWORD *)buf = &v185;
    v191 = (char *)&v188;
    v192 = (char *)&v189;
    LOBYTE(v193) = 0;
    v7[1] = 0;
    v7[2] = 0;
    v8 = v195;
    v9 = (uint64_t)(*((_QWORD *)&v195 + 1) - v195) >> 3;
    *v7 = 0;
    sub_20B9DB988(v7, (const void *)v8, *((uint64_t *)&v8 + 1), v9);
    v189 += 3;
    v10 = v189;
    LOBYTE(v193) = 1;
    sub_20B9DBA00((uint64_t)buf);
    v184 = v10;
    v11 = (char *)v195;
    if (!(_QWORD)v195)
      goto LABEL_140;
    *((_QWORD *)&v195 + 1) = v195;
    goto LABEL_139;
  }
  v183 = 0;
  v184 = 0;
  v185 = 0;
  v13 = operator new();
  *(_QWORD *)v13 = 0;
  *(_QWORD *)(v13 + 8) = 0;
  *(_QWORD *)(v13 + 16) = 0;
  v14 = (char *)operator new(8uLL);
  *(_QWORD *)v14 = v13;
  v15 = v14 + 8;
  v16 = **(_QWORD **)(a1[7] + 24 * (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1));
  *(_QWORD *)v13 = v16;
  *(_QWORD *)(v13 + 8) = 0;
  v17 = *(_DWORD *)(v16 + 24);
  *(_DWORD *)(v13 + 16) = v17;
  *(_DWORD *)(v13 + 20) = v17;
  v18 = (char *)operator new(8uLL);
  *(_QWORD *)v18 = v13;
  v180 = v18 + 8;
  sub_20B9DA554((unint64_t *)__p, a1);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v165 = a2;
  v166 = 0;
  v19 = 0;
  v164 = 10 * a2;
  if (10 * (int)a2 >= 512)
    v20 = 512;
  else
    v20 = 10 * a2;
  if (v20 <= 1)
    v20 = 1;
  v172 = v20;
  v178 = v14 + 8;
  v21 = v18 + 8;
  while (1)
  {
    v22 = *(_QWORD *)v18;
    if (v21 - v18 >= 9)
    {
      v23 = 0;
      v24 = (v21 - v18) >> 3;
      v25 = v18;
      do
      {
        v26 = v25;
        v25 += 8 * v23 + 8;
        v27 = 2 * v23;
        v23 = (2 * v23) | 1;
        v28 = v27 + 2;
        if (v28 < v24 && *(float *)(*(_QWORD *)v25 + 16) < *(float *)(*((_QWORD *)v25 + 1) + 16))
        {
          v25 += 8;
          v23 = v28;
        }
        *(_QWORD *)v26 = *(_QWORD *)v25;
      }
      while (v23 <= (uint64_t)((unint64_t)(v24 - 2) >> 1));
      v29 = v21 - 8;
      if (v25 == v21 - 8)
      {
        *(_QWORD *)v25 = v22;
      }
      else
      {
        *(_QWORD *)v25 = *(_QWORD *)v29;
        *(_QWORD *)v29 = v22;
        sub_20B8446A0((uint64_t)v18, (uint64_t)(v25 + 8), (v25 + 8 - v18) >> 3);
      }
    }
    v21 -= 8;
    v30 = (_QWORD **)a1[10];
    if (*(_QWORD *)v22 == **v30)
      break;
    v171 = v19;
    v31 = &v30[3 * *(unsigned __int16 *)(*(_QWORD *)v22 + 16)];
    v32 = *v31;
    v174 = v31[1];
    if (*v31 != v174)
    {
      while (1)
      {
        v33 = *v32;
        v34 = (float *)operator new();
        v35 = v34;
        *(_QWORD *)v34 = 0;
        *((_QWORD *)v34 + 1) = 0;
        *((_QWORD *)v34 + 2) = 0;
        if (v15 >= v178)
        {
          v36 = (v15 - v14) >> 3;
          v37 = v36 + 1;
          if ((unint64_t)(v36 + 1) >> 61)
            sub_20B80CDD8();
          if ((v178 - v14) >> 2 > v37)
            v37 = (v178 - v14) >> 2;
          v38 = (unint64_t)(v178 - v14) >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v37;
          if (v38)
          {
            if (v38 >> 61)
              sub_20B800BC0();
            v39 = (char *)operator new(8 * v38);
            v40 = v14;
          }
          else
          {
            v40 = v14;
            v39 = 0;
          }
          v14 = &v39[8 * v36];
          *(_QWORD *)v14 = v35;
          v41 = v14 + 8;
          while (v15 != v40)
          {
            v42 = *((_QWORD *)v15 - 1);
            v15 -= 8;
            *((_QWORD *)v14 - 1) = v42;
            v14 -= 8;
          }
          v178 = &v39[8 * v38];
          if (v40)
            operator delete(v40);
          v15 = v41;
        }
        else
        {
          *(_QWORD *)v15 = v34;
          v15 += 8;
        }
        *(_QWORD *)v35 = v33;
        v35[5] = *(float *)(v33 + 24) + *(float *)(v22 + 20);
        v35[4] = *(float *)(v33 + 32) + *(float *)(v22 + 20);
        *((_QWORD *)v35 + 1) = v22;
        if (v21 >= v180)
          break;
        *(_QWORD *)v21 = v35;
        v21 += 8;
LABEL_65:
        v50 = v21 - v18;
        sub_20B8446A0((uint64_t)v18, (uint64_t)v21, (v21 - v18) >> 3);
        if (++v32 == v174)
          goto LABEL_89;
      }
      v43 = (v21 - v18) >> 3;
      v44 = v43 + 1;
      if ((unint64_t)(v43 + 1) >> 61)
        sub_20B80CDD8();
      if ((v180 - v18) >> 2 > v44)
        v44 = (v180 - v18) >> 2;
      if ((unint64_t)(v180 - v18) >= 0x7FFFFFFFFFFFFFF8)
        v45 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v45 = v44;
      if (v45)
      {
        if (v45 >> 61)
          sub_20B800BC0();
        v46 = (char *)operator new(8 * v45);
      }
      else
      {
        v46 = 0;
      }
      v47 = &v46[8 * v43];
      v180 = &v46[8 * v45];
      *(_QWORD *)v47 = v35;
      v48 = v47 + 8;
      if (v21 == v18)
      {
        v18 = v21;
      }
      else
      {
        do
        {
          v49 = *((_QWORD *)v21 - 1);
          v21 -= 8;
          *((_QWORD *)v47 - 1) = v49;
          v47 -= 8;
        }
        while (v21 != v18);
        if (!v18)
          goto LABEL_64;
      }
      operator delete(v18);
LABEL_64:
      v18 = v47;
      v21 = v48;
      goto LABEL_65;
    }
    v50 = v21 - v18;
LABEL_89:
    if (v50 <= 0xC34F8)
    {
      v19 = v171;
      goto LABEL_126;
    }
    v19 = v171;
    v69 = sub_20B9A7C5C(5u);
    if (os_log_type_enabled(v69, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_20B7F7000, v69, OS_LOG_TYPE_DEBUG, "Too big agenda. shrinking", buf, 2u);
    }
    if (v164 < 1)
    {
      v70 = 0;
      v71 = 0;
      v180 = 0;
      if (!v18)
        goto LABEL_124;
    }
    else
    {
      v70 = 0;
      v71 = 0;
      v180 = 0;
      v72 = 0;
      v176 = v14;
      do
      {
        v73 = *(_QWORD *)v18;
        if (v71 >= v180)
        {
          v74 = (v71 - v70) >> 3;
          v75 = v74 + 1;
          if ((unint64_t)(v74 + 1) >> 61)
            sub_20B80CDD8();
          if ((v180 - v70) >> 2 > v75)
            v75 = (v180 - v70) >> 2;
          if ((unint64_t)(v180 - v70) >= 0x7FFFFFFFFFFFFFF8)
            v76 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v76 = v75;
          if (v76)
          {
            if (v76 >> 61)
              sub_20B800BC0();
            v77 = (char *)operator new(8 * v76);
          }
          else
          {
            v77 = 0;
          }
          v78 = &v77[8 * v74];
          *(_QWORD *)v78 = v73;
          v79 = v78 + 8;
          while (v71 != v70)
          {
            v80 = *((_QWORD *)v71 - 1);
            v71 -= 8;
            *((_QWORD *)v78 - 1) = v80;
            v78 -= 8;
          }
          v180 = &v77[8 * v76];
          if (v70)
            operator delete(v70);
          v70 = v78;
          v71 = v79;
          v14 = v176;
          v19 = v171;
        }
        else
        {
          *(_QWORD *)v71 = v73;
          v71 += 8;
        }
        sub_20B8446A0((uint64_t)v70, (uint64_t)v71, (v71 - v70) >> 3);
        if (v21 - v18 >= 9)
        {
          v81 = 0;
          v82 = (v21 - v18) >> 3;
          v83 = *(_QWORD *)v18;
          v84 = v18;
          do
          {
            v85 = v84;
            v84 += 8 * v81 + 8;
            v86 = 2 * v81;
            v81 = (2 * v81) | 1;
            v87 = v86 + 2;
            if (v87 < v82 && *(float *)(*(_QWORD *)v84 + 16) < *(float *)(*((_QWORD *)v84 + 1) + 16))
            {
              v84 += 8;
              v81 = v87;
            }
            *(_QWORD *)v85 = *(_QWORD *)v84;
          }
          while (v81 <= (uint64_t)((unint64_t)(v82 - 2) >> 1));
          v88 = v21 - 8;
          if (v84 == v21 - 8)
          {
            *(_QWORD *)v84 = v83;
          }
          else
          {
            *(_QWORD *)v84 = *(_QWORD *)v88;
            *(_QWORD *)v88 = v83;
            sub_20B8446A0((uint64_t)v18, (uint64_t)(v84 + 8), (v84 + 8 - v18) >> 3);
          }
        }
        v21 -= 8;
        ++v72;
      }
      while (v72 != v172);
      if (!v18)
        goto LABEL_124;
    }
    operator delete(v18);
LABEL_124:
    v21 = v71;
    v18 = v70;
LABEL_126:
    v68 = v21;
    if (v18 == v21)
      goto LABEL_130;
  }
  sub_20B9DA06C((uint64_t)&v183, 1 - 0x5555555555555555 * (v19 - v166));
  v51 = *(_QWORD **)(v22 + 8);
  v52 = (_QWORD **)(v51 + 1);
  v19 = v184;
  if (v51[1])
  {
    v175 = (char **)(v184 - 3);
    v53 = v184 - 1;
    v54 = (char *)*(v184 - 2);
    do
    {
      if ((unint64_t)v54 >= *v53)
      {
        v55 = v14;
        v56 = v19;
        v57 = (v54 - *v175) >> 3;
        if ((unint64_t)(v57 + 1) >> 61)
          sub_20B80CDD8();
        v58 = *v53 - (_QWORD)*v175;
        v59 = v58 >> 2;
        if (v58 >> 2 <= (unint64_t)(v57 + 1))
          v59 = v57 + 1;
        if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8)
          v60 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v60 = v59;
        if (v60)
          v61 = (char *)sub_20B800BE8((uint64_t)v53, v60);
        else
          v61 = 0;
        v62 = &v61[8 * v57];
        *(_QWORD *)v62 = *v51;
        v54 = v62 + 8;
        v19 = v56;
        v64 = (char *)*(v56 - 3);
        v63 = (char *)*(v56 - 2);
        v14 = v55;
        if (v63 != v64)
        {
          do
          {
            v65 = *((_QWORD *)v63 - 1);
            v63 -= 8;
            *((_QWORD *)v62 - 1) = v65;
            v62 -= 8;
          }
          while (v63 != v64);
          v63 = *v175;
        }
        *(v19 - 3) = v62;
        *(v19 - 2) = v54;
        *(v19 - 1) = &v61[8 * v60];
        if (v63)
          operator delete(v63);
      }
      else
      {
        *(_QWORD *)v54 = *v51;
        v54 += 8;
      }
      *(v19 - 2) = v54;
      v51 = *v52;
      v66 = *v52;
      v67 = v66[1];
      v52 = (_QWORD **)(v66 + 1);
    }
    while (v67);
  }
  v166 = v183;
  v68 = v18;
  if (0xAAAAAAAAAAAAAAABLL * (v19 - v183) != v165)
    goto LABEL_126;
LABEL_130:
  v4 = a4;
  if (v14 != v15)
  {
    v89 = v14;
    do
    {
      if (*(_QWORD *)v89)
        MEMORY[0x20BD39CB0](*(_QWORD *)v89, 0x1020C4062D53EE8);
      v89 += 8;
    }
    while (v89 != v15);
  }
  if (v14)
    operator delete(v14);
  if (v68)
  {
    v11 = v68;
LABEL_139:
    operator delete(v11);
  }
LABEL_140:
  v90 = v183;
  v170 = v184;
  if (v183 != v184)
  {
    while (1)
    {
      v195 = 0uLL;
      v196 = 0;
      __p[1] = 0;
      v187 = 0;
      __p[0] = 0;
      sub_20B82D5C8(__p, (uint64_t)(v90[1] - *v90) >> 3);
      memset(v182, 0, sizeof(v182));
      sub_20B87D570(v182, (uint64_t)(v90[1] - *v90) >> 3);
      v91 = *v90;
      if (v90[1] != *v90)
        break;
      LOWORD(v92) = 0;
      v95 = 0.0;
      if ((char *)v184 - (char *)v183 != 24)
      {
        v94 = 0;
        goto LABEL_218;
      }
LABEL_206:
      v131 = v4[1];
      v132 = v4[2];
      if (v131 < v132)
      {
        v133 = v195;
        *(_QWORD *)(v131 + 16) = v196;
        *(_OWORD *)v131 = v133;
        v196 = 0;
        v195 = 0uLL;
        *(_OWORD *)(v131 + 24) = *(_OWORD *)__p;
        v134 = v187;
        __p[0] = 0;
        __p[1] = 0;
        v187 = 0;
        v135 = v182[0];
        *(_QWORD *)(v131 + 40) = v134;
        *(_QWORD *)(v131 + 48) = v135;
        v136 = 2;
        goto LABEL_233;
      }
      v137 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v131 - *v4) >> 4);
      v138 = v137 + 1;
      if (v137 + 1 > 0x333333333333333)
        sub_20B80CDD8();
      v139 = v92;
      v140 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v132 - *v4) >> 4);
      if (2 * v140 > v138)
        v138 = 2 * v140;
      if (v140 >= 0x199999999999999)
        v141 = 0x333333333333333;
      else
        v141 = v138;
      v194 = v167;
      v142 = (char *)sub_20B9DBB38(v141);
      v143 = &v142[80 * v137];
      *(_QWORD *)buf = v142;
      v191 = v143;
      v193 = (uint64_t)&v142[80 * v144];
      v145 = v195;
      *((_QWORD *)v143 + 2) = v196;
      *(_OWORD *)v143 = v145;
      v196 = 0;
      v195 = 0uLL;
      *((_QWORD *)v143 + 3) = 0;
      *((_QWORD *)v143 + 4) = 0;
      *((_QWORD *)v143 + 5) = 0;
      *(_OWORD *)(v143 + 24) = *(_OWORD *)__p;
      *((_QWORD *)v143 + 5) = v187;
      __p[0] = 0;
      __p[1] = 0;
      v187 = 0;
      *((_QWORD *)v143 + 6) = 0;
      *((_QWORD *)v143 + 7) = 0;
      *((_QWORD *)v143 + 8) = 0;
      *((_OWORD *)v143 + 3) = *(_OWORD *)v182;
      *((void **)v143 + 8) = v182[2];
      memset(v182, 0, sizeof(v182));
      *((float *)v143 + 18) = v95;
      *((_WORD *)v143 + 38) = v139;
      v192 = v143 + 80;
      sub_20B9DBA64(v4, buf);
      v146 = v4[1];
      sub_20B9DBB7C((uint64_t)buf);
      v136 = 2;
LABEL_241:
      v4[1] = v146;
LABEL_242:
      if (v182[0])
      {
        v182[1] = v182[0];
        operator delete(v182[0]);
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (SHIBYTE(v196) < 0)
        operator delete((void *)v195);
      if (v136 == 3 || !v136)
      {
        v90 += 3;
        if (v90 != v170)
          continue;
      }
      goto LABEL_251;
    }
    v92 = 0;
    v93 = 0;
    v94 = 0;
    v177 = 0;
    v95 = 0.0;
    while (1)
    {
      v181 = v92;
      v96 = *(_QWORD *)(v91 + 8 * v93);
      v179 = *(unsigned __int16 *)(v96 + 52);
      v97 = (unsigned __int16 *)(v96 + 56);
      v98 = *(char *)(v96 + 79);
      if (v98 >= 0)
        v99 = (void *)(v96 + 56);
      else
        v99 = *(void **)(v96 + 56);
      if (v98 >= 0)
        v100 = *(unsigned __int8 *)(v96 + 79);
      else
        v100 = *(_QWORD *)(v96 + 64);
      sub_20B88DACC((uint64_t)&v195, v99, v100);
      if (*(char *)(v96 + 79) < 0)
        v101 = *(_QWORD *)(v96 + 64);
      else
        v101 = *(unsigned __int8 *)(v96 + 79);
      v102 = v90;
      v103 = (char *)__p[1];
      if (__p[1] >= v187)
      {
        v105 = (char *)__p[0];
        v106 = ((char *)__p[1] - (char *)__p[0]) >> 3;
        v107 = v106 + 1;
        if ((unint64_t)(v106 + 1) >> 61)
          sub_20B80CDD8();
        v108 = v187 - (char *)__p[0];
        if ((v187 - (char *)__p[0]) >> 2 > v107)
          v107 = v108 >> 2;
        if ((unint64_t)v108 >= 0x7FFFFFFFFFFFFFF8)
          v109 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v109 = v107;
        if (v109)
        {
          v110 = (char *)sub_20B800BE8((uint64_t)&v187, v109);
          v105 = (char *)__p[0];
          v103 = (char *)__p[1];
        }
        else
        {
          v110 = 0;
        }
        v111 = &v110[8 * v106];
        *(_QWORD *)v111 = v101;
        v104 = v111 + 8;
        while (v103 != v105)
        {
          v112 = *((_QWORD *)v103 - 1);
          v103 -= 8;
          *((_QWORD *)v111 - 1) = v112;
          v111 -= 8;
        }
        __p[0] = v111;
        __p[1] = v104;
        v187 = &v110[8 * v109];
        if (v105)
          operator delete(v105);
      }
      else
      {
        *(_QWORD *)__p[1] = v101;
        v104 = v103 + 8;
      }
      __p[1] = v104;
      v113 = (char *)v182[1];
      if (v182[1] >= v182[2])
      {
        v115 = (char *)v182[0];
        v116 = (char *)v182[1] - (char *)v182[0];
        if ((char *)v182[1] - (char *)v182[0] <= -3)
          sub_20B80CDD8();
        v90 = v102;
        v117 = v116 >> 1;
        if ((void *)((char *)v182[2] - (char *)v182[0]) <= (void *)((v116 >> 1) + 1))
          v118 = v117 + 1;
        else
          v118 = (char *)v182[2] - (char *)v182[0];
        if ((void *)((char *)v182[2] - (char *)v182[0]) >= (void *)0x7FFFFFFFFFFFFFFELL)
          v119 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v119 = v118;
        if (v119)
        {
          v120 = (char *)sub_20B80FD48((uint64_t)&v182[2], v119);
          v115 = (char *)v182[0];
          v113 = (char *)v182[1];
        }
        else
        {
          v120 = 0;
        }
        v121 = &v120[2 * v117];
        *(_WORD *)v121 = *(_WORD *)(v96 + 52);
        v114 = v121 + 2;
        while (v113 != v115)
        {
          v122 = *((_WORD *)v113 - 1);
          v113 -= 2;
          *((_WORD *)v121 - 1) = v122;
          v121 -= 2;
        }
        v182[0] = v121;
        v182[1] = v114;
        v182[2] = &v120[2 * v119];
        if (v115)
          operator delete(v115);
      }
      else
      {
        *(_WORD *)v182[1] = *(_WORD *)(v96 + 52);
        v114 = v113 + 2;
        v90 = v102;
      }
      v182[1] = v114;
      v123 = *(float *)(v96 + 28);
      if (*(char *)(v96 + 79) < 0)
      {
        v97 = *(unsigned __int16 **)(v96 + 56);
        v124 = *(_QWORD *)(v96 + 64);
        if (v124)
        {
LABEL_189:
          v125 = 2 * v124;
          do
          {
            v127 = *v97++;
            v126 = v127;
            if ((v127 - 12593) < 0x33 || v126 == 12685 || v126 == 4514)
              ++v94;
            v125 -= 2;
          }
          while (v125);
        }
      }
      else
      {
        v124 = *(unsigned __int8 *)(v96 + 79);
        if (*(_BYTE *)(v96 + 79))
          goto LABEL_189;
      }
      if ((*(_WORD *)(v96 + 52) & 1) != 0)
      {
        *(_QWORD *)buf = v93;
        v130 = *(_QWORD *)(a3 + 24);
        if (!v130)
          sub_20B80BB74();
        v177 |= (*(uint64_t (**)(uint64_t, _QWORD *, uint8_t *))(*(_QWORD *)v130 + 48))(v130, v90, buf);
      }
      v92 = v179 | v181;
      v95 = v95 + v123;
      ++v93;
      v91 = *v90;
      if (v93 >= (uint64_t)(v90[1] - *v90) >> 3)
      {
        if ((char *)v184 - (char *)v183 == 24)
        {
          v4 = a4;
          goto LABEL_206;
        }
        v4 = a4;
        if ((v177 & 1) != 0)
        {
          v136 = 3;
          goto LABEL_242;
        }
LABEL_218:
        v147 = 0;
        if (v196 < 0)
        {
          while (1)
          {
            v149 = *((_QWORD *)&v195 + 1);
            v148 = (__int128 *)v195;
            if (v147 >= *((_QWORD *)&v195 + 1))
              break;
LABEL_222:
            v150 = 0;
            v151 = *((unsigned __int16 *)v148 + v149 + ~v147);
            while (*(unsigned __int16 *)&a112141718191a1[v150] != v151)
            {
              v150 += 2;
              if (v150 == 38)
                goto LABEL_229;
            }
            if (v150 == -2)
              break;
            ++v147;
            if ((v196 & 0x8000000000000000) == 0)
              goto LABEL_219;
          }
        }
        else
        {
LABEL_219:
          if (v147 < HIBYTE(v196))
          {
            v148 = &v195;
            v149 = HIBYTE(v196);
            goto LABEL_222;
          }
        }
LABEL_229:
        v136 = 3;
        if (v94 == v147 && v147 <= 1)
        {
          v131 = v4[1];
          v152 = v4[2];
          if (v131 >= v152)
          {
            v155 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v131 - *v4) >> 4);
            v156 = v155 + 1;
            if (v155 + 1 > 0x333333333333333)
              sub_20B80CDD8();
            v157 = v92;
            v158 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v152 - *v4) >> 4);
            if (2 * v158 > v156)
              v156 = 2 * v158;
            if (v158 >= 0x199999999999999)
              v159 = 0x333333333333333;
            else
              v159 = v156;
            v194 = v167;
            v160 = (char *)sub_20B9DBB38(v159);
            v161 = &v160[80 * v155];
            *(_QWORD *)buf = v160;
            v191 = v161;
            v193 = (uint64_t)&v160[80 * v162];
            v163 = v195;
            *((_QWORD *)v161 + 2) = v196;
            *(_OWORD *)v161 = v163;
            v196 = 0;
            v195 = 0uLL;
            *((_QWORD *)v161 + 3) = 0;
            *((_QWORD *)v161 + 4) = 0;
            *((_QWORD *)v161 + 5) = 0;
            *(_OWORD *)(v161 + 24) = *(_OWORD *)__p;
            *((_QWORD *)v161 + 5) = v187;
            __p[0] = 0;
            __p[1] = 0;
            v187 = 0;
            *((_QWORD *)v161 + 6) = 0;
            *((_QWORD *)v161 + 7) = 0;
            *((_QWORD *)v161 + 8) = 0;
            *((_OWORD *)v161 + 3) = *(_OWORD *)v182;
            *((void **)v161 + 8) = v182[2];
            memset(v182, 0, sizeof(v182));
            *((float *)v161 + 18) = v95;
            *((_WORD *)v161 + 38) = v157;
            v192 = v161 + 80;
            sub_20B9DBA64(v4, buf);
            v146 = v4[1];
            sub_20B9DBB7C((uint64_t)buf);
            v136 = 0;
          }
          else
          {
            v136 = 0;
            v153 = v195;
            *(_QWORD *)(v131 + 16) = v196;
            *(_OWORD *)v131 = v153;
            v154 = v182[0];
            *(_QWORD *)(v131 + 40) = v187;
            *(_QWORD *)(v131 + 48) = v154;
            v196 = 0;
            v195 = 0uLL;
            *(_OWORD *)(v131 + 24) = *(_OWORD *)__p;
            __p[0] = 0;
            __p[1] = 0;
            v187 = 0;
LABEL_233:
            *(_OWORD *)(v131 + 56) = *(_OWORD *)&v182[1];
            memset(v182, 0, sizeof(v182));
            *(float *)(v131 + 72) = v95;
            *(_WORD *)(v131 + 76) = v92;
            v146 = v131 + 80;
          }
          goto LABEL_241;
        }
        goto LABEL_242;
      }
    }
  }
LABEL_251:
  *(_QWORD *)buf = &v183;
  sub_20B83B400((void ***)buf);
}

void sub_20B9DB82C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  uint64_t v28;
  void *v30;

  sub_20B9DBA00(v28 - 176);
  sub_20B83B400((void ***)&__p);
  v30 = *(void **)(v28 - 136);
  if (v30)
  {
    *(_QWORD *)(v28 - 128) = v30;
    operator delete(v30);
  }
  *(_QWORD *)(v28 - 136) = a13;
  sub_20B88DA08((void ***)(v28 - 136));
  _Unwind_Resume(a1);
}

_QWORD *sub_20B9DB988(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_20B812928(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20B9DB9E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B9DBA00(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  if (!*(_BYTE *)(a1 + 24))
  {
    v2 = **(_QWORD **)(a1 + 8);
    v3 = **(_QWORD **)(a1 + 16);
    if (v3 != v2)
    {
      v4 = **(_QWORD **)(a1 + 16);
      do
      {
        v6 = *(void **)(v4 - 24);
        v4 -= 24;
        v5 = v6;
        if (v6)
        {
          *(_QWORD *)(v3 - 16) = v5;
          operator delete(v5);
        }
        v3 = v4;
      }
      while (v4 != v2);
    }
  }
  return a1;
}

uint64_t *sub_20B9DBA64(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      v7 = v2 + v5;
      v8 = *(_OWORD *)(v2 + v5 - 80);
      *(_QWORD *)(v6 - 64) = *(_QWORD *)(v2 + v5 - 64);
      *(_OWORD *)(v6 - 80) = v8;
      *(_QWORD *)(v7 - 72) = 0;
      *(_QWORD *)(v7 - 64) = 0;
      *(_QWORD *)(v7 - 80) = 0;
      *(_QWORD *)(v6 - 56) = 0;
      *(_QWORD *)(v6 - 48) = 0;
      *(_QWORD *)(v6 - 40) = 0;
      *(_OWORD *)(v6 - 56) = *(_OWORD *)(v2 + v5 - 56);
      *(_QWORD *)(v6 - 40) = *(_QWORD *)(v2 + v5 - 40);
      *(_QWORD *)(v7 - 56) = 0;
      *(_QWORD *)(v7 - 48) = 0;
      *(_QWORD *)(v7 - 40) = 0;
      *(_QWORD *)(v6 - 32) = 0;
      *(_QWORD *)(v6 - 24) = 0;
      *(_QWORD *)(v6 - 16) = 0;
      *(_OWORD *)(v6 - 32) = *(_OWORD *)(v2 + v5 - 32);
      *(_QWORD *)(v6 - 16) = *(_QWORD *)(v2 + v5 - 16);
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      v9 = *(_DWORD *)(v2 + v5 - 8);
      *(_WORD *)(v6 - 4) = *(_WORD *)(v2 + v5 - 4);
      *(_DWORD *)(v6 - 8) = v9;
      v5 -= 80;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v10 = *result;
  *result = v4;
  a2[1] = v10;
  v11 = result[1];
  result[1] = a2[2];
  a2[2] = v11;
  v12 = result[2];
  result[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return result;
}

void *sub_20B9DBB38(unint64_t a1)
{
  if (a1 >= 0x333333333333334)
    sub_20B800BC0();
  return operator new(80 * a1);
}

uint64_t sub_20B9DBB7C(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 80;
    sub_20B88DA78(i - 80);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20B9DBBC8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  sub_20B878B18(a1);
  v2 = *(_QWORD *)(a1 + 344);
  *(_QWORD *)(a1 + 344) = 0;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
    v3 = *(_QWORD *)(a1 + 344);
    *(_QWORD *)(a1 + 344) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
  }
  return sub_20B878A58(a1);
}

void sub_20B9DBC20(const void *a1@<X0>, size_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  char v11;
  char *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  char *v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  size_t v29;
  int64_t v30;
  void *__p[2];
  unsigned __int8 v32;
  _QWORD v33[11];
  char v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;

  v6 = (_QWORD *)operator new();
  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    sub_20B80AD6C();
  if (a2 >= 0x17)
  {
    v8 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v8 = a2 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    v29 = a2;
    v30 = v9 | 0x8000000000000000;
    v28 = v7;
    goto LABEL_8;
  }
  HIBYTE(v30) = a2;
  v7 = &v28;
  if (a2)
LABEL_8:
    memmove(v7, a1, a2);
  *((_BYTE *)v7 + a2) = 0;
  sub_20B8789BC((uint64_t)v6);
  v6[43] = 0;
  v10 = HIBYTE(v30);
  v11 = HIBYTE(v30);
  if (v30 < 0)
    v10 = v29;
  if (v10)
  {
    sub_20B827F10((uint64_t)v33);
    v36 = 0;
    v37 = 0;
    v38 = 0;
    if (v30 >= 0)
      v12 = (char *)&v28;
    else
      v12 = (char *)v28;
    if ((sub_20B8769A0((uint64_t)v6, v12, "r") & 1) != 0)
    {
      if (v6[1])
      {
        if (v6[2])
        {
          v13 = (_QWORD *)operator new();
          sub_20B9C790C(v13, v6[1], v6[2]);
          v14 = (_QWORD *)operator new();
          *v14 = &unk_24C49BF40;
          v14[1] = 0;
          v14[5] = 0;
          v14[6] = v13;
          v15 = v6[43];
          v6[43] = v14;
          if (v15)
            (*(void (**)(uint64_t))(*(_QWORD *)v15 + 72))(v15);
        }
      }
    }
    else
    {
      std::ios_base::clear((std::ios_base *)((char *)v33 + *(_QWORD *)(v33[0] - 24)), 0);
      v16 = sub_20B828F84(v33, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/mecabra/Korean/HangulTrie.cpp", 75);
      sub_20B828F84(v16, (uint64_t)"(", 1);
      v17 = (_QWORD *)std::ostream::operator<<();
      v18 = sub_20B828F84(v17, (uint64_t)") [", 3);
      v19 = sub_20B828F84(v18, (uint64_t)"m_mmap.open(fileName.c_str(), \"r\")", 34);
      v20 = sub_20B828F84(v19, (uint64_t)"] ", 2);
      v21 = (char *)sub_20B8715E0((uint64_t)(v6 + 6));
      sub_20B80BBD0(__p, v21);
      if ((v32 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v32 & 0x80u) == 0)
        v23 = v32;
      else
        v23 = (uint64_t)__p[1];
      sub_20B828F84(v20, (uint64_t)v22, v23);
      if ((char)v32 < 0)
        operator delete(__p[0]);
    }
    if (SHIBYTE(v38) < 0)
      operator delete(v36);
    v33[0] = *MEMORY[0x24BEDB800];
    *(_QWORD *)((char *)v33 + *(_QWORD *)(v33[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    v33[1] = MEMORY[0x24BEDB848] + 16;
    if (v34 < 0)
      operator delete((void *)v33[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x20BD39C2C](&v35);
    v11 = HIBYTE(v30);
  }
  if (v11 < 0)
    operator delete(v28);
  v24 = v6[43];
  if (v24 && (v25 = *(_QWORD **)(*(_QWORD *)(v24 + 48) + 8)) != 0 && (v26 = v25[1]) != 0 && v25[2] - v26 + v25[3])
  {
    *a3 = v6;
  }
  else
  {
    *a3 = 0;
    v27 = sub_20B9DBBC8((uint64_t)v6);
    MEMORY[0x20BD39CB0](v27, 0x10F2C40570461F6);
  }
}

void sub_20B9DBF64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  MEMORY[0x20BD39CB0](v22, 0x10A1C40079592F6);
  sub_20B8A0FF4((uint64_t)&a21);
  v24 = *(_QWORD *)(v21 + 344);
  *(_QWORD *)(v21 + 344) = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 72))(v24);
  sub_20B878A58(v21);
  if (a14 < 0)
    operator delete(__p);
  MEMORY[0x20BD39CB0](v21, 0x10F2C40570461F6);
  _Unwind_Resume(a1);
}

void sub_20B9DC01C(const __CFURL *a1@<X0>, _QWORD *a2@<X8>)
{
  size_t v4;
  CFTypeRef cf;
  UInt8 buffer[1024];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  cf = 0;
  if (a1)
  {
    if (CFURLResourceIsReachable(a1, (CFErrorRef *)&cf))
    {
      if (CFURLGetFileSystemRepresentation(a1, 1u, buffer, 1024))
      {
        v4 = strlen((const char *)buffer);
        sub_20B9DBC20(buffer, v4, a2);
        return;
      }
    }
    else if (cf)
    {
      CFRelease(cf);
    }
  }
  *a2 = 0;
}

uint64_t sub_20B9DC0D4(uint64_t a1)
{
  return **(unsigned int **)(a1 + 24);
}

uint64_t sub_20B9DC0E0(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v3;

  v3 = a1 + 24;
  result = *(_QWORD *)(a1 + 24);
  *a2 = (*(_QWORD *)(v3 + 8) - result) >> 2;
  return result;
}

__CFString *sub_20B9DC0F4(_DWORD *a1, uint64_t a2, int a3)
{
  __CFString *Mutable;
  __CFString *v7;
  int v8;
  const __CFString *v9;
  uint64_t v10;
  const __CFString *v11;
  const __CFString *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t i;
  unint64_t v17;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0);
  v7 = Mutable;
  v8 = a1[2];
  if (v8 == 2)
  {
    v9 = CFSTR("<EOS>");
  }
  else
  {
    if (v8 != 1)
    {
      v10 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 56))(a1);
      v11 = CFStringCreateWithCharacters(0, *(const UniChar **)v10, *(_QWORD *)(v10 + 8));
      v12 = sub_20B88F3EC(a2, v11);
      CFStringAppend(v7, v12);
      CFRelease(v11);
      CFRelease(v12);
      goto LABEL_7;
    }
    v9 = CFSTR("<BOS>");
  }
  CFStringAppend(Mutable, v9);
LABEL_7:
  CFStringAppendFormat(v7, 0, CFSTR("(%p)"), a1);
  if (a3)
  {
    v17 = 0;
    v13 = (*(uint64_t (**)(_DWORD *, unint64_t *))(*(_QWORD *)a1 + 32))(a1, &v17);
    if (v17)
    {
      v14 = v13;
      for (i = 0; i < v17; ++i)
        CFStringAppendFormat(v7, 0, CFSTR("(%d)"), *(unsigned int *)(v14 + 4 * i));
    }
  }
  return v7;
}

double sub_20B9DC240(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  int v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  int v29;
  void *__p;
  char *v32;
  unint64_t v33;

  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(a1 + 24))
    return -1.79769313e308;
  __p = 0;
  v32 = 0;
  v33 = 0;
  sub_20B873D0C(&__p, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  v5 = (uint64_t)v32;
  v6 = v32 - (_BYTE *)__p;
  if (v32 == __p)
  {
    if ((unint64_t)v32 >= v33)
    {
      v8 = v6 >> 2;
      v9 = v33 - (_QWORD)__p;
      if ((uint64_t)(v33 - (_QWORD)__p) >> 1 <= (unint64_t)((v6 >> 2) + 1))
        v10 = v8 + 1;
      else
        v10 = v9 >> 1;
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL)
        v11 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v11 = v10;
      v12 = (char *)sub_20B8127BC((uint64_t)&v33, v11);
      v13 = (char *)__p;
      v14 = v32;
      v15 = &v12[4 * v8];
      v17 = &v12[4 * v16];
      *(_DWORD *)v15 = 1;
      v5 = (uint64_t)(v15 + 4);
      while (v14 != v13)
      {
        v18 = *((_DWORD *)v14 - 1);
        v14 -= 4;
        *((_DWORD *)v15 - 1) = v18;
        v15 -= 4;
      }
      __p = v15;
      v32 = (char *)v5;
      v33 = (unint64_t)v17;
      if (v13)
        operator delete(v13);
    }
    else
    {
      *(_DWORD *)v32 = 1;
      v5 += 4;
    }
    v32 = (char *)v5;
  }
  sub_20B93980C((uint64_t)&__p, v5, *(char **)(a1 + 24), *(char **)(a1 + 32), (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2);
  v19 = v32;
  if ((unint64_t)v32 >= v33)
  {
    v21 = (char *)__p;
    v22 = (v32 - (_BYTE *)__p) >> 2;
    v23 = v22 + 1;
    if ((unint64_t)(v22 + 1) >> 62)
      sub_20B80CDD8();
    v24 = v33 - (_QWORD)__p;
    if ((uint64_t)(v33 - (_QWORD)__p) >> 1 > v23)
      v23 = v24 >> 1;
    if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL)
      v25 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v25 = v23;
    if (v25)
    {
      v26 = (char *)sub_20B8127BC((uint64_t)&v33, v25);
      v21 = (char *)__p;
      v19 = v32;
    }
    else
    {
      v26 = 0;
    }
    v27 = &v26[4 * v22];
    v28 = &v26[4 * v25];
    *(_DWORD *)v27 = 2;
    v20 = v27 + 4;
    while (v19 != v21)
    {
      v29 = *((_DWORD *)v19 - 1);
      v19 -= 4;
      *((_DWORD *)v27 - 1) = v29;
      v27 -= 4;
    }
    __p = v27;
    v32 = v20;
    v33 = (unint64_t)v28;
    if (v21)
      operator delete(v21);
  }
  else
  {
    *(_DWORD *)v32 = 2;
    v20 = v19 + 4;
  }
  v32 = v20;
  v7 = (*(double (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
  if (__p)
  {
    v32 = (char *)__p;
    operator delete(__p);
  }
  return v7;
}

void sub_20B9DC450(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B9DC470(_QWORD *a1, _DWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  __int16 v25;
  __int16 v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  __int16 v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  __int16 v46;
  unsigned int v47;
  int v48;
  int *v49;
  int *v50;
  int *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  int *v57;
  int v58;
  uint64_t *v59;
  unsigned __int16 *v60;
  unint64_t v61;
  uint64_t *v62;
  uint64_t *v63;
  __int16 v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  __int16 v74;
  char *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  __int16 v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  __int16 v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned __int16 v99;
  __int16 v100;
  char *v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  __int16 v110;
  char *v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  __int16 v120;
  char *v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  char *v129;
  __int16 v130;
  int *v131;
  int *v132;
  int *v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  char *v138;
  char *v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  char *v147;
  char *v148;
  char *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  char *v156;
  char *v157;
  __int16 v158;
  char *v159;
  char *v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  char *v167;
  char *v168;
  __int16 v169;
  int *v170;
  int *v171;
  int *v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  unint64_t v176;
  char *v177;
  char *v178;
  char *v179;
  int v180;
  _QWORD *v181;
  uint64_t v182;
  uint64_t *v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char v188;
  uint64_t v189;
  unint64_t v190;
  char *v191;
  char *v192;
  char *v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  unint64_t v197;
  char *v198;
  char *v199;
  char *v200;
  uint64_t v201;
  uint64_t *v202;
  _QWORD *v203;
  uint64_t v204;
  char *v205;
  uint64_t v206;
  unsigned int v207;
  char *v208;
  char *v209;
  char *v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t v213;
  unint64_t v214;
  char *v215;
  uint64_t *v216;
  uint64_t *v217;
  char *v218;
  unint64_t v219;
  char *v220;
  char v221;
  _BYTE *v222;
  _QWORD *v223;
  uint64_t v224;
  _QWORD *v225;
  uint64_t v226;
  _QWORD *v227;
  uint64_t v228;
  _QWORD *v229;
  uint64_t v230;
  unint64_t v231;
  unint64_t v232;
  unint64_t v233;
  uint64_t *v234;
  _BOOL4 v235;
  uint64_t *v236;
  uint64_t v237;
  _QWORD *v238;
  _QWORD *v239;
  __int128 v240;
  int64x2_t v241;
  uint64_t *v242;
  void *v243;
  uint64_t *v244;
  int v245;
  uint64_t v246;
  unint64_t v247;
  uint64_t v248;
  _QWORD *v249;
  uint64_t *v250;
  uint64_t v251;
  _QWORD *v252;
  const __CFString *v253;
  uint64_t v254;
  void *v255;
  _BYTE *v256;
  uint64_t v257;
  void *v258;
  void *__dst;
  uint64_t v260;
  void *v261;
  _BYTE *v262;
  void *__s1;
  _BYTE *v264;
  CFIndex v265;
  void *v266;
  char *v267;
  char *v268;
  void *__p;
  char *v270;
  char *v271;
  int64x2_t v272;
  uint64_t *v273;
  uint64_t v274;
  _QWORD *v275;
  unint64_t v276;
  uint64_t v277;
  _QWORD *v278;
  unint64_t v279;
  unsigned __int16 *v280;
  _QWORD *v281;
  int64_t v282;
  int *v283;
  int *v284;
  char *v285;
  char *v286;
  char *v287;
  char *v288;
  char *v289;
  char *v290;
  unint64_t v291;
  char *v292;
  char *v293;
  unint64_t v294;
  int64x2_t *v295;
  int64x2_t v296;
  uint64_t *v297;
  uint64_t **v298;

  v292 = 0;
  v293 = 0;
  v294 = 0;
  v289 = 0;
  v290 = 0;
  v291 = 0;
  v286 = 0;
  v287 = 0;
  v288 = 0;
  v283 = 0;
  v284 = 0;
  v285 = 0;
  v251 = (*(uint64_t (**)(_QWORD *))(*a1 + 56))(a1);
  v10 = a1[2];
  v11 = *(_QWORD *)v10;
  v252 = a1;
  v248 = a6;
  v249 = a5;
  if (*(_QWORD *)v10)
  {
    sub_20B9D6820(v11, &v295);
    v12 = *(_QWORD *)(v11 + 8);
    if (v12)
    {
      v13 = 0;
      v14 = *(_QWORD *)(v11 + 32);
      do
      {
        v15 = (uint64_t *)v295;
        v16 = v293;
        if ((unint64_t)v293 >= v294)
        {
          v18 = v292;
          v19 = v293 - v292;
          if (v293 - v292 <= -3)
            sub_20B80CDD8();
          v20 = v19 >> 1;
          if (v294 - (unint64_t)v292 <= (v19 >> 1) + 1)
            v21 = v20 + 1;
          else
            v21 = v294 - (_QWORD)v292;
          if (v294 - (unint64_t)v292 >= 0x7FFFFFFFFFFFFFFELL)
            v22 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v22 = v21;
          if (v22)
          {
            v23 = (char *)sub_20B80FD48((uint64_t)&v294, v22);
            v18 = v292;
            v16 = v293;
          }
          else
          {
            v23 = 0;
          }
          v24 = &v23[2 * v20];
          *(_WORD *)v24 = *((_WORD *)v15 + v13);
          v17 = v24 + 2;
          while (v16 != v18)
          {
            v25 = *((_WORD *)v16 - 1);
            v16 -= 2;
            *((_WORD *)v24 - 1) = v25;
            v24 -= 2;
          }
          v292 = v24;
          v293 = v17;
          v294 = (unint64_t)&v23[2 * v22];
          if (v18)
            operator delete(v18);
        }
        else
        {
          *(_WORD *)v293 = v295->i16[v13];
          v17 = v16 + 2;
        }
        v293 = v17;
        v26 = *(unsigned __int8 *)(v14 + 4 * v13 + 2) + *(unsigned __int8 *)(v14 + 4 * v13);
        v27 = v290;
        if ((unint64_t)v290 >= v291)
        {
          v29 = v289;
          v30 = v290 - v289;
          if (v290 - v289 <= -3)
            goto LABEL_413;
          v31 = v30 >> 1;
          if (v291 - (unint64_t)v289 <= (v30 >> 1) + 1)
            v32 = v31 + 1;
          else
            v32 = v291 - (_QWORD)v289;
          if (v291 - (unint64_t)v289 >= 0x7FFFFFFFFFFFFFFELL)
            v33 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v33 = v32;
          if (v33)
          {
            v34 = (char *)sub_20B80FD48((uint64_t)&v291, v33);
            v29 = v289;
            v27 = v290;
          }
          else
          {
            v34 = 0;
          }
          v35 = &v34[2 * v31];
          *(_WORD *)v35 = v26;
          v28 = v35 + 2;
          while (v27 != v29)
          {
            v36 = *((_WORD *)v27 - 1);
            v27 -= 2;
            *((_WORD *)v35 - 1) = v36;
            v35 -= 2;
          }
          v289 = v35;
          v290 = v28;
          v291 = (unint64_t)&v34[2 * v33];
          if (v29)
            operator delete(v29);
        }
        else
        {
          *(_WORD *)v290 = v26;
          v28 = v27 + 2;
        }
        v290 = v28;
        v37 = v287;
        if (v287 >= v288)
        {
          v39 = v286;
          v40 = v287 - v286;
          if (v287 - v286 < -2)
LABEL_413:
            sub_20B80CDD8();
          v41 = v40 >> 1;
          if (v288 - v286 <= (unint64_t)((v40 >> 1) + 1))
            v42 = v41 + 1;
          else
            v42 = v288 - v286;
          if ((unint64_t)(v288 - v286) >= 0x7FFFFFFFFFFFFFFELL)
            v43 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v43 = v42;
          if (v43)
          {
            v44 = (char *)sub_20B80FD48((uint64_t)&v288, v43);
            v39 = v286;
            v37 = v287;
          }
          else
          {
            v44 = 0;
          }
          v45 = &v44[2 * v41];
          *(_WORD *)v45 = v26;
          v38 = v45 + 2;
          while (v37 != v39)
          {
            v46 = *((_WORD *)v37 - 1);
            v37 -= 2;
            *((_WORD *)v45 - 1) = v46;
            v45 -= 2;
          }
          v286 = v45;
          v287 = v38;
          v288 = &v44[2 * v43];
          if (v39)
            operator delete(v39);
        }
        else
        {
          *(_WORD *)v287 = v26;
          v38 = v37 + 2;
        }
        v287 = v38;
        v47 = *(unsigned __int8 *)(v14 + 4 * v13 + 3);
        if ((v47 & 1) != 0)
          v48 = 2;
        else
          v48 = (v47 >> 1) & 1;
        v49 = v284;
        if (v284 >= (int *)v285)
        {
          v51 = v283;
          v52 = v284 - v283;
          v53 = v52 + 1;
          if ((unint64_t)(v52 + 1) >> 62)
            sub_20B80CDD8();
          v54 = v285 - (char *)v283;
          if ((v285 - (char *)v283) >> 1 > v53)
            v53 = v54 >> 1;
          if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFFCLL)
            v55 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v55 = v53;
          if (v55)
          {
            v56 = (char *)sub_20B8127BC((uint64_t)&v285, v55);
            v51 = v283;
            v49 = v284;
          }
          else
          {
            v56 = 0;
          }
          v57 = (int *)&v56[4 * v52];
          *v57 = v48;
          v50 = v57 + 1;
          while (v49 != v51)
          {
            v58 = *--v49;
            *--v57 = v58;
          }
          v283 = v57;
          v284 = v50;
          v285 = &v56[4 * v55];
          if (v51)
            operator delete(v51);
        }
        else
        {
          *v284 = v48;
          v50 = v49 + 1;
        }
        v284 = v50;
        ++v13;
      }
      while (v13 != v12);
    }
    v59 = (uint64_t *)v295;
    if (!v295)
      goto LABEL_278;
    v296.i64[0] = (uint64_t)v295;
    goto LABEL_77;
  }
  if (*a2 != 5 || *((_DWORD *)a1 + 2) != 8)
  {
    v95 = (uint64_t *)(*(uint64_t (**)(_QWORD *))(*a1 + 64))(a1);
    v96 = v95[1];
    if (v96)
    {
      v97 = 0;
      v98 = *v95;
      do
      {
        v99 = *(_WORD *)(v98 + 2 * v97);
        if (v99 <= 0x30uLL)
          v99 = 48;
        v100 = v99 - 48;
        v101 = v290;
        if ((unint64_t)v290 >= v291)
        {
          v103 = v289;
          v104 = v290 - v289;
          if (v290 - v289 <= -3)
            sub_20B80CDD8();
          v105 = v104 >> 1;
          if (v291 - (unint64_t)v289 <= (v104 >> 1) + 1)
            v106 = v105 + 1;
          else
            v106 = v291 - (_QWORD)v289;
          if (v291 - (unint64_t)v289 >= 0x7FFFFFFFFFFFFFFELL)
            v107 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v107 = v106;
          if (v107)
          {
            v108 = (char *)sub_20B80FD48((uint64_t)&v291, v107);
            v103 = v289;
            v101 = v290;
          }
          else
          {
            v108 = 0;
          }
          v109 = &v108[2 * v105];
          *(_WORD *)v109 = v100;
          v102 = v109 + 2;
          while (v101 != v103)
          {
            v110 = *((_WORD *)v101 - 1);
            v101 -= 2;
            *((_WORD *)v109 - 1) = v110;
            v109 -= 2;
          }
          v289 = v109;
          v290 = v102;
          v291 = (unint64_t)&v108[2 * v107];
          if (v103)
            operator delete(v103);
        }
        else
        {
          *(_WORD *)v290 = v100;
          v102 = v101 + 2;
        }
        v290 = v102;
        v111 = v287;
        if (v287 >= v288)
        {
          v113 = v286;
          v114 = v287 - v286;
          if (v287 - v286 <= -3)
            sub_20B80CDD8();
          v115 = v114 >> 1;
          if (v288 - v286 <= (unint64_t)((v114 >> 1) + 1))
            v116 = v115 + 1;
          else
            v116 = v288 - v286;
          if ((unint64_t)(v288 - v286) >= 0x7FFFFFFFFFFFFFFELL)
            v117 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v117 = v116;
          if (v117)
          {
            v118 = (char *)sub_20B80FD48((uint64_t)&v288, v117);
            v113 = v286;
            v111 = v287;
          }
          else
          {
            v118 = 0;
          }
          v119 = &v118[2 * v115];
          *(_WORD *)v119 = v100;
          v112 = v119 + 2;
          while (v111 != v113)
          {
            v120 = *((_WORD *)v111 - 1);
            v111 -= 2;
            *((_WORD *)v119 - 1) = v120;
            v119 -= 2;
          }
          v286 = v119;
          v287 = v112;
          v288 = &v118[2 * v117];
          if (v113)
            operator delete(v113);
        }
        else
        {
          *(_WORD *)v287 = v100;
          v112 = v111 + 2;
        }
        v287 = v112;
        v121 = v293;
        if ((unint64_t)v293 >= v294)
        {
          v123 = v292;
          v124 = v293 - v292;
          if (v293 - v292 <= -3)
            sub_20B80CDD8();
          v125 = v124 >> 1;
          if (v294 - (unint64_t)v292 <= (v124 >> 1) + 1)
            v126 = v125 + 1;
          else
            v126 = v294 - (_QWORD)v292;
          if (v294 - (unint64_t)v292 >= 0x7FFFFFFFFFFFFFFELL)
            v127 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v127 = v126;
          if (v127)
          {
            v128 = (char *)sub_20B80FD48((uint64_t)&v294, v127);
            v123 = v292;
            v121 = v293;
          }
          else
          {
            v128 = 0;
          }
          v129 = &v128[2 * v125];
          *(_WORD *)v129 = v100;
          v122 = v129 + 2;
          while (v121 != v123)
          {
            v130 = *((_WORD *)v121 - 1);
            v121 -= 2;
            *((_WORD *)v129 - 1) = v130;
            v129 -= 2;
          }
          v292 = v129;
          v293 = v122;
          v294 = (unint64_t)&v128[2 * v127];
          if (v123)
            operator delete(v123);
        }
        else
        {
          *(_WORD *)v293 = v100;
          v122 = v121 + 2;
        }
        v293 = v122;
        v131 = v284;
        if (v284 >= (int *)v285)
        {
          v133 = v283;
          v134 = v284 - v283;
          v135 = v134 + 1;
          if ((unint64_t)(v134 + 1) >> 62)
            sub_20B80CDD8();
          v136 = v285 - (char *)v283;
          if ((v285 - (char *)v283) >> 1 > v135)
            v135 = v136 >> 1;
          if ((unint64_t)v136 >= 0x7FFFFFFFFFFFFFFCLL)
            v137 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v137 = v135;
          if (v137)
          {
            v138 = (char *)sub_20B8127BC((uint64_t)&v285, v137);
            v133 = v283;
            v131 = v284;
          }
          else
          {
            v138 = 0;
          }
          v139 = &v138[4 * v134];
          *(_DWORD *)v139 = 0;
          v132 = (int *)(v139 + 4);
          while (v131 != v133)
          {
            v140 = *--v131;
            *((_DWORD *)v139 - 1) = v140;
            v139 -= 4;
          }
          v283 = (int *)v139;
          v284 = v132;
          v285 = &v138[4 * v137];
          if (v133)
            operator delete(v133);
        }
        else
        {
          *v284 = 0;
          v132 = v131 + 1;
        }
        v284 = v132;
        ++v97;
      }
      while (v97 != v96);
    }
    else
    {
      v141 = *(unsigned __int16 *)(v252[2] + 16);
      v142 = v290 - v289;
      if (v290 - v289 <= -3)
        sub_20B80CDD8();
      v143 = v142 >> 1;
      if (v291 - (unint64_t)v289 <= (v142 >> 1) + 1)
        v144 = v143 + 1;
      else
        v144 = v291 - (_QWORD)v289;
      if (v291 - (unint64_t)v289 >= 0x7FFFFFFFFFFFFFFELL)
        v145 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v145 = v144;
      if (v145)
        v146 = (char *)sub_20B80FD48((uint64_t)&v291, v145);
      else
        v146 = 0;
      v147 = &v146[2 * v143];
      *(_WORD *)v147 = v141;
      v289 = v147;
      v291 = (unint64_t)&v146[2 * v145];
      v290 = v147 + 2;
      v148 = v287;
      if (v287 >= v288)
      {
        v150 = v286;
        v151 = v287 - v286;
        if (v287 - v286 <= -3)
          sub_20B80CDD8();
        v152 = v151 >> 1;
        if (v288 - v286 <= (unint64_t)((v151 >> 1) + 1))
          v153 = v152 + 1;
        else
          v153 = v288 - v286;
        if ((unint64_t)(v288 - v286) >= 0x7FFFFFFFFFFFFFFELL)
          v154 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v154 = v153;
        if (v154)
        {
          v155 = (char *)sub_20B80FD48((uint64_t)&v288, v154);
          v150 = v286;
          v148 = v287;
        }
        else
        {
          v155 = 0;
        }
        v156 = &v155[2 * v152];
        v157 = &v155[2 * v154];
        *(_WORD *)v156 = v141;
        v149 = v156 + 2;
        while (v148 != v150)
        {
          v158 = *((_WORD *)v148 - 1);
          v148 -= 2;
          *((_WORD *)v156 - 1) = v158;
          v156 -= 2;
        }
        v286 = v156;
        v287 = v149;
        v288 = v157;
        if (v150)
          operator delete(v150);
      }
      else
      {
        *(_WORD *)v287 = v141;
        v149 = v148 + 2;
      }
      v287 = v149;
      v159 = v293;
      if ((unint64_t)v293 >= v294)
      {
        v161 = v292;
        v162 = v293 - v292;
        if (v293 - v292 <= -3)
          sub_20B80CDD8();
        v163 = v162 >> 1;
        if (v294 - (unint64_t)v292 <= (v162 >> 1) + 1)
          v164 = v163 + 1;
        else
          v164 = v294 - (_QWORD)v292;
        if (v294 - (unint64_t)v292 >= 0x7FFFFFFFFFFFFFFELL)
          v165 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v165 = v164;
        if (v165)
        {
          v166 = (char *)sub_20B80FD48((uint64_t)&v294, v165);
          v161 = v292;
          v159 = v293;
        }
        else
        {
          v166 = 0;
        }
        v167 = &v166[2 * v163];
        v168 = &v166[2 * v165];
        *(_WORD *)v167 = v141;
        v160 = v167 + 2;
        while (v159 != v161)
        {
          v169 = *((_WORD *)v159 - 1);
          v159 -= 2;
          *((_WORD *)v167 - 1) = v169;
          v167 -= 2;
        }
        v292 = v167;
        v293 = v160;
        v294 = (unint64_t)v168;
        if (v161)
          operator delete(v161);
      }
      else
      {
        *(_WORD *)v293 = v141;
        v160 = v159 + 2;
      }
      v293 = v160;
      v170 = v284;
      if (v284 >= (int *)v285)
      {
        v172 = v283;
        v173 = v284 - v283;
        v174 = v173 + 1;
        if ((unint64_t)(v173 + 1) >> 62)
          sub_20B80CDD8();
        v175 = v285 - (char *)v283;
        if ((v285 - (char *)v283) >> 1 > v174)
          v174 = v175 >> 1;
        if ((unint64_t)v175 >= 0x7FFFFFFFFFFFFFFCLL)
          v176 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v176 = v174;
        if (v176)
        {
          v177 = (char *)sub_20B8127BC((uint64_t)&v285, v176);
          v172 = v283;
          v170 = v284;
        }
        else
        {
          v177 = 0;
        }
        v178 = &v177[4 * v173];
        v179 = &v177[4 * v176];
        *(_DWORD *)v178 = 0;
        v171 = (int *)(v178 + 4);
        while (v170 != v172)
        {
          v180 = *--v170;
          *((_DWORD *)v178 - 1) = v180;
          v178 -= 4;
        }
        v283 = (int *)v178;
        v284 = v171;
        v285 = v179;
        if (v172)
          operator delete(v172);
      }
      else
      {
        *v284 = 0;
        v171 = v170 + 1;
      }
      v284 = v171;
    }
    goto LABEL_278;
  }
  sub_20B8D09C0(*(const __CFString **)(v10 + 8), &v280);
  if (v282 >= 0)
    v60 = (unsigned __int16 *)&v280;
  else
    v60 = v280;
  if (v282 >= 0)
    v61 = HIBYTE(v282);
  else
    v61 = (unint64_t)v281;
  sub_20B9292C0(v60, v61, (uint64_t **)&v295);
  if (SHIBYTE(v282) < 0)
    operator delete(v280);
  v63 = (uint64_t *)v295;
  v62 = (uint64_t *)v296.i64[0];
  if (v295 != (int64x2_t *)v296.i64[0])
  {
    do
    {
      v64 = *(_WORD *)v63;
      v65 = v290;
      if ((unint64_t)v290 >= v291)
      {
        v67 = v289;
        v68 = v290 - v289;
        if (v290 - v289 <= -3)
          sub_20B80CDD8();
        v69 = v68 >> 1;
        if (v291 - (unint64_t)v289 <= (v68 >> 1) + 1)
          v70 = v69 + 1;
        else
          v70 = v291 - (_QWORD)v289;
        if (v291 - (unint64_t)v289 >= 0x7FFFFFFFFFFFFFFELL)
          v71 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v71 = v70;
        if (v71)
        {
          v72 = (char *)sub_20B80FD48((uint64_t)&v291, v71);
          v67 = v289;
          v65 = v290;
        }
        else
        {
          v72 = 0;
        }
        v73 = &v72[2 * v69];
        *(_WORD *)v73 = v64;
        v66 = v73 + 2;
        while (v65 != v67)
        {
          v74 = *((_WORD *)v65 - 1);
          v65 -= 2;
          *((_WORD *)v73 - 1) = v74;
          v73 -= 2;
        }
        v289 = v73;
        v290 = v66;
        v291 = (unint64_t)&v72[2 * v71];
        if (v67)
          operator delete(v67);
      }
      else
      {
        *(_WORD *)v290 = v64;
        v66 = v65 + 2;
      }
      v290 = v66;
      v75 = v287;
      if (v287 >= v288)
      {
        v77 = v286;
        v78 = v287 - v286;
        if (v287 - v286 <= -3)
          sub_20B80CDD8();
        v79 = v78 >> 1;
        if (v288 - v286 <= (unint64_t)((v78 >> 1) + 1))
          v80 = v79 + 1;
        else
          v80 = v288 - v286;
        if ((unint64_t)(v288 - v286) >= 0x7FFFFFFFFFFFFFFELL)
          v81 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v81 = v80;
        if (v81)
        {
          v82 = (char *)sub_20B80FD48((uint64_t)&v288, v81);
          v77 = v286;
          v75 = v287;
        }
        else
        {
          v82 = 0;
        }
        v83 = &v82[2 * v79];
        *(_WORD *)v83 = v64;
        v76 = v83 + 2;
        while (v75 != v77)
        {
          v84 = *((_WORD *)v75 - 1);
          v75 -= 2;
          *((_WORD *)v83 - 1) = v84;
          v83 -= 2;
        }
        v286 = v83;
        v287 = v76;
        v288 = &v82[2 * v81];
        if (v77)
          operator delete(v77);
      }
      else
      {
        *(_WORD *)v287 = v64;
        v76 = v75 + 2;
      }
      v287 = v76;
      v85 = v293;
      if ((unint64_t)v293 >= v294)
      {
        v87 = v292;
        v88 = v293 - v292;
        if (v293 - v292 <= -3)
          sub_20B80CDD8();
        v89 = v88 >> 1;
        if (v294 - (unint64_t)v292 <= (v88 >> 1) + 1)
          v90 = v89 + 1;
        else
          v90 = v294 - (_QWORD)v292;
        if (v294 - (unint64_t)v292 >= 0x7FFFFFFFFFFFFFFELL)
          v91 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v91 = v90;
        if (v91)
        {
          v92 = (char *)sub_20B80FD48((uint64_t)&v294, v91);
          v87 = v292;
          v85 = v293;
        }
        else
        {
          v92 = 0;
        }
        v93 = &v92[2 * v89];
        *(_WORD *)v93 = v64;
        v86 = v93 + 2;
        while (v85 != v87)
        {
          v94 = *((_WORD *)v85 - 1);
          v85 -= 2;
          *((_WORD *)v93 - 1) = v94;
          v93 -= 2;
        }
        v292 = v93;
        v293 = v86;
        v294 = (unint64_t)&v92[2 * v91];
        if (v87)
          operator delete(v87);
      }
      else
      {
        *(_WORD *)v293 = v64;
        v86 = v85 + 2;
      }
      v293 = v86;
      ++v63;
    }
    while (v63 != v62);
    v63 = (uint64_t *)v295;
  }
  if (v63)
  {
    v296.i64[0] = (uint64_t)v63;
    v59 = v63;
LABEL_77:
    operator delete(v59);
  }
LABEL_278:
  v182 = v248;
  v181 = a5;
  if (((*(uint64_t (**)(_QWORD *))(*v252 + 88))(v252) & 1) == 0)
    goto LABEL_402;
  v183 = (uint64_t *)(*(uint64_t (**)(_QWORD *))(*v252 + 72))(v252);
  v184 = v183[1];
  v254 = *v183;
  v280 = 0;
  v281 = 0;
  v282 = 0;
  v277 = 0;
  v278 = 0;
  v279 = 0;
  v274 = 0;
  v275 = 0;
  v276 = 0;
  v272 = 0uLL;
  v273 = 0;
  __p = 0;
  v270 = 0;
  v271 = 0;
  v266 = 0;
  v267 = 0;
  v268 = 0;
  v265 = 0;
  if (v184)
  {
    v185 = 0;
    v186 = 0;
    v187 = 0;
    v250 = 0;
    v253 = *(const __CFString **)(v252[2] + 8);
    v188 = 1;
    while (1)
    {
      v189 = *(unsigned __int16 *)(v254 + 2 * v186) - 48;
      v190 = v189 & ~(v189 >> 63);
      v191 = v270;
      if (v270 >= v271)
      {
        v193 = (char *)__p;
        v194 = (v270 - (_BYTE *)__p) >> 4;
        v195 = v194 + 1;
        if ((unint64_t)(v194 + 1) >> 60)
          sub_20B80CDD8();
        v196 = v271 - (_BYTE *)__p;
        if ((v271 - (_BYTE *)__p) >> 3 > v195)
          v195 = v196 >> 3;
        if ((unint64_t)v196 >= 0x7FFFFFFFFFFFFFF0)
          v197 = 0xFFFFFFFFFFFFFFFLL;
        else
          v197 = v195;
        if (v197)
        {
          v198 = (char *)sub_20B829AD0((uint64_t)&v271, v197);
          v193 = (char *)__p;
          v191 = v270;
        }
        else
        {
          v198 = 0;
        }
        v199 = &v198[16 * v194];
        *(_QWORD *)v199 = v185;
        *((_QWORD *)v199 + 1) = v190;
        v200 = v199;
        if (v191 != v193)
        {
          do
          {
            *((_OWORD *)v200 - 1) = *((_OWORD *)v191 - 1);
            v200 -= 16;
            v191 -= 16;
          }
          while (v191 != v193);
          v193 = (char *)__p;
        }
        v192 = v199 + 16;
        __p = v200;
        v270 = v199 + 16;
        v271 = &v198[16 * v197];
        if (v193)
          operator delete(v193);
      }
      else
      {
        *(_QWORD *)v270 = v185;
        *((_QWORD *)v191 + 1) = v190;
        v192 = v191 + 16;
      }
      v270 = v192;
      if (v190 >= 2 && v253)
      {
        if (v187 < (unint64_t)((v293 - v292) >> 1))
        {
          v201 = *(unsigned __int16 *)&v292[2 * v187];
          if (v190 == v201)
          {
            v202 = v250;
            if (!v250)
            {
              sub_20B8D0624(v253, &v265, &v295);
              v202 = (uint64_t *)v295;
              v201 = *(unsigned __int16 *)&v292[2 * v187];
            }
            v250 = v202;
            if (v190 == v201)
            {
              v203 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v252 + 56))(v252);
              if (v187 < 1)
              {
                v204 = 0;
              }
              else
              {
                v204 = 0;
                v205 = v292;
                v206 = v187;
                do
                {
                  v207 = *(unsigned __int16 *)v205;
                  v205 += 2;
                  v204 += v207;
                  --v206;
                }
                while (v206);
              }
              sub_20B8D0820((unsigned __int16 *)(*v203 + 2 * v185), v189 & ~(v189 >> 63), (uint64_t *)&v295);
              sub_20B8D0820((unsigned __int16 *)v250 + v204, v189 & ~(v189 >> 63), (uint64_t *)&__s1);
              v243 = __s1;
              v244 = (uint64_t *)v295;
              v235 = memcmp(__s1, v295, 2 * v190) == 0;
              if (v243)
                MEMORY[0x20BD39C80](v243, 0x1000C80BDFB0063);
              if (v244)
                MEMORY[0x20BD39C80](v244, 0x1000C80BDFB0063);
            }
            else
            {
              v235 = 0;
            }
            if (v235)
              v189 = 1;
          }
        }
      }
      else
      {
        v189 &= ~(v189 >> 63);
      }
      v208 = v267;
      if (v267 >= v268)
      {
        v210 = (char *)v266;
        v211 = (v267 - (_BYTE *)v266) >> 4;
        v212 = v211 + 1;
        if ((unint64_t)(v211 + 1) >> 60)
          sub_20B80CDD8();
        v213 = v268 - (_BYTE *)v266;
        if ((v268 - (_BYTE *)v266) >> 3 > v212)
          v212 = v213 >> 3;
        if ((unint64_t)v213 >= 0x7FFFFFFFFFFFFFF0)
          v214 = 0xFFFFFFFFFFFFFFFLL;
        else
          v214 = v212;
        if (v214)
        {
          v215 = (char *)sub_20B829AD0((uint64_t)&v268, v214);
          v210 = (char *)v266;
          v208 = v267;
        }
        else
        {
          v215 = 0;
        }
        v216 = (uint64_t *)&v215[16 * v211];
        *v216 = v187;
        v216[1] = v189;
        v217 = v216;
        if (v208 != v210)
        {
          do
          {
            *((_OWORD *)v217 - 1) = *((_OWORD *)v208 - 1);
            v217 -= 2;
            v208 -= 16;
          }
          while (v208 != v210);
          v210 = (char *)v266;
        }
        v209 = (char *)(v216 + 2);
        v266 = v217;
        v267 = (char *)(v216 + 2);
        v268 = &v215[16 * v214];
        if (v210)
          operator delete(v210);
      }
      else
      {
        *(_QWORD *)v267 = v187;
        *((_QWORD *)v208 + 1) = v189;
        v209 = v208 + 16;
      }
      v267 = v209;
      sub_20B9DDBAC(&__s1, (uint64_t)v292, (uint64_t)v293, v187, v189);
      sub_20B9DDBAC(&v261, (uint64_t)v289, (uint64_t)v290, v187, v189);
      v218 = (char *)v283;
      v219 = v189 + v187;
      __dst = 0;
      v260 = 0;
      v258 = 0;
      if ((v187 & 0x8000000000000000) == 0 && v284 - v283 >= v219)
      {
        if (v189)
        {
          if ((unint64_t)v189 >> 62)
            sub_20B80CDD8();
          sub_20B81277C(&v258, v189);
          v220 = (char *)__dst;
          memmove(__dst, &v218[4 * v187], 4 * v189);
        }
        else
        {
          v220 = 0;
        }
        __dst = &v220[4 * v189];
      }
      v255 = 0;
      v256 = 0;
      v257 = 0;
      sub_20B886194((char *)&v255, (char *)v261, (uint64_t)v262, (v262 - (_BYTE *)v261) >> 1);
      v221 = 0;
      v222 = v255;
      if (v261 != v262 && v255 != v256)
        break;
      v188 = 0;
      if (v255)
        goto LABEL_339;
LABEL_340:
      if (v258)
      {
        __dst = v258;
        operator delete(v258);
      }
      if (v261)
      {
        v262 = v261;
        operator delete(v261);
      }
      if (__s1)
      {
        v264 = __s1;
        operator delete(__s1);
      }
      if ((v221 & 1) != 0 && (v188 & 1) != 0 && ++v186 < v184)
        continue;
      goto LABEL_388;
    }
    if (__s1 == v264 || v258 == __dst)
    {
      v221 = 0;
      v188 = 0;
      if (!v255)
        goto LABEL_340;
    }
    else
    {
      v223 = v275;
      if ((unint64_t)v275 >= v276)
      {
        v224 = sub_20B97FBCC(&v274, (uint64_t)&v255);
      }
      else
      {
        *v275 = 0;
        v223[1] = 0;
        v223[2] = 0;
        sub_20B87ACC8(v223, v255, (uint64_t)v256, (v256 - (_BYTE *)v255) >> 1);
        v224 = (uint64_t)(v223 + 3);
      }
      v275 = (_QWORD *)v224;
      v225 = v278;
      if ((unint64_t)v278 >= v279)
      {
        v226 = sub_20B97FBCC(&v277, (uint64_t)&v261);
      }
      else
      {
        *v278 = 0;
        v225[1] = 0;
        v225[2] = 0;
        sub_20B87ACC8(v225, v261, (uint64_t)v262, (v262 - (_BYTE *)v261) >> 1);
        v226 = (uint64_t)(v225 + 3);
      }
      v278 = (_QWORD *)v226;
      v227 = v281;
      if ((unint64_t)v281 >= v282)
      {
        v228 = sub_20B97FBCC((uint64_t *)&v280, (uint64_t)&__s1);
      }
      else
      {
        *v281 = 0;
        v227[1] = 0;
        v227[2] = 0;
        sub_20B87ACC8(v227, __s1, (uint64_t)v264, (v264 - (_BYTE *)__s1) >> 1);
        v228 = (uint64_t)(v227 + 3);
      }
      v281 = (_QWORD *)v228;
      v229 = (_QWORD *)v272.i64[1];
      if (v272.i64[1] >= (unint64_t)v273)
      {
        v231 = 0xAAAAAAAAAAAAAAABLL * ((v272.i64[1] - v272.i64[0]) >> 3);
        v232 = v231 + 1;
        if (v231 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20B80CDD8();
        if (0x5555555555555556 * (((uint64_t)v273 - v272.i64[0]) >> 3) > v232)
          v232 = 0x5555555555555556 * (((uint64_t)v273 - v272.i64[0]) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v273 - v272.i64[0]) >> 3) >= 0x555555555555555)
          v233 = 0xAAAAAAAAAAAAAAALL;
        else
          v233 = v232;
        v298 = &v273;
        if (v233)
        {
          if (v233 > 0xAAAAAAAAAAAAAAALL)
            sub_20B800BC0();
          v234 = (uint64_t *)operator new(24 * v233);
        }
        else
        {
          v234 = 0;
        }
        v236 = &v234[3 * v231];
        v295 = (int64x2_t *)v234;
        v296.i64[0] = (uint64_t)v236;
        v296.i64[1] = (uint64_t)v236;
        v297 = &v234[3 * v233];
        v236[1] = 0;
        v236[2] = 0;
        *v236 = 0;
        sub_20B94308C(v236, v258, (uint64_t)__dst, ((_BYTE *)__dst - (_BYTE *)v258) >> 2);
        v237 = v296.i64[0];
        v230 = v296.i64[1] + 24;
        v296.i64[1] += 24;
        v238 = (_QWORD *)v272.i64[1];
        v239 = (_QWORD *)v272.i64[0];
        if (v272.i64[1] == v272.i64[0])
        {
          v241 = vdupq_n_s64(v272.u64[1]);
        }
        else
        {
          do
          {
            *(_QWORD *)(v237 - 24) = 0;
            *(_QWORD *)(v237 - 16) = 0;
            v237 -= 24;
            *(_QWORD *)(v237 + 16) = 0;
            v240 = *(_OWORD *)(v238 - 3);
            v238 -= 3;
            *(_OWORD *)v237 = v240;
            *(_QWORD *)(v237 + 16) = v238[2];
            *v238 = 0;
            v238[1] = 0;
            v238[2] = 0;
          }
          while (v238 != v239);
          v241 = v272;
          v230 = v296.i64[1];
        }
        v272.i64[0] = v237;
        v272.i64[1] = v230;
        v296 = v241;
        v242 = v273;
        v273 = v297;
        v297 = v242;
        v295 = (int64x2_t *)v241.i64[0];
        sub_20B947074((uint64_t)&v295);
      }
      else
      {
        *(_QWORD *)v272.i64[1] = 0;
        v229[1] = 0;
        v229[2] = 0;
        sub_20B94308C(v229, v258, (uint64_t)__dst, ((_BYTE *)__dst - (_BYTE *)v258) >> 2);
        v230 = (uint64_t)(v229 + 3);
      }
      v272.i64[1] = v230;
      v185 += v190;
      v221 = 1;
      v222 = v255;
      v187 = v219;
      if (!v255)
        goto LABEL_340;
    }
LABEL_339:
    v256 = v222;
    operator delete(v222);
    goto LABEL_340;
  }
  v250 = 0;
  v185 = 0;
  v188 = 1;
LABEL_388:
  if (v185 == *(_QWORD *)((*(uint64_t (**)(_QWORD *))(*v252 + 56))(v252) + 8))
    v245 = v188 & 1;
  else
    v245 = 0;
  v182 = v248;
  v181 = v249;
  if (v184 && v245)
  {
    v246 = 0;
    v247 = 0;
    do
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD, unint64_t, unint64_t, unsigned __int16 *, unint64_t))(v248 + 16))(v248, *(_QWORD *)((char *)__p + v246) + *v249, *(_QWORD *)((char *)__p + v246 + 8), v277 + v247, v274 + v247, &v280[v247 / 2], v272.i64[0] + v247);
      v247 += 24;
      v246 += 16;
      --v184;
    }
    while (v184);
  }
  if (v250)
    MEMORY[0x20BD39C80](v250, 0x1000C80BDFB0063);
  if (v266)
  {
    v267 = (char *)v266;
    operator delete(v266);
  }
  if (__p)
  {
    v270 = (char *)__p;
    operator delete(__p);
  }
  v295 = &v272;
  sub_20B9470D4((void ***)&v295);
  v295 = (int64x2_t *)&v274;
  sub_20B83B400((void ***)&v295);
  v295 = (int64x2_t *)&v277;
  sub_20B83B400((void ***)&v295);
  v295 = (int64x2_t *)&v280;
  sub_20B83B400((void ***)&v295);
  if (!v245)
LABEL_402:
    (*(void (**)(uint64_t, _QWORD, _QWORD, char **, char **, char **, int **))(v182 + 16))(v182, *v181, *(_QWORD *)(v251 + 8), &v289, &v286, &v292, &v283);
  *v181 += *(_QWORD *)(v251 + 8);
  if (v283)
  {
    v284 = v283;
    operator delete(v283);
  }
  if (v286)
  {
    v287 = v286;
    operator delete(v286);
  }
  if (v289)
  {
    v290 = v289;
    operator delete(v289);
  }
  if (v292)
  {
    v293 = v292;
    operator delete(v292);
  }
}

void sub_20B9DD954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  uint64_t v47;
  void *v49;
  void *v50;
  void *v51;
  void *v52;

  v49 = *(void **)(v47 - 232);
  if (v49)
  {
    *(_QWORD *)(v47 - 224) = v49;
    operator delete(v49);
  }
  v50 = *(void **)(v47 - 208);
  if (v50)
  {
    *(_QWORD *)(v47 - 200) = v50;
    operator delete(v50);
  }
  v51 = *(void **)(v47 - 184);
  if (v51)
  {
    *(_QWORD *)(v47 - 176) = v51;
    operator delete(v51);
  }
  v52 = *(void **)(v47 - 160);
  if (v52)
  {
    *(_QWORD *)(v47 - 152) = v52;
    operator delete(v52);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B9DDBAC(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v8;
  _QWORD *v9;
  char *v10;
  char *v11;

  *result = 0;
  result[1] = 0;
  result[2] = 0;
  if ((a4 & 0x8000000000000000) == 0 && (a3 - a2) >> 1 >= (unint64_t)(a4 + a5))
  {
    v8 = result;
    if (a5)
    {
      if (a5 < 0)
        sub_20B80CDD8();
      sub_20B80FD0C(result, a5);
      v11 = (char *)v8[1];
      v9 = v8 + 1;
      v10 = v11;
      result = memmove(v11, (const void *)(a2 + 2 * a4), 2 * a5);
    }
    else
    {
      v10 = 0;
      v9 = result + 1;
    }
    *v9 = &v10[2 * a5];
  }
  return result;
}

void sub_20B9DDC4C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B9DDC68(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t *a5, uint64_t *a6, char a7, int a8)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  int v35;

  *(_DWORD *)(a1 + 8) = a8;
  *(_QWORD *)(a1 + 16) = a5;
  *(_QWORD *)(a1 + 24) = 0;
  v15 = a1 + 24;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = a2;
  *(_QWORD *)a1 = &off_24C468EE8;
  *(_QWORD *)(a1 + 56) = sub_20B9F1C60(a4, a3);
  *(_QWORD *)(a1 + 64) = v16;
  *(_QWORD *)(a1 + 72) = (*(uint64_t (**)(uint64_t, _WORD *, uint64_t))(*(_QWORD *)a4 + 24))(a4, a3, 1);
  *(_QWORD *)(a1 + 80) = v17;
  *(_BYTE *)(a1 + 88) = a7;
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1) ^ 1;
  if (a8 == 6)
    LOBYTE(v18) = 1;
  if ((v18 & 1) == 0 && !**(_DWORD **)(a1 + 48))
    sub_20B9B38A4(a6, (uint64_t *)(a1 + 56), (_QWORD *)(a1 + 72), v15, a5, 0);
  v19 = *(char **)(a1 + 24);
  v20 = *(char **)(a1 + 32);
  v21 = v20 - v19;
  if (v20 == v19)
  {
    v22 = *(_QWORD *)(a1 + 40);
    v23 = **(_DWORD **)(a1 + 48);
    if ((unint64_t)v20 >= v22)
    {
      v25 = v21 >> 2;
      v26 = v22 - (_QWORD)v19;
      if (v26 >> 1 <= (unint64_t)((v21 >> 2) + 1))
        v27 = v25 + 1;
      else
        v27 = v26 >> 1;
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL)
        v28 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v28 = v27;
      v29 = (char *)sub_20B8127BC(a1 + 40, v28);
      v30 = *(char **)(a1 + 24);
      v31 = *(char **)(a1 + 32);
      v32 = &v29[4 * v25];
      v34 = &v29[4 * v33];
      *(_DWORD *)v32 = v23;
      v24 = v32 + 4;
      while (v31 != v30)
      {
        v35 = *((_DWORD *)v31 - 1);
        v31 -= 4;
        *((_DWORD *)v32 - 1) = v35;
        v32 -= 4;
      }
      *(_QWORD *)(a1 + 24) = v32;
      *(_QWORD *)(a1 + 32) = v24;
      *(_QWORD *)(a1 + 40) = v34;
      if (v30)
        operator delete(v30);
    }
    else
    {
      *(_DWORD *)v20 = v23;
      v24 = v20 + 4;
    }
    *(_QWORD *)(a1 + 32) = v24;
  }
  return a1;
}

void sub_20B9DDDE8(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void *v3;

  *v1 = off_24C4693E0;
  v3 = (void *)v1[3];
  if (v3)
  {
    v1[4] = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_20B9DDE14(uint64_t a1)
{
  return *(_QWORD *)(a1 + 80) != 0;
}

uint64_t *sub_20B9DDE24(uint64_t a1)
{
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1))
    return (uint64_t *)(a1 + 72);
  else
    return sub_20B947CC4();
}

uint64_t sub_20B9DDE60(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t *a5, uint64_t *a6, uint64_t a7)
{
  uint64_t v11;

  *(_QWORD *)sub_20B9DDC68(a1, a2, a3, a4, a5, a6, 1, 6) = &off_24C468288;
  *(_QWORD *)(a1 + 96) = (*(uint64_t (**)(uint64_t, _WORD *, uint64_t))(*(_QWORD *)a4 + 16))(a4, a3, a7);
  *(_QWORD *)(a1 + 104) = v11;
  return a1;
}

void sub_20B9DDEC8(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void *v3;

  *v1 = off_24C4693E0;
  v3 = (void *)v1[3];
  if (v3)
  {
    v1[4] = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_20B9DDEF0(uint64_t a1, uint64_t a2)
{
  char *result;

  result = (char *)(a1 + 24);
  if (result != (char *)a2)
    return sub_20B939A18(result, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  return result;
}

uint64_t sub_20B9DDF14(uint64_t a1, int a2, _OWORD *a3, int a4, uint64_t a5)
{
  __int16 v7;
  _DWORD *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  int v14;

  *(_DWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a5;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)a1 = &off_24C468130;
  if (a5)
    v7 = *(_WORD *)(a5 + 16) + 48;
  else
    v7 = 48;
  *(_WORD *)(a1 + 48) = v7;
  *(_OWORD *)(a1 + 56) = *a3;
  *(_QWORD *)(a1 + 72) = a1 + 48;
  *(_QWORD *)(a1 + 80) = 1;
  v8 = sub_20B8127BC(a1 + 40, 1uLL);
  v9 = *(char **)(a1 + 24);
  v10 = *(char **)(a1 + 32);
  v12 = &v8[v11];
  *v8 = a4;
  v13 = v8 + 1;
  while (v10 != v9)
  {
    v14 = *((_DWORD *)v10 - 1);
    v10 -= 4;
    *--v8 = v14;
  }
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = v13;
  *(_QWORD *)(a1 + 40) = v12;
  if (v9)
    operator delete(v9);
  *(_QWORD *)(a1 + 32) = v13;
  return a1;
}

void sub_20B9DDFCC(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void *v3;

  *v1 = off_24C4693E0;
  v3 = (void *)v1[3];
  if (v3)
  {
    v1[4] = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B9DDFF4(uint64_t a1, uint64_t *a2, __int16 *a3, uint64_t a4, uint64_t *a5, int a6, uint64_t *a7, int a8)
{
  uint64_t *v8;
  uint64_t v12;
  void **v13;
  uint64_t *v14;
  uint64_t v15;
  __int16 v16;
  __int16 *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  __int16 v28;
  int v29;
  uint64_t v30;
  _WORD *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int16 *v41;
  char *v42;
  int v43;
  int v44;
  uint64_t *v45;
  uint64_t v46;
  _WORD *v47;
  unsigned __int16 *v48;
  unsigned __int16 *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  char *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  _DWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  int v69;

  v8 = a5;
  *(_DWORD *)(a1 + 8) = a8;
  *(_QWORD *)(a1 + 16) = a5;
  *(_QWORD *)(a1 + 24) = 0;
  v12 = a1 + 24;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = a2;
  *(_QWORD *)a1 = &off_24C468F68;
  *(_OWORD *)(a1 + 56) = 0u;
  v13 = (void **)(a1 + 56);
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  v14 = (uint64_t *)(a1 + 72);
  *(_DWORD *)(a1 + 128) = a6;
  v15 = *a2;
  *(_DWORD *)(a1 + 140) = *((_DWORD *)a2 + 2);
  *(_QWORD *)(a1 + 132) = v15;
  v16 = *a3;
  if (*a3)
  {
    v17 = a3;
    v18 = 0;
    do
    {
      if ((unint64_t)v18 >= *v14)
      {
        v19 = (char *)*v13;
        v20 = v18 - (_BYTE *)*v13;
        if (v20 <= -3)
          sub_20B80CDD8();
        v21 = v20 >> 1;
        v22 = *v14 - (_QWORD)v19;
        if (v22 <= (v20 >> 1) + 1)
          v23 = v21 + 1;
        else
          v23 = *v14 - (_QWORD)v19;
        if (v22 >= 0x7FFFFFFFFFFFFFFELL)
          v24 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v24 = v23;
        if (v24)
        {
          v25 = (char *)sub_20B80FD48((uint64_t)v14, v24);
          v19 = *(char **)(a1 + 56);
          v18 = *(char **)(a1 + 64);
          v16 = *v17;
        }
        else
        {
          v25 = 0;
        }
        v26 = &v25[2 * v21];
        *(_WORD *)v26 = v16;
        v27 = v26 + 2;
        while (v18 != v19)
        {
          v28 = *((_WORD *)v18 - 1);
          v18 -= 2;
          *((_WORD *)v26 - 1) = v28;
          v26 -= 2;
        }
        *(_QWORD *)(a1 + 56) = v26;
        *(_QWORD *)(a1 + 64) = v27;
        *(_QWORD *)(a1 + 72) = &v25[2 * v24];
        if (v19)
          operator delete(v19);
        v18 = v27;
      }
      else
      {
        *(_WORD *)v18 = v16;
        v18 += 2;
      }
      *(_QWORD *)(a1 + 64) = v18;
      v29 = (unsigned __int16)v17[1];
      ++v17;
      v16 = v29;
    }
    while (v29);
    v30 = *v14;
    if ((unint64_t)v18 < *v14)
    {
      *(_WORD *)v18 = 0;
      v31 = v18 + 2;
      v8 = a5;
      goto LABEL_42;
    }
    v8 = a5;
  }
  else
  {
    v18 = 0;
    v30 = 0;
  }
  v32 = (char *)*v13;
  v33 = v18 - (_BYTE *)*v13;
  if (v33 <= -3)
    sub_20B80CDD8();
  v34 = v33 >> 1;
  v35 = v30 - (_QWORD)v32;
  if (v35 <= (v33 >> 1) + 1)
    v36 = v34 + 1;
  else
    v36 = v35;
  if (v35 >= 0x7FFFFFFFFFFFFFFELL)
    v37 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v37 = v36;
  if (v37)
  {
    v38 = (char *)sub_20B80FD48((uint64_t)v14, v37);
    v40 = v39;
    v32 = *(char **)(a1 + 56);
    v18 = *(char **)(a1 + 64);
  }
  else
  {
    v38 = 0;
    v40 = 0;
  }
  v41 = (unsigned __int16 *)&v38[2 * v34];
  v42 = &v38[2 * v40];
  *v41 = 0;
  v31 = v41 + 1;
  if (v18 == v32)
  {
    v43 = 0;
  }
  else
  {
    do
    {
      v44 = *((unsigned __int16 *)v18 - 1);
      v18 -= 2;
      v43 = v44;
      *--v41 = v44;
    }
    while (v18 != v32);
  }
  *(_QWORD *)(a1 + 56) = v41;
  *(_QWORD *)(a1 + 64) = v31;
  *(_QWORD *)(a1 + 72) = v42;
  if (!v32)
  {
    *(_QWORD *)(a1 + 64) = v31;
    goto LABEL_46;
  }
  operator delete(v32);
LABEL_42:
  v41 = *(unsigned __int16 **)(a1 + 56);
  *(_QWORD *)(a1 + 64) = v31;
  if (!v41)
  {
    v45 = sub_20B947CC4();
    v47 = (_WORD *)*v45;
    v46 = v45[1];
    v41 = (unsigned __int16 *)*v13;
    goto LABEL_54;
  }
  v43 = *v41;
LABEL_46:
  v48 = v41;
  v47 = v41;
  if (v43)
  {
    v49 = v41 + 1;
    v47 = v41;
    do
    {
      if (v43 == 44)
        v47 = v49;
      v50 = *v49++;
      v43 = v50;
    }
    while (v50);
    v48 = v49 - 1;
  }
  v46 = v48 - v47;
  if (!v47)
    v46 = 0;
LABEL_54:
  *(_QWORD *)(a1 + 80) = v47;
  *(_QWORD *)(a1 + 88) = v46;
  *(_QWORD *)(a1 + 112) = (*(uint64_t (**)(uint64_t, unsigned __int16 *, _QWORD))(*(_QWORD *)a4 + 16))(a4, v41, *(unsigned int *)(a1 + 128));
  *(_QWORD *)(a1 + 120) = v51;
  *(_QWORD *)(a1 + 96) = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a4 + 24))(a4, *(_QWORD *)(a1 + 56), 0);
  *(_QWORD *)(a1 + 104) = v52;
  v53 = *(_DWORD *)a2;
  if (!*(_DWORD *)a2)
    sub_20B9B38A4(a7, (uint64_t *)(a1 + 80), (_QWORD *)(a1 + 96), v12, v8, 1);
  v54 = *(char **)(a1 + 24);
  v55 = *(char **)(a1 + 32);
  v56 = v55 - v54;
  if (v55 == v54)
  {
    v57 = *(_QWORD *)(a1 + 40);
    if ((unint64_t)v55 >= v57)
    {
      v59 = v56 >> 2;
      v60 = v57 - (_QWORD)v54;
      if (v60 >> 1 <= (unint64_t)((v56 >> 2) + 1))
        v61 = v59 + 1;
      else
        v61 = v60 >> 1;
      if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFFCLL)
        v62 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v62 = v61;
      v63 = (char *)sub_20B8127BC(a1 + 40, v62);
      v64 = *(char **)(a1 + 24);
      v65 = *(char **)(a1 + 32);
      v66 = &v63[4 * v59];
      v68 = &v63[4 * v67];
      *(_DWORD *)v66 = v53;
      v58 = v66 + 4;
      while (v65 != v64)
      {
        v69 = *((_DWORD *)v65 - 1);
        v65 -= 4;
        *((_DWORD *)v66 - 1) = v69;
        v66 -= 4;
      }
      *(_QWORD *)(a1 + 24) = v66;
      *(_QWORD *)(a1 + 32) = v58;
      *(_QWORD *)(a1 + 40) = v68;
      if (v64)
        operator delete(v64);
    }
    else
    {
      *(_DWORD *)v55 = v53;
      v58 = v55 + 4;
    }
    *(_QWORD *)(a1 + 32) = v58;
  }
  return a1;
}

void sub_20B9DE38C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    v1[8] = v4;
    operator delete(v4);
  }
  *v1 = off_24C4693E0;
  v5 = (void *)v1[3];
  if (v5)
  {
    v1[4] = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B9DE3D8(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_20B9DE3E0(uint64_t a1)
{
  return a1 + 96;
}

uint64_t sub_20B9DE3E8(uint64_t a1)
{
  return **(unsigned int **)(a1 + 24);
}

uint64_t sub_20B9DE3F4(uint64_t a1)
{
  return a1 + 112;
}

BOOL sub_20B9DE3FC(uint64_t a1)
{
  uint64_t v1;

  if (*(_QWORD *)(a1 + 104) && (v1 = **(unsigned __int16 **)(a1 + 96), v1 != 42))
    return *(_QWORD *)(a1 + 88) != v1 - 48;
  else
    return 0;
}

uint64_t sub_20B9DE438()
{
  return 0;
}

uint64_t sub_20B9DE44C()
{
  return 0;
}

uint64_t sub_20B9DE458()
{
  return 1;
}

_QWORD *sub_20B9DE460(_QWORD *a1)
{
  void *v2;

  *a1 = off_24C4693E0;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20B9DE49C(_QWORD *a1)
{
  void *v2;

  *a1 = off_24C4693E0;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B9DE4E8(uint64_t a1)
{
  return *(unsigned __int16 *)(*(_QWORD *)(a1 + 48) + 6);
}

uint64_t sub_20B9DE4F4(uint64_t a1)
{
  return **(unsigned int **)(a1 + 48);
}

uint64_t sub_20B9DE500(uint64_t a1)
{
  return *(unsigned __int16 *)(*(_QWORD *)(a1 + 48) + 4);
}

BOOL sub_20B9DE50C(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  int v3;
  __int16 v5;

  v2 = *(_QWORD *)(a1 + 48);
  if ((a2 & 1) != 0)
  {
    v3 = *(unsigned __int16 *)(v2 + 4);
    if ((v3 & 0x80) != 0)
      return 0;
    if ((a2 & 2) != 0)
    {
      return (v3 & 0x400) == 0;
    }
    else
    {
      if ((a2 & 8) != 0)
        return (~v3 & 0x300) != 0;
      if ((a2 & 4) == 0)
        return 1;
      return (v3 & 0x200) == 0;
    }
  }
  else
  {
    if ((a2 & 2) == 0)
    {
      if ((a2 & 8) != 0)
      {
        LODWORD(v2) = *(unsigned __int16 *)(v2 + 4);
        if ((~(_DWORD)v2 & 0x210) == 0)
          return ((v2 & 0x8000u) != 0) & (a2 >> 5);
      }
      else if ((a2 & 4) != 0)
      {
        LOWORD(v2) = *(_WORD *)(v2 + 4);
        if ((v2 & 0x20) != 0)
          return ((v2 & 0x8000u) != 0) & (a2 >> 5);
      }
      return 1;
    }
    v5 = *(_WORD *)(v2 + 4);
    if ((a2 & 0x10) != 0)
      return (v5 & 0x2000) == 0;
    else
      return (v5 & 0x40) == 0;
  }
}

uint64_t sub_20B9DE5B0(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B9DE5B8(uint64_t result, char a2)
{
  *(_BYTE *)(result + 88) = a2;
  return result;
}

uint64_t sub_20B9DE5C0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 88);
}

_QWORD *sub_20B9DE5C8(_QWORD *a1)
{
  void *v2;

  *a1 = off_24C4693E0;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20B9DE604(_QWORD *a1)
{
  void *v2;

  *a1 = off_24C4693E0;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B9DE650()
{
  return 0;
}

uint64_t sub_20B9DE658()
{
  return 1;
}

_QWORD *sub_20B9DE664(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  *a1 = off_24C4693E0;
  v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_20B9DE6B0(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  *a1 = off_24C4693E0;
  v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B9DE70C(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 138);
}

uint64_t sub_20B9DE714(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 136);
}

_QWORD *sub_20B9DE71C(_QWORD *a1)
{
  void *v2;

  *a1 = off_24C4693E0;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20B9DE758(_QWORD *a1)
{
  void *v2;

  *a1 = off_24C4693E0;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B9DE7A4(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 90);
}

_QWORD *sub_20B9DE7AC(_QWORD *a1)
{
  void *v2;

  *a1 = off_24C4693E0;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20B9DE7E8(_QWORD *a1)
{
  void *v2;

  *a1 = off_24C4693E0;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B9DE834()
{
  return 1;
}

uint64_t sub_20B9DE83C(uint64_t a1)
{
  return a1 + 96;
}

uint64_t sub_20B9DE848()
{
  return 0;
}

_QWORD *sub_20B9DE850(_QWORD *a1)
{
  void *v2;

  *a1 = off_24C4693E0;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20B9DE88C(_QWORD *a1)
{
  void *v2;

  *a1 = off_24C4693E0;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B9DE8D8()
{
  return 0;
}

uint64_t sub_20B9DE8E0()
{
  return 1;
}

uint64_t sub_20B9DE8E8(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B9DE8F0(uint64_t a1)
{
  return a1 + 72;
}

BOOL sub_20B9DE8F8(int a1)
{
  uint64_t v1;
  __int16 *v2;
  BOOL v3;

  v1 = 0;
  while ((unsigned __int16)word_20BA94E78[v1] != a1)
  {
    if (++v1 == 13)
    {
      v2 = 0;
      goto LABEL_6;
    }
  }
  v2 = &word_20BA94E78[v1];
LABEL_6:
  if (v2)
    v3 = (char *)v2 - (char *)word_20BA94E78 == -2;
  else
    v3 = 1;
  return !v3;
}

uint64_t sub_20B9DE93C(int a1)
{
  uint64_t v1;
  char *v2;
  _BOOL4 v3;
  const char *v4;

  v1 = 0;
  while (*(unsigned __int16 *)&a2181c1f1i1[v1] != a1)
  {
    v1 += 2;
    if (v1 == 10)
      goto LABEL_6;
  }
  if (v1 != -2)
    return 1;
LABEL_6:
  v2 = "V1";
  if (a1 != 12630)
    v2 = 0;
  v3 = a1 == 12626 || a1 == 12630;
  if (a1 == 12626)
    v4 = "R1V1";
  else
    v4 = v2;
  return v4 - "R1V1" != -2 && v3;
}

uint64_t sub_20B9DE9BC(unsigned __int16 *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  _BYTE *v4;

  if (!a2)
    return 1;
  v2 = 2 * a2;
  while (1)
  {
    v3 = *a1;
    if ((unsigned __int16)((unsigned __int16)(v3 + 21504) >> 2) < 0xAE9u
      || (unsigned __int16)((v3 & 0xFFDF) - 65) < 0x1Au)
    {
      goto LABEL_12;
    }
    if (v3 != 39)
      break;
    v4 = &unk_20BA58EB2;
LABEL_9:
    if (v4 - (_BYTE *)&unk_20BA58EB2 == -2)
      return 0;
LABEL_12:
    ++a1;
    v2 -= 2;
    if (!v2)
      return 1;
  }
  if (v3 == 45)
  {
    v4 = &unk_20BA58EB4;
    goto LABEL_9;
  }
  if ((v3 - 48) <= 9)
    goto LABEL_12;
  return 0;
}

uint64_t sub_20B9DEA54(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  char *v3;

  if (a2 != 2)
    return 0;
  v2 = 0;
  while (1)
  {
    v3 = off_24C4A0310[v2];
    if (v3)
    {
      if (*(_DWORD *)v3 == *a1)
        break;
    }
    if (++v2 == 11)
      return 0;
  }
  return 1;
}

BOOL sub_20B9DEA9C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  int v5;
  char *v6;
  _BOOL8 result;
  uint64_t v8;

  if (!a2)
    return 0;
  sub_20B9DEB60(a1, a2);
  if (v4 != a2)
    return 0;
  v5 = *(unsigned __int16 *)(a1 + 2 * a2 - 2);
  if (v5 == 12619)
  {
    v6 = "K1N1";
  }
  else
  {
    if (v5 != 12622)
      goto LABEL_9;
    v6 = "N1";
  }
  if (v6 - "K1N1" != -2)
    return a2 < 6;
LABEL_9:
  v8 = 0;
  while (*(unsigned __int16 *)&a114171g1k1n111[v8] != v5)
  {
    v8 += 2;
    if (v8 == 18)
      return 0;
  }
  result = 0;
  if (a2 >= 2 && v8 != -2)
    return a2 < 6;
  return result;
}

uint64_t sub_20B9DEB60(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unsigned __int16 *v6;
  uint64_t v7;
  int v8;

  if (!a2)
    return *sub_20B947CC4();
  v2 = 0;
  v3 = *(unsigned __int16 *)(a1 + 2 * a2 - 2);
  while (*(unsigned __int16 *)&a114171g1k1n111[v2] != v3)
  {
    v2 += 2;
    if (v2 == 18)
      return *sub_20B947CC4();
  }
  if (v2 == -2)
    return *sub_20B947CC4();
  if (a2 - 2 < 0)
  {
    v7 = 1;
  }
  else
  {
    v6 = (unsigned __int16 *)(a1 + 2 * a2 - 4);
    v7 = 1;
    while (1)
    {
      v8 = *v6--;
      if (v8 != v3)
        break;
      if (a2 == ++v7)
      {
        v7 = a2;
        return a1 + 2 * (a2 - v7);
      }
    }
  }
  return a1 + 2 * (a2 - v7);
}

BOOL sub_20B9DEC04(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v4;
  unint64_t v5;
  unint64_t v6;
  unsigned __int16 *v7;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  uint64_t v11;
  unsigned __int16 *v12;
  unint64_t v13;

  if (a2)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = (unsigned __int16 *)(a3 + 2 * a4);
    v8 = 2 * a4 - 2;
    while (1)
    {
      v9 = *(unsigned __int16 *)(a1 + 2 * v5);
      if (v9 == 39)
      {
        v10 = &unk_20BA58EB2;
      }
      else
      {
        if (v9 != 45)
          goto LABEL_15;
        v10 = &unk_20BA58EB4;
      }
      if (v10 - (_BYTE *)&unk_20BA58EB2 != -2)
      {
        v11 = a3 + 2 + 2 * v6;
        v12 = v7;
        if ((unsigned __int16 *)v11 != v7)
        {
          v13 = v8 - 2 * v6;
          v12 = (unsigned __int16 *)v11;
          while (*v12 != v9)
          {
            ++v12;
            v13 -= 2;
            if (!v13)
            {
              v12 = v7;
              break;
            }
          }
        }
        if (v12 == v7)
          return v4;
        v6 = ((uint64_t)v12 - a3) >> 1;
        if (v6 > v5)
          return v4;
      }
LABEL_15:
      v4 = ++v5 >= a2;
      if (v5 == a2)
        return v4;
    }
  }
  return 1;
}

void sub_20B9DECCC(int a1@<W0>, uint64_t a2@<X8>)
{
  __int16 v3;
  unsigned int v4;
  unsigned __int16 v5;
  void *p_p;
  unint64_t v7;
  unsigned __int16 v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  void *v12;
  unint64_t v13;
  void *__p;
  unint64_t v15;
  char v16;

  if ((a1 - 12623) > 0x14)
  {
    if ((unsigned __int16)(a1 + 10332) > 0xD45Bu)
    {
      v3 = a1 + 21504;
      v4 = (unsigned __int16)(a1 + 21504) / 0x24Cu;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      sub_20B87C0F8(a2, *(_WORD *)&a112141718191a1[2 * v4]);
      v5 = v3 - 588 * v4;
      sub_20B9DEEDC(&__p, *(unsigned __int16 *)&aO1p1q1r1s1t1u1[2 * (v5 / 0x1Cu)]);
      if (v16 >= 0)
        p_p = &__p;
      else
        p_p = __p;
      if (v16 >= 0)
        v7 = v16;
      else
        v7 = v15;
      sub_20B88DACC(a2, p_p, v7);
      v8 = v5 % 0x1Cu;
      if (v16 < 0)
        operator delete(__p);
      if (v8)
      {
        v9 = 0;
        v10 = *(unsigned __int16 *)&a11213141516171[2 * v8 - 2];
        while (*(unsigned __int16 *)&a3151611111111d[v9 * 2] != (_DWORD)v10)
        {
          if (++v9 == 11)
            goto LABEL_19;
        }
        if (v9 == -1)
        {
LABEL_19:
          v11 = 1;
          v16 = 1;
          LODWORD(__p) = (unsigned __int16)v10;
          goto LABEL_21;
        }
        sub_20B87C9E0(&__p, off_24C4A0310[v9]);
        v11 = v16;
        v10 = v15;
LABEL_21:
        if ((v11 & 0x80u) == 0)
          v12 = &__p;
        else
          v12 = __p;
        if ((v11 & 0x80u) == 0)
          v13 = v11;
        else
          v13 = v10;
        sub_20B88DACC(a2, v12, v13);
        if (v16 < 0)
          operator delete(__p);
      }
    }
    else
    {
      *(_BYTE *)(a2 + 23) = 1;
      *(_DWORD *)a2 = (unsigned __int16)a1;
    }
  }
  else
  {
    sub_20B9DEEDC((_BYTE *)a2, a1);
  }
}

void sub_20B9DEE9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

_BYTE *sub_20B9DEEDC(_BYTE *result, int a2)
{
  uint64_t v2;

  v2 = 0;
  while (*(unsigned __int16 *)&aX1y1z1111b1[v2 * 2] != a2)
  {
    if (++v2 == 7)
      goto LABEL_6;
  }
  if (v2 == -1)
  {
LABEL_6:
    result[23] = 1;
    *(_WORD *)result = a2;
    *((_WORD *)result + 1) = 0;
    return result;
  }
  return sub_20B87C9E0(result, off_24C4A0368[v2]);
}

void sub_20B9DEF34(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  void **v6;
  unint64_t v7;
  void *__p[2];
  unsigned __int8 v9;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (a2)
  {
    v5 = 2 * a2;
    do
    {
      sub_20B9DECCC(*a1, (uint64_t)__p);
      if ((v9 & 0x80u) == 0)
        v6 = __p;
      else
        v6 = (void **)__p[0];
      if ((v9 & 0x80u) == 0)
        v7 = v9;
      else
        v7 = (unint64_t)__p[1];
      sub_20B88DACC((uint64_t)a3, v6, v7);
      if ((char)v9 < 0)
        operator delete(__p[0]);
      ++a1;
      v5 -= 2;
    }
    while (v5);
  }
}

void sub_20B9DEFC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

void sub_20B9DEFF4(int a1@<W0>, char **a2@<X8>)
{
  uint64_t v4;
  __int16 v5;
  char *v6;
  char *v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  __int16 v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  __int16 v29;
  char *v30;
  char *v31;
  __int16 v32;

  v4 = 0;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  while (*(unsigned __int16 *)&a1171b1e1h1[v4] != a1)
  {
    v4 += 2;
    if (v4 == 10)
      goto LABEL_8;
  }
  if (v4 != -2)
  {
    v5 = *(_WORD *)&a2181c1f1i1[v4];
    if (v5)
    {
      v6 = (char *)operator new(2uLL);
      *(_WORD *)v6 = v5;
      v7 = v6 + 2;
      a2[1] = v6 + 2;
      a2[2] = v6 + 2;
      *a2 = v6;
      goto LABEL_9;
    }
  }
LABEL_8:
  v6 = 0;
  v7 = 0;
LABEL_9:
  v8 = 0;
  while (*(unsigned __int16 *)&a1171b1h1[v8] != a1)
  {
    v8 += 2;
    if (v8 == 8)
      goto LABEL_24;
  }
  if (v8 == -2 || (v9 = *(_WORD *)&aK1l1m1j1[v8]) == 0)
  {
LABEL_24:
    v15 = v7;
    goto LABEL_25;
  }
  v10 = v7 - v6;
  if (v7 - v6 <= -3)
    sub_20B8F6DC4();
  v11 = v10 >> 1;
  if (v10 <= (unint64_t)((v10 >> 1) + 1))
    v12 = v11 + 1;
  else
    v12 = v7 - v6;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFELL)
    v13 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v13 = v12;
  if (v13)
  {
    v14 = (char *)sub_20B80FD48((uint64_t)(a2 + 2), v13);
    v6 = *a2;
    v7 = a2[1];
  }
  else
  {
    v14 = 0;
  }
  v27 = &v14[2 * v11];
  v28 = &v14[2 * v13];
  *(_WORD *)v27 = v9;
  v15 = v27 + 2;
  while (v7 != v6)
  {
    v29 = *((_WORD *)v7 - 1);
    v7 -= 2;
    *((_WORD *)v27 - 1) = v29;
    v27 -= 2;
  }
  *a2 = v27;
  a2[1] = v15;
  a2[2] = v28;
  if (v6)
    operator delete(v6);
  a2[1] = v15;
LABEL_25:
  if (a1 == 12624)
  {
    v16 = "P1T1";
  }
  else
  {
    if (a1 != 12628)
      return;
    v16 = "T1";
  }
  if (v16 - "P1T1" != -2)
  {
    v17 = *(_WORD *)&aR1v1[v16 - "P1T1"];
    if (v17)
    {
      v18 = (unint64_t)a2[2];
      if ((unint64_t)v15 >= v18)
      {
        v20 = *a2;
        v21 = v15 - *a2;
        if (v21 <= -3)
          sub_20B8F6DC4();
        v22 = v21 >> 1;
        v23 = v18 - (_QWORD)v20;
        if (v23 <= (v21 >> 1) + 1)
          v24 = v22 + 1;
        else
          v24 = v23;
        if (v23 >= 0x7FFFFFFFFFFFFFFELL)
          v25 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v25 = v24;
        if (v25)
        {
          v26 = (char *)sub_20B80FD48((uint64_t)(a2 + 2), v25);
          v20 = *a2;
          v15 = a2[1];
        }
        else
        {
          v26 = 0;
        }
        v30 = &v26[2 * v22];
        v31 = &v26[2 * v25];
        *(_WORD *)v30 = v17;
        v19 = v30 + 2;
        while (v15 != v20)
        {
          v32 = *((_WORD *)v15 - 1);
          v15 -= 2;
          *((_WORD *)v30 - 1) = v32;
          v30 -= 2;
        }
        *a2 = v30;
        a2[1] = v19;
        a2[2] = v31;
        if (v20)
          operator delete(v20);
      }
      else
      {
        *(_WORD *)v15 = v17;
        v19 = v15 + 2;
      }
      a2[1] = v19;
    }
  }
}

void sub_20B9DF258(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B9DF27C(int a1@<W0>, uint64_t *a2@<X8>)
{
  char *v4;
  char *v5;
  unint64_t v6;
  __int16 v7;
  uint64_t v8;
  __int16 *v9;
  unint64_t v10;
  unsigned __int16 v11;
  uint64_t v12;
  __int16 v13;
  char *v14;
  char *v15;
  int v16;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_20B9DEFF4(a1, &v14);
  v4 = v14;
  v5 = v15;
  if (v14 != v15)
  {
    v6 = a2[1];
    do
    {
      v7 = *(_WORD *)v4;
      v13 = *(_WORD *)v4;
      v16 = 1;
      if (v6 >= a2[2])
      {
        v6 = sub_20B9DFEEC(a2, &v16, &v13);
      }
      else
      {
        *(_BYTE *)(v6 + 23) = 1;
        *(_WORD *)v6 = v7;
        *(_WORD *)(v6 + 2) = 0;
        v6 += 24;
        a2[1] = v6;
      }
      a2[1] = v6;
      v4 += 2;
    }
    while (v4 != v5);
    v4 = v14;
  }
  if (v4)
  {
    v15 = v4;
    operator delete(v4);
  }
  v8 = 0;
  while (*(unsigned __int16 *)&aB1h17111e1a141[v8] != a1)
  {
    v8 += 2;
    if (v8 == 28)
      return;
  }
  if (v8 != -2)
  {
    LODWORD(v14) = 2;
    v9 = (__int16 *)&aB1h17111e1a141[v8];
    v10 = a2[1];
    if (v10 >= a2[2])
    {
      v12 = sub_20B9DFEEC(a2, (int *)&v14, v9);
    }
    else
    {
      v11 = *v9;
      *(_BYTE *)(v10 + 23) = 2;
      *(_WORD *)v10 = v11;
      *(_DWORD *)(v10 + 2) = v11;
      v12 = v10 + 24;
      a2[1] = v10 + 24;
    }
    a2[1] = v12;
  }
}

void sub_20B9DF3B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14)
{
  sub_20B83AFD0((void ***)&a14);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9DF3E8(int a1)
{
  uint64_t v1;
  char *v2;
  int64_t v3;
  const char *v4;

  v1 = 0;
  while (*(unsigned __int16 *)&a1171b1e1h1[v1] != a1)
  {
    v1 += 2;
    if (v1 == 10)
      goto LABEL_6;
  }
  if (v1 != -2)
  {
    v3 = 0;
    while (*(unsigned __int16 *)&a1171b1e1h1[v3] != a1)
    {
      v3 += 2;
      if (v3 == 10)
        return 0;
    }
    if (v3 != -2)
    {
      v4 = "2181C1F1I1";
      return *(unsigned __int16 *)&v4[v3];
    }
    return 0;
  }
LABEL_6:
  if (a1 != 12624)
  {
    if (a1 == 12628)
    {
      v2 = "T1";
      goto LABEL_14;
    }
    return 0;
  }
  v2 = "P1T1";
LABEL_14:
  v3 = v2 - "P1T1";
  if (v3 == -2)
    return 0;
  v4 = "R1V1";
  return *(unsigned __int16 *)&v4[v3];
}

BOOL sub_20B9DF4A0(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  const void *v8;
  unint64_t v9;
  _BOOL8 result;
  uint64_t v11;
  __int128 v12;
  _BYTE v13[24];
  _BYTE v14[24];
  _BYTE v15[24];
  _BYTE v16[24];
  _BYTE v17[24];
  _BYTE v18[24];
  _BYTE v19[24];
  _BYTE v20[24];
  _BYTE v21[24];
  _BYTE v22[24];
  _BYTE v23[24];
  _BYTE v24[24];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = atomic_load((unsigned __int8 *)&qword_25472C070);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25472C070))
  {
    sub_20B87C9E0(&v12, asc_20BA94DF2);
    sub_20B87C9E0(v13, byte_20BA94DF6);
    sub_20B87C9E0(v14, aT_12);
    sub_20B87C9E0(v15, byte_20BA94E00);
    sub_20B87C9E0(v16, aT_13);
    sub_20B87C9E0(v17, aD_12);
    sub_20B87C9E0(v18, asc_20BA94E0C);
    sub_20B87C9E0(v19, asc_20BA94E10);
    sub_20B87C9E0(v20, byte_20BA94E14);
    sub_20B87C9E0(v21, aT_14);
    sub_20B87C9E0(v22, byte_20BA94E1C);
    sub_20B87C9E0(v23, byte_20BA94E20);
    sub_20B87C9E0(v24, asc_20BA94E24);
    sub_20B8C97AC((uint64_t)&qword_25472C080, &v12, 0xDuLL);
    v11 = 312;
    do
    {
      if ((char)v13[v11 - 9] < 0)
        operator delete(*(void **)&v13[v11 - 32]);
      v11 -= 24;
    }
    while (v11);
    __cxa_atexit((void (*)(void *))sub_20B8C9848, &qword_25472C080, &dword_20B7F7000);
    __cxa_guard_release(&qword_25472C070);
  }
  v5 = qword_25472C080;
  v6 = unk_25472C088;
  *(_QWORD *)&v12 = a1;
  *((_QWORD *)&v12 + 1) = a2;
  if (qword_25472C080 == unk_25472C088)
    return 0;
  do
  {
    v7 = *(char *)(v5 + 23);
    if (v7 >= 0)
      v8 = (const void *)v5;
    else
      v8 = *(const void **)v5;
    if (v7 >= 0)
      v9 = *(unsigned __int8 *)(v5 + 23);
    else
      v9 = *(_QWORD *)(v5 + 8);
    result = sub_20B947DC0((uint64_t *)&v12, v8, v9);
    if (result)
      break;
    v5 += 24;
  }
  while (v5 != v6);
  return result;
}

void sub_20B9DF6F0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = 312;
  while (1)
  {
    if (*(char *)(v1 + v3 - 1) < 0)
      operator delete(*(void **)(v1 + v3 - 24));
    v3 -= 24;
    if (!v3)
    {
      __cxa_guard_abort(&qword_25472C070);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t sub_20B9DF758(const __CFString *a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  void **v10;
  void **v11;
  uint64_t v12;
  uint64_t j;
  uint64_t v14;
  uint64_t i;
  void *__p[2];
  unsigned __int8 v18;
  char v19[24];
  char v20[24];
  char v21[24];
  char v22[24];
  char v23[24];
  char v24[24];
  char v25[24];
  char v26[24];
  _BYTE v27[24];
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25472C078);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25472C078))
  {
    sub_20B87C9E0(__p, "41W1O1");
    sub_20B87C9E0(v19, "41W1c1");
    sub_20B87C9E0(v20, "91W1c1");
    sub_20B87C9E0(v21, "G1W1O1");
    sub_20B87C9E0(v22, "G1W1c1");
    sub_20B87C9E0(v23, "N1W1O1");
    sub_20B87C9E0(v24, "N1W1c1");
    sub_20B87C9E0(v25, "O191A1");
    sub_20B87C9E0(v26, "S191A1");
    sub_20B87C9E0(v27, "W191A1");
    sub_20B8C97AC((uint64_t)&qword_25472C098, (__int128 *)__p, 0xAuLL);
    for (i = 0; i != -240; i -= 24)
    {
      if ((char)v27[i + 23] < 0)
        operator delete(*(void **)&v27[i]);
    }
    __cxa_atexit((void (*)(void *))sub_20B8C9848, &qword_25472C098, &dword_20B7F7000);
    __cxa_guard_release(&qword_25472C078);
  }
  sub_20B8D09C0(a1, __p);
  v3 = qword_25472C098;
  if (qword_25472C098 == unk_25472C0A0)
  {
LABEL_32:
    v14 = 0;
    if ((v18 & 0x80) != 0)
LABEL_33:
      operator delete(__p[0]);
  }
  else
  {
    v4 = __p;
    if ((v18 & 0x80u) == 0)
    {
      v5 = v18;
    }
    else
    {
      v4 = (void **)__p[0];
      v5 = (uint64_t)__p[1];
    }
    v6 = (char *)v4 + 2 * v5;
    while (1)
    {
      v7 = *(unsigned __int8 *)(v3 + 23);
      v8 = (v7 & 0x80u) == 0 ? (unsigned __int16 *)v3 : *(unsigned __int16 **)v3;
      if ((v7 & 0x80u) != 0)
        v7 = *(_QWORD *)(v3 + 8);
      if (!v7)
        break;
      if (v5 >= v7)
      {
        v9 = v5;
        v10 = v4;
LABEL_17:
        if (v9 - v7 != -1)
        {
          v11 = 0;
          v12 = v9 + 1;
          while (*(unsigned __int16 *)((char *)v11 + (_QWORD)v10) != *v8)
          {
            --v12;
            v11 = (void **)((char *)v11 + 2);
            if (v7 == v12)
              goto LABEL_14;
          }
          for (j = 0; j != v7; ++j)
          {
            if (v8[j] != *(unsigned __int16 *)((char *)v11 + 2 * j + (_QWORD)v10))
            {
              v9 = (v6 - 2 - (char *)v10 - (uint64_t)v11) >> 1;
              v10 = (void **)((char *)v11 + (_QWORD)v10 + 2);
              if (v9 >= v7)
                goto LABEL_17;
              goto LABEL_14;
            }
          }
          if ((char *)v11 + (_QWORD)v10 == v6 || (void **)((char *)v4 - 2 - (char *)v10) == v11)
            goto LABEL_14;
          break;
        }
      }
LABEL_14:
      v3 += 24;
      if (v3 == unk_25472C0A0)
        goto LABEL_32;
    }
    v14 = 1;
    if ((v18 & 0x80) != 0)
      goto LABEL_33;
  }
  return v14;
}

void sub_20B9DFA54(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = 0;
  while (1)
  {
    if (*(char *)(v1 + v3 + 239) < 0)
      operator delete(*(void **)(v1 + v3 + 216));
    v3 -= 24;
    if (v3 == -240)
    {
      __cxa_guard_abort(&qword_25472C078);
      _Unwind_Resume(a1);
    }
  }
}

BOOL sub_20B9DFAC8(_BOOL8 result)
{
  const __CFArray *v1;
  unsigned __int16 **ValueAtIndex;
  unint64_t v3;
  unint64_t v4;
  unsigned __int16 **v5;

  if (result)
  {
    v1 = (const __CFArray *)result;
    if (CFArrayGetCount((CFArrayRef)result) == 28)
    {
      ValueAtIndex = (unsigned __int16 **)CFArrayGetValueAtIndex(v1, 0);
      if ((sub_20B9DE93C(*ValueAtIndex[3]) & 1) != 0)
      {
        return 1;
      }
      else
      {
        v3 = 0;
        do
        {
          v4 = v3;
          if (v3 == 27)
            break;
          ++v3;
          v5 = (unsigned __int16 **)CFArrayGetValueAtIndex(v1, v4 + 1);
        }
        while (!sub_20B9DE93C(*v5[3]));
        return v4 < 0x1B;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_20B9DFB60(uint64_t a1, uint64_t a2, unsigned __int16 *a3, uint64_t a4)
{
  uint64_t result;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int16 *i;

  if (!a2)
    return 0;
  result = sub_20B9DFC20(a1, a2);
  if ((_DWORD)result != 1)
  {
    v7 = result;
    sub_20B9DEB60((uint64_t)a3, a4);
    v9 = v8;
    v10 = a4 - v8;
    if (!v10)
      return v7 == 3;
    v11 = 2 * a4 - 2 * v9;
    for (i = a3; (unsigned __int16)(*i + 10332) <= 0xD45Bu && (unsigned __int16)(*i - 12644) < 0xFFCDu; ++i)
    {
      v11 -= 2;
      if (!v11)
        return v7 == 3;
    }
    return (sub_20B9DE9BC(a3, v10) & 1) == 0 && v7 == 3;
  }
  return result;
}

uint64_t sub_20B9DFC20(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  BOOL v11;
  unsigned int v13;

  if (a2)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = MEMORY[0x24BDAC740];
    do
    {
      v8 = *(unsigned __int16 *)(a1 + 2 * v4);
      if (v8 <= 0x7F)
        v9 = *(_DWORD *)(v7 + 4 * v8 + 60) & 0x8000;
      else
        v9 = __maskrune(v8, 0x8000uLL);
      if (v4)
        v10 = v9 != 0;
      else
        v10 = 0;
      v6 += v10;
      if (v9)
        v11 = v4 == 0;
      else
        v11 = 0;
      v5 |= v11;
      ++v4;
    }
    while (a2 != v4);
    if ((v5 & 1) != 0)
      goto LABEL_18;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  if (!v6)
    return 0;
LABEL_18:
  if (v6 != 0 || (v5 & 1) == 0)
    v13 = 3;
  else
    v13 = 2;
  if ((v5 & (v6 == a2 - 1)) != 0)
    return 1;
  else
    return v13;
}

_QWORD *sub_20B9DFD10@<X0>(unsigned __int16 *a1@<X0>, unint64_t a2@<X1>, unsigned __int16 *a3@<X2>, unint64_t a4@<X3>, unsigned __int16 *a5@<X8>)
{
  int v10;
  _QWORD *v11;
  void *v12;
  unint64_t v13;
  _QWORD *result;
  unint64_t v15;
  uint64_t v16;
  unsigned __int16 v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned __int16 *v22;
  _WORD *v23;
  __darwin_ct_rune_t v24;
  uint64_t v25;
  unint64_t v26;
  __darwin_ct_rune_t v27;
  __darwin_ct_rune_t v28;

  v10 = sub_20B9DFC20((uint64_t)a1, a2);
  if (v10 == 2)
  {
    if (a4)
    {
      v15 = 0;
      v16 = 2 * a4;
      while (1)
      {
        v17 = a3[v15 / 2];
        if ((unsigned __int16)(v17 + 10332) > 0xD45Bu || (unsigned __int16)(v17 - 12644) >= 0xFFCDu)
          break;
        v15 += 2;
        if (v16 == v15)
        {
          v18 = 0;
          v19 = MEMORY[0x24BDAC740];
          while (1)
          {
            v20 = a3[v18 / 2];
            if (v20 <= 0x7F ? *(_DWORD *)(v19 + 4 * v20 + 60) & 0x8000 : __maskrune(v20, 0x8000uLL))
              goto LABEL_4;
            v18 += 2;
            if (v16 == v18)
              goto LABEL_17;
          }
        }
      }
    }
LABEL_17:
    sub_20B877ED0(a5, a3, a4);
    if (*((char *)a5 + 23) >= 0)
      v22 = a5;
    else
      v22 = *(unsigned __int16 **)a5;
    result = (_QWORD *)__toupper(*v22);
    if (*((char *)a5 + 23) >= 0)
      v23 = a5;
    else
      v23 = *(_WORD **)a5;
    *v23 = (_WORD)result;
  }
  else
  {
    if (!v10 || (v10 & 1) == 0)
    {
LABEL_4:
      v11 = a5;
      v12 = a3;
      v13 = a4;
      return sub_20B877ED0(v11, v12, v13);
    }
    if (a2 == a4)
    {
      if (!a2)
        goto LABEL_32;
      v24 = __tolower(*a1);
      if (v24 == __tolower(*a3))
      {
        v25 = 1;
        do
        {
          v26 = v25;
          if (a2 == v25)
            break;
          v27 = __tolower(a1[v25]);
          v28 = __tolower(a3[v26]);
          v25 = v26 + 1;
        }
        while (v27 == v28);
        if (v26 >= a2)
        {
LABEL_32:
          v11 = a5;
          v12 = a1;
          v13 = a2;
          return sub_20B877ED0(v11, v12, v13);
        }
      }
    }
    return sub_20B87C9E0(a5, byte_20BA58EB0);
  }
  return result;
}

void sub_20B9DFED0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B9DFEEC(uint64_t *a1, int *a2, __int16 *a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t *v19;

  v4 = *a1;
  v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20B80CDD8();
  v9 = (uint64_t)(a1 + 2);
  v10 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3);
  if (2 * v10 > v6)
    v6 = 2 * v10;
  if (v10 >= 0x555555555555555)
    v11 = 0xAAAAAAAAAAAAAAALL;
  else
    v11 = v6;
  v19 = a1 + 2;
  if (v11)
    v12 = (char *)sub_20B828D70(v9, v11);
  else
    v12 = 0;
  v15 = v12;
  v16 = &v12[24 * v5];
  v17 = v16;
  v18 = &v12[24 * v11];
  sub_20B8AEE9C(v16, *a2, *a3);
  v17 = v16 + 24;
  sub_20B877F84(a1, &v15);
  v13 = a1[1];
  sub_20B83BC3C((uint64_t)&v15);
  return v13;
}

void sub_20B9DFFE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B83BC3C((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20B9DFFF8(uint64_t a1, int a2)
{
  int v3;
  unsigned __int16 ***v4;
  unsigned __int16 *v5;

  v3 = *(_DWORD *)(a1 + 24);
  if ((v3 - 2) >= 2)
  {
    return v3 == 1 && a2 == 111;
  }
  else if (a2 <= 122 && (v4 = *(unsigned __int16 ****)a1, (v5 = **v4) != 0))
  {
    return sub_20B9F17AC((uint64_t)v4, v5, a2) != 0;
  }
  else
  {
    return 0;
  }
}

void sub_20B9E005C(unsigned __int16 ****a1@<X0>, int a2@<W1>, unsigned __int16 ***a3@<X8>)
{
  unsigned __int16 **v6;
  _QWORD *v7;
  char *v8;
  unsigned __int16 *v9;
  unsigned __int16 *v10;
  unsigned __int16 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  unsigned __int16 **v17;
  char *v18;
  char *v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  unsigned __int16 **v24;
  uint64_t v25;
  unsigned __int16 **v26;
  unsigned __int16 **v27;
  char *v28;
  char *v29;
  unsigned __int16 *v30;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (*((_BYTE *)a1 + 48) && !a1[5] && sub_20B9DFFF8((uint64_t)a1, a2))
  {
    if (*((_DWORD *)a1 + 6) == 1)
    {
      v6 = 0;
      v7 = a3 + 2;
      v8 = "aeo";
      do
      {
        v9 = ***a1;
        if (v9)
        {
          v10 = sub_20B9F17AC((uint64_t)*a1, v9, *v8);
          if (v10)
          {
            v11 = v10;
            if ((unint64_t)v6 >= *v7)
            {
              v12 = v6 - *a3;
              if ((unint64_t)(v12 + 1) >> 61)
                sub_20B80CDD8();
              v13 = *v7 - (_QWORD)*a3;
              v14 = v13 >> 2;
              if (v13 >> 2 <= (unint64_t)(v12 + 1))
                v14 = v12 + 1;
              if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
                v15 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v15 = v14;
              if (v15)
                v16 = (char *)sub_20B800BE8((uint64_t)(a3 + 2), v15);
              else
                v16 = 0;
              v17 = (unsigned __int16 **)&v16[8 * v12];
              *v17 = v11;
              v6 = v17 + 1;
              v19 = (char *)*a3;
              v18 = (char *)a3[1];
              if (v18 != (char *)*a3)
              {
                do
                {
                  v20 = (unsigned __int16 *)*((_QWORD *)v18 - 1);
                  v18 -= 8;
                  *--v17 = v20;
                }
                while (v18 != v19);
                v18 = (char *)*a3;
              }
              *a3 = v17;
              a3[1] = v6;
              a3[2] = (unsigned __int16 **)&v16[8 * v15];
              if (v18)
                operator delete(v18);
            }
            else
            {
              *v6++ = v10;
            }
            a3[1] = v6;
          }
        }
        ++v8;
      }
      while (v8 != "");
    }
    else
    {
      v21 = ***a1;
      if (v21)
      {
        v22 = sub_20B9F17AC((uint64_t)*a1, v21, a2);
        if (v22)
        {
          v23 = v22;
          v24 = (unsigned __int16 **)sub_20B800BE8((uint64_t)(a3 + 2), 1uLL);
          v26 = &v24[v25];
          *v24 = v23;
          v27 = v24 + 1;
          v29 = (char *)*a3;
          v28 = (char *)a3[1];
          if (v28 != (char *)*a3)
          {
            do
            {
              v30 = (unsigned __int16 *)*((_QWORD *)v28 - 1);
              v28 -= 8;
              *--v24 = v30;
            }
            while (v28 != v29);
            v28 = (char *)*a3;
          }
          *a3 = v24;
          a3[1] = v27;
          a3[2] = v26;
          if (v28)
            operator delete(v28);
          a3[1] = v27;
        }
      }
    }
  }
}

void sub_20B9E023C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B9E0260(uint64_t a1@<X0>, int a2@<W1>, void **a3@<X8>)
{
  unsigned int v5;
  BOOL v6;
  char v7;
  BOOL v8;
  int v9;
  char v11;
  unsigned __int16 *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  int v20;
  unsigned __int16 ***v21;
  unsigned __int16 *v22;
  uint64_t v23;
  char v24;
  unsigned __int16 *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  int v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v5 = *(_DWORD *)(a1 + 8);
  if (a2 == 39
    || (a2 - 97) < 0x1Bu
    || (v5 <= 7 ? (v6 = ((1 << v5) & 0x8C) == 0) : (v6 = 1), !v6 && a2 == 59))
  {
    if (a2 == 59)
      v7 = 123;
    else
      v7 = a2;
    v8 = v5 > 7;
    v9 = (1 << v5) & 0x8C;
    if (v8 || v9 == 0)
      v11 = a2;
    else
      v11 = v7;
    if (*(_BYTE *)(a1 + 48))
    {
      v12 = *(unsigned __int16 **)(a1 + 40);
      if (v12)
      {
        sub_20B9E0620(a1, v11, v12, 0, a3);
      }
      else
      {
        v20 = *(_DWORD *)(a1 + 24);
        if (v20 == 1)
        {
          v33 = 0;
        }
        else
        {
          if (v20 == 3)
          {
            *(_BYTE *)(a1 + 56) = *(_BYTE *)(a1 + 32);
            *(_BYTE *)(a1 + 57) = v11;
            v21 = *(unsigned __int16 ****)a1;
            v22 = ***(unsigned __int16 ****)a1;
            if (v22)
            {
              v23 = 0;
              v24 = 1;
              do
              {
                v25 = sub_20B9F17AC((uint64_t)v21, v22, *(char *)(a1 + 56 + v23));
                v22 = v25;
                if ((v24 & 1) == 0)
                  break;
                v24 = 0;
                v23 = 1;
              }
              while (v25);
              if (v25)
              {
                v26 = (char *)sub_20B800BE8((uint64_t)(a3 + 2), 1uLL);
                v28 = &v26[8 * v27];
                *(_QWORD *)v26 = v22;
                v29 = v26 + 8;
                v31 = (char *)*a3;
                v30 = (char *)a3[1];
                if (v30 != *a3)
                {
                  do
                  {
                    v32 = *((_QWORD *)v30 - 1);
                    v30 -= 8;
                    *((_QWORD *)v26 - 1) = v32;
                    v26 -= 8;
                  }
                  while (v30 != v31);
                  v30 = (char *)*a3;
                }
                *a3 = v26;
                a3[1] = v29;
                a3[2] = v28;
                if (v30)
                  operator delete(v30);
                a3[1] = v29;
              }
            }
          }
          v33 = 1;
        }
        sub_20B9E0620(a1, v11, ***(unsigned __int16 ****)a1, v33, a3);
      }
      *(_BYTE *)(a1 + 32) = 0;
      *(_QWORD *)(a1 + 40) = 0;
      *(_BYTE *)(a1 + 48) = 0;
      v34 = *a3;
      if (*a3 == a3[1])
      {
        sub_20B9E0554(a1, v11);
        v35 = *(_QWORD *)(a1 + 40);
        if (v35)
        {
          v36 = (unint64_t)a3[2];
          if ((unint64_t)v34 >= v36)
          {
            v38 = v36 - (_QWORD)v34;
            v39 = (uint64_t)(v36 - (_QWORD)v34) >> 2;
            if (v39 <= 1)
              v39 = 1;
            if (v38 >= 0x7FFFFFFFFFFFFFF8)
              v40 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v40 = v39;
            v41 = (char *)sub_20B800BE8((uint64_t)(a3 + 2), v40);
            v43 = &v41[8 * v42];
            *(_QWORD *)v41 = *(_QWORD *)(a1 + 40);
            v37 = v41 + 8;
            v45 = (char *)*a3;
            v44 = (char *)a3[1];
            if (v44 != *a3)
            {
              do
              {
                v46 = *((_QWORD *)v44 - 1);
                v44 -= 8;
                *((_QWORD *)v41 - 1) = v46;
                v41 -= 8;
              }
              while (v44 != v45);
              v44 = (char *)*a3;
            }
            *a3 = v41;
            a3[1] = v37;
            a3[2] = v43;
            if (v44)
              operator delete(v44);
          }
          else
          {
            *v34 = v35;
            v37 = (char *)(v34 + 1);
          }
          a3[1] = v37;
        }
      }
    }
    else
    {
      sub_20B9E0554(a1, v11);
      if (*(_QWORD *)(a1 + 40))
      {
        v13 = (char *)sub_20B800BE8((uint64_t)(a3 + 2), 1uLL);
        v15 = &v13[8 * v14];
        *(_QWORD *)v13 = *(_QWORD *)(a1 + 40);
        v16 = v13 + 8;
        v18 = (char *)*a3;
        v17 = (char *)a3[1];
        if (v17 != *a3)
        {
          do
          {
            v19 = *((_QWORD *)v17 - 1);
            v17 -= 8;
            *((_QWORD *)v13 - 1) = v19;
            v13 -= 8;
          }
          while (v17 != v18);
          v17 = (char *)*a3;
        }
        *a3 = v13;
        a3[1] = v16;
        a3[2] = v15;
        if (v17)
          operator delete(v17);
        a3[1] = v16;
      }
    }
  }
  else
  {
    *(_BYTE *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_BYTE *)(a1 + 48) = 0;
  }
}

void sub_20B9E0538(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_20B9E0554(uint64_t a1, char a2)
{
  uint64_t v4;
  const char *v5;
  unsigned __int16 ***v6;
  unsigned __int16 *v7;
  size_t v8;
  BOOL v9;
  size_t v10;
  size_t v11;
  BOOL v12;
  _BOOL8 result;

  v4 = *(_QWORD *)(a1 + 16);
  if (*(_BYTE *)(v4 + ((4 * a2 + 124) & 0xFC)))
  {
    v5 = (const char *)*((_QWORD *)&off_24C4A03A0 + *(unsigned __int8 *)(v4 + ((4 * a2 + 124) & 0xFC)));
    v6 = *(unsigned __int16 ****)a1;
    v7 = ***(unsigned __int16 ****)a1;
    v8 = strlen(v5);
    if (v7)
      v9 = v8 == 0;
    else
      v9 = 1;
    if (!v9)
    {
      v10 = v8;
      v11 = 0;
      do
      {
        v7 = sub_20B9F17AC((uint64_t)v6, v7, v5[v11++]);
        if (v7)
          v12 = v11 >= v10;
        else
          v12 = 1;
      }
      while (!v12);
    }
    result = 1;
  }
  else
  {
    result = sub_20B9DFFF8(a1, a2);
    v7 = 0;
  }
  *(_BYTE *)(a1 + 32) = a2;
  *(_QWORD *)(a1 + 40) = v7;
  *(_BYTE *)(a1 + 48) = result;
  return result;
}

void sub_20B9E0620(uint64_t a1, char a2, unsigned __int16 *a3, int a4, void **a5)
{
  uint64_t v8;
  int v9;
  unsigned __int8 *v10;
  uint64_t v11;
  size_t v12;
  unsigned __int16 *v13;
  size_t v14;
  size_t v15;
  BOOL v16;
  unint64_t v17;
  unsigned __int16 **v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  unsigned __int16 **v25;
  char *v26;
  char *v27;
  unsigned __int16 *v28;
  uint64_t v29;

  if ((4 * a2 + 125) < (((4 * a2) ^ 0x80) & 0xFCu))
  {
    v29 = (uint64_t)(a5 + 2);
    v8 = (4 * a2 + 125);
    v9 = (4 * a2) ^ 0x80;
    do
    {
      if (!*(_BYTE *)(*(_QWORD *)(a1 + 16) + v8))
        break;
      v10 = (unsigned __int8 *)*((_QWORD *)&off_24C4A03A0 + *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + v8));
      if (!a4 || *(unsigned __int8 *)(a1 + 32) == *v10)
      {
        v11 = *(_QWORD *)a1;
        v12 = strlen(*((const char **)&off_24C4A03A0 + *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + v8)));
        v13 = a3;
        if (a3)
        {
          v14 = v12;
          v13 = a3;
          if (v12)
          {
            v15 = 0;
            v13 = a3;
            do
            {
              v13 = sub_20B9F17AC(v11, v13, (char)v10[v15++]);
              if (v13)
                v16 = v15 >= v14;
              else
                v16 = 1;
            }
            while (!v16);
          }
        }
        if (v13 && (v13[4] & 2) != 0)
        {
          v18 = (unsigned __int16 **)a5[1];
          v17 = (unint64_t)a5[2];
          if ((unint64_t)v18 >= v17)
          {
            v20 = ((char *)v18 - (_BYTE *)*a5) >> 3;
            if ((unint64_t)(v20 + 1) >> 61)
              sub_20B80CDD8();
            v21 = v17 - (_QWORD)*a5;
            v22 = v21 >> 2;
            if (v21 >> 2 <= (unint64_t)(v20 + 1))
              v22 = v20 + 1;
            if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
              v23 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v23 = v22;
            if (v23)
              v24 = (char *)sub_20B800BE8(v29, v23);
            else
              v24 = 0;
            v25 = (unsigned __int16 **)&v24[8 * v20];
            *v25 = v13;
            v19 = v25 + 1;
            v27 = (char *)*a5;
            v26 = (char *)a5[1];
            if (v26 != *a5)
            {
              do
              {
                v28 = (unsigned __int16 *)*((_QWORD *)v26 - 1);
                v26 -= 8;
                *--v25 = v28;
              }
              while (v26 != v27);
              v26 = (char *)*a5;
            }
            *a5 = v25;
            a5[1] = v19;
            a5[2] = &v24[8 * v23];
            if (v26)
              operator delete(v26);
          }
          else
          {
            *v18 = v13;
            v19 = v18 + 1;
          }
          a5[1] = v19;
        }
      }
      ++v8;
    }
    while (v9 != v8);
  }
}

void *sub_20B9E07E0()
{
  unsigned __int8 v0;
  unsigned __int16 __dst[414];
  uint64_t v3;

  v3 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25472D328);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25472D328))
  {
    memcpy(__dst, &unk_20BA58FF0, sizeof(__dst));
    sub_20B886294((uint64_t)&unk_25472D300, __dst, 414);
    __cxa_atexit((void (*)(void *))sub_20B8840E0, &unk_25472D300, &dword_20B7F7000);
    __cxa_guard_release(&qword_25472D328);
  }
  return &unk_25472D300;
}

void sub_20B9E08A8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472D328);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9E08C0(unsigned int a1, int a2)
{
  unsigned __int8 v3;
  __int128 *v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  __guard *v7;
  unsigned int v8;

  if (a1 == 5000)
    return 0;
  if (!a2)
  {
    v6 = atomic_load((unsigned __int8 *)&qword_25472D368);
    if ((v6 & 1) != 0)
    {
      v4 = &xmmword_25472D350;
      return *(_QWORD *)(*(_QWORD *)v4 + 8 * a1);
    }
    v8 = a1;
    if (!__cxa_guard_acquire(&qword_25472D368))
    {
      v4 = &xmmword_25472D350;
      goto LABEL_20;
    }
    sub_20B9E0C14();
    v7 = &qword_25472D368;
    v4 = &xmmword_25472D350;
    goto LABEL_19;
  }
  if (a2 == 2)
  {
    v5 = atomic_load((unsigned __int8 *)&qword_25472D388);
    if ((v5 & 1) != 0)
    {
      v4 = &xmmword_25472D370;
      return *(_QWORD *)(*(_QWORD *)v4 + 8 * a1);
    }
    v8 = a1;
    if (!__cxa_guard_acquire(&qword_25472D388))
    {
      v4 = &xmmword_25472D370;
      goto LABEL_20;
    }
    sub_20B9E0CFC();
    v7 = &qword_25472D388;
    v4 = &xmmword_25472D370;
    goto LABEL_19;
  }
  if (a2 != 1)
    return 0;
  v3 = atomic_load((unsigned __int8 *)&qword_25472D348);
  if ((v3 & 1) == 0)
  {
    v8 = a1;
    if (!__cxa_guard_acquire(&qword_25472D348))
    {
      v4 = (__int128 *)qword_25472D330;
      goto LABEL_20;
    }
    sub_20B9E0A64();
    v7 = &qword_25472D348;
    v4 = (__int128 *)qword_25472D330;
LABEL_19:
    __cxa_atexit((void (*)(void *))sub_20B9E0B24, v4, &dword_20B7F7000);
    __cxa_guard_release(v7);
LABEL_20:
    a1 = v8;
    return *(_QWORD *)(*(_QWORD *)v4 + 8 * a1);
  }
  v4 = (__int128 *)qword_25472D330;
  return *(_QWORD *)(*(_QWORD *)v4 + 8 * a1);
}

void sub_20B9E0A2C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472D368);
  _Unwind_Resume(a1);
}

void sub_20B9E0A64()
{
  uint64_t v0;
  uint64_t v1;
  const __CFAllocator *v2;
  const __CFAllocator *v3;
  CFIndex *v4;
  uint64_t v5;
  CFStringRef v6;

  v0 = 2059;
  sub_20B9E0B58(qword_25472D330, 0x80BuLL);
  v1 = 0;
  v2 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v3 = (const __CFAllocator *)*MEMORY[0x24BDBD258];
  v4 = (CFIndex *)&unk_24C4A65B0;
  do
  {
    v5 = qword_25472D330[0];
    v6 = CFStringCreateWithCharactersNoCopy(v2, (const UniChar *)*(v4 - 1), *v4, v3);
    v4 += 2;
    sub_20B87E150((const void **)(v5 + v1), v6);
    v1 += 8;
    --v0;
  }
  while (v0);
}

void sub_20B9E0B0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B8E6798((void ***)va);
  _Unwind_Resume(a1);
}

void **sub_20B9E0B24(void **a1)
{
  void **v3;

  v3 = a1;
  sub_20B8E6798(&v3);
  return a1;
}

_QWORD *sub_20B9E0B58(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20B9E0BD4(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_20B9E0BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20B8E6798(&a9);
  _Unwind_Resume(a1);
}

char *sub_20B9E0BD4(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    sub_20B88B6B4();
  result = (char *)sub_20B800BE8((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void sub_20B9E0C14()
{
  uint64_t v0;
  uint64_t v1;
  const __CFAllocator *v2;
  const __CFAllocator *v3;
  uint64_t v4;
  CFStringRef v5;
  __int128 v6;
  uint64_t v7;
  void **v8;

  sub_20B9E0B58(&v6, 0x21EuLL);
  v0 = 0;
  v1 = 0;
  v2 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v3 = (const __CFAllocator *)*MEMORY[0x24BDBD258];
  do
  {
    v4 = v6;
    v5 = CFStringCreateWithCStringNoCopy(v2, (&off_24C4A0588)[v1], 0x8000100u, v3);
    sub_20B87E150((const void **)(v4 + v0), v5);
    v1 += 2;
    v0 += 8;
  }
  while (v1 != 1084);
  xmmword_25472D350 = v6;
  qword_25472D360 = v7;
  v7 = 0;
  v6 = 0uLL;
  v8 = (void **)&v6;
  sub_20B8E6798(&v8);
}

void sub_20B9E0CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_20B8E6798(&a12);
  _Unwind_Resume(a1);
}

void sub_20B9E0CFC()
{
  uint64_t v0;
  uint64_t v1;
  const __CFAllocator *v2;
  const __CFAllocator *v3;
  uint64_t v4;
  CFStringRef v5;
  __int128 v6;
  uint64_t v7;
  void **v8;

  sub_20B9E0B58(&v6, 0x3E4uLL);
  v0 = 0;
  v1 = 0;
  v2 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v3 = (const __CFAllocator *)*MEMORY[0x24BDBD258];
  do
  {
    v4 = v6;
    v5 = CFStringCreateWithCStringNoCopy(v2, (&off_24C4A2768)[v1], 0x8000100u, v3);
    sub_20B87E150((const void **)(v4 + v0), v5);
    v1 += 2;
    v0 += 8;
  }
  while (v1 != 1992);
  xmmword_25472D370 = v6;
  qword_25472D380 = v7;
  v7 = 0;
  v6 = 0uLL;
  v8 = (void **)&v6;
  sub_20B8E6798(&v8);
}

void sub_20B9E0DC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_20B8E6798(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9E0DE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  int8x8_t prime;
  int v11;
  uint64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  _QWORD *v20;
  uint64_t i;
  const char *v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  uint8x8_t v28;
  void **v29;
  _QWORD *v30;
  unint64_t v31;
  float v32;
  float v33;
  _BOOL8 v34;
  unint64_t v35;
  unint64_t v36;
  void *v37;
  void *v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  uint8x8_t v42;
  unint64_t v43;
  uint8x8_t v44;
  uint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v69;
  _QWORD v72[3];
  _QWORD *v73;
  uint64_t v74;

  v74 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &off_24C467F60;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 88);
  v11 = *(_DWORD *)(a2 + 24);
  if ((v11 & 0x4000) != 0)
  {
    v12 = 1;
  }
  else if ((v11 & 0x10000) != 0)
  {
    v12 = 2;
  }
  else if ((v11 & 0x400000) != 0)
  {
    v12 = 4;
  }
  else if (*(_DWORD *)a2 == 5)
  {
    v12 = 3;
  }
  else if (*(_DWORD *)a2 == 13)
  {
    v12 = 5;
  }
  else
  {
    v12 = 0;
  }
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 40) = v12;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_DWORD *)(a1 + 432) = 1065353216;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_BYTE *)(a1 + 472) = 0;
  *(_QWORD *)(a1 + 480) = 0xFFFFLL;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_WORD *)(a1 + 536) = 0;
  sub_20B9E1798((_QWORD *)v12, (_QWORD *)(a1 + 544));
  *(_DWORD *)(a1 + 552) = 0;
  *(_BYTE *)(a1 + 556) = 0;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_QWORD *)(a1 + 608) = a3;
  v13 = (void **)(a1 + 640);
  *(_QWORD *)(a1 + 664) = 0;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_DWORD *)(a1 + 672) = 1065353216;
  sub_20B89EC5C((_QWORD *)(a1 + 680), 0x14uLL);
  *(_QWORD *)(a1 + 704) = 0x3727C5AC3FC00000;
  *(_QWORD *)(a1 + 712) = 2;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_DWORD *)(a1 + 752) = 1065353216;
  *(_QWORD *)(a1 + 760) = 0;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_QWORD *)(a1 + 784) = -1;
  *(_QWORD *)(a1 + 792) = 0;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_BYTE *)(a1 + 816) = a6;
  *(_BYTE *)(a1 + 840) = 0;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_QWORD *)(a1 + 848) = a4;
  *(_QWORD *)(a1 + 856) = a5;
  *(_QWORD *)(a1 + 864) = 0;
  *(_QWORD *)(a1 + 72) = operator new[]();
  v14 = operator new();
  v69 = a4;
  *(_QWORD *)v14 = *(_QWORD *)(a1 + 32);
  *(_DWORD *)(v14 + 8) = 0;
  *(_QWORD *)(v14 + 16) = 0;
  *(_DWORD *)(v14 + 24) = 0;
  *(_BYTE *)(v14 + 32) = 0;
  *(_QWORD *)(v14 + 40) = 0;
  *(_BYTE *)(v14 + 48) = 0;
  v15 = *(_QWORD *)(a1 + 488);
  *(_QWORD *)(a1 + 488) = v14;
  if (v15)
    MEMORY[0x20BD39CB0](v15, 0x1070C4004AA1E42);
  if (*(_DWORD *)(a1 + 40) == 5)
    goto LABEL_15;
  v20 = (_QWORD *)(a1 + 656);
  for (i = 496; i != 542; ++i)
  {
    v22 = (&off_24C4A0588)[2 * i];
    v23 = strlen(v22);
    if (v23)
    {
      v24 = 0;
      do
      {
        v25 = *v22++;
        v24 = (1025 * (v24 + v25)) ^ ((1025 * (v24 + v25)) >> 6);
        --v23;
      }
      while (v23);
      LODWORD(v23) = 9 * v24;
    }
    v26 = 32769 * (v23 ^ (v23 >> 11));
    v27 = *(_QWORD *)(a1 + 648);
    if (v27)
    {
      v28 = (uint8x8_t)vcnt_s8((int8x8_t)v27);
      v28.i16[0] = vaddlv_u8(v28);
      if (v28.u32[0] > 1uLL)
      {
        prime = (int8x8_t)(32769 * (v23 ^ (v23 >> 11)));
        if (v27 <= v26)
          prime = (int8x8_t)(v26 % v27);
      }
      else
      {
        prime = (int8x8_t)(((_DWORD)v27 - 1) & v26);
      }
      v29 = (void **)*((_QWORD *)*v13 + *(_QWORD *)&prime);
      if (v29)
      {
        v30 = *v29;
        if (*v29)
        {
          do
          {
            v31 = v30[1];
            if (v31 == v26)
            {
              if (*((_DWORD *)v30 + 4) == (_DWORD)v26)
                goto LABEL_97;
            }
            else
            {
              if (v28.u32[0] > 1uLL)
              {
                if (v31 >= v27)
                  v31 %= v27;
              }
              else
              {
                v31 &= v27 - 1;
              }
              if (v31 != *(_QWORD *)&prime)
                break;
            }
            v30 = (_QWORD *)*v30;
          }
          while (v30);
        }
      }
    }
    v30 = operator new(0x18uLL);
    *v30 = 0;
    v30[1] = v26;
    *((_DWORD *)v30 + 4) = v26;
    *((_WORD *)v30 + 10) = 0;
    v32 = (float)(unint64_t)(*(_QWORD *)(a1 + 664) + 1);
    v33 = *(float *)(a1 + 672);
    if (v27 && (float)(v33 * (float)v27) >= v32)
    {
      v26 = (unint64_t)prime;
      goto LABEL_87;
    }
    v34 = (v27 & (v27 - 1)) != 0;
    if (v27 < 3)
      v34 = 1;
    v35 = v34 | (2 * v27);
    v36 = vcvtps_u32_f32(v32 / v33);
    if (v35 <= v36)
      prime = (int8x8_t)v36;
    else
      prime = (int8x8_t)v35;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v27 = *(_QWORD *)(a1 + 648);
    }
    if (*(_QWORD *)&prime <= v27)
    {
      if (*(_QWORD *)&prime >= v27)
        goto LABEL_83;
      v43 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 664) / *(float *)(a1 + 672));
      if (v27 < 3 || (v44 = (uint8x8_t)vcnt_s8((int8x8_t)v27), v44.i16[0] = vaddlv_u8(v44), v44.u32[0] > 1uLL))
      {
        v43 = std::__next_prime(v43);
      }
      else
      {
        v45 = 1 << -(char)__clz(v43 - 1);
        if (v43 >= 2)
          v43 = v45;
      }
      if (*(_QWORD *)&prime <= v43)
        prime = (int8x8_t)v43;
      if (*(_QWORD *)&prime >= v27)
      {
        v27 = *(_QWORD *)(a1 + 648);
        goto LABEL_83;
      }
      if (!*(_QWORD *)&prime)
      {
        v51 = *v13;
        *v13 = 0;
        if (v51)
          operator delete(v51);
        v27 = 0;
        *(_QWORD *)(a1 + 648) = 0;
        goto LABEL_83;
      }
    }
    if (*(_QWORD *)&prime >> 61)
      sub_20B800BC0();
    v37 = operator new(8 * *(_QWORD *)&prime);
    v38 = *v13;
    *v13 = v37;
    if (v38)
      operator delete(v38);
    v39 = 0;
    *(int8x8_t *)(a1 + 648) = prime;
    do
      *((_QWORD *)*v13 + v39++) = 0;
    while (*(_QWORD *)&prime != v39);
    v40 = (_QWORD *)*v20;
    if (*v20)
    {
      v41 = v40[1];
      v42 = (uint8x8_t)vcnt_s8(prime);
      v42.i16[0] = vaddlv_u8(v42);
      if (v42.u32[0] > 1uLL)
      {
        if (v41 >= *(_QWORD *)&prime)
          v41 %= *(_QWORD *)&prime;
      }
      else
      {
        v41 &= *(_QWORD *)&prime - 1;
      }
      *((_QWORD *)*v13 + v41) = v20;
      v46 = (_QWORD *)*v40;
      if (*v40)
      {
        do
        {
          v47 = v46[1];
          if (v42.u32[0] > 1uLL)
          {
            if (v47 >= *(_QWORD *)&prime)
              v47 %= *(_QWORD *)&prime;
          }
          else
          {
            v47 &= *(_QWORD *)&prime - 1;
          }
          if (v47 != v41)
          {
            if (!*((_QWORD *)*v13 + v47))
            {
              *((_QWORD *)*v13 + v47) = v40;
              goto LABEL_79;
            }
            *v40 = *v46;
            *v46 = **((_QWORD **)*v13 + v47);
            **((_QWORD **)*v13 + v47) = v46;
            v46 = v40;
          }
          v47 = v41;
LABEL_79:
          v40 = v46;
          v46 = (_QWORD *)*v46;
          v41 = v47;
        }
        while (v46);
      }
    }
    v27 = (unint64_t)prime;
LABEL_83:
    if ((v27 & (v27 - 1)) != 0)
    {
      if (v27 <= v26)
        v26 %= v27;
    }
    else
    {
      v26 = ((_DWORD)v27 - 1) & v26;
    }
LABEL_87:
    v48 = *v13;
    v49 = (_QWORD *)*((_QWORD *)*v13 + v26);
    if (v49)
    {
      *v30 = *v49;
LABEL_95:
      *v49 = v30;
      goto LABEL_96;
    }
    *v30 = *v20;
    *v20 = v30;
    v48[v26] = v20;
    if (*v30)
    {
      v50 = *(_QWORD *)(*v30 + 8);
      if ((v27 & (v27 - 1)) != 0)
      {
        if (v50 >= v27)
          v50 %= v27;
      }
      else
      {
        v50 &= v27 - 1;
      }
      v49 = (char *)*v13 + 8 * v50;
      goto LABEL_95;
    }
LABEL_96:
    ++*(_QWORD *)(a1 + 664);
LABEL_97:
    *((_WORD *)v30 + 10) = i;
  }
LABEL_15:
  if (*(_QWORD *)(a1 + 848))
  {
    v16 = *(_DWORD *)(a1 + 40);
    if (v16)
    {
      v17 = *(_QWORD *)(a1 + 864);
      if (v17)
      {
LABEL_119:
        *(_BYTE *)(a1 + 840) = v17 != 0;
        return a1;
      }
      v18 = v16 - 3;
      if (v18 > 2)
        v19 = 0;
      else
        v19 = dword_20BA5F7A8[v18];
      v17 = operator new();
      v55 = *(_QWORD *)(a1 + 32);
      v56 = *(_QWORD *)(a1 + 848);
      v57 = *(_QWORD *)(a1 + 856);
      v72[0] = &off_24C46A500;
      v72[1] = a1;
      v73 = v72;
      sub_20B956D94(v17, v55, v56, v19, v57, (uint64_t)v72);
      v65 = v73;
      if (v73 == v72)
      {
        v66 = 4;
        v65 = v72;
      }
      else
      {
        if (!v73)
          goto LABEL_117;
        v66 = 5;
      }
      (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*v65 + 8 * v66))(v65, v58, v59, v60, v61, v62, v63, v64);
LABEL_117:
      v67 = *(_QWORD *)(a1 + 864);
      *(_QWORD *)(a1 + 864) = v17;
      if (v67)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
        v17 = *(_QWORD *)(a1 + 864);
      }
      goto LABEL_119;
    }
    v52 = operator new();
    sub_20B94F15C(v52, a2, v69, a5);
    sub_20B9EE1B4((uint64_t *)(a1 + 824), v52);
    if (*(_BYTE *)(a1 + 816))
    {
      v53 = operator new();
      sub_20B906314(v53, a2, *(_QWORD *)(a1 + 848), a5);
      v54 = *(_QWORD *)(a1 + 832);
      *(_QWORD *)(a1 + 832) = v53;
      if (v54)
        (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
    }
  }
  return a1;
}

void sub_20B9E15CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void **a10, id ***a11, uint64_t *a12, void **a13, void **a14, uint64_t a15, uint64_t *a16, uint64_t a17, uint64_t a18, void **a19)
{
  uint64_t v19;
  uint64_t v20;
  void **v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void **v28;
  void *v29;
  void *v30;
  uint64_t v31;
  void *v32;
  void *v33;

  MEMORY[0x20BD39CB0](v22, 0x10F1C406F3FD563);
  v24 = *(_QWORD *)(v19 + 864);
  *(_QWORD *)(v19 + 864) = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  v25 = *(_QWORD *)(v19 + 832);
  *(_QWORD *)(v19 + 832) = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  sub_20B9EE1B4(a16, 0);
  a19 = (void **)(v19 + 760);
  sub_20B83B400(&a19);
  sub_20B84055C(v19 + 720);
  v26 = *a9;
  if (*a9)
  {
    *(_QWORD *)(v19 + 688) = v26;
    operator delete(v26);
  }
  sub_20B84055C(v20);
  v27 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v19 + 624) = v27;
    operator delete(v27);
  }
  v28 = (void **)(v19 + 560);
  v29 = *(void **)(v19 + 584);
  if (v29)
  {
    *(_QWORD *)(v19 + 592) = v29;
    operator delete(v29);
  }
  v30 = *v28;
  if (*v28)
  {
    *(_QWORD *)(v19 + 568) = v30;
    operator delete(v30);
  }
  sub_20B889DF0(a11, 0);
  v31 = *a12;
  *a12 = 0;
  if (v31)
    MEMORY[0x20BD39CB0](v31, 0x1070C4004AA1E42);
  v32 = *a13;
  if (*a13)
  {
    *(_QWORD *)(v19 + 448) = v32;
    operator delete(v32);
  }
  sub_20B9EE138((uint64_t)(v21 + 44));
  v33 = *v21;
  if (*v21)
  {
    *(_QWORD *)(v19 + 56) = v33;
    operator delete(v33);
  }
  a19 = a14;
  sub_20B882394(&a19);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B9E1798@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;

  v3 = 0;
  switch((int)result)
  {
    case 0:
    case 2:
      v3 = (_QWORD *)operator new();
      result = sub_20BA305B8(v3, 0, 0.7);
      break;
    case 3:
      v3 = (_QWORD *)operator new();
      result = sub_20BA305B8(v3, 1, 0.7);
      break;
    case 5:
      v3 = (_QWORD *)operator new();
      result = sub_20BA305B8(v3, 2, 0.7);
      break;
    default:
      break;
  }
  *a2 = v3;
  return result;
}

void sub_20B9E186C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9E1898(uint64_t a1)
{
  const void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void **v14;

  *(_QWORD *)a1 = &off_24C467F60;
  sub_20B9E1A10(a1, 0, 1);
  v2 = *(const void **)(a1 + 464);
  if (v2)
    CFRelease(v2);
  sub_20B9EE1F0(a1 + 400);
  v3 = *(_QWORD *)(a1 + 72);
  if (v3)
    MEMORY[0x20BD39C80](v3, 0x1000C8077774924);
  v4 = *(_QWORD *)(a1 + 864);
  *(_QWORD *)(a1 + 864) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(_QWORD *)(a1 + 832);
  *(_QWORD *)(a1 + 832) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  sub_20B9EE1B4((uint64_t *)(a1 + 824), 0);
  v14 = (void **)(a1 + 760);
  sub_20B83B400(&v14);
  sub_20B84055C(a1 + 720);
  v6 = *(void **)(a1 + 680);
  if (v6)
  {
    *(_QWORD *)(a1 + 688) = v6;
    operator delete(v6);
  }
  sub_20B84055C(a1 + 640);
  v7 = *(void **)(a1 + 616);
  if (v7)
  {
    *(_QWORD *)(a1 + 624) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 584);
  if (v8)
  {
    *(_QWORD *)(a1 + 592) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(a1 + 560);
  if (v9)
  {
    *(_QWORD *)(a1 + 568) = v9;
    operator delete(v9);
  }
  sub_20B889DF0((id ***)(a1 + 544), 0);
  v10 = *(_QWORD *)(a1 + 488);
  *(_QWORD *)(a1 + 488) = 0;
  if (v10)
    MEMORY[0x20BD39CB0](v10, 0x1070C4004AA1E42);
  v11 = *(void **)(a1 + 440);
  if (v11)
  {
    *(_QWORD *)(a1 + 448) = v11;
    operator delete(v11);
  }
  sub_20B9EE138(a1 + 400);
  v12 = *(void **)(a1 + 48);
  if (v12)
  {
    *(_QWORD *)(a1 + 56) = v12;
    operator delete(v12);
  }
  v14 = (void **)(a1 + 8);
  sub_20B882394(&v14);
  return a1;
}

void sub_20B9E1A10(uint64_t a1, unint64_t a2, int a3)
{
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  void ***v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t i;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;

  if (a2 && *(_QWORD *)(a1 + 800) <= a2)
  {
    v7 = *(_QWORD **)(a1 + 8);
    v6 = *(_QWORD **)(a1 + 16);
    v8 = v6 - v7;
    if (v8 >= a2)
    {
      if (v8 > a2)
      {
        v9 = &v7[a2];
        while (v6 != v9)
        {
          v11 = *--v6;
          v10 = v11;
          *v6 = 0;
          if (v11)
            (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
        }
        *(_QWORD *)(a1 + 16) = v9;
      }
      sub_20B87C6B4(a1 + 48, a2);
      *(_QWORD *)(a1 + 496) = a2;
      goto LABEL_16;
    }
  }
  else
  {
    v7 = *(_QWORD **)(a1 + 8);
    v6 = *(_QWORD **)(a1 + 16);
  }
  while (v6 != v7)
  {
    v13 = *--v6;
    v12 = v13;
    *v6 = 0;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 568) = *(_QWORD *)(a1 + 560);
  *(_QWORD *)(a1 + 592) = *(_QWORD *)(a1 + 584);
  *(_QWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 800) = 0;
LABEL_16:
  *(_QWORD *)(a1 + 808) = 0;
  *(_QWORD *)(a1 + 480) = 0xFFFFLL;
  v25 = a1 + 80;
  v26 = 0;
  sub_20B9EE244((uint64_t)&v25);
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 520) = 0;
  *(_QWORD *)(a1 + 528) &= 0x8000000000000000;
  v16 = *(_QWORD *)(a1 + 488);
  *(_BYTE *)(v16 + 32) = 0;
  *(_QWORD *)(v16 + 40) = 0;
  *(_BYTE *)(v16 + 48) = 0;
  *(_DWORD *)(a1 + 552) = 0;
  *(_BYTE *)(a1 + 556) = 0;
  *(_BYTE *)(a1 + 537) = 0;
  v17 = *(void ****)(a1 + 544);
  if (v17)
    objc_msgSend_reset(**v17, v14, v15);
  if (*(_QWORD *)(a1 + 744))
  {
    v18 = *(_QWORD **)(a1 + 736);
    if (v18)
    {
      do
      {
        v19 = (_QWORD *)*v18;
        operator delete(v18);
        v18 = v19;
      }
      while (v19);
    }
    *(_QWORD *)(a1 + 736) = 0;
    v20 = *(_QWORD *)(a1 + 728);
    if (v20)
    {
      for (i = 0; i != v20; ++i)
        *(_QWORD *)(*(_QWORD *)(a1 + 720) + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 744) = 0;
  }
  sub_20B83B440((uint64_t *)(a1 + 760));
  if (a3)
  {
    if (!a2)
      *(_OWORD *)(a1 + 784) = xmmword_20BA3AC80;
    v22 = *(_QWORD *)(a1 + 824);
    if (v22)
    {
      sub_20B828E74((uint64_t *)(v22 + 144));
      *(_DWORD *)(v22 + 192) = 0;
      sub_20B882F18((uint64_t *)v22);
    }
    v23 = *(_QWORD *)(a1 + 832);
    if (v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
    v24 = *(_QWORD *)(a1 + 864);
    if (v24)
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 16))(v24);
  }
}

void sub_20B9E1C24(uint64_t a1)
{
  sub_20B9E1898(a1);
  JUMPOUT(0x20BD39CB0);
}

id ***sub_20B9E1C48(id ***result, _DWORD *a2, id *a3)
{
  id ***v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  float v9;
  int v10;
  id **v11;
  unsigned int v12;
  id *v13;
  id **v14;
  id **v15;
  id **v16;
  id **v17;

  v5 = result;
  v6 = a2[6];
  if ((v6 & 0x4000) != 0)
  {
    v8 = 1;
  }
  else if ((v6 & 0x10000) != 0)
  {
    v8 = 2;
  }
  else if ((v6 & 0x400000) != 0)
  {
    v8 = 4;
  }
  else
  {
    if (*a2 == 13)
      v7 = 5;
    else
      v7 = 0;
    if (*a2 == 5)
      v8 = 3;
    else
      v8 = v7;
  }
  if (*((_DWORD *)result + 10) != (_DWORD)v8)
  {
    sub_20B9E1A10((uint64_t)result, 0, 1);
    *((_DWORD *)v5 + 10) = v8;
    sub_20B9E1798((_QWORD *)v8, &v17);
    result = sub_20B889DF0(v5 + 68, v17);
    v9 = 0.8;
    if ((*((_DWORD *)v5 + 10) - 3) >= 2)
      v9 = 1.5;
    *((float *)v5 + 176) = v9;
  }
  if (!*((_BYTE *)v5 + 816))
  {
    v10 = a2[7];
    *((_BYTE *)v5 + 472) = (a2[6] & 0x400) != 0;
    v11 = v5[61];
    if (*((_DWORD *)v11 + 2) != v10)
    {
      *((_DWORD *)v11 + 2) = v10;
      v12 = v10 - 1;
      if (v10)
        v13 = (id *)((char *)&unk_254729670 + 108 * (int)v12);
      else
        v13 = 0;
      v11[2] = v13;
      if (v12 <= 6)
        *((_DWORD *)v11 + 6) = dword_20BA5F780[v12];
      *((_BYTE *)v11 + 32) = 0;
      v11[5] = 0;
      *((_BYTE *)v11 + 48) = 0;
    }
  }
  v14 = v5[108];
  if (v14)
    v14[18] = a3;
  v15 = v5[103];
  if (v15)
    v15[16] = a3;
  v16 = v5[104];
  if (v16)
    v16[16] = a3;
  return result;
}

uint64_t sub_20B9E1DA8(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v3;

  if ((a2 & 0x80000000) != 0 || a2 >= (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3))
    goto LABEL_7;
  LODWORD(v3) = *(unsigned __int16 *)(*(_QWORD *)(a1 + 48) + 2 * a2);
  if (*(_DWORD *)(a1 + 40) == 1 && (unsigned __int16)(v3 - 10123) <= 7u)
  {
    v3 = (v3 - 10123);
    if (dword_20BA5F254[v3] > a3)
    {
      LOWORD(v3) = aAdgjmptwn7seaw[v3] + (_WORD)a3;
      return (unsigned __int16)v3;
    }
LABEL_7:
    LOWORD(v3) = -1;
    return (unsigned __int16)v3;
  }
  if (a3 >= 1)
    LOWORD(v3) = -1;
  return (unsigned __int16)v3;
}

_QWORD *sub_20B9E1E2C(uint64_t a1, unsigned int a2, unsigned int *a3, _QWORD *a4, uint64_t a5, int a6)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v13;
  void **v14;
  void *v15;
  _BYTE *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  int v21;
  void *v22;
  _QWORD *v23;
  uint64_t v24;
  void **p_p;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  _BOOL4 v42;
  unsigned int v43;
  unsigned int v44;
  char v45;
  BOOL v46;
  int v48;
  char v50;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unsigned int v55;
  uint64_t v56;
  _BYTE *v57;
  unint64_t v58;
  uint64_t v59;
  _BYTE *v61;
  _BYTE *v62;
  void **v63;
  unint64_t v64;
  uint64_t v65;
  int v66;
  void *v68;
  unint64_t v69;
  _BYTE *v70;
  _BYTE *v71;
  void *__p;
  _BYTE *v73;
  void *v74[3];
  void *v75;
  void *v76;

  if ((a2 & 0x80000000) != 0)
    return 0;
  v8 = a2;
  v9 = *(_QWORD *)(a1 + 8);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 16) - v9) >> 3))
    return 0;
  v13 = *(_QWORD *)(v9 + 8 * a2);
  v14 = &v75;
  sub_20B9E2478(&v75, a1, v13, 1, 0);
  sub_20B9E2478(v74, a1, v13, 0, 0);
  v15 = v76;
  v68 = v75;
  if (v75 == v76)
    v14 = v74;
  v16 = v74[1];
  if (v75 != v76)
    v16 = v76;
  v17 = *v14;
  v18 = v16 - (_BYTE *)*v14;
  v69 = v18 >> 3;
  v65 = v13;
  v66 = a6;
  if (*(_DWORD *)(a1 + 40) != 1)
  {
    sub_20B9E2478(&__p, a1, v13, 1, 1);
    sub_20B9E2478(&v70, a1, v13, 0, 1);
    v62 = __p;
    v24 = v69 + ((v73 - (_BYTE *)__p) >> 3);
    v61 = v70;
    if (a6)
      p_p = 0;
    else
      p_p = (void **)&v70;
    if (v24)
      v26 = 1;
    else
      v26 = a6;
    if (v24)
      p_p = &__p;
    if (!v26)
      v24 = (v71 - v70) >> 3;
    v63 = p_p;
    v64 = v24;
    if (v26)
      v27 = (v73 - (_BYTE *)__p) >> 3;
    else
      v27 = (v71 - v70) >> 3;
    if (a4)
    {
      v28 = v27;
      if ((*(unsigned int (**)(_QWORD *))(*a4 + 64))(a4) == 4)
      {
        v29 = *a3;
        if ((v29 & 0x80000000) == 0 && v64 > v29)
        {
          v23 = (_QWORD *)a4[16];
          if (v23)
          {
            v30 = v64;
            *a3 = v64;
LABEL_99:
            v57 = v62;
            if (v61)
            {
              v71 = v61;
              operator delete(v61);
              v57 = __p;
            }
            v22 = v68;
            if (v57)
            {
              v73 = v57;
              operator delete(v57);
            }
            v21 = v30;
            goto LABEL_109;
          }
        }
      }
      v31 = *(_DWORD *)(v13 + 168);
      v32 = *(_QWORD *)(a1 + 8);
      v33 = (*(_QWORD *)(a1 + 16) - v32) >> 3;
      if (v33 <= v8)
      {
        v36 = 0;
        v27 = v28;
        if (!a5)
          goto LABEL_56;
      }
      else
      {
        v34 = a2 + 1;
        v27 = v28;
        if (v33 <= v34 || (v35 = *(_DWORD *)(*(_QWORD *)(v32 + 8 * v8) + 168), (v35 - 1) > 1))
        {
          v36 = 0;
          if (!a5)
            goto LABEL_56;
        }
        else
        {
          v36 = v35 == *(_DWORD *)(*(_QWORD *)(v32 + 8 * v34) + 168);
          if (!a5)
            goto LABEL_56;
        }
      }
    }
    else
    {
      v36 = 0;
      v31 = *(_DWORD *)(v13 + 168);
      if (!a5)
        goto LABEL_56;
    }
    v38 = *(_QWORD *)(a1 + 8);
    v39 = (*(_QWORD *)(a1 + 16) - v38) >> 3;
    if (v39 > v8)
    {
      v40 = a2 + 2;
      if (v39 > v40)
      {
        v41 = *(_DWORD *)(*(_QWORD *)(v38 + 8 * v8) + 168);
        if ((v41 - 1) <= 1)
        {
          v42 = v41 == *(_DWORD *)(*(_QWORD *)(v38 + 8 * v40) + 168);
LABEL_57:
          v43 = v31 - 3;
          v44 = *a3;
          if ((*a3 & 0x80000000) != 0)
          {
LABEL_84:
            v23 = 0;
LABEL_85:
            if (v63 && v43 <= 0xFFFFFFFD)
            {
              v30 = v64;
              if (!v23)
              {
                v52 = (int)*a3;
                if (v64 <= v52)
                  v53 = (int)*a3;
                else
                  v53 = v64;
                if (v64 <= v52)
                {
LABEL_97:
                  v23 = 0;
                }
                else
                {
                  v54 = v53 - v52;
                  v55 = v52 + 1;
                  v56 = (uint64_t)*v63 + 8 * v52 + -8 * v69;
                  while (1)
                  {
                    v23 = *(_QWORD **)v56;
                    if (*(_BYTE *)(*(_QWORD *)v56 + 136))
                    {
                      if (!a4 || !v23[15])
                        break;
                    }
                    *a3 = v55++;
                    v56 += 8;
                    if (!--v54)
                      goto LABEL_97;
                  }
                }
              }
            }
            else
            {
              v30 = v64;
            }
            goto LABEL_99;
          }
          v45 = !v36;
          if (a4)
            v46 = v27 == 0;
          else
            v46 = 1;
          v48 = !v46 && v68 == v15;
          while (1)
          {
            if (v69 <= v44)
              goto LABEL_84;
            v23 = (_QWORD *)*((_QWORD *)*v14 + v44);
            if (v43 < 0xFFFFFFFE || v23 == 0)
              v50 = 1;
            else
              v50 = v45;
            if ((v50 & 1) == 0)
            {
              if (v42)
              {
                if (!sub_20B9EE3BC(v23 + 9, *(unsigned __int16 *)(*(_QWORD *)(a5 + 8) + 2) + 542 * *(unsigned __int16 *)(a4[1] + 2)))goto LABEL_82;
              }
              else if (!sub_20B9EE46C(v23 + 4, (unint64_t)a4))
              {
                goto LABEL_82;
              }
            }
            if (!v48 || !sub_20B9E23E4(a1, (uint64_t)v23, (uint64_t)a4))
              goto LABEL_85;
            v44 = *a3;
LABEL_82:
            *a3 = v44 + 1;
            if ((int)v44++ <= -2)
              goto LABEL_84;
          }
        }
      }
    }
LABEL_56:
    v42 = 0;
    goto LABEL_57;
  }
  v19 = *a3;
  if ((v19 & 0x80000000) != 0 || v69 <= v19)
  {
    v22 = v75;
    if (v75 != v76
      && (*(_BYTE *)(a1 + 536) && ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3) - 1 == v8
       || *(_BYTE *)(v13 + 164)))
    {
      v37 = *(_QWORD *)(v13 + 32);
      if (v69 + ((*(_QWORD *)(v13 + 40) - v37) >> 4) <= (int)v19)
      {
        v23 = 0;
      }
      else if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v37 + 16 * ((int)v19 - v69)) + 8) + 8) & 1) != 0)
      {
        v23 = *(_QWORD **)(v37 + 16 * ((int)v19 - v69));
      }
      else
      {
        v23 = 0;
      }
      v21 = v69 + ((*(_QWORD *)(v13 + 40) - v37) >> 4);
    }
    else
    {
      v23 = 0;
      v21 = v18 >> 3;
    }
    goto LABEL_109;
  }
  if (a4)
  {
    v20 = (*(uint64_t (**)(_QWORD *))(*a4 + 72))(a4);
    v21 = v18 >> 3;
    v22 = v68;
    if (v20 == 7)
    {
      v23 = 0;
      *a3 = (unint64_t)v18 >> 3;
      v66 = 1;
      goto LABEL_109;
    }
    LODWORD(v19) = *a3;
    v17 = *v14;
  }
  else
  {
    v22 = v75;
    v21 = v18 >> 3;
  }
  v23 = (_QWORD *)v17[(int)v19];
LABEL_109:
  if (v66 && !v23)
  {
    v58 = *a3 - v21;
    if ((int)(*a3 - v21) < 0 || (v59 = *(_QWORD *)(v65 + 104), v58 >= (*(_QWORD *)(v65 + 112) - v59) >> 4))
      v23 = 0;
    else
      v23 = *(_QWORD **)(v59 + 16 * v58);
  }
  if (v74[0])
    operator delete(v74[0]);
  if (v22)
    operator delete(v22);
  return v23;
}

void sub_20B9E236C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p)
{
  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

const char *sub_20B9E23E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const char *result;
  const char *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  size_t v9;
  BOOL v10;
  size_t v11;
  size_t v12;
  BOOL v13;

  result = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3);
  if (result)
  {
    v6 = result;
    v7 = *(_QWORD *)(a1 + 32);
    v8 = *(unsigned __int16 **)(a2 + 8);
    v9 = strlen(result);
    if (v8)
      v10 = v9 == 0;
    else
      v10 = 1;
    if (!v10)
    {
      v11 = v9;
      v12 = 0;
      do
      {
        v8 = sub_20B9F17AC(v7, v8, v6[v12++]);
        if (v8)
          v13 = v12 >= v11;
        else
          v13 = 1;
      }
      while (!v13);
    }
    return (const char *)(v8 != 0);
  }
  return result;
}

void sub_20B9E2478(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t *v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v9 = 0;
  v10 = a3 + 80;
  if (a5)
    v11 = 80;
  else
    v11 = 32;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (!a5)
    v10 = a3 + 32;
  v48 = v10;
  v49 = v11;
  if (a4)
  {
    v12 = a3 + 56;
    v13 = 8;
    if (a5)
      v13 = 56;
    else
      v12 = a3 + 8;
    v14 = *(uint64_t **)(a3 + v13);
    v15 = *(uint64_t **)(v12 + 8);
    if (v14 == v15)
    {
      v9 = 0;
    }
    else
    {
      v16 = 0;
      do
      {
        v17 = *v14;
        v18 = a1[2];
        if ((unint64_t)v16 >= v18)
        {
          v19 = (_QWORD *)*a1;
          v20 = ((uint64_t)v16 - *a1) >> 3;
          v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) >> 61)
            sub_20B80CDD8();
          v22 = v18 - (_QWORD)v19;
          if (v22 >> 2 > v21)
            v21 = v22 >> 2;
          if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
            v23 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v23 = v21;
          if (v23)
            v23 = (unint64_t)sub_20B87FB70(v23);
          else
            v24 = 0;
          v25 = (_QWORD *)(v23 + 8 * v20);
          *v25 = v17;
          v9 = v25 + 1;
          if (v16 != v19)
          {
            do
            {
              v26 = *--v16;
              *--v25 = v26;
            }
            while (v16 != v19);
            v16 = (_QWORD *)*a1;
          }
          *a1 = v25;
          a1[1] = v9;
          a1[2] = v23 + 8 * v24;
          if (v16)
            operator delete(v16);
        }
        else
        {
          *v16 = v17;
          v9 = v16 + 1;
        }
        a1[1] = v9;
        v14 += 2;
        v16 = v9;
      }
      while (v14 != v15);
    }
  }
  v27 = sub_20B9E07E0();
  v28 = *(uint64_t **)(a3 + v49);
  v29 = *(uint64_t **)(v48 + 8);
  if (v28 != v29)
  {
    v30 = v27;
    while (*(_DWORD *)(a2 + 40) != 4)
    {
      if ((a4 & 1) == 0)
        goto LABEL_47;
LABEL_64:
      v28 += 2;
      if (v28 == v29)
        return;
    }
    if ((((sub_20B886524(v30, (unsigned __int16 *)(*(_QWORD *)(*v28 + 8) + 2)) != 0) ^ a4) & 1) != 0)
    {
      if (*(_DWORD *)(a2 + 40) != 4)
        goto LABEL_64;
      v31 = *v28;
      if ((*(_BYTE *)(*(_QWORD *)(*v28 + 8) + 8) & 1) == 0)
        goto LABEL_64;
      v32 = a1[2];
      if ((unint64_t)v9 >= v32)
      {
        v33 = (_QWORD *)*a1;
        v34 = ((uint64_t)v9 - *a1) >> 3;
        v35 = v34 + 1;
        if ((unint64_t)(v34 + 1) >> 61)
          sub_20B80CDD8();
        v36 = v32 - (_QWORD)v33;
        if (v36 >> 2 > v35)
          v35 = v36 >> 2;
        if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
          v37 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v37 = v35;
        if (v37)
          v37 = (unint64_t)sub_20B87FB70(v37);
        else
          v38 = 0;
        v45 = (_QWORD *)(v37 + 8 * v34);
        *v45 = v31;
        v40 = v45 + 1;
        if (v9 == v33)
          goto LABEL_61;
        do
        {
          v47 = *--v9;
          *--v45 = v47;
        }
        while (v9 != v33);
LABEL_60:
        v9 = (_QWORD *)*a1;
LABEL_61:
        *a1 = v45;
        a1[1] = v40;
        a1[2] = v37 + 8 * v38;
        if (v9)
          operator delete(v9);
        goto LABEL_63;
      }
    }
    else
    {
LABEL_47:
      v31 = *v28;
      v39 = a1[2];
      if ((unint64_t)v9 >= v39)
      {
        v41 = (_QWORD *)*a1;
        v42 = ((uint64_t)v9 - *a1) >> 3;
        v43 = v42 + 1;
        if ((unint64_t)(v42 + 1) >> 61)
          sub_20B80CDD8();
        v44 = v39 - (_QWORD)v41;
        if (v44 >> 2 > v43)
          v43 = v44 >> 2;
        if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
          v37 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v37 = v43;
        if (v37)
          v37 = (unint64_t)sub_20B87FB70(v37);
        else
          v38 = 0;
        v45 = (_QWORD *)(v37 + 8 * v42);
        *v45 = v31;
        v40 = v45 + 1;
        if (v9 == v41)
          goto LABEL_61;
        do
        {
          v46 = *--v9;
          *--v45 = v46;
        }
        while (v9 != v41);
        goto LABEL_60;
      }
    }
    *v9 = v31;
    v40 = v9 + 1;
LABEL_63:
    a1[1] = v40;
    v9 = v40;
    goto LABEL_64;
  }
}

void sub_20B9E27A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B9E27E0(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if ((a2 & 0x80000000) != 0)
    return 0;
  result = 0;
  if ((a3 & 0x80000000) == 0)
  {
    v6 = a1 + 8;
    v5 = *(_QWORD *)(a1 + 8);
    if ((*(_QWORD *)(v6 + 8) - v5) >> 3 > (unint64_t)a2)
    {
      v7 = *(_QWORD *)(*(_QWORD *)(v5 + 8 * a2) + 104);
      if (a3 < (unint64_t)((*(_QWORD *)(*(_QWORD *)(v5 + 8 * a2) + 112) - v7) >> 4))
        return *(_QWORD *)(v7 + 16 * a3);
      return 0;
    }
  }
  return result;
}

uint64_t sub_20B9E2834@<X0>(uint64_t result@<X0>, _QWORD *a2@<X1>, unint64_t a3@<X2>, uint64_t **a4@<X8>)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;

  v5 = 0;
  v6 = 0;
  v7 = a2[1] - *a2;
  v8 = *(_QWORD *)(result + 16) - *(_QWORD *)(result + 8);
  v9 = v7 >> 1;
  if (v7 >> 1 >= a3)
    v10 = a3;
  else
    v10 = v7 >> 1;
  v11 = v8 < 1 || v7 < 1;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  if (!v11)
  {
    v12 = result;
    v5 = 0;
    v6 = 0;
    v13 = ((unint64_t)v8 >> 3) - 1;
    v24 = v10;
    while (1)
    {
      v14 = v6 - v5;
      if (v14 >= v10)
        break;
      result = sub_20B906060(*(_QWORD **)(*(_QWORD *)(v12 + 8) + 8 * v13), *(unsigned __int16 *)(*a2 + 2 * (v9 - 1)), 1);
      if (!result)
        break;
      v15 = result;
      v16 = (unint64_t)a4[2];
      if ((unint64_t)v6 >= v16)
      {
        v17 = v14 + 1;
        if ((v14 + 1) >> 61)
          sub_20B80CDD8();
        v18 = v16 - (_QWORD)v5;
        if (v18 >> 2 > v17)
          v17 = v18 >> 2;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
          v19 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19)
          v19 = (unint64_t)sub_20B87FB70(v19);
        else
          v20 = 0;
        v21 = (uint64_t *)(v19 + 8 * v14);
        *v21 = v15;
        v22 = v21 + 1;
        if (v6 != v5)
        {
          do
          {
            v23 = *--v6;
            *--v21 = v23;
          }
          while (v6 != v5);
          v5 = *a4;
        }
        *a4 = v21;
        a4[1] = v22;
        a4[2] = (uint64_t *)(v19 + 8 * v20);
        if (v5)
          operator delete(v5);
        v5 = v21;
        v6 = v22;
        v10 = v24;
      }
      else
      {
        *v6++ = result;
        v5 = *a4;
      }
      a4[1] = v6;
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
      v13 -= result;
      if (v13 >= 0)
      {
        v11 = v9-- <= 1;
        if (!v11)
          continue;
      }
      v5 = *a4;
      break;
    }
  }
  if (v10 != v6 - v5)
    a4[1] = v5;
  return result;
}

void sub_20B9E29E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;

  if (v2)
  {
    *(_QWORD *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B9E2A10(uint64_t a1, uint64_t *a2, char **a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  __int16 v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  __int16 v30;
  char *v32;
  uint64_t v33;

  v3 = *a3;
  a3[1] = *a3;
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    v7 = v5 - v4;
    v8 = (v5 - v4) >> 3;
    if (v7 < 1)
    {
      v32 = v3;
    }
    else
    {
      v10 = v8 - 1;
      v11 = *(_QWORD *)(v4 + 8 * (v8 - 1));
      v12 = v11 - 1;
      if (v11 - 1 >= 0)
      {
        v14 = (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3;
        if (v12 < v14)
        {
          v33 = (uint64_t)(a3 + 2);
          v15 = v10;
          do
          {
            if (v15 != v10)
              v11 -= *(_QWORD *)(v4 + 8 * v15 + 8);
            v16 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v12);
            v18 = *(_QWORD **)(v16 + 8);
            v17 = *(_QWORD **)(v16 + 16);
            if (v18 == v17)
              break;
            while (v11 != (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v18 + 40))(*v18))
            {
              v18 += 2;
              if (v18 == v17)
              {
                v3 = a3[1];
                goto LABEL_34;
              }
            }
            v19 = *(_WORD *)(*(_QWORD *)(*v18 + 8) + 2);
            v21 = a3[1];
            v20 = (unint64_t)a3[2];
            if ((unint64_t)v21 >= v20)
            {
              v22 = *a3;
              v23 = v21 - *a3;
              if (v23 <= -3)
                sub_20B80CDD8();
              v24 = v23 >> 1;
              v25 = v20 - (_QWORD)v22;
              v26 = v25 <= (v23 >> 1) + 1 ? v24 + 1 : v25;
              v27 = v25 >= 0x7FFFFFFFFFFFFFFELL ? 0x7FFFFFFFFFFFFFFFLL : v26;
              if (v27)
              {
                v28 = (char *)sub_20B80FD48(v33, v27);
                v22 = *a3;
                v21 = a3[1];
              }
              else
              {
                v28 = 0;
              }
              v29 = &v28[2 * v24];
              *(_WORD *)v29 = v19;
              v3 = v29 + 2;
              while (v21 != v22)
              {
                v30 = *((_WORD *)v21 - 1);
                v21 -= 2;
                *((_WORD *)v29 - 1) = v30;
                v29 -= 2;
              }
              *a3 = v29;
              a3[1] = v3;
              a3[2] = &v28[2 * v27];
              if (v22)
                operator delete(v22);
            }
            else
            {
              *(_WORD *)v21 = v19;
              v3 = v21 + 2;
            }
            a3[1] = v3;
            if (v15-- < 1)
              break;
            v4 = *a2;
            v11 = *(_QWORD *)(*a2 + 8 * v15);
            v12 = v11 - 1;
            if (v11 - 1 < 0)
              break;
          }
          while (v12 < v14);
        }
      }
LABEL_34:
      v32 = v3;
      v3 = *a3;
      v8 = (a2[1] - *a2) >> 3;
    }
    if (v8 != (v32 - v3) >> 1)
      a3[1] = v3;
  }
}

uint64_t sub_20B9E2C08(uint64_t a1, CFArrayRef theArray)
{
  CFIndex Count;
  const __CFData *Mutable;
  CFIndex v6;
  CFIndex v7;
  const __CFArray *ValueAtIndex;
  char *v9;
  const __CFString *v10;
  const __CFString *v11;
  CFIndex Length;
  CFIndex v13;
  BOOL v14;
  const __CFString *v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  CFIndex v27;
  CFIndex v28;
  size_t v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  CFIndex v40;
  const UInt8 *BytePtr;
  char *v42;
  char *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  _QWORD *v55;
  uint64_t *v56;
  uint64_t v57;
  char *__p;
  char *v60;
  char *v61;
  char *v62;
  CFRange v63;

  *(_QWORD *)(a1 + 448) = *(_QWORD *)(a1 + 440);
  if (!theArray)
    return 1;
  Count = CFArrayGetCount(theArray);
  Mutable = *(const __CFData **)(a1 + 464);
  if (!Mutable)
  {
    Mutable = CFDataCreateMutable(0, 0);
    *(_QWORD *)(a1 + 464) = Mutable;
  }
  v63.length = CFDataGetLength(Mutable);
  v63.location = 0;
  CFDataDeleteBytes(Mutable, v63);
  __p = 0;
  v60 = 0;
  v62 = 0;
  if (Count >= 1)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(theArray, v6);
      v9 = (char *)malloc_type_malloc(0x400uLL, 0x98D6189EuLL);
      v10 = (const __CFString *)CFArrayGetValueAtIndex(ValueAtIndex, 0);
      v11 = (const __CFString *)CFArrayGetValueAtIndex(ValueAtIndex, 1);
      Length = CFStringGetLength(v11);
      v13 = CFStringGetLength(v10);
      v14 = Length <= v13;
      if (Length <= v13)
        v15 = v10;
      else
        v15 = v11;
      if (v14)
        v10 = v11;
      CFStringGetCString(v15, v9, 1024, 0x8000100u);
      v16 = strlen(v9);
      v17 = v60;
      if (v60 >= v62)
      {
        v19 = __p;
        v20 = (v60 - __p) >> 3;
        v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 61)
          goto LABEL_70;
        v22 = v62 - __p;
        if ((v62 - __p) >> 2 > v21)
          v21 = v22 >> 2;
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
          v23 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v23 = v21;
        if (v23)
        {
          v24 = (char *)sub_20B800BE8((uint64_t)&v62, v23);
          v19 = __p;
          v17 = v60;
        }
        else
        {
          v24 = 0;
        }
        v25 = &v24[8 * v20];
        *(_QWORD *)v25 = v7;
        v18 = v25 + 8;
        while (v17 != v19)
        {
          v26 = *((_QWORD *)v17 - 1);
          v17 -= 8;
          *((_QWORD *)v25 - 1) = v26;
          v25 -= 8;
        }
        __p = v25;
        v62 = &v24[8 * v23];
        if (v19)
          operator delete(v19);
      }
      else
      {
        *(_QWORD *)v60 = v7;
        v18 = v60 + 8;
      }
      v61 = v18;
      v27 = v16 + 1;
      CFDataAppendBytes(*(CFMutableDataRef *)(a1 + 464), (const UInt8 *)v9, v27);
      CFStringGetCString(v10, v9, 1024, 0x8000100u);
      v28 = v27 + v7;
      v29 = strlen(v9);
      v30 = v18;
      if (v18 >= v62)
      {
        v32 = __p;
        v33 = (v18 - __p) >> 3;
        v34 = v33 + 1;
        if ((unint64_t)(v33 + 1) >> 61)
LABEL_70:
          sub_20B80CDD8();
        v35 = v62 - __p;
        if ((v62 - __p) >> 2 > v34)
          v34 = v35 >> 2;
        if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
          v36 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v36 = v34;
        if (v36)
        {
          v37 = (char *)sub_20B800BE8((uint64_t)&v62, v36);
          v32 = __p;
          v30 = v61;
        }
        else
        {
          v37 = 0;
        }
        v38 = &v37[8 * v33];
        *(_QWORD *)v38 = v28;
        v31 = v38 + 8;
        while (v30 != v32)
        {
          v39 = *((_QWORD *)v30 - 1);
          v30 -= 8;
          *((_QWORD *)v38 - 1) = v39;
          v38 -= 8;
        }
        __p = v38;
        v62 = &v37[8 * v36];
        if (v32)
          operator delete(v32);
      }
      else
      {
        *(_QWORD *)v18 = v28;
        v31 = v18 + 8;
      }
      v60 = v31;
      v40 = v29 + 1;
      CFDataAppendBytes(*(CFMutableDataRef *)(a1 + 464), (const UInt8 *)v9, v40);
      v7 = v40 + v28;
      free(v9);
      ++v6;
    }
    while (v6 != Count);
  }
  BytePtr = CFDataGetBytePtr(*(CFDataRef *)(a1 + 464));
  v43 = *(char **)(a1 + 440);
  v42 = *(char **)(a1 + 448);
  v44 = (v42 - v43) >> 4;
  if (Count > v44)
  {
    v45 = Count - v44;
    v46 = *(_QWORD *)(a1 + 456);
    if (Count - v44 > (v46 - (uint64_t)v42) >> 4)
    {
      if ((unint64_t)Count >> 60)
        sub_20B80CDD8();
      v47 = v46 - (_QWORD)v43;
      v48 = v47 >> 3;
      if (v47 >> 3 <= (unint64_t)Count)
        v48 = Count;
      if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF0)
        v49 = 0xFFFFFFFFFFFFFFFLL;
      else
        v49 = v48;
      if (v49 >> 60)
        sub_20B800BC0();
      v50 = (char *)operator new(16 * v49);
      v51 = &v50[16 * v44];
      v52 = &v50[16 * v49];
      bzero(v51, 16 * v45);
      v53 = &v51[16 * v45];
      if (v42 != v43)
      {
        do
        {
          *((_OWORD *)v51 - 1) = *((_OWORD *)v42 - 1);
          v51 -= 16;
          v42 -= 16;
        }
        while (v42 != v43);
        v42 = v43;
      }
      *(_QWORD *)(a1 + 440) = v51;
      *(_QWORD *)(a1 + 448) = v53;
      *(_QWORD *)(a1 + 456) = v52;
      if (v42)
        operator delete(v42);
      goto LABEL_63;
    }
    bzero(*(void **)(a1 + 448), 16 * v45);
    v54 = &v42[16 * v45];
    goto LABEL_62;
  }
  if (Count < v44)
  {
    v54 = &v43[16 * Count];
LABEL_62:
    *(_QWORD *)(a1 + 448) = v54;
  }
LABEL_63:
  if (Count >= 1)
  {
    v55 = (_QWORD *)(*(_QWORD *)(a1 + 440) + 8);
    v56 = (uint64_t *)(__p + 8);
    do
    {
      *(v55 - 1) = &BytePtr[*(v56 - 1)];
      v57 = *v56;
      v56 += 2;
      *v55 = &BytePtr[v57];
      v55 += 2;
      --Count;
    }
    while (Count);
  }
  if (__p)
    operator delete(__p);
  sub_20B9EE1F0(a1 + 400);
  return 1;
}

void sub_20B9E3044(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B9E3078(unsigned int a1, unsigned int a2, char *a3)
{
  char v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  if (a1 > 5)
    return 0;
  if (((1 << a1) & 0x25) != 0)
    goto LABEL_3;
  if (((1 << a1) & 0x18) != 0)
  {
    v3 = 49;
    switch(a2)
    {
      case 0x2C7u:
        v3 = 51;
        break;
      case 0x2C8u:
        goto LABEL_17;
      case 0x2C9u:
        goto LABEL_4;
      case 0x2CAu:
        v3 = 50;
        break;
      case 0x2CBu:
        v3 = 52;
        break;
      default:
        if (a2 == 729)
          v3 = 53;
        else
LABEL_17:
          v3 = a2 + 49;
        break;
    }
    goto LABEL_4;
  }
  if (a2 - 97 <= 0x19)
  {
LABEL_3:
    v3 = a2;
LABEL_4:
    *a3 = v3;
    return 1;
  }
  v5 = 0;
  v6 = a2 - 10123;
  result = dword_20BA5F254[v6];
  v7 = aAdgjmptwn7seaw[v6];
  if ((int)result <= 1)
    v8 = 1;
  else
    v8 = result;
  do
  {
    a3[v5] = v7 + v5;
    ++v5;
  }
  while (v8 != v5);
  return result;
}

uint64_t sub_20B9E315C(uint64_t a1, int a2, unsigned int a3)
{
  int v4;
  uint64_t result;
  unsigned int v6;
  BOOL v7;
  int v8;
  _QWORD *v10;

  v4 = *(_DWORD *)(a1 + 40);
  if (v4 == 2)
  {
    result = 1;
    if (a2 != 39 && a2 - 97 >= 0x1B)
    {
      v6 = *(_DWORD *)(*(_QWORD *)(a1 + 488) + 8);
      v7 = v6 > 7;
      v8 = (1 << v6) & 0x8C;
      if (!v7 && v8 != 0)
        return a2 == 59;
      return 0;
    }
  }
  else
  {
    if (a2 != 39 || (v4 - 3) < 2)
      return sub_20B9E3218(v4, a2);
    if ((a3 & 0x80000000) != 0)
      return 0;
    v10 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 8 * a3);
    if (!v10)
      return 0;
    return v10[2] != v10[1] || v10[5] != v10[4] || v10[8] != v10[7];
  }
  return result;
}

uint64_t sub_20B9E3218(int a1, int a2)
{
  uint64_t result;
  BOOL v4;
  uint64_t v5;
  __int16 *v6;
  BOOL v7;

  result = 1;
  switch(a1)
  {
    case 0:
    case 5:
      v4 = (a2 - 97) >= 0x1A;
      return !v4;
    case 1:
      v4 = (a2 - 97) >= 0x1A && (a2 - 10123) >= 8;
      return !v4;
    case 3:
    case 4:
      if ((a2 - 12549) < 0x25)
        return result;
      v5 = 0;
      break;
    default:
      return result;
  }
  while ((unsigned __int16)word_20BA4B1C4[v5] != a2)
  {
    if (++v5 == 5)
    {
      v6 = 0;
      goto LABEL_15;
    }
  }
  v6 = &word_20BA4B1C4[v5];
LABEL_15:
  if (v6)
    v7 = (char *)v6 - (char *)word_20BA4B1C4 == -2;
  else
    v7 = 1;
  return !v7;
}

void sub_20B9E32C0(uint64_t a1, float **a2, int a3, CFArrayRef *a4)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  signed int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _WORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  __int16 v28;
  unint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  unint64_t v36;
  uint64_t *v37;
  _QWORD *v38;
  CFArrayRef *v39;
  signed int v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  void *v48;
  uint64_t v49;
  __int128 v50;
  void *v51;
  void ***v52;
  const char *v53;
  uint64_t v54;
  int v55;
  int v56;
  BOOL v57;
  BOOL v58;
  char v59;
  uint64_t v60;
  const void *ValueAtIndex;
  float *v62;
  float *v63;
  float **v64;
  uint64_t v65;
  void ***v66;
  unsigned int v67;
  uint64_t v68;
  char v69;
  int v70;
  uint64_t v71;
  _QWORD *v72;
  const char *v73;
  uint64_t v74;
  void *v75;
  const char *v76;
  uint64_t v77;
  const char *v78;
  uint64_t v79;
  void *v80;
  const char *v81;
  uint64_t v82;
  unint64_t v83;
  _QWORD *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  int v91;
  char v92;
  BOOL v93;
  BOOL v94;
  _BYTE *v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  void *v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unsigned int v109;
  uint64_t v110;
  _QWORD *v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int v116;
  _QWORD *v117;
  uint64_t v118;
  char v119;
  unsigned __int16 *v120;
  int v121;
  _QWORD *v122;
  _QWORD *v123;
  unsigned __int16 v124;
  uint64_t v125;
  _QWORD *v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  _QWORD *v132;
  void *v133;
  void *v134;
  int v135;
  _QWORD *v136;
  uint64_t *v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unsigned __int16 *v148;
  BOOL v149;
  uint64_t v150;
  int v151;
  unsigned __int16 ***v152;
  int v153;
  char v154;
  unint64_t v155;
  void *__p;
  void *v157;
  void *v158;
  __int128 v159;
  void *v160;
  uint64_t *v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t *v165;
  uint64_t v166;
  char v167;

  v8 = (*((uint64_t (**)(float **))*a2 + 1))(a2);
  v9 = *(_QWORD *)(a1 + 864);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  v10 = *(_QWORD *)(a1 + 824);
  if (v10)
  {
    sub_20B828E74((uint64_t *)(v10 + 144));
    *(_DWORD *)(v10 + 192) = 0;
    sub_20B882F18((uint64_t *)v10);
  }
  v11 = *(_QWORD *)(a1 + 832);
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
  v12 = *(char **)(a1 + 48);
  v13 = *(char **)(a1 + 56);
  v14 = (uint64_t *)(a1 + 48);
  v15 = v13 - v12;
  v16 = ((unint64_t)(v13 - v12) >> 1) - 1;
  if (v16 >= 0)
  {
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v16);
    if (v17)
    {
      if ((*(_DWORD *)(v17 + 168) - 1) <= 1)
      {
        v18 = 0;
        while ((unsigned __int16)word_20BA4B1C4[v18] != v8)
        {
          if (++v18 == 5)
            goto LABEL_15;
        }
        if (v18 != -1)
        {
          v115 = *(_QWORD *)(v17 + 32);
          v114 = *(_QWORD *)(v17 + 40);
          if (v115 != v114)
          {
            v116 = v8 - 711;
            v153 = ((unint64_t)(v13 - v12) >> 1) - 1;
            do
            {
              if (v114 - *(_QWORD *)(v17 + 32) == 16)
                break;
              v117 = *(_QWORD **)v115;
              v118 = *(_QWORD *)(*(_QWORD *)v115 + 8);
              v119 = 49;
              switch(v116)
              {
                case 0u:
                  v119 = 51;
                  break;
                case 1u:
                  goto LABEL_168;
                case 2u:
                  break;
                case 3u:
                  v119 = 50;
                  break;
                case 4u:
                  v119 = 52;
                  break;
                default:
                  if (v8 == 729)
                    v119 = 53;
                  else
LABEL_168:
                    v119 = v8 + 49;
                  break;
              }
              v120 = sub_20B9F17AC(*(_QWORD *)(a1 + 32), *(unsigned __int16 **)(*(_QWORD *)v115 + 8), v119);
              v121 = *(unsigned __int16 *)(v118 + 2);
              if (v120)
              {
                v122 = *(_QWORD **)(a1 + 760);
                v123 = *(_QWORD **)(a1 + 768);
                if (v122 != v123)
                {
                  v124 = v120[1];
                  do
                  {
                    v125 = v122[1];
                    if (*v122 != v125 && *(unsigned __int16 *)(v125 - 2) == v121)
                      *(_WORD *)(v125 - 2) = v124;
                    v122 += 3;
                  }
                  while (v122 != v123);
                }
                v117[1] = v120;
                v115 += 16;
              }
              else
              {
                v126 = *(_QWORD **)(a1 + 760);
                v127 = *(_QWORD **)(a1 + 768);
                while (v126 != v127 && (_QWORD *)((char *)v127 - *(_QWORD *)(a1 + 760)) != (_QWORD *)24)
                {
                  v128 = v126[1];
                  if (*v126 == v128 || *(unsigned __int16 *)(v128 - 2) != v121)
                  {
                    v126 += 3;
                  }
                  else
                  {
                    if (v126 + 3 == v127)
                    {
                      v130 = v126;
                    }
                    else
                    {
                      v129 = (uint64_t)v126;
                      do
                      {
                        v130 = (_QWORD *)(v129 + 24);
                        sub_20B824BE4(v129, (__n128 *)(v129 + 24));
                        v131 = v129 + 48;
                        v129 += 24;
                      }
                      while ((_QWORD *)v131 != v127);
                      v127 = *(_QWORD **)(a1 + 768);
                    }
                    if (v127 != v130)
                    {
                      v132 = v127;
                      do
                      {
                        v134 = (void *)*(v132 - 3);
                        v132 -= 3;
                        v133 = v134;
                        if (v134)
                        {
                          *(v127 - 2) = v133;
                          operator delete(v133);
                        }
                        v127 = v132;
                      }
                      while (v132 != v130);
                    }
                    *(_QWORD *)(a1 + 768) = v130;
                    v127 = v130;
                  }
                }
                v135 = v153 - (*(uint64_t (**)(_QWORD *))(*v117 + 40))(v117);
                v136 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 8 * v135);
                v137 = (uint64_t *)v136[1];
                v138 = (uint64_t *)v136[2];
                if (v137 == v138)
                {
                  v116 = v8 - 711;
                }
                else
                {
                  v139 = v135;
                  v116 = v8 - 711;
                  do
                  {
                    v140 = *v137;
                    v137 += 2;
                    sub_20B9EF454((_QWORD *)(v140 + 32), (unint64_t)v117);
                  }
                  while (v137 != v138);
                  v136 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 8 * v139);
                }
                v141 = (uint64_t *)v136[4];
                v142 = (uint64_t *)v136[5];
                while (v141 != v142)
                {
                  v143 = *v141;
                  v141 += 2;
                  sub_20B9EF454((_QWORD *)(v143 + 32), (unint64_t)v117);
                }
                v144 = v115 + 16;
                v145 = *(_QWORD *)(v17 + 40);
                if (v115 + 16 == v145)
                {
                  v114 = v115;
                }
                else
                {
                  v146 = v115;
                  do
                  {
                    v114 = v146 + 16;
                    sub_20B82E770(v146, (__int128 *)(v146 + 16));
                    v147 = v146 + 32;
                    v146 += 16;
                  }
                  while (v147 != v145);
                  v144 = *(_QWORD *)(v17 + 40);
                }
                while (v144 != v114)
                  v144 = sub_20B811FE4(v144 - 16);
                *(_QWORD *)(v17 + 40) = v114;
              }
            }
            while (v115 != v114);
          }
          if (!*(_QWORD *)(a1 + 784))
            sub_20B9E4DF4(a1, ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3) - 1);
          return;
        }
      }
    }
  }
LABEL_15:
  v19 = *(_QWORD *)(a1 + 64);
  *(_OWORD *)(a1 + 784) = xmmword_20BA3AC80;
  if ((unint64_t)v13 >= v19)
  {
    if (v15 <= -3)
      sub_20B80CDD8();
    v21 = v15 >> 1;
    v22 = v19 - (_QWORD)v12;
    if (v22 <= (v15 >> 1) + 1)
      v23 = v21 + 1;
    else
      v23 = v22;
    if (v22 >= 0x7FFFFFFFFFFFFFFELL)
      v24 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v24 = v23;
    if (v24)
    {
      v25 = (char *)sub_20B80FD48(a1 + 64, v24);
      v12 = *(char **)(a1 + 48);
      v13 = *(char **)(a1 + 56);
    }
    else
    {
      v25 = 0;
    }
    v26 = &v25[2 * v21];
    v27 = &v25[2 * v24];
    *(_WORD *)v26 = v8;
    v20 = v26 + 2;
    while (v13 != v12)
    {
      v28 = *((_WORD *)v13 - 1);
      v13 -= 2;
      *((_WORD *)v26 - 1) = v28;
      v26 -= 2;
    }
    *(_QWORD *)(a1 + 48) = v26;
    *(_QWORD *)(a1 + 56) = v20;
    *(_QWORD *)(a1 + 64) = v27;
    if (v12)
      operator delete(v12);
  }
  else
  {
    *(_WORD *)v13 = v8;
    v20 = v13 + 2;
  }
  *(_QWORD *)(a1 + 56) = v20;
  v29 = (int)(v15 >> 1);
  *(_DWORD *)(a1 + 552) = a3;
  *(_QWORD *)(a1 + 496) = v29;
  v158 = (void *)(a1 + 80);
  LODWORD(v159) = 0;
  sub_20B9EE244((uint64_t)&v158);
  v30 = operator new();
  v33 = v30;
  v34 = 0;
  v35 = *(_DWORD *)(a1 + 40) - 3;
  if (v35 <= 2)
    v34 = dword_20BA5F7A8[v35];
  *(_QWORD *)v30 = &off_24C468728;
  *(_OWORD *)(v30 + 8) = 0u;
  *(_OWORD *)(v30 + 24) = 0u;
  *(_OWORD *)(v30 + 40) = 0u;
  *(_OWORD *)(v30 + 56) = 0u;
  *(_OWORD *)(v30 + 72) = 0u;
  *(_OWORD *)(v30 + 88) = 0u;
  *(_OWORD *)(v30 + 104) = 0u;
  *(_QWORD *)(v30 + 120) = 0;
  *(_QWORD *)(v30 + 128) = v29;
  *(_QWORD *)(v30 + 152) = 0;
  *(_QWORD *)(v30 + 144) = 0;
  *(_QWORD *)(v30 + 136) = v30 + 144;
  *(_DWORD *)(v30 + 160) = v34;
  *(_BYTE *)(v30 + 164) = 0;
  *(_DWORD *)(v30 + 168) = 0;
  v36 = *(_QWORD *)(a1 + 24);
  v37 = *(uint64_t **)(a1 + 16);
  if ((unint64_t)v37 >= v36)
  {
    v39 = a4;
    v40 = v16;
    v41 = *(_QWORD **)(a1 + 8);
    v42 = v37 - v41;
    v43 = v42 + 1;
    if ((unint64_t)(v42 + 1) >> 61)
      sub_20B80CDD8();
    v44 = v36 - (_QWORD)v41;
    if (v44 >> 2 > v43)
      v43 = v44 >> 2;
    if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
      v45 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v45 = v43;
    v161 = (uint64_t *)(a1 + 24);
    if (v45)
    {
      v45 = (unint64_t)sub_20B87FB70(v45);
      v41 = *(_QWORD **)(a1 + 8);
      v37 = *(uint64_t **)(a1 + 16);
    }
    else
    {
      v46 = 0;
    }
    v47 = (uint64_t *)(v45 + 8 * v42);
    v48 = (void *)(v45 + 8 * v46);
    v160 = v48;
    *v47 = v33;
    *((_QWORD *)&v159 + 1) = v47 + 1;
    if (v37 == v41)
    {
      v38 = v47 + 1;
      v16 = v40;
    }
    else
    {
      v16 = v40;
      do
      {
        v49 = *--v37;
        *v37 = 0;
        *--v47 = v49;
      }
      while (v37 != v41);
      v38 = (_QWORD *)*((_QWORD *)&v159 + 1);
      v48 = v160;
    }
    a4 = v39;
    v50 = *(_OWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v47;
    *(_QWORD *)(a1 + 16) = v38;
    v159 = v50;
    v51 = *(void **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v48;
    v160 = v51;
    v158 = (void *)v50;
    sub_20B8821E8((uint64_t)&v158);
    v14 = (uint64_t *)(a1 + 48);
  }
  else
  {
    *v37 = v30;
    v38 = v37 + 1;
  }
  *(_QWORD *)(a1 + 16) = v38;
  v155 = v15 << 31;
  if (v15 << 31)
  {
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v29 - 8) + 168) - 1) <= 1)
    {
      *(_QWORD *)(a1 + 808) = v29;
      v52 = *(void ****)(a1 + 544);
      if (v52)
        objc_msgSend_reset(**v52, v31, v32);
    }
  }
  v54 = (*((uint64_t (**)(float **))*a2 + 1))(a2);
  v55 = *(_DWORD *)(a1 + 40);
  if ((*(_BYTE *)(a1 + 552) & 0x10) != 0)
    v56 = (v55 == 2) ^ (v55 != 1);
  else
    v56 = 0;
  if (v55)
    v57 = v55 == 5;
  else
    v57 = 1;
  v58 = v57;
  if ((v56 & 1) != 0)
    v58 = v55 == 2;
  v59 = v55 == 2 || v58;
  v154 = v59;
  if (*a4 && (v60 = *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8), CFArrayGetCount(*a4) >= (unint64_t)(v60 >> 3)))
    ValueAtIndex = CFArrayGetValueAtIndex(*a4, ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3) - 1);
  else
    ValueAtIndex = 0;
  v164 = 0;
  v165 = &v164;
  v166 = 0x2000000000;
  v167 = 0;
  if (v56)
  {
    v62 = a2[1];
    v63 = a2[2];
    v64 = a2 + 1;
    v65 = a1 + 704;
    v158 = (void *)MEMORY[0x24BDAC760];
    *(_QWORD *)&v159 = 0x40000000;
    if (v62 == v63)
    {
      *((_QWORD *)&v159 + 1) = sub_20B9E92BC;
      v160 = &unk_24C4AE660;
      v162 = a1;
      v163 = v29;
      v161 = &v164;
      sub_20B936AC8(v65, v54, ValueAtIndex, (uint64_t)&v158);
    }
    else
    {
      *((_QWORD *)&v159 + 1) = sub_20B9E9320;
      v160 = &unk_24C46CAB8;
      v162 = a1;
      v163 = v29;
      v161 = &v164;
      sub_20B936C98(v65, v54, v64, (uint64_t)&v158);
    }
  }
  v66 = *(void ****)(a1 + 544);
  if (v66)
  {
    v67 = *(_DWORD *)(a1 + 40);
    if (v67 <= 5)
    {
      if (((1 << v67) & 0x25) != 0)
      {
        if ((v54 - 33) >= 0x5A)
          goto LABEL_103;
      }
      else if (((1 << v67) & 0x18) != 0 && (v54 - 12549) >= 0x25)
      {
        v68 = 0;
        while ((unsigned __int16)word_20BA4B1C4[v68] != (_DWORD)v54)
        {
          if (++v68 == 5)
            goto LABEL_103;
        }
        if (v68 == -1)
          goto LABEL_103;
      }
    }
    if (v56)
    {
      if (!*((_BYTE *)v165 + 24))
      {
        v70 = 0;
LABEL_99:
        objc_msgSend_addInputCharacter_geometryModel_geometryData_(**v66, v53, v54, 0, ValueAtIndex);
        v75 = (void *)objc_msgSend_removedModifications(***(void ****)(a1 + 544), v73, v74);
        sub_20BA3064C(v75, v76, v77, &__p);
        sub_20B9E9384((_BYTE *)a1, (uint64_t)__p, (uint64_t)v157, v154, 0, v70);
        if (__p)
        {
          v157 = __p;
          operator delete(__p);
        }
        v80 = (void *)objc_msgSend_addedModifications(***(void ****)(a1 + 544), v78, v79);
        sub_20BA3064C(v80, v81, v82, &__p);
        sub_20B9E9384((_BYTE *)a1, (uint64_t)__p, (uint64_t)v157, v154, 1, v70);
        if (__p)
        {
          v157 = __p;
          operator delete(__p);
        }
        goto LABEL_103;
      }
      if (v67 - 3 > 1)
      {
        v69 = v54;
      }
      else
      {
        v69 = 49;
        switch((int)v54)
        {
          case 711:
            v69 = 51;
            break;
          case 712:
            goto LABEL_223;
          case 713:
            break;
          case 714:
            v69 = 50;
            break;
          case 715:
            v69 = 52;
            break;
          default:
            if ((_DWORD)v54 == 729)
              v69 = 53;
            else
LABEL_223:
              v69 = v54 + 49;
            break;
        }
      }
      v71 = *(_QWORD *)(a1 + 8);
      v72 = *(_QWORD **)(v71 + 8 * v29);
      if (v72[8] == v72[7] && v72[11] == v72[10])
      {
        v152 = *(unsigned __int16 ****)(a1 + 32);
        v151 = v69;
        v148 = sub_20B9F17AC((uint64_t)v152, **v152, v69);
        v70 = v148 != 0;
        if (v148)
          v149 = 1;
        else
          v149 = v155 == 0;
        if (!v149)
        {
          v70 = sub_20B905F8C(*(_QWORD **)(v71 + 8 * v29 - 8), (uint64_t)v152, v151);
          v66 = *(void ****)(a1 + 544);
        }
        goto LABEL_99;
      }
    }
    v70 = 1;
    goto LABEL_99;
  }
LABEL_103:
  _Block_object_dispose(&v164, 8);
  v83 = *(_QWORD *)(a1 + 496);
  if (v83 >= v29 || *(_DWORD *)(a1 + 40) == 2)
  {
    v84 = *(_QWORD **)(*(_QWORD *)(a1 + 16) - 8);
    if ((sub_20B9E315C(a1, v8, v16) & 1) != 0)
      sub_20B9E4144(a1, v8, v84, v16);
    else
      sub_20B9E3FD0(a1, (uint64_t)v84, v29);
    sub_20B905CBC(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v29));
  }
  else
  {
    if (v83)
    {
      v103 = *v14;
      v104 = (void *)(a1 + 80);
      do
      {
        if (*(_WORD *)(v103 + 2 * v83) != 39)
          break;
        *(_QWORD *)(a1 + 496) = --v83;
      }
      while (v83);
    }
    else
    {
      v104 = (void *)(a1 + 80);
    }
    v105 = *(_QWORD *)(a1 + 808);
    if (v83 < v105)
    {
      *(_QWORD *)(a1 + 496) = v105;
      v83 = v105;
    }
    if (v83 < v29)
    {
      v106 = *(_QWORD *)(a1 + 48);
      v107 = (*(_QWORD *)(a1 + 56) - v106) >> 1;
      if (*(_QWORD *)(a1 + 480) >= v83)
      {
        *(_QWORD *)(a1 + 480) = 0xFFFFLL;
        v108 = (v83 - 1);
        if ((int)v83 - 1 >= 0)
        {
          v109 = v83 - 2;
          v110 = 0xFFFFLL;
          do
          {
            if ((sub_20B9E315C(a1, *(unsigned __int16 *)(v106 + 2 * v108), v109) & 1) != 0)
              break;
            if (v110 == 0xFFFF)
              v110 = v108;
            else
              --v110;
            *(_QWORD *)(a1 + 480) = v110;
            --v109;
          }
          while (v108-- > 0);
        }
      }
      if (v107 > v83)
      {
        do
        {
          v112 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 8 * v83);
          sub_20B905040(v112, 0);
          v158 = v104;
          LODWORD(v159) = 0;
          sub_20B9EE244((uint64_t)&v158);
          v113 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 48) + 2 * v83);
          if ((sub_20B9E315C(a1, v113, (int)v83 - 1) & 1) != 0)
            sub_20B9E4144(a1, v113, v112, v83 - 1);
          else
            sub_20B9E3FD0(a1, (uint64_t)v112, v83);
          sub_20B905CBC(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v83++));
        }
        while (v107 != v83);
      }
    }
  }
  sub_20B9E4DF4(a1, v29);
  if (*(_DWORD *)(a1 + 40) == 1)
  {
    v85 = v29 - 6;
    if (v155 <= 0x500000000)
      v85 = 0;
    if (v85 <= v29)
    {
      v86 = *(_QWORD *)(a1 + 48);
      v87 = *(_QWORD *)(a1 + 8);
      v88 = v86 - 2;
      do
      {
        if (*(_WORD *)(v86 + 2 * v85) == 39)
        {
          v89 = v85;
          while (v89)
          {
            v90 = v89 - 1;
            v91 = *(unsigned __int16 *)(v88 + 2 * v89--);
            if (v91 != 39)
            {
              if (!v90 || *(_WORD *)(v88 + 2 * v90) == 39)
              {
                v92 = 1;
                goto LABEL_129;
              }
              break;
            }
          }
          v92 = 0;
        }
        else
        {
          if (v85)
            v93 = *(unsigned __int16 *)(v86 + 2 * v85 - 2) == 39;
          else
            v93 = 1;
          v94 = v85 < v29 && *(_WORD *)(v86 + 2 * v85 + 2) == 39;
          v92 = v93 && v94;
        }
LABEL_129:
        *(_BYTE *)(*(_QWORD *)(v87 + 8 * v85++) + 164) = v92;
      }
      while (v85 <= v29);
    }
  }
  v95 = sub_20B9547EC();
  if (*v95 && (v95[9] & 0x20) != 0)
  {
    v96 = sub_20B9547EC();
    sub_20B9E5F40(&v158, a1);
    if (v159 >= 0)
      v102 = &v158;
    else
      v102 = v158;
    sub_20B954D48((uint64_t)v96, 0x2000u, (uint64_t)v102, v97, v98, v99, v100, v101, v150);
    if (SHIBYTE(v159) < 0)
      operator delete(v158);
  }
}

void sub_20B9E3F78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B9E3FD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 v8;
  _QWORD *v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;

  v4 = *(_QWORD *)(a1 + 480);
  if (v4 == 0xFFFF)
  {
    *(_QWORD *)(a1 + 480) = a3;
    v4 = a3;
  }
  v5 = (_QWORD *)(a2 + 104);
  if (*(_QWORD *)(a2 + 112) == *(_QWORD *)(a2 + 104))
  {
    v7 = *(_QWORD *)(a1 + 48);
    v8 = a3 - v4 + 1;
    v9 = operator new(0x40uLL);
    v9[1] = 0;
    v9[2] = 0;
    *v9 = &off_24C46BA60;
    v9[3] = &off_24C468748;
    v10 = (void *)operator new[]();
    v9[4] = v10;
    *((_WORD *)v9 + 28) = v8;
    memcpy(v10, (const void *)(v7 + 2 * v4), 2 * v8);
    v9[5] = v10;
    v9[6] = v8;
    *(_QWORD *)&v14 = v9 + 3;
    *((_QWORD *)&v14 + 1) = v9;
    sub_20B9051C0(v5, &v14);
    v11 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
    if (*((_QWORD *)&v14 + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  if (*(_DWORD *)(a1 + 40) == 2)
  {
    v6 = *(_QWORD *)(a1 + 488);
    *(_BYTE *)(v6 + 32) = 0;
    *(_QWORD *)(v6 + 40) = 0;
    *(_BYTE *)(v6 + 48) = 0;
  }
}

void sub_20B9E411C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B811FE4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B9E4144(uint64_t a1, unsigned int a2, _QWORD *a3, unsigned int a4)
{
  int v7;
  _QWORD *v8;
  __int128 *v9;
  __int128 *v10;
  __int128 *v11;
  _BYTE *v12;
  char **v13;
  __int128 *v14;
  __int128 *v15;
  __int128 *v16;
  _BYTE *v17;
  char **v18;
  __int128 *v19;
  __int128 *v20;
  __int128 *v21;
  _BYTE *v22;
  char **v23;
  __int128 *v24;
  __int128 *v25;
  char **v26;
  char **v27;
  __int128 *v28;
  _BYTE *v29;
  char **v30;
  uint64_t k;
  uint64_t v32;
  __int16 v33;
  int v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  char *v38;
  char v39;
  char **v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  char v47;
  uint64_t m;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  void *v62;
  _QWORD *v63;
  _WORD *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  void (***v69)(_QWORD, unint64_t, _QWORD *);
  uint64_t v70;
  unint64_t v71;
  char v72;
  int v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t *v76;
  int v77;
  int v78;
  uint64_t j;
  unsigned int v80;
  unsigned __int16 ***v82;
  unsigned __int16 *v83;
  uint64_t v84;
  char v85;
  unsigned __int16 *v86;
  _QWORD *i;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  char **v95;
  char **v96;
  const char **v97;
  const char *v98;
  uint64_t v99;
  char **v100;
  const char **v101;
  const char *v102;
  unsigned int v103;
  int v104;
  uint64_t v106;
  _QWORD *v107;
  _QWORD *v108;
  _QWORD *v109;
  _QWORD *v110;
  _QWORD *v111;
  int v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  _QWORD *v118;
  _QWORD *v119;
  _QWORD *v120;
  _QWORD *v121;
  _QWORD *v122;
  unsigned int v123;
  uint64_t v124;
  _QWORD *v125;
  int v126;
  uint64_t *v127;
  uint64_t *v128;
  uint64_t v129;
  unsigned int v130;
  _BOOL4 v131;
  int v132;
  signed int v133;
  _QWORD v134[6];
  void *__p[3];
  __int128 v136;
  uint64_t *v137;
  uint64_t *v138;

  v7 = *(_DWORD *)(a1 + 40);
  if (a2 != 39)
  {
    v33 = a2;
    v34 = sub_20B9E3078(*(_DWORD *)(a1 + 40), a2, *(char **)(a1 + 72));
    v133 = a4;
    if (v7 == 2)
    {
      sub_20B9E0260(*(_QWORD *)(a1 + 488), **(char **)(a1 + 72), (void **)&v137);
      v35 = v137;
      v36 = v138;
      if (v137 == v138)
      {
        v59 = *(_QWORD *)(a1 + 488);
        if (*(_BYTE *)(v59 + 48))
        {
          sub_20B9E005C((unsigned __int16 ****)v59, **(char **)(a1 + 72), (unsigned __int16 ***)__p);
          v60 = (uint64_t *)__p[0];
          v61 = (uint64_t *)__p[1];
          if (__p[0] == __p[1])
            goto LABEL_76;
          do
            sub_20B9E7100(a1, (uint64_t)a3, *v60++, 0);
          while (v60 != v61);
          v62 = __p[0];
          if (__p[0] == __p[1])
          {
LABEL_76:
            v63 = operator new(0x40uLL);
            v63[1] = 0;
            v63[2] = 0;
            *v63 = &off_24C46BA60;
            v63[3] = &off_24C468748;
            v64 = (_WORD *)operator new[]();
            *((_WORD *)v63 + 28) = 1;
            *v64 = v33;
            v63[4] = v64;
            v63[5] = v64;
            v63[6] = 1;
            *(_QWORD *)&v136 = v63 + 3;
            *((_QWORD *)&v136 + 1) = v63;
            sub_20B9051C0(a3 + 13, &v136);
            v65 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
            if (*((_QWORD *)&v136 + 1))
            {
              v66 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
              do
                v67 = __ldaxr(v66);
              while (__stlxr(v67 - 1, v66));
              if (!v67)
              {
                ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
                std::__shared_weak_count::__release_weak(v65);
              }
            }
            v62 = __p[0];
          }
          if (v62)
          {
            __p[1] = v62;
            operator delete(v62);
          }
          v47 = 1;
        }
        else
        {
          v47 = 0;
        }
      }
      else
      {
        do
        {
          v37 = *v35;
          v38 = (char *)operator new(0x90uLL);
          *((_QWORD *)v38 + 1) = 0;
          *((_QWORD *)v38 + 2) = 0;
          *(_QWORD *)v38 = &off_24C46BA28;
          *((_QWORD *)v38 + 4) = v37;
          v38[40] = 0;
          *((_DWORD *)v38 + 11) = 0;
          v38[48] = 0;
          *((_DWORD *)v38 + 13) = 1065353216;
          *(_OWORD *)(v38 + 56) = 0u;
          *(_OWORD *)(v38 + 72) = 0u;
          *((_DWORD *)v38 + 22) = 1065353216;
          *((_OWORD *)v38 + 6) = 0u;
          *((_OWORD *)v38 + 7) = 0u;
          *((_DWORD *)v38 + 32) = 1065353216;
          *((_QWORD *)v38 + 3) = &off_24C4686A0;
          if ((*(_BYTE *)(v37 + 8) & 2) != 0)
            v39 = 2;
          else
            v39 = 1;
          v38[136] = v39;
          __p[0] = v38 + 24;
          __p[1] = v38;
          v136 = 0uLL;
          if (sub_20B9F026C((uint64_t)(v38 + 24)))
            v40 = (char **)(a3 + 1);
          else
            v40 = (char **)(a3 + 4);
          sub_20B9054E0(v40, (__int128 *)__p);
          v41 = (std::__shared_weak_count *)__p[1];
          if (__p[1])
          {
            v42 = (unint64_t *)((char *)__p[1] + 8);
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
          if (*((_QWORD *)&v136 + 1))
          {
            v45 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          ++v35;
        }
        while (v35 != v36);
        *(_QWORD *)(a1 + 480) = 0xFFFFLL;
        v47 = 1;
      }
      if (v137)
      {
        v138 = v137;
        operator delete(v137);
      }
      if ((*(_DWORD *)(a1 + 40) - 3) < 2)
      {
        v77 = 1;
        goto LABEL_193;
      }
LABEL_153:
      if (*(_BYTE *)(a1 + 472))
      {
        i = a3 + 1;
        sub_20B9E744C(a1, a3 + 1, (uint64_t)a3, 1);
        sub_20B9E744C(a1, a3 + 4, (uint64_t)a3, 0);
        v77 = 0;
        if (v7 == 2)
          goto LABEL_194;
        v88 = a3[16];
        if (v88)
        {
          v89 = a3[2] - a3[1];
          if (v89)
          {
            v90 = 0;
            v91 = v89 >> 4;
            if (v91 <= 1)
              v92 = 1;
            else
              v92 = v91;
            do
            {
              v93 = (_QWORD *)(*i + 16 * v90);
              if (v88 > (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v93 + 40))(*v93))
              {
                v94 = *(unsigned __int16 *)(*(_QWORD *)(*v93 + 8) + 2);
                v95 = &(&off_24C4A2768)[2 * v94];
                v96 = &(&off_24C4A0588)[2 * v94];
                if (*(_DWORD *)(a1 + 40) == 5)
                  v97 = (const char **)v95;
                else
                  v97 = (const char **)v96;
                v98 = *v97;
                if ((*(unsigned int (**)(void))(*(_QWORD *)*v93 + 64))() == 2)
                {
                  v99 = *(unsigned __int16 *)(*v93 + 112);
                  v100 = &(&off_24C4A2768)[2 * v99];
                  v101 = (const char **)&(&off_24C4A0588)[2 * v99];
                  if (*(_DWORD *)(*v93 + 20) == 2)
                    v101 = (const char **)v100;
                  v102 = *v101;
                }
                else
                {
                  v102 = 0;
                }
                v103 = *v98 - 97;
                v58 = v103 > 0xE;
                v104 = (1 << v103) & 0x4011;
                if (!v58 && v104 != 0)
                {
                  v106 = v92;
                  v107 = *(_QWORD **)(*(_QWORD *)(a1 + 8)
                                    + 8
                                    * (v88 - (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v93 + 40))(*v93)));
                  v108 = (_QWORD *)v107[1];
                  v109 = (_QWORD *)v107[2];
                  while (v108 != v109)
                  {
                    sub_20B9E9E3C(a1, (uint64_t)a3, v98, v102, v108);
                    v108 += 2;
                  }
                  v111 = (_QWORD *)v107[4];
                  v110 = (_QWORD *)v107[5];
                  v92 = v106;
                  for (i = a3 + 1; v111 != v110; v111 += 2)
                    sub_20B9E9E3C(a1, (uint64_t)a3, v98, v102, v111);
                }
              }
              ++v90;
            }
            while (v90 != v92);
          }
          v112 = sub_20B9E3078(*(_DWORD *)(a1 + 40), *(unsigned __int16 *)(*(_QWORD *)(a1 + 48) + 2 * v88), *(char **)(a1 + 72));
          if (v112 >= 1)
          {
            v113 = v88 - 1;
            v114 = v112;
            do
            {
              v115 = *(_QWORD *)(a1 + 72);
              v116 = *(unsigned __int8 *)(v115 + (v114 - 1));
              if (v116 == 118 || v116 == 105)
              {
                v117 = (v114 - 1);
                *(_BYTE *)(v115 + v114) = 0;
                v118 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 8 * v113);
                v119 = (_QWORD *)v118[1];
                v120 = (_QWORD *)v118[2];
                while (v119 != v120)
                {
                  sub_20B9E9E3C(a1, (uint64_t)a3, (const char *)(*(_QWORD *)(a1 + 72) + v117), (const char *)(*(_QWORD *)(a1 + 72) + v117), v119);
                  v119 += 2;
                }
                v121 = (_QWORD *)v118[4];
                v122 = (_QWORD *)v118[5];
                while (v121 != v122)
                {
                  sub_20B9E9E3C(a1, (uint64_t)a3, (const char *)(*(_QWORD *)(a1 + 72) + v117), (const char *)(*(_QWORD *)(a1 + 72) + v117), v121);
                  v121 += 2;
                }
              }
              v58 = v114-- <= 1;
            }
            while (!v58);
          }
        }
        v77 = 0;
        goto LABEL_206;
      }
      v77 = 0;
LABEL_193:
      if (v7 == 2)
      {
LABEL_194:
        if ((v47 & 1) == 0)
          goto LABEL_195;
        goto LABEL_210;
      }
LABEL_206:
      if (a3[2] == a3[1] && a3[5] == a3[4] && a3[8] == a3[7] && a3[11] == a3[10])
      {
LABEL_195:
        v123 = v133;
        if (v77)
        {
          if (v133 < 0 || a3[8] != a3[7])
            return;
          v124 = v133 + 1;
          while (1)
          {
            v125 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 8 * v123);
            if (v125[2] != v125[1])
              break;
            v126 = v123;
            if ((v125[5] != v125[4] || v125[14] != v125[13]) && v124 == v123 + 1)
              v124 = v123;
            --v123;
            if (v126 <= 0)
              return;
          }
          *(_QWORD *)(a1 + 480) = v124;
        }
        sub_20B9E3FD0(a1, (uint64_t)a3, v133 + 1);
        return;
      }
LABEL_210:
      *(_QWORD *)(a1 + 480) = 0xFFFFLL;
      return;
    }
    v51 = v34;
    v52 = *(_DWORD *)(a1 + 40);
    v130 = v52 - 3;
    v131 = (v52 - 3) < 2;
    v132 = v52;
    if ((a4 & 0x80000000) != 0)
    {
      v53 = 0;
    }
    else
    {
      v53 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * a4);
      if (v53
        && *(_QWORD *)(v53 + 16) == *(_QWORD *)(v53 + 8)
        && *(_QWORD *)(v53 + 40) == *(_QWORD *)(v53 + 32)
        && *(_QWORD *)(v53 + 64) == *(_QWORD *)(v53 + 56))
      {
        v55 = *(_QWORD *)(v53 + 80);
        v54 = *(_QWORD *)(v53 + 88);
        v56 = v54 == v55;
        if (v54 == v55)
          v57 = 0;
        else
          v57 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * a4);
        v58 = !v56 || v130 > 1;
        if (!v58)
        {
          if (*(_QWORD *)(v53 + 112) == *(_QWORD *)(v53 + 104))
            return;
          v53 = 0;
          v68 = a4 + 1;
          goto LABEL_93;
        }
        v53 = v57;
      }
    }
    v68 = (int)(a4 + 1);
    if (v52 == 1 && v34 >= 2)
    {
      if (v68 >= 0xFF)
        sub_20B83B31C("bitset set argument out of range");
      *(_QWORD *)(a1 + 8 * ((unint64_t)(int)(a4 + 1) >> 6) + 504) |= 1 << (a4 + 1);
    }
    else if (v52 != 1)
    {
      goto LABEL_93;
    }
    v69 = *(void (****)(_QWORD, unint64_t, _QWORD *))(a1 + 608);
    if (v69)
    {
      v134[0] = MEMORY[0x24BDAC760];
      v134[1] = 0x40000000;
      v134[2] = sub_20B9E72A0;
      v134[3] = &unk_24C46C790;
      v134[4] = a1;
      v134[5] = (int)(a4 + 1);
      (**v69)(v69, v68, v134);
    }
LABEL_93:
    if (v51 >= 1)
    {
      v70 = 0;
      v71 = v68 - 1;
      while (1)
      {
        v72 = *(_BYTE *)(*(_QWORD *)(a1 + 72) + v70);
        if (*(_DWORD *)(a1 + 40) != 3)
          break;
        if (v53 && *(_QWORD *)(v53 + 16) == *(_QWORD *)(v53 + 8))
        {
          v75 = *(uint64_t **)(v53 + 32);
          v76 = *(uint64_t **)(v53 + 40);
          v73 = v72;
LABEL_109:
          sub_20B9E8354(a1, v75, v76, v73, v68, 0, 1.0);
          sub_20B9E8354(a1, *(uint64_t **)(v53 + 56), *(uint64_t **)(v53 + 64), v73, v68, 1, 1.0);
          sub_20B9E8354(a1, *(uint64_t **)(v53 + 80), *(uint64_t **)(v53 + 88), v73, v68, 1, 1.0);
          goto LABEL_110;
        }
        sub_20B9E72E4(a1, (_QWORD *)v53, v68, v72, 0);
LABEL_110:
        if (++v70 == v51)
          goto LABEL_111;
      }
      v73 = v72;
      sub_20B9E72E4(a1, (_QWORD *)v53, v68, v72, 0);
      if (!v53 || (*(_DWORD *)(v53 + 168) - 1) < 2)
        goto LABEL_110;
      if (v71 <= (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3)
      {
        v74 = 0;
        while (word_20BA4B1C4[v74] != *(_WORD *)(*(_QWORD *)(a1 + 48) + 2 * v71))
        {
          if (++v74 == 5)
            goto LABEL_108;
        }
        if (v74 != -1)
          goto LABEL_110;
      }
LABEL_108:
      sub_20B9E8354(a1, *(uint64_t **)(v53 + 8), *(uint64_t **)(v53 + 16), v73, v68, 0, 1.0);
      v75 = *(uint64_t **)(v53 + 32);
      v76 = *(uint64_t **)(v53 + 40);
      goto LABEL_109;
    }
LABEL_111:
    if (v132 == 3)
    {
      v47 = 1;
      v77 = v131;
      goto LABEL_193;
    }
    if (v53 && *(_QWORD *)(v53 + 16) == *(_QWORD *)(v53 + 8) && *(_QWORD *)(v53 + 40) != *(_QWORD *)(v53 + 32))
    {
      if (a3[2] == a3[1] && a3[5] == a3[4])
      {
        if (v51 >= 1)
        {
          for (j = 0; j != v51; sub_20B9E72E4(a1, (_QWORD *)v53, v68, *(char *)(*(_QWORD *)(a1 + 72) + j++), 1))
            ;
        }
        if (v132 == 4)
          goto LABEL_117;
        v80 = *(_DWORD *)(a1 + 40);
        if ((v80 == 5 || v80 == 0)
          && a3[5] != a3[4]
          && *(_QWORD *)(v53 + 64) == *(_QWORD *)(v53 + 56)
          && (*(_BYTE *)(*(_QWORD *)(**(_QWORD **)(v53 + 32) + 8) + 8) & 4) != 0)
        {
          sub_20B9E3078(v80, *(unsigned __int16 *)(*(_QWORD *)(a1 + 48) + 2 * v133), (char *)&v137);
          BYTE1(v137) = **(_BYTE **)(a1 + 72);
          v82 = *(unsigned __int16 ****)(a1 + 32);
          v83 = **v82;
          if (v83)
          {
            v84 = 0;
            v85 = 1;
            do
            {
              v86 = sub_20B9F17AC((uint64_t)v82, v83, *((char *)&v137 + v84));
              v83 = v86;
              if ((v85 & 1) == 0)
                break;
              v85 = 0;
              v84 = 1;
            }
            while (v86);
            if (v86 && (v86[4] & 2) != 0)
              sub_20B9E7100(a1, (uint64_t)a3, (uint64_t)v86, 0);
          }
        }
        v78 = 1;
        goto LABEL_149;
      }
      v78 = 1;
    }
    else
    {
      v78 = 0;
    }
    if (v132 == 4)
    {
LABEL_117:
      v77 = 1;
      v47 = 1;
      goto LABEL_193;
    }
LABEL_149:
    if (v78 && *(_DWORD *)(a1 + 40) == 1 && a3[2] == a3[1])
    {
      v127 = (uint64_t *)a3[4];
      v128 = (uint64_t *)a3[5];
      while (v127 != v128)
      {
        v129 = *v127;
        v127 += 2;
        *(_BYTE *)(v129 + 24) = 0;
      }
    }
    v47 = 1;
    v77 = 1;
    if (v130 < 2)
      goto LABEL_193;
    goto LABEL_153;
  }
  if ((a4 & 0x80000000) == 0)
  {
    if ((*(_BYTE *)(a1 + 553) & 0x80) != 0)
      *(_BYTE *)(a1 + 556) = 1;
    v8 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 8 * a4);
    v9 = (__int128 *)v8[1];
    v10 = (__int128 *)v8[2];
    if (v9 != v10)
    {
      v11 = (__int128 *)v8[1];
      do
      {
        v12 = *(_BYTE **)v11++;
        ++v12[16];
        if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v12 + 96))(v12))
          v13 = (char **)(a3 + 1);
        else
          v13 = (char **)(a3 + 4);
        sub_20B9054E0(v13, v9);
        v9 = v11;
      }
      while (v11 != v10);
    }
    v14 = (__int128 *)v8[4];
    v15 = (__int128 *)v8[5];
    if (v14 != v15)
    {
      v16 = (__int128 *)v8[4];
      do
      {
        v17 = *(_BYTE **)v16++;
        ++v17[16];
        if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v17 + 96))(v17))
          v18 = (char **)(a3 + 1);
        else
          v18 = (char **)(a3 + 4);
        sub_20B9054E0(v18, v14);
        v14 = v16;
      }
      while (v16 != v15);
    }
    v19 = (__int128 *)v8[10];
    v20 = (__int128 *)v8[11];
    if (v19 != v20)
    {
      v21 = (__int128 *)v8[10];
      do
      {
        v22 = *(_BYTE **)v21++;
        ++v22[16];
        if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v22 + 96))(v22))
          v23 = (char **)(a3 + 1);
        else
          v23 = (char **)(a3 + 4);
        sub_20B9054E0(v23, v19);
        v19 = v21;
      }
      while (v21 != v20);
    }
    v24 = (__int128 *)v8[7];
    v25 = (__int128 *)v8[8];
    if (v24 != v25)
    {
      v26 = (char **)(a3 + 4);
      v27 = (char **)(a3 + 1);
      v28 = (__int128 *)v8[7];
      do
      {
        v29 = *(_BYTE **)v28++;
        ++v29[16];
        if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v29 + 96))(v29))
          v30 = v27;
        else
          v30 = v26;
        sub_20B9054E0(v30, v24);
        v24 = v28;
      }
      while (v28 != v25);
    }
    v32 = v8[1];
    for (k = v8[2]; k != v32; k = sub_20B811FE4(k - 16))
      ;
    v8[2] = v32;
    v49 = v8[4];
    for (m = v8[5]; m != v49; m = sub_20B811FE4(m - 16))
      ;
    v8[5] = v49;
  }
  if (v7 == 2)
  {
    v50 = *(_QWORD *)(a1 + 488);
    *(_BYTE *)(v50 + 32) = 0;
    *(_QWORD *)(v50 + 40) = 0;
    *(_BYTE *)(v50 + 48) = 0;
  }
}

void sub_20B9E4D7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,char a22)
{
  uint64_t v22;
  void *v24;

  sub_20B811FE4((uint64_t)&a22);
  if (__p)
    operator delete(__p);
  v24 = *(void **)(v22 - 104);
  if (v24)
  {
    *(_QWORD *)(v22 - 96) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20B9E4DF4(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  char *v8;
  char *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t **v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *k;
  int v20;
  uint64_t *v21;
  uint64_t **v22;
  uint64_t *v23;
  __int16 v24;
  __int16 v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  _WORD *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  __int16 v46;
  char *v47;
  __int16 v48;
  uint64_t *v49;
  uint64_t **v50;
  unsigned __int16 *v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *n;
  uint64_t v58;
  _QWORD *v59;
  unint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  int v74;
  uint64_t v75;
  _QWORD *v76;
  unint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t v91;
  unsigned __int16 *v92;
  unsigned __int16 *v93;
  unsigned __int16 *v94;
  unsigned __int16 v95;
  unsigned __int16 *v96;
  unsigned __int16 v97;
  unsigned int v98;
  BOOL v99;
  unint64_t v100;
  uint64_t ii;
  unsigned __int16 *v102;
  unsigned __int16 *v103;
  uint64_t v104;
  _QWORD *v105;
  _QWORD *jj;
  uint64_t v107;
  _QWORD *v108;
  unint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t *v123;
  _QWORD *v124;
  _QWORD *v125;
  uint64_t v126;
  _QWORD *v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  char *v135;
  char *v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t *i;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  char *v149;
  char *v150;
  uint64_t v151;
  uint64_t *j;
  uint64_t *v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  _QWORD *v162;
  char *v163;
  char *v164;
  uint64_t v165;
  char *v166;
  unint64_t v167;
  _WORD *v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  char *v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  _QWORD *v179;
  _QWORD *v180;
  char *v181;
  unint64_t v182;
  _WORD *v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  unint64_t v188;
  uint64_t v189;
  char *v190;
  char *v191;
  __int16 v192;
  uint64_t v193;
  _QWORD *v194;
  unint64_t v195;
  _QWORD *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  _QWORD *v203;
  char *v204;
  char *v205;
  uint64_t v206;
  BOOL v207;
  uint64_t v208;
  unsigned int v209;
  char *v210;
  unsigned int v211;
  uint64_t v212;
  uint64_t v213;
  unsigned int v214;
  uint64_t v215;
  char *v216;
  int64_t v217;
  unsigned __int16 *v218;
  uint64_t v219;
  unsigned __int16 *v220;
  unsigned __int16 *kk;
  uint64_t v222;
  _QWORD *v223;
  _QWORD *v224;
  char *v225;
  char *v226;
  __int16 v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  _QWORD *v231;
  _QWORD *v232;
  uint64_t v233;
  char *v234;
  unint64_t v235;
  _WORD *v236;
  char *v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  unint64_t v241;
  uint64_t v242;
  char *v243;
  char *v244;
  __int16 v245;
  uint64_t v246;
  uint64_t *v247;
  unint64_t v248;
  uint64_t v249;
  void *v250;
  int v251;
  unsigned __int16 *m;
  uint64_t v254;
  void **v255;
  uint64_t *v256;
  _QWORD *v257[2];
  void *__p;
  char *v259;
  char *v260;
  BOOL (*v261)(uint64_t, uint64_t);
  uint64_t v262;
  int v263;
  uint64_t v264;

  v264 = *MEMORY[0x24BDAC8D0];
  if (a2 > 0xC)
    return result;
  v2 = result;
  v3 = *(_QWORD **)(result + 560);
  *(_QWORD *)(result + 568) = v3;
  v4 = (void **)(result + 584);
  *(_QWORD *)(result + 592) = *(_QWORD *)(result + 584);
  if (!a2)
  {
    v6 = **(_QWORD ***)(result + 8);
LABEL_181:
    v138 = (uint64_t *)v6[1];
    for (i = (uint64_t *)v6[2]; v138 != i; v138 += 2)
    {
      v140 = *v138;
      v141 = *(_QWORD *)(v2 + 576);
      if ((unint64_t)v3 >= v141)
      {
        v142 = *(_QWORD *)(v2 + 560);
        v143 = ((uint64_t)v3 - v142) >> 3;
        if ((unint64_t)(v143 + 1) >> 61)
LABEL_354:
          sub_20B80CDD8();
        v144 = v141 - v142;
        v145 = v144 >> 2;
        if (v144 >> 2 <= (unint64_t)(v143 + 1))
          v145 = v143 + 1;
        if ((unint64_t)v144 >= 0x7FFFFFFFFFFFFFF8)
          v146 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v146 = v145;
        if (v146)
          v146 = (unint64_t)sub_20B87FB70(v146);
        else
          v147 = 0;
        v148 = (_QWORD *)(v146 + 8 * v143);
        *v148 = v140;
        v3 = v148 + 1;
        v149 = *(char **)(v2 + 568);
        v150 = *(char **)(v2 + 560);
        if (v149 != v150)
        {
          do
          {
            v151 = *((_QWORD *)v149 - 1);
            v149 -= 8;
            *--v148 = v151;
          }
          while (v149 != v150);
          v149 = *(char **)(v2 + 560);
        }
        *(_QWORD *)(v2 + 560) = v148;
        *(_QWORD *)(v2 + 568) = v3;
        *(_QWORD *)(v2 + 576) = v146 + 8 * v147;
        if (v149)
          operator delete(v149);
      }
      else
      {
        *v3++ = v140;
      }
      *(_QWORD *)(v2 + 568) = v3;
    }
    v153 = (uint64_t *)v6[4];
    for (j = (uint64_t *)v6[5]; v153 != j; v153 += 2)
    {
      v154 = *v153;
      v155 = *(_QWORD *)(v2 + 576);
      if ((unint64_t)v3 >= v155)
      {
        v156 = *(_QWORD *)(v2 + 560);
        v157 = ((uint64_t)v3 - v156) >> 3;
        if ((unint64_t)(v157 + 1) >> 61)
          goto LABEL_354;
        v158 = v155 - v156;
        v159 = v158 >> 2;
        if (v158 >> 2 <= (unint64_t)(v157 + 1))
          v159 = v157 + 1;
        if ((unint64_t)v158 >= 0x7FFFFFFFFFFFFFF8)
          v160 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v160 = v159;
        if (v160)
          v160 = (unint64_t)sub_20B87FB70(v160);
        else
          v161 = 0;
        v162 = (_QWORD *)(v160 + 8 * v157);
        *v162 = v154;
        v3 = v162 + 1;
        v163 = *(char **)(v2 + 568);
        v164 = *(char **)(v2 + 560);
        if (v163 != v164)
        {
          do
          {
            v165 = *((_QWORD *)v163 - 1);
            v163 -= 8;
            *--v162 = v165;
          }
          while (v163 != v164);
          v163 = *(char **)(v2 + 560);
        }
        *(_QWORD *)(v2 + 560) = v162;
        *(_QWORD *)(v2 + 568) = v3;
        *(_QWORD *)(v2 + 576) = v160 + 8 * v161;
        if (v163)
          operator delete(v163);
      }
      else
      {
        *v3++ = v154;
      }
      *(_QWORD *)(v2 + 568) = v3;
    }
    v166 = *(char **)(v2 + 592);
    v167 = *(_QWORD *)(v2 + 600);
    if ((unint64_t)v166 >= v167)
    {
      v169 = (char *)*v4;
      v170 = v166 - (_BYTE *)*v4;
      if (v170 <= -3)
        sub_20B80CDD8();
      v171 = v170 >> 1;
      v172 = v167 - (_QWORD)v169;
      if (v172 <= (v170 >> 1) + 1)
        v173 = v171 + 1;
      else
        v173 = v172;
      if (v172 >= 0x7FFFFFFFFFFFFFFELL)
        v174 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v174 = v173;
      if (v174)
      {
        v175 = (char *)sub_20B80FD48(v2 + 600, v174);
        v166 = *(char **)(v2 + 592);
        v169 = *(char **)(v2 + 584);
      }
      else
      {
        v175 = 0;
      }
      v225 = &v175[2 * v171];
      v226 = &v175[2 * v174];
      *(_WORD *)v225 = 0;
      v168 = v225 + 2;
      while (v166 != v169)
      {
        v227 = *((_WORD *)v166 - 1);
        v166 -= 2;
        *((_WORD *)v225 - 1) = v227;
        v225 -= 2;
      }
      *(_QWORD *)(v2 + 584) = v225;
      *(_QWORD *)(v2 + 592) = v168;
      *(_QWORD *)(v2 + 600) = v226;
      if (v169)
        operator delete(v169);
    }
    else
    {
      *(_WORD *)v166 = 0;
      v168 = v166 + 2;
    }
    *(_QWORD *)(v2 + 592) = v168;
    goto LABEL_343;
  }
  v5 = *(_QWORD *)(result + 8);
  if (*(_QWORD *)(result + 16) != v5)
  {
    v6 = *(_QWORD **)v5;
    if ((*(_DWORD *)(*(_QWORD *)v5 + 168) - 1) <= 1)
      goto LABEL_181;
  }
  v255 = (void **)(result + 584);
  v259 = 0;
  v263 = 0;
  v262 = 0;
  v7 = (char *)operator new(2uLL);
  v257[1] = 0;
  __p = v7;
  *(_WORD *)v7 = -1;
  v8 = v7 + 2;
  v260 = v8;
  v251 = a2 + 1;
  v254 = v2 + 600;
  v256 = (uint64_t *)v257;
  v257[0] = 0;
  do
  {
    v11 = *((unsigned __int16 *)v8 - 1);
    v9 = v8 - 2;
    v10 = v11;
    if (v11 == 0xFFFF)
      v12 = (unsigned __int16)a2;
    else
      v12 = v10;
    v259 = v9;
    v13 = *(_QWORD *)(v2 + 8);
    v14 = *(_QWORD *)(v13 + 8 * v12);
    v15 = (uint64_t **)(v14 + 136);
    if (v12 == a2)
    {
      v16 = *(_QWORD **)(v13 + 8 * a2);
      if (v16[2] != v16[1] && v16[5] != v16[4])
      {
        sub_20B9E8D3C((uint64_t *)&v256, *(_QWORD **)(v14 + 136), (_QWORD *)(v14 + 144));
        v17 = *(_QWORD *)(*(_QWORD *)(v2 + 8) + 8 * a2);
        v18 = *(_QWORD **)(v17 + 32);
        for (k = *(_QWORD **)(v17 + 40); v18 != k; v18 += 2)
        {
          if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v18 + 64))(*v18) == 2)
            break;
          if ((*(_BYTE *)(*(_QWORD *)(*v18 + 8) + 8) & 1) != 0)
          {
            v20 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v18 + 40))(*v18);
            if (v251 - v20 >= 1
              && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 8) + 8 * (a2 - v20)) + 16) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 8) + 8 * (a2 - v20)) + 8))
            {
              LOWORD(v261) = v251 - v20;
              sub_20B871FAC(&v256, (unsigned __int16 *)&v261, &v261);
            }
          }
        }
        v15 = &v256;
      }
    }
    v23 = *v15;
    v22 = v15 + 1;
    v21 = v23;
    if (v23 != (uint64_t *)v22)
    {
      do
      {
        v24 = *((_WORD *)v21 + 13);
        if (v24)
        {
          v25 = v24 - 1;
          v26 = (unsigned __int16)(v24 - 1);
          if (!*((_BYTE *)&v262 + v26))
          {
            v27 = v259;
            if (v259 >= v260)
            {
              v39 = (char *)__p;
              v40 = v259 - (_BYTE *)__p;
              if (v259 - (_BYTE *)__p < -2)
LABEL_351:
                sub_20B80CDD8();
              v41 = v40 >> 1;
              if (v260 - (_BYTE *)__p <= (unint64_t)((v40 >> 1) + 1))
                v42 = v41 + 1;
              else
                v42 = v260 - (_BYTE *)__p;
              if ((unint64_t)(v260 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFELL)
                v43 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v43 = v42;
              if (v43)
              {
                v44 = (char *)sub_20B80FD48((uint64_t)&v260, v43);
                v39 = (char *)__p;
                v27 = v259;
              }
              else
              {
                v44 = 0;
              }
              v47 = &v44[2 * v41];
              *(_WORD *)v47 = v25;
              v28 = v47 + 2;
              while (v27 != v39)
              {
                v48 = *((_WORD *)v27 - 1);
                v27 -= 2;
                *((_WORD *)v47 - 1) = v48;
                v47 -= 2;
              }
              __p = v47;
              v259 = v28;
              v260 = &v44[2 * v43];
              if (v39)
                operator delete(v39);
            }
            else
            {
              *(_WORD *)v259 = v25;
              v28 = v27 + 2;
            }
            v259 = v28;
            *((_BYTE *)&v262 + v26) = 1;
          }
        }
        else
        {
          v29 = *(char **)(v2 + 592);
          v30 = *(_QWORD *)(v2 + 600);
          if ((unint64_t)v29 >= v30)
          {
            v32 = (char *)*v255;
            v33 = v29 - (_BYTE *)*v255;
            if (v33 <= -3)
              goto LABEL_351;
            v34 = v33 >> 1;
            v35 = v30 - (_QWORD)v32;
            if (v35 <= (v33 >> 1) + 1)
              v36 = v34 + 1;
            else
              v36 = v35;
            if (v35 >= 0x7FFFFFFFFFFFFFFELL)
              v37 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v37 = v36;
            if (v37)
            {
              v38 = (char *)sub_20B80FD48(v254, v37);
              v29 = *(char **)(v2 + 592);
              v32 = *(char **)(v2 + 584);
            }
            else
            {
              v38 = 0;
            }
            v45 = &v38[2 * v34];
            *(_WORD *)v45 = v12;
            v31 = v45 + 2;
            while (v29 != v32)
            {
              v46 = *((_WORD *)v29 - 1);
              v29 -= 2;
              *((_WORD *)v45 - 1) = v46;
              v45 -= 2;
            }
            *(_QWORD *)(v2 + 584) = v45;
            *(_QWORD *)(v2 + 592) = v31;
            *(_QWORD *)(v2 + 600) = &v38[2 * v37];
            if (v32)
              operator delete(v32);
          }
          else
          {
            *(_WORD *)v29 = v12;
            v31 = v29 + 2;
          }
          *(_QWORD *)(v2 + 592) = v31;
        }
        v49 = (uint64_t *)v21[1];
        if (v49)
        {
          do
          {
            v50 = (uint64_t **)v49;
            v49 = (uint64_t *)*v49;
          }
          while (v49);
        }
        else
        {
          do
          {
            v50 = (uint64_t **)v21[2];
            v207 = *v50 == v21;
            v21 = (uint64_t *)v50;
          }
          while (!v207);
        }
        v21 = (uint64_t *)v50;
      }
      while (v50 != v22);
    }
    v8 = v259;
  }
  while (v259 != __p);
  v51 = *(unsigned __int16 **)(v2 + 584);
  for (m = *(unsigned __int16 **)(v2 + 592); v51 != m; ++v51)
  {
    v52 = *v51;
    v53 = *(_QWORD **)(*(_QWORD *)(v2 + 8) + 8 * v52);
    v54 = v53 + 1;
    v55 = 1;
    if (v53[2] == v53[1])
    {
      v55 = 4;
      v54 = v53 + 4;
    }
    v56 = (_QWORD *)v53[v55];
    for (n = (_QWORD *)v54[1]; v56 != n; v56 += 2)
    {
      if ((_DWORD)v52 + 1 == (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v56 + 40))(*v56))
      {
        v58 = *v56;
        v59 = *(_QWORD **)(v2 + 568);
        v60 = *(_QWORD *)(v2 + 576);
        if ((unint64_t)v59 >= v60)
        {
          v62 = *(_QWORD *)(v2 + 560);
          v63 = ((uint64_t)v59 - v62) >> 3;
          if ((unint64_t)(v63 + 1) >> 61)
            sub_20B80CDD8();
          v64 = v60 - v62;
          v65 = v64 >> 2;
          if (v64 >> 2 <= (unint64_t)(v63 + 1))
            v65 = v63 + 1;
          if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8)
            v66 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v66 = v65;
          if (v66)
            v66 = (unint64_t)sub_20B87FB70(v66);
          else
            v67 = 0;
          v68 = (_QWORD *)(v66 + 8 * v63);
          *v68 = v58;
          v61 = v68 + 1;
          v69 = *(char **)(v2 + 568);
          v70 = *(char **)(v2 + 560);
          if (v69 != v70)
          {
            do
            {
              v71 = *((_QWORD *)v69 - 1);
              v69 -= 8;
              *--v68 = v71;
            }
            while (v69 != v70);
            v69 = *(char **)(v2 + 560);
          }
          *(_QWORD *)(v2 + 560) = v68;
          *(_QWORD *)(v2 + 568) = v61;
          *(_QWORD *)(v2 + 576) = v66 + 8 * v67;
          if (v69)
            operator delete(v69);
        }
        else
        {
          *v59 = v58;
          v61 = v59 + 1;
        }
        *(_QWORD *)(v2 + 568) = v61;
      }
    }
    if (*(_WORD *)(*(_QWORD *)(v2 + 48) + 2 * v52) == 39 && v53[2] != v53[1])
    {
      v72 = (_QWORD *)v53[4];
      v73 = (_QWORD *)v53[5];
      if (v72 != v73)
      {
        v74 = v52 + 1;
        do
        {
          if (v74 == (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v72 + 40))(*v72))
          {
            v75 = *v72;
            if ((*(_BYTE *)(*(_QWORD *)(*v72 + 8) + 8) & 1) != 0)
            {
              v76 = *(_QWORD **)(v2 + 568);
              v77 = *(_QWORD *)(v2 + 576);
              if ((unint64_t)v76 >= v77)
              {
                v79 = *(_QWORD *)(v2 + 560);
                v80 = ((uint64_t)v76 - v79) >> 3;
                if ((unint64_t)(v80 + 1) >> 61)
                  sub_20B80CDD8();
                v81 = v77 - v79;
                v82 = v81 >> 2;
                if (v81 >> 2 <= (unint64_t)(v80 + 1))
                  v82 = v80 + 1;
                if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF8)
                  v83 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v83 = v82;
                if (v83)
                  v83 = (unint64_t)sub_20B87FB70(v83);
                else
                  v84 = 0;
                v85 = (_QWORD *)(v83 + 8 * v80);
                *v85 = v75;
                v78 = v85 + 1;
                v86 = *(char **)(v2 + 568);
                v87 = *(char **)(v2 + 560);
                if (v86 != v87)
                {
                  do
                  {
                    v88 = *((_QWORD *)v86 - 1);
                    v86 -= 8;
                    *--v85 = v88;
                  }
                  while (v86 != v87);
                  v86 = *(char **)(v2 + 560);
                }
                *(_QWORD *)(v2 + 560) = v85;
                *(_QWORD *)(v2 + 568) = v78;
                *(_QWORD *)(v2 + 576) = v83 + 8 * v84;
                if (v86)
                  operator delete(v86);
              }
              else
              {
                *v76 = v75;
                v78 = v76 + 1;
              }
              *(_QWORD *)(v2 + 568) = v78;
            }
          }
          v72 += 2;
        }
        while (v72 != v73);
      }
    }
  }
  v89 = *(uint64_t **)(v2 + 568);
  v90 = *(uint64_t **)(v2 + 560);
  v91 = (char *)v89 - (char *)v90;
  if (v89 == v90)
  {
    v176 = a2;
    if (a2 >= 6)
      v177 = 6;
    else
      v177 = a2;
    do
    {
      while (1)
      {
        v178 = *(_QWORD *)(*(_QWORD *)(v2 + 8) + 8 * v176);
        v179 = *(_QWORD **)(v178 + 56);
        v180 = *(_QWORD **)(v178 + 64);
        if (v179 != v180)
          break;
        if (!--v177)
          goto LABEL_341;
      }
      do
      {
        if (v177 + 1 == (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v179 + 40))(*v179)
          && (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v179 + 96))(*v179))
        {
          v181 = *(char **)(v2 + 592);
          v182 = *(_QWORD *)(v2 + 600);
          if ((unint64_t)v181 >= v182)
          {
            v184 = (char *)*v255;
            v185 = v181 - (_BYTE *)*v255;
            if (v185 <= -3)
              sub_20B80CDD8();
            v186 = v185 >> 1;
            v187 = v182 - (_QWORD)v184;
            if (v187 <= (v185 >> 1) + 1)
              v188 = v186 + 1;
            else
              v188 = v187;
            if (v187 >= 0x7FFFFFFFFFFFFFFELL)
              v189 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v189 = v188;
            if (v189)
            {
              v190 = (char *)sub_20B80FD48(v254, v189);
              v181 = *(char **)(v2 + 592);
              v184 = *(char **)(v2 + 584);
            }
            else
            {
              v190 = 0;
            }
            v191 = &v190[2 * v186];
            *(_WORD *)v191 = v177;
            v183 = v191 + 2;
            while (v181 != v184)
            {
              v192 = *((_WORD *)v181 - 1);
              v181 -= 2;
              *((_WORD *)v191 - 1) = v192;
              v191 -= 2;
            }
            *(_QWORD *)(v2 + 584) = v191;
            *(_QWORD *)(v2 + 592) = v183;
            *(_QWORD *)(v2 + 600) = &v190[2 * v189];
            if (v184)
              operator delete(v184);
          }
          else
          {
            *(_WORD *)v181 = v177;
            v183 = v181 + 2;
          }
          *(_QWORD *)(v2 + 592) = v183;
          v193 = *v179;
          v194 = *(_QWORD **)(v2 + 568);
          v195 = *(_QWORD *)(v2 + 576);
          if ((unint64_t)v194 >= v195)
          {
            v197 = *(_QWORD *)(v2 + 560);
            v198 = ((uint64_t)v194 - v197) >> 3;
            if ((unint64_t)(v198 + 1) >> 61)
              sub_20B80CDD8();
            v199 = v195 - v197;
            v200 = v199 >> 2;
            if (v199 >> 2 <= (unint64_t)(v198 + 1))
              v200 = v198 + 1;
            if ((unint64_t)v199 >= 0x7FFFFFFFFFFFFFF8)
              v201 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v201 = v200;
            if (v201)
              v201 = (unint64_t)sub_20B87FB70(v201);
            else
              v202 = 0;
            v203 = (_QWORD *)(v201 + 8 * v198);
            *v203 = v193;
            v196 = v203 + 1;
            v204 = *(char **)(v2 + 568);
            v205 = *(char **)(v2 + 560);
            if (v204 != v205)
            {
              do
              {
                v206 = *((_QWORD *)v204 - 1);
                v204 -= 8;
                *--v203 = v206;
              }
              while (v204 != v205);
              v204 = *(char **)(v2 + 560);
            }
            *(_QWORD *)(v2 + 560) = v203;
            *(_QWORD *)(v2 + 568) = v196;
            *(_QWORD *)(v2 + 576) = v201 + 8 * v202;
            if (v204)
              operator delete(v204);
          }
          else
          {
            *v194 = v193;
            v196 = v194 + 1;
          }
          *(_QWORD *)(v2 + 568) = v196;
        }
        v179 += 2;
      }
      while (v179 != v180);
      v207 = *(_QWORD *)(v2 + 560) != *(_QWORD *)(v2 + 568) || --v177 == 0;
      v176 = a2;
    }
    while (!v207);
    goto LABEL_341;
  }
  if (*(_DWORD *)(v2 + 40) == 1)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*v90 + 96))(*v90))
    {
      v92 = *(unsigned __int16 **)(v2 + 584);
      v93 = *(unsigned __int16 **)(v2 + 592);
      if (v92 != v93)
      {
        v94 = v92 + 1;
        if (v92 + 1 != v93)
        {
          v95 = *v92;
          v96 = v92 + 1;
          do
          {
            v98 = *v96++;
            v97 = v98;
            v99 = v95 >= v98;
            if (v95 <= v98)
              v95 = v97;
            if (!v99)
              v92 = v94;
            v94 = v96;
          }
          while (v96 != v93);
        }
      }
      v100 = *v92;
      if (v100 >= 2)
      {
        for (ii = 1; ii != v100; ++ii)
        {
          v102 = *(unsigned __int16 **)(v2 + 584);
          v103 = *(unsigned __int16 **)(v2 + 592);
          if (v102 != v103)
          {
            while (*v102 != (unsigned __int16)ii)
            {
              if (++v102 == v103)
              {
                v102 = *(unsigned __int16 **)(v2 + 592);
                break;
              }
            }
          }
          if (v102 == v103)
          {
            v104 = *(_QWORD *)(*(_QWORD *)(v2 + 8) + 8 * ii);
            v105 = *(_QWORD **)(v104 + 8);
            for (jj = *(_QWORD **)(v104 + 16); v105 != jj; v105 += 2)
            {
              if (ii + 1 == (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v105 + 40))(*v105))
              {
                v107 = *v105;
                v108 = *(_QWORD **)(v2 + 568);
                v109 = *(_QWORD *)(v2 + 576);
                if ((unint64_t)v108 >= v109)
                {
                  v111 = *(_QWORD *)(v2 + 560);
                  v112 = ((uint64_t)v108 - v111) >> 3;
                  if ((unint64_t)(v112 + 1) >> 61)
                    sub_20B80CDD8();
                  v113 = v109 - v111;
                  v114 = v113 >> 2;
                  if (v113 >> 2 <= (unint64_t)(v112 + 1))
                    v114 = v112 + 1;
                  if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFF8)
                    v115 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v115 = v114;
                  if (v115)
                    v115 = (unint64_t)sub_20B87FB70(v115);
                  else
                    v116 = 0;
                  v117 = (_QWORD *)(v115 + 8 * v112);
                  *v117 = v107;
                  v110 = v117 + 1;
                  v118 = *(char **)(v2 + 568);
                  v119 = *(char **)(v2 + 560);
                  if (v118 != v119)
                  {
                    do
                    {
                      v120 = *((_QWORD *)v118 - 1);
                      v118 -= 8;
                      *--v117 = v120;
                    }
                    while (v118 != v119);
                    v118 = *(char **)(v2 + 560);
                  }
                  *(_QWORD *)(v2 + 560) = v117;
                  *(_QWORD *)(v2 + 568) = v110;
                  *(_QWORD *)(v2 + 576) = v115 + 8 * v116;
                  if (v118)
                    operator delete(v118);
                }
                else
                {
                  *v108 = v107;
                  v110 = v108 + 1;
                }
                *(_QWORD *)(v2 + 568) = v110;
              }
            }
          }
        }
      }
    }
    v121 = **(_QWORD **)(v2 + 8);
    v122 = *(uint64_t **)(v121 + 32);
    v123 = *(uint64_t **)(v121 + 40);
    if (v122 != v123)
    {
      v124 = *(_QWORD **)(v2 + 568);
      do
      {
        v125 = *(_QWORD **)(v2 + 560);
        v126 = *v122;
        v127 = v124;
        if (v125 != v124)
        {
          v127 = *(_QWORD **)(v2 + 560);
          while (*v127 != v126)
          {
            if (++v127 == v124)
            {
              v127 = v124;
              break;
            }
          }
        }
        if (v127 == v124)
        {
          v128 = *(_QWORD *)(v2 + 576);
          if ((unint64_t)v124 >= v128)
          {
            v129 = v124 - v125;
            if ((unint64_t)(v129 + 1) >> 61)
              sub_20B80CDD8();
            v130 = v128 - (_QWORD)v125;
            v131 = v130 >> 2;
            if (v130 >> 2 <= (unint64_t)(v129 + 1))
              v131 = v129 + 1;
            if ((unint64_t)v130 >= 0x7FFFFFFFFFFFFFF8)
              v132 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v132 = v131;
            if (v132)
              v132 = (unint64_t)sub_20B87FB70(v132);
            else
              v133 = 0;
            v134 = (_QWORD *)(v132 + 8 * v129);
            *v134 = v126;
            v124 = v134 + 1;
            v135 = *(char **)(v2 + 568);
            v136 = *(char **)(v2 + 560);
            if (v135 != v136)
            {
              do
              {
                v137 = *((_QWORD *)v135 - 1);
                v135 -= 8;
                *--v134 = v137;
              }
              while (v135 != v136);
              v135 = *(char **)(v2 + 560);
            }
            *(_QWORD *)(v2 + 560) = v134;
            *(_QWORD *)(v2 + 568) = v124;
            *(_QWORD *)(v2 + 576) = v132 + 8 * v133;
            if (v135)
              operator delete(v135);
          }
          else
          {
            *v124++ = v126;
          }
          *(_QWORD *)(v2 + 568) = v124;
        }
        v122 += 2;
      }
      while (v122 != v123);
    }
    goto LABEL_341;
  }
  v261 = sub_20B9E8C48;
  sub_20B9ED3EC((uint64_t)v90, v89, (uint64_t (**)(_QWORD))&v261, 126 - 2 * __clz(v91 >> 3), 1);
  v208 = **(_QWORD **)(v2 + 560);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v208 + 96))(v208))
  {
    if ((unint64_t)v91 >= 9)
    {
      v209 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v208 + 40))(v208);
      v210 = (char *)(*(_QWORD *)(v2 + 560) + 8);
      if (v210 != *(char **)(v2 + 568))
      {
        v211 = v209;
        v212 = v209;
        v213 = *(_QWORD *)(*(_QWORD *)(v2 + 8) + 8 * v209 - 8);
        do
        {
          v214 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v210 + 40))(*(_QWORD *)v210);
          if (v214 < v211)
          {
            v215 = v214;
            if (v212 == (uint64_t)(*(_QWORD *)(v2 + 16) - *(_QWORD *)(v2 + 8)) >> 3)
            {
LABEL_283:
              v216 = *(char **)(v2 + 568);
              v217 = v216 - (v210 + 8);
              if (v216 != v210 + 8)
                memmove(v210, v210 + 8, v216 - (v210 + 8));
              *(_QWORD *)(v2 + 568) = &v210[v217];
              v218 = *(unsigned __int16 **)(v2 + 592);
              v219 = v215 - 1;
              if ((unint64_t)(v215 - 1) >> 16)
              {
LABEL_289:
                v220 = *(unsigned __int16 **)(v2 + 592);
              }
              else
              {
                v220 = *(unsigned __int16 **)(v2 + 584);
                if (v220 != v218)
                {
                  while (*v220 != (unsigned __int16)v219)
                  {
                    if (++v220 == v218)
                      goto LABEL_289;
                  }
                }
              }
              if (v220 != v218)
              {
                for (kk = v220 + 1; kk != v218; ++kk)
                {
                  v222 = *kk;
                  if (v219 != v222)
                    *v220++ = v222;
                }
              }
              if (v218 != v220)
                *(_QWORD *)(v2 + 592) = v220;
              continue;
            }
            v223 = *(_QWORD **)(v213 + 8);
            v224 = *(_QWORD **)(v213 + 16);
            while (v223 != v224)
            {
              if (v215 + (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v223 + 40))(*v223) == v212)
                goto LABEL_283;
              v223 += 2;
            }
          }
          v210 += 8;
        }
        while (v210 != *(char **)(v2 + 568));
      }
    }
  }
  else
  {
    if ((unint64_t)((uint64_t)(*(_QWORD *)(v2 + 16) - *(_QWORD *)(v2 + 8)) >> 3) >= 6)
      v228 = 6;
    else
      v228 = (uint64_t)(*(_QWORD *)(v2 + 16) - *(_QWORD *)(v2 + 8)) >> 3;
    if (v228)
    {
      v229 = 0;
      do
      {
        v230 = *(_QWORD *)(*(_QWORD *)(v2 + 8) + 8 * v229);
        v231 = *(_QWORD **)(v230 + 56);
        v232 = *(_QWORD **)(v230 + 64);
        v233 = v229 + 1;
        while (v231 != v232)
        {
          if (v233 == (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v231 + 40))(*v231)
            && (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v231 + 96))(*v231))
          {
            v234 = *(char **)(v2 + 592);
            v235 = *(_QWORD *)(v2 + 600);
            if ((unint64_t)v234 >= v235)
            {
              v237 = (char *)*v255;
              v238 = v234 - (_BYTE *)*v255;
              if (v238 <= -3)
                sub_20B80CDD8();
              v239 = v238 >> 1;
              v240 = v235 - (_QWORD)v237;
              if (v240 <= (v238 >> 1) + 1)
                v241 = v239 + 1;
              else
                v241 = v240;
              if (v240 >= 0x7FFFFFFFFFFFFFFELL)
                v242 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v242 = v241;
              if (v242)
              {
                v243 = (char *)sub_20B80FD48(v254, v242);
                v234 = *(char **)(v2 + 592);
                v237 = *(char **)(v2 + 584);
              }
              else
              {
                v243 = 0;
              }
              v244 = &v243[2 * v239];
              *(_WORD *)v244 = v229;
              v236 = v244 + 2;
              while (v234 != v237)
              {
                v245 = *((_WORD *)v234 - 1);
                v234 -= 2;
                *((_WORD *)v244 - 1) = v245;
                v244 -= 2;
              }
              *(_QWORD *)(v2 + 584) = v244;
              *(_QWORD *)(v2 + 592) = v236;
              *(_QWORD *)(v2 + 600) = &v243[2 * v242];
              if (v237)
                operator delete(v237);
            }
            else
            {
              *(_WORD *)v234 = v229;
              v236 = v234 + 2;
            }
            *(_QWORD *)(v2 + 592) = v236;
          }
          v231 += 2;
        }
        ++v229;
      }
      while (v233 != v228);
    }
  }
LABEL_341:
  sub_20B8292CC((uint64_t)&v256, v257[0]);
  if (__p)
  {
    v259 = (char *)__p;
    operator delete(__p);
  }
LABEL_343:
  v246 = *(_QWORD *)(v2 + 560);
  v247 = *(uint64_t **)(v2 + 568);
  v248 = 126 - 2 * __clz(((uint64_t)v247 - v246) >> 3);
  if (v247 == (uint64_t *)v246)
    v249 = 0;
  else
    v249 = v248;
  v250 = sub_20B9E8C48;
  if ((*(_DWORD *)(v2 + 40) - 3) >= 2)
    v250 = sub_20B9E8C8C;
  __p = v250;
  return sub_20B9ED3EC(v246, v247, (uint64_t (**)(_QWORD))&__p, v249, 1);
}

void sub_20B9E5E9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, _QWORD *a16, uint64_t a17, void *__p, uint64_t a19)
{
  sub_20B8292CC((uint64_t)&a15, a16);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20B9E5F40(_QWORD *a1, uint64_t a2)
{
  const UniChar *v3;
  CFIndex v4;
  const __CFString *v5;
  _QWORD *v6;
  size_t v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  _QWORD *v11;
  const std::locale::facet *v12;
  unsigned __int16 **v13;
  unsigned __int16 **i;
  unsigned __int16 *v15;
  unsigned __int16 *v16;
  uint64_t v17;
  char **v18;
  char **v19;
  void *locale;
  uint64_t v21;
  _QWORD *v22;
  const std::locale::facet *v23;
  _QWORD *v24;
  _QWORD *v25;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  const std::locale::facet *v31;
  const void **v32;
  const void **v33;
  std::string *v34;
  std::string::size_type v35;
  const void **v36;
  const void **v37;
  std::string *v38;
  std::string::size_type v39;
  int v40;
  unsigned int v41;
  unsigned __int16 j;
  unsigned int v43;
  char **v44;
  std::string *v45;
  std::string::size_type v46;
  _QWORD *v47;
  const std::locale::facet *v48;
  const void **v49;
  const void **v50;
  std::string *v51;
  std::string::size_type v52;
  _QWORD **v53;
  _QWORD *v54;
  _QWORD *v55;
  const std::locale::facet *v56;
  _QWORD *v57;
  const char *v58;
  size_t v59;
  _QWORD *v60;
  _QWORD *v61;
  const std::locale::facet *v62;
  _QWORD *v63;
  const char *v64;
  size_t v65;
  _QWORD *v66;
  _QWORD *v67;
  const std::locale::facet *v68;
  const void **v69;
  const void **v70;
  std::string *v71;
  std::string::size_type v72;
  _QWORD **v73;
  _QWORD *v74;
  _QWORD *v75;
  const std::locale::facet *v76;
  _QWORD *v77;
  const char *v78;
  size_t v79;
  _QWORD *v80;
  _QWORD *v81;
  const std::locale::facet *v82;
  _QWORD *v83;
  const char *v84;
  size_t v85;
  _QWORD *v86;
  _QWORD *v87;
  const std::locale::facet *v88;
  const void **v89;
  const void **v90;
  _QWORD *v91;
  const std::locale::facet *v92;
  std::string *v93;
  std::string::size_type v94;
  std::locale::__imp *v95;
  _QWORD *v96;
  std::locale::__imp *v97;
  std::locale::__imp **v98;
  BOOL v99;
  const std::locale::facet *v100;
  _QWORD *v101;
  const std::locale::facet *v102;
  _QWORD *v103;
  _QWORD *k;
  const __CFString *v105;
  std::locale::__imp *v106;
  size_t v107;
  _QWORD *v108;
  const std::locale::facet *v109;
  _QWORD *v110;
  const std::locale::facet *v111;
  uint64_t v112;
  uint64_t m;
  _QWORD *v114;
  const std::locale::facet *v115;
  uint64_t v116;
  _QWORD *v119;
  _QWORD *v120;
  uint64_t v121;
  _QWORD *v122;
  const void **v123;
  const void **v124;
  std::string __p;
  std::locale v126;
  _QWORD *v127;
  unsigned __int8 v128;
  char *__s;
  _QWORD v130[2];
  uint64_t v131;
  _QWORD v132[10];
  char v133;
  uint64_t v134;
  std::locale v135;

  sub_20B83BFEC((uint64_t)v130);
  v3 = *(const UniChar **)(a2 + 48);
  if (v3)
    v4 = (uint64_t)(*(_QWORD *)(a2 + 56) - (_QWORD)v3) >> 1;
  else
    v4 = 0;
  v5 = CFStringCreateWithCharacters(0, v3, v4);
  sub_20B8D154C(v5, &__s);
  v6 = sub_20B828F84(&v131, (uint64_t)"-------------------- input = ", 29);
  v7 = strlen(__s);
  v8 = sub_20B828F84(v6, (uint64_t)__s, v7);
  v9 = sub_20B828F84(v8, (uint64_t)" ------------------", 19);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v126, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v126);
  std::ostream::put();
  std::ostream::flush();
  CFRelease(v5);
  if (*(_QWORD *)(a2 + 760) != *(_QWORD *)(a2 + 768))
  {
    v11 = sub_20B828F84(&v131, (uint64_t)"-------------------- nbests------------------", 45);
    std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(_QWORD *)(*v11 - 24)));
    v12 = std::locale::use_facet(&v126, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
    std::locale::~locale(&v126);
    std::ostream::put();
    std::ostream::flush();
    v13 = *(unsigned __int16 ***)(a2 + 760);
    for (i = *(unsigned __int16 ***)(a2 + 768); v13 != i; v13 += 3)
    {
      v16 = *v13;
      v15 = v13[1];
      while (v16 != v15)
      {
        v17 = *v16;
        v18 = &(&off_24C4A2768)[2 * v17];
        v19 = &(&off_24C4A0588)[2 * v17];
        if (*(_DWORD *)(a2 + 40) == 5)
          v19 = v18;
        sub_20B80BBD0(&v126, *v19);
        if ((v128 & 0x80u) == 0)
          locale = &v126;
        else
          locale = v126.__locale_;
        if ((v128 & 0x80u) == 0)
          v21 = v128;
        else
          v21 = (uint64_t)v127;
        v22 = sub_20B828F84(&v131, (uint64_t)locale, v21);
        sub_20B828F84(v22, (uint64_t)" ", 1);
        if ((char)v128 < 0)
          operator delete(v126.__locale_);
        ++v16;
      }
      std::ios_base::getloc((const std::ios_base *)((char *)&v132[-1] + *(_QWORD *)(v131 - 24)));
      v23 = std::locale::use_facet(&v126, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
      std::locale::~locale(&v126);
      std::ostream::put();
      std::ostream::flush();
    }
  }
  v24 = *(_QWORD **)(a2 + 8);
  v119 = *(_QWORD **)(a2 + 16);
  if (v24 != v119)
  {
    v121 = 0;
    do
    {
      v122 = (_QWORD *)*v24;
      sub_20B9EE6E4((uint64_t *)&v126, *v24 + 136);
      v25 = sub_20B828F84(&v131, (uint64_t)"syllables ending with input char ", 33);
      sub_20B8D15F4((void *)(*(_QWORD *)(a2 + 48) + 2 * v121), 1uLL, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      v28 = sub_20B828F84(v25, (uint64_t)p_p, size);
      sub_20B828F84(v28, (uint64_t)" at pos ", 8);
      v29 = (_QWORD *)std::ostream::operator<<();
      v30 = sub_20B828F84(v29, (uint64_t)": ", 2);
      std::ios_base::getloc((const std::ios_base *)((char *)v30 + *(_QWORD *)(*v30 - 24)));
      v31 = std::locale::use_facet(&v135, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v31->__vftable[2].~facet_0)(v31, 10);
      std::locale::~locale(&v135);
      std::ostream::put();
      std::ostream::flush();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v32 = (const void **)v122[1];
      v33 = (const void **)v122[2];
      while (v32 != v33)
      {
        sub_20B9ECF2C(&__p, "complete syllable: ", *v32);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v34 = &__p;
        else
          v34 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v35 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v35 = __p.__r_.__value_.__l.__size_;
        sub_20B828F84(&v131, (uint64_t)v34, v35);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v32 += 2;
      }
      v120 = v24;
      v36 = (const void **)v122[4];
      v37 = (const void **)v122[5];
      while (v36 != v37)
      {
        sub_20B9ECF2C(&__p, "incomplete syllable: ", *v36);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v38 = &__p;
        else
          v38 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v39 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v39 = __p.__r_.__value_.__l.__size_;
        sub_20B828F84(&v131, (uint64_t)v38, v39);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v40 = *(_DWORD *)(a2 + 40);
        if ((v40 - 3) >= 2)
        {
          v41 = (*(uint64_t (**)(const void *, _QWORD, _QWORD))(*(_QWORD *)*v36 + 48))(*v36, 2 * (v40 == 5), 0);
          if (v41)
          {
            for (j = 0; j < v41; ++j)
            {
              v43 = (*(uint64_t (**)(const void *, _QWORD))(*(_QWORD *)*v36 + 56))(*v36, j);
              if (*(_DWORD *)(a2 + 40) == 5)
                v44 = &(&off_24C4A2768)[2 * v43];
              else
                v44 = &(&off_24C4A0588)[2 * v43];
              sub_20B80BBD0(&__p, *v44);
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v45 = &__p;
              else
                v45 = (std::string *)__p.__r_.__value_.__r.__words[0];
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v46 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
              else
                v46 = __p.__r_.__value_.__l.__size_;
              v47 = sub_20B828F84(&v131, (uint64_t)v45, v46);
              sub_20B828F84(v47, (uint64_t)", ", 2);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
          std::ios_base::getloc((const std::ios_base *)((char *)&v132[-1] + *(_QWORD *)(v131 - 24)));
          v48 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v48->__vftable[2].~facet_0)(v48, 10);
          std::locale::~locale((std::locale *)&__p);
          std::ostream::put();
          std::ostream::flush();
        }
        v36 += 2;
      }
      v50 = (const void **)v122[7];
      v49 = (const void **)v122[8];
      v123 = v49;
      while (v50 != v49)
      {
        sub_20B9ECF2C(&__p, "Autocorrected Complete syllable: ", *v50);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v51 = &__p;
        else
          v51 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v52 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v52 = __p.__r_.__value_.__l.__size_;
        sub_20B828F84(&v131, (uint64_t)v51, v52);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v53 = (_QWORD **)*v50;
        if ((*(float (**)(const void *))(*(_QWORD *)*v50 + 80))(*v50) < 1.0)
        {
          v54 = sub_20B828F84(&v131, (uint64_t)"\tprob = ", 8);
          *(_QWORD *)((char *)v54 + *(_QWORD *)(*v54 - 24) + 16) = 5;
          v55 = (_QWORD *)std::ostream::operator<<();
          std::ios_base::getloc((const std::ios_base *)((char *)v55 + *(_QWORD *)(*v55 - 24)));
          v56 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v56->__vftable[2].~facet_0)(v56, 10);
          std::locale::~locale((std::locale *)&__p);
          std::ostream::put();
          std::ostream::flush();
        }
        if (v53[15])
        {
          v57 = sub_20B828F84(&v131, (uint64_t)"\tPrevious syllable = ", 21);
          v58 = (const char *)(*(uint64_t (**)(_QWORD *))(*v53[15] + 24))(v53[15]);
          v59 = strlen(v58);
          v60 = sub_20B828F84(v57, (uint64_t)v58, v59);
          sub_20B828F84(v60, (uint64_t)" rawInputLength = ", 18);
          (*(void (**)(_QWORD *))(*v53[15] + 40))(v53[15]);
          v61 = (_QWORD *)std::ostream::operator<<();
          std::ios_base::getloc((const std::ios_base *)((char *)v61 + *(_QWORD *)(*v61 - 24)));
          v62 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v62->__vftable[2].~facet_0)(v62, 10);
          std::locale::~locale((std::locale *)&__p);
          std::ostream::put();
          std::ostream::flush();
        }
        if (v53[16])
        {
          v63 = sub_20B828F84(&v131, (uint64_t)"\tNext syllable = ", 17);
          v64 = (const char *)(*(uint64_t (**)(_QWORD *))(*v53[16] + 24))(v53[16]);
          v65 = strlen(v64);
          v66 = sub_20B828F84(v63, (uint64_t)v64, v65);
          sub_20B828F84(v66, (uint64_t)" rawInputLength = ", 18);
          (*(void (**)(_QWORD *))(*v53[16] + 40))(v53[16]);
          v67 = (_QWORD *)std::ostream::operator<<();
          std::ios_base::getloc((const std::ios_base *)((char *)v67 + *(_QWORD *)(*v67 - 24)));
          v68 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v68->__vftable[2].~facet_0)(v68, 10);
          std::locale::~locale((std::locale *)&__p);
          std::ostream::put();
          std::ostream::flush();
        }
        v50 += 2;
        v49 = v123;
      }
      v70 = (const void **)v122[10];
      v69 = (const void **)v122[11];
      v124 = v69;
      while (v70 != v69)
      {
        sub_20B9ECF2C(&__p, "Autocorrected Incomplete syllable: ", *v70);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v71 = &__p;
        else
          v71 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v72 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v72 = __p.__r_.__value_.__l.__size_;
        sub_20B828F84(&v131, (uint64_t)v71, v72);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v73 = (_QWORD **)*v70;
        if ((*(float (**)(const void *))(*(_QWORD *)*v70 + 80))(*v70) < 1.0)
        {
          v74 = sub_20B828F84(&v131, (uint64_t)"\tprob = ", 8);
          *(_QWORD *)((char *)v74 + *(_QWORD *)(*v74 - 24) + 16) = 5;
          v75 = (_QWORD *)std::ostream::operator<<();
          std::ios_base::getloc((const std::ios_base *)((char *)v75 + *(_QWORD *)(*v75 - 24)));
          v76 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v76->__vftable[2].~facet_0)(v76, 10);
          std::locale::~locale((std::locale *)&__p);
          std::ostream::put();
          std::ostream::flush();
        }
        if (v73[15])
        {
          v77 = sub_20B828F84(&v131, (uint64_t)"\tPrevious syllable = ", 21);
          v78 = (const char *)(*(uint64_t (**)(_QWORD *))(*v73[15] + 24))(v73[15]);
          v79 = strlen(v78);
          v80 = sub_20B828F84(v77, (uint64_t)v78, v79);
          sub_20B828F84(v80, (uint64_t)" rawInputLength = ", 18);
          (*(void (**)(_QWORD *))(*v73[15] + 40))(v73[15]);
          v81 = (_QWORD *)std::ostream::operator<<();
          std::ios_base::getloc((const std::ios_base *)((char *)v81 + *(_QWORD *)(*v81 - 24)));
          v82 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v82->__vftable[2].~facet_0)(v82, 10);
          std::locale::~locale((std::locale *)&__p);
          std::ostream::put();
          std::ostream::flush();
        }
        if (v73[16])
        {
          v83 = sub_20B828F84(&v131, (uint64_t)"\tNext syllable = ", 17);
          v84 = (const char *)(*(uint64_t (**)(_QWORD *))(*v73[16] + 24))(v73[16]);
          v85 = strlen(v84);
          v86 = sub_20B828F84(v83, (uint64_t)v84, v85);
          sub_20B828F84(v86, (uint64_t)" rawInputLength = ", 18);
          (*(void (**)(_QWORD *))(*v73[16] + 40))(v73[16]);
          v87 = (_QWORD *)std::ostream::operator<<();
          std::ios_base::getloc((const std::ios_base *)((char *)v87 + *(_QWORD *)(*v87 - 24)));
          v88 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v88->__vftable[2].~facet_0)(v88, 10);
          std::locale::~locale((std::locale *)&__p);
          std::ostream::put();
          std::ostream::flush();
        }
        v70 += 2;
        v69 = v124;
      }
      v89 = (const void **)v122[13];
      v90 = (const void **)v122[14];
      while (v89 != v90)
      {
        if ((*(unsigned int (**)(const void *))(*(_QWORD *)*v89 + 64))(*v89) == 7)
        {
          sub_20B828F84(&v131, (uint64_t)"Synthetic syllable: mixed, length = ", 36);
          (*(void (**)(const void *))(*(_QWORD *)*v89 + 32))(*v89);
          v91 = (_QWORD *)std::ostream::operator<<();
          std::ios_base::getloc((const std::ios_base *)((char *)v91 + *(_QWORD *)(*v91 - 24)));
          v92 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v92->__vftable[2].~facet_0)(v92, 10);
          std::locale::~locale((std::locale *)&__p);
          std::ostream::put();
          std::ostream::flush();
        }
        else
        {
          sub_20B9ECF2C(&__p, "Synthetic syllable: ", *v89);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v93 = &__p;
          else
            v93 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v94 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            v94 = __p.__r_.__value_.__l.__size_;
          sub_20B828F84(&v131, (uint64_t)v93, v94);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        v89 += 2;
      }
      if ((*(_DWORD *)(*v120 + 168) - 1) >= 2)
      {
        sub_20B828F84(&v131, (uint64_t)"Start column indexes: ", 22);
        v95 = v126.__locale_;
        if ((_QWORD **)v126.__locale_ != &v127)
        {
          do
          {
            v96 = (_QWORD *)std::ostream::operator<<();
            sub_20B828F84(v96, (uint64_t)", ", 2);
            v97 = (std::locale::__imp *)*((_QWORD *)v95 + 1);
            if (v97)
            {
              do
              {
                v98 = (std::locale::__imp **)v97;
                v97 = *(std::locale::__imp **)v97;
              }
              while (v97);
            }
            else
            {
              do
              {
                v98 = (std::locale::__imp **)*((_QWORD *)v95 + 2);
                v99 = *v98 == v95;
                v95 = (std::locale::__imp *)v98;
              }
              while (!v99);
            }
            v95 = (std::locale::__imp *)v98;
          }
          while (v98 != (std::locale::__imp **)&v127);
        }
        std::ios_base::getloc((const std::ios_base *)((char *)&v132[-1] + *(_QWORD *)(v131 - 24)));
        v100 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v100->__vftable[2].~facet_0)(v100, 10);
        std::locale::~locale((std::locale *)&__p);
        std::ostream::put();
        std::ostream::flush();
      }
      ++v121;
      sub_20B8292CC((uint64_t)&v126, v127);
      v24 = v120 + 1;
    }
    while (v120 + 1 != v119);
  }
  v101 = sub_20B828F84(&v131, (uint64_t)"First syllables: ", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v101 + *(_QWORD *)(*v101 - 24)));
  v102 = std::locale::use_facet(&v126, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v102->__vftable[2].~facet_0)(v102, 10);
  std::locale::~locale(&v126);
  std::ostream::put();
  std::ostream::flush();
  v103 = *(_QWORD **)(a2 + 560);
  for (k = *(_QWORD **)(a2 + 568); v103 != k; ++v103)
  {
    v105 = (const __CFString *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v103 + 16))(*v103, 1);
    sub_20B8D154C(v105, (char **)&v126);
    v106 = v126.__locale_;
    v107 = strlen((const char *)v126.__locale_);
    v108 = sub_20B828F84(&v131, (uint64_t)v126.__locale_, v107);
    sub_20B828F84(v108, (uint64_t)", ", 2);
    CFRelease(v105);
    if (v106)
      MEMORY[0x20BD39C80](v106, 0x1000C8077774924);
  }
  std::ios_base::getloc((const std::ios_base *)((char *)&v132[-1] + *(_QWORD *)(v131 - 24)));
  v109 = std::locale::use_facet(&v126, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v109->__vftable[2].~facet_0)(v109, 10);
  std::locale::~locale(&v126);
  std::ostream::put();
  std::ostream::flush();
  v110 = sub_20B828F84(&v131, (uint64_t)"First syllable end column indexes: ", 35);
  std::ios_base::getloc((const std::ios_base *)((char *)v110 + *(_QWORD *)(*v110 - 24)));
  v111 = std::locale::use_facet(&v126, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v111->__vftable[2].~facet_0)(v111, 10);
  std::locale::~locale(&v126);
  std::ostream::put();
  std::ostream::flush();
  v112 = *(_QWORD *)(a2 + 584);
  for (m = *(_QWORD *)(a2 + 592); v112 != m; v112 += 2)
  {
    v114 = (_QWORD *)std::ostream::operator<<();
    sub_20B828F84(v114, (uint64_t)", ", 2);
  }
  std::ios_base::getloc((const std::ios_base *)((char *)&v132[-1] + *(_QWORD *)(v131 - 24)));
  v115 = std::locale::use_facet(&v126, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v115->__vftable[2].~facet_0)(v115, 10);
  std::locale::~locale(&v126);
  std::ostream::put();
  std::ostream::flush();
  sub_20B871648((uint64_t)v132, a1);
  if (__s)
    MEMORY[0x20BD39C80](__s, 0x1000C8077774924);
  v130[0] = *MEMORY[0x24BEDB7F0];
  v116 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v130 + *(_QWORD *)(v130[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v131 = v116;
  v132[0] = MEMORY[0x24BEDB848] + 16;
  if (v133 < 0)
    operator delete((void *)v132[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x20BD39C2C](&v134);
}

void sub_20B9E6F28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::locale a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,std::locale a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  uint64_t v50;

  a30 = *MEMORY[0x24BEDB7F0];
  v50 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(uint64_t *)((char *)&a30 + *(_QWORD *)(a30 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  a32 = v50;
  a33 = MEMORY[0x24BEDB848] + 16;
  if (a46 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD39C2C](&a49);
  _Unwind_Resume(a1);
}

BOOL sub_20B9E7100(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v10;
  int v11;
  char *v12;
  int v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v20;

  v4 = *(unsigned __int16 *)(a3 + 2);
  if (v4 >= 0x9C2)
    sub_20B83B31C("bitset test argument out of range");
  v5 = a1 + 80;
  v6 = *(_QWORD *)(a1 + 80 + ((v4 >> 3) & 0x1FF8)) & (1 << v4);
  if (!v6)
  {
    v10 = *(_DWORD *)(a1 + 40) - 3;
    if (v10 > 2)
      v11 = 0;
    else
      v11 = dword_20BA5F7A8[v10];
    v12 = (char *)operator new(0x88uLL);
    *((_QWORD *)v12 + 1) = 0;
    *((_QWORD *)v12 + 2) = 0;
    *(_QWORD *)v12 = &off_24C46B910;
    *((_QWORD *)v12 + 4) = a3;
    v12[40] = 0;
    *((_DWORD *)v12 + 11) = v11;
    v12[48] = a4;
    *((_DWORD *)v12 + 13) = 1065353216;
    *(_OWORD *)(v12 + 56) = 0u;
    *(_OWORD *)(v12 + 72) = 0u;
    *((_DWORD *)v12 + 22) = 1065353216;
    *((_OWORD *)v12 + 6) = 0u;
    *((_OWORD *)v12 + 7) = 0u;
    *((_DWORD *)v12 + 32) = 1065353216;
    *((_QWORD *)&v20 + 1) = v12;
    *((_QWORD *)v12 + 3) = &off_24C467BB8;
    *(_QWORD *)&v20 = v12 + 24;
    v13 = sub_20B9F026C((uint64_t)(v12 + 24));
    v14 = 32;
    if (v13)
      v14 = 8;
    sub_20B9054E0((char **)(a2 + v14), &v20);
    v15 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
    if (*((_QWORD *)&v20 + 1))
    {
      v16 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v18 = *(unsigned __int16 *)(a3 + 2);
    if (v18 >= 0x9C2)
      sub_20B83B31C("bitset set argument out of range");
    *(_QWORD *)(v5 + ((v18 >> 3) & 0x1FF8)) |= 1 << v18;
  }
  return v6 == 0;
}

void sub_20B9E728C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B811FE4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9E72A0(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(result + 40);
  if (v2 + 1 >= a2)
  {
    v3 = *(_QWORD *)(result + 32);
    if (v2 + 1 == a2)
    {
      v4 = *(_QWORD *)(v3 + 8);
    }
    else
    {
      v4 = *(_QWORD *)(v3 + 8);
      if (*(_QWORD *)(*(_QWORD *)(v4 + 8 * (v2 - a2)) + 16) == *(_QWORD *)(*(_QWORD *)(v4 + 8 * (v2 - a2)) + 8))
        return result;
    }
    return sub_20B905300(*(_QWORD **)(v4 + 8 * v2), a2);
  }
  return result;
}

void sub_20B9E72E4(uint64_t a1, _QWORD *a2, uint64_t a3, int a4, int a5)
{
  _BOOL4 v9;
  BOOL v10;
  unsigned __int16 *v11;
  int v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  if (a2 && (*(_DWORD *)(a1 + 552) & 0x8000) != 0)
  {
    v9 = *(_BYTE *)(a1 + 556) != 0;
    goto LABEL_5;
  }
  v9 = 1;
  v10 = 1;
  if (a2)
LABEL_5:
    v10 = a2[2] != a2[1] || a2[8] != a2[7];
  v11 = sub_20B9F17AC(*(_QWORD *)(a1 + 32), ***(unsigned __int16 ****)(a1 + 32), a4);
  if (!v11)
    return;
  if (v10)
    goto LABEL_15;
  if (a2[14] == a2[13])
  {
    v12 = 0;
    v13 = 0;
    goto LABEL_17;
  }
  if (*(_DWORD *)(a1 + 40) != 1)
  {
LABEL_15:
    v13 = 0;
    v12 = 1;
  }
  else
  {
    v12 = v11[4] & 1;
    if ((v11[4] & 1) != 0)
      v13 = 7;
    else
      v13 = 0;
  }
LABEL_17:
  if ((v9 & (v12 | a5)) == 1)
  {
    sub_20B9E7100(a1, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * a3), (uint64_t)v11, v13);
    if (a5)
    {
      if (a3 && !*(_DWORD *)(a1 + 40))
      {
        v14 = a3 - 1;
        if (sub_20B905E00(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v14)))
        {
          v15 = a1 + 80;
          v16 = 0;
          sub_20B9EE244((uint64_t)&v15);
          sub_20B9E8834(a1, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v14), 1);
        }
      }
    }
  }
}

void sub_20B9E744C(uint64_t a1, _QWORD *a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  char v9;
  int v10;
  int v11;
  unint64_t v12;
  int8x8_t v13;
  uint8x8_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  char **v19;
  const char **v20;
  const char **v21;
  unint64_t v22;
  const char *v23;
  const char *v24;
  size_t v25;
  size_t v26;
  size_t v27;
  int v28;
  const char **v29;
  const char **v30;
  int v31;
  const char **v32;
  int v33;
  const char **v34;
  unsigned __int16 **v35;
  uint64_t v36;
  const char *v37;
  uint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  unsigned __int16 *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  BOOL v45;
  BOOL v46;
  size_t v47;
  const char *v48;
  unsigned __int16 *v49;
  size_t v50;
  unsigned __int16 *v51;
  BOOL v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  unsigned __int16 **v57;
  char *v58;
  char *v59;
  unsigned __int16 *v60;
  uint64_t v61;
  uint64_t *v62;
  unint64_t v63;
  size_t v64;
  uint64_t v65;
  unsigned __int16 *v66;
  size_t v67;
  BOOL v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unsigned __int16 *v72;
  BOOL v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  char *v77;
  unsigned __int16 **v78;
  char *v79;
  char *v80;
  unsigned __int16 *v81;
  uint64_t i;
  uint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  unsigned __int16 *v86;
  size_t v87;
  BOOL v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  BOOL v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  char *v96;
  unsigned __int16 **v97;
  char *v98;
  char *v99;
  unsigned __int16 *v100;
  unsigned __int16 v101;
  _QWORD *v102;
  _QWORD *v103;
  _QWORD *v104;
  unsigned __int16 **v105;
  char *v106;
  size_t v107;
  unint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  unint64_t v112;
  char **v113;
  uint64_t v114;
  _BYTE *v115;
  unint64_t v116;
  char *v117;
  void *v118;
  uint64_t *v119;
  uint64_t *v120;
  uint64_t v121;
  unint64_t v123;
  uint64_t v125;
  unsigned __int16 v126;
  uint64_t *v127;
  int v128;
  uint64_t v129;
  __int16 v130;
  uint64_t v131;
  uint64_t v132;
  size_t v134;
  const char *v136;
  unsigned __int16 *v137;
  const char *__s1;
  uint64_t v139;
  void *__p;
  unsigned __int16 **v141;
  char *v142;
  _WORD v143[85];
  uint64_t v144;

  v144 = *MEMORY[0x24BDAC8D0];
  v4 = a2[1] - *a2;
  if (v4)
  {
    v5 = a1;
    v6 = 0;
    v7 = v4 >> 4;
    v128 = *(_DWORD *)(a1 + 40);
    v127 = (uint64_t *)(a1 + 400);
    if (v7 <= 1)
      v7 = 1;
    v123 = v7;
    while (1)
    {
      v125 = v6;
      v8 = (_QWORD *)(*a2 + 16 * v6);
      v130 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v8 + 40))(*v8);
      v132 = *(_QWORD *)(*v8 + 8);
      (*(void (**)(_QWORD))(*(_QWORD *)*v8 + 72))(*v8);
      v9 = *(_BYTE *)(v132 + 8);
      if ((v9 & 8) != 0)
        break;
      if (*(_DWORD *)(v5 + 40) == 2)
      {
        v10 = *(unsigned __int16 *)(v132 + 2);
        v11 = 1;
        if (v10 == 3 || v10 == 54 || v10 == 76)
          goto LABEL_15;
      }
      if ((*(_BYTE *)(v132 + 8) & 0x10) != 0)
      {
        v11 = 0;
        goto LABEL_15;
      }
LABEL_11:
      v6 = v125 + 1;
      if (v125 + 1 == v123)
        return;
    }
    v11 = 1;
LABEL_15:
    v12 = *(unsigned __int16 *)(v132 + 2);
    v143[0] = *(_WORD *)(v132 + 2);
    v13 = *(int8x8_t *)(v5 + 408);
    if (v13)
    {
      v14 = (uint8x8_t)vcnt_s8(v13);
      v14.i16[0] = vaddlv_u8(v14);
      if (v14.u32[0] > 1uLL)
      {
        v15 = v12;
        if (*(_QWORD *)&v13 <= v12)
          v15 = v12 % *(_QWORD *)&v13;
      }
      else
      {
        v15 = (v13.i32[0] - 1) & v12;
      }
      v16 = *(_QWORD **)(*v127 + 8 * v15);
      if (v16)
      {
        v17 = (_QWORD *)*v16;
        if (*v16)
        {
          do
          {
            v18 = v17[1];
            if (v18 == v12)
            {
              if (*((unsigned __int16 *)v17 + 8) == (_DWORD)v12)
              {
                v121 = a3;
                goto LABEL_219;
              }
            }
            else
            {
              if (v14.u32[0] > 1uLL)
              {
                if (v18 >= *(_QWORD *)&v13)
                  v18 %= *(_QWORD *)&v13;
              }
              else
              {
                v18 &= *(_QWORD *)&v13 - 1;
              }
              if (v18 != v15)
                break;
            }
            v17 = (_QWORD *)*v17;
          }
          while (v17);
        }
      }
    }
    __p = 0;
    v141 = 0;
    v142 = 0;
    v19 = &(&off_24C4A2768)[2 * v12];
    v126 = v12;
    if (v128 != 5)
      v19 = &(&off_24C4A0588)[2 * v12];
    __s1 = *v19;
    v134 = strlen(*v19);
    v20 = *(const char ***)(v5 + 440);
    v21 = *(const char ***)(v5 + 448);
    if (v20 == v21)
      goto LABEL_195;
    v139 = 0;
    v129 = 0;
    v22 = v134;
    v136 = &__s1[v134];
    while (1)
    {
      v23 = *v20;
      v24 = v20[1];
      v25 = strlen(v24);
      v26 = strlen(*v20);
      if (v22 < v25)
        goto LABEL_68;
      v27 = v26;
      if (v22 >= v26)
        break;
LABEL_37:
      if (v11 && !memcmp(__s1, v24, v25))
      {
        v29 = (const char **)&v143[12 * v129 + 25];
        *v29 = v23;
        v29[1] = (const char *)v27;
        ++v129;
        v29[2] = (const char *)v25;
        if ((v9 & 0x10) == 0)
          goto LABEL_68;
      }
      else if ((v9 & 0x10) == 0)
      {
        goto LABEL_68;
      }
      if (!memcmp(&v136[-v25], v24, v25))
      {
        if (v128 == 5)
        {
          if (v27 < 3)
            goto LABEL_68;
        }
        else if (v27 == 3 && v22 >= 4)
        {
          v31 = __s1[v134 - 3];
          if (v31 == 105 || v31 == 117)
            goto LABEL_68;
        }
        v32 = (const char **)&v143[12 * v139 + 1];
        *v32 = v23;
        v32[1] = (const char *)v27;
        ++v139;
        v32[2] = (const char *)v25;
      }
LABEL_68:
      v20 += 2;
      if (v20 == v21)
      {
        v137 = ***(unsigned __int16 ****)(v5 + 32);
        if (v129)
        {
          v35 = 0;
          v36 = 0;
          v37 = __s1;
          while (1)
          {
            v131 = v36;
            v38 = (uint64_t *)&v143[12 * v36 + 25];
            v39 = v38[2];
            v40 = *(_QWORD *)(v5 + 32);
            v41 = v137;
            if (v137)
            {
              v42 = v38[1];
              v41 = v137;
              if (v42)
              {
                v43 = 0;
                v44 = *v38;
                v41 = v137;
                do
                {
                  v41 = sub_20B9F17AC(v40, v41, *(char *)(v44 + v43++));
                  if (v41)
                    v45 = v43 >= v42;
                  else
                    v45 = 1;
                }
                while (!v45);
              }
            }
            if (v41)
            {
              v47 = v134 - v39;
              v46 = v134 == v39;
              if (v134 >= v39)
              {
                v48 = &v37[v39];
                v49 = v41;
                if (v46)
                  goto LABEL_92;
                v50 = 0;
                v49 = v41;
                do
                {
                  v51 = sub_20B9F17AC(v40, v49, v48[v50]);
                  v49 = v51;
                  ++v50;
                  if (v51)
                    v52 = v50 >= v47;
                  else
                    v52 = 1;
                }
                while (!v52);
                if (v51)
                {
LABEL_92:
                  if (!a4 || (v49[4] & 2) != 0)
                  {
                    if (v35 >= (unsigned __int16 **)v142)
                    {
                      v53 = ((char *)v35 - (_BYTE *)__p) >> 3;
                      if ((unint64_t)(v53 + 1) >> 61)
                        sub_20B80CDD8();
                      v54 = (v142 - (_BYTE *)__p) >> 2;
                      if (v54 <= v53 + 1)
                        v54 = v53 + 1;
                      if ((unint64_t)(v142 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
                        v55 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v55 = v54;
                      if (v55)
                        v56 = (char *)sub_20B800BE8((uint64_t)&v142, v55);
                      else
                        v56 = 0;
                      v57 = (unsigned __int16 **)&v56[8 * v53];
                      *v57 = v49;
                      v35 = v57 + 1;
                      v59 = (char *)__p;
                      v58 = (char *)v141;
                      if (v141 != __p)
                      {
                        do
                        {
                          v60 = (unsigned __int16 *)*((_QWORD *)v58 - 1);
                          v58 -= 8;
                          *--v57 = v60;
                        }
                        while (v58 != v59);
                        v58 = (char *)__p;
                      }
                      __p = v57;
                      v141 = v35;
                      v142 = &v56[8 * v55];
                      if (v58)
                        operator delete(v58);
                    }
                    else
                    {
                      *v35++ = v49;
                    }
                    v141 = v35;
                  }
                }
                if (v139)
                  break;
              }
            }
LABEL_152:
            v36 = v131 + 1;
            if (v131 + 1 == v129)
              goto LABEL_155;
          }
          v61 = 0;
          while (2)
          {
            v62 = (uint64_t *)&v143[12 * v61 + 1];
            v63 = v62[2];
            v64 = v47 - v63;
            if (v47 < v63)
            {
              v64 = v47;
              goto LABEL_134;
            }
            v65 = *(_QWORD *)(v5 + 32);
            v66 = v41;
            if (v47 != v63)
            {
              v67 = 0;
              v66 = v41;
              do
              {
                v66 = sub_20B9F17AC(v65, v66, v48[v67++]);
                if (v66)
                  v68 = v67 >= v64;
                else
                  v68 = 1;
              }
              while (!v68);
            }
            if (!v66)
              goto LABEL_134;
            v69 = *(_QWORD *)&v143[12 * v61 + 5];
            if (!v69)
              goto LABEL_130;
            v70 = 0;
            v71 = *v62;
            do
            {
              v72 = sub_20B9F17AC(v65, v66, *(char *)(v71 + v70));
              v66 = v72;
              ++v70;
              if (v72)
                v73 = v70 >= v69;
              else
                v73 = 1;
            }
            while (!v73);
            v5 = a1;
            if (v72)
            {
LABEL_130:
              v37 = __s1;
              if (!a4 || (v66[4] & 2) != 0)
              {
                if (v35 >= (unsigned __int16 **)v142)
                {
                  v74 = ((char *)v35 - (_BYTE *)__p) >> 3;
                  if ((unint64_t)(v74 + 1) >> 61)
                    sub_20B80CDD8();
                  v75 = (v142 - (_BYTE *)__p) >> 2;
                  if (v75 <= v74 + 1)
                    v75 = v74 + 1;
                  if ((unint64_t)(v142 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
                    v76 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v76 = v75;
                  if (v76)
                    v77 = (char *)sub_20B800BE8((uint64_t)&v142, v76);
                  else
                    v77 = 0;
                  v78 = (unsigned __int16 **)&v77[8 * v74];
                  *v78 = v66;
                  v35 = v78 + 1;
                  v80 = (char *)__p;
                  v79 = (char *)v141;
                  if (v141 != __p)
                  {
                    do
                    {
                      v81 = (unsigned __int16 *)*((_QWORD *)v79 - 1);
                      v79 -= 8;
                      *--v78 = v81;
                    }
                    while (v79 != v80);
                    v79 = (char *)__p;
                  }
                  __p = v78;
                  v141 = v35;
                  v142 = &v77[8 * v76];
                  if (v79)
                    operator delete(v79);
                }
                else
                {
                  *v35++ = v66;
                }
                v141 = v35;
              }
            }
            else
            {
LABEL_134:
              v37 = __s1;
            }
            ++v61;
            v47 = v64;
            if (v61 == v139)
              goto LABEL_152;
            continue;
          }
        }
        v35 = 0;
LABEL_155:
        if (v139)
        {
          for (i = 0; i != v139; ++i)
          {
            v83 = (uint64_t *)&v143[12 * i + 1];
            v84 = v83[2];
            v85 = *(_QWORD *)(v5 + 32);
            v86 = v137;
            if (v137)
            {
              v86 = v137;
              if (v134 != v84)
              {
                v87 = 0;
                v86 = v137;
                do
                {
                  v86 = sub_20B9F17AC(v85, v86, __s1[v87++]);
                  if (v86)
                    v88 = v87 >= v134 - v84;
                  else
                    v88 = 1;
                }
                while (!v88);
              }
            }
            if (v86 && v134 >= v84)
            {
              v89 = *(_QWORD *)&v143[12 * i + 5];
              if (!v89)
                goto LABEL_175;
              v90 = 0;
              v91 = *v83;
              do
              {
                v86 = sub_20B9F17AC(v85, v86, *(char *)(v91 + v90++));
                if (v86)
                  v92 = v90 >= v89;
                else
                  v92 = 1;
              }
              while (!v92);
            }
            if (v86)
            {
LABEL_175:
              if (!a4 || (v86[4] & 2) != 0)
              {
                if (v35 >= (unsigned __int16 **)v142)
                {
                  v93 = ((char *)v35 - (_BYTE *)__p) >> 3;
                  if ((unint64_t)(v93 + 1) >> 61)
                    sub_20B80CDD8();
                  v94 = (v142 - (_BYTE *)__p) >> 2;
                  if (v94 <= v93 + 1)
                    v94 = v93 + 1;
                  if ((unint64_t)(v142 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
                    v95 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v95 = v94;
                  if (v95)
                    v96 = (char *)sub_20B800BE8((uint64_t)&v142, v95);
                  else
                    v96 = 0;
                  v97 = (unsigned __int16 **)&v96[8 * v93];
                  *v97 = v86;
                  v35 = v97 + 1;
                  v99 = (char *)__p;
                  v98 = (char *)v141;
                  if (v141 != __p)
                  {
                    do
                    {
                      v100 = (unsigned __int16 *)*((_QWORD *)v98 - 1);
                      v98 -= 8;
                      *--v97 = v100;
                    }
                    while (v98 != v99);
                    v98 = (char *)__p;
                  }
                  __p = v97;
                  v141 = v35;
                  v142 = &v96[8 * v95];
                  if (v98)
                    operator delete(v98);
                }
                else
                {
                  *v35++ = v86;
                }
                v141 = v35;
              }
            }
          }
        }
LABEL_195:
        v101 = v126;
        v102 = sub_20B9EE7B8(v127, v126, v143);
        v121 = a3;
        v103 = v102;
        v104 = v102 + 3;
        if (v102 + 3 != &__p)
        {
          v106 = (char *)__p;
          v105 = v141;
          v107 = (char *)v141 - (_BYTE *)__p;
          v108 = ((char *)v141 - (_BYTE *)__p) >> 3;
          v109 = v102[5];
          v110 = (char *)v102[3];
          if (v108 > (v109 - (uint64_t)v110) >> 3)
          {
            if (v110)
            {
              v102[4] = v110;
              operator delete(v110);
              v109 = 0;
              *v104 = 0;
              v104[1] = 0;
              v104[2] = 0;
            }
            if ((v107 & 0x8000000000000000) != 0)
              goto LABEL_226;
            v111 = v109 >> 2;
            if (v109 >> 2 <= v108)
              v111 = v108;
            v112 = (unint64_t)v109 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v111;
            if (v112 >> 61)
LABEL_226:
              sub_20B80CDD8();
            v101 = v126;
            v110 = (char *)sub_20B800BE8((uint64_t)(v103 + 5), v112);
            v103[4] = v110;
            v113 = (char **)(v103 + 4);
            *(v113 - 1) = v110;
            v113[1] = &v110[8 * v114];
            if (v105 == (unsigned __int16 **)v106)
              goto LABEL_216;
LABEL_214:
            v118 = v110;
            v117 = v106;
LABEL_215:
            memmove(v118, v117, v107);
            goto LABEL_216;
          }
          v113 = (char **)(v102 + 4);
          v115 = (_BYTE *)v102[4];
          v116 = (v115 - v110) >> 3;
          if (v116 >= v108)
          {
            v101 = v126;
            if (v141 == __p)
              goto LABEL_216;
            goto LABEL_214;
          }
          v101 = v126;
          if (v115 != v110)
          {
            memmove((void *)v102[3], __p, v115 - v110);
            v110 = *v113;
          }
          v117 = &v106[8 * v116];
          v107 = (char *)v105 - v117;
          if (v105 != (unsigned __int16 **)v117)
          {
            v118 = v110;
            goto LABEL_215;
          }
LABEL_216:
          *v113 = &v110[v107];
        }
        v17 = sub_20B9EE7B8(v127, v101, v143);
        v5 = a1;
        if (__p)
        {
          v141 = (unsigned __int16 **)__p;
          operator delete(__p);
        }
LABEL_219:
        v119 = (uint64_t *)v17[3];
        v120 = (uint64_t *)v17[4];
        while (v119 != v120)
          sub_20B9E8A60(v5, v121, *v119++, *(_WORD *)(v132 + 2), v130);
        goto LABEL_11;
      }
    }
    if (v11 && !memcmp(__s1, v23, v26))
    {
      v30 = (const char **)&v143[12 * v129 + 25];
      *v30 = v24;
      v30[1] = (const char *)v25;
      ++v129;
      v30[2] = (const char *)v27;
      v28 = 1;
      if ((v9 & 0x10) == 0)
        goto LABEL_66;
    }
    else
    {
      v28 = 0;
      if ((v9 & 0x10) == 0)
        goto LABEL_66;
    }
    if (memcmp(&v136[-v27], v23, v27))
      goto LABEL_66;
    if (v128 == 5)
    {
      if (v27 < 3)
        goto LABEL_65;
      goto LABEL_64;
    }
    if (v27 != 3 || v134 < 5 || (v33 = __s1[v134 - 4], v28 = 1, v33 != 105) && v33 != 117)
    {
LABEL_64:
      v34 = (const char **)&v143[12 * v139 + 1];
      *v34 = v24;
      v34[1] = (const char *)v25;
      ++v139;
      v34[2] = (const char *)v27;
LABEL_65:
      v28 = 1;
    }
LABEL_66:
    if (v28)
    {
      v22 = v134;
      if (v25 != v27)
        goto LABEL_68;
    }
    else
    {
      v22 = v134;
    }
    goto LABEL_37;
  }
}

void sub_20B9E7F24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B9E7F64(uint64_t a1, unint64_t a2, int a3, float a4)
{
  uint64_t v7;
  int v8;
  char v9;
  BOOL v10;
  int v11;
  unsigned __int16 *v12;

  if ((int)a2 < 1)
    v7 = 0;
  else
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * (a2 - 1));
  v8 = *(_DWORD *)(a1 + 40);
  if ((v8 - 3) > 1)
  {
    v9 = a3;
  }
  else
  {
    v9 = 49;
    switch(a3)
    {
      case 711:
        v9 = 51;
        break;
      case 712:
        goto LABEL_22;
      case 713:
        break;
      case 714:
        v9 = 50;
        break;
      case 715:
        v9 = 52;
        break;
      default:
        if (a3 == 729)
          v9 = 53;
        else
LABEL_22:
          v9 = a3 + 49;
        break;
    }
  }
  v10 = v8 == 4 || v7 == 0;
  v11 = v9;
  if (!v10 && *(_QWORD *)(v7 + 16) == *(_QWORD *)(v7 + 8) && *(_QWORD *)(v7 + 64) == *(_QWORD *)(v7 + 56))
    goto LABEL_17;
  v12 = sub_20B9F17AC(*(_QWORD *)(a1 + 32), ***(unsigned __int16 ****)(a1 + 32), v9);
  if (v12)
    sub_20B9E8110(a1, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * a2), 0, (uint64_t)v12, a4);
  if (v7)
  {
LABEL_17:
    if ((*(_DWORD *)(v7 + 168) - 1) >= 2)
    {
      sub_20B9E8354(a1, *(uint64_t **)(v7 + 8), *(uint64_t **)(v7 + 16), v11, a2, 1, a4);
      sub_20B9E8354(a1, *(uint64_t **)(v7 + 32), *(uint64_t **)(v7 + 40), v11, a2, 1, a4);
      sub_20B9E8354(a1, *(uint64_t **)(v7 + 56), *(uint64_t **)(v7 + 64), v11, a2, 1, a4);
      sub_20B9E8354(a1, *(uint64_t **)(v7 + 80), *(uint64_t **)(v7 + 88), v11, a2, 1, a4);
    }
  }
}

void sub_20B9E8110(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float a5)
{
  unint64_t v5;
  uint64_t v6;
  float v7;
  uint64_t v9;
  unsigned int v11;
  int v12;
  char *v13;
  int v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;

  v5 = *(unsigned __int16 *)(a4 + 2);
  if (v5 >= 0x9C2)
    sub_20B83B31C("bitset test argument out of range");
  v6 = a1 + 80;
  if (((*(_QWORD *)(a1 + 80 + ((v5 >> 3) & 0x1FF8)) >> v5) & 1) == 0)
  {
    v7 = a5;
    v9 = a3;
    v11 = *(_DWORD *)(a1 + 40) - 3;
    if (v11 > 2)
    {
      v12 = 0;
      if (a3)
        goto LABEL_5;
    }
    else
    {
      v12 = dword_20BA5F7A8[v11];
      if (a3)
      {
LABEL_5:
        if ((*(float (**)(uint64_t))(*(_QWORD *)a3 + 80))(a3) < a5)
          v7 = (*(float (**)(uint64_t))(*(_QWORD *)v9 + 80))(v9);
        LOWORD(v9) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9) + 1;
        goto LABEL_10;
      }
    }
    LODWORD(v9) = *(unsigned __int8 *)(a4 + 8) >> 5;
LABEL_10:
    v13 = (char *)operator new(0xA8uLL);
    *((_QWORD *)v13 + 2) = 0;
    *(_QWORD *)v13 = &unk_24C46BA98;
    *((_QWORD *)v13 + 1) = 0;
    *((_QWORD *)v13 + 4) = a4;
    v13[40] = 0;
    *((_DWORD *)v13 + 11) = v12;
    v13[48] = 0;
    *((float *)v13 + 13) = v7;
    *(_OWORD *)(v13 + 56) = 0u;
    *(_OWORD *)(v13 + 72) = 0u;
    *((_DWORD *)v13 + 22) = 1065353216;
    *((_OWORD *)v13 + 6) = 0u;
    *((_OWORD *)v13 + 7) = 0u;
    *((_DWORD *)v13 + 32) = 1065353216;
    *((_WORD *)v13 + 68) = v9;
    *((_QWORD *)v13 + 18) = 0;
    *((_QWORD *)v13 + 19) = 0;
    v13[160] = 1;
    *((_QWORD *)&v20 + 1) = v13;
    *((_QWORD *)v13 + 3) = &off_24C4688D8;
    *(_QWORD *)&v20 = v13 + 24;
    v14 = sub_20B9F026C((uint64_t)(v13 + 24));
    v15 = 80;
    if (v14)
      v15 = 56;
    sub_20B9054E0((char **)(a2 + v15), &v20);
    v16 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
    if (*((_QWORD *)&v20 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = *(unsigned __int16 *)(a4 + 2);
    if (v19 >= 0x9C2)
      sub_20B83B31C("bitset set argument out of range");
    *(_QWORD *)(v6 + ((v19 >> 3) & 0x1FF8)) |= 1 << v19;
  }
}

void sub_20B9E8338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_20B811FE4((uint64_t)&a11);
  sub_20B811FE4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B9E8354(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4, unint64_t a5, int a6, float a7)
{
  uint64_t *v11;
  int64x2_t *v13;
  int v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned __int16 *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  _QWORD *v24;
  unsigned __int16 v25;
  uint64_t v26;
  char v27;
  int v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  _QWORD *v45;
  char *v46;
  __int128 v47;
  int64x2_t v48;
  uint64_t v49;
  int64x2_t *v50;
  unint64_t v51;
  unint64_t v52;
  unsigned __int16 v53;
  uint64_t v54;
  uint64_t v56;
  int64x2_t v57;
  uint64_t v58;
  int64x2_t *v59;

  if (a2 != a3)
  {
    v11 = a2;
    v13 = *(int64x2_t **)(*(_QWORD *)(a1 + 8) + 8 * a5);
    v51 = a5 - 2;
    v52 = a5 - 1;
    v50 = v13 + 2;
    v53 = a4 + 12495;
    v54 = a4 - 49;
    do
    {
      if (*(_BYTE *)(*v11 + 16) || (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v11 + 64))(*v11) == 2)
        return;
      v14 = *(_DWORD *)(a1 + 40);
      if (v14)
      {
        if (v14 != 1)
        {
          v15 = 0;
LABEL_17:
          v17 = (uint64_t *)*v11;
          v18 = *(_QWORD *)(*v11 + 8);
          v19 = sub_20B9F17AC(*(_QWORD *)(a1 + 32), (unsigned __int16 *)v18, a4);
          if (v19)
          {
            v20 = (uint64_t)v19;
            v21 = *v17;
            if (a6)
            {
              if ((*(unsigned int (**)(uint64_t *))(v21 + 40))(v17) >= a5
                || (v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v11 + 40))(*v11),
                    v23 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v11 + 40))(*v11) + 1,
                    v24 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 8 * a5),
                    LOWORD(v56) = 0,
                    sub_20B905EE0(v24, &v56, 1),
                    sub_20B905EE0(v24, &v56, 0),
                    v23 >= (unsigned __int16)v56)
                || *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * (~(unint64_t)v22 + a5)) + 16) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * (~(unint64_t)v22 + a5)) + 8))
              {
                sub_20B9E8110(a1, (uint64_t)v13, *v11, v20, a7);
              }
            }
            else
            {
              v27 = (*(uint64_t (**)(uint64_t *))(v21 + 72))(v17);
              if ((v15 & sub_20B9E7100(a1, (uint64_t)v13, v20, v27)) == 1)
              {
                v28 = *(unsigned __int16 *)(v20 + 2);
                if (v28 == 4 || v28 == 77 || v28 == 55)
                {
                  if (a5)
                  {
                    if (a5 == 1
                      || (v36 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 8 * v51), v36[2] == v36[1]) && v36[5] != v36[4])
                    {
                      sub_20B9E8834(a1, (uint64_t)v13, 0);
                    }
                  }
                }
              }
            }
          }
          else if (*(_DWORD *)(a1 + 40) == 4 && a5 && (*(_BYTE *)(v18 + 8) & 1) != 0)
          {
            v25 = v53;
            if (v54 <= 4)
              v25 = word_20BA5F79C[v54];
            v26 = 0;
            while ((unsigned __int16)word_20BA4B1C4[v26] != v25)
            {
              if (++v26 == 5)
                goto LABEL_60;
            }
            if (v26 != -1 && sub_20B9EFBA0((uint64_t)v17, v25) && (a6 & 1) == 0)
            {
              v29 = *(_QWORD *)(*v11 + 8);
              v30 = (char *)operator new(0x90uLL);
              v31 = v30;
              *((_QWORD *)v30 + 1) = 0;
              *((_QWORD *)v30 + 2) = 0;
              *(_QWORD *)v30 = &off_24C46BAD0;
              *((_QWORD *)v30 + 3) = &off_24C468D18;
              v32 = v30 + 24;
              *((_QWORD *)v30 + 4) = v29;
              v30[40] = 0;
              *((_DWORD *)v30 + 11) = 1;
              v30[48] = 0;
              *((_DWORD *)v30 + 13) = 1065353216;
              *(_OWORD *)(v30 + 72) = 0u;
              *(_OWORD *)(v30 + 56) = 0u;
              *((_DWORD *)v30 + 22) = 1065353216;
              *((_OWORD *)v30 + 6) = 0u;
              *((_OWORD *)v30 + 7) = 0u;
              *((_DWORD *)v30 + 32) = 1065353216;
              *((_WORD *)v30 + 68) = v25;
              v34 = (_QWORD *)v13[2].i64[1];
              v33 = v13[3].u64[0];
              if ((unint64_t)v34 >= v33)
              {
                v37 = ((uint64_t)v34 - v50->i64[0]) >> 4;
                v38 = v37 + 1;
                if ((unint64_t)(v37 + 1) >> 60)
                  sub_20B80CDD8();
                v39 = v33 - v50->i64[0];
                if (v39 >> 3 > v38)
                  v38 = v39 >> 3;
                if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF0)
                  v40 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v40 = v38;
                v59 = v13 + 3;
                v41 = (char *)sub_20B829AD0((uint64_t)v13[3].i64, v40);
                v43 = &v41[16 * v37];
                *(_QWORD *)v43 = v32;
                *((_QWORD *)v43 + 1) = v31;
                v45 = (_QWORD *)v13[2].i64[0];
                v44 = (_QWORD *)v13[2].i64[1];
                if (v44 == v45)
                {
                  v48 = vdupq_n_s64((unint64_t)v44);
                  v46 = &v41[16 * v37];
                }
                else
                {
                  v46 = &v41[16 * v37];
                  do
                  {
                    v47 = *((_OWORD *)v44 - 1);
                    v44 -= 2;
                    *((_OWORD *)v46 - 1) = v47;
                    v46 -= 16;
                    *v44 = 0;
                    v44[1] = 0;
                  }
                  while (v44 != v45);
                  v48 = *v50;
                }
                v35 = v43 + 16;
                v13[2].i64[0] = (uint64_t)v46;
                v13[2].i64[1] = (uint64_t)(v43 + 16);
                v57 = v48;
                v49 = v13[3].i64[0];
                v13[3].i64[0] = (uint64_t)&v41[16 * v42];
                v58 = v49;
                v56 = v48.i64[0];
                sub_20B9061D0((uint64_t)&v56);
              }
              else
              {
                *v34 = v32;
                v34[1] = v30;
                v35 = v34 + 2;
              }
              v13[2].i64[1] = (uint64_t)v35;
            }
          }
          goto LABEL_60;
        }
        v15 = !sub_20B9E89E8(a1, 0, (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3);
      }
      else
      {
        v15 = 1;
      }
      if (a5 < 2 || !v15)
        goto LABEL_17;
      v16 = *v11;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*v11 + 64))(*v11) != 1
        || *(_WORD *)(*(_QWORD *)(v16 + 8) + 2) != 20
        || !sub_20B905E00(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v52))
        || *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v51) + 112) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v51)
                                                                                        + 104))
      {
        v15 = 1;
        goto LABEL_17;
      }
LABEL_60:
      v11 += 2;
    }
    while (v11 != a3);
  }
}

void sub_20B9E8814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  sub_20B811FE4((uint64_t)va1);
  sub_20B811FE4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B9E8834(uint64_t a1, uint64_t a2, int a3)
{
  unsigned __int16 ***v6;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  char *v13;
  char **v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;

  if ((sub_20B905E74(a2) & 1) != 0)
    return;
  v6 = *(unsigned __int16 ****)(a1 + 32);
  v7 = **v6;
  if (v7)
  {
    v8 = sub_20B9F17AC((uint64_t)v6, v7, 104);
    if (!a3)
      goto LABEL_10;
LABEL_6:
    v9 = *(_QWORD *)(a2 + 40);
    while (v9 != *(_QWORD *)(a2 + 32))
    {
      v10 = *(_QWORD *)(v9 - 16);
      v9 -= 16;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 64))(v10) != 2)
        break;
      *(_QWORD *)(a2 + 40) = sub_20B811FE4(*(_QWORD *)(a2 + 40) - 16);
    }
    goto LABEL_10;
  }
  v8 = 0;
  if (a3)
    goto LABEL_6;
LABEL_10:
  v11 = *(_DWORD *)(a1 + 40) - 3;
  if (v11 > 2)
    v12 = 0;
  else
    v12 = dword_20BA5F7A8[v11];
  v13 = (char *)operator new(0x88uLL);
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = 0;
  *(_QWORD *)v13 = &off_24C46B910;
  *((_QWORD *)v13 + 4) = v8;
  v13[40] = 0;
  *((_DWORD *)v13 + 11) = v12;
  v13[48] = 0;
  *((_DWORD *)v13 + 13) = 1065353216;
  *(_OWORD *)(v13 + 56) = 0u;
  *(_OWORD *)(v13 + 72) = 0u;
  *((_DWORD *)v13 + 22) = 1065353216;
  *((_OWORD *)v13 + 6) = 0u;
  *((_OWORD *)v13 + 7) = 0u;
  *((_DWORD *)v13 + 32) = 1065353216;
  *((_QWORD *)&v18 + 1) = v13;
  *((_QWORD *)v13 + 3) = &off_24C467BB8;
  *(_QWORD *)&v18 = v13 + 24;
  if (sub_20B9F026C((uint64_t)(v13 + 24)))
    v14 = (char **)(a2 + 8);
  else
    v14 = (char **)(a2 + 32);
  sub_20B9054E0(v14, &v18);
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (a3)
    sub_20B9E744C(a1, (_QWORD *)(a2 + 32), a2, 0);
}

void sub_20B9E89D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B811FE4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_20B9E89E8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  BOOL v5;

  v3 = a2 + a3;
  if (a2 >= a2 + a3)
  {
    return 0;
  }
  else
  {
    v4 = 255;
    if (a2 > 0xFF)
      v4 = a2;
    v5 = 1;
    do
    {
      if (v4 == a2)
        sub_20B83B31C("bitset test argument out of range");
      if (((*(_QWORD *)(a1 + 504 + ((a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
        break;
      v5 = ++a2 < v3;
      --a3;
    }
    while (a3);
  }
  return v5;
}

void sub_20B9E8A60(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4, __int16 a5)
{
  unint64_t v5;
  uint64_t v6;
  unsigned int v11;
  int v12;
  char *v13;
  int v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;

  v5 = *(unsigned __int16 *)(a3 + 2);
  if (v5 >= 0x9C2)
    sub_20B83B31C("bitset test argument out of range");
  v6 = a1 + 80;
  if (((*(_QWORD *)(a1 + 80 + ((v5 >> 3) & 0x1FF8)) >> v5) & 1) == 0)
  {
    v11 = *(_DWORD *)(a1 + 40) - 3;
    if (v11 > 2)
      v12 = 0;
    else
      v12 = dword_20BA5F7A8[v11];
    v13 = (char *)operator new(0x90uLL);
    *((_QWORD *)v13 + 1) = 0;
    *((_QWORD *)v13 + 2) = 0;
    *(_QWORD *)v13 = &off_24C46B948;
    *((_QWORD *)v13 + 4) = a3;
    v13[40] = 0;
    *((_DWORD *)v13 + 11) = v12;
    v13[48] = 0;
    *((_DWORD *)v13 + 13) = 1058642330;
    *(_OWORD *)(v13 + 56) = 0u;
    *(_OWORD *)(v13 + 72) = 0u;
    *((_DWORD *)v13 + 22) = 1065353216;
    *((_OWORD *)v13 + 6) = 0u;
    *((_OWORD *)v13 + 7) = 0u;
    *((_DWORD *)v13 + 32) = 1065353216;
    *((_WORD *)v13 + 68) = a4;
    *((_WORD *)v13 + 69) = a5;
    *((_QWORD *)&v20 + 1) = v13;
    *((_QWORD *)v13 + 3) = &off_24C4680A8;
    *(_QWORD *)&v20 = v13 + 24;
    v14 = sub_20B9F026C((uint64_t)(v13 + 24));
    v15 = 32;
    if (v14)
      v15 = 8;
    sub_20B9054E0((char **)(a2 + v15), &v20);
    v16 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
    if (*((_QWORD *)&v20 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = *(unsigned __int16 *)(a3 + 2);
    if (v19 >= 0x9C2)
      sub_20B83B31C("bitset set argument out of range");
    *(_QWORD *)(v6 + ((v19 >> 3) & 0x1FF8)) |= 1 << v19;
  }
}

void sub_20B9E8C2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_20B811FE4((uint64_t)&a11);
  sub_20B811FE4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_20B9E8C48(uint64_t a1, uint64_t a2)
{
  unsigned int v3;

  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  return v3 > (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
}

uint64_t sub_20B9E8C8C(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  BOOL v6;
  uint64_t result;
  const char *v8;
  const char *v9;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  v6 = v4 == v5;
  result = v4 > v5;
  if (v6)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    if (result)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
      if (result)
      {
        v8 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
        v9 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
        return strcmp(v8, v9) >> 31;
      }
    }
  }
  return result;
}

uint64_t *sub_20B9E8D3C(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  BOOL v12;
  uint64_t **v13;
  uint64_t **v14;
  unsigned int v15;
  uint64_t *v16;
  _QWORD *v17;
  _QWORD *v18;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = result;
    v6 = result + 1;
    do
    {
      v7 = *((unsigned __int16 *)v4 + 13);
      v8 = (uint64_t *)v5[1];
      v9 = v6;
      if ((uint64_t *)*v5 == v6)
        goto LABEL_9;
      v10 = v5[1];
      v11 = v6;
      if (v8)
      {
        do
        {
          v9 = (uint64_t *)v10;
          v10 = *(_QWORD *)(v10 + 8);
        }
        while (v10);
      }
      else
      {
        do
        {
          v9 = (uint64_t *)v11[2];
          v12 = *v9 == (_QWORD)v11;
          v11 = v9;
        }
        while (v12);
      }
      if (*((unsigned __int16 *)v9 + 13) < v7)
      {
LABEL_9:
        if (v8)
          v13 = (uint64_t **)v9;
        else
          v13 = (uint64_t **)v6;
        if (v8)
          v14 = (uint64_t **)(v9 + 1);
        else
          v14 = (uint64_t **)v6;
        if (*v14)
          goto LABEL_25;
      }
      else
      {
        v14 = (uint64_t **)v6;
        v13 = (uint64_t **)v6;
        if (v8)
        {
          while (1)
          {
            while (1)
            {
              v13 = (uint64_t **)v8;
              v15 = *((unsigned __int16 *)v8 + 13);
              if (v15 <= v7)
                break;
              v8 = *v13;
              v14 = v13;
              if (!*v13)
                goto LABEL_24;
            }
            if (v15 >= v7)
              goto LABEL_25;
            v8 = v13[1];
            if (!v8)
            {
              v14 = v13 + 1;
              break;
            }
          }
        }
      }
LABEL_24:
      v16 = (uint64_t *)operator new(0x20uLL);
      *((_WORD *)v16 + 13) = v7;
      result = sub_20B8296A0((uint64_t **)v5, (uint64_t)v13, v14, v16);
LABEL_25:
      v17 = (_QWORD *)v4[1];
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = (_QWORD *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (_QWORD *)v4[2];
          v12 = *v18 == (_QWORD)v4;
          v4 = v18;
        }
        while (!v12);
      }
      v4 = v18;
    }
    while (v18 != a3);
  }
  return result;
}

__CFArray *sub_20B9E8E84(uint64_t a1)
{
  __CFArray *Mutable;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  const void *v6;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], (uint64_t)(*(_QWORD *)(a1 + 568) - *(_QWORD *)(a1 + 560)) >> 3, 0);
  v3 = *(_QWORD **)(a1 + 560);
  v4 = *(_QWORD **)(a1 + 568);
  while (v3 != v4)
  {
    v5 = (_QWORD *)*v3;
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v3 + 64))(*v3) != 2 && *(_WORD *)(v5[1] + 2) != 272)
    {
      v6 = (const void *)(*(uint64_t (**)(_QWORD *, _QWORD))(*v5 + 16))(v5, 0);
      CFArrayAppendValue(Mutable, v6);
      CFRelease(v6);
    }
    ++v3;
  }
  return Mutable;
}

uint64_t sub_20B9E8F44(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  BOOL v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v35;
  _QWORD *v36;
  unsigned __int16 v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16) - v2;
  v4 = a2 + 1;
  if (a2 + 1 >= v3 >> 3)
    return 1;
  v5 = *(_QWORD *)(v2 + 8 * a2);
  if ((*(_DWORD *)(v5 + 168) - 1) < 2)
    return 1;
  v6 = v3 >> 3;
  v8 = *(_QWORD *)(v5 + 8);
  v7 = *(_QWORD *)(v5 + 16);
  v9 = a2 + 7;
  if (v6 < a2 + 7)
    v9 = v6;
  if (v7 == v8)
  {
    while (v4 < v9)
    {
      v21 = *(_QWORD *)(v2 + 8 * v4);
      if ((*(_DWORD *)(v21 + 168) - 1) < 2)
        break;
      if (!*(_QWORD *)(v21 + 152))
        return 0;
      v22 = 0;
      ++v4;
      if (*(unsigned __int16 *)(*(_QWORD *)(v21 + 136) + 26) <= a2)
        return v22;
    }
    return 1;
  }
  if (v4 >= v9)
    return 1;
  v11 = 0;
  v12 = a2 + 1;
  do
  {
    v13 = *(_QWORD *)(v2 + 8 * v12);
    if ((*(_DWORD *)(v13 + 168) - 1) < 2)
      break;
    if (*(_QWORD *)(v13 + 152))
      v14 = *(unsigned __int16 *)(*(_QWORD *)(v13 + 136) + 26);
    else
      v14 = 0;
    if (v12 > v11 && v14 <= a2)
      v11 = v12;
    ++v12;
  }
  while (v9 != v12);
  if ((uint64_t)v11 < 1)
    return 1;
  if (v6 >= v11 + 6)
    v6 = v11 + 6;
  if (v11 >= v6)
  {
    v17 = v11;
  }
  else
  {
    v16 = v11;
    v17 = v11;
    do
    {
      v18 = *(_QWORD *)(v2 + 8 * v16);
      if ((*(_DWORD *)(v18 + 168) - 1) < 2)
        break;
      if (*(_QWORD *)(v18 + 152))
        v19 = *(unsigned __int16 *)(*(_QWORD *)(v18 + 136) + 26);
      else
        v19 = 0;
      if (v16 > v17 && v19 <= v11)
        v17 = v16;
      ++v16;
    }
    while (v6 != v16);
  }
  sub_20B9EE6E4((uint64_t *)&v38, *(_QWORD *)(v2 + 8 * v17) + 136);
  v24 = v40;
  if (v40)
  {
    do
    {
      v25 = v38;
      v26 = *((unsigned __int16 *)v38 + 13);
      v22 = v4 == v26;
      if (v4 == v26)
        break;
      v27 = (uint64_t *)v38[1];
      v28 = v38;
      if (v27)
      {
        do
        {
          v29 = v27;
          v27 = (uint64_t *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          v29 = (uint64_t *)v28[2];
          v30 = *v29 == (_QWORD)v28;
          v28 = v29;
        }
        while (!v30);
      }
      v38 = v29;
      v40 = v24 - 1;
      sub_20B860794(v39, v25);
      operator delete(v25);
      if (v4 < v26)
      {
        v31 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v26);
        v32 = *(_QWORD **)(v31 + 136);
        v33 = (_QWORD *)(v31 + 144);
        if (v32 != (_QWORD *)(v31 + 144))
        {
          while (1)
          {
            v37 = *((_WORD *)v32 + 13);
            if (v4 == v37)
              break;
            if (v37 < v26 && v4 < v37)
              sub_20B871FAC(&v38, &v37, &v37);
            v35 = (_QWORD *)v32[1];
            if (v35)
            {
              do
              {
                v36 = v35;
                v35 = (_QWORD *)*v35;
              }
              while (v35);
            }
            else
            {
              do
              {
                v36 = (_QWORD *)v32[2];
                v30 = *v36 == (_QWORD)v32;
                v32 = v36;
              }
              while (!v30);
            }
            v32 = v36;
            if (v36 == v33)
              goto LABEL_62;
          }
          v22 = 1;
          break;
        }
      }
LABEL_62:
      v24 = v40;
    }
    while (v40);
  }
  else
  {
    v22 = 0;
  }
  sub_20B8292CC((uint64_t)&v38, v39);
  return v22;
}

void sub_20B9E91F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  sub_20B8292CC((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9E920C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 *v10;
  unsigned __int16 *v11;

  if (a4 < 2)
    return -1;
  v7 = a4 + a3;
  v8 = *(_QWORD *)(a1 + 32);
  v9 = a4 + 1;
  while (1)
  {
    v10 = sub_20B9F172C(v8, a2, a3, a3 + v9 - 2);
    if (v10)
    {
      if ((v10[4] & 2) != 0)
      {
        v11 = sub_20B9F172C(v8, a2, a3 + v9 - 2, v7);
        if (v11)
        {
          if ((v11[4] & 2) == 0)
            break;
        }
      }
    }
    if ((unint64_t)--v9 < 3)
      return -1;
  }
  return a3 + v9 - 2;
}

void sub_20B9E92BC(_QWORD *a1, float *a2)
{
  uint64_t v4;
  int v5;

  v4 = a1[5];
  v5 = *(unsigned __int16 *)a2;
  if (sub_20B9E3218(*(_DWORD *)(v4 + 40), v5))
  {
    sub_20B9E7F64(v4, a1[6], v5, a2[1]);
    *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = 1;
  }
}

void sub_20B9E9320(_QWORD *a1, float *a2)
{
  uint64_t v4;
  int v5;

  v4 = a1[5];
  v5 = *(unsigned __int16 *)a2;
  if (sub_20B9E3218(*(_DWORD *)(v4 + 40), v5))
  {
    sub_20B9E7F64(v4, a1[6], v5, a2[1]);
    *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = 1;
  }
}

_BYTE *sub_20B9E9384(_BYTE *result, uint64_t a2, uint64_t a3, char a4, int a5, int a6)
{
  int v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  int v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  const __CFString *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int16 *v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int v38;
  int v39;
  uint64_t v40;
  float v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  unint64_t v45;
  uint64_t *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t *v55;
  _QWORD *v56;
  _QWORD *v57;
  char *v58;
  __int128 v59;
  int64x2_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  unint64_t v64;
  uint64_t *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t *v74;
  _QWORD *v75;
  _QWORD *v76;
  char *v77;
  __int128 v78;
  int64x2_t v79;
  uint64_t v80;
  uint64_t v81;
  __int16 v82;
  uint64_t v86;
  unsigned __int8 v88;
  unsigned __int8 v89;
  uint64_t v90;
  int64x2_t v91;
  uint64_t v92;
  _QWORD *v93;

  if (a2 != a3)
  {
    v6 = a6;
    v7 = a4;
    v8 = a3;
    v9 = a2;
    v10 = (uint64_t)result;
    v11 = "Remove";
    if (a5)
      v11 = "Add";
    v86 = (uint64_t)v11;
    while (1)
    {
      v12 = *(_DWORD *)(v9 + 24);
      if (v6 && v12 == 1)
        return result;
      result = sub_20B9547EC();
      if (*result && (result[9] & 2) != 0)
      {
        v13 = sub_20B9547EC();
        result = (_BYTE *)sub_20B954D48((uint64_t)v13, 0x200u, (uint64_t)"%s: <Modification: %p>\n", v14, v15, v16, v17, v18, v86);
      }
      if (v12 == 5)
      {
        v19 = *(_QWORD *)(v10 + 808) + *(_QWORD *)(v9 + 32);
        if (v19 != -1)
        {
          v20 = *(_QWORD *)(v9 + 40);
          v21 = v19 + v20 - 1;
          result = (_BYTE *)sub_20B9059D0(*(_QWORD **)(*(_QWORD *)(v10 + 8) + 8 * v21), *(const __CFString **)(v9 + 16), (const void *)(*(_QWORD *)(v10 + 48) + 2 * v19), v20, a5);
          if ((_DWORD)result)
          {
            if (v21 < *(_QWORD *)(v10 + 496))
              *(_QWORD *)(v10 + 496) = v21;
          }
        }
        goto LABEL_62;
      }
      if ((v7 & 1) == 0)
        break;
LABEL_62:
      v9 += 72;
      if (v9 == v8)
        return result;
    }
    v23 = *(_QWORD *)(v9 + 8);
    v22 = *(const __CFString **)(v9 + 16);
    v24 = *(_QWORD *)(v9 + 40);
    v25 = *(_QWORD *)(v10 + 808);
    v26 = v25 + *(_QWORD *)(v9 + 32);
    v27 = *(_QWORD *)v9 + v25;
    v89 = 0;
    v28 = *(double *)(v9 + 64);
    result = sub_20B9E9A14(v10, v22, v26, v24, v27, v23, v12, &v89);
    if (result)
    {
      v29 = v24 + v26 - 1;
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v29) + 168) - 1) >= 2)
      {
        v30 = (uint64_t)result;
        v32 = *(_QWORD *)(v9 + 48);
        v31 = *(_QWORD *)(v9 + 56);
        v88 = 0;
        v33 = v27;
        v34 = v31;
        v35 = sub_20B9E9A14(v10, v22, v32, v31, v33, v23, v12, &v88);
        v36 = *(_QWORD *)(v10 + 8);
        if (!v35 || (v37 = v32 + v34 - 1, (*(_DWORD *)(*(_QWORD *)(v36 + 8 * v37) + 168) - 1) < 2))
        {
          result = (_BYTE *)sub_20B905620(*(_QWORD *)(v36 + 8 * v29), v30, v24, v89, a5, v28);
          v6 = a6;
          if (!(_DWORD)result)
            goto LABEL_61;
          v37 = v29;
          if (v29 >= *(_QWORD *)(v10 + 496))
            goto LABEL_61;
          goto LABEL_60;
        }
        if (a5)
        {
          v81 = v32 + v34 - 1;
          v82 = v34;
          v38 = *(_DWORD *)(v10 + 40) - 3;
          v6 = a6;
          if (v38 > 2)
            v39 = 0;
          else
            v39 = dword_20BA5F7A8[v38];
          v40 = operator new();
          v41 = v28;
          *(_BYTE *)(v40 + 16) = v89;
          *(_DWORD *)(v40 + 20) = v39;
          *(_BYTE *)(v40 + 24) = 0;
          *(float *)(v40 + 28) = v41;
          *(_OWORD *)(v40 + 32) = 0u;
          *(_OWORD *)(v40 + 48) = 0u;
          *(_DWORD *)(v40 + 64) = 1065353216;
          *(_OWORD *)(v40 + 72) = 0u;
          *(_OWORD *)(v40 + 88) = 0u;
          *(_DWORD *)(v40 + 104) = 1065353216;
          *(_QWORD *)(v40 + 8) = v30;
          *(_QWORD *)v40 = &off_24C4688D8;
          *(_WORD *)(v40 + 112) = v24;
          *(_QWORD *)(v40 + 120) = 0;
          *(_QWORD *)(v40 + 128) = 0;
          *(_BYTE *)(v40 + 136) = 1;
          v42 = operator new();
          *(_BYTE *)(v42 + 16) = v88;
          *(_DWORD *)(v42 + 20) = v39;
          *(_BYTE *)(v42 + 24) = 0;
          *(float *)(v42 + 28) = v41;
          *(_OWORD *)(v42 + 32) = 0u;
          *(_OWORD *)(v42 + 48) = 0u;
          *(_DWORD *)(v42 + 64) = 1065353216;
          *(_OWORD *)(v42 + 72) = 0u;
          *(_OWORD *)(v42 + 88) = 0u;
          *(_DWORD *)(v42 + 104) = 1065353216;
          *(_QWORD *)v42 = &off_24C4688D8;
          *(_QWORD *)(v42 + 8) = v35;
          *(_WORD *)(v42 + 112) = v82;
          *(_BYTE *)(v42 + 136) = 1;
          *(_QWORD *)(v40 + 128) = v42;
          *(_QWORD *)(v42 + 120) = v40;
          *(_QWORD *)(v42 + 128) = 0;
          v43 = *(_QWORD **)(*(_QWORD *)(v10 + 8) + 8 * v29);
          v44 = (_QWORD *)operator new();
          v44[1] = 0;
          *v44 = &off_24C46BEF8;
          v44[2] = 0;
          v44[3] = v40;
          v45 = v43[9];
          v46 = (uint64_t *)v43[8];
          if ((unint64_t)v46 >= v45)
          {
            v48 = v43[7];
            v49 = ((uint64_t)v46 - v48) >> 4;
            v50 = v49 + 1;
            if ((unint64_t)(v49 + 1) >> 60)
              sub_20B80CDD8();
            v51 = v45 - v48;
            if (v51 >> 3 > v50)
              v50 = v51 >> 3;
            if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF0)
              v52 = 0xFFFFFFFFFFFFFFFLL;
            else
              v52 = v50;
            v93 = v43 + 9;
            v53 = (char *)sub_20B829AD0((uint64_t)(v43 + 9), v52);
            v55 = (uint64_t *)&v53[16 * v49];
            *v55 = v40;
            v55[1] = (uint64_t)v44;
            v57 = (_QWORD *)v43[7];
            v56 = (_QWORD *)v43[8];
            if (v56 == v57)
            {
              v60 = vdupq_n_s64((unint64_t)v56);
              v58 = &v53[16 * v49];
              v6 = a6;
              v37 = v81;
            }
            else
            {
              v58 = &v53[16 * v49];
              v6 = a6;
              v37 = v81;
              do
              {
                v59 = *((_OWORD *)v56 - 1);
                v56 -= 2;
                *((_OWORD *)v58 - 1) = v59;
                v58 -= 16;
                *v56 = 0;
                v56[1] = 0;
              }
              while (v56 != v57);
              v60 = *(int64x2_t *)(v43 + 7);
            }
            v47 = v55 + 2;
            v43[7] = v58;
            v43[8] = v55 + 2;
            v91 = v60;
            v61 = v43[9];
            v43[9] = &v53[16 * v54];
            v92 = v61;
            v90 = v60.i64[0];
            sub_20B9061D0((uint64_t)&v90);
          }
          else
          {
            *v46 = v40;
            v46[1] = (uint64_t)v44;
            v47 = v46 + 2;
            v37 = v81;
          }
          v43[8] = v47;
          v62 = *(_QWORD **)(*(_QWORD *)(v10 + 8) + 8 * v37);
          v63 = (_QWORD *)operator new();
          v63[1] = 0;
          *v63 = &off_24C46BEF8;
          v63[2] = 0;
          v63[3] = v42;
          result = v62 + 9;
          v64 = v62[9];
          v65 = (uint64_t *)v62[8];
          if ((unint64_t)v65 >= v64)
          {
            v67 = v62[7];
            v68 = ((uint64_t)v65 - v67) >> 4;
            v69 = v68 + 1;
            if ((unint64_t)(v68 + 1) >> 60)
              sub_20B80CDD8();
            v70 = v64 - v67;
            if (v70 >> 3 > v69)
              v69 = v70 >> 3;
            if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF0)
              v71 = 0xFFFFFFFFFFFFFFFLL;
            else
              v71 = v69;
            v93 = v62 + 9;
            v72 = (char *)sub_20B829AD0((uint64_t)result, v71);
            v74 = (uint64_t *)&v72[16 * v68];
            *v74 = v42;
            v74[1] = (uint64_t)v63;
            v76 = (_QWORD *)v62[7];
            v75 = (_QWORD *)v62[8];
            if (v75 == v76)
            {
              v79 = vdupq_n_s64((unint64_t)v75);
              v77 = &v72[16 * v68];
              v6 = a6;
            }
            else
            {
              v77 = &v72[16 * v68];
              v6 = a6;
              do
              {
                v78 = *((_OWORD *)v75 - 1);
                v75 -= 2;
                *((_OWORD *)v77 - 1) = v78;
                v77 -= 16;
                *v75 = 0;
                v75[1] = 0;
              }
              while (v75 != v76);
              v79 = *(int64x2_t *)(v62 + 7);
            }
            v66 = v74 + 2;
            v62[7] = v77;
            v62[8] = v74 + 2;
            v91 = v79;
            v80 = v62[9];
            v62[9] = &v72[16 * v73];
            v92 = v80;
            v90 = v79.i64[0];
            result = (_BYTE *)sub_20B9061D0((uint64_t)&v90);
          }
          else
          {
            *v65 = v42;
            v65[1] = (uint64_t)v63;
            v66 = v65 + 2;
          }
          v62[8] = v66;
        }
        else
        {
          result = (_BYTE *)sub_20B9E9CA0(v36, v29, (unsigned __int16)v24, v89, v30, (uint64_t)v35);
          v6 = a6;
          if (!(_DWORD)result)
            goto LABEL_61;
          result = (_BYTE *)sub_20B9E9CA0(*(_QWORD *)(v10 + 8), v37, (unsigned __int16)v34, v88, (uint64_t)v35, 0);
          if (!(_DWORD)result)
            goto LABEL_61;
        }
        if (v37 < *(_QWORD *)(v10 + 496))
LABEL_60:
          *(_QWORD *)(v10 + 496) = v37;
      }
    }
LABEL_61:
    v7 = a4;
    v8 = a3;
    goto LABEL_62;
  }
  return result;
}

void sub_20B9E9990(_Unwind_Exception *exception_object)
{
  unint64_t *v1;
  std::__shared_weak_count *v2;
  unint64_t v4;

  do
    v4 = __ldaxr(v1);
  while (__stlxr(v4 - 1, v1));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int16 *sub_20B9E9A14(uint64_t a1, CFStringRef theString, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, _BYTE *a8)
{
  uint64_t v13;
  CFIndex v15;
  CFIndex Length;
  uint64_t v17;
  CFIndex v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  CFIndex v23;
  int v24;
  unsigned int CharacterAtIndex;
  int v26;
  uint64_t v27;
  int v28;
  unsigned __int16 *v29;
  unint64_t v30;
  unsigned __int16 ***v31;
  unint64_t v32;
  BOOL v33;
  _BYTE v35[16];
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t *v39;
  CFStringRef v40;
  int v41;
  CFIndex v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  if (a3 == -1)
    return 0;
  v13 = a3;
  v15 = a5 + a6;
  v40 = theString;
  Length = CFStringGetLength(theString);
  v17 = Length + a4;
  v18 = Length + v15;
  if (a7 != 3)
  {
    v18 = v15;
    v17 = a4;
  }
  if (a7 == 4)
    v18 = v15;
  v42 = v18;
  if (a7 == 4)
    v19 = a4 - a6;
  else
    v19 = v17;
  MEMORY[0x24BDAC7A8]();
  if (v19 < 1)
  {
    v26 = 0;
    v28 = 0;
  }
  else
  {
    v41 = a7;
    v37 = a4;
    v38 = a8;
    v39 = &v36;
    v20 = 0;
    v21 = 0;
    if (a5 <= v13)
      v22 = v13;
    else
      v22 = a5;
    v23 = v22 - a5;
    v24 = v41;
    do
    {
      if (v13 < v22 || v13 >= v42)
      {
        sub_20B9E3078(*(_DWORD *)(a1 + 40), *(unsigned __int16 *)(*(_QWORD *)(a1 + 48) + 2 * v13), &v35[v20]);
        ++v21;
        ++v13;
      }
      else if (v24 == 4)
      {
        ++v13;
      }
      else
      {
        CharacterAtIndex = CFStringGetCharacterAtIndex(v40, v23);
        sub_20B9E3078(*(_DWORD *)(a1 + 40), CharacterAtIndex, &v35[v20]);
        ++v21;
        if (v24 == 3)
          ++v22;
        else
          ++v13;
        ++v23;
      }
      if (v21 > 11)
        break;
      v20 = v21;
    }
    while (v19 > v21);
    v26 = v21;
    a8 = v38;
    if (v21 <= 0)
    {
      v28 = 0;
    }
    else
    {
      v27 = 0;
      v28 = 0;
      while (v35[(v21 - 1 + v27)] == 39)
      {
        ++v28;
        --v27;
        if (v21 + 1 + v27 <= 1)
        {
          v28 = v21;
          break;
        }
      }
    }
    a4 = v37;
  }
  *a8 = v28;
  v30 = v26 - v28;
  if ((int)v30 < 1)
    return 0;
  if (v13 < a4)
  {
    do
    {
      if (*(_WORD *)(*(_QWORD *)(a1 + 48) + 2 * v13) == 39)
        *a8 = ++v28;
      ++v13;
    }
    while (a4 != v13);
  }
  v31 = *(unsigned __int16 ****)(a1 + 32);
  v29 = **v31;
  if (v29)
  {
    v32 = 0;
    do
    {
      v29 = sub_20B9F17AC((uint64_t)v31, v29, (char)v35[v32++]);
      if (v29)
        v33 = v32 >= v30;
      else
        v33 = 1;
    }
    while (!v33);
  }
  return v29;
}

uint64_t sub_20B9E9CA0(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = *(_QWORD *)(a1 + 8 * a2);
  v7 = *(_QWORD *)(v6 + 56);
  if (v7 == *(_QWORD *)(v6 + 64))
    return 0;
  for (i = -v7; ; i -= 16)
  {
    v13 = *(_QWORD *)v7;
    if (*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)v7 + 8) + 2) != *(unsigned __int16 *)(a5 + 2)
      || (*(unsigned int (**)(_QWORD))(*(_QWORD *)v13 + 40))(*(_QWORD *)v7) != a3
      || *(unsigned __int8 *)(v13 + 16) != a4)
    {
      goto LABEL_14;
    }
    if (!a6)
      break;
    v14 = *(_QWORD *)(v13 + 128);
    if (v14 && *(_QWORD *)(v14 + 8) == a6)
    {
      *(_QWORD *)(v14 + 120) = v14;
      v18 = -i;
      v19 = 16 - i;
      v20 = *(_QWORD *)(v6 + 64);
      if (16 - i != v20)
      {
        do
        {
          v21 = v18 + 16;
          sub_20B82E770(v18, (__int128 *)(v18 + 16));
          v22 = v18 + 32;
          v18 += 16;
        }
        while (v22 != v20);
        v19 = *(_QWORD *)(v6 + 64);
        v18 = v21;
      }
      if (v19 != v18)
      {
        do
          v19 = sub_20B811FE4(v19 - 16);
        while (v19 != v18);
LABEL_27:
        v19 = v18;
        goto LABEL_28;
      }
      goto LABEL_28;
    }
LABEL_14:
    v7 += 16;
    if (v7 == *(_QWORD *)(v6 + 64))
      return 0;
  }
  v15 = *(_QWORD *)(v13 + 120);
  if (v15)
    v16 = v15 == v13;
  else
    v16 = 0;
  if (!v16)
    goto LABEL_14;
  v18 = -i;
  v19 = 16 - i;
  v23 = *(_QWORD *)(v6 + 64);
  if (16 - i != v23)
  {
    do
    {
      v24 = v18 + 16;
      sub_20B82E770(v18, (__int128 *)(v18 + 16));
      v25 = v18 + 32;
      v18 += 16;
    }
    while (v25 != v23);
    v19 = *(_QWORD *)(v6 + 64);
    v18 = v24;
  }
  if (v19 != v18)
  {
    do
      v19 = sub_20B811FE4(v19 - 16);
    while (v19 != v18);
    goto LABEL_27;
  }
LABEL_28:
  *(_QWORD *)(v6 + 64) = v19;
  return 1;
}

void sub_20B9E9E3C(uint64_t a1, uint64_t a2, const char *a3, const char *a4, _QWORD *a5)
{
  int v10;
  uint64_t v11;
  char **v12;
  char **v13;
  const char **v14;
  size_t v15;
  size_t v16;
  size_t v17;
  size_t v18;
  unsigned __int16 ***v19;
  unsigned __int16 *v20;
  char *v21;
  BOOL v22;
  size_t v23;
  BOOL v24;
  size_t v25;
  size_t v26;
  uint64_t v27;
  char **v28;
  const char **v29;
  size_t v30;
  const char *v31;
  unsigned int v32;
  size_t v33;
  int v34;
  uint64_t *v35;
  __int16 v36;
  size_t v37;
  size_t v38;
  const char *__src;
  int v40;

  if (a3)
  {
    if (!*(_BYTE *)(*a5 + 16))
    {
      v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a5 + 64))(*a5);
      if (a4 || v10 == 2)
      {
        v11 = *(unsigned __int16 *)(*(_QWORD *)(*a5 + 8) + 2);
        v12 = &(&off_24C4A2768)[2 * v11];
        v13 = &(&off_24C4A0588)[2 * v11];
        v14 = (const char **)(*(_DWORD *)(a1 + 40) == 5 ? v12 : v13);
        v40 = v10;
        __src = *v14;
        v15 = strlen(*v14);
        v16 = strlen(a3);
        v17 = v16 + v15;
        if (v16 + v15 <= 6)
        {
          v18 = v16;
          if (v15)
            memmove(*(void **)(a1 + 680), __src, v15);
          if (v18)
            memmove((void *)(*(_QWORD *)(a1 + 680) + v15), a3, v18);
          v37 = v15;
          v38 = v18;
          v19 = *(unsigned __int16 ****)(a1 + 32);
          v20 = **v19;
          v21 = *(char **)(a1 + 680);
          if (v17)
            v22 = v20 == 0;
          else
            v22 = 1;
          if (!v22)
          {
            v23 = 0;
            do
            {
              v20 = sub_20B9F17AC((uint64_t)v19, v20, v21[v23++]);
              if (v20)
                v24 = v23 >= v17;
              else
                v24 = 1;
            }
            while (!v24);
          }
          v26 = v37;
          v25 = v38;
          if (v20 && (v20[4] & 2) != 0)
          {
            if (v40 == 2)
            {
              v27 = *(unsigned __int16 *)(*a5 + 112);
              v28 = &(&off_24C4A2768)[2 * v27];
              v29 = (const char **)&(&off_24C4A0588)[2 * v27];
              if (*(_DWORD *)(*a5 + 20) == 2)
                v29 = (const char **)v28;
              __src = *v29;
              v26 = strlen(*v29);
            }
            if (a4)
              v25 = strlen(a4);
            v30 = v25 + v26;
            if (v25 + v26 <= 0x13)
            {
              if (v26)
              {
                memmove(v21, __src, v26);
                v21 = *(char **)(a1 + 680);
              }
              if (v25)
              {
                if (a4)
                  v31 = a4;
                else
                  v31 = a3;
                memmove(&v21[v26], v31, v25);
                v21 = *(char **)(a1 + 680);
              }
              v32 = 0;
              if (v30)
              {
                v33 = v25 + v26;
                do
                {
                  v34 = *v21++;
                  v32 = (1025 * (v32 + v34)) ^ ((1025 * (v32 + v34)) >> 6);
                  --v33;
                }
                while (v33);
                v32 *= 9;
              }
              v35 = sub_20B9EEBB4((_QWORD *)(a1 + 640), 32769 * (v32 ^ (v32 >> 11)));
              if (v35)
              {
                v36 = *((_WORD *)v35 + 10);
                (*(void (**)(_QWORD))(*(_QWORD *)*a5 + 72))(*a5);
                sub_20B9E8A60(a1, a2, (uint64_t)v20, v36, v30);
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_20B9EA0B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  char v6;
  BOOL v7;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unsigned __int16 ***v25;
  unsigned __int16 *v26;
  unsigned __int16 *v27;
  unsigned __int16 *v28;
  int v29;
  _DWORD *v30;
  int v31;
  char *v32;
  int v33;
  char *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  char v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  __int128 v45;

  v4 = *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 40);
  if (!v5)
  {
    if ((unint64_t)(v4 - 105) < 0xFFFFFFFFFFFFFFA7)
    {
      v6 = 0;
      return v6 & 1;
    }
    goto LABEL_11;
  }
  v6 = 0;
  v7 = v5 != 5 || v4 < 16;
  if (!v7 && (unint64_t)v4 <= 0x68)
  {
LABEL_11:
    v9 = (v4 >> 3) - 1;
    v10 = dword_20BA5F7A8;
    v6 = 1;
    while (1)
    {
      if (v9 < 0 || *(_QWORD *)(a2 + 8) - *(_QWORD *)a2 > 0xCFuLL)
        return v6 & 1;
      v11 = *(_QWORD *)(a1 + 8);
      v12 = *(_QWORD **)(v11 + 8 * v9);
      if (v12[2] == v12[1])
      {
        v13 = (uint64_t *)v12[4];
        v14 = (uint64_t *)v12[5];
        if (v14 == v13)
          return v6 & 1;
      }
      else
      {
        v13 = (uint64_t *)v12[4];
        v14 = (uint64_t *)v12[5];
      }
      v45 = 0uLL;
      v15 = 255;
      if (v13 != v14)
      {
        while ((*(_BYTE *)(*(_QWORD *)(*v13 + 8) + 8) & 1) == 0
             || (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v13 + 32))(*v13) > 2)
        {
          if (v15 == 255)
            v15 = *(unsigned __int8 *)(*v13 + 16);
          v13 += 2;
          if (v13 == v14)
            goto LABEL_25;
        }
        sub_20B90FE7C(&v45, *v13, v13[1]);
LABEL_25:
        if ((_QWORD)v45)
        {
LABEL_66:
          sub_20B9054E0((char **)a2, &v45);
          v40 = 0;
          v9 -= (*(unsigned int (**)(_QWORD))(*(_QWORD *)v45 + 32))(v45);
          goto LABEL_68;
        }
        v11 = *(_QWORD *)(a1 + 8);
      }
      v16 = *(_QWORD *)(v11 + 8 * v9);
      v17 = *(uint64_t **)(v16 + 8);
      if (v17 == *(uint64_t **)(v16 + 16))
      {
        v22 = 0;
      }
      else
      {
        v19 = *v17;
        v18 = (std::__shared_weak_count *)v17[1];
        if (v18)
        {
          p_shared_owners = (unint64_t *)&v18->__shared_owners_;
          do
            v21 = __ldxr(p_shared_owners);
          while (__stxr(v21 + 1, p_shared_owners));
        }
        if (sub_20B9EF850(v19))
        {
          sub_20B90FE7C(&v45, v19, (uint64_t)v18);
        }
        else if (v15 == 255)
        {
          v15 = *(unsigned __int8 *)(v19 + 16);
        }
        if (v18)
        {
          v23 = (unint64_t *)&v18->__shared_owners_;
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        v22 = v45;
        if ((_QWORD)v45)
          goto LABEL_65;
      }
      if (v15 != 255)
      {
        if (v9 < v15)
          goto LABEL_67;
        sub_20B9E3078(*(_DWORD *)(a1 + 40), *(unsigned __int16 *)(*(_QWORD *)(a1 + 48) + 2 * (v9 - v15)), *(char **)(a1 + 72));
        v25 = *(unsigned __int16 ****)(a1 + 32);
        v26 = **v25;
        if (v26)
        {
          v27 = sub_20B9F17AC((uint64_t)v25, v26, **(char **)(a1 + 72));
          if (v27)
          {
            v28 = v27;
            v29 = *(_DWORD *)(a1 + 40) - 3;
            v30 = v10;
            if (v29 > 2)
              v31 = 0;
            else
              v31 = v10[v29];
            v32 = (char *)operator new(0x88uLL);
            *((_QWORD *)v32 + 1) = 0;
            *((_QWORD *)v32 + 2) = 0;
            *(_QWORD *)v32 = &off_24C46B910;
            *((_QWORD *)v32 + 3) = &off_24C467BB8;
            *((_QWORD *)v32 + 4) = v28;
            v32[40] = v15;
            *((_DWORD *)v32 + 11) = v31;
            v32[48] = 0;
            *((_DWORD *)v32 + 13) = 1065353216;
            *(_OWORD *)(v32 + 56) = 0u;
            *(_OWORD *)(v32 + 72) = 0u;
            *((_DWORD *)v32 + 22) = 1065353216;
            *((_OWORD *)v32 + 6) = 0u;
            *((_OWORD *)v32 + 7) = 0u;
            *((_DWORD *)v32 + 32) = 1065353216;
            v44 = (std::__shared_weak_count *)v32;
            v10 = v30;
            if ((sub_20B9EF850((uint64_t)(v32 + 24)) & 1) != 0 || (v28[4] & 1) != 0)
            {
              v33 = v29 > 2 ? 0 : v30[v29];
              v34 = (char *)operator new(0x88uLL);
              *((_QWORD *)v34 + 1) = 0;
              *((_QWORD *)v34 + 2) = 0;
              *(_QWORD *)v34 = &off_24C46B910;
              *((_QWORD *)v34 + 3) = &off_24C467BB8;
              *((_QWORD *)v34 + 4) = v28;
              v34[40] = v15;
              *((_DWORD *)v34 + 11) = v33;
              v34[48] = 0;
              *((_DWORD *)v34 + 13) = 1065353216;
              *(_OWORD *)(v34 + 56) = 0u;
              *(_OWORD *)(v34 + 72) = 0u;
              *((_DWORD *)v34 + 22) = 1065353216;
              *((_OWORD *)v34 + 6) = 0u;
              *((_OWORD *)v34 + 7) = 0u;
              *((_DWORD *)v34 + 32) = 1065353216;
              v35 = (std::__shared_weak_count *)*((_QWORD *)&v45 + 1);
              *(_QWORD *)&v45 = v34 + 24;
              *((_QWORD *)&v45 + 1) = v34;
              if (v35)
              {
                v36 = (unint64_t *)&v35->__shared_owners_;
                do
                  v37 = __ldaxr(v36);
                while (__stlxr(v37 - 1, v36));
                if (!v37)
                {
                  ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
                  std::__shared_weak_count::__release_weak(v35);
                }
              }
            }
            if (v44)
            {
              v38 = (unint64_t *)&v44->__shared_owners_;
              do
                v39 = __ldaxr(v38);
              while (__stlxr(v39 - 1, v38));
              if (!v39)
              {
                ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
                std::__shared_weak_count::__release_weak(v44);
              }
            }
          }
        }
        v22 = v45;
      }
LABEL_65:
      if (v22)
        goto LABEL_66;
LABEL_67:
      v6 = 0;
      v40 = 1;
LABEL_68:
      v41 = (std::__shared_weak_count *)*((_QWORD *)&v45 + 1);
      if (!*((_QWORD *)&v45 + 1))
        goto LABEL_72;
      v42 = (unint64_t *)(*((_QWORD *)&v45 + 1) + 8);
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
        if ((v40 & 1) != 0)
          return v6 & 1;
      }
      else
      {
LABEL_72:
        if ((v40 & 1) != 0)
          return v6 & 1;
      }
    }
  }
  return v6 & 1;
}

void sub_20B9EA4E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_20B811FE4((uint64_t)va);
  sub_20B811FE4((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9EA514(uint64_t a1, char **a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  __int16 *v7;
  BOOL v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  unsigned int v14;
  unsigned __int16 ***v15;
  unsigned __int16 *v16;
  unsigned __int16 *v17;
  unsigned __int16 *v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  _QWORD *v22;
  unsigned __int16 ***v23;
  unsigned __int16 *v24;
  unsigned __int16 *v25;
  unsigned __int16 *v26;
  unsigned int v27;
  int v28;
  char *v29;
  __int16 v30;
  char *v31;
  char *v32;
  char *v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 v46;
  int64x2_t v47;
  char *v48;
  char *v49;
  char *v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  __int128 v63;
  int64x2_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char v68;
  uint64_t v70;
  uint64_t v71;
  int64x2_t v72;
  char *v73;
  uint64_t v74;

  v4 = ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3) - 1;
  v70 = (uint64_t)(a2 + 2);
  v5 = 1;
  while ((v4 & 0x8000000000000000) == 0)
  {
    v6 = 0;
    while (word_20BA4B1C4[v6] != *(_WORD *)(*(_QWORD *)(a1 + 48) + 2 * v4))
    {
      if (++v6 == 5)
      {
        v7 = 0;
        goto LABEL_8;
      }
    }
    v7 = &word_20BA4B1C4[v6];
LABEL_8:
    if (v7)
      v8 = (char *)v7 - (char *)word_20BA4B1C4 == -2;
    else
      v8 = 1;
    v9 = !v8;
    if ((v5 & 1) != 0)
    {
      LOWORD(v71) = 0;
      v10 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 8 * v4);
      v11 = sub_20B905EE0(v10, &v71, v10[2] != v10[1]);
      if (v9)
        v12 = 2;
      else
        v12 = 1;
      if (v11)
        v13 = (unsigned __int16)v71 > v12;
      else
        v13 = 0;
      v5 = !v13;
      if (!v9)
      {
LABEL_25:
        v14 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 48) + 2 * v4);
        if (v14 - 12549 >= 0x25)
        {
          v29 = a2[1];
        }
        else
        {
          sub_20B9E3078(*(_DWORD *)(a1 + 40), v14, *(char **)(a1 + 72));
          v15 = *(unsigned __int16 ****)(a1 + 32);
          v16 = **v15;
          if (!v16)
            goto LABEL_74;
          v17 = sub_20B9F17AC((uint64_t)v15, v16, **(char **)(a1 + 72));
          if (!v17)
            goto LABEL_74;
          v18 = v17;
          v19 = *(_DWORD *)(a1 + 40) - 3;
          if (v19 > 2)
            v20 = 0;
          else
            v20 = dword_20BA5F7A8[v19];
          v48 = (char *)operator new(0x88uLL);
          v49 = v48;
          *((_QWORD *)v48 + 1) = 0;
          *((_QWORD *)v48 + 2) = 0;
          *(_QWORD *)v48 = &off_24C46B910;
          *((_QWORD *)v48 + 3) = &off_24C467BB8;
          v50 = v48 + 24;
          *((_QWORD *)v48 + 4) = v18;
          v48[40] = 0;
          *((_DWORD *)v48 + 11) = v20;
          v48[48] = 0;
          *((_DWORD *)v48 + 13) = 1065353216;
          *(_OWORD *)(v48 + 56) = 0u;
          *(_OWORD *)(v48 + 72) = 0u;
          *((_DWORD *)v48 + 22) = 1065353216;
          *((_OWORD *)v48 + 6) = 0u;
          *((_OWORD *)v48 + 7) = 0u;
          *((_DWORD *)v48 + 32) = 1065353216;
          v52 = a2[1];
          v51 = (unint64_t)a2[2];
          if ((unint64_t)v52 >= v51)
          {
            v53 = (v52 - *a2) >> 4;
            v54 = v53 + 1;
            if ((unint64_t)(v53 + 1) >> 60)
              sub_20B80CDD8();
            v55 = v51 - (_QWORD)*a2;
            if (v55 >> 3 > v54)
              v54 = v55 >> 3;
            if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF0)
              v56 = 0xFFFFFFFFFFFFFFFLL;
            else
              v56 = v54;
            v74 = v70;
            v57 = (char *)sub_20B829AD0(v70, v56);
            v59 = &v57[16 * v53];
            *(_QWORD *)v59 = v50;
            *((_QWORD *)v59 + 1) = v49;
            v61 = *a2;
            v60 = a2[1];
            if (v60 == *a2)
            {
              v64 = vdupq_n_s64((unint64_t)v60);
              v62 = &v57[16 * v53];
            }
            else
            {
              v62 = &v57[16 * v53];
              do
              {
                v63 = *((_OWORD *)v60 - 1);
                v60 -= 16;
                *((_OWORD *)v62 - 1) = v63;
                v62 -= 16;
                *(_QWORD *)v60 = 0;
                *((_QWORD *)v60 + 1) = 0;
              }
              while (v60 != v61);
              v64 = *(int64x2_t *)a2;
            }
            v29 = v59 + 16;
            *a2 = v62;
            a2[1] = v59 + 16;
            v72 = v64;
            v67 = a2[2];
            a2[2] = &v57[16 * v58];
            v73 = v67;
            v71 = v64.i64[0];
            sub_20B9061D0((uint64_t)&v71);
          }
          else
          {
            *(_QWORD *)v52 = v50;
            *((_QWORD *)v52 + 1) = v48;
            v29 = v52 + 16;
          }
          a2[1] = v29;
        }
        v66 = -1;
        goto LABEL_73;
      }
    }
    else
    {
      v5 = 0;
      if (!v9)
        goto LABEL_25;
    }
    if (v4 < 1
      || (v21 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 48) + 2 * v4 - 2), v21 - 12549 > 0x24)
      || (v22 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 8 * v4), v22[2] == v22[1]) && v22[5] == v22[4]
      || (sub_20B9E3078(*(_DWORD *)(a1 + 40), v21, *(char **)(a1 + 72)),
          v23 = *(unsigned __int16 ****)(a1 + 32),
          (v24 = **v23) == 0)
      || (v25 = sub_20B9F17AC((uint64_t)v23, v24, **(char **)(a1 + 72))) == 0)
    {
LABEL_74:
      v68 = 0;
      return v68 & 1;
    }
    v26 = v25;
    v27 = *(_DWORD *)(a1 + 40) - 3;
    if (v27 > 2)
      v28 = 0;
    else
      v28 = dword_20BA5F7A8[v27];
    v30 = *(_WORD *)(*(_QWORD *)(a1 + 48) + 2 * v4);
    v31 = (char *)operator new(0x90uLL);
    v32 = v31;
    *((_QWORD *)v31 + 1) = 0;
    *((_QWORD *)v31 + 2) = 0;
    *(_QWORD *)v31 = &off_24C46BAD0;
    *((_QWORD *)v31 + 3) = &off_24C468D18;
    v33 = v31 + 24;
    *((_QWORD *)v31 + 4) = v26;
    v31[40] = 0;
    *((_DWORD *)v31 + 11) = v28;
    v31[48] = 0;
    *((_DWORD *)v31 + 13) = 1065353216;
    *(_OWORD *)(v31 + 56) = 0u;
    *(_OWORD *)(v31 + 72) = 0u;
    *((_DWORD *)v31 + 22) = 1065353216;
    *((_OWORD *)v31 + 6) = 0u;
    *((_OWORD *)v31 + 7) = 0u;
    *((_DWORD *)v31 + 32) = 1065353216;
    *((_WORD *)v31 + 68) = v30;
    v35 = a2[1];
    v34 = (unint64_t)a2[2];
    if ((unint64_t)v35 >= v34)
    {
      v36 = (v35 - *a2) >> 4;
      v37 = v36 + 1;
      if ((unint64_t)(v36 + 1) >> 60)
        sub_20B80CDD8();
      v38 = v34 - (_QWORD)*a2;
      if (v38 >> 3 > v37)
        v37 = v38 >> 3;
      if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF0)
        v39 = 0xFFFFFFFFFFFFFFFLL;
      else
        v39 = v37;
      v74 = v70;
      v40 = (char *)sub_20B829AD0(v70, v39);
      v42 = &v40[16 * v36];
      *(_QWORD *)v42 = v33;
      *((_QWORD *)v42 + 1) = v32;
      v44 = *a2;
      v43 = a2[1];
      if (v43 == *a2)
      {
        v47 = vdupq_n_s64((unint64_t)v43);
        v45 = &v40[16 * v36];
      }
      else
      {
        v45 = &v40[16 * v36];
        do
        {
          v46 = *((_OWORD *)v43 - 1);
          v43 -= 16;
          *((_OWORD *)v45 - 1) = v46;
          v45 -= 16;
          *(_QWORD *)v43 = 0;
          *((_QWORD *)v43 + 1) = 0;
        }
        while (v43 != v44);
        v47 = *(int64x2_t *)a2;
      }
      v29 = v42 + 16;
      *a2 = v45;
      a2[1] = v42 + 16;
      v72 = v47;
      v65 = a2[2];
      a2[2] = &v40[16 * v41];
      v73 = v65;
      v71 = v47.i64[0];
      sub_20B9061D0((uint64_t)&v71);
    }
    else
    {
      *(_QWORD *)v35 = v33;
      *((_QWORD *)v35 + 1) = v31;
      v29 = v35 + 16;
    }
    a2[1] = v29;
    v66 = -2;
LABEL_73:
    v4 += v66;
    if ((unint64_t)(v29 - *a2) >= 0xD1)
      goto LABEL_74;
  }
  v68 = v5 ^ 1;
  return v68 & 1;
}

void sub_20B9EA9D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20B811FE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9EAA0C(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  __int16 v4;
  uint64_t v8;
  unsigned int v10;
  int v11;
  unsigned __int16 *v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  char v16;
  char *v17;
  int v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;

  v4 = a4;
  v8 = sub_20B906110(*(_QWORD **)(*(_QWORD *)(a1 + 8) + 8 * a2), a3, a4, (*(_DWORD *)(a1 + 40) > 5u) | ((0x27u >> *(_DWORD *)(a1 + 40)) & 1));
  if (!v8)
  {
    v10 = *(_DWORD *)(a1 + 40) - 3;
    if (v10 > 2)
      v11 = 0;
    else
      v11 = dword_20BA5F7A8[v10];
    v12 = sub_20B9F1858(*(unsigned __int16 ****)(a1 + 32), a3, v11);
    v13 = *(_DWORD *)(a1 + 40) - 3;
    if (v13 > 2)
      v14 = 0;
    else
      v14 = dword_20BA5F7A8[v13];
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * a2);
    if (*(_DWORD *)(v15 + 168) == 1)
      v16 = 10;
    else
      v16 = 9;
    v17 = (char *)operator new(0x90uLL);
    *((_QWORD *)v17 + 1) = 0;
    *((_QWORD *)v17 + 2) = 0;
    *(_QWORD *)v17 = &off_24C46B980;
    *((_QWORD *)v17 + 4) = v12;
    v17[40] = 0;
    *((_DWORD *)v17 + 11) = v14;
    v17[48] = 0;
    *((_DWORD *)v17 + 13) = 1065353216;
    *(_OWORD *)(v17 + 56) = 0u;
    *(_OWORD *)(v17 + 72) = 0u;
    *((_DWORD *)v17 + 22) = 1065353216;
    *((_OWORD *)v17 + 6) = 0u;
    *((_OWORD *)v17 + 7) = 0u;
    *((_DWORD *)v17 + 32) = 1065353216;
    *((_WORD *)v17 + 68) = v4;
    v17[138] = v16;
    *((_QWORD *)v17 + 3) = &unk_24C468200;
    v8 = (uint64_t)(v17 + 24);
    *(_QWORD *)&v23 = v17 + 24;
    *((_QWORD *)&v23 + 1) = v17;
    v18 = sub_20B9F026C((uint64_t)(v17 + 24));
    v19 = 32;
    if (v18)
      v19 = 8;
    sub_20B9054E0((char **)(v15 + v19), &v23);
    v20 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
    if (*((_QWORD *)&v23 + 1))
    {
      v21 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
  return v8;
}

void sub_20B9EABB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B811FE4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B9EABCC(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  unint64_t v13;
  char *v14;
  _WORD *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  unint64_t v29;
  uint64_t *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  __int128 v41;
  unint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  unint64_t i;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE *v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *p_p;
  uint64_t *v76;
  __int16 v77;
  unint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  unint64_t v81;
  int v83;
  void *__p;
  __int128 v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;

  v4 = (_QWORD *)a1;
  *(_QWORD *)(a1 + 792) = a3;
  v5 = *(_QWORD *)(a1 + 784);
  v77 = a3;
  v6 = v5 + a3;
  v81 = v5;
  if (v5 < v5 + a3)
  {
    v8 = (void **)(a1 + 48);
    v9 = a1 + 64;
    v10 = a1 + 24;
    v11 = *(_QWORD *)(a1 + 784);
    do
    {
      v12 = v11 + 48;
      v14 = (char *)v4[7];
      v13 = v4[8];
      if ((unint64_t)v14 >= v13)
      {
        v16 = (char *)*v8;
        v17 = v14 - (_BYTE *)*v8;
        if (v17 <= -3)
          sub_20B80CDD8();
        v18 = v17 >> 1;
        v19 = v13 - (_QWORD)v16;
        if (v19 <= (v17 >> 1) + 1)
          v20 = v18 + 1;
        else
          v20 = v19;
        if (v19 >= 0x7FFFFFFFFFFFFFFELL)
          v21 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v21 = v20;
        if (v21)
        {
          v22 = (char *)sub_20B80FD48(v9, v21);
          v16 = *(char **)(a1 + 48);
          v14 = *(char **)(a1 + 56);
        }
        else
        {
          v22 = 0;
        }
        v23 = &v22[2 * v18];
        *(_WORD *)v23 = v12;
        v15 = v23 + 2;
        while (v14 != v16)
        {
          v24 = *((_WORD *)v14 - 1);
          v14 -= 2;
          *((_WORD *)v23 - 1) = v24;
          v23 -= 2;
        }
        *(_QWORD *)(a1 + 48) = v23;
        *(_QWORD *)(a1 + 56) = v15;
        *(_QWORD *)(a1 + 64) = &v22[2 * v21];
        if (v16)
          operator delete(v16);
      }
      else
      {
        *(_WORD *)v14 = v12;
        v15 = v14 + 2;
      }
      *(_QWORD *)(a1 + 56) = v15;
      v25 = operator new();
      v26 = v25;
      v27 = *(_DWORD *)(a1 + 40) - 3;
      if (v27 > 2)
        v28 = 0;
      else
        v28 = dword_20BA5F7A8[v27];
      *(_QWORD *)v25 = &off_24C468728;
      *(_OWORD *)(v25 + 8) = 0u;
      *(_OWORD *)(v25 + 24) = 0u;
      *(_OWORD *)(v25 + 40) = 0u;
      *(_OWORD *)(v25 + 56) = 0u;
      *(_OWORD *)(v25 + 72) = 0u;
      *(_OWORD *)(v25 + 88) = 0u;
      *(_OWORD *)(v25 + 104) = 0u;
      *(_QWORD *)(v25 + 120) = 0;
      *(_QWORD *)(v25 + 128) = v11;
      *(_QWORD *)(v25 + 152) = 0;
      *(_QWORD *)(v25 + 144) = 0;
      *(_QWORD *)(v25 + 136) = v25 + 144;
      *(_DWORD *)(v25 + 160) = v28;
      *(_BYTE *)(v25 + 164) = 0;
      *(_DWORD *)(v25 + 168) = a4;
      v4 = (_QWORD *)a1;
      v30 = *(uint64_t **)(a1 + 16);
      v29 = *(_QWORD *)(a1 + 24);
      if ((unint64_t)v30 >= v29)
      {
        v32 = *(_QWORD **)(a1 + 8);
        v33 = v30 - v32;
        v34 = v33 + 1;
        if ((unint64_t)(v33 + 1) >> 61)
          sub_20B80CDD8();
        v35 = v29 - (_QWORD)v32;
        if (v35 >> 2 > v34)
          v34 = v35 >> 2;
        if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
          v36 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v36 = v34;
        v88 = v10;
        if (v36)
        {
          v36 = (unint64_t)sub_20B87FB70(v36);
          v32 = *(_QWORD **)(a1 + 8);
          v30 = *(uint64_t **)(a1 + 16);
        }
        else
        {
          v37 = 0;
        }
        v38 = (uint64_t *)(v36 + 8 * v33);
        v39 = v36 + 8 * v37;
        v87 = v39;
        *v38 = v26;
        *((_QWORD *)&v86 + 1) = v38 + 1;
        if (v30 == v32)
        {
          v31 = v38 + 1;
        }
        else
        {
          do
          {
            v40 = *--v30;
            *v30 = 0;
            *--v38 = v40;
          }
          while (v30 != v32);
          v31 = (_QWORD *)*((_QWORD *)&v86 + 1);
          v39 = v87;
        }
        v4 = (_QWORD *)a1;
        v41 = *(_OWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v38;
        *(_QWORD *)(a1 + 16) = v31;
        v86 = v41;
        v42 = *(_QWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 24) = v39;
        v87 = v42;
        __p = (void *)v41;
        sub_20B8821E8((uint64_t)&__p);
      }
      else
      {
        *v30 = v25;
        v31 = v30 + 1;
      }
      v4[2] = v31;
      ++v11;
    }
    while (v11 != v6);
  }
  v43 = *(_QWORD **)a2;
  v79 = *(_QWORD **)(a2 + 8);
  v44 = v4;
  if (*(_QWORD **)a2 != v79)
  {
    v80 = v6 - 1;
    v76 = v4 + 95;
    do
    {
      v45 = v43[1] - *v43;
      if (v45)
      {
        v46 = v45 >> 1;
        sub_20B80FC98(&__p, v45 >> 1);
        v47 = 0;
        v48 = 0;
        v49 = 0;
        v50 = 0;
        v51 = v46 - 1;
        v78 = v46;
        if (v46 <= 1)
          v52 = 1;
        else
          v52 = v46;
        if (((v77 - (_WORD)v51) & 0xFFFE) != 0)
          v53 = (unsigned __int16)(v77 - v51);
        else
          v53 = 1;
        v83 = v53;
        do
        {
          if (v50 == v51)
            v54 = sub_20B9EAA0C((uint64_t)v44, v80, *(unsigned __int16 *)(*v43 + 2 * v51), v83);
          else
            v54 = sub_20B9EAA0C((uint64_t)v44, v50 + v81, *(unsigned __int16 *)(*v43 + 2 * v50), 1);
          v55 = v54;
          if ((unint64_t)v48 >= v49)
          {
            v57 = v48 - v47;
            v58 = v57 + 1;
            if ((unint64_t)(v57 + 1) >> 61)
              sub_20B80CDD8();
            if ((uint64_t)(v49 - (_QWORD)v47) >> 2 > v58)
              v58 = (uint64_t)(v49 - (_QWORD)v47) >> 2;
            if (v49 - (unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8)
              v59 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v59 = v58;
            if (v59)
              v59 = (unint64_t)sub_20B87FB70(v59);
            else
              v60 = 0;
            v61 = (uint64_t *)(v59 + 8 * v57);
            *v61 = v55;
            v56 = v61 + 1;
            while (v48 != v47)
            {
              v62 = *--v48;
              *--v61 = v62;
            }
            v49 = v59 + 8 * v60;
            if (v47)
              operator delete(v47);
            v47 = v61;
            v44 = (_QWORD *)a1;
          }
          else
          {
            *v48 = v54;
            v56 = v48 + 1;
          }
          *((_WORD *)__p + v50++) = *(_WORD *)(*(_QWORD *)(v55 + 8) + 2);
          v48 = v56;
        }
        while (v50 != v52);
        sub_20B9EB160(v76, (uint64_t)&__p);
        if (v51)
        {
          for (i = 0; i != v51; ++i)
          {
            v64 = &v47[i];
            if (i >= v78 - 2)
              v65 = 0;
            else
              v65 = v64[2];
            v66 = *v64;
            v89 = v64[1];
            sub_20B9EDCE4(v66 + 32, &v89, &v89);
            v67 = *(unsigned __int16 *)(*(_QWORD *)(v89 + 8) + 2);
            if (v65)
              v67 = *(unsigned __int16 *)(*(_QWORD *)(v65 + 8) + 2)
                  + 542 * *(unsigned __int16 *)(*(_QWORD *)(v89 + 8) + 2);
            sub_20B9EDF34(v66 + 72, v67, v67);
          }
        }
        if (__p)
        {
          *(_QWORD *)&v86 = __p;
          operator delete(__p);
        }
        v44 = (_QWORD *)a1;
        if (v47)
          operator delete(v47);
      }
      v43 += 3;
    }
    while (v43 != v79);
  }
  if (!v44[98])
    sub_20B9E4DF4((uint64_t)v44, ((uint64_t)(v44[2] - v44[1]) >> 3) - 1);
  v68 = sub_20B9547EC();
  if (*v68 && (v68[9] & 0x20) != 0)
  {
    v69 = sub_20B9547EC();
    sub_20B9E5F40(&__p, (uint64_t)v44);
    if (v86 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    sub_20B954D48((uint64_t)v69, 0x2000u, (uint64_t)p_p, v70, v71, v72, v73, v74, (uint64_t)v76);
    if (SHIBYTE(v86) < 0)
      operator delete(__p);
  }
}

void sub_20B9EB114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B9EB160(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD v17[5];

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_20B80CDD8();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v17[4] = v4;
    v13 = (char *)sub_20B828D70(v4, v12);
    v14 = &v13[24 * v9];
    v17[0] = v13;
    v17[1] = v14;
    v17[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v17[2] = v14 + 24;
    sub_20B97FA84(a1, v17);
    v8 = (_QWORD *)a1[1];
    sub_20B83CBC8((uint64_t)v17);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return v8 - 3;
}

void sub_20B9EB28C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B83CBC8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B9EB2A0(_QWORD *a1, int a2)
{
  int64_t v4;
  uint64_t v5;

  v4 = a1[98];
  if (v4)
  {
LABEL_4:
    if (a2 != 2 || v4 == -1)
      goto LABEL_11;
    goto LABEL_6;
  }
  v4 = a1[100];
  if (v4 >= 1)
  {
    a1[98] = v4;
    a1[99] = 0;
    goto LABEL_4;
  }
  if (a2 != 2)
    goto LABEL_11;
  v4 = 0;
LABEL_6:
  v5 = a1[1];
  if (v4 < (unint64_t)((a1[2] - v5) >> 3) && *(_DWORD *)(*(_QWORD *)(v5 + 8 * v4) + 168) == 2)
  {
    sub_20B9E1A10((uint64_t)a1, v4, 0);
    return;
  }
LABEL_11:
  sub_20B9E1A10((uint64_t)a1, (uint64_t)(a1[2] - a1[1]) >> 3, 0);
  a1[98] = (uint64_t)(a1[2] - a1[1]) >> 3;
}

uint64_t sub_20B9EB358(uint64_t a1, int a2)
{
  unint64_t v2;
  int v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  unsigned __int16 *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  uint8x8_t v20;
  _QWORD **v21;
  _QWORD *i;
  unint64_t v23;
  float v24;
  float v25;
  _BOOL8 v26;
  unint64_t v27;
  unint64_t v28;
  size_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v34;
  unsigned int v35;
  int v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  void **v41;

  v3 = a2;
  sub_20B9EB2A0((_QWORD *)a1, a2);
  v5 = 824;
  if (v3 != 2)
    v5 = 832;
  v6 = *(_QWORD **)(a1 + v5);
  v7 = v6[6];
  v8 = v6[7];
  v9 = v3 == 1 && v7 == v8;
  v10 = !v9;
  if (v9)
    return v10;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  if (v7 == v8)
    goto LABEL_58;
  v34 = v5;
  v35 = v10;
  v36 = v3;
  v11 = 0;
  v12 = (uint64_t *)(a1 + 720);
  v37 = (_QWORD *)(a1 + 736);
  do
  {
    v13 = *(unsigned __int16 **)v7;
    v14 = 0;
    v15 = *(_QWORD *)(v7 + 8) - *(_QWORD *)v7;
    if (v15)
    {
      v16 = v15 >> 1;
      do
      {
        v17 = *v13++;
        v14 = v17 + 542 * v14;
        --v16;
      }
      while (v16);
    }
    v18 = *(_QWORD *)(v7 + 24);
    v19 = *(_QWORD *)(a1 + 728);
    if (v19)
    {
      v20 = (uint8x8_t)vcnt_s8((int8x8_t)v19);
      v20.i16[0] = vaddlv_u8(v20);
      if (v20.u32[0] > 1uLL)
      {
        v2 = v14;
        if (v19 <= v14)
          v2 = v14 % v19;
      }
      else
      {
        v2 = (v19 - 1) & v14;
      }
      v21 = *(_QWORD ***)(*v12 + 8 * v2);
      if (v21)
      {
        for (i = *v21; i; i = (_QWORD *)*i)
        {
          v23 = i[1];
          if (v23 == v14)
          {
            if (i[2] == v14)
              goto LABEL_53;
          }
          else
          {
            if (v20.u32[0] > 1uLL)
            {
              if (v23 >= v19)
                v23 %= v19;
            }
            else
            {
              v23 &= v19 - 1;
            }
            if (v23 != v2)
              break;
          }
        }
      }
    }
    i = operator new(0x20uLL);
    *i = 0;
    i[1] = v14;
    i[2] = v14;
    i[3] = 0;
    v24 = (float)(unint64_t)(*(_QWORD *)(a1 + 744) + 1);
    v25 = *(float *)(a1 + 752);
    if (!v19 || (float)(v25 * (float)v19) < v24)
    {
      v26 = (v19 & (v19 - 1)) != 0;
      if (v19 < 3)
        v26 = 1;
      v27 = v26 | (2 * v19);
      v28 = vcvtps_u32_f32(v24 / v25);
      if (v27 <= v28)
        v29 = v28;
      else
        v29 = v27;
      sub_20B9EECB8(a1 + 720, v29);
      v19 = *(_QWORD *)(a1 + 728);
      if ((v19 & (v19 - 1)) != 0)
      {
        if (v19 <= v14)
          v2 = v14 % v19;
        else
          v2 = v14;
      }
      else
      {
        v2 = (v19 - 1) & v14;
      }
    }
    v30 = *v12;
    v31 = *(_QWORD **)(*v12 + 8 * v2);
    if (v31)
    {
      *i = *v31;
LABEL_51:
      *v31 = i;
      goto LABEL_52;
    }
    *i = *v37;
    *v37 = i;
    *(_QWORD *)(v30 + 8 * v2) = v37;
    if (*i)
    {
      v32 = *(_QWORD *)(*i + 8);
      if ((v19 & (v19 - 1)) != 0)
      {
        if (v32 >= v19)
          v32 %= v19;
      }
      else
      {
        v32 &= v19 - 1;
      }
      v31 = (_QWORD *)(*v12 + 8 * v32);
      goto LABEL_51;
    }
LABEL_52:
    ++*(_QWORD *)(a1 + 744);
    v11 = v39;
LABEL_53:
    i[3] = v18;
    if ((unint64_t)v11 >= v40)
    {
      v11 = (_QWORD *)sub_20B97FBCC(&v38, v7);
    }
    else
    {
      *v11 = 0;
      v11[1] = 0;
      v11[2] = 0;
      sub_20B87ACC8(v11, *(const void **)v7, *(_QWORD *)(v7 + 8), (uint64_t)(*(_QWORD *)(v7 + 8) - *(_QWORD *)v7) >> 1);
      v11 += 3;
    }
    v39 = v11;
    v7 += 32;
  }
  while (v7 != v8);
  v6 = *(_QWORD **)(a1 + v34);
  v10 = v35;
  v3 = v36;
LABEL_58:
  sub_20B9EABCC(a1, (uint64_t)&v38, v6[9], v3);
  v41 = (void **)&v38;
  sub_20B83B400(&v41);
  return v10;
}

void sub_20B9EB66C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void **a16)
{
  a16 = (void **)&a13;
  sub_20B83B400(&a16);
  _Unwind_Resume(a1);
}

BOOL sub_20B9EB6A8(_QWORD *a1, int a2)
{
  int v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  char v6;
  _QWORD *v7;
  UniChar *v8;
  uint64_t v9;
  NSObject *v10;
  unsigned int v11;
  int v12;
  const __CFArray *Mutable;
  uint64_t *v14;
  uint64_t *v15;
  __CFArray *v16;
  __CFString *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char **v23;
  unint64_t v24;
  char v25;
  char **v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  UniChar v31;
  unint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t *v36;
  const __CFAllocator *alloc;
  void *__p;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  UniChar chars[4];
  UniChar *v46;
  uint64_t v47;

  v2 = a2;
  v3 = (uint64_t)a1;
  v47 = *MEMORY[0x24BDAC8D0];
  sub_20B9EB2A0(a1, a2);
  v4 = *(_QWORD **)(v3 + 864);
  v5 = v4[2] - v4[1];
  if (v5 < 9)
    return v5 > 8;
  v42 = 0;
  v43 = 0;
  v44 = 0;
  v41 = 0;
  v6 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v4 + 80))(v4, v4[17] + 48);
  __p = 0;
  v39 = 0;
  v40 = 0;
  v7 = operator new(0x30uLL);
  *v7 = &off_24C46A558;
  v7[1] = v3;
  v7[2] = &v42;
  v7[3] = &__p;
  v7[4] = &v41;
  *((_BYTE *)v7 + 40) = v6;
  v46 = (UniChar *)v7;
  sub_20B9EBA78(v3, 0xAuLL, (uint64_t)chars);
  v8 = v46;
  if (v46 == chars)
  {
    v9 = 4;
    v8 = chars;
    goto LABEL_6;
  }
  if (v46)
  {
    v9 = 5;
LABEL_6:
    (*(void (**)(void))(*(_QWORD *)v8 + 8 * v9))();
  }
  v10 = sub_20B9A7C5C(0xFu);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    v11 = *(_DWORD *)(v3 + 40) - 3;
    if (v11 > 2)
      v12 = 0;
    else
      v12 = dword_20BA5F7A8[v11];
    alloc = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
    v33 = v5;
    v34 = v3;
    v35 = v2;
    v15 = v42;
    v14 = v43;
    v36 = v43;
    while (v15 != v14)
    {
      v16 = Mutable;
      v17 = CFStringCreateMutable(alloc, 0);
      v19 = *v15;
      v18 = v15[1];
      if (v18 != *v15)
      {
        v20 = 0;
        while (1)
        {
          v21 = *(unsigned __int16 *)(v19 + 2 * v20);
          if (v12 == 2)
            break;
          if (v12 != 1)
          {
            v25 = 0;
            v26 = &off_24C4A0588;
            goto LABEL_20;
          }
          v22 = 0;
          v23 = (char **)(&off_24C4A65A8 + 2 * v21);
          v24 = 2 * (_QWORD)v23[1];
          v25 = 1;
LABEL_21:
          v27 = v24 >> v25;
          if (v24 >> v25)
          {
            v28 = 0;
            v29 = *v23;
            do
            {
              chars[0] = 0;
              v30 = v28 << v25;
              if ((v22 & 1) != 0)
                v31 = v29[v30];
              else
                v31 = *(_WORD *)&v29[v30];
              chars[0] = v31;
              CFStringAppendCharacters(v17, chars, 1);
              ++v28;
            }
            while (v27 != v28);
            v19 = *v15;
            v18 = v15[1];
          }
          if (++v20 >= (unint64_t)((v18 - v19) >> 1))
            goto LABEL_29;
        }
        v25 = 0;
        v26 = &off_24C4A2768;
LABEL_20:
        v23 = &v26[2 * v21];
        v24 = (unint64_t)v23[1];
        v22 = 1;
        goto LABEL_21;
      }
LABEL_29:
      Mutable = v16;
      CFArrayAppendValue(v16, v17);
      if (v17)
        CFRelease(v17);
      v15 += 3;
      v14 = v36;
    }
    sub_20B9F4A64((unint64_t)"[CPSearch]", Mutable, &__p);
    v2 = v35;
    v3 = v34;
    v5 = v33;
    if (Mutable)
      CFRelease(Mutable);
  }
  sub_20B9EABCC(v3, (uint64_t)&v42, v41, v2);
  if (__p)
  {
    v39 = __p;
    operator delete(__p);
  }
  *(_QWORD *)chars = &v42;
  sub_20B83B400((void ***)chars);
  return v5 > 8;
}

void sub_20B9EB9B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_20B854468(exception_object);
}

void sub_20B9EBA78(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (*(_BYTE *)(a1 + 840))
  {
    sub_20B956C94(*(_QWORD *)(a1 + 864), a2, a3, 1);
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 824);
    if (v3)
      sub_20B884C5C(v3, a2, a3);
  }
}

void sub_20B9EBA9C(CFArrayRef theArray@<X2>, uint64_t a2@<X0>, const __CFString *a3@<X1>, unint64_t a4@<X3>, char **a5@<X8>)
{
  CFIndex Count;
  CFIndex Length;
  BOOL v12;
  CFIndex v13;
  CFIndex v14;
  unint64_t v15;
  const __CFNumber *ValueAtIndex;
  CFRange v17;
  const __CFString *v18;
  int v19;
  __int16 *v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  char *v24;
  const __CFAllocator *alloc;
  __int16 v26;
  void *__p[2];
  unsigned __int8 v28;
  const __CFString *v29;
  CFIndex valuePtr;

  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  if (a3)
  {
    if (theArray)
    {
      if (CFArrayGetCount(theArray))
      {
        Count = CFArrayGetCount(theArray);
        Length = CFStringGetLength(a3);
        v12 = Count < 1;
        v13 = Count - 1;
        if (!v12)
        {
          v14 = Length;
          v15 = 0;
          alloc = (const __CFAllocator *)*MEMORY[0x24BDBD240];
          while (1)
          {
            if (v15 >= a4 || v14 < 0)
              return;
            ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(theArray, v13);
            valuePtr = 0;
            CFNumberGetValue(ValueAtIndex, kCFNumberShortType, &valuePtr);
            v17.length = valuePtr;
            v14 -= valuePtr;
            if (v14 >= 0)
              break;
LABEL_26:
            ++v15;
            if (--v13 == -1)
              return;
          }
          v17.location = v14;
          v18 = CFStringCreateWithSubstring(alloc, a3, v17);
          v29 = v18;
          sub_20B8D09C0(v18, __p);
          v19 = 0;
          v26 = 0;
          if ((v28 & 0x80u) == 0)
            v20 = (__int16 *)__p;
          else
            v20 = (__int16 *)__p[0];
          if ((v28 & 0x80u) == 0)
            v21 = v28;
          else
            v21 = (uint64_t)__p[1];
          v22 = *(_DWORD *)(a2 + 40) - 3;
          if (v22 <= 2)
            v19 = dword_20BA5F7A8[v22];
          v23 = sub_20B9F19A8(*(unsigned __int16 ****)(a2 + 32), v20, v21, v19);
          v26 = v23;
          v24 = *a5;
          if (v23 == 0xFFFF)
            a5[1] = v24;
          else
            sub_20B8B473C((uint64_t)a5, v24, (char *)&v26);
          if ((char)v28 < 0)
          {
            operator delete(__p[0]);
            if (!v18)
              goto LABEL_25;
          }
          else if (!v18)
          {
LABEL_25:
            if (v23 == 0xFFFF)
              return;
            goto LABEL_26;
          }
          CFRelease(v18);
          goto LABEL_25;
        }
      }
    }
  }
}

void sub_20B9EBC48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  uint64_t v18;
  void *v20;

  v20 = *(void **)v18;
  if (*(_QWORD *)v18)
  {
    *(_QWORD *)(v18 + 8) = v20;
    operator delete(v20);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B9EBCAC(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v10;

  sub_20B9E1A10((uint64_t)a1, 0, 1);
  v6 = *(uint64_t **)(a2 + 32);
  v5 = a2 + 32;
  v4 = v6;
  a1[98] = 0;
  v7 = *(uint64_t **)(v5 + 8);
  v8 = v6 + 3;
  if (v6 != v7 && v8 != v7)
  {
    v10 = *v4;
    do
    {
      if (v4[1] - v10 < (unint64_t)(v8[1] - *v8))
      {
        v10 = *v8;
        v4 = v8;
      }
      v8 += 3;
    }
    while (v8 != v7);
  }
  sub_20B9EABCC((uint64_t)a1, v5, (v4[1] - *v4) >> 1, 2);
  a1[100] = a1[99];
}

void sub_20B9EBD44(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v3;

  if (*(_BYTE *)(a1 + 840))
  {
    sub_20B956FB8(*(_QWORD **)(a1 + 864), a2);
  }
  else
  {
    v3 = 832;
    if (a3 == 2)
      v3 = 824;
    sub_20B882FA0(*(_QWORD **)(a1 + v3), a2);
  }
}

void sub_20B9EBD6C(uint64_t a1, const __CFString *a2, const __CFArray *a3, int a4)
{
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  void *__p[3];

  if (*(_BYTE *)(a1 + 840))
  {
    v6 = (unint64_t *)(*(_QWORD *)(a1 + 864) + 208);
LABEL_7:
    v9 = *v6;
    goto LABEL_8;
  }
  v7 = 832;
  if (a4 == 2)
    v7 = 824;
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + v7) + 8);
  if (v8)
  {
    v6 = (unint64_t *)(v8 + 32);
    goto LABEL_7;
  }
  v9 = 0;
LABEL_8:
  sub_20B9EBA9C(a3, a1, a2, v9, (char **)__p);
  sub_20B9EBD44(a1, __p, a4);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_20B9EBE00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B9EBE1C(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, _QWORD *a5, char **a6, uint64_t *a7, _BYTE *a8)
{
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  __int16 v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  __int16 v41;
  unint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  unsigned int v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  char *__p;
  uint64_t v76;
  char *v77;
  _QWORD v78[2];
  char *v79;
  char *v80;
  uint64_t *v81;

  if (a1 >= a3 || !a4 || *a8)
    return;
  v13 = *a6;
  v14 = a6[1];
  v15 = v14 - *a6;
  v16 = v15 >> 3;
  v17 = a5[1] - *a5;
  if (v15 >> 3 >= (unint64_t)(v17 >> 1))
  {
    if ((unint64_t)v15 >= 9
      && !sub_20B9EE3BC((_QWORD *)(*(_QWORD *)&v13[8 * v16 - 16] + 72), *(unsigned __int16 *)(*(_QWORD *)(a4 + 8) + 2)+ 542 * *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)&v13[8 * v16 - 8] + 8) + 2)))
    {
      return;
    }
  }
  else
  {
    if (*(unsigned __int16 *)(*(_QWORD *)(a4 + 8) + 2) != *(unsigned __int16 *)(*a5 + 2 * v16))
      return;
    if (a3 - 1 == a1 && v16 + 1 == v17 >> 1)
    {
      *a8 = 1;
      sub_20B83B440(a7);
      return;
    }
  }
  v18 = (unint64_t)a6[2];
  if ((unint64_t)v14 >= v18)
  {
    v20 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 61)
LABEL_85:
      sub_20B80CDD8();
    v21 = v18 - (_QWORD)v13;
    if (v21 >> 2 > v20)
      v20 = v21 >> 2;
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
      v22 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v22 = v20;
    if (v22)
      v22 = (unint64_t)sub_20B87FB70(v22);
    else
      v23 = 0;
    v24 = (char *)(v22 + 8 * v16);
    v25 = v22 + 8 * v23;
    *(_QWORD *)v24 = a4;
    v19 = v24 + 8;
    v27 = *a6;
    v26 = a6[1];
    if (v26 != *a6)
    {
      do
      {
        v28 = *((_QWORD *)v26 - 1);
        v26 -= 8;
        *((_QWORD *)v24 - 1) = v28;
        v24 -= 8;
      }
      while (v26 != v27);
      v26 = *a6;
    }
    *a6 = v24;
    a6[1] = v19;
    a6[2] = (char *)v25;
    if (v26)
      operator delete(v26);
  }
  else
  {
    *(_QWORD *)v14 = a4;
    v19 = v14 + 8;
  }
  a6[1] = v19;
  if (a3 - 1 != a1)
  {
    v45 = *(_QWORD **)(a4 + 48);
    if (!v45)
      return;
    v46 = a1 - a2 + 1;
    while (1)
    {
      v47 = v45[2];
      v48 = *a6;
      v49 = a6[1];
      v50 = (v49 - *a6) >> 3;
      if (v46 > v50)
        break;
      if (v46 < v50)
      {
        v63 = &v48[8 * v46];
LABEL_68:
        a6[1] = v63;
      }
LABEL_69:
      v64 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 40))(v47);
      sub_20B9EBE1C(a1 + v64, a2, a3, v47, a5, a6, a7, a8);
      v45 = (_QWORD *)*v45;
      if (!v45)
        return;
    }
    v51 = v46 - v50;
    v52 = a6[2];
    if (v46 - v50 > (v52 - v49) >> 3)
    {
      if (v46 >> 61)
        goto LABEL_85;
      v53 = v52 - v48;
      v54 = v53 >> 2;
      if (v53 >> 2 <= v46)
        v54 = a1 - a2 + 1;
      if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8)
        v55 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v55 = v54;
      v56 = (char *)sub_20B87FB70(v55);
      v71 = v57;
      v58 = &v56[8 * v50];
      bzero(v58, 8 * v51);
      v60 = *a6;
      v59 = a6[1];
      v61 = v58;
      if (v59 != *a6)
      {
        do
        {
          v62 = *((_QWORD *)v59 - 1);
          v59 -= 8;
          *((_QWORD *)v61 - 1) = v62;
          v61 -= 8;
        }
        while (v59 != v60);
        v59 = *a6;
      }
      *a6 = v61;
      a6[1] = &v58[8 * v51];
      a6[2] = &v56[8 * v71];
      if (v59)
        operator delete(v59);
      goto LABEL_69;
    }
    bzero(a6[1], 8 * v51);
    v63 = &v49[8 * v51];
    goto LABEL_68;
  }
  __p = 0;
  v76 = 0;
  v77 = 0;
  v29 = (uint64_t)(a5[1] - *a5) >> 1;
  v30 = *a6;
  if (v29 < (v19 - *a6) >> 3)
  {
    v31 = 0;
    do
    {
      v32 = *(_WORD *)(*(_QWORD *)(*(_QWORD *)&v30[8 * v29] + 8) + 2);
      if (v31 >= v77)
      {
        v34 = __p;
        v35 = v31 - __p;
        if (v31 - __p <= -3)
          sub_20B80CDD8();
        v36 = v35 >> 1;
        if (v77 - __p <= (unint64_t)((v35 >> 1) + 1))
          v37 = v36 + 1;
        else
          v37 = v77 - __p;
        if ((unint64_t)(v77 - __p) >= 0x7FFFFFFFFFFFFFFELL)
          v38 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v38 = v37;
        if (v38)
        {
          v39 = (char *)sub_20B80FD48((uint64_t)&v77, v38);
          v34 = __p;
          v31 = (char *)v76;
        }
        else
        {
          v39 = 0;
        }
        v40 = &v39[2 * v36];
        *(_WORD *)v40 = v32;
        v33 = v40 + 2;
        while (v31 != v34)
        {
          v41 = *((_WORD *)v31 - 1);
          v31 -= 2;
          *((_WORD *)v40 - 1) = v41;
          v40 -= 2;
        }
        __p = v40;
        v77 = &v39[2 * v38];
        if (v34)
          operator delete(v34);
      }
      else
      {
        *(_WORD *)v31 = v32;
        v33 = v31 + 2;
      }
      v76 = (uint64_t)v33;
      ++v29;
      v30 = *a6;
      v31 = v33;
    }
    while (v29 < (a6[1] - *a6) >> 3);
  }
  v42 = a7[2];
  v43 = (_QWORD *)a7[1];
  if ((unint64_t)v43 >= v42)
  {
    v65 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v43 - *a7) >> 3);
    if (v65 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_20B80CDD8();
    v66 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v42 - *a7) >> 3);
    v67 = 2 * v66;
    if (2 * v66 <= v65 + 1)
      v67 = v65 + 1;
    if (v66 >= 0x555555555555555)
      v68 = 0xAAAAAAAAAAAAAAALL;
    else
      v68 = v67;
    v81 = a7 + 2;
    if (v68)
      v69 = (char *)sub_20B828D70((uint64_t)(a7 + 2), v68);
    else
      v69 = 0;
    v70 = &v69[24 * v65];
    v78[0] = v69;
    v78[1] = v70;
    v79 = v70;
    v80 = &v69[24 * v68];
    *(_QWORD *)v70 = 0;
    *((_QWORD *)v70 + 1) = 0;
    *((_QWORD *)v70 + 2) = 0;
    sub_20B87ACC8(v70, __p, v76, (v76 - (uint64_t)__p) >> 1);
    v79 += 24;
    sub_20B97FA84(a7, v78);
    v44 = (_QWORD *)a7[1];
    sub_20B83CBC8((uint64_t)v78);
  }
  else
  {
    *v43 = 0;
    v43[1] = 0;
    v43[2] = 0;
    sub_20B87ACC8(v43, __p, v76, (v76 - (uint64_t)__p) >> 1);
    v44 = v43 + 3;
    a7[1] = (uint64_t)(v43 + 3);
  }
  a7[1] = (uint64_t)v44;
  if (__p)
    operator delete(__p);
}

void sub_20B9EC334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18)
{
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)(v19 + 8) = v18;
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

CFStringRef sub_20B9EC374(uint64_t a1)
{
  const UniChar *v1;
  const UniChar *v2;
  uint64_t v3;
  CFIndex v4;
  unint64_t v5;
  CFIndex v7;

  if (*(_DWORD *)(a1 + 40) != 1)
    return &stru_24C4B3660;
  v1 = *(const UniChar **)(a1 + 48);
  v2 = *(const UniChar **)(a1 + 56);
  v3 = (char *)v2 - (char *)v1;
  if (v2 == v1)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    v5 = v3 >> 1;
    if (v5 <= 1)
      v5 = 1;
    while (v1[v4] - 10123 >= 8)
    {
      if (v5 == ++v4)
      {
        v4 = v5;
        break;
      }
    }
  }
  if (v1)
    v7 = v4;
  else
    v7 = 0;
  return CFStringCreateWithCharacters(0, v1, v7);
}

__CFArray *sub_20B9EC3E4(uint64_t a1, const __CFArray *a2, CFStringRef theString, const __CFArray *a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t Length;
  CFIndex Count;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __CFArray *Mutable;
  unint64_t v21;
  unint64_t v22;
  CFIndex v23;
  BOOL v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  unint64_t v29;
  BOOL v30;
  const __CFNumber *ValueAtIndex;
  const __CFAllocator *v32;
  CFStringRef v33;
  __CFArray *v34;
  BOOL v35;
  const __CFString *v36;
  uint64_t v37;
  uint64_t v38;
  CFIndex v39;
  CFIndex v40;
  unint64_t v41;
  unint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  char v56;
  uint64_t *v57;
  uint64_t *v58;
  __int128 *v59;
  _QWORD *v60;
  char *v61;
  const __CFString *str;
  const __CFArray *otherArray;
  unint64_t v65;
  unsigned int v66;
  char v67;
  const __CFArray *theArray;
  CFArrayRef theArraya;
  unint64_t v70;
  __int128 v71;
  uint64_t v72;
  __CFArray *v73;
  CFStringRef v74;
  __int128 v75;
  uint64_t v76;
  void *__p[3];
  char *valuePtr;
  char *v79;
  void **v80[2];
  CFRange v81;
  CFRange v82;
  CFRange v83;

  v10 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  Length = CFStringGetLength(theString);
  otherArray = a2;
  Count = CFArrayGetCount(a2);
  theArray = a4;
  v13 = CFArrayGetCount(a4);
  v15 = *a5;
  v14 = a5[1];
  v70 = Count;
  if (v14 == *a5 || Count == 0 || Length == 0 || v9 == v10 || v13 == 0)
  {
    if (v14 == v15)
    {
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
      v21 = 0;
      goto LABEL_74;
    }
    return 0;
  }
  str = theString;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = (v9 - v10) >> 3;
  v65 = v13;
  do
  {
    v28 = *(_DWORD *)(v15 + 4 * v23);
    if (v28 != 2)
    {
      if (v24)
      {
        v21 = sub_20B9ECADC(otherArray, v21, v70);
        do
        {
          v29 = v26 + 1;
          v30 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v26) + 168) != 2 || v26 >= v27;
          ++v26;
        }
        while (!v30);
        v26 = v29 - 1;
      }
      ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(theArray, v23);
      valuePtr = 0;
      CFNumberGetValue(ValueAtIndex, kCFNumberShortType, &valuePtr);
      v26 += (unint64_t)valuePtr;
      v21 += (unint64_t)valuePtr;
      v22 += (unint64_t)valuePtr;
      ++v25;
      v15 = *a5;
      v14 = a5[1];
      v13 = v65;
    }
    if (++v23 >= (unint64_t)((v14 - v15) >> 2))
      break;
    if (v21 >= v70)
      break;
    if (Length <= v22)
      break;
    if (v26 >= v27)
      break;
    v24 = v28 == 2;
  }
  while (v13 > v25);
  if (v23 != (v14 - v15) >> 2)
    return 0;
  v32 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  if (v28 == 2)
  {
    v81.length = Length - v22;
    v81.location = v22;
    v33 = CFStringCreateWithSubstring(v32, str, v81);
    v74 = v33;
    v34 = CFArrayCreateMutable(v32, 0, MEMORY[0x24BDBD690]);
    v73 = v34;
    v82.length = v65 - v25;
    v82.location = v25;
    CFArrayAppendArray(v34, theArray, v82);
    if (v33)
      v35 = v34 == 0;
    else
      v35 = 1;
    if (v35)
    {
      v71 = 0uLL;
      v72 = 0;
    }
    else
    {
      v36 = v33;
      v38 = *(_QWORD *)(a1 + 8);
      v37 = *(_QWORD *)(a1 + 16);
      v39 = CFArrayGetCount(v34);
      v40 = v39;
      v41 = (v37 - v38) >> 3;
      if (v39 + v26 < v41 && v41 > v26)
      {
        v42 = 0;
        while (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v26 + 8 * v42) + 168) == 2)
        {
          ++v42;
          if (!(v26 - v41 + v42))
          {
            v42 = v41 - v26;
            goto LABEL_48;
          }
        }
        v41 = v26 + v42;
LABEL_48:
        if (v42 && CFArrayGetCount(v34) < v42)
        {
          sub_20B9EBA9C(v34, a1, v36, 0xFFFFFFFFFFFFFFFFLL, &valuePtr);
          if (valuePtr != v79)
          {
            v43 = (*(_DWORD *)(a1 + 40) < 6u) & (0x18u >> *(_DWORD *)(a1 + 40));
            v44 = *(_QWORD *)(a1 + 8);
            if (v40 == 1)
            {
              theArraya = Mutable;
              v45 = *(_QWORD *)(v44 + 8 * (v41 - 1));
              v46 = *(_QWORD **)(v45 + 8);
              v47 = *(_QWORD **)(v45 + 16);
              if (v46 != v47)
              {
                v66 = (*(_DWORD *)(a1 + 40) < 6u) & (0x18u >> *(_DWORD *)(a1 + 40));
                while (*(unsigned __int16 *)(*(_QWORD *)(*v46 + 8) + 2) != *(unsigned __int16 *)valuePtr
                     || v42 != (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v46 + 40))(*v46))
                {
                  v46 += 2;
                  if (v46 == v47)
                  {
                    v46 = v47;
                    break;
                  }
                }
                Mutable = theArraya;
                v43 = v66;
                if (v46 != *(_QWORD **)(v45 + 16))
                  goto LABEL_68;
                v44 = *(_QWORD *)(a1 + 8);
              }
              if (v43)
              {
                v48 = *(_QWORD *)(v44 + 8 * (v41 - 1));
                v49 = *(_QWORD **)(v48 + 32);
                v50 = *(_QWORD **)(v48 + 40);
                Mutable = theArraya;
                if (v49 != v50)
                {
                  v67 = v43;
                  while (*(unsigned __int16 *)(*(_QWORD *)(*v49 + 8) + 2) != *(unsigned __int16 *)valuePtr
                       || v42 != (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v49 + 40))(*v49))
                  {
                    v49 += 2;
                    if (v49 == v50)
                    {
                      v49 = v50;
                      break;
                    }
                  }
                  if (v49 != *(_QWORD **)(v48 + 40))
                    goto LABEL_68;
                  v44 = *(_QWORD *)(a1 + 8);
                  LOBYTE(v43) = v67;
                }
              }
              else
              {
                Mutable = theArraya;
              }
            }
            v52 = *(_QWORD **)(v44 + 8 * v26);
            v53 = (uint64_t *)v52[1];
            v54 = (uint64_t *)v52[2];
            if (v53 != v54)
            {
              while (*(unsigned __int16 *)(*(_QWORD *)(*v53 + 8) + 2) != *(unsigned __int16 *)valuePtr)
              {
                v53 += 2;
                if (v53 == v54)
                  goto LABEL_84;
              }
            }
            if (v53 == v54)
LABEL_84:
              v55 = 0;
            else
              v55 = *v53;
            v56 = v43 ^ 1;
            if (v55)
              v56 = 1;
            if ((v56 & 1) == 0)
            {
              v58 = (uint64_t *)v52[4];
              v57 = (uint64_t *)v52[5];
              if (v58 != v57)
              {
                while (*(unsigned __int16 *)(*(_QWORD *)(*v58 + 8) + 2) != *(unsigned __int16 *)valuePtr)
                {
                  v58 += 2;
                  if (v58 == v57)
                    goto LABEL_94;
                }
              }
              if (v58 == v57)
LABEL_94:
                v55 = 0;
              else
                v55 = *v58;
            }
            memset(__p, 0, sizeof(__p));
            v75 = 0uLL;
            v76 = 0;
            LOBYTE(v80[0]) = 0;
            sub_20B9EBE1C(v26, v26, v41, v55, &valuePtr, (char **)__p, (uint64_t *)&v75, v80);
            v33 = v36;
            if (LOBYTE(v80[0]))
            {
              v59 = &v71;
            }
            else
            {
              v71 = v75;
              v72 = v76;
              v59 = &v75;
            }
            *(_QWORD *)v59 = 0;
            *((_QWORD *)v59 + 1) = 0;
            *((_QWORD *)v59 + 2) = 0;
            v80[0] = (void **)&v75;
            sub_20B83B400(v80);
            if (__p[0])
              operator delete(__p[0]);
            goto LABEL_100;
          }
LABEL_68:
          v71 = 0uLL;
          v72 = 0;
          v33 = v36;
LABEL_100:
          if (valuePtr)
          {
            v79 = valuePtr;
            operator delete(valuePtr);
          }
          if ((_QWORD)v71 != *((_QWORD *)&v71 + 1))
          {
            v60 = (_QWORD *)operator new();
            sub_20B95FC1C(v60, (uint64_t *)&v71);
            v61 = (char *)sub_20B8B0430((uint64_t)v60);
            valuePtr = v61;
            CFArrayAppendValue(Mutable, v61);
            if (v61)
              CFRelease(v61);
          }
          goto LABEL_70;
        }
      }
      v71 = 0uLL;
      v72 = 0;
      v33 = v36;
    }
LABEL_70:
    v21 = sub_20B9ECADC(otherArray, v21, v70);
    valuePtr = (char *)&v71;
    sub_20B83B400((void ***)&valuePtr);
    if (v34)
      CFRelease(v34);
    if (v33)
      CFRelease(v33);
  }
LABEL_74:
  if (v70 > v21)
  {
    v83.location = v21;
    v83.length = v70 - v21;
    CFArrayAppendArray(Mutable, otherArray, v83);
  }
  return Mutable;
}

void sub_20B9ECA18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, const void *a19, const void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p)
{
  uint64_t v25;
  uint64_t v26;
  void *v28;

  *(_QWORD *)(v26 - 96) = v25;
  sub_20B83B400((void ***)(v26 - 96));
  if (__p)
    operator delete(__p);
  v28 = *(void **)(v26 - 120);
  if (v28)
  {
    *(_QWORD *)(v26 - 112) = v28;
    operator delete(v28);
  }
  sub_20B8B035C(&a19, 0);
  sub_20B87E150(&a20, 0);
  _Unwind_Resume(a1);
}

CFIndex sub_20B9ECADC(CFArrayRef theArray, unint64_t idx, unint64_t a3)
{
  CFIndex v3;
  unsigned int (****ValueAtIndex)(_QWORD);

  v3 = idx;
  if (idx < a3)
  {
    while (1)
    {
      ValueAtIndex = (unsigned int (****)(_QWORD))CFArrayGetValueAtIndex(theArray, v3);
      if (!(**ValueAtIndex[3])(ValueAtIndex[3]) || (**ValueAtIndex[3])(ValueAtIndex[3]) == 1)
        break;
      if (a3 == ++v3)
        return a3;
    }
  }
  return v3;
}

void sub_20B9ECB60(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v7;
  uint64_t v8;

  if (*(_BYTE *)(a1 + 840))
  {
    if (sub_20B9551A8(*(_QWORD *)(a1 + 864), a2, a3) && a3 != 0)
      sub_20B9EB6A8((_QWORD *)a1, 2);
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 832);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    v8 = *(_QWORD *)(a1 + 824);
    if (v8)
    {
      sub_20B94F260(v8, a2, a3);
      if (a3)
        sub_20B9EB358(a1, 2);
    }
  }
}

uint64_t sub_20B9ECC0C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v6 = a1[103];
  if (v6)
  {
    sub_20B828E74((uint64_t *)(v6 + 144));
    *(_DWORD *)(v6 + 192) = 0;
    sub_20B882F18((uint64_t *)v6);
  }
  v7 = a1[108];
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  result = a1[104];
  if (result)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 24))(result, a2, a3);
    if ((_DWORD)a3)
      return sub_20B9EB358((uint64_t)a1, 1);
    else
      return 1;
  }
  return result;
}

uint64_t sub_20B9ECCA4(uint64_t a1, unint64_t a2, unsigned __int16 *a3, unint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v8;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  int v25;

  if (*(_QWORD *)(a1 + 800) > a2)
    return 1;
  result = 0;
  if (a4 <= 4)
  {
    v8 = *(_QWORD *)(a1 + 8);
    if ((*(_QWORD *)(a1 + 16) - v8) >> 3 > a2)
    {
      v11 = *(_QWORD **)(v8 + 8 * a2);
      v12 = *a3;
      v13 = sub_20B906060(v11, *a3, 1);
      v14 = (_QWORD *)v13;
      v15 = *(_DWORD *)(a1 + 40) - 3;
      if (v15 >= 2)
      {
        if (!v13)
          return 0;
      }
      else if (!v13)
      {
        result = sub_20B906060(v11, word_20BA5A326[v12 - 428], 0);
        v14 = (_QWORD *)result;
        if (!result)
          return result;
      }
      v16 = a4 - 2;
      if (a4 == 2)
      {
LABEL_31:
        v22 = (_QWORD *)v14[6];
        if (v22)
        {
          v23 = a3[a4 - 1];
          do
          {
            v24 = (_QWORD *)v22[2];
            if (!a5 || (*(unsigned int (**)(_QWORD))(*v24 + 40))(v22[2]) == a5)
            {
              v25 = *(unsigned __int16 *)(v24[1] + 2);
              if (v15 > 1)
              {
                if (v25 == (_DWORD)v23)
                  return v22 != 0;
              }
              else if (v25 == word_20BA5A326[v23 - 428] || v25 == (_DWORD)v23)
              {
                return v22 != 0;
              }
            }
            v22 = (_QWORD *)*v22;
          }
          while (v22);
        }
        return v22 != 0;
      }
      else
      {
        v17 = 1;
        while (1)
        {
          if (v15 >= 2)
          {
            result = (uint64_t)sub_20B9EE3BC(v14 + 9, a3[v17 + 1] + 542 * a3[v17]);
            if (!result)
              break;
          }
          if (a5 || v17 != v16)
          {
            v18 = (_QWORD *)v14[6];
            if (v18)
            {
              v19 = a3[v17];
              while (1)
              {
                v14 = (_QWORD *)v18[2];
                v20 = *(unsigned __int16 *)(v14[1] + 2);
                if (v15 > 1)
                {
                  if (v20 == (_DWORD)v19)
                    goto LABEL_16;
                }
                else if (v20 == word_20BA5A326[v19 - 428] || v20 == (_DWORD)v19)
                {
                  goto LABEL_16;
                }
                v18 = (_QWORD *)*v18;
                if (!v18)
                  return 0;
              }
            }
            return 0;
          }
LABEL_16:
          if (++v17 > v16)
          {
            if (!a5)
              return 1;
            goto LABEL_31;
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_20B9ECEB0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 760);
  v4 = *(_QWORD *)(a1 + 768);
  if (v3 == v4)
    return 0;
  if (a3 <= 1)
    v6 = 1;
  else
    v6 = a3;
  v7 = v6 - 1;
  while (!a2 || !sub_20B9D6A48(a2, v3))
  {
    result = 0;
    if (v7)
    {
      v3 += 24;
      --v7;
      if (v3 != v4)
        continue;
    }
    return result;
  }
  return 1;
}

uint64_t sub_20B9ECF2C(_QWORD *a1, const char *a2, const void *a3)
{
  char *v6;
  _QWORD *v7;
  size_t v8;
  _QWORD *v9;
  char *v10;
  size_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  const char *v16;
  size_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  char **v22;
  char **v23;
  const char **v24;
  const char *v25;
  size_t v26;
  _QWORD *v27;
  const std::locale::facet *v28;
  _QWORD *v29;
  size_t v30;
  _QWORD *v31;
  _QWORD *v32;
  const std::locale::facet *v33;
  const std::locale::facet *v34;
  uint64_t v35;
  char *__s[2];
  _QWORD v38[2];
  uint64_t v39;
  _QWORD v40[10];
  char v41;
  uint64_t v42;
  std::locale v43;

  sub_20B83BFEC((uint64_t)v38);
  v6 = (char *)(*(uint64_t (**)(const void *, uint64_t))(*(_QWORD *)a3 + 16))(a3, 1);
  __s[1] = v6;
  sub_20B8D154C((const __CFString *)v6, __s);
  v7 = __dynamic_cast(a3, (const struct __class_type_info *)&unk_24C45D410, (const struct __class_type_info *)&unk_24C45D360, 0);
  v8 = strlen(a2);
  if (v7)
  {
    v9 = sub_20B828F84(&v39, (uint64_t)a2, v8);
    v10 = __s[0];
    v11 = strlen(__s[0]);
    v12 = sub_20B828F84(v9, (uint64_t)__s[0], v11);
    sub_20B828F84(v12, (uint64_t)", separatorCount = ", 19);
    v13 = (_QWORD *)std::ostream::operator<<();
    sub_20B828F84(v13, (uint64_t)", rawInputLength = ", 19);
    (*(void (**)(const void *))(*(_QWORD *)a3 + 40))(a3);
    std::ostream::operator<<();
    if (v7[7])
      sub_20B828F84(&v39, (uint64_t)" next: ", 7);
    v14 = v7 + 6;
    while (1)
    {
      v14 = (_QWORD *)*v14;
      if (!v14)
        break;
      v15 = v14[2];
      v16 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
      v17 = strlen(v16);
      v18 = sub_20B828F84(&v39, (uint64_t)v16, v17);
      sub_20B828F84(v18, (uint64_t)"(", 1);
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
      v19 = (_QWORD *)std::ostream::operator<<();
      sub_20B828F84(v19, (uint64_t)"), ", 3);
    }
    if ((*(unsigned int (**)(_QWORD *))(*v7 + 64))(v7) == 2)
    {
      v20 = sub_20B828F84(&v39, (uint64_t)" (fuzzy), original = ", 21);
      v21 = *((unsigned __int16 *)v7 + 56);
      v22 = &(&off_24C4A2768)[2 * v21];
      v23 = &(&off_24C4A0588)[2 * v21];
      if (*((_DWORD *)v7 + 5) == 2)
        v24 = (const char **)v22;
      else
        v24 = (const char **)v23;
      v25 = *v24;
      v26 = strlen(*v24);
      v27 = sub_20B828F84(v20, (uint64_t)v25, v26);
      std::ios_base::getloc((const std::ios_base *)((char *)v27 + *(_QWORD *)(*v27 - 24)));
      v28 = std::locale::use_facet(&v43, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 10);
      std::locale::~locale(&v43);
      std::ostream::put();
    }
    else
    {
      std::ios_base::getloc((const std::ios_base *)((char *)&v40[-1] + *(_QWORD *)(v39 - 24)));
      v34 = std::locale::use_facet(&v43, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v34->__vftable[2].~facet_0)(v34, 10);
      std::locale::~locale(&v43);
      std::ostream::put();
    }
    std::ostream::flush();
    sub_20B871648((uint64_t)v40, a1);
  }
  else
  {
    v29 = sub_20B828F84(&v39, (uint64_t)a2, v8);
    v10 = __s[0];
    v30 = strlen(__s[0]);
    v31 = sub_20B828F84(v29, (uint64_t)__s[0], v30);
    sub_20B828F84(v31, (uint64_t)", rawInputLength = ", 19);
    (*(void (**)(const void *))(*(_QWORD *)a3 + 40))(a3);
    v32 = (_QWORD *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v32 + *(_QWORD *)(*v32 - 24)));
    v33 = std::locale::use_facet(&v43, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v33->__vftable[2].~facet_0)(v33, 10);
    std::locale::~locale(&v43);
    std::ostream::put();
    std::ostream::flush();
    sub_20B871648((uint64_t)v40, a1);
  }
  if (v10)
    MEMORY[0x20BD39C80](v10, 0x1000C8077774924);
  if (v6)
    CFRelease(v6);
  v38[0] = *MEMORY[0x24BEDB7F0];
  v35 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v38 + *(_QWORD *)(v38[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v39 = v35;
  v40[0] = MEMORY[0x24BEDB848] + 16;
  if (v41 < 0)
    operator delete((void *)v40[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x20BD39C2C](&v42);
}

void sub_20B9ED378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  const void *v5;
  va_list va;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, const void *);
  if (v3)
    MEMORY[0x20BD39C80](v3, 0x1000C8077774924);
  sub_20B87E150((const void **)va, 0);
  sub_20B83C118((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9ED3EC(uint64_t result, uint64_t *a2, uint64_t (**a3)(_QWORD), uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t *v41;
  BOOL v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  int64_t v51;
  int64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t *v80;
  int64_t v81;
  uint64_t *v82;
  int64_t v83;
  uint64_t v84;
  uint64_t *v85;

  v8 = (uint64_t *)result;
LABEL_2:
  v9 = a2 - 1;
  v82 = a2 - 2;
  v85 = a2;
  v80 = a2 - 3;
  v10 = v8;
  while (2)
  {
    v8 = v10;
    v11 = v85;
    v12 = (char *)v85 - (char *)v10;
    v13 = v85 - v10;
    switch(v13)
    {
      case 0:
      case 1:
        return result;
      case 2:
        result = ((uint64_t (*)(_QWORD, uint64_t))*a3)(*(v85 - 1), *v8);
        if ((_DWORD)result)
        {
          v40 = *v8;
          *v8 = *(v85 - 1);
          *(v85 - 1) = v40;
        }
        return result;
      case 3:
        return sub_20B8802F8(v8, v8 + 1, v9, a3);
      case 4:
        return sub_20B88057C(v8, v8 + 1, v8 + 2, v9, a3);
      case 5:
        return sub_20B88062C(v8, v8 + 1, v8 + 2, v8 + 3, v9, a3);
      default:
        if (v12 <= 191)
        {
          v41 = v8 + 1;
          v43 = v8 == v85 || v41 == v85;
          if ((a5 & 1) != 0)
          {
            if (!v43)
            {
              v44 = 0;
              v45 = v8;
              do
              {
                v47 = *v45;
                v46 = v45[1];
                v45 = v41;
                result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v46, v47);
                if ((_DWORD)result)
                {
                  v48 = *v45;
                  v49 = v44;
                  while (1)
                  {
                    *(uint64_t *)((char *)v8 + v49 + 8) = *(uint64_t *)((char *)v8 + v49);
                    if (!v49)
                      break;
                    result = ((uint64_t (*)(uint64_t, _QWORD))*a3)(v48, *(uint64_t *)((char *)v8 + v49 - 8));
                    v49 -= 8;
                    if ((result & 1) == 0)
                    {
                      v50 = (uint64_t *)((char *)v8 + v49 + 8);
                      goto LABEL_74;
                    }
                  }
                  v50 = v8;
LABEL_74:
                  *v50 = v48;
                }
                v41 = v45 + 1;
                v44 += 8;
              }
              while (v45 + 1 != v85);
            }
          }
          else if (!v43)
          {
            do
            {
              v75 = *v8;
              v74 = v8[1];
              v8 = v41;
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v74, v75);
              if ((_DWORD)result)
              {
                v76 = *v8;
                v77 = v8;
                do
                {
                  v78 = v77;
                  v79 = *--v77;
                  *v78 = v79;
                  result = ((uint64_t (*)(uint64_t, _QWORD))*a3)(v76, *(v78 - 2));
                }
                while ((result & 1) != 0);
                *v77 = v76;
              }
              v41 = v8 + 1;
            }
            while (v8 + 1 != v85);
          }
          return result;
        }
        if (!a4)
        {
          if (v8 != v85)
          {
            v51 = (unint64_t)(v13 - 2) >> 1;
            v83 = v51;
            do
            {
              v52 = v51;
              if (v83 >= v51)
              {
                v53 = (2 * v51) | 1;
                v54 = &v8[v53];
                if (2 * v51 + 2 < v13 && ((unsigned int (*)(uint64_t, uint64_t))*a3)(*v54, v54[1]))
                {
                  ++v54;
                  v53 = 2 * v52 + 2;
                }
                v55 = &v8[v52];
                result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v54, *v55);
                if ((result & 1) == 0)
                {
                  v81 = v52;
                  v56 = *v55;
                  do
                  {
                    v57 = v54;
                    *v55 = *v54;
                    if (v83 < v53)
                      break;
                    v58 = (2 * v53) | 1;
                    v54 = &v8[v58];
                    if (2 * v53 + 2 < v13 && ((unsigned int (*)(uint64_t, uint64_t))*a3)(*v54, v54[1]))
                    {
                      ++v54;
                      v58 = 2 * v53 + 2;
                    }
                    result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v54, v56);
                    v55 = v57;
                    v53 = v58;
                  }
                  while (!(_DWORD)result);
                  *v57 = v56;
                  v11 = v85;
                  v52 = v81;
                }
              }
              v51 = v52 - 1;
            }
            while (v52);
            v59 = (unint64_t)v12 >> 3;
            do
            {
              v60 = v11;
              v61 = 0;
              v62 = v59 - 2;
              v84 = *v8;
              if (v59 < 2)
                v62 = v59 - 1;
              v63 = v62 >> 1;
              v64 = v8;
              do
              {
                v65 = &v64[v61 + 1];
                v66 = (2 * v61) | 1;
                v67 = 2 * v61 + 2;
                if (v67 < v59)
                {
                  result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v64[v61 + 1], v64[v61 + 2]);
                  if ((_DWORD)result)
                  {
                    ++v65;
                    v66 = v67;
                  }
                }
                *v64 = *v65;
                v64 = v65;
                v61 = v66;
              }
              while (v66 <= v63);
              v11 = v60 - 1;
              if (v65 == v60 - 1)
              {
                *v65 = v84;
              }
              else
              {
                *v65 = *v11;
                *v11 = v84;
                v68 = (char *)v65 - (char *)v8 + 8;
                if (v68 >= 9)
                {
                  v69 = (((unint64_t)v68 >> 3) - 2) >> 1;
                  v70 = &v8[v69];
                  result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v70, *v65);
                  if ((_DWORD)result)
                  {
                    v71 = *v65;
                    do
                    {
                      v72 = v70;
                      *v65 = *v70;
                      if (!v69)
                        break;
                      v69 = (v69 - 1) >> 1;
                      v70 = &v8[v69];
                      result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v70, v71);
                      v65 = v72;
                    }
                    while ((result & 1) != 0);
                    *v72 = v71;
                  }
                }
              }
            }
            while (v59-- > 2);
          }
          return result;
        }
        v14 = (unint64_t)v13 >> 1;
        v15 = &v8[(unint64_t)v13 >> 1];
        if ((unint64_t)v12 < 0x401)
        {
          sub_20B8802F8(v15, v8, v9, a3);
        }
        else
        {
          sub_20B8802F8(v8, v15, v9, a3);
          sub_20B8802F8(v8 + 1, v15 - 1, v82, a3);
          sub_20B8802F8(v8 + 2, &v8[v14 + 1], v80, a3);
          v11 = v85;
          sub_20B8802F8(v15 - 1, v15, &v8[v14 + 1], a3);
          v16 = *v8;
          *v8 = *v15;
          *v15 = v16;
        }
        --a4;
        if ((a5 & 1) == 0 && (((uint64_t (*)(_QWORD, uint64_t))*a3)(*(v8 - 1), *v8) & 1) == 0)
        {
          v31 = *v8;
          result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v8, *v9);
          if ((result & 1) != 0)
          {
            v10 = v8;
            do
            {
              v32 = v10[1];
              ++v10;
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v31, v32);
            }
            while ((result & 1) == 0);
          }
          else
          {
            v33 = v8 + 1;
            do
            {
              v10 = v33;
              if (v33 >= v85)
                break;
              ++v33;
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v31, *v10);
            }
            while (!(_DWORD)result);
          }
          v34 = v85;
          if (v10 < v85)
          {
            v34 = v85;
            do
            {
              v35 = *--v34;
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v31, v35);
            }
            while ((result & 1) != 0);
          }
          while (v10 < v34)
          {
            v36 = *v10;
            *v10 = *v34;
            *v34 = v36;
            do
            {
              v37 = v10[1];
              ++v10;
            }
            while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v31, v37));
            do
            {
              v38 = *--v34;
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v31, v38);
            }
            while ((result & 1) != 0);
          }
          v39 = v10 - 1;
          if (v10 - 1 != v8)
            *v8 = *v39;
          a5 = 0;
          *v39 = v31;
          continue;
        }
        v17 = 0;
        v18 = *v8;
        do
          v19 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v8[++v17], v18);
        while ((v19 & 1) != 0);
        v20 = &v8[v17];
        v21 = v11;
        if (v17 == 1)
        {
          v21 = v11;
          do
          {
            if (v20 >= v21)
              break;
            v23 = *--v21;
          }
          while ((((uint64_t (*)(uint64_t, uint64_t))*a3)(v23, v18) & 1) == 0);
        }
        else
        {
          do
            v22 = *--v21;
          while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v22, v18));
        }
        if (v20 >= v21)
        {
          v29 = v20 - 1;
        }
        else
        {
          v24 = &v8[v17];
          v25 = v21;
          do
          {
            v26 = *v24;
            *v24 = *v25;
            *v25 = v26;
            do
            {
              v27 = v24[1];
              ++v24;
            }
            while ((((uint64_t (*)(uint64_t, uint64_t))*a3)(v27, v18) & 1) != 0);
            do
              v28 = *--v25;
            while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v28, v18));
          }
          while (v24 < v25);
          v29 = v24 - 1;
        }
        if (v29 != v8)
          *v8 = *v29;
        *v29 = v18;
        if (v20 < v21)
        {
LABEL_32:
          result = sub_20B9ED3EC(v8, v29, a3, a4, a5 & 1);
          a5 = 0;
          v10 = v29 + 1;
          continue;
        }
        v30 = sub_20B9EDB40(v8, v29, a3);
        v10 = v29 + 1;
        result = sub_20B9EDB40(v29 + 1, v85, a3);
        if (!(_DWORD)result)
        {
          if (v30)
            continue;
          goto LABEL_32;
        }
        a2 = v29;
        if (!v30)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL sub_20B9EDB40(_QWORD *a1, _QWORD *a2, uint64_t (**a3)(_QWORD))
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (((unsigned int (*)(_QWORD, _QWORD))*a3)(*(a2 - 1), *a1))
      {
        v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      sub_20B8802F8(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_20B88057C(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_20B88062C(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v9 = a1 + 2;
      sub_20B8802F8(a1, a1 + 1, a1 + 2, a3);
      v10 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    if (((unsigned int (*)(_QWORD, _QWORD))*a3)(*v10, *v9))
    {
      v13 = *v10;
      v14 = v11;
      while (1)
      {
        v15 = (char *)a1 + v14;
        *(_QWORD *)((char *)a1 + v14 + 24) = *(_QWORD *)((char *)a1 + v14 + 16);
        if (v14 == -16)
          break;
        v14 -= 8;
        if ((((uint64_t (*)(uint64_t, _QWORD))*a3)(v13, *((_QWORD *)v15 + 1)) & 1) == 0)
        {
          v16 = (_QWORD *)((char *)a1 + v14 + 24);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v13;
      if (++v12 == 8)
        return v10 + 1 == a2;
    }
    v9 = v10;
    v11 += 8;
    if (++v10 == a2)
      return 1;
  }
}

_QWORD *sub_20B9EDCE4(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x18uLL);
  *i = 0;
  i[1] = v8;
  i[2] = *a3;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    v16 = 1;
    if (v9 >= 3)
      v16 = (v9 & (v9 - 1)) != 0;
    v17 = v16 | (2 * v9);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    sub_20B828960(a1, v19);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v21)
  {
    *i = *v21;
LABEL_38:
    *v21 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9)
        v22 %= v9;
    }
    else
    {
      v22 &= v9 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_20B9EDF20(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20B9EDF34(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *i;
  unint64_t v11;
  _QWORD *v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = (_QWORD *)*v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2)
            return;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = operator new(0x18uLL);
  *v12 = 0;
  v12[1] = a2;
  v12[2] = a3;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    sub_20B828960(a1, v18);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2)
        v3 = a2 % v7;
      else
        v3 = a2;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v20)
  {
    *v12 = *v20;
LABEL_38:
    *v20 = v12;
    goto LABEL_39;
  }
  *v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v19 + 8 * v3) = a1 + 16;
  if (*v12)
  {
    v21 = *(_QWORD *)(*v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7)
        v21 %= v7;
    }
    else
    {
      v21 &= v7 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
}

void sub_20B9EE124(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9EE138(uint64_t a1)
{
  void *v2;

  sub_20B9EE170(*(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20B9EE170(_QWORD *__p)
{
  _QWORD *v1;
  _QWORD *v2;
  void *v3;

  if (__p)
  {
    v1 = __p;
    do
    {
      v2 = (_QWORD *)*v1;
      v3 = (void *)v1[3];
      if (v3)
      {
        v1[4] = v3;
        operator delete(v3);
      }
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

uint64_t sub_20B9EE1B4(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_20B951644(result);
    JUMPOUT(0x20BD39CB0);
  }
  return result;
}

void sub_20B9EE1F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    sub_20B9EE170(*(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void sub_20B9EE244(uint64_t a1)
{
  int v2;
  _QWORD *v3;
  unint64_t v4;
  char v5;
  unint64_t v6;
  _QWORD *v7;

  v2 = *(_DWORD *)(a1 + 8);
  v3 = *(_QWORD **)a1;
  if (!v2)
  {
    v5 = -62;
    v6 = 39;
LABEL_8:
    bzero(v3, 8 * v6);
    goto LABEL_9;
  }
  if ((64 - v2) >= 0x9C2uLL)
    v4 = 2498;
  else
    v4 = (64 - v2);
  *v3++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v2 - v4)) & (-1 << v2));
  v5 = -62 - v4;
  *(_QWORD *)a1 = v3;
  v6 = (2498 - v4) >> 6;
  if (v4 <= 0x982)
    goto LABEL_8;
LABEL_9:
  if ((v5 & 0x3F) != 0)
  {
    v7 = &v3[v6];
    *(_QWORD *)a1 = v7;
    *v7 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v5 & 0x3F));
  }
}

void sub_20B9EE300()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B9EE314(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C46A500;
  result[1] = v3;
  return result;
}

uint64_t sub_20B9EE348(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C46A500;
  a2[1] = v2;
  return result;
}

uint64_t sub_20B9EE364(uint64_t a1, unsigned __int16 *a2)
{
  return sub_20B9E3218(*(_DWORD *)(*(_QWORD *)(a1 + 8) + 40), *a2);
}

uint64_t sub_20B9EE374(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45EEA0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B9EE3B0()
{
  return &unk_24C45EEA0;
}

_QWORD *sub_20B9EE3BC(_QWORD *a1, unint64_t a2)
{
  int8x8_t v2;
  uint8x8_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *result;
  unint64_t v7;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (*(_QWORD *)&v2 <= a2)
      v4 = a2 % *(_QWORD *)&v2;
  }
  else
  {
    v4 = (*(_QWORD *)&v2 - 1) & a2;
  }
  v5 = *(_QWORD **)(*a1 + 8 * v4);
  if (!v5)
    return 0;
  result = (_QWORD *)*v5;
  if (*v5)
  {
    do
    {
      v7 = result[1];
      if (v7 == a2)
      {
        if (result[2] == a2)
          return result;
      }
      else
      {
        if (v3.u32[0] > 1uLL)
        {
          if (v7 >= *(_QWORD *)&v2)
            v7 %= *(_QWORD *)&v2;
        }
        else
        {
          v7 &= *(_QWORD *)&v2 - 1;
        }
        if (v7 != v4)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

_QWORD *sub_20B9EE46C(_QWORD *a1, unint64_t a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v4 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v3 >> 47) ^ v3);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = (*(_QWORD *)&v2 - 1) & v5;
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    do
    {
      v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == a2)
          return result;
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(_QWORD *)&v2)
            v10 %= *(_QWORD *)&v2;
        }
        else
        {
          v10 &= *(_QWORD *)&v2 - 1;
        }
        if (v10 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

void sub_20B9EE554(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C46BA60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B9EE564(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C46BA60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B9EE594(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_20B9EE5A4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C46BA28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B9EE5B4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C46BA28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B9EE5E4(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_20B9EE5F4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C46BAD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B9EE604(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C46BAD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B9EE634(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_20B9EE644(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C46B948;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B9EE654(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C46B948;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B9EE684(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_20B9EE694(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C46B910;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B9EE6A4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C46B910;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B9EE6D4(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t *sub_20B9EE6E4(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_20B9E8D3C(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_20B9EE720(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B8292CC(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_20B9EE73C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B9EE760(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20B9EE778(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45E688))
    return a1 + 24;
  else
    return 0;
}

_QWORD *sub_20B9EE7B8(uint64_t *a1, unsigned __int16 a2, _WORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  int8x8_t prime;
  void *v19;
  void *v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint8x8_t v24;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  void *v34;

  v6 = a2;
  v7 = a1[1];
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(void ***)(*a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((unsigned __int16 *)v10 + 8) == a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v12 = a1 + 2;
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_WORD *)v10 + 8) = *a3;
  v10[4] = 0;
  v10[5] = 0;
  v10[3] = 0;
  v13 = (float)(unint64_t)(a1[3] + 1);
  v14 = *((float *)a1 + 8);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = (int8x8_t)v17;
    else
      prime = (int8x8_t)v16;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v7 = a1[1];
    }
    if (*(_QWORD *)&prime > v7)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v7)
    {
      v25 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v7 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        v25 = std::__next_prime(v25);
      }
      else
      {
        v27 = 1 << -(char)__clz(v25 - 1);
        if (v25 >= 2)
          v25 = v27;
      }
      if (*(_QWORD *)&prime <= v25)
        prime = (int8x8_t)v25;
      if (*(_QWORD *)&prime >= v7)
      {
        v7 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            sub_20B800BC0();
          v19 = operator new(8 * *(_QWORD *)&prime);
          v20 = (void *)*a1;
          *a1 = (uint64_t)v19;
          if (v20)
            operator delete(v20);
          v21 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(_QWORD *)(*a1 + 8 * v21++) = 0;
          while (*(_QWORD *)&prime != v21);
          v22 = (_QWORD *)*v12;
          if (*v12)
          {
            v23 = v22[1];
            v24 = (uint8x8_t)vcnt_s8(prime);
            v24.i16[0] = vaddlv_u8(v24);
            if (v24.u32[0] > 1uLL)
            {
              if (v23 >= *(_QWORD *)&prime)
                v23 %= *(_QWORD *)&prime;
            }
            else
            {
              v23 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*a1 + 8 * v23) = v12;
            v28 = (_QWORD *)*v22;
            if (*v22)
            {
              do
              {
                v29 = v28[1];
                if (v24.u32[0] > 1uLL)
                {
                  if (v29 >= *(_QWORD *)&prime)
                    v29 %= *(_QWORD *)&prime;
                }
                else
                {
                  v29 &= *(_QWORD *)&prime - 1;
                }
                if (v29 != v23)
                {
                  if (!*(_QWORD *)(*a1 + 8 * v29))
                  {
                    *(_QWORD *)(*a1 + 8 * v29) = v22;
                    goto LABEL_55;
                  }
                  *v22 = *v28;
                  *v28 = **(_QWORD **)(*a1 + 8 * v29);
                  **(_QWORD **)(*a1 + 8 * v29) = v28;
                  v28 = v22;
                }
                v29 = v23;
LABEL_55:
                v22 = v28;
                v28 = (_QWORD *)*v28;
                v23 = v29;
              }
              while (v28);
            }
          }
          v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        v34 = (void *)*a1;
        *a1 = 0;
        if (v34)
          operator delete(v34);
        v7 = 0;
        a1[1] = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v30 = *a1;
  v31 = *(_QWORD **)(*a1 + 8 * v3);
  if (v31)
  {
    *v10 = *v31;
LABEL_72:
    *v31 = v10;
    goto LABEL_73;
  }
  *v10 = *v12;
  *v12 = v10;
  *(_QWORD *)(v30 + 8 * v3) = v12;
  if (*v10)
  {
    v32 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7)
        v32 %= v7;
    }
    else
    {
      v32 &= v7 - 1;
    }
    v31 = (_QWORD *)(*a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
  return v10;
}

void sub_20B9EEB9C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20B8D44F8(1, v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B9EEBB4(_QWORD *a1, unsigned int a2)
{
  unint64_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *result;
  unint64_t v7;

  v2 = a1[1];
  if (!v2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (v2 <= a2)
      v4 = a2 % v2;
  }
  else
  {
    v4 = ((_DWORD)v2 - 1) & a2;
  }
  v5 = *(uint64_t ***)(*a1 + 8 * v4);
  if (!v5)
    return 0;
  for (result = *v5; result; result = (uint64_t *)*result)
  {
    v7 = result[1];
    if (v7 == a2)
    {
      if (*((_DWORD *)result + 4) == a2)
        return result;
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= v2)
          v7 %= v2;
      }
      else
      {
        v7 &= v2 - 1;
      }
      if (v7 != v4)
        return 0;
    }
  }
  return result;
}

void sub_20B9EEC68(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C46B980;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B9EEC78(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C46B980;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B9EECA8(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_20B9EECB8(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  void *v16;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(_QWORD *)&v4)
  {
    if (prime >= *(_QWORD *)&v4)
      return;
    v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      v11 = std::__next_prime(v11);
    }
    else
    {
      v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2)
        v11 = v13;
    }
    if (prime <= v11)
      prime = v11;
    if (prime >= *(_QWORD *)&v4)
      return;
    if (!prime)
    {
      v16 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v16)
        operator delete(v16);
      *(_QWORD *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61)
    sub_20B800BC0();
  v5 = operator new(8 * prime);
  v6 = *(void **)a1;
  *(_QWORD *)a1 = v5;
  if (v6)
    operator delete(v6);
  v7 = 0;
  *(_QWORD *)(a1 + 8) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  v8 = *(_QWORD **)(a1 + 16);
  if (v8)
  {
    v9 = v8[1];
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime)
        v9 %= prime;
    }
    else
    {
      v9 &= prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = a1 + 16;
    v14 = (_QWORD *)*v8;
    if (*v8)
    {
      do
      {
        v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime)
            v15 %= prime;
        }
        else
        {
          v15 &= prime - 1;
        }
        if (v15 != v9)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v15))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }
          *v8 = *v14;
          *v14 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v15);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v15) = v14;
          v14 = v8;
        }
        v15 = v9;
LABEL_31:
        v8 = v14;
        v14 = (_QWORD *)*v14;
        v9 = v15;
      }
      while (v14);
    }
  }
}

void sub_20B9EEEB4()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B9EEEC8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_24C46A558;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 sub_20B9EEF10(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24C46A558;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20B9EEF40(uint64_t a1, uint64_t *a2, uint64_t a3, double *a4)
{
  uint64_t v4;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  float *v10;
  unint64_t v11;
  float v12;
  float *v13;
  float *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  float *v20;
  char *v21;
  float v22;
  int v23;
  uint64_t v24;
  __int16 v25;
  char *v26;
  char *v27;
  _QWORD *v28;
  uint64_t v29;
  __int16 v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  __int16 v39;
  unint64_t v40;
  unint64_t *v41;
  char *v42;
  char *v43;
  __int16 v44;
  BOOL v45;
  double v46;
  double v47;
  uint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint8x8_t v51;
  double **v52;
  double *i;
  unint64_t v54;
  float v55;
  float v56;
  _BOOL8 v57;
  unint64_t v58;
  unint64_t v59;
  size_t v60;
  uint64_t v61;
  double **v62;
  unint64_t v63;
  void *__p;
  char *v65;
  char *v66;

  v6 = *a2;
  v7 = *a4;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(float **)(v9 + 8);
  v11 = *(_QWORD *)(v9 + 16);
  if ((unint64_t)v10 >= v11)
  {
    v14 = *(float **)v9;
    v15 = ((uint64_t)v10 - *(_QWORD *)v9) >> 2;
    v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 62)
      sub_20B80CDD8();
    v17 = v11 - (_QWORD)v14;
    if (v17 >> 1 > v16)
      v16 = v17 >> 1;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
      v18 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      v19 = (char *)sub_20B8127BC(v9 + 16, v18);
      v14 = *(float **)v9;
      v10 = *(float **)(v9 + 8);
    }
    else
    {
      v19 = 0;
    }
    v20 = (float *)&v19[4 * v15];
    v21 = &v19[4 * v18];
    v22 = v7;
    *v20 = v22;
    v13 = v20 + 1;
    while (v10 != v14)
    {
      v23 = *((_DWORD *)v10-- - 1);
      *((_DWORD *)v20-- - 1) = v23;
    }
    *(_QWORD *)v9 = v20;
    *(_QWORD *)(v9 + 8) = v13;
    *(_QWORD *)(v9 + 16) = v21;
    if (v14)
      operator delete(v14);
  }
  else
  {
    v12 = v7;
    *v10 = v12;
    v13 = v10 + 1;
  }
  *(_QWORD *)(v9 + 8) = v13;
  v24 = *(_QWORD *)(*(_QWORD *)v6 + 72);
  if (v24)
    v25 = *(_WORD *)(v24 + 2);
  else
    v25 = 0;
  v26 = (char *)operator new(2uLL);
  *(_WORD *)v26 = v25;
  v27 = v26 + 2;
  v65 = v26 + 2;
  v66 = v26 + 2;
  __p = v26;
  v28 = *(_QWORD **)(v6 + 8);
  if (!v28)
    goto LABEL_47;
  v4 = 0x7FFFFFFFFFFFFFFELL;
  while (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)*v28 + 24))(*v28))
  {
    v29 = *(_QWORD *)(*v28 + 72);
    if (v29)
      v30 = *(_WORD *)(v29 + 2);
    else
      v30 = 0;
    v31 = v65;
    if (v65 >= v66)
    {
      v32 = (char *)__p;
      v33 = v65 - (_BYTE *)__p;
      if (v65 - (_BYTE *)__p <= -3)
        sub_20B80CDD8();
      v34 = v33 >> 1;
      if (v66 - (_BYTE *)__p <= (unint64_t)((v33 >> 1) + 1))
        v35 = v34 + 1;
      else
        v35 = v66 - (_BYTE *)__p;
      if ((unint64_t)(v66 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFELL)
        v36 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v36 = v35;
      if (v36)
      {
        v37 = (char *)sub_20B80FD48((uint64_t)&v66, v36);
        v32 = (char *)__p;
        v31 = v65;
      }
      else
      {
        v37 = 0;
      }
      v38 = &v37[2 * v34];
      *(_WORD *)v38 = v30;
      v27 = v38 + 2;
      while (v31 != v32)
      {
        v39 = *((_WORD *)v31 - 1);
        v31 -= 2;
        *((_WORD *)v38 - 1) = v39;
        v38 -= 2;
      }
      __p = v38;
      v65 = v27;
      v66 = &v37[2 * v36];
      if (v32)
        operator delete(v32);
    }
    else
    {
      *(_WORD *)v65 = v30;
      v27 = v31 + 2;
    }
    v65 = v27;
    v28 = (_QWORD *)v28[1];
    if (!v28)
      goto LABEL_46;
  }
  v27 = v65;
LABEL_46:
  v26 = (char *)__p;
  if (__p != v27)
  {
LABEL_47:
    v40 = (v27 - v26) >> 1;
    v41 = *(unint64_t **)(a1 + 32);
    if (v40 <= *v41)
      v40 = *v41;
    *v41 = v40;
    v42 = v27 - 2;
    if (v27 - 2 > v26)
    {
      v43 = v26 + 2;
      do
      {
        v44 = *((_WORD *)v43 - 1);
        *((_WORD *)v43 - 1) = *(_WORD *)v42;
        *(_WORD *)v42 = v44;
        v42 -= 2;
        v45 = v43 >= v42;
        v43 += 2;
      }
      while (!v45);
    }
    sub_20B9EB160(*(uint64_t **)(a1 + 16), (uint64_t)&__p);
  }
  if (*(_BYTE *)(a1 + 40))
  {
    v46 = *(double *)(v6 + 56);
    v47 = *(double *)(v6 + 32);
    v48 = (uint64_t *)(v8 + 720);
    v49 = *(_QWORD *)(v6 + 64);
    v50 = *(_QWORD *)(v8 + 728);
    if (v50)
    {
      v51 = (uint8x8_t)vcnt_s8((int8x8_t)v50);
      v51.i16[0] = vaddlv_u8(v51);
      if (v51.u32[0] > 1uLL)
      {
        v4 = v49;
        if (v50 <= v49)
          v4 = v49 % v50;
      }
      else
      {
        v4 = (v50 - 1) & v49;
      }
      v52 = *(double ***)(*v48 + 8 * v4);
      if (v52)
      {
        for (i = *v52; i; i = *(double **)i)
        {
          v54 = *((_QWORD *)i + 1);
          if (v54 == v49)
          {
            if (*((_QWORD *)i + 2) == v49)
              goto LABEL_94;
          }
          else
          {
            if (v51.u32[0] > 1uLL)
            {
              if (v54 >= v50)
                v54 %= v50;
            }
            else
            {
              v54 &= v50 - 1;
            }
            if (v54 != v4)
              break;
          }
        }
      }
    }
    i = (double *)operator new(0x20uLL);
    *i = 0.0;
    *((_QWORD *)i + 1) = v49;
    *((_QWORD *)i + 2) = v49;
    i[3] = 0.0;
    v55 = (float)(unint64_t)(*(_QWORD *)(v8 + 744) + 1);
    v56 = *(float *)(v8 + 752);
    if (!v50 || (float)(v56 * (float)v50) < v55)
    {
      v57 = 1;
      if (v50 >= 3)
        v57 = (v50 & (v50 - 1)) != 0;
      v58 = v57 | (2 * v50);
      v59 = vcvtps_u32_f32(v55 / v56);
      if (v58 <= v59)
        v60 = v59;
      else
        v60 = v58;
      sub_20B9EECB8(v8 + 720, v60);
      v50 = *(_QWORD *)(v8 + 728);
      if ((v50 & (v50 - 1)) != 0)
      {
        if (v50 <= v49)
          v4 = v49 % v50;
        else
          v4 = v49;
      }
      else
      {
        v4 = (v50 - 1) & v49;
      }
    }
    v61 = *v48;
    v62 = *(double ***)(*v48 + 8 * v4);
    if (v62)
    {
      *(_QWORD *)i = *v62;
    }
    else
    {
      *i = *(double *)(v8 + 736);
      *(_QWORD *)(v8 + 736) = i;
      *(_QWORD *)(v61 + 8 * v4) = v8 + 736;
      if (!*(_QWORD *)i)
        goto LABEL_93;
      v63 = *(_QWORD *)(*(_QWORD *)i + 8);
      if ((v50 & (v50 - 1)) != 0)
      {
        if (v63 >= v50)
          v63 %= v50;
      }
      else
      {
        v63 &= v50 - 1;
      }
      v62 = (double **)(*v48 + 8 * v63);
    }
    *v62 = i;
LABEL_93:
    ++*(_QWORD *)(v8 + 744);
LABEL_94:
    i[3] = v46 - v47;
  }
  if (__p)
  {
    v65 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B9EF3D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  operator delete(v11);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9EF40C(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45EEB0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B9EF448()
{
  return &unk_24C45EEB0;
}

void sub_20B9EF454(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  int8x8_t v4;
  uint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v3 = sub_20B9EE46C(a1, a2);
  if (v3)
  {
    v4 = (int8x8_t)a1[1];
    v5 = *v3;
    v6 = v3[1];
    v7 = (uint8x8_t)vcnt_s8(v4);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v4)
        v6 %= *(_QWORD *)&v4;
    }
    else
    {
      v6 &= *(_QWORD *)&v4 - 1;
    }
    v8 = *(uint64_t **)(*a1 + 8 * v6);
    do
    {
      v9 = v8;
      v8 = (uint64_t *)*v8;
    }
    while (v8 != v3);
    if (v9 == a1 + 2)
      goto LABEL_20;
    v10 = v9[1];
    if (v7.u32[0] > 1uLL)
    {
      if (v10 >= *(_QWORD *)&v4)
        v10 %= *(_QWORD *)&v4;
    }
    else
    {
      v10 &= *(_QWORD *)&v4 - 1;
    }
    if (v10 != v6)
    {
LABEL_20:
      if (v5)
      {
        v11 = *(_QWORD *)(v5 + 8);
        if (v7.u32[0] > 1uLL)
        {
          v12 = *(_QWORD *)(v5 + 8);
          if (v11 >= *(_QWORD *)&v4)
            v12 = v11 % *(_QWORD *)&v4;
        }
        else
        {
          v12 = v11 & (*(_QWORD *)&v4 - 1);
        }
        if (v12 == v6)
          goto LABEL_24;
      }
      *(_QWORD *)(*a1 + 8 * v6) = 0;
      v5 = *v3;
    }
    if (!v5)
    {
LABEL_30:
      *v9 = v5;
      *v3 = 0;
      --a1[3];
      operator delete(v3);
      return;
    }
    v11 = *(_QWORD *)(v5 + 8);
LABEL_24:
    if (v7.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v4)
        v11 %= *(_QWORD *)&v4;
    }
    else
    {
      v11 &= *(_QWORD *)&v4 - 1;
    }
    if (v11 != v6)
    {
      *(_QWORD *)(*a1 + 8 * v11) = v9;
      v5 = *v3;
    }
    goto LABEL_30;
  }
}

uint64_t sub_20B9EF5A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;
  _QWORD *j;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = &off_24C467BB8;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_OWORD *)(a1 + 32) = 0u;
  v5 = a1 + 32;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  sub_20B828960(a1 + 32, *(_QWORD *)(a2 + 40));
  for (i = *(_QWORD **)(a2 + 48); i; i = (_QWORD *)*i)
    sub_20B9EDCE4(v5, i + 2, i + 2);
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  sub_20B828960(a1 + 72, *(_QWORD *)(a2 + 80));
  for (j = *(_QWORD **)(a2 + 88); j; j = (_QWORD *)*j)
    sub_20B9368B0(a1 + 72, j + 2, j + 2);
  return a1;
}

void sub_20B9EF68C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_20B84055C(v2);
  sub_20B84055C(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B9EF6B8(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24C467BB8;
  v2 = (uint64_t)(a1 + 4);
  sub_20B84055C((uint64_t)(a1 + 9));
  sub_20B84055C(v2);
  return a1;
}

void sub_20B9EF6F8(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_24C467BB8;
  v1 = (uint64_t)(a1 + 4);
  sub_20B84055C((uint64_t)(a1 + 9));
  sub_20B84055C(v1);
  JUMPOUT(0x20BD39CB0);
}

const char *sub_20B9EF748(uint64_t a1)
{
  int v1;
  uint64_t v2;
  char **v3;

  v1 = *(_DWORD *)(a1 + 20);
  if (v1 == 1)
    return "";
  if (v1 == 2)
  {
    v2 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 8) + 2);
    v3 = &off_24C4A2768;
  }
  else
  {
    v2 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 8) + 2);
    v3 = &off_24C4A0588;
  }
  return v3[2 * v2];
}

CFStringRef sub_20B9EF798(uint64_t a1, int a2)
{
  const __CFString *v4;
  const __CFString *v5;
  BOOL v6;
  CFIndex Length;
  __CFString *MutableCopy;
  unsigned int v10;

  v4 = (const __CFString *)sub_20B9E08C0(*(unsigned __int16 *)(*(_QWORD *)(a1 + 8) + 2), *(_DWORD *)(a1 + 20));
  v5 = v4;
  if (*(_BYTE *)(a1 + 16))
    v6 = a2 == 0;
  else
    v6 = 1;
  if (v6)
    return CFStringCreateCopy(0, v4);
  Length = CFStringGetLength(v4);
  MutableCopy = CFStringCreateMutableCopy(0, Length + *(unsigned __int8 *)(a1 + 16), v5);
  if (*(_BYTE *)(a1 + 16))
  {
    v10 = 0;
    do
    {
      CFStringAppend(MutableCopy, CFSTR("'"));
      ++v10;
    }
    while (v10 < *(unsigned __int8 *)(a1 + 16));
  }
  return MutableCopy;
}

uint64_t sub_20B9EF850(uint64_t a1)
{
  int v1;
  int v2;
  uint64_t result;

  v1 = *(_DWORD *)(a1 + 20);
  v2 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 8) + 2);
  result = 1;
  if (v1 == 2)
  {
    if ((v2 - 143) < 2 || v2 == 334 || v2 == 757)
      return result;
    return 0;
  }
  if (v2 != 83 && v2 != 162 && v2 != 318)
    return 0;
  return result;
}

uint64_t sub_20B9EF8A8(int *a1, int a2, char a3)
{
  int v4;
  unsigned __int16 v5;
  const __CFString *v7;
  unsigned __int16 v8;
  const __CFString *v9;
  unsigned int v10;

  if (a2 == 2)
  {
    if ((a3 & 1) != 0 || (sub_20B9EF850((uint64_t)a1) & 1) == 0)
      return *(unsigned __int8 *)(*((_QWORD *)a1 + 1) + 4);
    return 1;
  }
  if (a2 == 1)
  {
    if ((a3 & 1) != 0)
      return *(unsigned __int8 *)(*((_QWORD *)a1 + 1) + 4);
    if (((*(uint64_t (**)(int *))(*(_QWORD *)a1 + 96))(a1) & 1) == 0)
    {
      if ((*(unsigned int (**)(int *))(*(_QWORD *)a1 + 64))(a1) != 9
        && ((*(unsigned int (**)(int *))(*(_QWORD *)a1 + 40))(a1) != 2
         || (*(unsigned int (**)(int *))(*(_QWORD *)a1 + 64))(a1) == 8))
      {
        return *(unsigned __int8 *)(*((_QWORD *)a1 + 1) + 4);
      }
      v7 = (const __CFString *)sub_20B9E08C0(*(unsigned __int16 *)(*((_QWORD *)a1 + 1) + 2), a1[5]);
      v8 = 0;
      while (1)
      {
        v9 = (const __CFString *)sub_20B9E08C0((unsigned __int16)(*(_WORD *)(*((_QWORD *)a1 + 1) + 5) + v8), a1[5]);
        if (!CFStringHasPrefix(v9, v7))
          break;
        v10 = v8++;
        v5 = 5;
        if (v10 >= 4)
          return v5;
      }
      return v8;
    }
    return 1;
  }
  if (a2)
    return *(unsigned __int8 *)(*((_QWORD *)a1 + 1) + 4);
  if ((a3 & 1) == 0 && (sub_20B9EF850((uint64_t)a1) & 1) != 0)
    return 1;
  if (((*(uint64_t (**)(int *))(*(_QWORD *)a1 + 64))(a1) & 0xFE) != 2)
    return *(unsigned __int8 *)(*((_QWORD *)a1 + 1) + 4);
  v4 = *(unsigned __int16 *)(*((_QWORD *)a1 + 1) + 2);
  v5 = 16;
  if (v4 != 3 && v4 != 54)
  {
    if (v4 == 76)
      return 17;
    return *(unsigned __int8 *)(*((_QWORD *)a1 + 1) + 4);
  }
  return v5;
}

uint64_t sub_20B9EFA1C(uint64_t a1, int a2)
{
  int v4;
  _WORD *v5;

  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1) & 0xFE) == 2 && *(_DWORD *)(a1 + 20) != 2)
  {
    v4 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 8) + 2);
    switch(v4)
    {
      case 76:
        v5 = &unk_20BA5F7F8;
        return (unsigned __int16)v5[a2 + 1];
      case 54:
        v5 = &unk_20BA5F7D6;
        return (unsigned __int16)v5[a2 + 1];
      case 3:
        v5 = &unk_20BA5F7B4;
        return (unsigned __int16)v5[a2 + 1];
    }
  }
  return (unsigned __int16)(*(_WORD *)(*(_QWORD *)(a1 + 8) + 5) + a2);
}

uint64_t sub_20B9EFABC(uint64_t a1, unsigned int a2)
{
  int v4;
  uint64_t result;
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v10;
  unsigned int v11;

  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1) & 0xFE) == 2
    && *(_DWORD *)(a1 + 20) != 2
    && ((v4 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 8) + 2), v4 == 3) || v4 == 76 || v4 == 54))
  {
    result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 48))(a1, 0, 0);
    if ((_DWORD)result)
    {
      v6 = result;
      v7 = 0;
      do
      {
        v8 = (*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 56))(a1, (unsigned __int16)v7) == a2;
        result = v8;
        ++v7;
      }
      while (!v8 && v7 < v6);
    }
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 8);
    v11 = *(unsigned __int16 *)(v10 + 5);
    return v11 <= a2 && *(unsigned __int8 *)(v10 + 4) + v11 > a2;
  }
  return result;
}

uint64_t sub_20B9EFBA0(uint64_t a1, int a2)
{
  uint64_t v2;
  unsigned int v3;
  int v6;
  const __CFString *v7;
  const __CFString *v8;
  CFIndex Length;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(unsigned __int8 *)(v2 + 4);
  if (!*(_BYTE *)(v2 + 4))
    return 0;
  v6 = 0;
  while (1)
  {
    v7 = (const __CFString *)sub_20B9E08C0((unsigned __int16)(*(_WORD *)(*(_QWORD *)(a1 + 8) + 5) + v6), *(_DWORD *)(a1 + 20));
    if (v7)
    {
      v8 = v7;
      Length = CFStringGetLength(v7);
      if (CFStringGetCharacterAtIndex(v8, Length - 1) == a2)
        break;
    }
    if (++v6 >= v3)
      return 0;
  }
  return 1;
}

_QWORD *sub_20B9EFC30(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24C467BB8;
  v2 = (uint64_t)(a1 + 4);
  sub_20B84055C((uint64_t)(a1 + 9));
  sub_20B84055C(v2);
  return a1;
}

void sub_20B9EFC70(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_24C467BB8;
  v1 = (uint64_t)(a1 + 4);
  sub_20B84055C((uint64_t)(a1 + 9));
  sub_20B84055C(v1);
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B9EFCC0(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24C467BB8;
  v2 = (uint64_t)(a1 + 4);
  sub_20B84055C((uint64_t)(a1 + 9));
  sub_20B84055C(v2);
  return a1;
}

void sub_20B9EFD00(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_24C467BB8;
  v1 = (uint64_t)(a1 + 4);
  sub_20B84055C((uint64_t)(a1 + 9));
  sub_20B84055C(v1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B9EFD50(uint64_t a1, __int16 a2)
{
  unsigned __int16 v3;
  const __CFString *v4;
  const __CFString *v5;
  CFIndex Length;

  v3 = *(_WORD *)(*(_QWORD *)(a1 + 8) + 5) + a2;
  v4 = (const __CFString *)sub_20B9E08C0(v3, *(_DWORD *)(a1 + 20));
  if (!v4)
    return (unsigned __int16)-1;
  v5 = v4;
  Length = CFStringGetLength(v4);
  if (CFStringGetCharacterAtIndex(v5, Length - 1) != *(unsigned __int16 *)(a1 + 112))
    return (unsigned __int16)-1;
  return v3;
}

CFStringRef sub_20B9EFDB8(uint64_t a1)
{
  uint64_t v2;
  const __CFAllocator *v3;
  CFStringRef v4;
  CFStringRef v5;

  v2 = sub_20B9E08C0(*(unsigned __int16 *)(*(_QWORD *)(a1 + 8) + 2), *(_DWORD *)(a1 + 20));
  v3 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v4 = CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x24BDBD240], (const UniChar *)(a1 + 112), 1);
  v5 = CFStringCreateWithFormat(v3, 0, CFSTR("%@%@"), v2, v4);
  CFRelease(v4);
  return v5;
}

_QWORD *sub_20B9EFE40(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24C467BB8;
  v2 = (uint64_t)(a1 + 4);
  sub_20B84055C((uint64_t)(a1 + 9));
  sub_20B84055C(v2);
  return a1;
}

void sub_20B9EFE80(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_24C467BB8;
  v1 = (uint64_t)(a1 + 4);
  sub_20B84055C((uint64_t)(a1 + 9));
  sub_20B84055C(v1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B9EFED0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16) + *(unsigned __int8 *)(a1 + 112);
}

_QWORD *sub_20B9EFEE0(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C468748;
  a1[1] = 0;
  if (v2)
    MEMORY[0x20BD39C80](v2, 0x1000C80BDFB0063);
  return a1;
}

void sub_20B9EFF28(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C468748;
  a1[1] = 0;
  if (v2)
    MEMORY[0x20BD39C80](v2, 0x1000C80BDFB0063);
  JUMPOUT(0x20BD39CB0);
}

CFStringRef sub_20B9EFF80(uint64_t a1)
{
  const UniChar *v1;
  CFIndex v2;

  v1 = *(const UniChar **)(a1 + 8);
  if (v1)
    v2 = *(unsigned __int16 *)(a1 + 32);
  else
    v2 = 0;
  return CFStringCreateWithCharacters(0, v1, v2);
}

uint64_t sub_20B9EFF98(uint64_t a1, const __CFString *a2, const void *a3, unsigned int a4)
{
  __int16 v4;
  uint64_t v8;
  size_t v9;
  void *v10;
  CFIndex Length;
  CFRange v12;
  UniChar *v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;

  v4 = a4;
  *(_QWORD *)a1 = &off_24C468748;
  v8 = a4;
  v9 = 2 * a4;
  v10 = (void *)operator new[]();
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = v10;
  *(_WORD *)(a1 + 32) = v4;
  memcpy(v10, a3, v9);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)a1 = &off_24C468E60;
  *(_BYTE *)(a1 + 34) = 1;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  Length = CFStringGetLength(a2);
  sub_20B87CBE0(a1 + 40, Length, 0);
  if (*(char *)(a1 + 63) < 0)
  {
    v13 = *(UniChar **)(a1 + 40);
    v12.length = *(_QWORD *)(a1 + 48);
  }
  else
  {
    v12.length = *(unsigned __int8 *)(a1 + 63);
    v13 = (UniChar *)(a1 + 40);
  }
  v12.location = 0;
  CFStringGetCharacters(a2, v12, v13);
  v14 = *(char *)(a1 + 63);
  v15 = v14 < 0;
  v16 = *(_QWORD *)(a1 + 40);
  if (v14 >= 0)
    v16 = a1 + 40;
  v17 = *(unsigned __int8 *)(a1 + 63);
  if (v15)
    v17 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 64) = v16;
  *(_QWORD *)(a1 + 72) = v17;
  return a1;
}

void sub_20B9F00A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  uint64_t v5;

  if (*(char *)(v1 + 63) < 0)
    operator delete(*v2);
  v5 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)v1 = v3;
  *(_QWORD *)(v1 + 8) = 0;
  if (v5)
    MEMORY[0x20BD39C80](v5, 0x1000C80BDFB0063);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B9F00E4(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C468E60;
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = &off_24C468748;
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    MEMORY[0x20BD39C80](v2, 0x1000C80BDFB0063);
  return a1;
}

void sub_20B9F014C(uint64_t a1)
{
  sub_20B9F00E4(a1);
  JUMPOUT(0x20BD39CB0);
}

BOOL sub_20B9F0170(uint64_t a1, CFStringRef theString)
{
  CFIndex Length;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BOOL8 v8;
  uint64_t v9;
  int v10;
  int CharacterAtIndex;

  Length = CFStringGetLength(theString);
  if (*(char *)(a1 + 63) < 0)
    v5 = *(_QWORD *)(a1 + 48);
  else
    v5 = *(unsigned __int8 *)(a1 + 63);
  if (Length != v5)
    return 0;
  v6 = 0;
  do
  {
    if (*(char *)(a1 + 63) < 0)
      v7 = *(_QWORD *)(a1 + 48);
    else
      v7 = *(unsigned __int8 *)(a1 + 63);
    v8 = v6 >= v7;
    if (v6 >= v7)
      break;
    v9 = a1 + 40;
    if ((*(_BYTE *)(a1 + 63) & 0x80) != 0)
      v9 = *(_QWORD *)(a1 + 40);
    v10 = *(unsigned __int16 *)(v9 + 2 * v6);
    CharacterAtIndex = CFStringGetCharacterAtIndex(theString, v6++);
  }
  while (v10 == CharacterAtIndex);
  return v8;
}

uint64_t sub_20B9F0224(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16) + (*(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 8) >> 5);
}

uint64_t sub_20B9F0238(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16) + (*(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 8) >> 5);
}

uint64_t sub_20B9F024C()
{
  return 1;
}

uint64_t sub_20B9F0254(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24);
}

float sub_20B9F025C(uint64_t a1)
{
  return *(float *)(a1 + 28);
}

uint64_t sub_20B9F0264()
{
  return 0;
}

uint64_t sub_20B9F026C(uint64_t a1)
{
  return (*(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 8) >> 1) & 1;
}

uint64_t sub_20B9F027C(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  sub_20B9EF5A8(v2, a1);
  return v2;
}

void sub_20B9F02C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10A1C4091E0A834);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9F02E4(uint64_t a1)
{
  return (unsigned __int16)(*(_WORD *)(a1 + 114) + *(unsigned __int8 *)(a1 + 16));
}

uint64_t sub_20B9F02F8()
{
  return 2;
}

uint64_t sub_20B9F0300(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  sub_20B9EF5A8(v2, a1);
  *(_QWORD *)v2 = &off_24C4680A8;
  *(_WORD *)(v2 + 112) = *(_WORD *)(a1 + 112);
  return v2;
}

void sub_20B9F0358(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10A1C40AE63DD0CLL);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9F037C(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 112);
}

uint64_t sub_20B9F0384()
{
  return 4;
}

uint64_t sub_20B9F038C(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  sub_20B9EF5A8(v2, a1);
  *(_QWORD *)v2 = &off_24C4688D8;
  *(_WORD *)(v2 + 112) = *(_WORD *)(a1 + 112);
  *(_OWORD *)(v2 + 120) = *(_OWORD *)(a1 + 120);
  *(_BYTE *)(v2 + 136) = *(_BYTE *)(a1 + 136);
  return v2;
}

void sub_20B9F03F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10A1C40D3B9E465);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B9F0418(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24C467BB8;
  v2 = (uint64_t)(a1 + 4);
  sub_20B84055C((uint64_t)(a1 + 9));
  sub_20B84055C(v2);
  return a1;
}

void sub_20B9F0458(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_24C467BB8;
  v1 = (uint64_t)(a1 + 4);
  sub_20B84055C((uint64_t)(a1 + 9));
  sub_20B84055C(v1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B9F04A8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16) + (*(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 8) >> 5) + 1;
}

uint64_t sub_20B9F04C0()
{
  return 8;
}

uint64_t sub_20B9F04C8(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  sub_20B9EF5A8(v2, a1);
  *(_QWORD *)v2 = &off_24C468D18;
  *(_WORD *)(v2 + 112) = *(_WORD *)(a1 + 112);
  return v2;
}

void sub_20B9F0520(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10A1C4079B90E53);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9F0544()
{
  return 3;
}

uint64_t sub_20B9F054C(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  sub_20B9EF5A8(v2, a1);
  *(_QWORD *)v2 = &off_24C4686A0;
  *(_BYTE *)(v2 + 112) = *(_BYTE *)(a1 + 112);
  return v2;
}

void sub_20B9F05A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10A1C409A389BB3);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9F05C8()
{
  return 0;
}

uint64_t sub_20B9F05D0(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 32);
}

uint64_t sub_20B9F05D8(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 32);
}

uint64_t sub_20B9F05E0()
{
  return 0;
}

uint64_t sub_20B9F05E8()
{
  return 0;
}

uint64_t sub_20B9F05F0()
{
  return 5;
}

uint64_t sub_20B9F05F8()
{
  return 0;
}

float sub_20B9F0600()
{
  return 1.0;
}

uint64_t sub_20B9F0608()
{
  return 1;
}

uint64_t sub_20B9F0610()
{
  return 1;
}

uint64_t sub_20B9F0618(uint64_t a1)
{
  return a1 + 16;
}

uint64_t sub_20B9F0620(uint64_t a1)
{
  return a1 + 16;
}

uint64_t sub_20B9F0628()
{
  return 6;
}

uint64_t sub_20B9F0630(uint64_t a1)
{
  return a1 + 64;
}

_QWORD *sub_20B9F0638(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24C467BB8;
  v2 = (uint64_t)(a1 + 4);
  sub_20B84055C((uint64_t)(a1 + 9));
  sub_20B84055C(v2);
  return a1;
}

void sub_20B9F0678(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_24C467BB8;
  v1 = (uint64_t)(a1 + 4);
  sub_20B84055C((uint64_t)(a1 + 9));
  sub_20B84055C(v1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B9F06C8(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 112);
}

uint64_t sub_20B9F06D0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 114);
}

_QWORD *sub_20B9F06D8(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C468748;
  a1[1] = 0;
  if (v2)
    MEMORY[0x20BD39C80](v2, 0x1000C80BDFB0063);
  return a1;
}

void sub_20B9F0720(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C468748;
  a1[1] = 0;
  if (v2)
    MEMORY[0x20BD39C80](v2, 0x1000C80BDFB0063);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B9F0778()
{
  return 0;
}

uint64_t sub_20B9F0780()
{
  return 0;
}

uint64_t sub_20B9F0788()
{
  return 7;
}

void sub_20B9F0798(uint64_t a1, _WORD *a2, uint64_t a3, _WORD *a4, uint64_t a5, __int16 a6)
{
  unint64_t v7;
  unsigned __int8 v8;
  void *__p[2];
  unsigned __int8 v10;
  __int16 v11;

  v11 = a6;
  sub_20B9F081C(__p, a2, a3, a4, a5);
  v7 = v10;
  v8 = v10;
  if ((v10 & 0x80u) != 0)
    v7 = (unint64_t)__p[1];
  if (v7)
  {
    sub_20B9F09C0((_QWORD *)(a1 + 16), (uint64_t)__p, &v11);
    v8 = v10;
  }
  if ((v8 & 0x80) != 0)
    operator delete(__p[0]);
}

void sub_20B9F0800(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B9F081C(_BYTE *__dst, _WORD *a2, uint64_t a3, _WORD *a4, uint64_t a5)
{
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  __int16 v20;
  void *__p;
  char *v22;
  unint64_t v23;

  if (a3 && a5)
  {
    __p = 0;
    v22 = 0;
    v23 = 0;
    sub_20B87D570(&__p, a3 + a5 + 1);
    sub_20B8B17F4(a2, &a2[a3], (uint64_t)&__p);
    v10 = v22;
    if ((unint64_t)v22 >= v23)
    {
      v12 = (char *)__p;
      v13 = v22 - (_BYTE *)__p;
      if (v22 - (_BYTE *)__p <= -3)
        sub_20B80CDD8();
      v14 = v13 >> 1;
      if (v23 - (unint64_t)__p <= (v13 >> 1) + 1)
        v15 = v14 + 1;
      else
        v15 = v23 - (_QWORD)__p;
      if (v23 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFFELL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v15;
      if (v16)
      {
        v17 = (char *)sub_20B80FD48((uint64_t)&v23, v16);
        v12 = (char *)__p;
        v10 = v22;
      }
      else
      {
        v17 = 0;
      }
      v18 = &v17[2 * v14];
      v19 = &v17[2 * v16];
      *(_WORD *)v18 = 32;
      v11 = v18 + 2;
      while (v10 != v12)
      {
        v20 = *((_WORD *)v10 - 1);
        v10 -= 2;
        *((_WORD *)v18 - 1) = v20;
        v18 -= 2;
      }
      __p = v18;
      v22 = v11;
      v23 = (unint64_t)v19;
      if (v12)
        operator delete(v12);
    }
    else
    {
      *(_WORD *)v22 = 32;
      v11 = v10 + 2;
    }
    v22 = v11;
    sub_20B8B17F4(a4, &a4[a5], (uint64_t)&__p);
    sub_20B877ED0(__dst, __p, (v22 - (_BYTE *)__p) >> 1);
    if (__p)
    {
      v22 = (char *)__p;
      operator delete(__p);
    }
  }
  else
  {
    sub_20B87C9E0(__dst, byte_20BA93B9E);
  }
}

void sub_20B9F09A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B9F09C0(_QWORD *a1, uint64_t a2, __int16 *a3)
{
  __int16 v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int8x8_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  unint64_t v15;
  void **v16;
  unsigned __int16 *v17;
  unint64_t v18;
  int8x8_t v19;
  unsigned __int16 *v20;
  unint64_t v21;
  uint8x8_t v22;
  _QWORD *v23;
  unsigned __int16 *v24;
  unsigned __int16 *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  void *__p[2];
  uint64_t v32;
  __int16 v33;
  __int128 *v34;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_20B88DD4C(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v32 = *(_QWORD *)(a2 + 16);
  }
  v6 = *a3;
  v33 = v6;
  v7 = operator new(0x30uLL);
  v7[1] = *(_OWORD *)__p;
  *((_QWORD *)v7 + 4) = v32;
  __p[1] = 0;
  v32 = 0;
  __p[0] = 0;
  *((_WORD *)v7 + 20) = v6;
  v8 = a1[1];
  *(_QWORD *)(v8 + 8) = v7;
  a1[1] = v7;
  *(_QWORD *)v7 = v8;
  *((_QWORD *)v7 + 1) = a1 + 1;
  ++a1[3];
  v34 = (__int128 *)a2;
  *((_QWORD *)sub_20B9F122C((uint64_t)(a1 + 4), (unsigned __int16 *)a2, &v34) + 5) = v7;
  if (SHIBYTE(v32) < 0)
    operator delete(__p[0]);
  if (a1[3] <= *a1)
    return;
  v9 = a1[2];
  v10 = sub_20B89ACFC((uint64_t)(a1 + 7), v9 + 16);
  v11 = (int8x8_t)a1[5];
  if (!*(_QWORD *)&v11)
    goto LABEL_53;
  v12 = v10;
  v13 = (uint8x8_t)vcnt_s8(v11);
  v13.i16[0] = vaddlv_u8(v13);
  v14 = v13.u32[0];
  if (v13.u32[0] > 1uLL)
  {
    v15 = v10;
    if (v10 >= *(_QWORD *)&v11)
      v15 = v10 % *(_QWORD *)&v11;
  }
  else
  {
    v15 = (*(_QWORD *)&v11 - 1) & v10;
  }
  v16 = *(void ***)(a1[4] + 8 * v15);
  if (!v16)
    goto LABEL_53;
  v17 = (unsigned __int16 *)*v16;
  if (!*v16)
    goto LABEL_53;
  while (1)
  {
    v18 = *((_QWORD *)v17 + 1);
    if (v18 == v12)
      break;
    if (v14 > 1)
    {
      if (v18 >= *(_QWORD *)&v11)
        v18 %= *(_QWORD *)&v11;
    }
    else
    {
      v18 &= *(_QWORD *)&v11 - 1;
    }
    if (v18 != v15)
      goto LABEL_53;
LABEL_22:
    v17 = *(unsigned __int16 **)v17;
    if (!v17)
      goto LABEL_53;
  }
  if (!sub_20B89AD3C((uint64_t)(a1 + 8), v17 + 8, (unsigned __int16 *)(v9 + 16)))
    goto LABEL_22;
  v19 = (int8x8_t)a1[5];
  v20 = *(unsigned __int16 **)v17;
  v21 = *((_QWORD *)v17 + 1);
  v22 = (uint8x8_t)vcnt_s8(v19);
  v22.i16[0] = vaddlv_u8(v22);
  if (v22.u32[0] > 1uLL)
  {
    v23 = a1 + 4;
    if (v21 >= *(_QWORD *)&v19)
      v21 %= *(_QWORD *)&v19;
  }
  else
  {
    v21 &= *(_QWORD *)&v19 - 1;
    v23 = a1 + 4;
  }
  v24 = *(unsigned __int16 **)(*v23 + 8 * v21);
  do
  {
    v25 = v24;
    v24 = *(unsigned __int16 **)v24;
  }
  while (v24 != v17);
  if (v25 == (unsigned __int16 *)(a1 + 6))
    goto LABEL_41;
  v26 = *((_QWORD *)v25 + 1);
  if (v22.u32[0] > 1uLL)
  {
    if (v26 >= *(_QWORD *)&v19)
      v26 %= *(_QWORD *)&v19;
  }
  else
  {
    v26 &= *(_QWORD *)&v19 - 1;
  }
  if (v26 == v21)
  {
LABEL_43:
    if (v20)
    {
      v27 = *((_QWORD *)v20 + 1);
      goto LABEL_45;
    }
    v29 = a1 + 7;
  }
  else
  {
LABEL_41:
    if (!v20)
      goto LABEL_42;
    v27 = *((_QWORD *)v20 + 1);
    if (v22.u32[0] > 1uLL)
    {
      v28 = *((_QWORD *)v20 + 1);
      if (v27 >= *(_QWORD *)&v19)
        v28 = v27 % *(_QWORD *)&v19;
    }
    else
    {
      v28 = v27 & (*(_QWORD *)&v19 - 1);
    }
    if (v28 != v21)
    {
LABEL_42:
      *(_QWORD *)(*v23 + 8 * v21) = 0;
      v20 = *(unsigned __int16 **)v17;
      goto LABEL_43;
    }
LABEL_45:
    if (v22.u32[0] > 1uLL)
    {
      if (v27 >= *(_QWORD *)&v19)
        v27 %= *(_QWORD *)&v19;
    }
    else
    {
      v27 &= *(_QWORD *)&v19 - 1;
    }
    v29 = a1 + 7;
    if (v27 != v21)
    {
      *(_QWORD *)(*v23 + 8 * v27) = v25;
      v20 = *(unsigned __int16 **)v17;
    }
  }
  *(_QWORD *)v25 = v20;
  *(_QWORD *)v17 = 0;
  --*v29;
  sub_20B89ADC0(1, (void **)v17);
LABEL_53:
  v30 = *(_QWORD **)v9;
  v30[1] = *(_QWORD *)(v9 + 8);
  **(_QWORD **)(v9 + 8) = v30;
  --a1[3];
  sub_20B8CD994((_DWORD)a1 + 8, (void **)v9);
}

void sub_20B9F0D04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B9F0D20(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  sub_20B9F1150((_QWORD *)(a1 + 24));
  if (*(_QWORD *)(a1 + 72))
  {
    sub_20B8CDA18(a1 + 48, *(void ***)(a1 + 64));
    *(_QWORD *)(a1 + 64) = 0;
    v2 = *(_QWORD *)(a1 + 56);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 72) = 0;
  }
}

uint64_t sub_20B9F0D84(uint64_t a1, _WORD *a2, uint64_t a3, _WORD *a4, uint64_t a5)
{
  unint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  int8x8_t v12;
  unint64_t v13;
  uint8x8_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned __int16 **v18;
  unsigned __int16 *v19;
  unint64_t v20;
  uint64_t v21;
  char *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _BYTE *v29;
  __int128 v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD v33[5];
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  __int16 v37;
  void *__p[2];
  unsigned __int8 v39;
  _QWORD v40[2];
  _QWORD v41[2];
  void **v42;

  v41[0] = a2;
  v41[1] = a3;
  v40[0] = a4;
  v40[1] = a5;
  sub_20B9F081C(__p, a2, a3, a4, a5);
  v6 = v39;
  if ((v39 & 0x80u) != 0)
    v6 = (unint64_t)__p[1];
  if (!v6)
  {
    v17 = 0;
    if ((v39 & 0x80) != 0)
      goto LABEL_27;
    return v17;
  }
  v7 = **(_DWORD **)(a1 + 88);
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 224))(*(_QWORD *)(a1 + 8));
  v9 = sub_20B969844(v7, v8);
  if (*(_BYTE *)sub_20B896F94())
    v10 = v9;
  else
    v10 = v9 & 0xFFFFEFFF;
  v34 = 0;
  v35 = &v34;
  v36 = 0x2000000000;
  v37 = 0;
  v11 = sub_20B89ACFC(a1 + 72, (uint64_t)__p);
  v12 = *(int8x8_t *)(a1 + 56);
  if (!*(_QWORD *)&v12)
    goto LABEL_25;
  v13 = v11;
  v14 = (uint8x8_t)vcnt_s8(v12);
  v14.i16[0] = vaddlv_u8(v14);
  v15 = v14.u32[0];
  if (v14.u32[0] > 1uLL)
  {
    v16 = v11;
    if (v11 >= *(_QWORD *)&v12)
      v16 = v11 % *(_QWORD *)&v12;
  }
  else
  {
    v16 = (*(_QWORD *)&v12 - 1) & v11;
  }
  v32 = a1 + 48;
  v18 = *(unsigned __int16 ***)(*(_QWORD *)(a1 + 48) + 8 * v16);
  if (!v18 || (v19 = *v18) == 0)
  {
LABEL_25:
    *((_WORD *)v35 + 12) = 0;
    v21 = *(_QWORD *)(a1 + 8);
    v33[0] = MEMORY[0x24BDAC760];
    v33[1] = 0x40000000;
    v33[2] = sub_20B9F10B4;
    v33[3] = &unk_24C46C7B8;
    v33[4] = &v34;
    sub_20BA20C80(v21, v41, (uint64_t)v40, v10, (uint64_t)v33);
    sub_20B9F09C0((_QWORD *)(a1 + 16), (uint64_t)__p, (__int16 *)v35 + 12);
    v17 = *((unsigned __int16 *)v35 + 12);
    goto LABEL_26;
  }
  while (1)
  {
    v20 = *((_QWORD *)v19 + 1);
    if (v13 == v20)
      break;
    if (v15 > 1)
    {
      if (v20 >= *(_QWORD *)&v12)
        v20 %= *(_QWORD *)&v12;
    }
    else
    {
      v20 &= *(_QWORD *)&v12 - 1;
    }
    if (v20 != v16)
      goto LABEL_25;
LABEL_24:
    v19 = *(unsigned __int16 **)v19;
    if (!v19)
      goto LABEL_25;
  }
  if (!sub_20B89AD3C(a1 + 80, v19 + 8, (unsigned __int16 *)__p))
    goto LABEL_24;
  v42 = __p;
  v23 = sub_20B9F122C(v32, (unsigned __int16 *)__p, (__int128 **)&v42);
  v24 = *((_QWORD *)v23 + 5);
  v27 = *(_QWORD *)(a1 + 24);
  v25 = (uint64_t *)(a1 + 24);
  v26 = v27;
  if (v27 == v24)
  {
    v28 = (char *)*((_QWORD *)v23 + 5);
  }
  else
  {
    v28 = (char *)operator new(0x30uLL);
    v29 = v28 + 16;
    *(_QWORD *)v28 = 0;
    *((_QWORD *)v28 + 1) = 0;
    if (*(char *)(v24 + 39) < 0)
    {
      sub_20B88DD4C(v29, *(void **)(v24 + 16), *(_QWORD *)(v24 + 24));
      v26 = *v25;
    }
    else
    {
      v30 = *(_OWORD *)(v24 + 16);
      *((_QWORD *)v28 + 4) = *(_QWORD *)(v24 + 32);
      *(_OWORD *)v29 = v30;
    }
    *((_WORD *)v28 + 20) = *(_WORD *)(v24 + 40);
    *(_QWORD *)(v26 + 8) = v28;
    *v25 = (uint64_t)v28;
    *(_QWORD *)v28 = v26;
    *((_QWORD *)v28 + 1) = v25;
    v31 = *(_QWORD **)v24;
    v31[1] = *(_QWORD *)(v24 + 8);
    **(_QWORD **)(v24 + 8) = v31;
    sub_20B8CD994((int)v25, (void **)v24);
    v42 = __p;
    *((_QWORD *)sub_20B9F122C(v32, (unsigned __int16 *)__p, (__int128 **)&v42) + 5) = v28;
  }
  v17 = *((unsigned __int16 *)v28 + 20);
  *((_WORD *)v35 + 12) = v17;
LABEL_26:
  _Block_object_dispose(&v34, 8);
  if ((v39 & 0x80) != 0)
LABEL_27:
    operator delete(__p[0]);
  return v17;
}

void sub_20B9F1074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;

  operator delete(v24);
  _Block_object_dispose(&a15, 8);
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9F10B4(uint64_t result, uint64_t a2)
{
  *(_WORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) |= *(_WORD *)(a2 + 104);
  return result;
}

_QWORD *sub_20B9F10D0(_QWORD *a1)
{
  *a1 = &off_24C4622E0;
  sub_20B8CECB0((uint64_t)(a1 + 6));
  sub_20B9F1150(a1 + 3);
  return a1;
}

void sub_20B9F1108(_QWORD *a1)
{
  *a1 = &off_24C4622E0;
  sub_20B8CECB0((uint64_t)(a1 + 6));
  sub_20B9F1150(a1 + 3);
  JUMPOUT(0x20BD39CB0);
}

void sub_20B9F1150(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  if (a1[2])
  {
    v3 = *a1;
    v2 = a1[1];
    v4 = *(_QWORD **)v2;
    v4[1] = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v3 + 8) = v4;
    a1[2] = 0;
    while ((_QWORD *)v2 != a1)
    {
      v5 = *(_QWORD *)(v2 + 8);
      sub_20B8CD994((int)a1, (void **)v2);
      v2 = v5;
    }
  }
}

uint64_t sub_20B9F11B0(uint64_t a1, unint64_t a2)
{
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a1 + 8;
  *(_QWORD *)(a1 + 16) = a1 + 8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 1065353216;
  sub_20B828960(a1 + 32, (unint64_t)(float)a2);
  return a1;
}

void sub_20B9F1210(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  sub_20B8CECB0(v2);
  sub_20B9F1150(v1);
  _Unwind_Resume(a1);
}

char *sub_20B9F122C(uint64_t a1, unsigned __int16 *a2, __int128 **a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  void **v13;
  char *v14;
  unint64_t v15;
  __int128 *v16;
  _BYTE *v17;
  __int128 v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;

  v7 = (_QWORD *)(a1 + 24);
  v8 = sub_20B89ACFC(a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = (char *)*v13;
      if (*v13)
      {
        do
        {
          v15 = *((_QWORD *)v14 + 1);
          if (v15 == v9)
          {
            if (sub_20B89AD3C(a1 + 32, (unsigned __int16 *)v14 + 8, a2))
              return v14;
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10)
                v15 %= v10;
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v3)
              break;
          }
          v14 = *(char **)v14;
        }
        while (v14);
      }
    }
  }
  v16 = *a3;
  v14 = (char *)operator new(0x30uLL);
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v9;
  v17 = v14 + 16;
  if (*((char *)v16 + 23) < 0)
  {
    sub_20B88DD4C(v17, *(void **)v16, *((_QWORD *)v16 + 1));
  }
  else
  {
    v18 = *v16;
    *((_QWORD *)v14 + 4) = *((_QWORD *)v16 + 2);
    *(_OWORD *)v17 = v18;
  }
  *((_QWORD *)v14 + 5) = 0;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v10 || (float)(v20 * (float)v10) < v19)
  {
    v21 = 1;
    if (v10 >= 3)
      v21 = (v10 & (v10 - 1)) != 0;
    v22 = v21 | (2 * v10);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    sub_20B828960(a1, v24);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v26)
  {
    *(_QWORD *)v14 = *v26;
LABEL_41:
    *v26 = v14;
    goto LABEL_42;
  }
  *(_QWORD *)v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v25 + 8 * v3) = a1 + 16;
  if (*(_QWORD *)v14)
  {
    v27 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v27 >= v10)
        v27 %= v10;
    }
    else
    {
      v27 &= v10 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_41;
  }
LABEL_42:
  ++*v7;
  return v14;
}

void sub_20B9F1484(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9F14AC(uint64_t a1, char *__s)
{
  uint64_t **v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *exception;
  __int128 v22;

  *(_OWORD *)(a1 + 16) = 0u;
  v4 = (uint64_t **)(a1 + 16);
  *(_BYTE *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  sub_20B90CFC0(__s, (uint64_t)"r", 1, &v22);
  sub_20B82E770((uint64_t)v4, &v22);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
  if (*((_QWORD *)&v22 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = **v4;
  if (*(_WORD *)v8 != 1)
  {
    v14 = sub_20B9547EC();
    sub_20B954DEC((uint64_t)v14, "Syllable trie file %s is incompatible (version %d, expected version %d)", v15, v16, v17, v18, v19, v20, (char)__s);
    exception = __cxa_allocate_exception(0x20uLL);
    sub_20B80BBD0(&v22, __s);
    sub_20B90D9E4((uint64_t)exception, 6);
    __cxa_throw(exception, (struct type_info *)&unk_24C45B6B8, (void (*)(void *))sub_20B90D9A4);
  }
  *(_WORD *)(a1 + 32) = *(_WORD *)(v8 + 4);
  *(_QWORD *)(a1 + 8) = v8 + *(unsigned int *)(v8 + 8);
  v9 = *(unsigned int *)(v8 + 12);
  v10 = *(unsigned __int16 *)(v8 + 2);
  *(_QWORD *)a1 = operator new[]();
  *(_QWORD *)(a1 + 40) = v10;
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = v8 + v9;
    do
    {
      *(_QWORD *)(*(_QWORD *)a1 + v11) = v12;
      v11 += 8;
      v12 += 10;
    }
    while (8 * v10 != v11);
  }
  return a1;
}

void sub_20B9F1634(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  __break(1u);
}

void sub_20B9F16CC()
{
  __cxa_end_catch();
  JUMPOUT(0x20B9F16D4);
}

uint64_t *sub_20B9F16E8(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (v2)
    MEMORY[0x20BD39C80](v2, 0x20C8093837F09);
  sub_20B811FE4((uint64_t)(a1 + 2));
  return a1;
}

unsigned __int16 *sub_20B9F172C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unsigned __int16 *v6;
  int v7;
  unsigned __int16 *v8;
  int v9;
  int v10;

  v4 = a4 - a3;
  if (a4 > a3)
  {
    v6 = **(unsigned __int16 ***)a1;
    v7 = *(char *)(a1 + 32);
    v8 = (unsigned __int16 *)(a2 + 2 * a3);
    while (1)
    {
      v10 = *v8++;
      v9 = v10;
      if (v10 < v7 || v9 > *(char *)(a1 + 33))
        break;
      v6 = sub_20B9F17AC(a1, v6, (char)v9);
      if (v6)
      {
        if (--v4)
          continue;
      }
      return v6;
    }
  }
  return 0;
}

unsigned __int16 *sub_20B9F17AC(uint64_t a1, unsigned __int16 *a2, int a3)
{
  unsigned __int16 **v3;
  unsigned __int8 v4;
  unsigned __int16 v5;
  unint64_t v6;

  if (!a2 || *(char *)(a1 + 32) > a3 || *(char *)(a1 + 33) < a3)
    return 0;
  v3 = *(unsigned __int16 ***)a1;
  if (**(unsigned __int16 ***)a1 == a2)
  {
    v5 = *(_WORD *)(*(_QWORD *)(a1 + 8) + 2 * (a3 - (uint64_t)*(char *)(a1 + 32)));
  }
  else
  {
    v4 = 0;
    v5 = -1;
    while (*((unsigned __int8 *)a2 + 7) > v4)
    {
      v6 = *a2 + v4;
      if (*(_QWORD *)(a1 + 40) <= v6)
        break;
      if (*((unsigned __int8 *)v3[v6] + 9) == a3)
        v5 = *a2 + v4;
      if (*((char *)v3[v6] + 9) >= a3)
        break;
      ++v4;
    }
  }
  if (v5 == 0xFFFF)
    return 0;
  else
    return v3[v5];
}

unsigned __int16 *sub_20B9F1858(unsigned __int16 ***a1, unsigned int a2, int a3)
{
  unsigned __int16 *v5;
  char v6;
  char **v7;
  unint64_t v8;
  char v9;
  char **v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  __int16 v15;
  char v16;

  v5 = **a1;
  if (a3 == 2)
  {
    v9 = 0;
    v10 = &off_24C4A2768;
  }
  else
  {
    if (a3 == 1)
    {
      v6 = 0;
      v7 = (char **)(&off_24C4A65A8 + 2 * a2);
      v8 = 2 * (_QWORD)v7[1];
      v9 = 1;
      goto LABEL_7;
    }
    v9 = 0;
    v10 = &off_24C4A0588;
  }
  v7 = &v10[2 * a2];
  v8 = (unint64_t)v7[1];
  v6 = 1;
LABEL_7:
  v11 = v8 >> v9;
  if (v8 >> v9)
  {
    v12 = 0;
    v13 = *v7;
    do
    {
      v14 = v12 << v9;
      if ((v6 & 1) != 0)
        v15 = v13[v14];
      else
        v15 = *(_WORD *)&v13[v14];
      if (a3 == 1)
      {
        v16 = 49;
        switch(v15)
        {
          case 711:
            v16 = 51;
            break;
          case 713:
            break;
          case 714:
            v16 = 50;
            break;
          case 715:
            v16 = 52;
            break;
          default:
            v16 = v15 + 49;
            break;
        }
      }
      else
      {
        v16 = v15;
      }
      v5 = sub_20B9F17AC((uint64_t)a1, v5, v16);
      if (!v5)
        break;
      ++v12;
    }
    while (v11 != v12);
  }
  return v5;
}

uint64_t sub_20B9F19A8(unsigned __int16 ***a1, __int16 *a2, uint64_t a3, int a4)
{
  unsigned __int16 *v5;
  uint64_t v8;
  int v9;
  __int16 v10;
  unsigned __int16 *v11;

  v5 = **a1;
  if (!a3)
    return v5[1];
  v8 = 2 * a3;
  while (1)
  {
    v9 = (unsigned __int16)*a2;
    if (a4 == 1)
    {
      LOBYTE(v10) = 49;
      switch(*a2)
      {
        case 711:
          LOBYTE(v10) = 51;
          break;
        case 712:
          goto LABEL_12;
        case 713:
          break;
        case 714:
          LOBYTE(v10) = 50;
          break;
        case 715:
          LOBYTE(v10) = 52;
          break;
        default:
          if (v9 == 729)
            LOBYTE(v10) = 53;
          else
LABEL_12:
            LOBYTE(v10) = v9 + 49;
          break;
      }
    }
    else
    {
      v10 = *a2;
    }
    v11 = sub_20B9F17AC((uint64_t)a1, v5, (char)v10);
    if (!v11)
      return 0xFFFFLL;
    v5 = v11;
    ++a2;
    v8 -= 2;
    if (!v8)
      return v5[1];
  }
}

uint64_t sub_20B9F1A84(int a1)
{
  switch(a1)
  {
    case 5:
      return sub_20B9F1BD0();
    case 2:
      return sub_20B9F1B40();
    case 1:
      return sub_20B9F1AB0();
  }
  return 0;
}

uint64_t sub_20B9F1AB0()
{
  unsigned __int8 v0;
  _QWORD *v2;

  v0 = atomic_load((unsigned __int8 *)&qword_254729970);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254729970))
  {
    v2 = (_QWORD *)operator new();
    *v2 = &off_24C4691A0;
    qword_254729968 = (uint64_t)v2;
    __cxa_guard_release(&qword_254729970);
  }
  return qword_254729968;
}

void sub_20B9F1B28(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254729970);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9F1B40()
{
  unsigned __int8 v0;
  _QWORD *v2;

  v0 = atomic_load((unsigned __int8 *)&qword_254729980);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254729980))
  {
    v2 = (_QWORD *)operator new();
    *v2 = &off_24C469300;
    qword_254729978 = (uint64_t)v2;
    __cxa_guard_release(&qword_254729980);
  }
  return qword_254729978;
}

void sub_20B9F1BB8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254729980);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9F1BD0()
{
  unsigned __int8 v0;
  _QWORD *v2;

  v0 = atomic_load((unsigned __int8 *)&qword_254729990);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254729990))
  {
    v2 = (_QWORD *)operator new();
    *v2 = &off_24C469330;
    qword_254729988 = (uint64_t)v2;
    __cxa_guard_release(&qword_254729990);
  }
  return qword_254729988;
}

void sub_20B9F1C48(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254729990);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9F1C60(uint64_t a1, _WORD *a2)
{
  uint64_t result;
  int v3;
  unsigned __int16 *v4;
  int v5;

  if (!a2)
    return *sub_20B947CC4();
  result = (uint64_t)a2;
  v3 = (unsigned __int16)*a2;
  if (*a2)
  {
    v4 = a2 + 1;
    do
    {
      if (v3 == 44)
        result = (uint64_t)v4;
      v5 = *v4++;
      v3 = v5;
    }
    while (v5);
  }
  return result;
}

uint64_t sub_20B9F1CC4(uint64_t a1, _WORD *a2)
{
  uint64_t result;
  int v3;
  _WORD *v4;
  int v5;

  if (!a2)
    return *sub_20B947CC4();
  result = (uint64_t)a2;
  v3 = (unsigned __int16)*a2;
  if (*a2)
  {
    v4 = a2;
    do
    {
      if (v3 == 44)
        break;
      v5 = (unsigned __int16)v4[1];
      ++v4;
      v3 = v5;
    }
    while (v5);
  }
  return result;
}

__int16 *sub_20B9F1D18(uint64_t a1, __int16 *a2, int a3)
{
  __int16 v3;
  __int16 *result;
  int v5;
  __int16 *v6;
  __int16 v7;
  uint64_t v8;

  if (!a2)
    return (__int16 *)*sub_20B947CC4();
  v3 = *a2;
  if (!*a2)
    return (__int16 *)*sub_20B947CC4();
  if (a3)
    result = a2;
  else
    result = 0;
  v5 = a3 ^ 1;
  v6 = a2 + 1;
  while (v3 != 44)
  {
LABEL_10:
    v7 = *v6++;
    v3 = v7;
    ++a2;
    if (!v7)
      return (__int16 *)*sub_20B947CC4();
  }
  if (v5)
  {
    v5 = 0;
    result = v6;
    goto LABEL_10;
  }
  v8 = result ? a2 - result : 0;
  if (!v8 || v8 == 1 && *result == 42)
    return (__int16 *)*sub_20B947CC4();
  return result;
}

uint64_t sub_20B9F1DB8(uint64_t a1, _WORD *a2, int a3)
{
  uint64_t result;
  int v4;
  _BOOL4 v5;
  unsigned __int16 *v6;
  int v7;

  if (!a2)
    return *sub_20B947CC4();
  if (a3 == 1)
    result = (uint64_t)a2;
  else
    result = 0;
  v4 = (unsigned __int16)*a2;
  if (*a2)
  {
    v5 = a3 != 1;
    v6 = a2 + 1;
    do
    {
      if (v4 == 44)
      {
        if (!v5)
          return result;
        v5 = 0;
        result = (uint64_t)v6;
      }
      v7 = *v6++;
      v4 = v7;
    }
    while (v7);
  }
  return result;
}

__int16 *sub_20B9F1E2C(uint64_t a1, __int16 *a2, int a3)
{
  __int16 v3;
  __int16 *result;
  int v5;
  __int16 *v6;
  __int16 v7;
  uint64_t v8;

  if (!a2)
    return (__int16 *)*sub_20B947CC4();
  v3 = *a2;
  if (!*a2)
    return (__int16 *)*sub_20B947CC4();
  if (a3)
    result = a2;
  else
    result = 0;
  if (a3)
    v5 = 0;
  else
    v5 = 2;
  v6 = a2 + 1;
  while (v3 != 44)
  {
LABEL_13:
    v7 = *v6++;
    v3 = v7;
    ++a2;
    if (!v7)
      return (__int16 *)*sub_20B947CC4();
  }
  if (v5)
  {
    --v5;
    result = v6;
    goto LABEL_13;
  }
  v8 = result ? a2 - result : 0;
  if (!v8 || v8 == 1 && *result == 42)
    return (__int16 *)*sub_20B947CC4();
  return result;
}

uint64_t sub_20B9F1ED0(uint64_t a1, _WORD *a2)
{
  uint64_t result;
  int v3;
  _WORD *v4;
  int v5;

  if (!a2)
    return *sub_20B947CC4();
  result = (uint64_t)a2;
  v3 = (unsigned __int16)*a2;
  if (*a2)
  {
    v4 = a2;
    do
    {
      if (v3 == 44)
        break;
      v5 = (unsigned __int16)v4[1];
      ++v4;
      v3 = v5;
    }
    while (v5);
  }
  return result;
}

__int16 *sub_20B9F1F24(uint64_t a1, __int16 *a2, int a3)
{
  __int16 v3;
  __int16 *result;
  int v5;
  __int16 *v6;
  __int16 v7;
  uint64_t v8;

  if (!a2)
    return (__int16 *)*sub_20B947CC4();
  v3 = *a2;
  if (!*a2)
    return (__int16 *)*sub_20B947CC4();
  if (a3)
    result = a2;
  else
    result = 0;
  v5 = a3 ^ 1;
  v6 = a2 + 1;
  while (v3 != 44)
  {
LABEL_10:
    v7 = *v6++;
    v3 = v7;
    ++a2;
    if (!v7)
      return (__int16 *)*sub_20B947CC4();
  }
  if (v5)
  {
    v5 = 0;
    result = v6;
    goto LABEL_10;
  }
  v8 = result ? a2 - result : 0;
  if (!v8 || v8 == 1 && *result == 42)
    return (__int16 *)*sub_20B947CC4();
  return result;
}

void sub_20B9F1FC8()
{
  JUMPOUT(0x20BD39CB0);
}

void sub_20B9F1FE0()
{
  JUMPOUT(0x20BD39CB0);
}

void sub_20B9F1FF8()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B9F200C(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_20B9F2084(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20B9F2068(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_20B9F2084(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    sub_20B9F20C4();
  result = (char *)sub_20B800BE8((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void sub_20B9F20C4()
{
  sub_20B80AD80("vector");
}

uint64_t sub_20B9F20D8(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;

  *(_OWORD *)(a1 + 8) = 0u;
  v3 = (uint64_t *)(a1 + 8);
  *(_QWORD *)a1 = a2;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 72) = 256;
  sub_20B95515C(a1 + 32);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 128) = 256;
  sub_20B95515C(a1 + 88);
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  v4 = operator new();
  v5 = operator new();
  *(_DWORD *)(v5 + 8) = 1;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_QWORD *)v5 = &unk_24C467FA8;
  v6 = operator new(4uLL);
  *v6 = 1;
  *(_QWORD *)(v5 + 32) = v6 + 1;
  *(_QWORD *)(v5 + 40) = v6 + 1;
  *(_QWORD *)(v5 + 24) = v6;
  v7 = operator new();
  *(_QWORD *)(v7 + 80) = 0;
  *(_QWORD *)(v7 + 88) = 0;
  *(_QWORD *)v4 = v5;
  *(_QWORD *)(v4 + 8) = v7;
  *(_BYTE *)(v4 + 16) = 1;
  *v3 = v4;
  v8 = operator new();
  v9 = operator new();
  *(_DWORD *)(v9 + 8) = 2;
  *(_OWORD *)(v9 + 16) = 0u;
  *(_OWORD *)(v9 + 32) = 0u;
  *(_QWORD *)v9 = &unk_24C467FA8;
  v10 = operator new(4uLL);
  *v10 = 2;
  *(_QWORD *)(v9 + 32) = v10 + 1;
  *(_QWORD *)(v9 + 40) = v10 + 1;
  *(_QWORD *)(v9 + 24) = v10;
  v11 = operator new();
  *(_QWORD *)(v11 + 80) = 0;
  *(_QWORD *)(v11 + 88) = 0;
  *(_QWORD *)v8 = v9;
  *(_QWORD *)(v8 + 8) = v11;
  *(_BYTE *)(v8 + 16) = 1;
  *(_QWORD *)(a1 + 16) = v8;
  v12 = operator new();
  v13 = operator new();
  *(_DWORD *)(v13 + 8) = 3;
  *(_OWORD *)(v13 + 16) = 0u;
  *(_OWORD *)(v13 + 32) = 0u;
  *(_QWORD *)v13 = &unk_24C467FA8;
  v14 = operator new(4uLL);
  *v14 = 2;
  *(_QWORD *)(v13 + 32) = v14 + 1;
  *(_QWORD *)(v13 + 40) = v14 + 1;
  *(_QWORD *)(v13 + 24) = v14;
  v15 = operator new();
  *(_QWORD *)(v15 + 80) = 0;
  *(_QWORD *)(v15 + 88) = 0;
  *(_QWORD *)v12 = v13;
  *(_QWORD *)(v12 + 8) = v15;
  *(_BYTE *)(v12 + 16) = 1;
  *(_QWORD *)(a1 + 24) = v12;
  sub_20B9F2410((_QWORD *)a1);
  return a1;
}

void sub_20B9F2340(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  _QWORD *v7;
  void *v9;
  void *v10;

  v7 = v4;
  *v7 = off_24C4693E0;
  MEMORY[0x20BD39CB0](v7, 0x10F1C40BAA45842);
  MEMORY[0x20BD39CB0](v5, 0x1020C40A95220FALL);
  v9 = (void *)v2[21];
  if (v9)
  {
    v2[22] = v9;
    operator delete(v9);
  }
  v10 = *v6;
  if (*v6)
  {
    v2[19] = v10;
    operator delete(v10);
  }
  sub_20B958794(v3);
  sub_20B958794(v1);
  _Unwind_Resume(a1);
}

char *sub_20B9F2410(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *result;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _QWORD v18[6];

  v2 = *(_QWORD *)(a1[1] + 8);
  if (v2)
  {
    *(_QWORD *)(v2 + 80) = 0;
    *(_QWORD *)(v2 + 88) = 0;
  }
  v3 = *(_QWORD *)(a1[2] + 8);
  if (v3)
  {
    *(_QWORD *)(v3 + 80) = 0;
    *(_QWORD *)(v3 + 88) = 0;
  }
  v4 = *(_QWORD *)(a1[3] + 8);
  if (v4)
  {
    *(_QWORD *)(v4 + 80) = 0;
    *(_QWORD *)(v4 + 88) = 0;
  }
  v5 = *(_QWORD *)(*a1 + 64);
  if (v5 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5) & 1) == 0)
  {
    v12 = (_QWORD *)a1[1];
    v13 = *(_QWORD *)(*a1 + 64);
    v14 = v13 + 48;
    if (*v12)
    {
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v12 + 80))(*v12, v13 + 48);
      v12 = (_QWORD *)a1[1];
    }
    v18[0] = MEMORY[0x24BDAC760];
    v18[1] = 0x40000000;
    v18[2] = sub_20B9F34FC;
    v18[3] = &unk_24C46C7D8;
    v18[4] = a1;
    v18[5] = v14;
    v15 = v12[1];
    if (*(_QWORD *)(v15 + 80))
    {
      *(_QWORD *)(v15 + 80) = 0;
      *(_QWORD *)(v15 + 88) = 0;
    }
    result = sub_20B9F34FC((uint64_t)v18);
    v16 = *(_QWORD *)(v15 + 80);
    *(_QWORD *)(v15 + 80) = v16 + 1;
    *(_QWORD *)(v15 + 8 * v16) = result;
  }
  else
  {
    v6 = atomic_load((unsigned __int8 *)&qword_25472C0B0);
    if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25472C0B0))
    {
      v17 = 1;
      sub_20B9F35B4(&v17, 1uLL);
      __cxa_atexit((void (*)(void *))sub_20B9F3640, &qword_25472C0B8, &dword_20B7F7000);
      __cxa_guard_release(&qword_25472C0B0);
    }
    v7 = (_QWORD *)a1[1];
    if (*v7)
    {
      (*(void (**)(_QWORD, uint64_t *))(*(_QWORD *)*v7 + 80))(*v7, &qword_25472C0B8);
      v7 = (_QWORD *)a1[1];
    }
    v8 = v7[1];
    if (*(_QWORD *)(v8 + 80))
    {
      *(_QWORD *)(v8 + 80) = 0;
      *(_QWORD *)(v8 + 88) = 0;
      v7 = (_QWORD *)a1[1];
    }
    v9 = *v7;
    result = sub_20B9F33AC((uint64_t)(a1 + 4));
    *((_QWORD *)result + 2) = 0;
    *((_QWORD *)result + 3) = v9;
    *((_QWORD *)result + 4) = 0;
    *((_DWORD *)result + 1) = 1;
    result[8] = 1;
    v11 = *(_QWORD *)(v8 + 80);
    *(_QWORD *)(v8 + 80) = v11 + 1;
    *(_QWORD *)(v8 + 8 * v11) = result;
  }
  return result;
}

void sub_20B9F25D8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472C0B0);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B9F25F0(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  void *v8;
  void *v9;

  sub_20B9F26A8(a1);
  v2 = (uint64_t *)a1[1];
  if (v2)
  {
    v3 = sub_20B9F69E0(v2);
    MEMORY[0x20BD39CB0](v3, 0x1020C40A95220FALL);
  }
  v4 = (uint64_t *)a1[2];
  if (v4)
  {
    v5 = sub_20B9F69E0(v4);
    MEMORY[0x20BD39CB0](v5, 0x1020C40A95220FALL);
  }
  v6 = (uint64_t *)a1[3];
  if (v6)
  {
    v7 = sub_20B9F69E0(v6);
    MEMORY[0x20BD39CB0](v7, 0x1020C40A95220FALL);
  }
  v8 = (void *)a1[21];
  if (v8)
  {
    a1[22] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[18];
  if (v9)
  {
    a1[19] = v9;
    operator delete(v9);
  }
  sub_20B958794((uint64_t)(a1 + 11));
  sub_20B958794((uint64_t)(a1 + 4));
  return a1;
}

char *sub_20B9F26A8(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  sub_20B9F37C0((uint64_t)a1);
  v2 = sub_20B9547EC();
  sub_20B954D48((uint64_t)v2, 0x800u, (uint64_t)"===RESET===\n", v3, v4, v5, v6, v7, v9);
  sub_20B95515C((uint64_t)(a1 + 4));
  sub_20B95515C((uint64_t)(a1 + 11));
  sub_20B9F388C((uint64_t)(a1 + 21));
  sub_20B9F390C((uint64_t)(a1 + 18));
  return sub_20B9F2410(a1);
}

uint64_t sub_20B9F2700(_QWORD *a1, uint64_t a2, int a3, int a4, int a5, int a6)
{
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;

  v12 = operator new();
  v13 = sub_20B947CC4();
  sub_20B9F8D54(v12, a2, (uint64_t)v13, *(_QWORD *)(a2 + 48), a3, a4, a5, a6);
  *(_QWORD *)(v12 + 40) = 0;
  *(_QWORD *)(v12 + 48) = 0;
  *(_QWORD *)(v12 + 56) = 0;
  *(_BYTE *)(v12 + 64) = a4 & 1;
  v14 = a1[20];
  v15 = (uint64_t *)a1[19];
  if ((unint64_t)v15 >= v14)
  {
    v17 = a1[18];
    v18 = ((uint64_t)v15 - v17) >> 3;
    if ((unint64_t)(v18 + 1) >> 61)
      sub_20B9F39A0();
    v19 = v14 - v17;
    v20 = v19 >> 2;
    if (v19 >> 2 <= (unint64_t)(v18 + 1))
      v20 = v18 + 1;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
      v21 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v21 = v20;
    if (v21)
      v22 = (char *)sub_20B800BE8((uint64_t)(a1 + 20), v21);
    else
      v22 = 0;
    v23 = (uint64_t *)&v22[8 * v18];
    v24 = &v22[8 * v21];
    *v23 = v12;
    v16 = v23 + 1;
    v26 = (char *)a1[18];
    v25 = (char *)a1[19];
    if (v25 != v26)
    {
      do
      {
        v27 = *((_QWORD *)v25 - 1);
        v25 -= 8;
        *--v23 = v27;
      }
      while (v25 != v26);
      v25 = (char *)a1[18];
    }
    a1[18] = v23;
    a1[19] = v16;
    a1[20] = v24;
    if (v25)
      operator delete(v25);
  }
  else
  {
    *v15 = v12;
    v16 = v15 + 1;
  }
  a1[19] = v16;
  return v12;
}

void sub_20B9F2854(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10E0C40A81385DBLL);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9F2878(_QWORD *a1, uint64_t a2, int a3, int a4, int a5, int a6)
{
  uint64_t v12;
  CFIndex v13;
  unint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;

  v12 = operator new();
  *(_QWORD *)v12 = 0;
  v13 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(v12 + 8) = CFStringCreateWithCharacters(0, *(const UniChar **)a2, v13);
  *(_QWORD *)(v12 + 16) = v13;
  *(_DWORD *)(v12 + 24) = a3;
  *(_DWORD *)(v12 + 28) = a4;
  *(_DWORD *)(v12 + 32) = a6;
  *(_DWORD *)(v12 + 36) = a5;
  *(_QWORD *)(v12 + 48) = 0;
  *(_QWORD *)(v12 + 56) = 0;
  *(_QWORD *)(v12 + 40) = 0;
  *(_BYTE *)(v12 + 64) = a4 & 1;
  v14 = a1[20];
  v15 = (uint64_t *)a1[19];
  if ((unint64_t)v15 >= v14)
  {
    v17 = a1[18];
    v18 = ((uint64_t)v15 - v17) >> 3;
    if ((unint64_t)(v18 + 1) >> 61)
      sub_20B9F39A0();
    v19 = v14 - v17;
    v20 = v19 >> 2;
    if (v19 >> 2 <= (unint64_t)(v18 + 1))
      v20 = v18 + 1;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
      v21 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v21 = v20;
    if (v21)
      v22 = (char *)sub_20B800BE8((uint64_t)(a1 + 20), v21);
    else
      v22 = 0;
    v23 = (uint64_t *)&v22[8 * v18];
    v24 = &v22[8 * v21];
    *v23 = v12;
    v16 = v23 + 1;
    v26 = (char *)a1[18];
    v25 = (char *)a1[19];
    if (v25 != v26)
    {
      do
      {
        v27 = *((_QWORD *)v25 - 1);
        v25 -= 8;
        *--v23 = v27;
      }
      while (v25 != v26);
      v25 = (char *)a1[18];
    }
    a1[18] = v23;
    a1[19] = v16;
    a1[20] = v24;
    if (v25)
      operator delete(v25);
  }
  else
  {
    *v15 = v12;
    v16 = v15 + 1;
  }
  a1[19] = v16;
  return v12;
}

void sub_20B9F29C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10E0C40A81385DBLL);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9F29E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, char a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;

  v10 = operator new();
  v11 = operator new();
  if (a4)
  {
    sub_20B9DDC68(v11, *(_QWORD *)a2, *(_WORD **)(a2 + 8), a3, a4, *(uint64_t **)a1, a5, 0);
    v12 = sub_20B9F3670(a1 + 88);
    *((_OWORD *)v12 + 4) = 0u;
    *((_OWORD *)v12 + 5) = 0u;
    *((_OWORD *)v12 + 2) = 0u;
    *((_OWORD *)v12 + 3) = 0u;
    *(_OWORD *)v12 = 0u;
    *((_OWORD *)v12 + 1) = 0u;
  }
  else
  {
    v12 = 0;
    sub_20B9DDC68(v11, *(_QWORD *)a2, *(_WORD **)(a2 + 8), a3, 0, *(uint64_t **)a1, a5, 0);
  }
  *(_QWORD *)v10 = v11;
  *(_QWORD *)(v10 + 8) = v12;
  *(_BYTE *)(v10 + 16) = 0;
  v13 = *(_QWORD *)(a1 + 184);
  v14 = *(uint64_t **)(a1 + 176);
  if ((unint64_t)v14 >= v13)
  {
    v16 = *(_QWORD *)(a1 + 168);
    v17 = ((uint64_t)v14 - v16) >> 3;
    if ((unint64_t)(v17 + 1) >> 61)
      sub_20B9F39A0();
    v18 = v13 - v16;
    v19 = v18 >> 2;
    if (v18 >> 2 <= (unint64_t)(v17 + 1))
      v19 = v17 + 1;
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
      v20 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v20 = v19;
    if (v20)
      v21 = (char *)sub_20B800BE8(a1 + 184, v20);
    else
      v21 = 0;
    v22 = (uint64_t *)&v21[8 * v17];
    v23 = &v21[8 * v20];
    *v22 = v10;
    v15 = v22 + 1;
    v25 = *(char **)(a1 + 168);
    v24 = *(char **)(a1 + 176);
    if (v24 != v25)
    {
      do
      {
        v26 = *((_QWORD *)v24 - 1);
        v24 -= 8;
        *--v22 = v26;
      }
      while (v24 != v25);
      v24 = *(char **)(a1 + 168);
    }
    *(_QWORD *)(a1 + 168) = v22;
    *(_QWORD *)(a1 + 176) = v15;
    *(_QWORD *)(a1 + 184) = v23;
    if (v24)
      operator delete(v24);
  }
  else
  {
    *v14 = v10;
    v15 = v14 + 1;
  }
  *(_QWORD *)(a1 + 176) = v15;
  return v10;
}

void sub_20B9F2BA0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x20BD39CB0](v2, 0x10F1C4047374A1ELL);
  MEMORY[0x20BD39CB0](v1, 0x1020C40A95220FALL);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9F2BEC(int **a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v13;
  char *v14;
  char *v15;
  uint64_t *v16;
  int *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t *v24;
  int *v25;
  int *v26;
  int *v27;
  uint64_t v28;

  v8 = operator new();
  v9 = operator new();
  v10 = v9;
  v11 = **a1;
  if (v11 > 4)
  {
    if (v11 == 5)
    {
      v13 = 1;
      goto LABEL_13;
    }
    if (v11 == 13)
    {
      v13 = 2;
      goto LABEL_13;
    }
  }
  else if (v11 == 2 || v11 == 4)
  {
    v13 = 0;
    goto LABEL_13;
  }
  v13 = -1;
LABEL_13:
  sub_20B9DDFF4(v9, *(uint64_t **)a2, *(__int16 **)(a2 + 8), a3, a4, v13, (uint64_t *)*a1, 8);
  v14 = sub_20B9F3670((uint64_t)(a1 + 11));
  *((_OWORD *)v14 + 4) = 0u;
  *((_OWORD *)v14 + 5) = 0u;
  *((_OWORD *)v14 + 2) = 0u;
  *((_OWORD *)v14 + 3) = 0u;
  *(_OWORD *)v14 = 0u;
  *((_OWORD *)v14 + 1) = 0u;
  *(_QWORD *)v8 = v10;
  *(_QWORD *)(v8 + 8) = v14;
  *(_BYTE *)(v8 + 16) = 0;
  v15 = (char *)a1[23];
  v16 = (uint64_t *)a1[22];
  if (v16 >= (uint64_t *)v15)
  {
    v18 = (char *)a1[21];
    v19 = ((char *)v16 - v18) >> 3;
    if ((unint64_t)(v19 + 1) >> 61)
      sub_20B9F39A0();
    v20 = v15 - v18;
    v21 = v20 >> 2;
    if (v20 >> 2 <= (unint64_t)(v19 + 1))
      v21 = v19 + 1;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
      v22 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v22 = v21;
    if (v22)
      v23 = (char *)sub_20B800BE8((uint64_t)(a1 + 23), v22);
    else
      v23 = 0;
    v24 = (uint64_t *)&v23[8 * v19];
    v25 = (int *)&v23[8 * v22];
    *v24 = v8;
    v17 = (int *)(v24 + 1);
    v27 = a1[21];
    v26 = a1[22];
    if (v26 != v27)
    {
      do
      {
        v28 = *((_QWORD *)v26 - 1);
        v26 -= 2;
        *--v24 = v28;
      }
      while (v26 != v27);
      v26 = a1[21];
    }
    a1[21] = (int *)v24;
    a1[22] = v17;
    a1[23] = v25;
    if (v26)
      operator delete(v26);
  }
  else
  {
    *v16 = v8;
    v17 = (int *)(v16 + 1);
  }
  a1[22] = v17;
  return v8;
}

void sub_20B9F2D94(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x20BD39CB0](v2, 0x10F1C40BBC815BBLL);
  MEMORY[0x20BD39CB0](v1, 0x1020C40A95220FALL);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9F2DD8(int **a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t *v16;
  int *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t *v24;
  int *v25;
  int *v26;
  int *v27;
  uint64_t v28;

  v8 = operator new();
  v9 = operator new();
  v10 = v9;
  v11 = **a1;
  if (v11 > 4)
  {
    if (v11 == 5)
    {
      v13 = 1;
      goto LABEL_13;
    }
    if (v11 == 13)
    {
      v13 = 2;
      goto LABEL_13;
    }
  }
  else if (v11 == 2 || v11 == 4)
  {
    v13 = 0;
    goto LABEL_13;
  }
  v13 = 0xFFFFFFFFLL;
LABEL_13:
  sub_20B9DDE60(v9, *(_QWORD *)a2, *(_WORD **)(a2 + 8), a3, a4, (uint64_t *)*a1, v13);
  v14 = sub_20B9F3670((uint64_t)(a1 + 11));
  *((_OWORD *)v14 + 4) = 0u;
  *((_OWORD *)v14 + 5) = 0u;
  *((_OWORD *)v14 + 2) = 0u;
  *((_OWORD *)v14 + 3) = 0u;
  *(_OWORD *)v14 = 0u;
  *((_OWORD *)v14 + 1) = 0u;
  *(_QWORD *)v8 = v10;
  *(_QWORD *)(v8 + 8) = v14;
  *(_BYTE *)(v8 + 16) = 0;
  v15 = (char *)a1[23];
  v16 = (uint64_t *)a1[22];
  if (v16 >= (uint64_t *)v15)
  {
    v18 = (char *)a1[21];
    v19 = ((char *)v16 - v18) >> 3;
    if ((unint64_t)(v19 + 1) >> 61)
      sub_20B9F39A0();
    v20 = v15 - v18;
    v21 = v20 >> 2;
    if (v20 >> 2 <= (unint64_t)(v19 + 1))
      v21 = v19 + 1;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
      v22 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v22 = v21;
    if (v22)
      v23 = (char *)sub_20B800BE8((uint64_t)(a1 + 23), v22);
    else
      v23 = 0;
    v24 = (uint64_t *)&v23[8 * v19];
    v25 = (int *)&v23[8 * v22];
    *v24 = v8;
    v17 = (int *)(v24 + 1);
    v27 = a1[21];
    v26 = a1[22];
    if (v26 != v27)
    {
      do
      {
        v28 = *((_QWORD *)v26 - 1);
        v26 -= 2;
        *--v24 = v28;
      }
      while (v26 != v27);
      v26 = a1[21];
    }
    a1[21] = (int *)v24;
    a1[22] = v17;
    a1[23] = v25;
    if (v26)
      operator delete(v26);
  }
  else
  {
    *v16 = v8;
    v17 = (int *)(v16 + 1);
  }
  a1[22] = v17;
  return v8;
}

void sub_20B9F2F7C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x20BD39CB0](v2, 0x10F1C40D0F3DA69);
  MEMORY[0x20BD39CB0](v1, 0x1020C40A95220FALL);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9F2FC0(int **a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v14;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t *v19;
  int *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t *v27;
  int *v28;
  int *v29;
  int *v30;
  uint64_t v31;

  if (!a5)
  {
    v11 = operator new();
    sub_20B9DDC68(v11, *(_QWORD *)a2, *(_WORD **)(a2 + 8), a3, a4, (uint64_t *)*a1, a6, 9);
    goto LABEL_16;
  }
  v10 = operator new();
  v11 = v10;
  v12 = **a1;
  if (v12 > 4)
  {
    if (v12 == 5)
    {
      v14 = 1;
    }
    else
    {
      if (v12 != 13)
      {
LABEL_14:
        v14 = -1;
        goto LABEL_15;
      }
      v14 = 2;
    }
  }
  else
  {
    if (v12 != 2 && v12 != 4)
      goto LABEL_14;
    v14 = 0;
  }
LABEL_15:
  sub_20B9DDFF4(v10, *(uint64_t **)a2, *(__int16 **)(a2 + 8), a3, a4, v14, (uint64_t *)*a1, 10);
LABEL_16:
  v16 = operator new();
  v17 = sub_20B9F3670((uint64_t)(a1 + 11));
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *(_OWORD *)v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *(_QWORD *)v16 = v11;
  *(_QWORD *)(v16 + 8) = v17;
  *(_BYTE *)(v16 + 16) = 0;
  v18 = (char *)a1[23];
  v19 = (uint64_t *)a1[22];
  if (v19 >= (uint64_t *)v18)
  {
    v21 = (char *)a1[21];
    v22 = ((char *)v19 - v21) >> 3;
    if ((unint64_t)(v22 + 1) >> 61)
      sub_20B9F39A0();
    v23 = v18 - v21;
    v24 = v23 >> 2;
    if (v23 >> 2 <= (unint64_t)(v22 + 1))
      v24 = v22 + 1;
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
      v25 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v25 = v24;
    if (v25)
      v26 = (char *)sub_20B800BE8((uint64_t)(a1 + 23), v25);
    else
      v26 = 0;
    v27 = (uint64_t *)&v26[8 * v22];
    v28 = (int *)&v26[8 * v25];
    *v27 = v16;
    v20 = (int *)(v27 + 1);
    v30 = a1[21];
    v29 = a1[22];
    if (v29 != v30)
    {
      do
      {
        v31 = *((_QWORD *)v29 - 1);
        v29 -= 2;
        *--v27 = v31;
      }
      while (v29 != v30);
      v29 = a1[21];
    }
    a1[21] = (int *)v27;
    a1[22] = v20;
    a1[23] = v28;
    if (v29)
      operator delete(v29);
  }
  else
  {
    *v19 = v16;
    v20 = (int *)(v19 + 1);
  }
  a1[22] = v20;
  return v16;
}

void sub_20B9F31AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10F1C40BBC815BBLL);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9F3200(_QWORD *a1, int a2, _OWORD *a3, int a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;

  v10 = operator new();
  v11 = operator new();
  sub_20B9DDF14(v11, a2, a3, a4, a5);
  v12 = sub_20B9F3670((uint64_t)(a1 + 11));
  *((_OWORD *)v12 + 4) = 0u;
  *((_OWORD *)v12 + 5) = 0u;
  *((_OWORD *)v12 + 2) = 0u;
  *((_OWORD *)v12 + 3) = 0u;
  *(_OWORD *)v12 = 0u;
  *((_OWORD *)v12 + 1) = 0u;
  *(_QWORD *)v10 = v11;
  *(_QWORD *)(v10 + 8) = v12;
  *(_BYTE *)(v10 + 16) = 0;
  v13 = a1[23];
  v14 = (uint64_t *)a1[22];
  if ((unint64_t)v14 >= v13)
  {
    v16 = a1[21];
    v17 = ((uint64_t)v14 - v16) >> 3;
    if ((unint64_t)(v17 + 1) >> 61)
      sub_20B9F39A0();
    v18 = v13 - v16;
    v19 = v18 >> 2;
    if (v18 >> 2 <= (unint64_t)(v17 + 1))
      v19 = v17 + 1;
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
      v20 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v20 = v19;
    if (v20)
      v21 = (char *)sub_20B800BE8((uint64_t)(a1 + 23), v20);
    else
      v21 = 0;
    v22 = (uint64_t *)&v21[8 * v17];
    v23 = &v21[8 * v20];
    *v22 = v10;
    v15 = v22 + 1;
    v25 = (char *)a1[21];
    v24 = (char *)a1[22];
    if (v24 != v25)
    {
      do
      {
        v26 = *((_QWORD *)v24 - 1);
        v24 -= 8;
        *--v22 = v26;
      }
      while (v24 != v25);
      v24 = (char *)a1[21];
    }
    a1[21] = v22;
    a1[22] = v15;
    a1[23] = v23;
    if (v24)
      operator delete(v24);
  }
  else
  {
    *v14 = v10;
    v15 = v14 + 1;
  }
  a1[22] = v15;
  return v10;
}

void sub_20B9F3368(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x20BD39CB0](v2, 0x10F1C40863EB520);
  MEMORY[0x20BD39CB0](v1, 0x1020C40A95220FALL);
  _Unwind_Resume(a1);
}

char *sub_20B9F33AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  size_t v5;
  char *v6;
  unint64_t v7;
  char **v8;
  _QWORD *v9;
  char **v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    v4 = *(char **)(a1 + 32);
    v3 = *(_QWORD *)(a1 + 40);
    v5 = (size_t)&v4[-v2];
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v4[-v2] >> 3) != v3)
      goto LABEL_23;
  }
  else
  {
    v5 = 40 * *(_QWORD *)(a1 + 40);
  }
  v6 = (char *)malloc_type_malloc(v5, 0x10600404FD43036uLL);
  v4 = v6;
  v8 = *(char ***)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v8 >= v7)
  {
    v10 = *(char ***)a1;
    v11 = ((uint64_t)v8 - *(_QWORD *)a1) >> 3;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 61)
      sub_20B9F39A0();
    v13 = v7 - (_QWORD)v10;
    if (v13 >> 2 > v12)
      v12 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 61)
        sub_20B800BC0();
      v15 = (char *)operator new(8 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[8 * v11];
    *(_QWORD *)v16 = v4;
    v9 = v16 + 8;
    if (v8 != v10)
    {
      do
      {
        v17 = (uint64_t)*--v8;
        *((_QWORD *)v16 - 1) = v17;
        v16 -= 8;
      }
      while (v8 != v10);
      v8 = *(char ***)a1;
    }
    *(_QWORD *)a1 = v16;
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = &v15[8 * v14];
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v8 = v6;
    v9 = v8 + 1;
  }
  *(_QWORD *)(a1 + 8) = v9;
  *(_QWORD *)(a1 + 24) = v4;
LABEL_23:
  ++*(_DWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = v4 + 40;
  return v4;
}

char *sub_20B9F34FC(uint64_t a1)
{
  uint64_t v2;
  double v3;
  double v4;
  uint64_t v5;
  char **v6;
  char *v7;
  char *v8;
  char *v9;
  size_t v10;
  uint64_t v11;
  size_t v12;

  v2 = *(_QWORD *)(a1 + 32);
  LMLanguageModelJointProbability();
  v4 = -v3;
  v5 = **(_QWORD **)(v2 + 8);
  v6 = *(char ***)(a1 + 40);
  v7 = sub_20B9F33AC(v2 + 32);
  v8 = v7;
  v9 = *v6;
  v10 = v6[1] - *v6;
  v11 = (uint64_t)v10 >> 2;
  *((double *)v7 + 2) = v4;
  *((_QWORD *)v7 + 3) = v5;
  *((_QWORD *)v7 + 4) = 0;
  if (v10 > 0xB)
  {
    *(_QWORD *)v7 = *(_QWORD *)&v9[4 * v11 - 8];
    LOBYTE(v12) = 2;
  }
  else
  {
    v12 = v10 >> 2;
    memcpy(&v7[-4 * v11 + 8], v9, v10);
  }
  v8[8] = v12;
  return v8;
}

void *sub_20B9F35B4(void *result, unint64_t a2)
{
  const void *v3;
  uint64_t v4;

  qword_25472C0B8 = 0;
  qword_25472C0C0 = 0;
  qword_25472C0C8 = 0;
  if (a2)
  {
    v3 = result;
    sub_20B81277C(&qword_25472C0B8, a2);
    v4 = qword_25472C0C0;
    result = memmove((void *)qword_25472C0C0, v3, 4 * a2);
    qword_25472C0C0 = v4 + 4 * a2;
  }
  return result;
}

void sub_20B9F361C(_Unwind_Exception *exception_object)
{
  if (qword_25472C0B8)
  {
    qword_25472C0C0 = qword_25472C0B8;
    operator delete((void *)qword_25472C0B8);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B9F3640(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

char *sub_20B9F3670(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  size_t v5;
  char *v6;
  unint64_t v7;
  char **v8;
  _QWORD *v9;
  char **v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    v4 = *(char **)(a1 + 32);
    v3 = *(_QWORD *)(a1 + 40);
    v5 = (size_t)&v4[-v2];
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v4[-v2] >> 5) != v3)
      goto LABEL_23;
  }
  else
  {
    v5 = 96 * *(_QWORD *)(a1 + 40);
  }
  v6 = (char *)malloc_type_malloc(v5, 0x1060040C2C571E4uLL);
  v4 = v6;
  v8 = *(char ***)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v8 >= v7)
  {
    v10 = *(char ***)a1;
    v11 = ((uint64_t)v8 - *(_QWORD *)a1) >> 3;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 61)
      sub_20B9F39A0();
    v13 = v7 - (_QWORD)v10;
    if (v13 >> 2 > v12)
      v12 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 61)
        sub_20B800BC0();
      v15 = (char *)operator new(8 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[8 * v11];
    *(_QWORD *)v16 = v4;
    v9 = v16 + 8;
    if (v8 != v10)
    {
      do
      {
        v17 = (uint64_t)*--v8;
        *((_QWORD *)v16 - 1) = v17;
        v16 -= 8;
      }
      while (v8 != v10);
      v8 = *(char ***)a1;
    }
    *(_QWORD *)a1 = v16;
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = &v15[8 * v14];
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v8 = v6;
    v9 = v8 + 1;
  }
  *(_QWORD *)(a1 + 8) = v9;
  *(_QWORD *)(a1 + 24) = v4;
LABEL_23:
  ++*(_DWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = v4 + 96;
  return v4;
}

_BYTE *sub_20B9F37C0(uint64_t a1)
{
  _BYTE *result;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  result = sub_20B9547EC();
  if (*result)
  {
    if ((result[9] & 8) != 0)
    {
      v3 = sub_20B9547EC();
      sub_20B954D48((uint64_t)v3, 0x800u, (uint64_t)"===cummulative stats since last reset===\n", v4, v5, v6, v7, v8, v33);
      v9 = sub_20B9547EC();
      sub_20B954D48((uint64_t)v9, 0x800u, (uint64_t)"hypotheses created = %ld\n", v10, v11, v12, v13, v14, *(unsigned int *)(a1 + 80));
      v15 = sub_20B9547EC();
      sub_20B954D48((uint64_t)v15, 0x800u, (uint64_t)"hypothesis sets created = %ld\n", v16, v17, v18, v19, v20, *(unsigned int *)(a1 + 136));
      v21 = sub_20B9547EC();
      sub_20B954D48((uint64_t)v21, 0x800u, (uint64_t)"words created = %ld\n", v22, v23, v24, v25, v26, (uint64_t)(*(_QWORD *)(a1 + 176) - *(_QWORD *)(a1 + 168)) >> 3);
      v27 = sub_20B9547EC();
      return (_BYTE *)sub_20B954D48((uint64_t)v27, 0x800u, (uint64_t)"word groups created = %ld\n", v28, v29, v30, v31, v32, (uint64_t)(*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 3);
    }
  }
  return result;
}

void sub_20B9F388C(uint64_t a1)
{
  uint64_t **v2;
  uint64_t **v3;
  uint64_t *v4;

  v2 = *(uint64_t ***)a1;
  v3 = *(uint64_t ***)(a1 + 8);
  if (*(uint64_t ***)a1 != v3)
  {
    do
    {
      if (*v2)
      {
        v4 = sub_20B9F69E0(*v2);
        MEMORY[0x20BD39CB0](v4, 0x1020C40A95220FALL);
      }
      ++v2;
    }
    while (v2 != v3);
    v2 = *(uint64_t ***)a1;
  }
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
    operator delete(v2);
}

void sub_20B9F390C(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  v2 = *(uint64_t **)a1;
  v3 = *(uint64_t **)(a1 + 8);
  if (*(uint64_t **)a1 != v3)
  {
    do
    {
      v4 = *v2;
      if (*v2)
      {
        v5 = *(void **)(v4 + 40);
        if (v5)
        {
          *(_QWORD *)(v4 + 48) = v5;
          operator delete(v5);
        }
        v6 = sub_20B9F8DD0(v4);
        MEMORY[0x20BD39CB0](v6, 0x10E0C40A81385DBLL);
      }
      ++v2;
    }
    while (v2 != v3);
    v2 = *(uint64_t **)a1;
  }
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
    operator delete(v2);
}

void sub_20B9F39A0()
{
  sub_20B80AD80("vector");
}

uint64_t sub_20B9F39B4(uint64_t a1, unint64_t a2, uint64_t a3, double a4, uint64_t a5, uint64_t a6, int a7)
{
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;

  v11 = *(_QWORD *)(a1 + 80);
  if (v11 > a2)
  {
    *(_QWORD *)(a1 + 80) = a2;
    v11 = a2;
  }
  if (!v11)
  {
    v15 = (*(uint64_t (**)(void))(*(_QWORD *)(a6 + 8) + 16))();
    v16 = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 8 * v16) = v15;
    *(_QWORD *)(a1 + 80) = v16 + 1;
LABEL_12:
    *(_QWORD *)(a1 + 88) = a3;
    return 1;
  }
  if (v11 < a2 || *(double *)(*(_QWORD *)(a1 + 8 * v11 - 8) + 16) > a4)
  {
    v12 = (*(uint64_t (**)(void))(*(_QWORD *)(a6 + 8) + 16))();
    v13 = a7 ^ 1u;
    v14 = *(_QWORD *)(a1 + 80);
    if (v14 > v13)
    {
      while (*(double *)(*(_QWORD *)(a1 + 8 * v13) + 16) <= *(double *)(v12 + 16))
      {
        if (v14 == ++v13)
          goto LABEL_9;
      }
      v18 = v14 - (v14 == a2);
      if ((uint64_t)(v18 - 1) >= v13)
      {
        v19 = v18;
        do
        {
          *(_QWORD *)(a1 + 8 * v19) = *(_QWORD *)(a1 + 8 * v19 - 8);
          v20 = v19 - 2;
          --v19;
        }
        while (v20 >= v13);
      }
      *(_QWORD *)(a1 + 8 * v13) = v12;
      *(_QWORD *)(a1 + 80) = v18 + 1;
      if (v13)
        return 1;
      goto LABEL_12;
    }
LABEL_9:
    if (v14 < a2)
    {
      *(_QWORD *)(a1 + 80) = v14 + 1;
      *(_QWORD *)(a1 + 8 * v14) = v12;
      return 1;
    }
  }
  return 0;
}

void sub_20B9F3AF4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t *v12;
  uint64_t v14;
  double v15;
  uint64_t v16;
  double v17;
  double v18;
  uint64_t v19;

  v19 = a1;
  v5 = *(unsigned __int8 *)(a5 + 16);
  v6 = *(_QWORD *)(a5 + 40);
  if (*(_QWORD *)(a5 + 32) >= 0xAuLL)
    v7 = 10;
  else
    v7 = *(_QWORD *)(a5 + 32);
  v8 = a3[10];
  if (*(_BYTE *)(a5 + 16))
    v9 = v6 == 0;
  else
    v9 = 1;
  v10 = !v9;
  if (v8)
  {
    v12 = a3;
    v14 = *(_QWORD *)(a5 + 48);
    v15 = 1.79769313e308;
    do
    {
      v16 = *v12;
      v17 = *(double *)(*v12 + 16);
      if (v14 && *(_QWORD *)(v14 + 408) == 50 && *(double *)(v14 + 416) <= v17
        || v10 && *(_QWORD *)(v6 + 408) == 50 && *(double *)(v6 + 416) <= v17)
      {
        break;
      }
      if (v15 == 1.79769313e308)
      {
        v15 = v17 + 2.0;
      }
      else if (v17 > v15)
      {
        return;
      }
      v18 = sub_20B9F3C68(a1, *v12, a2, a5);
      if (!v10 || *(_QWORD *)(v6 + 408) != 50 || *(double *)(v6 + 416) > v18)
      {
        a1 = sub_20B9F39B4(v19, v7, v16, v18, a2, a5, v5 != 0);
        if ((_DWORD)a1)
        {
          if (v6)
            a1 = sub_20B9A7B54(v6 + 8, v18);
        }
      }
      ++v12;
      --v8;
    }
    while (v8);
  }
}

double sub_20B9F3C68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v5;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  _DWORD *i;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v24;

  if (*(_DWORD *)(a3 + 8) == 3)
    return *(double *)(a2 + 16);
  v5 = sub_20B940ED0(a2, a3) + *(double *)(a2 + 16) + 0.25;
  v8 = *(uint64_t **)(a3 + 16);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3);
  if (v8)
  {
    v10 = *v8;
    if (*v8)
    {
      v11 = *(_QWORD *)(v10 + 8);
      v12 = *((_DWORD *)v8 + 9);
      if (v11 < 4)
        goto LABEL_15;
      if ((v12 - 9) < 9 && ((0x127u >> (v12 - 9)) & 1) != 0)
      {
        v13 = 1;
      }
      else
      {
        if (v11 >= 6)
        {
          v5 = v5 + -4.0;
          goto LABEL_15;
        }
        v13 = 0;
      }
      if (v13 | (*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 88))(a3) ^ 1)
        v5 = v5 + -2.0;
    }
    else
    {
      v12 = *((_DWORD *)v8 + 9);
    }
LABEL_15:
    if (v9 == 502)
      v5 = v5 + 1.7;
    v14 = *(_QWORD *)(*(_QWORD *)(a4 + 24) + 72);
    if (v14)
      v15 = *(_QWORD *)(*(_QWORD *)(v14 + 8) + 32);
    else
      v15 = 0;
    v24 = 0;
    v16 = (*(uint64_t (**)(uint64_t, unint64_t *))(*(_QWORD *)a3 + 32))(a3, &v24);
    if (v24)
    {
      v17 = v16;
      v18 = 0;
      while (!sub_20B9C45B0(v15, *(_DWORD *)(v17 + 4 * v18)))
      {
        if (++v18 >= v24)
          goto LABEL_24;
      }
      v19 = 2.0;
    }
    else
    {
LABEL_24:
      if ((v12 - 10) >= 2)
      {
        if (v12 == 9)
        {
          for (i = *(_DWORD **)(a3 + 24); i != *(_DWORD **)(a3 + 32); ++i)
          {
            if (!*i)
              goto LABEL_25;
          }
        }
        goto LABEL_33;
      }
LABEL_25:
      v19 = -4.5;
    }
    v5 = v5 + v19;
LABEL_33:
    if (v12 == 16)
      v5 = v5 + 1.5;
    if (v10 && (*(_BYTE *)(v10 + 40) & 0x10) != 0)
      v5 = v5 + (float)(1.0 - *(float *)(v10 + 56)) * 4.0;
  }
  if (v9 == 2)
  {
    v21 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 16);
    if (v21 && (*(_BYTE *)(v21 + 28) & 0x20) != 0)
    {
      return v5 + 1.6;
    }
    else
    {
      v22 = *(_QWORD **)(a2 + 32);
      if (v22
        && (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v22 + 24))(*v22) == 1
        && !*(_DWORD *)(*(_QWORD *)(a2 + 24) + 8))
      {
        return v5 + -1.0;
      }
    }
  }
  return v5;
}

void sub_20B9F3EF0(CFLocaleIdentifier localeIdentifier@<X2>, const __CFURL *a2@<X0>, const __CFString *a3@<X1>, Boolean a4@<W3>, _QWORD *a5@<X8>)
{
  CFStringRef PathComponent;
  const __CFString *v10;
  CFTypeRef v11;
  CFTypeRef v12;
  CFTypeRef cf;

  cf = 0;
  if (a2)
  {
    PathComponent = CFURLCopyLastPathComponent(a2);
    v12 = PathComponent;
    if (CFStringCompare(PathComponent, a3, 0))
    {
      cf = CFURLCreateCopyAppendingPathComponent((CFAllocatorRef)*MEMORY[0x24BDBD240], a2, a3, a4);
      if (!PathComponent)
        goto LABEL_9;
      goto LABEL_8;
    }
    sub_20B90FD30(&cf, a2);
    if (PathComponent)
LABEL_8:
      CFRelease(PathComponent);
  }
  else
  {
    v10 = sub_20B9AF0A8(localeIdentifier);
    v12 = v10;
    if (!v10)
    {
      *a5 = 0;
      goto LABEL_15;
    }
    cf = CFURLCreateCopyAppendingPathComponent((CFAllocatorRef)*MEMORY[0x24BDBD240], (CFURLRef)v10, a3, a4);
    CFRelease(v10);
  }
LABEL_9:
  v12 = 0;
  if (CFURLResourceIsReachable((CFURLRef)cf, (CFErrorRef *)&v12))
  {
    v11 = cf;
    cf = 0;
  }
  else
  {
    if (v12)
      CFRelease(v12);
    v11 = 0;
  }
  *a5 = v11;
LABEL_15:
  if (cf)
    CFRelease(cf);
}

void sub_20B9F4044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
  sub_20B876164(&a9, 0);
  sub_20B876164(&a10, 0);
  _Unwind_Resume(a1);
}

void sub_20B9F4098(const __CFURL *a1@<X0>, const __CFString *a2@<X1>, const __CFString *a3@<X2>, uint64_t *a4@<X8>)
{
  const __CFURL *v6;
  const __CFAllocator *v7;
  const __CFURL *v8;
  const __CFURL *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint8_t *v12;
  uint64_t v13;
  NSObject *v14;
  const __CFURL *v15;
  _QWORD *v16;
  NSObject *v17;
  uint64_t v18;
  NSObject *v19;
  _QWORD *v20;
  NSObject *v21;
  uint64_t v22;
  NSObject *v23;
  NSObject *v24;
  uint64_t v25;
  uint8_t v26[8];
  const __CFURL *v27;
  const __CFURL *v28;
  CFURLRef url;
  uint8_t buf[8];
  uint8_t *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  sub_20B9F3EF0(a3, a1, a2, 1u, &url);
  v6 = url;
  if (!url)
  {
    *a4 = 0;
    return;
  }
  v7 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v8 = CFURLCreateCopyAppendingPathComponent((CFAllocatorRef)*MEMORY[0x24BDBD240], url, CFSTR("model.bin"), 0);
  v28 = v8;
  v9 = CFURLCreateCopyAppendingPathComponent(v7, v6, CFSTR("sp.model"), 0);
  v27 = v9;
  if (CFStringCompare(a3, CFSTR("ko"), 1uLL))
  {
    if (CFStringCompare(a3, CFSTR("th"), 1uLL))
    {
      v10 = 0;
LABEL_41:
      v25 = operator new();
      *(_QWORD *)buf = v10;
      sub_20B9AFAF4(v25, v8, (uint64_t *)buf);
      if (*(_QWORD *)buf)
        (*(void (**)(_QWORD))(**(_QWORD **)buf + 8))(*(_QWORD *)buf);
      *a4 = v25;
      goto LABEL_44;
    }
    v10 = (_QWORD *)operator new();
    sub_20B99A634((uint64_t)v10, v9);
    *v10 = &unk_24C466CB8;
    if (!_os_feature_enabled_impl())
      goto LABEL_41;
    v14 = sub_20B9A7C5C(7u);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_20B7F7000, v14, OS_LOG_TYPE_DEBUG, "Feature flag detected: useMontreal_TH", buf, 2u);
    }
    v15 = CFURLCreateCopyAppendingPathComponent(v7, v6, CFSTR("model_mil/lstm.mil"), 0);
    *(_QWORD *)buf = v15;
    v16 = (_QWORD *)operator new();
    sub_20B944A4C((uint64_t)v16, v15);
    if (sub_20B945480(v16))
    {
      v17 = sub_20B9A7C5C(7u);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)v26 = 0;
        _os_log_debug_impl(&dword_20B7F7000, v17, OS_LOG_TYPE_DEBUG, "Feature flag activate: useMontreal_TH = 1", v26, 2u);
      }
      v18 = v16[1];
      v16[1] = v10;
      if (v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
      *a4 = (uint64_t)v16;
      if (!v15)
        goto LABEL_44;
      goto LABEL_19;
    }
    v24 = sub_20B9A7C5C(7u);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v26 = 0;
      _os_log_debug_impl(&dword_20B7F7000, v24, OS_LOG_TYPE_DEBUG, "Feature flag is not activate: useMontreal_TH = 0", v26, 2u);
    }
    (*(void (**)(_QWORD *))(*v16 + 8))(v16);
    if (!v15)
      goto LABEL_41;
LABEL_40:
    CFRelease(v15);
    goto LABEL_41;
  }
  v10 = (_QWORD *)operator new();
  sub_20B99A634((uint64_t)v10, v9);
  *v10 = &off_24C467920;
  v11 = v10 + 2;
  *(_QWORD *)buf = &off_24C46A4A8;
  v12 = (uint8_t *)v10[5];
  if (v12 == (uint8_t *)(v10 + 2))
  {
    v31 = 0;
    v12 = buf;
    (*(void (**)(_QWORD *, uint8_t *))(*v11 + 24))(v10 + 2, buf);
    (*(void (**)(_QWORD))(*(_QWORD *)v10[5] + 32))(v10[5]);
    v31 = buf;
    v10[2] = &off_24C46A4A8;
    v13 = 4;
    v10[5] = v11;
  }
  else
  {
    v10[2] = &off_24C46A4A8;
    v31 = v12;
    v10[5] = v11;
    if (v12 == buf)
    {
      v13 = 4;
      v12 = buf;
    }
    else
    {
      if (!v12)
        goto LABEL_23;
      v13 = 5;
    }
  }
  (*(void (**)(uint8_t *))(*(_QWORD *)v12 + 8 * v13))(v12);
LABEL_23:
  if (!_os_feature_enabled_impl())
    goto LABEL_41;
  v19 = sub_20B9A7C5C(7u);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_debug_impl(&dword_20B7F7000, v19, OS_LOG_TYPE_DEBUG, "Feature flag detected: useMontreal_KO", buf, 2u);
  }
  v15 = CFURLCreateCopyAppendingPathComponent(v7, v6, CFSTR("model_mil/lstm.mil"), 0);
  *(_QWORD *)buf = v15;
  v20 = (_QWORD *)operator new();
  sub_20B944A4C((uint64_t)v20, v15);
  if (!sub_20B945480(v20))
  {
    v23 = sub_20B9A7C5C(7u);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v26 = 0;
      _os_log_debug_impl(&dword_20B7F7000, v23, OS_LOG_TYPE_DEBUG, "Feature flag is not activate: useMontreal_KO = 0", v26, 2u);
    }
    (*(void (**)(_QWORD *))(*v20 + 8))(v20);
    if (!v15)
      goto LABEL_41;
    goto LABEL_40;
  }
  v21 = sub_20B9A7C5C(7u);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v26 = 0;
    _os_log_debug_impl(&dword_20B7F7000, v21, OS_LOG_TYPE_DEBUG, "Feature flag activate: useMontreal_KO = 1", v26, 2u);
  }
  v22 = v20[1];
  v20[1] = v10;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  *a4 = (uint64_t)v20;
  if (!v15)
    goto LABEL_44;
LABEL_19:
  CFRelease(v15);
LABEL_44:
  if (v9)
    CFRelease(v9);
  if (v8)
    CFRelease(v8);
  CFRelease(v6);
}

void sub_20B9F4610(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19)
{
  if (a2)
    sub_20B854468(exception_object);
  _Unwind_Resume(exception_object);
}

double sub_20B9F4778@<D0>(const __CFURL *a1@<X0>, const __CFString *a2@<X1>, const __CFString *a3@<X2>, uint64_t *a4@<X8>)
{
  const __CFURL *v5;
  _QWORD *v6;
  double result;
  uint64_t v8;
  const __CFURL *v9;

  sub_20B9F3EF0(a3, a1, a2, 0, &v9);
  v5 = v9;
  if (v9)
  {
    v6 = (_QWORD *)operator new();
    sub_20B9D6A88(v6, v5);
    *a4 = (uint64_t)v6;
    CFRelease(v5);
  }
  else
  {
    v8 = operator new();
    sub_20B8789BC(v8);
    result = 0.0;
    *(_OWORD *)(v8 + 360) = 0u;
    *(_OWORD *)(v8 + 376) = 0u;
    *(_OWORD *)(v8 + 344) = 0u;
    *a4 = v8;
  }
  return result;
}

void sub_20B9F4820(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x20BD39CB0](v2, 0x10F2C4093187FD8);
  sub_20B876164((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9F4868(int a1, uint64_t a2, int a3)
{
  const void *v6;
  const void *v7;
  int v8;
  const void *v9;
  int v10;
  unsigned int v11;

  if (a2)
  {
    v6 = sub_20B88826C(a2, kMecabraContextOptionPrivateMode);
    v7 = (const void *)*MEMORY[0x24BDBD270];
    v8 = v6 == (const void *)*MEMORY[0x24BDBD270];
    v9 = sub_20B88826C(a2, kMecabraContextOptionNoPruning);
    v10 = ((v8 & 1) << 18) | 0x800000;
    if (v9 != v7)
      v10 = v8 << 18;
  }
  else
  {
    v10 = 0;
  }
  v11 = v10 | (2 * a1) & 0x4000;
  if (!a3)
    v11 |= 2u;
  if ((*(_QWORD *)&a1 & 0x200000) != 0)
    return v11;
  else
    return v11 | 0x2000;
}

uint64_t sub_20B9F491C(uint64_t result)
{
  _QWORD *v1;
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD **)(result + 48);
  if (*(_QWORD *)(result + 56) - (_QWORD)v1 >= 0x10uLL && *v1)
  {
    v2 = (_QWORD *)result;
    v3 = 1;
    while (1)
    {
      result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v1[v3] + 96))(v1[v3]);
      if ((_DWORD)result == 83)
        break;
      ++v3;
      v1 = (_QWORD *)v2[6];
      if (v3 >= (uint64_t)(v2[7] - (_QWORD)v1) >> 3)
        return result;
    }
    sub_20B8FEA7C(v2, v3, &v4);
    result = v4;
    if (v4)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  }
  return result;
}

_QWORD *sub_20B9F49BC(_QWORD *result)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t i;
  unint64_t v8;

  v1 = result[7] - result[6];
  if ((unint64_t)v1 >= 0x10)
  {
    v2 = v1 >> 3;
    if (v2 >= 5)
      v3 = 5;
    else
      v3 = v2;
    v4 = v2 - 1;
    if (v4 >= v3)
      v4 = v3;
    v5 = v4 >= 3 ? 3 : v4;
    if (v5)
    {
      v6 = result;
      for (i = 0; i != v5; ++i)
      {
        v8 = i;
        while (*(_BYTE *)(*(_QWORD *)(v6[6] + 8 * v8) + 154))
        {
          if (v3 == ++v8)
            return result;
        }
        if (v8 == -1)
          break;
        result = sub_20B8FECB4(v6, v8, i);
      }
    }
  }
  return result;
}

void sub_20B9F4A64(unint64_t a1, const __CFArray *a2, _QWORD *a3)
{
  NSObject *v6;
  unint64_t v7;
  NSObject *v8;
  const void *ValueAtIndex;
  double v10;
  uint8_t buf[4];
  unint64_t v12;
  __int16 v13;
  const void *v14;
  __int16 v15;
  double v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v6 = sub_20B9A7C5C(0xFu);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    v12 = a1;
    _os_log_debug_impl(&dword_20B7F7000, v6, OS_LOG_TYPE_DEBUG, "%s nbest:", buf, 0xCu);
  }
  if (a3[1] != *a3)
  {
    v7 = 0;
    do
    {
      v8 = sub_20B9A7C5C(0xFu);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        ValueAtIndex = CFArrayGetValueAtIndex(a2, v7);
        v10 = *(float *)(*a3 + 4 * v7);
        *(_DWORD *)buf = 134218498;
        v12 = v7;
        v13 = 2112;
        v14 = ValueAtIndex;
        v15 = 2048;
        v16 = v10;
        _os_log_debug_impl(&dword_20B7F7000, v8, OS_LOG_TYPE_DEBUG, "\tIndex: %zu candidate: %@ score: %f", buf, 0x20u);
      }
      ++v7;
    }
    while (v7 < (uint64_t)(a3[1] - *a3) >> 2);
  }
}

void sub_20B9F4BE0(_QWORD *a1)
{
  sub_20B8BACE8(a1);
  JUMPOUT(0x20BD39CB0);
}

void sub_20B9F4C04(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  NSObject *v15;
  NSObject *v16;
  int v17;
  void **v18;
  void **p_p;
  std::string *v20;
  std::string v21;
  uint64_t v22;
  void *__p;
  char v24;
  uint8_t buf[4];
  void **v26;
  __int16 v27;
  std::string *v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 32))(&__p);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)a1 + 1) + 144))(&v22);
  sub_20B853D84(&v22);
  if (a3 && *(_WORD *)(a2 + 2 * a3 - 2) != 32)
  {
    v8 = a4[1];
    v11 = *(_DWORD *)(v8 - 4);
    v9 = v8 - 4;
    v10 = v11;
    if (a1[13] == v11)
    {
      a4[1] = v9;
    }
    else if (!sub_20B99B250(a1, v10))
    {
      v13 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a1 + 1) + 512))(*((_QWORD *)a1 + 1), v10);
      if (v12 >= v12 - 3)
        v14 = v12 - 3;
      else
        v14 = v12;
      *(_DWORD *)(a4[1] - 4) = (*(uint64_t (**)(_QWORD, uint64_t, unint64_t))(**((_QWORD **)a1 + 1)
                                                                                              + 504))(*((_QWORD *)a1 + 1), v13, v14);
    }
  }
  v15 = sub_20B9A7C5C(7u);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
  {
    v16 = sub_20B9A7C5C(7u);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      v17 = v24;
      v18 = (void **)__p;
      sub_20B99AF14((uint64_t)a4, " ", 1uLL, &v21);
      p_p = &__p;
      if (v17 < 0)
        p_p = v18;
      if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v20 = &v21;
      else
        v20 = (std::string *)v21.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315394;
      v26 = p_p;
      v27 = 2080;
      v28 = v20;
      _os_log_debug_impl(&dword_20B7F7000, v16, OS_LOG_TYPE_DEBUG, "Context: input = [%s]: ids = [%s]", buf, 0x16u);
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v21.__r_.__value_.__l.__data_);
    }
  }
  if (v24 < 0)
    operator delete(__p);
}

void sub_20B9F4E18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;
  void *v21;

  v21 = *(void **)v19;
  if (*(_QWORD *)v19)
  {
    *(_QWORD *)(v19 + 8) = v21;
    operator delete(v21);
  }
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B9F4E60()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B9F4E74()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C46A4A8;
  return result;
}

void sub_20B9F4E98(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C46A4A8;
}

uint64_t sub_20B9F4EB0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int16 *v5;
  int v6;
  BOOL v7;

  v2 = *a2;
  v3 = a2[1];
  sub_20B9DEB60(*a2, v3);
  if (v3)
  {
    v4 = 2 * v3 - 2;
    v5 = (unsigned __int16 *)v2;
    do
    {
      v6 = *v5++;
      v7 = (v6 - 12593) > 0x32 || v4 == 0;
      v4 -= 2;
    }
    while (!v7);
  }
  return v2;
}

uint64_t sub_20B9F4F2C(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45EE90))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B9F4F68()
{
  return &unk_24C45EE90;
}

void sub_20B9F5F10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  uint64_t v21;

  MEMORY[0x20BD39CB0](v21, 0x10E1C408D9C284ALL);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

unint64_t sub_20B9F5F60(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v10;
  uint64_t v11;

  v8 = 0;
  v11 = a6;
  v10 = 0;
  if (*(_QWORD *)(a1 + 24) >= 2uLL)
  {
    sub_20B9F5FC4(a1, a7, &v11, &v10, a8, 1, a2, a3, a4, a5);
    return v10;
  }
  return v8;
}

uint64_t sub_20B9F5FC4(uint64_t a1, unint64_t a2, _QWORD *a3, unint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, unsigned int a10)
{
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  _DWORD *v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  BOOL v24;
  uint64_t v25;
  int v26;
  unint64_t v28;
  unint64_t v29;

  if (!a8)
  {
    v16 = *(_QWORD *)(a1 + 8);
    goto LABEL_32;
  }
  v12 = 0;
  v13 = a10;
  while (1)
  {
    if (a10 == 1)
    {
      v15 = *(unsigned __int8 *)(a7 + v12);
      goto LABEL_12;
    }
    if (a10 == 2 && (v12 & 1) == 0)
    {
      v14 = *(unsigned __int8 *)(a7 + v12);
      if (a9)
      {
        if (v14 == 63)
        {
          if (!*(_BYTE *)(a7 + v12 + 1))
            goto LABEL_20;
        }
        else if (v14 == 42 && !*(_BYTE *)(a7 + v12 + 1))
        {
          return sub_20B9F6284(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7 + v13, a8 - v13, a9, a10);
        }
        goto LABEL_14;
      }
      if (!*(_BYTE *)(a7 + v12))
        break;
    }
LABEL_14:
    v16 = *(_QWORD *)(a1 + 8);
    v17 = *(_DWORD *)(v16 + 8 * a6) + *(unsigned __int8 *)(a7 + v12) + 1;
    if (*(_DWORD *)(v16 + 8 * v17 + 4) != (_DWORD)a6)
      return 0;
    ++v12;
    ++v13;
    a6 = v17;
    if (a8 == v12)
    {
      LODWORD(a6) = v17;
LABEL_32:
      v25 = *(unsigned int *)(v16 + 8 * a6);
      if (*(_DWORD *)(v16 + 8 * v25 + 4) == (_DWORD)a6)
      {
        v26 = *(_DWORD *)(v16 + 8 * v25);
        if (v26 < 0)
        {
          if (*a3)
          {
            --*a3;
          }
          else if (a2)
          {
            v28 = *a4;
            v29 = *a4 + 1;
            *a4 = v29;
            *(_DWORD *)(a5 + 24 * v28 + 8) = -v26;
            if (v29 >= a2)
              return 1;
          }
          else
          {
            ++*a4;
          }
        }
      }
      return 0;
    }
  }
  v15 = *(unsigned __int8 *)(a7 + v12 + 1);
LABEL_12:
  if (v15 == 42)
    return sub_20B9F6284(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7 + v13, a8 - v13, a9, a10);
  if (!(2 * (v15 == 63)))
    goto LABEL_14;
LABEL_20:
  v18 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 8 * a6);
  v19 = 256;
  while (1)
  {
    v20 = (_DWORD *)(*(_QWORD *)(a1 + 8) + 8 * ++v18);
    if (v20[1] == (_DWORD)a6)
      break;
LABEL_29:
    v24 = v19-- != 0;
    if (v19 == 0 || !v24)
      return 0;
  }
  if (a10 != 2)
  {
    v21 = 1;
    if (sub_20B9F5FC4(a1))
      return v21;
    goto LABEL_29;
  }
  v22 = *v20 + 1;
  v23 = 257;
  while (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 8 * v22 + 4) != v18 || !sub_20B9F5FC4(a1))
  {
    ++v22;
    if (--v23 <= 1)
      goto LABEL_29;
  }
  return 1;
}

uint64_t sub_20B9F6284(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, int a10)
{
  uint64_t v18;
  uint64_t v20;
  int v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (!sub_20B9F5FC4(a1))
  {
    v27 = a5;
    v28 = a7;
    v29 = a8;
    LODWORD(v20) = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 8 * a6);
    v21 = 256;
    while (1)
    {
      v20 = (v20 + 1);
      v22 = (_DWORD *)(*(_QWORD *)(a1 + 8) + 8 * v20);
      v23 = a6;
      if (v22[1] == (_DWORD)a6)
      {
        if (a10 == 2)
        {
          v24 = (*v22 + 1);
          v25 = 257;
          while (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 8 * v24 + 4) != (_DWORD)v20
               || !sub_20B9F6284(a1, a2, a3, a4, v27, v24, v28, v29, a9 | 0x200000000))
          {
            v24 = (v24 + 1);
            if (--v25 <= 1)
              goto LABEL_14;
          }
          return 1;
        }
        if (a10 == 1)
        {
          v18 = 1;
          if (sub_20B9F6284(a1, a2, a3, a4, v27, v20, v28, v29, a9 | 0x100000000))
            return v18;
        }
      }
LABEL_14:
      v26 = v21-- != 0;
      a6 = v23;
      if (v21 == 0 || !v26)
        return 0;
    }
  }
  return 1;
}

uint64_t sub_20B9F63E8(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4, unsigned __int16 **a5, int a6, int a7, double a8)
{
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;

  *(_WORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_24C45FF78;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 24) = &unk_24C460070;
  v12 = (std::__shared_weak_count *)a3[1];
  v13 = a1 + 32;
  v28 = *a3;
  v29 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  v16 = (std::__shared_weak_count *)a2[1];
  v26 = *a2;
  v27 = v16;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  sub_20B8B14A8(v13, (uint64_t)&v28, (uint64_t)&v26, a4, a5);
  v19 = v27;
  if (v27)
  {
    v20 = (unint64_t *)&v27->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v29;
  if (v29)
  {
    v23 = (unint64_t *)&v29->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  *(double *)(a1 + 112) = a8;
  *(_DWORD *)(a1 + 120) = a6;
  *(_DWORD *)(a1 + 124) = a7;
  return a1;
}

void sub_20B9F650C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_20B811FE4((uint64_t)&a9);
  sub_20B811FE4((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9F6528(uint64_t a1)
{
  return **(_QWORD **)(a1 + 80);
}

uint64_t sub_20B9F6534(uint64_t a1, uint64_t a2)
{
  if (a2)
    return 0;
  else
    return a1 + 32;
}

uint64_t sub_20B9F6544(uint64_t a1, uint64_t a2)
{
  unsigned __int16 v2;

  if (a2)
    return 0;
  else
    sub_20B8B15D0(a1 + 32);
  return v2;
}

uint64_t sub_20B9F656C(uint64_t a1)
{
  _BYTE *v1;
  uint64_t result;

  v1 = *(_BYTE **)(a1 + 80);
  result = *(_QWORD *)&v1[8 * (v1[16] == 0)];
  if (!result)
    return *(_QWORD *)v1;
  return result;
}

uint64_t sub_20B9F6590(uint64_t a1)
{
  _BYTE *v1;
  uint64_t result;

  v1 = *(_BYTE **)(a1 + 96);
  result = *(_QWORD *)&v1[8 * (v1[16] == 0)];
  if (!result)
    return *(_QWORD *)v1;
  return result;
}

uint64_t sub_20B9F65B4(uint64_t a1)
{
  return **(_QWORD **)(a1 + 96);
}

_QWORD *sub_20B9F65C0(_QWORD *a1)
{
  *a1 = off_24C45AD08;
  a1[3] = &unk_24C45AE00;
  a1[4] = &unk_24C45F9E8;
  sub_20B811FE4((uint64_t)(a1 + 12));
  sub_20B811FE4((uint64_t)(a1 + 10));
  return a1;
}

uint64_t sub_20B9F6610(uint64_t a1, uint64_t *a2, int a3, unsigned __int16 **a4, int a5)
{
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  CFTypeRef *v18;
  CFTypeRef v19;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;

  v8 = *a2;
  v7 = (std::__shared_weak_count *)a2[1];
  *(_WORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_24C45AD08;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 24) = &unk_24C45AE00;
  v9 = a1 + 32;
  v23 = v8;
  v24 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v21 = 0;
  v22 = 0;
  sub_20B8B14A8(v9, (uint64_t)&v23, (uint64_t)&v21, a3, a4);
  v12 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v24;
  if (v24)
  {
    v16 = (unint64_t *)&v24->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  *(_QWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 120) = a5;
  *(_DWORD *)(a1 + 124) = 1536;
  v18 = *(CFTypeRef **)(a1 + 80);
  *(_QWORD *)a1 = off_24C460A80;
  *(_QWORD *)(a1 + 24) = &unk_24C460B78;
  v19 = CFRetain(*v18);
  *(_QWORD *)(a1 + 136) = v19;
  *(_QWORD *)(a1 + 128) = CFStringCreateWithFormat(0, 0, CFSTR(" %@"), v19);
  return a1;
}

void sub_20B9F6758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  sub_20B811FE4((uint64_t)va1);
  sub_20B811FE4((uint64_t)va2);
  sub_20B811FE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9F678C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C460A80;
  *(_QWORD *)(a1 + 24) = &unk_24C460B78;
  CFRelease(*(CFTypeRef *)(a1 + 128));
  CFRelease(*(CFTypeRef *)(a1 + 136));
  *(_QWORD *)a1 = off_24C45AD08;
  *(_QWORD *)(a1 + 24) = &unk_24C45AE00;
  *(_QWORD *)(a1 + 32) = &unk_24C45F9E8;
  sub_20B811FE4(a1 + 96);
  sub_20B811FE4(a1 + 80);
  return a1;
}

void sub_20B9F6808(uint64_t a1)
{
  sub_20B9F678C(a1);
  JUMPOUT(0x20BD39CB0);
}

double sub_20B9F682C(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  double result;
  uint64_t v12;

  v2 = operator new();
  v3 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 16);
  *(_WORD *)(v2 + 16) = 0;
  *(_QWORD *)v2 = off_24C45FF78;
  *(_QWORD *)(v2 + 8) = 0;
  *(_OWORD *)(v2 + 56) = v3;
  *(_QWORD *)(v2 + 24) = &unk_24C460070;
  *(_QWORD *)(v2 + 32) = &unk_24C45F9E8;
  v4 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(v2 + 72) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(v2 + 80) = v4;
  v5 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(v2 + 88) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(v2 + 96) = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(v2 + 104) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  result = *(double *)(a1 + 88);
  v12 = *(_QWORD *)(a1 + 96);
  *(double *)(v2 + 112) = result;
  *(_QWORD *)(v2 + 120) = v12;
  return result;
}

double sub_20B9F68E0(_QWORD *a1)
{
  return sub_20B9F682C((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
}

_QWORD *sub_20B9F68F0(_QWORD *a1)
{
  *a1 = off_24C45FF78;
  a1[3] = &unk_24C460070;
  a1[4] = &unk_24C45F9E8;
  sub_20B811FE4((uint64_t)(a1 + 12));
  sub_20B811FE4((uint64_t)(a1 + 10));
  return a1;
}

void sub_20B9F6940(_QWORD *a1)
{
  *a1 = off_24C45FF78;
  a1[3] = &unk_24C460070;
  a1[4] = &unk_24C45F9E8;
  sub_20B811FE4((uint64_t)(a1 + 12));
  sub_20B811FE4((uint64_t)(a1 + 10));
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B9F69A0()
{
  return 3;
}

uint64_t sub_20B9F69A8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 124);
}

uint64_t sub_20B9F69B0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 120);
}

double sub_20B9F69B8(uint64_t a1)
{
  return *(double *)(a1 + 112);
}

uint64_t sub_20B9F69C0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 128);
}

uint64_t sub_20B9F69C8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 136);
}

uint64_t sub_20B9F69D0()
{
  return 0;
}

uint64_t sub_20B9F69D8()
{
  return 0;
}

uint64_t *sub_20B9F69E0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*((_BYTE *)a1 + 16))
  {
    v3 = a1[1];
    if (v3)
      MEMORY[0x20BD39CB0](v3, 0x1060C40C2C571E4);
  }
  return a1;
}

uint64_t sub_20B9F6A38(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 40);
  if (!v4)
  {
    sub_20B9F6AB0((uint64_t **)a1);
    v4 = *(_QWORD *)(a1 + 40);
  }
  if ((unint64_t)(v4 + a2) <= *(_QWORD *)(a1 + 24))
  {
    v5 = *(_QWORD *)(a1 + 32);
  }
  else
  {
    sub_20B9F6AB0((uint64_t **)a1);
    v4 = 0;
    v5 = *(_QWORD *)(a1 + 32) + 1;
    *(_QWORD *)(a1 + 32) = v5;
  }
  result = *(_QWORD *)(*(_QWORD *)a1 + 8 * v5) + v4;
  *(_QWORD *)(a1 + 40) = v4 + a2;
  return result;
}

uint64_t sub_20B9F6AB0(uint64_t **a1)
{
  uint64_t v2;
  uint64_t result;
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t *v13;
  char *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t *v17;
  uint64_t v18;
  __int128 v19;
  char *v20;
  _QWORD *v21;

  v2 = operator new[]();
  result = (uint64_t)(a1 + 2);
  v4 = (unint64_t)a1[2];
  v5 = a1[1];
  if ((unint64_t)v5 >= v4)
  {
    v7 = *a1;
    v8 = v5 - *a1;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61)
      sub_20B9F6C00();
    v10 = v4 - (_QWORD)v7;
    if (v10 >> 2 > v9)
      v9 = v10 >> 2;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    v21 = a1 + 2;
    if (v11)
    {
      v12 = (char *)sub_20B800BE8(result, v11);
      v7 = *a1;
      v5 = a1[1];
    }
    else
    {
      v12 = 0;
    }
    v13 = (uint64_t *)&v12[8 * v8];
    v14 = &v12[8 * v11];
    v20 = v14;
    *v13 = v2;
    *((_QWORD *)&v19 + 1) = v13 + 1;
    if (v5 == v7)
    {
      v6 = v13 + 1;
    }
    else
    {
      do
      {
        v15 = *--v5;
        *v5 = 0;
        *--v13 = v15;
      }
      while (v5 != v7);
      v6 = (uint64_t *)*((_QWORD *)&v19 + 1);
      v14 = v20;
    }
    v16 = *(_OWORD *)a1;
    *a1 = v13;
    a1[1] = v6;
    v19 = v16;
    v17 = a1[2];
    a1[2] = (uint64_t *)v14;
    v20 = (char *)v17;
    v18 = v16;
    result = sub_20B9F6C14((uint64_t)&v18);
  }
  else
  {
    *v5 = v2;
    v6 = v5 + 1;
    a1[1] = v6;
  }
  a1[1] = v6;
  return result;
}

void sub_20B9F6BDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39C80](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

void sub_20B9F6C00()
{
  sub_20B80AD80("vector");
}

uint64_t sub_20B9F6C14(uint64_t a1)
{
  sub_20B9F6C48(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20B9F6C48(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *(_QWORD *)(result + 16);
  if (v2 != a2)
  {
    v4 = result;
    do
    {
      *(_QWORD *)(v4 + 16) = v2 - 8;
      result = *(_QWORD *)(v2 - 8);
      *(_QWORD *)(v2 - 8) = 0;
      if (result)
        result = MEMORY[0x20BD39C80](result, 0x1000C8077774924);
      v2 = *(_QWORD *)(v4 + 16);
    }
    while (v2 != a2);
  }
  return result;
}

uint64_t sub_20B9F6CA8(uint64_t a1, unsigned int a2, const void *a3, const void *a4, const void *a5, uint64_t a6, char a7, char a8, char a9, char a10)
{
  uint64_t v15;
  uint64_t *v16;
  const void **v17;
  const void **v18;
  const void **v19;
  _QWORD *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v31;
  CFTypeRef cf;
  __int128 v33;

  *(_DWORD *)a1 = a2;
  *(_BYTE *)(a1 + 4) = a7;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  v31 = a1 + 24;
  *(_OWORD *)(a1 + 40) = 0u;
  v15 = a1 + 40;
  *(_BYTE *)(a1 + 5) = a8;
  *(_OWORD *)(a1 + 56) = 0u;
  v16 = (uint64_t *)(a1 + 56);
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 136) = a6;
  *(_QWORD *)(a1 + 144) = 0;
  v17 = (const void **)(a1 + 144);
  *(_QWORD *)(a1 + 152) = 0;
  v18 = (const void **)(a1 + 152);
  *(_QWORD *)(a1 + 160) = 0;
  v19 = (const void **)(a1 + 160);
  v20 = (_QWORD *)operator new();
  *v20 = &unk_24C462380;
  *(_QWORD *)(a1 + 168) = v20;
  if (a3)
    sub_20B90FD30(v17, a3);
  if (a5)
    sub_20B90FD30(v18, a5);
  if (a4)
    sub_20B90FD30(v19, a4);
  sub_20B9F6FFC(a1, 0);
  if (!*(_BYTE *)(a1 + 4))
  {
    if (a2 - 1 <= 1)
    {
      if (a9)
      {
        sub_20B873F7C(a2, *(_BYTE *)(a1 + 5), 0, (uint64_t *)&v33);
        sub_20B82E770(v31, &v33);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
        if (*((_QWORD *)&v33 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
    }
    if (a2 == 1)
    {
      sub_20B9F3EF0(CFSTR("zh-Hans"), 0, CFSTR("unilm.lm/unilm.bundle"), 1u, &cf);
      if (cf)
      {
        sub_20B925260(1u, 0, (uint64_t *)&v33);
        sub_20B82E770((uint64_t)v16, &v33);
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
        if (*((_QWORD *)&v33 + 1))
        {
          v25 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        sub_20B8EDE64(*v16, 0xFFFFFFFFFFFFFFFFLL, 0);
        if (cf)
          CFRelease(cf);
      }
    }
    if ((a10 & 1) == 0)
    {
      sub_20B873E04((uint64_t *)&v33);
      sub_20B82E770(v15, &v33);
      v27 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
      if (*((_QWORD *)&v33 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
    }
  }
  return a1;
}

void sub_20B9F6F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const void **v7;
  const void **v8;
  const void **v9;
  uint64_t v11;
  va_list va;

  va_start(va, a4);
  sub_20B876164((const void **)va, 0);
  v11 = *(_QWORD *)(v4 + 168);
  *(_QWORD *)(v4 + 168) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  sub_20B876164(v9, 0);
  sub_20B876164(v8, 0);
  sub_20B876164(v7, 0);
  sub_20B811FE4(v4 + 120);
  sub_20B811FE4(v4 + 104);
  sub_20B811FE4(v4 + 88);
  sub_20B811FE4(v4 + 72);
  sub_20B811FE4(v6);
  sub_20B811FE4(v5);
  sub_20B811FE4(a4);
  sub_20B811FE4(a3);
  _Unwind_Resume(a1);
}

void sub_20B9F6FFC(uint64_t a1, int a2)
{
  int v2;
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unsigned int v28;
  char *v29;
  unsigned __int8 v30;
  unsigned __int8 v31;
  _QWORD *v32;
  unint64_t v33;
  int8x8_t v34;
  unint64_t v35;
  uint8x8_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned __int8 **v39;
  unsigned __int8 *v40;
  uint64_t v41;
  unint64_t v42;
  NSObject *v43;
  os_signpost_id_t v44;
  NSObject *v45;
  NSObject *v46;
  __int128 *p_ptr;
  uint64_t v48;
  _QWORD *v49;
  unint64_t *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint8x8_t v56;
  unint64_t v57;
  unsigned __int8 **v58;
  unsigned __int8 *i;
  unint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  _BYTE *v63;
  float v64;
  float v65;
  _BOOL8 v66;
  unint64_t v67;
  unint64_t v68;
  int8x8_t prime;
  void *v70;
  void *v71;
  uint64_t v72;
  _QWORD *v73;
  unint64_t v74;
  uint8x8_t v75;
  unint64_t v76;
  uint8x8_t v77;
  uint64_t v78;
  _QWORD *v79;
  unint64_t v80;
  unsigned __int8 **v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  NSObject *v84;
  NSObject *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  std::__shared_weak_count *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  __int128 v102;
  __int128 v103;
  uint64_t (*v104)(uint64_t);
  void *v105;
  uint64_t *v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  char v111;
  __int128 ptr;
  uint64_t v113;
  __int128 v114;
  __int128 buf;
  char v116;
  uint64_t v117;

  v2 = a2;
  v117 = *MEMORY[0x24BDAC8D0];
  sub_20B8743A4(*(_DWORD *)a1, *(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 152), *(_BYTE *)(a1 + 5), a2, (uint64_t *)&v103);
  v4 = v103;
  v103 = 0uLL;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = v4;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v103 + 1);
  if (*((_QWORD *)&v103 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v103 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  sub_20B878DF8(*(_DWORD *)a1, v2, (uint64_t *)&v103);
  v11 = v103;
  v103 = 0uLL;
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  *(_OWORD *)(a1 + 72) = v11;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v103 + 1);
  if (*((_QWORD *)&v103 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v103 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  sub_20B9781EC(*(_DWORD *)a1, v2, (uint64_t *)&v103);
  v18 = v103;
  v103 = 0uLL;
  v19 = *(std::__shared_weak_count **)(a1 + 96);
  *(_OWORD *)(a1 + 88) = v18;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = (std::__shared_weak_count *)*((_QWORD *)&v103 + 1);
  if (*((_QWORD *)&v103 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v103 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  sub_20B89199C(*(_DWORD *)a1, (uint64_t *)&v103);
  sub_20B82E770(a1 + 104, &v103);
  v25 = (std::__shared_weak_count *)*((_QWORD *)&v103 + 1);
  if (*((_QWORD *)&v103 + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v103 + 1) + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = *(_DWORD *)a1;
  v29 = sub_20B8D101C(*(_DWORD *)a1);
  sub_20B80BBD0(&ptr, v29);
  v108 = 0;
  v109 = &v108;
  v110 = 0x2000000000;
  v111 = 0;
  *(_QWORD *)&v103 = MEMORY[0x24BDAC760];
  *((_QWORD *)&v103 + 1) = 0x40000000;
  v104 = sub_20B9F8204;
  v105 = &unk_24C4AE688;
  v106 = &v108;
  v107 = v28;
  v30 = atomic_load((unsigned __int8 *)&qword_25472C0D8);
  if ((v30 & 1) == 0 && __cxa_guard_acquire(&qword_25472C0D8))
  {
    v99 = operator new();
    *(_OWORD *)v99 = 0u;
    *(_OWORD *)(v99 + 16) = 0u;
    *(_DWORD *)(v99 + 32) = 1065353216;
    qword_25472C0D0 = v99;
    __cxa_guard_release(&qword_25472C0D8);
  }
  v31 = atomic_load((unsigned __int8 *)&qword_25472C0E0);
  if ((v31 & 1) == 0 && __cxa_guard_acquire(&qword_25472C0E0))
  {
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDB380], &stru_2547299F8, &dword_20B7F7000);
    __cxa_guard_release(&qword_25472C0E0);
  }
  v114 = 0uLL;
  std::mutex::lock(&stru_2547299F8);
  v32 = (_QWORD *)qword_25472C0D0;
  v33 = sub_20B828414(qword_25472C0D0 + 24, (uint64_t)&ptr);
  v34 = (int8x8_t)v32[1];
  if (!*(_QWORD *)&v34)
    goto LABEL_55;
  v35 = v33;
  v36 = (uint8x8_t)vcnt_s8(v34);
  v36.i16[0] = vaddlv_u8(v36);
  v37 = v36.u32[0];
  if (v36.u32[0] > 1uLL)
  {
    v38 = v33;
    if (v33 >= *(_QWORD *)&v34)
      v38 = v33 % *(_QWORD *)&v34;
  }
  else
  {
    v38 = (*(_QWORD *)&v34 - 1) & v33;
  }
  v39 = *(unsigned __int8 ***)(*v32 + 8 * v38);
  if (!v39)
    goto LABEL_55;
  v40 = *v39;
  if (!*v39)
    goto LABEL_55;
  v41 = (uint64_t)(v32 + 4);
  while (1)
  {
    v42 = *((_QWORD *)v40 + 1);
    if (v42 == v35)
      break;
    if (v37 > 1)
    {
      if (v42 >= *(_QWORD *)&v34)
        v42 %= *(_QWORD *)&v34;
    }
    else
    {
      v42 &= *(_QWORD *)&v34 - 1;
    }
    if (v42 != v38)
      goto LABEL_55;
LABEL_54:
    v40 = *(unsigned __int8 **)v40;
    if (!v40)
      goto LABEL_55;
  }
  if ((sub_20B8288BC(v41, v40 + 16, (unsigned __int8 *)&ptr) & 1) == 0)
    goto LABEL_54;
  v93 = (std::__shared_weak_count *)*((_QWORD *)v40 + 6);
  if (v93 && v93->__shared_owners_ != -1)
  {
    v94 = std::__shared_weak_count::lock(v93);
    if (v94)
      v95 = *((_QWORD *)v40 + 5);
    else
      v95 = 0;
    *(_QWORD *)&v114 = v95;
    *((_QWORD *)&v114 + 1) = v94;
    goto LABEL_143;
  }
LABEL_55:
  v43 = sub_20B9A7C5C(0xDu);
  v44 = os_signpost_id_make_with_pointer(v43, &ptr);
  v45 = sub_20B9A7C5C(0xDu);
  if (v44 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v46 = v45;
    if (os_signpost_enabled(v45))
    {
      p_ptr = &ptr;
      if (v113 < 0)
        p_ptr = (__int128 *)ptr;
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = p_ptr;
      _os_signpost_emit_with_name_impl(&dword_20B7F7000, v46, OS_SIGNPOST_INTERVAL_BEGIN, v44, "SingletonResourceManagerLoad", "Load resource with key: [%s]", (uint8_t *)&buf, 0xCu);
    }
  }
  v48 = v104((uint64_t)&v103);
  v101 = v2;
  *(_QWORD *)&buf = v48;
  v49 = (_QWORD *)operator new();
  v49[2] = 0;
  v50 = v49 + 2;
  *v49 = &off_24C46BDA8;
  v49[1] = 0;
  v49[3] = v48;
  *(_QWORD *)&buf = 0;
  sub_20B9F8380((uint64_t *)&buf);
  *(_QWORD *)&v114 = v48;
  *((_QWORD *)&v114 + 1) = v49;
  v51 = qword_25472C0D0;
  do
    v52 = __ldxr(v50);
  while (__stxr(v52 + 1, v50));
  v53 = sub_20B828414(v51 + 24, (uint64_t)&ptr);
  v54 = v53;
  v55 = *(_QWORD *)(v51 + 8);
  v100 = v48;
  if (v55)
  {
    v56 = (uint8x8_t)vcnt_s8((int8x8_t)v55);
    v56.i16[0] = vaddlv_u8(v56);
    v57 = v56.u32[0];
    if (v56.u32[0] > 1uLL)
    {
      v48 = v53;
      if (v53 >= v55)
        v48 = v53 % v55;
    }
    else
    {
      v48 = (v55 - 1) & v53;
    }
    v58 = *(unsigned __int8 ***)(*(_QWORD *)v51 + 8 * v48);
    if (v58)
    {
      for (i = *v58; i; i = *(unsigned __int8 **)i)
      {
        v60 = *((_QWORD *)i + 1);
        if (v60 == v54)
        {
          if ((sub_20B8288BC(v51 + 32, i + 16, (unsigned __int8 *)&ptr) & 1) != 0)
          {
            v97 = v100;
            v96 = v44 - 1;
            goto LABEL_138;
          }
        }
        else
        {
          if (v57 > 1)
          {
            if (v60 >= v55)
              v60 %= v55;
          }
          else
          {
            v60 &= v55 - 1;
          }
          if (v60 != v48)
            break;
        }
      }
    }
  }
  v61 = operator new(0x38uLL);
  v62 = (_QWORD *)(v51 + 16);
  *(_QWORD *)&buf = v61;
  *((_QWORD *)&buf + 1) = v51 + 16;
  v116 = 0;
  *v61 = 0;
  v61[1] = v54;
  v63 = v61 + 2;
  if (SHIBYTE(v113) < 0)
  {
    sub_20B80ACE0(v63, (void *)ptr, *((unint64_t *)&ptr + 1));
  }
  else
  {
    *(_OWORD *)v63 = ptr;
    v61[4] = v113;
  }
  v61[5] = 0;
  v61[6] = 0;
  v116 = 1;
  v64 = (float)(unint64_t)(*(_QWORD *)(v51 + 24) + 1);
  v65 = *(float *)(v51 + 32);
  if (!v55 || (float)(v65 * (float)v55) < v64)
  {
    v66 = 1;
    if (v55 >= 3)
      v66 = (v55 & (v55 - 1)) != 0;
    v67 = v66 | (2 * v55);
    v68 = vcvtps_u32_f32(v64 / v65);
    if (v67 <= v68)
      prime = (int8x8_t)v68;
    else
      prime = (int8x8_t)v67;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v55 = *(_QWORD *)(v51 + 8);
    if (*(_QWORD *)&prime <= v55)
    {
      if (*(_QWORD *)&prime < v55)
      {
        v76 = vcvtps_u32_f32((float)*(unint64_t *)(v51 + 24) / *(float *)(v51 + 32));
        if (v55 < 3 || (v77 = (uint8x8_t)vcnt_s8((int8x8_t)v55), v77.i16[0] = vaddlv_u8(v77), v77.u32[0] > 1uLL))
        {
          v76 = std::__next_prime(v76);
        }
        else
        {
          v78 = 1 << -(char)__clz(v76 - 1);
          if (v76 >= 2)
            v76 = v78;
        }
        if (*(_QWORD *)&prime <= v76)
          prime = (int8x8_t)v76;
        if (*(_QWORD *)&prime >= v55)
        {
          v55 = *(_QWORD *)(v51 + 8);
        }
        else
        {
          if (prime)
            goto LABEL_94;
          v98 = *(void **)v51;
          *(_QWORD *)v51 = 0;
          if (v98)
            operator delete(v98);
          v55 = 0;
          *(_QWORD *)(v51 + 8) = 0;
        }
      }
    }
    else
    {
LABEL_94:
      if (*(_QWORD *)&prime >> 61)
        sub_20B800BC0();
      v70 = operator new(8 * *(_QWORD *)&prime);
      v71 = *(void **)v51;
      *(_QWORD *)v51 = v70;
      if (v71)
        operator delete(v71);
      v72 = 0;
      *(int8x8_t *)(v51 + 8) = prime;
      do
        *(_QWORD *)(*(_QWORD *)v51 + 8 * v72++) = 0;
      while (*(_QWORD *)&prime != v72);
      v73 = (_QWORD *)*v62;
      if (*v62)
      {
        v74 = v73[1];
        v75 = (uint8x8_t)vcnt_s8(prime);
        v75.i16[0] = vaddlv_u8(v75);
        if (v75.u32[0] > 1uLL)
        {
          if (v74 >= *(_QWORD *)&prime)
            v74 %= *(_QWORD *)&prime;
        }
        else
        {
          v74 &= *(_QWORD *)&prime - 1;
        }
        *(_QWORD *)(*(_QWORD *)v51 + 8 * v74) = v62;
        v79 = (_QWORD *)*v73;
        if (*v73)
        {
          do
          {
            v80 = v79[1];
            if (v75.u32[0] > 1uLL)
            {
              if (v80 >= *(_QWORD *)&prime)
                v80 %= *(_QWORD *)&prime;
            }
            else
            {
              v80 &= *(_QWORD *)&prime - 1;
            }
            if (v80 != v74)
            {
              if (!*(_QWORD *)(*(_QWORD *)v51 + 8 * v80))
              {
                *(_QWORD *)(*(_QWORD *)v51 + 8 * v80) = v73;
                goto LABEL_119;
              }
              *v73 = *v79;
              *v79 = **(_QWORD **)(*(_QWORD *)v51 + 8 * v80);
              **(_QWORD **)(*(_QWORD *)v51 + 8 * v80) = v79;
              v79 = v73;
            }
            v80 = v74;
LABEL_119:
            v73 = v79;
            v79 = (_QWORD *)*v79;
            v74 = v80;
          }
          while (v79);
        }
      }
      v55 = (unint64_t)prime;
    }
    if ((v55 & (v55 - 1)) != 0)
    {
      if (v54 >= v55)
        v48 = v54 % v55;
      else
        v48 = v54;
    }
    else
    {
      v48 = (v55 - 1) & v54;
    }
  }
  v81 = *(unsigned __int8 ***)(*(_QWORD *)v51 + 8 * v48);
  i = (unsigned __int8 *)buf;
  if (v81)
  {
    *(_QWORD *)buf = *v81;
    v97 = v100;
    v96 = v44 - 1;
    goto LABEL_136;
  }
  *(_QWORD *)buf = *(_QWORD *)(v51 + 16);
  *(_QWORD *)(v51 + 16) = i;
  *(_QWORD *)(*(_QWORD *)v51 + 8 * v48) = v62;
  v97 = v100;
  v96 = v44 - 1;
  if (*(_QWORD *)i)
  {
    v82 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v55 & (v55 - 1)) != 0)
    {
      if (v82 >= v55)
        v82 %= v55;
    }
    else
    {
      v82 &= v55 - 1;
    }
    v81 = (unsigned __int8 **)(*(_QWORD *)v51 + 8 * v82);
LABEL_136:
    *v81 = i;
  }
  *(_QWORD *)&buf = 0;
  ++*(_QWORD *)(v51 + 24);
  sub_20B876070((uint64_t *)&buf);
LABEL_138:
  v83 = (std::__shared_weak_count *)*((_QWORD *)i + 6);
  *((_QWORD *)i + 5) = v97;
  *((_QWORD *)i + 6) = v49;
  v2 = v101;
  if (v83)
    std::__shared_weak_count::__release_weak(v83);
  v84 = sub_20B9A7C5C(0xDu);
  if (v96 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v85 = v84;
    if (os_signpost_enabled(v84))
    {
      LOWORD(buf) = 0;
      _os_signpost_emit_with_name_impl(&dword_20B7F7000, v85, OS_SIGNPOST_INTERVAL_END, v44, "SingletonResourceManagerLoad", (const char *)&unk_20BA9505F, (uint8_t *)&buf, 2u);
    }
  }
LABEL_143:
  std::mutex::unlock(&stru_2547299F8);
  v86 = (std::__shared_weak_count *)*((_QWORD *)&v114 + 1);
  v102 = v114;
  if (!*((_QWORD *)&v114 + 1))
    goto LABEL_148;
  v87 = (unint64_t *)(*((_QWORD *)&v114 + 1) + 8);
  do
    v88 = __ldxr(v87);
  while (__stxr(v88 + 1, v87));
  do
    v89 = __ldaxr(v87);
  while (__stlxr(v89 - 1, v87));
  if (!v89)
  {
    ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
    std::__shared_weak_count::__release_weak(v86);
    if (v2)
      goto LABEL_149;
  }
  else
  {
LABEL_148:
    if (v2)
    {
LABEL_149:
      if (!*((_BYTE *)v109 + 24))
        sub_20B9F8198(v102);
    }
  }
  _Block_object_dispose(&v108, 8);
  if (SHIBYTE(v113) < 0)
    operator delete((void *)ptr);
  v90 = *(std::__shared_weak_count **)(a1 + 128);
  *(_OWORD *)(a1 + 120) = v102;
  if (v90)
  {
    v91 = (unint64_t *)&v90->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
}

#error "20B9F7C10: call analysis failed (funcsize=32)"

uint64_t sub_20B9F7C44(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_20B876164((const void **)(a1 + 160), 0);
  sub_20B876164((const void **)(a1 + 152), 0);
  sub_20B876164((const void **)(a1 + 144), 0);
  sub_20B811FE4(a1 + 120);
  sub_20B811FE4(a1 + 104);
  sub_20B811FE4(a1 + 88);
  sub_20B811FE4(a1 + 72);
  sub_20B811FE4(a1 + 56);
  sub_20B811FE4(a1 + 40);
  sub_20B811FE4(a1 + 24);
  sub_20B811FE4(a1 + 8);
  return a1;
}

void sub_20B9F7CE0(uint64_t *a1, int a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;

  sub_20B9689BC(*(uint64_t **)(a1[9] + 8));
  v4 = a1[5];
  if (v4)
  {
    sub_20B87646C(a1[5]);
    v5 = atomic_load((unsigned int *)(v4 + 40));
    if (v5 == 2)
    {
      if (*(_QWORD *)v4)
      {
        v6 = a1[5];
        sub_20B87646C(v6);
        atomic_load((unsigned int *)(v6 + 40));
        LMLanguageModelReset();
      }
    }
  }
  if (a2)
  {
    v7 = a1[3];
    if (v7)
    {
      sub_20B87646C(a1[3]);
      v8 = atomic_load((unsigned int *)(v7 + 40));
      if (v8 == 2)
      {
        if (*(_QWORD *)v7)
        {
          v9 = a1[3];
          sub_20B87646C(v9);
          atomic_load((unsigned int *)(v9 + 40));
          LMLanguageModelReset();
        }
      }
    }
  }
  sub_20B875474(a1[1]);
}

void sub_20B9F7DAC(uint64_t *a1)
{
  uint64_t v1;
  NSObject *v3;
  os_signpost_id_t v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  uint8_t v10[16];
  uint8_t v11[16];
  uint8_t buf[16];

  v1 = a1[17];
  if (v1 && *(_BYTE *)(v1 + 4))
  {
    v3 = sub_20B9A7C5C(0xDu);
    v4 = os_signpost_id_make_with_pointer(v3, a1);
    v5 = sub_20B9A7C5C(0xDu);
    if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v6 = v5;
      if (os_signpost_enabled(v5))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_20B7F7000, v6, OS_SIGNPOST_INTERVAL_BEGIN, v4, "LanguageModelLoaderReload", "Reload for LMLoader", buf, 2u);
      }
    }
    sub_20B874EB8(a1[1]);
    v7 = sub_20B9A7C5C(0xDu);
    if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v8 = v7;
      if (os_signpost_enabled(v7))
      {
        *(_WORD *)v11 = 0;
        _os_signpost_emit_with_name_impl(&dword_20B7F7000, v8, OS_SIGNPOST_INTERVAL_END, v4, "LanguageModelLoaderReload", (const char *)&unk_20BA9505F, v11, 2u);
      }
    }
    *(_BYTE *)(a1[17] + 4) = 0;
    v9 = sub_20B9A7C5C(9u);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v10 = 0;
      _os_log_debug_impl(&dword_20B7F7000, v9, OS_LOG_TYPE_DEBUG, "[Mecabra] Reset language model", v10, 2u);
    }
  }
}

void sub_20B9F7EF4(uint64_t a1)
{
  uint64_t v2;
  const __CFString *v3;
  const __CFAllocator *v4;
  const __CFURL *v5;
  CFURLRef PathComponent;
  uint64_t v7;
  CFURLRef v8;

  if (*(_DWORD *)a1 == 1)
  {
    v2 = *(_QWORD *)(a1 + 136);
    if (*(_BYTE *)(v2 + 5))
    {
      v3 = *(const __CFString **)(v2 + 128);
      if (v3)
      {
        v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v5 = CFURLCreateWithFileSystemPath((CFAllocatorRef)*MEMORY[0x24BDBD240], v3, kCFURLPOSIXPathStyle, 1u);
        PathComponent = CFURLCreateCopyDeletingLastPathComponent(v4, v5);
        sub_20B876164((const void **)(a1 + 160), PathComponent);
        v7 = *(_QWORD *)(a1 + 8);
        v8 = CFURLCreateCopyDeletingLastPathComponent(v4, v5);
        sub_20B876164((const void **)(v7 + 16), v8);
        if (v5)
          CFRelease(v5);
      }
      else
      {
        sub_20B876164((const void **)(a1 + 160), 0);
        sub_20B876164((const void **)(*(_QWORD *)(a1 + 8) + 16), 0);
      }
      *(_BYTE *)(*(_QWORD *)(a1 + 136) + 5) = 0;
    }
  }
}

void sub_20B9F7FCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B876164((const void **)va, 0);
  _Unwind_Resume(a1);
}

void sub_20B9F7FE4(int *a1)
{
  int v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;

  if (*(_BYTE *)(*((_QWORD *)a1 + 17) + 6))
  {
    v2 = *a1;
    if (*a1 == 2)
    {
      sub_20B873F7C(2u, *((_BYTE *)a1 + 5), 1, (uint64_t *)&v9);
      sub_20B82E770((uint64_t)(a1 + 6), &v9);
      v3 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
      if (*((_QWORD *)&v9 + 1))
      {
        v4 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
        do
          v5 = __ldaxr(v4);
        while (__stlxr(v5 - 1, v4));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
      v2 = *a1;
    }
    if (v2 == 1)
    {
      sub_20B925260(1u, 1, (uint64_t *)&v9);
      sub_20B82E770((uint64_t)(a1 + 14), &v9);
      v6 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
      if (*((_QWORD *)&v9 + 1))
      {
        v7 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    *(_BYTE *)(*((_QWORD *)a1 + 17) + 6) = 0;
  }
}

void sub_20B9F80E0(uint64_t a1, int a2)
{
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  if (*(_DWORD *)a1 == a2)
  {
    sub_20B874EB8(*(_QWORD *)(a1 + 8));
    sub_20B87A240(*(_QWORD *)(a1 + 72));
    sub_20B978FA8(*(_QWORD *)(a1 + 88));
    sub_20B9F8198(*(_QWORD *)(a1 + 120));
  }
  else
  {
    *(_DWORD *)a1 = a2;
    sub_20B9F6FFC(a1, 1);
    v6 = 0uLL;
    sub_20B82E770(a1 + 24, &v6);
    v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
    if (*((_QWORD *)&v6 + 1))
    {
      v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 - 1, v4));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
}

uint64_t sub_20B9F8198(uint64_t a1)
{
  unsigned int *v2;

  v2 = (unsigned int *)operator new();
  sub_20B978424(v2, *(_DWORD *)a1);
  return sub_20B96F84C((uint64_t *)(a1 + 8), (uint64_t)v2);
}

void sub_20B9F81E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x1070C40FE1C109FLL);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9F8204(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;

  v1 = a1;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  v2 = operator new();
  LODWORD(v1) = *(_DWORD *)(v1 + 40);
  *(_DWORD *)v2 = v1;
  v3 = (unsigned int *)operator new();
  sub_20B978424(v3, v1);
  *(_QWORD *)(v2 + 8) = v3;
  return v2;
}

void sub_20B9F8288(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x20BD39CB0](v2, 0x1070C40FE1C109FLL);
  MEMORY[0x20BD39CB0](v1, 0x1020C40D5A9D86FLL);
  _Unwind_Resume(a1);
}

void sub_20B9F82D0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B9F82F4(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    sub_20B96F84C((uint64_t *)(v1 + 8), 0);
    JUMPOUT(0x20BD39CB0);
  }
  return result;
}

uint64_t sub_20B9F8340(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45E610))
    return a1 + 24;
  else
    return 0;
}

uint64_t *sub_20B9F8380(uint64_t *result)
{
  uint64_t v1;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    sub_20B96F84C((uint64_t *)(v1 + 8), 0);
    JUMPOUT(0x20BD39CB0);
  }
  return result;
}

uint64_t sub_20B9F83D8(int a1, __CFDictionary *a2, void *lpsrc)
{
  uint64_t result;
  _QWORD *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  CFNumberRef v10;
  uint64_t valuePtr;

  if (!lpsrc)
    return 0;
  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C5C8, 0);
  if (!result)
    return result;
  v5 = (_QWORD *)result;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 96))(result);
  if (v6 != 76 && v6 != 74)
    return 0;
  if ((*(unsigned int (**)(_QWORD *))(*v5 + 408))(v5) != 2)
    return 0;
  if (((*(uint64_t (**)(_QWORD *))(*v5 + 200))(v5) & 1) != 0)
    return 0;
  v7 = v5[20];
  (*(void (**)(_QWORD *))(*v5 + 552))(v5);
  if (v7 > v8)
    return 0;
  (*(void (**)(_QWORD *))(*v5 + 552))(v5);
  valuePtr = v9 - v5[20];
  v10 = CFNumberCreate(0, kCFNumberCFIndexType, &valuePtr);
  CFDictionaryAddValue(a2, CFSTR("phraseLearningCandidateKeystrokeSavings"), v10);
  if (v10)
    CFRelease(v10);
  return 1;
}

void sub_20B9F84FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  sub_20B88AE28(&a9, 0);
  _Unwind_Resume(a1);
}

void sub_20B9F8518()
{
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B9F852C(uint64_t a1, int a2)
{
  uint64_t *v4;

  v4 = sub_20B947CC4();
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = CFStringCreateWithCharacters(0, (const UniChar *)*v4, v4[1]);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 28) = a2;
  *(_QWORD *)(a1 + 32) = 0xD00000001;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 64) = a2 & 1;
  return a1;
}

void sub_20B9F8588(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t ***v4;
  uint64_t **v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  unsigned int v12;
  int v13;
  char v14;
  uint64_t **v15;
  uint64_t **v16;
  char v17;
  uint64_t *v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  uint64_t ***v26;

  *(_BYTE *)(a1 + 64) = 1;
  v4 = *(uint64_t ****)(a2 + 40);
  v26 = *(uint64_t ****)(a2 + 48);
  if (v4 != v26)
  {
    while (1)
    {
      v5 = *v4;
      v6 = (*v4)[1];
      if (v6[10])
      {
        v7 = *v6;
        if (*v6)
        {
          v8 = *v5;
          v9 = (*v5)[2];
          if (v9)
          {
            v10 = *(_DWORD *)(v9 + 36);
            v11 = v10 > 0x11;
            v12 = (0x1B1FFu >> v10) & 1;
            v13 = v11 ? 1 : v12;
          }
          else
          {
            v13 = 1;
          }
          if ((*(unsigned int (**)(uint64_t *))(*v8 + 104))(*v5))
          {
            v14 = (*(uint64_t (**)(uint64_t *))(*v8 + 40))(v8);
            v16 = *(uint64_t ***)(a1 + 40);
            v15 = *(uint64_t ***)(a1 + 48);
            if (v16 != v15)
              break;
          }
        }
      }
LABEL_27:
      if (++v4 == v26)
        return;
    }
    v17 = v14;
    while (1)
    {
      v18 = *v16;
      v19 = (_DWORD *)**v16;
      if (!v19
        || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 104))(**v16)
        || ((*(uint64_t (**)(_DWORD *))(*(_QWORD *)v19 + 40))(v19) & 4) != 0
        && (*((_DWORD *)v8 + 2) - 1) > 1
        || (v17 & 4) != 0 && (v19[2] - 1) > 1)
      {
        goto LABEL_26;
      }
      v20 = v18[1];
      v21 = *(_QWORD *)(v20 + 88);
      if (v21)
      {
        v22 = *(double *)(v21 + 16);
        v23 = 1.79769313e308;
        if (v22 != 1.79769313e308)
          v23 = v22 + 2.2;
        if (!v13)
        {
LABEL_25:
          sub_20B9F3AF4(v20, *v18, v5[1], (uint64_t)*v5, a4);
          goto LABEL_26;
        }
      }
      else
      {
        v23 = 1.79769313e308;
        if (!v13)
          goto LABEL_25;
      }
      if (*(double *)(v7 + 16) <= v23)
        goto LABEL_25;
LABEL_26:
      if (++v16 == v15)
        goto LABEL_27;
    }
  }
}

uint64_t sub_20B9F8740@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __CFArray *Mutable;
  uint64_t v11;
  uint64_t v12;
  __CFString *v13;
  const __CFString *v14;
  const __CFString *v15;
  char *v16;
  size_t v17;
  _QWORD *v18;
  const std::locale::facet *v19;
  uint64_t v20;
  char *__s;
  void *__p[2];
  unsigned __int8 v24;
  _QWORD v25[2];
  uint64_t v26;
  _QWORD v27[10];
  char v28;
  uint64_t v29;

  sub_20B83BFEC((uint64_t)v25);
  sub_20B9F8E00((int **)a1, __p);
  if ((v24 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v24 & 0x80u) == 0)
    v7 = v24;
  else
    v7 = (uint64_t)__p[1];
  sub_20B828F84(&v26, (uint64_t)v6, v7);
  if ((char)v24 < 0)
    operator delete(__p[0]);
  v9 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  if (v8 != v9)
  {
    v11 = 0;
    if ((unint64_t)((v8 - v9) >> 3) <= 1)
      v12 = 1;
    else
      v12 = (v8 - v9) >> 3;
    do
    {
      v13 = sub_20B9DC0F4(**(_DWORD ***)(*(_QWORD *)(a1 + 40) + 8 * v11), a2, 1);
      CFArrayAppendValue(Mutable, v13);
      CFRelease(v13);
      ++v11;
    }
    while (v12 != v11);
  }
  v14 = CFStringCreateByCombiningStrings(0, Mutable, CFSTR(" "));
  CFRelease(Mutable);
  v15 = sub_20B88F3EC(a2, v14);
  sub_20B8D154C(v15, &__s);
  CFRelease(v15);
  v16 = __s;
  v17 = strlen(__s);
  v18 = sub_20B828F84(&v26, (uint64_t)__s, v17);
  std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(_QWORD *)(*v18 - 24)));
  v19 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  CFRelease(v14);
  sub_20B871648((uint64_t)v27, a3);
  if (v16)
    MEMORY[0x20BD39C80](v16, 0x1000C8077774924);
  v25[0] = *MEMORY[0x24BEDB7F0];
  v20 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v25 + *(_QWORD *)(v25[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v26 = v20;
  v27[0] = MEMORY[0x24BEDB848] + 16;
  if (v28 < 0)
    operator delete((void *)v27[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x20BD39C2C](&v29);
}

void sub_20B9F899C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  sub_20B83C118((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9F8D54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8)
{
  CFIndex v15;
  CFStringRef v16;

  *(_QWORD *)a1 = a2;
  v15 = *(_QWORD *)(a3 + 8);
  if (!a2 || v15)
    v16 = CFStringCreateWithCharacters(0, *(const UniChar **)a3, v15);
  else
    v16 = sub_20B9D66F0(a2);
  *(_QWORD *)(a1 + 8) = v16;
  *(_QWORD *)(a1 + 16) = a4;
  *(_DWORD *)(a1 + 24) = a5;
  *(_DWORD *)(a1 + 28) = a6;
  *(_DWORD *)(a1 + 32) = a8;
  *(_DWORD *)(a1 + 36) = a7;
  return a1;
}

uint64_t sub_20B9F8DD0(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 8);
  if (v2)
    CFRelease(v2);
  return a1;
}

uint64_t sub_20B9F8E00@<X0>(int **a1@<X0>, _QWORD *a2@<X8>)
{
  int *v4;
  _QWORD *v5;
  const std::locale::facet *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  const __CFString *v12;
  void *locale;
  uint64_t v14;
  _QWORD *v15;
  const std::locale::facet *v16;
  uint64_t v17;
  _QWORD *v18;
  const std::locale::facet *v19;
  _QWORD *v20;
  const std::locale::facet *v21;
  _QWORD *v22;
  _QWORD *v23;
  const std::locale::facet *v24;
  uint64_t v25;
  std::locale v27;
  uint64_t v28;
  unsigned __int8 v29;
  _QWORD v30[2];
  uint64_t v31;
  _QWORD v32[10];
  char v33;
  uint64_t v34;

  v4 = *a1;
  sub_20B83BFEC((uint64_t)v30);
  if (v4)
  {
    sub_20B828F84(&v31, (uint64_t)"type = ", 7);
    v5 = (_QWORD *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(_QWORD *)(*v5 - 24)));
    v6 = std::locale::use_facet(&v27, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
    std::locale::~locale(&v27);
    std::ostream::put();
    std::ostream::flush();
    sub_20B828F84(&v31, (uint64_t)"syllable IDs: ", 14);
    v7 = *((_QWORD *)*a1 + 1);
    if (v7)
    {
      v8 = (unsigned __int16 *)*((_QWORD *)*a1 + 2);
      v9 = *((_QWORD *)*a1 + 1);
      do
      {
        v10 = (_QWORD *)std::ostream::operator<<();
        v11 = sub_20B828F84(v10, (uint64_t)"(", 1);
        v12 = (const __CFString *)sub_20B9E08C0(*v8, **a1);
        sub_20B8D1C98(v12, &v27);
        if ((v29 & 0x80u) == 0)
          locale = &v27;
        else
          locale = v27.__locale_;
        if ((v29 & 0x80u) == 0)
          v14 = v29;
        else
          v14 = v28;
        v15 = sub_20B828F84(v11, (uint64_t)locale, v14);
        sub_20B828F84(v15, (uint64_t)"), ", 3);
        if ((char)v29 < 0)
          operator delete(v27.__locale_);
        ++v8;
        --v9;
      }
      while (v9);
    }
    std::ios_base::getloc((const std::ios_base *)((char *)&v32[-1] + *(_QWORD *)(v31 - 24)));
    v16 = std::locale::use_facet(&v27, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
    std::locale::~locale(&v27);
    std::ostream::put();
    std::ostream::flush();
    sub_20B828F84(&v31, (uint64_t)"Syllable Lengths:", 17);
    if (v7)
    {
      v17 = *((_QWORD *)*a1 + 4) + 2;
      do
      {
        v18 = (_QWORD *)std::ostream::operator<<();
        sub_20B828F84(v18, (uint64_t)", ", 2);
        v17 += 4;
        --v7;
      }
      while (v7);
    }
    std::ios_base::getloc((const std::ios_base *)((char *)&v32[-1] + *(_QWORD *)(v31 - 24)));
    v19 = std::locale::use_facet(&v27, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
    std::locale::~locale(&v27);
    std::ostream::put();
    std::ostream::flush();
  }
  else
  {
    v20 = sub_20B828F84(&v31, (uint64_t)"synthetic word group:", 21);
    std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(_QWORD *)(*v20 - 24)));
    v21 = std::locale::use_facet(&v27, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
    std::locale::~locale(&v27);
    std::ostream::put();
    std::ostream::flush();
  }
  sub_20B828F84(&v31, (uint64_t)"length = ", 9);
  v22 = (_QWORD *)std::ostream::operator<<();
  sub_20B828F84(v22, (uint64_t)", trieValue = ", 14);
  v23 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(_QWORD *)(*v23 - 24)));
  v24 = std::locale::use_facet(&v27, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
  std::locale::~locale(&v27);
  std::ostream::put();
  std::ostream::flush();
  sub_20B871648((uint64_t)v32, a2);
  v30[0] = *MEMORY[0x24BEDB7F0];
  v25 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v30 + *(_QWORD *)(v30[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v31 = v25;
  v32[0] = MEMORY[0x24BEDB848] + 16;
  if (v33 < 0)
    operator delete((void *)v32[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x20BD39C2C](&v34);
}

void sub_20B9F91FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::locale::~locale(&a10);
  sub_20B83C118((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9F925C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = operator new();
  sub_20B9FD644(v6, a1, a2, a3);
  return v6;
}

void sub_20B9F92B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10F1C409A65B6B8);
  _Unwind_Resume(a1);
}

void sub_20B9F92DC(_QWORD **a1, _QWORD *a2, uint64_t a3, uint64_t a4, int a5)
{
  NSObject *v8;
  char *v9;
  unint64_t v10;
  UniChar *v11;
  unint64_t v12;
  _QWORD *v13;
  void **v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned __int16 *v22;
  int v23;
  int v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  void **v30;
  void **i;
  int v32;
  void *v33;
  unint64_t v34;
  unint64_t v35;
  UniChar *v36;
  int v37;
  char v38;
  char v39;
  int v40;
  void **v41;
  _QWORD *v42;
  uint64_t v43;
  void **v44;
  _QWORD *v45;
  _QWORD *j;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  int v52;
  unint64_t v53;
  int v54;
  int v55;
  unint64_t v56;
  int v57;
  unsigned __int8 v58;
  __int128 *v59;
  uint64_t v60;
  CFStringRef v61;
  uint64_t v62;
  void **v65;
  void **v66[3];
  uint64_t v67;
  _QWORD v68[3];
  _QWORD *v69;
  _QWORD v70[3];
  _QWORD *v71;
  _QWORD v72[3];
  _QWORD *v73;
  _QWORD v74[3];
  _QWORD *v75;
  __int128 buf;
  _QWORD *v77;
  __int128 *p_buf;
  uint64_t v79;

  v79 = *MEMORY[0x24BDAC8D0];
  v8 = sub_20B9A7C5C(5u);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    v61 = CFStringCreateWithCharacters(0, *(const UniChar **)a3, *(_QWORD *)(a3 + 8));
    LODWORD(buf) = 138412290;
    *(_QWORD *)((char *)&buf + 4) = v61;
    _os_log_debug_impl(&dword_20B7F7000, v8, OS_LOG_TYPE_DEBUG, "[ThaiAutocorrector::analyze] analysisStr: [%@]", (uint8_t *)&buf, 0xCu);
  }
  v9 = *(char **)(a3 + 32);
  v10 = *(_QWORD *)(a3 + 40);
  v11 = *(UniChar **)a3;
  v12 = *(_QWORD *)(a3 + 8);
  v13 = operator new(8uLL);
  *v13 = v12;
  *(_QWORD *)&buf = v13;
  v77 = v13 + 1;
  *((_QWORD *)&buf + 1) = v13 + 1;
  v14 = (void **)operator new(2uLL);
  *(_WORD *)v14 = 0;
  v66[1] = (void **)((char *)v14 + 2);
  v66[2] = (void **)((char *)v14 + 2);
  v66[0] = v14;
  sub_20B9F9AC0(&v67, v9, v10, v11, v12, (__int16 **)&buf, v66, 0, 0.0, 0, 83);
  operator delete(v14);
  operator delete(v13);
  v15 = v67;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v67 + 480))(v67, 1);
  v67 = 0;
  *(_QWORD *)&buf = v15;
  v74[0] = &unk_24C459188;
  v75 = v74;
  sub_20B8FDA94(a2, (_QWORD **)&buf, 1, 0, (uint64_t)v74);
  v16 = v75;
  if (v75 == v74)
  {
    v17 = 4;
    v16 = v74;
  }
  else
  {
    if (!v75)
      goto LABEL_8;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_8:
  v18 = buf;
  *(_QWORD *)&buf = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
  v19 = *(_QWORD *)(a3 + 40);
  if (v19
    && (v20 = *(_QWORD *)(a3 + 32),
        v21 = v20 + 2 * v19,
        v24 = *(unsigned __int16 *)(v21 - 2),
        v22 = (unsigned __int16 *)(v21 - 2),
        v23 = v24,
        (unint64_t)v22 >= v20))
  {
    v25 = 0;
    do
    {
      if (*v22 != v23 || v25 > 2)
        break;
      ++v25;
      --v22;
    }
    while ((unint64_t)v22 >= v20);
  }
  else
  {
    v25 = 0;
  }
  if (!(*(unsigned int (**)(_QWORD *))(*a1[2] + 24))(a1[2]))
    goto LABEL_56;
  v26 = *(_QWORD **)(a3 + 64);
  if (!v26 || v25 == 3)
    goto LABEL_56;
  v72[0] = &off_24C46B0B0;
  v72[1] = a1;
  v73 = v72;
  sub_20B9DA77C(v26, 0xFFuLL, (uint64_t)v72, (uint64_t *)&buf);
  v62 = a4;
  v27 = v73;
  if (v73 == v72)
  {
    v28 = 4;
    v27 = v72;
    goto LABEL_27;
  }
  if (v73)
  {
    v28 = 5;
LABEL_27:
    (*(void (**)(void))(*v27 + 8 * v28))();
  }
  v30 = (void **)*((_QWORD *)&buf + 1);
  for (i = (void **)buf; i != v30; i += 10)
  {
    v32 = *((char *)i + 23);
    if (v32 >= 0)
      v33 = i;
    else
      v33 = *i;
    if (v32 >= 0)
      v34 = *((unsigned __int8 *)i + 23);
    else
      v34 = (unint64_t)i[1];
    v35 = *(_QWORD *)(a3 + 8);
    if (v34 == v35)
    {
      v36 = *(UniChar **)a3;
      v37 = memcmp(v33, *(const void **)a3, 2 * v34);
      v38 = 0;
      v39 = v37 != 0;
      if (v37)
        v40 = 0;
      else
        v40 = 83;
    }
    else
    {
      v36 = *(UniChar **)a3;
      v38 = v34 > v35;
      if (v34 <= v35)
        v40 = 0;
      else
        v40 = 71;
      v39 = 1;
    }
    sub_20B9F9AC0((uint64_t *)v66, (char *)v33, v34, v36, v35, (__int16 **)i + 3, i + 6, v39, *((float *)i + 18), v38, v40);
    v41 = v66[0];
    (*((void (**)(void **, uint64_t, const char *, uint64_t))*v66[0] + 66))(v66[0], 3, "[ThaiAutocorrector::analyze NBestResults]", 1);
    if ((v39 & 1) != 0)
    {
      v65 = v41;
      v66[0] = 0;
      v68[0] = &unk_24C459188;
      v69 = v68;
      sub_20B8FDA94(a2, &v65, 2, 0, (uint64_t)v68);
      v42 = v69;
      if (v69 == v68)
      {
        v42 = v68;
LABEL_50:
        v43 = 4;
        goto LABEL_51;
      }
    }
    else
    {
      v65 = v41;
      v66[0] = 0;
      v70[0] = &unk_24C459188;
      v71 = v70;
      sub_20B8FDA94(a2, &v65, 1, 0, (uint64_t)v70);
      v42 = v71;
      if (v71 == v70)
      {
        v42 = v70;
        goto LABEL_50;
      }
    }
    if (v42)
    {
      v43 = 5;
LABEL_51:
      (*(void (**)(void))(*v42 + 8 * v43))();
    }
    v44 = v65;
    v65 = 0;
    if (v44)
      (*((void (**)(void **))*v44 + 2))(v44);
  }
  v66[0] = (void **)&buf;
  sub_20B88DA08(v66);
  a4 = v62;
LABEL_56:
  ((void (*)(_QWORD **, _QWORD *, uint64_t))(*a1)[3])(a1, a2, a4);
  v45 = (_QWORD *)a2[6];
  for (j = (_QWORD *)a2[7]; v45 != j; ++v45)
  {
    v47 = *v45;
    if (*v45)
    {
      v48 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v47 + 112))(*v45);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v47 + 96))(v47) == 71)
      {
        v49 = *(unsigned __int8 *)(v47 + 55);
        v50 = *(unsigned __int8 *)(v47 + 87);
        if ((v50 & 0x80u) != 0)
          v50 = *(_DWORD *)(v47 + 72);
        if ((v49 & 0x80u) != 0)
          v49 = *(_DWORD *)(v47 + 40);
        v51 = v49 - v50;
        if (v51 <= 0)
          v52 = 0;
        else
          v52 = 8000 * v51;
        v48 = (v52 + v48);
      }
      else if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v47 + 96))(v47) == 83)
      {
        if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 48))(v47))
        {
          v53 = 0;
          v54 = 0;
          do
          {
            v55 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v47 + 128))(v47, v53);
            v56 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 48))(v47);
            ++v53;
            if (v55 == 1)
              v57 = 0;
            else
              v57 = v55;
            v54 += v57;
          }
          while (v53 < v56);
        }
        else
        {
          v54 = 0;
        }
        v48 = (v48 - 3000 * v54);
      }
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v45 + 480))(*v45, v48);
    }
  }
  if ((a5 & 0x800000) == 0)
  {
    v58 = atomic_load((unsigned __int8 *)&qword_25472C0E8);
    if ((v58 & 1) == 0 && __cxa_guard_acquire(&qword_25472C0E8))
    {
      qword_25472C0F0 = 3;
      xmmword_25472C0F8 = xmmword_20BA39DA0;
      __cxa_guard_release(&qword_25472C0E8);
    }
    *(_QWORD *)&buf = &off_24C46B058;
    p_buf = &buf;
    sub_20B9D79B8((uint64_t)a1, a2, (uint64_t)&qword_25472C0F0, (uint64_t)&buf);
    v59 = p_buf;
    if (p_buf == &buf)
    {
      v60 = 4;
      v59 = &buf;
      goto LABEL_85;
    }
    if (p_buf)
    {
      v60 = 5;
LABEL_85:
      (*(void (**)(void))(*(_QWORD *)v59 + 8 * v60))();
    }
  }
  sub_20B9D77C4((uint64_t)a1, a2);
}

void sub_20B9F994C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char *a30)
{
  char *v30;
  char *v32;
  uint64_t v33;

  v32 = a30;
  if (a30 == v30)
  {
    v33 = 4;
    v32 = &a27;
  }
  else
  {
    if (!a30)
      goto LABEL_6;
    v33 = 5;
  }
  (*(void (**)(char *))(*(_QWORD *)v32 + 8 * v33))(v32);
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_20B9F9AC0(uint64_t *a1, char *a2, unint64_t a3, void *a4, unint64_t a5, __int16 **a6, _QWORD *a7, char a8, float a9, char a10, int a11)
{
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  __int16 *v22;
  __int16 *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  __int16 v27;
  int v28;
  __int128 v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  _WORD *v41;
  unint64_t v42;
  int v44[2];
  _WORD *v46;
  _WORD *v47;
  char *v48;
  _DWORD v49[2];
  __int128 v50;
  int v51;
  void *__p;
  char *v53;
  char *v54;

  if (a10)
    v18 = 2;
  else
    v18 = 0;
  v19 = operator new();
  sub_20B9596C4(v19, a2, a3, a4, a5, a8, a11, 6, a9, v18, 0, 0);
  *a1 = v19;
  if (a10)
    v20 = a3 - a5;
  else
    v20 = 0;
  __p = 0;
  v53 = 0;
  v54 = 0;
  v21 = a1;
  sub_20B8B3708(&__p, ((char *)a6[1] - (char *)*a6) >> 3);
  v23 = *a6;
  v22 = a6[1];
  if (((char *)v22 - (char *)*a6) >> 3 != (uint64_t)(a7[1] - *a7) >> 1)
    __assert_rtn("makeWords", "ThaiAutocorrector.cpp", 25, "surfaceLengths.size() == wordFlags.size()");
  v42 = v20;
  *(_QWORD *)v44 = a3;
  if (v23 == v22)
  {
    v24 = 0;
  }
  else
  {
    v24 = 0;
    v25 = 0;
    v26 = v53;
    do
    {
      v50 = 0uLL;
      v51 = 0;
      v49[0] = 0;
      *(_DWORD *)((char *)v49 + 3) = 0;
      v27 = *v23;
      v28 = (16 * ((*(unsigned __int16 *)(*a7 + 2 * v25) >> 1) & 1)) | 1;
      if (v26 >= v54)
      {
        v30 = 0xCCCCCCCCCCCCCCCDLL * ((v26 - (_BYTE *)__p) >> 3);
        v31 = v30 + 1;
        if (v30 + 1 > 0x666666666666666)
          sub_20B8821D4();
        if (0x999999999999999ALL * ((v54 - (_BYTE *)__p) >> 3) > v31)
          v31 = 0x999999999999999ALL * ((v54 - (_BYTE *)__p) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((v54 - (_BYTE *)__p) >> 3) >= 0x333333333333333)
          v32 = 0x666666666666666;
        else
          v32 = v31;
        if (v32)
          v33 = (char *)sub_20B882310((uint64_t)&v54, v32);
        else
          v33 = 0;
        v34 = &v33[40 * v30];
        *((_QWORD *)v34 + 1) = 0;
        *((_QWORD *)v34 + 2) = 0;
        *(_QWORD *)v34 = 0;
        *((_WORD *)v34 + 12) = v27;
        *((_WORD *)v34 + 13) = v27;
        *((_WORD *)v34 + 14) = v27;
        *(_DWORD *)(v34 + 30) = 0;
        *(_DWORD *)(v34 + 33) = 0;
        v34[37] = v28;
        *((_WORD *)v34 + 19) = 0;
        v36 = (char *)__p;
        v35 = v53;
        v37 = v34;
        if (v53 != __p)
        {
          do
          {
            v38 = *(_OWORD *)(v35 - 40);
            v39 = *(_OWORD *)(v35 - 24);
            *((_QWORD *)v37 - 1) = *((_QWORD *)v35 - 1);
            *(_OWORD *)(v37 - 24) = v39;
            *(_OWORD *)(v37 - 40) = v38;
            v37 -= 40;
            v35 -= 40;
          }
          while (v35 != v36);
          v35 = v36;
        }
        v26 = v34 + 40;
        __p = v37;
        v53 = v34 + 40;
        v54 = &v33[40 * v32];
        if (v35)
          operator delete(v35);
      }
      else
      {
        *(_DWORD *)v26 = 0;
        v29 = v50;
        *((_DWORD *)v26 + 5) = v51;
        *(_OWORD *)(v26 + 4) = v29;
        *((_WORD *)v26 + 12) = v27;
        *((_WORD *)v26 + 13) = v27;
        *((_WORD *)v26 + 14) = v27;
        *(_DWORD *)(v26 + 30) = v49[0];
        *(_DWORD *)(v26 + 33) = *(_DWORD *)((char *)v49 + 3);
        v26[37] = v28;
        *((_WORD *)v26 + 19) = 0;
        v26 += 40;
      }
      v53 = v26;
      v40 = *(_QWORD *)v23;
      v23 += 4;
      v24 += v40;
      ++v25;
    }
    while (v23 != v22);
  }
  if (v24 != *(_QWORD *)v44)
  {
    v41 = __p;
    if (!__p)
      return;
    v53 = (char *)__p;
    goto LABEL_38;
  }
  v41 = v53;
  if (v42)
  {
    *((_WORD *)v53 - 7) -= v42;
    *(v41 - 6) -= v42;
  }
  v46 = __p;
  v47 = v41;
  v48 = v54;
  if (__p != v41)
  {
    (*(void (**)(uint64_t, _WORD **))(*(_QWORD *)*v21 + 520))(*v21, &v46);
    v41 = v46;
  }
  if (v41)
  {
    v47 = v41;
LABEL_38:
    operator delete(v41);
  }
}

void sub_20B9F9E44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _QWORD *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  uint64_t v23;

  if (__p)
    operator delete(__p);
  *a12 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
  _Unwind_Resume(a1);
}

void sub_20B9F9ECC(uint64_t a1@<X0>, _WORD *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  unint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  __int16 v26;
  int v27;
  _WORD *v28;
  unint64_t v29;
  _BYTE v30[24];
  _BYTE *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v28 = a2;
  v29 = a3;
  *(_QWORD *)a6 = &off_24C4613C8;
  *(_OWORD *)(a6 + 8) = 0u;
  *(_OWORD *)(a6 + 24) = 0u;
  *(_OWORD *)(a6 + 40) = 0u;
  *(_OWORD *)(a6 + 56) = 0u;
  *(_OWORD *)(a6 + 72) = 0u;
  *(_OWORD *)(a6 + 88) = 0u;
  *(_OWORD *)(a6 + 104) = 0u;
  *(_QWORD *)(a6 + 120) = 0;
  sub_20B9D9C50((void **)a6, a2, a3);
  if (*(_QWORD *)(a1 + 8))
  {
    v27 = 0;
    if (a3)
    {
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v26 = 0;
        v26 = v28[v11];
        *(_QWORD *)(sub_20B9DA2F8(a6, v12, 1, 0, &v26, 1uLL) + 24) = 3231711232;
        v13 = *(_QWORD *)(a1 + 8);
        v14 = v27;
        v15 = operator new(0x20uLL);
        *v15 = &off_24C4AE6B8;
        v15[1] = &v28;
        v15[2] = &v27;
        v15[3] = a6;
        v31 = v15;
        sub_20BA22588(v13, a4, v14, (uint64_t)v30);
        v16 = v31;
        if (v31 == v30)
          break;
        if (v31)
        {
          v17 = 5;
LABEL_8:
          (*(void (**)(void))(*v16 + 8 * v17))();
        }
        v18 = v27;
        v19 = v29;
        if ((a5 & 1) != 0 || v29 - v27 > 5)
          goto LABEL_17;
        v25 = v29 - v27;
        v24 = 0;
        v20 = *(_QWORD *)(a1 + 8);
        v21 = operator new(0x28uLL);
        *v21 = &off_24C4AE738;
        v21[1] = &v25;
        v21[2] = a6;
        v21[3] = &v27;
        v21[4] = &v24;
        v31 = v21;
        sub_20BA2266C(v20, a4, v18, (uint64_t)v30, 6);
        v22 = v31;
        if (v31 == v30)
        {
          v22 = v30;
          v23 = 4;
          goto LABEL_15;
        }
        if (v31)
        {
          v23 = 5;
LABEL_15:
          (*(void (**)(void))(*v22 + 8 * v23))();
        }
        v18 = v27;
        v19 = v29;
LABEL_17:
        v12 = v18 + 1;
        v27 = v18 + 1;
        v11 = v18 + 1;
        if (v19 <= v11)
          return;
      }
      v16 = v30;
      v17 = 4;
      goto LABEL_8;
    }
  }
}

void sub_20B9FA104(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B9D98E4(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B9FA160(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 *v14;
  _QWORD v15[3];
  _QWORD *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v6 = sub_20B9A7C5C(0xCu);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    v12 = (uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 3;
    LODWORD(v13) = 134217984;
    *(_QWORD *)((char *)&v13 + 4) = v12;
    _os_log_debug_impl(&dword_20B7F7000, v6, OS_LOG_TYPE_DEBUG, "[ThaiAutocorrector::rerank] Reranking %zu candidates", (uint8_t *)&v13, 0xCu);
  }
  v7 = *(_QWORD *)(a1 + 16);
  v15[0] = &unk_24C4695E0;
  v15[1] = sub_20B9FA344;
  v16 = v15;
  *(_QWORD *)&v13 = &unk_24C469588;
  *((_QWORD *)&v13 + 1) = sub_20B8FF5C0;
  v14 = &v13;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *, __int128 *, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2, a3, v15, &v13, 256);
  v8 = v14;
  if (v14 == &v13)
  {
    v9 = 4;
    v8 = &v13;
  }
  else
  {
    if (!v14)
      goto LABEL_8;
    v9 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v8 + 8 * v9))();
LABEL_8:
  result = v16;
  if (v16 == v15)
  {
    v11 = 4;
    result = v15;
  }
  else
  {
    if (!v16)
      return result;
    v11 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v11))();
}

void sub_20B9FA2DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  uint64_t *v17;
  uint64_t *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;

  v19 = a12;
  if (a12 == v17)
  {
    v20 = 4;
    v19 = &a9;
  }
  else
  {
    if (!a12)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_6:
  v21 = a17;
  if (a17 == &a14)
  {
    v22 = 4;
    v21 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B9FA344(double a1, double a2)
{
  return (int)(a2 * -5090.0 + a1 * -8000.0);
}

_QWORD *sub_20B9FA364(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24C4617D8;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20B9FA3AC(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24C4617D8;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x20BD39CB0);
}

void sub_20B9FA408()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B9FA41C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C46B0B0;
  result[1] = v3;
  return result;
}

uint64_t sub_20B9FA450(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C46B0B0;
  a2[1] = v2;
  return result;
}

uint64_t sub_20B9FA46C(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  void *__p;
  void *v9;
  uint64_t v10;

  __p = 0;
  v9 = 0;
  v10 = 0;
  sub_20B9DB988(&__p, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32);
  if (v5)
    v6 = sub_20B876EDC(v5, &__p, *a3);
  else
    v6 = 0;
  if (__p)
  {
    v9 = __p;
    operator delete(__p);
  }
  return v6;
}

void sub_20B9FA4EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B9FA508(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45F0C0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B9FA544()
{
  return &unk_24C45F0C0;
}

void sub_20B9FA554()
{
  JUMPOUT(0x20BD39CB0);
}

