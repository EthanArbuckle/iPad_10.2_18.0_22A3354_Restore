void sub_20B8BF670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,const void *a22,uint64_t a23,uint64_t a24,const void *a25,const void *a26,const void *a27)
{
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;

  v31 = *(_QWORD *)(v29 - 112);
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  MEMORY[0x20BD39CB0](v27, 0x10B1C406662A6EBLL);
  (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  sub_20B876164(&a26, 0);
  sub_20B876164(&a27, 0);
  sub_20B876164((const void **)(v29 - 136), 0);
  sub_20B876164(&a22, 0);
  a23 = 0;
  if (a15)
    MEMORY[0x20BD39C80](a15, 0x1000C8077774924);
  v32 = a24;
  a24 = 0;
  if (v32)
    MEMORY[0x20BD39C80](v32, 0x1000C8077774924);
  sub_20B876164(&a25, 0);
  sub_20B8BFD8C(&a21, 0);
  _Unwind_Resume(a1);
}

void sub_20B8BFCBC()
{
  uint64_t v0;

  MEMORY[0x20BD39CB0](v0, 0x70C401872A87DLL);
  JUMPOUT(0x20B8BFB38);
}

void sub_20B8BFCDC()
{
  JUMPOUT(0x20B8BFB38);
}

void sub_20B8BFCE4()
{
  JUMPOUT(0x20B8BFB58);
}

void sub_20B8BFCEC()
{
  uint64_t v0;

  MEMORY[0x20BD39CB0](v0, 0x10F2C40570461F6);
  JUMPOUT(0x20B8BFC44);
}

void sub_20B8BFD0C()
{
  JUMPOUT(0x20B8BFC44);
}

void sub_20B8BFD14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void **v3;

  if (*(char *)(v0 + 1159) < 0)
    operator delete(*v3);
  sub_20B7F8B30(v2);
  sub_20B806284(v1);
  JUMPOUT(0x20B8BFC4CLL);
}

void sub_20B8BFD44()
{
  JUMPOUT(0x20B8BFC4CLL);
}

void sub_20B8BFD4C()
{
  uint64_t v0;

  MEMORY[0x20BD39CB0](v0, 0x10E0C40CD74A5BALL);
  JUMPOUT(0x20B8BFC94);
}

void sub_20B8BFD6C()
{
  JUMPOUT(0x20B8BFC94);
}

void sub_20B8BFD74()
{
  JUMPOUT(0x20B8BFC9CLL);
}

void sub_20B8BFD7C()
{
  JUMPOUT(0x20B8BFCB4);
}

void sub_20B8BFD84()
{
  JUMPOUT(0x20B8BFBFCLL);
}

uint64_t sub_20B8BFD8C(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_20B8BFE4C(result);
    JUMPOUT(0x20BD39CB0);
  }
  return result;
}

uint64_t *sub_20B8BFDC8(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    sub_20B811FE4(v2 + 8);
    JUMPOUT(0x20BD39CB0);
  }
  return result;
}

uint64_t sub_20B8BFE14(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  sub_20B7F8B30(a1 + 8);
  return sub_20B806284(a1);
}

uint64_t sub_20B8BFE4C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint8_t v25[16];

  v2 = *(_QWORD *)(a1 + 192);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 176);
    if (!v3
      || ((*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 168))(v2, *(_QWORD *)(v3 + 192)),
          (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 192) + 168))(*(_QWORD *)(a1 + 192), *(_QWORD *)(*(_QWORD *)(a1 + 176) + 200)), (v2 = *(_QWORD *)(a1 + 192)) != 0))
    {
      v4 = *(_QWORD *)(a1 + 1168);
      if (v4)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 168))(v2, *(_QWORD *)(v4 + 88));
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 192) + 168))(*(_QWORD *)(a1 + 192), *(_QWORD *)(*(_QWORD *)(a1 + 1168) + 96));
        sub_20B9C4664(*(_QWORD *)(a1 + 1168), a1);
      }
    }
  }
  v5 = sub_20B9A7C5C(0);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v25 = 0;
    _os_log_debug_impl(&dword_20B7F7000, v5, OS_LOG_TYPE_DEBUG, "Mecabra Japanese terminated.", v25, 2u);
  }
  v6 = *(_QWORD *)(a1 + 3944);
  *(_QWORD *)(a1 + 3944) = 0;
  if (v6)
    sub_20B8CE44C(a1 + 3944, v6);
  v7 = *(_QWORD *)(a1 + 3936);
  *(_QWORD *)(a1 + 3936) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(_QWORD *)(a1 + 3928);
  *(_QWORD *)(a1 + 3928) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *(_QWORD *)(a1 + 3912);
  *(_QWORD *)(a1 + 3912) = 0;
  if (v9)
    sub_20B8CC624(a1 + 3912, v9);
  v10 = *(_QWORD *)(a1 + 3888);
  *(_QWORD *)(a1 + 3888) = 0;
  if (v10)
    MEMORY[0x20BD39CB0](v10, 0x70C4098256540);
  sub_20B8BFDC8((uint64_t *)(a1 + 3880), 0);
  sub_20B8CE698((uint64_t *)(a1 + 3872));
  v11 = *(_QWORD *)(a1 + 3864);
  *(_QWORD *)(a1 + 3864) = 0;
  if (v11)
    MEMORY[0x20BD39CB0](v11, 0x1000C4000313F17);
  v12 = *(_QWORD *)(a1 + 3856);
  *(_QWORD *)(a1 + 3856) = 0;
  if (v12)
    sub_20B8CE648(v12);
  v13 = *(_QWORD *)(a1 + 3848);
  *(_QWORD *)(a1 + 3848) = 0;
  if (v13)
    sub_20B8CEB78(v13);
  v14 = *(_QWORD *)(a1 + 3840);
  *(_QWORD *)(a1 + 3840) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = *(_QWORD *)(a1 + 3832);
  *(_QWORD *)(a1 + 3832) = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = *(_QWORD *)(a1 + 3824);
  *(_QWORD *)(a1 + 3824) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = *(_QWORD *)(a1 + 3816);
  *(_QWORD *)(a1 + 3816) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(_QWORD *)(a1 + 3808);
  *(_QWORD *)(a1 + 3808) = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  sub_20B8CC770(a1 + 1208);
  v19 = *(_QWORD *)(a1 + 1184);
  *(_QWORD *)(a1 + 1184) = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = *(_QWORD **)(a1 + 1176);
  *(_QWORD *)(a1 + 1176) = 0;
  if (v20)
    sub_20B8CEC3C(v20);
  v21 = *(_QWORD **)(a1 + 1168);
  *(_QWORD *)(a1 + 1168) = 0;
  if (v21)
    sub_20B8CEC3C(v21);
  sub_20B8CE5E0((uint64_t *)(a1 + 1160));
  if (*(char *)(a1 + 1159) < 0)
    operator delete(*(void **)(a1 + 1136));
  sub_20B7F8B30(a1 + 1088);
  sub_20B806284(a1 + 1080);
  v22 = *(_QWORD *)(a1 + 1072);
  *(_QWORD *)(a1 + 1072) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  v23 = *(_QWORD *)(a1 + 1064);
  *(_QWORD *)(a1 + 1064) = 0;
  if (v23)
    MEMORY[0x20BD39C80](v23, 0x1000C8077774924);
  sub_20B8CE5A4((uint64_t *)(a1 + 1048));
  return sub_20B95C6E4(a1);
}

void sub_20B8C0130(uint64_t a1)
{
  sub_20B8BFE4C(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B8C0154(uint64_t a1, int a2, CFArrayRef theArray, char a4)
{
  uint64_t v8;
  _BOOL4 v9;
  uint64_t v10;
  CFIndex Count;
  NSObject *v12;
  CFIndex v13;
  __CFString *v14;
  const __CFString *ValueAtIndex;
  const __CFString *v17;
  int *v18;
  unint64_t v19;
  unsigned __int16 *v20;
  uint64_t v21;
  _QWORD v22[7];
  _QWORD v23[4];
  void *v24;
  void **v25;
  uint64_t v26;
  __n128 (*v27)(_QWORD *, uint64_t);
  void (*v28)(uint64_t);
  void *__p;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t);
  void (*v36)(uint64_t);
  CFMutableArrayRef Mutable;

  if (!CFArrayGetCount(theArray))
    return 1;
  if (a2 == 2)
  {
    v8 = *(_QWORD *)(a1 + 3944);
    if (v8)
    {
      if (*(_QWORD *)(v8 + 8))
      {
        v9 = sub_20B911EF0(*(_QWORD **)(v8 + 8));
        v8 = *(_QWORD *)(a1 + 3944);
        if (v9)
        {
          sub_20B919E2C(v8);
          v8 = *(_QWORD *)(a1 + 3944);
        }
      }
    }
    if ((sub_20B91A2B4(v8, theArray) & 1) == 0)
      return 0;
    v32 = 0;
    v33 = &v32;
    v34 = 0x3002000000;
    v35 = sub_20B8C07B0;
    v36 = sub_20B8C07C0;
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
    v24 = 0;
    v25 = &v24;
    v26 = 0x4002000000;
    v27 = sub_20B8C07CC;
    v28 = sub_20B8C07F0;
    v30 = 0;
    v31 = 0;
    __p = 0;
    v23[0] = 0;
    v23[1] = v23;
    v23[2] = 0x2000000000;
    v23[3] = 0;
    v10 = *(_QWORD *)(a1 + 3944);
    v22[0] = MEMORY[0x24BDAC760];
    v22[1] = 0x40000000;
    v22[2] = sub_20B8C0808;
    v22[3] = &unk_24C46C150;
    v22[4] = v23;
    v22[5] = &v32;
    v22[6] = &v24;
    sub_20B91A390(v10, (uint64_t)v22);
    Count = CFArrayGetCount((CFArrayRef)v33[5]);
    if (Count)
    {
      v12 = sub_20B9A7C5C(0xFu);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
        sub_20B9F4A64((unint64_t)"[Input Transcoder]", (const __CFArray *)v33[5], v25 + 5);
      sub_20BA044DC(a1 + 816, (CFArrayRef)v33[5], a4, (uint64_t)(v25 + 5));
      v13 = sub_20B96A5C4((const __CFArray *)v33[5]);
      v14 = *(__CFString **)(a1 + 856);
      ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)v33[5], v13);
      CFStringAppend(v14, ValueAtIndex);
    }
    _Block_object_dispose(v23, 8);
    _Block_object_dispose(&v24, 8);
    if (__p)
    {
      v30 = __p;
      operator delete(__p);
    }
    _Block_object_dispose(&v32, 8);
    if (Mutable)
      CFRelease(Mutable);
    if (!Count)
      return 0;
    goto LABEL_31;
  }
  v17 = sub_20B911348(theArray);
  sub_20B8D09C0(v17, &v24);
  v18 = (int *)operator new();
  sub_20B8D6AB0((uint64_t)v18, v17, 0, *(_DWORD *)(a1 + 184), *(_DWORD *)(a1 + 808));
  v22[0] = v18;
  if (v26 >= 0)
    v19 = HIBYTE(v26);
  else
    v19 = (unint64_t)v25;
  if (v26 >= 0)
    v20 = (unsigned __int16 *)&v24;
  else
    v20 = (unsigned __int16 *)v24;
  sub_20BA04238((unsigned __int16 **)(a1 + 816), v20, v19, (*(_DWORD *)(a1 + 184) >> 6) & 8 | *(_BYTE *)(a1 + 184) & 0x20 | (*(_DWORD *)(a1 + 184) >> 4) & 0x10 | ((char)*(_DWORD *)(a1 + 184) >> 7) & 6, v18, *(CFArrayRef **)(a1 + 200));
  CFStringAppend(*(CFMutableStringRef *)(a1 + 856), v17);
  v21 = v22[0];
  v22[0] = 0;
  if (v21)
    sub_20B8CE6E8((uint64_t)v22, v21);
  if ((SHIBYTE(v26) & 0x80000000) == 0)
  {
    if (!v17)
      goto LABEL_31;
    goto LABEL_30;
  }
  operator delete(v24);
  if (v17)
LABEL_30:
    CFRelease(v17);
LABEL_31:
  CFArrayRemoveAllValues(theArray);
  return 1;
}

void sub_20B8C0480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30)
{
  uint64_t v30;
  const void *v32;

  _Block_object_dispose(&a17, 8);
  _Block_object_dispose(&a21, 8);
  if (__p)
  {
    a30 = (uint64_t)__p;
    operator delete(__p);
  }
  _Block_object_dispose((const void *)(v30 - 96), 8);
  v32 = *(const void **)(v30 - 56);
  if (v32)
    CFRelease(v32);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8C0540(uint64_t a1, const __CFArray *a2)
{
  __CFArray *Mutable;
  CFIndex Count;
  CFIndex v6;
  int v7;
  char v8;
  unsigned int v9;
  _QWORD *ValueAtIndex;
  uint64_t (***v11)(_QWORD);
  _DWORD *v12;
  uint64_t v13;
  void *__p;
  __int128 v16;
  uint64_t v17;
  char v18;
  CFMutableArrayRef theArray;
  void **v20;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  theArray = Mutable;
  Count = CFArrayGetCount(a2);
  if (Count < 1)
  {
    v8 = 0;
    LOBYTE(v7) = 0;
    v9 = 2;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 2;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a2, v6);
      v11 = (uint64_t (***)(_QWORD))ValueAtIndex[3];
      if ((**v11)(v11) == v9)
      {
        CFArrayAppendValue(Mutable, ValueAtIndex);
        if (v9 == 2)
        {
          v12 = __dynamic_cast(v11, (const struct __class_type_info *)&unk_24C45BCA0, (const struct __class_type_info *)&unk_24C45BD60, 0);
          if (!v12)
            goto LABEL_21;
          if (v12[16] == 2)
          {
            if ((sub_20B8C0154(a1, 2, Mutable, v7) & 1) == 0)
              goto LABEL_21;
            ++v7;
          }
          v9 = 2;
        }
      }
      else
      {
        if (!sub_20B8C0154(a1, v9, Mutable, v7))
          goto LABEL_21;
        v9 = (**v11)(v11);
        Mutable = theArray;
        CFArrayAppendValue(theArray, ValueAtIndex);
        ++v7;
        v8 |= v9 < 2;
      }
      ++v6;
    }
    while (Count != v6);
  }
  if (sub_20B8C0154(a1, v9, Mutable, v7))
  {
    if ((v8 & 1) != 0)
    {
      sub_20BA01978((_QWORD *)(a1 + 816), (uint64_t)&__p);
      sub_20B8CC7B0((void ***)(a1 + 824));
      *(_OWORD *)(a1 + 824) = v16;
      *(_QWORD *)(a1 + 840) = v17;
      *((_QWORD *)&v16 + 1) = 0;
      v17 = 0;
      *(_BYTE *)(a1 + 848) = v18;
      __p = off_24C460C88;
      *(_QWORD *)&v16 = 0;
      v20 = (void **)&v16;
      sub_20B8B66F8(&v20);
    }
    *(_BYTE *)(a1 + 848) = 1;
    sub_20B80BBD0(&__p, (char *)&unk_20BA6E04F);
    if (SHIBYTE(v16) < 0)
      operator delete(__p);
    v13 = 1;
  }
  else
  {
LABEL_21:
    v13 = 0;
  }
  if (theArray)
    CFRelease(theArray);
  return v13;
}

void sub_20B8C0780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20B8B035C((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8C07B0(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(result + 40) = v2;
  return result;
}

void sub_20B8C07C0(uint64_t a1)
{
  sub_20B8B035C((const void **)(a1 + 40), 0);
}

__n128 sub_20B8C07CC(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void sub_20B8C07F0(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void sub_20B8C0808(_QWORD *a1, CFStringRef theString, _BYTE *a3, float a4)
{
  _QWORD *v9;
  float *v10;
  unint64_t v11;
  float *v12;
  float *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  float *v19;
  char *v20;
  int v21;

  if (theString && CFStringGetLength(theString))
  {
    if (a4 < 0.04 && *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) > 5)
      goto LABEL_25;
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(a1[5] + 8) + 40), theString);
    v9 = *(_QWORD **)(a1[6] + 8);
    v10 = (float *)v9[6];
    v11 = v9[7];
    if ((unint64_t)v10 >= v11)
    {
      v13 = (float *)v9[5];
      v14 = v10 - v13;
      if ((unint64_t)(v14 + 1) >> 62)
        sub_20B80CDD8();
      v15 = v11 - (_QWORD)v13;
      v16 = (uint64_t)(v11 - (_QWORD)v13) >> 1;
      if (v16 <= v14 + 1)
        v16 = v14 + 1;
      v17 = v15 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v16;
      if (v17)
      {
        v18 = (char *)sub_20B8127BC((uint64_t)(v9 + 7), v17);
        v13 = (float *)v9[5];
        v10 = (float *)v9[6];
      }
      else
      {
        v18 = 0;
      }
      v19 = (float *)&v18[4 * v14];
      v20 = &v18[4 * v17];
      *v19 = a4;
      v12 = v19 + 1;
      while (v10 != v13)
      {
        v21 = *((_DWORD *)v10-- - 1);
        *((_DWORD *)v19-- - 1) = v21;
      }
      v9[5] = v19;
      v9[6] = v12;
      v9[7] = v20;
      if (v13)
        operator delete(v13);
    }
    else
    {
      *v10 = a4;
      v12 = v10 + 1;
    }
    v9[6] = v12;
    if (++*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) == 10)
LABEL_25:
      *a3 = 1;
  }
}

unint64_t sub_20B8C0974(uint64_t a1, CFArrayRef theArray, unint64_t a3, uint64_t a4)
{
  const void *ValueAtIndex;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  const __CFString *v13;
  const __CFString *v14;
  const __CFArray *v15;
  const __CFArray *v16;

  if (!theArray)
    return 0;
  if (CFArrayGetCount(theArray))
  {
    if (sub_20B911534(theArray))
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
      return sub_20B95D2EC(a1, (uint64_t)ValueAtIndex);
    }
    if (sub_20B9112A8(theArray))
    {
      v11 = *(_QWORD *)(a1 + 3944);
      if (v11)
      {
        v12 = *(_QWORD **)(v11 + 8);
        if (v12)
        {
          if (sub_20B911EF0(v12) && sub_20B95C90C(a1, a3, a4))
            return sub_20B8C0540(a1, theArray);
        }
      }
    }
    else
    {
      v13 = sub_20B911348(theArray);
      if (v13)
      {
        v14 = v13;
        if (CFStringGetLength(v13))
        {
          sub_20B95C9D8(a1, v14, a3, a4);
          if (a4 && !*(_BYTE *)sub_20B896F94())
            v15 = (const __CFArray *)sub_20B96A4EC(a4, v14);
          else
            v15 = 0;
          v16 = sub_20B91158C(theArray);
          v10 = sub_20B95D438(a1, v14, a3, a4, v16, v15);
          if (v16)
            CFRelease(v16);
        }
        else
        {
          v10 = 0;
        }
        CFRelease(v14);
        return v10;
      }
    }
    return 0;
  }
  sub_20B95C9D8(a1, 0, a3, a4);
  sub_20B95DDF4(a1, a3, a4);
  return 1;
}

void sub_20B8C0B40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B87E150((const void **)va, 0);
  _Unwind_Resume(a1);
}

void sub_20B8C0B78(uint64_t a1, const __CFArray *a2)
{
  uint64_t v2;
  _QWORD *v4;

  v2 = *(_QWORD *)(a1 + 3944);
  if (v2)
  {
    v4 = *(_QWORD **)(v2 + 8);
    if (v4)
    {
      if (sub_20B911EF0(v4))
        sub_20B919FDC(*(_QWORD *)(a1 + 3944), a2);
    }
  }
}

void **sub_20B8C0BC4(uint64_t a1, void **a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  int v15;
  char v16;
  int v17;
  BOOL v18;
  BOOL v19;
  uint64_t v20;
  BOOL v21;
  const void *v22;
  _QWORD *v23;
  _BYTE *v24;
  _QWORD **v25;
  _QWORD **v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  double v33;
  double v34;
  uint64_t i;
  int v36;
  unsigned __int8 v37;
  BOOL v38;
  BOOL v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t *v48;
  unint64_t v49;
  NSObject *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  NSObject *v54;
  uint64_t v55;
  uint64_t v56;
  void **result;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  UniChar *v62;
  unint64_t v63;
  _QWORD v64[3];
  _QWORD *v65;
  void *__p;
  char *v67;
  char *v68;
  void **p_p;
  _QWORD **v70;
  _QWORD **v71;
  uint8_t buf[4];
  uint64_t v73;
  uint64_t v74;

  v74 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 256);
  v7 = *(_QWORD *)(v6 + 88);
  v62 = *(UniChar **)(v6 + 80);
  v63 = v7;
  v61 = *(_OWORD *)(v6 + 96);
  v8 = *(_QWORD *)(v6 + 120);
  v59 = *(_QWORD *)(v6 + 112);
  v60 = v8;
  v9 = *(_DWORD *)(a1 + 184);
  v10 = 255;
  v11 = 192;
  if ((v9 & 0x20) != 0)
    v11 = 255;
  if (**(_BYTE **)(a1 + 1032))
    v10 = v11;
  if (v7 <= v10)
  {
    v17 = v9 & 0x2000000;
    v18 = **(_BYTE **)(a1 + 1032) || (*(_DWORD *)(a1 + 184) & 2) == 0;
    v19 = !v18 && v17 == 0;
    if (!v19 || ((v20 = *(_QWORD *)(v6 + 128), v7 >= 2) ? (v21 = v8 == v20) : (v21 = 1), !v21))
    {
      v12 = a1 + 176;
      sub_20B9C3978(*(_QWORD *)(a1 + 176) + 248);
      v16 = 0;
      goto LABEL_21;
    }
  }
  v12 = a1 + 176;
  sub_20B9C3978(*(_QWORD *)(a1 + 176) + 248);
  v15 = *(_DWORD *)(a1 + 184);
  v16 = 1;
  if ((v15 & 0x2000002) == 2)
  {
LABEL_21:
    sub_20B95F7FC(a1, (uint64_t)a2, a3, (uint64_t)&v61, (uint64_t)&v62);
    v15 = *(_DWORD *)(a1 + 184);
  }
  if ((v15 & 0x2000002) == 2 && !*(_BYTE *)(a1 + 230))
  {
    if ((v16 & 1) != 0)
    {
      sub_20B8A7D54(*(_QWORD *)(a1 + 3880), a2, v62, v63, (_QWORD *)(*(_QWORD *)(a1 + 176) + 248));
      goto LABEL_53;
    }
    if (**(_BYTE **)(a1 + 1032))
    {
      sub_20B8C12D4(a1, a2, *(_QWORD *)(a1 + 256) + 80);
      if (**(_BYTE **)(a1 + 1032))
      {
        if ((*(_BYTE *)(a1 + 187) & 4) == 0 && !*(_BYTE *)(a1 + 808))
          sub_20B8C17E8(a1, a2, (_QWORD *)(*(_QWORD *)(a1 + 256) + 80));
      }
    }
    v22 = (const void *)objc_msgSend_rawCandidate(*(void **)(*(_QWORD *)v12 + 112), v13, v14);
    if (v22)
      v23 = __dynamic_cast(v22, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
    else
      v23 = 0;
    v24 = *(_BYTE **)(a1 + 1032);
    if (v24[256])
    {
      sub_20B8C1FD4(a1, (uint64_t)a2, v23, (uint64_t)&v61, (uint64_t)&v59);
      v24 = *(_BYTE **)(a1 + 1032);
    }
    if (v24[264]
      && (*v24 || (*(_DWORD *)(a1 + 184) & 0x2000002) == 2)
      && (!v23 || sub_20B8C21F0((uint64_t)v23)))
    {
      sub_20B913B1C(*(uint64_t **)(a1 + 3856), a2, (uint64_t *)&v61, (uint64_t)&v59);
    }
    sub_20B8A7D54(*(_QWORD *)(a1 + 3880), a2, v62, v63, (_QWORD *)(*(_QWORD *)(a1 + 176) + 248));
    if ((**(_BYTE **)(a1 + 1032) || (*(_DWORD *)(a1 + 184) & 0x2000002) != 2) && !*(_QWORD *)(a1 + 1184))
    {
      (*(void (**)(void **__return_ptr, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 3840) + 16))(&__p, *(_QWORD *)(a1 + 3840), *(_QWORD *)(a1 + 176) + 248, v61, *((_QWORD *)&v61 + 1), v59, v60);
      v25 = v70;
      v26 = v71;
      if (v70 != v71)
      {
        while (1)
        {
          v64[0] = &unk_24C459188;
          v65 = v64;
          sub_20B8FDA94(a2, v25, 1, 0, (uint64_t)v64);
          v27 = v65;
          if (v65 == v64)
            break;
          if (v65)
          {
            v28 = 5;
LABEL_50:
            (*(void (**)(void))(*v27 + 8 * v28))();
          }
          if (++v25 == v26)
            goto LABEL_52;
        }
        v27 = v64;
        v28 = 4;
        goto LABEL_50;
      }
LABEL_52:
      sub_20B881268((uint64_t)&__p);
    }
  }
LABEL_53:
  if ((*(_BYTE *)(a1 + 184) & 2) != 0)
    sub_20B912924(*(_QWORD **)(a1 + 3864), a2);
  if (!*(_BYTE *)(a1 + 230) && (*(_BYTE *)(a1 + 186) & 4) == 0)
    sub_20B95F8CC(a1, a2);
  __p = 0;
  v67 = 0;
  v68 = 0;
  v29 = a2[6];
  if (a2[7] != v29)
  {
    v30 = 0;
    do
    {
      v31 = v29[v30];
      v32 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 304))(v31);
      for (i = *v32; i != v32[1]; i += 40)
      {
        if (*(_DWORD *)i == 3)
        {
          LOWORD(v33) = *(_WORD *)(i + 24);
          LOWORD(v34) = *(_WORD *)(i + 28);
          v34 = (double)*(unint64_t *)&v34;
          v33 = (double)*(unint64_t *)&v33 / v34;
          if (v33 > 1.7)
          {
            v36 = *(_DWORD *)(a1 + 184);
            v37 = atomic_load((unsigned __int8 *)&qword_2547287B0);
            if ((v37 & 1) == 0 && __cxa_guard_acquire(&qword_2547287B0))
            {
              off_2547287A8 = sub_20B896F94();
              __cxa_guard_release(&qword_2547287B0);
            }
            if (*(_BYTE *)off_2547287A8)
              v38 = (v36 & 4) == 0;
            else
              v38 = 0;
            v39 = !v38 && (v36 & 0x6000000) == 100663296;
            if (v39 || (unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 48))(v31) >= 2)
            {
              v40 = v67;
              if (v67 >= v68)
              {
                v42 = (char *)__p;
                v43 = (v67 - (_BYTE *)__p) >> 3;
                v44 = v43 + 1;
                if ((unint64_t)(v43 + 1) >> 61)
                  sub_20B80CDD8();
                v45 = v68 - (_BYTE *)__p;
                if ((v68 - (_BYTE *)__p) >> 2 > v44)
                  v44 = v45 >> 2;
                if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8)
                  v46 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v46 = v44;
                if (v46)
                {
                  v47 = (char *)sub_20B800BE8((uint64_t)&v68, v46);
                  v42 = (char *)__p;
                  v40 = v67;
                }
                else
                {
                  v47 = 0;
                }
                v48 = (unint64_t *)&v47[8 * v43];
                *v48 = v30;
                v41 = (char *)(v48 + 1);
                while (v40 != v42)
                {
                  v49 = *((_QWORD *)v40 - 1);
                  v40 -= 8;
                  *--v48 = v49;
                }
                __p = v48;
                v67 = v41;
                v68 = &v47[8 * v46];
                if (v42)
                  operator delete(v42);
              }
              else
              {
                *(_QWORD *)v67 = v30;
                v41 = v40 + 8;
              }
              v67 = v41;
            }
            break;
          }
        }
      }
      ++v30;
      v29 = a2[6];
    }
    while (v30 < ((_BYTE *)a2[7] - (_BYTE *)v29) >> 3);
  }
  v50 = sub_20B9A7C5C(0xBu);
  if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
  {
    v51 = (char *)__p;
    v52 = v67;
    if (__p != v67)
    {
      do
      {
        v53 = *(_QWORD *)v51;
        v54 = sub_20B9A7C5C(0xBu);
        if (os_log_type_enabled(v54, OS_LOG_TYPE_DEBUG))
        {
          v55 = *((_QWORD *)a2[6] + v53);
          v56 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v55 + 24))(v55);
          *(_DWORD *)buf = 138412290;
          v73 = v56;
          _os_log_debug_impl(&dword_20B7F7000, v54, OS_LOG_TYPE_DEBUG, "Pruning %@ (shortcut like user words)", buf, 0xCu);
        }
        v51 += 8;
      }
      while (v51 != v52);
    }
  }
  sub_20B8FEACC(a2, (unint64_t **)&__p);
  if (__p)
  {
    v67 = (char *)__p;
    operator delete(__p);
  }
  __p = &unk_24C469588;
  v67 = (char *)sub_20B8FEF70;
  p_p = &__p;
  sub_20B8FDD20(a2, (uint64_t)&__p);
  result = p_p;
  if (p_p == &__p)
  {
    v58 = 4;
    result = &__p;
  }
  else
  {
    if (!p_p)
      return result;
    v58 = 5;
  }
  return (void **)(*((uint64_t (**)(void))*result + v58))();
}

void sub_20B8C1218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25)
{
  __cxa_guard_abort(&qword_2547287B0);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20B8C12D4(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  std::mutex *v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  UniChar *v14;
  unint64_t v15;
  unint64_t v16;
  const __CFString *v18;
  unsigned __int8 v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  int v29;
  int v30;
  unsigned __int16 **v31;
  unint64_t v32;
  int v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  const __CFAllocator *contentsDeallocator;
  uint64_t v39;
  _QWORD *v40;
  std::mutex *v42;
  unint64_t v43;
  __int128 v45;
  void **v46[2];
  const __CFString *v47;
  const __CFString *v48;
  _QWORD v49[3];
  _QWORD *v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD **)(a1 + 176);
  v5 = v4[22];
  v6 = (std::mutex *)(a1 + 880);
  std::mutex::lock((std::mutex *)(a1 + 880));
  v7 = *(_DWORD *)(a1 + 944);
  std::mutex::unlock(v6);
  if (v7 != 2 && (*(_BYTE *)(a1 + 186) & 4) == 0)
  {
    if (v5)
    {
      v8 = v4[33] - v4[32];
      if (v8)
      {
        v43 = sub_20B8CD760(v4 + 31, 0xCCCCCCCCCCCCCCCDLL * (v8 >> 3) - 1);
        if (v43 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v4[33] - v4[32]) >> 3))
        {
          v9 = 0;
          contentsDeallocator = (const __CFAllocator *)*MEMORY[0x24BDBD258];
          v39 = v5;
          v40 = v4;
          v42 = v6;
          do
          {
            std::mutex::lock(v6);
            v10 = *(_DWORD *)(a1 + 944);
            std::mutex::unlock(v6);
            if (v10 == 2)
              return;
            v11 = *(_QWORD *)(v4[41] + 8 * v43);
            v12 = v4[35];
            v13 = (v4[36] - v12) >> 1;
            if (v13 <= v11)
              v14 = 0;
            else
              v14 = (UniChar *)(v12 + 2 * v11);
            if (v12)
              v15 = v13 - v11;
            else
              v15 = 0;
            if (v13 <= v11)
              v16 = 0;
            else
              v16 = v15;
            if (v43 != -1 - 0x3333333333333333 * ((uint64_t)(v4[33] - v4[32]) >> 3) || v16 != 1)
              goto LABEL_26;
            v18 = CFStringCreateWithCharactersNoCopy(0, v14, 1, contentsDeallocator);
            v47 = v18;
            v19 = sub_20B8DA278(v18);
            if (v18)
              CFRelease(v18);
            if ((v19 & 1) == 0)
            {
LABEL_26:
              sub_20B9096D0(v5, v14, v16, 0, &v47);
              if (v48 != v47)
              {
                v20 = 0;
                v21 = 0;
                while (1)
                {
                  if (v9 >= *(unsigned __int16 *)(*(_QWORD *)(a1 + 1032) + 404))
                    goto LABEL_47;
                  std::mutex::lock(v6);
                  v22 = *(_DWORD *)(a1 + 944);
                  std::mutex::unlock(v6);
                  if (v22 == 2)
                    goto LABEL_47;
                  v23 = (uint64_t)&v47[v20];
                  v24 = (uint64_t *)sub_20B909B78((uint64_t)&v47[v20], off_254729500[0]);
                  v25 = v24;
                  v26 = (v24[1] - *v24) >> 1;
                  if (!*v24)
                    v26 = 0;
                  v46[0] = (void **)*v24;
                  v46[1] = (void **)v26;
                  v27 = *(_QWORD *)(a3 + 48);
                  v45 = *(_OWORD *)(a3 + 32);
                  if (sub_20B87C6E4((uint64_t)&v45, v27, (uint64_t)v46, *(_DWORD *)(a1 + 184), 0))
                  {
                    v28 = (uint64_t *)sub_20B909B78(v23, off_254729508[0]);
                    v29 = sub_20B909BF4(v23, off_254729510[0]);
                    v30 = sub_20B909BF4(v23, off_254729518[0]);
                    v31 = (unsigned __int16 **)sub_20B909B78(v23, off_254729520);
                    v32 = (v25[1] - *v25) >> 1;
                    if (v27 <= 0 && v32 <= *(_QWORD *)(a3 + 40))
                      v33 = 0;
                    else
                      v33 = 2;
                    v34 = sub_20B929AE4((int **)(a1 + 1200), a3, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), *v25, v32, *v28, (v28[1] - *v28) >> 1, v29, v30, v31, v9 + *(__int16 *)(*(_QWORD *)(a1 + 1032) + 520), 74, v33, 0, 0);
                    *(_QWORD *)&v45 = v34;
                    v6 = v42;
                    if (v34)
                      break;
                  }
LABEL_44:
                  ++v21;
                  ++v20;
                  if (v21 >= v48 - v47)
                    goto LABEL_47;
                }
                (*(void (**)(uint64_t, uint64_t, const char *, uint64_t))(*(_QWORD *)v34 + 528))(v34, 3, "Adding a bigram learning dictionary candidate", 1);
                v49[0] = &unk_24C459188;
                v50 = v49;
                sub_20B8FDA94(a2, (_QWORD **)&v45, 1, 0, (uint64_t)v49);
                v35 = v50;
                if (v50 == v49)
                {
                  v35 = v49;
                  v36 = 4;
LABEL_41:
                  (*(void (**)(void))(*v35 + 8 * v36))();
                }
                else if (v50)
                {
                  v36 = 5;
                  goto LABEL_41;
                }
                ++v9;
                v37 = v45;
                *(_QWORD *)&v45 = 0;
                if (v37)
                  (*(void (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37);
                goto LABEL_44;
              }
LABEL_47:
              v46[0] = (void **)&v47;
              sub_20B8882B4(v46);
              v5 = v39;
              v4 = v40;
            }
            ++v43;
          }
          while (v43 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v4[33] - v4[32]) >> 3));
        }
      }
    }
  }
}

void sub_20B8C172C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (a2)
    sub_20B854468(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B8C17E8(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  std::mutex *v6;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _BOOL4 v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  unsigned __int16 v17;
  unsigned __int16 v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  char *v25;
  uint64_t *v26;
  uint64_t *v27;
  unsigned __int16 v28;
  uint64_t v29;
  unsigned __int16 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unsigned __int16 **v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  void ***v52;
  unint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  int **v61;
  uint64_t v62;
  int v63;
  int v64;
  unsigned __int16 **v65;
  uint64_t *v66;
  uint64_t *v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *__p;
  void *v75;
  _QWORD *v76;
  _QWORD v77[2];
  unsigned __int8 v78;
  void ***v79;
  uint64_t v80;
  void **v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD v85[3];
  _QWORD *v86;
  uint64_t v87;

  v4 = a1;
  v87 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a1 + 176);
  v55 = *(_QWORD *)(v5 + 8);
  v57 = v5;
  v58 = *(_QWORD *)(v5 + 176);
  v6 = (std::mutex *)(a1 + 880);
  std::mutex::lock((std::mutex *)(a1 + 880));
  v72 = v4;
  LODWORD(v4) = *(_DWORD *)(v4 + 944);
  std::mutex::unlock(v6);
  if ((_DWORD)v4 != 2 && (*(_BYTE *)(v72 + 186) & 4) == 0 && v58 && v55 != 0)
  {
    v8 = a3[5];
    v9 = *(_QWORD *)(v72 + 1032);
    if (v8 >= *(unsigned __int16 *)(v9 + 412) && v8 <= *(unsigned __int16 *)(v9 + 414))
    {
      v54 = v8 - 1;
      if ((_WORD)v8 != 1)
      {
        LODWORD(v10) = 0;
        v59 = 0;
        v61 = (int **)(v72 + 1200);
        v11 = (unsigned __int16)v54;
        v60 = (uint64_t)a3;
        while (1)
        {
          std::mutex::lock(v6);
          v12 = *(_DWORD *)(v72 + 944) == 2;
          std::mutex::unlock(v6);
          if (((v12 | v10) & 1) != 0)
            return;
          v13 = *(_QWORD *)(v72 + 704);
          v14 = a3[4] ? v11 : 0;
          v81 = (void **)a3[4];
          v82 = v14;
          sub_20BA14BEC(v13, v55, (uint64_t)&v81, 0, &v83);
          if (v84 != v83)
            break;
LABEL_59:
          LODWORD(v10) = 0;
LABEL_60:
          v81 = (void **)&v83;
          sub_20B8882B4(&v81);
          --v11;
          if (!(_WORD)--v54)
            return;
        }
        v62 = 0;
        v71 = v11;
        while (1)
        {
          std::mutex::lock(v6);
          v15 = *(_DWORD *)(v72 + 944);
          std::mutex::unlock(v6);
          if (v15 == 2)
            goto LABEL_59;
          v16 = v83 + 32 * v62;
          v66 = (uint64_t *)sub_20B909B78(v16, off_2547292C8[0]);
          v67 = (uint64_t *)sub_20B909B78(v16, off_2547292D0);
          v17 = sub_20B909BF4(v16, off_2547292A8[0]);
          v18 = sub_20B909BF4(v16, off_2547292A0[0]);
          v65 = (unsigned __int16 **)sub_20B909B78(v16, off_2547292B0[0]);
          v19 = *(_QWORD *)(v72 + 704);
          v20 = (v67[1] - *v67) >> 1;
          v79 = (void ***)*v67;
          v80 = v20;
          sub_20BA14BEC(v19, v58, (uint64_t)&v79, 0, &v81);
          v21 = (uint64_t)(v82 - (_QWORD)v81) >> 5;
          if (v21 >= 4)
            v21 = 4;
          if (v21)
            break;
LABEL_55:
          LODWORD(v10) = 0;
LABEL_56:
          v79 = &v81;
          sub_20B8882B4((void ***)&v79);
          if (++v62 >= (unint64_t)((v84 - v83) >> 5) || (v10 & 1) != 0)
            goto LABEL_60;
        }
        v22 = 0;
        v63 = v18;
        v64 = v17;
        v23 = 1;
        while (1)
        {
          std::mutex::lock(v6);
          v24 = *(_DWORD *)(v72 + 944);
          std::mutex::unlock(v6);
          if (v24 == 2)
            goto LABEL_55;
          v25 = (char *)v81 + v22;
          v26 = (uint64_t *)sub_20B909B78((uint64_t)v81 + v22, off_254729500[0]);
          v73 = v22;
          v27 = (uint64_t *)sub_20B909B78((uint64_t)v25, off_254729508[0]);
          v28 = sub_20B909BF4((uint64_t)v25, off_254729510[0]);
          v29 = v23;
          v30 = sub_20B909BF4((uint64_t)v25, off_254729518[0]);
          v31 = sub_20B909B78((uint64_t)v25, off_254729520);
          LODWORD(v32) = *((_DWORD *)a3 + 10) - v11;
          v33 = *v26;
          v34 = (v26[1] - *v26) >> 1;
          if (v34 >= (int)v32)
          {
            v35 = (unsigned __int16 **)v31;
            v32 = (int)v32;
            v36 = a3[4];
            v78 = 0;
            if (!v36)
              v32 = 0;
            v79 = (void ***)(v36 + 2 * v11);
            v80 = v32;
            v37 = a3[6];
            v77[0] = v33;
            v77[1] = v34;
            if (sub_20B87C6E4((uint64_t)&v79, v37, (uint64_t)v77, *(_DWORD *)(v72 + 184), &v78))
              break;
          }
          LODWORD(v10) = 0;
          v48 = v73;
          v47 = v29;
LABEL_50:
          v53 = (uint64_t)(v82 - (_QWORD)v81) >> 5;
          if (v53 >= 4)
            v53 = 4;
          if (v53 > v47)
          {
            v23 = v47 + 1;
            v22 = v48 + 32;
            if ((v10 & 1) == 0)
              continue;
          }
          goto LABEL_56;
        }
        v38 = a3[2];
        v69 = a3[3];
        v39 = sub_20B8C8314((uint64_t)a3, v11);
        v40 = (uint64_t)a3;
        v42 = v41;
        v68 = v78;
        v70 = sub_20B929AE4(v61, v40, (uint64_t)v39, v41, *v66, (v66[1] - *v66) >> 1, *v67, (v67[1] - *v67) >> 1, v64, v63, v65, 0, 74, 0, 0, 0);
        v43 = v38 + 2 * v42;
        if (v38)
          v44 = v69 - v42;
        else
          v44 = 0;
        a3 = (_QWORD *)v60;
        v45 = sub_20B929AE4(v61, v60, v43, v44, *v26, (v26[1] - *v26) >> 1, *v27, (v27[1] - *v27) >> 1, v28, v30, v35, 0, 74, 2 * (v68 == 0), 0, v71);
        v46 = v45;
        v47 = v29;
        if (!v70)
        {
          LODWORD(v10) = 0;
          v11 = v71;
          v48 = v73;
          if (!v45)
            goto LABEL_50;
          goto LABEL_49;
        }
        v11 = v71;
        v48 = v73;
        if (!v45)
        {
          LODWORD(v10) = 0;
LABEL_48:
          v46 = v70;
LABEL_49:
          (*(void (**)(uint64_t))(*(_QWORD *)v46 + 16))(v46);
          goto LABEL_50;
        }
        __p = 0;
        v75 = 0;
        v76 = 0;
        v49 = operator new(0x10uLL);
        v75 = v49 + 2;
        v76 = v49 + 2;
        *v49 = v70;
        v49[1] = v46;
        __p = v49;
        v10 = sub_20B97B2AC(v57, (uint64_t)&__p);
        if (__p)
        {
          v75 = __p;
          operator delete(__p);
        }
        if (!v10)
        {
LABEL_47:
          (*(void (**)(uint64_t))(*(_QWORD *)v46 + 16))(v46);
          goto LABEL_48;
        }
        *(_QWORD *)(v10 + 160) = *(_QWORD *)(v60 + 40) - *(_QWORD *)(v60 + 48);
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 480))(v10, (++v59 + *(__int16 *)(*(_QWORD *)(v72 + 1032) + 496)));
        *(_DWORD *)(v10 + 204) = 74;
        (*(void (**)(uint64_t, uint64_t, const char *, uint64_t))(*(_QWORD *)v10 + 528))(v10, 3, "Adding a learned phrase bigram prefix candidate", 1);
        v79 = (void ***)v10;
        v85[0] = &unk_24C459188;
        v86 = v85;
        sub_20B8FDA94(a2, &v79, 1, 0, (uint64_t)v85);
        v50 = v86;
        if (v86 == v85)
        {
          v50 = v85;
          v51 = 4;
        }
        else
        {
          if (!v86)
          {
LABEL_44:
            v52 = v79;
            v79 = 0;
            if (v52)
              ((void (*)(void ***))(*v52)[2])(v52);
            LODWORD(v10) = v59 == *(unsigned __int16 *)(*(_QWORD *)(v72 + 1032) + 406);
            goto LABEL_47;
          }
          v51 = 5;
        }
        (*(void (**)(void))(*v50 + 8 * v51))();
        goto LABEL_44;
      }
    }
  }
}

void sub_20B8C1EAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  _Unwind_Resume(exception_object);
}

void sub_20B8C1FD4(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  NSObject *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD v23[7];
  int v24;
  uint8_t buf[4];
  int v26;
  __int16 v27;
  int v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if (a3 && ((*(uint64_t (**)(_QWORD *))(*a3 + 88))(a3) & 1) == 0 && a3[34] != a3[33])
  {
    v9 = 0;
    do
    {
      std::mutex::lock((std::mutex *)(a1 + 880));
      v10 = *(_DWORD *)(a1 + 944);
      std::mutex::unlock((std::mutex *)(a1 + 880));
      if (v10 == 2)
        break;
      v11 = (*(uint64_t (**)(_QWORD *))(*a3 + 576))(a3);
      v12 = *(unsigned __int16 *)(a3[33] + 2 * v9);
      v13 = *(_DWORD *)(a3[36] + 4 * v9);
      v14 = sub_20B9A7C5C(0xAu);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        v18 = objc_msgSend_rawCandidate(*(void **)(*(_QWORD *)(a1 + 176) + 104), v15, v16);
        if (v18)
        {
          v21 = (_QWORD *)v18;
          v19 = (*(uint64_t (**)(void))(*(_QWORD *)v18 + 40))();
          v20 = 40;
          if (!v19)
            v20 = 24;
          v18 = (*(uint64_t (**)(_QWORD *))(*v21 + v20))(v21);
        }
        *(_DWORD *)buf = 67109890;
        v26 = v11;
        v27 = 1024;
        v28 = v12;
        v29 = 2112;
        v30 = v18;
        v31 = 1024;
        v32 = v13;
        _os_log_debug_impl(&dword_20B7F7000, v14, OS_LOG_TYPE_DEBUG, "[MJ:searchPhrasesByPosContext] Considering POS context (%d, %d) for %@ with additional cost %d", buf, 0x1Eu);
      }
      v17 = *(_QWORD *)(a1 + 3848);
      v23[0] = MEMORY[0x24BDAC760];
      v23[1] = 0x40000000;
      v23[2] = sub_20B8C987C;
      v23[3] = &unk_24C49BC88;
      v23[4] = a1;
      v23[5] = a5;
      v24 = v13;
      v23[6] = a2;
      sub_20B8B2A18(v17, v11, v12, a4, (uint64_t)v23);
      ++v9;
    }
    while (v9 < (uint64_t)(a3[34] - a3[33]) >> 1);
  }
}

uint64_t sub_20B8C21F0(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;

  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 352))(a1, v2 - 1);
  sub_20B8B2334(0);
  if (qword_25472C9D8 <= (unint64_t)v3)
    return 0;
  else
    return *(_BYTE *)(qword_25472C9D0 + v3) & 1;
}

uint64_t sub_20B8C2264(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;

  if (**(_BYTE **)(a1 + 1032))
    return 1;
  v6 = *(_DWORD *)(a1 + 184);
  if ((v6 & 0x2000000) != 0)
  {
    if ((v6 & 0x20000000) == 0)
      return 1;
  }
  else if ((~v6 & 0x4000002) == 0 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 408))(a2))
  {
    return 1;
  }
  if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2))
    return 1;
  v7 = 0;
  do
  {
    v8 = *(_QWORD *)(a1 + 1072);
    v9 = sub_20B91708C(a2, v7);
    v11 = v10;
    v12 = sub_20B916C5C(a2, v7);
    v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, v9, v11, v12, v13);
    if (v14)
      v2 = (v14 >> 1) & 1;
    else
      v2 = 1;
    if ((v2 & 1) == 0)
      break;
    ++v7;
  }
  while (v7 < (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2));
  return v2;
}

void sub_20B8C2368(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unsigned __int8 v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _BOOL4 v14;
  int v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  unint64_t *v26;
  char *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  BOOL v42;

  v8 = atomic_load((unsigned __int8 *)&qword_25472B398);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_25472B398))
  {
    qword_25472B390 = (uint64_t)sub_20B896F94();
    __cxa_guard_release(&qword_25472B398);
  }
  if (*(_QWORD *)(a2 + 48) != *(_QWORD *)(a2 + 56))
  {
    v9 = sub_20B9698DC(*(_DWORD *)(a1 + 184));
    v10 = 528;
    if (v9)
      v10 = 532;
    v11 = *(_QWORD *)(a2 + 48);
    if ((*(_QWORD *)(a2 + 56) - v11) >> 3 >= (unint64_t)*(int *)(qword_25472B390 + v10))
      v12 = *(int *)(qword_25472B390 + v10);
    else
      v12 = (*(_QWORD *)(a2 + 56) - v11) >> 3;
    v13 = (_QWORD *)(*(_QWORD *)(a1 + 176) + 248);
    v42 = 0;
    v14 = sub_20B969C84(v13, &v42);
    v15 = !v42 && v14;
    v16 = 0;
    v17 = 0;
    if (v12)
    {
      v38 = 0;
      v18 = 0;
      v19 = *(_QWORD *)(a1 + 176) + 376;
      do
      {
        v40 = v16;
        while (1)
        {
          v20 = *(char **)(*(_QWORD *)(a2 + 48) + 8 * v18);
          if ((*(unsigned int (**)(char *))(*(_QWORD *)v20 + 408))(v20) != 1)
          {
            v21 = sub_20B984CC4(v19, v20, a3, a4, v15, *(_BYTE *)(a1 + 810), *(_BYTE *)(a1 + 811));
            v22 = v21;
            if (v21)
              break;
          }
          if (++v18 >= v12)
          {
            v16 = v40;
            goto LABEL_35;
          }
        }
        if (v17 >= v38)
        {
          v23 = (((char *)v17 - (char *)v40) >> 4) + 1;
          if (v23 >> 60)
            sub_20B80CDD8();
          if (v38 - v40 > v23)
            v23 = v38 - v40;
          v24 = 0xFFFFFFFFFFFFFFFLL;
          if ((unint64_t)((char *)v38 - (char *)v40) < 0x7FFFFFFFFFFFFFF0)
            v24 = v23;
          if (v24 >> 60)
            sub_20B800BC0();
          v39 = v24;
          v25 = (char *)operator new(16 * v24);
          v37 = ((char *)v17 - (char *)v40) >> 4;
          v26 = (unint64_t *)&v25[16 * v37];
          *v26 = v18;
          v26[1] = v22;
          if (v17 == v40)
          {
            v16 = (unint64_t *)&v25[16 * v37];
            v29 = v39;
            v28 = v40;
          }
          else
          {
            v27 = &v25[16 * v37];
            v29 = v39;
            v28 = v40;
            do
            {
              v16 = (unint64_t *)(v27 - 16);
              *((_OWORD *)v27 - 1) = *((_OWORD *)v17 - 1);
              v17 -= 2;
              v27 -= 16;
            }
            while (v17 != v40);
          }
          v38 = (unint64_t *)&v25[16 * v29];
          v17 = v26 + 2;
          if (v28)
            operator delete(v28);
        }
        else
        {
          *v17 = v18;
          v17[1] = v21;
          v17 += 2;
          v16 = v40;
        }
        if ((*(_BYTE *)(a1 + 187) & 2) == 0)
          break;
        ++v18;
      }
      while (v18 < v12);
    }
LABEL_35:
    v30 = 126 - 2 * __clz(((char *)v17 - (char *)v16) >> 4);
    if (v17 == v16)
      v31 = 0;
    else
      v31 = v30;
    sub_20B8CC820((unint64_t)v16, v17, v31, 1);
    if (v17 != v16)
    {
      v32 = v16;
      do
      {
        v33 = *v32;
        v34 = sub_20B9A7C5C(6u);
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
        {
          v35 = *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * v33);
          (*(void (**)(uint64_t, uint64_t, const char *, uint64_t))(*(_QWORD *)v35 + 528))(v35, 6, "[LexicalPreferenceLearner] Rewriting candidate from", 1);
          (*(void (**)(unint64_t, uint64_t, const char *, uint64_t))(*(_QWORD *)v32[1] + 528))(v32[1], 6, "[LexicalPreferenceLearner] Rewriting candidate to", 1);
        }
        v41 = v32[1];
        sub_20B8FDEF4(a2, (uint64_t *)&v41, v33);
        v36 = v41;
        v41 = 0;
        if (v36)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 16))(v36);
        v32 += 2;
      }
      while (v32 != v17);
    }
    sub_20B8FED50(a2, 0xCu, (uint64_t)"## Lexical preference applied ##", 0, 1u);
    if (v16)
      operator delete(v16);
  }
}

void sub_20B8C26CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  __cxa_guard_abort(&qword_25472B398);
  _Unwind_Resume(a1);
}

void sub_20B8C2738(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _BYTE *v6;
  int v7;
  BOOL v8;
  BOOL v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  _QWORD *v14;
  unint64_t v15;
  unsigned __int16 *v16;
  unint64_t v17;
  unint64_t v18;
  unsigned __int16 *v19;
  int v20;
  unsigned __int16 v21;
  unint64_t v22;
  int v23;
  BOOL v24;
  unint64_t v25;
  BOOL v26;
  int v27;
  unsigned int v28;
  BOOL v29;
  int v30;
  _QWORD v33[3];
  _QWORD *v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  sub_20B95F9A8(a1, (uint64_t)a2);
  v33[0] = &unk_24C469588;
  v33[1] = sub_20B8FEF70;
  v34 = v33;
  sub_20B8FDD20(a2, (uint64_t)v33);
  v4 = v34;
  if (v34 == v33)
  {
    v5 = 4;
    v4 = v33;
  }
  else
  {
    if (!v34)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  if (!*(_BYTE *)(a1 + 230))
  {
    v6 = *(_BYTE **)(a1 + 1032);
    v7 = *(_DWORD *)(a1 + 184);
    if (*v6)
      v8 = (v7 & 0x6000000) == 100663296;
    else
      v8 = 0;
    v9 = !v8 || (*(_DWORD *)(a1 + 184) & 4) == 0;
    if ((v7 & 0x800000) != 0)
      goto LABEL_18;
    v8 = v6[280] == 0;
    v10 = !v9;
    if (v8)
      v10 = 1;
    if ((v10 & 1) == 0)
    {
LABEL_18:
      v11 = a2[6];
      if (v11 != a2[7])
      {
        v12 = *(_QWORD **)v11;
        v13 = *(char *)(*(_QWORD *)v11 + 87);
        v14 = v13 >= 0 ? v12 + 8 : (_QWORD *)v12[8];
        v15 = v13 >= 0 ? v13 : v12[9];
        v16 = (unsigned __int16 *)(*(uint64_t (**)(_QWORD *))(*v12 + 552))(v12);
        v18 = v17;
        if (v17)
        {
          v19 = v16;
          v20 = *v16;
          v21 = v20 - 12353;
          if ((v20 - 12353) < 0x56)
            goto LABEL_33;
          v22 = 1;
          LOWORD(v23) = *v16;
          v24 = 1;
          do
          {
            if ((unsigned __int16)v23 == 12316)
              break;
            if ((unsigned __int16)v23 == 12540)
              break;
            v24 = v22 < v17;
            if (v17 == v22)
              break;
            v23 = v16[v22++];
          }
          while ((v23 - 12353) >= 0x56);
          if (v24)
          {
LABEL_33:
            sub_20B961C0C(*(_QWORD *)(a1 + 3872), a2, v14, v15, v16, v17);
            sub_20B9621B0(*(_QWORD *)(a1 + 3872), a2, v14, v15, v19, v18);
            LOWORD(v20) = *v19;
            v21 = *v19 - 12353;
          }
          if (v21 < 0x54u)
            goto LABEL_47;
          v25 = 1;
          v26 = 1;
          do
          {
            v27 = (unsigned __int16)v20;
            v28 = (unsigned __int16)v20 - 12289;
            v29 = v28 > 0x1B;
            v30 = (1 << v28) & 0x8001803;
            if (!v29 && v30 != 0 || (v27 - 12539) < 2)
              break;
            v26 = v25 < v18;
            if (v18 == v25)
              break;
            v20 = v19[v25++];
          }
          while ((v20 - 12353) >= 0x54);
          if (v26)
LABEL_47:
            sub_20B961E64(*(_QWORD *)(a1 + 3872), a2, v14, v15, v19, v18);
        }
      }
    }
    sub_20B962AEC(*(_QWORD *)(a1 + 3872), (uint64_t)a2);
  }
  sub_20B8FE3D4(a2);
  sub_20B8C2A2C(a1, (uint64_t)a2);
}

void sub_20B8C29EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_20B8C2A2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  _QWORD *v5;
  __CFArray *v6;
  const __CFString *v7;
  __CFArray *v8;
  const __CFArray *v9;
  unsigned __int8 v10;
  CFIndex v11;
  const __CFString *ValueAtIndex;
  int v13;
  void *v14;
  unint64_t v15;
  const UniChar *v16;
  CFIndex v17;
  CFIndex v18;
  void *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t *v28;
  char *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  int64x2_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  void *__p;
  _BYTE *v41;
  int64x2_t v42;
  _QWORD v43[3];
  int64x2_t *v44;
  int64x2_t v45;
  char *v46;
  _QWORD *v47;

  v2 = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)(a2 + 56) != v2)
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD **)(v2 + 8 * v4);
      if ((*(unsigned int (**)(_QWORD *))(*v5 + 96))(v5) != 78)
      {
        v6 = (__CFArray *)(*(uint64_t (**)(_QWORD *))(*v5 + 24))(v5);
        v7 = (const __CFString *)(*(uint64_t (**)(_QWORD *))(*v5 + 232))(v5);
        v8 = sub_20B93E054(1, 0, v6, v7);
        v43[2] = v8;
        if (v8)
        {
          v9 = v8;
          (*(void (**)(_QWORD *))(*v5 + 24))(v5);
          v10 = sub_20B93E778(1);
          v11 = 0;
          v42 = 0uLL;
          v43[0] = 0;
          while (v11 < CFArrayGetCount(v9))
          {
            ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v9, v11);
            sub_20B8D0790(ValueAtIndex, (UniChar **)&__p);
            v13 = *((char *)v5 + 87);
            if (v13 >= 0)
              v14 = v5 + 8;
            else
              v14 = (void *)v5[8];
            if (v13 >= 0)
              v15 = *((unsigned __int8 *)v5 + 87);
            else
              v15 = v5[9];
            v16 = (const UniChar *)(*(uint64_t (**)(_QWORD *))(*v5 + 544))(v5);
            v18 = v17;
            v19 = (void *)(*(uint64_t (**)(_QWORD *))(*v5 + 552))(v5);
            sub_20B96A2A0(v14, v15, v16, v18, v19, v20, __p, (v41 - (_BYTE *)__p) >> 1, &v39, *(_DWORD *)(a1 + 184));
            if (!v11 && (v10 & 4) != 0)
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v39 + 504))(v39, 0);
            v21 = v42.i64[1];
            if (v42.i64[1] >= v43[0])
            {
              v24 = (v42.i64[1] - v42.i64[0]) >> 3;
              if ((unint64_t)(v24 + 1) >> 61)
                sub_20B80CDD8();
              v25 = (v43[0] - v42.i64[0]) >> 2;
              if (v25 <= v24 + 1)
                v25 = v24 + 1;
              if (v43[0] - v42.i64[0] >= 0x7FFFFFFFFFFFFFF8uLL)
                v26 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v26 = v25;
              v47 = v43;
              if (v26)
                v27 = (char *)sub_20B800BE8((uint64_t)v43, v26);
              else
                v27 = 0;
              v28 = (uint64_t *)&v27[8 * v24];
              v29 = &v27[8 * v26];
              v46 = v29;
              v30 = v39;
              v39 = 0;
              *v28 = v30;
              v23 = v28 + 1;
              v45.i64[1] = (uint64_t)(v28 + 1);
              v31 = (_QWORD *)v42.i64[1];
              v32 = (_QWORD *)v42.i64[0];
              if (v42.i64[1] == v42.i64[0])
              {
                v34 = vdupq_n_s64(v42.u64[1]);
              }
              else
              {
                do
                {
                  v33 = *--v31;
                  *v31 = 0;
                  *--v28 = v33;
                }
                while (v31 != v32);
                v34 = v42;
                v23 = (_QWORD *)v45.i64[1];
                v29 = v46;
              }
              v42.i64[0] = (uint64_t)v28;
              v42.i64[1] = (uint64_t)v23;
              v45 = v34;
              v35 = (char *)v43[0];
              v43[0] = v29;
              v46 = v35;
              v44 = (int64x2_t *)v34.i64[0];
              sub_20B8CD36C((uint64_t)&v44);
            }
            else
            {
              v22 = v39;
              v39 = 0;
              *(_QWORD *)v42.i64[1] = v22;
              v23 = (_QWORD *)(v21 + 8);
            }
            v42.i64[1] = (uint64_t)v23;
            v36 = v39;
            v39 = 0;
            if (v36)
              (*(void (**)(uint64_t))(*(_QWORD *)v36 + 16))(v36);
            if (__p)
            {
              v41 = __p;
              operator delete(__p);
            }
            ++v11;
          }
          v37 = sub_20B8FE318(a2, (uint64_t **)&v42, v4 + 1);
          v44 = &v42;
          sub_20B882410((void ***)&v44);
          CFRelease(v9);
          v4 += v37;
        }
      }
      ++v4;
      v2 = *(_QWORD *)(a2 + 48);
    }
    while (v4 < (*(_QWORD *)(a2 + 56) - v2) >> 3);
  }
}

void sub_20B8C2D50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,const void *a21)
{
  __p = &a17;
  sub_20B882410((void ***)&__p);
  sub_20B88B74C(&a21, 0);
  _Unwind_Resume(a1);
}

void sub_20B8C2DC8(uint64_t a1, char *a2, uint64_t a3)
{
  _QWORD *v6;
  unint64_t v7;
  unsigned __int16 *v8;
  unint64_t v9;
  NSObject *v10;
  _BOOL4 v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD **v18;
  _QWORD **v19;
  _QWORD *v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t i;
  uint64_t v28;
  int v29;
  _WORD *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  _WORD *v34;
  int v35;
  int v36;
  char *v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  unint64_t *v45;
  unint64_t v46;
  NSObject *v47;
  uint64_t *v48;
  uint64_t *j;
  uint64_t v50;
  NSObject *v51;
  uint64_t v52;
  uint64_t v53;
  _WORD *v54;
  uint64_t v55;
  unint64_t v56;
  unsigned __int16 *v57;
  int *v58;
  NSObject *v59;
  uint64_t v60;
  int v61;
  char *v62;
  char *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  const void *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  int v71;
  BOOL v72;
  int v73;
  unsigned __int16 *v74;
  unint64_t v75;
  unsigned __int16 *v76;
  unint64_t v77;
  unint64_t v78;
  unsigned __int16 *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  unint64_t *v86;
  unint64_t *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  int v93;
  int v94;
  int v95;
  BOOL v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  BOOL v102;
  int v103;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  int v111;
  int v112;
  unsigned __int16 *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unsigned __int16 *v117;
  unint64_t *v118;
  _QWORD *v119;
  unint64_t v120;
  unsigned int v121;
  unsigned int v122;
  const __CFString *v123;
  unsigned __int8 v124;
  unsigned __int8 v125;
  uint64_t v126;
  unint64_t v127;
  BOOL v128;
  int v129;
  unsigned __int16 *v130;
  unint64_t v131;
  int v132;
  int v133;
  int v134;
  void *v136;
  const char *v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  UChar32 v147;
  unsigned int v148;
  uint64_t v149;
  uint64_t v150;
  UChar32 v151;
  int32_t IntPropertyValue;
  int32_t v153;
  BOOL v154;
  int v155;
  BOOL v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  UChar32 v162;
  int v163;
  uint64_t v165;
  uint64_t v166;
  int v167;
  uint64_t v168;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  int v173;
  unsigned int v174;
  unsigned int v175;
  BOOL v176;
  int v177;
  unsigned int v178;
  unsigned int v179;
  unsigned int v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  _QWORD *v186;
  uint64_t v187;
  NSObject *v188;
  uint64_t *k;
  uint64_t *v190;
  uint64_t v191;
  NSObject *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t *v195;
  uint64_t *v196;
  uint64_t v197;
  const void *v198;
  _DWORD *v199;
  _DWORD *v200;
  char *v201;
  _QWORD *v202;
  char *v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  unint64_t v207;
  char *v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  int v212;
  uint64_t v213;
  unint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  BOOL v219;
  uint64_t v220;
  double *v221;
  int v222;
  double v223;
  void *v224;
  double v225;
  int v226;
  unint64_t v227;
  uint64_t v228;
  const void *v229;
  double *v230;
  double *v231;
  int v232;
  unint64_t v234;
  int v235;
  int v236;
  double v237;
  double *v238;
  int v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  unint64_t *v243;
  unint64_t *v244;
  uint64_t v245;
  unint64_t v246;
  uint64_t v247;
  unint64_t v248;
  char *v249;
  BOOL v250;
  uint64_t v251;
  _QWORD *v252;
  unint64_t *v253;
  unint64_t *v254;
  uint64_t v255;
  unint64_t v256;
  uint64_t v257;
  unint64_t v258;
  char *v259;
  uint64_t v260;
  unint64_t v261;
  uint64_t v262;
  _QWORD *v263;
  uint64_t v264;
  unint64_t v265;
  uint64_t v266;
  unint64_t *v267;
  unint64_t v268;
  unint64_t v269;
  unint64_t *v270;
  unint64_t v271;
  unint64_t v272;
  NSObject *v273;
  uint64_t *v274;
  uint64_t *m;
  uint64_t v276;
  NSObject *v277;
  uint64_t v278;
  uint64_t v279;
  _BYTE *v280;
  int v281;
  BOOL v282;
  BOOL v283;
  BOOL v284;
  char v285;
  int v286;
  unsigned __int16 v287;
  unint64_t v288;
  int v289;
  unint64_t v290;
  BOOL v291;
  int v292;
  unsigned int v293;
  int v294;
  BOOL v297;
  unint64_t n;
  int v299;
  uint64_t v302;
  int v303;
  int v304;
  int v305;
  int v306;
  _BOOL4 v307;
  BOOL v308;
  int v309;
  int v310;
  int v311;
  const void **v312;
  const void **v313;
  int *v314;
  unsigned int v315;
  uint8_t *v316;
  unint64_t v317;
  int v318;
  uint64_t v319;
  uint8_t *v320;
  unint64_t v321;
  uint64_t v322;
  int *v323;
  uint64_t v324;
  unint64_t v325;
  unint64_t v326;
  unint64_t v327;
  unint64_t v328;
  char *v329;
  char *v330;
  __int128 **v331;
  __int128 *v332;
  unint64_t v333;
  unint64_t v334;
  _OWORD *v335;
  __int128 v336;
  __int128 v337;
  char *v338;
  _OWORD *v339;
  unint64_t v340;
  unint64_t v341;
  unint64_t v342;
  char *v343;
  char *v344;
  __int128 v345;
  __int128 v346;
  char *v347;
  __int128 v348;
  __int128 v349;
  char *v350;
  char *v351;
  __int16 v352;
  __int16 v353;
  uint8_t *v354;
  unint64_t v355;
  void *v356;
  unint64_t v357;
  uint8_t *v358;
  unint64_t v359;
  uint8_t *v360;
  unint64_t v361;
  int v362;
  void *v363;
  unint64_t v364;
  int v365;
  int v366;
  int v367;
  int v368;
  int v369;
  uint64_t v370;
  void *v371;
  __int128 *p_buf;
  unint64_t v373;
  __int128 *p_dst;
  unint64_t v375;
  uint64_t v376;
  const void *v377;
  uint8_t *v378;
  uint64_t v379;
  void *v380;
  uint64_t v381;
  uint64_t v382;
  int v383;
  uint64_t v384;
  char v385;
  uint64_t v386;
  uint64_t v387;
  unint64_t v388;
  unint64_t v389;
  int v390;
  uint64_t v391;
  unint64_t v392;
  int v393;
  uint64_t v394;
  unint64_t v395;
  void *v396;
  int v397;
  uint64_t v398;
  __int128 *v399;
  int v400;
  UniChar *v401;
  uint64_t v402;
  int v403;
  unint64_t v404;
  uint64_t v405;
  char v406;
  unsigned __int16 *v407;
  int v408;
  unint64_t v409;
  int v410;
  unsigned __int16 *v411;
  unint64_t v412;
  void *v413;
  unint64_t v414;
  unsigned __int8 v415;
  uint64_t v416;
  void *__p;
  char *v418;
  char *v419;
  _QWORD v420[3];
  _QWORD *v421;
  uint8_t v422[16];
  char *v423;
  uint8_t *v424;
  _QWORD **v425;
  _QWORD **v426;
  __int128 __dst;
  uint64_t v428;
  __int128 buf;
  _QWORD v430[4];

  v430[1] = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD **)(a1 + 256);
  v7 = v6[11];
  v401 = (UniChar *)v6[10];
  v8 = (unsigned __int16 *)v6[12];
  v9 = v6[13];
  v411 = v8;
  v412 = v9;
  v407 = (unsigned __int16 *)v6[14];
  v409 = v6[15];
  v10 = sub_20B9A7C5C(0xCu);
  v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG);
  v12 = *(_DWORD *)(a1 + 184);
  v13 = 192;
  if ((v12 & 0x20) != 0)
    v13 = 255;
  if (**(_BYTE **)(a1 + 1032))
    v14 = v13;
  else
    v14 = 255;
  v404 = v7;
  if (v7 > v14)
    return;
  v15 = v11;
  if ((v12 & 2) != 0 && *(_BYTE *)(a1 + 228))
  {
    v16 = sub_20B8FD978((uint64_t)a2);
    if (v16 == -1)
      v17 = 0;
    else
      v17 = *(_QWORD *)(*((_QWORD *)a2 + 6) + 8 * v16);
    (*(void (**)(uint8_t *__return_ptr, _QWORD, uint64_t, uint64_t, unsigned __int16 *, unint64_t, unsigned __int16 *, unint64_t))(**(_QWORD **)(a1 + 3840) + 24))(v422, *(_QWORD *)(a1 + 3840), *(_QWORD *)(a1 + 176) + 248, v17, v8, v9, v407, v409);
    v18 = v425;
    v19 = v426;
    if (v425 != v426)
    {
      while (1)
      {
        (*(void (**)(_QWORD, uint64_t, const char *, uint64_t))(**v18 + 528))(*v18, 10, "[MJNP::expandPhrasesWithLanguageModel] Adding an LM expansion candidate", 1);
        v420[0] = &unk_24C459188;
        v421 = v420;
        sub_20B8FDA94(a2, v18, 1, 0, (uint64_t)v420);
        v20 = v421;
        if (v421 == v420)
          break;
        if (v421)
        {
          v21 = 5;
LABEL_17:
          (*(void (**)(void))(*v20 + 8 * v21))();
        }
        if (++v18 == v19)
          goto LABEL_19;
      }
      v20 = v420;
      v21 = 4;
      goto LABEL_17;
    }
LABEL_19:
    *(_QWORD *)v422 = &unk_24C460D28;
    *(_QWORD *)&buf = &v425;
    sub_20B882410((void ***)&buf);
    sub_20B84055C((uint64_t)&v422[8]);
  }
  if (v15)
    sub_20B8FED50((uint64_t)a2, 0xCu, (uint64_t)"## Before finalizing weights ##", 0, 1u);
  sub_20B95F9A8(a1, (uint64_t)a2);
  *(_QWORD *)v422 = &unk_24C469588;
  *(_QWORD *)&v422[8] = sub_20B8FEF70;
  v424 = v422;
  sub_20B8FDD20(a2, (uint64_t)v422);
  v22 = v424;
  if (v424 == v422)
  {
    v23 = 4;
    v22 = v422;
    goto LABEL_26;
  }
  if (v424)
  {
    v23 = 5;
LABEL_26:
    (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
  }
  if (v15)
    sub_20B8FED50((uint64_t)a2, 0xCu, (uint64_t)"## After finalizing weights ##", 0, 1u);
  if ((*(_BYTE *)(a1 + 186) & 0x80) == 0)
  {
    memset(v422, 0, sizeof(v422));
    v423 = 0;
    v24 = *((_QWORD *)a2 + 6);
    if (*((_QWORD *)a2 + 7) != v24)
    {
      v25 = 0;
      v26 = 0;
      for (i = 0; i < (*((_QWORD *)a2 + 7) - v24) >> 3; ++i)
      {
        v28 = *(_QWORD *)(v24 + 8 * i);
        v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 96))(v28);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v28 + 96))(v28) == 88)
        {
          if (i > 3)
            goto LABEL_54;
          if ((unint64_t)++v25 > 1)
            goto LABEL_54;
        }
        v30 = (_WORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 544))(v28);
        if (v31 == 1 && *v30 == 22247)
        {
          v32 = *(unsigned __int8 *)(v28 + 87);
          v33 = (char)v32;
          if ((v32 & 0x80u) != 0)
            v32 = *(_QWORD *)(v28 + 72);
          if (v32 == 1)
          {
            v34 = v33 >= 0 ? (_WORD *)(v28 + 64) : *(_WORD **)(v28 + 64);
            if (*v34 == 9787)
            {
LABEL_54:
              v37 = *(char **)&v422[8];
              if (*(_QWORD *)&v422[8] >= (unint64_t)v423)
              {
                v39 = *(char **)v422;
                v40 = (uint64_t)(*(_QWORD *)&v422[8] - *(_QWORD *)v422) >> 3;
                v41 = v40 + 1;
                if ((unint64_t)(v40 + 1) >> 61)
                  sub_20B80CDD8();
                v42 = (uint64_t)&v423[-*(_QWORD *)v422];
                if ((uint64_t)&v423[-*(_QWORD *)v422] >> 2 > v41)
                  v41 = v42 >> 2;
                if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
                  v43 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v43 = v41;
                if (v43)
                {
                  v44 = (char *)sub_20B800BE8((uint64_t)&v423, v43);
                  v39 = *(char **)v422;
                  v37 = *(char **)&v422[8];
                }
                else
                {
                  v44 = 0;
                }
                v45 = (unint64_t *)&v44[8 * v40];
                *v45 = i;
                v38 = v45 + 1;
                while (v37 != v39)
                {
                  v46 = *((_QWORD *)v37 - 1);
                  v37 -= 8;
                  *--v45 = v46;
                }
                *(_QWORD *)v422 = v45;
                *(_QWORD *)&v422[8] = v38;
                v423 = &v44[8 * v43];
                if (v39)
                  operator delete(v39);
              }
              else
              {
                **(_QWORD **)&v422[8] = i;
                v38 = v37 + 8;
              }
              *(_QWORD *)&v422[8] = v38;
              goto LABEL_71;
            }
          }
        }
        if (!**(_BYTE **)(a1 + 1032))
        {
          v36 = *(_DWORD *)(a1 + 184);
          if ((v36 & 0x2000002) == 2)
          {
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v28 + 408))(v28) == 1)
              goto LABEL_54;
            if (**(_BYTE **)(a1 + 1032))
              goto LABEL_45;
            v36 = *(_DWORD *)(a1 + 184);
          }
          if ((v36 & 0x2000002) == 2 && v29 != 74 && v29 != 76 && !sub_20B8C2264(a1, v28))
            goto LABEL_54;
        }
LABEL_45:
        (*(void (**)(uint64_t))(*(_QWORD *)v28 + 408))(v28);
        ++v26;
        if (!**(_BYTE **)(a1 + 1032))
        {
          v35 = *(_DWORD *)(a1 + 184);
          if ((v35 & 0x2000002) == 2 && (v26 > 0x20 || v26 >= 2 && (v35 & 0x4000000) == 0 && v409 >= 0x11))
            goto LABEL_54;
        }
LABEL_71:
        v24 = *((_QWORD *)a2 + 6);
      }
    }
    v47 = sub_20B9A7C5C(0xBu);
    if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
    {
      v48 = *(uint64_t **)v422;
      for (j = *(uint64_t **)&v422[8]; v48 != j; ++v48)
      {
        v50 = *v48;
        v51 = sub_20B9A7C5C(0xBu);
        if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
        {
          v52 = *(_QWORD *)(*((_QWORD *)a2 + 6) + 8 * v50);
          v53 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v52 + 24))(v52);
          LODWORD(buf) = 138412290;
          *(_QWORD *)((char *)&buf + 4) = v53;
          _os_log_debug_impl(&dword_20B7F7000, v51, OS_LOG_TYPE_DEBUG, "Pruning %@ (n-gram expansion final)", (uint8_t *)&buf, 0xCu);
        }
      }
    }
    sub_20B8FEACC(a2, (unint64_t **)v422);
    if (*(_QWORD *)v422)
    {
      *(_QWORD *)&v422[8] = *(_QWORD *)v422;
      operator delete(*(void **)v422);
    }
  }
  if (!*(_BYTE *)(a1 + 230))
    sub_20B8C2368(a1, (uint64_t)a2, (uint64_t)&v411, (_QWORD *)(*(_QWORD *)(a1 + 176) + 248));
  if (**(_BYTE **)(a1 + 1032))
  {
    v54 = *(_WORD **)(a1 + 176);
    if (v54[252] != 12290 || v54[253] != 12289 || (__int16)v54[254] != -255 || (__int16)v54[255] != -225)
    {
      if (sub_20B9866D4(&v411))
      {
        v55 = *((_QWORD *)a2 + 6);
        if (*((_QWORD *)a2 + 7) != v55)
        {
          v56 = 0;
          v57 = v54 + 188;
          do
          {
            v58 = *(int **)(v55 + 8 * v56);
            if ((unint64_t)(*(uint64_t (**)(int *))(*(_QWORD *)v58 + 48))(v58) >= 2)
            {
              *(_QWORD *)&buf = sub_20B98693C(v57, v58);
              if ((_QWORD)buf)
              {
                v59 = sub_20B9A7C5C(6u);
                if (os_log_type_enabled(v59, OS_LOG_TYPE_DEBUG))
                {
                  (*(void (**)(int *, uint64_t, const char *, uint64_t))(*(_QWORD *)v58 + 528))(v58, 6, "[PunctuationPreferenceLearner] Rewriting candidate from", 1);
                  (*(void (**)(_QWORD, uint64_t, const char *, uint64_t))(*(_QWORD *)buf + 528))(buf, 6, "[PunctuationPreferenceLearner] Rewriting candidate to", 1);
                }
                *(_QWORD *)v422 = buf;
                if (sub_20B8CD218((_QWORD *)a2 + 1, v422))
                  sub_20B8FDEF4((uint64_t)a2, (uint64_t *)&buf, v56);
                else
                  sub_20B8FEBFC(a2, (uint64_t **)&buf, v56);
                v60 = buf;
                *(_QWORD *)&buf = 0;
                if (v60)
                  (*(void (**)(uint64_t))(*(_QWORD *)v60 + 16))(v60);
              }
            }
            ++v56;
            v55 = *((_QWORD *)a2 + 6);
          }
          while (v56 < (*((_QWORD *)a2 + 7) - v55) >> 3);
        }
      }
    }
  }
  v61 = *(_DWORD *)(a1 + 184);
  if ((v61 & 0x800000) != 0)
    goto LABEL_522;
  v63 = (char *)*((_QWORD *)a2 + 6);
  v62 = (char *)*((_QWORD *)a2 + 7);
  if ((unint64_t)(v62 - v63) < 0x10)
    goto LABEL_521;
  if (v63 == v62)
  {
    v64 = 0;
    v65 = *((_QWORD *)a2 + 7);
  }
  else
  {
    v64 = 0;
    do
    {
      if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)v63 + 96))(*(_QWORD *)v63) == 77)
        break;
      if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)v63 + 96))(*(_QWORD *)v63) == 71)
        break;
      ++v64;
      v63 += 8;
    }
    while (v63 != v62);
    v62 = (char *)*((_QWORD *)a2 + 6);
    v65 = *((_QWORD *)a2 + 7);
  }
  v66 = v65 - (_QWORD)v62;
  if (v64 == (v65 - (uint64_t)v62) >> 3)
    goto LABEL_521;
  v67 = *(const void **)&v62[8 * v64];
  if (!v67)
    goto LABEL_521;
  v396 = __dynamic_cast(v67, (const struct __class_type_info *)&unk_24C45C148, (const struct __class_type_info *)&unk_24C45C5C8, 0);
  if (!v396)
    goto LABEL_521;
  buf = 0uLL;
  v430[0] = 0;
  sub_20B82D5C8((void **)&buf, v66 >> 3);
  v68 = *((_QWORD *)a2 + 6);
  v398 = a3;
  if (*((_QWORD *)a2 + 7) == v68)
    goto LABEL_365;
  v385 = 0;
  v69 = 0;
  v381 = 0;
  v382 = 0;
  v383 = *(_DWORD *)(a1 + 184) & 0x6000002;
  v384 = 0;
  do
  {
    v70 = *(_QWORD *)(v68 + 8 * v69);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v70 + 96))(v70) == 89)
      goto LABEL_358;
    v71 = *(_DWORD *)(a1 + 184);
    if (**(_BYTE **)(a1 + 1032))
      v72 = 1;
    else
      v72 = (*(_DWORD *)(a1 + 184) & 2) == 0;
    if (v72)
    {
      if ((v71 & 0x6000002) != 0x4000002)
        goto LABEL_164;
    }
    else if ((v71 & 0x2000000) != 0)
    {
      goto LABEL_164;
    }
    v73 = *(char *)(v70 + 87);
    if (v73 >= 0)
      v74 = (unsigned __int16 *)(v70 + 64);
    else
      v74 = *(unsigned __int16 **)(v70 + 64);
    if (v73 >= 0)
      v75 = *(unsigned __int8 *)(v70 + 87);
    else
      v75 = *(_QWORD *)(v70 + 72);
    if (!v75 || !u_isupper(*v74) && (v75 < 2 || !u_isupper(v74[1])))
    {
      v76 = (unsigned __int16 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 544))(v70);
      v78 = v77;
      if (!v77 || (v79 = v76, !u_isupper(*v76)) && (v78 < 2 || !u_isupper(v79[1])))
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v70 + 408))(v70) == 2)
        {
          v80 = *(char *)(v70 + 119) < 0 ? *(unsigned __int16 *)(v70 + 104) : *(unsigned __int8 *)(v70 + 119);
          v81 = *(_QWORD *)(a1 + 256);
          v82 = *(_QWORD *)(v81 + 128);
          v83 = v82 >= 1 ? 1 : *(_QWORD *)(v81 + 128);
          if (v82 <= 0 && v80 - *(_QWORD *)(v81 + 120) + v83 == 1)
          {
            v84 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 96))(v70);
            v85 = v384;
            if (v84 == 77)
              v85 = v384 + 1;
            v384 = v85;
            v86 = (unint64_t *)*((_QWORD *)&buf + 1);
            if (*((_QWORD *)&buf + 1) >= v430[0])
            {
              v87 = (unint64_t *)buf;
              v88 = (uint64_t)(*((_QWORD *)&buf + 1) - buf) >> 3;
              v89 = v88 + 1;
              if ((unint64_t)(v88 + 1) >> 61)
                sub_20B80CDD8();
              v90 = v430[0] - buf;
              if ((uint64_t)(v430[0] - buf) >> 2 > v89)
                v89 = v90 >> 2;
              if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFF8)
                v91 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v91 = v89;
              if (v91)
              {
                v92 = (char *)sub_20B800BE8((uint64_t)v430, v91);
                v86 = (unint64_t *)*((_QWORD *)&buf + 1);
                v87 = (unint64_t *)buf;
              }
              else
              {
                v92 = 0;
              }
              v118 = (unint64_t *)&v92[8 * v88];
              *v118 = v69;
              v119 = v118 + 1;
              while (v86 != v87)
              {
                v185 = *--v86;
                *--v118 = v185;
              }
              goto LABEL_355;
            }
            goto LABEL_267;
          }
        }
      }
    }
LABEL_164:
    if (v69 < v64)
      goto LABEL_358;
    v93 = **(unsigned __int8 **)(a1 + 1032);
    v94 = *(_DWORD *)(a1 + 184);
    v95 = v94 & 2;
    if (**(_BYTE **)(a1 + 1032))
      v96 = 1;
    else
      v96 = v95 == 0;
    if (!v96)
    {
      if ((v94 & 0x6000000) != 0)
      {
        v93 = 0;
      }
      else
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v70 + 552))(v70);
        if (v97 < 3)
        {
          v86 = (unint64_t *)*((_QWORD *)&buf + 1);
          if (*((_QWORD *)&buf + 1) < v430[0])
            goto LABEL_267;
          v87 = (unint64_t *)buf;
          v98 = (uint64_t)(*((_QWORD *)&buf + 1) - buf) >> 3;
          v99 = v98 + 1;
          if ((unint64_t)(v98 + 1) >> 61)
            goto LABEL_717;
          v100 = v430[0] - buf;
          if ((uint64_t)(v430[0] - buf) >> 2 > v99)
            v99 = v100 >> 2;
          if ((unint64_t)v100 >= 0x7FFFFFFFFFFFFFF8)
            v91 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v91 = v99;
          if (v91)
          {
            v92 = (char *)sub_20B800BE8((uint64_t)v430, v91);
            v86 = (unint64_t *)*((_QWORD *)&buf + 1);
            v87 = (unint64_t *)buf;
          }
          else
          {
            v92 = 0;
          }
          v118 = (unint64_t *)&v92[8 * v98];
          *v118 = v69;
          v119 = v118 + 1;
          while (v86 != v87)
          {
            v183 = *--v86;
            *--v118 = v183;
          }
LABEL_355:
          *(_QWORD *)&buf = v118;
          *((_QWORD *)&buf + 1) = v119;
          v430[0] = &v92[8 * v91];
          if (v87)
            operator delete(v87);
          goto LABEL_357;
        }
        v94 = *(_DWORD *)(a1 + 184);
        v93 = **(unsigned __int8 **)(a1 + 1032);
        v95 = v94 & 2;
      }
    }
    v102 = (v94 & 0x2000000) == 0 && v95 != 0 && v93 == 0;
    v103 = v94 & 0x6000002;
    if (!v102 && v103 != 67108866)
      goto LABEL_235;
    v105 = *(_QWORD *)(a1 + 256);
    v107 = *(_QWORD *)(v105 + 112);
    v106 = *(_QWORD *)(v105 + 120);
    v393 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 112))(v70);
    v390 = (*(uint64_t (**)(void *))(*(_QWORD *)v396 + 112))(v396);
    (*(void (**)(uint64_t))(*(_QWORD *)v70 + 552))(v70);
    v388 = v108;
    v109 = *(unsigned __int8 *)(v70 + 87);
    if ((v109 & 0x80u) != 0)
      v109 = *(_QWORD *)(v70 + 72);
    v386 = v109;
    v110 = sub_20B87C1A0(v107, v106);
    v111 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 96))(v70);
    v112 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 408))(v70);
    sub_20B8B2334(0);
    v113 = (unsigned __int16 *)sub_20B896F94();
    if (v112 == 1)
    {
LABEL_196:
      v86 = (unint64_t *)*((_QWORD *)&buf + 1);
      if (*((_QWORD *)&buf + 1) < v430[0])
        goto LABEL_267;
      v87 = (unint64_t *)buf;
      v114 = (uint64_t)(*((_QWORD *)&buf + 1) - buf) >> 3;
      v115 = v114 + 1;
      if ((unint64_t)(v114 + 1) >> 61)
        goto LABEL_717;
      v116 = v430[0] - buf;
      if ((uint64_t)(v430[0] - buf) >> 2 > v115)
        v115 = v116 >> 2;
      if ((unint64_t)v116 >= 0x7FFFFFFFFFFFFFF8)
        v91 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v91 = v115;
      if (v91)
      {
        v92 = (char *)sub_20B800BE8((uint64_t)v430, v91);
        v86 = (unint64_t *)*((_QWORD *)&buf + 1);
        v87 = (unint64_t *)buf;
      }
      else
      {
        v92 = 0;
      }
      v118 = (unint64_t *)&v92[8 * v114];
      *v118 = v69;
      v119 = v118 + 1;
      while (v86 != v87)
      {
        v120 = *--v86;
        *--v118 = v120;
      }
      goto LABEL_355;
    }
    if (v111 == 71)
      goto LABEL_235;
    if (v111 == 88)
      goto LABEL_196;
    v117 = v113;
    if (v111 != 77)
    {
      if (v383 != 67108866)
        goto LABEL_235;
      if (v111 == 80 && ++v382 > (unint64_t)v113[188])
        goto LABEL_196;
LABEL_222:
      if (v112 == 2 && v106 - v110 < v117[149] && v388 > v106 - v110 + 1 || v393 - v390 > (__int16)v117[148])
        goto LABEL_196;
      goto LABEL_235;
    }
    if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 48))(v70) > 1
      || (v121 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v70 + 344))(v70, 0),
          (unsigned __int16)word_25472C9F8 > v121)
      || (unsigned __int16)word_25472C9FA < v121)
    {
      if ((unint64_t)++v384 > 3)
        goto LABEL_196;
    }
    if (v383 == 67108866)
      goto LABEL_222;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v70 + 408))(v70) == 2)
    {
      if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 48))(v70) > 1)
        goto LABEL_196;
      v122 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v70 + 344))(v70, 0);
      if ((unsigned __int16)word_25472C9F8 > v122 || (unsigned __int16)word_25472C9FA < v122)
        goto LABEL_196;
    }
    if (v112 == 2 && v388 == v386 && (unint64_t)++v381 > 1)
      goto LABEL_196;
    v123 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 232))(v70);
    if (CFStringGetLength(v123) < 5)
      goto LABEL_196;
LABEL_235:
    if ((*(_BYTE *)(a1 + 187) & 0x20) != 0 && (sub_20B8C2264(a1, v70) & 1) == 0)
    {
      v86 = (unint64_t *)*((_QWORD *)&buf + 1);
      if (*((_QWORD *)&buf + 1) < v430[0])
        goto LABEL_267;
      v87 = (unint64_t *)buf;
      v142 = (uint64_t)(*((_QWORD *)&buf + 1) - buf) >> 3;
      v143 = v142 + 1;
      if ((unint64_t)(v142 + 1) >> 61)
        goto LABEL_717;
      v144 = v430[0] - buf;
      if ((uint64_t)(v430[0] - buf) >> 2 > v143)
        v143 = v144 >> 2;
      if ((unint64_t)v144 >= 0x7FFFFFFFFFFFFFF8)
        v91 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v91 = v143;
      if (v91)
      {
        v92 = (char *)sub_20B800BE8((uint64_t)v430, v91);
        v86 = (unint64_t *)*((_QWORD *)&buf + 1);
        v87 = (unint64_t *)buf;
      }
      else
      {
        v92 = 0;
      }
      v118 = (unint64_t *)&v92[8 * v142];
      *v118 = v69;
      v119 = v118 + 1;
      while (v86 != v87)
      {
        v182 = *--v86;
        *--v118 = v182;
      }
      goto LABEL_355;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v70 + 408))(v70) == 1)
      goto LABEL_358;
    if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 48))(v70) < 2)
      goto LABEL_338;
    v124 = atomic_load((unsigned __int8 *)&qword_25472B3C0);
    if ((v124 & 1) == 0 && __cxa_guard_acquire(&qword_25472B3C0))
    {
      sub_20B87C9E0(byte_25472B3E8, (char *)L"(<[{（＜［｛「『【〈《");
      __cxa_atexit((void (*)(void *))sub_20B87BE80, byte_25472B3E8, &dword_20B7F7000);
      __cxa_guard_release(&qword_25472B3C0);
    }
    v125 = atomic_load((unsigned __int8 *)&qword_25472B3C8);
    if ((v125 & 1) == 0 && __cxa_guard_acquire(&qword_25472B3C8))
    {
      sub_20B87C9E0(byte_25472B400, (char *)asc_20BA93BC0);
      __cxa_atexit((void (*)(void *))sub_20B87BE80, byte_25472B400, &dword_20B7F7000);
      __cxa_guard_release(&qword_25472B3C8);
    }
    v126 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 544))(v70);
    v389 = v127;
    v391 = v126;
    if (v127)
    {
      v128 = 0;
      v129 = 0;
      v131 = v127;
      v130 = (unsigned __int16 *)v126;
      do
      {
        v133 = *v130++;
        v132 = v133;
        if ((unsigned __int16)(v133 + 240) >= 0xAu)
        {
          if ((v132 - 48) >= 0xA)
          {
            if (sub_20B8D9FF4(v132))
              v134 = 3;
            else
              v134 = 0;
          }
          else
          {
            v134 = 1;
          }
        }
        else
        {
          v134 = 2;
        }
        if (v128 && v134 != 0 && v129 != v134)
          goto LABEL_257;
        v128 = v134 != 0;
        v129 = v134;
        --v131;
      }
      while (v131);
    }
    v136 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 24))(v70);
    if ((sub_20B8B9B44(v136, v137, v138) & 1) != 0)
      goto LABEL_257;
    if (v389 < 2)
    {
LABEL_325:
      v170 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 544))(v70);
      if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 48))(v70))
      {
        v171 = 0;
        v172 = 0;
        do
        {
          if (v171)
          {
            v173 = *(unsigned __int16 *)(v170 + 2 * v172 - 2);
            v174 = v173 - 48;
            v175 = (unsigned __int16)(v173 + 240);
            v176 = v174 >= 0xA && v175 > 9;
            if (!v176)
            {
              v177 = *(unsigned __int16 *)(v170 + 2 * v172);
              v178 = v177 - 48;
              v179 = (unsigned __int16)(v177 + 240);
              if (v178 < 0xA || v179 < 0xA)
                goto LABEL_257;
            }
          }
          v181 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v70 + 568))(v70, v171++);
          v172 += v181;
        }
        while (v171 < (*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 48))(v70));
      }
LABEL_338:
      v385 = 1;
      goto LABEL_358;
    }
    v387 = 0;
    v394 = v391;
    v145 = 1;
    while (1)
    {
      v146 = *(unsigned __int16 *)(v391 + 2 * v145);
      v147 = 9787;
      if (v146 == 9787 || (v148 = u_charType(*(unsigned __int16 *)(v391 + 2 * v145)) - 19, v147 = v146, v148 > 0xA))
      {
        if (u_charType(v147) == 19)
        {
          v160 = 0;
          while (1)
          {
            v161 = 4;
            if (v145 + v160 > 4)
              v161 = v145 + v160;
            if (v145 + v160 <= v161 - 4)
              break;
            v162 = *(unsigned __int16 *)(v394 + 2 * v160);
            v163 = u_charType(v162);
            --v160;
            if (v146 != v162 && v163 == 19)
              goto LABEL_257;
          }
        }
        else if (sub_20B87B724(byte_25472B400, v146, 0) != -1)
        {
          v165 = 0;
          while (1)
          {
            v166 = 6;
            if (v145 + v165 > 6)
              v166 = v145 + v165;
            if (v145 + v165 <= v166 - 6)
              break;
            v167 = *(unsigned __int16 *)(v394 + 2 * v165);
            v168 = sub_20B87B724(byte_25472B3E8, v167, 0);
            --v165;
            if (v146 != v167 && v168 != -1)
              goto LABEL_257;
          }
        }
        goto LABEL_324;
      }
      v149 = 2;
      if (v145 > 2)
        v149 = v145;
      if (v145 > (unint64_t)(v149 - 2))
        break;
LABEL_324:
      ++v145;
      ++v387;
      v394 += 2;
      if (v145 == v389)
        goto LABEL_325;
    }
    v150 = v387;
    while (1)
    {
      v151 = *(unsigned __int16 *)(v391 + 2 * v150);
      if (v151 != 9787 && (u_charType(*(unsigned __int16 *)(v391 + 2 * v150)) - 19) <= 0xA)
      {
        IntPropertyValue = u_getIntPropertyValue(v146, UCHAR_EAST_ASIAN_WIDTH);
        v153 = u_getIntPropertyValue(v151, UCHAR_EAST_ASIAN_WIDTH);
        v154 = IntPropertyValue == 3 || IntPropertyValue == 5;
        v155 = v154;
        v156 = v153 == 3 || v153 == 5;
        v157 = v156;
        if (v155 != v157)
          break;
      }
      v158 = 2;
      if (v150 > 2)
        v158 = v150;
      v159 = v150-- + 1;
      if (v159 < v158)
        goto LABEL_324;
    }
LABEL_257:
    v86 = (unint64_t *)*((_QWORD *)&buf + 1);
    if (*((_QWORD *)&buf + 1) >= v430[0])
    {
      v87 = (unint64_t *)buf;
      v139 = (uint64_t)(*((_QWORD *)&buf + 1) - buf) >> 3;
      v140 = v139 + 1;
      if (!((unint64_t)(v139 + 1) >> 61))
      {
        v141 = v430[0] - buf;
        if ((uint64_t)(v430[0] - buf) >> 2 > v140)
          v140 = v141 >> 2;
        if ((unint64_t)v141 >= 0x7FFFFFFFFFFFFFF8)
          v91 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v91 = v140;
        if (v91)
        {
          v92 = (char *)sub_20B800BE8((uint64_t)v430, v91);
          v86 = (unint64_t *)*((_QWORD *)&buf + 1);
          v87 = (unint64_t *)buf;
        }
        else
        {
          v92 = 0;
        }
        v118 = (unint64_t *)&v92[8 * v139];
        *v118 = v69;
        v119 = v118 + 1;
        while (v86 != v87)
        {
          v184 = *--v86;
          *--v118 = v184;
        }
        goto LABEL_355;
      }
LABEL_717:
      sub_20B80CDD8();
    }
LABEL_267:
    *v86 = v69;
    v119 = v86 + 1;
LABEL_357:
    *((_QWORD *)&buf + 1) = v119;
LABEL_358:
    ++v69;
    v68 = *((_QWORD *)a2 + 6);
  }
  while (v69 < (*((_QWORD *)a2 + 7) - v68) >> 3);
  a3 = v398;
  if ((v385 & 1) == 0)
  {
LABEL_365:
    v186 = (_QWORD *)buf;
    if ((_QWORD)buf != *((_QWORD *)&buf + 1))
    {
      while (*v186 != v64)
      {
        if (++v186 == *((_QWORD **)&buf + 1))
        {
          v186 = (_QWORD *)*((_QWORD *)&buf + 1);
          break;
        }
      }
    }
    if (v186 != *((_QWORD **)&buf + 1))
    {
      v187 = *((_QWORD *)&buf + 1) - (_QWORD)(v186 + 1);
      if (*((_QWORD **)&buf + 1) != v186 + 1)
        memmove(v186, v186 + 1, *((_QWORD *)&buf + 1) - (_QWORD)(v186 + 1));
      *((_QWORD *)&buf + 1) = (char *)v186 + v187;
    }
  }
  v188 = sub_20B9A7C5C(0xBu);
  if (os_log_type_enabled(v188, OS_LOG_TYPE_DEBUG))
  {
    v190 = (uint64_t *)*((_QWORD *)&buf + 1);
    for (k = (uint64_t *)buf; k != v190; ++k)
    {
      v191 = *k;
      v192 = sub_20B9A7C5C(0xBu);
      if (os_log_type_enabled(v192, OS_LOG_TYPE_DEBUG))
      {
        v193 = *(_QWORD *)(*((_QWORD *)a2 + 6) + 8 * v191);
        v194 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v193 + 24))(v193);
        *(_DWORD *)v422 = 138412290;
        *(_QWORD *)&v422[4] = v194;
        _os_log_debug_impl(&dword_20B7F7000, v192, OS_LOG_TYPE_DEBUG, "Pruning %@ (post-processing)", v422, 0xCu);
      }
    }
  }
  if (**(_BYTE **)(a1 + 1032) && (*(_DWORD *)(a1 + 184) & 0x6000002) == 0x4000002)
  {
    memset(v422, 0, sizeof(v422));
    v423 = 0;
    v195 = (uint64_t *)*((_QWORD *)&buf + 1);
    v196 = (uint64_t *)buf;
    if ((_QWORD)buf != *((_QWORD *)&buf + 1))
    {
      do
      {
        v197 = *v196;
        v198 = *(const void **)(*((_QWORD *)a2 + 6) + 8 * *v196);
        if (v198)
        {
          v199 = __dynamic_cast(v198, (const struct __class_type_info *)&unk_24C45C148, (const struct __class_type_info *)&unk_24C45C5C8, 0);
          if (v199)
          {
            v200 = v199;
            if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v199 + 408))(v199) == 2)
            {
              v201 = *(char **)&v422[8];
              if (*(_QWORD *)&v422[8] >= (unint64_t)v423)
              {
                v203 = *(char **)v422;
                v204 = (uint64_t)(*(_QWORD *)&v422[8] - *(_QWORD *)v422) >> 3;
                v205 = v204 + 1;
                if ((unint64_t)(v204 + 1) >> 61)
                  sub_20B80CDD8();
                v206 = (uint64_t)&v423[-*(_QWORD *)v422];
                if ((uint64_t)&v423[-*(_QWORD *)v422] >> 2 > v205)
                  v205 = v206 >> 2;
                if ((unint64_t)v206 >= 0x7FFFFFFFFFFFFFF8)
                  v207 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v207 = v205;
                if (v207)
                {
                  v208 = (char *)sub_20B800BE8((uint64_t)&v423, v207);
                  v203 = *(char **)v422;
                  v201 = *(char **)&v422[8];
                }
                else
                {
                  v208 = 0;
                }
                v209 = &v208[8 * v204];
                *(_QWORD *)v209 = v197;
                v202 = v209 + 8;
                while (v201 != v203)
                {
                  v210 = *((_QWORD *)v201 - 1);
                  v201 -= 8;
                  *((_QWORD *)v209 - 1) = v210;
                  v209 -= 8;
                }
                *(_QWORD *)v422 = v209;
                *(_QWORD *)&v422[8] = v202;
                v423 = &v208[8 * v207];
                if (v203)
                  operator delete(v203);
              }
              else
              {
                **(_QWORD **)&v422[8] = v197;
                v202 = v201 + 8;
              }
              *(_QWORD *)&v422[8] = v202;
            }
            else
            {
              v200[51] = 68;
            }
          }
        }
        ++v196;
      }
      while (v196 != v195);
      v196 = (uint64_t *)buf;
      a3 = v398;
    }
    if (v196)
    {
      *((_QWORD *)&buf + 1) = v196;
      operator delete(v196);
    }
    buf = *(_OWORD *)v422;
    v430[0] = v423;
  }
  sub_20B8FEACC(a2, (unint64_t **)&buf);
  v211 = *(_QWORD *)(a1 + 1184);
  if (v211 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v211 + 48))(v211))
  {
    v212 = sub_20B9698DC(*(_DWORD *)(a1 + 184));
    v213 = 224;
    if (v212)
      v213 = 228;
    v214 = *(int *)(*(_QWORD *)(a1 + 1032) + v213);
    v215 = *((_QWORD *)a2 + 6);
    v216 = *((_QWORD *)a2 + 7);
    if (v215 == v216)
    {
      v217 = 0;
      v220 = *((_QWORD *)a2 + 6);
    }
    else
    {
      v217 = 0;
      v218 = v215 + 8;
      do
      {
        if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v218 - 8) + 96))(*(_QWORD *)(v218 - 8)) == 77)
          break;
        if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v218 - 8) + 96))(*(_QWORD *)(v218 - 8)) == 71)
        {
          v219 = 1;
        }
        else
        {
          ++v217;
          v219 = v218 == v216;
        }
        v218 += 8;
      }
      while (!v219);
      v215 = *((_QWORD *)a2 + 6);
      v220 = *((_QWORD *)a2 + 7);
    }
    if (v217 != (v220 - v215) >> 3)
    {
      v221 = *(double **)(v215 + 8 * v217);
      v222 = (*(uint64_t (**)(double *))(*(_QWORD *)v221 + 384))(v221);
      v223 = v221[23];
      v224 = sub_20B896F94();
      v225 = *((double *)v224 + 1);
      v226 = *((_DWORD *)v224 + 1);
      memset(v422, 0, sizeof(v422));
      v423 = 0;
      sub_20B82D5C8((void **)v422, ((uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 3) - v217);
      v227 = v217 + 1;
      v228 = *((_QWORD *)a2 + 6);
      if (v217 + 1 < (unint64_t)((*((_QWORD *)a2 + 7) - v228) >> 3))
      {
        v392 = 0;
        v395 = 0;
        v397 = (int)(v225 * (double)v222 - (double)v226 * v223);
        while (1)
        {
          v229 = *(const void **)(v228 + 8 * v227);
          if (!v229)
            goto LABEL_431;
          v230 = (double *)__dynamic_cast(v229, (const struct __class_type_info *)&unk_24C45C148, (const struct __class_type_info *)&unk_24C45C5C8, 0);
          if (!v230)
            goto LABEL_431;
          v231 = v230;
          if ((*(unsigned int (**)(double *))(*(_QWORD *)v230 + 408))(v230) == 1)
            goto LABEL_431;
          v232 = (*(uint64_t (**)(double *))(*(_QWORD *)v231 + 96))(v231);
          if ((v232 - 66) <= 0x11 && ((1 << (v232 - 66)) & 0x24521) != 0)
            goto LABEL_431;
          v234 = v214;
          v235 = (*(uint64_t (**)(double *))(*(_QWORD *)v231 + 408))(v231);
          v236 = (*(uint64_t (**)(double *))(*(_QWORD *)v231 + 384))(v231);
          v237 = v231[23];
          v238 = (double *)sub_20B896F94();
          v239 = (int)(v238[1] * (double)v236 - (double)*((int *)v238 + 1) * v237) - v397;
          if (v235 == 2)
            break;
          if (v235 || (*(uint64_t (**)(double *))(*(_QWORD *)v231 + 48))(v231) == 1)
            goto LABEL_511;
          v240 = sub_20B8DBD3C(*(_QWORD *)(a1 + 1040), (uint64_t)v231);
          if (*((char *)v231 + 119) < 0)
            v241 = *((_QWORD *)v231 + 13);
          else
            LOWORD(v241) = *((unsigned __int8 *)v231 + 119);
          v250 = (unsigned __int16)v241 > 4u && v240 > 1;
          v251 = 236;
          if (v250)
            v251 = 240;
          if (v239 > *(_DWORD *)(*(_QWORD *)(a1 + 1032) + v251))
          {
            v243 = *(unint64_t **)&v422[8];
            if (*(_QWORD *)&v422[8] < (unint64_t)v423)
              goto LABEL_459;
            v244 = *(unint64_t **)v422;
            v260 = (uint64_t)(*(_QWORD *)&v422[8] - *(_QWORD *)v422) >> 3;
            v261 = v260 + 1;
            if ((unint64_t)(v260 + 1) >> 61)
              goto LABEL_721;
            v262 = (uint64_t)&v423[-*(_QWORD *)v422];
            if ((uint64_t)&v423[-*(_QWORD *)v422] >> 2 > v261)
              v261 = v262 >> 2;
            if ((unint64_t)v262 >= 0x7FFFFFFFFFFFFFF8)
              v248 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v248 = v261;
            if (v248)
            {
              v249 = (char *)sub_20B800BE8((uint64_t)&v423, v248);
              v244 = *(unint64_t **)v422;
              v243 = *(unint64_t **)&v422[8];
            }
            else
            {
              v249 = 0;
            }
            v267 = (unint64_t *)&v249[8 * v260];
            *v267 = v227;
            v252 = v267 + 1;
            while (v243 != v244)
            {
              v269 = *--v243;
              *--v267 = v269;
            }
LABEL_497:
            *(_QWORD *)v422 = v267;
            *(_QWORD *)&v422[8] = v252;
            v423 = &v249[8 * v248];
            if (v244)
              operator delete(v244);
            goto LABEL_499;
          }
          if (v392 >= v234)
          {
            v253 = *(unint64_t **)&v422[8];
            if (*(_QWORD *)&v422[8] < (unint64_t)v423)
              goto LABEL_480;
            v254 = *(unint64_t **)v422;
            v264 = (uint64_t)(*(_QWORD *)&v422[8] - *(_QWORD *)v422) >> 3;
            v265 = v264 + 1;
            if ((unint64_t)(v264 + 1) >> 61)
LABEL_721:
              sub_20B80CDD8();
            v266 = (uint64_t)&v423[-*(_QWORD *)v422];
            if ((uint64_t)&v423[-*(_QWORD *)v422] >> 2 > v265)
              v265 = v266 >> 2;
            if ((unint64_t)v266 >= 0x7FFFFFFFFFFFFFF8)
              v258 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v258 = v265;
            if (v258)
            {
              v259 = (char *)sub_20B800BE8((uint64_t)&v423, v258);
              v254 = *(unint64_t **)v422;
              v253 = *(unint64_t **)&v422[8];
            }
            else
            {
              v259 = 0;
            }
            v270 = (unint64_t *)&v259[8 * v264];
            *v270 = v227;
            v263 = v270 + 1;
            while (v253 != v254)
            {
              v272 = *--v253;
              *--v270 = v272;
            }
LABEL_508:
            *(_QWORD *)v422 = v270;
            *(_QWORD *)&v422[8] = v263;
            v423 = &v259[8 * v258];
            if (v254)
              operator delete(v254);
            goto LABEL_510;
          }
          v214 = v234;
          ++v392;
LABEL_431:
          ++v227;
          v228 = *((_QWORD *)a2 + 6);
          if (v227 >= (*((_QWORD *)a2 + 7) - v228) >> 3)
            goto LABEL_512;
        }
        if (v232 == 70)
          goto LABEL_511;
        v242 = *(_QWORD *)(a1 + 1032);
        if (v239 <= *(_DWORD *)(v242 + 244))
        {
          if (v395 < *(int *)(v242 + 232))
          {
            ++v395;
LABEL_511:
            v214 = v234;
            goto LABEL_431;
          }
          v253 = *(unint64_t **)&v422[8];
          if (*(_QWORD *)&v422[8] >= (unint64_t)v423)
          {
            v254 = *(unint64_t **)v422;
            v255 = (uint64_t)(*(_QWORD *)&v422[8] - *(_QWORD *)v422) >> 3;
            v256 = v255 + 1;
            if ((unint64_t)(v255 + 1) >> 61)
LABEL_722:
              sub_20B80CDD8();
            v257 = (uint64_t)&v423[-*(_QWORD *)v422];
            if ((uint64_t)&v423[-*(_QWORD *)v422] >> 2 > v256)
              v256 = v257 >> 2;
            if ((unint64_t)v257 >= 0x7FFFFFFFFFFFFFF8)
              v258 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v258 = v256;
            if (v258)
            {
              v259 = (char *)sub_20B800BE8((uint64_t)&v423, v258);
              v254 = *(unint64_t **)v422;
              v253 = *(unint64_t **)&v422[8];
            }
            else
            {
              v259 = 0;
            }
            v270 = (unint64_t *)&v259[8 * v255];
            *v270 = v227;
            v263 = v270 + 1;
            while (v253 != v254)
            {
              v271 = *--v253;
              *--v270 = v271;
            }
            goto LABEL_508;
          }
LABEL_480:
          *v253 = v227;
          v263 = v253 + 1;
LABEL_510:
          *(_QWORD *)&v422[8] = v263;
          goto LABEL_511;
        }
        v243 = *(unint64_t **)&v422[8];
        if (*(_QWORD *)&v422[8] >= (unint64_t)v423)
        {
          v244 = *(unint64_t **)v422;
          v245 = (uint64_t)(*(_QWORD *)&v422[8] - *(_QWORD *)v422) >> 3;
          v246 = v245 + 1;
          if ((unint64_t)(v245 + 1) >> 61)
            goto LABEL_722;
          v247 = (uint64_t)&v423[-*(_QWORD *)v422];
          if ((uint64_t)&v423[-*(_QWORD *)v422] >> 2 > v246)
            v246 = v247 >> 2;
          if ((unint64_t)v247 >= 0x7FFFFFFFFFFFFFF8)
            v248 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v248 = v246;
          if (v248)
          {
            v249 = (char *)sub_20B800BE8((uint64_t)&v423, v248);
            v244 = *(unint64_t **)v422;
            v243 = *(unint64_t **)&v422[8];
          }
          else
          {
            v249 = 0;
          }
          v267 = (unint64_t *)&v249[8 * v245];
          *v267 = v227;
          v252 = v267 + 1;
          while (v243 != v244)
          {
            v268 = *--v243;
            *--v267 = v268;
          }
          goto LABEL_497;
        }
LABEL_459:
        *v243 = v227;
        v252 = v243 + 1;
LABEL_499:
        v214 = v234;
        *(_QWORD *)&v422[8] = v252;
        goto LABEL_431;
      }
LABEL_512:
      v273 = sub_20B9A7C5C(0xBu);
      a3 = v398;
      if (os_log_type_enabled(v273, OS_LOG_TYPE_DEBUG))
      {
        v274 = *(uint64_t **)v422;
        for (m = *(uint64_t **)&v422[8]; v274 != m; ++v274)
        {
          v276 = *v274;
          v277 = sub_20B9A7C5C(0xBu);
          if (os_log_type_enabled(v277, OS_LOG_TYPE_DEBUG))
          {
            v278 = *(_QWORD *)(*((_QWORD *)a2 + 6) + 8 * v276);
            v279 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v278 + 24))(v278);
            LODWORD(__dst) = 138412290;
            *(_QWORD *)((char *)&__dst + 4) = v279;
            _os_log_debug_impl(&dword_20B7F7000, v277, OS_LOG_TYPE_DEBUG, "Pruning %@ (static LM score)", (uint8_t *)&__dst, 0xCu);
          }
        }
      }
      sub_20B8FEACC(a2, (unint64_t **)v422);
      if (*(_QWORD *)v422)
      {
        *(_QWORD *)&v422[8] = *(_QWORD *)v422;
        operator delete(*(void **)v422);
      }
    }
  }
  if ((_QWORD)buf)
  {
    *((_QWORD *)&buf + 1) = buf;
    operator delete((void *)buf);
  }
LABEL_521:
  v61 = *(_DWORD *)(a1 + 184);
LABEL_522:
  if ((~v61 & 0x6000000) == 0)
    sub_20B8C57F0(a1, (uint64_t)a2, a3);
  if (!*(_BYTE *)(a1 + 230))
  {
    v280 = *(_BYTE **)(a1 + 1032);
    v281 = *(_DWORD *)(a1 + 184);
    v282 = 1;
    if (*v280)
      v283 = (v281 & 0x6000000) == 100663296;
    else
      v283 = 0;
    v284 = !v283 || (*(_DWORD *)(a1 + 184) & 4) == 0;
    if ((v281 & 0x800000) != 0)
      goto LABEL_536;
    v72 = v280[280] == 0;
    v285 = !v284;
    if (v72)
      v285 = 1;
    if ((v285 & 1) == 0)
    {
LABEL_536:
      if (v409)
      {
        v286 = *v407;
        v287 = v286 - 12353;
        if ((v286 - 12353) < 0x56)
          goto LABEL_544;
        v288 = 1;
        LOWORD(v289) = *v407;
        do
        {
          if ((unsigned __int16)v289 == 12316)
            break;
          if ((unsigned __int16)v289 == 12540)
            break;
          v282 = v288 < v409;
          if (v409 == v288)
            break;
          v289 = v407[v288++];
        }
        while ((v289 - 12353) >= 0x56);
        if (v282)
        {
LABEL_544:
          sub_20B961C0C(*(_QWORD *)(a1 + 3872), a2, v411, v412, v407, v409);
          sub_20B9621B0(*(_QWORD *)(a1 + 3872), a2, v411, v412, v407, v409);
          LOWORD(v286) = *v407;
          v287 = *v407 - 12353;
        }
        if (v287 < 0x54u)
          goto LABEL_558;
        v290 = 1;
        v291 = 1;
        do
        {
          v292 = (unsigned __int16)v286;
          v293 = (unsigned __int16)v286 - 12289;
          v176 = v293 > 0x1B;
          v294 = (1 << v293) & 0x8001803;
          if (!v176 && v294 != 0 || (v292 - 12539) < 2)
            break;
          v291 = v290 < v409;
          if (v409 == v290)
            break;
          v286 = v407[v290++];
        }
        while ((v286 - 12353) >= 0x54);
        if (v291)
LABEL_558:
          sub_20B961E64(*(_QWORD *)(a1 + 3872), a2, v411, v412, v407, v409);
      }
      if (v412)
      {
        v297 = 0;
        for (n = 0; n != v412; v297 = n >= v412)
        {
          v299 = v411[n];
          if ((v299 - 12353) >= 0x56 && v299 != 12540 && v299 != 12316)
            break;
          ++n;
        }
        if (!v297 && (*(_BYTE *)(a1 + 187) & 4) == 0)
        {
          v302 = *(_QWORD *)(a1 + 168);
          if (v302)
            v303 = *(_DWORD *)(v302 + 64);
          else
            v303 = 0;
          sub_20B962854(*(_QWORD *)(a1 + 3872), (uint64_t)a2, v401, v404, (uint64_t)v411, v412, v303);
        }
      }
    }
    v304 = sub_20B9282F4(*(_QWORD *)(a1 + 3888), a2, v401, v404);
    v305 = v304;
    if (v404)
      v306 = *v401 == 12306;
    else
      v306 = 0;
    v307 = v304 > 0;
    sub_20B962AEC(*(_QWORD *)(a1 + 3872), (uint64_t)a2);
    v308 = *(int *)(a1 + 184) < 0 && v305 == (v307 & ~v306);
    v309 = v308;
    if (v308)
      v310 = *(__int16 *)(*(_QWORD *)(a1 + 1032) + 442);
    else
      v310 = 2;
    v408 = v310;
    if (v305)
      v311 = v305 + 1;
    else
      v311 = v310;
    sub_20B962E38(*(_QWORD *)(a1 + 3872), a2, v411, v412, v311);
    v410 = sub_20B8DA644(v411, v412, v309);
    if (v309)
    {
      if (((sub_20B8DA550((uint64_t)v411, v412) ^ 1 | ((*(_BYTE *)(a1 + 184) & 0x20) >> 5) | v410) & 1) == 0)
      {
        v312 = (const void **)*((_QWORD *)a2 + 6);
        v313 = (const void **)*((_QWORD *)a2 + 7);
        if (v312 != v313)
        {
          while (1)
          {
            if ((*(unsigned int (**)(const void *))(*(_QWORD *)*v312 + 96))(*v312) != 89)
            {
              if (*v312)
              {
                v314 = (int *)__dynamic_cast(*v312, (const struct __class_type_info *)&unk_24C45C148, (const struct __class_type_info *)&unk_24C45C5C8, 0);
                if (v314)
                  break;
              }
            }
            if (++v312 == v313)
              goto LABEL_598;
          }
          v323 = v314;
          v324 = (*(uint64_t (**)(int *))(*(_QWORD *)v314 + 544))(v314);
          if (sub_20B8DA550(v324, v325))
          {
            buf = 0uLL;
            v430[0] = 0;
            __dst = 0uLL;
            v428 = 0;
            (*(void (**)(int *))(*(_QWORD *)v323 + 544))(v323);
            sub_20B87BEB0(&buf, v326);
            (*(void (**)(int *))(*(_QWORD *)v323 + 552))(v323);
            sub_20B87BEB0(&__dst, v327);
            __p = 0;
            v418 = 0;
            v419 = 0;
            v328 = (*(uint64_t (**)(int *))(*(_QWORD *)v323 + 48))(v323);
            sub_20B8B3708(&__p, v328);
            v329 = (char *)(*(uint64_t (**)(int *))(*(_QWORD *)v323 + 544))(v323);
            v330 = (char *)(*(uint64_t (**)(int *))(*(_QWORD *)v323 + 552))(v323);
            v331 = (__int128 **)(*(uint64_t (**)(int *))(*(_QWORD *)v323 + 304))(v323);
            v332 = *v331;
            v399 = v331[1];
            if (*v331 != v399)
            {
              do
              {
                v405 = *((unsigned __int16 *)v332 + 12);
                if (v329)
                  v333 = *((unsigned __int16 *)v332 + 12);
                else
                  v333 = 0;
                v402 = *((unsigned __int16 *)v332 + 14);
                if (v330)
                  v334 = *((unsigned __int16 *)v332 + 14);
                else
                  v334 = 0;
                v335 = v418;
                if (v418 >= v419)
                {
                  v339 = __p;
                  v340 = 0xCCCCCCCCCCCCCCCDLL * ((v418 - (_BYTE *)__p) >> 3);
                  v341 = v340 + 1;
                  if (v340 + 1 > 0x666666666666666)
                    sub_20B8821D4();
                  if (0x999999999999999ALL * ((v419 - (_BYTE *)__p) >> 3) > v341)
                    v341 = 0x999999999999999ALL * ((v419 - (_BYTE *)__p) >> 3);
                  if (0xCCCCCCCCCCCCCCCDLL * ((v419 - (_BYTE *)__p) >> 3) >= 0x333333333333333)
                    v342 = 0x666666666666666;
                  else
                    v342 = v341;
                  if (v342)
                  {
                    v343 = (char *)sub_20B882310((uint64_t)&v419, v342);
                    v339 = __p;
                    v335 = v418;
                  }
                  else
                  {
                    v343 = 0;
                  }
                  v344 = &v343[40 * v340];
                  v345 = *v332;
                  v346 = v332[1];
                  *((_QWORD *)v344 + 4) = *((_QWORD *)v332 + 4);
                  *(_OWORD *)v344 = v345;
                  *((_OWORD *)v344 + 1) = v346;
                  if (v335 == v339)
                  {
                    v350 = &v343[40 * v340];
                  }
                  else
                  {
                    v347 = &v343[40 * v340];
                    do
                    {
                      v348 = *(_OWORD *)((char *)v335 - 40);
                      v349 = *(_OWORD *)((char *)v335 - 24);
                      v350 = v347 - 40;
                      *((_QWORD *)v347 - 1) = *((_QWORD *)v335 - 1);
                      *(_OWORD *)(v347 - 24) = v349;
                      *(_OWORD *)(v347 - 40) = v348;
                      v335 = (_OWORD *)((char *)v335 - 40);
                      v347 -= 40;
                    }
                    while (v335 != v339);
                  }
                  v338 = v344 + 40;
                  __p = v350;
                  v418 = v344 + 40;
                  v419 = &v343[40 * v342];
                  if (v339)
                    operator delete(v339);
                }
                else
                {
                  v336 = *v332;
                  v337 = v332[1];
                  *((_QWORD *)v418 + 4) = *((_QWORD *)v332 + 4);
                  *v335 = v336;
                  v335[1] = v337;
                  v338 = (char *)v335 + 40;
                }
                v418 = v338;
                if ((sub_20B8DA644((unsigned __int16 *)v329, v333, 1) & 1) != 0)
                {
                  v416 = 0;
                  sub_20B8DA8CC((uint64_t)v329, v333, &v416, v422);
                  sub_20B8DA8CC((uint64_t)v330, v334, &v416, &v413);
                  v351 = v418;
                  v352 = HIBYTE(v423);
                  if (SHIBYTE(v423) < 0)
                    v352 = *(_WORD *)&v422[8];
                  *((_WORD *)v418 - 8) = v352;
                  v353 = v415;
                  if ((v415 & 0x80u) != 0)
                    v353 = v414;
                  *((_WORD *)v351 - 6) = v353;
                  if (SHIBYTE(v423) >= 0)
                    v354 = v422;
                  else
                    v354 = *(uint8_t **)v422;
                  if (SHIBYTE(v423) >= 0)
                    v355 = HIBYTE(v423);
                  else
                    v355 = *(_QWORD *)&v422[8];
                  sub_20B88DACC((uint64_t)&buf, v354, v355);
                  if ((v415 & 0x80u) == 0)
                    v356 = &v413;
                  else
                    v356 = v413;
                  if ((v415 & 0x80u) == 0)
                    v357 = v415;
                  else
                    v357 = v414;
                  sub_20B88DACC((uint64_t)&__dst, v356, v357);
                  if ((char)v415 < 0)
                    operator delete(v413);
                  if (SHIBYTE(v423) < 0)
                    operator delete(*(void **)v422);
                }
                else
                {
                  sub_20B877ED0(v422, v329, v333);
                  if (SHIBYTE(v423) >= 0)
                    v358 = v422;
                  else
                    v358 = *(uint8_t **)v422;
                  if (SHIBYTE(v423) >= 0)
                    v359 = HIBYTE(v423);
                  else
                    v359 = *(_QWORD *)&v422[8];
                  sub_20B88DACC((uint64_t)&buf, v358, v359);
                  if (SHIBYTE(v423) < 0)
                    operator delete(*(void **)v422);
                  sub_20B877ED0(v422, v330, v334);
                  if (SHIBYTE(v423) >= 0)
                    v360 = v422;
                  else
                    v360 = *(uint8_t **)v422;
                  if (SHIBYTE(v423) >= 0)
                    v361 = HIBYTE(v423);
                  else
                    v361 = *(_QWORD *)&v422[8];
                  sub_20B88DACC((uint64_t)&__dst, v360, v361);
                  if (SHIBYTE(v423) < 0)
                    operator delete(*(void **)v422);
                }
                v329 += 2 * v405;
                v330 += 2 * v402;
                v332 = (__int128 *)((char *)v332 + 40);
              }
              while (v332 != v399);
            }
            v362 = *((char *)v323 + 87);
            if (v362 >= 0)
              v363 = v323 + 16;
            else
              v363 = (void *)*((_QWORD *)v323 + 8);
            if (v362 >= 0)
              v364 = *((unsigned __int8 *)v323 + 87);
            else
              v364 = *((_QWORD *)v323 + 9);
            v365 = (*(uint64_t (**)(int *))(*(_QWORD *)v323 + 112))(v323);
            v366 = v323[55];
            v406 = (*(uint64_t (**)(int *))(*(_QWORD *)v323 + 376))(v323);
            v367 = (*(uint64_t (**)(int *))(*(_QWORD *)v323 + 96))(v323);
            v400 = v366;
            v403 = v365;
            v368 = (*(uint64_t (**)(int *))(*(_QWORD *)v323 + 408))(v323);
            v369 = (*(uint64_t (**)(int *))(*(_QWORD *)v323 + 416))(v323);
            v370 = operator new();
            v371 = (void *)v370;
            if (v430[0] >= 0)
              p_buf = &buf;
            else
              p_buf = (__int128 *)buf;
            if (v430[0] >= 0)
              v373 = HIBYTE(v430[0]);
            else
              v373 = *((_QWORD *)&buf + 1);
            if (v428 >= 0)
              p_dst = &__dst;
            else
              p_dst = (__int128 *)__dst;
            if (v428 >= 0)
              v375 = HIBYTE(v428);
            else
              v375 = *((_QWORD *)&__dst + 1);
            sub_20B916250(v370, p_buf, v373, v363, v364, p_dst, v375, v403, v400, v406, (uint64_t)&__p, v367, v368, v369);
            v376 = (*(uint64_t (**)(int *))(*(_QWORD *)v323 + 200))(v323);
            (*(void (**)(void *, uint64_t))(*(_QWORD *)v371 + 512))(v371, v376);
            (*(void (**)(int *))(*(_QWORD *)v323 + 392))(v323);
            (*(void (**)(void *))(*(_QWORD *)v371 + 400))(v371);
            *((_QWORD *)v371 + 23) = *((_QWORD *)v323 + 23);
            v377 = (const void *)(*(uint64_t (**)(int *))(*(_QWORD *)v323 + 136))(v323);
            sub_20B8CD320((const void **)v371 + 29, v377);
            *((_QWORD *)v371 + 1) = v408;
            v413 = v371;
            *(_QWORD *)v422 = &unk_24C459188;
            v424 = v422;
            sub_20B8FDA94(a2, (_QWORD **)&v413, 1, 0, (uint64_t)v422);
            v378 = v424;
            if (v424 == v422)
            {
              v379 = 4;
              v378 = v422;
LABEL_707:
              (*(void (**)(void))(*(_QWORD *)v378 + 8 * v379))();
            }
            else if (v424)
            {
              v379 = 5;
              goto LABEL_707;
            }
            v380 = v413;
            v413 = 0;
            if (v380)
              (*(void (**)(void *))(*(_QWORD *)v380 + 16))(v380);
            if (__p)
            {
              v418 = (char *)__p;
              operator delete(__p);
            }
            if (SHIBYTE(v428) < 0)
              operator delete((void *)__dst);
            if (SHIBYTE(v430[0]) < 0)
              operator delete((void *)buf);
          }
        }
      }
    }
LABEL_598:
    v315 = *(_DWORD *)(a1 + 184);
    if ((v315 & 0x20) == 0 && (v410 & HIBYTE(v315)) == 1)
    {
      if (v309)
      {
        *(_QWORD *)&__dst = 0;
        sub_20B8DA8CC((uint64_t)v411, v412, &__dst, v422);
        if (SHIBYTE(v423) >= 0)
          v316 = v422;
        else
          v316 = *(uint8_t **)v422;
        if (SHIBYTE(v423) >= 0)
          v317 = HIBYTE(v423);
        else
          v317 = *(_QWORD *)&v422[8];
        v318 = sub_20B961F8C(*(int ***)(a1 + 3872), a2, v411, v412, v411, v412, v316, v317, 0.0, 0, 0, 0, 0, v408, 0, 83, 0, 2);
        sub_20B962E38(*(_QWORD *)(a1 + 3872), a2, v411, v412, v408 + 1);
        if (v318)
        {
          v319 = HIBYTE(v423);
          v320 = v422;
          if (SHIBYTE(v423) < 0)
          {
            v320 = *(uint8_t **)v422;
            v319 = *(_QWORD *)&v422[8];
          }
          *(_QWORD *)&buf = v320;
          *((_QWORD *)&buf + 1) = v319;
          sub_20B8C6354(a1, a2, (uint64_t)&buf, 0, 0);
        }
        if (SHIBYTE(v423) < 0)
          operator delete(*(void **)v422);
      }
      else
      {
        *(_QWORD *)v422 = 0;
        sub_20B8DB380((uint64_t)v411, v412, v422, (unint64_t *)&buf);
        if ((_QWORD)buf)
          v321 = *(_QWORD *)v422;
        else
          v321 = 0;
        sub_20B962E38(*(_QWORD *)(a1 + 3872), a2, (unsigned __int16 *)buf, v321, v408);
        v322 = buf;
        *(_QWORD *)&buf = 0;
        if (v322)
          MEMORY[0x20BD39C80](v322, 0x1000C80BDFB0063);
      }
    }
  }
  sub_20B8FE3D4(a2);
  sub_20B8C2A2C(a1, (uint64_t)a2);
}

void sub_20B8C54F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *__p,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  uint64_t v45;
  void *v47;

  __cxa_guard_abort(&qword_25472B3C8);
  v47 = *(void **)(v45 - 144);
  if (v47)
  {
    *(_QWORD *)(v45 - 136) = v47;
    operator delete(v47);
  }
  _Unwind_Resume(a1);
}

void sub_20B8C57F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned __int8 v7;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  char **v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint8x8_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned __int16 **v22;
  unsigned __int16 *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t *v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  NSObject *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint8x8_t v45;
  unint64_t v46;
  uint64_t *v47;
  uint64_t i;
  unint64_t v49;
  _QWORD *v50;
  _BYTE *v51;
  float v52;
  _BOOL8 v53;
  unint64_t v54;
  unint64_t v55;
  int8x8_t prime;
  void *v57;
  void *v58;
  uint64_t v59;
  _QWORD **v60;
  unint64_t v61;
  uint8x8_t v62;
  unint64_t v63;
  uint8x8_t v64;
  uint64_t v65;
  _QWORD *j;
  unint64_t v67;
  uint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  BOOL v76;
  void *v77;
  void **v78;
  unint64_t v79;
  __int128 *p_p;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  unsigned __int16 *v86;
  unsigned __int16 *v87;
  uint64_t v88;
  int v89;
  int v90;
  int v91;
  _BOOL4 v92;
  unint64_t v94;
  unint64_t v95;
  uint8x8_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  void *v104;
  void *__dst[2];
  uint64_t v106;
  void *v107;
  unint64_t v108;
  __int128 __p;
  int64_t v110;
  uint64_t v111;

  v111 = *MEMORY[0x24BDAC8D0];
  v7 = atomic_load((unsigned __int8 *)&qword_25472B3A0);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_25472B3A0))
  {
    *(_OWORD *)&qword_25472B428 = 0u;
    xmmword_25472B418 = 0u;
    dword_25472B438 = 1065353216;
    __cxa_atexit((void (*)(void *))sub_20B8C82DC, &xmmword_25472B418, &dword_20B7F7000);
    __cxa_guard_release(&qword_25472B3A0);
  }
  v8 = *(_QWORD *)(a1 + 256);
  v9 = *(void **)(v8 + 80);
  v10 = *(_QWORD *)(v8 + 88);
  v107 = v9;
  v108 = v10;
  if ((*(_BYTE *)(a1 + 187) & 0x10) != 0)
  {
    v11 = (char **)(a1 + 232);
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(a1 + 232);
    v76 = v10 > 1;
    v12 = v10 - 1;
    if (v76)
    {
      if (v9)
        v15 = v12;
      else
        v15 = 0;
      sub_20B877ED0(&__p, v9, v15);
      v3 = (uint64_t)&xmmword_25472B418 + 8;
      v16 = sub_20B89ACFC((uint64_t)&qword_25472B430, (uint64_t)&__p);
      v17 = *((_QWORD *)&xmmword_25472B418 + 1);
      if (*((_QWORD *)&xmmword_25472B418 + 1))
      {
        v18 = v16;
        v19 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_25472B418 + 8));
        v19.i16[0] = vaddlv_u8(v19);
        v20 = v19.u32[0];
        if (v19.u32[0] > 1uLL)
        {
          v21 = v16;
          if (v16 >= *((_QWORD *)&xmmword_25472B418 + 1))
            v21 = v16 % *((_QWORD *)&xmmword_25472B418 + 1);
        }
        else
        {
          v21 = (*((_QWORD *)&xmmword_25472B418 + 1) - 1) & v16;
        }
        v22 = *(unsigned __int16 ***)(xmmword_25472B418 + 8 * v21);
        if (v22)
        {
          v23 = *v22;
          if (*v22)
          {
            v3 = *((_QWORD *)&xmmword_25472B418 + 1) - 1;
            do
            {
              v24 = *((_QWORD *)v23 + 1);
              if (v24 == v18)
              {
                if (sub_20B89AD3C((uint64_t)&dword_25472B438, v23 + 8, (unsigned __int16 *)&__p))
                {
                  v3 = *((_QWORD *)v23 + 5);
                  v25 = *(_QWORD *)(a1 + 248);
                  v26 = *(uint64_t **)(a1 + 240);
                  if ((unint64_t)v26 >= v25)
                  {
                    v28 = ((char *)v26 - *v11) >> 3;
                    if ((unint64_t)(v28 + 1) >> 61)
                      sub_20B80CDD8();
                    v29 = v25 - (_QWORD)*v11;
                    v30 = v29 >> 2;
                    if (v29 >> 2 <= (unint64_t)(v28 + 1))
                      v30 = v28 + 1;
                    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
                      v31 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v31 = v30;
                    if (v31)
                      v32 = (char *)sub_20B800BE8(a1 + 248, v31);
                    else
                      v32 = 0;
                    v33 = (uint64_t *)&v32[8 * v28];
                    v34 = &v32[8 * v31];
                    *v33 = v3;
                    v27 = v33 + 1;
                    v36 = *(char **)(a1 + 232);
                    v35 = *(char **)(a1 + 240);
                    if (v35 != v36)
                    {
                      do
                      {
                        v37 = *((_QWORD *)v35 - 1);
                        v35 -= 8;
                        *--v33 = v37;
                      }
                      while (v35 != v36);
                      v35 = *v11;
                    }
                    *(_QWORD *)(a1 + 232) = v33;
                    *(_QWORD *)(a1 + 240) = v27;
                    *(_QWORD *)(a1 + 248) = v34;
                    if (v35)
                      operator delete(v35);
                  }
                  else
                  {
                    *v26 = v3;
                    v27 = v26 + 1;
                  }
                  *(_QWORD *)(a1 + 240) = v27;
                  break;
                }
              }
              else
              {
                if (v20 > 1)
                {
                  if (v24 >= v17)
                    v24 %= v17;
                }
                else
                {
                  v24 &= v3;
                }
                if (v24 != v21)
                  break;
              }
              v23 = *(unsigned __int16 **)v23;
            }
            while (v23);
          }
        }
      }
      if (SHIBYTE(v110) < 0)
        operator delete((void *)__p);
    }
    else if (qword_25472B430)
    {
      sub_20B8CE7A4((_QWORD *)qword_25472B428);
      qword_25472B428 = 0;
      v13 = *((_QWORD *)&xmmword_25472B418 + 1);
      if (*((_QWORD *)&xmmword_25472B418 + 1))
      {
        v14 = 0;
        do
          *(_QWORD *)(xmmword_25472B418 + 8 * v14++) = 0;
        while (v13 != v14);
      }
      qword_25472B430 = 0;
    }
  }
  if ((sub_20B94A5FC((unsigned int **)(a1 + 3896), (uint64_t)&v107, a2, a1 + 232, a3, *(_QWORD **)(a1 + 864)) & 1) == 0)
  {
    v38 = sub_20B9A7C5C(8u);
    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(__p) = 136315138;
      *(_QWORD *)((char *)&__p + 4) = "stabilizeCandidates";
      _os_log_debug_impl(&dword_20B7F7000, v38, OS_LOG_TYPE_DEBUG, "[%s] CandidateStabilizer didn't stabilize", (uint8_t *)&__p, 0xCu);
    }
  }
  if ((*(_BYTE *)(a1 + 187) & 0x10) != 0)
  {
    sub_20B877ED0(__dst, v107, v108);
    v39 = sub_20B8FD8DC(a2);
    if (v39 == -1 || (v40 = *(char **)(*(_QWORD *)(a2 + 48) + 8 * v39)) == 0)
    {
LABEL_215:
      if (SHIBYTE(v106) < 0)
        operator delete(__dst[0]);
      return;
    }
    v41 = (**(uint64_t (***)(char *))&v40[*(_QWORD *)(*(_QWORD *)v40 - 32)])(&v40[*(_QWORD *)(*(_QWORD *)v40 - 32)]);
    v42 = sub_20B89ACFC((uint64_t)&qword_25472B430, (uint64_t)__dst);
    v43 = v42;
    v44 = *((_QWORD *)&xmmword_25472B418 + 1);
    if (*((_QWORD *)&xmmword_25472B418 + 1))
    {
      v45 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_25472B418 + 8));
      v45.i16[0] = vaddlv_u8(v45);
      v46 = v45.u32[0];
      if (v45.u32[0] > 1uLL)
        v3 = v42 >= *((_QWORD *)&xmmword_25472B418 + 1) ? v42 % *((_QWORD *)&xmmword_25472B418 + 1) : v42;
      else
        v3 = (*((_QWORD *)&xmmword_25472B418 + 1) - 1) & v42;
      v47 = *(uint64_t **)(xmmword_25472B418 + 8 * v3);
      if (v47)
      {
        for (i = *v47; i; i = *(_QWORD *)i)
        {
          v49 = *(_QWORD *)(i + 8);
          if (v49 == v43)
          {
            if (sub_20B89AD3C((uint64_t)&dword_25472B438, (unsigned __int16 *)(i + 16), (unsigned __int16 *)__dst))
              goto LABEL_132;
          }
          else
          {
            if (v46 > 1)
            {
              if (v49 >= v44)
                v49 %= v44;
            }
            else
            {
              v49 &= v44 - 1;
            }
            if (v49 != v3)
              break;
          }
        }
      }
    }
    v50 = operator new(0x30uLL);
    *(_QWORD *)&__p = v50;
    *((_QWORD *)&__p + 1) = &qword_25472B428;
    LOBYTE(v110) = 0;
    *v50 = 0;
    v50[1] = v43;
    v51 = v50 + 2;
    if (SHIBYTE(v106) < 0)
    {
      sub_20B88DD4C(v51, __dst[0], (unint64_t)__dst[1]);
    }
    else
    {
      *(_OWORD *)v51 = *(_OWORD *)__dst;
      v50[4] = v106;
    }
    v50[5] = 0;
    LOBYTE(v110) = 1;
    v52 = (float)(unint64_t)(qword_25472B430 + 1);
    if (v44 && (float)(*(float *)&dword_25472B438 * (float)v44) >= v52)
    {
LABEL_122:
      v68 = *(uint64_t **)(xmmword_25472B418 + 8 * v3);
      i = __p;
      if (v68)
      {
        *(_QWORD *)__p = *v68;
      }
      else
      {
        *(_QWORD *)__p = qword_25472B428;
        qword_25472B428 = i;
        *(_QWORD *)(xmmword_25472B418 + 8 * v3) = &qword_25472B428;
        if (!*(_QWORD *)i)
        {
LABEL_131:
          *(_QWORD *)&__p = 0;
          ++qword_25472B430;
          sub_20B8CE82C((uint64_t)&__p);
LABEL_132:
          v70 = *(_QWORD *)(i + 40);
          *(_QWORD *)(i + 40) = v41;
          if (v70)
            (*(void (**)(uint64_t))(*(_QWORD *)v70 + 16))(v70);
          if ((unint64_t)qword_25472B430 >= 6)
          {
            v71 = qword_25472B428;
            if (qword_25472B428)
            {
              v72 = v108;
              v73 = v108 - 5;
              while (1)
              {
                if (*(char *)(v71 + 39) < 0)
                {
                  v74 = *(_QWORD *)(v71 + 24);
                  v76 = v74 <= v73 || v74 > v72;
                  if (v76)
                  {
LABEL_181:
                    v94 = *((_QWORD *)&xmmword_25472B418 + 1);
                    v95 = *(_QWORD *)(v71 + 8);
                    v96 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_25472B418 + 8));
                    v96.i16[0] = vaddlv_u8(v96);
                    if (v96.u32[0] > 1uLL)
                    {
                      if (v95 >= *((_QWORD *)&xmmword_25472B418 + 1))
                        v95 %= *((_QWORD *)&xmmword_25472B418 + 1);
                    }
                    else
                    {
                      v95 &= *((_QWORD *)&xmmword_25472B418 + 1) - 1;
                    }
                    v97 = *(_QWORD *)v71;
                    v98 = *(uint64_t **)(xmmword_25472B418 + 8 * v95);
                    do
                    {
                      v99 = v98;
                      v98 = (uint64_t *)*v98;
                    }
                    while (v98 != (uint64_t *)v71);
                    if (v99 == &qword_25472B428)
                      goto LABEL_234;
                    v100 = v99[1];
                    if (v96.u32[0] > 1uLL)
                    {
                      if (v100 >= *((_QWORD *)&xmmword_25472B418 + 1))
                        v100 %= *((_QWORD *)&xmmword_25472B418 + 1);
                    }
                    else
                    {
                      v100 &= *((_QWORD *)&xmmword_25472B418 + 1) - 1;
                    }
                    v101 = *(_QWORD *)v71;
                    if (v100 == v95)
                    {
LABEL_203:
                      if (v101)
                        goto LABEL_204;
                    }
                    else
                    {
LABEL_234:
                      if (!v97)
                        goto LABEL_202;
                      v102 = *(_QWORD *)(v97 + 8);
                      if (v96.u32[0] > 1uLL)
                      {
                        if (v102 >= *((_QWORD *)&xmmword_25472B418 + 1))
                          v102 %= *((_QWORD *)&xmmword_25472B418 + 1);
                      }
                      else
                      {
                        v102 &= *((_QWORD *)&xmmword_25472B418 + 1) - 1;
                      }
                      v101 = *(_QWORD *)v71;
                      if (v102 != v95)
                      {
LABEL_202:
                        *(_QWORD *)(xmmword_25472B418 + 8 * v95) = 0;
                        v101 = *(_QWORD *)v71;
                        goto LABEL_203;
                      }
LABEL_204:
                      v103 = *(_QWORD *)(v101 + 8);
                      if (v96.u32[0] > 1uLL)
                      {
                        if (v103 >= v94)
                          v103 %= v94;
                      }
                      else
                      {
                        v103 &= v94 - 1;
                      }
                      if (v103 != v95)
                      {
                        *(_QWORD *)(xmmword_25472B418 + 8 * v103) = v99;
                        v101 = *(_QWORD *)v71;
                      }
                    }
                    *v99 = v101;
                    *(_QWORD *)v71 = 0;
                    --qword_25472B430;
                    *(_QWORD *)&__p = v71;
                    *((_QWORD *)&__p + 1) = &qword_25472B428;
                    LOBYTE(v110) = 1;
                    sub_20B8CE82C((uint64_t)&__p);
                    goto LABEL_211;
                  }
                }
                else
                {
                  v74 = *(unsigned __int8 *)(v71 + 39);
                  if (v73 >= v74 || v72 < v74)
                    goto LABEL_181;
                }
                v77 = (void *)HIBYTE(v106);
                if (v106 >= 0)
                {
                  v78 = __dst;
                }
                else
                {
                  v77 = __dst[1];
                  v78 = (void **)__dst[0];
                }
                if ((unint64_t)v77 >= v74)
                  v79 = v74;
                else
                  v79 = (unint64_t)v77;
                if (v79 >= 0x7FFFFFFFFFFFFFF8)
                  sub_20B877F70();
                if (v79 >= 0xB)
                  break;
                HIBYTE(v110) = v79;
                p_p = &__p;
                if (v79)
                  goto LABEL_160;
LABEL_161:
                *((_WORD *)p_p + v79) = 0;
                if (v110 >= 0)
                  v83 = HIBYTE(v110);
                else
                  v83 = *((_QWORD *)&__p + 1);
                v84 = *(unsigned __int8 *)(v71 + 39);
                v85 = (char)v84;
                if ((v84 & 0x80u) != 0)
                  v84 = *(_QWORD *)(v71 + 24);
                if (v83 == v84)
                {
                  if (v83)
                  {
                    v86 = (unsigned __int16 *)__p;
                    if (v110 >= 0)
                      v86 = (unsigned __int16 *)&__p;
                    if (v85 >= 0)
                      v87 = (unsigned __int16 *)(v71 + 16);
                    else
                      v87 = *(unsigned __int16 **)(v71 + 16);
                    v88 = v83 - 1;
                    do
                    {
                      v90 = *v86++;
                      v89 = v90;
                      v91 = *v87++;
                      v92 = v91 != v89;
                    }
                    while (v91 == v89 && v88-- != 0);
                    if ((SHIBYTE(v110) & 0x80000000) == 0)
                    {
LABEL_180:
                      if (v92)
                        goto LABEL_181;
                      goto LABEL_192;
                    }
                  }
                  else
                  {
                    v92 = 0;
                    if ((SHIBYTE(v110) & 0x80000000) == 0)
                      goto LABEL_180;
                  }
                }
                else
                {
                  v92 = 1;
                  if ((SHIBYTE(v110) & 0x80000000) == 0)
                    goto LABEL_180;
                }
                operator delete((void *)__p);
                if (v92)
                  goto LABEL_181;
LABEL_192:
                v97 = *(_QWORD *)v71;
LABEL_211:
                v71 = v97;
                if (!v97)
                  goto LABEL_215;
              }
              v81 = (v79 & 0xFFFFFFFFFFFFFFFCLL) + 4;
              if ((v79 | 3) != 0xB)
                v81 = v79 | 3;
              p_p = (__int128 *)sub_20B80FD48((uint64_t)&__p, v81 + 1);
              *((_QWORD *)&__p + 1) = v79;
              v110 = v82 | 0x8000000000000000;
              *(_QWORD *)&__p = p_p;
LABEL_160:
              memmove(p_p, v78, 2 * v79);
              goto LABEL_161;
            }
          }
          goto LABEL_215;
        }
        v69 = *(_QWORD *)(*(_QWORD *)i + 8);
        if ((v44 & (v44 - 1)) != 0)
        {
          if (v69 >= v44)
            v69 %= v44;
        }
        else
        {
          v69 &= v44 - 1;
        }
        v68 = (uint64_t *)(xmmword_25472B418 + 8 * v69);
      }
      *v68 = i;
      goto LABEL_131;
    }
    v53 = 1;
    if (v44 >= 3)
      v53 = (v44 & (v44 - 1)) != 0;
    v54 = v53 | (2 * v44);
    v55 = vcvtps_u32_f32(v52 / *(float *)&dword_25472B438);
    if (v54 <= v55)
      prime = (int8x8_t)v55;
    else
      prime = (int8x8_t)v54;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v44 = *((_QWORD *)&xmmword_25472B418 + 1);
    if (*(_QWORD *)&prime > *((_QWORD *)&xmmword_25472B418 + 1))
      goto LABEL_88;
    if (*(_QWORD *)&prime < *((_QWORD *)&xmmword_25472B418 + 1))
    {
      v63 = vcvtps_u32_f32((float)(unint64_t)qword_25472B430 / *(float *)&dword_25472B438);
      if (*((_QWORD *)&xmmword_25472B418 + 1) < 3uLL
        || (v64 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_25472B418 + 8)),
            v64.i16[0] = vaddlv_u8(v64),
            v64.u32[0] > 1uLL))
      {
        v63 = std::__next_prime(v63);
      }
      else
      {
        v65 = 1 << -(char)__clz(v63 - 1);
        if (v63 >= 2)
          v63 = v65;
      }
      if (*(_QWORD *)&prime <= v63)
        prime = (int8x8_t)v63;
      if (*(_QWORD *)&prime >= v44)
      {
        v44 = *((_QWORD *)&xmmword_25472B418 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_88:
          if (*(_QWORD *)&prime >> 61)
            sub_20B800BC0();
          v57 = operator new(8 * *(_QWORD *)&prime);
          v58 = (void *)xmmword_25472B418;
          *(_QWORD *)&xmmword_25472B418 = v57;
          if (v58)
            operator delete(v58);
          v59 = 0;
          *((int8x8_t *)&xmmword_25472B418 + 1) = prime;
          do
            *(_QWORD *)(xmmword_25472B418 + 8 * v59++) = 0;
          while (*(_QWORD *)&prime != v59);
          v60 = (_QWORD **)qword_25472B428;
          if (qword_25472B428)
          {
            v61 = *(_QWORD *)(qword_25472B428 + 8);
            v62 = (uint8x8_t)vcnt_s8(prime);
            v62.i16[0] = vaddlv_u8(v62);
            if (v62.u32[0] > 1uLL)
            {
              if (v61 >= *(_QWORD *)&prime)
                v61 %= *(_QWORD *)&prime;
            }
            else
            {
              v61 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(xmmword_25472B418 + 8 * v61) = &qword_25472B428;
            for (j = *v60; j; v61 = v67)
            {
              v67 = j[1];
              if (v62.u32[0] > 1uLL)
              {
                if (v67 >= *(_QWORD *)&prime)
                  v67 %= *(_QWORD *)&prime;
              }
              else
              {
                v67 &= *(_QWORD *)&prime - 1;
              }
              if (v67 != v61)
              {
                if (!*(_QWORD *)(xmmword_25472B418 + 8 * v67))
                {
                  *(_QWORD *)(xmmword_25472B418 + 8 * v67) = v60;
                  goto LABEL_113;
                }
                *v60 = (_QWORD *)*j;
                *j = **(_QWORD **)(xmmword_25472B418 + 8 * v67);
                **(_QWORD **)(xmmword_25472B418 + 8 * v67) = j;
                j = v60;
              }
              v67 = v61;
LABEL_113:
              v60 = (_QWORD **)j;
              j = (_QWORD *)*j;
            }
          }
          v44 = (unint64_t)prime;
          goto LABEL_117;
        }
        v104 = (void *)xmmword_25472B418;
        *(_QWORD *)&xmmword_25472B418 = 0;
        if (v104)
          operator delete(v104);
        v44 = 0;
        *((_QWORD *)&xmmword_25472B418 + 1) = 0;
      }
    }
LABEL_117:
    if ((v44 & (v44 - 1)) != 0)
    {
      if (v43 >= v44)
        v3 = v43 % v44;
      else
        v3 = v43;
    }
    else
    {
      v3 = (v44 - 1) & v43;
    }
    goto LABEL_122;
  }
}

void sub_20B8C62E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_20B8C6354(uint64_t a1, const char *a2, uint64_t a3, int a4, int *a5)
{
  uint64_t v10;
  const void *v11;
  void *v12;

  v10 = *(_QWORD *)(a1 + 176);
  v11 = (const void *)objc_msgSend_rawCandidate(*(void **)(v10 + 112), a2, a3);
  if (v11)
    v12 = __dynamic_cast(v11, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
  else
    v12 = 0;
  return sub_20B93CAD8(*(uint64_t **)(a1 + 696), (uint64_t)a2, *(char **)a3, *(_QWORD *)(a3 + 8), (_QWORD *)(v10 + 248), (uint64_t)v12, a4, *(_BYTE *)(a1 + 8), a5, *(_QWORD *)(a1 + 256));
}

void sub_20B8C63F0(uint64_t a1, const char *a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v9;
  const void *v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  int v16;
  _QWORD *v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  int v23;
  BOOL v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  int v29;
  NSObject *v30;
  int v31;
  _QWORD *v32;
  _BOOL4 v33;
  int v34;
  uint64_t v35;
  std::string *v36;
  uint64_t v37;
  std::string *v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  const void **v42;
  void *v43;
  uint64_t v44;
  NSObject *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t i;
  unint64_t v49;
  uint64_t v50;
  unsigned int v51;
  int v52;
  int v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  BOOL v61;
  char v62;
  std::string::size_type v63;
  const void *v64;
  void *v65;
  std::string::size_type v66;
  uint64_t v67;
  unint64_t j;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  const void *v73;
  int *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  std::string *v79;
  uint64_t v80;
  unint64_t v81;
  UniChar *v82;
  BOOL v83;
  unint64_t k;
  UniChar v85;
  unsigned int v86;
  unsigned __int16 v87;
  uint64_t v90;
  _QWORD *v91;
  BOOL v92;
  char v93;
  int v94;
  BOOL v95;
  int v96;
  NSObject *v97;
  int v98;
  unsigned int v99;
  int v100;
  _QWORD *v101;
  _BOOL4 v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  unsigned __int16 *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  int v112;
  std::string::size_type v113;
  void **v114;
  uint64_t v115;
  void *v116;
  unint64_t v117;
  signed int v118;
  int v119;
  unsigned int v120;
  _QWORD v121[2];
  _BYTE buf[24];
  __int128 v123;
  int v124;
  _QWORD v125[4];
  uint64_t v126[3];
  uint64_t *v127;
  std::string __p;
  std::string *p_p;
  _QWORD v130[3];
  _QWORD v131[3];
  _QWORD v132[3];
  _QWORD v133[5];

  v7 = (uint64_t)a2;
  v133[3] = *MEMORY[0x24BDAC8D0];
  v118 = 0x80000000;
  v119 = 0x80000000;
  if ((*(_DWORD *)(a1 + 184) & 0x20) != 0)
    v9 = a4;
  else
    v9 = a5;
  v10 = (const void *)objc_msgSend_rawCandidate(*(void **)(*(_QWORD *)(a1 + 176) + 112), a2, (uint64_t)a3);
  if (v10)
    v11 = __dynamic_cast(v10, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
  else
    v11 = 0;
  v12 = sub_20B9699F4(*(const UniChar **)v9, *(_QWORD *)(v9 + 8), (uint64_t)v11);
  v13 = *(_QWORD *)(v9 + 8);
  if (v13)
  {
    v14 = 0;
    v15 = 1;
    do
    {
      v16 = *(unsigned __int16 *)(*(_QWORD *)v9 + 2 * v14);
      if (v16 == 32)
        break;
      if (v16 == 12288)
        break;
      v15 = ++v14 < v13;
    }
    while (v13 != v14);
    if (v15)
      goto LABEL_131;
  }
  v17 = *(_QWORD **)(a1 + 256);
  v18 = v17[11];
  v19 = *(_DWORD *)(a1 + 184);
  v20 = 255;
  v21 = 192;
  if ((v19 & 0x20) != 0)
    v21 = 255;
  if (**(_BYTE **)(a1 + 1032))
    v20 = v21;
  if (v18 <= v20)
  {
    v23 = v19 & 0x2000000;
    v24 = **(_BYTE **)(a1 + 1032) || (*(_DWORD *)(a1 + 184) & 2) == 0;
    v25 = !v24 && v23 == 0;
    if (!v25 || ((v27 = v17[15], v26 = v17[16], v18 >= 2) ? (v28 = v27 == v26) : (v28 = 1), !v28))
    {
      sub_20B8C6354(a1, (const char *)v7, v9, 0, &v119);
      v29 = *(_DWORD *)(a1 + 184);
      if ((v29 & 2) != 0)
      {
        sub_20B8C6354(a1, (const char *)v7, v9, 1, &v119);
        v29 = *(_DWORD *)(a1 + 184);
      }
      if ((v29 & 1) != 0)
        goto LABEL_114;
      v30 = sub_20B9A7C5C(3u);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
      {
        sub_20B8D15F4(*(void **)v9, *(_QWORD *)(v9 + 8), &__p);
        v38 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__p
            : (std::string *)__p.__r_.__value_.__r.__words[0];
        v39 = *(_DWORD *)(a1 + 184);
        v40 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 192) + 224))(*(_QWORD *)(a1 + 192));
        v41 = sub_20B969960(v39, v40);
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = v38;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = (v41 >> 2) & 1;
        _os_log_debug_impl(&dword_20B7F7000, v30, OS_LOG_TYPE_DEBUG, "[MJ::makeMecabMultiWordCandidates] analysisString:%s (prefix:%d)", buf, 0x12u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::mutex::lock((std::mutex *)(a1 + 880));
      v31 = *(_DWORD *)(a1 + 944);
      std::mutex::unlock((std::mutex *)(a1 + 880));
      if (v31 == 2)
        goto LABEL_114;
      *(_QWORD *)buf = &unk_24C460D28;
      *(_OWORD *)&buf[8] = 0u;
      v123 = 0u;
      v124 = 1065353216;
      memset(v125, 0, 24);
      v32 = (_QWORD *)(*(_QWORD *)(a1 + 176) + 248);
      __p.__r_.__value_.__s.__data_[0] = 0;
      v33 = sub_20B969C84(v32, (BOOL *)&__p);
      if (__p.__r_.__value_.__s.__data_[0])
        v34 = 0;
      else
        v34 = v33;
      v35 = *(_QWORD *)(a1 + 256);
      if (v35)
        LOBYTE(v35) = *(_BYTE *)(*(_QWORD *)(v35 + 184) + 32) != 0;
      if ((sub_20B93DB30(*(uint64_t **)(a1 + 696), (_QWORD *)v7, buf, *(void **)v9, *(_QWORD *)(v9 + 8), v12, v34, *(_BYTE *)(a1 + 8) != 0, v35, &v118) & 1) == 0)
      {
LABEL_113:
        *(_QWORD *)buf = &unk_24C460D28;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v125;
        sub_20B882410((void ***)&__p);
        sub_20B84055C((uint64_t)&buf[8]);
LABEL_114:
        v22 = 0;
        goto LABEL_115;
      }
      if ((*(_BYTE *)(a1 + 187) & 4) == 0)
      {
LABEL_107:
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C469588;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)sub_20B8FEF70;
        p_p = &__p;
        sub_20B8FDD20(buf, (uint64_t)&__p);
        v79 = p_p;
        if (p_p == &__p)
        {
          v80 = 4;
          v79 = &__p;
        }
        else
        {
          if (!p_p)
          {
LABEL_112:
            sub_20B93DD08(*(_QWORD *)(a1 + 696), (_QWORD *)v7, (uint64_t)buf, &v118);
            goto LABEL_113;
          }
          v80 = 5;
        }
        (*(void (**)(void))(v79->__r_.__value_.__r.__words[0] + 8 * v80))();
        goto LABEL_112;
      }
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C469588;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)sub_20B8FEF70;
      p_p = &__p;
      sub_20B8FDD20((_QWORD *)v7, (uint64_t)&__p);
      v36 = p_p;
      if (p_p == &__p)
      {
        v37 = 4;
        v36 = &__p;
      }
      else
      {
        if (!p_p)
        {
LABEL_53:
          if ((*(_BYTE *)(a1 + 187) & 2) == 0)
            goto LABEL_107;
          v42 = *(const void ***)(v7 + 48);
          if (*(const void ***)(v7 + 56) == v42)
            goto LABEL_107;
          if (!*v42)
            goto LABEL_107;
          v43 = __dynamic_cast(*v42, (const struct __class_type_info *)&unk_24C45C148, (const struct __class_type_info *)&unk_24C45C5C8, 0);
          if (!v43)
            goto LABEL_107;
          v44 = (uint64_t)v43;
          v45 = sub_20B9A7C5C(3u);
          if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
          {
            LOWORD(__p.__r_.__value_.__l.__data_) = 0;
            _os_log_debug_impl(&dword_20B7F7000, v45, OS_LOG_TYPE_DEBUG, "[MJ::makeLastBunsetsuCandidatesFromCurrentLattice]", (uint8_t *)&__p, 2u);
          }
          v46 = sub_20B917054(v44);
          v115 = v7;
          v47 = 0;
          if (v46)
          {
            for (i = 0; i != v46; ++i)
              v47 += (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v44 + 312))(v44, i);
          }
          v49 = *(_QWORD *)(v9 + 8) - v47;
          v50 = *(_QWORD *)v9 + 2 * v47;
          if (!*(_QWORD *)v9)
            v49 = 0;
          v121[0] = *(_QWORD *)v9 + 2 * v47;
          v121[1] = v49;
          v117 = v49;
          v120 = 0x80000000;
          v51 = *(_DWORD *)(a1 + 184);
          v52 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 192) + 224))(*(_QWORD *)(a1 + 192));
          v53 = sub_20B969960(v51, v52);
          v54 = 2 * v47;
          v116 = (void *)v50;
          if ((sub_20BA20E78(*(_QWORD *)(a1 + 192), *(_QWORD *)v9, *(_QWORD *)(v9 + 8), v12, v54, v53 | 4u) & 1) != 0)
          {
            if (v12)
              v57 = *(_QWORD *)(v12 + 16);
            else
              v57 = 0;
            v58 = 0;
            v59 = 0;
            if (v54)
              v60 = 1;
            else
              v60 = v57;
            do
            {
              v55 = (const char *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 192) + 240))(*(_QWORD *)(a1 + 192));
              if (!v55)
                break;
              sub_20B93B164(*(uint64_t **)(a1 + 696), (uint64_t)v55, v116, v117, v60, *(_BYTE *)(a1 + 8), 0, (uint64_t *)&__p);
              v59 += sub_20B93B88C(*(_QWORD *)(a1 + 696), a3, (uint64_t *)&__p, 0, &v120, 0);
              v61 = v59 >= 9 || v58 >= 0x100;
              v62 = !v61;
              v63 = __p.__r_.__value_.__r.__words[0];
              __p.__r_.__value_.__r.__words[0] = 0;
              if (v63)
                (*(void (**)(std::string::size_type))(*(_QWORD *)v63 + 16))(v63);
              ++v58;
            }
            while ((v62 & 1) != 0);
          }
          v64 = (const void *)objc_msgSend_rawCandidate(*(void **)(*(_QWORD *)(a1 + 176) + 112), v55, v56);
          if (v64)
            v65 = __dynamic_cast(v64, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
          else
            v65 = 0;
          v66 = sub_20B9699F4((const UniChar *)v116, v117, (uint64_t)v65);
          __p.__r_.__value_.__r.__words[0] = v66;
          if (v66)
            v67 = *(_QWORD *)(v66 + 16);
          else
            v67 = 0;
          *(_BYTE *)(a1 + 8) = 1;
          v114 = (void **)v66;
          if (sub_20BA20E78(*(_QWORD *)(a1 + 192), (uint64_t)v116, v117, v66, 0, 10))
          {
            for (j = 0; j < 0x11; j += v70)
            {
              v69 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 192) + 240))(*(_QWORD *)(a1 + 192));
              if (!v69)
                break;
              ++v120;
              sub_20B93B164(*(uint64_t **)(a1 + 696), v69, v116, v117, v67, *(_BYTE *)(a1 + 8), 1, v126);
              v70 = sub_20B93B88C(*(_QWORD *)(a1 + 696), a3, v126, 0, 0, &v120);
              v71 = v126[0];
              v126[0] = 0;
              if (v71)
                (*(void (**)(uint64_t))(*(_QWORD *)v71 + 16))(v71);
            }
          }
          *(_BYTE *)(a1 + 8) = 0;
          if (v114)
          {
            free(*v114);
            MEMORY[0x20BD39CB0](v114, 0x1010C40B1660244);
          }
          v72 = *(_QWORD *)(a1 + 176);
          v73 = *(const void **)(v72 + 256);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(unint64_t *)(v72 + 248);
          __p.__r_.__value_.__r.__words[2] = 0;
          p_p = 0;
          sub_20B882248(&__p.__r_.__value_.__l.__size_, v73, *(_QWORD *)(v72 + 264), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v72 + 264) - (_QWORD)v73) >> 3));
          v7 = v115;
          memset(v130, 0, sizeof(v130));
          sub_20B87ACC8(v130, *(const void **)(v72 + 280), *(_QWORD *)(v72 + 288), (uint64_t)(*(_QWORD *)(v72 + 288) - *(_QWORD *)(v72 + 280)) >> 1);
          memset(v131, 0, sizeof(v131));
          sub_20B87ACC8(v131, *(const void **)(v72 + 304), *(_QWORD *)(v72 + 312), (uint64_t)(*(_QWORD *)(v72 + 312) - *(_QWORD *)(v72 + 304)) >> 1);
          memset(v132, 0, sizeof(v132));
          sub_20B88DCD4(v132, *(const void **)(v72 + 328), *(_QWORD *)(v72 + 336), (uint64_t)(*(_QWORD *)(v72 + 336) - *(_QWORD *)(v72 + 328)) >> 3);
          memset(v133, 0, 24);
          sub_20B88DCD4(v133, *(const void **)(v72 + 352), *(_QWORD *)(v72 + 360), (uint64_t)(*(_QWORD *)(v72 + 360) - *(_QWORD *)(v72 + 352)) >> 3);
          v74 = (int *)sub_20B929F7C(a1 + 1200, v44);
          v75 = sub_20B97D7E0(*(_QWORD *)(a1 + 176), v74);
          v76 = v75;
          if (v75)
          {
            (*(void (**)(uint64_t, uint64_t, const char *, uint64_t))(*(_QWORD *)v75 + 528))(v75, 8, "Previous candidate", 1);
            sub_20B9C33DC((uint64_t)&__p, v76);
          }
          (*(void (**)(_QWORD, _QWORD *, std::string *))(**(_QWORD **)(a1 + 3832) + 16))(*(_QWORD *)(a1 + 3832), a3, &__p);
          v126[0] = (uint64_t)&unk_24C469588;
          v126[1] = (uint64_t)sub_20B8FF3A4;
          v127 = v126;
          sub_20B8FDD20(a3, (uint64_t)v126);
          v77 = v127;
          if (v127 == v126)
          {
            v78 = 4;
            v77 = v126;
          }
          else
          {
            if (!v127)
            {
LABEL_102:
              sub_20B95F9A8(a1, (uint64_t)a3);
              sub_20B8C2368(a1, (uint64_t)a3, (uint64_t)v121, &__p);
              sub_20B8FED50((uint64_t)a3, 8u, (uint64_t)"Last-bunsetsu", 0, 1u);
              if (v76)
                (*(void (**)(uint64_t))(*(_QWORD *)v76 + 16))(v76);
              if (v74)
                (*(void (**)(int *))(*(_QWORD *)v74 + 16))(v74);
              sub_20B8CD3CC(&__p);
              goto LABEL_107;
            }
            v78 = 5;
          }
          (*(void (**)(void))(*v77 + 8 * v78))();
          goto LABEL_102;
        }
        v37 = 5;
      }
      (*(void (**)(void))(v36->__r_.__value_.__r.__words[0] + 8 * v37))();
      goto LABEL_53;
    }
  }
  v22 = 1;
LABEL_115:
  v82 = *(UniChar **)a5;
  v81 = *(_QWORD *)(a5 + 8);
  if (!v81)
    goto LABEL_126;
  v83 = 0;
  for (k = 0; k != v81; v83 = k >= v81)
  {
    v85 = v82[k];
    v61 = (unsigned __int16)((v85 & 0xFFDF) - 65) >= 0x1Au;
    v86 = (unsigned __int16)(v85 + 191);
    v87 = v85 + 223;
    if (v61 && v86 >= 0x1A && v87 > 0x19u)
      break;
    ++k;
  }
  if (v83)
  {
LABEL_126:
    v90 = *(_QWORD *)(a1 + 3880);
    v91 = (_QWORD *)(*(_QWORD *)(a1 + 176) + 248);
    __p.__r_.__value_.__s.__data_[0] = 0;
    v92 = sub_20B969C84(v91, (BOOL *)&__p);
    if (__p.__r_.__value_.__s.__data_[0])
      v93 = 0;
    else
      v93 = v92;
    sub_20B8A7A2C(v90, v7, v82, v81, v93);
  }
  if ((v22 & 1) == 0)
  {
    v94 = *(_DWORD *)(a1 + 184);
    if (**(_BYTE **)(a1 + 1032))
      v95 = 1;
    else
      v95 = (*(_DWORD *)(a1 + 184) & 2) == 0;
    if (v95)
    {
      if ((v94 & 4) != 0)
        goto LABEL_131;
    }
    else if ((v94 & 0x2000004) != 0x2000000)
    {
      goto LABEL_131;
    }
    v96 = v119;
    if (v119 <= v118)
      v96 = v118;
    *(_DWORD *)buf = v96;
    v97 = sub_20B9A7C5C(3u);
    if (os_log_type_enabled(v97, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      _os_log_debug_impl(&dword_20B7F7000, v97, OS_LOG_TYPE_DEBUG, "[MJ::makeMecabPartialCandidate]", (uint8_t *)&__p, 2u);
    }
    std::mutex::lock((std::mutex *)(a1 + 880));
    v98 = *(_DWORD *)(a1 + 944);
    std::mutex::unlock((std::mutex *)(a1 + 880));
    if (v98 != 2)
    {
      v99 = *(_DWORD *)(a1 + 184);
      if ((v99 & 0x20) != 0)
        v100 = 74;
      else
        v100 = 10;
      v101 = (_QWORD *)(*(_QWORD *)(a1 + 176) + 248);
      __p.__r_.__value_.__s.__data_[0] = 0;
      v102 = sub_20B969C84(v101, (BOOL *)&__p);
      v103 = v100 | (v99 >> 6) & 0x40000;
      if (__p.__r_.__value_.__s.__data_[0])
        v104 = 0;
      else
        v104 = v102;
      if (v12)
        v105 = *(_QWORD *)(v12 + 16);
      else
        v105 = 0;
      v106 = *(_QWORD *)(a1 + 256);
      if (v106 && *(_BYTE *)(*(_QWORD *)(v106 + 184) + 32))
        v107 = (unsigned __int16 *)(*(_QWORD *)(a1 + 1032) + 338);
      else
        v107 = (unsigned __int16 *)(*(_QWORD *)(a1 + 1032) + 336);
      v108 = *v107;
      *(_BYTE *)(a1 + 8) = 1;
      if (sub_20BA20E78(*(_QWORD *)(a1 + 192), *(_QWORD *)v9, *(_QWORD *)(v9 + 8), v12, 0, v103))
      {
        v109 = 0;
        do
        {
          v110 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 192) + 240))(*(_QWORD *)(a1 + 192));
          if (!v110)
            break;
          ++*(_DWORD *)buf;
          sub_20B93B164(*(uint64_t **)(a1 + 696), v110, *(void **)v9, *(_QWORD *)(v9 + 8), v105, *(_BYTE *)(a1 + 8), 1, (uint64_t *)&__p);
          if (sub_20B93B88C(*(_QWORD *)(a1 + 696), (_QWORD *)v7, (uint64_t *)&__p, v104, 0, (unsigned int *)buf)&& (++v109, v109 == v108))
          {
            v111 = 5;
            v109 = v108;
          }
          else
          {
            std::mutex::lock((std::mutex *)(a1 + 880));
            v112 = *(_DWORD *)(a1 + 944);
            std::mutex::unlock((std::mutex *)(a1 + 880));
            v111 = v112 == 2 ? 5 : 0;
          }
          v113 = __p.__r_.__value_.__r.__words[0];
          __p.__r_.__value_.__r.__words[0] = 0;
          if (v113)
            (*(void (**)(std::string::size_type))(*(_QWORD *)v113 + 16))(v113);
        }
        while (!v111);
      }
      *(_BYTE *)(a1 + 8) = 0;
    }
  }
LABEL_131:
  if (v12)
  {
    free(*(void **)v12);
    MEMORY[0x20BD39CB0](v12, 0x1010C40B1660244);
  }
}

void sub_20B8C6FD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t *a34,void *a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46)
{
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v50;
  uint64_t v51;

  v50 = a34;
  if (a34 == v46)
  {
    v51 = 4;
    v50 = &a31;
  }
  else
  {
    if (!a34)
    {
      if (v48)
        goto LABEL_9;
      goto LABEL_5;
    }
    v51 = 5;
  }
  (*(void (**)(void))(*v50 + 8 * v51))();
  if (v48)
  {
LABEL_9:
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 16))(v48);
    if (!v47)
      goto LABEL_11;
    goto LABEL_10;
  }
LABEL_5:
  if (!v47)
  {
LABEL_11:
    sub_20B8CD3CC(&a35);
    sub_20B881268((uint64_t)&a21);
    sub_20B8CE758(&a16, 0);
    _Unwind_Resume(a1);
  }
LABEL_10:
  (*(void (**)(uint64_t))(*(_QWORD *)v47 + 16))(v47);
  goto LABEL_11;
}

uint64_t sub_20B8C71C4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  std::ios_base *v12;
  char *v13;
  int v14;
  char *v15;
  unsigned __int16 v16;
  char *v17;
  char *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  UniChar *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t v27;
  void *__p[2];
  char v29;
  UniChar *v30;
  void *__src;
  unint64_t v32;
  unint64_t v33;
  std::string __str;
  _QWORD v35[2];
  _QWORD v36[10];
  char v37;
  uint64_t v38[19];
  void *v39[2];
  uint64_t v40;
  void *v41[2];
  uint64_t v42;
  void *v43[2];
  uint64_t v44;
  std::string v45;
  _QWORD v46[2];
  uint64_t v47;
  _QWORD v48[21];

  v48[19] = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 1168);
  if (v2)
  {
    sub_20B8CD934((_QWORD *)(v2 + 128));
    sub_20B8CD9C4(v2 + 152);
  }
  v3 = *(_QWORD *)(a1 + 1176);
  if (v3)
  {
    sub_20B8CD934((_QWORD *)(v3 + 128));
    sub_20B8CD9C4(v3 + 152);
  }
  v4 = *(_QWORD *)(a1 + 1048);
  if (v4)
  {
    sub_20B8CDA5C((uint64_t *)(v4 + 8));
    if (*(_QWORD *)(v4 + 56))
    {
      sub_20B8CDA18(v4 + 32, *(void ***)(v4 + 48));
      *(_QWORD *)(v4 + 48) = 0;
      v5 = *(_QWORD *)(v4 + 40);
      if (v5)
      {
        for (i = 0; i != v5; ++i)
          *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * i) = 0;
      }
      *(_QWORD *)(v4 + 56) = 0;
    }
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1072) + 24))(*(_QWORD *)(a1 + 1072));
  sub_20B82EB18(v46);
  memset(&v45, 0, sizeof(v45));
  v43[0] = 0;
  v43[1] = 0;
  v44 = 0;
  v41[0] = 0;
  v41[1] = 0;
  v42 = 0;
  v39[0] = 0;
  v39[1] = 0;
  v40 = 0;
  v8 = *MEMORY[0x24BEDB7F8];
  v7 = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 8);
  v27 = MEMORY[0x24BEDB868] + 64;
  v26 = MEMORY[0x24BEDB848] + 16;
  v10 = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 16);
  v9 = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 24);
  while (1)
  {
    v11 = sub_20B851B78(v46, (uint64_t)&v45, 0xAu);
    if ((*((_BYTE *)v11 + *(_QWORD *)(*v11 - 24) + 32) & 5) != 0)
      break;
    v38[0] = v27;
    v35[0] = v7;
    *(_QWORD *)((char *)v35 + *(_QWORD *)(v7 - 24)) = v10;
    v35[1] = 0;
    v12 = (std::ios_base *)((char *)v35 + *(_QWORD *)(v35[0] - 24));
    std::ios_base::init(v12, v36);
    v12[1].__vftable = 0;
    v12[1].__fmtflags_ = -1;
    v35[0] = MEMORY[0x24BEDB868] + 24;
    v38[0] = MEMORY[0x24BEDB868] + 64;
    sub_20B8CED44((uint64_t)v36, &v45, 8);
    sub_20B851B78(v35, (uint64_t)v41, 9u);
    sub_20B851B78(v35, (uint64_t)v39, 9u);
    sub_20B851B78(v35, (uint64_t)v43, 9u);
    if (v44 >= 0)
      v13 = (char *)v43;
    else
      v13 = (char *)v43[0];
    sub_20B80BBD0(&__str, v13);
    v14 = std::stoi(&__str, 0, 16);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    sub_20B851B78(v35, (uint64_t)v43, 9u);
    if (v44 >= 0)
      v15 = (char *)v43;
    else
      v15 = (char *)v43[0];
    sub_20B80BBD0(&__str, v15);
    v16 = std::stoi(&__str, 0, 16);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v32 = 0;
    v33 = 0;
    if (v42 >= 0)
      v17 = (char *)v41;
    else
      v17 = (char *)v41[0];
    sub_20B8D054C(v17, (CFIndex *)&v33, (UniChar **)&__src);
    if (v40 >= 0)
      v18 = (char *)v39;
    else
      v18 = (char *)v39[0];
    sub_20B8D054C(v18, (CFIndex *)&v32, &v30);
    v19 = __src;
    sub_20B877ED0(&__str, __src, v33);
    v20 = *(_QWORD *)(a1 + 1168);
    if (v20)
    {
      LODWORD(__p[0]) = v14;
      sub_20B8CDB0C((_QWORD *)(v20 + 120), (uint64_t)&__str, (int *)__p);
    }
    v21 = *(_QWORD *)(a1 + 1176);
    if (v21)
    {
      LODWORD(__p[0]) = v14;
      sub_20B8CDB0C((_QWORD *)(v21 + 120), (uint64_t)&__str, (int *)__p);
    }
    v22 = v30;
    if (v30)
      v23 = v32;
    else
      v23 = 0;
    if (v19)
      v24 = v33;
    else
      v24 = 0;
    (*(void (**)(_QWORD, UniChar *, unint64_t, void *, unint64_t, _QWORD))(**(_QWORD **)(a1 + 1072)
                                                                                                  + 16))(*(_QWORD *)(a1 + 1072), v30, v23, v19, v24, v16);
    if (*(_QWORD *)(a1 + 1048))
    {
      sub_20B877ED0(__p, v22, v32);
      sub_20B8CE248(*(_QWORD **)(a1 + 1048), (__int128 *)&__str, (__int128 *)__p);
      if (v29 < 0)
        operator delete(__p[0]);
    }
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (!v22)
        goto LABEL_45;
LABEL_44:
      MEMORY[0x20BD39C80](v22, 0x1000C80BDFB0063);
      goto LABEL_45;
    }
    operator delete(__str.__r_.__value_.__l.__data_);
    if (v22)
      goto LABEL_44;
LABEL_45:
    if (v19)
      MEMORY[0x20BD39C80](v19, 0x1000C80BDFB0063);
    v35[0] = v8;
    *(_QWORD *)((char *)v35 + *(_QWORD *)(v8 - 24)) = v9;
    v36[0] = v26;
    if (v37 < 0)
      operator delete((void *)v36[8]);
    std::streambuf::~streambuf();
    std::istream::~istream();
    MEMORY[0x20BD39C2C](v38);
  }
  if (SHIBYTE(v40) < 0)
    operator delete(v39[0]);
  if (SHIBYTE(v42) < 0)
    operator delete(v41[0]);
  if (SHIBYTE(v44) < 0)
    operator delete(v43[0]);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  v46[0] = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)((char *)v46 + *(_QWORD *)(v46[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 24);
  MEMORY[0x20BD399D4](&v47);
  std::istream::~istream();
  return MEMORY[0x20BD39C2C](v48);
}

void sub_20B8C76A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B8C77E4(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  _DWORD *v4;
  int v5;
  const void *v6;
  unint64_t v7;
  const void *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  unsigned __int16 v24;
  uint64_t v25;
  uint64_t v26;
  const void *v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  BOOL v31;
  unint64_t v32;
  __int16 v34;
  uint64_t v35;
  _OWORD *v36;
  __int128 v37;
  __int128 v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  __int128 v45;
  __int128 v46;
  char *v47;
  char *v48;
  char *v49;
  __int128 v50;
  __int128 v51;
  int v52;
  int v53;
  char v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  NSObject *v61;
  uint64_t *v62;
  NSObject *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  __int16 v87;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  unsigned int v92;
  unsigned int v93;
  void *v94;
  uint64_t v95;
  void *__s2;
  unsigned __int16 v97;
  unsigned __int16 v98;
  char *__s1;
  unsigned int v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t *v103;
  uint64_t *v104;
  uint64_t *v105;
  _QWORD v106[2];
  _QWORD v107[3];
  _QWORD *v108;
  _BYTE buf[72];
  __int128 v110;
  uint64_t v111;

  v111 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 864);
  v103 = 0;
  v104 = 0;
  v105 = 0;
  v3 = (_QWORD *)a2[6];
  v101 = v2;
  v102 = (_QWORD *)a2[7];
  if (v3 == v102)
    goto LABEL_111;
  v95 = v2 + 64;
  v85 = a1 + 1200;
  do
  {
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v3 + 408))(*v3))
      goto LABEL_4;
    v4 = (_DWORD *)*v3;
    v5 = *(char *)(v101 + 87);
    v6 = v5 >= 0 ? (const void *)v95 : *(const void **)(v101 + 64);
    v7 = v5 >= 0 ? *(unsigned __int8 *)(v101 + 87) : *(_QWORD *)(v101 + 72);
    v8 = (const void *)(*(uint64_t (**)(void))(*(_QWORD *)v101 + 552))();
    v10 = v9;
    __s2 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v101 + 544))(v101);
    if (!v4 || !v7)
      goto LABEL_4;
    v12 = v11;
    if (!v11 || v10 == 0)
      goto LABEL_4;
    v14 = *((char *)v4 + 87);
    v15 = (char *)(v4 + 16);
    if (v14 < 0)
      v15 = (char *)*((_QWORD *)v4 + 8);
    __s1 = v15;
    v16 = v14 >= 0 ? *((unsigned __int8 *)v4 + 87) : *((_QWORD *)v4 + 9);
    v94 = (void *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v4 + 552))(v4);
    v18 = v17;
    v91 = (void *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v4 + 544))(v4);
    v90 = v16 - v7;
    if (v16 < v7 || __s1 == 0)
      goto LABEL_4;
    v21 = v19;
    if (memcmp(__s1, v6, 2 * v7))
      goto LABEL_4;
    v22 = v18 < v10 || v94 == 0;
    if (v22 || memcmp(v94, v8, 2 * v10) || v21 < v12 || !v91 || memcmp(v91, __s2, 2 * v12))
      goto LABEL_4;
    v86 = (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v4 + 304))(v4);
    v23 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v4 + 48))(v4);
    *(_QWORD *)buf = v85;
    memset(&buf[8], 0, 64);
    v110 = 0u;
    if (!v23)
    {
LABEL_74:
      v106[0] = &__s1[2 * v7];
      v106[1] = v90;
      v52 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v4 + 112))(v4);
      v53 = v4[55];
      v54 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v4 + 376))(v4);
      v55 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v4 + 96))(v4);
      v56 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v4 + 408))(v4);
      v57 = sub_20B8CD5F8((uint64_t)buf, (uint64_t)v106, v52, v53, v54, v55, v56);
      goto LABEL_75;
    }
    v97 = 0;
    v98 = 0;
    v24 = 0;
    v25 = 0;
    v89 = v23;
    while (1)
    {
      v93 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)v4 + 312))(v4, v25);
      v100 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)v4 + 320))(v4, v25);
      v92 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)v4 + 568))(v4, v25);
      if (v7 <= v24 || v12 <= v98 || v10 <= v97)
      {
        v35 = *v86 + 40 * v25;
        sub_20B8B17F4((_WORD *)v91 + v98, (_WORD *)v91 + v98 + *(unsigned __int16 *)(v35 + 24), (uint64_t)&buf[8]);
        sub_20B8B17F4((_WORD *)v94 + v97, (_WORD *)v94 + v97 + v100, (uint64_t)&buf[32]);
        v36 = *(_OWORD **)&buf[64];
        if (*(_QWORD *)&buf[64] >= (unint64_t)v110)
        {
          v40 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)&buf[64] - *(_QWORD *)&buf[56]) >> 3);
          v41 = v40 + 1;
          if (v40 + 1 > 0x666666666666666)
            sub_20B8821D4();
          if (0x999999999999999ALL * ((uint64_t)(v110 - *(_QWORD *)&buf[56]) >> 3) > v41)
            v41 = 0x999999999999999ALL * ((uint64_t)(v110 - *(_QWORD *)&buf[56]) >> 3);
          if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v110 - *(_QWORD *)&buf[56]) >> 3) >= 0x333333333333333)
            v42 = 0x666666666666666;
          else
            v42 = v41;
          if (v42)
            v43 = (char *)sub_20B882310((uint64_t)&v110, v42);
          else
            v43 = 0;
          v44 = &v43[40 * v40];
          v45 = *(_OWORD *)v35;
          v46 = *(_OWORD *)(v35 + 16);
          *((_QWORD *)v44 + 4) = *(_QWORD *)(v35 + 32);
          *(_OWORD *)v44 = v45;
          *((_OWORD *)v44 + 1) = v46;
          v48 = *(char **)&buf[56];
          v47 = *(char **)&buf[64];
          v49 = v44;
          if (*(_QWORD *)&buf[64] != *(_QWORD *)&buf[56])
          {
            do
            {
              v50 = *(_OWORD *)(v47 - 40);
              v51 = *(_OWORD *)(v47 - 24);
              *((_QWORD *)v49 - 1) = *((_QWORD *)v47 - 1);
              *(_OWORD *)(v49 - 24) = v51;
              *(_OWORD *)(v49 - 40) = v50;
              v49 -= 40;
              v47 -= 40;
            }
            while (v47 != v48);
            v47 = *(char **)&buf[56];
          }
          v39 = v44 + 40;
          *(_QWORD *)&buf[56] = v49;
          *(_QWORD *)&buf[64] = v44 + 40;
          *(_QWORD *)&v110 = &v43[40 * v42];
          if (v47)
            operator delete(v47);
        }
        else
        {
          v37 = *(_OWORD *)v35;
          v38 = *(_OWORD *)(v35 + 16);
          *(_QWORD *)(*(_QWORD *)&buf[64] + 32) = *(_QWORD *)(v35 + 32);
          *v36 = v37;
          v36[1] = v38;
          v39 = (char *)v36 + 40;
        }
        *(_QWORD *)&buf[64] = v39;
        *((_WORD *)v39 - 6) = v100;
        goto LABEL_73;
      }
      v26 = v100;
      if (!v25 && v10 < v100)
      {
        v27 = (const void *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v4 + 544))(v4);
        v28 = (*(unsigned int (**)(_DWORD *, _QWORD))(*(_QWORD *)v4 + 568))(v4, 0);
        if (!v27)
          v28 = 0;
        v26 = v100;
        if (v28 == v12)
        {
          v29 = memcmp(v27, __s2, 2 * v12);
          v26 = v100;
          if (!v29)
            break;
        }
      }
      v30 = v98 + (unint64_t)v92;
      v31 = v24 + (unint64_t)v93 > v7 && v30 > v12;
      v32 = v26 + v97;
      if (v31 && v32 > v10)
      {
        v87 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)v4 + 344))(v4, v25);
        v34 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)v4 + 352))(v4, v25);
        sub_20B8CD43C(buf, (_WORD *)v91 + v12, v30 - v12, v24 + v93 - v7, (_WORD *)v94 + v10, v32 - v10, v87, v34);
      }
LABEL_73:
      v24 += v93;
      v97 += v100;
      v98 += v92;
      if (++v25 == v89)
        goto LABEL_74;
    }
    v57 = 0;
LABEL_75:
    if (*((_QWORD *)&v110 + 1))
      CFRelease(*((CFTypeRef *)&v110 + 1));
    *((_QWORD *)&v110 + 1) = 0;
    if (*(_QWORD *)&buf[56])
    {
      *(_QWORD *)&buf[64] = *(_QWORD *)&buf[56];
      operator delete(*(void **)&buf[56]);
    }
    if (*(_QWORD *)&buf[32])
    {
      *(_QWORD *)&buf[40] = *(_QWORD *)&buf[32];
      operator delete(*(void **)&buf[32]);
    }
    if (*(_QWORD *)&buf[8])
    {
      *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
      operator delete(*(void **)&buf[8]);
    }
    if (v57)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v57 + 544))(v57);
      if (v58)
      {
        v59 = *(unsigned __int16 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v57 + 544))(v57);
        if (((v59 - 12353) < 0x56 || v59 == 12540 || v59 == 12316)
          && (v60 = *(unsigned __int16 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v57 + 544))(v57),
              v60 != *(unsigned __int16 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v57 + 552))(v57)))
        {
          v63 = sub_20B9A7C5C(4u);
          if (os_log_type_enabled(v63, OS_LOG_TYPE_DEBUG))
          {
            v64 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v57 + 24))(v57);
            v65 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v57 + 56))(v57);
            v66 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v57 + 232))(v57);
            *(_DWORD *)buf = 138412802;
            *(_QWORD *)&buf[4] = v64;
            *(_WORD *)&buf[12] = 2112;
            *(_QWORD *)&buf[14] = v65;
            *(_WORD *)&buf[22] = 2112;
            *(_QWORD *)&buf[24] = v66;
            _os_log_debug_impl(&dword_20B7F7000, v63, OS_LOG_TYPE_DEBUG, "[ME:removeTruncatedContextFromCandidates] Remove an invalid candidate %@ (%@/%@)", buf, 0x20u);
          }
        }
        else
        {
          v61 = sub_20B9A7C5C(4u);
          if (os_log_type_enabled(v61, OS_LOG_TYPE_DEBUG))
          {
            v74 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v3 + 24))(*v3);
            v75 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v3 + 56))(*v3);
            v76 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v3 + 232))(*v3);
            v77 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v57 + 24))(v57);
            v78 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v57 + 56))(v57);
            v79 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v57 + 232))(v57);
            *(_DWORD *)buf = 138413570;
            *(_QWORD *)&buf[4] = v74;
            *(_WORD *)&buf[12] = 2112;
            *(_QWORD *)&buf[14] = v75;
            *(_WORD *)&buf[22] = 2112;
            *(_QWORD *)&buf[24] = v76;
            *(_WORD *)&buf[32] = 2112;
            *(_QWORD *)&buf[34] = v77;
            *(_WORD *)&buf[42] = 2112;
            *(_QWORD *)&buf[44] = v78;
            *(_WORD *)&buf[52] = 2112;
            *(_QWORD *)&buf[54] = v79;
            _os_log_debug_impl(&dword_20B7F7000, v61, OS_LOG_TYPE_DEBUG, "[ME:removeTruncatedContextFromCandidates] Converting %@ (%@/%@) to %@ (%@/%@)", buf, 0x3Eu);
          }
          if (v104 >= v105)
          {
            v67 = v104 - v103;
            if ((unint64_t)(v67 + 1) >> 61)
              sub_20B80CDD8();
            v68 = ((char *)v105 - (char *)v103) >> 2;
            if (v68 <= v67 + 1)
              v68 = v67 + 1;
            if ((unint64_t)((char *)v105 - (char *)v103) >= 0x7FFFFFFFFFFFFFF8)
              v69 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v69 = v68;
            if (v69)
              v70 = (char *)sub_20B800BE8((uint64_t)&v105, v69);
            else
              v70 = 0;
            v71 = (uint64_t *)&v70[8 * v67];
            *v71 = v57;
            v62 = v71 + 1;
            v72 = v104;
            if (v104 != v103)
            {
              do
              {
                v73 = *--v72;
                *--v71 = v73;
              }
              while (v72 != v103);
              v72 = v103;
            }
            v103 = v71;
            v105 = (uint64_t *)&v70[8 * v69];
            if (v72)
              operator delete(v72);
          }
          else
          {
            *v104 = v57;
            v62 = v104 + 1;
          }
          v104 = v62;
        }
      }
    }
LABEL_4:
    ++v3;
  }
  while (v3 != v102);
LABEL_111:
  sub_20B8C8284(a2);
  v80 = v103;
  if (v103 == v104)
    goto LABEL_121;
  while (2)
  {
    v81 = *v80;
    v108 = v107;
    *(_QWORD *)buf = v81;
    v107[0] = &unk_24C459188;
    sub_20B8FDA94(a2, (_QWORD **)buf, 1, 0, (uint64_t)v107);
    v82 = v108;
    if (v108 == v107)
    {
      v82 = v107;
      v83 = 4;
LABEL_116:
      (*(void (**)(void))(*v82 + 8 * v83))();
    }
    else if (v108)
    {
      v83 = 5;
      goto LABEL_116;
    }
    v84 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    if (v84)
      (*(void (**)(uint64_t))(*(_QWORD *)v84 + 16))(v84);
    if (++v80 != v104)
      continue;
    break;
  }
  v80 = v103;
LABEL_121:
  if (v80)
    operator delete(v80);
}

void sub_20B8C81B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B8C8284(_QWORD *a1)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  result = sub_20B8CD6FC(a1 + 1);
  v3 = (_QWORD *)a1[6];
  v4 = (_QWORD *)a1[7];
  while (v4 != v3)
  {
    v5 = (_QWORD *)*--v4;
    result = v5;
    *v4 = 0;
    if (v5)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 16))(result);
  }
  a1[7] = v3;
  return result;
}

uint64_t sub_20B8C82DC(uint64_t a1)
{
  void *v2;

  sub_20B8CE7A4(*(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

_QWORD *sub_20B8C8314(uint64_t a1, unint64_t a2)
{
  _QWORD *result;
  unint64_t v4;

  v4 = a2;
  result = sub_20B8B6C54((_QWORD *)(a1 + 64), &v4);
  if (result)
    return *(_QWORD **)(a1 + 16);
  return result;
}

void sub_20B8C8364(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  void *v8;
  unint64_t v9;
  __int128 *v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  char *v14;
  _OWORD *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  char *v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  _QWORD *v35;
  __int128 v36;
  __int128 v37;
  unsigned int v38;
  __int16 v39;
  uint64_t v40;
  _QWORD *v41;
  void *v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  void *__p;
  char *v50;
  char *v51;
  void *v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  void *v57;
  _BYTE *v58;
  _QWORD v59[3];
  _QWORD *v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  sub_20B8D0790(*(const __CFString **)(a1 + 216), (UniChar **)&v57);
  sub_20BA20F24(*(_QWORD *)(a1 + 192), (uint64_t)v57, (v58 - (_BYTE *)v57) >> 1, 2u, &v55);
  v52 = 0;
  v53 = 0;
  v54 = 0;
  __p = 0;
  v50 = 0;
  v51 = 0;
  if (v56 == v55)
    v4 = 1;
  else
    v4 = (uint64_t)(v56 - v55) >> 6;
  sub_20B8B3708(&__p, v4);
  v47 = a2;
  v5 = v55;
  v6 = v56;
  if (v55 == v56)
  {
    v14 = v50;
  }
  else
  {
    do
    {
      v7 = *(char *)(v5 + 23);
      if (v7 >= 0)
        v8 = (void *)v5;
      else
        v8 = *(void **)v5;
      if (v7 >= 0)
        v9 = *(unsigned __int8 *)(v5 + 23);
      else
        v9 = *(_QWORD *)(v5 + 8);
      sub_20B88DACC((uint64_t)&v52, v8, v9);
      v10 = (__int128 *)(v5 + 24);
      v11 = v50;
      if (v50 >= v51)
      {
        v15 = __p;
        v16 = 0xCCCCCCCCCCCCCCCDLL * ((v50 - (_BYTE *)__p) >> 3);
        v17 = v16 + 1;
        if (v16 + 1 > 0x666666666666666)
          sub_20B8821D4();
        if (0x999999999999999ALL * ((v51 - (_BYTE *)__p) >> 3) > v17)
          v17 = 0x999999999999999ALL * ((v51 - (_BYTE *)__p) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((v51 - (_BYTE *)__p) >> 3) >= 0x333333333333333)
          v18 = 0x666666666666666;
        else
          v18 = v17;
        if (v18)
        {
          v19 = (char *)sub_20B882310((uint64_t)&v51, v18);
          v15 = __p;
          v11 = v50;
        }
        else
        {
          v19 = 0;
        }
        v20 = &v19[40 * v16];
        v21 = *v10;
        v22 = *(_OWORD *)(v5 + 40);
        *((_QWORD *)v20 + 4) = *(_QWORD *)(v5 + 56);
        *(_OWORD *)v20 = v21;
        *((_OWORD *)v20 + 1) = v22;
        if (v11 == v15)
        {
          v26 = &v19[40 * v16];
        }
        else
        {
          v23 = &v19[40 * v16];
          do
          {
            v24 = *(_OWORD *)((char *)v11 - 40);
            v25 = *(_OWORD *)((char *)v11 - 24);
            v26 = v23 - 40;
            *((_QWORD *)v23 - 1) = *((_QWORD *)v11 - 1);
            *(_OWORD *)(v23 - 24) = v25;
            *(_OWORD *)(v23 - 40) = v24;
            v11 = (_OWORD *)((char *)v11 - 40);
            v23 -= 40;
          }
          while (v11 != v15);
        }
        v14 = v20 + 40;
        __p = v26;
        v50 = v20 + 40;
        v51 = &v19[40 * v18];
        if (v15)
          operator delete(v15);
      }
      else
      {
        v12 = *v10;
        v13 = *(_OWORD *)(v5 + 40);
        *((_QWORD *)v50 + 4) = *(_QWORD *)(v5 + 56);
        *v11 = v12;
        v11[1] = v13;
        v14 = (char *)v11 + 40;
      }
      v50 = v14;
      v5 += 64;
    }
    while (v5 != v6);
  }
  if (__p == v14)
  {
    if (v14 >= v51)
    {
      v28 = 0x999999999999999ALL * ((v51 - v14) >> 3);
      if (v28 <= 1)
        v28 = 1;
      if (0xCCCCCCCCCCCCCCCDLL * ((v51 - v14) >> 3) >= 0x333333333333333)
        v29 = 0x666666666666666;
      else
        v29 = v28;
      v30 = sub_20B882310((uint64_t)&v51, v29);
      v31 = (char *)__p;
      v32 = v50;
      v34 = (char *)&v30[5 * v33];
      v30[4] = 0;
      *(_OWORD *)v30 = 0u;
      *((_OWORD *)v30 + 1) = 0u;
      v27 = (char *)(v30 + 5);
      if (v32 != v31)
      {
        v35 = v30;
        do
        {
          v36 = *(_OWORD *)(v32 - 40);
          v37 = *(_OWORD *)(v32 - 24);
          v30 = v35 - 5;
          *(v35 - 1) = *((_QWORD *)v32 - 1);
          *(_OWORD *)(v35 - 3) = v37;
          *(_OWORD *)(v35 - 5) = v36;
          v32 -= 40;
          v35 -= 5;
        }
        while (v32 != v31);
      }
      __p = v30;
      v50 = v27;
      v51 = v34;
      if (v31)
        operator delete(v31);
    }
    else
    {
      *((_QWORD *)v14 + 4) = 0;
      *(_OWORD *)v14 = 0u;
      *((_OWORD *)v14 + 1) = 0u;
      v27 = v14 + 40;
    }
    v50 = v27;
    *(_OWORD *)(v27 - 40) = 0u;
    *(_OWORD *)(v27 - 24) = 0u;
    *((_QWORD *)v27 - 1) = 0;
    v38 = ((_DWORD)v58 - (_DWORD)v57) >> 1;
    *((_WORD *)v27 - 8) = v38;
    *((_WORD *)v27 - 7) = v38;
    v39 = HIBYTE(v54);
    if (v54 < 0)
      v39 = v53;
    *((_WORD *)v27 - 6) = v39;
  }
  v40 = operator new();
  v41 = (_QWORD *)v40;
  if (v54 >= 0)
    v42 = &v52;
  else
    v42 = v52;
  if (v54 >= 0)
    v43 = HIBYTE(v54);
  else
    v43 = v53;
  sub_20B916250(v40, v57, (v58 - (_BYTE *)v57) >> 1, v57, (v58 - (_BYTE *)v57) >> 1, v42, v43, 0, 0, 0, (uint64_t)&__p, 72, 0, *(_DWORD *)(a1 + 184));
  v48 = v41;
  v59[0] = &unk_24C459188;
  v60 = v59;
  sub_20B8FDA94(v47, &v48, 1, 0, (uint64_t)v59);
  v44 = v60;
  if (v60 == v59)
  {
    v45 = 4;
    v44 = v59;
  }
  else
  {
    if (!v60)
      goto LABEL_59;
    v45 = 5;
  }
  (*(void (**)(void))(*v44 + 8 * v45))();
LABEL_59:
  v46 = v48;
  v48 = 0;
  if (v46)
    (*(void (**)(_QWORD *))(*v46 + 16))(v46);
  if (__p)
  {
    v50 = (char *)__p;
    operator delete(__p);
  }
  if (SHIBYTE(v54) < 0)
    operator delete(v52);
  v52 = &v55;
  sub_20B8CD7B8((void ***)&v52);
  if (v57)
  {
    v58 = v57;
    operator delete(v57);
  }
}

void sub_20B8C87D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  if (__p)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  a18 = &a24;
  sub_20B8CD7B8((void ***)&a18);
  if (a27)
  {
    a28 = (uint64_t)a27;
    operator delete(a27);
  }
  _Unwind_Resume(a1);
}

void sub_20B8C88B0(uint64_t a1, char *a2)
{
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  const void *v7;
  _QWORD *v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  uint64_t *v12;
  _BYTE *v13;
  int v14;
  _QWORD **v15;
  _QWORD **v16;
  _QWORD *v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  int64_t v25;
  unint64_t v26;
  int v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int16 *v32;
  UChar32 v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  uint8x8_t v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *i;
  unint64_t v41;
  unsigned __int16 *v42;
  uint64_t v43;
  uint64_t *v44;
  __CFString *v45;
  __CFArray *v46;
  CFIndex j;
  const __CFString *ValueAtIndex;
  int v49;
  unsigned __int8 v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  _DWORD *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  int v63;
  _DWORD *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  _DWORD *v71;
  int v72;
  int v73;
  double v74;
  unsigned int v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  _WORD *v80;
  unint64_t v81;
  unint64_t v82;
  _WORD *v83;
  uint64_t v84;
  __int16 v85;
  int **v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  const __CFAllocator *v94;
  CFMutableDictionaryRef Mutable;
  const char *v96;
  CFStringRef v97;
  NSObject *v98;
  NSObject *v99;
  uint64_t k;
  int v101;
  os_signpost_id_t spid;
  int64_t v103;
  _QWORD *v104;
  int64_t v105;
  _QWORD *ptr;
  __CFArray *v107;
  __CFString *v108;
  int v109;
  _QWORD v110[3];
  _QWORD *v111;
  uint8_t buf[32];
  __int128 v113;
  __int128 v114;
  _OWORD v115[2];
  uint64_t v116;
  uint8_t __dst[16];
  _OWORD v118[2];
  __int128 v119;
  _OWORD v120[2];
  uint64_t v121;

  v121 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20B9A7C5C(2u);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    v21 = (*(_DWORD *)(a1 + 184) >> 1) & 1;
    v22 = *(_QWORD *)(*(_QWORD *)(a1 + 176) + 104);
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = v21;
    *(_WORD *)&buf[8] = 2048;
    *(_QWORD *)&buf[10] = v22;
    _os_log_debug_impl(&dword_20B7F7000, v4, OS_LOG_TYPE_DEBUG, "[MJ::predict] prediction:%d acceptedCandidate:%p", buf, 0x12u);
  }
  if (*(_BYTE *)(a1 + 230))
    return;
  sub_20B8C8284(a2);
  ptr = 0;
  v7 = (const void *)objc_msgSend_rawCandidate(*(void **)(*(_QWORD *)(a1 + 176) + 104), v5, v6);
  if (!v7)
    return;
  v8 = __dynamic_cast(v7, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
  ptr = v8;
  if ((*(_BYTE *)(a1 + 184) & 2) == 0
    || !v8
    || !(*(uint64_t (**)(_QWORD *))(*v8 + 48))(v8)
    || !(*(uint64_t (**)(_QWORD *))(*ptr + 24))(ptr))
  {
    return;
  }
  v9 = sub_20B9A7C5C(0xDu);
  spid = os_signpost_id_make_with_pointer(v9, &ptr);
  v10 = sub_20B9A7C5C(0xDu);
  if (spid - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v11 = v10;
    if (os_signpost_enabled(v10))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_20B7F7000, v11, OS_SIGNPOST_INTERVAL_BEGIN, spid, "MecabraPredictionAnalyzeWithContext", (const char *)&unk_20BA9505F, buf, 2u);
    }
  }
  sub_20B9C3978(*(_QWORD *)(a1 + 176) + 248);
  v12 = sub_20B947D18();
  sub_20B8C6354(a1, a2, (uint64_t)v12, 1, 0);
  memset(v115, 0, sizeof(v115));
  v113 = 0u;
  v114 = 0u;
  memset(buf, 0, sizeof(buf));
  v116 = 1065353216;
  sub_20B8C12D4(a1, a2, (uint64_t)buf);
  v13 = *(_BYTE **)(a1 + 1032);
  if (*v13)
  {
    sub_20B8C1FD4(a1, (uint64_t)a2, ptr, (uint64_t)v12, (uint64_t)v12);
    v13 = *(_BYTE **)(a1 + 1032);
  }
  if (v13[264])
  {
    std::mutex::lock((std::mutex *)(a1 + 880));
    v14 = *(_DWORD *)(a1 + 944);
    std::mutex::unlock((std::mutex *)(a1 + 880));
    if (v14 != 2)
      sub_20B913B1C(*(uint64_t **)(a1 + 3856), a2, v12, (uint64_t)v12);
  }
  if (*(_BYTE *)(a1 + 228))
  {
    (*(void (**)(uint8_t *__return_ptr, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 3840) + 16))(__dst, *(_QWORD *)(a1 + 3840), *(_QWORD *)(a1 + 176) + 248, *v12, v12[1], *v12, v12[1]);
    v15 = (_QWORD **)*((_QWORD *)&v119 + 1);
    v16 = (_QWORD **)v119;
    if ((_QWORD)v119 != *((_QWORD *)&v119 + 1))
    {
      while (1)
      {
        v110[0] = &unk_24C459188;
        v111 = v110;
        sub_20B8FDA94(a2, v16, 1, 0, (uint64_t)v110);
        v17 = v111;
        if (v111 == v110)
          break;
        if (v111)
        {
          v18 = 5;
LABEL_24:
          (*(void (**)(void))(*v17 + 8 * v18))();
        }
        if (++v16 == v15)
          goto LABEL_26;
      }
      v17 = v110;
      v18 = 4;
      goto LABEL_24;
    }
LABEL_26:
    *(_QWORD *)__dst = &unk_24C460D28;
    v108 = (__CFString *)&v119;
    sub_20B882410((void ***)&v108);
    sub_20B84055C((uint64_t)&__dst[8]);
  }
  sub_20B8A7D54(*(_QWORD *)(a1 + 3880), a2, (UniChar *)*v12, v12[1], (_QWORD *)(*(_QWORD *)(a1 + 176) + 248));
  if (*(_QWORD *)(a1 + 1184))
    sub_20B95F9A8(a1, (uint64_t)a2);
  *(_QWORD *)__dst = &unk_24C469588;
  *(_QWORD *)&__dst[8] = sub_20B8FEF70;
  *((_QWORD *)&v118[0] + 1) = __dst;
  sub_20B8FDD20(a2, (uint64_t)__dst);
  v19 = (uint8_t *)*((_QWORD *)&v118[0] + 1);
  if (*((uint8_t **)&v118[0] + 1) == __dst)
  {
    v20 = 4;
    v19 = __dst;
  }
  else
  {
    if (!*((_QWORD *)&v118[0] + 1))
      goto LABEL_34;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_34:
  if (!sub_20B90399C(a1 + 1208, (const __CFAllocator *)a2, (_QWORD *)(*(_QWORD *)(a1 + 176) + 248)))
  {
    v23 = atomic_load((unsigned __int8 *)&qword_25472B3A8);
    if ((v23 & 1) == 0 && __cxa_guard_acquire(&qword_25472B3A8))
    {
      v118[1] = xmmword_24C49BC58;
      v119 = unk_24C49BC68;
      v120[0] = xmmword_24C49BC78;
      *(_OWORD *)__dst = xmmword_24C49BC38;
      v118[0] = *(_OWORD *)&off_24C49BC48;
      sub_20B8CE870((uint64_t)&qword_25472B440, __dst, 5);
      __cxa_atexit((void (*)(void *))sub_20B8C97A8, &qword_25472B440, &dword_20B7F7000);
      __cxa_guard_release(&qword_25472B3A8);
    }
    v24 = atomic_load((unsigned __int8 *)&qword_25472B3B0);
    if ((v24 & 1) == 0 && __cxa_guard_acquire(&qword_25472B3B0))
    {
      if (**(_BYTE **)(a1 + 1032))
        v101 = 4;
      else
        v101 = 1;
      dword_25472B388 = v101;
      __cxa_guard_release(&qword_25472B3B0);
    }
    v104 = *(_QWORD **)(a1 + 176);
    v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v104[33] - v104[32]) >> 3);
    v26 = 5;
    if (v25 > 5)
      v26 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v104[33] - v104[32]) >> 3);
    v105 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v104[33] - v104[32]) >> 3);
    v103 = v26 - 5;
    if (v25 > (uint64_t)(v26 - 5))
    {
      v27 = 0;
      v28 = 0;
      do
      {
        --v105;
        v29 = *(_QWORD *)(v104[41] + 8 * v105);
        v30 = v104[35];
        v31 = v104[36] - v30;
        v32 = (unsigned __int16 *)(v30 + 2 * v29);
        if (v29 >= v31 >> 1)
          v32 = 0;
        v33 = *v32;
        if (v33 != 9787)
        {
          if ((u_charType(v33) - 19) < 0xB)
          {
            if ((v28 & 1) != 0)
              break;
            v28 = 0;
            continue;
          }
          v29 = *(_QWORD *)(v104[41] + 8 * v105);
          v30 = v104[35];
          v31 = v104[36] - v30;
        }
        if (v29 >= v31 >> 1)
        {
          v34 = 0;
          v35 = 0;
        }
        else
        {
          v34 = (uint64_t *)(v30 + 2 * v29);
          if (v30)
            v35 = *(unsigned __int16 *)(v104[32] + 40 * v105 + 24);
          else
            v35 = 0;
        }
        v36 = sub_20B8CEB50((uint64_t)&unk_25472B458, v34, v35);
        if (qword_25472B448)
        {
          v37 = (uint8x8_t)vcnt_s8((int8x8_t)qword_25472B448);
          v37.i16[0] = vaddlv_u8(v37);
          if (v37.u32[0] > 1uLL)
          {
            v38 = v36;
            if (v36 >= qword_25472B448)
              v38 = v36 % qword_25472B448;
          }
          else
          {
            v38 = (qword_25472B448 - 1) & v36;
          }
          v39 = *(_QWORD **)(qword_25472B440 + 8 * v38);
          if (v39)
          {
            for (i = (_QWORD *)*v39; i; i = (_QWORD *)*i)
            {
              v41 = i[1];
              if (v41 == v36)
              {
                if (i[3] == v35)
                {
                  if (!v35)
                    goto LABEL_84;
                  v42 = (unsigned __int16 *)i[2];
                  v43 = v35;
                  v44 = v34;
                  while (*(unsigned __int16 *)v44 == *v42)
                  {
                    ++v42;
                    v44 = (uint64_t *)((char *)v44 + 2);
                    if (!--v43)
                      goto LABEL_84;
                  }
                }
              }
              else
              {
                if (v37.u32[0] > 1uLL)
                {
                  if (v41 >= qword_25472B448)
                    v41 %= (unint64_t)qword_25472B448;
                }
                else
                {
                  v41 &= qword_25472B448 - 1;
                }
                if (v41 != v38)
                  break;
              }
            }
          }
        }
        v45 = (__CFString *)CFStringCreateWithCharacters(0, (const UniChar *)v34, v35);
        v108 = v45;
        v46 = sub_20B93E054(1, 2, (__CFArray *)v45, 0);
        v107 = v46;
        if (v46)
        {
          for (j = 0; j < CFArrayGetCount(v46); ++j)
          {
            ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v46, j);
            sub_20B8D0790(ValueAtIndex, (UniChar **)__dst);
            v49 = sub_20B963484(*(int ***)(a1 + 3872), a2, *(void **)__dst, (uint64_t)(*(_QWORD *)&__dst[8] - *(_QWORD *)__dst) >> 1, (const UniChar *)v34, v35, dword_25472B388 + v27);
            if (*(_QWORD *)__dst)
            {
              *(_QWORD *)&__dst[8] = *(_QWORD *)__dst;
              operator delete(*(void **)__dst);
            }
            v27 += v49;
          }
          CFRelease(v46);
        }
        if (v45)
          CFRelease(v45);
        v28 = 1;
      }
      while (v105 > v103);
    }
  }
LABEL_84:
  if (**(_BYTE **)(a1 + 1032))
  {
    v50 = atomic_load((unsigned __int8 *)&qword_25472B3B8);
    if ((v50 & 1) == 0 && __cxa_guard_acquire(&qword_25472B3B8))
    {
      sub_20B87C9E0(__dst, (char *)L"、");
      sub_20B87C9E0((_BYTE *)v118 + 8, (char *)L"。");
      sub_20B87C9E0(&v119, (char *)L"！");
      sub_20B87C9E0((_BYTE *)v120 + 8, (char *)L"？");
      sub_20B8C97AC((uint64_t)&qword_25472B3D0, (__int128 *)__dst, 4uLL);
      for (k = 0; k != -96; k -= 24)
      {
        if (*((char *)&v120[1] + k + 15) < 0)
          operator delete(*(void **)((char *)v120 + k + 8));
      }
      __cxa_atexit((void (*)(void *))sub_20B8C9848, &qword_25472B3D0, &dword_20B7F7000);
      __cxa_guard_release(&qword_25472B3B8);
    }
    v51 = *(_QWORD **)(a1 + 176);
    if (!sub_20B969C84(v51 + 31, 0) && v51[33] != v51[32])
    {
      v52 = *(_QWORD *)(a1 + 1176);
      if (!v52 || !*(_QWORD *)(v52 + 8))
        goto LABEL_129;
      v53 = *(_QWORD **)(a1 + 176);
      v54 = v53[32];
      v55 = 0xCCCCCCCCCCCCCCCDLL * ((v53[33] - v54) >> 3);
      v56 = v55 - (*(_QWORD *)(v52 + 32) + *(unsigned __int16 *)(*(_QWORD *)(a1 + 1032) + 328));
      v57 = v56 & ~(v56 >> 63);
      *(_QWORD *)&v118[0] = 0;
      memset(__dst, 0, sizeof(__dst));
      if (v57 < v55)
      {
        v58 = 0;
        do
        {
          v59 = *(_QWORD *)(v53[41] + 8 * v57);
          v60 = v53[35];
          if (v59 >= (v53[36] - v60) >> 1
            || ((v61 = *(unsigned __int16 *)(v54 + 40 * v57 + 24), v60) ? (v62 = (_DWORD)v61 == 0) : (v62 = 1), v62))
          {
            v63 = 0;
          }
          else
          {
            v63 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(a1 + 192) + 32))(*(_QWORD *)(a1 + 192), v60 + 2 * v59, 2 * v61);
            v58 = *(_DWORD **)&__dst[8];
          }
          if ((unint64_t)v58 >= *(_QWORD *)&v118[0])
          {
            v64 = *(_DWORD **)__dst;
            v65 = ((uint64_t)v58 - *(_QWORD *)__dst) >> 2;
            v66 = v65 + 1;
            if ((unint64_t)(v65 + 1) >> 62)
              sub_20B80CDD8();
            v67 = *(_QWORD *)&v118[0] - *(_QWORD *)__dst;
            if ((uint64_t)(*(_QWORD *)&v118[0] - *(_QWORD *)__dst) >> 1 > v66)
              v66 = v67 >> 1;
            if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFFCLL)
              v68 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v68 = v66;
            if (v68)
            {
              v69 = (char *)sub_20B8127BC((uint64_t)v118, v68);
              v64 = *(_DWORD **)__dst;
              v58 = *(_DWORD **)&__dst[8];
            }
            else
            {
              v69 = 0;
            }
            v70 = &v69[4 * v65];
            *(_DWORD *)v70 = v63;
            v71 = v70 + 4;
            while (v58 != v64)
            {
              v72 = *--v58;
              *((_DWORD *)v70 - 1) = v72;
              v70 -= 4;
            }
            *(_QWORD *)__dst = v70;
            *(_QWORD *)&__dst[8] = v71;
            *(_QWORD *)&v118[0] = &v69[4 * v68];
            if (v64)
              operator delete(v64);
            v58 = v71;
          }
          else
          {
            *v58++ = v63;
          }
          *(_QWORD *)&__dst[8] = v58;
          ++v57;
          v54 = v53[32];
        }
        while (v57 < 0xCCCCCCCCCCCCCCCDLL * ((v53[33] - v54) >> 3));
      }
      LMLanguageModelCreatePredictionEnumerator();
      v73 = 0;
      v74 = -7.0;
      while (v73 != 5 && (LMPredictionEnumeratorAdvance() & 1) != 0)
      {
        v109 = 0;
        v107 = 0;
        v108 = 0;
        LMPredictionEnumeratorGetPrediction();
        ++v73;
        if (v109 == 2)
        {
          v74 = *(double *)&v108;
          goto LABEL_123;
        }
      }
      v73 = -1;
LABEL_123:
      LMPredictionEnumeratorRelease();
      if (*(_QWORD *)__dst)
      {
        *(_QWORD *)&__dst[8] = *(_QWORD *)__dst;
        operator delete(*(void **)__dst);
      }
      v75 = v73 - 1;
      if (v73 >= 1)
      {
        v76 = 0;
        if (v75 <= 1)
          v75 = 1;
        v77 = v75 + (int)(-1.0 - v74 + -1.0 - v74);
      }
      else
      {
LABEL_129:
        v77 = -1;
        v76 = 2;
      }
      v78 = qword_25472B3D0;
      v79 = unk_25472B3D8;
      while (v78 != v79)
      {
        if (*(char *)(v78 + 23) < 0)
        {
          v80 = *(_WORD **)v78;
          v81 = *(_QWORD *)(v78 + 8);
        }
        else
        {
          v80 = (_WORD *)v78;
          v81 = *(unsigned __int8 *)(v78 + 23);
        }
        if (v80)
          v82 = v81;
        else
          v82 = 0;
        if (v81 == 1 && (*(char *)(v78 + 23) >= 0 ? (v83 = (_WORD *)v78) : (v83 = *(_WORD **)v78), *v83 == 12289))
          v84 = 587;
        else
          v84 = 582;
        v85 = word_20BA4138A[v84];
        v86 = *(int ***)(a1 + 3872);
        v87 = sub_20B947D18();
        sub_20B961F8C(v86, a2, (void *)*v87, v87[1], v80, v82, v80, v82, 0.0, v85, v85, 0, 0, v77, 0, 67, 2, v76);
        v78 += 24;
      }
    }
    if (**(_BYTE **)(a1 + 1032))
      sub_20B8932E4((int ***)(a1 + 3920), a2, *(_QWORD *)(*(_QWORD *)(a1 + 176) + 280), (uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 176) + 288) - *(_QWORD *)(*(_QWORD *)(a1 + 176) + 280)) >> 1);
  }
  sub_20B8FE3D4(a2);
  sub_20B8FED50((uint64_t)a2, 0xCu, (uint64_t)"## Final ##", 0, 1u);
  v88 = *((_QWORD *)a2 + 6);
  v89 = *((_QWORD *)a2 + 7);
  v90 = v89 - v88;
  if (v89 != v88)
  {
    v91 = 0;
    v92 = v90 >> 3;
    if (v92 <= 1)
      v92 = 1;
    do
    {
      v93 = *(_QWORD *)(v88 + 8 * v91++);
      *(_QWORD *)(v93 + 8) = v91;
    }
    while (v92 != v91);
    v94 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    *(_QWORD *)__dst = Mutable;
    (*(void (**)(_QWORD, CFMutableDictionaryRef, _QWORD, _QWORD))(**(_QWORD **)(a1 + 3936) + 16))(*(_QWORD *)(a1 + 3936), Mutable, 0, 0);
    if ((*(_DWORD *)(a1 + 184) & 0x20) != 0)
      v96 = "ja-Romaji";
    else
      v96 = "ja-Kana";
    v97 = CFStringCreateWithCString(v94, v96, 0x8000100u);
    v108 = (__CFString *)v97;
    sub_20B90C8E8(*(_QWORD *)(a1 + 3928), CFSTR("ja"), (uint64_t)v97, (uint64_t)Mutable);
    if (v97)
      CFRelease(v97);
    if (Mutable)
      CFRelease(Mutable);
  }
  v98 = sub_20B9A7C5C(0xDu);
  if (spid - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v99 = v98;
    if (os_signpost_enabled(v98))
    {
      *(_WORD *)__dst = 0;
      _os_signpost_emit_with_name_impl(&dword_20B7F7000, v99, OS_SIGNPOST_INTERVAL_END, spid, "MecabraPredictionAnalyzeWithContext", (const char *)&unk_20BA9505F, __dst, 2u);
    }
  }
  sub_20B84055C((uint64_t)v115);
}

void sub_20B8C95D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  __cxa_guard_abort(&qword_25472B3A8);
  sub_20B84055C(a14);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8C97AC(uint64_t a1, __int128 *a2, unint64_t a3)
{
  uint64_t v4;

  *(_QWORD *)(a1 + 16) = 0;
  v4 = a1 + 16;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  if (a3)
  {
    sub_20B828D20((_QWORD *)a1, a3);
    *(_QWORD *)(a1 + 8) = sub_20B8CD844(v4, a2, (__int128 *)((char *)a2 + 24 * a3), *(char **)(a1 + 8));
  }
  return a1;
}

void sub_20B8C9828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_20B83AFD0(&a9);
  _Unwind_Resume(a1);
}

void **sub_20B8C9848(void **a1)
{
  void **v3;

  v3 = a1;
  sub_20B83AFD0(&v3);
  return a1;
}

void sub_20B8C987C(uint64_t a1, _QWORD **a2, int a3, _BYTE *a4)
{
  _QWORD **v4;
  uint64_t v6;
  _DWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  const void **v11;
  char *v12;
  float v13;
  int v14;
  char *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t **v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  __int16 *v27;
  int v28;
  int v29;
  int v30;
  float v31;
  int v32;
  float v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  char *v38;
  _QWORD v42[3];
  _QWORD *v43;
  uint64_t v44;

  v4 = a2;
  v44 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *a2;
  if (*((char *)*a2 + 119) < 0)
  {
    v8 = (char *)*((_QWORD *)v7 + 12);
    v9 = *((unsigned __int16 *)v7 + 52);
  }
  else
  {
    v8 = (char *)(v7 + 24);
    v9 = *((unsigned __int8 *)*a2 + 119);
  }
  if (v8)
    v10 = v9;
  else
    v10 = 0;
  v11 = *(const void ***)(a1 + 40);
  v12 = (char *)v11[1];
  v13 = 0.0;
  if (v12)
  {
    v14 = 2 * (_DWORD)v12;
    if (2 * (uint64_t)v12 > (unint64_t)(2 * v10))
      goto LABEL_33;
    v15 = (char *)*v11;
    v16 = (*(_DWORD *)(v6 + 184) >> 6) & 8 | *(_DWORD *)(v6 + 184) & 0x20 | (*(_DWORD *)(v6 + 184) >> 4) & 0x10 | ((char)*(_DWORD *)(v6 + 184) >> 7) & 6;
    if (v16)
    {
      if (v14 >= 2)
      {
        v17 = 0;
        v18 = (v14 - 1);
        v38 = (char *)*v11;
        do
        {
          v19 = *(unsigned __int16 *)&v8[v17];
          v20 = *(unsigned __int16 *)&v15[v17];
          if (v19 != v20)
          {
            if (v17 == 2 * (_DWORD)v12)
              goto LABEL_33;
            v21 = v18;
            v22 = sub_20BA0225C(v20, v16);
            v18 = v21;
            v15 = v38;
            v4 = a2;
            if (!v22)
              goto LABEL_33;
            v23 = *v22;
            v24 = (char *)v22[1] - (char *)*v22;
            if (!v24)
              goto LABEL_33;
            v25 = v24 >> 1;
            if (v25 <= 1)
              v25 = 1;
            while (1)
            {
              v26 = *(unsigned __int16 *)v23;
              v23 = (uint64_t *)((char *)v23 + 2);
              if (v19 == v26)
                break;
              if (!--v25)
                goto LABEL_33;
            }
            v13 = v13 + -1.0;
          }
          v17 += 2;
        }
        while ((int)v18 > (int)v17);
      }
    }
    else if (memcmp(*v11, v8, 2 * (int)v12))
    {
      goto LABEL_33;
    }
  }
  v27 = *(__int16 **)(v6 + 1032);
  if ((int)v10 - (int)v12 <= 0)
    v28 = 0;
  else
    v28 = v27[240] + v27[240] * (v10 - (_DWORD)v12);
  v29 = (int)(float)-(float)(v13 * (float)v27[222]);
  v30 = v27[238];
  v31 = (float)-v27[239];
  v32 = *(_DWORD *)(a1 + 56);
  v33 = log2f((float)(unsigned __int16)a3 / 100.0);
  (*(void (**)(_DWORD *, _QWORD))(*(_QWORD *)v7 + 480))(v7, (v28 - a3 + v30 + v32 + v29 + (int)(float)(v33 * v31)));
  v7[55] = (int)(float)((float)v28 + (float)((float)v29 * *(float *)(*(_QWORD *)(v6 + 1032) + 448)));
  (*(void (**)(_QWORD, uint64_t, const char *, uint64_t))(**v4 + 528))(*v4, 10, "[MJ:searchPhrasesByPosContext]", 1);
  v34 = *(_QWORD **)(a1 + 48);
  v42[0] = &unk_24C459188;
  v43 = v42;
  sub_20B8FDA94(v34, v4, 1, 0, (uint64_t)v42);
  v35 = v43;
  if (v43 == v42)
  {
    v36 = 4;
    v35 = v42;
  }
  else
  {
    if (!v43)
      goto LABEL_33;
    v36 = 5;
  }
  (*(void (**)(void))(*v35 + 8 * v36))();
LABEL_33:
  std::mutex::lock((std::mutex *)(v6 + 880));
  v37 = *(_DWORD *)(v6 + 944);
  std::mutex::unlock((std::mutex *)(v6 + 880));
  if (v37 == 2)
    *a4 = 1;
}

void sub_20B8C9B74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;

  v19 = a17;
  if (a17 == v17)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B8C9BB4(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = (_QWORD *)operator new();
  *v10 = *a2;
  v10[1] = a3;
  v10[2] = a4;
  v10[3] = a5;
  result = (_QWORD *)operator new();
  *result = a4;
  v10[4] = result;
  *a1 = v10;
  return result;
}

void sub_20B8C9C3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x70C4078CD869ELL);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8C9C60(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;

  v6 = operator new();
  result = sub_20B9FCDC0(v6, a2, a3);
  *a1 = v6;
  return result;
}

void sub_20B8C9CB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x1072C40A60B4CADLL);
  _Unwind_Resume(a1);
}

void sub_20B8C9CDC(CFURLRef url@<X0>, CFStringRef pathComponent@<X1>, CFURLRef *a3@<X8>)
{
  CFURLRef v4;
  CFTypeRef cf[2];

  v4 = CFURLCreateCopyAppendingPathComponent(0, url, pathComponent, 0);
  cf[0] = 0;
  cf[1] = v4;
  if (CFURLResourceIsReachable(v4, (CFErrorRef *)cf))
  {
    *a3 = v4;
  }
  else
  {
    if (cf[0])
      CFRelease(cf[0]);
    *a3 = 0;
    if (v4)
      CFRelease(v4);
  }
}

void sub_20B8C9D50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B876164((const void **)va, 0);
  _Unwind_Resume(a1);
}

void sub_20B8C9D68(int a1, uint64_t a2, int a3, int a4, CFDictionaryRef theDict)
{
  const void *Value;
  CFTypeID v7;
  uint64_t v9;

  if (a2 && theDict)
  {
    Value = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x24BE5EE90]);
    v7 = CFGetTypeID(Value);
    if (v7 == CFBooleanGetTypeID() && Value == (const void *)*MEMORY[0x24BDBD270])
    {
      v9 = *(_QWORD *)(a2 + 1168);
      if (v9)
        sub_20BA2F204(v9);
      if (*(_QWORD *)(a2 + 1064))
        sub_20B8C71C4(a2);
    }
  }
}

uint64_t sub_20B8C9DF8(uint64_t a1, const void *a2)
{
  uint64_t v4;

  v4 = operator new();
  sub_20B9792A0(v4, *(_QWORD *)(a1 + 192), a1 + 264, *(_QWORD *)(a1 + 1048), a1 + 1200, a1 + 184, a2);
  return v4;
}

void sub_20B8C9E5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10F1C402A87D216);
  _Unwind_Resume(a1);
}

BOOL sub_20B8C9E80(uint64_t a1, uint64_t a2, const __CFArray *a3)
{
  return sub_20B97ED0C(*(_QWORD *)(a1 + 176), a2, a3, 0, 0);
}

BOOL sub_20B8C9E90(uint64_t a1, uint64_t a2, const __CFArray *a3, double a4)
{
  double v5;

  v5 = a4;
  return sub_20B97ED0C(*(_QWORD *)(a1 + 176), a2, a3, 0, (uint64_t)&v5);
}

void sub_20B8C9EBC(uint64_t a1, uint64_t a2, CFStringRef theString, double a4)
{
  uint64_t v4;
  _QWORD v5[7];

  v4 = *(_QWORD *)(a1 + 1048);
  v5[0] = MEMORY[0x24BDAC760];
  v5[1] = 0x40000000;
  v5[2] = sub_20B8C9F20;
  v5[3] = &unk_24C49BCA8;
  v5[4] = a1;
  v5[5] = a2;
  *(double *)&v5[6] = a4;
  sub_20B96DC20(v4, theString, (uint64_t)v5);
}

void sub_20B8C9F20(_QWORD *a1, CFStringRef theString)
{
  uint64_t v4;
  CFIndex Length;
  CFIndex v6;
  CFIndex v7;
  UChar32 CharacterAtIndex;
  __CFArray *v9;
  __CFArray *v10;
  uint64_t v11;
  uint64_t v12;

  if (theString)
  {
    v4 = a1[4];
    Length = CFStringGetLength(theString);
    if (Length < 1)
    {
LABEL_7:
      v9 = sub_20B96DED4(*(_QWORD *)(v4 + 1048), theString);
      if (v9)
      {
        v10 = v9;
        v11 = a1[5];
        v12 = a1[6];
        sub_20B97ED0C(*(_QWORD *)(v4 + 176), v11, v9, 0, (uint64_t)&v12);
        CFRelease(v10);
      }
    }
    else
    {
      v6 = Length;
      v7 = 0;
      while (1)
      {
        CharacterAtIndex = CFStringGetCharacterAtIndex(theString, v7);
        if (!u_isgraph(CharacterAtIndex) || u_isdigit(CharacterAtIndex))
          break;
        if (v6 == ++v7)
          goto LABEL_7;
      }
    }
  }
}

void sub_20B8C9FE4(uint64_t a1, const void *a2)
{
  std::mutex *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a2)
  {
    v4 = (std::mutex *)(a1 + 720);
    std::mutex::lock((std::mutex *)(a1 + 720));
    v5 = operator new();
    *(_OWORD *)(v5 + 72) = 0u;
    *(_OWORD *)(v5 + 56) = 0u;
    *(_OWORD *)(v5 + 40) = 0u;
    *(_OWORD *)(v5 + 24) = 0u;
    *(_OWORD *)(v5 + 8) = 0u;
    *(_DWORD *)(v5 + 88) = 1065353216;
    *(_WORD *)(v5 + 96) = 0;
    *(_QWORD *)(v5 + 104) = 0;
    *(_DWORD *)(v5 + 112) = 2;
    *(_QWORD *)(v5 + 120) = 0;
    *(_QWORD *)v5 = &unk_24C462BE8;
    v6 = *(_QWORD *)(a1 + 784);
    *(_QWORD *)(a1 + 784) = v5;
    if (!v6 || ((*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6), (v5 = *(_QWORD *)(a1 + 784)) != 0))
      sub_20B8F4AC4(v5, a2, *(unsigned __int8 *)(a1 + 229));
    v7 = *(_QWORD *)(a1 + 192);
    if (v7)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 200))(v7, *(_QWORD *)(a1 + 784));
    std::mutex::unlock(v4);
  }
}

void sub_20B8CA0D4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20B8CA0EC(uint64_t a1, const void *a2)
{
  std::mutex *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a2)
  {
    v4 = (std::mutex *)(a1 + 720);
    std::mutex::lock((std::mutex *)(a1 + 720));
    v5 = operator new();
    *(_OWORD *)(v5 + 72) = 0u;
    *(_OWORD *)(v5 + 56) = 0u;
    *(_OWORD *)(v5 + 40) = 0u;
    *(_OWORD *)(v5 + 24) = 0u;
    *(_OWORD *)(v5 + 8) = 0u;
    *(_DWORD *)(v5 + 88) = 1065353216;
    *(_WORD *)(v5 + 96) = 0;
    *(_QWORD *)(v5 + 104) = 0;
    *(_DWORD *)(v5 + 112) = 1;
    *(_QWORD *)(v5 + 120) = 0;
    *(_QWORD *)v5 = &unk_24C462BE8;
    v6 = *(_QWORD *)(a1 + 792);
    *(_QWORD *)(a1 + 792) = v5;
    if (!v6 || ((*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6), (v5 = *(_QWORD *)(a1 + 792)) != 0))
      sub_20B8F4AC4(v5, a2, *(unsigned __int8 *)(a1 + 229));
    v7 = *(_QWORD *)(a1 + 192);
    if (v7)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 192))(v7, *(_QWORD *)(a1 + 792));
    std::mutex::unlock(v4);
  }
}

void sub_20B8CA1DC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20B8CA1F4(uint64_t a1, const void *a2)
{
  std::mutex *v4;
  uint64_t v5;
  uint64_t v6;

  if (a2)
  {
    v4 = (std::mutex *)(a1 + 720);
    std::mutex::lock((std::mutex *)(a1 + 720));
    v5 = operator new();
    *(_OWORD *)(v5 + 72) = 0u;
    *(_OWORD *)(v5 + 56) = 0u;
    *(_OWORD *)(v5 + 40) = 0u;
    *(_OWORD *)(v5 + 24) = 0u;
    *(_OWORD *)(v5 + 8) = 0u;
    *(_DWORD *)(v5 + 88) = 1065353216;
    *(_WORD *)(v5 + 96) = 0;
    *(_QWORD *)(v5 + 104) = 0;
    *(_DWORD *)(v5 + 112) = 3;
    *(_QWORD *)(v5 + 120) = 0;
    *(_QWORD *)v5 = &unk_24C462BE8;
    v6 = *(_QWORD *)(a1 + 800);
    *(_QWORD *)(a1 + 800) = v5;
    if (!v6 || ((*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6), (v5 = *(_QWORD *)(a1 + 800)) != 0))
      sub_20B8F4AC4(v5, a2, *(unsigned __int8 *)(a1 + 229));
    std::mutex::unlock(v4);
  }
}

void sub_20B8CA2CC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8CA2E4(uint64_t a1)
{
  _QWORD *v2;
  unsigned int v3;

  if (*(_QWORD *)(a1 + 1168))
    LMLanguageModelFlushDynamicData();
  v2 = *(_QWORD **)(a1 + 176);
  if (v2)
    v3 = sub_20B97F858(v2);
  else
    v3 = 1;
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 192) + 112))(*(_QWORD *)(a1 + 192)))
    return v3;
  else
    return 0;
}

uint64_t sub_20B8CA344(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 176);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 88))(v2);
  LMLanguageModelResetDynamicData();
  sub_20B9670A4(**(uint64_t ***)(a1 + 3880));
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 192) + 72))(*(_QWORD *)(a1 + 192));
}

void sub_20B8CA39C(uint64_t a1)
{
  const __CFString *v2;
  const __CFURL *v3;
  uint64_t v4;

  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 192) + 232))(*(_QWORD *)(a1 + 192)) & 1) == 0
    && !*(_BYTE *)(a1 + 1193))
  {
    v2 = sub_20B9AF1E8("ja");
    if (v2)
    {
      v3 = (const __CFURL *)v2;
      sub_20B8CA434((int)v2, (CFURLRef)v2);
      sub_20B8CA4B8(v4, v3);
      *(_BYTE *)(a1 + 1193) = 1;
      CFRelease(v3);
    }
  }
}

void sub_20B8CA41C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B876164((const void **)va, 0);
  _Unwind_Resume(a1);
}

void sub_20B8CA434(int a1, CFURLRef url)
{
  void *__p;
  char v3;
  UInt8 buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  if (CFURLGetFileSystemRepresentation(url, 1u, buffer, 1024))
  {
    sub_20B80BBD0(&__p, (char *)buffer);
    if (v3 < 0)
      operator delete(__p);
  }
}

void sub_20B8CA4B8(uint64_t a1, const __CFURL *a2)
{
  const __CFURL *v2;
  char v3;
  uint64_t v4;
  char v5;
  CFURLRef v6;
  CFURLRef url[2];
  _QWORD v8[2];
  UInt8 buffer[1024];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v2 = CFURLCreateCopyAppendingPathComponent(0, a2, off_254728288, 1u);
  v3 = 0;
  v4 = 0;
  url[1] = v2;
  v8[0] = off_254728290;
  v8[1] = off_2547282A0;
  do
  {
    v5 = v3;
    sub_20B8C9CDC(v2, (CFStringRef)v8[v4], url);
    v6 = url[0];
    if (url[0])
    {
      CFURLGetFileSystemRepresentation(url[0], 1u, buffer, 1024);
      CFRelease(v6);
    }
    v3 = 1;
    v4 = 1;
  }
  while ((v5 & 1) == 0);
  if (v2)
    CFRelease(v2);
}

void sub_20B8CA5AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14)
{
  if (a2)
    sub_20B854468(exception_object);
  _Unwind_Resume(exception_object);
}

std::string::size_type sub_20B8CA5F0(uint64_t a1, CFStringRef theString, const __CFString *a3, int a4, int a5)
{
  unsigned __int8 v10;
  void **v11;
  uint64_t v12;
  NSObject *v13;
  CFMutableStringRef MutableCopy;
  int CharacterAtIndex;
  NSObject *v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  void *v20;
  unint64_t v21;
  unint64_t v22;
  void *p_p;
  NSObject *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  _BYTE *v29;
  unsigned __int16 *v30;
  _BYTE *v31;
  uint64_t v32;
  int v33;
  int v34;
  const __CFString *v36;
  NSObject *v37;
  std::string::size_type v38;
  NSObject *v40;
  const __CFString *v41;
  CFIndex Length;
  std::string *v43;
  std::string *v44;
  std::string *v45;
  void *v46;
  unint64_t v47;
  void *__p;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  void *v53;
  _BYTE *v54;
  CFMutableStringRef v55;
  void *v56[2];
  unsigned __int8 v57;
  std::string buf;
  uint8_t v59[4];
  std::string *v60;
  std::string chars;
  int v62;
  __int16 v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  if (!theString || !CFStringGetLength(theString))
    return 0;
  sub_20B8D09C0(theString, v56);
  v10 = v57;
  if ((v57 & 0x80u) == 0)
    v11 = v56;
  else
    v11 = (void **)v56[0];
  if ((v57 & 0x80u) == 0)
    v12 = v57;
  else
    v12 = (uint64_t)v56[1];
  if (sub_20B8DBCA0(v11, v12))
  {
    v13 = sub_20B9A7C5C(4u);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      v41 = CFSTR("$");
      LODWORD(chars.__r_.__value_.__l.__data_) = 138413058;
      if (a3)
        v41 = a3;
      *(std::string::size_type *)((char *)chars.__r_.__value_.__r.__words + 4) = (std::string::size_type)theString;
      WORD2(chars.__r_.__value_.__r.__words[1]) = 2112;
      *(std::string::size_type *)((char *)&chars.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v41;
      HIWORD(chars.__r_.__value_.__r.__words[2]) = 1024;
      v62 = a4;
      v63 = 1024;
      v64 = a5;
      _os_log_debug_impl(&dword_20B7F7000, v13, OS_LOG_TYPE_DEBUG, "[MJ::createCandidateFromContextString] string:%@|%@ isRightContext:%d allowSynthetic:%d", (uint8_t *)&chars, 0x22u);
    }
    MutableCopy = CFStringCreateMutableCopy(0, 0, theString);
    v55 = MutableCopy;
    if (a3)
    {
      if (CFStringGetLength(a3) >= 1)
      {
        CharacterAtIndex = CFStringGetCharacterAtIndex(a3, 0);
        if ((CharacterAtIndex - 12353) < 0x56 || CharacterAtIndex == 12540 || CharacterAtIndex == 12316)
        {
          LOWORD(chars.__r_.__value_.__l.__data_) = 0;
          LOWORD(chars.__r_.__value_.__l.__data_) = CFStringGetCharacterAtIndex(a3, 0);
          CFStringAppendCharacters(MutableCopy, (const UniChar *)&chars, 1);
        }
      }
    }
    v16 = sub_20B9A7C5C(4u);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(chars.__r_.__value_.__l.__data_) = 138412290;
      *(std::string::size_type *)((char *)chars.__r_.__value_.__r.__words + 4) = (std::string::size_type)MutableCopy;
      _os_log_debug_impl(&dword_20B7F7000, v16, OS_LOG_TYPE_DEBUG, "[MJ::createCandidateFromContextString] \bmergedString:%@", (uint8_t *)&chars, 0xCu);
    }
    sub_20B8D0790(MutableCopy, (UniChar **)&v53);
    sub_20BA20F24(*(_QWORD *)(a1 + 192), (uint64_t)v53, (v54 - (_BYTE *)v53) >> 1, 1u, &v51);
    v18 = v51;
    v17 = v52;
    if (v51 == v52)
    {
      v38 = 0;
    }
    else
    {
      __p = 0;
      v49 = 0;
      v50 = 0;
      do
      {
        v19 = *(char *)(v18 + 23);
        if (v19 >= 0)
          v20 = (void *)v18;
        else
          v20 = *(void **)v18;
        if (v19 >= 0)
          v21 = *(unsigned __int8 *)(v18 + 23);
        else
          v21 = *(_QWORD *)(v18 + 8);
        sub_20B88DACC((uint64_t)&__p, v20, v21);
        v18 += 64;
      }
      while (v18 != v17);
      v22 = HIBYTE(v50);
      p_p = &__p;
      if (v50 < 0)
      {
        p_p = __p;
        v22 = v49;
      }
      v46 = p_p;
      v47 = v22;
      v24 = sub_20B9A7C5C(4u);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
      {
        sub_20B8D15F4(v46, v47, &chars);
        v43 = (chars.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &chars
            : (std::string *)chars.__r_.__value_.__r.__words[0];
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v43;
        _os_log_debug_impl(&dword_20B7F7000, v24, OS_LOG_TYPE_DEBUG, "[MJ::createCandidateFromContextString] Reverse-analyzing %s", (uint8_t *)&buf, 0xCu);
        if (SHIBYTE(chars.__r_.__value_.__r.__words[2]) < 0)
          operator delete(chars.__r_.__value_.__l.__data_);
      }
      sub_20B95EBFC(a1, (uint64_t)&v46, 0x40003uLL, (uint64_t)&chars);
      sub_20B8FED50((uint64_t)&chars, 0xCu, (uint64_t)"[reanalysis]", 0, 0);
      v25 = v65;
      if (v66 == v65)
      {
LABEL_47:
        if (a5)
        {
          v37 = sub_20B9A7C5C(4u);
          if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
          {
            sub_20B8D15F4(v46, v47, &buf);
            v44 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? &buf
                : (std::string *)buf.__r_.__value_.__r.__words[0];
            *(_DWORD *)v59 = 136315138;
            v60 = v44;
            _os_log_debug_impl(&dword_20B7F7000, v37, OS_LOG_TYPE_DEBUG, "[MJ::createCandidateFromContextString] Reverse-analysis from %s failed. Returning a synthetic candidate with an empty analysis string.", v59, 0xCu);
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
              operator delete(buf.__r_.__value_.__l.__data_);
          }
          v38 = operator new();
          sub_20B9126D8(v38, theString, &stru_24C4B3660, 1);
        }
        else
        {
          v40 = sub_20B9A7C5C(4u);
          if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
          {
            sub_20B8D15F4(v46, v47, &buf);
            v45 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? &buf
                : (std::string *)buf.__r_.__value_.__r.__words[0];
            *(_DWORD *)v59 = 136315138;
            v60 = v45;
            _os_log_debug_impl(&dword_20B7F7000, v40, OS_LOG_TYPE_DEBUG, "[MJ::createCandidateFromContextString] Reverse-analysis from %s failed. Returning nullptr.", v59, 0xCu);
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
              operator delete(buf.__r_.__value_.__l.__data_);
          }
          v38 = 0;
        }
      }
      else
      {
        v26 = 0;
        while (1)
        {
          v27 = *(_QWORD *)(v25 + 8 * v26);
          if (v27)
          {
            v28 = __dynamic_cast(*(const void **)(v25 + 8 * v26), (const struct __class_type_info *)&unk_24C45C148, (const struct __class_type_info *)&unk_24C45C5C8, 0);
            if (v28)
            {
              v29 = v28;
              v30 = (unsigned __int16 *)v53;
              v31 = v54;
              if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v28 + 408))(v28) != 1)
              {
                if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v29 + 96))(v29) != 83 || !v29[224])
                  goto LABEL_45;
                v32 = 0;
                v33 = v30[((v31 - (_BYTE *)v30) >> 1) - 1];
                do
                  v34 = (unsigned __int16)word_20BA43A30[v32];
                while (v33 != v34 && v32++ != 7);
                if (v33 != v34)
                {
LABEL_45:
                  v36 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 24))(v27);
                  if (CFStringCompare(v36, MutableCopy, 0) == kCFCompareEqualTo)
                    break;
                }
              }
            }
          }
          ++v26;
          v25 = v65;
          if (v26 >= (v66 - v65) >> 3)
            goto LABEL_47;
        }
        Length = CFStringGetLength(MutableCopy);
        if (Length == CFStringGetLength(theString) + 1)
        {
          v38 = (std::string::size_type)sub_20B92A280(a1 + 1200, v29);
        }
        else
        {
          sub_20B8FEA7C(&chars, v26, &buf);
          v38 = buf.__r_.__value_.__r.__words[0];
        }
      }
      chars.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C460D28;
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v65;
      sub_20B882410((void ***)&buf);
      sub_20B84055C((uint64_t)&chars.__r_.__value_.__l.__size_);
      if (SHIBYTE(v50) < 0)
        operator delete(__p);
    }
    chars.__r_.__value_.__r.__words[0] = (std::string::size_type)&v51;
    sub_20B8CD7B8((void ***)&chars);
    if (v53)
    {
      v54 = v53;
      operator delete(v53);
    }
    if (MutableCopy)
      CFRelease(MutableCopy);
    if ((v57 & 0x80) != 0)
      goto LABEL_64;
  }
  else
  {
    v38 = 0;
    if ((v10 & 0x80) != 0)
LABEL_64:
      operator delete(v56[0]);
  }
  return v38;
}

void sub_20B8CAC7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,const void *a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  sub_20B881268(v32 - 176);
  if (a19 < 0)
    operator delete(__p);
  *(_QWORD *)(v32 - 176) = &a20;
  sub_20B8CD7B8((void ***)(v32 - 176));
  if (a23)
  {
    a24 = (uint64_t)a23;
    operator delete(a23);
  }
  sub_20B8A89DC(&a26, 0);
  if (a32 < 0)
    operator delete(a27);
  _Unwind_Resume(a1);
}

CFMutableArrayRef sub_20B8CAD74(uint64_t a1, const __CFString *a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  int v11;
  uint64_t v12;
  int v13;
  void *v14;
  unint64_t v15;
  uint64_t v16;
  const UniChar *v17;
  CFIndex v18;
  CFStringRef v19;
  _QWORD *v20;
  const UniChar *p_p;
  CFIndex v22;
  CFStringRef v23;
  CFMutableArrayRef v24;
  void *__p;
  CFIndex v27;
  uint64_t v28;
  CFMutableArrayRef theArray;
  unint64_t v30;
  uint64_t v31;
  void *v32;
  _BYTE *v33;

  sub_20B8D0790(a2, (UniChar **)&v32);
  sub_20BA20F24(*(_QWORD *)(a1 + 192), (uint64_t)v32, (v33 - (_BYTE *)v32) >> 1, 2u, &v30);
  if (v30 == v31)
  {
    v24 = 0;
  }
  else
  {
    v28 = 0;
    theArray = CFArrayCreateMutable(0, (uint64_t)(v31 - v30) >> 6, MEMORY[0x24BDBD690]);
    __p = 0;
    v27 = 0;
    v3 = v30;
    if (v31 != v30)
    {
      v4 = 0;
      v5 = 0;
      v6 = 0;
      v7 = (uint64_t)(v31 - v30) >> 6;
      v8 = 118;
      do
      {
        v9 = v3 + v8;
        if (v5 == v7 - 1 || (*(_DWORD *)(v9 - 94) != -1 ? (v10 = *(_DWORD *)(v9 - 30) == -1) : (v10 = 1), v10))
          v11 = 1;
        else
          v11 = sub_20B8B252C(*(_QWORD *)(a1 + 1040), *(unsigned __int16 *)(v9 - 62), *(unsigned __int16 *)(v3 + v8));
        v12 = *(unsigned __int16 *)(v9 - 68);
        v13 = *(char *)(v9 - 95);
        if (v13 >= 0)
          v14 = (void *)(v9 - 118);
        else
          v14 = *(void **)(v9 - 118);
        if (v13 >= 0)
          v15 = *(unsigned __int8 *)(v9 - 95);
        else
          v15 = *(_QWORD *)(v9 - 110);
        sub_20B88DACC((uint64_t)&__p, v14, v15);
        if (*(char *)(v9 - 95) < 0)
          v16 = *(_QWORD *)(v9 - 110);
        else
          v16 = *(unsigned __int8 *)(v9 - 95);
        v6 += v12;
        if (v16 && v4 != -1 && v6 && ((v11 ^ 1) & 1) == 0)
        {
          v17 = v28 >= 0 ? (const UniChar *)&__p : (const UniChar *)__p;
          v18 = v28 >= 0 ? HIBYTE(v28) : v27;
          v19 = CFStringCreateWithCharacters(0, v17, v18);
          if (v19)
          {
            v20 = sub_20B891818((uint64_t)v19, v4, v6);
            if (v20)
            {
              CFArrayAppendValue(theArray, v20);
              CFRelease(v20);
            }
            if (SHIBYTE(v28) < 0)
            {
              *(_WORD *)__p = 0;
              v27 = 0;
            }
            else
            {
              LOWORD(__p) = 0;
              HIBYTE(v28) = 0;
            }
            v4 += v6;
            v6 = 0;
          }
        }
        ++v5;
        v3 = v30;
        v7 = (uint64_t)(v31 - v30) >> 6;
        v8 += 64;
      }
      while (v5 < v7);
      if (v6 > 0)
      {
        if (v28 >= 0)
          p_p = (const UniChar *)&__p;
        else
          p_p = (const UniChar *)__p;
        if (v28 >= 0)
          v22 = HIBYTE(v28);
        else
          v22 = v27;
        v23 = CFStringCreateWithCharacters(0, p_p, v22);
        sub_20B891818((uint64_t)v23, v4, v6);
      }
    }
    v24 = theArray;
    if (SHIBYTE(v28) < 0)
      operator delete(__p);
  }
  __p = &v30;
  sub_20B8CD7B8((void ***)&__p);
  if (v32)
  {
    v33 = v32;
    operator delete(v32);
  }
  return v24;
}

void sub_20B8CAFDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, __int16 *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, const void *a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  sub_20B87E150(&a10, 0);
  if (a16 < 0)
    operator delete(__p);
  sub_20B8B035C(&a17, 0);
  __p = &a18;
  sub_20B8CD7B8((void ***)&__p);
  if (a23)
  {
    a24 = (uint64_t)a23;
    operator delete(a23);
  }
  _Unwind_Resume(a1);
}

void sub_20B8CB054(uint64_t a1, _QWORD *a2)
{
  void **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  BOOL v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const void *v39;
  unint64_t v40;
  unint64_t v41;
  const void *v42;
  unint64_t v43;
  char *v44;
  _QWORD *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  NSObject *v54;
  uint64_t *j;
  uint64_t *v56;
  uint64_t v57;
  NSObject *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  unint64_t *v71;
  unint64_t v72;
  NSObject *v73;
  _BOOL4 v74;
  char *v75;
  char *v76;
  uint64_t v77;
  NSObject *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  void *v83;
  char *v84;
  char *v85;
  void **v86;
  uint8_t buf[4];
  uint64_t v88;
  __int128 __p;
  _QWORD v90[2];

  v90[1] = *MEMORY[0x24BDAC8D0];
  sub_20B8FED50((uint64_t)a2, 0xCu, (uint64_t)"## Before reranking ##", 0, 1u);
  if (*(_BYTE *)(a1 + 228) && *(_QWORD *)(a1 + 1168))
  {
    (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(a1 + 3832) + 16))(*(_QWORD *)(a1 + 3832), a2, *(_QWORD *)(a1 + 176) + 248);
    v83 = &unk_24C469588;
    v84 = (char *)sub_20B8FF3A4;
    v86 = &v83;
    sub_20B8FDD20(a2, (uint64_t)&v83);
  }
  else
  {
    v83 = &unk_24C469588;
    v84 = (char *)sub_20B8FEF70;
    v86 = &v83;
    sub_20B8FDD20(a2, (uint64_t)&v83);
  }
  v4 = v86;
  if (v86 == &v83)
  {
    v5 = 4;
    v4 = &v83;
    goto LABEL_9;
  }
  if (v86)
  {
    v5 = 5;
LABEL_9:
    (*((void (**)(void))*v4 + v5))();
  }
  v6 = *(_QWORD *)(a1 + 1032);
  if (*(_BYTE *)v6 && a2[7] - a2[6] >= 0x10uLL)
  {
    v83 = 0;
    v84 = 0;
    v85 = 0;
    sub_20B82D5C8(&v83, *(unsigned __int16 *)(v6 + 404) + (unint64_t)*(unsigned __int16 *)(v6 + 416));
    if ((unint64_t)((uint64_t)(a2[7] - a2[6]) >> 3) >= 8)
      v7 = 8;
    else
      v7 = (uint64_t)(a2[7] - a2[6]) >> 3;
    if (v7)
    {
      for (i = 0; i != v7; ++i)
      {
        v9 = *(_QWORD *)(a2[6] + 8 * i);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 96))(v9) == 76
          || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 96))(v9) == 74)
        {
          v10 = v84;
          if (v84 >= v85)
          {
            v12 = (char *)v83;
            v13 = (v84 - (_BYTE *)v83) >> 3;
            v14 = v13 + 1;
            if ((unint64_t)(v13 + 1) >> 61)
              sub_20B80CDD8();
            v15 = v85 - (_BYTE *)v83;
            if ((v85 - (_BYTE *)v83) >> 2 > v14)
              v14 = v15 >> 2;
            if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
              v16 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v16 = v14;
            if (v16)
            {
              v17 = (char *)sub_20B800BE8((uint64_t)&v85, v16);
              v12 = (char *)v83;
              v10 = v84;
            }
            else
            {
              v17 = 0;
            }
            v18 = &v17[8 * v13];
            *(_QWORD *)v18 = i;
            v11 = v18 + 8;
            while (v10 != v12)
            {
              v19 = *((_QWORD *)v10 - 1);
              v10 -= 8;
              *((_QWORD *)v18 - 1) = v19;
              v18 -= 8;
            }
            v83 = v18;
            v84 = v11;
            v85 = &v17[8 * v16];
            if (v12)
              operator delete(v12);
          }
          else
          {
            *(_QWORD *)v84 = i;
            v11 = v10 + 8;
          }
          v84 = v11;
        }
      }
    }
    v20 = (char *)v83;
    if ((unint64_t)(v84 - (_BYTE *)v83) >= 0x10)
    {
      v21 = (v84 - (_BYTE *)v83) >> 3;
      if (v83 != v84)
      {
        v22 = v84 - 8;
        if (v84 - 8 > v83)
        {
          v23 = (char *)v83 + 8;
          do
          {
            v24 = *((_QWORD *)v23 - 1);
            *((_QWORD *)v23 - 1) = *(_QWORD *)v22;
            *(_QWORD *)v22 = v24;
            v22 -= 8;
            v25 = v23 >= v22;
            v23 += 8;
          }
          while (!v25);
        }
      }
      __p = 0uLL;
      v90[0] = 0;
      sub_20B82D5C8((void **)&__p, v21);
      v26 = (char *)v83;
      v81 = a1;
      v82 = v84;
      if (v83 != v84)
      {
        do
        {
          v27 = *(_QWORD *)v26;
          v28 = *(_QWORD *)(a2[6] + 8 * *(_QWORD *)v26);
          v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 48))(v28);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v28 + 96))(v28) != 74)
          {
            v31 = (char *)v83;
            v30 = v84;
            while (v31 != v30)
            {
              if (*(_QWORD *)v31 != v27)
              {
                v32 = *(_QWORD *)(a2[6] + 8 * *(_QWORD *)v31);
                v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 48))(v32) - 1;
                if (v33 < v29)
                {
                  v34 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v28 + 344))(v28, 0);
                  if (v34 == (*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v32 + 344))(v32, 0))
                  {
                    v35 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v28 + 352))(v28, v33);
                    if (v35 == (*(unsigned int (**)(uint64_t, unint64_t))(*(_QWORD *)v32 + 352))(v32, v33))
                    {
                      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 544))(v28);
                      v37 = v36;
                      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 544))(v32);
                      if (v38 + v37 >= (unint64_t)*(unsigned __int16 *)(*(_QWORD *)(v81 + 1032) + 342))
                      {
                        v39 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 544))(v28);
                        v41 = v40;
                        v42 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 544))(v32);
                        if (v41 >= v43 && (v39 || !v43) && !memcmp(v39, v42, 2 * v43))
                        {
                          v44 = (char *)*((_QWORD *)&__p + 1);
                          if (*((_QWORD *)&__p + 1) >= v90[0])
                          {
                            v46 = (char *)__p;
                            v47 = (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3;
                            v48 = v47 + 1;
                            if ((unint64_t)(v47 + 1) >> 61)
                              sub_20B80CDD8();
                            v49 = v90[0] - __p;
                            if ((uint64_t)(v90[0] - __p) >> 2 > v48)
                              v48 = v49 >> 2;
                            if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
                              v50 = 0x1FFFFFFFFFFFFFFFLL;
                            else
                              v50 = v48;
                            if (v50)
                            {
                              v51 = (char *)sub_20B800BE8((uint64_t)v90, v50);
                              v44 = (char *)*((_QWORD *)&__p + 1);
                              v46 = (char *)__p;
                            }
                            else
                            {
                              v51 = 0;
                            }
                            v52 = &v51[8 * v47];
                            *(_QWORD *)v52 = v27;
                            v45 = v52 + 8;
                            while (v44 != v46)
                            {
                              v53 = *((_QWORD *)v44 - 1);
                              v44 -= 8;
                              *((_QWORD *)v52 - 1) = v53;
                              v52 -= 8;
                            }
                            *(_QWORD *)&__p = v52;
                            *((_QWORD *)&__p + 1) = v45;
                            v90[0] = &v51[8 * v50];
                            if (v46)
                              operator delete(v46);
                          }
                          else
                          {
                            **((_QWORD **)&__p + 1) = v27;
                            v45 = v44 + 8;
                          }
                          *((_QWORD *)&__p + 1) = v45;
                          break;
                        }
                      }
                    }
                  }
                }
              }
              v31 += 8;
            }
          }
          v26 += 8;
        }
        while (v26 != v82);
      }
      v54 = sub_20B9A7C5C(0xBu);
      a1 = v81;
      if (os_log_type_enabled(v54, OS_LOG_TYPE_DEBUG))
      {
        v56 = (uint64_t *)*((_QWORD *)&__p + 1);
        for (j = (uint64_t *)__p; j != v56; ++j)
        {
          v57 = *j;
          v58 = sub_20B9A7C5C(0xBu);
          if (os_log_type_enabled(v58, OS_LOG_TYPE_DEBUG))
          {
            v59 = *(_QWORD *)(a2[6] + 8 * v57);
            v60 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v59 + 24))(v59);
            *(_DWORD *)buf = 138412290;
            v88 = v60;
            _os_log_debug_impl(&dword_20B7F7000, v58, OS_LOG_TYPE_DEBUG, "Pruning %@ (excessive learning candidates)", buf, 0xCu);
          }
        }
      }
      sub_20B8FEACC(a2, (unint64_t **)&__p);
      if ((_QWORD)__p)
      {
        *((_QWORD *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
      v20 = (char *)v83;
    }
    if (v20)
    {
      v84 = v20;
      operator delete(v20);
    }
  }
  if (*(_QWORD *)(a1 + 832) != *(_QWORD *)(a1 + 824) && *(_BYTE *)(a1 + 848))
  {
    v83 = 0;
    v84 = 0;
    v85 = 0;
    v61 = a2[6];
    if (a2[7] != v61)
    {
      v62 = 0;
      do
      {
        if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v61 + 8 * v62) + 408))(*(_QWORD *)(v61 + 8 * v62)) == 1)
          break;
        if (v62 >= *(unsigned __int16 *)(*(_QWORD *)(a1 + 1032) + 310))
        {
          v63 = v84;
          if (v84 >= v85)
          {
            v65 = (char *)v83;
            v66 = (v84 - (_BYTE *)v83) >> 3;
            v67 = v66 + 1;
            if ((unint64_t)(v66 + 1) >> 61)
              sub_20B80CDD8();
            v68 = v85 - (_BYTE *)v83;
            if ((v85 - (_BYTE *)v83) >> 2 > v67)
              v67 = v68 >> 2;
            if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF8)
              v69 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v69 = v67;
            if (v69)
            {
              v70 = (char *)sub_20B800BE8((uint64_t)&v85, v69);
              v65 = (char *)v83;
              v63 = v84;
            }
            else
            {
              v70 = 0;
            }
            v71 = (unint64_t *)&v70[8 * v66];
            *v71 = v62;
            v64 = (char *)(v71 + 1);
            while (v63 != v65)
            {
              v72 = *((_QWORD *)v63 - 1);
              v63 -= 8;
              *--v71 = v72;
            }
            v83 = v71;
            v84 = v64;
            v85 = &v70[8 * v69];
            if (v65)
              operator delete(v65);
          }
          else
          {
            *(_QWORD *)v84 = v62;
            v64 = v63 + 8;
          }
          v84 = v64;
        }
        ++v62;
        v61 = a2[6];
      }
      while (v62 < (a2[7] - v61) >> 3);
    }
    v73 = sub_20B9A7C5C(0xBu);
    v74 = os_log_type_enabled(v73, OS_LOG_TYPE_DEBUG);
    v75 = (char *)v83;
    if (v74)
    {
      v76 = v84;
      if (v83 != v84)
      {
        do
        {
          v77 = *(_QWORD *)v75;
          v78 = sub_20B9A7C5C(0xBu);
          if (os_log_type_enabled(v78, OS_LOG_TYPE_DEBUG))
          {
            v79 = *(_QWORD *)(a2[6] + 8 * v77);
            v80 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 24))(v79);
            LODWORD(__p) = 138412290;
            *(_QWORD *)((char *)&__p + 4) = v80;
            _os_log_debug_impl(&dword_20B7F7000, v78, OS_LOG_TYPE_DEBUG, "Pruning %@ (QuickPath candidate)", (uint8_t *)&__p, 0xCu);
          }
          v75 += 8;
        }
        while (v75 != v76);
        v75 = (char *)v83;
      }
    }
    if (v84 != v75)
    {
      sub_20B8FEACC(a2, (unint64_t **)&v83);
      v75 = (char *)v83;
    }
    if (v75)
    {
      v84 = v75;
      operator delete(v75);
    }
  }
  sub_20B8FED50((uint64_t)a2, 0xCu, (uint64_t)"## After reranking ##", 0, 1u);
}

void sub_20B8CB888(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  _Unwind_Resume(exception_object);
}

void sub_20B8CB940(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  const __CFURL *v4;
  NSObject *v5;
  NSObject *v6;
  os_signpost_id_t v7;
  NSObject *v8;
  NSObject *v9;
  CFTypeRef v10;
  const __CFURL *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void *v20;
  uint64_t v21;
  NSObject *v22;
  NSObject *v23;
  const __CFString *v24;
  _QWORD *v25;
  int v26;
  int v27;
  const __CFString ***v28;
  const __CFString **v29;
  const __CFString **v30;
  _OWORD *v31;
  __int128 v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  __int128 v39;
  char *v40;
  __CFError *v41;
  __CFError *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  __CFError *v47;
  CFErrorRef v48;
  CFErrorRef v49;
  uint64_t v50;
  NSObject *v51;
  char *v52;
  uint64_t v53;
  void *__p[2];
  uint64_t v55;
  CFTypeRef cf;
  char *v57;
  unint64_t v58;
  CFErrorRef error;
  __CFError *v60;
  __CFError *v61;
  _BYTE buf[24];
  char *v63;
  unint64_t *v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  v2 = sub_20B9A7C5C(9u);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_debug_impl(&dword_20B7F7000, v2, OS_LOG_TYPE_DEBUG, "[MJ::assetDictionariesDidChange]", buf, 2u);
  }
  v3 = a1[132];
  v4 = *(const __CFURL **)(v3 + 40);
  if (v4)
  {
    v5 = sub_20B9A7C5C(9u);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "assetDictionariesDidChange";
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v4;
      _os_log_debug_impl(&dword_20B7F7000, v5, OS_LOG_TYPE_DEBUG, "[MJ::%s] swapping neural language model: %@", buf, 0x16u);
    }
    error = 0;
    if (!CFURLResourceIsReachable(v4, &error))
    {
      if (error)
        CFRelease(error);
      goto LABEL_35;
    }
    if (!a1[148] || !a1[479] || !a1[480])
      goto LABEL_35;
    v6 = sub_20B9A7C5C(0xDu);
    v7 = os_signpost_id_make_with_pointer(v6, a1);
    v8 = sub_20B9A7C5C(0xDu);
    if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v9 = v8;
      if (os_signpost_enabled(v8))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_20B7F7000, v9, OS_SIGNPOST_INTERVAL_BEGIN, v7, "MecabraJapaneseNeuralLanguageModelSwap", "Swap neural language model for MecabraJapanese", buf, 2u);
      }
    }
    sub_20B8C9CDC(v4, off_254728290, (CFURLRef *)&cf);
    sub_20B8C9CDC(v4, off_2547282A0, (CFURLRef *)__p);
    v10 = cf;
    v11 = (const __CFURL *)__p[0];
    if (cf)
    {
      if (!__p[0])
      {
LABEL_34:
        CFRelease(v10);
        goto LABEL_35;
      }
      v12 = operator new();
      sub_20B8CECE8(v12, v11);
      v13 = operator new();
      *(_QWORD *)buf = v12;
      sub_20B9AFAF4(v13, (const __CFURL *)v10, (uint64_t *)buf);
      if (*(_QWORD *)buf)
        (*(void (**)(_QWORD))(**(_QWORD **)buf + 8))(*(_QWORD *)buf);
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 48))(v13) & 1) != 0)
      {
        v14 = a1[148];
        a1[148] = v13;
        v15 = a1[478];
        v16 = (_QWORD *)operator new();
        *v16 = &unk_24C461CA0;
        v16[1] = v13;
        v16[2] = v15;
        v16[3] = a1 + 23;
        v17 = a1[476];
        a1[476] = v16;
        if (v17)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
          v16 = (_QWORD *)a1[476];
        }
        v18 = a1[477];
        v19 = (_QWORD *)operator new();
        *v19 = &unk_24C462318;
        v20 = sub_20B896F94();
        *v19 = &unk_24C461F08;
        v19[1] = v20;
        v19[2] = a1 + 23;
        v19[3] = v16;
        v19[4] = v18;
        v21 = a1[479];
        a1[479] = v19;
        if (v21)
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)a1[480] + 32))(a1[480], a1[148]);
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)a1[480] + 40))(a1[480], *(_QWORD *)(a1[145] + 344));
        v22 = sub_20B9A7C5C(0xDu);
        if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v23 = v22;
          if (os_signpost_enabled(v22))
          {
            *(_WORD *)buf = 0;
            _os_signpost_emit_with_name_impl(&dword_20B7F7000, v23, OS_SIGNPOST_INTERVAL_END, v7, "MecabraJapaneseNeuralLanguageModelSwap", (const char *)&unk_20BA9505F, buf, 2u);
          }
        }
        if (!v14)
          goto LABEL_33;
      }
      else
      {
        v14 = v13;
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      goto LABEL_33;
    }
    if (!__p[0])
      goto LABEL_35;
LABEL_33:
    CFRelease(v11);
    if (v10)
      goto LABEL_34;
LABEL_35:
    v3 = a1[132];
  }
  sub_20B89E8FC((uint64_t)(a1 + 135), *(CFStringRef *)(v3 + 24), 0);
  if (a1[480])
  {
    v24 = *(const __CFString **)(a1[132] + 32);
    if (v24)
    {
      v25 = (_QWORD *)a1[145];
      sub_20B8D1C98(v24, buf);
      v26 = sub_20B8A0E28(v25, buf);
      v27 = v26;
      if ((buf[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)buf);
        if (!v27)
          goto LABEL_43;
      }
      else if (!v26)
      {
        goto LABEL_43;
      }
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)a1[480] + 40))(a1[480], *(_QWORD *)(a1[145] + 344));
    }
  }
LABEL_43:
  v28 = (const __CFString ***)a1[132];
  error = 0;
  v60 = 0;
  v61 = 0;
  cf = 0;
  v57 = 0;
  v58 = 0;
  v29 = *v28;
  v30 = v28[1];
  if (*v28 != v30)
  {
    do
    {
      sub_20B8D1C98(*v29, __p);
      v31 = v57;
      if ((unint64_t)v57 >= v58)
      {
        v34 = 0xAAAAAAAAAAAAAAABLL * ((v57 - (_BYTE *)cf) >> 3);
        v35 = v34 + 1;
        if (v34 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20B80CDD8();
        if (0x5555555555555556 * ((uint64_t)(v58 - (_QWORD)cf) >> 3) > v35)
          v35 = 0x5555555555555556 * ((uint64_t)(v58 - (_QWORD)cf) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v58 - (_QWORD)cf) >> 3) >= 0x555555555555555)
          v36 = 0xAAAAAAAAAAAAAAALL;
        else
          v36 = v35;
        v64 = &v58;
        if (v36)
          v37 = (char *)sub_20B828D70((uint64_t)&v58, v36);
        else
          v37 = 0;
        v38 = &v37[24 * v34];
        *(_QWORD *)buf = v37;
        *(_QWORD *)&buf[8] = v38;
        v63 = &v37[24 * v36];
        v39 = *(_OWORD *)__p;
        *((_QWORD *)v38 + 2) = v55;
        *(_OWORD *)v38 = v39;
        __p[1] = 0;
        v55 = 0;
        __p[0] = 0;
        *(_QWORD *)&buf[16] = v38 + 24;
        sub_20B83BAB4((uint64_t *)&cf, buf);
        v33 = v57;
        sub_20B83BC3C((uint64_t)buf);
        v57 = v33;
        if (SHIBYTE(v55) < 0)
        {
          operator delete(__p[0]);
          v33 = v57;
        }
      }
      else
      {
        v32 = *(_OWORD *)__p;
        *((_QWORD *)v57 + 2) = v55;
        *v31 = v32;
        v33 = (char *)v31 + 24;
        v57 = (char *)v31 + 24;
      }
      v40 = v33 - 24;
      if (*(v33 - 1) < 0)
        v40 = *(char **)v40;
      v41 = v60;
      if (v60 >= v61)
      {
        v43 = (v60 - error) >> 3;
        if ((unint64_t)(v43 + 1) >> 61)
          sub_20B80CDD8();
        v44 = (v61 - error) >> 2;
        if (v44 <= v43 + 1)
          v44 = v43 + 1;
        if ((unint64_t)(v61 - error) >= 0x7FFFFFFFFFFFFFF8)
          v45 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v45 = v44;
        if (v45)
          v46 = (char *)sub_20B800BE8((uint64_t)&v61, v45);
        else
          v46 = 0;
        v47 = (__CFError *)&v46[8 * v43];
        *(_QWORD *)v47 = v40;
        v42 = (__CFError *)((char *)v47 + 8);
        v49 = error;
        v48 = v60;
        if (v60 != error)
        {
          do
          {
            v50 = *((_QWORD *)v48 - 1);
            v48 = (CFErrorRef)((char *)v48 - 8);
            *((_QWORD *)v47 - 1) = v50;
            v47 = (__CFError *)((char *)v47 - 8);
          }
          while (v48 != v49);
          v48 = error;
        }
        error = v47;
        v60 = v42;
        v61 = (__CFError *)&v46[8 * v45];
        if (v48)
          operator delete(v48);
      }
      else
      {
        *(_QWORD *)v60 = v40;
        v42 = (__CFError *)((char *)v41 + 8);
      }
      v60 = v42;
      v51 = sub_20B9A7C5C(9u);
      if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
      {
        v52 = v57 - 24;
        if (*(v57 - 1) < 0)
          v52 = *(char **)v52;
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v52;
        _os_log_debug_impl(&dword_20B7F7000, v51, OS_LOG_TYPE_DEBUG, "[MJ::assetDictionariesDidChange] setting additional dictionary %s", buf, 0xCu);
      }
      ++v29;
    }
    while (v29 != v30);
  }
  v53 = a1[24];
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 152))(v53);
  *(_QWORD *)buf = &cf;
  sub_20B83AFD0((void ***)buf);
  if (error)
  {
    v60 = error;
    operator delete(error);
  }
}

void sub_20B8CC078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, const void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  sub_20B876164((const void **)&a12, 0);
  sub_20B876164(&a18, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8CC1E0(uint64_t a1)
{
  _QWORD *v2;
  void **v3;
  const __CFString *v4;
  __CFString *v5;
  void *v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  CFIndex v10;
  CFIndex v11;
  int v12;
  FILE *v13;
  const char *v14;
  char *v15;
  const __CFAllocator *contentsDeallocator;
  char *v18;
  char *v19;
  uint64_t v20;
  void *__src;
  CFIndex v22;
  CFIndex v23[3];
  void *__p[2];
  uint64_t v25;
  _QWORD v26[2];
  uint64_t v27;
  _QWORD v28[21];

  v28[19] = *MEMORY[0x24BDAC8D0];
  sub_20B82EB18(v26);
  __p[0] = 0;
  __p[1] = 0;
  v25 = 0;
  contentsDeallocator = (const __CFAllocator *)*MEMORY[0x24BDBD258];
  while (1)
  {
    v2 = sub_20B851B78(v26, (uint64_t)__p, 0xAu);
    if ((*((_BYTE *)v2 + *(_QWORD *)(*v2 - 24) + 32) & 5) != 0)
      break;
    if (v25 >= 0)
      v3 = __p;
    else
      v3 = (void **)__p[0];
    v4 = CFStringCreateWithCStringNoCopy(0, (const char *)v3, 0x8000100u, contentsDeallocator);
    v23[2] = (CFIndex)v4;
    v5 = sub_20B96DFA4(*(_QWORD *)(a1 + 1048), v4);
    v23[0] = 0;
    v23[1] = (CFIndex)v5;
    v22 = 0;
    sub_20B8D0624(v4, v23, &__src);
    sub_20B8D0624(v5, &v22, &v20);
    v6 = __src;
    if (__src)
      v7 = v23[0];
    else
      v7 = 0;
    v8 = sub_20BA2F950(*(_QWORD *)(a1 + 1168), __src, v7, 0);
    v9 = v20;
    if (v20)
      v10 = v22;
    else
      v10 = 0;
    if (v6)
      v11 = v23[0];
    else
      v11 = 0;
    v12 = (*(uint64_t (**)(_QWORD, uint64_t, CFIndex, void *, CFIndex))(**(_QWORD **)(a1 + 1072) + 32))(*(_QWORD *)(a1 + 1072), v20, v10, v6, v11);
    v13 = (FILE *)*MEMORY[0x24BDAC8E8];
    sub_20B8D154C(v4, &v19);
    v14 = v19;
    sub_20B8D154C(v5, &v18);
    v15 = v18;
    fprintf(v13, "%s\t%s\t%x\t%x\n", v14, v18, v8, v12);
    if (v15)
      MEMORY[0x20BD39C80](v15, 0x1000C8077774924);
    if (v14)
      MEMORY[0x20BD39C80](v14, 0x1000C8077774924);
    if (v9)
      MEMORY[0x20BD39C80](v9, 0x1000C80BDFB0063);
    if (v6)
      MEMORY[0x20BD39C80](v6, 0x1000C80BDFB0063);
    if (v5)
      CFRelease(v5);
    if (v4)
      CFRelease(v4);
  }
  if (SHIBYTE(v25) < 0)
    operator delete(__p[0]);
  v26[0] = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)((char *)v26 + *(_QWORD *)(v26[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 24);
  MEMORY[0x20BD399D4](&v27);
  std::istream::~istream();
  return MEMORY[0x20BD39C2C](v28);
}

void sub_20B8CC484(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B8CC588(uint64_t a1)
{
  return sub_20BA2F3DC(*(_QWORD *)(a1 + 1168));
}

uint64_t sub_20B8CC590(uint64_t a1, const __CFString *a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 1168);
  if (result)
    return sub_20B9C4198(result, a2);
  return result;
}

uint64_t sub_20B8CC5A0(uint64_t a1, const __CFString *a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 1168);
  if (result)
    return sub_20B9C4244(result, a2);
  return result;
}

std::string::size_type sub_20B8CC5B0(uint64_t a1, const __CFString *a2, int a3)
{
  std::string::size_type result;

  result = sub_20B8CA5F0(a1, a2, 0, a3, 1);
  if (result)
    return sub_20B8E1754(result);
  return result;
}

uint64_t sub_20B8CC5DC()
{
  return LMLanguageModelGetLastOfflineAdaptationTime();
}

uint64_t sub_20B8CC5E8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 3872);
}

BOOL sub_20B8CC5F0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 3832) != 0;
}

BOOL sub_20B8CC600(uint64_t a1)
{
  return *(_QWORD *)(a1 + 3840) != 0;
}

uint64_t sub_20B8CC610()
{
  return 1;
}

uint64_t sub_20B8CC618(uint64_t a1)
{
  return *(__int16 *)(*(_QWORD *)(a1 + 1032) + 522);
}

uint64_t sub_20B8CC624(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  void **v4;

  if (a2)
  {
    v4 = (void **)(a2 + 24);
    sub_20B8CC684(&v4);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    return MEMORY[0x20BD39CB0](a2, 0x1032C40CA71968DLL);
  }
  return result;
}

void sub_20B8CC684(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 184;
        sub_20B8CC6F4(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_20B8CC6F4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  sub_20B84055C(a1 + 136);
  v2 = *(void **)(a1 + 96);
  if (v2)
  {
    *(_QWORD *)(a1 + 104) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 + 80) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 48);
  if (v4)
  {
    *(_QWORD *)(a1 + 56) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 24);
  if (v5)
  {
    *(_QWORD *)(a1 + 32) = v5;
    operator delete(v5);
  }
  v6 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v6;
    operator delete(v6);
  }
}

uint64_t sub_20B8CC770(uint64_t a1)
{
  sub_20B8B0328((const void **)(a1 + 2592), 0);
  std::mutex::~mutex((std::mutex *)(a1 + 16));
  sub_20B87AA1C((const void **)(a1 + 8), 0);
  return a1;
}

void sub_20B8CC7B0(void ***a1)
{
  void **v1;
  void **v3;
  void **v4;
  void **v5;

  v1 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v3 -= 3;
        v5 = v3;
        sub_20B8B6768(&v5);
      }
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

unint64_t sub_20B8CC820(unint64_t result, unint64_t *a2, uint64_t a3, char a4)
{
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  BOOL v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t *v59;
  BOOL v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  unint64_t *v71;
  int64_t v72;
  int64_t v73;
  int64_t v74;
  uint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  BOOL v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t *v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  unint64_t *v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t *v107;
  unint64_t *v108;
  unint64_t v109;

  v7 = (unint64_t *)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v44 = *(a2 - 2);
        v45 = *v8;
        if (v44 > *v8)
        {
          v46 = v8[1];
          v47 = *(a2 - 1);
          *v8 = v44;
          v8[1] = v47;
          *(a2 - 2) = v45;
          *(a2 - 1) = v46;
        }
        return result;
      case 3uLL:
        return (unint64_t)sub_20B8CCF00(v8, v8 + 2, a2 - 2);
      case 4uLL:
        return (unint64_t)sub_20B8CD17C(v8, v8 + 2, v8 + 4, a2 - 2);
      case 5uLL:
        result = (unint64_t)sub_20B8CD17C(v8, v8 + 2, v8 + 4, v8 + 6);
        v48 = *(a2 - 2);
        v49 = v8[6];
        if (v48 > v49)
        {
          v8[6] = v48;
          *(a2 - 2) = v49;
          v50 = v8[6];
          v51 = v8[7];
          v8[7] = *(a2 - 1);
          *(a2 - 1) = v51;
          v52 = v8[4];
          if (v50 > v52)
          {
            v53 = v8[5];
            v54 = v8[7];
            v8[4] = v50;
            v8[5] = v54;
            v8[6] = v52;
            v8[7] = v53;
            v55 = v8[2];
            if (v50 > v55)
            {
              v56 = v8[3];
              v8[2] = v50;
              v8[3] = v54;
              v8[4] = v55;
              v8[5] = v56;
              v57 = *v8;
              if (v50 > *v8)
              {
                v58 = v8[1];
                *v8 = v50;
                v8[1] = v54;
                v8[2] = v57;
                v8[3] = v58;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 383)
        {
          v59 = v8 + 2;
          v61 = v8 == a2 || v59 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v61)
            {
              v62 = 0;
              v63 = v8;
              do
              {
                v64 = v59;
                v65 = v63[2];
                v66 = *v63;
                if (v65 > *v63)
                {
                  v67 = v63[3];
                  v68 = v62;
                  while (1)
                  {
                    v69 = (char *)v8 + v68;
                    v70 = *(unint64_t *)((char *)v8 + v68 + 8);
                    *((_QWORD *)v69 + 2) = v66;
                    *((_QWORD *)v69 + 3) = v70;
                    if (!v68)
                      break;
                    v66 = *((_QWORD *)v69 - 2);
                    v68 -= 16;
                    if (v65 <= v66)
                    {
                      v71 = (unint64_t *)((char *)v8 + v68 + 16);
                      goto LABEL_79;
                    }
                  }
                  v71 = v8;
LABEL_79:
                  *v71 = v65;
                  v71[1] = v67;
                }
                v59 = v64 + 2;
                v62 += 16;
                v63 = v64;
              }
              while (v64 + 2 != a2);
            }
          }
          else if (!v61)
          {
            v102 = v8 + 3;
            do
            {
              v103 = v59;
              v104 = v7[2];
              v105 = *v7;
              if (v104 > *v7)
              {
                v106 = v7[3];
                v107 = v102;
                do
                {
                  v108 = v107;
                  *(v107 - 1) = v105;
                  v109 = *(v107 - 2);
                  v107 -= 2;
                  *v108 = v109;
                  v105 = *(v108 - 5);
                }
                while (v104 > v105);
                *(v107 - 1) = v104;
                *v107 = v106;
              }
              v59 = v103 + 2;
              v102 += 2;
              v7 = v103;
            }
            while (v103 + 2 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v72 = (v10 - 2) >> 1;
            v73 = v72;
            do
            {
              v74 = v73;
              if (v72 >= v73)
              {
                v75 = (2 * v73) | 1;
                v76 = &v8[2 * v75];
                if (2 * v74 + 2 >= (uint64_t)v10)
                {
                  v77 = *v76;
                }
                else
                {
                  v77 = v76[2];
                  v78 = *v76 > v77;
                  if (*v76 < v77)
                    v77 = *v76;
                  if (v78)
                  {
                    v76 += 2;
                    v75 = 2 * v74 + 2;
                  }
                }
                v79 = &v8[2 * v74];
                v80 = *v79;
                if (v77 <= *v79)
                {
                  v81 = v79[1];
                  do
                  {
                    result = (unint64_t)v79;
                    v79 = v76;
                    v82 = v76[1];
                    *(_QWORD *)result = v77;
                    *(_QWORD *)(result + 8) = v82;
                    if (v72 < v75)
                      break;
                    result = (2 * v75) | 1;
                    v76 = &v8[2 * result];
                    v75 = 2 * v75 + 2;
                    if (v75 >= (uint64_t)v10)
                    {
                      v77 = *v76;
                      v75 = result;
                    }
                    else
                    {
                      v77 = *v76;
                      v83 = v76[2];
                      if (*v76 >= v83)
                        v77 = v76[2];
                      if (*v76 <= v83)
                        v75 = result;
                      else
                        v76 += 2;
                    }
                  }
                  while (v77 <= v80);
                  *v79 = v80;
                  v79[1] = v81;
                }
              }
              v73 = v74 - 1;
            }
            while (v74);
            v84 = (unint64_t)v9 >> 4;
            do
            {
              v85 = 0;
              v86 = *v8;
              v87 = v8[1];
              v88 = v8;
              do
              {
                v89 = &v88[2 * v85 + 2];
                v90 = (2 * v85) | 1;
                v85 = 2 * v85 + 2;
                if (v85 >= v84)
                {
                  v91 = *v89;
                  v85 = v90;
                }
                else
                {
                  v91 = *v89;
                  result = v89[2];
                  if (*v89 >= result)
                    v91 = v89[2];
                  if (*v89 <= result)
                    v85 = v90;
                  else
                    v89 += 2;
                }
                v92 = v89[1];
                *v88 = v91;
                v88[1] = v92;
                v88 = v89;
              }
              while (v85 <= (uint64_t)((unint64_t)(v84 - 2) >> 1));
              if (v89 == a2 - 2)
              {
                *v89 = v86;
                v89[1] = v87;
              }
              else
              {
                v93 = *(a2 - 1);
                *v89 = *(a2 - 2);
                v89[1] = v93;
                *(a2 - 2) = v86;
                *(a2 - 1) = v87;
                v94 = (char *)v89 - (char *)v8 + 16;
                if (v94 >= 17)
                {
                  v95 = (((unint64_t)v94 >> 4) - 2) >> 1;
                  v96 = &v8[2 * v95];
                  v97 = *v96;
                  v98 = *v89;
                  if (*v96 > *v89)
                  {
                    v99 = v89[1];
                    do
                    {
                      v100 = v89;
                      v89 = v96;
                      v101 = v96[1];
                      *v100 = v97;
                      v100[1] = v101;
                      if (!v95)
                        break;
                      v95 = (v95 - 1) >> 1;
                      v96 = &v8[2 * v95];
                      v97 = *v96;
                    }
                    while (*v96 > v98);
                    *v89 = v98;
                    v89[1] = v99;
                  }
                }
              }
              a2 -= 2;
              v78 = v84-- <= 2;
            }
            while (!v78);
          }
          return result;
        }
        v11 = v10 >> 1;
        v12 = &v8[2 * (v10 >> 1)];
        if ((unint64_t)v9 < 0x801)
        {
          result = (unint64_t)sub_20B8CCF00(&v7[2 * (v10 >> 1)], v7, a2 - 2);
        }
        else
        {
          sub_20B8CCF00(v7, &v7[2 * (v10 >> 1)], a2 - 2);
          sub_20B8CCF00(v7 + 2, v12 - 2, a2 - 4);
          sub_20B8CCF00(v7 + 4, &v7[2 * v11 + 2], a2 - 6);
          result = (unint64_t)sub_20B8CCF00(v12 - 2, v12, &v7[2 * v11 + 2]);
          v13 = *v7;
          v14 = v7[1];
          v15 = v12[1];
          *v7 = *v12;
          v7[1] = v15;
          *v12 = v13;
          v12[1] = v14;
        }
        --a3;
        v16 = *v7;
        if ((a4 & 1) == 0 && *(v7 - 2) <= v16)
        {
          if (v16 <= *(a2 - 2))
          {
            v33 = v7 + 2;
            do
            {
              v8 = v33;
              if (v33 >= a2)
                break;
              v33 += 2;
            }
            while (v16 <= *v8);
          }
          else
          {
            v8 = v7;
            do
            {
              v32 = v8[2];
              v8 += 2;
            }
            while (v16 <= v32);
          }
          v34 = a2;
          if (v8 < a2)
          {
            v34 = a2;
            do
            {
              v35 = *(v34 - 2);
              v34 -= 2;
            }
            while (v16 > v35);
          }
          v36 = v7[1];
          if (v8 < v34)
          {
            v37 = *v8;
            v38 = *v34;
            do
            {
              v39 = v8[1];
              v40 = v34[1];
              *v8 = v38;
              v8[1] = v40;
              *v34 = v37;
              v34[1] = v39;
              do
              {
                v41 = v8[2];
                v8 += 2;
                v37 = v41;
              }
              while (v16 <= v41);
              do
              {
                v42 = *(v34 - 2);
                v34 -= 2;
                v38 = v42;
              }
              while (v16 > v42);
            }
            while (v8 < v34);
          }
          if (v8 - 2 != v7)
          {
            v43 = *(v8 - 1);
            *v7 = *(v8 - 2);
            v7[1] = v43;
          }
          a4 = 0;
          *(v8 - 2) = v16;
          *(v8 - 1) = v36;
          continue;
        }
        v17 = 0;
        v18 = v7[1];
        do
        {
          v19 = v7[v17 + 2];
          v17 += 2;
        }
        while (v19 > v16);
        v20 = &v7[v17];
        v21 = a2;
        if (v17 == 2)
        {
          v21 = a2;
          do
          {
            if (v20 >= v21)
              break;
            v23 = *(v21 - 2);
            v21 -= 2;
          }
          while (v23 <= v16);
        }
        else
        {
          do
          {
            v22 = *(v21 - 2);
            v21 -= 2;
          }
          while (v22 <= v16);
        }
        if (v20 >= v21)
        {
          v8 = &v7[v17];
        }
        else
        {
          v24 = *v21;
          v8 = &v7[v17];
          v25 = v21;
          do
          {
            v26 = v8[1];
            v27 = v25[1];
            *v8 = v24;
            v8[1] = v27;
            *v25 = v19;
            v25[1] = v26;
            do
            {
              v28 = v8[2];
              v8 += 2;
              v19 = v28;
            }
            while (v28 > v16);
            do
            {
              v29 = *(v25 - 2);
              v25 -= 2;
              v24 = v29;
            }
            while (v29 <= v16);
          }
          while (v8 < v25);
        }
        if (v8 - 2 != v7)
        {
          v30 = *(v8 - 1);
          *v7 = *(v8 - 2);
          v7[1] = v30;
        }
        *(v8 - 2) = v16;
        *(v8 - 1) = v18;
        if (v20 < v21)
        {
LABEL_32:
          result = sub_20B8CC820(v7, v8 - 2, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v31 = sub_20B8CCF9C(v7, v8 - 2);
        result = sub_20B8CCF9C(v8, a2);
        if (!(_DWORD)result)
        {
          if (v31)
            continue;
          goto LABEL_32;
        }
        a2 = v8 - 2;
        if (!v31)
          goto LABEL_2;
        return result;
    }
  }
}

unint64_t *sub_20B8CCF00(unint64_t *result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v3 = *a2;
  v4 = *result;
  v5 = *a3;
  if (*a2 <= *result)
  {
    if (v5 > v3)
    {
      *a2 = v5;
      *a3 = v3;
      v8 = *a2;
      v9 = a2[1];
      a2[1] = a3[1];
      a3[1] = v9;
      v10 = *result;
      if (v8 > *result)
      {
        v11 = result[1];
        v12 = a2[1];
        *result = v8;
        result[1] = v12;
        *a2 = v10;
        a2[1] = v11;
      }
    }
  }
  else if (v5 <= v3)
  {
    v13 = result[1];
    v14 = a2[1];
    *result = v3;
    result[1] = v14;
    *a2 = v4;
    a2[1] = v13;
    if (*a3 > v4)
    {
      v15 = a3[1];
      *a2 = *a3;
      a2[1] = v15;
      *a3 = v4;
      a3[1] = v13;
    }
  }
  else
  {
    v6 = result[1];
    v7 = a3[1];
    *result = v5;
    result[1] = v7;
    *a3 = v4;
    a3[1] = v6;
  }
  return result;
}

BOOL sub_20B8CCF9C(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;

  v4 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 2);
      v7 = *a1;
      if (v6 > *a1)
      {
        v8 = a1[1];
        v9 = *(a2 - 1);
        *a1 = v6;
        a1[1] = v9;
        *(a2 - 2) = v7;
        *(a2 - 1) = v8;
      }
      return result;
    case 3:
      sub_20B8CCF00(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      sub_20B8CD17C(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      sub_20B8CD17C(a1, a1 + 2, a1 + 4, a1 + 6);
      v21 = *(a2 - 2);
      v22 = a1[6];
      if (v21 > v22)
      {
        a1[6] = v21;
        *(a2 - 2) = v22;
        v23 = a1[6];
        v24 = a1[7];
        a1[7] = *(a2 - 1);
        *(a2 - 1) = v24;
        v25 = a1[4];
        if (v23 > v25)
        {
          v26 = a1[5];
          v27 = a1[7];
          a1[4] = v23;
          a1[5] = v27;
          a1[6] = v25;
          a1[7] = v26;
          v28 = a1[2];
          if (v23 > v28)
          {
            v29 = a1[3];
            a1[2] = v23;
            a1[3] = v27;
            a1[4] = v28;
            a1[5] = v29;
            v30 = *a1;
            if (v23 > *a1)
            {
              v31 = a1[1];
              *a1 = v23;
              a1[1] = v27;
              a1[2] = v30;
              a1[3] = v31;
            }
          }
        }
      }
      return 1;
    default:
      v10 = a1 + 4;
      sub_20B8CCF00(a1, a1 + 2, a1 + 4);
      v11 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    v14 = *v11;
    v15 = *v10;
    if (*v11 > *v10)
    {
      v16 = v11[1];
      v17 = v12;
      while (1)
      {
        v18 = (unint64_t *)((char *)a1 + v17);
        v19 = *(unint64_t *)((char *)a1 + v17 + 40);
        v18[6] = v15;
        v18[7] = v19;
        if (v17 == -32)
          break;
        v15 = v18[2];
        v17 -= 16;
        if (v14 <= v15)
        {
          v20 = (unint64_t *)((char *)a1 + v17 + 48);
          goto LABEL_13;
        }
      }
      v20 = a1;
LABEL_13:
      *v20 = v14;
      v20[1] = v16;
      if (++v13 == 8)
        return v11 + 2 == a2;
    }
    v10 = v11;
    v12 += 16;
    v11 += 2;
    if (v11 == a2)
      return 1;
  }
}

unint64_t *sub_20B8CD17C(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  unint64_t *result;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;

  result = sub_20B8CCF00(a1, a2, a3);
  v9 = *a3;
  if (*a4 > *a3)
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = *a3;
    v11 = a3[1];
    a3[1] = a4[1];
    a4[1] = v11;
    v12 = *a2;
    if (v10 > *a2)
    {
      *a2 = v10;
      *a3 = v12;
      v13 = *a2;
      v14 = a2[1];
      a2[1] = a3[1];
      a3[1] = v14;
      v15 = *a1;
      if (v13 > *a1)
      {
        v16 = a1[1];
        v17 = a2[1];
        *a1 = v13;
        a1[1] = v17;
        *a2 = v15;
        a2[1] = v16;
      }
    }
  }
  return result;
}

uint64_t **sub_20B8CD218(_QWORD *a1, _QWORD *a2)
{
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t ***v10;
  uint64_t **i;
  unint64_t v12;

  v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 144))(*a2);
  v5 = a1[1];
  if (!v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v5 <= v4)
      v9 = v4 % v5;
  }
  else
  {
    v9 = ((_DWORD)v5 - 1) & v4;
  }
  v10 = *(uint64_t ****)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  for (i = *v10; i; i = (uint64_t **)*i)
  {
    v12 = (unint64_t)i[1];
    if (v12 == v6)
    {
      if (((*(uint64_t (**)(uint64_t *, _QWORD))(*i[2] + 152))(i[2], *a2) & 1) != 0)
        return i;
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= v5)
          v12 %= v5;
      }
      else
      {
        v12 &= v5 - 1;
      }
      if (v12 != v9)
        return 0;
    }
  }
  return i;
}

void sub_20B8CD320(const void **a1, CFTypeRef cf)
{
  if (*a1 != cf)
  {
    CFRetain(cf);
    sub_20B87AA1C(a1, cf);
  }
}

uint64_t sub_20B8CD36C(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v4 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_20B8CD3CC(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (void *)a1[13];
  if (v2)
  {
    a1[14] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[10];
  if (v3)
  {
    a1[11] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[7];
  if (v4)
  {
    a1[8] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[4];
  if (v5)
  {
    a1[5] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[1];
  if (v6)
  {
    a1[2] = v6;
    operator delete(v6);
  }
  return a1;
}

void sub_20B8CD43C(_QWORD *a1, _WORD *a2, uint64_t a3, __int16 a4, _WORD *a5, uint64_t a6, __int16 a7, __int16 a8)
{
  __int16 v13;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;

  v13 = a3;
  sub_20B8B17F4(a2, &a2[a3], (uint64_t)(a1 + 1));
  sub_20B8B17F4(a5, &a5[a6], (uint64_t)(a1 + 4));
  v15 = a1[9];
  v16 = a1[8];
  if (v16 >= v15)
  {
    v18 = a1[7];
    v19 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v16 - v18) >> 3);
    v20 = v19 + 1;
    if (v19 + 1 > 0x666666666666666)
      sub_20B8821D4();
    v21 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v15 - v18) >> 3);
    if (2 * v21 > v20)
      v20 = 2 * v21;
    if (v21 >= 0x333333333333333)
      v22 = 0x666666666666666;
    else
      v22 = v20;
    if (v22)
      v23 = (char *)sub_20B882310((uint64_t)(a1 + 9), v22);
    else
      v23 = 0;
    v24 = &v23[40 * v19];
    v25 = &v23[40 * v22];
    *((_QWORD *)v24 + 1) = 0;
    *((_QWORD *)v24 + 2) = 0;
    *(_QWORD *)v24 = 0;
    *((_WORD *)v24 + 12) = v13;
    *((_WORD *)v24 + 13) = a4;
    *((_WORD *)v24 + 14) = a6;
    *((_WORD *)v24 + 15) = a7;
    *((_WORD *)v24 + 16) = a8;
    *((_WORD *)v24 + 17) = 0;
    v24[36] = 0;
    *(_WORD *)(v24 + 37) = 513;
    v24[39] = 0;
    v17 = v24 + 40;
    v27 = (char *)a1[7];
    v26 = (char *)a1[8];
    if (v26 != v27)
    {
      do
      {
        v28 = *(_OWORD *)(v26 - 40);
        v29 = *(_OWORD *)(v26 - 24);
        *((_QWORD *)v24 - 1) = *((_QWORD *)v26 - 1);
        *(_OWORD *)(v24 - 24) = v29;
        *(_OWORD *)(v24 - 40) = v28;
        v24 -= 40;
        v26 -= 40;
      }
      while (v26 != v27);
      v26 = (char *)a1[7];
    }
    a1[7] = v24;
    a1[8] = v17;
    a1[9] = v25;
    if (v26)
      operator delete(v26);
  }
  else
  {
    *(_QWORD *)v16 = 0;
    *(_QWORD *)(v16 + 8) = 0;
    *(_QWORD *)(v16 + 16) = 0;
    *(_WORD *)(v16 + 24) = v13;
    *(_WORD *)(v16 + 26) = a4;
    *(_WORD *)(v16 + 28) = a6;
    *(_WORD *)(v16 + 30) = a7;
    *(_WORD *)(v16 + 32) = a8;
    *(_WORD *)(v16 + 34) = 0;
    *(_BYTE *)(v16 + 36) = 0;
    *(_WORD *)(v16 + 37) = 513;
    v17 = (char *)(v16 + 40);
    *(_BYTE *)(v16 + 39) = 0;
  }
  a1[8] = v17;
}

uint64_t sub_20B8CD5F8(uint64_t a1, uint64_t a2, int a3, int a4, char a5, int a6, int a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int **v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];
  _QWORD v16[2];

  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  if (v7 == v8)
    return 0;
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  if (v9 == v10 || *(_QWORD *)(a1 + 56) == *(_QWORD *)(a1 + 64))
    return 0;
  v11 = *(int ***)a1;
  v12 = (v8 - v7) >> 1;
  if (!v7)
    v12 = 0;
  v16[0] = *(_QWORD *)(a1 + 8);
  v16[1] = v12;
  v13 = (v10 - v9) >> 1;
  if (!v9)
    v13 = 0;
  v15[0] = v9;
  v15[1] = v13;
  return sub_20B9299D4(v11, a2, (uint64_t)v16, (uint64_t)v15, a3, a4, a1 + 56, a5, 0.0, a6, a7, *(const void **)(a1 + 80));
}

uint64_t sub_20B8CD6A0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  sub_20B8CE418((const void **)(a1 + 80), 0);
  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 32);
  if (v3)
  {
    *(_QWORD *)(a1 + 40) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 8);
  if (v4)
  {
    *(_QWORD *)(a1 + 16) = v4;
    operator delete(v4);
  }
  return a1;
}

_QWORD *sub_20B8CD6FC(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;

  if (result[3])
  {
    v1 = result;
    result = (_QWORD *)result[2];
    if (result)
    {
      do
      {
        v2 = (_QWORD *)*result;
        operator delete(result);
        result = v2;
      }
      while (v2);
    }
    v1[2] = 0;
    v3 = v1[1];
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*v1 + 8 * i) = 0;
    }
    v1[3] = 0;
  }
  return result;
}

uint64_t sub_20B8CD760(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  unsigned __int16 *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  if (a2)
  {
    v2 = *(_QWORD *)(*a1 + 40);
    v3 = (unsigned __int16 *)(a1[1] + 40 * a2 + 30);
    do
    {
      v4 = *(v3 - 19);
      if (v2 > v4)
      {
        v5 = *(_QWORD *)(*a1 + 32);
        if ((*(_BYTE *)(v5 + v4) & 1) != 0)
        {
          v6 = *v3;
          if (v2 > v6 && (*(_BYTE *)(v5 + v6) & 2) != 0)
            break;
        }
      }
      v3 -= 20;
      --a2;
    }
    while (a2);
  }
  return a2;
}

void sub_20B8CD7B8(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_20B8CD7F8((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_20B8CD7F8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 64)
  {
    if (*(char *)(i - 41) < 0)
      operator delete(*(void **)(i - 64));
  }
  a1[1] = v2;
}

char *sub_20B8CD844(uint64_t a1, __int128 *a2, __int128 *a3, char *__dst)
{
  char *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  char *v11;
  char *v12;

  v4 = __dst;
  v11 = __dst;
  v12 = __dst;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_20B88DD4C(v4, *(void **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        *((_QWORD *)v4 + 2) = *((_QWORD *)v6 + 2);
        *(_OWORD *)v4 = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v4 += 24;
      v12 = v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  sub_20B8CD900((uint64_t)v9);
  return v4;
}

void sub_20B8CD8EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B8CD900((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8CD900(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20B83C60C(a1);
  return a1;
}

void sub_20B8CD934(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  if (a1[2])
  {
    v3 = *a1;
    v2 = a1[1];
    v4 = *(_QWORD **)v2;
    v4[1] = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v3 + 8) = v4;
    a1[2] = 0;
    while ((_QWORD *)v2 != a1)
    {
      v5 = *(_QWORD *)(v2 + 8);
      sub_20B8CD994((int)a1, (void **)v2);
      v2 = v5;
    }
  }
}

void sub_20B8CD994(int a1, void **__p)
{
  if (*((char *)__p + 39) < 0)
    operator delete(__p[2]);
  operator delete(__p);
}

void sub_20B8CD9C4(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    sub_20B8CDA18(a1, *(void ***)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void sub_20B8CDA18(int a1, void **__p)
{
  void **v2;
  void **v3;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20B8CDA5C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (uint64_t *)v3[1];
        sub_20B892DCC((uint64_t)(v3 + 2));
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

uint64_t sub_20B8CDACC(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20B8CDB0C(_QWORD *a1, uint64_t a2, int *a3)
{
  int v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *__p[2];
  uint64_t v12;
  int v13;
  __int128 *v14;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_20B88DD4C(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v12 = *(_QWORD *)(a2 + 16);
  }
  v13 = *a3;
  v6 = v13;
  v7 = operator new(0x30uLL);
  v7[1] = *(_OWORD *)__p;
  *((_QWORD *)v7 + 4) = v12;
  __p[1] = 0;
  v12 = 0;
  __p[0] = 0;
  *((_DWORD *)v7 + 10) = v6;
  v8 = a1[1];
  *(_QWORD *)(v8 + 8) = v7;
  a1[1] = v7;
  *(_QWORD *)v7 = v8;
  *((_QWORD *)v7 + 1) = a1 + 1;
  ++a1[3];
  v14 = (__int128 *)a2;
  *((_QWORD *)sub_20B8CDC5C((uint64_t)(a1 + 4), (unsigned __int16 *)a2, (uint64_t)&unk_20BA37B7A, &v14) + 5) = v7;
  if (SHIBYTE(v12) < 0)
    operator delete(__p[0]);
  if (a1[3] > *a1)
  {
    v9 = a1[2];
    sub_20B8CDF98(a1 + 4, (unsigned __int16 *)(v9 + 16));
    v10 = *(_QWORD **)v9;
    v10[1] = *(_QWORD *)(v9 + 8);
    **(_QWORD **)(v9 + 8) = v10;
    --a1[3];
    sub_20B8CD994((_DWORD)a1 + 8, (void **)v9);
  }
}

void sub_20B8CDC40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unsigned __int16 *sub_20B8CDC5C(uint64_t a1, unsigned __int16 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int16 **v14;
  unsigned __int16 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = sub_20B89ACFC(a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int16 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int16 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if (sub_20B89AD3C(a1 + 32, i + 8, a2))
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  sub_20B8CDEF0(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    sub_20B828960(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int16 *)v26[0];
  ++*v8;
  return i;
}

void sub_20B8CDECC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p)
    sub_20B828B94((uint64_t)&a13, __p);
  _Unwind_Resume(exception_object);
}

_BYTE *sub_20B8CDEF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _BYTE *result;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = operator new(0x30uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = v8 + 2;
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    result = sub_20B88DD4C(result, *(void **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v8[4] = *((_QWORD *)v10 + 2);
    *(_OWORD *)result = v11;
  }
  v8[5] = 0;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_20B8CDF7C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_20B828B94(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B8CDF98(_QWORD *a1, unsigned __int16 *a2)
{
  uint64_t *result;

  result = (uint64_t *)sub_20B8CDFCC(a1, a2);
  if (result)
  {
    sub_20B8CE0CC(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

unsigned __int16 *sub_20B8CDFCC(_QWORD *a1, unsigned __int16 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int16 **v10;
  unsigned __int16 *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = sub_20B89ACFC((uint64_t)(a1 + 3), (uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int16 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = *((_QWORD *)v11 + 1);
      if (v13 == v6)
      {
        if (sub_20B89AD3C(v12, v11 + 8, a2))
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = *(unsigned __int16 **)v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t sub_20B8CE0CC(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  void **v3;
  void *__p;
  uint64_t v6;

  v2 = *a2;
  sub_20B8CE114(a1, a2, (uint64_t)&__p);
  v3 = (void **)__p;
  __p = 0;
  if (v3)
    sub_20B828B94((uint64_t)&v6, v3);
  return v2;
}

_QWORD *sub_20B8CE114@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(_QWORD **)(*result + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2)
      goto LABEL_19;
    v9 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*result + 8 * v4) = 0;
  }
  v10 = *a2;
  if (*a2)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*result + 8 * v11) = v7;
      v10 = *a2;
    }
  }
  *v7 = v10;
  *a2 = 0;
  --result[3];
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = result + 2;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20B8CE248(_QWORD *a1, __int128 *a2, __int128 *a3)
{
  _OWORD *v5;
  __int128 v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  void *v10[2];
  uint64_t v11;
  void *__p[2];
  uint64_t v13;
  __int128 *v14;

  sub_20B8CE384((char *)v10, a2, a3);
  v5 = operator new(0x40uLL);
  v5[1] = *(_OWORD *)v10;
  *((_QWORD *)v5 + 4) = v11;
  v6 = *(_OWORD *)__p;
  v11 = 0;
  __p[0] = 0;
  v10[0] = 0;
  v10[1] = 0;
  *(_OWORD *)((char *)v5 + 40) = v6;
  *((_QWORD *)v5 + 7) = v13;
  __p[1] = 0;
  v13 = 0;
  v7 = a1[1];
  *(_QWORD *)(v7 + 8) = v5;
  a1[1] = v5;
  *(_QWORD *)v5 = v7;
  *((_QWORD *)v5 + 1) = a1 + 1;
  ++a1[3];
  v14 = a2;
  *((_QWORD *)sub_20B8CDC5C((uint64_t)(a1 + 4), (unsigned __int16 *)a2, (uint64_t)&unk_20BA37B7A, &v14) + 5) = v5;
  if (SHIBYTE(v13) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v11) < 0)
    operator delete(v10[0]);
  if (a1[3] > *a1)
  {
    v8 = (unsigned __int16 *)a1[2];
    sub_20B8CDF98(a1 + 4, v8 + 8);
    v9 = *(_QWORD *)v8;
    *(_QWORD *)(v9 + 8) = *((_QWORD *)v8 + 1);
    **((_QWORD **)v8 + 1) = v9;
    --a1[3];
    sub_20B892DCC((uint64_t)(v8 + 8));
    operator delete(v8);
  }
}

void sub_20B8CE370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B8CDACC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *sub_20B8CE384(char *__dst, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  _BYTE *v6;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20B88DD4C(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }
  v6 = __dst + 24;
  if (*((char *)a3 + 23) < 0)
  {
    sub_20B88DD4C(v6, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v7 = *a3;
    *((_QWORD *)__dst + 5) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v6 = v7;
  }
  return __dst;
}

void sub_20B8CE3FC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_20B8CE418(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

void sub_20B8CE44C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_20B8CE49C((const void ***)(a2 + 16), 0);
    sub_20B8CE520((const void ***)(a2 + 8), 0);
    JUMPOUT(0x20BD39CB0);
  }
}

const void ***sub_20B8CE49C(const void ***result, const void **a2)
{
  const void **v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    sub_20B8CE4EC(v2, 0);
    JUMPOUT(0x20BD39CB0);
  }
  return result;
}

void sub_20B8CE4EC(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

const void ***sub_20B8CE520(const void ***result, const void **a2)
{
  const void **v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    sub_20B8CE570(v2, 0);
    JUMPOUT(0x20BD39CB0);
  }
  return result;
}

void sub_20B8CE570(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

uint64_t sub_20B8CE5A4(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    sub_20B96DBBC(result);
    JUMPOUT(0x20BD39CB0);
  }
  return result;
}

uint64_t *sub_20B8CE5E0(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 344);
    *(_QWORD *)(v1 + 344) = 0;
    if (v2)
      MEMORY[0x20BD39CB0](v2, 0x1050C40717B85FCLL);
    sub_20B878A58(v1);
    JUMPOUT(0x20BD39CB0);
  }
  return result;
}

void sub_20B8CE648(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v2)
    MEMORY[0x20BD39CB0](v2, 0x50C40EE9192B6);
  JUMPOUT(0x20BD39CB0);
}

uint64_t *sub_20B8CE698(uint64_t *result)
{
  uint64_t v1;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    sub_20B8B0328((const void **)(v1 + 24), 0);
    JUMPOUT(0x20BD39CB0);
  }
  return result;
}

void sub_20B8CE6E8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_20B84055C(a2 + 144);
    if (*(char *)(a2 + 79) < 0)
      operator delete(*(void **)(a2 + 56));
    if (*(char *)(a2 + 55) < 0)
      operator delete(*(void **)(a2 + 32));
    if (*(char *)(a2 + 31) < 0)
      operator delete(*(void **)(a2 + 8));
    JUMPOUT(0x20BD39CB0);
  }
}

void ***sub_20B8CE758(void ***result, void **a2)
{
  void **v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    free(*v2);
    JUMPOUT(0x20BD39CB0);
  }
  return result;
}

void sub_20B8CE7A4(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  if (a1)
  {
    v1 = a1;
    do
    {
      v2 = (_QWORD *)*v1;
      sub_20B8CE7E0((uint64_t)(v1 + 2));
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

void sub_20B8CE7E0(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_20B8CE82C(uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20B8CE7E0((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

uint64_t sub_20B8CE870(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 16 * a3;
    do
    {
      sub_20B8CE8E4(a1, (uint64_t)a2, a2);
      ++a2;
      v5 -= 16;
    }
    while (v5);
  }
  return a1;
}

void sub_20B8CE8D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B84055C(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B8CE8E4(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD **v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t *i;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;

  v7 = (_QWORD *)(a1 + 24);
  v8 = sub_20B8CEB50(a1 + 24, *(uint64_t **)a2, *(_QWORD *)(a2 + 8));
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v12 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        v14 = *(_QWORD *)(a2 + 8);
        do
        {
          v15 = v13[1];
          if (v15 == v8)
          {
            if (v13[3] == v14)
            {
              if (!v14)
                return v13;
              v16 = (unsigned __int16 *)v13[2];
              v17 = *(_QWORD *)(a2 + 8);
              for (i = *(uint64_t **)a2; *(unsigned __int16 *)i == *v16; i = (uint64_t *)((char *)i + 2))
              {
                ++v16;
                if (!--v17)
                  return v13;
              }
            }
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v15 >= v10)
                v15 %= v10;
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v3)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
  v13 = operator new(0x20uLL);
  *v13 = 0;
  v13[1] = v9;
  *((_OWORD *)v13 + 1) = *a3;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v10 || (float)(v20 * (float)v10) < v19)
  {
    v21 = 1;
    if (v10 >= 3)
      v21 = (v10 & (v10 - 1)) != 0;
    v22 = v21 | (2 * v10);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    sub_20B828960(a1, v24);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v26)
  {
    *v13 = *v26;
LABEL_44:
    *v26 = v13;
    goto LABEL_45;
  }
  *v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(v25 + 8 * v3) = a1 + 16;
  if (*v13)
  {
    v27 = *(_QWORD *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v27 >= v10)
        v27 %= v10;
    }
    else
    {
      v27 &= v10 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_44;
  }
LABEL_45:
  ++*v7;
  return v13;
}

void sub_20B8CEB3C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_20B8CEB50(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  char v4;

  return sub_20B828450((uint64_t)&v4, a2, 2 * a3);
}

void sub_20B8CEB78(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v2)
    MEMORY[0x20BD39C80](v2, 0x1000C8077774924);
  v3 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v3)
    MEMORY[0x20BD39C80](v3, 0x1000C8077774924);
  sub_20B7F8B30(a1 + 8);
  sub_20B806284(a1);
  JUMPOUT(0x20BD39CB0);
}

void sub_20B8CEBF4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 39) < 0)
      operator delete(*(void **)(a2 + 16));
    JUMPOUT(0x20BD39CB0);
  }
}

void sub_20B8CEC3C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  sub_20B8CECB0((uint64_t)(a1 + 19));
  sub_20B8CD934(a1 + 16);
  v2 = a1[12];
  a1[12] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[11];
  a1[11] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_20B9C40A8((uint64_t)a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B8CECB0(uint64_t a1)
{
  void *v2;

  sub_20B8CDA18(a1, *(void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

uint64_t sub_20B8CECE8(uint64_t a1, const __CFURL *a2)
{
  *(_QWORD *)sub_20B99A634(a1, a2) = &unk_24C462B10;
  sub_20B8B2334(0);
  *(_QWORD *)(a1 + 88) = &qword_25472C9B0;
  return a1;
}

void sub_20B8CED30(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20B8BACE8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8CED44(uint64_t a1, const std::string *a2, int a3)
{
  uint64_t v6;

  v6 = std::streambuf::basic_streambuf();
  *(_QWORD *)v6 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_DWORD *)(v6 + 96) = a3;
  std::string::operator=((std::string *)(v6 + 64), a2);
  sub_20B8944B4(a1);
  return a1;
}

void sub_20B8CEDB0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 87) < 0)
    operator delete(*v2);
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void sub_20B8CEDD4(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;

  v2 = *(void **)a1;
  if (v2)
  {
    munmap(v2, *(unsigned int *)(a1 + 8));
    *(_QWORD *)a1 = 0;
  }
  v3 = *(void **)(a1 + 16);
  if (v3)
  {
    if (*(_WORD *)(a1 + 14))
    {
      v4 = 0;
      v5 = 0;
      do
      {
        v6 = *(_QWORD *)(a1 + 16);
        v7 = *(void **)(v6 + v4);
        if (v7)
        {
          free(v7);
          v6 = *(_QWORD *)(a1 + 16);
        }
        v8 = *(void **)(v6 + v4 + 8);
        if (v8)
          free(v8);
        ++v5;
        v4 += 32;
      }
      while (v5 < *(unsigned __int16 *)(a1 + 14));
      v3 = *(void **)(a1 + 16);
    }
    free(v3);
  }
}

uint64_t sub_20B8CEE70(void **a1, CFURLRef anURL)
{
  const __CFString *v3;
  const __CFString *v4;
  int CString;
  int v6;
  int v7;
  unsigned __int16 *v8;
  unsigned int v9;
  uint64_t v10;
  void *v11;
  unint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  int *v17;
  _DWORD *v18;
  int v19;
  unsigned int v20;
  void *v21;
  stat v23;
  char buffer[1024];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v3 = CFURLCopyFileSystemPath(anURL, kCFURLPOSIXPathStyle);
  if (!v3)
    return 4294967246;
  v4 = v3;
  memset(&v23, 0, sizeof(v23));
  CString = CFStringGetCString(v3, buffer, 1024, 0x8000100u);
  CFRelease(v4);
  if (!CString)
    return 4294967246;
  v6 = open(buffer, 0, *(_OWORD *)&v23.st_dev, *(_OWORD *)&v23.st_uid, *(_OWORD *)&v23.st_atimespec, *(_OWORD *)&v23.st_mtimespec, *(_OWORD *)&v23.st_ctimespec, *(_OWORD *)&v23.st_birthtimespec);
  if (v6 == -1)
    return 4294967253;
  v7 = v6;
  fstat(v6, &v23);
  *a1 = mmap(0, v23.st_size, 1, 2, v7, 0);
  close(v7);
  v8 = (unsigned __int16 *)*a1;
  if (*a1 == (void *)-1)
    return 4294967188;
  *((_DWORD *)a1 + 2) = v23.st_size;
  *((_WORD *)a1 + 6) = bswap32(v8[38]) >> 16;
  v9 = bswap32(v8[39]);
  v10 = HIWORD(v9);
  *((_WORD *)a1 + 7) = HIWORD(v9);
  v11 = malloc_type_calloc(1uLL, 32 * v10, 0x10100402BD90E94uLL);
  a1[2] = v11;
  if (!v11)
    return 4294967188;
  if (*((_WORD *)a1 + 7))
  {
    v12 = 0;
    v13 = (unsigned int *)&v8[2 * v10 + 40];
    do
    {
      v14 = (uint64_t)a1[2] + 32 * v12;
      v15 = bswap32(*v13);
      *(_DWORD *)(v14 + 24) = v15;
      v16 = 2 * v15 + 2;
      *(_DWORD *)(v14 + 28) = bswap32(v13[1]);
      v17 = (int *)(v14 + 28);
      v18 = malloc_type_malloc(4 * v16, 0xC0B35B73uLL);
      *(_QWORD *)v14 = v18;
      if (v16 >= 1)
      {
        v19 = 0;
        do
        {
          v20 = *v13++;
          v18[(unsigned __int16)v19++] = bswap32(v20);
        }
        while (v16 > (unsigned __int16)v19);
      }
      v21 = malloc_type_malloc(*v17, 0x2789951CuLL);
      *(_QWORD *)(v14 + 8) = v21;
      memcpy(v21, v13, *v17);
      v13 = (unsigned int *)((char *)v13 + *v17);
      *(_QWORD *)(v14 + 16) = 0;
      ++v12;
    }
    while (v12 < *((unsigned __int16 *)a1 + 7));
  }
  return 0;
}

CFStringRef sub_20B8CF0A0(const __CFURL *a1)
{
  CFStringRef v1;
  const __CFAllocator *v2;
  __CFArray *Mutable;
  CFStringRef v4;

  v1 = CFURLCopyFileSystemPath(a1, kCFURLPOSIXPathStyle);
  v2 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 10, MEMORY[0x24BDBD690]);
  CFArrayAppendValue(Mutable, v1);
  CFRelease(v1);
  CFArrayAppendValue(Mutable, CFSTR("ja"));
  v4 = CFStringCreateByCombiningStrings(v2, Mutable, CFSTR("/"));
  CFRelease(Mutable);
  return v4;
}

CFStringRef sub_20B8CF134(const __CFURL *a1)
{
  CFStringRef result;
  CFStringRef v2;
  CFURLRef v3;

  if (!a1)
    return sub_20B9AF1E8("ja");
  result = sub_20B8CF0A0(a1);
  if (result)
  {
    v2 = result;
    v3 = CFURLCreateWithFileSystemPath(0, result, kCFURLPOSIXPathStyle, 1u);
    CFRelease(v2);
    return (CFStringRef)v3;
  }
  return result;
}

__CFArray *sub_20B8CF198()
{
  unsigned __int8 v0;
  const __CFAllocator *v1;
  __CFArray *Mutable;
  uint64_t v3;
  uint64_t v4;
  const CFArrayCallBacks *v5;
  int v6;
  const UniChar *v7;
  CFIndex v8;
  CFStringRef v9;
  int v10;
  const UniChar *v11;
  CFIndex v12;
  CFStringRef v13;
  CFArrayRef v14;
  uint64_t i;
  void *values[6];
  _BYTE v18[48];
  _BYTE v19[48];
  _BYTE v20[48];
  _BYTE v21[48];
  _BYTE v22[48];
  _BYTE v23[48];
  _BYTE v24[48];
  _BYTE v25[48];
  _BYTE v26[48];
  _BYTE v27[48];
  _BYTE v28[48];
  _BYTE v29[48];
  _BYTE v30[48];
  _BYTE v31[48];
  _BYTE v32[48];
  _BYTE v33[48];
  _BYTE v34[48];
  _BYTE v35[48];
  _BYTE v36[48];
  _BYTE v37[48];
  _BYTE v38[48];
  _BYTE v39[48];
  _BYTE v40[48];
  _BYTE v41[48];
  _BYTE v42[48];
  _BYTE v43[48];
  _BYTE v44[48];
  _BYTE v45[48];
  _BYTE v46[48];
  _BYTE v47[48];
  _BYTE v48[48];
  _BYTE v49[48];
  _BYTE v50[48];
  _BYTE v51[48];
  _BYTE v52[48];
  _BYTE v53[48];
  _BYTE v54[48];
  _BYTE v55[48];
  _BYTE v56[48];
  _BYTE v57[48];
  _BYTE v58[48];
  _BYTE v59[48];
  _BYTE v60[48];
  _BYTE v61[48];
  _BYTE v62[48];
  _BYTE v63[48];
  _BYTE v64[48];
  _BYTE v65[48];
  _BYTE v66[48];
  _BYTE v67[48];
  _BYTE v68[48];
  _BYTE v69[48];
  _BYTE v70[48];
  _BYTE v71[48];
  _BYTE v72[48];
  _BYTE v73[48];
  _BYTE v74[48];
  _BYTE v75[48];
  _BYTE v76[48];
  _BYTE v77[48];
  _BYTE v78[48];
  _BYTE v79[48];
  _BYTE v80[48];
  _BYTE v81[48];
  _BYTE v82[48];
  _BYTE v83[48];
  _BYTE v84[48];
  _BYTE v85[48];
  _BYTE v86[48];
  _BYTE v87[48];
  _BYTE v88[48];
  _BYTE v89[48];
  _BYTE v90[48];
  _BYTE v91[48];
  _BYTE v92[48];
  _BYTE v93[48];
  _BYTE v94[48];
  _BYTE v95[48];
  _BYTE v96[48];
  _BYTE v97[48];
  _BYTE v98[48];
  _BYTE v99[48];
  _BYTE v100[48];
  uint64_t v101;

  v101 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25472B468);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25472B468))
  {
    sub_20B8D35C0(values, "n", "l");
    sub_20B8D3610(v18);
    sub_20B8D3668(v19, (char *)L"gw", "g");
    sub_20B8D36B8(v20);
    sub_20B8D3668(v21, (char *)L"ch", "c");
    sub_20B8D35C0(v22, "y", "j");
    sub_20B8D35C0(v23, "j", "z");
    sub_20B8D3710(v24);
    sub_20B8D3768(v25, "b", (char *)L"baa");
    sub_20B8D37B8(v26, (char *)L"cha", (char *)L"caa");
    sub_20B8D3808(v27, (char *)L"cheui", (char *)L"ceoi");
    sub_20B8D3808(v28, "c", "c");
    sub_20B8D3808(v29, (char *)L"cheut", (char *)L"ceot");
    sub_20B8D3808(v30, "c", "c");
    sub_20B8D3858(v31);
    sub_20B8D3768(v32, "d", (char *)L"daa");
    sub_20B8D38B0(v33, (char *)L"deui", "d");
    sub_20B8D38B0(v34, (char *)L"deun", "d");
    sub_20B8D38B0(v35, (char *)L"deut", "d");
    sub_20B8D37B8(v36, (char *)L"deu", (char *)L"doe");
    sub_20B8D38B0(v37, (char *)L"deuk", "d");
    sub_20B8D3900(v38, (char *)L"deung", (char *)L"doeng");
    sub_20B8D3768(v39, (char *)L"fa", "f");
    sub_20B8D3768(v40, "g", (char *)L"gaa");
    sub_20B8D38B0(v41, (char *)L"geui", "g");
    sub_20B8D37B8(v42, (char *)L"geu", (char *)L"goe");
    sub_20B8D38B0(v43, (char *)L"geuk", "g");
    sub_20B8D3900(v44, (char *)L"geung", (char *)L"goeng");
    sub_20B8D3950(v45, (char *)L"gwa", (char *)L"gwaa");
    sub_20B8D3768(v46, "h", (char *)L"haa");
    sub_20B8D38B0(v47, (char *)L"heui", "h");
    sub_20B8D37B8(v48, (char *)L"heu", (char *)L"hoe");
    sub_20B8D3900(v49, (char *)L"heung", (char *)L"hoeng");
    sub_20B8D38B0(v50, (char *)L"jeui", "z");
    sub_20B8D38B0(v51, (char *)L"jeun", "z");
    sub_20B8D38B0(v52, (char *)L"jeut", "z");
    sub_20B8D37B8(v53, (char *)L"jeu", (char *)L"zoe");
    sub_20B8D38B0(v54, (char *)L"jeuk", "z");
    sub_20B8D3900(v55, (char *)L"jeung", (char *)L"zoeng");
    sub_20B8D3768(v56, (char *)L"ka", "k");
    sub_20B8D38B0(v57, "k", (char *)L"keoi");
    sub_20B8D37B8(v58, "k", "k");
    sub_20B8D38B0(v59, "k", (char *)L"koek");
    sub_20B8D3900(v60, "k", "k");
    sub_20B8D3950(v61, "k", "k");
    sub_20B8D3768(v62, (char *)L"la", "l");
    sub_20B8D38B0(v63, "l", (char *)L"leoi");
    sub_20B8D38B0(v64, "l", (char *)L"leon");
    sub_20B8D38B0(v65, "l", (char *)L"leot");
    sub_20B8D37B8(v66, "l", "l");
    sub_20B8D38B0(v67, "l", (char *)L"loek");
    sub_20B8D3900(v68, "l", "l");
    sub_20B8D3768(v69, "m", (char *)L"maa");
    sub_20B8D3768(v70, (char *)L"na", "n");
    sub_20B8D38B0(v71, "n", (char *)L"neoi");
    sub_20B8D38B0(v72, "n", (char *)L"neot");
    sub_20B8D3950(v73, "n", "n");
    sub_20B8D3900(v74, (char *)L"neung", (char *)L"noeng");
    sub_20B8D3768(v75, (char *)L"pa", "p");
    sub_20B8D3768(v76, "s", (char *)L"saa");
    sub_20B8D38B0(v77, (char *)L"seui", "s");
    sub_20B8D38B0(v78, (char *)L"seun", "s");
    sub_20B8D38B0(v79, (char *)L"seut", "s");
    sub_20B8D37B8(v80, (char *)L"seu", (char *)L"soe");
    sub_20B8D38B0(v81, (char *)L"seuk", "s");
    sub_20B8D3900(v82, (char *)L"seung", (char *)L"soeng");
    sub_20B8D3768(v83, (char *)L"ta", "t");
    sub_20B8D38B0(v84, "t", (char *)L"teoi");
    sub_20B8D38B0(v85, "t", (char *)L"teon");
    sub_20B8D37B8(v86, "t", "t");
    sub_20B8D3768(v87, "w", (char *)L"waa");
    sub_20B8D3768(v88, (char *)L"ja", "z");
    sub_20B8D3768(v89, "y", (char *)L"jaa");
    sub_20B8D38B0(v90, (char *)L"yeuk", "j");
    sub_20B8D3900(v91, (char *)L"yeung", (char *)L"joeng");
    sub_20B8D38B0(v92, (char *)L"yeui", "j");
    sub_20B8D38B0(v93, (char *)L"yeun", "j");
    sub_20B8D3768(v94, (char *)L"yu", "j");
    sub_20B8D3950(v95, "y", "j");
    sub_20B8D3950(v96, (char *)L"yut", (char *)L"jyut");
    sub_20B8D3768(v97, (char *)L"la", "n");
    sub_20B8D38B0(v98, "l", (char *)L"neoi");
    sub_20B8D38B0(v99, "l", (char *)L"neot");
    sub_20B8D3900(v100, "l", (char *)L"noeng");
    sub_20B8CFDE0((char *)values, 0x54uLL);
    for (i = 498; i != -6; i -= 6)
      sub_20B8CDACC((uint64_t)&values[i]);
    __cxa_atexit((void (*)(void *))sub_20B8CFED0, &qword_25472B4B0, &dword_20B7F7000);
    __cxa_guard_release(&qword_25472B468);
  }
  v1 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0xAAAAAAAAAAAAAAABLL * ((qword_25472B4B8 - qword_25472B4B0) >> 4), MEMORY[0x24BDBD690]);
  v3 = qword_25472B4B0;
  v4 = qword_25472B4B8;
  if (qword_25472B4B0 != qword_25472B4B8)
  {
    v5 = (const CFArrayCallBacks *)MEMORY[0x24BDBD690];
    do
    {
      v6 = *(char *)(v3 + 23);
      if (v6 >= 0)
        v7 = (const UniChar *)v3;
      else
        v7 = *(const UniChar **)v3;
      if (v6 >= 0)
        v8 = *(unsigned __int8 *)(v3 + 23);
      else
        v8 = *(_QWORD *)(v3 + 8);
      v9 = CFStringCreateWithCharacters(0, v7, v8);
      v10 = *(char *)(v3 + 47);
      if (v10 >= 0)
        v11 = (const UniChar *)(v3 + 24);
      else
        v11 = *(const UniChar **)(v3 + 24);
      if (v10 >= 0)
        v12 = *(unsigned __int8 *)(v3 + 47);
      else
        v12 = *(_QWORD *)(v3 + 32);
      v13 = CFStringCreateWithCharacters(0, v11, v12);
      values[0] = (void *)v9;
      values[1] = (void *)v13;
      v14 = CFArrayCreate(v1, (const void **)values, 2, v5);
      CFArrayAppendValue(Mutable, v14);
      if (v14)
        CFRelease(v14);
      if (v13)
        CFRelease(v13);
      if (v9)
        CFRelease(v9);
      v3 += 48;
    }
    while (v3 != v4);
  }
  return Mutable;
}

void sub_20B8CFD18(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 3984; i != -48; i -= 48)
    sub_20B8CDACC(v1 + i);
  __cxa_guard_abort(&qword_25472B468);
  _Unwind_Resume(a1);
}

char *sub_20B8CFDE0(char *result, unint64_t a2)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  qword_25472B4B0 = 0;
  qword_25472B4B8 = 0;
  qword_25472B4C0 = 0;
  if (a2)
  {
    if (a2 >= 0x555555555555556)
      sub_20B80CDD8();
    v2 = result;
    v3 = 3 * a2;
    v4 = 48 * a2;
    v5 = (char *)operator new(48 * a2);
    v6 = 0;
    qword_25472B4B0 = (uint64_t)v5;
    qword_25472B4B8 = (uint64_t)v5;
    qword_25472B4C0 = (uint64_t)&v5[16 * v3];
    do
    {
      result = sub_20B8D39A0(&v5[v6], (__int128 *)&v2[v6]);
      v6 += 48;
    }
    while (v4 != v6);
    qword_25472B4B8 = (uint64_t)&v5[v6];
  }
  return result;
}

void sub_20B8CFE94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20B8D3A34(&a9);
  _Unwind_Resume(a1);
}

void **sub_20B8CFED0(void **a1)
{
  void **v3;

  v3 = a1;
  sub_20B8D3A34(&v3);
  return a1;
}

__CFString *sub_20B8CFF04(const char *a1)
{
  __CFString *Mutable;
  const __CFString *v3;

  Mutable = CFStringCreateMutable(0, 1024);
  v3 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], "/", 0x8000100u);
  CFStringAppend(Mutable, v3);
  if (a1)
    CFStringAppendCString(Mutable, a1, 0x8000100u);
  CFRelease(v3);
  return Mutable;
}

CFStringRef sub_20B8CFF8C(CFURLRef url, CFStringRef pathComponent)
{
  const __CFURL *v2;
  const __CFURL *v3;
  CFStringRef v4;

  if (pathComponent)
  {
    v2 = CFURLCreateCopyAppendingPathComponent(0, url, pathComponent, 0);
    v3 = CFURLCopyAbsoluteURL(v2);
    CFRelease(v2);
    if (v3)
    {
LABEL_3:
      v4 = CFURLCopyFileSystemPath(v3, kCFURLPOSIXPathStyle);
      CFRelease(v3);
      return v4;
    }
  }
  else
  {
    v3 = CFURLCopyAbsoluteURL(url);
    if (v3)
      goto LABEL_3;
  }
  return 0;
}

void sub_20B8D0008(const __CFURL *a1@<X0>, const __CFString *a2@<X1>, char **a3@<X8>)
{
  const __CFString *v4;
  const __CFString *v5;
  CFIndex Length;
  CFIndex MaximumSizeForEncoding;
  char *v8;

  v4 = sub_20B8CFF8C(a1, a2);
  if (!v4)
    goto LABEL_4;
  v5 = v4;
  Length = CFStringGetLength(v4);
  MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
  v8 = (char *)operator new[]();
  LODWORD(MaximumSizeForEncoding) = CFStringGetFileSystemRepresentation(v5, v8, MaximumSizeForEncoding);
  CFRelease(v5);
  if (!(_DWORD)MaximumSizeForEncoding)
  {
    MEMORY[0x20BD39C80](v8, 0x1000C8077774924);
LABEL_4:
    v8 = 0;
  }
  *a3 = v8;
}

void sub_20B8D00A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39C80](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

BOOL sub_20B8D00CC(const __CFURL *a1)
{
  char *v1;
  void **v2;
  int v3;
  void *__p[2];
  char v6;
  stat buffer[7];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (CFURLGetFileSystemRepresentation(a1, 1u, (UInt8 *)buffer, 1024))
    v1 = (char *)buffer;
  else
    v1 = (char *)&unk_20BA71DF9;
  sub_20B80BBD0(__p, v1);
  if (v6 >= 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  v3 = stat((const char *)v2, buffer);
  if (v6 < 0)
    operator delete(__p[0]);
  return v3 == 0;
}

void sub_20B8D017C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B8D01A0(const __CFURL *a1@<X0>, const __CFString *a2@<X1>, const __CFURL *a3@<X2>, const __CFString *a4@<X3>, unsigned int a5@<W4>, char **a6@<X8>)
{
  const __CFAllocator *v12;
  CFMutableStringRef Mutable;
  const __CFString *v14;
  CFMutableStringRef MutableCopy;
  const __CFString *v16;
  const __CFString *v17;
  CFMutableStringRef v18;
  const __CFString *v19;
  const __CFURL *v20;
  const __CFURL *v21;
  const __CFString *v22;
  CFMutableStringRef v23;
  const __CFString *v24;
  CFIndex Length;
  CFIndex MaximumSizeForEncoding;
  char *v27;
  CFRange v28;
  CFRange v29;
  CFRange v30;

  v12 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0);
  v14 = sub_20B8CFF8C(a1, 0);
  if (v14)
  {
    MutableCopy = CFStringCreateMutableCopy(0, 0, v14);
    v28.length = CFStringGetLength(MutableCopy);
    v28.location = 0;
    CFStringFindAndReplace(MutableCopy, CFSTR(" "), CFSTR("\\ "), v28, 0);
  }
  else
  {
    MutableCopy = 0;
  }
  v16 = CFStringCreateWithFormat(v12, 0, CFSTR("-p -d %@ -N 2"), MutableCopy);
  if (MutableCopy)
    CFRelease(MutableCopy);
  CFStringAppend(Mutable, v16);
  CFRelease(v14);
  if (a2)
  {
    v17 = sub_20B8CFF8C(a1, a2);
    if (v17)
    {
      v18 = CFStringCreateMutableCopy(0, 0, v17);
      v29.length = CFStringGetLength(v18);
      v29.location = 0;
      CFStringFindAndReplace(v18, CFSTR(" "), CFSTR("\\ "), v29, 0);
    }
    else
    {
      v18 = 0;
    }
    v19 = CFStringCreateWithFormat(0, 0, CFSTR(" -u %@"), v18);
    if (v18)
      CFRelease(v18);
    CFStringAppend(Mutable, v19);
    CFRelease(v19);
    CFRelease(v17);
  }
  if (a4)
  {
    v20 = a3;
    if (!a3)
    {
      v21 = (const __CFURL *)CFCopyHomeDirectoryURLForUser();
      v20 = CFURLCreateCopyAppendingPathComponent(0, v21, CFSTR("/Library/Dictionaries"), 1u);
      CFRelease(v21);
    }
    v22 = sub_20B8CFF8C(v20, a4);
    if (v22)
    {
      v23 = CFStringCreateMutableCopy(0, 0, v22);
      v30.length = CFStringGetLength(v23);
      v30.location = 0;
      CFStringFindAndReplace(v23, CFSTR(" "), CFSTR("\\ "), v30, 0);
    }
    else
    {
      v23 = 0;
    }
    v24 = CFStringCreateWithFormat(0, 0, CFSTR(" -g %@"), v23);
    if (v23)
      CFRelease(v23);
    CFStringAppend(Mutable, v24);
    CFRelease(v24);
    CFRelease(v22);
    if (!a3 && v20)
      CFRelease(v20);
  }
  if (a5 <= 2)
    CFStringAppend(Mutable, *((CFStringRef *)&off_24C49BCC8 + (int)a5));
  Length = CFStringGetLength(Mutable);
  MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
  v27 = (char *)operator new[]();
  *a6 = v27;
  CFStringGetCString(Mutable, v27, MaximumSizeForEncoding, 0x8000100u);
  CFRelease(Mutable);
  if (v16)
    CFRelease(v16);
}

void sub_20B8D04C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  const void *v4;
  va_list va;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, const void *);
  sub_20B87E150((const void **)va, 0);
  sub_20B87E150((const void **)va1, 0);
  _Unwind_Resume(a1);
}

void sub_20B8D054C(char *cStr@<X0>, CFIndex *a2@<X1>, UniChar **a3@<X8>)
{
  const __CFString *v5;
  CFIndex Length;
  UniChar *v7;
  CFRange v8;

  v5 = CFStringCreateWithCStringNoCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], cStr, 0x8000100u, (CFAllocatorRef)*MEMORY[0x24BDBD258]);
  Length = CFStringGetLength(v5);
  v7 = (UniChar *)operator new[]();
  *a3 = v7;
  v8.location = 0;
  v8.length = Length;
  CFStringGetCharacters(v5, v8, v7);
  CFRelease(v5);
  if (a2)
    *a2 = Length;
}

void sub_20B8D05FC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  *v1 = 0;
  MEMORY[0x20BD39C80](v2, 0x1000C80BDFB0063);
  _Unwind_Resume(a1);
}

void sub_20B8D0624(const __CFString *a1@<X0>, CFIndex *a2@<X1>, _QWORD *a3@<X8>)
{
  CFIndex Length;
  UniChar *v7;
  CFRange v8;

  if (a1)
  {
    Length = CFStringGetLength(a1);
    v7 = (UniChar *)operator new[]();
    *a3 = v7;
    v8.location = 0;
    v8.length = Length;
    CFStringGetCharacters(a1, v8, v7);
  }
  else
  {
    Length = 0;
    *a3 = operator new[]();
  }
  if (a2)
    *a2 = Length;
}

void sub_20B8D06CC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  *v1 = 0;
  MEMORY[0x20BD39C80](v2, 0x1000C80BDFB0063);
  _Unwind_Resume(a1);
}

void sub_20B8D06F4(const __CFString *a1@<X0>, CFIndex a2@<X1>, CFIndex a3@<X2>, UniChar **a4@<X8>)
{
  UniChar *v8;
  CFRange v9;

  v8 = (UniChar *)operator new[]();
  *a4 = v8;
  v9.location = a2;
  v9.length = a3;
  CFStringGetCharacters(a1, v9, v8);
}

void sub_20B8D0768(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  *v1 = 0;
  MEMORY[0x20BD39C80](v2, 0x1000C80BDFB0063);
  _Unwind_Resume(a1);
}

void sub_20B8D0790(const __CFString *a1@<X0>, UniChar **a2@<X8>)
{
  CFIndex Length;
  __int16 v5;
  CFRange v6;

  if (a1)
  {
    Length = CFStringGetLength(a1);
    v5 = 0;
    sub_20B8D3AA4(a2, Length, &v5);
    if (Length)
    {
      v6.location = 0;
      v6.length = Length;
      CFStringGetCharacters(a1, v6, *a2);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
}

void sub_20B8D0804(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B8D0820@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  _WORD *v9;
  unsigned int v10;

  v6 = 2 * a2;
  result = operator new[]();
  v8 = result;
  if (a2)
  {
    v9 = (_WORD *)result;
    do
    {
      v10 = *a1++;
      result = MEMORY[0x20BD3A760](v10);
      *v9++ = result;
      v6 -= 2;
    }
    while (v6);
  }
  *a3 = v8;
  return result;
}

uint64_t sub_20B8D0898@<X0>(unsigned __int16 *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _WORD *v7;
  uint64_t v8;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  result = sub_20B87CBE0(a3, a2, 0);
  if (a2)
  {
    if (*(char *)(a3 + 23) >= 0)
      v7 = (_WORD *)a3;
    else
      v7 = *(_WORD **)a3;
    v8 = 2 * a2;
    do
    {
      result = MEMORY[0x20BD3A760](*a1);
      *v7++ = result;
      ++a1;
      v8 -= 2;
    }
    while (v8);
  }
  return result;
}

void sub_20B8D0908(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B8D0928@<X0>(char *a1@<X0>, _QWORD *a2@<X8>)
{
  UniChar *v3;
  _QWORD *result;
  UniChar *v5;
  unint64_t v6;

  v6 = 0;
  if (a1[23] < 0)
    a1 = *(char **)a1;
  sub_20B8D054C(a1, (CFIndex *)&v6, &v5);
  v3 = v5;
  result = sub_20B877ED0(a2, v5, v6);
  if (v3)
    return (_QWORD *)MEMORY[0x20BD39C80](v3, 0x1000C80BDFB0063);
  return result;
}

void sub_20B8D0998(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    MEMORY[0x20BD39C80](v1, 0x1000C80BDFB0063);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B8D09C0@<X0>(const __CFString *a1@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  _QWORD *result;
  void *v5;
  unint64_t v6;

  v6 = 0;
  sub_20B8D0624(a1, (CFIndex *)&v6, &v5);
  v3 = v5;
  result = sub_20B877ED0(a2, v5, v6);
  if (v3)
    return (_QWORD *)MEMORY[0x20BD39C80](v3, 0x1000C80BDFB0063);
  return result;
}

void sub_20B8D0A20(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    MEMORY[0x20BD39C80](v1, 0x1000C80BDFB0063);
  _Unwind_Resume(exception_object);
}

UniChar *sub_20B8D0A48(const __CFString *a1, CFIndex *a2, char *a3)
{
  UniChar *CharactersPtr;
  CFIndex Length;
  char v8;
  CFIndex v9;
  CFRange v11;

  CharactersPtr = (UniChar *)CFStringGetCharactersPtr(a1);
  Length = CFStringGetLength(a1);
  *a2 = Length;
  if (CharactersPtr)
  {
    v8 = 0;
  }
  else
  {
    v9 = Length;
    CharactersPtr = (UniChar *)operator new[]();
    v11.location = 0;
    v11.length = v9;
    CFStringGetCharacters(a1, v11, CharactersPtr);
    v8 = 1;
  }
  *a3 = v8;
  return CharactersPtr;
}

BOOL sub_20B8D0AE4(CFStringRef theString)
{
  CFMutableStringRef MutableCopy;
  const __CFLocale *System;
  _BOOL8 v4;

  MutableCopy = CFStringCreateMutableCopy(0, 0, theString);
  System = CFLocaleGetSystem();
  CFStringLowercase(MutableCopy, System);
  v4 = CFStringCompare(theString, MutableCopy, 0) == kCFCompareEqualTo;
  CFRelease(MutableCopy);
  return v4;
}

uint64_t sub_20B8D0B48(uint64_t result, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char v9;

  if (result && a2)
  {
    v5 = result;
    v6 = 0;
    v9 = 0;
    v7 = a2 - 1;
    do
    {
      if (v6 >= v7)
      {
        v8 = 1;
      }
      else
      {
        v8 = 1;
        if ((*(_WORD *)(v5 + 2 * v6) & 0xFC00) == 0xD800)
        {
          if ((*(_WORD *)(v5 + 2 * v6 + 2) & 0xFC00) == 0xDC00)
            v8 = 2;
          else
            v8 = 1;
        }
      }
      result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, char *))(a3 + 16))(a3, v6, v8, &v9);
      v6 += v8;
    }
    while (v6 < a2 && !v9);
  }
  return result;
}

const __CFString *sub_20B8D0C18(const __CFString *result, int a2, uint64_t a3)
{
  const __CFString *v5;
  CFIndex v6;
  CFIndex v7;
  CFRange RangeOfComposedCharactersAtIndex;
  char v9;

  if (result)
  {
    v5 = result;
    result = (const __CFString *)CFStringGetLength(result);
    if (result)
    {
      v6 = (CFIndex)result;
      if (a2)
        v7 = (CFIndex)&result[-1].length + 7;
      else
        v7 = 0;
      v9 = 0;
      while (1)
      {
        RangeOfComposedCharactersAtIndex = CFStringGetRangeOfComposedCharactersAtIndex(v5, v7);
        result = (const __CFString *)(*(uint64_t (**)(uint64_t, CFIndex, CFIndex, char *))(a3 + 16))(a3, RangeOfComposedCharactersAtIndex.location, RangeOfComposedCharactersAtIndex.length, &v9);
        if (v9)
          break;
        if (a2)
        {
          v7 = RangeOfComposedCharactersAtIndex.location - 1;
          if (RangeOfComposedCharactersAtIndex.location < 1)
            return result;
        }
        else
        {
          v7 = RangeOfComposedCharactersAtIndex.location + RangeOfComposedCharactersAtIndex.length;
          if (RangeOfComposedCharactersAtIndex.location + RangeOfComposedCharactersAtIndex.length >= v6)
            return result;
        }
      }
    }
  }
  return result;
}

CFURLRef sub_20B8D0CC0(const __CFURL *a1, const __CFString *a2)
{
  CFURLRef v2;
  char *v5;
  const char *v6;
  char *v8[2];
  char v9;
  stat buffer[7];
  uint64_t v11;

  v2 = 0;
  v11 = *MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    if (CFURLGetFileSystemRepresentation(a1, 1u, (UInt8 *)buffer, 1024))
      v5 = (char *)buffer;
    else
      v5 = (char *)&unk_20BA71DF9;
    sub_20B80BBD0(v8, v5);
    if (v9 < 0)
    {
      if (!v8[1])
      {
        v2 = 0;
LABEL_18:
        operator delete(v8[0]);
        return v2;
      }
      v6 = v8[0];
    }
    else
    {
      if (!v9)
        return 0;
      v6 = (const char *)v8;
    }
    if (stat(v6, buffer) < 0)
      v2 = 0;
    else
      v2 = CFURLCreateCopyAppendingPathComponent(0, a1, a2, 1u);
    if (v9 < 0)
      goto LABEL_18;
  }
  return v2;
}

void sub_20B8D0DC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

const __CFURL *sub_20B8D0DEC(CFURLRef url, CFStringRef pathComponent)
{
  const __CFURL *v2;
  const __CFURL *v3;

  v2 = CFURLCreateCopyAppendingPathComponent(0, url, pathComponent, 1u);
  v3 = v2;
  if (v2 && !sub_20B8D00CC(v2))
  {
    CFRelease(v3);
    return 0;
  }
  return v3;
}

uint64_t sub_20B8D0E3C(int a1)
{
  int v1;

  v1 = a1 - 1;
  if ((a1 - 1) >= 0x12 || ((0x3FFDBu >> v1) & 1) == 0)
    abort();
  return dword_20BA43AD4[v1];
}

CFComparisonResult sub_20B8D0E78(const __CFLocale *a1)
{
  const __CFString *Value;
  const __CFString *v3;
  CFComparisonResult result;

  if (!a1)
    return 0xFFFFFFFFLL;
  Value = (const __CFString *)CFLocaleGetValue(a1, (CFLocaleKey)*MEMORY[0x24BDBD418]);
  v3 = (const __CFString *)CFLocaleGetValue(a1, (CFLocaleKey)*MEMORY[0x24BDBD420]);
  if (CFStringCompare(Value, CFSTR("zh"), 0))
  {
    if (CFStringCompare(Value, CFSTR("yue"), 0))
    {
      result = CFStringCompare(Value, CFSTR("ja"), 0);
      if (result)
      {
        if (CFStringCompare(Value, CFSTR("ko"), 0))
        {
          if (CFStringCompare(Value, CFSTR("th"), 0))
            return 0xFFFFFFFFLL;
          else
            return 6;
        }
        else
        {
          return 4;
        }
      }
    }
    else if (v3 && CFStringCompare(v3, CFSTR("Hant"), 0) == kCFCompareEqualTo)
    {
      return 5;
    }
    else
    {
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    if (!v3)
      return 3;
    if (CFStringCompare(v3, CFSTR("Hans"), 0) == kCFCompareEqualTo)
      return 1;
    if (CFStringCompare(v3, CFSTR("Hant"), 0))
      return 3;
    return 2;
  }
  return result;
}

CFLocaleRef sub_20B8D0FCC(unsigned int a1)
{
  char *v1;
  const __CFString *v2;
  CFLocaleRef v3;

  v1 = sub_20B8D101C(a1);
  v2 = CFStringCreateWithCString(0, v1, 0x8000100u);
  v3 = CFLocaleCreate(0, v2);
  CFRelease(v2);
  return v3;
}

char *sub_20B8D101C(unsigned int a1)
{
  if (a1 >= 7)
    abort();
  return off_24C49BCE0[a1];
}

const char *sub_20B8D1044(int a1, __int16 a2)
{
  int v2;
  const char *result;
  const char *v4;
  const char *v5;
  BOOL v6;

  v2 = a1 - 1;
  result = "zh-Hans-Stroke";
  switch(v2)
  {
    case 0:
      v4 = "ja-Romaji";
      v5 = "ja-Kana";
      v6 = (a2 & 0x20) == 0;
      goto LABEL_13;
    case 1:
      v4 = "zh-Hans-Pinyin10";
      v5 = "zh-Hans-Pinyin";
      goto LABEL_12;
    case 3:
      v4 = "zh-Hant-Pinyin10";
      v5 = "zh-Hant-Pinyin";
      goto LABEL_12;
    case 4:
      return "zh-Hant-Zhuyin";
    case 6:
      return result;
    case 7:
      return "zh-Hant-Stroke";
    case 8:
      return "zh-Hant-Cangjie";
    case 9:
      return "zh-Hans-Wubixing";
    case 10:
      return "zh-Hans-HWR";
    case 11:
      return "zh-Hant-HWR";
    case 12:
      v4 = "yue-Hant-Pinyin10";
      v5 = "yue-Hant-Pinyin";
LABEL_12:
      v6 = (a2 & 0x4000) == 0;
LABEL_13:
      if (v6)
        result = v5;
      else
        result = v4;
      break;
    case 13:
      result = "yue-Hant-HWR";
      break;
    case 14:
      result = "yue-Hant-Stroke";
      break;
    case 15:
      result = "yue-Hant-Cangjie";
      break;
    case 16:
      result = "ko";
      break;
    default:
      result = "???";
      break;
  }
  return result;
}

uint64_t sub_20B8D1150(char *a1)
{
  int v2;
  uint64_t result;

  if (!a1)
    return 0xFFFFFFFFLL;
  v2 = sub_20B8D1244(a1);
  if (v2)
    return sub_20B8D0E3C(v2);
  if (!strncmp("zh-Hans", a1, 7uLL))
    return 1;
  if (!strncmp("zh-Hant", a1, 7uLL))
    return 2;
  if (!strncmp("yue-Hant", a1, 8uLL))
    return 5;
  result = strncmp("ja", a1, 2uLL);
  if ((_DWORD)result)
  {
    if (!strncmp("ko", a1, 2uLL))
    {
      return 4;
    }
    else if (!strncmp("th", a1, 2uLL))
    {
      return 6;
    }
    else
    {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t sub_20B8D1244(char *__s2)
{
  uint64_t v2;

  if (!__s2)
    return 0;
  if (!strncmp("zh-Hans-Pinyin", __s2, 0xEuLL))
    return 2;
  if (!strncmp("zh-Hans-Stroke", __s2, 0xFuLL))
    return 7;
  if (!strncmp("zh-Hant-Stroke", __s2, 0xFuLL))
    return 8;
  if (!strncmp("zh-Hant-Pinyin", __s2, 0xEuLL))
    return 4;
  if (!strncmp("yue-Hant-Pinyin", __s2, 0xFuLL))
    return 13;
  if (!strncmp("yue-Hant-HWR", __s2, 0xCuLL))
    return 14;
  v2 = 15;
  if (strncmp("yue-Hant-Stroke", __s2, 0xFuLL))
  {
    v2 = 16;
    if (strncmp("yue-Hant-Cangjie", __s2, 0x10uLL))
    {
      if (!strncmp("zh-Hant-Zhuyin", __s2, 0xEuLL))
      {
        return 5;
      }
      else if (!strncmp("zh-Hant-Cangjie", __s2, 0xEuLL))
      {
        return 9;
      }
      else if (!strncmp("ja", __s2, 2uLL))
      {
        return 1;
      }
      else if (!strncmp("ko", __s2, 2uLL))
      {
        return 17;
      }
      else
      {
        return 0;
      }
    }
  }
  return v2;
}

DIR *sub_20B8D13EC(const char *a1, uint64_t a2)
{
  DIR *result;
  DIR *v4;
  dirent *v5;
  char v6;

  v6 = 0;
  result = opendir(a1);
  if (result)
  {
    v4 = result;
    do
    {
      v5 = readdir(v4);
      if (!v5)
        break;
      (*(void (**)(uint64_t, char *, char *))(a2 + 16))(a2, v5->d_name, &v6);
    }
    while (!v6);
    return (DIR *)closedir(v4);
  }
  return result;
}

uint64_t sub_20B8D1450(const __CFString *a1)
{
  uint64_t v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2000000000;
  v7 = 0;
  v3[0] = MEMORY[0x24BDAC760];
  v3[1] = 0x40000000;
  v3[2] = sub_20B8D14F4;
  v3[3] = &unk_24C46C178;
  v3[4] = &v4;
  sub_20B8D0C18(a1, 0, (uint64_t)v3);
  v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_20B8D14DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8D14F4(uint64_t result)
{
  ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24);
  return result;
}

uint64_t sub_20B8D150C(const char *a1)
{
  char *v2;
  const char *v3;
  uint64_t v4;

  v2 = getenv(a1);
  if (v2)
    return *v2 == 49;
  else
    return sub_20B93AB18((uint64_t)a1, v3, v4);
}

const __CFString *sub_20B8D154C@<X0>(const __CFString *result@<X0>, char **a2@<X8>)
{
  const __CFString *v3;
  CFIndex Length;
  CFIndex v5;
  char *v6;

  if (result)
  {
    v3 = result;
    Length = CFStringGetLength(result);
    v5 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
    v6 = (char *)operator new[]();
    *a2 = v6;
    return (const __CFString *)CFStringGetCString(v3, v6, v5, 0x8000100u);
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

void sub_20B8D15CC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  *v1 = 0;
  MEMORY[0x20BD39C80](v2, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

void sub_20B8D15F4(void *__src@<X0>, unint64_t a2@<X1>, std::string *a3@<X8>)
{
  unsigned __int8 v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  void *__p[2];
  unsigned __int8 v11;

  v6 = atomic_load((unsigned __int8 *)&qword_25472CBE0);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25472CBE0))
  {
    v9 = operator new();
    *(_OWORD *)(v9 + 8) = xmmword_20BA3B220;
    *(_DWORD *)(v9 + 24) = 0;
    *(_QWORD *)v9 = &unk_24C46B760;
    xmmword_25472CB20 = 0u;
    *(_OWORD *)algn_25472CB30 = 0u;
    xmmword_25472CB40 = 0u;
    qword_25472CB50 = v9;
    unk_25472CB58 = 0u;
    unk_25472CB68 = 0u;
    unk_25472CB78 = 0u;
    unk_25472CB88 = 0u;
    unk_25472CB98 = 0u;
    unk_25472CBA8 = 0u;
    unk_25472CBB8 = 0u;
    unk_25472CBC8 = 0u;
    qword_25472CBD8 = 0;
    __cxa_atexit((void (*)(void *))sub_20B8AE934, &xmmword_25472CB20, &dword_20B7F7000);
    __cxa_guard_release(&qword_25472CBE0);
  }
  sub_20B877ED0(__p, __src, a2);
  v7 = v11;
  if ((v11 & 0x80u) == 0)
    v8 = (char *)__p;
  else
    v8 = (char *)__p[0];
  if ((v11 & 0x80u) != 0)
    v7 = (unint64_t)__p[1];
  sub_20B8D3CAC((uint64_t)&xmmword_25472CB20, v8, &v8[2 * v7], a3);
  if ((char)v11 < 0)
    operator delete(__p[0]);
}

void sub_20B8D1730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_guard_abort(&qword_25472CBE0);
  _Unwind_Resume(a1);
}

char *sub_20B8D179C@<X0>(char *__s@<X0>, int __c@<W2>, uint64_t a3@<X1>, uint64_t *a4@<X8>)
{
  char *v5;
  char *v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v12 = __s;
  if ((a3 & 0x8000000000000000) == 0)
  {
    v5 = __s;
    v7 = 0;
    v8 = (unint64_t)&__s[a3];
    do
    {
      v11 = 0;
      v9 = (char *)memchr(v5, __c, v8 - (_QWORD)v5);
      if (v9)
        v10 = v9;
      else
        v10 = (char *)v8;
      v11 = v10;
      if ((unint64_t)v7 >= a4[2])
      {
        __s = (char *)sub_20B8D3B24(a4, &v12, &v11);
        v7 = __s;
      }
      else
      {
        __s = (char *)sub_20B83DFAC(v7, v5, v10, v10 - v5);
        v7 += 24;
        a4[1] = (uint64_t)v7;
      }
      a4[1] = (uint64_t)v7;
      v5 = v11 + 1;
      v12 = v11 + 1;
    }
    while ((unint64_t)(v11 + 1) <= v8);
  }
  return __s;
}

void sub_20B8D1864(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B83AFD0((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8D1888(CFStringRef theString)
{
  const __CFString *v1;
  CFIndex Length;
  uint64_t v3;
  const UniChar *CharactersPtr;
  const char *CStringPtr;
  uint64_t v6;
  int64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  CFIndex v11;
  UniChar v12;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  CFIndex v17;
  UniChar buffer[64];
  CFStringRef theStringa;
  const UniChar *v21;
  const char *v22;
  uint64_t v23;
  CFIndex v24;
  int64_t v25;
  int64_t v26;
  CFRange v27;

  v1 = theString;
  if (theString)
  {
    Length = CFStringGetLength(theString);
    if (Length)
    {
      v3 = Length;
      theStringa = v1;
      v23 = 0;
      v24 = Length;
      CharactersPtr = CFStringGetCharactersPtr(v1);
      CStringPtr = 0;
      v21 = CharactersPtr;
      if (!CharactersPtr)
        CStringPtr = CFStringGetCStringPtr(v1, 0x600u);
      v25 = 0;
      v26 = 0;
      v22 = CStringPtr;
      if (v3 < 1)
      {
        LOBYTE(v1) = 1;
      }
      else
      {
        v6 = 0;
        v7 = 0;
        LOBYTE(v1) = 0;
        v8 = 0;
        v9 = 64;
        do
        {
          if ((unint64_t)v8 >= 4)
            v10 = 4;
          else
            v10 = v8;
          v11 = v24;
          if (v24 <= v8)
          {
            v12 = 0;
          }
          else if (v21)
          {
            v12 = v21[v8 + v23];
          }
          else if (v22)
          {
            v12 = v22[v23 + v8];
          }
          else
          {
            if (v26 <= v8 || v7 > v8)
            {
              v14 = v10 + v6;
              v15 = v9 - v10;
              v16 = v8 - v10;
              v17 = v16 + 64;
              if (v16 + 64 >= v24)
                v17 = v24;
              v25 = v16;
              v26 = v17;
              if (v24 >= v15)
                v11 = v15;
              v27.length = v11 + v14;
              v27.location = v16 + v23;
              CFStringGetCharacters(theStringa, v27, buffer);
              v7 = v25;
            }
            v12 = buffer[v8 - v7];
          }
          if ((unsigned __int16)(v12 - 48) >= 0xAu && (unsigned __int16)(v12 + 240) >= 0xAu)
            break;
          LOBYTE(v1) = ++v8 >= v3;
          --v6;
          ++v9;
        }
        while (v3 != v8);
      }
    }
    else
    {
      LOBYTE(v1) = 0;
    }
  }
  return v1 & 1;
}

BOOL sub_20B8D1A28(CFStringRef theString)
{
  unsigned __int8 v2;
  CFIndex Length;
  uint64_t v4;
  const char *CStringPtr;
  BOOL v6;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFIndex v12;
  UniChar v13;
  int64_t v14;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  CFIndex v19;
  UniChar v20;
  UniChar buffer[8];
  __int128 v22;
  __int128 v23;
  _OWORD v24[5];
  CFStringRef v25;
  const UniChar *CharactersPtr;
  const char *v27;
  uint64_t v28;
  CFIndex v29;
  int64_t v30;
  int64_t v31;
  uint64_t v32;
  CFRange v33;

  v32 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25472B470);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25472B470))
  {
    v23 = xmmword_20BA43A72;
    v24[0] = unk_20BA43A82;
    *(_OWORD *)((char *)v24 + 14) = unk_20BA43A90;
    *(_OWORD *)buffer = xmmword_20BA43A52;
    v22 = unk_20BA43A62;
    sub_20B89BA68((uint64_t)qword_25472B4E0, buffer, 39);
    __cxa_atexit((void (*)(void *))sub_20B89BA64, qword_25472B4E0, &dword_20B7F7000);
    __cxa_guard_release(&qword_25472B470);
  }
  if (theString && (Length = CFStringGetLength(theString), (v4 = Length) != 0))
  {
    v25 = theString;
    v28 = 0;
    v29 = Length;
    CharactersPtr = CFStringGetCharactersPtr(theString);
    if (CharactersPtr)
      CStringPtr = 0;
    else
      CStringPtr = CFStringGetCStringPtr(theString, 0x600u);
    v27 = CStringPtr;
    v30 = 0;
    v31 = 0;
    if (v4 < 1)
    {
      return 1;
    }
    else
    {
      v8 = 0;
      v6 = 0;
      v9 = 0;
      v10 = 64;
      do
      {
        if ((unint64_t)v9 >= 4)
          v11 = 4;
        else
          v11 = v9;
        v12 = v29;
        if (v29 <= v9)
        {
          v13 = 0;
        }
        else if (CharactersPtr)
        {
          v13 = CharactersPtr[v9 + v28];
        }
        else if (v27)
        {
          v13 = v27[v28 + v9];
        }
        else
        {
          v14 = v30;
          if (v31 <= v9 || v30 > v9)
          {
            v16 = v11 + v8;
            v17 = v10 - v11;
            v18 = v9 - v11;
            v19 = v18 + 64;
            if (v18 + 64 >= v29)
              v19 = v29;
            v30 = v18;
            v31 = v19;
            if (v29 >= v17)
              v12 = v17;
            v33.length = v12 + v16;
            v33.location = v18 + v28;
            CFStringGetCharacters(v25, v33, buffer);
            v14 = v30;
          }
          v13 = buffer[v9 - v14];
        }
        v20 = v13;
        if (!sub_20B886524(qword_25472B4E0, &v20))
          break;
        v6 = ++v9 >= v4;
        --v8;
        ++v10;
      }
      while (v4 != v9);
    }
  }
  else
  {
    return 0;
  }
  return v6;
}

void sub_20B8D1C78(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472B470);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B8D1C98@<X0>(const __CFString *a1@<X0>, _QWORD *a2@<X8>)
{
  char *__s;

  sub_20B8D154C(a1, &__s);
  if (__s)
  {
    sub_20B80BBD0(a2, __s);
    JUMPOUT(0x20BD39C80);
  }
  return sub_20B80BBD0(a2, (char *)&unk_20BA6EBAE);
}

void sub_20B8D1D08(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39C80](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

void sub_20B8D1D2C(const __CFString *a1@<X0>, _QWORD *a2@<X8>)
{
  CFIndex Length;
  UniChar *buffer;
  UniChar *v6;
  uint64_t v7;
  CFRange v8;

  Length = CFStringGetLength(a1);
  buffer = 0;
  v6 = 0;
  v7 = 0;
  sub_20B87C6B4((uint64_t)&buffer, Length);
  v8.location = 0;
  v8.length = Length;
  CFStringGetCharacters(a1, v8, buffer);
  sub_20B82E068(a2, buffer, 2 * Length);
  if (buffer)
  {
    v6 = buffer;
    operator delete(buffer);
  }
}

void sub_20B8D1DAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_20B8D1DC8@<X0>(std::string *__str@<X0>, std::string *a2@<X8>)
{
  int v2;
  std::string *v3;
  std::string::size_type size;
  char *v5;
  uint64_t v6;
  int v7;
  char v8;

  v2 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
  if (v2 >= 0)
    v3 = __str;
  else
    v3 = (std::string *)__str->__r_.__value_.__r.__words[0];
  size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  if (v2 < 0)
    size = __str->__r_.__value_.__l.__size_;
  v5 = (char *)&v3[-1].__r_.__value_.__r.__words[2] + 7;
  v6 = -1;
  while (size)
  {
    v7 = v5[size--];
    ++v6;
    if (v7 == 47)
    {
      if (size != -1)
      {
        if (v6)
          return std::string::basic_string(a2, __str, size + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v8);
        else
          return (std::string *)sub_20B80BBD0(a2, (char *)&unk_20BA6EBAE);
      }
      break;
    }
  }
  if (v2 < 0)
    return (std::string *)sub_20B80ACE0(a2, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
  *a2 = *__str;
  return __str;
}

uint64_t *sub_20B8D1E80(unsigned int a1)
{
  unsigned __int8 v1;
  uint8x8_t v2;
  unint64_t v3;
  uint64_t **j;
  unint64_t v5;
  unsigned int v7;
  int v8;
  uint64_t i;
  void *v10;
  void *__p;
  _BYTE *v12;
  int v13;
  __int16 v14;
  void *v15;
  _BYTE *v16;
  void *v17;
  _BYTE *v18;
  int v19;
  __int16 v20;
  void *v21;
  _BYTE *v22;
  int v23;
  __int16 v24;
  void *v25;
  _BYTE *v26;
  int v27;
  __int16 v28;
  void *v29;
  _BYTE *v30;
  int v31;
  __int16 v32;
  void *v33;
  _BYTE *v34;
  int v35;
  __int16 v36;
  void *v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int16 v41;
  _QWORD v42[3];
  __int16 v43;
  _QWORD v44[3];
  __int16 v45;
  _QWORD v46[3];
  __int16 v47;
  _QWORD v48[3];
  __int16 v49;
  _QWORD v50[3];
  __int16 v51;
  _QWORD v52[3];
  __int16 v53;
  _QWORD v54[3];
  __int16 v55;
  uint64_t v56;
  _QWORD v57[3];

  v57[2] = *MEMORY[0x24BDAC8D0];
  v1 = atomic_load((unsigned __int8 *)&qword_25472B478);
  if ((v1 & 1) == 0)
  {
    v7 = a1;
    v8 = __cxa_guard_acquire(&qword_25472B478);
    a1 = v7;
    if (v8)
    {
      v35 = 6422625;
      v36 = 99;
      sub_20B883F30(&v37, &v35, 3);
      v41 = 10123;
      memset(v42, 0, sizeof(v42));
      sub_20B87ACC8(v42, v37, (uint64_t)v38, (v38 - (_BYTE *)v37) >> 1);
      v31 = 6619236;
      v32 = 102;
      sub_20B883F30(&v33, &v31, 3);
      v43 = 10124;
      memset(v44, 0, sizeof(v44));
      sub_20B87ACC8(v44, v33, (uint64_t)v34, (v34 - (_BYTE *)v33) >> 1);
      v27 = 6815847;
      v28 = 105;
      sub_20B883F30(&v29, &v27, 3);
      v45 = 10125;
      memset(v46, 0, sizeof(v46));
      sub_20B87ACC8(v46, v29, (uint64_t)v30, (v30 - (_BYTE *)v29) >> 1);
      v23 = 7012458;
      v24 = 108;
      sub_20B883F30(&v25, &v23, 3);
      v47 = 10126;
      memset(v48, 0, sizeof(v48));
      sub_20B87ACC8(v48, v25, (uint64_t)v26, (v26 - (_BYTE *)v25) >> 1);
      v19 = 7209069;
      v20 = 111;
      sub_20B883F30(&v21, &v19, 3);
      v49 = 10127;
      memset(v50, 0, sizeof(v50));
      sub_20B87ACC8(v50, v21, (uint64_t)v22, (v22 - (_BYTE *)v21) >> 1);
      v40 = 0x73007200710070;
      sub_20B883F30(&v17, &v40, 4);
      v51 = 10128;
      memset(v52, 0, sizeof(v52));
      sub_20B87ACC8(v52, v17, (uint64_t)v18, (v18 - (_BYTE *)v17) >> 1);
      v13 = 7667828;
      v14 = 118;
      sub_20B883F30(&v15, &v13, 3);
      v53 = 10129;
      memset(v54, 0, sizeof(v54));
      sub_20B87ACC8(v54, v15, (uint64_t)v16, (v16 - (_BYTE *)v15) >> 1);
      v39 = 0x7A007900780077;
      sub_20B883F30(&__p, &v39, 4);
      v55 = 10130;
      v57[0] = 0;
      v57[1] = 0;
      v56 = 0;
      sub_20B87ACC8(&v56, __p, (uint64_t)v12, (v12 - (_BYTE *)__p) >> 1);
      sub_20B8D4078(&v41, 8);
      for (i = 0; i != -32; i -= 4)
      {
        v10 = (void *)v57[i - 1];
        if (v10)
        {
          v57[i] = v10;
          operator delete(v10);
        }
      }
      if (__p)
      {
        v12 = __p;
        operator delete(__p);
      }
      if (v15)
      {
        v16 = v15;
        operator delete(v15);
      }
      if (v17)
      {
        v18 = v17;
        operator delete(v17);
      }
      if (v21)
      {
        v22 = v21;
        operator delete(v21);
      }
      if (v25)
      {
        v26 = v25;
        operator delete(v25);
      }
      if (v29)
      {
        v30 = v29;
        operator delete(v29);
      }
      if (v33)
      {
        v34 = v33;
        operator delete(v33);
      }
      if (v37)
      {
        v38 = v37;
        operator delete(v37);
      }
      __cxa_atexit((void (*)(void *))sub_20B8D24AC, &xmmword_25472B508, &dword_20B7F7000);
      __cxa_guard_release(&qword_25472B478);
      a1 = v7;
    }
  }
  if (*((_QWORD *)&xmmword_25472B508 + 1))
  {
    v2 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_25472B508 + 8));
    v2.i16[0] = vaddlv_u8(v2);
    if (v2.u32[0] > 1uLL)
    {
      v3 = a1;
      if (*((_QWORD *)&xmmword_25472B508 + 1) <= (unint64_t)a1)
        v3 = (unint64_t)a1 % *((_QWORD *)&xmmword_25472B508 + 1);
    }
    else
    {
      v3 = (DWORD2(xmmword_25472B508) - 1) & a1;
    }
    j = *(uint64_t ***)(xmmword_25472B508 + 8 * v3);
    if (j)
    {
      for (j = (uint64_t **)*j; j; j = (uint64_t **)*j)
      {
        v5 = (unint64_t)j[1];
        if (v5 == a1)
        {
          if (*((unsigned __int16 *)j + 8) == a1)
            break;
        }
        else
        {
          if (v2.u32[0] > 1uLL)
          {
            if (v5 >= *((_QWORD *)&xmmword_25472B508 + 1))
              v5 %= *((_QWORD *)&xmmword_25472B508 + 1);
          }
          else
          {
            v5 &= *((_QWORD *)&xmmword_25472B508 + 1) - 1;
          }
          if (v5 != v3)
            goto LABEL_19;
        }
      }
    }
  }
  else
  {
LABEL_19:
    j = 0;
  }
  if (j)
    return (uint64_t *)(j + 3);
  else
    return (uint64_t *)&unk_20BA43AA0;
}

void sub_20B8D2320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  uint64_t v42;
  uint64_t v44;
  void *v45;

  v44 = 0;
  while (1)
  {
    v45 = *(void **)(v42 + v44 + 232);
    if (v45)
    {
      *(_QWORD *)(v42 + v44 + 240) = v45;
      operator delete(v45);
    }
    v44 -= 32;
    if (v44 == -256)
    {
      if (__p)
        operator delete(__p);
      if (a14)
        operator delete(a14);
      if (a17)
        operator delete(a17);
      if (a21)
        operator delete(a21);
      if (a25)
        operator delete(a25);
      if (a29)
        operator delete(a29);
      if (a33)
        operator delete(a33);
      if (a37)
        operator delete(a37);
      __cxa_guard_abort(&qword_25472B478);
      _Unwind_Resume(a1);
    }
  }
}

void sub_20B8D2488()
{
  JUMPOUT(0x20B8D2434);
}

void sub_20B8D2494()
{
  JUMPOUT(0x20B8D2434);
}

void sub_20B8D24A4()
{
  JUMPOUT(0x20B8D2474);
}

const __CFString *sub_20B8D24B0(const __CFString *result)
{
  const __CFString *v1;
  CFIndex Length;
  CFIndex v3;
  CFIndex i;
  CFRange RangeOfComposedCharactersAtIndex;
  int CharacterAtIndex;
  int v7;
  UChar32 v8;

  if (result)
  {
    v1 = result;
    Length = CFStringGetLength(result);
    if (Length >= 1)
    {
      v3 = Length;
      for (i = 0; i < v3; i += RangeOfComposedCharactersAtIndex.length)
      {
        RangeOfComposedCharactersAtIndex = CFStringGetRangeOfComposedCharactersAtIndex(v1, i);
        if (RangeOfComposedCharactersAtIndex.length == 2)
        {
          CharacterAtIndex = CFStringGetCharacterAtIndex(v1, RangeOfComposedCharactersAtIndex.location);
          v7 = CFStringGetCharacterAtIndex(v1, RangeOfComposedCharactersAtIndex.location + 1);
          if ((CharacterAtIndex & 0xFC00) != 0xD800 || (v7 & 0xFC00) != 0xDC00)
            continue;
          v8 = v7 + (CharacterAtIndex << 10) - 56613888;
        }
        else
        {
          if (RangeOfComposedCharactersAtIndex.length != 1)
          {
            if (!RangeOfComposedCharactersAtIndex.length)
              ++i;
            continue;
          }
          v8 = CFStringGetCharacterAtIndex(v1, RangeOfComposedCharactersAtIndex.location);
        }
        if (u_hasBinaryProperty(v8, UCHAR_IDEOGRAPHIC))
          return (const __CFString *)1;
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_20B8D25B4(char *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  int v5;

  v2 = 67173375;
  if (a2)
  {
    v3 = 0;
    v4 = a2;
    do
    {
      v5 = *a1++;
      v3 = (1025 * (v3 + v5)) ^ ((1025 * (v3 + v5)) >> 6);
      --v4;
    }
    while (v4);
    v2 = 1025 * v3 + 67173375;
  }
  return 32769 * ((9 * (v2 ^ (v2 >> 6))) ^ ((9 * (v2 ^ (v2 >> 6))) >> 11));
}

CFPropertyListRef sub_20B8D25FC(char *cStr)
{
  const __CFString *v1;
  CFPropertyListRef v2;

  v1 = CFStringCreateWithCString(0, cStr, 0x8000100u);
  v2 = sub_20B8D266C(v1);
  if (v1)
    CFRelease(v1);
  return v2;
}

void sub_20B8D2654(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B87E150((const void **)va, 0);
  _Unwind_Resume(a1);
}

CFPropertyListRef sub_20B8D266C(CFStringRef filePath)
{
  const __CFURL *v1;
  CFPropertyListRef v2;

  v1 = CFURLCreateWithFileSystemPath((CFAllocatorRef)*MEMORY[0x24BDBD240], filePath, kCFURLPOSIXPathStyle, 0);
  v2 = sub_20B8D26E4(v1);
  if (v1)
    CFRelease(v1);
  return v2;
}

void sub_20B8D26CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B876164((const void **)va, 0);
  _Unwind_Resume(a1);
}

CFPropertyListRef sub_20B8D26E4(CFURLRef fileURL)
{
  const __CFAllocator *v1;
  __CFReadStream *v2;
  __CFReadStream *v3;
  CFPropertyListRef v4;

  v1 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v2 = CFReadStreamCreateWithFile((CFAllocatorRef)*MEMORY[0x24BDBD240], fileURL);
  if (!v2)
    return 0;
  v3 = v2;
  if (CFReadStreamOpen(v2))
  {
    v4 = CFPropertyListCreateWithStream(v1, v3, 0, 0, 0, 0);
    CFReadStreamClose(v3);
  }
  else
  {
    v4 = 0;
  }
  CFRelease(v3);
  return v4;
}

void sub_20B8D2778(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B8D45A8((const void **)va, 0);
  _Unwind_Resume(a1);
}

BOOL sub_20B8D2794(const __CFString *a1, uint64_t a2)
{
  CFTypeID v3;
  uint64_t v4;
  int valuePtr;

  if (!a1)
    return a2;
  v3 = CFGetTypeID(a1);
  if (v3 == CFStringGetTypeID())
  {
    v4 = 1;
    if (CFStringCompare(a1, CFSTR("true"), 1uLL) == kCFCompareEqualTo)
      return v4;
    return CFStringCompare(a1, CFSTR("YES"), 1uLL) == kCFCompareEqualTo;
  }
  else
  {
    if (v3 == CFNumberGetTypeID() && !CFNumberIsFloatType((CFNumberRef)a1))
    {
      valuePtr = 0;
      CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, &valuePtr);
      return valuePtr != 0;
    }
    if (v3 != CFBooleanGetTypeID())
      return 0;
    return *MEMORY[0x24BDBD270] == (_QWORD)a1;
  }
}

CFURLRef sub_20B8D2878(const __CFString *a1)
{
  CFTypeID v2;
  CFTypeID v4;

  if (!a1)
    return 0;
  v2 = CFGetTypeID(a1);
  if (v2 == CFStringGetTypeID())
    return CFURLCreateWithFileSystemPath(0, a1, kCFURLPOSIXPathStyle, 1u);
  v4 = CFGetTypeID(a1);
  if (v4 == CFURLGetTypeID())
    return CFURLCopyAbsoluteURL((CFURLRef)a1);
  else
    return 0;
}

CFURLRef sub_20B8D28F4(const __CFString *a1)
{
  CFURLRef result;
  const void *v2;

  if (!a1 || (result = sub_20B8D2878(a1)) == 0)
  {
    v2 = (const void *)sub_20B8D291C();
    return (CFURLRef)CFRetain(v2);
  }
  return result;
}

uint64_t sub_20B8D291C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25472CC00);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25472CC00))
  {
    qword_25472CBF8 = (uint64_t)sub_20B8D3C34();
    __cxa_guard_release(&qword_25472CC00);
  }
  return qword_25472CBF8;
}

void sub_20B8D2974(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472CC00);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8D298C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25472B488);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25472B488))
  {
    qword_25472B480 = (uint64_t)CFCharacterSetCreateWithCharactersInString(0, CFSTR("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"));
    __cxa_guard_release(&qword_25472B488);
  }
  return qword_25472B480;
}

void sub_20B8D29F4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472B488);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8D2A0C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25472CBF0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25472CBF0))
  {
    qword_25472CBE8 = (uint64_t)sub_20B8D2A7C();
    __cxa_guard_release(&qword_25472CBF0);
  }
  return qword_25472CBE8;
}

void sub_20B8D2A64(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472CBF0);
  _Unwind_Resume(a1);
}

__CFCharacterSet *sub_20B8D2A7C()
{
  __CFCharacterSet *Mutable;
  const __CFCharacterSet *Predefined;
  CFRange v3;

  Mutable = CFCharacterSetCreateMutable(0);
  v3.location = 12288;
  v3.length = 64;
  CFCharacterSetAddCharactersInRange(Mutable, v3);
  CFCharacterSetAddCharactersInString(Mutable, CFSTR(",，、。；;？?！!\\”\"“＂＂≪≫】【"));
  Predefined = CFCharacterSetGetPredefined(kCFCharacterSetNewline);
  CFCharacterSetUnion(Mutable, Predefined);
  return Mutable;
}

uint64_t sub_20B8D2AD4(uint64_t result)
{
  const __CFString *v1;
  CFIndex v2;
  const __CFCharacterSet *Predefined;
  const __CFCharacterSet *v4;
  CFRange v5;
  CFRange v6;

  if (result)
  {
    v1 = (const __CFString *)result;
    if (CEMStringContainsEmoji())
    {
      return 0;
    }
    else
    {
      v2 = CFStringGetLength(v1) - 1;
      Predefined = CFCharacterSetGetPredefined(kCFCharacterSetDecimalDigit);
      v5.location = v2;
      v5.length = 1;
      if (CFStringFindCharacterFromSet(v1, Predefined, v5, 2uLL, 0))
      {
        return 501;
      }
      else
      {
        v4 = (const __CFCharacterSet *)sub_20B8D298C();
        v6.location = v2;
        v6.length = 1;
        if (CFStringFindCharacterFromSet(v1, v4, v6, 2uLL, 0))
          return 502;
        else
          return 0;
      }
    }
  }
  return result;
}

uint64_t sub_20B8D2B6C(uint64_t *a1, _BYTE *a2, _BYTE *a3)
{
  uint64_t v4;
  uint64_t v6;
  _BOOL4 v8;
  uint64_t result;
  uint64_t v10;
  char v11;
  char v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _BYTE *v17;

  v4 = *a1;
  if (!*a1)
  {
    result = 0;
    *a2 = 0;
    *a3 = 0;
    return result;
  }
  v6 = a1[1];
  if (!v6)
    goto LABEL_28;
  v17 = a2;
  v8 = v6 != 3 || *(_DWORD *)v4 != *(_DWORD *)aIng_0 || *(unsigned __int16 *)(v4 + 4) != (unsigned __int16)aIng_0[2];
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = MEMORY[0x24BDAC740];
  while (1)
  {
    v15 = *(unsigned __int16 *)(v4 + 2 * v10);
    if (v15 == 32)
    {
      if ((v12 & 1) == 0)
        v11 = v8 & v13;
      v12 = 1;
      goto LABEL_20;
    }
    if (!sub_20BA018B0(*(_WORD *)(v4 + 2 * v10))
      && (v15 > 0xFF || (*(_DWORD *)(v14 + 4 * v15 + 60) & 0x400) == 0))
    {
      break;
    }
LABEL_20:
    v13 |= (unsigned __int16)(v15 - 97) < 0x1Au;
    if (++v10 >= (unint64_t)a1[1])
    {
      v16 = 1;
      goto LABEL_23;
    }
  }
  v16 = 0;
LABEL_23:
  a2 = v17;
  LODWORD(v6) = v8 & v16 & v13;
  if ((v12 & 1) != 0)
  {
    result = 0;
    *v17 = v11 & 1;
    *a3 = v6;
    return result;
  }
  if (*a3 && (_DWORD)v6)
  {
    *v17 = 0;
    result = 1;
    *a3 = 1;
    return result;
  }
LABEL_28:
  result = 0;
  *a3 = v6;
  *a2 = v6;
  return result;
}

uint64_t sub_20B8D2CE0(char *__s1, uint64_t a2, char *__s2, uint64_t a4, int a5, int a6)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned __int16 *v15;
  uint64_t v16;
  unint64_t v17;
  int v18;

  result = 0;
  if (a4 == a2)
    a6 = 1;
  if (a4 >= a2 && a6)
  {
    v11 = (2 * a2);
    if (a5)
    {
      if ((int)v11 >= 2)
      {
        v12 = 0;
        while (1)
        {
          v13 = *(unsigned __int16 *)&__s2[v12];
          v14 = *(unsigned __int16 *)&__s1[v12];
          if (v13 != v14)
          {
            if (v12 == v11)
              return 0;
            result = (uint64_t)sub_20BA0225C(v14, a5);
            if (!result)
              return result;
            v15 = *(unsigned __int16 **)result;
            v16 = *(_QWORD *)(result + 8) - *(_QWORD *)result;
            if (!v16)
              return 0;
            v17 = v16 >> 1;
            if (v17 <= 1)
              v17 = 1;
            while (1)
            {
              v18 = *v15++;
              if (v13 == v18)
                break;
              if (!--v17)
                return 0;
            }
          }
          v12 += 2;
          result = 1;
          if ((int)v11 - 1 <= (int)v12)
            return result;
        }
      }
      return 1;
    }
    else
    {
      return memcmp(__s1, __s2, (int)v11) == 0;
    }
  }
  return result;
}

CFStringRef sub_20B8D2DD4(UInt8 *bytes, CFIndex numBytes)
{
  if (numBytes)
    return CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x24BDBD240], bytes, numBytes, 0x8000100u, 0);
  else
    return &stru_24C4B3660;
}

BOOL sub_20B8D2E08(_BOOL8 result)
{
  const __CFURL *v1;
  void *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  void *__p[2];
  char v12;
  UInt8 buffer[1024];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (result)
  {
    v1 = (const __CFURL *)result;
    result = sub_20B8D00CC((const __CFURL *)result);
    if (result)
    {
      if (CFURLSetResourcePropertyForKey(v1, (CFStringRef)*MEMORY[0x24BDBD6C8], (CFTypeRef)*MEMORY[0x24BDBD270], 0))
      {
        return 1;
      }
      else
      {
        v2 = sub_20B9547EC();
        if (CFURLGetFileSystemRepresentation(v1, 1u, buffer, 1024))
          v3 = (char *)buffer;
        else
          v3 = (char *)&unk_20BA71DF9;
        sub_20B80BBD0(__p, v3);
        if (v12 >= 0)
          v10 = __p;
        else
          LOBYTE(v10) = __p[0];
        sub_20B954DEC((uint64_t)v2, "failed to set backup exclusion for item at URL: %s", v4, v5, v6, v7, v8, v9, (char)v10);
        if (v12 < 0)
          operator delete(__p[0]);
        return 0;
      }
    }
  }
  return result;
}

void sub_20B8D2F10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

CFMutableArrayRef sub_20B8D2F34(const __CFString *a1, unsigned int a2)
{
  unsigned __int8 v4;
  CFMutableArrayRef Mutable;
  CFIndex Length;
  CFIndex v7;
  CFRange v8;
  __CFString *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  __CFArray *v14;
  CFRange v16;
  CFRange v17;

  v4 = atomic_load((unsigned __int8 *)&qword_25472B498);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25472B498))
  {
    qword_25472B490 = (uint64_t)CFCharacterSetCreateWithCharactersInString(0, CFSTR("12345"));
    __cxa_guard_release(&qword_25472B498);
  }
  if (a1)
  {
    Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
    Length = CFStringGetLength(a1);
    v7 = 0;
    v8.length = Length;
    while (1)
    {
      v8.location = v7;
      if (!CFStringFindCharacterFromSet(a1, (CFCharacterSetRef)qword_25472B490, v8, 0, &v16) || v16.location == v7)
        break;
      v17.length = a2 - v7 + v16.location;
      v17.location = v7;
      v9 = (__CFString *)CFStringCreateWithSubstring(0, a1, v17);
      if (!sub_20B8D0AE4(v9))
        goto LABEL_13;
      if (a2)
      {
        v12 = objc_msgSend_zhuyinSyllableFromPinyinSyllable(v9, v10, v11);
        if (!v12)
        {
LABEL_13:
          CFRelease(v9);
          break;
        }
        v13 = (const void *)v12;
        v14 = Mutable;
      }
      else
      {
        v14 = Mutable;
        v13 = v9;
      }
      CFArrayAppendValue(v14, v13);
      CFRelease(v9);
      v7 = v16.length + v16.location;
      v8.length = Length - (v16.length + v16.location);
      if (Length <= v16.length + v16.location)
        return Mutable;
    }
    CFRelease(Mutable);
  }
  return 0;
}

void sub_20B8D309C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472B498);
  _Unwind_Resume(a1);
}

__CFArray *sub_20B8D30B4(__int16 **a1)
{
  __CFArray *Mutable;
  __int16 *v3;
  __int16 *v4;
  const __CFAllocator *v5;
  __int16 v6;
  CFNumberRef v7;
  __int16 valuePtr;

  Mutable = CFArrayCreateMutable(0, a1[1] - *a1, MEMORY[0x24BDBD690]);
  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    v5 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    do
    {
      v6 = *v3++;
      valuePtr = v6;
      v7 = CFNumberCreate(v5, kCFNumberShortType, &valuePtr);
      CFArrayAppendValue(Mutable, v7);
      CFRelease(v7);
    }
    while (v3 != v4);
  }
  return Mutable;
}

_QWORD *sub_20B8D315C@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  _QWORD *result;
  _WORD *v6;
  __int16 v7;
  int v8;
  __int16 v9;

  v3 = a2;
  result = sub_20B80FC98(a3, a2);
  if (v3)
  {
    v6 = (_WORD *)*result;
    do
    {
      v8 = *a1++;
      v7 = v8;
      v9 = v8 + 96;
      if ((v8 - 12353) < 0x54)
        v7 = v9;
      *v6++ = v7;
      --v3;
    }
    while (v3);
  }
  return result;
}

void sub_20B8D31B0(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int16 *v8;
  unsigned int v9;
  char *v10;
  int v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int v17;
  BOOL v18;
  uint64_t *v19;
  unsigned int v20;
  uint64_t v21[5];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v6 = atomic_load((unsigned __int8 *)&qword_25472B4A0);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25472B4A0))
  {
    __cxa_atexit((void (*)(void *))sub_20B8D473C, 0, &dword_20B7F7000);
    __cxa_guard_release(&qword_25472B4A0);
  }
  v7 = atomic_load((unsigned __int8 *)&qword_25472B4A8);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_25472B4A8))
  {
    *(_OWORD *)v21 = xmmword_20BA43AB8;
    *(_OWORD *)((char *)&v21[1] + 4) = *(__int128 *)((char *)&xmmword_20BA43AB8 + 12);
    sub_20B8D45DC(v21, 7);
    __cxa_atexit((void (*)(void *))sub_20B8D3434, &qword_25472B4C8, &dword_20B7F7000);
    __cxa_guard_release(&qword_25472B4A8);
  }
  sub_20B87C9E0(a3, byte_20BA93B9E);
  if (a2)
  {
    v8 = &a1[a2];
    do
    {
      v9 = *a1;
      if ((unsigned __int16)(v9 - 12353) > 0x53u)
      {
        if ((unsigned __int16)(v9 + 255) > 0x5Du)
        {
          v14 = qword_25472B4D0;
          if (qword_25472B4D0)
          {
            v15 = &qword_25472B4D0;
            v16 = qword_25472B4D0;
            do
            {
              v17 = *(unsigned __int16 *)(v16 + 26);
              v18 = v17 >= v9;
              if (v17 >= v9)
                v19 = (uint64_t *)v16;
              else
                v19 = (uint64_t *)(v16 + 8);
              if (v18)
                v15 = (uint64_t *)v16;
              v16 = *v19;
            }
            while (*v19);
            if (v15 != &qword_25472B4D0 && v9 >= *((unsigned __int16 *)v15 + 13))
            {
              while (1)
              {
                while (1)
                {
                  v20 = *(unsigned __int16 *)(v14 + 26);
                  if (v20 <= v9)
                    break;
                  v14 = *(_QWORD *)v14;
                  if (!v14)
                    goto LABEL_36;
                }
                if (v20 >= v9)
                  break;
                v14 = *(_QWORD *)(v14 + 8);
                if (!v14)
LABEL_36:
                  sub_20B83B31C("map::at:  key not found");
              }
              LOWORD(v9) = *(_WORD *)(v14 + 28);
            }
          }
        }
        else
        {
          LOWORD(v9) = v9 + 288;
        }
        sub_20B87C0F8((uint64_t)a3, v9);
      }
      else
      {
        v10 = &byte_2547287C0[24 * v9 - 296472];
        v11 = v10[23];
        if (v11 >= 0)
          v12 = v10;
        else
          v12 = *(char **)v10;
        if (v11 >= 0)
          v13 = v10[23];
        else
          v13 = *((_QWORD *)v10 + 1);
        sub_20B88DACC((uint64_t)a3, v12, v13);
      }
      ++a1;
    }
    while (a1 != v8);
  }
}

void sub_20B8D33F4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472B4A8);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8D3434(uint64_t a1)
{
  sub_20B8292CC(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

uint64_t sub_20B8D345C(const __CFString *a1)
{
  uint64_t v2;
  unsigned int v3;
  char *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char *v9;
  CFIndex v10;

  if (!a1)
    return 0;
  if (!CFStringGetLength(a1))
    return 0;
  v10 = 0;
  sub_20B8D0624(a1, &v10, &v9);
  v2 = (2 * v10);
  if ((_DWORD)v2)
  {
    v3 = 0;
    v4 = v9;
    do
    {
      v5 = *v4++;
      v3 = (1025 * (v3 + v5)) ^ ((1025 * (v3 + v5)) >> 6);
      --v2;
    }
    while (v2);
    v6 = 32769 * ((9 * v3) ^ ((9 * v3) >> 11));
    goto LABEL_10;
  }
  v6 = 0;
  v7 = 0;
  if (v9)
  {
LABEL_10:
    MEMORY[0x20BD39C80](v9, 0x1000C80BDFB0063);
    return v6;
  }
  return v7;
}

__CFString *sub_20B8D3518(_QWORD *a1)
{
  __CFString *Mutable;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  UniChar chars;

  if (*a1 == a1[1])
    return 0;
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0);
  v3 = a1[1] - *a1;
  if (v3)
  {
    v4 = 0;
    v5 = v3 >> 1;
    if (v5 <= 1)
      v6 = 1;
    else
      v6 = v5;
    do
    {
      chars = 0;
      chars = *(_WORD *)(*a1 + 2 * v4) + 48;
      CFStringAppendCharacters(Mutable, &chars, 1);
      ++v4;
    }
    while (v6 != v4);
  }
  return Mutable;
}

_BYTE *sub_20B8D35C0(_BYTE *a1, char *a2, char *a3)
{
  _BYTE *v5;

  v5 = sub_20B87C9E0(a1, a2);
  sub_20B87C9E0(v5 + 24, a3);
  return a1;
}

void sub_20B8D35F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_BYTE *sub_20B8D3610(_BYTE *a1)
{
  _BYTE *v2;

  v2 = sub_20B87C9E0(a1, (char *)L"ng");
  sub_20B87C9E0(v2 + 24, byte_20BA93B9E);
  return a1;
}

void sub_20B8D364C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_BYTE *sub_20B8D3668(_BYTE *a1, char *a2, char *a3)
{
  _BYTE *v5;

  v5 = sub_20B87C9E0(a1, a2);
  sub_20B87C9E0(v5 + 24, a3);
  return a1;
}

void sub_20B8D369C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_BYTE *sub_20B8D36B8(_BYTE *a1)
{
  _BYTE *v2;

  v2 = sub_20B87C9E0(a1, "a");
  sub_20B87C9E0(v2 + 24, "a");
  return a1;
}

void sub_20B8D36F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_BYTE *sub_20B8D3710(_BYTE *a1)
{
  _BYTE *v2;

  v2 = sub_20B87C9E0(a1, "a");
  sub_20B87C9E0(v2 + 24, (char *)L"aa");
  return a1;
}

void sub_20B8D374C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_BYTE *sub_20B8D3768(_BYTE *a1, char *a2, char *a3)
{
  _BYTE *v5;

  v5 = sub_20B87C9E0(a1, a2);
  sub_20B87C9E0(v5 + 24, a3);
  return a1;
}

void sub_20B8D379C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_BYTE *sub_20B8D37B8(_BYTE *a1, char *a2, char *a3)
{
  _BYTE *v5;

  v5 = sub_20B87C9E0(a1, a2);
  sub_20B87C9E0(v5 + 24, a3);
  return a1;
}

void sub_20B8D37EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_BYTE *sub_20B8D3808(_BYTE *a1, char *a2, char *a3)
{
  _BYTE *v5;

  v5 = sub_20B87C9E0(a1, a2);
  sub_20B87C9E0(v5 + 24, a3);
  return a1;
}

void sub_20B8D383C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_BYTE *sub_20B8D3858(_BYTE *a1)
{
  _BYTE *v2;

  v2 = sub_20B87C9E0(a1, (char *)L"cheung");
  sub_20B87C9E0(v2 + 24, "c");
  return a1;
}

void sub_20B8D3894(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_BYTE *sub_20B8D38B0(_BYTE *a1, char *a2, char *a3)
{
  _BYTE *v5;

  v5 = sub_20B87C9E0(a1, a2);
  sub_20B87C9E0(v5 + 24, a3);
  return a1;
}

void sub_20B8D38E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_BYTE *sub_20B8D3900(_BYTE *a1, char *a2, char *a3)
{
  _BYTE *v5;

  v5 = sub_20B87C9E0(a1, a2);
  sub_20B87C9E0(v5 + 24, a3);
  return a1;
}

void sub_20B8D3934(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_BYTE *sub_20B8D3950(_BYTE *a1, char *a2, char *a3)
{
  _BYTE *v5;

  v5 = sub_20B87C9E0(a1, a2);
  sub_20B87C9E0(v5 + 24, a3);
  return a1;
}

void sub_20B8D3984(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

char *sub_20B8D39A0(char *__dst, __int128 *a2)
{
  __int128 v4;
  _BYTE *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20B88DD4C(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  v5 = __dst + 24;
  if (*((char *)a2 + 47) < 0)
  {
    sub_20B88DD4C(v5, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)__dst + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)v5 = v6;
  }
  return __dst;
}

void sub_20B8D3A18(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_20B8D3A34(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        sub_20B892DCC(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *sub_20B8D3AA4(_QWORD *a1, uint64_t a2, _WORD *a3)
{
  _WORD *v6;
  _WORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20B80FD0C(a1, a2);
    v6 = (_WORD *)a1[1];
    v7 = &v6[a2];
    v8 = 2 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 2;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_20B8D3B08(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B8D3B24(uint64_t *a1, char **a2, char **a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t *v19;

  v4 = *a1;
  v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20B80CDD8();
  v9 = (uint64_t)(a1 + 2);
  v10 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3);
  if (2 * v10 > v6)
    v6 = 2 * v10;
  if (v10 >= 0x555555555555555)
    v11 = 0xAAAAAAAAAAAAAAALL;
  else
    v11 = v6;
  v19 = a1 + 2;
  if (v11)
    v12 = (char *)sub_20B828D70(v9, v11);
  else
    v12 = 0;
  v15 = v12;
  v16 = &v12[24 * v5];
  v17 = v16;
  v18 = &v12[24 * v11];
  sub_20B83DFAC(v16, *a2, *a3, *a3 - *a2);
  v17 = v16 + 24;
  sub_20B83BAB4(a1, &v15);
  v13 = a1[1];
  sub_20B83BC3C((uint64_t)&v15);
  return v13;
}

void sub_20B8D3C20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B83BC3C((uint64_t)va);
  _Unwind_Resume(a1);
}

CFURLRef sub_20B8D3C34()
{
  const __CFURL *v0;
  CFURLRef v1;

  v0 = (const __CFURL *)CFCopyHomeDirectoryURLForUser();
  v1 = CFURLCreateCopyAppendingPathComponent(0, v0, CFSTR("Library/Keyboard"), 1u);
  if (v0)
    CFRelease(v0);
  return v1;
}

void sub_20B8D3C94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B876164((const void **)va, 0);
  _Unwind_Resume(a1);
}

void sub_20B8D3CAC(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, std::string *a4@<X8>)
{
  char *v7;
  std::string::size_type v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __n128 v12;
  __int128 v13;
  std::string::size_type size;
  char *v15;
  char *v16;
  int v17;
  BOOL v18;
  std::string *v19;
  uint64_t v20;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  char *v27;
  std::string *v28;
  std::string::size_type v29;
  std::string::size_type v30;
  std::string::size_type v31;
  std::string::size_type v32;
  int v33;
  BOOL v34;
  std::string *v35;
  char *v36;
  std::string::size_type v37;
  char *i;
  int v39;
  std::string::size_type v40;
  char *v41;
  std::string::size_type v42;
  std::string::size_type v43;
  unint64_t v44;
  std::string::size_type v45;
  uint64_t v46;
  char *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 184) = 0;
  if (!*(_QWORD *)(a1 + 48))
    goto LABEL_62;
  v7 = a2;
  sub_20B829224(a4, a3 - a2, 0);
  if (a3 == v7)
  {
    v23 = *(_OWORD *)(a1 + 136);
    v52 = *(_OWORD *)(a1 + 120);
    v53 = v23;
    v24 = *(_OWORD *)(a1 + 168);
    v54 = *(_OWORD *)(a1 + 152);
    v55 = v24;
    v25 = *(_OWORD *)(a1 + 72);
    v48 = *(_OWORD *)(a1 + 56);
    v49 = v25;
    v26 = *(_OWORD *)(a1 + 104);
    v50 = *(_OWORD *)(a1 + 88);
    v51 = v26;
  }
  else
  {
    if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = 22;
    else
      v8 = (a4->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    std::string::resize(a4, v8, 0);
    v9 = *(_OWORD *)(a1 + 136);
    v52 = *(_OWORD *)(a1 + 120);
    v53 = v9;
    v10 = *(_OWORD *)(a1 + 168);
    v54 = *(_OWORD *)(a1 + 152);
    v55 = v10;
    v11 = *(_OWORD *)(a1 + 72);
    v48 = *(_OWORD *)(a1 + 56);
    v49 = v11;
    v12 = *(__n128 *)(a1 + 88);
    v13 = *(_OWORD *)(a1 + 104);
    size = HIBYTE(a4->__r_.__value_.__r.__words[2]);
    if ((size & 0x80u) == 0)
      v15 = (char *)a4;
    else
      v15 = (char *)a4->__r_.__value_.__r.__words[0];
    if ((size & 0x80u) != 0)
      size = a4->__r_.__value_.__l.__size_;
    v16 = &v15[size];
    v50 = *(_OWORD *)(a1 + 88);
    v51 = v13;
    while (1)
    {
      v17 = (*(uint64_t (**)(_QWORD, __int128 *, char *, char *, char **, char *, char *, uint64_t *, __n128))(**(_QWORD **)(a1 + 48) + 24))(*(_QWORD *)(a1 + 48), &v48, v7, a3, &v47, v15, v16, &v46, v12);
      v18 = v47 == v7;
      *(_QWORD *)(a1 + 184) += (v47 - v7) >> 1;
      if (v18)
        goto LABEL_60;
      if (v17 != 1)
        break;
      if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v19 = a4;
      else
        v19 = (std::string *)a4->__r_.__value_.__r.__words[0];
      v20 = v46 - (_QWORD)v19;
      std::string::resize(a4, 2 * (v46 - (_QWORD)v19), 0);
      v21 = HIBYTE(a4->__r_.__value_.__r.__words[2]);
      if ((v21 & 0x80u) == 0)
        v22 = a4;
      else
        v22 = (std::string *)a4->__r_.__value_.__r.__words[0];
      v15 = (char *)v22 + v20;
      if ((v21 & 0x80u) != 0)
        v21 = a4->__r_.__value_.__l.__size_;
      v16 = (char *)v22 + v21;
      v7 = v47;
      if (v47 >= a3)
        goto LABEL_60;
    }
    if (v17)
    {
      if (v17 != 3)
        goto LABEL_60;
      if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = (char *)a4;
      else
        v27 = (char *)a4->__r_.__value_.__r.__words[0];
      std::string::resize(a4, v15 - v27, 0);
      sub_20B83DE38(a4, v7, a3);
    }
    else
    {
      if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v28 = a4;
      else
        v28 = (std::string *)a4->__r_.__value_.__r.__words[0];
      std::string::resize(a4, v46 - (_QWORD)v28, 0);
    }
  }
  v29 = HIBYTE(a4->__r_.__value_.__r.__words[2]);
  v30 = a4->__r_.__value_.__l.__size_;
  if ((v29 & 0x80u) == 0)
    v31 = 22;
  else
    v31 = (a4->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  std::string::resize(a4, v31, 0);
  if ((v29 & 0x80u) == 0)
    v32 = v29;
  else
    v32 = v30;
  v33 = SHIBYTE(a4->__r_.__value_.__r.__words[2]);
  v34 = v33 < 0;
  if (v33 >= 0)
    v35 = a4;
  else
    v35 = (std::string *)a4->__r_.__value_.__r.__words[0];
  v36 = (char *)v35 + v32;
  if (v34)
    v37 = a4->__r_.__value_.__l.__size_;
  else
    v37 = HIBYTE(a4->__r_.__value_.__r.__words[2]);
  for (i = &v36[v37]; ; i = (char *)(v43 + v42))
  {
    v39 = (*(uint64_t (**)(_QWORD, __int128 *, char *, char *, char **))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48), &v48, v36, i, &v47);
    if (v39 != 1)
      break;
    if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v40 = (std::string::size_type)a4;
    else
      v40 = a4->__r_.__value_.__r.__words[0];
    v41 = &v47[-v40];
    std::string::resize(a4, 2 * (_QWORD)&v47[-v40], 0);
    v42 = HIBYTE(a4->__r_.__value_.__r.__words[2]);
    if ((v42 & 0x80u) == 0)
      v43 = (std::string::size_type)a4;
    else
      v43 = a4->__r_.__value_.__r.__words[0];
    v36 = &v41[v43];
    if ((v42 & 0x80u) != 0)
      v42 = a4->__r_.__value_.__l.__size_;
  }
  if (!v39)
  {
    v36 = v47;
    goto LABEL_68;
  }
  if (v39 == 3)
  {
LABEL_68:
    if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v45 = (std::string::size_type)a4;
    else
      v45 = a4->__r_.__value_.__r.__words[0];
    std::string::resize(a4, (std::string::size_type)&v36[-v45], 0);
    return;
  }
LABEL_60:
  if (SHIBYTE(a4->__r_.__value_.__r.__words[2]) < 0)
    operator delete(a4->__r_.__value_.__l.__data_);
LABEL_62:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 23))
    {
      *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
      return;
    }
LABEL_73:
    sub_20B8AEE4C("wstring_convert: to_bytes error");
  }
  v44 = *(_QWORD *)(a1 + 8);
  if (!v44)
    goto LABEL_73;
  sub_20B80ACE0(a4, *(void **)a1, v44);
}

void sub_20B8D4038(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_20B8D4078(unsigned __int16 *a1, uint64_t a2)
{
  unint64_t v2;
  unsigned __int16 *v3;
  unsigned __int16 *v4;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  uint64_t ***v8;
  uint64_t **i;
  unint64_t v10;
  _QWORD *v11;
  float v12;
  _BOOL8 v13;
  unint64_t v14;
  unint64_t v15;
  int8x8_t prime;
  void *v17;
  void *v18;
  uint64_t v19;
  _QWORD **v20;
  unint64_t v21;
  uint8x8_t v22;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  _QWORD *j;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  void *v31;

  xmmword_25472B508 = 0u;
  *(_OWORD *)&qword_25472B518 = 0u;
  dword_25472B528 = 1065353216;
  if (a2)
  {
    v3 = a1;
    v4 = &a1[16 * a2];
    while (1)
    {
      v5 = *v3;
      v6 = *((_QWORD *)&xmmword_25472B508 + 1);
      if (*((_QWORD *)&xmmword_25472B508 + 1))
      {
        v7 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_25472B508 + 8));
        v7.i16[0] = vaddlv_u8(v7);
        if (v7.u32[0] > 1uLL)
        {
          v2 = *v3;
          if (*((_QWORD *)&xmmword_25472B508 + 1) <= v5)
            v2 = v5 % *((_QWORD *)&xmmword_25472B508 + 1);
        }
        else
        {
          v2 = (DWORD2(xmmword_25472B508) - 1) & v5;
        }
        v8 = *(uint64_t ****)(xmmword_25472B508 + 8 * v2);
        if (v8)
        {
          for (i = *v8; i; i = (uint64_t **)*i)
          {
            v10 = (unint64_t)i[1];
            if (v10 == v5)
            {
              if (*((unsigned __int16 *)i + 8) == (_DWORD)v5)
                goto LABEL_75;
            }
            else
            {
              if (v7.u32[0] > 1uLL)
              {
                if (v10 >= *((_QWORD *)&xmmword_25472B508 + 1))
                  v10 %= *((_QWORD *)&xmmword_25472B508 + 1);
              }
              else
              {
                v10 &= *((_QWORD *)&xmmword_25472B508 + 1) - 1;
              }
              if (v10 != v2)
                break;
            }
          }
        }
      }
      v11 = operator new(0x30uLL);
      *v11 = 0;
      v11[1] = v5;
      *((_WORD *)v11 + 8) = v5;
      v11[4] = 0;
      v11[5] = 0;
      v11[3] = 0;
      sub_20B87ACC8(v11 + 3, *((const void **)v3 + 1), *((_QWORD *)v3 + 2), (uint64_t)(*((_QWORD *)v3 + 2) - *((_QWORD *)v3 + 1)) >> 1);
      v12 = (float)(unint64_t)(qword_25472B520 + 1);
      if (!v6 || (float)(*(float *)&dword_25472B528 * (float)v6) < v12)
        break;
LABEL_65:
      v28 = xmmword_25472B508;
      v29 = *(_QWORD **)(xmmword_25472B508 + 8 * v2);
      if (v29)
      {
        *v11 = *v29;
      }
      else
      {
        *v11 = qword_25472B518;
        qword_25472B518 = (uint64_t)v11;
        *(_QWORD *)(v28 + 8 * v2) = &qword_25472B518;
        if (!*v11)
          goto LABEL_74;
        v30 = *(_QWORD *)(*v11 + 8);
        if ((v6 & (v6 - 1)) != 0)
        {
          if (v30 >= v6)
            v30 %= v6;
        }
        else
        {
          v30 &= v6 - 1;
        }
        v29 = (_QWORD *)(xmmword_25472B508 + 8 * v30);
      }
      *v29 = v11;
LABEL_74:
      ++qword_25472B520;
LABEL_75:
      v3 += 16;
      if (v3 == v4)
        return;
    }
    v13 = (v6 & (v6 - 1)) != 0;
    if (v6 < 3)
      v13 = 1;
    v14 = v13 | (2 * v6);
    v15 = vcvtps_u32_f32(v12 / *(float *)&dword_25472B528);
    if (v14 <= v15)
      prime = (int8x8_t)v15;
    else
      prime = (int8x8_t)v14;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v6 = *((_QWORD *)&xmmword_25472B508 + 1);
    if (*(_QWORD *)&prime > *((_QWORD *)&xmmword_25472B508 + 1))
      goto LABEL_31;
    if (*(_QWORD *)&prime < *((_QWORD *)&xmmword_25472B508 + 1))
    {
      v23 = vcvtps_u32_f32((float)(unint64_t)qword_25472B520 / *(float *)&dword_25472B528);
      if (*((_QWORD *)&xmmword_25472B508 + 1) < 3uLL
        || (v24 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_25472B508 + 8)),
            v24.i16[0] = vaddlv_u8(v24),
            v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (*(_QWORD *)&prime <= v23)
        prime = (int8x8_t)v23;
      if (*(_QWORD *)&prime >= v6)
      {
        v6 = *((_QWORD *)&xmmword_25472B508 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_31:
          if (*(_QWORD *)&prime >> 61)
            sub_20B800BC0();
          v17 = operator new(8 * *(_QWORD *)&prime);
          v18 = (void *)xmmword_25472B508;
          *(_QWORD *)&xmmword_25472B508 = v17;
          if (v18)
            operator delete(v18);
          v19 = 0;
          *((int8x8_t *)&xmmword_25472B508 + 1) = prime;
          do
            *(_QWORD *)(xmmword_25472B508 + 8 * v19++) = 0;
          while (*(_QWORD *)&prime != v19);
          v20 = (_QWORD **)qword_25472B518;
          if (qword_25472B518)
          {
            v21 = *(_QWORD *)(qword_25472B518 + 8);
            v22 = (uint8x8_t)vcnt_s8(prime);
            v22.i16[0] = vaddlv_u8(v22);
            if (v22.u32[0] > 1uLL)
            {
              if (v21 >= *(_QWORD *)&prime)
                v21 %= *(_QWORD *)&prime;
            }
            else
            {
              v21 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(xmmword_25472B508 + 8 * v21) = &qword_25472B518;
            for (j = *v20; j; v21 = v27)
            {
              v27 = j[1];
              if (v22.u32[0] > 1uLL)
              {
                if (v27 >= *(_QWORD *)&prime)
                  v27 %= *(_QWORD *)&prime;
              }
              else
              {
                v27 &= *(_QWORD *)&prime - 1;
              }
              if (v27 != v21)
              {
                if (!*(_QWORD *)(xmmword_25472B508 + 8 * v27))
                {
                  *(_QWORD *)(xmmword_25472B508 + 8 * v27) = v20;
                  goto LABEL_56;
                }
                *v20 = (_QWORD *)*j;
                *j = **(_QWORD **)(xmmword_25472B508 + 8 * v27);
                **(_QWORD **)(xmmword_25472B508 + 8 * v27) = j;
                j = v20;
              }
              v27 = v21;
LABEL_56:
              v20 = (_QWORD **)j;
              j = (_QWORD *)*j;
            }
          }
          v6 = (unint64_t)prime;
          goto LABEL_60;
        }
        v31 = (void *)xmmword_25472B508;
        *(_QWORD *)&xmmword_25472B508 = 0;
        if (v31)
          operator delete(v31);
        v6 = 0;
        *((_QWORD *)&xmmword_25472B508 + 1) = 0;
      }
    }
LABEL_60:
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5)
        v2 = v5 % v6;
      else
        v2 = v5;
    }
    else
    {
      v2 = ((_DWORD)v6 - 1) & v5;
    }
    goto LABEL_65;
  }
}

void sub_20B8D44B8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20B8D44F8(1, v1);
  sub_20B8D4544((uint64_t)&xmmword_25472B508);
  _Unwind_Resume(a1);
}

void sub_20B8D44F8(char a1, _QWORD *__p)
{
  void *v3;

  if (a1)
  {
    v3 = (void *)__p[3];
    if (v3)
    {
      __p[4] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t sub_20B8D4544(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void *v5;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = (void *)v2[3];
      if (v4)
      {
        v2[4] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v5 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v5)
    operator delete(v5);
  return a1;
}

void sub_20B8D45A8(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

uint64_t *sub_20B8D45DC(uint64_t *result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned __int16 *v4;
  uint64_t *v5;
  int v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  BOOL v10;
  unsigned int v11;
  uint64_t **v12;
  uint64_t v13;
  unsigned int v14;
  char *v15;

  qword_25472B4D8 = 0;
  qword_25472B4D0 = 0;
  qword_25472B4C8 = (uint64_t)&qword_25472B4D0;
  if (a2)
  {
    v2 = result;
    v3 = 0;
    v4 = (unsigned __int16 *)result + 2 * a2;
    v5 = &qword_25472B4D0;
    while (1)
    {
      v6 = *(_DWORD *)v2;
      if (v5 == &qword_25472B4D0)
        break;
      v7 = (uint64_t *)v3;
      if (v3)
      {
        do
        {
          v8 = v7;
          v7 = (uint64_t *)v7[1];
        }
        while (v7);
      }
      else
      {
        v9 = &qword_25472B4D0;
        do
        {
          v8 = (uint64_t *)v9[2];
          v10 = *v8 == (_QWORD)v9;
          v9 = v8;
        }
        while (v10);
      }
      v11 = *(unsigned __int16 *)v2;
      if (*((unsigned __int16 *)v8 + 13) < v11)
        goto LABEL_11;
      if (!v3)
        goto LABEL_22;
      v13 = v3;
      while (1)
      {
        while (1)
        {
          v8 = (uint64_t *)v13;
          v14 = *(unsigned __int16 *)(v13 + 26);
          if (v14 <= v11)
            break;
          v13 = *v8;
          v12 = (uint64_t **)v8;
          if (!*v8)
            goto LABEL_23;
        }
        if (v14 >= v11)
          break;
        v13 = v8[1];
        if (!v13)
        {
          v12 = (uint64_t **)(v8 + 1);
          goto LABEL_23;
        }
      }
LABEL_24:
      v2 = (uint64_t *)((char *)v2 + 4);
      if (v2 == (uint64_t *)v4)
        return result;
      v5 = (uint64_t *)qword_25472B4C8;
      v3 = qword_25472B4D0;
    }
    v8 = &qword_25472B4D0;
LABEL_11:
    if (v3)
    {
      v12 = (uint64_t **)(v8 + 1);
      if (v8[1])
        goto LABEL_24;
    }
    else
    {
LABEL_22:
      v12 = (uint64_t **)&qword_25472B4D0;
      v8 = &qword_25472B4D0;
    }
LABEL_23:
    v15 = (char *)operator new(0x20uLL);
    *(_DWORD *)(v15 + 26) = v6;
    result = sub_20B8296A0((uint64_t **)&qword_25472B4C8, (uint64_t)v8, v12, (uint64_t *)v15);
    goto LABEL_24;
  }
  return result;
}

void sub_20B8D4720(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20B8292CC((uint64_t)&qword_25472B4C8, v1);
  _Unwind_Resume(a1);
}

void sub_20B8D473C()
{
  uint64_t v0;

  v0 = 0x7E0u;
  do
  {
    if (byte_2547287C0[v0 - 1] < 0)
      operator delete(*(void **)&byte_2547287C0[v0 - 24]);
    v0 -= 24;
  }
  while (v0);
}

uint64_t *sub_20B8D477C(uint64_t *a1)
{
  *a1 = 0;
  *a1 = utrans_openU();
  return a1;
}

_QWORD *sub_20B8D480C(_QWORD *a1)
{
  if (*a1)
    utrans_close();
  return a1;
}

BOOL sub_20B8D483C(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t **v6;
  unint64_t v7;
  _BOOL8 v8;
  _DWORD v10[4];
  int v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (!*a1)
    return 0;
  if (*(char *)(a2 + 23) >= 0)
    LODWORD(v3) = *(unsigned __int8 *)(a2 + 23);
  else
    v3 = *(_QWORD *)(a2 + 8);
  MEMORY[0x24BDAC7A8]();
  v5 = (char *)v10 - v4;
  sub_20B8D4978(v6, (char *)v10 - v4, v7, 0);
  v11 = v3;
  v12 = 0;
  v10[3] = v3;
  utrans_transUChars();
  v8 = v12 < 1;
  if (v12 <= 0)
  {
    if (*(char *)(a2 + 23) < 0)
    {
      **(_WORD **)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
    else
    {
      *(_WORD *)a2 = 0;
      *(_BYTE *)(a2 + 23) = 0;
    }
    sub_20B88DACC(a2, v5, v11);
  }
  return v8;
}

unint64_t sub_20B8D4978(uint64_t **a1, void *__dst, unint64_t a3, unint64_t a4)
{
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v9;
  unint64_t v10;

  if (*((char *)a1 + 23) < 0)
  {
    v9 = (unint64_t)a1[1];
    v5 = v9 >= a4;
    v10 = v9 - a4;
    if (!v5)
LABEL_17:
      sub_20B8B6BC8();
    if (v10 >= a3)
      v7 = a3;
    else
      v7 = v10;
    a1 = (uint64_t **)*a1;
    if (v7)
      goto LABEL_8;
  }
  else
  {
    v4 = *((unsigned __int8 *)a1 + 23);
    v5 = v4 >= a4;
    v6 = v4 - a4;
    if (!v5)
      goto LABEL_17;
    if (v6 >= a3)
      v7 = a3;
    else
      v7 = v6;
    if (v7)
LABEL_8:
      memmove(__dst, (char *)a1 + 2 * a4, 2 * v7);
  }
  return v7;
}

uint64_t *sub_20B8D49EC(uint64_t *a1)
{
  *a1 = 0;
  *a1 = unum_open();
  return a1;
}

_QWORD *sub_20B8D4A68(_QWORD *a1)
{
  if (*a1)
    unum_close();
  return a1;
}

uint64_t sub_20B8D4A98(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;

  result = *a1;
  if (result)
  {
    *a4 = unum_parseInt64();
    return 1;
  }
  return result;
}

uint64_t sub_20B8D4AE4(_QWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  int v6;
  uint64_t v7;
  _BYTE __src[88];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (!*a1)
    return 0;
  v6 = unum_formatInt64();
  v7 = 1;
  if ((a4 & 1) == 0)
  {
    if (*(char *)(a3 + 23) < 0)
    {
      **(_WORD **)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
    }
    else
    {
      *(_WORD *)a3 = 0;
      *(_BYTE *)(a3 + 23) = 0;
    }
  }
  sub_20B88DACC(a3, __src, v6);
  return v7;
}

void sub_20B8D4BB8()
{
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B8D4BCC(uint64_t a1, CFDictionaryRef theDict)
{
  uint64_t result;
  const void **v5;

  if (!theDict)
    return 0;
  result = CFDictionaryContainsKey(theDict, off_2547292C0);
  if (!(_DWORD)result)
    return result;
  if (*(_BYTE *)(a1 + 16))
  {
    result = CFDictionaryContainsKey(theDict, off_254729270);
    if (!(_DWORD)result)
      return result;
    v5 = (const void **)&off_254729268;
  }
  else
  {
    result = CFDictionaryContainsKey(theDict, off_254729278);
    if (!(_DWORD)result)
      return result;
    v5 = (const void **)&off_254729280;
  }
  result = CFDictionaryContainsKey(theDict, *v5);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t sub_20B8D4C70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, BOOL *a6)
{
  const __CFDictionary *v11;
  uint64_t v12;
  const __CFString *Value;
  const void **v14;
  const __CFString *v15;
  const void **v16;
  const __CFString *v17;
  void *v18;
  void *v19;
  void *v20;
  __int128 v22;
  uint64_t v23;

  v11 = (const __CFDictionary *)LMLanguageModelCopyTokenAttributes();
  v12 = sub_20B8D4BCC(a1, v11);
  if ((_DWORD)v12)
  {
    Value = (const __CFString *)CFDictionaryGetValue(v11, off_2547292C0);
    v14 = (const void **)&off_254729278;
    if (*(_BYTE *)(a1 + 16))
      v14 = (const void **)&off_254729268;
    v15 = (const __CFString *)CFDictionaryGetValue(v11, *v14);
    v16 = (const void **)&off_254729280;
    if (*(_BYTE *)(a1 + 16))
      v16 = (const void **)&off_254729270;
    v17 = (const __CFString *)CFDictionaryGetValue(v11, *v16);
    *a6 = CEMStringContainsEmoji() != 0;
    sub_20B8D0790(Value, (UniChar **)&v22);
    v18 = *(void **)a3;
    if (*(_QWORD *)a3)
    {
      *(_QWORD *)(a3 + 8) = v18;
      operator delete(v18);
    }
    *(_OWORD *)a3 = v22;
    *(_QWORD *)(a3 + 16) = v23;
    sub_20B8D0790(v15, (UniChar **)&v22);
    v19 = *(void **)a4;
    if (*(_QWORD *)a4)
    {
      *(_QWORD *)(a4 + 8) = v19;
      operator delete(v19);
    }
    *(_OWORD *)a4 = v22;
    *(_QWORD *)(a4 + 16) = v23;
    sub_20B8D0790(v17, (UniChar **)&v22);
    v20 = *(void **)a5;
    if (*(_QWORD *)a5)
    {
      *(_QWORD *)(a5 + 8) = v20;
      operator delete(v20);
    }
    *(_OWORD *)a5 = v22;
    *(_QWORD *)(a5 + 16) = v23;
    CFRelease(v11);
  }
  return v12;
}

void sub_20B8D4E08(uint64_t a1)
{
  const void *v2;

  v2 = (const void *)LMLanguageModelCopyTokenAttributes();
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  CFRelease(v2);
}

void sub_20B8D4E68(uint64_t a1, const __CFArray *a2)
{
  uint64_t v4;
  CFIndex Count;
  CFIndex v6;
  uint64_t v7;
  CFIndex v8;
  float *v9;
  CFIndex i;
  float *v11;
  int v12;
  BOOL v13;
  double v14;
  uint64_t **v15;
  uint64_t **v16;
  NSObject *v17;
  CFTypeRef v18;
  CFIndex v19;
  uint64_t v20;
  unsigned __int16 v21;
  unsigned __int16 v22;
  _BYTE buf[12];
  __int16 v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)a1 = 0;
  v4 = a1 + 8;
  sub_20B8D6548(a1 + 8);
  if (a2)
  {
    Count = CFArrayGetCount(a2);
    v6 = Count;
    if (Count < 1)
    {
      v7 = 0;
    }
    else
    {
      v7 = 0;
      v8 = 0;
      v19 = Count;
      do
      {
        v9 = (float *)*((_QWORD *)CFArrayGetValueAtIndex(a2, v8) + 3);
        if (!*(_BYTE *)(a1 + 1) || *(unsigned __int16 *)v9 - 123 >= 0xFFFFFFE6)
        {
          ++v7;
          if (v8)
          {
            v20 = v7;
            for (i = 0; i != v8; ++i)
            {
              v11 = (float *)*((_QWORD *)CFArrayGetValueAtIndex(a2, i) + 3);
              v12 = *(unsigned __int16 *)v11;
              if (*(_BYTE *)(a1 + 1))
                v13 = (v12 - 123) >= 0xFFFFFFE6;
              else
                v13 = 1;
              if (v13)
              {
                v14 = hypotf((float)(v11[1] + (float)(v11[3] * 0.5)) - (float)(v9[1] + (float)(v9[3] * 0.5)), (float)(v11[2] + (float)(v11[4] * 0.5)) - (float)(v9[2] + (float)(v9[4] * 0.5)));
                v22 = v12;
                *(_QWORD *)buf = &v22;
                v15 = sub_20B8D65D8(v4, &v22, (uint64_t)&unk_20BA37B7A, (_WORD **)buf);
                v21 = *(_WORD *)v9;
                *(_QWORD *)buf = &v21;
                *((double *)sub_20B8D688C((uint64_t)(v15 + 3), &v21, (uint64_t)&unk_20BA37B7A, (_WORD **)buf) + 3) = v14;
                v22 = *(_WORD *)v9;
                *(_QWORD *)buf = &v22;
                v16 = sub_20B8D65D8(v4, &v22, (uint64_t)&unk_20BA37B7A, (_WORD **)buf);
                v21 = *(_WORD *)v11;
                *(_QWORD *)buf = &v21;
                *((double *)sub_20B8D688C((uint64_t)(v16 + 3), &v21, (uint64_t)&unk_20BA37B7A, (_WORD **)buf) + 3) = v14;
              }
            }
            v6 = v19;
            v7 = v20;
          }
        }
        ++v8;
      }
      while (v8 != v6);
    }
    v17 = sub_20B9A7C5C(4u);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = v6;
      v24 = 2048;
      v25 = v7;
      _os_log_debug_impl(&dword_20B7F7000, v17, OS_LOG_TYPE_DEBUG, "Input layout key count: %ld, valid layout key count: %ld", buf, 0x16u);
      if (!v7)
        return;
    }
    else if (!v7)
    {
      return;
    }
    v18 = CFRetain(a2);
    sub_20B88B74C((const void **)(a1 + 48), v18);
    *(_BYTE *)a1 = 1;
  }
}

double sub_20B8D5108(uint64_t a1, int a2, int a3)
{
  double v3;
  uint64_t **v4;
  uint64_t **v5;
  unsigned __int16 v7;
  unsigned __int16 v8;

  v8 = a2;
  v7 = a3;
  v3 = 0.0;
  if (a2 != a3)
  {
    v4 = sub_20B886524((_QWORD *)(a1 + 8), &v8);
    v3 = 150.0;
    if (v4)
    {
      v5 = sub_20B886524(v4 + 3, &v7);
      if (v5)
        return *((double *)v5 + 3);
    }
  }
  return v3;
}

unint64_t sub_20B8D516C(uint64_t a1, uint64_t a2, unsigned __int8 *a3, unint64_t a4)
{
  const __CFArray *v5;
  CFIndex Count;
  __n128 v10;
  double v11;
  double v12;
  CFIndex v13;
  CFIndex i;
  float *v15;
  int v16;
  double v17;
  double v18;
  double *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  double *v26;
  __n128 *v27;
  __n128 *v28;
  __int16 *v29;
  __int128 *v30;
  unint64_t v31;
  uint64_t v32;
  __n128 *v33;
  unint64_t v34;
  unsigned __int8 v35;
  __n128 *v37;
  double *v38;
  double *v39;
  void *v40;

  v5 = *(const __CFArray **)(a1 + 48);
  if (!v5 || !*(_BYTE *)a1)
    return 0;
  Count = CFArrayGetCount(v5);
  v11 = *(double *)(a2 + 32);
  v12 = *(double *)(a2 + 40);
  v37 = 0;
  v38 = 0;
  v39 = 0;
  if (Count < 1)
  {
    v30 = 0;
    v29 = 0;
  }
  else
  {
    v13 = Count;
    for (i = 0; i != v13; ++i)
    {
      v15 = (float *)*((_QWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 48), i) + 3);
      v16 = *(unsigned __int16 *)v15;
      if ((v16 - 123) >= 0xFFFFFFE6)
      {
        v10.n128_f64[0] = (float)(v15[1] + (float)(v15[3] * 0.5)) - v11;
        v17 = (float)(v15[2] + (float)(v15[4] * 0.5)) - v12;
        v18 = v17 * v17 + v10.n128_f64[0] * v10.n128_f64[0];
        if (v38 >= v39)
        {
          v20 = ((char *)v38 - (char *)v37) >> 4;
          v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) >> 60)
            sub_20B80CDD8();
          v22 = (char *)v39 - (char *)v37;
          if (((char *)v39 - (char *)v37) >> 3 > v21)
            v21 = v22 >> 3;
          if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0)
            v23 = 0xFFFFFFFFFFFFFFFLL;
          else
            v23 = v21;
          v24 = (char *)sub_20B829AD0((uint64_t)&v39, v23);
          v26 = (double *)&v24[16 * v20];
          *(_WORD *)v26 = v16;
          v26[1] = v18;
          v27 = (__n128 *)v38;
          v28 = (__n128 *)v26;
          if (v38 != (double *)v37)
          {
            do
            {
              v10 = v27[-1];
              v28[-1] = v10;
              --v28;
              --v27;
            }
            while (v27 != v37);
            v27 = v37;
          }
          v19 = v26 + 2;
          v37 = v28;
          v39 = (double *)&v24[16 * v25];
          if (v27)
            operator delete(v27);
        }
        else
        {
          *(_WORD *)v38 = v16;
          v38[1] = v18;
          v19 = v38 + 2;
        }
        v38 = v19;
      }
    }
    v29 = (__int16 *)v37;
    v30 = (__int128 *)v38;
  }
  v31 = 126 - 2 * __clz(((char *)v30 - (char *)v29) >> 4);
  v40 = &unk_24C46CDD0;
  if (v30 == (__int128 *)v29)
    v32 = 0;
  else
    v32 = v31;
  sub_20B8D53F4(v29, v30, (uint64_t)&v40, v32, 1, v10);
  if (((char *)v38 - (char *)v37) >> 4 < a4)
    a4 = ((char *)v38 - (char *)v37) >> 4;
  if (a4)
  {
    v33 = v37;
    v34 = a4;
    do
    {
      v35 = v33->n128_u8[0];
      ++v33;
      *a3++ = v35;
      --v34;
    }
    while (v34);
    goto LABEL_34;
  }
  if (v37)
LABEL_34:
    operator delete(v37);
  return a4;
}

void sub_20B8D53B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_20B8D53E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(double *)(a2 + 8) < *(double *)(a3 + 8);
}

void sub_20B8D53F4(__int16 *a1, __int128 *a2, uint64_t a3, uint64_t a4, char a5, __n128 a6)
{
  __int16 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int16 *v16;
  __int16 v17;
  uint64_t v18;
  __int128 *v19;
  __int128 *v20;
  char v21;
  BOOL v22;
  __int16 v23;
  uint64_t v24;

uint64_t sub_20B8D5760(uint64_t result, __int128 *a2, uint64_t a3)
{
  uint64_t v4;
  __int128 *v5;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;

  if ((__int128 *)result != a2)
  {
    v4 = result;
    v5 = (__int128 *)(result + 16);
    if ((__int128 *)(result + 16) != a2)
    {
      v7 = 0;
      do
      {
        v8 = v5;
        result = (*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))();
        if ((_DWORD)result)
        {
          v12 = *v8;
          v9 = v7;
          while (1)
          {
            v10 = v4 + v9;
            *(_WORD *)(v10 + 16) = *(_WORD *)(v4 + v9);
            *(_QWORD *)(v10 + 24) = *(_QWORD *)(v4 + v9 + 8);
            if (!v9)
              break;
            v9 -= 16;
            result = (*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))();
            if ((result & 1) == 0)
            {
              v11 = v4 + v9 + 16;
              goto LABEL_10;
            }
          }
          v11 = v4;
LABEL_10:
          *(_WORD *)v11 = v12;
          *(_QWORD *)(v11 + 8) = *((_QWORD *)&v12 + 1);
        }
        v5 = v8 + 1;
        v7 += 16;
      }
      while (v8 + 1 != a2);
    }
  }
  return result;
}

uint64_t sub_20B8D5844(uint64_t result, __int128 *a2, uint64_t a3)
{
  __int128 *v4;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  __int128 v9;

  if ((__int128 *)result != a2)
  {
    v4 = (__int128 *)(result + 16);
    if ((__int128 *)(result + 16) != a2)
    {
      v6 = result - 16;
      do
      {
        v7 = v4;
        result = (*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))();
        if ((_DWORD)result)
        {
          v9 = *v7;
          v8 = v6;
          do
          {
            *(_WORD *)(v8 + 32) = *(_WORD *)(v8 + 16);
            *(_QWORD *)(v8 + 40) = *(_QWORD *)(v8 + 24);
            result = (*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))();
            v8 -= 16;
          }
          while ((result & 1) != 0);
          *(_WORD *)(v8 + 32) = v9;
          *(_QWORD *)(v8 + 40) = *((_QWORD *)&v9 + 1);
        }
        v4 = v7 + 1;
        v6 += 16;
      }
      while (v7 + 1 != a2);
    }
  }
  return result;
}

uint64_t sub_20B8D590C(__int16 *a1, __int16 *a2, __int16 *a3, uint64_t a4)
{
  char v8;
  uint64_t result;
  __int16 v10;
  uint64_t *v11;
  uint64_t *v12;
  __int16 v13;
  uint64_t *v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;

  v8 = (*(uint64_t (**)(void))(*(_QWORD *)a4 + 16))();
  result = (*(uint64_t (**)(void))(*(_QWORD *)a4 + 16))();
  if ((v8 & 1) != 0)
  {
    v10 = *a1;
    if ((_DWORD)result)
    {
      *a1 = *a3;
      *a3 = v10;
      v11 = (uint64_t *)(a3 + 4);
      result = 1;
      v12 = (uint64_t *)(a1 + 4);
LABEL_9:
      v14 = v11;
      goto LABEL_10;
    }
    *a1 = *a2;
    v17 = *((_QWORD *)a2 + 1);
    *a2 = v10;
    v18 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v17;
    *((_QWORD *)a2 + 1) = v18;
    if ((*(unsigned int (**)(void))(*(_QWORD *)a4 + 16))())
    {
      v19 = *a2;
      *a2 = *a3;
      *a3 = v19;
      v11 = (uint64_t *)(a3 + 4);
      result = 2;
      v12 = (uint64_t *)(a2 + 4);
      goto LABEL_9;
    }
  }
  else
  {
    if (!(_DWORD)result)
      return result;
    v13 = *a2;
    *a2 = *a3;
    v14 = (uint64_t *)(a2 + 4);
    v15 = *((_QWORD *)a2 + 1);
    *a3 = v13;
    *((_QWORD *)a2 + 1) = *((_QWORD *)a3 + 1);
    *((_QWORD *)a3 + 1) = v15;
    if ((*(unsigned int (**)(void))(*(_QWORD *)a4 + 16))())
    {
      v16 = *a1;
      *a1 = *a2;
      v12 = (uint64_t *)(a1 + 4);
      *a2 = v16;
      result = 2;
LABEL_10:
      v20 = *v12;
      *v12 = *v14;
      *v14 = v20;
      return result;
    }
  }
  return 1;
}

__int16 *sub_20B8D5A58(__int16 *a1, unint64_t a2, uint64_t a3)
{
  __int16 *v6;
  __int16 *v7;
  int v8;
  __int16 v9;
  uint64_t v10;
  __int128 v12;

  v12 = *(_OWORD *)a1;
  if (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) != 0)
  {
    v6 = a1;
    do
      v6 += 8;
    while (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) == 0);
  }
  else
  {
    v7 = a1 + 8;
    do
    {
      v6 = v7;
      if ((unint64_t)v7 >= a2)
        break;
      v8 = (*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))();
      v7 = v6 + 8;
    }
    while (!v8);
  }
  if ((unint64_t)v6 < a2)
  {
    do
      a2 -= 16;
    while (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) != 0);
  }
  while ((unint64_t)v6 < a2)
  {
    v9 = *v6;
    *v6 = *(_WORD *)a2;
    *(_WORD *)a2 = v9;
    v10 = *((_QWORD *)v6 + 1);
    *((_QWORD *)v6 + 1) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = v10;
    do
      v6 += 8;
    while (!(*(unsigned int (**)(void))(*(_QWORD *)a3 + 16))());
    do
      a2 -= 16;
    while (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) != 0);
  }
  if (v6 - 8 != a1)
  {
    *a1 = *(v6 - 8);
    *((_QWORD *)a1 + 1) = *((_QWORD *)v6 - 1);
  }
  *(v6 - 8) = v12;
  *((_QWORD *)v6 - 1) = *((_QWORD *)&v12 + 1);
  return v6;
}

double sub_20B8D5BB4(__int16 *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  __int128 *v8;
  unint64_t v9;
  __int16 v10;
  uint64_t v11;
  double result;
  __int128 v13;

  v6 = 0;
  v13 = *(_OWORD *)a1;
  do
    v6 += 8;
  while (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) != 0);
  v7 = (unint64_t)&a1[v6];
  if (v6 == 8)
  {
    do
    {
      if (v7 >= a2)
        break;
      a2 -= 16;
    }
    while (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) == 0);
  }
  else
  {
    do
      a2 -= 16;
    while (!(*(unsigned int (**)(void))(*(_QWORD *)a3 + 16))());
  }
  v8 = (__int128 *)&a1[v6];
  if (v7 < a2)
  {
    v9 = a2;
    do
    {
      v10 = *(_WORD *)v8;
      *(_WORD *)v8 = *(_WORD *)v9;
      *(_WORD *)v9 = v10;
      v11 = *((_QWORD *)v8 + 1);
      *((_QWORD *)v8 + 1) = *(_QWORD *)(v9 + 8);
      *(_QWORD *)(v9 + 8) = v11;
      do
        ++v8;
      while (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) != 0);
      do
        v9 -= 16;
      while (!(*(unsigned int (**)(void))(*(_QWORD *)a3 + 16))());
    }
    while ((unint64_t)v8 < v9);
  }
  if (v8 - 1 != (__int128 *)a1)
  {
    *a1 = *((_WORD *)v8 - 8);
    *((_QWORD *)a1 + 1) = *((_QWORD *)v8 - 1);
  }
  *((_WORD *)v8 - 8) = v13;
  result = *((double *)&v13 + 1);
  *((_QWORD *)v8 - 1) = *((_QWORD *)&v13 + 1);
  return result;
}

BOOL sub_20B8D5D0C(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  __int16 v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;

  v6 = ((uint64_t)a2 - a1) >> 4;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if ((*(unsigned int (**)(void))(*(_QWORD *)a3 + 16))())
      {
        v8 = *(_WORD *)a1;
        *(_WORD *)a1 = *((_WORD *)a2 - 8);
        *((_WORD *)a2 - 8) = v8;
        v9 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 - 1);
        *((_QWORD *)a2 - 1) = v9;
      }
      return 1;
    case 3:
      sub_20B8D590C((__int16 *)a1, (__int16 *)(a1 + 16), (__int16 *)a2 - 8, a3);
      return 1;
    case 4:
      sub_20B8D5EEC(a1, a1 + 16, a1 + 32, (uint64_t)(a2 - 1), a3);
      return 1;
    case 5:
      sub_20B8D5FD8(a1, a1 + 16, a1 + 32, a1 + 48, (uint64_t)(a2 - 1), a3);
      return 1;
    default:
      sub_20B8D590C((__int16 *)a1, (__int16 *)(a1 + 16), (__int16 *)(a1 + 32), a3);
      v10 = (__int128 *)(a1 + 48);
      if ((__int128 *)(a1 + 48) == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    if ((*(unsigned int (**)(void))(*(_QWORD *)a3 + 16))())
    {
      v16 = *v10;
      v13 = v11;
      while (1)
      {
        v14 = a1 + v13;
        *(_WORD *)(v14 + 48) = *(_WORD *)(a1 + v13 + 32);
        *(_QWORD *)(v14 + 56) = *(_QWORD *)(a1 + v13 + 40);
        if (v13 == -32)
          break;
        v13 -= 16;
        if (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) == 0)
        {
          v15 = a1 + v13 + 48;
          goto LABEL_12;
        }
      }
      v15 = a1;
LABEL_12:
      *(_WORD *)v15 = v16;
      *(_QWORD *)(v15 + 8) = *((_QWORD *)&v16 + 1);
      if (++v12 == 8)
        return v10 + 1 == a2;
    }
    v11 += 16;
    if (++v10 == a2)
      return 1;
  }
}

double sub_20B8D5EEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double result;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;

  sub_20B8D590C((__int16 *)a1, (__int16 *)a2, (__int16 *)a3, a5);
  if ((*(unsigned int (**)(void))(*(_QWORD *)a5 + 16))())
  {
    v11 = *(_WORD *)a3;
    *(_WORD *)a3 = *(_WORD *)a4;
    *(_WORD *)a4 = v11;
    v12 = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = *(_QWORD *)(a4 + 8);
    *(_QWORD *)(a4 + 8) = v12;
    if ((*(unsigned int (**)(void))(*(_QWORD *)a5 + 16))())
    {
      v13 = *(_WORD *)a2;
      *(_WORD *)a2 = *(_WORD *)a3;
      *(_WORD *)a3 = v13;
      v14 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = v14;
      if ((*(unsigned int (**)(void))(*(_QWORD *)a5 + 16))())
      {
        v15 = *(_WORD *)a1;
        *(_WORD *)a1 = *(_WORD *)a2;
        *(_WORD *)a2 = v15;
        result = *(double *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
        *(double *)(a2 + 8) = result;
      }
    }
  }
  return result;
}

double sub_20B8D5FD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  double v12;
  double result;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;

  v12 = sub_20B8D5EEC(a1, a2, a3, a4, a6);
  if ((*(unsigned int (**)(double))(*(_QWORD *)a6 + 16))(v12))
  {
    v14 = *(_WORD *)a4;
    *(_WORD *)a4 = *(_WORD *)a5;
    *(_WORD *)a5 = v14;
    v15 = *(_QWORD *)(a4 + 8);
    *(_QWORD *)(a4 + 8) = *(_QWORD *)(a5 + 8);
    *(_QWORD *)(a5 + 8) = v15;
    if ((*(unsigned int (**)(void))(*(_QWORD *)a6 + 16))())
    {
      v16 = *(_WORD *)a3;
      *(_WORD *)a3 = *(_WORD *)a4;
      *(_WORD *)a4 = v16;
      v17 = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = *(_QWORD *)(a4 + 8);
      *(_QWORD *)(a4 + 8) = v17;
      if ((*(unsigned int (**)(void))(*(_QWORD *)a6 + 16))())
      {
        v18 = *(_WORD *)a2;
        *(_WORD *)a2 = *(_WORD *)a3;
        *(_WORD *)a3 = v18;
        v19 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
        *(_QWORD *)(a3 + 8) = v19;
        if ((*(unsigned int (**)(void))(*(_QWORD *)a6 + 16))())
        {
          v20 = *(_WORD *)a1;
          *(_WORD *)a1 = *(_WORD *)a2;
          *(_WORD *)a2 = v20;
          result = *(double *)(a1 + 8);
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
          *(double *)(a2 + 8) = result;
        }
      }
    }
  }
  return result;
}

__int16 *sub_20B8D6100(uint64_t a1, __int16 *a2, __int16 *a3, uint64_t a4, __n128 a5)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 *v13;
  __int16 *v14;
  __int16 *v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;
  __int16 *v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  if ((__int16 *)a1 != a2)
  {
    v9 = (uint64_t)a2 - a1;
    v10 = ((uint64_t)a2 - a1) >> 4;
    if ((uint64_t)a2 - a1 >= 17)
    {
      v11 = (unint64_t)(v10 - 2) >> 1;
      v12 = v11 + 1;
      v13 = (__int128 *)(a1 + 16 * v11);
      do
      {
        a5.n128_f64[0] = sub_20B8D6284(a1, a4, v10, v13--);
        --v12;
      }
      while (v12);
    }
    v14 = a2;
    if (a2 != a3)
    {
      v15 = a2;
      do
      {
        if ((*(unsigned int (**)(__n128))(*(_QWORD *)a4 + 16))(a5))
        {
          v16 = *v15;
          *v15 = *(_WORD *)a1;
          *(_WORD *)a1 = v16;
          v17 = *((_QWORD *)v15 + 1);
          *((_QWORD *)v15 + 1) = *(_QWORD *)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v17;
          a5.n128_f64[0] = sub_20B8D6284(a1, a4, v10, (__int128 *)a1);
        }
        v15 += 8;
      }
      while (v15 != a3);
      v14 = a3;
    }
    if (v9 >= 17)
    {
      v18 = (unint64_t)v9 >> 4;
      v19 = a2 - 8;
      do
      {
        v20 = *(_WORD *)a1;
        v21 = *(_QWORD *)(a1 + 8);
        v22 = sub_20B8D63D4(a1, a4, v18);
        if (v19 == (__int16 *)v22)
        {
          *(_WORD *)v22 = v20;
          *(_QWORD *)(v22 + 8) = v21;
        }
        else
        {
          *(_WORD *)v22 = *v19;
          *(_QWORD *)(v22 + 8) = *((_QWORD *)v19 + 1);
          *v19 = v20;
          *((_QWORD *)v19 + 1) = v21;
          sub_20B8D648C(a1, v22 + 16, a4, (v22 + 16 - a1) >> 4);
        }
        v19 -= 8;
      }
      while (v18-- > 2);
    }
    return v14;
  }
  return a3;
}

double sub_20B8D6284(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  unint64_t v4;
  __int128 *v5;
  int64_t v7;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;
  uint64_t v13;
  double result;
  __int128 *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - a1) >> 4)
    {
      v10 = ((uint64_t)a4 - a1) >> 3;
      v11 = v10 + 1;
      v12 = (__int128 *)(a1 + 16 * (v10 + 1));
      v13 = v10 + 2;
      if (v10 + 2 < a3 && (*(unsigned int (**)(void))(*(_QWORD *)a2 + 16))())
      {
        ++v12;
        v11 = v13;
      }
      if (((*(uint64_t (**)(void))(*(_QWORD *)a2 + 16))() & 1) == 0)
      {
        v18 = *v5;
        do
        {
          v15 = v12;
          *(_WORD *)v5 = *(_WORD *)v12;
          *((_QWORD *)v5 + 1) = *((_QWORD *)v12 + 1);
          if (v7 < v11)
            break;
          v16 = (2 * v11) | 1;
          v12 = (__int128 *)(a1 + 16 * v16);
          v17 = 2 * v11 + 2;
          if (v17 < a3)
          {
            if ((*(unsigned int (**)(void))(*(_QWORD *)a2 + 16))())
            {
              ++v12;
              v16 = v17;
            }
          }
          v5 = v15;
          v11 = v16;
        }
        while (!(*(unsigned int (**)(void))(*(_QWORD *)a2 + 16))());
        *(_WORD *)v15 = v18;
        result = *((double *)&v18 + 1);
        *((_QWORD *)v15 + 1) = *((_QWORD *)&v18 + 1);
      }
    }
  }
  return result;
}

uint64_t sub_20B8D63D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = a1 + 16 * v6 + 16;
    v10 = (2 * v6) | 1;
    v11 = 2 * v6 + 2;
    if (v11 < a3 && (*(unsigned int (**)(void))(*(_QWORD *)a2 + 16))())
    {
      v9 += 16;
      v10 = v11;
    }
    *(_WORD *)a1 = *(_WORD *)v9;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(v9 + 8);
    a1 = v9;
    v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

double sub_20B8D648C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v7;
  __int128 *v8;
  __int128 *v9;
  double result;
  __int128 *v11;
  __int128 v12;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v7 = v4 >> 1;
    v8 = (__int128 *)(a1 + 16 * (v4 >> 1));
    v9 = (__int128 *)(a2 - 16);
    if ((*(unsigned int (**)(void))(*(_QWORD *)a3 + 16))())
    {
      v12 = *v9;
      do
      {
        v11 = v8;
        *(_WORD *)v9 = *(_WORD *)v8;
        *((_QWORD *)v9 + 1) = *((_QWORD *)v8 + 1);
        if (!v7)
          break;
        v7 = (v7 - 1) >> 1;
        v8 = (__int128 *)(a1 + 16 * v7);
        v9 = v11;
      }
      while (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) != 0);
      *(_WORD *)v11 = v12;
      result = *((double *)&v12 + 1);
      *((_QWORD *)v11 + 1) = *((_QWORD *)&v12 + 1);
    }
  }
  return result;
}

void sub_20B8D6548(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    sub_20B8D659C(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void sub_20B8D659C(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20B84055C((uint64_t)(v2 + 3));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t **sub_20B8D65D8(uint64_t a1, unsigned __int16 *a2, uint64_t a3, _WORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t ***v10;
  uint64_t **i;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD v24[2];
  char v25;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(uint64_t ****)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (uint64_t **)*i)
      {
        v12 = (unint64_t)i[1];
        if (v12 == v7)
        {
          if (*((unsigned __int16 *)i + 8) == (_DWORD)v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = a1 + 16;
  v14 = (char *)operator new(0x40uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v7;
  *((_WORD *)v14 + 8) = **a4;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *((_DWORD *)v14 + 14) = 1065353216;
  v25 = 1;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    sub_20B828960(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *(_QWORD *)v24[0] = *v21;
    *v21 = v24[0];
  }
  else
  {
    *(_QWORD *)v24[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v13;
    if (*(_QWORD *)v24[0])
    {
      v22 = *(_QWORD *)(*(_QWORD *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8)
          v22 %= v8;
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v24[0];
    }
  }
  i = (uint64_t **)v24[0];
  v24[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20B8D6848((uint64_t)v24, 0);
  return i;
}

void sub_20B8D6830(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B8D6848((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_20B8D6848(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20B84055C((uint64_t)v2 + 24);
    operator delete(v2);
  }
}

_QWORD *sub_20B8D688C(uint64_t a1, unsigned __int16 *a2, uint64_t a3, _WORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((unsigned __int16 *)v11 + 8) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x20uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_WORD *)v11 + 8) = **a4;
  v11[3] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    sub_20B828960(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    v21 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_20B8D6A9C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8D6AB0(uint64_t a1, const __CFString *a2, int a3, int a4, int a5)
{
  unsigned __int16 *v7;
  int v8;
  unsigned __int16 *v9;
  unint64_t v10;
  void **v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  unsigned __int16 *v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  unint64_t v34;
  __int128 v35;
  __int128 v37;
  __int128 v38;
  _BYTE v39[25];
  __int128 v40;
  __int128 v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  int v47;
  unint64_t v48;

  *(_DWORD *)a1 = a4;
  *(_DWORD *)(a1 + 4) = a5;
  v7 = (unsigned __int16 *)(a1 + 8);
  sub_20B8D09C0(a2, (_QWORD *)(a1 + 8));
  v8 = *(char *)(a1 + 31);
  if (v8 >= 0)
    v9 = v7;
  else
    v9 = *(unsigned __int16 **)(a1 + 8);
  if (v8 >= 0)
    v10 = *(unsigned __int8 *)(a1 + 31);
  else
    v10 = *(_QWORD *)(a1 + 16);
  sub_20B8D0898(v9, v10, a1 + 32);
  *(_OWORD *)(a1 + 56) = 0u;
  v11 = (void **)(a1 + 56);
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 176) = 1065353216;
  *(_QWORD *)(a1 + 184) = 0;
  v48 = 0;
  v45 = 0u;
  v46 = 0u;
  v47 = 1065353216;
  if (a3)
  {
    v12 = *(char *)(a1 + 31);
    v13 = v12 < 0;
    v14 = *(_QWORD *)(a1 + 8);
    if (v12 >= 0)
      v14 = (uint64_t)v7;
    v15 = *(unsigned __int8 *)(a1 + 31);
    if (v13)
      v15 = *(_QWORD *)(a1 + 16);
    v43 = v14;
    v44 = v15;
    sub_20B87B938(&v43, &v48, (uint64_t)&v45, 0, &v37);
    if (*(char *)(a1 + 79) < 0)
      operator delete(*v11);
    *(_OWORD *)v11 = v37;
    *(_QWORD *)(a1 + 72) = v38;
    v16 = v48;
  }
  else
  {
    v17 = *(char *)(a1 + 55);
    v18 = v17 < 0;
    v19 = *(_QWORD *)(a1 + 32);
    if (v17 >= 0)
      v19 = a1 + 32;
    v20 = *(unsigned __int8 *)(a1 + 55);
    if (v18)
      v20 = *(_QWORD *)(a1 + 40);
    v43 = v19;
    v44 = v20;
    sub_20B87C3D8((uint64_t)&v43, *(_DWORD *)a1, (uint64_t)&v37);
    if (*(char *)(a1 + 79) < 0)
      operator delete(*v11);
    v16 = 0;
    *(_OWORD *)v11 = v37;
    *(_QWORD *)(a1 + 72) = v38;
  }
  v21 = *(char *)(a1 + 31);
  v22 = v21 < 0;
  v23 = *(unsigned __int16 **)(a1 + 8);
  if (v21 >= 0)
    v23 = v7;
  v24 = *(unsigned __int8 *)(a1 + 31);
  if (v22)
    v24 = *(_QWORD *)(a1 + 16);
  v25 = *(char *)(a1 + 55);
  v26 = v25 < 0;
  v27 = *(_QWORD *)(a1 + 32);
  if (v25 >= 0)
    v27 = a1 + 32;
  v28 = *(unsigned __int8 *)(a1 + 55);
  if (v26)
    v28 = *(_QWORD *)(a1 + 40);
  v29 = *(char *)(a1 + 79);
  v30 = v29 < 0;
  v31 = *(_QWORD *)(a1 + 56);
  if (v29 >= 0)
    v31 = a1 + 56;
  v32 = *(unsigned __int8 *)(a1 + 79);
  if (v30)
    v32 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)&v37 = v23;
  *((_QWORD *)&v37 + 1) = v24;
  *(_QWORD *)&v38 = v27;
  *((_QWORD *)&v38 + 1) = v28;
  *(_QWORD *)v39 = v31;
  *(_QWORD *)&v39[8] = v32;
  *(_QWORD *)&v39[16] = v16;
  v39[24] = a3;
  v33 = v45;
  v45 = 0uLL;
  v40 = v33;
  v41 = v46;
  v42 = v47;
  if (*((_QWORD *)&v46 + 1))
  {
    v34 = *(_QWORD *)(v46 + 8);
    if ((*((_QWORD *)&v33 + 1) & (*((_QWORD *)&v33 + 1) - 1)) != 0)
    {
      if (v34 >= *((_QWORD *)&v33 + 1))
        v34 %= *((_QWORD *)&v33 + 1);
    }
    else
    {
      v34 &= *((_QWORD *)&v33 + 1) - 1;
    }
    *(_QWORD *)(v33 + 8 * v34) = &v41;
    v46 = 0uLL;
  }
  v35 = v38;
  *(_OWORD *)(a1 + 80) = v37;
  *(_OWORD *)(a1 + 96) = v35;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)v39;
  *(_OWORD *)(a1 + 121) = *(_OWORD *)&v39[9];
  sub_20B8D6D60(a1 + 144, (uint64_t *)&v40);
  sub_20B84055C((uint64_t)&v40);
  sub_20B84055C((uint64_t)&v45);
  return a1;
}

void sub_20B8D6D08(_Unwind_Exception *a1)
{
  char *v1;
  uint64_t v2;
  void **v3;
  void **v4;
  void **v5;
  uint64_t v6;

  sub_20B84055C(v6 - 96);
  sub_20B84055C(v2);
  if (v1[79] < 0)
    operator delete(*v5);
  if (v1[55] < 0)
    operator delete(*v4);
  if (v1[31] < 0)
    operator delete(*v3);
  _Unwind_Resume(a1);
}

void sub_20B8D6D60(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  sub_20B8CD6FC((_QWORD *)a1);
  v4 = *a2;
  *a2 = 0;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v8 = a2[2];
  v7 = a2 + 2;
  v6 = v8;
  v9 = *(v7 - 1);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  v10 = v7[1];
  *(_QWORD *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    v11 = *(_QWORD *)(v6 + 8);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v11 %= v12;
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = a1 + 16;
    *v7 = 0;
    v7[1] = 0;
  }
}

uint64_t sub_20B8D6E00(const __CFString *a1, CFStringRef theString, int a3)
{
  CFIndex Length;
  UniChar *v7;
  uint64_t v8;
  CFRange v10;

  if (theString
    && (Length = CFStringGetLength(theString),
        v7 = (UniChar *)operator new[](),
        v10.location = 0,
        v10.length = Length,
        CFStringGetCharacters(theString, v10, v7),
        LOBYTE(Length) = sub_20B928FFC((uint64_t)v7, Length),
        MEMORY[0x20BD39C80](v7, 0x1000C80BDFB0063),
        (Length & 1) != 0))
  {
    v8 = operator new();
    sub_20B89CCDC(v8, a1, theString, a3);
  }
  else
  {
    v8 = operator new();
    sub_20B9126D8(v8, a1, theString, a3);
  }
  return v8;
}

void sub_20B8D6F08(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10E1C404E34198CLL);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8D6F60(uint64_t a1, uint64_t *a2, __int128 *a3, CFStringRef theString, const __CFString *a5, int a6, char a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  CFAllocatorRef *v16;
  CFStringRef Copy;
  CFStringRef v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  __int16 Length;
  __int16 v23;

  v12 = a2[2];
  *(_QWORD *)a1 = v12;
  *(_QWORD *)(a1 + *(_QWORD *)(v12 - 32)) = a2[3];
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 0;
  v13 = a2[1];
  *(_QWORD *)a1 = v13;
  *(_QWORD *)(a1 + *(_QWORD *)(v13 - 32)) = a2[4];
  v14 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + *(_QWORD *)(v14 - 32)) = a2[5];
  v15 = *a3;
  *(_DWORD *)(a1 + 36) = *((_DWORD *)a3 + 4);
  *(_OWORD *)(a1 + 20) = v15;
  *(_QWORD *)(a1 + 40) = 0;
  v16 = (CFAllocatorRef *)MEMORY[0x24BDBD240];
  if (theString)
    Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], theString);
  else
    Copy = 0;
  *(_QWORD *)(a1 + 48) = Copy;
  if (a5)
    v18 = CFStringCreateCopy(*v16, a5);
  else
    v18 = 0;
  *(_QWORD *)(a1 + 56) = v18;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = a6;
  *(_DWORD *)(a1 + 76) = a6;
  *(_QWORD *)(a1 + 80) = 0xFFEFFFFFFFFFFFFFLL;
  *(_BYTE *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 89) = a7;
  v19 = (uint64_t *)(a1 + 96);
  *(_WORD *)(a1 + 90) = 1;
  sub_20B8D74E4((_QWORD *)(a1 + 96), 1uLL);
  v20 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(v20 + 32) = 0;
  *(_OWORD *)v20 = 0u;
  *(_OWORD *)(v20 + 16) = 0u;
  v21 = *(_QWORD *)(a1 + 96);
  *(_BYTE *)(v21 + 38) = 1;
  if (theString)
  {
    Length = CFStringGetLength(theString);
    v21 = *v19;
  }
  else
  {
    Length = 0;
  }
  *(_WORD *)(v21 + 24) = Length;
  if (a5)
  {
    v23 = CFStringGetLength(a5);
    v21 = *v19;
  }
  else
  {
    v23 = 0;
  }
  *(_WORD *)(v21 + 26) = v23;
  *(_BYTE *)(v21 + 37) |= 1u;
  *(_DWORD *)v21 = 0;
  return a1;
}

void sub_20B8D70C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 104) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B8D70E0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  const __CFString *v9;
  CFAllocatorRef *v10;
  CFStringRef Copy;
  const __CFString *v12;
  CFStringRef v13;
  const __CFString *v14;
  CFStringRef v15;
  const __CFString *v16;
  CFStringRef v17;
  uint64_t v18;

  v5 = a2[2];
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + *(_QWORD *)(v5 - 32)) = a2[3];
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a3 + 8);
  v6 = a2[1];
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 32)) = a2[4];
  v7 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + *(_QWORD *)(v7 - 32)) = a2[5];
  v8 = *(_OWORD *)(a3 + 20);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a3 + 36);
  *(_OWORD *)(a1 + 20) = v8;
  v9 = *(const __CFString **)(a3 + 40);
  v10 = (CFAllocatorRef *)MEMORY[0x24BDBD240];
  if (v9)
    Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], v9);
  else
    Copy = 0;
  *(_QWORD *)(a1 + 40) = Copy;
  v12 = *(const __CFString **)(a3 + 48);
  if (v12)
    v13 = CFStringCreateCopy(*v10, v12);
  else
    v13 = 0;
  *(_QWORD *)(a1 + 48) = v13;
  v14 = *(const __CFString **)(a3 + 56);
  if (v14)
    v15 = CFStringCreateCopy(*v10, v14);
  else
    v15 = 0;
  *(_QWORD *)(a1 + 56) = v15;
  v16 = *(const __CFString **)(a3 + 64);
  if (v16)
    v17 = CFStringCreateCopy(*v10, v16);
  else
    v17 = 0;
  *(_QWORD *)(a1 + 64) = v17;
  v18 = *(_QWORD *)(a3 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a3 + 72);
  *(_QWORD *)(a1 + 80) = v18;
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a3 + 88);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  sub_20B882248((_QWORD *)(a1 + 96), *(const void **)(a3 + 96), *(_QWORD *)(a3 + 104), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a3 + 104) - *(_QWORD *)(a3 + 96)) >> 3));
  return a1;
}

uint64_t *sub_20B8D7210(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  void *v8;

  v3 = *a2;
  *a1 = *a2;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(v3 - 32)) = a2[5];
  v4 = (const void *)a1[6];
  if (v4)
    CFRelease(v4);
  v5 = (const void *)a1[7];
  if (v5)
    CFRelease(v5);
  v6 = (const void *)a1[8];
  if (v6)
    CFRelease(v6);
  v7 = (const void *)a1[5];
  if (v7)
    CFRelease(v7);
  v8 = (void *)a1[12];
  a1[13] = (uint64_t)v8;
  if (v8)
    operator delete(v8);
  return a1;
}

CFStringRef sub_20B8D7290(_QWORD *a1, const __CFString *a2)
{
  CFStringRef result;
  const void *v5;

  result = (CFStringRef)(*(uint64_t (**)(_QWORD *))(*a1 + 544))(a1);
  if (a2 && (_DWORD)result)
  {
    v5 = (const void *)a1[5];
    if (v5)
      CFRelease(v5);
    result = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], a2);
    a1[5] = result;
  }
  return result;
}

CFMutableStringRef sub_20B8D72E8(uint64_t a1)
{
  CFMutableStringRef Mutable;
  uint64_t v3;
  uint64_t v4;
  __int16 v5;
  CFStringRef Copy;

  Mutable = *(CFMutableStringRef *)(a1 + 64);
  if (!Mutable)
  {
    Mutable = CFStringCreateMutable(0, 0);
    v4 = *(_QWORD *)(a1 + 96);
    v3 = *(_QWORD *)(a1 + 104);
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 416))(a1);
    if ((v5 & 0x4000) != 0 && v3 == v4)
    {
      *(_QWORD *)(a1 + 64) = Mutable;
    }
    else
    {
      if ((v5 & 0x4000) != 0)
        Copy = &stru_24C4B3660;
      else
        Copy = CFStringCreateCopy(0, *(CFStringRef *)(a1 + 56));
      *(_QWORD *)(a1 + 64) = Copy;
      CFRelease(Mutable);
      return *(CFMutableStringRef *)(a1 + 64);
    }
  }
  return Mutable;
}

uint64_t sub_20B8D737C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  if ((a2 & 0x8000000000000000) != 0)
    return 0;
  v2 = *(_QWORD *)(a1 + 96);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 104) - v2) >> 3) <= a2)
    return 0;
  else
    return *(unsigned __int16 *)(v2 + 40 * a2 + 24);
}

uint64_t sub_20B8D73B8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  if ((a2 & 0x8000000000000000) != 0)
    return 0;
  v2 = *(_QWORD *)(a1 + 96);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 104) - v2) >> 3) <= a2)
    return 0;
  else
    return *(unsigned __int16 *)(v2 + 40 * a2 + 26);
}

const __CFString *sub_20B8D73F4(_QWORD *a1)
{
  _DWORD *v1;
  const __CFString *result;

  v1 = (_DWORD *)a1[12];
  if (v1 == (_DWORD *)a1[13])
    return 0;
  result = (const __CFString *)a1[6];
  if (result)
  {
    if (*v1 == 7)
      return (const __CFString *)1;
    else
      return (const __CFString *)sub_20B896388(result);
  }
  return result;
}

BOOL sub_20B8D7428(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  unint64_t v7;
  int v8;

  v1 = *(_QWORD *)(a1 + 96);
  v2 = *(_QWORD *)(a1 + 104) - v1;
  if (!v2)
    return 1;
  v3 = v2 / 40;
  if (v3 <= 1)
    v4 = 1;
  else
    v4 = v3;
  if (!*(_DWORD *)(v1 + 12))
    return 0;
  v5 = (int *)(v1 + 52);
  v6 = 1;
  do
  {
    v7 = v6;
    if (v4 == v6)
      break;
    v8 = *v5;
    v5 += 10;
    ++v6;
  }
  while (v8);
  return v3 <= v7;
}

CFStringRef sub_20B8D7494(uint64_t a1)
{
  UniChar chars;

  chars = CFStringGetLength(*(CFStringRef *)(a1 + 56)) + 48;
  return CFStringCreateWithCharacters(0, &chars, 1);
}

CFStringRef sub_20B8D74CC()
{
  return CFStringCreateCopy(0, &stru_24C4B3660);
}

uint64_t sub_20B8D74DC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

_QWORD *sub_20B8D74E4(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20B8822C0(a1, a2);
    v4 = (char *)a1[1];
    v5 = 40 * ((40 * a2 - 40) / 0x28) + 40;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_20B8D7560(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

__CFArray *sub_20B8D757C(void *a1, const char *a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  CFIndex v8;
  unint64_t v9;
  __CFArray *v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  const void *v15;
  CFIndex *v16;
  CFIndex v17;
  __int16 *v18;
  __CFArray *v19;
  CFIndex v20;
  const __CFString *v21;
  const __CFString *v22;
  __CFArray *v23;
  const __CFString *v24;
  CFIndex v25;
  CFIndex i;
  const __CFNumber *ValueAtIndex;
  CFIndex v28;
  CFIndex v29;
  const __CFNumber *v30;
  const __CFString *v31;
  CFMutableStringRef MutableCopy;
  CFIndex v33;
  CFIndex v34;
  const __CFNumber *v35;
  CFIndex v36;
  CFIndex v37;
  CFIndex v38;
  __int16 *v39;
  __int16 *v40;
  __int16 *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  __int16 *v47;
  __int16 *v48;
  CFIndex Length;
  CFStringRef v50;
  __int16 *v51;
  __int16 *v52;
  uint64_t v53;
  __int16 v54;
  uint64_t v55;
  uint64_t v56;
  std::string *v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  __int16 v67;
  _QWORD *v69;
  uint64_t v70;
  CFMutableArrayRef Mutable;
  uint64_t *v73;
  uint64_t v74;
  CFIndex v75;
  __CFArray *cf;
  const __CFString *v77;
  __CFArray *v78;
  void *__p;
  char *v80;
  char *v81;
  std::string v82;
  __int16 *valuePtr;
  __int16 *v84;
  __int16 *v85;
  __CFString *v86;
  CFRange v87;
  CFRange v88;
  CFRange v89;
  CFRange v90;

  if (!a2)
    return 0;
  v70 = objc_msgSend_rawCandidate(a1, a2, a3);
  v3 = (_QWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v70 + 576))();
  if (!v3)
    return (__CFArray *)CFRetain(a2);
  v4 = v3;
  if (*v3 == v3[1])
    return (__CFArray *)CFRetain(a2);
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  v5 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 560))(v70);
  v6 = *v5;
  v73 = v5;
  v7 = v5[1] - *v5;
  if (!v7)
    return Mutable;
  v69 = v4;
  v8 = 0;
  v9 = v7 >> 2;
  v74 = 0;
  v10 = Mutable;
  do
  {
    if (*(_DWORD *)(v6 + 4 * v8) == 1)
    {
      v11 = v8 + 1;
      while (1)
      {
        v12 = v11;
        if (v11 >= v9)
          break;
        v13 = *(_DWORD *)(v6 + 4 * v11++);
        if (v13 != 1)
        {
          v14 = v12 - 1;
          goto LABEL_13;
        }
      }
      v14 = v9 - 1;
LABEL_13:
      v16 = (CFIndex *)(*v69 + 16 * v74);
      v17 = v16[1];
      v75 = v14;
      if (v14 == v8)
      {
        v18 = (__int16 *)operator new(2uLL);
        *v18 = v17;
        v84 = v18 + 1;
        v85 = v18 + 1;
        valuePtr = v18;
        v19 = sub_20B8D30B4(&valuePtr);
        operator delete(v18);
        v10 = Mutable;
        v8 = v75;
      }
      else
      {
        v20 = *v16;
        v21 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 56))(v70);
        v87.location = v20;
        v87.length = v17;
        v22 = CFStringCreateWithSubstring(0, v21, v87);
        (*(void (**)(__int16 **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v70 + 432))(&valuePtr, v70, 0);
        v23 = sub_20B8D30B4(&valuePtr);
        v78 = v23;
        if (valuePtr)
        {
          v84 = valuePtr;
          operator delete(valuePtr);
        }
        v24 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 232))(v70);
        if (v8 < 1)
        {
          v25 = 0;
        }
        else
        {
          v25 = 0;
          for (i = 0; i != v8; ++i)
          {
            ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v23, i);
            LOWORD(valuePtr) = 0;
            CFNumberGetValue(ValueAtIndex, kCFNumberShortType, &valuePtr);
            v25 += (unsigned __int16)valuePtr;
          }
        }
        v28 = 0;
        if (v75 >= v8)
        {
          if (v9 < v12)
            v12 = v9;
          v29 = v8;
          do
          {
            v30 = (const __CFNumber *)CFArrayGetValueAtIndex(v23, v29);
            LOWORD(valuePtr) = 0;
            CFNumberGetValue(v30, kCFNumberShortType, &valuePtr);
            v28 += (unsigned __int16)valuePtr;
            ++v29;
          }
          while (v12 != v29);
        }
        v88.location = v25;
        v88.length = v28;
        v31 = CFStringCreateWithSubstring(0, v24, v88);
        v77 = v31;
        v19 = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
        cf = v19;
        v89.length = v75 - v8 + 1;
        v89.location = v8;
        CFArrayAppendArray(v19, v23, v89);
        v8 = v75;
        v10 = Mutable;
        if (CFStringCompare(v22, v31, 0))
        {
          MutableCopy = CFStringCreateMutableCopy(0, 0, v31);
          v33 = 0;
          v34 = 0;
          v85 = 0;
          v86 = MutableCopy;
          valuePtr = 0;
          v84 = 0;
          while (v33 < CFArrayGetCount(v19))
          {
            v35 = (const __CFNumber *)CFArrayGetValueAtIndex(v19, v33);
            LOWORD(v82.__r_.__value_.__l.__data_) = 0;
            CFNumberGetValue(v35, kCFNumberShortType, &v82);
            v36 = v34 + LOWORD(v82.__r_.__value_.__l.__data_);
            CFStringInsert(MutableCopy, v36, CFSTR("  "));
            v37 = CFStringGetLength(CFSTR("  ")) + v36;
            v38 = v37 - v34;
            v39 = v84;
            if (v84 >= v85)
            {
              v41 = valuePtr;
              v42 = ((char *)v84 - (char *)valuePtr) >> 4;
              v43 = v42 + 1;
              if ((unint64_t)(v42 + 1) >> 60)
                sub_20B80CDD8();
              v44 = (char *)v85 - (char *)valuePtr;
              if (((char *)v85 - (char *)valuePtr) >> 3 > v43)
                v43 = v44 >> 3;
              if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0)
                v45 = 0xFFFFFFFFFFFFFFFLL;
              else
                v45 = v43;
              if (v45)
              {
                v46 = (char *)sub_20B829AD0((uint64_t)&v85, v45);
                v41 = valuePtr;
                v39 = v84;
              }
              else
              {
                v46 = 0;
              }
              v47 = (__int16 *)&v46[16 * v42];
              *(_QWORD *)v47 = v34;
              *((_QWORD *)v47 + 1) = v38;
              v48 = v47;
              if (v39 == v41)
              {
                v8 = v75;
              }
              else
              {
                v8 = v75;
                do
                {
                  *((_OWORD *)v48 - 1) = *((_OWORD *)v39 - 1);
                  v48 -= 8;
                  v39 -= 8;
                }
                while (v39 != v41);
                v41 = valuePtr;
              }
              v40 = v47 + 8;
              valuePtr = v48;
              v84 = v47 + 8;
              v85 = (__int16 *)&v46[16 * v45];
              if (v41)
                operator delete(v41);
            }
            else
            {
              *(_QWORD *)v84 = v34;
              *((_QWORD *)v39 + 1) = v38;
              v40 = v39 + 8;
            }
            v84 = v40;
            ++v33;
            v34 = v37;
          }
          while (1)
          {
            Length = CFStringGetLength(MutableCopy);
            if (Length > CFStringGetLength(v22))
              break;
            MutableCopy = v86;
            CFStringAppend(v86, CFSTR("  "));
          }
          v50 = v86;
          sub_20B896590(v86, v22, &v82);
          __p = 0;
          v80 = 0;
          v81 = 0;
          sub_20B87D570(&__p, ((char *)v84 - (char *)valuePtr) >> 4);
          v51 = valuePtr;
          v52 = v84;
          while (v51 != v52)
          {
            v53 = *((_QWORD *)v51 + 1);
            if (v53 < 1)
            {
              v54 = 0;
            }
            else
            {
              v54 = 0;
              v55 = *(_QWORD *)v51;
              v56 = v53 + *(_QWORD *)v51;
              v57 = &v82;
              if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v57 = (std::string *)v82.__r_.__value_.__r.__words[0];
              do
              {
                if ((v57->__r_.__value_.__s.__data_[v55] - 97) < 0x1A)
                  ++v54;
                ++v55;
              }
              while (v55 < v56);
            }
            v58 = v80;
            if (v80 >= v81)
            {
              v60 = (char *)__p;
              v61 = v80 - (_BYTE *)__p;
              if (v80 - (_BYTE *)__p <= -3)
                sub_20B80CDD8();
              v62 = v61 >> 1;
              if (v81 - (_BYTE *)__p <= (unint64_t)((v61 >> 1) + 1))
                v63 = v62 + 1;
              else
                v63 = v81 - (_BYTE *)__p;
              if ((unint64_t)(v81 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFELL)
                v64 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v64 = v63;
              if (v64)
              {
                v65 = (char *)sub_20B80FD48((uint64_t)&v81, v64);
                v60 = (char *)__p;
                v58 = v80;
              }
              else
              {
                v65 = 0;
              }
              v66 = &v65[2 * v62];
              *(_WORD *)v66 = v54;
              v59 = v66 + 2;
              while (v58 != v60)
              {
                v67 = *((_WORD *)v58 - 1);
                v58 -= 2;
                *((_WORD *)v66 - 1) = v67;
                v66 -= 2;
              }
              __p = v66;
              v80 = v59;
              v81 = &v65[2 * v64];
              if (v60)
                operator delete(v60);
            }
            else
            {
              *(_WORD *)v80 = v54;
              v59 = v58 + 2;
            }
            v80 = v59;
            v51 += 8;
          }
          v19 = sub_20B8D30B4((__int16 **)&__p);
          v10 = Mutable;
          if (__p)
          {
            v80 = (char *)__p;
            operator delete(__p);
          }
          if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v82.__r_.__value_.__l.__data_);
          if (valuePtr)
          {
            v84 = valuePtr;
            operator delete(valuePtr);
          }
          if (v50)
            CFRelease(v50);
          if (cf)
            CFRelease(cf);
        }
        if (v77)
          CFRelease(v77);
        if (v78)
          CFRelease(v78);
        if (v22)
          CFRelease(v22);
      }
      v90.length = CFArrayGetCount(v19);
      v90.location = 0;
      CFArrayAppendArray(v10, v19, v90);
      if (v19)
        CFRelease(v19);
      ++v74;
    }
    else
    {
      v15 = CFArrayGetValueAtIndex((CFArrayRef)a2, v8);
      CFArrayAppendValue(v10, v15);
    }
    ++v8;
    v6 = *v73;
    v9 = (v73[1] - *v73) >> 2;
  }
  while (v8 < v9);
  return v10;
}

void sub_20B8D7C60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, int a20,const void *a21,const void *a22,const void *a23,const void *a24,void *__p,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;
  void *v35;

  v35 = *(void **)(v33 - 120);
  if (v35)
  {
    *(_QWORD *)(v33 - 112) = v35;
    operator delete(v35);
  }
  sub_20B8A89DC((const void **)(v33 - 96), 0);
  sub_20B8B035C(&a21, 0);
  sub_20B87E150(&a22, 0);
  sub_20B88B74C(&a23, 0);
  sub_20B87E150(&a24, 0);
  _Unwind_Resume(a1);
}

void sub_20B8D7D70(uint64_t a1, int **a2, uint64_t a3, uint64_t a4, uint64_t a5, const __CFString *a6, int a7, _BYTE *a8, double a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  BOOL v23;
  _BOOL4 v24;
  double v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  char v30;
  double v31;
  _BOOL4 v32;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  CFStringRef v37;
  uint64_t v38;
  CFIndex Length;
  uint64_t v40;
  int v41;
  double v42;
  double v43;
  int v44;
  double v45;
  double v46;
  CFMutableStringRef MutableCopy;
  _BYTE *v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  __int16 v53;
  char *v54;
  CFTypeRef v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  _BYTE *v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  _BYTE *v71;
  _BYTE *v72;
  __int16 v73;
  int64_t v74;
  void *v75;
  double v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  double v84;
  const __CFString *v85;
  const __CFString *v86;
  uint64_t *v87;
  uint64_t *v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t *v91;
  uint64_t *v92;
  uint64_t *v93;
  uint64_t v94;
  double v95;
  void *__p;
  void *v97;
  uint64_t v98;
  char *__src;
  char *__srca;
  const __CFString *appendedString;
  const __CFAllocator *alloc;
  uint64_t v103;
  const __CFString *theString;
  uint64_t v105;
  __int16 v106;
  char *v107;
  char theString2;
  CFStringRef theString2a;
  const __CFString *theString2b;
  uint64_t *v111;
  void *v112;
  char *v113;
  unint64_t v114;
  void *v115[3];
  CFTypeRef cf;
  CFTypeRef v117;
  uint64_t v118;
  double v119;
  unsigned int v120;
  uint64_t v121;
  uint64_t *v122[2];
  char v123;

  v10 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (v10)
  {
    v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 32);
    sub_20B87646C(*(_QWORD *)(*(_QWORD *)a1 + 24));
    v21 = atomic_load((unsigned int *)(v10 + 40));
    if (v21 == 2)
    {
      v22 = *(_QWORD *)v10;
      v23 = !v22 || v20 == 0;
      if (!v23)
      {
        if (a7)
        {
          if ((sub_20B9B8D50(a2, v20) & 1) == 0)
            return;
        }
        else
        {
          v20 = v22;
          if (!sub_20B9B8E04(a2, v22))
            return;
        }
        v103 = a5;
        if (a6)
          v24 = CFStringGetLength(a6) == 0;
        else
          v24 = 1;
        theString = a6;
        v25 = -7.0;
        if (a7)
          v25 = (*(double (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 40))(v20, 2);
        LMLanguageModelCreatePredictionEnumerator();
        v105 = 0;
        v26 = 0;
        v111 = (uint64_t *)(a10 + 8);
        alloc = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v27 = 7.0;
        v28 = 0.0;
        v29 = 0.25;
        theString2 = 1;
        while (1)
        {
          if (!LMPredictionEnumeratorAdvance())
          {
LABEL_169:
            LMPredictionEnumeratorRelease();
            return;
          }
          v120 = 0;
          v118 = 0;
          v119 = 0.0;
          LMPredictionEnumeratorGetPrediction();
          if ((a7 & 1) == 0)
            v118 = a2[1] - *a2;
          if (v120 == 2)
          {
            v30 = !v24;
            if (v26)
              v30 = 1;
            if ((v30 & 1) == 0)
              *a8 = 1;
            if (!a7)
              v25 = v119;
            goto LABEL_27;
          }
          if (v24)
          {
            if (v120 < 0x258)
              goto LABEL_27;
          }
          else if (v120 < 0x258 || v120 == 1000 || v120 == 1003)
          {
            goto LABEL_27;
          }
          if ((a7 & 1) != 0 || *(a2[1] - 1) != v120)
          {
            v31 = v119;
            if (!sub_20B9C45B0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 32), v120))
            {
              v32 = v25 <= -0.3;
              if (!v24)
                v32 = v25 <= -0.5;
              if (!v32 || v25 + -2.0 > v31)
                goto LABEL_169;
            }
            v34 = v120;
            if (v120 >= 0x258)
            {
              v35 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)a1 + 120) + 8);
              if (sub_20B9C45B0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 32), v120))
              {
                v36 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 32);
                v37 = (CFStringRef)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v36 + 32))(v36, v34);
              }
              else
              {
                v38 = sub_20B978A58(v35, v34);
                if (!v38 || (*(_WORD *)(v38 + 4) & 0x800) != 0)
                  goto LABEL_27;
                v37 = sub_20B97895C(v35, v34);
              }
              v117 = v37;
              if (v37)
                break;
            }
          }
LABEL_27:
          if (++v26 == a4)
            goto LABEL_169;
        }
        appendedString = v37;
        Length = CFStringGetLength(v37);
        if (Length)
        {
          if (!*(_BYTE *)(a3 + 8))
          {
            v40 = a10;
            goto LABEL_66;
          }
          v40 = a10;
          if (theString2 & 1 | (v105 != v118))
          {
            v41 = *(unsigned __int8 *)(a3 + 9);
            if (v118 > 1)
            {
              v28 = dbl_20BA43B90[v41 == 0];
              v42 = 10.0;
              v43 = 10.5;
            }
            else
            {
              v28 = dbl_20BA43BA0[v41 == 0];
              v42 = 10.0;
              v43 = 11.0;
            }
            if (*(_BYTE *)(a3 + 9))
              v27 = v42;
            else
              v27 = v43;
          }
          if (v119 > -v27)
          {
            if ((theString2 & 1) != 0)
              v27 = -(v119 * v28);
LABEL_66:
            cf = 0;
            sub_20B8D9040(v115, 1uLL, &v120);
            LOWORD(v122[0]) = Length;
            sub_20B8D3AA4(&v112, 1, v122);
            if (v24)
            {
              v45 = v119 + a9;
              theString2a = 0;
              v46 = v45 + log2((double)Length) * v29;
LABEL_108:
              if (a7)
                v76 = v46 + -0.2;
              else
                v76 = v46;
              v105 = v118;
              v77 = *(_QWORD *)(v40 + 16);
              v78 = *(uint64_t **)v40;
              if (v77)
              {
                v79 = 4;
                if (!*((_BYTE *)v78 + 56))
                  v79 = 5;
                if (v76 < *(double *)&v78[v79] + -3.0)
                  goto LABEL_115;
                if (v77 == v103)
                {
                  v80 = a10 + 8;
                  v81 = *v111;
                  if (*v111)
                  {
                    do
                    {
                      v82 = v81;
                      v81 = *(_QWORD *)(v81 + 8);
                    }
                    while (v81);
                  }
                  else
                  {
                    do
                    {
                      v82 = *(_QWORD *)(v80 + 16);
                      v23 = *(_QWORD *)v82 == v80;
                      v80 = v82;
                    }
                    while (v23);
                  }
                  v83 = 32;
                  if (!*(_BYTE *)(v82 + 56))
                    v83 = 40;
                  v84 = *(double *)(v82 + v83);
                  if (v76 < v84 + -0.5)
                  {
LABEL_115:
                    v44 = 2;
LABEL_116:
                    v29 = 0.25;
                    goto LABEL_149;
                  }
                  if (v76 < v84)
                  {
                    v44 = 4;
                    goto LABEL_116;
                  }
                }
              }
              v85 = appendedString;
              if (theString2a)
                v85 = theString2a;
              theString2b = v85;
              if (v78 == v111)
                goto LABEL_137;
              while (1)
              {
                v86 = (const __CFString *)v78[8];
                if (v86)
                {
                  if (CFStringCompare(v86, theString2b, 0) == kCFCompareEqualTo)
                    break;
                }
                v87 = (uint64_t *)v78[1];
                if (v87)
                {
                  do
                  {
                    v88 = v87;
                    v87 = (uint64_t *)*v87;
                  }
                  while (v87);
                }
                else
                {
                  do
                  {
                    v88 = (uint64_t *)v78[2];
                    v23 = *v88 == (_QWORD)v78;
                    v78 = v88;
                  }
                  while (!v23);
                }
                v78 = v88;
                if (v88 == v111)
                  goto LABEL_137;
              }
              if (v78 == v111)
              {
LABEL_137:
                v29 = 0.25;
                if (*(_QWORD *)(v40 + 16) == v103)
                {
                  v89 = (uint64_t *)(a10 + 8);
                  v90 = (uint64_t *)*v111;
                  if (*v111)
                  {
                    do
                    {
                      v91 = v90;
                      v90 = (uint64_t *)v90[1];
                    }
                    while (v90);
                  }
                  else
                  {
                    do
                    {
                      v91 = (uint64_t *)v89[2];
                      v23 = *v91 == (_QWORD)v89;
                      v89 = v91;
                    }
                    while (v23);
                  }
                  sub_20B8D9280((uint64_t **)a10, v91);
                  sub_20B8D9180((uint64_t)(v91 + 4));
                  v92 = v91;
                  v40 = a10;
                  operator delete(v92);
                }
                if (!a7)
                {
                  sub_20B8D93A8((uint64_t **)v40, theString2b, 0, (uint64_t)v115, (uint64_t)&v112, 0, v46);
                  v44 = 0;
LABEL_149:
                  if (v112)
                  {
                    v113 = (char *)v112;
                    operator delete(v112);
                  }
                  if (v115[0])
                  {
                    v115[1] = v115[0];
                    operator delete(v115[0]);
                  }
                  if (cf)
                    CFRelease(cf);
                  theString2 = 0;
                  v55 = v117;
                  if (!v117)
                  {
LABEL_157:
                    if ((v44 | 4) != 4)
                      goto LABEL_169;
                    goto LABEL_27;
                  }
LABEL_156:
                  CFRelease(v55);
                  goto LABEL_157;
                }
                v122[0] = (uint64_t *)operator new(0x78uLL);
                v122[1] = (uint64_t *)(a10 + 8);
                v123 = 0;
                sub_20B8D90C0((uint64_t)(v122[0] + 4), theString2b, (uint64_t)v115, (uint64_t)&v112, 1, v46 + -0.2, 0.0);
                v123 = 1;
                v93 = sub_20B8D92F0(v40, &v121, (uint64_t)(v122[0] + 4));
                if (!*v93)
                {
                  sub_20B8296A0((uint64_t **)v40, v121, (uint64_t **)v93, v122[0]);
                  v122[0] = 0;
                }
                sub_20B8D9364((uint64_t)v122, 0);
              }
              else
              {
                v94 = 4;
                if (!*((_BYTE *)v78 + 56))
                  v94 = 5;
                if (v76 <= *(double *)&v78[v94])
                {
                  v44 = 0;
                  goto LABEL_116;
                }
                v95 = *(double *)&v78[v94];
                sub_20B8D9280((uint64_t **)a10, v78);
                sub_20B8D9180((uint64_t)(v78 + 4));
                operator delete(v78);
                if (a7)
                  sub_20B8D949C((uint64_t **)a10, theString2b, (uint64_t)v115, (uint64_t)&v112, a7, v46 + -0.2, v95);
                else
                  sub_20B8D9588((uint64_t **)a10, theString2b, (uint64_t)v115, (uint64_t)&v112, 0, v95, v46);
                v29 = 0.25;
              }
              v44 = 0;
              goto LABEL_149;
            }
            MutableCopy = CFStringCreateMutableCopy(alloc, 0, theString);
            cf = MutableCopy;
            CFStringAppend(MutableCopy, appendedString);
            sub_20B873328((uint64_t)v115, (char *)v115[0], (char *)a2[1] - 4);
            v48 = v112;
            v106 = CFStringGetLength(theString);
            v49 = v113;
            v50 = (char *)v112 + ((v48 - (_BYTE *)v112) & 0xFFFFFFFFFFFFFFFELL);
            theString2a = MutableCopy;
            if ((unint64_t)v113 < v114)
            {
              if (v50 == v113)
              {
                *(_WORD *)v50 = v106;
                v113 = v50 + 2;
                v40 = a10;
              }
              else
              {
                v51 = v113 - 2;
                v52 = v113;
                v40 = a10;
                if ((unint64_t)v113 >= 2)
                {
                  do
                  {
                    v53 = *(_WORD *)v51;
                    v51 += 2;
                    *(_WORD *)v52 = v53;
                    v52 += 2;
                  }
                  while (v51 < v49);
                }
                v113 = v52;
                if (v49 != v50 + 2)
                {
                  v54 = v50;
                  memmove(&v49[-2 * ((v49 - (v50 + 2)) >> 1)], v50, v49 - (v50 + 2));
                  v50 = v54;
                }
                *(_WORD *)v50 = v106;
              }
LABEL_107:
              v46 = v119 + a9;
              goto LABEL_108;
            }
            v97 = v48;
            v98 = v48 - (_BYTE *)v112;
            __src = (char *)v112 + ((v48 - (_BYTE *)v112) & 0xFFFFFFFFFFFFFFFELL);
            if (v113 - (_BYTE *)v112 <= -3)
              sub_20B80CDD8();
            v56 = (v113 - (_BYTE *)v112) >> 1;
            v57 = v112;
            if (v114 - (unint64_t)v112 <= v56 + 1)
              v58 = v56 + 1;
            else
              v58 = v114 - (_QWORD)v112;
            if (v114 - (unint64_t)v112 >= 0x7FFFFFFFFFFFFFFELL)
              v59 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v59 = v58;
            if (v59)
              v60 = (char *)sub_20B80FD48((uint64_t)&v114, v59);
            else
              v60 = 0;
            v61 = v98 >> 1;
            v62 = &v60[2 * (v98 >> 1)];
            v63 = &v60[2 * v59];
            if (v98 >> 1 == v59)
            {
              v64 = __src;
              if (v98 >= 1)
              {
                if (v61 >= -1)
                  v65 = v61 + 1;
                else
                  v65 = v61 + 2;
                v62 -= v65 & 0xFFFFFFFFFFFFFFFELL;
                goto LABEL_100;
              }
              __p = v60;
              if (v57 == v97)
                v66 = 1;
              else
                v66 = v98;
              v67 = (char *)sub_20B80FD48((uint64_t)&v114, v66);
              v62 = &v67[2 * (v66 >> 2)];
              v63 = &v67[2 * v68];
              if (__p)
              {
                v69 = &v67[2 * v68];
                operator delete(__p);
                v63 = v69;
              }
            }
            v64 = __src;
LABEL_100:
            *(_WORD *)v62 = v106;
            v70 = v62 + 2;
            v71 = v112;
            if (v112 != v64)
            {
              v72 = v64;
              do
              {
                v73 = *((_WORD *)v72 - 1);
                v72 -= 2;
                *((_WORD *)v62 - 1) = v73;
                v62 -= 2;
              }
              while (v72 != v71);
            }
            v74 = v113 - v64;
            if (v113 != v64)
            {
              v107 = v70;
              __srca = v63;
              memmove(v70, v64, v113 - v64);
              v70 = v107;
              v63 = __srca;
            }
            v75 = v112;
            v112 = v62;
            v113 = &v70[v74];
            v114 = (unint64_t)v63;
            v40 = a10;
            if (v75)
              operator delete(v75);
            goto LABEL_107;
          }
          v44 = 2;
        }
        else
        {
          v44 = 4;
        }
        v55 = appendedString;
        goto LABEL_156;
      }
    }
  }
}

void sub_20B8D870C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,const void *a29,const void *a30)
{
  if (__p)
    operator delete(__p);
  if (a26)
    operator delete(a26);
  sub_20B8A89DC(&a29, 0);
  sub_20B87E150(&a30, 0);
  _Unwind_Resume(a1);
}

void sub_20B8D87BC(uint64_t *a1@<X0>, const __CFString *a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  unsigned int v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  char *v16;
  unsigned int v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  double v23;
  const void *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void **v29;
  uint64_t v30;
  uint64_t i;
  uint64_t v32;
  uint64_t v33;
  const void *v34;
  double v35;
  double v36;
  char v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  int v52;
  uint64_t j;
  uint64_t v54;
  int v55;
  double *v56;
  double *v57;
  double v58;
  double *v59;
  uint64_t v60;
  double v61;
  int v62;
  unint64_t v63;
  int *v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  double v72;
  int v73;
  uint64_t v74;
  uint64_t *v75;
  BOOL v76;
  uint64_t v77;
  double v78;
  double v79;
  int v80;
  uint64_t *v81;
  uint64_t *v82;
  _QWORD *v83;
  uint64_t v84;
  __int128 v85;
  _OWORD v86[2];
  void *__p;
  char *v88;
  unint64_t v89;
  void **v90;
  _BYTE v91[24];
  _OWORD *v92;

  *a4 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  v6 = (uint64_t *)(a5 + 8);
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)a5 = a5 + 8;
  v7 = *(_QWORD *)(*a1 + 24);
  if (!v7)
    return;
  sub_20B87646C(*(_QWORD *)(*a1 + 24));
  v12 = atomic_load((unsigned int *)(v7 + 40));
  if (v12 != 2 || !*(_QWORD *)v7)
    return;
  v13 = (_QWORD *)operator new();
  sub_20B872064((uint64_t)v13, a2, *a1, 1);
  sub_20B87306C(v13, 1, &__p);
  v14 = (char *)__p;
  if (v88 - (_BYTE *)__p != 4)
  {
    if ((unint64_t)(v88 - (_BYTE *)__p) <= 8)
      v15 = (char *)__p;
    else
      v15 = v88 - 8;
LABEL_10:
    v16 = v88;
    do
    {
      if (v16 == v15)
        goto LABEL_124;
      v17 = *((_DWORD *)v16 - 1);
      if (v16 == v88 && v17 == 502)
        goto LABEL_124;
      v16 -= 4;
    }
    while (v17 <= 0x257);
    goto LABEL_15;
  }
  v15 = (char *)__p;
  if (*(_DWORD *)__p != 1)
    goto LABEL_10;
LABEL_15:
  v18 = *(_QWORD *)a3 + 2;
  sub_20B8D7D70((uint64_t)a1, (int **)&__p, a3, 16, v18, 0, 0, a4, 0.0, a5);
  sub_20B8D7D70((uint64_t)a1, (int **)&__p, a3, 16, v18, 0, 1, a4, 0.0, a5);
  v14 = (char *)__p;
  v19 = v88;
  if ((unint64_t)(v88 - (_BYTE *)__p) >= 9 && !*(_BYTE *)(a3 + 9))
  {
    v83 = v13;
    memset(v86, 0, 24);
    v20 = *(uint64_t **)a5;
    if (*(uint64_t **)a5 != v6)
    {
      v21 = 0;
      v22 = 0;
      v84 = v18;
      v23 = 0.0;
      do
      {
        v24 = (const void *)v20[8];
        if (v24 && v20[10] != v20[9])
        {
          if (v22 >= *(_QWORD *)&v86[1])
          {
            v25 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v22 - v21) >> 3);
            if ((unint64_t)(v25 + 1) > 0x2E8BA2E8BA2E8BALL)
              sub_20B80CDD8();
            v26 = 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)&v86[1] - v21) >> 3);
            v27 = 2 * v26;
            if (2 * v26 <= v25 + 1)
              v27 = v25 + 1;
            if (v26 >= 0x1745D1745D1745DLL)
              v28 = 0x2E8BA2E8BA2E8BALL;
            else
              v28 = v27;
            v92 = &v86[1];
            if (v28)
            {
              if (v28 > 0x2E8BA2E8BA2E8BALL)
                sub_20B800BC0();
              v29 = (void **)operator new(88 * v28);
              v24 = (const void *)v20[8];
            }
            else
            {
              v29 = 0;
            }
            v90 = v29;
            *(_QWORD *)v91 = &v29[11 * v25];
            *(_QWORD *)&v91[8] = *(_QWORD *)v91;
            *(_QWORD *)&v91[16] = &v29[11 * v28];
            sub_20B8D90C0(*(uint64_t *)v91, v24, (uint64_t)(v20 + 9), (uint64_t)(v20 + 12), *((_BYTE *)v20 + 56), *((double *)v20 + 4), *((double *)v20 + 5));
            v30 = *(_QWORD *)v91;
            *(_QWORD *)&v91[8] += 88;
            for (i = 88; ; i -= 88)
            {
              v32 = *((_QWORD *)&v86[0] + 1) + i;
              if (*((_QWORD *)&v86[0] + 1) + i - 88 == *(_QWORD *)&v86[0])
                break;
              v33 = v30 + i - 176;
              v34 = *(const void **)(*((_QWORD *)&v86[0] + 1) + i - 144);
              v35 = *(double *)(*((_QWORD *)&v86[0] + 1) + i - 176);
              v36 = *(double *)(*((_QWORD *)&v86[0] + 1) + i - 168);
              v37 = *(_BYTE *)(*((_QWORD *)&v86[0] + 1) + i - 152);
              sub_20B8D90C0(v33, v34, v32 - 136, v32 - 112, v37, v35, v36);
            }
            v38 = *(_QWORD *)&v86[1];
            v85 = *(_OWORD *)&v91[8];
            v39 = v86[0];
            *(_QWORD *)&v86[0] = v30 + i - 88;
            *(_OWORD *)v91 = v39;
            *(_OWORD *)((char *)v86 + 8) = v85;
            *(_QWORD *)&v91[16] = v38;
            v90 = (void **)v39;
            sub_20B8D91C4((uint64_t)&v90);
            v22 = v85;
            v18 = v84;
          }
          else
          {
            sub_20B8D90C0(v22, v24, (uint64_t)(v20 + 9), (uint64_t)(v20 + 12), *((_BYTE *)v20 + 56), *((double *)v20 + 4), *((double *)v20 + 5));
            v22 += 88;
          }
          *((_QWORD *)&v86[0] + 1) = v22;
          v40 = 4;
          if (!*((_BYTE *)v20 + 56))
            v40 = 5;
          if (v23 == 0.0)
          {
            v23 = *(double *)&v20[v40];
          }
          else if (*(double *)&v20[v40] < v23 + -1.0)
          {
            break;
          }
        }
        v21 = *(_QWORD *)&v86[0];
        if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v22 - *(_QWORD *)&v86[0]) >> 3)) > 3)
          break;
        v41 = (uint64_t *)v20[1];
        if (v41)
        {
          do
          {
            v42 = v41;
            v41 = (uint64_t *)*v41;
          }
          while (v41);
        }
        else
        {
          do
          {
            v42 = (uint64_t *)v20[2];
            v76 = *v42 == (_QWORD)v20;
            v20 = v42;
          }
          while (!v76);
        }
        v20 = v42;
      }
      while (v42 != v6);
      v19 = v88;
    }
    if ((unint64_t)v19 >= v89)
    {
      v44 = (char *)__p;
      v45 = (v19 - (_BYTE *)__p) >> 2;
      v46 = v45 + 1;
      if ((unint64_t)(v45 + 1) >> 62)
        sub_20B80CDD8();
      v47 = v89 - (_QWORD)__p;
      if ((uint64_t)(v89 - (_QWORD)__p) >> 1 > v46)
        v46 = v47 >> 1;
      if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL)
        v48 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v48 = v46;
      if (v48)
      {
        v49 = (char *)sub_20B8127BC((uint64_t)&v89, v48);
        v44 = (char *)__p;
        v19 = v88;
      }
      else
      {
        v49 = 0;
      }
      v50 = &v49[4 * v45];
      v51 = &v49[4 * v48];
      *(_DWORD *)v50 = 0;
      v43 = v50 + 4;
      while (v19 != v44)
      {
        v52 = *((_DWORD *)v19 - 1);
        v19 -= 4;
        *((_DWORD *)v50 - 1) = v52;
        v50 -= 4;
      }
      __p = v50;
      v88 = v43;
      v89 = (unint64_t)v51;
      if (v44)
        operator delete(v44);
    }
    else
    {
      *(_DWORD *)v19 = 0;
      v43 = v19 + 4;
    }
    v88 = v43;
    v54 = *((_QWORD *)&v86[0] + 1);
    for (j = *(_QWORD *)&v86[0]; j != v54; j += 88)
    {
      *((_DWORD *)v88 - 1) = **(_DWORD **)(j + 40);
      v55 = *(unsigned __int8 *)(j + 24);
      if (*(_BYTE *)(j + 24))
        v56 = (double *)j;
      else
        v56 = (double *)(j + 8);
      sub_20B8D7D70((uint64_t)a1, (int **)&__p, a3, 2, v18, *(const __CFString **)(j + 32), v55, a4, *v56, a5);
      if (v55)
        v57 = (double *)(j + 8);
      else
        v57 = (double *)j;
      v58 = *v57;
      if (*v57 != 0.0)
      {
        v59 = (double *)(*(_BYTE *)(j + 24) ? j : j + 8);
        if (*v59 - v58 < 0.5)
          sub_20B8D7D70((uint64_t)a1, (int **)&__p, a3, 2, v18, *(const __CFString **)(j + 32), v55 == 0, a4, *v59, a5);
      }
    }
    v90 = (void **)v86;
    sub_20B8D9210(&v90);
    v14 = (char *)__p;
    v13 = v83;
  }
  if (*(_QWORD *)(a5 + 16))
  {
    v60 = *(_QWORD *)(*(_QWORD *)(*a1 + 8) + 32);
    v61 = (*(double (**)(uint64_t))(*(_QWORD *)v60 + 48))(v60);
    v14 = v88;
    if (v88 == __p)
    {
      v62 = 0;
    }
    else
    {
      v62 = 0;
      v63 = 0;
      v64 = (int *)(v88 - 4);
      do
      {
        v65 = *(_QWORD *)(*a1 + 24);
        if (v65 && (sub_20B87646C(*(_QWORD *)(*a1 + 24)), v66 = atomic_load((unsigned int *)(v65 + 40)), v66 == 2))
          v67 = *(_QWORD *)v65;
        else
          v67 = 0;
        v62 |= sub_20B9B8DC8(v67, *v64);
        v14 = (char *)__p;
      }
      while (v64-- != __p && v63++ < 2);
    }
    v69 = *(uint64_t **)a5;
    if (*(uint64_t **)a5 != v6)
    {
      v70 = 0;
      if (*((_BYTE *)v69 + 56))
        v71 = 4;
      else
        v71 = 5;
      v72 = *(double *)&v69[v71] + -1.0;
      while ((unint64_t)(v69[10] - v69[9]) > 4)
      {
        if ((unint64_t)++v70 <= 2)
        {
          v73 = *((unsigned __int8 *)v69 + 56);
          v74 = *((_BYTE *)v69 + 56) ? 32 : 40;
          if (*(double *)((char *)v69 + v74) >= v72)
            goto LABEL_108;
        }
        v75 = sub_20B8D9280((uint64_t **)a5, v69);
        sub_20B8D9180((uint64_t)(v69 + 4));
        operator delete(v69);
        v69 = v75;
LABEL_122:
        if (v69 == v6)
        {
          v14 = (char *)__p;
          goto LABEL_124;
        }
      }
      v73 = *((unsigned __int8 *)v69 + 56);
LABEL_108:
      v76 = v73 == 0;
      if (v73)
        v77 = 4;
      else
        v77 = 5;
      v78 = v61 + *(double *)&v69[v77];
      v79 = -v78;
      v80 = !v76;
      if (((v62 | v80) & 1) == 0 && *((double *)v69 + 5) > -2.0)
      {
        v79 = -1.0 - v78;
        if (-1.0 - v78 < 0.1)
          v79 = 0.1;
      }
      *((double *)v69 + 6) = v79;
      v81 = (uint64_t *)v69[1];
      if (v81)
      {
        do
        {
          v69 = v81;
          v81 = (uint64_t *)*v81;
        }
        while (v81);
      }
      else
      {
        do
        {
          v82 = v69;
          v69 = (uint64_t *)v69[2];
        }
        while ((uint64_t *)*v69 != v82);
      }
      goto LABEL_122;
    }
  }
LABEL_124:
  if (v14)
  {
    v88 = v14;
    operator delete(v14);
  }
  (*(void (**)(_QWORD *))(*v13 + 16))(v13);
}

void sub_20B8D8F68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,char *a22,char a23)
{
  uint64_t v23;

  a22 = &a15;
  sub_20B8D9210((void ***)&a22);
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a10 + 16))(a10);
  sub_20B8D9674(v23, *(_QWORD **)(v23 + 8));
  _Unwind_Resume(a1);
}

_QWORD *sub_20B8D9040(_QWORD *a1, unint64_t a2, _DWORD *a3)
{
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20B81277C(a1, a2);
    v6 = (_DWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_20B8D90A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B8D90C0(uint64_t a1, CFTypeRef cf, uint64_t a3, uint64_t a4, char a5, double a6, double a7)
{
  CFTypeRef v10;

  *(double *)a1 = a6;
  *(double *)(a1 + 8) = a7;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = a5;
  if (cf)
    v10 = CFRetain(cf);
  else
    v10 = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 32) = v10;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  sub_20B873D0C((_QWORD *)(a1 + 40), *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  sub_20B87ACC8((_QWORD *)(a1 + 64), *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 1);
  return a1;
}

void sub_20B8D9150(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 48) = v4;
    operator delete(v4);
  }
  sub_20B87E150((const void **)(v1 + 32), 0);
  _Unwind_Resume(a1);
}

void sub_20B8D9180(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 40);
  if (v3)
  {
    *(_QWORD *)(a1 + 48) = v3;
    operator delete(v3);
  }
  sub_20B87E150((const void **)(a1 + 32), 0);
}

uint64_t sub_20B8D91C4(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 88;
    sub_20B8D9180(i - 88);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20B8D9210(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 88;
        sub_20B8D9180(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *sub_20B8D9280(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  BOOL v5;
  uint64_t *v6;

  v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      v3 = v2;
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    v4 = a2;
    do
    {
      v3 = (uint64_t *)v4[2];
      v5 = *v3 == (_QWORD)v4;
      v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2)
    *a1 = v3;
  v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  sub_20B860794(v6, a2);
  return v3;
}

uint64_t *sub_20B8D92F0(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *result;
  uint64_t *v4;
  uint64_t *v5;
  double *v6;
  double v7;
  uint64_t *v8;
  double *v9;

  v5 = *(uint64_t **)(a1 + 8);
  result = (uint64_t *)(a1 + 8);
  v4 = v5;
  if (v5)
  {
    if (*(_BYTE *)(a3 + 24))
      v6 = (double *)a3;
    else
      v6 = (double *)(a3 + 8);
    v7 = *v6;
    do
    {
      while (1)
      {
        v8 = v4;
        v9 = (double *)(v4 + 4);
        if (!*((_BYTE *)v8 + 56))
          v9 = (double *)(v8 + 5);
        if (v7 < *v9)
          break;
        v4 = (uint64_t *)*v8;
        result = v8;
        if (!*v8)
          goto LABEL_15;
      }
      if (*v9 < v7)
        break;
      result = v8 + 1;
      v4 = (uint64_t *)v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = result;
  }
LABEL_15:
  *a2 = v8;
  return result;
}

void sub_20B8D9364(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20B8D9180((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void sub_20B8D93A8(uint64_t **a1, const void *a2, int a3, uint64_t a4, uint64_t a5, char a6, double a7)
{
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17[2];
  char v18;

  v14 = (uint64_t *)(a1 + 1);
  v17[0] = (uint64_t *)operator new(0x78uLL);
  v17[1] = v14;
  sub_20B8D90C0((uint64_t)(v17[0] + 4), a2, a4, a5, a6 != 0, (double)a3, a7);
  v18 = 1;
  v15 = sub_20B8D92F0((uint64_t)a1, &v16, (uint64_t)(v17[0] + 4));
  if (!*v15)
  {
    sub_20B8296A0(a1, v16, (uint64_t **)v15, v17[0]);
    v17[0] = 0;
  }
  sub_20B8D9364((uint64_t)v17, 0);
}

void sub_20B8D9480(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B8D9364((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_20B8D949C(uint64_t **a1, const void *a2, uint64_t a3, uint64_t a4, char a5, double a6, double a7)
{
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17[2];
  char v18;

  v14 = (uint64_t *)(a1 + 1);
  v17[0] = (uint64_t *)operator new(0x78uLL);
  v17[1] = v14;
  sub_20B8D90C0((uint64_t)(v17[0] + 4), a2, a3, a4, a5 != 0, a6, a7);
  v18 = 1;
  v15 = sub_20B8D92F0((uint64_t)a1, &v16, (uint64_t)(v17[0] + 4));
  if (!*v15)
  {
    sub_20B8296A0(a1, v16, (uint64_t **)v15, v17[0]);
    v17[0] = 0;
  }
  sub_20B8D9364((uint64_t)v17, 0);
}

void sub_20B8D956C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B8D9364((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_20B8D9588(uint64_t **a1, const void *a2, uint64_t a3, uint64_t a4, char a5, double a6, double a7)
{
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17[2];
  char v18;

  v14 = (uint64_t *)(a1 + 1);
  v17[0] = (uint64_t *)operator new(0x78uLL);
  v17[1] = v14;
  sub_20B8D90C0((uint64_t)(v17[0] + 4), a2, a3, a4, a5 != 0, a6, a7);
  v18 = 1;
  v15 = sub_20B8D92F0((uint64_t)a1, &v16, (uint64_t)(v17[0] + 4));
  if (!*v15)
  {
    sub_20B8296A0(a1, v16, (uint64_t **)v15, v17[0]);
    v17[0] = 0;
  }
  sub_20B8D9364((uint64_t)v17, 0);
}

void sub_20B8D9658(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B8D9364((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_20B8D9674(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20B8D9674(a1, *a2);
    sub_20B8D9674(a1, a2[1]);
    sub_20B8D9180((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t sub_20B8D96BC(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;

  v4 = atomic_load((unsigned __int8 *)&qword_25472CC10);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25472CC10))
  {
    sub_20B8D49EC(&qword_25472CC08);
    __cxa_atexit((void (*)(void *))sub_20B8D4A68, &qword_25472CC08, &dword_20B7F7000);
    __cxa_guard_release(&qword_25472CC10);
  }
  return sub_20B8D4AE4(&qword_25472CC08, a1, a2, 1);
}

void sub_20B8D9754(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472CC10);
  _Unwind_Resume(a1);
}

BOOL sub_20B8D976C(uint64_t a1)
{
  unsigned __int8 v2;
  unsigned __int8 v3;

  v2 = atomic_load((unsigned __int8 *)&qword_25472CC30);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25472CC30))
  {
    sub_20B87C9E0(byte_25472CC18, (char *)L"Fullwidth-Halfwidth");
    __cxa_atexit((void (*)(void *))sub_20B87BE80, byte_25472CC18, &dword_20B7F7000);
    __cxa_guard_release(&qword_25472CC30);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25472CC40);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25472CC40))
  {
    sub_20B8D477C(&qword_25472CC38);
    __cxa_atexit((void (*)(void *))sub_20B8D480C, &qword_25472CC38, &dword_20B7F7000);
    __cxa_guard_release(&qword_25472CC40);
  }
  return sub_20B8D483C(&qword_25472CC38, a1);
}

void sub_20B8D9858(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472CC40);
  _Unwind_Resume(a1);
}

BOOL sub_20B8D9880(uint64_t a1)
{
  unsigned __int8 v2;
  unsigned __int8 v3;

  v2 = atomic_load((unsigned __int8 *)&qword_25472CC60);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25472CC60))
  {
    sub_20B87C9E0(byte_25472CC48, (char *)L"Halfwidth-Fullwidth");
    __cxa_atexit((void (*)(void *))sub_20B87BE80, byte_25472CC48, &dword_20B7F7000);
    __cxa_guard_release(&qword_25472CC60);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25472CC70);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25472CC70))
  {
    sub_20B8D477C(&qword_25472CC68);
    __cxa_atexit((void (*)(void *))sub_20B8D480C, &qword_25472CC68, &dword_20B7F7000);
    __cxa_guard_release(&qword_25472CC70);
  }
  return sub_20B8D483C(&qword_25472CC68, a1);
}

void sub_20B8D996C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472CC70);
  _Unwind_Resume(a1);
}

CFStringRef sub_20B8D9994(const __CFString *a1)
{
  void *v1;
  void **v2;
  CFIndex v3;
  CFStringRef v4;
  void *__p[2];
  unsigned __int8 v7;
  void *__src;
  unint64_t v9;

  if (!a1)
    return 0;
  v9 = 0;
  sub_20B8D0624(a1, (CFIndex *)&v9, &__src);
  v1 = __src;
  sub_20B877ED0(__p, __src, v9);
  sub_20B8D9880((uint64_t)__p);
  if ((v7 & 0x80u) == 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  if ((v7 & 0x80u) == 0)
    v3 = v7;
  else
    v3 = (CFIndex)__p[1];
  v4 = CFStringCreateWithCharacters(0, (const UniChar *)v2, v3);
  if ((char)v7 < 0)
    operator delete(__p[0]);
  if (v1)
    MEMORY[0x20BD39C80](v1, 0x1000C80BDFB0063);
  return v4;
}

void sub_20B8D9A44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (v15)
    MEMORY[0x20BD39C80](v15, 0x1000C80BDFB0063);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B8D9A84(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;

  v4 = atomic_load((unsigned __int8 *)&qword_25472CC80);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25472CC80))
  {
    sub_20B8D49EC(&qword_25472CC78);
    __cxa_atexit((void (*)(void *))sub_20B8D4A68, &qword_25472CC78, &dword_20B7F7000);
    __cxa_guard_release(&qword_25472CC80);
  }
  return sub_20B8D4AE4(&qword_25472CC78, a1, a2, 0);
}

void sub_20B8D9B18(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472CC80);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8D9B30(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;

  v4 = atomic_load((unsigned __int8 *)&qword_25472CC90);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25472CC90))
  {
    sub_20B8D49EC(&qword_25472CC88);
    __cxa_atexit((void (*)(void *))sub_20B8D4A68, &qword_25472CC88, &dword_20B7F7000);
    __cxa_guard_release(&qword_25472CC90);
  }
  return sub_20B8D4AE4(&qword_25472CC88, a1, a2, 0);
}

void sub_20B8D9BC8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472CC90);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8D9BE0(uint64_t a1, uint64_t *a2)
{
  unsigned __int8 v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v4 = atomic_load((unsigned __int8 *)&qword_25472CCA0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25472CCA0))
  {
    sub_20B8D49EC(&qword_25472CC98);
    __cxa_atexit((void (*)(void *))sub_20B8D4A68, &qword_25472CC98, &dword_20B7F7000);
    __cxa_guard_release(&qword_25472CCA0);
  }
  v5 = *(char *)(a1 + 23);
  if (v5 >= 0)
    v6 = a1;
  else
    v6 = *(_QWORD *)a1;
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(a1 + 23);
  else
    v7 = *(_QWORD *)(a1 + 8);
  return sub_20B8D4A98(&qword_25472CC98, v6, v7, a2);
}

void sub_20B8D9C84(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472CCA0);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8D9C9C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned __int8 v6;

  v6 = atomic_load((unsigned __int8 *)&qword_25472CCB0);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25472CCB0))
  {
    sub_20B8D49EC(&qword_25472CCA8);
    __cxa_atexit((void (*)(void *))sub_20B8D4A68, &qword_25472CCA8, &dword_20B7F7000);
    __cxa_guard_release(&qword_25472CCB0);
  }
  return sub_20B8D4A98(&qword_25472CCA8, a1, a2, a3);
}

void sub_20B8D9D40(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472CCB0);
  _Unwind_Resume(a1);
}

BOOL sub_20B8D9D58(unsigned __int16 *a1, unint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  *a3 = 0;
  if (!a2)
    return 1;
  v6 = sub_20B87B724("\a0", *a1, 0);
  if (v6 == -1)
    return 0;
  v7 = 1;
  do
  {
    v8 = v7;
    v9 = *a3 + v6;
    *a3 = v9;
    if (a2 == v8)
      break;
    *a3 = 10 * v9;
    v6 = sub_20B87B724("\a0", a1[v8], 0);
    v7 = v8 + 1;
  }
  while (v6 != -1);
  return v8 >= a2;
}

uint64_t sub_20B8D9E14(uint64_t a1)
{
  uint64_t v1;
  void **v2;
  void *__p[2];
  char v5;

  v1 = a1;
  v5 = 1;
  LODWORD(__p[0]) = (unsigned __int16)a1;
  if (sub_20B8D976C((uint64_t)__p))
  {
    v2 = (void **)__p[0];
    if (v5 >= 0)
      v2 = __p;
    v1 = *(unsigned __int16 *)v2;
  }
  if (v5 < 0)
    operator delete(__p[0]);
  return v1;
}

void sub_20B8D9E7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_20B8D9E98(__int16 a1)
{
  unsigned __int8 v1;
  __int16 v3;
  int v4;
  _OWORD v5[4];
  _OWORD v6[2];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v1 = atomic_load((unsigned __int8 *)&qword_25472CCE0);
  if ((v1 & 1) == 0)
  {
    v3 = a1;
    v4 = __cxa_guard_acquire(&qword_25472CCE0);
    a1 = v3;
    if (v4)
    {
      v5[2] = *(_OWORD *)&asc_20BA43C18[16];
      v5[3] = unk_20BA43C48;
      v6[0] = xmmword_20BA43C58;
      *(_OWORD *)((char *)v6 + 12) = *(__int128 *)((char *)&xmmword_20BA43C58 + 12);
      v5[0] = *(_OWORD *)asc_20BA43C18;
      v5[1] = *(_OWORD *)&asc_20BA43C18[8];
      sub_20B89BA68((uint64_t)qword_25472CCB8, (unsigned __int16 *)v5, 46);
      __cxa_atexit((void (*)(void *))sub_20B89BA64, qword_25472CCB8, &dword_20B7F7000);
      __cxa_guard_release(&qword_25472CCE0);
      a1 = v3;
    }
  }
  LOWORD(v5[0]) = a1;
  return sub_20B886524(qword_25472CCB8, (unsigned __int16 *)v5) != 0;
}

void sub_20B8D9F9C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472CCE0);
  _Unwind_Resume(a1);
}

BOOL sub_20B8D9FB4(const __CFString *a1)
{
  CFIndex Length;
  UniChar CharacterAtIndex;

  Length = CFStringGetLength(a1);
  if (Length < 1)
    return 0;
  CharacterAtIndex = CFStringGetCharacterAtIndex(a1, Length - 1);
  return sub_20B8D9E98(CharacterAtIndex);
}

BOOL sub_20B8D9FF4(unsigned __int16 a1)
{
  unsigned __int8 v1;
  unsigned __int16 v3;
  int v4;
  unsigned __int16 v5[12];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v1 = atomic_load((unsigned __int8 *)&qword_25472CD10);
  if ((v1 & 1) == 0)
  {
    v3 = a1;
    v4 = __cxa_guard_acquire(&qword_25472CD10);
    a1 = v3;
    if (v4)
    {
      *(_OWORD *)v5 = xmmword_20BA43C74;
      *(_QWORD *)&v5[7] = 0x53414E5D516B4E03;
      sub_20B89BA68((uint64_t)qword_25472CCE8, v5, 11);
      __cxa_atexit((void (*)(void *))sub_20B89BA64, qword_25472CCE8, &dword_20B7F7000);
      __cxa_guard_release(&qword_25472CD10);
      a1 = v3;
    }
  }
  v5[0] = a1;
  return sub_20B886524(qword_25472CCE8, v5) != 0;
}

void sub_20B8DA0E8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472CD10);
  _Unwind_Resume(a1);
}

BOOL sub_20B8DA100(__int16 a1)
{
  unsigned __int8 v1;
  __int16 v3;
  int v4;
  _OWORD v5[2];
  __int16 v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v1 = atomic_load((unsigned __int8 *)&qword_25472CD40);
  if ((v1 & 1) == 0)
  {
    v3 = a1;
    v4 = __cxa_guard_acquire(&qword_25472CD40);
    a1 = v3;
    if (v4)
    {
      v6 = 20140;
      v5[0] = xmmword_20BA43C8A;
      v5[1] = unk_20BA43C9A;
      sub_20B89BA68((uint64_t)qword_25472CD18, (unsigned __int16 *)v5, 17);
      __cxa_atexit((void (*)(void *))sub_20B89BA64, qword_25472CD18, &dword_20B7F7000);
      __cxa_guard_release(&qword_25472CD40);
      a1 = v3;
    }
  }
  LOWORD(v5[0]) = a1;
  return sub_20B886524(qword_25472CD18, (unsigned __int16 *)v5) != 0;
}

void sub_20B8DA1F4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472CD40);
  _Unwind_Resume(a1);
}

BOOL sub_20B8DA20C(unsigned __int16 *a1, uint64_t a2)
{
  int v2;
  int v6;

  if ((unint64_t)(a2 - 3) < 0xFFFFFFFFFFFFFFFELL)
    return 0;
  v2 = *a1;
  if (a2 == 1)
    return v2 == 19975 || v2 == 20740 || v2 == 21315;
  if (v2 != 21315)
    return 0;
  v6 = a1[1];
  return v6 == 19975 || v6 == 20740;
}

const __CFString *sub_20B8DA278(const __CFString *result)
{
  const __CFString *v1;
  int CharacterAtIndex;
  uint64_t v3;
  __int16 *v4;
  BOOL v5;

  if (result)
  {
    v1 = result;
    if (CFStringGetLength(result) == 1)
    {
      CharacterAtIndex = CFStringGetCharacterAtIndex(v1, 0);
      v3 = 0;
      while ((unsigned __int16)word_20BA43CAC[v3] != CharacterAtIndex)
      {
        if (++v3 == 10)
        {
          v4 = 0;
          goto LABEL_9;
        }
      }
      v4 = &word_20BA43CAC[v3];
LABEL_9:
      if (v4)
        v5 = (char *)v4 - (char *)word_20BA43CAC == -2;
      else
        v5 = 1;
      return (const __CFString *)!v5;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

const __CFString *sub_20B8DA2F8(const __CFString *result)
{
  const __CFString *v1;
  CFIndex Length;
  CFIndex v3;
  CFIndex v4;
  UChar32 CharacterAtIndex;

  if (result)
  {
    v1 = result;
    Length = CFStringGetLength(result);
    if (Length < 1)
    {
      return 0;
    }
    else
    {
      v3 = Length;
      v4 = 0;
      while (1)
      {
        CharacterAtIndex = CFStringGetCharacterAtIndex(v1, v4);
        if (CharacterAtIndex != 9787 && (u_charType(CharacterAtIndex) - 19) < 0xB)
          break;
        if (v3 == ++v4)
          return 0;
      }
      return (const __CFString *)1;
    }
  }
  return result;
}

uint64_t sub_20B8DA374(uint64_t a1, uint64_t a2, _QWORD *a3, char a4)
{
  uint64_t result;
  uint64_t v9;
  unsigned int v10;
  int v11;
  BOOL v12;

  if (a3)
    *a3 = 0;
  result = 0;
  if (a1 && a2)
  {
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *(unsigned __int16 *)(a1 + 2 * v9);
      if ((unsigned __int16)(v11 + 240) < 0xAu)
        break;
      if ((v11 - 48) < 0xA)
      {
        result = 1;
        goto LABEL_13;
      }
      if ((a4 & 1) != 0)
      {
        if (sub_20B8DA100(v11))
          goto LABEL_12;
      }
      else if (sub_20B8D9FF4(v11))
      {
LABEL_12:
        result = 3;
        goto LABEL_13;
      }
      v12 = 0;
      result = 0;
      if (!v9)
        return result;
LABEL_14:
      if (!v12 && v10 != (_DWORD)result)
      {
        if (a3)
          return v10;
        else
          return 0;
      }
      ++v9;
      if (a3)
        *a3 = v9;
      v10 = result;
      if (a2 == v9)
        return result;
    }
    result = 2;
LABEL_13:
    v12 = v9 == 0;
    goto LABEL_14;
  }
  return result;
}

uint64_t sub_20B8DA458(const __CFString *a1, _BYTE *a2, _BYTE *a3, _BYTE *a4, _BYTE *a5)
{
  CFIndex Length;
  CFIndex v11;
  uint64_t v12;
  CFIndex i;
  int CharacterAtIndex;
  int v15;
  unsigned int v16;

  if (!a1)
    return 0;
  Length = CFStringGetLength(a1);
  if (!Length)
    return 0;
  v11 = Length;
  *a5 = 0;
  *a4 = 0;
  *a3 = 0;
  v12 = 1;
  *a2 = 0;
  if (Length >= 1)
  {
    for (i = 0; i != v11; ++i)
    {
      CharacterAtIndex = CFStringGetCharacterAtIndex(a1, i);
      v15 = CharacterAtIndex;
      v16 = (unsigned __int16)(CharacterAtIndex + 240);
      if ((CharacterAtIndex - 48) < 0xA || v16 <= 9)
      {
        *a3 = 1;
        if (v16 <= 9)
          *a2 = 1;
      }
      if (sub_20B8DA100(CharacterAtIndex))
        *a4 = 1;
      if (v15 == 65292 || v15 == 44)
        *a5 = 1;
    }
    return 1;
  }
  return v12;
}

uint64_t sub_20B8DA550(uint64_t a1, unint64_t a2)
{
  unsigned __int8 v4;
  char v5;
  uint64_t v6;
  int v7;
  unsigned __int16 *v8;
  int v9;
  unint64_t v10;
  int v11;
  BOOL v12;
  char v13;

  v4 = atomic_load((unsigned __int8 *)&qword_25472B538);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25472B538))
  {
    qword_25472B530 = (uint64_t)CFCharacterSetCreateWithCharactersInString(0, CFSTR("0123456789(."));
    __cxa_guard_release(&qword_25472B538);
  }
  if (a2 >= 2)
  {
    v6 = a1 + 2 * a2;
    v9 = *(unsigned __int16 *)(v6 - 2);
    v8 = (unsigned __int16 *)(v6 - 2);
    v7 = v9;
    v10 = 1;
    while (1)
    {
      v11 = *v8--;
      if (v11 != v7 || !CFCharacterSetIsCharacterMember((CFCharacterSetRef)qword_25472B530, v7))
        break;
      if (++v10 > a2)
      {
        v13 = 1;
        goto LABEL_10;
      }
    }
    v13 = 0;
    v12 = v10 > 2;
LABEL_10:
    v5 = v13 | v12;
  }
  else
  {
    v5 = 0;
  }
  return v5 & 1;
}

void sub_20B8DA62C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472B538);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8DA644(unsigned __int16 *a1, uint64_t a2, int a3)
{
  unsigned __int8 v3;
  unsigned __int16 *v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  uint64_t *v10;
  unsigned __int8 v11;
  unsigned __int16 *v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  uint64_t *v18;
  unsigned __int16 *v20;
  uint64_t v21;
  int v22;
  int v23;
  unsigned __int16 *v24;
  uint64_t v25;
  int v26;
  int v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _OWORD v31[2];
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (!a3)
  {
    v11 = atomic_load((unsigned __int8 *)&qword_25472B560);
    if ((v11 & 1) == 0)
    {
      v24 = a1;
      v25 = a2;
      v26 = __cxa_guard_acquire(&qword_25472B560);
      a2 = v25;
      v27 = v26;
      a1 = v24;
      if (v27)
      {
        v30 = xmmword_20BA43D2A;
        v31[0] = unk_20BA43D3A;
        *(_OWORD *)((char *)v31 + 12) = unk_20BA43D46;
        v28 = xmmword_20BA43D0A;
        v29 = unk_20BA43D1A;
        sub_20B87F8C8((uint64_t)&unk_25472B580, (unsigned __int16 *)&v28, 38);
        __cxa_atexit((void (*)(void *))sub_20B87F8A0, &unk_25472B580, &dword_20B7F7000);
        __cxa_guard_release(&qword_25472B560);
        a1 = v24;
        a2 = v25;
      }
    }
    if (a2)
    {
      if (qword_25472B588)
      {
        v12 = &a1[a2];
        while (1)
        {
          v13 = *a1;
          v14 = &qword_25472B588;
          v15 = qword_25472B588;
          do
          {
            v16 = *(unsigned __int16 *)(v15 + 26);
            v17 = v16 >= v13;
            if (v16 >= v13)
              v18 = (uint64_t *)v15;
            else
              v18 = (uint64_t *)(v15 + 8);
            if (v17)
              v14 = (uint64_t *)v15;
            v15 = *v18;
          }
          while (*v18);
          if (v14 == &qword_25472B588 || v13 < *((unsigned __int16 *)v14 + 13))
            break;
          if (++a1 == v12)
            return 1;
        }
      }
      return 0;
    }
    return 1;
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25472B558);
  if ((v3 & 1) == 0)
  {
    v20 = a1;
    v21 = a2;
    v22 = __cxa_guard_acquire(&qword_25472B558);
    a2 = v21;
    v23 = v22;
    a1 = v20;
    if (v23)
    {
      v28 = xmmword_20BA43CF2;
      *(_QWORD *)&v29 = 0x2E002800390038;
      sub_20B87F8C8((uint64_t)&unk_25472B568, (unsigned __int16 *)&v28, 12);
      __cxa_atexit((void (*)(void *))sub_20B87F8A0, &unk_25472B568, &dword_20B7F7000);
      __cxa_guard_release(&qword_25472B558);
      a1 = v20;
      a2 = v21;
    }
  }
  if (!a2)
    return 1;
  if (qword_25472B570)
  {
    v4 = &a1[a2];
    while (1)
    {
      v5 = *a1;
      v6 = &qword_25472B570;
      v7 = qword_25472B570;
      do
      {
        v8 = *(unsigned __int16 *)(v7 + 26);
        v9 = v8 >= v5;
        if (v8 >= v5)
          v10 = (uint64_t *)v7;
        else
          v10 = (uint64_t *)(v7 + 8);
        if (v9)
          v6 = (uint64_t *)v7;
        v7 = *v10;
      }
      while (*v10);
      if (v6 == &qword_25472B570 || v5 < *((unsigned __int16 *)v6 + 13))
        break;
      if (++a1 == v4)
        return 1;
    }
  }
  return 0;
}

void sub_20B8DA8A4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472B560);
  _Unwind_Resume(a1);
}

void sub_20B8DA8CC(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  __int16 *v13;
  unint64_t v14;
  uint8x8_t v15;
  unint64_t v16;
  uint64_t ***v17;
  uint64_t **v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint8x8_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *i;
  uint64_t **v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  void *__p[2];
  __int128 v41;
  __int128 v42;
  __int16 v43;
  char v44[24];
  __int16 v45;
  char v46[24];
  __int16 v47;
  char v48[24];
  __int16 v49;
  char v50[24];
  __int16 v51;
  char v52[24];
  __int16 v53;
  char v54[24];
  __int16 v55;
  char v56[24];
  __int16 v57;
  char v58[24];
  __int16 v59;
  char v60[24];
  __int16 v61;
  char v62[24];
  __int16 v63;
  char v64[24];
  __int16 v65;
  char v66[24];
  __int16 v67;
  char v68[24];
  __int16 v69;
  char v70[24];
  __int16 v71;
  char v72[24];
  __int16 v73;
  char v74[24];
  __int16 v75;
  char v76[24];
  __int16 v77;
  char v78[24];
  __int16 v79;
  char v80[24];
  __int16 v81;
  char v82[24];
  __int16 v83;
  char v84[24];
  __int16 v85;
  char v86[24];
  __int16 v87;
  char v88[24];
  __int16 v89;
  char v90[24];
  __int16 v91;
  char v92[24];
  __int16 v93;
  char v94[24];
  __int16 v95;
  char v96[24];
  __int16 v97;
  char v98[24];
  __int16 v99;
  char v100[24];
  __int16 v101;
  char v102[24];
  __int16 v103;
  char v104[24];
  __int16 v105;
  char v106[24];
  __int16 v107;
  char v108[24];
  __int16 v109;
  char v110[24];
  __int16 v111;
  char v112[24];
  __int16 v113;
  char v114[24];
  __int16 v115;
  char v116[24];
  __int16 v117;
  char v118[24];
  __int16 v119;
  char v120[24];
  __int16 v121;
  char v122[24];
  __int16 v123;
  char v124[24];
  __int16 v125;
  char v126[24];
  __int16 v127;
  char v128[24];
  __int16 v129;
  char v130[24];
  __int16 v131;
  char v132[24];
  __int16 v133;
  uint64_t v134;

  v6 = a1;
  v134 = *MEMORY[0x24BDAC8D0];
  v8 = atomic_load((unsigned __int8 *)&qword_25472B540);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_25472B540))
  {
    *(_OWORD *)__p = xmmword_20BA43CC2;
    v41 = unk_20BA43CD2;
    v42 = xmmword_20BA43CE2;
    sub_20B8DBED4(__p, 12);
    __cxa_atexit((void (*)(void *))sub_20B8DB378, &xmmword_25472B598, &dword_20B7F7000);
    __cxa_guard_release(&qword_25472B540);
    v6 = a1;
  }
  v9 = atomic_load((unsigned __int8 *)&qword_25472B548);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_25472B548))
  {
    v35 = a4;
    sub_20B87C9E0(__p, (char *)L"1");
    WORD4(v41) = 49;
    sub_20B87C9E0(&v42, (char *)L"11");
    v43 = 9734;
    sub_20B87C9E0(v44, "1");
    v45 = 9834;
    sub_20B87C9E0(v46, "1");
    v47 = 8594;
    sub_20B87C9E0(v48, (char *)L"2");
    v49 = 50;
    sub_20B87C9E0(v50, (char *)L"22");
    v51 = 165;
    sub_20B87C9E0(v52, (char *)L"222");
    v53 = 36;
    sub_20B87C9E0(v54, (char *)L"2222");
    v55 = 8364;
    sub_20B87C9E0(v56, "3");
    v57 = 51;
    sub_20B87C9E0(v58, "3");
    v59 = 37;
    sub_20B87C9E0(v60, (char *)L"333");
    v61 = 176;
    sub_20B87C9E0(v62, (char *)L"3333");
    v63 = 35;
    sub_20B87C9E0(v64, "4");
    v65 = 52;
    sub_20B87C9E0(v66, "4");
    v67 = 9675;
    sub_20B87C9E0(v68, (char *)L"444");
    v69 = -246;
    sub_20B87C9E0(v70, (char *)L"4444");
    v71 = 12539;
    sub_20B87C9E0(v72, "5");
    v73 = 53;
    sub_20B87C9E0(v74, "5");
    v75 = 43;
    sub_20B87C9E0(v76, (char *)L"555");
    v77 = 215;
    sub_20B87C9E0(v78, (char *)L"5555");
    v79 = 247;
    sub_20B87C9E0(v80, (char *)word_20BA93EA8);
    v81 = 54;
    sub_20B87C9E0(v82, "6");
    v83 = 60;
    sub_20B87C9E0(v84, (char *)L"666");
    v85 = 61;
    sub_20B87C9E0(v86, (char *)L"6666");
    v87 = 62;
    sub_20B87C9E0(v88, "7");
    v89 = 55;
    sub_20B87C9E0(v90, "7");
    v91 = 12300;
    sub_20B87C9E0(v92, (char *)L"777");
    v93 = 12301;
    sub_20B87C9E0(v94, (char *)L"7777");
    v95 = -230;
    sub_20B87C9E0(v96, "8");
    v97 = 56;
    sub_20B87C9E0(v98, "8");
    v99 = 12306;
    sub_20B87C9E0(v100, (char *)L"888");
    v101 = 12293;
    sub_20B87C9E0(v102, (char *)L"8888");
    v103 = 12294;
    sub_20B87C9E0(v104, (char *)word_20BA93E78);
    v105 = 57;
    sub_20B87C9E0(v106, "9");
    v107 = 94;
    sub_20B87C9E0(v108, (char *)L"999");
    v109 = 124;
    sub_20B87C9E0(v110, (char *)L"9999");
    v111 = 92;
    sub_20B87C9E0(v112, "0");
    v113 = 48;
    sub_20B87C9E0(v114, "0");
    v115 = 12316;
    sub_20B87C9E0(v116, (char *)L"000");
    v117 = 8230;
    sub_20B87C9E0(v118, (char *)L"(");
    v119 = 40;
    sub_20B87C9E0(v120, (char *)L"((");
    v121 = 41;
    sub_20B87C9E0(v122, "(");
    v123 = 91;
    sub_20B87C9E0(v124, "(");
    v125 = 93;
    sub_20B87C9E0(v126, (char *)L".");
    v127 = 46;
    sub_20B87C9E0(v128, (char *)L"..");
    v129 = 44;
    sub_20B87C9E0(v130, ".");
    v131 = 45;
    sub_20B87C9E0(v132, ".");
    v133 = 47;
    sub_20B8DC33C((uint64_t)__p, 47);
    v36 = 188;
    do
    {
      if (*((char *)&__p[v36 - 1] - 1) < 0)
        operator delete(__p[v36 - 4]);
      v36 -= 4;
    }
    while (v36 * 8);
    __cxa_atexit((void (*)(void *))sub_20B8DB37C, &xmmword_25472B5C0, &dword_20B7F7000);
    __cxa_guard_release(&qword_25472B548);
    a4 = v35;
    v6 = a1;
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (!a2)
    return;
  v10 = 0;
  v11 = v6 + 2;
  v12 = &qword_25472B000;
  v37 = a3;
  v38 = a4;
  do
  {
    v13 = (__int16 *)(v6 + 2 * v10);
    v14 = (unsigned __int16)*v13;
    if (!*((_QWORD *)&xmmword_25472B598 + 1))
      goto LABEL_21;
    v15 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_25472B598 + 8));
    v15.i16[0] = vaddlv_u8(v15);
    if (v15.u32[0] > 1uLL)
    {
      v16 = (unsigned __int16)*v13;
      if (*((_QWORD *)&xmmword_25472B598 + 1) <= v14)
        v16 = v14 % *((_QWORD *)&xmmword_25472B598 + 1);
    }
    else
    {
      v16 = (DWORD2(xmmword_25472B598) - 1) & v14;
    }
    v17 = *(uint64_t ****)(v12[179] + 8 * v16);
    if (!v17 || (v18 = *v17) == 0)
    {
LABEL_21:
      sub_20B87C0F8((uint64_t)a4, *v13);
      v20 = v10 + 1;
      goto LABEL_22;
    }
    while (1)
    {
      v19 = (unint64_t)v18[1];
      if (v19 == v14)
        break;
      if (v15.u32[0] > 1uLL)
      {
        if (v19 >= *((_QWORD *)&xmmword_25472B598 + 1))
          v19 %= *((_QWORD *)&xmmword_25472B598 + 1);
      }
      else
      {
        v19 &= *((_QWORD *)&xmmword_25472B598 + 1) - 1;
      }
      if (v19 != v16)
        goto LABEL_21;
LABEL_20:
      v18 = (uint64_t **)*v18;
      if (!v18)
        goto LABEL_21;
    }
    if (*((unsigned __int16 *)v18 + 8) != (_DWORD)v14)
      goto LABEL_20;
    v21 = v10 + *((unsigned __int8 *)v18 + 18);
    if (a2 < v21)
      v21 = a2;
    if (v21 <= v10 + 1)
      v22 = v10 + 1;
    else
      v22 = v21;
    v23 = v10;
    while (1)
    {
      v20 = v23 + 1;
      if (v23 + 1 >= v21)
        break;
      v24 = *(unsigned __int16 *)(v11 + 2 * v23++);
      if ((_DWORD)v14 != v24)
        goto LABEL_34;
    }
    v20 = v22;
LABEL_34:
    if (v6)
      v25 = v20 - v10;
    else
      v25 = 0;
    sub_20B877ED0(__p, v13, v25);
    v26 = sub_20B89ACFC((uint64_t)&qword_25472B5D8, (uint64_t)__p);
    v27 = *((_QWORD *)&xmmword_25472B5C0 + 1);
    if (*((_QWORD *)&xmmword_25472B5C0 + 1))
    {
      v28 = v26;
      v29 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_25472B5C0 + 8));
      v29.i16[0] = vaddlv_u8(v29);
      v30 = v29.u32[0];
      if (v29.u32[0] > 1uLL)
      {
        v31 = v26;
        if (v26 >= *((_QWORD *)&xmmword_25472B5C0 + 1))
          v31 = v26 % *((_QWORD *)&xmmword_25472B5C0 + 1);
      }
      else
      {
        v31 = (*((_QWORD *)&xmmword_25472B5C0 + 1) - 1) & v26;
      }
      v33 = *(uint64_t ***)(xmmword_25472B5C0 + 8 * v31);
      if (v33)
      {
        for (i = *v33; i; i = (uint64_t *)*i)
        {
          v34 = i[1];
          if (v28 == v34)
          {
            if (sub_20B89AD3C((uint64_t)&dword_25472B5E0, (unsigned __int16 *)i + 8, (unsigned __int16 *)__p))
              break;
          }
          else
          {
            if (v30 > 1)
            {
              if (v34 >= v27)
                v34 %= v27;
            }
            else
            {
              v34 &= v27 - 1;
            }
            if (v34 != v31)
              goto LABEL_55;
          }
        }
      }
      else
      {
LABEL_55:
        i = 0;
      }
      a3 = v37;
      a4 = v38;
      v12 = &qword_25472B000;
    }
    else
    {
      i = 0;
    }
    if (SBYTE7(v41) < 0)
    {
      operator delete(__p[0]);
      if (!i)
        goto LABEL_62;
LABEL_61:
      sub_20B87C0F8((uint64_t)a4, *((_WORD *)i + 20));
      ++*a3;
      goto LABEL_62;
    }
    if (i)
      goto LABEL_61;
LABEL_62:
    v6 = a1;
LABEL_22:
    v10 = v20;
  }
  while (v20 < a2);
}

void sub_20B8DB22C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = 1504;
  while (1)
  {
    if (*(char *)(v1 + v3 - 9) < 0)
      operator delete(*(void **)(v1 + v3 - 32));
    v3 -= 32;
    if (!v3)
    {
      __cxa_guard_abort(&qword_25472B548);
      _Unwind_Resume(a1);
    }
  }
}

unint64_t sub_20B8DB380@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, unint64_t *a4@<X8>)
{
  unsigned __int8 v8;
  unint64_t result;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  uint64_t ***v15;
  uint64_t **v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned __int16 v22[4];
  char v23[24];
  __int16 v24;
  char v25[24];
  __int16 v26;
  char v27[24];
  __int16 v28;
  char v29[24];
  __int16 v30;
  char v31[24];
  __int16 v32;
  char v33[24];
  __int16 v34;
  char v35[24];
  __int16 v36;
  char v37[24];
  __int16 v38;
  char v39[24];
  __int16 v40;
  char v41[24];
  __int16 v42;
  char v43[24];
  __int16 v44;
  char v45[24];
  __int16 v46;
  char v47[24];
  __int16 v48;
  char v49[24];
  __int16 v50;
  char v51[24];
  __int16 v52;
  char v53[24];
  __int16 v54;
  char v55[24];
  __int16 v56;
  char v57[24];
  __int16 v58;
  char v59[24];
  __int16 v60;
  char v61[24];
  __int16 v62;
  char v63[24];
  __int16 v64;
  char v65[24];
  __int16 v66;
  char v67[24];
  __int16 v68;
  char v69[24];
  __int16 v70;
  char v71[24];
  __int16 v72;
  char v73[24];
  __int16 v74;
  char v75[24];
  __int16 v76;
  char v77[24];
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  v8 = atomic_load((unsigned __int8 *)&qword_25472B550);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_25472B550))
  {
    v22[0] = 12316;
    sub_20B87C9E0(v23, "0");
    v24 = 8230;
    sub_20B87C9E0(v25, (char *)L"000");
    v26 = 9734;
    sub_20B87C9E0(v27, (char *)L"11");
    v28 = 9834;
    sub_20B87C9E0(v29, "1");
    v30 = 8594;
    sub_20B87C9E0(v31, "1");
    v32 = 165;
    sub_20B87C9E0(v33, (char *)L"22");
    v34 = 36;
    sub_20B87C9E0(v35, (char *)L"222");
    v36 = 8364;
    sub_20B87C9E0(v37, (char *)L"2222");
    v38 = 37;
    sub_20B87C9E0(v39, "3");
    v40 = 176;
    sub_20B87C9E0(v41, (char *)L"333");
    v42 = 9675;
    sub_20B87C9E0(v43, "4");
    v44 = -246;
    sub_20B87C9E0(v45, (char *)L"444");
    v46 = 12539;
    sub_20B87C9E0(v47, (char *)L"4444");
    v48 = 43;
    sub_20B87C9E0(v49, "5");
    v50 = 215;
    sub_20B87C9E0(v51, (char *)L"555");
    v52 = 247;
    sub_20B87C9E0(v53, (char *)L"5555");
    v54 = 60;
    sub_20B87C9E0(v55, "6");
    v56 = 61;
    sub_20B87C9E0(v57, (char *)L"666");
    v58 = 62;
    sub_20B87C9E0(v59, (char *)L"6666");
    v60 = 12300;
    sub_20B87C9E0(v61, "7");
    v62 = 12301;
    sub_20B87C9E0(v63, (char *)L"777");
    v64 = -230;
    sub_20B87C9E0(v65, (char *)L"7777");
    v66 = 12306;
    sub_20B87C9E0(v67, "8");
    v68 = 12293;
    sub_20B87C9E0(v69, (char *)L"888");
    v70 = 12294;
    sub_20B87C9E0(v71, (char *)L"8888");
    v72 = 94;
    sub_20B87C9E0(v73, "9");
    v74 = 124;
    sub_20B87C9E0(v75, (char *)L"999");
    v76 = 92;
    sub_20B87C9E0(v77, (char *)L"9999");
    sub_20B8DC808(v22, 28);
    v21 = 448;
    do
    {
      if (SHIBYTE(v22[v21 - 1]) < 0)
        operator delete(*(void **)&v22[v21 - 12]);
      v21 -= 16;
    }
    while (v21 * 2);
    __cxa_atexit((void (*)(void *))sub_20B8DB9E0, &xmmword_25472B5E8, &dword_20B7F7000);
    __cxa_guard_release(&qword_25472B550);
  }
  *a3 = 0;
  result = operator new[]();
  v10 = result;
  if (!a2)
    goto LABEL_30;
  v11 = 0;
  do
  {
    v12 = *(unsigned __int16 *)(a1 + 2 * v11);
    if (!*((_QWORD *)&xmmword_25472B5E8 + 1))
      goto LABEL_20;
    v13 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_25472B5E8 + 8));
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v14 = *(unsigned __int16 *)(a1 + 2 * v11);
      if (*((_QWORD *)&xmmword_25472B5E8 + 1) <= v12)
        v14 = v12 % *((_QWORD *)&xmmword_25472B5E8 + 1);
    }
    else
    {
      v14 = (DWORD2(xmmword_25472B5E8) - 1) & v12;
    }
    v15 = *(uint64_t ****)(xmmword_25472B5E8 + 8 * v14);
    if (!v15 || (v16 = *v15) == 0)
    {
LABEL_20:
      v18 = (*a3)++;
      *(_WORD *)(v10 + 2 * v18) = v12;
      goto LABEL_21;
    }
    while (1)
    {
      v17 = (unint64_t)v16[1];
      if (v17 == v12)
        break;
      if (v13.u32[0] > 1uLL)
      {
        if (v17 >= *((_QWORD *)&xmmword_25472B5E8 + 1))
          v17 %= *((_QWORD *)&xmmword_25472B5E8 + 1);
      }
      else
      {
        v17 &= *((_QWORD *)&xmmword_25472B5E8 + 1) - 1;
      }
      if (v17 != v14)
        goto LABEL_20;
LABEL_19:
      v16 = (uint64_t **)*v16;
      if (!v16)
        goto LABEL_20;
    }
    if (*((unsigned __int16 *)v16 + 8) != (_DWORD)v12)
      goto LABEL_19;
    if (*((char *)v16 + 47) < 0)
      v19 = (unint64_t)v16[4];
    else
      v19 = *((unsigned __int8 *)v16 + 47);
    result = sub_20B8D4978(v16 + 3, (void *)(v10 + 2 * *a3), v19, 0);
    if (*((char *)v16 + 47) < 0)
      v20 = v16[4];
    else
      v20 = (uint64_t *)*((unsigned __int8 *)v16 + 47);
    *a3 += v20;
LABEL_21:
    ++v11;
  }
  while (v11 != a2);
LABEL_30:
  *a4 = v10;
  return result;
}

void sub_20B8DB908(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = 896;
  while (1)
  {
    if (*(char *)(v1 + v3 - 1) < 0)
      operator delete(*(void **)(v1 + v3 - 24));
    v3 -= 32;
    if (!v3)
    {
      __cxa_guard_abort(&qword_25472B550);
      _Unwind_Resume(a1);
    }
  }
}

BOOL sub_20B8DB9E4(const __CFString *a1, const __CFString *a2)
{
  _BOOL8 result;
  CFIndex Length;
  const __CFString *v6;
  CFIndex v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  CFIndex v13;
  uint64_t *v14;
  int CharacterAtIndex;
  int v16;
  int v17;
  CFIndex v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  _BOOL4 v22;
  uint64_t v24;
  uint64_t v25;
  CFIndex v26;
  char *v27;
  uint64_t v28;
  CFIndex v29;
  uint64_t *v30;
  CFStringRef v31;
  uint64_t v32;

  result = 0;
  v32 = *MEMORY[0x24BDAC8D0];
  v31 = a1;
  if (a1 && a2)
  {
    Length = CFStringGetLength(v31);
    v6 = a2;
    v7 = CFStringGetLength(a2);
    v25 = (uint64_t)&v25;
    v26 = v7 + 1;
    MEMORY[0x24BDAC7A8](v7);
    v27 = (char *)&v25 - v8;
    v29 = Length;
    if ((Length & 0x8000000000000000) == 0)
    {
      v9 = 0;
      v28 = 8 * v7 + 8;
      v10 = (8 * v7) ^ 0xFFFFFFFFFFFFFFF8;
      v30 = (uint64_t *)v27;
      while (v7 < 0)
      {
LABEL_45:
        v30 = (uint64_t *)((char *)v30 + v28);
        v21 = v9++ == v29;
        if (v21)
          return *(_QWORD *)&v27[8 * v26 * v29 + 8 * v7] == 0;
      }
      v11 = 0;
      v12 = &v27[8 * v9 * v26];
      v13 = -1;
      v14 = v30;
      while (1)
      {
        if (v9)
        {
          CharacterAtIndex = CFStringGetCharacterAtIndex(v31, v9 - 1);
          if (v13 == -1)
          {
            v16 = 0;
            v20 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else
          {
            v16 = CFStringGetCharacterAtIndex(v6, v13);
            if (CharacterAtIndex != v16
              && ((CharacterAtIndex - 12353) < 0x56
               || CharacterAtIndex == 12540
               || CharacterAtIndex == 12316))
            {
              v21 = CharacterAtIndex == 12316 && v16 == 12540;
              v17 = v21;
            }
            else
            {
              v17 = 1;
            }
            v20 = *(uint64_t *)((char *)v14 + v10 - 8) + (v17 ^ 1u);
          }
          v22 = CharacterAtIndex == v16
             || (CharacterAtIndex - 12353) >= 0x56
             && CharacterAtIndex != 12540
             && CharacterAtIndex != 12316
             || CharacterAtIndex == 12316 && v16 == 12540;
          v19 = *(uint64_t *)((char *)v14 + v10) + !v22;
          if (v13 == -1)
            goto LABEL_39;
          v18 = v13;
        }
        else
        {
          if (v13 == -1)
          {
            v20 = 0;
            v19 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_39:
            v24 = 0x7FFFFFFFFFFFFFFFLL;
            goto LABEL_40;
          }
          v18 = v11 - 1;
          CFStringGetCharacterAtIndex(v6, v13);
          v19 = 0x7FFFFFFFFFFFFFFFLL;
          v20 = 0x7FFFFFFFFFFFFFFFLL;
        }
        v24 = *(_QWORD *)&v12[8 * v18];
LABEL_40:
        if (v19 < v20)
          v20 = v19;
        if (v24 < v20)
          v20 = v24;
        *v14++ = v20;
        ++v11;
        if (v7 == ++v13)
          goto LABEL_45;
      }
    }
    return *(_QWORD *)&v27[8 * v26 * v29 + 8 * v7] == 0;
  }
  return result;
}

uint64_t sub_20B8DBCA0(_WORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  _BOOL4 v4;
  _BOOL4 v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  v2 = 0;
  if (a1 && a2)
  {
    if (a2 < 1)
    {
      v5 = 1;
      v4 = 1;
    }
    else
    {
      v3 = *a1 & 0xFC00;
      if (v3 == 56320)
      {
        v4 = 0;
        v5 = 1;
      }
      else
      {
        v6 = 1;
        do
        {
          v7 = v3;
          v8 = v6;
          if (a2 == v6)
            break;
          v3 = a1[v6++] & 0xFC00;
        }
        while ((v7 == 55296) != (v3 != 56320));
        v5 = v7 != 55296;
        v4 = v8 >= a2;
      }
    }
    return v4 & v5;
  }
  return v2;
}

uint64_t sub_20B8DBD3C(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  const __CFString *v7;
  CFIndex Length;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  CFIndex v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  UChar32 v17;
  UChar32 CharacterAtIndex;
  unsigned int v19;
  unsigned int v20;

  v4 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 304))(a2);
  v6 = *v4;
  v5 = v4[1];
  v7 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  Length = CFStringGetLength(v7);
  v9 = v5 - v6;
  if (v5 == v6)
    return 0;
  v10 = 0;
  v11 = 0;
  v12 = v9 / 40;
  v13 = Length - 1;
  v14 = v12 - 1;
  if (v12 <= 1)
    v15 = 1;
  else
    v15 = v12;
  v16 = v12 - 2;
  do
  {
    if (v10
      || (*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 128))(a2, 0) != 1
      || (v17 = CFStringGetCharacterAtIndex(v7, 0), v17 == 9787)
      || (u_charType(v17) - 19) >= 0xB)
    {
      if (v16 != v10
        || (*(unsigned int (**)(uint64_t, unint64_t))(*(_QWORD *)a2 + 128))(a2, v14) != 1
        || (CharacterAtIndex = CFStringGetCharacterAtIndex(v7, v13), CharacterAtIndex == 9787)
        || (u_charType(CharacterAtIndex) - 19) >= 0xB)
      {
        if (v14 == v10
          || (v19 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 352))(a2, v10),
              v20 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 344))(a2, v10 + 1),
              sub_20B8B252C(a1, v19, v20)))
        {
          ++v11;
        }
      }
    }
    ++v10;
  }
  while (v15 != v10);
  return v11;
}

void sub_20B8DBED4(_DWORD *a1, uint64_t a2)
{
  unint64_t v2;
  _DWORD *v3;
  uint64_t v4;
  unint64_t v5;
  _DWORD *v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t ***v9;
  uint64_t **i;
  unint64_t v11;
  _QWORD *v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  int8x8_t prime;
  void *v18;
  void *v19;
  uint64_t v20;
  _QWORD **v21;
  unint64_t v22;
  uint8x8_t v23;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  _QWORD *j;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  void *v32;

  xmmword_25472B598 = 0u;
  *(_OWORD *)&qword_25472B5A8 = 0u;
  dword_25472B5B8 = 1065353216;
  if (a2)
  {
    v3 = a1;
    v4 = 0;
    v5 = 0;
    v6 = &a1[a2];
    while (1)
    {
      v7 = *(unsigned __int16 *)v3;
      if (v5)
      {
        v8 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
        v8.i16[0] = vaddlv_u8(v8);
        if (v8.u32[0] > 1uLL)
        {
          v2 = *(unsigned __int16 *)v3;
          if (v5 <= v7)
            v2 = v7 % v5;
        }
        else
        {
          v2 = ((_DWORD)v5 - 1) & v7;
        }
        v9 = *(uint64_t ****)(xmmword_25472B598 + 8 * v2);
        if (v9)
        {
          for (i = *v9; i; i = (uint64_t **)*i)
          {
            v11 = (unint64_t)i[1];
            if (v11 == v7)
            {
              if (*((unsigned __int16 *)i + 8) == (_DWORD)v7)
                goto LABEL_75;
            }
            else
            {
              if (v8.u32[0] > 1uLL)
              {
                if (v11 >= v5)
                  v11 %= v5;
              }
              else
              {
                v11 &= v5 - 1;
              }
              if (v11 != v2)
                break;
            }
          }
        }
      }
      v12 = operator new(0x18uLL);
      *v12 = 0;
      v12[1] = v7;
      *((_DWORD *)v12 + 4) = *v3;
      v13 = (float)(unint64_t)(v4 + 1);
      if (!v5 || (float)(*(float *)&dword_25472B5B8 * (float)v5) < v13)
        break;
LABEL_65:
      v29 = xmmword_25472B598;
      v30 = *(_QWORD **)(xmmword_25472B598 + 8 * v2);
      if (v30)
      {
        *v12 = *v30;
      }
      else
      {
        *v12 = qword_25472B5A8;
        qword_25472B5A8 = (uint64_t)v12;
        *(_QWORD *)(v29 + 8 * v2) = &qword_25472B5A8;
        if (!*v12)
          goto LABEL_74;
        v31 = *(_QWORD *)(*v12 + 8);
        if ((v5 & (v5 - 1)) != 0)
        {
          if (v31 >= v5)
            v31 %= v5;
        }
        else
        {
          v31 &= v5 - 1;
        }
        v30 = (_QWORD *)(xmmword_25472B598 + 8 * v31);
      }
      *v30 = v12;
LABEL_74:
      v4 = ++qword_25472B5B0;
LABEL_75:
      if (++v3 == v6)
        return;
    }
    v14 = (v5 & (v5 - 1)) != 0;
    if (v5 < 3)
      v14 = 1;
    v15 = v14 | (2 * v5);
    v16 = vcvtps_u32_f32(v13 / *(float *)&dword_25472B5B8);
    if (v15 <= v16)
      prime = (int8x8_t)v16;
    else
      prime = (int8x8_t)v15;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v5 = *((_QWORD *)&xmmword_25472B598 + 1);
    }
    if (*(_QWORD *)&prime > v5)
      goto LABEL_31;
    if (*(_QWORD *)&prime < v5)
    {
      v24 = vcvtps_u32_f32((float)(unint64_t)qword_25472B5B0 / *(float *)&dword_25472B5B8);
      if (v5 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v5), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (*(_QWORD *)&prime <= v24)
        prime = (int8x8_t)v24;
      if (*(_QWORD *)&prime >= v5)
      {
        v5 = *((_QWORD *)&xmmword_25472B598 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_31:
          if (*(_QWORD *)&prime >> 61)
            sub_20B800BC0();
          v18 = operator new(8 * *(_QWORD *)&prime);
          v19 = (void *)xmmword_25472B598;
          *(_QWORD *)&xmmword_25472B598 = v18;
          if (v19)
            operator delete(v19);
          v20 = 0;
          *((int8x8_t *)&xmmword_25472B598 + 1) = prime;
          do
            *(_QWORD *)(xmmword_25472B598 + 8 * v20++) = 0;
          while (*(_QWORD *)&prime != v20);
          v21 = (_QWORD **)qword_25472B5A8;
          if (qword_25472B5A8)
          {
            v22 = *(_QWORD *)(qword_25472B5A8 + 8);
            v23 = (uint8x8_t)vcnt_s8(prime);
            v23.i16[0] = vaddlv_u8(v23);
            if (v23.u32[0] > 1uLL)
            {
              if (v22 >= *(_QWORD *)&prime)
                v22 %= *(_QWORD *)&prime;
            }
            else
            {
              v22 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(xmmword_25472B598 + 8 * v22) = &qword_25472B5A8;
            for (j = *v21; j; v22 = v28)
            {
              v28 = j[1];
              if (v23.u32[0] > 1uLL)
              {
                if (v28 >= *(_QWORD *)&prime)
                  v28 %= *(_QWORD *)&prime;
              }
              else
              {
                v28 &= *(_QWORD *)&prime - 1;
              }
              if (v28 != v22)
              {
                if (!*(_QWORD *)(xmmword_25472B598 + 8 * v28))
                {
                  *(_QWORD *)(xmmword_25472B598 + 8 * v28) = v21;
                  goto LABEL_56;
                }
                *v21 = (_QWORD *)*j;
                *j = **(_QWORD **)(xmmword_25472B598 + 8 * v28);
                **(_QWORD **)(xmmword_25472B598 + 8 * v28) = j;
                j = v21;
              }
              v28 = v22;
LABEL_56:
              v21 = (_QWORD **)j;
              j = (_QWORD *)*j;
            }
          }
          v5 = (unint64_t)prime;
          goto LABEL_60;
        }
        v32 = (void *)xmmword_25472B598;
        *(_QWORD *)&xmmword_25472B598 = 0;
        if (v32)
          operator delete(v32);
        v5 = 0;
        *((_QWORD *)&xmmword_25472B598 + 1) = 0;
      }
    }
LABEL_60:
    if ((v5 & (v5 - 1)) != 0)
    {
      if (v5 <= v7)
        v2 = v7 % v5;
      else
        v2 = v7;
    }
    else
    {
      v2 = ((_DWORD)v5 - 1) & v7;
    }
    goto LABEL_65;
  }
}

void sub_20B8DC310(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  sub_20B84055C((uint64_t)&xmmword_25472B598);
  _Unwind_Resume(a1);
}

void sub_20B8DC33C(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unsigned __int16 **v9;
  unsigned __int16 *i;
  unint64_t v11;
  char *v12;
  _BYTE *v13;
  __int128 v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  int8x8_t prime;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD **v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  _QWORD *j;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;

  xmmword_25472B5C0 = 0u;
  *(_OWORD *)&qword_25472B5D0 = 0u;
  dword_25472B5E0 = 1065353216;
  if (a2)
  {
    v3 = a1;
    v35 = a1 + 32 * a2;
    while (1)
    {
      v4 = sub_20B89ACFC((uint64_t)&qword_25472B5D8, v3);
      v5 = v4;
      v6 = *((_QWORD *)&xmmword_25472B5C0 + 1);
      if (*((_QWORD *)&xmmword_25472B5C0 + 1))
      {
        v7 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_25472B5C0 + 8));
        v7.i16[0] = vaddlv_u8(v7);
        v8 = v7.u32[0];
        if (v7.u32[0] > 1uLL)
        {
          v2 = v4;
          if (v4 >= *((_QWORD *)&xmmword_25472B5C0 + 1))
            v2 = v4 % *((_QWORD *)&xmmword_25472B5C0 + 1);
        }
        else
        {
          v2 = (*((_QWORD *)&xmmword_25472B5C0 + 1) - 1) & v4;
        }
        v9 = *(unsigned __int16 ***)(xmmword_25472B5C0 + 8 * v2);
        if (v9)
        {
          for (i = *v9; i; i = *(unsigned __int16 **)i)
          {
            v11 = *((_QWORD *)i + 1);
            if (v11 == v5)
            {
              if (sub_20B89AD3C((uint64_t)&dword_25472B5E0, i + 8, (unsigned __int16 *)v3))
                goto LABEL_78;
            }
            else
            {
              if (v8 > 1)
              {
                if (v11 >= v6)
                  v11 %= v6;
              }
              else
              {
                v11 &= v6 - 1;
              }
              if (v11 != v2)
                break;
            }
          }
        }
      }
      v12 = (char *)operator new(0x30uLL);
      *(_QWORD *)v12 = 0;
      *((_QWORD *)v12 + 1) = v5;
      v13 = v12 + 16;
      if (*(char *)(v3 + 23) < 0)
      {
        sub_20B88DD4C(v13, *(void **)v3, *(_QWORD *)(v3 + 8));
      }
      else
      {
        v14 = *(_OWORD *)v3;
        *((_QWORD *)v12 + 4) = *(_QWORD *)(v3 + 16);
        *(_OWORD *)v13 = v14;
      }
      *((_WORD *)v12 + 20) = *(_WORD *)(v3 + 24);
      v15 = (float)(unint64_t)(qword_25472B5D8 + 1);
      if (!v6 || (float)(*(float *)&dword_25472B5E0 * (float)v6) < v15)
        break;
LABEL_68:
      v31 = xmmword_25472B5C0;
      v32 = *(_QWORD **)(xmmword_25472B5C0 + 8 * v2);
      if (v32)
      {
        *(_QWORD *)v12 = *v32;
      }
      else
      {
        *(_QWORD *)v12 = qword_25472B5D0;
        qword_25472B5D0 = (uint64_t)v12;
        *(_QWORD *)(v31 + 8 * v2) = &qword_25472B5D0;
        if (!*(_QWORD *)v12)
          goto LABEL_77;
        v33 = *(_QWORD *)(*(_QWORD *)v12 + 8);
        if ((v6 & (v6 - 1)) != 0)
        {
          if (v33 >= v6)
            v33 %= v6;
        }
        else
        {
          v33 &= v6 - 1;
        }
        v32 = (_QWORD *)(xmmword_25472B5C0 + 8 * v33);
      }
      *v32 = v12;
LABEL_77:
      ++qword_25472B5D8;
LABEL_78:
      v3 += 32;
      if (v3 == v35)
        return;
    }
    v16 = (v6 & (v6 - 1)) != 0;
    if (v6 < 3)
      v16 = 1;
    v17 = v16 | (2 * v6);
    v18 = vcvtps_u32_f32(v15 / *(float *)&dword_25472B5E0);
    if (v17 <= v18)
      prime = (int8x8_t)v18;
    else
      prime = (int8x8_t)v17;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v6 = *((_QWORD *)&xmmword_25472B5C0 + 1);
    if (*(_QWORD *)&prime > *((_QWORD *)&xmmword_25472B5C0 + 1))
      goto LABEL_34;
    if (*(_QWORD *)&prime < *((_QWORD *)&xmmword_25472B5C0 + 1))
    {
      v26 = vcvtps_u32_f32((float)(unint64_t)qword_25472B5D8 / *(float *)&dword_25472B5E0);
      if (*((_QWORD *)&xmmword_25472B5C0 + 1) < 3uLL
        || (v27 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_25472B5C0 + 8)),
            v27.i16[0] = vaddlv_u8(v27),
            v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (*(_QWORD *)&prime <= v26)
        prime = (int8x8_t)v26;
      if (*(_QWORD *)&prime >= v6)
      {
        v6 = *((_QWORD *)&xmmword_25472B5C0 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_34:
          if (*(_QWORD *)&prime >> 61)
            sub_20B800BC0();
          v20 = operator new(8 * *(_QWORD *)&prime);
          v21 = (void *)xmmword_25472B5C0;
          *(_QWORD *)&xmmword_25472B5C0 = v20;
          if (v21)
            operator delete(v21);
          v22 = 0;
          *((int8x8_t *)&xmmword_25472B5C0 + 1) = prime;
          do
            *(_QWORD *)(xmmword_25472B5C0 + 8 * v22++) = 0;
          while (*(_QWORD *)&prime != v22);
          v23 = (_QWORD **)qword_25472B5D0;
          if (qword_25472B5D0)
          {
            v24 = *(_QWORD *)(qword_25472B5D0 + 8);
            v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(_QWORD *)&prime)
                v24 %= *(_QWORD *)&prime;
            }
            else
            {
              v24 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(xmmword_25472B5C0 + 8 * v24) = &qword_25472B5D0;
            for (j = *v23; j; v24 = v30)
            {
              v30 = j[1];
              if (v25.u32[0] > 1uLL)
              {
                if (v30 >= *(_QWORD *)&prime)
                  v30 %= *(_QWORD *)&prime;
              }
              else
              {
                v30 &= *(_QWORD *)&prime - 1;
              }
              if (v30 != v24)
              {
                if (!*(_QWORD *)(xmmword_25472B5C0 + 8 * v30))
                {
                  *(_QWORD *)(xmmword_25472B5C0 + 8 * v30) = v23;
                  goto LABEL_59;
                }
                *v23 = (_QWORD *)*j;
                *j = **(_QWORD **)(xmmword_25472B5C0 + 8 * v30);
                **(_QWORD **)(xmmword_25472B5C0 + 8 * v30) = j;
                j = v23;
              }
              v30 = v24;
LABEL_59:
              v23 = (_QWORD **)j;
              j = (_QWORD *)*j;
            }
          }
          v6 = (unint64_t)prime;
          goto LABEL_63;
        }
        v34 = (void *)xmmword_25472B5C0;
        *(_QWORD *)&xmmword_25472B5C0 = 0;
        if (v34)
          operator delete(v34);
        v6 = 0;
        *((_QWORD *)&xmmword_25472B5C0 + 1) = 0;
      }
    }
LABEL_63:
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v5 >= v6)
        v2 = v5 % v6;
      else
        v2 = v5;
    }
    else
    {
      v2 = (v6 - 1) & v5;
    }
    goto LABEL_68;
  }
}

void sub_20B8DC7C8(_Unwind_Exception *a1)
{
  void **v1;

  sub_20B89ADC0(1, v1);
  sub_20B89AE0C((uint64_t)&xmmword_25472B5C0);
  _Unwind_Resume(a1);
}

void sub_20B8DC808(unsigned __int16 *a1, uint64_t a2)
{
  unint64_t v2;
  unsigned __int16 *v3;
  uint64_t v4;
  unsigned __int16 *v5;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t ***v9;
  uint64_t **i;
  unint64_t v11;
  char *v12;
  _BYTE *v13;
  __int128 v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  int8x8_t prime;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD **v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  _QWORD *j;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  void *v34;

  xmmword_25472B5E8 = 0u;
  *(_OWORD *)&qword_25472B5F8 = 0u;
  dword_25472B608 = 1065353216;
  if (a2)
  {
    v3 = a1;
    v4 = 0;
    v5 = &a1[16 * a2];
    while (1)
    {
      v6 = *v3;
      v7 = *((_QWORD *)&xmmword_25472B5E8 + 1);
      if (*((_QWORD *)&xmmword_25472B5E8 + 1))
      {
        v8 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_25472B5E8 + 8));
        v8.i16[0] = vaddlv_u8(v8);
        if (v8.u32[0] > 1uLL)
        {
          v2 = *v3;
          if (*((_QWORD *)&xmmword_25472B5E8 + 1) <= v6)
            v2 = v6 % *((_QWORD *)&xmmword_25472B5E8 + 1);
        }
        else
        {
          v2 = (DWORD2(xmmword_25472B5E8) - 1) & v6;
        }
        v9 = *(uint64_t ****)(xmmword_25472B5E8 + 8 * v2);
        if (v9)
        {
          for (i = *v9; i; i = (uint64_t **)*i)
          {
            v11 = (unint64_t)i[1];
            if (v11 == v6)
            {
              if (*((unsigned __int16 *)i + 8) == (_DWORD)v6)
                goto LABEL_78;
            }
            else
            {
              if (v8.u32[0] > 1uLL)
              {
                if (v11 >= *((_QWORD *)&xmmword_25472B5E8 + 1))
                  v11 %= *((_QWORD *)&xmmword_25472B5E8 + 1);
              }
              else
              {
                v11 &= *((_QWORD *)&xmmword_25472B5E8 + 1) - 1;
              }
              if (v11 != v2)
                break;
            }
          }
        }
      }
      v12 = (char *)operator new(0x30uLL);
      *(_QWORD *)v12 = 0;
      *((_QWORD *)v12 + 1) = v6;
      *((_WORD *)v12 + 8) = v6;
      v13 = v12 + 24;
      if (*((char *)v3 + 31) < 0)
      {
        sub_20B88DD4C(v13, *((void **)v3 + 1), *((_QWORD *)v3 + 2));
        v4 = qword_25472B600;
      }
      else
      {
        v14 = *(_OWORD *)(v3 + 4);
        *((_QWORD *)v12 + 5) = *((_QWORD *)v3 + 3);
        *(_OWORD *)v13 = v14;
      }
      v15 = (float)(unint64_t)(v4 + 1);
      if (!v7 || (float)(*(float *)&dword_25472B608 * (float)v7) < v15)
        break;
LABEL_68:
      v31 = xmmword_25472B5E8;
      v32 = *(_QWORD **)(xmmword_25472B5E8 + 8 * v2);
      if (v32)
      {
        *(_QWORD *)v12 = *v32;
      }
      else
      {
        *(_QWORD *)v12 = qword_25472B5F8;
        qword_25472B5F8 = (uint64_t)v12;
        *(_QWORD *)(v31 + 8 * v2) = &qword_25472B5F8;
        if (!*(_QWORD *)v12)
          goto LABEL_77;
        v33 = *(_QWORD *)(*(_QWORD *)v12 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v33 >= v7)
            v33 %= v7;
        }
        else
        {
          v33 &= v7 - 1;
        }
        v32 = (_QWORD *)(xmmword_25472B5E8 + 8 * v33);
      }
      *v32 = v12;
LABEL_77:
      v4 = ++qword_25472B600;
LABEL_78:
      v3 += 16;
      if (v3 == v5)
        return;
    }
    v16 = (v7 & (v7 - 1)) != 0;
    if (v7 < 3)
      v16 = 1;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v15 / *(float *)&dword_25472B608);
    if (v17 <= v18)
      prime = (int8x8_t)v18;
    else
      prime = (int8x8_t)v17;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v7 = *((_QWORD *)&xmmword_25472B5E8 + 1);
    if (*(_QWORD *)&prime > *((_QWORD *)&xmmword_25472B5E8 + 1))
      goto LABEL_34;
    if (*(_QWORD *)&prime < *((_QWORD *)&xmmword_25472B5E8 + 1))
    {
      v26 = vcvtps_u32_f32((float)(unint64_t)qword_25472B600 / *(float *)&dword_25472B608);
      if (*((_QWORD *)&xmmword_25472B5E8 + 1) < 3uLL
        || (v27 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_25472B5E8 + 8)),
            v27.i16[0] = vaddlv_u8(v27),
            v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (*(_QWORD *)&prime <= v26)
        prime = (int8x8_t)v26;
      if (*(_QWORD *)&prime >= v7)
      {
        v7 = *((_QWORD *)&xmmword_25472B5E8 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_34:
          if (*(_QWORD *)&prime >> 61)
            sub_20B800BC0();
          v20 = operator new(8 * *(_QWORD *)&prime);
          v21 = (void *)xmmword_25472B5E8;
          *(_QWORD *)&xmmword_25472B5E8 = v20;
          if (v21)
            operator delete(v21);
          v22 = 0;
          *((int8x8_t *)&xmmword_25472B5E8 + 1) = prime;
          do
            *(_QWORD *)(xmmword_25472B5E8 + 8 * v22++) = 0;
          while (*(_QWORD *)&prime != v22);
          v23 = (_QWORD **)qword_25472B5F8;
          if (qword_25472B5F8)
          {
            v24 = *(_QWORD *)(qword_25472B5F8 + 8);
            v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(_QWORD *)&prime)
                v24 %= *(_QWORD *)&prime;
            }
            else
            {
              v24 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(xmmword_25472B5E8 + 8 * v24) = &qword_25472B5F8;
            for (j = *v23; j; v24 = v30)
            {
              v30 = j[1];
              if (v25.u32[0] > 1uLL)
              {
                if (v30 >= *(_QWORD *)&prime)
                  v30 %= *(_QWORD *)&prime;
              }
              else
              {
                v30 &= *(_QWORD *)&prime - 1;
              }
              if (v30 != v24)
              {
                if (!*(_QWORD *)(xmmword_25472B5E8 + 8 * v30))
                {
                  *(_QWORD *)(xmmword_25472B5E8 + 8 * v30) = v23;
                  goto LABEL_59;
                }
                *v23 = (_QWORD *)*j;
                *j = **(_QWORD **)(xmmword_25472B5E8 + 8 * v30);
                **(_QWORD **)(xmmword_25472B5E8 + 8 * v30) = j;
                j = v23;
              }
              v30 = v24;
LABEL_59:
              v23 = (_QWORD **)j;
              j = (_QWORD *)*j;
            }
          }
          v7 = (unint64_t)prime;
          goto LABEL_63;
        }
        v34 = (void *)xmmword_25472B5E8;
        *(_QWORD *)&xmmword_25472B5E8 = 0;
        if (v34)
          operator delete(v34);
        v7 = 0;
        *((_QWORD *)&xmmword_25472B5E8 + 1) = 0;
      }
    }
LABEL_63:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v2 = v6 % v7;
      else
        v2 = v6;
    }
    else
    {
      v2 = ((_DWORD)v7 - 1) & v6;
    }
    goto LABEL_68;
  }
}

void sub_20B8DCC64(_Unwind_Exception *a1)
{
  void **v1;

  sub_20B8901C0(1, v1);
  sub_20B89020C((uint64_t)&xmmword_25472B5E8);
  _Unwind_Resume(a1);
}

_QWORD *MecabraCreateWithAdditionalDictionariesAndOptions(unsigned int a1, const void *a2, const void *a3, char a4)
{
  const __CFAllocator *v8;
  __CFDictionary *Mutable;
  CFNumberRef v10;
  const void **v11;
  _QWORD *v12;
  uint64_t valuePtr;

  v8 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  valuePtr = a1;
  v10 = CFNumberCreate(v8, kCFNumberCFIndexType, &valuePtr);
  CFDictionarySetValue(Mutable, kMecabraCreationInputMethodTypeKey[0], v10);
  CFRelease(v10);
  if (a2)
    CFDictionarySetValue(Mutable, kMecabraCreationCustomLearningDictionaryDirectoryKey[0], a2);
  if (a3)
    CFDictionarySetValue(Mutable, kMecabraCreationCustomAdditionalDictionaryDirectoriesKey[0], a3);
  v11 = (const void **)MEMORY[0x24BDBD270];
  if ((a4 & 1) == 0)
  {
    if ((a4 & 2) == 0)
      goto LABEL_7;
LABEL_11:
    CFDictionarySetValue(Mutable, kMecabraCreationSyncLearningDataKey[0], (const void *)*MEMORY[0x24BDBD268]);
    if ((a4 & 4) == 0)
      goto LABEL_9;
    goto LABEL_8;
  }
  CFDictionarySetValue(Mutable, kMecabraCreationUseSpecialSymbolKey[0], (const void *)*MEMORY[0x24BDBD270]);
  if ((a4 & 2) != 0)
    goto LABEL_11;
LABEL_7:
  if ((a4 & 4) != 0)
LABEL_8:
    CFDictionarySetValue(Mutable, kMecabraCreationLiteModeKey[0], *v11);
LABEL_9:
  v12 = MecabraCreate(Mutable);
  CFRelease(Mutable);
  return v12;
}

_QWORD *MecabraCreate(const __CFDictionary *a1)
{
  NSObject *v2;
  _QWORD *v3;
  int v4;
  NSObject *v5;
  os_signpost_id_t v6;
  NSObject *v7;
  unint64_t v8;
  NSObject *v9;
  uint64_t v10;
  unint64_t v11;
  os_signpost_id_t v12;
  int v13;
  uint64_t *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  CFMutableArrayRef v20;
  uint64_t *v21;
  const void **v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  CFMutableArrayRef Mutable;
  const void **v35;
  uint64_t *v36;
  int v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  int v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  int v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  NSObject *v73;
  NSObject *v74;
  NSObject *v75;
  const void *v77;
  char v78;
  uint64_t v79;
  uint8_t buf[4];
  int v81;
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  v2 = sub_20B9A7C5C(2u);
  if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    if (a1)
      goto LABEL_3;
    return 0;
  }
  LOWORD(v77) = 0;
  _os_log_debug_impl(&dword_20B7F7000, v2, OS_LOG_TYPE_DEBUG, "[MecabraCreate]", (uint8_t *)&v77, 2u);
  if (!a1)
    return 0;
LABEL_3:
  v3 = (_QWORD *)operator new();
  sub_20BA22000((uint64_t)&v77, a1);
  v4 = (int)v77;
  v5 = sub_20B9A7C5C(0xDu);
  v6 = os_signpost_id_make_with_pointer(v5, v3);
  v7 = sub_20B9A7C5C(0xDu);
  v8 = v6 - 1;
  if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v9 = v7;
    if (os_signpost_enabled(v7))
    {
      *(_DWORD *)buf = 67109120;
      v81 = v4;
      _os_signpost_emit_with_name_impl(&dword_20B7F7000, v9, OS_SIGNPOST_INTERVAL_BEGIN, v6, "MecabraCreate", "Input method: %d", buf, 8u);
    }
  }
  switch(v4)
  {
    case 1:
      v10 = operator new();
      *(_QWORD *)v10 = &off_24C463DF8;
      *(_DWORD *)(v10 + 8) = (_DWORD)v77;
      *(_QWORD *)(v10 + 16) = 0;
      v28 = (uint64_t *)(v10 + 16);
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_BYTE *)(v10 + 40) = 1;
      *(_QWORD *)(v10 + 48) = 0;
      *(_DWORD *)(v10 + 56) = 0;
      *(_QWORD *)(v10 + 64) = 0;
      *(_QWORD *)(v10 + 72) = CFSetCreateMutable(0, 0, MEMORY[0x24BDBD6B8]);
      v29 = operator new();
      *(_BYTE *)(v29 + 48) = 0;
      *(_OWORD *)(v29 + 16) = 0u;
      *(_OWORD *)(v29 + 32) = 0u;
      *(_OWORD *)v29 = 0u;
      v30 = *(_QWORD *)(v10 + 32);
      *(_QWORD *)(v10 + 32) = v29;
      if (v30)
      {
        sub_20B8E672C(v30);
        v29 = *(_QWORD *)(v10 + 32);
      }
      v31 = sub_20B8BE17C((uint64_t)&v77, v29);
      sub_20B8BFD8C(v28, v31);
      if (!*v28)
        goto LABEL_60;
      if (v78)
        goto LABEL_61;
      v32 = operator new();
      v33 = *(_QWORD *)(v10 + 24);
      *(_QWORD *)(v10 + 24) = v32;
      if (v33)
      {
        MEMORY[0x20BD39CB0](v33, 0xC400A2AC0F1);
        if (!*(_QWORD *)(v10 + 24))
          goto LABEL_60;
      }
      Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
      v35 = (const void **)(v10 + 64);
      goto LABEL_59;
    case 2:
    case 4:
    case 5:
    case 13:
      v10 = operator new();
      v11 = v6 - 1;
      v12 = v6;
      v13 = v4;
      *(_QWORD *)v10 = &off_24C463A88;
      *(_DWORD *)(v10 + 8) = (_DWORD)v77;
      *(_QWORD *)(v10 + 16) = 0;
      *(_QWORD *)(v10 + 24) = 0;
      v14 = (uint64_t *)(v10 + 24);
      *(_QWORD *)(v10 + 32) = 0;
      *(_BYTE *)(v10 + 40) = 1;
      *(_QWORD *)(v10 + 48) = 0;
      *(_DWORD *)(v10 + 56) = 0;
      *(_QWORD *)(v10 + 64) = 0;
      *(_QWORD *)(v10 + 72) = CFSetCreateMutable(0, 0, MEMORY[0x24BDBD6B8]);
      v15 = *(_DWORD *)(v10 + 8);
      v16 = operator new();
      *(_DWORD *)v16 = v15;
      *(_BYTE *)(v16 + 4) = 0;
      *(_OWORD *)(v16 + 6) = 0u;
      *(_OWORD *)(v16 + 22) = 0u;
      *(_WORD *)(v16 + 38) = 0;
      *(_DWORD *)(v16 + 40) = 1065353216;
      *(_OWORD *)(v16 + 48) = 0u;
      *(_OWORD *)(v16 + 64) = 0u;
      *(_OWORD *)(v16 + 80) = 0u;
      *(_OWORD *)(v16 + 91) = 0u;
      *(_OWORD *)(v16 + 112) = 0u;
      *(_OWORD *)(v16 + 128) = 0u;
      *(_OWORD *)(v16 + 144) = 0u;
      sub_20B8E6890((uint64_t *)(v10 + 32), v16);
      v17 = sub_20B990434((unsigned int *)&v77, *(_QWORD *)(v10 + 32));
      sub_20B8E8388((uint64_t *)(v10 + 16), v17, v18);
      if (!*(_QWORD *)(v10 + 16))
        goto LABEL_17;
      if (!v78)
      {
        v19 = sub_20B93F3C0((unsigned int *)&v77, *(_QWORD *)(v10 + 32));
        sub_20B8E83C4(v14, v19);
        if (*v14)
        {
          v20 = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
          sub_20B8B035C((const void **)(v10 + 64), v20);
        }
        else
        {
LABEL_17:
          *(_BYTE *)(v10 + 40) = 0;
        }
      }
      v4 = v13;
      v6 = v12;
      v8 = v11;
      goto LABEL_61;
    case 7:
      v10 = operator new();
      *(_QWORD *)v10 = &off_24C464320;
      *(_DWORD *)(v10 + 8) = (_DWORD)v77;
      *(_QWORD *)(v10 + 16) = 0;
      *(_QWORD *)(v10 + 24) = 0;
      v36 = (uint64_t *)(v10 + 24);
      *(_QWORD *)(v10 + 32) = 0;
      *(_BYTE *)(v10 + 40) = 1;
      *(_QWORD *)(v10 + 48) = 0;
      *(_DWORD *)(v10 + 56) = 0;
      *(_QWORD *)(v10 + 64) = 0;
      v22 = (const void **)(v10 + 64);
      *(_QWORD *)(v10 + 72) = CFSetCreateMutable(0, 0, MEMORY[0x24BDBD6B8]);
      v37 = *(_DWORD *)(v10 + 8);
      v38 = operator new();
      *(_DWORD *)v38 = v37;
      *(_BYTE *)(v38 + 4) = 0;
      *(_OWORD *)(v38 + 6) = 0u;
      *(_OWORD *)(v38 + 22) = 0u;
      *(_WORD *)(v38 + 38) = 0;
      *(_DWORD *)(v38 + 40) = 1065353216;
      *(_OWORD *)(v38 + 48) = 0u;
      *(_OWORD *)(v38 + 64) = 0u;
      *(_OWORD *)(v38 + 80) = 0u;
      *(_OWORD *)(v38 + 91) = 0u;
      *(_OWORD *)(v38 + 112) = 0u;
      *(_OWORD *)(v38 + 128) = 0u;
      *(_OWORD *)(v38 + 144) = 0u;
      sub_20B8E6890((uint64_t *)(v10 + 32), v38);
      v39 = sub_20B87F2E4((uint64_t)&v77);
      v40 = *(_QWORD *)(v10 + 16);
      *(_QWORD *)(v10 + 16) = v39;
      if (v40)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
        if (!*(_QWORD *)(v10 + 16))
          goto LABEL_60;
      }
      if (v78)
        goto LABEL_61;
      v41 = sub_20B93F3C0((unsigned int *)&v77, *(_QWORD *)(v10 + 32));
      sub_20B8E83C4(v36, v41);
      if (*v36)
        goto LABEL_58;
      goto LABEL_60;
    case 8:
      v10 = operator new();
      *(_QWORD *)v10 = &off_24C4644D8;
      *(_DWORD *)(v10 + 8) = (_DWORD)v77;
      *(_QWORD *)(v10 + 16) = 0;
      *(_QWORD *)(v10 + 24) = 0;
      v42 = (uint64_t *)(v10 + 24);
      *(_QWORD *)(v10 + 32) = 0;
      *(_BYTE *)(v10 + 40) = 1;
      *(_QWORD *)(v10 + 48) = 0;
      *(_DWORD *)(v10 + 56) = 0;
      *(_QWORD *)(v10 + 64) = 0;
      v22 = (const void **)(v10 + 64);
      *(_QWORD *)(v10 + 72) = CFSetCreateMutable(0, 0, MEMORY[0x24BDBD6B8]);
      v43 = *(_DWORD *)(v10 + 8);
      v44 = operator new();
      *(_DWORD *)v44 = v43;
      *(_BYTE *)(v44 + 4) = 0;
      *(_OWORD *)(v44 + 6) = 0u;
      *(_OWORD *)(v44 + 22) = 0u;
      *(_WORD *)(v44 + 38) = 0;
      *(_DWORD *)(v44 + 40) = 1065353216;
      *(_OWORD *)(v44 + 48) = 0u;
      *(_OWORD *)(v44 + 64) = 0u;
      *(_OWORD *)(v44 + 80) = 0u;
      *(_OWORD *)(v44 + 91) = 0u;
      *(_OWORD *)(v44 + 112) = 0u;
      *(_OWORD *)(v44 + 128) = 0u;
      *(_OWORD *)(v44 + 144) = 0u;
      sub_20B8E6890((uint64_t *)(v10 + 32), v44);
      v45 = sub_20B87F3F4((uint64_t)&v77);
      v46 = *(_QWORD *)(v10 + 16);
      *(_QWORD *)(v10 + 16) = v45;
      if (v46)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
        if (!*(_QWORD *)(v10 + 16))
          goto LABEL_60;
      }
      if (v78)
        goto LABEL_61;
      v47 = sub_20B93F3C0((unsigned int *)&v77, *(_QWORD *)(v10 + 32));
      sub_20B8E83C4(v42, v47);
      if (*v42)
        goto LABEL_58;
      goto LABEL_60;
    case 9:
    case 16:
      v10 = operator new();
      *(_QWORD *)v10 = &off_24C463C40;
      *(_DWORD *)(v10 + 8) = (_DWORD)v77;
      *(_QWORD *)(v10 + 16) = 0;
      *(_QWORD *)(v10 + 24) = 0;
      v21 = (uint64_t *)(v10 + 24);
      *(_QWORD *)(v10 + 32) = 0;
      *(_BYTE *)(v10 + 40) = 1;
      *(_QWORD *)(v10 + 48) = 0;
      *(_DWORD *)(v10 + 56) = 0;
      *(_QWORD *)(v10 + 64) = 0;
      v22 = (const void **)(v10 + 64);
      *(_QWORD *)(v10 + 72) = CFSetCreateMutable(0, 0, MEMORY[0x24BDBD6B8]);
      v23 = *(_DWORD *)(v10 + 8);
      v24 = operator new();
      *(_DWORD *)v24 = v23;
      *(_BYTE *)(v24 + 4) = 0;
      *(_OWORD *)(v24 + 6) = 0u;
      *(_OWORD *)(v24 + 22) = 0u;
      *(_WORD *)(v24 + 38) = 0;
      *(_DWORD *)(v24 + 40) = 1065353216;
      *(_OWORD *)(v24 + 48) = 0u;
      *(_OWORD *)(v24 + 64) = 0u;
      *(_OWORD *)(v24 + 80) = 0u;
      *(_OWORD *)(v24 + 91) = 0u;
      *(_OWORD *)(v24 + 112) = 0u;
      *(_OWORD *)(v24 + 128) = 0u;
      *(_OWORD *)(v24 + 144) = 0u;
      sub_20B8E6890((uint64_t *)(v10 + 32), v24);
      v25 = sub_20B88C11C((uint64_t)&v77, *(_QWORD *)(v10 + 32));
      v26 = *(_QWORD *)(v10 + 16);
      *(_QWORD *)(v10 + 16) = v25;
      if (v26)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
        if (!*(_QWORD *)(v10 + 16))
          goto LABEL_60;
      }
      if (v78)
        goto LABEL_61;
      v27 = sub_20B93F3C0((unsigned int *)&v77, *(_QWORD *)(v10 + 32));
      sub_20B8E83C4(v21, v27);
      if (*v21)
        goto LABEL_58;
      goto LABEL_60;
    case 10:
      v10 = operator new();
      *(_QWORD *)v10 = &off_24C463FB0;
      *(_DWORD *)(v10 + 8) = (_DWORD)v77;
      *(_QWORD *)(v10 + 16) = 0;
      *(_QWORD *)(v10 + 24) = 0;
      v66 = (uint64_t *)(v10 + 24);
      *(_QWORD *)(v10 + 32) = 0;
      *(_BYTE *)(v10 + 40) = 1;
      *(_QWORD *)(v10 + 48) = 0;
      *(_DWORD *)(v10 + 56) = 0;
      *(_QWORD *)(v10 + 64) = 0;
      v22 = (const void **)(v10 + 64);
      *(_QWORD *)(v10 + 72) = CFSetCreateMutable(0, 0, MEMORY[0x24BDBD6B8]);
      v67 = *(_DWORD *)(v10 + 8);
      v68 = operator new();
      *(_DWORD *)v68 = v67;
      *(_BYTE *)(v68 + 4) = 0;
      *(_OWORD *)(v68 + 6) = 0u;
      *(_OWORD *)(v68 + 22) = 0u;
      *(_WORD *)(v68 + 38) = 0;
      *(_DWORD *)(v68 + 40) = 1065353216;
      *(_OWORD *)(v68 + 48) = 0u;
      *(_OWORD *)(v68 + 64) = 0u;
      *(_OWORD *)(v68 + 80) = 0u;
      *(_OWORD *)(v68 + 91) = 0u;
      *(_OWORD *)(v68 + 112) = 0u;
      *(_OWORD *)(v68 + 128) = 0u;
      *(_OWORD *)(v68 + 144) = 0u;
      sub_20B8E6890((uint64_t *)(v10 + 32), v68);
      v69 = sub_20B953618((uint64_t)&v77, *(_QWORD *)(v10 + 32));
      v70 = *(_QWORD *)(v10 + 16);
      *(_QWORD *)(v10 + 16) = v69;
      if (v70)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
        if (!*(_QWORD *)(v10 + 16))
          goto LABEL_60;
      }
      if (v78)
        goto LABEL_61;
      v71 = sub_20B93F3C0((unsigned int *)&v77, *(_QWORD *)(v10 + 32));
      sub_20B8E83C4(v66, v71);
      if (*v66)
        goto LABEL_58;
      goto LABEL_60;
    case 11:
    case 12:
    case 14:
      v10 = operator new();
      sub_20B8ECFF4(v10, (uint64_t)&v77);
      goto LABEL_61;
    case 15:
      v10 = operator new();
      *(_QWORD *)v10 = &off_24C464690;
      *(_DWORD *)(v10 + 8) = (_DWORD)v77;
      *(_QWORD *)(v10 + 16) = 0;
      *(_QWORD *)(v10 + 24) = 0;
      v48 = (uint64_t *)(v10 + 24);
      *(_QWORD *)(v10 + 32) = 0;
      *(_BYTE *)(v10 + 40) = 1;
      *(_QWORD *)(v10 + 48) = 0;
      *(_DWORD *)(v10 + 56) = 0;
      *(_QWORD *)(v10 + 64) = 0;
      v22 = (const void **)(v10 + 64);
      *(_QWORD *)(v10 + 72) = CFSetCreateMutable(0, 0, MEMORY[0x24BDBD6B8]);
      v49 = *(_DWORD *)(v10 + 8);
      v50 = operator new();
      *(_DWORD *)v50 = v49;
      *(_BYTE *)(v50 + 4) = 0;
      *(_OWORD *)(v50 + 6) = 0u;
      *(_OWORD *)(v50 + 22) = 0u;
      *(_WORD *)(v50 + 38) = 0;
      *(_DWORD *)(v50 + 40) = 1065353216;
      *(_OWORD *)(v50 + 48) = 0u;
      *(_OWORD *)(v50 + 64) = 0u;
      *(_OWORD *)(v50 + 80) = 0u;
      *(_OWORD *)(v50 + 91) = 0u;
      *(_OWORD *)(v50 + 112) = 0u;
      *(_OWORD *)(v50 + 128) = 0u;
      *(_OWORD *)(v50 + 144) = 0u;
      sub_20B8E6890((uint64_t *)(v10 + 32), v50);
      v51 = sub_20B87F4A4((uint64_t)&v77, *(_QWORD *)(v10 + 32));
      v52 = *(_QWORD *)(v10 + 16);
      *(_QWORD *)(v10 + 16) = v51;
      if (v52)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
        if (!*(_QWORD *)(v10 + 16))
          goto LABEL_60;
      }
      if (v78)
        goto LABEL_61;
      v53 = sub_20B93F3C0((unsigned int *)&v77, *(_QWORD *)(v10 + 32));
      sub_20B8E83C4(v48, v53);
      if (*v48)
        goto LABEL_58;
      goto LABEL_60;
    case 17:
      v10 = operator new();
      *(_QWORD *)v10 = &off_24C4638D0;
      v54 = (int)v77;
      *(_QWORD *)(v10 + 16) = 0;
      *(_DWORD *)(v10 + 8) = v54;
      *(_QWORD *)(v10 + 32) = 0;
      *(_QWORD *)(v10 + 24) = 0;
      *(_BYTE *)(v10 + 40) = 1;
      *(_QWORD *)(v10 + 48) = 0;
      *(_DWORD *)(v10 + 56) = 0;
      *(_QWORD *)(v10 + 64) = 0;
      v22 = (const void **)(v10 + 64);
      *(_QWORD *)(v10 + 72) = CFSetCreateMutable(0, 0, MEMORY[0x24BDBD6B8]);
      v55 = *(_DWORD *)(v10 + 8);
      v56 = operator new();
      *(_DWORD *)v56 = v55;
      *(_BYTE *)(v56 + 4) = 0;
      *(_OWORD *)(v56 + 6) = 0u;
      *(_OWORD *)(v56 + 22) = 0u;
      *(_WORD *)(v56 + 38) = 0;
      *(_DWORD *)(v56 + 40) = 1065353216;
      *(_OWORD *)(v56 + 48) = 0u;
      *(_OWORD *)(v56 + 64) = 0u;
      *(_OWORD *)(v56 + 80) = 0u;
      *(_OWORD *)(v56 + 91) = 0u;
      *(_OWORD *)(v56 + 112) = 0u;
      *(_OWORD *)(v56 + 128) = 0u;
      *(_OWORD *)(v56 + 144) = 0u;
      sub_20B8E6890((uint64_t *)(v10 + 32), v56);
      v57 = sub_20B9C9A6C((uint64_t)&v77, *(_QWORD *)(v10 + 32));
      sub_20B8E699C((uint64_t *)(v10 + 16), v57);
      if (!*(_QWORD *)(v10 + 16))
        goto LABEL_60;
      if (v78)
        goto LABEL_61;
      v58 = operator new();
      v59 = *(_QWORD *)(v10 + 24);
      *(_QWORD *)(v10 + 24) = v58;
      if (!v59)
        goto LABEL_58;
      MEMORY[0x20BD39CB0](v59, 0xC400A2AC0F1);
      if (*(_QWORD *)(v10 + 24))
        goto LABEL_58;
      goto LABEL_60;
    case 18:
      v10 = operator new();
      *(_QWORD *)v10 = &off_24C463718;
      v60 = (int)v77;
      *(_QWORD *)(v10 + 16) = 0;
      *(_DWORD *)(v10 + 8) = v60;
      *(_QWORD *)(v10 + 32) = 0;
      *(_QWORD *)(v10 + 24) = 0;
      *(_BYTE *)(v10 + 40) = 1;
      *(_QWORD *)(v10 + 48) = 0;
      *(_DWORD *)(v10 + 56) = 0;
      *(_QWORD *)(v10 + 64) = 0;
      v22 = (const void **)(v10 + 64);
      *(_QWORD *)(v10 + 72) = CFSetCreateMutable(0, 0, MEMORY[0x24BDBD6B8]);
      v61 = *(_DWORD *)(v10 + 8);
      v62 = operator new();
      *(_DWORD *)v62 = v61;
      *(_BYTE *)(v62 + 4) = 0;
      *(_OWORD *)(v62 + 6) = 0u;
      *(_OWORD *)(v62 + 22) = 0u;
      *(_WORD *)(v62 + 38) = 0;
      *(_DWORD *)(v62 + 40) = 1065353216;
      *(_OWORD *)(v62 + 48) = 0u;
      *(_OWORD *)(v62 + 64) = 0u;
      *(_OWORD *)(v62 + 80) = 0u;
      *(_OWORD *)(v62 + 91) = 0u;
      *(_OWORD *)(v62 + 112) = 0u;
      *(_OWORD *)(v62 + 128) = 0u;
      *(_OWORD *)(v62 + 144) = 0u;
      sub_20B8E6890((uint64_t *)(v10 + 32), v62);
      v63 = sub_20B92DEFC((const __CFURL **)&v77, *(_QWORD *)(v10 + 32));
      sub_20B8E783C((uint64_t *)(v10 + 16), v63);
      if (!*(_QWORD *)(v10 + 16))
        goto LABEL_60;
      if (v78)
        goto LABEL_61;
      v64 = operator new();
      v65 = *(_QWORD *)(v10 + 24);
      *(_QWORD *)(v10 + 24) = v64;
      if (v65 && (MEMORY[0x20BD39CB0](v65, 0xC400A2AC0F1), !*(_QWORD *)(v10 + 24)))
      {
LABEL_60:
        *(_BYTE *)(v10 + 40) = 0;
      }
      else
      {
LABEL_58:
        Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
        v35 = v22;
LABEL_59:
        sub_20B8B035C(v35, Mutable);
      }
LABEL_61:
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10) & 1) != 0)
      {
        *v3 = v10;
        if (v79)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 240))(v10);
        v72 = sub_20B9A7C5C(0xDu);
        if (v8 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v73 = v72;
          if (os_signpost_enabled(v72))
          {
            *(_WORD *)buf = 0;
            _os_signpost_emit_with_name_impl(&dword_20B7F7000, v73, OS_SIGNPOST_INTERVAL_END, v6, "MecabraCreate", (const char *)&unk_20BA9505F, buf, 2u);
          }
        }
      }
      else
      {
        MEMORY[0x20BD39CB0](v3, 0x20C4093837F09);
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
LABEL_68:
        v74 = sub_20B9A7C5C(0xDu);
        if (v8 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v75 = v74;
          if (os_signpost_enabled(v74))
          {
            *(_DWORD *)buf = 67109120;
            v81 = v4;
            _os_signpost_emit_with_name_impl(&dword_20B7F7000, v75, OS_SIGNPOST_INTERVAL_END, v6, "MecabraCreate", "Failed for input method: %d", buf, 8u);
          }
        }
        v3 = 0;
      }
      sub_20B8E5C90(&v77);
      break;
    default:
      MEMORY[0x20BD39CB0](v3, 0x20C4093837F09);
      goto LABEL_68;
  }
  return v3;
}

void sub_20B8DDCD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  const void **v6;
  uint64_t *v7;
  uint64_t v9;
  va_list va;

  va_start(va, a3);
  sub_20B8B035C(v6, 0);
  sub_20B8E6890(v5, 0);
  sub_20B8E83C4(v4, 0);
  v9 = *v7;
  *v7 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  MEMORY[0x20BD39CB0](v3, 0x10E1C405DA12072);
  sub_20B8E5C90((const void **)va);
  _Unwind_Resume(a1);
}

_QWORD *MecabraCreateWithOptions(unsigned int a1, const void *a2, char a3)
{
  return MecabraCreateWithAdditionalDictionariesAndOptions(a1, a2, 0, a3);
}

uint64_t MecabraAnalyzeString(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  void *v7;
  uint64_t v8;
  int v10;
  _QWORD *v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v6 = sub_20B9A7C5C(2u);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    v10 = 134218242;
    v11 = a1;
    v12 = 2112;
    v13 = a2;
    _os_log_debug_impl(&dword_20B7F7000, v6, OS_LOG_TYPE_DEBUG, "[MecabraAnalyzeString] mecabra:%p string:%@", (uint8_t *)&v10, 0x16u);
    if (!a1)
      return 0;
  }
  else if (!a1)
  {
    return 0;
  }
  if (!*a1)
    return 0;
  v7 = (void *)MEMORY[0x20BD3A22C]();
  v8 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)*a1 + 32))(*a1, a2, a3, 0, 0, 0, 0);
  objc_autoreleasePoolPop(v7);
  return v8;
}

uint64_t MecabraAnalyzeStringWithContext(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  void *v11;
  NSObject *v12;
  os_signpost_id_t v13;
  char v14;
  NSObject *v15;
  NSObject *v16;
  NSObject *v17;
  NSObject *v18;
  void **v20;
  void *__p[2];
  char v22;
  uint64_t ptr;
  uint8_t buf[4];
  _QWORD *v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  void **v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  ptr = a3;
  if (!a1 || !*a1)
    return 0;
  if (a4)
    v7 = *a4;
  else
    v7 = 0;
  v9 = sub_20B9A7C5C(2u);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    sub_20B8DE2BC(__p, v7);
    v10 = sub_20B9A7C5C(2u);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      v20 = __p;
      if (v22 < 0)
        v20 = (void **)__p[0];
      *(_DWORD *)buf = 134218754;
      v25 = a1;
      v26 = 2112;
      v27 = a2;
      v28 = 2048;
      v29 = a3;
      v30 = 2080;
      v31 = v20;
      _os_log_debug_impl(&dword_20B7F7000, v10, OS_LOG_TYPE_DEBUG, "[MecabraAnalyzeStringWithContext] mecabra:%p string:%@ options:0x%lx context:%s", buf, 0x2Au);
    }
    if (v22 < 0)
      operator delete(__p[0]);
  }
  v11 = (void *)MEMORY[0x20BD3A22C]();
  v12 = sub_20B9A7C5C(0xDu);
  v13 = os_signpost_id_make_with_pointer(v12, &ptr);
  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a1 + 16))(*a1) == 1
    || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*a1 + 16))(*a1) == 17)
  {
    v14 = 1;
  }
  else
  {
    v15 = sub_20B9A7C5C(0xDu);
    if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v16 = v15;
      if (os_signpost_enabled(v15))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_20B7F7000, v16, OS_SIGNPOST_INTERVAL_BEGIN, v13, "MecabraAnalyzeStringWithContext", (const char *)&unk_20BA9505F, buf, 2u);
      }
    }
    v14 = 0;
  }
  v8 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)*a1 + 40))(*a1, a2, ptr, v7);
  if ((v14 & 1) == 0)
  {
    v17 = sub_20B9A7C5C(0xDu);
    if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v18 = v17;
      if (os_signpost_enabled(v17))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_20B7F7000, v18, OS_SIGNPOST_INTERVAL_END, v13, "MecabraAnalyzeStringWithContext", (const char *)&unk_20BA9505F, buf, 2u);
      }
    }
  }
  objc_autoreleasePoolPop(v11);
  return v8;
}

void sub_20B8DE298(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B8DE2BC(_QWORD *a1, uint64_t a2)
{
  CFIndex i;
  const __CFArray *Count;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  const __CFString *v12;
  char *v13;
  size_t v14;
  const __CFArray *v15;
  CFIndex j;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  const __CFString *v23;
  char *v24;
  size_t v25;
  const __CFString *v26;
  char *v27;
  size_t v28;
  const __CFString *v29;
  char *v30;
  _QWORD *v32;
  void **v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  void **v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  void **v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  void **v45;
  uint64_t v46;
  _QWORD *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  void *__p[2];
  unsigned __int8 v53;
  void *v54[2];
  unsigned __int8 v55;
  void *v56[2];
  unsigned __int8 v57;
  char *v58[2];
  uint64_t v59;
  _QWORD v60[10];
  char v61;
  uint64_t v62;
  char *v63;
  void *v64[2];
  unsigned __int8 v65;
  char *v66[2];
  uint64_t v67;
  _QWORD v68[10];
  char v69;
  uint64_t v70;
  char *__s[2];
  uint64_t v72;
  _QWORD v73[10];
  char v74;
  uint64_t v75;
  _QWORD v76[2];
  uint64_t v77;
  _QWORD v78[10];
  char v79;
  uint64_t v80;

  if (!a2)
    return sub_20B80BBD0(a1, "");
  sub_20B83BFEC((uint64_t)v76);
  for (i = 0; ; ++i)
  {
    Count = *(const __CFArray **)(a2 + 16);
    if (Count)
      Count = (const __CFArray *)CFArrayGetCount(Count);
    if (i >= (uint64_t)Count)
      break;
    v6 = (void *)sub_20B96AAF4(a2, i);
    v9 = objc_msgSend_rawCandidate(v6, v7, v8);
    v10 = (_QWORD *)v9;
    if (v9)
    {
      if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9))
        v11 = 40;
      else
        v11 = 24;
      v12 = (const __CFString *)(*(uint64_t (**)(_QWORD *))(*v10 + v11))(v10);
    }
    else
    {
      v12 = 0;
    }
    sub_20B8D154C(v12, __s);
    v13 = __s[0];
    v14 = strlen(__s[0]);
    sub_20B828F84(&v77, (uint64_t)__s[0], v14);
    if (v13)
      MEMORY[0x20BD39C80](v13, 0x1000C8077774924);
    v15 = *(const __CFArray **)(a2 + 16);
    if (v15)
      v15 = (const __CFArray *)CFArrayGetCount(v15);
    if (i < (uint64_t)v15 - 1)
    {
      LOBYTE(__s[0]) = 124;
      sub_20B828F84(&v77, (uint64_t)__s, 1);
    }
  }
  sub_20B83BFEC((uint64_t)__s);
  for (j = 0; j < CFArrayGetCount(*(CFArrayRef *)(a2 + 32)); ++j)
  {
    v17 = (void *)sub_20B96ABC8(a2, j);
    v20 = objc_msgSend_rawCandidate(v17, v18, v19);
    v21 = (_QWORD *)v20;
    if (v20)
    {
      if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20))
        v22 = 40;
      else
        v22 = 24;
      v23 = (const __CFString *)(*(uint64_t (**)(_QWORD *))(*v21 + v22))(v21);
    }
    else
    {
      v23 = 0;
    }
    sub_20B8D154C(v23, v66);
    v24 = v66[0];
    v25 = strlen(v66[0]);
    sub_20B828F84(&v72, (uint64_t)v66[0], v25);
    if (v24)
      MEMORY[0x20BD39C80](v24, 0x1000C8077774924);
    if (j < CFArrayGetCount(*(CFArrayRef *)(a2 + 32)) - 1)
    {
      LOBYTE(v66[0]) = 124;
      sub_20B828F84(&v72, (uint64_t)v66, 1);
    }
  }
  sub_20B83BFEC((uint64_t)v66);
  v26 = *(const __CFString **)(a2 + 88);
  if (v26)
  {
    sub_20B8D154C(v26, v58);
    v27 = v58[0];
    v28 = strlen(v58[0]);
    sub_20B828F84(&v67, (uint64_t)v58[0], v28);
    if (v27)
      MEMORY[0x20BD39C80](v27, 0x1000C8077774924);
  }
  v29 = *(const __CFString **)(a2 + 72);
  if (v29)
  {
    sub_20B8D154C(v29, &v63);
    v30 = v63;
  }
  else
  {
    v30 = "N/A";
  }
  sub_20B80BBD0(v64, v30);
  if (v29 && v30)
    MEMORY[0x20BD39C80](v30, 0x1000C8077774924);
  sub_20B83BFEC((uint64_t)v58);
  v32 = sub_20B828F84(&v59, (uint64_t)"(left[", 6);
  sub_20B871648((uint64_t)v78, v56);
  if ((v57 & 0x80u) == 0)
    v33 = v56;
  else
    v33 = (void **)v56[0];
  if ((v57 & 0x80u) == 0)
    v34 = v57;
  else
    v34 = (uint64_t)v56[1];
  v35 = sub_20B828F84(v32, (uint64_t)v33, v34);
  v36 = sub_20B828F84(v35, (uint64_t)"] inline[", 9);
  sub_20B871648((uint64_t)v73, v54);
  if ((v55 & 0x80u) == 0)
    v37 = v54;
  else
    v37 = (void **)v54[0];
  if ((v55 & 0x80u) == 0)
    v38 = v55;
  else
    v38 = (uint64_t)v54[1];
  v39 = sub_20B828F84(v36, (uint64_t)v37, v38);
  v40 = sub_20B828F84(v39, (uint64_t)"] right[", 8);
  sub_20B871648((uint64_t)v68, __p);
  if ((v53 & 0x80u) == 0)
    v41 = __p;
  else
    v41 = (void **)__p[0];
  if ((v53 & 0x80u) == 0)
    v42 = v53;
  else
    v42 = (uint64_t)__p[1];
  v43 = sub_20B828F84(v40, (uint64_t)v41, v42);
  v44 = sub_20B828F84(v43, (uint64_t)"] App[", 6);
  if ((v65 & 0x80u) == 0)
    v45 = v64;
  else
    v45 = (void **)v64[0];
  if ((v65 & 0x80u) == 0)
    v46 = v65;
  else
    v46 = (uint64_t)v64[1];
  v47 = sub_20B828F84(v44, (uint64_t)v45, v46);
  sub_20B828F84(v47, (uint64_t)"])", 2);
  if ((char)v53 < 0)
    operator delete(__p[0]);
  if ((char)v55 < 0)
    operator delete(v54[0]);
  if ((char)v57 < 0)
    operator delete(v56[0]);
  sub_20B871648((uint64_t)v60, a1);
  v48 = (char *)*MEMORY[0x24BEDB7F0];
  v58[0] = v48;
  v50 = *(char **)(MEMORY[0x24BEDB7F0] + 64);
  v49 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(char **)((char *)v58 + *((_QWORD *)v48 - 3)) = v50;
  v51 = MEMORY[0x24BEDB848];
  v59 = v49;
  v60[0] = MEMORY[0x24BEDB848] + 16;
  if (v61 < 0)
    operator delete((void *)v60[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD39C2C](&v62);
  if ((char)v65 < 0)
    operator delete(v64[0]);
  v66[0] = v48;
  *(char **)((char *)v66 + *((_QWORD *)v48 - 3)) = v50;
  v67 = v49;
  v68[0] = v51 + 16;
  if (v69 < 0)
    operator delete((void *)v68[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD39C2C](&v70);
  __s[0] = v48;
  *(char **)((char *)__s + *((_QWORD *)v48 - 3)) = v50;
  v72 = v49;
  v73[0] = v51 + 16;
  if (v74 < 0)
    operator delete((void *)v73[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD39C2C](&v75);
  v76[0] = v48;
  *(_QWORD *)((char *)v76 + *((_QWORD *)v48 - 3)) = v50;
  v77 = v49;
  v78[0] = v51 + 16;
  if (v79 < 0)
    operator delete((void *)v78[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return (_QWORD *)MEMORY[0x20BD39C2C](&v80);
}

void sub_20B8DE880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,char a58)
{
  sub_20B83C118((uint64_t)&a58);
  sub_20B83C118((uint64_t)&STACK[0x2A0]);
  sub_20B83C118((uint64_t)&STACK[0x3B8]);
  _Unwind_Resume(a1);
}

uint64_t MecabraAnalyzeGesturesWithContext(_QWORD *a1, const __CFArray *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  void *v11;
  NSObject *v12;
  os_signpost_id_t v13;
  NSObject *v14;
  NSObject *v15;
  NSObject *v16;
  NSObject *v17;
  CFIndex Count;
  void **v20;
  void *__p[2];
  char v22;
  uint64_t ptr;
  uint8_t buf[4];
  _QWORD *v25;
  __int16 v26;
  CFIndex v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  void **v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  ptr = a3;
  if (!a1 || !*a1)
    return 0;
  if (a4)
    v7 = *a4;
  else
    v7 = 0;
  v9 = sub_20B9A7C5C(2u);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    sub_20B8DE2BC(__p, v7);
    v10 = sub_20B9A7C5C(2u);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      Count = CFArrayGetCount(a2);
      v20 = __p;
      if (v22 < 0)
        v20 = (void **)__p[0];
      *(_DWORD *)buf = 134218754;
      v25 = a1;
      v26 = 2048;
      v27 = Count;
      v28 = 2048;
      v29 = a3;
      v30 = 2080;
      v31 = v20;
      _os_log_debug_impl(&dword_20B7F7000, v10, OS_LOG_TYPE_DEBUG, "[MecabraAnalyzeGesturesWithContext] mecabra:%p gestures:%ld options:0x%lx context:%s", buf, 0x2Au);
    }
    if (v22 < 0)
      operator delete(__p[0]);
  }
  v11 = (void *)MEMORY[0x20BD3A22C]();
  v12 = sub_20B9A7C5C(0xDu);
  v13 = os_signpost_id_make_with_pointer(v12, &ptr);
  v14 = sub_20B9A7C5C(0xDu);
  if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v15 = v14;
    if (os_signpost_enabled(v14))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_20B7F7000, v15, OS_SIGNPOST_INTERVAL_BEGIN, v13, "MecabraAnalyzeGesturesWithContext", (const char *)&unk_20BA9505F, buf, 2u);
    }
  }
  v8 = (*(uint64_t (**)(_QWORD, const __CFArray *, uint64_t, uint64_t))(*(_QWORD *)*a1 + 48))(*a1, a2, ptr, v7);
  v16 = sub_20B9A7C5C(0xDu);
  if (v13 - 1 < 0xFFFFFFFFFFFFFFFELL)
  {
    v17 = v16;
    if (os_signpost_enabled(v16))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_20B7F7000, v17, OS_SIGNPOST_INTERVAL_END, v13, "MecabraAnalyzeGesturesWithContext", (const char *)&unk_20BA9505F, buf, 2u);
    }
  }
  objc_autoreleasePoolPop(v11);
  return v8;
}

void sub_20B8DEC08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MecabraCreateRemainingGestures(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  void *v9;
  uint64_t v10;

  if (!a1 || !*a1)
    return 0;
  if (a4)
    v7 = *a4;
  else
    v7 = 0;
  v9 = (void *)MEMORY[0x20BD3A22C]();
  v10 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)*a1 + 56))(*a1, a2, a3, v7);
  objc_autoreleasePoolPop(v9);
  return v10;
}

uint64_t MecabraGetNextCandidate(_QWORD *a1)
{
  void *v2;
  uint64_t v3;

  if (!a1 || !*a1)
    return 0;
  v2 = (void *)MEMORY[0x20BD3A22C]();
  v3 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 64))(*a1);
  objc_autoreleasePoolPop(v2);
  return v3;
}

uint64_t MecabraDeclareEndOfSentence(_QWORD *a1, uint64_t *a2)
{
  NSObject *v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  __int16 v9;
  uint64_t *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20B9A7C5C(2u);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    v7 = 134218240;
    v8 = a1;
    v9 = 2048;
    v10 = a2;
    _os_log_debug_impl(&dword_20B7F7000, v4, OS_LOG_TYPE_DEBUG, "[MecabraDeclareEndOfSentence] mecabra:%p context:%p", (uint8_t *)&v7, 0x16u);
    if (a1)
      goto LABEL_3;
    return 0;
  }
  if (!a1)
    return 0;
LABEL_3:
  result = 0;
  if (a2 && *a1)
  {
    v6 = *a2;
    if (v6)
    {
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 80))(*a1, v6);
      sub_20B96ADBC(v6);
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t MecabraAcceptInlineCandidates(uint64_t result, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  NSObject *v5;
  CFIndex i;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  const __CFString *v13;
  uint64_t v14;
  size_t v15;
  NSObject *v16;
  uint64_t v17;
  void **v18;
  void *v19[2];
  char v20;
  _QWORD v21[2];
  uint64_t v22;
  _QWORD v23[10];
  char v24;
  uint64_t v25;
  _BYTE buf[12];
  __int16 v27;
  uint64_t *v28;
  __int16 v29;
  void **v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  if (result)
  {
    v3 = (_QWORD *)result;
    result = 0;
    if (a2)
    {
      if (*v3)
      {
        v4 = *a2;
        if (*a2)
        {
          v5 = sub_20B9A7C5C(2u);
          if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
          {
            sub_20B83BFEC((uint64_t)v21);
            for (i = 0; i < CFArrayGetCount(*(CFArrayRef *)(v4 + 32)); ++i)
            {
              v7 = (void *)sub_20B96ABC8(v4, i);
              v10 = objc_msgSend_rawCandidate(v7, v8, v9);
              v11 = (_QWORD *)v10;
              if (v10)
              {
                if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10))
                  v12 = 40;
                else
                  v12 = 24;
                v13 = (const __CFString *)(*(uint64_t (**)(_QWORD *))(*v11 + v12))(v11);
              }
              else
              {
                v13 = 0;
              }
              sub_20B8D154C(v13, (char **)buf);
              v14 = *(_QWORD *)buf;
              v15 = strlen(*(const char **)buf);
              sub_20B828F84(&v22, *(uint64_t *)buf, v15);
              if (v14)
                MEMORY[0x20BD39C80](v14, 0x1000C8077774924);
              if (i < CFArrayGetCount(*(CFArrayRef *)(v4 + 32)) - 1)
              {
                buf[0] = 124;
                sub_20B828F84(&v22, (uint64_t)buf, 1);
              }
            }
            v16 = sub_20B9A7C5C(2u);
            if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
            {
              sub_20B871648((uint64_t)v23, v19);
              v18 = v20 >= 0 ? v19 : (void **)v19[0];
              *(_DWORD *)buf = 134218498;
              *(_QWORD *)&buf[4] = v3;
              v27 = 2048;
              v28 = a2;
              v29 = 2080;
              v30 = v18;
              _os_log_debug_impl(&dword_20B7F7000, v16, OS_LOG_TYPE_DEBUG, "[MecabraAcceptInlineCandidates] mecabra:%p context:%p candidates:%s", buf, 0x20u);
              if (v20 < 0)
                operator delete(v19[0]);
            }
            v21[0] = *MEMORY[0x24BEDB7F0];
            v17 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
            *(_QWORD *)((char *)v21 + *(_QWORD *)(v21[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
            v22 = v17;
            v23[0] = MEMORY[0x24BEDB848] + 16;
            if (v24 < 0)
              operator delete((void *)v23[8]);
            std::streambuf::~streambuf();
            std::iostream::~basic_iostream();
            MEMORY[0x20BD39C2C](&v25);
          }
          (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 88))(*v3, v4);
          sub_20B96AD2C(v4);
          return 1;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

void sub_20B8DF0C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20B83C118((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t MecabraCandidateGetSurface(void *a1, const char *a2, uint64_t a3)
{
  uint64_t result;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  result = objc_msgSend_rawCandidate(a1, a2, a3);
  if (result)
  {
    v4 = (_QWORD *)result;
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    v6 = 40;
    if (!v5)
      v6 = 24;
    return (*(uint64_t (**)(_QWORD *))(*v4 + v6))(v4);
  }
  return result;
}

uint64_t MecabraRevertLearningForCandidate(_QWORD *a1, _QWORD *a2, void *a3)
{
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  __int16 v16;
  _QWORD *v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v6 = sub_20B9A7C5C(2u);
  if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    if (a1)
      goto LABEL_3;
    return 0;
  }
  v10 = objc_msgSend_rawCandidate(a3, v7, v8);
  if (v10)
  {
    v11 = (_QWORD *)v10;
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
    v13 = 40;
    if (!v12)
      v13 = 24;
    v10 = (*(uint64_t (**)(_QWORD *))(*v11 + v13))(v11);
  }
  v14 = 134218498;
  v15 = a1;
  v16 = 2048;
  v17 = a2;
  v18 = 2112;
  v19 = v10;
  _os_log_debug_impl(&dword_20B7F7000, v6, OS_LOG_TYPE_DEBUG, "[MecabraRevertLearningForCandidate] mecabra:%p context:%p candidate:%@", (uint8_t *)&v14, 0x20u);
  if (!a1)
    return 0;
LABEL_3:
  result = 0;
  if (a3 && a2 && *a1)
  {
    if (*a2)
      return (*(uint64_t (**)(_QWORD, _QWORD, void *))(*(_QWORD *)*a1 + 96))(*a1, *a2, a3);
    return 0;
  }
  return result;
}

void MecabraCancelAnalysis(_QWORD *a1)
{
  NSObject *v2;
  int v3;
  _QWORD *v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v2 = sub_20B9A7C5C(2u);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    v3 = 134217984;
    v4 = a1;
    _os_log_debug_impl(&dword_20B7F7000, v2, OS_LOG_TYPE_DEBUG, "[MecabraCancelAnalysis] mecabra:%p", (uint8_t *)&v3, 0xCu);
    if (!a1)
      return;
  }
  else if (!a1)
  {
    return;
  }
  if (*a1)
    (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 72))(*a1);
}

uint64_t MecabraAcceptCandidate(_QWORD *a1, void *a2, int a3)
{
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v6 = sub_20B9A7C5C(2u);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    v11 = objc_msgSend_rawCandidate(a2, v7, v8);
    if (v11)
    {
      v12 = (_QWORD *)v11;
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
      v14 = 40;
      if (!v13)
        v14 = 24;
      v11 = (*(uint64_t (**)(_QWORD *))(*v12 + v14))(v12);
    }
    v15 = 134218498;
    v16 = a1;
    v17 = 2112;
    v18 = v11;
    v19 = 1024;
    v20 = a3;
    _os_log_debug_impl(&dword_20B7F7000, v6, OS_LOG_TYPE_DEBUG, "[MecabraAcceptCandidate] mecabra:%p candidate.surface:%@ isPartial%d", (uint8_t *)&v15, 0x1Cu);
    if (!a1)
      return 0;
  }
  else if (!a1)
  {
    return 0;
  }
  if (*a1)
  {
    if (!a2)
      return (*(uint64_t (**)(_QWORD, void *, BOOL))(*(_QWORD *)*a1 + 104))(*a1, a2, a3 != 0);
    result = objc_msgSend_rawCandidate(a2, v7, v8);
    if (!result)
      return result;
    v10 = result;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)result + 72))(result) == 1
      || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 72))(v10) == 7)
    {
      return (*(uint64_t (**)(_QWORD, void *, BOOL))(*(_QWORD *)*a1 + 104))(*a1, a2, a3 != 0);
    }
  }
  return 0;
}

uint64_t MecabraCancelLastAcceptedCandidate(uint64_t *a1)
{
  NSObject *v2;
  uint64_t result;
  int v4;
  uint64_t *v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v2 = sub_20B9A7C5C(2u);
  if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    if (a1)
      goto LABEL_3;
    return 0;
  }
  v4 = 134217984;
  v5 = a1;
  _os_log_debug_impl(&dword_20B7F7000, v2, OS_LOG_TYPE_DEBUG, "[MecabraCancelLastAcceptedCandidate] mecabra:%p", (uint8_t *)&v4, 0xCu);
  if (!a1)
    return 0;
LABEL_3:
  result = *a1;
  if (*a1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 112))(result);
  return result;
}

uint64_t MecabraSetAdditionalConversionDictionaries(_QWORD *a1, uint64_t a2)
{
  NSObject *v4;
  void *v5;
  uint64_t v6;
  int v8;
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20B9A7C5C(2u);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    v8 = 134217984;
    v9 = a1;
    _os_log_debug_impl(&dword_20B7F7000, v4, OS_LOG_TYPE_DEBUG, "[MecabraSetAdditionalConversionDictionaries] mecabra:%p", (uint8_t *)&v8, 0xCu);
    if (!a1)
      return 0;
  }
  else if (!a1)
  {
    return 0;
  }
  if (!*a1)
    return 0;
  v5 = (void *)MEMORY[0x20BD3A22C]();
  v6 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 240))(*a1, a2);
  objc_autoreleasePoolPop(v5);
  return v6;
}

uint64_t MecabraSetAssetDataItemsForType(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  void *v7;
  uint64_t v8;
  int v10;
  _QWORD *v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v6 = sub_20B9A7C5C(2u);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    v10 = 134218498;
    v11 = a1;
    v12 = 2048;
    v13 = a2;
    v14 = 2112;
    v15 = a3;
    _os_log_debug_impl(&dword_20B7F7000, v6, OS_LOG_TYPE_DEBUG, "[MecabraSetAssetDataItemsForType] mecabra:%p type:%ld dataItems:%@", (uint8_t *)&v10, 0x20u);
    if (!a1)
      return 0;
  }
  else if (!a1)
  {
    return 0;
  }
  if (!*a1)
    return 0;
  v7 = (void *)MEMORY[0x20BD3A22C]();
  v8 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a1 + 248))(*a1, a2, a3);
  objc_autoreleasePoolPop(v7);
  return v8;
}

__CFArray *MecabraCopyLearningDictionaryNames(char *a1)
{
  __CFArray *Mutable;
  __CFArray *v3;
  const __CFArray *v4;
  CFRange v6;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  switch(sub_20B8D1244(a1))
  {
    case 1u:
      v3 = sub_20B97A708();
      goto LABEL_6;
    case 2u:
      v3 = sub_20B975F7C();
      goto LABEL_6;
    case 4u:
      v3 = sub_20B977048();
      goto LABEL_6;
    case 5u:
      v3 = sub_20B97734C();
LABEL_6:
      v4 = v3;
      if (v3)
      {
        v6.length = CFArrayGetCount(v3);
        v6.location = 0;
        CFArrayAppendArray(Mutable, v4, v6);
        CFRelease(v4);
      }
      break;
    default:
      return Mutable;
  }
  return Mutable;
}

void MecabraSaveLearningDictionaries(_QWORD *a1)
{
  NSObject *v2;
  int v3;
  _QWORD *v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v2 = sub_20B9A7C5C(2u);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    v3 = 134217984;
    v4 = a1;
    _os_log_debug_impl(&dword_20B7F7000, v2, OS_LOG_TYPE_DEBUG, "[MecabraSaveLearningDictionaries] mecabra:%p", (uint8_t *)&v3, 0xCu);
    if (!a1)
      return;
  }
  else if (!a1)
  {
    return;
  }
  if (*a1)
    (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 120))(*a1);
}

void MecabraClearLearningDictionaries(_QWORD *a1)
{
  NSObject *v2;
  int v3;
  _QWORD *v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v2 = sub_20B9A7C5C(2u);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    v3 = 134217984;
    v4 = a1;
    _os_log_debug_impl(&dword_20B7F7000, v2, OS_LOG_TYPE_DEBUG, "[MecabraClearLearningDictionaries] mecabra:%p", (uint8_t *)&v3, 0xCu);
    if (!a1)
      return;
  }
  else if (!a1)
  {
    return;
  }
  if (*a1)
    (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 128))(*a1);
}

unsigned __int8 *MecabraResetLearningDictionaries(int a1, const __CFURL *a2)
{
  NSObject *v4;
  CFStringRef v6;
  int v7;
  CFStringRef v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20B9A7C5C(2u);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    if (a2)
      v6 = CFURLGetString(a2);
    else
      v6 = 0;
    v7 = 138412290;
    v8 = v6;
    _os_log_debug_impl(&dword_20B7F7000, v4, OS_LOG_TYPE_DEBUG, "[MecabraResetLearningDictionaries] learningDictionaryDirectory:%@", (uint8_t *)&v7, 0xCu);
  }
  sub_20B9731AC((uint64_t)a2);
  return sub_20B93E844(a1);
}

void MecabraWaitForAsyncDataLoading(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  if (a1)
  {
    v1 = *a1;
    if (v1)
    {
      v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
      v3 = sub_20B8D0E3C(v2);
      MecabraWaitForLanguageSpecificAsyncDataLoading(v3);
    }
  }
}

void MecabraWaitForLanguageSpecificAsyncDataLoading(unsigned int a1)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  uint8_t buf[8];
  std::__shared_weak_count *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v2 = sub_20B9A7C5C(2u);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = a1;
    _os_log_debug_impl(&dword_20B7F7000, v2, OS_LOG_TYPE_DEBUG, "[MecabraWaitForLanguageSpecificAsyncDataLoading] language: %u", buf, 8u);
  }
  sub_20BA255D8((uint64_t *)buf);
  sub_20B8ED9E8(*(uint64_t *)buf, 0xFFFFFFFFFFFFFFFFLL, 0);
  sub_20BA25814(&v22);
  sub_20B8ED9E8(v22, 0xFFFFFFFFFFFFFFFFLL, 0);
  sub_20B873E04(&v20);
  sub_20B875584(v20, 0xFFFFFFFFFFFFFFFFLL, 0);
  if (a1 - 1 <= 1)
  {
    sub_20B873F7C(a1, 0, 0, &v18);
    sub_20B875584(v18, 0xFFFFFFFFFFFFFFFFLL, 0);
    v3 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    if (a1 == 1)
    {
      sub_20B925260(1u, 0, &v18);
      sub_20B8EDE64(v18, 0xFFFFFFFFFFFFFFFFLL, 0);
      v6 = v19;
      if (v19)
      {
        v7 = (unint64_t *)&v19->__shared_owners_;
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
  }
  v9 = v21;
  if (v21)
  {
    v10 = (unint64_t *)&v21->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v23;
  if (v23)
  {
    v13 = (unint64_t *)&v23->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v25;
  if (v25)
  {
    v16 = (unint64_t *)&v25->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_20B8DFD3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  sub_20B811FE4((uint64_t)&a9);
  sub_20B811FE4((uint64_t)&a11);
  sub_20B811FE4((uint64_t)&a13);
  sub_20B811FE4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_20B8DFDA0()
{
  JUMPOUT(0x20B8DFD98);
}

uint64_t MecabraCreateSyllableSequences(_QWORD *a1, uint64_t a2)
{
  if (a1 && a2 >= 1)
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 392))(*a1);
  else
    return 0;
}

void MecabraSetAddressBookNamePhoneticPairs(_QWORD *a1, CFArrayRef theArray)
{
  CFIndex Count;
  NSObject *v5;
  NSObject *v6;
  os_signpost_id_t v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  CFIndex ptr;
  uint8_t buf[4];
  _QWORD *v14;
  __int16 v15;
  CFIndex v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (theArray)
    Count = CFArrayGetCount(theArray);
  else
    Count = 0;
  ptr = Count;
  v5 = sub_20B9A7C5C(2u);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134218240;
    v14 = a1;
    v15 = 2048;
    v16 = Count;
    _os_log_debug_impl(&dword_20B7F7000, v5, OS_LOG_TYPE_DEBUG, "[MecabraSetAddressBookNamePhoneticPairs] mecabra:%p size:%ld", buf, 0x16u);
    if (!a1)
      return;
  }
  else if (!a1)
  {
    return;
  }
  if (*a1)
  {
    v6 = sub_20B9A7C5C(0xDu);
    v7 = os_signpost_id_make_with_pointer(v6, &ptr);
    v8 = sub_20B9A7C5C(0xDu);
    if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v9 = v8;
      if (os_signpost_enabled(v8))
      {
        *(_DWORD *)buf = 134217984;
        v14 = (_QWORD *)ptr;
        _os_signpost_emit_with_name_impl(&dword_20B7F7000, v9, OS_SIGNPOST_INTERVAL_BEGIN, v7, "SetAddressBook", "Address book reset (%ld items).", buf, 0xCu);
      }
    }
    (*(void (**)(_QWORD, CFArrayRef))(*(_QWORD *)*a1 + 144))(*a1, theArray);
    v10 = sub_20B9A7C5C(0xDu);
    if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v11 = v10;
      if (os_signpost_enabled(v10))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_20B7F7000, v11, OS_SIGNPOST_INTERVAL_END, v7, "SetAddressBook", (const char *)&unk_20BA9505F, buf, 2u);
      }
    }
  }
}

void MecabraSetUserWordKeyPairs(_QWORD *a1, CFArrayRef theArray)
{
  CFIndex Count;
  NSObject *v5;
  NSObject *v6;
  os_signpost_id_t v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  CFIndex ptr;
  uint8_t buf[4];
  _QWORD *v14;
  __int16 v15;
  CFIndex v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (theArray)
    Count = CFArrayGetCount(theArray);
  else
    Count = 0;
  ptr = Count;
  v5 = sub_20B9A7C5C(2u);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134218240;
    v14 = a1;
    v15 = 2048;
    v16 = Count;
    _os_log_debug_impl(&dword_20B7F7000, v5, OS_LOG_TYPE_DEBUG, "[MecabraSetUserWordKeyPairs] mecabra:%p size:%ld", buf, 0x16u);
    if (!a1)
      return;
  }
  else if (!a1)
  {
    return;
  }
  if (*a1)
  {
    v6 = sub_20B9A7C5C(0xDu);
    v7 = os_signpost_id_make_with_pointer(v6, &ptr);
    v8 = sub_20B9A7C5C(0xDu);
    if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v9 = v8;
      if (os_signpost_enabled(v8))
      {
        *(_DWORD *)buf = 134217984;
        v14 = (_QWORD *)ptr;
        _os_signpost_emit_with_name_impl(&dword_20B7F7000, v9, OS_SIGNPOST_INTERVAL_BEGIN, v7, "SetUserWord", "User word reset (%ld items).", buf, 0xCu);
      }
    }
    (*(void (**)(_QWORD, CFArrayRef))(*(_QWORD *)*a1 + 152))(*a1, theArray);
    v10 = sub_20B9A7C5C(0xDu);
    if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v11 = v10;
      if (os_signpost_enabled(v10))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_20B7F7000, v11, OS_SIGNPOST_INTERVAL_END, v7, "SetUserWord", (const char *)&unk_20BA9505F, buf, 2u);
      }
    }
  }
}

void MecabraSetSupplementalLexiconEntries(_QWORD *a1, CFArrayRef theArray)
{
  CFIndex Count;
  NSObject *v5;
  int v6;
  _QWORD *v7;
  __int16 v8;
  CFIndex v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (theArray)
    Count = CFArrayGetCount(theArray);
  else
    Count = 0;
  v5 = sub_20B9A7C5C(2u);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    v6 = 134218240;
    v7 = a1;
    v8 = 2048;
    v9 = Count;
    _os_log_debug_impl(&dword_20B7F7000, v5, OS_LOG_TYPE_DEBUG, "[MecabraSetSupplementalLexiconEntries] mecabra:%p size:%ld", (uint8_t *)&v6, 0x16u);
    if (!a1)
      return;
  }
  else if (!a1)
  {
    return;
  }
  if (*a1)
    (*(void (**)(_QWORD, CFArrayRef))(*(_QWORD *)*a1 + 400))(*a1, theArray);
}

uint64_t MecabraFindSupplementalLexiconCandidatesWithinContext(uint64_t result, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  NSObject *v4;
  NSObject *v5;
  void **v6;
  void *__p[2];
  char v8;
  uint8_t buf[4];
  _QWORD *v10;
  __int16 v11;
  void **v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (result)
  {
    v2 = (_QWORD *)result;
    result = 0;
    if (a2)
    {
      if (*v2)
      {
        v3 = *a2;
        v4 = sub_20B9A7C5C(2u);
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
        {
          sub_20B8DE2BC(__p, v3);
          v5 = sub_20B9A7C5C(2u);
          if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
          {
            v6 = __p;
            if (v8 < 0)
              v6 = (void **)__p[0];
            *(_DWORD *)buf = 134218242;
            v10 = v2;
            v11 = 2080;
            v12 = v6;
            _os_log_debug_impl(&dword_20B7F7000, v5, OS_LOG_TYPE_DEBUG, "[MecabraFindSupplementalLexiconCandidatesWithinContext] mecabra:%p context:%s", buf, 0x16u);
          }
          if (v8 < 0)
            operator delete(__p[0]);
        }
        return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v2 + 408))(*v2, v3);
      }
    }
  }
  return result;
}

void sub_20B8E0370(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MecabraPreheatResources(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = sub_20B9A7C5C(2u);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    v9 = 134217984;
    v10 = a1;
    _os_log_debug_impl(&dword_20B7F7000, v2, OS_LOG_TYPE_DEBUG, "[MecabraPreheatResources] mecabra:%p", (uint8_t *)&v9, 0xCu);
    if (!a1)
      return;
  }
  else if (!a1)
  {
    return;
  }
  if (*a1)
  {
    v3 = sub_20B9A7C5C(0xDu);
    v4 = os_signpost_id_make_with_pointer(v3, a1);
    v5 = sub_20B9A7C5C(0xDu);
    if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v6 = v5;
      if (os_signpost_enabled(v5))
      {
        LOWORD(v9) = 0;
        _os_signpost_emit_with_name_impl(&dword_20B7F7000, v6, OS_SIGNPOST_INTERVAL_BEGIN, v4, "MecabraPreheatResources", (const char *)&unk_20BA9505F, (uint8_t *)&v9, 2u);
      }
    }
    (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 312))(*a1);
    v7 = sub_20B9A7C5C(0xDu);
    if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v8 = v7;
      if (os_signpost_enabled(v7))
      {
        LOWORD(v9) = 0;
        _os_signpost_emit_with_name_impl(&dword_20B7F7000, v8, OS_SIGNPOST_INTERVAL_END, v4, "MecabraPreheatResources", (const char *)&unk_20BA9505F, (uint8_t *)&v9, 2u);
      }
    }
  }
}

void MecabraHandleMemoryPressure(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  os_signpost_id_t v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  unsigned int ptr;
  uint8_t buf[4];
  _BYTE v15[14];
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  ptr = a2;
  v6 = sub_20B9A7C5C(2u);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134218496;
    *(_QWORD *)v15 = a1;
    *(_WORD *)&v15[8] = 1024;
    *(_DWORD *)&v15[10] = a2;
    v16 = 2048;
    v17 = a3;
    _os_log_debug_impl(&dword_20B7F7000, v6, OS_LOG_TYPE_DEBUG, "[MecabraHandleMemoryPressure] mecabra:%p level:%uld, excessMemoryInBytes:%ld", buf, 0x1Cu);
    if (!a1)
      return;
  }
  else if (!a1)
  {
    return;
  }
  if (*a1)
  {
    v7 = sub_20B9A7C5C(0xDu);
    v8 = os_signpost_id_make_with_pointer(v7, &ptr);
    v9 = sub_20B9A7C5C(0xDu);
    if (v8 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v10 = v9;
      if (os_signpost_enabled(v9))
      {
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)v15 = ptr;
        *(_WORD *)&v15[4] = 2048;
        *(_QWORD *)&v15[6] = a3;
        _os_signpost_emit_with_name_impl(&dword_20B7F7000, v10, OS_SIGNPOST_INTERVAL_BEGIN, v8, "MecabraHandleMemoryPressure", "level: %d, excessMemoryInBytes: %ld", buf, 0x12u);
      }
    }
    (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)*a1 + 320))(*a1, ptr, a3);
    v11 = sub_20B9A7C5C(0xDu);
    if (v8 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v12 = v11;
      if (os_signpost_enabled(v11))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_20B7F7000, v12, OS_SIGNPOST_INTERVAL_END, v8, "MecabraHandleMemoryPressure", (const char *)&unk_20BA9505F, buf, 2u);
      }
    }
  }
}

void MecabraRelease(_QWORD *a1)
{
  NSObject *v2;
  int v3;
  _QWORD *v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v2 = sub_20B9A7C5C(2u);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    v3 = 134217984;
    v4 = a1;
    _os_log_debug_impl(&dword_20B7F7000, v2, OS_LOG_TYPE_DEBUG, "[MecabraRelease] mecabra:%p", (uint8_t *)&v3, 0xCu);
    if (!a1)
      return;
  }
  else if (!a1)
  {
    return;
  }
  if (*a1)
  {
    (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 160))(*a1);
    if (*a1)
      (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 8))(*a1);
  }
  MEMORY[0x20BD39CB0](a1, 0x20C4093837F09);
}

uint64_t MecabraPredictionAnalyze(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v10;
  uint64_t v11;

  if (!a1 || !*a1)
    return 0;
  v10 = (void *)MEMORY[0x20BD3A22C]();
  v11 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)*a1 + 352))(*a1, a2, a3, a4, a5);
  objc_autoreleasePoolPop(v10);
  return v11;
}

uint64_t MecabraPredictionAnalyzeWithContext(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  os_signpost_id_t v12;
  NSObject *v13;
  NSObject *v14;
  uint64_t v15;
  NSObject *v16;
  NSObject *v17;
  uint64_t ptr;
  uint8_t buf[4];
  _QWORD *v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  ptr = a4;
  v8 = sub_20B9A7C5C(2u);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134218240;
    v21 = a1;
    v22 = 2048;
    v23 = a4;
    _os_log_debug_impl(&dword_20B7F7000, v8, OS_LOG_TYPE_DEBUG, "[MecabraPredictionAnalyzeWithContext] mecabra:%p options:0x%lx", buf, 0x16u);
    if (!a1)
      return 0;
  }
  else if (!a1)
  {
    return 0;
  }
  if (!*a1)
    return 0;
  v9 = (void *)MEMORY[0x20BD3A22C]();
  if (a2)
    v10 = *a2;
  else
    v10 = 0;
  v11 = sub_20B9A7C5C(0xDu);
  v12 = os_signpost_id_make_with_pointer(v11, &ptr);
  v13 = sub_20B9A7C5C(0xDu);
  if (v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v14 = v13;
    if (os_signpost_enabled(v13))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_20B7F7000, v14, OS_SIGNPOST_INTERVAL_BEGIN, v12, "MecabraPredictionAnalyzeWithContext", (const char *)&unk_20BA9505F, buf, 2u);
    }
  }
  v15 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)*a1 + 360))(*a1, v10, a3, ptr);
  v16 = sub_20B9A7C5C(0xDu);
  if (v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v17 = v16;
    if (os_signpost_enabled(v16))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_20B7F7000, v17, OS_SIGNPOST_INTERVAL_END, v12, "MecabraPredictionAnalyzeWithContext", (const char *)&unk_20BA9505F, buf, 2u);
    }
  }
  objc_autoreleasePoolPop(v9);
  return v15;
}

uint64_t MecabraPredictionAcceptCandidate(uint64_t result)
{
  if (result)
  {
    result = *(_QWORD *)result;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 368))(result);
  }
  return result;
}

uint64_t MecabraPredictionGetNextCandidate(uint64_t *a1)
{
  uint64_t v1;

  if (a1 && (v1 = *a1) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 376))(v1);
  else
    return 0;
}

uint64_t MecabraCreateCandidateFromContextString(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t result;
  int v8;
  _QWORD *v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v6 = sub_20B9A7C5C(2u);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    v8 = 134218498;
    v9 = a1;
    v10 = 2112;
    v11 = a2;
    v12 = 1024;
    v13 = a3;
    _os_log_debug_impl(&dword_20B7F7000, v6, OS_LOG_TYPE_DEBUG, "[MecabraCreateCandidateFromContextString] mecabra:%p string:[%@] isRightContext:%d", (uint8_t *)&v8, 0x1Cu);
  }
  result = 0;
  if (a1 && a2)
  {
    if (*a1)
      return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a1 + 336))(*a1, a2, a3);
  }
  return result;
}

uint64_t MecabraGetLengthForContextString(uint64_t result, const __CFString *a2, int a3)
{
  _QWORD *v4;
  NSObject *v6;
  int v7;
  int v8;
  int v9;
  _QWORD *v10;
  __int16 v11;
  const __CFString *v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (result)
  {
    v4 = (_QWORD *)result;
    result = 0;
    if (a2)
    {
      if (*v4)
      {
        v6 = sub_20B9A7C5C(2u);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
        {
          v9 = 134218498;
          v10 = v4;
          v11 = 2112;
          v12 = a2;
          v13 = 1024;
          v14 = a3;
          _os_log_debug_impl(&dword_20B7F7000, v6, OS_LOG_TYPE_DEBUG, "[MecabraGetLengthForContextString] mecabra:%p string:[%@] isRightContext:%d", (uint8_t *)&v9, 0x1Cu);
        }
        v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v4 + 16))(*v4);
        v8 = sub_20B8D0E3C(v7);
        return sub_20B9612DC(v8, a2, a3 != 0);
      }
    }
  }
  return result;
}

void *MecabraCandidateCopy(void *a1, const char *a2, uint64_t a3)
{
  if (a1)
    return (void *)objc_msgSend_copy(a1, a2, a3);
  return a1;
}

void *MecabraCandidateGetType(void *result, const char *a2, uint64_t a3)
{
  uint64_t v3;

  if (result)
  {
    v3 = objc_msgSend_rawCandidate(result, a2, a3);
    return (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
  }
  return result;
}

uint64_t MecabraCandidateSetDisplayString(void *a1, const __CFString *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  if (a1
    && (v4 = objc_msgSend_rawCandidate(a1, (const char *)a2, a3)) != 0
    && (v5 = v4, (*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4) == 6))
  {
    return sub_20BA01104(v5, a2);
  }
  else
  {
    return 0;
  }
}

uint64_t MecabraCandidateGetAttributes(void *a1, const char *a2, uint64_t a3)
{
  uint64_t result;

  result = objc_msgSend_rawCandidate(a1, a2, a3);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 136))(result);
  return result;
}

uint64_t MecabraCandidateGetAnalysisString(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  const void *v8;

  v4 = objc_msgSend_rawCandidate(a1, a2, a3);
  if (v4)
  {
    v5 = (void *)v4;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4) == 1
      || (*(unsigned int (**)(void *))(*(_QWORD *)v5 + 72))(v5) == 7)
    {
      v8 = (const void *)objc_msgSend_rawCandidate(a1, v6, v7);
      v5 = __dynamic_cast(v8, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
      return (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 56))(v5);
    }
    if ((*(unsigned int (**)(void *))(*(_QWORD *)v5 + 72))(v5) == 6)
      return (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 56))(v5);
  }
  return 0;
}

uint64_t MecabraCandidateGetConvertedAnalysisString(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  const void *v8;
  uint64_t v9;

  v4 = objc_msgSend_rawCandidate(a1, a2, a3);
  if (v4)
  {
    v5 = (void *)v4;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4) == 1
      || (*(unsigned int (**)(void *))(*(_QWORD *)v5 + 72))(v5) == 7)
    {
      v8 = (const void *)objc_msgSend_rawCandidate(a1, v6, v7);
      v5 = __dynamic_cast(v8, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
      v9 = 28;
      return (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 8 * v9))(v5);
    }
    if ((*(unsigned int (**)(void *))(*(_QWORD *)v5 + 72))(v5) == 6)
    {
      v9 = 22;
      return (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 8 * v9))(v5);
    }
  }
  return 0;
}

uint64_t MecabraCandidateGetDictionaryReading(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  const void *v8;
  uint64_t v9;

  v4 = objc_msgSend_rawCandidate(a1, a2, a3);
  if (v4)
  {
    v5 = (void *)v4;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4) == 1
      || (*(unsigned int (**)(void *))(*(_QWORD *)v5 + 72))(v5) == 7)
    {
      v8 = (const void *)objc_msgSend_rawCandidate(a1, v6, v7);
      v5 = __dynamic_cast(v8, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
      v9 = 29;
      return (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 8 * v9))(v5);
    }
    if ((*(unsigned int (**)(void *))(*(_QWORD *)v5 + 72))(v5) == 6)
    {
      v9 = 23;
      return (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 8 * v9))(v5);
    }
  }
  return 0;
}

void *MecabraCandidateIsPersonName(void *result, const char *a2, uint64_t a3)
{
  void *v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  const void *v7;
  void *v8;

  if (result)
  {
    v3 = result;
    result = (void *)objc_msgSend_rawCandidate(result, a2, a3);
    if (result)
    {
      v4 = result;
      if ((*(unsigned int (**)(void *))(*(_QWORD *)result + 72))(result) == 1
        || (*(unsigned int (**)(void *))(*(_QWORD *)v4 + 72))(v4) == 7)
      {
        v7 = (const void *)objc_msgSend_rawCandidate(v3, v5, v6);
        v8 = __dynamic_cast(v7, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
        return (void *)(*(uint64_t (**)(void *))(*(_QWORD *)v8 + 184))(v8);
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t MecabraCandidateIsExtensionCandidate(void *a1, const char *a2, uint64_t a3)
{
  uint64_t result;

  result = objc_msgSend_rawCandidate(a1, a2, a3);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 80))(result);
  return result;
}

const void *MecabraCandidateIsExtensionForCandidateBar(void *a1, const char *a2, uint64_t a3)
{
  const void *result;
  const void *v4;

  result = (const void *)objc_msgSend_rawCandidate(a1, a2, a3);
  if (result)
  {
    result = __dynamic_cast(result, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
    if (result)
    {
      v4 = result;
      if ((*(unsigned int (**)(const void *))(*(_QWORD *)result + 72))(result) == 1
        || (*(unsigned int (**)(const void *))(*(_QWORD *)v4 + 72))(v4) == 7)
      {
        return (const void *)((*(unsigned int (**)(const void *))(*(_QWORD *)v4 + 96))(v4) == 68);
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t MecabraCandidateIsEmojiCandidate(void *a1, const char *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  const void *v8;
  void *v9;

  result = objc_msgSend_rawCandidate(a1, a2, a3);
  if (result)
  {
    v5 = result;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)result + 72))(result) == 1
      || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5) == 7)
    {
      v8 = (const void *)objc_msgSend_rawCandidate(a1, v6, v7);
      v9 = __dynamic_cast(v8, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
      return (*(uint64_t (**)(void *))(*(_QWORD *)v9 + 176))(v9);
    }
    else
    {
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 104))(v5) & 0x40;
    }
  }
  return result;
}

uint64_t MecabraCandidateIsLearningDictionaryCandidate(void *a1, const char *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  const void *v8;
  void *v9;

  result = objc_msgSend_rawCandidate(a1, a2, a3);
  if (result)
  {
    v5 = result;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)result + 72))(result) == 1
      || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5) == 7)
    {
      v8 = (const void *)objc_msgSend_rawCandidate(a1, v6, v7);
      v9 = __dynamic_cast(v8, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
      return (*(unsigned int (**)(void *))(*(_QWORD *)v9 + 96))(v9) == 76;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t MecabraCandidateIsUserWordCandidate(void *a1, const char *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  const void *v8;
  void *v9;

  result = objc_msgSend_rawCandidate(a1, a2, a3);
  if (result)
  {
    v5 = result;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)result + 72))(result) == 1
      || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5) == 7)
    {
      v8 = (const void *)objc_msgSend_rawCandidate(a1, v6, v7);
      v9 = __dynamic_cast(v8, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
      return (*(unsigned int (**)(void *))(*(_QWORD *)v9 + 96))(v9) == 85;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t MecabraCandidateIsPredictionCandidate(void *a1, const char *a2, uint64_t a3)
{
  uint64_t result;

  result = objc_msgSend_rawCandidate(a1, a2, a3);
  if (result)
    return ((*(unsigned int (**)(uint64_t))(*(_QWORD *)result + 104))(result) >> 9) & 1;
  return result;
}

void *MecabraCandidateIsFuzzyMatchCandidate(void *result, const char *a2, uint64_t a3)
{
  void *v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  const void *v7;
  void *v8;

  if (result)
  {
    v3 = result;
    result = (void *)objc_msgSend_rawCandidate(result, a2, a3);
    if (result)
    {
      v4 = result;
      if ((*(unsigned int (**)(void *))(*(_QWORD *)result + 72))(result) == 1
        || (*(unsigned int (**)(void *))(*(_QWORD *)v4 + 72))(v4) == 7)
      {
        v7 = (const void *)objc_msgSend_rawCandidate(v3, v5, v6);
        v8 = __dynamic_cast(v7, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
        return (void *)(*(uint64_t (**)(void *))(*(_QWORD *)v8 + 192))(v8);
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

void *MecabraCandidateIsAutocorrectionCandidate(void *result, const char *a2, uint64_t a3)
{
  void *v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  const void *v7;
  void *v8;

  if (result)
  {
    v3 = result;
    result = (void *)objc_msgSend_rawCandidate(result, a2, a3);
    if (result)
    {
      v4 = result;
      if ((*(unsigned int (**)(void *))(*(_QWORD *)result + 72))(result) == 1
        || (*(unsigned int (**)(void *))(*(_QWORD *)v4 + 72))(v4) == 7)
      {
        v7 = (const void *)objc_msgSend_rawCandidate(v3, v5, v6);
        v8 = __dynamic_cast(v7, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
        return (void *)(*(uint64_t (**)(void *))(*(_QWORD *)v8 + 200))(v8);
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t MecabraCandidateIsOTAWordlistCandidate(uint64_t result, const char *a2, uint64_t a3)
{
  void *v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  const void *v10;
  void *v11;

  if (result)
  {
    v3 = (void *)result;
    result = objc_msgSend_rawCandidate((void *)result, a2, a3);
    if (result)
    {
      v4 = result;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)result + 72))(result) == 1
        || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4) == 7)
      {
        v7 = objc_msgSend_rawCandidate(v3, v5, v6);
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 104))(v7) & 0x2000) != 0)
        {
          return 1;
        }
        else
        {
          v10 = (const void *)objc_msgSend_rawCandidate(v3, v8, v9);
          v11 = __dynamic_cast(v10, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
          return (*(uint64_t (**)(void *))(*(_QWORD *)v11 + 264))(v11);
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

void *MecabraCandidateIsRegionalCandidate(void *result, const char *a2, uint64_t a3)
{
  void *v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;

  if (result)
  {
    v3 = result;
    result = (void *)objc_msgSend_rawCandidate(result, a2, a3);
    if (result)
    {
      v4 = result;
      if ((*(unsigned int (**)(void *))(*(_QWORD *)result + 72))(result) == 1
        || (*(unsigned int (**)(void *))(*(_QWORD *)v4 + 72))(v4) == 7)
      {
        v7 = objc_msgSend_rawCandidate(v3, v5, v6);
        return (void *)(((*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 104))(v7) >> 14) & 1);
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

unint64_t MecabraCandidateIsBilingualCandidate(unint64_t result, const char *a2, uint64_t a3)
{
  uint64_t v3;

  if (result)
  {
    v3 = objc_msgSend_rawCandidate((void *)result, a2, a3);
    return ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 104))(v3) & 0x80) != 0
        || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 96))(v3) == 71;
  }
  return result;
}

void *MecabraCandidateIsPartialCandidate(void *result, const char *a2, uint64_t a3)
{
  if (result)
    return (void *)(MecabraCandidateGetMatchedLengthType(result, a2, a3) == 1);
  return result;
}

uint64_t MecabraCandidateGetMatchedLengthType(void *a1, const char *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  const void *v8;
  void *v9;

  result = objc_msgSend_rawCandidate(a1, a2, a3);
  if (result)
  {
    v5 = result;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)result + 72))(result) == 1
      || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5) == 7)
    {
      v8 = (const void *)objc_msgSend_rawCandidate(a1, v6, v7);
      v9 = __dynamic_cast(v8, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
      LOWORD(result) = (*(uint64_t (**)(void *))(*(_QWORD *)v9 + 408))(v9);
    }
    else
    {
      LOWORD(result) = 0;
    }
  }
  return (unsigned __int16)result;
}

void *MecabraCandidateIsMLTapTypingCandidate(void *result, const char *a2, uint64_t a3)
{
  void *v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  const void *v7;
  void *v8;

  if (result)
  {
    v3 = result;
    result = (void *)objc_msgSend_rawCandidate(result, a2, a3);
    if (result)
    {
      v4 = result;
      if ((*(unsigned int (**)(void *))(*(_QWORD *)result + 72))(result) == 1
        || (*(unsigned int (**)(void *))(*(_QWORD *)v4 + 72))(v4) == 7)
      {
        v7 = (const void *)objc_msgSend_rawCandidate(v3, v5, v6);
        v8 = __dynamic_cast(v7, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
        return (void *)(*(uint64_t (**)(void *))(*(_QWORD *)v8 + 280))(v8);
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_20B8E1620(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  const void *v8;
  void *v9;

  if (!a1)
    return 0;
  v4 = objc_msgSend_rawCandidate(a1, a2, a3);
  if (!v4)
    return 0;
  v5 = v4;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4) != 1
    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5) != 7)
  {
    return 0;
  }
  v8 = (const void *)objc_msgSend_rawCandidate(a1, v6, v7);
  v9 = __dynamic_cast(v8, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
  return (*(uint64_t (**)(void *))(*(_QWORD *)v9 + 208))(v9);
}

uint64_t MecabraCreateHandwritingCandidate(const __CFString *a1, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t v8;
  MecabraCandidate *v9;
  const char *v10;

  v8 = operator new();
  sub_20B9888A4(v8, a1, a2, a3, a4, 1);
  v9 = [MecabraCandidate alloc];
  return objc_msgSend_initWithCandidate_(v9, v10, v8);
}

void sub_20B8E1730(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10E1C408D75F3D8);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8E1754(uint64_t a1)
{
  MecabraCandidate *v2;
  const char *v3;

  v2 = [MecabraCandidate alloc];
  return objc_msgSend_initWithCandidate_(v2, v3, a1);
}

uint64_t MecabraConversionCandidateCreate(const __CFString *a1, const __CFString *a2)
{
  uint64_t v2;
  MecabraCandidate *v3;
  const char *v4;

  v2 = sub_20B8D6E00(a1, a2, 1);
  v3 = [MecabraCandidate alloc];
  return objc_msgSend_initWithCandidate_(v3, v4, v2);
}

uint64_t MecabraProactiveCandidateCreate(const void *a1, const __CFString *a2)
{
  uint64_t v4;
  MecabraCandidate *v5;
  const char *v6;

  v4 = operator new();
  sub_20BA01014(v4, a1, a2);
  v5 = [MecabraCandidate alloc];
  return objc_msgSend_initWithCandidate_(v5, v6, v4);
}

void sub_20B8E1814(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10E1C4064B4762ELL);
  _Unwind_Resume(a1);
}

uint64_t MecabraCandidateGetNextPhraseBoundary(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  const void *v9;
  void *v10;

  v5 = objc_msgSend_rawCandidate(a1, a2, a3);
  if (!v5)
    return -1;
  v6 = v5;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5) != 1
    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 72))(v6) != 7)
  {
    return -1;
  }
  v9 = (const void *)objc_msgSend_rawCandidate(a1, v7, v8);
  v10 = __dynamic_cast(v9, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
  return (*(uint64_t (**)(void *, const char *))(*(_QWORD *)v10 + 368))(v10, a2);
}

void *MecabraCandidateGetWordCount(void *result, const char *a2, uint64_t a3)
{
  if (result)
  {
    result = (void *)objc_msgSend_rawCandidate(result, a2, a3);
    if (result)
      return (void *)(*(uint64_t (**)(void *))(*(_QWORD *)result + 48))(result);
  }
  return result;
}

uint64_t MecabraCandidateGetWordLengthAtIndex(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 v8;
  const char *v9;
  uint64_t v10;
  const void *v11;
  void *v12;

  v5 = objc_msgSend_rawCandidate(a1, a2, a3);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)v5 + 120))(v5, a2);
  if (!v7)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 72))(v6) == 1
      || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 72))(v6) == 7)
    {
      v11 = (const void *)objc_msgSend_rawCandidate(a1, v9, v10);
      v12 = __dynamic_cast(v11, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
      return (*(uint64_t (**)(void *, const char *))(*(_QWORD *)v12 + 128))(v12, a2);
    }
    return 0;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
  return v8;
}

uint64_t MecabraCandidateGetWordReadingLengthAtIndex(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v9;
  uint64_t v10;
  const void *v11;
  void *v12;

  v5 = objc_msgSend_rawCandidate(a1, a2, a3);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)v5 + 120))(v5, a2);
  if (v7)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 72))(v6) != 1
    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 72))(v6) != 7)
  {
    return 0;
  }
  v11 = (const void *)objc_msgSend_rawCandidate(a1, v9, v10);
  v12 = __dynamic_cast(v11, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
  return (*(uint64_t (**)(void *, const char *))(*(_QWORD *)v12 + 312))(v12, a2);
}

uint64_t MecabraCandidateGetWordDictionaryReadingLengthAtIndex(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v9;
  uint64_t v10;
  const void *v11;
  void *v12;

  v5 = objc_msgSend_rawCandidate(a1, a2, a3);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)v5 + 120))(v5, a2);
  if (v7)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 72))(v6) != 1
    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 72))(v6) != 7)
  {
    return 0;
  }
  v11 = (const void *)objc_msgSend_rawCandidate(a1, v9, v10);
  v12 = __dynamic_cast(v11, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
  return (*(uint64_t (**)(void *, const char *))(*(_QWORD *)v12 + 320))(v12, a2);
}

uint64_t MecabraCandidateCreateWordLocaleAtIndex(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  const void *v9;
  void *v10;

  v5 = objc_msgSend_rawCandidate(a1, a2, a3);
  if (!v5)
    return 0;
  v6 = v5;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5) != 1
    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 72))(v6) != 7)
  {
    return 0;
  }
  v9 = (const void *)objc_msgSend_rawCandidate(a1, v7, v8);
  v10 = __dynamic_cast(v9, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
  return (*(uint64_t (**)(void *, const char *))(*(_QWORD *)v10 + 328))(v10, a2);
}

uint64_t MecabraCandidateWordAtIndexIsFromSystemDictionary(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v9;
  uint64_t v10;
  const void *v11;
  void *v12;

  v5 = objc_msgSend_rawCandidate(a1, a2, a3);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)v5 + 120))(v5, a2);
  if (v7)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 72))(v6) != 1
    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 72))(v6) != 7)
  {
    return 0;
  }
  v11 = (const void *)objc_msgSend_rawCandidate(a1, v9, v10);
  v12 = __dynamic_cast(v11, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
  return (*(uint64_t (**)(void *, const char *))(*(_QWORD *)v12 + 336))(v12, a2);
}

BOOL MecabraCandidateHasAlternativeSurfaceFormForWordAtIndex(void *a1, unint64_t a2, uint64_t a3)
{
  unsigned __int8 v5;
  const void *v6;
  void *v7;
  void *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  _BOOL4 v15;
  _BOOL4 v16;
  unint64_t i;
  int v18;

  v5 = atomic_load((unsigned __int8 *)&qword_25472B618);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_25472B618))
  {
    sub_20B8B2334(0);
    qword_25472B610 = (uint64_t)&qword_25472C9B0;
    __cxa_guard_release(&qword_25472B618);
  }
  v6 = (const void *)objc_msgSend_rawCandidate(a1, (const char *)a2, a3);
  if (!v6)
    return 0;
  v7 = __dynamic_cast(v6, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
  if (!v7)
    return 0;
  v8 = __dynamic_cast(v7, (const struct __class_type_info *)&unk_24C45C148, (const struct __class_type_info *)&unk_24C45C5C8, 0);
  v9 = 0;
  if ((a2 & 0x8000000000000000) != 0)
    return v9;
  v10 = (uint64_t)v8;
  if (!v8)
    return v9;
  if ((*(uint64_t (**)(void *))(*(_QWORD *)v8 + 48))(v8) <= a2)
    return 0;
  v11 = sub_20B916C5C(v10, a2);
  v13 = v12;
  v14 = *(unsigned __int16 *)((*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v10 + 560))(v10, a2)
                            + 30);
  v15 = *(unsigned __int16 *)(qword_25472B610 + 72) <= v14 && *(unsigned __int16 *)(qword_25472B610 + 74) >= v14;
  v16 = *(unsigned __int16 *)(qword_25472B610 + 76) <= v14 && *(unsigned __int16 *)(qword_25472B610 + 78) >= v14;
  if (!v15 && !v16)
    return 0;
  if (v13)
  {
    v9 = 0;
    for (i = 0; i != v13; v9 = i >= v13)
    {
      v18 = *(unsigned __int16 *)(v11 + 2 * i);
      if ((v18 - 12353) >= 0x56 && v18 != 12540 && v18 != 12316)
        break;
      ++i;
    }
  }
  else
  {
    return 1;
  }
  return v9;
}

void sub_20B8E1E88(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472B618);
  _Unwind_Resume(a1);
}

__CFArray *MecabraCandidateCopySyllableLengthArrayForWordAtIndex(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  const void *v9;
  void *v10;
  __CFArray *v11;
  void *__p[3];

  v5 = objc_msgSend_rawCandidate(a1, a2, a3);
  if (!v5)
    return 0;
  v6 = v5;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5) != 1
    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 72))(v6) != 7)
  {
    return 0;
  }
  v9 = (const void *)objc_msgSend_rawCandidate(a1, v7, v8);
  v10 = __dynamic_cast(v9, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
  (*(void (**)(void **__return_ptr, void *, const char *))(*(_QWORD *)v10 + 424))(__p, v10, a2);
  v11 = sub_20B8D30B4((__int16 **)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v11;
}

void sub_20B8E1F64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MecabraCandidateGetLcAttrAtIndex(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  const void *v9;
  void *v10;

  v5 = objc_msgSend_rawCandidate(a1, a2, a3);
  if (!v5)
    return 0;
  v6 = v5;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5) != 1
    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 72))(v6) != 7)
  {
    return 0;
  }
  v9 = (const void *)objc_msgSend_rawCandidate(a1, v7, v8);
  v10 = __dynamic_cast(v9, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
  return (*(uint64_t (**)(void *, const char *))(*(_QWORD *)v10 + 344))(v10, a2);
}

uint64_t MecabraCandidateGetRcAttrAtIndex(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  const void *v9;
  void *v10;

  v5 = objc_msgSend_rawCandidate(a1, a2, a3);
  if (!v5)
    return 0;
  v6 = v5;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5) != 1
    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 72))(v6) != 7)
  {
    return 0;
  }
  v9 = (const void *)objc_msgSend_rawCandidate(a1, v7, v8);
  v10 = __dynamic_cast(v9, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
  return (*(uint64_t (**)(void *, const char *))(*(_QWORD *)v10 + 352))(v10, a2);
}

uint64_t MecabraCandidateGetTrieValueAtIndex(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  const void *v9;
  void *v10;

  v5 = objc_msgSend_rawCandidate(a1, a2, a3);
  if (!v5)
    return 0;
  v6 = v5;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5) != 1
    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 72))(v6) != 7)
  {
    return 0;
  }
  v9 = (const void *)objc_msgSend_rawCandidate(a1, v7, v8);
  v10 = __dynamic_cast(v9, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
  return (*(uint64_t (**)(void *, const char *))(*(_QWORD *)v10 + 360))(v10, a2);
}

uint64_t MecabraCandidateGetKindAtIndex(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v4;
  const void *v5;
  void *v6;
  int v7;

  v4 = objc_msgSend_rawCandidate(a1, a2, a3);
  if (v4
    && ((v5 = (const void *)v4, (*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4) == 1)
     || (*(unsigned int (**)(const void *))(*(_QWORD *)v5 + 72))(v5) == 7)
    && (v6 = __dynamic_cast(v5, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C5C8, 0)) != 0)
  {
    return (unsigned __int16)*(_DWORD *)(*(uint64_t (**)(void *, const char *))(*(_QWORD *)v6 + 560))(v6, a2);
  }
  else
  {
    LOWORD(v7) = 0;
  }
  return (unsigned __int16)v7;
}

uint64_t MecabraCandidateGetCostAtIndex(void *a1, const char *a2, uint64_t a3)
{
  uint64_t result;
  const void *v5;

  result = objc_msgSend_rawCandidate(a1, a2, a3);
  if (result)
  {
    v5 = (const void *)result;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)result + 72))(result) == 1
      || (*(unsigned int (**)(const void *))(*(_QWORD *)v5 + 72))(v5) == 7)
    {
      result = (uint64_t)__dynamic_cast(v5, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C5C8, 0);
      if (result)
        return *(int *)((*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)result + 560))(result, a2) + 4);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t MecabraCandidateGetLastPrefixValue(void *a1, const char *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  const void *v8;
  void *v9;

  result = objc_msgSend_rawCandidate(a1, a2, a3);
  if (result)
  {
    v5 = result;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)result + 72))(result) == 1
      || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5) == 7)
    {
      v8 = (const void *)objc_msgSend_rawCandidate(a1, v6, v7);
      v9 = __dynamic_cast(v8, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
      return (*(uint64_t (**)(void *))(*(_QWORD *)v9 + 376))(v9);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t MecabraCandidateGetWeight(void *a1, const char *a2, uint64_t a3)
{
  uint64_t result;

  result = objc_msgSend_rawCandidate(a1, a2, a3);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 112))(result);
  return result;
}

uint64_t MecabraCandidateGetKind(void *a1, const char *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  const void *v8;
  void *v9;

  result = objc_msgSend_rawCandidate(a1, a2, a3);
  if (result)
  {
    v5 = result;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)result + 72))(result) == 1
      || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5) == 7)
    {
      v8 = (const void *)objc_msgSend_rawCandidate(a1, v6, v7);
      v9 = __dynamic_cast(v8, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
      LOWORD(result) = (*(uint64_t (**)(void *))(*(_QWORD *)v9 + 96))(v9);
    }
    else
    {
      LOWORD(result) = 0;
    }
  }
  return (unsigned __int16)result;
}

uint64_t MecabraCandidateGetMatchType(void *a1, const char *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  const void *v8;
  void *v9;

  result = objc_msgSend_rawCandidate(a1, a2, a3);
  if (result)
  {
    v5 = result;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)result + 72))(result) == 1
      || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5) == 7)
    {
      v8 = (const void *)objc_msgSend_rawCandidate(a1, v6, v7);
      v9 = __dynamic_cast(v8, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
      LOWORD(result) = (*(uint64_t (**)(void *))(*(_QWORD *)v9 + 416))(v9);
    }
    else
    {
      LOWORD(result) = 0;
    }
  }
  return (unsigned __int16)result;
}

uint64_t MecabraCandidateIsSinglePhraseCandidate(void *a1, const char *a2, uint64_t a3)
{
  return (MecabraCandidateGetMatchType(a1, a2, a3) >> 3) & 1;
}

double MecabraCandidateGetLMProbability(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  const void *v8;
  void *v9;
  double result;

  v4 = objc_msgSend_rawCandidate(a1, a2, a3);
  if (!v4)
    return 0.0;
  v5 = v4;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4) != 1
    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5) != 7)
  {
    return 0.0;
  }
  v8 = (const void *)objc_msgSend_rawCandidate(a1, v6, v7);
  v9 = __dynamic_cast(v8, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
  (*(void (**)(void *))(*(_QWORD *)v9 + 392))(v9);
  return result;
}

uint64_t MecabraCandidateGetBaseCost(void *a1, const char *a2, uint64_t a3)
{
  uint64_t result;
  const void *v4;

  result = objc_msgSend_rawCandidate(a1, a2, a3);
  if (result)
  {
    v4 = (const void *)result;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)result + 72))(result) == 1
      || (*(unsigned int (**)(const void *))(*(_QWORD *)v4 + 72))(v4) == 7)
    {
      result = (uint64_t)__dynamic_cast(v4, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C5C8, 0);
      if (result)
        return (*(int (**)(uint64_t))(*(_QWORD *)result + 384))(result);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

int *MecabraCandidateGetMatchPenalty(void *a1, const char *a2, uint64_t a3)
{
  int *result;
  int *v4;

  result = (int *)objc_msgSend_rawCandidate(a1, a2, a3);
  if (result)
  {
    v4 = result;
    if ((*(unsigned int (**)(int *))(*(_QWORD *)result + 72))(result) == 1
      || (*(unsigned int (**)(int *))(*(_QWORD *)v4 + 72))(v4) == 7)
    {
      result = (int *)__dynamic_cast(v4, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C5C8, 0);
      if (result)
        return (int *)result[55];
    }
    else
    {
      return 0;
    }
  }
  return result;
}

__CFArray *MecabraCandidateCopySyllableLengthArrayInAnalysisString(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  const void *v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  __CFArray *v12;
  const void *v13;
  void *v14;
  uint64_t v15;
  __CFArray *v16;
  void *__p[4];

  v4 = objc_msgSend_rawCandidate(a1, a2, a3);
  if (!v4)
    return 0;
  v5 = v4;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4) != 1
    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5) != 7)
  {
    return 0;
  }
  v8 = (const void *)objc_msgSend_rawCandidate(a1, v6, v7);
  v9 = __dynamic_cast(v8, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
  (*(void (**)(void **__return_ptr, void *, uint64_t))(*(_QWORD *)v9 + 432))(__p, v9, 1);
  v12 = sub_20B8D30B4((__int16 **)__p);
  __p[3] = v12;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v13 = (const void *)objc_msgSend_rawCandidate(a1, v10, v11);
  v14 = __dynamic_cast(v13, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
  if (!(*(unsigned int (**)(void *))(*(_QWORD *)v14 + 456))(v14))
    return v12;
  v16 = sub_20B8D757C(a1, (const char *)v12, v15);
  if (v12)
    CFRelease(v12);
  return v16;
}

void sub_20B8E2708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__CFArray *MecabraCandidateCopySyllableLengthArrayInConvertedAnalysisString(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  const void *v8;
  void *v9;
  __CFArray *v10;
  void *__p[3];

  v4 = objc_msgSend_rawCandidate(a1, a2, a3);
  if (!v4)
    return 0;
  v5 = v4;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4) != 1
    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5) != 7)
  {
    return 0;
  }
  v8 = (const void *)objc_msgSend_rawCandidate(a1, v6, v7);
  v9 = __dynamic_cast(v8, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
  (*(void (**)(void **__return_ptr, void *, uint64_t))(*(_QWORD *)v9 + 432))(__p, v9, 2);
  v10 = sub_20B8D30B4((__int16 **)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v10;
}

void sub_20B8E27F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__CFArray *MecabraCandidateCopySyllableLengthArrayInDictionaryReading(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  const void *v8;
  void *v9;
  __CFArray *v10;
  void *__p[3];

  v4 = objc_msgSend_rawCandidate(a1, a2, a3);
  if (!v4)
    return 0;
  v5 = v4;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4) != 1
    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5) != 7)
  {
    return 0;
  }
  v8 = (const void *)objc_msgSend_rawCandidate(a1, v6, v7);
  v9 = __dynamic_cast(v8, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
  (*(void (**)(void **__return_ptr, void *, _QWORD))(*(_QWORD *)v9 + 432))(__p, v9, 0);
  v10 = sub_20B8D30B4((__int16 **)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v10;
}

void sub_20B8E28C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *MecabraCandidateIsSupplementalLexiconCandidate(void *result, const char *a2, uint64_t a3)
{
  uint64_t v3;

  if (result)
  {
    v3 = objc_msgSend_rawCandidate(result, a2, a3);
    return (void *)((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 96))(v3) == 89);
  }
  return result;
}

void *MecabraCandidateGetSupplementalLexiconIdentifiers(void *result, const char *a2, uint64_t a3)
{
  uint64_t v3;

  if (result)
  {
    v3 = objc_msgSend_rawCandidate(result, a2, a3);
    return (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 160))(v3);
  }
  return result;
}

void *MecabraCandidateGetSupplementalLexiconItemPrefix(void *result, const char *a2, uint64_t a3)
{
  uint64_t v3;

  if (result)
  {
    v3 = objc_msgSend_rawCandidate(result, a2, a3);
    return (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 168))(v3);
  }
  return result;
}

void *MecabraCandidateExactlyCoversInputString(void *result, const char *a2, uint64_t a3)
{
  void *v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  const void *v10;
  void *v11;

  if (result)
  {
    v3 = result;
    result = (void *)objc_msgSend_rawCandidate(result, a2, a3);
    if (result)
    {
      v4 = result;
      if (((*(unsigned int (**)(void *))(*(_QWORD *)result + 72))(result) == 1
         || (*(unsigned int (**)(void *))(*(_QWORD *)v4 + 72))(v4) == 7)
        && (v7 = objc_msgSend_rawCandidate(v3, v5, v6),
            (*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 96))(v7) == 89))
      {
        v10 = (const void *)objc_msgSend_rawCandidate(v3, v8, v9);
        v11 = __dynamic_cast(v10, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
        return (void *)(*(uint64_t (**)(void *))(*(_QWORD *)v11 + 296))(v11);
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

CFStringRef sub_20B8E29FC(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  double LMProbability;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t AnalysisString;
  const char *v18;
  uint64_t v19;
  uint64_t ConvertedAnalysisString;
  const char *v21;
  uint64_t v22;
  uint64_t DictionaryReading;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;

  v4 = objc_msgSend_rawCandidate(a1, a2, a3);
  if (v4
    && ((v7 = v4, (*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4) == 1)
     || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7) == 7))
  {
    LMProbability = MecabraCandidateGetLMProbability(a1, v5, v6);
    v11 = objc_msgSend_rawCandidate(a1, v9, v10);
    v14 = (_QWORD *)v11;
    if (v11)
    {
      v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
      v16 = 40;
      if (!v15)
        v16 = 24;
      v14 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v14 + v16))(v14);
    }
    AnalysisString = MecabraCandidateGetAnalysisString(a1, v12, v13);
    ConvertedAnalysisString = MecabraCandidateGetConvertedAnalysisString(a1, v18, v19);
    DictionaryReading = MecabraCandidateGetDictionaryReading(a1, v21, v22);
    v26 = objc_msgSend_rawCandidate(a1, v24, v25);
    if (v26)
      v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 112))(v26);
    v27 = -1000.0;
    if (LMProbability != -1.79769313e308)
      v27 = LMProbability;
    return CFStringCreateWithFormat(0, 0, CFSTR("%@ (AS:%@ CAS:%@ DR:%@), %d, %f"), v14, AnalysisString, ConvertedAnalysisString, DictionaryReading, v26, *(_QWORD *)&v27);
  }
  else
  {
    v29 = objc_msgSend_rawCandidate(a1, v5, v6);
    v32 = (_QWORD *)v29;
    if (v29)
    {
      v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 40))(v29);
      v34 = 40;
      if (!v33)
        v34 = 24;
      v32 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v32 + v34))(v32);
    }
    v35 = MecabraCandidateGetAnalysisString(a1, v30, v31);
    v38 = MecabraCandidateGetConvertedAnalysisString(a1, v36, v37);
    v41 = MecabraCandidateGetDictionaryReading(a1, v39, v40);
    v44 = objc_msgSend_rawCandidate(a1, v42, v43);
    if (v44)
      v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v44 + 112))(v44);
    return CFStringCreateWithFormat(0, 0, CFSTR("%@ (AS:%@ CAS:%@ DR:%@), %d"), v32, v35, v38, v41, v44);
  }
}

uint64_t MecabraSetCandidateOrderAdjustment(uint64_t result, int a2)
{
  if (result)
  {
    result = *(_QWORD *)result;
    if (result)
      return (*(uint64_t (**)(uint64_t, BOOL))(*(_QWORD *)result + 168))(result, a2 != 0);
  }
  return result;
}

void **MecabraWorkingSetAddString(void **a1, const char *a2)
{
  return MecabraWorkingSetAddStringWithContext(a1, 0, a2);
}

void **MecabraWorkingSetAddStringWithContext(void **result, uint64_t *a2, const char *a3)
{
  _QWORD *v3;
  void ***v7;
  uint64_t v8;

  if (result)
  {
    v3 = result;
    result = (void **)*result;
    if (result)
    {
      result = (void **)(*((uint64_t (**)(void **))*result + 2))(result);
      if (result <= 0xE && ((1 << (char)result) & 0x5800) != 0)
      {
        v7 = (void ***)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v3 + 416))(*v3);
        if (a2)
          v8 = *a2;
        else
          v8 = 0;
        return sub_20B973A40(v7, v8, a3);
      }
    }
  }
  return result;
}

_QWORD *MecabraWorkingSetContainsString(_QWORD *a1, const __CFString *a2)
{
  return MecabraWorkingSetContainsStringWithContext(a1, 0, a2);
}

_QWORD *MecabraWorkingSetContainsStringWithContext(_QWORD *result, const char **a2, const __CFString *a3)
{
  _QWORD *v3;
  unsigned int v6;
  void ***v8;
  const char *v9;

  if (result)
  {
    v3 = result;
    result = (_QWORD *)*result;
    if (result)
    {
      v6 = (*(uint64_t (**)(_QWORD *))(*result + 16))(result);
      if (v6 > 0xE || ((1 << v6) & 0x5800) == 0)
      {
        return 0;
      }
      else
      {
        v8 = (void ***)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v3 + 416))(*v3);
        if (a2)
          v9 = *a2;
        else
          v9 = 0;
        return (_QWORD *)sub_20B973AA4(v8, v9, a3);
      }
    }
  }
  return result;
}

uint64_t MecabraDeleteEntryFromLearningDictionary(uint64_t result)
{
  if (result)
  {
    result = *(_QWORD *)result;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 176))(result);
  }
  return result;
}

uint64_t MecabraDeleteCandidateFromLearningDictionary(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;

  if (result)
  {
    v2 = (uint64_t *)result;
    result = 0;
    if (a2)
    {
      v3 = *v2;
      if (v3)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 184))(v3);
    }
  }
  return result;
}

CFMutableArrayRef MecabraCreatePinyinSyllableArray(uint64_t *a1)
{
  uint64_t v1;

  if (a1 && (v1 = *a1) != 0)
    return (CFMutableArrayRef)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 224))(v1);
  else
    return CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, 0);
}

uint64_t MecabraSetFuzzyPinyinPairs(_QWORD *a1, CFArrayRef theArray)
{
  CFIndex Count;
  uint64_t v5;
  NSObject *v6;
  os_signpost_id_t v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  CFIndex ptr;
  uint8_t buf[4];
  CFIndex v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (!a1 || !*a1)
    return 0;
  if (theArray)
    Count = CFArrayGetCount(theArray);
  else
    Count = 0;
  ptr = Count;
  v6 = sub_20B9A7C5C(0xDu);
  v7 = os_signpost_id_make_with_pointer(v6, &ptr);
  v8 = sub_20B9A7C5C(0xDu);
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v9 = v8;
    if (os_signpost_enabled(v8))
    {
      *(_DWORD *)buf = 134217984;
      v15 = ptr;
      _os_signpost_emit_with_name_impl(&dword_20B7F7000, v9, OS_SIGNPOST_INTERVAL_BEGIN, v7, "MecabraSetFuzzyPinyinPairs", "Reset (%ld) fuzzy pairs.", buf, 0xCu);
    }
  }
  v5 = (*(uint64_t (**)(_QWORD, CFArrayRef))(*(_QWORD *)*a1 + 232))(*a1, theArray);
  v10 = sub_20B9A7C5C(0xDu);
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v11 = v10;
    if (os_signpost_enabled(v10))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_20B7F7000, v11, OS_SIGNPOST_INTERVAL_END, v7, "MecabraSetFuzzyPinyinPairs", (const char *)&unk_20BA9505F, buf, 2u);
    }
  }
  return v5;
}

uint64_t MecabraGetMaximalCharacterInputCodeLength(int a1, int a2)
{
  uint64_t result;

  if ((a1 - 3) < 0xFFFFFFFE || a2 != 0)
    return 0;
  result = sub_20BA30A9C();
  if (result)
    return *(unsigned __int16 *)(result + 8);
  return result;
}

uint64_t MecabraGetInputCodeForCharacters(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, unsigned int a7)
{
  uint64_t v8;
  int v13;

  if (result)
  {
    v8 = result;
    result = 0;
    if ((a4 - 3) >= 0xFFFFFFFE && !a5)
    {
      result = sub_20BA30A9C();
      if (result)
      {
        if (a4 == 1)
          v13 = 1;
        else
          v13 = 2;
        return sub_20BA30BBC(result, v8, a2, a3, v13, a6, a7);
      }
    }
  }
  return result;
}

uint64_t MecabraSetBuildDynamicDictionariesAsynchronously(uint64_t result)
{
  if (result)
  {
    result = *(_QWORD *)result;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 264))(result);
  }
  return result;
}

uint64_t MecabraCangjieCodeIsValid(_BYTE *a1, unint64_t a2)
{
  unint64_t v4;
  char v6;
  char **v7;
  char *v8;

  v4 = atomic_load(&qword_25472B628);
  if (v4 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&qword_25472B628, &v7, (void (__cdecl *)(void *))sub_20B8EE268);
  }
  return sub_20B96968C((uint64_t *)qword_25472B620, a1, a2);
}

uint64_t MecabraSetWubixingStandard(uint64_t result, int a2)
{
  _QWORD *v2;
  uint64_t v4;

  if (result)
  {
    v2 = (_QWORD *)result;
    result = *(_QWORD *)result;
    if (result)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
      if ((_DWORD)result == 10)
      {
        result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v2 + 416))(*v2);
        if (*(_DWORD *)(result + 344) != a2)
        {
          v4 = result;
          *(_DWORD *)(result + 344) = a2;
          (*(void (**)(_QWORD))(**(_QWORD **)(result + 296) + 128))(*(_QWORD *)(result + 296));
          return sub_20B95275C(v4);
        }
      }
    }
  }
  return result;
}

_QWORD *MecabraGetWubixingStandard(_QWORD *result)
{
  _QWORD *v1;

  if (result)
  {
    v1 = result;
    result = (_QWORD *)*result;
    if (result)
    {
      if ((*(unsigned int (**)(_QWORD *))(*result + 16))(result) == 10)
        return (_QWORD *)*(unsigned int *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v1 + 416))(*v1) + 344);
      else
        return 0;
    }
  }
  return result;
}

uint64_t MecabraCreateWubixingCodesFromSurface(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;

  if (!a1)
    return 0;
  v3 = *a1;
  if (!v3 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3) != 10)
    return 0;
  v5 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 416))(*a1);
  return sub_20B953950(v5, a2);
}

void *MecabraCandidateGetWubixingType(void *result, const char *a2, uint64_t a3)
{
  void *v3;
  _BOOL8 v4;

  if (result)
  {
    result = (void *)objc_msgSend_rawCandidate(result, a2, a3);
    if (result)
    {
      v3 = result;
      if ((*(unsigned int (**)(void *))(*(_QWORD *)result + 72))(result) == 1
        || (*(unsigned int (**)(void *))(*(_QWORD *)v3 + 72))(v3) == 7)
      {
        v4 = ((*(uint64_t (**)(void *))(*(_QWORD *)v3 + 104))(v3) & 0x8080) == 0;
        return (void *)(((*(unsigned int (**)(void *))(*(_QWORD *)v3 + 104))(v3) >> 14) & 4 | (unint64_t)(2 * v4));
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t MecabraSetDebuggingLogEnabled(uint64_t result)
{
  if (result)
  {
    result = *(_QWORD *)result;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 280))(result);
  }
  return result;
}

uint64_t MecabraGetDebuggingLog(uint64_t *a1)
{
  uint64_t v1;

  if (a1 && (v1 = *a1) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 272))(v1);
  else
    return 0;
}

uint64_t MecabraCreateCustomDebugInfo(uint64_t *a1)
{
  uint64_t v1;

  if (a1 && (v1 = *a1) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 288))(v1);
  else
    return 0;
}

_QWORD *MecabraFlushDynamicData(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  NSObject *v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (result)
  {
    v2 = result;
    if (*result)
    {
      v4 = sub_20B9A7C5C(2u);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      {
        v5 = 134217984;
        v6 = v2;
        _os_log_debug_impl(&dword_20B7F7000, v4, OS_LOG_TYPE_DEBUG, "[MecabraFlushDynamicData] mecabra:%p", (uint8_t *)&v5, 0xCu);
      }
      return (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v2 + 296))(*v2, a2);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void MecabraPerformMaintenance(_QWORD *a1)
{
  NSObject *v2;
  int v3;
  _QWORD *v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v2 = sub_20B9A7C5C(2u);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    v3 = 134217984;
    v4 = a1;
    _os_log_debug_impl(&dword_20B7F7000, v2, OS_LOG_TYPE_DEBUG, "[MecabraPerformMaintenance] mecabra:%p", (uint8_t *)&v3, 0xCu);
    if (!a1)
      return;
  }
  else if (!a1)
  {
    return;
  }
  if (*a1)
    (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 304))(*a1);
}

uint64_t MecabraCandidateGetRangeOfWordAtIndex(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v8;
  uint64_t v9;

  v4 = objc_msgSend_rawCandidate(a1, a2, a3);
  if (!v4)
    return -1;
  v5 = v4;
  v6 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)v4 + 120))(v4, a2);
  if (v6)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5) <= (unint64_t)a2)
    return -1;
  if (a2)
  {
    v8 = 0;
    LODWORD(v9) = 0;
    do
      v9 = v9 + (*(unsigned int (**)(uint64_t, const char *))(*(_QWORD *)v5 + 128))(v5, v8++);
    while (a2 != v8);
  }
  else
  {
    v9 = 0;
  }
  (*(void (**)(uint64_t, const char *))(*(_QWORD *)v5 + 128))(v5, a2);
  return v9;
}

uint64_t MecabraCreateAlternateWordArrayForWordAtIndex(_QWORD *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (a1
    && *a1
    && (!a2
     || (v6 = objc_msgSend_rawCandidate(a2, (const char *)a2, a3)) != 0
     && ((v7 = v6, (*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 72))(v6) == 1)
      || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7) == 7)))
  {
    return (*(uint64_t (**)(_QWORD, void *, uint64_t))(*(_QWORD *)*a1 + 328))(*a1, a2, a3);
  }
  else
  {
    return 0;
  }
}

uint64_t *MecabraSpecialtyDictionaryCreateWithEntries(int a1, uint64_t a2, uint64_t a3, char a4)
{
  NSObject *v8;
  uint64_t *result;
  int v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v8 = sub_20B9A7C5C(2u);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    v10 = 134217984;
    v11 = a2;
    _os_log_debug_impl(&dword_20B7F7000, v8, OS_LOG_TYPE_DEBUG, "[MecabraSpecialtyDictionaryCreateWithEntries] entries:%p", (uint8_t *)&v10, 0xCu);
  }
  result = 0;
  if (!a1)
  {
    if (a2)
      return sub_20BA07078(a2, a3, a4);
  }
  return result;
}

CFDataRef MecabraSpecialtyDictionaryGetData(uint64_t a1)
{
  NSObject *v2;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v2 = sub_20B9A7C5C(2u);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    v4 = 134217984;
    v5 = a1;
    _os_log_debug_impl(&dword_20B7F7000, v2, OS_LOG_TYPE_DEBUG, "[MecabraSpecialtyDictionaryGetData] dictionary:%p", (uint8_t *)&v4, 0xCu);
    if (a1)
      return sub_20BA07744(a1);
  }
  else if (a1)
  {
    return sub_20BA07744(a1);
  }
  return 0;
}

uint64_t *MecabraSpecialtyDictionaryCreateWithData(int a1, const void *a2, char a3)
{
  NSObject *v6;
  uint64_t *result;
  int v8;
  const void *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v6 = sub_20B9A7C5C(2u);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    v8 = 134217984;
    v9 = a2;
    _os_log_debug_impl(&dword_20B7F7000, v6, OS_LOG_TYPE_DEBUG, "[MecabraSpecialtyDictionaryCreateWithData] dictionaryData:%p", (uint8_t *)&v8, 0xCu);
  }
  result = 0;
  if (!a1)
  {
    if (a2)
      return sub_20BA07108(a2, a3);
  }
  return result;
}

BOOL MecabraAddSpecialtyDictionary(_BOOL8 result, _QWORD *a2)
{
  _QWORD *v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  _QWORD *v7;
  __int16 v8;
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (result)
  {
    v3 = (_QWORD *)result;
    result = 0;
    if (a2)
    {
      if (*v3)
      {
        if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v3 + 16))(*v3) == 1)
        {
          v4 = sub_20B9A7C5C(2u);
          if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
          {
            v6 = 134218240;
            v7 = v3;
            v8 = 2048;
            v9 = a2;
            _os_log_debug_impl(&dword_20B7F7000, v4, OS_LOG_TYPE_DEBUG, "[MecabraAddSpecialtyDictionary] mecabra:%p dictionary:%p", (uint8_t *)&v6, 0x16u);
          }
          v5 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v3 + 416))(*v3);
          return (*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(v5 + 192) + 160))(*(_QWORD *)(v5 + 192), *a2) != 0;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

BOOL MecabraRemoveSpecialtyDictionary(_BOOL8 result, _QWORD *a2)
{
  _QWORD *v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  _QWORD *v7;
  __int16 v8;
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (result)
  {
    v3 = (_QWORD *)result;
    result = 0;
    if (a2)
    {
      if (*v3)
      {
        if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v3 + 16))(*v3) == 1)
        {
          v4 = sub_20B9A7C5C(2u);
          if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
          {
            v6 = 134218240;
            v7 = v3;
            v8 = 2048;
            v9 = a2;
            _os_log_debug_impl(&dword_20B7F7000, v4, OS_LOG_TYPE_DEBUG, "[MecabraRemoveSpecialtyDictionary] mecabra:%p dictionary:%p", (uint8_t *)&v6, 0x16u);
          }
          v5 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v3 + 416))(*v3);
          return (*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(v5 + 192) + 168))(*(_QWORD *)(v5 + 192), *a2) != 0;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

void MecabraSpecialtyDictionaryEnumerateEntries(uint64_t *a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20B9A7C5C(2u);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    v5 = 134217984;
    v6 = a1;
    _os_log_debug_impl(&dword_20B7F7000, v4, OS_LOG_TYPE_DEBUG, "[MecabraSpecialtyDictionaryEnumerateEntries] dictionary:%p", (uint8_t *)&v5, 0xCu);
    if (!a1)
      return;
  }
  else if (!a1)
  {
    return;
  }
  sub_20BA077A8(a1, a2);
}

uint64_t MecabraSpecialtyDictionaryRelease(uint64_t result)
{
  uint64_t **v1;
  NSObject *v2;
  uint64_t **v3;
  int v4;
  uint64_t **v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  if (result)
  {
    v1 = (uint64_t **)result;
    v2 = sub_20B9A7C5C(2u);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      v4 = 134217984;
      v5 = v1;
      _os_log_debug_impl(&dword_20B7F7000, v2, OS_LOG_TYPE_DEBUG, "[MecabraSpecialtyDictionaryRelease] dictionary:%p", (uint8_t *)&v4, 0xCu);
    }
    v3 = sub_20BA0766C(v1);
    return MEMORY[0x20BD39CB0](v3, 0x60C40149E097CLL);
  }
  return result;
}

uint64_t MecabraWordPropertiesCreate(uint64_t a1, uint64_t a2)
{
  MecabraWordProperties *v4;
  const char *v5;

  v4 = [MecabraWordProperties alloc];
  return objc_msgSend_initWithString_language_(v4, v5, a1, a2);
}

uint64_t MecabraWordPropertiesGetProperty(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x24BEDD108](a1, sel_valueForKey_, a2);
}

uint64_t MecabraWordPropertiesGetSortedRadicalList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x24BEDD108](MecabraWordProperties, sel_sortedRadicalList, a3);
}

void MecabraAdaptToTokenizedText(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = sub_20B9A7C5C(2u);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    v7 = 134217984;
    v8 = a1;
    _os_log_debug_impl(&dword_20B7F7000, v6, OS_LOG_TYPE_DEBUG, "[MecabraAdaptToTokenizedText] mecabra:%p", (uint8_t *)&v7, 0xCu);
    if (!a1)
      return;
  }
  else if (!a1)
  {
    return;
  }
  if (a3)
  {
    if (*a1)
      (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a1 + 192))(*a1, a2, a3);
  }
}

void MecabraAdaptToTokenizedTextWithEffectiveTime(_QWORD *a1, uint64_t a2, uint64_t a3, double a4)
{
  NSObject *v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v8 = sub_20B9A7C5C(2u);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    v9 = 134217984;
    v10 = a1;
    _os_log_debug_impl(&dword_20B7F7000, v8, OS_LOG_TYPE_DEBUG, "[MecabraAdaptToTokenizedTextWithEffectiveTime] mecabra:%p", (uint8_t *)&v9, 0xCu);
    if (!a1)
      return;
  }
  else if (!a1)
  {
    return;
  }
  if (a3)
  {
    if (*a1)
      (*(void (**)(_QWORD, uint64_t, uint64_t, double))(*(_QWORD *)*a1 + 200))(*a1, a2, a3, a4);
  }
}

void MecabraAdaptToUntokenizedText(_QWORD *a1, uint64_t a2, uint64_t a3, double a4)
{
  NSObject *v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v8 = sub_20B9A7C5C(2u);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    v9 = 134217984;
    v10 = a1;
    _os_log_debug_impl(&dword_20B7F7000, v8, OS_LOG_TYPE_DEBUG, "[MecabraAdaptToUntokenizedText] mecabra:%p", (uint8_t *)&v9, 0xCu);
    if (!a1)
      return;
  }
  else if (!a1)
  {
    return;
  }
  if (a3)
  {
    if (*a1)
      (*(void (**)(_QWORD, uint64_t, uint64_t, double))(*(_QWORD *)*a1 + 208))(*a1, a2, a3, a4);
  }
}

double MecabraGetLastOfflineAdaptationTime(uint64_t *a1)
{
  uint64_t v1;
  double result;

  if (!a1)
    return 0.0;
  v1 = *a1;
  if (!v1)
    return 0.0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 216))(v1);
  return result;
}

id MecabraCreateFacemarkCandidates(_QWORD *a1)
{
  return MecabraCreateFacemarkCandidatesWithContext(a1, 0);
}

id MecabraCreateFacemarkCandidatesWithContext(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  int v5;
  unsigned int v6;
  signed int v8;
  id v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  const char *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  char v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  const char *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  void *v39;
  const char *v40;
  _QWORD *v42;
  uint64_t *v43;
  const char *v44;
  void *v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  void *v49;
  id v50;
  const char *v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t i;
  void *v57;
  const void *v58;
  const char *v59;
  const void *v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t j;
  void *v69;
  uint64_t v70;
  const char *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  const char *v75;
  char v76;
  uint64_t v77;
  const char *v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  const char *v82;
  const char *v83;
  void *v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  _BYTE v93[128];
  _BYTE v94[128];
  uint64_t v95;

  v95 = *MEMORY[0x24BDAC8D0];
  if (!a1)
    return 0;
  v3 = *a1;
  if (!v3)
    return 0;
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  v6 = sub_20B8D0E3C(v5);
  if (v6 > 5 || ((1 << v6) & 0x27) == 0)
    return 0;
  v8 = v6;
  v9 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
  v12 = (void *)objc_msgSend_set(MEMORY[0x24BDBCEF0], v10, v11);
  if (a2)
    v13 = *a2;
  else
    v13 = 0;
  if ((*(unsigned int (**)(_QWORD, __CFString *, uint64_t, uint64_t))(*(_QWORD *)*a1 + 40))(*a1, kMecabraAnalysisStringForFacemark[0], 16386, v13))
  {
    v17 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 64))(*a1);
    if (v17)
    {
      v18 = (void *)v17;
      do
      {
        v19 = objc_msgSend_rawCandidate(v18, v15, v16);
        if (v19)
        {
          v21 = (_QWORD *)v19;
          if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19))
            v22 = 40;
          else
            v22 = 24;
          v23 = (*(uint64_t (**)(_QWORD *))(*v21 + v22))(v21);
          v25 = objc_msgSend_containsObject_(v12, v24, v23);
        }
        else
        {
          v25 = objc_msgSend_containsObject_(v12, v20, 0);
        }
        if ((v25 & 1) == 0)
        {
          v28 = objc_msgSend_rawCandidate(v18, v26, v27);
          if (v28)
          {
            v30 = (_QWORD *)v28;
            if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 40))(v28))
              v31 = 40;
            else
              v31 = 24;
            v32 = (*(uint64_t (**)(_QWORD *))(*v30 + v31))(v30);
            objc_msgSend_addObject_(v12, v33, v32);
          }
          else
          {
            objc_msgSend_addObject_(v12, v29, 0);
          }
          if (v8)
          {
            objc_msgSend_addObject_(v9, v34, (uint64_t)v18);
          }
          else
          {
            v36 = (_QWORD *)objc_msgSend_rawCandidate(v18, v34, v35);
            if (v36)
            {
              v37 = v36;
              if ((*(uint64_t (**)(_QWORD *))(*v36 + 40))(v36))
                v38 = 40;
              else
                v38 = 24;
              v36 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v37 + v38))(v37);
            }
            v39 = (void *)sub_20B8E43C4(v36, kFacemarkCategoryRecentlyUsed[0]);
            objc_msgSend_addObject_(v9, v40, (uint64_t)v39);

          }
        }
        v18 = (void *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 64))(*a1);
      }
      while (v18);
    }
  }
  if (v8 || *(_BYTE *)sub_20B896F94())
    objc_msgSend_removeAllObjects(v12, v15, v16);
  if ((v8 - 1) < 2 || v8 == 5)
    v8 = 3;
  v42 = (_QWORD *)sub_20B9AE60C();
  v43 = sub_20B9AE6A0(v42, v8, off_254729648[0], off_2547295B0[0]);
  v45 = (void *)MEMORY[0x24BDBCE30];
  if (*((char *)v43 + 23) >= 0)
    v46 = objc_msgSend_stringWithCString_encoding_(MEMORY[0x24BDD17C8], v44, (uint64_t)v43, 4);
  else
    v46 = objc_msgSend_stringWithCString_encoding_(MEMORY[0x24BDD17C8], v44, *v43, 4);
  v48 = objc_msgSend_arrayWithContentsOfFile_(v45, v47, v46);
  if (v48)
  {
    v49 = (void *)v48;
    v84 = v9;
    v50 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
    v89 = 0u;
    v90 = 0u;
    v91 = 0u;
    v92 = 0u;
    v52 = objc_msgSend_countByEnumeratingWithState_objects_count_(v49, v51, (uint64_t)&v89, v94, 16);
    if (v52)
    {
      v54 = v52;
      v55 = *(_QWORD *)v90;
      do
      {
        for (i = 0; i != v54; ++i)
        {
          if (*(_QWORD *)v90 != v55)
            objc_enumerationMutation(v49);
          v57 = *(void **)(*((_QWORD *)&v89 + 1) + 8 * i);
          v58 = (const void *)objc_msgSend_objectForKey_(v57, v53, (uint64_t)CFSTR("string"));
          v60 = (const void *)objc_msgSend_objectForKey_(v57, v59, (uint64_t)CFSTR("category"));
          v61 = sub_20B8E43C4(v58, v60);
          if (v61)
          {
            v62 = (void *)v61;
            objc_msgSend_addObject_(v50, v53, v61);

          }
        }
        v54 = objc_msgSend_countByEnumeratingWithState_objects_count_(v49, v53, (uint64_t)&v89, v94, 16);
      }
      while (v54);
    }
    if (v50)
    {
      v87 = 0u;
      v88 = 0u;
      v85 = 0u;
      v86 = 0u;
      v63 = objc_msgSend_countByEnumeratingWithState_objects_count_(v50, v53, (uint64_t)&v85, v93, 16);
      v9 = v84;
      if (v63)
      {
        v66 = v63;
        v67 = *(_QWORD *)v86;
        do
        {
          for (j = 0; j != v66; ++j)
          {
            if (*(_QWORD *)v86 != v67)
              objc_enumerationMutation(v50);
            v69 = *(void **)(*((_QWORD *)&v85 + 1) + 8 * j);
            v70 = objc_msgSend_rawCandidate(v69, v64, v65);
            if (v70)
            {
              v72 = (_QWORD *)v70;
              if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 40))(v70))
                v73 = 40;
              else
                v73 = 24;
              v74 = (*(uint64_t (**)(_QWORD *))(*v72 + v73))(v72);
              v76 = objc_msgSend_containsObject_(v12, v75, v74);
            }
            else
            {
              v76 = objc_msgSend_containsObject_(v12, v71, 0);
            }
            if ((v76 & 1) == 0)
            {
              v77 = objc_msgSend_rawCandidate(v69, v64, v65);
              if (v77)
              {
                v79 = (_QWORD *)v77;
                if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v77 + 40))(v77))
                  v80 = 40;
                else
                  v80 = 24;
                v81 = (*(uint64_t (**)(_QWORD *))(*v79 + v80))(v79);
                objc_msgSend_addObject_(v12, v82, v81);
              }
              else
              {
                objc_msgSend_addObject_(v12, v78, 0);
              }
              objc_msgSend_addObject_(v84, v83, (uint64_t)v69);
            }
          }
          v66 = objc_msgSend_countByEnumeratingWithState_objects_count_(v50, v64, (uint64_t)&v85, v93, 16);
        }
        while (v66);
      }

    }
    else
    {
      return v84;
    }
  }
  return v9;
}

uint64_t sub_20B8E43C4(const void *a1, const void *a2)
{
  uint64_t v4;
  MecabraCandidate *v5;
  const char *v6;

  v4 = operator new();
  sub_20B8B7314(v4, a1, a2);
  v5 = [MecabraCandidate alloc];
  return objc_msgSend_initWithCandidate_(v5, v6, v4);
}

void sub_20B8E4424(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10E1C4064B4762ELL);
  _Unwind_Resume(a1);
}

void MecabraSetDynamicLanguageModelAppContext(_QWORD *a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  uint64_t v6;
  __int16 v7;
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20B9A7C5C(2u);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    v5 = 138412546;
    v6 = a2;
    v7 = 2048;
    v8 = a1;
    _os_log_debug_impl(&dword_20B7F7000, v4, OS_LOG_TYPE_DEBUG, "[MecabraSetDynamicLanguageModelAppContext] %@ (mecabra:%p)", (uint8_t *)&v5, 0x16u);
    if (!a1)
      return;
  }
  else if (!a1)
  {
    return;
  }
  if (*a1)
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 136))(*a1, a2);
}

uint64_t MecabraEnumerateSyllabifiedStringLengths(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (result)
  {
    result = *(_QWORD *)result;
    if (result)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 384))(result, a3, a4, a5);
  }
  return result;
}

uint64_t MecabraCreateCPGesture(int a1, char a2, double a3, double a4, double a5, double a6)
{
  uint64_t v12;

  v12 = operator new();
  *(_QWORD *)(v12 + 16) = 0;
  *(_QWORD *)(v12 + 24) = 0;
  *(double *)(v12 + 32) = a3;
  *(double *)(v12 + 40) = a4;
  *(double *)(v12 + 48) = a5;
  *(double *)(v12 + 56) = a6;
  *(_DWORD *)(v12 + 64) = a1;
  *(_BYTE *)(v12 + 68) = a2;
  *(_QWORD *)v12 = &unk_24C465A90;
  *(_QWORD *)(v12 + 8) = 0;
  return sub_20B8B0430(v12);
}

uint64_t MecabraCreateTypeGesture(__int16 a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)v2 = &unk_24C4610F0;
  *(_QWORD *)(v2 + 8) = 0;
  *(_WORD *)(v2 + 32) = a1;
  return sub_20B8B0430(v2);
}

uint64_t MecabraCreateTypeGestureWithTouchEvent(__int16 a1, int a2, char a3, double a4, double a5, double a6, double a7)
{
  uint64_t v14;

  v14 = operator new();
  *(_QWORD *)(v14 + 16) = 0;
  *(_QWORD *)(v14 + 24) = 0;
  *(double *)(v14 + 32) = a4;
  *(double *)(v14 + 40) = a5;
  *(double *)(v14 + 48) = a6;
  *(double *)(v14 + 56) = a7;
  *(_DWORD *)(v14 + 64) = a2;
  *(_BYTE *)(v14 + 68) = a3;
  *(_QWORD *)v14 = &unk_24C461BC0;
  *(_QWORD *)(v14 + 8) = 0;
  *(_WORD *)(v14 + 70) = a1;
  return sub_20B8B0430(v14);
}

void MecabraGestureAddKeyAndLoglikelihoodPair(uint64_t a1, __int16 a2, float a3)
{
  if (a1)
    sub_20B947E04(*(_QWORD **)(a1 + 24), a2, a3);
}

uint64_t MecabraCreateLayoutKey(UniChar a1, float a2, float a3, float a4, float a5)
{
  uint64_t v10;
  UniChar chars;

  v10 = operator new();
  chars = a1;
  *(_WORD *)v10 = a1;
  *(float *)(v10 + 4) = a2;
  *(float *)(v10 + 8) = a3;
  *(float *)(v10 + 12) = a4;
  *(float *)(v10 + 16) = a5;
  *(_QWORD *)(v10 + 24) = CFStringCreateWithCharacters(0, &chars, 1);
  return sub_20B8B0504(v10);
}

void sub_20B8E4744(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x1060C40B5E1536ALL);
  _Unwind_Resume(a1);
}

void MecabraSetKeyboardLayout(_QWORD *a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20B9A7C5C(2u);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    v5 = 134217984;
    v6 = a1;
    _os_log_debug_impl(&dword_20B7F7000, v4, OS_LOG_TYPE_DEBUG, "[MecabraSetKeyboardLayout] mecabra:%p", (uint8_t *)&v5, 0xCu);
    if (!a1)
      return;
  }
  else if (!a1)
  {
    return;
  }
  if (*a1)
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 256))(*a1, a2);
}

uint64_t MecabraCreateSegments(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  if (a1 && a2 && (v2 = *a1) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 344))(v2);
  else
    return 0;
}

_QWORD *MecabraConvertedKanaCreateFromRomajiString(const __CFString *a1, int a2)
{
  CFStringRef v2;
  const __CFAllocator *v3;
  __CFDictionary *Mutable;
  _QWORD *v5;
  CFNumberRef v6;
  _QWORD *v7;
  CFNumberRef key;
  __int128 v10;
  CFIndex capacity[2];
  int v12;

  if (!a1)
    return 0;
  v10 = 0u;
  *(_OWORD *)capacity = 0u;
  v12 = 1065353216;
  v2 = sub_20B87B810(a1, 0, (uint64_t)&v10, a2 != 0);
  v3 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  if (v2)
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], capacity[1], MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    v5 = (_QWORD *)capacity[0];
    if (capacity[0])
    {
      do
      {
        key = CFNumberCreate(v3, kCFNumberLongType, v5 + 2);
        v6 = CFNumberCreate(v3, kCFNumberLongType, v5 + 3);
        CFDictionaryAddValue(Mutable, key, v6);
        if (v6)
          CFRelease(v6);
        if (key)
          CFRelease(key);
        v5 = (_QWORD *)*v5;
      }
      while (v5);
    }
    v7 = (_QWORD *)operator new();
    *v7 = v2;
  }
  else
  {
    Mutable = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, 0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    v7 = (_QWORD *)operator new();
    *v7 = &stru_24C4B3660;
  }
  v7[1] = Mutable;
  sub_20B84055C((uint64_t)&v10);
  return v7;
}

void sub_20B8E49D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B84055C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t MecabraConvertedKanaGetKana(uint64_t result)
{
  if (result)
    return *(_QWORD *)result;
  return result;
}

uint64_t MecabraConvertedKanaGetAlignment(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 8);
  return result;
}

CFTypeRef *MecabraConvertedKanaRelease(CFTypeRef *result)
{
  CFTypeRef *v1;

  if (result)
  {
    v1 = result;
    CFRelease(*result);
    CFRelease(v1[1]);
    JUMPOUT(0x20BD39CB0);
  }
  return result;
}

CFStringRef MecabraReverseConvertedRomajiCreateFromKanaString(const __CFString *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  CFIndex v4;
  CFStringRef v5;
  void *__p[2];
  unsigned __int8 v8;
  uint64_t v9;
  CFIndex v10;

  if (!a1)
    return 0;
  v10 = 0;
  sub_20B8D0624(a1, &v10, &v9);
  v1 = v9;
  if (v9)
    v2 = v10;
  else
    v2 = 0;
  sub_20B947404(v9, v2, __p);
  if ((v8 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v8 & 0x80u) == 0)
    v4 = v8;
  else
    v4 = (CFIndex)__p[1];
  v5 = CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x24BDBD240], (const UniChar *)v3, v4);
  if ((char)v8 < 0)
    operator delete(__p[0]);
  if (v1)
    MEMORY[0x20BD39C80](v1, 0x1000C80BDFB0063);
  return v5;
}

void sub_20B8E4B40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (v15)
    MEMORY[0x20BD39C80](v15, 0x1000C80BDFB0063);
  _Unwind_Resume(exception_object);
}

_QWORD *MecabraJapaneseLMCreate(const __CFURL *cf, const __CFURL *a2, int a3)
{
  CFURLRef v4;
  const __CFURL *v5;
  CFURLRef v6;
  int v7;
  const __CFString *v8;
  uint64_t v9;
  const __CFURL *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  uint64_t v16[2];
  CFTypeRef cfa;

  v4 = a2;
  v5 = cf;
  if (cf)
  {
    CFRetain(cf);
    if (v4)
    {
      CFRetain(v4);
      v6 = 0;
      cfa = 0;
      goto LABEL_14;
    }
  }
  else if (a2)
  {
    CFRetain(a2);
    v7 = 0;
    goto LABEL_7;
  }
  v7 = 1;
LABEL_7:
  v8 = sub_20B9AF1E8("ja");
  cfa = v8;
  v6 = CFURLCreateCopyAppendingPathComponent(0, (CFURLRef)v8, off_254728288, 1u);
  if (v8)
    CFRelease(v8);
  cfa = v6;
  if (!v5)
  {
    v5 = CFURLCreateCopyAppendingPathComponent(0, v6, off_254728290, 0);
    if (!v7)
      goto LABEL_14;
    goto LABEL_13;
  }
  if (v7)
LABEL_13:
    v4 = CFURLCreateCopyAppendingPathComponent(0, v6, off_2547282A0, 0);
LABEL_14:
  v9 = operator new();
  sub_20B8CECE8(v9, v4);
  if (a3)
  {
    v10 = CFURLCreateCopyAppendingPathComponent(0, v6, off_254728298, 0);
    v16[1] = (uint64_t)v10;
    v11 = operator new();
    v16[0] = v9;
    sub_20B945280(v11, v10, v16);
    if (v16[0])
      (*(void (**)(uint64_t))(*(_QWORD *)v16[0] + 8))(v16[0]);
    if (v10)
      CFRelease(v10);
  }
  else
  {
    v11 = operator new();
    v15 = v9;
    sub_20B9AFAF4(v11, v5, &v15);
    v12 = v15;
    v15 = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  CFRelease(v5);
  CFRelease(v4);
  v13 = (_QWORD *)operator new();
  *v13 = v11;
  if (cfa)
    CFRelease(cfa);
  return v13;
}

void sub_20B8E4DC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  if (a2)
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
  MEMORY[0x20BD39CB0](v4, 0x10B1C406662A6EBLL);
  sub_20B876164((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t *MecabraJapaneseLMRelease(uint64_t *result)
{
  uint64_t v1;

  if (result)
  {
    v1 = *result;
    if (v1)
      (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
    JUMPOUT(0x20BD39CB0);
  }
  return result;
}

uint64_t MecabraJapaneseLMIsValid(uint64_t result)
{
  if (result)
  {
    result = *(_QWORD *)result;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  }
  return result;
}

CFStringRef MecabraInputStringCreateForSentencePiece(const __CFString *a1, void *a2, uint64_t a3)
{
  CFStringRef v3;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  const void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  void *__p[2];
  char v20;

  v3 = a1;
  if (a1)
  {
    if (a1->isa
      && (v5 = objc_msgSend_rawCandidate(a2, (const char *)a2, a3)) != 0
      && ((v6 = v5, (*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5) == 1)
       || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 72))(v6) == 7)
      && (v9 = (const void *)objc_msgSend_rawCandidate(a2, v7, v8)) != 0
      && (v10 = __dynamic_cast(v9, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0)) != 0&& (v11 = __dynamic_cast(v10, (const struct __class_type_info *)&unk_24C45C148, (const struct __class_type_info *)&unk_24C45C5C8, 0)) != 0)
    {
      v12 = v11;
      v13 = (*(uint64_t (**)(void *))(*(_QWORD *)v11 + 544))(v11);
      v15 = v14;
      v16 = (*(uint64_t (**)(void *))(*(_QWORD *)v12 + 304))(v12);
      (*(void (**)(void **__return_ptr, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD))(**((_QWORD **)v3->isa + 1)
                                                                                             + 32))(__p, *((_QWORD *)v3->isa + 1), v13, v15, v16, 0);
      if (v20 >= 0)
        v17 = __p;
      else
        v17 = (void **)__p[0];
      v3 = CFStringCreateWithCString(0, (const char *)v17, 0x8000100u);
      if (v20 < 0)
        operator delete(__p[0]);
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

void sub_20B8E5068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__CFArray *MecabraSentencePieceIDsCreateForCandidate(__CFArray *a1, void *a2, uint64_t a3)
{
  __CFArray *Mutable;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  const void *v9;
  void *v10;
  void *v11;
  _DWORD *v12;
  _DWORD *v13;
  CFNumberRef v14;
  int valuePtr;
  _DWORD *v17;
  _DWORD *v18;

  Mutable = a1;
  if (a1)
  {
    if (*(_QWORD *)a1
      && (v5 = objc_msgSend_rawCandidate(a2, (const char *)a2, a3)) != 0
      && ((v6 = v5, (*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5) == 1)
       || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 72))(v6) == 7)
      && (v9 = (const void *)objc_msgSend_rawCandidate(a2, v7, v8)) != 0
      && (v10 = __dynamic_cast(v9, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0)) != 0&& (v11 = __dynamic_cast(v10, (const struct __class_type_info *)&unk_24C45C148, (const struct __class_type_info *)&unk_24C45C5C8, 0)) != 0)
    {
      (*(void (**)(_DWORD **__return_ptr, _QWORD, void *))(**(_QWORD **)Mutable + 16))(&v17, *(_QWORD *)Mutable, v11);
      Mutable = CFArrayCreateMutable(0, v18 - v17, MEMORY[0x24BDBD690]);
      v12 = v17;
      v13 = v18;
      if (v17 != v18)
      {
        do
        {
          valuePtr = *v12;
          v14 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
          CFArrayAppendValue(Mutable, v14);
          if (v14)
            CFRelease(v14);
          ++v12;
        }
        while (v12 != v13);
        v12 = v17;
      }
      if (v12)
      {
        v18 = v12;
        operator delete(v12);
      }
    }
    else
    {
      return 0;
    }
  }
  return Mutable;
}

void sub_20B8E51E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MecabraGetRNNLMProbabilities(const void **a1, void **a2, int64_t a3, void *a4)
{
  int64_t v4;
  uint64_t v5;
  void **v6;
  const void *v8;
  int v10;
  const void *v11;
  const struct __class_type_info *v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  const void *v16;
  void *v17;
  void *v18;
  _BYTE *v19;
  void *__p;
  _BYTE *v22;
  uint64_t v23[3];
  _QWORD v24[16];

  if (!a1)
    return 0;
  v4 = a3;
  v5 = 0;
  if (!a3)
    return v5;
  v6 = a2;
  if (!a2)
    return v5;
  v8 = *a1;
  if (!v8)
    return v5;
  v10 = (*(uint64_t (**)(const void *))(*(_QWORD *)v8 + 56))(v8);
  v11 = *a1;
  if (v10 != 1)
  {
    if ((*(unsigned int (**)(const void *))(*(_QWORD *)v11 + 56))(v11) == 2)
    {
      v11 = *a1;
      if (*a1)
      {
        v12 = (const struct __class_type_info *)&unk_24C45C270;
        goto LABEL_11;
      }
LABEL_13:
      v13 = 0;
      goto LABEL_14;
    }
    return 0;
  }
  if (!v11)
    goto LABEL_13;
  v12 = (const struct __class_type_info *)&unk_24C45C008;
LABEL_11:
  v13 = __dynamic_cast(v11, (const struct __class_type_info *)&unk_24C45C430, v12, 0);
LABEL_14:
  sub_20B9C2E58((uint64_t)v24, 0);
  (*(void (**)(void *, _QWORD *))(*(_QWORD *)v13 + 32))(v13, v24);
  memset(v23, 0, sizeof(v23));
  sub_20B8E5488(v23, v4);
  if (v4 < 1)
  {
LABEL_21:
    (*(void (**)(void **__return_ptr, void *, uint64_t *, _QWORD))(*(_QWORD *)v13 + 64))(&__p, v13, v23, 0);
    v19 = __p;
    if (a4 && v22 != __p)
      memmove(a4, __p, v22 - (_BYTE *)__p);
    if (v19)
    {
      v22 = v19;
      operator delete(v19);
    }
    v5 = 1;
  }
  else
  {
    while (1)
    {
      v16 = (const void *)objc_msgSend_rawCandidate(*v6, v14, v15);
      if (!v16)
        break;
      v17 = __dynamic_cast(v16, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
      if (!v17)
        break;
      v18 = __dynamic_cast(v17, (const struct __class_type_info *)&unk_24C45C148, (const struct __class_type_info *)&unk_24C45C5C8, 0);
      if (!v18)
        break;
      (*(void (**)(void **__return_ptr, void *, void *))(*(_QWORD *)v13 + 16))(&__p, v13, v18);
      sub_20B8E5538(v23, (uint64_t)&__p);
      if (__p)
      {
        v22 = __p;
        operator delete(__p);
      }
      ++v6;
      if (!--v4)
        goto LABEL_21;
    }
    v5 = 0;
  }
  __p = v23;
  sub_20B83B400((void ***)&__p);
  sub_20B8CD3CC(v24);
  return v5;
}

void sub_20B8E5438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  __p = &a12;
  sub_20B83B400((void ***)&__p);
  sub_20B8CD3CC(&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8E5488(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_20B80CDD8();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_20B828D70(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 24 * v6;
    sub_20B83CA3C(a1, v7);
    return sub_20B83CBC8((uint64_t)v7);
  }
  return result;
}

void sub_20B8E5524(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B83CBC8((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B8E5538(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD v17[5];

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_20B80CDD8();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v17[4] = v4;
    v13 = (char *)sub_20B828D70(v4, v12);
    v14 = &v13[24 * v9];
    v17[0] = v13;
    v17[1] = v14;
    v17[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v17[2] = v14 + 24;
    sub_20B83CA3C(a1, v17);
    v8 = (_QWORD *)a1[1];
    sub_20B83CBC8((uint64_t)v17);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return v8 - 3;
}

void sub_20B8E5664(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B83CBC8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t MecabraJapaneseLMRerankerCreate(uint64_t *a1, const __CFURL *a2, unsigned int a3)
{
  const __CFString *v6;
  const __CFURL *v7;
  _BYTE *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  __int128 v18;

  v6 = sub_20B9AF1E8("ja");
  v7 = CFURLCreateCopyAppendingPathComponent(0, (CFURLRef)v6, off_2547282A8, 0);
  v8 = sub_20B896F94();
  if (!sub_20B95B9A8((uint64_t)v8, v7))
  {
    v10 = 0;
    if (!v7)
      goto LABEL_6;
    goto LABEL_5;
  }
  v9 = sub_20B969EE8(a3, 0, v8);
  v10 = operator new();
  *(_OWORD *)v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_QWORD *)(v10 + 32) = 0;
  *(_DWORD *)(v10 + 32) = v9;
  v11 = operator new();
  sub_20B896E7C(v11, a2, v10 + 32, 0);
  *(_QWORD *)v10 = v11;
  v12 = (_QWORD *)operator new();
  v13 = *a1;
  v14 = *(_QWORD *)v10;
  *v12 = &unk_24C461CA0;
  v12[1] = v13;
  v12[2] = v14;
  v12[3] = v10 + 32;
  *(_QWORD *)(v10 + 8) = v12;
  v15 = (_QWORD *)operator new();
  *v15 = &unk_24C4628E0;
  v15[1] = 0;
  *(_QWORD *)(v10 + 16) = v15;
  v16 = operator new();
  v18 = *(_OWORD *)(v10 + 8);
  *(_QWORD *)v16 = &unk_24C462318;
  *(_QWORD *)(v16 + 8) = sub_20B896F94();
  *(_QWORD *)(v16 + 16) = v10 + 32;
  *(_QWORD *)v16 = &unk_24C461F08;
  *(_OWORD *)(v16 + 24) = v18;
  *(_QWORD *)(v10 + 24) = v16;
  if (v7)
LABEL_5:
    CFRelease(v7);
LABEL_6:
  if (v6)
    CFRelease(v6);
  return v10;
}

void sub_20B8E5868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  const void *v5;
  va_list va;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, const void *);
  MEMORY[0x20BD39CB0](v3, 0xF1C40D1B72B11);
  sub_20B876164((const void **)va, 0);
  sub_20B876164((const void **)va1, 0);
  _Unwind_Resume(a1);
}

_QWORD *MecabraJapaneseLMRerankerRelease(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  if (result)
  {
    v1 = result;
    v2 = result[3];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = v1[2];
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    if (*v1)
      (*(void (**)(_QWORD))(*(_QWORD *)*v1 + 8))(*v1);
    JUMPOUT(0x20BD39CB0);
  }
  return result;
}

uint64_t MecabraJapaneseLMRerankCandidates(uint64_t a1, const char *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t v5;
  void **v6;
  uint64_t v8;
  const void *v9;
  void *v10;
  uint64_t (***v11)(_QWORD);
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t *i;
  uint64_t v17;
  MecabraCandidate *v18;
  const char *v19;
  _QWORD *v21[16];
  void *v22;
  _BYTE v23[32];
  int v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  _QWORD v28[3];
  _QWORD *v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (!a1)
    return 0;
  v4 = a4;
  v5 = 0;
  if (a4)
  {
    v6 = (void **)a2;
    if (a2)
    {
      if (*(_QWORD *)(a1 + 24))
      {
        v8 = a3;
        v22 = &unk_24C460D28;
        memset(v23, 0, sizeof(v23));
        v24 = 1065353216;
        v26 = 0;
        v27 = 0;
        v25 = 0;
        if (a3 >= 1)
        {
          while (1)
          {
            v9 = (const void *)objc_msgSend_rawCandidate(*v6, a2, a3);
            if (!v9
              || (v10 = __dynamic_cast(v9, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0)) == 0|| (v11 = (uint64_t (***)(_QWORD))__dynamic_cast(v10, (const struct __class_type_info *)&unk_24C45C148, (const struct __class_type_info *)&unk_24C45C5C8, 0)) == 0)
            {
              v5 = 0;
              goto LABEL_22;
            }
            v21[0] = (_QWORD *)(**v11)(v11);
            v28[0] = &unk_24C459188;
            v29 = v28;
            sub_20B8FDA94(&v22, v21, 1, 0, (uint64_t)v28);
            v12 = v29;
            if (v29 == v28)
              break;
            if (v29)
            {
              v13 = 5;
LABEL_13:
              (*(void (**)(void))(*v12 + 8 * v13))();
            }
            v14 = v21[0];
            v21[0] = 0;
            if (v14)
              (*(void (**)(_QWORD *))(*v14 + 16))(v14);
            ++v6;
            if (!--v8)
              goto LABEL_17;
          }
          v12 = v28;
          v13 = 4;
          goto LABEL_13;
        }
LABEL_17:
        sub_20B8B2334(0);
        sub_20B9C2E58((uint64_t)v21, (uint64_t)&qword_25472C9B0);
        (*(void (**)(_QWORD, void **, _QWORD **))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), &v22, v21);
        v15 = v25;
        for (i = v26; v15 != i; ++v15)
        {
          v17 = *v15;
          *v15 = 0;
          v18 = [MecabraCandidate alloc];
          *v4++ = objc_msgSend_initWithCandidate_(v18, v19, v17);
        }
        sub_20B8CD3CC(v21);
        v5 = 1;
LABEL_22:
        v22 = &unk_24C460D28;
        v21[0] = &v25;
        sub_20B882410((void ***)v21);
        sub_20B84055C((uint64_t)v23);
      }
    }
  }
  return v5;
}

void sub_20B8E5BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_20B8CD3CC(&a10);
  sub_20B881268((uint64_t)&a26);
  _Unwind_Resume(a1);
}

CFDictionaryRef MecabraJapaneseCopyParameters()
{
  void *v0;

  v0 = sub_20B896F94();
  return sub_20B95BFDC((uint64_t)v0);
}

uint64_t MecabraJapaneseUpdateParameters(const __CFDictionary *a1)
{
  void *v2;

  v2 = sub_20B896F94();
  return sub_20B95BA8C((uint64_t)v2, a1);
}

uint64_t MecabraGetConversionEngine(uint64_t *a1)
{
  uint64_t v1;

  if (a1 && (v1 = *a1) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 416))(v1);
  else
    return 0;
}

const void **sub_20B8E5C90(const void **a1)
{
  sub_20B87E150(a1 + 8, 0);
  sub_20B876164(a1 + 7, 0);
  sub_20B876164(a1 + 6, 0);
  sub_20B876164(a1 + 5, 0);
  sub_20B88B74C(a1 + 4, 0);
  sub_20B876164(a1 + 3, 0);
  sub_20B876164(a1 + 2, 0);
  return a1;
}

void sub_20B8E5D08(uint64_t a1)
{
  sub_20B8E680C(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B8E5D2C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t sub_20B8E5D34(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 40);
}

uint64_t sub_20B8E5D3C(uint64_t a1, const __CFString *a2, unint64_t a3, uint64_t a4, const __CFArray *a5, const __CFArray *a6)
{
  __CFArray *v11;
  __CFSet *v12;

  v11 = *(__CFArray **)(a1 + 64);
  if (v11)
    CFArrayRemoveAllValues(v11);
  *(_DWORD *)(a1 + 56) = 0;
  v12 = *(__CFSet **)(a1 + 72);
  if (v12)
    CFSetRemoveAllValues(v12);
  return sub_20B95D438(*(_QWORD *)(a1 + 16), a2, a3, 0, a5, a6);
}

uint64_t sub_20B8E5DAC(uint64_t a1, const __CFString *a2, unint64_t a3, uint64_t a4)
{
  __CFArray *v8;
  __CFSet *v9;
  const __CFString *v10;
  uint64_t v11;
  const __CFString *v12;
  uint64_t v13;

  v8 = *(__CFArray **)(a1 + 64);
  if (v8)
    CFArrayRemoveAllValues(v8);
  *(_DWORD *)(a1 + 56) = 0;
  v9 = *(__CFSet **)(a1 + 72);
  if (v9)
    CFSetRemoveAllValues(v9);
  if (a4)
  {
    v10 = *(const __CFString **)(a4 + 72);
    if (v10)
    {
      v11 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 1168);
      if (v11)
        sub_20B9C4198(v11, v10);
    }
    v12 = *(const __CFString **)(a4 + 80);
    if (v12)
    {
      v13 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 1168);
      if (v13)
        sub_20B9C4244(v13, v12);
    }
  }
  return sub_20B95DE78(*(_QWORD *)(a1 + 16), a2, a3, a4);
}

unint64_t sub_20B8E5E3C(uint64_t a1, CFArrayRef theArray, unint64_t a3, uint64_t a4)
{
  __CFArray *v8;
  __CFSet *v9;
  const __CFString *v10;
  uint64_t v11;
  const __CFString *v12;
  uint64_t v13;

  v8 = *(__CFArray **)(a1 + 64);
  if (v8)
    CFArrayRemoveAllValues(v8);
  *(_DWORD *)(a1 + 56) = 0;
  v9 = *(__CFSet **)(a1 + 72);
  if (v9)
    CFSetRemoveAllValues(v9);
  if (a4)
  {
    v10 = *(const __CFString **)(a4 + 72);
    if (v10)
    {
      v11 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 1168);
      if (v11)
        sub_20B9C4198(v11, v10);
    }
    v12 = *(const __CFString **)(a4 + 80);
    if (v12)
    {
      v13 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 1168);
      if (v13)
        sub_20B9C4244(v13, v12);
    }
  }
  return sub_20B8C0974(*(_QWORD *)(a1 + 16), theArray, a3, a4);
}

__CFArray *sub_20B8E5ECC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_20B95DF54(*(_QWORD *)(a1 + 16), a2, a3, a4);
}

void *sub_20B8E5ED4(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  void *i;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  const __CFSet *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  const void *v20;
  const char *v21;
  uint64_t v22;
  __CFSet *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  const void *v28;

  for (i = (void *)sub_20B95E38C(*(_QWORD *)(a1 + 16)); i; i = (void *)sub_20B95E38C(*(_QWORD *)(a1 + 16)))
  {
    v5 = objc_msgSend_rawCandidate(i, v2, v3);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5) == 6)
      break;
    v8 = objc_msgSend_rawCandidate(i, v6, v7);
    if (v8)
    {
      v9 = (_QWORD *)v8;
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8) ? 40 : 24;
      if ((*(uint64_t (**)(_QWORD *))(*v9 + v10))(v9))
      {
        v13 = objc_msgSend_rawCandidate(i, v11, v12);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 96))(v13) == 89)
          return i;
        v16 = *(const __CFSet **)(a1 + 72);
        v17 = objc_msgSend_rawCandidate(i, v14, v15);
        if (v17)
        {
          v18 = (_QWORD *)v17;
          v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17) ? 40 : 24;
          v20 = (const void *)(*(uint64_t (**)(_QWORD *))(*v18 + v19))(v18);
        }
        else
        {
          v20 = 0;
        }
        if (!CFSetContainsValue(v16, v20))
        {
          v23 = *(__CFSet **)(a1 + 72);
          v24 = objc_msgSend_rawCandidate(i, v21, v22);
          if (v24)
          {
            v25 = (_QWORD *)v24;
            v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 40))(v24);
            v27 = 40;
            if (!v26)
              v27 = 24;
            v28 = (const void *)(*(uint64_t (**)(_QWORD *))(*v25 + v27))(v25);
          }
          else
          {
            v28 = 0;
          }
          CFSetAddValue(v23, v28);
          return i;
        }
      }
    }
  }
  return i;
}

void sub_20B8E6044(uint64_t a1)
{
  sub_20B95E328(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8E604C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL4 v3;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = sub_20B88826C(a2, kMecabraContextOptionPrivateMode) != (const void *)*MEMORY[0x24BDBD270];
  return sub_20B95D9D4(v2, 0, 0, v3);
}

uint64_t sub_20B8E60A0(uint64_t *a1, uint64_t a2)
{
  void *v4;
  char v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  __CFSet *v12;

  if (CFArrayGetCount(*(CFArrayRef *)(a2 + 32)) == 1)
  {
    v4 = (void *)sub_20B96ABC8(a2, 0);
    v5 = sub_20B93AAB0((uint64_t)v4);
    if (v4)
    {
      if ((v5 & 1) != 0)
      {
        v8 = objc_msgSend_rawCandidate(v4, v6, v7);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8) == 2
          || (v11 = objc_msgSend_rawCandidate(v4, v9, v10),
              (*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 72))(v11) == 3))
        {
          if (a1[3])
            objc_msgSend_rawCandidate(v4, v9, v10);
          return sub_20B95E5E8(a1[2], a2);
        }
      }
    }
  }
  else
  {
    sub_20B93AAB0(0);
  }
  v12 = (__CFSet *)a1[9];
  if (v12)
    CFSetRemoveAllValues(v12);
  return sub_20B95E5E8(a1[2], a2);
}

uint64_t sub_20B8E615C(uint64_t a1, const char *a2, void *a3)
{
  return sub_20B95E240(*(_QWORD *)(a1 + 16), a2, a3);
}

uint64_t sub_20B8E6164(uint64_t a1, void *a2, uint64_t a3)
{
  __CFSet *v6;

  v6 = *(__CFSet **)(a1 + 72);
  if (v6)
    CFSetRemoveAllValues(v6);
  return sub_20B95D9D4(*(_QWORD *)(a1 + 16), a2, a3, 1);
}

uint64_t sub_20B8E61AC(uint64_t a1)
{
  return sub_20B9730D8(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 176));
}

uint64_t sub_20B8E61B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 16);
  sub_20B9727D8(*(_QWORD *)(v1 + 176), 1);
  result = *(_QWORD *)(v1 + 192);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 112))(result);
  return result;
}

uint64_t sub_20B8E61FC(uint64_t a1)
{
  return sub_20BA2F3DC(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 1168));
}

uint64_t sub_20B8E6208(uint64_t a1, const __CFString *a2)
{
  uint64_t result;

  result = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 1168);
  if (result)
    return sub_20B9C4198(result, a2);
  return result;
}

void sub_20B8E621C(uint64_t a1, const void *a2)
{
  sub_20B8C9FE4(*(_QWORD *)(a1 + 16), a2);
}

void sub_20B8E6224(uint64_t a1, const void *a2)
{
  sub_20B8CA0EC(*(_QWORD *)(a1 + 16), a2);
}

uint64_t sub_20B8E622C(uint64_t a1)
{
  return sub_20B9727D8(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 176), 1);
}

uint64_t sub_20B8E6240(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 16) + 176) + 104))(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 176));
}

uint64_t sub_20B8E6254(uint64_t a1, void *a2, uint64_t a3)
{
  const void *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const void *v10;

  v5 = (const void *)objc_msgSend_rawCandidate(a2, (const char *)a2, a3);
  if (v5
    && (v8 = __dynamic_cast(v5, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0)) != 0)
  {
    if ((*(unsigned int (**)(void *, _QWORD, _QWORD))(*(_QWORD *)v8 + 248))(v8, 0, 0))
      return (*(uint64_t (**)(_QWORD, void *))(**(_QWORD **)(*(_QWORD *)(a1 + 16) + 176) + 96))(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 176), a2);
  }
  else
  {
    v10 = (const void *)objc_msgSend_rawCandidate(a2, v6, v7);
    if (v10)
      __dynamic_cast(v10, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45B850, 0);
  }
  return 0;
}

BOOL sub_20B8E62FC(uint64_t a1, uint64_t a2, const __CFArray *a3)
{
  return sub_20B97ED0C(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 176), a2, a3, 0, 0);
}

BOOL sub_20B8E6310(uint64_t a1, uint64_t a2, const __CFArray *a3, double a4)
{
  uint64_t v4;
  double v6;

  v4 = *(_QWORD *)(a1 + 16);
  v6 = a4;
  return sub_20B97ED0C(*(_QWORD *)(v4 + 176), a2, a3, 0, (uint64_t)&v6);
}

void sub_20B8E6340(uint64_t a1, uint64_t a2, CFStringRef theString, double a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[7];

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(v4 + 1048);
  v6[0] = MEMORY[0x24BDAC760];
  v6[1] = 0x40000000;
  v6[2] = sub_20B8C9F20;
  v6[3] = &unk_24C49BCA8;
  v6[4] = v4;
  v6[5] = a2;
  *(double *)&v6[6] = a4;
  sub_20B96DC20(v5, theString, (uint64_t)v6);
}

uint64_t sub_20B8E63A4()
{
  return LMLanguageModelGetLastOfflineAdaptationTime();
}

CFMutableArrayRef sub_20B8E63B4()
{
  return CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, 0);
}

uint64_t sub_20B8E63CC()
{
  return 0;
}

BOOL sub_20B8E63D4(uint64_t a1, const void *a2)
{
  const __CFAllocator *v4;
  const __CFArray *v5;
  _BOOL8 result;
  void *values;

  if (a2)
  {
    v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    values = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    CFDictionarySetValue((CFMutableDictionaryRef)values, kMecabraAssetDataFilePathsKey, a2);
    v5 = CFArrayCreate(v4, (const void **)&values, 1, MEMORY[0x24BDBD690]);
    LOBYTE(v4) = sub_20B88B578(*(_QWORD *)(a1 + 32), 2, v5);
    CFRelease(values);
    CFRelease(v5);
    if ((v4 & 1) == 0)
      return 0;
  }
  else
  {
    result = sub_20B8E64B4(a1, 2, 0);
    if (!result)
      return result;
  }
  sub_20B8CB940(*(_QWORD **)(a1 + 16));
  return 1;
}

BOOL sub_20B8E64B4(uint64_t a1, int a2, const __CFArray *a3)
{
  _BOOL8 v4;

  v4 = sub_20B88B578(*(_QWORD *)(a1 + 32), a2, a3);
  if (v4)
    sub_20B8CB940(*(_QWORD **)(a1 + 16));
  return v4;
}

void sub_20B8E64EC(uint64_t a1, const __CFArray *a2)
{
  sub_20B8C0B78(*(_QWORD *)(a1 + 16), a2);
}

uint64_t sub_20B8E64F4(uint64_t result, char a2)
{
  *(_BYTE *)(*(_QWORD *)(result + 16) + 229) = a2;
  return result;
}

uint64_t sub_20B8E6500(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 1008);
}

uint64_t sub_20B8E650C(uint64_t result, char a2)
{
  *(_BYTE *)(*(_QWORD *)(result + 16) + 1024) = a2;
  return result;
}

__CFDictionary *sub_20B8E6518(uint64_t a1, int a2, const __CFDictionary *a3)
{
  return sub_20B95FA74(*(_QWORD **)(a1 + 16), a2, a3);
}

uint64_t sub_20B8E6520(uint64_t a1)
{
  return sub_20B8CA2E4(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8E6528(uint64_t a1)
{
  return sub_20B8CA344(*(_QWORD *)(a1 + 16));
}

void sub_20B8E6530(uint64_t a1)
{
  sub_20B8CA39C(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8E6538(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 16);
  if (a3 >= 1)
  {
    v4 = *(_QWORD *)(v3 + 176);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  }
  return sub_20B8A8990(*(_QWORD *)(v3 + 3880));
}

uint64_t sub_20B8E6574()
{
  return 0;
}

std::string::size_type sub_20B8E657C(uint64_t a1, const __CFString *a2, int a3)
{
  return sub_20B8CC5B0(*(_QWORD *)(a1 + 16), a2, a3);
}

CFMutableArrayRef sub_20B8E6584(uint64_t a1, const __CFString *a2)
{
  if (*(_DWORD *)(a1 + 8) == 1)
    return sub_20B8CAD74(*(_QWORD *)(a1 + 16), a2);
  else
    return 0;
}

uint64_t sub_20B8E65A0(uint64_t a1, const __CFArray *a2, const __CFString *a3)
{
  uint64_t *Mutable;
  uint64_t *v7;
  void *v8;
  void *v9;
  CFIndex Count;
  CFIndex v11;
  CFIndex i;
  void *ValueAtIndex;

  if (*(_QWORD *)(a1 + 24))
  {
    sub_20B8D0E3C(*(_DWORD *)(a1 + 8));
    Mutable = MecabraContextCreateMutable(0);
    if (Mutable)
    {
      v7 = Mutable;
      if (a3)
      {
        if (CFStringGetLength(a3) >= 1)
        {
          v8 = (void *)sub_20B8CC5B0(*(_QWORD *)(a1 + 16), a3, 0);
          if (v8)
          {
            v9 = v8;
            MecabraContextAddCandidate(v7, v8);

          }
        }
      }
      if (a2)
      {
        Count = CFArrayGetCount(a2);
        if (Count >= 1)
        {
          v11 = Count;
          for (i = 0; i != v11; ++i)
          {
            ValueAtIndex = (void *)CFArrayGetValueAtIndex(a2, i);
            MecabraContextAddCandidate(v7, ValueAtIndex);
          }
        }
      }
      MecabraContextRelease(v7);
    }
  }
  return 0;
}

uint64_t sub_20B8E6678(uint64_t a1, uint64_t a2)
{
  return sub_20B95DE78(*(_QWORD *)(a1 + 16), &stru_24C4B3660, 0, a2);
}

uint64_t sub_20B8E6690(uint64_t result, void *a2, uint64_t a3)
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;

  if (a2)
  {
    if (*(_QWORD *)(result + 24))
    {
      v4 = objc_msgSend_rawCandidate(a2, (const char *)a2, a3);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4) == 2)
        return objc_msgSend_rawCandidate(a2, v5, v6);
      v7 = objc_msgSend_rawCandidate(a2, v5, v6);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7);
      if ((_DWORD)result == 3)
        return objc_msgSend_rawCandidate(a2, v5, v6);
    }
  }
  return result;
}

uint64_t sub_20B8E6700(uint64_t a1)
{
  return sub_20B95E38C(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8E670C()
{
  return 0;
}

void sub_20B8E6714(uint64_t a1, const void *a2)
{
  sub_20B8CA1F4(*(_QWORD *)(a1 + 16), a2);
}

uint64_t sub_20B8E671C(uint64_t a1, uint64_t a2)
{
  return sub_20B95E6A8(*(_QWORD *)(a1 + 16), a2);
}

uint64_t sub_20B8E6724(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t sub_20B8E672C(uint64_t a1)
{
  void **v3;

  sub_20B876164((const void **)(a1 + 40), 0);
  sub_20B87E150((const void **)(a1 + 32), 0);
  sub_20B87E150((const void **)(a1 + 24), 0);
  v3 = (void **)a1;
  sub_20B8E6798(&v3);
  return MEMORY[0x20BD39CB0](a1, 0x1060C405F2C909FLL);
}

void sub_20B8E6798(void ***a1)
{
  void **v1;
  const void **v2;
  const void **v4;
  void *v5;

  v1 = *a1;
  v2 = (const void **)**a1;
  if (v2)
  {
    v4 = (const void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
        sub_20B87E150(--v4, 0);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_20B8E680C(uint64_t a1)
{
  __CFArray *v2;
  const void **v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (const void **)(a1 + 64);
  v2 = *(__CFArray **)(a1 + 64);
  if (v2)
    CFArrayRemoveAllValues(v2);
  sub_20B88B718((const void **)(a1 + 72), 0);
  sub_20B8B035C(v3, 0);
  v4 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v4)
    sub_20B8E672C(v4);
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v5)
    MEMORY[0x20BD39CB0](v5, 0xC400A2AC0F1);
  sub_20B8BFD8C((uint64_t *)(a1 + 16), 0);
  return a1;
}

uint64_t *sub_20B8E6890(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  void *v4;
  char *v5;
  char *v6;
  void *v7;
  void **v8;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    sub_20B87E150((const void **)(v2 + 152), 0);
    sub_20B87E150((const void **)(v2 + 144), 0);
    sub_20B87E150((const void **)(v2 + 136), 0);
    sub_20B87E150((const void **)(v2 + 128), 0);
    sub_20B87E150((const void **)(v2 + 120), 0);
    sub_20B876164((const void **)(v2 + 112), 0);
    sub_20B87AA1C((const void **)(v2 + 96), 0);
    v3 = *(void **)(v2 + 72);
    if (v3)
    {
      *(_QWORD *)(v2 + 80) = v3;
      operator delete(v3);
    }
    v4 = *(void **)(v2 + 48);
    if (v4)
    {
      *(_QWORD *)(v2 + 56) = v4;
      operator delete(v4);
    }
    v5 = *(char **)(v2 + 24);
    if (v5)
    {
      do
      {
        v6 = *(char **)v5;
        v8 = (void **)(v5 + 24);
        sub_20B8E736C(&v8);
        operator delete(v5);
        v5 = v6;
      }
      while (v6);
    }
    v7 = *(void **)(v2 + 8);
    *(_QWORD *)(v2 + 8) = 0;
    if (v7)
      operator delete(v7);
    JUMPOUT(0x20BD39CB0);
  }
  return result;
}

uint64_t sub_20B8E699C(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_20B8E73DC(result);
    JUMPOUT(0x20BD39CB0);
  }
  return result;
}

void sub_20B8E69DC(uint64_t a1)
{
  sub_20B8E77BC(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B8E6A00(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t sub_20B8E6A08(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 40);
}

uint64_t sub_20B8E6A10(uint64_t a1, const __CFString *a2, uint64_t a3, uint64_t a4, const void *a5)
{
  __CFArray *v10;
  __CFSet *v11;

  v10 = *(__CFArray **)(a1 + 64);
  if (v10)
    CFArrayRemoveAllValues(v10);
  *(_DWORD *)(a1 + 56) = 0;
  v11 = *(__CFSet **)(a1 + 72);
  if (v11)
    CFSetRemoveAllValues(v11);
  return sub_20B9CA2AC(*(_QWORD *)(a1 + 16), a2, a3, a4, a5);
}

uint64_t sub_20B8E6A94(uint64_t a1, const __CFString *a2, int a3, uint64_t a4)
{
  __CFArray *v8;
  __CFSet *v9;
  const __CFString *v10;
  uint64_t v11;
  const __CFString *v12;
  uint64_t v13;

  v8 = *(__CFArray **)(a1 + 64);
  if (v8)
    CFArrayRemoveAllValues(v8);
  *(_DWORD *)(a1 + 56) = 0;
  v9 = *(__CFSet **)(a1 + 72);
  if (v9)
    CFSetRemoveAllValues(v9);
  if (a4)
  {
    v10 = *(const __CFString **)(a4 + 72);
    if (v10)
    {
      v11 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 104);
      if (v11)
        sub_20BA14230(v11, v10);
    }
    v12 = *(const __CFString **)(a4 + 80);
    if (v12)
    {
      v13 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 104);
      if (v13)
        sub_20BA14338(v13, v12);
    }
  }
  return sub_20B9CAFA4(*(_QWORD *)(a1 + 16), a2, a3, a4);
}

uint64_t sub_20B8E6B24(uint64_t a1, const __CFArray *a2, int a3, uint64_t a4)
{
  __CFArray *v8;
  __CFSet *v9;
  const __CFString *v10;
  uint64_t v11;
  const __CFString *v12;
  uint64_t v13;

  v8 = *(__CFArray **)(a1 + 64);
  if (v8)
    CFArrayRemoveAllValues(v8);
  *(_DWORD *)(a1 + 56) = 0;
  v9 = *(__CFSet **)(a1 + 72);
  if (v9)
    CFSetRemoveAllValues(v9);
  if (a4)
  {
    v10 = *(const __CFString **)(a4 + 72);
    if (v10)
    {
      v11 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 104);
      if (v11)
        sub_20BA14230(v11, v10);
    }
    v12 = *(const __CFString **)(a4 + 80);
    if (v12)
    {
      v13 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 104);
      if (v13)
        sub_20BA14338(v13, v12);
    }
  }
  return sub_20B9CB3AC(*(_QWORD *)(a1 + 16), a2, a3, a4);
}

uint64_t sub_20B8E6BB4()
{
  return 0;
}

void *sub_20B8E6BBC(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  void *i;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  const __CFSet *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  const void *v20;
  const char *v21;
  uint64_t v22;
  __CFSet *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  const void *v28;

  for (i = (void *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 16) + 72) + 48))(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 72));
        i;
        i = (void *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 16) + 72) + 48))(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 72)))
  {
    v5 = objc_msgSend_rawCandidate(i, v2, v3);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5) == 6)
      break;
    v8 = objc_msgSend_rawCandidate(i, v6, v7);
    if (v8)
    {
      v9 = (_QWORD *)v8;
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8) ? 40 : 24;
      if ((*(uint64_t (**)(_QWORD *))(*v9 + v10))(v9))
      {
        v13 = objc_msgSend_rawCandidate(i, v11, v12);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 96))(v13) == 89)
          return i;
        v16 = *(const __CFSet **)(a1 + 72);
        v17 = objc_msgSend_rawCandidate(i, v14, v15);
        if (v17)
        {
          v18 = (_QWORD *)v17;
          v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17) ? 40 : 24;
          v20 = (const void *)(*(uint64_t (**)(_QWORD *))(*v18 + v19))(v18);
        }
        else
        {
          v20 = 0;
        }
        if (!CFSetContainsValue(v16, v20))
        {
          v23 = *(__CFSet **)(a1 + 72);
          v24 = objc_msgSend_rawCandidate(i, v21, v22);
          if (v24)
          {
            v25 = (_QWORD *)v24;
            v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 40))(v24);
            v27 = 40;
            if (!v26)
              v27 = 24;
            v28 = (const void *)(*(uint64_t (**)(_QWORD *))(*v25 + v27))(v25);
          }
          else
          {
            v28 = 0;
          }
          CFSetAddValue(v23, v28);
          return i;
        }
      }
    }
  }
  return i;
}

uint64_t sub_20B8E6D48(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 112);
  v3 = sub_20B88826C(a2, kMecabraContextOptionPrivateMode) != (const void *)*MEMORY[0x24BDBD270];
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _BOOL8))(*(_QWORD *)v2 + 56))(v2, 0, 0, v3);
}

uint64_t sub_20B8E6DA8(_QWORD *a1, uint64_t a2)
{
  void *v4;
  char v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  __CFSet *v12;

  if (CFArrayGetCount(*(CFArrayRef *)(a2 + 32)) == 1)
  {
    v4 = (void *)sub_20B96ABC8(a2, 0);
    v5 = sub_20B93AAB0((uint64_t)v4);
    if (v4)
    {
      if ((v5 & 1) != 0)
      {
        v8 = objc_msgSend_rawCandidate(v4, v6, v7);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8) == 2
          || (v11 = objc_msgSend_rawCandidate(v4, v9, v10),
              (*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 72))(v11) == 3))
        {
          if (a1[3])
            objc_msgSend_rawCandidate(v4, v9, v10);
          return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1[2] + 112) + 48))(*(_QWORD *)(a1[2] + 112), a2);
        }
      }
    }
  }
  else
  {
    sub_20B93AAB0(0);
  }
  v12 = (__CFSet *)a1[9];
  if (v12)
    CFSetRemoveAllValues(v12);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1[2] + 112) + 48))(*(_QWORD *)(a1[2] + 112), a2);
}

uint64_t sub_20B8E6E70(uint64_t a1, const char *a2, void *a3)
{
  return sub_20B9CEA38(*(_QWORD *)(a1 + 16), a2, a3);
}

uint64_t sub_20B8E6E78(uint64_t a1, uint64_t a2)
{
  __CFSet *v4;

  v4 = *(__CFSet **)(a1 + 72);
  if (v4)
    CFSetRemoveAllValues(v4);
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 16) + 112) + 56))(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 112), a2, 0, 1);
}

uint64_t sub_20B8E6EC0(uint64_t a1)
{
  return sub_20B9730D8(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 112));
}

uint64_t sub_20B8E6ECC(uint64_t a1)
{
  return sub_20B9727D8(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 112), 1);
}

uint64_t sub_20B8E6EDC(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  sub_20B9727D8(*(_QWORD *)(v1 + 112), 1);
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 112) + 128))(*(_QWORD *)(v1 + 112));
}

void sub_20B8E6F10(uint64_t a1, const __CFString *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 104);
  if (v2)
    sub_20BA14230(v2, a2);
}

void sub_20B8E6F24(uint64_t a1, const void *a2)
{
  sub_20B9CED08(*(_QWORD *)(a1 + 16), a2);
}

void sub_20B8E6F2C(uint64_t a1, const void *a2)
{
  sub_20B9CEDB4(*(_QWORD *)(a1 + 16), a2);
}

uint64_t sub_20B8E6F34(uint64_t a1)
{
  return sub_20B9727D8(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 112), 1);
}

uint64_t sub_20B8E6F48(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 16) + 112) + 104))(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 112));
}

uint64_t sub_20B8E6F5C(uint64_t a1, void *a2, uint64_t a3)
{
  const void *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const void *v10;

  v5 = (const void *)objc_msgSend_rawCandidate(a2, (const char *)a2, a3);
  if (v5
    && (v8 = __dynamic_cast(v5, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0)) != 0)
  {
    if ((*(unsigned int (**)(void *, _QWORD, _QWORD))(*(_QWORD *)v8 + 248))(v8, 0, 0))
      return (*(uint64_t (**)(_QWORD, void *))(**(_QWORD **)(*(_QWORD *)(a1 + 16) + 112) + 96))(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 112), a2);
  }
  else
  {
    v10 = (const void *)objc_msgSend_rawCandidate(a2, v6, v7);
    if (v10)
      __dynamic_cast(v10, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45B850, 0);
  }
  return 0;
}

double sub_20B8E7010()
{
  return 0.0;
}

CFMutableArrayRef sub_20B8E7018()
{
  return CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, 0);
}

uint64_t sub_20B8E7030()
{
  return 0;
}

uint64_t sub_20B8E7038(uint64_t a1, const void *a2)
{
  const __CFAllocator *v4;
  const __CFArray *v5;
  uint64_t result;
  void *values;

  if (a2)
  {
    v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    values = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    CFDictionarySetValue((CFMutableDictionaryRef)values, kMecabraAssetDataFilePathsKey, a2);
    v5 = CFArrayCreate(v4, (const void **)&values, 1, MEMORY[0x24BDBD690]);
    LOBYTE(v4) = sub_20B90E194(*(_QWORD *)(a1 + 32), 2, v5);
    CFRelease(values);
    CFRelease(v5);
    if ((v4 & 1) == 0)
      return 0;
  }
  else
  {
    result = sub_20B8E7118(a1, 2, 0);
    if (!(_DWORD)result)
      return result;
  }
  sub_20B9CEB68(*(_QWORD **)(a1 + 16));
  return 1;
}

uint64_t sub_20B8E7118(uint64_t a1, int a2, const __CFArray *a3)
{
  uint64_t v4;

  v4 = sub_20B90E194(*(_QWORD *)(a1 + 32), a2, a3);
  if ((_DWORD)v4)
    sub_20B9CEB68(*(_QWORD **)(a1 + 16));
  return v4;
}

BOOL sub_20B8E7150(uint64_t a1, const __CFArray *a2)
{
  return sub_20B9CF6F0(*(_QWORD *)(a1 + 16), a2);
}

uint64_t sub_20B8E7158(uint64_t result, char a2)
{
  *(_BYTE *)(*(_QWORD *)(result + 16) + 208) = a2;
  return result;
}

uint64_t sub_20B8E7164()
{
  return 0;
}

uint64_t sub_20B8E7170()
{
  return 0;
}

uint64_t sub_20B8E7178(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 16) + 112) + 88))(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 112));
}

uint64_t sub_20B8E718C(uint64_t a1)
{
  return sub_20B9CEB20(*(_QWORD *)(a1 + 16));
}

_QWORD *sub_20B8E7198(_QWORD *result, uint64_t a2, uint64_t a3)
{
  if (a3 >= 1)
  {
    result = *(_QWORD **)(result[2] + 112);
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 24))(result);
  }
  return result;
}

uint64_t sub_20B8E71BC()
{
  return 0;
}

uint64_t sub_20B8E71C4(uint64_t a1, const __CFString *a2)
{
  return sub_20B9CE904(*(_QWORD *)(a1 + 16), a2);
}

uint64_t sub_20B8E71CC()
{
  return 0;
}

uint64_t sub_20B8E71D4(uint64_t a1, const __CFArray *a2, const __CFString *a3)
{
  uint64_t *Mutable;
  uint64_t *v7;
  void *v8;
  void *v9;
  CFIndex Count;
  CFIndex v11;
  CFIndex i;
  void *ValueAtIndex;

  if (*(_QWORD *)(a1 + 24))
  {
    sub_20B8D0E3C(*(_DWORD *)(a1 + 8));
    Mutable = MecabraContextCreateMutable(0);
    if (Mutable)
    {
      v7 = Mutable;
      if (a3)
      {
        if (CFStringGetLength(a3) >= 1)
        {
          v8 = (void *)sub_20B9CE904(*(_QWORD *)(a1 + 16), a3);
          if (v8)
          {
            v9 = v8;
            MecabraContextAddCandidate(v7, v8);

          }
        }
      }
      if (a2)
      {
        Count = CFArrayGetCount(a2);
        if (Count >= 1)
        {
          v11 = Count;
          for (i = 0; i != v11; ++i)
          {
            ValueAtIndex = (void *)CFArrayGetValueAtIndex(a2, i);
            MecabraContextAddCandidate(v7, ValueAtIndex);
          }
        }
      }
      MecabraContextRelease(v7);
    }
  }
  return 0;
}

uint64_t sub_20B8E72AC(uint64_t a1, uint64_t a2)
{
  return sub_20B9CAFA4(*(_QWORD *)(a1 + 16), &stru_24C4B3660, 0, a2);
}

uint64_t sub_20B8E72C4(uint64_t result, void *a2, uint64_t a3)
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;

  if (a2)
  {
    if (*(_QWORD *)(result + 24))
    {
      v4 = objc_msgSend_rawCandidate(a2, (const char *)a2, a3);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4) == 2)
        return objc_msgSend_rawCandidate(a2, v5, v6);
      v7 = objc_msgSend_rawCandidate(a2, v5, v6);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7);
      if ((_DWORD)result == 3)
        return objc_msgSend_rawCandidate(a2, v5, v6);
    }
  }
  return result;
}

uint64_t sub_20B8E7334(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 16) + 72) + 48))(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 72));
}

uint64_t sub_20B8E734C()
{
  return 0;
}

void sub_20B8E7354(uint64_t a1, const void *a2)
{
  sub_20B9CEE60(*(_QWORD *)(a1 + 16), a2);
}

uint64_t sub_20B8E735C(uint64_t a1, uint64_t a2)
{
  return sub_20B9CEF0C(*(_QWORD *)(a1 + 16), a2);
}

uint64_t sub_20B8E7364(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void sub_20B8E736C(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = sub_20B811FE4(v4 - 16);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_20B8E73DC(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(_QWORD *)(a1 + 200);
  v2 = (_QWORD *)(a1 + 200);
  v3 = v4;
  *v2 = 0;
  if (v4)
    sub_20B8CE44C((uint64_t)v2, v3);
  v5 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = 0;
  if (v5)
    sub_20B8CE44C(a1 + 192, v5);
  v6 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 184) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 176) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  sub_20B8E754C((_QWORD **)(a1 + 144), 0);
  sub_20B8E754C((_QWORD **)(a1 + 136), 0);
  sub_20B8E7588((const void ***)(a1 + 128), 0);
  sub_20B8E760C((uint64_t *)(a1 + 120), 0);
  v11 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  sub_20B8E76CC((const void ***)(a1 + 104), 0);
  v12 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  sub_20B8E7780((uint64_t *)(a1 + 88), 0);
  sub_20B8E7780((uint64_t *)(a1 + 80), 0);
  v13 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  return sub_20B882354(a1);
}

_QWORD *sub_20B8E754C(_QWORD **a1, _QWORD *a2)
{
  _QWORD *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_20B9D6E44(result);
    JUMPOUT(0x20BD39CB0);
  }
  return result;
}

const void ***sub_20B8E7588(const void ***result, const void **a2)
{
  const void **v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    sub_20B8E75D8(v2, 0);
    JUMPOUT(0x20BD39CB0);
  }
  return result;
}

void sub_20B8E75D8(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

uint64_t sub_20B8E760C(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_20B8E7648(result);
    JUMPOUT(0x20BD39CB0);
  }
  return result;
}

uint64_t sub_20B8E7648(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
  sub_20B8E7698((const void **)(a1 + 8), 0);
  sub_20B8B0328((const void **)a1, 0);
  return a1;
}

void sub_20B8E7698(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

const void **sub_20B8E76CC(const void ***a1, const void **a2)
{
  const void **result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_20B8E7708(result);
    JUMPOUT(0x20BD39CB0);
  }
  return result;
}

const void **sub_20B8E7708(const void **a1)
{
  sub_20B87E150(a1 + 2, 0);
  sub_20B87E150(a1 + 1, 0);
  sub_20B8E774C(a1, 0);
  return a1;
}

void sub_20B8E774C(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

uint64_t sub_20B8E7780(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_20B9DBBC8(result);
    JUMPOUT(0x20BD39CB0);
  }
  return result;
}

uint64_t sub_20B8E77BC(uint64_t a1)
{
  __CFArray *v2;
  const void **v3;
  uint64_t v4;

  v3 = (const void **)(a1 + 64);
  v2 = *(__CFArray **)(a1 + 64);
  if (v2)
    CFArrayRemoveAllValues(v2);
  sub_20B88B718((const void **)(a1 + 72), 0);
  sub_20B8B035C(v3, 0);
  sub_20B8E6890((uint64_t *)(a1 + 32), 0);
  v4 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v4)
    MEMORY[0x20BD39CB0](v4, 0xC400A2AC0F1);
  sub_20B8E699C((uint64_t *)(a1 + 16), 0);
  return a1;
}

uint64_t sub_20B8E783C(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_20B8E8174(result);
    JUMPOUT(0x20BD39CB0);
  }
  return result;
}

void sub_20B8E787C(uint64_t a1)
{
  sub_20B8E8308(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B8E78A0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t sub_20B8E78A8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 40);
}

uint64_t sub_20B8E78B0(uint64_t a1, const __CFString *a2, uint64_t a3, uint64_t a4, const void *a5)
{
  __CFArray *v10;
  __CFSet *v11;

  v10 = *(__CFArray **)(a1 + 64);
  if (v10)
    CFArrayRemoveAllValues(v10);
  *(_DWORD *)(a1 + 56) = 0;
  v11 = *(__CFSet **)(a1 + 72);
  if (v11)
    CFSetRemoveAllValues(v11);
  return sub_20B92E648(*(_QWORD *)(a1 + 16), a2, a3, a4, a5);
}

BOOL sub_20B8E7934(uint64_t a1, const __CFString *a2, int a3, uint64_t a4)
{
  __CFArray *v8;
  __CFSet *v9;
  const __CFString *v10;
  uint64_t v11;
  const __CFString *v12;
  uint64_t v13;

  v8 = *(__CFArray **)(a1 + 64);
  if (v8)
    CFArrayRemoveAllValues(v8);
  *(_DWORD *)(a1 + 56) = 0;
  v9 = *(__CFSet **)(a1 + 72);
  if (v9)
    CFSetRemoveAllValues(v9);
  if (a4)
  {
    v10 = *(const __CFString **)(a4 + 72);
    if (v10)
    {
      v11 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 96);
      if (v11)
        sub_20BA14230(v11, v10);
    }
    v12 = *(const __CFString **)(a4 + 80);
    if (v12)
    {
      v13 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 96);
      if (v13)
        sub_20BA14338(v13, v12);
    }
  }
  return sub_20B930404(*(_QWORD *)(a1 + 16), a2, a3, a4);
}

uint64_t sub_20B8E79C4(uint64_t a1, const __CFArray *a2, int a3, uint64_t a4)
{
  __CFArray *v8;
  __CFSet *v9;
  const __CFString *v10;
  uint64_t v11;
  const __CFString *v12;
  uint64_t v13;

  v8 = *(__CFArray **)(a1 + 64);
  if (v8)
    CFArrayRemoveAllValues(v8);
  *(_DWORD *)(a1 + 56) = 0;
  v9 = *(__CFSet **)(a1 + 72);
  if (v9)
    CFSetRemoveAllValues(v9);
  if (a4)
  {
    v10 = *(const __CFString **)(a4 + 72);
    if (v10)
    {
      v11 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 96);
      if (v11)
        sub_20BA14230(v11, v10);
    }
    v12 = *(const __CFString **)(a4 + 80);
    if (v12)
    {
      v13 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 96);
      if (v13)
        sub_20BA14338(v13, v12);
    }
  }
  return sub_20B92F4F4(*(uint64_t **)(a1 + 16), a2, a3, a4);
}

uint64_t sub_20B8E7A54()
{
  return 0;
}

void *sub_20B8E7A5C(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  void *i;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  const __CFSet *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  const void *v20;
  const char *v21;
  uint64_t v22;
  __CFSet *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  const void *v28;

  for (i = (void *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 16) + 72) + 48))(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 72));
        i;
        i = (void *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 16) + 72) + 48))(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 72)))
  {
    v5 = objc_msgSend_rawCandidate(i, v2, v3);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5) == 6)
      break;
    v8 = objc_msgSend_rawCandidate(i, v6, v7);
    if (v8)
    {
      v9 = (_QWORD *)v8;
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8) ? 40 : 24;
      if ((*(uint64_t (**)(_QWORD *))(*v9 + v10))(v9))
      {
        v13 = objc_msgSend_rawCandidate(i, v11, v12);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 96))(v13) == 89)
          return i;
        v16 = *(const __CFSet **)(a1 + 72);
        v17 = objc_msgSend_rawCandidate(i, v14, v15);
        if (v17)
        {
          v18 = (_QWORD *)v17;
          v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17) ? 40 : 24;
          v20 = (const void *)(*(uint64_t (**)(_QWORD *))(*v18 + v19))(v18);
        }
        else
        {
          v20 = 0;
        }
        if (!CFSetContainsValue(v16, v20))
        {
          v23 = *(__CFSet **)(a1 + 72);
          v24 = objc_msgSend_rawCandidate(i, v21, v22);
          if (v24)
          {
            v25 = (_QWORD *)v24;
            v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 40))(v24);
            v27 = 40;
            if (!v26)
              v27 = 24;
            v28 = (const void *)(*(uint64_t (**)(_QWORD *))(*v25 + v27))(v25);
          }
          else
          {
            v28 = 0;
          }
          CFSetAddValue(v23, v28);
          return i;
        }
      }
    }
  }
  return i;
}

uint64_t sub_20B8E7BE8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 16) + 104) + 56))(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 104), 0, 0, 1);
}

uint64_t sub_20B8E7C08(_QWORD *a1, uint64_t a2)
{
  void *v4;
  char v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  __CFSet *v12;

  if (CFArrayGetCount(*(CFArrayRef *)(a2 + 32)) == 1)
  {
    v4 = (void *)sub_20B96ABC8(a2, 0);
    v5 = sub_20B93AAB0((uint64_t)v4);
    if (v4)
    {
      if ((v5 & 1) != 0)
      {
        v8 = objc_msgSend_rawCandidate(v4, v6, v7);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8) == 2
          || (v11 = objc_msgSend_rawCandidate(v4, v9, v10),
              (*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 72))(v11) == 3))
        {
          if (a1[3])
            objc_msgSend_rawCandidate(v4, v9, v10);
          return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1[2] + 104) + 48))(*(_QWORD *)(a1[2] + 104), a2);
        }
      }
    }
  }
  else
  {
    sub_20B93AAB0(0);
  }
  v12 = (__CFSet *)a1[9];
  if (v12)
    CFSetRemoveAllValues(v12);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1[2] + 104) + 48))(*(_QWORD *)(a1[2] + 104), a2);
}

uint64_t sub_20B8E7CD0(uint64_t a1, const char *a2, void *a3)
{
  return sub_20B9309A8(*(_QWORD *)(a1 + 16), a2, a3);
}

uint64_t sub_20B8E7CD8(uint64_t a1, uint64_t a2)
{
  __CFSet *v4;

  v4 = *(__CFSet **)(a1 + 72);
  if (v4)
    CFSetRemoveAllValues(v4);
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 16) + 104) + 56))(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 104), a2, 0, 1);
}

uint64_t sub_20B8E7D20(uint64_t a1)
{
  return sub_20B9730D8(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 104));
}

uint64_t sub_20B8E7D2C(uint64_t a1)
{
  return sub_20B9727D8(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 104), 1);
}

uint64_t sub_20B8E7D3C(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  sub_20B9727D8(*(_QWORD *)(v1 + 104), 1);
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 104) + 128))(*(_QWORD *)(v1 + 104));
}

void sub_20B8E7D70(uint64_t a1, const __CFString *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 96);
  if (v2)
    sub_20BA14230(v2, a2);
}

void sub_20B8E7D84(uint64_t a1, const void *a2)
{
  sub_20B9307A4(*(_QWORD *)(a1 + 16), a2);
}

void sub_20B8E7D8C(uint64_t a1, const void *a2)
{
  sub_20B930850(*(_QWORD *)(a1 + 16), a2);
}

uint64_t sub_20B8E7D9C()
{
  return 0;
}

uint64_t sub_20B8E7DA4(uint64_t a1, void *a2, uint64_t a3)
{
  const void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const void *v8;

  v4 = (const void *)objc_msgSend_rawCandidate(a2, (const char *)a2, a3);
  if (v4
    && (v7 = __dynamic_cast(v4, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0)) != 0)
  {
    (*(void (**)(void *, _QWORD, _QWORD))(*(_QWORD *)v7 + 248))(v7, 0, 0);
  }
  else
  {
    v8 = (const void *)objc_msgSend_rawCandidate(a2, v5, v6);
    if (v8)
      __dynamic_cast(v8, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45B850, 0);
  }
  return 0;
}

double sub_20B8E7E34()
{
  return 0.0;
}

CFMutableArrayRef sub_20B8E7E3C()
{
  return CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, 0);
}

uint64_t sub_20B8E7E54()
{
  return 0;
}

uint64_t sub_20B8E7E5C(uint64_t a1, const void *a2)
{
  const __CFAllocator *v4;
  const __CFArray *v5;
  uint64_t result;
  void *values;

  if (a2)
  {
    v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    values = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    CFDictionarySetValue((CFMutableDictionaryRef)values, kMecabraAssetDataFilePathsKey, a2);
    v5 = CFArrayCreate(v4, (const void **)&values, 1, MEMORY[0x24BDBD690]);
    LOBYTE(v4) = sub_20B90E194(*(_QWORD *)(a1 + 32), 2, v5);
    CFRelease(values);
    CFRelease(v5);
    if ((v4 & 1) == 0)
      return 0;
  }
  else
  {
    result = sub_20B8E7F3C(a1, 2, 0);
    if (!(_DWORD)result)
      return result;
  }
  sub_20B9306B0(*(_QWORD **)(a1 + 16));
  return 1;
}

uint64_t sub_20B8E7F3C(uint64_t a1, int a2, const __CFArray *a3)
{
  uint64_t v4;

  v4 = sub_20B90E194(*(_QWORD *)(a1 + 32), a2, a3);
  if ((_DWORD)v4)
    sub_20B9306B0(*(_QWORD **)(a1 + 16));
  return v4;
}

void sub_20B8E7F74(uint64_t a1, const __CFArray *a2)
{
  sub_20B8D4E68(*(_QWORD *)(a1 + 16) + 160, a2);
}

uint64_t sub_20B8E7F80(uint64_t result, char a2)
{
  *(_BYTE *)(*(_QWORD *)(result + 16) + 224) = a2;
  return result;
}

uint64_t sub_20B8E7F8C()
{
  return 0;
}

uint64_t sub_20B8E7F98()
{
  return 0;
}

uint64_t sub_20B8E7FA0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 16) + 104) + 88))(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 104));
}

uint64_t sub_20B8E7FB4(uint64_t a1)
{
  return sub_20B92EAEC(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8E7FC4()
{
  return 0;
}

uint64_t sub_20B8E7FCC(uint64_t a1, const __CFString *a2)
{
  return sub_20B930480(*(_QWORD *)(a1 + 16), a2);
}

uint64_t sub_20B8E7FD4()
{
  return 0;
}

uint64_t sub_20B8E7FDC(uint64_t a1, const __CFArray *a2, const __CFString *a3)
{
  uint64_t *Mutable;
  uint64_t *v7;
  void *v8;
  void *v9;
  CFIndex Count;
  CFIndex v11;
  CFIndex i;
  void *ValueAtIndex;

  if (*(_QWORD *)(a1 + 24))
  {
    sub_20B8D0E3C(*(_DWORD *)(a1 + 8));
    Mutable = MecabraContextCreateMutable(0);
    if (Mutable)
    {
      v7 = Mutable;
      if (a3)
      {
        if (CFStringGetLength(a3) >= 1)
        {
          v8 = (void *)sub_20B930480(*(_QWORD *)(a1 + 16), a3);
          if (v8)
          {
            v9 = v8;
            MecabraContextAddCandidate(v7, v8);

          }
        }
      }
      if (a2)
      {
        Count = CFArrayGetCount(a2);
        if (Count >= 1)
        {
          v11 = Count;
          for (i = 0; i != v11; ++i)
          {
            ValueAtIndex = (void *)CFArrayGetValueAtIndex(a2, i);
            MecabraContextAddCandidate(v7, ValueAtIndex);
          }
        }
      }
      MecabraContextRelease(v7);
    }
  }
  return 0;
}

BOOL sub_20B8E80B4(uint64_t a1, uint64_t a2)
{
  return sub_20B930404(*(_QWORD *)(a1 + 16), &stru_24C4B3660, 0, a2);
}

uint64_t sub_20B8E80CC(uint64_t result, void *a2, uint64_t a3)
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;

  if (a2)
  {
    if (*(_QWORD *)(result + 24))
    {
      v4 = objc_msgSend_rawCandidate(a2, (const char *)a2, a3);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4) == 2)
        return objc_msgSend_rawCandidate(a2, v5, v6);
      v7 = objc_msgSend_rawCandidate(a2, v5, v6);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7);
      if ((_DWORD)result == 3)
        return objc_msgSend_rawCandidate(a2, v5, v6);
    }
  }
  return result;
}

uint64_t sub_20B8E813C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 16) + 72) + 48))(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 72));
}

uint64_t sub_20B8E8154()
{
  return 0;
}

void sub_20B8E815C(uint64_t a1, const void *a2)
{
  sub_20B9308FC(*(_QWORD *)(a1 + 16), a2);
}

uint64_t sub_20B8E8164()
{
  return 0;
}

uint64_t sub_20B8E816C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t sub_20B8E8174(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 216) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_20B88B74C((const void **)(a1 + 208), 0);
  sub_20B8E82D0(a1 + 168);
  v3 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  sub_20B8E760C((uint64_t *)(a1 + 112), 0);
  v8 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  sub_20B8E76CC((const void ***)(a1 + 96), 0);
  v9 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  sub_20B882354(a1 + 8);
  return a1;
}

uint64_t sub_20B8E82D0(uint64_t a1)
{
  void *v2;

  sub_20B8D659C(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

uint64_t sub_20B8E8308(uint64_t a1)
{
  __CFArray *v2;
  const void **v3;
  uint64_t v4;

  v3 = (const void **)(a1 + 64);
  v2 = *(__CFArray **)(a1 + 64);
  if (v2)
    CFArrayRemoveAllValues(v2);
  sub_20B88B718((const void **)(a1 + 72), 0);
  sub_20B8B035C(v3, 0);
  sub_20B8E6890((uint64_t *)(a1 + 32), 0);
  v4 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v4)
    MEMORY[0x20BD39CB0](v4, 0xC400A2AC0F1);
  sub_20B8E783C((uint64_t *)(a1 + 16), 0);
  return a1;
}

uint64_t sub_20B8E8388(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_20B990208(result, a2, a3);
    JUMPOUT(0x20BD39CB0);
  }
  return result;
}

uint64_t sub_20B8E83C4(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_20B93F438(result);
    JUMPOUT(0x20BD39CB0);
  }
  return result;
}

void sub_20B8E8404(uint64_t a1)
{
  sub_20B8E903C(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B8E8428(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t sub_20B8E8430(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 40);
}

uint64_t *sub_20B8E8438(uint64_t a1, const __CFString *a2, uint64_t a3, uint64_t a4, const __CFArray *a5, const __CFArray *a6, const __CFString *a7)
{
  __CFArray *v14;
  __CFSet *v15;

  v14 = *(__CFArray **)(a1 + 64);
  if (v14)
    CFArrayRemoveAllValues(v14);
  *(_DWORD *)(a1 + 56) = 0;
  v15 = *(__CFSet **)(a1 + 72);
  if (v15)
    CFSetRemoveAllValues(v15);
  return sub_20B9904F0(*(_QWORD *)(a1 + 16), a2, a3, a4, a5, a6, a7);
}

BOOL sub_20B8E84BC(uint64_t a1, const __CFString *a2, uint64_t a3, uint64_t a4)
{
  __CFArray *v8;
  __CFSet *v9;
  const __CFString *v10;
  const __CFString *v11;

  v8 = *(__CFArray **)(a1 + 64);
  if (v8)
    CFArrayRemoveAllValues(v8);
  *(_DWORD *)(a1 + 56) = 0;
  v9 = *(__CFSet **)(a1 + 72);
  if (v9)
    CFSetRemoveAllValues(v9);
  if (a4)
  {
    v10 = *(const __CFString **)(a4 + 72);
    if (v10)
      sub_20B9C4198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 32), v10);
    v11 = *(const __CFString **)(a4 + 80);
    if (v11)
      sub_20B9C4244(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 32), v11);
  }
  return sub_20B990694(*(_QWORD *)(a1 + 16), a2, a3, a4);
}

BOOL sub_20B8E854C(uint64_t a1, const __CFArray *a2, uint64_t a3, uint64_t a4)
{
  __CFArray *v8;
  __CFSet *v9;
  const __CFString *v10;
  const __CFString *v11;

  v8 = *(__CFArray **)(a1 + 64);
  if (v8)
    CFArrayRemoveAllValues(v8);
  *(_DWORD *)(a1 + 56) = 0;
  v9 = *(__CFSet **)(a1 + 72);
  if (v9)
    CFSetRemoveAllValues(v9);
  if (a4)
  {
    v10 = *(const __CFString **)(a4 + 72);
    if (v10)
      sub_20B9C4198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 32), v10);
    v11 = *(const __CFString **)(a4 + 80);
    if (v11)
      sub_20B9C4244(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 32), v11);
  }
  return sub_20B990720(*(_QWORD *)(a1 + 16), a2, a3, a4);
}

__CFArray *sub_20B8E85DC(uint64_t a1, const __CFArray *a2, __int16 a3, uint64_t a4)
{
  return sub_20B991EC4(*(_QWORD *)(a1 + 16), a2, a3, a4);
}

void *sub_20B8E85E4(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  void *i;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  const __CFSet *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  const void *v20;
  const char *v21;
  uint64_t v22;
  __CFSet *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  const void *v28;

  for (i = sub_20B992070(*(_QWORD *)(a1 + 16)); i; i = sub_20B992070(*(_QWORD *)(a1 + 16)))
  {
    v5 = objc_msgSend_rawCandidate(i, v2, v3);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5) == 6)
      break;
    v8 = objc_msgSend_rawCandidate(i, v6, v7);
    if (v8)
    {
      v9 = (_QWORD *)v8;
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8) ? 40 : 24;
      if ((*(uint64_t (**)(_QWORD *))(*v9 + v10))(v9))
      {
        v13 = objc_msgSend_rawCandidate(i, v11, v12);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 96))(v13) == 89)
          return i;
        v16 = *(const __CFSet **)(a1 + 72);
        v17 = objc_msgSend_rawCandidate(i, v14, v15);
        if (v17)
        {
          v18 = (_QWORD *)v17;
          v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17) ? 40 : 24;
          v20 = (const void *)(*(uint64_t (**)(_QWORD *))(*v18 + v19))(v18);
        }
        else
        {
          v20 = 0;
        }
        if (!CFSetContainsValue(v16, v20))
        {
          v23 = *(__CFSet **)(a1 + 72);
          v24 = objc_msgSend_rawCandidate(i, v21, v22);
          if (v24)
          {
            v25 = (_QWORD *)v24;
            v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 40))(v24);
            v27 = 40;
            if (!v26)
              v27 = 24;
            v28 = (const void *)(*(uint64_t (**)(_QWORD *))(*v25 + v27))(v25);
          }
          else
          {
            v28 = 0;
          }
          CFSetAddValue(v23, v28);
          return i;
        }
      }
    }
  }
  return i;
}

uint64_t sub_20B8E8758(uint64_t a1, uint64_t a2)
{
  return sub_20B9922A4(*(_QWORD *)(a1 + 16), a2, 1);
}

uint64_t sub_20B8E8764(uint64_t *a1, uint64_t a2)
{
  void *v4;
  char v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  __CFSet *v14;

  if (CFArrayGetCount(*(CFArrayRef *)(a2 + 32)) == 1)
  {
    v4 = (void *)sub_20B96ABC8(a2, 0);
    v5 = sub_20B93AAB0((uint64_t)v4);
    if (v4)
    {
      if ((v5 & 1) != 0)
      {
        v8 = objc_msgSend_rawCandidate(v4, v6, v7);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8) == 2
          || (v11 = objc_msgSend_rawCandidate(v4, v9, v10),
              (*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 72))(v11) == 3))
        {
          v12 = (uint64_t *)a1[3];
          if (v12)
          {
            v13 = objc_msgSend_rawCandidate(v4, v9, v10);
            sub_20B940050(v12, v13);
          }
          return sub_20B9921F0(a1[2], a2);
        }
      }
    }
  }
  else
  {
    sub_20B93AAB0(0);
  }
  v14 = (__CFSet *)a1[9];
  if (v14)
    CFSetRemoveAllValues(v14);
  return sub_20B9921F0(a1[2], a2);
}

uint64_t sub_20B8E882C(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_20B9923C8(*(_QWORD **)(a1 + 16), a2, a3);
}

uint64_t sub_20B8E8834(uint64_t a1, void *a2, uint64_t a3)
{
  __CFSet *v6;

  v6 = *(__CFSet **)(a1 + 72);
  if (v6)
    CFSetRemoveAllValues(v6);
  return sub_20B992108(*(_QWORD *)(a1 + 16), a2, a3);
}

uint64_t sub_20B8E8878(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 416);
  if (result)
    return sub_20B9730D8(result);
  return result;
}

uint64_t sub_20B8E8890(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 32);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 56))(v1);
  return LMLanguageModelResetDynamicData();
}

uint64_t sub_20B8E88D0(uint64_t a1, const __CFString *a2)
{
  uint64_t result;
  uint64_t v5;

  result = sub_20B9C4198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 32), a2);
  v5 = *(_QWORD *)(a1 + 24);
  if (v5)
    return sub_20B9C4198(*(_QWORD *)(*(_QWORD *)(v5 + 16) + 32), a2);
  return result;
}

void sub_20B8E8920(uint64_t a1, const void *a2)
{
  _QWORD *v4;

  sub_20B9A94E8(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 280), a2, 0);
  v4 = *(_QWORD **)(a1 + 24);
  if (v4)
    sub_20B93FFE0(v4, (const __CFArray *)a2);
}

void sub_20B8E8968(uint64_t a1, const void *a2)
{
  _QWORD *v4;

  sub_20B9A94E8(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 280), a2, 1);
  v4 = *(_QWORD **)(a1 + 24);
  if (v4)
    sub_20B940018(v4, (const __CFArray *)a2);
}

uint64_t sub_20B8E89B0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 416);
  if (result)
    return sub_20B9727D8(result, 1);
  return result;
}

uint64_t sub_20B8E89C8(uint64_t result, char a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(result + 16) + 416);
  if (v2)
    *(_BYTE *)(v2 + 121) = a2;
  return result;
}

uint64_t sub_20B8E89DC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 416);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 104))(result);
  return result;
}

uint64_t sub_20B8E89F8(uint64_t a1, void *a2, uint64_t a3)
{
  const void *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  const void *v11;

  v5 = (const void *)objc_msgSend_rawCandidate(a2, (const char *)a2, a3);
  if (v5
    && (v8 = __dynamic_cast(v5, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0)) != 0)
  {
    if ((*(unsigned int (**)(void *, _QWORD, _QWORD))(*(_QWORD *)v8 + 248))(v8, 0, 0))
    {
      v9 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 416);
      if (v9)
        return (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v9 + 96))(v9, a2);
    }
  }
  else
  {
    v11 = (const void *)objc_msgSend_rawCandidate(a2, v6, v7);
    if (v11)
      __dynamic_cast(v11, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45B850, 0);
  }
  return 0;
}

void sub_20B8E8AAC(uint64_t a1, uint64_t a2, const __CFString *a3, double a4)
{
  sub_20B9926EC(*(_QWORD *)(a1 + 16), a2, a3, a4);
}

uint64_t sub_20B8E8AB4()
{
  return LMLanguageModelGetLastOfflineAdaptationTime();
}

__CFArray *sub_20B8E8AC8(uint64_t a1)
{
  return sub_20B9E8E84(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 384) + 80);
}

uint64_t sub_20B8E8AD8(uint64_t a1, const void *a2)
{
  return sub_20B990174(*(_QWORD *)(a1 + 16), a2);
}

uint64_t sub_20B8E8AE0(uint64_t a1, const void *a2)
{
  const __CFAllocator *v4;
  const __CFArray *v5;
  uint64_t result;
  uint64_t *v7;
  void *values;

  if (a2)
  {
    v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    values = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    CFDictionarySetValue((CFMutableDictionaryRef)values, kMecabraAssetDataFilePathsKey, a2);
    v5 = CFArrayCreate(v4, (const void **)&values, 1, MEMORY[0x24BDBD690]);
    LOBYTE(v4) = sub_20B90E194(*(_QWORD *)(a1 + 32), 2, v5);
    CFRelease(values);
    CFRelease(v5);
    if ((v4 & 1) == 0)
      return 0;
  }
  else
  {
    result = sub_20B8E8BCC(a1, 2, 0);
    if (!(_DWORD)result)
      return result;
  }
  sub_20B992A94(*(uint64_t **)(a1 + 16));
  v7 = *(uint64_t **)(a1 + 24);
  if (v7)
    sub_20B93F4EC(v7);
  return 1;
}

uint64_t sub_20B8E8BCC(uint64_t a1, int a2, const __CFArray *a3)
{
  uint64_t v4;
  uint64_t *v5;

  v4 = sub_20B90E194(*(_QWORD *)(a1 + 32), a2, a3);
  if ((_DWORD)v4)
  {
    sub_20B992A94(*(uint64_t **)(a1 + 16));
    v5 = *(uint64_t **)(a1 + 24);
    if (v5)
      sub_20B93F4EC(v5);
  }
  return v4;
}

void sub_20B8E8C10(uint64_t a1, const __CFArray *a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 16);
  sub_20B9675B8(*(_QWORD *)(*(_QWORD *)(v3 + 384) + 1320), a2);
  sub_20B8D4E68(v3 + 288, a2);
}

uint64_t sub_20B8E8C44(uint64_t result, char a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 24);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 16) + 280) + 256) = a2;
  if (v2)
  {
    *(_BYTE *)(v2 + 304) = a2;
    *(_BYTE *)(v2 + 400) = a2;
  }
  return result;
}

uint64_t sub_20B8E8C60(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 424);
}

uint64_t sub_20B8E8C6C(uint64_t result, char a2)
{
  *(_BYTE *)(*(_QWORD *)(result + 16) + 440) = a2;
  return result;
}

__CFDictionary *sub_20B8E8C78(uint64_t a1, int a2)
{
  return sub_20B992B34(*(_QWORD *)(a1 + 16), a2);
}

uint64_t sub_20B8E8C80(uint64_t a1)
{
  return sub_20B992BB4(*(_QWORD *)(a1 + 16));
}

void sub_20B8E8C88(uint64_t a1)
{
  uint64_t *v2;

  sub_20B992C04(*(_QWORD *)(a1 + 16));
  v2 = *(uint64_t **)(a1 + 24);
  if (v2)
    sub_20B93F6A0(v2);
}

void sub_20B8E8CC0(uint64_t a1)
{
  sub_20B9A9CE8(*(int ***)(*(_QWORD *)(a1 + 16) + 280));
}

void sub_20B8E8CCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;

  sub_20B993280(*(_QWORD *)(a1 + 16), a2, a3);
  v4 = *(uint64_t **)(a1 + 24);
  if (v4)
    sub_20B93F628(v4, 1);
}

CFArrayRef sub_20B8E8D08(uint64_t a1, void *a2, unint64_t a3)
{
  return sub_20B992C44(*(_QWORD *)(a1 + 16), a2, a3);
}

uint64_t sub_20B8E8D10(uint64_t a1, const __CFString *a2)
{
  return sub_20B990618(*(_QWORD *)(a1 + 16), a2);
}

uint64_t sub_20B8E8D18()
{
  return 0;
}

uint64_t sub_20B8E8D20(uint64_t a1, const __CFArray *a2, const __CFString *a3, uint64_t a4, int a5)
{
  uint64_t *Mutable;
  uint64_t *v11;
  void *v12;
  void *v13;
  CFIndex Count;
  CFIndex v15;
  CFIndex i;
  void *ValueAtIndex;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;

  if (!*(_QWORD *)(a1 + 24))
    return 0;
  sub_20B8D0E3C(*(_DWORD *)(a1 + 8));
  Mutable = MecabraContextCreateMutable(0);
  if (!Mutable)
    return 0;
  v11 = Mutable;
  if (a3)
  {
    if (CFStringGetLength(a3) >= 1)
    {
      v12 = (void *)sub_20B990618(*(_QWORD *)(a1 + 16), a3);
      if (v12)
      {
        v13 = v12;
        MecabraContextAddCandidate(v11, v12);

      }
    }
  }
  if (a2)
  {
    Count = CFArrayGetCount(a2);
    if (Count >= 1)
    {
      v15 = Count;
      for (i = 0; i != v15; ++i)
      {
        ValueAtIndex = (void *)CFArrayGetValueAtIndex(a2, i);
        MecabraContextAddCandidate(v11, ValueAtIndex);
      }
    }
  }
  v18 = *(_DWORD *)(a1 + 8);
  v19 = a5 & 0x38;
  v20 = 1 << v18;
  if ((a5 & 8) != 0)
    v21 = 4;
  else
    v21 = 6;
  v22 = v19 | v21;
  v23 = v19 | 4;
  if ((v20 & 0x5800) == 0)
    v23 = a5 & 0x38;
  if ((v20 & 0x18380) != 0)
    v24 = v22;
  else
    v24 = v23;
  if (v18 <= 0x10)
    v25 = v24;
  else
    v25 = a5 & 0x38;
  v26 = sub_20B93F848(*(_QWORD *)(a1 + 24), *v11, a4, a5, v25);
  MecabraContextRelease(v11);
  return v26;
}

uint64_t sub_20B8E8E80(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6;
  const __CFString *v9;
  const __CFString *v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;

  v6 = *(_QWORD *)(a1 + 24);
  if (!v6)
    return sub_20B990694(*(_QWORD *)(a1 + 16), &stru_24C4B3660, 0, a2);
  if (a2)
  {
    v9 = *(const __CFString **)(a2 + 72);
    if (v9)
    {
      sub_20B9C4198(*(_QWORD *)(*(_QWORD *)(v6 + 16) + 32), v9);
      v6 = *(_QWORD *)(a1 + 24);
    }
    v10 = *(const __CFString **)(a2 + 80);
    if (v10)
    {
      sub_20B9C4244(*(_QWORD *)(*(_QWORD *)(v6 + 16) + 32), v10);
      v6 = *(_QWORD *)(a1 + 24);
    }
  }
  v11 = *(_DWORD *)(a1 + 8);
  v12 = a4 & 0x38;
  v13 = 1 << v11;
  if ((a4 & 8) != 0)
    v14 = 4;
  else
    v14 = 6;
  v15 = v12 | v14;
  v16 = v12 | 4;
  if ((v13 & 0x5800) == 0)
    v16 = a4 & 0x38;
  if ((v13 & 0x18380) != 0)
    v17 = v15;
  else
    v17 = v16;
  if (v11 <= 0x10)
    v18 = v17;
  else
    v18 = a4 & 0x38;
  return sub_20B93F848(v6, a2, a3, a4, v18);
}

void sub_20B8E8F6C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;

  if (a2)
  {
    if (*(_QWORD *)(a1 + 24))
    {
      v5 = objc_msgSend_rawCandidate(a2, (const char *)a2, a3);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5) == 2
        || (v8 = objc_msgSend_rawCandidate(a2, v6, v7),
            (*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8) == 3))
      {
        v9 = *(uint64_t **)(a1 + 24);
        v10 = objc_msgSend_rawCandidate(a2, v6, v7);
        sub_20B940050(v9, v10);
      }
    }
  }
}

void *sub_20B8E8FF0(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
    return (void *)sub_20B93FFA4(v4, a2, a3);
  else
    return sub_20B992070(*(_QWORD *)(a1 + 16));
}

void sub_20B8E9008(uint64_t a1, const UniChar *a2, CFIndex a3, uint64_t a4)
{
  sub_20B992C9C(*(_QWORD *)(a1 + 16), a2, a3, a4);
}

__CFArray *sub_20B8E9010(uint64_t a1, unint64_t a2)
{
  return sub_20B9BF328(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 384), a2);
}

void sub_20B8E901C(uint64_t a1, const void *a2)
{
  sub_20B9A94E8(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 280), a2, 2);
}

uint64_t sub_20B8E902C(uint64_t a1, uint64_t a2)
{
  return sub_20B9931C8(*(_QWORD *)(a1 + 16), a2);
}

uint64_t sub_20B8E9034(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t sub_20B8E903C(uint64_t a1)
{
  __CFArray *v2;
  const void **v3;
  uint64_t v4;

  v3 = (const void **)(a1 + 64);
  v2 = *(__CFArray **)(a1 + 64);
  if (v2)
    CFArrayRemoveAllValues(v2);
  sub_20B88B718((const void **)(a1 + 72), 0);
  sub_20B8B035C(v3, 0);
  sub_20B8E6890((uint64_t *)(a1 + 32), 0);
  sub_20B8E83C4((uint64_t *)(a1 + 24), 0);
  sub_20B8E8388((uint64_t *)(a1 + 16), 0, v4);
  return a1;
}

void sub_20B8E90B0(uint64_t a1)
{
  sub_20B8E9CD8(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B8E90D4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t sub_20B8E90DC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 40);
}

uint64_t sub_20B8E90E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  __CFArray *v14;
  __CFSet *v15;

  v14 = *(__CFArray **)(a1 + 64);
  if (v14)
    CFArrayRemoveAllValues(v14);
  *(_DWORD *)(a1 + 56) = 0;
  v15 = *(__CFSet **)(a1 + 72);
  if (v15)
    CFSetRemoveAllValues(v15);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16)
                                                                                                 + 16))(*(_QWORD *)(a1 + 16), a2, a3, a4, a5, a6, a7);
}

uint64_t sub_20B8E9170(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __CFArray *v8;
  __CFSet *v9;

  v8 = *(__CFArray **)(a1 + 64);
  if (v8)
    CFArrayRemoveAllValues(v8);
  *(_DWORD *)(a1 + 56) = 0;
  v9 = *(__CFSet **)(a1 + 72);
  if (v9)
    CFSetRemoveAllValues(v9);
  if (a4)
  {
    if (*(_QWORD *)(a4 + 72))
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 112))(*(_QWORD *)(a1 + 16));
    if (*(_QWORD *)(a4 + 80))
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 120))(*(_QWORD *)(a1 + 16));
  }
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16), a2, a3, a4);
}

uint64_t sub_20B8E9208(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __CFArray *v8;
  __CFSet *v9;

  v8 = *(__CFArray **)(a1 + 64);
  if (v8)
    CFArrayRemoveAllValues(v8);
  *(_DWORD *)(a1 + 56) = 0;
  v9 = *(__CFSet **)(a1 + 72);
  if (v9)
    CFSetRemoveAllValues(v9);
  if (a4)
  {
    if (*(_QWORD *)(a4 + 72))
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 112))(*(_QWORD *)(a1 + 16));
    if (*(_QWORD *)(a4 + 80))
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 120))(*(_QWORD *)(a1 + 16));
  }
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), a2, a3, a4);
}

uint64_t sub_20B8E92A0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
}

void *sub_20B8E92B0(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  void *i;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  const __CFSet *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  const void *v20;
  const char *v21;
  uint64_t v22;
  __CFSet *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  const void *v28;

  for (i = (void *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 48))(*(_QWORD *)(a1 + 16));
        i;
        i = (void *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 48))(*(_QWORD *)(a1 + 16)))
  {
    v5 = objc_msgSend_rawCandidate(i, v2, v3);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5) == 6)
      break;
    v8 = objc_msgSend_rawCandidate(i, v6, v7);
    if (v8)
    {
      v9 = (_QWORD *)v8;
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8) ? 40 : 24;
      if ((*(uint64_t (**)(_QWORD *))(*v9 + v10))(v9))
      {
        v13 = objc_msgSend_rawCandidate(i, v11, v12);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 96))(v13) == 89)
          return i;
        v16 = *(const __CFSet **)(a1 + 72);
        v17 = objc_msgSend_rawCandidate(i, v14, v15);
        if (v17)
        {
          v18 = (_QWORD *)v17;
          v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17) ? 40 : 24;
          v20 = (const void *)(*(uint64_t (**)(_QWORD *))(*v18 + v19))(v18);
        }
        else
        {
          v20 = 0;
        }
        if (!CFSetContainsValue(v16, v20))
        {
          v23 = *(__CFSet **)(a1 + 72);
          v24 = objc_msgSend_rawCandidate(i, v21, v22);
          if (v24)
          {
            v25 = (_QWORD *)v24;
            v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 40))(v24);
            v27 = 40;
            if (!v26)
              v27 = 24;
            v28 = (const void *)(*(uint64_t (**)(_QWORD *))(*v25 + v27))(v25);
          }
          else
          {
            v28 = 0;
          }
          CFSetAddValue(v23, v28);
          return i;
        }
      }
    }
  }
  return i;
}

uint64_t sub_20B8E9434(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 64))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8E9444(uint64_t a1, uint64_t a2)
{
  void *v4;
  char v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  __CFSet *v14;

  if (CFArrayGetCount(*(CFArrayRef *)(a2 + 32)) == 1)
  {
    v4 = (void *)sub_20B96ABC8(a2, 0);
    v5 = sub_20B93AAB0((uint64_t)v4);
    if (v4)
    {
      if ((v5 & 1) != 0)
      {
        v8 = objc_msgSend_rawCandidate(v4, v6, v7);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8) == 2
          || (v11 = objc_msgSend_rawCandidate(v4, v9, v10),
              (*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 72))(v11) == 3))
        {
          v12 = *(uint64_t **)(a1 + 24);
          if (v12)
          {
            v13 = objc_msgSend_rawCandidate(v4, v9, v10);
            sub_20B940050(v12, v13);
          }
          return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16), a2);
        }
      }
    }
  }
  else
  {
    sub_20B93AAB0(0);
  }
  v14 = *(__CFSet **)(a1 + 72);
  if (v14)
    CFSetRemoveAllValues(v14);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16), a2);
}

uint64_t sub_20B8E9514(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 80))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8E9524(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __CFSet *v6;

  v6 = *(__CFSet **)(a1 + 72);
  if (v6)
    CFSetRemoveAllValues(v6);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 56))(*(_QWORD *)(a1 + 16), a2, a3);
}

uint64_t sub_20B8E9570(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 88))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8E9580(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 96))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8E9590(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 104))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8E95A0(uint64_t a1, const __CFString *a2)
{
  uint64_t result;
  uint64_t v5;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 112))(*(_QWORD *)(a1 + 16));
  v5 = *(_QWORD *)(a1 + 24);
  if (v5)
    return sub_20B9C4198(*(_QWORD *)(*(_QWORD *)(v5 + 16) + 32), a2);
  return result;
}

void sub_20B8E95F0(uint64_t a1, const __CFArray *a2)
{
  _QWORD *v4;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 128))(*(_QWORD *)(a1 + 16));
  v4 = *(_QWORD **)(a1 + 24);
  if (v4)
    sub_20B93FFE0(v4, a2);
}

void sub_20B8E9638(uint64_t a1, const __CFArray *a2)
{
  _QWORD *v4;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 136))(*(_QWORD *)(a1 + 16));
  v4 = *(_QWORD **)(a1 + 24);
  if (v4)
    sub_20B940018(v4, a2);
}

uint64_t sub_20B8E9680(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 144))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8E9690(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 152))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8E96A0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 160))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8E96B0(uint64_t a1, void *a2, uint64_t a3)
{
  const void *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const void *v10;

  v5 = (const void *)objc_msgSend_rawCandidate(a2, (const char *)a2, a3);
  if (v5
    && (v8 = __dynamic_cast(v5, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0)) != 0)
  {
    if ((*(unsigned int (**)(void *, _QWORD, _QWORD))(*(_QWORD *)v8 + 248))(v8, 0, 0))
      return (*(uint64_t (**)(_QWORD, void *))(**(_QWORD **)(a1 + 16) + 168))(*(_QWORD *)(a1 + 16), a2);
  }
  else
  {
    v10 = (const void *)objc_msgSend_rawCandidate(a2, v6, v7);
    if (v10)
      __dynamic_cast(v10, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45B850, 0);
  }
  return 0;
}

uint64_t sub_20B8E9754(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 176))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8E9764(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 184))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8E9774(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 192))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8E9784(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 200))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8E9794(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 216))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8E97A4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 208))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8E97B4(uint64_t a1, const void *a2)
{
  const __CFAllocator *v4;
  const __CFArray *v5;
  uint64_t result;
  uint64_t *v7;
  void *values;

  if (a2)
  {
    v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    values = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    CFDictionarySetValue((CFMutableDictionaryRef)values, kMecabraAssetDataFilePathsKey, a2);
    v5 = CFArrayCreate(v4, (const void **)&values, 1, MEMORY[0x24BDBD690]);
    LOBYTE(v4) = sub_20B90E194(*(_QWORD *)(a1 + 32), 2, v5);
    CFRelease(values);
    CFRelease(v5);
    if ((v4 & 1) == 0)
      return 0;
  }
  else
  {
    result = sub_20B8E98A8(a1, 2, 0);
    if (!(_DWORD)result)
      return result;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 224))(*(_QWORD *)(a1 + 16));
  v7 = *(uint64_t **)(a1 + 24);
  if (v7)
    sub_20B93F4EC(v7);
  return 1;
}

uint64_t sub_20B8E98A8(uint64_t a1, int a2, const __CFArray *a3)
{
  uint64_t v4;
  uint64_t *v5;

  v4 = sub_20B90E194(*(_QWORD *)(a1 + 32), a2, a3);
  if ((_DWORD)v4)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 224))(*(_QWORD *)(a1 + 16));
    v5 = *(uint64_t **)(a1 + 24);
    if (v5)
      sub_20B93F4EC(v5);
  }
  return v4;
}

uint64_t sub_20B8E98F8(uint64_t a1, char a2)
{
  uint64_t result;
  uint64_t v5;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 240))(*(_QWORD *)(a1 + 16));
  v5 = *(_QWORD *)(a1 + 24);
  if (v5)
  {
    *(_BYTE *)(v5 + 304) = a2;
    *(_BYTE *)(v5 + 400) = a2;
  }
  return result;
}

uint64_t sub_20B8E9938()
{
  return 0;
}

uint64_t sub_20B8E9944()
{
  return 0;
}

uint64_t sub_20B8E994C(uint64_t a1)
{
  return sub_20B8881A0(*(uint64_t **)(a1 + 16));
}

void sub_20B8E9954(uint64_t a1)
{
  uint64_t *v2;

  sub_20B8881A0(*(uint64_t **)(a1 + 16));
  v2 = *(uint64_t **)(a1 + 24);
  if (v2)
    sub_20B93F6A0(v2);
}

void sub_20B8E9994(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 24);
  if (v1)
    sub_20B93F628(v1, 1);
}

uint64_t sub_20B8E99A8()
{
  return 0;
}

uint64_t sub_20B8E99B0(uint64_t a1, const __CFString *a2)
{
  return sub_20B8881F0(*(_QWORD *)(a1 + 16), a2);
}

uint64_t sub_20B8E99B8()
{
  return 0;
}

uint64_t sub_20B8E99C0(uint64_t a1, const __CFArray *a2, const __CFString *a3, uint64_t a4, int a5)
{
  uint64_t *Mutable;
  uint64_t *v11;
  void *v12;
  void *v13;
  CFIndex Count;
  CFIndex v15;
  CFIndex i;
  void *ValueAtIndex;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;

  if (!*(_QWORD *)(a1 + 24))
    return 0;
  sub_20B8D0E3C(*(_DWORD *)(a1 + 8));
  Mutable = MecabraContextCreateMutable(0);
  if (!Mutable)
    return 0;
  v11 = Mutable;
  if (a3)
  {
    if (CFStringGetLength(a3) >= 1)
    {
      v12 = (void *)sub_20B8881F0(*(_QWORD *)(a1 + 16), a3);
      if (v12)
      {
        v13 = v12;
        MecabraContextAddCandidate(v11, v12);

      }
    }
  }
  if (a2)
  {
    Count = CFArrayGetCount(a2);
    if (Count >= 1)
    {
      v15 = Count;
      for (i = 0; i != v15; ++i)
      {
        ValueAtIndex = (void *)CFArrayGetValueAtIndex(a2, i);
        MecabraContextAddCandidate(v11, ValueAtIndex);
      }
    }
  }
  v18 = *(_DWORD *)(a1 + 8);
  v19 = a5 & 0x38;
  v20 = 1 << v18;
  if ((a5 & 8) != 0)
    v21 = 4;
  else
    v21 = 6;
  v22 = v19 | v21;
  v23 = v19 | 4;
  if ((v20 & 0x5800) == 0)
    v23 = a5 & 0x38;
  if ((v20 & 0x18380) != 0)
    v24 = v22;
  else
    v24 = v23;
  if (v18 <= 0x10)
    v25 = v24;
  else
    v25 = a5 & 0x38;
  v26 = sub_20B93F848(*(_QWORD *)(a1 + 24), *v11, a4, a5, v25);
  MecabraContextRelease(v11);
  return v26;
}

uint64_t sub_20B8E9B20(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6;
  const __CFString *v9;
  const __CFString *v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;

  v6 = *(_QWORD *)(a1 + 24);
  if (!v6)
    return (*(uint64_t (**)(_QWORD, const __CFString *, _QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16), &stru_24C4B3660, 0, a2);
  if (a2)
  {
    v9 = *(const __CFString **)(a2 + 72);
    if (v9)
    {
      sub_20B9C4198(*(_QWORD *)(*(_QWORD *)(v6 + 16) + 32), v9);
      v6 = *(_QWORD *)(a1 + 24);
    }
    v10 = *(const __CFString **)(a2 + 80);
    if (v10)
    {
      sub_20B9C4244(*(_QWORD *)(*(_QWORD *)(v6 + 16) + 32), v10);
      v6 = *(_QWORD *)(a1 + 24);
    }
  }
  v11 = *(_DWORD *)(a1 + 8);
  v12 = a4 & 0x38;
  v13 = 1 << v11;
  if ((a4 & 8) != 0)
    v14 = 4;
  else
    v14 = 6;
  v15 = v12 | v14;
  v16 = v12 | 4;
  if ((v13 & 0x5800) == 0)
    v16 = a4 & 0x38;
  if ((v13 & 0x18380) != 0)
    v17 = v15;
  else
    v17 = v16;
  if (v11 <= 0x10)
    v18 = v17;
  else
    v18 = a4 & 0x38;
  return sub_20B93F848(v6, a2, a3, a4, v18);
}

void sub_20B8E9C14(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;

  if (a2)
  {
    if (*(_QWORD *)(a1 + 24))
    {
      v5 = objc_msgSend_rawCandidate(a2, (const char *)a2, a3);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5) == 2
        || (v8 = objc_msgSend_rawCandidate(a2, v6, v7),
            (*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8) == 3))
      {
        v9 = *(uint64_t **)(a1 + 24);
        v10 = objc_msgSend_rawCandidate(a2, v6, v7);
        sub_20B940050(v9, v10);
      }
    }
  }
}

uint64_t sub_20B8E9C98(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
    return sub_20B93FFA4(v4, a2, a3);
  else
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 48))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8E9CBC()
{
  return 0;
}

uint64_t sub_20B8E9CC8()
{
  return 0;
}

uint64_t sub_20B8E9CD0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t sub_20B8E9CD8(uint64_t a1)
{
  __CFArray *v2;
  const void **v3;
  uint64_t v4;

  v3 = (const void **)(a1 + 64);
  v2 = *(__CFArray **)(a1 + 64);
  if (v2)
    CFArrayRemoveAllValues(v2);
  sub_20B88B718((const void **)(a1 + 72), 0);
  sub_20B8B035C(v3, 0);
  sub_20B8E6890((uint64_t *)(a1 + 32), 0);
  sub_20B8E83C4((uint64_t *)(a1 + 24), 0);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

void sub_20B8E9D58(uint64_t a1)
{
  sub_20B8EA980(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B8E9D7C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t sub_20B8E9D84(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 40);
}

uint64_t sub_20B8E9D8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  __CFArray *v14;
  __CFSet *v15;

  v14 = *(__CFArray **)(a1 + 64);
  if (v14)
    CFArrayRemoveAllValues(v14);
  *(_DWORD *)(a1 + 56) = 0;
  v15 = *(__CFSet **)(a1 + 72);
  if (v15)
    CFSetRemoveAllValues(v15);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16)
                                                                                                 + 16))(*(_QWORD *)(a1 + 16), a2, a3, a4, a5, a6, a7);
}

uint64_t sub_20B8E9E18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __CFArray *v8;
  __CFSet *v9;

  v8 = *(__CFArray **)(a1 + 64);
  if (v8)
    CFArrayRemoveAllValues(v8);
  *(_DWORD *)(a1 + 56) = 0;
  v9 = *(__CFSet **)(a1 + 72);
  if (v9)
    CFSetRemoveAllValues(v9);
  if (a4)
  {
    if (*(_QWORD *)(a4 + 72))
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 112))(*(_QWORD *)(a1 + 16));
    if (*(_QWORD *)(a4 + 80))
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 120))(*(_QWORD *)(a1 + 16));
  }
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16), a2, a3, a4);
}

uint64_t sub_20B8E9EB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __CFArray *v8;
  __CFSet *v9;

  v8 = *(__CFArray **)(a1 + 64);
  if (v8)
    CFArrayRemoveAllValues(v8);
  *(_DWORD *)(a1 + 56) = 0;
  v9 = *(__CFSet **)(a1 + 72);
  if (v9)
    CFSetRemoveAllValues(v9);
  if (a4)
  {
    if (*(_QWORD *)(a4 + 72))
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 112))(*(_QWORD *)(a1 + 16));
    if (*(_QWORD *)(a4 + 80))
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 120))(*(_QWORD *)(a1 + 16));
  }
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), a2, a3, a4);
}

uint64_t sub_20B8E9F48(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
}

void *sub_20B8E9F58(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  void *i;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  const __CFSet *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  const void *v20;
  const char *v21;
  uint64_t v22;
  __CFSet *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  const void *v28;

  for (i = (void *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 48))(*(_QWORD *)(a1 + 16));
        i;
        i = (void *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 48))(*(_QWORD *)(a1 + 16)))
  {
    v5 = objc_msgSend_rawCandidate(i, v2, v3);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5) == 6)
      break;
    v8 = objc_msgSend_rawCandidate(i, v6, v7);
    if (v8)
    {
      v9 = (_QWORD *)v8;
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8) ? 40 : 24;
      if ((*(uint64_t (**)(_QWORD *))(*v9 + v10))(v9))
      {
        v13 = objc_msgSend_rawCandidate(i, v11, v12);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 96))(v13) == 89)
          return i;
        v16 = *(const __CFSet **)(a1 + 72);
        v17 = objc_msgSend_rawCandidate(i, v14, v15);
        if (v17)
        {
          v18 = (_QWORD *)v17;
          v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17) ? 40 : 24;
          v20 = (const void *)(*(uint64_t (**)(_QWORD *))(*v18 + v19))(v18);
        }
        else
        {
          v20 = 0;
        }
        if (!CFSetContainsValue(v16, v20))
        {
          v23 = *(__CFSet **)(a1 + 72);
          v24 = objc_msgSend_rawCandidate(i, v21, v22);
          if (v24)
          {
            v25 = (_QWORD *)v24;
            v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 40))(v24);
            v27 = 40;
            if (!v26)
              v27 = 24;
            v28 = (const void *)(*(uint64_t (**)(_QWORD *))(*v25 + v27))(v25);
          }
          else
          {
            v28 = 0;
          }
          CFSetAddValue(v23, v28);
          return i;
        }
      }
    }
  }
  return i;
}

uint64_t sub_20B8EA0DC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 64))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8EA0EC(uint64_t a1, uint64_t a2)
{
  void *v4;
  char v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  __CFSet *v14;

  if (CFArrayGetCount(*(CFArrayRef *)(a2 + 32)) == 1)
  {
    v4 = (void *)sub_20B96ABC8(a2, 0);
    v5 = sub_20B93AAB0((uint64_t)v4);
    if (v4)
    {
      if ((v5 & 1) != 0)
      {
        v8 = objc_msgSend_rawCandidate(v4, v6, v7);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8) == 2
          || (v11 = objc_msgSend_rawCandidate(v4, v9, v10),
              (*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 72))(v11) == 3))
        {
          v12 = *(uint64_t **)(a1 + 24);
          if (v12)
          {
            v13 = objc_msgSend_rawCandidate(v4, v9, v10);
            sub_20B940050(v12, v13);
          }
          return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16), a2);
        }
      }
    }
  }
  else
  {
    sub_20B93AAB0(0);
  }
  v14 = *(__CFSet **)(a1 + 72);
  if (v14)
    CFSetRemoveAllValues(v14);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16), a2);
}

uint64_t sub_20B8EA1BC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 80))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8EA1CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __CFSet *v6;

  v6 = *(__CFSet **)(a1 + 72);
  if (v6)
    CFSetRemoveAllValues(v6);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 56))(*(_QWORD *)(a1 + 16), a2, a3);
}

uint64_t sub_20B8EA218(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 88))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8EA228(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 96))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8EA238(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 104))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8EA248(uint64_t a1, const __CFString *a2)
{
  uint64_t result;
  uint64_t v5;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 112))(*(_QWORD *)(a1 + 16));
  v5 = *(_QWORD *)(a1 + 24);
  if (v5)
    return sub_20B9C4198(*(_QWORD *)(*(_QWORD *)(v5 + 16) + 32), a2);
  return result;
}

void sub_20B8EA298(uint64_t a1, const __CFArray *a2)
{
  _QWORD *v4;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 128))(*(_QWORD *)(a1 + 16));
  v4 = *(_QWORD **)(a1 + 24);
  if (v4)
    sub_20B93FFE0(v4, a2);
}

void sub_20B8EA2E0(uint64_t a1, const __CFArray *a2)
{
  _QWORD *v4;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 136))(*(_QWORD *)(a1 + 16));
  v4 = *(_QWORD **)(a1 + 24);
  if (v4)
    sub_20B940018(v4, a2);
}

uint64_t sub_20B8EA328(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 144))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8EA338(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 152))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8EA348(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 160))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8EA358(uint64_t a1, void *a2, uint64_t a3)
{
  const void *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const void *v10;

  v5 = (const void *)objc_msgSend_rawCandidate(a2, (const char *)a2, a3);
  if (v5
    && (v8 = __dynamic_cast(v5, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0)) != 0)
  {
    if ((*(unsigned int (**)(void *, _QWORD, _QWORD))(*(_QWORD *)v8 + 248))(v8, 0, 0))
      return (*(uint64_t (**)(_QWORD, void *))(**(_QWORD **)(a1 + 16) + 168))(*(_QWORD *)(a1 + 16), a2);
  }
  else
  {
    v10 = (const void *)objc_msgSend_rawCandidate(a2, v6, v7);
    if (v10)
      __dynamic_cast(v10, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45B850, 0);
  }
  return 0;
}

uint64_t sub_20B8EA3FC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 176))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8EA40C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 184))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8EA41C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 192))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8EA42C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 200))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8EA43C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 216))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8EA44C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 208))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8EA45C(uint64_t a1, const void *a2)
{
  const __CFAllocator *v4;
  const __CFArray *v5;
  uint64_t result;
  uint64_t *v7;
  void *values;

  if (a2)
  {
    v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    values = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    CFDictionarySetValue((CFMutableDictionaryRef)values, kMecabraAssetDataFilePathsKey, a2);
    v5 = CFArrayCreate(v4, (const void **)&values, 1, MEMORY[0x24BDBD690]);
    LOBYTE(v4) = sub_20B90E194(*(_QWORD *)(a1 + 32), 2, v5);
    CFRelease(values);
    CFRelease(v5);
    if ((v4 & 1) == 0)
      return 0;
  }
  else
  {
    result = sub_20B8EA550(a1, 2, 0);
    if (!(_DWORD)result)
      return result;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 224))(*(_QWORD *)(a1 + 16));
  v7 = *(uint64_t **)(a1 + 24);
  if (v7)
    sub_20B93F4EC(v7);
  return 1;
}

uint64_t sub_20B8EA550(uint64_t a1, int a2, const __CFArray *a3)
{
  uint64_t v4;
  uint64_t *v5;

  v4 = sub_20B90E194(*(_QWORD *)(a1 + 32), a2, a3);
  if ((_DWORD)v4)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 224))(*(_QWORD *)(a1 + 16));
    v5 = *(uint64_t **)(a1 + 24);
    if (v5)
      sub_20B93F4EC(v5);
  }
  return v4;
}

uint64_t sub_20B8EA5A0(uint64_t a1, char a2)
{
  uint64_t result;
  uint64_t v5;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 240))(*(_QWORD *)(a1 + 16));
  v5 = *(_QWORD *)(a1 + 24);
  if (v5)
  {
    *(_BYTE *)(v5 + 304) = a2;
    *(_BYTE *)(v5 + 400) = a2;
  }
  return result;
}

uint64_t sub_20B8EA5E0()
{
  return 0;
}

uint64_t sub_20B8EA5EC()
{
  return 0;
}

uint64_t sub_20B8EA5F4(uint64_t a1)
{
  return sub_20B8881A0(*(uint64_t **)(a1 + 16));
}

void sub_20B8EA5FC(uint64_t a1)
{
  uint64_t *v2;

  sub_20B8881A0(*(uint64_t **)(a1 + 16));
  v2 = *(uint64_t **)(a1 + 24);
  if (v2)
    sub_20B93F6A0(v2);
}

void sub_20B8EA63C(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 24);
  if (v1)
    sub_20B93F628(v1, 1);
}

uint64_t sub_20B8EA650()
{
  return 0;
}

uint64_t sub_20B8EA658(uint64_t a1, const __CFString *a2)
{
  return sub_20B8881F0(*(_QWORD *)(a1 + 16), a2);
}

uint64_t sub_20B8EA660()
{
  return 0;
}

uint64_t sub_20B8EA668(uint64_t a1, const __CFArray *a2, const __CFString *a3, uint64_t a4, int a5)
{
  uint64_t *Mutable;
  uint64_t *v11;
  void *v12;
  void *v13;
  CFIndex Count;
  CFIndex v15;
  CFIndex i;
  void *ValueAtIndex;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;

  if (!*(_QWORD *)(a1 + 24))
    return 0;
  sub_20B8D0E3C(*(_DWORD *)(a1 + 8));
  Mutable = MecabraContextCreateMutable(0);
  if (!Mutable)
    return 0;
  v11 = Mutable;
  if (a3)
  {
    if (CFStringGetLength(a3) >= 1)
    {
      v12 = (void *)sub_20B8881F0(*(_QWORD *)(a1 + 16), a3);
      if (v12)
      {
        v13 = v12;
        MecabraContextAddCandidate(v11, v12);

      }
    }
  }
  if (a2)
  {
    Count = CFArrayGetCount(a2);
    if (Count >= 1)
    {
      v15 = Count;
      for (i = 0; i != v15; ++i)
      {
        ValueAtIndex = (void *)CFArrayGetValueAtIndex(a2, i);
        MecabraContextAddCandidate(v11, ValueAtIndex);
      }
    }
  }
  v18 = *(_DWORD *)(a1 + 8);
  v19 = a5 & 0x38;
  v20 = 1 << v18;
  if ((a5 & 8) != 0)
    v21 = 4;
  else
    v21 = 6;
  v22 = v19 | v21;
  v23 = v19 | 4;
  if ((v20 & 0x5800) == 0)
    v23 = a5 & 0x38;
  if ((v20 & 0x18380) != 0)
    v24 = v22;
  else
    v24 = v23;
  if (v18 <= 0x10)
    v25 = v24;
  else
    v25 = a5 & 0x38;
  v26 = sub_20B93F848(*(_QWORD *)(a1 + 24), *v11, a4, a5, v25);
  MecabraContextRelease(v11);
  return v26;
}

uint64_t sub_20B8EA7C8(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6;
  const __CFString *v9;
  const __CFString *v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;

  v6 = *(_QWORD *)(a1 + 24);
  if (!v6)
    return (*(uint64_t (**)(_QWORD, const __CFString *, _QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16), &stru_24C4B3660, 0, a2);
  if (a2)
  {
    v9 = *(const __CFString **)(a2 + 72);
    if (v9)
    {
      sub_20B9C4198(*(_QWORD *)(*(_QWORD *)(v6 + 16) + 32), v9);
      v6 = *(_QWORD *)(a1 + 24);
    }
    v10 = *(const __CFString **)(a2 + 80);
    if (v10)
    {
      sub_20B9C4244(*(_QWORD *)(*(_QWORD *)(v6 + 16) + 32), v10);
      v6 = *(_QWORD *)(a1 + 24);
    }
  }
  v11 = *(_DWORD *)(a1 + 8);
  v12 = a4 & 0x38;
  v13 = 1 << v11;
  if ((a4 & 8) != 0)
    v14 = 4;
  else
    v14 = 6;
  v15 = v12 | v14;
  v16 = v12 | 4;
  if ((v13 & 0x5800) == 0)
    v16 = a4 & 0x38;
  if ((v13 & 0x18380) != 0)
    v17 = v15;
  else
    v17 = v16;
  if (v11 <= 0x10)
    v18 = v17;
  else
    v18 = a4 & 0x38;
  return sub_20B93F848(v6, a2, a3, a4, v18);
}

void sub_20B8EA8BC(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;

  if (a2)
  {
    if (*(_QWORD *)(a1 + 24))
    {
      v5 = objc_msgSend_rawCandidate(a2, (const char *)a2, a3);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5) == 2
        || (v8 = objc_msgSend_rawCandidate(a2, v6, v7),
            (*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8) == 3))
      {
        v9 = *(uint64_t **)(a1 + 24);
        v10 = objc_msgSend_rawCandidate(a2, v6, v7);
        sub_20B940050(v9, v10);
      }
    }
  }
}

uint64_t sub_20B8EA940(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
    return sub_20B93FFA4(v4, a2, a3);
  else
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 48))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8EA964()
{
  return 0;
}

uint64_t sub_20B8EA970()
{
  return 0;
}

uint64_t sub_20B8EA978(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t sub_20B8EA980(uint64_t a1)
{
  __CFArray *v2;
  const void **v3;
  uint64_t v4;

  v3 = (const void **)(a1 + 64);
  v2 = *(__CFArray **)(a1 + 64);
  if (v2)
    CFArrayRemoveAllValues(v2);
  sub_20B88B718((const void **)(a1 + 72), 0);
  sub_20B8B035C(v3, 0);
  sub_20B8E6890((uint64_t *)(a1 + 32), 0);
  sub_20B8E83C4((uint64_t *)(a1 + 24), 0);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

void sub_20B8EAA00(uint64_t a1)
{
  sub_20B8EB628(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B8EAA24(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t sub_20B8EAA2C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 40);
}

uint64_t sub_20B8EAA34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  __CFArray *v14;
  __CFSet *v15;

  v14 = *(__CFArray **)(a1 + 64);
  if (v14)
    CFArrayRemoveAllValues(v14);
  *(_DWORD *)(a1 + 56) = 0;
  v15 = *(__CFSet **)(a1 + 72);
  if (v15)
    CFSetRemoveAllValues(v15);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16)
                                                                                                 + 16))(*(_QWORD *)(a1 + 16), a2, a3, a4, a5, a6, a7);
}

uint64_t sub_20B8EAAC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __CFArray *v8;
  __CFSet *v9;

  v8 = *(__CFArray **)(a1 + 64);
  if (v8)
    CFArrayRemoveAllValues(v8);
  *(_DWORD *)(a1 + 56) = 0;
  v9 = *(__CFSet **)(a1 + 72);
  if (v9)
    CFSetRemoveAllValues(v9);
  if (a4)
  {
    if (*(_QWORD *)(a4 + 72))
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 112))(*(_QWORD *)(a1 + 16));
    if (*(_QWORD *)(a4 + 80))
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 120))(*(_QWORD *)(a1 + 16));
  }
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16), a2, a3, a4);
}

uint64_t sub_20B8EAB58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __CFArray *v8;
  __CFSet *v9;

  v8 = *(__CFArray **)(a1 + 64);
  if (v8)
    CFArrayRemoveAllValues(v8);
  *(_DWORD *)(a1 + 56) = 0;
  v9 = *(__CFSet **)(a1 + 72);
  if (v9)
    CFSetRemoveAllValues(v9);
  if (a4)
  {
    if (*(_QWORD *)(a4 + 72))
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 112))(*(_QWORD *)(a1 + 16));
    if (*(_QWORD *)(a4 + 80))
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 120))(*(_QWORD *)(a1 + 16));
  }
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), a2, a3, a4);
}

uint64_t sub_20B8EABF0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
}

void *sub_20B8EAC00(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  void *i;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  const __CFSet *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  const void *v20;
  const char *v21;
  uint64_t v22;
  __CFSet *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  const void *v28;

  for (i = (void *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 48))(*(_QWORD *)(a1 + 16));
        i;
        i = (void *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 48))(*(_QWORD *)(a1 + 16)))
  {
    v5 = objc_msgSend_rawCandidate(i, v2, v3);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5) == 6)
      break;
    v8 = objc_msgSend_rawCandidate(i, v6, v7);
    if (v8)
    {
      v9 = (_QWORD *)v8;
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8) ? 40 : 24;
      if ((*(uint64_t (**)(_QWORD *))(*v9 + v10))(v9))
      {
        v13 = objc_msgSend_rawCandidate(i, v11, v12);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 96))(v13) == 89)
          return i;
        v16 = *(const __CFSet **)(a1 + 72);
        v17 = objc_msgSend_rawCandidate(i, v14, v15);
        if (v17)
        {
          v18 = (_QWORD *)v17;
          v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17) ? 40 : 24;
          v20 = (const void *)(*(uint64_t (**)(_QWORD *))(*v18 + v19))(v18);
        }
        else
        {
          v20 = 0;
        }
        if (!CFSetContainsValue(v16, v20))
        {
          v23 = *(__CFSet **)(a1 + 72);
          v24 = objc_msgSend_rawCandidate(i, v21, v22);
          if (v24)
          {
            v25 = (_QWORD *)v24;
            v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 40))(v24);
            v27 = 40;
            if (!v26)
              v27 = 24;
            v28 = (const void *)(*(uint64_t (**)(_QWORD *))(*v25 + v27))(v25);
          }
          else
          {
            v28 = 0;
          }
          CFSetAddValue(v23, v28);
          return i;
        }
      }
    }
  }
  return i;
}

uint64_t sub_20B8EAD84(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 64))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8EAD94(uint64_t a1, uint64_t a2)
{
  void *v4;
  char v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  __CFSet *v14;

  if (CFArrayGetCount(*(CFArrayRef *)(a2 + 32)) == 1)
  {
    v4 = (void *)sub_20B96ABC8(a2, 0);
    v5 = sub_20B93AAB0((uint64_t)v4);
    if (v4)
    {
      if ((v5 & 1) != 0)
      {
        v8 = objc_msgSend_rawCandidate(v4, v6, v7);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8) == 2
          || (v11 = objc_msgSend_rawCandidate(v4, v9, v10),
              (*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 72))(v11) == 3))
        {
          v12 = *(uint64_t **)(a1 + 24);
          if (v12)
          {
            v13 = objc_msgSend_rawCandidate(v4, v9, v10);
            sub_20B940050(v12, v13);
          }
          return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16), a2);
        }
      }
    }
  }
  else
  {
    sub_20B93AAB0(0);
  }
  v14 = *(__CFSet **)(a1 + 72);
  if (v14)
    CFSetRemoveAllValues(v14);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16), a2);
}

uint64_t sub_20B8EAE64(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 80))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8EAE74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __CFSet *v6;

  v6 = *(__CFSet **)(a1 + 72);
  if (v6)
    CFSetRemoveAllValues(v6);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 56))(*(_QWORD *)(a1 + 16), a2, a3);
}

uint64_t sub_20B8EAEC0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 88))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8EAED0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 96))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8EAEE0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 104))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8EAEF0(uint64_t a1, const __CFString *a2)
{
  uint64_t result;
  uint64_t v5;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 112))(*(_QWORD *)(a1 + 16));
  v5 = *(_QWORD *)(a1 + 24);
  if (v5)
    return sub_20B9C4198(*(_QWORD *)(*(_QWORD *)(v5 + 16) + 32), a2);
  return result;
}

void sub_20B8EAF40(uint64_t a1, const __CFArray *a2)
{
  _QWORD *v4;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 128))(*(_QWORD *)(a1 + 16));
  v4 = *(_QWORD **)(a1 + 24);
  if (v4)
    sub_20B93FFE0(v4, a2);
}

void sub_20B8EAF88(uint64_t a1, const __CFArray *a2)
{
  _QWORD *v4;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 136))(*(_QWORD *)(a1 + 16));
  v4 = *(_QWORD **)(a1 + 24);
  if (v4)
    sub_20B940018(v4, a2);
}

uint64_t sub_20B8EAFD0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 144))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8EAFE0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 152))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8EAFF0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 160))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8EB000(uint64_t a1, void *a2, uint64_t a3)
{
  const void *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const void *v10;

  v5 = (const void *)objc_msgSend_rawCandidate(a2, (const char *)a2, a3);
  if (v5
    && (v8 = __dynamic_cast(v5, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0)) != 0)
  {
    if ((*(unsigned int (**)(void *, _QWORD, _QWORD))(*(_QWORD *)v8 + 248))(v8, 0, 0))
      return (*(uint64_t (**)(_QWORD, void *))(**(_QWORD **)(a1 + 16) + 168))(*(_QWORD *)(a1 + 16), a2);
  }
  else
  {
    v10 = (const void *)objc_msgSend_rawCandidate(a2, v6, v7);
    if (v10)
      __dynamic_cast(v10, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45B850, 0);
  }
  return 0;
}

uint64_t sub_20B8EB0A4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 176))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8EB0B4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 184))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8EB0C4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 192))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8EB0D4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 200))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8EB0E4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 216))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8EB0F4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 208))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8EB104(uint64_t a1, const void *a2)
{
  const __CFAllocator *v4;
  const __CFArray *v5;
  uint64_t result;
  uint64_t *v7;
  void *values;

  if (a2)
  {
    v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    values = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    CFDictionarySetValue((CFMutableDictionaryRef)values, kMecabraAssetDataFilePathsKey, a2);
    v5 = CFArrayCreate(v4, (const void **)&values, 1, MEMORY[0x24BDBD690]);
    LOBYTE(v4) = sub_20B90E194(*(_QWORD *)(a1 + 32), 2, v5);
    CFRelease(values);
    CFRelease(v5);
    if ((v4 & 1) == 0)
      return 0;
  }
  else
  {
    result = sub_20B8EB1F8(a1, 2, 0);
    if (!(_DWORD)result)
      return result;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 224))(*(_QWORD *)(a1 + 16));
  v7 = *(uint64_t **)(a1 + 24);
  if (v7)
    sub_20B93F4EC(v7);
  return 1;
}

uint64_t sub_20B8EB1F8(uint64_t a1, int a2, const __CFArray *a3)
{
  uint64_t v4;
  uint64_t *v5;

  v4 = sub_20B90E194(*(_QWORD *)(a1 + 32), a2, a3);
  if ((_DWORD)v4)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 224))(*(_QWORD *)(a1 + 16));
    v5 = *(uint64_t **)(a1 + 24);
    if (v5)
      sub_20B93F4EC(v5);
  }
  return v4;
}

uint64_t sub_20B8EB248(uint64_t a1, char a2)
{
  uint64_t result;
  uint64_t v5;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 240))(*(_QWORD *)(a1 + 16));
  v5 = *(_QWORD *)(a1 + 24);
  if (v5)
  {
    *(_BYTE *)(v5 + 304) = a2;
    *(_BYTE *)(v5 + 400) = a2;
  }
  return result;
}

uint64_t sub_20B8EB288()
{
  return 0;
}

uint64_t sub_20B8EB294()
{
  return 0;
}

uint64_t sub_20B8EB29C(uint64_t a1)
{
  return sub_20B8881A0(*(uint64_t **)(a1 + 16));
}

void sub_20B8EB2A4(uint64_t a1)
{
  uint64_t *v2;

  sub_20B8881A0(*(uint64_t **)(a1 + 16));
  v2 = *(uint64_t **)(a1 + 24);
  if (v2)
    sub_20B93F6A0(v2);
}

void sub_20B8EB2E4(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 24);
  if (v1)
    sub_20B93F628(v1, 1);
}

uint64_t sub_20B8EB2F8()
{
  return 0;
}

uint64_t sub_20B8EB300(uint64_t a1, const __CFString *a2)
{
  return sub_20B8881F0(*(_QWORD *)(a1 + 16), a2);
}

uint64_t sub_20B8EB308()
{
  return 0;
}

uint64_t sub_20B8EB310(uint64_t a1, const __CFArray *a2, const __CFString *a3, uint64_t a4, int a5)
{
  uint64_t *Mutable;
  uint64_t *v11;
  void *v12;
  void *v13;
  CFIndex Count;
  CFIndex v15;
  CFIndex i;
  void *ValueAtIndex;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;

  if (!*(_QWORD *)(a1 + 24))
    return 0;
  sub_20B8D0E3C(*(_DWORD *)(a1 + 8));
  Mutable = MecabraContextCreateMutable(0);
  if (!Mutable)
    return 0;
  v11 = Mutable;
  if (a3)
  {
    if (CFStringGetLength(a3) >= 1)
    {
      v12 = (void *)sub_20B8881F0(*(_QWORD *)(a1 + 16), a3);
      if (v12)
      {
        v13 = v12;
        MecabraContextAddCandidate(v11, v12);

      }
    }
  }
  if (a2)
  {
    Count = CFArrayGetCount(a2);
    if (Count >= 1)
    {
      v15 = Count;
      for (i = 0; i != v15; ++i)
      {
        ValueAtIndex = (void *)CFArrayGetValueAtIndex(a2, i);
        MecabraContextAddCandidate(v11, ValueAtIndex);
      }
    }
  }
  v18 = *(_DWORD *)(a1 + 8);
  v19 = a5 & 0x38;
  v20 = 1 << v18;
  if ((a5 & 8) != 0)
    v21 = 4;
  else
    v21 = 6;
  v22 = v19 | v21;
  v23 = v19 | 4;
  if ((v20 & 0x5800) == 0)
    v23 = a5 & 0x38;
  if ((v20 & 0x18380) != 0)
    v24 = v22;
  else
    v24 = v23;
  if (v18 <= 0x10)
    v25 = v24;
  else
    v25 = a5 & 0x38;
  v26 = sub_20B93F848(*(_QWORD *)(a1 + 24), *v11, a4, a5, v25);
  MecabraContextRelease(v11);
  return v26;
}

uint64_t sub_20B8EB470(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6;
  const __CFString *v9;
  const __CFString *v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;

  v6 = *(_QWORD *)(a1 + 24);
  if (!v6)
    return (*(uint64_t (**)(_QWORD, const __CFString *, _QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16), &stru_24C4B3660, 0, a2);
  if (a2)
  {
    v9 = *(const __CFString **)(a2 + 72);
    if (v9)
    {
      sub_20B9C4198(*(_QWORD *)(*(_QWORD *)(v6 + 16) + 32), v9);
      v6 = *(_QWORD *)(a1 + 24);
    }
    v10 = *(const __CFString **)(a2 + 80);
    if (v10)
    {
      sub_20B9C4244(*(_QWORD *)(*(_QWORD *)(v6 + 16) + 32), v10);
      v6 = *(_QWORD *)(a1 + 24);
    }
  }
  v11 = *(_DWORD *)(a1 + 8);
  v12 = a4 & 0x38;
  v13 = 1 << v11;
  if ((a4 & 8) != 0)
    v14 = 4;
  else
    v14 = 6;
  v15 = v12 | v14;
  v16 = v12 | 4;
  if ((v13 & 0x5800) == 0)
    v16 = a4 & 0x38;
  if ((v13 & 0x18380) != 0)
    v17 = v15;
  else
    v17 = v16;
  if (v11 <= 0x10)
    v18 = v17;
  else
    v18 = a4 & 0x38;
  return sub_20B93F848(v6, a2, a3, a4, v18);
}

void sub_20B8EB564(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;

  if (a2)
  {
    if (*(_QWORD *)(a1 + 24))
    {
      v5 = objc_msgSend_rawCandidate(a2, (const char *)a2, a3);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5) == 2
        || (v8 = objc_msgSend_rawCandidate(a2, v6, v7),
            (*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8) == 3))
      {
        v9 = *(uint64_t **)(a1 + 24);
        v10 = objc_msgSend_rawCandidate(a2, v6, v7);
        sub_20B940050(v9, v10);
      }
    }
  }
}

uint64_t sub_20B8EB5E8(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
    return sub_20B93FFA4(v4, a2, a3);
  else
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 48))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8EB60C()
{
  return 0;
}

uint64_t sub_20B8EB618()
{
  return 0;
}

uint64_t sub_20B8EB620(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t sub_20B8EB628(uint64_t a1)
{
  __CFArray *v2;
  const void **v3;
  uint64_t v4;

  v3 = (const void **)(a1 + 64);
  v2 = *(__CFArray **)(a1 + 64);
  if (v2)
    CFArrayRemoveAllValues(v2);
  sub_20B88B718((const void **)(a1 + 72), 0);
  sub_20B8B035C(v3, 0);
  sub_20B8E6890((uint64_t *)(a1 + 32), 0);
  sub_20B8E83C4((uint64_t *)(a1 + 24), 0);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

void sub_20B8EB6A8(uint64_t a1)
{
  sub_20B8EC2D0(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B8EB6CC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t sub_20B8EB6D4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 40);
}

uint64_t sub_20B8EB6DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  __CFArray *v14;
  __CFSet *v15;

  v14 = *(__CFArray **)(a1 + 64);
  if (v14)
    CFArrayRemoveAllValues(v14);
  *(_DWORD *)(a1 + 56) = 0;
  v15 = *(__CFSet **)(a1 + 72);
  if (v15)
    CFSetRemoveAllValues(v15);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16)
                                                                                                 + 16))(*(_QWORD *)(a1 + 16), a2, a3, a4, a5, a6, a7);
}

uint64_t sub_20B8EB768(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __CFArray *v8;
  __CFSet *v9;

  v8 = *(__CFArray **)(a1 + 64);
  if (v8)
    CFArrayRemoveAllValues(v8);
  *(_DWORD *)(a1 + 56) = 0;
  v9 = *(__CFSet **)(a1 + 72);
  if (v9)
    CFSetRemoveAllValues(v9);
  if (a4)
  {
    if (*(_QWORD *)(a4 + 72))
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 112))(*(_QWORD *)(a1 + 16));
    if (*(_QWORD *)(a4 + 80))
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 120))(*(_QWORD *)(a1 + 16));
  }
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16), a2, a3, a4);
}

uint64_t sub_20B8EB800(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __CFArray *v8;
  __CFSet *v9;

  v8 = *(__CFArray **)(a1 + 64);
  if (v8)
    CFArrayRemoveAllValues(v8);
  *(_DWORD *)(a1 + 56) = 0;
  v9 = *(__CFSet **)(a1 + 72);
  if (v9)
    CFSetRemoveAllValues(v9);
  if (a4)
  {
    if (*(_QWORD *)(a4 + 72))
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 112))(*(_QWORD *)(a1 + 16));
    if (*(_QWORD *)(a4 + 80))
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 120))(*(_QWORD *)(a1 + 16));
  }
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), a2, a3, a4);
}

uint64_t sub_20B8EB898(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
}

void *sub_20B8EB8A8(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  void *i;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  const __CFSet *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  const void *v20;
  const char *v21;
  uint64_t v22;
  __CFSet *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  const void *v28;

  for (i = (void *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 48))(*(_QWORD *)(a1 + 16));
        i;
        i = (void *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 48))(*(_QWORD *)(a1 + 16)))
  {
    v5 = objc_msgSend_rawCandidate(i, v2, v3);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5) == 6)
      break;
    v8 = objc_msgSend_rawCandidate(i, v6, v7);
    if (v8)
    {
      v9 = (_QWORD *)v8;
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8) ? 40 : 24;
      if ((*(uint64_t (**)(_QWORD *))(*v9 + v10))(v9))
      {
        v13 = objc_msgSend_rawCandidate(i, v11, v12);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 96))(v13) == 89)
          return i;
        v16 = *(const __CFSet **)(a1 + 72);
        v17 = objc_msgSend_rawCandidate(i, v14, v15);
        if (v17)
        {
          v18 = (_QWORD *)v17;
          v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17) ? 40 : 24;
          v20 = (const void *)(*(uint64_t (**)(_QWORD *))(*v18 + v19))(v18);
        }
        else
        {
          v20 = 0;
        }
        if (!CFSetContainsValue(v16, v20))
        {
          v23 = *(__CFSet **)(a1 + 72);
          v24 = objc_msgSend_rawCandidate(i, v21, v22);
          if (v24)
          {
            v25 = (_QWORD *)v24;
            v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 40))(v24);
            v27 = 40;
            if (!v26)
              v27 = 24;
            v28 = (const void *)(*(uint64_t (**)(_QWORD *))(*v25 + v27))(v25);
          }
          else
          {
            v28 = 0;
          }
          CFSetAddValue(v23, v28);
          return i;
        }
      }
    }
  }
  return i;
}

uint64_t sub_20B8EBA2C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 64))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8EBA3C(uint64_t a1, uint64_t a2)
{
  void *v4;
  char v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  __CFSet *v14;

  if (CFArrayGetCount(*(CFArrayRef *)(a2 + 32)) == 1)
  {
    v4 = (void *)sub_20B96ABC8(a2, 0);
    v5 = sub_20B93AAB0((uint64_t)v4);
    if (v4)
    {
      if ((v5 & 1) != 0)
      {
        v8 = objc_msgSend_rawCandidate(v4, v6, v7);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8) == 2
          || (v11 = objc_msgSend_rawCandidate(v4, v9, v10),
              (*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 72))(v11) == 3))
        {
          v12 = *(uint64_t **)(a1 + 24);
          if (v12)
          {
            v13 = objc_msgSend_rawCandidate(v4, v9, v10);
            sub_20B940050(v12, v13);
          }
          return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16), a2);
        }
      }
    }
  }
  else
  {
    sub_20B93AAB0(0);
  }
  v14 = *(__CFSet **)(a1 + 72);
  if (v14)
    CFSetRemoveAllValues(v14);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16), a2);
}

uint64_t sub_20B8EBB0C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 80))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8EBB1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __CFSet *v6;

  v6 = *(__CFSet **)(a1 + 72);
  if (v6)
    CFSetRemoveAllValues(v6);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 56))(*(_QWORD *)(a1 + 16), a2, a3);
}

uint64_t sub_20B8EBB68(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 88))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8EBB78(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 96))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8EBB88(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 104))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8EBB98(uint64_t a1, const __CFString *a2)
{
  uint64_t result;
  uint64_t v5;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 112))(*(_QWORD *)(a1 + 16));
  v5 = *(_QWORD *)(a1 + 24);
  if (v5)
    return sub_20B9C4198(*(_QWORD *)(*(_QWORD *)(v5 + 16) + 32), a2);
  return result;
}

void sub_20B8EBBE8(uint64_t a1, const __CFArray *a2)
{
  _QWORD *v4;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 128))(*(_QWORD *)(a1 + 16));
  v4 = *(_QWORD **)(a1 + 24);
  if (v4)
    sub_20B93FFE0(v4, a2);
}

void sub_20B8EBC30(uint64_t a1, const __CFArray *a2)
{
  _QWORD *v4;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 136))(*(_QWORD *)(a1 + 16));
  v4 = *(_QWORD **)(a1 + 24);
  if (v4)
    sub_20B940018(v4, a2);
}

uint64_t sub_20B8EBC78(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 144))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8EBC88(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 152))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8EBC98(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 160))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8EBCA8(uint64_t a1, void *a2, uint64_t a3)
{
  const void *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const void *v10;

  v5 = (const void *)objc_msgSend_rawCandidate(a2, (const char *)a2, a3);
  if (v5
    && (v8 = __dynamic_cast(v5, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0)) != 0)
  {
    if ((*(unsigned int (**)(void *, _QWORD, _QWORD))(*(_QWORD *)v8 + 248))(v8, 0, 0))
      return (*(uint64_t (**)(_QWORD, void *))(**(_QWORD **)(a1 + 16) + 168))(*(_QWORD *)(a1 + 16), a2);
  }
  else
  {
    v10 = (const void *)objc_msgSend_rawCandidate(a2, v6, v7);
    if (v10)
      __dynamic_cast(v10, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45B850, 0);
  }
  return 0;
}

uint64_t sub_20B8EBD4C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 176))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8EBD5C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 184))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8EBD6C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 192))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8EBD7C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 200))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8EBD8C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 216))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8EBD9C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 208))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8EBDAC(uint64_t a1, const void *a2)
{
  const __CFAllocator *v4;
  const __CFArray *v5;
  uint64_t result;
  uint64_t *v7;
  void *values;

  if (a2)
  {
    v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    values = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    CFDictionarySetValue((CFMutableDictionaryRef)values, kMecabraAssetDataFilePathsKey, a2);
    v5 = CFArrayCreate(v4, (const void **)&values, 1, MEMORY[0x24BDBD690]);
    LOBYTE(v4) = sub_20B90E194(*(_QWORD *)(a1 + 32), 2, v5);
    CFRelease(values);
    CFRelease(v5);
    if ((v4 & 1) == 0)
      return 0;
  }
  else
  {
    result = sub_20B8EBEA0(a1, 2, 0);
    if (!(_DWORD)result)
      return result;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 224))(*(_QWORD *)(a1 + 16));
  v7 = *(uint64_t **)(a1 + 24);
  if (v7)
    sub_20B93F4EC(v7);
  return 1;
}

uint64_t sub_20B8EBEA0(uint64_t a1, int a2, const __CFArray *a3)
{
  uint64_t v4;
  uint64_t *v5;

  v4 = sub_20B90E194(*(_QWORD *)(a1 + 32), a2, a3);
  if ((_DWORD)v4)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 224))(*(_QWORD *)(a1 + 16));
    v5 = *(uint64_t **)(a1 + 24);
    if (v5)
      sub_20B93F4EC(v5);
  }
  return v4;
}

uint64_t sub_20B8EBEF0(uint64_t a1, char a2)
{
  uint64_t result;
  uint64_t v5;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 240))(*(_QWORD *)(a1 + 16));
  v5 = *(_QWORD *)(a1 + 24);
  if (v5)
  {
    *(_BYTE *)(v5 + 304) = a2;
    *(_BYTE *)(v5 + 400) = a2;
  }
  return result;
}

uint64_t sub_20B8EBF30()
{
  return 0;
}

uint64_t sub_20B8EBF3C()
{
  return 0;
}

uint64_t sub_20B8EBF44(uint64_t a1)
{
  return sub_20B8881A0(*(uint64_t **)(a1 + 16));
}

void sub_20B8EBF4C(uint64_t a1)
{
  uint64_t *v2;

  sub_20B8881A0(*(uint64_t **)(a1 + 16));
  v2 = *(uint64_t **)(a1 + 24);
  if (v2)
    sub_20B93F6A0(v2);
}

void sub_20B8EBF8C(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 24);
  if (v1)
    sub_20B93F628(v1, 1);
}

uint64_t sub_20B8EBFA0()
{
  return 0;
}

uint64_t sub_20B8EBFA8(uint64_t a1, const __CFString *a2)
{
  return sub_20B8881F0(*(_QWORD *)(a1 + 16), a2);
}

uint64_t sub_20B8EBFB0()
{
  return 0;
}

uint64_t sub_20B8EBFB8(uint64_t a1, const __CFArray *a2, const __CFString *a3, uint64_t a4, int a5)
{
  uint64_t *Mutable;
  uint64_t *v11;
  void *v12;
  void *v13;
  CFIndex Count;
  CFIndex v15;
  CFIndex i;
  void *ValueAtIndex;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;

  if (!*(_QWORD *)(a1 + 24))
    return 0;
  sub_20B8D0E3C(*(_DWORD *)(a1 + 8));
  Mutable = MecabraContextCreateMutable(0);
  if (!Mutable)
    return 0;
  v11 = Mutable;
  if (a3)
  {
    if (CFStringGetLength(a3) >= 1)
    {
      v12 = (void *)sub_20B8881F0(*(_QWORD *)(a1 + 16), a3);
      if (v12)
      {
        v13 = v12;
        MecabraContextAddCandidate(v11, v12);

      }
    }
  }
  if (a2)
  {
    Count = CFArrayGetCount(a2);
    if (Count >= 1)
    {
      v15 = Count;
      for (i = 0; i != v15; ++i)
      {
        ValueAtIndex = (void *)CFArrayGetValueAtIndex(a2, i);
        MecabraContextAddCandidate(v11, ValueAtIndex);
      }
    }
  }
  v18 = *(_DWORD *)(a1 + 8);
  v19 = a5 & 0x38;
  v20 = 1 << v18;
  if ((a5 & 8) != 0)
    v21 = 4;
  else
    v21 = 6;
  v22 = v19 | v21;
  v23 = v19 | 4;
  if ((v20 & 0x5800) == 0)
    v23 = a5 & 0x38;
  if ((v20 & 0x18380) != 0)
    v24 = v22;
  else
    v24 = v23;
  if (v18 <= 0x10)
    v25 = v24;
  else
    v25 = a5 & 0x38;
  v26 = sub_20B93F848(*(_QWORD *)(a1 + 24), *v11, a4, a5, v25);
  MecabraContextRelease(v11);
  return v26;
}

uint64_t sub_20B8EC118(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6;
  const __CFString *v9;
  const __CFString *v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;

  v6 = *(_QWORD *)(a1 + 24);
  if (!v6)
    return (*(uint64_t (**)(_QWORD, const __CFString *, _QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16), &stru_24C4B3660, 0, a2);
  if (a2)
  {
    v9 = *(const __CFString **)(a2 + 72);
    if (v9)
    {
      sub_20B9C4198(*(_QWORD *)(*(_QWORD *)(v6 + 16) + 32), v9);
      v6 = *(_QWORD *)(a1 + 24);
    }
    v10 = *(const __CFString **)(a2 + 80);
    if (v10)
    {
      sub_20B9C4244(*(_QWORD *)(*(_QWORD *)(v6 + 16) + 32), v10);
      v6 = *(_QWORD *)(a1 + 24);
    }
  }
  v11 = *(_DWORD *)(a1 + 8);
  v12 = a4 & 0x38;
  v13 = 1 << v11;
  if ((a4 & 8) != 0)
    v14 = 4;
  else
    v14 = 6;
  v15 = v12 | v14;
  v16 = v12 | 4;
  if ((v13 & 0x5800) == 0)
    v16 = a4 & 0x38;
  if ((v13 & 0x18380) != 0)
    v17 = v15;
  else
    v17 = v16;
  if (v11 <= 0x10)
    v18 = v17;
  else
    v18 = a4 & 0x38;
  return sub_20B93F848(v6, a2, a3, a4, v18);
}

void sub_20B8EC20C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;

  if (a2)
  {
    if (*(_QWORD *)(a1 + 24))
    {
      v5 = objc_msgSend_rawCandidate(a2, (const char *)a2, a3);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5) == 2
        || (v8 = objc_msgSend_rawCandidate(a2, v6, v7),
            (*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8) == 3))
      {
        v9 = *(uint64_t **)(a1 + 24);
        v10 = objc_msgSend_rawCandidate(a2, v6, v7);
        sub_20B940050(v9, v10);
      }
    }
  }
}

uint64_t sub_20B8EC290(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
    return sub_20B93FFA4(v4, a2, a3);
  else
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 48))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8EC2B4()
{
  return 0;
}

uint64_t sub_20B8EC2C0()
{
  return 0;
}

uint64_t sub_20B8EC2C8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t sub_20B8EC2D0(uint64_t a1)
{
  __CFArray *v2;
  const void **v3;
  uint64_t v4;

  v3 = (const void **)(a1 + 64);
  v2 = *(__CFArray **)(a1 + 64);
  if (v2)
    CFArrayRemoveAllValues(v2);
  sub_20B88B718((const void **)(a1 + 72), 0);
  sub_20B8B035C(v3, 0);
  sub_20B8E6890((uint64_t *)(a1 + 32), 0);
  sub_20B8E83C4((uint64_t *)(a1 + 24), 0);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

void sub_20B8EC350(uint64_t a1)
{
  sub_20B8ECF78(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B8EC374(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t sub_20B8EC37C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 40);
}

uint64_t sub_20B8EC384(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  __CFArray *v14;
  __CFSet *v15;

  v14 = *(__CFArray **)(a1 + 64);
  if (v14)
    CFArrayRemoveAllValues(v14);
  *(_DWORD *)(a1 + 56) = 0;
  v15 = *(__CFSet **)(a1 + 72);
  if (v15)
    CFSetRemoveAllValues(v15);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16)
                                                                                                 + 16))(*(_QWORD *)(a1 + 16), a2, a3, a4, a5, a6, a7);
}

uint64_t sub_20B8EC410(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __CFArray *v8;
  __CFSet *v9;

  v8 = *(__CFArray **)(a1 + 64);
  if (v8)
    CFArrayRemoveAllValues(v8);
  *(_DWORD *)(a1 + 56) = 0;
  v9 = *(__CFSet **)(a1 + 72);
  if (v9)
    CFSetRemoveAllValues(v9);
  if (a4)
  {
    if (*(_QWORD *)(a4 + 72))
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 112))(*(_QWORD *)(a1 + 16));
    if (*(_QWORD *)(a4 + 80))
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 120))(*(_QWORD *)(a1 + 16));
  }
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16), a2, a3, a4);
}

uint64_t sub_20B8EC4A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __CFArray *v8;
  __CFSet *v9;

  v8 = *(__CFArray **)(a1 + 64);
  if (v8)
    CFArrayRemoveAllValues(v8);
  *(_DWORD *)(a1 + 56) = 0;
  v9 = *(__CFSet **)(a1 + 72);
  if (v9)
    CFSetRemoveAllValues(v9);
  if (a4)
  {
    if (*(_QWORD *)(a4 + 72))
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 112))(*(_QWORD *)(a1 + 16));
    if (*(_QWORD *)(a4 + 80))
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 120))(*(_QWORD *)(a1 + 16));
  }
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), a2, a3, a4);
}

uint64_t sub_20B8EC540(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
}

void *sub_20B8EC550(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  void *i;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  const __CFSet *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  const void *v20;
  const char *v21;
  uint64_t v22;
  __CFSet *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  const void *v28;

  for (i = (void *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 48))(*(_QWORD *)(a1 + 16));
        i;
        i = (void *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 48))(*(_QWORD *)(a1 + 16)))
  {
    v5 = objc_msgSend_rawCandidate(i, v2, v3);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5) == 6)
      break;
    v8 = objc_msgSend_rawCandidate(i, v6, v7);
    if (v8)
    {
      v9 = (_QWORD *)v8;
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8) ? 40 : 24;
      if ((*(uint64_t (**)(_QWORD *))(*v9 + v10))(v9))
      {
        v13 = objc_msgSend_rawCandidate(i, v11, v12);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 96))(v13) == 89)
          return i;
        v16 = *(const __CFSet **)(a1 + 72);
        v17 = objc_msgSend_rawCandidate(i, v14, v15);
        if (v17)
        {
          v18 = (_QWORD *)v17;
          v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17) ? 40 : 24;
          v20 = (const void *)(*(uint64_t (**)(_QWORD *))(*v18 + v19))(v18);
        }
        else
        {
          v20 = 0;
        }
        if (!CFSetContainsValue(v16, v20))
        {
          v23 = *(__CFSet **)(a1 + 72);
          v24 = objc_msgSend_rawCandidate(i, v21, v22);
          if (v24)
          {
            v25 = (_QWORD *)v24;
            v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 40))(v24);
            v27 = 40;
            if (!v26)
              v27 = 24;
            v28 = (const void *)(*(uint64_t (**)(_QWORD *))(*v25 + v27))(v25);
          }
          else
          {
            v28 = 0;
          }
          CFSetAddValue(v23, v28);
          return i;
        }
      }
    }
  }
  return i;
}

uint64_t sub_20B8EC6D4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 64))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8EC6E4(uint64_t a1, uint64_t a2)
{
  void *v4;
  char v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  __CFSet *v14;

  if (CFArrayGetCount(*(CFArrayRef *)(a2 + 32)) == 1)
  {
    v4 = (void *)sub_20B96ABC8(a2, 0);
    v5 = sub_20B93AAB0((uint64_t)v4);
    if (v4)
    {
      if ((v5 & 1) != 0)
      {
        v8 = objc_msgSend_rawCandidate(v4, v6, v7);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8) == 2
          || (v11 = objc_msgSend_rawCandidate(v4, v9, v10),
              (*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 72))(v11) == 3))
        {
          v12 = *(uint64_t **)(a1 + 24);
          if (v12)
          {
            v13 = objc_msgSend_rawCandidate(v4, v9, v10);
            sub_20B940050(v12, v13);
          }
          return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16), a2);
        }
      }
    }
  }
  else
  {
    sub_20B93AAB0(0);
  }
  v14 = *(__CFSet **)(a1 + 72);
  if (v14)
    CFSetRemoveAllValues(v14);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16), a2);
}

uint64_t sub_20B8EC7B4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 80))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8EC7C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __CFSet *v6;

  v6 = *(__CFSet **)(a1 + 72);
  if (v6)
    CFSetRemoveAllValues(v6);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 56))(*(_QWORD *)(a1 + 16), a2, a3);
}

uint64_t sub_20B8EC810(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 88))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8EC820(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 96))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8EC830(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 104))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8EC840(uint64_t a1, const __CFString *a2)
{
  uint64_t result;
  uint64_t v5;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 112))(*(_QWORD *)(a1 + 16));
  v5 = *(_QWORD *)(a1 + 24);
  if (v5)
    return sub_20B9C4198(*(_QWORD *)(*(_QWORD *)(v5 + 16) + 32), a2);
  return result;
}

void sub_20B8EC890(uint64_t a1, const __CFArray *a2)
{
  _QWORD *v4;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 128))(*(_QWORD *)(a1 + 16));
  v4 = *(_QWORD **)(a1 + 24);
  if (v4)
    sub_20B93FFE0(v4, a2);
}

void sub_20B8EC8D8(uint64_t a1, const __CFArray *a2)
{
  _QWORD *v4;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 136))(*(_QWORD *)(a1 + 16));
  v4 = *(_QWORD **)(a1 + 24);
  if (v4)
    sub_20B940018(v4, a2);
}

uint64_t sub_20B8EC920(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 144))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8EC930(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 152))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8EC940(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 160))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8EC950(uint64_t a1, void *a2, uint64_t a3)
{
  const void *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const void *v10;

  v5 = (const void *)objc_msgSend_rawCandidate(a2, (const char *)a2, a3);
  if (v5
    && (v8 = __dynamic_cast(v5, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0)) != 0)
  {
    if ((*(unsigned int (**)(void *, _QWORD, _QWORD))(*(_QWORD *)v8 + 248))(v8, 0, 0))
      return (*(uint64_t (**)(_QWORD, void *))(**(_QWORD **)(a1 + 16) + 168))(*(_QWORD *)(a1 + 16), a2);
  }
  else
  {
    v10 = (const void *)objc_msgSend_rawCandidate(a2, v6, v7);
    if (v10)
      __dynamic_cast(v10, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45B850, 0);
  }
  return 0;
}

uint64_t sub_20B8EC9F4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 176))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8ECA04(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 184))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8ECA14(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 192))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8ECA24(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 200))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8ECA34(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 216))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8ECA44(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 208))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8ECA54(uint64_t a1, const void *a2)
{
  const __CFAllocator *v4;
  const __CFArray *v5;
  uint64_t result;
  uint64_t *v7;
  void *values;

  if (a2)
  {
    v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    values = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    CFDictionarySetValue((CFMutableDictionaryRef)values, kMecabraAssetDataFilePathsKey, a2);
    v5 = CFArrayCreate(v4, (const void **)&values, 1, MEMORY[0x24BDBD690]);
    LOBYTE(v4) = sub_20B90E194(*(_QWORD *)(a1 + 32), 2, v5);
    CFRelease(values);
    CFRelease(v5);
    if ((v4 & 1) == 0)
      return 0;
  }
  else
  {
    result = sub_20B8ECB48(a1, 2, 0);
    if (!(_DWORD)result)
      return result;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 224))(*(_QWORD *)(a1 + 16));
  v7 = *(uint64_t **)(a1 + 24);
  if (v7)
    sub_20B93F4EC(v7);
  return 1;
}

uint64_t sub_20B8ECB48(uint64_t a1, int a2, const __CFArray *a3)
{
  uint64_t v4;
  uint64_t *v5;

  v4 = sub_20B90E194(*(_QWORD *)(a1 + 32), a2, a3);
  if ((_DWORD)v4)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 224))(*(_QWORD *)(a1 + 16));
    v5 = *(uint64_t **)(a1 + 24);
    if (v5)
      sub_20B93F4EC(v5);
  }
  return v4;
}

uint64_t sub_20B8ECB98(uint64_t a1, char a2)
{
  uint64_t result;
  uint64_t v5;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 240))(*(_QWORD *)(a1 + 16));
  v5 = *(_QWORD *)(a1 + 24);
  if (v5)
  {
    *(_BYTE *)(v5 + 304) = a2;
    *(_BYTE *)(v5 + 400) = a2;
  }
  return result;
}

uint64_t sub_20B8ECBD8()
{
  return 0;
}

uint64_t sub_20B8ECBE4()
{
  return 0;
}

uint64_t sub_20B8ECBEC(uint64_t a1)
{
  return sub_20B8881A0(*(uint64_t **)(a1 + 16));
}

void sub_20B8ECBF4(uint64_t a1)
{
  uint64_t *v2;

  sub_20B8881A0(*(uint64_t **)(a1 + 16));
  v2 = *(uint64_t **)(a1 + 24);
  if (v2)
    sub_20B93F6A0(v2);
}

void sub_20B8ECC34(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 24);
  if (v1)
    sub_20B93F628(v1, 1);
}

uint64_t sub_20B8ECC48()
{
  return 0;
}

uint64_t sub_20B8ECC50(uint64_t a1, const __CFString *a2)
{
  return sub_20B8881F0(*(_QWORD *)(a1 + 16), a2);
}

uint64_t sub_20B8ECC58()
{
  return 0;
}

uint64_t sub_20B8ECC60(uint64_t a1, const __CFArray *a2, const __CFString *a3, uint64_t a4, int a5)
{
  uint64_t *Mutable;
  uint64_t *v11;
  void *v12;
  void *v13;
  CFIndex Count;
  CFIndex v15;
  CFIndex i;
  void *ValueAtIndex;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;

  if (!*(_QWORD *)(a1 + 24))
    return 0;
  sub_20B8D0E3C(*(_DWORD *)(a1 + 8));
  Mutable = MecabraContextCreateMutable(0);
  if (!Mutable)
    return 0;
  v11 = Mutable;
  if (a3)
  {
    if (CFStringGetLength(a3) >= 1)
    {
      v12 = (void *)sub_20B8881F0(*(_QWORD *)(a1 + 16), a3);
      if (v12)
      {
        v13 = v12;
        MecabraContextAddCandidate(v11, v12);

      }
    }
  }
  if (a2)
  {
    Count = CFArrayGetCount(a2);
    if (Count >= 1)
    {
      v15 = Count;
      for (i = 0; i != v15; ++i)
      {
        ValueAtIndex = (void *)CFArrayGetValueAtIndex(a2, i);
        MecabraContextAddCandidate(v11, ValueAtIndex);
      }
    }
  }
  v18 = *(_DWORD *)(a1 + 8);
  v19 = a5 & 0x38;
  v20 = 1 << v18;
  if ((a5 & 8) != 0)
    v21 = 4;
  else
    v21 = 6;
  v22 = v19 | v21;
  v23 = v19 | 4;
  if ((v20 & 0x5800) == 0)
    v23 = a5 & 0x38;
  if ((v20 & 0x18380) != 0)
    v24 = v22;
  else
    v24 = v23;
  if (v18 <= 0x10)
    v25 = v24;
  else
    v25 = a5 & 0x38;
  v26 = sub_20B93F848(*(_QWORD *)(a1 + 24), *v11, a4, a5, v25);
  MecabraContextRelease(v11);
  return v26;
}

uint64_t sub_20B8ECDC0(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6;
  const __CFString *v9;
  const __CFString *v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;

  v6 = *(_QWORD *)(a1 + 24);
  if (!v6)
    return (*(uint64_t (**)(_QWORD, const __CFString *, _QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16), &stru_24C4B3660, 0, a2);
  if (a2)
  {
    v9 = *(const __CFString **)(a2 + 72);
    if (v9)
    {
      sub_20B9C4198(*(_QWORD *)(*(_QWORD *)(v6 + 16) + 32), v9);
      v6 = *(_QWORD *)(a1 + 24);
    }
    v10 = *(const __CFString **)(a2 + 80);
    if (v10)
    {
      sub_20B9C4244(*(_QWORD *)(*(_QWORD *)(v6 + 16) + 32), v10);
      v6 = *(_QWORD *)(a1 + 24);
    }
  }
  v11 = *(_DWORD *)(a1 + 8);
  v12 = a4 & 0x38;
  v13 = 1 << v11;
  if ((a4 & 8) != 0)
    v14 = 4;
  else
    v14 = 6;
  v15 = v12 | v14;
  v16 = v12 | 4;
  if ((v13 & 0x5800) == 0)
    v16 = a4 & 0x38;
  if ((v13 & 0x18380) != 0)
    v17 = v15;
  else
    v17 = v16;
  if (v11 <= 0x10)
    v18 = v17;
  else
    v18 = a4 & 0x38;
  return sub_20B93F848(v6, a2, a3, a4, v18);
}

void sub_20B8ECEB4(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;

  if (a2)
  {
    if (*(_QWORD *)(a1 + 24))
    {
      v5 = objc_msgSend_rawCandidate(a2, (const char *)a2, a3);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5) == 2
        || (v8 = objc_msgSend_rawCandidate(a2, v6, v7),
            (*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8) == 3))
      {
        v9 = *(uint64_t **)(a1 + 24);
        v10 = objc_msgSend_rawCandidate(a2, v6, v7);
        sub_20B940050(v9, v10);
      }
    }
  }
}

uint64_t sub_20B8ECF38(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
    return sub_20B93FFA4(v4, a2, a3);
  else
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 48))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B8ECF5C()
{
  return 0;
}

uint64_t sub_20B8ECF68()
{
  return 0;
}

uint64_t sub_20B8ECF70(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t sub_20B8ECF78(uint64_t a1)
{
  __CFArray *v2;
  const void **v3;
  uint64_t v4;

  v3 = (const void **)(a1 + 64);
  v2 = *(__CFArray **)(a1 + 64);
  if (v2)
    CFArrayRemoveAllValues(v2);
  sub_20B88B718((const void **)(a1 + 72), 0);
  sub_20B8B035C(v3, 0);
  sub_20B8E6890((uint64_t *)(a1 + 32), 0);
  sub_20B8E83C4((uint64_t *)(a1 + 24), 0);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t sub_20B8ECFF4(uint64_t a1, uint64_t a2)
{
  id ***v4;
  uint64_t *v5;
  uint64_t *v6;
  const void **v7;
  int v8;
  uint64_t v9;
  uint64_t **v10;
  uint64_t v11;
  CFMutableArrayRef Mutable;

  *(_QWORD *)a1 = &off_24C464168;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 16) = 0;
  v4 = (id ***)(a1 + 16);
  *(_QWORD *)(a1 + 24) = 0;
  v5 = (uint64_t *)(a1 + 24);
  *(_QWORD *)(a1 + 32) = 0;
  v6 = (uint64_t *)(a1 + 32);
  *(_BYTE *)(a1 + 40) = 1;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v7 = (const void **)(a1 + 64);
  *(_QWORD *)(a1 + 72) = CFSetCreateMutable(0, 0, MEMORY[0x24BDBD6B8]);
  v8 = *(_DWORD *)(a1 + 8);
  v9 = operator new();
  *(_DWORD *)v9 = v8;
  *(_BYTE *)(v9 + 4) = 0;
  *(_OWORD *)(v9 + 6) = 0u;
  *(_OWORD *)(v9 + 22) = 0u;
  *(_WORD *)(v9 + 38) = 0;
  *(_DWORD *)(v9 + 40) = 1065353216;
  *(_OWORD *)(v9 + 48) = 0u;
  *(_OWORD *)(v9 + 64) = 0u;
  *(_OWORD *)(v9 + 80) = 0u;
  *(_OWORD *)(v9 + 91) = 0u;
  *(_OWORD *)(v9 + 112) = 0u;
  *(_OWORD *)(v9 + 128) = 0u;
  *(_OWORD *)(v9 + 144) = 0u;
  sub_20B8E6890(v6, v9);
  v10 = sub_20B973948(a2);
  sub_20B8ED1A8(v4, (id **)v10);
  if (!*v4)
    goto LABEL_5;
  if (!*(_BYTE *)(a2 + 8))
  {
    v11 = sub_20B93F3C0((unsigned int *)a2, *v6);
    sub_20B8E83C4(v5, v11);
    if (*v5)
    {
      Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
      sub_20B8B035C(v7, Mutable);
      return a1;
    }
LABEL_5:
    *(_BYTE *)(a1 + 40) = 0;
  }
  return a1;
}

void sub_20B8ED158(_Unwind_Exception *a1)
{
  id ***v1;
  uint64_t *v2;
  uint64_t *v3;
  const void **v4;

  sub_20B8B035C(v4, 0);
  sub_20B8E6890(v3, 0);
  sub_20B8E83C4(v2, 0);
  sub_20B8ED1A8(v1, 0);
  _Unwind_Resume(a1);
}

id ***sub_20B8ED1A8(id ***result, id **a2)
{
  id **v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    sub_20B9F7C44((uint64_t)(v2 + 1));
    sub_20B922844(v2, 0);
    JUMPOUT(0x20BD39CB0);
  }
  return result;
}

void sub_20B8ED204(uint64_t a1)
{
  sub_20B8ED978(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B8ED228(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t sub_20B8ED230(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 40);
}

uint64_t sub_20B8ED238(uint64_t a1)
{
  __CFArray *v2;
  __CFSet *v3;

  v2 = *(__CFArray **)(a1 + 64);
  if (v2)
    CFArrayRemoveAllValues(v2);
  *(_DWORD *)(a1 + 56) = 0;
  v3 = *(__CFSet **)(a1 + 72);
  if (v3)
    CFSetRemoveAllValues(v3);
  return 0;
}

uint64_t sub_20B8ED274(uint64_t a1)
{
  __CFArray *v2;
  __CFSet *v3;

  v2 = *(__CFArray **)(a1 + 64);
  if (v2)
    CFArrayRemoveAllValues(v2);
  *(_DWORD *)(a1 + 56) = 0;
  v3 = *(__CFSet **)(a1 + 72);
  if (v3)
    CFSetRemoveAllValues(v3);
  return 0;
}

uint64_t sub_20B8ED2B0(uint64_t a1)
{
  __CFArray *v2;
  __CFSet *v3;

  v2 = *(__CFArray **)(a1 + 64);
  if (v2)
    CFArrayRemoveAllValues(v2);
  *(_DWORD *)(a1 + 56) = 0;
  v3 = *(__CFSet **)(a1 + 72);
  if (v3)
    CFSetRemoveAllValues(v3);
  return 0;
}

uint64_t sub_20B8ED2EC()
{
  return 0;
}

uint64_t sub_20B8ED2F4()
{
  return 0;
}

uint64_t sub_20B8ED304(uint64_t a1, uint64_t a2)
{
  void *v4;
  char v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  __CFSet *v14;

  if (CFArrayGetCount(*(CFArrayRef *)(a2 + 32)) == 1)
  {
    v4 = (void *)sub_20B96ABC8(a2, 0);
    v5 = sub_20B93AAB0((uint64_t)v4);
    if (v4)
    {
      if ((v5 & 1) != 0)
      {
        v8 = objc_msgSend_rawCandidate(v4, v6, v7);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8) == 2
          || (v11 = objc_msgSend_rawCandidate(v4, v9, v10),
              (*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 72))(v11) == 3))
        {
          v12 = *(uint64_t **)(a1 + 24);
          if (v12)
          {
            v13 = objc_msgSend_rawCandidate(v4, v9, v10);
            sub_20B940050(v12, v13);
          }
          return 1;
        }
      }
    }
  }
  else
  {
    sub_20B93AAB0(0);
  }
  v14 = *(__CFSet **)(a1 + 72);
  if (v14)
    CFSetRemoveAllValues(v14);
  return 1;
}

uint64_t sub_20B8ED3C0()
{
  return 0;
}

uint64_t sub_20B8ED3C8(uint64_t a1)
{
  __CFSet *v1;

  v1 = *(__CFSet **)(a1 + 72);
  if (v1)
    CFSetRemoveAllValues(v1);
  return 0;
}

uint64_t sub_20B8ED3E8()
{
  return 0;
}

uint64_t sub_20B8ED3F8(uint64_t result, const __CFString *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 24);
  if (v2)
    return sub_20B9C4198(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 32), a2);
  return result;
}

void sub_20B8ED410(uint64_t a1, const __CFArray *a2)
{
  _QWORD *v2;

  v2 = *(_QWORD **)(a1 + 24);
  if (v2)
    sub_20B93FFE0(v2, a2);
}

void sub_20B8ED420(uint64_t a1, const __CFArray *a2)
{
  _QWORD *v2;

  v2 = *(_QWORD **)(a1 + 24);
  if (v2)
    sub_20B940018(v2, a2);
}

uint64_t sub_20B8ED438()
{
  return 0;
}

uint64_t sub_20B8ED440(uint64_t a1, void *a2, uint64_t a3)
{
  const void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const void *v8;

  v4 = (const void *)objc_msgSend_rawCandidate(a2, (const char *)a2, a3);
  if (v4
    && (v7 = __dynamic_cast(v4, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0)) != 0)
  {
    (*(void (**)(void *, _QWORD, _QWORD))(*(_QWORD *)v7 + 248))(v7, 0, 0);
  }
  else
  {
    v8 = (const void *)objc_msgSend_rawCandidate(a2, v5, v6);
    if (v8)
      __dynamic_cast(v8, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45B850, 0);
  }
  return 0;
}

double sub_20B8ED4D0()
{
  return 0.0;
}

CFMutableArrayRef sub_20B8ED4D8()
{
  return CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, 0);
}

uint64_t sub_20B8ED4F0()
{
  return 0;
}

uint64_t sub_20B8ED4F8(uint64_t a1, const void *a2)
{
  const __CFAllocator *v4;
  const __CFArray *v5;
  uint64_t result;
  uint64_t *v7;
  void *values;

  if (a2)
  {
    v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    values = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    CFDictionarySetValue((CFMutableDictionaryRef)values, kMecabraAssetDataFilePathsKey, a2);
    v5 = CFArrayCreate(v4, (const void **)&values, 1, MEMORY[0x24BDBD690]);
    LOBYTE(v4) = sub_20B90E194(*(_QWORD *)(a1 + 32), 2, v5);
    CFRelease(values);
    CFRelease(v5);
    if ((v4 & 1) == 0)
      return 0;
  }
  else
  {
    result = sub_20B8ED5DC(a1, 2, 0);
    if (!(_DWORD)result)
      return result;
  }
  v7 = *(uint64_t **)(a1 + 24);
  if (v7)
    sub_20B93F4EC(v7);
  return 1;
}

uint64_t sub_20B8ED5DC(uint64_t a1, int a2, const __CFArray *a3)
{
  uint64_t v4;
  uint64_t *v5;

  v4 = sub_20B90E194(*(_QWORD *)(a1 + 32), a2, a3);
  if ((_DWORD)v4)
  {
    v5 = *(uint64_t **)(a1 + 24);
    if (v5)
      sub_20B93F4EC(v5);
  }
  return v4;
}

uint64_t sub_20B8ED61C(uint64_t result, char a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 24);
  if (v2)
  {
    *(_BYTE *)(v2 + 304) = a2;
    *(_BYTE *)(v2 + 400) = a2;
  }
  return result;
}

uint64_t sub_20B8ED630()
{
  return 0;
}

uint64_t sub_20B8ED63C()
{
  return 0;
}

uint64_t sub_20B8ED644()
{
  return 1;
}

void sub_20B8ED64C(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 24);
  if (v1)
    sub_20B93F6A0(v1);
}

void sub_20B8ED660(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 24);
  if (v1)
    sub_20B93F628(v1, 1);
}

uint64_t sub_20B8ED674()
{
  return 0;
}

uint64_t sub_20B8ED67C(uint64_t a1, const __CFString *a2)
{
  return sub_20B973CB4(*(_QWORD *)(a1 + 16), a2);
}

uint64_t sub_20B8ED684()
{
  return 0;
}

uint64_t sub_20B8ED68C(uint64_t a1, const __CFArray *a2, const __CFString *a3, uint64_t a4, int a5)
{
  uint64_t *Mutable;
  uint64_t *v11;
  void *v12;
  void *v13;
  CFIndex Count;
  CFIndex v15;
  CFIndex i;
  void *ValueAtIndex;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;

  if (!*(_QWORD *)(a1 + 24))
    return 0;
  sub_20B8D0E3C(*(_DWORD *)(a1 + 8));
  Mutable = MecabraContextCreateMutable(0);
  if (!Mutable)
    return 0;
  v11 = Mutable;
  if (a3)
  {
    if (CFStringGetLength(a3) >= 1)
    {
      v12 = (void *)sub_20B973CB4(*(_QWORD *)(a1 + 16), a3);
      if (v12)
      {
        v13 = v12;
        MecabraContextAddCandidate(v11, v12);

      }
    }
  }
  if (a2)
  {
    Count = CFArrayGetCount(a2);
    if (Count >= 1)
    {
      v15 = Count;
      for (i = 0; i != v15; ++i)
      {
        ValueAtIndex = (void *)CFArrayGetValueAtIndex(a2, i);
        MecabraContextAddCandidate(v11, ValueAtIndex);
      }
    }
  }
  v18 = *(_DWORD *)(a1 + 8);
  v19 = a5 & 0x38;
  v20 = 1 << v18;
  if ((a5 & 8) != 0)
    v21 = 4;
  else
    v21 = 6;
  v22 = v19 | v21;
  v23 = v19 | 4;
  if ((v20 & 0x5800) == 0)
    v23 = a5 & 0x38;
  if ((v20 & 0x18380) != 0)
    v24 = v22;
  else
    v24 = v23;
  if (v18 <= 0x10)
    v25 = v24;
  else
    v25 = a5 & 0x38;
  v26 = sub_20B93F848(*(_QWORD *)(a1 + 24), *v11, a4, a5, v25);
  MecabraContextRelease(v11);
  return v26;
}

uint64_t sub_20B8ED7EC(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t result;
  const __CFString *v9;
  const __CFString *v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    if (a2)
    {
      v9 = *(const __CFString **)(a2 + 72);
      if (v9)
      {
        sub_20B9C4198(*(_QWORD *)(*(_QWORD *)(result + 16) + 32), v9);
        result = *(_QWORD *)(a1 + 24);
      }
      v10 = *(const __CFString **)(a2 + 80);
      if (v10)
      {
        sub_20B9C4244(*(_QWORD *)(*(_QWORD *)(result + 16) + 32), v10);
        result = *(_QWORD *)(a1 + 24);
      }
    }
    v11 = *(_DWORD *)(a1 + 8);
    v12 = a4 & 0x38;
    v13 = 1 << v11;
    if ((a4 & 8) != 0)
      v14 = 4;
    else
      v14 = 6;
    v15 = v12 | v14;
    v16 = v12 | 4;
    if ((v13 & 0x5800) == 0)
      v16 = a4 & 0x38;
    if ((v13 & 0x18380) != 0)
      v17 = v15;
    else
      v17 = v16;
    if (v11 <= 0x10)
      v18 = v17;
    else
      v18 = a4 & 0x38;
    return sub_20B93F848(result, a2, a3, a4, v18);
  }
  return result;
}

void sub_20B8ED8C4(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;

  if (a2)
  {
    if (*(_QWORD *)(a1 + 24))
    {
      v5 = objc_msgSend_rawCandidate(a2, (const char *)a2, a3);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5) == 2
        || (v8 = objc_msgSend_rawCandidate(a2, v6, v7),
            (*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8) == 3))
      {
        v9 = *(uint64_t **)(a1 + 24);
        v10 = objc_msgSend_rawCandidate(a2, v6, v7);
        sub_20B940050(v9, v10);
      }
    }
  }
}

uint64_t sub_20B8ED948(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return sub_20B93FFA4(result, a2, a3);
  return result;
}

uint64_t sub_20B8ED95C()
{
  return 0;
}

uint64_t sub_20B8ED968()
{
  return 0;
}

uint64_t sub_20B8ED970(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t sub_20B8ED978(uint64_t a1)
{
  __CFArray *v2;
  const void **v3;

  v3 = (const void **)(a1 + 64);
  v2 = *(__CFArray **)(a1 + 64);
  if (v2)
    CFArrayRemoveAllValues(v2);
  sub_20B88B718((const void **)(a1 + 72), 0);
  sub_20B8B035C(v3, 0);
  sub_20B8E6890((uint64_t *)(a1 + 32), 0);
  sub_20B8E83C4((uint64_t *)(a1 + 24), 0);
  sub_20B8ED1A8((id ***)(a1 + 16), 0);
  return a1;
}

uint64_t sub_20B8ED9E8(uint64_t a1, dispatch_time_t a2, uint64_t a3)
{
  unsigned int v6;
  intptr_t v7;
  unsigned int v8;

  sub_20B8EDA68(a1);
  if (a2)
  {
    v6 = atomic_load((unsigned int *)(a1 + 40));
    if (v6 == 1)
    {
      v7 = dispatch_group_wait(*(dispatch_group_t *)(a1 + 8), a2);
      if (a3)
      {
        if (v7)
          (*(void (**)(uint64_t))(a3 + 16))(a3);
      }
    }
  }
  v8 = atomic_load((unsigned int *)(a1 + 40));
  if (v8 == 2)
    return *(_QWORD *)a1;
  else
    return 0;
}

void sub_20B8EDA68(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[2];
  _QWORD *v6;
  _QWORD v7[2];

  v2 = (unint64_t *)(a1 + 24);
  v5[0] = sub_20B8EDAC8;
  v5[1] = 0;
  v4 = a1;
  v3 = atomic_load(v2);
  if (v3 != -1)
  {
    v7[0] = v5;
    v7[1] = &v4;
    v6 = v7;
    std::__call_once(v2, &v6, (void (__cdecl *)(void *))sub_20B8EDB60);
  }
}

void sub_20B8EDAC8(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  _QWORD v4[6];
  _QWORD v5[4];

  sub_20B876588(a1 + 136);
  atomic_store(1u, (unsigned int *)(a1 + 40));
  v5[0] = 0;
  v5[1] = v5;
  v5[2] = 0x2020000000;
  v5[3] = a1;
  v2 = *(NSObject **)(a1 + 8);
  v3 = *(NSObject **)(a1 + 16);
  v4[0] = MEMORY[0x24BDAC760];
  v4[1] = 3221225472;
  v4[2] = sub_20B8EDB84;
  v4[3] = &unk_24C49BD20;
  v4[4] = v5;
  v4[5] = a1;
  dispatch_group_async(v2, v3, v4);
  _Block_object_dispose(v5, 8);
}

uint64_t sub_20B8EDB60(uint64_t **a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  uint64_t v3;
  _QWORD *v4;

  v1 = **a1;
  v2 = *(uint64_t (**)(_QWORD *))v1;
  v3 = *(_QWORD *)(v1 + 8);
  v4 = (_QWORD *)(*(_QWORD *)(*a1)[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v4 + v2);
  return v2(v4);
}

void sub_20B8EDB84(uint64_t a1)
{
  uint64_t v2;
  std::mutex *v3;
  NSObject *v4;
  os_signpost_id_t v5;
  NSObject *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  NSObject *v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(std::mutex **)(v2 + 136);
  *(_QWORD *)(v2 + 136) = 0;
  *(_BYTE *)(v2 + 144) = 0;
  v4 = sub_20B9A7C5C(0xDu);
  v5 = os_signpost_id_make_with_pointer(v4, (const void *)v2);
  v6 = sub_20B9A7C5C(0xDu);
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v7 = v6;
    if (os_signpost_enabled(v6))
    {
      v8 = (_QWORD *)(v2 + 112);
      if (*(char *)(v2 + 135) < 0)
        v8 = (_QWORD *)*v8;
      v14 = 136315138;
      v15 = v8;
      _os_signpost_emit_with_name_impl(&dword_20B7F7000, v7, OS_SIGNPOST_INTERVAL_BEGIN, v5, "AsyncResourceInit", "Async resource load with key: [%s]", (uint8_t *)&v14, 0xCu);
    }
  }
  v9 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  v10 = (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 32) + 16))();
  v11 = *v9;
  *v9 = v10;
  if (v11)
    sub_20B8EDD24((uint64_t)v9, v11);
  atomic_store(2u, (unsigned int *)(v2 + 40));
  v12 = sub_20B9A7C5C(0xDu);
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v13 = v12;
    if (os_signpost_enabled(v12))
    {
      LOWORD(v14) = 0;
      _os_signpost_emit_with_name_impl(&dword_20B7F7000, v13, OS_SIGNPOST_INTERVAL_END, v5, "AsyncResourceInit", (const char *)&unk_20BA9505F, (uint8_t *)&v14, 2u);
    }
  }
  std::mutex::unlock(v3);
}

void sub_20B8EDD08(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8EDD24(uint64_t a1, uint64_t a2)
{
  const void **v3;
  uint64_t result;
  void **v5;

  if (a2)
  {
    v3 = (const void **)(a2 + 8);
    v5 = (void **)(a2 + 56);
    sub_20B83B400(&v5);
    v5 = (void **)(a2 + 32);
    sub_20B8EDDA0(&v5);
    sub_20B87E150(v3, 0);
    sub_20B8E7698((const void **)a2, 0);
    return MEMORY[0x20BD39CB0](a2, 0x1060C404B74122BLL);
  }
  return result;
}

void sub_20B8EDDA0(void ***a1)
{
  void **v1;
  const void ***v2;
  const void ***v4;
  void *v5;
  const void ***v6;

  v1 = *a1;
  v2 = (const void ***)**a1;
  if (v2)
  {
    v4 = (const void ***)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 3;
        sub_20B8EDE18((uint64_t)(v4 - 3), *(v4 - 2));
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_20B8EDE18(uint64_t a1, const void **a2)
{
  if (a2)
  {
    sub_20B8EDE18(a1, *a2);
    sub_20B8EDE18(a1, a2[1]);
    sub_20B8955E0(a2 + 6, 0);
    operator delete(a2);
  }
}

uint64_t sub_20B8EDE64(uint64_t a1, dispatch_time_t a2, uint64_t a3)
{
  unsigned int v6;
  intptr_t v7;
  unsigned int v8;

  sub_20B8EDEE4(a1);
  if (a2)
  {
    v6 = atomic_load((unsigned int *)(a1 + 40));
    if (v6 == 1)
    {
      v7 = dispatch_group_wait(*(dispatch_group_t *)(a1 + 8), a2);
      if (a3)
      {
        if (v7)
          (*(void (**)(uint64_t))(a3 + 16))(a3);
      }
    }
  }
  v8 = atomic_load((unsigned int *)(a1 + 40));
  if (v8 == 2)
    return *(_QWORD *)a1;
  else
    return 0;
}

void sub_20B8EDEE4(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[2];
  _QWORD *v6;
  _QWORD v7[2];

  v2 = (unint64_t *)(a1 + 24);
  v5[0] = sub_20B8EDF44;
  v5[1] = 0;
  v4 = a1;
  v3 = atomic_load(v2);
  if (v3 != -1)
  {
    v7[0] = v5;
    v7[1] = &v4;
    v6 = v7;
    std::__call_once(v2, &v6, (void (__cdecl *)(void *))sub_20B8EDFDC);
  }
}

void sub_20B8EDF44(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  _QWORD v4[6];
  _QWORD v5[4];

  sub_20B876588(a1 + 136);
  atomic_store(1u, (unsigned int *)(a1 + 40));
  v5[0] = 0;
  v5[1] = v5;
  v5[2] = 0x2020000000;
  v5[3] = a1;
  v2 = *(NSObject **)(a1 + 8);
  v3 = *(NSObject **)(a1 + 16);
  v4[0] = MEMORY[0x24BDAC760];
  v4[1] = 3221225472;
  v4[2] = sub_20B8EE000;
  v4[3] = &unk_24C49BD20;
  v4[4] = v5;
  v4[5] = a1;
  dispatch_group_async(v2, v3, v4);
  _Block_object_dispose(v5, 8);
}

uint64_t sub_20B8EDFDC(uint64_t **a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  uint64_t v3;
  _QWORD *v4;

  v1 = **a1;
  v2 = *(uint64_t (**)(_QWORD *))v1;
  v3 = *(_QWORD *)(v1 + 8);
  v4 = (_QWORD *)(*(_QWORD *)(*a1)[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v4 + v2);
  return v2(v4);
}

void sub_20B8EE000(uint64_t a1)
{
  uint64_t v2;
  std::mutex *v3;
  NSObject *v4;
  os_signpost_id_t v5;
  NSObject *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  NSObject *v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(std::mutex **)(v2 + 136);
  *(_QWORD *)(v2 + 136) = 0;
  *(_BYTE *)(v2 + 144) = 0;
  v4 = sub_20B9A7C5C(0xDu);
  v5 = os_signpost_id_make_with_pointer(v4, (const void *)v2);
  v6 = sub_20B9A7C5C(0xDu);
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v7 = v6;
    if (os_signpost_enabled(v6))
    {
      v8 = (_QWORD *)(v2 + 112);
      if (*(char *)(v2 + 135) < 0)
        v8 = (_QWORD *)*v8;
      v14 = 136315138;
      v15 = v8;
      _os_signpost_emit_with_name_impl(&dword_20B7F7000, v7, OS_SIGNPOST_INTERVAL_BEGIN, v5, "AsyncResourceInit", "Async resource load with key: [%s]", (uint8_t *)&v14, 0xCu);
    }
  }
  v9 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  v10 = (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 32) + 16))();
  v11 = *v9;
  *v9 = v10;
  if (v11)
    sub_20B8EE1A0((uint64_t)v9, v11);
  atomic_store(2u, (unsigned int *)(v2 + 40));
  v12 = sub_20B9A7C5C(0xDu);
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v13 = v12;
    if (os_signpost_enabled(v12))
    {
      LOWORD(v14) = 0;
      _os_signpost_emit_with_name_impl(&dword_20B7F7000, v13, OS_SIGNPOST_INTERVAL_END, v5, "AsyncResourceInit", (const char *)&unk_20BA9505F, (uint8_t *)&v14, 2u);
    }
  }
  std::mutex::unlock(v3);
}

void sub_20B8EE184(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20B8EE1A0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_20B8EE1F0((language_modeling::v1::LanguageModelSession **)(a2 + 16), 0);
    sub_20B8EE22C((language_modeling::v1::LanguageModel **)(a2 + 8), 0);
    JUMPOUT(0x20BD39CB0);
  }
}

language_modeling::v1::LanguageModelSession *sub_20B8EE1F0(language_modeling::v1::LanguageModelSession **a1, language_modeling::v1::LanguageModelSession *a2)
{
  language_modeling::v1::LanguageModelSession *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    language_modeling::v1::LanguageModelSession::~LanguageModelSession(result);
    JUMPOUT(0x20BD39CB0);
  }
  return result;
}

language_modeling::v1::LanguageModel *sub_20B8EE22C(language_modeling::v1::LanguageModel **a1, language_modeling::v1::LanguageModel *a2)
{
  language_modeling::v1::LanguageModel *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    language_modeling::v1::LanguageModel::~LanguageModel(result);
    JUMPOUT(0x20BD39CB0);
  }
  return result;
}

BOOL sub_20B8EE268()
{
  _QWORD *v0;

  v0 = (_QWORD *)operator new();
  *v0 = 0;
  v0[1] = 0;
  qword_25472B620 = (uint64_t)v0;
  return sub_20B9695A8(v0);
}

void sub_20B8EE29C(uint64_t a1)
{
  const CFArrayCallBacks *v2;

  v2 = (const CFArrayCallBacks *)MEMORY[0x24BDBD690];
  *(_QWORD *)a1 = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  *(_QWORD *)(a1 + 8) = CFArrayCreateMutable(0, 0, v2);
  *(_QWORD *)(a1 + 16) = CFArrayCreateMutable(0, 0, v2);
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 24) = CFArrayCreateMutable(0, 0, v2);
  bzero((void *)(a1 + 36), 0x258uLL);
}

void sub_20B8EE31C(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;

  v2 = *(const void **)a1;
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 8);
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(a1 + 16);
  if (v4)
    CFRelease(v4);
  v5 = *(const void **)(a1 + 24);
  if (v5)
    CFRelease(v5);
}

void sub_20B8EE370(const __CFString *a1, uint64_t a2, int a3)
{
  CFIndex Length;
  CFIndex v7;
  CFIndex v8;
  CFIndex v9;
  CFIndex v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  int CharacterAtIndex;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 *v17;
  BOOL v18;
  CFStringRef v19;
  CFStringRef v20;
  const __CFString *MutableCopy;
  UniChar *v22;
  CFIndex v23;
  uint64_t v24;
  char v25;
  int v26;
  int v27;
  uint64_t v28;
  char v29;
  int v30;
  uint64_t v31;
  unsigned __int16 v32;
  BOOL v33;
  CFTypeRef *v34;
  char v35;
  const __CFString *v36;
  uint64_t i;
  const char *v38;
  const char *v39;
  uint64_t v40;
  int v41;
  char *v42;
  int v43;
  unint64_t v44;
  int v45;
  unint64_t v46;
  int v47;
  char *v48;
  int v49;
  const __CFString *v50;
  CFIndex v51;
  CFIndex v52;
  CFIndex v53;
  char v54;
  int v55;
  unint64_t v57;
  const __CFString *v59;
  const char *v60;
  const char *v61;
  uint64_t v62;
  int v63;
  char *v64;
  uint64_t v65;
  const char *v66;
  unint64_t v67;
  unint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  const void *v73;
  const __CFString *v74;
  const __CFString *Copy;
  int v76;
  const __CFString *v77;
  const __CFString *v78;
  __CFString *Mutable;
  __CFString *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unsigned __int16 v85;
  int v86;
  uint64_t j;
  const char *v88;
  uint64_t v89;
  const __CFString *v90;
  int v91;
  char *v92;
  unint64_t v93;
  unint64_t v94;
  int v95;
  uint64_t v96;
  CFIndex v97;
  const __CFString *ValueAtIndex;
  const __CFString *v99;
  __int16 v100;
  const __CFString *v101;
  __int16 v102;
  CFIndex v103;
  int v104;
  int v105;
  unsigned __int16 v106;
  int v107;
  CFIndex v108;
  const __CFString *v109;
  const __CFString *v110;
  CFIndex v111;
  _WORD *v112;
  __int16 v113;
  char *v114;
  char *v115;
  int v116;
  CFIndex v117;
  _BOOL4 v118;
  char *v119;
  char *v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  __int16 v129;
  _WORD *v130;
  char *v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  char *v139;
  __int16 v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  char *v147;
  __int16 v148;
  char *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  char *v156;
  char *v157;
  __int16 v158;
  __int16 v159;
  char *v160;
  char *v161;
  char *v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  char *v169;
  __int16 v170;
  char *v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  unint64_t v176;
  uint64_t v177;
  char *v178;
  char *v179;
  __int16 v180;
  CFStringRef v181;
  CFStringRef v182;
  CFIndex v183;
  char *v184;
  char *v185;
  char *v186;
  CFIndex v187;
  uint64_t v188;
  const __CFAllocator *alloc;
  UniChar *v190;
  CFTypeRef cf[2];
  __int128 v192;
  __int16 v193;
  void *__p;
  char *v195;
  char *v196;
  UniChar chars;
  int v198;
  char v199;
  char cStr[8];
  char *v201;
  _QWORD v202[3];
  CFRange v203;
  CFRange v204;
  CFRange v205;
  CFRange v206;
  CFRange v207;

  v202[1] = *MEMORY[0x24BDAC8D0];
  Length = CFStringGetLength(a1);
  v7 = Length;
  v187 = Length;
  if (a3 == 2)
  {
    v8 = Length - 1;
    if (Length < 1)
      return;
    v9 = 0;
    v10 = 0;
    v11 = 4;
    while (1)
    {
      v12 = v11;
      CharacterAtIndex = CFStringGetCharacterAtIndex(a1, v10);
      v14 = 0;
      while ((unsigned __int16)word_20BA4B174[v14] != CharacterAtIndex)
      {
        if (++v14 == 21)
          goto LABEL_9;
      }
      if (v14 != -1)
        break;
LABEL_9:
      if ((CharacterAtIndex - 12583) <= 2
        && (&off_24C49BD40)[(__int16)(CharacterAtIndex - 12583)] - "'1(1)1" != -2)
      {
        v11 = 1;
        if (!v10)
          goto LABEL_40;
        goto LABEL_34;
      }
      v15 = 0;
      while ((unsigned __int16)word_20BA4B1A8[v15] != CharacterAtIndex)
      {
        if (++v15 == 13)
          goto LABEL_16;
      }
      if (v15 != -1)
      {
        v11 = 2;
        if (!v10)
          goto LABEL_40;
        goto LABEL_34;
      }
LABEL_16:
      v16 = 0;
      while ((unsigned __int16)word_20BA4B1C4[v16] != CharacterAtIndex)
      {
        if (++v16 == 5)
        {
          v17 = 0;
          goto LABEL_23;
        }
      }
      v17 = &word_20BA4B1C4[v16];
LABEL_23:
      v18 = (char *)v17 - (char *)word_20BA4B1C4 == -2 || v17 == 0;
      if (v18)
        v11 = 4;
      else
        v11 = 3;
      if (v10)
        goto LABEL_34;
LABEL_40:
      v18 = v10++ == v8;
      if (v18)
      {
        v205.length = v187 - v9;
        v205.location = v9;
        v20 = CFStringCreateWithSubstring(0, a1, v205);
        cf[0] = v20;
        sub_20B8EF820(v20, a2);
        if (v20)
          CFRelease(v20);
        return;
      }
    }
    v11 = 0;
    if (!v10)
      goto LABEL_40;
LABEL_34:
    if (v12 >= v11 || v12 == 4 || v11 == 4)
    {
      v204.length = v10 - v9;
      v204.location = v9;
      v19 = CFStringCreateWithSubstring(0, a1, v204);
      cf[0] = v19;
      sub_20B8EF820(v19, a2);
      if (v19)
        CFRelease(v19);
      v9 = v10;
    }
    goto LABEL_40;
  }
  MutableCopy = CFStringCreateMutableCopy(0, 0, a1);
  v188 = a2;
  v22 = (UniChar *)operator new[]();
  v203.location = 0;
  v203.length = v7;
  CFStringGetCharacters(MutableCopy, v203, v22);
  CFRelease(MutableCopy);
  if (v7 + 4 <= v7 + 1)
    v23 = v7 + 1;
  else
    v23 = v7 + 4;
  bzero(&v22[v7], 2 * (v23 - v7));
  v193 = 0;
  *(_OWORD *)cf = 0u;
  v192 = 0u;
  *(_DWORD *)(a2 + 32) = 0;
  if (v7 < 1)
    goto LABEL_225;
  v24 = v187;
  alloc = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v190 = v22;
LABEL_49:
  sub_20B8EF7C0((uint64_t)cf);
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  BYTE4(__p) = 0;
  LODWORD(__p) = 0;
  v29 = 1;
  while (2)
  {
    v30 = v190[v28];
    switch(sub_20B8F026C(v190[v28]))
    {
      case 0u:
        if ((v29 & 1) == 0)
          goto LABEL_158;
        HIBYTE(v193) = 1;
        LOBYTE(v28) = v28 + 1;
        v50 = (const __CFString *)*((_QWORD *)&v192 + 1);
        goto LABEL_189;
      case 1u:
      case 2u:
      case 3u:
      case 4u:
      case 9u:
        if ((v29 & 1) != 0)
          goto LABEL_103;
        goto LABEL_158;
      case 5u:
        if ((v29 & 1) != 0)
          goto LABEL_103;
        goto LABEL_158;
      case 6u:
        if (!v27)
        {
          v31 = 0;
          cStr[0] = v30;
          cStr[1] = 0;
          LOBYTE(__p) = v30;
          while (1)
          {
            v32 = v190[v28 + 1 + v31];
            if (sub_20B8F026C(v32) - 8 <= 0xFFFFFFFD)
              break;
            *((_BYTE *)&__p + ++v31) = v32;
            if (v31 == 3)
              goto LABEL_65;
          }
          memset((char *)&__p + v31 + 1, 48, 3 - v31);
LABEL_65:
          v28 += v31;
          v35 = 0;
          v36 = (const __CFString *)cf[0];
          for (i = 3; i != -1; --i)
          {
            v38 = sub_20B8F0378((const char *)&__p, a3);
            v39 = v38;
            if (!v38)
              goto LABEL_76;
            v40 = *((unsigned __int8 *)v38 + 4);
            v41 = sub_20B8F0438(v36);
            if (v41 == -1)
              goto LABEL_80;
            if (a3 == 1)
            {
              v42 = (char *)&unk_20BA4467D + 38 * v41;
            }
            else
            {
              if (a3)
              {
                v43 = 0;
                goto LABEL_74;
              }
              v42 = (char *)&unk_20BA44212 + 39 * v41;
            }
            v43 = v42[v40 - 4];
LABEL_74:
            v35 |= v43 == 1;
            if (!i || v43)
              goto LABEL_80;
LABEL_76:
            if (*((_BYTE *)&__p + i) != 48)
            {
              *((_BYTE *)&__p + i) = 48;
              --v28;
            }
          }
          if (!v39)
            goto LABEL_94;
LABEL_80:
          if (*v39 == 48)
          {
            cStr[0] = 0;
            goto LABEL_94;
          }
          v44 = 0;
          do
          {
            v45 = *((unsigned __int8 *)&__p + v44);
            cStr[v44] = v45;
            v46 = v44 + 1;
            if (v44 > 2)
              break;
            v47 = v39[++v44];
          }
          while (v47 != 48);
          v48 = &cStr[v46];
          cStr[v46] = 0;
          if (v46 == 1)
            goto LABEL_94;
          v49 = v190[v28 + 1];
          if (v49 == 114)
          {
            if (v45 != 101)
              goto LABEL_94;
            if (sub_20B8F026C(v190[v28 + 2]) == 6)
            {
              v49 = v190[v28 + 1];
              goto LABEL_90;
            }
            goto LABEL_93;
          }
LABEL_90:
          if (v49 == 117)
          {
            if (*(v48 - 1) != 111)
              goto LABEL_94;
            goto LABEL_93;
          }
          if (v49 == 105 && *(v48 - 1) == 97)
          {
LABEL_93:
            --v28;
            *(v48 - 1) = 0;
          }
LABEL_94:
          v27 = 1;
          if ((v35 & 1) != 0 || !v26)
          {
            v34 = &cf[1];
          }
          else
          {
            HIBYTE(v193) = 1;
            v34 = &cf[1];
            v26 = 1;
          }
LABEL_98:
          v29 = 0;
          *v34 = CFStringCreateWithCString(alloc, cStr, 0x600u);
          ++v28;
          v25 = 1;
          if (v28 >= v24)
            goto LABEL_158;
          continue;
        }
        v54 = v28 - 1;
        v55 = v190[v28 - 1];
        if ((v55 - 103) > 0xB || ((1 << (v55 - 103)) & 0x881) == 0)
          goto LABEL_158;
        v57 = 3;
        while (*((_BYTE *)&__p + v57) == 48)
        {
          if (v57-- <= 1)
            goto LABEL_134;
        }
        *((_BYTE *)&__p + v57) = 48;
LABEL_134:
        v59 = (const __CFString *)cf[0];
        v60 = sub_20B8F0378((const char *)&__p, a3);
        v61 = v60;
        if (!v59)
        {
          if (!v60)
          {
            v65 = 3;
            do
            {
              if (*((_BYTE *)&__p + v65) != 48)
              {
                *((_BYTE *)&__p + v65) = 48;
                --v54;
              }
              --v65;
              v66 = sub_20B8F0378((const char *)&__p, a3);
            }
            while (!v66);
            v61 = v66;
          }
          if (*v61 == 48)
          {
            v67 = 0;
          }
          else
          {
            v68 = 0;
            do
            {
              cStr[v68] = *((_BYTE *)&__p + v68);
              v67 = v68 + 1;
              if (v68 > 2)
                break;
              v69 = v61[++v68];
            }
            while (v69 != 48);
          }
          cStr[v67] = 0;
          CFRelease(cf[1]);
          cf[1] = CFStringCreateWithCString(alloc, cStr, 0x600u);
          LOBYTE(v28) = v54;
          goto LABEL_158;
        }
        if (!v60)
          goto LABEL_158;
        v62 = *((unsigned __int8 *)v60 + 4);
        v63 = sub_20B8F0438(v59);
        if (a3)
        {
          if (a3 != 1)
            goto LABEL_158;
          v64 = (char *)&unk_20BA4467D + 38 * v63;
        }
        else
        {
          v64 = (char *)&unk_20BA44212 + 39 * v63;
        }
        if (v64[v62 - 4] == 1)
        {
          v82 = 0;
          v199 = 0;
          v198 = 0;
          if (v28 <= v24)
            v83 = v24;
          else
            v83 = v28;
          v84 = v83 - v28;
          while (1)
          {
            if (v84 == v82)
              goto LABEL_204;
            v85 = v190[v28 + v82];
            if (sub_20B8F026C(v85) - 8 < 0xFFFFFFFE)
              break;
            *((_BYTE *)&v198 + v82++) = v85;
            if (v82 == 4)
              goto LABEL_206;
          }
          v84 = v82;
LABEL_204:
          if (v84 <= 3)
            memset((char *)&v198 + v84, 48, 4 - v84);
LABEL_206:
          v86 = 0;
          for (j = 3; j != -1; --j)
          {
            v88 = sub_20B8F0378((const char *)&v198, a3);
            if (v88)
            {
              v89 = *((unsigned __int8 *)v88 + 4);
              chars = v55;
              v90 = CFStringCreateWithCharacters(0, &chars, 1);
              v91 = sub_20B8F0438(v90);
              if (v90)
                CFRelease(v90);
              if (a3)
                v92 = (char *)&unk_20BA4467D + 38 * v91;
              else
                v92 = (char *)&unk_20BA44212 + 39 * v91;
              if (v92[v89 - 4])
                v86 = 1;
              if (v198 != 117 && v198 != 105)
                break;
            }
            *((_BYTE *)&v198 + j) = 48;
          }
          if (v86)
          {
            if (*v61 == 48)
            {
              v93 = 0;
            }
            else
            {
              v94 = 0;
              do
              {
                cStr[v94] = *((_BYTE *)&__p + v94);
                v93 = v94 + 1;
                if (v94 > 2)
                  break;
                v95 = v61[++v94];
              }
              while (v95 != 48);
            }
            cStr[v93] = 0;
            CFRelease(cf[1]);
            cf[1] = CFStringCreateWithCString(alloc, cStr, 0x600u);
            LOBYTE(v28) = v28 - 1;
          }
        }
LABEL_158:
        LOBYTE(v193) = v28;
        v70 = v188;
LABEL_159:
        if ((_BYTE)v28)
        {
          v71 = *(int *)(v70 + 32);
          *(_DWORD *)(v70 + 32) = v71 + 1;
          v190 += v28;
          v72 = (char *)v190 - (char *)v22;
          *(_WORD *)(v70 + 2 * v71 + 636) = (unint64_t)((char *)v190 - (char *)v22) >> 1;
          v73 = (const void *)*((_QWORD *)&v192 + 1);
          if (*((_QWORD *)&v192 + 1))
          {
            CFArrayAppendValue(*(CFMutableArrayRef *)v70, &stru_24C4B3660);
            CFArrayAppendValue(*(CFMutableArrayRef *)(v70 + 8), &stru_24C4B3660);
            CFArrayAppendValue(*(CFMutableArrayRef *)(v70 + 24), &stru_24C4B3660);
            CFArrayAppendValue(*(CFMutableArrayRef *)(v70 + 16), v73);
          }
          else
          {
            v74 = (const __CFString *)cf[0];
            Copy = (const __CFString *)cf[1];
            if (cf[1] && cf[0] && CFStringGetLength((CFStringRef)cf[0]) >= 1)
            {
              v76 = CFStringGetCharacterAtIndex(v74, 0);
              switch(v76)
              {
                case 'j':
                case 'q':
                  goto LABEL_169;
                case 'k':
                case 'm':
                case 'o':
                case 'p':
                  break;
                case 'l':
                case 'n':
                  if (CFStringCompare(Copy, CFSTR("ue"), 1uLL))
                    break;
                  v77 = CFSTR("ve");
                  goto LABEL_171;
                default:
                  if (v76 != 120)
                    break;
LABEL_169:
                  if (CFStringCompare(Copy, CFSTR("v"), 1uLL))
                    break;
                  v77 = CFSTR("u");
LABEL_171:
                  CFRelease(Copy);
                  Copy = CFStringCreateCopy(0, v77);
                  cf[1] = Copy;
                  break;
              }
            }
            if ((_QWORD)v192)
              v78 = (const __CFString *)v192;
            else
              v78 = &stru_24C4B3660;
            CFArrayAppendValue(*(CFMutableArrayRef *)(v70 + 24), v78);
            Mutable = CFStringCreateMutable(0, 10);
            v80 = Mutable;
            if (v74)
              CFStringAppend(Mutable, v74);
            else
              v74 = &stru_24C4B3660;
            CFArrayAppendValue(*(CFMutableArrayRef *)v70, v74);
            if (Copy)
              CFStringAppend(v80, Copy);
            else
              Copy = &stru_24C4B3660;
            CFArrayAppendValue(*(CFMutableArrayRef *)(v70 + 8), Copy);
            if (HIBYTE(v193))
            {
              v81 = v70 + 2 * *(int *)(v70 + 32);
              *(_WORD *)(v81 + 34) |= 0x20u;
            }
            CFArrayAppendValue(*(CFMutableArrayRef *)(v70 + 16), v80);
            CFRelease(v80);
          }
LABEL_184:
          v24 = v187 - (v72 >> 1);
          if (v24 > 0)
            goto LABEL_49;
        }
LABEL_225:
        MEMORY[0x20BD39C80](v22, 0x1000C80BDFB0063);
        sub_20B8EF7C0((uint64_t)cf);
        v96 = v188;
        if (*(int *)(v188 + 32) <= 0)
        {
          *(_QWORD *)cStr = 0;
          v201 = 0;
          v202[0] = 0;
          __p = 0;
          v195 = 0;
          v196 = 0;
        }
        else
        {
          v97 = 0;
          while (2)
          {
            ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v188 + 8), v97);
            v99 = (const __CFString *)CFArrayGetValueAtIndex(*(CFArrayRef *)v188, v97);
            if (CFStringGetLength(ValueAtIndex) || CFStringGetLength(v99))
            {
              if (CFStringGetLength(ValueAtIndex))
                v100 = 2;
              else
                v100 = 4;
              *(_WORD *)(v188 + 2 * v97 + 36) |= v100;
              v101 = (const __CFString *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v188 + 24), v97);
              if (CFStringGetLength(v101) >= 1)
              {
                v102 = 8;
                goto LABEL_235;
              }
            }
            else
            {
              v102 = 16;
LABEL_235:
              *(_WORD *)(v188 + 2 * v97 + 36) |= v102;
            }
            ++v97;
            v103 = *(int *)(v188 + 32);
            if (v97 < v103)
              continue;
            break;
          }
          *(_QWORD *)cStr = 0;
          v201 = 0;
          v202[0] = 0;
          __p = 0;
          v195 = 0;
          v196 = 0;
          if ((int)v103 > 0)
          {
            v104 = 0;
            v105 = 0;
            v106 = 0;
            v107 = 0;
            while (1)
            {
              v108 = v106;
              v109 = (const __CFString *)CFArrayGetValueAtIndex(*(CFArrayRef *)v96, v106);
              v110 = (const __CFString *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v96 + 16), v108);
              v107 += CFStringGetLength(v110);
              v111 = v96 + 2 * v108;
              v113 = *(_WORD *)(v111 + 36);
              v112 = (_WORD *)(v111 + 36);
              if ((v113 & 4) != 0
                && (v116 = *(_DWORD *)(v96 + 32),
                    v117 = CFStringGetLength(v109),
                    v118 = v116 - 1 != v104,
                    v96 = v188,
                    v117 == 2)
                && ((v118 | v105) & 1) != 0)
              {
                v120 = v201;
                v119 = (char *)v202[0];
                if ((unint64_t)v201 >= v202[0])
                {
                  v141 = *(char **)cStr;
                  v142 = (uint64_t)&v201[-*(_QWORD *)cStr];
                  if ((uint64_t)&v201[-*(_QWORD *)cStr] <= -3)
                    sub_20B80CDD8();
                  v143 = v142 >> 1;
                  if (v202[0] - *(_QWORD *)cStr <= (unint64_t)((v142 >> 1) + 1))
                    v144 = v143 + 1;
                  else
                    v144 = v202[0] - *(_QWORD *)cStr;
                  if (v202[0] - *(_QWORD *)cStr >= 0x7FFFFFFFFFFFFFFEuLL)
                    v145 = 0x7FFFFFFFFFFFFFFFLL;
                  else
                    v145 = v144;
                  if (v145)
                  {
                    v146 = (char *)sub_20B80FD48((uint64_t)v202, v145);
                    v141 = *(char **)cStr;
                    v120 = v201;
                  }
                  else
                  {
                    v146 = 0;
                  }
                  v147 = &v146[2 * v143];
                  *(_WORD *)v147 = 4;
                  v121 = v147 + 2;
                  while (v120 != v141)
                  {
                    v148 = *((_WORD *)v120 - 1);
                    v120 -= 2;
                    *((_WORD *)v147 - 1) = v148;
                    v147 -= 2;
                  }
                  v119 = &v146[2 * v145];
                  *(_QWORD *)cStr = v147;
                  v201 = v121;
                  v202[0] = v119;
                  if (v141)
                  {
                    operator delete(v141);
                    v119 = (char *)v202[0];
                  }
                }
                else
                {
                  *(_WORD *)v201 = 4;
                  v121 = v120 + 2;
                }
                v201 = v121;
                if (v121 >= v119)
                {
                  v150 = *(char **)cStr;
                  v151 = (uint64_t)&v121[-*(_QWORD *)cStr];
                  if ((uint64_t)&v121[-*(_QWORD *)cStr] <= -3)
                    sub_20B80CDD8();
                  v152 = v151 >> 1;
                  v153 = (unint64_t)&v119[-*(_QWORD *)cStr];
                  if (v153 <= (v151 >> 1) + 1)
                    v154 = v152 + 1;
                  else
                    v154 = v153;
                  if (v153 >= 0x7FFFFFFFFFFFFFFELL)
                    v155 = 0x7FFFFFFFFFFFFFFFLL;
                  else
                    v155 = v154;
                  if (v155)
                  {
                    v156 = (char *)sub_20B80FD48((uint64_t)v202, v155);
                    v150 = *(char **)cStr;
                    v121 = v201;
                  }
                  else
                  {
                    v156 = 0;
                  }
                  v157 = &v156[2 * v152];
                  *(_WORD *)v157 = 4;
                  v149 = v157 + 2;
                  while (v121 != v150)
                  {
                    v158 = *((_WORD *)v121 - 1);
                    v121 -= 2;
                    *((_WORD *)v157 - 1) = v158;
                    v157 -= 2;
                  }
                  *(_QWORD *)cStr = v157;
                  v201 = v149;
                  v202[0] = &v156[2 * v155];
                  if (v150)
                    operator delete(v150);
                }
                else
                {
                  *(_WORD *)v121 = 4;
                  v149 = v121 + 2;
                }
                v201 = v149;
                v159 = v107 - 1;
                v161 = v195;
                v160 = v196;
                if (v195 >= v196)
                {
                  v163 = (char *)__p;
                  v164 = v195 - (_BYTE *)__p;
                  if (v195 - (_BYTE *)__p <= -3)
                    sub_20B80CDD8();
                  v165 = v164 >> 1;
                  if (v196 - (_BYTE *)__p <= (unint64_t)((v164 >> 1) + 1))
                    v166 = v165 + 1;
                  else
                    v166 = v196 - (_BYTE *)__p;
                  if ((unint64_t)(v196 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFELL)
                    v167 = 0x7FFFFFFFFFFFFFFFLL;
                  else
                    v167 = v166;
                  if (v167)
                  {
                    v168 = (char *)sub_20B80FD48((uint64_t)&v196, v167);
                    v163 = (char *)__p;
                    v161 = v195;
                  }
                  else
                  {
                    v168 = 0;
                  }
                  v169 = &v168[2 * v165];
                  *(_WORD *)v169 = v159;
                  v162 = v169 + 2;
                  while (v161 != v163)
                  {
                    v170 = *((_WORD *)v161 - 1);
                    v161 -= 2;
                    *((_WORD *)v169 - 1) = v170;
                    v169 -= 2;
                  }
                  v160 = &v168[2 * v167];
                  __p = v169;
                  v195 = v162;
                  v196 = v160;
                  if (v163)
                  {
                    operator delete(v163);
                    v160 = v196;
                  }
                }
                else
                {
                  *(_WORD *)v195 = v159;
                  v162 = v161 + 2;
                }
                v195 = v162;
                if (v162 >= v160)
                {
                  v172 = (char *)__p;
                  v173 = v162 - (_BYTE *)__p;
                  if (v162 - (_BYTE *)__p <= -3)
LABEL_360:
                    sub_20B80CDD8();
                  v174 = v173 >> 1;
                  v175 = v160 - (_BYTE *)__p;
                  if (v175 <= (v173 >> 1) + 1)
                    v176 = v174 + 1;
                  else
                    v176 = v175;
                  if (v175 >= 0x7FFFFFFFFFFFFFFELL)
                    v177 = 0x7FFFFFFFFFFFFFFFLL;
                  else
                    v177 = v176;
                  if (v177)
                  {
                    v178 = (char *)sub_20B80FD48((uint64_t)&v196, v177);
                    v172 = (char *)__p;
                    v162 = v195;
                    v96 = v188;
                  }
                  else
                  {
                    v178 = 0;
                  }
                  v179 = &v178[2 * v174];
                  *(_WORD *)v179 = v107;
                  v171 = v179 + 2;
                  while (v162 != v172)
                  {
                    v180 = *((_WORD *)v162 - 1);
                    v162 -= 2;
                    *((_WORD *)v179 - 1) = v180;
                    v179 -= 2;
                  }
                  __p = v179;
                  v195 = v171;
                  v196 = &v178[2 * v177];
                  if (v172)
                    operator delete(v172);
                }
                else
                {
                  *(_WORD *)v162 = v107;
                  v171 = v162 + 2;
                }
                v195 = v171;
                v206.location = 0;
                v206.length = 1;
                v181 = CFStringCreateWithSubstring(0, v109, v206);
                v207.location = 1;
                v207.length = 1;
                v182 = CFStringCreateWithSubstring(0, v109, v207);
                CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)v96, v108);
                CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)v96, v108, v181);
                v183 = (v104 + 1);
                CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)v96, v183, v182);
                CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v96 + 16), v108);
                CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(v96 + 16), v108, v181);
                CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(v96 + 16), v183, v182);
                CFRelease(v181);
                CFRelease(v182);
                ++*(_DWORD *)(v96 + 32);
                if ((v105 & 1) == 0)
                {
LABEL_347:
                  v105 = ((unsigned __int16)*v112 >> 2) & 1;
                  goto LABEL_348;
                }
              }
              else
              {
                v114 = v201;
                if ((unint64_t)v201 >= v202[0])
                {
                  v122 = *(char **)cStr;
                  v123 = (uint64_t)&v201[-*(_QWORD *)cStr];
                  if ((uint64_t)&v201[-*(_QWORD *)cStr] < -2)
                    goto LABEL_360;
                  v124 = v123 >> 1;
                  if (v202[0] - *(_QWORD *)cStr <= (unint64_t)((v123 >> 1) + 1))
                    v125 = v124 + 1;
                  else
                    v125 = v202[0] - *(_QWORD *)cStr;
                  if (v202[0] - *(_QWORD *)cStr >= 0x7FFFFFFFFFFFFFFEuLL)
                    v126 = 0x7FFFFFFFFFFFFFFFLL;
                  else
                    v126 = v125;
                  if (v126)
                  {
                    v127 = (char *)sub_20B80FD48((uint64_t)v202, v126);
                    v122 = *(char **)cStr;
                    v114 = v201;
                    v96 = v188;
                  }
                  else
                  {
                    v127 = 0;
                  }
                  v128 = &v127[2 * v124];
                  *(_WORD *)v128 = *v112;
                  v115 = v128 + 2;
                  while (v114 != v122)
                  {
                    v129 = *((_WORD *)v114 - 1);
                    v114 -= 2;
                    *((_WORD *)v128 - 1) = v129;
                    v128 -= 2;
                  }
                  *(_QWORD *)cStr = v128;
                  v201 = v115;
                  v202[0] = &v127[2 * v126];
                  if (v122)
                    operator delete(v122);
                }
                else
                {
                  *(_WORD *)v201 = *v112;
                  v115 = v114 + 2;
                }
                v201 = v115;
                v130 = (_WORD *)(v96 + 2 * v108 + 636);
                v131 = v195;
                if (v195 >= v196)
                {
                  v133 = (char *)__p;
                  v134 = v195 - (_BYTE *)__p;
                  if (v195 - (_BYTE *)__p < -2)
                    goto LABEL_360;
                  v135 = v134 >> 1;
                  if (v196 - (_BYTE *)__p <= (unint64_t)((v134 >> 1) + 1))
                    v136 = v135 + 1;
                  else
                    v136 = v196 - (_BYTE *)__p;
                  if ((unint64_t)(v196 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFELL)
                    v137 = 0x7FFFFFFFFFFFFFFFLL;
                  else
                    v137 = v136;
                  if (v137)
                  {
                    v138 = (char *)sub_20B80FD48((uint64_t)&v196, v137);
                    v133 = (char *)__p;
                    v131 = v195;
                    v96 = v188;
                  }
                  else
                  {
                    v138 = 0;
                  }
                  v139 = &v138[2 * v135];
                  *(_WORD *)v139 = *v130;
                  v132 = v139 + 2;
                  while (v131 != v133)
                  {
                    v140 = *((_WORD *)v131 - 1);
                    v131 -= 2;
                    *((_WORD *)v139 - 1) = v140;
                    v139 -= 2;
                  }
                  __p = v139;
                  v195 = v132;
                  v196 = &v138[2 * v137];
                  if (v133)
                    operator delete(v133);
                }
                else
                {
                  *(_WORD *)v195 = *v130;
                  v132 = v131 + 2;
                }
                v195 = v132;
                if ((v105 & 1) == 0)
                  goto LABEL_347;
              }
              v105 = 1;
LABEL_348:
              v106 = v108 + 1;
              v104 = (unsigned __int16)(v108 + 1);
              if (*(_DWORD *)(v96 + 32) <= v104)
              {
                v185 = *(char **)cStr;
                v184 = v201;
                if (v201 != *(char **)cStr)
                {
                  memcpy((void *)(v96 + 36), *(const void **)cStr, (size_t)&v201[-*(_QWORD *)cStr]);
                  v184 = v185;
                }
                goto LABEL_353;
              }
            }
          }
        }
        v184 = 0;
LABEL_353:
        v186 = (char *)__p;
        if (v195 != __p)
          memcpy((void *)(v96 + 636), __p, v195 - (_BYTE *)__p);
        if (v186)
        {
          v195 = v186;
          operator delete(v186);
          v184 = *(char **)cStr;
        }
        if (v184)
        {
          v201 = v184;
          operator delete(v184);
        }
        return;
      case 7u:
        if (v25 & 1 | (v26 != 0))
          goto LABEL_158;
        cStr[0] = v30;
        cStr[1] = 0;
        v33 = (v30 - 99) > 0x17 || ((1 << (v30 - 99)) & 0x810001) == 0;
        if (v33 || v190[v28 + 1] != 104)
        {
          v26 = 1;
          v34 = cf;
        }
        else
        {
          strcpy(&cStr[1], "h");
          v26 = 1;
          v34 = cf;
          ++v28;
        }
        goto LABEL_98;
      case 8u:
        if ((v29 & 1) == 0)
          goto LABEL_158;
        v51 = 0;
        if (v24 <= v28)
        {
          LOBYTE(v24) = v28;
        }
        else
        {
          while (v190[v28 + v51] - 48 < 0xA)
          {
            if (v24 - v28 == ++v51)
            {
              v51 = v24 - v28;
              goto LABEL_155;
            }
          }
          LOBYTE(v24) = v28 + v51;
        }
LABEL_155:
        v50 = CFStringCreateWithCharacters(0, &v190[v28], v51);
        goto LABEL_188;
      case 0xBu:
        if ((v29 & 1) == 0)
          goto LABEL_158;
        v53 = 0;
        if (v24 <= v28)
        {
          LOBYTE(v24) = v28;
        }
        else
        {
          while (v190[v28 + v53] - 65 < 0x1A)
          {
            if (v24 - v28 == ++v53)
            {
              v53 = v24 - v28;
              goto LABEL_157;
            }
          }
          LOBYTE(v24) = v28 + v53;
        }
LABEL_157:
        *((_QWORD *)&v192 + 1) = CFStringCreateWithCharacters(0, &v190[v28], v53);
        LOBYTE(v28) = v24;
        goto LABEL_158;
      case 0xCu:
        if ((v29 & 1) == 0)
          goto LABEL_158;
        v52 = 0;
        if (v24 <= v28)
        {
          LOBYTE(v24) = v28;
        }
        else
        {
          while (sub_20B8F04CC(v190[v28 + v52]))
          {
            if (v24 - v28 == ++v52)
            {
              v52 = v24 - v28;
              goto LABEL_187;
            }
          }
          LOBYTE(v24) = v28 + v52;
        }
LABEL_187:
        v50 = CFStringCreateWithCharacters(0, &v190[v28], v52);
LABEL_188:
        *((_QWORD *)&v192 + 1) = v50;
        LOBYTE(v28) = v24;
LABEL_189:
        v70 = v188;
        LOBYTE(v193) = v28;
        if (!v50)
          goto LABEL_225;
        if (!HIBYTE(v193) || CFStringCompare(v50, CFSTR("'"), 0))
          goto LABEL_159;
        v190 += v28;
        v72 = (char *)v190 - (char *)v22;
        goto LABEL_184;
      default:
        if ((v29 & 1) == 0)
          goto LABEL_158;
LABEL_103:
        v50 = CFStringCreateWithCharacters(0, &v190[v28], 1);
        *((_QWORD *)&v192 + 1) = v50;
        LOBYTE(v28) = v28 + 1;
        goto LABEL_189;
    }
  }
}

void sub_20B8EF734(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  if (a2)
    sub_20B854468(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B8EF7C0(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;

  v2 = *(const void **)a1;
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)a1 = 0;
  }
  v3 = *(const void **)(a1 + 8);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 8) = 0;
  }
  v4 = *(const void **)(a1 + 16);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 16) = 0;
  }
  v5 = *(const void **)(a1 + 24);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(a1 + 24) = 0;
  }
  *(_WORD *)(a1 + 32) = 0;
}

void sub_20B8EF820(const __CFString *value, uint64_t a2)
{
  CFIndex Length;
  int CharacterAtIndex;
  uint64_t v6;
  CFIndex v7;
  CFIndex v8;
  CFStringRef v9;
  int v10;
  uint64_t v11;
  CFStringRef v12;
  const __CFString *v13;
  CFIndex v14;
  __CFArray *v15;
  UniChar v16;
  CFStringRef v17;
  UniChar chars;
  CFRange v19;

  CFArrayAppendValue(*(CFMutableArrayRef *)(a2 + 16), value);
  Length = CFStringGetLength(value);
  CharacterAtIndex = CFStringGetCharacterAtIndex(value, 0);
  v6 = 0;
  chars = CharacterAtIndex;
  while ((unsigned __int16)word_20BA4B174[v6] != CharacterAtIndex)
  {
    if (++v6 == 21)
      goto LABEL_6;
  }
  if (v6 == -1)
  {
LABEL_6:
    CFArrayAppendValue(*(CFMutableArrayRef *)a2, &stru_24C4B3660);
    v7 = 0;
    v8 = Length - 1;
    goto LABEL_10;
  }
  v9 = CFStringCreateWithCharacters(0, &chars, 1);
  v17 = v9;
  CFArrayAppendValue(*(CFMutableArrayRef *)a2, v9);
  if (v9)
    CFRelease(v9);
  v8 = Length - 1;
  v7 = 1;
  --Length;
LABEL_10:
  v10 = CFStringGetCharacterAtIndex(value, v8);
  v11 = 0;
  v16 = v10;
  while ((unsigned __int16)word_20BA4B1C4[v11] != v10)
  {
    if (++v11 == 5)
      goto LABEL_15;
  }
  if (v11 == -1)
  {
LABEL_15:
    CFArrayAppendValue(*(CFMutableArrayRef *)(a2 + 24), &stru_24C4B3660);
    goto LABEL_19;
  }
  v12 = CFStringCreateWithCharacters(0, &v16, 1);
  v17 = v12;
  CFArrayAppendValue(*(CFMutableArrayRef *)(a2 + 24), v12);
  if (v12)
    CFRelease(v12);
  --Length;
LABEL_19:
  v19.location = v7;
  v19.length = Length;
  v13 = CFStringCreateWithSubstring(0, value, v19);
  v17 = v13;
  v14 = CFStringGetLength(v13);
  v15 = *(__CFArray **)(a2 + 8);
  if (v14)
    CFArrayAppendValue(v15, v13);
  else
    CFArrayAppendValue(v15, &stru_24C4B3660);
  ++*(_DWORD *)(a2 + 32);
  if (v13)
    CFRelease(v13);
}

void sub_20B8EF9F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B87E150((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8EFA14(const void *a1, uint64_t a2, int *a3, int a4)
{
  int *v5;
  uint64_t v6;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int16 *v12;
  unsigned int v13;
  BOOL v14;
  int v15;
  unsigned __int16 *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  int v21;
  int v22;
  char v23;
  int v24;
  uint64_t v25;
  unsigned __int16 v26;
  BOOL v27;
  uint64_t v28;
  const char *v29;
  int v30;
  char *v31;
  unint64_t v32;
  int v33;
  unint64_t v34;
  int v35;
  char *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  unint64_t v43;
  int v44;
  const char *v45;
  const char *v46;
  uint64_t v47;
  int v48;
  char *v49;
  uint64_t v50;
  const char *v51;
  unint64_t v52;
  int v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unsigned __int16 v57;
  uint64_t v58;
  int v59;
  const char *v60;
  uint64_t v61;
  int v62;
  char *v63;
  unint64_t v64;
  int v65;
  uint64_t v66;
  char *v68;
  uint64_t v69;
  int *v70;
  int v71;
  char v72[2];
  int v73;
  char v74;
  int v75;
  char v76;
  char __dst[16];
  unsigned __int16 *v78;
  uint64_t v79;
  __int16 v80;
  char __src;
  __int16 v82;
  uint64_t v83;

  v5 = a3;
  v6 = a2;
  v83 = *MEMORY[0x24BDAC8D0];
  *a3 = 0;
  v8 = a2 + 4;
  v9 = (char *)operator new[]();
  memcpy(v9, a1, 2 * v6);
  if (v8 <= v6 + 1)
    v10 = v6 + 1;
  else
    v10 = v8;
  bzero(&v9[2 * v6], 2 * (v10 - v6));
  if (v6 < 1)
    return MEMORY[0x20BD39C80](v9, 0x1000C80BDFB0063);
  v11 = v6;
  v12 = (unsigned __int16 *)v9;
  v69 = v6;
  v70 = v5;
  v68 = v9;
  while (1)
  {
    __dst[0] = 0;
    v78 = 0;
    v79 = 0;
    v80 = 0;
    v76 = 0;
    v75 = 0;
    v13 = *v12 - 105;
    v14 = v13 > 0xD;
    v15 = (1 << v13) & 0x3001;
    if (v14 || v15 == 0)
      break;
    HIBYTE(v80) = 1;
    v17 = v12;
    LOBYTE(v18) = v11;
    v78 = v12;
    v79 = v11;
LABEL_11:
    LOBYTE(v80) = v18;
LABEL_12:
    if (!HIBYTE(v80) || v11 != 1 || *v17 != 39)
      goto LABEL_157;
    v12 += v18;
    v19 = (char *)v12 - v9;
LABEL_159:
    v11 = v6 - (v19 >> 1);
    if (v11 <= 0)
      return MEMORY[0x20BD39C80](v9, 0x1000C80BDFB0063);
  }
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v18 = 0;
  v23 = 1;
LABEL_17:
  v24 = v12[v18];
  switch(sub_20B8F026C(v12[v18]))
  {
    case 0u:
      if ((v23 & 1) == 0)
        goto LABEL_156;
      HIBYTE(v80) = 1;
      LOBYTE(v18) = v18 + 1;
      v17 = v78;
      v6 = v69;
      v5 = v70;
      v9 = v68;
      goto LABEL_121;
    case 6u:
      if (!v22)
      {
        v25 = 0;
        __src = v24;
        LOBYTE(v82) = 0;
        LOBYTE(v75) = v24;
        while (1)
        {
          v26 = v12[v18 + 1 + v25];
          if (sub_20B8F026C(v26) - 8 <= 0xFFFFFFFD)
            break;
          *((_BYTE *)&v75 + ++v25) = v26;
          if (v25 == 3)
            goto LABEL_32;
        }
        memset((char *)&v75 + v25 + 1, 48, 3 - v25);
LABEL_32:
        v18 += v25;
        v28 = 3;
        while (1)
        {
          v29 = sub_20B8F0378((const char *)&v75, a4);
          if (v29)
          {
            v30 = sub_20B8F0540(__dst);
            if (v30 == -1)
              goto LABEL_48;
            if (a4 == 1)
            {
              if (!v28)
                goto LABEL_48;
              v31 = (char *)&unk_20BA4467D + 38 * v30;
            }
            else
            {
              if (a4)
              {
                if (!v28)
                  goto LABEL_48;
                goto LABEL_44;
              }
              if (!v28)
                goto LABEL_48;
              v31 = (char *)&unk_20BA44212 + 39 * v30;
            }
            if (v31[*((unsigned __int8 *)v29 + 4) - 4])
              goto LABEL_48;
          }
LABEL_44:
          if (*((_BYTE *)&v75 + v28) != 48)
          {
            *((_BYTE *)&v75 + v28) = 48;
            --v18;
          }
          if (--v28 == -1)
          {
            if (!v29)
              goto LABEL_64;
LABEL_48:
            if (*v29 != 48)
            {
              v32 = 0;
              do
              {
                v33 = *((unsigned __int8 *)&v75 + v32);
                *(&__src + v32) = v33;
                v34 = v32 + 1;
                if (v32 > 2)
                  break;
                v35 = v29[++v32];
              }
              while (v35 != 48);
              v36 = &__src + v34;
              *(&__src + v34) = 0;
              if (v34 == 1)
                goto LABEL_64;
              v37 = v12[v18 + 1];
              if (v37 != 114)
                goto LABEL_58;
              if (v33 != 101)
                goto LABEL_64;
              if (sub_20B8F026C(v12[v18 + 2]) == 6)
              {
                v37 = v12[v18 + 1];
LABEL_58:
                if (v37 == 117)
                {
                  if (v33 != 111)
                    goto LABEL_64;
                }
                else if (v37 != 105 || v33 != 97)
                {
                  goto LABEL_64;
                }
              }
              --v18;
              *(v36 - 1) = 0;
              goto LABEL_64;
            }
            __src = 0;
LABEL_64:
            v22 = 1;
LABEL_65:
            v23 = 0;
            ++v18;
            v20 = 1;
            if (v18 >= v11)
              goto LABEL_156;
            goto LABEL_17;
          }
        }
      }
      v41 = v18 - 1;
      v71 = v12[v18 - 1];
      if ((v71 - 103) > 0xB || ((1 << (v71 - 103)) & 0x881) == 0)
        goto LABEL_156;
      v43 = 3;
      while (*((_BYTE *)&v75 + v43) == 48)
      {
        v14 = v43-- > 1;
        if (!v14)
          goto LABEL_96;
      }
      *((_BYTE *)&v75 + v43) = 48;
LABEL_96:
      v44 = __dst[0];
      v45 = sub_20B8F0378((const char *)&v75, a4);
      v46 = v45;
      if (!v44)
      {
        if (!v45)
        {
          v50 = 3;
          do
          {
            if (*((_BYTE *)&v75 + v50) != 48)
            {
              *((_BYTE *)&v75 + v50) = 48;
              --v41;
            }
            --v50;
            v51 = sub_20B8F0378((const char *)&v75, a4);
          }
          while (!v51);
          v46 = v51;
        }
        if (*v46 != 48)
        {
          v52 = 0;
          do
          {
            *(&__src + v52) = *((_BYTE *)&v75 + v52);
            if (v52 > 2)
              break;
            v53 = v46[++v52];
          }
          while (v53 != 48);
        }
        goto LABEL_155;
      }
      if (!v45)
        goto LABEL_156;
      v47 = *((unsigned __int8 *)v45 + 4);
      v48 = sub_20B8F0540(__dst);
      if (a4)
      {
        if (a4 != 1)
          goto LABEL_156;
        v49 = (char *)&unk_20BA4467D + 38 * v48;
      }
      else
      {
        v49 = (char *)&unk_20BA44212 + 39 * v48;
      }
      if (v49[v47 - 4] == 1)
      {
        v54 = 0;
        v74 = 0;
        v73 = 0;
        if (v18 <= v11)
          v55 = v11;
        else
          v55 = v18;
        v56 = v55 - v18;
        while (1)
        {
          if (v56 == v54)
            goto LABEL_134;
          v57 = v12[v18 + v54];
          if (sub_20B8F026C(v57) - 8 < 0xFFFFFFFE)
            break;
          *((_BYTE *)&v73 + v54++) = v57;
          if (v54 == 4)
          {
            v58 = 3;
            goto LABEL_139;
          }
        }
        v56 = v54;
LABEL_134:
        if (v56 >= 3)
          v58 = 3;
        else
          v58 = v56;
        if (v56 <= 3)
          memset((char *)&v73 + v56, 48, 4 - v56);
LABEL_139:
        v59 = 0;
        do
        {
          v60 = sub_20B8F0378((const char *)&v73, a4);
          if (v60)
          {
            v61 = *((unsigned __int8 *)v60 + 4);
            v72[0] = v71;
            v72[1] = 0;
            v62 = sub_20B8F0540(v72);
            if (a4)
              v63 = (char *)&unk_20BA4467D + 38 * v62;
            else
              v63 = (char *)&unk_20BA44212 + 39 * v62;
            if (v63[v61 - 4])
              v59 = 1;
            if (v73 != 117 && v73 != 105)
              break;
          }
          *((_BYTE *)&v73 + v58) = 48;
          v14 = v58-- <= 0;
        }
        while (!v14);
        if (!v59)
          goto LABEL_156;
        if (*v46 != 48)
        {
          v64 = 0;
          do
          {
            *(&__src + v64) = *((_BYTE *)&v75 + v64);
            if (v64 > 2)
              break;
            v65 = v46[++v64];
          }
          while (v65 != 48);
        }
LABEL_155:
        LOBYTE(v18) = v41;
      }
LABEL_156:
      LOBYTE(v80) = v18;
      v6 = v69;
      v5 = v70;
      v9 = v68;
LABEL_157:
      if ((_BYTE)v18)
      {
        v66 = *v5;
        *v5 = v66 + 1;
        v12 += v18;
        v19 = (char *)v12 - v9;
        *((_WORD *)v5 + v66 + 2) = (unint64_t)((char *)v12 - v9) >> 1;
        goto LABEL_159;
      }
      return MEMORY[0x20BD39C80](v9, 0x1000C80BDFB0063);
    case 7u:
      if (v20 & 1 | (v21 != 0))
        goto LABEL_156;
      __src = v24;
      LOBYTE(v82) = 0;
      v27 = (v24 - 99) > 0x17 || ((1 << (v24 - 99)) & 0x810001) == 0;
      if (!v27 && v12[v18 + 1] == 104)
      {
        v82 = 104;
        ++v18;
      }
      strcpy(__dst, &__src);
      v21 = 1;
      goto LABEL_65;
    case 8u:
      if ((v23 & 1) == 0)
        goto LABEL_156;
      v9 = v68;
      v6 = v69;
      v38 = 0;
      if (v11 <= v18)
      {
        LOBYTE(v11) = v18;
        v5 = v70;
      }
      else
      {
        v5 = v70;
        while (v12[v18 + v38] - 48 < 0xA)
        {
          if (v11 - v18 == ++v38)
          {
            v38 = v11 - v18;
            goto LABEL_116;
          }
        }
        LOBYTE(v11) = v18 + v38;
      }
LABEL_116:
      v17 = &v12[v18];
      v78 = v17;
      v79 = v38;
      LOBYTE(v18) = v11;
      goto LABEL_121;
    case 0xBu:
      if ((v23 & 1) == 0)
        goto LABEL_156;
      v39 = 0;
      if (v11 <= v18)
      {
        LOBYTE(v11) = v18;
      }
      else
      {
        while (v12[v18 + v39] - 65 < 0x1A)
        {
          if (v11 - v18 == ++v39)
          {
            v39 = v11 - v18;
            goto LABEL_118;
          }
        }
        LOBYTE(v11) = v18 + v39;
      }
LABEL_118:
      v78 = &v12[v18];
      v79 = v39;
      LOBYTE(v18) = v11;
      goto LABEL_156;
    case 0xCu:
      if ((v23 & 1) == 0)
        goto LABEL_156;
      v9 = v68;
      v6 = v69;
      v40 = 0;
      if (v11 <= v18)
      {
        LOBYTE(v11) = v18;
      }
      else
      {
        while (sub_20B8F04CC(v12[v18 + v40]))
        {
          if (v11 - v18 == ++v40)
          {
            v40 = v11 - v18;
            goto LABEL_120;
          }
        }
        LOBYTE(v11) = v18 + v40;
      }
LABEL_120:
      v5 = v70;
      v17 = &v12[v18];
      v78 = v17;
      v79 = v40;
      LOBYTE(v18) = v11;
LABEL_121:
      LOBYTE(v80) = v18;
      if (!v17)
        return MEMORY[0x20BD39C80](v9, 0x1000C80BDFB0063);
      v11 = v79;
      goto LABEL_12;
    default:
      if ((v23 & 1) == 0)
        goto LABEL_156;
      v17 = &v12[v18];
      v78 = v17;
      v79 = 1;
      LOBYTE(v18) = v18 + 1;
      v11 = 1;
      v6 = v69;
      v5 = v70;
      v9 = v68;
      goto LABEL_11;
  }
}

uint64_t sub_20B8F026C(uint64_t theChar)
{
  int v1;

  if ((_DWORD)theChar)
  {
    v1 = theChar;
    if ((unsigned __int16)(theChar - 58) > 0xFFF5u)
    {
      return 8;
    }
    else
    {
      if (sub_20B8F04CC(theChar))
        return 12;
      if ((unsigned __int16)((v1 & 0xFFDF) - 91) >= 0xFFE6u)
      {
        if ((v1 - 65) >= 0x1A)
        {
          if ((v1 - 97) <= 0x15 && ((1 << (v1 - 97)) & 0x304111) != 0)
            return 6;
          else
            return 7;
        }
        else
        {
          return 11;
        }
      }
      else
      {
        if (v1 > 91)
        {
          if (v1 == 92)
            return 4;
          if (v1 == 94 || v1 == 126)
            return 3;
          return 9;
        }
        if (v1 == 39)
          return 5;
        if (v1 != 45)
        {
          if (v1 == 47)
            return 2;
          return 9;
        }
        return 1;
      }
    }
  }
  return theChar;
}

const char *sub_20B8F0378(const char *a1, int a2)
{
  const char *v3;
  unsigned __int16 v4;
  unsigned __int16 v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  const char *v11;
  int v12;
  int v13;
  int v14;
  const char *result;

  if (a2)
    v3 = (const char *)&unk_2547290A0;
  else
    v3 = (const char *)&unk_25472916E;
  v4 = strlen(a1);
  v5 = v4;
  if (!v4)
    return v3;
  v6 = (unsigned __int16)strlen(v3) - v4;
  if ((int)v6 < 1)
    return 0;
  v7 = 0;
  v8 = v3;
  do
  {
    v9 = v5;
    v10 = v8;
    v11 = a1;
    while (1)
    {
      v13 = *(unsigned __int8 *)v10++;
      v12 = v13;
      v14 = *(unsigned __int8 *)v11++;
      if (v12 != v14)
        break;
      if (!--v9)
        return &v3[v7];
    }
    result = 0;
    ++v7;
    ++v8;
  }
  while (v7 != v6);
  return result;
}

uint64_t sub_20B8F0438(const __CFString *a1)
{
  if (!a1)
    return 0xFFFFFFFFLL;
  if (CFStringCompare(a1, CFSTR("zh"), 0) == kCFCompareEqualTo)
    return 26;
  if (CFStringCompare(a1, CFSTR("sh"), 0) == kCFCompareEqualTo)
    return 27;
  if (CFStringCompare(a1, CFSTR("ch"), 0))
    return CFStringGetCharacterAtIndex(a1, 0) - 97;
  return 28;
}

uint64_t sub_20B8F04CC(UniChar theChar)
{
  const __CFCharacterSet *v2;
  CFRange v4;
  CFRange v5;
  CFRange v6;
  CFRange v7;

  v2 = (const __CFCharacterSet *)qword_25472B630;
  if (!qword_25472B630)
  {
    qword_25472B630 = (uint64_t)CFCharacterSetCreateMutable(0);
    v4.location = 12549;
    v4.length = 37;
    CFCharacterSetAddCharactersInRange((CFMutableCharacterSetRef)qword_25472B630, v4);
    v5.location = 713;
    v5.length = 3;
    CFCharacterSetAddCharactersInRange((CFMutableCharacterSetRef)qword_25472B630, v5);
    v6.location = 711;
    v6.length = 1;
    CFCharacterSetAddCharactersInRange((CFMutableCharacterSetRef)qword_25472B630, v6);
    v7.location = 729;
    v7.length = 1;
    CFCharacterSetAddCharactersInRange((CFMutableCharacterSetRef)qword_25472B630, v7);
    v2 = (const __CFCharacterSet *)qword_25472B630;
  }
  return CFCharacterSetIsCharacterMember(v2, theChar);
}

uint64_t sub_20B8F0540(const char *a1)
{
  int v1;

  v1 = *a1;
  if (!*a1)
    return 0xFFFFFFFFLL;
  if (!strcmp(a1, "zh"))
    return 26;
  if (!strcmp(a1, "sh"))
    return 27;
  if (!strcmp(a1, "ch"))
    return 28;
  return (v1 - 97);
}

uint64_t sub_20B8F05C0(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6;

  v6 = sub_20B9D8594(a1, a2, 0, a3);
  *(_QWORD *)v6 = &off_24C462AB0;
  *(_DWORD *)(v6 + 108) = a4;
  *(_QWORD *)(v6 + 136) = 0;
  *(_QWORD *)(v6 + 112) = -1;
  *(_QWORD *)(v6 + 120) = 0;
  *(_QWORD *)(v6 + 126) = 0;
  *(_QWORD *)(a1 + 144) = sub_20B8F0654(v6);
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_QWORD *)(a1 + 40) = 8;
  return a1;
}

void sub_20B8F0640(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B9D8644(v1);
  _Unwind_Resume(a1);
}

__CFString *sub_20B8F0654(uint64_t a1)
{
  const __CFArray *v2;
  CFIndex Count;
  unint64_t v4;
  __CFString *Mutable;
  uint64_t v6;
  CFIndex v7;
  CFIndex v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  const __CFString *v20;

  v2 = *(const __CFArray **)(*(_QWORD *)(a1 + 8) + 16);
  if (!v2)
    return 0;
  Count = CFArrayGetCount(v2);
  if (Count < 1)
    return 0;
  v4 = Count;
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0);
  v6 = 15;
  if (v4 >= 0xF)
  {
    v7 = v4 - 15;
  }
  else
  {
    v6 = v4;
    v7 = 0;
  }
  v8 = v7 + v6;
  do
  {
    v9 = (void *)sub_20B96AAF4(*(_QWORD *)(a1 + 8), v7);
    v12 = objc_msgSend_rawCandidate(v9, v10, v11);
    if (!v12)
      break;
    v13 = (_QWORD *)v12;
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12) ? 40 : 24;
    if (!(*(uint64_t (**)(_QWORD *))(*v13 + v14))(v13))
      break;
    v17 = objc_msgSend_rawCandidate(v9, v15, v16);
    if (v17)
    {
      v18 = (_QWORD *)v17;
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17) ? 40 : 24;
      v20 = (const __CFString *)(*(uint64_t (**)(_QWORD *))(*v18 + v19))(v18);
    }
    else
    {
      v20 = 0;
    }
    CFStringAppend(Mutable, v20);
    ++v7;
  }
  while (v7 < v8);
  return Mutable;
}

uint64_t sub_20B8F077C(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  *a1 = &off_24C462AB0;
  v2 = (const void *)a1[17];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[18];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[19];
  if (v4)
    CFRelease(v4);
  v5 = a1[32];
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  v6 = (void *)a1[29];
  if (v6)
  {
    a1[30] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[26];
  if (v7)
  {
    a1[27] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[23];
  if (v8)
  {
    a1[24] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[20];
  if (v9)
  {
    a1[21] = v9;
    operator delete(v9);
  }
  return sub_20B9D8644((uint64_t)a1);
}

void sub_20B8F0828(_QWORD *a1)
{
  sub_20B8F077C(a1);
  JUMPOUT(0x20BD39CB0);
}

void sub_20B8F084C(uint64_t a1@<X0>, void **a2@<X8>)
{
  const __CFArray *v4;
  uint64_t Count;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if ((*(_BYTE *)(a1 + 108) & 4) != 0)
  {
    v27 = operator new();
    sub_20B872064(v27, *(const __CFString **)(a1 + 144), *(_QWORD *)(a1 + 24), 1);
    *(_QWORD *)(a1 + 256) = v27;
    v28 = (unint64_t)a2[2];
    v29 = (uint64_t *)a2[1];
    if ((unint64_t)v29 >= v28)
    {
      v31 = ((char *)v29 - (_BYTE *)*a2) >> 3;
      if ((unint64_t)(v31 + 1) >> 61)
        sub_20B80CDD8();
      v32 = v28 - (_QWORD)*a2;
      v33 = v32 >> 2;
      if (v32 >> 2 <= (unint64_t)(v31 + 1))
        v33 = v31 + 1;
      if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
        v34 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v34 = v33;
      if (v34)
      {
        v35 = (char *)sub_20B800BE8((uint64_t)(a2 + 2), v34);
        v27 = *(_QWORD *)(a1 + 256);
      }
      else
      {
        v35 = 0;
      }
      v36 = (uint64_t *)&v35[8 * v31];
      v37 = &v35[8 * v34];
      *v36 = v27;
      v30 = v36 + 1;
      v39 = (char *)*a2;
      v38 = (char *)a2[1];
      if (v38 != *a2)
      {
        do
        {
          v40 = *((_QWORD *)v38 - 1);
          v38 -= 8;
          *--v36 = v40;
        }
        while (v38 != v39);
        v38 = (char *)*a2;
      }
      *a2 = v36;
      a2[1] = v30;
      a2[2] = v37;
      if (v38)
        operator delete(v38);
    }
    else
    {
      *v29 = v27;
      v30 = v29 + 1;
    }
    a2[1] = v30;
  }
  else
  {
    v4 = *(const __CFArray **)(*(_QWORD *)(a1 + 8) + 16);
    if (v4)
    {
      Count = CFArrayGetCount(v4);
      if (Count >= 1)
      {
        do
        {
          if (*(_QWORD *)(a1 + 32) <= (unint64_t)(((_BYTE *)a2[1] - (_BYTE *)*a2) >> 3))
            break;
          v6 = Count--;
          v7 = (void *)sub_20B96AAF4(*(_QWORD *)(a1 + 8), Count);
          v10 = v7;
          if (v7 && objc_msgSend_rawCandidate(v7, v8, v9))
          {
            v13 = objc_msgSend_rawCandidate(v10, v11, v12);
            v14 = v13;
            v16 = (uint64_t *)a2[1];
            v15 = (unint64_t)a2[2];
            if ((unint64_t)v16 >= v15)
            {
              v18 = ((char *)v16 - (_BYTE *)*a2) >> 3;
              if ((unint64_t)(v18 + 1) >> 61)
                sub_20B80CDD8();
              v19 = v15 - (_QWORD)*a2;
              v20 = v19 >> 2;
              if (v19 >> 2 <= (unint64_t)(v18 + 1))
                v20 = v18 + 1;
              if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
                v21 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v21 = v20;
              if (v21)
                v22 = (char *)sub_20B800BE8((uint64_t)(a2 + 2), v21);
              else
                v22 = 0;
              v23 = (uint64_t *)&v22[8 * v18];
              *v23 = v14;
              v17 = v23 + 1;
              v25 = (char *)*a2;
              v24 = (char *)a2[1];
              if (v24 != *a2)
              {
                do
                {
                  v26 = *((_QWORD *)v24 - 1);
                  v24 -= 8;
                  *--v23 = v26;
                }
                while (v24 != v25);
                v24 = (char *)*a2;
              }
              *a2 = v23;
              a2[1] = v17;
              a2[2] = &v22[8 * v21];
              if (v24)
                operator delete(v24);
            }
            else
            {
              *v16 = v13;
              v17 = v16 + 1;
            }
            a2[1] = v17;
          }
        }
        while (v6 > 1);
      }
    }
  }
}

void sub_20B8F0AAC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B8F0AF8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const __CFString *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const __CFAllocator *v9;
  _DWORD *v10;
  const __CFString *v11;
  CFIndex v12;
  CFStringRef v13;
  int v14;
  uint64_t v15;
  const __CFString *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  const __CFArray *v20;
  CFIndex Count;
  CFMutableStringRef Mutable;
  uint64_t v23;
  const __CFString *ValueAtIndex;
  CFIndex Length;
  const __CFAllocator *v26;
  uint64_t v27;
  CFIndex v28;
  const __CFString *v29;
  CFIndex v30;
  CFIndex v31;
  __CFString *v32;
  int v33;
  int v34;
  unint64_t v35;
  _DWORD *v36;
  _DWORD *v37;
  _DWORD *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  int v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  unint64_t v50;
  const __CFString *v51;
  CFIndex v52;
  char v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  CFIndex v57;
  const __CFString *v58;
  uint64_t v59;
  uint64_t v60;
  CFStringRef Copy;
  const __CFAllocator *v62;
  const __CFString *v63;
  const __CFString *v64;
  const __CFString *v65;
  CFIndex v66;
  const __CFString *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t *v70;
  _QWORD *v71;
  const __CFArray *v72;
  CFIndex v73;
  CFIndex v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  CFIndex v79;
  CFIndex *v80;
  uint64_t v81;
  uint64_t v82;
  CFIndex *v83;
  CFIndex v84;
  void **v85;
  CFIndex v86;
  unint64_t v87;
  char *v88;
  _QWORD *v89;
  char *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  CFIndex *v96;
  CFIndex v97;
  unint64_t v98;
  char *v99;
  _QWORD *v100;
  char *v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  char *v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  char *v111;
  uint64_t v112;
  void *v113;
  const char *v114;
  uint64_t v115;
  void *v116;
  const char *v117;
  uint64_t v118;
  uint64_t v119;
  const __CFString *v120;
  void *v121;
  const char *v122;
  uint64_t v123;
  const char *v124;
  uint64_t v125;
  uint64_t v126;
  const char *v127;
  uint64_t v128;
  uint64_t *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  const void *v133;
  const __CFString *v134;
  const __CFString *v135;
  const __CFAllocator *v136;
  const __CFString *v137;
  CFIndex v138;
  uint64_t v139;
  int *v140;
  uint64_t v141;
  uint64_t v142;
  unsigned int *v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t *v148;
  _QWORD *v149;
  unint64_t *v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  char *v155;
  unint64_t *v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  char *v160;
  _QWORD *v161;
  char *v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  unint64_t v170;
  CFIndex v171;
  uint64_t v172;
  void *v173;
  const char *v174;
  uint64_t v175;
  uint64_t v176;
  const __CFString *v177;
  CFIndex v178;
  const __CFString *v179;
  uint64_t i;
  uint64_t v181;
  unsigned int *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  void **v194;
  void **v195;
  _QWORD *v196;
  const __CFString *v197;
  uint64_t v198;
  unsigned int v199;
  const __CFAllocator *v200;
  CFIndex v201;
  uint64_t *v202;
  CFIndex v203;
  uint64_t v204;
  uint64_t v205;
  void *v206;
  CFIndex **v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t *v211;
  uint64_t v212;
  uint64_t v213;
  CFIndex *v214;
  uint64_t v215;
  uint64_t v216;
  void *v217;
  CFIndex *v218;
  uint64_t v219;
  CFRange v220;
  CFRange v221;

  sub_20B9D8B5C(a1);
  *(_BYTE *)(a1 + 104) = 0;
  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
    return;
  if (*(_DWORD *)(v2 + 64) == 21)
  {
LABEL_6:
    *(_WORD *)(a1 + 131) = 257;
    return;
  }
  v3 = sub_20B9D9040(a1);
  if (!v3)
    goto LABEL_68;
  v4 = v3;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3) == 6
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4) == 7)
  {
    goto LABEL_6;
  }
  if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4))
  {
LABEL_68:
    *(_BYTE *)(a1 + 128) = 1;
    return;
  }
  v5 = *(const __CFString **)(a1 + 144);
  if (v5 && CFStringGetLength(v5) >= 1)
  {
    v6 = operator new();
    sub_20B872064(v6, *(const __CFString **)(a1 + 144), *(_QWORD *)(a1 + 24), 0);
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6);
    sub_20B873120(a1 + 232, v7 + 1);
    **(_DWORD **)(a1 + 232) = 1;
    if (v7)
    {
      v8 = 0;
      v9 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      do
      {
        v10 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 120))(v6, v8);
        v11 = *(const __CFString **)(a1 + 144);
        v220.location = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v10 + 24))(v10);
        v220.length = v12;
        v13 = CFStringCreateWithSubstring(v9, v11, v220);
        if (!v13 || (v14 = sub_20B9C4738(), CFRelease(v13), !v14))
          v14 = v10[2];
        *(_DWORD *)(*(_QWORD *)(a1 + 232) + 4 * v8++ + 4) = v14;
      }
      while (v7 != v8);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  }
  if ((*(_BYTE *)(a1 + 108) & 8) == 0
    && (v15 = sub_20B9D9040(a1), (*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 72))(v15) != 6)
    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 72))(v15) != 7
    && (v16 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15)) != 0
    && CFStringGetLength(v16)
    && (v17 = *(_QWORD *)(a1 + 24), (v18 = *(unsigned int **)(v17 + 40)) != 0)
    && (sub_20B87646C(*(_QWORD *)(v17 + 40)), v19 = atomic_load(v18 + 10), v19 == 2)
    && (v198 = *(_QWORD *)v18) != 0)
  {
    v20 = *(const __CFArray **)(a1 + 96);
    Count = CFArrayGetCount(v20);
    v200 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0);
    v203 = (CFIndex)Mutable;
    if (Count >= 1)
    {
      v23 = 0;
      do
      {
        ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v20, Count + v23 - 1);
        if (!sub_20B896464(ValueAtIndex))
          break;
        if (v23)
          CFStringInsert(Mutable, 0, CFSTR(" "));
        CFStringInsert(Mutable, 0, ValueAtIndex);
        --v23;
      }
      while (Count + v23 > 0);
    }
    Length = CFStringGetLength(Mutable);
    v26 = v200;
    if (!Length)
      goto LABEL_180;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 48);
    v196 = (_QWORD *)(a1 + 48);
    v27 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 104);
    (*(void (**)(uint64_t, CFMutableStringRef, _QWORD, CFIndex))(*(_QWORD *)v27 + 16))(v27, Mutable, 0, Length);
    CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 96));
    do
    {
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v27 + 24))(v27))
        break;
      v221.location = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 32))(v27);
      v221.length = v28;
      v29 = CFStringCreateWithSubstring(v26, Mutable, v221);
      v30 = 0;
      v214 = (CFIndex *)v29;
      while (1)
      {
        v31 = CFStringGetLength(v29);
        if (v31 <= v30)
          break;
        if ((CFStringGetCharacterAtIndex(v29, v30) & 0xF800 | 0x400) == 0xDC00)
        {
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 48);
          CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 96));
          goto LABEL_61;
        }
        ++v30;
      }
      v32 = CFStringCompare(v29, CFSTR("i"), 0) ? (__CFString *)v29 : CFSTR("I");
      v33 = (*(uint64_t (**)(uint64_t, __CFString *))(*(_QWORD *)v198 + 16))(v198, v32);
      v34 = v33;
      v36 = *(_DWORD **)(a1 + 56);
      v35 = *(_QWORD *)(a1 + 64);
      if ((unint64_t)v36 >= v35)
      {
        v38 = (_DWORD *)*v196;
        v39 = ((uint64_t)v36 - *v196) >> 2;
        v40 = v39 + 1;
        if ((unint64_t)(v39 + 1) >> 62)
          sub_20B80CDD8();
        v41 = v35 - (_QWORD)v38;
        if (v41 >> 1 > v40)
          v40 = v41 >> 1;
        if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL)
          v42 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v42 = v40;
        if (v42)
        {
          v43 = (char *)sub_20B8127BC(a1 + 64, v42);
          v38 = *(_DWORD **)(a1 + 48);
          v36 = *(_DWORD **)(a1 + 56);
        }
        else
        {
          v43 = 0;
        }
        v44 = &v43[4 * v39];
        *(_DWORD *)v44 = v34;
        v37 = v44 + 4;
        if (v36 == v38)
        {
          v26 = v200;
        }
        else
        {
          v26 = v200;
          do
          {
            v45 = *--v36;
            *((_DWORD *)v44 - 1) = v45;
            v44 -= 4;
          }
          while (v36 != v38);
        }
        *(_QWORD *)(a1 + 48) = v44;
        *(_QWORD *)(a1 + 56) = v37;
        *(_QWORD *)(a1 + 64) = &v43[4 * v42];
        if (v38)
          operator delete(v38);
      }
      else
      {
        *v36 = v33;
        v37 = v36 + 1;
        v26 = v200;
      }
      *(_QWORD *)(a1 + 56) = v37;
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 96), v29);
LABEL_61:
      if (v29)
        CFRelease(v29);
    }
    while (v31 <= v30);
    v46 = *(char **)(a1 + 48);
    v47 = *(_QWORD *)(a1 + 56);
    v48 = (v47 - (uint64_t)v46) >> 2;
    if (v48 && (v48 != 1 || *(_DWORD *)(v47 - 4)))
    {
      sub_20B873328((uint64_t)v196, v46, byte_20BA44ACC);
      CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(a1 + 96), 0, &stru_24C4B3660);
      v49 = 1;
    }
    else
    {
LABEL_180:
      v49 = 0;
    }
    if (Mutable)
      CFRelease(Mutable);
  }
  else
  {
    v49 = 0;
  }
  *(_BYTE *)(a1 + 104) = v49;
  v50 = atomic_load(&qword_25472B638);
  if (v50 != -1)
  {
    v203 = (CFIndex)&v210;
    v214 = &v203;
    std::__call_once(&qword_25472B638, &v214, (void (__cdecl *)(void *))sub_20B8F2220);
  }
  v51 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v214 = 0;
  v215 = (uint64_t)&v214;
  v216 = 0x2000000000;
  LOBYTE(v217) = 1;
  v52 = MEMORY[0x24BDAC760];
  v203 = MEMORY[0x24BDAC760];
  v204 = 0x40000000;
  v205 = (uint64_t)sub_20B8F2130;
  v206 = &unk_24C49BD88;
  v207 = &v214;
  v208 = (uint64_t)v51;
  sub_20B8D0C18(v51, 1, (uint64_t)&v203);
  v53 = *(_BYTE *)(v215 + 24);
  _Block_object_dispose(&v214, 8);
  *(_BYTE *)(a1 + 128) = v53;
  v54 = sub_20B9D9040(a1);
  v55 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v54 + 72))(v54);
  v56 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v54 + 24))(v54);
  v57 = -1;
  if (v56 && v55 != 5)
  {
    v58 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v54 + 24))(v54);
    v57 = CFStringGetLength(v58);
  }
  *(_QWORD *)(a1 + 112) = v57;
  if ((v55 - 4) >= 0xFFFFFFFE)
  {
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v54 + 192))(v54))
    {
      v59 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v54 + 192))(v54);
      v60 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v54 + 184))(v54);
      Copy = CFStringCreateWithFormat(0, 0, CFSTR("%@%@"), v59, v60);
    }
    else
    {
      v62 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v63 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v54 + 184))(v54);
      Copy = CFStringCreateCopy(v62, v63);
    }
    *(_QWORD *)(a1 + 136) = Copy;
    if (v55 == 3)
    {
      *(_BYTE *)(a1 + 129) = ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v54 + 104))(v54) & 0x18) != 0;
      *(_BYTE *)(a1 + 130) = ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v54 + 104))(v54) & 0x400) != 0;
      *(_QWORD *)(a1 + 120) = CFStringGetLength(*(CFStringRef *)(a1 + 136));
    }
  }
  if (*(_BYTE *)(a1 + 130))
    *(_WORD *)(a1 + 131) = 257;
  if (*(uint64_t *)(a1 + 120) <= 0)
  {
    v72 = *(const __CFArray **)(*(_QWORD *)(a1 + 8) + 16);
    if (v72)
    {
      v73 = CFArrayGetCount(v72);
      if (v73)
      {
        v74 = v73;
        v75 = sub_20B9D9040(a1);
        if (v75)
        {
          v76 = v75;
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v75 + 72))(v75) == 5)
            goto LABEL_85;
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v76 + 72))(v76) == 2)
          {
LABEL_101:
            v78 = *(_QWORD *)(a1 + 8);
            if (*(_QWORD *)(v78 + 16))
            {
              v79 = CFArrayGetCount(*(CFArrayRef *)(v78 + 16));
              v78 = *(_QWORD *)(a1 + 8);
            }
            else
            {
              v79 = 0;
            }
            v121 = (void *)sub_20B96AAF4(v78, v79 - 1);
            if (MecabraCandidateIsEmojiCandidate(v121, v122, v123)
              || (v126 = objc_msgSend_rawCandidate(v121, v124, v125),
                  (*(unsigned int (**)(uint64_t))(*(_QWORD *)v126 + 72))(v126) == 6)
              || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v126 + 72))(v126) == 7)
            {
              *(_BYTE *)(a1 + 131) = 1;
            }
            else
            {
              v193 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 32) + 32);
              v133 = (const void *)objc_msgSend_rawCandidate(v121, v127, v128);
              v134 = sub_20B9D90A4(a1, v133);
              v135 = v134;
              if (!v134)
              {
                v136 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
                v137 = (const __CFString *)(*(uint64_t (**)(const void *))(*(_QWORD *)v133 + 24))(v133);
                v134 = CFStringCreateCopy(v136, v137);
              }
              *(_QWORD *)(a1 + 152) = v134;
              *(_BYTE *)(a1 + 133) = v135 != 0;
              v138 = CFStringGetLength(v134);
              v139 = (*(uint64_t (**)(const void *))(*(_QWORD *)v133 + 48))(v133);
              v140 = *(int **)(a1 + 24);
              v202 = *(uint64_t **)(*((_QWORD *)v140 + 9) + 8);
              v199 = *v140;
              v197 = (const __CFString *)(*(uint64_t (**)(const void *))(*(_QWORD *)v133 + 32))(v133);
              if (v139)
              {
                v141 = 0;
                v194 = (void **)(a1 + 184);
                v195 = (void **)(a1 + 160);
                while (1)
                {
                  v142 = (*(uint64_t (**)(const void *, uint64_t))(*(_QWORD *)v133 + 120))(v133, v141);
                  if (!v142)
                    break;
                  v143 = (unsigned int *)v142;
                  v144 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v142 + 24))(v142);
                  if (v144 < 0 || v144 + v145 > v138)
                    break;
                  v146 = v138 - (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v143 + 24))(v143);
                  if (v146 <= 0xE)
                  {
                    v203 = 0;
                    v204 = (uint64_t)&v203;
                    v205 = 0x2000000000;
                    v206 = 0;
                    v214 = (CFIndex *)v52;
                    v215 = 0x40000000;
                    v216 = (uint64_t)sub_20B8F1D38;
                    v217 = &unk_24C46C1E8;
                    v218 = &v203;
                    v219 = a1;
                    sub_20B9AA4E4(v143, v202, v199, v197, 0, 0, (uint64_t)&v214);
                    v148 = *(unint64_t **)(a1 + 168);
                    v147 = *(_QWORD *)(a1 + 176);
                    if ((unint64_t)v148 >= v147)
                    {
                      v150 = (unint64_t *)*v195;
                      v151 = ((char *)v148 - (_BYTE *)*v195) >> 3;
                      v152 = v151 + 1;
                      if ((unint64_t)(v151 + 1) >> 61)
                        goto LABEL_257;
                      v153 = v147 - (_QWORD)v150;
                      if (v153 >> 2 > v152)
                        v152 = v153 >> 2;
                      if ((unint64_t)v153 >= 0x7FFFFFFFFFFFFFF8)
                        v154 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v154 = v152;
                      if (v154)
                      {
                        v155 = (char *)sub_20B800BE8(a1 + 176, v154);
                        v150 = *(unint64_t **)(a1 + 160);
                        v148 = *(unint64_t **)(a1 + 168);
                      }
                      else
                      {
                        v155 = 0;
                      }
                      v156 = (unint64_t *)&v155[8 * v151];
                      *v156 = v146;
                      v149 = v156 + 1;
                      while (v148 != v150)
                      {
                        v157 = *--v148;
                        *--v156 = v157;
                      }
                      *(_QWORD *)(a1 + 160) = v156;
                      *(_QWORD *)(a1 + 168) = v149;
                      *(_QWORD *)(a1 + 176) = &v155[8 * v154];
                      if (v150)
                        operator delete(v150);
                    }
                    else
                    {
                      *v148 = v146;
                      v149 = v148 + 1;
                    }
                    *(_QWORD *)(a1 + 168) = v149;
                    v158 = v204;
                    v160 = *(char **)(a1 + 192);
                    v159 = *(_QWORD *)(a1 + 200);
                    if ((unint64_t)v160 >= v159)
                    {
                      v162 = (char *)*v194;
                      v163 = (v160 - (_BYTE *)*v194) >> 3;
                      v164 = v163 + 1;
                      if ((unint64_t)(v163 + 1) >> 61)
LABEL_257:
                        sub_20B80CDD8();
                      v165 = v159 - (_QWORD)v162;
                      if (v165 >> 2 > v164)
                        v164 = v165 >> 2;
                      if ((unint64_t)v165 >= 0x7FFFFFFFFFFFFFF8)
                        v166 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v166 = v164;
                      if (v166)
                      {
                        v167 = (char *)sub_20B800BE8(a1 + 200, v166);
                        v162 = *(char **)(a1 + 184);
                        v160 = *(char **)(a1 + 192);
                      }
                      else
                      {
                        v167 = 0;
                      }
                      v168 = &v167[8 * v163];
                      *(_QWORD *)v168 = *(_QWORD *)(v158 + 24);
                      v161 = v168 + 8;
                      while (v160 != v162)
                      {
                        v169 = *((_QWORD *)v160 - 1);
                        v160 -= 8;
                        *((_QWORD *)v168 - 1) = v169;
                        v168 -= 8;
                      }
                      *(_QWORD *)(a1 + 184) = v168;
                      *(_QWORD *)(a1 + 192) = v161;
                      *(_QWORD *)(a1 + 200) = &v167[8 * v166];
                      if (v162)
                        operator delete(v162);
                    }
                    else
                    {
                      *(_QWORD *)v160 = *(_QWORD *)(v204 + 24);
                      v161 = v160 + 8;
                    }
                    *(_QWORD *)(a1 + 192) = v161;
                    _Block_object_dispose(&v203, 8);
                  }
                  if (++v141 == v139)
                    goto LABEL_229;
                }
                CFRelease(*(CFTypeRef *)(a1 + 152));
                *(_QWORD *)(a1 + 152) = 0;
                *(_BYTE *)(a1 + 131) = 1;
              }
LABEL_229:
              if (*(_QWORD *)(a1 + 152) && (unint64_t)v138 <= 0xE)
              {
                v210 = 0;
                v211 = &v210;
                v212 = 0x2000000000;
                v213 = 0;
                v170 = v193 - 1;
                if (v193 != 1)
                {
                  v171 = v79 - v170;
                  if ((v171 & 0x8000000000000000) == 0)
                  {
                    v172 = 1;
                    do
                    {
                      v173 = (void *)sub_20B96AAF4(*(_QWORD *)(a1 + 8), v171);
                      v176 = objc_msgSend_rawCandidate(v173, v174, v175);
                      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v176 + 72))(v176) == 3
                        || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v176 + 72))(v176) == 6
                        || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v176 + 72))(v176) == 7)
                      {
                        break;
                      }
                      v177 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v176 + 32))(v176);
                      v178 = CFStringGetLength(v177);
                      v179 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v176 + 32))(v176);
                      for (i = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v176 + 48))(v176) - 1; ; --i)
                      {
                        if (i < 0 || v211[3] >= v170)
                        {
                          v185 = v172;
                          goto LABEL_246;
                        }
                        v181 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v176 + 120))(v176, i);
                        v182 = (unsigned int *)v181;
                        if (!v181)
                          break;
                        v183 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v181 + 24))(v181);
                        v185 = 0;
                        if (v183 < 0 || v183 + v184 > v178)
                          goto LABEL_246;
                        v203 = v52;
                        v204 = 0x40000000;
                        v205 = (uint64_t)sub_20B8F1E30;
                        v206 = &unk_24C49BD60;
                        v207 = (CFIndex **)&v210;
                        v208 = a1;
                        v209 = v193 - 1;
                        sub_20B9AA4E4(v182, v202, v199, v179, 0, 1, (uint64_t)&v203);
                      }
                      v185 = 0;
LABEL_246:
                      if (v171-- < 1)
                        break;
                      if (v211[3] >= v170)
                        break;
                      v172 = v185;
                    }
                    while ((v185 & 1) != 0);
                  }
                }
                _Block_object_dispose(&v210, 8);
              }
              v187 = *(_QWORD *)(a1 + 184);
              v188 = *(_QWORD *)(a1 + 192) - v187;
              if (v188 >= 9)
              {
                v189 = (unint64_t)v188 >> 3;
                v190 = *(_QWORD *)((v188 & 0xFFFFFFFFFFFFFFF8) + v187 - 8);
                v191 = v187 - 16;
                do
                {
                  v190 += *(_QWORD *)(v191 + 8 * v189);
                  *(_QWORD *)(v191 + 8 * v189) = v190;
                  v192 = v189 - 2;
                  --v189;
                }
                while (v192 > 0);
              }
            }
            return;
          }
        }
        v77 = *(_DWORD *)(a1 + 108);
        if (v74 == 1 && (v77 & 4) == 0)
          goto LABEL_101;
        v112 = (v74 - 2) & ~((v74 - 2) >> 63);
        if (v74 - 1 >= v112)
        {
          while (1)
          {
            v113 = (void *)sub_20B96AAF4(*(_QWORD *)(a1 + 8), --v74);
            if (v113)
            {
              v116 = v113;
              if (objc_msgSend_rawCandidate(v113, v114, v115))
              {
                v119 = objc_msgSend_rawCandidate(v116, v117, v118);
                v120 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v119 + 24))(v119);
                if (sub_20B8D1450(v120) > 1)
                  break;
              }
            }
            if (v74 <= v112)
              goto LABEL_85;
          }
          if ((v77 & 4) == 0)
            goto LABEL_101;
        }
      }
    }
  }
LABEL_85:
  v64 = *(const __CFString **)(a1 + 144);
  if (!v64)
  {
    *(_QWORD *)(a1 + 152) = 0;
    return;
  }
  v65 = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], v64);
  *(_QWORD *)(a1 + 152) = v65;
  if (v65 && CFStringGetLength(v65))
  {
    v66 = CFStringGetLength(*(CFStringRef *)(a1 + 152));
    v67 = *(const __CFString **)(a1 + 152);
    if (v67)
    {
      v68 = *(_QWORD *)(a1 + 120);
      if (v68 >= 1)
      {
        if (*(_BYTE *)(a1 + 129) || *(_QWORD *)(a1 + 136) && (*(_BYTE *)(a1 + 108) & 8) != 0)
          *(_BYTE *)(a1 + 132) = 1;
        v69 = *(_QWORD *)(a1 + 176);
        v70 = *(uint64_t **)(a1 + 168);
        if ((unint64_t)v70 < v69)
        {
          *v70 = v68;
          v71 = v70 + 1;
LABEL_138:
          v100 = v71;
LABEL_179:
          *(_QWORD *)(a1 + 168) = v100;
          return;
        }
        v101 = *(char **)(a1 + 160);
        v102 = ((char *)v70 - v101) >> 3;
        if (!((unint64_t)(v102 + 1) >> 61))
        {
          v103 = v69 - (_QWORD)v101;
          v104 = (uint64_t)(v69 - (_QWORD)v101) >> 2;
          if (v104 <= v102 + 1)
            v104 = v102 + 1;
          if (v103 >= 0x7FFFFFFFFFFFFFF8)
            v105 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v105 = v104;
          if (v105)
          {
            v106 = (char *)sub_20B800BE8(a1 + 176, v105);
            v101 = *(char **)(a1 + 160);
            v70 = *(uint64_t **)(a1 + 168);
          }
          else
          {
            v106 = 0;
          }
          v129 = (uint64_t *)&v106[8 * v102];
          v130 = &v106[8 * v105];
          *v129 = v68;
          v100 = v129 + 1;
          while (v70 != (uint64_t *)v101)
          {
            v131 = *--v70;
            *--v129 = v131;
          }
LABEL_177:
          *(_QWORD *)(a1 + 160) = v129;
          *(_QWORD *)(a1 + 168) = v100;
          *(_QWORD *)(a1 + 176) = v130;
          if (v101)
            operator delete(v101);
          goto LABEL_179;
        }
        goto LABEL_255;
      }
    }
    if ((*(_BYTE *)(a1 + 108) & 2) != 0)
    {
      v82 = -1;
    }
    else
    {
      v203 = 0;
      sub_20B8D0624(v67, &v203, &v214);
      v80 = v214;
      if (v203 < 2)
      {
LABEL_109:
        v82 = -1;
      }
      else
      {
        v81 = 0;
        v82 = 0;
        v83 = v214;
        while (1)
        {
          LMLexiconGetCursorByAdvancingWithCharacters();
          if ((LMLexiconCursorHasEntries() & 1) != 0)
            break;
          ++v82;
          --v81;
          v83 = (CFIndex *)((char *)v83 + 2);
          if (v82 >= v203 - 1)
            goto LABEL_109;
        }
      }
      if (v80)
        MEMORY[0x20BD39C80](v80, 0x1000C80BDFB0063);
    }
    v201 = v66 - v82;
    if (v82 == -1)
      v84 = 0;
    else
      v84 = v66 - v82;
    if (v66 > v84)
    {
      v85 = (void **)(a1 + 160);
      v86 = v66;
      do
      {
        v88 = *(char **)(a1 + 168);
        v87 = *(_QWORD *)(a1 + 176);
        if ((unint64_t)v88 >= v87)
        {
          v90 = (char *)*v85;
          v91 = (v88 - (_BYTE *)*v85) >> 3;
          v92 = v91 + 1;
          if ((unint64_t)(v91 + 1) >> 61)
            sub_20B80CDD8();
          v93 = v87 - (_QWORD)v90;
          if (v93 >> 2 > v92)
            v92 = v93 >> 2;
          if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFF8)
            v94 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v94 = v92;
          if (v94)
          {
            v95 = (char *)sub_20B800BE8(a1 + 176, v94);
            v90 = *(char **)(a1 + 160);
            v88 = *(char **)(a1 + 168);
          }
          else
          {
            v95 = 0;
          }
          v96 = (CFIndex *)&v95[8 * v91];
          *v96 = v86;
          v89 = v96 + 1;
          while (v88 != v90)
          {
            v97 = *((_QWORD *)v88 - 1);
            v88 -= 8;
            *--v96 = v97;
          }
          *(_QWORD *)(a1 + 160) = v96;
          *(_QWORD *)(a1 + 168) = v89;
          *(_QWORD *)(a1 + 176) = &v95[8 * v94];
          if (v90)
            operator delete(v90);
        }
        else
        {
          *(_QWORD *)v88 = v86;
          v89 = v88 + 8;
        }
        *(_QWORD *)(a1 + 168) = v89;
        v86 -= CFStringGetRangeOfComposedCharactersAtIndex((CFStringRef)*(_QWORD *)(a1 + 152), v66 - v86).length;
      }
      while (v86 > v84);
    }
    if (v82 != -1)
    {
      v98 = *(_QWORD *)(a1 + 176);
      v99 = *(char **)(a1 + 168);
      if ((unint64_t)v99 < v98)
      {
        *(_QWORD *)v99 = v201;
        v71 = v99 + 8;
        goto LABEL_138;
      }
      v101 = *(char **)(a1 + 160);
      v107 = (v99 - v101) >> 3;
      if (!((unint64_t)(v107 + 1) >> 61))
      {
        v108 = v98 - (_QWORD)v101;
        v109 = (uint64_t)(v98 - (_QWORD)v101) >> 2;
        if (v109 <= v107 + 1)
          v109 = v107 + 1;
        if (v108 >= 0x7FFFFFFFFFFFFFF8)
          v110 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v110 = v109;
        if (v110)
        {
          v111 = (char *)sub_20B800BE8(a1 + 176, v110);
          v101 = *(char **)(a1 + 160);
          v99 = *(char **)(a1 + 168);
        }
        else
        {
          v111 = 0;
        }
        v129 = (uint64_t *)&v111[8 * v107];
        v130 = &v111[8 * v110];
        *v129 = v201;
        v100 = v129 + 1;
        while (v99 != v101)
        {
          v132 = *((_QWORD *)v99 - 1);
          v99 -= 8;
          *--v129 = v132;
        }
        goto LABEL_177;
      }
LABEL_255:
      sub_20B80CDD8();
    }
  }
}

void sub_20B8F1C38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20B8A89DC((const void **)va, 0);
  _Unwind_Resume(a1);
}

void sub_20B8F1D38(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  _QWORD *v6;
  char *v7;
  unint64_t v8;
  _DWORD *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;

  v6 = *(_QWORD **)(a1 + 40);
  v7 = (char *)v6[27];
  v8 = v6[28];
  if ((unint64_t)v7 >= v8)
  {
    v10 = (char *)v6[26];
    v11 = (v7 - v10) >> 2;
    if ((unint64_t)(v11 + 1) >> 62)
      sub_20B80CDD8();
    v12 = v8 - (_QWORD)v10;
    v13 = (uint64_t)(v8 - (_QWORD)v10) >> 1;
    if (v13 <= v11 + 1)
      v13 = v11 + 1;
    if (v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
    {
      v15 = (char *)sub_20B8127BC((uint64_t)(v6 + 28), v14);
      v10 = (char *)v6[26];
      v7 = (char *)v6[27];
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[4 * v11];
    v17 = &v15[4 * v14];
    *(_DWORD *)v16 = a4;
    v9 = v16 + 4;
    while (v7 != v10)
    {
      v18 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v16 - 1) = v18;
      v16 -= 4;
    }
    v6[26] = v16;
    v6[27] = v9;
    v6[28] = v17;
    if (v10)
      operator delete(v10);
  }
  else
  {
    *(_DWORD *)v7 = a4;
    v9 = v7 + 4;
  }
  v6[27] = v9;
  ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
}

void sub_20B8F1E30(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, _BYTE *a5)
{
  uint64_t v7;
  char *v8;
  unint64_t v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char **v21;
  char *v22;
  unint64_t v23;
  char *v24;
  char *v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  int64_t v42;
  void *v43;
  uint64_t v44;
  unint64_t v45;
  int v46;

  v46 = a4;
  v7 = a1[5];
  sub_20B873328(v7 + 208, *(char **)(v7 + 208), (char *)&v46);
  v8 = *(char **)(v7 + 192);
  v9 = *(_QWORD *)(v7 + 200);
  if ((unint64_t)v8 >= v9)
  {
    v11 = *(char **)(v7 + 184);
    v12 = (v8 - v11) >> 3;
    if ((unint64_t)(v12 + 1) >> 61)
      sub_20B80CDD8();
    v13 = v9 - (_QWORD)v11;
    v14 = (uint64_t)(v9 - (_QWORD)v11) >> 2;
    if (v14 <= v12 + 1)
      v14 = v12 + 1;
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      v15 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    if (v15)
    {
      v16 = (char *)sub_20B800BE8(v7 + 200, v15);
      v11 = *(char **)(v7 + 184);
      v8 = *(char **)(v7 + 192);
    }
    else
    {
      v16 = 0;
    }
    v17 = &v16[8 * v12];
    v18 = &v16[8 * v15];
    *(_QWORD *)v17 = 1;
    v10 = v17 + 8;
    while (v8 != v11)
    {
      v19 = *((_QWORD *)v8 - 1);
      v8 -= 8;
      *((_QWORD *)v17 - 1) = v19;
      v17 -= 8;
    }
    *(_QWORD *)(v7 + 184) = v17;
    *(_QWORD *)(v7 + 192) = v10;
    *(_QWORD *)(v7 + 200) = v18;
    if (v11)
      operator delete(v11);
  }
  else
  {
    *(_QWORD *)v8 = 1;
    v10 = v8 + 8;
  }
  v21 = (char **)(v7 + 160);
  v20 = *(char **)(v7 + 160);
  *(_QWORD *)(v7 + 192) = v10;
  v22 = *(char **)(v7 + 168);
  v23 = *(_QWORD *)(v7 + 176);
  if ((unint64_t)v22 < v23)
  {
    if (v20 == v22)
    {
      *(_QWORD *)v20 = 0;
      *(_QWORD *)(v7 + 168) = v20 + 8;
    }
    else
    {
      v24 = v20 + 8;
      v25 = v22 - 8;
      v26 = *(_QWORD **)(v7 + 168);
      while (v25 < v22)
      {
        v27 = *(_QWORD *)v25;
        v25 += 8;
        *v26++ = v27;
      }
      *(_QWORD *)(v7 + 168) = v26;
      if (v22 != v24)
        memmove(&v22[-8 * ((v22 - v24) >> 3)], v20, v22 - v24);
      *(_QWORD *)v20 = 0;
    }
    goto LABEL_46;
  }
  v28 = ((v22 - v20) >> 3) + 1;
  if (v28 >> 61)
    sub_20B80CDD8();
  v29 = v23 - (_QWORD)v20;
  if (v29 >> 2 > v28)
    v28 = v29 >> 2;
  if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
    v30 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v30 = v28;
  if (!v30)
  {
    v33 = 0;
    goto LABEL_36;
  }
  v31 = (char *)sub_20B800BE8(v7 + 176, v30);
  v33 = v31;
  if (!v32)
  {
LABEL_36:
    v35 = (char *)sub_20B800BE8(v7 + 176, 1uLL);
    v34 = &v35[8 * v36];
    if (v33)
      operator delete(v33);
    v33 = v35;
    goto LABEL_39;
  }
  v34 = &v31[8 * v32];
LABEL_39:
  *(_QWORD *)v33 = 0;
  v37 = v33 + 8;
  v38 = *v21;
  if (*v21 != v20)
  {
    v39 = v20;
    do
    {
      v40 = *((_QWORD *)v39 - 1);
      v39 -= 8;
      *((_QWORD *)v33 - 1) = v40;
      v33 -= 8;
    }
    while (v39 != v38);
  }
  v41 = *(char **)(v7 + 168);
  v42 = v41 - v20;
  if (v41 != v20)
    memmove(v37, v20, v41 - v20);
  v43 = *(void **)(v7 + 160);
  *(_QWORD *)(v7 + 160) = v33;
  *(_QWORD *)(v7 + 168) = &v37[v42];
  *(_QWORD *)(v7 + 176) = v34;
  if (v43)
    operator delete(v43);
LABEL_46:
  v44 = *(_QWORD *)(a1[4] + 8);
  v45 = *(_QWORD *)(v44 + 24) + 1;
  *(_QWORD *)(v44 + 24) = v45;
  if (v45 >= a1[6])
    *a5 = 1;
}

void sub_20B8F20C4(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

BOOL sub_20B8F20DC(uint64_t a1)
{
  const __CFString *v1;

  v1 = *(const __CFString **)(a1 + 152);
  return !v1 || CFStringGetLength(v1) == 0;
}

BOOL sub_20B8F2110(_QWORD *a1)
{
  return a1[5] > (unint64_t)((uint64_t)(a1[7] - a1[6]) >> 2);
}

uint64_t sub_20B8F2128()
{
  return 0;
}

void sub_20B8F2130(uint64_t a1, CFRange range, _BYTE *a3)
{
  const __CFString *v5;
  const __CFCharacterSet *v6;
  UTF32Char CharacterAtIndex;
  CFRange v8;

  v5 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x24BDBD240], *(CFStringRef *)(a1 + 40), range);
  if (CFStringGetLength(v5) > 1
    || (v6 = (const __CFCharacterSet *)qword_25472B640,
        v8.length = CFStringGetLength(v5),
        v8.location = 0,
        !CFStringFindCharacterFromSet(v5, v6, v8, 0, 0))
    || CFStringGetLength(v5) == 1
    && (CharacterAtIndex = CFStringGetCharacterAtIndex(v5, 0), sub_20B896300(CharacterAtIndex)))
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
  }
  *a3 = 1;
  if (v5)
    CFRelease(v5);
}

void sub_20B8F2208(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B87E150((const void **)va, 0);
  _Unwind_Resume(a1);
}

void sub_20B8F2220()
{
  const __CFCharacterSet *Predefined;
  __CFCharacterSet *MutableCopy;
  const __CFCharacterSet *v2;
  const __CFCharacterSet *v3;

  Predefined = CFCharacterSetGetPredefined(kCFCharacterSetPunctuation);
  MutableCopy = CFCharacterSetCreateMutableCopy(0, Predefined);
  v2 = CFCharacterSetGetPredefined(kCFCharacterSetWhitespaceAndNewline);
  CFCharacterSetUnion(MutableCopy, v2);
  v3 = CFCharacterSetGetPredefined(kCFCharacterSetSymbol);
  CFCharacterSetUnion(MutableCopy, v3);
  qword_25472B640 = (uint64_t)MutableCopy;
}

int *sub_20B8F2280(int *result, unsigned __int16 *a2, unint64_t a3, char *a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v6;
  unint64_t v7;
  char *v8;
  __int16 v9;
  int v10;

  *result = 0;
  if ((a3 & 1) == 0)
  {
    if (a3 >= 2)
    {
      v7 = a3 >> 1;
      v8 = a4;
      while (1)
      {
        v10 = *a2++;
        v9 = v10;
        if (v10 != 42)
        {
          *(_WORD *)v8 = v9;
          v8 += 2;
        }
        v6 = (v8 - a4) >> 1;
        if (v6 >= a5)
          break;
        if (!--v7)
          goto LABEL_9;
      }
    }
    else
    {
      v6 = 0;
LABEL_9:
      *a6 = v6;
      return (int *)sub_20B8EFA14(a4, v6, result, 0);
    }
  }
  return result;
}

uint64_t sub_20B8F22E8(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5, unint64_t a6)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if ((a6 & 1) != 0)
    return 0;
  sub_20B8EFA14(a5, a6 >> 1, (int *)a4, 0);
  result = 0;
  v11 = *a1;
  if ((_DWORD)v11 == *(_DWORD *)a4)
  {
    if ((int)v11 < 1)
    {
      return 1;
    }
    else
    {
      v12 = 0;
      v13 = a1 + 1;
      v14 = a4 + 4;
      while (1)
      {
        if (v12)
        {
          v15 = *(unsigned __int16 *)((char *)v13 + v12 - 2);
          v16 = *(unsigned __int16 *)(v14 + v12 - 2);
          v17 = *(unsigned __int16 *)((char *)v13 + v12) - v15;
          v18 = *(unsigned __int16 *)(v14 + v12) - v16;
        }
        else
        {
          v15 = 0;
          v16 = 0;
          v17 = *((unsigned __int16 *)a1 + 2);
          v18 = *(unsigned __int16 *)(a4 + 4);
        }
        if (v17 > v18 || memcmp((const void *)(a2 + 2 * v15), &a5[2 * v16], 2 * v17))
          break;
        v12 += 2;
        if (!--v11)
          return 1;
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_20B8F23DC(int a1)
{
  unsigned __int8 v1;
  unsigned __int16 *v2;
  int v4;
  int v5;
  _OWORD v6[7];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v1 = atomic_load((unsigned __int8 *)&qword_25472B648);
  if ((v1 & 1) == 0)
  {
    v4 = a1;
    v5 = __cxa_guard_acquire(&qword_25472B648);
    a1 = v4;
    if (v5)
    {
      v6[0] = xmmword_20BA44B00;
      v6[1] = xmmword_20BA44B10;
      v6[2] = xmmword_20BA44B20;
      v6[3] = xmmword_20BA44B30;
      v6[4] = xmmword_20BA44B40;
      v6[5] = xmmword_20BA44B50;
      v6[6] = xmmword_20BA44B60;
      sub_20B8F2530((char *)v6, 0x1CuLL);
      __cxa_atexit((void (*)(void *))sub_20B8F25DC, &qword_25472B650, &dword_20B7F7000);
      __cxa_guard_release(&qword_25472B648);
      a1 = v4;
    }
  }
  v2 = (unsigned __int16 *)qword_25472B650;
  if (qword_25472B650 != qword_25472B658)
  {
    while (*v2 != a1)
    {
      v2 += 2;
      if (v2 == (unsigned __int16 *)qword_25472B658)
        return 0;
    }
  }
  if (v2 == (unsigned __int16 *)qword_25472B658)
    return 0;
  else
    return v2[1];
}

void sub_20B8F2518(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472B648);
  _Unwind_Resume(a1);
}

char *sub_20B8F2530(char *result, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;

  qword_25472B650 = 0;
  qword_25472B658 = 0;
  qword_25472B660 = 0;
  if (a2)
  {
    if (a2 >> 62)
      sub_20B80CDD8();
    v3 = result;
    v4 = 4 * a2;
    result = (char *)operator new(4 * a2);
    v5 = 0;
    qword_25472B650 = (uint64_t)result;
    qword_25472B658 = (uint64_t)result;
    qword_25472B660 = (uint64_t)&result[4 * a2];
    do
    {
      *(_DWORD *)&result[v5] = *(_DWORD *)&v3[v5];
      v5 += 4;
    }
    while (v4 != v5);
    qword_25472B658 = (uint64_t)&result[v5];
  }
  return result;
}

void sub_20B8F25B8(_Unwind_Exception *exception_object)
{
  if (qword_25472B650)
  {
    qword_25472B658 = qword_25472B650;
    operator delete((void *)qword_25472B650);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B8F25DC(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20B8F260C(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned __int16 *a4, uint64_t a5, void *a6, unint64_t a7, int a8)
{
  int v11;
  int v12;
  _WORD *v14;
  uint64_t v15;
  _WORD *v16;
  uint64_t v17;
  __int128 *v18;
  __int128 *v19;
  unint64_t v20;
  char *v21;
  _BYTE *v22;
  uint64_t v23;
  unsigned __int16 *v24;
  int v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  __int16 v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  BOOL v40;
  int v41;
  CFIndex v42;
  unint64_t v43;
  char *size;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  unint64_t v50;
  __int128 *p_buf;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  NSObject *v60;
  void *v61;
  unint64_t v62;
  std::string *v63;
  int v64;
  uint64_t v66;
  int v67;
  void *v71;
  _BYTE *v72;
  uint64_t v73;
  void *__p;
  char *v75;
  char *v76;
  void *v77;
  _BYTE *v78;
  uint64_t v79;
  std::string v80;
  __int128 buf;
  unsigned __int8 v82;
  uint64_t v83;

  v83 = *MEMORY[0x24BDAC8D0];
  v11 = **(unsigned __int8 **)(a2 + 32);
  if (a8 & 0x2000000 | v11)
    v12 = 10000;
  else
    v12 = 0;
  v67 = v12;
  v77 = 0;
  v78 = 0;
  v79 = 0;
  __p = 0;
  v75 = 0;
  v76 = 0;
  v71 = 0;
  v72 = 0;
  v73 = 0;
  v64 = v11;
  if (*(_DWORD *)a3 == 1)
  {
    HIDWORD(v66) = *(_DWORD *)(a3 + 4);
    v14 = *(_WORD **)(a3 + 72);
    v15 = *(_QWORD *)(a3 + 80);
    v16 = *(_WORD **)(a3 + 56);
    v17 = *(_QWORD *)(a3 + 64);
    v19 = *(__int128 **)(a3 + 16);
    v18 = *(__int128 **)(a3 + 24);
    sub_20B8F4258(v19, v18, &v77);
    sub_20B8B17F4(v14, &v14[v15], (uint64_t)&__p);
    sub_20B8B17F4(v16, &v16[v17], (uint64_t)&v71);
    v20 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v18 - (char *)v19) >> 3);
    LODWORD(v66) = *(_BYTE *)(a3 + 8) != 0;
    v22 = __p;
    v21 = v75;
  }
  else
  {
    v22 = 0;
    v21 = 0;
    v66 = 0;
    v20 = 0;
  }
  v23 = v21 - v22;
  sub_20B87D570(&__p, a5 + ((v21 - v22) >> 1));
  if (a5)
  {
    v24 = &a4[a5];
    do
    {
      v25 = *a4;
      if (v25 != 32)
      {
        v26 = v75;
        if (v75 >= v76)
        {
          v28 = (char *)__p;
          v29 = v75 - (_BYTE *)__p;
          if (v75 - (_BYTE *)__p <= -3)
            sub_20B80CDD8();
          v30 = v29 >> 1;
          if (v76 - (_BYTE *)__p <= (unint64_t)((v29 >> 1) + 1))
            v31 = v30 + 1;
          else
            v31 = v76 - (_BYTE *)__p;
          if ((unint64_t)(v76 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFELL)
            v32 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v32 = v31;
          if (v32)
          {
            v33 = (char *)sub_20B80FD48((uint64_t)&v76, v32);
            v28 = (char *)__p;
            v26 = v75;
          }
          else
          {
            v33 = 0;
          }
          v34 = &v33[2 * v30];
          *(_WORD *)v34 = v25;
          v27 = v34 + 2;
          while (v26 != v28)
          {
            v35 = *((_WORD *)v26 - 1);
            v26 -= 2;
            *((_WORD *)v34 - 1) = v35;
            v34 -= 2;
          }
          __p = v34;
          v75 = v27;
          v76 = &v33[2 * v32];
          if (v28)
            operator delete(v28);
        }
        else
        {
          *(_WORD *)v75 = v25;
          v27 = v26 + 2;
        }
        v75 = v27;
      }
      ++a4;
    }
    while (a4 != v24);
  }
  v36 = v23 >> 1;
  if (v75 - (_BYTE *)__p == 2)
  {
    v37 = *(unsigned __int16 *)__p;
    v38 = v37 - 12353;
    v40 = v37 == 12316 || v37 == 12540;
    if (v38 < 0x56)
      v40 = 1;
    if (v64 != 0 && v40)
      v41 = 10000;
    else
      v41 = 0;
  }
  else
  {
    v41 = 0;
  }
  if (__p)
    v42 = ((v75 - (_BYTE *)__p) >> 1) - v36;
  else
    v42 = 0;
  sub_20B96DCDC(*(_QWORD *)(a2 + 16), (const UniChar *)__p + v36, v42, (const UniChar ***)&v80);
  v43 = 0xCCCCCCCCCCCCCCCDLL * ((v78 - (_BYTE *)v77) >> 3);
  sub_20B8F2C74((uint64_t)&v77, v43 + ((uint64_t)(v80.__r_.__value_.__l.__size_ - v80.__r_.__value_.__r.__words[0]) >> 4));
  size = (char *)v80.__r_.__value_.__l.__size_;
  if (v80.__r_.__value_.__l.__size_ != v80.__r_.__value_.__r.__words[0])
  {
    v45 = 0;
    v46 = 0;
    v47 = 40 * v43;
    size = (char *)v80.__r_.__value_.__r.__words[0];
    do
    {
      v48 = (char *)v77;
      v49 = (char *)v77 + v47;
      *((_QWORD *)v49 + 4) = 0;
      *(_OWORD *)v49 = 0u;
      *((_OWORD *)v49 + 1) = 0u;
      v49[38] = 2;
      v50 = *(_QWORD *)&size[v45 + 8];
      *((_WORD *)v49 + 12) = v50;
      v49[37] = 1;
      *(_DWORD *)v49 = 0;
      sub_20B96E36C(*(_QWORD *)(a2 + 16), *(void **)&size[v45], v50, (uint64_t)&buf);
      if ((v82 & 0x80u) == 0)
        p_buf = &buf;
      else
        p_buf = (__int128 *)buf;
      if ((v82 & 0x80u) == 0)
        v52 = v82;
      else
        v52 = *((_QWORD *)&buf + 1);
      sub_20B8B17F4(p_buf, (_WORD *)p_buf + v52, (uint64_t)&v71);
      *(_WORD *)&v48[v47 + 28] = v52;
      if ((char)v82 < 0)
        operator delete((void *)buf);
      ++v46;
      size = (char *)v80.__r_.__value_.__r.__words[0];
      v47 += 40;
      v45 += 16;
    }
    while (v46 < (uint64_t)(v80.__r_.__value_.__l.__size_ - v80.__r_.__value_.__r.__words[0]) >> 4);
  }
  if (size)
  {
    v80.__r_.__value_.__l.__size_ = (std::string::size_type)size;
    operator delete(size);
  }
  v53 = operator new();
  sub_20B916250(v53, __p, (v75 - (_BYTE *)__p) >> 1, a6, a7, v71, (v72 - (_BYTE *)v71) >> 1, HIDWORD(v66) + v67 + v41, 0, 0, (uint64_t)&v77, 88, 2, a8);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v53 + 512))(v53, v66);
  while (1)
  {
    if (v20 >= (*(uint64_t (**)(uint64_t))(*(_QWORD *)v53 + 48))(v53))
    {
      *a1 = v53;
      goto LABEL_66;
    }
    v54 = sub_20B91708C(v53, v20);
    v56 = v55;
    v57 = sub_20B916C5C(v53, v20);
    if (((*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a2 + 24) + 32))(*(_QWORD *)(a2 + 24), v54, v56, v57, v58) & 4) == 0)break;
    ++v20;
  }
  v59 = sub_20B9A7C5C(0xAu);
  if (os_log_type_enabled(v59, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(uint64_t, uint64_t, const char *, uint64_t))(*(_QWORD *)v53 + 528))(v53, 10, "Rejected: ", 1);
    v60 = sub_20B9A7C5C(0xAu);
    if (os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG))
    {
      v61 = (void *)sub_20B916C5C(v53, v20);
      sub_20B8D15F4(v61, v62, &v80);
      v63 = (v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v80
          : (std::string *)v80.__r_.__value_.__r.__words[0];
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = v63;
      _os_log_debug_impl(&dword_20B7F7000, v60, OS_LOG_TYPE_DEBUG, "\t%s is not a valid word for prediction", (uint8_t *)&buf, 0xCu);
      if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v80.__r_.__value_.__l.__data_);
    }
  }
  *a1 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v53 + 16))(v53);
LABEL_66:
  if (v71)
  {
    v72 = v71;
    operator delete(v71);
  }
  if (__p)
  {
    v75 = (char *)__p;
    operator delete(__p);
  }
  if (v77)
  {
    v78 = v77;
    operator delete(v77);
  }
}

void sub_20B8F2BA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29)
{
  uint64_t v29;

  (*(void (**)(uint64_t))(*(_QWORD *)v29 + 16))(v29);
  if (__p)
    operator delete(__p);
  if (a22)
    operator delete(a22);
  if (a25)
    operator delete(a25);
  _Unwind_Resume(a1);
}

void sub_20B8F2C74(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_20B8F43F0((void **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 40 * a2;
  }
}

void sub_20B8F2CB0(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  _BYTE *v26;
  uint64_t v27;
  char *v28;
  unsigned __int16 *v29;
  void *v30;
  double *v31;
  char v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  NSObject *v36;
  uint8_t v37[16];
  double *v38;
  void *__p[2];
  unsigned __int8 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[3];
  _QWORD *v53;
  _QWORD v54[3];
  _QWORD *v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a3 = &unk_24C460D28;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_DWORD *)(a3 + 40) = 1065353216;
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  v5 = *(_QWORD *)(a1 + 40);
  if (!v5 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5) & 1) == 0)
    return;
  v7 = a2[1];
  if (a2[2] == v7)
  {
LABEL_17:
    (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(a1 + 40) + 32))(*(_QWORD *)(a1 + 40), a2);
    v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 88))(*(_QWORD *)(a1 + 40));
    v20 = *(_QWORD *)(a1 + 48);
    v41 = xmmword_20BA39430;
    *(_QWORD *)&v42 = 10;
    DWORD2(v42) = 1077936128;
    v54[0] = &off_24C46AAD8;
    v55 = v54;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, __int128 *, _QWORD *))(*(_QWORD *)v20 + 16))(&v50, v20, v19, 8, &v41, v54);
    v21 = v55;
    if (v55 == v54)
    {
      v22 = 4;
      v21 = v54;
    }
    else
    {
      if (!v55)
        goto LABEL_22;
      v22 = 5;
    }
    (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_22:
    BYTE8(v41) = 0;
    *(_QWORD *)&v41 = 0;
    v42 = 0u;
    v43 = 0u;
    v44 = 0u;
    v45 = 0u;
    v46 = 0u;
    v47 = 0u;
    v48 = 0u;
    v49 = 0;
    v23 = v50;
    v24 = v51;
    if (v50 == v51)
    {
LABEL_51:
      *(_QWORD *)&v41 = &v50;
      sub_20B86F120((void ***)&v41);
      return;
    }
    while (1)
    {
      if (*(_QWORD *)(a1 + 56))
      {
        if (*(char *)(v23 + 23) < 0)
        {
          v26 = *(_BYTE **)v23;
          v25 = *(_QWORD *)(v23 + 8);
        }
        else
        {
          v25 = *(unsigned __int8 *)(v23 + 23);
          v26 = (_BYTE *)v23;
        }
        if (sub_20B8F31C8(a1, v26, v25))
          goto LABEL_50;
      }
      if (*(char *)(v23 + 23) < 0)
      {
        v28 = *(char **)v23;
        v27 = *(_QWORD *)(v23 + 8);
      }
      else
      {
        v27 = *(unsigned __int8 *)(v23 + 23);
        v28 = (char *)v23;
      }
      sub_20B8AE824(v28, v27, (uint64_t)__p);
      v29 = (v40 & 0x80u) == 0 ? (unsigned __int16 *)__p : (unsigned __int16 *)__p[0];
      v30 = (v40 & 0x80u) == 0 ? (void *)v40 : __p[1];
      sub_20B8F260C((uint64_t *)&v38, a1, (uint64_t)&v41, v29, (uint64_t)v30, 0, 0, **(_DWORD **)(a1 + 8));
      v31 = v38;
      if (v38)
        break;
LABEL_48:
      if ((char)v40 < 0)
        operator delete(__p[0]);
LABEL_50:
      v23 += 32;
      if (v23 == v24)
        goto LABEL_51;
    }
    (*(void (**)(double *, double))(*(_QWORD *)v38 + 400))(v38, *(float *)(v23 + 24));
    v31[23] = *(float *)(v23 + 24);
    (*(void (**)(double *, uint64_t, const char *, _QWORD))(*(_QWORD *)v31 + 528))(v31, 10, "[predictPhrasesWithLanguageModel]", 0);
    v38 = 0;
    *(_QWORD *)v37 = v31;
    v52[0] = &unk_24C459188;
    v53 = v52;
    v32 = sub_20B8FDA94((_QWORD *)a3, (_QWORD **)v37, 2, 0, (uint64_t)v52);
    v33 = v53;
    if (v53 == v52)
    {
      v33 = v52;
      v34 = 4;
    }
    else
    {
      if (!v53)
      {
LABEL_43:
        v35 = *(_QWORD **)v37;
        *(_QWORD *)v37 = 0;
        if (v35)
          (*(void (**)(_QWORD *))(*v35 + 16))(v35);
        if ((v32 & 1) == 0)
        {
          v36 = sub_20B9A7C5C(0xAu);
          if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)v37 = 0;
            _os_log_debug_impl(&dword_20B7F7000, v36, OS_LOG_TYPE_DEBUG, " ∟ Rejected", v37, 2u);
          }
        }
        goto LABEL_48;
      }
      v34 = 5;
    }
    (*(void (**)(void))(*v33 + 8 * v34))();
    goto LABEL_43;
  }
  v8 = 0;
  v9 = 0;
  while (1)
  {
    v10 = *(_QWORD *)(a2[10] + 8 * v9);
    v11 = a2[4];
    if (v10 >= (a2[5] - v11) >> 1)
    {
      v12 = 0;
      v13 = 0;
    }
    else
    {
      v12 = v11 + 2 * v10;
      v13 = v11 ? *(unsigned __int16 *)(v7 + v8 + 24) : 0;
    }
    v14 = *(_QWORD *)(a2[13] + 8 * v9);
    v15 = a2[7];
    if (v14 >= (a2[8] - v15) >> 1)
    {
      v16 = 0;
      v18 = 0;
    }
    else
    {
      v16 = v15 + 2 * v14;
      v17 = *(unsigned __int16 *)(v7 + v8 + 28);
      v18 = v15 ? v17 : 0;
    }
    if (((*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), v16, v18, v12, v13) & 4) == 0)break;
    ++v9;
    v7 = a2[1];
    v8 += 40;
    if (v9 >= 0xCCCCCCCCCCCCCCCDLL * ((a2[2] - v7) >> 3))
      goto LABEL_17;
  }
}

void sub_20B8F30D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v39;
  uint64_t v40;

  v39 = *(_QWORD **)(v37 - 104);
  if (v39 == v36)
  {
    v40 = 4;
    v39 = (_QWORD *)(v37 - 128);
  }
  else
  {
    if (!v39)
      goto LABEL_6;
    v40 = 5;
  }
  (*(void (**)(void))(*v39 + 8 * v40))();
LABEL_6:
  sub_20B881268(v35);
  _Unwind_Resume(a1);
}

BOOL sub_20B8F31C8(uint64_t a1, _BYTE *__s2, size_t a3)
{
  size_t v4;
  unsigned int **v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  size_t v14;
  size_t v15;
  size_t v16;
  int v17;
  unsigned int *v19;
  uint64_t v20;
  unint64_t v21;
  size_t v22;
  size_t v23;
  size_t v24;

  if (a3)
  {
    if (__s2[a3 - 1] == 32)
      v4 = a3 - 1;
    else
      v4 = a3;
  }
  else
  {
    v4 = 0;
  }
  v5 = *(unsigned int ***)(a1 + 56);
  v6 = **v5;
  if ((_DWORD)v6)
  {
    v7 = 0;
    v8 = **v5;
    while (1)
    {
      v9 = v7 + (v8 >> 1);
      v10 = v5[1];
      v11 = (uint64_t)(*v5 + 1);
      v12 = *(unsigned int *)(v11 + 8 * v9);
      v13 = (unint64_t)v10 >= v12;
      v14 = (size_t)v10 - v12;
      if (!v13)
        break;
      v15 = *(unsigned int *)(v11 + ((8 * v9) | 4));
      if (v14 >= v15)
        v16 = v15;
      else
        v16 = v14;
      v17 = (char)sub_20B871BE0((char *)*v5 + v12, v16, __s2, v4);
      if (v17 >= 0)
        v8 >>= 1;
      else
        v8 += ~(v8 >> 1);
      if (v17 < 0)
        v7 = v9 + 1;
      if (!v8)
        goto LABEL_21;
    }
LABEL_29:
    sub_20B83B31C("string_view::substr");
  }
  v7 = 0;
LABEL_21:
  if (v7 == v6)
    return 0;
  v19 = v5[1];
  v20 = (uint64_t)(*v5 + 1);
  v21 = *(unsigned int *)(v20 + 8 * v7);
  v13 = (unint64_t)v19 >= v21;
  v22 = (size_t)v19 - v21;
  if (!v13)
    goto LABEL_29;
  v23 = *(unsigned int *)(v20 + ((8 * v7) | 4));
  if (v22 >= v23)
    v24 = v23;
  else
    v24 = v22;
  return (sub_20B871BE0(__s2, v4, (char *)*v5 + v21, v24) & 0x80u) == 0;
}

uint64_t sub_20B8F3304(uint64_t a1)
{
  void *v2;
  void *v3;

  if (*(char *)(a1 + 135) < 0)
    operator delete(*(void **)(a1 + 112));
  v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(_QWORD *)(a1 + 96) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 16);
  if (v3)
  {
    *(_QWORD *)(a1 + 24) = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_20B8F3354(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  char v33;
  char *v34;
  char *v35;
  unint64_t v36;
  unsigned __int16 *v37;
  unsigned int v38;
  char *v39;
  NSObject *v40;
  NSObject *v41;
  unint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unsigned __int16 *v51;
  unsigned int v52;
  char *v53;
  char *v54;
  uint64_t *v55;
  void **v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  size_t v75;
  _BYTE *v76;
  uint64_t v77;
  char *v78;
  unsigned __int16 *v79;
  uint64_t v80;
  int v81;
  void *v82;
  unint64_t v83;
  double *v84;
  const void *v85;
  uint64_t v86;
  uint64_t v87;
  const void *v88;
  uint64_t v89;
  void *v90;
  unint64_t v91;
  std::string *p_buf;
  std::string::size_type size;
  BOOL v94;
  void *v95;
  void **v96;
  double v97;
  char v98;
  _QWORD *v99;
  uint64_t v100;
  std::string::size_type v101;
  NSObject *v102;
  uint64_t v103;
  BOOL v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unsigned __int16 *v110;
  unint64_t v111;
  uint64_t v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void **v117;
  _QWORD *__s1;
  void **__s1a;
  std::string buf;
  double *v121;
  void *v122[3];
  int v123;
  uint64_t v124;
  void *v125[3];
  _DWORD v126[2];
  char v127;
  void *v128;
  _BYTE *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  void *__p[6];
  _QWORD v138[3];
  _QWORD *v139;
  _BYTE v140[24];
  _BYTE *v141;
  __int128 v142;
  uint64_t v143;
  uint64_t v144[3];

  v144[0] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a6 = &unk_24C460D28;
  *(_OWORD *)(a6 + 8) = 0u;
  *(_OWORD *)(a6 + 24) = 0u;
  *(_DWORD *)(a6 + 40) = 1065353216;
  *(_QWORD *)(a6 + 56) = 0;
  *(_QWORD *)(a6 + 64) = 0;
  *(_QWORD *)(a6 + 48) = 0;
  v8 = *(_QWORD *)(a1 + 40);
  if (v8)
  {
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8) ^ 1;
    if (!a3)
      LOBYTE(v13) = 1;
    if ((v13 & 1) == 0
      && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 408))(a3) != 1
      && (*(_BYTE *)sub_20B896F94() || (*(_BYTE *)(*(_QWORD *)(a1 + 8) + 3) & 2) != 0))
    {
      if ((v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 48))(a3)) == 0
        || (v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 560))(a3, v14 - 1),
            sub_20B8B2334(0),
            *(_BYTE *)(v15 + 38) == 1)
        || ((v16 = *(unsigned __int16 *)(v15 + 30), (unsigned __int16)word_25472CA14 <= v16)
          ? (v17 = (unsigned __int16)word_25472CA16 >= v16)
          : (v17 = 0),
            !v17))
      {
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 32))(*(_QWORD *)(a1 + 40), a2);
        v126[0] = 1;
        v126[1] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 112))(a3);
        v127 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 200))(a3);
        v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 304))(a3);
        v128 = 0;
        v129 = 0;
        v130 = 0;
        sub_20B882248(&v128, *(const void **)v18, *(_QWORD *)(v18 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v18 + 8) - *(_QWORD *)v18) >> 3));
        v19 = *(_QWORD *)(a3 + 64);
        v20 = *(char *)(a3 + 87);
        v21 = v20 < 0;
        if (v20 >= 0)
          v19 = a3 + 64;
        v22 = *(unsigned __int8 *)(a3 + 87);
        if (v21)
          v22 = *(_QWORD *)(a3 + 72);
        v131 = v19;
        v132 = v22;
        v133 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 552))(a3);
        v134 = v23;
        v135 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 544))(a3);
        v136 = v24;
        memset(__p, 0, sizeof(__p));
        (*(void (**)(void **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 16))(v122, *(_QWORD *)(a1 + 40), a3);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        __p[0] = v122[0];
        *(_OWORD *)&__p[1] = *(_OWORD *)&v122[1];
        v25 = v128;
        v26 = v129;
        if (v128 != v129 && v122[0] != v122[1] && *((_DWORD *)v122[1] - 1))
        {
          __s1 = *(_QWORD **)(a1 + 40);
          v27 = (char *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(__s1[1] + 8) + 512))(*(_QWORD *)(__s1[1] + 8));
          if (v28 >= v28 - 3)
            v28 -= 3;
          sub_20B8AE824(v27, v28, (uint64_t)v122);
          v29 = v26 - v25;
          v30 = (v26 - v25) / 40;
          v31 = v30 - 1;
          v32 = v122[0];
          v33 = HIBYTE(v122[2]);
          if (SHIBYTE(v122[2]) >= 0)
            v34 = (char *)HIBYTE(v122[2]);
          else
            v34 = (char *)v122[1];
          if (v34)
          {
            if (v29 >= 41)
            {
              v35 = (char *)*((unsigned __int16 *)v128 + 20 * v31 + 12);
              if (v34 > v35)
              {
                v36 = v30 - 2;
                v37 = (unsigned __int16 *)((char *)v128 + 40 * v30 - 56);
                while (1)
                {
                  v38 = *v37;
                  v37 -= 20;
                  v35 += v38;
                  if ((HIBYTE(v122[2]) & 0x80) != 0)
                  {
                    v39 = (char *)v122[1];
                    if (v35 == v122[1])
                      goto LABEL_44;
                  }
                  else
                  {
                    v39 = (char *)HIBYTE(v122[2]);
                    if (v35 == (char *)HIBYTE(v122[2]))
                      goto LABEL_45;
                  }
                  if (v35 > v39)
                    break;
                  v21 = (uint64_t)v36-- <= 0;
                  if (v21)
                    goto LABEL_43;
                }
                v40 = sub_20B9A7C5C(0xAu);
                if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
                {
                  v41 = sub_20B9A7C5C(0xAu);
                  if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
                  {
                    sub_20B99AB68(__s1[1], v122);
                    v117 = v122;
                    if (SHIBYTE(v122[2]) < 0)
                      v117 = (void **)v122[0];
                    LODWORD(v142) = 136315138;
                    *(_QWORD *)((char *)&v142 + 4) = v117;
                    _os_log_debug_impl(&dword_20B7F7000, v41, OS_LOG_TYPE_DEBUG, "\t subwords %s", (uint8_t *)&v142, 0xCu);
                    if (SHIBYTE(v122[2]) < 0)
                      operator delete(v122[0]);
                  }
                }
                v31 = -1;
              }
            }
          }
LABEL_43:
          v36 = v31;
          if (v33 < 0)
LABEL_44:
            operator delete(v32);
LABEL_45:
          if ((v36 & 0x8000000000000000) == 0)
          {
            v42 = 0;
            if (v36)
            {
              v43 = v128;
              v44 = 26;
              v45 = v36;
              do
              {
                v42 += *(unsigned __int16 *)((char *)v128 + v44);
                v44 += 40;
                --v45;
              }
              while (v45);
              if (a5 < v42)
                goto LABEL_62;
            }
            else
            {
              v43 = v128;
            }
            v46 = a4 + 2 * v42;
            v47 = a5 - v42;
            *(_QWORD *)&v142 = v46;
            *((_QWORD *)&v142 + 1) = v47;
            v48 = 0xCCCCCCCCCCCCCCCDLL * ((v129 - v43) >> 3);
            v21 = v48 > v36;
            v49 = v48 - v36;
            if (!v21)
              goto LABEL_57;
            v50 = 0;
            v51 = (unsigned __int16 *)&v43[40 * v36 + 26];
            do
            {
              v52 = *v51;
              v51 += 20;
              v50 += v52;
              --v49;
            }
            while (v49);
            if (v47 >= v50)
            {
LABEL_57:
              sub_20B87B938((uint64_t *)&v142, 0, 0, 0, v122);
              if (SHIBYTE(__p[5]) < 0)
                operator delete(__p[3]);
              *(_OWORD *)&__p[3] = *(_OWORD *)v122;
              __p[5] = v122[2];
              v53 = (char *)__p[1];
              if (__p[0] == __p[1])
              {
                v53 = (char *)__p[0];
              }
              else
              {
                v54 = (char *)__p[1] - 4;
                if (*(_DWORD *)(__s1[1] + 52) == *((_DWORD *)__p[1] - 1))
                {
                  __p[1] = (char *)__p[1] - 4;
                  v53 -= 4;
                  if (__p[0] == v54)
                    goto LABEL_62;
                }
              }
              if (v129 - (_BYTE *)v128 > 79)
              {
                v107 = (v129 - (_BYTE *)v128) / 0x28uLL - v36;
                if (v107 >= 1)
                {
                  v108 = v132;
                  v109 = v134;
                  v110 = (unsigned __int16 *)(v129 - 16);
                  v111 = (v129 - (_BYTE *)v128) / 0x28uLL - v36;
                  v112 = v136;
                  do
                  {
                    v108 -= v110[1];
                    v109 -= v110[2];
                    v113 = *v110;
                    v110 -= 20;
                    v112 -= v113;
                    --v111;
                  }
                  while (v111);
                  v129 -= 40 * v107;
                  v132 = v108;
                  v134 = v109;
                  v136 = v112;
                }
                __p[1] = v53 - 4;
                v106 = HIBYTE(__p[5]);
                v104 = SHIBYTE(__p[5]) < 0;
                v105 = __p[4];
                if (SHIBYTE(__p[5]) >= 0)
                  v56 = &__p[3];
                else
                  v56 = (void **)__p[3];
              }
              else
              {
                v104 = SHIBYTE(__p[5]) < 0;
                v105 = __p[4];
                if (SHIBYTE(__p[5]) >= 0)
                  v56 = &__p[3];
                else
                  v56 = (void **)__p[3];
                v106 = HIBYTE(__p[5]);
              }
              if (v104)
                v57 = (uint64_t)v105;
              else
                v57 = v106;
              if (!v57)
                goto LABEL_170;
LABEL_63:
              if (v126[0] != 1 || v128 == v129 || __p[0] == __p[1])
                goto LABEL_170;
              __s1a = v56;
              if (*(v129 - 2) != 1)
              {
                v71 = *((unsigned __int16 *)v129 - 5);
                sub_20B8B2334(0);
                if (sub_20B8B2860((uint64_t)&qword_25472C9B0, v71))
                  goto LABEL_170;
                if (sub_20B8B2758((uint64_t)&qword_25472C9B0, v71))
                {
                  v72 = (uint64_t *)(&off_24C499C48 + 2 * word_20BA3BB2A[7 * v71 + 5]);
                  if ((unint64_t)v72[1] >= 3)
                  {
                    v114 = 0;
                    v115 = *v72;
                    while (word_20BA94B40[v114] == *(_WORD *)(v115 + v114 * 2))
                    {
                      if (++v114 == 3)
                        goto LABEL_170;
                    }
                    v116 = 0;
                    while (*(unsigned __int16 *)&aBBkb_0[v116] == *(unsigned __int16 *)(v115 + v116))
                    {
                      v116 += 2;
                      if (v116 == 6)
                        goto LABEL_170;
                    }
                  }
                }
                if ((unsigned __int16)word_25472CA08 <= v71 && (unsigned __int16)word_25472CA0A >= v71)
                {
LABEL_73:
                  v65 = *(_QWORD *)(a1 + 40);
                  v142 = 0uLL;
                  v143 = 0;
                  sub_20B83C9C4(&v142, __p[0], (uint64_t)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 2);
                  memset(v122, 0, sizeof(v122));
                  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v122;
                  buf.__r_.__value_.__s.__data_[8] = 0;
                  v122[0] = operator new(0x18uLL);
                  v122[1] = v122[0];
                  v122[2] = (char *)v122[0] + 24;
                  v122[1] = sub_20B88248C((uint64_t)&v122[2], (uint64_t)&v142, (uint64_t)v144, (_QWORD *)v122[0]);
                  (*(void (**)(void **__return_ptr, uint64_t, void **, uint64_t))(*(_QWORD *)v65 + 64))(v125, v65, v122, 1);
                  if (v125[0])
                  {
                    v125[1] = v125[0];
                    operator delete(v125[0]);
                  }
                  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v122;
                  sub_20B83B400((void ***)&buf);
                  if ((_QWORD)v142)
                  {
                    *((_QWORD *)&v142 + 1) = v142;
                    operator delete((void *)v142);
                  }
                  (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(a1 + 40) + 96))(&v124, *(_QWORD *)(a1 + 40), 0);
                  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v124 + 24))(v124, *((unsigned int *)__p[1] - 1));
                  v66 = *(_QWORD *)(a1 + 48);
                  v67 = v124;
                  *(_OWORD *)v122 = xmmword_20BA39440;
                  v122[2] = (void *)16;
                  v123 = 1082130432;
                  v141 = 0;
                  v68 = operator new(0x20uLL);
                  *v68 = &off_24C46AA80;
                  v68[1] = a1;
                  v68[2] = __s1a;
                  v68[3] = v57;
                  v141 = v68;
                  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, void **, _BYTE *))(*(_QWORD *)v66 + 16))(&v142, v66, v67, 2, v122, v140);
                  v69 = v141;
                  if (v141 == v140)
                  {
                    v70 = 4;
                    v69 = v140;
                  }
                  else
                  {
                    if (!v141)
                    {
LABEL_88:
                      v73 = *((_QWORD *)&v142 + 1);
                      v74 = v142;
                      if ((_QWORD)v142 != *((_QWORD *)&v142 + 1))
                      {
                        while (*(_QWORD *)(a1 + 56))
                        {
                          if (*(char *)(v74 + 23) < 0)
                          {
                            v76 = *(_BYTE **)v74;
                            v75 = *(_QWORD *)(v74 + 8);
                          }
                          else
                          {
                            v75 = *(unsigned __int8 *)(v74 + 23);
                            v76 = (_BYTE *)v74;
                          }
                          if (!sub_20B8F31C8(a1, v76, v75))
                            break;
LABEL_142:
                          v74 += 32;
                          if (v74 == v73)
                            goto LABEL_143;
                        }
                        if (*(char *)(v74 + 23) < 0)
                        {
                          v78 = *(char **)v74;
                          v77 = *(_QWORD *)(v74 + 8);
                        }
                        else
                        {
                          v77 = *(unsigned __int8 *)(v74 + 23);
                          v78 = (char *)v74;
                        }
                        sub_20B8AE824(v78, v77, (uint64_t)v122);
                        if (SHIBYTE(v122[2]) >= 0)
                          v79 = (unsigned __int16 *)v122;
                        else
                          v79 = (unsigned __int16 *)v122[0];
                        if (SHIBYTE(v122[2]) >= 0)
                          v80 = HIBYTE(v122[2]);
                        else
                          v80 = (uint64_t)v122[1];
                        v81 = *(char *)(a3 + 87);
                        if (v81 >= 0)
                          v82 = (void *)(a3 + 64);
                        else
                          v82 = *(void **)(a3 + 64);
                        if (v81 >= 0)
                          v83 = *(unsigned __int8 *)(a3 + 87);
                        else
                          v83 = *(_QWORD *)(a3 + 72);
                        sub_20B8F260C((uint64_t *)&v121, a1, (uint64_t)v126, v79, v80, v82, v83, **(_DWORD **)(a1 + 8));
                        v84 = v121;
                        if (v121)
                        {
                          v85 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 544))(a3);
                          v87 = v86;
                          v88 = (const void *)(*(uint64_t (**)(double *))(*(_QWORD *)v84 + 544))(v84);
                          if (v87 != v89 || memcmp(v85, v88, 2 * v87))
                          {
                            if (!*(_QWORD *)(a1 + 56))
                              goto LABEL_122;
                            v90 = (void *)(*(uint64_t (**)(double *))(*(_QWORD *)v84 + 544))(v84);
                            sub_20B8D15F4(v90, v91, &buf);
                            if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                              p_buf = &buf;
                            else
                              p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
                            if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                              size = HIBYTE(buf.__r_.__value_.__r.__words[2]);
                            else
                              size = buf.__r_.__value_.__l.__size_;
                            v94 = sub_20B8F31C8(a1, p_buf, size);
                            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                              operator delete(buf.__r_.__value_.__l.__data_);
                            if (!v94)
                            {
LABEL_122:
                              v95 = (void *)HIBYTE(v122[2]);
                              if (SHIBYTE(v122[2]) < 0)
                                v95 = v122[1];
                              if ((void *)v57 != v95
                                || (SHIBYTE(v122[2]) >= 0 ? (v96 = v122) : (v96 = (void **)v122[0]),
                                    memcmp(__s1a, v96, 2 * v57)))
                              {
                                v97 = (*(double (**)(uint64_t))(*(_QWORD *)a3 + 392))(a3);
                                (*(void (**)(double *, double))(*(_QWORD *)v84 + 400))(v84, v97 + *(float *)(v74 + 24));
                                v84[23] = *(double *)(a3 + 184) + *(float *)(v74 + 24);
                                (*(void (**)(double *, uint64_t, const char *, _QWORD))(*(_QWORD *)v84 + 528))(v84, 10, "[expandPhrasesWithLanguageModel]", 0);
                                v121 = 0;
                                buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v84;
                                v138[0] = &unk_24C459188;
                                v139 = v138;
                                v98 = sub_20B8FDA94((_QWORD *)a6, &buf, 2, 0, (uint64_t)v138);
                                v99 = v139;
                                if (v139 == v138)
                                {
                                  v99 = v138;
                                  v100 = 4;
                                }
                                else
                                {
                                  if (!v139)
                                  {
LABEL_135:
                                    v101 = buf.__r_.__value_.__r.__words[0];
                                    buf.__r_.__value_.__r.__words[0] = 0;
                                    if (v101)
                                      (*(void (**)(std::string::size_type))(*(_QWORD *)v101 + 16))(v101);
                                    if ((v98 & 1) == 0)
                                    {
                                      v102 = sub_20B9A7C5C(0xAu);
                                      if (os_log_type_enabled(v102, OS_LOG_TYPE_DEBUG))
                                      {
                                        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                                        _os_log_debug_impl(&dword_20B7F7000, v102, OS_LOG_TYPE_DEBUG, " ∟ Rejected", (uint8_t *)&buf, 2u);
                                      }
                                    }
                                    goto LABEL_140;
                                  }
                                  v100 = 5;
                                }
                                (*(void (**)(void))(*v99 + 8 * v100))();
                                goto LABEL_135;
                              }
                            }
                          }
                          (*(void (**)(double *))(*(_QWORD *)v84 + 16))(v84);
                        }
LABEL_140:
                        if (SHIBYTE(v122[2]) < 0)
                          operator delete(v122[0]);
                        goto LABEL_142;
                      }
LABEL_143:
                      v122[0] = &v142;
                      sub_20B86F120((void ***)v122);
                      v103 = v124;
                      v124 = 0;
                      if (v103)
                        (*(void (**)(uint64_t))(*(_QWORD *)v103 + 8))(v103);
                      goto LABEL_170;
                    }
                    v70 = 5;
                  }
                  (*(void (**)(void))(*v69 + 8 * v70))();
                  goto LABEL_88;
                }
              }
              v58 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 8);
              v59 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v58 + 512))(v58, *((unsigned int *)__p[1] - 1));
              v61 = v60;
              if (!sub_20B8AE7D4(v59, v60))
                goto LABEL_73;
              if (v61 >= v61 - 3)
                v62 = v61 - 3;
              else
                v62 = v61;
              v63 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 8);
              v64 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v63 + 504))(v63, v59, v62);
              if (v64)
              {
                *((_DWORD *)__p[1] - 1) = v64;
                goto LABEL_73;
              }
LABEL_170:
              if (SHIBYTE(__p[5]) < 0)
                operator delete(__p[3]);
              if (__p[0])
              {
                __p[1] = __p[0];
                operator delete(__p[0]);
              }
              if (v128)
              {
                v129 = v128;
                operator delete(v128);
              }
              return;
            }
          }
        }
LABEL_62:
        v55 = sub_20B947CC4();
        v56 = (void **)*v55;
        v57 = v55[1];
        if (!v57)
          goto LABEL_170;
        goto LABEL_63;
      }
    }
  }
}

void sub_20B8F3FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,void *a34,uint64_t a35)
{
  uint64_t v35;
  void *v36;
  char v37;

  if (v37 < 0)
    operator delete(v36);
  sub_20B8F3304((uint64_t)&a32);
  sub_20B881268(v35);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B8F4158(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24C462340;
  v2 = a1[6];
  a1[6] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20B8F419C(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24C462340;
  v2 = a1[6];
  a1[6] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B8F41F0(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
  if (!(_DWORD)result)
    __assert_rtn("setLM", "JapaneseRNNLMPredictor.h", 42, "lm->type() != NeuralLanguageModelEngineType::None");
  *(_QWORD *)(a1 + 40) = a2;
  *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16) = a2;
  return result;
}

uint64_t sub_20B8F4250(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 56) = a2;
  return result;
}

__int128 *sub_20B8F4258(__int128 *a1, __int128 *a2, void **a3)
{
  __int128 *v3;
  __int128 *v4;
  void **v6;

  v3 = a1;
  v6 = a3;
  if (a1 == a2)
    return a1;
  v4 = a2;
  do
  {
    sub_20B8F42B8(&v6, v3);
    v3 = (__int128 *)((char *)v3 + 40);
  }
  while (v3 != v4);
  return v4;
}

void ***sub_20B8F42B8(void ***a1, __int128 *a2)
{
  void **v4;
  char *v5;
  void **v6;
  uint64_t v7;
  char *v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  char *v22;
  char *v23;
  __int128 v24;
  __int128 v25;

  v4 = *a1;
  v5 = (char *)(*a1)[1];
  v6 = *a1;
  v9 = (char *)v6[2];
  v7 = (uint64_t)(v6 + 2);
  v8 = v9;
  if (v5 >= v9)
  {
    v13 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - (_BYTE *)*v4) >> 3);
    v14 = v13 + 1;
    if (v13 + 1 > 0x666666666666666)
      sub_20B8821D4();
    v15 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - (_BYTE *)*v4) >> 3);
    if (2 * v15 > v14)
      v14 = 2 * v15;
    if (v15 >= 0x333333333333333)
      v16 = 0x666666666666666;
    else
      v16 = v14;
    if (v16)
      v17 = (char *)sub_20B882310(v7, v16);
    else
      v17 = 0;
    v18 = &v17[40 * v13];
    v19 = &v17[40 * v16];
    v20 = *a2;
    v21 = a2[1];
    *((_QWORD *)v18 + 4) = *((_QWORD *)a2 + 4);
    *(_OWORD *)v18 = v20;
    *((_OWORD *)v18 + 1) = v21;
    v12 = v18 + 40;
    v23 = (char *)*v4;
    v22 = (char *)v4[1];
    if (v22 != *v4)
    {
      do
      {
        v24 = *(_OWORD *)(v22 - 40);
        v25 = *(_OWORD *)(v22 - 24);
        *((_QWORD *)v18 - 1) = *((_QWORD *)v22 - 1);
        *(_OWORD *)(v18 - 24) = v25;
        *(_OWORD *)(v18 - 40) = v24;
        v18 -= 40;
        v22 -= 40;
      }
      while (v22 != v23);
      v22 = (char *)*v4;
    }
    *v4 = v18;
    v4[1] = v12;
    v4[2] = v19;
    if (v22)
      operator delete(v22);
  }
  else
  {
    v10 = *a2;
    v11 = a2[1];
    *((_QWORD *)v5 + 4) = *((_QWORD *)a2 + 4);
    *(_OWORD *)v5 = v10;
    *((_OWORD *)v5 + 1) = v11;
    v12 = v5 + 40;
  }
  v4[1] = v12;
  return a1;
}

void sub_20B8F43F0(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 40 * ((40 * a2 - 40) / 0x28) + 40;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - (_BYTE *)*a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x666666666666666)
      sub_20B8821D4();
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - (_BYTE *)*a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x333333333333333)
      v11 = 0x666666666666666;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)sub_20B882310(v4, v11);
    else
      v12 = 0;
    v14 = &v12[40 * v8];
    v15 = &v12[40 * v11];
    v16 = 40 * ((40 * a2 - 40) / 0x28) + 40;
    bzero(v14, v16);
    v17 = &v14[v16];
    v19 = (char *)*a1;
    v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *(_OWORD *)(v18 - 40);
        v21 = *(_OWORD *)(v18 - 24);
        *((_QWORD *)v14 - 1) = *((_QWORD *)v18 - 1);
        *(_OWORD *)(v14 - 24) = v21;
        *(_OWORD *)(v14 - 40) = v20;
        v14 -= 40;
        v18 -= 40;
      }
      while (v18 != v19);
      v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
      operator delete(v18);
  }
}

void sub_20B8F457C()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B8F4590()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C46AAD8;
  return result;
}

void sub_20B8F45B4(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C46AAD8;
}

uint64_t sub_20B8F45CC()
{
  return 1;
}

uint64_t sub_20B8F45D4(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45EFB0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B8F4610()
{
  return &unk_24C45EFB0;
}

void sub_20B8F4620()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B8F4634(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24C46AA80;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_20B8F4674(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C46AA80;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_20B8F469C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;
  _WORD *p_p;
  void *v7;
  unint64_t v8;
  unint64_t v9;
  void **v10;
  _BOOL8 v11;
  void *v13[2];
  unsigned __int8 v14;
  _QWORD v15[2];
  void *__p;
  unint64_t v17;
  unsigned __int8 v18;

  v3 = *(_QWORD *)(a1 + 8);
  sub_20B8AE824(*(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)&__p);
  v4 = v18;
  if ((char)v18 < 0)
  {
    if (!v17)
      goto LABEL_9;
    p_p = __p;
    if (*((_WORD *)__p + v17 - 1) != 9601)
      goto LABEL_9;
    v5 = --v17;
  }
  else
  {
    if (!v18 || *((_WORD *)&__p + v18 - 1) != 9601)
      goto LABEL_9;
    v5 = --v18;
    p_p = &__p;
  }
  p_p[v5] = 0;
  v4 = v18;
LABEL_9:
  if ((v4 & 0x80u) == 0)
    v7 = &__p;
  else
    v7 = __p;
  if ((v4 & 0x80u) == 0)
    v8 = v4;
  else
    v8 = v17;
  sub_20B96E36C(*(_QWORD *)(v3 + 16), v7, v8, (uint64_t)v13);
  if ((char)v18 < 0)
    operator delete(__p);
  v9 = v14;
  v10 = v13;
  if ((v14 & 0x80u) != 0)
  {
    v10 = (void **)v13[0];
    v9 = (unint64_t)v13[1];
  }
  v15[0] = v10;
  v15[1] = v9;
  v11 = sub_20B87C89C(a1 + 16, (uint64_t)v15);
  if ((char)v14 < 0)
    operator delete(v13[0]);
  return v11;
}

void sub_20B8F47B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B8F47E4(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45EFA0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B8F4820()
{
  return &unk_24C45EFA0;
}

uint64_t sub_20B8F482C(uint64_t a1, uint64_t a2)
{
  const __CFString *v4;
  CFStringRef v5;
  CFIndex Length;
  CFIndex v7;
  UniChar *v8;
  CFStringRef v9;
  UniChar *v10;
  CFStringRef v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t result;
  CFRange v20;
  CFRange v21;

  v4 = *(const __CFString **)a1;
  v5 = *(CFStringRef *)a2;
  if (v4)
  {
    if (!v5)
      return 1;
    Length = CFStringGetLength(v4);
    v7 = CFStringGetLength(*(CFStringRef *)a2);
    v8 = (UniChar *)off_254729BC8();
    v20.location = 0;
    v20.length = Length;
    CFStringGetCharacters(v9, v20, v8);
    v10 = (UniChar *)off_254729BE0();
    v21.location = 0;
    v21.length = v7;
    CFStringGetCharacters(v11, v21, v10);
    v12 = 2 * Length;
    if (2 * v7 < 2 * Length)
      v12 = 2 * v7;
    if (v12 >= 1)
    {
      v13 = *(unsigned __int8 *)v8;
      v14 = *(unsigned __int8 *)v10;
      if (v13 != v14)
        return v13 < v14;
      v15 = 0;
      while (v12 - 1 != v15)
      {
        v16 = *((unsigned __int8 *)v8 + v15 + 1);
        v17 = *((unsigned __int8 *)v10 + ++v15);
        if (v16 != v17)
        {
          result = v16 < v17;
          if (v15 >= v12)
            return Length < v7;
          return result;
        }
      }
    }
    return Length < v7;
  }
  else
  {
    if (v5)
      return 0;
    return *(_QWORD *)(a1 + 8) < *(_QWORD *)(a2 + 8);
  }
}

uint64_t sub_20B8F4970(uint64_t a1)
{
  _opaque_pthread_t *v2;
  void **v3;
  void *v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_24C461808;
  v2 = *(_opaque_pthread_t **)(a1 + 8);
  if (v2)
  {
    atomic_store(1u, (unsigned __int8 *)(a1 + 97));
    pthread_join(v2, 0);
  }
  v3 = *(void ***)(a1 + 24);
  if (v3)
    sub_20B969128(v3);
  sub_20B88B74C((const void **)(a1 + 104), 0);
  sub_20B84055C(a1 + 56);
  v4 = *(void **)(a1 + 32);
  if (v4)
  {
    *(_QWORD *)(a1 + 40) = v4;
    operator delete(v4);
  }
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5);
  return a1;
}

void sub_20B8F4A08(uint64_t a1)
{
  sub_20B8F4970(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B8F4A2C(uint64_t a1)
{
  _opaque_pthread_t *v2;
  sched_param v4;

  v4 = (sched_param)5;
  v2 = pthread_self();
  pthread_setschedparam(v2, 1, &v4);
  sub_20B8F4A74(a1);
  return 0;
}

void sub_20B8F4A74(uint64_t a1)
{
  unsigned __int8 v1;
  unsigned __int8 v3;

  v1 = atomic_load((unsigned __int8 *)(a1 + 97));
  if ((v1 & 1) == 0)
  {
    v3 = atomic_load((unsigned __int8 *)(a1 + 96));
    if ((v3 & 1) == 0)
      sub_20B8F4B98(a1);
    sub_20B88B74C((const void **)(a1 + 104), 0);
  }
}

void sub_20B8F4AC4(uint64_t a1, const void *a2, int a3)
{
  _QWORD *v5;
  int v6;
  pthread_attr_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    sub_20B8A0168((const void **)(a1 + 104), a2);
    if (a3)
    {
      pthread_attr_init(&v7);
      pthread_attr_setdetachstate(&v7, 1);
      v5 = (_QWORD *)(a1 + 8);
      v6 = pthread_create((pthread_t *)(a1 + 8), &v7, (void *(__cdecl *)(void *))sub_20B8F4A2C, (void *)a1);
      pthread_attr_destroy(&v7);
      if (v6)
        *v5 = 0;
    }
    else
    {
      sub_20B8F4A74(a1);
    }
  }
}

uint64_t sub_20B8F4B98(uint64_t result)
{
  unsigned __int8 v1;
  uint64_t v2;
  const __CFArray *v3;
  unint64_t v4;
  CFIndex Count;
  CFIndex v6;
  const __CFString *v7;
  const __CFDictionary *ValueAtIndex;
  const __CFString *Value;
  const __CFString *v10;
  BOOL v11;
  const __CFString *v12;
  BOOL v13;
  CFIndex v14;
  CFIndex Length;
  UniChar *v16;
  uint64_t v17;
  const void **v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  int64x2_t v29;
  unint64_t v30;
  CFStringRef v31;
  unint64_t v32;
  uint64_t v33;
  const __CFArray *v34;
  unint64_t v35;
  uint64_t v36;
  const __CFString *v37;
  unint64_t v38;
  const __CFDictionary *v39;
  const __CFString *v40;
  const __CFString *v41;
  CFIndex v42;
  const __CFNumber *v43;
  unint64_t v44;
  unint64_t v45;
  uint8x8_t v46;
  uint64_t ***v47;
  uint64_t **i;
  unint64_t v49;
  _QWORD *v50;
  float v51;
  _BOOL8 v52;
  unint64_t v53;
  unint64_t v54;
  size_t v55;
  uint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  CFComparisonResult v59;
  __int16 v60;
  const __CFArray *v61;
  CFIndex v62;
  void **v63;
  uint64_t v64;
  unint64_t v65;
  const __CFNumber *v66;
  uint64_t v67;
  CFIndex v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  const __CFString *v73;
  const __CFString *v74;
  const __CFString *v75;
  const __CFString *v76;
  CFIndex v77;
  UniChar *v78;
  uint64_t v79;
  const void **v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  unint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  int64x2_t v91;
  unint64_t v92;
  CFStringRef v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  const __CFArray *v98;
  uint64_t v99;
  const __CFString *v100;
  CFIndex v101;
  CFIndex v102;
  uint64_t v103;
  uint64_t v104;
  const __CFString *v105;
  unint64_t v106;
  const __CFString *v107;
  const __CFString *v108;
  CFIndex v109;
  unsigned __int8 v110;
  _QWORD *v111;
  _QWORD *v112;
  _QWORD *v113;
  uint64_t v114;
  void *v115;
  _QWORD *v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t j;
  uint64_t v120;
  void *v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  __int128 v126;
  _QWORD v127[2];
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  float v133;
  int v134;
  uint64_t v135;
  CFIndex v136;
  int valuePtr;
  UniChar *v138;
  const UniChar *v139;
  void **v140;
  int64x2_t v141;
  unint64_t v142;
  _QWORD *v143;

  v1 = atomic_load((unsigned __int8 *)(result + 97));
  if ((v1 & 1) == 0)
  {
    v2 = result;
    v3 = *(const __CFArray **)(result + 104);
    if (v3)
    {
      v4 = (unint64_t)&v140;
      v131 = 0u;
      v132 = 0u;
      v129 = 0u;
      v130 = 0u;
      v128 = 0u;
      v133 = 1.0;
      v134 = 0;
      v135 = 0;
      v136 = 0;
      if (*(_DWORD *)(result + 112) == 3)
      {
        v126 = 0uLL;
        v127[0] = 0;
        Count = CFArrayGetCount(v3);
        sub_20B8F5A08(&v126, Count);
        if (Count >= 1)
        {
          v6 = 0;
          v7 = (const __CFString *)*MEMORY[0x24BDBD430];
          do
          {
            ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v3, v6);
            Value = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, kMecabraSupplementalLexiconReadingKey[0]);
            v10 = Value;
            if (Value)
              v11 = Value == v7;
            else
              v11 = 1;
            if (!v11)
            {
              Length = CFStringGetLength(Value);
              if (Length > 127)
                goto LABEL_43;
              if (Length)
                goto LABEL_20;
            }
            v12 = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, kMecabraSupplementalLexiconSurfaceKey[0]);
            v10 = v12;
            if (v12)
              v13 = v12 == v7;
            else
              v13 = 1;
            if (!v13)
            {
              v14 = CFStringGetLength(v12);
              if (v14)
              {
                if (v14 < 128)
                {
LABEL_20:
                  (*(void (**)(UniChar **__return_ptr, uint64_t, const __CFString *))(*(_QWORD *)v2 + 16))(&v138, v2, v10);
                  v16 = v138;
                  if ((unint64_t)((char *)v139 - (char *)v138) <= 0xFE)
                  {
                    v17 = *((_QWORD *)&v126 + 1);
                    if (*((_QWORD *)&v126 + 1) >= v127[0])
                    {
                      v19 = (uint64_t)(*((_QWORD *)&v126 + 1) - v126) >> 4;
                      v20 = v19 + 1;
                      if ((unint64_t)(v19 + 1) >> 60)
                        sub_20B8F6DC4();
                      v21 = v127[0] - v126;
                      if ((uint64_t)(v127[0] - v126) >> 3 > v20)
                        v20 = v21 >> 3;
                      if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0)
                        v22 = 0xFFFFFFFFFFFFFFFLL;
                      else
                        v22 = v20;
                      v143 = v127;
                      if (v22)
                        v22 = (unint64_t)sub_20B8F6ECC(v22);
                      else
                        v23 = 0;
                      v24 = (_QWORD *)(v22 + 16 * v19);
                      v25 = v22 + 16 * v23;
                      v142 = v25;
                      *v24 = 0;
                      v24[1] = 0;
                      v18 = (const void **)(v24 + 2);
                      v141.i64[1] = (uint64_t)(v24 + 2);
                      v26 = (_QWORD *)*((_QWORD *)&v126 + 1);
                      v27 = (_QWORD *)v126;
                      if (*((_QWORD *)&v126 + 1) == (_QWORD)v126)
                      {
                        v29 = vdupq_n_s64(*((unint64_t *)&v126 + 1));
                      }
                      else
                      {
                        do
                        {
                          v28 = *(v26 - 2);
                          v26 -= 2;
                          *v26 = 0;
                          *(v24 - 2) = v28;
                          v24 -= 2;
                          v24[1] = v26[1];
                        }
                        while (v26 != v27);
                        v29 = (int64x2_t)v126;
                        v18 = (const void **)v141.i64[1];
                        v25 = v142;
                      }
                      *(_QWORD *)&v126 = v24;
                      *((_QWORD *)&v126 + 1) = v18;
                      v141 = v29;
                      v30 = v127[0];
                      v127[0] = v25;
                      v142 = v30;
                      v140 = (void **)v29.i64[0];
                      sub_20B8F6F00((uint64_t)&v140);
                    }
                    else
                    {
                      **((_QWORD **)&v126 + 1) = 0;
                      *(_QWORD *)(v17 + 8) = 0;
                      v18 = (const void **)(v17 + 16);
                    }
                    *((_QWORD *)&v126 + 1) = v18;
                    if (v138 == v139)
                    {
                      sub_20B88B52C(v18 - 2, v10);
                    }
                    else
                    {
                      v31 = CFStringCreateWithCharacters(0, v138, v139 - v138);
                      sub_20B87E150(v18 - 2, v31);
                    }
                    *(_QWORD *)(*((_QWORD *)&v126 + 1) - 8) = v6;
                    v16 = v138;
                  }
                  if (v16)
                  {
                    v139 = v16;
                    operator delete(v16);
                  }
                }
              }
            }
LABEL_43:
            ++v6;
          }
          while (v6 != Count);
        }
        v32 = 126 - 2 * __clz((uint64_t)(*((_QWORD *)&v126 + 1) - v126) >> 4);
        if (*((_QWORD *)&v126 + 1) == (_QWORD)v126)
          v33 = 0;
        else
          v33 = v32;
        sub_20B8F6F50(v126, *((const void ***)&v126 + 1), v33, 1);
        if ((_QWORD)v126 != *((_QWORD *)&v126 + 1))
        {
          sub_20B8F58EC(*(CFArrayRef *)(v2 + 104), v126, *((uint64_t *)&v126 + 1));
          v34 = *(const __CFArray **)(v2 + 104);
          v35 = sub_20B8F58EC(v34, v126, *((uint64_t *)&v126 + 1));
          sub_20B87D570((void **)&v128, v35);
          sub_20B8F69FC((void **)&v129 + 1, (uint64_t)(*((_QWORD *)&v126 + 1) - v126) >> 4);
          sub_20B8F6AD8((uint64_t)&v128, 0);
          v36 = v126;
          if (*((_QWORD *)&v126 + 1) != (_QWORD)v126)
          {
            v37 = 0;
            v38 = 0;
            while (1)
            {
              v39 = (const __CFDictionary *)CFArrayGetValueAtIndex(v34, *(_QWORD *)(v36 + 16 * v38 + 8));
              v40 = (const __CFString *)CFDictionaryGetValue(v39, kMecabraSupplementalLexiconSurfaceKey[0]);
              v41 = v40;
              if (v40)
                v42 = CFStringGetLength(v40);
              else
                v42 = 0;
              if (v136 < v42)
                v136 = v42;
              v43 = (const __CFNumber *)CFDictionaryGetValue(v39, kMecabraSupplementalLexiconItemPrefixKey[0]);
              valuePtr = 0;
              CFNumberGetValue(v43, kCFNumberSInt32Type, &valuePtr);
              v44 = (unsigned __int16)valuePtr;
              v45 = *((_QWORD *)&v131 + 1);
              if (*((_QWORD *)&v131 + 1))
              {
                v46 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v131 + 8));
                v46.i16[0] = vaddlv_u8(v46);
                if (v46.u32[0] > 1uLL)
                {
                  v4 = (unsigned __int16)valuePtr;
                  if (*((_QWORD *)&v131 + 1) <= (unint64_t)(unsigned __int16)valuePtr)
                    v4 = (unint64_t)(unsigned __int16)valuePtr % *((_QWORD *)&v131 + 1);
                }
                else
                {
                  v4 = (DWORD2(v131) - 1) & (unint64_t)(unsigned __int16)valuePtr;
                }
                v47 = *(uint64_t ****)(v131 + 8 * v4);
                if (v47)
                {
                  for (i = *v47; i; i = (uint64_t **)*i)
                  {
                    v49 = (unint64_t)i[1];
                    if (v49 == (unsigned __int16)valuePtr)
                    {
                      if (*((unsigned __int16 *)i + 8) == (unsigned __int16)valuePtr)
                        goto LABEL_93;
                    }
                    else
                    {
                      if (v46.u32[0] > 1uLL)
                      {
                        if (v49 >= *((_QWORD *)&v131 + 1))
                          v49 %= *((_QWORD *)&v131 + 1);
                      }
                      else
                      {
                        v49 &= *((_QWORD *)&v131 + 1) - 1;
                      }
                      if (v49 != v4)
                        break;
                    }
                  }
                }
              }
              v50 = operator new(0x18uLL);
              *v50 = 0;
              v50[1] = v44;
              *((_WORD *)v50 + 8) = v44;
              v51 = (float)(unint64_t)(*((_QWORD *)&v132 + 1) + 1);
              if (!v45 || (float)(v133 * (float)v45) < v51)
              {
                v52 = (v45 & (v45 - 1)) != 0;
                if (v45 < 3)
                  v52 = 1;
                v53 = v52 | (2 * v45);
                v54 = vcvtps_u32_f32(v51 / v133);
                if (v53 <= v54)
                  v55 = v54;
                else
                  v55 = v53;
                sub_20B828960((uint64_t)&v131, v55);
                v45 = *((_QWORD *)&v131 + 1);
                if ((*((_QWORD *)&v131 + 1) & (*((_QWORD *)&v131 + 1) - 1)) != 0)
                {
                  if (*((_QWORD *)&v131 + 1) <= v44)
                    v4 = v44 % *((_QWORD *)&v131 + 1);
                  else
                    v4 = v44;
                }
                else
                {
                  v4 = (DWORD2(v131) - 1) & v44;
                }
              }
              v56 = v131;
              v57 = *(_QWORD **)(v131 + 8 * v4);
              if (v57)
                break;
              *v50 = v132;
              *(_QWORD *)&v132 = v50;
              *(_QWORD *)(v56 + 8 * v4) = &v132;
              if (*v50)
              {
                v58 = *(_QWORD *)(*v50 + 8);
                if ((v45 & (v45 - 1)) != 0)
                {
                  if (v58 >= v45)
                    v58 %= v45;
                }
                else
                {
                  v58 &= v45 - 1;
                }
                v57 = (_QWORD *)(v131 + 8 * v58);
                goto LABEL_91;
              }
LABEL_92:
              ++*((_QWORD *)&v132 + 1);
LABEL_93:
              if (!v38)
              {
                v60 = valuePtr;
LABEL_97:
                sub_20B8F6BD0((uint64_t)&v128, *(CFStringRef *)(v126 + 16 * v38), v41, v60);
                goto LABEL_98;
              }
              v59 = CFStringCompare(v37, *(CFStringRef *)(v126 + 16 * v38), 0);
              v60 = valuePtr;
              if (v59)
                goto LABEL_97;
              sub_20B8F6D60((uint64_t)&v128, v41, valuePtr);
LABEL_98:
              v61 = (const __CFArray *)CFDictionaryGetValue(v39, kMecabraSupplementalLexiconIdentifiersKey[0]);
              v62 = CFArrayGetCount(v61);
              sub_20B8F6AD8((uint64_t)&v128, v62);
              sub_20B896E08(&v140, v62);
              v63 = (void **)v141.i64[0];
              if ((void **)v141.i64[0] == v140)
              {
                v67 = 0;
              }
              else
              {
                v64 = 0;
                v65 = 0;
                do
                {
                  v66 = (const __CFNumber *)CFArrayGetValueAtIndex(v61, v65);
                  CFNumberGetValue(v66, kCFNumberCFIndexType, &v140[v64]);
                  ++v65;
                  v63 = v140;
                  ++v64;
                }
                while (v65 < (v141.i64[0] - (uint64_t)v140) >> 3);
                v67 = (v141.i64[0] - (uint64_t)v140) >> 1;
              }
              sub_20B8B17F4(v63, (_WORD *)v63 + (v67 & 0x7FFFFFFFFFFFFFFCLL), (uint64_t)&v128);
              v134 += v67;
              if (v140)
              {
                v141.i64[0] = (uint64_t)v140;
                operator delete(v140);
              }
              v36 = v126;
              v37 = *(const __CFString **)(v126 + 16 * v38++);
              if (v38 >= (uint64_t)(*((_QWORD *)&v126 + 1) - v126) >> 4)
                goto LABEL_165;
            }
            *v50 = *v57;
LABEL_91:
            *v57 = v50;
            goto LABEL_92;
          }
LABEL_165:
          v140 = (void **)&v126;
          sub_20B8F6E58(&v140);
          v110 = atomic_load((unsigned __int8 *)(v2 + 97));
          if ((v110 & 1) == 0)
          {
            v111 = malloc_type_malloc(0x48uLL, 0x108004094C1867FuLL);
            if (v111)
            {
              v111[8] = 0;
              *((_OWORD *)v111 + 2) = 0u;
              *((_OWORD *)v111 + 3) = 0u;
              *(_OWORD *)v111 = 0u;
              *((_OWORD *)v111 + 1) = 0u;
              *(_QWORD *)(v2 + 24) = v111;
              if (sub_20B8FC660((uint64_t)v111, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v130 - *((_QWORD *)&v129 + 1)) >> 3), *((uint64_t *)&v129 + 1)) != -1)
              {
                v112 = (_QWORD *)operator new();
                sub_20B8F7EF0(v112, *(_QWORD *)(v2 + 24));
                v113 = (_QWORD *)operator new();
                *v113 = &unk_24C49BF40;
                v113[1] = 0;
                v113[5] = 0;
                v113[6] = v112;
                v114 = *(_QWORD *)(v2 + 16);
                *(_QWORD *)(v2 + 16) = v113;
                if (v114)
                  (*(void (**)(uint64_t))(*(_QWORD *)v114 + 72))(v114);
                v115 = *(void **)(v2 + 32);
                if (v115)
                {
                  *(_QWORD *)(v2 + 40) = v115;
                  operator delete(v115);
                  *(_QWORD *)(v2 + 32) = 0;
                  *(_QWORD *)(v2 + 40) = 0;
                  *(_QWORD *)(v2 + 48) = 0;
                }
                *(_OWORD *)(v2 + 32) = v128;
                *(_QWORD *)(v2 + 48) = v129;
                *(_QWORD *)&v129 = 0;
                v128 = 0uLL;
                if (*(_QWORD *)(v2 + 80))
                {
                  v116 = *(_QWORD **)(v2 + 72);
                  if (v116)
                  {
                    do
                    {
                      v117 = (_QWORD *)*v116;
                      operator delete(v116);
                      v116 = v117;
                    }
                    while (v117);
                  }
                  *(_QWORD *)(v2 + 72) = 0;
                  v118 = *(_QWORD *)(v2 + 64);
                  if (v118)
                  {
                    for (j = 0; j != v118; ++j)
                      *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * j) = 0;
                  }
                  *(_QWORD *)(v2 + 80) = 0;
                }
                v120 = v131;
                *(_QWORD *)&v131 = 0;
                v121 = *(void **)(v2 + 56);
                *(_QWORD *)(v2 + 56) = v120;
                if (v121)
                  operator delete(v121);
                v122 = *((_QWORD *)&v131 + 1);
                v123 = v132;
                *(_QWORD *)(v2 + 72) = v132;
                *(_QWORD *)(v2 + 64) = v122;
                *((_QWORD *)&v131 + 1) = 0;
                v124 = *((_QWORD *)&v132 + 1);
                *(_QWORD *)(v2 + 80) = *((_QWORD *)&v132 + 1);
                *(float *)(v2 + 88) = v133;
                if (v124)
                {
                  v125 = *(_QWORD *)(v123 + 8);
                  if ((v122 & (v122 - 1)) != 0)
                  {
                    if (v125 >= v122)
                      v125 %= v122;
                  }
                  else
                  {
                    v125 &= v122 - 1;
                  }
                  *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v125) = v2 + 72;
                  v132 = 0uLL;
                }
                *(_QWORD *)(v2 + 120) = v136;
                atomic_store(1u, (unsigned __int8 *)(v2 + 96));
                return sub_20B8F59B4((uint64_t)&v128);
              }
              v111 = *(_QWORD **)(v2 + 24);
            }
            else
            {
              *(_QWORD *)(v2 + 24) = 0;
            }
            sub_20B969128((void **)v111);
            *(_QWORD *)(v2 + 24) = 0;
          }
          return sub_20B8F59B4((uint64_t)&v128);
        }
      }
      else
      {
        v126 = 0uLL;
        v127[0] = 0;
        v68 = CFArrayGetCount(v3);
        v69 = v68;
        if (v68 >= 0)
          v70 = v68;
        else
          v70 = v68 + 1;
        v71 = v70 >> 1;
        sub_20B8F5A08(&v126, v70 >> 1);
        if (v69 >= 2)
        {
          v72 = 0;
          v73 = (const __CFString *)*MEMORY[0x24BDBD430];
          do
          {
            v74 = (const __CFString *)CFArrayGetValueAtIndex(v3, 2 * v72);
            v75 = (const __CFString *)CFArrayGetValueAtIndex(v3, (2 * v72) | 1);
            v76 = v75;
            v77 = 0;
            if (v75 && v75 != v73)
              v77 = CFStringGetLength(v75);
            if (v74
              && v74 != v73
              && CFStringGetLength(v74)
              && v77 <= 127
              && (*(_DWORD *)(v2 + 112) != 2 || (sub_20B8D1888(v74) & 1) == 0))
            {
              if (v77 || (v76 = v74, CFStringGetLength(v74) <= 127))
              {
                (*(void (**)(UniChar **__return_ptr, uint64_t, const __CFString *))(*(_QWORD *)v2 + 16))(&v138, v2, v76);
                v78 = v138;
                if ((unint64_t)((char *)v139 - (char *)v138) <= 0xFE)
                {
                  v79 = *((_QWORD *)&v126 + 1);
                  if (*((_QWORD *)&v126 + 1) >= v127[0])
                  {
                    v81 = (uint64_t)(*((_QWORD *)&v126 + 1) - v126) >> 4;
                    v82 = v81 + 1;
                    if ((unint64_t)(v81 + 1) >> 60)
                      sub_20B8F6DC4();
                    v83 = v127[0] - v126;
                    if ((uint64_t)(v127[0] - v126) >> 3 > v82)
                      v82 = v83 >> 3;
                    if ((unint64_t)v83 >= 0x7FFFFFFFFFFFFFF0)
                      v84 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v84 = v82;
                    v143 = v127;
                    if (v84)
                      v84 = (unint64_t)sub_20B8F6ECC(v84);
                    else
                      v85 = 0;
                    v86 = (_QWORD *)(v84 + 16 * v81);
                    v87 = v84 + 16 * v85;
                    v142 = v87;
                    *v86 = 0;
                    v86[1] = 0;
                    v80 = (const void **)(v86 + 2);
                    v141.i64[1] = (uint64_t)(v86 + 2);
                    v88 = (_QWORD *)*((_QWORD *)&v126 + 1);
                    v89 = (_QWORD *)v126;
                    if (*((_QWORD *)&v126 + 1) == (_QWORD)v126)
                    {
                      v91 = vdupq_n_s64(*((unint64_t *)&v126 + 1));
                    }
                    else
                    {
                      do
                      {
                        v90 = *(v88 - 2);
                        v88 -= 2;
                        *v88 = 0;
                        *(v86 - 2) = v90;
                        v86 -= 2;
                        v86[1] = v88[1];
                      }
                      while (v88 != v89);
                      v91 = (int64x2_t)v126;
                      v80 = (const void **)v141.i64[1];
                      v87 = v142;
                    }
                    *(_QWORD *)&v126 = v86;
                    *((_QWORD *)&v126 + 1) = v80;
                    v141 = v91;
                    v92 = v127[0];
                    v127[0] = v87;
                    v142 = v92;
                    v140 = (void **)v91.i64[0];
                    sub_20B8F6F00((uint64_t)&v140);
                  }
                  else
                  {
                    **((_QWORD **)&v126 + 1) = 0;
                    *(_QWORD *)(v79 + 8) = 0;
                    v80 = (const void **)(v79 + 16);
                  }
                  *((_QWORD *)&v126 + 1) = v80;
                  if (v138 == v139)
                  {
                    sub_20B88B52C(v80 - 2, v76);
                  }
                  else
                  {
                    v93 = CFStringCreateWithCharacters(0, v138, v139 - v138);
                    sub_20B87E150(v80 - 2, v93);
                  }
                  *(_QWORD *)(*((_QWORD *)&v126 + 1) - 8) = v72;
                  v78 = v138;
                }
                if (v78)
                {
                  v139 = v78;
                  operator delete(v78);
                }
              }
            }
            ++v72;
          }
          while (v72 != v71);
        }
        v94 = 126 - 2 * __clz((uint64_t)(*((_QWORD *)&v126 + 1) - v126) >> 4);
        if (*((_QWORD *)&v126 + 1) == (_QWORD)v126)
          v95 = 0;
        else
          v95 = v94;
        sub_20B8F6F50(v126, *((const void ***)&v126 + 1), v95, 1);
        v97 = *((_QWORD *)&v126 + 1);
        v96 = v126;
        if ((_QWORD)v126 != *((_QWORD *)&v126 + 1))
        {
          v98 = *(const __CFArray **)(v2 + 104);
          v99 = 1;
          do
          {
            v100 = (const __CFString *)CFArrayGetValueAtIndex(v98, 2 * *(_QWORD *)(v96 + 8));
            v101 = CFStringGetLength(v100);
            v102 = v99 + v101 + CFStringGetLength(*(CFStringRef *)v96);
            v99 = v102 + 4;
            v96 += 16;
          }
          while (v96 != v97);
          sub_20B87D570((void **)&v128, v102 + 4);
          sub_20B8F69FC((void **)&v129 + 1, (uint64_t)(*((_QWORD *)&v126 + 1) - v126) >> 4);
          sub_20B8F6AD8((uint64_t)&v128, 0);
          v103 = v126;
          if (*((_QWORD *)&v126 + 1) != (_QWORD)v126)
          {
            v104 = 0;
            v105 = 0;
            v106 = 0;
            do
            {
              v107 = (const __CFString *)CFArrayGetValueAtIndex(v98, 2 * *(_QWORD *)(v103 + v104 + 8));
              v108 = v107;
              if (v107)
                v109 = CFStringGetLength(v107);
              else
                v109 = 0;
              if (v136 < v109)
                v136 = v109;
              if (v104 && CFStringCompare(v105, *(CFStringRef *)(v126 + v104), 0) == kCFCompareEqualTo)
                sub_20B8F6D60((uint64_t)&v128, v108, 0);
              else
                sub_20B8F6BD0((uint64_t)&v128, *(CFStringRef *)(v126 + v104), v108, 0);
              v103 = v126;
              v105 = *(const __CFString **)(v126 + v104);
              ++v106;
              v104 += 16;
            }
            while (v106 < (uint64_t)(*((_QWORD *)&v126 + 1) - v126) >> 4);
          }
          goto LABEL_165;
        }
      }
      v140 = (void **)&v126;
      sub_20B8F6E58(&v140);
      return sub_20B8F59B4((uint64_t)&v128);
    }
  }
  return result;
}

void sub_20B8F57F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  MEMORY[0x20BD39CB0](v7, 0x10A1C40079592F6);
  sub_20B8F59B4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8F58EC(CFArrayRef theArray, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  const __CFDictionary *ValueAtIndex;
  const __CFString *v8;
  CFIndex Length;
  const __CFString *Value;
  CFIndex v11;
  const __CFArray *v12;

  if (a2 == a3)
    return 1;
  v4 = a2;
  v6 = 1;
  do
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, *(_QWORD *)(v4 + 8));
    v8 = *(const __CFString **)v4;
    v4 += 16;
    Length = CFStringGetLength(v8);
    Value = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, kMecabraSupplementalLexiconSurfaceKey[0]);
    v11 = CFStringGetLength(Value);
    v12 = (const __CFArray *)CFDictionaryGetValue(ValueAtIndex, kMecabraSupplementalLexiconIdentifiersKey[0]);
    v6 += Length + v11 + 4 * (CFArrayGetCount(v12) & 0x1FFFFFFFFFFFFFFFLL) + 5;
  }
  while (v4 != a3);
  return v6;
}

uint64_t sub_20B8F59B4(uint64_t a1)
{
  void *v2;
  void *v3;

  sub_20B84055C(a1 + 48);
  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_20B8F59FC(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

_QWORD *sub_20B8F5A08(_QWORD *result, unint64_t a2)
{
  char **v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int64x2_t v10;
  char *v11;
  uint64_t v12;
  int64x2_t v13;
  char *v14;
  _QWORD *v15;

  if (a2 > (uint64_t)(result[2] - *result) >> 4)
  {
    if (a2 >> 60)
      sub_20B8F6DC4();
    v2 = (char **)result;
    v3 = result[1] - *result;
    v15 = result + 2;
    v4 = (char *)sub_20B8F6ECC(a2);
    v7 = *v2;
    v6 = v2[1];
    if (v6 == *v2)
    {
      v10 = vdupq_n_s64((unint64_t)v6);
      v8 = &v4[v3];
    }
    else
    {
      v8 = &v4[v3];
      do
      {
        v9 = *((_QWORD *)v6 - 2);
        v6 -= 16;
        *(_QWORD *)v6 = 0;
        *((_QWORD *)v8 - 2) = v9;
        v8 -= 16;
        *((_QWORD *)v8 + 1) = *((_QWORD *)v6 + 1);
      }
      while (v6 != v7);
      v10 = *(int64x2_t *)v2;
    }
    *v2 = v8;
    v2[1] = &v4[v3];
    v13 = v10;
    v11 = v2[2];
    v2[2] = &v4[16 * v5];
    v14 = v11;
    v12 = v10.i64[0];
    return (_QWORD *)sub_20B8F6F00((uint64_t)&v12);
  }
  return result;
}

uint64_t sub_20B8F5AC8(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, unint64_t a6, unsigned int a7, uint64_t a8)
{
  unsigned __int8 v8;
  int *v9;
  unsigned int *v11;
  uint64_t v12[2];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _OWORD v18[16];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (!a4)
    return 0;
  v8 = atomic_load((unsigned __int8 *)(a1 + 96));
  if ((v8 & 1) == 0 || !*(_QWORD *)(a1 + 16))
    return 0;
  if ((a7 & 0x40) != 0)
  {
    v19 = 0;
    memset(v18, 0, sizeof(v18));
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v13 = 0u;
    v11 = *(unsigned int **)(a1 + 24);
    *((_QWORD *)&v13 + 1) = a3;
    LODWORD(v14) = 2 * a4;
    *((_QWORD *)&v14 + 1) = a6;
    *(_QWORD *)&v15 = a5;
    *((_QWORD *)&v15 + 1) = a8;
    LODWORD(v16) = 1;
    *((_QWORD *)&v17 + 1) = (char *)v18 + 2;
    BYTE1(v18[0]) = 1;
    v12[0] = (uint64_t)v11;
    v12[1] = a2;
    return sub_20BA19018(v11, (uint64_t)v12, 0.0);
  }
  else
  {
    v9 = *(int **)(a1 + 24);
    v12[0] = 0;
    if ((a7 & 0x700) != 0)
      sub_20BA16F20((uint64_t)v9, *v9, v12, a3, 2 * a4, a6, a5, -1, (uint64_t)a3, (a7 >> 7) & 0xE, 0);
    else
      sub_20B9692E0((uint64_t)v9, *v9, a3, 2 * a4, a6, (unint64_t *)v12, a5, (__int16)a3);
    return v12[0];
  }
}

void sub_20B8F5C28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 v5;
  unsigned int (***v6)(_QWORD, uint64_t, uint64_t, unsigned int *);
  char *v8;
  char *v9;
  char *v10;
  BOOL v11;
  char v12;
  char *v13;
  char *v14;
  unsigned int v15;

  if (a3)
  {
    v5 = atomic_load((unsigned __int8 *)(a1 + 96));
    if ((v5 & 1) != 0)
    {
      v6 = *(unsigned int (****)(_QWORD, uint64_t, uint64_t, unsigned int *))(a1 + 16);
      if (v6)
      {
        v15 = 0;
        if ((**v6)(v6, a2, 2 * a3, &v15))
        {
          sub_20B8F5CFC(a1, v15, &v13);
          v12 = 0;
          v8 = v13;
          v9 = v14;
          if (v13 != v14)
          {
            v10 = v13;
            do
            {
              (*(void (**)(uint64_t, char *, char *))(a4 + 16))(a4, v10, &v12);
              v10 += 56;
              if (v12)
                v11 = 1;
              else
                v11 = v10 == v9;
            }
            while (!v11);
          }
          if (v8)
            operator delete(v8);
        }
      }
    }
  }
}

void sub_20B8F5CE4(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_20B8F5CFC(uint64_t a1@<X0>, unsigned int a2@<W1>, char **a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  char *v9;
  unsigned int v10;
  uint64_t v11;
  char *v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  __int128 v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  char *v26;
  _QWORD v27[2];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  v27[0] = a1 + 32;
  if (a2)
  {
    v27[1] = *(_QWORD *)(a1 + 32) + 2 * a2;
    v4 = sub_20B8F7C50(v27);
    v6 = v5;
    v7 = sub_20B8F7CB8(v27);
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    if (v7)
    {
      v8 = v7;
      v9 = (char *)sub_20B8F7E38(v7);
      v10 = 0;
      v12 = &v9[56 * v11];
      *a3 = v9;
      a3[1] = v9;
      a3[2] = v12;
      v13 = v9;
      do
      {
        sub_20B8F7D04(v27, v4, v6, (uint64_t)&v28);
        if (v13 >= v12)
        {
          v17 = 0x6DB6DB6DB6DB6DB7 * ((v13 - v9) >> 3) + 1;
          if (v17 > 0x492492492492492)
            sub_20B8F6DC4();
          if (0xDB6DB6DB6DB6DB6ELL * ((v12 - v9) >> 3) > v17)
            v17 = 0xDB6DB6DB6DB6DB6ELL * ((v12 - v9) >> 3);
          if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v12 - v9) >> 3)) >= 0x249249249249249)
            v18 = 0x492492492492492;
          else
            v18 = v17;
          if (v18)
            v18 = (unint64_t)sub_20B8F7E38(v18);
          else
            v19 = 0;
          v20 = v18 + 8 * ((v13 - v9) >> 3);
          v21 = v29;
          *(_OWORD *)v20 = v28;
          *(_OWORD *)(v20 + 16) = v21;
          *(_OWORD *)(v20 + 32) = v30;
          *(_QWORD *)(v20 + 48) = v31;
          if (v13 == v9)
          {
            v26 = (char *)(v18 + 8 * ((v13 - v9) >> 3));
          }
          else
          {
            v22 = v18 + 8 * ((v13 - v9) >> 3);
            do
            {
              v23 = *(_OWORD *)(v13 - 56);
              v24 = *(_OWORD *)(v13 - 40);
              v25 = *(_OWORD *)(v13 - 24);
              v26 = (char *)(v22 - 56);
              *(_QWORD *)(v22 - 8) = *((_QWORD *)v13 - 1);
              *(_OWORD *)(v22 - 24) = v25;
              *(_OWORD *)(v22 - 40) = v24;
              *(_OWORD *)(v22 - 56) = v23;
              v13 -= 56;
              v22 -= 56;
            }
            while (v13 != v9);
          }
          v12 = (char *)(v18 + 56 * v19);
          v13 = (char *)(v20 + 56);
          *a3 = v26;
          a3[1] = (char *)(v20 + 56);
          a3[2] = v12;
          if (v9)
            operator delete(v9);
          v9 = v26;
        }
        else
        {
          v14 = v28;
          v15 = v29;
          v16 = v30;
          *((_QWORD *)v13 + 6) = v31;
          *((_OWORD *)v13 + 1) = v15;
          *((_OWORD *)v13 + 2) = v16;
          *(_OWORD *)v13 = v14;
          v13 += 56;
        }
        a3[1] = v13;
        ++v10;
      }
      while (v10 < v8);
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

void sub_20B8F5F10(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B8F5F30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;
  unsigned __int8 v7;
  uint64_t v8;
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  if (result)
  {
    v7 = atomic_load((unsigned __int8 *)(a1 + 96));
    if ((v7 & 1) != 0)
    {
      result = *(_QWORD **)(a1 + 16);
      if (result)
      {
        v9[0] = &off_24C49C290;
        v9[1] = a1;
        v9[2] = a3;
        v10 = v9;
        (*(void (**)(_QWORD *, uint64_t, _QWORD *))(*result + 80))(result, a2, v9);
        result = v10;
        if (v10 == v9)
        {
          v8 = 4;
          result = v9;
        }
        else
        {
          if (!v10)
            return result;
          v8 = 5;
        }
        return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
      }
    }
  }
  return result;
}

void sub_20B8F600C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_BYTE *sub_20B8F6044(_BYTE *result, uint64_t a2, uint64_t a3)
{
  _BYTE *v3;
  unsigned __int8 v4;
  __int16 v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)result + 28) == 3)
  {
    v3 = result;
    v4 = atomic_load(result + 96);
    if ((v4 & 1) != 0)
    {
      if (*((_QWORD *)result + 2))
      {
        result = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
        if (result)
        {
          v7 = *(_WORD *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
          v8 = *((_QWORD *)v3 + 2);
          v9 = operator new(0x20uLL);
          *v9 = &off_24C49C310;
          v9[1] = v3;
          v9[2] = a3;
          *((_WORD *)v9 + 12) = v7;
          v12 = v9;
          sub_20B8F9E5C(v8, a2, (uint64_t)v11, 1u, 1);
          result = v12;
          if (v12 == v11)
          {
            v10 = 4;
            result = v11;
          }
          else
          {
            if (!v12)
              return result;
            v10 = 5;
          }
          return (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v10))();
        }
      }
    }
  }
  return result;
}

void sub_20B8F6168(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

unsigned __int8 *sub_20B8F61A0(unsigned __int8 *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 *v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[3];
  unsigned __int8 *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v7 = a4;
  if (a3)
  {
    v4 = result;
    v5 = atomic_load(result + 96);
    if ((v5 & 1) != 0)
    {
      result = (unsigned __int8 *)*((_QWORD *)result + 2);
      if (result)
      {
        v8[0] = &off_24C46A978;
        v8[1] = v4;
        v8[2] = &v7;
        v9 = (unsigned __int8 *)v8;
        (*(void (**)(unsigned __int8 *, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)result + 16))(result, a2, 2 * a3, v8);
        result = v9;
        if (v9 == (unsigned __int8 *)v8)
        {
          v6 = 4;
          result = (unsigned __int8 *)v8;
        }
        else
        {
          if (!v9)
            return result;
          v6 = 5;
        }
        return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8 * v6))(result);
      }
    }
  }
  return result;
}

void sub_20B8F6264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B8F62A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;
  unsigned __int8 v9;
  uint64_t v10;
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  if (result)
  {
    v9 = atomic_load((unsigned __int8 *)(a1 + 96));
    if ((v9 & 1) != 0)
    {
      result = *(_QWORD **)(a1 + 16);
      if (result)
      {
        v11[0] = &off_24C49C390;
        v11[1] = a1;
        v11[2] = a3;
        v12 = v11;
        (*(void (**)(_QWORD *, uint64_t, _QWORD *, uint64_t))(*result + 112))(result, a2, v11, a4);
        result = v12;
        if (v12 == v11)
        {
          v10 = 4;
          result = v11;
        }
        else
        {
          if (!v12)
            return result;
          v10 = 5;
        }
        return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
      }
    }
  }
  return result;
}

void sub_20B8F6384(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_BYTE *sub_20B8F63BC(_BYTE *result, uint64_t a2, uint64_t a3, int a4)
{
  _BYTE *v4;
  unsigned __int8 v5;
  __int16 v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)result + 28) == 3)
  {
    v4 = result;
    v5 = atomic_load(result + 96);
    if ((v5 & 1) != 0)
    {
      if (*((_QWORD *)result + 2))
      {
        result = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
        if (result)
        {
          v9 = *(_WORD *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
          v10 = *((_QWORD *)v4 + 2);
          v11 = operator new(0x20uLL);
          *v11 = &off_24C49C490;
          v11[1] = v4;
          v11[2] = a3;
          *((_WORD *)v11 + 12) = v9;
          v14 = v11;
          sub_20B8F651C(v10, a2, 1, (uint64_t)v13, a4);
          result = v14;
          if (v14 == v13)
          {
            v12 = 4;
            result = v13;
          }
          else
          {
            if (!v14)
              return result;
            v12 = 5;
          }
          return (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v12))();
        }
      }
    }
  }
  return result;
}

void sub_20B8F64E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B8F651C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  _QWORD *result;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v7[0] = &unk_24C49C410;
  v7[1] = a4;
  v8 = v7;
  sub_20B8FA044(a1, a2, a3, (uint64_t)v7, a5);
  result = v8;
  if (v8 == v7)
  {
    v6 = 4;
    result = v7;
  }
  else
  {
    if (!v8)
      return result;
    v6 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

void sub_20B8F65B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B8F65F0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD v23[2];
  _BYTE v24[16];
  unsigned __int16 *v25;
  uint64_t v26;
  char v27;

  v5 = atomic_load((unsigned __int8 *)(result + 96));
  if ((v5 & 1) != 0)
  {
    if (*(_QWORD *)(result + 16))
    {
      v27 = 0;
      v6 = *(_QWORD *)(result + 32);
      v7 = *(_QWORD *)(result + 40);
      v21 = result + 32;
      v22 = v6 + 2;
      if (v7 - v6 >= 3)
      {
        while (1)
        {
          v12 = sub_20B8F7C50(&v21);
          v14 = v13;
          result = sub_20B8F7CB8(&v21);
          if ((_DWORD)result)
            break;
LABEL_13:
          if (v22 >= *(_QWORD *)(v21 + 8))
            return result;
        }
        v15 = result;
        v16 = 0;
        while (1)
        {
          sub_20B8F7D04(&v21, v12, v14, (uint64_t)v24);
          v17 = (a4 - v26) & ~((a4 - v26) >> 63);
          v18 = v26 + a4;
          if (a3 < v26 + a4)
            v18 = a3;
          v19 = v18 - v17;
          v20 = a2 + 2 * v17;
          if (!a2)
            v19 = 0;
          v23[0] = v20;
          v23[1] = v19;
          result = sub_20B8F7D68(v23, v25, v26, 0);
          if (result != -1)
          {
            result = (*(uint64_t (**)(uint64_t, _BYTE *, char *))(a5 + 16))(a5, v24, &v27);
            if (v27)
              break;
          }
          if (++v16 >= v15)
            goto LABEL_13;
        }
      }
    }
  }
  return result;
}

void sub_20B8F671C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned __int8 v6;
  void (***v7)(_QWORD, uint64_t, uint64_t, unsigned int *);
  unsigned int v8;

  if (a3
    && (v6 = atomic_load((unsigned __int8 *)(a1 + 96)), (v6 & 1) != 0)
    && (v7 = *(void (****)(_QWORD, uint64_t, uint64_t, unsigned int *))(a1 + 16)) != 0)
  {
    v8 = 0;
    (**v7)(v7, a2, 2 * a3, &v8);
    sub_20B8F5CFC(a1, v8, (char **)a4);
  }
  else
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
  }
}

void sub_20B8F6790(const __CFString *a1@<X1>, UniChar **a2@<X8>)
{
  UniChar *v3;
  UniChar *v4;
  char v5;
  UniChar *v6;
  unsigned int v7;
  __int16 v8;
  UniChar *v9;
  UniChar *v10;
  UniChar *v11;

  sub_20B8D0790(a1, &v9);
  v3 = v9;
  v4 = v10;
  if (v9 == v10)
    goto LABEL_15;
  v5 = 0;
  v6 = v9;
  do
  {
    v7 = *v6;
    if (v7 >= 0x41 && v7 <= 0x30F4 && (unsigned __int16)(v7 - 91) >= 0x3046u)
    {
      if (v7 <= 0x30A0)
      {
        if (v7 - 65 > 0x19)
        {
LABEL_11:
          v5 = 1;
          goto LABEL_12;
        }
        v8 = 32;
      }
      else
      {
        v8 = -96;
      }
      *v6 = v8 + v7;
      goto LABEL_11;
    }
LABEL_12:
    ++v6;
  }
  while (v6 != v4);
  if ((v5 & 1) != 0)
  {
    *a2 = v3;
    a2[1] = v4;
    a2[2] = v11;
    return;
  }
LABEL_15:
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (v3)
  {
    v10 = v3;
    operator delete(v3);
  }
}

void sub_20B8F685C(const __CFString *a1@<X1>, uint64_t a2@<X8>)
{
  unsigned __int16 *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  _WORD *v9;
  __int16 *v10;
  void *__p[2];
  unsigned __int8 v12;
  void *v13;
  uint64_t v14;
  unsigned __int8 v15;

  sub_20B8D09C0(a1, &v13);
  if ((v15 & 0x80u) == 0)
    v3 = (unsigned __int16 *)&v13;
  else
    v3 = (unsigned __int16 *)v13;
  if ((v15 & 0x80u) == 0)
    v4 = v15;
  else
    v4 = v14;
  sub_20B9DEF34(v3, v4, __p);
  v5 = v14;
  if ((v15 & 0x80u) == 0)
    v5 = v15;
  v6 = v12;
  if ((v12 & 0x80u) == 0)
    v7 = v12;
  else
    v7 = (uint64_t)__p[1];
  if (v5 != v7)
  {
    if ((v12 & 0x80u) == 0)
      v10 = (__int16 *)__p;
    else
      v10 = (__int16 *)__p[0];
    goto LABEL_26;
  }
  if (v5)
  {
    v8 = 0;
    v9 = &v13;
    if ((v15 & 0x80u) != 0)
      v9 = v13;
    if ((v12 & 0x80u) == 0)
      v10 = (__int16 *)__p;
    else
      v10 = (__int16 *)__p[0];
    while (v10[v8] == v9[v8])
    {
      if (v5 == ++v8)
        goto LABEL_21;
    }
LABEL_26:
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    sub_20B8F7E80((char *)a2, v10, &v10[v7], v7);
    if ((v12 & 0x80) == 0)
      goto LABEL_28;
    goto LABEL_27;
  }
LABEL_21:
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  if ((v6 & 0x80) == 0)
    goto LABEL_28;
LABEL_27:
  operator delete(__p[0]);
LABEL_28:
  if ((char)v15 < 0)
    operator delete(v13);
}

void sub_20B8F6978(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_20B8F69B0(uint64_t a1)
{
  sub_20B8F4970(a1);
  JUMPOUT(0x20BD39CB0);
}

void sub_20B8F69D8(uint64_t a1)
{
  sub_20B8F4970(a1);
  JUMPOUT(0x20BD39CB0);
}

void sub_20B8F69FC(void **a1, unint64_t a2)
{
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  __int128 v11;

  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_20B8F6DC4();
    v3 = ((_BYTE *)a1[1] - (_BYTE *)*a1) / 24;
    v4 = (char *)sub_20B871730(a2);
    v5 = &v4[24 * v3];
    v7 = &v4[24 * v6];
    v9 = (char *)*a1;
    v8 = (char *)a1[1];
    v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        v11 = *(_OWORD *)(v8 - 24);
        *((_QWORD *)v10 - 1) = *((_QWORD *)v8 - 1);
        *(_OWORD *)(v10 - 24) = v11;
        v10 -= 24;
        v8 -= 24;
      }
      while (v8 != v9);
      v8 = (char *)*a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
      operator delete(v8);
  }
}

char *sub_20B8F6AD8(uint64_t a1, __int16 a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  _WORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  __int16 v20;
  char *result;
  uint64_t v22;

  v4 = *(unsigned int *)(a1 + 88);
  v6 = *(char **)a1;
  v5 = *(char **)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v7 = a1 + 16;
  v8 = v9;
  if ((unint64_t)v5 >= v9)
  {
    v12 = v5 - v6;
    if (v5 - v6 <= -3)
      sub_20B80CDD8();
    v13 = v12 >> 1;
    v14 = v8 - (_QWORD)v6;
    if (v14 <= (v12 >> 1) + 1)
      v15 = v13 + 1;
    else
      v15 = v14;
    if (v14 >= 0x7FFFFFFFFFFFFFFELL)
      v16 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v16 = v15;
    if (v16)
    {
      v17 = (char *)sub_20B80FD48(v7, v16);
      v18 = *(char **)a1;
      v5 = *(char **)(a1 + 8);
    }
    else
    {
      v17 = 0;
      v18 = v6;
    }
    v10 = &v17[2 * v13];
    v19 = &v17[2 * v16];
    *(_WORD *)v10 = 0;
    v11 = v10 + 2;
    while (v5 != v18)
    {
      v20 = *((_WORD *)v5 - 1);
      v5 -= 2;
      *((_WORD *)v10 - 1) = v20;
      v10 -= 2;
    }
    *(_QWORD *)a1 = v10;
    *(_QWORD *)(a1 + 8) = v11;
    *(_QWORD *)(a1 + 16) = v19;
    if (v18)
    {
      operator delete(v18);
      v10 = *(char **)a1;
    }
  }
  else
  {
    *(_WORD *)v5 = 0;
    v10 = v6;
    v11 = v5 + 2;
  }
  result = &v6[2 * v4];
  *(_QWORD *)(a1 + 8) = v11;
  v22 = *(unsigned int *)(a1 + 88);
  *(_DWORD *)(a1 + 88) = v22 + 1;
  *(_WORD *)&v10[2 * v22] = a2;
  return result;
}

char *sub_20B8F6BD0(uint64_t a1, CFStringRef theString, const __CFString *a3, __int16 a4)
{
  CFIndex Length;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int16 v23;

  Length = CFStringGetLength(theString);
  v10 = *(_QWORD **)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  if ((unint64_t)v10 >= v9)
  {
    v12 = *(_QWORD *)(a1 + 24);
    v13 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v10 - v12) >> 3);
    v14 = v13 + 1;
    if (v13 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_20B8F6DC4();
    v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - v12) >> 3);
    if (2 * v15 > v14)
      v14 = 2 * v15;
    if (v15 >= 0x555555555555555)
      v16 = 0xAAAAAAAAAAAAAAALL;
    else
      v16 = v14;
    if (v16)
      v16 = (unint64_t)sub_20B871730(v16);
    else
      v17 = 0;
    v18 = (_QWORD *)(v16 + 24 * v13);
    v19 = v16 + 24 * v17;
    *v18 = 0;
    v18[1] = 0;
    v18[2] = 0;
    v11 = v18 + 3;
    v21 = *(char **)(a1 + 24);
    v20 = *(char **)(a1 + 32);
    if (v20 != v21)
    {
      do
      {
        v22 = *(_OWORD *)(v20 - 24);
        *(v18 - 1) = *((_QWORD *)v20 - 1);
        *(_OWORD *)(v18 - 3) = v22;
        v18 -= 3;
        v20 -= 24;
      }
      while (v20 != v21);
      v20 = *(char **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 24) = v18;
    *(_QWORD *)(a1 + 32) = v11;
    *(_QWORD *)(a1 + 40) = v19;
    if (v20)
      operator delete(v20);
  }
  else
  {
    *v10 = 0;
    v10[1] = 0;
    v11 = v10 + 3;
    v10[2] = 0;
  }
  *(_QWORD *)(a1 + 32) = v11;
  *((_DWORD *)v11 - 2) = *(_DWORD *)(a1 + 88);
  *(v11 - 2) = 2 * Length;
  sub_20B8F6AD8(a1, Length);
  *(_QWORD *)(*(_QWORD *)(a1 + 32) - 24) = sub_20B8F6DD8(a1, theString);
  *(_QWORD *)(a1 + 96) = sub_20B8F6AD8(a1, 1);
  v23 = CFStringGetLength(a3);
  sub_20B8F6AD8(a1, v23);
  sub_20B8F6DD8(a1, a3);
  return sub_20B8F6AD8(a1, a4);
}

char *sub_20B8F6D60(uint64_t a1, CFStringRef theString, __int16 a3)
{
  __int16 Length;

  ++**(_WORD **)(a1 + 96);
  Length = CFStringGetLength(theString);
  sub_20B8F6AD8(a1, Length);
  sub_20B8F6DD8(a1, theString);
  return sub_20B8F6AD8(a1, a3);
}

void sub_20B8F6DC4()
{
  sub_20B80AD80("vector");
}

uint64_t sub_20B8F6DD8(uint64_t a1, CFStringRef theString)
{
  uint64_t v4;
  CFIndex Length;
  CFRange v7;

  v4 = *(_QWORD *)a1 + 2 * *(unsigned int *)(a1 + 88);
  Length = CFStringGetLength(theString);
  sub_20B87C6B4(a1, Length + ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 1));
  v7.location = 0;
  v7.length = Length;
  CFStringGetCharacters(theString, v7, (UniChar *)(*(_QWORD *)a1 + 2 * *(unsigned int *)(a1 + 88)));
  *(_DWORD *)(a1 + 88) += Length;
  return v4;
}

void sub_20B8F6E58(void ***a1)
{
  void **v1;
  const void **v2;
  const void **v4;
  void *v5;

  v1 = *a1;
  v2 = (const void **)**a1;
  if (v2)
  {
    v4 = (const void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 2;
        sub_20B87E150(v4, 0);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *sub_20B8F6ECC(unint64_t a1)
{
  if (a1 >> 60)
    sub_20B800BC0();
  return operator new(16 * a1);
}

uint64_t sub_20B8F6F00(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    sub_20B87E150((const void **)(i - 16), 0);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20B8F6F50(unint64_t a1, const void **a2, uint64_t a3, char a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  const void *v14;
  uint64_t v15;
  const void *v16;
  const void *v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  const void *v22;
  BOOL v23;
  const void *v24;
  const void *v25;
  unint64_t v26;
  int v27;
  unint64_t v28;
  const void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const void **v33;
  const void *v34;
  const void *v35;
  uint64_t v36;
  uint64_t v37;
  const void *v38;
  uint64_t v39;
  int64_t v40;
  int64_t v41;
  int64_t v42;
  uint64_t v43;
  const void **v44;
  uint64_t v45;
  const void *v46;
  const void **v47;
  const void *v48;
  uint64_t v49;
  uint64_t v50;
  const void **v51;
  uint64_t v52;
  const void **v53;
  const void *v54;
  const void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  const void *v62;
  const void *v63;
  uint64_t v64;
  unint64_t v65;
  const void **v66;
  const void *v67;
  const void **v68;
  const void *v69;
  uint64_t v71;
  const void **v72;
  const void *v73;
  const void *v74;
  uint64_t v75;
  const void *v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  const void **v81;
  const void *v82;
  const void *v83;
  const void *v84;

void sub_20B8F77A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef cf, const void *a13)
{
  sub_20B87E150(&a13, 0);
  _Unwind_Resume(a1);
}

void sub_20B8F7824(uint64_t a1, uint64_t a2)
{
  const void *v4;
  uint64_t v5;
  const void *v6;

  v4 = *(const void **)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = 0;
  v6 = *(const void **)a2;
  *(_QWORD *)a2 = 0;
  sub_20B87E150((const void **)a1, v6);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  sub_20B87E150((const void **)a2, v4);
  *(_QWORD *)(a2 + 8) = v5;
}

void sub_20B8F7878(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  int v7;
  uint64_t v8;

  v6 = sub_20B8F482C(a2, a1);
  v7 = sub_20B8F482C(a3, a2);
  if ((v6 & 1) != 0)
  {
    if (v7)
    {
      v8 = a1;
    }
    else
    {
      sub_20B8F7824(a1, a2);
      if (!sub_20B8F482C(a3, a2))
        return;
      v8 = a2;
    }
    sub_20B8F7824(v8, a3);
  }
  else if (v7)
  {
    sub_20B8F7824(a2, a3);
    if (sub_20B8F482C(a2, a1))
      sub_20B8F7824(a1, a2);
  }
}

BOOL sub_20B8F7930(uint64_t a1, const void **a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  const void **v8;
  uint64_t v9;
  int v10;
  const void *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  uint64_t v16;
  const void *v17;
  const void *v18;

  v4 = ((uint64_t)a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (uint64_t)(a2 - 2);
      if (sub_20B8F482C((uint64_t)(a2 - 2), a1))
        sub_20B8F7824(a1, v6);
      return 1;
    case 3:
      sub_20B8F7878(a1, a1 + 16, (uint64_t)(a2 - 2));
      return 1;
    case 4:
      sub_20B8F7AFC(a1, a1 + 16, a1 + 32, (uint64_t)(a2 - 2));
      return 1;
    case 5:
      sub_20B8F7B90(a1, a1 + 16, a1 + 32, a1 + 48, (uint64_t)(a2 - 2));
      return 1;
    default:
      v7 = a1 + 32;
      sub_20B8F7878(a1, a1 + 16, a1 + 32);
      v8 = (const void **)(a1 + 48);
      if ((const void **)(a1 + 48) == a2)
        return 1;
      v9 = 0;
      v10 = 0;
      break;
  }
  while (1)
  {
    if (sub_20B8F482C((uint64_t)v8, v7))
    {
      v11 = *v8;
      v12 = v8[1];
      *v8 = 0;
      v17 = v11;
      v18 = v12;
      v13 = v9;
      while (1)
      {
        v14 = a1 + v13;
        v15 = *(const void **)(a1 + v13 + 32);
        *(_QWORD *)(a1 + v13 + 32) = 0;
        sub_20B87E150((const void **)(a1 + v13 + 48), v15);
        *(_QWORD *)(a1 + v13 + 56) = *(_QWORD *)(a1 + v13 + 40);
        if (v13 == -32)
          break;
        v13 -= 16;
        if ((sub_20B8F482C((uint64_t)&v17, v14 + 16) & 1) == 0)
        {
          v16 = a1 + v13 + 48;
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      sub_20B87E150((const void **)v16, v17);
      *(_QWORD *)(v16 + 8) = v18;
      if (++v10 == 8)
        return v8 + 2 == a2;
    }
    v7 = (uint64_t)v8;
    v9 += 16;
    v8 += 2;
    if (v8 == a2)
      return 1;
  }
}

void sub_20B8F7AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  sub_20B87E150(&a9, 0);
  _Unwind_Resume(a1);
}

void sub_20B8F7AFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_20B8F7878(a1, a2, a3);
  if (sub_20B8F482C(a4, a3))
  {
    sub_20B8F7824(a3, a4);
    if (sub_20B8F482C(a3, a2))
    {
      sub_20B8F7824(a2, a3);
      if (sub_20B8F482C(a2, a1))
        sub_20B8F7824(a1, a2);
    }
  }
}

void sub_20B8F7B90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_20B8F7AFC(a1, a2, a3, a4);
  if (sub_20B8F482C(a5, a4))
  {
    sub_20B8F7824(a4, a5);
    if (sub_20B8F482C(a4, a3))
    {
      sub_20B8F7824(a3, a4);
      if (sub_20B8F482C(a3, a2))
      {
        sub_20B8F7824(a2, a3);
        if (sub_20B8F482C(a2, a1))
          sub_20B8F7824(a1, a2);
      }
    }
  }
}

uint64_t sub_20B8F7C50(_QWORD *a1)
{
  unsigned int v2;
  uint64_t result;
  unint64_t v4;

  v2 = sub_20B8F7CB8(a1);
  result = a1[1];
  v4 = result + 2 * v2;
  if (v4 > *(_QWORD *)(*a1 + 8))
    __assert_rtn("readString", "DynamicDictionary.cpp", 296, "m_ptr + keyLen <= m_data.data() + m_data.size()");
  a1[1] = v4;
  return result;
}

uint64_t sub_20B8F7CB8(_QWORD *a1)
{
  unsigned __int16 *v1;
  uint64_t v2;

  v1 = (unsigned __int16 *)a1[1];
  if ((unint64_t)v1 >= *(_QWORD *)(*a1 + 8))
    __assert_rtn("readUniChar", "DynamicDictionary.cpp", 290, "m_ptr < m_data.data() + m_data.size()");
  v2 = *v1;
  a1[1] = v1 + 1;
  return v2;
}

uint64_t sub_20B8F7D04@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  *(_QWORD *)(a4 + 48) = 0;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_QWORD *)a4 = a2;
  *(_QWORD *)(a4 + 8) = a3;
  *(_QWORD *)(a4 + 16) = sub_20B8F7C50(a1);
  *(_QWORD *)(a4 + 24) = v6;
  result = sub_20B8F7CB8(a1);
  *(_WORD *)(a4 + 32) = result;
  if ((_DWORD)result)
  {
    result = sub_20B8F7CB8(a1);
    v8 = a1[1];
    a1[1] = v8 + 8 * result;
    *(_QWORD *)(a4 + 40) = v8;
    *(_QWORD *)(a4 + 48) = result;
  }
  return result;
}

uint64_t sub_20B8F7D68(_QWORD *a1, unsigned __int16 *a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  unsigned __int16 *v5;
  uint64_t v6;
  uint64_t i;
  unsigned __int16 *v8;
  uint64_t v10;
  uint64_t v11;

  v4 = a1[1];
  if (v4 < a4)
    return -1;
  if (a3)
  {
    v5 = (unsigned __int16 *)(*a1 + 2 * a4);
    v6 = *a1 + 2 * v4;
    for (i = (v6 - (uint64_t)v5) >> 1; i >= a3; i = (v6 - 2 - (uint64_t)v8) >> 1)
    {
      if (i - a3 == -1)
        break;
      v10 = i + 1;
      v8 = v5;
      while (*v5 != *a2)
      {
        ++v5;
        --v10;
        ++v8;
        if (a3 == v10)
          goto LABEL_5;
      }
      v11 = 0;
      while (a2[v11] == v5[v11])
      {
        if (a3 == ++v11)
          goto LABEL_6;
      }
      ++v5;
    }
LABEL_5:
    v8 = (unsigned __int16 *)v6;
    v5 = (unsigned __int16 *)v6;
LABEL_6:
    if (v5 == (unsigned __int16 *)v6)
      return -1;
    else
      return ((uint64_t)v8 - *a1) >> 1;
  }
  return a4;
}

void *sub_20B8F7E38(unint64_t a1)
{
  if (a1 >= 0x492492492492493)
    sub_20B800BC0();
  return operator new(56 * a1);
}

char *sub_20B8F7E80(char *result, __int16 *a2, __int16 *a3, uint64_t a4)
{
  char *v6;
  _WORD *v7;
  __int16 v8;

  if (a4)
  {
    v6 = result;
    result = sub_20B80FD0C(result, a4);
    v7 = (_WORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_20B8F7ED4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B8F7EF0(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v6[0] = &off_24C49BE40;
  v7 = v6;
  *a1 = &unk_24C49BDB8;
  a1[1] = a2;
  sub_20B8F892C((uint64_t)(a1 + 2), (uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

BOOL sub_20B8F7F9C(uint64_t a1, unsigned __int8 *a2, unsigned int a3, _DWORD *a4, uint8x8_t a5)
{
  int v6;

  v6 = sub_20B969160(*(_QWORD *)(a1 + 8), a2, a3, a5);
  *a4 = v6;
  return v6 != 0;
}

void sub_20B8F7FCC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v8;
  void ***v9;
  void ***v10;
  void ***v11;
  void ***v12;
  void ***v13;
  int v14;
  void ***v15;
  char v16;

  if (a2 && (a3 & 1) == 0)
  {
    v16 = 0;
    (*(void (**)(void ****__return_ptr))(*(_QWORD *)a1 + 24))(&v15);
    v14 = 0;
    if (a3)
    {
      v8 = 0;
      do
      {
        (*(void (**)(void ****__return_ptr, uint64_t, void ***, unint64_t, uint64_t))(*(_QWORD *)a1 + 40))(&v13, a1, v15, a2 + v8, 2);
        v9 = v13;
        v13 = 0;
        v10 = v15;
        v15 = v9;
        if (v10)
        {
          sub_20B8F89CC((uint64_t)&v15, v10);
          v11 = v13;
          v13 = 0;
          if (v11)
            sub_20B8F89CC((uint64_t)&v13, v11);
        }
        if (((*(uint64_t (**)(uint64_t, void ***))(*(_QWORD *)a1 + 32))(a1, v15) & 1) == 0)
          break;
        if ((*(unsigned int (**)(uint64_t, void ***, int *))(*(_QWORD *)a1 + 48))(a1, v15, &v14))
        {
          sub_20B8F8990(a4, (uint64_t)&v14, a2, v8 + 2);
          if (v16)
            break;
        }
        v8 = (int)v8 + 2;
      }
      while (v8 < a3);
    }
    v12 = v15;
    v15 = 0;
    if (v12)
      sub_20B8F89CC((uint64_t)&v15, v12);
  }
}

void sub_20B8F80FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void ***a11)
{
  void ***v12;

  v12 = a11;
  a11 = 0;
  if (v12)
    sub_20B8F89CC((uint64_t)&a11, v12);
  _Unwind_Resume(exception_object);
}

void sub_20B8F8120(uint64_t a1, void *a2, size_t a3, uint64_t a4, uint64_t a5)
{
  void ***v10;
  void ***v11;
  void ***v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  void ***v16;
  void *__p[2];
  char v18;
  void ***v19;
  _QWORD v20[3];
  _QWORD *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if ((a3 & 1) == 0)
  {
    (*(void (**)(void ****__return_ptr))(*(_QWORD *)a1 + 24))(&v19);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, void ***, void *, size_t))(*(_QWORD *)a1 + 40))(v20, a1, v19, a2, a3);
    v10 = v19;
    v19 = (void ***)v20[0];
    v20[0] = 0;
    if (v10)
    {
      sub_20B8F89CC((uint64_t)&v19, v10);
      v11 = (void ***)v20[0];
      v20[0] = 0;
      if (v11)
        sub_20B8F89CC((uint64_t)v20, v11);
    }
    if (((*(uint64_t (**)(uint64_t, void ***))(*(_QWORD *)a1 + 32))(a1, v19) & 1) == 0)
      goto LABEL_13;
    sub_20B82E068(__p, a2, a3);
    v12 = v19;
    v13 = operator new(0x28uLL);
    *v13 = &off_24C49BEC0;
    v13[1] = __p;
    v13[2] = a2;
    v13[3] = a3;
    v13[4] = a4;
    v21 = v13;
    (*(void (**)(uint64_t, void ***, _QWORD *, uint64_t))(*(_QWORD *)a1 + 56))(a1, v12, v20, a5);
    v14 = v21;
    if (v21 == v20)
    {
      v15 = 4;
      v14 = v20;
    }
    else
    {
      if (!v21)
        goto LABEL_11;
      v15 = 5;
    }
    (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_11:
    if (v18 < 0)
      operator delete(__p[0]);
LABEL_13:
    v16 = v19;
    v19 = 0;
    if (v16)
      sub_20B8F89CC((uint64_t)&v19, v16);
  }
}

void sub_20B8F82AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void ***a16, char a17, uint64_t a18, uint64_t a19, char *a20)
{
  char *v20;
  char *v22;
  uint64_t v23;
  void ***v24;

  v22 = a20;
  if (a20 == v20)
  {
    v23 = 4;
    v22 = &a17;
  }
  else
  {
    if (!a20)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  if (a15 < 0)
    operator delete(__p);
  v24 = a16;
  a16 = 0;
  if (v24)
    sub_20B8F89CC((uint64_t)&a16, v24);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B8F8328@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t result;

  v4 = operator new();
  v5 = *(_DWORD **)(a1 + 8);
  v6 = *(_QWORD *)(sub_20B902644() + 8 * (*v5 & 3));
  result = (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)v6 + 32))(v6, v5);
  *a2 = v4;
  return result;
}

void sub_20B8F8398(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x60C405BB7FD7CLL);
  _Unwind_Resume(a1);
}

BOOL sub_20B8F83BC(uint64_t a1, _OWORD *a2)
{
  return *a2 != 0 && (**(_BYTE **)a2 & 3) != 0;
}

uint64_t sub_20B8F83E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  void **v10;
  void **v11;
  void **v12;
  uint64_t v13;
  void **v14;
  void **v15;
  uint64_t result;
  void **v17;
  void **v18;
  __int128 v19;

  sub_20B8F8CD8((uint64_t)&v19, a2);
  if (a4)
  {
    while (1)
    {
      v9 = *(_QWORD *)(sub_20B902644() + 8 * (*(_DWORD *)v19 & 3));
      (*(void (**)(void ***__return_ptr, uint64_t, _QWORD, __int128 *, _QWORD))(*(_QWORD *)v9 + 16))(&v17, v9, *(_QWORD *)(a1 + 8), &v19, *a3);
      sub_20B902340((void ***)&v19, &v17);
      v10 = v18;
      v18 = 0;
      if (v10)
      {
        v11 = sub_20B8F8AB8(v10);
        MEMORY[0x20BD39CB0](v11, 0x20C4093837F09);
      }
      v12 = v17;
      v17 = 0;
      if (v12)
        MEMORY[0x20BD39CB0](v12, 0x1010C40E4C6A875);
      if (v19 == 0 || (*(_BYTE *)v19 & 3) == 0)
        break;
      ++a3;
      if (!--a4)
        goto LABEL_9;
    }
    sub_20B8F8C70(a5);
  }
  else
  {
LABEL_9:
    v13 = operator new();
    sub_20B8F8CD8(v13, (uint64_t)&v19);
    *a5 = v13;
  }
  v14 = (void **)*((_QWORD *)&v19 + 1);
  *((_QWORD *)&v19 + 1) = 0;
  if (v14)
  {
    v15 = sub_20B8F8AB8(v14);
    MEMORY[0x20BD39CB0](v15, 0x20C4093837F09);
  }
  result = v19;
  *(_QWORD *)&v19 = 0;
  if (result)
    return MEMORY[0x20BD39CB0](result, 0x1010C40E4C6A875);
  return result;
}

void sub_20B8F8540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B8F8A30((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8F857C(_QWORD *a1, _DWORD **a2, _DWORD *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  result = (*(uint64_t (**)(_QWORD *))(*a1 + 32))(a1);
  if ((_DWORD)result)
  {
    v7 = sub_20B902644();
    v8 = a1[1];
    if (v8)
    {
      v9 = *(_QWORD *)(v7 + 8 * (**a2 & 3));
      v10 = (*(uint64_t (**)(uint64_t, uint64_t, _DWORD **))(*(_QWORD *)v9 + 40))(v9, v8, a2);
    }
    else
    {
      v10 = 0;
    }
    *a3 = v10;
    return v10 != 0;
  }
  return result;
}

void sub_20B8F85F8(uint64_t a1, _DWORD **a2, uint64_t a3, int a4)
{
  unint64_t v8;
  NSObject *v9;
  uint64_t (*v10)(_QWORD);
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint8_t buf[8];
  uint8_t *v15;
  uint64_t v16;
  char v17;
  char v18;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1))
  {
    if (a4)
    {
      if (a4 >= 0)
        v8 = 2 * a4;
      else
        v8 = 0;
      if (v8 >= 0x101)
      {
        v9 = sub_20B9A7C5C(0);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_20B7F7000, v9, OS_LOG_TYPE_ERROR, "Search depth is beyond limit. May not return all expected results.", buf, 2u);
        }
      }
      v10 = off_254729C10;
      if ((*(_BYTE *)off_254729C10(&off_254729C10) & 1) == 0)
      {
        buf[0] = 0;
        v13 = (_QWORD *)off_254729BF8(&off_254729BF8);
        sub_20B8F8E60(v13, 0x100uLL, buf);
        _tlv_atexit((void (__cdecl *)(void *))sub_20B8F8DC0, v13);
        *(_BYTE *)v10(&off_254729C10) = 1;
      }
      *(_QWORD *)buf = 0;
      v15 = buf;
      v16 = 0x2000000000;
      v17 = 0;
      sub_20B902644();
      off_254729BF8(&off_254729BF8);
      v12 = *(_QWORD *)(v11 + 8 * (**a2 & 3));
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
      _Block_object_dispose(buf, 8);
    }
    else
    {
      *(_DWORD *)buf = 0;
      v18 = 0;
      if ((*(unsigned int (**)(uint64_t, _DWORD **, uint8_t *))(*(_QWORD *)a1 + 48))(a1, a2, buf))
        sub_20B8F8990(a3, (uint64_t)buf, 0, 0);
    }
  }
}

void sub_20B8F87FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B8F8814(_QWORD *a1)
{
  *a1 = &unk_24C49BDB8;
  sub_20B8F8EDC(a1 + 1);
  return a1;
}

void sub_20B8F8848(_QWORD *a1)
{
  *a1 = &unk_24C49BDB8;
  sub_20B8F8EDC(a1 + 1);
  JUMPOUT(0x20BD39CB0);
}

void sub_20B8F8890()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B8F88A4()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C49BE40;
  return result;
}

void sub_20B8F88C8(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C49BE40;
}

uint64_t sub_20B8F88E4(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C49BEA0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B8F8920()
{
  return &unk_24C49BEA0;
}

uint64_t sub_20B8F892C(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t sub_20B8F8990(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v6 = a4;
  v7 = a3;
  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
    sub_20B80BB74();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v4 + 48))(v4, a2, &v7, &v6);
}

void sub_20B8F89CC(uint64_t a1, void ***a2)
{
  void **v3;

  if (a2)
  {
    sub_20B8F8A7C(a2 + 1, 0);
    v3 = *a2;
    *a2 = 0;
    if (v3)
      MEMORY[0x20BD39CB0](v3, 0x1010C40E4C6A875);
    JUMPOUT(0x20BD39CB0);
  }
}

void ***sub_20B8F8A30(void ***a1)
{
  void **v2;

  sub_20B8F8A7C(a1 + 1, 0);
  v2 = *a1;
  *a1 = 0;
  if (v2)
    MEMORY[0x20BD39CB0](v2, 0x1010C40E4C6A875);
  return a1;
}

void **sub_20B8F8A7C(void ***a1, void **a2)
{
  void **result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_20B8F8AB8(result);
    JUMPOUT(0x20BD39CB0);
  }
  return result;
}

void **sub_20B8F8AB8(void **a1)
{
  void *v2;

  v2 = *a1;
  if (v2)
    sub_20B86989C(v2);
  *a1 = 0;
  return a1;
}

void sub_20B8F8AF0()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B8F8B04(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24C49BEC0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_20B8F8B44(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C49BEC0;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20B8F8B6C(uint64_t a1, uint64_t a2, const void **a3, size_t *a4)
{
  return sub_20B8F8BBC((std::string **)(a1 + 8), a2, a3, a4);
}

uint64_t sub_20B8F8B74(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C49BF20))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B8F8BB0()
{
  return &unk_24C49BF20;
}

uint64_t sub_20B8F8BBC(std::string **a1, uint64_t a2, const void **a3, size_t *a4)
{
  size_t v6;
  std::string *v7;
  unint64_t v8;
  std::string *v9;
  unint64_t size;
  const void *v11;
  std::string *v12;

  v6 = *a4;
  v7 = a1[2];
  v8 = (unint64_t)v7 + *a4;
  v9 = *a1;
  if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0)
    size = v9->__r_.__value_.__l.__size_;
  else
    size = HIBYTE(v9->__r_.__value_.__r.__words[2]);
  v11 = *a3;
  if (size < v8)
  {
    std::string::resize(v9, (std::string::size_type)v7 + *a4, 0);
    v9 = *a1;
    v7 = a1[2];
  }
  if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0)
    v9 = (std::string *)v9->__r_.__value_.__r.__words[0];
  memcpy((char *)v7 + (_QWORD)v9, v11, v6);
  v12 = *a1;
  if (SHIBYTE((*a1)->__r_.__value_.__r.__words[2]) < 0)
    v12 = (std::string *)v12->__r_.__value_.__r.__words[0];
  return sub_20B8F8990((uint64_t)a1[3], a2, (uint64_t)v12, v8);
}

uint64_t sub_20B8F8C70@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = operator new();
  result = sub_20B8F8D38(v2);
  *a1 = v2;
  return result;
}

void sub_20B8F8CB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x60C405BB7FD7CLL);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8F8CD8(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  sub_20B9023F0((void ***)a1, a2);
  return a1;
}

void sub_20B8F8D00(_Unwind_Exception *a1)
{
  void ***v1;
  void **v3;

  sub_20B8F8A7C(v1 + 1, 0);
  v3 = *v1;
  *v1 = 0;
  if (v3)
    MEMORY[0x20BD39CB0](v3, 0x1010C40E4C6A875);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8F8D38@<X0>(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  int v4;
  uint64_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254729258);
  if ((v2 & 1) == 0)
  {
    v5 = a1;
    v4 = __cxa_guard_acquire(&qword_254729258);
    a1 = v5;
    if (v4)
    {
      qword_254729248 = 0;
      unk_254729250 = 0;
      __cxa_atexit((void (*)(void *))sub_20B8F8A30, &qword_254729248, &dword_20B7F7000);
      __cxa_guard_release(&qword_254729258);
      a1 = v5;
    }
  }
  return sub_20B8F8CD8(a1, (uint64_t)&qword_254729248);
}

uint64_t sub_20B8F8DC0(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_20B8F8DF0(uint64_t a1, int a2, uint64_t a3, _BYTE *a4)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  int v10;

  v10 = a2;
  v6 = (uint64_t *)off_254729BF8();
  result = sub_20B8F8990(v8, (uint64_t)&v10, *v6, v7);
  *a4 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

_QWORD *sub_20B8F8E60(_QWORD *a1, size_t a2, _BYTE *a3)
{
  size_t v5;
  _BYTE *v6;
  _BYTE *v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    v5 = a2;
    sub_20B80EEA8(a1, a2);
    v6 = (_BYTE *)a1[1];
    v7 = &v6[v5];
    do
    {
      *v6++ = *a3;
      --v5;
    }
    while (v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_20B8F8EC0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20B8F8EDC(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;

  sub_20B8F8F34(a1, 0);
  v2 = (uint64_t *)a1[4];
  if (v2 == a1 + 1)
  {
    v3 = 4;
    v2 = a1 + 1;
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

uint64_t *sub_20B8F8F34(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v4 = v2;
    v3 = result[4];
    if (!v3)
      sub_20B80BB74();
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v4);
  }
  return result;
}

uint64_t sub_20B8F8F80(uint64_t a1)
{
  return (***(uint64_t (****)(_QWORD))(a1 + 48))(*(_QWORD *)(a1 + 48));
}

uint64_t sub_20B8F8F90(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 8))(*(_QWORD *)(a1 + 48));
}

uint64_t sub_20B8F8FA0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48));
}

uint64_t sub_20B8F8FB0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 24))(*(_QWORD *)(a1 + 48));
}

_QWORD *sub_20B8F8FC0(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24C49BF40;
  v2 = a1[6];
  a1[6] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
  *a1 = &unk_24C49BDB8;
  sub_20B8F8EDC(a1 + 1);
  return a1;
}

void sub_20B8F9020(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24C49BF40;
  v2 = a1[6];
  a1[6] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
  *a1 = &unk_24C49BDB8;
  sub_20B8F8EDC(a1 + 1);
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B8F9090(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_20B8F9E5C(a1, a2, a3, 1u, 0);
}

_QWORD *sub_20B8F909C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_20B8F90E0(a1, a2, a3, 1u, 0);
}

_QWORD *sub_20B8F90A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_20B8F9E5C(a1, a2, a3, 0, 0);
}

_QWORD *sub_20B8F90B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_20B8F90E0(a1, a2, a3, 0, 0);
}

_QWORD *sub_20B8F90C0(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return sub_20B8F651C(a1, a2, 0, a3, a4);
}

_QWORD *sub_20B8F90D0(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return sub_20B8FA044(a1, a2, 0, a3, a4);
}

_QWORD *sub_20B8F90E0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  uint64_t (*v10)(_QWORD);
  uint64_t (*v11)(_QWORD);
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void ***v17;
  _QWORD *result;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  void ***v22;
  char v23;
  _BYTE v24[24];
  _BYTE *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v10 = off_254729C40;
  if ((*(_BYTE *)off_254729C40(&off_254729C40) & 1) == 0)
  {
    v20 = (_QWORD *)off_254729C28(&off_254729C28);
    sub_20B8F98E4(v20, 256);
    _tlv_atexit((void (__cdecl *)(void *))sub_20B8F936C, v20);
    *(_BYTE *)v10(&off_254729C40) = 1;
  }
  v11 = off_254729C70;
  if ((*(_BYTE *)off_254729C70(&off_254729C70) & 1) == 0)
  {
    v21 = (_QWORD *)off_254729C58(&off_254729C58);
    sub_20B8B3DF8(v21, 0x100uLL);
    _tlv_atexit((void (__cdecl *)(void *))sub_20B8F939C, v21);
    *(_BYTE *)v11(&off_254729C70) = 1;
  }
  v23 = 0;
  v12 = operator new(0x20uLL);
  *v12 = &unk_24C49C090;
  v12[1] = a1;
  v12[2] = a3;
  *((_DWORD *)v12 + 6) = a5;
  v25 = v12;
  (*(void (**)(void ****__return_ptr, uint64_t))(*(_QWORD *)a1 + 24))(&v22, a1);
  off_254729C28(&off_254729C28);
  v13 = (uint64_t *)off_254729C58(&off_254729C58);
  sub_20B8F93CC(a1, a2, (uint64_t)v24, v14, a4, 0, 0, &v23, 0.0, v15, 0, v16, *v13, 0, -1, 0, 0);
  v17 = v22;
  v22 = 0;
  if (v17)
    sub_20B8F89CC((uint64_t)&v22, v17);
  result = v25;
  if (v25 == v24)
  {
    v19 = 4;
    result = v24;
  }
  else
  {
    if (!v25)
      return result;
    v19 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v19))();
}

void sub_20B8F9314(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void ***a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char *a23)
{
  void ***v24;
  char *v25;
  uint64_t v26;

  v24 = a18;
  a18 = 0;
  if (v24)
    sub_20B8F89CC((uint64_t)&a18, v24);
  v25 = a23;
  if (a23 == &a20)
  {
    v26 = 4;
    v25 = &a20;
  }
  else
  {
    if (!a23)
      goto LABEL_8;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_8:
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B8F936C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_20B8F939C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20B8F93CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned __int8 a7, _BYTE *a8, float a9, uint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  __int16 *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  float v42;
  void ***v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  float v49;
  void ***v50;
  int v51;
  char v52;
  void ***v57;
  unint64_t v58;
  double v59;
  unint64_t v60;
  unsigned __int8 v61;
  _BYTE v62[24];
  _BYTE *v63;
  uint64_t v64;

  v18 = a13;
  v17 = a14;
  v19 = a10;
  v20 = a11;
  v64 = *MEMORY[0x24BDAC8D0];
  v61 = a7;
  if (*a8)
    return;
  if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 32))(*(_QWORD *)(a1 + 48), a4) & 1) == 0)
    __assert_rtn("ambiguousDfsTraverse", "AmbiguousTrieAdapter.hpp", 137, "m_trie->isValid(curCursor)");
  v26 = a12;
  if (a5 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) != v26)
    goto LABEL_10;
  LODWORD(v60) = 0;
  if ((a7 & 1) == 0)
  {
    if (!(*(unsigned int (**)(_QWORD, uint64_t, unint64_t *))(**(_QWORD **)(a1 + 48) + 48))(*(_QWORD *)(a1 + 48), a4, &v60))goto LABEL_9;
    v19 = a10;
    v20 = a11;
    v18 = a13;
    v17 = a14;
  }
  sub_20B8F9994(a3, a4, v19, 2 * v20, v18, v17, v26, (uint64_t)a8, a9);
LABEL_9:
  if (*a8)
    return;
LABEL_10:
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) <= v26)
    return;
  v27 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)a2 + 16))(a2, v26);
  v60 = 0;
  if (!v27)
    return;
  v28 = 0;
  v52 = a17;
  v29 = a15;
  v30 = a16;
  v31 = a9;
  while (1)
  {
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t, unint64_t, unint64_t))(*(_QWORD *)a2 + 72))(a2, v29, v30, v26, v28))goto LABEL_32;
    v59 = 0.0;
    v59 = (*(double (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)a2 + 32))(a2, v26, v60)
        + v31;
    v58 = 0;
    v58 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)a2 + 40))(a2, v26, v60)
        + v26;
    v33 = (__int16 *)(*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)a2 + 48))(a2, v26, v60);
    v34 = v32;
    v35 = v58;
    if (v58 == v26 && (v52 & 1) != 0)
      goto LABEL_32;
    if (!v32)
    {
      v49 = v59;
      LOBYTE(v51) = v58 == v26;
      sub_20B8F93CC(a1, a2, a3, a4, a5, a6, v61, a8, v49, a10, a11, v58, a13, a14, v29, v30, v51);
      goto LABEL_32;
    }
    (*(void (**)(void ****__return_ptr, _QWORD, uint64_t, __int16 *, uint64_t))(**(_QWORD **)(a1 + 48) + 40))(&v57, *(_QWORD *)(a1 + 48), a4, v33, 2 * v32);
    if ((*(unsigned int (**)(_QWORD, void ***))(**(_QWORD **)(a1 + 48) + 32))(*(_QWORD *)(a1 + 48), v57))
    {
      v36 = a10;
      v37 = a11;
      v38 = 2 * a11;
      v39 = v34;
      do
      {
        v40 = *v33++;
        *(_WORD *)(v36 + v38) = v40;
        v38 += 2;
        --v39;
      }
      while (v39);
      v41 = a13;
      if (a13)
      {
        *(_QWORD *)(a13 + 8 * a14) = v60;
        v37 = a11;
      }
      v42 = v59;
      LOBYTE(v51) = v35 == v26;
      sub_20B8F93CC(a1, a2, a3, v57, a5, a6, v61, a8, v42, v36, v37 + v34, v58, v41, a14 + 1, v26, v60, v51);
      if (*a8)
        break;
    }
    v43 = v57;
    v57 = 0;
    if (v43)
      sub_20B8F89CC((uint64_t)&v57, v43);
    if ((a6 & 1) == 0)
      goto LABEL_32;
    v44 = v58;
    if (v44 != (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2)
      || !(*(unsigned int (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)a2 + 56))(a2, v26, v60))
    {
      goto LABEL_32;
    }
    v45 = v60;
    v46 = operator new(0x68uLL);
    *v46 = &unk_24C49C000;
    v46[1] = a1;
    v46[2] = a4;
    v46[3] = &a10;
    v46[4] = &a11;
    v46[5] = &a13;
    v46[6] = &a14;
    v46[7] = &v60;
    v46[8] = &v61;
    v46[9] = a3;
    v46[10] = &v59;
    v46[11] = &v58;
    v46[12] = a8;
    v63 = v46;
    (*(void (**)(uint64_t, unint64_t, unint64_t, _BYTE *))(*(_QWORD *)a2 + 64))(a2, v26, v45, v62);
    v47 = v63;
    if (v63 == v62)
    {
      v47 = v62;
      v48 = 4;
      goto LABEL_35;
    }
    if (v63)
    {
      v48 = 5;
LABEL_35:
      (*(void (**)(void))(*v47 + 8 * v48))();
    }
LABEL_32:
    v28 = v60 + 1;
    v60 = v28;
    if (v28 >= v27)
      return;
  }
  v50 = v57;
  v57 = 0;
  if (v50)
    sub_20B8F89CC((uint64_t)&v57, v50);
}

void sub_20B8F9884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  _QWORD *v26;
  uint64_t v27;

  v26 = *(_QWORD **)(v24 - 120);
  if (v26 == (_QWORD *)(v24 - 144))
  {
    v27 = 4;
    v26 = (_QWORD *)(v24 - 144);
  }
  else
  {
    if (!v26)
      goto LABEL_6;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B8F98E4(_QWORD *a1, uint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20B8F9958(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 2 * a2);
    a1[1] = &v4[2 * a2];
  }
  return a1;
}

void sub_20B8F993C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_20B8F9958(_QWORD *a1, uint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 < 0)
    sub_20B8F6DC4();
  result = (char *)sub_20B80FD48((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[2 * v4];
  return result;
}

uint64_t sub_20B8F9994(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;

  v16 = a9;
  v14 = a4;
  v15 = a3;
  v12 = a6;
  v13 = a5;
  v11 = a7;
  v9 = *(_QWORD *)(a1 + 24);
  if (!v9)
    sub_20B80BB74();
  return (*(uint64_t (**)(uint64_t, uint64_t, float *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)v9 + 48))(v9, a2, &v16, &v15, &v14, &v13, &v12, &v11, a8);
}

void sub_20B8F99F4()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B8F9A08(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x68uLL);
  *(_QWORD *)v2 = &unk_24C49C000;
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_20B8F9A6C(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a2 = &unk_24C49C000;
  v2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  result = *(__n128 *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  v5 = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 72) = v5;
  *(_OWORD *)(a2 + 56) = v4;
  *(__n128 *)(a2 + 40) = result;
  return result;
}

void sub_20B8F9AB8(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  sub_20B8F9B14((uint64_t *)(a1 + 8), *(__int16 **)a2, *(_QWORD *)(a2 + 8), a3);
}

uint64_t sub_20B8F9ACC(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C49C070))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B8F9B08()
{
  return &unk_24C49C070;
}

void sub_20B8F9B14(uint64_t *a1, __int16 *a2, uint64_t a3, _BYTE *a4)
{
  __int16 *v6;
  uint64_t v8;
  _WORD *v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  float v13;
  void ***v14;
  int v15;
  void ***v16;

  v6 = a2;
  v8 = *a1;
  (*(void (**)(void ****__return_ptr, _QWORD, uint64_t, __int16 *, uint64_t))(**(_QWORD **)(*a1 + 48) + 40))(&v16, *(_QWORD *)(*a1 + 48), a1[1], a2, 2 * a3);
  if (!(*(unsigned int (**)(_QWORD, void ***))(**(_QWORD **)(v8 + 48) + 32))(*(_QWORD *)(v8 + 48), v16))
    goto LABEL_13;
  if (a3)
  {
    v9 = (_WORD *)(*(_QWORD *)a1[2] + 2 * *(_QWORD *)a1[3]);
    v10 = a3;
    do
    {
      v11 = *v6++;
      *v9++ = v11;
      --v10;
    }
    while (v10);
  }
  v12 = *(_QWORD *)a1[4];
  if (v12)
    *(_QWORD *)(v12 + 8 * *(_QWORD *)a1[5]) = *(_QWORD *)a1[6];
  v15 = 0;
  if (!*(_BYTE *)a1[7])
  {
    if (!(*(unsigned int (**)(_QWORD, void ***, int *))(**(_QWORD **)(v8 + 48) + 48))(*(_QWORD *)(v8 + 48), v16, &v15))goto LABEL_11;
    v12 = *(_QWORD *)a1[4];
  }
  v13 = *(double *)a1[9];
  sub_20B8F9994(a1[8], (uint64_t)v16, *(_QWORD *)a1[2], 2 * (*(_QWORD *)a1[3] + a3), v12, *(_QWORD *)a1[5] + 1, *(_QWORD *)a1[10], a1[11], v13);
LABEL_11:
  if (*(_BYTE *)a1[11])
    *a4 = 1;
LABEL_13:
  v14 = v16;
  v16 = 0;
  if (v14)
    sub_20B8F89CC((uint64_t)&v16, v14);
}

void sub_20B8F9C68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void ***a10)
{
  void ***v11;

  v11 = a10;
  a10 = 0;
  if (v11)
    sub_20B8F89CC((uint64_t)&a10, v11);
  _Unwind_Resume(exception_object);
}

void sub_20B8F9C90()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B8F9CA4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &unk_24C49C090;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_20B8F9CE8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C49C090;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20B8F9D14(uint64_t a1, uint64_t a2, int *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  return sub_20B8F9D6C((uint64_t *)(a1 + 8), a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_20B8F9D24(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C49C0F0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B8F9D60()
{
  return &unk_24C49C0F0;
}

uint64_t sub_20B8F9D6C(uint64_t *a1, uint64_t a2, int *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD v17[2];

  v9 = *a3;
  v10 = *a4;
  v11 = *a5;
  v12 = *a6;
  v13 = *a7;
  v14 = *a8;
  v15 = *a1;
  v17[0] = 0;
  v17[1] = v9;
  (*(void (**)(_QWORD, uint64_t, _DWORD *))(**(_QWORD **)(v15 + 48) + 48))(*(_QWORD *)(v15 + 48), a2, v17);
  return sub_20B8F9E0C(a1[1], (uint64_t)v17, v10, v11, v12, v13, v14 - *((int *)a1 + 4));
}

uint64_t sub_20B8F9E0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v12 = a4;
  v13 = a3;
  v10 = a6;
  v11 = a5;
  v9 = a7;
  v7 = *(_QWORD *)(a1 + 24);
  if (!v7)
    sub_20B80BB74();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *))(*(_QWORD *)v7 + 48))(v7, a2, &v13, &v12, &v11, &v10, &v9);
}

_QWORD *sub_20B8F9E5C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  _QWORD *result;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v7[0] = &unk_24C49C110;
  v7[1] = a3;
  v8 = v7;
  sub_20B8F90E0(a1, a2, (uint64_t)v7, a4, a5);
  result = v8;
  if (v8 == v7)
  {
    v6 = 4;
    result = v7;
  }
  else
  {
    if (!v8)
      return result;
    v6 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

void sub_20B8F9EF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_20B8F9F34()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B8F9F48(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_24C49C110;
  result[1] = v3;
  return result;
}

uint64_t sub_20B8F9F80(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_24C49C110;
  a2[1] = v2;
  return result;
}

uint64_t sub_20B8F9FA0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  return sub_20B8FA000(*(_QWORD *)(a1 + 8), a2, *a3, *a4, *a7);
}

uint64_t sub_20B8F9FB8(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C49C170))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B8F9FF4()
{
  return &unk_24C49C170;
}

uint64_t sub_20B8FA000(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v9 = a3;
  v7 = a5;
  v8 = a4;
  v5 = *(_QWORD *)(a1 + 24);
  if (!v5)
    sub_20B80BB74();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t *, uint64_t *))(*(_QWORD *)v5 + 48))(v5, a2, &v9, &v8, &v7);
}

_QWORD *sub_20B8FA044(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  uint64_t (*v10)(_QWORD);
  uint64_t (*v11)(_QWORD);
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void ***v17;
  _QWORD *result;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  void ***v22;
  char v23;
  _BYTE v24[24];
  _BYTE *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v10 = off_254729CA0;
  if ((*(_BYTE *)off_254729CA0(&off_254729CA0) & 1) == 0)
  {
    v20 = (_QWORD *)off_254729C88(&off_254729C88);
    sub_20B8F98E4(v20, 256);
    _tlv_atexit((void (__cdecl *)(void *))sub_20B8F936C, v20);
    *(_BYTE *)v10(&off_254729CA0) = 1;
  }
  v11 = off_254729CD0;
  if ((*(_BYTE *)off_254729CD0(&off_254729CD0) & 1) == 0)
  {
    v21 = (_QWORD *)off_254729CB8(&off_254729CB8);
    sub_20B8B3DF8(v21, 0x100uLL);
    _tlv_atexit((void (__cdecl *)(void *))sub_20B8F939C, v21);
    *(_BYTE *)v11(&off_254729CD0) = 1;
  }
  v23 = 0;
  v12 = operator new(0x20uLL);
  *v12 = &unk_24C49C190;
  v12[1] = a1;
  v12[2] = a4;
  *((_DWORD *)v12 + 6) = a3;
  *((_DWORD *)v12 + 7) = a5;
  v25 = v12;
  (*(void (**)(void ****__return_ptr, uint64_t))(*(_QWORD *)a1 + 24))(&v22, a1);
  off_254729C88(&off_254729C88);
  v13 = (uint64_t *)off_254729CB8(&off_254729CB8);
  sub_20B8F93CC(a1, a2, (uint64_t)v24, v14, 1u, 1u, 1u, &v23, 0.0, v15, 0, v16, *v13, 0, -1, 0, 0);
  v17 = v22;
  v22 = 0;
  if (v17)
    sub_20B8F89CC((uint64_t)&v22, v17);
  result = v25;
  if (v25 == v24)
  {
    v19 = 4;
    result = v24;
  }
  else
  {
    if (!v25)
      return result;
    v19 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v19))();
}

void sub_20B8FA278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void ***a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char *a23)
{
  void ***v24;
  char *v25;
  uint64_t v26;

  v24 = a18;
  a18 = 0;
  if (v24)
    sub_20B8F89CC((uint64_t)&a18, v24);
  v25 = a23;
  if (a23 == &a20)
  {
    v26 = 4;
    v25 = &a20;
  }
  else
  {
    if (!a23)
      goto LABEL_8;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_8:
  _Unwind_Resume(exception_object);
}

void sub_20B8FA2D4()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B8FA2E8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &unk_24C49C190;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_20B8FA32C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C49C190;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20B8FA358(uint64_t a1, uint64_t a2, float *a3, const void **a4, size_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t a9)
{
  sub_20B8FA3C8((uint64_t *)(a1 + 8), a2, *a4, *a5, *a6, *a7, *a8, a9, *a3);
}

uint64_t sub_20B8FA380(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C49C270))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B8FA3BC()
{
  return &unk_24C49C270;
}

void sub_20B8FA3C8(uint64_t *a1, uint64_t a2, const void *a3, size_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  void *__p;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  float v27;
  _BYTE v28[24];
  _BYTE *v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v27 = a9;
  v25 = a5;
  v26 = a4;
  v23 = a7;
  v24 = a6;
  v14 = *a1;
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a1 + 48) + 32))(*(_QWORD *)(*a1 + 48)) & 1) == 0)
    __assert_rtn("operator()", "AmbiguousTrieAdapter.hpp", 44, "m_trie->isValid(cursor)");
  __p = 0;
  v21 = 0;
  v22 = 0;
  sub_20B8FA598(&__p, a3, (uint64_t)a3 + a4, a4);
  v15 = a1[1];
  v16 = *(_QWORD *)(v14 + 48);
  v17 = operator new(0x50uLL);
  *v17 = &off_24C49C200;
  v17[1] = &v26;
  v17[2] = &__p;
  v17[3] = v15;
  v17[4] = &v27;
  v17[5] = &v25;
  v17[6] = &v24;
  v17[7] = &v23;
  v17[8] = a1 + 2;
  v17[9] = a8;
  v29 = v17;
  (*(void (**)(uint64_t, uint64_t, _BYTE *, _QWORD))(*(_QWORD *)v16 + 56))(v16, a2, v28, *((unsigned int *)a1 + 5));
  v18 = v29;
  if (v29 == v28)
  {
    v19 = 4;
    v18 = v28;
  }
  else
  {
    if (!v29)
      goto LABEL_7;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_7:
  if (__p)
  {
    v21 = __p;
    operator delete(__p);
  }
}

void sub_20B8FA540(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  char *v21;
  char *v23;
  uint64_t v24;

  v23 = a21;
  if (a21 == v21)
  {
    v24 = 4;
    v23 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B8FA598(_QWORD *result, const void *a2, uint64_t a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (__sz)
  {
    v6 = result;
    result = sub_20B80EEA8(result, __sz);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20B8FA5F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B8FA614()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B8FA628(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x50uLL);
  *(_QWORD *)v2 = &off_24C49C200;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *((_QWORD *)v2 + 9) = *(_QWORD *)(a1 + 72);
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20B8FA680(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24C49C200;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  v3 = *(_OWORD *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 40) = v3;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t sub_20B8FA6C0(uint64_t a1, _DWORD *a2, uint64_t *a3, uint64_t *a4, unsigned __int8 *a5)
{
  return sub_20B8FA710(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_20B8FA6C8(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C49C260))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B8FA704()
{
  return &unk_24C49C260;
}

uint64_t sub_20B8FA710(uint64_t a1, _DWORD *a2, uint64_t *a3, uint64_t *a4, unsigned __int8 *a5)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t i;
  uint64_t *v15;
  int v16;
  uint64_t result;
  _DWORD v18[2];

  v8 = *a3;
  v9 = *a4;
  v11 = *(_QWORD **)a1;
  v10 = *(unint64_t **)(a1 + 8);
  v12 = *v11 + *a4;
  v13 = v10[1] - *v10;
  if (v12 > v13)
    sub_20B871DC8(v10, v12 - v13);
  if (v9)
  {
    for (i = 0; i != v9; ++i)
      *(_BYTE *)(**(_QWORD **)(a1 + 8) + **(_QWORD **)a1 + i) = *(_BYTE *)(v8 + i);
  }
  v15 = *(uint64_t **)(a1 + 32);
  v16 = **(_DWORD **)(a1 + 24);
  v18[0] = *a2;
  v18[1] = v16;
  result = sub_20B8F9E0C(*(_QWORD *)(a1 + 16), (uint64_t)v18, **(_QWORD **)(a1 + 8), v12, *v15, **(_QWORD **)(a1 + 40), **(_QWORD **)(a1 + 48) - **(int **)(a1 + 56));
  **(_BYTE **)(a1 + 64) = (**(unsigned __int8 **)(a1 + 64) | *a5) != 0;
  return result;
}

void sub_20B8FA808()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B8FA81C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C49C290;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20B8FA854(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C49C290;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20B8FA874(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, _BYTE *a6)
{
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char *v15;
  char *v16;
  unsigned int v17;

  sub_20B8F5CFC(*(_QWORD *)(a1 + 8), *a2, &v15);
  v9 = v15;
  v10 = v16;
  if (v15 != v16)
  {
    v11 = v15;
    do
    {
      v12 = *(_QWORD *)(a1 + 16);
      v17 = a2[1];
      v13 = *(_QWORD *)(v12 + 24);
      if (!v13)
        sub_20B80BB74();
      (*(void (**)(uint64_t, char *, unsigned int *, _BYTE *))(*(_QWORD *)v13 + 48))(v13, v11, &v17, a6);
      v11 += 56;
      if (*a6)
        v14 = 1;
      else
        v14 = v11 == v10;
    }
    while (!v14);
  }
  if (v9)
    operator delete(v9);
}

void sub_20B8FA924(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B8FA940(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C49C2F0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B8FA97C()
{
  return &unk_24C49C2F0;
}

void sub_20B8FA98C()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B8FA9A0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24C49C310;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_20B8FA9E0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C49C310;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20B8FAA08(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, _BYTE *a6)
{
  unsigned __int16 *v9;
  unsigned __int16 *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  unsigned int v15;

  sub_20B8F5CFC(*(_QWORD *)(a1 + 8), *a2, &v13);
  v9 = (unsigned __int16 *)v13;
  v10 = (unsigned __int16 *)v14;
  if (v13 != v14)
  {
    do
    {
      if (v9[16] == *(unsigned __int16 *)(a1 + 24))
      {
        v11 = *(_QWORD *)(a1 + 16);
        v15 = a2[1];
        v12 = *(_QWORD *)(v11 + 24);
        if (!v12)
          sub_20B80BB74();
        (*(void (**)(uint64_t, unsigned __int16 *, unsigned int *, _BYTE *))(*(_QWORD *)v12 + 48))(v12, v9, &v15, a6);
        if (*a6)
          break;
      }
      v9 += 28;
    }
    while (v9 != v10);
    v9 = (unsigned __int16 *)v13;
  }
  if (v9)
    operator delete(v9);
}

void sub_20B8FAAC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B8FAAE4(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C49C370))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B8FAB20()
{
  return &unk_24C49C370;
}

void sub_20B8FAB30()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B8FAB44(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C46A978;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20B8FAB7C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C46A978;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20B8FAB9C(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  char *v7;
  char *v8;
  char *v9;
  BOOL v10;
  char *v11;
  char *v12;

  sub_20B8F5CFC(*(_QWORD *)(a1 + 8), *a2, &v11);
  v7 = v11;
  v8 = v12;
  if (v11 != v12)
  {
    v9 = v11;
    do
    {
      (*(void (**)(void))(**(_QWORD **)(a1 + 16) + 16))();
      v9 += 56;
      if (*a5)
        v10 = 1;
      else
        v10 = v9 == v8;
    }
    while (!v10);
  }
  if (v7)
    operator delete(v7);
}

void sub_20B8FAC40(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B8FAC58(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45EF70))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B8FAC94()
{
  return &unk_24C45EF70;
}

void sub_20B8FACA4()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B8FACB8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C49C390;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20B8FACF0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C49C390;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20B8FAD10(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, _BYTE *a6)
{
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char *v15;
  char *v16;
  unsigned int v17;

  sub_20B8F5CFC(*(_QWORD *)(a1 + 8), *a2, &v15);
  v9 = v15;
  v10 = v16;
  if (v15 != v16)
  {
    v11 = v15;
    do
    {
      v12 = *(_QWORD *)(a1 + 16);
      v17 = a2[1];
      v13 = *(_QWORD *)(v12 + 24);
      if (!v13)
        sub_20B80BB74();
      (*(void (**)(uint64_t, char *, unsigned int *, _BYTE *))(*(_QWORD *)v13 + 48))(v13, v11, &v17, a6);
      v11 += 56;
      if (*a6)
        v14 = 1;
      else
        v14 = v11 == v10;
    }
    while (!v14);
  }
  if (v9)
    operator delete(v9);
}

void sub_20B8FADC0(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B8FADDC(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C49C3F0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B8FAE18()
{
  return &unk_24C49C3F0;
}

void sub_20B8FAE28()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B8FAE3C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_24C49C410;
  result[1] = v3;
  return result;
}

uint64_t sub_20B8FAE74(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_24C49C410;
  a2[1] = v2;
  return result;
}

uint64_t sub_20B8FAE94(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  return sub_20B8FA000(*(_QWORD *)(a1 + 8), a2, *a3, *a4, *a7);
}

uint64_t sub_20B8FAEAC(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C49C470))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B8FAEE8()
{
  return &unk_24C49C470;
}

void sub_20B8FAEF8()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B8FAF0C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24C49C490;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_20B8FAF4C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C49C490;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20B8FAF74(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, _BYTE *a6)
{
  unsigned __int16 *v9;
  unsigned __int16 *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  unsigned int v15;

  sub_20B8F5CFC(*(_QWORD *)(a1 + 8), *a2, &v13);
  v9 = (unsigned __int16 *)v13;
  v10 = (unsigned __int16 *)v14;
  if (v13 != v14)
  {
    do
    {
      if (v9[16] == *(unsigned __int16 *)(a1 + 24))
      {
        v11 = *(_QWORD *)(a1 + 16);
        v15 = a2[1];
        v12 = *(_QWORD *)(v11 + 24);
        if (!v12)
          sub_20B80BB74();
        (*(void (**)(uint64_t, unsigned __int16 *, unsigned int *, _BYTE *))(*(_QWORD *)v12 + 48))(v12, v9, &v15, a6);
        if (*a6)
          break;
      }
      v9 += 28;
    }
    while (v9 != v10);
    v9 = (unsigned __int16 *)v13;
  }
  if (v9)
    operator delete(v9);
}

void sub_20B8FB034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B8FB050(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C49C4F0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B8FB08C()
{
  return &unk_24C49C4F0;
}

uint64_t sub_20B8FB098(uint64_t a1, CFStringRef theString, uint64_t a3, uint64_t a4, __int16 a5, __int16 a6)
{
  CFIndex Length;
  UniChar *v9;
  CFRange v11;

  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = a4;
  *(_WORD *)(a1 + 32) = a5;
  *(_WORD *)(a1 + 34) = a6;
  Length = CFStringGetLength(theString);
  *(_QWORD *)(a1 + 8) = Length;
  v9 = (UniChar *)malloc_type_malloc(2 * Length, 0x1000040BDFB0063uLL);
  *(_QWORD *)a1 = v9;
  v11.length = *(_QWORD *)(a1 + 8);
  v11.location = 0;
  CFStringGetCharacters(theString, v11, v9);
  return a1;
}

uint64_t sub_20B8FB104(__int16 a1, int a2, int a3)
{
  uint64_t result;
  int v5;

  if (a3)
    result = 512;
  else
    result = 1;
  if ((a1 & 0x800) != 0)
  {
    v5 = 290;
    return result | v5;
  }
  else
  {
    switch(a2)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 5:
      case 12:
        v5 = 34;
        return result | v5;
      case 4:
        v5 = 66;
        return result | v5;
      case 6:
        v5 = 130;
        return result | v5;
      case 7:
      case 15:
        v5 = 8226;
        return result | v5;
      case 9:
        result = result | 4;
        break;
      case 10:
        result = result | 8;
        break;
      case 11:
        result = result | 0x10;
        break;
      case 14:
        result = result | 0x800;
        break;
      case 16:
        v5 = 16418;
        return result | v5;
      case 17:
        result = result | 0x200000;
        break;
      default:
        return result;
    }
  }
  return result;
}

unint64_t sub_20B8FB198(unsigned int *a1, unsigned __int16 *a2, unint64_t a3, unsigned int a4, uint64_t a5, unint64_t a6, uint64_t a7, int a8, uint8x8_t a9)
{
  int v12;
  _QWORD v17[2];
  int v18;
  char v19[516];
  uint64_t v20;
  int v21[302];
  unint64_t v22;
  uint64_t v23;
  _BYTE v24[512];
  uint64_t v25;

  v12 = a3;
  v25 = *MEMORY[0x24BDAC8D0];
  v23 = a5;
  v22 = 0;
  v17[0] = v24;
  v17[1] = v24;
  if ((a3 & 1) != 0)
    a8 = 0;
  v18 = a8;
  if (a8)
    sub_20B8F2280(v21, a2, a3, v19, 256, &v20);
  sub_20B8FB288((uint64_t)a1, *a1, &v22, a2, v12, a4, &v23, a6, a9, a7, 0, 0, (uint64_t)v17);
  return v22;
}

uint64_t sub_20B8FB288(uint64_t a1, uint64_t a2, unint64_t *a3, _BYTE *a4, int a5, unsigned int a6, _QWORD *a7, unint64_t a8, uint8x8_t a9, uint64_t a10, int a11, int a12, uint64_t a13)
{
  int v19;
  int *v20;
  int v21;
  unsigned int *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t result;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  unsigned __int8 *v31;
  unint64_t v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  void *v35;
  size_t v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  int v41;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  int v45;
  int64_t v47;
  unsigned __int16 *v48;
  uint64_t v49;
  _WORD *v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unsigned int v59;
  int v60;
  int v61;
  unint64_t v62;
  unint64_t v63;
  unsigned int *v64;
  unsigned int v65;
  uint8x8_t v66;
  unsigned int v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;

  v19 = a2 & 3;
  if (v19 == 1)
  {
    v22 = (unsigned int *)(*(_QWORD *)(a1 + 16) + (a2 - 1));
    if (!a5)
    {
LABEL_31:
      if (v22[1]
        && (!*(_DWORD *)(a13 + 16)
         || sub_20B8F22E8((int *)(a13 + 544), a13 + 20, *(_QWORD *)(a13 + 536), a13 + 1148, *(char **)a13, *(_QWORD *)(a13 + 8) - *(_QWORD *)a13)))
      {
        if (*a7)
        {
          --*a7;
        }
        else if (a8)
        {
          v67 = v22[1];
          v68 = *a3;
          v69 = *a3 + 1;
          *a3 = v69;
          *(_DWORD *)(a10 + 24 * v68 + 8) = v67;
          if (v69 >= a8)
            return 1;
        }
        else
        {
          ++*a3;
        }
      }
      goto LABEL_36;
    }
    if (a5 == 2 && a6 == 2)
    {
      v23 = *(unsigned __int16 *)a4;
    }
    else
    {
      if (a5 != 1 || a6 != 1)
        goto LABEL_36;
      v23 = *a4;
    }
    if (v23 == 42)
      goto LABEL_31;
LABEL_36:
    if (a12)
      v28 = a6;
    else
      v28 = 0;
    if (a12)
      v29 = -(uint64_t)(int)a6;
    else
      v29 = 0;
    v30 = v28 + a5;
    if (!(v28 + a5))
      return 0;
    v31 = (unsigned __int8 *)(v22 + 2);
    v32 = (unint64_t)v22 + *v22 + 4;
    if ((unint64_t)v31 >= v32)
      return 0;
    v71 = a3;
    v33 = &a4[v29];
    v72 = a8;
    v34 = &v33[v30];
    while (1)
    {
      v35 = *(void **)(a13 + 8);
      v37 = v31 + 1;
      v36 = *v31;
      if (a6 == 2)
      {
        if (a11)
        {
          if ((v36 & 1) == 0)
            goto LABEL_97;
          v48 = (unsigned __int16 *)(v31 + 2);
          v49 = (v36 - 1) >> 1;
          v50 = v33;
          v51 = v30 >> 1;
        }
        else if ((v30 & 1) != 0)
        {
          if ((v36 & 1) == 0 || *v33 != *v37)
            goto LABEL_97;
          if (v30 == 1 && (_DWORD)v36 == 1)
            goto LABEL_89;
          v48 = (unsigned __int16 *)(v31 + 2);
          v49 = (v36 - 1) >> 1;
          v51 = (v30 - 1) >> 1;
          v50 = v33 + 1;
        }
        else
        {
          if ((v36 & 1) != 0)
            goto LABEL_97;
          v49 = v36 >> 1;
          v50 = v33;
          v51 = v30 >> 1;
          v48 = (unsigned __int16 *)(v31 + 1);
        }
        if (sub_20B8FC570(v50, v51, v48, v49))
          goto LABEL_89;
      }
      else if (a6 == 1)
      {
        v38 = &v37[v36];
        v39 = v33;
        v40 = v37;
        if ((_DWORD)v36)
        {
          v40 = v37;
          v39 = v33;
          do
          {
            v41 = *v39;
            if (v41 == 42)
              break;
            if (v41 != 63 && v41 != *v40)
              goto LABEL_97;
            ++v39;
            ++v40;
          }
          while (v40 < v38);
        }
        if (v40 < v38)
        {
          v43 = 0;
          v44 = 0;
          do
          {
            if (v39 >= v34)
              goto LABEL_68;
            v45 = *v39;
            if (v45 == 42)
            {
              if (++v39 == v34)
                goto LABEL_89;
              v44 = v40 + 1;
              v43 = v39;
              continue;
            }
            if (v45 == 63 || v45 == *v40)
            {
              ++v39;
              ++v40;
            }
            else
            {
LABEL_68:
              v40 = v44++;
              v39 = v43;
            }
          }
          while (v40 < v38);
        }
        if (v39 < v34)
        {
          v47 = v34 - v39;
          while (*v39 == 42)
          {
            ++v39;
            if (!--v47)
            {
              v39 = &v33[v30];
              break;
            }
          }
        }
        if (v39 == v34)
        {
LABEL_89:
          memcpy(v35, v37, v36);
          if (!*(_DWORD *)(a13 + 16)
            || sub_20B8F22E8((int *)(a13 + 544), a13 + 20, *(_QWORD *)(a13 + 536), a13 + 1148, *(char **)a13, (unint64_t)v35 + v36 - *(_QWORD *)a13))
          {
            if (*a7)
            {
              --*a7;
            }
            else if (v72)
            {
              v52 = *(_DWORD *)&v37[v36];
              v53 = *v71;
              v54 = *v71 + 1;
              *v71 = v54;
              *(_DWORD *)(a10 + 24 * v53 + 8) = v52;
              if (v54 >= v72)
                return 1;
            }
            else
            {
              ++*v71;
            }
          }
        }
      }
LABEL_97:
      v31 = &v37[v36 + 4];
      if ((unint64_t)v31 >= v32)
        return 0;
    }
  }
  if (v19 == 2)
  {
    v24 = *(_QWORD *)(a1 + 8);
    v25 = (a2 - 2);
    v20 = (int *)(v24 + v25);
    if (!a5)
      goto LABEL_18;
    if (a5 == 1 || a6 != 2)
    {
      v26 = *a4;
      if (a6 != 1)
        goto LABEL_109;
    }
    else
    {
      if ((a5 & 1) != 0)
      {
        LOBYTE(v26) = *a4;
        goto LABEL_109;
      }
      v26 = *(unsigned __int16 *)a4;
    }
    if (v26 == 42)
      goto LABEL_102;
    if (2 * (v26 == 63))
      return sub_20B8FBF6C(a1, a2, (uint64_t)a3, a9, (uint64_t)&a4[a6], a5 - a6, a6, (uint64_t)a7, a8, a10, a13);
LABEL_109:
    **(_BYTE **)(a13 + 8) = v26;
    v56 = *(_QWORD *)(a13 + 8) + 1;
    *(_QWORD *)(a13 + 8) = v56;
    v57 = *a4;
    v58 = v57 >> 5;
    v59 = v20[(v57 >> 5) + 1];
    if (((v59 >> v57) & 1) != 0)
    {
      if (v57 >= 0x20)
      {
        v60 = 0;
        if (v58 <= 1)
          v58 = 1;
        else
          v58 = v58;
        v64 = (unsigned int *)(v25 + v24 + 4);
        do
        {
          v65 = *v64++;
          a9 = (uint8x8_t)vcnt_s8((int8x8_t)v65);
          a9.i16[0] = vaddlv_u8(a9);
          v60 += a9.i32[0];
          --v58;
        }
        while (v58);
      }
      else
      {
        v60 = 0;
      }
      a9.i32[0] = v59 & ~(-1 << (v57 & 0x1F));
      v66 = (uint8x8_t)vcnt_s8((int8x8_t)a9);
      v66.i16[0] = vaddlv_u8(v66);
      if (sub_20B8FB288(a1, v20[v60 + v66.i32[0] + 10], a3))
        return 1;
      v56 = *(_QWORD *)(a13 + 8);
    }
    result = 0;
    v55 = v56 - 1;
    goto LABEL_127;
  }
  if (v19 != 3)
    return 0;
  v20 = (int *)(*(_QWORD *)(a1 + 8) + (a2 - 3));
  if (a5)
  {
    if (a5 == 1 || a6 != 2)
    {
      v21 = *a4;
      if (a6 != 1)
        goto LABEL_104;
    }
    else
    {
      if ((a5 & 1) != 0)
      {
        LOBYTE(v21) = *a4;
        goto LABEL_104;
      }
      v21 = *(unsigned __int16 *)a4;
    }
    if (v21 != 42)
    {
      if (!(2 * (v21 == 63)))
      {
LABEL_104:
        *(_BYTE *)(*(_QWORD *)(a13 + 8))++ = v21;
        result = sub_20B8FB288(a1, v20[*a4 + 1], a3);
        if (!(_DWORD)result)
        {
          v55 = *(_QWORD *)(a13 + 8) - 1;
LABEL_127:
          *(_QWORD *)(a13 + 8) = v55;
          return result;
        }
        return 1;
      }
      return sub_20B8FBF6C(a1, a2, (uint64_t)a3, a9, (uint64_t)&a4[a6], a5 - a6, a6, (uint64_t)a7, a8, a10, a13);
    }
LABEL_102:
    LODWORD(v70) = 0;
    return sub_20B8FB914(a1, a2, (uint64_t)a3, (uint64_t)&a4[a6], a5 - a6, a6, (uint64_t)a7, a8, a10, v70, a13);
  }
LABEL_18:
  if (!*v20)
    return 0;
  if (!*(_DWORD *)(a13 + 16)
    || (result = sub_20B8F22E8((int *)(a13 + 544), a13 + 20, *(_QWORD *)(a13 + 536), a13 + 1148, *(char **)a13, *(_QWORD *)(a13 + 8) - *(_QWORD *)a13), (_DWORD)result))
  {
    if (*a7)
    {
      result = 0;
      --*a7;
      return result;
    }
    if (!a8)
    {
      result = 0;
      ++*a3;
      return result;
    }
    v61 = *v20;
    v62 = *a3;
    v63 = *a3 + 1;
    *a3 = v63;
    *(_DWORD *)(a10 + 24 * v62 + 8) = v61;
    return v63 >= a8;
  }
  return result;
}

uint64_t sub_20B8FB914(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  int v16;
  uint64_t v18;
  int8x8_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  uint8x8_t v45;
  unint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  unsigned int v55;
  char v56;
  int v57;
  uint64_t v58;
  int v59;
  unsigned int *v60;
  unsigned int v61;
  uint8x8_t v62;
  int v63;
  unsigned int *v64;
  unsigned int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  int v77;
  unsigned int *v78;
  unsigned int v79;
  uint8x8_t v80;
  uint64_t v82;
  int v83;
  uint64_t v84;

  v16 = a2;
  v18 = 1;
  HIDWORD(v82) = 1;
  if (sub_20B8FB288(a1, a2, a3))
    return v18;
  v20 = a1;
  v84 = a7;
  v83 = a6;
  if ((v16 & 3) == 2)
  {
    v46 = 0;
    v47 = *(_BYTE **)(a11 + 8);
    v48 = *(_QWORD *)(v20 + 8) + (v16 - 2);
    v49 = a5;
    v50 = a4;
    v51 = a3;
    v52 = v20;
    while (1)
    {
      if (v46 >> 5 <= 1)
        v53 = 1;
      else
        v53 = v46 >> 5;
      *v47 = v46;
      v54 = (_BYTE *)(*(_QWORD *)(a11 + 8) + 1);
      *(_QWORD *)(a11 + 8) = v54;
      v55 = *(_DWORD *)(v48 + 4 * (v46 >> 5) + 4);
      if (((v55 >> v46) & 1) != 0)
      {
        v56 = v46 & 0x1F;
        if (v83 == 2)
        {
          if (v46 >= 0x20u)
          {
            v59 = 0;
            v64 = (unsigned int *)(v48 + 4);
            do
            {
              v65 = *v64++;
              v19 = vcnt_s8((int8x8_t)v65);
              v19.i16[0] = vaddlv_u8((uint8x8_t)v19);
              v59 += v19.i32[0];
              --v53;
            }
            while (v53);
          }
          else
          {
            v59 = 0;
          }
          v19.i32[0] = v55 & ~(-1 << v56);
          v19 = vcnt_s8(v19);
          v19.i16[0] = vaddlv_u8((uint8x8_t)v19);
          v66 = *(unsigned int *)(v48 + 4 * (v59 + v19.i32[0]) + 40);
          v67 = *(_DWORD *)(v48 + 4 * (v59 + v19.i32[0]) + 40) & 3;
          switch(v67)
          {
            case 1:
              v18 = 1;
              LODWORD(v82) = 1;
              v63 = sub_20B8FB914(v52, v66, v51, v50, v49, 2, v84, a8, a9, v82, a11);
              goto LABEL_59;
            case 2:
              v72 = 0;
              v73 = *(_QWORD *)(v52 + 8) + (v66 - 2);
              while (1)
              {
                v74 = v72 >> 5;
                if (v72 >> 5 <= 1)
                  v74 = 1;
                *v54 = v72;
                v75 = *(_QWORD *)(a11 + 8) + 1;
                *(_QWORD *)(a11 + 8) = v75;
                v76 = *(_DWORD *)(v73 + 4 * (v72 >> 5) + 4);
                if (((v76 >> v72) & 1) != 0)
                {
                  v77 = 0;
                  if (v72 >= 0x20u)
                  {
                    v78 = (unsigned int *)(v73 + 4);
                    do
                    {
                      v79 = *v78++;
                      v19 = vcnt_s8((int8x8_t)v79);
                      v19.i16[0] = vaddlv_u8((uint8x8_t)v19);
                      v77 += v19.i32[0];
                      --v74;
                    }
                    while (v74);
                  }
                  v19.i32[0] = v76 & ~(-1 << (v72 & 0x1F));
                  v80 = (uint8x8_t)vcnt_s8(v19);
                  v80.i16[0] = vaddlv_u8(v80);
                  LODWORD(v82) = 0;
                  if (sub_20B8FB914(v52, *(unsigned int *)(v73 + 4 * (v77 + v80.i32[0]) + 40), v51, v50, v49, 2, v84, a8, a9, v82, a11))return 1;
                  v75 = *(_QWORD *)(a11 + 8);
                }
                v54 = (_BYTE *)(v75 - 1);
                *(_QWORD *)(a11 + 8) = v75 - 1;
                if ((_DWORD)++v72 == 256)
                  goto LABEL_60;
              }
            case 3:
              v68 = 0;
              v69 = *(_QWORD *)(v52 + 8) + (v66 - 3) + 4;
              do
              {
                *v54 = v68;
                v70 = *(_QWORD *)(a11 + 8) + 1;
                *(_QWORD *)(a11 + 8) = v70;
                v71 = *(unsigned int *)(v69 + 4 * v68);
                if ((v71 & 3) != 0)
                {
                  LODWORD(v82) = 0;
                  if (sub_20B8FB914(v52, v71, v51, v50, v49, 2, v84, a8, a9, v82, a11))
                    return 1;
                  v70 = *(_QWORD *)(a11 + 8);
                }
                v54 = (_BYTE *)(v70 - 1);
                *(_QWORD *)(a11 + 8) = v54;
                ++v68;
              }
              while (v68 != 256);
              break;
          }
        }
        else if (v83 == 1)
        {
          if (v46 >= 0x20u)
          {
            v57 = 0;
            v60 = (unsigned int *)(v48 + 4);
            v58 = v84;
            do
            {
              v61 = *v60++;
              v19 = vcnt_s8((int8x8_t)v61);
              v19.i16[0] = vaddlv_u8((uint8x8_t)v19);
              v57 += v19.i32[0];
              --v53;
            }
            while (v53);
          }
          else
          {
            v57 = 0;
            v58 = v84;
          }
          v19.i32[0] = v55 & ~(-1 << v56);
          v62 = (uint8x8_t)vcnt_s8(v19);
          v62.i16[0] = vaddlv_u8(v62);
          LODWORD(v82) = 0;
          v18 = 1;
          v63 = sub_20B8FB914(v52, *(unsigned int *)(v48 + 4 * (v57 + v62.i32[0]) + 40), v51, v50, v49, 1, v58, a8, a9, v82, a11);
LABEL_59:
          if (v63)
            return v18;
        }
      }
LABEL_60:
      v47 = (_BYTE *)(*(_QWORD *)(a11 + 8) - 1);
      *(_QWORD *)(a11 + 8) = v47;
      if ((_DWORD)++v46 == 256)
        return 0;
    }
  }
  if ((v16 & 3) == 3)
  {
    v21 = 0;
    v22 = *(_QWORD *)(v20 + 8) + (v16 - 3);
    v23 = *(_BYTE **)(a11 + 8);
    v24 = a5;
    v25 = a4;
    v26 = a3;
    v27 = v20;
    do
    {
      *v23 = v21;
      v28 = (_BYTE *)(*(_QWORD *)(a11 + 8) + 1);
      *(_QWORD *)(a11 + 8) = v28;
      v29 = *(unsigned int *)(v22 + 4 * v21 + 4);
      v30 = *(_DWORD *)(v22 + 4 * v21 + 4) & 3;
      if ((v29 & 3) != 0)
      {
        if (v83 == 2)
        {
          if (v30 == 2)
          {
            v36 = 0;
            v37 = *(_QWORD *)(v27 + 8) + (v29 - 2);
            while (1)
            {
              v38 = v36 >> 5;
              if (v36 >> 5 <= 1)
                v38 = 1;
              *v28 = v36;
              v39 = *(_QWORD *)(a11 + 8) + 1;
              *(_QWORD *)(a11 + 8) = v39;
              v40 = *(_DWORD *)(v37 + 4 * (v36 >> 5) + 4);
              if (((v40 >> v36) & 1) != 0)
              {
                if (v36 >= 0x20u)
                {
                  v41 = 0;
                  v43 = (unsigned int *)(v37 + 4);
                  v42 = v84;
                  do
                  {
                    v44 = *v43++;
                    v19 = vcnt_s8((int8x8_t)v44);
                    v19.i16[0] = vaddlv_u8((uint8x8_t)v19);
                    v41 += v19.i32[0];
                    --v38;
                  }
                  while (v38);
                }
                else
                {
                  v41 = 0;
                  v42 = v84;
                }
                v19.i32[0] = v40 & ~(-1 << (v36 & 0x1F));
                v45 = (uint8x8_t)vcnt_s8(v19);
                v45.i16[0] = vaddlv_u8(v45);
                LODWORD(v82) = 0;
                if (sub_20B8FB914(v27, *(unsigned int *)(v37 + 4 * (v41 + v45.i32[0]) + 40), v26, v25, v24, 2, v42, a8, a9, v82, a11))return 1;
                v39 = *(_QWORD *)(a11 + 8);
              }
              v28 = (_BYTE *)(v39 - 1);
              *(_QWORD *)(a11 + 8) = v39 - 1;
              if ((_DWORD)++v36 == 256)
                goto LABEL_31;
            }
          }
          if (v30 != 3)
          {
            v18 = 1;
            LODWORD(v82) = 1;
            v31 = sub_20B8FB914(v27, v29, v26, v25, v24, 2, v84, a8, a9, v82, a11);
LABEL_30:
            if (v31)
              return v18;
            goto LABEL_31;
          }
          v32 = 0;
          v33 = *(_QWORD *)(v27 + 8) + (v29 - 3) + 4;
          do
          {
            *v28 = v32;
            v34 = *(_QWORD *)(a11 + 8) + 1;
            *(_QWORD *)(a11 + 8) = v34;
            v35 = *(unsigned int *)(v33 + 4 * v32);
            if ((v35 & 3) != 0)
            {
              LODWORD(v82) = 0;
              if (sub_20B8FB914(v27, v35, v26, v25, v24, 2, v84, a8, a9, v82, a11))
                return 1;
              v34 = *(_QWORD *)(a11 + 8);
            }
            v28 = (_BYTE *)(v34 - 1);
            *(_QWORD *)(a11 + 8) = v28;
            ++v32;
          }
          while (v32 != 256);
        }
        else if (v83 == 1)
        {
          LODWORD(v82) = 0;
          v18 = 1;
          v31 = sub_20B8FB914(v27, v29, v26, v25, v24, 1, v84, a8, a9, v82, a11);
          goto LABEL_30;
        }
      }
LABEL_31:
      v23 = (_BYTE *)(*(_QWORD *)(a11 + 8) - 1);
      *(_QWORD *)(a11 + 8) = v23;
      ++v21;
    }
    while (v21 != 256);
  }
  return 0;
}

uint64_t sub_20B8FBF6C(uint64_t a1, int a2, uint64_t a3, uint8x8_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  unsigned int *v31;
  unsigned int v32;
  uint8x8_t v33;
  unint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  _BYTE *v37;
  unsigned int v38;
  char v39;
  int v40;
  int v41;
  unsigned int *v42;
  unsigned int v43;
  uint8x8_t v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  int v58;
  unsigned int *v59;
  unsigned int v60;
  uint8x8_t v61;
  uint64_t v64;
  uint64_t v65;

  if ((a2 & 3) == 2)
  {
    v34 = 0;
    v35 = *(_BYTE **)(a11 + 8);
    v65 = *(_QWORD *)(a1 + 8) + (a2 - 2);
    while (1)
    {
      if (v34 >> 5 <= 1)
        v36 = 1;
      else
        v36 = v34 >> 5;
      *v35 = v34;
      v37 = (_BYTE *)(*(_QWORD *)(a11 + 8) + 1);
      *(_QWORD *)(a11 + 8) = v37;
      v38 = *(_DWORD *)(v65 + 4 * (v34 >> 5) + 4);
      if (((v38 >> v34) & 1) != 0)
      {
        v39 = v34 & 0x1F;
        if (a7 == 2)
        {
          if (v34 >= 0x20u)
          {
            v41 = 0;
            v45 = (unsigned int *)(v65 + 4);
            do
            {
              v46 = *v45++;
              a4 = (uint8x8_t)vcnt_s8((int8x8_t)v46);
              a4.i16[0] = vaddlv_u8(a4);
              v41 += a4.i32[0];
              --v36;
            }
            while (v36);
          }
          else
          {
            v41 = 0;
          }
          a4.i32[0] = v38 & ~(-1 << v39);
          a4 = (uint8x8_t)vcnt_s8((int8x8_t)a4);
          a4.i16[0] = vaddlv_u8(a4);
          v47 = *(unsigned int *)(v65 + 4 * (v41 + a4.i32[0]) + 40);
          v48 = *(_DWORD *)(v65 + 4 * (v41 + a4.i32[0]) + 40) & 3;
          switch(v48)
          {
            case 1:
              v18 = 1;
              if (sub_20B8FB288(a1, v47, a3))
                return v18;
              break;
            case 2:
              v53 = 0;
              v54 = *(_QWORD *)(a1 + 8) + (v47 - 2);
              while (1)
              {
                v55 = v53 >> 5;
                if (v53 >> 5 <= 1)
                  v55 = 1;
                *v37 = v53;
                v56 = *(_QWORD *)(a11 + 8) + 1;
                *(_QWORD *)(a11 + 8) = v56;
                v57 = *(_DWORD *)(v54 + 4 * (v53 >> 5) + 4);
                if (((v57 >> v53) & 1) != 0)
                {
                  if (v53 >= 0x20u)
                  {
                    v58 = 0;
                    v59 = (unsigned int *)(v54 + 4);
                    do
                    {
                      v60 = *v59++;
                      a4 = (uint8x8_t)vcnt_s8((int8x8_t)v60);
                      a4.i16[0] = vaddlv_u8(a4);
                      v58 += a4.i32[0];
                      --v55;
                    }
                    while (v55);
                  }
                  else
                  {
                    v58 = 0;
                  }
                  a4.i32[0] = v57 & ~(-1 << (v53 & 0x1F));
                  v61 = (uint8x8_t)vcnt_s8((int8x8_t)a4);
                  v61.i16[0] = vaddlv_u8(v61);
                  if (sub_20B8FB288(a1, *(unsigned int *)(v54 + 4 * (v58 + v61.i32[0]) + 40), a3))return 1;
                  v56 = *(_QWORD *)(a11 + 8);
                }
                v37 = (_BYTE *)(v56 - 1);
                *(_QWORD *)(a11 + 8) = v56 - 1;
                if ((_DWORD)++v53 == 256)
                  goto LABEL_71;
              }
            case 3:
              v49 = 0;
              v50 = *(_QWORD *)(a1 + 8) + (v47 - 3) + 4;
              do
              {
                *v37 = v49;
                v51 = *(_QWORD *)(a11 + 8) + 1;
                *(_QWORD *)(a11 + 8) = v51;
                v52 = *(unsigned int *)(v50 + 4 * v49);
                if ((v52 & 3) != 0)
                {
                  if (sub_20B8FB288(a1, v52, a3))
                    return 1;
                  v51 = *(_QWORD *)(a11 + 8);
                }
                v37 = (_BYTE *)(v51 - 1);
                *(_QWORD *)(a11 + 8) = v37;
                ++v49;
              }
              while (v49 != 256);
              break;
          }
        }
        else if (a7 == 1)
        {
          if (v34 >= 0x20u)
          {
            v40 = 0;
            v42 = (unsigned int *)(v65 + 4);
            do
            {
              v43 = *v42++;
              a4 = (uint8x8_t)vcnt_s8((int8x8_t)v43);
              a4.i16[0] = vaddlv_u8(a4);
              v40 += a4.i32[0];
              --v36;
            }
            while (v36);
          }
          else
          {
            v40 = 0;
          }
          a4.i32[0] = v38 & ~(-1 << v39);
          v44 = (uint8x8_t)vcnt_s8((int8x8_t)a4);
          v44.i16[0] = vaddlv_u8(v44);
          v18 = 1;
          if (sub_20B8FB288(a1, *(unsigned int *)(v65 + 4 * (v40 + v44.i32[0]) + 40), a3))
            return v18;
        }
      }
LABEL_71:
      v35 = (_BYTE *)(*(_QWORD *)(a11 + 8) - 1);
      *(_QWORD *)(a11 + 8) = v35;
      if ((_DWORD)++v34 == 256)
        return 0;
    }
  }
  if ((a2 & 3) == 3)
  {
    v13 = 0;
    v64 = *(_QWORD *)(a1 + 8) + (a2 - 3);
    v14 = *(_BYTE **)(a11 + 8);
    do
    {
      *v14 = v13;
      v15 = (_BYTE *)(*(_QWORD *)(a11 + 8) + 1);
      *(_QWORD *)(a11 + 8) = v15;
      v16 = *(unsigned int *)(v64 + 4 * v13 + 4);
      v17 = *(_DWORD *)(v64 + 4 * v13 + 4) & 3;
      if ((v16 & 3) != 0)
      {
        if (a7 == 2)
        {
          if (v17 == 2)
          {
            v25 = 0;
            v26 = *(_QWORD *)(a1 + 8) + (v16 - 2);
            while (1)
            {
              v27 = v25 >> 5;
              if (v25 >> 5 <= 1)
                v27 = 1;
              *v15 = v25;
              v28 = *(_QWORD *)(a11 + 8) + 1;
              *(_QWORD *)(a11 + 8) = v28;
              v29 = *(_DWORD *)(v26 + 4 * (v25 >> 5) + 4);
              if (((v29 >> v25) & 1) != 0)
              {
                if (v25 >= 0x20u)
                {
                  v30 = 0;
                  v31 = (unsigned int *)(v26 + 4);
                  do
                  {
                    v32 = *v31++;
                    a4 = (uint8x8_t)vcnt_s8((int8x8_t)v32);
                    a4.i16[0] = vaddlv_u8(a4);
                    v30 += a4.i32[0];
                    --v27;
                  }
                  while (v27);
                }
                else
                {
                  v30 = 0;
                }
                a4.i32[0] = v29 & ~(-1 << (v25 & 0x1F));
                v33 = (uint8x8_t)vcnt_s8((int8x8_t)a4);
                v33.i16[0] = vaddlv_u8(v33);
                if (sub_20B8FB288(a1, *(unsigned int *)(v26 + 4 * (v30 + v33.i32[0]) + 40), a3))return 1;
                v28 = *(_QWORD *)(a11 + 8);
              }
              v15 = (_BYTE *)(v28 - 1);
              *(_QWORD *)(a11 + 8) = v28 - 1;
              if ((_DWORD)++v25 == 256)
                goto LABEL_30;
            }
          }
          if (v17 != 3)
          {
            v18 = 1;
            v19 = a1;
            v20 = a3;
LABEL_29:
            if (sub_20B8FB288(v19, v16, v20))
              return v18;
            goto LABEL_30;
          }
          v21 = 0;
          v22 = *(_QWORD *)(a1 + 8) + (v16 - 3) + 4;
          do
          {
            *v15 = v21;
            v23 = *(_QWORD *)(a11 + 8) + 1;
            *(_QWORD *)(a11 + 8) = v23;
            v24 = *(unsigned int *)(v22 + 4 * v21);
            if ((v24 & 3) != 0)
            {
              if (sub_20B8FB288(a1, v24, a3))
                return 1;
              v23 = *(_QWORD *)(a11 + 8);
            }
            v15 = (_BYTE *)(v23 - 1);
            *(_QWORD *)(a11 + 8) = v15;
            ++v21;
          }
          while (v21 != 256);
        }
        else if (a7 == 1)
        {
          v18 = 1;
          v19 = a1;
          v20 = a3;
          goto LABEL_29;
        }
      }
LABEL_30:
      v14 = (_BYTE *)(*(_QWORD *)(a11 + 8) - 1);
      *(_QWORD *)(a11 + 8) = v14;
      ++v13;
    }
    while (v13 != 256);
  }
  return 0;
}

BOOL sub_20B8FC570(_WORD *a1, uint64_t a2, unsigned __int16 *a3, uint64_t a4)
{
  unsigned __int16 *v4;
  _WORD *v5;
  int v6;
  _WORD *v8;
  _WORD *v9;
  unsigned __int16 *v10;
  int v11;

  if (!a2)
    return 0;
  v4 = &a3[a4];
  v5 = a1;
  if (a4 >= 1)
  {
    do
    {
      v6 = (unsigned __int16)*v5;
      if (v6 == 42)
        break;
      if (v6 != 63 && v6 != *a3)
        return 0;
      ++v5;
      ++a3;
    }
    while (a3 < v4);
  }
  v8 = &a1[a2];
  if (a3 < v4)
  {
    v9 = 0;
    v10 = 0;
    while (v5 && v5 < v8)
    {
      v11 = (unsigned __int16)*v5;
      if (v11 == 42)
      {
        if (++v5 == v8)
          return 1;
        v10 = a3 + 1;
        v9 = v5;
      }
      else
      {
        if (v11 != 63 && v11 != *a3)
          break;
        ++v5;
        ++a3;
      }
LABEL_24:
      if (a3 >= v4)
        goto LABEL_25;
    }
    a3 = v10++;
    v5 = v9;
    goto LABEL_24;
  }
LABEL_25:
  if (v5)
  {
    while (v5 < v8 && *v5 == 42)
      ++v5;
  }
  return v5 == v8;
}

uint64_t sub_20B8FC660(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  void *v24;
  size_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  __int128 v30;
  void *v31;
  uint64_t v32;
  int v33;

  v33 = 1024;
  v16 = 0;
  v17 = 0;
  v15 = 0x10000;
  v19 = malloc_type_malloc(0x10000uLL, 0xC3836601uLL);
  v18 = 0;
  bzero(v19, 0x10000uLL);
  v21 = 0;
  v22 = 0;
  v20 = 0x10000;
  v24 = malloc_type_malloc(0x10000uLL, 0xC3836601uLL);
  v23 = 0;
  bzero(v24, 0x10000uLL);
  v26 = 0;
  v27 = 0;
  v25 = *(_QWORD *)(a1 + 40);
  v6 = *(void **)(a1 + 8);
  v30 = *(_OWORD *)(a1 + 56);
  v29 = a1 + 48;
  v31 = v6;
  v28 = 1;
  bzero(v6, v25);
  v7 = sub_20B8FCC4C(&v15, 1028, 4);
  v8 = (v7 >> 2) | 0x300000000;
  if (v7 == -1)
    v8 = 0;
  v32 = v8;
  if (a2)
  {
    v9 = (unsigned int *)(a3 + 16);
    while (1)
    {
      v10 = *((_QWORD *)v9 - 1);
      if ((unint64_t)(v10 - 257) < 0xFFFFFFFFFFFFFF00)
        return 0xFFFFFFFFLL;
      v11 = (unsigned __int8 *)*((_QWORD *)v9 - 2);
      v12 = *v9;
      v9 += 6;
      sub_20B8FC7D8((unint64_t)&v15, v32, v11, v10, v12);
      if (!--a2)
        goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    v15 = v16;
    v20 = (v22 & 0xFFFFFFFC)
        + (unint64_t)*(unsigned int *)((char *)v24 + (v22 & 0xFFFFFFFC))
        + 4;
    v21 = v20;
    v13 = sub_20B8FC98C((uint64_t)&v15, a1);
    if (v19)
      free(v19);
    if (v24)
      free(v24);
  }
  return v13;
}

unint64_t sub_20B8FC7D8(unint64_t result, int a2, unsigned __int8 *a3, int a4, unsigned int a5)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  int v9;
  unint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  unsigned int *v14;
  _DWORD *v15;
  unsigned int v16;
  int v17;
  unint64_t v18;
  size_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  char *v25;

  v6 = *(_QWORD *)(result + 56);
  v7 = (4 * a2);
  v8 = (unsigned int *)(v6 + v7);
  if (!a4)
  {
LABEL_19:
    *v8 = a5;
    return result;
  }
  v9 = a4;
  v11 = result;
  v12 = (unint64_t *)(result + 64);
  while (1)
  {
    v13 = *a3;
    v14 = &v8[v13];
    v16 = v14[1];
    v15 = v14 + 1;
    v17 = v16 & 3;
    v18 = (unint64_t)v16 >> 2;
    if (v17 != 3)
      break;
    result = v18 | 0x300000000;
    ++a3;
    LODWORD(v19) = v9 - 1;
LABEL_18:
    v7 = (4 * result);
    v8 = (unsigned int *)(v6 + v7);
    v9 = v19;
    if (!(_DWORD)v19)
      goto LABEL_19;
  }
  if (v17 != 1)
  {
    if (v17)
      return result;
    if (*(_QWORD *)(v11 + 80) != *(_QWORD *)(v11 + 72))
      *(_QWORD *)(v11 + 72) = (*(_QWORD *)(v11 + 80) & 0xFFFFFFFCLL)
                            + *(unsigned int *)(*(_QWORD *)(v11 + 120) + (*(_QWORD *)(v11 + 80) & 0xFFFFFFFCLL))
                            + 4;
    result = sub_20B8FCC4C(v12, *(unsigned int *)(v11 + 200), 4);
    if (result == -1)
      v18 = 0;
    else
      v18 = (result >> 2) | 0x100000000;
    *v15 = HIDWORD(v18) | (4 * v18);
  }
  v20 = (int *)(*(_QWORD *)(v11 + 120) + (4 * v18));
  v19 = (v9 - 1);
  if (v9 == 1)
  {
    v20[1] = a5;
    v24 = 4;
    goto LABEL_22;
  }
  v21 = *v20;
  if (!(_DWORD)v21)
  {
    *(_QWORD *)v20 = 4;
    v21 = 4;
  }
  ++a3;
  v22 = (v9 + 4);
  v23 = v21 + 4;
  if (v23 + v22 >= (unint64_t)*(unsigned int *)(v11 + 200))
  {
    result = sub_20B8FCD44((unint64_t *)v11);
    v6 = *(_QWORD *)(v11 + 56);
    *(_DWORD *)(v6 + v7 + 4 * v13 + 4) = HIDWORD(result) | (4 * result);
    goto LABEL_18;
  }
  *((_BYTE *)v20 + v23) = v19;
  v25 = (char *)v20 + v23 + 1;
  result = (unint64_t)memcpy(v25, a3, v19);
  *(_DWORD *)&v25[v19] = a5;
  v24 = *v20 + v22;
LABEL_22:
  *v20 = v24;
  return result;
}

uint64_t sub_20B8FC98C(uint64_t a1, uint64_t a2)
{
  unint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  uint64_t (*v16)(void);
  char *v17;
  uint64_t result;
  char *v19;

  v4 = (unint64_t *)(a1 + 128);
  v5 = sub_20B8FCC4C((unint64_t *)(a1 + 128), 24, 4);
  v6 = sub_20B8FCE80(a1, *(_QWORD *)(a1 + 192), v4, 1);
  v7 = *(_QWORD *)(a1 + 136);
  v8 = sub_20B8FCC4C(v4, *(_QWORD *)(a1 + 72), 4096);
  if (v8 == -1)
    return 0xFFFFFFFFLL;
  v9 = v8;
  memcpy((void *)(*(_QWORD *)(a1 + 184) + v8), *(const void **)(a1 + 120), *(_QWORD *)(a1 + 72));
  v10 = *(char **)(a1 + 184);
  v11 = &v10[v5];
  v12 = HIDWORD(v6) + 4 * v6;
  *(_DWORD *)v11 = 1;
  *((_DWORD *)v11 + 1) = v12;
  *((_DWORD *)v11 + 2) = v7;
  *((_DWORD *)v11 + 3) = v9;
  v13 = *(_QWORD *)(a1 + 72);
  v14 = *(unsigned int *)(a1 + 200);
  *((_DWORD *)v11 + 4) = *(_QWORD *)(a1 + 72);
  *((_DWORD *)v11 + 5) = v14;
  *(_DWORD *)a2 = v12;
  *(_QWORD *)(a2 + 24) = v13;
  *(_QWORD *)(a2 + 32) = v14;
  v15 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 128) = v15;
  v16 = *(uint64_t (**)(void))(a1 + 168);
  if (v16)
    v17 = (char *)v16();
  else
    v17 = (char *)malloc_type_realloc(v10, v15, 0x21AF457BuLL);
  v19 = v17;
  result = 0;
  *(_QWORD *)(a1 + 184) = v19;
  *(_QWORD *)(a2 + 8) = v19;
  *(_QWORD *)(a2 + 16) = &v19[v9];
  return result;
}

uint64_t sub_20B8FCAA0(uint64_t a1, uint64_t a2, unsigned __int8 **a3, uint64_t *a4, _DWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 **v7;
  uint64_t *v8;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  void *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  void *v28;
  size_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  __int128 v34;
  void *v35;
  uint64_t v36;
  int v37;

  v5 = 1;
  if (a1)
  {
    v6 = a2;
    if (a2)
    {
      v7 = a3;
      if (a3)
      {
        v8 = a4;
        if (a4)
        {
          v37 = 1024;
          v20 = 0;
          v21 = 0;
          v19 = 0x10000;
          v23 = malloc_type_malloc(0x10000uLL, 0xC3836601uLL);
          v22 = 0;
          bzero(v23, 0x10000uLL);
          v25 = 0;
          v26 = 0;
          v24 = 0x10000;
          v28 = malloc_type_malloc(0x10000uLL, 0xC3836601uLL);
          v27 = 0;
          bzero(v28, 0x10000uLL);
          v30 = 0;
          v31 = 0;
          v29 = *(_QWORD *)(a1 + 40);
          v11 = *(void **)(a1 + 8);
          v34 = *(_OWORD *)(a1 + 56);
          v33 = a1 + 48;
          v35 = v11;
          v32 = 1;
          bzero(v11, v29);
          v12 = sub_20B8FCC4C(&v19, 1028, 4);
          v13 = (v12 >> 2) | 0x300000000;
          if (v12 == -1)
            v13 = 0;
          v36 = v13;
          while (1)
          {
            v15 = *v8++;
            v14 = v15;
            if ((unint64_t)(v15 - 257) <= 0xFFFFFFFFFFFFFEFFLL)
              break;
            v17 = *v7++;
            v16 = v17;
            LODWORD(v17) = *a5++;
            sub_20B8FC7D8((unint64_t)&v19, v36, v16, v14, v17);
            if (!--v6)
            {
              v19 = v20;
              v24 = (v26 & 0xFFFFFFFC)
                  + (unint64_t)*(unsigned int *)((char *)v28 + (v26 & 0xFFFFFFFC))
                  + 4;
              v25 = v24;
              v5 = sub_20B8FC98C((uint64_t)&v19, a1);
              if (v23)
                free(v23);
              if (v28)
                free(v28);
              return v5;
            }
          }
          if (v23)
            free(v23);
          if (v28)
            free(v28);
          return 0xFFFFFFFFLL;
        }
      }
    }
  }
  return v5;
}

uint64_t sub_20B8FCC4C(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t (*v8)(void *, _QWORD, unint64_t);
  void *v9;
  char *v10;

  v4 = *a1;
  v5 = (a3 + a1[1] - 1) & -a3;
  v6 = v5 + a2;
  if (v5 + a2 <= *a1)
  {
LABEL_13:
    a1[1] = v6;
    a1[2] = v5;
    return v5;
  }
  while (1)
  {
    v7 = 2 * (int)v4 ? 2 * v4 : 0x10000;
    if (!*((_DWORD *)a1 + 6))
      break;
    v8 = (uint64_t (*)(void *, _QWORD, unint64_t))a1[5];
    v9 = (void *)a1[7];
    v4 = v7;
    if (!v8)
    {
      v10 = (char *)malloc_type_realloc(v9, v7, 0x64A7BD1uLL);
      a1[7] = (unint64_t)v10;
      *(_DWORD *)a1[4] = 1;
      goto LABEL_11;
    }
    a1[7] = v8(v9, v7, a1[6]);
LABEL_12:
    *a1 = v4;
    if (v6 <= v4)
      goto LABEL_13;
  }
  v4 = v7;
  v10 = (char *)malloc_type_realloc((void *)a1[7], v7, 0x2715C904uLL);
  a1[7] = (unint64_t)v10;
  if (v10)
  {
LABEL_11:
    bzero(&v10[*a1], v4 - *a1);
    goto LABEL_12;
  }
  return -1;
}

uint64_t sub_20B8FCD44(unint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  size_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD v15[2];

  v15[1] = *MEMORY[0x24BDAC8D0];
  v2 = MEMORY[0x24BDAC7A8]();
  v4 = (_DWORD *)((char *)v15 - ((v3 + 19) & 0x1FFFFFFF0));
  v6 = (4 * v5);
  v7 = (unsigned int *)(*(_QWORD *)(v2 + 120) + v6);
  v8 = *v7;
  *v4 = v8;
  memcpy(v4 + 1, v7 + 1, v8);
  if (a1[10] == v6)
  {
    bzero(v7, a1[9] - v6);
    a1[9] = a1[10];
  }
  v9 = sub_20B8FCC4C(a1, 1028, 4);
  if (v9 == -1)
    v10 = 0;
  else
    v10 = (v9 >> 2) | 0x300000000;
  *(_DWORD *)(a1[7] + (4 * v10)) = v4[1];
  v11 = (unsigned __int8 *)(v4 + 2);
  v12 = (unint64_t)v4 + v8 + 4;
  if ((unint64_t)(v4 + 2) < v12)
  {
    do
    {
      v13 = (unint64_t)&v11[*v11 + 5];
      sub_20B8FC7D8(a1, v10);
      v11 = (unsigned __int8 *)v13;
    }
    while (v13 < v12);
  }
  return v10;
}

unint64_t sub_20B8FCE80(uint64_t a1, unint64_t a2, unint64_t *a3, int a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int32x4_t v11;
  int32x4_t v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  _DWORD *v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  _DWORD *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;

  LODWORD(v4) = a2;
  v5 = HIDWORD(a2);
  if (HIDWORD(a2) == 3)
  {
    v8 = 0;
    v9 = *(_QWORD *)(a1 + 56);
    v10 = (4 * a2);
    v11 = 0uLL;
    v12.i64[0] = 0x300000003;
    v12.i64[1] = 0x300000003;
    do
    {
      v11 = vsubq_s32(v11, vtstq_s32(*(int32x4_t *)(v10 + v9 + 4 + v8), v12));
      v8 += 16;
    }
    while (v8 != 1024);
    if (a4 || (v13 = vaddvq_s32(v11), v13 >= 0x21))
    {
      v24 = sub_20B8FCC4C(a3, 1028, 4);
      v25 = 0;
      if (v24 == -1)
        v4 = 0;
      else
        v4 = (v24 >> 2) | 0x300000000;
      v26 = (4 * v4);
      v27 = (int *)(v9 + v10);
      v29 = *v27;
      v28 = v27 + 1;
      *(_DWORD *)(a3[7] + v26) = v29;
      v30 = v26 + 4;
      do
      {
        v31 = sub_20B8FCE80(a1, ((unint64_t)v28[v25] >> 2) | ((unint64_t)(v28[v25] & 3) << 32), a3, 0);
        *(_DWORD *)(a3[7] + v30 + v25 * 4) = HIDWORD(v31) + 4 * v31;
        ++v25;
      }
      while (v25 != 256);
    }
    else
    {
      v14 = sub_20B8FCC4C(a3, 4 * v13 + 40, 4);
      v15 = 0;
      if (v14 == -1)
        v4 = 0;
      else
        v4 = (v14 >> 2) | 0x200000000;
      v16 = (4 * v4);
      v17 = (int *)(v9 + v10);
      v19 = *v17;
      v18 = v17 + 1;
      v20 = a3[7] + v16;
      *(_DWORD *)v20 = v19;
      *(_BYTE *)(v20 + 37) = v13;
      do
      {
        v21 = sub_20B8FCE80(a1, ((unint64_t)v18[v15] >> 2) | ((unint64_t)(v18[v15] & 3) << 32), a3, 0);
        if (HIDWORD(v21))
        {
          v22 = a3[7] + v16;
          v23 = *(unsigned __int8 *)(v22 + 36);
          *(_BYTE *)(v22 + 36) = v23 + 1;
          *(_DWORD *)(v22 + 4 * v23 + 40) = HIDWORD(v21) + 4 * v21;
          *(_DWORD *)(v22 + 4 * (v15 >> 5) + 4) |= 1 << v15;
        }
        ++v15;
      }
      while (v15 != 256);
    }
    v5 = HIDWORD(v4);
  }
  return v4 | ((unint64_t)v5 << 32);
}

uint64_t sub_20B8FD050(uint64_t a1, signed int a2)
{
  _QWORD *v4;
  void **v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t (***v9)();
  uint64_t v10;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  uint64_t (***v15)();
  void **v16;
  signed int v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)sub_20B9AE60C();
  v5 = (void **)sub_20B9AE6A0(v4, a2, off_254729648[0], CFSTR("sys.dic"));
  v12 = (uint64_t (**)())MEMORY[0x24BDAC760];
  v13 = 0x40000000;
  v14 = sub_20B894E44;
  v15 = (uint64_t (***)())&unk_24C46C098;
  v17 = a2;
  v16 = v5;
  sub_20B8945C4(v5, (uint64_t)&v12, 0, (uint64_t *)a1);
  *(_QWORD *)(a1 + 16) = sub_20B9F1A84(a2);
  v6 = a2 - 1;
  if ((a2 - 1) > 4)
  {
    v7 = 0;
    v8 = 0;
  }
  else
  {
    v7 = dword_20BA46C9C[v6];
    v8 = dword_20BA46CB0[v6];
  }
  *(_DWORD *)(a1 + 24) = v7;
  *(_DWORD *)(a1 + 28) = v8;
  *(_QWORD *)(a1 + 32) = 0;
  v12 = &off_24C469D70;
  v13 = a1;
  v15 = &v12;
  sub_20B8FD1F0((_QWORD *)a1, v7, (uint64_t)&v12);
  v9 = v15;
  if (v15 == &v12)
  {
    v10 = 4;
    v9 = &v12;
    goto LABEL_8;
  }
  if (v15)
  {
    v10 = 5;
LABEL_8:
    (*v9)[v10]();
  }
  return a1;
}

void sub_20B8FD19C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == &a10)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  sub_20B811FE4(v13);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8FD1F0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v6 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 40))(*a1);
  if ((_DWORD)v6 == (_DWORD)a2)
  {
    v7 = *(_QWORD *)(a3 + 24);
    if (v7)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7);
LABEL_6:
    sub_20B80BB74();
  }
  v9 = v6;
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 48))(*a1, a2);
  v10 = *(_QWORD *)(a3 + 24);
  if (!v10)
    goto LABEL_6;
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 48))(v10);
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 48))(*a1, v9);
}

_QWORD *sub_20B8FD294(signed int a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = (_QWORD *)operator new();
  sub_20B8FD050((uint64_t)v2, a1);
  if (!*v2)
  {
    v3 = sub_20B811FE4((uint64_t)v2);
    MEMORY[0x20BD39CB0](v3, 0x1060C40E039F83FLL);
    return 0;
  }
  return v2;
}

void sub_20B8FD300(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x1060C40E039F83FLL);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B8FD324(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v9 = a3;
  v5 = *(unsigned int *)(a1 + 28);
  v6 = operator new(0x20uLL);
  *v6 = &off_24C469D18;
  v6[1] = a1;
  v6[2] = a2;
  v6[3] = &v9;
  v11 = v6;
  sub_20B8FD1F0((_QWORD *)a1, v5, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v8 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8 * v8))(result);
}

void sub_20B8FD3E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B8FD424(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v11 = a4;
  v7 = *(unsigned int *)(a1 + 24);
  v8 = operator new(0x28uLL);
  *v8 = &off_24C469CC0;
  v8[1] = a1;
  v8[2] = a2;
  v8[3] = a3;
  v8[4] = &v11;
  v13 = v8;
  sub_20B8FD1F0((_QWORD *)a1, v7, (uint64_t)v12);
  result = v13;
  if (v13 == v12)
  {
    v10 = 4;
    result = v12;
  }
  else
  {
    if (!v13)
      return result;
    v10 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8 * v10))(result);
}

void sub_20B8FD4F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_20B8FD52C()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B8FD540(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C469D70;
  result[1] = v3;
  return result;
}

uint64_t sub_20B8FD574(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C469D70;
  a2[1] = v2;
  return result;
}

uint64_t sub_20B8FD590(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  v1 = *(_QWORD **)(result + 8);
  v2 = *v1;
  if (*(_QWORD *)(*v1 + 16)
    && (v3 = *(int *)(v2 + 36), v5 = v2 + 128, v4 = *(_QWORD *)(v2 + 128), v3 < (*(_QWORD *)(v5 + 8) - v4) >> 2)
    && (v6 = *(_DWORD *)(v4 + 4 * v3)) != 0)
  {
    v7 = v6 >> 1;
  }
  else
  {
    v7 = 15;
  }
  v1[4] = v7;
  return result;
}

uint64_t sub_20B8FD5D0(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45ED40))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B8FD60C()
{
  return &unk_24C45ED40;
}

void sub_20B8FD61C()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B8FD630(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24C469D18;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_20B8FD670(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C469D18;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void **sub_20B8FD698(uint64_t **a1)
{
  return sub_20BA1BEE0(*a1[1], *a1[2], 2 * a1[2][1], 0, *a1[3]);
}

uint64_t sub_20B8FD6BC(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45ED30))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B8FD6F8()
{
  return &unk_24C45ED30;
}

void sub_20B8FD708()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B8FD71C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24C469CC0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_20B8FD75C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C469CC0;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void **sub_20B8FD784(uint64_t a1)
{
  return sub_20BA1BEE0(**(_QWORD **)(a1 + 8), **(_QWORD **)(a1 + 16), 2 * *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), 2 * *(_QWORD *)(a1 + 24), **(_QWORD **)(a1 + 32));
}

uint64_t sub_20B8FD7A8(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45ED20))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B8FD7E4()
{
  return &unk_24C45ED20;
}

void ***sub_20B8FD7F0(void ***a1)
{
  void **v2;

  sub_20B8F8A7C(a1 + 1, 0);
  v2 = *a1;
  *a1 = 0;
  if (v2)
    MEMORY[0x20BD39CB0](v2, 0x1010C40E4C6A875);
  return a1;
}

uint64_t sub_20B8FD83C(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 48);
  if (*(_QWORD *)(a1 + 56) == v1)
    return -1;
  v3 = 0;
  while (1)
  {
    v4 = *(_QWORD *)(v1 + 8 * v3);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4) == 1
      || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4) == 7)
    {
      v5 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v3);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 408))(v5) != 2)
        break;
    }
    ++v3;
    v1 = *(_QWORD *)(a1 + 48);
    if (v3 >= (*(_QWORD *)(a1 + 56) - v1) >> 3)
      return -1;
  }
  return v3;
}

uint64_t sub_20B8FD8DC(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 48);
  if (*(_QWORD *)(a1 + 56) == v1)
    return -1;
  v3 = 0;
  while (1)
  {
    v4 = *(_QWORD *)(v1 + 8 * v3);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4) == 1
      || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4) == 7)
    {
      v5 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v3);
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 408))(v5))
        break;
    }
    ++v3;
    v1 = *(_QWORD *)(a1 + 48);
    if (v3 >= (*(_QWORD *)(a1 + 56) - v1) >> 3)
      return -1;
  }
  return v3;
}

uint64_t sub_20B8FD978(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 48);
  if (*(_QWORD *)(a1 + 56) == v1)
    return -1;
  v3 = 0;
  while (1)
  {
    v4 = *(_QWORD *)(v1 + 8 * v3);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4) == 1
      || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4) == 7)
    {
      v5 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v3);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 408))(v5) != 1)
        break;
    }
    ++v3;
    v1 = *(_QWORD *)(a1 + 48);
    if (v3 >= (*(_QWORD *)(a1 + 56) - v1) >> 3)
      return -1;
  }
  return v3;
}

uint64_t sub_20B8FDA18(uint64_t a1, int a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = *(_QWORD **)(a1 + 48);
  v3 = *(_QWORD **)(a1 + 56);
  if (v2 == v3)
    return -1;
  while ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v2 + 96))(*v2) != a2)
  {
    if (++v2 == v3)
    {
      v2 = v3;
      break;
    }
  }
  if (v2 == *(_QWORD **)(a1 + 56))
    return -1;
  else
    return ((uint64_t)v2 - *(_QWORD *)(a1 + 48)) >> 3;
}

uint64_t sub_20B8FDA94(_QWORD *a1, _QWORD **a2, int a3, _BYTE *a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t **v11;
  uint64_t v12;
  int64x2_t *v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  int64x2_t v37;
  char *v38;
  _QWORD *v39;
  _QWORD *v40;
  int64x2_t v41;
  char *v42;
  _QWORD *v43;
  _QWORD *v44;

  v5 = *a2;
  if (!*a2)
    return 0;
  if (a4)
    *a4 = 0;
  v40 = v5;
  if (sub_20B8CD218(a1 + 1, &v40))
  {
    if (a3 != 2)
    {
      v40 = *a2;
      if (v40 && (v11 = sub_20B8CD218(a1 + 1, &v40)) != 0)
        v12 = (uint64_t)v11[3];
      else
        v12 = -1;
      v19 = *(_QWORD **)(a1[6] + 8 * v12);
      v39 = v19;
      if (!a3)
        goto LABEL_15;
      v20 = *a2;
      v21 = *(_QWORD *)(a5 + 24);
      v40 = v19;
      v44 = v20;
      if (!v21)
        sub_20B80BB74();
      if ((*(unsigned int (**)(uint64_t, _QWORD **, _QWORD **))(*(_QWORD *)v21 + 48))(v21, &v40, &v44))
      {
LABEL_15:
        sub_20B90008C(a1 + 1, &v39);
        v44 = *a2;
        v40 = &v44;
        sub_20B900100((float *)a1 + 2, &v44, (uint64_t)&unk_20BA37B7A, &v40)[3] = v12;
        v22 = a1[6];
        v23 = *a2;
        *a2 = 0;
        v24 = *(_QWORD *)(v22 + 8 * v12);
        *(_QWORD *)(v22 + 8 * v12) = v23;
        if (v24)
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 16))(v24);
        if (a4)
          *a4 = 1;
      }
    }
    return 0;
  }
  v13 = (int64x2_t *)(a1 + 6);
  v14 = (uint64_t)(a1[7] - a1[6]) >> 3;
  v44 = *a2;
  v40 = &v44;
  sub_20B900100((float *)a1 + 2, &v44, (uint64_t)&unk_20BA37B7A, &v40)[3] = v14;
  v15 = (_QWORD *)a1[7];
  v16 = a1[8];
  if ((unint64_t)v15 >= v16)
  {
    v26 = ((uint64_t)v15 - v13->i64[0]) >> 3;
    if ((unint64_t)(v26 + 1) >> 61)
      sub_20B80CDD8();
    v27 = v16 - v13->i64[0];
    v28 = v27 >> 2;
    if (v27 >> 2 <= (unint64_t)(v26 + 1))
      v28 = v26 + 1;
    if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
      v29 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v29 = v28;
    v43 = a1 + 8;
    if (v29)
      v30 = (char *)sub_20B800BE8((uint64_t)(a1 + 8), v29);
    else
      v30 = 0;
    v31 = &v30[8 * v26];
    v32 = &v30[8 * v29];
    v42 = v32;
    v33 = *a2;
    *a2 = 0;
    *(_QWORD *)v31 = v33;
    v18 = v31 + 8;
    v41.i64[1] = (uint64_t)(v31 + 8);
    v35 = (_QWORD *)a1[6];
    v34 = (_QWORD *)a1[7];
    if (v34 == v35)
    {
      v37 = vdupq_n_s64((unint64_t)v34);
    }
    else
    {
      do
      {
        v36 = *--v34;
        *v34 = 0;
        *((_QWORD *)v31 - 1) = v36;
        v31 -= 8;
      }
      while (v34 != v35);
      v37 = *v13;
      v18 = (_QWORD *)v41.i64[1];
      v32 = v42;
    }
    a1[6] = v31;
    a1[7] = v18;
    v41 = v37;
    v38 = (char *)a1[8];
    a1[8] = v32;
    v42 = v38;
    v40 = (_QWORD *)v37.i64[0];
    sub_20B8CD36C((uint64_t)&v40);
  }
  else
  {
    v17 = *a2;
    *a2 = 0;
    *v15 = v17;
    v18 = v15 + 1;
  }
  a1[7] = v18;
  return 1;
}

_QWORD *sub_20B8FDD20(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v3 = a1[6];
  v4 = (uint64_t *)a1[7];
  sub_20B86D7F0((uint64_t)v11, a2);
  if ((uint64_t)v4 - v3 < 1)
  {
    v5 = 0;
    v7 = 0;
  }
  else
  {
    v5 = (uint64_t *)sub_20B90052C(((uint64_t)v4 - v3) >> 3);
    v7 = v6;
  }
  sub_20B90058C(v3, v4, (uint64_t)v11, ((uint64_t)v4 - v3) >> 3, v5, v7);
  if (v5)
    operator delete(v5);
  v8 = v12;
  if (v12 == v11)
  {
    v9 = 4;
    v8 = v11;
    goto LABEL_10;
  }
  if (v12)
  {
    v9 = 5;
LABEL_10:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  return sub_20B8FDE64(a1);
}

void sub_20B8FDE14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  void *v13;
  char *v15;
  uint64_t v16;

  if (v13)
    operator delete(v13);
  v15 = a13;
  if (a13 == &a10)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_8;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_8:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B8FDE64(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  unint64_t v3;
  float *v4;
  uint64_t v5;
  uint64_t *v6;

  v1 = result[6];
  if (result[7] != v1)
  {
    v2 = result;
    v3 = 0;
    v4 = (float *)(result + 1);
    do
    {
      v5 = *(_QWORD *)(v1 + 8 * v3);
      v6 = &v5;
      result = sub_20B900100(v4, &v5, (uint64_t)&unk_20BA37B7A, &v6);
      result[3] = v3++;
      v1 = v2[6];
    }
    while (v3 < (v2[7] - v1) >> 3);
  }
  return result;
}

uint64_t sub_20B8FDEF4(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t **v5;
  uint64_t **v7;
  unint64_t v8;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (!*a2)
    return 0;
  v5 = (uint64_t **)(a1 + 48);
  if (a3 > (uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 3)
    return 0;
  v15 = *a2;
  v7 = sub_20B8CD218((_QWORD *)(a1 + 8), &v15);
  if (v7)
  {
    v8 = (unint64_t)v7[3];
    if (v8 < a3)
      return 0;
    if (v8 != -1)
    {
      v15 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v8);
      sub_20B90008C((_QWORD *)(a1 + 8), &v15);
      sub_20B8FF608((uint64_t *)(*(_QWORD *)(a1 + 48) + 8 * v8 + 8), *(uint64_t **)(a1 + 56), (uint64_t *)(*(_QWORD *)(a1 + 48) + 8 * v8));
      v11 = v10;
      v12 = *(_QWORD **)(a1 + 56);
      if (v12 != v10)
      {
        do
        {
          v14 = *--v12;
          v13 = v14;
          *v12 = 0;
          if (v14)
            (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
        }
        while (v12 != v11);
      }
      *(_QWORD *)(a1 + 56) = v11;
    }
  }
  sub_20B8FDFFC(v5, (char *)(*(_QWORD *)(a1 + 48) + 8 * a3), a2);
  sub_20B8FDE64((_QWORD *)a1);
  return 1;
}

uint64_t *sub_20B8FDFFC(uint64_t **a1, char *a2, uint64_t *a3)
{
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  int64x2_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t *v55;
  __int128 v56;
  uint64_t *v57;
  _QWORD *v58;
  uint64_t *v59;
  int64x2_t v60;
  uint64_t *v61;
  uint64_t v62;

  v6 = *a1;
  v5 = (unint64_t)a1[1];
  v7 = a2 - (char *)*a1;
  v8 = v7 >> 3;
  v9 = (uint64_t *)((char *)*a1 + (v7 & 0xFFFFFFFFFFFFFFF8));
  v11 = (uint64_t)(a1 + 2);
  v10 = (unint64_t)a1[2];
  if (v5 >= v10)
  {
    v17 = ((uint64_t)(v5 - (_QWORD)v6) >> 3) + 1;
    if (v17 >> 61)
      sub_20B80CDD8();
    v19 = v10 - (_QWORD)v6;
    if (v19 >> 2 > v17)
      v17 = v19 >> 2;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
      v20 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v20 = v17;
    v58 = a1 + 2;
    if (v20)
      v21 = (uint64_t *)sub_20B800BE8((uint64_t)(a1 + 2), v20);
    else
      v21 = 0;
    v23 = &v21[v8];
    v55 = v21;
    *(_QWORD *)&v56 = v23;
    *((_QWORD *)&v56 + 1) = v23;
    v57 = &v21[v20];
    if (v8 == v20)
    {
      if (v7 < 1)
      {
        if (v6 == (uint64_t *)a2)
          v32 = 1;
        else
          v32 = v7 >> 2;
        v62 = v11;
        v33 = (uint64_t *)sub_20B800BE8(v11, v32);
        v35 = (uint64_t *)v56;
        v36 = *((_QWORD *)&v56 + 1) - v56;
        if (*((_QWORD *)&v56 + 1) == (_QWORD)v56)
        {
          v42 = vdupq_n_s64(v56);
          v38 = (unint64_t)&v33[v32 >> 2];
        }
        else
        {
          v37 = v36 >> 3;
          v38 = (unint64_t)&v33[v32 >> 2] + (v36 & 0xFFFFFFFFFFFFFFF8);
          v39 = 8 * v37;
          v40 = (char *)&v33[v32 >> 2];
          do
          {
            v41 = *v35;
            *v35++ = 0;
            *(_QWORD *)v40 = v41;
            v40 += 8;
            v39 -= 8;
          }
          while (v39);
          v42 = (int64x2_t)v56;
        }
        v43 = v57;
        v59 = v55;
        v55 = v33;
        *(_QWORD *)&v56 = &v33[v32 >> 2];
        v60 = v42;
        *((_QWORD *)&v56 + 1) = v38;
        v57 = &v33[v34];
        v61 = v43;
        sub_20B8CD36C((uint64_t)&v59);
        v25 = (uint64_t *)*((_QWORD *)&v56 + 1);
        v23 = (uint64_t *)v56;
      }
      else
      {
        if (v8 >= -1)
          v24 = v8 + 1;
        else
          v24 = v8 + 2;
        sub_20B8FF608(&v21[v8], v23, &v23[-(v24 >> 1)]);
        v23 = (uint64_t *)(v56 - 8 * (v24 >> 1));
      }
    }
    else
    {
      v25 = &v21[v8];
    }
    v44 = *a3;
    *a3 = 0;
    *v25 = v44;
    v45 = v25 + 1;
    *((_QWORD *)&v56 + 1) = v45;
    v46 = *a1;
    v47 = v23;
    if (*a1 != v9)
    {
      v48 = v9;
      do
      {
        v49 = *--v48;
        *v48 = 0;
        *--v47 = v49;
      }
      while (v48 != v46);
      v45 = (uint64_t *)*((_QWORD *)&v56 + 1);
    }
    *(_QWORD *)&v56 = v47;
    v50 = a1[1];
    if (v50 != v9)
    {
      do
      {
        v51 = *v9;
        *v9++ = 0;
        *v45++ = v51;
      }
      while (v9 != v50);
      v47 = (uint64_t *)v56;
      v9 = a1[1];
    }
    v52 = *a1;
    *a1 = v47;
    a1[1] = v45;
    v53 = a1[2];
    a1[2] = v57;
    *((_QWORD *)&v56 + 1) = v9;
    v57 = v53;
    v55 = v52;
    *(_QWORD *)&v56 = v52;
    sub_20B8CD36C((uint64_t)&v55);
  }
  else
  {
    if (v9 == (uint64_t *)v5)
    {
      v22 = *a3;
      *a3 = 0;
      *v9 = v22;
      a1[1] = v9 + 1;
    }
    else
    {
      v12 = v9 + 1;
      v13 = (uint64_t *)(v5 - 8);
      if (v5 < 8)
      {
        v15 = a1[1];
      }
      else
      {
        v14 = (uint64_t *)(v5 - 8);
        v15 = a1[1];
        do
        {
          v16 = *v14;
          *v14++ = 0;
          *v15++ = v16;
        }
        while ((unint64_t)v14 < v5);
      }
      a1[1] = v15;
      if ((_QWORD *)v5 != v12)
      {
        v26 = 8 * ((uint64_t)(v5 - (_QWORD)v12) >> 3);
        v27 = (uint64_t)&v6[v8 - 1];
        do
        {
          v28 = *(_QWORD *)(v27 + v26);
          *(_QWORD *)(v27 + v26) = 0;
          v29 = *v13;
          *v13 = v28;
          if (v29)
            (*(void (**)(uint64_t))(*(_QWORD *)v29 + 16))(v29);
          --v13;
          v26 -= 8;
        }
        while (v26);
      }
      v30 = *a3;
      *a3 = 0;
      v31 = *v9;
      *v9 = v30;
      if (v31)
        (*(void (**)(uint64_t))(*(_QWORD *)v31 + 16))(v31);
    }
    return v9;
  }
  return v23;
}

void sub_20B8FE304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B8CD36C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B8FE318(uint64_t a1, uint64_t **a2, unint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  _QWORD *v8;
  uint64_t **v9;
  uint64_t v11;

  if (a3 > (uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 3)
    return 0;
  v3 = *a2;
  v4 = a2[1];
  if (*a2 == v4)
    return 0;
  v7 = 0;
  v8 = (_QWORD *)(a1 + 8);
  do
  {
    v11 = *v3;
    if (!v11 || (v9 = sub_20B8CD218(v8, &v11)) == 0 || (unint64_t)v9[3] >= v7 + a3)
      v7 += sub_20B8FDEF4(a1, v3, v7 + a3);
    ++v3;
  }
  while (v3 != v4);
  return v7;
}

void sub_20B8FE3D4(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t *v25;
  char *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  int64x2_t v30;
  char *v31;
  uint64_t *v32;
  char *v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  int64x2_t v37;
  char *v38;
  uint64_t *v39;
  char *v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  int64x2_t v44;
  char *v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  int64x2_t v50;
  _QWORD *v51;
  int64x2_t v52;
  unint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *i;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  int64x2_t v77;
  char *v78;
  int64x2_t v79;
  _QWORD v80[2];
  int64x2_t v81;
  _QWORD v82[2];
  int64x2_t v83;
  _QWORD v84[2];
  int64x2_t *v85;
  int64x2_t v86;
  char *v87;
  _QWORD *v88;

  v83 = 0uLL;
  v84[0] = 0;
  v81 = 0uLL;
  v82[0] = 0;
  v79 = 0uLL;
  v80[0] = 0;
  v3 = (uint64_t *)a1[6];
  v4 = (uint64_t *)a1[7];
  v2 = (uint64_t **)(a1 + 6);
  if (v3 != v4)
  {
    do
    {
      v5 = *v3;
      v6 = *(_QWORD *)(*v3 + 8);
      if (v6)
      {
        if (v6 < 1)
        {
          v11 = (uint64_t *)v79.i64[1];
          if (v79.i64[1] >= v80[0])
          {
            v21 = (v79.i64[1] - v79.i64[0]) >> 3;
            if ((unint64_t)(v21 + 1) >> 61)
LABEL_96:
              sub_20B80CDD8();
            v22 = (v80[0] - v79.i64[0]) >> 2;
            if (v22 <= v21 + 1)
              v22 = v21 + 1;
            if (v80[0] - v79.i64[0] >= 0x7FFFFFFFFFFFFFF8uLL)
              v23 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v23 = v22;
            v88 = v80;
            if (v23)
            {
              v24 = (char *)sub_20B800BE8((uint64_t)v80, v23);
              v5 = *v3;
            }
            else
            {
              v24 = 0;
            }
            v39 = (uint64_t *)&v24[8 * v21];
            v40 = &v24[8 * v23];
            v87 = v40;
            *v3 = 0;
            *v39 = v5;
            v12 = v39 + 1;
            v86.i64[1] = (uint64_t)(v39 + 1);
            v41 = (_QWORD *)v79.i64[1];
            v42 = (_QWORD *)v79.i64[0];
            if (v79.i64[1] == v79.i64[0])
            {
              v44 = vdupq_n_s64(v79.u64[1]);
            }
            else
            {
              do
              {
                v43 = *--v41;
                *v41 = 0;
                *--v39 = v43;
              }
              while (v41 != v42);
              v44 = v79;
              v12 = (_QWORD *)v86.i64[1];
              v40 = v87;
            }
            v79.i64[0] = (uint64_t)v39;
            v79.i64[1] = (uint64_t)v12;
            v86 = v44;
            v45 = (char *)v80[0];
            v80[0] = v40;
            v87 = v45;
            v85 = (int64x2_t *)v44.i64[0];
            sub_20B8CD36C((uint64_t)&v85);
          }
          else
          {
            *v3 = 0;
            *v11 = v5;
            v12 = v11 + 1;
          }
          v79.i64[1] = (uint64_t)v12;
        }
        else
        {
          v7 = (uint64_t *)v81.i64[1];
          if (v81.i64[1] >= v82[0])
          {
            v13 = (v81.i64[1] - v81.i64[0]) >> 3;
            if ((unint64_t)(v13 + 1) >> 61)
              goto LABEL_96;
            v14 = (v82[0] - v81.i64[0]) >> 2;
            if (v14 <= v13 + 1)
              v14 = v13 + 1;
            if (v82[0] - v81.i64[0] >= 0x7FFFFFFFFFFFFFF8uLL)
              v15 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v15 = v14;
            v88 = v82;
            if (v15)
            {
              v16 = (char *)sub_20B800BE8((uint64_t)v82, v15);
              v5 = *v3;
            }
            else
            {
              v16 = 0;
            }
            v25 = (uint64_t *)&v16[8 * v13];
            v26 = &v16[8 * v15];
            v87 = v26;
            *v3 = 0;
            *v25 = v5;
            v8 = v25 + 1;
            v86.i64[1] = (uint64_t)(v25 + 1);
            v27 = (_QWORD *)v81.i64[1];
            v28 = (_QWORD *)v81.i64[0];
            if (v81.i64[1] == v81.i64[0])
            {
              v30 = vdupq_n_s64(v81.u64[1]);
            }
            else
            {
              do
              {
                v29 = *--v27;
                *v27 = 0;
                *--v25 = v29;
              }
              while (v27 != v28);
              v30 = v81;
              v8 = (_QWORD *)v86.i64[1];
              v26 = v87;
            }
            v81.i64[0] = (uint64_t)v25;
            v81.i64[1] = (uint64_t)v8;
            v86 = v30;
            v31 = (char *)v82[0];
            v82[0] = v26;
            v87 = v31;
            v85 = (int64x2_t *)v30.i64[0];
            sub_20B8CD36C((uint64_t)&v85);
          }
          else
          {
            *v3 = 0;
            *v7 = v5;
            v8 = v7 + 1;
          }
          v81.i64[1] = (uint64_t)v8;
        }
      }
      else
      {
        v9 = (uint64_t *)v83.i64[1];
        if (v83.i64[1] >= v84[0])
        {
          v17 = (v83.i64[1] - v83.i64[0]) >> 3;
          if ((unint64_t)(v17 + 1) >> 61)
            goto LABEL_96;
          v18 = (v84[0] - v83.i64[0]) >> 2;
          if (v18 <= v17 + 1)
            v18 = v17 + 1;
          if (v84[0] - v83.i64[0] >= 0x7FFFFFFFFFFFFFF8uLL)
            v19 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v19 = v18;
          v88 = v84;
          if (v19)
          {
            v20 = (char *)sub_20B800BE8((uint64_t)v84, v19);
            v5 = *v3;
          }
          else
          {
            v20 = 0;
          }
          v32 = (uint64_t *)&v20[8 * v17];
          v33 = &v20[8 * v19];
          v87 = v33;
          *v3 = 0;
          *v32 = v5;
          v10 = v32 + 1;
          v86.i64[1] = (uint64_t)(v32 + 1);
          v34 = (_QWORD *)v83.i64[1];
          v35 = (_QWORD *)v83.i64[0];
          if (v83.i64[1] == v83.i64[0])
          {
            v37 = vdupq_n_s64(v83.u64[1]);
          }
          else
          {
            do
            {
              v36 = *--v34;
              *v34 = 0;
              *--v32 = v36;
            }
            while (v34 != v35);
            v37 = v83;
            v10 = (_QWORD *)v86.i64[1];
            v33 = v87;
          }
          v83.i64[0] = (uint64_t)v32;
          v83.i64[1] = (uint64_t)v10;
          v86 = v37;
          v38 = (char *)v84[0];
          v84[0] = v33;
          v87 = v38;
          v85 = (int64x2_t *)v37.i64[0];
          sub_20B8CD36C((uint64_t)&v85);
        }
        else
        {
          *v3 = 0;
          *v9 = v5;
          v10 = v9 + 1;
        }
        v83.i64[1] = (uint64_t)v10;
      }
      ++v3;
    }
    while (v3 != v4);
    v3 = *v2;
  }
  if (v3)
  {
    v46 = (uint64_t *)a1[7];
    v47 = v3;
    if (v46 != v3)
    {
      do
      {
        v49 = *--v46;
        v48 = v49;
        *v46 = 0;
        if (v49)
          (*(void (**)(uint64_t))(*(_QWORD *)v48 + 16))(v48);
      }
      while (v46 != v3);
      v47 = *v2;
    }
    a1[7] = v3;
    operator delete(v47);
    *v2 = 0;
    v2[1] = 0;
    v2[2] = 0;
  }
  v50 = v83;
  a1[8] = v84[0];
  v51 = a1 + 8;
  *((int64x2_t *)a1 + 3) = v50;
  v84[0] = 0;
  v83 = 0uLL;
  v52 = v81;
  v53 = (v81.i64[1] - v81.i64[0]) >> 3;
  if (v81.i64[1] - v81.i64[0] < 1)
  {
    v54 = 0;
    v56 = 0;
  }
  else
  {
    v54 = (uint64_t *)sub_20B90052C((v81.i64[1] - v81.i64[0]) >> 3);
    v56 = v55;
  }
  sub_20B9013E8(v52.i64[0], (uint64_t *)v52.i64[1], v53, v54, v56);
  if (v54)
    operator delete(v54);
  v58 = (uint64_t *)v81.i64[1];
  for (i = (uint64_t *)v81.i64[0]; i != v58; ++i)
  {
    v59 = a1[6];
    v60 = a1[7] - v59;
    if (*(_QWORD *)(*i + 8) - 1 >= (unint64_t)(v60 >> 3))
      v61 = v60 >> 3;
    else
      v61 = *(_QWORD *)(*i + 8) - 1;
    sub_20B8FDFFC(v2, (char *)(v59 + 8 * v61), i);
  }
  v63 = (uint64_t *)v79.i64[1];
  v62 = (uint64_t *)v79.i64[0];
  if (v79.i64[0] != v79.i64[1])
  {
    v64 = (_QWORD *)a1[7];
    do
    {
      if ((unint64_t)v64 >= *v51)
      {
        v66 = v64 - *v2;
        if ((unint64_t)(v66 + 1) >> 61)
          sub_20B80CDD8();
        v67 = *v51 - (_QWORD)*v2;
        v68 = v67 >> 2;
        if (v67 >> 2 <= (unint64_t)(v66 + 1))
          v68 = v66 + 1;
        if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF8)
          v69 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v69 = v68;
        v88 = a1 + 8;
        if (v69)
          v70 = (char *)sub_20B800BE8((uint64_t)(a1 + 8), v69);
        else
          v70 = 0;
        v71 = &v70[8 * v66];
        v72 = &v70[8 * v69];
        v87 = v72;
        v73 = *v62;
        *v62 = 0;
        *(_QWORD *)v71 = v73;
        v64 = v71 + 8;
        v86.i64[1] = (uint64_t)(v71 + 8);
        v75 = (_QWORD *)a1[6];
        v74 = (_QWORD *)a1[7];
        if (v74 == v75)
        {
          v77 = vdupq_n_s64((unint64_t)v74);
        }
        else
        {
          do
          {
            v76 = *--v74;
            *v74 = 0;
            *((_QWORD *)v71 - 1) = v76;
            v71 -= 8;
          }
          while (v74 != v75);
          v77 = *(int64x2_t *)v2;
          v64 = (_QWORD *)v86.i64[1];
          v72 = v87;
        }
        a1[6] = v71;
        a1[7] = v64;
        v86 = v77;
        v78 = (char *)a1[8];
        a1[8] = v72;
        v87 = v78;
        v85 = (int64x2_t *)v77.i64[0];
        sub_20B8CD36C((uint64_t)&v85);
      }
      else
      {
        v65 = *v62;
        *v62 = 0;
        *v64++ = v65;
      }
      a1[7] = v64;
      ++v62;
    }
    while (v62 != v63);
  }
  sub_20B8FDE64(a1);
  v85 = &v79;
  sub_20B882410((void ***)&v85);
  v85 = &v81;
  sub_20B882410((void ***)&v85);
  v85 = &v83;
  sub_20B882410((void ***)&v85);
}

void sub_20B8FE95C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void ***a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;

  *(_QWORD *)(v17 - 88) = &a9;
  sub_20B882410((void ***)(v17 - 88));
  a9 = &a13;
  sub_20B882410((void ***)&a9);
  a13 = (void **)&a17;
  sub_20B882410(&a13);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B8FE9C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *result;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;

  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(v6 + 8 * a2);
  *(_QWORD *)(v6 + 8 * a2) = 0;
  *a3 = v7;
  v13 = v7;
  sub_20B90008C((_QWORD *)(a1 + 8), &v13);
  result = sub_20B8FF608((uint64_t *)(*(_QWORD *)(a1 + 48) + 8 * a2 + 8), *(uint64_t **)(a1 + 56), (uint64_t *)(*(_QWORD *)(a1 + 48) + 8 * a2));
  v10 = v9;
  v11 = *(_QWORD **)(a1 + 56);
  while (v11 != v10)
  {
    v12 = (uint64_t *)*--v11;
    result = v12;
    *v11 = 0;
    if (v12)
      result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 16))(result);
  }
  *(_QWORD *)(a1 + 56) = v10;
  return result;
}

void sub_20B8FEA54(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v2;

  *v2 = 0;
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B8FEA7C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  sub_20B8FE9C0((uint64_t)a1, a2, a3);
  return sub_20B8FDE64(a1);
}

void sub_20B8FEAA8(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B8FEACC(_QWORD *a1, unint64_t **a2)
{
  unint64_t *v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  char v13;

  v4 = *a2;
  v5 = a2[1];
  v6 = 126 - 2 * __clz(v5 - v4);
  if (v5 == v4)
    v7 = 0;
  else
    v7 = v6;
  sub_20B8FF678(v4, v5, (uint64_t)&v13, v7, 1);
  v9 = (uint64_t *)*a2;
  v8 = (uint64_t *)a2[1];
  while (v9 != v8)
  {
    sub_20B8FE9C0((uint64_t)a1, *v9, &v12);
    v10 = v12;
    v12 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    ++v9;
  }
  return sub_20B8FDE64(a1);
}

_QWORD *sub_20B8FEB6C(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = result[7] - result[6];
  if (v2)
  {
    v4 = result;
    v5 = v2 >> 3;
    while (v5 > a2)
    {
      sub_20B8FE9C0((uint64_t)v4, --v5, &v7);
      v6 = v7;
      v7 = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    }
    return sub_20B8FDE64(v4);
  }
  return result;
}

_QWORD *sub_20B8FEBFC(_QWORD *result, uint64_t **a2, unint64_t a3)
{
  _QWORD *v5;
  float *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;

  if (a3 < (uint64_t)(result[7] - result[6]) >> 3)
  {
    v5 = result;
    v10 = *a2;
    v6 = (float *)(result + 1);
    result = sub_20B8CD218(result + 1, &v10);
    if (!result)
    {
      v7 = v5[6];
      v10 = *(uint64_t **)(v7 + 8 * a3);
      sub_20B90008C(v6, &v10);
      v8 = *(uint64_t **)(v7 + 8 * a3);
      *(_QWORD *)(v7 + 8 * a3) = *a2;
      *a2 = v8;
      v9 = *(_QWORD *)(v7 + 8 * a3);
      v10 = &v9;
      result = sub_20B900100(v6, &v9, (uint64_t)&unk_20BA37B7A, &v10);
      result[3] = a3;
    }
  }
  return result;
}

_QWORD *sub_20B8FECB4(_QWORD *result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v7;
  _QWORD *v8;

  v3 = (uint64_t)(result[7] - result[6]) >> 3;
  if (v3 > a2 && a2 != a3 && v3 > a3)
  {
    v7 = (uint64_t)result;
    sub_20B8FE9C0((uint64_t)result, a2, &v8);
    sub_20B8FDEF4(v7, (uint64_t *)&v8, a3);
    result = v8;
    v8 = 0;
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 16))(result);
  }
  return result;
}

void sub_20B8FED2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 16))(a10);
  _Unwind_Resume(exception_object);
}

void sub_20B8FED50(uint64_t a1, unsigned int a2, uint64_t a3, int a4, unsigned int a5)
{
  NSObject *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  void *__p[2];
  char v20;
  uint8_t buf[16];
  uint64_t v22;
  _QWORD v23[10];
  char v24;
  _QWORD v25[22];

  v25[20] = *MEMORY[0x24BDAC8D0];
  v7 = sub_20B9A7C5C(a2);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = a3;
    _os_log_debug_impl(&dword_20B7F7000, v7, OS_LOG_TYPE_DEBUG, "%s", buf, 0xCu);
  }
  v8 = *(_QWORD *)(a1 + 48);
  if (*(_QWORD *)(a1 + 56) != v8)
  {
    v9 = 0;
    v10 = *MEMORY[0x24BEDB7F0];
    v12 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
    v11 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v13 = MEMORY[0x24BEDB848] + 16;
    do
    {
      v14 = *(_QWORD *)(v8 + 8 * v9);
      if (v9 >= 0x10 && !a4)
        break;
      sub_20B83BFEC((uint64_t)buf);
      sub_20B828F84(&v22, (uint64_t)"#", 1);
      ++v9;
      std::ostream::operator<<();
      sub_20B871648((uint64_t)v23, __p);
      if (v20 >= 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      (*(void (**)(uint64_t, _QWORD, void **, _QWORD))(*(_QWORD *)v14 + 528))(v14, a2, v15, a5);
      if (v20 < 0)
        operator delete(__p[0]);
      *(_QWORD *)buf = v10;
      *(_QWORD *)&buf[*(_QWORD *)(v10 - 24)] = v12;
      v22 = v11;
      v23[0] = v13;
      if (v24 < 0)
        operator delete((void *)v23[8]);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x20BD39C2C](v25);
      v8 = *(_QWORD *)(a1 + 48);
    }
    while (v9 < (*(_QWORD *)(a1 + 56) - v8) >> 3);
  }
}

void sub_20B8FEF38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a16 < 0)
    operator delete(__p);
  sub_20B83C118((uint64_t)&a18);
  _Unwind_Resume(a1);
}

BOOL sub_20B8FEF70(uint64_t **a1, _QWORD *a2)
{
  int v4;
  int v5;
  unsigned __int8 v6;
  uint64_t i;
  char *v8;
  char *v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  _QWORD *v20;
  uint64_t v21;
  int v23;
  int v24;
  uint64_t *v25;
  uint64_t v26;
  const __CFString *v27;
  CFIndex Length;
  const __CFString *v29;
  int v31;
  int v32;
  int v33;
  _QWORD v34[3];
  _QWORD *v35;
  _BYTE v36[24];
  _BYTE *v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v4 = (*(uint64_t (**)(uint64_t *))(**a1 + 96))(*a1);
  v5 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 96))(*a2);
  v6 = atomic_load((unsigned __int8 *)qword_25472B668);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(qword_25472B668))
  {
    qword_25472B670 = (uint64_t)&off_24C469A58;
    qword_25472B688 = (uint64_t)&qword_25472B670;
    qword_25472B690 = (uint64_t)&off_24C469AB0;
    qword_25472B6A8 = (uint64_t)&qword_25472B690;
    qword_25472B6B0 = (uint64_t)&off_24C469B08;
    qword_25472B6C8 = (uint64_t)&qword_25472B6B0;
    __cxa_atexit((void (*)(void *))sub_20B8FF340, &qword_25472B670, &dword_20B7F7000);
    __cxa_guard_release(qword_25472B668);
  }
  for (i = 0; i != 12; i += 4)
  {
    v8 = (char *)qword_25472B668[i + 4];
    if (!v8)
    {
      v37 = 0;
      v32 = v5;
      v33 = v4;
LABEL_43:
      sub_20B80BB74();
    }
    v9 = (char *)&qword_25472B668[i + 1];
    if (v9 == v8)
    {
      v37 = v36;
      (*(void (**)(char *, _BYTE *))(*(_QWORD *)v9 + 24))(v9, v36);
      v10 = (uint64_t)v37;
    }
    else
    {
      v10 = (*(uint64_t (**)(char *))(*(_QWORD *)v8 + 16))(v8);
      v37 = (_BYTE *)v10;
    }
    v32 = v5;
    v33 = v4;
    if (!v10)
      goto LABEL_43;
    if (((*(uint64_t (**)(uint64_t, int *, int *))(*(_QWORD *)v10 + 48))(v10, &v33, &v32) & 1) != 0)
    {
      v11 = -1;
    }
    else
    {
      v32 = v4;
      v33 = v5;
      if (!v37)
        goto LABEL_43;
      v11 = (*(uint64_t (**)(_BYTE *, int *, int *))(*(_QWORD *)v37 + 48))(v37, &v33, &v32);
    }
    v12 = v37;
    if (v37 == v36)
    {
      v12 = v36;
      v13 = 4;
    }
    else
    {
      if (!v37)
        goto LABEL_17;
      v13 = 5;
    }
    (*(void (**)(_QWORD *))(*v12 + 8 * v13))(v12);
LABEL_17:
    if (v11)
      return v11 == -1;
  }
  v14 = *a1;
  v15 = *a2;
  v34[0] = &off_24C469A00;
  v35 = v34;
  v16 = (*(uint64_t (**)(uint64_t *))(*v14 + 408))(v14);
  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 408))(v15);
  v32 = v17;
  v33 = v16;
  if (!v35)
    goto LABEL_46;
  if (((*(uint64_t (**)(_QWORD *, int *, int *))(*v35 + 48))(v35, &v33, &v32) & 1) != 0)
  {
    v18 = -1;
    goto LABEL_25;
  }
  v32 = v16;
  v33 = v17;
  if (!v35)
LABEL_46:
    sub_20B80BB74();
  v18 = (*(uint64_t (**)(_QWORD *, int *, int *))(*v35 + 48))(v35, &v33, &v32);
LABEL_25:
  v20 = v35;
  if (v35 == v34)
  {
    v21 = 4;
    v20 = v34;
LABEL_29:
    (*(void (**)(_QWORD *))(*v20 + 8 * v21))(v20);
  }
  else if (v35)
  {
    v21 = 5;
    goto LABEL_29;
  }
  if (v18)
    return v18 == -1;
  v23 = (*(uint64_t (**)(uint64_t *))(**a1 + 112))(*a1);
  v24 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 112))(*a2);
  v25 = *a1;
  v26 = **a1;
  if (v23 == v24)
  {
    v27 = (const __CFString *)(*(uint64_t (**)(uint64_t *))(v26 + 24))(v25);
    Length = CFStringGetLength(v27);
    v29 = (const __CFString *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 24))(*a2);
    return Length < CFStringGetLength(v29);
  }
  else
  {
    v31 = (*(uint64_t (**)(uint64_t *))(v26 + 112))(v25);
    return v31 < (*(int (**)(_QWORD))(*(_QWORD *)*a2 + 112))(*a2);
  }
}

void sub_20B8FF2DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  char *v17;
  char *v19;
  uint64_t v20;

  v19 = a13;
  if (a13 == v17)
  {
    v20 = 4;
    v19 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B8FF340(uint64_t a1)
{
  uint64_t i;
  _QWORD *v3;
  uint64_t v4;

  for (i = 0; i != -96; i -= 32)
  {
    v3 = *(_QWORD **)(a1 + i + 88);
    if ((_QWORD *)(a1 + i + 64) == v3)
    {
      v3 = (_QWORD *)(a1 + i + 64);
      v4 = 4;
    }
    else
    {
      if (!v3)
        continue;
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

BOOL sub_20B8FF3A4(_QWORD *a1, _QWORD *a2)
{
  int v4;
  int v5;
  uint64_t v8;
  int v9;
  double v10;
  double v11;
  double *v12;
  int v13;
  uint64_t v14;
  int v15;
  double v16;
  double v17;
  double *v18;

  v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 408))(*a1);
  v5 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 408))(*a2);
  if (v4 == 1 && v5 != 1)
    return 0;
  if (v4 != 1 && v5 == 1)
    return 1;
  v8 = *a1;
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 112))(v8);
  v10 = (*(double (**)(uint64_t))(*(_QWORD *)v8 + 392))(v8);
  if (v10 == -1.79769313e308)
    v11 = -100.0;
  else
    v11 = v10;
  v12 = (double *)sub_20B896F94();
  v13 = (int)(v12[1] * (double)v9 - (double)*((int *)v12 + 1) * v11);
  v14 = *a2;
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 112))(v14);
  v16 = (*(double (**)(uint64_t))(*(_QWORD *)v14 + 392))(v14);
  if (v16 == -1.79769313e308)
    v17 = -100.0;
  else
    v17 = v16;
  v18 = (double *)sub_20B896F94();
  return v13 < (int)(v18[1] * (double)v15 - (double)*((int *)v18 + 1) * v17);
}

BOOL sub_20B8FF4E0(_QWORD *a1, _QWORD *a2)
{
  unsigned int v4;
  unsigned int v5;
  int v6;

  v4 = sub_20B8FF558((_QWORD *)*a1);
  v5 = sub_20B8FF558((_QWORD *)*a2);
  if (v4 != v5)
    return v4 < v5;
  v6 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 112))(*a1);
  return v6 < (*(int (**)(_QWORD))(*(_QWORD *)*a2 + 112))(*a2);
}

BOOL sub_20B8FF558(_QWORD *a1)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  int v6;
  BOOL v7;
  uint64_t v8;

  if ((*(unsigned int (**)(_QWORD *))(*a1 + 96))(a1))
    return 0;
  v5 = (_QWORD *)a1[4];
  v4 = a1 + 4;
  v3 = v5;
  v6 = *((char *)v4 + 23);
  v7 = v6 < 0;
  if (v6 >= 0)
    v3 = v4;
  v8 = *((unsigned __int8 *)v4 + 23);
  if (v7)
    v8 = v4[1];
  return *((unsigned __int16 *)v3 + v8 - 1) - 12593 < 0x33;
}

BOOL sub_20B8FF5C0(_QWORD *a1, _QWORD *a2)
{
  int v3;

  v3 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 112))(*a1);
  return v3 < (*(int (**)(_QWORD))(*(_QWORD *)*a2 + 112))(*a2);
}

uint64_t *sub_20B8FF608(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      v6 = *v4;
      *v4 = 0;
      v7 = *a3;
      *a3 = v6;
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
      ++v4;
      ++a3;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

unint64_t *sub_20B8FF678(unint64_t *result, unint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  BOOL v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t *v79;
  BOOL v81;
  uint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t *v88;
  int64_t v89;
  int64_t v90;
  int64_t v91;
  uint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  BOOL v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t *v103;
  unint64_t *v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;

  v8 = result;
LABEL_2:
  v9 = v8;
  while (2)
  {
    v8 = v9;
    v10 = (char *)a2 - (char *)v9;
    v11 = a2 - v9;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v38 = *(a2 - 1);
        v39 = *v9;
        if (v38 > *v9)
        {
          *v9 = v38;
          *(a2 - 1) = v39;
        }
        return result;
      case 3uLL:
        v40 = v9[1];
        v41 = *(a2 - 1);
        if (v40 <= v41)
          v42 = *(a2 - 1);
        else
          v42 = v9[1];
        if (v40 >= v41)
          v40 = *(a2 - 1);
        *(a2 - 1) = v40;
        v9[1] = v42;
        v43 = *(a2 - 1);
        if (v43 <= *v9)
          v44 = *v9;
        else
          v44 = *(a2 - 1);
        if (v43 >= *v9)
          v43 = *v9;
        *(a2 - 1) = v43;
        v46 = *v9;
        v45 = v9[1];
        if (v44 <= v45)
          v46 = v9[1];
        if (v44 < v45)
          v45 = v44;
        *v9 = v46;
        v9[1] = v45;
        return result;
      case 4uLL:
        v48 = v9[1];
        v47 = v9[2];
        if (*v9 <= v47)
          v49 = v9[2];
        else
          v49 = *v9;
        if (*v9 < v47)
          v47 = *v9;
        v9[2] = v47;
        *v9 = v49;
        v50 = *(a2 - 1);
        if (v48 <= v50)
          v51 = *(a2 - 1);
        else
          v51 = v48;
        if (v48 < v50)
          v50 = v48;
        *(a2 - 1) = v50;
        v52 = *v9;
        if (*v9 <= v51)
          v53 = v51;
        else
          v53 = *v9;
        if (*v9 >= v51)
          v52 = v51;
        *v9 = v53;
        v9[1] = v52;
        v54 = v9[2];
        v55 = *(a2 - 1);
        if (v54 <= v55)
          v56 = *(a2 - 1);
        else
          v56 = v9[2];
        if (v54 >= v55)
          v54 = *(a2 - 1);
        *(a2 - 1) = v54;
        v57 = v9[1];
        if (v57 <= v56)
          v58 = v56;
        else
          v58 = v9[1];
        if (v57 >= v56)
          v57 = v56;
        v9[1] = v58;
        v9[2] = v57;
        return result;
      case 5uLL:
        v59 = *v9;
        v60 = v9[1];
        if (*v9 <= v60)
          v61 = v9[1];
        else
          v61 = *v9;
        if (*v9 >= v60)
          v59 = v9[1];
        *v9 = v61;
        v9[1] = v59;
        v62 = v9[3];
        v63 = *(a2 - 1);
        if (v62 <= v63)
          v64 = *(a2 - 1);
        else
          v64 = v9[3];
        if (v62 >= v63)
          v62 = *(a2 - 1);
        *(a2 - 1) = v62;
        v9[3] = v64;
        v65 = *(a2 - 1);
        v66 = v9[2];
        if (v65 <= v66)
          v67 = v9[2];
        else
          v67 = *(a2 - 1);
        if (v65 >= v66)
          v65 = v9[2];
        *(a2 - 1) = v65;
        v69 = v9[2];
        v68 = v9[3];
        v70 = v9[1];
        if (v67 <= v68)
          v69 = v9[3];
        if (v67 < v68)
          v68 = v67;
        v9[2] = v69;
        v9[3] = v68;
        v71 = *(a2 - 1);
        if (v70 <= v71)
          v72 = *(a2 - 1);
        else
          v72 = v70;
        if (v70 < v71)
          v71 = v70;
        *(a2 - 1) = v71;
        v73 = *v9;
        v75 = v9[2];
        v74 = v9[3];
        if (v74 <= *v9)
          v76 = *v9;
        else
          v76 = v9[3];
        if (v74 >= *v9)
          v74 = *v9;
        if (v76 <= v75)
          v73 = v9[2];
        if (v76 < v75)
          v75 = v76;
        if (v74 <= v72)
          v77 = v72;
        else
          v77 = v74;
        if (v74 >= v72)
          v74 = v72;
        if (v77 <= v75)
          v72 = v75;
        *v9 = v73;
        v9[1] = v72;
        if (v77 >= v75)
          v78 = v75;
        else
          v78 = v77;
        v9[2] = v78;
        v9[3] = v74;
        return result;
      default:
        if (v10 <= 191)
        {
          v79 = v9 + 1;
          v81 = v9 == a2 || v79 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v81)
            {
              v82 = 8;
              v83 = v9;
              do
              {
                v85 = *v83;
                v84 = v83[1];
                v83 = v79;
                if (v84 > v85)
                {
                  v86 = v82;
                  while (1)
                  {
                    *(unint64_t *)((char *)v9 + v86) = v85;
                    v87 = v86 - 8;
                    if (v86 == 8)
                      break;
                    v85 = *(unint64_t *)((char *)v9 + v86 - 16);
                    v86 -= 8;
                    if (v84 <= v85)
                    {
                      v88 = (unint64_t *)((char *)v9 + v87);
                      goto LABEL_157;
                    }
                  }
                  v88 = v9;
LABEL_157:
                  *v88 = v84;
                }
                v79 = v83 + 1;
                v82 += 8;
              }
              while (v83 + 1 != a2);
            }
          }
          else if (!v81)
          {
            do
            {
              v114 = *v8;
              v113 = v8[1];
              v8 = v79;
              if (v113 > v114)
              {
                do
                {
                  *v79 = v114;
                  v114 = *(v79 - 2);
                  --v79;
                }
                while (v113 > v114);
                *v79 = v113;
              }
              v79 = v8 + 1;
            }
            while (v8 + 1 != a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v9 != a2)
          {
            v89 = (v11 - 2) >> 1;
            v90 = v89;
            do
            {
              v91 = v90;
              if (v89 >= v90)
              {
                v92 = (2 * v90) | 1;
                v93 = &v9[v92];
                if (2 * v91 + 2 >= (uint64_t)v11)
                {
                  v94 = *v93;
                }
                else
                {
                  v94 = v93[1];
                  v95 = *v93 > v94;
                  if (*v93 < v94)
                    v94 = *v93;
                  if (v95)
                  {
                    ++v93;
                    v92 = 2 * v91 + 2;
                  }
                }
                v96 = &v9[v91];
                v97 = *v96;
                if (v94 <= *v96)
                {
                  do
                  {
                    *v96 = v94;
                    v96 = v93;
                    if (v89 < v92)
                      break;
                    v98 = (2 * v92) | 1;
                    v93 = &v9[v98];
                    v92 = 2 * v92 + 2;
                    if (v92 >= (uint64_t)v11)
                    {
                      v94 = *v93;
                      v92 = v98;
                    }
                    else
                    {
                      v94 = *v93;
                      result = v93 + 1;
                      v99 = v93[1];
                      if (*v93 >= v99)
                        v94 = v93[1];
                      if (*v93 <= v99)
                        v92 = v98;
                      else
                        ++v93;
                    }
                  }
                  while (v94 <= v97);
                  *v96 = v97;
                }
              }
              v90 = v91 - 1;
            }
            while (v91);
            v100 = (unint64_t)v10 >> 3;
            do
            {
              v101 = 0;
              v102 = *v9;
              v103 = v9;
              do
              {
                v104 = &v103[v101 + 1];
                v105 = (2 * v101) | 1;
                v101 = 2 * v101 + 2;
                if (v101 >= v100)
                {
                  v106 = *v104;
                  v101 = v105;
                }
                else
                {
                  v106 = *v104;
                  v107 = v104[1];
                  if (*v104 >= v107)
                    v106 = v104[1];
                  if (*v104 <= v107)
                    v101 = v105;
                  else
                    ++v104;
                }
                *v103 = v106;
                v103 = v104;
              }
              while (v101 <= (uint64_t)((unint64_t)(v100 - 2) >> 1));
              if (v104 == --a2)
              {
                *v104 = v102;
              }
              else
              {
                *v104 = *a2;
                *a2 = v102;
                v108 = (char *)v104 - (char *)v9 + 8;
                if (v108 >= 9)
                {
                  v109 = (((unint64_t)v108 >> 3) - 2) >> 1;
                  v110 = &v9[v109];
                  v111 = *v110;
                  v112 = *v104;
                  if (*v110 > *v104)
                  {
                    do
                    {
                      *v104 = v111;
                      v104 = v110;
                      if (!v109)
                        break;
                      v109 = (v109 - 1) >> 1;
                      v110 = &v9[v109];
                      v111 = *v110;
                    }
                    while (*v110 > v112);
                    *v104 = v112;
                  }
                }
              }
              v95 = v100-- <= 2;
            }
            while (!v95);
          }
          return result;
        }
        v12 = v11 >> 1;
        v13 = &v9[v11 >> 1];
        if ((unint64_t)v10 < 0x401)
        {
          result = sub_20B8FFD8C(&v8[v11 >> 1], v8, a2 - 1);
        }
        else
        {
          sub_20B8FFD8C(v8, &v8[v11 >> 1], a2 - 1);
          sub_20B8FFD8C(v8 + 1, v13 - 1, a2 - 2);
          sub_20B8FFD8C(v8 + 2, &v8[v12 + 1], a2 - 3);
          result = sub_20B8FFD8C(v13 - 1, v13, &v8[v12 + 1]);
          v14 = *v8;
          *v8 = *v13;
          *v13 = v14;
        }
        --a4;
        v15 = *v8;
        if ((a5 & 1) == 0 && *(v8 - 1) <= v15)
        {
          if (v15 <= *(a2 - 1))
          {
            v30 = v8 + 1;
            do
            {
              v9 = v30;
              if (v30 >= a2)
                break;
              ++v30;
            }
            while (v15 <= *v9);
          }
          else
          {
            v9 = v8;
            do
            {
              v29 = v9[1];
              ++v9;
            }
            while (v15 <= v29);
          }
          v31 = a2;
          if (v9 < a2)
          {
            v31 = a2;
            do
              v32 = *--v31;
            while (v15 > v32);
          }
          if (v9 < v31)
          {
            v33 = *v9;
            v34 = *v31;
            do
            {
              *v9 = v34;
              *v31 = v33;
              do
              {
                v35 = v9[1];
                ++v9;
                v33 = v35;
              }
              while (v15 <= v35);
              do
              {
                v36 = *--v31;
                v34 = v36;
              }
              while (v15 > v36);
            }
            while (v9 < v31);
          }
          v37 = v9 - 1;
          if (v9 - 1 != v8)
            *v8 = *v37;
          a5 = 0;
          *v37 = v15;
          continue;
        }
        v16 = 0;
        do
          v17 = v8[++v16];
        while (v17 > v15);
        v18 = &v8[v16];
        v19 = a2;
        if (v16 == 1)
        {
          v19 = a2;
          do
          {
            if (v18 >= v19)
              break;
            v21 = *--v19;
          }
          while (v21 <= v15);
        }
        else
        {
          do
            v20 = *--v19;
          while (v20 <= v15);
        }
        if (v18 >= v19)
        {
          v27 = v18 - 1;
        }
        else
        {
          v22 = *v19;
          v23 = &v8[v16];
          v24 = v19;
          do
          {
            *v23 = v22;
            *v24 = v17;
            do
            {
              v25 = v23[1];
              ++v23;
              v17 = v25;
            }
            while (v25 > v15);
            do
            {
              v26 = *--v24;
              v22 = v26;
            }
            while (v26 <= v15);
          }
          while (v23 < v24);
          v27 = v23 - 1;
        }
        if (v27 != v8)
          *v8 = *v27;
        *v27 = v15;
        if (v18 < v19)
        {
LABEL_32:
          result = (unint64_t *)sub_20B8FF678(v8, v27, a3, a4, a5 & 1);
          a5 = 0;
          v9 = v27 + 1;
          continue;
        }
        v28 = sub_20B8FFDFC(v8, v27);
        v9 = v27 + 1;
        result = (unint64_t *)sub_20B8FFDFC(v27 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v28)
            continue;
          goto LABEL_32;
        }
        a2 = v27;
        if (!v28)
          goto LABEL_2;
        return result;
    }
  }
}

unint64_t *sub_20B8FFD8C(unint64_t *result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v3 = *a2;
  v4 = *result;
  v5 = *a3;
  if (*a2 <= *result)
  {
    if (v5 > v3)
    {
      *a2 = v5;
      *a3 = v3;
      v6 = *result;
      if (*a2 > *result)
      {
        *result = *a2;
        *a2 = v6;
      }
    }
  }
  else
  {
    if (v5 <= v3)
    {
      *result = v3;
      *a2 = v4;
      if (*a3 <= v4)
        return result;
      *a2 = *a3;
    }
    else
    {
      *result = v5;
    }
    *a3 = v4;
  }
  return result;
}

BOOL sub_20B8FFDFC(unint64_t *a1, unint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;

  v2 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v2;
    case 2:
      v3 = *(a2 - 1);
      v4 = *a1;
      if (v3 > *a1)
      {
        *a1 = v3;
        *(a2 - 1) = v4;
      }
      return 1;
    case 3:
      v20 = a1[1];
      v21 = *(a2 - 1);
      if (v20 <= v21)
        v22 = *(a2 - 1);
      else
        v22 = a1[1];
      if (v20 >= v21)
        v20 = *(a2 - 1);
      *(a2 - 1) = v20;
      a1[1] = v22;
      v23 = *(a2 - 1);
      if (v23 <= *a1)
        v24 = *a1;
      else
        v24 = *(a2 - 1);
      if (v23 >= *a1)
        v23 = *a1;
      *(a2 - 1) = v23;
      v26 = *a1;
      v25 = a1[1];
      if (v24 <= v25)
        v26 = a1[1];
      if (v24 < v25)
        v25 = v24;
      *a1 = v26;
      a1[1] = v25;
      return 1;
    case 4:
      v48 = a1[1];
      v47 = a1[2];
      if (*a1 <= v47)
        v49 = a1[2];
      else
        v49 = *a1;
      if (*a1 < v47)
        v47 = *a1;
      a1[2] = v47;
      *a1 = v49;
      v50 = *(a2 - 1);
      if (v48 <= v50)
        v51 = *(a2 - 1);
      else
        v51 = v48;
      if (v48 < v50)
        v50 = v48;
      *(a2 - 1) = v50;
      v52 = *a1;
      if (*a1 <= v51)
        v53 = v51;
      else
        v53 = *a1;
      if (*a1 >= v51)
        v52 = v51;
      *a1 = v53;
      a1[1] = v52;
      v54 = a1[2];
      v55 = *(a2 - 1);
      if (v54 <= v55)
        v56 = *(a2 - 1);
      else
        v56 = a1[2];
      if (v54 >= v55)
        v54 = *(a2 - 1);
      *(a2 - 1) = v54;
      v57 = a1[1];
      if (v57 <= v56)
        v58 = v56;
      else
        v58 = a1[1];
      if (v57 >= v56)
        v57 = v56;
      a1[1] = v58;
      a1[2] = v57;
      return 1;
    case 5:
      v27 = *a1;
      v28 = a1[1];
      if (*a1 <= v28)
        v29 = a1[1];
      else
        v29 = *a1;
      if (*a1 >= v28)
        v27 = a1[1];
      *a1 = v29;
      a1[1] = v27;
      v30 = a1[3];
      v31 = *(a2 - 1);
      if (v30 <= v31)
        v32 = *(a2 - 1);
      else
        v32 = a1[3];
      if (v30 >= v31)
        v30 = *(a2 - 1);
      *(a2 - 1) = v30;
      a1[3] = v32;
      v33 = *(a2 - 1);
      v34 = a1[2];
      if (v33 <= v34)
        v35 = a1[2];
      else
        v35 = *(a2 - 1);
      if (v33 >= v34)
        v33 = a1[2];
      *(a2 - 1) = v33;
      v37 = a1[2];
      v36 = a1[3];
      v38 = a1[1];
      if (v35 <= v36)
        v37 = a1[3];
      if (v35 < v36)
        v36 = v35;
      a1[2] = v37;
      a1[3] = v36;
      v39 = *(a2 - 1);
      if (v38 <= v39)
        v40 = *(a2 - 1);
      else
        v40 = v38;
      if (v38 < v39)
        v39 = v38;
      *(a2 - 1) = v39;
      v41 = *a1;
      v43 = a1[2];
      v42 = a1[3];
      if (v42 <= *a1)
        v44 = *a1;
      else
        v44 = a1[3];
      if (v42 >= *a1)
        v42 = *a1;
      if (v44 <= v43)
        v41 = a1[2];
      if (v44 < v43)
        v43 = v44;
      if (v42 <= v40)
        v45 = v40;
      else
        v45 = v42;
      if (v42 >= v40)
        v42 = v40;
      if (v45 <= v43)
        v40 = v43;
      *a1 = v41;
      a1[1] = v40;
      if (v45 >= v43)
        v46 = v43;
      else
        v46 = v45;
      a1[2] = v46;
      a1[3] = v42;
      return 1;
    default:
      v6 = a1 + 2;
      v5 = a1[2];
      v8 = *a1;
      v7 = a1[1];
      if (v7 <= v5)
        v9 = a1[2];
      else
        v9 = a1[1];
      if (v7 < v5)
        v5 = a1[1];
      if (v5 <= v8)
        v10 = *a1;
      else
        v10 = v5;
      if (v5 >= v8)
        v5 = *a1;
      *v6 = v5;
      if (v10 <= v9)
        v11 = v9;
      else
        v11 = v8;
      if (v10 >= v9)
        v10 = v9;
      *a1 = v11;
      a1[1] = v10;
      v12 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v13 = 0;
      v14 = 24;
      break;
  }
  while (1)
  {
    v15 = *v12;
    v16 = *v6;
    if (*v12 > v16)
    {
      v17 = v14;
      while (1)
      {
        *(unint64_t *)((char *)a1 + v17) = v16;
        v18 = v17 - 8;
        if (v17 == 8)
          break;
        v16 = *(unint64_t *)((char *)a1 + v17 - 16);
        v17 -= 8;
        if (v15 <= v16)
        {
          v19 = (unint64_t *)((char *)a1 + v18);
          goto LABEL_27;
        }
      }
      v19 = a1;
LABEL_27:
      *v19 = v15;
      if (++v13 == 8)
        return v12 + 1 == a2;
    }
    v6 = v12;
    v14 += 8;
    if (++v12 == a2)
      return 1;
  }
}

uint64_t *sub_20B90008C(_QWORD *a1, _QWORD *a2)
{
  uint64_t *result;

  result = (uint64_t *)sub_20B8CD218(a1, a2);
  if (result)
  {
    sub_20B9000C0(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t sub_20B9000C0(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  void *v3;
  void *__p;

  v2 = *a2;
  sub_20B8CE114(a1, a2, (uint64_t)&__p);
  v3 = __p;
  __p = 0;
  if (v3)
    operator delete(v3);
  return v2;
}

_QWORD *sub_20B900100(float *a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  void **v13;
  _QWORD *v14;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  int8x8_t prime;
  void *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint8x8_t v27;
  unint64_t v28;
  uint8x8_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  _QWORD *v37;

  v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 144))(*a2);
  v9 = v8;
  v10 = *((_QWORD *)a1 + 1);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v10 <= v8)
        v4 = v8 % v10;
    }
    else
    {
      v4 = ((_DWORD)v10 - 1) & v8;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        do
        {
          v15 = v14[1];
          if (v15 == v9)
          {
            if (((*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v14[2] + 152))(v14[2], *a2) & 1) != 0)
              return v14;
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10)
                v15 %= v10;
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v4)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
  v14 = operator new(0x20uLL);
  *v14 = 0;
  v14[1] = v9;
  v14[2] = **a4;
  v14[3] = 0;
  v16 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v17 = a1[8];
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      prime = (int8x8_t)v20;
    else
      prime = (int8x8_t)v19;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v10 = *((_QWORD *)a1 + 1);
    if (*(_QWORD *)&prime > v10)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v10)
    {
      v28 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v10 < 3 || (v29 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        v28 = std::__next_prime(v28);
      }
      else
      {
        v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2)
          v28 = v30;
      }
      if (*(_QWORD *)&prime <= v28)
        prime = (int8x8_t)v28;
      if (*(_QWORD *)&prime >= v10)
      {
        v10 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            sub_20B800BC0();
          v22 = operator new(8 * *(_QWORD *)&prime);
          v23 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v22;
          if (v23)
            operator delete(v23);
          v24 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v24++) = 0;
          while (*(_QWORD *)&prime != v24);
          v25 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v25)
          {
            v26 = v25[1];
            v27 = (uint8x8_t)vcnt_s8(prime);
            v27.i16[0] = vaddlv_u8(v27);
            if (v27.u32[0] > 1uLL)
            {
              if (v26 >= *(_QWORD *)&prime)
                v26 %= *(_QWORD *)&prime;
            }
            else
            {
              v26 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = a1 + 4;
            v31 = (_QWORD *)*v25;
            if (*v25)
            {
              do
              {
                v32 = v31[1];
                if (v27.u32[0] > 1uLL)
                {
                  if (v32 >= *(_QWORD *)&prime)
                    v32 %= *(_QWORD *)&prime;
                }
                else
                {
                  v32 &= *(_QWORD *)&prime - 1;
                }
                if (v32 != v26)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v32))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v32) = v25;
                    goto LABEL_55;
                  }
                  *v25 = *v31;
                  *v31 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v32);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v32) = v31;
                  v31 = v25;
                }
                v32 = v26;
LABEL_55:
                v25 = v31;
                v31 = (_QWORD *)*v31;
                v26 = v32;
              }
              while (v31);
            }
          }
          v10 = (unint64_t)prime;
          goto LABEL_59;
        }
        v37 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v37)
          operator delete(v37);
        v10 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v10 <= v9)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = ((_DWORD)v10 - 1) & v9;
    }
  }
  v33 = *(_QWORD **)a1;
  v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v34)
  {
    *v14 = *v34;
LABEL_72:
    *v34 = v14;
    goto LABEL_73;
  }
  *v14 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v14;
  v33[v4] = a1 + 4;
  if (*v14)
  {
    v35 = *(_QWORD *)(*v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v35 >= v10)
        v35 %= v10;
    }
    else
    {
      v35 &= v10 - 1;
    }
    v34 = (_QWORD *)(*(_QWORD *)a1 + 8 * v35);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
  return v14;
}

void sub_20B900518(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_20B90052C(uint64_t a1)
{
  unint64_t v1;
  const std::nothrow_t *v2;
  void *result;
  BOOL v4;

  if (a1 < 1)
    return 0;
  if (a1 >= 0xFFFFFFFFFFFFFFFLL)
    v1 = 0xFFFFFFFFFFFFFFFLL;
  else
    v1 = a1;
  v2 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
  while (1)
  {
    result = operator new(8 * v1, v2);
    if (result)
      break;
    v4 = v1 > 1;
    v1 >>= 1;
    if (!v4)
      return 0;
  }
  return result;
}

uint64_t sub_20B90058C(uint64_t result, uint64_t *a2, uint64_t a3, unint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD v47[2];
  unint64_t v48;

  if (a4 < 2)
    return result;
  v8 = (uint64_t *)result;
  if (a4 == 2)
  {
    v9 = *(_QWORD *)(a3 + 24);
    if (v9)
    {
      v10 = a2 - 1;
      result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v9 + 48))(v9, a2 - 1, v8);
      if ((_DWORD)result)
      {
        v11 = *v8;
        *v8 = *v10;
        *v10 = v11;
      }
      return result;
    }
    goto LABEL_59;
  }
  if ((uint64_t)a4 <= 0)
  {
    if ((uint64_t *)result == a2)
      return result;
    v18 = (_QWORD *)(result + 8);
    if ((uint64_t *)(result + 8) == a2)
      return result;
    v19 = 0;
    v20 = (_QWORD *)result;
    while (1)
    {
      v21 = *(_QWORD *)(a3 + 24);
      if (!v21)
        break;
      v22 = v18;
      result = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *))(*(_QWORD *)v21 + 48))(v21, v18, v20);
      if ((_DWORD)result)
      {
        v23 = *v22;
        *v22 = 0;
        v47[0] = v23;
        v24 = v19;
        while (1)
        {
          v25 = (uint64_t *)((char *)v8 + v24);
          v27 = *(uint64_t *)((char *)v8 + v24);
          v26 = *(uint64_t *)((char *)v8 + v24 + 8);
          *v25 = 0;
          v25[1] = v27;
          if (v26)
            (*(void (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26);
          if (!v24)
            break;
          v28 = *(_QWORD *)(a3 + 24);
          if (!v28)
            sub_20B80BB74();
          v29 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v28 + 48))(v28, v47, (uint64_t)v8 + v24 - 8);
          v24 -= 8;
          if ((v29 & 1) == 0)
          {
            v30 = (uint64_t *)((char *)v8 + v24 + 8);
            goto LABEL_23;
          }
        }
        v30 = v8;
LABEL_23:
        v31 = v47[0];
        v47[0] = 0;
        v32 = *v30;
        *v30 = v31;
        if (v32)
          (*(void (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
        result = v47[0];
        v47[0] = 0;
        if (result)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
      }
      v18 = v22 + 1;
      v19 += 8;
      v20 = v22;
      if (v22 + 1 == a2)
        return result;
    }
LABEL_59:
    sub_20B80BB74();
  }
  v15 = a4 >> 1;
  v16 = (uint64_t *)(result + 8 * (a4 >> 1));
  if ((uint64_t)a4 <= a6)
  {
    v47[0] = a5;
    v47[1] = &v48;
    v48 = 0;
    sub_20B900980(result, (uint64_t *)(result + 8 * (a4 >> 1)), a3, a4 >> 1, a5);
    v48 = a4 >> 1;
    v33 = a4 - v15;
    v34 = &a5[v15];
    result = sub_20B900980((uint64_t)&v8[a4 >> 1], a2, a3, v33, v34);
    v48 = a4;
    v35 = &a5[a4];
    v36 = v34;
    v37 = a5;
    while (v36 != v35)
    {
      v38 = *(_QWORD *)(a3 + 24);
      if (!v38)
        sub_20B80BB74();
      if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v38 + 48))(v38, v36, v37))
      {
        v39 = *v36;
        *v36 = 0;
        result = *v8;
        *v8 = v39;
        if (result)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
        ++v36;
      }
      else
      {
        v40 = *v37;
        *v37 = 0;
        result = *v8;
        *v8 = v40;
        if (result)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
        ++v37;
      }
      ++v8;
      if (v37 == v34)
      {
        if (v36 != v35)
        {
          v41 = 0;
          do
          {
            v42 = v36[v41];
            v36[v41] = 0;
            result = v8[v41];
            v8[v41] = v42;
            if (result)
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
            ++v41;
          }
          while (&v36[v41] != v35);
        }
        goto LABEL_51;
      }
    }
    if (v37 != v34)
    {
      v43 = 0;
      do
      {
        v44 = v37[v43];
        v37[v43] = 0;
        result = v8[v43];
        v8[v43] = v44;
        if (result)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
        ++v43;
      }
      while (&v37[v43] != v34);
    }
LABEL_51:
    if (a5)
    {
      v45 = v48;
      if (v48)
      {
        v46 = 0;
        do
        {
          result = a5[v46];
          a5[v46] = 0;
          if (result)
          {
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
            v45 = v48;
          }
          ++v46;
        }
        while (v46 < v45);
      }
    }
  }
  else
  {
    sub_20B90058C(result, result + 8 * (a4 >> 1), a3, a4 >> 1, a5, a6);
    v17 = a4 - v15;
    sub_20B90058C(v16, a2, a3, v17, a5, a6);
    return sub_20B900CB0((uint64_t)v8, v16, a2, a3, v15, v17, a5, a6);
  }
  return result;
}

void sub_20B900944(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B901298((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B900980(uint64_t result, uint64_t *a2, uint64_t a3, unint64_t a4, uint64_t *a5)
{
  uint64_t *v5;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  if (a4)
  {
    v5 = a5;
    v9 = (uint64_t *)result;
    if (a4 == 2)
    {
      v11 = *(_QWORD *)(a3 + 24);
      if (!v11)
        sub_20B80BB74();
      v12 = a2 - 1;
      result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v11 + 48))(v11, a2 - 1, v9);
      if ((_DWORD)result)
        v13 = v12;
      else
        v13 = v9;
      if ((_DWORD)result)
        v14 = v9;
      else
        v14 = v12;
      v15 = *v13;
      *v13 = 0;
      *v5 = v15;
      v16 = *v14;
      *v14 = 0;
      v5[1] = v16;
    }
    else if (a4 == 1)
    {
      v10 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      *a5 = v10;
    }
    else if ((uint64_t)a4 > 8)
    {
      v32 = (uint64_t *)(result + 8 * (a4 >> 1));
      sub_20B90058C(result, v32, a3, a4 >> 1, a5, a4 >> 1);
      result = sub_20B90058C(&v9[a4 >> 1], a2, a3, a4 - (a4 >> 1), &v5[a4 >> 1], a4 - (a4 >> 1));
      v41 = 0;
      v33 = &v9[a4 >> 1];
      while (v33 != a2)
      {
        v34 = *(_QWORD *)(a3 + 24);
        if (!v34)
          sub_20B80BB74();
        result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v34 + 48))(v34, v33, v9);
        if ((_DWORD)result)
        {
          v35 = *v33;
          *v33++ = 0;
        }
        else
        {
          v35 = *v9;
          *v9++ = 0;
        }
        *v5++ = v35;
        ++v41;
        if (v9 == v32)
        {
          if (v33 != a2)
          {
            v36 = 0;
            do
            {
              v37 = v33[v36];
              v33[v36] = 0;
              v5[v36++] = v37;
            }
            while (&v33[v36] != a2);
          }
          return result;
        }
      }
      if (v9 != v32)
      {
        v38 = 0;
        do
        {
          v39 = v9[v38];
          v9[v38] = 0;
          v5[v38++] = v39;
        }
        while (&v9[v38] != v32);
      }
    }
    else if ((uint64_t *)result != a2)
    {
      v17 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      v18 = (uint64_t *)(result + 8);
      *a5 = v17;
      v40 = 1;
      if ((uint64_t *)(result + 8) != a2)
      {
        v19 = 0;
        v20 = a5;
        do
        {
          v21 = *(_QWORD *)(a3 + 24);
          if (!v21)
LABEL_49:
            sub_20B80BB74();
          v22 = v20;
          result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v21 + 48))(v21, v18, v20++);
          if ((_DWORD)result)
          {
            v23 = *v22;
            *v22 = 0;
            v22[1] = v23;
            ++v40;
            v24 = v5;
            if (v22 != v5)
            {
              v25 = v19;
              while (1)
              {
                v26 = *(_QWORD *)(a3 + 24);
                if (!v26)
                  goto LABEL_49;
                v27 = (uint64_t *)((char *)v5 + v25 - 8);
                if (!(*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v26 + 48))(v26, v18, v27))break;
                v28 = *v27;
                *v27 = 0;
                v29 = *(uint64_t *)((char *)v5 + v25);
                *(uint64_t *)((char *)v5 + v25) = v28;
                if (v29)
                  (*(void (**)(uint64_t))(*(_QWORD *)v29 + 16))(v29);
                v25 -= 8;
                if (!v25)
                {
                  v24 = v5;
                  goto LABEL_30;
                }
              }
              v24 = (uint64_t *)((char *)v5 + v25);
            }
LABEL_30:
            v31 = *v18;
            *v18 = 0;
            result = *v24;
            *v24 = v31;
            if (result)
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
          }
          else
          {
            v30 = *v18;
            *v18 = 0;
            *v20 = v30;
            ++v40;
          }
          ++v18;
          v19 += 8;
        }
        while (v18 != a2);
      }
    }
  }
  return result;
}

void sub_20B900C88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B901298((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B900CB0(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8)
{
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  int v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v61;
  unint64_t v62;
  _BYTE v63[24];
  _BYTE *v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  v61 = a6;
  if (!a6)
    return result;
  v11 = (uint64_t *)result;
  while (a5 > a8 && v61 > a8)
  {
    if (!a5)
      return result;
    v12 = 0;
    v13 = -a5;
    while (1)
    {
      v14 = *(_QWORD *)(a4 + 24);
      if (!v14)
        sub_20B80BB74();
      result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v14 + 48))(v14, a2, &v11[v12 / 8]);
      if ((result & 1) != 0)
        break;
      v12 += 8;
      if (__CFADD__(v13++, 1))
        return result;
    }
    v16 = v61;
    if (-v13 < v61)
    {
      if (v61 >= 0)
        v17 = v61;
      else
        v17 = v61 + 1;
      v57 = v17 >> 1;
      v18 = &a2[v17 >> 1];
      v19 = a2;
      if ((char *)a2 - (char *)v11 != v12)
      {
        v20 = (uint64_t)((char *)a2 - (char *)v11 - v12) >> 3;
        v19 = &v11[v12 / 8];
        do
        {
          v21 = *(_QWORD *)(a4 + 24);
          if (!v21)
            sub_20B80BB74();
          if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v21 + 48))(v21, v18, &v19[v20 >> 1]))
          {
            v20 >>= 1;
          }
          else
          {
            v19 += (v20 >> 1) + 1;
            v20 += ~(v20 >> 1);
          }
        }
        while (v20);
        v16 = v61;
      }
      v56 = (uint64_t)((char *)v19 - (char *)v11 - v12) >> 3;
      goto LABEL_44;
    }
    if (v13 == -1)
    {
      v51 = v11[v12 / 8];
      v11[v12 / 8] = *a2;
      *a2 = v51;
      return result;
    }
    if (v13 <= 0)
      v22 = -v13;
    else
      v22 = 1 - v13;
    sub_20B86D7F0((uint64_t)v63, a4);
    v56 = v22 >> 1;
    v19 = &v11[(v22 >> 1) + v12 / 8];
    v18 = a2;
    if (a2 != a3)
    {
      v23 = a3 - a2;
      v18 = a2;
      do
      {
        if (!v64)
          sub_20B80BB74();
        v24 = &v18[v23 >> 1];
        v25 = (*(uint64_t (**)(_BYTE *, uint64_t *, uint64_t *))(*(_QWORD *)v64 + 48))(v64, v24, v19);
        if (v25)
          v23 += ~(v23 >> 1);
        else
          v23 >>= 1;
        if (v25)
          v18 = v24 + 1;
      }
      while (v23);
    }
    v26 = v64;
    v16 = v61;
    if (v64 == v63)
    {
      v26 = v63;
      v27 = 4;
      goto LABEL_42;
    }
    if (v64)
    {
      v27 = 5;
LABEL_42:
      (*(void (**)(void))(*v26 + 8 * v27))();
    }
    v57 = v18 - a2;
LABEL_44:
    if (v19 == a2)
    {
      v28 = v18;
    }
    else if (v18 == a2)
    {
      v28 = v19;
    }
    else
    {
      v28 = sub_20B901360(v19, a2, v18);
    }
    a5 = -v56 - v13;
    v29 = v16;
    v30 = v16 - v57;
    if (v56 + v57 >= v29 - (v56 + v57) - v13)
    {
      result = sub_20B900CB0(v28, v18, a3, a4, -v56 - v13, v30, a7, a8);
      a2 = v19;
      a5 = v56;
      v30 = v57;
      a3 = v28;
      v11 = (uint64_t *)((char *)v11 + v12);
    }
    else
    {
      result = sub_20B900CB0(&v11[v12 / 8], v19, v28, a4, v56, v57, a7, a8);
      v11 = v28;
      a2 = v18;
    }
    v61 = v30;
    if (!v30)
      return result;
  }
  v62 = 0;
  if (a5 <= v61)
  {
    v42 = a7;
    if (v11 != a2)
    {
      v43 = 0;
      v44 = 0;
      do
      {
        v45 = v11[v43];
        v11[v43] = 0;
        a7[v43] = v45;
        ++v44;
        ++v43;
      }
      while (&v11[v43] != a2);
      v62 = v44;
      if (v43 * 8)
      {
        v46 = &a7[v43];
        v47 = v11;
        while (a2 != a3)
        {
          v48 = *(_QWORD *)(a4 + 24);
          if (!v48)
            sub_20B80BB74();
          if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v48 + 48))(v48, a2, v42))
          {
            v49 = *a2;
            *a2 = 0;
            result = *v11;
            *v11 = v49;
            if (result)
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
            ++a2;
          }
          else
          {
            v50 = *v42;
            *v42 = 0;
            result = *v11;
            *v11 = v50;
            if (result)
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
            ++v42;
          }
          ++v11;
          ++v47;
          if (v46 == v42)
            goto LABEL_93;
        }
        result = sub_20B9012FC((uint64_t)v42, v46, v47);
      }
    }
LABEL_93:
    v33 = a7;
    goto LABEL_94;
  }
  if (a3 == a2)
  {
    v33 = a7;
    goto LABEL_94;
  }
  v31 = 0;
  v32 = 0;
  v33 = a7;
  do
  {
    v34 = a2[v31];
    a2[v31] = 0;
    a7[v31] = v34;
    ++v32;
    ++v31;
  }
  while (&a2[v31] != a3);
  v62 = v32;
  if (!(v31 * 8))
    goto LABEL_94;
  v35 = &a7[v31];
  v36 = a3 - 1;
  while (2)
  {
    if (a2 != v11)
    {
      v37 = *(_QWORD *)(a4 + 24);
      if (!v37)
        sub_20B80BB74();
      v38 = a2 - 1;
      v39 = v35 - 1;
      if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v37 + 48))(v37, v35 - 1, a2 - 1))
      {
        v40 = *v38;
        *v38 = 0;
        result = *v36;
        *v36 = v40;
        if (!result)
        {
LABEL_67:
          --v36;
          a2 = v38;
          if (v35 == a7)
            goto LABEL_94;
          continue;
        }
      }
      else
      {
        v41 = *v39;
        *v39 = 0;
        result = *v36;
        *v36 = v41;
        v38 = a2;
        --v35;
        if (!result)
          goto LABEL_67;
      }
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
      goto LABEL_67;
    }
    break;
  }
  v52 = 0;
  do
  {
    v53 = v35[v52 - 1];
    v35[v52 - 1] = 0;
    result = v36[v52];
    v36[v52] = v53;
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
    --v52;
  }
  while (&v35[v52] != a7);
LABEL_94:
  if (v33)
  {
    v54 = v62;
    if (v62)
    {
      v55 = 0;
      do
      {
        result = v33[v55];
        v33[v55] = 0;
        if (result)
        {
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
          v54 = v62;
        }
        ++v55;
      }
      while (v55 < v54);
    }
  }
  return result;
}

void sub_20B901234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20B901298(va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B901298(_QWORD *result)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    v2 = (unint64_t *)result[1];
    v3 = *v2;
    if (*v2)
    {
      v4 = 0;
      do
      {
        result = *(_QWORD **)(v1 + 8 * v4);
        *(_QWORD *)(v1 + 8 * v4) = 0;
        if (result)
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 16))(result);
          v3 = *v2;
        }
        ++v4;
      }
      while (v4 < v3);
    }
  }
  return result;
}

uint64_t sub_20B9012FC(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t v6;

  if ((uint64_t *)result != a2)
  {
    v5 = (uint64_t *)result;
    do
    {
      v6 = *v5;
      *v5 = 0;
      result = *a3;
      *a3 = v6;
      if (result)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
      ++v5;
      ++a3;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t *sub_20B901360(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t *result;
  uint64_t *i;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;

  v3 = *a1;
  *a1 = *a2;
  result = a1 + 1;
  for (i = a2; ; *result++ = *i)
  {
    *i++ = v3;
    if (i == a3)
      break;
    if (result == a2)
      a2 = i;
    v3 = *result;
  }
  if (result != a2)
  {
    v6 = result;
    v7 = a2;
    while (1)
    {
      v8 = v6;
      while (1)
      {
        v9 = *v6;
        *v8++ = *v7;
        *v7++ = v9;
        if (v7 != a3)
          break;
        v6 = v8;
        v7 = a2;
        if (v8 == a2)
          return result;
      }
      if (v8 == a2)
        a2 = v7;
      ++v6;
    }
  }
  return result;
}

uint64_t sub_20B9013E8(uint64_t result, uint64_t *a2, unint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  uint64_t *v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t j;
  unint64_t v37;

  if (a3 >= 2)
  {
    v6 = (uint64_t *)result;
    if (a3 == 2)
    {
      v7 = *(a2 - 1);
      v8 = *(_QWORD *)result;
      if (*(_QWORD *)(v7 + 8) < *(_QWORD *)(*(_QWORD *)result + 8))
      {
        *(_QWORD *)result = v7;
        *(a2 - 1) = v8;
      }
    }
    else if ((uint64_t)a3 <= 0)
    {
      if ((uint64_t *)result != a2)
      {
        v15 = (uint64_t *)(result + 8);
        if ((uint64_t *)(result + 8) != a2)
        {
          v16 = 0;
          v17 = (uint64_t *)result;
          do
          {
            v18 = *v17;
            v17 = v15;
            v19 = *v15;
            if (*(_QWORD *)(*v15 + 8) < *(_QWORD *)(v18 + 8))
            {
              v20 = 0;
              *v15 = 0;
              for (i = v16; ; i -= 8)
              {
                v22 = (uint64_t *)((char *)v6 + i);
                *v22 = 0;
                v22[1] = v18;
                if (v20)
                  (*(void (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
                if (!i)
                  break;
                v23 = (uint64_t *)((char *)v6 + i);
                v18 = *(uint64_t *)((char *)v6 + i - 8);
                if (*(_QWORD *)(v19 + 8) >= *(_QWORD *)(v18 + 8))
                  goto LABEL_19;
                v20 = *v22;
              }
              v23 = v6;
LABEL_19:
              result = *v23;
              *v23 = v19;
              if (result)
                result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
            }
            v15 = v17 + 1;
            v16 += 8;
          }
          while (v17 + 1 != a2);
        }
      }
    }
    else
    {
      v11 = (uint64_t)a4;
      v12 = a3 >> 1;
      v13 = (uint64_t *)(result + 8 * (a3 >> 1));
      if ((uint64_t)a3 <= a5)
      {
        sub_20B901724(result, result + 8 * (a3 >> 1), a3 >> 1, a4);
        v24 = a3 - v12;
        v25 = (uint64_t *)(v11 + 8 * v12);
        result = sub_20B901724((uint64_t)&v6[a3 >> 1], (uint64_t)a2, v24, v25);
        v37 = a3;
        v26 = v11 + 8 * a3;
        v27 = v25;
        while (v27 != (uint64_t *)v26)
        {
          v28 = *v27;
          v29 = *(_QWORD *)v11;
          if (*(_QWORD *)(*v27 + 8) >= *(_QWORD *)(*(_QWORD *)v11 + 8))
          {
            *(_QWORD *)v11 = 0;
            result = *v6;
            *v6 = v29;
            if (result)
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
            v11 += 8;
          }
          else
          {
            *v27 = 0;
            result = *v6;
            *v6 = v28;
            if (result)
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
            ++v27;
          }
          ++v6;
          if ((uint64_t *)v11 == v25)
          {
            if (v27 != (uint64_t *)v26)
            {
              v30 = 0;
              do
              {
                v31 = v27[v30];
                v27[v30] = 0;
                result = v6[v30];
                v6[v30] = v31;
                if (result)
                  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
                ++v30;
              }
              while (&v27[v30] != (uint64_t *)v26);
            }
            goto LABEL_44;
          }
        }
        if ((uint64_t *)v11 != v25)
        {
          v32 = 0;
          do
          {
            v33 = *(_QWORD *)(v11 + v32 * 8);
            *(_QWORD *)(v11 + v32 * 8) = 0;
            result = v6[v32];
            v6[v32] = v33;
            if (result)
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
            ++v32;
          }
          while ((uint64_t *)(v11 + v32 * 8) != v25);
        }
LABEL_44:
        if (a4)
        {
          v34 = v37;
          for (j = 0; j < v34; ++j)
          {
            result = a4[j];
            a4[j] = 0;
            if (result)
            {
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
              v34 = v37;
            }
          }
        }
      }
      else
      {
        sub_20B9013E8(result, result + 8 * (a3 >> 1), a3 >> 1, a4, a5);
        v14 = a3 - v12;
        sub_20B9013E8(v13, a2, v14, v11, a5);
        return sub_20B901950((uint64_t)v6, v13, a2, v12, v14, v11, a5);
      }
    }
  }
  return result;
}

void sub_20B901710(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B901298((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B901724(uint64_t result, uint64_t a2, unint64_t a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;

  if (a3)
  {
    v4 = a4;
    v6 = result;
    if (a3 == 1)
    {
LABEL_11:
      v13 = *(_QWORD *)v6;
      *(_QWORD *)v6 = 0;
      *v4 = v13;
      return result;
    }
    if (a3 == 2)
    {
      v8 = *(_QWORD *)(a2 - 8);
      v9 = *(_QWORD *)(v8 + 8);
      v10 = *(_QWORD *)(*(_QWORD *)result + 8);
      v11 = v9 < v10;
      if (v9 >= v10)
        v12 = (_QWORD *)result;
      else
        v12 = (_QWORD *)(a2 - 8);
      if (!v11)
        v8 = *(_QWORD *)result;
      *v12 = 0;
      *a4 = v8;
      v4 = a4 + 1;
      if (!v11)
        v6 = a2 - 8;
      goto LABEL_11;
    }
    if ((uint64_t)a3 > 8)
    {
      v27 = result + 8 * (a3 >> 1);
      sub_20B9013E8(result, v27, a3 >> 1, a4, a3 >> 1);
      result = sub_20B9013E8(v6 + 8 * (a3 >> 1), a2, a3 - (a3 >> 1), &v4[a3 >> 1], a3 - (a3 >> 1));
      v28 = v6 + 8 * (a3 >> 1);
      while (v28 != a2)
      {
        v29 = *(_QWORD *)v28;
        v30 = *(_QWORD *)v6;
        if (*(_QWORD *)(*(_QWORD *)v28 + 8) >= *(_QWORD *)(*(_QWORD *)v6 + 8))
        {
          *(_QWORD *)v6 = 0;
          v6 += 8;
          v29 = v30;
        }
        else
        {
          *(_QWORD *)v28 = 0;
          v28 += 8;
        }
        *v4++ = v29;
        if (v6 == v27)
        {
          if (v28 != a2)
          {
            v31 = 0;
            do
            {
              v32 = *(_QWORD *)(v28 + v31);
              *(_QWORD *)(v28 + v31) = 0;
              v4[v31 / 8] = v32;
              v31 += 8;
            }
            while (v28 + v31 != a2);
          }
          return result;
        }
      }
      if (v6 != v27)
      {
        v33 = 0;
        do
        {
          v34 = *(_QWORD *)(v6 + v33);
          *(_QWORD *)(v6 + v33) = 0;
          v4[v33 / 8] = v34;
          v33 += 8;
        }
        while (v6 + v33 != v27);
      }
    }
    else if (result != a2)
    {
      v14 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      v15 = result + 8;
      *a4 = v14;
      if (result + 8 != a2)
      {
        v16 = 0;
        v17 = a4;
        do
        {
          v18 = v17;
          v20 = *v17++;
          v19 = v20;
          v21 = *(_QWORD *)v15;
          if (*(_QWORD *)(*(_QWORD *)v15 + 8) >= *(_QWORD *)(v20 + 8))
          {
            *(_QWORD *)v15 = 0;
            *v17 = v21;
          }
          else
          {
            *v18 = 0;
            v18[1] = v19;
            v22 = v4;
            if (v18 != v4)
            {
              v23 = v16;
              while (1)
              {
                v22 = (uint64_t *)((char *)v4 + v23);
                v24 = *(uint64_t *)((char *)v4 + v23 - 8);
                if (*(_QWORD *)(*(_QWORD *)v15 + 8) >= *(_QWORD *)(v24 + 8))
                  break;
                v25 = *v22;
                *(v22 - 1) = 0;
                *v22 = v24;
                if (v25)
                  (*(void (**)(uint64_t))(*(_QWORD *)v25 + 16))(v25);
                v23 -= 8;
                if (!v23)
                {
                  v22 = v4;
                  break;
                }
              }
            }
            v26 = *(_QWORD *)v15;
            *(_QWORD *)v15 = 0;
            result = *v22;
            *v22 = v26;
            if (result)
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
          }
          v15 += 8;
          v16 += 8;
        }
        while (v15 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_20B901950(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;

  if (a5)
  {
    v8 = a5;
    v12 = (uint64_t *)result;
    while (a4 > a7 && v8 > a7)
    {
      if (!a4)
        return result;
      v13 = 0;
      v14 = -a4;
      while (1)
      {
        v15 = v12[v13 / 8];
        if (*(_QWORD *)(*a2 + 8) < *(_QWORD *)(v15 + 8))
          break;
        v13 += 8;
        if (__CFADD__(v14++, 1))
          return result;
      }
      v17 = &v12[v13 / 8];
      v66 = a6;
      if (-v14 >= v8)
      {
        if (v14 == -1)
        {
          v12[v13 / 8] = *a2;
          *a2 = v15;
          return result;
        }
        if (v14 <= 0)
          v28 = -v14;
        else
          v28 = 1 - v14;
        v27 = v28 >> 1;
        v21 = &v12[(v28 >> 1) + v13 / 8];
        v20 = a2;
        if (a2 != a3)
        {
          v29 = a3 - a2;
          v20 = a2;
          do
          {
            v30 = v29 >> 1;
            v31 = &v20[v29 >> 1];
            v33 = *v31;
            v32 = v31 + 1;
            v29 += ~(v29 >> 1);
            if (*(_QWORD *)(v33 + 8) < *(_QWORD *)(*v21 + 8))
              v20 = v32;
            else
              v29 = v30;
          }
          while (v29);
        }
        v19 = v20 - a2;
      }
      else
      {
        if (v8 >= 0)
          v18 = v8;
        else
          v18 = v8 + 1;
        v19 = v18 >> 1;
        v20 = &a2[v18 >> 1];
        v21 = a2;
        if ((char *)a2 - (char *)v12 != v13)
        {
          v22 = (uint64_t)((char *)a2 - (char *)v12 - v13) >> 3;
          v21 = &v12[v13 / 8];
          do
          {
            v23 = v22 >> 1;
            v24 = &v21[v22 >> 1];
            v26 = *v24;
            v25 = v24 + 1;
            v22 += ~(v22 >> 1);
            if (*(_QWORD *)(*v20 + 8) < *(_QWORD *)(v26 + 8))
              v22 = v23;
            else
              v21 = v25;
          }
          while (v22);
        }
        v27 = (uint64_t)((char *)v21 - (char *)v12 - v13) >> 3;
      }
      v65 = a3;
      if (v21 == a2)
      {
        a3 = v20;
      }
      else if (v20 == a2)
      {
        a3 = v21;
      }
      else
      {
        v34 = a7;
        v35 = v27;
        v36 = v19;
        v37 = sub_20B901360(v21, a2, v20);
        v19 = v36;
        v27 = v35;
        v17 = &v12[v13 / 8];
        a7 = v34;
        a3 = v37;
      }
      a4 = -(v27 + v14);
      v38 = v8 - v19;
      if (v27 + v19 >= v8 - (v27 + v19) - v14)
      {
        v41 = v20;
        v42 = v27;
        v43 = -(v27 + v14);
        v44 = v19;
        v40 = a7;
        v12 = v17;
        result = sub_20B901950(a3, v41, v65, v43, v38, v66);
        a2 = v21;
        a6 = v66;
        v38 = v44;
        a4 = v42;
      }
      else
      {
        v39 = v21;
        a6 = v66;
        v40 = a7;
        result = sub_20B901950(&v12[v13 / 8], v39, a3, v27, v19, v66);
        v12 = a3;
        a2 = v20;
        a3 = v65;
      }
      v8 = v38;
      a7 = v40;
      if (!v38)
        return result;
    }
    v67 = a6;
    v68 = 0;
    if (a4 > v8)
    {
      if (a3 == a2)
        goto LABEL_79;
      v45 = 0;
      v46 = 0;
      do
      {
        v47 = a2[v45];
        a2[v45] = 0;
        *(_QWORD *)(a6 + v45 * 8) = v47;
        ++v46;
        ++v45;
      }
      while (&a2[v45] != a3);
      v68 = v46;
      if (!(v45 * 8))
        goto LABEL_79;
      v48 = a3;
      v49 = a6 + v45 * 8;
      v50 = v48 - 1;
      while (1)
      {
        if (a2 == v12)
        {
          v61 = 0;
          do
          {
            v62 = *(_QWORD *)(v49 + v61 * 8 - 8);
            *(_QWORD *)(v49 + v61 * 8 - 8) = 0;
            result = v50[v61];
            v50[v61] = v62;
            if (result)
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
            --v61;
          }
          while (v49 + v61 * 8 != a6);
          goto LABEL_79;
        }
        v52 = a2 - 1;
        v51 = *(a2 - 1);
        v53 = *(_QWORD *)(v49 - 8);
        if (*(_QWORD *)(v53 + 8) < *(_QWORD *)(v51 + 8))
          break;
        *(_QWORD *)(v49 - 8) = 0;
        result = *v50;
        *v50 = v53;
        v52 = a2;
        v49 -= 8;
        if (result)
          goto LABEL_54;
LABEL_55:
        --v50;
        a2 = v52;
        if (v49 == a6)
          goto LABEL_79;
      }
      *v52 = 0;
      result = *v50;
      *v50 = v51;
      if (!result)
        goto LABEL_55;
LABEL_54:
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
      goto LABEL_55;
    }
    if (v12 == a2)
      goto LABEL_79;
    v54 = 0;
    v55 = 0;
    do
    {
      v56 = v12[v54];
      v12[v54] = 0;
      *(_QWORD *)(a6 + v54 * 8) = v56;
      ++v55;
      ++v54;
    }
    while (&v12[v54] != a2);
    v68 = v55;
    if (!(v54 * 8))
      goto LABEL_79;
    v57 = (uint64_t *)(a6 + v54 * 8);
    v58 = v12;
    do
    {
      if (a2 == a3)
      {
        result = sub_20B9012FC(a6, v57, v58);
        break;
      }
      v59 = *a2;
      v60 = *(_QWORD *)a6;
      if (*(_QWORD *)(*a2 + 8) >= *(_QWORD *)(*(_QWORD *)a6 + 8))
      {
        *(_QWORD *)a6 = 0;
        result = *v12;
        *v12 = v60;
        if (result)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
        a6 += 8;
      }
      else
      {
        *a2 = 0;
        result = *v12;
        *v12 = v59;
        if (result)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
        ++a2;
      }
      ++v12;
      ++v58;
    }
    while (v57 != (uint64_t *)a6);
LABEL_79:
    if (v67)
    {
      v63 = v68;
      if (v68)
      {
        v64 = 0;
        do
        {
          result = *(_QWORD *)(v67 + 8 * v64);
          *(_QWORD *)(v67 + 8 * v64) = 0;
          if (result)
          {
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
            v63 = v68;
          }
          ++v64;
        }
        while (v64 < v63);
      }
    }
  }
  return result;
}

void sub_20B901DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B901298((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B901E04()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B901E18()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C469A58;
  return result;
}

void sub_20B901E3C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C469A58;
}

BOOL sub_20B901E54(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  return *a2 != 83 && *a3 == 83;
}

uint64_t sub_20B901E70(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45ECB0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B901EAC()
{
  return &unk_24C45ECB0;
}

void sub_20B901EBC()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B901ED0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C469AB0;
  return result;
}

void sub_20B901EF4(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C469AB0;
}

BOOL sub_20B901F0C(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  v3 = *a2 - 74;
  v4 = v3 > 6;
  v5 = (1 << v3) & 0x45;
  if (v4 || v5 == 0)
    return 0;
  return *a3 == 88 || *a3 == 67;
}

uint64_t sub_20B901F50(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45ECC0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B901F8C()
{
  return &unk_24C45ECC0;
}

void sub_20B901F9C()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B901FB0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C469B08;
  return result;
}

void sub_20B901FD4(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C469B08;
}

BOOL sub_20B901FEC(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  v3 = *a2 - 66;
  v4 = v3 > 0x16;
  v5 = (1 << v3) & 0x404801;
  return !v4 && v5 != 0 && *a3 == 67;
}

uint64_t sub_20B90202C(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45ECD0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B902068()
{
  return &unk_24C45ECD0;
}

void sub_20B902078()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B90208C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C469A00;
  return result;
}

void sub_20B9020B0(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C469A00;
}

BOOL sub_20B9020C8(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  return *a2 != 1 && *a3 == 1;
}

uint64_t sub_20B9020E0(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45ECA0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B90211C()
{
  return &unk_24C45ECA0;
}

uint64_t *sub_20B902128(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;

  a1[1] = 0;
  *a1 = 0;
  if ((a2 & 1) == 0)
  {
    v3 = operator new();
    *(_DWORD *)v3 = 0;
    *(_QWORD *)(v3 + 8) = 0;
    *(_BYTE *)(v3 + 16) = 0;
    v4 = *a1;
    *a1 = v3;
    if (v4)
      MEMORY[0x20BD39CB0](v4, 0x1010C40E4C6A875);
  }
  return a1;
}

void sub_20B9021A8(_Unwind_Exception *a1)
{
  uint64_t *v1;
  void ***v2;
  uint64_t v4;

  sub_20B8F8A7C(v2, 0);
  v4 = *v1;
  *v1 = 0;
  if (v4)
    MEMORY[0x20BD39CB0](v4, 0x1010C40E4C6A875);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B9021E0(uint64_t *a1, int a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = 0;
  a1[1] = 0;
  v4 = operator new();
  *(_DWORD *)v4 = a2;
  *(_QWORD *)(v4 + 8) = 0;
  *(_BYTE *)(v4 + 16) = 0;
  v5 = *a1;
  *a1 = v4;
  if (v5)
    MEMORY[0x20BD39CB0](v5, 0x1010C40E4C6A875);
  return a1;
}

void sub_20B902250(_Unwind_Exception *a1)
{
  void ***v1;
  void **v3;

  sub_20B8F8A7C(v1 + 1, 0);
  v3 = *v1;
  *v1 = 0;
  if (v3)
    MEMORY[0x20BD39CB0](v3, 0x1010C40E4C6A875);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B902288(uint64_t *a1, int a2, uint64_t a3, char a4)
{
  uint64_t v8;
  uint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  v8 = operator new();
  *(_DWORD *)v8 = a2;
  *(_QWORD *)(v8 + 8) = a3;
  *(_BYTE *)(v8 + 16) = a4;
  v9 = *a1;
  *a1 = v8;
  if (v9)
    MEMORY[0x20BD39CB0](v9, 0x1010C40E4C6A875);
  return a1;
}

void sub_20B902308(_Unwind_Exception *a1)
{
  void ***v1;
  void **v3;

  sub_20B8F8A7C(v1 + 1, 0);
  v3 = *v1;
  *v1 = 0;
  if (v3)
    MEMORY[0x20BD39CB0](v3, 0x1010C40E4C6A875);
  _Unwind_Resume(a1);
}

void **sub_20B902340(void ***a1, void ***a2)
{
  void ***v4;
  void **result;
  void **v6;
  void **v7;

  v4 = a1 + 1;
  sub_20B8F8A7C(a1 + 1, 0);
  result = *a1;
  *a1 = 0;
  if (result)
    result = (void **)MEMORY[0x20BD39CB0](result, 0x1010C40E4C6A875);
  v6 = *a2;
  if (*a2)
  {
    *a2 = 0;
    result = *a1;
    *a1 = v6;
    if (result)
      JUMPOUT(0x20BD39CB0);
  }
  else
  {
    v7 = a2[1];
    if (v7)
    {
      a2[1] = 0;
      return sub_20B8F8A7C(v4, v7);
    }
  }
  return result;
}

void **sub_20B9023F0(void ***a1, uint64_t a2)
{
  void ***v4;
  void **v5;
  uint64_t v6;
  _DWORD *v7;
  void **result;
  void **v9;
  void **v10;
  void **v11;

  v4 = a1 + 1;
  sub_20B8F8A7C(a1 + 1, 0);
  v5 = *a1;
  *a1 = 0;
  if (v5)
    MEMORY[0x20BD39CB0](v5, 0x1010C40E4C6A875);
  if (*(_QWORD *)a2)
  {
    v6 = operator new();
    v7 = *(_DWORD **)a2;
    *(_DWORD *)v6 = **(_DWORD **)a2;
    *(_QWORD *)(v6 + 8) = *((_QWORD *)v7 + 1);
    *(_BYTE *)(v6 + 16) = *((_BYTE *)v7 + 16);
    result = *a1;
    *a1 = (void **)v6;
    if (result)
      JUMPOUT(0x20BD39CB0);
  }
  else
  {
    result = *(void ***)(a2 + 8);
    if (result)
    {
      sub_20B902504((_QWORD **)result, &v11);
      v9 = v11;
      v11 = 0;
      sub_20B8F8A7C(v4, v9);
      result = v11;
      v11 = 0;
      if (result)
      {
        v10 = sub_20B8F8AB8(result);
        return (void **)MEMORY[0x20BD39CB0](v10, 0x20C4093837F09);
      }
    }
  }
  return result;
}

_QWORD *sub_20B902504@<X0>(_QWORD **a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = (_QWORD *)operator new();
  result = sub_20B86B430(*a1);
  *v4 = result;
  *a2 = v4;
  return result;
}

void sub_20B902558(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

uint64_t sub_20B90257C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v2 = (_QWORD *)operator new();
  *v2 = &off_24C45F8A8;
  *(_QWORD *)a1 = v2;
  v3 = (_QWORD *)operator new();
  *v3 = &off_24C45FE90;
  *(_QWORD *)(a1 + 24) = v3;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24C4601A8;
  *(_QWORD *)(a1 + 16) = v4;
  v5 = (_QWORD *)operator new();
  *v5 = &off_24C45FED8;
  *(_QWORD *)(a1 + 8) = v5;
  return a1;
}

uint64_t sub_20B902644()
{
  unsigned __int8 v0;
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_25472CD50);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25472CD50))
  {
    v2 = operator new();
    sub_20B90257C(v2);
    qword_25472CD48 = v2;
    __cxa_guard_release(&qword_25472CD50);
  }
  return qword_25472CD48;
}

void sub_20B9026B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x20C40DC1BFBCFLL);
  __cxa_guard_abort(&qword_25472CD50);
  _Unwind_Resume(a1);
}

unint64_t sub_20B9026F0(uint64_t a1, uint64_t a2, int **a3)
{
  return (**a3 & 0xFFFFFFFFFFFFFFFCLL) + *(_QWORD *)(a2 + 8);
}

uint64_t sub_20B902708(uint64_t a1, uint64_t a2, int **a3, unsigned int a4)
{
  uint64_t v5;

  v5 = *(_QWORD *)(sub_20B902644()
                 + 8 * (*(_DWORD *)(*(_QWORD *)(a2 + 8) + (**a3 & 0xFFFFFFFFFFFFFFFCLL) + 4 * a4 + 4) & 3));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 32))(v5, a2);
}

void sub_20B902770(uint64_t a1, uint64_t a2, int **a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;
  void **v23;
  _DWORD *v24;
  _QWORD v25[6];
  _DWORD *v26;
  void **v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  _BYTE v31[8];

  v12 = *(_QWORD *)(a2 + 8);
  v13 = **a3 & 0xFFFFFFFFFFFFFFFCLL;
  v28 = 0;
  v29 = &v28;
  v30 = 0x2000000000;
  v31[0] = 0;
  v14 = *(unsigned int *)(v12 + v13);
  if ((_DWORD)v14)
  {
    (*(void (**)(uint64_t, uint64_t, unint64_t, _BYTE *))(a7 + 16))(a7, v14, a4, v31);
    v15 = *((_BYTE *)v29 + 24) != 0;
  }
  else
  {
    v15 = 0;
  }
  if (a5 - 1 >= a4 && !v15)
  {
    v16 = sub_20B902644();
    if (!*((_BYTE *)v29 + 24))
    {
      v17 = v16;
      v18 = 0;
      v19 = v13 + v12 + 4;
      do
      {
        v20 = *(_QWORD *)(v17 + 8 * (*(_DWORD *)(v19 + 4 * v18) & 3));
        (*(void (**)(_DWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v20 + 32))(&v26, v20, a2);
        if (a6)
          *(_BYTE *)(a6 + a4) = v18;
        v25[0] = MEMORY[0x24BDAC760];
        v25[1] = 0x40000000;
        v25[2] = sub_20B902984;
        v25[3] = &unk_24C46C238;
        v25[4] = a7;
        v25[5] = &v28;
        v21 = *(_QWORD *)(v17 + 8 * (*v26 & 3));
        (*(void (**)(uint64_t, uint64_t, _DWORD **, unint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v21 + 24))(v21, a2, &v26, a4 + 1, a5, a6, v25);
        v22 = v27;
        v27 = 0;
        if (v22)
        {
          v23 = sub_20B8F8AB8(v22);
          MEMORY[0x20BD39CB0](v23, 0x20C4093837F09);
        }
        v24 = v26;
        v26 = 0;
        if (v24)
          MEMORY[0x20BD39CB0](v24, 0x1010C40E4C6A875);
        if (v18 > 0xFE)
          break;
        ++v18;
      }
      while (!*((_BYTE *)v29 + 24));
    }
  }
  _Block_object_dispose(&v28, 8);
}

void sub_20B902954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_20B902984(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  *a4 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  return result;
}

uint64_t sub_20B9029CC(uint64_t a1, uint64_t a2, int **a3)
{
  return *(unsigned int *)(*(_QWORD *)(a2 + 8) + (**a3 & 0xFFFFFFFFFFFFFFFCLL));
}

uint64_t sub_20B9029E4@<X0>(uint64_t a1@<X1>, int **a2@<X2>, unsigned int a3@<W3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  _DWORD *v8;
  unsigned int v9;
  char v12;
  uint64_t v13;
  int8x8_t v14;
  int v15;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint8x8_t v20;
  uint64_t v21;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = **a2 & 0xFFFFFFFFFFFFFFFCLL;
  v6 = a3 >> 5;
  v7 = v4 + v5 + 4 * (a3 >> 5);
  v9 = *(_DWORD *)(v7 + 4);
  v8 = (_DWORD *)(v7 + 4);
  if (((v9 >> a3) & 1) == 0)
    return sub_20B8F8D38(a4);
  v12 = a3 & 0x1F;
  v13 = sub_20B902644();
  if (a3 >= 0x20)
  {
    v15 = 0;
    if (v6 <= 1)
      v17 = 1;
    else
      v17 = v6;
    v18 = (unsigned int *)(v5 + v4 + 4);
    do
    {
      v19 = *v18++;
      v14 = vcnt_s8((int8x8_t)v19);
      v14.i16[0] = vaddlv_u8((uint8x8_t)v14);
      v15 += v14.i32[0];
      --v17;
    }
    while (v17);
  }
  else
  {
    v15 = 0;
  }
  v14.i32[0] = *v8 & ~(-1 << v12);
  v20 = (uint8x8_t)vcnt_s8(v14);
  v20.i16[0] = vaddlv_u8(v20);
  v21 = *(_QWORD *)(v13 + 8 * (*(_DWORD *)(v4 + v5 + 4 * (v20.i32[0] + v15) + 40) & 3));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 32))(v21, a1);
}

void sub_20B902B00(uint64_t a1, uint64_t a2, int **a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  int8x8_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;
  uint8x8_t v28;
  uint64_t v29;
  uint64_t v30;
  void **v31;
  void **v32;
  _DWORD *v33;
  unint64_t v34;
  _QWORD v35[6];
  _DWORD *v36;
  void **v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  char v41[8];

  v12 = *(_QWORD *)(a2 + 8);
  v13 = **a3 & 0xFFFFFFFFFFFFFFFCLL;
  v14 = v12 + v13;
  v38 = 0;
  v39 = &v38;
  v40 = 0x2000000000;
  v41[0] = 0;
  v15 = *(unsigned int *)(v12 + v13);
  if ((_DWORD)v15)
  {
    (*(void (**)(uint64_t, uint64_t, unint64_t, char *))(a7 + 16))(a7, v15, a4, v41);
    v16 = *((_BYTE *)v39 + 24) != 0;
  }
  else
  {
    v16 = 0;
  }
  v34 = a4;
  if (a5 - 1 >= a4 && !v16)
  {
    v17 = sub_20B902644();
    v19 = v39;
    if (!*((_BYTE *)v39 + 24))
    {
      v20 = v17;
      v21 = 0;
      v22 = v13 + v12 + 4;
      do
      {
        if (v21 >> 5 <= 1)
          v23 = 1;
        else
          v23 = v21 >> 5;
        v24 = *(_DWORD *)(v14 + 4 * (v21 >> 5) + 4);
        if (((v24 >> v21) & 1) != 0)
        {
          if (v21 >= 0x20u)
          {
            v25 = 0;
            v26 = (unsigned int *)v22;
            do
            {
              v27 = *v26++;
              v18 = vcnt_s8((int8x8_t)v27);
              v18.i16[0] = vaddlv_u8((uint8x8_t)v18);
              v25 += v18.i32[0];
              --v23;
            }
            while (v23);
          }
          else
          {
            v25 = 0;
          }
          v18.i32[0] = v24 & ~(-1 << (v21 & 0x1F));
          v28 = (uint8x8_t)vcnt_s8(v18);
          v28.i16[0] = vaddlv_u8(v28);
          v29 = *(_QWORD *)(v20 + 8 * (*(_DWORD *)(v14 + 4 * (v25 + v28.i32[0]) + 40) & 3));
          (*(void (**)(_DWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v29 + 32))(&v36, v29, a2);
          if (a6)
            *(_BYTE *)(a6 + v34) = v21;
          v35[0] = MEMORY[0x24BDAC760];
          v35[1] = 0x40000000;
          v35[2] = sub_20B902DA8;
          v35[3] = &unk_24C49C508;
          v35[4] = a7;
          v35[5] = &v38;
          v30 = *(_QWORD *)(v20 + 8 * (*v36 & 3));
          (*(void (**)(uint64_t, uint64_t, _DWORD **, unint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v30 + 24))(v30, a2, &v36, v34 + 1, a5, a6, v35);
          v31 = v37;
          v37 = 0;
          if (v31)
          {
            v32 = sub_20B8F8AB8(v31);
            MEMORY[0x20BD39CB0](v32, 0x20C4093837F09);
          }
          v33 = v36;
          v36 = 0;
          if (v33)
            MEMORY[0x20BD39CB0](v33, 0x1010C40E4C6A875);
          v19 = v39;
        }
        if (v21 > 0xFE)
          break;
        ++v21;
      }
      while (!*((_BYTE *)v19 + 24));
    }
  }
  _Block_object_dispose(&v38, 8);
}

void sub_20B902D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_20B902DA8(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  *a4 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  return result;
}

uint64_t sub_20B902DF0(uint64_t a1, uint64_t a2, int **a3)
{
  return *(unsigned int *)(*(_QWORD *)(a2 + 8) + (**a3 & 0xFFFFFFFFFFFFFFFCLL));
}

uint64_t *sub_20B902E08@<X0>(uint64_t a1@<X1>, int **a2@<X2>, char a3@<W3>, uint64_t *a4@<X8>)
{
  int *v5;
  unsigned __int8 *v6;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  size_t v11;
  size_t v12;
  unsigned __int8 *v13;
  unint64_t v15;
  size_t v16;
  int v17;
  int v18;
  _OWORD __dst[16];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v5 = *a2;
  v6 = (unsigned __int8 *)*((_QWORD *)*a2 + 1);
  if (!v6)
    return (uint64_t *)sub_20B8F8D38((uint64_t)a4);
  v8 = *v5;
  v9 = (unsigned __int8 *)(*(_QWORD *)(a1 + 16) + (v8 & 0xFFFFFFFFFFFFFFFCLL));
  memset(__dst, 0, sizeof(__dst));
  if (v6 <= v9 + 4)
  {
    if (v6 != v9 + 4)
      return (uint64_t *)sub_20B8F8D38((uint64_t)a4);
    v18 = v8;
    v13 = v9 + 8;
    LOBYTE(__dst[0]) = a3;
    v12 = 1;
  }
  else
  {
    v18 = v8;
    v10 = *v6;
    v11 = *((unsigned __int8 *)v5 + 16);
    memcpy(__dst, v6 + 1, v11);
    v12 = v11 + 1;
    *((_BYTE *)__dst + v11) = a3;
    if (v11 >= v10)
      v13 = &v6[v10 + 5];
    else
      v13 = v6;
  }
  v15 = (unint64_t)&v9[*(unsigned int *)v9 + 4];
  while ((unint64_t)v13 < v15)
  {
    v16 = *v13;
    if (v12 <= v16)
    {
      v17 = memcmp(v13 + 1, __dst, v12);
      if (v17 > 0)
        return (uint64_t *)sub_20B8F8D38((uint64_t)a4);
      if (!v17)
        return sub_20B902288(a4, v18, (uint64_t)v13, v12);
    }
    v13 += v16 + 5;
  }
  return (uint64_t *)sub_20B8F8D38((uint64_t)a4);
}

void sub_20B902FB0(uint64_t a1, uint64_t a2, int **a3, unint64_t a4, size_t a5, uint64_t a6, uint64_t a7)
{
  int *v7;
  unsigned int *v8;
  BOOL v14;
  unsigned int *v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  size_t v20;
  unsigned __int8 *v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  unsigned int v25;
  size_t v26;
  int v27;
  int v28;
  uint64_t v29;
  void *v30;
  unsigned __int8 v31;
  _OWORD __dst[16];
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v7 = *a3;
  v8 = (unsigned int *)*((_QWORD *)*a3 + 1);
  if (v8)
  {
    v14 = 0;
    v31 = 0;
    v15 = (unsigned int *)(*(_QWORD *)(a2 + 16) + (*v7 & 0xFFFFFFFFFFFFFFFCLL));
    v16 = v15 + 1;
    if (v8 == v15 + 1)
    {
      v17 = *v8;
      if ((_DWORD)v17)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t, unsigned __int8 *))(a7 + 16))(a7, v17, a4, &v31);
        v14 = v31 != 0;
      }
      else
      {
        v14 = 0;
      }
    }
    if (a5 - 1 >= a4 && !v14)
    {
      memset(__dst, 0, sizeof(__dst));
      v18 = (unsigned __int8 *)*((_QWORD *)*a3 + 1);
      if (v18 <= (unsigned __int8 *)v16)
      {
        v20 = 0;
        v21 = (unsigned __int8 *)(v15 + 2);
      }
      else
      {
        v19 = *v18;
        v20 = *((unsigned __int8 *)*a3 + 16);
        memcpy(__dst, v18 + 1, v20);
        if (v20 <= v19)
          v21 = v18;
        else
          v21 = &v18[v19 + 5];
      }
      v30 = (void *)(a6 + a4);
      v22 = a4 - v20;
      do
      {
        if (v21 >= (unsigned __int8 *)v16 + *v15)
          break;
        v25 = *v21;
        v23 = (char *)(v21 + 1);
        v24 = v25;
        v26 = v25 - v20;
        if (v25 < v20 || a5 && v26 > a5)
          goto LABEL_20;
        v27 = memcmp(v23, __dst, v20);
        if (v27 > 0)
          return;
        if (v27 || (v29 = *(unsigned int *)&v23[v24], !(_DWORD)v29))
        {
LABEL_20:
          v28 = 0;
        }
        else
        {
          if (a6)
          {
            memcpy(v30, &v23[v20], v26);
            v29 = *(unsigned int *)&v23[v24];
          }
          (*(void (**)(uint64_t, uint64_t, unint64_t, unsigned __int8 *))(a7 + 16))(a7, v29, v22 + v24, &v31);
          v28 = v31;
        }
        v21 = (unsigned __int8 *)&v23[v24 + 4];
      }
      while (!v28);
    }
  }
}

uint64_t *sub_20B9031B0@<X0>(uint64_t a1@<X1>, int a2@<W2>, uint64_t *a3@<X8>)
{
  return sub_20B902288(a3, a2, *(_QWORD *)(a1 + 16) + (int)(a2 & 0xFFFFFFFC) + 4, 0);
}

uint64_t sub_20B9031D4(uint64_t a1, uint64_t a2, int **a3)
{
  unsigned int *v3;
  uint64_t v4;

  v3 = (unsigned int *)*((_QWORD *)*a3 + 1);
  if (v3 == (unsigned int *)(*(_QWORD *)(a2 + 16) + (**a3 & 0xFFFFFFFFFFFFFFFCLL) + 4))
    return *v3;
  v4 = *(unsigned __int8 *)v3;
  if ((_DWORD)v4 == *((unsigned __int8 *)*a3 + 16))
  {
    v3 = (unsigned int *)((char *)v3 + v4 + 1);
    return *v3;
  }
  return 0;
}

uint64_t sub_20B903220(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(unsigned __int8 *)(*(_QWORD *)a3 + 16) + *(_QWORD *)(*(_QWORD *)a3 + 8);
}

uint64_t *sub_20B90323C@<X0>(int a1@<W2>, uint64_t *a2@<X8>)
{
  return sub_20B9021E0(a2, a1);
}

uint64_t sub_20B903248()
{
  return 0;
}

void sub_20B903254()
{
  JUMPOUT(0x20BD39CB0);
}

void sub_20B90326C()
{
  JUMPOUT(0x20BD39CB0);
}

void sub_20B903284()
{
  JUMPOUT(0x20BD39CB0);
}

void sub_20B90329C()
{
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B9032B0()
{
  return 0;
}

uint64_t sub_20B9032B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  sub_20B9D8594(v4, a1, 0, a2);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return v4;
}

void sub_20B903320(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10F1C40DA06FFE4);
  _Unwind_Resume(a1);
}

uint64_t sub_20B903344(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  sub_20B9D8594(v4, 0, a1, a2);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return v4;
}

void sub_20B9033AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10F1C40DA06FFE4);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9033D0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;

  v8 = operator new();
  sub_20B9D8594(v8, a1, 0, a2);
  *(_QWORD *)v8 = &unk_24C462A50;
  *(_QWORD *)(v8 + 112) = a3;
  *(_QWORD *)(v8 + 120) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 24) + 8) + 32) + 32) - 1;
  *(_QWORD *)(v8 + 128) = 0;
  *(_QWORD *)(v8 + 136) = 0;
  *(_BYTE *)(v8 + 144) = a4;
  *(_QWORD *)(v8 + 32) = -1;
  *(_QWORD *)(v8 + 40) = -1;
  sub_20B9D8B5C(v8);
  return v8;
}

void sub_20B90347C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10F1C4082D69C80);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9034A0(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;

  v6 = operator new();
  sub_20B8F05C0(v6, a1, a2, a3);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  return v6;
}

void sub_20B90350C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10F1C409BCD7C24);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B903530(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;

  v6 = (_QWORD *)operator new();
  sub_20B9D8594((uint64_t)v6, a1, 0, a2);
  *v6 = &unk_24C4648D8;
  v7 = v6[3];
  v6[14] = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) + 32) + 32) - 1;
  v6[15] = 0;
  v6[16] = 0;
  v6[17] = a3;
  v6[4] = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) + 32) + 32);
  v6[5] = -1;
  sub_20B9D8B5C((uint64_t)v6);
  return v6;
}

void sub_20B9035D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10F1C4054BF6589);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9035F8(uint64_t a1, unsigned int a2)
{
  CFLocaleRef v3;

  *(_QWORD *)(a1 + 16) = 850045863;
  *(_QWORD *)a1 = &off_24C462968;
  *(_QWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  v3 = sub_20B8D0FCC(a2);
  if (v3)
  {
    *(_QWORD *)(a1 + 8) = ChineseTokenizerCreate();
    CFRelease(v3);
  }
  return a1;
}

void sub_20B903688(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::mutex *v2;
  va_list va;

  va_start(va, a2);
  sub_20B8B0328((const void **)va, 0);
  std::mutex::~mutex(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9036B0(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24C462968;
  if (*(_QWORD *)(a1 + 8))
    ChineseTokenizerRelease();
  std::mutex::~mutex((std::mutex *)(a1 + 16));
  return a1;
}

void sub_20B9036F8(uint64_t a1)
{
  sub_20B9036B0(a1);
  JUMPOUT(0x20BD39CB0);
}

void sub_20B90371C(uint64_t a1)
{
  std::mutex *v1;

  if (*(_QWORD *)(a1 + 8))
  {
    v1 = (std::mutex *)(a1 + 16);
    std::mutex::lock((std::mutex *)(a1 + 16));
    ChineseTokenizerSetString();
    std::mutex::unlock(v1);
  }
}

void sub_20B903794(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9037A8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
    return ChineseTokenizerAdvanceToNextToken();
  return result;
}

uint64_t sub_20B9037B8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
    return ChineseTokenizerGetCurrentTokenRange();
  return result;
}

uint64_t sub_20B9037CC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
    return ChineseTokenizerSetCustomWordCheckBlock();
  return result;
}

uint64_t sub_20B9037DC(uint64_t a1, const __CFURL *a2, uint64_t a3)
{
  void *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int rep;
  uint64_t i;
  char *v13;
  CFPropertyListRef v14;
  void *__p[2];
  char v17;
  _BYTE __src[2504];

  v6 = sub_20B896F94();
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 850045863;
  *(_QWORD *)a1 = v6;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  v7 = 5489;
  *(_QWORD *)(a1 + 72) = 0;
  v8 = 1;
  v9 = 21;
  *(_DWORD *)(a1 + 80) = 5489;
  do
  {
    v10 = 1812433253 * (v7 ^ (v7 >> 30));
    v7 = v10 + v8;
    *(_DWORD *)(a1 + 4 * v9) = v9 + v10 - 20;
    ++v8;
    ++v9;
  }
  while (v9 != 644);
  *(_QWORD *)(a1 + 2576) = 0;
  *(_QWORD *)(a1 + 2584) = a3;
  *(_QWORD *)(a1 + 2592) = sub_20B8D0FCC(0);
  rep = std::chrono::system_clock::now().__d_.__rep_;
  *(_DWORD *)__src = rep;
  for (i = 1; i != 624; ++i)
  {
    rep = i + 1812433253 * (rep ^ (rep >> 30));
    *(_DWORD *)&__src[4 * i] = rep;
  }
  *(_QWORD *)&__src[2496] = 0;
  memcpy((void *)(a1 + 80), __src, 0x9C8uLL);
  sub_20B969780(0, a2, CFSTR("emoji_adornment.plist"), __p);
  if (v17 >= 0)
    v13 = (char *)__p;
  else
    v13 = (char *)__p[0];
  if (!stat(v13, (stat *)__src))
  {
    v14 = sub_20B8D25FC(v13);
    sub_20B87AA1C((const void **)(a1 + 8), v14);
  }
  if (v17 < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_20B903950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  const void **v14;
  std::mutex *v15;
  const void **v16;

  sub_20B8B0328(v16, 0);
  std::mutex::~mutex(v15);
  sub_20B87AA1C(v14, 0);
  _Unwind_Resume(a1);
}

BOOL sub_20B90399C(uint64_t a1, const __CFAllocator *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  int *v7;
  BOOL v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  unint64_t *v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int16 *v24;
  unsigned __int16 *v25;
  unsigned __int16 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  unsigned __int16 *v32;
  unsigned __int16 v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int16 *v36;
  uint64_t v37;
  uint64_t v38;
  CFIndex v39;
  UniChar *v40;
  __CFString *MutableCopy;
  const __CFDictionary *Value;
  const __CFDictionary *v43;
  CFTypeID v44;
  const __CFArray *v45;
  const __CFArray *v46;
  CFTypeID v47;
  const __CFBoolean *v48;
  const __CFBoolean *v49;
  CFTypeID v50;
  uint64_t Count;
  const __CFArray *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unsigned int v63;
  unsigned int v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t i;
  unsigned int v68;
  unint64_t v69;
  unint64_t v70;
  unsigned int v71;
  unint64_t v72;
  CFIndex j;
  const __CFString *ValueAtIndex;
  const __CFString *v75;
  CFTypeID v76;
  std::mutex *v78;
  BOOL v79;
  uint64_t v80;
  uint64_t v81;
  __CFArray *v82;
  CFAllocatorRef alloc;
  const __CFAllocator *alloca;
  CFAllocatorRef allocb;
  uint64_t v86;
  unint64_t v87;
  char v89;
  _QWORD v90[2];
  void (*v91)(_QWORD *);
  void *v92;
  uint64_t *v93;
  uint64_t v94;
  CFAllocatorRef v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  int v99;
  void *__p;
  unsigned __int16 *v101;
  char *v102;
  UniChar *v103[3];
  void *v104;

  v5 = a3[1];
  v6 = (a3[2] - v5) / 40;
  v7 = (int *)(v5 + 40 * v6 - 40);
  do
  {
    v8 = v6-- < 1;
    if (v8)
      return 0;
    v9 = *v7;
    v7 -= 10;
  }
  while (v9 == 7);
  __p = 0;
  v101 = 0;
  v102 = 0;
  sub_20B87D570(&__p, 5uLL);
  v10 = v6 + 1;
  v11 = 5;
  if (v6 + 1 > 5)
    v11 = v6 + 1;
  v12 = v11 - 5;
  if (v10 >= 6)
  {
    v13 = 0;
    v15 = (unint64_t *)a3[10];
    v16 = a3[4];
    v17 = (unsigned __int16 *)(a3[1] + 24);
    v18 = (v6 - 4) & ~((v6 - 4) >> 63);
    do
    {
      v19 = *v15++;
      if (v19 >= (a3[5] - v16) >> 1)
      {
        v20 = 0;
      }
      else
      {
        v20 = *v17;
        if (!v16)
          v20 = 0;
      }
      v13 += v20;
      v17 += 20;
      --v18;
    }
    while (v18);
  }
  else
  {
    v13 = 0;
  }
  alloc = a2;
  if (v12 >= (uint64_t)v10)
  {
    v21 = 0;
    v25 = v101;
  }
  else
  {
    v21 = 0;
    do
    {
      v22 = a3[4];
      if (*(_QWORD *)(a3[10] + 8 * v12) >= (unint64_t)((a3[5] - v22) >> 1))
      {
        v23 = 0;
      }
      else if (v22)
      {
        v23 = *(unsigned __int16 *)(a3[1] + 40 * v12 + 24);
      }
      else
      {
        v23 = 0;
      }
      v24 = v101;
      if (v101 >= (unsigned __int16 *)v102)
      {
        v26 = (unsigned __int16 *)__p;
        v27 = (char *)v101 - (_BYTE *)__p;
        if ((char *)v101 - (_BYTE *)__p <= -3)
          sub_20B80CDD8();
        v28 = v27 >> 1;
        if (v102 - (_BYTE *)__p <= (unint64_t)((v27 >> 1) + 1))
          v29 = v28 + 1;
        else
          v29 = v102 - (_BYTE *)__p;
        if ((unint64_t)(v102 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFELL)
          v30 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v30 = v29;
        if (v30)
        {
          v31 = (char *)sub_20B80FD48((uint64_t)&v102, v30);
          v26 = (unsigned __int16 *)__p;
          v24 = v101;
        }
        else
        {
          v31 = 0;
        }
        v32 = (unsigned __int16 *)&v31[2 * v28];
        *v32 = v23;
        v25 = v32 + 1;
        while (v24 != v26)
        {
          v33 = *--v24;
          *--v32 = v33;
        }
        __p = v32;
        v101 = v25;
        v102 = &v31[2 * v30];
        if (v26)
          operator delete(v26);
      }
      else
      {
        *v101 = v23;
        v25 = v24 + 1;
      }
      v101 = v25;
      v21 += v23;
      v8 = v12++ < v6;
    }
    while (v8);
  }
  v34 = a3[4];
  if (v34)
    v35 = v21;
  else
    v35 = 0;
  v86 = v35;
  v96 = 0;
  v97 = &v96;
  v98 = 0x2000000000;
  v99 = 0;
  v90[0] = MEMORY[0x24BDAC760];
  v90[1] = 0x40000000;
  v91 = (void (*)(_QWORD *))sub_20B904130;
  v92 = &unk_24C46C260;
  v94 = a1;
  v95 = alloc;
  v93 = &v96;
  if (!*(_QWORD *)(a1 + 8))
    goto LABEL_116;
  v36 = (unsigned __int16 *)__p;
  if (__p == v25)
    goto LABEL_116;
  v79 = 0;
  v81 = v34 + 2 * v13;
  alloca = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v37 = v35;
  while (1)
  {
    v38 = *v36;
    v39 = v34 ? v37 : 0;
    v40 = (UniChar *)CFStringCreateWithCharacters(0, (const UniChar *)(v81 + 2 * (v86 - v37)), v39);
    v103[0] = v40;
    MutableCopy = CFStringCreateMutableCopy(alloca, v39, (CFStringRef)v40);
    v104 = MutableCopy;
    CFStringLowercase(MutableCopy, *(CFLocaleRef *)(a1 + 2592));
    Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 8), MutableCopy);
    v43 = Value;
    if (!Value)
      goto LABEL_59;
    v44 = CFGetTypeID(Value);
    if (v44 != CFDictionaryGetTypeID())
      goto LABEL_59;
    v45 = (const __CFArray *)CFDictionaryGetValue(v43, CFSTR("emojis"));
    v46 = v45;
    if (!v45)
      goto LABEL_60;
    v47 = CFGetTypeID(v45);
    if (v47 == CFArrayGetTypeID())
    {
      v48 = (const __CFBoolean *)CFDictionaryGetValue(v43, CFSTR("shuffle"));
      v49 = v48;
      if (v48)
      {
        v50 = CFGetTypeID(v48);
        if (v50 == CFBooleanGetTypeID())
          v79 = CFBooleanGetValue(v49) != 0;
      }
    }
    else
    {
LABEL_59:
      v46 = 0;
    }
LABEL_60:
    if (MutableCopy)
      CFRelease(MutableCopy);
    if (v40)
      CFRelease(v40);
    if (v46)
      break;
    v37 -= v38;
    if (++v36 == v25)
      goto LABEL_116;
  }
  Count = CFArrayGetCount(v46);
  v52 = CFArrayCreateMutableCopy(alloca, Count, v46);
  v104 = v52;
  if (v79)
  {
    v78 = (std::mutex *)(a1 + 16);
    std::mutex::lock((std::mutex *)(a1 + 16));
    if (Count >= 1)
    {
      v53 = a1 + 80;
      v54 = Count;
      v80 = Count;
      v82 = v52;
      while (1)
      {
        allocb = (CFAllocatorRef)(v54 - 1);
        if (v54 != 1)
          break;
        v65 = 0;
LABEL_105:
        v52 = v82;
        CFArrayExchangeValuesAtIndices(v82, (CFIndex)allocb, v65);
        v8 = v54 > 1;
        v54 = (unint64_t)allocb;
        Count = v80;
        if (!v8)
          goto LABEL_106;
      }
      v55 = __clz(v54);
      v56 = 63;
      if (((v54 << v55) & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v56 = 64;
      v57 = v56 - v55;
      if ((v57 & 0x1F) != 0)
        v58 = (v57 >> 5) + 1;
      else
        v58 = v57 >> 5;
      v59 = v57 / v58;
      if (v59 >= 0x40)
        v60 = 0;
      else
        v60 = (-1 << (v57 / v58)) & 0x100000000;
      if ((v60 ^ 0x100000000) <= v60 / v58)
      {
LABEL_82:
        v61 = v58 - v57 % v58;
        if (v59 >= 0x3F)
          goto LABEL_91;
        v89 = v59 + 1;
        v62 = 0x80000000uLL >> v59 << (v59 + 1);
        if (v59)
          v63 = 0xFFFFFFFF >> -(char)v59;
        else
          v63 = 0;
        if (v59 >= 0x1F)
          v64 = -1;
        else
          v64 = 0xFFFFFFFF >> ~(_BYTE)v59;
      }
      else
      {
        v59 = v57 / ++v58;
        if (v59 <= 0x3F)
        {
          v60 = (-1 << (v57 / v58)) & 0x100000000;
          goto LABEL_82;
        }
        v60 = 0;
        v61 = v58 - (v57 % v58);
        v59 = 64;
LABEL_91:
        v62 = 0;
        v64 = -1;
        v63 = 0xFFFFFFFF >> -(char)v59;
        v89 = v59 + 1;
      }
      v87 = v54;
      do
      {
        v66 = v58;
        v65 = 0;
        if (v61)
        {
          for (i = 0; i != v61; ++i)
          {
            do
              v68 = sub_20B83D70C(v53);
            while (v60 <= v68);
            v69 = v65 << v59;
            if (v59 >= 0x40)
              v69 = 0;
            v65 = v69 + (v68 & v63);
          }
        }
        v70 = v61;
        v58 = v66;
        if (v61 < v66)
        {
          do
          {
            do
              v71 = sub_20B83D70C(v53);
            while (v62 <= v71);
            v72 = v65 << v89;
            if (v59 >= 0x3F)
              v72 = 0;
            v65 = v72 + (v71 & v64);
            ++v70;
            v58 = v66;
          }
          while (v70 != v66);
        }
        v54 = v87;
      }
      while (v65 >= v87);
      goto LABEL_105;
    }
LABEL_106:
    std::mutex::unlock(v78);
  }
  if (Count >= 1)
  {
    for (j = 0; j != Count; ++j)
    {
      ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v52, j);
      v75 = ValueAtIndex;
      if (ValueAtIndex)
      {
        v76 = CFGetTypeID(ValueAtIndex);
        if (v76 == CFStringGetTypeID())
        {
          sub_20B8D0790(v75, v103);
          v91(v90);
          if (v103[0])
          {
            v103[1] = v103[0];
            operator delete(v103[0]);
          }
        }
      }
    }
  }
  if (v52)
    CFRelease(v52);
LABEL_116:
  v14 = *((_DWORD *)v97 + 6) > 0;
  _Block_object_dispose(&v96, 8);
  if (__p)
  {
    v101 = (unsigned __int16 *)__p;
    operator delete(__p);
  }
  return v14;
}

void sub_20B904078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  uint64_t v28;

  sub_20B8B035C((const void **)(v28 - 96), 0);
  _Block_object_dispose(&a23, 8);
  if (__p)
  {
    a28 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_20B904130(_QWORD *a1, void *a2, unint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t *v10;
  uint64_t *v11;
  int *v12;
  uint64_t v13;
  char v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  int v19;
  uint8_t buf[16];
  int v21;
  __int128 v22;
  __int128 v23;
  int v24;
  void *__p[3];
  void **v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v7 = a1[5];
  v6 = (_QWORD *)a1[6];
  v8 = *(int *)(*(_QWORD *)(a1[4] + 8) + 24);
  v9 = atomic_load((unsigned __int8 *)&qword_25472B6D8);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_25472B6D8))
  {
    if (**(_BYTE **)v7)
      v19 = 3;
    else
      v19 = 1;
    dword_25472B6D0 = v19;
    __cxa_guard_release(&qword_25472B6D8);
  }
  if (a3)
  {
    v24 = 0x20000;
    v23 = 0u;
    v22 = 0u;
    WORD2(v23) = a3;
    v21 = 7;
    v10 = sub_20B947CC4();
    v11 = sub_20B947CC4();
    sub_20B90447C(__p, 1uLL, (__int128 *)&v21);
    v12 = *(int **)(v7 + 2584);
    v13 = operator new();
    sub_20B916250(v13, a2, a3, (void *)*v10, v10[1], (void *)*v11, v11[1], 0, 0, 0, (uint64_t)__p, 69, 2, *v12);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    *(_BYTE *)(v13 + 224) = 1;
    (*(void (**)(uint64_t, double))(*(_QWORD *)v13 + 400))(v13, 0.0);
    *(_QWORD *)(v13 + 184) = 0;
    *(_QWORD *)(v13 + 8) = dword_25472B6D0 + v8;
    (*(void (**)(uint64_t, uint64_t, const char *, uint64_t))(*(_QWORD *)v13 + 528))(v13, 10, "Adding an emoji adornment.", 1);
    *(_QWORD *)buf = v13;
    __p[0] = &unk_24C459188;
    v26 = __p;
    v14 = sub_20B8FDA94(v6, (_QWORD **)buf, 1, 0, (uint64_t)__p);
    v15 = v26;
    if (v26 == __p)
    {
      v16 = 4;
      v15 = __p;
    }
    else
    {
      if (!v26)
      {
LABEL_10:
        v17 = *(_QWORD *)buf;
        *(_QWORD *)buf = 0;
        if (v17)
          (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
        if ((v14 & 1) == 0)
        {
          v18 = sub_20B9A7C5C(3u);
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_debug_impl(&dword_20B7F7000, v18, OS_LOG_TYPE_DEBUG, " ∟ Rejected", buf, 2u);
          }
        }
        goto LABEL_15;
      }
      v16 = 5;
    }
    (*((void (**)(void))*v15 + v16))();
    goto LABEL_10;
  }
LABEL_15:
  ++*(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
}

void sub_20B9043D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void **a23)
{
  void **v23;
  void **p_p;
  uint64_t v26;

  p_p = a23;
  if (a23 == v23)
  {
    v26 = 4;
    p_p = &__p;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v26 = 5;
  }
  (*((void (**)(void))*p_p + v26))();
LABEL_6:
  if (a13)
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 16))(a13);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B90447C(_QWORD *a1, unint64_t a2, __int128 *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20B8822C0(a1, a2);
    v6 = a1[1];
    v7 = v6 + 40 * a2;
    v8 = 40 * a2;
    do
    {
      v9 = *a3;
      v10 = a3[1];
      *(_QWORD *)(v6 + 32) = *((_QWORD *)a3 + 4);
      *(_OWORD *)v6 = v9;
      *(_OWORD *)(v6 + 16) = v10;
      v6 += 40;
      v8 -= 40;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_20B9044F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B90450C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _QWORD v12[3];
  _QWORD *v13;
  _BYTE v14[8];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v11 = 0;
  v12[0] = &off_24C49C5B8;
  v12[1] = a4;
  v12[2] = a3;
  v13 = v12;
  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 8) + 24))(&v10);
  sub_20B904690((_BYTE *)a1, a2, (uint64_t)v12, v10, 1u, 0, 1u, &v11, 0.0, (uint64_t)v14, 0, a3, 0, 0, -1, 0, 0);
  v7 = v10;
  v10 = 0;
  if (v7)
    MEMORY[0x20BD39CB0](v7, 0x1000C4052888210);
  result = v13;
  if (v13 == v12)
  {
    v9 = 4;
    result = v12;
  }
  else
  {
    if (!v13)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_20B90462C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char *a22)
{
  char *v23;
  uint64_t v24;

  if (a17)
    MEMORY[0x20BD39CB0](a17, 0x1000C4052888210);
  v23 = a22;
  if (a22 == &a19)
  {
    v24 = 4;
    v23 = &a19;
  }
  else
  {
    if (!a22)
      goto LABEL_8;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_8:
  _Unwind_Resume(exception_object);
}

_BYTE *sub_20B904690(_BYTE *result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned __int8 a7, _BYTE *a8, float a9, uint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v26;
  _BYTE *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  __int16 *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  float v42;
  _BYTE *v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  float v47;
  int v48;
  char v49;
  _BYTE *v53;
  _BYTE *v54;
  unint64_t v55;
  double v56;
  unint64_t v57;
  unsigned __int8 v58;
  _BYTE v59[24];
  _BYTE *v60;
  uint64_t v61;

  v53 = result;
  v18 = a13;
  v17 = a14;
  v19 = a10;
  v20 = a11;
  v61 = *MEMORY[0x24BDAC8D0];
  v58 = a7;
  if (*a8)
    return result;
  if (((*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)result + 1) + 32))(*((_QWORD *)result + 1), a4) & 1) == 0)
    __assert_rtn("ambiguousDfsTraverse", "AmbiguousTrieAdapter.hpp", 137, "m_trie->isValid(curCursor)");
  v26 = a12;
  if (a5 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) != v26)
    goto LABEL_10;
  v57 = 0;
  if ((a7 & 1) == 0)
  {
    result = (_BYTE *)(*(uint64_t (**)(_QWORD, uint64_t, unint64_t *))(**((_QWORD **)v53 + 1) + 48))(*((_QWORD *)v53 + 1), a4, &v57);
    if (!(_DWORD)result)
      goto LABEL_9;
    v19 = a10;
    v20 = a11;
    v18 = a13;
    v17 = a14;
  }
  result = (_BYTE *)sub_20B8F9994(a3, a4, v19, 2 * v20, v18, v17, v26, (uint64_t)a8, a9);
LABEL_9:
  if (*a8)
    return result;
LABEL_10:
  result = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  if ((unint64_t)result <= v26)
    return result;
  result = (_BYTE *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)a2 + 16))(a2, v26);
  v27 = result;
  v57 = 0;
  if (!result)
    return result;
  v28 = 0;
  v49 = a17;
  v29 = a15;
  v30 = a16;
  v31 = a9;
  while (1)
  {
    result = (_BYTE *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t, unint64_t))(*(_QWORD *)a2 + 72))(a2, v29, v30, v26, v28);
    if (!(_DWORD)result)
      goto LABEL_32;
    v56 = 0.0;
    v56 = (*(double (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)a2 + 32))(a2, v26, v57)
        + v31;
    v55 = 0;
    v55 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)a2 + 40))(a2, v26, v57)
        + v26;
    result = (_BYTE *)(*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)a2 + 48))(a2, v26, v57);
    v33 = (__int16 *)result;
    v34 = v32;
    v35 = v55;
    if (v55 == v26 && (v49 & 1) != 0)
      goto LABEL_32;
    if (!v32)
    {
      v47 = v56;
      LOBYTE(v48) = v55 == v26;
      result = (_BYTE *)sub_20B904690(v53, a2, a3, a4, a5, a6, v58, a8, v47, a10, a11, v55, a13, a14, v29, v30, v48);
      goto LABEL_32;
    }
    (*(void (**)(_BYTE **__return_ptr, _QWORD, uint64_t, _BYTE *, uint64_t))(**((_QWORD **)v53 + 1) + 40))(&v54, *((_QWORD *)v53 + 1), a4, result, 2 * v32);
    if ((*(unsigned int (**)(_QWORD, _BYTE *))(**((_QWORD **)v53 + 1) + 32))(*((_QWORD *)v53 + 1), v54))
    {
      v36 = a10;
      v37 = a11;
      v38 = 2 * a11;
      v39 = v34;
      do
      {
        v40 = *v33++;
        *(_WORD *)(v36 + v38) = v40;
        v38 += 2;
        --v39;
      }
      while (v39);
      v41 = a13;
      if (a13)
      {
        *(_QWORD *)(a13 + 8 * a14) = v57;
        v37 = a11;
      }
      v42 = v56;
      LOBYTE(v48) = v35 == v26;
      sub_20B904690(v53, a2, a3, v54, a5, a6, v58, a8, v42, v36, v37 + v34, v55, v41, a14 + 1, v26, v57, v48);
      if (*a8)
        break;
    }
    result = v54;
    v54 = 0;
    if (result)
      result = (_BYTE *)MEMORY[0x20BD39CB0](result, 0x1000C4052888210);
    if ((a6 & 1) == 0)
      goto LABEL_32;
    v43 = (_BYTE *)v55;
    result = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    if (v43 != result)
      goto LABEL_32;
    result = (_BYTE *)(*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)a2 + 56))(a2, v26, v57);
    if (!(_DWORD)result)
      goto LABEL_32;
    v44 = v57;
    v45 = operator new(0x68uLL);
    *v45 = &unk_24C49C538;
    v45[1] = v53;
    v45[2] = a4;
    v45[3] = &a10;
    v45[4] = &a11;
    v45[5] = &a13;
    v45[6] = &a14;
    v45[7] = &v57;
    v45[8] = &v58;
    v45[9] = a3;
    v45[10] = &v56;
    v45[11] = &v55;
    v45[12] = a8;
    v60 = v45;
    (*(void (**)(uint64_t, unint64_t, unint64_t, _BYTE *))(*(_QWORD *)a2 + 64))(a2, v26, v44, v59);
    result = v60;
    if (v60 == v59)
    {
      result = v59;
      v46 = 4;
      goto LABEL_35;
    }
    if (v60)
    {
      v46 = 5;
LABEL_35:
      result = (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v46))();
    }
LABEL_32:
    v28 = v57 + 1;
    v57 = v28;
    if (v28 >= (unint64_t)v27)
      return result;
  }
  result = v54;
  v54 = 0;
  if (result)
    return (_BYTE *)MEMORY[0x20BD39CB0](result, 0x1000C4052888210);
  return result;
}

void sub_20B904B60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  _QWORD *v26;
  uint64_t v27;

  v26 = *(_QWORD **)(v24 - 120);
  if (v26 == (_QWORD *)(v24 - 144))
  {
    v27 = 4;
    v26 = (_QWORD *)(v24 - 144);
  }
  else
  {
    if (!v26)
      goto LABEL_6;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_20B904BD0()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B904BE4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x68uLL);
  *(_QWORD *)v2 = &unk_24C49C538;
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_20B904C48(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a2 = &unk_24C49C538;
  v2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  result = *(__n128 *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  v5 = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 72) = v5;
  *(_OWORD *)(a2 + 56) = v4;
  *(__n128 *)(a2 + 40) = result;
  return result;
}

uint64_t sub_20B904C94(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  return sub_20B904CF0((uint64_t *)(a1 + 8), *(__int16 **)a2, *(_QWORD *)(a2 + 8), a3);
}

uint64_t sub_20B904CA8(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C49C598))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B904CE4()
{
  return &unk_24C49C598;
}

uint64_t sub_20B904CF0(uint64_t *a1, __int16 *a2, uint64_t a3, _BYTE *a4)
{
  __int16 *v6;
  uint64_t v8;
  _WORD *v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  float v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;

  v6 = a2;
  v8 = *a1;
  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, __int16 *, uint64_t))(**(_QWORD **)(*a1 + 8) + 40))(&v16, *(_QWORD *)(*a1 + 8), a1[1], a2, 2 * a3);
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v8 + 8) + 32))(*(_QWORD *)(v8 + 8), v16))
    goto LABEL_13;
  if (a3)
  {
    v9 = (_WORD *)(*(_QWORD *)a1[2] + 2 * *(_QWORD *)a1[3]);
    v10 = a3;
    do
    {
      v11 = *v6++;
      *v9++ = v11;
      --v10;
    }
    while (v10);
  }
  v12 = *(_QWORD *)a1[4];
  if (v12)
    *(_QWORD *)(v12 + 8 * *(_QWORD *)a1[5]) = *(_QWORD *)a1[6];
  v15 = 0;
  if (!*(_BYTE *)a1[7])
  {
    if (!(*(unsigned int (**)(_QWORD, uint64_t, uint64_t *))(**(_QWORD **)(v8 + 8) + 48))(*(_QWORD *)(v8 + 8), v16, &v15))goto LABEL_11;
    v12 = *(_QWORD *)a1[4];
  }
  v13 = *(double *)a1[9];
  sub_20B8F9994(a1[8], v16, *(_QWORD *)a1[2], 2 * (*(_QWORD *)a1[3] + a3), v12, *(_QWORD *)a1[5] + 1, *(_QWORD *)a1[10], a1[11], v13);
LABEL_11:
  if (*(_BYTE *)a1[11])
    *a4 = 1;
LABEL_13:
  result = v16;
  v16 = 0;
  if (result)
    return MEMORY[0x20BD39CB0](result, 0x1000C4052888210);
  return result;
}

void sub_20B904E50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    MEMORY[0x20BD39CB0](a10, 0x1000C4052888210);
  _Unwind_Resume(exception_object);
}

void sub_20B904E84()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B904E98(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C49C5B8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20B904ED0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C49C5B8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20B904EF0(uint64_t result, uint64_t a2, float *a3, uint64_t *a4, uint64_t *a5, uint64_t a6, uint64_t a7, _QWORD *a8, uint64_t a9)
{
  if (!*(_BYTE *)(a2 + 3))
    return sub_20B8F9994(*(_QWORD *)(result + 8), a2, *a4, *a5, 0, 0, *a8 - *(_QWORD *)(result + 16), a9, *a3);
  return result;
}

uint64_t sub_20B904F34(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C49C618))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B904F70()
{
  return &unk_24C49C618;
}

uint64_t sub_20B904F7C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void **v6;

  *(_QWORD *)a1 = &off_24C468728;
  sub_20B905040((_QWORD *)a1, 1);
  sub_20B8292CC(a1 + 136, *(_QWORD **)(a1 + 144));
  v2 = *(_QWORD *)(a1 + 104);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 112);
    v4 = *(void **)(a1 + 104);
    if (v3 != v2)
    {
      do
        v3 = sub_20B811FE4(v3 - 16);
      while (v3 != v2);
      v4 = *(void **)(a1 + 104);
    }
    *(_QWORD *)(a1 + 112) = v2;
    operator delete(v4);
  }
  v6 = (void **)(a1 + 80);
  sub_20B8E736C(&v6);
  v6 = (void **)(a1 + 56);
  sub_20B8E736C(&v6);
  v6 = (void **)(a1 + 32);
  sub_20B8E736C(&v6);
  v6 = (void **)(a1 + 8);
  sub_20B8E736C(&v6);
  return a1;
}

void sub_20B905040(_QWORD *a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t j;
  uint64_t v9;
  __int128 *v10;
  __int128 *v11;
  uint64_t v12;
  __int128 *v13;
  uint64_t v14;
  uint64_t k;
  uint64_t v16;
  uint64_t m;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;

  v4 = a1[2];
  v5 = a1[1];
  while (v4 != v5)
    v4 = sub_20B811FE4(v4 - 16);
  a1[2] = v5;
  v7 = a1[4];
  for (i = a1[5]; i != v7; i = sub_20B811FE4(i - 16))
    ;
  a1[5] = v7;
  if (a2)
  {
    v9 = a1[7];
    for (j = a1[8]; j != v9; j = sub_20B811FE4(j - 16))
      ;
    a1[8] = v9;
    v16 = a1[10];
    for (k = a1[11]; k != v16; k = sub_20B811FE4(k - 16))
      ;
    a1[11] = v16;
    v18 = a1[13];
    for (m = a1[14]; m != v18; m = sub_20B811FE4(m - 16))
      ;
    a1[14] = v18;
  }
  else
  {
    v10 = (__int128 *)a1[13];
    if (v10 != (__int128 *)a1[14])
    {
      do
      {
        if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)v10 + 64))(*(_QWORD *)v10) == 6)
        {
          ++v10;
          v11 = (__int128 *)a1[14];
        }
        else
        {
          v12 = (uint64_t)(v10 + 1);
          v13 = (__int128 *)a1[14];
          v11 = v10;
          if (v10 + 1 != v13)
          {
            do
              v14 = (uint64_t)v11++;
            while ((__int128 *)(sub_20B82E770(v14, v11) + 32) != v13);
            v12 = a1[14];
          }
          while ((__int128 *)v12 != v11)
            v12 = sub_20B811FE4(v12 - 16);
          a1[14] = v11;
        }
      }
      while (v10 != v11);
    }
  }
  v20 = (_QWORD *)a1[18];
  v19 = a1 + 18;
  sub_20B8292CC((uint64_t)(v19 - 1), v20);
  *(v19 - 1) = v19;
  *v19 = 0;
  v19[1] = 0;
}

void sub_20B90519C(uint64_t a1)
{
  sub_20B904F7C(a1);
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B9051C0(_QWORD *result, __int128 *a2)
{
  char **v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  unint64_t *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  uint64_t v27;
  int64x2_t v28;
  char *v29;
  _QWORD *v30;

  v3 = (char **)result;
  v4 = result + 2;
  v5 = result[2];
  v6 = (_QWORD *)result[1];
  if ((unint64_t)v6 >= v5)
  {
    v11 = ((uint64_t)v6 - *result) >> 4;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60)
      sub_20B80CDD8();
    v13 = v5 - *result;
    if (v13 >> 3 > v12)
      v12 = v13 >> 3;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    v30 = v4;
    v15 = (char *)sub_20B8F6ECC(v14);
    v17 = &v15[16 * v11];
    v18 = *a2;
    *(_OWORD *)v17 = *a2;
    if (*((_QWORD *)&v18 + 1))
    {
      v19 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    v22 = *v3;
    v21 = v3[1];
    if (v21 == *v3)
    {
      v25 = vdupq_n_s64((unint64_t)v21);
      v23 = &v15[16 * v11];
    }
    else
    {
      v23 = &v15[16 * v11];
      do
      {
        v24 = *((_OWORD *)v21 - 1);
        v21 -= 16;
        *((_OWORD *)v23 - 1) = v24;
        v23 -= 16;
        *(_QWORD *)v21 = 0;
        *((_QWORD *)v21 + 1) = 0;
      }
      while (v21 != v22);
      v25 = *(int64x2_t *)v3;
    }
    v10 = v17 + 16;
    *v3 = v23;
    v3[1] = v17 + 16;
    v28 = v25;
    v26 = v3[2];
    v3[2] = &v15[16 * v16];
    v29 = v26;
    v27 = v25.i64[0];
    result = (_QWORD *)sub_20B9061D0((uint64_t)&v27);
  }
  else
  {
    *v6 = *(_QWORD *)a2;
    v7 = *((_QWORD *)a2 + 1);
    v6[1] = v7;
    if (v7)
    {
      v8 = (unint64_t *)(v7 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    v10 = (char *)(v6 + 2);
  }
  v3[1] = v10;
  return result;
}

uint64_t sub_20B905300(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;
  _QWORD *v7;
  char *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  _QWORD *v21;
  char *v22;
  __int128 v23;
  int64x2_t v24;
  uint64_t v25;
  uint64_t v26;
  int64x2_t v27;
  uint64_t v28;
  _QWORD *v29;

  v4 = (_QWORD *)a1[13];
  v5 = (_QWORD *)a1[14];
  while (v4 != v5)
  {
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v4 + 64))(*v4) == 7)
    {
      result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v4 + 32))(*v4);
      if (result == a2)
        return result;
    }
    v4 += 2;
  }
  v7 = operator new(0x40uLL);
  v7[1] = 0;
  v7[2] = 0;
  *v7 = &off_24C46BB40;
  v7[3] = &off_24C468748;
  v8 = (char *)(v7 + 3);
  result = operator new[]();
  v7[5] = result;
  v7[6] = 0;
  v7[3] = &unk_24C469080;
  v7[4] = result;
  *((_WORD *)v7 + 28) = a2;
  v9 = a1[15];
  v10 = (_QWORD *)a1[14];
  if ((unint64_t)v10 >= v9)
  {
    v12 = a1[13];
    v13 = ((uint64_t)v10 - v12) >> 4;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 60)
      sub_20B80CDD8();
    v15 = v9 - v12;
    if (v15 >> 3 > v14)
      v14 = v15 >> 3;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0)
      v16 = 0xFFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    v29 = a1 + 15;
    v17 = (char *)sub_20B8F6ECC(v16);
    v19 = &v17[16 * v13];
    *(_QWORD *)v19 = v8;
    *((_QWORD *)v19 + 1) = v7;
    v21 = (_QWORD *)a1[13];
    v20 = (_QWORD *)a1[14];
    if (v20 == v21)
    {
      v24 = vdupq_n_s64((unint64_t)v20);
      v22 = &v17[16 * v13];
    }
    else
    {
      v22 = &v17[16 * v13];
      do
      {
        v23 = *((_OWORD *)v20 - 1);
        v20 -= 2;
        *((_OWORD *)v22 - 1) = v23;
        v22 -= 16;
        *v20 = 0;
        v20[1] = 0;
      }
      while (v20 != v21);
      v24 = *(int64x2_t *)(a1 + 13);
    }
    v11 = v19 + 16;
    a1[13] = v22;
    a1[14] = v19 + 16;
    v27 = v24;
    v25 = a1[15];
    a1[15] = &v17[16 * v18];
    v28 = v25;
    v26 = v24.i64[0];
    result = sub_20B9061D0((uint64_t)&v26);
  }
  else
  {
    *v10 = v8;
    v10[1] = v7;
    v11 = v10 + 2;
  }
  a1[14] = v11;
  return result;
}

void sub_20B9054B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_20B811FE4((uint64_t)va1);
  sub_20B811FE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9054E0(char **a1, __int128 *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  int64x2_t v26;
  char *v27;
  uint64_t v28;
  int64x2_t v29;
  char *v30;
  uint64_t v31;

  v6 = (unint64_t)a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v12 = (v7 - *a1) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      sub_20B80CDD8();
    v14 = v5 - (_QWORD)*a1;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    v31 = result;
    v16 = (char *)sub_20B829AD0(result, v15);
    v18 = &v16[16 * v12];
    v19 = *a2;
    *(_OWORD *)v18 = *a2;
    if (*((_QWORD *)&v19 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v23 = *a1;
    v22 = a1[1];
    if (v22 == *a1)
    {
      v26 = vdupq_n_s64((unint64_t)v22);
      v24 = &v16[16 * v12];
    }
    else
    {
      v24 = &v16[16 * v12];
      do
      {
        v25 = *((_OWORD *)v22 - 1);
        v22 -= 16;
        *((_OWORD *)v24 - 1) = v25;
        v24 -= 16;
        *(_QWORD *)v22 = 0;
        *((_QWORD *)v22 + 1) = 0;
      }
      while (v22 != v23);
      v26 = *(int64x2_t *)a1;
    }
    v11 = v18 + 16;
    *a1 = v24;
    a1[1] = v18 + 16;
    v29 = v26;
    v27 = a1[2];
    a1[2] = &v16[16 * v17];
    v30 = v27;
    v28 = v26.i64[0];
    result = sub_20B9061D0((uint64_t)&v28);
  }
  else
  {
    *(_QWORD *)v7 = *(_QWORD *)a2;
    v8 = *((_QWORD *)a2 + 1);
    *((_QWORD *)v7 + 1) = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = v7 + 16;
  }
  a1[1] = v11;
  return result;
}

uint64_t sub_20B905620(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, double a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  int v24;
  char *v25;
  char *v26;
  float v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  _QWORD *v40;
  _QWORD *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  int64x2_t *v49;
  uint64_t v50;
  int64x2_t v51;
  uint64_t v52;
  uint64_t v53;

  v12 = *(_QWORD *)(a1 + 56);
  v49 = (int64x2_t *)(a1 + 56);
  if (v12 == *(_QWORD *)(a1 + 64))
  {
    v16 = 0;
    v14 = *(_QWORD **)(a1 + 56);
    goto LABEL_11;
  }
  v13 = -v12;
  v14 = *(_QWORD **)(a1 + 56);
  while (1)
  {
    v15 = *v14;
    if (*(unsigned __int16 *)(*(_QWORD *)(*v14 + 8) + 2) == *(unsigned __int16 *)(a2 + 2)
      && (*(unsigned int (**)(_QWORD))(*(_QWORD *)v15 + 40))(*v14) == a3
      && *(unsigned __int8 *)(v15 + 16) == a4
      && !*(_QWORD *)(v15 + 120)
      && !*(_QWORD *)(v15 + 128))
    {
      break;
    }
    v14 += 2;
    v13 -= 16;
    if (v14 == *(_QWORD **)(a1 + 64))
    {
      v16 = 0;
      v12 = (uint64_t)v14;
      goto LABEL_11;
    }
  }
  v17 = *(_QWORD *)(a1 + 64);
  if ((a5 & 1) == 0)
  {
    v12 = -v13;
    if (16 - v13 != v17)
    {
      do
      {
        v47 = v12 + 16;
        sub_20B82E770(v12, (__int128 *)(v12 + 16));
        v48 = v12 + 32;
        v12 += 16;
      }
      while (v48 != v17);
      v17 = *(_QWORD *)(a1 + 64);
      v12 = v47;
    }
    while (v17 != v12)
    {
      v17 -= 16;
      sub_20B811FE4(v17);
    }
    *(_QWORD *)(a1 + 64) = v12;
    v16 = 1;
LABEL_11:
    v17 = v12;
    if (!a5)
      return v16;
    goto LABEL_12;
  }
  v16 = 0;
LABEL_12:
  if (v14 == (_QWORD *)v17)
  {
    v18 = *(unsigned __int16 *)(a2 + 2);
    v19 = *(_BYTE *)(a2 + 8);
    v20 = a1 + 8;
    v21 = 8;
    if ((v19 & 2) == 0)
    {
      v21 = 32;
      v20 = a1 + 32;
    }
    v22 = *(_QWORD **)(a1 + v21);
    v23 = *(_QWORD **)(v20 + 8);
    while (v22 != v23)
    {
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v22 + 40))(*v22) == a3
        && *(unsigned __int16 *)(*(_QWORD *)(*v22 + 8) + 2) == (_DWORD)v18)
      {
        return v16;
      }
      v22 += 2;
    }
    if ((v19 & 2) != 0)
    {
      v31 = *(_QWORD **)(a1 + 32);
      v32 = *(_QWORD **)(a1 + 40);
      while (v31 != v32)
      {
        if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v31 + 40))(*v31) == a3
          && ((*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v31 + 104))(*v31, v18) & 1) != 0)
        {
          return v16;
        }
        v31 += 2;
      }
    }
    v24 = *(_DWORD *)(a1 + 160);
    v25 = (char *)operator new(0xA8uLL);
    *((_QWORD *)v25 + 2) = 0;
    *(_QWORD *)v25 = &unk_24C46BA98;
    *((_QWORD *)v25 + 1) = 0;
    *((_QWORD *)v25 + 3) = &off_24C4688D8;
    v26 = v25 + 24;
    v27 = a6;
    *((_QWORD *)v25 + 4) = a2;
    v25[40] = a4;
    *((_DWORD *)v25 + 11) = v24;
    v25[48] = 0;
    *((float *)v25 + 13) = v27;
    *(_OWORD *)(v25 + 56) = 0u;
    *(_OWORD *)(v25 + 72) = 0u;
    *((_DWORD *)v25 + 22) = 1065353216;
    *((_OWORD *)v25 + 6) = 0u;
    *((_OWORD *)v25 + 7) = 0u;
    *((_DWORD *)v25 + 32) = 1065353216;
    *((_WORD *)v25 + 68) = a3;
    *((_QWORD *)v25 + 18) = 0;
    *((_QWORD *)v25 + 19) = 0;
    v25[160] = 1;
    v28 = *(_QWORD *)(a1 + 72);
    v29 = *(_QWORD **)(a1 + 64);
    if ((unint64_t)v29 >= v28)
    {
      v33 = ((uint64_t)v29 - v49->i64[0]) >> 4;
      v34 = v33 + 1;
      if ((unint64_t)(v33 + 1) >> 60)
        sub_20B80CDD8();
      v35 = v28 - v49->i64[0];
      if (v35 >> 3 > v34)
        v34 = v35 >> 3;
      if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF0)
        v36 = 0xFFFFFFFFFFFFFFFLL;
      else
        v36 = v34;
      v53 = a1 + 72;
      v37 = (char *)sub_20B829AD0(a1 + 72, v36);
      v39 = &v37[16 * v33];
      *(_QWORD *)v39 = v26;
      *((_QWORD *)v39 + 1) = v25;
      v41 = *(_QWORD **)(a1 + 56);
      v40 = *(_QWORD **)(a1 + 64);
      if (v40 == v41)
      {
        v44 = vdupq_n_s64((unint64_t)v40);
        v42 = &v37[16 * v33];
      }
      else
      {
        v42 = &v37[16 * v33];
        do
        {
          v43 = *((_OWORD *)v40 - 1);
          v40 -= 2;
          *((_OWORD *)v42 - 1) = v43;
          v42 -= 16;
          *v40 = 0;
          v40[1] = 0;
        }
        while (v40 != v41);
        v44 = *v49;
      }
      v30 = v39 + 16;
      *(_QWORD *)(a1 + 56) = v42;
      *(_QWORD *)(a1 + 64) = v39 + 16;
      v51 = v44;
      v45 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = &v37[16 * v38];
      v52 = v45;
      v50 = v44.i64[0];
      sub_20B9061D0((uint64_t)&v50);
    }
    else
    {
      *v29 = v26;
      v29[1] = v25;
      v30 = v29 + 2;
    }
    *(_QWORD *)(a1 + 64) = v30;
    return 1;
  }
  return v16;
}

void sub_20B9059B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_20B811FE4((uint64_t)va1);
  sub_20B811FE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9059D0(_QWORD *a1, const __CFString *a2, const void *a3, unsigned __int16 a4, int a5)
{
  uint64_t *v10;
  char v11;
  _BOOL4 v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  uint64_t *v16;
  __int128 *v17;
  uint64_t v18;
  uint64_t result;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v22;
  unint64_t v23;
  std::__shared_weak_count **v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  std::__shared_weak_count **v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  char *v38;
  __int128 v39;
  int64x2_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int64x2_t v44;
  uint64_t v45;
  _QWORD *v46;

  v10 = (uint64_t *)a1[13];
  if (v10 == (uint64_t *)a1[14])
  {
    v11 = 0;
LABEL_16:
    v14 = 2;
  }
  else
  {
    v11 = 0;
    while (1)
    {
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*v10 + 64))(*v10) == 6)
      {
        v12 = sub_20B9F0170(*v10, a2);
        v13 = v12;
        v14 = v12;
        if (v12 && (a5 & 1) == 0)
        {
          v15 = (uint64_t)(v10 + 2);
          v16 = (uint64_t *)a1[14];
          v17 = (__int128 *)v10;
          if (v10 + 2 != v16)
          {
            do
              v18 = (uint64_t)v17++;
            while ((uint64_t *)(sub_20B82E770(v18, v17) + 32) != v16);
            v15 = a1[14];
          }
          while ((__int128 *)v15 != v17)
            v15 = sub_20B811FE4(v15 - 16);
          a1[14] = v17;
          v11 = 1;
          v14 = 2;
        }
        if (v13)
          break;
      }
      v10 += 2;
      if (v10 == (uint64_t *)a1[14])
        goto LABEL_16;
    }
  }
  result = (v14 == 2) & v11;
  if (v14 == 2 && a5)
  {
    v20 = (std::__shared_weak_count *)operator new(0x68uLL);
    v20->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    v20->__shared_weak_owners_ = 0;
    v20->__vftable = (std::__shared_weak_count_vtbl *)&off_24C46BB08;
    v22 = v20 + 1;
    sub_20B9EFF98((uint64_t)&v20[1], a2, a3, a4);
    v23 = a1[15];
    v24 = (std::__shared_weak_count **)a1[14];
    if ((unint64_t)v24 >= v23)
    {
      v27 = a1[13];
      v28 = ((uint64_t)v24 - v27) >> 4;
      v29 = v28 + 1;
      if ((unint64_t)(v28 + 1) >> 60)
        sub_20B80CDD8();
      v30 = v23 - v27;
      if (v30 >> 3 > v29)
        v29 = v30 >> 3;
      if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0)
        v31 = 0xFFFFFFFFFFFFFFFLL;
      else
        v31 = v29;
      v46 = a1 + 15;
      v32 = (char *)sub_20B8F6ECC(v31);
      v34 = (std::__shared_weak_count **)&v32[16 * v28];
      *v34 = v22;
      v34[1] = v20;
      do
        v35 = __ldxr(p_shared_owners);
      while (__stxr(v35 + 1, p_shared_owners));
      v37 = (_QWORD *)a1[13];
      v36 = (_QWORD *)a1[14];
      if (v36 == v37)
      {
        v40 = vdupq_n_s64((unint64_t)v36);
        v38 = &v32[16 * v28];
      }
      else
      {
        v38 = &v32[16 * v28];
        do
        {
          v39 = *((_OWORD *)v36 - 1);
          v36 -= 2;
          *((_OWORD *)v38 - 1) = v39;
          v38 -= 16;
          *v36 = 0;
          v36[1] = 0;
        }
        while (v36 != v37);
        v40 = *(int64x2_t *)(a1 + 13);
      }
      v26 = v34 + 2;
      a1[13] = v38;
      a1[14] = v34 + 2;
      v44 = v40;
      v41 = a1[15];
      a1[15] = &v32[16 * v33];
      v45 = v41;
      v43 = v40.i64[0];
      sub_20B9061D0((uint64_t)&v43);
    }
    else
    {
      *v24 = v22;
      v24[1] = v20;
      do
        v25 = __ldxr(p_shared_owners);
      while (__stxr(v25 + 1, p_shared_owners));
      v26 = v24 + 2;
    }
    a1[14] = v26;
    do
      v42 = __ldaxr(p_shared_owners);
    while (__stlxr(v42 - 1, p_shared_owners));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
    return 1;
  }
  return result;
}

void sub_20B905C8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_20B811FE4((uint64_t)va1);
  sub_20B811FE4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B905CBC(uint64_t a1)
{
  uint64_t **v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  __int16 v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  __int16 v15;
  uint64_t v16;
  unsigned __int16 v17;
  unsigned __int16 v18;
  unsigned __int16 v19;

  v1 = (uint64_t **)(a1 + 136);
  if (*(_QWORD *)(a1 + 128))
  {
    v3 = (_QWORD *)(a1 + 144);
    sub_20B8292CC(a1 + 136, *(_QWORD **)(a1 + 144));
    v4 = a1 + 8;
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 136) = v3;
    *v3 = 0;
    *(_QWORD *)(a1 + 152) = 0;
    v6 = *(_QWORD *)(a1 + 16);
    if (v6 == v5 && *(_QWORD *)(a1 + 40) == *(_QWORD *)(a1 + 32))
    {
      v13 = *(uint64_t **)(a1 + 104);
      v14 = *(uint64_t **)(a1 + 112);
      while (v13 != v14)
      {
        v15 = *(_WORD *)(a1 + 128);
        v16 = *v13;
        v13 += 2;
        v17 = v15 - (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16) + 1;
        sub_20B871FAC(v1, &v17, &v17);
      }
    }
    else
    {
      v7 = v6 == v5;
      v8 = 8;
      if (v7)
      {
        v8 = 32;
        v4 = a1 + 32;
      }
      v9 = *(_QWORD **)(a1 + v8);
      v10 = *(_QWORD **)(v4 + 8);
      while (v9 != v10 && (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v9 + 64))(*v9) != 2)
      {
        v11 = *(_WORD *)(a1 + 128);
        v12 = *v9;
        v9 += 2;
        v18 = v11 - (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12) + 1;
        sub_20B871FAC(v1, &v18, &v18);
      }
    }
  }
  else
  {
    v19 = 0;
    sub_20B871FAC((uint64_t **)(a1 + 136), &v19, &v19);
  }
}

uint64_t sub_20B905E00(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  int v5;

  v1 = *(_QWORD **)(a1 + 32);
  v2 = *(_QWORD **)(a1 + 40);
  while (v1 != v2)
  {
    v3 = *v1;
    result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v1 + 64))(*v1);
    if ((_DWORD)result == 1)
    {
      v5 = *(unsigned __int16 *)(*(_QWORD *)(v3 + 8) + 2);
      if (v5 == 4 || v5 == 77 || v5 == 55)
        return result;
    }
    v1 += 2;
  }
  return 0;
}

uint64_t sub_20B905E74(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = *(_QWORD **)(a1 + 32);
  v2 = *(_QWORD **)(a1 + 40);
  while (1)
  {
    if (v1 == v2)
      return 0;
    v3 = *v1;
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v1 + 64))(*v1) == 1
      && *(_WORD *)(*(_QWORD *)(v3 + 8) + 2) == 20)
    {
      break;
    }
    v1 += 2;
  }
  return 1;
}

uint64_t sub_20B905EE0(_QWORD *a1, _WORD *a2, int a3)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int v9;

  *a2 = 0;
  v4 = a1 + 1;
  if (a1[2] == a1[1] && a1[5] == a1[4])
    return 0;
  v5 = 4;
  if (a3)
    v5 = 1;
  else
    v4 = a1 + 4;
  v6 = (_QWORD *)a1[v5];
  v7 = (_QWORD *)v4[1];
  if (v6 == v7)
    return 0;
  v8 = 0;
  do
  {
    v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v6 + 40))(*v6);
    if (v9 > (unsigned __int16)*a2)
    {
      *a2 = v9;
      v8 = *v6;
    }
    v6 += 2;
  }
  while (v6 != v7);
  return v8;
}

uint64_t sub_20B905F8C(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  _BOOL8 v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;

  v6 = a1[1];
  v7 = a1[2];
  while (v6 != v7)
  {
    v8 = *(_BYTE *)(*(_QWORD *)v6 + 16) == 0;
    if (*(_BYTE *)(*(_QWORD *)v6 + 16) || sub_20B9F17AC(a2, *(unsigned __int16 **)(*(_QWORD *)v6 + 8), a3))
      return v8;
    v6 += 16;
  }
  v10 = a1[4];
  v9 = a1[5];
  if (v10 == v9)
    return 0;
  while (1)
  {
    if (*(_BYTE *)(*(_QWORD *)v10 + 16))
    {
      v11 = 0;
      v12 = 1;
      return v12 & v11;
    }
    if (sub_20B9F17AC(a2, *(unsigned __int16 **)(*(_QWORD *)v10 + 8), a3))
      break;
    v10 += 16;
    if (v10 == v9)
    {
      v12 = 0;
      return v12 & v11;
    }
  }
  v12 = 1;
  v11 = 1;
  return v12 & v11;
}

uint64_t sub_20B906060(_QWORD *a1, int a2, char a3)
{
  uint64_t *i;
  uint64_t v4;
  uint64_t *j;
  uint64_t *k;
  uint64_t *m;

  for (i = (uint64_t *)a1[1]; i != (uint64_t *)a1[2]; i += 2)
  {
    v4 = *i;
    if (*(unsigned __int16 *)(*(_QWORD *)(*i + 8) + 2) == a2)
      return v4;
  }
  for (j = (uint64_t *)a1[7]; j != (uint64_t *)a1[8]; j += 2)
  {
    v4 = *j;
    if (*(unsigned __int16 *)(*(_QWORD *)(*j + 8) + 2) == a2)
      return v4;
  }
  if ((a3 & 1) == 0)
  {
    for (k = (uint64_t *)a1[4]; k != (uint64_t *)a1[5]; k += 2)
    {
      v4 = *k;
      if (*(unsigned __int16 *)(*(_QWORD *)(*k + 8) + 2) == a2)
        return v4;
    }
    for (m = (uint64_t *)a1[10]; m != (uint64_t *)a1[11]; m += 2)
    {
      v4 = *m;
      if (*(unsigned __int16 *)(*(_QWORD *)(*m + 8) + 2) == a2)
        return v4;
    }
  }
  return 0;
}

uint64_t sub_20B906110(_QWORD *a1, int a2, int a3, char a4)
{
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v11;

  v8 = (_QWORD *)a1[1];
  v9 = (_QWORD *)a1[2];
  while (v8 != v9)
  {
    if (*(unsigned __int16 *)(*(_QWORD *)(*v8 + 8) + 2) == a2
      && (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v8 + 40))(*v8) == a3)
    {
      return *v8;
    }
    v8 += 2;
  }
  if ((a4 & 1) == 0)
  {
    v8 = (_QWORD *)a1[4];
    v11 = (_QWORD *)a1[5];
    while (v8 != v11)
    {
      if (*(unsigned __int16 *)(*(_QWORD *)(*v8 + 8) + 2) == a2
        && (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v8 + 40))(*v8) == a3)
      {
        return *v8;
      }
      v8 += 2;
    }
  }
  return 0;
}

uint64_t sub_20B9061D0(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    sub_20B811FE4(i - 16);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20B90621C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C46BB40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B90622C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C46BB40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B90625C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_20B90626C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C46BA98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B906280(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C46BA98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B9062B4(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_20B9062C4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C46BB08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B9062D4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C46BB08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B906304(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_20B906314(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 136) = a4;
  *(_QWORD *)a1 = &off_24C468028;
  sub_20B923F34((_QWORD *)(a1 + 144), a2);
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(double *)(a1 + 200) = *(float *)(sub_20B8956BC(1u) + 4);
  return a1;
}

void sub_20B9063A4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void **v4;
  void *v6;

  v4 = v3;
  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 184) = v6;
    operator delete(v6);
  }
  sub_20B924608(v2);
  sub_20B9063DC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9063DC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void **v6;

  *(_QWORD *)a1 = &unk_24C467A10;
  v2 = *(void **)(a1 + 104);
  if (v2)
  {
    *(_QWORD *)(a1 + 112) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 80);
  if (v3)
  {
    *(_QWORD *)(a1 + 88) = v3;
    operator delete(v3);
  }
  v6 = (void **)(a1 + 48);
  sub_20B828E34(&v6);
  v4 = *(void **)(a1 + 24);
  if (v4)
  {
    *(_QWORD *)(a1 + 32) = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_20B906454(uint64_t *a1)
{
  a1[23] = a1[22];
  return sub_20B882F18(a1);
}

void sub_20B906460(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v6;

  if (a1[6] != a1[7])
  {
    if (*(_DWORD *)(a2 + 64) == 1 || (v6 = a1[11], v6 != a1[10]) && *(_DWORD *)(v6 - 4) == 2)
      (*(void (**)(uint64_t *))(*a1 + 16))(a1);
  }
  sub_20B88318C(a1, a2, a3);
}

void sub_20B9064D8(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v5 = (_QWORD *)a1[23];
  v4 = a1[24];
  if ((unint64_t)v5 >= v4)
  {
    v7 = (_QWORD *)a1[22];
    v8 = v5 - v7;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61)
      sub_20B80CDD8();
    v10 = v4 - (_QWORD)v7;
    if (v10 >> 2 > v9)
      v9 = v10 >> 2;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 61)
        sub_20B800BC0();
      v12 = (char *)operator new(8 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[8 * v8];
    *(_QWORD *)v13 = a2;
    v6 = v13 + 8;
    if (v5 != v7)
    {
      do
      {
        v14 = *--v5;
        *((_QWORD *)v13 - 1) = v14;
        v13 -= 8;
      }
      while (v5 != v7);
      v5 = (_QWORD *)a1[22];
    }
    a1[22] = v13;
    a1[23] = v6;
    a1[24] = &v12[8 * v11];
    if (v5)
      operator delete(v5);
  }
  else
  {
    *v5 = a2;
    v6 = v5 + 1;
  }
  a1[23] = v6;
}

uint64_t sub_20B9065C0(int a1, char *__s)
{
  unsigned __int8 v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v8;
  void **v9;
  void *__p[2];
  char v11;
  int v12;
  _QWORD v13[3];
  int v14;
  _QWORD v15[3];
  int v16;
  _QWORD v17[3];
  int v18;
  _QWORD v19[3];
  int v20;
  _QWORD v21[3];
  int v22;
  _QWORD v23[3];
  int v24;
  _QWORD v25[3];
  int v26;
  _QWORD v27[3];
  int v28;
  _QWORD v29[3];
  int v30;
  _QWORD v31[3];
  int v32;
  _QWORD v33[3];
  int v34;
  _QWORD v35[3];
  int v36;
  _QWORD v37[3];
  int v38;
  _QWORD v39[3];
  int v40;
  _QWORD v41[3];
  int v42;
  _QWORD v43[3];
  int v44;
  _QWORD v45[3];
  int v46;
  _QWORD v47[3];
  int v48;
  _QWORD v49[3];
  int v50;
  _QWORD v51[3];
  int v52;
  _QWORD v53[3];
  int v54;
  _QWORD v55[3];
  int v56;
  _QWORD v57[3];
  int v58;
  _QWORD v59[3];
  int v60;
  _QWORD v61[3];
  int v62;
  _QWORD v63[3];
  int v64;
  _QWORD v65[3];
  int v66;
  _QWORD v67[3];
  int v68;
  _QWORD v69[3];
  int v70;
  _QWORD v71[3];
  int v72;
  _QWORD v73[3];
  int v74;
  _QWORD v75[3];
  int v76;
  _QWORD v77[3];
  int v78;
  _QWORD v79[3];
  int v80;
  _QWORD v81[3];
  int v82;
  _QWORD v83[3];
  int v84;
  _QWORD v85[3];
  int v86;
  _QWORD v87[3];
  int v88;
  _QWORD v89[3];
  int v90;
  _QWORD v91[3];
  int v92;
  _QWORD v93[3];
  int v94;
  _QWORD v95[3];
  int v96;
  _QWORD v97[3];
  int v98;
  _QWORD v99[3];
  int v100;
  _QWORD v101[3];
  int v102;
  _QWORD v103[3];
  int v104;
  _QWORD v105[3];
  int v106;
  _QWORD v107[3];
  int v108;
  _QWORD v109[3];
  int v110;
  _QWORD v111[3];
  int v112;
  _QWORD v113[3];
  int v114;
  _QWORD v115[3];
  int v116;
  _QWORD v117[3];
  int v118;
  _QWORD v119[3];
  int v120;
  _QWORD v121[3];
  int v122;
  _QWORD v123[3];
  int v124;
  _QWORD v125[3];
  int v126;
  _QWORD v127[3];
  int v128;
  _QWORD v129[3];
  int v130;
  _QWORD v131[3];
  int v132;
  _QWORD v133[3];
  int v134;
  _QWORD v135[3];
  int v136;
  _QWORD v137[3];
  int v138;
  _QWORD v139[3];
  int v140;
  _QWORD v141[3];
  int v142;
  _QWORD v143[3];
  int v144;
  _QWORD v145[3];
  int v146;
  _QWORD v147[3];
  int v148;
  _QWORD v149[3];
  int v150;
  _QWORD v151[3];
  int v152;
  _QWORD v153[3];
  int v154;
  _QWORD v155[3];
  int v156;
  _QWORD v157[3];
  int v158;
  _QWORD v159[3];
  int v160;
  _QWORD v161[3];
  int v162;
  _QWORD v163[3];
  int v164;
  _QWORD v165[3];
  int v166;
  _QWORD v167[3];
  int v168;
  _QWORD v169[3];
  int v170;
  _QWORD v171[3];
  int v172;
  _QWORD v173[3];
  int v174;
  _QWORD v175[3];
  int v176;
  _QWORD v177[3];
  int v178;
  _QWORD v179[3];
  int v180;
  _QWORD v181[3];
  int v182;
  _QWORD v183[3];
  int v184;
  _QWORD v185[3];
  int v186;
  _QWORD v187[3];
  int v188;
  _QWORD v189[3];
  int v190;
  _QWORD v191[3];
  int v192;
  _QWORD v193[3];
  int v194;
  _QWORD v195[3];
  int v196;
  _QWORD v197[3];
  int v198;
  _QWORD v199[3];
  int v200;
  _QWORD v201[3];
  int v202;
  _QWORD v203[3];
  int v204;
  _QWORD v205[3];
  int v206;
  _QWORD v207[3];
  int v208;
  _QWORD v209[3];
  int v210;
  _QWORD v211[3];
  int v212;
  _QWORD v213[3];
  int v214;
  _QWORD v215[3];
  int v216;
  _QWORD v217[3];
  int v218;
  _QWORD v219[3];
  int v220;
  _QWORD v221[3];
  int v222;
  _QWORD v223[3];
  int v224;
  _QWORD v225[3];
  int v226;
  _QWORD v227[3];
  int v228;
  _QWORD v229[3];
  int v230;
  _QWORD v231[3];
  int v232;
  _QWORD v233[3];
  int v234;
  _QWORD v235[3];
  int v236;
  _QWORD v237[3];
  int v238;
  _QWORD v239[3];
  int v240;
  _QWORD v241[3];
  int v242;
  _QWORD v243[3];
  int v244;
  _QWORD v245[3];
  int v246;
  _QWORD v247[3];
  int v248;
  _QWORD v249[3];
  int v250;
  _QWORD v251[3];
  int v252;
  _QWORD v253[3];
  int v254;
  _QWORD v255[3];
  int v256;
  _QWORD v257[3];
  int v258;
  uint64_t v259;

  v259 = *MEMORY[0x24BDAC8D0];
  v3 = atomic_load((unsigned __int8 *)&qword_25472B6E0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25472B6E0))
  {
    sub_20B80BBD0(__p, "ml");
    v12 = 0;
    sub_20B80BBD0(v13, "mn");
    v14 = 1;
    sub_20B80BBD0(v15, "qw");
    v16 = 2;
    sub_20B80BBD0(v17, "qa");
    v18 = 3;
    sub_20B80BBD0(v19, "wq");
    v20 = 4;
    sub_20B80BBD0(v21, "we");
    v22 = 5;
    sub_20B80BBD0(v23, "wa");
    v24 = 6;
    sub_20B80BBD0(v25, "ws");
    v26 = 7;
    sub_20B80BBD0(v27, "ew");
    v28 = 8;
    sub_20B80BBD0(v29, "er");
    v30 = 9;
    sub_20B80BBD0(v31, "es");
    v32 = 10;
    sub_20B80BBD0(v33, "ed");
    v34 = 11;
    sub_20B80BBD0(v35, "re");
    v36 = 12;
    sub_20B80BBD0(v37, "rt");
    v38 = 13;
    sub_20B80BBD0(v39, "rd");
    v40 = 14;
    sub_20B80BBD0(v41, "rf");
    v42 = 15;
    sub_20B80BBD0(v43, "tr");
    v44 = 16;
    sub_20B80BBD0(v45, "ty");
    v46 = 17;
    sub_20B80BBD0(v47, "tf");
    v48 = 18;
    sub_20B80BBD0(v49, "tg");
    v50 = 19;
    sub_20B80BBD0(v51, "yt");
    v52 = 20;
    sub_20B80BBD0(v53, "yu");
    v54 = 21;
    sub_20B80BBD0(v55, "yg");
    v56 = 22;
    sub_20B80BBD0(v57, "yh");
    v58 = 23;
    sub_20B80BBD0(v59, "uy");
    v60 = 24;
    sub_20B80BBD0(v61, "ui");
    v62 = 25;
    sub_20B80BBD0(v63, "uh");
    v64 = 26;
    sub_20B80BBD0(v65, "uj");
    v66 = 27;
    sub_20B80BBD0(v67, "iu");
    v68 = 28;
    sub_20B80BBD0(v69, "io");
    v70 = 29;
    sub_20B80BBD0(v71, "ij");
    v72 = 30;
    sub_20B80BBD0(v73, "ik");
    v74 = 31;
    sub_20B80BBD0(v75, "oi");
    v76 = 32;
    sub_20B80BBD0(v77, "op");
    v78 = 33;
    sub_20B80BBD0(v79, "ok");
    v80 = 34;
    sub_20B80BBD0(v81, "ol");
    v82 = 35;
    sub_20B80BBD0(v83, "po");
    v84 = 36;
    sub_20B80BBD0(v85, "pl");
    v86 = 37;
    sub_20B80BBD0(v87, "aq");
    v88 = 38;
    sub_20B80BBD0(v89, "aw");
    v90 = 39;
    sub_20B80BBD0(v91, "as");
    v92 = 40;
    sub_20B80BBD0(v93, "az");
    v94 = 41;
    sub_20B80BBD0(v95, "sw");
    v96 = 42;
    sub_20B80BBD0(v97, "se");
    v98 = 43;
    sub_20B80BBD0(v99, "sa");
    v100 = 44;
    sub_20B80BBD0(v101, "sd");
    v102 = 45;
    sub_20B80BBD0(v103, "sz");
    v104 = 46;
    sub_20B80BBD0(v105, "sx");
    v106 = 47;
    sub_20B80BBD0(v107, "de");
    v108 = 48;
    sub_20B80BBD0(v109, "dr");
    v110 = 49;
    sub_20B80BBD0(v111, "ds");
    v112 = 50;
    sub_20B80BBD0(v113, "df");
    v114 = 51;
    sub_20B80BBD0(v115, "dz");
    v116 = 52;
    sub_20B80BBD0(v117, "dx");
    v118 = 53;
    sub_20B80BBD0(v119, "dc");
    v120 = 54;
    sub_20B80BBD0(v121, "fr");
    v122 = 55;
    sub_20B80BBD0(v123, "ft");
    v124 = 56;
    sub_20B80BBD0(v125, "fd");
    v126 = 57;
    sub_20B80BBD0(v127, "fg");
    v128 = 58;
    sub_20B80BBD0(v129, "fx");
    v130 = 59;
    sub_20B80BBD0(v131, "fc");
    v132 = 60;
    sub_20B80BBD0(v133, "fv");
    v134 = 61;
    sub_20B80BBD0(v135, "gt");
    v136 = 62;
    sub_20B80BBD0(v137, "gy");
    v138 = 63;
    sub_20B80BBD0(v139, "gf");
    v140 = 64;
    sub_20B80BBD0(v141, "gh");
    v142 = 65;
    sub_20B80BBD0(v143, "gc");
    v144 = 66;
    sub_20B80BBD0(v145, "gv");
    v146 = 67;
    sub_20B80BBD0(v147, "gb");
    v148 = 68;
    sub_20B80BBD0(v149, "hy");
    v150 = 69;
    sub_20B80BBD0(v151, "hu");
    v152 = 70;
    sub_20B80BBD0(v153, "hg");
    v154 = 71;
    sub_20B80BBD0(v155, "hj");
    v156 = 72;
    sub_20B80BBD0(v157, "hv");
    v158 = 73;
    sub_20B80BBD0(v159, "hb");
    v160 = 74;
    sub_20B80BBD0(v161, "hn");
    v162 = 75;
    sub_20B80BBD0(v163, "ju");
    v164 = 76;
    sub_20B80BBD0(v165, "ji");
    v166 = 77;
    sub_20B80BBD0(v167, "jh");
    v168 = 78;
    sub_20B80BBD0(v169, "jk");
    v170 = 79;
    sub_20B80BBD0(v171, "jb");
    v172 = 80;
    sub_20B80BBD0(v173, "jn");
    v174 = 81;
    sub_20B80BBD0(v175, "jm");
    v176 = 82;
    sub_20B80BBD0(v177, "ki");
    v178 = 83;
    sub_20B80BBD0(v179, "ko");
    v180 = 84;
    sub_20B80BBD0(v181, "kj");
    v182 = 85;
    sub_20B80BBD0(v183, "kl");
    v184 = 86;
    sub_20B80BBD0(v185, "kn");
    v186 = 87;
    sub_20B80BBD0(v187, "km");
    v188 = 88;
    sub_20B80BBD0(v189, "lo");
    v190 = 89;
    sub_20B80BBD0(v191, "lp");
    v192 = 90;
    sub_20B80BBD0(v193, "lk");
    v194 = 91;
    sub_20B80BBD0(v195, "lm");
    v196 = 92;
    sub_20B80BBD0(v197, "za");
    v198 = 93;
    sub_20B80BBD0(v199, "zs");
    v200 = 94;
    sub_20B80BBD0(v201, "zd");
    v202 = 95;
    sub_20B80BBD0(v203, "zx");
    v204 = 96;
    sub_20B80BBD0(v205, "xz");
    v206 = 97;
    sub_20B80BBD0(v207, "xc");
    v208 = 98;
    sub_20B80BBD0(v209, "xs");
    v210 = 99;
    sub_20B80BBD0(v211, "xd");
    v212 = 100;
    sub_20B80BBD0(v213, "xf");
    v214 = 101;
    sub_20B80BBD0(v215, "cx");
    v216 = 102;
    sub_20B80BBD0(v217, "cv");
    v218 = 103;
    sub_20B80BBD0(v219, "cd");
    v220 = 104;
    sub_20B80BBD0(v221, "cf");
    v222 = 105;
    sub_20B80BBD0(v223, "cg");
    v224 = 106;
    sub_20B80BBD0(v225, "vf");
    v226 = 107;
    sub_20B80BBD0(v227, "vg");
    v228 = 108;
    sub_20B80BBD0(v229, "vh");
    v230 = 109;
    sub_20B80BBD0(v231, "vc");
    v232 = 110;
    sub_20B80BBD0(v233, "vb");
    v234 = 111;
    sub_20B80BBD0(v235, "bv");
    v236 = 112;
    sub_20B80BBD0(v237, "bn");
    v238 = 113;
    sub_20B80BBD0(v239, "bg");
    v240 = 114;
    sub_20B80BBD0(v241, "bh");
    v242 = 115;
    sub_20B80BBD0(v243, "bj");
    v244 = 116;
    sub_20B80BBD0(v245, "nb");
    v246 = 117;
    sub_20B80BBD0(v247, "nm");
    v248 = 118;
    sub_20B80BBD0(v249, "nh");
    v250 = 119;
    sub_20B80BBD0(v251, "nj");
    v252 = 120;
    sub_20B80BBD0(v253, "nk");
    v254 = 121;
    sub_20B80BBD0(v255, "mj");
    v256 = 122;
    sub_20B80BBD0(v257, "mk");
    v258 = 123;
    sub_20B907D58((uint64_t)qword_25472B6E8, (unsigned __int8 *)__p, 124);
    v8 = 496;
    do
    {
      if (*((char *)&__p[v8 - 1] - 1) < 0)
        operator delete(__p[v8 - 4]);
      v8 -= 4;
    }
    while (v8 * 8);
    __cxa_atexit((void (*)(void *))sub_20B907824, qword_25472B6E8, &dword_20B7F7000);
    __cxa_guard_release(&qword_25472B6E0);
  }
  sub_20B80BBD0(__p, __s);
  v4 = sub_20B87A31C(qword_25472B6E8, (unsigned __int8 *)__p);
  v5 = v4;
  if ((v11 & 0x80000000) == 0)
  {
    if (v4)
      goto LABEL_4;
    return -1;
  }
  operator delete(__p[0]);
  if (!v5)
    return -1;
LABEL_4:
  sub_20B80BBD0(__p, __s);
  v9 = __p;
  v6 = *((unsigned int *)sub_20B9080F0((uint64_t)qword_25472B6E8, (unsigned __int8 *)__p, (uint64_t)&unk_20BA37B7A, (__int128 **)&v9)+ 10);
  if (v11 < 0)
    operator delete(__p[0]);
  return v6;
}

void sub_20B9075B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;
  uint64_t v19;

  v19 = 3968;
  while (1)
  {
    if (*(char *)(v17 + v19 - 9) < 0)
      operator delete(*(void **)(v17 + v19 - 32));
    v19 -= 32;
    if (!v19)
    {
      __cxa_guard_abort(&qword_25472B6E0);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t sub_20B907828(_QWORD *a1, unsigned __int16 **a2)
{
  BOOL v2;
  unsigned __int16 *v4;
  unsigned __int16 *v5;
  unint64_t v6;
  unsigned __int16 *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  size_t v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int16 *v19;
  int v20;
  int v21;
  uint64_t v22;
  unsigned __int16 *v23;
  int v24;
  char v25;
  uint64_t v26;
  const char *v27;
  size_t v28;
  size_t v29;
  uint64_t v30;
  size_t v31;
  char v32;

  v4 = *a2;
  v5 = a2[1];
  if (*a2 == v5)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    v7 = *a2;
    do
    {
      v8 = *v7;
      v7 += 2;
      v6 += strlen((&off_24C4A0588)[2 * v8]);
    }
    while (v7 != v5);
  }
  v9 = a1[4] - a1[3];
  v10 = v6 - (v9 >> 2);
  if (v10 < 0)
    v10 = (v9 >> 2) - v6;
  if ((unint64_t)v10 > 1)
    goto LABEL_9;
  v12 = v9 >> 2;
  if (v6 >= v9 >> 2)
  {
    if (v4 == v5)
    {
LABEL_40:
      v32 = 1;
    }
    else
    {
      v26 = 0;
      while (1)
      {
        v27 = (&off_24C4A0588)[2 * *v4];
        v28 = strlen(v27);
        v29 = v28;
        if (v28)
          break;
LABEL_39:
        v26 += v29;
        v4 += 2;
        if (v4 == v5)
          goto LABEL_40;
      }
      v30 = v26;
      v31 = v28;
      while (1)
      {
        v2 = v12 == v30;
        if (v12 == v30 || (sub_20B948194(*(_QWORD *)(a1[22] + 8 * v30), *v27) & 1) == 0)
          break;
        ++v27;
        ++v30;
        if (!--v31)
          goto LABEL_39;
      }
      v32 = 0;
    }
    LOBYTE(v11) = v32 | v2;
  }
  else
  {
    if (v4 == v5)
    {
LABEL_9:
      LOBYTE(v11) = 0;
      return v11 & 1;
    }
    v13 = 0;
    while (1)
    {
      v14 = (&off_24C4A0588)[2 * *v4];
      v15 = strlen(v14);
      if (v15)
        break;
LABEL_30:
      LOBYTE(v11) = 0;
      v4 += 2;
      if (v4 == v5)
        return v11 & 1;
    }
    v16 = v15;
    v17 = a1[22];
    while (1)
    {
      v18 = *(_QWORD *)(v17 + 8 * v13);
      v19 = *(unsigned __int16 **)(v18 + 8);
      if (v19 == *(unsigned __int16 **)(v18 + 16))
        v20 = 0;
      else
        v20 = *v19;
      v21 = v20 << 24;
      if ((v20 & 0xFB) == 0x61 || v21 == 1862270976)
      {
        if (v13 + 1 != (a1[23] - v17) >> 3)
        {
          v22 = *(_QWORD *)(v17 + 8 * (v13 + 1));
          v23 = *(unsigned __int16 **)(v22 + 8);
          if (v23 == *(unsigned __int16 **)(v22 + 16))
            v24 = 0;
          else
            v24 = *v23;
          if (v21 == v24 << 24)
            ++v13;
        }
        v18 = *(_QWORD *)(v17 + 8 * v13);
      }
      v25 = *v14++;
      v11 = sub_20B948194(v18, v25);
      if (!v11)
        break;
      ++v13;
      v17 = a1[22];
      if (v13 == (a1[23] - v17) >> 3)
        break;
      if (!--v16)
        goto LABEL_30;
    }
  }
  return v11 & 1;
}

void sub_20B907A54(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int **v8;
  int *v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  _WORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  unint64_t v30;
  void *__p[2];
  uint64_t v32;
  _QWORD v33[5];

  v2 = *a2;
  if (a2[1] != *a2)
  {
    v5 = 0;
    v6 = a1 + 6;
    v7 = (uint64_t)(a1 + 8);
    do
    {
      v8 = (int **)(v2 + 32 * v5);
      if (*v8 != v8[1])
      {
        if (!(*(unsigned int (**)(uint64_t *))(*a1 + 104))(a1))
          return;
        if ((*(unsigned int (**)(uint64_t *, int **))(*a1 + 96))(a1, v8))
        {
          sub_20B80FC98(__p, v8[1] - *v8);
          v9 = *v8;
          v10 = __p[0];
          v11 = (char *)v8[1] - (char *)*v8;
          if (v11)
          {
            v12 = v11 >> 2;
            if (v12 <= 1)
              v12 = 1;
            v13 = __p[0];
            do
            {
              v14 = *v9++;
              *v13++ = v14;
              --v12;
            }
            while (v12);
          }
          v15 = (char *)__p[1] - (char *)v10;
          if (a1[9] <= (unint64_t)(v15 >> 1))
            v16 = v15 >> 1;
          else
            v16 = a1[9];
          a1[9] = v16;
          v17 = v8[3];
          v18 = (_QWORD *)a1[7];
          v19 = a1[8];
          if ((unint64_t)v18 >= v19)
          {
            v21 = ((uint64_t)v18 - *v6) >> 5;
            v22 = v21 + 1;
            if ((unint64_t)(v21 + 1) >> 59)
              sub_20B80CDD8();
            v23 = v19 - *v6;
            if (v23 >> 4 > v22)
              v22 = v23 >> 4;
            if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFE0)
              v24 = 0x7FFFFFFFFFFFFFFLL;
            else
              v24 = v22;
            v33[4] = v7;
            v25 = (char *)sub_20B8156D4(v7, v24);
            v26 = &v25[32 * v21];
            v33[0] = v25;
            v33[1] = v26;
            v33[3] = &v25[32 * v27];
            *(_QWORD *)v26 = 0;
            *((_QWORD *)v26 + 1) = 0;
            *((_QWORD *)v26 + 2) = 0;
            *(_OWORD *)v26 = *(_OWORD *)__p;
            *((_QWORD *)v26 + 2) = v32;
            __p[0] = 0;
            __p[1] = 0;
            v32 = 0;
            *((_QWORD *)v26 + 3) = v17;
            v33[2] = v26 + 32;
            sub_20B8851A8(v6, v33);
            v28 = a1[7];
            sub_20B83D17C((uint64_t)v33);
            v29 = __p[0];
            a1[7] = v28;
            v30 = v28 - a1[6];
            if (v29)
            {
              __p[1] = v29;
              operator delete(v29);
              if (v30 >= 0x41)
                return;
            }
            else if (v30 > 0x40)
            {
              return;
            }
          }
          else
          {
            *v18 = 0;
            v18[1] = 0;
            v18[2] = 0;
            *(_OWORD *)v18 = *(_OWORD *)__p;
            v18[2] = v32;
            v18[3] = v17;
            v20 = v18 + 4;
            a1[7] = (uint64_t)v20;
            if ((unint64_t)v20 - a1[6] >= 0x41)
              return;
          }
        }
      }
      ++v5;
      v2 = *a2;
    }
    while (v5 < (a2[1] - *a2) >> 5);
  }
}

void sub_20B907CA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B907CD4(_QWORD *a1)
{
  sub_20B907D14(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B907CF8(uint64_t a1)
{
  return a1 + 144;
}

BOOL sub_20B907D00(uint64_t a1, double a2, double a3)
{
  return a3 - *(double *)(a1 + 200) <= a2;
}

uint64_t sub_20B907D14(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24C468028;
  v2 = (void *)a1[22];
  if (v2)
  {
    a1[23] = v2;
    operator delete(v2);
  }
  sub_20B924608((uint64_t)(a1 + 18));
  return sub_20B9063DC((uint64_t)a1);
}

uint64_t sub_20B907D58(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 32 * a3;
    do
    {
      sub_20B907DCC(a1, a2, (uint64_t)a2);
      a2 += 32;
      v5 -= 32;
    }
    while (v5);
  }
  return a1;
}

void sub_20B907DB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B8CECB0(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_20B907DCC(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = sub_20B828414(a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((sub_20B8288BC(a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  sub_20B908048(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_20B828960(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_20B908024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    sub_20B828B94((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

_BYTE *sub_20B908048@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  _BYTE *result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x30uLL);
  *(_QWORD *)(a4 + 8) = v7;
  *(_QWORD *)a4 = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  result = v8 + 16;
  if (*(char *)(a3 + 23) < 0)
  {
    result = sub_20B80ACE0(result, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)a3;
    *((_QWORD *)v8 + 4) = *(_QWORD *)(a3 + 16);
  }
  *((_DWORD *)v8 + 10) = *(_DWORD *)(a3 + 24);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_20B9080D4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_20B828B94(v3, v2);
  _Unwind_Resume(a1);
}

void *sub_20B9080F0(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  void **v14;
  void *i;
  unint64_t v16;
  _QWORD *v17;
  __int128 *v18;
  __int128 v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;

  v8 = (_QWORD *)(a1 + 24);
  v9 = sub_20B828414(a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(void **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((sub_20B8288BC(a1 + 32, (unsigned __int8 *)i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = (_QWORD *)(a1 + 16);
  i = operator new(0x30uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v10;
  v18 = *a4;
  v19 = **a4;
  *((_QWORD *)i + 4) = *((_QWORD *)*a4 + 2);
  *((_OWORD *)i + 1) = v19;
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = 0;
  *(_QWORD *)v18 = 0;
  *((_DWORD *)i + 10) = 0;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    sub_20B828960(a1, v25);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v27)
  {
    *(_QWORD *)i = *v27;
LABEL_38:
    *v27 = i;
    goto LABEL_39;
  }
  *(_QWORD *)i = *v17;
  *v17 = i;
  *(_QWORD *)(v26 + 8 * v4) = v17;
  if (*(_QWORD *)i)
  {
    v28 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11)
        v28 %= v11;
    }
    else
    {
      v28 &= v11 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_38;
  }
LABEL_39:
  ++*v8;
  return i;
}

void sub_20B90835C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  uint64_t v11;

  sub_20B828B94(v11, v10);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B908378(uint64_t *a1, _DWORD *a2)
{
  uint64_t v4;

  if (a2)
  {
    v4 = *(_QWORD *)(sub_20B902644() + 8 * (*a2 & 3));
    (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)v4 + 32))(v4, a2);
  }
  else
  {
    sub_20B902128(a1, 0);
  }
  return a1;
}

_DWORD **sub_20B9083D0(_DWORD **result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _DWORD **v7;
  uint64_t v8;

  if (a2)
  {
    v7 = result;
    v8 = *(_QWORD *)(sub_20B902644() + 8 * (**result & 3));
    return (_DWORD **)(*(uint64_t (**)(uint64_t, uint64_t, _DWORD **, _QWORD, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v8 + 24))(v8, a2, v7, 0, a3, 0, a4);
  }
  return result;
}

_DWORD **sub_20B90843C(_DWORD **result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _DWORD **v9;
  uint64_t v10;

  if (a2)
  {
    v9 = result;
    v10 = *(_QWORD *)(sub_20B902644() + 8 * (**result & 3));
    return (_DWORD **)(*(uint64_t (**)(uint64_t, uint64_t, _DWORD **, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 24))(v10, a2, v9, 0, a3, a4, a5);
  }
  return result;
}

uint64_t sub_20B9084B4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20B9084C4(_QWORD *a1)
{
  uint64_t i;
  uint64_t v3;

  for (i = a1[1]; ; i = a1[1])
  {
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)i + 48))(i);
    if (!v3 || !(*(unsigned int (**)(_QWORD *, uint64_t))(*a1 + 40))(a1, v3))
      break;
  }
  return v3;
}

uint64_t sub_20B90851C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

BOOL sub_20B90852C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return 0;
  v4 = (_QWORD *)(v3 + 24);
  v6 = objc_msgSend_rawCandidate(a2, (const char *)a2, a3);
  return sub_20B8CD218(v4, &v6) != 0;
}

_QWORD *sub_20B908580(_QWORD *a1, uint64_t a2, uint64_t a3, void *aBlock)
{
  *a1 = &off_24C465218;
  a1[1] = a2;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = a3;
  a1[5] = _Block_copy(aBlock);
  return a1;
}

void sub_20B9085C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B9085E4(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C465218;
  _Block_release(*(const void **)(a1 + 40));
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20B908638(uint64_t a1)
{
  sub_20B9085E4(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B90865C(uint64_t a1)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B908694(uint64_t a1)
{
  uint64_t result;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8));
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  return result;
}

uint64_t sub_20B9086D4(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = (_QWORD *)(a1 + 24);
  v2 = *(_QWORD *)(a1 + 24);
  if (!v2)
  {
    v2 = sub_20B9084C4((_QWORD *)a1);
    *(_QWORD *)(a1 + 24) = v2;
  }
  v5 = (_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (v2)
      goto LABEL_5;
LABEL_11:
    if (!v4)
      return v4;
    goto LABEL_14;
  }
  v4 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), v2);
  *(_QWORD *)(a1 + 32) = v4;
  v2 = *(_QWORD *)(a1 + 24);
  if (!v2)
    goto LABEL_11;
LABEL_5:
  if (v4)
  {
    v6 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    v7 = 24;
    if (v6 == 1)
      v7 = 32;
    else
      v5 = v3;
    v4 = *(_QWORD *)(a1 + v7);
  }
  else
  {
    v5 = v3;
    v4 = v2;
  }
LABEL_14:
  *v5 = 0;
  return v4;
}

void sub_20B908790()
{
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B9087A4()
{
  return 0;
}

void sub_20B9087B0()
{
  JUMPOUT(0x20BD39CB0);
}

CFURLRef sub_20B9087C4(const __CFURL *a1)
{
  CFStringRef PathComponent;
  const __CFString *v3;
  const __CFURL *v4;
  CFURLRef v5;

  PathComponent = CFURLCopyLastPathComponent(a1);
  v3 = CFStringCreateWithFormat(0, 0, CFSTR(".%@.lock"), PathComponent);
  CFRelease(PathComponent);
  v4 = CFURLCreateCopyDeletingLastPathComponent(0, a1);
  v5 = CFURLCreateCopyAppendingPathComponent(0, v4, v3, 0);
  CFRelease(v4);
  CFRelease(v3);
  return v5;
}

uint64_t sub_20B908858(const __CFURL *a1)
{
  const __CFURL *v1;
  char *v2;
  uint64_t v3;

  v1 = sub_20B9087C4(a1);
  v2 = sub_20B9088C8(v1);
  CFRelease(v1);
  v3 = open(v2, 514, 420);
  if (v2)
    MEMORY[0x20BD39C80](v2, 0x1000C8077774924);
  return v3;
}

char *sub_20B9088C8(const __CFURL *a1)
{
  const __CFURL *v1;
  const __CFString *v2;
  CFIndex Length;
  CFIndex MaximumSizeForEncoding;
  char *v5;

  v1 = CFURLCopyAbsoluteURL(a1);
  v2 = CFURLCopyFileSystemPath(v1, kCFURLPOSIXPathStyle);
  CFRelease(v1);
  if (!v2)
    return 0;
  Length = CFStringGetLength(v2);
  MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
  v5 = (char *)operator new[]();
  LODWORD(MaximumSizeForEncoding) = CFStringGetFileSystemRepresentation(v2, v5, MaximumSizeForEncoding);
  CFRelease(v2);
  if (!(_DWORD)MaximumSizeForEncoding)
  {
    MEMORY[0x20BD39C80](v5, 0x1000C8077774924);
    return 0;
  }
  return v5;
}

const __CFString *sub_20B90897C(int a1)
{
  const __CFString *v1;

  v1 = CFSTR("completion-learning-dictionary-zh-Hant");
  if (a1 != 2)
    v1 = 0;
  if (a1 == 1)
    return CFSTR("completion-learning-dictionary-zh-Hans");
  else
    return v1;
}

const __CFString *sub_20B9089A0(int a1)
{
  const __CFString *v1;

  v1 = CFSTR("completion-learning-zh-Hant.dictionary");
  if (a1 != 2)
    v1 = 0;
  if (a1 == 1)
    return CFSTR("completion-learning-zh-Hans.dictionary");
  else
    return v1;
}

void sub_20B9089C4(uint64_t **a1, const void *a2, uint64_t a3, __int128 *a4)
{
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  void *__p[2];
  char v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count_vtbl *v19;
  std::__shared_weak_count *v20;

  v8 = (std::__shared_weak_count_vtbl *)operator new();
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&unk_24C45FAC8;
  v8->__on_zero_shared = 0;
  v8->__get_deleter = 0;
  v8->~__shared_weak_count_0 = 0;
  sub_20B909D70(&v8->~__shared_weak_count_0, a2, (uint64_t)a2 + 2 * a3, (2 * a3) >> 1);
  v19 = v8;
  v9 = (std::__shared_weak_count *)operator new();
  v9->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C46BBB0;
  v9->__shared_owners_ = 0;
  v9->__shared_weak_owners_ = 0;
  v9[1].__vftable = v8;
  v20 = v9;
  sub_20B909DE8(__p, a4, &v19);
  sub_20B90B7C4(a1, __p, (uint64_t)__p);
  v10 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v17 < 0)
    operator delete(__p[0]);
  v13 = v20;
  if (v20)
  {
    v14 = (unint64_t *)&v20->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_20B908B1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  sub_20B908B78((uint64_t)va);
  sub_20B811FE4((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B908B78(uint64_t a1)
{
  sub_20B811FE4(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20B908BB0(uint64_t **a1, CFStringRef theString, __int128 *a3)
{
  CFIndex Length;
  UniChar *buffer;
  UniChar *v8;
  uint64_t v9;
  CFRange v10;

  buffer = 0;
  v8 = 0;
  v9 = 0;
  Length = CFStringGetLength(theString);
  sub_20B87C6B4((uint64_t)&buffer, Length);
  v10.location = 0;
  v10.length = Length;
  CFStringGetCharacters(theString, v10, buffer);
  sub_20B9089C4(a1, buffer, v8 - buffer, a3);
  if (buffer)
  {
    v8 = buffer;
    operator delete(buffer);
  }
}

void sub_20B908C40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B908C5C(uint64_t **a1, int a2, __int128 *a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  void *__p[2];
  char v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  v6 = operator new();
  *(_QWORD *)v6 = &unk_24C45FBF0;
  *(_DWORD *)(v6 + 8) = a2;
  v17 = v6;
  v7 = (std::__shared_weak_count *)operator new();
  v7->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C46BBE8;
  v7->__shared_owners_ = 0;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)v6;
  v18 = v7;
  sub_20B909DE8(__p, a3, &v17);
  sub_20B90B7C4(a1, __p, (uint64_t)__p);
  v8 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v15 < 0)
    operator delete(__p[0]);
  v11 = v18;
  if (v18)
  {
    v12 = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_20B908D94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  sub_20B908B78((uint64_t)va);
  sub_20B811FE4((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B908DD0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_20B908DDC(uint64_t *a1, _QWORD *a2, unsigned __int16 ***a3, uint64_t a4)
{
  uint64_t v6;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  int v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned __int16 *v25;
  BOOL v26;
  unint64_t v27;
  uint64_t v28;
  BOOL v29;
  int v30;
  unint64_t v31;
  _WORD *v32;
  _WORD *v33;
  _WORD *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  __int16 v42;
  uint64_t v44;
  char *__p;
  char *v48;
  char *v49;

  __p = 0;
  v48 = 0;
  v49 = 0;
  v6 = *a1;
  if (a1[1] == *a1)
  {
    v21 = 0;
    v8 = 0;
    v10 = 0;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    LODWORD(v10) = 0;
    do
    {
      v11 = *(unsigned __int16 *)(v6 + 2 * v9) - 48;
      if (v8 >= v49)
      {
        v12 = __p;
        v13 = (v8 - __p) >> 2;
        v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 62)
          sub_20B80CDD8();
        v15 = v49 - __p;
        if ((v49 - __p) >> 1 > v14)
          v14 = v15 >> 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
          v16 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v16 = v14;
        if (v16)
        {
          v17 = (char *)sub_20B8127BC((uint64_t)&v49, v16);
          v12 = __p;
          v8 = v48;
        }
        else
        {
          v17 = 0;
        }
        v18 = &v17[4 * v13];
        *(_DWORD *)v18 = v11;
        v19 = v18 + 4;
        while (v8 != v12)
        {
          v20 = *((_DWORD *)v8 - 1);
          v8 -= 4;
          *((_DWORD *)v18 - 1) = v20;
          v18 -= 4;
        }
        __p = v18;
        v49 = &v17[4 * v16];
        if (v12)
          operator delete(v12);
        v8 = v19;
      }
      else
      {
        *(_DWORD *)v8 = v11;
        v8 += 4;
      }
      v48 = v8;
      v10 = v11 + (int)v10;
      ++v9;
      v6 = *a1;
    }
    while (v9 < (a1[1] - *a1) >> 1);
    v21 = __p;
  }
  if (a2[1] - *a2 == v10)
  {
    v22 = (unint64_t)(v8 - v21) >> 2;
    v23 = (v22 - 1);
    if ((int)v22 - 1 < 0)
    {
      v44 = 1;
      if (!v21)
        return v44;
      goto LABEL_59;
    }
    while (1)
    {
      v21 = __p;
      v24 = *(int *)&__p[4 * v23];
      v10 -= v24;
      v25 = **a3;
      if ((_DWORD)v24)
        v26 = v25 == 0;
      else
        v26 = 1;
      if (!v26)
      {
        v27 = 0;
        v28 = *a2 + v10;
        do
        {
          v25 = sub_20B9F17AC((uint64_t)a3, v25, *(char *)(v28 + v27++));
          if (v25)
            v29 = v27 >= v24;
          else
            v29 = 1;
        }
        while (!v29);
      }
      if (!v25)
        break;
      v30 = v25[1];
      if (v30 == 0xFFFF)
        break;
      v32 = *(_WORD **)(a4 + 8);
      v31 = *(_QWORD *)(a4 + 16);
      if ((unint64_t)v32 >= v31)
      {
        v34 = *(_WORD **)a4;
        v35 = (uint64_t)v32 - *(_QWORD *)a4;
        if (v35 <= -3)
          sub_20B80CDD8();
        v36 = v35 >> 1;
        v37 = v31 - (_QWORD)v34;
        if (v37 <= (v35 >> 1) + 1)
          v38 = v36 + 1;
        else
          v38 = v37;
        if (v37 >= 0x7FFFFFFFFFFFFFFELL)
          v39 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v39 = v38;
        if (v39)
        {
          v40 = (char *)sub_20B80FD48(a4 + 16, v39);
          v34 = *(_WORD **)a4;
          v32 = *(_WORD **)(a4 + 8);
          LOWORD(v30) = v25[1];
        }
        else
        {
          v40 = 0;
        }
        v41 = &v40[2 * v36];
        *(_WORD *)v41 = v30;
        v33 = v41 + 2;
        while (v32 != v34)
        {
          v42 = *--v32;
          *((_WORD *)v41 - 1) = v42;
          v41 -= 2;
        }
        *(_QWORD *)a4 = v41;
        *(_QWORD *)(a4 + 8) = v33;
        *(_QWORD *)(a4 + 16) = &v40[2 * v39];
        if (v34)
          operator delete(v34);
      }
      else
      {
        *v32 = v30;
        v33 = v32 + 1;
      }
      *(_QWORD *)(a4 + 8) = v33;
      if (v23-- <= 0)
      {
        v44 = 1;
        v21 = __p;
        if (__p)
          goto LABEL_59;
        return v44;
      }
    }
  }
  v44 = 0;
  if (v21)
LABEL_59:
    operator delete(v21);
  return v44;
}

void sub_20B9090BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_20B9090E4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_20B909128(a1);
  return !v2 || v2 == sub_20B9091E0(a1);
}

uint64_t sub_20B909128(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  unsigned __int16 *v4;
  unsigned __int16 *v5;
  uint64_t result;
  unsigned int v7;
  void *__p[2];
  char v9;

  sub_20B80BBD0(__p, off_254729288[0]);
  v2 = sub_20B871B2C(a1, __p);
  if (v9 < 0)
    operator delete(__p[0]);
  if ((void **)(a1 + 8) == v2)
    return 0;
  v3 = (*(uint64_t (**)(void *))(*(_QWORD *)v2[7] + 16))(v2[7]);
  v4 = *(unsigned __int16 **)v3;
  v5 = *(unsigned __int16 **)(v3 + 8);
  if (*(unsigned __int16 **)v3 == v5)
    return 0;
  result = 0;
  do
  {
    v7 = *v4++;
    result = result + v7 - 48;
  }
  while (v4 != v5);
  return result;
}

void sub_20B9091C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B9091E0(uint64_t a1)
{
  void **v2;
  _QWORD *v3;
  void *__p[2];
  char v6;

  sub_20B80BBD0(__p, off_2547292D0);
  v2 = sub_20B871B2C(a1, __p);
  if (v6 < 0)
    operator delete(__p[0]);
  v3 = (_QWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v2[7] + 16))(v2[7]);
  return (uint64_t)(v3[1] - *v3) >> 1;
}

void sub_20B909250(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B90926C(uint64_t a1, unsigned __int16 ***a2, char a3, void **a4, _BYTE *a5)
{
  void **v10;
  uint64_t *v11;
  void **v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19[2];
  void *v20;
  void *__p;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;

  *a5 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  sub_20B80BBD0(&__p, off_2547292C8[0]);
  v10 = sub_20B871B2C(a1, &__p);
  if (SHIBYTE(v23) < 0)
    operator delete(__p);
  v11 = (uint64_t *)(*(uint64_t (**)(void *))(*(_QWORD *)v10[7] + 16))(v10[7]);
  __p = 0;
  v22 = 0;
  v23 = 0;
  sub_20B80BBD0(v19, off_254729260);
  v12 = sub_20B871B2C(a1, v19);
  if (SHIBYTE(v20) < 0)
    operator delete(v19[0]);
  if ((void **)(a1 + 8) == v12
    || (v13 = (*(uint64_t (**)(void *))(*(_QWORD *)v12[7] + 16))(v12[7]), &__p == (void **)v13)
    || (sub_20B886194((char *)&__p, *(char **)v13, *(_QWORD *)(v13 + 8), (uint64_t)(*(_QWORD *)(v13 + 8) - *(_QWORD *)v13) >> 1), v22 == __p)|| (sub_20BA1AEE8(v11, &v24, a3) & 1) == 0|| (v14 = sub_20B908DDC((uint64_t *)&__p, &v24, a2, (uint64_t)a4), *a5 = v14, (v14 & 1) == 0))
  {
    v16 = *v11;
    v15 = v11[1];
    v17 = (v15 - *v11) >> 1;
    v19[1] = 0;
    v20 = 0;
    v19[0] = 0;
    sub_20B90A210((char *)v19, v15, v15, v16, v16, v17);
    v18 = *a4;
    if (*a4)
    {
      a4[1] = v18;
      operator delete(v18);
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
    }
    *(_OWORD *)a4 = *(_OWORD *)v19;
    a4[2] = v20;
  }
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
  if (v24)
  {
    v25 = v24;
    operator delete(v24);
  }
}

void sub_20B90944C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  if (a22)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B9094B8(CFDictionaryRef theDict, unsigned __int16 ***a2, void **a3, int a4, _BYTE *a5)
{
  char v6;
  uint64_t result;
  const void **v11;
  const void **v12;
  const __CFString *Value;
  const __CFString *v14;
  BOOL v15;
  const __CFString *v16;
  int v18;
  void *v19;
  __int128 v20;
  void *v21;
  void *__p[3];
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  _BYTE *v27;

  v6 = a4;
  *a5 = 0;
  if (a4)
  {
    result = CFDictionaryContainsKey(theDict, off_254729268);
    if (!(_DWORD)result)
      return result;
    v11 = (const void **)&off_254729270;
    result = CFDictionaryContainsKey(theDict, off_254729270);
    if (!(_DWORD)result)
      return result;
    v12 = (const void **)&off_254729268;
  }
  else
  {
    result = CFDictionaryContainsKey(theDict, off_254729278);
    if (!(_DWORD)result)
      return result;
    v11 = (const void **)&off_254729280;
    result = CFDictionaryContainsKey(theDict, off_254729280);
    if (!(_DWORD)result)
      return result;
    v12 = (const void **)&off_254729278;
  }
  Value = (const __CFString *)CFDictionaryGetValue(theDict, *v12);
  v14 = (const __CFString *)CFDictionaryGetValue(theDict, *v11);
  if (Value)
    v15 = v14 == 0;
  else
    v15 = 1;
  if (v15)
    return 0;
  v16 = v14;
  sub_20B8D0790(Value, (UniChar **)&v26);
  v23 = 0;
  v24 = 0;
  v25 = 0;
  sub_20B8D0790(v16, (UniChar **)__p);
  if (sub_20BA1AEE8((uint64_t *)&v26, &v23, v6))
  {
    v18 = sub_20B908DDC((uint64_t *)__p, &v23, a2, (uint64_t)a3);
    *a5 = v18;
    if (!v18)
      goto LABEL_18;
  }
  else if (!*a5)
  {
LABEL_18:
    v21 = 0;
    v20 = 0uLL;
    sub_20B90A210((char *)&v20, (uint64_t)v27, (uint64_t)v27, (uint64_t)v26, (uint64_t)v26, (v27 - (_BYTE *)v26) >> 1);
    v19 = *a3;
    if (*a3)
    {
      a3[1] = v19;
      operator delete(v19);
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
    }
    *(_OWORD *)a3 = v20;
    a3[2] = v21;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v23)
  {
    v24 = v23;
    operator delete(v23);
  }
  if (v26)
  {
    v27 = v26;
    operator delete(v26);
  }
  return 1;
}

void sub_20B909688(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  if (a18)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

void sub_20B9096D0(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, unint64_t a3@<X2>, unsigned int a4@<W3>, _QWORD *a5@<X8>)
{
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[5];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  __n128 (*v14)(_QWORD *, uint64_t);
  void (*v15)(uint64_t);
  _QWORD v16[4];
  void **v17;

  v11 = 0;
  v12 = &v11;
  v13 = 0x4002000000;
  v14 = sub_20B909820;
  v15 = sub_20B909844;
  memset(v16, 0, 24);
  if (a1)
  {
    v10[0] = MEMORY[0x24BDAC760];
    v10[1] = 0x40000000;
    v10[2] = sub_20B90986C;
    v10[3] = &unk_24C46CB58;
    v10[4] = &v11;
    sub_20B918630(a1, a2, a3, a4, (uint64_t)v10);
    v6 = v12[5];
    v7 = (_QWORD *)v12[6];
    if (v7 == (_QWORD *)v6)
    {
      v8 = v12[6];
    }
    else
    {
      v17 = (void **)sub_20B90999C;
      sub_20B888650(v6, v7, (uint64_t (**)(uint64_t, uint64_t))&v17, 126 - 2 * __clz((uint64_t)((uint64_t)v7 - v6) >> 5), 1);
      v8 = v12[5];
      v7 = (_QWORD *)v12[6];
    }
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    v9 = ((uint64_t)v7 - v8) >> 5;
  }
  else
  {
    v8 = 0;
    v7 = 0;
    v9 = 0;
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
  }
  sub_20B90A280(a5, v8, (uint64_t)v7, v9);
  _Block_object_dispose(&v11, 8);
  v17 = (void **)v16;
  sub_20B8882B4(&v17);
}

void sub_20B9097FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  uint64_t v8;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  *(_QWORD *)(v8 - 32) = v7;
  sub_20B8882B4((void ***)(v8 - 32));
  _Unwind_Resume(a1);
}

__n128 sub_20B909820(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void sub_20B909844(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 40);
  sub_20B8882B4(&v1);
}

void *sub_20B90986C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  void *result;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  void *v16;
  uint64_t *v17;
  uint64_t *v18;
  char *v19;
  uint64_t v20;

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v6 = *(_QWORD *)(v5 + 48);
  v7 = *(_QWORD *)(v5 + 56);
  if (v6 >= v7)
  {
    v10 = *(_QWORD *)(v5 + 40);
    v11 = (uint64_t)(v6 - v10) >> 5;
    if ((unint64_t)(v11 + 1) >> 59)
      sub_20B88848C();
    v12 = v7 - v10;
    v13 = v12 >> 4;
    if (v12 >> 4 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0)
      v14 = 0x7FFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    v20 = v5 + 56;
    if (v14)
      v15 = (char *)sub_20B8156D4(v5 + 56, v14);
    else
      v15 = 0;
    v16 = v15;
    v17 = (uint64_t *)&v15[32 * v11];
    v18 = v17;
    v19 = &v15[32 * v14];
    *((_DWORD *)sub_20B88A068(v17, a2) + 6) = a3;
    v18 += 4;
    sub_20B888418((uint64_t *)(v5 + 40), &v16);
    v9 = *(_QWORD *)(v5 + 48);
    result = sub_20B8885DC(&v16);
  }
  else
  {
    result = sub_20B88A068(*(uint64_t **)(v5 + 48), a2);
    *(_DWORD *)(v6 + 24) = a3;
    v9 = v6 + 32;
    *(_QWORD *)(v5 + 48) = v6 + 32;
  }
  *(_QWORD *)(v5 + 48) = v9;
  return result;
}

void sub_20B90997C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v11 + 48) = v10;
  _Unwind_Resume(exception_object);
}

BOOL sub_20B90999C(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 24) > *(_DWORD *)(a2 + 24);
}

void sub_20B9099B0(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t *a7@<X8>)
{
  int v8;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];
  _BYTE v22[24];
  _BYTE *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v21[0] = a4;
  v21[1] = a5;
  v20 = a3;
  a7[1] = 0;
  a7[2] = 0;
  *a7 = 0;
  if (!a1)
    return;
  v8 = a3;
  if (a6)
  {
    v11 = operator new(0x28uLL);
    *v11 = &off_24C49C638;
    v11[1] = a7;
    v11[2] = a2;
    v11[3] = &v20;
    v11[4] = v21;
    v23 = v11;
    sub_20B918ABC(a1, a2, v8, (uint64_t)v22, -1);
  }
  else
  {
    v14 = operator new(0x28uLL);
    *v14 = &off_24C49C638;
    v14[1] = a7;
    v14[2] = a2;
    v14[3] = &v20;
    v14[4] = v21;
    v23 = v14;
    sub_20B918894(a1, a2, v8, (uint64_t)v22);
  }
  v15 = v23;
  if (v23 == v22)
  {
    v16 = 4;
    v15 = v22;
    goto LABEL_9;
  }
  if (v23)
  {
    v16 = 5;
LABEL_9:
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v15 + 8 * v16))(v15, v12, v13);
  }
  v17 = a7[1];
  v18 = 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v17 - *a7) >> 3));
  if (v17 == *a7)
    v19 = 0;
  else
    v19 = v18;
  sub_20B90A46C(*a7, v17, v19, 1);
}

void sub_20B909B24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, void ***a15)
{
  void ***v15;
  void ***v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  ((void (*)(void))(*v17)[v18])();
LABEL_6:
  sub_20B90B6A0(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_20B909B78(uint64_t a1, char *a2)
{
  void **v3;
  uint64_t v4;
  void *__p[2];
  char v7;

  sub_20B80BBD0(__p, a2);
  v3 = sub_20B871B2C(a1, __p);
  v4 = (*(uint64_t (**)(void *))(*(_QWORD *)v3[7] + 16))(v3[7]);
  if (v7 < 0)
    operator delete(__p[0]);
  return v4;
}

void sub_20B909BD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B909BF4(uint64_t a1, char *a2)
{
  void **v3;
  uint64_t v4;
  void *__p[2];
  char v7;

  sub_20B80BBD0(__p, a2);
  v3 = sub_20B871B2C(a1, __p);
  v4 = (*(uint64_t (**)(void *))(*(_QWORD *)v3[7] + 24))(v3[7]);
  if (v7 < 0)
    operator delete(__p[0]);
  return v4;
}

void sub_20B909C54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B909C70(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C45FAC8;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20B909CB0(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C45FAC8;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B909D00(uint64_t a1)
{
  return a1 + 8;
}

void sub_20B909D08()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB8F0] + 16;
  __cxa_throw(exception, MEMORY[0x24BEDB760], MEMORY[0x24BEDB680]);
}

void sub_20B909D3C()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB8F0] + 16;
  __cxa_throw(exception, MEMORY[0x24BEDB760], MEMORY[0x24BEDB680]);
}

_QWORD *sub_20B909D70(_QWORD *result, const void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_20B80FD0C(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20B909DCC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B909DE8(_QWORD *__dst, __int128 *a2, _QWORD *a3)
{
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20B80ACE0(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }
  v6 = a3[1];
  __dst[3] = *a3;
  __dst[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return __dst;
}

void sub_20B909E5C()
{
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B909E70(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

void sub_20B909E78(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 24;
        sub_20B8896CC((uint64_t)(v4 - 24), *((_QWORD **)v4 - 2));
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_20B909EF0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  void *v13;
  uint64_t *v14;
  uint64_t *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20B80CDD8();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_20B828D70(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (uint64_t *)&v10[24 * v4];
  v16 = &v10[24 * v9];
  sub_20B88A068(v14, a2);
  v15 = v14 + 3;
  sub_20B909FF4(a1, &v13);
  v11 = a1[1];
  sub_20B90A19C(&v13);
  return v11;
}

void sub_20B909FE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B90A19C((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B909FF4(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20B90A068((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20B90A068(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[3];
  char v17;
  __int128 v18;
  __int128 v19;

  v7 = a7;
  *(_QWORD *)&v19 = a6;
  *((_QWORD *)&v19 + 1) = a7;
  v18 = v19;
  v16[0] = a1;
  v16[1] = &v18;
  v16[2] = &v19;
  if (a3 == a5)
  {
    v14 = a6;
  }
  else
  {
    v8 = a3;
    do
    {
      v9 = *(_QWORD *)(v8 - 24);
      v8 -= 24;
      *(_QWORD *)(v7 - 24) = v9;
      v10 = (_QWORD *)(a3 - 16);
      v11 = *(_QWORD *)(a3 - 16);
      *(_QWORD *)(v7 - 16) = v11;
      v12 = v7 - 16;
      v13 = *(_QWORD *)(a3 - 8);
      *(_QWORD *)(v7 - 8) = v13;
      if (v13)
      {
        *(_QWORD *)(v11 + 16) = v12;
        *(_QWORD *)(a3 - 24) = v10;
        *v10 = 0;
        *(_QWORD *)(a3 - 8) = 0;
      }
      else
      {
        *(_QWORD *)(v7 - 24) = v12;
      }
      v7 = *((_QWORD *)&v19 + 1) - 24;
      *((_QWORD *)&v19 + 1) -= 24;
      a3 = v8;
    }
    while (v8 != a5);
    v14 = v19;
  }
  v17 = 1;
  sub_20B90A128((uint64_t)v16);
  return v14;
}

uint64_t sub_20B90A128(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20B90A15C(a1);
  return a1;
}

void sub_20B90A15C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    sub_20B8896CC(v1, *(_QWORD **)(v1 + 8));
    v1 += 24;
  }
}

void **sub_20B90A19C(void **a1)
{
  sub_20B90A1CC((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_20B90A1CC(uint64_t a1)
{
  uint64_t i;
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 24;
    sub_20B8896CC(i - 24, *(_QWORD **)(i - 16));
  }
}

char *sub_20B90A210(char *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char *v8;
  _WORD *v9;
  __int16 v10;

  if (a6)
  {
    v8 = result;
    result = sub_20B80FD0C(result, a6);
    v9 = (_WORD *)*((_QWORD *)v8 + 1);
    while (a3 != a5)
    {
      v10 = *(_WORD *)(a3 - 2);
      a3 -= 2;
      *v9++ = v10;
    }
    *((_QWORD *)v8 + 1) = v9;
  }
  return result;
}

void sub_20B90A264(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B90A280(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_20B90A304(result, a4);
    result = (_QWORD *)sub_20B90A344((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_20B90A2E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_20B8882B4(&a9);
  _Unwind_Resume(a1);
}

char *sub_20B90A304(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 59)
    sub_20B88848C();
  result = (char *)sub_20B8156D4((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

uint64_t sub_20B90A344(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_20B88A068((uint64_t *)v4, v6);
      *(_DWORD *)(v4 + 24) = *(_DWORD *)(v6 + 24);
      v4 = v11 + 32;
      v11 += 32;
      v6 += 32;
    }
    while (v6 != a3);
  }
  v9 = 1;
  sub_20B90A3EC((uint64_t)v8);
  return v4;
}

void sub_20B90A3D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B90A3EC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B90A3EC(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20B90A420(a1);
  return a1;
}

void sub_20B90A420(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  if (v1 != v2)
  {
    v3 = v1 - 32;
    do
    {
      sub_20B8896CC(v3, *(_QWORD **)(v3 + 8));
      v4 = v3 == v2;
      v3 -= 32;
    }
    while (!v4);
  }
}

void sub_20B90A46C(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  int v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  unint64_t v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  BOOL v38;
  _QWORD *v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  int v43;
  unint64_t v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  int v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  int v52;
  int v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  int v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  int64_t v67;
  int64_t v68;
  int64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  uint64_t v74;
  int v75;
  _QWORD *v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  int64_t v83;
  _QWORD *v84;
  __int128 *v85;
  _QWORD *v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  int v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  int v98;
  _QWORD *v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  _QWORD *v104;
  _QWORD *v105;
  int v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  _QWORD **v111;
  _QWORD *v112;
  __int128 v114;
  uint64_t v115;
  int v116;
  __int128 v117;
  uint64_t v118;
  __int128 __p;
  uint64_t v120;
  int v121;

__n128 sub_20B90AF90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  result.n128_u64[0] = sub_20B90B518(a1, a2, a3, a4).n128_u64[0];
  if (*(_DWORD *)(a5 + 48) > *(_DWORD *)(a4 + 48))
  {
    sub_20B889430((uint64_t *)a4, a5);
    v11 = *(_QWORD *)(a4 + 40);
    result = *(__n128 *)(a4 + 24);
    v12 = *(_QWORD *)(a5 + 40);
    *(_OWORD *)(a4 + 24) = *(_OWORD *)(a5 + 24);
    *(_QWORD *)(a4 + 40) = v12;
    *(__n128 *)(a5 + 24) = result;
    *(_QWORD *)(a5 + 40) = v11;
    LODWORD(v11) = *(_DWORD *)(a4 + 48);
    *(_DWORD *)(a4 + 48) = *(_DWORD *)(a5 + 48);
    *(_DWORD *)(a5 + 48) = v11;
    if (*(_DWORD *)(a4 + 48) > *(_DWORD *)(a3 + 48))
    {
      sub_20B889430((uint64_t *)a3, a4);
      v13 = *(_QWORD *)(a3 + 40);
      result = *(__n128 *)(a3 + 24);
      v14 = *(_QWORD *)(a4 + 40);
      *(_OWORD *)(a3 + 24) = *(_OWORD *)(a4 + 24);
      *(_QWORD *)(a3 + 40) = v14;
      *(__n128 *)(a4 + 24) = result;
      *(_QWORD *)(a4 + 40) = v13;
      LODWORD(v13) = *(_DWORD *)(a3 + 48);
      *(_DWORD *)(a3 + 48) = *(_DWORD *)(a4 + 48);
      *(_DWORD *)(a4 + 48) = v13;
      if (*(_DWORD *)(a3 + 48) > *(_DWORD *)(a2 + 48))
      {
        sub_20B889430((uint64_t *)a2, a3);
        v15 = *(_QWORD *)(a2 + 40);
        result = *(__n128 *)(a2 + 24);
        v16 = *(_QWORD *)(a3 + 40);
        *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
        *(_QWORD *)(a2 + 40) = v16;
        *(__n128 *)(a3 + 24) = result;
        *(_QWORD *)(a3 + 40) = v15;
        LODWORD(v15) = *(_DWORD *)(a2 + 48);
        *(_DWORD *)(a2 + 48) = *(_DWORD *)(a3 + 48);
        *(_DWORD *)(a3 + 48) = v15;
        if (*(_DWORD *)(a2 + 48) > *(_DWORD *)(a1 + 48))
        {
          sub_20B889430((uint64_t *)a1, a2);
          v17 = *(_QWORD *)(a1 + 40);
          result = *(__n128 *)(a1 + 24);
          v18 = *(_QWORD *)(a2 + 40);
          *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
          *(_QWORD *)(a1 + 40) = v18;
          *(__n128 *)(a2 + 24) = result;
          *(_QWORD *)(a2 + 40) = v17;
          LODWORD(v17) = *(_DWORD *)(a1 + 48);
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
          *(_DWORD *)(a2 + 48) = v17;
        }
      }
    }
  }
  return result;
}

uint64_t *sub_20B90B114(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  int v6;
  int *v7;
  int *v8;
  int v9;
  int *v10;
  __int128 *v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  int v27;

  v5 = result;
  v7 = (int *)(a2 + 48);
  v6 = *(_DWORD *)(a2 + 48);
  v8 = (int *)(result + 6);
  v10 = (int *)(a3 + 48);
  v9 = *(_DWORD *)(a3 + 48);
  if (v6 > *((_DWORD *)result + 12))
  {
    v11 = (__int128 *)(result + 3);
    if (v9 <= v6)
    {
      result = sub_20B889430(result, a2);
      v21 = v5[5];
      v22 = *v11;
      v23 = *(_QWORD *)(a2 + 40);
      *v11 = *(_OWORD *)(a2 + 24);
      v5[5] = v23;
      *(_OWORD *)(a2 + 24) = v22;
      *(_QWORD *)(a2 + 40) = v21;
      LODWORD(v21) = *((_DWORD *)v5 + 12);
      *((_DWORD *)v5 + 12) = *(_DWORD *)(a2 + 48);
      *(_DWORD *)(a2 + 48) = v21;
      if (*v10 <= (int)v21)
        return result;
      result = sub_20B889430((uint64_t *)a2, a3);
      v24 = *(_QWORD *)(a2 + 40);
      v25 = *(_OWORD *)(a2 + 24);
      v26 = *(_QWORD *)(a3 + 40);
      *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
      *(_QWORD *)(a2 + 40) = v26;
      *(_OWORD *)(a3 + 24) = v25;
      *(_QWORD *)(a3 + 40) = v24;
      v8 = v7;
    }
    else
    {
      result = sub_20B889430(result, a3);
      v12 = v5[5];
      v13 = *v11;
      v14 = *(_QWORD *)(a3 + 40);
      *v11 = *(_OWORD *)(a3 + 24);
      v5[5] = v14;
      *(_OWORD *)(a3 + 24) = v13;
      *(_QWORD *)(a3 + 40) = v12;
    }
    v7 = v10;
    goto LABEL_10;
  }
  if (v9 > v6)
  {
    result = sub_20B889430((uint64_t *)a2, a3);
    v15 = *(_QWORD *)(a2 + 40);
    v16 = *(_OWORD *)(a2 + 24);
    v17 = *(_QWORD *)(a3 + 40);
    *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
    *(_QWORD *)(a2 + 40) = v17;
    *(_OWORD *)(a3 + 24) = v16;
    *(_QWORD *)(a3 + 40) = v15;
    LODWORD(v15) = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(a2 + 48) = *(_DWORD *)(a3 + 48);
    *(_DWORD *)(a3 + 48) = v15;
    if (*(_DWORD *)(a2 + 48) > *v8)
    {
      result = sub_20B889430(v5, a2);
      v18 = v5[5];
      v19 = *(_OWORD *)(v5 + 3);
      v20 = *(_QWORD *)(a2 + 40);
      *(_OWORD *)(v5 + 3) = *(_OWORD *)(a2 + 24);
      v5[5] = v20;
      *(_OWORD *)(a2 + 24) = v19;
      *(_QWORD *)(a2 + 40) = v18;
LABEL_10:
      v27 = *v8;
      *v8 = *v7;
      *v7 = v27;
    }
  }
  return result;
}

BOOL sub_20B90B2CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  _QWORD **v19;
  _QWORD *v20;
  __int128 __p;
  uint64_t v23;
  int v24;

  v4 = 0x6DB6DB6DB6DB6DB7 * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(_DWORD *)(a2 - 8) > *(_DWORD *)(a1 + 48))
      {
        sub_20B889430((uint64_t *)a1, a2 - 56);
        v6 = *(_QWORD *)(a1 + 40);
        v7 = *(_OWORD *)(a1 + 24);
        v8 = *(_QWORD *)(a2 - 16);
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 - 32);
        *(_QWORD *)(a1 + 40) = v8;
        *(_OWORD *)(a2 - 32) = v7;
        *(_QWORD *)(a2 - 16) = v6;
        LODWORD(v6) = *(_DWORD *)(a1 + 48);
        *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 - 8);
        *(_DWORD *)(a2 - 8) = v6;
        return 1;
      }
      return result;
    case 3:
      sub_20B90B114((uint64_t *)a1, a1 + 56, a2 - 56);
      return 1;
    case 4:
      sub_20B90B518(a1, a1 + 56, a1 + 112, a2 - 56);
      return 1;
    case 5:
      sub_20B90AF90(a1, a1 + 56, a1 + 112, a1 + 168, a2 - 56);
      return 1;
    default:
      v9 = a1 + 112;
      sub_20B90B114((uint64_t *)a1, a1 + 56, a1 + 112);
      v10 = a1 + 168;
      if (a1 + 168 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *(_DWORD *)(v10 + 48);
    if (v13 > *(_DWORD *)(v9 + 48))
    {
      v14 = (_QWORD *)(v10 + 8);
      v15 = *(_QWORD **)(v10 + 8);
      v19 = *(_QWORD ***)v10;
      v20 = v15;
      if (*(_QWORD *)(v10 + 16))
      {
        v15[2] = &v20;
        *(_QWORD *)v10 = v14;
        *v14 = 0;
        *(_QWORD *)(v10 + 16) = 0;
      }
      else
      {
        v19 = &v20;
      }
      __p = *(_OWORD *)(v10 + 24);
      v23 = *(_QWORD *)(v10 + 40);
      *(_QWORD *)(v10 + 32) = 0;
      *(_QWORD *)(v10 + 40) = 0;
      *(_QWORD *)(v10 + 24) = 0;
      v24 = v13;
      v16 = v11;
      while (1)
      {
        sub_20B90B640(a1 + v16 + 168, a1 + v16 + 112);
        if (v16 == -112)
          break;
        v17 = *(_DWORD *)(a1 + v16 + 104);
        v16 -= 56;
        if (v24 <= v17)
        {
          v18 = a1 + v16 + 168;
          goto LABEL_15;
        }
      }
      v18 = a1;
LABEL_15:
      sub_20B90B640(v18, (uint64_t)&v19);
      if (SHIBYTE(v23) < 0)
        operator delete((void *)__p);
      ++v12;
      sub_20B8896CC((uint64_t)&v19, v20);
      if (v12 == 8)
        return v10 + 56 == a2;
    }
    v9 = v10;
    v11 += 56;
    v10 += 56;
    if (v10 == a2)
      return 1;
  }
}

__n128 sub_20B90B518(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_20B90B114((uint64_t *)a1, a2, a3);
  if (*(_DWORD *)(a4 + 48) > *(_DWORD *)(a3 + 48))
  {
    sub_20B889430((uint64_t *)a3, a4);
    v9 = *(_QWORD *)(a3 + 40);
    result = *(__n128 *)(a3 + 24);
    v10 = *(_QWORD *)(a4 + 40);
    *(_OWORD *)(a3 + 24) = *(_OWORD *)(a4 + 24);
    *(_QWORD *)(a3 + 40) = v10;
    *(__n128 *)(a4 + 24) = result;
    *(_QWORD *)(a4 + 40) = v9;
    LODWORD(v9) = *(_DWORD *)(a3 + 48);
    *(_DWORD *)(a3 + 48) = *(_DWORD *)(a4 + 48);
    *(_DWORD *)(a4 + 48) = v9;
    if (*(_DWORD *)(a3 + 48) > *(_DWORD *)(a2 + 48))
    {
      sub_20B889430((uint64_t *)a2, a3);
      v11 = *(_QWORD *)(a2 + 40);
      result = *(__n128 *)(a2 + 24);
      v12 = *(_QWORD *)(a3 + 40);
      *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
      *(_QWORD *)(a2 + 40) = v12;
      *(__n128 *)(a3 + 24) = result;
      *(_QWORD *)(a3 + 40) = v11;
      LODWORD(v11) = *(_DWORD *)(a2 + 48);
      *(_DWORD *)(a2 + 48) = *(_DWORD *)(a3 + 48);
      *(_DWORD *)(a3 + 48) = v11;
      if (*(_DWORD *)(a2 + 48) > *(_DWORD *)(a1 + 48))
      {
        sub_20B889430((uint64_t *)a1, a2);
        v13 = *(_QWORD *)(a1 + 40);
        result = *(__n128 *)(a1 + 24);
        v14 = *(_QWORD *)(a2 + 40);
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
        *(_QWORD *)(a1 + 40) = v14;
        *(__n128 *)(a2 + 24) = result;
        *(_QWORD *)(a2 + 40) = v13;
        LODWORD(v13) = *(_DWORD *)(a1 + 48);
        *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
        *(_DWORD *)(a2 + 48) = v13;
      }
    }
  }
  return result;
}

__n128 sub_20B90B640(uint64_t a1, uint64_t a2)
{
  void **v4;
  __n128 result;

  sub_20B889664(a1, (_QWORD *)a2);
  v4 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*v4);
  result = *(__n128 *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(__n128 *)v4 = result;
  *(_BYTE *)(a2 + 47) = 0;
  *(_WORD *)(a2 + 24) = 0;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  return result;
}

void sub_20B90B6A0(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        sub_20B90B710(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_20B90B710(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  sub_20B8896CC(a1, *(_QWORD **)(a1 + 8));
}

void sub_20B90B748(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B90B76C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20B90B784(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45E520))
    return a1 + 24;
  else
    return 0;
}

_OWORD *sub_20B90B7C4(uint64_t **a1, void **a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  _QWORD v9[2];
  char v10;
  uint64_t v11;

  v5 = (void **)sub_20B88A3C0((uint64_t)a1, &v11, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x48uLL);
    v9[1] = a1 + 1;
    v6[2] = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_OWORD *)((char *)v6 + 56) = *(_OWORD *)(a3 + 24);
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    v10 = 1;
    sub_20B8296A0(a1, v11, v7, (uint64_t *)v6);
    v9[0] = 0;
    sub_20B88A4BC((uint64_t)v9, 0);
  }
  return v6;
}

void sub_20B90B88C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B90B8B0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20B90B8C8(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45E538))
    return a1 + 24;
  else
    return 0;
}

void sub_20B90B90C()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B90B920(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24C49C638;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_20B90B960(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C49C638;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20B90B988(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, uint64_t **a7, uint64_t *a8)
{
  int v10;
  void **v11;
  unint64_t v12;
  uint64_t v13;
  _WORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  __int128 v39;
  uint64_t *v40;
  char *v41;
  int v42;
  void *__p[2];
  unint64_t v44;
  void *v45[2];
  unsigned __int8 v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t *v49;
  char *v50;
  uint64_t v51;

  v10 = *a4;
  sub_20BA04978(*(_QWORD *)(a1 + 16), **(_QWORD **)(a1 + 32), **(_QWORD **)(a1 + 24), *a7, *a8, (unint64_t)v45);
  if ((v46 & 0x80u) == 0)
    v11 = v45;
  else
    v11 = (void **)v45[0];
  if ((v46 & 0x80u) == 0)
    v12 = v46;
  else
    v12 = (unint64_t)v45[1];
  if (v12 >= 0x7FFFFFFFFFFFFFF8)
    sub_20B877F70();
  v13 = *(_QWORD *)(a1 + 8);
  if (v12 >= 0xB)
  {
    v15 = (v12 & 0xFFFFFFFFFFFFFFFCLL) + 4;
    if ((v12 | 3) != 0xB)
      v15 = v12 | 3;
    v14 = sub_20B80FD48((uint64_t)__p, v15 + 1);
    __p[1] = (void *)v12;
    v44 = v16 | 0x8000000000000000;
    __p[0] = v14;
  }
  else
  {
    HIBYTE(v44) = v12;
    v14 = __p;
    if (!v12)
      goto LABEL_16;
  }
  v17 = 2 * v12;
  do
  {
    v18 = *(_WORD *)v11;
    v11 = (void **)((char *)v11 + 2);
    *v14++ = v18;
    v17 -= 2;
  }
  while (v17);
LABEL_16:
  *v14 = 0;
  v19 = *(_QWORD *)(v13 + 16);
  v20 = *(_QWORD *)(v13 + 8);
  if (v20 >= v19)
  {
    v21 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v20 - *(_QWORD *)v13) >> 3);
    if ((unint64_t)(v21 + 1) > 0x492492492492492)
      sub_20B80CDD8();
    v22 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v19 - *(_QWORD *)v13) >> 3);
    v23 = 2 * v22;
    if (2 * v22 <= v21 + 1)
      v23 = v21 + 1;
    if (v22 >= 0x249249249249249)
      v24 = 0x492492492492492;
    else
      v24 = v23;
    v51 = v13 + 16;
    if (v24)
    {
      if (v24 > 0x492492492492492)
        sub_20B800BC0();
      v25 = (uint64_t *)operator new(56 * v24);
    }
    else
    {
      v25 = 0;
    }
    v47 = v25;
    v48 = &v25[7 * v21];
    v49 = v48;
    v50 = (char *)&v25[7 * v24];
    v26 = sub_20B88A068(v48, a3);
    v26[5] = v44;
    *(_OWORD *)(v26 + 3) = *(_OWORD *)__p;
    __p[1] = 0;
    v44 = 0;
    __p[0] = 0;
    *((_DWORD *)v26 + 12) = v10;
    v27 = v48;
    v28 = v49 + 7;
    v49 += 7;
    v30 = *(uint64_t **)v13;
    v29 = *(uint64_t **)(v13 + 8);
    if (v29 == *(uint64_t **)v13)
    {
      v40 = *(uint64_t **)(v13 + 8);
    }
    else
    {
      v31 = 0;
      do
      {
        v32 = &v27[v31];
        *(v32 - 7) = v29[v31 - 7];
        v33 = &v29[v31 - 6];
        v34 = *v33;
        v27[v31 - 6] = *v33;
        v35 = (uint64_t)&v27[v31 - 6];
        v36 = v29[v31 - 5];
        *(v32 - 5) = v36;
        if (v36)
        {
          *(_QWORD *)(v34 + 16) = v35;
          v29[v31 - 7] = (uint64_t)v33;
          *v33 = 0;
          v29[v31 - 5] = 0;
        }
        else
        {
          *(v32 - 7) = v35;
        }
        v37 = &v27[v31];
        v38 = &v29[v31];
        v39 = *(_OWORD *)&v29[v31 - 4];
        *(v37 - 2) = v29[v31 - 2];
        *((_OWORD *)v37 - 2) = v39;
        *(v38 - 3) = 0;
        *(v38 - 2) = 0;
        *(v38 - 4) = 0;
        *((_DWORD *)v37 - 2) = v29[v31 - 1];
        v31 -= 7;
      }
      while (&v29[v31] != v30);
      v40 = *(uint64_t **)v13;
      v29 = *(uint64_t **)(v13 + 8);
      v27 = (uint64_t *)((char *)v27 + v31 * 8);
      v28 = v49;
    }
    *(_QWORD *)v13 = v27;
    v47 = v40;
    v48 = v40;
    *(_QWORD *)(v13 + 8) = v28;
    v49 = v29;
    v41 = *(char **)(v13 + 16);
    *(_QWORD *)(v13 + 16) = v50;
    v50 = v41;
    sub_20B90BD24((uint64_t)&v47);
    v42 = SHIBYTE(v44);
    *(_QWORD *)(v13 + 8) = v28;
    if (v42 < 0)
      operator delete(__p[0]);
  }
  else
  {
    sub_20B88A068(*(uint64_t **)(v13 + 8), a3);
    *(_OWORD *)(v20 + 24) = *(_OWORD *)__p;
    *(_QWORD *)(v20 + 40) = v44;
    *(_DWORD *)(v20 + 48) = v10;
    *(_QWORD *)(v13 + 8) = v20 + 56;
  }
  if ((char)v46 < 0)
    operator delete(v45[0]);
}

void sub_20B90BC8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  sub_20B90BD24((uint64_t)&a22);
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

uint64_t sub_20B90BCDC(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C49C698))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B90BD18()
{
  return &unk_24C49C698;
}

uint64_t sub_20B90BD24(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 56;
    sub_20B90B710(i - 56);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20B90BD70(uint64_t a1, const __CFString *a2, uint64_t a3, uint64_t a4)
{
  const __CFAllocator *v8;
  CFIndex Length;
  const char *CStringPtr;
  const UniChar *v11;
  CFIndex v12;
  _QWORD v14[14];
  _QWORD v15[4];
  _QWORD v16[3];
  __int16 v17;
  _QWORD v18[3];
  __int16 v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[4];
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  char v28;
  _QWORD v29[22];
  const char *v31;
  uint64_t v32;
  CFIndex v33;
  uint64_t v34;
  uint64_t v35;

  if (!a2)
    __assert_rtn("ReadingMappedString", "ReadingMappedString.cpp", 20, "unmappedString");
  v8 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  *(_QWORD *)a1 = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], a2);
  *(_QWORD *)(a1 + 8) = 0;
  if (a3 && a4)
  {
    v29[0] = 0;
    v29[1] = v29;
    v29[2] = 0xE002000000;
    v29[3] = sub_20B90C050;
    v29[4] = nullsub_231;
    Length = CFStringGetLength(a2);
    v29[21] = a2;
    v32 = 0;
    v33 = Length;
    if (CFStringGetCharactersPtr(a2))
      CStringPtr = 0;
    else
      CStringPtr = CFStringGetCStringPtr(a2, 0x600u);
    v35 = 0;
    v31 = CStringPtr;
    v34 = 0;
    v25 = 0;
    v26 = &v25;
    v27 = 0x2000000000;
    v28 = 1;
    v24[0] = 0;
    v24[1] = v24;
    v24[2] = 0x2000000000;
    v24[3] = 0;
    v20 = 0;
    v21 = &v20;
    v22 = 0x2000000000;
    v23 = 0;
    v18[0] = 0;
    v18[1] = v18;
    v18[2] = 0x2000000000;
    v19 = 0;
    v16[0] = 0;
    v16[1] = v16;
    v16[2] = 0x2000000000;
    v17 = 0;
    v15[0] = 0;
    v15[1] = v15;
    v15[2] = 0x2000000000;
    v15[3] = 0;
    v14[0] = MEMORY[0x24BDAC760];
    v14[1] = 0x40000000;
    v14[2] = sub_20B90C0B8;
    v14[3] = &unk_24C46C288;
    v14[4] = v24;
    v14[5] = &v25;
    v14[6] = v18;
    v14[7] = v29;
    v14[8] = v16;
    v14[9] = &v20;
    v14[12] = a4;
    v14[13] = a2;
    v14[10] = v15;
    v14[11] = a3;
    sub_20B8D0C18(a2, 0, (uint64_t)v14);
    v11 = (const UniChar *)v21[3];
    if (v11)
    {
      if (*((_BYTE *)v26 + 24))
      {
        v12 = CFStringGetLength(*(CFStringRef *)a1);
        *(_QWORD *)(a1 + 8) = CFStringCreateWithCharacters(v8, v11, v12);
        v11 = (const UniChar *)v21[3];
        *(_BYTE *)(a1 + 16) = 0;
        if (!v11)
          goto LABEL_15;
      }
      else
      {
        *(_BYTE *)(a1 + 16) = 0;
      }
      MEMORY[0x20BD39C80](v11, 0x1000C80BDFB0063);
    }
    else
    {
      *(_BYTE *)(a1 + 16) = *((_BYTE *)v26 + 24);
    }
LABEL_15:
    _Block_object_dispose(v15, 8);
    _Block_object_dispose(v16, 8);
    _Block_object_dispose(v18, 8);
    _Block_object_dispose(&v20, 8);
    _Block_object_dispose(v24, 8);
    _Block_object_dispose(&v25, 8);
    _Block_object_dispose(v29, 8);
    return a1;
  }
  *(_BYTE *)(a1 + 16) = 0;
  return a1;
}

void sub_20B90BFE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose(&a39, 8);
  _Block_object_dispose(&a43, 8);
  _Block_object_dispose(&a47, 8);
  _Unwind_Resume(a1);
}

__n128 sub_20B90C050(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v2 = *(_OWORD *)(a2 + 40);
  v3 = *(_OWORD *)(a2 + 56);
  v4 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v4;
  *(_OWORD *)(a1 + 56) = v3;
  *(_OWORD *)(a1 + 40) = v2;
  v5 = *(_OWORD *)(a2 + 104);
  v6 = *(_OWORD *)(a2 + 120);
  v7 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v7;
  *(_OWORD *)(a1 + 120) = v6;
  *(_OWORD *)(a1 + 104) = v5;
  result = *(__n128 *)(a2 + 168);
  v9 = *(_OWORD *)(a2 + 184);
  v10 = *(_OWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 200) = v10;
  *(_OWORD *)(a1 + 184) = v9;
  *(__n128 *)(a1 + 168) = result;
  return result;
}

void sub_20B90C0B8(uint64_t a1, int64_t a2, uint64_t a3, _BYTE *a4)
{
  CFIndex v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  int64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  BOOL v28;
  uint64_t *v29;
  uint64_t v30;
  const __CFString *ValueAtIndex;
  uint64_t v32;
  int64_t v33;
  int64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  int64_t v42;
  int64_t v43;
  CFRange v44;
  CFRange v45;
  CFRange v46;

  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  if (v8 >= CFArrayGetCount(*(CFArrayRef *)(a1 + 88)))
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
    *a4 = 1;
    return;
  }
  if (a3 != 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24))
    {
      for (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24) = 0;
            ;
            ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24))
      {
        v13 = *(_QWORD *)(a1 + 80);
        v14 = *(_QWORD *)(*(_QWORD *)(v13 + 8) + 24);
        if (v14 >= a3)
          break;
        v15 = v14 + a2;
        if (v14 + a2 < 0 || (v16 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), v17 = *(_QWORD *)(v16 + 200), v17 <= v15))
        {
          v19 = 0;
        }
        else
        {
          v18 = *(_QWORD *)(v16 + 176);
          if (v18)
          {
            v19 = *(_WORD *)(v18 + 2 * (*(_QWORD *)(v16 + 192) + v15));
          }
          else
          {
            v20 = *(_QWORD *)(v16 + 184);
            if (v20)
            {
              v19 = *(char *)(v20 + *(_QWORD *)(v16 + 192) + v15);
            }
            else
            {
              if (*(_QWORD *)(v16 + 216) <= v15 || (v21 = *(_QWORD *)(v16 + 208), v21 > v15))
              {
                v22 = v15 - 4;
                if ((unint64_t)v15 < 4)
                  v22 = 0;
                if (v22 + 64 < v17)
                  v17 = v22 + 64;
                *(_QWORD *)(v16 + 208) = v22;
                *(_QWORD *)(v16 + 216) = v17;
                v44.location = *(_QWORD *)(v16 + 192) + v22;
                v44.length = v17 - v22;
                CFStringGetCharacters(*(CFStringRef *)(v16 + 168), v44, (UniChar *)(v16 + 40));
                v21 = *(_QWORD *)(v16 + 208);
                v13 = *(_QWORD *)(a1 + 80);
              }
              v19 = *(_WORD *)(v16 + 40 + 2 * (v15 - v21));
            }
          }
        }
        *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24)
                 + 2 * (*(_QWORD *)(*(_QWORD *)(v13 + 8) + 24) + a2)) = v19;
      }
    }
    goto LABEL_41;
  }
  if (a2 < 0 || (v9 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), v10 = *(_QWORD *)(v9 + 200), v10 <= a2))
  {
    v12 = 0;
  }
  else
  {
    v11 = *(_QWORD *)(v9 + 176);
    if (v11)
    {
      v12 = *(_WORD *)(v11 + 2 * (*(_QWORD *)(v9 + 192) + a2));
    }
    else
    {
      v32 = *(_QWORD *)(v9 + 184);
      if (v32)
      {
        v12 = *(char *)(v32 + *(_QWORD *)(v9 + 192) + a2);
      }
      else
      {
        if (*(_QWORD *)(v9 + 216) <= a2 || (v33 = *(_QWORD *)(v9 + 208), v33 > a2))
        {
          v34 = a2 - 4;
          if ((unint64_t)a2 < 4)
            v34 = 0;
          if (v34 + 64 < v10)
            v10 = v34 + 64;
          *(_QWORD *)(v9 + 208) = v34;
          *(_QWORD *)(v9 + 216) = v10;
          v45.location = *(_QWORD *)(v9 + 192) + v34;
          v45.length = v10 - v34;
          CFStringGetCharacters(*(CFStringRef *)(v9 + 168), v45, (UniChar *)(v9 + 40));
          v33 = *(_QWORD *)(v9 + 208);
        }
        v12 = *(_WORD *)(v9 + 40 + 2 * (a2 - v33));
      }
    }
  }
  *(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = v12;
  v23 = *(_QWORD *)(a1 + 96);
  v24 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
  v25 = *(_QWORD *)(v23 + 32);
  if (v25)
  {
    v26 = v23 + 32;
    do
    {
      v27 = *(unsigned __int16 *)(v25 + 32);
      v28 = v27 >= v24;
      if (v27 >= v24)
        v29 = (uint64_t *)v25;
      else
        v29 = (uint64_t *)(v25 + 8);
      if (v28)
        v26 = v25;
      v25 = *v29;
    }
    while (*v29);
    if (v26 != v23 + 32 && *(unsigned __int16 *)(v26 + 32) <= v24)
    {
      ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
      *(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = sub_20B88F140(v23, v24, ValueAtIndex);
      if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24)
        && *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) != *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
      {
        CFStringGetLength(*(CFStringRef *)(a1 + 104));
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = operator new[]();
        for (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24) = 0;
              ;
              ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24))
        {
          v35 = *(_QWORD *)(a1 + 80);
          v36 = *(_QWORD *)(*(_QWORD *)(v35 + 8) + 24);
          if (v36 >= a2)
            break;
          if (v36 < 0 || (v37 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), v38 = *(_QWORD *)(v37 + 200), v38 <= v36))
          {
            v40 = 0;
          }
          else
          {
            v39 = *(_QWORD *)(v37 + 176);
            if (v39)
            {
              v40 = *(_WORD *)(v39 + 2 * (*(_QWORD *)(v37 + 192) + v36));
            }
            else
            {
              v41 = *(_QWORD *)(v37 + 184);
              if (v41)
              {
                v40 = *(char *)(v41 + *(_QWORD *)(v37 + 192) + v36);
              }
              else
              {
                if (*(_QWORD *)(v37 + 216) <= v36 || (v42 = *(_QWORD *)(v37 + 208), v42 > v36))
                {
                  v43 = v36 - 4;
                  if ((unint64_t)v36 < 4)
                    v43 = 0;
                  if (v43 + 64 < v38)
                    v38 = v43 + 64;
                  *(_QWORD *)(v37 + 208) = v43;
                  *(_QWORD *)(v37 + 216) = v38;
                  v46.location = *(_QWORD *)(v37 + 192) + v43;
                  v46.length = v38 - v43;
                  CFStringGetCharacters(*(CFStringRef *)(v37 + 168), v46, (UniChar *)(v37 + 40));
                  v42 = *(_QWORD *)(v37 + 208);
                  v35 = *(_QWORD *)(a1 + 80);
                }
                v40 = *(_WORD *)(v37 + 40 + 2 * (v36 - v42));
              }
            }
          }
          *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24)
                   + 2 * *(_QWORD *)(*(_QWORD *)(v35 + 8) + 24)) = v40;
        }
      }
      v30 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24);
      if (!v30)
        goto LABEL_41;
      LOWORD(v24) = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24);
      goto LABEL_40;
    }
  }
  v30 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24);
  if (v30)
LABEL_40:
    *(_WORD *)(v30 + 2 * a2) = v24;
LABEL_41:
  ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
}

uint64_t sub_20B90C51C(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  const UniChar *v3;
  BOOL v4;
  uint64_t v5;
  const UniChar *v6;
  const __CFAllocator *v7;
  CFStringRef v8;
  char v9;
  uint64_t v10;
  _QWORD v12[9];
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  char v20;

  v17 = 0;
  v18 = &v17;
  v19 = 0x2000000000;
  v20 = 1;
  v13 = 0;
  v14 = &v13;
  v15 = 0x2000000000;
  v16 = 0;
  v3 = *(const UniChar **)a1;
  v2 = *(_QWORD *)(a1 + 8);
  if (a2)
  {
    v12[0] = MEMORY[0x24BDAC760];
    v12[1] = 0x40000000;
    v12[2] = sub_20B90C758;
    v12[3] = &unk_24C49C6B0;
    v12[6] = v3;
    v12[7] = a2;
    v12[4] = &v17;
    v12[5] = &v13;
    v12[8] = v2;
    sub_20B8D0B48((uint64_t)v3, v2, (uint64_t)v12);
    v4 = *((_BYTE *)v18 + 24) == 0;
  }
  else
  {
    v4 = 0;
  }
  v5 = 0;
  if (!v4 && v2)
  {
    if (v14[3])
    {
      v5 = operator new();
      v6 = (const UniChar *)v14[3];
      v7 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      *(_QWORD *)v5 = CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x24BDBD240], v6, v2);
      if (v6 == v3 || !memcmp(v6, v3, 2 * v2))
      {
        v8 = 0;
        v9 = 1;
      }
      else
      {
        if (v3)
          v8 = CFStringCreateWithCharacters(v7, v3, v2);
        else
          v8 = 0;
        v9 = 0;
      }
      *(_QWORD *)(v5 + 8) = v8;
      *(_BYTE *)(v5 + 16) = v9;
      v10 = v14[3];
      if (v10)
        MEMORY[0x20BD39C80](v10, 0x1000C80BDFB0063);
    }
    else
    {
      v5 = operator new();
      *(_QWORD *)v5 = CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x24BDBD240], v3, v2);
      *(_QWORD *)(v5 + 8) = 0;
      *(_BYTE *)(v5 + 16) = 1;
    }
  }
  _Block_object_dispose(&v13, 8);
  _Block_object_dispose(&v17, 8);
  return v5;
}

void sub_20B90C70C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v12;
  va_list va;

  va_start(va, a11);
  MEMORY[0x20BD39CB0](v11, 0x1060C40285832E9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v12 - 80), 8);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B90C758(_QWORD *result, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  _QWORD *v5;
  unsigned __int16 *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;
  uint64_t *v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v5 = result;
  v6 = (unsigned __int16 *)(result[6] + 2 * a2);
  v7 = *v6;
  if (((unsigned __int16)(v7 + 0x2000) >> 8) > 0x18u)
  {
    v18 = result[5];
LABEL_18:
    v19 = *(_QWORD *)(*(_QWORD *)(v18 + 8) + 24);
    if (v19)
      *(_WORD *)(v19 + 2 * a2) = v7;
    return result;
  }
  if (a3 == 1)
  {
    v8 = result[7];
    v11 = *(_QWORD *)(v8 + 8);
    v9 = v8 + 8;
    v10 = v11;
    if (!v11)
      goto LABEL_15;
    v12 = v9;
    do
    {
      v13 = *(unsigned __int16 *)(v10 + 26);
      v14 = v13 >= v7;
      if (v13 >= v7)
        v15 = (uint64_t *)v10;
      else
        v15 = (uint64_t *)(v10 + 8);
      if (v14)
        v12 = v10;
      v10 = *v15;
    }
    while (*v15);
    if (v12 == v9 || *(unsigned __int16 *)(v12 + 26) > v7 || (v16 = *(unsigned __int16 *)(v12 + 28), v16 == v7))
    {
LABEL_15:
      *(_BYTE *)(*(_QWORD *)(result[4] + 8) + 24) = 0;
      *a4 = 1;
      v17 = result + 5;
    }
    else
    {
      v17 = result + 5;
      if (!*(_QWORD *)(*(_QWORD *)(result[5] + 8) + 24))
      {
        *(_QWORD *)(*(_QWORD *)(result[5] + 8) + 24) = operator new[]();
        result = memcpy(*(void **)(*(_QWORD *)(v5[5] + 8) + 24), (const void *)v5[6], 2 * a2);
      }
      LOWORD(v7) = v16;
    }
    v18 = *v17;
    goto LABEL_18;
  }
  v20 = *(_QWORD *)(*(_QWORD *)(result[5] + 8) + 24);
  if (v20)
    return memcpy((void *)(v20 + 2 * a2), v6, 2 * a3);
  return result;
}

uint64_t sub_20B90C8AC(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 8);
  if (v2)
    CFRelease(v2);
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  return a1;
}

uint64_t sub_20B90C8E8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v8;
  const char *v9;
  void *v10;

  v8 = (void *)objc_msgSend_dictionaryWithCapacity_(MEMORY[0x24BDBCED8], a2, 0);
  v10 = v8;
  if (a2)
    objc_msgSend_setObject_forKeyedSubscript_(v8, v9, (uint64_t)a2, CFSTR("languageIdentifier"));
  if (a3)
    objc_msgSend_setObject_forKeyedSubscript_(v10, v9, a3, CFSTR("inputMethodIdentifier"));
  objc_msgSend_addEntriesFromDictionary_(v10, v9, a4);
  return (*(uint64_t (**)(uint64_t, const __CFString *, void *))(*(_QWORD *)a1 + 16))(a1, CFSTR("com.apple.languageIntelligenceCJK"), v10);
}

uint64_t sub_20B90C988(uint64_t a1, __CFDictionary *a2, void *lpsrc)
{
  uint64_t result;
  _WORD *v6;
  __int16 v7;
  uint64_t v8;
  unsigned int v9;
  __int16 v10;

  if (!lpsrc)
    return 0;
  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
  if (result)
  {
    v6 = (_WORD *)result;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
    if (result)
    {
      if ((*(uint64_t (**)(_WORD *))(*(_QWORD *)v6 + 56))(v6)
        || (result = (*(uint64_t (**)(_WORD *))(*(_QWORD *)v6 + 216))(v6), (_DWORD)result))
      {
        v7 = v6[8];
        if ((v7 & 2) != 0)
        {
          CFDictionaryAddValue(a2, CFSTR("userDictionaryConversionCandidatePresented"), (const void *)*MEMORY[0x24BDBD270]);
          v7 = v6[8];
          if ((v7 & 4) == 0)
          {
LABEL_8:
            if ((v7 & 8) == 0)
              goto LABEL_9;
            goto LABEL_26;
          }
        }
        else if ((v7 & 4) == 0)
        {
          goto LABEL_8;
        }
        CFDictionaryAddValue(a2, CFSTR("learningDictionaryConversionCandidatePresented"), (const void *)*MEMORY[0x24BDBD270]);
        v7 = v6[8];
        if ((v7 & 8) == 0)
        {
LABEL_9:
          if ((v7 & 0x10) == 0)
            goto LABEL_10;
          goto LABEL_27;
        }
LABEL_26:
        CFDictionaryAddValue(a2, CFSTR("addressBookConversionCandidatePresented"), (const void *)*MEMORY[0x24BDBD270]);
        v7 = v6[8];
        if ((v7 & 0x10) == 0)
        {
LABEL_10:
          if ((v7 & 0x20) == 0)
            goto LABEL_11;
          goto LABEL_28;
        }
LABEL_27:
        CFDictionaryAddValue(a2, CFSTR("autocorrectionCandidatePresented"), (const void *)*MEMORY[0x24BDBD270]);
        v7 = v6[8];
        if ((v7 & 0x20) == 0)
        {
LABEL_11:
          if ((v7 & 0x40) == 0)
            goto LABEL_12;
          goto LABEL_29;
        }
LABEL_28:
        CFDictionaryAddValue(a2, CFSTR("otaRegionalLexiconCandidatePresented"), (const void *)*MEMORY[0x24BDBD270]);
        v7 = v6[8];
        if ((v7 & 0x40) == 0)
        {
LABEL_12:
          if ((v7 & 0x100) == 0)
            goto LABEL_14;
          goto LABEL_13;
        }
LABEL_29:
        CFDictionaryAddValue(a2, CFSTR("otaNonRegionalLexiconCandidatePresented"), (const void *)*MEMORY[0x24BDBD270]);
        if ((v6[8] & 0x100) == 0)
        {
LABEL_14:
          v8 = *(_QWORD *)(a1 + 32);
          if (!v8)
            sub_20B80BB74();
          v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8);
          result = 1;
          if (v9 <= 5 && ((1 << v9) & 0x26) != 0)
          {
            v10 = v6[8];
            if ((v10 & 1) != 0)
            {
              CFDictionaryAddValue(a2, CFSTR("abbreviatedCandidatePresented"), (const void *)*MEMORY[0x24BDBD270]);
              v10 = v6[8];
              if ((v10 & 0x80) == 0)
              {
LABEL_19:
                if ((v10 & 0x200) == 0)
                  return 1;
LABEL_20:
                CFDictionaryAddValue(a2, CFSTR("dialectPhraseCandidatePresented"), (const void *)*MEMORY[0x24BDBD270]);
                return 1;
              }
            }
            else if ((v10 & 0x80) == 0)
            {
              goto LABEL_19;
            }
            CFDictionaryAddValue(a2, CFSTR("fuzzyPinyinCandidatePresented"), (const void *)*MEMORY[0x24BDBD270]);
            if ((v6[8] & 0x200) == 0)
              return 1;
            goto LABEL_20;
          }
          return result;
        }
LABEL_13:
        CFDictionaryAddValue(a2, CFSTR("englishLexiconCandidatePresented"), (const void *)*MEMORY[0x24BDBD270]);
        goto LABEL_14;
      }
    }
  }
  return result;
}

uint64_t sub_20B90CC10(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 32);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_20B90CC60(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  v2 = *(_QWORD **)(a1 + 32);
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B90CCC0(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t sub_20B90CD24(uint64_t a1, signed int a2)
{
  uint64_t **v4;
  _QWORD *v5;
  char *v6;
  unsigned int *v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v14;
  _QWORD v15[4];

  v15[3] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = a1 + 8;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 24) = a1 + 32;
  v4 = (uint64_t **)(a1 + 24);
  *(_QWORD *)(a1 + 40) = 0;
  v5 = (_QWORD *)sub_20B9AE60C();
  v6 = (char *)sub_20B9AE6A0(v5, a2, off_254729648[0], off_2547295D0[0]);
  if (v6[23] < 0)
    v6 = *(char **)v6;
  sub_20B90CFC0(v6, (uint64_t)"r", 1, v15);
  v14 = (std::__shared_weak_count *)v15[1];
  if (v15[0])
  {
    v7 = *(unsigned int **)v15[0];
    if (*(_DWORD *)(*(_QWORD *)v15[0] + 4) == 1 && v7[2] == 293715527 && *v7)
    {
      v8 = 0;
      v9 = 5;
      do
      {
        LODWORD(v15[0]) = v7[v9];
        v10 = v7[v9 + 1];
        if ((v10 & 1) != 0)
          sub_20B90DBA8((uint64_t **)a1, (unsigned int *)v15, v15);
        if ((v10 & 2) != 0)
          sub_20B90DBA8(v4, (unsigned int *)v15, v15);
        ++v8;
        v9 += 2;
      }
      while (v8 < *v7);
    }
  }
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  return a1;
}

void sub_20B90CFC0(char *__s@<X0>, uint64_t a2@<X1>, char a3@<W2>, _QWORD *a4@<X8>)
{
  _QWORD v8[6];
  char v9;
  void *__p[2];
  char v11;

  sub_20B80BBD0(__p, __s);
  v8[0] = MEMORY[0x24BDAC760];
  v8[1] = 0x40000000;
  v8[2] = sub_20B90D428;
  v8[3] = &unk_24C46C2A8;
  v8[4] = __s;
  v8[5] = a2;
  v9 = a3;
  sub_20B90D078((unsigned __int8 *)__p, (uint64_t)v8, 0, a4);
  if (v11 < 0)
    operator delete(__p[0]);
}

void sub_20B90D05C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B90D078(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  std::__shared_weak_count *v12;
  BOOL v13;
  NSObject *v14;
  os_signpost_id_t v15;
  NSObject *v16;
  NSObject *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t *p_shared_weak_owners;
  unint64_t v23;
  unsigned __int8 *v24;
  std::__shared_weak_count *v25;
  NSObject *v26;
  NSObject *v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  _BYTE buf[24];
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v8 = atomic_load((unsigned __int8 *)&qword_2547292E0);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_2547292E0))
  {
    v36 = operator new();
    *(_OWORD *)v36 = 0u;
    *(_OWORD *)(v36 + 16) = 0u;
    *(_DWORD *)(v36 + 32) = 1065353216;
    qword_2547292D8 = v36;
    __cxa_guard_release(&qword_2547292E0);
  }
  v9 = atomic_load((unsigned __int8 *)&qword_254729328);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_254729328))
  {
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDB380], &stru_2547292E8, &dword_20B7F7000);
    __cxa_guard_release(&qword_254729328);
  }
  v37 = 0;
  v38 = 0;
  std::mutex::lock(&stru_2547292E8);
  v10 = sub_20B87A31C((_QWORD *)qword_2547292D8, a1);
  v11 = v10;
  if (v10
    && (v12 = (std::__shared_weak_count *)*((_QWORD *)v10 + 6)) != 0
    && (v12->__shared_owners_ != -1 ? (v13 = a3 == 0) : (v13 = 0), v13))
  {
    v28 = std::__shared_weak_count::lock(v12);
    if (v28)
      v29 = *((_QWORD *)v11 + 5);
    else
      v29 = 0;
    v37 = v29;
    v38 = v28;
  }
  else
  {
    v14 = sub_20B9A7C5C(0xDu);
    v15 = os_signpost_id_make_with_pointer(v14, a1);
    v16 = sub_20B9A7C5C(0xDu);
    if (v15 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v17 = v16;
      if (os_signpost_enabled(v16))
      {
        if ((a1[23] & 0x80u) == 0)
          v18 = a1;
        else
          v18 = *(unsigned __int8 **)a1;
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v18;
        _os_signpost_emit_with_name_impl(&dword_20B7F7000, v17, OS_SIGNPOST_INTERVAL_BEGIN, v15, "SingletonResourceManagerLoad", "Load resource with key: [%s]", buf, 0xCu);
      }
    }
    v19 = (*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
    sub_20B90D494(&v37, v19);
    v21 = v37;
    v20 = v38;
    if (v38)
    {
      p_shared_weak_owners = (unint64_t *)&v38->__shared_weak_owners_;
      do
        v23 = __ldxr(p_shared_weak_owners);
      while (__stxr(v23 + 1, p_shared_weak_owners));
    }
    *(_QWORD *)buf = a1;
    v24 = sub_20B87A5E8(qword_2547292D8, a1, (uint64_t)&unk_20BA37B7A, (__int128 **)buf);
    v25 = (std::__shared_weak_count *)*((_QWORD *)v24 + 6);
    *((_QWORD *)v24 + 5) = v21;
    *((_QWORD *)v24 + 6) = v20;
    if (v25)
      std::__shared_weak_count::__release_weak(v25);
    v26 = sub_20B9A7C5C(0xDu);
    if (v15 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v27 = v26;
      if (os_signpost_enabled(v26))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_20B7F7000, v27, OS_SIGNPOST_INTERVAL_END, v15, "SingletonResourceManagerLoad", (const char *)&unk_20BA9505F, buf, 2u);
      }
    }
  }
  std::mutex::unlock(&stru_2547292E8);
  v30 = v38;
  *a4 = v37;
  a4[1] = v30;
  if (v30)
  {
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldxr(p_shared_owners);
    while (__stxr(v32 + 1, p_shared_owners));
    v33 = v38;
    if (v38)
    {
      v34 = (unint64_t *)&v38->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
  }
}

void sub_20B90D3CC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2547292E0);
  _Unwind_Resume(a1);
}

uint64_t sub_20B90D428(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  sub_20B90D724(v2, *(char **)(a1 + 32), *(char **)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
  return v2;
}

void sub_20B90D470(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x1012C403EBA5055);
  _Unwind_Resume(a1);
}

void sub_20B90D494(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  sub_20B90D504(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

_QWORD *sub_20B90D504(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_24C46BC58;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20B90D568(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B90D6E8((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void sub_20B90D584(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B90D5A8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    sub_20B90D61C(result);
    JUMPOUT(0x20BD39CB0);
  }
  return result;
}

uint64_t sub_20B90D5DC(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45E580))
    return a1 + 24;
  else
    return 0;
}

uint64_t sub_20B90D61C(uint64_t a1)
{
  void *v2;
  const char *v3;
  int v4;
  int v5;

  v2 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    if (*(_BYTE *)(a1 + 68))
    {
      munmap(*(void **)a1, *(_QWORD *)(a1 + 8));
    }
    else
    {
      if (*(_DWORD *)(a1 + 64) != 2)
        goto LABEL_10;
      v3 = (const char *)(a1 + 16);
      if (*(char *)(a1 + 39) < 0)
        v3 = *(const char **)v3;
      v4 = open(v3, 2);
      v5 = v4;
      v2 = *(void **)a1;
      if ((v4 & 0x80000000) == 0)
      {
        write(v4, *(const void **)a1, *(_QWORD *)(a1 + 8));
        close(v5);
        v2 = *(void **)a1;
      }
      if (v2)
LABEL_10:
        MEMORY[0x20BD39C80](v2, 0x1000C8077774924);
    }
  }
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t sub_20B90D6E8(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_20B90D61C(result);
    JUMPOUT(0x20BD39CB0);
  }
  return result;
}

uint64_t sub_20B90D724(uint64_t a1, char *a2, char *a3, int a4)
{
  int v8;
  int v9;
  off_t st_size;
  void *v11;
  void *v12;
  void *exception;
  void *v15;
  stat v16;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  sub_20B80BBD0((_QWORD *)(a1 + 16), a2);
  sub_20B80BBD0((_QWORD *)(a1 + 40), a3);
  *(_DWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 68) = a4;
  if (!strcmp(a3, "r"))
  {
    *(_DWORD *)(a1 + 64) = 0;
    v8 = open(a2, 0);
  }
  else
  {
    if (strcmp(a3, "r+"))
    {
      exception = __cxa_allocate_exception(0x20uLL);
      sub_20B90D9E4((uint64_t)exception, 1);
      goto LABEL_17;
    }
    *(_DWORD *)(a1 + 64) = 514;
    v8 = open(a2, 514, 384);
  }
  v9 = v8;
  if (v8 < 0)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_20B90D9E4((uint64_t)exception, 2);
    goto LABEL_17;
  }
  if (fstat(v8, &v16) < 0)
  {
    close(v9);
    exception = __cxa_allocate_exception(0x20uLL);
    sub_20B90D9E4((uint64_t)exception, 3);
    goto LABEL_17;
  }
  st_size = v16.st_size;
  *(_QWORD *)(a1 + 8) = v16.st_size;
  if (!a4)
  {
    v12 = (void *)operator new[]();
    *(_QWORD *)a1 = v12;
    if ((read(v9, v12, *(_QWORD *)(a1 + 8)) & 0x8000000000000000) == 0)
      goto LABEL_12;
    close(v9);
    exception = __cxa_allocate_exception(0x20uLL);
    sub_20B90D9E4((uint64_t)exception, 5);
LABEL_17:
    __cxa_throw(exception, (struct type_info *)&unk_24C45B6B8, (void (*)(void *))sub_20B90D9A4);
  }
  if (st_size)
  {
    v11 = mmap(0, st_size, *(_DWORD *)(a1 + 64) & 2 | 1u, 1, v9, 0);
    if (v11 == (void *)-1)
    {
      close(v9);
      v15 = __cxa_allocate_exception(0x20uLL);
      sub_20B90D9E4((uint64_t)v15, 4);
      __cxa_throw(v15, (struct type_info *)&unk_24C45B6B8, (void (*)(void *))sub_20B90D9A4);
    }
    *(_QWORD *)a1 = v11;
  }
LABEL_12:
  close(v9);
  return a1;
}

void sub_20B90D94C(_Unwind_Exception *a1)
{
  void **v1;
  uint64_t v2;
  void **v3;
  void *v4;

  __cxa_free_exception(v4);
  if (*(char *)(v2 + 63) < 0)
    operator delete(*v3);
  if (*(char *)(v2 + 39) < 0)
    operator delete(*v1);
  _Unwind_Resume(a1);
}

void sub_20B90D9A4(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&unk_24C45F3D0;
  if (SHIBYTE(this[3].__vftable) < 0)
    operator delete(this[1].__vftable);
  std::exception::~exception(this);
}

uint64_t sub_20B90D9E4(uint64_t a1, int a2)
{
  uint64_t v3;
  __int128 v5;
  uint64_t v6;

  *(_QWORD *)a1 = &unk_24C45F3D0;
  *(_QWORD *)(a1 + 8) = 0;
  v3 = a1 + 8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  switch(a2)
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      std::operator+<char>();
      if (*(char *)(a1 + 31) < 0)
        operator delete(*(void **)v3);
      *(_OWORD *)v3 = v5;
      *(_QWORD *)(v3 + 16) = v6;
      break;
    default:
      return a1;
  }
  return a1;
}

void sub_20B90DB00(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  std::exception::~exception((std::exception *)v1);
  _Unwind_Resume(a1);
}

void sub_20B90DB38(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&unk_24C45F3D0;
  if (SHIBYTE(this[3].__vftable) < 0)
    operator delete(this[1].__vftable);
  std::exception::~exception(this);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B90DB8C(uint64_t a1)
{
  uint64_t result;

  result = a1 + 8;
  if (*(char *)(a1 + 31) < 0)
    return *(_QWORD *)result;
  return result;
}

uint64_t **sub_20B90DBA8(uint64_t **a1, unsigned int *a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unsigned int v7;
  uint64_t **v8;
  unsigned int v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v10 + 7) = *a3;
    sub_20B8296A0(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

BOOL sub_20B90DC60(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;

  v3 = a1[3];
  if (v3)
  {
    v5 = a1[2];
    if (*(_WORD *)(v5 + 2 * v3 - 2) != 32)
    {
      v6 = a1[6];
      v7 = a1[7];
      if (v6 != v7)
      {
        v10 = *(_DWORD *)(v7 - 4);
        v9 = v7 - 4;
        v11 = *(_QWORD *)(a2 + 8);
        if (*(_DWORD *)(v11 + 52) == v10)
        {
          a1[7] = v9;
          v12 = v3 + 1;
          while (1)
          {
            v13 = v12 - 2;
            if ((int)(v12 - 2) < 0)
              break;
            --v12;
            if (*(_WORD *)(v5 + 2 * v13) == 32)
            {
              a1[2] = v5 + 2 * v12;
              a1[3] = v3 - v12;
              return v6 != v9;
            }
          }
          return v6 != v9;
        }
        else
        {
          v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 8) + 512))(*(_QWORD *)(v11 + 8));
          v16 = v15;
          if (sub_20B8AE7D4(v14, v15)
            && (v16 >= v16 - 3 ? (v17 = v16 - 3) : (v17 = v16),
                (v18 = (*(uint64_t (**)(_QWORD, uint64_t, unint64_t))(**(_QWORD **)(*(_QWORD *)(a2 + 8)
                                                                                                  + 8)
                                                                                    + 504))(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8), v14, v17)) != 0))
          {
            *(_DWORD *)(a1[7] - 4) = v18;
            v19 = a1[3];
            v20 = v19 + 1;
            while (1)
            {
              v21 = v20 - 2;
              if ((int)(v20 - 2) < 0)
                break;
              v22 = a1[2];
              --v20;
              if (*(_WORD *)(v22 + 2 * v21) == 32)
              {
                a1[2] = v22 + 2 * v20;
                a1[3] = v19 - v20;
                return 1;
              }
            }
            return 1;
          }
          else
          {
            return 0;
          }
        }
      }
    }
  }
  return a3;
}

BOOL sub_20B90DD8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v5 = *(unsigned __int16 *)(a2 + 2 * a3 - 2) == 32;
  v6 = a3 - v5;
  v7 = *(_QWORD **)(a1 + 40);
  if (!v7 || (v8 = 1, (sub_20B9D72A8(v7, a2, a3 - v5, 1) & 1) == 0))
  {
    v9 = *(_QWORD *)(a1 + 32);
    v8 = 0;
    if (v9)
    {
      LODWORD(v11) = 0;
      if (sub_20BA22818(v9, a2, v6, &v11) && (v11 & 6) != 0)
        return 1;
    }
  }
  return v8;
}

void sub_20B90DE2C(uint64_t a1@<X0>, int *a2@<X1>, __int16 *a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t *a6@<X8>)
{
  float v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const __CFLocale **v17;
  const __CFLocale *v18;
  int v19;
  uint64_t v20;
  void *__p;
  _BYTE *v22;
  uint64_t v23;
  __int16 v24;
  void **p_p;

  __p = 0;
  v22 = 0;
  v23 = 0;
  v12 = *(float *)a2;
  if (*a2 == 1)
  {
    v13 = *((float *)a2 + 1);
    v14 = a2[2];
    sub_20B8B17F4(*((_WORD **)a2 + 2), (_WORD *)(*((_QWORD *)a2 + 2) + 2 * *((_QWORD *)a2 + 3)), (uint64_t)&__p);
    v15 = (v22 - (_BYTE *)__p) >> 1;
  }
  else
  {
    v14 = 0;
    v15 = 0;
    v13 = -1.5;
  }
  sub_20B87D570(&__p, v15 + a4);
  p_p = &__p;
  if (a4)
  {
    v16 = 2 * a4;
    do
    {
      v24 = *a3;
      sub_20B888330((uint64_t *)&p_p, &v24);
      ++a3;
      v16 -= 2;
    }
    while (v16);
  }
  if (*((_WORD *)v22 - 1) == 32)
    v22 -= 2;
  v17 = *(const __CFLocale ***)(a1 + 32);
  if (v17)
    v18 = *v17;
  else
    v18 = 0;
  v19 = sub_20B8D0E78(v18);
  v20 = operator new();
  sub_20B9596C4(v20, (char *)__p, (v22 - (_BYTE *)__p) >> 1, *((void **)a2 + 4), *((_QWORD *)a2 + 5), LODWORD(v12) == 1, 88, v19, v13, 2, a5, 0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 480))(v20, v14);
  *a6 = v20;
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
}

void sub_20B90DFB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B90E01C(uint64_t a1, unsigned int a2)
{
  unint64_t v4;
  uint64_t *v5;
  uint8x8_t v6;
  unint64_t v7;
  uint64_t **v8;
  uint64_t *i;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  const void **v14;
  unsigned int v15;

  v15 = a2;
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v5 = (uint64_t *)(a1 + 8);
    v6 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      v7 = a2;
      if (v4 <= a2)
        v7 = a2 % v4;
    }
    else
    {
      v7 = ((_DWORD)v4 - 1) & a2;
    }
    v8 = *(uint64_t ***)(*v5 + 8 * v7);
    if (v8)
    {
      for (i = *v8; i; i = (uint64_t *)*i)
      {
        v10 = i[1];
        if (v10 == a2)
        {
          if (*((_DWORD *)i + 4) == a2)
          {
            v11 = sub_20B90FEF0(v5, a2, &v15);
            v12 = v11[4];
            v13 = v11[3];
            while (v12 != v13)
              v12 = sub_20B811FE4(v12 - 16);
            v11[4] = v13;
            break;
          }
        }
        else
        {
          if (v6.u32[0] > 1uLL)
          {
            if (v10 >= v4)
              v10 %= v4;
          }
          else
          {
            v10 &= v4 - 1;
          }
          if (v10 != v7)
            break;
        }
      }
    }
  }
  if (a2 == 3)
  {
    *(_WORD *)(a1 + 4) = 0;
    v14 = (const void **)(a1 + 128);
    goto LABEL_25;
  }
  if (a2 == 2)
  {
    sub_20B87AA1C((const void **)(a1 + 96), 0);
    *(_BYTE *)(a1 + 4) = 0;
    *(_WORD *)(a1 + 6) = 0;
    sub_20B87E150((const void **)(a1 + 136), 0);
    sub_20B87E150((const void **)(a1 + 144), 0);
    v14 = (const void **)(a1 + 152);
LABEL_25:
    sub_20B87E150(v14, 0);
  }
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 48);
}

uint64_t sub_20B90E194(uint64_t a1, int a2, CFArrayRef theArray)
{
  uint64_t v5;
  const void *ValueAtIndex;
  CFTypeID v7;
  uint64_t v8;

  *(_WORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 106) = 0;
  if (a2 == 1)
  {
    v8 = sub_20B90ED94(a1, theArray);
LABEL_11:
    v5 = v8;
    goto LABEL_12;
  }
  if (a2 == 3)
  {
    v8 = sub_20B90F0FC(a1, theArray);
    goto LABEL_11;
  }
  v5 = 0;
  if (a2 == 2)
  {
    if (theArray
      && CFArrayGetCount(theArray)
      && (ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0), v7 = CFGetTypeID(ValueAtIndex), v7 == CFURLGetTypeID()))
    {
      v8 = sub_20B90E25C(a1, theArray);
    }
    else
    {
      v8 = (uint64_t)sub_20B90E388(a1, theArray);
    }
    goto LABEL_11;
  }
LABEL_12:
  sub_20B90F360((_QWORD *)a1);
  return v5;
}

uint64_t sub_20B90E25C(uint64_t a1, const __CFArray *a2)
{
  __CFArray *Mutable;
  int v5;
  CFIndex i;
  const void *ValueAtIndex;
  CFTypeID v8;
  unsigned int v9;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  v5 = 0;
  for (i = 0; i < CFArrayGetCount(a2); ++i)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(a2, i);
    v8 = CFGetTypeID(ValueAtIndex);
    if (v8 == CFURLGetTypeID())
    {
      if (sub_20B9AEADC((const __CFURL *)ValueAtIndex))
      {
        if ((v5 & 1) != 0)
          v5 = 1;
        else
          v5 = sub_20B90FBE0(a1, (CFURLRef)ValueAtIndex);
      }
      else
      {
        CFArrayAppendValue(Mutable, ValueAtIndex);
      }
    }
  }
  v9 = sub_20B90FCA4(a1, Mutable);
  if (Mutable)
    CFRelease(Mutable);
  return (v5 | v9) & 1;
}

void sub_20B90E364(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B8B035C((const void **)va, 0);
  _Unwind_Resume(a1);
}

const __CFArray *sub_20B90E388(uint64_t a1, CFArrayRef theArray)
{
  const __CFDictionary *ValueAtIndex;
  const __CFArray *Value;
  CFIndex Count;
  __CFSet *Mutable;
  CFIndex v8;
  _QWORD *v9;
  _QWORD *v10;
  const void *v11;
  uint64_t v12;
  CFStringRef v13;
  NSObject *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  const void **v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  CFStringRef *v33;
  char *v34;
  const __CFString *v35;
  CFStringRef *v36;
  char *v37;
  const __CFString *v38;
  __int128 v39;
  char *v40;
  __int128 v41;
  char *v42;
  const __CFString **v44;
  const __CFString **v45;
  unsigned int v46;
  std::string *p_buf;
  unsigned int *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::string::size_type size;
  std::string *p_cf;
  _QWORD *v54;
  uint64_t v55;
  const __CFAllocator *v56;
  __CFDictionary *v57;
  unint64_t v58;
  unsigned __int16 *v59;
  const UniChar *v60;
  unsigned int v61;
  CFStringRef v62;
  const UniChar *v63;
  int v64;
  CFNumberRef v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  _BOOL4 v69;
  BOOL v70;
  int v72;
  const void **v73;
  __int128 v74;
  char *v75;
  __int128 v76;
  char *v77;
  std::string cf;
  CFNumberRef v79;
  int valuePtr;
  std::string buf;
  char *v82;
  uint64_t v83;
  uint8_t v84[24];
  uint64_t v85;

  v85 = *MEMORY[0x24BDAC8D0];
  if (!theArray
    || CFArrayGetCount(theArray) != 1
    || (ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, 0)) == 0)
  {
    sub_20B90E01C(a1, 2u);
    return 0;
  }
  Value = (const __CFArray *)CFDictionaryGetValue(ValueAtIndex, kMecabraAssetDataFilePathsKey);
  sub_20B90E01C(a1, 2u);
  if (!Value)
    return Value;
  if (CFArrayGetCount(Value) > 50)
    return 0;
  Count = CFArrayGetCount(Value);
  v76 = 0uLL;
  v77 = 0;
  v74 = 0uLL;
  v75 = 0;
  Mutable = CFSetCreateMutable(0, 0, MEMORY[0x24BDBD6B8]);
  if (Count >= 1)
  {
    v8 = 0;
    v73 = (const void **)(a1 + 120);
    v9 = &v77;
    v10 = &v75;
    do
    {
      v11 = CFArrayGetValueAtIndex(Value, v8);
      v12 = (uint64_t)v10;
      v13 = sub_20B90F518(v11);
      cf.__r_.__value_.__r.__words[0] = (std::string::size_type)v13;
      v14 = sub_20B9A7C5C(9u);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 138412290;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v13;
        _os_log_debug_impl(&dword_20B7F7000, v14, OS_LOG_TYPE_DEBUG, "[Mecabra] Set Non-regional assets: %@", (uint8_t *)&buf, 0xCu);
      }
      v10 = (_QWORD *)v12;
      if (v13)
      {
        if (!CFSetContainsValue(Mutable, v13))
        {
          CFSetAddValue(Mutable, v13);
          v15 = (uint64_t)v9;
          switch(sub_20B90F5BC((uint64_t)v13))
          {
            case 1u:
              v16 = (_QWORD *)*((_QWORD *)&v74 + 1);
              if (*((_QWORD *)&v74 + 1) >= (unint64_t)v75)
              {
                v27 = (_QWORD *)v74;
                v28 = (uint64_t)(*((_QWORD *)&v74 + 1) - v74) >> 3;
                v29 = v28 + 1;
                if ((unint64_t)(v28 + 1) >> 61)
LABEL_98:
                  sub_20B88B6B4();
                v30 = (uint64_t)&v75[-v74];
                if ((uint64_t)&v75[-v74] >> 2 > v29)
                  v29 = v30 >> 2;
                if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
                  v31 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v31 = v29;
                v83 = v12;
                if (v31)
                {
                  v32 = (char *)sub_20B800BE8(v12, v31);
                  v16 = (_QWORD *)*((_QWORD *)&v74 + 1);
                  v27 = (_QWORD *)v74;
                }
                else
                {
                  v32 = 0;
                }
                v36 = (CFStringRef *)&v32[8 * v28];
                v37 = &v32[8 * v31];
                v82 = v37;
                cf.__r_.__value_.__r.__words[0] = 0;
                *v36 = v13;
                buf.__r_.__value_.__r.__words[2] = (std::string::size_type)(v36 + 1);
                if (v16 == v27)
                {
                  v17 = v36 + 1;
                  v9 = (_QWORD *)v15;
                }
                else
                {
                  v9 = (_QWORD *)v15;
                  do
                  {
                    v38 = (const __CFString *)*--v16;
                    *v16 = 0;
                    *--v36 = v38;
                  }
                  while (v16 != v27);
                  v17 = (_QWORD *)buf.__r_.__value_.__r.__words[2];
                  v37 = v82;
                }
                v41 = v74;
                *(_QWORD *)&v74 = v36;
                *((_QWORD *)&v74 + 1) = v17;
                *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = v41;
                v42 = v75;
                v75 = v37;
                v82 = v42;
                buf.__r_.__value_.__r.__words[0] = v41;
                sub_20B88B6C8((uint64_t)&buf);
              }
              else
              {
                cf.__r_.__value_.__r.__words[0] = 0;
                **((_QWORD **)&v74 + 1) = v13;
                v17 = v16 + 1;
              }
              *((_QWORD *)&v74 + 1) = v17;
              break;
            case 2u:
              v19 = (_QWORD *)*((_QWORD *)&v76 + 1);
              if (*((_QWORD *)&v76 + 1) >= (unint64_t)v77)
              {
                v21 = (_QWORD *)v76;
                v22 = (uint64_t)(*((_QWORD *)&v76 + 1) - v76) >> 3;
                v23 = v22 + 1;
                if ((unint64_t)(v22 + 1) >> 61)
                  goto LABEL_98;
                v24 = (uint64_t)&v77[-v76];
                if ((uint64_t)&v77[-v76] >> 2 > v23)
                  v23 = v24 >> 2;
                if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
                  v25 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v25 = v23;
                v83 = v15;
                if (v25)
                {
                  v26 = (char *)sub_20B800BE8(v15, v25);
                  v19 = (_QWORD *)*((_QWORD *)&v76 + 1);
                  v21 = (_QWORD *)v76;
                }
                else
                {
                  v26 = 0;
                }
                v33 = (CFStringRef *)&v26[8 * v22];
                v34 = &v26[8 * v25];
                v82 = v34;
                cf.__r_.__value_.__r.__words[0] = 0;
                *v33 = v13;
                buf.__r_.__value_.__r.__words[2] = (std::string::size_type)(v33 + 1);
                if (v19 == v21)
                {
                  v20 = v33 + 1;
                  v9 = (_QWORD *)v15;
                }
                else
                {
                  v9 = (_QWORD *)v15;
                  do
                  {
                    v35 = (const __CFString *)*--v19;
                    *v19 = 0;
                    *--v33 = v35;
                  }
                  while (v19 != v21);
                  v20 = (_QWORD *)buf.__r_.__value_.__r.__words[2];
                  v34 = v82;
                }
                v39 = v76;
                *(_QWORD *)&v76 = v33;
                *((_QWORD *)&v76 + 1) = v20;
                *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = v39;
                v40 = v77;
                v77 = v34;
                v82 = v40;
                buf.__r_.__value_.__r.__words[0] = v39;
                sub_20B88B6C8((uint64_t)&buf);
              }
              else
              {
                cf.__r_.__value_.__r.__words[0] = 0;
                **((_QWORD **)&v76 + 1) = v13;
                v20 = v19 + 1;
              }
              *((_QWORD *)&v76 + 1) = v20;
              break;
            case 3u:
              *(_BYTE *)(a1 + 4) = 1;
              *(_BYTE *)(a1 + 6) = 1;
              goto LABEL_12;
            case 4u:
              *(_BYTE *)(a1 + 7) = 1;
              v18 = (const void **)(a1 + 136);
              goto LABEL_25;
            case 7u:
              if (!*v73 || CFStringCompare(v13, (CFStringRef)*v73, 0))
              {
                sub_20B88B52C(v73, v13);
                *(_BYTE *)(a1 + 106) = 1;
              }
              goto LABEL_12;
            case 8u:
              v18 = (const void **)(a1 + 144);
              goto LABEL_25;
            case 9u:
              v18 = (const void **)(a1 + 152);
LABEL_25:
              sub_20B88B52C(v18, v13);
              goto LABEL_12;
            default:
              goto LABEL_12;
          }
          v10 = (_QWORD *)v12;
        }
LABEL_12:
        if (cf.__r_.__value_.__r.__words[0])
          CFRelease(cf.__r_.__value_.__l.__data_);
      }
      ++v8;
    }
    while (v8 != Count);
  }
  sub_20B80BBD0(&cf, "");
  v45 = (const __CFString **)*((_QWORD *)&v76 + 1);
  v44 = (const __CFString **)v76;
  if ((_QWORD)v76 != *((_QWORD *)&v76 + 1))
  {
    v46 = 0;
    do
    {
      sub_20B8D1C98(*v44, &buf);
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_buf = &buf;
      else
        p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      sub_20B90CFC0((char *)p_buf, (uint64_t)"r", 1, v84);
      if (*(_QWORD *)v84)
      {
        v48 = **(unsigned int ***)v84;
        if (*(_DWORD *)(**(_QWORD **)v84 + 8) == 1 && v48[3] == 293715535 && *v48 > v46)
        {
          std::string::operator=(&cf, &buf);
          v46 = *v48;
        }
      }
      v49 = *(std::__shared_weak_count **)&v84[8];
      if (*(_QWORD *)&v84[8])
      {
        v50 = (unint64_t *)(*(_QWORD *)&v84[8] + 8);
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      ++v44;
    }
    while (v44 != v45);
  }
  size = HIBYTE(cf.__r_.__value_.__r.__words[2]);
  if ((cf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = cf.__r_.__value_.__l.__size_;
  if (!size)
    goto LABEL_109;
  *(_QWORD *)v84 = 0;
  *(_QWORD *)&v84[8] = 0;
  if ((cf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_cf = &cf;
  else
    p_cf = (std::string *)cf.__r_.__value_.__r.__words[0];
  sub_20B90CFC0((char *)p_cf, (uint64_t)"r", 1, &buf);
  *(_OWORD *)v84 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
  v54 = (_QWORD *)buf.__r_.__value_.__r.__words[0];
  if (buf.__r_.__value_.__r.__words[0])
  {
    v55 = *(_QWORD *)buf.__r_.__value_.__l.__data_;
    v56 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v57 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    if (*(_DWORD *)(v55 + 4))
    {
      v58 = 0;
      v59 = (unsigned __int16 *)(*v54 + 24);
      do
      {
        v61 = *v59;
        v60 = v59 + 1;
        v62 = CFStringCreateWithCharacters(v56, v60, v61);
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v62;
        v63 = &v60[v61];
        v64 = *(_DWORD *)v63;
        v59 = (unsigned __int16 *)(v63 + 2);
        valuePtr = v64;
        v65 = CFNumberCreate(v56, kCFNumberSInt32Type, &valuePtr);
        v79 = v65;
        CFDictionaryAddValue(v57, v62, v65);
        if (v65)
          CFRelease(v65);
        if (v62)
          CFRelease(v62);
        ++v58;
      }
      while (v58 < *(unsigned int *)(v55 + 4));
    }
  }
  else
  {
    v57 = 0;
  }
  v66 = *(std::__shared_weak_count **)&v84[8];
  if (*(_QWORD *)&v84[8])
  {
    v67 = (unint64_t *)(*(_QWORD *)&v84[8] + 8);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  if (!v57)
    goto LABEL_110;
  if (*(__CFDictionary **)(a1 + 96) == v57)
  {
    CFRelease(v57);
LABEL_109:
    LODWORD(v57) = 0;
    goto LABEL_110;
  }
  sub_20B87AA1C((const void **)(a1 + 96), v57);
  LODWORD(v57) = 1;
LABEL_110:
  if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(cf.__r_.__value_.__l.__data_);
  v69 = sub_20B90F6A8(a1, 2u, (const __CFString **)v74, *((const __CFString ***)&v74 + 1));
  if (*(_QWORD *)(a1 + 144))
    v70 = 0;
  else
    v70 = (*(unsigned __int8 *)(a1 + 7) | *(unsigned __int8 *)(a1 + 4) | *(unsigned __int8 *)(a1 + 106)) == 0;
  v72 = !v70 || *(_QWORD *)(a1 + 152) != 0 || v69;
  Value = (const __CFArray *)(v57 | v72);
  if ((_DWORD)Value == 1)
    *(_BYTE *)(a1 + 104) = 1;
  if (Mutable)
    CFRelease(Mutable);
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v74;
  sub_20B8E6798((void ***)&buf);
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v76;
  sub_20B8E6798((void ***)&buf);
  return Value;
}

void sub_20B90ECB0()
{
  uint64_t v0;

  __cxa_end_catch();
  sub_20B811FE4(v0 - 128);
  JUMPOUT(0x20B90ED50);
}

void sub_20B90ECC8()
{
  JUMPOUT(0x20B90ED6CLL);
}

void sub_20B90ECE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, const void *a16, char *a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  sub_20B811FE4(v29 - 128);
  if (a29 < 0)
    operator delete(__p);
  sub_20B88B718(&a16, 0);
  *(_QWORD *)(v29 - 128) = &a17;
  sub_20B8E6798((void ***)(v29 - 128));
  a17 = &a21;
  sub_20B8E6798((void ***)&a17);
  _Unwind_Resume(a1);
}

void sub_20B90ECE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,const void *a29)
{
  sub_20B87E150(&a29, 0);
  JUMPOUT(0x20B90ED0CLL);
}

void sub_20B90ED18(void *a1, int a2)
{
  if (a2)
    sub_20B854468(a1);
  JUMPOUT(0x20B90ED8CLL);
}

void sub_20B90ED30()
{
  JUMPOUT(0x20B90ED60);
}

void sub_20B90ED38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_20B87E150((const void **)va, 0);
  JUMPOUT(0x20B90ED60);
}

BOOL sub_20B90ED94(uint64_t a1, const __CFArray *a2)
{
  CFIndex Count;
  __CFSet *Mutable;
  CFIndex v5;
  const __CFDictionary *ValueAtIndex;
  const __CFArray *Value;
  const __CFArray *v8;
  CFIndex v9;
  CFIndex v10;
  const void *v11;
  CFStringRef v12;
  NSObject *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  void **v23;
  uint64_t v24;
  __int128 v25;
  char *v26;
  const __CFString **v27;
  const __CFString **v28;
  _BOOL8 v29;
  __int128 v32;
  _QWORD v33[3];
  const __CFString *v34;
  void **buf[3];
  char *v36;
  _QWORD *v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  sub_20B90E01C(a1, 1u);
  if (!a2)
    return 0;
  Count = CFArrayGetCount(a2);
  Mutable = CFSetCreateMutable(0, 0, MEMORY[0x24BDBD6B8]);
  v33[2] = Mutable;
  v32 = 0uLL;
  v33[0] = 0;
  if (Count >= 1)
  {
    v5 = 0;
    while (1)
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a2, v5);
      if (ValueAtIndex)
      {
        Value = (const __CFArray *)CFDictionaryGetValue(ValueAtIndex, kMecabraAssetDataFilePathsKey);
        v8 = Value;
        if (Value)
        {
          v9 = CFArrayGetCount(Value);
          if (v9 >= 1)
            break;
        }
      }
LABEL_31:
      if (++v5 == Count)
      {
        v28 = (const __CFString **)*((_QWORD *)&v32 + 1);
        v27 = (const __CFString **)v32;
        goto LABEL_35;
      }
    }
    v10 = 0;
    while (1)
    {
      v11 = CFArrayGetValueAtIndex(v8, v10);
      v12 = sub_20B90F518(v11);
      v34 = v12;
      v13 = sub_20B9A7C5C(9u);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf[0]) = 138412290;
        *(void ***)((char *)buf + 4) = &v12->isa;
        _os_log_debug_impl(&dword_20B7F7000, v13, OS_LOG_TYPE_DEBUG, "[Mecabra] Set region lexicon: %@", (uint8_t *)buf, 0xCu);
        if (!v12)
          goto LABEL_30;
      }
      else if (!v12)
      {
        goto LABEL_30;
      }
      if (!CFSetContainsValue(Mutable, v12))
      {
        CFSetAddValue(Mutable, v12);
        v14 = (_QWORD *)*((_QWORD *)&v32 + 1);
        if (*((_QWORD *)&v32 + 1) < v33[0])
        {
          **((_QWORD **)&v32 + 1) = v12;
          *((_QWORD *)&v32 + 1) = v14 + 1;
          goto LABEL_30;
        }
        v15 = (_QWORD *)v32;
        v16 = (uint64_t)(*((_QWORD *)&v32 + 1) - v32) >> 3;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 61)
          sub_20B88B6B4();
        v18 = v33[0] - v32;
        if ((uint64_t)(v33[0] - v32) >> 2 > v17)
          v17 = v18 >> 2;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
          v19 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        v37 = v33;
        if (v19)
        {
          v20 = (char *)sub_20B800BE8((uint64_t)v33, v19);
          v14 = (_QWORD *)*((_QWORD *)&v32 + 1);
          v15 = (_QWORD *)v32;
        }
        else
        {
          v20 = 0;
        }
        v21 = &v20[8 * v16];
        v22 = &v20[8 * v19];
        v36 = v22;
        v34 = 0;
        *(_QWORD *)v21 = v12;
        v23 = (void **)(v21 + 8);
        buf[2] = (void **)(v21 + 8);
        if (v14 == v15)
        {
          v12 = 0;
        }
        else
        {
          do
          {
            v24 = *--v14;
            *v14 = 0;
            *((_QWORD *)v21 - 1) = v24;
            v21 -= 8;
          }
          while (v14 != v15);
          v23 = buf[2];
          v22 = v36;
          v12 = v34;
        }
        v25 = v32;
        *(_QWORD *)&v32 = v21;
        *(_OWORD *)&buf[1] = v25;
        v26 = (char *)v33[0];
        v33[0] = v22;
        v36 = v26;
        buf[0] = (void **)v25;
        sub_20B88B6C8((uint64_t)buf);
        *((_QWORD *)&v32 + 1) = v23;
        if (!v12)
          goto LABEL_30;
      }
      CFRelease(v12);
LABEL_30:
      if (++v10 == v9)
        goto LABEL_31;
    }
  }
  v28 = 0;
  v27 = 0;
LABEL_35:
  v29 = sub_20B90F6A8(a1, 1u, v27, v28);
  if (v29)
    *(_BYTE *)(a1 + 104) = 1;
  buf[0] = (void **)&v32;
  sub_20B8E6798(buf);
  if (Mutable)
    CFRelease(Mutable);
  return v29;
}

void sub_20B90F090(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18)
{
  if (a2)
    sub_20B854468(exception_object);
  _Unwind_Resume(exception_object);
}

BOOL sub_20B90F0FC(uint64_t a1, const __CFArray *a2)
{
  CFIndex Count;
  __CFSet *Mutable;
  CFIndex i;
  const __CFDictionary *ValueAtIndex;
  const __CFArray *v8;
  const __CFArray *v9;
  CFIndex v10;
  CFIndex j;
  const void *v12;
  CFStringRef v13;
  NSObject *v14;
  CFStringRef value;
  _QWORD buf[4];

  buf[3] = *MEMORY[0x24BDAC8D0];
  sub_20B90E01C(a1, 3u);
  if (a2)
  {
    Count = CFArrayGetCount(a2);
    Mutable = CFSetCreateMutable(0, 0, MEMORY[0x24BDBD6B8]);
    buf[0] = Mutable;
    if (Count >= 1)
    {
      for (i = 0; i != Count; ++i)
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a2, i);
        if (ValueAtIndex)
        {
          v8 = (const __CFArray *)CFDictionaryGetValue(ValueAtIndex, kMecabraAssetDataFilePathsKey);
          v9 = v8;
          if (v8)
          {
            v10 = CFArrayGetCount(v8);
            if (v10 >= 1)
            {
              for (j = 0; v10 != j; ++j)
              {
                v12 = CFArrayGetValueAtIndex(v9, j);
                if (v12)
                {
                  v13 = sub_20B90F518(v12);
                  value = v13;
                  if (v13)
                  {
                    if (!CFSetContainsValue(Mutable, v13))
                    {
                      CFSetAddValue(Mutable, value);
                      if (sub_20B90F5BC((uint64_t)value) == 3)
                        goto LABEL_17;
                    }
                    if (value)
                      CFRelease(value);
                  }
                }
              }
            }
          }
        }
      }
    }
    value = 0;
LABEL_17:
    if (Mutable)
      CFRelease(Mutable);
    if (value)
    {
      v14 = sub_20B9A7C5C(9u);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf[0]) = 138412290;
        *(_QWORD *)((char *)buf + 4) = value;
        _os_log_debug_impl(&dword_20B7F7000, v14, OS_LOG_TYPE_DEBUG, "[Mecabra] Set dialect language model: %@", (uint8_t *)buf, 0xCu);
      }
      sub_20B87E150((const void **)(a1 + 128), value);
    }
    *(_WORD *)(a1 + 4) = 257;
    *(_BYTE *)(a1 + 104) = 1;
  }
  return a2 != 0;
}

void sub_20B90F2FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14)
{
  if (a2)
    sub_20B854468(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B90F360(_QWORD *a1)
{
  _QWORD *i;
  _QWORD *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  _QWORD *v29;
  char *v30;
  char *v31;
  uint64_t v32;

  for (i = (_QWORD *)a1[3]; i; i = (_QWORD *)*i)
  {
    v3 = (_QWORD *)i[3];
    v4 = (_QWORD *)i[4];
    while (v3 != v4)
    {
      v5 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v3 + 24))(*v3);
      v6 = *v3;
      if ((v5 & 1) != 0)
      {
        v11 = (_QWORD *)a1[10];
        v10 = a1[11];
        if ((unint64_t)v11 >= v10)
        {
          v19 = a1[9];
          v20 = ((uint64_t)v11 - v19) >> 3;
          if ((unint64_t)(v20 + 1) >> 61)
LABEL_42:
            sub_20B80CDD8();
          v21 = v10 - v19;
          v22 = v21 >> 2;
          if (v21 >> 2 <= (unint64_t)(v20 + 1))
            v22 = v20 + 1;
          if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
            v23 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v23 = v22;
          if (v23)
            v23 = (unint64_t)sub_20B87FB70(v23);
          else
            v24 = 0;
          v29 = (_QWORD *)(v23 + 8 * v20);
          *v29 = v6;
          v12 = v29 + 1;
          v31 = (char *)a1[9];
          v30 = (char *)a1[10];
          if (v30 != v31)
          {
            do
            {
              v32 = *((_QWORD *)v30 - 1);
              v30 -= 8;
              *--v29 = v32;
            }
            while (v30 != v31);
            v30 = (char *)a1[9];
          }
          a1[9] = v29;
          a1[10] = v12;
          a1[11] = v23 + 8 * v24;
          if (v30)
            operator delete(v30);
        }
        else
        {
          *v11 = v6;
          v12 = v11 + 1;
        }
        a1[10] = v12;
      }
      else
      {
        v8 = (_QWORD *)a1[7];
        v7 = a1[8];
        if ((unint64_t)v8 >= v7)
        {
          v13 = a1[6];
          v14 = ((uint64_t)v8 - v13) >> 3;
          if ((unint64_t)(v14 + 1) >> 61)
            goto LABEL_42;
          v15 = v7 - v13;
          v16 = v15 >> 2;
          if (v15 >> 2 <= (unint64_t)(v14 + 1))
            v16 = v14 + 1;
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
            v17 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v17 = v16;
          if (v17)
            v17 = (unint64_t)sub_20B87FB70(v17);
          else
            v18 = 0;
          v25 = (_QWORD *)(v17 + 8 * v14);
          *v25 = v6;
          v9 = v25 + 1;
          v27 = (char *)a1[6];
          v26 = (char *)a1[7];
          if (v26 != v27)
          {
            do
            {
              v28 = *((_QWORD *)v26 - 1);
              v26 -= 8;
              *--v25 = v28;
            }
            while (v26 != v27);
            v26 = (char *)a1[6];
          }
          a1[6] = v25;
          a1[7] = v9;
          a1[8] = v17 + 8 * v18;
          if (v26)
            operator delete(v26);
        }
        else
        {
          *v8 = v6;
          v9 = v8 + 1;
        }
        a1[7] = v9;
      }
      v3 += 2;
    }
  }
}

CFStringRef sub_20B90F518(const void *a1)
{
  CFTypeID v2;
  CFTypeID v3;
  CFTypeRef cf;

  cf = 0;
  v2 = CFGetTypeID(a1);
  if (v2 == CFURLGetTypeID())
    return CFURLCopyFileSystemPath((CFURLRef)a1, kCFURLPOSIXPathStyle);
  v3 = CFGetTypeID(a1);
  if (v3 == CFStringGetTypeID())
    sub_20B88B52C(&cf, a1);
  return (CFStringRef)cf;
}

void sub_20B90F5A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B87E150((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20B90F5BC(uint64_t result)
{
  const __CFString *v1;

  if (result)
  {
    v1 = (const __CFString *)result;
    if (CFStringFind((CFStringRef)result, CFSTR("ucm"), 0).location == -1)
    {
      if (CFStringHasSuffix(v1, CFSTR(".dic")))
      {
        return 1;
      }
      else if (CFStringHasSuffix(v1, CFSTR(".lm")))
      {
        return 3;
      }
      else if (CFStringHasSuffix(v1, CFSTR(".rnnlm")))
      {
        return 4;
      }
      else if (CFStringHasSuffix(v1, CFSTR("Wubixing")))
      {
        return 7;
      }
      else if (CFStringHasSuffix(v1, CFSTR("customized_lexicon.dat")))
      {
        return 8;
      }
      else if (CFStringFind(v1, CFSTR("blocklist"), 0).location == -1)
      {
        return 0;
      }
      else
      {
        return 9;
      }
    }
    else
    {
      return 2;
    }
  }
  return result;
}

BOOL sub_20B90F6A8(uint64_t a1, unsigned int a2, const __CFString **a3, const __CFString **a4)
{
  uint64_t v4;
  unint64_t v5;
  const __CFString **v7;
  unsigned int v9;
  void **v10;
  const __CFString *v11;
  int v12;
  unsigned int v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  _BOOL8 v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  void **v29;
  char *v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  unsigned int v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *__p[2];
  char v67;
  __int128 v68;
  char *v69;
  char *v70;
  uint64_t v71;
  unsigned int v72;
  void **v73[5];
  int v74;

  v72 = a2;
  v4 = 50;
  if (a2 != 2)
    v4 = 0;
  if (a2 == 1)
    v5 = 2;
  else
    v5 = v4;
  if (!v5)
    return 0;
  v7 = a3;
  v69 = 0;
  v70 = 0;
  v71 = 0;
  if (a3 == a4)
  {
    v17 = 0;
    goto LABEL_35;
  }
  v9 = 0;
  v10 = (void **)MEMORY[0x24BDAC760];
  do
  {
    v11 = *v7;
    v12 = sub_20B8D0E3C(*(_DWORD *)a1);
    sub_20B8D1C98(v11, __p);
    v73[0] = v10;
    v73[1] = (void **)0x40000000;
    v73[2] = (void **)sub_20B894E44;
    v73[3] = (void **)&unk_24C46C098;
    v74 = v12;
    v73[4] = __p;
    sub_20B8945C4(__p, (uint64_t)v73, 0, (uint64_t *)&v68);
    if (v67 < 0)
      operator delete(__p[0]);
    if ((_QWORD)v68)
    {
      v13 = *(_DWORD *)(v68 + 32);
      if (v13 >= v9)
      {
        sub_20B9054E0(&v69, &v68);
        v9 = v13;
      }
    }
    v14 = (std::__shared_weak_count *)*((_QWORD *)&v68 + 1);
    if (*((_QWORD *)&v68 + 1))
    {
      v15 = (unint64_t *)(*((_QWORD *)&v68 + 1) + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    ++v7;
  }
  while (v7 != a4);
  v17 = v69;
  v18 = v70;
  if (v69 != v70)
  {
    while (1)
    {
      v19 = *(_QWORD *)v17;
      v20 = (std::__shared_weak_count *)*((_QWORD *)v17 + 1);
      if (v20)
      {
        p_shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldxr(p_shared_owners);
        while (__stxr(v22 + 1, p_shared_owners));
        v23 = *(_DWORD *)(v19 + 32);
        do
          v24 = __ldaxr(p_shared_owners);
        while (__stlxr(v24 - 1, p_shared_owners));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
        if (v23 < v9)
        {
LABEL_69:
          if (v17 != v18)
          {
            v54 = v17 + 16;
            if (v17 + 16 != v18)
            {
              v55 = v17;
              while (1)
              {
                v56 = *((_QWORD *)v55 + 2);
                v57 = (std::__shared_weak_count *)*((_QWORD *)v55 + 3);
                v55 = v54;
                if (v57)
                {
                  v58 = (unint64_t *)&v57->__shared_owners_;
                  do
                    v59 = __ldxr(v58);
                  while (__stxr(v59 + 1, v58));
                  v60 = *(_DWORD *)(v56 + 32);
                  do
                    v61 = __ldaxr(v58);
                  while (__stlxr(v61 - 1, v58));
                  if (!v61)
                  {
                    ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                    std::__shared_weak_count::__release_weak(v57);
                  }
                  if (v60 < v9)
                    goto LABEL_81;
                }
                else if (*(_DWORD *)(v56 + 32) < v9)
                {
                  goto LABEL_81;
                }
                sub_20B82E770((uint64_t)v17, (__int128 *)v55);
                v17 += 16;
LABEL_81:
                v54 = v55 + 16;
                if (v55 + 16 == v18)
                  goto LABEL_35;
              }
            }
          }
          break;
        }
      }
      else if (*(_DWORD *)(v19 + 32) < v9)
      {
        goto LABEL_69;
      }
      v17 += 16;
      if (v17 == v18)
      {
        v17 = v18;
        break;
      }
    }
  }
LABEL_35:
  sub_20B90FD7C((uint64_t)&v69, (uint64_t)v17, (uint64_t)v70);
  v26 = (v70 - v69) >> 4;
  if (v26 > v5)
    sub_20B90FD7C((uint64_t)&v69, (uint64_t)&v69[16 * v5], (uint64_t)&v69[16 * v26]);
  v27 = sub_20B90FEF0((uint64_t *)(a1 + 8), v72, &v72);
  v28 = v27;
  v29 = (void **)(v27 + 3);
  if (v27 + 3 != &v69)
  {
    v31 = (uint64_t *)v69;
    v30 = v70;
    v32 = v70 - v69;
    v33 = (v70 - v69) >> 4;
    v34 = v27[5];
    v35 = (_QWORD *)v27[3];
    if (v33 <= (v34 - (uint64_t)v35) >> 4)
    {
      v45 = v27[4];
      v46 = (v45 - (uint64_t)v35) >> 4;
      if (v46 >= v33)
      {
        if (v69 == v70)
        {
          v62 = v28[3];
        }
        else
        {
          v62 = v28[3];
          do
          {
            v63 = *v31;
            v64 = v31[1];
            v31 += 2;
            sub_20B90FE7C(v35, v63, v64);
            v35 += 2;
            v62 += 16;
          }
          while (v31 != (uint64_t *)v30);
          v45 = v28[4];
        }
        while (v45 != v62)
          v45 = sub_20B811FE4(v45 - 16);
        v28[4] = v62;
      }
      else
      {
        v47 = &v69[16 * v46];
        if ((_QWORD *)v45 != v35)
        {
          do
          {
            v48 = *v31;
            v49 = v31[1];
            v31 += 2;
            sub_20B90FE7C(v35, v48, v49);
            v35 += 2;
          }
          while (v31 != (uint64_t *)v47);
          v35 = (_QWORD *)v28[4];
        }
        v50 = v35;
        if (v47 != v30)
        {
          v50 = v35;
          do
          {
            *v50 = *(_QWORD *)v47;
            v51 = *((_QWORD *)v47 + 1);
            v50[1] = v51;
            if (v51)
            {
              v52 = (unint64_t *)(v51 + 8);
              do
                v53 = __ldxr(v52);
              while (__stxr(v53 + 1, v52));
            }
            v47 += 16;
            v50 += 2;
          }
          while (v47 != v30);
        }
        v28[4] = v50;
      }
    }
    else
    {
      if (v35)
      {
        v36 = v27[4];
        v37 = (void *)v28[3];
        if ((_QWORD *)v36 != v35)
        {
          do
            v36 = sub_20B811FE4(v36 - 16);
          while ((_QWORD *)v36 != v35);
          v37 = *v29;
        }
        v28[4] = v35;
        operator delete(v37);
        v34 = 0;
        *v29 = 0;
        v29[1] = 0;
        v29[2] = 0;
      }
      if (v32 < 0)
        goto LABEL_95;
      v38 = v34 >> 3;
      if (v34 >> 3 <= v33)
        v38 = v33;
      v39 = (unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v38;
      if (v39 >> 60)
LABEL_95:
        sub_20B80CDD8();
      v40 = sub_20B829AD0((uint64_t)(v28 + 5), v39);
      v28[3] = v40;
      v28[4] = v40;
      v28[5] = &v40[2 * v41];
      while (v31 != (uint64_t *)v30)
      {
        *v40 = *v31;
        v42 = v31[1];
        v40[1] = v42;
        if (v42)
        {
          v43 = (unint64_t *)(v42 + 8);
          do
            v44 = __ldxr(v43);
          while (__stxr(v44 + 1, v43));
        }
        v31 += 2;
        v40 += 2;
      }
      v28[4] = v40;
    }
  }
  v25 = v69 != v70;
  v73[0] = (void **)&v69;
  sub_20B8E736C(v73);
  return v25;
}

void sub_20B90FB94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  a10 = (void **)&a15;
  sub_20B8E736C(&a10);
  _Unwind_Resume(a1);
}

void sub_20B90FBC8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  JUMPOUT(0x20B90FBB0);
}

uint64_t sub_20B90FBE0(uint64_t a1, CFURLRef relativeURL)
{
  CFURLRef v3;
  CFURLRef v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = CFURLCopyAbsoluteURL(relativeURL);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(const void **)(a1 + 112);
  if (v5 && CFEqual(v3, v5)
    || sub_20B8D0E3C(*(_DWORD *)a1) != 5
    || (v6 = sub_20BA1C4F4(), !sub_20BA1C634(v6, v4)))
  {
    v7 = 0;
  }
  else
  {
    sub_20B90FD30((const void **)(a1 + 112), v4);
    v7 = 1;
    *(_BYTE *)(a1 + 105) = 1;
  }
  CFRelease(v4);
  return v7;
}

void sub_20B90FC8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B876164((const void **)va, 0);
  _Unwind_Resume(a1);
}

const __CFArray *sub_20B90FCA4(uint64_t a1, CFArrayRef theArray)
{
  const __CFArray *v4;
  const __CFArray *v5;

  if (!theArray || !CFArrayGetCount(theArray))
    return 0;
  v4 = sub_20B9AEC10(theArray);
  v5 = sub_20B90E388(a1, v4);
  if (v4)
    CFRelease(v4);
  return v5;
}

void sub_20B90FD18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B88B74C((const void **)va, 0);
  _Unwind_Resume(a1);
}

void sub_20B90FD30(const void **a1, CFTypeRef cf)
{
  if (*a1 != cf)
  {
    CFRetain(cf);
    sub_20B876164(a1, cf);
  }
}

uint64_t sub_20B90FD7C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a2 != a3)
  {
    v3 = a2;
    v4 = result;
    result = a3;
    v5 = *(_QWORD *)(v4 + 8);
    if (a3 != v5)
    {
      v6 = 16 * ((a3 - a2) >> 4);
      do
      {
        sub_20B82E770(v3, (__int128 *)(v3 + v6));
        v3 += 16;
      }
      while (v3 + v6 != v5);
      result = *(_QWORD *)(v4 + 8);
    }
    while (result != v3)
      result = sub_20B811FE4(result - 16);
    *(_QWORD *)(v4 + 8) = v3;
  }
  return result;
}

const __CFDictionary *sub_20B90FE00(uint64_t a1, const void *a2, int a3)
{
  const __CFDictionary *result;
  const __CFNumber *v5;
  CFTypeID v6;
  int valuePtr;

  result = *(const __CFDictionary **)(a1 + 96);
  if (result)
  {
    result = (const __CFDictionary *)CFDictionaryGetValue(result, a2);
    if (result)
    {
      v5 = result;
      v6 = CFGetTypeID(result);
      if (v6 == CFNumberGetTypeID())
      {
        valuePtr = 0;
        CFNumberGetValue(v5, kCFNumberIntType, &valuePtr);
        return (const __CFDictionary *)((valuePtr & a3) != 0);
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

_QWORD *sub_20B90FE7C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  if (a3)
  {
    v4 = (unint64_t *)(a3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = (std::__shared_weak_count *)a1[1];
  *a1 = a2;
  a1[1] = a3;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return a1;
}

_QWORD *sub_20B90FEF0(uint64_t *a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  int8x8_t prime;
  void *v19;
  void *v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint8x8_t v24;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  void *v34;

  v6 = a2;
  v7 = a1[1];
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(void ***)(*a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v12 = a1 + 2;
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v10[4] = 0;
  v10[5] = 0;
  v10[3] = 0;
  v13 = (float)(unint64_t)(a1[3] + 1);
  v14 = *((float *)a1 + 8);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    v6 = v3;
    goto LABEL_64;
  }
  v15 = 1;
  if (v7 >= 3)
    v15 = (v7 & (v7 - 1)) != 0;
  v16 = v15 | (2 * v7);
  v17 = vcvtps_u32_f32(v13 / v14);
  if (v16 <= v17)
    prime = (int8x8_t)v17;
  else
    prime = (int8x8_t)v16;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v7 = a1[1];
  }
  if (*(_QWORD *)&prime <= v7)
  {
    if (*(_QWORD *)&prime >= v7)
      goto LABEL_60;
    v25 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
    if (v7 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
    {
      v25 = std::__next_prime(v25);
    }
    else
    {
      v27 = 1 << -(char)__clz(v25 - 1);
      if (v25 >= 2)
        v25 = v27;
    }
    if (*(_QWORD *)&prime <= v25)
      prime = (int8x8_t)v25;
    if (*(_QWORD *)&prime >= v7)
    {
      v7 = a1[1];
      goto LABEL_60;
    }
    if (!*(_QWORD *)&prime)
    {
      v34 = (void *)*a1;
      *a1 = 0;
      if (v34)
        operator delete(v34);
      v7 = 0;
      a1[1] = 0;
      goto LABEL_60;
    }
  }
  if (*(_QWORD *)&prime >> 61)
    sub_20B800BC0();
  v19 = operator new(8 * *(_QWORD *)&prime);
  v20 = (void *)*a1;
  *a1 = (uint64_t)v19;
  if (v20)
    operator delete(v20);
  v21 = 0;
  a1[1] = (uint64_t)prime;
  do
    *(_QWORD *)(*a1 + 8 * v21++) = 0;
  while (*(_QWORD *)&prime != v21);
  v22 = (_QWORD *)*v12;
  if (*v12)
  {
    v23 = v22[1];
    v24 = (uint8x8_t)vcnt_s8(prime);
    v24.i16[0] = vaddlv_u8(v24);
    if (v24.u32[0] > 1uLL)
    {
      if (v23 >= *(_QWORD *)&prime)
        v23 %= *(_QWORD *)&prime;
    }
    else
    {
      v23 &= *(_QWORD *)&prime - 1;
    }
    *(_QWORD *)(*a1 + 8 * v23) = v12;
    v28 = (_QWORD *)*v22;
    if (*v22)
    {
      do
      {
        v29 = v28[1];
        if (v24.u32[0] > 1uLL)
        {
          if (v29 >= *(_QWORD *)&prime)
            v29 %= *(_QWORD *)&prime;
        }
        else
        {
          v29 &= *(_QWORD *)&prime - 1;
        }
        if (v29 != v23)
        {
          if (!*(_QWORD *)(*a1 + 8 * v29))
          {
            *(_QWORD *)(*a1 + 8 * v29) = v22;
            goto LABEL_56;
          }
          *v22 = *v28;
          *v28 = **(_QWORD **)(*a1 + 8 * v29);
          **(_QWORD **)(*a1 + 8 * v29) = v28;
          v28 = v22;
        }
        v29 = v23;
LABEL_56:
        v22 = v28;
        v28 = (_QWORD *)*v28;
        v23 = v29;
      }
      while (v28);
    }
  }
  v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v6)
      v6 %= v7;
  }
  else
  {
    v6 = ((_DWORD)v7 - 1) & v6;
  }
LABEL_64:
  v30 = *a1;
  v31 = *(_QWORD **)(*a1 + 8 * v6);
  if (v31)
  {
    *v10 = *v31;
LABEL_72:
    *v31 = v10;
    goto LABEL_73;
  }
  *v10 = *v12;
  *v12 = v10;
  *(_QWORD *)(v30 + 8 * v6) = v12;
  if (*v10)
  {
    v32 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7)
        v32 %= v7;
    }
    else
    {
      v32 &= v7 - 1;
    }
    v31 = (_QWORD *)(*a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
  return v10;
}

void sub_20B9102D4(_Unwind_Exception *a1)
{
  void **v1;

  sub_20B9102EC(1, v1);
  _Unwind_Resume(a1);
}

void sub_20B9102EC(char a1, void **__p)
{
  void **v3;

  if (a1)
  {
    v3 = __p + 3;
    sub_20B8E736C(&v3);
  }
  if (__p)
    operator delete(__p);
}

uint64_t sub_20B910334(_QWORD *a1, _QWORD *a2, int a3)
{
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  int64x2_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  int64x2_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v41;
  int64x2_t v42;
  unint64_t v43;
  _QWORD *v44;

  if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 32))(*a2) & 1) == 0 && !a3)
  {
    v6 = a1[5];
    v7 = (_QWORD *)a1[4];
    if ((unint64_t)v7 < v6)
    {
      v8 = *a2;
      *a2 = 0;
      *v7 = v8;
      v9 = v7 + 1;
LABEL_36:
      a1[4] = v9;
      return *(v9 - 1);
    }
    v18 = a1[3];
    v19 = ((uint64_t)v7 - v18) >> 3;
    if (!((unint64_t)(v19 + 1) >> 61))
    {
      v20 = v6 - v18;
      v21 = v20 >> 2;
      if (v20 >> 2 <= (unint64_t)(v19 + 1))
        v21 = v19 + 1;
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
        v22 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v22 = v21;
      v44 = a1 + 5;
      if (v22)
        v22 = (unint64_t)sub_20B87FB70(v22);
      else
        v23 = 0;
      v31 = (_QWORD *)(v22 + 8 * v19);
      v32 = v22 + 8 * v23;
      v43 = v32;
      v33 = *a2;
      *a2 = 0;
      *v31 = v33;
      v9 = v31 + 1;
      v42.i64[1] = (uint64_t)(v31 + 1);
      v35 = (_QWORD *)a1[3];
      v34 = (_QWORD *)a1[4];
      if (v34 == v35)
      {
        v37 = vdupq_n_s64((unint64_t)v34);
      }
      else
      {
        do
        {
          v36 = *--v34;
          *v34 = 0;
          *--v31 = v36;
        }
        while (v34 != v35);
        v37 = *(int64x2_t *)(a1 + 3);
        v9 = (_QWORD *)v42.i64[1];
        v32 = v43;
      }
      a1[3] = v31;
      a1[4] = v9;
      v42 = v37;
      v39 = a1[5];
      a1[5] = v32;
      v43 = v39;
      v41 = v37.i64[0];
      sub_20B8821E8((uint64_t)&v41);
      goto LABEL_36;
    }
LABEL_38:
    sub_20B80CDD8();
  }
  v10 = a1[2];
  v11 = (_QWORD *)a1[1];
  if ((unint64_t)v11 >= v10)
  {
    v13 = ((uint64_t)v11 - *a1) >> 3;
    if ((unint64_t)(v13 + 1) >> 61)
      goto LABEL_38;
    v14 = v10 - *a1;
    v15 = v14 >> 2;
    if (v14 >> 2 <= (unint64_t)(v13 + 1))
      v15 = v13 + 1;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      v16 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v16 = v15;
    v44 = a1 + 2;
    if (v16)
      v16 = (unint64_t)sub_20B87FB70(v16);
    else
      v17 = 0;
    v24 = (_QWORD *)(v16 + 8 * v13);
    v25 = v16 + 8 * v17;
    v43 = v25;
    v26 = *a2;
    *a2 = 0;
    *v24 = v26;
    v9 = v24 + 1;
    v42.i64[1] = (uint64_t)(v24 + 1);
    v28 = (_QWORD *)*a1;
    v27 = (_QWORD *)a1[1];
    if (v27 == (_QWORD *)*a1)
    {
      v30 = vdupq_n_s64((unint64_t)v27);
    }
    else
    {
      do
      {
        v29 = *--v27;
        *v27 = 0;
        *--v24 = v29;
      }
      while (v27 != v28);
      v30 = *(int64x2_t *)a1;
      v9 = (_QWORD *)v42.i64[1];
      v25 = v43;
    }
    *a1 = v24;
    a1[1] = v9;
    v42 = v30;
    v38 = a1[2];
    a1[2] = v25;
    v43 = v38;
    v41 = v30.i64[0];
    sub_20B8821E8((uint64_t)&v41);
  }
  else
  {
    v12 = *a2;
    *a2 = 0;
    *v11 = v12;
    v9 = v11 + 1;
  }
  a1[1] = v9;
  return *(v9 - 1);
}

uint64_t sub_20B910554(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  int64x2_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  uint64_t v38;
  int64x2_t v39;
  unint64_t v40;
  _QWORD *v41;

  if (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 32))(*a2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a2 + 16))(&v37);
    v4 = a1 + 4;
    v5 = (_QWORD *)a1[4];
    v12 = a1[5];
    if ((unint64_t)v5 >= v12)
    {
      v15 = a1[3];
      v16 = ((uint64_t)v5 - v15) >> 3;
      if ((unint64_t)(v16 + 1) >> 61)
        sub_20B80CDD8();
      v17 = v12 - v15;
      v18 = v17 >> 2;
      if (v17 >> 2 <= (unint64_t)(v16 + 1))
        v18 = v16 + 1;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v18;
      v41 = a1 + 5;
      if (v19)
        v19 = (unint64_t)sub_20B87FB70(v19);
      else
        v20 = 0;
      v28 = (_QWORD *)(v19 + 8 * v16);
      v29 = v19 + 8 * v20;
      v40 = v29;
      v30 = v37;
      v37 = 0;
      *v28 = v30;
      v14 = v28 + 1;
      v39.i64[1] = (uint64_t)(v28 + 1);
      v32 = (_QWORD *)a1[3];
      v31 = (_QWORD *)a1[4];
      if (v31 == v32)
      {
        v27 = vdupq_n_s64((unint64_t)v31);
      }
      else
      {
        do
        {
          v33 = *--v31;
          *v31 = 0;
          *--v28 = v33;
        }
        while (v31 != v32);
        v27 = *(int64x2_t *)(a1 + 3);
        v14 = (_QWORD *)v39.i64[1];
        v29 = v40;
      }
      a1[3] = v28;
      a1[4] = v14;
      v39 = v27;
      v34 = a1[5];
      a1[5] = v29;
      goto LABEL_33;
    }
LABEL_12:
    v13 = v37;
    v37 = 0;
    *v5 = v13;
    v14 = v5 + 1;
    goto LABEL_34;
  }
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a2 + 16))(&v37);
  v4 = a1 + 1;
  v5 = (_QWORD *)a1[1];
  v6 = a1[2];
  if ((unint64_t)v5 < v6)
    goto LABEL_12;
  v7 = ((uint64_t)v5 - *a1) >> 3;
  if ((unint64_t)(v7 + 1) >> 61)
    sub_20B80CDD8();
  v8 = v6 - *a1;
  v9 = v8 >> 2;
  if (v8 >> 2 <= (unint64_t)(v7 + 1))
    v9 = v7 + 1;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
    v10 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  v41 = a1 + 2;
  if (v10)
    v10 = (unint64_t)sub_20B87FB70(v10);
  else
    v11 = 0;
  v21 = (_QWORD *)(v10 + 8 * v7);
  v22 = v10 + 8 * v11;
  v40 = v22;
  v23 = v37;
  v37 = 0;
  *v21 = v23;
  v14 = v21 + 1;
  v39.i64[1] = (uint64_t)(v21 + 1);
  v25 = (_QWORD *)*a1;
  v24 = (_QWORD *)a1[1];
  if (v24 == (_QWORD *)*a1)
  {
    v27 = vdupq_n_s64((unint64_t)v24);
  }
  else
  {
    do
    {
      v26 = *--v24;
      *v24 = 0;
      *--v21 = v26;
    }
    while (v24 != v25);
    v27 = *(int64x2_t *)a1;
    v14 = (_QWORD *)v39.i64[1];
    v22 = v40;
  }
  *a1 = v21;
  a1[1] = v14;
  v39 = v27;
  v34 = a1[2];
  a1[2] = v22;
LABEL_33:
  v40 = v34;
  v38 = v27.i64[0];
  sub_20B8821E8((uint64_t)&v38);
LABEL_34:
  *v4 = v14;
  v35 = v37;
  v37 = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  result = *(_QWORD *)(*v4 - 8);
  ++*(_QWORD *)(result + 8);
  return result;
}

void sub_20B9107AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B9107D4(_QWORD *result, char a2, uint64_t a3, _BYTE *a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v7 = result;
  v8 = *result;
  v9 = result[1];
  while (v8 != v9 && (!a4 || !*a4))
  {
    v10 = *(_QWORD *)(a3 + 24);
    if (!v10)
LABEL_15:
      sub_20B80BB74();
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 48))(v10, v8);
    v8 += 8;
  }
  if ((a2 & 1) == 0)
  {
    v12 = v7[3];
    v11 = v7[4];
    while (v12 != v11 && (!a4 || !*a4))
    {
      v13 = *(_QWORD *)(a3 + 24);
      if (!v13)
        goto LABEL_15;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 48))(v13, v12);
      v12 += 8;
    }
  }
  return result;
}

uint64_t sub_20B910884(uint64_t a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  BOOL v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  double v21;
  double v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;

  v4 = (uint64_t **)(a1 + 48);
  v5 = *(uint64_t **)(a1 + 48);
  v6 = (uint64_t *)(a1 + 56);
  if (v5 != (uint64_t *)(a1 + 56))
  {
    while (1)
    {
      v7 = v5[4];
      if (*(double *)(v7 + 32) == *(double *)(a2 + 32) && *(_QWORD *)(v7 + 64) == *(_QWORD *)(a2 + 64))
        break;
      v8 = (uint64_t *)v5[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (uint64_t *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (uint64_t *)v5[2];
          v10 = *v9 == (_QWORD)v5;
          v5 = v9;
        }
        while (!v10);
      }
      v5 = v9;
      if (v9 == v6)
        goto LABEL_14;
    }
  }
  if (v5 != v6)
  {
    v11 = v5[4];
    if (*(double *)(v11 + 56) >= *(double *)(a2 + 56))
      return 0;
    sub_20B910B40(*(_QWORD *)v11, v11);
    sub_20B910E6C(v4, v5);
    operator delete(v5);
  }
LABEL_14:
  if (*(_QWORD *)(a1 + 64) == 80)
  {
    v12 = (uint64_t *)*v6;
    if (*v6)
    {
      do
      {
        v13 = v12;
        v12 = (uint64_t *)v12[1];
      }
      while (v12);
    }
    else
    {
      v15 = v6;
      do
      {
        v13 = (uint64_t *)v15[2];
        v10 = *v13 == (_QWORD)v15;
        v15 = v13;
      }
      while (v10);
    }
    sub_20B910B40(*(_QWORD *)v13[4], v13[4]);
    v16 = (uint64_t *)*v6;
    if (*v6)
    {
      do
      {
        v17 = v16;
        v16 = (uint64_t *)v16[1];
      }
      while (v16);
    }
    else
    {
      v18 = v6;
      do
      {
        v17 = (uint64_t *)v18[2];
        v10 = *v17 == (_QWORD)v18;
        v18 = v17;
      }
      while (v10);
    }
    sub_20B910E6C(v4, v17);
    operator delete(v17);
  }
  v19 = (uint64_t *)*v6;
  v20 = v6;
  if (*v6)
  {
    v21 = *(double *)(a2 + 56);
    while (1)
    {
      while (1)
      {
        v20 = v19;
        v22 = *(double *)(v19[4] + 56);
        if (v21 <= v22)
          break;
        v19 = (uint64_t *)*v19;
        v6 = v20;
        if (!*v20)
          goto LABEL_35;
      }
      if (v22 <= v21)
        break;
      v19 = (uint64_t *)v19[1];
      if (!v19)
      {
        v6 = v20 + 1;
        goto LABEL_35;
      }
    }
  }
  else
  {
LABEL_35:
    v23 = (uint64_t *)operator new(0x28uLL);
    v23[4] = a2;
    *v23 = 0;
    v23[1] = 0;
    v23[2] = (uint64_t)v20;
    *v6 = (uint64_t)v23;
    v24 = (uint64_t *)**v4;
    if (v24)
    {
      *v4 = v24;
      v25 = (uint64_t *)*v6;
    }
    else
    {
      v25 = v23;
    }
    sub_20B82973C(*(uint64_t **)(a1 + 56), v25);
    ++*(_QWORD *)(a1 + 64);
  }
  v26 = *(_QWORD **)a2;
  v27 = *(uint64_t **)(*(_QWORD *)a2 + 40);
  v28 = *(_QWORD *)(*(_QWORD *)a2 + 48);
  if ((unint64_t)v27 >= v28)
  {
    v30 = v26[4];
    v31 = ((uint64_t)v27 - v30) >> 3;
    if ((unint64_t)(v31 + 1) >> 61)
      sub_20B80CDD8();
    v32 = v28 - v30;
    v33 = v32 >> 2;
    if (v32 >> 2 <= (unint64_t)(v31 + 1))
      v33 = v31 + 1;
    if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
      v34 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v34 = v33;
    if (v34)
      v35 = (char *)sub_20B800BE8(*(_QWORD *)a2 + 48, v34);
    else
      v35 = 0;
    v36 = &v35[8 * v31];
    v37 = &v35[8 * v34];
    *(_QWORD *)v36 = a2;
    v29 = v36 + 8;
    v39 = (char *)v26[4];
    v38 = (char *)v26[5];
    if (v38 != v39)
    {
      do
      {
        v40 = *((_QWORD *)v38 - 1);
        v38 -= 8;
        *((_QWORD *)v36 - 1) = v40;
        v36 -= 8;
      }
      while (v38 != v39);
      v38 = (char *)v26[4];
    }
    v26[4] = v36;
    v26[5] = v29;
    v26[6] = v37;
    if (v38)
      operator delete(v38);
  }
  else
  {
    *v27 = a2;
    v29 = v27 + 1;
  }
  v26[5] = v29;
  return 1;
}

uint64_t sub_20B910B40(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = *(_QWORD **)(result + 40);
  v3 = *(_QWORD **)(result + 32);
  if (v3 != v2)
  {
    while (*v3 != a2)
    {
      if (++v3 == v2)
      {
        v3 = *(_QWORD **)(result + 40);
        break;
      }
    }
  }
  v4 = v3 + 1;
  if (v3 != v2 && v4 != v2)
  {
    do
    {
      if (*v4 != a2)
        *v3++ = *v4;
      ++v4;
    }
    while (v4 != v2);
    v2 = *(_QWORD **)(result + 40);
  }
  if (v2 != v3)
    *(_QWORD *)(result + 40) = v3;
  return result;
}

uint64_t sub_20B910BF0(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v8;
  uint64_t v10;

  v3 = a1 + 24;
  v4 = 24;
  if (a2)
  {
    v4 = 0;
    v3 = a1;
  }
  v5 = *(uint64_t **)(a1 + v4);
  v6 = *(uint64_t **)(v3 + 8);
  if (v5 == v6)
    return 0;
  while (1)
  {
    v10 = *v5;
    v8 = *(_QWORD *)(a3 + 24);
    if (!v8)
      sub_20B80BB74();
    if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(_QWORD *)v8 + 48))(v8, &v10))
      break;
    if (++v5 == v6)
      return 0;
  }
  return *v5;
}

uint64_t sub_20B910C80@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  std::locale *v4;
  uint64_t v5;
  const std::locale::facet *v6;
  uint64_t v7;
  _QWORD v9[2];
  uint64_t v10;
  _QWORD v11[10];
  char v12;
  uint64_t v13;
  std::locale v14;
  _QWORD *v15;
  std::locale *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  sub_20B83BFEC((uint64_t)v9);
  v14.__locale_ = (std::locale::__imp *)&off_24C469B60;
  v15 = v9;
  v16 = &v14;
  sub_20B9107D4(a1, 0, (uint64_t)&v14, 0);
  v4 = v16;
  if (v16 == &v14)
  {
    v5 = 4;
    v4 = &v14;
  }
  else
  {
    if (!v16)
      goto LABEL_6;
    v5 = 5;
  }
  (*((void (**)(void))v4->__locale_ + v5))();
LABEL_6:
  std::ios_base::getloc((const std::ios_base *)((char *)&v11[-1] + *(_QWORD *)(v10 - 24)));
  v6 = std::locale::use_facet(&v14, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
  std::locale::~locale(&v14);
  std::ostream::put();
  std::ostream::flush();
  sub_20B871648((uint64_t)v11, a2);
  v9[0] = *MEMORY[0x24BEDB7F0];
  v7 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v9[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v10 = v7;
  v11[0] = MEMORY[0x24BEDB848] + 16;
  if (v12 < 0)
    operator delete((void *)v11[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x20BD39C2C](&v13);
}

void sub_20B910E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;

  v12 = *(_QWORD **)(v10 - 48);
  if (v12 == v9)
  {
    v13 = 4;
    v12 = (_QWORD *)(v10 - 72);
  }
  else
  {
    if (!v12)
      goto LABEL_6;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_6:
  sub_20B83C118((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B910E6C(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  BOOL v5;
  uint64_t *v6;

  v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      v3 = v2;
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    v4 = a2;
    do
    {
      v3 = (uint64_t *)v4[2];
      v5 = *v3 == (_QWORD)v4;
      v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2)
    *a1 = v3;
  v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  return sub_20B860794(v6, a2);
}

void sub_20B910EC4()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B910ED8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C469B60;
  result[1] = v3;
  return result;
}

uint64_t sub_20B910F0C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C469B60;
  a2[1] = v2;
  return result;
}

void sub_20B910F28(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  void **v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *__p[2];
  unsigned __int8 v11;

  v2 = (_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
  (*(void (**)(void **__return_ptr))(**(_QWORD **)a2 + 48))(__p);
  if ((v11 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v11 & 0x80u) == 0)
    v4 = v11;
  else
    v4 = (uint64_t)__p[1];
  v5 = sub_20B828F84(v2, (uint64_t)v3, v4);
  sub_20B828F84(v5, (uint64_t)"(", 1);
  v6 = (_QWORD *)std::ostream::operator<<();
  sub_20B828F84(v6, (uint64_t)", ", 2);
  v7 = (_QWORD *)std::ostream::operator<<();
  sub_20B828F84(v7, (uint64_t)", ", 2);
  v8 = (_QWORD *)std::ostream::operator<<();
  sub_20B828F84(v8, (uint64_t)", ", 2);
  v9 = (_QWORD *)std::ostream::operator<<();
  sub_20B828F84(v9, (uint64_t)"), ", 3);
  if ((char)v11 < 0)
    operator delete(__p[0]);
}

void sub_20B911024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B911040(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45ECE0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B91107C()
{
  return &unk_24C45ECE0;
}

CFIndex sub_20B911088(int a1, __CFDictionary *a2, void *lpsrc, char a4)
{
  uint64_t *v7;
  CFIndex result;
  const __CFString *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned __int8 v12;
  int v13;
  uint64_t v14;
  const __CFString *v15;

  if (!lpsrc)
    return 0;
  v7 = (uint64_t *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
  result = 0;
  if ((a4 & 1) == 0)
  {
    if (v7)
    {
      result = (*(uint64_t (**)(uint64_t *))(*v7 + 24))(v7);
      if (result)
      {
        if ((*(uint64_t (**)(uint64_t *))(*v7 + 56))(v7)
          || (result = (*(uint64_t (**)(uint64_t *))(*v7 + 216))(v7), (_DWORD)result))
        {
          result = (*(uint64_t (**)(uint64_t *))(*v7 + 56))(v7);
          if (result)
          {
            v9 = (const __CFString *)(*(uint64_t (**)(uint64_t *))(*v7 + 56))(v7);
            result = CFStringGetLength(v9);
            if (result)
            {
              if (v7[1] < 1)
                return 0;
              v10 = (*(uint64_t (**)(uint64_t *))(*v7 + 416))(v7);
              if ((v10 & 0x4000000) == 0)
                return 0;
              v11 = v10;
              v12 = atomic_load((unsigned __int8 *)&qword_2547287B0);
              if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_2547287B0))
              {
                off_2547287A8 = sub_20B896F94();
                __cxa_guard_release(&qword_2547287B0);
              }
              v13 = (v11 >> 2) & 1;
              if (!*(_BYTE *)off_2547287A8)
                LOBYTE(v13) = 1;
              if ((~v11 & 0x6000000) != 0 || (v13 & 1) == 0)
              {
                if (((*(uint64_t (**)(uint64_t *))(*v7 + 416))(v7) & 0x6000002) != 0x4000002
                  || *(_BYTE *)sub_20B896F94() && (*(unsigned int (**)(uint64_t *))(*v7 + 96))(v7) == 68)
                {
                  v14 = 10;
                }
                else
                {
                  v14 = v7[1] - 1;
                }
              }
              else
              {
                v14 = 0;
              }
              sub_20B91A618(a1, a2, v14);
              v15 = (const __CFString *)(*(uint64_t (**)(uint64_t *))(*v7 + 24))(v7);
              sub_20B91A6B8(a1, a2, v15);
              return 1;
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_20B911278(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2547287B0);
  _Unwind_Resume(a1);
}

void sub_20B911294()
{
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B9112A8(const __CFArray *a1)
{
  uint64_t v2;
  CFIndex v3;
  unsigned int (****ValueAtIndex)(_QWORD);

  if (!a1)
    __assert_rtn("getCPGestureCount", "GestureUtils.cpp", 19, "gestures");
  if (CFArrayGetCount(a1) < 1)
    return 0;
  v2 = 0;
  v3 = 0;
  do
  {
    ValueAtIndex = (unsigned int (****)(_QWORD))CFArrayGetValueAtIndex(a1, v3);
    if ((**ValueAtIndex[3])(ValueAtIndex[3]) == 2)
      ++v2;
    ++v3;
  }
  while (v3 < CFArrayGetCount(a1));
  return v2;
}

CFStringRef sub_20B911348(const __CFArray *a1)
{
  CFIndex Count;
  CFIndex i;
  uint64_t v4;
  __int16 v5;
  __int16 v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  __int16 v16;
  CFStringRef v17;
  void *__p;
  char *v20;
  char *v21;

  if (!a1)
    __assert_rtn("createTypingGestureString", "GestureUtils.cpp", 32, "gestures");
  Count = CFArrayGetCount(a1);
  __p = 0;
  v20 = 0;
  v21 = 0;
  sub_20B87D570(&__p, Count);
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
    {
      v4 = *((_QWORD *)CFArrayGetValueAtIndex(a1, i) + 3);
      if (!(**(unsigned int (***)(uint64_t))v4)(v4)
        || (**(unsigned int (***)(uint64_t))v4)(v4) == 1)
      {
        v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
        v6 = v5;
        v7 = v20;
        if (v20 >= v21)
        {
          v9 = (char *)__p;
          v10 = v20 - (_BYTE *)__p;
          if (v20 - (_BYTE *)__p <= -3)
            sub_20B80CDD8();
          v11 = v10 >> 1;
          if (v21 - (_BYTE *)__p <= (unint64_t)((v10 >> 1) + 1))
            v12 = v11 + 1;
          else
            v12 = v21 - (_BYTE *)__p;
          if ((unint64_t)(v21 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFELL)
            v13 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v13 = v12;
          if (v13)
          {
            v14 = (char *)sub_20B80FD48((uint64_t)&v21, v13);
            v9 = (char *)__p;
            v7 = v20;
          }
          else
          {
            v14 = 0;
          }
          v15 = &v14[2 * v11];
          *(_WORD *)v15 = v6;
          v8 = v15 + 2;
          while (v7 != v9)
          {
            v16 = *((_WORD *)v7 - 1);
            v7 -= 2;
            *((_WORD *)v15 - 1) = v16;
            v15 -= 2;
          }
          __p = v15;
          v20 = v8;
          v21 = &v14[2 * v13];
          if (v9)
            operator delete(v9);
        }
        else
        {
          *(_WORD *)v20 = v5;
          v8 = v7 + 2;
        }
        v20 = v8;
      }
    }
  }
  v17 = CFStringCreateWithCharacters(0, (const UniChar *)__p, (v20 - (_BYTE *)__p) >> 1);
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
  return v17;
}

void sub_20B91150C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

const __CFArray *sub_20B911534(const __CFArray *result)
{
  const __CFArray *v1;
  unsigned int (****ValueAtIndex)(_QWORD);

  if (result)
  {
    v1 = result;
    if (CFArrayGetCount(result) == 1)
    {
      ValueAtIndex = (unsigned int (****)(_QWORD))CFArrayGetValueAtIndex(v1, 0);
      return (const __CFArray *)((**ValueAtIndex[3])(ValueAtIndex[3]) == 3);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

CFMutableArrayRef sub_20B91158C(const __CFArray *a1)
{
  unsigned int v1;
  const __CFArray *v2;
  CFMutableArrayRef Mutable;
  CFIndex v4;
  uint64_t v5;
  unsigned __int16 *v6;
  unsigned __int16 *v7;
  unsigned int *v8;
  unsigned int *v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  CFDataRef v26;
  __CFArray *v28;
  const __CFArray *v29;
  CFIndex Count;
  unsigned int v31;

  if (!a1)
    return 0;
  v2 = a1;
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  Count = CFArrayGetCount(v2);
  if (Count >= 1)
  {
    v4 = 0;
    v28 = Mutable;
    v29 = v2;
    while (1)
    {
      v5 = *((_QWORD *)CFArrayGetValueAtIndex(v2, v4) + 3);
      if (!(**(unsigned int (***)(uint64_t))v5)(v5)
        || (**(unsigned int (***)(uint64_t))v5)(v5) == 1)
      {
        break;
      }
LABEL_47:
      if (++v4 == Count)
        return Mutable;
    }
    v6 = *(unsigned __int16 **)(v5 + 8);
    v7 = *(unsigned __int16 **)(v5 + 16);
    if (v6 == v7)
    {
      v20 = 0;
      v21 = 0;
      v10 = 0;
      v31 &= 0xFFFF0000;
    }
    else
    {
      v8 = 0;
      v9 = 0;
      v10 = 0;
      do
      {
        v1 = v1 & 0xFFFF0000 | *v6;
        v11 = *((_DWORD *)v6 + 1);
        if ((unint64_t)v9 >= v10)
        {
          v12 = ((char *)v9 - (char *)v8) >> 3;
          v13 = v12 + 1;
          if ((unint64_t)(v12 + 1) >> 61)
            sub_20B80CDD8();
          if ((uint64_t)(v10 - (_QWORD)v8) >> 2 > v13)
            v13 = (uint64_t)(v10 - (_QWORD)v8) >> 2;
          if (v10 - (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
            v14 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v14 = v13;
          if (v14)
            v14 = (unint64_t)sub_20B87FB70(v14);
          else
            v15 = 0;
          v16 = (unsigned int *)(v14 + 8 * v12);
          *v16 = v1;
          v16[1] = v11;
          v17 = v16;
          while (v9 != v8)
          {
            v18 = *((_QWORD *)v9 - 1);
            v9 -= 2;
            *((_QWORD *)v17 - 1) = v18;
            v17 -= 2;
          }
          v10 = v14 + 8 * v15;
          v9 = v16 + 2;
          if (v8)
            operator delete(v8);
          v8 = v17;
        }
        else
        {
          *v9 = v1;
          v9[1] = v11;
          v9 += 2;
        }
        v6 += 4;
      }
      while (v6 != v7);
      v19 = v31 & 0xFFFF0000;
      v31 &= 0xFFFF0000;
      if ((unint64_t)v9 < v10)
      {
        *v9 = v19;
        v9[1] = 0;
LABEL_43:
        Mutable = v28;
        v2 = v29;
        v26 = CFDataCreate(0, (const UInt8 *)v8, (char *)v9 - (char *)v8 + 8);
        CFArrayAppendValue(v28, v26);
        if (v26)
          CFRelease(v26);
        if (v8)
          operator delete(v8);
        goto LABEL_47;
      }
      v20 = v8;
      v21 = v9;
    }
    v22 = ((char *)v21 - (char *)v20) >> 3;
    v23 = v22 + 1;
    if ((unint64_t)(v22 + 1) >> 61)
      sub_20B80CDD8();
    if ((uint64_t)(v10 - (_QWORD)v20) >> 2 > v23)
      v23 = (uint64_t)(v10 - (_QWORD)v20) >> 2;
    if (v10 - (unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
      v24 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v24 = v23;
    if (v24)
      v24 = (unint64_t)sub_20B87FB70(v24);
    v9 = (unsigned int *)(v24 + 8 * v22);
    *(_QWORD *)v9 = v31;
    v8 = v9;
    if (v21 != v20)
    {
      v8 = v9;
      do
      {
        v25 = *((_QWORD *)v21 - 1);
        v21 -= 2;
        *((_QWORD *)v8 - 1) = v25;
        v8 -= 2;
      }
      while (v21 != v20);
    }
    if (v20)
      operator delete(v20);
    goto LABEL_43;
  }
  return Mutable;
}

void sub_20B911834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  void *v14;

  if (v14)
    operator delete(v14);
  _Unwind_Resume(exception_object);
}

void sub_20B911878(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  *a1 = 0;
}

uint64_t sub_20B9118A8(uint64_t *a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t result;
  _Unwind_Exception *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  void *v20;

  v12 = *a1;
  v17 = 0;
  v18 = &v17;
  v19 = 0x2000000000;
  v13 = off_25472CD60;
  v20 = off_25472CD60;
  if (!off_25472CD60)
  {
    v14 = (void *)sub_20B9122A4();
    v13 = dlsym(v14, "ITTouchTranscoderSessionAddEvent");
    v18[3] = (uint64_t)v13;
    off_25472CD60 = v13;
  }
  _Block_object_dispose(&v17, 8);
  if (!v13)
  {
    dlerror();
    v16 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v17, 8);
    _Unwind_Resume(v16);
  }
  result = ((uint64_t (*)(uint64_t, uint64_t, double, double, double, double))v13)(v12, a2, a3, a4, a5, a6);
  ++*((_DWORD *)a1 + 2);
  return result;
}

uint64_t sub_20B9119B0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  _Unwind_Exception *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  void *v11;

  v3 = *a1;
  v8 = 0;
  v9 = &v8;
  v10 = 0x2000000000;
  v4 = off_25472CD68;
  v11 = off_25472CD68;
  if (!off_25472CD68)
  {
    v5 = (void *)sub_20B9122A4();
    v4 = dlsym(v5, "ITTouchTranscoderSessionEnumerateCandidates");
    v9[3] = (uint64_t)v4;
    off_25472CD68 = v4;
  }
  _Block_object_dispose(&v8, 8);
  if (!v4)
  {
    dlerror();
    v7 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v8, 8);
    _Unwind_Resume(v7);
  }
  return ((uint64_t (*)(uint64_t, uint64_t))v4)(v3, a2);
}

uint64_t *sub_20B911A70(uint64_t *a1, int a2, const void *a3)
{
  uint64_t v6;
  __CFDictionary *Mutable;
  const void **v8;
  void *v9;
  const void **v10;
  void *v11;
  void *v12;
  const void *v13;
  const void **v14;
  void *v15;
  void *v16;
  void *v17;
  NSObject *v18;
  CFTypeRef cf;
  uint8_t buf[16];
  uint64_t v22;
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if (!qword_25472CD58)
  {
    *(_OWORD *)buf = xmmword_24C49C928;
    v22 = 0;
    qword_25472CD58 = _sl_dlopen();
  }
  v6 = 0;
  if (a3 && qword_25472CD58)
  {
    cf = 0;
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    v22 = 0x2000000000;
    v8 = (const void **)qword_25472B710;
    v23 = (void *)qword_25472B710;
    if (!qword_25472B710)
    {
      v9 = (void *)sub_20B9122A4();
      v8 = (const void **)dlsym(v9, "kITTouchTranscoderLocaleKey");
      *(_QWORD *)(*(_QWORD *)&buf[8] + 24) = v8;
      qword_25472B710 = (uint64_t)v8;
    }
    _Block_object_dispose(buf, 8);
    if (!v8)
      goto LABEL_27;
    CFDictionaryAddValue(Mutable, *v8, a3);
    if (a2)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      v22 = 0x2000000000;
      v10 = (const void **)qword_25472B720;
      v23 = (void *)qword_25472B720;
      if (!qword_25472B720)
      {
        v11 = (void *)sub_20B9122A4();
        v10 = (const void **)dlsym(v11, "kITTouchTranscoderInstanceTypeValueTapTyping");
        *(_QWORD *)(*(_QWORD *)&buf[8] + 24) = v10;
        qword_25472B720 = (uint64_t)v10;
      }
    }
    else
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      v22 = 0x2000000000;
      v10 = (const void **)qword_25472B718;
      v23 = (void *)qword_25472B718;
      if (!qword_25472B718)
      {
        v12 = (void *)sub_20B9122A4();
        v10 = (const void **)dlsym(v12, "kITTouchTranscoderInstanceTypeValueContinuousPath");
        *(_QWORD *)(*(_QWORD *)&buf[8] + 24) = v10;
        qword_25472B718 = (uint64_t)v10;
      }
    }
    _Block_object_dispose(buf, 8);
    if (!v10)
      goto LABEL_27;
    v13 = *v10;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    v22 = 0x2000000000;
    v14 = (const void **)qword_25472B728;
    v23 = (void *)qword_25472B728;
    if (!qword_25472B728)
    {
      v15 = (void *)sub_20B9122A4();
      v14 = (const void **)dlsym(v15, "kITTouchTranscoderInstanceTypeKey");
      *(_QWORD *)(*(_QWORD *)&buf[8] + 24) = v14;
      qword_25472B728 = (uint64_t)v14;
    }
    _Block_object_dispose(buf, 8);
    if (!v14)
      goto LABEL_27;
    CFDictionaryAddValue(Mutable, *v14, v13);
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    v22 = 0x2000000000;
    v16 = off_25472B730;
    v23 = off_25472B730;
    if (!off_25472B730)
    {
      v17 = (void *)sub_20B9122A4();
      v16 = dlsym(v17, "ITTouchTranscoderCreateWithKeyboardLayout");
      *(_QWORD *)(*(_QWORD *)&buf[8] + 24) = v16;
      off_25472B730 = v16;
    }
    _Block_object_dispose(buf, 8);
    if (!v16)
    {
LABEL_27:
      dlerror();
      abort_report_np();
      __break(1u);
    }
    v6 = ((uint64_t (*)(__CFDictionary *, _QWORD, _QWORD, CFTypeRef *))v16)(Mutable, 0, 0, &cf);
    if (cf)
    {
      v18 = sub_20B9A7C5C(3u);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_20B7F7000, v18, OS_LOG_TYPE_ERROR, "Failed to create touch transcoder", buf, 2u);
      }
      CFRelease(cf);
    }
    if (Mutable)
      CFRelease(Mutable);
  }
  *a1 = v6;
  return a1;
}

void sub_20B911DC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  const void *v3;
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  if (v3)
    CFRelease(v3);
  _Unwind_Resume(a1);
}

const void **sub_20B911E28(int a1, const void *a2)
{
  uint64_t *v4;
  const void **v5;
  const void **v7;

  v4 = (uint64_t *)operator new();
  sub_20B911A70(v4, a1, a2);
  v7 = (const void **)v4;
  if (!sub_20B911EF0(v4))
    sub_20B8CE520(&v7, 0);
  v5 = v7;
  v7 = 0;
  sub_20B8CE520(&v7, 0);
  return v5;
}

void sub_20B911EB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B8CE520((const void ***)va, 0);
  _Unwind_Resume(a1);
}

BOOL sub_20B911EF0(_QWORD *a1)
{
  if (!qword_25472CD58)
    qword_25472CD58 = _sl_dlopen();
  return qword_25472CD58 && *a1 != 0;
}

uint64_t *sub_20B911F90(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  _Unwind_Exception *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  void *v11;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    v4 = *result;
    v8 = 0;
    v9 = &v8;
    v10 = 0x2000000000;
    v5 = off_25472CD70;
    v11 = off_25472CD70;
    if (!off_25472CD70)
    {
      v6 = (void *)sub_20B9122A4();
      v5 = dlsym(v6, "ITTouchTranscoderUpdateKeyboardLayout");
      v9[3] = (uint64_t)v5;
      off_25472CD70 = v5;
    }
    _Block_object_dispose(&v8, 8);
    if (!v5)
    {
      dlerror();
      v7 = (_Unwind_Exception *)abort_report_np();
      _Block_object_dispose(&v8, 8);
      _Unwind_Resume(v7);
    }
    return (uint64_t *)((uint64_t (*)(uint64_t, uint64_t, uint64_t))v5)(v4, v2, 0x6DB6DB6DB6DB6DB7 * ((v3 - v2) >> 3));
  }
  return result;
}

uint64_t sub_20B91207C(uint64_t *a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  _Unwind_Exception *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  void *v9;

  v1 = *a1;
  v6 = 0;
  v7 = &v6;
  v8 = 0x2000000000;
  v2 = off_25472CD78;
  v9 = off_25472CD78;
  if (!off_25472CD78)
  {
    v3 = (void *)sub_20B9122A4();
    v2 = dlsym(v3, "ITTouchTranscoderCreateSession");
    v7[3] = (uint64_t)v2;
    off_25472CD78 = v2;
  }
  _Block_object_dispose(&v6, 8);
  if (!v2)
  {
    dlerror();
    v5 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v6, 8);
    _Unwind_Resume(v5);
  }
  return ((uint64_t (*)(uint64_t))v2)(v1);
}

uint64_t sub_20B912134(uint64_t *a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  _Unwind_Exception *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  void *v9;

  v1 = *a1;
  v6 = 0;
  v7 = &v6;
  v8 = 0x2000000000;
  v2 = off_25472CD80;
  v9 = off_25472CD80;
  if (!off_25472CD80)
  {
    v3 = (void *)sub_20B9122A4();
    v2 = dlsym(v3, "ITCandidateGetScore");
    v7[3] = (uint64_t)v2;
    off_25472CD80 = v2;
  }
  _Block_object_dispose(&v6, 8);
  if (!v2)
  {
    dlerror();
    v5 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v6, 8);
    _Unwind_Resume(v5);
  }
  return ((uint64_t (*)(uint64_t))v2)(v1);
}

uint64_t sub_20B9121EC(uint64_t *a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  _Unwind_Exception *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  void *v9;

  v1 = *a1;
  v6 = 0;
  v7 = &v6;
  v8 = 0x2000000000;
  v2 = off_25472CD88;
  v9 = off_25472CD88;
  if (!off_25472CD88)
  {
    v3 = (void *)sub_20B9122A4();
    v2 = dlsym(v3, "ITCandidateGetString");
    v7[3] = (uint64_t)v2;
    off_25472CD88 = v2;
  }
  _Block_object_dispose(&v6, 8);
  if (!v2)
  {
    dlerror();
    v5 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v6, 8);
    _Unwind_Resume(v5);
  }
  return ((uint64_t (*)(uint64_t))v2)(v1);
}

uint64_t sub_20B9122A4()
{
  uint64_t v0;
  void *v2;

  if (qword_25472CD58)
    return qword_25472CD58;
  qword_25472CD58 = _sl_dlopen();
  v0 = qword_25472CD58;
  if (!qword_25472CD58)
  {
    v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

uint64_t sub_20B912364(uint64_t a1, __int128 *a2, CFStringRef theString, const __CFString *a4, int a5, char a6)
{
  _QWORD *v8;
  CFIndex Length;

  *(_QWORD *)a1 = &unk_24C460B90;
  v8 = (_QWORD *)sub_20B8D6F60(a1, (uint64_t *)&off_24C45F250, a2, theString, a4, a5, a6);
  *v8 = off_24C460578;
  v8[15] = &off_24C4607C0;
  Length = CFStringGetLength(theString);
  *(_QWORD *)(a1 + 128) = &off_24C467C40;
  *(_DWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = Length;
  *(_QWORD *)(a1 + 168) = 0xFFFFFFFFLL;
  *(_QWORD *)(a1 + 160) = 64;
  return a1;
}

void sub_20B9123FC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_20B8D7210(v1, (uint64_t *)&off_24C45F250);
  _Unwind_Resume(a1);
}

uint64_t sub_20B912418(uint64_t a1, uint64_t a2)
{
  if (a2)
    return 0;
  else
    return a1 + 128;
}

uint64_t sub_20B912428(uint64_t a1)
{
  uint64_t v2;
  const __CFString *v3;
  CFIndex Length;

  v2 = operator new();
  a1 -= 120;
  *(_QWORD *)v2 = &unk_24C460B90;
  sub_20B8D70E0(v2, (uint64_t *)&off_24C45F250, a1);
  *(_QWORD *)v2 = off_24C460578;
  *(_QWORD *)(v2 + 120) = &off_24C4607C0;
  v3 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  Length = CFStringGetLength(v3);
  *(_QWORD *)(v2 + 128) = &off_24C467C40;
  *(_DWORD *)(v2 + 136) = 0;
  *(_QWORD *)(v2 + 144) = 0;
  *(_QWORD *)(v2 + 152) = Length;
  *(_QWORD *)(v2 + 168) = 0xFFFFFFFFLL;
  *(_QWORD *)(v2 + 160) = 64;
  return v2;
}

void sub_20B9124D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10E1C40BE1B2566);
  _Unwind_Resume(a1);
}

uint64_t sub_20B912514(_QWORD *a1)
{
  return sub_20B912428((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
}

uint64_t *sub_20B912524(uint64_t *a1)
{
  return sub_20B8D7210(a1, (uint64_t *)&off_24C45F250);
}

void sub_20B912530(uint64_t *a1)
{
  sub_20B8D7210(a1, (uint64_t *)&off_24C45F250);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B91255C()
{
  return 0;
}

uint64_t sub_20B912564(uint64_t a1)
{
  int v1;

  v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
  if ((v1 & 2) != 0)
    return 77;
  if ((v1 & 8) != 0)
    return 65;
  if ((v1 & 0x10) != 0)
    return 85;
  if ((v1 & 4) != 0)
    return 76;
  return (v1 << 10 >> 31) & 0x59;
}

uint64_t sub_20B9125BC(uint64_t a1)
{
  return ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1) >> 6) & 1;
}

uint64_t sub_20B9125DC()
{
  return 0;
}

uint64_t sub_20B9125E4(uint64_t a1, uint64_t *a2, CFStringRef theString, const __CFString *a4, int a5)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  CFIndex Length;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v13 = 0;
  v14 = a5;
  v15 = 0;
  v8 = (_QWORD *)sub_20B8D6F60(a1, a2 + 1, (__int128 *)&v13, theString, a4, 0, 0);
  v9 = a2[7];
  v8[15] = v9;
  *(_QWORD *)((char *)v8 + *(_QWORD *)(v9 - 32) + 120) = a2[8];
  v10 = *a2;
  *v8 = *a2;
  *(_QWORD *)((char *)v8 + *(_QWORD *)(v10 - 32)) = a2[9];
  v8[15] = a2[10];
  if (theString)
    Length = CFStringGetLength(theString);
  else
    Length = 0;
  *(_QWORD *)(a1 + 128) = &off_24C467C40;
  *(_DWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = Length;
  *(_QWORD *)(a1 + 168) = 0xFFFFFFFFLL;
  *(_QWORD *)(a1 + 160) = 64;
  return a1;
}

void sub_20B9126C0(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t *v2;

  sub_20B8D7210(v1, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9126D8(uint64_t a1, CFStringRef theString, const __CFString *a3, int a4)
{
  _QWORD *v6;
  CFIndex Length;
  uint64_t v9;
  int v10;
  uint64_t v11;

  *(_QWORD *)a1 = &unk_24C460B90;
  v9 = 0;
  v10 = a4;
  v11 = 0;
  v6 = (_QWORD *)sub_20B8D6F60(a1, (uint64_t *)&off_24C45F1F8, (__int128 *)&v9, theString, a3, 0, 0);
  *v6 = off_24C460270;
  v6[15] = &off_24C4604B8;
  if (theString)
    Length = CFStringGetLength(theString);
  else
    Length = 0;
  *(_QWORD *)(a1 + 128) = &off_24C467C40;
  *(_DWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = Length;
  *(_QWORD *)(a1 + 168) = 0xFFFFFFFFLL;
  *(_QWORD *)(a1 + 160) = 64;
  return a1;
}

void sub_20B912794(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_20B8D7210(v1, (uint64_t *)&off_24C45F1F8);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9127B0(uint64_t a1, uint64_t a2)
{
  if (a2)
    return 0;
  else
    return a1 + 128;
}

__CFString *sub_20B9127C0(uint64_t a1)
{
  __CFString *Mutable;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const __CFAllocator *v6;
  unsigned int v7;
  const __CFString *v8;

  Mutable = CFStringCreateMutable(0, 0);
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  if (v3 >= 1)
  {
    v4 = v3;
    v5 = 0;
    v6 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    do
    {
      v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v5);
      v8 = CFStringCreateWithFormat(v6, 0, CFSTR("%d"), v7);
      CFStringAppend(Mutable, v8);
      CFRelease(v8);
      ++v5;
    }
    while (v4 != v5);
  }
  return Mutable;
}

uint64_t sub_20B912894(uint64_t a1, const __CFString *a2)
{
  uint64_t v4;
  const __CFString *v5;

  v4 = operator new();
  v5 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  sub_20B9126D8(v4, a2, v5, 64);
  return v4;
}

void sub_20B912900(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x10E1C40BE1B2566);
  _Unwind_Resume(a1);
}

void sub_20B912924(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unsigned int v9;
  _BOOL4 v10;
  unsigned __int8 v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t j;
  _QWORD *v15;
  __guard *v16;
  uint64_t *v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  unint64_t v29;
  void *v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  __int128 **v34;
  __int128 *v35;
  __int128 *v36;
  _OWORD *v37;
  __int128 v38;
  __int128 v39;
  _OWORD *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  __int128 v46;
  __int128 v47;
  char *v48;
  __int128 v49;
  __int128 v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  unsigned __int8 v54;
  uint64_t v55;
  unint64_t v56;
  unsigned __int16 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  __int16 v63;
  char *v64;
  char *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  char *v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  unsigned __int8 v77;
  int v78;
  int v79;
  int v80;
  void *v81;
  unint64_t v82;
  int v83;
  int v84;
  uint64_t v85;
  _QWORD *v86;
  void **v87;
  unint64_t v88;
  void **v89;
  unint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  _QWORD *v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t k;
  _QWORD *v97;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t *v104;
  unint64_t v105;
  _QWORD *v106;
  void *v107[2];
  unsigned __int8 v108;
  void *v109[2];
  unsigned __int8 v110;
  void *__p;
  char *v112;
  char *v113;
  void *v114[2];
  char v115;
  const void *v116[2];
  char v117;
  _QWORD __dst[3];
  _QWORD v119[3];
  __int16 v120;
  _BYTE v121[24];
  _BYTE v122[24];
  __int16 v123;
  uint64_t v124;

  v124 = *MEMORY[0x24BDAC8D0];
  v2 = a2[6];
  v3 = a2[7];
  if (v2 != v3)
  {
    v4 = a1;
    v5 = 0;
    v6 = (v3 - v2) >> 3;
    v100 = v6;
    if (v6 <= 1)
      v6 = 1;
    v101 = v6;
    do
    {
      v7 = *(_QWORD **)(a2[6] + 8 * v5);
      v8 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v7 + 304))(v7);
      v9 = *(unsigned __int16 *)(*v8 + 40 * (*(uint64_t (**)(_QWORD *))(*v7 + 48))(v7) - 8);
      sub_20B8B2334(0);
      v10 = sub_20B91371C((uint64_t)&qword_25472C9B0, v9);
      if (!v10)
      {
        v18 = (uint64_t *)(&off_24C499C48 + 2 * word_20BA3BB2A[7 * v9 + 5]);
        v19 = v18[1];
        if (v19 < 3)
          goto LABEL_132;
        v20 = 0;
        v21 = *v18;
        v22 = v21 + 2 * v19 - 6;
        do
        {
          if (word_20BA94B60[v20] != *(_WORD *)(v22 + v20 * 2))
            goto LABEL_132;
          ++v20;
        }
        while (v20 != 3);
        for (i = 0; i != 3; ++i)
        {
          if (word_20BA94B58[i] != *(_WORD *)(v21 + i * 2))
            goto LABEL_132;
        }
        if ((unsigned __int16)word_25472C9FC > v9 || (unsigned __int16)word_25472C9FE < v9)
          goto LABEL_132;
      }
      v102 = v100 - ((uint64_t)(a2[7] - a2[6]) >> 3) + *v4;
      if (v102 < 1)
        return;
      if (v10)
      {
        v11 = atomic_load((unsigned __int8 *)&qword_25472B758);
        v104 = qword_25472B768;
        if ((v11 & 1) == 0)
        {
          v12 = v5;
          v13 = v4;
          if (__cxa_guard_acquire(&qword_25472B758))
          {
            v120 = 112;
            sub_20B87C9E0(v121, (char *)L"で");
            sub_20B87C9E0(v122, (char *)L"で");
            v123 = 272;
            sub_20B9138A4(qword_25472B768, (uint64_t)__dst, 2uLL);
            for (j = 0; j != -14; j -= 7)
            {
              v15 = &__dst[j];
              if ((char)v122[j * 8 + 23] < 0)
                operator delete((void *)v15[10]);
              if (*((char *)v15 + 79) < 0)
                operator delete((void *)v15[7]);
            }
            v16 = &qword_25472B758;
            v17 = qword_25472B768;
            goto LABEL_142;
          }
LABEL_144:
          v4 = v13;
          v5 = v12;
        }
      }
      else
      {
        v25 = atomic_load((unsigned __int8 *)&qword_25472B760);
        v104 = qword_25472B780;
        if ((v25 & 1) == 0)
        {
          v12 = v5;
          v13 = v4;
          if (__cxa_guard_acquire(&qword_25472B760))
          {
            sub_20B87C9E0(__dst, "_0");
            sub_20B87C9E0(v119, "_0");
            v120 = 107;
            sub_20B87C9E0(v121, (char *)L"て");
            sub_20B87C9E0(v122, (char *)L"て");
            v123 = 270;
            sub_20B9138A4(qword_25472B780, (uint64_t)__dst, 2uLL);
            for (k = 0; k != -14; k -= 7)
            {
              v97 = &__dst[k];
              if ((char)v122[k * 8 + 23] < 0)
                operator delete((void *)v97[10]);
              if (*((char *)v97 + 79) < 0)
                operator delete((void *)v97[7]);
            }
            v16 = &qword_25472B760;
            v17 = qword_25472B780;
LABEL_142:
            v104 = v17;
            __cxa_atexit((void (*)(void *))sub_20B913A1C, v17, &dword_20B7F7000);
            __cxa_guard_release(v16);
            v4 = v13;
            v5 = v12;
            if (!v7)
              goto LABEL_132;
            goto LABEL_30;
          }
          goto LABEL_144;
        }
      }
LABEL_30:
      if ((*(unsigned int (**)(_QWORD *))(*v7 + 408))(v7) != 1)
      {
        (*(void (**)(_QWORD *))(*v7 + 544))(v7);
        if (v26)
        {
          (*(void (**)(_QWORD *))(*v7 + 552))(v7);
          if (v27)
          {
            v28 = (void *)(*(uint64_t (**)(_QWORD *))(*v7 + 544))(v7);
            sub_20B877ED0(v116, v28, v29);
            v99 = v5;
            v30 = (void *)(*(uint64_t (**)(_QWORD *))(*v7 + 552))(v7);
            sub_20B877ED0(v114, v30, v31);
            v32 = 0x6DB6DB6DB6DB6DB7 * ((v104[1] - *v104) >> 3);
            if (v32 >= v102)
              v32 = v102;
            if (!v32)
            {
LABEL_128:
              if (v115 < 0)
                operator delete(v114[0]);
              v4 = a1;
              v5 = v99;
              if (v117 < 0)
                operator delete((void *)v116[0]);
              goto LABEL_132;
            }
            v105 = 0;
            while (2)
            {
              __p = 0;
              v112 = 0;
              v113 = 0;
              v33 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v7 + 304))(v7);
              sub_20B8B3708(&__p, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v33[1] - *v33) >> 3) + 1);
              v34 = (__int128 **)(*(uint64_t (**)(_QWORD *))(*v7 + 304))(v7);
              v35 = *v34;
              v36 = v34[1];
              if (*v34 != v36)
              {
                v37 = v112;
                do
                {
                  if (v37 >= (_OWORD *)v113)
                  {
                    v40 = __p;
                    v41 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v37 - (_BYTE *)__p) >> 3);
                    v42 = v41 + 1;
                    if (v41 + 1 > 0x666666666666666)
                      sub_20B8821D4();
                    if (0x999999999999999ALL * ((v113 - (_BYTE *)__p) >> 3) > v42)
                      v42 = 0x999999999999999ALL * ((v113 - (_BYTE *)__p) >> 3);
                    if (0xCCCCCCCCCCCCCCCDLL * ((v113 - (_BYTE *)__p) >> 3) >= 0x333333333333333)
                      v43 = 0x666666666666666;
                    else
                      v43 = v42;
                    if (v43)
                    {
                      v44 = (char *)sub_20B882310((uint64_t)&v113, v43);
                      v40 = __p;
                      v37 = v112;
                    }
                    else
                    {
                      v44 = 0;
                    }
                    v45 = &v44[40 * v41];
                    v46 = *v35;
                    v47 = v35[1];
                    *((_QWORD *)v45 + 4) = *((_QWORD *)v35 + 4);
                    *(_OWORD *)v45 = v46;
                    *((_OWORD *)v45 + 1) = v47;
                    if (v37 == v40)
                    {
                      v51 = &v44[40 * v41];
                    }
                    else
                    {
                      v48 = &v44[40 * v41];
                      do
                      {
                        v49 = *(_OWORD *)((char *)v37 - 40);
                        v50 = *(_OWORD *)((char *)v37 - 24);
                        v51 = v48 - 40;
                        *((_QWORD *)v48 - 1) = *((_QWORD *)v37 - 1);
                        *(_OWORD *)(v48 - 24) = v50;
                        *(_OWORD *)(v48 - 40) = v49;
                        v37 = (_OWORD *)((char *)v37 - 40);
                        v48 -= 40;
                      }
                      while (v37 != v40);
                    }
                    v37 = v45 + 40;
                    __p = v51;
                    v112 = v45 + 40;
                    v113 = &v44[40 * v43];
                    if (v40)
                      operator delete(v40);
                  }
                  else
                  {
                    v38 = *v35;
                    v39 = v35[1];
                    *((_QWORD *)v37 + 4) = *((_QWORD *)v35 + 4);
                    *v37 = v38;
                    v37[1] = v39;
                    v37 = (_OWORD *)((char *)v37 + 40);
                  }
                  v112 = (char *)v37;
                  v35 = (__int128 *)((char *)v35 + 40);
                }
                while (v35 != v36);
              }
              v52 = v105;
              v53 = *v104;
              if (0x6DB6DB6DB6DB6DB7 * ((v104[1] - *v104) >> 3) <= v105)
                sub_20B913890();
              v54 = atomic_load((unsigned __int8 *)&qword_25472B740);
              if ((v54 & 1) == 0 && __cxa_guard_acquire(&qword_25472B740))
              {
                sub_20B8B2334(0);
                qword_25472B738 = (uint64_t)&qword_25472C9B0;
                __cxa_guard_release(&qword_25472B740);
                v52 = v105;
              }
              v55 = v53 + 56 * v52;
              v56 = *(unsigned __int16 *)(v55 + 48);
              if (v56 <= 0x24E)
                v57 = word_20BA4138A[v56];
              else
                v57 = 0;
              if (*(char *)(v55 + 23) < 0)
                v58 = *(_QWORD *)(v55 + 8);
              else
                LOWORD(v58) = *(unsigned __int8 *)(v55 + 23);
              v59 = v53 + 56 * v52;
              v60 = v59 + 24;
              v61 = *(char *)(v59 + 47);
              if (v61 < 0)
                v62 = *(_QWORD *)(v60 + 8);
              else
                LOWORD(v62) = v61;
              v63 = *((_WORD *)sub_20B947CC4() + 4);
              v64 = v112;
              if (v112 >= v113)
              {
                v66 = 0xCCCCCCCCCCCCCCCDLL * ((v112 - (_BYTE *)__p) >> 3);
                v67 = v66 + 1;
                if (v66 + 1 > 0x666666666666666)
                  sub_20B8821D4();
                if (0x999999999999999ALL * ((v113 - (_BYTE *)__p) >> 3) > v67)
                  v67 = 0x999999999999999ALL * ((v113 - (_BYTE *)__p) >> 3);
                if (0xCCCCCCCCCCCCCCCDLL * ((v113 - (_BYTE *)__p) >> 3) >= 0x333333333333333)
                  v68 = 0x666666666666666;
                else
                  v68 = v67;
                if (v68)
                  v69 = (char *)sub_20B882310((uint64_t)&v113, v68);
                else
                  v69 = 0;
                v70 = &v69[40 * v66];
                *((_QWORD *)v70 + 1) = 0;
                *((_QWORD *)v70 + 2) = 0;
                *(_QWORD *)v70 = 0;
                *((_WORD *)v70 + 12) = v58;
                *((_WORD *)v70 + 13) = v63;
                *((_WORD *)v70 + 14) = v62;
                *((_WORD *)v70 + 15) = v57;
                *((_WORD *)v70 + 16) = v57;
                *((_WORD *)v70 + 17) = 0;
                v70[36] = 0;
                *(_WORD *)(v70 + 37) = 513;
                v70[39] = 0;
                v72 = (char *)__p;
                v71 = v112;
                v73 = v70;
                if (v112 != __p)
                {
                  do
                  {
                    v74 = *(_OWORD *)(v71 - 40);
                    v75 = *(_OWORD *)(v71 - 24);
                    *((_QWORD *)v73 - 1) = *((_QWORD *)v71 - 1);
                    *(_OWORD *)(v73 - 24) = v75;
                    *(_OWORD *)(v73 - 40) = v74;
                    v73 -= 40;
                    v71 -= 40;
                  }
                  while (v71 != v72);
                  v71 = v72;
                }
                v65 = v70 + 40;
                __p = v73;
                v112 = v70 + 40;
                v113 = &v69[40 * v68];
                if (v71)
                  operator delete(v71);
              }
              else
              {
                *(_QWORD *)v112 = 0;
                *((_QWORD *)v64 + 1) = 0;
                *((_QWORD *)v64 + 2) = 0;
                *((_WORD *)v64 + 12) = v58;
                *((_WORD *)v64 + 13) = v63;
                *((_WORD *)v64 + 14) = v62;
                *((_WORD *)v64 + 15) = v57;
                *((_WORD *)v64 + 16) = v57;
                *((_WORD *)v64 + 17) = 0;
                v64[36] = 0;
                *(_WORD *)(v64 + 37) = 513;
                v65 = v64 + 40;
                v64[39] = 0;
              }
              v112 = v65;
              if (*(char *)(v60 + 23) < 0)
                v76 = *(_QWORD *)(v60 + 8);
              else
                LODWORD(v76) = *(unsigned __int8 *)(v60 + 23);
              v77 = atomic_load((unsigned __int8 *)&qword_25472B750);
              if ((v77 & 1) == 0 && __cxa_guard_acquire(&qword_25472B750))
              {
                qword_25472B748 = (uint64_t)sub_20B896F94();
                __cxa_guard_release(&qword_25472B750);
              }
              v78 = *(__int16 *)(qword_25472B748 + 538);
              v79 = *((_DWORD *)v7 + 55);
              sub_20B9137C8(v116, (const void **)v55, (uint64_t)v109);
              sub_20B9137C8((const void **)v114, (const void **)v60, (uint64_t)v107);
              v80 = *((char *)v7 + 87);
              if (v80 >= 0)
                v81 = v7 + 8;
              else
                v81 = (void *)v7[8];
              if (v80 >= 0)
                v82 = *((unsigned __int8 *)v7 + 87);
              else
                v82 = v7[9];
              v83 = (*(uint64_t (**)(_QWORD *))(*v7 + 112))(v7);
              v84 = (*(uint64_t (**)(_QWORD *))(*v7 + 416))(v7);
              v85 = operator new();
              v86 = (_QWORD *)v85;
              if ((v110 & 0x80u) == 0)
                v87 = v109;
              else
                v87 = (void **)v109[0];
              if ((v110 & 0x80u) == 0)
                v88 = v110;
              else
                v88 = (unint64_t)v109[1];
              if ((v108 & 0x80u) == 0)
                v89 = v107;
              else
                v89 = (void **)v107[0];
              if ((v108 & 0x80u) == 0)
                v90 = v108;
              else
                v90 = (unint64_t)v107[1];
              sub_20B916250(v85, v87, v88, v81, v82, v89, v90, v83, v79 + v78 * v76, 1, (uint64_t)&__p, 77, 2, v84);
              (*(void (**)(_QWORD *, uint64_t, const char *, uint64_t))(*v86 + 528))(v86, 3, "Adding a completion candidate", 1);
              v106 = v86;
              __dst[0] = &unk_24C459188;
              v119[0] = __dst;
              sub_20B8FDA94(a2, &v106, 1, 0, (uint64_t)__dst);
              v91 = (_QWORD *)v119[0];
              if ((_QWORD *)v119[0] == __dst)
              {
                v91 = __dst;
                v92 = 4;
LABEL_111:
                (*(void (**)(void))(*v91 + 8 * v92))();
              }
              else if (v119[0])
              {
                v92 = 5;
                goto LABEL_111;
              }
              v93 = v106;
              v106 = 0;
              if (v93)
                (*(void (**)(_QWORD *))(*v93 + 16))(v93);
              if ((char)v108 < 0)
                operator delete(v107[0]);
              if ((char)v110 < 0)
                operator delete(v109[0]);
              if (__p)
              {
                v112 = (char *)__p;
                operator delete(__p);
              }
              v94 = v105 + 1;
              v95 = 0x6DB6DB6DB6DB6DB7 * ((v104[1] - *v104) >> 3);
              if (v95 >= v102)
                v95 = v102;
              ++v105;
              if (v94 >= v95)
                goto LABEL_128;
              continue;
            }
          }
        }
      }
LABEL_132:
      ++v5;
    }
    while (v5 != v101);
  }
}

void sub_20B9134A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *__p,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v50 = 0;
  v51 = v48 - 208;
  while (1)
  {
    v52 = v51 + v50;
    if (*(char *)(v51 + v50 + 103) < 0)
      operator delete(*(void **)(v52 + 80));
    if (*(char *)(v52 + 79) < 0)
      operator delete(*(void **)(v52 + 56));
    v50 -= 56;
    if (v50 == -112)
    {
      __cxa_guard_abort(&qword_25472B760);
      _Unwind_Resume(a1);
    }
  }
}

BOOL sub_20B91371C(uint64_t a1, unsigned int a2)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = (uint64_t *)(&off_24C499C48 + 2 * word_20BA3BB2A[7 * a2 + 5]);
  v3 = v2[1];
  if (v3 >= 3)
  {
    v5 = 0;
    v6 = *v2;
    v7 = v6 + 2 * v3 - 6;
    while (word_20BA94B50[v5] == *(_WORD *)(v7 + v5 * 2))
    {
      if (++v5 == 3)
      {
        v8 = 0;
        while (word_20BA94B58[v8] == *(_WORD *)(v6 + v8 * 2))
        {
          if (++v8 == 3)
          {
            if (*(unsigned __int16 *)(a1 + 76) > a2)
              return 0;
            return *(unsigned __int16 *)(a1 + 78) >= a2;
          }
        }
        return 0;
      }
    }
  }
  return 0;
}

uint64_t sub_20B9137C8@<X0>(const void **a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  char *v8;
  const void *v9;
  const void *v10;

  if (*((char *)a1 + 23) >= 0)
    v5 = *((unsigned __int8 *)a1 + 23);
  else
    v5 = (unint64_t)a1[1];
  if (*((char *)a2 + 23) >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (unint64_t)a2[1];
  result = sub_20B878930(a3, v6 + v5);
  if (*(char *)(result + 23) >= 0)
    v8 = (char *)result;
  else
    v8 = *(char **)result;
  if (v5)
  {
    if (*((char *)a1 + 23) >= 0)
      v9 = a1;
    else
      v9 = *a1;
    result = (uint64_t)memmove(v8, v9, 2 * v5);
  }
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = *a2;
    result = (uint64_t)memmove(&v8[2 * v5], v10, 2 * v6);
  }
  *(_WORD *)&v8[2 * v5 + 2 * v6] = 0;
  return result;
}

void sub_20B913890()
{
  sub_20B83B31C("vector");
}

_QWORD *sub_20B9138A4(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  __int128 *v9;
  __int128 v10;
  char *v11;
  void **v12;
  __int128 v13;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >= 0x492492492492493)
      sub_20B80CDD8();
    v5 = 56 * a3;
    v6 = (char *)operator new(56 * a3);
    v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    do
    {
      v8 = &v6[v7];
      v9 = (__int128 *)(a2 + v7);
      if (*(char *)(a2 + v7 + 23) < 0)
      {
        sub_20B88DD4C(v8, *(void **)v9, *((_QWORD *)v9 + 1));
      }
      else
      {
        v10 = *v9;
        *((_QWORD *)v8 + 2) = *((_QWORD *)v9 + 2);
        *(_OWORD *)v8 = v10;
      }
      v11 = &v6[v7 + 24];
      v12 = (void **)(a2 + v7 + 24);
      if (*(char *)(a2 + v7 + 47) < 0)
      {
        sub_20B88DD4C(v11, *v12, *(_QWORD *)(a2 + v7 + 32));
      }
      else
      {
        v13 = *(_OWORD *)v12;
        *(_QWORD *)&v6[v7 + 40] = *(_QWORD *)(a2 + v7 + 40);
        *(_OWORD *)v11 = v13;
      }
      *(_WORD *)&v6[v7 + 48] = *(_WORD *)(a2 + v7 + 48);
      v7 += 56;
    }
    while (v5 != v7);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_20B9139C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20B913A50(&a9);
  _Unwind_Resume(a1);
}

void **sub_20B913A1C(void **a1)
{
  void **v3;

  v3 = a1;
  sub_20B913A50(&v3);
  return a1;
}

void sub_20B913A50(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        sub_20B892DCC(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_20B913AC0(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;

  if (!a1)
    return 0;
  v3 = objc_msgSend_path(a1, a2, a3);
  if (!v3)
    return 0;
  v6 = (void *)v3;
  v7 = objc_msgSend_defaultManager(MEMORY[0x24BDD1580], v4, v5);
  v10 = objc_msgSend_stringByStandardizingPath(v6, v8, v9);
  return MEMORY[0x24BEDD108](v7, sel_removeItemAtPath_error_, v10);
}

void sub_20B913B1C(uint64_t *a1, _QWORD *a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned __int16 v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  _QWORD *v47;
  _QWORD *v48;
  void **v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  unint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  void **v58;
  uint64_t v59;
  int v60;
  void *v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  void *v77;
  void **v78;
  void **v79;
  __int128 v80;
  void **v81;
  __int128 v82;
  void **v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  void *v93;
  uint64_t v94;
  int v95;
  unint64_t v96;
  uint64_t v97;
  void **v98;
  __int128 v99;
  void **v100;
  __int128 v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _WORD *v110;
  char *v111;
  unint64_t v112;
  uint64_t v113;
  unsigned __int8 *v114;
  unint64_t v115;
  char *v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  char *v120;
  unint64_t v121;
  unint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t **v125;
  uint64_t *v126;
  uint64_t v127;
  char v128;
  void **v129;
  uint64_t v130;
  char v131;
  NSObject *v132;
  uint8_t *v133;
  NSObject *v134;
  const char *v135;
  NSObject *v136;
  _QWORD *v137;
  _BOOL4 v138;
  uint64_t v139;
  unint64_t v140;
  unsigned __int8 v141;
  uint64_t v142;
  char *v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  char *v149;
  uint64_t v150;
  unint64_t v151;
  unsigned int v152;
  int v153;
  unsigned __int16 v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  uint64_t v164;
  uint64_t v165;
  _WORD *v166;
  unsigned int v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t *v177;
  uint64_t v178;
  uint64_t v179;
  unsigned __int16 v180;
  NSObject *v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  void *v187;
  unint64_t v188;
  BOOL v189;
  unint64_t v190;
  char *v191;
  char *v192;
  int v193;
  uint64_t *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t *v197;
  uint64_t v198;
  uint64_t v199;
  BOOL v200;
  uint64_t *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  int v205;
  uint64_t v206;
  int v207;
  float v208;
  int v209;
  int v210;
  float v211;
  uint64_t v212;
  unsigned int v213;
  void *v214;
  unsigned __int16 *v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t v220;
  __int16 v221;
  unint64_t v222;
  _BOOL4 v223;
  unint64_t v224;
  char *v225;
  uint64_t *v226;
  char v227;
  _WORD *v228;
  _WORD *v229;
  unint64_t v230;
  uint64_t v232;
  uint64_t v233;
  float *v235;
  uint64_t v237;
  char v238;
  uint64_t v239;
  uint64_t v240;
  _QWORD *v241;
  uint64_t v242;
  char v243;
  uint64_t v244;
  void **v245;
  char v246;
  char v247;
  uint64_t v248;
  _QWORD v249[6];
  void *v250;
  _QWORD *v251;
  uint64_t v252;
  __n128 (*v253)(_QWORD *, uint64_t);
  void (*v254)(uint64_t);
  _BYTE v255[24];
  _QWORD *v256;
  void *__p[3];
  void *v258[3];
  _QWORD v259[2];
  _QWORD v260[2];
  void *v261;
  void *v262;
  uint64_t v263;
  void *v264;
  void *v265;
  uint64_t v266;
  unint64_t v267;
  void *__s1[3];
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  void *v273[2];
  char v274;
  uint8_t buf[16];
  __int128 v276;
  int v277;
  __int128 v278;
  __int128 v279;
  uint64_t v280;

  v280 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a4 + 8);
  v6 = (unsigned __int16 *)sub_20B896F94();
  sub_20B8B2334(0);
  if (v5 <= v6[205])
  {
    v7 = a1[1];
    v8 = **(_QWORD **)(v7 + 80);
    v9 = *(_QWORD *)(v7 + 32);
    v10 = (*(_QWORD *)(v7 + 40) - v9) >> 1;
    if (v10 <= v8)
      v11 = 0;
    else
      v11 = v9 + 2 * v8;
    if (v9)
      v12 = v10 - v8;
    else
      v12 = 0;
    v13 = v10 > v8;
    v14 = **(_QWORD **)(v7 + 104);
    v15 = *(_QWORD *)(v7 + 56);
    if (!v13)
      v12 = 0;
    v218 = v12;
    v16 = (*(_QWORD *)(v7 + 64) - v15) >> 1;
    v17 = v15 + 2 * v14;
    if (v16 <= v14)
      v17 = 0;
    v219 = v17;
    v220 = v11;
    v18 = v15 ? v16 - v14 : 0;
    v13 = v16 > v14;
    v21 = v7 + 8;
    v19 = *(_QWORD *)(v7 + 8);
    v20 = *(_QWORD *)(v21 + 8);
    v22 = v13 ? v18 : 0;
    v217 = v22;
    v23 = 0xCCCCCCCCCCCCCCCDLL * ((v20 - v19) >> 3);
    v24 = (v23 - v6[204]) & ~((uint64_t)(v23 - v6[204]) >> 63);
    if (v24 <= v23)
    {
      v25 = 0;
      v215 = v6;
      v216 = 0xCCCCCCCCCCCCCCCDLL * ((v20 - v19) >> 3);
      v226 = a1;
      while (1)
      {
        v26 = (_QWORD *)a1[1];
        v27 = *(_QWORD *)(v26[13] + 8 * v24);
        v28 = v217 - v27;
        v29 = v219 + 2 * v27;
        v30 = *(_QWORD *)(v26[10] + 8 * v24);
        if (!v219)
          v28 = 0;
        v230 = v28;
        v225 = (char *)(v220 + 2 * v30);
        if (v220)
          v31 = v218 - v30;
        else
          v31 = 0;
        v224 = v31;
        v222 = v24;
        if (v24 == v23
          || ((v32 = v26[1] + 40 * v24, v33 = *(unsigned __int16 *)(v32 + 24),
                                        v34 = *(unsigned __int16 *)(v32 + 28),
                                        v33)
            ? (v35 = (_DWORD)v34 == 0)
            : (v35 = 1),
              v35))
        {
          v221 = 0;
          goto LABEL_33;
        }
        if (!v220)
          v33 = 0;
        *(_QWORD *)buf = v225;
        *(_QWORD *)&buf[8] = v33;
        if (!v219)
          v34 = 0;
        *(_QWORD *)&v279 = v29;
        *((_QWORD *)&v279 + 1) = v34;
        memset(__s1, 0, sizeof(__s1));
        v250 = 0;
        v251 = 0;
        v252 = 0;
        (*(void (**)(uint64_t, __int128 *, uint8_t *, _QWORD, void **, void **))(*(_QWORD *)a1[3] + 40))(a1[3], &v279, buf, v25, __s1, &v250);
        v214 = __s1[0];
        v213 = __s1[0] == __s1[1] ? 0 : *(unsigned __int16 *)__s1[0];
        if (!v25 || (sub_20B8B252C((uint64_t)&qword_25472C9B0, v25, v213) & 1) != 0)
          break;
        if (v250)
        {
          v251 = v250;
          operator delete(v250);
          v214 = __s1[0];
        }
        if (v214)
        {
          __s1[1] = v214;
          operator delete(v214);
        }
LABEL_318:
        v24 = v222 + 1;
        v25 = v213;
        v23 = v216;
        if (v222 + 1 > v216)
          return;
      }
      if (v250)
      {
        v251 = v250;
        operator delete(v250);
        v214 = __s1[0];
      }
      if (v214)
      {
        __s1[1] = v214;
        operator delete(v214);
      }
      v221 = v213;
LABEL_33:
      v250 = 0;
      v251 = &v250;
      v252 = 0x4002000000;
      v253 = sub_20B9153D0;
      v254 = sub_20B9153F4;
      memset(v255, 0, sizeof(v255));
      v36 = *a1;
      v38 = *a3;
      v37 = a3[1];
      v39 = *(_DWORD *)a1[2];
      if (*(_BYTE *)sub_20B896F94())
        v40 = 0;
      else
        v40 = (v39 >> 4) & 1;
      if ((v39 & 0x20) != 0)
        v41 = v40;
      else
        v41 = 0;
      v42 = *(unsigned int *)a1[2];
      v249[0] = MEMORY[0x24BDAC760];
      v249[1] = 0x40000000;
      v249[2] = sub_20B91541C;
      v249[3] = &unk_24C46C2D0;
      v249[4] = &v250;
      v249[5] = v215;
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, unint64_t, uint64_t, _QWORD *))(*(_QWORD *)v36 + 176))(v36, v38, 2 * v37, (v39 >> 5) & 1, v41, v29, 2 * v230, v42, v249);
      v43 = v251[5];
      if (v215[184] >= (unsigned __int16)(-29127 * ((v251[6] - v43) >> 3)))
        v44 = (unsigned __int16)(-29127 * ((v251[6] - v43) >> 3));
      else
        v44 = v215[184];
      if (!(_DWORD)v44)
        goto LABEL_317;
      v241 = (_QWORD *)v251[6];
      if ((_DWORD)v44 != 1)
      {
        v45 = ~((unint64_t)(v44 - 2) >> 1);
        v46 = (uint64_t *)(v43 + 72 * ((unint64_t)(v44 - 2) >> 1));
        do
        {
          sub_20B915AB8(v43, v44, v46);
          v46 -= 9;
          v200 = __CFADD__(v45++, 1);
        }
        while (!v200);
      }
      v47 = (_QWORD *)(v43 + 72 * v44);
      v48 = v241;
      v232 = v44;
      if (v47 != v241)
      {
        v245 = (void **)(v43 + 40);
        v49 = (void **)(v43 + 16);
        v50 = 72 * v44;
        do
        {
          v51 = v43 + v50;
          v52 = *(unsigned __int8 *)(v43 + v50 + 63);
          v53 = v52;
          if ((v52 & 0x80u) != 0)
            v52 = *(_QWORD *)(v43 + v50 + 48);
          v54 = *(unsigned __int8 *)(v43 + 63);
          if ((v54 & 0x80u) != 0)
            v54 = *(_QWORD *)(v43 + 48);
          if (v52 < v54)
          {
            __s1[0] = *(void **)v51;
            LOWORD(__s1[1]) = *(_WORD *)(v51 + 8);
            v55 = *(_QWORD *)(v51 + 16);
            *(_QWORD *)buf = *(_QWORD *)(v51 + 24);
            *(_QWORD *)&buf[7] = *(_QWORD *)(v51 + 31);
            v56 = *(_BYTE *)(v51 + 39);
            *(_QWORD *)(v51 + 24) = 0;
            *(_QWORD *)(v51 + 32) = 0;
            *(_QWORD *)(v51 + 16) = 0;
            v58 = (void **)(v51 + 40);
            v57 = *(_QWORD *)(v51 + 40);
            v59 = *(_QWORD *)(v43 + v50 + 48);
            *(_QWORD *)((char *)&v279 + 7) = *(_QWORD *)(v43 + v50 + 55);
            *(_QWORD *)&v279 = v59;
            *(_QWORD *)(v51 + 48) = 0;
            *(_QWORD *)(v51 + 56) = 0;
            *(_QWORD *)(v51 + 40) = 0;
            v60 = *(_DWORD *)(v51 + 64);
            v61 = *(void **)v43;
            *(_WORD *)(v51 + 8) = *(_WORD *)(v43 + 8);
            *(_QWORD *)v51 = v61;
            v62 = *(_OWORD *)v49;
            *(_QWORD *)(v51 + 32) = *(_QWORD *)(v43 + 32);
            *(_OWORD *)(v51 + 16) = v62;
            *(_BYTE *)(v43 + 39) = 0;
            *(_BYTE *)(v43 + 16) = 0;
            if (*(char *)(v51 + 63) < 0)
              operator delete(*v58);
            v63 = *(_OWORD *)v245;
            *(_QWORD *)(v51 + 56) = *(_QWORD *)(v43 + 56);
            *(_OWORD *)v58 = v63;
            *(_BYTE *)(v43 + 63) = 0;
            *(_BYTE *)(v43 + 40) = 0;
            *(_DWORD *)(v51 + 64) = *(_DWORD *)(v43 + 64);
            *(void **)v43 = __s1[0];
            *(_WORD *)(v43 + 8) = __s1[1];
            if (*(char *)(v43 + 39) < 0)
              operator delete(*v49);
            *(_QWORD *)(v43 + 16) = v55;
            *(_QWORD *)(v43 + 24) = *(_QWORD *)buf;
            *(_QWORD *)(v43 + 31) = *(_QWORD *)&buf[7];
            *(_BYTE *)(v43 + 39) = v56;
            if (*(char *)(v43 + 63) < 0)
              operator delete(*v245);
            *(_QWORD *)(v43 + 40) = v57;
            *(_QWORD *)(v43 + 48) = v279;
            *(_QWORD *)(v43 + 55) = *(_QWORD *)((char *)&v279 + 7);
            *(_BYTE *)(v43 + 63) = v53;
            *(_DWORD *)(v43 + 64) = v60;
            LODWORD(v44) = v232;
            sub_20B915AB8(v43, v232, (uint64_t *)v43);
            v48 = v241;
          }
          v50 += 72;
        }
        while ((_QWORD *)(v43 + v50) != v48);
      }
      if (v44 > 1)
      {
        v64 = v232;
        do
        {
          v65 = 0;
          v66 = v47;
          *(_QWORD *)buf = *(_QWORD *)v43;
          *(_WORD *)&buf[8] = *(_WORD *)(v43 + 8);
          v67 = *(_QWORD *)(v43 + 16);
          *(_QWORD *)&v278 = *(_QWORD *)(v43 + 24);
          *(_QWORD *)((char *)&v278 + 7) = *(_QWORD *)(v43 + 31);
          v238 = *(_BYTE *)(v43 + 39);
          *(_QWORD *)(v43 + 24) = 0;
          *(_QWORD *)(v43 + 32) = 0;
          *(_QWORD *)(v43 + 16) = 0;
          v242 = *(_QWORD *)(v43 + 40);
          v68 = *(void **)(v43 + 48);
          *(void **)((char *)v273 + 7) = *(void **)(v43 + 55);
          v273[0] = v68;
          v246 = *(_BYTE *)(v43 + 63);
          *(_QWORD *)(v43 + 40) = 0;
          *(_QWORD *)(v43 + 48) = 0;
          *(_QWORD *)(v43 + 56) = 0;
          v69 = v43;
          v70 = *(_DWORD *)(v43 + 64);
          do
          {
            v71 = v65 + 1;
            v72 = v69 + 72 * (v65 + 1);
            v73 = 2 * v65;
            v65 = (2 * v65) | 1;
            v74 = v73 + 2;
            if (v73 + 2 < v64)
            {
              v75 = *(_QWORD *)(v69 + 72 * v71 + 48);
              if (*(char *)(v72 + 63) >= 0)
                v75 = *(unsigned __int8 *)(v72 + 63);
              v76 = *(unsigned __int8 *)(v72 + 135);
              if ((v76 & 0x80u) != 0)
                v76 = *(_QWORD *)(v72 + 120);
              v72 += 72 * (v75 < v76);
              if (v75 < v76)
                v65 = v74;
            }
            v77 = *(void **)v72;
            *(_WORD *)(v69 + 8) = *(_WORD *)(v72 + 8);
            *(_QWORD *)v69 = v77;
            v78 = (void **)(v69 + 16);
            if (*(char *)(v69 + 39) < 0)
              operator delete(*v78);
            v79 = (void **)(v72 + 16);
            v80 = *(_OWORD *)(v72 + 16);
            *(_QWORD *)(v69 + 32) = *(_QWORD *)(v72 + 32);
            *(_OWORD *)v78 = v80;
            *(_BYTE *)(v72 + 39) = 0;
            *(_BYTE *)(v72 + 16) = 0;
            v81 = (void **)(v69 + 40);
            if (*(char *)(v69 + 63) < 0)
              operator delete(*v81);
            v82 = *(_OWORD *)(v72 + 40);
            *(_QWORD *)(v69 + 56) = *(_QWORD *)(v72 + 56);
            *(_OWORD *)v81 = v82;
            *(_BYTE *)(v72 + 63) = 0;
            *(_BYTE *)(v72 + 40) = 0;
            *(_DWORD *)(v69 + 64) = *(_DWORD *)(v72 + 64);
            v69 = v72;
          }
          while (v65 <= (uint64_t)((unint64_t)(v64 - 2) >> 1));
          v83 = (void **)(v72 + 40);
          v47 -= 9;
          if ((_QWORD *)v72 == v66 - 9)
          {
            v104 = *(_QWORD *)buf;
            *(_WORD *)(v72 + 8) = *(_WORD *)&buf[8];
            *(_QWORD *)v72 = v104;
            if (*(char *)(v72 + 39) < 0)
              operator delete(*v79);
            *(_QWORD *)(v72 + 16) = v67;
            v105 = v278;
            *(_QWORD *)(v72 + 31) = *(_QWORD *)((char *)&v278 + 7);
            *(_QWORD *)(v72 + 24) = v105;
            *(_BYTE *)(v72 + 39) = v238;
            if (*(char *)(v72 + 63) < 0)
              operator delete(*v83);
            *(_QWORD *)(v72 + 40) = v242;
            v106 = v273[0];
            *(void **)(v72 + 55) = *(void **)((char *)v273 + 7);
            *(_QWORD *)(v72 + 48) = v106;
            *(_BYTE *)(v72 + 63) = v246;
            *(_DWORD *)(v72 + 64) = v70;
          }
          else
          {
            v84 = *v47;
            *(_WORD *)(v72 + 8) = *((_WORD *)v66 - 32);
            *(_QWORD *)v72 = v84;
            if (*(char *)(v72 + 39) < 0)
              operator delete(*v79);
            v85 = *(_OWORD *)(v66 - 7);
            *(_QWORD *)(v72 + 32) = *(v66 - 5);
            *(_OWORD *)v79 = v85;
            *((_BYTE *)v66 - 33) = 0;
            *((_BYTE *)v66 - 56) = 0;
            if (*(char *)(v72 + 63) < 0)
              operator delete(*v83);
            v86 = *((_OWORD *)v66 - 2);
            *(_QWORD *)(v72 + 56) = *(v66 - 2);
            *(_OWORD *)v83 = v86;
            *((_BYTE *)v66 - 9) = 0;
            *((_BYTE *)v66 - 32) = 0;
            *(_DWORD *)(v72 + 64) = *((_DWORD *)v66 - 2);
            *v47 = *(_QWORD *)buf;
            *((_WORD *)v66 - 32) = *(_WORD *)&buf[8];
            if (*((char *)v66 - 33) < 0)
              operator delete((void *)*(v66 - 7));
            *(v66 - 7) = v67;
            *(v66 - 6) = v278;
            *(_QWORD *)((char *)v66 - 41) = *(_QWORD *)((char *)&v278 + 7);
            *((_BYTE *)v66 - 33) = v238;
            if (*((char *)v66 - 9) < 0)
              operator delete((void *)*(v66 - 4));
            *(v66 - 4) = v242;
            *(v66 - 3) = v273[0];
            *(_QWORD *)((char *)v66 - 17) = *(void **)((char *)v273 + 7);
            *((_BYTE *)v66 - 9) = v246;
            *((_DWORD *)v66 - 2) = v70;
            v87 = v72 + 72 - v43;
            if (v87 >= 73)
            {
              v88 = (v87 / 0x48uLL - 2) >> 1;
              v89 = v43 + 72 * v88;
              v90 = *(unsigned __int8 *)(v89 + 63);
              if ((v90 & 0x80u) != 0)
                v90 = *(_QWORD *)(v89 + 48);
              v91 = *(_QWORD *)(v72 + 48);
              if (*(char *)(v72 + 63) >= 0)
                v92 = *(unsigned __int8 *)(v72 + 63);
              else
                v92 = *(_QWORD *)(v72 + 48);
              if (v90 < v92)
              {
                v247 = *(_BYTE *)(v72 + 63);
                v93 = *(void **)v72;
                LOWORD(__s1[1]) = *(_WORD *)(v72 + 8);
                __s1[0] = v93;
                v239 = *(_QWORD *)(v72 + 16);
                v94 = *(_QWORD *)(v72 + 24);
                *(_QWORD *)((char *)&v279 + 7) = *(_QWORD *)(v72 + 31);
                *(_QWORD *)&v279 = v94;
                v227 = *(_BYTE *)(v72 + 39);
                *v79 = 0;
                *(_QWORD *)(v72 + 24) = 0;
                *(_QWORD *)(v72 + 32) = 0;
                v243 = *(_BYTE *)(v72 + 40);
                LODWORD(v94) = *(_DWORD *)(v72 + 41);
                *(_DWORD *)((char *)&v264 + 3) = *(_DWORD *)(v72 + 44);
                LODWORD(v264) = v94;
                LODWORD(v94) = *(_DWORD *)(v72 + 59);
                LODWORD(v261) = *(_DWORD *)(v72 + 56);
                *(_DWORD *)((char *)&v261 + 3) = v94;
                *(_QWORD *)(v72 + 48) = 0;
                *(_QWORD *)(v72 + 56) = 0;
                *v83 = 0;
                v95 = *(_DWORD *)(v72 + 64);
                do
                {
                  v96 = v89;
                  v97 = *(_QWORD *)v89;
                  *(_WORD *)(v72 + 8) = *(_WORD *)(v96 + 8);
                  *(_QWORD *)v72 = v97;
                  v98 = (void **)(v72 + 16);
                  if (*(char *)(v72 + 39) < 0)
                    operator delete(*v98);
                  v99 = *(_OWORD *)(v96 + 16);
                  *(_QWORD *)(v72 + 32) = *(_QWORD *)(v96 + 32);
                  *(_OWORD *)v98 = v99;
                  *(_BYTE *)(v96 + 39) = 0;
                  *(_BYTE *)(v96 + 16) = 0;
                  v100 = (void **)(v72 + 40);
                  if (*(char *)(v72 + 63) < 0)
                    operator delete(*v100);
                  v101 = *(_OWORD *)(v96 + 40);
                  *(_QWORD *)(v72 + 56) = *(_QWORD *)(v96 + 56);
                  *(_OWORD *)v100 = v101;
                  *(_BYTE *)(v96 + 63) = 0;
                  *(_BYTE *)(v96 + 40) = 0;
                  *(_DWORD *)(v72 + 64) = *(_DWORD *)(v96 + 64);
                  if (!v88)
                    break;
                  v88 = (v88 - 1) >> 1;
                  v89 = v43 + 72 * v88;
                  v102 = *(unsigned __int8 *)(v89 + 63);
                  if ((v102 & 0x80u) != 0)
                    v102 = *(_QWORD *)(v89 + 48);
                  v72 = v96;
                }
                while (v102 < v92);
                *(void **)v96 = __s1[0];
                *(_WORD *)(v96 + 8) = __s1[1];
                if (*(char *)(v96 + 39) < 0)
                  operator delete(*(void **)(v96 + 16));
                v103 = v279;
                *(_QWORD *)(v96 + 16) = v239;
                *(_QWORD *)(v96 + 24) = v103;
                *(_QWORD *)(v96 + 31) = *(_QWORD *)((char *)&v279 + 7);
                *(_BYTE *)(v96 + 39) = v227;
                if (*(char *)(v96 + 63) < 0)
                  operator delete(*(void **)(v96 + 40));
                *(_BYTE *)(v96 + 40) = v243;
                *(_DWORD *)(v96 + 41) = (_DWORD)v264;
                *(_DWORD *)(v96 + 44) = *(_DWORD *)((char *)&v264 + 3);
                *(_QWORD *)(v96 + 48) = v91;
                *(_DWORD *)(v96 + 56) = (_DWORD)v261;
                *(_DWORD *)(v96 + 59) = *(_DWORD *)((char *)&v261 + 3);
                *(_BYTE *)(v96 + 63) = v247;
                *(_DWORD *)(v96 + 64) = v95;
              }
            }
          }
          v13 = v64-- <= 2;
        }
        while (!v13);
      }
      v107 = 0;
      a1 = v226;
      v108 = v232;
LABEL_115:
      v109 = v251[5];
      v110 = (_WORD *)(v109 + 72 * v107);
      sub_20B915638((char **)v258, v110 + 20);
      v233 = v109;
      sub_20B915638((char **)__p, v110 + 8);
      v235 = (float *)sub_20B896F94();
      sub_20B9157A0((uint64_t *)&v279, (_QWORD *)v110 + 5);
      sub_20B9157A0((uint64_t *)&v278, (_QWORD *)v110 + 2);
      v248 = v107;
      v111 = (char *)v278;
      if (*((_QWORD *)&v279 + 1) - (_QWORD)v279 != *((_QWORD *)&v278 + 1) - (_QWORD)v278)
      {
        v123 = 0;
        goto LABEL_143;
      }
      v228 = v110;
      if (*((_QWORD *)&v279 + 1) != (_QWORD)v279)
      {
        v112 = 0;
        if ((unint64_t)((*((_QWORD *)&v279 + 1) - (_QWORD)v279) / 24) <= 1)
          v113 = 1;
        else
          v113 = (*((_QWORD *)&v279 + 1) - (_QWORD)v279) / 24;
        v114 = (unsigned __int8 *)(v279 + 23);
        v115 = v224;
        v116 = v225;
        v117 = v230;
        while (1)
        {
          if (!v117)
            goto LABEL_174;
          v118 = (char)*v114 < 0 ? *(_QWORD *)(v114 - 15) : *v114;
          if (v117 < v118)
            break;
          if (v111[23] < 0)
          {
            v120 = *(char **)v111;
            v119 = *((_QWORD *)v111 + 1);
          }
          else
          {
            v119 = v111[23];
            v120 = v111;
          }
          v121 = v120 ? v119 : 0;
          v122 = v115 - v121;
          if (v115 < v121 || !v116 && v121)
            break;
          if (memcmp(v116, v120, 2 * v121))
            break;
          v117 -= v118;
          v35 = v116 == 0;
          v116 += 2 * v121;
          if (v35)
            v115 = 0;
          else
            v115 = v122;
          ++v112;
          v111 += 24;
          v114 += 24;
          if (v113 == v112)
            goto LABEL_172;
        }
        v123 = 0;
        v108 = v232;
LABEL_143:
        v124 = v248;
        goto LABEL_144;
      }
      v113 = 0;
      v117 = v230;
LABEL_172:
      v112 = v113;
      v124 = v248;
      if (v117)
      {
        v123 = 0;
        v108 = v232;
        goto LABEL_144;
      }
LABEL_174:
      *(_OWORD *)buf = 0u;
      v276 = 0u;
      v277 = 1065353216;
      v267 = 0;
      sub_20B87B938(a3, &v267, (uint64_t)buf, (*(_DWORD *)a1[2] >> 30) & 1, v273);
      if (v274 < 0)
        operator delete(v273[0]);
      if ((*(_BYTE *)a1[2] & 0x20) == 0 || *(_BYTE *)v235)
      {
        v138 = 0;
        goto LABEL_179;
      }
      *(_OWORD *)__s1 = *(_OWORD *)a4;
      v182 = v279;
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v279 + 1) - v279) >> 3) <= v112)
      {
        v193 = 2;
        goto LABEL_313;
      }
      v183 = (char *)__s1[1];
      v184 = 24 * v112;
      v185 = v112;
      while (1)
      {
        v186 = v182 + v184;
        if (*(char *)(v182 + v184 + 23) >= 0)
          v187 = (void *)(v182 + v184);
        else
          v187 = *(void **)v186;
        v264 = v187;
        v188 = *(unsigned __int8 *)(v186 + 23);
        if ((v188 & 0x80u) != 0)
          v188 = *(_QWORD *)(v186 + 8);
        v265 = (void *)v188;
        if ((unint64_t)v183 < v188
          || (v188 ? (v189 = __s1[0] == 0) : (v189 = 0), v189 || memcmp(__s1[0], v187, 2 * v188)))
        {
          if (!sub_20B87C89C((uint64_t)__s1, (uint64_t)&v264))
          {
            v193 = 1;
LABEL_313:
            v138 = v193 != 2;
LABEL_179:
            v139 = *(_QWORD *)(a4 + 8);
            v140 = v267;
            v141 = atomic_load((unsigned __int8 *)&qword_25472B7A0);
            if ((v141 & 1) == 0 && __cxa_guard_acquire(&qword_25472B7A0))
            {
              qword_25472B798 = (uint64_t)sub_20B896F94();
              __cxa_guard_release(&qword_25472B7A0);
              a1 = v226;
            }
            v142 = 0;
            if (v112)
            {
              v143 = (char *)(v279 + 23);
              v144 = v112;
              do
              {
                if (*v143 < 0)
                  v145 = *(_QWORD *)(v143 - 15);
                else
                  v145 = *v143;
                v142 += v145;
                v143 += 24;
                --v144;
              }
              while (v144);
            }
            v146 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v279 + 1) - v279) >> 3);
            v147 = 0;
            v148 = v146 - v112;
            if (v146 > v112)
            {
              v149 = (char *)(v279 + 24 * v112 + 23);
              do
              {
                if (*v149 < 0)
                  v150 = *(_QWORD *)(v149 - 15);
                else
                  v150 = *v149;
                v147 += v150;
                v149 += 24;
                --v148;
              }
              while (v148);
            }
            v151 = v139 - v140;
            if (v138 && v151 < (unint64_t)(float)(*(float *)(qword_25472B798 + 400) * (float)v147))
            {
              v123 = 0;
              v108 = v232;
              v124 = v248;
            }
            else
            {
              v108 = v232;
              v124 = v248;
              if (v151 + v230 >= (unint64_t)(float)(*(float *)(qword_25472B798 + 392) * (float)(v147 + v142)))
              {
                v223 = v138;
                __s1[0] = (void *)a1[4];
                HIWORD(v152) = 0;
                *(_OWORD *)&__s1[1] = 0u;
                v269 = 0u;
                v270 = 0u;
                v271 = 0u;
                v272 = 0u;
                v153 = v146 - v112;
                if ((int)v146 <= (int)v112)
                {
                  v156 = 0;
                  v167 = 0;
                  v180 = 0;
                  v244 = 0;
                }
                else
                {
                  v154 = 0;
                  v155 = 0;
                  v156 = 0;
                  v229 = (_WORD *)(v233 + 72 * v248 + 4);
                  v240 = (int)v146 - 1 - (uint64_t)(int)v112;
                  v244 = 0;
                  v157 = 24 * (int)v112;
                  do
                  {
                    v158 = v279;
                    v159 = v279 + v157;
                    v160 = v278;
                    v161 = v244;
                    if (v156 > *(_QWORD *)(a4 + 8))
                      v161 = v244 + 1;
                    v244 = v161;
                    if (v155 >= a3[1])
                    {
                      v237 = 0;
                    }
                    else
                    {
                      if (*(char *)(v159 + 23) < 0)
                        v162 = *(_QWORD *)(v279 + v157 + 8);
                      else
                        v162 = *(unsigned __int8 *)(v159 + 23);
                      v264 = (void *)(v162 + v156);
                      v163 = sub_20B891738(buf, (unint64_t *)&v264);
                      if (v163)
                      {
                        v164 = v163[3] - v155;
                      }
                      else
                      {
                        if (*(char *)(v159 + 23) < 0)
                          v165 = *(_QWORD *)(v158 + v157 + 8);
                        else
                          v165 = *(unsigned __int8 *)(v159 + 23);
                        if (a3[1] - v155 >= 2 * v165)
                          v164 = 2 * v165;
                        else
                          v164 = a3[1] - v155;
                      }
                      v237 = v164;
                    }
                    v166 = (_WORD *)(v160 + v157);
                    v264 = 0;
                    v265 = 0;
                    v266 = 0;
                    v261 = 0;
                    v262 = 0;
                    v263 = 0;
                    v200 = v240-- != 0;
                    if (v200 || (v167 = (unsigned __int16)*v229, !*v229))
                    {
                      v168 = (uint64_t *)(v158 + v157);
                      if (*(char *)(v158 + v157 + 23) < 0)
                      {
                        v170 = *v168;
                        v169 = v168[1];
                      }
                      else
                      {
                        v169 = *(unsigned __int8 *)(v158 + v157 + 23);
                        v170 = v158 + v157;
                      }
                      v171 = v226[3];
                      if (!v170)
                        v169 = 0;
                      v260[0] = v170;
                      v260[1] = v169;
                      v172 = (uint64_t *)(v160 + v157);
                      if (*(char *)(v160 + v157 + 23) < 0)
                      {
                        v174 = *v172;
                        v173 = v172[1];
                      }
                      else
                      {
                        v173 = *(unsigned __int8 *)(v160 + v157 + 23);
                        v174 = v160 + v157;
                      }
                      if (!v174)
                        v173 = 0;
                      v259[0] = v174;
                      v259[1] = v173;
                      (*(void (**)(uint64_t, _QWORD *, _QWORD *, _QWORD, void **, void **))(*(_QWORD *)v171 + 40))(v171, v260, v259, v154, &v264, &v261);
                      if (v264 == v265)
                        v167 = 0;
                      else
                        v167 = *(unsigned __int16 *)v264;
                    }
                    v175 = v160 + v157;
                    if (*(char *)(v160 + v157 + 23) < 0)
                    {
                      v166 = *(_WORD **)v175;
                      v176 = *(_QWORD *)(v175 + 8);
                    }
                    else
                    {
                      v176 = *(unsigned __int8 *)(v160 + v157 + 23);
                    }
                    v177 = (uint64_t *)(v158 + v157);
                    if (*(char *)(v158 + v157 + 23) < 0)
                    {
                      v159 = *v177;
                      v178 = v177[1];
                    }
                    else
                    {
                      v178 = *(unsigned __int8 *)(v158 + v157 + 23);
                    }
                    sub_20B8CD43C(__s1, v166, v176, v237, (_WORD *)v159, v178, v167, v167);
                    if (*((char *)v177 + 23) < 0)
                      v179 = *(_QWORD *)(v158 + v157 + 8);
                    else
                      v179 = *((unsigned __int8 *)v177 + 23);
                    if (v261)
                    {
                      v262 = v261;
                      operator delete(v261);
                    }
                    if (v264)
                    {
                      v265 = v264;
                      operator delete(v264);
                    }
                    v156 += v179;
                    v155 += v237;
                    v157 += 24;
                    v180 = v154;
                    v154 = v167;
                    --v153;
                  }
                  while (v153);
                }
                a1 = v226;
                v108 = v232;
                if (a3[1])
                {
                  sub_20B8B2334(0);
                  if (v244 == 2)
                  {
                    v197 = (uint64_t *)(&off_24C499C48 + 2 * word_20BA3BB2A[7 * v180 + 4]);
                    if (v197[1] == 4)
                    {
                      v198 = 0;
                      v199 = *v197;
                      while (asc_20BA9250C[v198] == *(_WORD *)(v199 + v198 * 2))
                      {
                        if (++v198 == 4)
                        {
                          v200 = (unsigned __int16)word_25472CA08 <= v167 && (unsigned __int16)word_25472CA0A >= v167;
                          if (v200)
                          {
LABEL_314:
                            v123 = 0;
                            v124 = v248;
                            goto LABEL_303;
                          }
                          v201 = (uint64_t *)(&off_24C499C48 + 2 * word_20BA3BB2A[7 * v167]);
                          if (v201[1] == 3)
                          {
                            v202 = 0;
                            v203 = *v201;
                            while (asc_20BA92ED8[v202] == *(_WORD *)(v203 + v202 * 2))
                            {
                              v123 = 0;
                              ++v202;
                              v124 = v248;
                              if (v202 == 3)
                                goto LABEL_303;
                            }
                          }
                          break;
                        }
                      }
                    }
                  }
                  else if (v244 == 1)
                  {
                    v194 = (uint64_t *)(&off_24C499C48 + 2 * word_20BA3BB2A[7 * v167 + 4]);
                    if (v194[1] == 4)
                    {
                      v195 = 0;
                      v196 = *v194;
                      while (asc_20BA9250C[v195] == *(_WORD *)(v196 + v195 * 2))
                      {
                        if (++v195 == 4)
                          goto LABEL_314;
                      }
                    }
                  }
                }
                v204 = *(_QWORD *)(a4 + 8);
                v205 = 2 * (v156 != v204);
                v206 = 464;
                if ((*(_DWORD *)v226[2] & 0x6000002) == 0x4000002)
                  v206 = 466;
                v207 = *(__int16 *)((char *)v235 + v206);
                v208 = (float)-*((__int16 *)v235 + 236);
                LOWORD(v152) = *v228;
                v209 = (int)(float)(log2f((float)v152 / 100.0) * v208);
                v210 = *((__int16 *)v235 + 237) + *((__int16 *)v235 + 237) * (v156 - v204);
                v13 = (int)v156 - (int)v204 <= 0;
                v124 = v248;
                if (v13)
                  v210 = 0;
                v211 = -(float)(*(float *)(v233 + 72 * v248 + 64) * (float)*((__int16 *)v235 + 222));
                v212 = sub_20B8CD5F8((uint64_t)__s1, (uint64_t)a3, v210 + v207 + (int)v211 + v209, (int)(float)((float)v210 + (float)((float)(int)v211 * v235[112])), 0, 80, v205);
                v123 = (_QWORD *)v212;
                v108 = v232;
                if (v212)
                  (*(void (**)(uint64_t, _BOOL4))(*(_QWORD *)v212 + 512))(v212, v223);
LABEL_303:
                if (*((_QWORD *)&v272 + 1))
                  CFRelease(*((CFTypeRef *)&v272 + 1));
                *((_QWORD *)&v272 + 1) = 0;
                if ((_QWORD)v271)
                {
                  *((_QWORD *)&v271 + 1) = v271;
                  operator delete((void *)v271);
                }
                if (*((_QWORD *)&v269 + 1))
                {
                  *(_QWORD *)&v270 = *((_QWORD *)&v269 + 1);
                  operator delete(*((void **)&v269 + 1));
                }
                if (__s1[1])
                {
                  __s1[2] = __s1[1];
                  operator delete(__s1[1]);
                }
              }
              else
              {
                v123 = 0;
              }
            }
            sub_20B84055C((uint64_t)buf);
LABEL_144:
            __s1[0] = &v278;
            sub_20B83AFD0((void ***)__s1);
            __s1[0] = &v279;
            sub_20B83AFD0((void ***)__s1);
            v256 = v123;
            if (!v123)
              goto LABEL_165;
            (*(void (**)(_QWORD *, uint64_t, const char *, uint64_t))(*v123 + 528))(v123, 10, "Adding a phrase candidate", 1);
            LOBYTE(v279) = 0;
            __s1[0] = v256;
            if (v256)
            {
              v125 = sub_20B8CD218(a2 + 1, __s1);
              if (v125)
              {
                v126 = v125[3];
                if (v126 != (uint64_t *)-1)
                {
                  v127 = *(_QWORD *)(a2[6] + 8 * (_QWORD)v126);
                  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v127 + 408))(v127)
                    && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v127 + 200))(v127) & 1) == 0)
                  {
                    v181 = sub_20B9A7C5C(0xAu);
                    if (!os_log_type_enabled(v181, OS_LOG_TYPE_DEBUG))
                      goto LABEL_163;
                    LOWORD(__s1[0]) = 0;
                    v133 = (uint8_t *)__s1;
                    v134 = v181;
                    v135 = " ∟ Rejected";
                    goto LABEL_281;
                  }
                }
              }
            }
            __s1[0] = &unk_24C459188;
            *(_QWORD *)&v269 = __s1;
            v128 = sub_20B8FDA94(a2, &v256, 0, &v279, (uint64_t)__s1);
            v129 = (void **)v269;
            if ((void **)v269 == __s1)
            {
              v129 = __s1;
              v130 = 4;
LABEL_154:
              (*((void (**)(void))*v129 + v130))();
            }
            else if ((_QWORD)v269)
            {
              v130 = 5;
              goto LABEL_154;
            }
            if ((_BYTE)v279)
              v131 = v128;
            else
              v131 = 1;
            if ((v131 & 1) == 0)
            {
              v136 = sub_20B9A7C5C(0xAu);
              if (!os_log_type_enabled(v136, OS_LOG_TYPE_DEBUG))
                goto LABEL_163;
              *(_WORD *)buf = 0;
              v133 = buf;
              v134 = v136;
              v135 = " ∟ Replaced";
LABEL_281:
              _os_log_debug_impl(&dword_20B7F7000, v134, OS_LOG_TYPE_DEBUG, v135, v133, 2u);
              goto LABEL_163;
            }
            if ((v128 & 1) == 0)
            {
              v132 = sub_20B9A7C5C(0xAu);
              if (os_log_type_enabled(v132, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)buf = 0;
                v133 = buf;
                v134 = v132;
                v135 = " ∟ Rejected";
                goto LABEL_281;
              }
            }
LABEL_163:
            v137 = v256;
            v256 = 0;
            if (v137)
              (*(void (**)(_QWORD *))(*v137 + 16))(v137);
LABEL_165:
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
            if (v258[0])
            {
              v258[1] = v258[0];
              operator delete(v258[0]);
            }
            v107 = v124 + 1;
            if (v107 == v108)
            {
LABEL_317:
              _Block_object_dispose(&v250, 8);
              __s1[0] = v255;
              sub_20B9158FC((void ***)__s1);
              LOWORD(v213) = v221;
              goto LABEL_318;
            }
            goto LABEL_115;
          }
          v183 = (char *)__s1[1];
        }
        if (*(char *)(v186 + 23) < 0)
          v190 = *(_QWORD *)(v186 + 8);
        else
          v190 = *(unsigned __int8 *)(v186 + 23);
        if ((unint64_t)v183 > v190)
        {
          v191 = &v183[-v190];
          v192 = (char *)__s1[0] + 2 * v190;
          v183 = __s1[0] ? v191 : 0;
          __s1[0] = v192;
          __s1[1] = v183;
          ++v185;
          v182 = v279;
          v184 += 24;
          if (v185 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v279 + 1) - v279) >> 3))
            continue;
        }
        v193 = 2;
        goto LABEL_313;
      }
    }
  }
}

void sub_20B91523C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,uint64_t a56,void *a57,uint64_t a58)
{
  uint64_t v58;
  void ***v60;

  __cxa_guard_abort(&qword_25472B7A0);
  v60 = (void ***)sub_20B84055C(v58 - 224);
  *(_QWORD *)(v58 - 224) = v58 - 184;
  sub_20B83AFD0(v60);
  *(_QWORD *)(v58 - 224) = v58 - 160;
  sub_20B83AFD0((void ***)(v58 - 224));
  if (__p)
  {
    a55 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a57)
  {
    a58 = (uint64_t)a57;
    operator delete(a57);
  }
  _Block_object_dispose(&a45, 8);
  *(_QWORD *)(v58 - 224) = a18;
  sub_20B9158FC((void ***)(v58 - 224));
  _Unwind_Resume(a1);
}

__n128 sub_20B9153D0(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void sub_20B9153F4(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 40);
  sub_20B9158FC(&v1);
}

uint64_t sub_20B91541C(uint64_t a1, uint64_t *a2, _BYTE *a3)
{
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  __int128 v22;
  __int128 v23;
  int64x2_t v24;
  char *v25;
  char *v26;
  int64x2_t v27;
  char *v28;
  _QWORD *v29;

  v6 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  v7 = v6[6];
  v8 = v6[7];
  if (v7 >= v8)
  {
    v11 = v6[5];
    v12 = 0x8E38E38E38E38E39 * ((uint64_t)(v7 - v11) >> 3);
    if (v12 + 1 > 0x38E38E38E38E38ELL)
      sub_20B80CDD8();
    v13 = 0x8E38E38E38E38E39 * ((uint64_t)(v8 - v11) >> 3);
    v14 = 2 * v13;
    if (2 * v13 <= v12 + 1)
      v14 = v12 + 1;
    if (v13 >= 0x1C71C71C71C71C7)
      v15 = 0x38E38E38E38E38ELL;
    else
      v15 = v14;
    v29 = v6 + 7;
    if (v15)
    {
      if (v15 > 0x38E38E38E38E38ELL)
        sub_20B800BC0();
      v16 = (char *)operator new(72 * v15);
    }
    else
    {
      v16 = 0;
    }
    v26 = v16;
    v27.i64[0] = (uint64_t)&v16[72 * v12];
    v27.i64[1] = v27.i64[0];
    v28 = &v16[72 * v15];
    sub_20B9159B0(v27.i64[0], a2);
    v17 = v27.i64[0];
    v10 = v27.i64[0] + 72;
    v19 = v6[5];
    v18 = v6[6];
    if (v18 == v19)
    {
      v24 = vdupq_n_s64(v18);
    }
    else
    {
      do
      {
        v20 = *(_QWORD *)(v18 - 72);
        v18 -= 72;
        v21 = *(_WORD *)(v18 + 8);
        *(_QWORD *)(v17 - 72) = v20;
        v17 -= 72;
        *(_WORD *)(v17 + 8) = v21;
        v22 = *(_OWORD *)(v18 + 16);
        *(_QWORD *)(v17 + 32) = *(_QWORD *)(v18 + 32);
        *(_OWORD *)(v17 + 16) = v22;
        *(_QWORD *)(v18 + 24) = 0;
        *(_QWORD *)(v18 + 32) = 0;
        *(_QWORD *)(v18 + 16) = 0;
        v23 = *(_OWORD *)(v18 + 40);
        *(_QWORD *)(v17 + 56) = *(_QWORD *)(v18 + 56);
        *(_OWORD *)(v17 + 40) = v23;
        *(_QWORD *)(v18 + 48) = 0;
        *(_QWORD *)(v18 + 56) = 0;
        *(_QWORD *)(v18 + 40) = 0;
        *(_DWORD *)(v17 + 64) = *(_DWORD *)(v18 + 64);
      }
      while (v18 != v19);
      v24 = *(int64x2_t *)(v6 + 5);
    }
    v6[5] = v17;
    v6[6] = v10;
    v27 = v24;
    v25 = (char *)v6[7];
    v6[7] = v28;
    v28 = v25;
    v26 = (char *)v24.i64[0];
    result = sub_20B915A6C((uint64_t)&v26);
  }
  else
  {
    result = sub_20B9159B0(v6[6], a2);
    v10 = v7 + 72;
    v6[6] = v7 + 72;
  }
  v6[6] = v10;
  if (0x8E38E38E38E38E39
     * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48)
                - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40)) >> 3) == *(unsigned __int16 *)(*(_QWORD *)(a1 + 40) + 352))
    *a3 = 1;
  return result;
}

void sub_20B915618(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B915A6C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B915638(char **a1, unsigned __int16 *a2)
{
  int v2;
  unint64_t v3;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int16 *v8;
  _QWORD *v9;
  int v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int16 v20;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = *((char *)a2 + 23);
  v3 = *((_QWORD *)a2 + 1);
  if (v2 >= 0)
    v3 = *((unsigned __int8 *)a2 + 23);
  if (v3 >= 2)
  {
    v5 = 0;
    v6 = 0;
    v7 = v3 >> 1;
    if (v2 >= 0)
      v8 = a2;
    else
      v8 = *(unsigned __int16 **)a2;
    v9 = a1 + 2;
    do
    {
      v10 = *v8;
      if (v10 != 124)
      {
        if ((unint64_t)v5 >= *v9)
        {
          v12 = *a1;
          v13 = v5 - *a1;
          if (v13 <= -3)
            sub_20B80CDD8();
          v14 = v13 >> 1;
          v15 = *v9 - (_QWORD)v12;
          if (v15 <= (v13 >> 1) + 1)
            v16 = v14 + 1;
          else
            v16 = *v9 - (_QWORD)v12;
          if (v15 >= 0x7FFFFFFFFFFFFFFELL)
            v17 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v17 = v16;
          if (v17)
          {
            v18 = (char *)sub_20B80FD48((uint64_t)v9, v17);
            v12 = *a1;
            v5 = a1[1];
          }
          else
          {
            v18 = 0;
          }
          v19 = &v18[2 * v14];
          *(_WORD *)v19 = v10;
          v11 = v19 + 2;
          while (v5 != v12)
          {
            v20 = *((_WORD *)v5 - 1);
            v5 -= 2;
            *((_WORD *)v19 - 1) = v20;
            v19 -= 2;
          }
          *a1 = v19;
          a1[1] = v11;
          a1[2] = &v18[2 * v17];
          if (v12)
            operator delete(v12);
        }
        else
        {
          *(_WORD *)v5 = v10;
          v11 = v5 + 2;
        }
        a1[1] = v11;
        v5 = v11;
      }
      ++v8;
      ++v6;
    }
    while (v6 != v7);
  }
}

void sub_20B915780(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B9157A0(uint64_t *a1, _QWORD *a2)
{
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  void *v13;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = *((unsigned __int8 *)a2 + 23);
  v4 = a2[1];
  if ((v3 & 0x80u) != 0)
  {
    a2 = (_QWORD *)*a2;
    v3 = v4;
  }
  v13 = a2;
  if (v3 <= 1)
  {
    v12 = 0;
LABEL_17:
    result = sub_20B915DF0(a1, &v13, (unint64_t *)&v12);
    goto LABEL_18;
  }
  v5 = 0;
  v6 = 0;
  v7 = v3 >> 1;
  v8 = (v3 >> 1) - 1;
  v9 = (char *)a2;
  do
  {
    if (v6 && *(_WORD *)v9 == 124)
    {
      if (v8 == v6)
        goto LABEL_14;
      v12 = (v9 - (char *)a2) >> 1;
      if ((unint64_t)v5 >= a1[2])
      {
        v5 = (_QWORD *)sub_20B915DF0(a1, &v13, (unint64_t *)&v12);
      }
      else
      {
        sub_20B877ED0(v5, a2, (v9 - (char *)a2) >> 1);
        v5 += 3;
        a1[1] = (uint64_t)v5;
      }
      a1[1] = (uint64_t)v5;
      a2 = v9 + 2;
      v13 = v9 + 2;
    }
    v9 += 2;
LABEL_14:
    ++v6;
  }
  while (v7 != v6);
  v10 = a1[2];
  v12 = (v9 - (char *)a2) >> 1;
  if ((unint64_t)v5 >= v10)
    goto LABEL_17;
  sub_20B877ED0(v5, a2, (v9 - (char *)a2) >> 1);
  result = (uint64_t)(v5 + 3);
  a1[1] = (uint64_t)(v5 + 3);
LABEL_18:
  a1[1] = result;
  return result;
}

void sub_20B9158D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  a10 = (void **)v10;
  sub_20B83AFD0(&a10);
  _Unwind_Resume(a1);
}

void sub_20B9158FC(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 72;
        sub_20B91596C(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_20B91596C(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
}

uint64_t sub_20B9159B0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  __int128 v5;
  _BYTE *v6;
  __int128 v7;

  v4 = *a2;
  *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
  *(_QWORD *)a1 = v4;
  if (*((char *)a2 + 39) < 0)
  {
    sub_20B80ACE0((_BYTE *)(a1 + 16), (void *)a2[2], a2[3]);
  }
  else
  {
    v5 = *((_OWORD *)a2 + 1);
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_OWORD *)(a1 + 16) = v5;
  }
  v6 = (_BYTE *)(a1 + 40);
  if (*((char *)a2 + 63) < 0)
  {
    sub_20B80ACE0(v6, (void *)a2[5], a2[6]);
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 5);
    *(_QWORD *)(a1 + 56) = a2[7];
    *(_OWORD *)v6 = v7;
  }
  *(_DWORD *)(a1 + 64) = *((_DWORD *)a2 + 16);
  return a1;
}

void sub_20B915A50(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B915A6C(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 72;
    sub_20B91596C(i - 72);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20B915AB8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  void **v17;
  __int128 v18;
  void **v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  _BYTE v30[7];
  _BYTE v31[7];
  uint64_t v32;
  __int16 v33;
  _BYTE v34[15];

  v3 = a2 - 2;
  if (a2 >= 2)
  {
    v4 = a3;
    v6 = v3 >> 1;
    if ((uint64_t)(v3 >> 1) >= (uint64_t)(0x8E38E38E38E38E39 * (((uint64_t)a3 - a1) >> 3)))
    {
      v8 = (0x1C71C71C71C71C72 * (((uint64_t)a3 - a1) >> 3)) | 1;
      v9 = (uint64_t *)(a1 + 72 * v8);
      if (0x1C71C71C71C71C72 * (((uint64_t)a3 - a1) >> 3) + 2 < a2)
      {
        v10 = *((unsigned __int8 *)v9 + 63);
        if ((v10 & 0x80u) != 0)
          v10 = *(_QWORD *)(a1 + 72 * v8 + 48);
        v11 = *((unsigned __int8 *)v9 + 135);
        if ((v11 & 0x80u) != 0)
          v11 = v9[15];
        v9 += 9 * (v10 < v11);
        if (v10 < v11)
          v8 = 0x1C71C71C71C71C72 * (((uint64_t)a3 - a1) >> 3) + 2;
      }
      v12 = *((unsigned __int8 *)v9 + 63);
      if ((v12 & 0x80u) != 0)
        v12 = v9[6];
      if (*((char *)a3 + 63) >= 0)
        v13 = *((unsigned __int8 *)a3 + 63);
      else
        v13 = a3[6];
      if (v12 >= v13)
      {
        v28 = a3[6];
        v29 = *((_BYTE *)a3 + 63);
        v32 = *a3;
        v33 = *((_WORD *)a3 + 4);
        v26 = a3[2];
        *(_QWORD *)v34 = a3[3];
        *(_QWORD *)&v34[7] = *(uint64_t *)((char *)a3 + 31);
        v25 = *((_BYTE *)a3 + 39);
        a3[2] = 0;
        a3[3] = 0;
        v27 = *((_BYTE *)a3 + 40);
        *(_DWORD *)&v31[3] = *((_DWORD *)a3 + 11);
        *(_DWORD *)v31 = *(_DWORD *)((char *)a3 + 41);
        *(_DWORD *)&v30[3] = *(_DWORD *)((char *)a3 + 59);
        *(_DWORD *)v30 = *((_DWORD *)a3 + 14);
        a3[4] = 0;
        a3[5] = 0;
        a3[6] = 0;
        a3[7] = 0;
        v14 = *((_DWORD *)a3 + 16);
        do
        {
          v15 = v9;
          v16 = *v9;
          *((_WORD *)v4 + 4) = *((_WORD *)v15 + 4);
          *v4 = v16;
          v17 = (void **)(v4 + 2);
          if (*((char *)v4 + 39) < 0)
            operator delete(*v17);
          v18 = *((_OWORD *)v15 + 1);
          v4[4] = v15[4];
          *(_OWORD *)v17 = v18;
          *((_BYTE *)v15 + 39) = 0;
          *((_BYTE *)v15 + 16) = 0;
          v19 = (void **)(v4 + 5);
          if (*((char *)v4 + 63) < 0)
            operator delete(*v19);
          v20 = *(_OWORD *)(v15 + 5);
          v4[7] = v15[7];
          *(_OWORD *)v19 = v20;
          *((_BYTE *)v15 + 63) = 0;
          *((_BYTE *)v15 + 40) = 0;
          *((_DWORD *)v4 + 16) = *((_DWORD *)v15 + 16);
          if (v6 < v8)
            break;
          v21 = (2 * v8) | 1;
          v9 = (uint64_t *)(a1 + 72 * v21);
          if (2 * v8 + 2 < a2)
          {
            v22 = *((unsigned __int8 *)v9 + 63);
            if ((v22 & 0x80u) != 0)
              v22 = *(_QWORD *)(a1 + 72 * v21 + 48);
            v23 = *((unsigned __int8 *)v9 + 135);
            if ((v23 & 0x80u) != 0)
              v23 = v9[15];
            v9 += 9 * (v22 < v23);
            if (v22 < v23)
              v21 = 2 * v8 + 2;
          }
          v24 = *((unsigned __int8 *)v9 + 63);
          if ((v24 & 0x80u) != 0)
            v24 = v9[6];
          v4 = v15;
          v8 = v21;
        }
        while (v24 >= v13);
        *((_WORD *)v15 + 4) = v33;
        *v15 = v32;
        if (*((char *)v15 + 39) < 0)
          operator delete((void *)v15[2]);
        v15[2] = v26;
        v15[3] = *(_QWORD *)v34;
        *(uint64_t *)((char *)v15 + 31) = *(_QWORD *)&v34[7];
        *((_BYTE *)v15 + 39) = v25;
        if (*((char *)v15 + 63) < 0)
          operator delete((void *)v15[5]);
        *((_BYTE *)v15 + 40) = v27;
        *(_DWORD *)((char *)v15 + 41) = *(_DWORD *)v31;
        *((_DWORD *)v15 + 11) = *(_DWORD *)&v31[3];
        v15[6] = v28;
        *((_DWORD *)v15 + 14) = *(_DWORD *)v30;
        *(_DWORD *)((char *)v15 + 59) = *(_DWORD *)&v30[3];
        *((_BYTE *)v15 + 63) = v29;
        *((_DWORD *)v15 + 16) = v14;
      }
    }
  }
}

uint64_t sub_20B915DF0(uint64_t *a1, void **a2, unint64_t *a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t *v19;

  v4 = *a1;
  v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20B80CDD8();
  v9 = (uint64_t)(a1 + 2);
  v10 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3);
  if (2 * v10 > v6)
    v6 = 2 * v10;
  if (v10 >= 0x555555555555555)
    v11 = 0xAAAAAAAAAAAAAAALL;
  else
    v11 = v6;
  v19 = a1 + 2;
  if (v11)
    v12 = (char *)sub_20B828D70(v9, v11);
  else
    v12 = 0;
  v15 = v12;
  v16 = &v12[24 * v5];
  v17 = v16;
  v18 = &v12[24 * v11];
  sub_20B877ED0(v16, *a2, *a3);
  v17 = v16 + 24;
  sub_20B877F84(a1, &v15);
  v13 = a1[1];
  sub_20B83BC3C((uint64_t)&v15);
  return v13;
}

void sub_20B915EE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B83BC3C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B915EFC(uint64_t a1, uint64_t *a2, void *__src, unint64_t a4, void *a5, unint64_t a6, void *a7, unint64_t a8, int a9, int a10, char a11, uint64_t a12, int a13, int a14, int a15)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const UniChar *v23;
  const __CFAllocator *v24;
  CFIndex v25;
  const UniChar *v26;
  CFIndex v27;
  const UniChar *v28;
  const __CFAllocator *v29;
  CFIndex v30;
  const UniChar *v31;
  CFStringRef v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char v39;
  BOOL v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  char v44;

  v20 = a2[2];
  *(_QWORD *)a1 = v20;
  *(_QWORD *)(a1 + *(_QWORD *)(v20 - 32)) = a2[3];
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 0;
  v21 = a2[1];
  *(_QWORD *)a1 = v21;
  *(_QWORD *)(a1 + *(_QWORD *)(v21 - 32)) = a2[4];
  *(_QWORD *)(a1 + 24) = &unk_24C460BA8;
  v22 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + *(_QWORD *)(v22 - 32)) = a2[5];
  *(_QWORD *)(a1 + 24) = &off_24C463300;
  v23 = (const UniChar *)(a1 + 32);
  if (__src)
    sub_20B877ED0((_QWORD *)(a1 + 32), __src, a4);
  else
    sub_20B87C9E0((_BYTE *)(a1 + 32), byte_20BA93B9E);
  v24 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  if (*(char *)(a1 + 55) < 0)
  {
    v26 = *(const UniChar **)(a1 + 32);
    v25 = *(_QWORD *)(a1 + 40);
  }
  else
  {
    v25 = *(unsigned __int8 *)(a1 + 55);
    v26 = v23;
  }
  *(_QWORD *)(a1 + 56) = CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x24BDBD240], v26, v25);
  if (a5)
    sub_20B877ED0((_QWORD *)(a1 + 64), a5, a6);
  else
    sub_20B87C9E0((_BYTE *)(a1 + 64), byte_20BA93B9E);
  if (*(char *)(a1 + 87) < 0)
  {
    v28 = *(const UniChar **)(a1 + 64);
    v27 = *(_QWORD *)(a1 + 72);
  }
  else
  {
    v27 = *(unsigned __int8 *)(a1 + 87);
    v28 = (const UniChar *)(a1 + 64);
  }
  v29 = (const __CFAllocator *)*MEMORY[0x24BDBD258];
  *(_QWORD *)(a1 + 88) = CFStringCreateWithCharactersNoCopy(v24, v28, v27, (CFAllocatorRef)*MEMORY[0x24BDBD258]);
  sub_20B877ED0((_QWORD *)(a1 + 96), a7, a8);
  if (*(char *)(a1 + 119) < 0)
  {
    v31 = *(const UniChar **)(a1 + 96);
    v30 = *(_QWORD *)(a1 + 104);
  }
  else
  {
    v30 = *(unsigned __int8 *)(a1 + 119);
    v31 = (const UniChar *)(a1 + 96);
  }
  v32 = CFStringCreateWithCharactersNoCopy(v24, v31, v30, v29);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_QWORD *)(a1 + 120) = v32;
  *(_OWORD *)(a1 + 144) = 0u;
  sub_20B882248((_QWORD *)(a1 + 136), *(const void **)a12, *(_QWORD *)(a12 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a12 + 8) - *(_QWORD *)a12) >> 3));
  if (*(char *)(a1 + 87) < 0)
    v33 = *(_QWORD *)(a1 + 72);
  else
    v33 = *(unsigned __int8 *)(a1 + 87);
  *(_QWORD *)(a1 + 160) = v33;
  *(_DWORD *)(a1 + 168) = a9;
  *(_DWORD *)(a1 + 172) = a9;
  *(int64x2_t *)(a1 + 176) = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  *(_QWORD *)(a1 + 192) = -1;
  *(_BYTE *)(a1 + 200) = a11;
  *(_DWORD *)(a1 + 204) = a13;
  *(_DWORD *)(a1 + 208) = a14;
  *(_DWORD *)(a1 + 212) = a15;
  *(_WORD *)(a1 + 216) = 256;
  *(_BYTE *)(a1 + 218) = 0;
  *(_DWORD *)(a1 + 220) = a10;
  *(_WORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  v34 = *(_QWORD *)(a1 + 136);
  v35 = *(_QWORD *)(a1 + 144) - v34;
  if (v35)
  {
    v36 = (unsigned __int128)(v35 * (__int128)0x6666666666666667) >> 64;
    v37 = (v36 >> 4) + ((unint64_t)v36 >> 63);
    if (v37 <= 1)
      v38 = 1;
    else
      v38 = (v36 >> 4) + ((unint64_t)v36 >> 63);
    v39 = *(_BYTE *)(v34 + 37);
    if ((v39 & 1) != 0)
    {
      v41 = (char *)(v34 + 77);
      v42 = 1;
      do
      {
        v43 = v42;
        if (v38 == v42)
          break;
        v44 = *v41;
        v41 += 40;
        ++v42;
      }
      while ((v44 & 1) != 0);
      v40 = v43 >= v37;
    }
    else
    {
      v40 = 0;
    }
    *(_BYTE *)(a1 + 217) = v40;
    if (*(_DWORD *)(v34 + 8) == 6)
      *(_BYTE *)(a1 + 216) = (v39 & 4) != 0;
  }
  else
  {
    *(_BYTE *)(a1 + 217) = 1;
  }
  return a1;
}

void sub_20B9161BC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  const void **v4;
  const void **v5;
  void **v6;

  sub_20B87E150(v5, 0);
  sub_20B87E150(v4, 0);
  if (*(char *)(v1 + 119) < 0)
    operator delete(*v6);
  sub_20B87E150((const void **)(v1 + 88), 0);
  if (*(char *)(v1 + 87) < 0)
    operator delete(*v3);
  sub_20B87E150((const void **)(v1 + 56), 0);
  if (*(char *)(v1 + 55) < 0)
    operator delete(*v2);
  _Unwind_Resume(a1);
}

void sub_20B916248()
{
  JUMPOUT(0x20B916230);
}

uint64_t sub_20B916250(uint64_t a1, void *a2, unint64_t a3, void *a4, unint64_t a5, void *a6, unint64_t a7, int a8, int a9, char a10, uint64_t a11, int a12, int a13, int a14)
{
  const UniChar *v20;
  const __CFAllocator *v21;
  CFIndex v22;
  const UniChar *v23;
  CFIndex v24;
  const UniChar *v25;
  const __CFAllocator *v26;
  CFIndex v27;
  const UniChar *v28;
  CFStringRef v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  BOOL v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  char v41;

  *(_WORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_24C4630B0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 24) = &off_24C463300;
  v20 = (const UniChar *)(a1 + 32);
  if (a2)
    sub_20B877ED0((_QWORD *)(a1 + 32), a2, a3);
  else
    sub_20B87C9E0((_BYTE *)(a1 + 32), byte_20BA93B9E);
  v21 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  if (*(char *)(a1 + 55) < 0)
  {
    v23 = *(const UniChar **)(a1 + 32);
    v22 = *(_QWORD *)(a1 + 40);
  }
  else
  {
    v22 = *(unsigned __int8 *)(a1 + 55);
    v23 = v20;
  }
  *(_QWORD *)(a1 + 56) = CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x24BDBD240], v23, v22);
  if (a4)
    sub_20B877ED0((_QWORD *)(a1 + 64), a4, a5);
  else
    sub_20B87C9E0((_BYTE *)(a1 + 64), byte_20BA93B9E);
  if (*(char *)(a1 + 87) < 0)
  {
    v25 = *(const UniChar **)(a1 + 64);
    v24 = *(_QWORD *)(a1 + 72);
  }
  else
  {
    v24 = *(unsigned __int8 *)(a1 + 87);
    v25 = (const UniChar *)(a1 + 64);
  }
  v26 = (const __CFAllocator *)*MEMORY[0x24BDBD258];
  *(_QWORD *)(a1 + 88) = CFStringCreateWithCharactersNoCopy(v21, v25, v24, (CFAllocatorRef)*MEMORY[0x24BDBD258]);
  sub_20B877ED0((_QWORD *)(a1 + 96), a6, a7);
  if (*(char *)(a1 + 119) < 0)
  {
    v28 = *(const UniChar **)(a1 + 96);
    v27 = *(_QWORD *)(a1 + 104);
  }
  else
  {
    v27 = *(unsigned __int8 *)(a1 + 119);
    v28 = (const UniChar *)(a1 + 96);
  }
  v29 = CFStringCreateWithCharactersNoCopy(v21, v28, v27, v26);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_QWORD *)(a1 + 120) = v29;
  *(_OWORD *)(a1 + 144) = 0u;
  sub_20B882248((_QWORD *)(a1 + 136), *(const void **)a11, *(_QWORD *)(a11 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a11 + 8) - *(_QWORD *)a11) >> 3));
  if (*(char *)(a1 + 87) < 0)
    v30 = *(_QWORD *)(a1 + 72);
  else
    v30 = *(unsigned __int8 *)(a1 + 87);
  *(_QWORD *)(a1 + 160) = v30;
  *(_DWORD *)(a1 + 168) = a8;
  *(_DWORD *)(a1 + 172) = a8;
  *(int64x2_t *)(a1 + 176) = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  *(_QWORD *)(a1 + 192) = -1;
  *(_BYTE *)(a1 + 200) = a10;
  *(_DWORD *)(a1 + 204) = a12;
  *(_DWORD *)(a1 + 208) = a13;
  *(_DWORD *)(a1 + 212) = a14;
  *(_WORD *)(a1 + 216) = 256;
  *(_BYTE *)(a1 + 218) = 0;
  *(_DWORD *)(a1 + 220) = a9;
  *(_WORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  v31 = *(_QWORD *)(a1 + 136);
  v32 = *(_QWORD *)(a1 + 144) - v31;
  if (v32)
  {
    v33 = (unsigned __int128)(v32 * (__int128)0x6666666666666667) >> 64;
    v34 = (v33 >> 4) + ((unint64_t)v33 >> 63);
    if (v34 <= 1)
      v35 = 1;
    else
      v35 = (v33 >> 4) + ((unint64_t)v33 >> 63);
    v36 = *(_BYTE *)(v31 + 37);
    if ((v36 & 1) != 0)
    {
      v38 = (char *)(v31 + 77);
      v39 = 1;
      do
      {
        v40 = v39;
        if (v35 == v39)
          break;
        v41 = *v38;
        v38 += 40;
        ++v39;
      }
      while ((v41 & 1) != 0);
      v37 = v40 >= v34;
    }
    else
    {
      v37 = 0;
    }
    *(_BYTE *)(a1 + 217) = v37;
    if (*(_DWORD *)(v31 + 8) == 6)
      *(_BYTE *)(a1 + 216) = (v36 & 4) != 0;
  }
  else
  {
    *(_BYTE *)(a1 + 217) = 1;
  }
  return a1;
}

void sub_20B9164D0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  const void **v4;
  const void **v5;
  void **v6;

  sub_20B87E150(v5, 0);
  sub_20B87E150(v4, 0);
  if (*(char *)(v1 + 119) < 0)
    operator delete(*v6);
  sub_20B87E150((const void **)(v1 + 88), 0);
  if (*(char *)(v1 + 87) < 0)
    operator delete(*v3);
  sub_20B87E150((const void **)(v1 + 56), 0);
  if (*(char *)(v1 + 55) < 0)
    operator delete(*v2);
  _Unwind_Resume(a1);
}

void sub_20B91655C()
{
  JUMPOUT(0x20B916544);
}

uint64_t sub_20B916564(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  int v9;
  char v10;
  __int16 v11;
  int v12;
  __int16 v13;
  CFAllocatorRef *v14;
  CFIndex v15;
  const UniChar *v16;
  CFAllocatorRef *v17;
  CFStringRef v18;
  CFAllocatorRef *v19;
  CFIndex v20;
  const UniChar *v21;
  CFAllocatorRef *v22;
  CFAllocatorRef *v23;
  CFStringRef v24;
  CFIndex v25;
  const UniChar *v26;
  CFStringRef v27;
  const void *v28;
  const void *v29;
  const void *v30;
  const void *v31;
  const UniChar **v33;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = off_24C4630B0;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 24) = &off_24C463300;
  v5 = a1 + 32;
  v33 = (const UniChar **)v5;
  if (*(char *)(a2 + 55) < 0)
  {
    sub_20B88DD4C((_BYTE *)v5, *(void **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(v5 + 16) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)v5 = v6;
  }
  *(_QWORD *)(a1 + 56) = 0;
  if (*(char *)(a2 + 87) < 0)
  {
    sub_20B88DD4C((_BYTE *)(a1 + 64), *(void **)(a2 + 64), *(_QWORD *)(a2 + 72));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = v7;
  }
  *(_QWORD *)(a1 + 88) = 0;
  if (*(char *)(a2 + 119) < 0)
  {
    sub_20B88DD4C((_BYTE *)(a1 + 96), *(void **)(a2 + 96), *(_QWORD *)(a2 + 104));
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = v8;
  }
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_QWORD *)(a1 + 152) = 0;
  sub_20B882248((_QWORD *)(a1 + 136), *(const void **)(a2 + 136), *(_QWORD *)(a2 + 144), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 144) - *(_QWORD *)(a2 + 136)) >> 3));
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_QWORD *)(a1 + 204) = *(_QWORD *)(a2 + 204);
  v9 = *(_DWORD *)(a2 + 212);
  v10 = *(_BYTE *)(a2 + 216);
  v11 = *(_WORD *)(a2 + 217);
  v12 = *(_DWORD *)(a2 + 220);
  v13 = *(_WORD *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = 0;
  *(_DWORD *)(a1 + 212) = v9;
  *(_BYTE *)(a1 + 216) = v10;
  *(_WORD *)(a1 + 217) = v11;
  *(_DWORD *)(a1 + 220) = v12;
  *(_WORD *)(a1 + 224) = v13;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  v14 = (CFAllocatorRef *)MEMORY[0x24BDBD240];
  if (*(char *)(a1 + 55) < 0)
  {
    v15 = *(_QWORD *)(a1 + 40);
    if (!v15)
      goto LABEL_16;
    v16 = *v33;
  }
  else
  {
    v15 = *(unsigned __int8 *)(a1 + 55);
    if (!*(_BYTE *)(a1 + 55))
      goto LABEL_16;
    v16 = (const UniChar *)v33;
  }
  v17 = (CFAllocatorRef *)MEMORY[0x24BDBD240];
  v18 = CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x24BDBD240], v16, v15);
  sub_20B87E150((const void **)(a1 + 56), v18);
  v14 = v17;
LABEL_16:
  v19 = (CFAllocatorRef *)MEMORY[0x24BDBD258];
  if (*(char *)(a1 + 87) < 0)
  {
    v20 = *(_QWORD *)(a1 + 72);
    if (!v20)
      goto LABEL_22;
    v21 = *(const UniChar **)(a1 + 64);
  }
  else
  {
    v20 = *(unsigned __int8 *)(a1 + 87);
    if (!*(_BYTE *)(a1 + 87))
      goto LABEL_22;
    v21 = (const UniChar *)(a1 + 64);
  }
  v22 = v14;
  v23 = (CFAllocatorRef *)MEMORY[0x24BDBD258];
  v24 = CFStringCreateWithCharactersNoCopy(*v14, v21, v20, (CFAllocatorRef)*MEMORY[0x24BDBD258]);
  sub_20B87E150((const void **)(a1 + 88), v24);
  v19 = v23;
  v14 = v22;
LABEL_22:
  if (*(_QWORD *)(a2 + 120))
  {
    if (*(char *)(a1 + 119) < 0)
    {
      v26 = *(const UniChar **)(a1 + 96);
      v25 = *(_QWORD *)(a1 + 104);
    }
    else
    {
      v25 = *(unsigned __int8 *)(a1 + 119);
      v26 = (const UniChar *)(a1 + 96);
    }
    v27 = CFStringCreateWithCharactersNoCopy(*v14, v26, v25, *v19);
    sub_20B87E150((const void **)(a1 + 120), v27);
  }
  v28 = *(const void **)(a2 + 128);
  if (v28)
    sub_20B88B52C((const void **)(a1 + 128), v28);
  v29 = *(const void **)(a2 + 232);
  if (v29)
    sub_20B8CD320((const void **)(a1 + 232), v29);
  v30 = *(const void **)(a2 + 240);
  if (v30)
    sub_20B8A0168((const void **)(a1 + 240), v30);
  v31 = *(const void **)(a2 + 248);
  if (v31)
    sub_20B8A011C((const void **)(a1 + 248), v31);
  return a1;
}

void sub_20B91683C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, void **a13, const void **a14)
{
  uint64_t v14;
  const void **v15;

  sub_20B87E150(v15, 0);
  if (*(char *)(v14 + 87) < 0)
    operator delete(*a12);
  sub_20B87E150(a14, 0);
  if (*(char *)(v14 + 55) < 0)
    operator delete(*a13);
  _Unwind_Resume(a1);
}

uint64_t sub_20B916900(uint64_t a1, void *lpsrc)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t result;
  const __CFNumber *v7;
  const __CFNumber *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  BOOL v28;

  if (!lpsrc)
    return sub_20B98081C(a1, (uint64_t)lpsrc);
  v4 = (unsigned __int8 *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C5C8, 0);
  if (!v4)
    return sub_20B98081C(a1, (uint64_t)lpsrc);
  v5 = v4;
  if ((*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)v4 + 88))(v4))
    return sub_20B98081C(a1, (uint64_t)lpsrc);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) == 89
    && (*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)v5 + 96))(v5) != 89
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != 89
    && (*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)v5 + 96))(v5) == 89)
  {
    return 0;
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) == 89
    && (*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)v5 + 96))(v5) == 89)
  {
    v7 = (const __CFNumber *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 168))(a1);
    v8 = (const __CFNumber *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v5 + 168))(v5);
    if (CFNumberCompare(v7, v8, 0) == kCFCompareEqualTo)
    {
      v9 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
      v10 = (const void *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v5 + 160))(v5);
      result = CFEqual(v9, v10);
      if (!(_DWORD)result)
        return result;
      v11 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 544))(a1);
      v13 = v12;
      v14 = (const void *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v5 + 544))(v5);
      if (v13 == v15)
        return memcmp(v11, v14, 2 * v13) == 0;
    }
    return 0;
  }
  v16 = *(char *)(a1 + 55);
  v17 = *(_QWORD *)(a1 + 40);
  if (v16 >= 0)
    v17 = *(unsigned __int8 *)(a1 + 55);
  v18 = v5[55];
  v19 = (char)v18;
  if ((v18 & 0x80u) != 0)
    v18 = *((_QWORD *)v5 + 5);
  if (v17 != v18)
    return 0;
  if (!v17)
    return 1;
  if (v16 >= 0)
    v20 = (unsigned __int16 *)(a1 + 32);
  else
    v20 = *(unsigned __int16 **)(a1 + 32);
  if (v19 >= 0)
    v21 = (unsigned __int16 *)(v5 + 32);
  else
    v21 = (unsigned __int16 *)*((_QWORD *)v5 + 4);
  v22 = v17 - 1;
  do
  {
    v24 = *v20++;
    v23 = v24;
    v26 = *v21++;
    v25 = v26;
    v28 = v22-- != 0;
    result = v25 == v23;
  }
  while (v25 == v23 && v28);
  return result;
}

void sub_20B916B4C(uint64_t a1, char *a2, uint64_t a3)
{
  const __CFAllocator *v6;
  __CFArray *i;
  CFNumberRef v8;

  v6 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  for (i = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]); a3; --a3)
  {
    v8 = CFNumberCreate(v6, kCFNumberCFIndexType, a2);
    CFArrayAppendValue(i, v8);
    if (v8)
      CFRelease(v8);
    a2 += 8;
  }
  sub_20B88B74C((const void **)(a1 + 240), i);
}

void sub_20B916BF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B88AE28((const void **)va, 0);
  _Unwind_Resume(a1);
}

BOOL sub_20B916C10(uint64_t a1)
{
  return ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1) & 1) == 0
      && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 408))(a1) == 0;
}

uint64_t sub_20B916C5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a2)
  {
    v4 = 0;
    v5 = 0;
    do
      v5 += (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 568))(a1, v4++);
    while (a2 != v4);
  }
  else
  {
    v5 = 0;
  }
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 544))(a1);
  (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 568))(a1, a2);
  return v6 + 2 * v5;
}

uint64_t sub_20B916CF4(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  if ((a2 & 0x8000000000000000) != 0)
    return 0;
  v2 = *(_QWORD *)(a1 + 136);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 144) - v2) >> 3) <= a2)
    return 0;
  else
    return *(unsigned __int16 *)(v2 + 40 * a2 + 24);
}

uint64_t sub_20B916D30(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  if ((a2 & 0x8000000000000000) != 0)
    return 0;
  v2 = *(_QWORD *)(a1 + 136);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 144) - v2) >> 3) <= a2)
    return 0;
  else
    return *(unsigned __int16 *)(v2 + 40 * a2 + 26);
}

BOOL sub_20B916D6C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  if ((a2 & 0x8000000000000000) != 0)
    return 0;
  v2 = *(_QWORD *)(a1 + 136);
  return 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 144) - v2) >> 3) > a2 && *(_DWORD *)(v2 + 40 * a2 + 12) != 0;
}

uint64_t sub_20B916DB0(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  if ((a2 & 0x8000000000000000) != 0)
    return 0;
  v2 = *(_QWORD *)(a1 + 136);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 144) - v2) >> 3) <= a2)
    return 0;
  else
    return *(unsigned __int16 *)(v2 + 40 * a2 + 30);
}

uint64_t sub_20B916DEC(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  if ((a2 & 0x8000000000000000) != 0)
    return 0;
  v2 = *(_QWORD *)(a1 + 136);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 144) - v2) >> 3) <= a2)
    return 0;
  else
    return *(unsigned __int16 *)(v2 + 40 * a2 + 32);
}

uint64_t sub_20B916E28(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;

  if (*(char *)(a1 + 87) < 0)
    v2 = *(_QWORD *)(a1 + 72);
  else
    v2 = *(unsigned __int8 *)(a1 + 87);
  if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1))
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  v3 = 0;
  v4 = 0;
  while (1)
  {
    v4 += (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 312))(a1, v3);
    if (v4 > v2)
      break;
    if (++v3 >= (unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1))
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  }
  return v3;
}

uint64_t sub_20B916ED8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  if ((a2 & 0x8000000000000000) != 0)
    return 0;
  v2 = *(_QWORD *)(a1 + 136);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 144) - v2) >> 3) <= a2)
    return 0;
  else
    return *(unsigned int *)(v2 + 40 * a2 + 12);
}

uint64_t sub_20B916F14(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;

  sub_20B8B2334(0);
  while (1)
  {
    v4 = (*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1);
    v5 = *a1;
    if (a2 >= v4 - 1)
      break;
    v6 = (*(uint64_t (**)(uint64_t *, unint64_t))(v5 + 352))(a1, a2++);
    v7 = (*(uint64_t (**)(uint64_t *, unint64_t))(*a1 + 344))(a1, a2);
    if ((sub_20B8B252C((uint64_t)&qword_25472C9B0, v6, v7) & 1) != 0)
      return a2 - 1;
  }
  return (*(uint64_t (**)(uint64_t *))(v5 + 48))(a1) - 1;
}

uint64_t sub_20B916FC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  sub_20B8B2334(0);
  do
  {
    v4 = a2;
    if (!a2)
      break;
    --a2;
    v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 352))(a1, v4 - 1);
    v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 344))(a1, v4);
  }
  while (!sub_20B8B252C((uint64_t)&qword_25472C9B0, v5, v6));
  return v4;
}

uint64_t sub_20B917054(uint64_t a1)
{
  uint64_t result;

  result = sub_20B916E28(a1);
  if (result)
    return sub_20B916FC4(a1, result - 1);
  return result;
}

uint64_t sub_20B91708C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a2)
  {
    v4 = 0;
    v5 = 0;
    do
      v5 += (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 320))(a1, v4++);
    while (a2 != v4);
  }
  else
  {
    v5 = 0;
  }
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 552))(a1);
  (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 320))(a1, a2);
  return v6 + 2 * v5;
}

uint64_t sub_20B917124(uint64_t a1)
{
  return *(_QWORD *)(a1 + 120);
}

uint64_t sub_20B91712C(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int16 *)(*(_QWORD *)(a1 + 136) + 40 * a2 + 28);
}

void sub_20B917140(uint64_t a1, void *a2, unint64_t a3, uint64_t a4)
{
  void **v6;
  __int16 *v7;
  uint64_t v8;
  unint64_t v9;
  _WORD *v10;
  __int16 v11;
  CFIndex v12;
  CFStringRef v13;
  __int128 __dst;
  uint64_t v15;

  if (!a2)
    a3 = 0;
  sub_20B877ED0(&__dst, a2, a3);
  v6 = (void **)(a1 + 96);
  if (*(char *)(a1 + 119) < 0)
    operator delete(*v6);
  *(_OWORD *)v6 = __dst;
  *(_QWORD *)(a1 + 112) = v15;
  v7 = *(__int16 **)a4;
  v8 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
  if (v8)
  {
    v9 = v8 >> 1;
    if (v9 <= 1)
      v9 = 1;
    v10 = (_WORD *)(*(_QWORD *)(a1 + 136) + 28);
    do
    {
      v11 = *v7++;
      *v10 = v11;
      v10 += 20;
      --v9;
    }
    while (v9);
  }
  if (*(char *)(a1 + 119) < 0)
  {
    v6 = *(void ***)(a1 + 96);
    v12 = *(_QWORD *)(a1 + 104);
  }
  else
  {
    v12 = *(unsigned __int8 *)(a1 + 119);
  }
  v13 = CFStringCreateWithCharactersNoCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], (const UniChar *)v6, v12, (CFAllocatorRef)*MEMORY[0x24BDBD258]);
  sub_20B87E150((const void **)(a1 + 120), v13);
}

uint64_t sub_20B917218(uint64_t a1)
{
  unsigned __int16 *v2;
  unint64_t v3;
  int v4;
  uint64_t v6;
  int v7;
  unint64_t v9;

  v2 = (unsigned __int16 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 544))(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 544))(a1);
  if (!v2)
    return 0;
  if (!v3)
    return 1;
  v4 = *v2;
  if (v4 != 32 && (v4 & 0xFFFFFFDF) - 65 > 0x19)
    return 0;
  v6 = 1;
  while (v3 != v6)
  {
    v7 = v2[v6++];
    if (v7 != 32 && (v7 & 0xFFFFFFDF) - 65 >= 0x1A)
    {
      v9 = v6 - 1;
      return v9 >= v3;
    }
  }
  v9 = v3;
  return v9 >= v3;
}

uint64_t sub_20B9172C0(uint64_t a1)
{
  unint64_t v2;
  int v3;
  BOOL v5;
  uint64_t v6;

  if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1))
    return 0;
  sub_20B8B2334(0);
  if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1))
    return 1;
  v2 = 0;
  do
  {
    v3 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)a1 + 344))(a1, v2);
    v5 = (unsigned __int16)word_25472C9F2 == v3
      || (unsigned __int16)word_25472C9F4 == v3
      || (unsigned __int16)word_25472C9F6 == v3;
    v6 = v5;
    if (!v5)
      break;
    ++v2;
  }
  while (v2 < (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1));
  return v6;
}

uint64_t sub_20B917380(uint64_t a1)
{
  return *(_QWORD *)(a1 + 240);
}

uint64_t sub_20B917388(uint64_t a1)
{
  return *(_QWORD *)(a1 + 248);
}

void sub_20B917390(uint64_t a1, unsigned int a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  int v8;
  const char *v9;
  int v10;
  int v11;
  double v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint8_t buf[4];
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  int v34;
  __int16 v35;
  const char *v36;
  __int16 v37;
  int v38;
  __int16 v39;
  int v40;
  __int16 v41;
  unint64_t v42;
  __int16 v43;
  unint64_t v44;
  __int16 v45;
  int v46;
  __int16 v47;
  int v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  int v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v6 = sub_20B9A7C5C(a2);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    v7 = sub_20B9A7C5C(a2);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      v22 = *(_QWORD *)(a1 + 8);
      v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
      v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 232))(a1);
      if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) < 32)
        v8 = 63;
      else
        v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 408))(a1))
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 408))(a1) == 2)
          v9 = "prefix";
        else
          v9 = "partial";
      }
      else
      {
        v9 = "exact";
      }
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 384))(a1);
      v12 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 392))(a1);
      if (v12 >= -100.0)
        v13 = *(_QWORD *)&v12;
      else
        v13 = 0xC059000000000000;
      if (*(double *)(a1 + 184) >= -100.0)
        v14 = *(_QWORD *)(a1 + 184);
      else
        v14 = 0xC059000000000000;
      v15 = *(_DWORD *)(a1 + 220);
      v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1);
      v17 = *(_QWORD *)(a1 + 8);
      v18 = *(_DWORD *)(a1 + 192);
      *(_DWORD *)buf = 136318722;
      v24 = a3;
      v25 = 2048;
      v26 = v22;
      v27 = 2112;
      v28 = v21;
      v29 = 2112;
      v30 = v20;
      v31 = 2112;
      v32 = v19;
      v33 = 1024;
      v34 = v8;
      v35 = 2080;
      v36 = v9;
      v37 = 1024;
      v38 = v10;
      v39 = 1024;
      v40 = v11;
      v41 = 2048;
      v42 = v13;
      v43 = 2048;
      v44 = v14;
      v45 = 1024;
      v46 = v15;
      v47 = 1024;
      v48 = v16;
      v49 = 2048;
      v50 = v17;
      v51 = 1024;
      v52 = v18;
      _os_log_debug_impl(&dword_20B7F7000, v7, OS_LOG_TYPE_DEBUG, "%s (%ld): [%@] (%@/%@), type: %c, length: %s, cost: %d, base-cost: %d, prob: %3.3lf, static prob: %3.3lf penalty: %d autocorrected: %d, rank: %ld, rank(static LM): %d", buf, 0x80u);
    }
  }
}

uint64_t sub_20B917630(unsigned int a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  _DWORD *v3;
  unint64_t v4;
  _DWORD *v5;
  unint64_t v6;
  unsigned int *v7;
  _DWORD *v8;
  unsigned int v9;
  int v11;
  int v12;
  unsigned int v13;

  v1 = atomic_load((unsigned __int8 *)&qword_25472CD98);
  v2 = &unk_25472C000;
  if ((v1 & 1) == 0)
  {
    v13 = a1;
    v11 = __cxa_guard_acquire(&qword_25472CD98);
    v2 = &unk_25472C000;
    v12 = v11;
    a1 = v13;
    if (v12)
    {
      qword_25472CD90 = (uint64_t)&unk_20BA48314;
      __cxa_guard_release(&qword_25472CD98);
      v2 = (_QWORD *)&unk_25472C000;
      a1 = v13;
    }
  }
  v3 = (_DWORD *)v2[434];
  v4 = 293;
  v5 = v3;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a1)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  if (v5 == v3 + 293 || *v5 != a1)
    return -1;
  else
    return v5 - v3;
}

uint64_t sub_20B917700(uint64_t a1, CFTypeRef cf, uint64_t a3, unsigned int a4, int a5, int a6, int a7)
{
  uint64_t v12;
  std::string *v13;
  uint64_t *v14;
  uint64_t v15;
  CFTypeRef v16;
  const std::string *i;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v23;
  _QWORD aBlock[5];
  void *__p[2];
  char v26;
  UInt8 buffer[1024];
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)(a1 + 4) = 0u;
  v12 = a1 + 4;
  *(_DWORD *)(a1 + 68) = 0;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 20) = 0u;
  v13 = (std::string *)(a1 + 8);
  v23 = (uint64_t *)(a1 + 32);
  v14 = (uint64_t *)(a1 + 40);
  v15 = a1 + 48;
  *(_DWORD *)(a1 + 80) = a4;
  *(_DWORD *)(a1 + 84) = a6;
  *(_DWORD *)(a1 + 88) = a7;
  *(_DWORD *)(a1 + 92) = a5;
  if (cf)
    v16 = CFRetain(cf);
  else
    v16 = 0;
  *(_QWORD *)(v12 + 92) = v16;
  for (i = *(const std::string **)a3; i != *(const std::string **)(a3 + 8); i = (const std::string *)((char *)i + 32))
  {
    if (i[1].__r_.__value_.__s.__data_[4])
    {
      std::string::operator=(v13, i);
      break;
    }
  }
  if (v15 != a3)
    sub_20B91912C(v15, *(std::string **)a3, *(__int128 **)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 5);
  if (a4 > 5 || ((1 << a4) & 0x34) == 0)
  {
    v18 = operator new();
    sub_20B91CA60(v18);
    sub_20B91963C(v23, v18);
  }
  sub_20B917A40();
  std::mutex::lock(&stru_254729340);
  if (CFURLGetFileSystemRepresentation((CFURLRef)cf, 1u, buffer, 1024))
    v19 = (char *)buffer;
  else
    v19 = (char *)&unk_20BA71DF9;
  sub_20B80BBD0(__p, v19);
  v20 = operator new();
  sub_20B91A758(v20, (__int128 **)a3, (__int128 *)__p);
  sub_20B917E5C(v14, v20);
  v21 = *(_QWORD *)(a1 + 40);
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 0x40000000;
  aBlock[2] = sub_20B917A9C;
  aBlock[3] = &unk_24C46C2F0;
  aBlock[4] = a1;
  *(_QWORD *)(v21 + 152) = _Block_copy(aBlock);
  if (v26 < 0)
    operator delete(__p[0]);
  std::mutex::unlock(&stru_254729340);
  if (!*(_QWORD *)(*v14 + 56))
  {
    if (sub_20B917AC8(a1, (_DWORD *)v12))
    {
      sub_20B917B30(a1);
      sub_20B917B90(a1, a5);
    }
    else
    {
      sub_20B917BEC(a1);
    }
    sub_20B917D04(a1);
  }
  return a1;
}

void sub_20B917970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  void **v22;
  uint64_t v23;
  uint64_t *v24;
  const void **v25;

  MEMORY[0x20BD39CB0](v23, 0x10A0C403A2516C0);
  sub_20B876164(v25, 0);
  sub_20B86F120((void ***)&__p);
  sub_20B917E5C(v24, 0);
  sub_20B91963C(a10, 0);
  if (*(char *)(v21 + 31) < 0)
    operator delete(*v22);
  _Unwind_Resume(a1);
}

void sub_20B917A40()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25472CDA0);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_25472CDA0))
    {
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDB380], &unk_254729340, &dword_20B7F7000);
      __cxa_guard_release(&qword_25472CDA0);
    }
  }
}

void sub_20B917A9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(uint64_t **)(v1 + 32);
  if (v2)
    sub_20B91CBDC(v2);
  *(_DWORD *)(v1 + 4) = 0;
}

uint64_t sub_20B917AC8(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;

  sub_20B917A40();
  std::mutex::lock(&stru_254729340);
  v4 = sub_20B91A8F8(*(_QWORD *)(a1 + 40), a2);
  std::mutex::unlock(&stru_254729340);
  return v4;
}

void sub_20B917B18(_Unwind_Exception *a1)
{
  std::mutex::unlock(&stru_254729340);
  _Unwind_Resume(a1);
}

BOOL sub_20B917B30(uint64_t a1)
{
  _BOOL8 v2;

  sub_20B917A40();
  std::mutex::lock(&stru_254729340);
  v2 = sub_20B91C6D8(*(_QWORD *)(a1 + 40));
  std::mutex::unlock(&stru_254729340);
  return v2;
}

void sub_20B917B78(_Unwind_Exception *a1)
{
  std::mutex::unlock(&stru_254729340);
  _Unwind_Resume(a1);
}

void sub_20B917B90(uint64_t a1, int a2)
{
  sub_20B917A40();
  std::mutex::lock(&stru_254729340);
  sub_20B91B358(*(_QWORD *)(a1 + 40), a2);
  std::mutex::unlock(&stru_254729340);
}

void sub_20B917BD4(_Unwind_Exception *a1)
{
  std::mutex::unlock(&stru_254729340);
  _Unwind_Resume(a1);
}

void sub_20B917BEC(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  NSObject *v4;
  CFStringRef v5;
  int v6;
  CFStringRef v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  sub_20B917A40();
  std::mutex::lock(&stru_254729340);
  sub_20B91C690(*(_QWORD *)(a1 + 40) + 56);
  std::mutex::unlock(&stru_254729340);
  sub_20B913AC0(*(void **)(a1 + 96), v2, v3);
  sub_20B917AC8(a1, (_DWORD *)(a1 + 4));
  sub_20B91833C(a1);
  sub_20B917B30(a1);
  sub_20B917B90(a1, *(_DWORD *)(a1 + 92));
  v4 = sub_20B9A7C5C(0);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    v5 = CFURLGetString(*(CFURLRef *)(a1 + 96));
    v6 = 138412290;
    v7 = v5;
    _os_log_error_impl(&dword_20B7F7000, v4, OS_LOG_TYPE_ERROR, "Corruption of learning dictionary detected. Database has been reset: %@", (uint8_t *)&v6, 0xCu);
  }
}

void sub_20B917CEC(_Unwind_Exception *a1)
{
  std::mutex::unlock(&stru_254729340);
  _Unwind_Resume(a1);
}

uint64_t sub_20B917D04(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  _QWORD v4[5];

  result = *(_QWORD *)(a1 + 32);
  if (result)
  {
    sub_20B91CC48(result);
    sub_20B917A40();
    std::mutex::lock(&stru_254729340);
    v3 = *(_QWORD *)(a1 + 40);
    v4[0] = MEMORY[0x24BDAC760];
    v4[1] = 0x40000000;
    v4[2] = sub_20B918BD8;
    v4[3] = &unk_24C46CC18;
    v4[4] = a1;
    sub_20B91B9F0(v3, (const char *)(a1 + 8), (uint64_t)v4);
    std::mutex::unlock(&stru_254729340);
    result = sub_20B91CE94(*(_QWORD **)(a1 + 32));
  }
  *(_BYTE *)a1 = 0;
  return result;
}

void sub_20B917D9C(_Unwind_Exception *a1)
{
  std::mutex::unlock(&stru_254729340);
  _Unwind_Resume(a1);
}

uint64_t sub_20B917DB4(uint64_t a1)
{
  void **v3;

  sub_20B917B30(a1);
  if (*(_QWORD *)(a1 + 40))
  {
    sub_20B917A40();
    std::mutex::lock(&stru_254729340);
    sub_20B917E5C((uint64_t *)(a1 + 40), 0);
    std::mutex::unlock(&stru_254729340);
  }
  sub_20B876164((const void **)(a1 + 96), 0);
  v3 = (void **)(a1 + 48);
  sub_20B86F120(&v3);
  sub_20B917E5C((uint64_t *)(a1 + 40), 0);
  sub_20B91963C((uint64_t *)(a1 + 32), 0);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20B917E5C(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_20B91A890(result);
    JUMPOUT(0x20BD39CB0);
  }
  return result;
}

uint64_t sub_20B917E98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void ***v6;
  void **v7;
  void **v8;
  int v9;
  uint64_t v10;
  _QWORD v12[8];
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;

  v6 = *(void ****)(a1 + 40);
  v7 = *v6;
  if (*v6 == v6[1])
  {
LABEL_6:
    v13 = 0;
    v14 = &v13;
    v15 = 0x2000000000;
    v16 = 1;
    v12[0] = MEMORY[0x24BDAC760];
    v12[1] = 0x40000000;
    v12[2] = sub_20B917FC4;
    v12[3] = &unk_24C49C948;
    v12[6] = a2;
    v12[7] = a3;
    v12[4] = &v13;
    v12[5] = a1;
    v9 = sub_20B91C5D0((uint64_t)v6, (uint64_t)v12);
    if (v9 != 1)
    {
      if (v9 != 2)
      {
        v10 = *((unsigned int *)v14 + 6);
        goto LABEL_12;
      }
      sub_20B917BEC(a1);
    }
    v10 = 3;
LABEL_12:
    _Block_object_dispose(&v13, 8);
    return v10;
  }
  v8 = (void **)(a2 + 8);
  while (v8 != sub_20B871B2C(a2, v7))
  {
    v7 += 4;
    if (v7 == v6[1])
    {
      v6 = *(void ****)(a1 + 40);
      goto LABEL_6;
    }
  }
  return 3;
}

void sub_20B917FAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20B917FC4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void **v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  int *v14;
  int v15;
  int *v16;
  uint64_t v17;
  int v18;
  NSObject *v19;
  os_signpost_id_t v20;
  NSObject *v21;
  NSObject *v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  NSObject *v27;
  NSObject *v28;
  int ptr;
  uint8_t buf[4];
  int v31;
  __int16 v32;
  int v33;
  __int16 v34;
  int v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v2 = a1[5];
  ++*(_DWORD *)(v2 + 4);
  v3 = a1[6];
  if (*(_QWORD *)(v2 + 32))
  {
    v4 = sub_20B871B2C(a1[6], (void **)(v2 + 8));
    v5 = (uint64_t *)(*(uint64_t (**)(void *))(*(_QWORD *)v4[7] + 16))(v4[7]);
    v6 = *(_QWORD **)(v2 + 32);
    v7 = *v5;
    v8 = v5[1] - *v5;
    *(_DWORD *)buf = 0;
    if (((**(uint64_t (***)(_QWORD, uint64_t, uint64_t, uint8_t *))*v6)(*v6, v7, v8, buf) & 1) == 0
      || (v9 = v6[2]) == 0)
    {
      ptr = -1;
      v12 = (uint64_t *)(v2 + 40);
      v11 = *(_QWORD *)(v2 + 40);
      goto LABEL_11;
    }
    v10 = sub_20B91C320(*(uint64_t **)(v2 + 40), v3, (_QWORD *)(v9 + 24 * *(int *)buf));
  }
  else
  {
    v10 = sub_20B91C264(*(uint64_t **)(v2 + 40), v3);
  }
  v13 = v10;
  ptr = v10;
  v12 = (uint64_t *)(v2 + 40);
  v11 = *(_QWORD *)(v2 + 40);
  if (v13 != -1)
  {
    sub_20B91AE38(v11, v13, *(_DWORD *)(v2 + 4));
    v14 = (int *)a1[7];
    if (v14)
      *v14 = v13;
    *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = 0;
    goto LABEL_13;
  }
LABEL_11:
  v15 = sub_20B91AEA4(v11, a1[6], *(_DWORD *)(v2 + 4));
  sub_20B9182AC(v2, a1[6], v15, 1);
  v16 = (int *)a1[7];
  if (v16)
    *v16 = v15;
LABEL_13:
  v17 = *(_QWORD *)(v2 + 32);
  if (v17)
    v18 = *(_DWORD *)(v17 + 8);
  else
    v18 = sub_20B91AD00(*v12);
  if (v18 <= *(_DWORD *)(v2 + 88))
  {
    sub_20B91B0C8(*(_QWORD *)(v2 + 40), *(_DWORD *)(v2 + 4));
  }
  else
  {
    v19 = sub_20B9A7C5C(0xDu);
    v20 = os_signpost_id_make_with_pointer(v19, &ptr);
    v21 = sub_20B9A7C5C(0xDu);
    if (v20 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v22 = v21;
      if (os_signpost_enabled(v21))
      {
        v23 = *(_QWORD *)(v2 + 32);
        if (v23)
          v24 = *(_DWORD *)(v23 + 8);
        else
          v24 = sub_20B91AD00(*v12);
        v26 = *(_DWORD *)(v2 + 84);
        v25 = *(_DWORD *)(v2 + 88);
        *(_DWORD *)buf = 67109632;
        v31 = v24;
        v32 = 1024;
        v33 = v25;
        v34 = 1024;
        v35 = v26;
        _os_signpost_emit_with_name_impl(&dword_20B7F7000, v22, OS_SIGNPOST_INTERVAL_BEGIN, v20, "LearningDictionaryRebuild", "curSize: %d, rebuildThreshold: %d, newSize: %d", buf, 0x14u);
      }
    }
    sub_20B91B11C(*(_QWORD *)(v2 + 40), *(_DWORD *)(v2 + 84));
    *(_DWORD *)(v2 + 4) = *(_DWORD *)(v2 + 84);
    sub_20B917D04(v2);
    *(_BYTE *)v2 = 1;
    v27 = sub_20B9A7C5C(0xDu);
    if (v20 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v28 = v27;
      if (os_signpost_enabled(v27))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_20B7F7000, v28, OS_SIGNPOST_INTERVAL_END, v20, "LearningDictionaryRebuild", (const char *)&unk_20BA9505F, buf, 2u);
      }
    }
  }
}

uint64_t sub_20B9182AC(uint64_t result, uint64_t a2, int a3, int a4)
{
  uint64_t v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;

  if (*(_QWORD *)(result + 32))
  {
    v6 = result;
    v7 = sub_20B871B2C(a2, (void **)(result + 8));
    v8 = (*(uint64_t (**)(void *))(*(_QWORD *)v7[7] + 16))(v7[7]);
    v9 = *(_QWORD **)(v6 + 32);
    v10 = *(void **)v8;
    v11 = (uint64_t)(*(_QWORD *)(v8 + 8) - *(_QWORD *)v8) >> 1;
    if (a4)
      return sub_20B91D1B0(v9, v10, v11, a3);
    else
      return sub_20B91D5BC(v9, (uint64_t)v10, v11, a3);
  }
  return result;
}

uint64_t sub_20B91833C(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  sub_20B917A40();
  std::mutex::lock(&stru_254729340);
  v2 = *(_QWORD *)(a1 + 40);
  sub_20B924B98((_QWORD *)(v2 + 64));
  sub_20B91C994(v2 + 56);
  *(_BYTE *)(v2 + 144) = 1;
  sub_20B91C6D8(*(_QWORD *)(a1 + 40));
  std::mutex::unlock(&stru_254729340);
  result = sub_20B917D04(a1);
  *(_BYTE *)a1 = 1;
  return result;
}

void sub_20B9183AC(_Unwind_Exception *a1)
{
  std::mutex::unlock(&stru_254729340);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9183C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  int v6;
  _QWORD v8[7];

  v5 = *(_QWORD *)(a1 + 40);
  v8[0] = MEMORY[0x24BDAC760];
  v8[1] = 0x40000000;
  v8[2] = sub_20B91844C;
  v8[3] = &unk_24C46CA48;
  v8[4] = a1;
  v8[5] = a2;
  v8[6] = a4;
  v6 = sub_20B91C5D0(v5, (uint64_t)v8);
  if (v6 == 1)
    return 0;
  if (v6 == 2)
    sub_20B917BEC(a1);
  return 1;
}

void sub_20B91844C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  int8x16_t v3;
  _QWORD v4[5];
  int8x16_t v5;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(uint64_t **)(v1 + 40);
  v4[0] = MEMORY[0x24BDAC760];
  v4[1] = 0x40000000;
  v4[2] = sub_20B9184B8;
  v4[3] = &unk_24C49C968;
  v4[4] = v1;
  v3 = *(int8x16_t *)(a1 + 40);
  v5 = vextq_s8(v3, v3, 8uLL);
  sub_20B91C0A4(v2, v3.i64[0], (uint64_t)v4);
}

void sub_20B9184B8(uint64_t a1, int a2)
{
  sub_20B91AF94(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 40), a2);
}

uint64_t sub_20B9184E0()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(v2 + 40);
  v3 = *(_QWORD *)(v2 + 48);
  v5 = *(_QWORD *)(v4 + 8);
  if (v5 >= *(_QWORD *)(v4 + 16))
  {
    v6 = sub_20B909EF0(*(uint64_t **)(v2 + 40), v3);
  }
  else
  {
    sub_20B88A068(*(uint64_t **)(v4 + 8), v3);
    v6 = v5 + 24;
    *(_QWORD *)(v4 + 8) = v5 + 24;
  }
  *(_QWORD *)(v4 + 8) = v6;
  return sub_20B9182AC(v1, *(_QWORD *)(v2 + 48), v0, 0);
}

void sub_20B918534(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20B91853C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  _QWORD v3[6];
  _QWORD v4[3];
  char v5;

  v4[0] = 0;
  v4[1] = v4;
  v4[2] = 0x2000000000;
  v5 = 0;
  v2 = *(uint64_t **)(a1 + 40);
  v3[0] = MEMORY[0x24BDAC760];
  v3[1] = 0x40000000;
  v3[2] = sub_20B9185D4;
  v3[3] = &unk_24C49C990;
  v3[4] = a2;
  v3[5] = v4;
  sub_20B91BB2C(v2, (uint64_t)v3);
  _Block_object_dispose(v4, 8);
}

void sub_20B9185BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9185D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
    *a5 = 1;
  return result;
}

void sub_20B918630(uint64_t a1, unsigned __int16 *a2, unint64_t a3, unsigned int a4, uint64_t a5)
{
  uint64_t v6;
  _QWORD v7[7];
  _QWORD v8[3];
  char v9;

  v6 = *(_QWORD *)(a1 + 32);
  if (v6)
  {
    v8[0] = 0;
    v8[1] = v8;
    v8[2] = 0x2000000000;
    v9 = 0;
    v7[0] = MEMORY[0x24BDAC760];
    v7[1] = 0x40000000;
    v7[2] = sub_20B9186D4;
    v7[3] = &unk_24C49C9B8;
    v7[5] = v8;
    v7[6] = a1;
    v7[4] = a5;
    sub_20B91D6C4(v6, a2, a3, a4, (uint64_t)v7);
    _Block_object_dispose(v8, 8);
  }
}

void sub_20B9186BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_20B9186D4(_QWORD *a1, int a2, _BYTE *a3)
{
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7[2];
  int v8;

  v5 = a1[6];
  v8 = 0;
  v7[0] = 0;
  v7[1] = 0;
  v6 = (uint64_t *)v7;
  if (sub_20B91B408(*(uint64_t **)(v5 + 40), a2, &v8, &v6))
    (*(void (**)(void))(a1[4] + 16))();
  if (*(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24))
    *a3 = 1;
  sub_20B8896CC((uint64_t)&v6, v7[0]);
}

void sub_20B918778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  sub_20B8896CC((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B918790(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  char v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = (uint64_t *)result[4];
  if (v3)
  {
    v6 = result;
    v9 = 0;
    v7 = operator new(0x20uLL);
    *v7 = &off_24C49CA38;
    v7[1] = v6;
    v7[2] = a3;
    v7[3] = &v9;
    v11 = v7;
    sub_20B91DDB4(v3, a2, (uint64_t)v10);
    result = v11;
    if (v11 == v10)
    {
      v8 = 4;
      result = v10;
    }
    else
    {
      if (!v11)
        return result;
      v8 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
  }
  return result;
}

void sub_20B91885C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B918894(_QWORD *result, uint64_t a2, int a3, uint64_t a4)
{
  _BYTE **v4;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  char v11;
  _BYTE v12[24];
  _BYTE *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v4 = (_BYTE **)result[4];
  if (v4)
  {
    v8 = result;
    v11 = 0;
    v9 = operator new(0x20uLL);
    *v9 = &off_24C49CAB8;
    v9[1] = v8;
    v9[2] = a4;
    v9[3] = &v11;
    v13 = v9;
    sub_20B91DE94(v4, a2, a3, (uint64_t)v12);
    result = v13;
    if (v13 == v12)
    {
      v10 = 4;
      result = v12;
    }
    else
    {
      if (!v13)
        return result;
      v10 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
  }
  return result;
}

void sub_20B918970(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B9189A8(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  char v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = (uint64_t *)result[4];
  if (v3)
  {
    v6 = result;
    v9 = 0;
    v7 = operator new(0x20uLL);
    *v7 = &off_24C49CB38;
    v7[1] = v6;
    v7[2] = a3;
    v7[3] = &v9;
    v11 = v7;
    sub_20B91DF74(v3, a2, (uint64_t)v10);
    result = v11;
    if (v11 == v10)
    {
      v8 = 4;
      result = v10;
    }
    else
    {
      if (!v11)
        return result;
      v8 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
  }
  return result;
}

void sub_20B918A84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B918ABC(_QWORD *result, uint64_t a2, int a3, uint64_t a4, int a5)
{
  _BYTE **v5;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  char v13;
  _BYTE v14[24];
  _BYTE *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v5 = (_BYTE **)result[4];
  if (v5)
  {
    v10 = result;
    v13 = 0;
    v11 = operator new(0x20uLL);
    *v11 = &off_24C49CBB8;
    v11[1] = v10;
    v11[2] = a4;
    v11[3] = &v13;
    v15 = v11;
    sub_20B91E054(v5, a2, a3, (uint64_t)v14, a5);
    result = v15;
    if (v15 == v14)
    {
      v12 = 4;
      result = v14;
    }
    else
    {
      if (!v15)
        return result;
      v12 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
  }
  return result;
}

void sub_20B918BA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B918BD8(uint64_t a1, void *a2, int a3, int a4)
{
  _QWORD *v4;
  unint64_t v5;

  v4 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 32);
  if (a2)
    v5 = (unint64_t)a3 >> 1;
  else
    v5 = 0;
  return sub_20B91D1B0(v4, a2, v5, a4);
}

uint64_t MecabraCreateArrayWithContentOfLegacyPhraseLearningDictionary_0(const __CFURL *a1)
{
  CFMutableArrayRef Mutable;
  uint64_t v2;
  _QWORD v4[5];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  void *v12;
  _QWORD *v13;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v8 = 0;
  if (sub_20B8BCD84(a1, 1))
  {
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
    v6[3] = (uint64_t)Mutable;
    v4[0] = MEMORY[0x24BDAC760];
    v4[1] = 0x40000000;
    v4[2] = sub_20B918CF4;
    v4[3] = &unk_24C49C9E0;
    v4[4] = &v5;
    v9 = MEMORY[0x24BDAC760];
    v10 = 0x40000000;
    v11 = sub_20B908DD0;
    v12 = &unk_24C46CA28;
    v13 = v4;
    sub_20B8BD0D8();
  }
  v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_20B918CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20B918CF4(uint64_t a1, uint64_t a2)
{
  const __CFAllocator *v4;
  CFStringRef v5;
  CFStringRef v6;
  CFStringRef v7;

  v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v5 = CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x24BDBD240], *(const UniChar **)a2, *(_QWORD *)(a2 + 8));
  v6 = CFStringCreateWithCharacters(v4, *(const UniChar **)(a2 + 16), *(_QWORD *)(a2 + 24));
  v7 = CFStringCreateWithFormat(v4, 0, CFSTR("%@,%@"), v5, v6);
  CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), v7);
  CFRelease(v5);
  CFRelease(v6);
  CFRelease(v7);
}

uint64_t MecabraCreateArrayWithContentOfPhraseLearningDictionary_0(const __CFURL *a1)
{
  uint64_t v2;
  __int128 v3;
  char *v4;
  int v5;
  uint64_t v6;
  __int128 v7;
  char *v8;
  int v9;
  char *v10;
  CFMutableArrayRef Mutable;
  uint64_t v12;
  _QWORD v14[5];
  int v15;
  void *__p[2];
  char v17;
  void *v18[2];
  uint64_t v19;
  _DWORD v20[2];
  void *v21[2];
  uint64_t v22;
  _BYTE v23[7];
  int64x2_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  UInt8 buffer[8];
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v26 = 0;
  v27 = &v26;
  v28 = 0x2000000000;
  v29 = 0;
  v24 = 0uLL;
  v25 = 0;
  sub_20B80BBD0(v21, off_2547292C8[0]);
  *(_DWORD *)v23 = 0;
  *(_WORD *)&v23[4] = 1;
  v23[6] = 0;
  v2 = v24.i64[1];
  if (v24.i64[1] >= v25)
  {
    v4 = sub_20B919468(&v24, (__int128 *)v21);
  }
  else
  {
    if (SHIBYTE(v22) < 0)
    {
      sub_20B80ACE0((_BYTE *)v24.i64[1], v21[0], (unint64_t)v21[1]);
    }
    else
    {
      v3 = *(_OWORD *)v21;
      *(_QWORD *)(v24.i64[1] + 16) = v22;
      *(_OWORD *)v2 = v3;
    }
    v5 = *(_DWORD *)v23;
    *(_DWORD *)(v2 + 27) = *(_DWORD *)&v23[3];
    *(_DWORD *)(v2 + 24) = v5;
    v4 = (char *)(v2 + 32);
  }
  v24.i64[1] = (uint64_t)v4;
  sub_20B80BBD0(v18, off_2547292D0);
  memset(v20, 0, 7);
  v6 = v24.i64[1];
  if (v24.i64[1] >= v25)
  {
    v8 = sub_20B919468(&v24, (__int128 *)v18);
  }
  else
  {
    if (SHIBYTE(v19) < 0)
    {
      sub_20B80ACE0((_BYTE *)v24.i64[1], v18[0], (unint64_t)v18[1]);
    }
    else
    {
      v7 = *(_OWORD *)v18;
      *(_QWORD *)(v24.i64[1] + 16) = v19;
      *(_OWORD *)v6 = v7;
    }
    v9 = v20[0];
    *(_DWORD *)(v6 + 27) = *(_DWORD *)((char *)v20 + 3);
    *(_DWORD *)(v6 + 24) = v9;
    v8 = (char *)(v6 + 32);
  }
  v24.i64[1] = (uint64_t)v8;
  if (CFURLGetFileSystemRepresentation(a1, 1u, buffer, 1024))
    v10 = (char *)buffer;
  else
    v10 = (char *)&unk_20BA71DF9;
  sub_20B80BBD0(__p, v10);
  sub_20B91A758((uint64_t)buffer, (__int128 **)&v24, (__int128 *)__p);
  if ((sub_20B91A8F8((uint64_t)buffer, &v15) & 1) != 0)
  {
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
    v27[3] = (uint64_t)Mutable;
    v14[0] = MEMORY[0x24BDAC760];
    v14[1] = 0x40000000;
    v14[2] = sub_20B9190CC;
    v14[3] = &unk_24C49CA08;
    v14[4] = &v26;
    sub_20B91B82C((uint64_t)buffer, (uint64_t)v14);
  }
  v12 = v27[3];
  sub_20B91A890((uint64_t)buffer);
  if (v17 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v19) < 0)
    operator delete(v18[0]);
  if (SHIBYTE(v22) < 0)
    operator delete(v21[0]);
  *(_QWORD *)buffer = &v24;
  sub_20B86F120((void ***)buffer);
  _Block_object_dispose(&v26, 8);
  return v12;
}

void sub_20B91902C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,char *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  if (a27 < 0)
    operator delete(__p);
  if (a34 < 0)
    operator delete(a29);
  a29 = &a36;
  sub_20B86F120((void ***)&a29);
  _Block_object_dispose(&a39, 8);
  _Unwind_Resume(a1);
}

void sub_20B9190CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFStringRef v4;

  v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("%@,%@"), a2, a3);
  CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), v4);
  CFRelease(v4);
}

void sub_20B91912C(uint64_t a1, std::string *__str, __int128 *a3, unint64_t a4)
{
  uint64_t v8;
  std::string *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  std::string *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v8 = a1 + 16;
  v9 = *(std::string **)a1;
  if (a4 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 5)
  {
    sub_20B8825BC((uint64_t *)a1);
    if (a4 >> 59)
      sub_20B80CDD8();
    v10 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
    v11 = v10 >> 4;
    if (v10 >> 4 <= a4)
      v11 = a4;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    sub_20B919270((_QWORD *)a1, v12);
    v13 = sub_20B9192B0(v8, (__int128 *)__str, a3, *(char **)(a1 + 8));
    goto LABEL_11;
  }
  v14 = (uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 5;
  if (v14 < a4)
  {
    v15 = (std::string *)((char *)__str + 32 * v14);
    sub_20B9193F8(__str, v15, v9);
    v13 = sub_20B9192B0(v8, (__int128 *)v15, a3, *(char **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v13;
    return;
  }
  sub_20B9193F8(__str, (std::string *)a3, v9);
  v17 = v16;
  v18 = *(_QWORD *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      if (*(char *)(v18 - 9) < 0)
        operator delete(*(void **)(v18 - 32));
      v18 -= 32;
    }
    while (v18 != v17);
  }
  *(_QWORD *)(a1 + 8) = v17;
}

void sub_20B919260(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20B919268(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_20B919270(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 59)
    sub_20B80CDD8();
  result = (char *)sub_20B8156D4((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

char *sub_20B9192B0(uint64_t a1, __int128 *a2, __int128 *a3, char *__dst)
{
  char *v4;
  __int128 *v6;
  __int128 v7;
  char *v8;
  int v9;
  _QWORD v11[3];
  char v12;
  char *v13;
  char *v14;

  v4 = __dst;
  v13 = __dst;
  v14 = __dst;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  v12 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_20B80ACE0(v4, *(void **)v6, *((_QWORD *)v6 + 1));
        v8 = v14;
      }
      else
      {
        v7 = *v6;
        *((_QWORD *)v4 + 2) = *((_QWORD *)v6 + 2);
        *(_OWORD *)v4 = v7;
        v8 = v4;
      }
      v9 = *((_DWORD *)v6 + 6);
      *(_DWORD *)(v4 + 27) = *(_DWORD *)((char *)v6 + 27);
      *((_DWORD *)v4 + 6) = v9;
      v6 += 2;
      v4 = v8 + 32;
      v14 = v8 + 32;
    }
    while (v6 != a3);
  }
  v12 = 1;
  sub_20B919380((uint64_t)v11);
  return v4;
}

void sub_20B91936C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B919380((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B919380(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20B9193B4(a1);
  return a1;
}

void sub_20B9193B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 9) < 0)
      operator delete(*(void **)(v1 - 32));
    v1 -= 32;
  }
}

std::string *sub_20B9193F8(std::string *__str, std::string *a2, std::string *this)
{
  std::string *v4;
  std::string *v5;
  int v6;

  v4 = __str;
  if (__str == a2)
    return __str;
  v5 = a2;
  do
  {
    std::string::operator=(this, v4);
    v6 = *(_DWORD *)((char *)v4[1].__r_.__value_.__r.__words + 3);
    LODWORD(this[1].__r_.__value_.__l.__data_) = v4[1].__r_.__value_.__l.__data_;
    *(_DWORD *)((char *)this[1].__r_.__value_.__r.__words + 3) = v6;
    this = (std::string *)((char *)this + 32);
    v4 = (std::string *)((char *)v4 + 32);
  }
  while (v4 != v5);
  return v5;
}

char *sub_20B919468(int64x2_t *a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t i64;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  char *v13;
  char *v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  __int128 v18;
  int v19;
  int64x2_t v20;
  char *v21;
  char *v22;
  char *v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;

  v3 = a1->i64[0];
  v4 = (a1->i64[1] - a1->i64[0]) >> 5;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59)
    sub_20B80CDD8();
  i64 = (uint64_t)a1[1].i64;
  v8 = a1[1].i64[0] - v3;
  if (v8 >> 4 > v5)
    v5 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v27 = a1 + 1;
  if (v9)
    v10 = (char *)sub_20B8156D4(i64, v9);
  else
    v10 = 0;
  v11 = &v10[32 * v4];
  v24 = v10;
  v25.i64[0] = (uint64_t)v11;
  v25.i64[1] = (uint64_t)v11;
  v26 = &v10[32 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    sub_20B80ACE0(v11, *(void **)a2, *((_QWORD *)a2 + 1));
    v13 = (char *)v25.i64[1];
    v11 = (char *)v25.i64[0];
  }
  else
  {
    v12 = *a2;
    *((_QWORD *)v11 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v11 = v12;
    v13 = &v10[32 * v4];
  }
  v14 = &v10[32 * v4];
  v15 = *((_DWORD *)a2 + 6);
  *(_DWORD *)(v14 + 27) = *(_DWORD *)((char *)a2 + 27);
  *((_DWORD *)v14 + 6) = v15;
  v16 = a1->i64[0];
  v17 = a1->u64[1];
  if (v17 == a1->i64[0])
  {
    v20 = vdupq_n_s64(v17);
  }
  else
  {
    do
    {
      v18 = *(_OWORD *)(v17 - 32);
      *((_QWORD *)v11 - 2) = *(_QWORD *)(v17 - 16);
      *((_OWORD *)v11 - 2) = v18;
      *(_QWORD *)(v17 - 24) = 0;
      *(_QWORD *)(v17 - 16) = 0;
      *(_QWORD *)(v17 - 32) = 0;
      v19 = *(_DWORD *)(v17 - 8);
      *(_DWORD *)(v11 - 5) = *(_DWORD *)(v17 - 5);
      *((_DWORD *)v11 - 2) = v19;
      v11 -= 32;
      v17 -= 32;
    }
    while (v17 != v16);
    v20 = *a1;
  }
  v21 = v13 + 32;
  a1->i64[0] = (uint64_t)v11;
  a1->i64[1] = (uint64_t)(v13 + 32);
  v25 = v20;
  v22 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v26;
  v26 = v22;
  v24 = (char *)v20.i64[0];
  sub_20B9195DC((uint64_t)&v24);
  return v21;
}

void sub_20B9195C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B9195DC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9195DC(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;

  v3 = *(void ***)(a1 + 8);
  v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 4;
      *(_QWORD *)(a1 + 16) = v2 - 4;
      if (*((char *)v2 - 9) < 0)
      {
        operator delete(*v4);
        v4 = *(void ***)(a1 + 16);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20B91963C(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_20B91CB68(result);
    JUMPOUT(0x20BD39CB0);
  }
  return result;
}

void sub_20B91967C()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B919690(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24C49CA38;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_20B9196D0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C49CA38;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20B9196F8(uint64_t a1, int *a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, _BYTE *a7)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  _QWORD *v16[2];
  int v17;

  v10 = *a2;
  v11 = *a4;
  v12 = *a5;
  v13 = *a6;
  v14 = *(_QWORD *)(a1 + 8);
  v17 = 0;
  v16[0] = 0;
  v16[1] = 0;
  v15 = (uint64_t *)v16;
  if (sub_20B91B408(*(uint64_t **)(v14 + 40), v10, &v17, &v15))
    sub_20B919814(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24), a3, (uint64_t)&v15, v17, v11, v12, v13);
  if (**(_BYTE **)(a1 + 24))
    *a7 = 1;
  sub_20B8896CC((uint64_t)&v15, v16[0]);
}

void sub_20B9197B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  sub_20B8896CC((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9197CC(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C49CA98))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B919808()
{
  return &unk_24C49CA98;
}

uint64_t sub_20B919814(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  v11 = a4;
  v9 = a6;
  v10 = a5;
  v8 = a7;
  if (!a1)
    sub_20B80BB74();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *, uint64_t *, uint64_t *, uint64_t *))(*(_QWORD *)a1 + 48))(a1, a2, a3, &v11, &v10, &v9, &v8);
}

void sub_20B919860()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B919874(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24C49CAB8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_20B9198B4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C49CAB8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20B9198DC(_QWORD *a1, int *a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, _BYTE *a9)
{
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19[2];
  int v20;

  v11 = *a2;
  v12 = *a4;
  v13 = *a5;
  v14 = *a6;
  v15 = *a7;
  v16 = *a8;
  v17 = a1[1];
  v20 = 0;
  v19[0] = 0;
  v19[1] = 0;
  v18 = (uint64_t *)v19;
  if (sub_20B91B408(*(uint64_t **)(v17 + 40), v11, &v20, &v18))
    sub_20B919A10(*(_QWORD *)(a1[2] + 24), a3, (uint64_t)&v18, v20, v12, v13, v14, v15, v16, a1[3]);
  if (*(_BYTE *)a1[3])
    *a9 = 1;
  sub_20B8896CC((uint64_t)&v18, v19[0]);
}

void sub_20B9199B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, _QWORD *a12)
{
  sub_20B8896CC((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9199C8(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C49CB18))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B919A04()
{
  return &unk_24C49CB18;
}

uint64_t sub_20B919A10(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  v15 = a4;
  v13 = a6;
  v14 = a5;
  v11 = a8;
  v12 = a7;
  if (!a1)
    sub_20B80BB74();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)a1 + 48))(a1, a2, a3, &v15, &v14, &v13, &v12, &v11, &a9, a10);
}

void sub_20B919A6C()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B919A80(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24C49CB38;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_20B919AC0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C49CB38;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20B919AE8(uint64_t a1, int *a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, _BYTE *a7)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  _QWORD *v16[2];
  int v17;

  v10 = *a2;
  v11 = *a4;
  v12 = *a5;
  v13 = *a6;
  v14 = *(_QWORD *)(a1 + 8);
  v17 = 0;
  v16[0] = 0;
  v16[1] = 0;
  v15 = (uint64_t *)v16;
  if (sub_20B91B408(*(uint64_t **)(v14 + 40), v10, &v17, &v15))
    sub_20B919814(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24), a3, (uint64_t)&v15, v17, v11, v12, v13);
  if (**(_BYTE **)(a1 + 24))
    *a7 = 1;
  sub_20B8896CC((uint64_t)&v15, v16[0]);
}

void sub_20B919BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  sub_20B8896CC((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20B919BBC(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C49CB98))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B919BF8()
{
  return &unk_24C49CB98;
}

void sub_20B919C08()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B919C1C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24C49CBB8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_20B919C5C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C49CBB8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20B919C84(_QWORD *a1, int *a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, _BYTE *a9)
{
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19[2];
  int v20;

  v11 = *a2;
  v12 = *a4;
  v13 = *a5;
  v14 = *a6;
  v15 = *a7;
  v16 = *a8;
  v17 = a1[1];
  v20 = 0;
  v19[0] = 0;
  v19[1] = 0;
  v18 = (uint64_t *)v19;
  if (sub_20B91B408(*(uint64_t **)(v17 + 40), v11, &v20, &v18))
    sub_20B919A10(*(_QWORD *)(a1[2] + 24), a3, (uint64_t)&v18, v20, v12, v13, v14, v15, v16, a1[3]);
  if (*(_BYTE *)a1[3])
    *a9 = 1;
  sub_20B8896CC((uint64_t)&v18, v19[0]);
}

void sub_20B919D58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, _QWORD *a12)
{
  sub_20B8896CC((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

uint64_t sub_20B919D70(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C49CC18))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B919DAC()
{
  return &unk_24C49CC18;
}

uint64_t sub_20B919DB8(uint64_t a1, int a2, const void *a3)
{
  *(_DWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = sub_20B911E28(a2, a3);
  *(_QWORD *)(a1 + 16) = 0;
  sub_20B919E2C(a1);
  return a1;
}

void sub_20B919E08(_Unwind_Exception *a1)
{
  const void ***v1;
  const void ***v2;

  sub_20B8CE49C(v2, 0);
  sub_20B8CE520(v1, 0);
  _Unwind_Resume(a1);
}

const void ***sub_20B919E2C(uint64_t a1)
{
  const void ***result;
  uint64_t v3;
  uint64_t v4;
  const void **v5;

  result = *(const void ****)(a1 + 8);
  if (result)
  {
    result = (const void ***)sub_20B911EF0(result);
    if ((_DWORD)result)
    {
      v3 = sub_20B91207C(*(uint64_t **)(a1 + 8));
      v4 = operator new();
      *(_QWORD *)v4 = v3;
      *(_DWORD *)(v4 + 8) = 0;
      v5 = 0;
      sub_20B8CE49C((const void ***)(a1 + 16), (const void **)v4);
      return sub_20B8CE49C(&v5, 0);
    }
  }
  return result;
}

void sub_20B919EA8(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _BOOL4 v5;
  _QWORD *v6;
  uint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD **)(a1 + 8);
  if (v3)
  {
    v5 = sub_20B911EF0(v3);
    if (a2)
    {
      if (v5)
      {
        __p = 0;
        v9 = 0;
        v10 = 0;
        v11[0] = &off_24C469E20;
        v11[1] = &__p;
        v12 = v11;
        sub_20B96B624(a2, (uint64_t)v11);
        v6 = v12;
        if (v12 == v11)
        {
          v7 = 4;
          v6 = v11;
        }
        else
        {
          if (!v12)
            goto LABEL_9;
          v7 = 5;
        }
        (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_9:
        sub_20B911F90(*(uint64_t **)(a1 + 8), (uint64_t *)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
    }
  }
}

void sub_20B919F8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B919FDC(uint64_t a1, const __CFArray *a2)
{
  _QWORD *v3;
  _BOOL4 v5;
  CFIndex Count;
  CFIndex i;
  _QWORD *ValueAtIndex;
  void *__p[3];

  v3 = *(_QWORD **)(a1 + 8);
  if (v3)
  {
    v5 = sub_20B911EF0(v3);
    if (a2)
    {
      if (v5)
      {
        memset(__p, 0, sizeof(__p));
        Count = CFArrayGetCount(a2);
        if (Count >= 1)
        {
          for (i = 0; i != Count; ++i)
          {
            ValueAtIndex = CFArrayGetValueAtIndex(a2, i);
            sub_20B91A098((double **)__p, ValueAtIndex[3]);
          }
        }
        sub_20B911F90(*(uint64_t **)(a1 + 8), (uint64_t *)__p);
        if (__p[0])
          operator delete(__p[0]);
      }
    }
  }
}

void sub_20B91A07C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B91A098(double **a1, uint64_t a2)
{
  float v3;
  float v4;
  double v5;
  double v6;
  float v7;
  float v8;
  double v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  unint64_t v14;
  double *v15;
  double *v16;
  double *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  double *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  v3 = *(float *)(a2 + 4);
  v4 = *(float *)(a2 + 8);
  v5 = v3;
  v6 = v4;
  v7 = *(float *)(a2 + 12);
  v8 = *(float *)(a2 + 16);
  v9 = v7;
  v10 = v8;
  v11 = (float)(v3 + (float)(v7 * 0.5));
  v12 = (float)(v4 + (float)(v8 * 0.5));
  v13 = *(_QWORD *)(a2 + 24);
  v15 = a1[1];
  v14 = (unint64_t)a1[2];
  if ((unint64_t)v15 >= v14)
  {
    v17 = *a1;
    v18 = 0x6DB6DB6DB6DB6DB7 * (v15 - *a1);
    v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) > 0x492492492492492)
      sub_20B80CDD8();
    v20 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v14 - (_QWORD)v17) >> 3);
    if (2 * v20 > v19)
      v19 = 2 * v20;
    if (v20 >= 0x249249249249249)
      v21 = 0x492492492492492;
    else
      v21 = v19;
    if (v21)
    {
      if (v21 > 0x492492492492492)
        sub_20B800BC0();
      v22 = (char *)operator new(56 * v21);
    }
    else
    {
      v22 = 0;
    }
    v23 = (double *)&v22[56 * v18];
    *v23 = v11;
    v23[1] = v12;
    v23[2] = v5;
    v23[3] = v6;
    v23[4] = v9;
    v23[5] = v10;
    *((_QWORD *)v23 + 6) = v13;
    v16 = v23 + 7;
    if (v15 != v17)
    {
      do
      {
        v24 = *(_OWORD *)(v15 - 7);
        v25 = *(_OWORD *)(v15 - 5);
        v26 = *(_OWORD *)(v15 - 3);
        *(v23 - 1) = *(v15 - 1);
        *(_OWORD *)(v23 - 3) = v26;
        *(_OWORD *)(v23 - 5) = v25;
        *(_OWORD *)(v23 - 7) = v24;
        v23 -= 7;
        v15 -= 7;
      }
      while (v15 != v17);
      v15 = *a1;
    }
    *a1 = v23;
    a1[1] = v16;
    a1[2] = (double *)&v22[56 * v21];
    if (v15)
      operator delete(v15);
  }
  else
  {
    *v15 = v11;
    v15[1] = v12;
    v15[2] = v5;
    v15[3] = v6;
    v15[4] = v9;
    v15[5] = v10;
    v16 = v15 + 7;
    *((_QWORD *)v15 + 6) = v13;
  }
  a1[1] = v16;
}

uint64_t sub_20B91A244(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v5;
  uint64_t v6;

  result = *(_QWORD *)(a1 + 8);
  if (result)
  {
    result = sub_20B911EF0((_QWORD *)result);
    if ((_DWORD)result)
    {
      result = *(_QWORD *)(a1 + 16);
      if (result)
      {
        v5 = *(_DWORD *)(a2 + 64) - 1;
        if (v5 > 2)
          v6 = 1;
        else
          v6 = qword_20BA49488[v5];
        return sub_20B9118A8((uint64_t *)result, v6, *(double *)(a2 + 32), *(double *)(a2 + 40), *(double *)(a2 + 48), *(double *)(a2 + 56));
      }
    }
  }
  return result;
}

uint64_t sub_20B91A2B4(uint64_t a1, const __CFArray *a2)
{
  uint64_t result;
  CFIndex Count;
  CFIndex v6;
  CFIndex v7;
  const void *v8;
  void *v9;

  result = *(_QWORD *)(a1 + 8);
  if (result)
  {
    result = sub_20B911EF0((_QWORD *)result);
    if ((_DWORD)result)
    {
      result = 0;
      if (a2)
      {
        if (*(_QWORD *)(a1 + 16))
        {
          Count = CFArrayGetCount(a2);
          if (Count < 1)
          {
            return 1;
          }
          else
          {
            v6 = Count;
            v7 = 0;
            while (1)
            {
              v8 = (const void *)*((_QWORD *)CFArrayGetValueAtIndex(a2, v7) + 3);
              if (!v8)
                break;
              v9 = __dynamic_cast(v8, (const struct __class_type_info *)&unk_24C45BCA0, (const struct __class_type_info *)&unk_24C45BD60, 0);
              if (!v9)
                break;
              sub_20B91A244(a1, (uint64_t)v9);
              if (v6 == ++v7)
                return 1;
            }
            sub_20B8CE49C((const void ***)(a1 + 16), 0);
            return 0;
          }
        }
      }
    }
  }
  return result;
}

void sub_20B91A390(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  _QWORD v3[6];
  _QWORD v4[3];
  char v5;

  v2 = *(uint64_t **)(a1 + 16);
  if (v2)
  {
    v4[0] = 0;
    v4[1] = v4;
    v4[2] = 0x2000000000;
    v5 = 0;
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 0x40000000;
    v3[2] = sub_20B91A42C;
    v3[3] = &unk_24C46C318;
    v3[4] = a2;
    v3[5] = v4;
    sub_20B9119B0(v2, (uint64_t)v3);
    _Block_object_dispose(v4, 8);
  }
}

void sub_20B91A414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_20B91A42C(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v8 = a2;
  v5 = *(_QWORD *)(a1 + 32);
  v6 = sub_20B9121EC(&v8);
  sub_20B912134(&v8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v5, v6, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
    *a3 = 1;
  return result;
}

void sub_20B91A4B0()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B91A4C4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C469E20;
  result[1] = v3;
  return result;
}

uint64_t sub_20B91A4F8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C469E20;
  a2[1] = v2;
  return result;
}

void sub_20B91A514(uint64_t a1, uint64_t a2)
{
  sub_20B91A098(*(double ***)(a1 + 8), a2);
}

uint64_t sub_20B91A51C(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45ED60))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B91A558()
{
  return &unk_24C45ED60;
}

uint64_t sub_20B91A564(int a1, __CFDictionary *a2, void *lpsrc)
{
  uint64_t result;
  uint64_t *v5;
  const __CFString *v6;

  if (!lpsrc)
    return 0;
  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
  if (result)
  {
    v5 = (uint64_t *)result;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
    if (result)
    {
      result = (*(uint64_t (**)(uint64_t *))(*v5 + 56))(v5);
      if (result || (result = (*(uint64_t (**)(uint64_t *))(*v5 + 216))(v5), (_DWORD)result))
      {
        sub_20B91A618(result, a2, v5[1]);
        v6 = (const __CFString *)(*(uint64_t (**)(uint64_t *))(*v5 + 24))(v5);
        sub_20B91A6B8((int)v6, a2, v6);
        return 1;
      }
    }
  }
  return result;
}

void sub_20B91A618(int a1, CFMutableDictionaryRef theDict, uint64_t a3)
{
  const void *v5;

  v5 = (const void *)*MEMORY[0x24BDBD270];
  CFDictionaryAddValue(theDict, CFSTR("conversionCandidateAccepted"), (const void *)*MEMORY[0x24BDBD270]);
  if ((unint64_t)a3 >= 4)
  {
    if (a3 >= 10)
      return;
  }
  else
  {
    CFDictionaryAddValue(theDict, *off_24C49CC28[a3], v5);
  }
  CFDictionaryAddValue(theDict, CFSTR("top10ConversionCandidateAccepted"), v5);
}

void sub_20B91A6B8(int a1, __CFDictionary *a2, CFStringRef theString)
{
  CFNumberRef v4;
  int valuePtr;

  valuePtr = CFStringGetLength(theString);
  v4 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  CFDictionaryAddValue(a2, CFSTR("acceptedCandidateLength"), v4);
  if (v4)
    CFRelease(v4);
}

void sub_20B91A728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  sub_20B88AE28(&a9, 0);
  _Unwind_Resume(a1);
}

void sub_20B91A744()
{
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B91A758(uint64_t a1, __int128 **a2, __int128 *a3)
{
  __int128 v6;
  uint64_t v7;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  sub_20B91C728((char *)a1, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 5);
  if (*((char *)a3 + 23) < 0)
  {
    sub_20B80ACE0((_BYTE *)(a1 + 24), *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v6 = *a3;
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 24) = v6;
  }
  v7 = operator new();
  sub_20B9228B4(v7, (uint64_t)a2, "Words", "Words_tmp");
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = a1 + 72;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = a1;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 144) = 1;
  *(_QWORD *)(a1 + 152) = 0;
  return a1;
}

void sub_20B91A840(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B86F120((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B91A890(uint64_t a1)
{
  const void *v2;
  void **v4;

  v2 = *(const void **)(a1 + 152);
  if (v2)
    _Block_release(v2);
  sub_20B91C7E8(a1 + 56);
  sub_20B91C7AC((uint64_t *)(a1 + 48), 0);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  v4 = (void **)a1;
  sub_20B86F120(&v4);
  return a1;
}

uint64_t sub_20B91A8F8(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v6;

  v4 = *(_QWORD *)(a1 + 56);
  v3 = a1 + 56;
  if (!v4)
  {
    *a2 = 0;
    v6 = (char *)(a1 + 24);
    if (*(char *)(a1 + 47) < 0)
      v6 = *(char **)v6;
    sub_20B91A958(v3, v6);
    *a2 = sub_20B91AA38(a1);
  }
  return 1;
}

void sub_20B91A948(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x20B91A93CLL);
}

uint64_t sub_20B91A958(uint64_t result, char *a2)
{
  sqlite3 **v3;
  _DWORD *exception;
  int v5;
  stat v6;

  if (!*(_QWORD *)result)
  {
    v3 = (sqlite3 **)result;
    sub_20B8A741C((std::string *)(result + 64), a2);
    LODWORD(result) = sqlite3_open_v2(":memory:", v3, 3145730, 0);
    if ((_DWORD)result)
      goto LABEL_4;
    if (stat(a2, &v6))
      return sub_20B91C8EC((uint64_t)v3);
    result = sub_20B91C83C((uint64_t)v3, 0);
    if ((_DWORD)result)
    {
LABEL_4:
      if ((_DWORD)result == 11 || (_DWORD)result == 26)
      {
        result = sub_20B91C994((uint64_t)v3);
        if ((result & 1) != 0)
          return result;
        exception = __cxa_allocate_exception(4uLL);
        v5 = 1;
      }
      else
      {
        exception = __cxa_allocate_exception(4uLL);
        v5 = 2;
      }
      *exception = v5;
      __cxa_throw(exception, (struct type_info *)&unk_24C45B9C8, 0);
    }
  }
  return result;
}

uint64_t sub_20B91AA38(uint64_t a1)
{
  void **v2;
  uint64_t *v3;
  uint64_t v4;
  void *__p[2];
  char v7;

  sub_20B923628((uint64_t)__p);
  if (v7 >= 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  v3 = sub_20B91B048((uint64_t *)(a1 + 56), (const char *)v2);
  if (sub_20B924A2C((uint64_t)v3) == 100)
  {
    v4 = sqlite3_column_int((sqlite3_stmt *)v3[1], 0);
  }
  else
  {
    v4 = 0;
    if (!v3)
      goto LABEL_8;
  }
  sub_20B9249E4(v3);
  MEMORY[0x20BD39CB0](v3, 0x20C40960023A9);
LABEL_8:
  if (v7 < 0)
    operator delete(__p[0]);
  return v4;
}

void sub_20B91AAEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B91AB1C(uint64_t a1)
{
  uint64_t v2;
  sqlite3 **v3;

  v2 = *(_QWORD *)(a1 + 152);
  if (v2)
    (*(void (**)(void))(v2 + 16))();
  v3 = (sqlite3 **)(a1 + 56);
  sub_20B91AB68(v3, "DROP TABLE Assist");
  return sub_20B91AB68(v3, "DROP TABLE Words");
}

uint64_t sub_20B91AB68(sqlite3 **a1, const char *a2)
{
  uint64_t result;
  _DWORD *exception;

  result = sqlite3_exec(*a1, a2, 0, 0, 0);
  if ((_DWORD)result == 26 || (_DWORD)result == 11)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1;
    __cxa_throw(exception, (struct type_info *)&unk_24C45B9C8, 0);
  }
  return result;
}

BOOL sub_20B91ABB8(uint64_t a1, sqlite3 **a2)
{
  std::string *p_p;
  std::string *v4;
  _BOOL8 v5;
  std::string *v7;
  std::string v8;
  std::string __p;

  sub_20B923268(*(uint64_t **)(a1 + 48), "Words", &__p);
  sub_20B91AB68(a2, "PRAGMA journal_mode = WAL;");
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (sub_20B91AB68(a2, (const char *)p_p))
    goto LABEL_11;
  sub_20B923480((uint64_t)&v8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = v8;
  v4 = (v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
     ? &__p
     : (std::string *)v8.__r_.__value_.__r.__words[0];
  if (sub_20B91AB68(a2, (const char *)v4))
  {
LABEL_11:
    v5 = 0;
  }
  else
  {
    sub_20B923554((uint64_t)&v8);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = v8;
    if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v7 = &__p;
    else
      v7 = (std::string *)v8.__r_.__value_.__r.__words[0];
    v5 = sub_20B91AB68(a2, (const char *)v7) == 0;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v5;
}

void sub_20B91ACDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B91AD00(uint64_t a1)
{
  uint64_t v1;

  v1 = sub_20B91AD48(a1, 10);
  if (sub_20B924A2C(v1) == 100)
    return sqlite3_column_int(*(sqlite3_stmt **)(v1 + 8), 0);
  else
    return 0;
}

uint64_t sub_20B91AD48(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  void **v10;
  void *__p[2];
  char v13;

  v3 = *(_QWORD *)(a1 + 96);
  if (!v3)
    goto LABEL_13;
  v4 = a1 + 96;
  do
  {
    v5 = *(_DWORD *)(v3 + 32);
    v6 = v5 < a2;
    if (v5 >= a2)
      v7 = (uint64_t *)v3;
    else
      v7 = (uint64_t *)(v3 + 8);
    if (!v6)
      v4 = v3;
    v3 = *v7;
  }
  while (*v7);
  if (v4 != a1 + 96 && *(_DWORD *)(v4 + 32) <= a2 && (v8 = *(_QWORD *)(v4 + 40)) != 0)
  {
    sqlite3_reset(*(sqlite3_stmt **)(v8 + 8));
    sqlite3_clear_bindings(*(sqlite3_stmt **)(v8 + 8));
  }
  else
  {
LABEL_13:
    v9 = (uint64_t *)(a1 + 56);
    sub_20B9229D4(*(uint64_t **)(a1 + 48), a2, (uint64_t)__p);
    if (v13 >= 0)
      v10 = __p;
    else
      v10 = (void **)__p[0];
    v8 = sub_20B91C4F8(v9, a2, (const char *)v10);
    if (v13 < 0)
      operator delete(__p[0]);
  }
  return v8;
}

void sub_20B91AE1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B91AE38(uint64_t a1, int a2, int a3)
{
  uint64_t v6;

  v6 = sub_20B91AD48(a1, 5);
  sqlite3_bind_int(*(sqlite3_stmt **)(v6 + 8), 1, a3);
  sqlite3_bind_int(*(sqlite3_stmt **)(v6 + 8), 2, a2);
  *(_BYTE *)(a1 + 144) = 1;
  return sub_20B924A2C(v6);
}

sqlite3_int64 sub_20B91AEA4(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  void *v9;
  int v10;
  uint64_t v11;
  int v12;

  v6 = sub_20B91AD48(a1, 2);
  sqlite3_bind_int(*(sqlite3_stmt **)(v6 + 8), 1, a3);
  v7 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 != *(_QWORD *)(a1 + 8))
  {
    v8 = 2;
    do
    {
      v9 = sub_20B871B2C(a2, (void **)v7)[7];
      v10 = *(_DWORD *)(v7 + 24);
      if (v10 == 1)
      {
        v12 = (*(uint64_t (**)(void *))(*(_QWORD *)v9 + 24))(v9);
        sqlite3_bind_int(*(sqlite3_stmt **)(v6 + 8), v8, v12);
      }
      else if (!v10)
      {
        v11 = (*(uint64_t (**)(void *))(*(_QWORD *)v9 + 16))(v9);
        sub_20B924A70(v6, v8, *(const void **)v11, (uint64_t)(*(_QWORD *)(v11 + 8) - *(_QWORD *)v11) >> 1, *(unsigned __int8 *)(v7 + 30));
      }
      ++v8;
      v7 += 32;
    }
    while (v7 != *(_QWORD *)(a1 + 8));
  }
  sub_20B924A2C(v6);
  *(_BYTE *)(a1 + 144) = 1;
  return sqlite3_last_insert_rowid(*(sqlite3 **)(a1 + 56));
}

void sub_20B91AF94(uint64_t a1, int a2)
{
  const char *v4;
  const char *v5;
  uint64_t *v6;

  v4 = (const char *)sub_20B923018();
  if (v4[23] >= 0)
    v5 = v4;
  else
    v5 = *(const char **)v4;
  v6 = sub_20B91B048((uint64_t *)(a1 + 56), v5);
  sqlite3_bind_int((sqlite3_stmt *)v6[1], 1, a2);
  sub_20B924A2C((uint64_t)v6);
  *(_BYTE *)(a1 + 144) = 1;
  sub_20B9249E4(v6);
  JUMPOUT(0x20BD39CB0);
}

void sub_20B91B030(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B91C9D4((uint64_t **)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B91B048(uint64_t *a1, const char *a2)
{
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)operator new();
  v5 = *a1;
  *v4 = 0;
  v4[1] = 0;
  v4[2] = v5;
  sub_20B924910((uint64_t)v4, a2);
  return v4;
}

void sub_20B91B0A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x20C40960023A9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B91B0C8(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = sub_20B91AD48(a1, 6);
  sqlite3_bind_int(*(sqlite3_stmt **)(v4 + 8), 1, a2);
  result = sub_20B924A2C(v4);
  *(_BYTE *)(a1 + 144) = 1;
  return result;
}

void sub_20B91B11C(uint64_t a1, int a2)
{
  const char *v4;
  const char *v5;
  uint64_t *v6;
  int v7;
  int v8;
  int v9;
  void **v10;
  __int128 v11;
  void **v12;
  uint64_t *v13;
  int v14;
  int v15;
  uint64_t v16;
  void *__p[2];
  void *v18;
  uint64_t *v19;

  v4 = (const char *)sub_20B9230B0();
  if (v4[23] >= 0)
    v5 = v4;
  else
    v5 = *(const char **)v4;
  v6 = sub_20B91B048((uint64_t *)(a1 + 56), v5);
  v7 = 0;
  v19 = v6;
  v8 = a2;
  while (sub_20B924A2C((uint64_t)v6) == 100)
  {
    v9 = sqlite3_column_int((sqlite3_stmt *)v6[1], 0);
    if (v7 >= a2)
      sub_20B91AF94(a1, v9);
    sub_20B91AE38(a1, v9, v8--);
    ++v7;
  }
  v10 = (void **)sub_20B923148();
  if (*((char *)v10 + 23) < 0)
  {
    sub_20B80ACE0(__p, *v10, (unint64_t)v10[1]);
  }
  else
  {
    v11 = *(_OWORD *)v10;
    v18 = v10[2];
    *(_OWORD *)__p = v11;
  }
  if (SHIBYTE(v18) >= 0)
    v12 = __p;
  else
    v12 = (void **)__p[0];
  v13 = sub_20B91B048((uint64_t *)(a1 + 56), (const char *)v12);
  v14 = 1;
  while (sub_20B924A2C((uint64_t)v13) == 100)
  {
    v15 = sqlite3_column_int((sqlite3_stmt *)v13[1], 0);
    v16 = sub_20B91AD48(a1, 8);
    sqlite3_bind_int(*(sqlite3_stmt **)(v16 + 8), 1, v14);
    sqlite3_bind_int(*(sqlite3_stmt **)(v16 + 8), 2, v15);
    sub_20B924A2C(v16);
    *(_BYTE *)(a1 + 144) = 1;
    ++v14;
  }
  *(_BYTE *)(a1 + 144) = 1;
  if (v13)
  {
    sub_20B9249E4(v13);
    MEMORY[0x20BD39CB0](v13, 0x20C40960023A9);
  }
  if (SHIBYTE(v18) < 0)
  {
    operator delete(__p[0]);
    if (!v6)
      return;
    goto LABEL_24;
  }
  if (v6)
  {
LABEL_24:
    sub_20B9249E4(v6);
    MEMORY[0x20BD39CB0](v6, 0x20C40960023A9);
  }
}

void sub_20B91B30C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t *a17)
{
  if (a16 < 0)
    operator delete(__p);
  sub_20B91C9D4(&a17, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20B91B358(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = sub_20B91AD48(a1, 9);
  sqlite3_bind_int(*(sqlite3_stmt **)(v4 + 8), 1, a2);
  result = sub_20B924A2C(v4);
  *(_BYTE *)(a1 + 144) = 1;
  return result;
}

uint64_t sub_20B91B3AC(uint64_t a1, double a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = sub_20B91AD48(a1, 7);
  sqlite3_bind_double(*(sqlite3_stmt **)(v4 + 8), 1, a2);
  result = sub_20B924A2C(v4);
  *(_BYTE *)(a1 + 144) = 1;
  return result;
}

uint64_t sub_20B91B408(uint64_t *a1, int a2, int *a3, uint64_t **a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  int v13;
  std::__shared_weak_count_vtbl *v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  const void *v22;
  int v23;
  std::__shared_weak_count_vtbl *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  void *__p[2];
  char v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count_vtbl *v38;
  std::__shared_weak_count *v39;
  void *v40;
  std::__shared_weak_count *v41;
  uint64_t v42;

  result = sub_20B91AD48((uint64_t)a1, 4);
  if (result)
  {
    v9 = result;
    sqlite3_bind_int(*(sqlite3_stmt **)(result + 8), 1, a2);
    if (sub_20B924A2C(v9) == 100)
    {
      *a3 = sqlite3_column_int(*(sqlite3_stmt **)(v9 + 8), 0);
      v10 = *a1;
      if (a1[1] != *a1)
      {
        v11 = 0;
        do
        {
          v12 = *(_DWORD *)(v10 + 32 * v11 + 24);
          if (v12)
          {
            if (v12 == 1)
            {
              v13 = sqlite3_column_int(*(sqlite3_stmt **)(v9 + 8), v11 + 1);
              v14 = (std::__shared_weak_count_vtbl *)operator new();
              v14->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&unk_24C45FBF0;
              LODWORD(v14->~__shared_weak_count_0) = v13;
              v40 = v14;
              v15 = (std::__shared_weak_count *)operator new();
              v15->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C46BBE8;
              v15->__shared_owners_ = 0;
              v15->__shared_weak_owners_ = 0;
              v15[1].__vftable = v14;
              v41 = v15;
              sub_20B909DE8(__p, (__int128 *)(*a1 + 32 * v11), &v40);
              sub_20B90B7C4(a4, __p, (uint64_t)__p);
              v16 = v37;
              if (v37)
              {
                p_shared_owners = (unint64_t *)&v37->__shared_owners_;
                do
                  v18 = __ldaxr(p_shared_owners);
                while (__stlxr(v18 - 1, p_shared_owners));
                if (!v18)
                {
                  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
                  std::__shared_weak_count::__release_weak(v16);
                }
              }
              if (v36 < 0)
                operator delete(__p[0]);
              v19 = v41;
              if (v41)
              {
                v20 = (unint64_t *)&v41->__shared_owners_;
                do
                  v21 = __ldaxr(v20);
                while (__stlxr(v21 - 1, v20));
                if (!v21)
                {
                  ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
                  std::__shared_weak_count::__release_weak(v19);
                }
              }
              ++v11;
            }
            else
            {
              ++v11;
            }
          }
          else
          {
            v22 = sqlite3_column_blob(*(sqlite3_stmt **)(v9 + 8), (int)v11 + 1);
            v23 = sqlite3_column_bytes(*(sqlite3_stmt **)(v9 + 8), v11 + 1);
            v40 = 0;
            v41 = 0;
            v42 = 0;
            sub_20B87ACC8(&v40, v22, (uint64_t)v22 + (v23 & 0xFFFFFFFFFFFFFFFELL), (uint64_t)v23 >> 1);
            v24 = (std::__shared_weak_count_vtbl *)operator new();
            v25 = v40;
            v26 = (uint64_t)v41;
            v27 = ((char *)v41 - (_BYTE *)v40) >> 1;
            v24->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&unk_24C45FAC8;
            v24->__on_zero_shared = 0;
            v24->__get_deleter = 0;
            v24->~__shared_weak_count_0 = 0;
            sub_20B909D70(&v24->~__shared_weak_count_0, v25, v26, v27);
            v38 = v24;
            v28 = (std::__shared_weak_count *)operator new();
            v28->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C46BBB0;
            v28->__shared_owners_ = 0;
            v28->__shared_weak_owners_ = 0;
            v28[1].__vftable = v24;
            v39 = v28;
            sub_20B909DE8(__p, (__int128 *)(*a1 + 32 * v11), &v38);
            sub_20B90B7C4(a4, __p, (uint64_t)__p);
            v29 = v37;
            if (v37)
            {
              v30 = (unint64_t *)&v37->__shared_owners_;
              do
                v31 = __ldaxr(v30);
              while (__stlxr(v31 - 1, v30));
              if (!v31)
              {
                ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
                std::__shared_weak_count::__release_weak(v29);
              }
            }
            if (v36 < 0)
              operator delete(__p[0]);
            v32 = v39;
            if (v39)
            {
              v33 = (unint64_t *)&v39->__shared_owners_;
              do
                v34 = __ldaxr(v33);
              while (__stlxr(v34 - 1, v33));
              if (!v34)
              {
                ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
                std::__shared_weak_count::__release_weak(v32);
              }
            }
            if (v40)
            {
              v41 = (std::__shared_weak_count *)v40;
              operator delete(v40);
            }
            ++v11;
          }
          v10 = *a1;
        }
        while (v11 < (a1[1] - *a1) >> 5);
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_20B91B780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19)
{
  sub_20B908B78((uint64_t)&a11);
  sub_20B811FE4((uint64_t)&a16);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_20B91B82C(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  uint64_t *v5;
  const __CFAllocator *v6;
  CFStringRef v7;
  CFStringRef v8;
  int v9;
  UniChar *chars;
  __int128 v11;
  void *__p;
  __int128 v13;
  uint64_t *v14;
  std::string v15;

  sub_20B9236FC(&v15);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4 = &v15;
  else
    v4 = (std::string *)v15.__r_.__value_.__r.__words[0];
  v5 = sub_20B91B048((uint64_t *)(a1 + 56), (const char *)v4);
  v14 = v5;
  if (sub_20B924A2C((uint64_t)v5) == 100)
  {
    v6 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    do
    {
      sub_20B924AB0((uint64_t)v5, 0, &__p);
      v7 = CFStringCreateWithCharacters(v6, (const UniChar *)__p, (uint64_t)(v13 - (_QWORD)__p) >> 1);
      sub_20B924AB0((uint64_t)v5, 1, (void **)&chars);
      if (__p)
      {
        *(_QWORD *)&v13 = __p;
        operator delete(__p);
      }
      __p = chars;
      v13 = v11;
      v8 = CFStringCreateWithCharacters(v6, chars, (uint64_t)(v11 - (_QWORD)chars) >> 1);
      (*(void (**)(uint64_t, CFStringRef, CFStringRef))(a2 + 16))(a2, v7, v8);
      CFRelease(v7);
      CFRelease(v8);
      v9 = sub_20B924A2C((uint64_t)v5);
      if (__p)
      {
        *(_QWORD *)&v13 = __p;
        operator delete(__p);
      }
    }
    while (v9 == 100);
  }
  if (v5)
  {
    sub_20B9249E4(v5);
    MEMORY[0x20BD39CB0](v5, 0x20C40960023A9);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
}

void sub_20B91B99C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  sub_20B91C9D4(&a15, 0);
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20B91B9F0(uint64_t a1, const char *a2, uint64_t a3)
{
  std::string *p_p;
  uint64_t *v6;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  std::string __p;
  char v11;

  v11 = 0;
  sub_20B9231E0(a2, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v6 = sub_20B91B048((uint64_t *)(a1 + 56), (const char *)p_p);
  while (sub_20B924A2C((uint64_t)v6) == 100)
  {
    v7 = sqlite3_column_int((sqlite3_stmt *)v6[1], 0);
    v8 = sqlite3_column_blob((sqlite3_stmt *)v6[1], 1);
    v9 = sqlite3_column_bytes((sqlite3_stmt *)v6[1], 1);
    (*(void (**)(uint64_t, const void *, uint64_t, uint64_t, char *))(a3 + 16))(a3, v8, v9, v7, &v11);
    if (v11)
      goto LABEL_9;
  }
  if (!v6)
    goto LABEL_10;
LABEL_9:
  sub_20B9249E4(v6);
  MEMORY[0x20BD39CB0](v6, 0x20C40960023A9);
LABEL_10:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20B91BAF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B91BB2C(uint64_t *a1, uint64_t a2)
{
  std::string *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  const void *v10;
  int v11;
  std::__shared_weak_count_vtbl *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  int v23;
  std::__shared_weak_count_vtbl *v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  int v32;
  unsigned int v34;
  void *__p[2];
  char v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count_vtbl *v38;
  std::__shared_weak_count *v39;
  void *v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  uint64_t *v43;
  _QWORD *v44[2];
  char v45;
  uint64_t *v46;
  std::string v47;

  sub_20B923998(a1, &v47);
  if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v3 = &v47;
  else
    v3 = (std::string *)v47.__r_.__value_.__r.__words[0];
  v4 = sub_20B91B048(a1 + 7, (const char *)v3);
  v46 = v4;
  v45 = 0;
  if (sub_20B924A2C((uint64_t)v4) == 100)
  {
    while (1)
    {
      v34 = sqlite3_column_int((sqlite3_stmt *)v4[1], 0);
      v5 = sqlite3_column_int((sqlite3_stmt *)v4[1], 1);
      v44[0] = 0;
      v44[1] = 0;
      v43 = (uint64_t *)v44;
      v6 = *a1;
      if (a1[1] != *a1)
      {
        v7 = 0;
        do
        {
          v8 = *(_DWORD *)(v6 + 32 * v7 + 24);
          if (v8 == 1)
          {
            v23 = sqlite3_column_int((sqlite3_stmt *)v46[1], v7 + 2);
            v24 = (std::__shared_weak_count_vtbl *)operator new();
            v24->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&unk_24C45FBF0;
            LODWORD(v24->~__shared_weak_count_0) = v23;
            v40 = v24;
            v25 = (std::__shared_weak_count *)operator new();
            v25->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C46BBE8;
            v25->__shared_owners_ = 0;
            v25->__shared_weak_owners_ = 0;
            v25[1].__vftable = v24;
            v41 = v25;
            sub_20B909DE8(__p, (__int128 *)(*a1 + 32 * v7), &v40);
            sub_20B90B7C4(&v43, __p, (uint64_t)__p);
            v26 = v37;
            if (v37)
            {
              p_shared_owners = (unint64_t *)&v37->__shared_owners_;
              do
                v28 = __ldaxr(p_shared_owners);
              while (__stlxr(v28 - 1, p_shared_owners));
              if (!v28)
              {
                ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
                std::__shared_weak_count::__release_weak(v26);
              }
            }
            if (v36 < 0)
              operator delete(__p[0]);
            v29 = v41;
            if (v41)
            {
              v30 = (unint64_t *)&v41->__shared_owners_;
              do
                v31 = __ldaxr(v30);
              while (__stlxr(v31 - 1, v30));
              if (!v31)
              {
                ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
                std::__shared_weak_count::__release_weak(v29);
              }
            }
          }
          else if (!v8)
          {
            v9 = (uint64_t)v46;
            v10 = sqlite3_column_blob((sqlite3_stmt *)v46[1], (int)v7 + 2);
            v11 = sqlite3_column_bytes(*(sqlite3_stmt **)(v9 + 8), v7 + 2);
            v40 = 0;
            v41 = 0;
            v42 = 0;
            sub_20B87ACC8(&v40, v10, (uint64_t)v10 + (v11 & 0xFFFFFFFFFFFFFFFELL), (uint64_t)v11 >> 1);
            v12 = (std::__shared_weak_count_vtbl *)operator new();
            v13 = v40;
            v14 = (uint64_t)v41;
            v15 = ((char *)v41 - (_BYTE *)v40) >> 1;
            v12->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&unk_24C45FAC8;
            v12->__on_zero_shared = 0;
            v12->__get_deleter = 0;
            v12->~__shared_weak_count_0 = 0;
            sub_20B909D70(&v12->~__shared_weak_count_0, v13, v14, v15);
            v38 = v12;
            v16 = (std::__shared_weak_count *)operator new();
            v16->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C46BBB0;
            v16->__shared_owners_ = 0;
            v16->__shared_weak_owners_ = 0;
            v16[1].__vftable = v12;
            v39 = v16;
            sub_20B909DE8(__p, (__int128 *)(*a1 + 32 * v7), &v38);
            sub_20B90B7C4(&v43, __p, (uint64_t)__p);
            v17 = v37;
            if (v37)
            {
              v18 = (unint64_t *)&v37->__shared_owners_;
              do
                v19 = __ldaxr(v18);
              while (__stlxr(v19 - 1, v18));
              if (!v19)
              {
                ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
                std::__shared_weak_count::__release_weak(v17);
              }
            }
            if (v36 < 0)
              operator delete(__p[0]);
            v20 = v39;
            if (v39)
            {
              v21 = (unint64_t *)&v39->__shared_owners_;
              do
                v22 = __ldaxr(v21);
              while (__stlxr(v22 - 1, v21));
              if (!v22)
              {
                ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
                std::__shared_weak_count::__release_weak(v20);
              }
            }
            if (v40)
            {
              v41 = (std::__shared_weak_count *)v40;
              operator delete(v40);
            }
          }
          ++v7;
          v6 = *a1;
        }
        while (v7 < (a1[1] - *a1) >> 5);
      }
      (*(void (**)(uint64_t, uint64_t **, _QWORD, uint64_t, char *))(a2 + 16))(a2, &v43, v34, v5, &v45);
      if (v45)
        break;
      v4 = v46;
      v32 = sub_20B924A2C((uint64_t)v46);
      sub_20B8896CC((uint64_t)&v43, v44[0]);
      if (v32 != 100)
        goto LABEL_38;
    }
    sub_20B8896CC((uint64_t)&v43, v44[0]);
    v4 = v46;
    if (v46)
      goto LABEL_41;
  }
  else
  {
LABEL_38:
    if (v4)
    {
LABEL_41:
      sub_20B9249E4(v4);
      MEMORY[0x20BD39CB0](v4, 0x20C40960023A9);
    }
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
}

void sub_20B91BF54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,char a22,uint64_t a23)
{
  uint64_t v23;

  sub_20B91C9D4((uint64_t **)(v23 - 120), 0);
  if (*(char *)(v23 - 89) < 0)
    operator delete(*(void **)(v23 - 112));
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x20B91BF30);
  }
  _Unwind_Resume(a1);
}

void sub_20B91C0A4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  std::string *p_p;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  void **v11;
  void *v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  char v17;
  uint64_t *v18;
  std::string __p;

  sub_20B9238A4((uint64_t *)a1[6], a2, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v7 = sub_20B91B048(a1 + 7, (const char *)p_p);
  v18 = v7;
  v8 = *a1;
  v9 = a1[1];
  if (*a1 != v9)
  {
    v10 = 1;
    do
    {
      v11 = sub_20B871B2C(a2, (void **)v8);
      if ((void **)(a2 + 8) != v11)
      {
        v12 = v11[7];
        v13 = *(_DWORD *)(v8 + 24);
        if (v13 == 1)
        {
          v15 = (*(uint64_t (**)(void *))(*(_QWORD *)v12 + 24))(v12);
          sqlite3_bind_int((sqlite3_stmt *)v7[1], v10, v15);
        }
        else if (!v13)
        {
          v14 = (*(uint64_t (**)(void *))(*(_QWORD *)v12 + 16))(v12);
          sub_20B924A70((uint64_t)v7, v10, *(const void **)v14, (uint64_t)(*(_QWORD *)(v14 + 8) - *(_QWORD *)v14) >> 1, *(unsigned __int8 *)(v8 + 30));
        }
        ++v10;
      }
      v8 += 32;
    }
    while (v8 != v9);
  }
  v17 = 0;
  while (sub_20B924A2C((uint64_t)v7) == 100)
  {
    v16 = sqlite3_column_int((sqlite3_stmt *)v7[1], 0);
    (*(void (**)(uint64_t, uint64_t, char *))(a3 + 16))(a3, v16, &v17);
    if (v17)
      goto LABEL_18;
  }
  if (!v7)
    goto LABEL_19;
LABEL_18:
  sub_20B9249E4(v7);
  MEMORY[0x20BD39CB0](v7, 0x20C40960023A9);
LABEL_19:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20B91C224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B91C264(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v4[5];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v8 = -1;
  v4[0] = MEMORY[0x24BDAC760];
  v4[1] = 0x40000000;
  v4[2] = sub_20B91C308;
  v4[3] = &unk_24C46C340;
  v4[4] = &v5;
  sub_20B91C0A4(a1, a2, (uint64_t)v4);
  v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_20B91C2F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_20B91C308(uint64_t result, int a2, _BYTE *a3)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a2;
  *a3 = 1;
  return result;
}

uint64_t sub_20B91C320(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;

  v3 = a3 + 1;
  v4 = (_QWORD *)*a3;
  if ((_QWORD *)*a3 == a3 + 1)
    return 0xFFFFFFFFLL;
  LODWORD(v7) = -1;
  while (1)
  {
    v8 = *((unsigned int *)v4 + 7);
    v9 = sub_20B91AD48((uint64_t)a1, 1);
    v10 = sub_20B91C3E4(a1, v9, v8, a2, 0);
    v7 = v10 ? v8 : v7;
    if (v10)
      break;
    v11 = (_QWORD *)v4[1];
    if (v11)
    {
      do
      {
        v12 = v11;
        v11 = (_QWORD *)*v11;
      }
      while (v11);
    }
    else
    {
      do
      {
        v12 = (_QWORD *)v4[2];
        v13 = *v12 == (_QWORD)v4;
        v4 = v12;
      }
      while (!v13);
    }
    v4 = v12;
    if (v12 == v3)
      return v7;
  }
  return v8;
}

BOOL sub_20B91C3E4(uint64_t *a1, uint64_t a2, int a3, uint64_t a4, char a5)
{
  uint64_t v9;
  int v10;
  void **v11;
  void *v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;

  sqlite3_bind_int(*(sqlite3_stmt **)(a2 + 8), 1, a3);
  v9 = *a1;
  if (*a1 != a1[1])
  {
    v10 = 2;
    do
    {
      if (!*(_BYTE *)(v9 + 28))
      {
        v11 = sub_20B871B2C(a4, (void **)v9);
        if ((void **)(a4 + 8) == v11)
        {
          if ((a5 & 1) == 0)
            return 0;
        }
        else
        {
          v12 = v11[7];
          v13 = *(_DWORD *)(v9 + 24);
          if (v13 == 1)
          {
            v16 = (*(uint64_t (**)(void *))(*(_QWORD *)v12 + 24))(v12);
            v14 = v10 + 1;
            sqlite3_bind_int(*(sqlite3_stmt **)(a2 + 8), v10, v16);
            goto LABEL_11;
          }
          if (!v13)
          {
            v14 = v10 + 1;
            v15 = (*(uint64_t (**)(void *))(*(_QWORD *)v12 + 16))(v12);
            sub_20B924A70(a2, v10, *(const void **)v15, (uint64_t)(*(_QWORD *)(v15 + 8) - *(_QWORD *)v15) >> 1, *(unsigned __int8 *)(v9 + 30));
LABEL_11:
            v10 = v14;
          }
        }
      }
      v9 += 32;
    }
    while (v9 != a1[1]);
  }
  return sub_20B924A2C(a2) == 100;
}

uint64_t sub_20B91C4F8(uint64_t *a1, int a2, const char *a3)
{
  uint64_t v6;

  v6 = operator new();
  sub_20B924988(v6, (uint64_t)(a1 + 1), *a1, a3, a2);
  return v6;
}

void sub_20B91C558(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = v3;
  MEMORY[0x20BD39CB0](v5, 0x20C40960023A9);
  if (a2 == 1)
  {
    if (*(_DWORD *)__cxa_begin_catch(a1) == 1)
    {
      sub_20B924B98((_QWORD *)(v2 + 8));
      sub_20B91C994(v2);
    }
    __cxa_end_catch();
    JUMPOUT(0x20B91C544);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20B91C5D0(uint64_t a1, uint64_t a2)
{
  sqlite3 **v5;
  BOOL v6;

  v5 = (sqlite3 **)(a1 + 56);
  v6 = sub_20B91AB68((sqlite3 **)(a1 + 56), "BEGIN IMMEDIATE") == 0;
  (*(void (**)(uint64_t))(a2 + 16))(a2);
  sub_20B91AB68(v5, "COMMIT");
  v6 = 0;
  *(_BYTE *)(a1 + 144) = 1;
  sub_20B91CA24((uint64_t)&v5);
  return 0;
}

void sub_20B91C654(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B91CA24((uint64_t)&a9);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x20B91C640);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20B91C690(uint64_t a1)
{
  if (*(_QWORD *)a1)
  {
    sub_20B924B98((_QWORD *)(a1 + 8));
    if (sqlite3_close(*(sqlite3 **)a1))
      return 0;
    *(_QWORD *)a1 = 0;
  }
  return 1;
}

BOOL sub_20B91C6D8(uint64_t a1)
{
  double Current;
  _BOOL8 result;

  if (!*(_BYTE *)(a1 + 144))
    return 1;
  Current = CFAbsoluteTimeGetCurrent();
  sub_20B91B3AC(a1, Current);
  result = sub_20B91C83C(a1 + 56, 1) == 0;
  *(_BYTE *)(a1 + 144) = 0;
  return result;
}

char *sub_20B91C728(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;

  if (a4)
  {
    v6 = result;
    sub_20B919270(result, a4);
    result = sub_20B9192B0((uint64_t)(v6 + 16), a2, a3, *((char **)v6 + 1));
    *((_QWORD *)v6 + 1) = result;
  }
  return result;
}

void sub_20B91C78C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_20B86F120(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B91C7AC(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_20B922980(result);
    JUMPOUT(0x20BD39CB0);
  }
  return result;
}

uint64_t sub_20B91C7E8(uint64_t a1)
{
  if (*(_QWORD *)a1)
  {
    sub_20B924B98((_QWORD *)(a1 + 8));
    sqlite3_close(*(sqlite3 **)a1);
  }
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  sub_20B924B58(a1 + 8);
  return a1;
}

uint64_t sub_20B91C83C(uint64_t a1, int a2)
{
  const char *v4;
  uint64_t v5;
  sqlite3 **p_ppDb;
  sqlite3 *v7;
  sqlite3 **v8;
  sqlite3_backup *v9;
  sqlite3_backup *v10;
  sqlite3 *ppDb;

  ppDb = 0;
  v4 = (const char *)(a1 + 64);
  if (*(char *)(a1 + 87) < 0)
    v4 = *(const char **)v4;
  v5 = sqlite3_open(v4, &ppDb);
  if (!(_DWORD)v5)
  {
    if (a2)
      p_ppDb = (sqlite3 **)a1;
    else
      p_ppDb = &ppDb;
    v7 = *p_ppDb;
    if (a2)
      v8 = &ppDb;
    else
      v8 = (sqlite3 **)a1;
    v9 = sqlite3_backup_init(*v8, "main", v7, "main");
    if (v9)
    {
      v10 = v9;
      sqlite3_backup_step(v9, -1);
      sqlite3_backup_finish(v10);
    }
    v5 = sqlite3_errcode(ppDb);
  }
  if (ppDb)
    sqlite3_close(ppDb);
  return v5;
}

uint64_t sub_20B91C8EC(uint64_t a1)
{
  _DWORD *exception;
  sqlite3 **v4;
  BOOL v5;

  v4 = (sqlite3 **)a1;
  v5 = sub_20B91AB68((sqlite3 **)a1, "BEGIN IMMEDIATE") == 0;
  if (!sub_20B91ABB8(*(_QWORD *)(a1 + 56), (sqlite3 **)a1))
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 3;
    __cxa_throw(exception, (struct type_info *)&unk_24C45B9C8, 0);
  }
  sub_20B91AB68(v4, "COMMIT");
  v5 = 0;
  return sub_20B91CA24((uint64_t)&v4);
}

void sub_20B91C980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B91CA24((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B91C994(uint64_t a1)
{
  sub_20B91AB1C(*(_QWORD *)(a1 + 56));
  sub_20B91C8EC(a1);
  return 1;
}

void sub_20B91C9C4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x20B91C9B8);
}

uint64_t **sub_20B91C9D4(uint64_t **result, uint64_t *a2)
{
  uint64_t *v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    sub_20B9249E4(v2);
    JUMPOUT(0x20BD39CB0);
  }
  return result;
}

uint64_t sub_20B91CA24(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    sub_20B91AB68(*(sqlite3 ***)a1, "ROLLBACK");
  return a1;
}

uint64_t sub_20B91CA60(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  v3 = operator new();
  *(_QWORD *)v3 = off_24C49CC58;
  *(_QWORD *)(v3 + 8) = 0;
  *(_DWORD *)(v3 + 16) = 64;
  *(_BYTE *)(v3 + 20) = 1;
  sub_20B91F8D0(v3);
  *(_QWORD *)v2 = off_24C49CC58;
  *(_QWORD *)(v2 + 8) = 0;
  *(_DWORD *)(v2 + 16) = 64;
  *(_BYTE *)(v2 + 20) = 1;
  sub_20B91F8D0(v2);
  *(_QWORD *)(v2 + 24) = v3;
  *(_QWORD *)v2 = off_24C49CE10;
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 64) = 0;
  return a1;
}

void sub_20B91CB24(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x20BD39CB0](v2, 0x10A1C4028A83BA9);
  MEMORY[0x20BD39CB0](v1, 0x10A1C40240D44B1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B91CB68(uint64_t a1)
{
  const void *v2;
  uint64_t v3;
  void **v5;

  sub_20B91CBDC((uint64_t *)a1);
  v2 = *(const void **)(a1 + 64);
  if (v2)
    _Block_release(v2);
  v5 = (void **)(a1 + 40);
  sub_20B86F120(&v5);
  v5 = (void **)(a1 + 16);
  sub_20B91E3BC(&v5);
  v3 = *(_QWORD *)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
  return a1;
}

void sub_20B91CBDC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  (*(void (**)(uint64_t))(*(_QWORD *)*a1 + 96))(*a1);
  v3 = a1[2];
  v2 = a1[3];
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 24;
      sub_20B8292CC(v2 - 24, *(_QWORD **)(v2 - 16));
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[3] = v3;
  sub_20B86F160(a1 + 5);
  *((_DWORD *)a1 + 2) = 0;
}

_QWORD *sub_20B91CC48(uint64_t a1)
{
  char **v2;
  unint64_t v3;
  _QWORD *result;

  v2 = (char **)(a1 + 40);
  v3 = (uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 5;
  sub_20B91CBDC((uint64_t *)a1);
  sub_20B91CCA0(v2, v3);
  result = sub_20B91CD74((uint64_t *)(a1 + 16));
  *(_BYTE *)(a1 + 72) = 1;
  return result;
}

uint64_t sub_20B91CCA0(char **a1, unint64_t a2)
{
  uint64_t result;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  char *v10;
  __int128 v11;
  int64x2_t v12;
  char *v13;
  uint64_t v14;
  int64x2_t v15;
  char *v16;
  uint64_t v17;

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 5)
  {
    if (a2 >> 59)
      sub_20B91E434();
    v5 = a1[1] - *a1;
    v17 = result;
    v6 = (char *)sub_20B8156D4(result, a2);
    v8 = *a1;
    v9 = (unint64_t)a1[1];
    if ((char *)v9 == *a1)
    {
      v12 = vdupq_n_s64(v9);
      v10 = &v6[v5];
    }
    else
    {
      v10 = &v6[v5];
      do
      {
        v11 = *(_OWORD *)(v9 - 32);
        *((_QWORD *)v10 - 2) = *(_QWORD *)(v9 - 16);
        *((_OWORD *)v10 - 2) = v11;
        *(_QWORD *)(v9 - 24) = 0;
        *(_QWORD *)(v9 - 16) = 0;
        *(_QWORD *)(v9 - 32) = 0;
        *((_DWORD *)v10 - 2) = *(_DWORD *)(v9 - 8);
        v10 -= 32;
        v9 -= 32;
      }
      while ((char *)v9 != v8);
      v12 = *(int64x2_t *)a1;
    }
    *a1 = v10;
    a1[1] = &v6[v5];
    v15 = v12;
    v13 = a1[2];
    a1[2] = &v6[32 * v7];
    v16 = v13;
    v14 = v12.i64[0];
    return sub_20B86EE7C((uint64_t)&v14);
  }
  return result;
}

_QWORD *sub_20B91CD74(uint64_t *a1)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  void *v14[5];

  v4 = a1[2];
  v2 = a1 + 2;
  v3 = v4;
  v5 = (_QWORD *)*(v2 - 1);
  if ((unint64_t)v5 >= v4)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *a1) >> 3);
    v8 = v7 + 1;
    if (v7 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_20B91E434();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - *a1) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v8;
    v14[4] = v2;
    if (v10)
      v11 = (char *)sub_20B828D70((uint64_t)v2, v10);
    else
      v11 = 0;
    v12 = &v11[24 * v7];
    v14[0] = v11;
    v14[1] = v12;
    v14[3] = &v11[24 * v10];
    *((_QWORD *)v12 + 2) = 0;
    *((_QWORD *)v12 + 1) = 0;
    *(_QWORD *)v12 = v12 + 8;
    v14[2] = v12 + 24;
    sub_20B91E448(a1, v14);
    v6 = (_QWORD *)a1[1];
    sub_20B91E4EC(v14);
  }
  else
  {
    v5[2] = 0;
    v5[1] = 0;
    *v5 = v5 + 1;
    v6 = v5 + 3;
    a1[1] = (uint64_t)(v5 + 3);
  }
  a1[1] = (uint64_t)v6;
  return v6 - 3;
}

void sub_20B91CE80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B91E4EC((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B91CE94(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t i;
  uint64_t *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  void **v19;
  unint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t *v27;
  int v29;
  void **v30;
  _QWORD *v31[2];
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  char *v35;
  _QWORD *v36;

  (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 96))(*a1);
  *((_BYTE *)a1 + 72) = 0;
  v2 = a1[5];
  v3 = a1[6];
  if (v2 != v3)
  {
    sub_20B91E560(v2, v3, 126 - 2 * __clz((uint64_t)(v3 - v2) >> 5), 1);
    v4 = (uint64_t *)a1[5];
    v5 = (uint64_t *)a1[6];
    if (v5 == v4)
    {
      v4 = (uint64_t *)a1[6];
    }
    else
    {
      v6 = 0;
      LODWORD(i) = 0;
      do
      {
        v8 = &v4[4 * v6];
        LODWORD(v32) = *((_DWORD *)v8 + 6);
        sub_20B921288((uint64_t *)&v30, (int *)&v32, 1);
        for (i = (int)i; ; sub_20B921304((uint64_t *)&v30, *(_DWORD *)(v9 + 32 * i + 24), *(_DWORD *)(v9 + 32 * i + 24)))
        {
          ++i;
          v9 = a1[5];
          if (i >= (a1[6] - v9) >> 5)
            break;
          v10 = (unsigned __int8 *)(v9 + 32 * i);
          v11 = v10[23];
          if ((v11 & 0x80u) == 0)
            v12 = v10[23];
          else
            v12 = *((_QWORD *)v10 + 1);
          v13 = *((unsigned __int8 *)v8 + 23);
          v14 = (char)v13;
          if ((v13 & 0x80u) != 0)
            v13 = v8[1];
          if (v12 != v13)
            break;
          if (v14 >= 0)
            v15 = (unsigned __int8 *)v8;
          else
            v15 = (unsigned __int8 *)*v8;
          if ((v11 & 0x80) != 0)
          {
            if (memcmp(*(const void **)v10, v15, *((_QWORD *)v10 + 1)))
              break;
          }
          else if (v10[23])
          {
            while (*v10 == *v15)
            {
              ++v10;
              ++v15;
              if (!--v11)
                goto LABEL_21;
            }
            break;
          }
LABEL_21:
          ;
        }
        v16 = a1[2];
        v17 = (uint64_t *)a1[3];
        v18 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v17 - v16) >> 3);
        v29 = -1431655765 * (((uint64_t)v17 - v16) >> 3);
        v19 = v30;
        v20 = a1[4];
        if ((unint64_t)v17 >= v20)
        {
          if (v18 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_20B91E434();
          v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - v16) >> 3);
          v23 = 2 * v22;
          if (2 * v22 <= v18 + 1)
            v23 = v18 + 1;
          if (v22 >= 0x555555555555555)
            v24 = 0xAAAAAAAAAAAAAAALL;
          else
            v24 = v23;
          v36 = a1 + 4;
          if (v24)
            v25 = (char *)sub_20B828D70((uint64_t)(a1 + 4), v24);
          else
            v25 = 0;
          v32 = (uint64_t *)v25;
          v33 = (uint64_t *)&v25[24 * v18];
          v34 = v33;
          v35 = &v25[24 * v24];
          sub_20B91F668(v33, v19, v31);
          v34 += 3;
          sub_20B91E448(a1 + 2, &v32);
          v21 = (uint64_t *)a1[3];
          sub_20B91E4EC((void **)&v32);
        }
        else
        {
          sub_20B91F668(v17, v30, v31);
          v21 = v17 + 3;
          a1[3] = v17 + 3;
        }
        a1[3] = v21;
        if (*((char *)v8 + 23) < 0)
        {
          v27 = v8;
          v8 = (uint64_t *)*v8;
          v26 = v27[1];
        }
        else
        {
          v26 = *((unsigned __int8 *)v8 + 23);
        }
        (*(void (**)(_QWORD, uint64_t *, uint64_t, int *))(*(_QWORD *)*a1 + 80))(*a1, v8, v26, &v29);
        sub_20B8292CC((uint64_t)&v30, v31[0]);
        v6 = (int)i;
        v4 = (uint64_t *)a1[5];
        v5 = (uint64_t *)a1[6];
      }
      while ((int)i < (unint64_t)(((char *)v5 - (char *)v4) >> 5));
    }
    v32 = v4;
    v33 = v5;
    a1[5] = 0;
    a1[6] = 0;
    v34 = (uint64_t *)a1[7];
    a1[7] = 0;
    v30 = (void **)&v32;
    sub_20B86F120(&v30);
  }
  return 1;
}

void sub_20B91D170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, _QWORD *a12)
{
  sub_20B8292CC((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

uint64_t sub_20B91D1B0(_QWORD *a1, void *__src, uint64_t a3, int a4)
{
  uint64_t result;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  BOOL v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  __int128 v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  __int128 v33;
  int64x2_t v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  void *v40;
  char *v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  void **v49;
  _QWORD *v50;
  char *v51;
  void *v52;
  int v53;
  int v54;
  void *__p[2];
  void *v56;
  uint64_t v57;
  int64x2_t v58;
  char *v59;
  _QWORD *v60;

  result = 0;
  if (a3 && (a3 & 0x7FFFFFFFFFFFFF80) == 0)
  {
    ++*((_DWORD *)a1 + 2);
    if (*((_BYTE *)a1 + 72))
    {
      sub_20B82E068(__p, __src, 2 * a3);
      v8 = a1[7];
      v9 = a1[6];
      if (v9 >= v8)
      {
        v21 = a1[5];
        v22 = (uint64_t)(v9 - v21) >> 5;
        v23 = v22 + 1;
        if ((unint64_t)(v22 + 1) >> 59)
          sub_20B91E434();
        v24 = v8 - v21;
        if (v24 >> 4 > v23)
          v23 = v24 >> 4;
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFE0)
          v25 = 0x7FFFFFFFFFFFFFFLL;
        else
          v25 = v23;
        v60 = a1 + 7;
        v26 = (char *)sub_20B8156D4((uint64_t)(a1 + 7), v25);
        v28 = &v26[32 * v22];
        v29 = *(_OWORD *)__p;
        *((_QWORD *)v28 + 2) = v56;
        *(_OWORD *)v28 = v29;
        __p[1] = 0;
        v56 = 0;
        __p[0] = 0;
        *((_DWORD *)v28 + 6) = a4;
        v30 = v28 + 32;
        v31 = a1[5];
        v32 = a1[6];
        if (v32 == v31)
        {
          v34 = vdupq_n_s64(v32);
        }
        else
        {
          do
          {
            v33 = *(_OWORD *)(v32 - 32);
            *((_QWORD *)v28 - 2) = *(_QWORD *)(v32 - 16);
            *((_OWORD *)v28 - 2) = v33;
            *(_QWORD *)(v32 - 24) = 0;
            *(_QWORD *)(v32 - 16) = 0;
            *(_QWORD *)(v32 - 32) = 0;
            *((_DWORD *)v28 - 2) = *(_DWORD *)(v32 - 8);
            v28 -= 32;
            v32 -= 32;
          }
          while (v32 != v31);
          v34 = *(int64x2_t *)(a1 + 5);
        }
        a1[5] = v28;
        a1[6] = v30;
        v58 = v34;
        v41 = (char *)a1[7];
        a1[7] = &v26[32 * v27];
        v59 = v41;
        v57 = v34.i64[0];
        sub_20B86EE7C((uint64_t)&v57);
        v42 = SHIBYTE(v56);
        a1[6] = v30;
        if (v42 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v10 = *(_OWORD *)__p;
        *(_QWORD *)(v9 + 16) = v56;
        *(_OWORD *)v9 = v10;
        *(_DWORD *)(v9 + 24) = a4;
        a1[6] = v9 + 32;
      }
      return 1;
    }
    v54 = 0;
    v11 = 2 * a3;
    v12 = (**(uint64_t (***)(_QWORD, void *, uint64_t, int *))*a1)(*a1, __src, 2 * a3, &v54);
    v14 = a1 + 2;
    v13 = a1[2];
    if (v12)
    {
      v15 = (uint64_t *)(v13 + 24 * v54);
      v16 = v15[1];
      if (v16)
      {
        v17 = v15 + 1;
        do
        {
          v18 = *(_DWORD *)(v16 + 28);
          v19 = v18 < a4;
          if (v18 >= a4)
            v20 = (uint64_t *)v16;
          else
            v20 = (uint64_t *)(v16 + 8);
          if (!v19)
            v17 = (uint64_t *)v16;
          v16 = *v20;
        }
        while (*v20);
        if (v17 != v15 + 1 && *((_DWORD *)v17 + 7) <= a4)
          return 0;
      }
      sub_20B921304(v15, a4, a4);
      return 1;
    }
    v35 = -1431655765 * ((unint64_t)(a1[3] - v13) >> 3);
    v53 = a4;
    v54 = v35;
    sub_20B921288((uint64_t *)__p, &v53, 1);
    v36 = a1[3];
    v37 = a1[4];
    if (v36 >= v37)
    {
      v43 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - *v14) >> 3);
      v44 = v43 + 1;
      if (v43 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20B91E434();
      v45 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37 - *v14) >> 3);
      if (2 * v45 > v44)
        v44 = 2 * v45;
      if (v45 >= 0x555555555555555)
        v46 = 0xAAAAAAAAAAAAAAALL;
      else
        v46 = v44;
      v60 = a1 + 4;
      if (v46)
        v47 = (char *)sub_20B828D70((uint64_t)(a1 + 4), v46);
      else
        v47 = 0;
      v49 = (void **)&v47[24 * v43];
      v57 = (uint64_t)v47;
      v58.i64[0] = (uint64_t)v49;
      v59 = &v47[24 * v46];
      *v49 = __p[0];
      v50 = __p[1];
      v49[1] = __p[1];
      v51 = (char *)(v49 + 1);
      v52 = v56;
      v49[2] = v56;
      if (v52)
      {
        v50[2] = v51;
        __p[0] = &__p[1];
        __p[1] = 0;
        v56 = 0;
      }
      else
      {
        *v49 = v51;
      }
      v58.i64[1] = (uint64_t)(v49 + 3);
      sub_20B91E448(a1 + 2, &v57);
      v48 = a1[3];
      sub_20B91E4EC((void **)&v57);
    }
    else
    {
      *(void **)v36 = __p[0];
      v38 = __p[1];
      *(void **)(v36 + 8) = __p[1];
      v39 = v36 + 8;
      v40 = v56;
      *(_QWORD *)(v36 + 16) = v56;
      if (v40)
      {
        v38[2] = v39;
        __p[0] = &__p[1];
        __p[1] = 0;
        v56 = 0;
      }
      else
      {
        *(_QWORD *)v36 = v39;
      }
      v48 = v36 + 24;
    }
    a1[3] = v48;
    sub_20B8292CC((uint64_t)__p, (_QWORD *)__p[1]);
    return (*(uint64_t (**)(_QWORD, void *, uint64_t, int *))(*(_QWORD *)*a1 + 80))(*a1, __src, v11, &v54);
  }
  return result;
}

void sub_20B91D57C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, _QWORD *a12, int a13, __int16 a14, char a15, char a16, void *a17)
{
  sub_20B91E4EC(&a17);
  sub_20B8292CC((uint64_t)&__p, a12);
  _Unwind_Resume(a1);
}

uint64_t sub_20B91D5BC(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  uint64_t *v14;
  unsigned int v16;

  v16 = 0;
  v7 = 2 * a3;
  if (!(**(unsigned int (***)(_QWORD, uint64_t, uint64_t, unsigned int *))*a1)(*a1, a2, 2 * a3, &v16))
    return 1;
  v8 = v16;
  v9 = a1[2] + 24 * v16;
  v10 = *(_QWORD *)(v9 + 8);
  if (!v10)
    return 0;
  v11 = v9 + 8;
  do
  {
    v12 = *(_DWORD *)(v10 + 28);
    v13 = v12 < a4;
    if (v12 >= a4)
      v14 = (uint64_t *)v10;
    else
      v14 = (uint64_t *)(v10 + 8);
    if (!v13)
      v11 = v10;
    v10 = *v14;
  }
  while (*v14);
  if (v11 == v9 + 8 || *(_DWORD *)(v11 + 28) > a4)
    return 0;
  --*((_DWORD *)a1 + 2);
  sub_20B8D9280((uint64_t **)v9, (uint64_t *)v11);
  operator delete((void *)v11);
  if (!*(_QWORD *)(a1[2] + 24 * v8 + 16))
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a1 + 88))(*a1, a2, v7);
  else
    return 1;
}

void sub_20B91D6C4(uint64_t a1, unsigned __int16 *a2, unint64_t a3, unsigned int a4, uint64_t a5)
{
  if (*(_DWORD *)(a1 + 8))
  {
    if (a4 == 512)
    {
      sub_20B91D6E8(a1, a5);
    }
    else if (a3)
    {
      sub_20B91D7C8(a1, a2, a3, a4, a5);
    }
  }
}

uint64_t sub_20B91D6E8(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  char v14;

  v14 = 0;
  v3 = *(_QWORD *)(result + 16);
  v2 = *(_QWORD *)(result + 24);
  if (v2 != v3)
  {
    v5 = result;
    v6 = 0;
    while (1)
    {
      v7 = (_QWORD *)(v3 + 24 * v6);
      v10 = (_QWORD *)*v7;
      v8 = v7 + 1;
      v9 = v10;
      if (v10 != v8)
        break;
LABEL_12:
      if (0xAAAAAAAAAAAAAAABLL * ((v2 - v3) >> 3) <= ++v6)
        return result;
    }
    while (1)
    {
      result = (*(uint64_t (**)(uint64_t, _QWORD, char *))(a2 + 16))(a2, *((unsigned int *)v9 + 7), &v14);
      if (v14)
        break;
      v11 = (_QWORD *)v9[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v9[2];
          v13 = *v12 == (_QWORD)v9;
          v9 = v12;
        }
        while (!v13);
      }
      v9 = v12;
      if (v12 == v8)
      {
        v3 = *(_QWORD *)(v5 + 16);
        v2 = *(_QWORD *)(v5 + 24);
        goto LABEL_12;
      }
    }
  }
  return result;
}

void sub_20B91D7C8(uint64_t a1, unsigned __int16 *a2, unint64_t a3, unsigned int a4, uint64_t a5)
{
  char v5;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  unsigned int (***v15)(void);
  unsigned int (***v16)(void);
  unsigned int (***v17)(void);
  uint64_t (***v18)();
  uint64_t v19;
  uint64_t (***v20)();
  uint64_t v21;
  uint64_t v22;
  uint64_t (**v23)();
  uint64_t v24;
  uint64_t *v25;
  void ***v26;
  uint64_t (**v27)();
  uint64_t v28;
  uint64_t *v29;
  uint64_t (***v30)();
  uint64_t v31;

  v5 = a4;
  v31 = *MEMORY[0x24BDAC8D0];
  v22 = a5;
  if ((a4 & 0x78) != 0 || (a4 & 0x82) == 0x82)
  {
    sub_20BA041B4(a2, a3, (a4 >> 2) & 0x3E, 0, 0, &v27);
    v15 = *(unsigned int (****)(void))a1;
    if ((v5 & 4) != 0)
    {
      v23 = &off_24C46ADF0;
      v24 = a1;
      v25 = &v22;
      v26 = (void ***)&v23;
      ((void (*)(unsigned int (***)(void), uint64_t (***)(), uint64_t (***)()))(*v15)[15])(v15, &v27, &v23);
    }
    else
    {
      v23 = &off_24C46ADF0;
      v24 = a1;
      v25 = &v22;
      v26 = (void ***)&v23;
      if ((v5 & 2) != 0)
        ((void (*)(unsigned int (***)(void), uint64_t (***)(), uint64_t (***)(), uint64_t))(*v15)[17])(v15, &v27, &v23, 0xFFFFFFFFLL);
      else
        ((void (*)(unsigned int (***)(void), uint64_t (***)(), uint64_t (***)()))(*v15)[13])(v15, &v27, &v23);
    }
    v20 = (uint64_t (***)())v26;
    if (v26 == (void ***)&v23)
    {
      v21 = 4;
      v20 = &v23;
    }
    else
    {
      if (!v26)
      {
LABEL_32:
        v27 = (uint64_t (**)())&unk_24C499568;
        v23 = (uint64_t (**)())&v28;
        sub_20B88DF54((void ***)&v23);
        return;
      }
      v21 = 5;
    }
    (*v20)[v21]();
    goto LABEL_32;
  }
  v7 = 2 * a3;
  if ((a4 & 4) != 0)
  {
    v16 = *(unsigned int (****)(void))a1;
    v27 = &off_24C46AE48;
    v28 = a1;
    v29 = &v22;
    v30 = &v27;
    ((void (*)(unsigned int (***)(void), unsigned __int16 *, uint64_t, uint64_t (***)()))(*v16)[1])(v16, a2, v7, &v27);
  }
  else
  {
    if ((a4 & 2) == 0)
    {
      LODWORD(v27) = 0;
      if ((***(unsigned int (****)(void))a1)())
      {
        LOBYTE(v23) = 0;
        v8 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v27);
        v11 = (_QWORD *)*v8;
        v9 = v8 + 1;
        v10 = v11;
        if (v11 != v9)
        {
          do
          {
            (*(void (**)(uint64_t, _QWORD, uint64_t (***)()))(v22 + 16))(v22, *((unsigned int *)v10 + 7), &v23);
            if ((_BYTE)v23)
              break;
            v12 = (_QWORD *)v10[1];
            if (v12)
            {
              do
              {
                v13 = v12;
                v12 = (_QWORD *)*v12;
              }
              while (v12);
            }
            else
            {
              do
              {
                v13 = (_QWORD *)v10[2];
                v14 = *v13 == (_QWORD)v10;
                v10 = v13;
              }
              while (!v14);
            }
            v10 = v13;
          }
          while (v13 != v9);
        }
      }
      return;
    }
    v17 = *(unsigned int (****)(void))a1;
    v27 = &off_24C46AE48;
    v28 = a1;
    v29 = &v22;
    v30 = &v27;
    ((void (*)(unsigned int (***)(void), unsigned __int16 *, uint64_t, uint64_t (***)(), uint64_t))(*v17)[2])(v17, a2, v7, &v27, 0xFFFFFFFFLL);
  }
  v18 = v30;
  if (v30 == &v27)
  {
    v19 = 4;
    v18 = &v27;
  }
  else
  {
    if (!v30)
      return;
    v19 = 5;
  }
  (*v18)[v19]();
}

void sub_20B91DA68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, void ***a13, void *a14, uint64_t a15)
{
  void ***v15;
  void ***v17;
  uint64_t v18;

  v17 = a13;
  if (a13 == v15)
  {
    v18 = 4;
    v17 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v18 = 5;
  }
  ((void (*)(void))(*v17)[v18])();
LABEL_6:
  a14 = &unk_24C499568;
  a10 = (void **)&a15;
  sub_20B88DF54(&a10);
  _Unwind_Resume(a1);
}

void **sub_20B91DB0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void **v3;
  void **result;
  void **v5;
  void **v6;

  (*(void (**)(void ***__return_ptr))(**(_QWORD **)a1 + 24))(&v6);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = v6;
  v6 = 0;
  sub_20B8F8A7C((void ***)(a2 + 8), v3);
  result = v6;
  v6 = 0;
  if (result)
  {
    v5 = sub_20B8F8AB8(result);
    return (void **)MEMORY[0x20BD39CB0](v5, 0x20C4093837F09);
  }
  return result;
}

void **sub_20B91DB80@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void **v4;
  void **result;
  void **v6;
  void **v7;

  (*(void (**)(void ***__return_ptr, _QWORD, _QWORD))(*(_QWORD *)*a1 + 40))(&v7, *a1, *(_QWORD *)(a2 + 8));
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v4 = v7;
  v7 = 0;
  sub_20B8F8A7C((void ***)(a3 + 8), v4);
  result = v7;
  v7 = 0;
  if (result)
  {
    v6 = sub_20B8F8AB8(result);
    return (void **)MEMORY[0x20BD39CB0](v6, 0x20C4093837F09);
  }
  return result;
}

uint64_t sub_20B91DBF8(uint64_t result, unsigned int a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  char v11;

  if (*(_DWORD *)(result + 8))
  {
    v11 = 0;
    v3 = (_QWORD *)(*(_QWORD *)(result + 16) + 24 * a2);
    v6 = (_QWORD *)*v3;
    v4 = v3 + 1;
    v5 = v6;
    if (v6 != v4)
    {
      do
      {
        result = (*(uint64_t (**)(uint64_t, _QWORD, char *))(a3 + 16))(a3, *((unsigned int *)v5 + 7), &v11);
        if (v11)
          break;
        v8 = (_QWORD *)v5[1];
        if (v8)
        {
          do
          {
            v9 = v8;
            v8 = (_QWORD *)*v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            v9 = (_QWORD *)v5[2];
            v10 = *v9 == (_QWORD)v5;
            v5 = v9;
          }
          while (!v10);
        }
        v5 = v9;
      }
      while (v9 != v4);
    }
  }
  return result;
}

_QWORD *sub_20B91DC9C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[3];
  _QWORD *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v14 = a6;
  result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 32))(*a1, *(_QWORD *)(a2 + 8));
  if ((_DWORD)result)
  {
    v11 = *a1;
    v12 = *(_QWORD *)(a2 + 8);
    v15[0] = &off_24C46AD98;
    v15[1] = &v14;
    v15[2] = a5;
    v16 = v15;
    (*(void (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v11 + 56))(v11, v12, v15, a4);
    result = v16;
    if (v16 == v15)
    {
      v13 = 4;
      result = v15;
    }
    else
    {
      if (!v16)
        return result;
      v13 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v13))();
  }
  return result;
}

void sub_20B91DD7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B91DDB4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v6[0] = &off_24C49D1A8;
  v6[1] = a1;
  v6[2] = a3;
  v7 = v6;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v3 + 104))(v3, a2, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_20B91DE58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B91DE94(_BYTE **a1, uint64_t a2, int a3, uint64_t a4)
{
  _BYTE *v4;
  _QWORD *result;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v7[0] = &off_24C49D228;
  v7[1] = a1;
  v7[2] = a4;
  v8 = v7;
  sub_20B9204E0(v4, a2, (uint64_t)v7, 1u, a3);
  result = v8;
  if (v8 == v7)
  {
    v6 = 4;
    result = v7;
  }
  else
  {
    if (!v8)
      return result;
    v6 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

void sub_20B91DF38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B91DF74(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v6[0] = &off_24C49D2A8;
  v6[1] = a1;
  v6[2] = a3;
  v7 = v6;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v3 + 136))(v3, a2, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_20B91E018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B91E054(_BYTE **a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  _BYTE *v5;
  _QWORD *result;
  uint64_t v7;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v5 = *a1;
  v8[0] = &off_24C49D428;
  v8[1] = a1;
  v8[2] = a4;
  v9 = v8;
  sub_20B91E12C(v5, a2, a3, (uint64_t)v8, a5);
  result = v9;
  if (v9 == v8)
  {
    v7 = 4;
    result = v8;
  }
  else
  {
    if (!v9)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void sub_20B91E0F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B91E12C(_BYTE *a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  uint64_t (*v10)(_QWORD);
  uint64_t (*v11)(_QWORD);
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void **v17;
  void **v18;
  _QWORD *result;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  void **v23;
  char v24;
  _BYTE v25[24];
  _BYTE *v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v10 = off_254729D60;
  if ((*(_BYTE *)off_254729D60(&off_254729D60) & 1) == 0)
  {
    v21 = (_QWORD *)off_254729D48(&off_254729D48);
    sub_20B8F98E4(v21, 256);
    _tlv_atexit((void (__cdecl *)(void *))sub_20B8F936C, v21);
    *(_BYTE *)v10(&off_254729D60) = 1;
  }
  v11 = off_254729D90;
  if ((*(_BYTE *)off_254729D90(&off_254729D90) & 1) == 0)
  {
    v22 = (_QWORD *)off_254729D78(&off_254729D78);
    sub_20B8B3DF8(v22, 0x100uLL);
    _tlv_atexit((void (__cdecl *)(void *))sub_20B8F939C, v22);
    *(_BYTE *)v11(&off_254729D90) = 1;
  }
  v24 = 0;
  v12 = operator new(0x20uLL);
  *v12 = &off_24C49D328;
  v12[1] = a1;
  v12[2] = a4;
  *((_DWORD *)v12 + 6) = a3;
  *((_DWORD *)v12 + 7) = a5;
  v26 = v12;
  (*(void (**)(void ***__return_ptr, _BYTE *))(*(_QWORD *)a1 + 24))(&v23, a1);
  off_254729D48(&off_254729D48);
  v13 = (uint64_t *)off_254729D78(&off_254729D78);
  sub_20B920770(a1, a2, (uint64_t)v25, v14, 1u, 1u, 1u, &v24, 0.0, v15, 0, v16, *v13, 0, -1, 0, 0);
  v17 = v23;
  v23 = 0;
  if (v17)
  {
    v18 = sub_20B8F8AB8(v17);
    MEMORY[0x20BD39CB0](v18, 0x20C4093837F09);
  }
  result = v26;
  if (v26 == v25)
  {
    v20 = 4;
    result = v25;
  }
  else
  {
    if (!v26)
      return result;
    v20 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v20))();
}

void sub_20B91E36C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char *a23)
{
  char *v24;
  uint64_t v25;

  sub_20B8F8A7C(&a18, 0);
  v24 = a23;
  if (a23 == &a20)
  {
    v25 = 4;
    v24 = &a20;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v25 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_20B91E3BC(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 24;
        sub_20B8292CC((uint64_t)(v4 - 24), *((_QWORD **)v4 - 2));
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_20B91E434()
{
  sub_20B80AD80("vector");
}

uint64_t *sub_20B91E448(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      *(_QWORD *)(v6 - 24) = *(_QWORD *)(v2 + v5 - 24);
      v7 = (uint64_t *)(v2 + v5 - 16);
      v8 = *v7;
      *(_QWORD *)(v4 + v5 - 16) = *v7;
      v9 = v4 + v5 - 16;
      v10 = *(_QWORD *)(v2 + v5 - 8);
      *(_QWORD *)(v6 - 8) = v10;
      if (v10)
      {
        *(_QWORD *)(v8 + 16) = v9;
        *(_QWORD *)(v2 + v5 - 24) = v7;
        *v7 = 0;
        *(_QWORD *)(v2 + v5 - 8) = 0;
      }
      else
      {
        *(_QWORD *)(v6 - 24) = v9;
      }
      v5 -= 24;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v11 = *result;
  *result = v4;
  a2[1] = v11;
  v12 = result[1];
  result[1] = a2[2];
  a2[2] = v12;
  v13 = result[2];
  result[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

void **sub_20B91E4EC(void **a1)
{
  sub_20B91E51C((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_20B91E51C(uint64_t a1)
{
  uint64_t i;
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 24;
    sub_20B8292CC(i - 24, *(_QWORD **)(i - 16));
  }
}

void sub_20B91E560(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  __int128 *v8;
  __int128 *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  unint64_t v20;
  void **v21;
  void **v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  int v26;
  void **v27;
  __int128 v28;
  __int128 v29;
  BOOL v30;
  __int128 v31;
  void **v32;
  char v33;
  unint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  int v38;
  void **v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  int v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  void **v53;
  uint64_t v54;
  __int128 v55;
  int64_t v56;
  int64_t v57;
  int64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  void **v69;
  uint64_t v70;
  void **v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  int v78;
  __int128 v79;
  void *v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  __int128 v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  _QWORD *v90;
  _DWORD *v91;
  _QWORD *v92;
  __int128 v93;
  _DWORD *v94;
  void **v95;
  _DWORD *v96;
  char v97;
  void **v98;
  __int128 v99;
  __int128 *v100;
  int v101;
  void **v102;
  char v103;
  void *__p[2];
  uint64_t v105;
  int v106;
  __int128 v107;
  void *v108;
  uint64_t v109;

  v109 = *MEMORY[0x24BDAC8D0];
LABEL_2:
  v8 = (__int128 *)(a2 - 32);
  v100 = (__int128 *)(a2 - 64);
  v102 = (void **)a2;
  v9 = (__int128 *)(a2 - 96);
  v10 = a1;
  while (2)
  {
    a1 = v10;
    v11 = a2 - v10;
    v12 = (uint64_t)(a2 - v10) >> 5;
    switch(v12)
    {
      case 0:
      case 1:
        return;
      case 2:
        if ((sub_20B871BA8(v8, (void **)a1) & 0x80) != 0)
        {
          v42 = *(_OWORD *)a1;
          v105 = *(_QWORD *)(a1 + 16);
          *(_OWORD *)__p = v42;
          v43 = *v8;
          *(_QWORD *)(a1 + 16) = *((_QWORD *)v8 + 2);
          *(_OWORD *)a1 = v43;
          v44 = *(_OWORD *)__p;
          *((_QWORD *)v8 + 2) = v105;
          *v8 = v44;
          v45 = *(_DWORD *)(a1 + 24);
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 - 8);
          *(_DWORD *)(a2 - 8) = v45;
        }
        return;
      case 3:
        sub_20B91F1D4((__int128 *)a1, (__int128 *)(a1 + 32), v8);
        return;
      case 4:
        sub_20B91F56C(a1, a1 + 32, a1 + 64, (uint64_t)v8);
        return;
      case 5:
        sub_20B91F08C(a1, a1 + 32, a1 + 64, a1 + 96, (uint64_t)v8);
        return;
      default:
        if (v11 > 767)
        {
          if (!a3)
          {
            if (a1 != a2)
            {
              v56 = (unint64_t)(v12 - 2) >> 1;
              v57 = v56;
              do
              {
                v58 = v57;
                if (v56 >= v57)
                {
                  v59 = (2 * v57) | 1;
                  v60 = a1 + 32 * v59;
                  if (2 * v57 + 2 < v12
                    && (sub_20B871BA8((_QWORD *)(a1 + 32 * v59), (void **)(v60 + 32)) & 0x80u) != 0)
                  {
                    v60 += 32;
                    v59 = 2 * v58 + 2;
                  }
                  v61 = a1 + 32 * v58;
                  if ((sub_20B871BA8((_QWORD *)v60, (void **)v61) & 0x80) == 0)
                  {
                    v62 = *(_OWORD *)v61;
                    v105 = *(_QWORD *)(v61 + 16);
                    *(_OWORD *)__p = v62;
                    *(_QWORD *)(v61 + 8) = 0;
                    *(_QWORD *)(v61 + 16) = 0;
                    *(_QWORD *)v61 = 0;
                    v106 = *(_DWORD *)(a1 + 32 * v58 + 24);
                    do
                    {
                      v63 = v60;
                      if (*(char *)(v61 + 23) < 0)
                        operator delete(*(void **)v61);
                      v64 = *(_OWORD *)v60;
                      *(_QWORD *)(v61 + 16) = *(_QWORD *)(v60 + 16);
                      *(_OWORD *)v61 = v64;
                      *(_BYTE *)(v60 + 23) = 0;
                      *(_BYTE *)v60 = 0;
                      *(_DWORD *)(v61 + 24) = *(_DWORD *)(v60 + 24);
                      if (v56 < v59)
                        break;
                      v65 = (2 * v59) | 1;
                      v60 = a1 + 32 * v65;
                      v66 = 2 * v59 + 2;
                      if (v66 < v12 && (sub_20B871BA8((_QWORD *)(a1 + 32 * v65), (void **)(v60 + 32)) & 0x80u) != 0)
                      {
                        v60 += 32;
                        v65 = v66;
                      }
                      v61 = v63;
                      v59 = v65;
                    }
                    while ((sub_20B871BA8((_QWORD *)v60, __p) & 0x80) == 0);
                    if (*(char *)(v63 + 23) < 0)
                      operator delete(*(void **)v63);
                    v67 = *(_OWORD *)__p;
                    *(_QWORD *)(v63 + 16) = v105;
                    *(_OWORD *)v63 = v67;
                    *(_DWORD *)(v63 + 24) = v106;
                  }
                }
                v57 = v58 - 1;
              }
              while (v58);
              v68 = (unint64_t)v11 >> 5;
              v69 = v102;
              do
              {
                v70 = 0;
                v71 = v69;
                v72 = *(void **)a1;
                *(_QWORD *)&v107 = *(_QWORD *)(a1 + 8);
                *(_QWORD *)((char *)&v107 + 7) = *(_QWORD *)(a1 + 15);
                v103 = *(_BYTE *)(a1 + 23);
                *(_QWORD *)(a1 + 8) = 0;
                *(_QWORD *)(a1 + 16) = 0;
                *(_QWORD *)a1 = 0;
                v101 = *(_DWORD *)(a1 + 24);
                v73 = a1;
                do
                {
                  v74 = v73 + 32 * v70 + 32;
                  v75 = 2 * v70;
                  v70 = (2 * v70) | 1;
                  v76 = v75 + 2;
                  if (v75 + 2 < v68 && (sub_20B871BA8((_QWORD *)v74, (void **)(v74 + 32)) & 0x80u) != 0)
                  {
                    v74 += 32;
                    v70 = v76;
                  }
                  if (*(char *)(v73 + 23) < 0)
                    operator delete(*(void **)v73);
                  v77 = *(_OWORD *)v74;
                  *(_QWORD *)(v73 + 16) = *(_QWORD *)(v74 + 16);
                  *(_OWORD *)v73 = v77;
                  *(_BYTE *)(v74 + 23) = 0;
                  *(_BYTE *)v74 = 0;
                  *(_DWORD *)(v73 + 24) = *(_DWORD *)(v74 + 24);
                  v73 = v74;
                }
                while (v70 <= (uint64_t)((unint64_t)(v68 - 2) >> 1));
                v69 -= 4;
                v78 = *(char *)(v74 + 23);
                if ((void **)v74 == v71 - 4)
                {
                  if (v78 < 0)
                    operator delete(*(void **)v74);
                  *(_QWORD *)v74 = v72;
                  v88 = *(_QWORD *)((char *)&v107 + 7);
                  *(_QWORD *)(v74 + 8) = v107;
                  *(_QWORD *)(v74 + 15) = v88;
                  *(_BYTE *)(v74 + 23) = v103;
                  *(_DWORD *)(v74 + 24) = v101;
                }
                else
                {
                  if (v78 < 0)
                    operator delete(*(void **)v74);
                  v79 = *(_OWORD *)v69;
                  *(_QWORD *)(v74 + 16) = *(v71 - 2);
                  *(_OWORD *)v74 = v79;
                  *((_BYTE *)v71 - 9) = 0;
                  *((_BYTE *)v71 - 32) = 0;
                  *(_DWORD *)(v74 + 24) = *((_DWORD *)v71 - 2);
                  if (*((char *)v71 - 9) < 0)
                    operator delete(*v69);
                  *(v71 - 4) = v72;
                  v80 = (void *)v107;
                  *(void **)((char *)v71 - 17) = *(void **)((char *)&v107 + 7);
                  *(v71 - 3) = v80;
                  *((_BYTE *)v71 - 9) = v103;
                  *((_DWORD *)v71 - 2) = v101;
                  v81 = v74 + 32 - a1;
                  if (v81 >= 33)
                  {
                    v82 = (((unint64_t)v81 >> 5) - 2) >> 1;
                    v83 = a1 + 32 * v82;
                    if ((sub_20B871BA8((_QWORD *)v83, (void **)v74) & 0x80) != 0)
                    {
                      v84 = *(_OWORD *)v74;
                      v105 = *(_QWORD *)(v74 + 16);
                      *(_OWORD *)__p = v84;
                      *(_QWORD *)(v74 + 8) = 0;
                      *(_QWORD *)(v74 + 16) = 0;
                      *(_QWORD *)v74 = 0;
                      v106 = *(_DWORD *)(v74 + 24);
                      do
                      {
                        v85 = v83;
                        if (*(char *)(v74 + 23) < 0)
                          operator delete(*(void **)v74);
                        v86 = *(_OWORD *)v83;
                        *(_QWORD *)(v74 + 16) = *(_QWORD *)(v83 + 16);
                        *(_OWORD *)v74 = v86;
                        *(_BYTE *)(v83 + 23) = 0;
                        *(_BYTE *)v83 = 0;
                        *(_DWORD *)(v74 + 24) = *(_DWORD *)(v83 + 24);
                        if (!v82)
                          break;
                        v82 = (v82 - 1) >> 1;
                        v83 = a1 + 32 * v82;
                        v74 = v85;
                      }
                      while ((sub_20B871BA8((_QWORD *)v83, __p) & 0x80) != 0);
                      if (*(char *)(v85 + 23) < 0)
                        operator delete(*(void **)v85);
                      v87 = *(_OWORD *)__p;
                      *(_QWORD *)(v85 + 16) = v105;
                      *(_OWORD *)v85 = v87;
                      *(_DWORD *)(v85 + 24) = v106;
                    }
                  }
                }
              }
              while (v68-- > 2);
            }
            return;
          }
          v13 = (unint64_t)v12 >> 1;
          v14 = a1 + 32 * ((unint64_t)v12 >> 1);
          if ((unint64_t)v11 <= 0x1000)
          {
            sub_20B91F1D4((__int128 *)v14, (__int128 *)a1, v8);
          }
          else
          {
            sub_20B91F1D4((__int128 *)a1, (__int128 *)v14, v8);
            sub_20B91F1D4((__int128 *)(a1 + 32), (__int128 *)(v14 - 32), v100);
            sub_20B91F1D4((__int128 *)(a1 + 64), (__int128 *)(a1 + 32 + 32 * v13), v9);
            sub_20B91F1D4((__int128 *)(v14 - 32), (__int128 *)v14, (__int128 *)(a1 + 32 + 32 * v13));
            v15 = *(_OWORD *)a1;
            v105 = *(_QWORD *)(a1 + 16);
            *(_OWORD *)__p = v15;
            v16 = *(_QWORD *)(v14 + 16);
            *(_OWORD *)a1 = *(_OWORD *)v14;
            *(_QWORD *)(a1 + 16) = v16;
            v17 = *(_OWORD *)__p;
            *(_QWORD *)(v14 + 16) = v105;
            *(_OWORD *)v14 = v17;
            LODWORD(v16) = *(_DWORD *)(a1 + 24);
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(v14 + 24);
            *(_DWORD *)(v14 + 24) = v16;
          }
          --a3;
          if ((a4 & 1) == 0 && (sub_20B871BA8((_QWORD *)(a1 - 32), (void **)a1) & 0x80) == 0)
          {
            v31 = *(_OWORD *)a1;
            v105 = *(_QWORD *)(a1 + 16);
            *(_OWORD *)__p = v31;
            *(_QWORD *)(a1 + 8) = 0;
            *(_QWORD *)(a1 + 16) = 0;
            *(_QWORD *)a1 = 0;
            v106 = *(_DWORD *)(a1 + 24);
            if ((sub_20B871BA8(__p, (void **)v8) & 0x80) != 0)
            {
              v10 = a1;
              a2 = (unint64_t)v102;
              do
                v10 += 32;
              while ((sub_20B871BA8(__p, (void **)v10) & 0x80) == 0);
            }
            else
            {
              v32 = (void **)(a1 + 32);
              a2 = (unint64_t)v102;
              do
              {
                v10 = (unint64_t)v32;
                if (v32 >= v102)
                  break;
                v33 = sub_20B871BA8(__p, v32);
                v32 = (void **)(v10 + 32);
              }
              while ((v33 & 0x80) == 0);
            }
            v34 = a2;
            if (v10 < a2)
            {
              v34 = a2;
              do
                v34 -= 32;
              while ((sub_20B871BA8(__p, (void **)v34) & 0x80) != 0);
            }
            while (v10 < v34)
            {
              v35 = *(_OWORD *)v10;
              v108 = *(void **)(v10 + 16);
              v107 = v35;
              v36 = *(_OWORD *)v34;
              *(_QWORD *)(v10 + 16) = *(_QWORD *)(v34 + 16);
              *(_OWORD *)v10 = v36;
              v37 = v107;
              *(_QWORD *)(v34 + 16) = v108;
              *(_OWORD *)v34 = v37;
              v38 = *(_DWORD *)(v10 + 24);
              *(_DWORD *)(v10 + 24) = *(_DWORD *)(v34 + 24);
              *(_DWORD *)(v34 + 24) = v38;
              do
                v10 += 32;
              while ((sub_20B871BA8(__p, (void **)v10) & 0x80) == 0);
              do
                v34 -= 32;
              while ((sub_20B871BA8(__p, (void **)v34) & 0x80) != 0);
            }
            v39 = (void **)(v10 - 32);
            if (v10 - 32 != a1)
            {
              if (*(char *)(a1 + 23) < 0)
                operator delete(*(void **)a1);
              v40 = *(_OWORD *)v39;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(v10 - 16);
              *(_OWORD *)a1 = v40;
              *(_BYTE *)(v10 - 9) = 0;
              *(_BYTE *)(v10 - 32) = 0;
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(v10 - 8);
            }
            if (*(char *)(v10 - 9) < 0)
              operator delete(*v39);
            v41 = *(_OWORD *)__p;
            *(_QWORD *)(v10 - 16) = v105;
            *(_OWORD *)v39 = v41;
            HIBYTE(v105) = 0;
            LOBYTE(__p[0]) = 0;
            *(_DWORD *)(v10 - 8) = v106;
            if (SHIBYTE(v105) < 0)
              operator delete(__p[0]);
            goto LABEL_39;
          }
          v18 = 0;
          v19 = *(_OWORD *)a1;
          v105 = *(_QWORD *)(a1 + 16);
          *(_OWORD *)__p = v19;
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)a1 = 0;
          v106 = *(_DWORD *)(a1 + 24);
          do
            v18 += 32;
          while ((sub_20B871BA8((_QWORD *)(v18 + a1), __p) & 0x80) != 0);
          v20 = a1 + v18;
          v21 = v102;
          if (v18 == 32)
          {
            v21 = v102;
            do
            {
              if (v20 >= (unint64_t)v21)
                break;
              v21 -= 4;
            }
            while ((sub_20B871BA8(v21, __p) & 0x80) == 0);
          }
          else
          {
            do
              v21 -= 4;
            while ((sub_20B871BA8(v21, __p) & 0x80) == 0);
          }
          v10 = a1 + v18;
          if (v20 >= (unint64_t)v21)
          {
            a2 = (unint64_t)v102;
          }
          else
          {
            v22 = v21;
            a2 = (unint64_t)v102;
            do
            {
              v23 = *(_OWORD *)v10;
              v108 = *(void **)(v10 + 16);
              v107 = v23;
              v24 = *(_OWORD *)v22;
              *(_QWORD *)(v10 + 16) = v22[2];
              *(_OWORD *)v10 = v24;
              v25 = v107;
              v22[2] = v108;
              *(_OWORD *)v22 = v25;
              v26 = *(_DWORD *)(v10 + 24);
              *(_DWORD *)(v10 + 24) = *((_DWORD *)v22 + 6);
              *((_DWORD *)v22 + 6) = v26;
              do
                v10 += 32;
              while ((sub_20B871BA8((_QWORD *)v10, __p) & 0x80) != 0);
              do
                v22 -= 4;
              while ((sub_20B871BA8(v22, __p) & 0x80) == 0);
            }
            while (v10 < (unint64_t)v22);
          }
          v27 = (void **)(v10 - 32);
          if (v10 - 32 != a1)
          {
            if (*(char *)(a1 + 23) < 0)
              operator delete(*(void **)a1);
            v28 = *(_OWORD *)v27;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(v10 - 16);
            *(_OWORD *)a1 = v28;
            *(_BYTE *)(v10 - 9) = 0;
            *(_BYTE *)(v10 - 32) = 0;
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(v10 - 8);
          }
          if (*(char *)(v10 - 9) < 0)
            operator delete(*v27);
          v29 = *(_OWORD *)__p;
          *(_QWORD *)(v10 - 16) = v105;
          *(_OWORD *)v27 = v29;
          HIBYTE(v105) = 0;
          LOBYTE(__p[0]) = 0;
          *(_DWORD *)(v10 - 8) = v106;
          if (SHIBYTE(v105) < 0)
            operator delete(__p[0]);
          if (v20 < (unint64_t)v21)
            goto LABEL_38;
          v30 = sub_20B91F340(a1, v10 - 32);
          if (!sub_20B91F340(v10, a2))
          {
            if (v30)
              continue;
LABEL_38:
            sub_20B91E560(a1, v10 - 32, a3, a4 & 1);
LABEL_39:
            a4 = 0;
            continue;
          }
          a2 = v10 - 32;
          if (v30)
            return;
          goto LABEL_2;
        }
        if ((a4 & 1) != 0)
        {
          if (a1 != a2)
          {
            v46 = (_QWORD *)(a1 + 32);
            if (a1 + 32 != a2)
            {
              v47 = 0;
              v48 = a1;
              do
              {
                v49 = v46;
                if ((sub_20B871BA8(v46, (void **)v48) & 0x80) != 0)
                {
                  v50 = *(_OWORD *)v49;
                  v105 = v49[2];
                  *(_OWORD *)__p = v50;
                  v49[1] = 0;
                  v49[2] = 0;
                  *v49 = 0;
                  v106 = *(_DWORD *)(v48 + 56);
                  v51 = v47;
                  while (1)
                  {
                    v52 = a1 + v51;
                    v53 = (void **)(a1 + v51 + 32);
                    if (*(char *)(a1 + v51 + 55) < 0)
                      operator delete(*v53);
                    *(_OWORD *)v53 = *(_OWORD *)v52;
                    *(_QWORD *)(a1 + v51 + 48) = *(_QWORD *)(v52 + 16);
                    *(_BYTE *)(v52 + 23) = 0;
                    *(_BYTE *)v52 = 0;
                    *(_DWORD *)(v52 + 56) = *(_DWORD *)(v52 + 24);
                    if (!v51)
                      break;
                    v51 -= 32;
                    if ((sub_20B871BA8(__p, (void **)(v51 + a1)) & 0x80) == 0)
                    {
                      v54 = a1 + v51 + 32;
                      goto LABEL_83;
                    }
                  }
                  v54 = a1;
LABEL_83:
                  if (*(char *)(v54 + 23) < 0)
                    operator delete(*(void **)v54);
                  v55 = *(_OWORD *)__p;
                  *(_QWORD *)(v54 + 16) = v105;
                  *(_OWORD *)v54 = v55;
                  *(_DWORD *)(v54 + 24) = v106;
                  a2 = (unint64_t)v102;
                }
                v46 = v49 + 4;
                v47 += 32;
                v48 = (uint64_t)v49;
              }
              while (v49 + 4 != (_QWORD *)a2);
            }
          }
        }
        else if (a1 != a2)
        {
          v90 = (_QWORD *)(a1 + 32);
          if (a1 + 32 != a2)
          {
            v91 = (_DWORD *)(a1 + 56);
            do
            {
              v92 = v90;
              if ((sub_20B871BA8(v90, (void **)a1) & 0x80) != 0)
              {
                v93 = *(_OWORD *)v92;
                v105 = v92[2];
                *(_OWORD *)__p = v93;
                v92[1] = 0;
                v92[2] = 0;
                *v92 = 0;
                v106 = *(_DWORD *)(a1 + 56);
                v94 = v91;
                do
                {
                  v95 = (void **)(v94 - 6);
                  if (*((char *)v94 - 1) < 0)
                    operator delete(*v95);
                  *(_OWORD *)v95 = *(_OWORD *)(v94 - 14);
                  *((_QWORD *)v94 - 1) = *((_QWORD *)v94 - 5);
                  *((_BYTE *)v94 - 33) = 0;
                  *((_BYTE *)v94 - 56) = 0;
                  v96 = v94 - 8;
                  *v94 = *(v94 - 8);
                  v97 = sub_20B871BA8(__p, (void **)v94 - 11);
                  v94 -= 8;
                }
                while (v97 < 0);
                v98 = (void **)(v96 - 6);
                if (*((char *)v96 - 1) < 0)
                  operator delete(*v98);
                v99 = *(_OWORD *)__p;
                *((_QWORD *)v96 - 1) = v105;
                *(_OWORD *)v98 = v99;
                HIBYTE(v105) = 0;
                LOBYTE(__p[0]) = 0;
                *v96 = v106;
                a2 = (unint64_t)v102;
              }
              v90 = v92 + 4;
              v91 += 8;
              a1 = (uint64_t)v92;
            }
            while (v92 + 4 != (_QWORD *)a2);
          }
        }
        return;
    }
  }
}

__n128 sub_20B91F08C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 result;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  sub_20B91F56C(a1, a2, a3, a4);
  if ((sub_20B871BA8((_QWORD *)a5, (void **)a4) & 0x80) != 0)
  {
    v11 = *(_QWORD *)(a4 + 16);
    v12 = *(_OWORD *)a4;
    v13 = *(_QWORD *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_QWORD *)(a4 + 16) = v13;
    *(_OWORD *)a5 = v12;
    *(_QWORD *)(a5 + 16) = v11;
    LODWORD(v11) = *(_DWORD *)(a4 + 24);
    *(_DWORD *)(a4 + 24) = *(_DWORD *)(a5 + 24);
    *(_DWORD *)(a5 + 24) = v11;
    if ((sub_20B871BA8((_QWORD *)a4, (void **)a3) & 0x80) != 0)
    {
      v14 = *(_QWORD *)(a3 + 16);
      v15 = *(_OWORD *)a3;
      v16 = *(_QWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_QWORD *)(a3 + 16) = v16;
      *(_OWORD *)a4 = v15;
      *(_QWORD *)(a4 + 16) = v14;
      LODWORD(v14) = *(_DWORD *)(a3 + 24);
      *(_DWORD *)(a3 + 24) = *(_DWORD *)(a4 + 24);
      *(_DWORD *)(a4 + 24) = v14;
      if ((sub_20B871BA8((_QWORD *)a3, (void **)a2) & 0x80) != 0)
      {
        v17 = *(_QWORD *)(a2 + 16);
        v18 = *(__n128 *)a2;
        v19 = *(_QWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_QWORD *)(a2 + 16) = v19;
        *(__n128 *)a3 = v18;
        *(_QWORD *)(a3 + 16) = v17;
        LODWORD(v17) = *(_DWORD *)(a2 + 24);
        *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
        *(_DWORD *)(a3 + 24) = v17;
        if ((sub_20B871BA8((_QWORD *)a2, (void **)a1) & 0x80) != 0)
        {
          v20 = *(_QWORD *)(a1 + 16);
          result = *(__n128 *)a1;
          v21 = *(_QWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_QWORD *)(a1 + 16) = v21;
          *(__n128 *)a2 = result;
          *(_QWORD *)(a2 + 16) = v20;
          LODWORD(v20) = *(_DWORD *)(a1 + 24);
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
          *(_DWORD *)(a2 + 24) = v20;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20B91F1D4(__int128 *a1, __int128 *a2, __int128 *a3)
{
  char v6;
  uint64_t result;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  int v23;

  v6 = sub_20B871BA8(a2, (void **)a1);
  result = sub_20B871BA8(a3, (void **)a2);
  if (v6 < 0)
  {
    if ((char)result < 0)
    {
      v15 = (int *)a1 + 6;
      v19 = *((_QWORD *)a1 + 2);
      v20 = *a1;
      v22 = *((_QWORD *)a3 + 2);
      *a1 = *a3;
      *((_QWORD *)a1 + 2) = v22;
    }
    else
    {
      v16 = *((_QWORD *)a1 + 2);
      v17 = *a1;
      v18 = *((_QWORD *)a2 + 2);
      *a1 = *a2;
      *((_QWORD *)a1 + 2) = v18;
      *a2 = v17;
      *((_QWORD *)a2 + 2) = v16;
      v15 = (int *)a2 + 6;
      LODWORD(v18) = *((_DWORD *)a1 + 6);
      *((_DWORD *)a1 + 6) = *((_DWORD *)a2 + 6);
      *((_DWORD *)a2 + 6) = v18;
      result = sub_20B871BA8(a3, (void **)a2);
      if ((result & 0x80) == 0)
        return result;
      v19 = *((_QWORD *)a2 + 2);
      v20 = *a2;
      v21 = *((_QWORD *)a3 + 2);
      *a2 = *a3;
      *((_QWORD *)a2 + 2) = v21;
    }
    *a3 = v20;
    *((_QWORD *)a3 + 2) = v19;
    v11 = (int *)a3 + 6;
    goto LABEL_10;
  }
  if ((char)result < 0)
  {
    v8 = *((_QWORD *)a2 + 2);
    v9 = *a2;
    v10 = *((_QWORD *)a3 + 2);
    *a2 = *a3;
    *((_QWORD *)a2 + 2) = v10;
    *a3 = v9;
    *((_QWORD *)a3 + 2) = v8;
    v11 = (int *)a2 + 6;
    LODWORD(v8) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = *((_DWORD *)a3 + 6);
    *((_DWORD *)a3 + 6) = v8;
    result = sub_20B871BA8(a2, (void **)a1);
    if ((result & 0x80) != 0)
    {
      v12 = *((_QWORD *)a1 + 2);
      v13 = *a1;
      v14 = *((_QWORD *)a2 + 2);
      *a1 = *a2;
      *((_QWORD *)a1 + 2) = v14;
      *a2 = v13;
      *((_QWORD *)a2 + 2) = v12;
      v15 = (int *)a1 + 6;
LABEL_10:
      v23 = *v15;
      *v15 = *v11;
      *v11 = v23;
    }
  }
  return result;
}

BOOL sub_20B91F340(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  _OWORD *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  char v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  int v21;

  v4 = (a2 - a1) >> 5;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (_OWORD *)(a2 - 32);
      if ((sub_20B871BA8((_QWORD *)(a2 - 32), (void **)a1) & 0x80) != 0)
      {
        v7 = *(_QWORD *)(a1 + 16);
        v8 = *(_OWORD *)a1;
        v9 = *(_QWORD *)(a2 - 16);
        *(_OWORD *)a1 = *v6;
        *(_QWORD *)(a1 + 16) = v9;
        *v6 = v8;
        *(_QWORD *)(a2 - 16) = v7;
        LODWORD(v7) = *(_DWORD *)(a1 + 24);
        *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 - 8);
        *(_DWORD *)(a2 - 8) = v7;
      }
      return 1;
    case 3:
      sub_20B91F1D4((__int128 *)a1, (__int128 *)(a1 + 32), (__int128 *)(a2 - 32));
      return 1;
    case 4:
      sub_20B91F56C(a1, a1 + 32, a1 + 64, a2 - 32);
      return 1;
    case 5:
      sub_20B91F08C(a1, a1 + 32, a1 + 64, a1 + 96, a2 - 32);
      return 1;
    default:
      v10 = (void **)(a1 + 64);
      sub_20B91F1D4((__int128 *)a1, (__int128 *)(a1 + 32), (__int128 *)(a1 + 64));
      v11 = a1 + 96;
      if (a1 + 96 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    if ((sub_20B871BA8((_QWORD *)v11, v10) & 0x80) != 0)
    {
      v19 = *(_OWORD *)v11;
      v20 = *(_QWORD *)(v11 + 16);
      *(_QWORD *)(v11 + 8) = 0;
      *(_QWORD *)(v11 + 16) = 0;
      *(_QWORD *)v11 = 0;
      v21 = *(_DWORD *)(v11 + 24);
      v14 = v12;
      while (1)
      {
        v15 = a1 + v14;
        v16 = (void **)(a1 + v14 + 96);
        if (*(char *)(a1 + v14 + 119) < 0)
          operator delete(*v16);
        *(_OWORD *)v16 = *(_OWORD *)(v15 + 64);
        *(_QWORD *)(a1 + v14 + 112) = *(_QWORD *)(v15 + 80);
        *(_BYTE *)(v15 + 87) = 0;
        *(_BYTE *)(v15 + 64) = 0;
        *(_DWORD *)(v15 + 120) = *(_DWORD *)(v15 + 88);
        if (v14 == -64)
          break;
        v17 = sub_20B871BA8(&v19, (void **)(a1 + v14 + 32));
        v14 -= 32;
        if ((v17 & 0x80) == 0)
        {
          v18 = a1 + v14 + 96;
          goto LABEL_14;
        }
      }
      v18 = a1;
LABEL_14:
      if (*(char *)(v18 + 23) < 0)
        operator delete(*(void **)v18);
      *(_OWORD *)v18 = v19;
      *(_QWORD *)(v18 + 16) = v20;
      HIBYTE(v20) = 0;
      LOBYTE(v19) = 0;
      *(_DWORD *)(v18 + 24) = v21;
      if (++v13 == 8)
        return v11 + 32 == a2;
    }
    v10 = (void **)v11;
    v12 += 32;
    v11 += 32;
    if (v11 == a2)
      return 1;
  }
}

__n128 sub_20B91F56C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  sub_20B91F1D4((__int128 *)a1, (__int128 *)a2, (__int128 *)a3);
  if ((sub_20B871BA8((_QWORD *)a4, (void **)a3) & 0x80) != 0)
  {
    v9 = *(_QWORD *)(a3 + 16);
    v10 = *(_OWORD *)a3;
    v11 = *(_QWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_QWORD *)(a3 + 16) = v11;
    *(_OWORD *)a4 = v10;
    *(_QWORD *)(a4 + 16) = v9;
    LODWORD(v9) = *(_DWORD *)(a3 + 24);
    *(_DWORD *)(a3 + 24) = *(_DWORD *)(a4 + 24);
    *(_DWORD *)(a4 + 24) = v9;
    if ((sub_20B871BA8((_QWORD *)a3, (void **)a2) & 0x80) != 0)
    {
      v12 = *(_QWORD *)(a2 + 16);
      v13 = *(_OWORD *)a2;
      v14 = *(_QWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_QWORD *)(a2 + 16) = v14;
      *(_OWORD *)a3 = v13;
      *(_QWORD *)(a3 + 16) = v12;
      LODWORD(v12) = *(_DWORD *)(a2 + 24);
      *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
      *(_DWORD *)(a3 + 24) = v12;
      if ((sub_20B871BA8((_QWORD *)a2, (void **)a1) & 0x80) != 0)
      {
        v15 = *(_QWORD *)(a1 + 16);
        result = *(__n128 *)a1;
        v16 = *(_QWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = v16;
        *(__n128 *)a2 = result;
        *(_QWORD *)(a2 + 16) = v15;
        LODWORD(v15) = *(_DWORD *)(a1 + 24);
        *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
        *(_DWORD *)(a2 + 24) = v15;
      }
    }
  }
  return result;
}

uint64_t *sub_20B91F668(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t *v4;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  a1[1] = 0;
  v4 = a1 + 1;
  a1[2] = 0;
  *a1 = (uint64_t)(a1 + 1);
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_20B91F714(a1, v4, *((_DWORD *)v6 + 7), *((_DWORD *)v6 + 7));
      v7 = (_QWORD *)v6[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v6[2];
          v9 = *v8 == (_QWORD)v6;
          v6 = v8;
        }
        while (!v9);
      }
      v6 = v8;
    }
    while (v8 != a3);
  }
  return a1;
}

void sub_20B91F6FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B8292CC(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_20B91F714(uint64_t *result, uint64_t *a2, int a3, int a4)
{
  uint64_t **v5;
  uint64_t **v6;
  uint64_t **v7;
  int v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t **v13;
  uint64_t **v14;
  uint64_t *v15;
  BOOL v16;
  uint64_t **v17;
  uint64_t *v18;
  int v19;
  uint64_t *v20;
  uint64_t *v21;
  int v22;
  uint64_t *v23;

  v5 = (uint64_t **)a2;
  v6 = (uint64_t **)result;
  v7 = (uint64_t **)(result + 1);
  if (result + 1 == a2 || (v8 = *((_DWORD *)a2 + 7), v8 > a3))
  {
    v9 = (uint64_t *)*a2;
    if ((uint64_t *)*result == a2)
    {
      v11 = a2;
LABEL_16:
      if (v9)
        v17 = (uint64_t **)v11;
      else
        v17 = (uint64_t **)a2;
      if (v9)
        v13 = (uint64_t **)(v11 + 1);
      else
        v13 = (uint64_t **)a2;
      if (*v13)
        return result;
      v5 = v17;
LABEL_43:
      v23 = (uint64_t *)operator new(0x20uLL);
      *((_DWORD *)v23 + 7) = a4;
      return sub_20B8296A0(v6, (uint64_t)v5, v13, v23);
    }
    if (v9)
    {
      v10 = (uint64_t *)*a2;
      do
      {
        v11 = v10;
        v10 = (uint64_t *)v10[1];
      }
      while (v10);
    }
    else
    {
      v15 = a2;
      do
      {
        v11 = (uint64_t *)v15[2];
        v16 = *v11 == (_QWORD)v15;
        v15 = v11;
      }
      while (v16);
    }
    if (*((_DWORD *)v11 + 7) < a3)
      goto LABEL_16;
    v18 = *v7;
    v13 = (uint64_t **)(result + 1);
    v5 = (uint64_t **)(result + 1);
    if (!*v7)
      goto LABEL_43;
    while (1)
    {
      while (1)
      {
        v5 = (uint64_t **)v18;
        v19 = *((_DWORD *)v18 + 7);
        if (v19 <= a3)
          break;
        v18 = (uint64_t *)*v18;
        v13 = v5;
        if (!*v5)
          goto LABEL_43;
      }
      if (v19 >= a3)
        break;
      v18 = (uint64_t *)v18[1];
      if (!v18)
        goto LABEL_30;
    }
  }
  else
  {
    if (v8 >= a3)
      return result;
    v13 = (uint64_t **)(a2 + 1);
    v12 = (uint64_t *)a2[1];
    if (v12)
    {
      do
      {
        v13 = (uint64_t **)v12;
        v12 = (uint64_t *)*v12;
        v5 = v13;
        v14 = v13;
      }
      while (v12);
    }
    else
    {
      v14 = (uint64_t **)a2;
      do
      {
        v20 = (uint64_t *)v14;
        v14 = (uint64_t **)v14[2];
      }
      while (*v14 != v20);
    }
    if (v14 == v7)
      goto LABEL_43;
    if (*((_DWORD *)v14 + 7) > a3)
      goto LABEL_43;
    v21 = *v7;
    v13 = (uint64_t **)(result + 1);
    v5 = (uint64_t **)(result + 1);
    if (!*v7)
      goto LABEL_43;
    while (1)
    {
      while (1)
      {
        v5 = (uint64_t **)v21;
        v22 = *((_DWORD *)v21 + 7);
        if (v22 <= a3)
          break;
        v21 = (uint64_t *)*v21;
        v13 = v5;
        if (!*v5)
          goto LABEL_43;
      }
      if (v22 >= a3)
        break;
      v21 = (uint64_t *)v21[1];
      if (!v21)
      {
LABEL_30:
        v13 = v5 + 1;
        goto LABEL_43;
      }
    }
  }
  return result;
}

void sub_20B91F8D0(uint64_t a1)
{
  char *v2;
  uint64_t v3;

  if (!*(_BYTE *)(a1 + 20))
    __assert_rtn("init", "BurstTrieAdapter.h", 280, "m_mutable");
  v2 = *(char **)(a1 + 8);
  if (v2)
    sub_20B86821C(v2);
  sub_20B8681A8(*(_DWORD *)(a1 + 16), 0);
  *(_QWORD *)(a1 + 8) = v3;
  if (!v3)
    __assert_rtn("init", "BurstTrieAdapter.h", 285, "m_trie");
}

BOOL sub_20B91F954(uint64_t a1, const void *a2, uint64_t a3, _DWORD *a4)
{
  _BOOL8 result;

  result = 0;
  if (a3)
  {
    if ((a3 & 1) == 0)
      return sub_20B869290(*(_QWORD **)(a1 + 8), a2, a3, a4, 0) != 0;
  }
  return result;
}

void sub_20B91F988(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  _DWORD *v7;
  __n128 v8;
  unint64_t v9;
  int v10;
  int v11;
  char v12;

  if (a2 && a3 && (a3 & 1) == 0)
  {
    v12 = 0;
    v7 = sub_20B869658(*(_QWORD *)(a1 + 8), 0, 0);
    v9 = 0;
    v11 = 0;
    do
    {
      sub_20B86A5C8((uint64_t)v7, (unsigned __int8 *)(a2 + v9), 2u, v8);
      if (!v10)
        break;
      if (sub_20B86B4BC(v7, &v11))
      {
        sub_20B8F8990(a4, (uint64_t)&v11, a2, v9 + 2);
        if (v12)
          break;
      }
      v9 = (int)v9 + 2;
    }
    while (v9 < a3);
    sub_20B86989C(v7);
  }
}

_QWORD *sub_20B91FA4C(_QWORD *result, unsigned __int8 *a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a3 && (a3 & 1) == 0)
  {
    v5 = (_QWORD *)result[1];
    v7[0] = &off_24C49CD10;
    v7[1] = a4;
    v8 = v7;
    sub_20B868298(v5, a2, a3, 0, (uint64_t)v7, 2 * a5);
    result = v8;
    if (v8 == v7)
    {
      v6 = 4;
      result = v7;
    }
    else
    {
      if (!v8)
        return result;
      v6 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
  }
  return result;
}

void sub_20B91FAF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_20B91FB30(uint64_t a1@<X0>, void ***a2@<X8>)
{
  uint64_t v3;
  void **v4;
  void *v5;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = (void **)operator new();
  *v4 = 0;
  v5 = sub_20B869658(v3, 0, 0);
  if (*v4)
    sub_20B86989C(*v4);
  *v4 = v5;
  *a2 = v4;
}

void sub_20B91FBA0(_Unwind_Exception *a1)
{
  void **v1;
  void **v3;

  v3 = sub_20B8F8AB8(v1);
  MEMORY[0x20BD39CB0](v3, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

BOOL sub_20B91FBC8(uint64_t a1, _QWORD *a2)
{
  return *a2 != 0;
}

void sub_20B91FBD8(_QWORD **a1@<X1>, unsigned __int8 *a2@<X2>, unsigned int a3@<W3>, void ***a4@<X8>)
{
  void **v8;
  _QWORD *v9;
  __n128 v10;
  int v11;
  void **v12;

  v8 = (void **)operator new();
  v9 = sub_20B86B430(*a1);
  *v8 = v9;
  sub_20B86A5C8((uint64_t)v9, a2, a3, v10);
  if (!v11)
  {
    v12 = (void **)operator new();
    *v12 = 0;
    *a4 = v12;
    sub_20B8F8AB8(v8);
    JUMPOUT(0x20BD39CB0);
  }
  *a4 = v8;
}

void sub_20B91FCA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

uint64_t sub_20B91FCE0(uint64_t a1, _DWORD **a2, _DWORD *a3)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  if ((_DWORD)result)
    return sub_20B86B4BC(*a2, a3) != 0;
  return result;
}

_QWORD *sub_20B91FD24(uint64_t a1, _BYTE **a2, uint64_t a3, int a4)
{
  _BYTE *v4;
  _QWORD *result;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  v7[0] = &off_24C49CD90;
  v7[1] = a3;
  v8 = v7;
  sub_20B8696C8(v4, 0, (uint64_t)v7, 2 * a4);
  result = v8;
  if (v8 == v7)
  {
    v6 = 4;
    result = v7;
  }
  else
  {
    if (!v8)
      return result;
    v6 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

void sub_20B91FDC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_20B91FE04(uint64_t a1)
{
  sub_20B92011C(a1);
  JUMPOUT(0x20BD39CB0);
}

BOOL sub_20B91FE28(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  _BOOL8 result;

  if (!*(_BYTE *)(a1 + 20))
    __assert_rtn("addEntry", "BurstTrieAdapter.h", 117, "m_mutable");
  if (!a2)
    return 0;
  result = 0;
  if (a3)
  {
    if ((a3 & 1) == 0)
      return sub_20B867E54(*(_QWORD *)(a1 + 8), a2, a3, *a4);
  }
  return result;
}

BOOL sub_20B91FE90(uint64_t a1, char *a2, int a3)
{
  if (!*(_BYTE *)(a1 + 20))
    __assert_rtn("removeEntry", "BurstTrieAdapter.h", 126, "m_mutable");
  return sub_20B868788(*(_DWORD **)(a1 + 8), a2, a3) != 0;
}

void sub_20B91FED8(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 20))
    __assert_rtn("clear", "BurstTrieAdapter.h", 133, "m_mutable");
  sub_20B91F8D0(a1);
}

void sub_20B91FF14()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B91FF28(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C49CD10;
  result[1] = v3;
  return result;
}

uint64_t sub_20B91FF5C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C49CD10;
  a2[1] = v2;
  return result;
}

uint64_t sub_20B91FF78(uint64_t result, uint64_t a2, uint64_t *a3, _BYTE **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  int v8;

  if (!**a4)
  {
    v4 = *a3;
    v5 = *(_QWORD *)(result + 8);
    v8 = sub_20B86801C(*a3);
    v6 = sub_20B868000(v4);
    v7 = sub_20B868010(v4);
    return sub_20B8F8990(v5, (uint64_t)&v8, v6, v7);
  }
  return result;
}

uint64_t sub_20B91FFEC(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C49CD70))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B920028()
{
  return &unk_24C49CD70;
}

void sub_20B920038()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B92004C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C49CD90;
  result[1] = v3;
  return result;
}

uint64_t sub_20B920080(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C49CD90;
  a2[1] = v2;
  return result;
}

uint64_t sub_20B92009C(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int *a4, int *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;

  v5 = *a3;
  v6 = *a4;
  v7 = *(_QWORD *)(a1 + 8);
  v9 = *a5;
  return sub_20B8F8990(v7, (uint64_t)&v9, v5, v6);
}

uint64_t sub_20B9200D4(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C49CDF0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B920110()
{
  return &unk_24C49CDF0;
}

uint64_t sub_20B92011C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C49CC58;
  sub_20B86821C(*(char **)(a1 + 8));
  return a1;
}

uint64_t sub_20B920154(uint64_t a1)
{
  return (***(uint64_t (****)(_QWORD))(a1 + 24))(*(_QWORD *)(a1 + 24));
}

uint64_t sub_20B920164(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 8))(*(_QWORD *)(a1 + 24));
}

uint64_t sub_20B920174(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
}

uint64_t sub_20B920184(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 24))(*(_QWORD *)(a1 + 24));
}

uint64_t sub_20B920194(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_24C49CF00;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
  return sub_20B92011C((uint64_t)a1);
}

void sub_20B9201D8(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_24C49CF00;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
  sub_20B92011C((uint64_t)a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B920230(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 80))(*(_QWORD *)(a1 + 24));
}

uint64_t sub_20B920240(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 88))(*(_QWORD *)(a1 + 24));
}

uint64_t sub_20B920250(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 96))(*(_QWORD *)(a1 + 24));
}

_QWORD *sub_20B920260(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  return sub_20B92040C(a1, a2, a3, 1u);
}

_QWORD *sub_20B920268(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  return sub_20B9204E0(a1, a2, a3, 1u, 0);
}

_QWORD *sub_20B920274(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  return sub_20B92040C(a1, a2, a3, 0);
}

_QWORD *sub_20B92027C(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  return sub_20B9204E0(a1, a2, a3, 0, 0);
}

_QWORD *sub_20B920288(_BYTE *a1, uint64_t a2, uint64_t a3, int a4)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v6[0] = &off_24C49D128;
  v6[1] = a3;
  v7 = v6;
  sub_20B91E12C(a1, a2, 0, (uint64_t)v6, a4);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_20B920324(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B920360(_BYTE *a1, uint64_t a2, uint64_t a3, int a4)
{
  return sub_20B91E12C(a1, a2, 0, a3, a4);
}

uint64_t sub_20B920370(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_24C49CF00;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
  return sub_20B92011C((uint64_t)a1);
}

void sub_20B9203B4(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_24C49CF00;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
  sub_20B92011C((uint64_t)a1);
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B92040C(_BYTE *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v6[0] = &off_24C49D0A8;
  v6[1] = a3;
  v7 = v6;
  sub_20B9204E0(a1, a2, (uint64_t)v6, a4, 0);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_20B9204A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B9204E0(_BYTE *a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  uint64_t (*v10)(_QWORD);
  uint64_t (*v11)(_QWORD);
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void **v17;
  void **v18;
  _QWORD *result;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  void **v23;
  char v24;
  _BYTE v25[24];
  _BYTE *v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v10 = off_254729D00;
  if ((*(_BYTE *)off_254729D00(&off_254729D00) & 1) == 0)
  {
    v21 = (_QWORD *)off_254729CE8(&off_254729CE8);
    sub_20B8F98E4(v21, 256);
    _tlv_atexit((void (__cdecl *)(void *))sub_20B8F936C, v21);
    *(_BYTE *)v10(&off_254729D00) = 1;
  }
  v11 = off_254729D30;
  if ((*(_BYTE *)off_254729D30(&off_254729D30) & 1) == 0)
  {
    v22 = (_QWORD *)off_254729D18(&off_254729D18);
    sub_20B8B3DF8(v22, 0x100uLL);
    _tlv_atexit((void (__cdecl *)(void *))sub_20B8F939C, v22);
    *(_BYTE *)v11(&off_254729D30) = 1;
  }
  v24 = 0;
  v12 = operator new(0x20uLL);
  *v12 = &off_24C49D028;
  v12[1] = a1;
  v12[2] = a3;
  *((_DWORD *)v12 + 6) = a5;
  v26 = v12;
  (*(void (**)(void ***__return_ptr, _BYTE *))(*(_QWORD *)a1 + 24))(&v23, a1);
  off_254729CE8(&off_254729CE8);
  v13 = (uint64_t *)off_254729D18(&off_254729D18);
  sub_20B920770(a1, a2, (uint64_t)v25, v14, a4, 0, 0, &v24, 0.0, v15, 0, v16, *v13, 0, -1, 0, 0);
  v17 = v23;
  v23 = 0;
  if (v17)
  {
    v18 = sub_20B8F8AB8(v17);
    MEMORY[0x20BD39CB0](v18, 0x20C4093837F09);
  }
  result = v26;
  if (v26 == v25)
  {
    v20 = 4;
    result = v25;
  }
  else
  {
    if (!v26)
      return result;
    v20 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v20))();
}

void sub_20B920720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char *a23)
{
  char *v24;
  uint64_t v25;

  sub_20B8F8A7C(&a18, 0);
  v24 = a23;
  if (a23 == &a20)
  {
    v25 = 4;
    v24 = &a20;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v25 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
LABEL_6:
  _Unwind_Resume(a1);
}

_BYTE *sub_20B920770(_BYTE *result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned __int8 a7, _BYTE *a8, float a9, uint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v26;
  _BYTE *v27;
  unint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int16 *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  float v42;
  void **v43;
  _BYTE *v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  float v48;
  void **v49;
  int v50;
  char v51;
  _BYTE *v55;
  _BYTE *v56;
  unint64_t v57;
  double v58;
  unint64_t v59;
  unsigned __int8 v60;
  _BYTE v61[24];
  _BYTE *v62;
  uint64_t v63;

  v55 = result;
  v18 = a13;
  v17 = a14;
  v19 = a10;
  v20 = a11;
  v63 = *MEMORY[0x24BDAC8D0];
  v60 = a7;
  if (*a8)
    return result;
  if (((*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)result + 3) + 32))(*((_QWORD *)result + 3), a4) & 1) == 0)
    __assert_rtn("ambiguousDfsTraverse", "AmbiguousTrieAdapter.hpp", 137, "m_trie->isValid(curCursor)");
  v26 = a12;
  if (a5 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) != v26)
    goto LABEL_10;
  LODWORD(v59) = 0;
  if ((a7 & 1) == 0)
  {
    result = (_BYTE *)(*(uint64_t (**)(_QWORD, uint64_t, unint64_t *))(**((_QWORD **)v55 + 3) + 48))(*((_QWORD *)v55 + 3), a4, &v59);
    if (!(_DWORD)result)
      goto LABEL_9;
    v19 = a10;
    v20 = a11;
    v18 = a13;
    v17 = a14;
  }
  result = (_BYTE *)sub_20B920C98(*(_QWORD *)(a3 + 24), a4, v19, 2 * v20, v18, v17, v26, (uint64_t)a8, a9);
LABEL_9:
  if (*a8)
    return result;
LABEL_10:
  result = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  if ((unint64_t)result <= v26)
    return result;
  result = (_BYTE *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)a2 + 16))(a2, v26);
  v27 = result;
  v59 = 0;
  if (!result)
    return result;
  v28 = 0;
  v51 = a17;
  v29 = a9;
  v30 = a15;
  v31 = a16;
  while (1)
  {
    result = (_BYTE *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t, unint64_t))(*(_QWORD *)a2 + 72))(a2, v30, v31, v26, v28);
    if (!(_DWORD)result)
      goto LABEL_32;
    v58 = 0.0;
    v58 = (*(double (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)a2 + 32))(a2, v26, v59)
        + v29;
    v57 = 0;
    v57 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)a2 + 40))(a2, v26, v59)
        + v26;
    result = (_BYTE *)(*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)a2 + 48))(a2, v26, v59);
    v33 = (__int16 *)result;
    v34 = v32;
    v35 = v57;
    if (v57 == v26 && (v51 & 1) != 0)
      goto LABEL_32;
    if (!v32)
    {
      v48 = v58;
      LOBYTE(v50) = v57 == v26;
      result = (_BYTE *)sub_20B920770(v55, a2, a3, a4, a5, a6, v60, a8, v48, a10, a11, v57, a13, a14, v30, v31, v50);
      goto LABEL_32;
    }
    (*(void (**)(_BYTE **__return_ptr, _QWORD, uint64_t, _BYTE *, uint64_t))(**((_QWORD **)v55 + 3) + 40))(&v56, *((_QWORD *)v55 + 3), a4, result, 2 * v32);
    if ((*(unsigned int (**)(_QWORD, _BYTE *))(**((_QWORD **)v55 + 3) + 32))(*((_QWORD *)v55 + 3), v56))
    {
      v36 = a10;
      v37 = a11;
      v38 = 2 * a11;
      v39 = v34;
      do
      {
        v40 = *v33++;
        *(_WORD *)(v36 + v38) = v40;
        v38 += 2;
        --v39;
      }
      while (v39);
      v41 = a13;
      if (a13)
      {
        *(_QWORD *)(a13 + 8 * a14) = v59;
        v37 = a11;
      }
      v42 = v58;
      LOBYTE(v50) = v35 == v26;
      sub_20B920770(v55, a2, a3, v56, a5, a6, v60, a8, v42, v36, v37 + v34, v57, v41, a14 + 1, v26, v59, v50);
      if (*a8)
        break;
    }
    result = v56;
    v56 = 0;
    if (result)
    {
      v43 = sub_20B8F8AB8((void **)result);
      result = (_BYTE *)MEMORY[0x20BD39CB0](v43, 0x20C4093837F09);
    }
    if ((a6 & 1) == 0)
      goto LABEL_32;
    v44 = (_BYTE *)v57;
    result = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    if (v44 != result)
      goto LABEL_32;
    result = (_BYTE *)(*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)a2 + 56))(a2, v26, v59);
    if (!(_DWORD)result)
      goto LABEL_32;
    v45 = v59;
    v46 = operator new(0x68uLL);
    *v46 = &off_24C49CFA8;
    v46[1] = v55;
    v46[2] = a4;
    v46[3] = &a10;
    v46[4] = &a11;
    v46[5] = &a13;
    v46[6] = &a14;
    v46[7] = &v59;
    v46[8] = &v60;
    v46[9] = a3;
    v46[10] = &v58;
    v46[11] = &v57;
    v46[12] = a8;
    v62 = v46;
    (*(void (**)(uint64_t, unint64_t, unint64_t, _BYTE *))(*(_QWORD *)a2 + 64))(a2, v26, v45, v61);
    result = v62;
    if (v62 == v61)
    {
      result = v61;
      v47 = 4;
      goto LABEL_35;
    }
    if (v62)
    {
      v47 = 5;
LABEL_35:
      result = (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v47))();
    }
LABEL_32:
    v28 = v59 + 1;
    v59 = v28;
    if (v28 >= (unint64_t)v27)
      return result;
  }
  result = v56;
  v56 = 0;
  if (result)
  {
    v49 = sub_20B8F8AB8((void **)result);
    return (_BYTE *)MEMORY[0x20BD39CB0](v49, 0x20C4093837F09);
  }
  return result;
}

void sub_20B920C40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char *a30)
{
  char *v31;
  uint64_t v32;

  v31 = a30;
  if (a30 == &a27)
  {
    v32 = 4;
    v31 = &a27;
  }
  else
  {
    if (!a30)
      goto LABEL_6;
    v32 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v31 + 8 * v32))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B920C98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;

  v15 = a9;
  v13 = a4;
  v14 = a3;
  v11 = a6;
  v12 = a5;
  v10 = a7;
  if (!a1)
    sub_20B80BB74();
  return (*(uint64_t (**)(uint64_t, uint64_t, float *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)a1 + 48))(a1, a2, &v15, &v14, &v13, &v12, &v11, &v10, a8);
}

void sub_20B920CF4()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B920D08(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x68uLL);
  *(_QWORD *)v2 = &off_24C49CFA8;
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_20B920D68(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a2 = &off_24C49CFA8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  result = *(__n128 *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  v5 = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 72) = v5;
  *(_OWORD *)(a2 + 56) = v4;
  *(__n128 *)(a2 + 40) = result;
  return result;
}

void **sub_20B920DB0(uint64_t a1, __int16 **a2, _BYTE *a3)
{
  __int16 *v5;
  __int16 *v6;
  uint64_t v7;
  _WORD *v8;
  __int16 *v9;
  __int16 v10;
  uint64_t v11;
  float v12;
  void **result;
  void **v14;
  int v15;
  void **v16;

  v5 = *a2;
  v6 = a2[1];
  v7 = *(_QWORD *)(a1 + 8);
  (*(void (**)(void ***__return_ptr, _QWORD, _QWORD, __int16 *, uint64_t))(**(_QWORD **)(v7 + 24) + 40))(&v16, *(_QWORD *)(v7 + 24), *(_QWORD *)(a1 + 16), *a2, 2 * (_QWORD)v6);
  if (!(*(unsigned int (**)(_QWORD, void **))(**(_QWORD **)(v7 + 24) + 32))(*(_QWORD *)(v7 + 24), v16))
    goto LABEL_13;
  if (v6)
  {
    v8 = (_WORD *)(**(_QWORD **)(a1 + 24) + 2 * **(_QWORD **)(a1 + 32));
    v9 = v6;
    do
    {
      v10 = *v5++;
      *v8++ = v10;
      v9 = (__int16 *)((char *)v9 - 1);
    }
    while (v9);
  }
  v11 = **(_QWORD **)(a1 + 40);
  if (v11)
    *(_QWORD *)(v11 + 8 * **(_QWORD **)(a1 + 48)) = **(_QWORD **)(a1 + 56);
  v15 = 0;
  if (!**(_BYTE **)(a1 + 64))
  {
    if (!(*(unsigned int (**)(_QWORD, void **, int *))(**(_QWORD **)(v7 + 24) + 48))(*(_QWORD *)(v7 + 24), v16, &v15))goto LABEL_11;
    v11 = **(_QWORD **)(a1 + 40);
  }
  v12 = **(double **)(a1 + 80);
  sub_20B920C98(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 24), (uint64_t)v16, **(_QWORD **)(a1 + 24), 2 * ((_QWORD)v6 + **(_QWORD **)(a1 + 32)), v11, **(_QWORD **)(a1 + 48) + 1, **(_QWORD **)(a1 + 88), *(_QWORD *)(a1 + 96), v12);
LABEL_11:
  if (**(_BYTE **)(a1 + 96))
    *a3 = 1;
LABEL_13:
  result = v16;
  v16 = 0;
  if (result)
  {
    v14 = sub_20B8F8AB8(result);
    return (void **)MEMORY[0x20BD39CB0](v14, 0x20C4093837F09);
  }
  return result;
}

void sub_20B920F14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10)
{
  void **v11;

  if (a10)
  {
    v11 = sub_20B8F8AB8(a10);
    MEMORY[0x20BD39CB0](v11, 0x20C4093837F09);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B920F48(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C49D008))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B920F84()
{
  return &unk_24C49D008;
}

void sub_20B920F94()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B920FA8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24C49D028;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_20B920FE8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C49D028;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20B921010(uint64_t a1, uint64_t a2, int *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD v17[2];

  v9 = *a3;
  v10 = *a4;
  v11 = *a5;
  v12 = *a6;
  v13 = *a7;
  v14 = *a8;
  v15 = *(_QWORD *)(a1 + 8);
  v17[0] = 0;
  v17[1] = v9;
  (*(void (**)(_QWORD, uint64_t, _DWORD *))(**(_QWORD **)(v15 + 24) + 48))(*(_QWORD *)(v15 + 24), a2, v17);
  return sub_20B8F9E0C(*(_QWORD *)(a1 + 16), (uint64_t)v17, v10, v11, v12, v13, v14 - *(int *)(a1 + 24));
}

uint64_t sub_20B9210B0(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C49D088))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B9210EC()
{
  return &unk_24C49D088;
}

void sub_20B9210FC()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B921110(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C49D0A8;
  result[1] = v3;
  return result;
}

uint64_t sub_20B921144(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C49D0A8;
  a2[1] = v2;
  return result;
}

uint64_t sub_20B921160(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  return sub_20B8FA000(*(_QWORD *)(a1 + 8), a2, *a3, *a4, *a7);
}

uint64_t sub_20B921178(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C49D108))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B9211B4()
{
  return &unk_24C49D108;
}

void sub_20B9211C4()
{
  JUMPOUT(0x20BD39CB0);
}

_QWORD *sub_20B9211D8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C49D128;
  result[1] = v3;
  return result;
}

uint64_t sub_20B92120C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C49D128;
  a2[1] = v2;
  return result;
}

uint64_t sub_20B921228(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  return sub_20B8FA000(*(_QWORD *)(a1 + 8), a2, *a3, *a4, *a7);
}

uint64_t sub_20B921240(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C49D188))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B92127C()
{
  return &unk_24C49D188;
}

uint64_t *sub_20B921288(uint64_t *a1, int *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  a1[1] = 0;
  v4 = a1 + 1;
  a1[2] = 0;
  *a1 = (uint64_t)(a1 + 1);
  if (a3)
  {
    v6 = 4 * a3;
    do
    {
      sub_20B91F714(a1, v4, *a2, *a2);
      ++a2;
      v6 -= 4;
    }
    while (v6);
  }
  return a1;
}

void sub_20B9212EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B8292CC(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_20B921304(uint64_t *result, int a2, int a3)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  int v8;
  uint64_t *v9;

  v4 = (uint64_t **)result;
  v6 = (uint64_t **)(result + 1);
  v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = (uint64_t **)(result + 1);
LABEL_9:
    v9 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v9 + 7) = a3;
    return sub_20B8296A0(v4, (uint64_t)v7, v6, v9);
  }
  return result;
}

void sub_20B9213A0()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B9213B4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C46ADF0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20B9213EC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C46ADF0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20B92140C(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, _BYTE *a6)
{
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  NSObject *v17;
  __int16 v18[8];

  v6 = *a2;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) - v7) >> 3) <= v6)
  {
    v17 = sub_20B9A7C5C(6u);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      v18[0] = 0;
      _os_log_error_impl(&dword_20B7F7000, v17, OS_LOG_TYPE_ERROR, "Data in learning dictionary trie is corrupted.", (uint8_t *)v18, 2u);
    }
  }
  else
  {
    v8 = (_QWORD *)(v7 + 24 * v6);
    v11 = (_QWORD *)*v8;
    v9 = v8 + 1;
    v10 = v11;
    if (v11 != v9)
    {
      do
      {
        (*(void (**)(void))(**(_QWORD **)(a1 + 16) + 16))();
        if (*a6)
          break;
        v14 = (_QWORD *)v10[1];
        if (v14)
        {
          do
          {
            v15 = v14;
            v14 = (_QWORD *)*v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            v15 = (_QWORD *)v10[2];
            v16 = *v15 == (_QWORD)v10;
            v10 = v15;
          }
          while (!v16);
        }
        v10 = v15;
      }
      while (v15 != v9);
    }
  }
}

uint64_t sub_20B921518(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45F040))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B921554()
{
  return &unk_24C45F040;
}

void sub_20B921564()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B921578(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C46AE48;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20B9215B0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C46AE48;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20B9215D0(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;

  if (!*a5)
  {
    v5 = result;
    v6 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 8) + 16) + 24 * *a2);
    v9 = (_QWORD *)*v6;
    v7 = v6 + 1;
    v8 = v9;
    if (v9 != v7)
    {
      do
      {
        result = (*(uint64_t (**)(void))(**(_QWORD **)(v5 + 16) + 16))();
        if (*a5)
          break;
        v11 = (_QWORD *)v8[1];
        if (v11)
        {
          do
          {
            v12 = v11;
            v11 = (_QWORD *)*v11;
          }
          while (v11);
        }
        else
        {
          do
          {
            v12 = (_QWORD *)v8[2];
            v13 = *v12 == (_QWORD)v8;
            v8 = v12;
          }
          while (!v13);
        }
        v8 = v12;
      }
      while (v12 != v7);
    }
  }
  return result;
}

uint64_t sub_20B92167C(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45F050))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B9216B8()
{
  return &unk_24C45F050;
}

void sub_20B9216C8()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B9216DC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C46AD98;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20B921714(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C46AD98;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *sub_20B921734(uint64_t a1, uint64_t a2, const void **a3, size_t *a4)
{
  memcpy(*(void **)(a1 + 16), *a3, *a4);
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD **)(a1 + 8));
}

uint64_t sub_20B92178C(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C45F030))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B9217C8()
{
  return &unk_24C45F030;
}

void sub_20B9217D8()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B9217EC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C49D1A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20B921824(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C49D1A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20B921844(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, _BYTE *a6)
{
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;
  NSObject *v21;
  __int16 v22[8];

  v6 = *a2;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) - v7) >> 3) <= v6)
  {
    v21 = sub_20B9A7C5C(6u);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      v22[0] = 0;
      _os_log_error_impl(&dword_20B7F7000, v21, OS_LOG_TYPE_ERROR, "Data in learning dictionary trie is corrupted.", (uint8_t *)v22, 2u);
    }
  }
  else
  {
    v8 = (_QWORD *)(v7 + 24 * v6);
    v11 = (_QWORD *)*v8;
    v9 = v8 + 1;
    v10 = v11;
    if (v11 != v9)
    {
      v15 = *a3;
      v16 = *a4;
      v17 = *a5;
      do
      {
        sub_20B9219C4(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24), *((_DWORD *)v10 + 7), (uint64_t)a2, v15, v16, v17);
        if (*a6)
          break;
        v18 = (_QWORD *)v10[1];
        if (v18)
        {
          do
          {
            v19 = v18;
            v18 = (_QWORD *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            v19 = (_QWORD *)v10[2];
            v20 = *v19 == (_QWORD)v10;
            v10 = v19;
          }
          while (!v20);
        }
        v10 = v19;
      }
      while (v19 != v9);
    }
  }
}

uint64_t sub_20B92197C(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C49D208))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B9219B8()
{
  return &unk_24C49D208;
}

uint64_t sub_20B9219C4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  v10 = a2;
  v8 = a5;
  v9 = a4;
  v7 = a6;
  if (!a1)
    sub_20B80BB74();
  return (*(uint64_t (**)(uint64_t, int *, uint64_t, uint64_t *, uint64_t *, uint64_t *))(*(_QWORD *)a1 + 48))(a1, &v10, a3, &v9, &v8, &v7);
}

void sub_20B921A10()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B921A24(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C49D228;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20B921A5C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C49D228;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20B921A7C(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, _BYTE *a8)
{
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  BOOL v24;
  NSObject *v25;
  uint8_t buf[16];

  v8 = *a2;
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) - v9) >> 3) <= v8)
  {
    v25 = sub_20B9A7C5C(6u);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_20B7F7000, v25, OS_LOG_TYPE_ERROR, "Data in learning dictionary trie is corrupted.", buf, 2u);
    }
  }
  else
  {
    v10 = (_QWORD *)(v9 + 24 * v8);
    v13 = (_QWORD *)*v10;
    v11 = v10 + 1;
    v12 = v13;
    if (v13 != v11)
    {
      v17 = *a3;
      v18 = *a4;
      v19 = *a5;
      v20 = *a6;
      v21 = *a7;
      do
      {
        sub_20B921C14(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24), *((_DWORD *)v12 + 7), (uint64_t)a2, v17, v18, v19, v20, v21, (uint64_t)a8);
        if (*a8)
          break;
        v22 = (_QWORD *)v12[1];
        if (v22)
        {
          do
          {
            v23 = v22;
            v22 = (_QWORD *)*v22;
          }
          while (v22);
        }
        else
        {
          do
          {
            v23 = (_QWORD *)v12[2];
            v24 = *v23 == (_QWORD)v12;
            v12 = v23;
          }
          while (!v24);
        }
        v12 = v23;
      }
      while (v23 != v11);
    }
  }
}

uint64_t sub_20B921BCC(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C49D288))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B921C08()
{
  return &unk_24C49D288;
}

uint64_t sub_20B921C14(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  v15 = a2;
  v13 = a5;
  v14 = a4;
  v11 = a7;
  v12 = a6;
  v10 = a8;
  if (!a1)
    sub_20B80BB74();
  return (*(uint64_t (**)(uint64_t, int *, uint64_t, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)a1 + 48))(a1, &v15, a3, &v14, &v13, &v12, &v11, &v10, a9);
}

void sub_20B921C74()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B921C88(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C49D2A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20B921CC0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C49D2A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20B921CE0(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, _BYTE *a6)
{
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;
  NSObject *v21;
  __int16 v22[8];

  v6 = *a2;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) - v7) >> 3) <= v6)
  {
    v21 = sub_20B9A7C5C(6u);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      v22[0] = 0;
      _os_log_error_impl(&dword_20B7F7000, v21, OS_LOG_TYPE_ERROR, "Data in learning dictionary trie is corrupted.", (uint8_t *)v22, 2u);
    }
  }
  else
  {
    v8 = (_QWORD *)(v7 + 24 * v6);
    v11 = (_QWORD *)*v8;
    v9 = v8 + 1;
    v10 = v11;
    if (v11 != v9)
    {
      v15 = *a3;
      v16 = *a4;
      v17 = *a5;
      do
      {
        sub_20B9219C4(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24), *((_DWORD *)v10 + 7), (uint64_t)a2, v15, v16, v17);
        if (*a6)
          break;
        v18 = (_QWORD *)v10[1];
        if (v18)
        {
          do
          {
            v19 = v18;
            v18 = (_QWORD *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            v19 = (_QWORD *)v10[2];
            v20 = *v19 == (_QWORD)v10;
            v10 = v19;
          }
          while (!v20);
        }
        v10 = v19;
      }
      while (v19 != v9);
    }
  }
}

uint64_t sub_20B921E18(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C49D308))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B921E54()
{
  return &unk_24C49D308;
}

void sub_20B921E64()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B921E78(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24C49D328;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_20B921EB8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C49D328;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20B921EE0(uint64_t a1, uint64_t a2, int *a3, const void **a4, size_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t a9)
{
  const void *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  void *__p;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  size_t v28;
  int v29;
  _BYTE v30[24];
  _BYTE *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v11 = *a4;
  v12 = *a5;
  v13 = *a6;
  v14 = *a7;
  v15 = *a8;
  v29 = *a3;
  v27 = v13;
  v28 = v12;
  v25 = v15;
  v26 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 24) + 32))(*(_QWORD *)(v16 + 24)) & 1) == 0)
    __assert_rtn("operator()", "AmbiguousTrieAdapter.hpp", 44, "m_trie->isValid(cursor)");
  __p = 0;
  v23 = 0;
  v24 = 0;
  sub_20B8FA598(&__p, v11, (uint64_t)v11 + v12, v12);
  v17 = *(_QWORD *)(a1 + 16);
  v18 = *(_QWORD *)(v16 + 24);
  v19 = operator new(0x50uLL);
  *v19 = &off_24C49D398;
  v19[1] = &v28;
  v19[2] = &__p;
  v19[3] = v17;
  v19[4] = &v29;
  v19[5] = &v27;
  v19[6] = &v26;
  v19[7] = &v25;
  v19[8] = a1 + 24;
  v19[9] = a9;
  v31 = v19;
  (*(void (**)(uint64_t, uint64_t, _BYTE *, _QWORD))(*(_QWORD *)v18 + 56))(v18, a2, v30, *(unsigned int *)(a1 + 28));
  v20 = v31;
  if (v31 == v30)
  {
    v21 = 4;
    v20 = v30;
  }
  else
  {
    if (!v31)
      goto LABEL_7;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_7:
  if (__p)
  {
    v23 = __p;
    operator delete(__p);
  }
}

void sub_20B922068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  char *v21;
  char *v23;
  uint64_t v24;

  v23 = a21;
  if (a21 == v21)
  {
    v24 = 4;
    v23 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B9220C0(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C49D408))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B9220FC()
{
  return &unk_24C49D408;
}

void sub_20B92210C()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B922120(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x50uLL);
  *(_QWORD *)v2 = &off_24C49D398;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *((_QWORD *)v2 + 9) = *(_QWORD *)(a1 + 72);
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20B922178(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24C49D398;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  v3 = *(_OWORD *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 40) = v3;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t sub_20B9221B8(uint64_t a1, _DWORD *a2, uint64_t *a3, uint64_t *a4, unsigned __int8 *a5)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t i;
  uint64_t *v15;
  int v16;
  uint64_t result;
  _DWORD v18[2];

  v8 = *a3;
  v9 = *a4;
  v11 = *(_QWORD **)(a1 + 8);
  v10 = *(unint64_t **)(a1 + 16);
  v12 = *v11 + *a4;
  v13 = v10[1] - *v10;
  if (v12 > v13)
    sub_20B871DC8(v10, v12 - v13);
  if (v9)
  {
    for (i = 0; i != v9; ++i)
      *(_BYTE *)(**(_QWORD **)(a1 + 16) + **(_QWORD **)(a1 + 8) + i) = *(_BYTE *)(v8 + i);
  }
  v15 = *(uint64_t **)(a1 + 40);
  v16 = **(_DWORD **)(a1 + 32);
  v18[0] = *a2;
  v18[1] = v16;
  result = sub_20B8F9E0C(*(_QWORD *)(a1 + 24), (uint64_t)v18, **(_QWORD **)(a1 + 16), v12, *v15, **(_QWORD **)(a1 + 48), **(_QWORD **)(a1 + 56) - **(int **)(a1 + 64));
  **(_BYTE **)(a1 + 72) = (**(unsigned __int8 **)(a1 + 72) | *a5) != 0;
  return result;
}

uint64_t sub_20B9222AC(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C49D3F8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B9222E8()
{
  return &unk_24C49D3F8;
}

void sub_20B9222F8()
{
  JUMPOUT(0x20BD39CB0);
}

__n128 sub_20B92230C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C49D428;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20B922344(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C49D428;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20B922364(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, _BYTE *a8)
{
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  BOOL v24;
  NSObject *v25;
  uint8_t buf[16];

  v8 = *a2;
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) - v9) >> 3) <= v8)
  {
    v25 = sub_20B9A7C5C(6u);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_20B7F7000, v25, OS_LOG_TYPE_ERROR, "Data in learning dictionary trie is corrupted.", buf, 2u);
    }
  }
  else
  {
    v10 = (_QWORD *)(v9 + 24 * v8);
    v13 = (_QWORD *)*v10;
    v11 = v10 + 1;
    v12 = v13;
    if (v13 != v11)
    {
      v17 = *a3;
      v18 = *a4;
      v19 = *a5;
      v20 = *a6;
      v21 = *a7;
      do
      {
        sub_20B921C14(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24), *((_DWORD *)v12 + 7), (uint64_t)a2, v17, v18, v19, v20, v21, (uint64_t)a8);
        if (*a8)
          break;
        v22 = (_QWORD *)v12[1];
        if (v22)
        {
          do
          {
            v23 = v22;
            v22 = (_QWORD *)*v22;
          }
          while (v22);
        }
        else
        {
          do
          {
            v23 = (_QWORD *)v12[2];
            v24 = *v23 == (_QWORD)v12;
            v12 = v23;
          }
          while (!v24);
        }
        v12 = v23;
      }
      while (v23 != v11);
    }
  }
}

uint64_t sub_20B9224B4(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C49D488))
    return a1 + 8;
  else
    return 0;
}

void *sub_20B9224F0()
{
  return &unk_24C49D488;
}

uint64_t sub_20B9224FC(int a1, __CFDictionary *a2, void *lpsrc)
{
  uint64_t result;
  uint64_t v5;
  const __CFString *v6;
  CFIndex Length;
  __CFString **v8;

  if (!lpsrc)
    return 0;
  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C45C1C8, (const struct __class_type_info *)&unk_24C45C148, 0);
  if (result)
  {
    v5 = result;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
    if (result)
    {
      if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 56))(v5)
        || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 216))(v5), (_DWORD)result))
      {
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 104))(v5) & 2) != 0)
        {
          v6 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
          Length = CFStringGetLength(v6);
          if (Length == 1)
          {
            v8 = &off_24C49C8F0;
LABEL_12:
            CFDictionaryAddValue(a2, *v8, (const void *)*MEMORY[0x24BDBD270]);
            goto LABEL_13;
          }
          if (Length >= 2)
          {
            v8 = &off_24C49C8F8;
            goto LABEL_12;
          }
        }
LABEL_13:
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 104))(v5) & 0x8080) == 0)
          CFDictionaryAddValue(a2, CFSTR("shapeBasedPinyinConvertedCandidateAccepted"), (const void *)*MEMORY[0x24BDBD270]);
        return 1;
      }
    }
  }
  return result;
}

void sub_20B92262C()
{
  JUMPOUT(0x20BD39CB0);
}

uint64_t **sub_20B922640(uint64_t **a1, const char *a2, void *a3)
{
  uint64_t *v6;

  v6 = (uint64_t *)operator new();
  sub_20B922748(v6, a2, a3);
  *a1 = v6;
  return a1;
}

void sub_20B92269C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD39CB0](v1, 0x80C40803F642BLL);
  _Unwind_Resume(a1);
}

void **sub_20B9226C0(void **result, const char *a2)
{
  void **v2;
  const char *v4;
  uint64_t v5;
  const char *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;

  if (a2)
  {
    v2 = result;
    result = (void **)*result;
    if (result)
    {
      if (objc_msgSend_containsObject_(result, a2, (uint64_t)a2))
        objc_msgSend_removeObject_(*v2, v4, (uint64_t)a2);
      if (objc_msgSend_count(*v2, v4, v5) == 500)
        objc_msgSend_removeObjectAtIndex_(*v2, v6, 0);
      objc_msgSend_addObject_(*v2, v6, (uint64_t)a2);
      v9 = objc_msgSend_array(*v2, v7, v8);
      return (void **)MEMORY[0x24BEDD108](v9, sel_writeToFile_atomically_, v2[1]);
    }
  }
  return result;
}

uint64_t *sub_20B922748(uint64_t *a1, const char *a2, void *a3)
{
  int v4;
  uint64_t v5;
  const char *v6;
  const __CFString *v7;
  void *v8;
  const char *v9;
  id v10;
  const char *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  id v19;
  const char *v20;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x24BDAC8D0];
  *a1 = 0;
  a1[1] = 0;
  if (a3)
  {
    v4 = (int)a2;
    v5 = objc_msgSend_path(a3, a2, (uint64_t)a3);
    v7 = CFSTR("LearningSet_zh_Hant.plist");
    if (v4 == 1)
      v7 = CFSTR("LearningSet_zh_Hans.plist");
    v22[0] = v5;
    v22[1] = v7;
    v8 = (void *)objc_msgSend_arrayWithObjects_count_(MEMORY[0x24BDBCE30], v6, (uint64_t)v22, 2);
    v10 = (id)objc_msgSend_componentsJoinedByString_(v8, v9, (uint64_t)CFSTR("/"));
    a1[1] = (uint64_t)v10;
    v12 = (void *)objc_msgSend_arrayWithContentsOfFile_(MEMORY[0x24BDBCE30], v11, (uint64_t)v10);
    if ((unint64_t)objc_msgSend_count(v12, v13, v14) >= 0x1F5)
    {
      v17 = objc_msgSend_count(v12, v15, v16);
      v12 = (void *)objc_msgSend_subarrayWithRange_(v12, v18, v17 - 500, 500);
    }
    v19 = objc_alloc(MEMORY[0x24BDBCEE0]);
    *a1 = objc_msgSend_initWithArray_(v19, v20, (uint64_t)v12);
  }
  return a1;
}

id *sub_20B922844(id **a1, id *a2)
{
  id *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_20B922880(result);
    JUMPOUT(0x20BD39CB0);
  }
  return result;
}

id *sub_20B922880(id *a1)
{

  return a1;
}

uint64_t sub_20B9228B4(uint64_t a1, uint64_t a2, char *__s, char *a4)
{
  std::string *v7;
  std::string *v8;

  *(_OWORD *)(a1 + 48) = 0u;
  v7 = (std::string *)(a1 + 48);
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  v8 = (std::string *)(a1 + 24);
  *(_OWORD *)a1 = 0u;
  if (a1 != a2)
    sub_20B91912C(a1, *(std::string **)a2, *(__int128 **)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 5);
  sub_20B8A741C(v8, __s);
  sub_20B8A741C(v7, a4);
  return a1;
}

void sub_20B922948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void **v11;
  void **v12;

  if (*(char *)(v10 + 71) < 0)
    operator delete(*v12);
  if (*(char *)(v10 + 47) < 0)
    operator delete(*v11);
  a10 = (void **)v10;
  sub_20B86F120(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20B922980(uint64_t a1)
{
  void **v3;

  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  v3 = (void **)a1;
  sub_20B86F120(&v3);
  return a1;
}

double sub_20B9229D4@<D0>(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  const std::string::value_type *v8;
  std::string::size_type v9;
  unsigned __int8 v10;
  std::string *v11;
  unsigned __int8 v12;
  uint64_t i;
  int v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  double result;
  __guard *v22;
  std::string __dst;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  switch(a2)
  {
    case 1:
      sub_20B80BBD0(&__dst, "SELECT Identifier FROM Words WHERE Identifier = ? ");
      v6 = *a1;
      v5 = a1[1];
      if (*a1 != v5)
      {
        do
        {
          if (!*(_BYTE *)(v6 + 28) && !*(_BYTE *)(v6 + 29))
          {
            std::string::append(&__dst, " AND ", 5uLL);
            v7 = *(char *)(v6 + 23);
            if (v7 >= 0)
              v8 = (const std::string::value_type *)v6;
            else
              v8 = *(const std::string::value_type **)v6;
            if (v7 >= 0)
              v9 = *(unsigned __int8 *)(v6 + 23);
            else
              v9 = *(_QWORD *)(v6 + 8);
            std::string::append(&__dst, v8, v9);
            std::string::append(&__dst, " = ?", 4uLL);
            v5 = a1[1];
          }
          v6 += 32;
        }
        while (v6 != v5);
      }
      goto LABEL_45;
    case 2:
      sub_20B922E48(&__dst, a1, (uint64_t)(a1 + 3));
      goto LABEL_45;
    case 3:
      sub_20B922E48(&__dst, a1, (uint64_t)(a1 + 6));
      goto LABEL_45;
    case 4:
      sub_20B80BBD0(&__dst, "SELECT Seed");
      for (i = *a1; i != a1[1]; i += 32)
      {
        std::string::append(&__dst, ", ", 2uLL);
        v14 = *(char *)(i + 23);
        if (v14 >= 0)
          v15 = (const std::string::value_type *)i;
        else
          v15 = *(const std::string::value_type **)i;
        if (v14 >= 0)
          v16 = *(unsigned __int8 *)(i + 23);
        else
          v16 = *(_QWORD *)(i + 8);
        std::string::append(&__dst, v15, v16);
      }
      std::string::append(&__dst, " FROM Words WHERE Identifier = ?", 0x20uLL);
      goto LABEL_45;
    case 5:
      v10 = atomic_load((unsigned __int8 *)&qword_25472B7A8);
      v11 = (std::string *)&qword_25472B7D0[2];
      if ((v10 & 1) != 0)
        goto LABEL_41;
      v22 = &qword_25472B7A8;
      if (!__cxa_guard_acquire(&qword_25472B7A8))
        goto LABEL_41;
      v11 = (std::string *)&qword_25472B7D0[2];
      sub_20B80BBD0(&qword_25472B7D0[2], "UPDATE Words SET Seed = ? WHERE Identifier = ?");
      goto LABEL_51;
    case 6:
      v18 = atomic_load((unsigned __int8 *)&qword_25472B7B8);
      v11 = (std::string *)&qword_25472B7D0[8];
      if ((v18 & 1) != 0)
        goto LABEL_41;
      v22 = &qword_25472B7B8;
      if (!__cxa_guard_acquire(&qword_25472B7B8))
        goto LABEL_41;
      v11 = (std::string *)&qword_25472B7D0[8];
      sub_20B80BBD0(&qword_25472B7D0[8], "UPDATE Assist SET LastSeedValue = ? WHERE Identifier = 1");
      goto LABEL_51;
    case 7:
      v19 = atomic_load((unsigned __int8 *)&qword_25472B7C0);
      v11 = (std::string *)&qword_25472B7D0[11];
      if ((v19 & 1) != 0)
        goto LABEL_41;
      v22 = &qword_25472B7C0;
      if (!__cxa_guard_acquire(&qword_25472B7C0))
        goto LABEL_41;
      v11 = (std::string *)&qword_25472B7D0[11];
      sub_20B80BBD0(&qword_25472B7D0[11], "UPDATE Assist SET LastUpdateTime = ? WHERE Identifier = 1");
      goto LABEL_51;
    case 8:
      v17 = atomic_load((unsigned __int8 *)&qword_25472B7B0);
      v11 = (std::string *)&qword_25472B7D0[5];
      if ((v17 & 1) != 0)
        goto LABEL_41;
      v22 = &qword_25472B7B0;
      if (!__cxa_guard_acquire(&qword_25472B7B0))
        goto LABEL_41;
      v11 = (std::string *)&qword_25472B7D0[5];
      sub_20B80BBD0(&qword_25472B7D0[5], "UPDATE Words SET Identifier = ? WHERE Identifier = ?");
      goto LABEL_51;
    case 9:
      v20 = atomic_load((unsigned __int8 *)&qword_25472B7C8);
      v11 = (std::string *)&qword_25472B7D0[14];
      if ((v20 & 1) != 0)
        goto LABEL_41;
      v22 = &qword_25472B7C8;
      if (!__cxa_guard_acquire(&qword_25472B7C8))
        goto LABEL_41;
      v11 = (std::string *)&qword_25472B7D0[14];
      sub_20B80BBD0(&qword_25472B7D0[14], "UPDATE Assist SET Version = ? WHERE Identifier = 1");
LABEL_51:
      __cxa_atexit(MEMORY[0x24BEDACF0], v11, &dword_20B7F7000);
      __cxa_guard_release(v22);
LABEL_41:
      std::string::operator=((std::string *)a3, v11);
      break;
    case 10:
      v12 = atomic_load((unsigned __int8 *)qword_25472B7D0);
      if ((v12 & 1) == 0 && __cxa_guard_acquire(qword_25472B7D0))
      {
        sub_20B80BBD0(byte_25472B858, "SELECT COUNT(*) FROM Words");
        __cxa_atexit(MEMORY[0x24BEDACF0], byte_25472B858, &dword_20B7F7000);
        __cxa_guard_release(qword_25472B7D0);
      }
      if (byte_25472B858[23] < 0)
        sub_20B80ACE0(&__dst, *(void **)byte_25472B858, *(unint64_t *)&byte_25472B858[8]);
      else
        __dst = *(std::string *)byte_25472B858;
      if (*(char *)(a3 + 23) < 0)
        operator delete(*(void **)a3);
LABEL_45:
      result = *(double *)&__dst.__r_.__value_.__l.__data_;
      *(std::string *)a3 = __dst;
      break;
    default:
      return result;
  }
  return result;
}

void sub_20B922D94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  __cxa_guard_abort(&qword_25472B7C8);
  if (*(char *)(v16 + 23) < 0)
    operator delete(*(void **)v16);
  _Unwind_Resume(a1);
}

std::string *sub_20B922E48(std::string *a1, uint64_t *a2, uint64_t a3)
{
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  uint64_t i;
  int v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  unint64_t v17;
  std::string v19;
  std::string v20;

  sub_20B80BBD0(&v19, "INSERT INTO ");
  v6 = *(char *)(a3 + 23);
  if (v6 >= 0)
    v7 = (const std::string::value_type *)a3;
  else
    v7 = *(const std::string::value_type **)a3;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a3 + 23);
  else
    v8 = *(_QWORD *)(a3 + 8);
  v9 = std::string::append(&v19, v7, v8);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v11 = std::string::append(&v20, " (Seed", 6uLL);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  a1->__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  for (i = *a2; i != a2[1]; i += 32)
  {
    std::string::append(a1, ", ", 2uLL);
    v14 = *(char *)(i + 23);
    if (v14 >= 0)
      v15 = (const std::string::value_type *)i;
    else
      v15 = *(const std::string::value_type **)i;
    if (v14 >= 0)
      v16 = *(unsigned __int8 *)(i + 23);
    else
      v16 = *(_QWORD *)(i + 8);
    std::string::append(a1, v15, v16);
  }
  std::string::append(a1, ") VALUES (?", 0xBuLL);
  if (a2[1] != *a2)
  {
    v17 = 0;
    do
    {
      std::string::append(a1, ",?", 2uLL);
      ++v17;
    }
    while (v17 < (a2[1] - *a2) >> 5);
  }
  return std::string::append(a1, ")", 1uLL);
}

void sub_20B922FC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B923018()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25472CDC0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25472CDC0))
  {
    sub_20B80BBD0(qword_25472CDA8, "DELETE FROM Words WHERE Identifier = ?");
    __cxa_atexit(MEMORY[0x24BEDACF0], qword_25472CDA8, &dword_20B7F7000);
    __cxa_guard_release(&qword_25472CDC0);
  }
  return qword_25472CDA8;
}

void sub_20B923098(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472CDC0);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B9230B0()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25472CDE0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25472CDE0))
  {
    sub_20B80BBD0(qword_25472CDC8, "SELECT Identifier FROM Words ORDER BY Seed DESC");
    __cxa_atexit(MEMORY[0x24BEDACF0], qword_25472CDC8, &dword_20B7F7000);
    __cxa_guard_release(&qword_25472CDE0);
  }
  return qword_25472CDC8;
}

void sub_20B923130(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472CDE0);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B923148()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25472CE00);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25472CE00))
  {
    sub_20B80BBD0(qword_25472CDE8, "SELECT Identifier FROM Words ORDER BY Identifier ASC");
    __cxa_atexit(MEMORY[0x24BEDACF0], qword_25472CDE8, &dword_20B7F7000);
    __cxa_guard_release(&qword_25472CE00);
  }
  return qword_25472CDE8;
}

void sub_20B9231C8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472CE00);
  _Unwind_Resume(a1);
}

std::string *sub_20B9231E0@<X0>(const char *a1@<X1>, std::string *a2@<X8>)
{
  std::string::size_type v4;

  sub_20B80BBD0(a2, "SELECT Identifier, ");
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  v4 = strlen(a1);
  std::string::append(a2, a1, v4);
  return std::string::append(a2, " FROM Words", 0xBuLL);
}

void sub_20B92324C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *sub_20B923268@<X0>(uint64_t *a1@<X0>, char *a2@<X1>, std::string *a3@<X8>)
{
  void **v6;
  std::string::size_type v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  uint64_t v12;
  int v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  int v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  void *__p[2];
  unsigned __int8 v21;
  std::string v22;
  std::string v23;

  sub_20B80BBD0(&v22, "CREATE TABLE ");
  sub_20B80BBD0(__p, a2);
  if ((v21 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v21 & 0x80u) == 0)
    v7 = v21;
  else
    v7 = (std::string::size_type)__p[1];
  v8 = std::string::append(&v22, (const std::string::value_type *)v6, v7);
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v10 = std::string::append(&v23, " (Identifier INTEGER PRIMARY KEY, Seed INTEGER", 0x2EuLL);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  a3->__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if ((char)v21 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  v12 = *a1;
  if (*a1 != a1[1])
  {
    while (1)
    {
      std::string::append(a3, ", ", 2uLL);
      v13 = *(char *)(v12 + 23);
      v14 = v13 >= 0 ? (const std::string::value_type *)v12 : *(const std::string::value_type **)v12;
      v15 = v13 >= 0 ? *(unsigned __int8 *)(v12 + 23) : *(_QWORD *)(v12 + 8);
      std::string::append(a3, v14, v15);
      std::string::append(a3, " ", 1uLL);
      v16 = *(_DWORD *)(v12 + 24);
      if (v16 == 1)
        break;
      if (!v16)
      {
        v17 = "BLOB";
        v18 = 4;
LABEL_24:
        std::string::append(a3, v17, v18);
      }
      v12 += 32;
      if (v12 == a1[1])
        return std::string::append(a3, ")", 1uLL);
    }
    v17 = "INTEGER";
    v18 = 7;
    goto LABEL_24;
  }
  return std::string::append(a3, ")", 1uLL);
}

void sub_20B92341C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (*(char *)(v26 + 23) < 0)
    operator delete(*(void **)v26);
  _Unwind_Resume(exception_object);
}

void sub_20B923480(uint64_t a1@<X8>)
{
  unsigned __int8 v2;

  v2 = atomic_load((unsigned __int8 *)&qword_25472CE20);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25472CE20))
  {
    sub_20B80BBD0(&xmmword_25472CE08, "CREATE TABLE Assist (Identifier INTEGER PRIMARY KEY, LastSeedValue INTEGER, LastUpdateTime REAL, Version INTEGER DEFAULT 0)");
    __cxa_atexit(MEMORY[0x24BEDACF0], &xmmword_25472CE08, &dword_20B7F7000);
    __cxa_guard_release(&qword_25472CE20);
  }
  if (byte_25472CE1F < 0)
  {
    sub_20B80ACE0((_BYTE *)a1, (void *)xmmword_25472CE08, *((unint64_t *)&xmmword_25472CE08 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25472CE08;
    *(_QWORD *)(a1 + 16) = unk_25472CE18;
  }
}

void sub_20B92353C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472CE20);
  _Unwind_Resume(a1);
}

void sub_20B923554(uint64_t a1@<X8>)
{
  unsigned __int8 v2;

  v2 = atomic_load((unsigned __int8 *)&qword_25472CE40);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25472CE40))
  {
    sub_20B80BBD0(&xmmword_25472CE28, "INSERT INTO Assist (LastSeedValue, LastUpdateTime, Version) VALUES (0, 0, 0)");
    __cxa_atexit(MEMORY[0x24BEDACF0], &xmmword_25472CE28, &dword_20B7F7000);
    __cxa_guard_release(&qword_25472CE40);
  }
  if (byte_25472CE3F < 0)
  {
    sub_20B80ACE0((_BYTE *)a1, (void *)xmmword_25472CE28, *((unint64_t *)&xmmword_25472CE28 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25472CE28;
    *(_QWORD *)(a1 + 16) = unk_25472CE38;
  }
}

void sub_20B923610(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472CE40);
  _Unwind_Resume(a1);
}

void sub_20B923628(uint64_t a1@<X8>)
{
  unsigned __int8 v2;

  v2 = atomic_load((unsigned __int8 *)&qword_25472CE60);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25472CE60))
  {
    sub_20B80BBD0(&xmmword_25472CE48, "SELECT LastSeedValue FROM Assist WHERE Identifier = 1");
    __cxa_atexit(MEMORY[0x24BEDACF0], &xmmword_25472CE48, &dword_20B7F7000);
    __cxa_guard_release(&qword_25472CE60);
  }
  if (byte_25472CE5F < 0)
  {
    sub_20B80ACE0((_BYTE *)a1, (void *)xmmword_25472CE48, *((unint64_t *)&xmmword_25472CE48 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25472CE48;
    *(_QWORD *)(a1 + 16) = unk_25472CE58;
  }
}

void sub_20B9236E4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25472CE60);
  _Unwind_Resume(a1);
}

void sub_20B9236FC(std::string *a1@<X8>)
{
  std::string::size_type v2;
  std::string *v3;
  __int128 v4;
  std::string *v5;
  __int128 v6;
  std::string::size_type v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  std::string v11;
  std::string v12;
  std::string v13;
  std::string v14;

  sub_20B80BBD0(&v11, "SELECT ");
  v2 = strlen(off_2547292C8[0]);
  v3 = std::string::append(&v11, off_2547292C8[0], v2);
  v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  v12.__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  v5 = std::string::append(&v12, ", ", 2uLL);
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  v7 = strlen(off_2547292D0);
  v8 = std::string::append(&v13, off_2547292D0, v7);
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v10 = std::string::append(&v14, " FROM Words", 0xBuLL);
  *a1 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

void sub_20B923840(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (*(char *)(v28 - 25) < 0)
    operator delete(*(void **)(v28 - 48));
  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void *sub_20B9238A4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  void *result;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;

  result = sub_20B80BBD0(a3, "SELECT Identifier FROM Words WHERE ");
  v7 = *a1;
  v8 = a1[1];
  if (*a1 != v8)
  {
    v9 = 1;
    do
    {
      result = sub_20B871B2C(a2, (void **)v7);
      if ((void *)(a2 + 8) != result)
      {
        if ((v9 & 1) == 0)
          std::string::append(a3, " AND ", 5uLL);
        v10 = *(char *)(v7 + 23);
        if (v10 >= 0)
          v11 = (const std::string::value_type *)v7;
        else
          v11 = *(const std::string::value_type **)v7;
        if (v10 >= 0)
          v12 = *(unsigned __int8 *)(v7 + 23);
        else
          v12 = *(_QWORD *)(v7 + 8);
        std::string::append(a3, v11, v12);
        result = std::string::append(a3, " = ?", 4uLL);
        v9 = 0;
      }
      v7 += 32;
    }
    while (v7 != v8);
  }
  return result;
}

void sub_20B92397C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *sub_20B923998@<X0>(uint64_t *a1@<X1>, std::string *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char i;
  const char *v8;
  std::string::size_type v9;

  sub_20B80BBD0(a2, "SELECT Identifier, Seed, ");
  v4 = *a1;
  if (a1[1] != *a1)
  {
    v5 = 0;
    v6 = 0;
    for (i = 0; ; i = 1)
    {
      v8 = (const char *)(v4 + v5);
      if ((*(char *)(v4 + v5 + 23) & 0x80000000) == 0)
        break;
      v8 = *(const char **)v8;
      if ((i & 1) != 0)
        goto LABEL_7;
LABEL_8:
      v9 = strlen(v8);
      std::string::append(a2, v8, v9);
      ++v6;
      v4 = *a1;
      v5 += 32;
      if (v6 >= (a1[1] - *a1) >> 5)
        return std::string::append(a2, " FROM Words", 0xBuLL);
    }
    if ((i & 1) == 0)
      goto LABEL_8;
LABEL_7:
    std::string::append(a2, ", ", 2uLL);
    goto LABEL_8;
  }
  return std::string::append(a2, " FROM Words", 0xBuLL);
}

void sub_20B923A6C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

BOOL sub_20B923A8C(uint64_t a1)
{
  if (!qword_25472CE68)
    qword_25472CE68 = _sl_dlopen();
  return qword_25472CE68 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) != 0;
}

uint64_t sub_20B923B38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void *v6;
  void *v7;
  _Unwind_Exception *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  void *v13;

  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v10 = 0;
  v11 = &v10;
  v12 = 0x2000000000;
  v6 = off_25472CE70;
  v13 = off_25472CE70;
  if (!off_25472CE70)
  {
    v7 = (void *)sub_20B924820();
    v6 = dlsym(v7, "ITDecoderSetLinguisticContext");
    v11[3] = (uint64_t)v6;
    off_25472CE70 = v6;
  }
  _Block_object_dispose(&v10, 8);
  if (!v6)
  {
    dlerror();
    v9 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v10, 8);
    _Unwind_Resume(v9);
  }
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v6)(v5, a2, a3);
}

uint64_t sub_20B923C14(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  _Unwind_Exception *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  void *v9;

  v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v6 = 0;
  v7 = &v6;
  v8 = 0x2000000000;
  v2 = off_25472CE78;
  v9 = off_25472CE78;
  if (!off_25472CE78)
  {
    v3 = (void *)sub_20B924820();
    v2 = dlsym(v3, "ITDecoderClearNeuralNetworkBuffer");
    v7[3] = (uint64_t)v2;
    off_25472CE78 = v2;
  }
  _Block_object_dispose(&v6, 8);
  if (!v2)
  {
    dlerror();
    v5 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v6, 8);
    _Unwind_Resume(v5);
  }
  return ((uint64_t (*)(uint64_t))v2)(v1);
}

uint64_t sub_20B923CD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  void *v8;
  void *v9;
  _Unwind_Exception *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  void *v15;

  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v12 = 0;
  v13 = &v12;
  v14 = 0x2000000000;
  v8 = off_25472CE80;
  v15 = off_25472CE80;
  if (!off_25472CE80)
  {
    v9 = (void *)sub_20B924820();
    v8 = dlsym(v9, "ITDecoderEnumerateCandidates");
    v13[3] = (uint64_t)v8;
    off_25472CE80 = v8;
  }
  _Block_object_dispose(&v12, 8);
  if (!v8)
  {
    dlerror();
    v11 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v12, 8);
    _Unwind_Resume(v11);
  }
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v8)(v7, a2, a3, a4);
}

uint64_t sub_20B923DBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  void *v6;
  _Unwind_Exception *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  void *v12;

  v9 = 0;
  v10 = &v9;
  v11 = 0x2000000000;
  v5 = off_25472CE88;
  v12 = off_25472CE88;
  if (!off_25472CE88)
  {
    v6 = (void *)sub_20B924820();
    v5 = dlsym(v6, "ITCandidateEnumerateTokenIDs");
    v10[3] = (uint64_t)v5;
    off_25472CE88 = v5;
  }
  _Block_object_dispose(&v9, 8);
  if (!v5)
  {
    dlerror();
    v8 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v9, 8);
    _Unwind_Resume(v8);
  }
  return ((uint64_t (*)(uint64_t, uint64_t))v5)(a2, a3);
}

uint64_t sub_20B923E7C(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  _Unwind_Exception *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  void *v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2000000000;
  v3 = off_25472CE90;
  v10 = off_25472CE90;
  if (!off_25472CE90)
  {
    v4 = (void *)sub_20B924820();
    v3 = dlsym(v4, "ITCandidateGetScore");
    v8[3] = (uint64_t)v3;
    off_25472CE90 = v3;
  }
  _Block_object_dispose(&v7, 8);
  if (!v3)
  {
    dlerror();
    v6 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v7, 8);
    _Unwind_Resume(v6);
  }
  return ((uint64_t (*)(uint64_t))v3)(a2);
}

_QWORD *sub_20B923F34(_QWORD *a1, uint64_t a2)
{
  const void *v4;
  const __CFString *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = &off_24C468678;
  a1[1] = a2;
  a1[2] = sub_20B92400C(*(_QWORD *)(a2 + 72));
  v4 = (const void *)sub_20B924470();
  if (*(_DWORD *)(a2 + 4) == 2)
    v5 = CFSTR("zh-Hant");
  else
    v5 = CFSTR("zh-Hans");
  v6 = sub_20B92406C(v4, v5, (const void *)a1[2]);
  a1[3] = v6;
  v7 = a1[1];
  v8 = *(_QWORD *)(v7 + 72);
  if (v8)
  {
    sub_20B87566C(*(_QWORD *)(v8 + 8), a1, (void (__cdecl *)(CFNotificationCenterRef, void *, CFNotificationName, const void *, CFDictionaryRef))sub_20B924518);
    v7 = a1[1];
    v6 = a1[3];
  }
  *(_BYTE *)(v7 + 96) = v6 != 0;
  return a1;
}

void sub_20B923FE0(_Unwind_Exception *a1)
{
  const void **v1;
  const void **v2;

  sub_20B924684(v2, 0);
  sub_20B876164(v1, 0);
  _Unwind_Resume(a1);
}

CFURLRef sub_20B92400C(uint64_t a1)
{
  const __CFString *v1;

  if (a1
    && *(_BYTE *)(a1 + 5)
    && (v1 = (const __CFString *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 168) + 24))(*(_QWORD *)(a1 + 168), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32))) != 0)
  {
    return CFURLCreateWithFileSystemPath((CFAllocatorRef)*MEMORY[0x24BDBD240], v1, kCFURLPOSIXPathStyle, 1u);
  }
  else
  {
    return 0;
  }
}

uint64_t sub_20B92406C(const void *a1, const void *a2, const void *a3)
{
  __CFError *Mutable;
  const void **v7;
  void *v8;
  const void **v9;
  void *v10;
  const void **v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  CFErrorRef v16;
  __CFError *v17;
  NSObject *v18;
  NSObject *v19;
  CFErrorRef err[4];
  uint8_t buf[16];
  uint64_t v23;
  void *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (!qword_25472CE68)
  {
    *(_OWORD *)buf = xmmword_24C49D498;
    v23 = 0;
    qword_25472CE68 = _sl_dlopen();
  }
  if (!qword_25472CE68)
    return 0;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  err[1] = Mutable;
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  v23 = 0x2000000000;
  v7 = (const void **)qword_25472B898;
  v24 = (void *)qword_25472B898;
  if (!qword_25472B898)
  {
    v8 = (void *)sub_20B924820();
    v7 = (const void **)dlsym(v8, "kITDecoderLocaleKey");
    *(_QWORD *)(*(_QWORD *)&buf[8] + 24) = v7;
    qword_25472B898 = (uint64_t)v7;
  }
  _Block_object_dispose(buf, 8);
  if (!v7)
    goto LABEL_33;
  CFDictionarySetValue(Mutable, *v7, a2);
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  v23 = 0x2000000000;
  v9 = (const void **)qword_25472B8A0;
  v24 = (void *)qword_25472B8A0;
  if (!qword_25472B8A0)
  {
    v10 = (void *)sub_20B924820();
    v9 = (const void **)dlsym(v10, "kITDecoderNeuralTypeKey");
    *(_QWORD *)(*(_QWORD *)&buf[8] + 24) = v9;
    qword_25472B8A0 = (uint64_t)v9;
  }
  _Block_object_dispose(buf, 8);
  if (!v9)
    goto LABEL_33;
  CFDictionarySetValue(Mutable, *v9, a1);
  if (!a3)
    goto LABEL_15;
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  v23 = 0x2000000000;
  v11 = (const void **)qword_25472B8A8;
  v24 = (void *)qword_25472B8A8;
  if (!qword_25472B8A8)
  {
    v12 = (void *)sub_20B924820();
    v11 = (const void **)dlsym(v12, "kITTouchTranscoderBundleURLKey");
    *(_QWORD *)(*(_QWORD *)&buf[8] + 24) = v11;
    qword_25472B8A8 = (uint64_t)v11;
  }
  _Block_object_dispose(buf, 8);
  if (!v11)
  {
LABEL_33:
    dlerror();
    abort_report_np();
    __break(1u);
  }
  CFDictionarySetValue(Mutable, *v11, a3);
LABEL_15:
  err[0] = 0;
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  v23 = 0x2000000000;
  v13 = off_25472B8B0;
  v24 = off_25472B8B0;
  if (!off_25472B8B0)
  {
    v14 = (void *)sub_20B924820();
    v13 = dlsym(v14, "ITDecoderCreate");
    *(_QWORD *)(*(_QWORD *)&buf[8] + 24) = v13;
    off_25472B8B0 = v13;
  }
  _Block_object_dispose(buf, 8);
  if (!v13)
    goto LABEL_33;
  v15 = ((uint64_t (*)(__CFError *, CFErrorRef *))v13)(Mutable, err);
  if (v15)
    goto LABEL_26;
  v16 = err[0];
  if (!err[0])
  {
    v19 = sub_20B9A7C5C(0);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_20B7F7000, v19, OS_LOG_TYPE_ERROR, "Failed to create CTC decoder: (null)", buf, 2u);
      if (!Mutable)
        return v15;
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  err[3] = err[0];
  v17 = (__CFError *)CFErrorCopyDescription(err[0]);
  err[2] = v17;
  v18 = sub_20B9A7C5C(0);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = v17;
    _os_log_error_impl(&dword_20B7F7000, v18, OS_LOG_TYPE_ERROR, "Failed to create CTC decoder: %@", buf, 0xCu);
    if (!v17)
      goto LABEL_23;
    goto LABEL_22;
  }
  if (v17)
LABEL_22:
    CFRelease(v17);
LABEL_23:
  CFRelease(v16);
LABEL_26:
  if (Mutable)
LABEL_27:
    CFRelease(Mutable);
  return v15;
}

void sub_20B9243F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,char a24)
{
  if (a2)
    sub_20B854468(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B924470()
{
  void *v0;
  void *v1;
  _Unwind_Exception *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2000000000;
  v0 = (void *)qword_25472B888;
  v7 = qword_25472B888;
  if (!qword_25472B888)
  {
    v1 = (void *)sub_20B924820();
    v0 = dlsym(v1, "kITDecoderNeuralTypeValueTap");
    v5[3] = (uint64_t)v0;
    qword_25472B888 = (uint64_t)v0;
  }
  _Block_object_dispose(&v4, 8);
  if (!v0)
  {
    dlerror();
    v3 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v4, 8);
    _Unwind_Resume(v3);
  }
  return *(_QWORD *)v0;
}

void sub_20B924518(uint64_t a1, uint64_t a2)
{
  CFURLRef v3;
  CFURLRef v4;
  const void *v5;
  const void *v6;
  const __CFString *v7;
  const void *v8;

  if (a2)
  {
    v3 = sub_20B92400C(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 72));
    v4 = v3;
    v5 = *(const void **)(a2 + 16);
    if (v3)
    {
      if (v5 && CFEqual(v3, v5))
      {
        CFRelease(v4);
        return;
      }
    }
    else if (!v5)
    {
      return;
    }
    v6 = (const void *)sub_20B924470();
    if (*(_DWORD *)(*(_QWORD *)(a2 + 8) + 4) == 2)
      v7 = CFSTR("zh-Hant");
    else
      v7 = CFSTR("zh-Hans");
    v8 = (const void *)sub_20B92406C(v6, v7, v4);
    sub_20B924684((const void **)(a2 + 24), v8);
    *(_BYTE *)(*(_QWORD *)(a2 + 8) + 96) = *(_QWORD *)(a2 + 24) != 0;
    sub_20B876164((const void **)(a2 + 16), v4);
  }
}

void sub_20B9245E4(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B924608(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 72);
  if (v2)
    sub_20B8756A8(*(_QWORD *)(v2 + 8), (const void *)a1);
  sub_20B924684((const void **)(a1 + 24), 0);
  sub_20B876164((const void **)(a1 + 16), 0);
  return a1;
}

void sub_20B924660(uint64_t a1)
{
  sub_20B924608(a1);
  JUMPOUT(0x20BD39CB0);
}

void sub_20B924684(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

_QWORD *sub_20B9246B8(_QWORD *a1, uint64_t a2)
{
  const void **v4;
  void *v5;
  const __CFString *v6;
  _Unwind_Exception *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  *a1 = &off_24C467A80;
  v9 = 0;
  v10 = &v9;
  v11 = 0x2000000000;
  v4 = (const void **)qword_25472B890;
  v12 = qword_25472B890;
  if (!qword_25472B890)
  {
    v5 = (void *)sub_20B924820();
    v4 = (const void **)dlsym(v5, "kITDecoderNeuralTypeValuePath");
    v10[3] = (uint64_t)v4;
    qword_25472B890 = (uint64_t)v4;
  }
  _Block_object_dispose(&v9, 8);
  if (!v4)
  {
    dlerror();
    v8 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v9, 8);
    _Unwind_Resume(v8);
  }
  if (*(_DWORD *)(a2 + 4) == 2)
    v6 = CFSTR("zh-Hant");
  else
    v6 = CFSTR("zh-Hans");
  a1[1] = sub_20B92406C(*v4, v6, 0);
  return a1;
}

uint64_t sub_20B9247A8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t sub_20B9247B0(uint64_t a1)
{
  sub_20B924684((const void **)(a1 + 8), 0);
  return a1;
}

void sub_20B9247DC(uint64_t a1)
{
  sub_20B924684((const void **)(a1 + 8), 0);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B924818(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t sub_20B924820()
{
  uint64_t v0;
  void *v2;

  if (qword_25472CE68)
    return qword_25472CE68;
  qword_25472CE68 = _sl_dlopen();
  v0 = qword_25472CE68;
  if (!qword_25472CE68)
  {
    v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

void sub_20B9248E0(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  *a1 = 0;
}

uint64_t sub_20B924910(uint64_t a1, const char *a2)
{
  sqlite3 *v3;
  uint64_t result;
  _DWORD *exception;

  v3 = *(sqlite3 **)(a1 + 16);
  if (!v3)
    goto LABEL_9;
  result = sqlite3_prepare_v2(v3, a2, -1, (sqlite3_stmt **)(a1 + 8), 0);
  if ((_DWORD)result)
  {
    if ((_DWORD)result == 26 || (_DWORD)result == 11)
    {
      exception = __cxa_allocate_exception(4uLL);
      *exception = 1;
      goto LABEL_10;
    }
LABEL_9:
    exception = __cxa_allocate_exception(4uLL);
    *exception = 4;
LABEL_10:
    __cxa_throw(exception, (struct type_info *)&unk_24C45B9C8, 0);
  }
  return result;
}

uint64_t sub_20B924988(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4, int a5)
{
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = a3;
  sub_20B924910(a1, a4);
  if (a2 && *(_QWORD *)(a1 + 8))
    sub_20B924C50(*(uint64_t ***)a1, (int *)a1, a5);
  return a1;
}

sqlite3_stmt *sub_20B9249E4(uint64_t *a1)
{
  uint64_t v2;
  sqlite3_stmt *result;
  uint64_t *v4;

  v2 = *a1;
  if (v2)
  {
    v4 = a1;
    sub_20B924EE4(v2, (unint64_t *)&v4);
  }
  result = (sqlite3_stmt *)a1[1];
  if (result)
  {
    result = (sqlite3_stmt *)sqlite3_finalize(result);
    a1[1] = 0;
  }
  return result;
}

uint64_t sub_20B924A2C(uint64_t a1)
{
  uint64_t result;
  _DWORD *exception;

  result = sqlite3_step(*(sqlite3_stmt **)(a1 + 8));
  if ((_DWORD)result == 26 || (_DWORD)result == 11)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = 1;
    __cxa_throw(exception, (struct type_info *)&unk_24C45B9C8, 0);
  }
  return result;
}

uint64_t sub_20B924A70(uint64_t a1, int a2, const void *a3, uint64_t a4, int a5)
{
  uint64_t *v7;

  if (a5 && !a4)
  {
    v7 = sub_20B947D18();
    a3 = (const void *)*v7;
    a4 = v7[1];
  }
  return sqlite3_bind_blob(*(sqlite3_stmt **)(a1 + 8), a2, a3, 2 * a4, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
}

void *sub_20B924AB0@<X0>(uint64_t a1@<X0>, int a2@<W1>, void **a3@<X8>)
{
  void *result;
  uint64_t v7;
  void *v8;
  const void *v9;

  result = (void *)sqlite3_column_bytes(*(sqlite3_stmt **)(a1 + 8), a2);
  if (result > 1)
  {
    v7 = (uint64_t)(int)result >> 1;
    sub_20B80FC98(a3, v7);
    v8 = *a3;
    v9 = sqlite3_column_blob(*(sqlite3_stmt **)(a1 + 8), a2);
    return memcpy(v8, v9, 2 * v7);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  return result;
}

void sub_20B924B3C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B924B58(uint64_t a1)
{
  sub_20B924B98((_QWORD *)a1);
  sub_20B8292CC(a1 + 24, *(_QWORD **)(a1 + 32));
  sub_20B8292CC(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

void sub_20B924B98(_QWORD *a1)
{
  _QWORD **v2;
  _QWORD *v3;
  _QWORD **v4;
  BOOL v5;
  _QWORD **v6;
  _QWORD *v7[2];

  sub_20B924F5C((uint64_t *)&v6, (uint64_t)a1);
  v2 = v6;
  if (v6 != v7)
  {
    do
    {
      sub_20B9249E4(v2[4]);
      v3 = v2[1];
      if (v3)
      {
        do
        {
          v4 = (_QWORD **)v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          v4 = (_QWORD **)v2[2];
          v5 = *v4 == v2;
          v2 = v4;
        }
        while (!v5);
      }
      v2 = v4;
    }
    while (v4 != v7);
  }
  sub_20B924CB4(a1);
  sub_20B8292CC((uint64_t)&v6, v7[0]);
}

void sub_20B924C38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  sub_20B8292CC((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t **sub_20B924C50(uint64_t **a1, int *a2, int a3)
{
  uint64_t **result;
  int v6;
  int *v7;

  v6 = a3;
  v7 = a2;
  sub_20B924D6C(a1, (unint64_t *)&v7, (uint64_t *)&v7);
  v7 = &v6;
  result = sub_20B924E24(a1 + 3, &v6, (uint64_t)&unk_20BA37B7A, &v7);
  result[5] = (uint64_t *)a2;
  return result;
}

void sub_20B924CB4(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  v2 = (uint64_t)(a1 + 3);
  v3 = (_QWORD *)a1[3];
  v4 = a1 + 4;
  if (v3 != a1 + 4)
  {
    do
    {
      v5 = v3[5];
      if (v5)
      {
        sub_20B9249E4((uint64_t *)v3[5]);
        MEMORY[0x20BD39CB0](v5, 0x20C40960023A9);
      }
      v6 = (_QWORD *)v3[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v3[2];
          v8 = *v7 == (_QWORD)v3;
          v3 = v7;
        }
        while (!v8);
      }
      v3 = v7;
    }
    while (v7 != v4);
  }
  sub_20B8292CC(v2, (_QWORD *)a1[4]);
  a1[4] = 0;
  a1[5] = 0;
  a1[3] = v4;
}

uint64_t *sub_20B924D6C(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x28uLL);
    v10[4] = *a3;
    sub_20B8296A0(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

uint64_t **sub_20B924E24(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x30uLL);
    v11[8] = **a4;
    *((_QWORD *)v11 + 5) = 0;
    sub_20B8296A0(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t sub_20B924EE4(uint64_t a1, unint64_t *a2)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;

  v2 = *(_QWORD **)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = (uint64_t *)(a1 + 8);
  do
  {
    v5 = v2[4];
    v6 = v5 >= v3;
    if (v5 >= v3)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (v6)
      v4 = v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t *)(a1 + 8) || v3 < v4[4])
    return 0;
  sub_20B8D9280((uint64_t **)a1, v4);
  operator delete(v4);
  return 1;
}

uint64_t *sub_20B924F5C(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_20B924FB0(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_20B924F98(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B8292CC(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_20B924FB0(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = sub_20B925034(v5, v6, v4 + 4, v4 + 4);
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_20B925034(uint64_t **a1, _QWORD *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t v11;

  v6 = (uint64_t **)sub_20B9250B8(a1, a2, &v11, &v10, a3);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    v7 = (uint64_t *)operator new(0x28uLL);
    v7[4] = *a4;
    sub_20B8296A0(a1, v11, v8, v7);
  }
  return v7;
}

_QWORD *sub_20B9250B8(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, unint64_t *a5)
{
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    v8 = *a2;
    if ((_QWORD *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (_QWORD *)*a2;
      do
      {
        v10 = v9;
        v9 = (_QWORD *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (_QWORD *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (v10[4] < *a5)
      goto LABEL_17;
    v16 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = v16;
          v18 = v16[4];
          if (v15 >= v18)
            break;
          v16 = (_QWORD *)*v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = (_QWORD *)v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (_QWORD *)a2[1];
    do
    {
      a4 = v12;
      v12 = (_QWORD *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (_QWORD *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    v20 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = v20;
          v22 = v20[4];
          if (v6 >= v22)
            break;
          v20 = (_QWORD *)*v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = (_QWORD *)v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void sub_20B925260(unsigned int a1@<W0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  char *v6;
  std::string *v7;
  __int128 v8;
  NSObject *v9;
  __int128 *p_ptr;
  std::string::size_type v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  _QWORD *v14;
  unint64_t v15;
  int8x8_t v16;
  unint64_t v17;
  uint8x8_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned __int8 **v21;
  unsigned __int8 *v22;
  uint64_t v23;
  unint64_t v24;
  NSObject *v25;
  os_signpost_id_t v26;
  NSObject *v27;
  unint64_t v28;
  NSObject *v29;
  __int128 *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_weak_owners;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint8x8_t v39;
  unint64_t v40;
  unsigned __int8 **v41;
  unsigned __int8 *i;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  _BYTE *v46;
  float v47;
  float v48;
  _BOOL8 v49;
  unint64_t v50;
  unint64_t v51;
  int8x8_t prime;
  void *v53;
  void *v54;
  uint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  uint8x8_t v58;
  unint64_t v59;
  uint8x8_t v60;
  uint64_t v61;
  _QWORD *v62;
  unint64_t v63;
  unsigned __int8 **v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  NSObject *v67;
  NSObject *v68;
  std::__shared_weak_count *v69;
  unint64_t *p_shared_owners;
  unint64_t v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  std::__shared_weak_count *v75;
  uint64_t v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  _QWORD v82[4];
  __int128 __p;
  uint64_t v84;
  unsigned int v85;
  __int128 ptr;
  int64_t v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  std::string v90;
  void *v91;
  _QWORD *v92;
  __int128 *v93;
  uint64_t v94;
  char v95;
  __int128 buf;
  char v97;
  uint64_t v98;

  v98 = *MEMORY[0x24BDAC8D0];
  v6 = sub_20B8D101C(a1);
  sub_20B80BBD0(&v90, v6);
  v7 = std::string::append(&v90, "-UniLM", 6uLL);
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v87 = v7->__r_.__value_.__r.__words[2];
  ptr = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v90.__r_.__value_.__l.__data_);
  v9 = sub_20B9A7C5C(0xDu);
  if (os_signpost_enabled(v9))
  {
    p_ptr = &ptr;
    if (v87 < 0)
      p_ptr = (__int128 *)ptr;
    LODWORD(v90.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v90.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_ptr;
    _os_signpost_emit_with_name_impl(&dword_20B7F7000, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "getSharedUniLanguageModel", "Creating UniLM with identifier [%s]", (uint8_t *)&v90, 0xCu);
  }
  v11 = MEMORY[0x24BDAC760];
  v82[0] = MEMORY[0x24BDAC760];
  v82[1] = 1174405120;
  v82[2] = sub_20B925CCC;
  v82[3] = &unk_24C46C360;
  if (SHIBYTE(v87) < 0)
  {
    sub_20B80ACE0(&__p, (void *)ptr, *((unint64_t *)&ptr + 1));
  }
  else
  {
    __p = ptr;
    v84 = v87;
  }
  v85 = a1;
  if (qword_25472C840 != -1)
    dispatch_once(&qword_25472C840, &unk_24C499600);
  v90.__r_.__value_.__r.__words[0] = v11;
  v90.__r_.__value_.__l.__size_ = 0x40000000;
  v90.__r_.__value_.__r.__words[2] = (std::string::size_type)sub_20B926618;
  v91 = &unk_24C49D4D8;
  v93 = &ptr;
  v94 = qword_25472C838;
  v95 = 0;
  v92 = v82;
  v12 = atomic_load((unsigned __int8 *)&qword_25472B8C0);
  if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_25472B8C0))
  {
    v79 = operator new();
    *(_OWORD *)v79 = 0u;
    *(_OWORD *)(v79 + 16) = 0u;
    *(_DWORD *)(v79 + 32) = 1065353216;
    qword_25472B8B8 = v79;
    __cxa_guard_release(&qword_25472B8C0);
  }
  v13 = atomic_load((unsigned __int8 *)&qword_25472B8C8);
  if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_25472B8C8))
  {
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDB380], &stru_254729380, &dword_20B7F7000);
    __cxa_guard_release(&qword_25472B8C8);
  }
  v88 = 0;
  v89 = 0;
  std::mutex::lock(&stru_254729380);
  v14 = (_QWORD *)qword_25472B8B8;
  v15 = sub_20B828414(qword_25472B8B8 + 24, (uint64_t)&ptr);
  v16 = (int8x8_t)v14[1];
  if (!*(_QWORD *)&v16)
    goto LABEL_31;
  v17 = v15;
  v18 = (uint8x8_t)vcnt_s8(v16);
  v18.i16[0] = vaddlv_u8(v18);
  v19 = v18.u32[0];
  if (v18.u32[0] > 1uLL)
  {
    v20 = v15;
    if (v15 >= *(_QWORD *)&v16)
      v20 = v15 % *(_QWORD *)&v16;
  }
  else
  {
    v20 = (*(_QWORD *)&v16 - 1) & v15;
  }
  v21 = *(unsigned __int8 ***)(*v14 + 8 * v20);
  if (!v21 || (v22 = *v21) == 0)
  {
LABEL_31:
    v25 = sub_20B9A7C5C(0xDu);
    v26 = os_signpost_id_make_with_pointer(v25, &ptr);
    v27 = sub_20B9A7C5C(0xDu);
    v28 = v26 - 1;
    if (v26 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v29 = v27;
      if (os_signpost_enabled(v27))
      {
        v30 = &ptr;
        if (v87 < 0)
          v30 = (__int128 *)ptr;
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v30;
        _os_signpost_emit_with_name_impl(&dword_20B7F7000, v29, OS_SIGNPOST_INTERVAL_BEGIN, v26, "SingletonResourceManagerLoad", "Load resource with key: [%s]", (uint8_t *)&buf, 0xCu);
      }
    }
    v31 = ((uint64_t (*)(std::string *))v90.__r_.__value_.__r.__words[2])(&v90);
    v32 = (std::__shared_weak_count *)operator new();
    v32->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v32->__shared_weak_owners_;
    v32->__vftable = (std::__shared_weak_count_vtbl *)&off_24C459708;
    v32->__shared_owners_ = 0;
    v32[1].__vftable = (std::__shared_weak_count_vtbl *)v31;
    v81 = v31;
    v88 = v31;
    v89 = v32;
    v34 = qword_25472B8B8;
    do
      v35 = __ldxr(p_shared_weak_owners);
    while (__stxr(v35 + 1, p_shared_weak_owners));
    v80 = a3;
    v36 = sub_20B828414(v34 + 24, (uint64_t)&ptr);
    v37 = v36;
    v38 = *(_QWORD *)(v34 + 8);
    if (v38)
    {
      v39 = (uint8x8_t)vcnt_s8((int8x8_t)v38);
      v39.i16[0] = vaddlv_u8(v39);
      v40 = v39.u32[0];
      if (v39.u32[0] > 1uLL)
      {
        v28 = v36;
        if (v36 >= v38)
          v28 = v36 % v38;
      }
      else
      {
        v28 = (v38 - 1) & v36;
      }
      v41 = *(unsigned __int8 ***)(*(_QWORD *)v34 + 8 * v28);
      if (v41)
      {
        for (i = *v41; i; i = *(unsigned __int8 **)i)
        {
          v43 = *((_QWORD *)i + 1);
          if (v43 == v37)
          {
            if ((sub_20B8288BC(v34 + 32, i + 16, (unsigned __int8 *)&ptr) & 1) != 0)
            {
              v77 = v26 - 1;
              a3 = v80;
              goto LABEL_114;
            }
          }
          else
          {
            if (v40 > 1)
            {
              if (v43 >= v38)
                v43 %= v38;
            }
            else
            {
              v43 &= v38 - 1;
            }
            if (v43 != v28)
              break;
          }
        }
      }
    }
    v44 = operator new(0x38uLL);
    v45 = (_QWORD *)(v34 + 16);
    *(_QWORD *)&buf = v44;
    *((_QWORD *)&buf + 1) = v34 + 16;
    v97 = 0;
    *v44 = 0;
    v44[1] = v37;
    v46 = v44 + 2;
    if (SHIBYTE(v87) < 0)
    {
      sub_20B80ACE0(v46, (void *)ptr, *((unint64_t *)&ptr + 1));
    }
    else
    {
      *(_OWORD *)v46 = ptr;
      v44[4] = v87;
    }
    v44[5] = 0;
    v44[6] = 0;
    v97 = 1;
    v47 = (float)(unint64_t)(*(_QWORD *)(v34 + 24) + 1);
    v48 = *(float *)(v34 + 32);
    if (v38 && (float)(v48 * (float)v38) >= v47)
    {
LABEL_104:
      v64 = *(unsigned __int8 ***)(*(_QWORD *)v34 + 8 * v28);
      i = (unsigned __int8 *)buf;
      if (v64)
      {
        *(_QWORD *)buf = *v64;
        v77 = v26 - 1;
        a3 = v80;
      }
      else
      {
        *(_QWORD *)buf = *(_QWORD *)(v34 + 16);
        *(_QWORD *)(v34 + 16) = i;
        *(_QWORD *)(*(_QWORD *)v34 + 8 * v28) = v45;
        v77 = v26 - 1;
        a3 = v80;
        if (!*(_QWORD *)i)
          goto LABEL_113;
        v65 = *(_QWORD *)(*(_QWORD *)i + 8);
        if ((v38 & (v38 - 1)) != 0)
        {
          if (v65 >= v38)
            v65 %= v38;
        }
        else
        {
          v65 &= v38 - 1;
        }
        v64 = (unsigned __int8 **)(*(_QWORD *)v34 + 8 * v65);
      }
      *v64 = i;
LABEL_113:
      *(_QWORD *)&buf = 0;
      ++*(_QWORD *)(v34 + 24);
      sub_20B876070((uint64_t *)&buf);
LABEL_114:
      v66 = (std::__shared_weak_count *)*((_QWORD *)i + 6);
      *((_QWORD *)i + 5) = v81;
      *((_QWORD *)i + 6) = v32;
      if (v66)
        std::__shared_weak_count::__release_weak(v66);
      v67 = sub_20B9A7C5C(0xDu);
      if (v77 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v68 = v67;
        if (os_signpost_enabled(v67))
        {
          LOWORD(buf) = 0;
          _os_signpost_emit_with_name_impl(&dword_20B7F7000, v68, OS_SIGNPOST_INTERVAL_END, v26, "SingletonResourceManagerLoad", (const char *)&unk_20BA9505F, (uint8_t *)&buf, 2u);
        }
      }
      goto LABEL_119;
    }
    v49 = 1;
    if (v38 >= 3)
      v49 = (v38 & (v38 - 1)) != 0;
    v50 = v49 | (2 * v38);
    v51 = vcvtps_u32_f32(v47 / v48);
    if (v50 <= v51)
      prime = (int8x8_t)v51;
    else
      prime = (int8x8_t)v50;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v38 = *(_QWORD *)(v34 + 8);
    if (*(_QWORD *)&prime > v38)
      goto LABEL_70;
    if (*(_QWORD *)&prime < v38)
    {
      v59 = vcvtps_u32_f32((float)*(unint64_t *)(v34 + 24) / *(float *)(v34 + 32));
      if (v38 < 3 || (v60 = (uint8x8_t)vcnt_s8((int8x8_t)v38), v60.i16[0] = vaddlv_u8(v60), v60.u32[0] > 1uLL))
      {
        v59 = std::__next_prime(v59);
      }
      else
      {
        v61 = 1 << -(char)__clz(v59 - 1);
        if (v59 >= 2)
          v59 = v61;
      }
      if (*(_QWORD *)&prime <= v59)
        prime = (int8x8_t)v59;
      if (*(_QWORD *)&prime >= v38)
      {
        v38 = *(_QWORD *)(v34 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_70:
          if (*(_QWORD *)&prime >> 61)
            sub_20B800BC0();
          v53 = operator new(8 * *(_QWORD *)&prime);
          v54 = *(void **)v34;
          *(_QWORD *)v34 = v53;
          if (v54)
            operator delete(v54);
          v55 = 0;
          *(int8x8_t *)(v34 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)v34 + 8 * v55++) = 0;
          while (*(_QWORD *)&prime != v55);
          v56 = (_QWORD *)*v45;
          if (*v45)
          {
            v57 = v56[1];
            v58 = (uint8x8_t)vcnt_s8(prime);
            v58.i16[0] = vaddlv_u8(v58);
            if (v58.u32[0] > 1uLL)
            {
              if (v57 >= *(_QWORD *)&prime)
                v57 %= *(_QWORD *)&prime;
            }
            else
            {
              v57 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)v34 + 8 * v57) = v45;
            v62 = (_QWORD *)*v56;
            if (*v56)
            {
              do
              {
                v63 = v62[1];
                if (v58.u32[0] > 1uLL)
                {
                  if (v63 >= *(_QWORD *)&prime)
                    v63 %= *(_QWORD *)&prime;
                }
                else
                {
                  v63 &= *(_QWORD *)&prime - 1;
                }
                if (v63 != v57)
                {
                  if (!*(_QWORD *)(*(_QWORD *)v34 + 8 * v63))
                  {
                    *(_QWORD *)(*(_QWORD *)v34 + 8 * v63) = v56;
                    goto LABEL_95;
                  }
                  *v56 = *v62;
                  *v62 = **(_QWORD **)(*(_QWORD *)v34 + 8 * v63);
                  **(_QWORD **)(*(_QWORD *)v34 + 8 * v63) = v62;
                  v62 = v56;
                }
                v63 = v57;
LABEL_95:
                v56 = v62;
                v62 = (_QWORD *)*v62;
                v57 = v63;
              }
              while (v62);
            }
          }
          v38 = (unint64_t)prime;
          goto LABEL_99;
        }
        v78 = *(void **)v34;
        *(_QWORD *)v34 = 0;
        if (v78)
          operator delete(v78);
        v38 = 0;
        *(_QWORD *)(v34 + 8) = 0;
      }
    }
LABEL_99:
    if ((v38 & (v38 - 1)) != 0)
    {
      if (v37 >= v38)
        v28 = v37 % v38;
      else
        v28 = v37;
    }
    else
    {
      v28 = (v38 - 1) & v37;
    }
    goto LABEL_104;
  }
  v23 = (uint64_t)(v14 + 4);
  while (1)
  {
    v24 = *((_QWORD *)v22 + 1);
    if (v24 == v17)
      break;
    if (v19 > 1)
    {
      if (v24 >= *(_QWORD *)&v16)
        v24 %= *(_QWORD *)&v16;
    }
    else
    {
      v24 &= *(_QWORD *)&v16 - 1;
    }
    if (v24 != v20)
      goto LABEL_31;
LABEL_30:
    v22 = *(unsigned __int8 **)v22;
    if (!v22)
      goto LABEL_31;
  }
  if ((sub_20B8288BC(v23, v22 + 16, (unsigned __int8 *)&ptr) & 1) == 0)
    goto LABEL_30;
  v73 = (std::__shared_weak_count *)*((_QWORD *)v22 + 6);
  if (!v73)
    goto LABEL_31;
  if (v73->__shared_owners_ == -1 || a2 != 0)
    goto LABEL_31;
  v75 = std::__shared_weak_count::lock(v73);
  if (v75)
    v76 = *((_QWORD *)v22 + 5);
  else
    v76 = 0;
  v88 = v76;
  v89 = v75;
LABEL_119:
  std::mutex::unlock(&stru_254729380);
  v69 = v89;
  *a3 = v88;
  a3[1] = (uint64_t)v69;
  if (v69)
  {
    p_shared_owners = (unint64_t *)&v69->__shared_owners_;
    do
      v71 = __ldxr(p_shared_owners);
    while (__stxr(v71 + 1, p_shared_owners));
    do
      v72 = __ldaxr(p_shared_owners);
    while (__stlxr(v72 - 1, p_shared_owners));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  if (SHIBYTE(v84) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v87) < 0)
    operator delete((void *)ptr);
}

void sub_20B925BF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  __cxa_guard_abort(&qword_25472B8C0);
  if (a22 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(a1);
}

uint64_t sub_20B925CCC(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  unsigned int v4;
  language_modeling::v1::LanguageModel *v5;
  uint64_t v6;
  char *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  char *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t *v17;
  uint64_t *v18;
  void **v19;
  uint64_t v20;
  language_modeling::v1::LanguageModelSession *v21;
  language_modeling::v1::LanguageModelSession *v22;
  _QWORD *v24;
  void *v25[2];
  char v26;
  std::string v27;
  void *__p;
  unsigned int *v29;
  uint64_t v30;
  unsigned int **v31;
  unsigned int *v32[2];
  void **v33;
  uint8_t buf[16];
  uint64_t v35;
  char v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v2 = sub_20B9A7C5C(7u);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    v24 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v24 = (_QWORD *)*v24;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v24;
    _os_log_debug_impl(&dword_20B7F7000, v2, OS_LOG_TYPE_DEBUG, "[getSharedUniLanguageModel] Actually creating UniLM with identifier [%s]", buf, 0xCu);
  }
  v3 = operator new();
  v4 = *(_DWORD *)(a1 + 56);
  *(_BYTE *)v3 = 0;
  v5 = (language_modeling::v1::LanguageModel *)operator new();
  v6 = language_modeling::v1::LanguageModel::LanguageModel(v5);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 8) = v6;
  v32[0] = 0;
  v32[1] = 0;
  v31 = v32;
  v7 = sub_20B8D101C(v4);
  sub_20B80BBD0(buf, v7);
  sub_20B80BBD0(&__p, (char *)*MEMORY[0x24BE5ED68]);
  v27.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v8 = sub_20B9262F0((uint64_t **)&v31, &__p, &v27);
  v9 = v8 + 7;
  if (*((_DWORD *)v8 + 20) == 1)
  {
    if (*((char *)v8 + 79) < 0)
      operator delete((void *)*v9);
    *(_OWORD *)v9 = *(_OWORD *)buf;
    v9[2] = v35;
    HIBYTE(v35) = 0;
    buf[0] = 0;
  }
  else
  {
    sub_20B9263F4((uint64_t)(v8 + 7), (__int128 *)buf);
  }
  if (SHIBYTE(v30) < 0)
    operator delete(__p);
  if (SHIBYTE(v35) < 0)
    operator delete(*(void **)buf);
  sub_20B80BBD0(&__p, (char *)*MEMORY[0x24BE5ED90]);
  *(_QWORD *)buf = &__p;
  v10 = sub_20B9262F0((uint64_t **)&v31, &__p, (_OWORD **)buf);
  v11 = (uint64_t)(v10 + 7);
  v12 = (char *)*MEMORY[0x24BE5ED58];
  if (*((_DWORD *)v10 + 20) == 1)
  {
    sub_20B8A741C((std::string *)(v10 + 7), v12);
  }
  else
  {
    sub_20B80BBD0(buf, v12);
    sub_20B9263F4(v11, (__int128 *)buf);
    if (SHIBYTE(v35) < 0)
      operator delete(*(void **)buf);
  }
  if (SHIBYTE(v30) < 0)
    operator delete(__p);
  language_modeling::v1::LanguageModel::init();
  if (!*(_DWORD *)buf)
  {
    v29 = 0;
    v30 = 0;
    __p = &v29;
    sub_20B80BBD0(&v27, (char *)*MEMORY[0x24BE5ED60]);
    v25[0] = &v27;
    v13 = sub_20B926514((uint64_t **)&__p, (void **)&v27.__r_.__value_.__l.__data_, (_OWORD **)v25);
    v14 = v13;
    v15 = *((unsigned int *)v13 + 20);
    if ((_DWORD)v15 != -1)
    {
      v16 = v13 + 7;
      if (!(_DWORD)v15)
      {
        *v16 = 3;
        goto LABEL_23;
      }
      ((void (*)(void **, _DWORD *))off_24C49D4C0[v15])(v25, v16);
    }
    *((_DWORD *)v14 + 14) = 3;
    *((_DWORD *)v14 + 20) = 0;
LABEL_23:
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v27.__r_.__value_.__l.__data_);
    std::to_string(&v27, 0xAuLL);
    sub_20B80BBD0(v25, (char *)*MEMORY[0x24BE5ED78]);
    v33 = v25;
    v17 = sub_20B926514((uint64_t **)&__p, v25, (_OWORD **)&v33);
    v18 = v17;
    v19 = (void **)(v17 + 7);
    v20 = *((unsigned int *)v17 + 20);
    if ((_DWORD)v20 != -1)
    {
      if ((_DWORD)v20 == 1)
      {
        if (*((char *)v17 + 79) < 0)
          operator delete(*v19);
        *(std::string *)v19 = v27;
        *((_BYTE *)&v27.__r_.__value_.__s + 23) = 0;
        v27.__r_.__value_.__s.__data_[0] = 0;
        goto LABEL_32;
      }
      ((void (*)(void ***, void **))off_24C49D4C0[v20])(&v33, v19);
    }
    *(std::string *)v19 = v27;
    memset(&v27, 0, sizeof(v27));
    *((_DWORD *)v18 + 20) = 1;
LABEL_32:
    if (v26 < 0)
    {
      operator delete(v25[0]);
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v27.__r_.__value_.__l.__data_);
    }
    language_modeling::v1::LanguageModel::makeSession();
    v21 = (language_modeling::v1::LanguageModelSession *)v27.__r_.__value_.__r.__words[0];
    v27.__r_.__value_.__r.__words[0] = 0;
    sub_20B8EE1F0((language_modeling::v1::LanguageModelSession **)(v3 + 16), v21);
    v22 = (language_modeling::v1::LanguageModelSession *)v27.__r_.__value_.__r.__words[0];
    v27.__r_.__value_.__r.__words[0] = 0;
    if (v22)
    {
      language_modeling::v1::LanguageModelSession::~LanguageModelSession(v22);
      MEMORY[0x20BD39CB0]();
    }
    *(_BYTE *)v3 = 1;
    sub_20B926470(v29);
  }
  if (v36 < 0)
    operator delete(*(void **)&buf[8]);
  sub_20B92624C(v32[0]);
  if (!*(_BYTE *)v3)
  {
    *(_QWORD *)buf = 0;
    sub_20B8EE1A0((uint64_t)buf, v3);
    return 0;
  }
  return v3;
}

void sub_20B92612C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29)
{
  if (a2)
    sub_20B854468(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B92624C(unsigned int *a1)
{
  uint64_t v2;
  char v3;

  if (a1)
  {
    sub_20B92624C(*(_QWORD *)a1);
    sub_20B92624C(*((_QWORD *)a1 + 1));
    v2 = a1[20];
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, unsigned int *))off_24C49D4B0[v2])(&v3, a1 + 14);
    a1[20] = -1;
    if (*((char *)a1 + 55) < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

void sub_20B9262DC(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

uint64_t *sub_20B9262F0(uint64_t **a1, void **a2, _OWORD **a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;

  v6 = a1 + 1;
  v5 = a1[1];
  if (!v5)
  {
    v8 = a1 + 1;
LABEL_9:
    v10 = (uint64_t *)operator new(0x58uLL);
    v11 = *a3;
    v12 = *((_QWORD *)*a3 + 2);
    *((_OWORD *)v10 + 2) = **a3;
    v10[6] = v12;
    *v11 = 0;
    v11[1] = 0;
    v11[2] = 0;
    *((_BYTE *)v10 + 56) = 0;
    *((_DWORD *)v10 + 20) = 0;
    *v10 = 0;
    v10[1] = 0;
    v10[2] = (uint64_t)v8;
    *v6 = v10;
    v13 = (uint64_t *)**a1;
    v14 = v10;
    if (v13)
    {
      *a1 = v13;
      v14 = *v6;
    }
    sub_20B82973C(a1[1], v14);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v10;
  }
  while (1)
  {
    while (1)
    {
      v8 = (uint64_t **)v5;
      v9 = v5 + 4;
      if ((sub_20B871BA8(a2, (void **)v5 + 4) & 0x80) == 0)
        break;
      v5 = *v8;
      v6 = v8;
      if (!*v8)
        goto LABEL_9;
    }
    if ((sub_20B871BA8(v9, a2) & 0x80) == 0)
      break;
    v6 = v8 + 1;
    v5 = v8[1];
    if (!v5)
      goto LABEL_9;
  }
  v10 = *v6;
  if (!*v6)
    goto LABEL_9;
  return v10;
}

uint64_t sub_20B9263F4(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  char v7;

  v4 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_24C49D4B0[v4])(&v7, a1);
  *(_DWORD *)(a1 + 24) = -1;
  v5 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v5;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a1 + 24) = 1;
  return a1;
}

void sub_20B926470(unsigned int *a1)
{
  uint64_t v2;
  char v3;

  if (a1)
  {
    sub_20B926470(*(_QWORD *)a1);
    sub_20B926470(*((_QWORD *)a1 + 1));
    v2 = a1[20];
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, unsigned int *))off_24C49D4C0[v2])(&v3, a1 + 14);
    a1[20] = -1;
    if (*((char *)a1 + 55) < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

void sub_20B926500(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

uint64_t *sub_20B926514(uint64_t **a1, void **a2, _OWORD **a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;

  v6 = a1 + 1;
  v5 = a1[1];
  if (!v5)
  {
    v8 = a1 + 1;
LABEL_9:
    v10 = (uint64_t *)operator new(0x58uLL);
    v11 = *a3;
    v12 = *((_QWORD *)*a3 + 2);
    *((_OWORD *)v10 + 2) = **a3;
    v10[6] = v12;
    *v11 = 0;
    v11[1] = 0;
    v11[2] = 0;
    *((_DWORD *)v10 + 14) = 0;
    *((_DWORD *)v10 + 20) = 0;
    *v10 = 0;
    v10[1] = 0;
    v10[2] = (uint64_t)v8;
    *v6 = v10;
    v13 = (uint64_t *)**a1;
    v14 = v10;
    if (v13)
    {
      *a1 = v13;
      v14 = *v6;
    }
    sub_20B82973C(a1[1], v14);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v10;
  }
  while (1)
  {
    while (1)
    {
      v8 = (uint64_t **)v5;
      v9 = v5 + 4;
      if ((sub_20B871BA8(a2, (void **)v5 + 4) & 0x80) == 0)
        break;
      v5 = *v8;
      v6 = v8;
      if (!*v8)
        goto LABEL_9;
    }
    if ((sub_20B871BA8(v9, a2) & 0x80) == 0)
      break;
    v6 = v8 + 1;
    v5 = v8[1];
    if (!v5)
      goto LABEL_9;
  }
  v10 = *v6;
  if (!*v6)
    goto LABEL_9;
  return v10;
}

uint64_t sub_20B926618(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  __int128 *v4;
  int v5;
  const void *v6;
  void *v7;
  __int128 v8;

  v2 = operator new();
  v4 = *(__int128 **)(a1 + 40);
  v3 = *(NSObject **)(a1 + 48);
  v5 = *(unsigned __int8 *)(a1 + 56);
  v6 = *(const void **)(a1 + 32);
  *(_QWORD *)v2 = 0;
  *(_QWORD *)(v2 + 8) = dispatch_group_create();
  *(_QWORD *)(v2 + 16) = v3;
  *(_QWORD *)(v2 + 24) = 0;
  v7 = _Block_copy(v6);
  *(_QWORD *)(v2 + 48) = 850045863;
  *(_QWORD *)(v2 + 32) = v7;
  *(_DWORD *)(v2 + 40) = 0;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_QWORD *)(v2 + 104) = 0;
  if (*((char *)v4 + 23) < 0)
  {
    sub_20B80ACE0((_BYTE *)(v2 + 112), *(void **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v8 = *v4;
    *(_QWORD *)(v2 + 128) = *((_QWORD *)v4 + 2);
    *(_OWORD *)(v2 + 112) = v8;
  }
  *(_QWORD *)(v2 + 136) = v2 + 48;
  *(_BYTE *)(v2 + 144) = 0;
  dispatch_retain(v3);
  if (!v5)
    sub_20B8EDEE4(v2);
  return v2;
}

void sub_20B9266FC(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::mutex *v2;
  void **v3;
  uint64_t v5;

  if (*(_BYTE *)(v1 + 144))
    std::mutex::unlock(*(std::mutex **)(v1 + 136));
  if (*(char *)(v1 + 135) < 0)
    operator delete(*v3);
  std::mutex::~mutex(v2);
  v5 = *(_QWORD *)v1;
  *(_QWORD *)v1 = 0;
  if (v5)
    sub_20B8EE1A0(v1, v5);
  MEMORY[0x20BD39CB0](v1, 0x10F2C40E01BBEB9);
  _Unwind_Resume(a1);
}

void sub_20B926770(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD39CB0);
}

uint64_t sub_20B926794(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    sub_20B926808(result);
    JUMPOUT(0x20BD39CB0);
  }
  return result;
}

uint64_t sub_20B9267C8(uint64_t a1, uint64_t a2)
{
  if (sub_20B811C14(a2, (uint64_t)&unk_24C458D38))
    return a1 + 24;
  else
    return 0;
}

uint64_t sub_20B926808(uint64_t a1)
{
  unsigned int v2;
  uint64_t *v3;
  dispatch_time_t v4;
  unsigned int v5;
  NSObject *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned int *)(a1 + 40));
  if (v2 == 1)
  {
    v3 = (uint64_t *)(a1 + 112);
    do
    {
      v4 = dispatch_time(0, 1000000);
      if (sub_20B8EDE64(a1, v4, 0))
        break;
      v5 = atomic_load((unsigned int *)(a1 + 40));
      if (v5 == 2)
        break;
      v6 = sub_20B9A7C5C(1u);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        v8 = a1 + 112;
        if (*(char *)(a1 + 135) < 0)
          v8 = *v3;
        *(_DWORD *)buf = 136315138;
        v12 = v8;
        _os_log_error_impl(&dword_20B7F7000, v6, OS_LOG_TYPE_ERROR, "Still waiting for resource [%s] to complete in background.", buf, 0xCu);
      }
      v7 = atomic_load((unsigned int *)(a1 + 40));
    }
    while (v7 == 1);
  }
  std::mutex::lock((std::mutex *)(a1 + 48));
  _Block_release(*(const void **)(a1 + 32));
  dispatch_release(*(dispatch_object_t *)(a1 + 8));
  dispatch_release(*(dispatch_object_t *)(a1 + 16));
  std::mutex::unlock((std::mutex *)(a1 + 48));
  if (*(_BYTE *)(a1 + 144))
    std::mutex::unlock(*(std::mutex **)(a1 + 136));
  if (*(char *)(a1 + 135) < 0)
    operator delete(*(void **)(a1 + 112));
  std::mutex::~mutex((std::mutex *)(a1 + 48));
  v9 = *(_QWORD *)a1;
  *(_QWORD *)a1 = 0;
  if (v9)
    sub_20B8EE1A0(a1, v9);
  return a1;
}

void sub_20B9269A0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20B854468(a1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B9269B0(uint64_t a1, unsigned __int8 *a2, unint64_t a3, uint64_t a4, unint64_t a5, int a6, uint64_t a7)
{
  uint64_t result;
  BOOL v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unsigned __int8 *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[6];
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  char *v29;
  _OWORD v30[16];
  uint64_t v31;
  uint64_t v32;

  result = 0;
  v32 = *MEMORY[0x24BDAC8D0];
  v23 = 0;
  v24 = a4;
  if (*(_QWORD *)(a1 + 24) >= 2uLL)
  {
    if (a2)
      v14 = a3 == 0;
    else
      v14 = 1;
    v15 = v14;
    if (v14)
    {
      v16 = 1;
LABEL_13:
      if (!sub_20B964600(a1, a5, &v24, &v23, a7, v16, 0, a3) && ((v15 | a6 ^ 1) & 1) == 0)
      {
        v22 = 2 * sub_20B87C1A0((uint64_t)a2, a3 >> 1);
        if (v22)
        {
          v31 = 0;
          memset(v30, 0, sizeof(v30));
          v27 = 0u;
          v28 = 0;
          v25[0] = a1;
          v25[1] = 0;
          v25[2] = 0;
          v25[3] = a2;
          v25[4] = a3;
          v25[5] = a5;
          v26 = (unint64_t)a7;
          LODWORD(v27) = 2;
          v29 = (char *)v30 + (a3 - v22) + 2;
          LOBYTE(v30[0]) = 1;
          BYTE1(v30[0]) = a3 != v22;
          sub_20B926B88(a1, (uint64_t)v25, 1, a2, a3 - v22, &a2[(a3 - v22)], v22, 0, 0.0, 0, (unint64_t *)&v23, 0, 0);
        }
      }
      return v23;
    }
    else
    {
      v17 = *(_QWORD *)(a1 + 8);
      v18 = 1;
      v19 = a3;
      v20 = a2;
      while (1)
      {
        v21 = *v20++;
        v16 = *(_DWORD *)(v17 + 8 * v18) + v21 + 1;
        if (*(_DWORD *)(v17 + 8 * v16 + 4) != v18)
          return 0;
        v18 = v16;
        if (!--v19)
          goto LABEL_13;
      }
    }
  }
  return result;
}

BOOL sub_20B926B88(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, int a5, _WORD *a6, uint64_t a7, _WORD *a8, float a9, unsigned int a10, unint64_t *a11, BOOL a12, int a13)
{
  uint64_t v13;
  uint64_t v15;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  BOOL v28;
  float v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  _WORD *v36;
  int v37;
  BOOL v38;
  uint64_t v39;
  _WORD *v40;
  float *v41;
  unint64_t v42;
  unsigned __int16 v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  void *v47;
  _WORD *v48;
  int v49;
  uint64_t v50;
  const void *v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t *v59;
  _WORD *v61;
  int v62;
  uint64_t v63;
  unsigned int i;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned __int8 *v68;
  _WORD *v69;
  unsigned __int16 *v70;
  uint64_t v71;
  uint64_t v72;
  _WORD *__src;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  _WORD v78[8];
  _WORD v79[2];
  float v80;
  uint64_t v81;

  v13 = a7;
  v15 = a3;
  v18 = a1;
  v19 = a12;
  v81 = *MEMORY[0x24BDAC8D0];
  v20 = *(_QWORD *)(a1 + 8);
  v21 = *(unsigned int *)(v20 + 8 * a3);
  v22 = *(_DWORD *)(a2 + 64);
  __src = a6;
  if (v22 == 2)
  {
    if (a7 | a5 | a10)
      goto LABEL_10;
    if (*(_DWORD *)(v20 + 8 * v21 + 4) == (_DWORD)a3)
    {
      if (a13)
      {
        v26 = *(_DWORD *)(v20 + 8 * v21);
        if (v26 < 0)
        {
          if (*(_QWORD *)(a2 + 40))
          {
            v27 = -v26;
            if (*(_BYTE *)(a2 + 81))
              v28 = !a12;
            else
              v28 = 1;
            v29 = 0.0;
            if (!v28)
              v29 = a9;
            v30 = *a11;
            v31 = *(_QWORD *)(a2 + 48) + 24 * *a11;
            *(_WORD *)(v31 + 12) = *(_DWORD *)(a2 + 88) - a2 + *(_DWORD *)(a2 + 72) - 98;
            *(_BYTE *)(v31 + 1) = a12;
            *(_BYTE *)v31 = *(_BYTE *)(a2 + 82);
            *(float *)(v31 + 4) = v29;
            *(_DWORD *)(v31 + 8) = v27;
            *a11 = v30 + 1;
            if (v30 + 1 >= *(_QWORD *)(a2 + 40))
              return 1;
          }
          else
          {
            ++*a11;
          }
        }
      }
    }
    if (*(_BYTE *)(a2 + 97))
    {
      v63 = (v21 + 1);
      for (i = 257; i >= 2; --i)
      {
        if (*(_DWORD *)(*(_QWORD *)(v18 + 8) + 8 * v63 + 4) == (_DWORD)v15)
        {
          v65 = v13;
          ++*(_QWORD *)(a2 + 72);
          v25 = 1;
          v66 = v18;
          v67 = v18;
          v68 = a4;
          v69 = a8;
          if (sub_20B926B88(v67, a2, v63, a4, 0, a6, 0, a9))
            return v25;
          --*(_QWORD *)(a2 + 72);
          a6 = __src;
          v13 = v65;
          a8 = v69;
          a4 = v68;
          v18 = v66;
          v15 = a3;
        }
        v63 = (v63 + 1);
      }
    }
    goto LABEL_10;
  }
  if (v22 != 1)
  {
    if (!v22 && !(a7 | a5 | a10))
    {
      if (*(_DWORD *)(v20 + 8 * v21 + 4) != (_DWORD)a3)
        return 0;
      v23 = *(_DWORD *)(v20 + 8 * v21);
      return v23 < 0 && sub_20B92811C(a2, a12, -v23, a11, a9);
    }
LABEL_10:
    if (a5)
    {
      v20 = *(_QWORD *)(v18 + 8);
      LODWORD(v21) = *(_DWORD *)(v20 + 8 * v15);
LABEL_13:
      v24 = v21 + *a4 + 1;
      return *(_DWORD *)(v20 + 8 * v24 + 4) == (_DWORD)v15
          && sub_20B926B88(v18, a2, v24, a4 + 1, (a5 - 1), a6, v13, a9);
    }
    goto LABEL_29;
  }
  if (a5)
    goto LABEL_13;
  if (*(_DWORD *)(v20 + 8 * v21 + 4) == (_DWORD)a3)
  {
    v32 = *(_DWORD *)(v20 + 8 * v21);
    if (v32 < 0)
    {
      v61 = a8;
      v62 = sub_20B92811C(a2, a12, -v32, a11, a9);
      a8 = v61;
      a6 = __src;
      if (v62)
        return 1;
    }
  }
LABEL_29:
  if (a10)
  {
    if (!*(_BYTE *)(a2 + 81)
      || (v33 = (char *)a8 - *(_QWORD *)(a2 + 24), (v33 & 1) != 0)
      || (v34 = *(unsigned int *)(a2 + 32), (v34 & 1) != 0)
      || v34 < 2
      || (v35 = *(_QWORD *)(a2 + 56), (v35 & 1) != 0)
      || (v36 = a8,
          v37 = sub_20B8B1CB4(*(int **)(a2 + 8), *(CFArrayRef **)(a2 + 16), a9, (v33 >> 1) + 1, (v35 + (unint64_t)v33) >> 1, (unint64_t)(v35 + v34) >> 1, (uint64_t)v79, 0xEuLL), a8 = v36, a6 = __src, !v37))
    {
      v79[0] = *a8;
      v80 = a9;
      v37 = 1;
    }
    else if (v37 < 1)
    {
      return 0;
    }
    v71 = v18;
    v72 = v15;
    v39 = 0;
    v70 = a8;
    v40 = a8 + 1;
    v38 = 1;
    v41 = (float *)v79;
    v42 = v37;
    while (1)
    {
      v76 = 0;
      v77 = 0;
      if (!v19)
        v19 = *(unsigned __int16 *)v41 != *v70;
      v43 = a10 < 4 || *(_QWORD *)(a2 + 16) ? 0 : *v40;
      if (!*(_QWORD *)(a2 + 8) && !*(_QWORD *)(a2 + 16)
        || *(_BYTE *)(a2 + 82) && (!*(_BYTE *)(a2 + 80) || !*(_BYTE *)(a2 + 96)))
      {
        break;
      }
      v44 = sub_20B87B054(v19, a6, v13, *(unsigned __int16 *)v41, v78, 16, &v77, (uint64_t *)&v76, v43);
      a6 = __src;
      if ((_DWORD)v44 != -2)
      {
        v45 = v44;
        if ((_DWORD)v44 == -1)
          return v38;
        v46 = v76;
        if (v76 <= 7)
        {
          v47 = *(void **)(a2 + 88);
          if (!(_DWORD)v44)
          {
LABEL_59:
            v49 = sub_20B926B88(v71, a2, v72, v78, v45, v77, v46, v41[1]);
            a6 = __src;
            if (v49)
              return v38;
            *(_QWORD *)(a2 + 88) = v47;
            goto LABEL_61;
          }
LABEL_57:
          memcpy(v47, a6, v13);
          v48 = (_WORD *)(*(_QWORD *)(a2 + 88) + v13);
          *(_QWORD *)(a2 + 88) = v48;
          v46 = v76;
          if (!v76)
          {
            *v48 = *(_WORD *)v41;
            *(_QWORD *)(a2 + 88) += 2;
            v46 = v76;
          }
          goto LABEL_59;
        }
      }
LABEL_61:
      v38 = ++v39 < v42;
      v41 += 2;
      if (v42 == v39)
        return 0;
    }
    v78[0] = *(_WORD *)v41;
    v76 = 0;
    v77 = 0;
    v45 = 2;
    v47 = *(void **)(a2 + 88);
    goto LABEL_57;
  }
  if (!(_DWORD)v13)
    return 0;
  if (!*(_BYTE *)(a2 + 96))
    return 0;
  v50 = *(_QWORD *)(a2 + 88);
  v51 = a6;
  v52 = sub_20B87B784((char *)a6, v13);
  if (!v52)
    return 0;
  v53 = v52;
  v75 = v50;
  memcpy(*(void **)(a2 + 88), v51, v13);
  *(_QWORD *)(a2 + 88) += v13;
  if (*(_DWORD *)(a2 + 32) == (_DWORD)v13 && *(_DWORD *)(a2 + 64) == 2)
    *(_BYTE *)(a2 + 97) = 0;
  v54 = *(_QWORD *)v53;
  if (*((_QWORD *)v53 + 1) == *(_QWORD *)v53)
  {
LABEL_77:
    *(_QWORD *)(a2 + 88) = v75;
    return 0;
  }
  v55 = 0;
  v56 = 0;
  v25 = 1;
  while (1)
  {
    v57 = (uint64_t *)(v54 + v55);
    if (*((char *)v57 + 23) < 0)
    {
      v59 = (uint64_t *)*v57;
      v58 = v57[1];
    }
    else
    {
      v58 = *((unsigned __int8 *)v57 + 23);
      v59 = v57;
    }
    if (sub_20B926B88(v18, a2, v15, v59, v58, 0, 0, a9))
      return v25;
    ++v56;
    v54 = *(_QWORD *)v53;
    v55 += 24;
    if (v56 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v53 + 1) - *(_QWORD *)v53) >> 3))
      goto LABEL_77;
  }
}

unint64_t sub_20B927224(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, int a7)
{
  uint64_t v7;
  unint64_t v9;
  uint64_t v10;

  v7 = 0;
  v10 = a4;
  v9 = 0;
  if (*(_QWORD *)(a1 + 24) >= 2uLL)
  {
    sub_20B927284(a1, a5, &v10, &v9, a6, 1u, a2, a3, a7, 0);
    return v9;
  }
  return v7;
}

BOOL sub_20B927284(uint64_t a1, unint64_t a2, _QWORD *a3, unint64_t *a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, int a9, int a10)
{
  int v14;
  uint64_t v17;
  uint64_t v18;
  uint64_t **v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v34;

  v14 = a10;
  if (a8)
  {
    v17 = 0;
    v18 = 0;
    while (1)
    {
      if (a7)
      {
        if ((_DWORD)a8 + (_DWORD)v17)
        {
          if ((((_BYTE)a8 + (_BYTE)v17) & 1) == 0)
          {
            v19 = sub_20BA0225C(*(unsigned __int16 *)(a7 + v18), a9);
            if (v19)
              break;
          }
        }
      }
      v20 = *(_QWORD *)(a1 + 8);
      v21 = *(_DWORD *)(v20 + 8 * a6) + *(unsigned __int8 *)(a7 + v18) + 1;
      if (*(_DWORD *)(v20 + 8 * v21 + 4) != a6)
        return 0;
      ++v18;
      --v17;
      a6 = v21;
      if (!(a8 + v17))
      {
        a6 = v21;
        goto LABEL_11;
      }
    }
    v34 = a2;
    v24 = *v19;
    v25 = (char *)v19[1] - (char *)*v19;
    if ((int)(v25 >> 1) >= 1)
    {
      v26 = 0;
      v27 = v25 & 0x1FFFFFFFELL;
      while (1)
      {
        v28 = v14 || v26 == 0;
        v29 = *(_QWORD *)(a1 + 8);
        if (!v28)
          v14 = 1;
        v30 = *(_DWORD *)(v29 + 8 * a6) + *((unsigned __int8 *)v24 + v26) + 1;
        if (*(_DWORD *)(v29 + 8 * v30 + 4) == a6
          && *(_DWORD *)(v29
                       + 8 * (*(_DWORD *)(v29 + 8 * v30) + *((unsigned __int8 *)v24 + v26 + 1) + 1)
                       + 4) == (_DWORD)v30
          && sub_20B927284(a1, v34, a3, a4, a5))
        {
          break;
        }
        v26 += 2;
        if (v27 == v26)
          return 0;
      }
      return 1;
    }
    return 0;
  }
  v20 = *(_QWORD *)(a1 + 8);
LABEL_11:
  v22 = *(unsigned int *)(v20 + 8 * a6);
  if (*(_DWORD *)(v20 + 8 * v22 + 4) != a6)
    return 0;
  v23 = *(_DWORD *)(v20 + 8 * v22);
  if ((v23 & 0x80000000) == 0)
    return 0;
  if (*a3)
  {
    --*a3;
    return 0;
  }
  if (!a2)
    return 0;
  v31 = *a4;
  v32 = a5 + 24 * *a4;
  *(_WORD *)(v32 + 12) = (a10 != 0) << 8;
  *a4 = ++v31;
  *(_DWORD *)(v32 + 8) = -v23;
  return v31 >= a2;
}

unint64_t sub_20B9274A8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  unint64_t v8;

  v6 = 0;
  v8 = 0;
  if (*(_QWORD *)(a1 + 24) >= 2uLL)
  {
    sub_20B927500(a1, a4, &v8, a5, 1u, a2, a3, a2, a6, 0);
    return v8;
  }
  return v6;
}

uint64_t sub_20B927500(uint64_t a1, unint64_t a2, unint64_t *a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, __int16 a8, int a9, int a10)
{
  int v16;
  uint64_t v17;
  int v18;
  __int16 v19;
  uint64_t **v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  __int16 v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  __int16 v40;
  unint64_t v41;
  __int16 v43;

  if (!a7)
    return 0;
  v16 = 0;
  v17 = 0;
  v18 = a10;
  v19 = a6 - a8;
  while (1)
  {
    if (a6)
    {
      if ((_DWORD)a7 != (_DWORD)v17 && (((_DWORD)a7 + v16) & 1) == 0)
      {
        v20 = sub_20BA0225C(*(unsigned __int16 *)(a6 + v17), a9);
        if (v20)
          break;
      }
    }
    v21 = *(_QWORD *)(a1 + 8);
    v22 = *(_DWORD *)(v21 + 8 * a5) + *(unsigned __int8 *)(a6 + v17) + 1;
    if (*(_DWORD *)(v21 + 8 * v22 + 4) != a5)
      return 0;
    v23 = *(unsigned int *)(v21 + 8 * v22);
    if (*(_DWORD *)(v21 + 8 * v23 + 4) == (_DWORD)v22)
    {
      if (a2)
      {
        v24 = *(_DWORD *)(v21 + 8 * v23);
        if (v24 < 0)
        {
          v25 = *a3;
          v26 = a4 + 24 * *a3;
          v27 = a10 ? (v19 + v17 + 1) | 0x100 : v19 + (unsigned __int16)v17 + 1;
          *(_WORD *)(v26 + 12) = v27;
          *a3 = v25 + 1;
          *(_DWORD *)(v26 + 8) = -v24;
          if (v25 + 1 >= a2)
            return 1;
        }
      }
    }
    ++v17;
    --v16;
    a5 = v22;
    if (a7 == v17)
      return 0;
  }
  v28 = *v20;
  v29 = (char *)v20[1] - (char *)*v20;
  if ((int)(v29 >> 1) < 1)
    return 0;
  v30 = 0;
  v43 = a6 - a8 + v17 + 2;
  v31 = v29 & 0x1FFFFFFFELL;
  while (1)
  {
    if (v18)
      v32 = 1;
    else
      v32 = v30 == 0;
    v33 = *(_QWORD *)(a1 + 8);
    if (!v32)
      v18 = 1;
    v34 = *(_DWORD *)(v33 + 8 * a5) + *((unsigned __int8 *)v28 + v30) + 1;
    if (*(_DWORD *)(v33 + 8 * v34 + 4) == a5)
    {
      v35 = *(_DWORD *)(v33 + 8 * v34) + *((unsigned __int8 *)v28 + v30 + 1) + 1;
      if (*(_DWORD *)(v33 + 8 * v35 + 4) == (_DWORD)v34)
      {
        v36 = *(unsigned int *)(v33 + 8 * v35);
        if (*(_DWORD *)(v33 + 8 * v36 + 4) == (_DWORD)v35)
        {
          v37 = *(_DWORD *)(v33 + 8 * v36);
          if (v37 < 0)
          {
            v38 = *a3;
            v39 = a4 + 24 * *a3;
            v40 = v43;
            if (v18)
              v40 = v43 | 0x100;
            *(_WORD *)(v39 + 12) = v40;
            v41 = v38 + 1;
            *a3 = v41;
            *(_DWORD *)(v39 + 8) = -v37;
            if (v41 >= a2)
              break;
          }
        }
        if (sub_20B927500(a1, a2, a3, a4))
          break;
      }
    }
    v30 += 2;
    if (v31 == v30)
      return 0;
  }
  return 1;
}

unint64_t sub_20B92778C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, int a7)
{
  uint64_t v7;
  unint64_t v9;
  uint64_t v10;

  v7 = 0;
  v10 = a4;
  v9 = 0;
  if (*(_QWORD *)(a1 + 24) >= 2uLL)
  {
    sub_20B9277F0(a1, a5, &v10, &v9, a6, 1u, a2, a3, a2, a7, 0);
    return v9;
  }
  return v7;
}

uint64_t sub_20B9277F0(uint64_t a1, unint64_t a2, _QWORD *a3, unint64_t *a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11)
{
  unsigned int v12;
  int v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t **v19;
  uint64_t v20;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v12 = a6;
  v15 = a11;
  if (!a8)
    return sub_20B9281A0(a1, a2, a3, a4, a5, a6, 0, a7 - a9, a11);
  v17 = 0;
  v18 = 0;
  while (1)
  {
    if (a7)
    {
      if ((_DWORD)a8 + (_DWORD)v17)
      {
        if ((((_BYTE)a8 + (_BYTE)v17) & 1) == 0)
        {
          v19 = sub_20BA0225C(*(unsigned __int16 *)(a7 + v18), a10);
          if (v19)
            break;
        }
      }
    }
    v20 = *(_QWORD *)(a1 + 8);
    a6 = *(_DWORD *)(v20 + 8 * v12) + *(unsigned __int8 *)(a7 + v18) + 1;
    if (*(_DWORD *)(v20 + 8 * a6 + 4) != v12)
      return 0;
    ++v18;
    --v17;
    v12 = a6;
    if (!(a8 + v17))
      return sub_20B9281A0(a1, a2, a3, a4, a5, a6, 0, a7 - a9, a11);
  }
  v22 = *v19;
  v23 = (char *)v19[1] - (char *)*v19;
  if ((int)(v23 >> 1) < 1)
    return 0;
  v29 = a5;
  v24 = 0;
  v25 = v23 & 0x1FFFFFFFELL;
  while (1)
  {
    v26 = v15 || v24 == 0;
    v27 = *(_QWORD *)(a1 + 8);
    if (!v26)
      v15 = 1;
    v28 = *(_DWORD *)(v27 + 8 * v12) + *((unsigned __int8 *)v22 + v24) + 1;
    if (*(_DWORD *)(v27 + 8 * v28 + 4) == v12
      && *(_DWORD *)(v27 + 8 * (*(_DWORD *)(v27 + 8 * v28) + *((unsigned __int8 *)v22 + v24 + 1) + 1) + 4) == (_DWORD)v28
      && sub_20B9277F0(a1, a2, a3, a4, v29))
    {
      break;
    }
    v24 += 2;
    if (v25 == v24)
      return 0;
  }
  return 1;
}

uint64_t sub_20B9279D4(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, _QWORD *a8)
{
  unsigned int v12;
  int v16;
  uint64_t v17;
  uint64_t **v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t result;
  unint64_t v26;
  uint64_t v27;
  _BYTE *i;
  uint64_t v29;
  uint64_t v30;

  v12 = a2;
  if (a4)
  {
    v16 = 0;
    v17 = 0;
    while (1)
    {
      if (a3)
      {
        if ((_DWORD)a4 != (_DWORD)v17 && (((_DWORD)a4 + v16) & 1) == 0)
        {
          v18 = sub_20BA0225C(*(unsigned __int16 *)(a3 + v17), 14);
          if (v18)
            break;
        }
      }
      v19 = *(_QWORD *)(a1 + 8);
      v20 = *(unsigned __int8 *)(a3 + v17);
      v21 = *(_DWORD *)(v19 + 8 * v12) + v20 + 1;
      if (*(_DWORD *)(v19 + 8 * v21 + 4) != v12)
        return 0;
      *(_BYTE *)(a7 + v17++) = v20;
      --v16;
      v12 = v21;
      if (a4 == v17)
      {
        a7 += v17;
        goto LABEL_11;
      }
    }
    v26 = (char *)v18[1] - (char *)*v18;
    if ((int)(v26 >> 1) >= 1)
    {
      v27 = (v26 >> 1);
      for (i = (char *)*v18 + 1; ; i += 2)
      {
        *(_BYTE *)(a7 + v17) = *(i - 1);
        v29 = *(_QWORD *)(a1 + 8);
        v30 = *(_DWORD *)(v29 + 8 * v12) + *(i - 1) + 1;
        if (*(_DWORD *)(v29 + 8 * v30 + 4) == v12)
        {
          *(_BYTE *)(a7 + v17 + 1) = *i;
          if (*(_DWORD *)(*(_QWORD *)(a1 + 8)
                         + 8 * (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 8 * v30) + *i + 1)
                         + 4) == (_DWORD)v30)
          {
            if (sub_20B9279D4(a1))
              break;
          }
        }
        if (!--v27)
          return 0;
      }
      return 1;
    }
  }
  else
  {
    v21 = a2;
LABEL_11:
    v22 = *(_QWORD *)(a1 + 8);
    v23 = *(unsigned int *)(v22 + 8 * v21);
    if (*(_DWORD *)(v22 + 8 * v23 + 4) == v21)
    {
      v24 = *(_DWORD *)(v22 + 8 * v23);
      if (v24 < 0)
      {
        result = 0;
        if (-v24 != a5)
          return result;
        *a8 = a7 - a6;
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_20B927BCC(uint64_t a1, unsigned __int8 *a2, uint64_t a3, int a4, uint64_t a5, int a6)
{
  uint64_t v6;
  unsigned int v7;
  _BYTE *v8;
  unsigned int v9;
  uint64_t v10;
  char v11;
  int v12;
  uint64_t v14;

  v6 = 0;
  v14 = 0;
  if (*(_QWORD *)(a1 + 24) >= 2uLL)
  {
    v7 = 1;
    v8 = (_BYTE *)a5;
    if (a2 && a3)
    {
      v9 = 1;
      v8 = (_BYTE *)a5;
      while (1)
      {
        v10 = *(_QWORD *)(a1 + 8);
        v12 = *a2++;
        v11 = v12;
        v7 = *(_DWORD *)(v10 + 8 * v9) + v12 + 1;
        if (*(_DWORD *)(v10 + 8 * v7 + 4) != v9)
          return 0;
        *v8++ = v11;
        v9 = v7;
        if (!--a3)
          goto LABEL_7;
      }
    }
    else
    {
LABEL_7:
      sub_20B927C6C(a1, v7, a6, a4, a5, v8, &v14);
      return v14;
    }
  }
  return v6;
}

uint64_t sub_20B927C6C(uint64_t a1, unsigned int a2, int a3, int a4, uint64_t a5, _BYTE *a6, _QWORD *a7)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;

  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(unsigned int *)(v10 + 8 * a2);
  if (a3 && *(_DWORD *)(v10 + 8 * v11 + 4) == a2 && (v12 = *(_DWORD *)(v10 + 8 * v11), v12 < 0) && -v12 == a4)
  {
    *a7 = &a6[-a5];
    return 1;
  }
  else
  {
    v14 = 0;
    v15 = v11 + 1;
    v13 = 1;
    while (1)
    {
      *a6 = v14;
      if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 8 * (v15 + v14) + 4) == a2)
      {
        if (sub_20B927C6C(a1))
          break;
      }
      if (++v14 == 256)
        return 0;
    }
  }
  return v13;
}

uint64_t sub_20B927D64(uint64_t a1, uint64_t a2, uint64_t a3, int a4, _BYTE *a5)
{
  uint64_t v5;
  uint64_t v7;

  v5 = 0;
  v7 = 0;
  if (*(_QWORD *)(a1 + 24) >= 2uLL)
  {
    sub_20B927DB8((uint64_t **)a1, 1u, a2, a3, a4, (uint64_t)a5, a5, &v7);
    return v7;
  }
  return v5;
}

uint64_t **sub_20B927DB8(uint64_t **result, unsigned int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, _BYTE *a7, _QWORD *a8)
{
  unsigned int v11;
  uint64_t v12;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;

  v11 = a2;
  v12 = (uint64_t)result;
  if (!a4)
    return (uint64_t **)sub_20B927C6C(v12, a2, 0, a5, a6, a7, a8);
  v24 = a8;
  v15 = 0;
  v16 = 0;
  while (1)
  {
    if (a3)
    {
      if ((_DWORD)a4 != (_DWORD)v16 && (((_DWORD)a4 + v15) & 1) == 0)
      {
        result = sub_20BA0225C(*(unsigned __int16 *)(a3 + v16), 14);
        if (result)
          break;
      }
    }
    v17 = *(_QWORD *)(v12 + 8);
    v18 = *(unsigned __int8 *)(a3 + v16);
    a2 = *(_DWORD *)(v17 + 8 * v11) + v18 + 1;
    if (*(_DWORD *)(v17 + 8 * a2 + 4) != v11)
      return result;
    a7[v16++] = v18;
    --v15;
    v11 = a2;
    if (a4 == v16)
    {
      a7 += v16;
      a8 = v24;
      return (uint64_t **)sub_20B927C6C(v12, a2, 0, a5, a6, a7, a8);
    }
  }
  v19 = (char *)result[1] - (char *)*result;
  if ((int)(v19 >> 1) >= 1)
  {
    v20 = (v19 >> 1);
    v21 = (char *)*result + 1;
    do
    {
      a7[v16] = *(v21 - 1);
      v22 = *(_QWORD *)(v12 + 8);
      v23 = *(_DWORD *)(v22 + 8 * v11) + *(v21 - 1) + 1;
      if (*(_DWORD *)(v22 + 8 * v23 + 4) == v11)
      {
        a7[v16 + 1] = *v21;
        if (*(_DWORD *)(*(_QWORD *)(v12 + 8)
                       + 8 * (*(_DWORD *)(*(_QWORD *)(v12 + 8) + 8 * v23) + *v21 + 1)
                       + 4) == (_DWORD)v23)
          result = (uint64_t **)sub_20B927DB8(v12);
      }
      v21 += 2;
      --v20;
    }
    while (v20);
  }
  return result;
}

unint64_t sub_20B927F98(uint64_t a1, _WORD *a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, char a10)
{
  unint64_t v14;
  _QWORD v15[8];
  __int128 v16;
  uint64_t v17;
  char *v18;
  _OWORD v19[16];
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 24) < 2uLL)
    return 0;
  v20 = 0;
  memset(v19, 0, sizeof(v19));
  v17 = 0x10000;
  v15[0] = 0;
  v15[1] = a6;
  v15[2] = a7;
  v15[3] = a2;
  v15[4] = a3;
  v15[5] = a4;
  v15[6] = a5;
  v15[7] = a8;
  BYTE1(v17) = a10;
  v16 = a9;
  v18 = (char *)v19 + 2;
  BYTE1(v19[0]) = 1;
  v14 = 0;
  if (!sub_20B926B88(a1, (uint64_t)v15, 1, 0, 0, 0, 0, a2, 0.0, a3, &v14, 0, 0))
  {
    LOBYTE(v19[0]) = (_DWORD)v16 == 2;
    BYTE2(v17) = 0;
    *((_QWORD *)&v16 + 1) = 0;
    sub_20B926B88(a1, (uint64_t)v15, 1, 0, 0, 0, 0, a2, 0.0, a3, &v14, 0, 0);
  }
  return v14;
}

uint64_t sub_20B92811C(uint64_t a1, int a2, int a3, unint64_t *a4, float a5)
{
  unint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;

  if (*(_QWORD *)(a1 + 40))
  {
    v5 = *a4;
    v6 = *(_DWORD *)(a1 + 72);
    v7 = *a4 + 1;
    *a4 = v7;
    v8 = *(_QWORD *)(a1 + 40);
    v9 = *(_QWORD *)(a1 + 48) + 24 * v5;
    if (*(_BYTE *)(a1 + 81))
      v10 = a2 == 0;
    else
      v10 = 1;
    if (v10)
      a5 = 0.0;
    *(_WORD *)(v9 + 12) = *(_DWORD *)(a1 + 88) - a1 + v6 - 98;
    *(_BYTE *)(v9 + 1) = a2;
    *(_BYTE *)v9 = *(_BYTE *)(a1 + 82);
    *(float *)(v9 + 4) = a5;
    *(_DWORD *)(v9 + 8) = a3;
    if (v7 >= v8)
      return 1;
  }
  else
  {
    ++*a4;
  }
  return 0;
}

uint64_t sub_20B9281A0(uint64_t a1, unint64_t a2, _QWORD *a3, unint64_t *a4, uint64_t a5, unsigned int a6, int a7, uint64_t a8, int a9)
{
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v22;
  uint64_t v23;
  __int16 v24;
  unint64_t v25;

  v14 = *(_QWORD *)(a1 + 8);
  v15 = *(unsigned int *)(v14 + 8 * a6);
  if (a7)
  {
    if (*(_DWORD *)(v14 + 8 * v15 + 4) == a6)
    {
      v16 = *(_DWORD *)(v14 + 8 * v15);
      if (v16 < 0)
      {
        if (*a3)
        {
          --*a3;
        }
        else if (a2)
        {
          v22 = *a4;
          v23 = a5 + 24 * *a4;
          v24 = a8 | 0x100;
          if (!a9)
            v24 = a8;
          *(_WORD *)(v23 + 12) = v24;
          v25 = v22 + 1;
          *a4 = v25;
          *(_DWORD *)(v23 + 8) = -v16;
          if (v25 >= a2)
            return 1;
        }
        else
        {
          ++*a4;
        }
      }
    }
  }
  v17 = a8 + 1;
  v18 = (v15 + 1);
  v19 = 257;
  v20 = 1;
  while (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 8 * v18 + 4) != a6
       || !sub_20B9281A0(a1, a2, a3, a4, a5, v18, 1, v17, a9))
  {
    v18 = (v18 + 1);
    if (--v19 <= 1)
      return 0;
  }
  return v20;
}

uint64_t sub_20B9282F4(uint64_t a1, _QWORD *a2, unsigned __int16 *a3, unint64_t a4)
{
  BOOL v4;
  uint64_t v5;
  unsigned __int16 *v8;
  int v9;
  unsigned __int16 *v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  BOOL v14;
  unint64_t i;
  char v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  int v21;
  char *v22;
  unsigned __int16 *v23;
  int32_t v24;
  char v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  size_t v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  char v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  __int16 v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  __int16 v60;
  uint64_t v61;
  int v62;
  int32_t IntPropertyValue;
  _QWORD *v65;
  unint64_t v66;
  _WORD *p_dst;
  uint64_t v68;
  int v69;
  BOOL v70;
  int v71;
  unsigned __int16 *v72;
  int v73;
  _QWORD v76[9];
  void *v77;
  void *v78;
  uint64_t v79;
  char v80;
  BOOL v81;
  void *__p[2];
  char v83;
  char **__dst;
  char ***v85;
  uint64_t v86;
  int v87;
  char *v88;
  char *v89;
  unint64_t v90;
  char *v91;
  char *v92;
  char *v93;

  if (*(_QWORD *)(a1 + 8))
    v4 = a4 == 0;
  else
    v4 = 1;
  if (v4)
    return 0;
  v8 = a3;
  v9 = *a3;
  v10 = &a3[v9 == 12306];
  v11 = a4 - (v9 == 12306);
  if (v11 == 7)
  {
    v13 = 0;
  }
  else
  {
    v5 = 0;
    if (v11 != 8)
      return v5;
    v12 = 0;
    while ((unsigned __int16)word_20BA94B68[v12] != v10[3])
    {
      if (++v12 == 4)
        return 0;
    }
    if (v12 == -1)
      return 0;
    v13 = 1;
  }
  v14 = 0;
  for (i = 0; i != v11; v14 = i >= v11)
  {
    if (i == 3)
      v16 = v13;
    else
      v16 = 0;
    if ((v16 & 1) == 0)
    {
      v17 = v10[i];
      v18 = v17 - 48;
      v19 = (unsigned __int16)(v17 + 240);
      if (v18 >= 0xA && v19 > 9)
        break;
    }
    ++i;
  }
  if (!v14)
    return 0;
  v73 = *a3;
  v70 = v9 == 12306;
  v21 = sub_20B9698DC(**(_DWORD **)a1);
  v22 = (char *)operator new(7uLL);
  v71 = v21 ^ 1;
  v91 = v22;
  v92 = v22;
  v93 = v22 + 7;
  v23 = &v8[a4];
  v72 = v8;
  do
  {
    v24 = u_charDigitValue(*v8);
    if ((v24 & 0x80000000) == 0)
    {
      v25 = v24 + 48;
      if (v22 >= v93)
      {
        v27 = (unint64_t)v91;
        v28 = v22 - v91;
        v29 = v22 - v91 + 1;
        if (v29 < 0)
          sub_20B80CDD8();
        v30 = v93 - v91;
        if (2 * (v93 - v91) > (unint64_t)v29)
          v29 = 2 * v30;
        if (v30 >= 0x3FFFFFFFFFFFFFFFLL)
          v31 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v31 = v29;
        if (v31)
          v32 = (char *)operator new(v31);
        else
          v32 = 0;
        v33 = &v32[v28];
        v34 = &v32[v28];
        *v34 = v25;
        v26 = v34 + 1;
        if (v22 != (char *)v27)
        {
          v35 = &v22[~v27];
          do
          {
            v36 = *--v22;
            (v35--)[(_QWORD)v32] = v36;
          }
          while (v22 != (char *)v27);
          v22 = v91;
          v33 = v32;
        }
        v91 = v33;
        v93 = &v32[v31];
        if (v22)
          operator delete(v22);
      }
      else
      {
        *v22 = v25;
        v26 = v22 + 1;
      }
      v92 = v26;
      v22 = v26;
    }
    ++v8;
  }
  while (v8 != v23);
  v37 = v91;
  if (v22 - v91 == 7)
  {
    v88 = 0;
    v89 = 0;
    v90 = 0;
    sub_20B87D570((void **)&v88, 9uLL);
    if (v73 == 12306)
    {
      v38 = v89;
      if ((unint64_t)v89 >= v90)
      {
        v40 = v88;
        v41 = v89 - v88;
        if (v89 - v88 <= -3)
          sub_20B80CDD8();
        v42 = v41 >> 1;
        if (v90 - (unint64_t)v88 <= (v41 >> 1) + 1)
          v43 = v42 + 1;
        else
          v43 = v90 - (_QWORD)v88;
        if (v90 - (unint64_t)v88 >= 0x7FFFFFFFFFFFFFFELL)
          v44 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v44 = v43;
        if (v44)
        {
          v45 = (char *)sub_20B80FD48((uint64_t)&v90, v44);
          v40 = v88;
          v38 = v89;
        }
        else
        {
          v45 = 0;
        }
        v46 = &v45[2 * v42];
        v47 = &v45[2 * v44];
        *(_WORD *)v46 = 12306;
        v39 = v46 + 2;
        while (v38 != v40)
        {
          v48 = *((_WORD *)v38 - 1);
          v38 -= 2;
          *((_WORD *)v46 - 1) = v48;
          v46 -= 2;
        }
        v88 = v46;
        v89 = v39;
        v90 = (unint64_t)v47;
        if (v40)
          operator delete(v40);
      }
      else
      {
        *(_WORD *)v89 = 12306;
        v39 = v38 + 2;
      }
      v89 = v39;
      v37 = v91;
    }
    v49 = 0;
    __dst = &v88;
    do
    {
      LOWORD(__p[0]) = v37[v49];
      sub_20B888330((uint64_t *)&__dst, __p);
      ++v49;
    }
    while (v49 != 3);
    v50 = v89;
    if ((unint64_t)v89 >= v90)
    {
      v52 = v88;
      v53 = v89 - v88;
      if (v89 - v88 <= -3)
        sub_20B80CDD8();
      v54 = v53 >> 1;
      if (v90 - (unint64_t)v88 <= (v53 >> 1) + 1)
        v55 = v54 + 1;
      else
        v55 = v90 - (_QWORD)v88;
      if (v90 - (unint64_t)v88 >= 0x7FFFFFFFFFFFFFFELL)
        v56 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v56 = v55;
      if (v56)
      {
        v57 = (char *)sub_20B80FD48((uint64_t)&v90, v56);
        v52 = v88;
        v50 = v89;
      }
      else
      {
        v57 = 0;
      }
      v58 = &v57[2 * v54];
      v59 = &v57[2 * v56];
      *(_WORD *)v58 = 45;
      v51 = v58 + 2;
      while (v50 != v52)
      {
        v60 = *((_WORD *)v50 - 1);
        v50 -= 2;
        *((_WORD *)v58 - 1) = v60;
        v58 -= 2;
      }
      v88 = v58;
      v89 = v51;
      v90 = (unint64_t)v59;
      if (v52)
        operator delete(v52);
    }
    else
    {
      *(_WORD *)v89 = 45;
      v51 = v50 + 2;
    }
    v61 = 0;
    v89 = v51;
    __dst = &v88;
    do
    {
      LOWORD(__p[0]) = v37[v61 + 3];
      sub_20B888330((uint64_t *)&__dst, __p);
      ++v61;
    }
    while (v61 != 4);
    if (v73 == 12306)
      v62 = 1;
    else
      v62 = v71;
    if (v62 != 1)
      goto LABEL_108;
    IntPropertyValue = u_getIntPropertyValue(v72[1], UCHAR_EAST_ASIAN_WIDTH);
    if (IntPropertyValue == 5 || IntPropertyValue == 3)
    {
      v65 = sub_20B877ED0(&__dst, v88, (v89 - v88) >> 1);
      sub_20B8D9880((uint64_t)v65);
      v89 = v88;
      v66 = HIBYTE(v86);
      if (v86 >= 0)
        p_dst = &__dst;
      else
        p_dst = __dst;
      if (v86 < 0)
        v66 = (unint64_t)v85;
      sub_20B8B17F4(p_dst, &p_dst[v66], (uint64_t)&v88);
      if (SHIBYTE(v86) < 0)
        operator delete(__dst);
    }
    if (v73 != 12306)
LABEL_108:
      sub_20B9289C8((int **)a1, a2, v72, a4, v72, a4, v72, a4, 1, 1);
    __dst = 0;
    v85 = &__dst;
    v86 = 0x2000000000;
    v87 = 0;
    v68 = *(_QWORD *)(a1 + 8);
    v37 = v91;
    sub_20B82E068(__p, v91, v92 - v91);
    v76[0] = MEMORY[0x24BDAC760];
    v76[1] = 1174405120;
    v76[2] = sub_20B928CCC;
    v76[3] = &unk_24C46C398;
    v76[4] = &__dst;
    v76[5] = a1;
    v80 = v62;
    v76[6] = a2;
    v76[7] = v72;
    v76[8] = a4;
    v77 = 0;
    v78 = 0;
    v79 = 0;
    sub_20B87ACC8(&v77, v88, (uint64_t)v89, (v89 - v88) >> 1);
    v81 = v70;
    sub_20B89EA54(v68, (const void **)__p, (uint64_t)v76);
    if (v83 < 0)
      operator delete(__p[0]);
    v69 = *((_DWORD *)v85 + 6);
    if (v77)
    {
      v78 = v77;
      operator delete(v77);
    }
    v5 = (2 * v69) | 1u;
    _Block_object_dispose(&__dst, 8);
    if (v88)
    {
      v89 = v88;
      operator delete(v88);
    }
  }
  else
  {
    v5 = 0;
  }
  if (v37)
    operator delete(v37);
  return v5;
}

void sub_20B92890C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;
  void *v36;
  void *v37;

  v36 = *(void **)(v34 - 136);
  if (v36)
  {
    *(_QWORD *)(v34 - 128) = v36;
    operator delete(v36);
  }
  v37 = *(void **)(v34 - 112);
  if (v37)
  {
    *(_QWORD *)(v34 - 104) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

int **sub_20B9289C8(int **result, _QWORD *a2, void *a3, unint64_t a4, void *a5, unint64_t a6, void *a7, unint64_t a8, int a9, int a10)
{
  int **v17;
  BOOL v18;
  _QWORD *v19;
  int *v20;
  _QWORD *v21;
  char v22;
  _QWORD *v23;
  uint64_t v24;
  NSObject *v25;
  int **v26;
  void *__p;
  void *v28;
  char *v29;
  _QWORD v30[3];
  _QWORD *v31;
  uint64_t v32;

  v17 = result;
  v32 = *MEMORY[0x24BDAC8D0];
  if (!a5 && a6)
    return result;
  v18 = a8 && a7 == 0;
  if (v18 || a4 > 0xFF)
    return result;
  v19 = operator new(0x28uLL);
  v28 = v19 + 5;
  v29 = (char *)(v19 + 5);
  v19[1] = 0;
  v19[2] = 0;
  *v19 = 0;
  *((_WORD *)v19 + 12) = a8;
  *((_WORD *)v19 + 13) = a4;
  *((_WORD *)v19 + 14) = a6;
  *(_QWORD *)((char *)v19 + 30) = 0;
  *((_WORD *)v19 + 19) = 2;
  __p = v19;
  v20 = *v17;
  v21 = (_QWORD *)operator new();
  sub_20B916250((uint64_t)v21, a7, a8, a3, a4, a5, a6, 0, 0, 0, (uint64_t)&__p, 90, 0, *v20);
  *((_BYTE *)v21 + 224) = 1;
  (*(void (**)(_QWORD *, double))(*v21 + 400))(v21, 0.0);
  v21[23] = 0;
  v26 = (int **)v21;
  if (__p)
  {
    v28 = __p;
    operator delete(__p);
  }
  v21[1] = a9;
  (*(void (**)(_QWORD *, uint64_t, const char *, uint64_t))(*v21 + 528))(v21, 3, "Adding a zip code candidate", 1);
  v30[0] = &unk_24C459188;
  v31 = v30;
  v22 = sub_20B8FDA94(a2, &v26, a10, 0, (uint64_t)v30);
  v23 = v31;
  if (v31 == v30)
  {
    v24 = 4;
    v23 = v30;
  }
  else
  {
    if (!v31)
      goto LABEL_15;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_15:
  if ((v22 & 1) == 0)
  {
    v25 = sub_20B9A7C5C(3u);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(__p) = 0;
      _os_log_debug_impl(&dword_20B7F7000, v25, OS_LOG_TYPE_DEBUG, " ∟ Rejected", (uint8_t *)&__p, 2u);
    }
  }
  result = v26;
  v26 = 0;
  if (result)
    return (int **)(*((uint64_t (**)(int **))*result + 2))(result);
  return result;
}

