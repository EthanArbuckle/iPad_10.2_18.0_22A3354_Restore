uint64_t std::__sort<std::__less<char,char> &,char *>(uint64_t a1, char *a2)
{
  return std::__introsort<std::_ClassicAlgPolicy,std::ranges::less,char *,false>(a1, a2, 126 - 2 * __clz((unint64_t)&a2[-a1]), 1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::ranges::less,char *,false>(uint64_t result, char *a2, uint64_t a3, char a4)
{
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  char v13;
  char *v14;
  char v15;
  BOOL v16;
  int v17;
  int v18;
  char *v19;
  BOOL v21;
  uint64_t v22;
  char *v23;
  int v24;
  int v25;
  uint64_t v26;
  char *v27;
  int v28;
  int v29;
  char v30;

  v6 = (char *)result;
LABEL_2:
  v7 = v6;
LABEL_3:
  v8 = 1 - a3;
  while (2)
  {
    v6 = v7;
    v9 = v8;
    v10 = a2 - v7;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v17 = *(a2 - 1);
        v18 = *v7;
        if (v17 < v18)
        {
          *v7 = v17;
          *(a2 - 1) = v18;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,char *>(v7, v7 + 1, a2 - 1);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,char *>(v7, v7 + 1, v7 + 2, a2 - 1);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,char *>(v7, v7 + 1, v7 + 2, v7 + 3, a2 - 1);
      default:
        if ((uint64_t)v10 > 23)
        {
          if (v9 == 1)
          {
            if (v7 != a2)
              return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less &,char *,char *>(v7, a2, a2, (uint64_t)&v30);
            return result;
          }
          v11 = &v7[v10 >> 1];
          if (v10 < 0x81)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,char *>(&v7[v10 >> 1], v7, a2 - 1);
            if ((a4 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            v12 = v10 >> 1;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,char *>(v7, &v7[v10 >> 1], a2 - 1);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,char *>(v7 + 1, &v7[v12 - 1], a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,char *>(v7 + 2, &v7[v12 + 1], a2 - 3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,char *>(&v7[v12 - 1], v11, &v7[v12 + 1]);
            v13 = *v7;
            *v7 = v7[v12];
            v7[v12] = v13;
            if ((a4 & 1) != 0)
              goto LABEL_12;
          }
          if (*(v7 - 1) >= *v7)
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,char *,std::ranges::less &>(v7, a2);
            v7 = (char *)result;
            goto LABEL_17;
          }
LABEL_12:
          v14 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,char *,std::ranges::less>(v7, a2);
          if ((v15 & 1) == 0)
            goto LABEL_15;
          v16 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,char *>(v7, v14);
          v7 = v14 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,char *>(v14 + 1, a2);
          if (!(_DWORD)result)
          {
            v8 = v9 + 1;
            if (v16)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,std::ranges::less,char *,false>(v6, v14, -v9, a4 & 1);
            v7 = v14 + 1;
LABEL_17:
            a4 = 0;
            a3 = -v9;
            goto LABEL_3;
          }
          a3 = -v9;
          a2 = v14;
          if (v16)
            return result;
          goto LABEL_2;
        }
        v19 = v7 + 1;
        v21 = v7 == a2 || v19 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v21)
          {
            v22 = 0;
            v23 = v7;
            do
            {
              v24 = v23[1];
              v25 = *v23;
              v23 = v19;
              if (v24 < v25)
              {
                v26 = v22;
                while (1)
                {
                  v7[v26 + 1] = v25;
                  if (!v26)
                    break;
                  v25 = v7[--v26];
                  if (v24 >= v25)
                  {
                    v27 = &v7[v26 + 1];
                    goto LABEL_41;
                  }
                }
                v27 = v7;
LABEL_41:
                *v27 = v24;
              }
              v19 = v23 + 1;
              ++v22;
            }
            while (v23 + 1 != a2);
          }
        }
        else if (!v21)
        {
          do
          {
            v28 = v6[1];
            v29 = *v6;
            v6 = v19;
            if (v28 < v29)
            {
              do
              {
                *v19 = v29;
                v29 = *(v19 - 2);
                --v19;
              }
              while (v28 < v29);
              *v19 = v28;
            }
            v19 = v6 + 1;
          }
          while (v6 + 1 != a2);
        }
        return result;
    }
  }
}

uint64_t std::__sort<std::__less<wchar_t,wchar_t> &,wchar_t *>(uint64_t a1, int *a2)
{
  return std::__introsort<std::_ClassicAlgPolicy,std::ranges::less,wchar_t *,false>(a1, a2, 126 - 2 * __clz(((uint64_t)a2 - a1) >> 2), 1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::ranges::less,wchar_t *,false>(uint64_t result, int *a2, uint64_t a3, char a4)
{
  int *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int *v13;
  int v14;
  int *v15;
  char v16;
  BOOL v17;
  int v18;
  int v19;
  int *v20;
  BOOL v22;
  uint64_t v23;
  int *v24;
  int v25;
  int v26;
  uint64_t v27;
  int *v28;
  int v29;
  int v30;
  char v31;

  v6 = (int *)result;
LABEL_2:
  v7 = v6;
LABEL_3:
  v8 = 1 - a3;
  while (2)
  {
    v6 = v7;
    v9 = v8;
    v10 = (char *)a2 - (char *)v7;
    v11 = a2 - v7;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v18 = *(a2 - 1);
        v19 = *v7;
        if (v18 < *v7)
        {
          *v7 = v18;
          *(a2 - 1) = v19;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,wchar_t *>(v7, v7 + 1, a2 - 1);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,wchar_t *>(v7, v7 + 1, v7 + 2, a2 - 1);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,wchar_t *>(v7, v7 + 1, v7 + 2, v7 + 3, a2 - 1);
      default:
        if (v10 > 95)
        {
          if (v9 == 1)
          {
            if (v7 != a2)
              return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less &,wchar_t *,wchar_t *>(v7, a2, a2, (uint64_t)&v31);
            return result;
          }
          v12 = v11 >> 1;
          v13 = &v7[v11 >> 1];
          if ((unint64_t)v10 < 0x201)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,wchar_t *>(&v7[v11 >> 1], v7, a2 - 1);
            if ((a4 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,wchar_t *>(v7, &v7[v11 >> 1], a2 - 1);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,wchar_t *>(v7 + 1, v13 - 1, a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,wchar_t *>(v7 + 2, &v7[v12 + 1], a2 - 3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,wchar_t *>(v13 - 1, v13, &v7[v12 + 1]);
            v14 = *v7;
            *v7 = *v13;
            *v13 = v14;
            if ((a4 & 1) != 0)
              goto LABEL_12;
          }
          if (*(v7 - 1) >= *v7)
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,wchar_t *,std::ranges::less &>(v7, a2);
            v7 = (int *)result;
            goto LABEL_17;
          }
LABEL_12:
          v15 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,wchar_t *,std::ranges::less>(v7, a2);
          if ((v16 & 1) == 0)
            goto LABEL_15;
          v17 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,wchar_t *>(v7, v15);
          v7 = v15 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,wchar_t *>(v15 + 1, a2);
          if (!(_DWORD)result)
          {
            v8 = v9 + 1;
            if (v17)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,std::ranges::less,wchar_t *,false>(v6, v15, -v9, a4 & 1);
            v7 = v15 + 1;
LABEL_17:
            a4 = 0;
            a3 = -v9;
            goto LABEL_3;
          }
          a3 = -v9;
          a2 = v15;
          if (v17)
            return result;
          goto LABEL_2;
        }
        v20 = v7 + 1;
        v22 = v7 == a2 || v20 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v22)
          {
            v23 = 0;
            v24 = v7;
            do
            {
              v26 = *v24;
              v25 = v24[1];
              v24 = v20;
              if (v25 < v26)
              {
                v27 = v23;
                while (1)
                {
                  *(int *)((char *)v7 + v27 + 4) = v26;
                  if (!v27)
                    break;
                  v26 = *(int *)((char *)v7 + v27 - 4);
                  v27 -= 4;
                  if (v25 >= v26)
                  {
                    v28 = (int *)((char *)v7 + v27 + 4);
                    goto LABEL_41;
                  }
                }
                v28 = v7;
LABEL_41:
                *v28 = v25;
              }
              v20 = v24 + 1;
              v23 += 4;
            }
            while (v24 + 1 != a2);
          }
        }
        else if (!v22)
        {
          do
          {
            v30 = *v6;
            v29 = v6[1];
            v6 = v20;
            if (v29 < v30)
            {
              do
              {
                *v20 = v30;
                v30 = *(v20 - 2);
                --v20;
              }
              while (v29 < v30);
              *v20 = v29;
            }
            v20 = v6 + 1;
          }
          while (v6 + 1 != a2);
        }
        return result;
    }
  }
}

uint64_t std::__sort<std::__less<signed char,signed char> &,signed char *>(uint64_t a1, char *a2)
{
  return std::__introsort<std::_ClassicAlgPolicy,std::ranges::less,signed char *,false>(a1, a2, 126 - 2 * __clz((unint64_t)&a2[-a1]), 1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::ranges::less,signed char *,false>(uint64_t result, char *a2, uint64_t a3, char a4)
{
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  char v13;
  char *v14;
  char v15;
  BOOL v16;
  int v17;
  int v18;
  char *v19;
  BOOL v21;
  uint64_t v22;
  char *v23;
  int v24;
  int v25;
  uint64_t v26;
  char *v27;
  int v28;
  int v29;
  char v30;

  v6 = (char *)result;
LABEL_2:
  v7 = v6;
LABEL_3:
  v8 = 1 - a3;
  while (2)
  {
    v6 = v7;
    v9 = v8;
    v10 = a2 - v7;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v17 = *(a2 - 1);
        v18 = *v7;
        if (v17 < v18)
        {
          *v7 = v17;
          *(a2 - 1) = v18;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,signed char *>(v7, v7 + 1, a2 - 1);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,signed char *>(v7, v7 + 1, v7 + 2, a2 - 1);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,signed char *>(v7, v7 + 1, v7 + 2, v7 + 3, a2 - 1);
      default:
        if ((uint64_t)v10 > 23)
        {
          if (v9 == 1)
          {
            if (v7 != a2)
              return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less &,signed char *,signed char *>(v7, a2, a2, (uint64_t)&v30);
            return result;
          }
          v11 = &v7[v10 >> 1];
          if (v10 < 0x81)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,signed char *>(&v7[v10 >> 1], v7, a2 - 1);
            if ((a4 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            v12 = v10 >> 1;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,signed char *>(v7, &v7[v10 >> 1], a2 - 1);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,signed char *>(v7 + 1, &v7[v12 - 1], a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,signed char *>(v7 + 2, &v7[v12 + 1], a2 - 3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,signed char *>(&v7[v12 - 1], v11, &v7[v12 + 1]);
            v13 = *v7;
            *v7 = v7[v12];
            v7[v12] = v13;
            if ((a4 & 1) != 0)
              goto LABEL_12;
          }
          if (*(v7 - 1) >= *v7)
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,signed char *,std::ranges::less &>(v7, a2);
            v7 = (char *)result;
            goto LABEL_17;
          }
LABEL_12:
          v14 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,signed char *,std::ranges::less>(v7, a2);
          if ((v15 & 1) == 0)
            goto LABEL_15;
          v16 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,signed char *>(v7, v14);
          v7 = v14 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,signed char *>(v14 + 1, a2);
          if (!(_DWORD)result)
          {
            v8 = v9 + 1;
            if (v16)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,std::ranges::less,signed char *,false>(v6, v14, -v9, a4 & 1);
            v7 = v14 + 1;
LABEL_17:
            a4 = 0;
            a3 = -v9;
            goto LABEL_3;
          }
          a3 = -v9;
          a2 = v14;
          if (v16)
            return result;
          goto LABEL_2;
        }
        v19 = v7 + 1;
        v21 = v7 == a2 || v19 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v21)
          {
            v22 = 0;
            v23 = v7;
            do
            {
              v24 = v23[1];
              v25 = *v23;
              v23 = v19;
              if (v24 < v25)
              {
                v26 = v22;
                while (1)
                {
                  v7[v26 + 1] = v25;
                  if (!v26)
                    break;
                  v25 = v7[--v26];
                  if (v24 >= v25)
                  {
                    v27 = &v7[v26 + 1];
                    goto LABEL_41;
                  }
                }
                v27 = v7;
LABEL_41:
                *v27 = v24;
              }
              v19 = v23 + 1;
              ++v22;
            }
            while (v23 + 1 != a2);
          }
        }
        else if (!v21)
        {
          do
          {
            v28 = v6[1];
            v29 = *v6;
            v6 = v19;
            if (v28 < v29)
            {
              do
              {
                *v19 = v29;
                v29 = *(v19 - 2);
                --v19;
              }
              while (v28 < v29);
              *v19 = v28;
            }
            v19 = v6 + 1;
          }
          while (v6 + 1 != a2);
        }
        return result;
    }
  }
}

uint64_t std::__sort<std::__less<unsigned char,unsigned char> &,unsigned char *>(uint64_t a1, unsigned __int8 *a2)
{
  return std::__introsort<std::_ClassicAlgPolicy,std::ranges::less,unsigned char *,false>(a1, a2, 126 - 2 * __clz((unint64_t)&a2[-a1]), 1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::ranges::less,unsigned char *,false>(uint64_t result, unsigned __int8 *a2, uint64_t a3, char a4)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  unint64_t v12;
  unsigned __int8 v13;
  unsigned __int8 *v14;
  char v15;
  BOOL v16;
  unsigned int v17;
  unsigned int v18;
  unsigned __int8 *v19;
  BOOL v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned __int8 *v27;
  unsigned int v28;
  unsigned int v29;
  char v30;

  v6 = (unsigned __int8 *)result;
LABEL_2:
  v7 = v6;
LABEL_3:
  v8 = 1 - a3;
  while (2)
  {
    v6 = v7;
    v9 = v8;
    v10 = a2 - v7;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v17 = *(a2 - 1);
        v18 = *v7;
        if (v17 < v18)
        {
          *v7 = v17;
          *(a2 - 1) = v18;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned char *>(v7, v7 + 1, a2 - 1);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned char *>(v7, v7 + 1, v7 + 2, a2 - 1);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned char *>(v7, v7 + 1, v7 + 2, v7 + 3, a2 - 1);
      default:
        if ((uint64_t)v10 > 23)
        {
          if (v9 == 1)
          {
            if (v7 != a2)
              return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less &,unsigned char *,unsigned char *>(v7, a2, a2, (uint64_t)&v30);
            return result;
          }
          v11 = &v7[v10 >> 1];
          if (v10 < 0x81)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned char *>(&v7[v10 >> 1], v7, a2 - 1);
            if ((a4 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            v12 = v10 >> 1;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned char *>(v7, &v7[v10 >> 1], a2 - 1);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned char *>(v7 + 1, &v7[v12 - 1], a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned char *>(v7 + 2, &v7[v12 + 1], a2 - 3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned char *>(&v7[v12 - 1], v11, &v7[v12 + 1]);
            v13 = *v7;
            *v7 = v7[v12];
            v7[v12] = v13;
            if ((a4 & 1) != 0)
              goto LABEL_12;
          }
          if (*(v7 - 1) >= *v7)
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,unsigned char *,std::ranges::less &>(v7, a2);
            v7 = (unsigned __int8 *)result;
            goto LABEL_17;
          }
LABEL_12:
          v14 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,unsigned char *,std::ranges::less>(v7, a2);
          if ((v15 & 1) == 0)
            goto LABEL_15;
          v16 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned char *>(v7, v14);
          v7 = v14 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned char *>(v14 + 1, a2);
          if (!(_DWORD)result)
          {
            v8 = v9 + 1;
            if (v16)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,std::ranges::less,unsigned char *,false>(v6, v14, -v9, a4 & 1);
            v7 = v14 + 1;
LABEL_17:
            a4 = 0;
            a3 = -v9;
            goto LABEL_3;
          }
          a3 = -v9;
          a2 = v14;
          if (v16)
            return result;
          goto LABEL_2;
        }
        v19 = v7 + 1;
        v21 = v7 == a2 || v19 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v21)
          {
            v22 = 0;
            v23 = v7;
            do
            {
              v24 = v23[1];
              v25 = *v23;
              v23 = v19;
              if (v24 < v25)
              {
                v26 = v22;
                while (1)
                {
                  v7[v26 + 1] = v25;
                  if (!v26)
                    break;
                  v25 = v7[--v26];
                  if (v24 >= v25)
                  {
                    v27 = &v7[v26 + 1];
                    goto LABEL_41;
                  }
                }
                v27 = v7;
LABEL_41:
                *v27 = v24;
              }
              v19 = v23 + 1;
              ++v22;
            }
            while (v23 + 1 != a2);
          }
        }
        else if (!v21)
        {
          do
          {
            v28 = v6[1];
            v29 = *v6;
            v6 = v19;
            if (v28 < v29)
            {
              do
              {
                *v19 = v29;
                v29 = *(v19 - 2);
                --v19;
              }
              while (v28 < v29);
              *v19 = v28;
            }
            v19 = v6 + 1;
          }
          while (v6 + 1 != a2);
        }
        return result;
    }
  }
}

uint64_t std::__sort<std::__less<short,short> &,short *>(uint64_t a1, __int16 *a2)
{
  return std::__introsort<std::_ClassicAlgPolicy,std::ranges::less,short *,false>(a1, a2, 126 - 2 * __clz(((uint64_t)a2 - a1) >> 1), 1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::ranges::less,short *,false>(uint64_t result, __int16 *a2, uint64_t a3, char a4)
{
  __int16 *v6;
  __int16 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int16 *v13;
  __int16 v14;
  __int16 *v15;
  char v16;
  BOOL v17;
  int v18;
  int v19;
  __int16 *v20;
  BOOL v22;
  uint64_t v23;
  __int16 *v24;
  int v25;
  int v26;
  uint64_t v27;
  __int16 *v28;
  int v29;
  int v30;
  char v31;

  v6 = (__int16 *)result;
LABEL_2:
  v7 = v6;
LABEL_3:
  v8 = 1 - a3;
  while (2)
  {
    v6 = v7;
    v9 = v8;
    v10 = (char *)a2 - (char *)v7;
    v11 = a2 - v7;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v18 = *(a2 - 1);
        v19 = *v7;
        if (v18 < v19)
        {
          *v7 = v18;
          *(a2 - 1) = v19;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,short *>(v7, v7 + 1, a2 - 1);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,short *>(v7, v7 + 1, v7 + 2, a2 - 1);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,short *>(v7, v7 + 1, v7 + 2, v7 + 3, a2 - 1);
      default:
        if (v10 > 47)
        {
          if (v9 == 1)
          {
            if (v7 != a2)
              return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less &,short *,short *>(v7, a2, a2, (uint64_t)&v31);
            return result;
          }
          v12 = v11 >> 1;
          v13 = &v7[v11 >> 1];
          if ((unint64_t)v10 < 0x101)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,short *>(&v7[v11 >> 1], v7, a2 - 1);
            if ((a4 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,short *>(v7, &v7[v11 >> 1], a2 - 1);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,short *>(v7 + 1, v13 - 1, a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,short *>(v7 + 2, &v7[v12 + 1], a2 - 3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,short *>(v13 - 1, v13, &v7[v12 + 1]);
            v14 = *v7;
            *v7 = *v13;
            *v13 = v14;
            if ((a4 & 1) != 0)
              goto LABEL_12;
          }
          if (*(v7 - 1) >= *v7)
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,short *,std::ranges::less &>(v7, a2);
            v7 = (__int16 *)result;
            goto LABEL_17;
          }
LABEL_12:
          v15 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,short *,std::ranges::less>(v7, a2);
          if ((v16 & 1) == 0)
            goto LABEL_15;
          v17 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,short *>(v7, v15);
          v7 = v15 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,short *>(v15 + 1, a2);
          if (!(_DWORD)result)
          {
            v8 = v9 + 1;
            if (v17)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,std::ranges::less,short *,false>(v6, v15, -v9, a4 & 1);
            v7 = v15 + 1;
LABEL_17:
            a4 = 0;
            a3 = -v9;
            goto LABEL_3;
          }
          a3 = -v9;
          a2 = v15;
          if (v17)
            return result;
          goto LABEL_2;
        }
        v20 = v7 + 1;
        v22 = v7 == a2 || v20 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v22)
          {
            v23 = 0;
            v24 = v7;
            do
            {
              v25 = v24[1];
              v26 = *v24;
              v24 = v20;
              if (v25 < v26)
              {
                v27 = v23;
                while (1)
                {
                  *(__int16 *)((char *)v7 + v27 + 2) = v26;
                  if (!v27)
                    break;
                  v26 = *(__int16 *)((char *)v7 + v27 - 2);
                  v27 -= 2;
                  if (v25 >= v26)
                  {
                    v28 = (__int16 *)((char *)v7 + v27 + 2);
                    goto LABEL_41;
                  }
                }
                v28 = v7;
LABEL_41:
                *v28 = v25;
              }
              v20 = v24 + 1;
              v23 += 2;
            }
            while (v24 + 1 != a2);
          }
        }
        else if (!v22)
        {
          do
          {
            v29 = v6[1];
            v30 = *v6;
            v6 = v20;
            if (v29 < v30)
            {
              do
              {
                *v20 = v30;
                v30 = *(v20 - 2);
                --v20;
              }
              while (v29 < v30);
              *v20 = v29;
            }
            v20 = v6 + 1;
          }
          while (v6 + 1 != a2);
        }
        return result;
    }
  }
}

uint64_t std::__sort<std::__less<unsigned short,unsigned short> &,unsigned short *>(uint64_t a1, unsigned __int16 *a2)
{
  return std::__introsort<std::_ClassicAlgPolicy,std::ranges::less,unsigned short *,false>(a1, a2, 126 - 2 * __clz(((uint64_t)a2 - a1) >> 1), 1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::ranges::less,unsigned short *,false>(uint64_t result, unsigned __int16 *a2, uint64_t a3, char a4)
{
  unsigned __int16 *v6;
  unsigned __int16 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int16 *v13;
  unsigned __int16 v14;
  unsigned __int16 *v15;
  char v16;
  BOOL v17;
  unsigned int v18;
  unsigned int v19;
  unsigned __int16 *v20;
  BOOL v22;
  uint64_t v23;
  unsigned __int16 *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  _WORD *v28;
  unsigned int v29;
  unsigned int v30;
  char v31;

  v6 = (unsigned __int16 *)result;
LABEL_2:
  v7 = v6;
LABEL_3:
  v8 = 1 - a3;
  while (2)
  {
    v6 = v7;
    v9 = v8;
    v10 = (char *)a2 - (char *)v7;
    v11 = a2 - v7;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v18 = *(a2 - 1);
        v19 = *v7;
        if (v18 < v19)
        {
          *v7 = v18;
          *(a2 - 1) = v19;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned short *>(v7, v7 + 1, a2 - 1);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned short *>(v7, v7 + 1, v7 + 2, a2 - 1);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned short *>(v7, v7 + 1, v7 + 2, v7 + 3, a2 - 1);
      default:
        if (v10 > 47)
        {
          if (v9 == 1)
          {
            if (v7 != a2)
              return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less &,unsigned short *,unsigned short *>(v7, a2, a2, (uint64_t)&v31);
            return result;
          }
          v12 = v11 >> 1;
          v13 = &v7[v11 >> 1];
          if ((unint64_t)v10 < 0x101)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned short *>(&v7[v11 >> 1], v7, a2 - 1);
            if ((a4 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned short *>(v7, &v7[v11 >> 1], a2 - 1);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned short *>(v7 + 1, v13 - 1, a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned short *>(v7 + 2, &v7[v12 + 1], a2 - 3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned short *>(v13 - 1, v13, &v7[v12 + 1]);
            v14 = *v7;
            *v7 = *v13;
            *v13 = v14;
            if ((a4 & 1) != 0)
              goto LABEL_12;
          }
          if (*(v7 - 1) >= *v7)
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,unsigned short *,std::ranges::less &>(v7, a2);
            v7 = (unsigned __int16 *)result;
            goto LABEL_17;
          }
LABEL_12:
          v15 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,unsigned short *,std::ranges::less>(v7, a2);
          if ((v16 & 1) == 0)
            goto LABEL_15;
          v17 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned short *>(v7, v15);
          v7 = v15 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned short *>(v15 + 1, a2);
          if (!(_DWORD)result)
          {
            v8 = v9 + 1;
            if (v17)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,std::ranges::less,unsigned short *,false>(v6, v15, -v9, a4 & 1);
            v7 = v15 + 1;
LABEL_17:
            a4 = 0;
            a3 = -v9;
            goto LABEL_3;
          }
          a3 = -v9;
          a2 = v15;
          if (v17)
            return result;
          goto LABEL_2;
        }
        v20 = v7 + 1;
        v22 = v7 == a2 || v20 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v22)
          {
            v23 = 0;
            v24 = v7;
            do
            {
              v25 = v24[1];
              v26 = *v24;
              v24 = v20;
              if (v25 < v26)
              {
                v27 = v23;
                while (1)
                {
                  *(unsigned __int16 *)((char *)v7 + v27 + 2) = v26;
                  if (!v27)
                    break;
                  v26 = *(unsigned __int16 *)((char *)v7 + v27 - 2);
                  v27 -= 2;
                  if (v25 >= v26)
                  {
                    v28 = (unsigned __int16 *)((char *)v7 + v27 + 2);
                    goto LABEL_41;
                  }
                }
                v28 = v7;
LABEL_41:
                *v28 = v25;
              }
              v20 = v24 + 1;
              v23 += 2;
            }
            while (v24 + 1 != a2);
          }
        }
        else if (!v22)
        {
          do
          {
            v29 = v6[1];
            v30 = *v6;
            v6 = v20;
            if (v29 < v30)
            {
              do
              {
                *v20 = v30;
                v30 = *(v20 - 2);
                --v20;
              }
              while (v29 < v30);
              *v20 = v29;
            }
            v20 = v6 + 1;
          }
          while (v6 + 1 != a2);
        }
        return result;
    }
  }
}

uint64_t std::__sort<std::__less<int,int> &,int *>(uint64_t a1, int *a2)
{
  return std::__introsort<std::_ClassicAlgPolicy,std::ranges::less,int *,false>(a1, a2, 126 - 2 * __clz(((uint64_t)a2 - a1) >> 2), 1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::ranges::less,int *,false>(uint64_t result, int *a2, uint64_t a3, char a4)
{
  int *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int *v13;
  int v14;
  int *v15;
  char v16;
  BOOL v17;
  int v18;
  int v19;
  int *v20;
  BOOL v22;
  uint64_t v23;
  int *v24;
  int v25;
  int v26;
  uint64_t v27;
  int *v28;
  int v29;
  int v30;
  char v31;

  v6 = (int *)result;
LABEL_2:
  v7 = v6;
LABEL_3:
  v8 = 1 - a3;
  while (2)
  {
    v6 = v7;
    v9 = v8;
    v10 = (char *)a2 - (char *)v7;
    v11 = a2 - v7;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v18 = *(a2 - 1);
        v19 = *v7;
        if (v18 < *v7)
        {
          *v7 = v18;
          *(a2 - 1) = v19;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,int *>(v7, v7 + 1, a2 - 1);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,int *>(v7, v7 + 1, v7 + 2, a2 - 1);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,int *>(v7, v7 + 1, v7 + 2, v7 + 3, a2 - 1);
      default:
        if (v10 > 95)
        {
          if (v9 == 1)
          {
            if (v7 != a2)
              return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less &,int *,int *>(v7, a2, a2, (uint64_t)&v31);
            return result;
          }
          v12 = v11 >> 1;
          v13 = &v7[v11 >> 1];
          if ((unint64_t)v10 < 0x201)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,int *>(&v7[v11 >> 1], v7, a2 - 1);
            if ((a4 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,int *>(v7, &v7[v11 >> 1], a2 - 1);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,int *>(v7 + 1, v13 - 1, a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,int *>(v7 + 2, &v7[v12 + 1], a2 - 3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,int *>(v13 - 1, v13, &v7[v12 + 1]);
            v14 = *v7;
            *v7 = *v13;
            *v13 = v14;
            if ((a4 & 1) != 0)
              goto LABEL_12;
          }
          if (*(v7 - 1) >= *v7)
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,int *,std::ranges::less &>(v7, a2);
            v7 = (int *)result;
            goto LABEL_17;
          }
LABEL_12:
          v15 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,int *,std::ranges::less>(v7, a2);
          if ((v16 & 1) == 0)
            goto LABEL_15;
          v17 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,int *>(v7, v15);
          v7 = v15 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,int *>(v15 + 1, a2);
          if (!(_DWORD)result)
          {
            v8 = v9 + 1;
            if (v17)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,std::ranges::less,int *,false>(v6, v15, -v9, a4 & 1);
            v7 = v15 + 1;
LABEL_17:
            a4 = 0;
            a3 = -v9;
            goto LABEL_3;
          }
          a3 = -v9;
          a2 = v15;
          if (v17)
            return result;
          goto LABEL_2;
        }
        v20 = v7 + 1;
        v22 = v7 == a2 || v20 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v22)
          {
            v23 = 0;
            v24 = v7;
            do
            {
              v26 = *v24;
              v25 = v24[1];
              v24 = v20;
              if (v25 < v26)
              {
                v27 = v23;
                while (1)
                {
                  *(int *)((char *)v7 + v27 + 4) = v26;
                  if (!v27)
                    break;
                  v26 = *(int *)((char *)v7 + v27 - 4);
                  v27 -= 4;
                  if (v25 >= v26)
                  {
                    v28 = (int *)((char *)v7 + v27 + 4);
                    goto LABEL_41;
                  }
                }
                v28 = v7;
LABEL_41:
                *v28 = v25;
              }
              v20 = v24 + 1;
              v23 += 4;
            }
            while (v24 + 1 != a2);
          }
        }
        else if (!v22)
        {
          do
          {
            v30 = *v6;
            v29 = v6[1];
            v6 = v20;
            if (v29 < v30)
            {
              do
              {
                *v20 = v30;
                v30 = *(v20 - 2);
                --v20;
              }
              while (v29 < v30);
              *v20 = v29;
            }
            v20 = v6 + 1;
          }
          while (v6 + 1 != a2);
        }
        return result;
    }
  }
}

uint64_t std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>(uint64_t a1, unsigned int *a2)
{
  return std::__introsort<std::_ClassicAlgPolicy,std::ranges::less,unsigned int *,false>(a1, a2, 126 - 2 * __clz(((uint64_t)a2 - a1) >> 2), 1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::ranges::less,unsigned int *,false>(uint64_t result, unsigned int *a2, uint64_t a3, char a4)
{
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  char v16;
  BOOL v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  BOOL v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  char v31;

  v6 = (unsigned int *)result;
LABEL_2:
  v7 = v6;
LABEL_3:
  v8 = 1 - a3;
  while (2)
  {
    v6 = v7;
    v9 = v8;
    v10 = (char *)a2 - (char *)v7;
    v11 = a2 - v7;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v18 = *(a2 - 1);
        v19 = *v7;
        if (v18 < *v7)
        {
          *v7 = v18;
          *(a2 - 1) = v19;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned int *>(v7, v7 + 1, a2 - 1);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned int *>(v7, v7 + 1, v7 + 2, a2 - 1);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned int *>(v7, v7 + 1, v7 + 2, v7 + 3, a2 - 1);
      default:
        if (v10 > 95)
        {
          if (v9 == 1)
          {
            if (v7 != a2)
              return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less &,unsigned int *,unsigned int *>(v7, a2, a2, (uint64_t)&v31);
            return result;
          }
          v12 = v11 >> 1;
          v13 = &v7[v11 >> 1];
          if ((unint64_t)v10 < 0x201)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned int *>(&v7[v11 >> 1], v7, a2 - 1);
            if ((a4 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned int *>(v7, &v7[v11 >> 1], a2 - 1);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned int *>(v7 + 1, v13 - 1, a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned int *>(v7 + 2, &v7[v12 + 1], a2 - 3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned int *>(v13 - 1, v13, &v7[v12 + 1]);
            v14 = *v7;
            *v7 = *v13;
            *v13 = v14;
            if ((a4 & 1) != 0)
              goto LABEL_12;
          }
          if (*(v7 - 1) >= *v7)
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,std::ranges::less &>(v7, (int *)a2);
            v7 = (unsigned int *)result;
            goto LABEL_17;
          }
LABEL_12:
          v15 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,std::ranges::less>(v7, a2);
          if ((v16 & 1) == 0)
            goto LABEL_15;
          v17 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned int *>(v7, v15);
          v7 = v15 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned int *>(v15 + 1, a2);
          if (!(_DWORD)result)
          {
            v8 = v9 + 1;
            if (v17)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,std::ranges::less,unsigned int *,false>(v6, v15, -v9, a4 & 1);
            v7 = v15 + 1;
LABEL_17:
            a4 = 0;
            a3 = -v9;
            goto LABEL_3;
          }
          a3 = -v9;
          a2 = v15;
          if (v17)
            return result;
          goto LABEL_2;
        }
        v20 = v7 + 1;
        v22 = v7 == a2 || v20 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v22)
          {
            v23 = 0;
            v24 = v7;
            do
            {
              v26 = *v24;
              v25 = v24[1];
              v24 = v20;
              if (v25 < v26)
              {
                v27 = v23;
                while (1)
                {
                  *(unsigned int *)((char *)v7 + v27 + 4) = v26;
                  if (!v27)
                    break;
                  v26 = *(unsigned int *)((char *)v7 + v27 - 4);
                  v27 -= 4;
                  if (v25 >= v26)
                  {
                    v28 = (unsigned int *)((char *)v7 + v27 + 4);
                    goto LABEL_41;
                  }
                }
                v28 = v7;
LABEL_41:
                *v28 = v25;
              }
              v20 = v24 + 1;
              v23 += 4;
            }
            while (v24 + 1 != a2);
          }
        }
        else if (!v22)
        {
          do
          {
            v30 = *v6;
            v29 = v6[1];
            v6 = v20;
            if (v29 < v30)
            {
              do
              {
                *v20 = v30;
                v30 = *(v20 - 2);
                --v20;
              }
              while (v29 < v30);
              *v20 = v29;
            }
            v20 = v6 + 1;
          }
          while (v6 + 1 != a2);
        }
        return result;
    }
  }
}

uint64_t std::__sort<std::__less<long,long> &,long *>(uint64_t a1, uint64_t *a2)
{
  return std::__introsort<std::_ClassicAlgPolicy,std::ranges::less,long *,false>(a1, a2, 126 - 2 * __clz(((uint64_t)a2 - a1) >> 3), 1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::ranges::less,long *,false>(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  char v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  BOOL v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;

  v6 = (uint64_t *)result;
LABEL_2:
  v7 = v6;
LABEL_3:
  v8 = 1 - a3;
  while (2)
  {
    v6 = v7;
    v9 = v8;
    v10 = (char *)a2 - (char *)v7;
    v11 = a2 - v7;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v18 = *(a2 - 1);
        v19 = *v7;
        if (v18 < *v7)
        {
          *v7 = v18;
          *(a2 - 1) = v19;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,long *>(v7, v7 + 1, a2 - 1);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,long *>(v7, v7 + 1, v7 + 2, a2 - 1);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,long *>(v7, v7 + 1, v7 + 2, v7 + 3, a2 - 1);
      default:
        if (v10 > 191)
        {
          if (v9 == 1)
          {
            if (v7 != a2)
              return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less &,long *,long *>(v7, a2, a2, (uint64_t)&v31);
            return result;
          }
          v12 = v11 >> 1;
          v13 = &v7[v11 >> 1];
          if ((unint64_t)v10 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,long *>(&v7[v11 >> 1], v7, a2 - 1);
            if ((a4 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,long *>(v7, &v7[v11 >> 1], a2 - 1);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,long *>(v7 + 1, v13 - 1, a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,long *>(v7 + 2, &v7[v12 + 1], a2 - 3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,long *>(v13 - 1, v13, &v7[v12 + 1]);
            v14 = *v7;
            *v7 = *v13;
            *v13 = v14;
            if ((a4 & 1) != 0)
              goto LABEL_12;
          }
          if (*(v7 - 1) >= *v7)
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,long *,std::ranges::less &>(v7, a2);
            v7 = (uint64_t *)result;
            goto LABEL_17;
          }
LABEL_12:
          v15 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,long *,std::ranges::less>(v7, a2);
          if ((v16 & 1) == 0)
            goto LABEL_15;
          v17 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,long *>(v7, v15);
          v7 = v15 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,long *>(v15 + 1, a2);
          if (!(_DWORD)result)
          {
            v8 = v9 + 1;
            if (v17)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,std::ranges::less,long *,false>(v6, v15, -v9, a4 & 1);
            v7 = v15 + 1;
LABEL_17:
            a4 = 0;
            a3 = -v9;
            goto LABEL_3;
          }
          a3 = -v9;
          a2 = v15;
          if (v17)
            return result;
          goto LABEL_2;
        }
        v20 = v7 + 1;
        v22 = v7 == a2 || v20 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v22)
          {
            v23 = 0;
            v24 = v7;
            do
            {
              v26 = *v24;
              v25 = v24[1];
              v24 = v20;
              if (v25 < v26)
              {
                v27 = v23;
                while (1)
                {
                  *(uint64_t *)((char *)v7 + v27 + 8) = v26;
                  if (!v27)
                    break;
                  v26 = *(uint64_t *)((char *)v7 + v27 - 8);
                  v27 -= 8;
                  if (v25 >= v26)
                  {
                    v28 = (uint64_t *)((char *)v7 + v27 + 8);
                    goto LABEL_41;
                  }
                }
                v28 = v7;
LABEL_41:
                *v28 = v25;
              }
              v20 = v24 + 1;
              v23 += 8;
            }
            while (v24 + 1 != a2);
          }
        }
        else if (!v22)
        {
          do
          {
            v30 = *v6;
            v29 = v6[1];
            v6 = v20;
            if (v29 < v30)
            {
              do
              {
                *v20 = v30;
                v30 = *(v20 - 2);
                --v20;
              }
              while (v29 < v30);
              *v20 = v29;
            }
            v20 = v6 + 1;
          }
          while (v6 + 1 != a2);
        }
        return result;
    }
  }
}

uint64_t std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>(uint64_t a1, unint64_t *a2)
{
  return std::__introsort<std::_ClassicAlgPolicy,std::ranges::less,unsigned long *,false>(a1, a2, 126 - 2 * __clz(((uint64_t)a2 - a1) >> 3), 1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::ranges::less,unsigned long *,false>(uint64_t result, unint64_t *a2, uint64_t a3, char a4)
{
  unint64_t *v6;
  unint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  char v16;
  BOOL v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  BOOL v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char v31;

  v6 = (unint64_t *)result;
LABEL_2:
  v7 = v6;
LABEL_3:
  v8 = 1 - a3;
  while (2)
  {
    v6 = v7;
    v9 = v8;
    v10 = (char *)a2 - (char *)v7;
    v11 = a2 - v7;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v18 = *(a2 - 1);
        v19 = *v7;
        if (v18 < *v7)
        {
          *v7 = v18;
          *(a2 - 1) = v19;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned long *>(v7, v7 + 1, a2 - 1);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned long *>(v7, v7 + 1, v7 + 2, a2 - 1);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned long *>(v7, v7 + 1, v7 + 2, v7 + 3, a2 - 1);
      default:
        if (v10 > 191)
        {
          if (v9 == 1)
          {
            if (v7 != a2)
              return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less &,unsigned long *,unsigned long *>(v7, a2, a2, (uint64_t)&v31);
            return result;
          }
          v12 = v11 >> 1;
          v13 = &v7[v11 >> 1];
          if ((unint64_t)v10 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned long *>(&v7[v11 >> 1], v7, a2 - 1);
            if ((a4 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned long *>(v7, &v7[v11 >> 1], a2 - 1);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned long *>(v7 + 1, v13 - 1, a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned long *>(v7 + 2, &v7[v12 + 1], a2 - 3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned long *>(v13 - 1, v13, &v7[v12 + 1]);
            v14 = *v7;
            *v7 = *v13;
            *v13 = v14;
            if ((a4 & 1) != 0)
              goto LABEL_12;
          }
          if (*(v7 - 1) >= *v7)
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,unsigned long *,std::ranges::less &>(v7, (uint64_t *)a2);
            v7 = (unint64_t *)result;
            goto LABEL_17;
          }
LABEL_12:
          v15 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,unsigned long *,std::ranges::less>(v7, a2);
          if ((v16 & 1) == 0)
            goto LABEL_15;
          v17 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned long *>(v7, v15);
          v7 = v15 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned long *>(v15 + 1, a2);
          if (!(_DWORD)result)
          {
            v8 = v9 + 1;
            if (v17)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,std::ranges::less,unsigned long *,false>(v6, v15, -v9, a4 & 1);
            v7 = v15 + 1;
LABEL_17:
            a4 = 0;
            a3 = -v9;
            goto LABEL_3;
          }
          a3 = -v9;
          a2 = v15;
          if (v17)
            return result;
          goto LABEL_2;
        }
        v20 = v7 + 1;
        v22 = v7 == a2 || v20 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v22)
          {
            v23 = 0;
            v24 = v7;
            do
            {
              v26 = *v24;
              v25 = v24[1];
              v24 = v20;
              if (v25 < v26)
              {
                v27 = v23;
                while (1)
                {
                  *(unint64_t *)((char *)v7 + v27 + 8) = v26;
                  if (!v27)
                    break;
                  v26 = *(unint64_t *)((char *)v7 + v27 - 8);
                  v27 -= 8;
                  if (v25 >= v26)
                  {
                    v28 = (unint64_t *)((char *)v7 + v27 + 8);
                    goto LABEL_41;
                  }
                }
                v28 = v7;
LABEL_41:
                *v28 = v25;
              }
              v20 = v24 + 1;
              v23 += 8;
            }
            while (v24 + 1 != a2);
          }
        }
        else if (!v22)
        {
          do
          {
            v30 = *v6;
            v29 = v6[1];
            v6 = v20;
            if (v29 < v30)
            {
              do
              {
                *v20 = v30;
                v30 = *(v20 - 2);
                --v20;
              }
              while (v29 < v30);
              *v20 = v29;
            }
            v20 = v6 + 1;
          }
          while (v6 + 1 != a2);
        }
        return result;
    }
  }
}

uint64_t std::__sort<std::__less<long long,long long> &,long long *>(uint64_t a1, uint64_t *a2)
{
  return std::__introsort<std::_ClassicAlgPolicy,std::ranges::less,long long *,false>(a1, a2, 126 - 2 * __clz(((uint64_t)a2 - a1) >> 3), 1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::ranges::less,long long *,false>(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  char v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  BOOL v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;

  v6 = (uint64_t *)result;
LABEL_2:
  v7 = v6;
LABEL_3:
  v8 = 1 - a3;
  while (2)
  {
    v6 = v7;
    v9 = v8;
    v10 = (char *)a2 - (char *)v7;
    v11 = a2 - v7;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v18 = *(a2 - 1);
        v19 = *v7;
        if (v18 < *v7)
        {
          *v7 = v18;
          *(a2 - 1) = v19;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,long long *>(v7, v7 + 1, a2 - 1);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,long long *>(v7, v7 + 1, v7 + 2, a2 - 1);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,long long *>(v7, v7 + 1, v7 + 2, v7 + 3, a2 - 1);
      default:
        if (v10 > 191)
        {
          if (v9 == 1)
          {
            if (v7 != a2)
              return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less &,long long *,long long *>(v7, a2, a2, (uint64_t)&v31);
            return result;
          }
          v12 = v11 >> 1;
          v13 = &v7[v11 >> 1];
          if ((unint64_t)v10 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,long long *>(&v7[v11 >> 1], v7, a2 - 1);
            if ((a4 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,long long *>(v7, &v7[v11 >> 1], a2 - 1);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,long long *>(v7 + 1, v13 - 1, a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,long long *>(v7 + 2, &v7[v12 + 1], a2 - 3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,long long *>(v13 - 1, v13, &v7[v12 + 1]);
            v14 = *v7;
            *v7 = *v13;
            *v13 = v14;
            if ((a4 & 1) != 0)
              goto LABEL_12;
          }
          if (*(v7 - 1) >= *v7)
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,long long *,std::ranges::less &>(v7, a2);
            v7 = (uint64_t *)result;
            goto LABEL_17;
          }
LABEL_12:
          v15 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,long long *,std::ranges::less>(v7, a2);
          if ((v16 & 1) == 0)
            goto LABEL_15;
          v17 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,long long *>(v7, v15);
          v7 = v15 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,long long *>(v15 + 1, a2);
          if (!(_DWORD)result)
          {
            v8 = v9 + 1;
            if (v17)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,std::ranges::less,long long *,false>(v6, v15, -v9, a4 & 1);
            v7 = v15 + 1;
LABEL_17:
            a4 = 0;
            a3 = -v9;
            goto LABEL_3;
          }
          a3 = -v9;
          a2 = v15;
          if (v17)
            return result;
          goto LABEL_2;
        }
        v20 = v7 + 1;
        v22 = v7 == a2 || v20 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v22)
          {
            v23 = 0;
            v24 = v7;
            do
            {
              v26 = *v24;
              v25 = v24[1];
              v24 = v20;
              if (v25 < v26)
              {
                v27 = v23;
                while (1)
                {
                  *(uint64_t *)((char *)v7 + v27 + 8) = v26;
                  if (!v27)
                    break;
                  v26 = *(uint64_t *)((char *)v7 + v27 - 8);
                  v27 -= 8;
                  if (v25 >= v26)
                  {
                    v28 = (uint64_t *)((char *)v7 + v27 + 8);
                    goto LABEL_41;
                  }
                }
                v28 = v7;
LABEL_41:
                *v28 = v25;
              }
              v20 = v24 + 1;
              v23 += 8;
            }
            while (v24 + 1 != a2);
          }
        }
        else if (!v22)
        {
          do
          {
            v30 = *v6;
            v29 = v6[1];
            v6 = v20;
            if (v29 < v30)
            {
              do
              {
                *v20 = v30;
                v30 = *(v20 - 2);
                --v20;
              }
              while (v29 < v30);
              *v20 = v29;
            }
            v20 = v6 + 1;
          }
          while (v6 + 1 != a2);
        }
        return result;
    }
  }
}

uint64_t std::__sort<std::__less<unsigned long long,unsigned long long> &,unsigned long long *>(uint64_t a1, unint64_t *a2)
{
  return std::__introsort<std::_ClassicAlgPolicy,std::ranges::less,unsigned long long *,false>(a1, a2, 126 - 2 * __clz(((uint64_t)a2 - a1) >> 3), 1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::ranges::less,unsigned long long *,false>(uint64_t result, unint64_t *a2, uint64_t a3, char a4)
{
  unint64_t *v6;
  unint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  char v16;
  BOOL v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  BOOL v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char v31;

  v6 = (unint64_t *)result;
LABEL_2:
  v7 = v6;
LABEL_3:
  v8 = 1 - a3;
  while (2)
  {
    v6 = v7;
    v9 = v8;
    v10 = (char *)a2 - (char *)v7;
    v11 = a2 - v7;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v18 = *(a2 - 1);
        v19 = *v7;
        if (v18 < *v7)
        {
          *v7 = v18;
          *(a2 - 1) = v19;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned long long *>(v7, v7 + 1, a2 - 1);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned long long *>(v7, v7 + 1, v7 + 2, a2 - 1);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned long long *>(v7, v7 + 1, v7 + 2, v7 + 3, a2 - 1);
      default:
        if (v10 > 191)
        {
          if (v9 == 1)
          {
            if (v7 != a2)
              return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less &,unsigned long long *,unsigned long long *>(v7, a2, a2, (uint64_t)&v31);
            return result;
          }
          v12 = v11 >> 1;
          v13 = &v7[v11 >> 1];
          if ((unint64_t)v10 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned long long *>(&v7[v11 >> 1], v7, a2 - 1);
            if ((a4 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned long long *>(v7, &v7[v11 >> 1], a2 - 1);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned long long *>(v7 + 1, v13 - 1, a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned long long *>(v7 + 2, &v7[v12 + 1], a2 - 3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned long long *>(v13 - 1, v13, &v7[v12 + 1]);
            v14 = *v7;
            *v7 = *v13;
            *v13 = v14;
            if ((a4 & 1) != 0)
              goto LABEL_12;
          }
          if (*(v7 - 1) >= *v7)
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,unsigned long long *,std::ranges::less &>(v7, (uint64_t *)a2);
            v7 = (unint64_t *)result;
            goto LABEL_17;
          }
LABEL_12:
          v15 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,unsigned long long *,std::ranges::less>(v7, a2);
          if ((v16 & 1) == 0)
            goto LABEL_15;
          v17 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned long long *>(v7, v15);
          v7 = v15 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned long long *>(v15 + 1, a2);
          if (!(_DWORD)result)
          {
            v8 = v9 + 1;
            if (v17)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,std::ranges::less,unsigned long long *,false>(v6, v15, -v9, a4 & 1);
            v7 = v15 + 1;
LABEL_17:
            a4 = 0;
            a3 = -v9;
            goto LABEL_3;
          }
          a3 = -v9;
          a2 = v15;
          if (v17)
            return result;
          goto LABEL_2;
        }
        v20 = v7 + 1;
        v22 = v7 == a2 || v20 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v22)
          {
            v23 = 0;
            v24 = v7;
            do
            {
              v26 = *v24;
              v25 = v24[1];
              v24 = v20;
              if (v25 < v26)
              {
                v27 = v23;
                while (1)
                {
                  *(unint64_t *)((char *)v7 + v27 + 8) = v26;
                  if (!v27)
                    break;
                  v26 = *(unint64_t *)((char *)v7 + v27 - 8);
                  v27 -= 8;
                  if (v25 >= v26)
                  {
                    v28 = (unint64_t *)((char *)v7 + v27 + 8);
                    goto LABEL_41;
                  }
                }
                v28 = v7;
LABEL_41:
                *v28 = v25;
              }
              v20 = v24 + 1;
              v23 += 8;
            }
            while (v24 + 1 != a2);
          }
        }
        else if (!v22)
        {
          do
          {
            v30 = *v6;
            v29 = v6[1];
            v6 = v20;
            if (v29 < v30)
            {
              do
              {
                *v20 = v30;
                v30 = *(v20 - 2);
                --v20;
              }
              while (v29 < v30);
              *v20 = v29;
            }
            v20 = v6 + 1;
          }
          while (v6 + 1 != a2);
        }
        return result;
    }
  }
}

uint64_t std::__sort<std::__less<float,float> &,float *>(uint64_t a1, float *a2)
{
  return std::__introsort<std::_ClassicAlgPolicy,std::ranges::less,float *,false>(a1, a2, 126 - 2 * __clz(((uint64_t)a2 - a1) >> 2), 1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::ranges::less,float *,false>(uint64_t result, float *a2, uint64_t a3, char a4)
{
  float *v6;
  float *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  float *v13;
  float v14;
  float *v15;
  char v16;
  BOOL v17;
  float v18;
  float v19;
  float *v20;
  BOOL v22;
  uint64_t v23;
  float *v24;
  float v25;
  float v26;
  uint64_t v27;
  float *v28;
  float v29;
  float v30;
  float *v31;
  char v32;

  v6 = (float *)result;
LABEL_2:
  v7 = v6;
LABEL_3:
  v8 = 1 - a3;
  while (2)
  {
    v6 = v7;
    v9 = v8;
    v10 = (char *)a2 - (char *)v7;
    v11 = a2 - v7;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v18 = *(a2 - 1);
        v19 = *v7;
        if (v18 < *v7)
        {
          *v7 = v18;
          *(a2 - 1) = v19;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,float *>(v7, v7 + 1, a2 - 1);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,float *>(v7, v7 + 1, v7 + 2, a2 - 1);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,float *>(v7, v7 + 1, v7 + 2, v7 + 3, a2 - 1);
      default:
        if (v10 > 95)
        {
          if (v9 == 1)
          {
            if (v7 != a2)
              return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less &,float *,float *>(v7, a2, a2, (uint64_t)&v32);
            return result;
          }
          v12 = v11 >> 1;
          v13 = &v7[v11 >> 1];
          if ((unint64_t)v10 < 0x201)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,float *>(&v7[v11 >> 1], v7, a2 - 1);
            if ((a4 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,float *>(v7, &v7[v11 >> 1], a2 - 1);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,float *>(v7 + 1, v13 - 1, a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,float *>(v7 + 2, &v7[v12 + 1], a2 - 3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,float *>(v13 - 1, v13, &v7[v12 + 1]);
            v14 = *v7;
            *v7 = *v13;
            *v13 = v14;
            if ((a4 & 1) != 0)
              goto LABEL_12;
          }
          if (*(v7 - 1) >= *v7)
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,float *,std::ranges::less &>(v7, a2);
            v7 = (float *)result;
            goto LABEL_17;
          }
LABEL_12:
          v15 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,float *,std::ranges::less>(v7, a2);
          if ((v16 & 1) == 0)
            goto LABEL_15;
          v17 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,float *>(v7, v15);
          v7 = v15 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,float *>(v15 + 1, a2);
          if (!(_DWORD)result)
          {
            v8 = v9 + 1;
            if (v17)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,std::ranges::less,float *,false>(v6, v15, -v9, a4 & 1);
            v7 = v15 + 1;
LABEL_17:
            a4 = 0;
            a3 = -v9;
            goto LABEL_3;
          }
          a3 = -v9;
          a2 = v15;
          if (v17)
            return result;
          goto LABEL_2;
        }
        v20 = v7 + 1;
        v22 = v7 == a2 || v20 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v22)
          {
            v23 = 0;
            v24 = v7;
            do
            {
              v26 = *v24;
              v25 = v24[1];
              v24 = v20;
              if (v25 < v26)
              {
                v27 = v23;
                while (1)
                {
                  *(float *)((char *)v7 + v27 + 4) = v26;
                  if (!v27)
                    break;
                  v26 = *(float *)((char *)v7 + v27 - 4);
                  v27 -= 4;
                  if (v25 >= v26)
                  {
                    v28 = (float *)((char *)v7 + v27 + 4);
                    goto LABEL_41;
                  }
                }
                v28 = v7;
LABEL_41:
                *v28 = v25;
              }
              v20 = v24 + 1;
              v23 += 4;
            }
            while (v24 + 1 != a2);
          }
        }
        else if (!v22)
        {
          do
          {
            v30 = *v6;
            v29 = v6[1];
            v6 = v20;
            if (v29 < v30)
            {
              v31 = v20;
              do
              {
                *v31 = v30;
                v30 = *(v31 - 2);
                --v31;
              }
              while (v29 < v30);
              *v31 = v29;
            }
            ++v20;
          }
          while (v6 + 1 != a2);
        }
        return result;
    }
  }
}

uint64_t std::__sort<std::__less<double,double> &,double *>(uint64_t a1, double *a2)
{
  return std::__introsort<std::_ClassicAlgPolicy,std::ranges::less,double *,false>(a1, a2, 126 - 2 * __clz(((uint64_t)a2 - a1) >> 3), 1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::ranges::less,double *,false>(uint64_t result, double *a2, uint64_t a3, char a4)
{
  double *v6;
  double *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  double *v13;
  double v14;
  double *v15;
  char v16;
  BOOL v17;
  double v18;
  double v19;
  double *v20;
  BOOL v22;
  uint64_t v23;
  double *v24;
  double v25;
  double v26;
  uint64_t v27;
  double *v28;
  double v29;
  double v30;
  double *v31;
  char v32;

  v6 = (double *)result;
LABEL_2:
  v7 = v6;
LABEL_3:
  v8 = 1 - a3;
  while (2)
  {
    v6 = v7;
    v9 = v8;
    v10 = (char *)a2 - (char *)v7;
    v11 = a2 - v7;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v18 = *(a2 - 1);
        v19 = *v7;
        if (v18 < *v7)
        {
          *v7 = v18;
          *(a2 - 1) = v19;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,double *>(v7, v7 + 1, a2 - 1);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,double *>(v7, v7 + 1, v7 + 2, a2 - 1);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,double *>(v7, v7 + 1, v7 + 2, v7 + 3, a2 - 1);
      default:
        if (v10 > 191)
        {
          if (v9 == 1)
          {
            if (v7 != a2)
              return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less &,double *,double *>(v7, a2, a2, (uint64_t)&v32);
            return result;
          }
          v12 = v11 >> 1;
          v13 = &v7[v11 >> 1];
          if ((unint64_t)v10 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,double *>(&v7[v11 >> 1], v7, a2 - 1);
            if ((a4 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,double *>(v7, &v7[v11 >> 1], a2 - 1);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,double *>(v7 + 1, v13 - 1, a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,double *>(v7 + 2, &v7[v12 + 1], a2 - 3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,double *>(v13 - 1, v13, &v7[v12 + 1]);
            v14 = *v7;
            *v7 = *v13;
            *v13 = v14;
            if ((a4 & 1) != 0)
              goto LABEL_12;
          }
          if (*(v7 - 1) >= *v7)
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,double *,std::ranges::less &>(v7, a2);
            v7 = (double *)result;
            goto LABEL_17;
          }
LABEL_12:
          v15 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,double *,std::ranges::less>(v7, a2);
          if ((v16 & 1) == 0)
            goto LABEL_15;
          v17 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,double *>(v7, v15);
          v7 = v15 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,double *>(v15 + 1, a2);
          if (!(_DWORD)result)
          {
            v8 = v9 + 1;
            if (v17)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,std::ranges::less,double *,false>(v6, v15, -v9, a4 & 1);
            v7 = v15 + 1;
LABEL_17:
            a4 = 0;
            a3 = -v9;
            goto LABEL_3;
          }
          a3 = -v9;
          a2 = v15;
          if (v17)
            return result;
          goto LABEL_2;
        }
        v20 = v7 + 1;
        v22 = v7 == a2 || v20 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v22)
          {
            v23 = 0;
            v24 = v7;
            do
            {
              v26 = *v24;
              v25 = v24[1];
              v24 = v20;
              if (v25 < v26)
              {
                v27 = v23;
                while (1)
                {
                  *(double *)((char *)v7 + v27 + 8) = v26;
                  if (!v27)
                    break;
                  v26 = *(double *)((char *)v7 + v27 - 8);
                  v27 -= 8;
                  if (v25 >= v26)
                  {
                    v28 = (double *)((char *)v7 + v27 + 8);
                    goto LABEL_41;
                  }
                }
                v28 = v7;
LABEL_41:
                *v28 = v25;
              }
              v20 = v24 + 1;
              v23 += 8;
            }
            while (v24 + 1 != a2);
          }
        }
        else if (!v22)
        {
          do
          {
            v30 = *v6;
            v29 = v6[1];
            v6 = v20;
            if (v29 < v30)
            {
              v31 = v20;
              do
              {
                *v31 = v30;
                v30 = *(v31 - 2);
                --v31;
              }
              while (v29 < v30);
              *v31 = v29;
            }
            ++v20;
          }
          while (v6 + 1 != a2);
        }
        return result;
    }
  }
}

uint64_t std::__sort<std::__less<long double,long double> &,long double *>(uint64_t a1, double *a2)
{
  return std::__introsort<std::_ClassicAlgPolicy,std::ranges::less,long double *,false>(a1, a2, 126 - 2 * __clz(((uint64_t)a2 - a1) >> 3), 1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::ranges::less,long double *,false>(uint64_t result, double *a2, uint64_t a3, char a4)
{
  double *v6;
  double *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  double *v13;
  double v14;
  double *v15;
  char v16;
  BOOL v17;
  double v18;
  double v19;
  double *v20;
  BOOL v22;
  uint64_t v23;
  double *v24;
  double v25;
  double v26;
  uint64_t v27;
  double *v28;
  double v29;
  double v30;
  double *v31;
  char v32;

  v6 = (double *)result;
LABEL_2:
  v7 = v6;
LABEL_3:
  v8 = 1 - a3;
  while (2)
  {
    v6 = v7;
    v9 = v8;
    v10 = (char *)a2 - (char *)v7;
    v11 = a2 - v7;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v18 = *(a2 - 1);
        v19 = *v7;
        if (v18 < *v7)
        {
          *v7 = v18;
          *(a2 - 1) = v19;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,long double *>(v7, v7 + 1, a2 - 1);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,long double *>(v7, v7 + 1, v7 + 2, a2 - 1);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,long double *>(v7, v7 + 1, v7 + 2, v7 + 3, a2 - 1);
      default:
        if (v10 > 191)
        {
          if (v9 == 1)
          {
            if (v7 != a2)
              return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less &,long double *,long double *>(v7, a2, a2, (uint64_t)&v32);
            return result;
          }
          v12 = v11 >> 1;
          v13 = &v7[v11 >> 1];
          if ((unint64_t)v10 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,long double *>(&v7[v11 >> 1], v7, a2 - 1);
            if ((a4 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,long double *>(v7, &v7[v11 >> 1], a2 - 1);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,long double *>(v7 + 1, v13 - 1, a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,long double *>(v7 + 2, &v7[v12 + 1], a2 - 3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,long double *>(v13 - 1, v13, &v7[v12 + 1]);
            v14 = *v7;
            *v7 = *v13;
            *v13 = v14;
            if ((a4 & 1) != 0)
              goto LABEL_12;
          }
          if (*(v7 - 1) >= *v7)
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,long double *,std::ranges::less &>(v7, a2);
            v7 = (double *)result;
            goto LABEL_17;
          }
LABEL_12:
          v15 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,long double *,std::ranges::less>(v7, a2);
          if ((v16 & 1) == 0)
            goto LABEL_15;
          v17 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,long double *>(v7, v15);
          v7 = v15 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,long double *>(v15 + 1, a2);
          if (!(_DWORD)result)
          {
            v8 = v9 + 1;
            if (v17)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,std::ranges::less,long double *,false>(v6, v15, -v9, a4 & 1);
            v7 = v15 + 1;
LABEL_17:
            a4 = 0;
            a3 = -v9;
            goto LABEL_3;
          }
          a3 = -v9;
          a2 = v15;
          if (v17)
            return result;
          goto LABEL_2;
        }
        v20 = v7 + 1;
        v22 = v7 == a2 || v20 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v22)
          {
            v23 = 0;
            v24 = v7;
            do
            {
              v26 = *v24;
              v25 = v24[1];
              v24 = v20;
              if (v25 < v26)
              {
                v27 = v23;
                while (1)
                {
                  *(double *)((char *)v7 + v27 + 8) = v26;
                  if (!v27)
                    break;
                  v26 = *(double *)((char *)v7 + v27 - 8);
                  v27 -= 8;
                  if (v25 >= v26)
                  {
                    v28 = (double *)((char *)v7 + v27 + 8);
                    goto LABEL_41;
                  }
                }
                v28 = v7;
LABEL_41:
                *v28 = v25;
              }
              v20 = v24 + 1;
              v23 += 8;
            }
            while (v24 + 1 != a2);
          }
        }
        else if (!v22)
        {
          do
          {
            v30 = *v6;
            v29 = v6[1];
            v6 = v20;
            if (v29 < v30)
            {
              v31 = v20;
              do
              {
                *v31 = v30;
                v30 = *(v31 - 2);
                --v31;
              }
              while (v29 < v30);
              *v31 = v29;
            }
            ++v20;
          }
          while (v6 + 1 != a2);
        }
        return result;
    }
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,char *>(_BYTE *a1, _BYTE *a2, _BYTE *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;

  v3 = (char)*a2;
  v4 = (char)*a1;
  v5 = (char)*a3;
  if (v3 < v4)
  {
    if (v5 < v3)
    {
      *a1 = v5;
      *a3 = v4;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    v8 = (char)*a3;
    if (v8 >= v4)
      return 1;
    *a2 = v8;
    *a3 = v4;
    return 2;
  }
  if (v5 < v3)
  {
    *a2 = v5;
    *a3 = v3;
    v6 = (char)*a2;
    v7 = (char)*a1;
    if (v6 >= v7)
      return 1;
    *a1 = v6;
    *a2 = v7;
    return 2;
  }
  return 0;
}

char *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,char *,std::ranges::less &>(char *a1, char *a2)
{
  int v2;
  char *v3;
  int v4;
  char *v5;
  int v6;
  char v7;
  char v8;
  int v9;
  int v10;

  v2 = *a1;
  if (v2 >= *(a2 - 1))
  {
    v5 = a1 + 1;
    do
    {
      v3 = v5;
      if (v5 >= a2)
        break;
      ++v5;
    }
    while (v2 >= *v3);
  }
  else
  {
    v3 = a1;
    do
      v4 = *++v3;
    while (v2 >= v4);
  }
  if (v3 < a2)
  {
    do
      v6 = *--a2;
    while (v2 < v6);
  }
  if (v3 < a2)
  {
    v7 = *v3;
    v8 = *a2;
    do
    {
      *v3 = v8;
      *a2 = v7;
      do
      {
        v9 = *++v3;
        v7 = v9;
      }
      while (v2 >= v9);
      do
      {
        v10 = *--a2;
        v8 = v10;
      }
      while (v2 < v10);
    }
    while (v3 < a2);
  }
  if (v3 - 1 != a1)
    *a1 = *(v3 - 1);
  *(v3 - 1) = v2;
  return v3;
}

_BYTE *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,char *,std::ranges::less>(_BYTE *a1, _BYTE *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  _BYTE *v5;
  _BYTE *v6;
  int v7;
  int v8;
  char v9;
  _BYTE *v10;
  _BYTE *v11;
  int v12;
  int v13;

  v2 = 0;
  v3 = (char)*a1;
  do
    v4 = (char)a1[++v2];
  while (v4 < v3);
  v5 = &a1[v2];
  v6 = &a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if (v5 >= a2)
        break;
      v8 = (char)*--a2;
    }
    while (v8 >= v3);
  }
  else
  {
    do
      v7 = (char)*--a2;
    while (v7 >= v3);
  }
  if (v5 < a2)
  {
    v9 = *a2;
    v10 = &a1[v2];
    v11 = a2;
    do
    {
      *v10 = v9;
      *v11 = v4;
      do
      {
        v12 = (char)*++v10;
        LOBYTE(v4) = v12;
      }
      while (v12 < v3);
      do
      {
        v13 = (char)*--v11;
        v9 = v13;
      }
      while (v13 >= v3);
    }
    while (v10 < v11);
    v6 = v10 - 1;
  }
  if (v6 != a1)
    *a1 = *v6;
  *v6 = v3;
  return v6;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,char *>(char *a1, char *a2)
{
  int64_t v4;
  _BOOL8 result;
  int v6;
  int v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  char *v15;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (v6 < v7)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,char *>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,char *>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,char *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,char *>(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    if (v12 < v13)
    {
      v14 = v10;
      while (1)
      {
        a1[v14 + 3] = v13;
        if (v14 == -2)
          break;
        v13 = a1[v14-- + 1];
        if (v12 >= v13)
        {
          v15 = &a1[v14 + 3];
          goto LABEL_12;
        }
      }
      v15 = a1;
LABEL_12:
      *v15 = v12;
      if (++v11 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    ++v10;
    if (++v9 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,char *>(_BYTE *a1, _BYTE *a2, _BYTE *a3, _BYTE *a4)
{
  uint64_t result;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,char *>(a1, a2, a3);
  v9 = (char)*a4;
  v10 = (char)*a3;
  if (v9 < v10)
  {
    *a3 = v9;
    *a4 = v10;
    v11 = (char)*a3;
    v12 = (char)*a2;
    if (v11 < v12)
    {
      *a2 = v11;
      *a3 = v12;
      v13 = (char)*a2;
      v14 = (char)*a1;
      if (v13 < v14)
      {
        *a1 = v13;
        *a2 = v14;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,char *>(_BYTE *a1, _BYTE *a2, _BYTE *a3, _BYTE *a4, _BYTE *a5)
{
  uint64_t result;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,char *>(a1, a2, a3, a4);
  v11 = (char)*a5;
  v12 = (char)*a4;
  if (v11 < v12)
  {
    *a4 = v11;
    *a5 = v12;
    v13 = (char)*a4;
    v14 = (char)*a3;
    if (v13 < v14)
    {
      *a3 = v13;
      *a4 = v14;
      v15 = (char)*a3;
      v16 = (char)*a2;
      if (v15 < v16)
      {
        *a2 = v15;
        *a3 = v16;
        v17 = (char)*a2;
        v18 = (char)*a1;
        if (v17 < v18)
        {
          *a1 = v17;
          *a2 = v18;
        }
      }
    }
  }
  return result;
}

char *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less &,char *,char *>(char *a1, char *a2, char *a3, uint64_t a4)
{
  char *v6;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  char *v16;
  char *v17;
  uint64_t v18;
  int v19;
  int v20;
  BOOL v21;
  unint64_t v22;
  char *v23;
  int v24;
  unint64_t v25;
  unint64_t v26;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = a2 - a1;
    if (a2 - a1 >= 2)
    {
      v9 = (unint64_t)(a2 - a1 - 2) >> 1;
      do
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less &,char *>((uint64_t)a1, a4, v8, &a1[v9--]);
      while (v9 != -1);
    }
    v10 = v6;
    if (v6 != a3)
    {
      v11 = v6;
      do
      {
        v12 = *v11;
        v13 = *a1;
        if (v12 < v13)
        {
          *v11 = v13;
          *a1 = v12;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less &,char *>((uint64_t)a1, a4, v8, a1);
        }
        ++v11;
      }
      while (v11 != a3);
      v10 = a3;
    }
    if (v8 >= 2)
    {
      do
      {
        v14 = 0;
        LOBYTE(v15) = *a1;
        v16 = a1;
        do
        {
          v17 = &v16[v14 + 1];
          v18 = (2 * v14) | 1;
          v14 = 2 * v14 + 2;
          if (v14 >= v8)
          {
            LOBYTE(v19) = *v17;
            v14 = v18;
          }
          else
          {
            v19 = *v17;
            v20 = v17[1];
            v21 = v19 < v20;
            if (v19 <= v20)
              LOBYTE(v19) = v17[1];
            if (v21)
              ++v17;
            else
              v14 = v18;
          }
          *v16 = v19;
          v16 = v17;
        }
        while (v14 <= (uint64_t)((unint64_t)(v8 - 2) >> 1));
        if (v17 != --v6)
        {
          *v17 = *v6;
          *v6 = v15;
          v22 = v17 - a1 - 1;
          if (v17 - a1 + 1 < 2)
            goto LABEL_28;
          v23 = &a1[v22 >> 1];
          v24 = *v23;
          v15 = *v17;
          if (v24 >= v15)
            goto LABEL_28;
          v25 = v22 >> 1;
          do
          {
            *v17 = v24;
            v17 = v23;
            if (!v25)
              break;
            v26 = v25 - 1;
            v25 = (v25 - 1) >> 1;
            v23 = &a1[v26 >> 1];
            v24 = *v23;
          }
          while (v24 < v15);
        }
        *v17 = v15;
LABEL_28:
        v21 = v8-- <= 2;
      }
      while (!v21);
    }
    return v10;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less &,char *>(uint64_t result, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  _BYTE *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  int v10;
  int v11;
  BOOL v12;
  int v13;
  uint64_t v14;
  int v15;
  BOOL v16;

  if (a3 >= 2)
  {
    v4 = &a4[-result];
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= (uint64_t)&a4[-result])
    {
      v6 = 2 * (_QWORD)v4;
      v7 = (2 * (_QWORD)v4) | 1;
      v8 = (char *)(result + v7);
      v9 = v6 + 2;
      if (v9 >= a3)
      {
        LOBYTE(v10) = *v8;
      }
      else
      {
        v10 = *v8;
        v11 = v8[1];
        v12 = v10 < v11;
        if (v10 <= v11)
          LOBYTE(v10) = v8[1];
        if (v12)
        {
          ++v8;
          v7 = v9;
        }
      }
      v13 = (char)*a4;
      if (v13 <= (char)v10)
      {
        do
        {
          *a4 = v10;
          a4 = v8;
          if (v5 < v7)
            break;
          v14 = (2 * v7) | 1;
          v8 = (char *)(result + v14);
          v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            LOBYTE(v10) = *v8;
            v7 = v14;
          }
          else
          {
            v10 = *v8;
            v15 = v8[1];
            v16 = v10 < v15;
            if (v10 <= v15)
              LOBYTE(v10) = v8[1];
            if (v16)
              ++v8;
            else
              v7 = v14;
          }
        }
        while (v13 <= (char)v10);
        *a4 = v13;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,wchar_t *>(int *a1, int *a2, int *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;

  v3 = *a2;
  v4 = *a1;
  v5 = *a3;
  if (*a2 < *a1)
  {
    if (v5 < v3)
    {
      *a1 = v5;
      *a3 = v4;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    if (*a3 >= v4)
      return 1;
    *a2 = *a3;
    *a3 = v4;
    return 2;
  }
  if (v5 < v3)
  {
    *a2 = v5;
    *a3 = v3;
    v6 = *a1;
    if (*a2 >= *a1)
      return 1;
    *a1 = *a2;
    *a2 = v6;
    return 2;
  }
  return 0;
}

int *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,wchar_t *,std::ranges::less &>(int *a1, int *a2)
{
  int v2;
  int *v3;
  int v4;
  int *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;

  v2 = *a1;
  if (*a1 >= *(a2 - 1))
  {
    v5 = a1 + 1;
    do
    {
      v3 = v5;
      if (v5 >= a2)
        break;
      ++v5;
    }
    while (v2 >= *v3);
  }
  else
  {
    v3 = a1;
    do
    {
      v4 = v3[1];
      ++v3;
    }
    while (v2 >= v4);
  }
  if (v3 < a2)
  {
    do
      v6 = *--a2;
    while (v2 < v6);
  }
  if (v3 < a2)
  {
    v7 = *v3;
    v8 = *a2;
    do
    {
      *v3 = v8;
      *a2 = v7;
      do
      {
        v9 = v3[1];
        ++v3;
        v7 = v9;
      }
      while (v2 >= v9);
      do
      {
        v10 = *--a2;
        v8 = v10;
      }
      while (v2 < v10);
    }
    while (v3 < a2);
  }
  if (v3 - 1 != a1)
    *a1 = *(v3 - 1);
  *(v3 - 1) = v2;
  return v3;
}

int *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,wchar_t *,std::ranges::less>(int *a1, int *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int *v5;
  int *v6;
  int v7;
  int v8;
  int v9;
  int *v10;
  int *v11;
  int v12;
  int v13;

  v2 = 0;
  v3 = *a1;
  do
    v4 = a1[++v2];
  while (v4 < v3);
  v5 = &a1[v2];
  v6 = &a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if (v5 >= a2)
        break;
      v8 = *--a2;
    }
    while (v8 >= v3);
  }
  else
  {
    do
      v7 = *--a2;
    while (v7 >= v3);
  }
  if (v5 < a2)
  {
    v9 = *a2;
    v10 = &a1[v2];
    v11 = a2;
    do
    {
      *v10 = v9;
      *v11 = v4;
      do
      {
        v12 = v10[1];
        ++v10;
        v4 = v12;
      }
      while (v12 < v3);
      do
      {
        v13 = *--v11;
        v9 = v13;
      }
      while (v13 >= v3);
    }
    while (v10 < v11);
    v6 = v10 - 1;
  }
  if (v6 != a1)
    *a1 = *v6;
  *v6 = v3;
  return v6;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,wchar_t *>(int *a1, int *a2)
{
  uint64_t v4;
  _BOOL8 result;
  int v6;
  int v7;
  int *v8;
  int *v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (v6 < *a1)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,wchar_t *>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,wchar_t *>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,wchar_t *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,wchar_t *>(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 12;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    if (*v9 < *v8)
    {
      v14 = v11;
      while (1)
      {
        *(int *)((char *)a1 + v14) = v13;
        v15 = v14 - 4;
        if (v14 == 4)
          break;
        v13 = *(int *)((char *)a1 + v14 - 8);
        v14 -= 4;
        if (v12 >= v13)
        {
          v16 = (int *)((char *)a1 + v15);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 4;
    if (++v9 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,wchar_t *>(int *a1, int *a2, int *a3, int *a4)
{
  uint64_t result;
  int v9;
  int v10;
  int v11;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,wchar_t *>(a1, a2, a3);
  v9 = *a3;
  if (*a4 < *a3)
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = *a2;
    if (*a3 < *a2)
    {
      *a2 = *a3;
      *a3 = v10;
      v11 = *a1;
      if (*a2 < *a1)
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,wchar_t *>(int *a1, int *a2, int *a3, int *a4, int *a5)
{
  uint64_t result;
  int v11;
  int v12;
  int v13;
  int v14;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,wchar_t *>(a1, a2, a3, a4);
  v11 = *a4;
  if (*a5 < *a4)
  {
    *a4 = *a5;
    *a5 = v11;
    v12 = *a3;
    if (*a4 < *a3)
    {
      *a3 = *a4;
      *a4 = v12;
      v13 = *a2;
      if (*a3 < *a2)
      {
        *a2 = *a3;
        *a3 = v13;
        v14 = *a1;
        if (*a2 < *a1)
        {
          *a1 = *a2;
          *a2 = v14;
        }
      }
    }
  }
  return result;
}

int *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less &,wchar_t *,wchar_t *>(int *a1, int *a2, int *a3, uint64_t a4)
{
  int *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int *v12;
  int *v13;
  int *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int *v19;
  int *v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  int *v26;
  int v27;
  int v28;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 5)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less &,wchar_t *>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        v15 = *v14;
        if (*v14 < *a1)
        {
          *v14 = *a1;
          *a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less &,wchar_t *>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 5)
    {
      v16 = (unint64_t)v8 >> 2;
      do
      {
        v17 = 0;
        v18 = *a1;
        v19 = a1;
        do
        {
          v20 = &v19[v17 + 1];
          v21 = (2 * v17) | 1;
          v17 = 2 * v17 + 2;
          if (v17 >= v16)
          {
            v22 = *v20;
            v17 = v21;
          }
          else
          {
            v22 = *v20;
            v23 = v20[1];
            if (*v20 <= v23)
              v22 = v20[1];
            if (*v20 >= v23)
              v17 = v21;
            else
              ++v20;
          }
          *v19 = v22;
          v19 = v20;
        }
        while (v17 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        if (v20 == --v6)
        {
          *v20 = v18;
        }
        else
        {
          *v20 = *v6;
          *v6 = v18;
          v24 = (char *)v20 - (char *)a1 + 4;
          if (v24 >= 5)
          {
            v25 = (((unint64_t)v24 >> 2) - 2) >> 1;
            v26 = &a1[v25];
            v27 = *v26;
            v28 = *v20;
            if (*v26 < *v20)
            {
              do
              {
                *v20 = v27;
                v20 = v26;
                if (!v25)
                  break;
                v25 = (v25 - 1) >> 1;
                v26 = &a1[v25];
                v27 = *v26;
              }
              while (*v26 < v28);
              *v20 = v28;
            }
          }
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less &,wchar_t *>(uint64_t result, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 2)
    {
      v6 = v4 >> 1;
      v7 = (v4 >> 1) + 1;
      v8 = (int *)(result + 4 * v7);
      v9 = v6 + 2;
      if (v9 >= a3)
      {
        v10 = *v8;
      }
      else
      {
        v10 = *v8;
        v11 = v8[1];
        if (*v8 <= v11)
          v10 = v8[1];
        if (*v8 < v11)
        {
          ++v8;
          v7 = v9;
        }
      }
      v12 = *a4;
      if (v10 >= *a4)
      {
        do
        {
          *a4 = v10;
          a4 = v8;
          if (v5 < v7)
            break;
          v13 = (2 * v7) | 1;
          v8 = (int *)(result + 4 * v13);
          v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            v10 = *v8;
            v7 = v13;
          }
          else
          {
            v10 = *v8;
            v14 = v8[1];
            if (*v8 <= v14)
              v10 = v8[1];
            if (*v8 >= v14)
              v7 = v13;
            else
              ++v8;
          }
        }
        while (v10 >= v12);
        *a4 = v12;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,signed char *>(_BYTE *a1, _BYTE *a2, _BYTE *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;

  v3 = (char)*a2;
  v4 = (char)*a1;
  v5 = (char)*a3;
  if (v3 < v4)
  {
    if (v5 < v3)
    {
      *a1 = v5;
      *a3 = v4;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    v8 = (char)*a3;
    if (v8 >= v4)
      return 1;
    *a2 = v8;
    *a3 = v4;
    return 2;
  }
  if (v5 < v3)
  {
    *a2 = v5;
    *a3 = v3;
    v6 = (char)*a2;
    v7 = (char)*a1;
    if (v6 >= v7)
      return 1;
    *a1 = v6;
    *a2 = v7;
    return 2;
  }
  return 0;
}

char *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,signed char *,std::ranges::less &>(char *a1, char *a2)
{
  int v2;
  char *v3;
  int v4;
  char *v5;
  int v6;
  char v7;
  char v8;
  int v9;
  int v10;

  v2 = *a1;
  if (v2 >= *(a2 - 1))
  {
    v5 = a1 + 1;
    do
    {
      v3 = v5;
      if (v5 >= a2)
        break;
      ++v5;
    }
    while (v2 >= *v3);
  }
  else
  {
    v3 = a1;
    do
      v4 = *++v3;
    while (v2 >= v4);
  }
  if (v3 < a2)
  {
    do
      v6 = *--a2;
    while (v2 < v6);
  }
  if (v3 < a2)
  {
    v7 = *v3;
    v8 = *a2;
    do
    {
      *v3 = v8;
      *a2 = v7;
      do
      {
        v9 = *++v3;
        v7 = v9;
      }
      while (v2 >= v9);
      do
      {
        v10 = *--a2;
        v8 = v10;
      }
      while (v2 < v10);
    }
    while (v3 < a2);
  }
  if (v3 - 1 != a1)
    *a1 = *(v3 - 1);
  *(v3 - 1) = v2;
  return v3;
}

_BYTE *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,signed char *,std::ranges::less>(_BYTE *a1, _BYTE *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  _BYTE *v5;
  _BYTE *v6;
  int v7;
  int v8;
  char v9;
  _BYTE *v10;
  _BYTE *v11;
  int v12;
  int v13;

  v2 = 0;
  v3 = (char)*a1;
  do
    v4 = (char)a1[++v2];
  while (v4 < v3);
  v5 = &a1[v2];
  v6 = &a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if (v5 >= a2)
        break;
      v8 = (char)*--a2;
    }
    while (v8 >= v3);
  }
  else
  {
    do
      v7 = (char)*--a2;
    while (v7 >= v3);
  }
  if (v5 < a2)
  {
    v9 = *a2;
    v10 = &a1[v2];
    v11 = a2;
    do
    {
      *v10 = v9;
      *v11 = v4;
      do
      {
        v12 = (char)*++v10;
        LOBYTE(v4) = v12;
      }
      while (v12 < v3);
      do
      {
        v13 = (char)*--v11;
        v9 = v13;
      }
      while (v13 >= v3);
    }
    while (v10 < v11);
    v6 = v10 - 1;
  }
  if (v6 != a1)
    *a1 = *v6;
  *v6 = v3;
  return v6;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,signed char *>(char *a1, char *a2)
{
  int64_t v4;
  _BOOL8 result;
  int v6;
  int v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  char *v15;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (v6 < v7)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,signed char *>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,signed char *>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,signed char *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,signed char *>(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    if (v12 < v13)
    {
      v14 = v10;
      while (1)
      {
        a1[v14 + 3] = v13;
        if (v14 == -2)
          break;
        v13 = a1[v14-- + 1];
        if (v12 >= v13)
        {
          v15 = &a1[v14 + 3];
          goto LABEL_12;
        }
      }
      v15 = a1;
LABEL_12:
      *v15 = v12;
      if (++v11 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    ++v10;
    if (++v9 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,signed char *>(_BYTE *a1, _BYTE *a2, _BYTE *a3, _BYTE *a4)
{
  uint64_t result;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,signed char *>(a1, a2, a3);
  v9 = (char)*a4;
  v10 = (char)*a3;
  if (v9 < v10)
  {
    *a3 = v9;
    *a4 = v10;
    v11 = (char)*a3;
    v12 = (char)*a2;
    if (v11 < v12)
    {
      *a2 = v11;
      *a3 = v12;
      v13 = (char)*a2;
      v14 = (char)*a1;
      if (v13 < v14)
      {
        *a1 = v13;
        *a2 = v14;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,signed char *>(_BYTE *a1, _BYTE *a2, _BYTE *a3, _BYTE *a4, _BYTE *a5)
{
  uint64_t result;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,signed char *>(a1, a2, a3, a4);
  v11 = (char)*a5;
  v12 = (char)*a4;
  if (v11 < v12)
  {
    *a4 = v11;
    *a5 = v12;
    v13 = (char)*a4;
    v14 = (char)*a3;
    if (v13 < v14)
    {
      *a3 = v13;
      *a4 = v14;
      v15 = (char)*a3;
      v16 = (char)*a2;
      if (v15 < v16)
      {
        *a2 = v15;
        *a3 = v16;
        v17 = (char)*a2;
        v18 = (char)*a1;
        if (v17 < v18)
        {
          *a1 = v17;
          *a2 = v18;
        }
      }
    }
  }
  return result;
}

char *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less &,signed char *,signed char *>(char *a1, char *a2, char *a3, uint64_t a4)
{
  char *v6;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  char *v16;
  char *v17;
  uint64_t v18;
  int v19;
  int v20;
  BOOL v21;
  unint64_t v22;
  char *v23;
  int v24;
  unint64_t v25;
  unint64_t v26;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = a2 - a1;
    if (a2 - a1 >= 2)
    {
      v9 = (unint64_t)(a2 - a1 - 2) >> 1;
      do
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less &,signed char *>((uint64_t)a1, a4, v8, &a1[v9--]);
      while (v9 != -1);
    }
    v10 = v6;
    if (v6 != a3)
    {
      v11 = v6;
      do
      {
        v12 = *v11;
        v13 = *a1;
        if (v12 < v13)
        {
          *v11 = v13;
          *a1 = v12;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less &,signed char *>((uint64_t)a1, a4, v8, a1);
        }
        ++v11;
      }
      while (v11 != a3);
      v10 = a3;
    }
    if (v8 >= 2)
    {
      do
      {
        v14 = 0;
        LOBYTE(v15) = *a1;
        v16 = a1;
        do
        {
          v17 = &v16[v14 + 1];
          v18 = (2 * v14) | 1;
          v14 = 2 * v14 + 2;
          if (v14 >= v8)
          {
            LOBYTE(v19) = *v17;
            v14 = v18;
          }
          else
          {
            v19 = *v17;
            v20 = v17[1];
            v21 = v19 < v20;
            if (v19 <= v20)
              LOBYTE(v19) = v17[1];
            if (v21)
              ++v17;
            else
              v14 = v18;
          }
          *v16 = v19;
          v16 = v17;
        }
        while (v14 <= (uint64_t)((unint64_t)(v8 - 2) >> 1));
        if (v17 != --v6)
        {
          *v17 = *v6;
          *v6 = v15;
          v22 = v17 - a1 - 1;
          if (v17 - a1 + 1 < 2)
            goto LABEL_28;
          v23 = &a1[v22 >> 1];
          v24 = *v23;
          v15 = *v17;
          if (v24 >= v15)
            goto LABEL_28;
          v25 = v22 >> 1;
          do
          {
            *v17 = v24;
            v17 = v23;
            if (!v25)
              break;
            v26 = v25 - 1;
            v25 = (v25 - 1) >> 1;
            v23 = &a1[v26 >> 1];
            v24 = *v23;
          }
          while (v24 < v15);
        }
        *v17 = v15;
LABEL_28:
        v21 = v8-- <= 2;
      }
      while (!v21);
    }
    return v10;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less &,signed char *>(uint64_t result, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  _BYTE *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  int v10;
  int v11;
  BOOL v12;
  int v13;
  uint64_t v14;
  int v15;
  BOOL v16;

  if (a3 >= 2)
  {
    v4 = &a4[-result];
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= (uint64_t)&a4[-result])
    {
      v6 = 2 * (_QWORD)v4;
      v7 = (2 * (_QWORD)v4) | 1;
      v8 = (char *)(result + v7);
      v9 = v6 + 2;
      if (v9 >= a3)
      {
        LOBYTE(v10) = *v8;
      }
      else
      {
        v10 = *v8;
        v11 = v8[1];
        v12 = v10 < v11;
        if (v10 <= v11)
          LOBYTE(v10) = v8[1];
        if (v12)
        {
          ++v8;
          v7 = v9;
        }
      }
      v13 = (char)*a4;
      if (v13 <= (char)v10)
      {
        do
        {
          *a4 = v10;
          a4 = v8;
          if (v5 < v7)
            break;
          v14 = (2 * v7) | 1;
          v8 = (char *)(result + v14);
          v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            LOBYTE(v10) = *v8;
            v7 = v14;
          }
          else
          {
            v10 = *v8;
            v15 = v8[1];
            v16 = v10 < v15;
            if (v10 <= v15)
              LOBYTE(v10) = v8[1];
            if (v16)
              ++v8;
            else
              v7 = v14;
          }
        }
        while (v13 <= (char)v10);
        *a4 = v13;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned char *>(_BYTE *a1, _BYTE *a2, _BYTE *a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v3 = *a2;
  v4 = *a1;
  v5 = *a3;
  if (v3 < v4)
  {
    if (v5 < v3)
    {
      *a1 = v5;
      *a3 = v4;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    v8 = *a3;
    if (v8 >= v4)
      return 1;
    *a2 = v8;
    *a3 = v4;
    return 2;
  }
  if (v5 < v3)
  {
    *a2 = v5;
    *a3 = v3;
    v6 = *a2;
    v7 = *a1;
    if (v6 >= v7)
      return 1;
    *a1 = v6;
    *a2 = v7;
    return 2;
  }
  return 0;
}

unsigned __int8 *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,unsigned char *,std::ranges::less &>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned int v2;
  unsigned __int8 *v3;
  unsigned int v4;
  unsigned __int8 *v5;
  unsigned int v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unsigned int v9;
  unsigned int v10;

  v2 = *a1;
  if (v2 >= *(a2 - 1))
  {
    v5 = a1 + 1;
    do
    {
      v3 = v5;
      if (v5 >= a2)
        break;
      ++v5;
    }
    while (v2 >= *v3);
  }
  else
  {
    v3 = a1;
    do
      v4 = *++v3;
    while (v2 >= v4);
  }
  if (v3 < a2)
  {
    do
      v6 = *--a2;
    while (v2 < v6);
  }
  if (v3 < a2)
  {
    v7 = *v3;
    v8 = *a2;
    do
    {
      *v3 = v8;
      *a2 = v7;
      do
      {
        v9 = *++v3;
        v7 = v9;
      }
      while (v2 >= v9);
      do
      {
        v10 = *--a2;
        v8 = v10;
      }
      while (v2 < v10);
    }
    while (v3 < a2);
  }
  if (v3 - 1 != a1)
    *a1 = *(v3 - 1);
  *(v3 - 1) = v2;
  return v3;
}

_BYTE *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,unsigned char *,std::ranges::less>(_BYTE *a1, _BYTE *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  _BYTE *v5;
  _BYTE *v6;
  unsigned int v7;
  unsigned int v8;
  char v9;
  _BYTE *v10;
  _BYTE *v11;
  unsigned int v12;
  unsigned int v13;

  v2 = 0;
  v3 = *a1;
  do
    v4 = a1[++v2];
  while (v4 < v3);
  v5 = &a1[v2];
  v6 = &a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if (v5 >= a2)
        break;
      v8 = *--a2;
    }
    while (v8 >= v3);
  }
  else
  {
    do
      v7 = *--a2;
    while (v7 >= v3);
  }
  if (v5 < a2)
  {
    v9 = *a2;
    v10 = &a1[v2];
    v11 = a2;
    do
    {
      *v10 = v9;
      *v11 = v4;
      do
      {
        v12 = *++v10;
        LOBYTE(v4) = v12;
      }
      while (v12 < v3);
      do
      {
        v13 = *--v11;
        v9 = v13;
      }
      while (v13 >= v3);
    }
    while (v10 < v11);
    v6 = v10 - 1;
  }
  if (v6 != a1)
    *a1 = *v6;
  *v6 = v3;
  return v6;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned char *>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int64_t v4;
  _BOOL8 result;
  unsigned int v6;
  unsigned int v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned __int8 *v15;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (v6 < v7)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned char *>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned char *>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned char *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned char *>(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    if (v12 < v13)
    {
      v14 = v10;
      while (1)
      {
        a1[v14 + 3] = v13;
        if (v14 == -2)
          break;
        v13 = a1[v14-- + 1];
        if (v12 >= v13)
        {
          v15 = &a1[v14 + 3];
          goto LABEL_12;
        }
      }
      v15 = a1;
LABEL_12:
      *v15 = v12;
      if (++v11 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    ++v10;
    if (++v9 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned char *>(_BYTE *a1, _BYTE *a2, _BYTE *a3, _BYTE *a4)
{
  uint64_t result;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned char *>(a1, a2, a3);
  v9 = *a4;
  v10 = *a3;
  if (v9 < v10)
  {
    *a3 = v9;
    *a4 = v10;
    v11 = *a3;
    v12 = *a2;
    if (v11 < v12)
    {
      *a2 = v11;
      *a3 = v12;
      v13 = *a2;
      v14 = *a1;
      if (v13 < v14)
      {
        *a1 = v13;
        *a2 = v14;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned char *>(_BYTE *a1, _BYTE *a2, _BYTE *a3, _BYTE *a4, _BYTE *a5)
{
  uint64_t result;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned char *>(a1, a2, a3, a4);
  v11 = *a5;
  v12 = *a4;
  if (v11 < v12)
  {
    *a4 = v11;
    *a5 = v12;
    v13 = *a4;
    v14 = *a3;
    if (v13 < v14)
    {
      *a3 = v13;
      *a4 = v14;
      v15 = *a3;
      v16 = *a2;
      if (v15 < v16)
      {
        *a2 = v15;
        *a3 = v16;
        v17 = *a2;
        v18 = *a1;
        if (v17 < v18)
        {
          *a1 = v17;
          *a2 = v18;
        }
      }
    }
  }
  return result;
}

unsigned __int8 *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less &,unsigned char *,unsigned char *>(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4)
{
  unsigned __int8 *v6;
  uint64_t v8;
  unint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  BOOL v21;
  unint64_t v22;
  unsigned __int8 *v23;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = a2 - a1;
    if (a2 - a1 >= 2)
    {
      v9 = (unint64_t)(a2 - a1 - 2) >> 1;
      do
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less &,unsigned char *>((uint64_t)a1, a4, v8, &a1[v9--]);
      while (v9 != -1);
    }
    v10 = v6;
    if (v6 != a3)
    {
      v11 = v6;
      do
      {
        v12 = *v11;
        v13 = *a1;
        if (v12 < v13)
        {
          *v11 = v13;
          *a1 = v12;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less &,unsigned char *>((uint64_t)a1, a4, v8, a1);
        }
        ++v11;
      }
      while (v11 != a3);
      v10 = a3;
    }
    if (v8 >= 2)
    {
      do
      {
        v14 = 0;
        LOBYTE(v15) = *a1;
        v16 = a1;
        do
        {
          v17 = &v16[v14 + 1];
          v18 = (2 * v14) | 1;
          v14 = 2 * v14 + 2;
          if (v14 >= v8)
          {
            LOBYTE(v19) = *v17;
            v14 = v18;
          }
          else
          {
            v19 = *v17;
            v20 = v17[1];
            v21 = v19 >= v20;
            if (v19 <= v20)
              LOBYTE(v19) = v17[1];
            if (v21)
              v14 = v18;
            else
              ++v17;
          }
          *v16 = v19;
          v16 = v17;
        }
        while (v14 <= (uint64_t)((unint64_t)(v8 - 2) >> 1));
        if (v17 != --v6)
        {
          *v17 = *v6;
          *v6 = v15;
          v22 = v17 - a1 - 1;
          if (v17 - a1 + 1 < 2)
            continue;
          v23 = &a1[v22 >> 1];
          v24 = *v23;
          v15 = *v17;
          if (v24 >= v15)
            continue;
          v25 = v22 >> 1;
          do
          {
            *v17 = v24;
            v17 = v23;
            if (!v25)
              break;
            v26 = v25 - 1;
            v25 = (v25 - 1) >> 1;
            v23 = &a1[v26 >> 1];
            v24 = *v23;
          }
          while (v24 < v15);
        }
        *v17 = v15;
      }
      while (v8-- > 2);
    }
    return v10;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less &,unsigned char *>(uint64_t result, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  _BYTE *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  BOOL v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;

  if (a3 >= 2)
  {
    v4 = &a4[-result];
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= (uint64_t)&a4[-result])
    {
      v6 = 2 * (_QWORD)v4;
      v7 = (2 * (_QWORD)v4) | 1;
      v8 = (unsigned __int8 *)(result + v7);
      v9 = v6 + 2;
      if (v9 >= a3)
      {
        v10 = *v8;
      }
      else
      {
        v10 = *v8;
        v11 = v8[1];
        v12 = v10 >= v11;
        if (v10 <= v11)
          v10 = v8[1];
        if (!v12)
        {
          ++v8;
          v7 = v9;
        }
      }
      v13 = *a4;
      if (v10 >= v13)
      {
        do
        {
          *a4 = v10;
          a4 = v8;
          if (v5 < v7)
            break;
          v14 = (2 * v7) | 1;
          v8 = (unsigned __int8 *)(result + v14);
          v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            v10 = *v8;
            v7 = v14;
          }
          else
          {
            v10 = *v8;
            v15 = v8[1];
            v16 = v10 >= v15;
            if (v10 <= v15)
              v10 = v8[1];
            if (v16)
              v7 = v14;
            else
              ++v8;
          }
        }
        while (v10 >= v13);
        *a4 = v13;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,short *>(__int16 *a1, __int16 *a2, __int16 *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;

  v3 = *a2;
  v4 = *a1;
  v5 = *a3;
  if (v3 < v4)
  {
    if (v5 < v3)
    {
      *a1 = v5;
      *a3 = v4;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    v8 = *a3;
    if (v8 >= v4)
      return 1;
    *a2 = v8;
    *a3 = v4;
    return 2;
  }
  if (v5 < v3)
  {
    *a2 = v5;
    *a3 = v3;
    v6 = *a2;
    v7 = *a1;
    if (v6 >= v7)
      return 1;
    *a1 = v6;
    *a2 = v7;
    return 2;
  }
  return 0;
}

__int16 *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,short *,std::ranges::less &>(__int16 *a1, __int16 *a2)
{
  int v2;
  __int16 *v3;
  int v4;
  __int16 *v5;
  int v6;
  __int16 v7;
  __int16 v8;
  int v9;
  int v10;

  v2 = *a1;
  if (v2 >= *(a2 - 1))
  {
    v5 = a1 + 1;
    do
    {
      v3 = v5;
      if (v5 >= a2)
        break;
      ++v5;
    }
    while (v2 >= *v3);
  }
  else
  {
    v3 = a1;
    do
    {
      v4 = v3[1];
      ++v3;
    }
    while (v2 >= v4);
  }
  if (v3 < a2)
  {
    do
      v6 = *--a2;
    while (v2 < v6);
  }
  if (v3 < a2)
  {
    v7 = *v3;
    v8 = *a2;
    do
    {
      *v3 = v8;
      *a2 = v7;
      do
      {
        v9 = v3[1];
        ++v3;
        v7 = v9;
      }
      while (v2 >= v9);
      do
      {
        v10 = *--a2;
        v8 = v10;
      }
      while (v2 < v10);
    }
    while (v3 < a2);
  }
  if (v3 - 1 != a1)
    *a1 = *(v3 - 1);
  *(v3 - 1) = v2;
  return v3;
}

__int16 *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,short *,std::ranges::less>(__int16 *a1, __int16 *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  __int16 *v5;
  __int16 *v6;
  int v7;
  int v8;
  __int16 v9;
  __int16 *v10;
  __int16 *v11;
  int v12;
  int v13;

  v2 = 0;
  v3 = *a1;
  do
    v4 = a1[++v2];
  while (v4 < v3);
  v5 = &a1[v2];
  v6 = &a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if (v5 >= a2)
        break;
      v8 = *--a2;
    }
    while (v8 >= v3);
  }
  else
  {
    do
      v7 = *--a2;
    while (v7 >= v3);
  }
  if (v5 < a2)
  {
    v9 = *a2;
    v10 = &a1[v2];
    v11 = a2;
    do
    {
      *v10 = v9;
      *v11 = v4;
      do
      {
        v12 = v10[1];
        ++v10;
        LOWORD(v4) = v12;
      }
      while (v12 < v3);
      do
      {
        v13 = *--v11;
        v9 = v13;
      }
      while (v13 >= v3);
    }
    while (v10 < v11);
    v6 = v10 - 1;
  }
  if (v6 != a1)
    *a1 = *v6;
  *v6 = v3;
  return v6;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,short *>(__int16 *a1, __int16 *a2)
{
  uint64_t v4;
  _BOOL8 result;
  int v6;
  int v7;
  __int16 *v8;
  __int16 *v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  __int16 *v16;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (v6 < v7)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,short *>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,short *>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,short *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,short *>(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 6;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    if (v12 < v13)
    {
      v14 = v11;
      while (1)
      {
        *(__int16 *)((char *)a1 + v14) = v13;
        v15 = v14 - 2;
        if (v14 == 2)
          break;
        v13 = *(__int16 *)((char *)a1 + v14 - 4);
        v14 -= 2;
        if (v12 >= v13)
        {
          v16 = (__int16 *)((char *)a1 + v15);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 2;
    if (++v9 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,short *>(__int16 *a1, __int16 *a2, __int16 *a3, __int16 *a4)
{
  uint64_t result;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,short *>(a1, a2, a3);
  v9 = *a4;
  v10 = *a3;
  if (v9 < v10)
  {
    *a3 = v9;
    *a4 = v10;
    v11 = *a3;
    v12 = *a2;
    if (v11 < v12)
    {
      *a2 = v11;
      *a3 = v12;
      v13 = *a2;
      v14 = *a1;
      if (v13 < v14)
      {
        *a1 = v13;
        *a2 = v14;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,short *>(__int16 *a1, __int16 *a2, __int16 *a3, __int16 *a4, __int16 *a5)
{
  uint64_t result;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,short *>(a1, a2, a3, a4);
  v11 = *a5;
  v12 = *a4;
  if (v11 < v12)
  {
    *a4 = v11;
    *a5 = v12;
    v13 = *a4;
    v14 = *a3;
    if (v13 < v14)
    {
      *a3 = v13;
      *a4 = v14;
      v15 = *a3;
      v16 = *a2;
      if (v15 < v16)
      {
        *a2 = v15;
        *a3 = v16;
        v17 = *a2;
        v18 = *a1;
        if (v17 < v18)
        {
          *a1 = v17;
          *a2 = v18;
        }
      }
    }
  }
  return result;
}

__int16 *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less &,short *,short *>(__int16 *a1, __int16 *a2, __int16 *a3, uint64_t a4)
{
  __int16 *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int16 *v12;
  __int16 *v13;
  __int16 *v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  __int16 *v20;
  uint64_t v21;
  __int16 *v22;
  uint64_t v23;
  int v24;
  int v25;
  BOOL v26;
  uint64_t v27;
  unint64_t v28;
  __int16 *v29;
  int v30;
  int v31;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 3)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less &,short *>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        v15 = *v14;
        v16 = *a1;
        if (v15 < v16)
        {
          *v14 = v16;
          *a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less &,short *>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 3)
    {
      v17 = (unint64_t)v8 >> 1;
      do
      {
        v18 = 0;
        v19 = *a1;
        v20 = a1;
        do
        {
          v21 = 2 * v18 + 2;
          v22 = (__int16 *)((char *)v20 + v21);
          v23 = (2 * v18) | 1;
          if (v21 >= v17)
          {
            LOWORD(v25) = *v22;
            v18 = (2 * v18) | 1;
          }
          else
          {
            v24 = *v22;
            v25 = v22[1];
            v26 = v24 < v25;
            if (v24 > v25)
              LOWORD(v25) = *v22;
            if (v26)
            {
              ++v22;
              v18 = v21;
            }
            else
            {
              v18 = v23;
            }
          }
          *v20 = v25;
          v20 = v22;
        }
        while (v18 <= (uint64_t)((unint64_t)(v17 - 2) >> 1));
        if (v22 == --v6)
        {
          *v22 = v19;
        }
        else
        {
          *v22 = *v6;
          *v6 = v19;
          v27 = (char *)v22 - (char *)a1 + 2;
          if (v27 >= 3)
          {
            v28 = (((unint64_t)v27 >> 1) - 2) >> 1;
            v29 = &a1[v28];
            v30 = *v29;
            v31 = *v22;
            if (v30 < v31)
            {
              do
              {
                *v22 = v30;
                v22 = v29;
                if (!v28)
                  break;
                v28 = (v28 - 1) >> 1;
                v29 = &a1[v28];
                v30 = *v29;
              }
              while (v30 < v31);
              *v22 = v31;
            }
          }
        }
        v26 = v17-- <= 2;
      }
      while (!v26);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less &,short *>(uint64_t result, uint64_t a2, uint64_t a3, __int16 *a4)
{
  char *v4;
  int64_t v5;
  uint64_t v6;
  __int16 *v7;
  uint64_t v8;
  int v9;
  int v10;
  BOOL v11;
  int v12;
  uint64_t v13;
  int v14;
  BOOL v15;

  if (a3 >= 2)
  {
    v4 = (char *)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 1)
    {
      v6 = (uint64_t)(v4 + 1);
      v7 = (__int16 *)(result + 2 * (_QWORD)(v4 + 1));
      v8 = (uint64_t)(v4 + 2);
      if (v8 >= a3)
      {
        LOWORD(v9) = *v7;
      }
      else
      {
        v9 = *v7;
        v10 = v7[1];
        v11 = v9 < v10;
        if (v9 <= v10)
          LOWORD(v9) = v7[1];
        if (v11)
        {
          ++v7;
          v6 = v8;
        }
      }
      v12 = *a4;
      if (v12 <= (__int16)v9)
      {
        do
        {
          *a4 = v9;
          a4 = v7;
          if (v5 < v6)
            break;
          v13 = (2 * v6) | 1;
          v7 = (__int16 *)(result + 2 * v13);
          v6 = 2 * v6 + 2;
          if (v6 >= a3)
          {
            LOWORD(v9) = *v7;
            v6 = v13;
          }
          else
          {
            v9 = *v7;
            v14 = v7[1];
            v15 = v9 < v14;
            if (v9 <= v14)
              LOWORD(v9) = v7[1];
            if (v15)
              ++v7;
            else
              v6 = v13;
          }
        }
        while (v12 <= (__int16)v9);
        *a4 = v12;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned short *>(_WORD *a1, _WORD *a2, _WORD *a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v3 = (unsigned __int16)*a2;
  v4 = (unsigned __int16)*a1;
  v5 = (unsigned __int16)*a3;
  if (v3 < v4)
  {
    if (v5 < v3)
    {
      *a1 = v5;
      *a3 = v4;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    v8 = (unsigned __int16)*a3;
    if (v8 >= v4)
      return 1;
    *a2 = v8;
    *a3 = v4;
    return 2;
  }
  if (v5 < v3)
  {
    *a2 = v5;
    *a3 = v3;
    v6 = (unsigned __int16)*a2;
    v7 = (unsigned __int16)*a1;
    if (v6 >= v7)
      return 1;
    *a1 = v6;
    *a2 = v7;
    return 2;
  }
  return 0;
}

unsigned __int16 *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,unsigned short *,std::ranges::less &>(unsigned __int16 *a1, unsigned __int16 *a2)
{
  unsigned int v2;
  unsigned __int16 *v3;
  unsigned int v4;
  unsigned __int16 *v5;
  unsigned int v6;
  unsigned __int16 v7;
  unsigned __int16 v8;
  unsigned int v9;
  unsigned int v10;

  v2 = *a1;
  if (v2 >= *(a2 - 1))
  {
    v5 = a1 + 1;
    do
    {
      v3 = v5;
      if (v5 >= a2)
        break;
      ++v5;
    }
    while (v2 >= *v3);
  }
  else
  {
    v3 = a1;
    do
    {
      v4 = v3[1];
      ++v3;
    }
    while (v2 >= v4);
  }
  if (v3 < a2)
  {
    do
      v6 = *--a2;
    while (v2 < v6);
  }
  if (v3 < a2)
  {
    v7 = *v3;
    v8 = *a2;
    do
    {
      *v3 = v8;
      *a2 = v7;
      do
      {
        v9 = v3[1];
        ++v3;
        v7 = v9;
      }
      while (v2 >= v9);
      do
      {
        v10 = *--a2;
        v8 = v10;
      }
      while (v2 < v10);
    }
    while (v3 < a2);
  }
  if (v3 - 1 != a1)
    *a1 = *(v3 - 1);
  *(v3 - 1) = v2;
  return v3;
}

_WORD *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,unsigned short *,std::ranges::less>(_WORD *a1, _WORD *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  _WORD *v5;
  _WORD *v6;
  unsigned int v7;
  unsigned int v8;
  __int16 v9;
  _WORD *v10;
  _WORD *v11;
  unsigned int v12;
  unsigned int v13;

  v2 = 0;
  v3 = (unsigned __int16)*a1;
  do
    v4 = (unsigned __int16)a1[++v2];
  while (v4 < v3);
  v5 = &a1[v2];
  v6 = &a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if (v5 >= a2)
        break;
      v8 = (unsigned __int16)*--a2;
    }
    while (v8 >= v3);
  }
  else
  {
    do
      v7 = (unsigned __int16)*--a2;
    while (v7 >= v3);
  }
  if (v5 < a2)
  {
    v9 = *a2;
    v10 = &a1[v2];
    v11 = a2;
    do
    {
      *v10 = v9;
      *v11 = v4;
      do
      {
        v12 = (unsigned __int16)v10[1];
        ++v10;
        LOWORD(v4) = v12;
      }
      while (v12 < v3);
      do
      {
        v13 = (unsigned __int16)*--v11;
        v9 = v13;
      }
      while (v13 >= v3);
    }
    while (v10 < v11);
    v6 = v10 - 1;
  }
  if (v6 != a1)
    *a1 = *v6;
  *v6 = v3;
  return v6;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned short *>(unsigned __int16 *a1, unsigned __int16 *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unsigned int v6;
  unsigned int v7;
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (v6 < v7)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned short *>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned short *>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned short *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned short *>(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 6;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    if (v12 < v13)
    {
      v14 = v11;
      while (1)
      {
        *(unsigned __int16 *)((char *)a1 + v14) = v13;
        v15 = v14 - 2;
        if (v14 == 2)
          break;
        v13 = *(unsigned __int16 *)((char *)a1 + v14 - 4);
        v14 -= 2;
        if (v12 >= v13)
        {
          v16 = (unsigned __int16 *)((char *)a1 + v15);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 2;
    if (++v9 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned short *>(_WORD *a1, _WORD *a2, _WORD *a3, _WORD *a4)
{
  uint64_t result;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned short *>(a1, a2, a3);
  v9 = (unsigned __int16)*a4;
  v10 = (unsigned __int16)*a3;
  if (v9 < v10)
  {
    *a3 = v9;
    *a4 = v10;
    v11 = (unsigned __int16)*a3;
    v12 = (unsigned __int16)*a2;
    if (v11 < v12)
    {
      *a2 = v11;
      *a3 = v12;
      v13 = (unsigned __int16)*a2;
      v14 = (unsigned __int16)*a1;
      if (v13 < v14)
      {
        *a1 = v13;
        *a2 = v14;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned short *>(_WORD *a1, _WORD *a2, _WORD *a3, _WORD *a4, _WORD *a5)
{
  uint64_t result;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned short *>(a1, a2, a3, a4);
  v11 = (unsigned __int16)*a5;
  v12 = (unsigned __int16)*a4;
  if (v11 < v12)
  {
    *a4 = v11;
    *a5 = v12;
    v13 = (unsigned __int16)*a4;
    v14 = (unsigned __int16)*a3;
    if (v13 < v14)
    {
      *a3 = v13;
      *a4 = v14;
      v15 = (unsigned __int16)*a3;
      v16 = (unsigned __int16)*a2;
      if (v15 < v16)
      {
        *a2 = v15;
        *a3 = v16;
        v17 = (unsigned __int16)*a2;
        v18 = (unsigned __int16)*a1;
        if (v17 < v18)
        {
          *a1 = v17;
          *a2 = v18;
        }
      }
    }
  }
  return result;
}

unsigned __int16 *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less &,unsigned short *,unsigned short *>(unsigned __int16 *a1, unsigned __int16 *a2, unsigned __int16 *a3, uint64_t a4)
{
  unsigned __int16 *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int16 *v12;
  unsigned __int16 *v13;
  unsigned __int16 *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int16 v19;
  unsigned __int16 *v20;
  uint64_t v21;
  unsigned __int16 *v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  BOOL v26;
  uint64_t v27;
  unint64_t v28;
  unsigned __int16 *v29;
  unsigned int v30;
  unsigned int v31;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 3)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less &,unsigned short *>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        v15 = *v14;
        v16 = *a1;
        if (v15 < v16)
        {
          *v14 = v16;
          *a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less &,unsigned short *>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 3)
    {
      v17 = (unint64_t)v8 >> 1;
      do
      {
        v18 = 0;
        v19 = *a1;
        v20 = a1;
        do
        {
          v21 = 2 * v18 + 2;
          v22 = (unsigned __int16 *)((char *)v20 + v21);
          v23 = (2 * v18) | 1;
          if (v21 >= v17)
          {
            LOWORD(v25) = *v22;
            v18 = (2 * v18) | 1;
          }
          else
          {
            v24 = *v22;
            v25 = v22[1];
            v26 = v24 >= v25;
            if (v24 > v25)
              LOWORD(v25) = *v22;
            if (v26)
            {
              v18 = v23;
            }
            else
            {
              ++v22;
              v18 = v21;
            }
          }
          *v20 = v25;
          v20 = v22;
        }
        while (v18 <= (uint64_t)((unint64_t)(v17 - 2) >> 1));
        if (v22 == --v6)
        {
          *v22 = v19;
        }
        else
        {
          *v22 = *v6;
          *v6 = v19;
          v27 = (char *)v22 - (char *)a1 + 2;
          if (v27 >= 3)
          {
            v28 = (((unint64_t)v27 >> 1) - 2) >> 1;
            v29 = &a1[v28];
            v30 = *v29;
            v31 = *v22;
            if (v30 < v31)
            {
              do
              {
                *v22 = v30;
                v22 = v29;
                if (!v28)
                  break;
                v28 = (v28 - 1) >> 1;
                v29 = &a1[v28];
                v30 = *v29;
              }
              while (v30 < v31);
              *v22 = v31;
            }
          }
        }
      }
      while (v17-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less &,unsigned short *>(uint64_t result, uint64_t a2, uint64_t a3, _WORD *a4)
{
  char *v4;
  int64_t v5;
  uint64_t v6;
  unsigned __int16 *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;

  if (a3 >= 2)
  {
    v4 = (char *)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 1)
    {
      v6 = (uint64_t)(v4 + 1);
      v7 = (unsigned __int16 *)(result + 2 * (_QWORD)(v4 + 1));
      v8 = (uint64_t)(v4 + 2);
      if (v8 >= a3)
      {
        v9 = *v7;
      }
      else
      {
        v9 = *v7;
        v10 = v7[1];
        v11 = v9 >= v10;
        if (v9 <= v10)
          v9 = v7[1];
        if (!v11)
        {
          ++v7;
          v6 = v8;
        }
      }
      v12 = (unsigned __int16)*a4;
      if (v9 >= v12)
      {
        do
        {
          *a4 = v9;
          a4 = v7;
          if (v5 < v6)
            break;
          v13 = (2 * v6) | 1;
          v7 = (unsigned __int16 *)(result + 2 * v13);
          v6 = 2 * v6 + 2;
          if (v6 >= a3)
          {
            v9 = *v7;
            v6 = v13;
          }
          else
          {
            v9 = *v7;
            v14 = v7[1];
            v15 = v9 >= v14;
            if (v9 <= v14)
              v9 = v7[1];
            if (v15)
              v6 = v13;
            else
              ++v7;
          }
        }
        while (v9 >= v12);
        *a4 = v12;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,int *>(int *a1, int *a2, int *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;

  v3 = *a2;
  v4 = *a1;
  v5 = *a3;
  if (*a2 < *a1)
  {
    if (v5 < v3)
    {
      *a1 = v5;
      *a3 = v4;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    if (*a3 >= v4)
      return 1;
    *a2 = *a3;
    *a3 = v4;
    return 2;
  }
  if (v5 < v3)
  {
    *a2 = v5;
    *a3 = v3;
    v6 = *a1;
    if (*a2 >= *a1)
      return 1;
    *a1 = *a2;
    *a2 = v6;
    return 2;
  }
  return 0;
}

int *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,int *,std::ranges::less &>(int *a1, int *a2)
{
  int v2;
  int *v3;
  int v4;
  int *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;

  v2 = *a1;
  if (*a1 >= *(a2 - 1))
  {
    v5 = a1 + 1;
    do
    {
      v3 = v5;
      if (v5 >= a2)
        break;
      ++v5;
    }
    while (v2 >= *v3);
  }
  else
  {
    v3 = a1;
    do
    {
      v4 = v3[1];
      ++v3;
    }
    while (v2 >= v4);
  }
  if (v3 < a2)
  {
    do
      v6 = *--a2;
    while (v2 < v6);
  }
  if (v3 < a2)
  {
    v7 = *v3;
    v8 = *a2;
    do
    {
      *v3 = v8;
      *a2 = v7;
      do
      {
        v9 = v3[1];
        ++v3;
        v7 = v9;
      }
      while (v2 >= v9);
      do
      {
        v10 = *--a2;
        v8 = v10;
      }
      while (v2 < v10);
    }
    while (v3 < a2);
  }
  if (v3 - 1 != a1)
    *a1 = *(v3 - 1);
  *(v3 - 1) = v2;
  return v3;
}

int *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,int *,std::ranges::less>(int *a1, int *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int *v5;
  int *v6;
  int v7;
  int v8;
  int v9;
  int *v10;
  int *v11;
  int v12;
  int v13;

  v2 = 0;
  v3 = *a1;
  do
    v4 = a1[++v2];
  while (v4 < v3);
  v5 = &a1[v2];
  v6 = &a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if (v5 >= a2)
        break;
      v8 = *--a2;
    }
    while (v8 >= v3);
  }
  else
  {
    do
      v7 = *--a2;
    while (v7 >= v3);
  }
  if (v5 < a2)
  {
    v9 = *a2;
    v10 = &a1[v2];
    v11 = a2;
    do
    {
      *v10 = v9;
      *v11 = v4;
      do
      {
        v12 = v10[1];
        ++v10;
        v4 = v12;
      }
      while (v12 < v3);
      do
      {
        v13 = *--v11;
        v9 = v13;
      }
      while (v13 >= v3);
    }
    while (v10 < v11);
    v6 = v10 - 1;
  }
  if (v6 != a1)
    *a1 = *v6;
  *v6 = v3;
  return v6;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,int *>(int *a1, int *a2)
{
  uint64_t v4;
  _BOOL8 result;
  int v6;
  int v7;
  int *v8;
  int *v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (v6 < *a1)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,int *>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,int *>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,int *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,int *>(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 12;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    if (*v9 < *v8)
    {
      v14 = v11;
      while (1)
      {
        *(int *)((char *)a1 + v14) = v13;
        v15 = v14 - 4;
        if (v14 == 4)
          break;
        v13 = *(int *)((char *)a1 + v14 - 8);
        v14 -= 4;
        if (v12 >= v13)
        {
          v16 = (int *)((char *)a1 + v15);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 4;
    if (++v9 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,int *>(int *a1, int *a2, int *a3, int *a4)
{
  uint64_t result;
  int v9;
  int v10;
  int v11;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,int *>(a1, a2, a3);
  v9 = *a3;
  if (*a4 < *a3)
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = *a2;
    if (*a3 < *a2)
    {
      *a2 = *a3;
      *a3 = v10;
      v11 = *a1;
      if (*a2 < *a1)
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,int *>(int *a1, int *a2, int *a3, int *a4, int *a5)
{
  uint64_t result;
  int v11;
  int v12;
  int v13;
  int v14;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,int *>(a1, a2, a3, a4);
  v11 = *a4;
  if (*a5 < *a4)
  {
    *a4 = *a5;
    *a5 = v11;
    v12 = *a3;
    if (*a4 < *a3)
    {
      *a3 = *a4;
      *a4 = v12;
      v13 = *a2;
      if (*a3 < *a2)
      {
        *a2 = *a3;
        *a3 = v13;
        v14 = *a1;
        if (*a2 < *a1)
        {
          *a1 = *a2;
          *a2 = v14;
        }
      }
    }
  }
  return result;
}

int *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less &,int *,int *>(int *a1, int *a2, int *a3, uint64_t a4)
{
  int *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int *v12;
  int *v13;
  int *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int *v19;
  int *v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  int *v26;
  int v27;
  int v28;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 5)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less &,int *>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        v15 = *v14;
        if (*v14 < *a1)
        {
          *v14 = *a1;
          *a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less &,int *>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 5)
    {
      v16 = (unint64_t)v8 >> 2;
      do
      {
        v17 = 0;
        v18 = *a1;
        v19 = a1;
        do
        {
          v20 = &v19[v17 + 1];
          v21 = (2 * v17) | 1;
          v17 = 2 * v17 + 2;
          if (v17 >= v16)
          {
            v22 = *v20;
            v17 = v21;
          }
          else
          {
            v22 = *v20;
            v23 = v20[1];
            if (*v20 <= v23)
              v22 = v20[1];
            if (*v20 >= v23)
              v17 = v21;
            else
              ++v20;
          }
          *v19 = v22;
          v19 = v20;
        }
        while (v17 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        if (v20 == --v6)
        {
          *v20 = v18;
        }
        else
        {
          *v20 = *v6;
          *v6 = v18;
          v24 = (char *)v20 - (char *)a1 + 4;
          if (v24 >= 5)
          {
            v25 = (((unint64_t)v24 >> 2) - 2) >> 1;
            v26 = &a1[v25];
            v27 = *v26;
            v28 = *v20;
            if (*v26 < *v20)
            {
              do
              {
                *v20 = v27;
                v20 = v26;
                if (!v25)
                  break;
                v25 = (v25 - 1) >> 1;
                v26 = &a1[v25];
                v27 = *v26;
              }
              while (*v26 < v28);
              *v20 = v28;
            }
          }
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less &,int *>(uint64_t result, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 2)
    {
      v6 = v4 >> 1;
      v7 = (v4 >> 1) + 1;
      v8 = (int *)(result + 4 * v7);
      v9 = v6 + 2;
      if (v9 >= a3)
      {
        v10 = *v8;
      }
      else
      {
        v10 = *v8;
        v11 = v8[1];
        if (*v8 <= v11)
          v10 = v8[1];
        if (*v8 < v11)
        {
          ++v8;
          v7 = v9;
        }
      }
      v12 = *a4;
      if (v10 >= *a4)
      {
        do
        {
          *a4 = v10;
          a4 = v8;
          if (v5 < v7)
            break;
          v13 = (2 * v7) | 1;
          v8 = (int *)(result + 4 * v13);
          v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            v10 = *v8;
            v7 = v13;
          }
          else
          {
            v10 = *v8;
            v14 = v8[1];
            if (*v8 <= v14)
              v10 = v8[1];
            if (*v8 >= v14)
              v7 = v13;
            else
              ++v8;
          }
        }
        while (v10 >= v12);
        *a4 = v12;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned int *>(unsigned int *a1, unsigned int *a2, unsigned int *a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *a2;
  v4 = *a1;
  v5 = *a3;
  if (*a2 < *a1)
  {
    if (v5 < v3)
    {
      *a1 = v5;
      *a3 = v4;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    if (*a3 >= v4)
      return 1;
    *a2 = *a3;
    *a3 = v4;
    return 2;
  }
  if (v5 < v3)
  {
    *a2 = v5;
    *a3 = v3;
    v6 = *a1;
    if (*a2 >= *a1)
      return 1;
    *a1 = *a2;
    *a2 = v6;
    return 2;
  }
  return 0;
}

unsigned int *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,std::ranges::less &>(unsigned int *a1, int *a2)
{
  unsigned int v2;
  unsigned int *v3;
  unsigned int v4;
  int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;

  v2 = *a1;
  if (*a1 >= *(a2 - 1))
  {
    v5 = (int *)(a1 + 1);
    do
    {
      v3 = (unsigned int *)v5;
      if (v5 >= a2)
        break;
      ++v5;
    }
    while (v2 >= *v3);
  }
  else
  {
    v3 = a1;
    do
    {
      v4 = v3[1];
      ++v3;
    }
    while (v2 >= v4);
  }
  if (v3 < (unsigned int *)a2)
  {
    do
      v6 = *--a2;
    while (v2 < v6);
  }
  if (v3 < (unsigned int *)a2)
  {
    v7 = *v3;
    v8 = *a2;
    do
    {
      *v3 = v8;
      *a2 = v7;
      do
      {
        v9 = v3[1];
        ++v3;
        v7 = v9;
      }
      while (v2 >= v9);
      do
      {
        v10 = *--a2;
        v8 = v10;
      }
      while (v2 < v10);
    }
    while (v3 < (unsigned int *)a2);
  }
  if (v3 - 1 != a1)
    *a1 = *(v3 - 1);
  *(v3 - 1) = v2;
  return v3;
}

unsigned int *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,std::ranges::less>(unsigned int *a1, unsigned int *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  v2 = 0;
  v3 = *a1;
  do
    v4 = a1[++v2];
  while (v4 < v3);
  v5 = &a1[v2];
  v6 = &a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if (v5 >= a2)
        break;
      v8 = *--a2;
    }
    while (v8 >= v3);
  }
  else
  {
    do
      v7 = *--a2;
    while (v7 >= v3);
  }
  if (v5 < a2)
  {
    v9 = *a2;
    v10 = &a1[v2];
    v11 = a2;
    do
    {
      *v10 = v9;
      *v11 = v4;
      do
      {
        v12 = v10[1];
        ++v10;
        v4 = v12;
      }
      while (v12 < v3);
      do
      {
        v13 = *--v11;
        v9 = v13;
      }
      while (v13 >= v3);
    }
    while (v10 < v11);
    v6 = v10 - 1;
  }
  if (v6 != a1)
    *a1 = *v6;
  *v6 = v3;
  return v6;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned int *>(unsigned int *a1, unsigned int *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int *v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (v6 < *a1)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned int *>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned int *>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned int *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned int *>(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 12;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    if (*v9 < *v8)
    {
      v14 = v11;
      while (1)
      {
        *(unsigned int *)((char *)a1 + v14) = v13;
        v15 = v14 - 4;
        if (v14 == 4)
          break;
        v13 = *(unsigned int *)((char *)a1 + v14 - 8);
        v14 -= 4;
        if (v12 >= v13)
        {
          v16 = (unsigned int *)((char *)a1 + v15);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 4;
    if (++v9 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned int *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t result;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned int *>(a1, a2, a3);
  v9 = *a3;
  if (*a4 < *a3)
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = *a2;
    if (*a3 < *a2)
    {
      *a2 = *a3;
      *a3 = v10;
      v11 = *a1;
      if (*a2 < *a1)
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned int *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t result;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned int *>(a1, a2, a3, a4);
  v11 = *a4;
  if (*a5 < *a4)
  {
    *a4 = *a5;
    *a5 = v11;
    v12 = *a3;
    if (*a4 < *a3)
    {
      *a3 = *a4;
      *a4 = v12;
      v13 = *a2;
      if (*a3 < *a2)
      {
        *a2 = *a3;
        *a3 = v13;
        v14 = *a1;
        if (*a2 < *a1)
        {
          *a1 = *a2;
          *a2 = v14;
        }
      }
    }
  }
  return result;
}

unsigned int *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less &,unsigned int *,unsigned int *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, uint64_t a4)
{
  unsigned int *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 5)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less &,unsigned int *>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        v15 = *v14;
        if (*v14 < *a1)
        {
          *v14 = *a1;
          *a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less &,unsigned int *>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 5)
    {
      v16 = (unint64_t)v8 >> 2;
      do
      {
        v17 = 0;
        v18 = *a1;
        v19 = a1;
        do
        {
          v20 = &v19[v17 + 1];
          v21 = (2 * v17) | 1;
          v17 = 2 * v17 + 2;
          if (v17 >= v16)
          {
            v22 = *v20;
            v17 = v21;
          }
          else
          {
            v22 = *v20;
            v23 = v20[1];
            if (*v20 <= v23)
              v22 = v20[1];
            if (*v20 >= v23)
              v17 = v21;
            else
              ++v20;
          }
          *v19 = v22;
          v19 = v20;
        }
        while (v17 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        if (v20 == --v6)
        {
          *v20 = v18;
        }
        else
        {
          *v20 = *v6;
          *v6 = v18;
          v24 = (char *)v20 - (char *)a1 + 4;
          if (v24 >= 5)
          {
            v25 = (((unint64_t)v24 >> 2) - 2) >> 1;
            v26 = &a1[v25];
            v27 = *v26;
            v28 = *v20;
            if (*v26 < *v20)
            {
              do
              {
                *v20 = v27;
                v20 = v26;
                if (!v25)
                  break;
                v25 = (v25 - 1) >> 1;
                v26 = &a1[v25];
                v27 = *v26;
              }
              while (*v26 < v28);
              *v20 = v28;
            }
          }
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less &,unsigned int *>(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 2)
    {
      v6 = v4 >> 1;
      v7 = (v4 >> 1) + 1;
      v8 = (unsigned int *)(result + 4 * v7);
      v9 = v6 + 2;
      if (v9 >= a3)
      {
        v10 = *v8;
      }
      else
      {
        v10 = *v8;
        v11 = v8[1];
        if (*v8 <= v11)
          v10 = v8[1];
        if (*v8 < v11)
        {
          ++v8;
          v7 = v9;
        }
      }
      v12 = *a4;
      if (v10 >= *a4)
      {
        do
        {
          *a4 = v10;
          a4 = v8;
          if (v5 < v7)
            break;
          v13 = (2 * v7) | 1;
          v8 = (unsigned int *)(result + 4 * v13);
          v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            v10 = *v8;
            v7 = v13;
          }
          else
          {
            v10 = *v8;
            v14 = v8[1];
            if (*v8 <= v14)
              v10 = v8[1];
            if (*v8 >= v14)
              v7 = v13;
            else
              ++v8;
          }
        }
        while (v10 >= v12);
        *a4 = v12;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  v4 = *a1;
  v5 = *a3;
  if (*a2 < *a1)
  {
    if (v5 < v3)
    {
      *a1 = v5;
      *a3 = v4;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    if (*a3 >= v4)
      return 1;
    *a2 = *a3;
    *a3 = v4;
    return 2;
  }
  if (v5 < v3)
  {
    *a2 = v5;
    *a3 = v3;
    v6 = *a1;
    if (*a2 >= *a1)
      return 1;
    *a1 = *a2;
    *a2 = v6;
    return 2;
  }
  return 0;
}

uint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,long *,std::ranges::less &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *a1;
  if (*a1 >= *(a2 - 1))
  {
    v5 = a1 + 1;
    do
    {
      v3 = v5;
      if (v5 >= a2)
        break;
      ++v5;
    }
    while (v2 >= *v3);
  }
  else
  {
    v3 = a1;
    do
    {
      v4 = v3[1];
      ++v3;
    }
    while (v2 >= v4);
  }
  if (v3 < a2)
  {
    do
      v6 = *--a2;
    while (v2 < v6);
  }
  if (v3 < a2)
  {
    v7 = *v3;
    v8 = *a2;
    do
    {
      *v3 = v8;
      *a2 = v7;
      do
      {
        v9 = v3[1];
        ++v3;
        v7 = v9;
      }
      while (v2 >= v9);
      do
      {
        v10 = *--a2;
        v8 = v10;
      }
      while (v2 < v10);
    }
    while (v3 < a2);
  }
  if (v3 - 1 != a1)
    *a1 = *(v3 - 1);
  *(v3 - 1) = v2;
  return v3;
}

uint64_t *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,long *,std::ranges::less>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  v2 = 0;
  v3 = *a1;
  do
    v4 = a1[++v2];
  while (v4 < v3);
  v5 = &a1[v2];
  v6 = &a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if (v5 >= a2)
        break;
      v8 = *--a2;
    }
    while (v8 >= v3);
  }
  else
  {
    do
      v7 = *--a2;
    while (v7 >= v3);
  }
  if (v5 < a2)
  {
    v9 = *a2;
    v10 = &a1[v2];
    v11 = a2;
    do
    {
      *v10 = v9;
      *v11 = v4;
      do
      {
        v12 = v10[1];
        ++v10;
        v4 = v12;
      }
      while (v12 < v3);
      do
      {
        v13 = *--v11;
        v9 = v13;
      }
      while (v13 >= v3);
    }
    while (v10 < v11);
    v6 = v10 - 1;
  }
  if (v6 != a1)
    *a1 = *v6;
  *v6 = v3;
  return v6;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,long *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (v6 < *a1)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,long *>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,long *>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,long *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,long *>(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    if (*v9 < *v8)
    {
      v14 = v11;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v14) = v13;
        v15 = v14 - 8;
        if (v14 == 8)
          break;
        v13 = *(uint64_t *)((char *)a1 + v14 - 16);
        v14 -= 8;
        if (v12 >= v13)
        {
          v16 = (uint64_t *)((char *)a1 + v15);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,long *>(a1, a2, a3);
  v9 = *a3;
  if (*a4 < *a3)
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = *a2;
    if (*a3 < *a2)
    {
      *a2 = *a3;
      *a3 = v10;
      v11 = *a1;
      if (*a2 < *a1)
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,long *>(a1, a2, a3, a4);
  v11 = *a4;
  if (*a5 < *a4)
  {
    *a4 = *a5;
    *a5 = v11;
    v12 = *a3;
    if (*a4 < *a3)
    {
      *a3 = *a4;
      *a4 = v12;
      v13 = *a2;
      if (*a3 < *a2)
      {
        *a2 = *a3;
        *a3 = v13;
        v14 = *a1;
        if (*a2 < *a1)
        {
          *a1 = *a2;
          *a2 = v14;
        }
      }
    }
  }
  return result;
}

uint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less &,long *,long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less &,long *>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        v15 = *v14;
        if (*v14 < *a1)
        {
          *v14 = *a1;
          *a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less &,long *>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 9)
    {
      v16 = (unint64_t)v8 >> 3;
      do
      {
        v17 = 0;
        v18 = *a1;
        v19 = a1;
        do
        {
          v20 = &v19[v17 + 1];
          v21 = (2 * v17) | 1;
          v17 = 2 * v17 + 2;
          if (v17 >= v16)
          {
            v22 = *v20;
            v17 = v21;
          }
          else
          {
            v22 = *v20;
            v23 = v20[1];
            if (*v20 <= v23)
              v22 = v20[1];
            if (*v20 >= v23)
              v17 = v21;
            else
              ++v20;
          }
          *v19 = v22;
          v19 = v20;
        }
        while (v17 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        if (v20 == --v6)
        {
          *v20 = v18;
        }
        else
        {
          *v20 = *v6;
          *v6 = v18;
          v24 = (char *)v20 - (char *)a1 + 8;
          if (v24 >= 9)
          {
            v25 = (((unint64_t)v24 >> 3) - 2) >> 1;
            v26 = &a1[v25];
            v27 = *v26;
            v28 = *v20;
            if (*v26 < *v20)
            {
              do
              {
                *v20 = v27;
                v20 = v26;
                if (!v25)
                  break;
                v25 = (v25 - 1) >> 1;
                v26 = &a1[v25];
                v27 = *v26;
              }
              while (*v26 < v28);
              *v20 = v28;
            }
          }
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less &,long *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      v6 = v4 >> 2;
      v7 = (v4 >> 2) + 1;
      v8 = (uint64_t *)(result + 8 * v7);
      v9 = v6 + 2;
      if (v9 >= a3)
      {
        v10 = *v8;
      }
      else
      {
        v10 = *v8;
        v11 = v8[1];
        if (*v8 <= v11)
          v10 = v8[1];
        if (*v8 < v11)
        {
          ++v8;
          v7 = v9;
        }
      }
      v12 = *a4;
      if (v10 >= *a4)
      {
        do
        {
          *a4 = v10;
          a4 = v8;
          if (v5 < v7)
            break;
          v13 = (2 * v7) | 1;
          v8 = (uint64_t *)(result + 8 * v13);
          v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            v10 = *v8;
            v7 = v13;
          }
          else
          {
            v10 = *v8;
            v14 = v8[1];
            if (*v8 <= v14)
              v10 = v8[1];
            if (*v8 >= v14)
              v7 = v13;
            else
              ++v8;
          }
        }
        while (v10 >= v12);
        *a4 = v12;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned long *>(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v3 = *a2;
  v4 = *a1;
  v5 = *a3;
  if (*a2 < *a1)
  {
    if (v5 < v3)
    {
      *a1 = v5;
      *a3 = v4;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    if (*a3 >= v4)
      return 1;
    *a2 = *a3;
    *a3 = v4;
    return 2;
  }
  if (v5 < v3)
  {
    *a2 = v5;
    *a3 = v3;
    v6 = *a1;
    if (*a2 >= *a1)
      return 1;
    *a1 = *a2;
    *a2 = v6;
    return 2;
  }
  return 0;
}

unint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,unsigned long *,std::ranges::less &>(unint64_t *a1, uint64_t *a2)
{
  unint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v2 = *a1;
  if (*a1 >= *(a2 - 1))
  {
    v5 = (uint64_t *)(a1 + 1);
    do
    {
      v3 = (unint64_t *)v5;
      if (v5 >= a2)
        break;
      ++v5;
    }
    while (v2 >= *v3);
  }
  else
  {
    v3 = a1;
    do
    {
      v4 = v3[1];
      ++v3;
    }
    while (v2 >= v4);
  }
  if (v3 < (unint64_t *)a2)
  {
    do
      v6 = *--a2;
    while (v2 < v6);
  }
  if (v3 < (unint64_t *)a2)
  {
    v7 = *v3;
    v8 = *a2;
    do
    {
      *v3 = v8;
      *a2 = v7;
      do
      {
        v9 = v3[1];
        ++v3;
        v7 = v9;
      }
      while (v2 >= v9);
      do
      {
        v10 = *--a2;
        v8 = v10;
      }
      while (v2 < v10);
    }
    while (v3 < (unint64_t *)a2);
  }
  if (v3 - 1 != a1)
    *a1 = *(v3 - 1);
  *(v3 - 1) = v2;
  return v3;
}

unint64_t *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,unsigned long *,std::ranges::less>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v2 = 0;
  v3 = *a1;
  do
    v4 = a1[++v2];
  while (v4 < v3);
  v5 = &a1[v2];
  v6 = &a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if (v5 >= a2)
        break;
      v8 = *--a2;
    }
    while (v8 >= v3);
  }
  else
  {
    do
      v7 = *--a2;
    while (v7 >= v3);
  }
  if (v5 < a2)
  {
    v9 = *a2;
    v10 = &a1[v2];
    v11 = a2;
    do
    {
      *v10 = v9;
      *v11 = v4;
      do
      {
        v12 = v10[1];
        ++v10;
        v4 = v12;
      }
      while (v12 < v3);
      do
      {
        v13 = *--v11;
        v9 = v13;
      }
      while (v13 >= v3);
    }
    while (v10 < v11);
    v6 = v10 - 1;
  }
  if (v6 != a1)
    *a1 = *v6;
  *v6 = v3;
  return v6;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned long *>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (v6 < *a1)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned long *>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned long *>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned long *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned long *>(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    if (*v9 < *v8)
    {
      v14 = v11;
      while (1)
      {
        *(unint64_t *)((char *)a1 + v14) = v13;
        v15 = v14 - 8;
        if (v14 == 8)
          break;
        v13 = *(unint64_t *)((char *)a1 + v14 - 16);
        v14 -= 8;
        if (v12 >= v13)
        {
          v16 = (unint64_t *)((char *)a1 + v15);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned long *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  uint64_t result;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned long *>(a1, a2, a3);
  v9 = *a3;
  if (*a4 < *a3)
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = *a2;
    if (*a3 < *a2)
    {
      *a2 = *a3;
      *a3 = v10;
      v11 = *a1;
      if (*a2 < *a1)
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned long *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  uint64_t result;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned long *>(a1, a2, a3, a4);
  v11 = *a4;
  if (*a5 < *a4)
  {
    *a4 = *a5;
    *a5 = v11;
    v12 = *a3;
    if (*a4 < *a3)
    {
      *a3 = *a4;
      *a4 = v12;
      v13 = *a2;
      if (*a3 < *a2)
      {
        *a2 = *a3;
        *a3 = v13;
        v14 = *a1;
        if (*a2 < *a1)
        {
          *a1 = *a2;
          *a2 = v14;
        }
      }
    }
  }
  return result;
}

unint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less &,unsigned long *,unsigned long *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  unint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less &,unsigned long *>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        v15 = *v14;
        if (*v14 < *a1)
        {
          *v14 = *a1;
          *a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less &,unsigned long *>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 9)
    {
      v16 = (unint64_t)v8 >> 3;
      do
      {
        v17 = 0;
        v18 = *a1;
        v19 = a1;
        do
        {
          v20 = &v19[v17 + 1];
          v21 = (2 * v17) | 1;
          v17 = 2 * v17 + 2;
          if (v17 >= v16)
          {
            v22 = *v20;
            v17 = v21;
          }
          else
          {
            v22 = *v20;
            v23 = v20[1];
            if (*v20 <= v23)
              v22 = v20[1];
            if (*v20 >= v23)
              v17 = v21;
            else
              ++v20;
          }
          *v19 = v22;
          v19 = v20;
        }
        while (v17 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        if (v20 == --v6)
        {
          *v20 = v18;
        }
        else
        {
          *v20 = *v6;
          *v6 = v18;
          v24 = (char *)v20 - (char *)a1 + 8;
          if (v24 >= 9)
          {
            v25 = (((unint64_t)v24 >> 3) - 2) >> 1;
            v26 = &a1[v25];
            v27 = *v26;
            v28 = *v20;
            if (*v26 < *v20)
            {
              do
              {
                *v20 = v27;
                v20 = v26;
                if (!v25)
                  break;
                v25 = (v25 - 1) >> 1;
                v26 = &a1[v25];
                v27 = *v26;
              }
              while (*v26 < v28);
              *v20 = v28;
            }
          }
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less &,unsigned long *>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      v6 = v4 >> 2;
      v7 = (v4 >> 2) + 1;
      v8 = (unint64_t *)(result + 8 * v7);
      v9 = v6 + 2;
      if (v9 >= a3)
      {
        v10 = *v8;
      }
      else
      {
        v10 = *v8;
        v11 = v8[1];
        if (*v8 <= v11)
          v10 = v8[1];
        if (*v8 < v11)
        {
          ++v8;
          v7 = v9;
        }
      }
      v12 = *a4;
      if (v10 >= *a4)
      {
        do
        {
          *a4 = v10;
          a4 = v8;
          if (v5 < v7)
            break;
          v13 = (2 * v7) | 1;
          v8 = (unint64_t *)(result + 8 * v13);
          v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            v10 = *v8;
            v7 = v13;
          }
          else
          {
            v10 = *v8;
            v14 = v8[1];
            if (*v8 <= v14)
              v10 = v8[1];
            if (*v8 >= v14)
              v7 = v13;
            else
              ++v8;
          }
        }
        while (v10 >= v12);
        *a4 = v12;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,long long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  v4 = *a1;
  v5 = *a3;
  if (*a2 < *a1)
  {
    if (v5 < v3)
    {
      *a1 = v5;
      *a3 = v4;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    if (*a3 >= v4)
      return 1;
    *a2 = *a3;
    *a3 = v4;
    return 2;
  }
  if (v5 < v3)
  {
    *a2 = v5;
    *a3 = v3;
    v6 = *a1;
    if (*a2 >= *a1)
      return 1;
    *a1 = *a2;
    *a2 = v6;
    return 2;
  }
  return 0;
}

uint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,long long *,std::ranges::less &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *a1;
  if (*a1 >= *(a2 - 1))
  {
    v5 = a1 + 1;
    do
    {
      v3 = v5;
      if (v5 >= a2)
        break;
      ++v5;
    }
    while (v2 >= *v3);
  }
  else
  {
    v3 = a1;
    do
    {
      v4 = v3[1];
      ++v3;
    }
    while (v2 >= v4);
  }
  if (v3 < a2)
  {
    do
      v6 = *--a2;
    while (v2 < v6);
  }
  if (v3 < a2)
  {
    v7 = *v3;
    v8 = *a2;
    do
    {
      *v3 = v8;
      *a2 = v7;
      do
      {
        v9 = v3[1];
        ++v3;
        v7 = v9;
      }
      while (v2 >= v9);
      do
      {
        v10 = *--a2;
        v8 = v10;
      }
      while (v2 < v10);
    }
    while (v3 < a2);
  }
  if (v3 - 1 != a1)
    *a1 = *(v3 - 1);
  *(v3 - 1) = v2;
  return v3;
}

uint64_t *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,long long *,std::ranges::less>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  v2 = 0;
  v3 = *a1;
  do
    v4 = a1[++v2];
  while (v4 < v3);
  v5 = &a1[v2];
  v6 = &a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if (v5 >= a2)
        break;
      v8 = *--a2;
    }
    while (v8 >= v3);
  }
  else
  {
    do
      v7 = *--a2;
    while (v7 >= v3);
  }
  if (v5 < a2)
  {
    v9 = *a2;
    v10 = &a1[v2];
    v11 = a2;
    do
    {
      *v10 = v9;
      *v11 = v4;
      do
      {
        v12 = v10[1];
        ++v10;
        v4 = v12;
      }
      while (v12 < v3);
      do
      {
        v13 = *--v11;
        v9 = v13;
      }
      while (v13 >= v3);
    }
    while (v10 < v11);
    v6 = v10 - 1;
  }
  if (v6 != a1)
    *a1 = *v6;
  *v6 = v3;
  return v6;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,long long *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (v6 < *a1)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,long long *>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,long long *>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,long long *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,long long *>(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    if (*v9 < *v8)
    {
      v14 = v11;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v14) = v13;
        v15 = v14 - 8;
        if (v14 == 8)
          break;
        v13 = *(uint64_t *)((char *)a1 + v14 - 16);
        v14 -= 8;
        if (v12 >= v13)
        {
          v16 = (uint64_t *)((char *)a1 + v15);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,long long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,long long *>(a1, a2, a3);
  v9 = *a3;
  if (*a4 < *a3)
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = *a2;
    if (*a3 < *a2)
    {
      *a2 = *a3;
      *a3 = v10;
      v11 = *a1;
      if (*a2 < *a1)
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,long long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,long long *>(a1, a2, a3, a4);
  v11 = *a4;
  if (*a5 < *a4)
  {
    *a4 = *a5;
    *a5 = v11;
    v12 = *a3;
    if (*a4 < *a3)
    {
      *a3 = *a4;
      *a4 = v12;
      v13 = *a2;
      if (*a3 < *a2)
      {
        *a2 = *a3;
        *a3 = v13;
        v14 = *a1;
        if (*a2 < *a1)
        {
          *a1 = *a2;
          *a2 = v14;
        }
      }
    }
  }
  return result;
}

uint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less &,long long *,long long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less &,long long *>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        v15 = *v14;
        if (*v14 < *a1)
        {
          *v14 = *a1;
          *a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less &,long long *>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 9)
    {
      v16 = (unint64_t)v8 >> 3;
      do
      {
        v17 = 0;
        v18 = *a1;
        v19 = a1;
        do
        {
          v20 = &v19[v17 + 1];
          v21 = (2 * v17) | 1;
          v17 = 2 * v17 + 2;
          if (v17 >= v16)
          {
            v22 = *v20;
            v17 = v21;
          }
          else
          {
            v22 = *v20;
            v23 = v20[1];
            if (*v20 <= v23)
              v22 = v20[1];
            if (*v20 >= v23)
              v17 = v21;
            else
              ++v20;
          }
          *v19 = v22;
          v19 = v20;
        }
        while (v17 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        if (v20 == --v6)
        {
          *v20 = v18;
        }
        else
        {
          *v20 = *v6;
          *v6 = v18;
          v24 = (char *)v20 - (char *)a1 + 8;
          if (v24 >= 9)
          {
            v25 = (((unint64_t)v24 >> 3) - 2) >> 1;
            v26 = &a1[v25];
            v27 = *v26;
            v28 = *v20;
            if (*v26 < *v20)
            {
              do
              {
                *v20 = v27;
                v20 = v26;
                if (!v25)
                  break;
                v25 = (v25 - 1) >> 1;
                v26 = &a1[v25];
                v27 = *v26;
              }
              while (*v26 < v28);
              *v20 = v28;
            }
          }
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less &,long long *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      v6 = v4 >> 2;
      v7 = (v4 >> 2) + 1;
      v8 = (uint64_t *)(result + 8 * v7);
      v9 = v6 + 2;
      if (v9 >= a3)
      {
        v10 = *v8;
      }
      else
      {
        v10 = *v8;
        v11 = v8[1];
        if (*v8 <= v11)
          v10 = v8[1];
        if (*v8 < v11)
        {
          ++v8;
          v7 = v9;
        }
      }
      v12 = *a4;
      if (v10 >= *a4)
      {
        do
        {
          *a4 = v10;
          a4 = v8;
          if (v5 < v7)
            break;
          v13 = (2 * v7) | 1;
          v8 = (uint64_t *)(result + 8 * v13);
          v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            v10 = *v8;
            v7 = v13;
          }
          else
          {
            v10 = *v8;
            v14 = v8[1];
            if (*v8 <= v14)
              v10 = v8[1];
            if (*v8 >= v14)
              v7 = v13;
            else
              ++v8;
          }
        }
        while (v10 >= v12);
        *a4 = v12;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned long long *>(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v3 = *a2;
  v4 = *a1;
  v5 = *a3;
  if (*a2 < *a1)
  {
    if (v5 < v3)
    {
      *a1 = v5;
      *a3 = v4;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    if (*a3 >= v4)
      return 1;
    *a2 = *a3;
    *a3 = v4;
    return 2;
  }
  if (v5 < v3)
  {
    *a2 = v5;
    *a3 = v3;
    v6 = *a1;
    if (*a2 >= *a1)
      return 1;
    *a1 = *a2;
    *a2 = v6;
    return 2;
  }
  return 0;
}

unint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,unsigned long long *,std::ranges::less &>(unint64_t *a1, uint64_t *a2)
{
  unint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v2 = *a1;
  if (*a1 >= *(a2 - 1))
  {
    v5 = (uint64_t *)(a1 + 1);
    do
    {
      v3 = (unint64_t *)v5;
      if (v5 >= a2)
        break;
      ++v5;
    }
    while (v2 >= *v3);
  }
  else
  {
    v3 = a1;
    do
    {
      v4 = v3[1];
      ++v3;
    }
    while (v2 >= v4);
  }
  if (v3 < (unint64_t *)a2)
  {
    do
      v6 = *--a2;
    while (v2 < v6);
  }
  if (v3 < (unint64_t *)a2)
  {
    v7 = *v3;
    v8 = *a2;
    do
    {
      *v3 = v8;
      *a2 = v7;
      do
      {
        v9 = v3[1];
        ++v3;
        v7 = v9;
      }
      while (v2 >= v9);
      do
      {
        v10 = *--a2;
        v8 = v10;
      }
      while (v2 < v10);
    }
    while (v3 < (unint64_t *)a2);
  }
  if (v3 - 1 != a1)
    *a1 = *(v3 - 1);
  *(v3 - 1) = v2;
  return v3;
}

unint64_t *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,unsigned long long *,std::ranges::less>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v2 = 0;
  v3 = *a1;
  do
    v4 = a1[++v2];
  while (v4 < v3);
  v5 = &a1[v2];
  v6 = &a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if (v5 >= a2)
        break;
      v8 = *--a2;
    }
    while (v8 >= v3);
  }
  else
  {
    do
      v7 = *--a2;
    while (v7 >= v3);
  }
  if (v5 < a2)
  {
    v9 = *a2;
    v10 = &a1[v2];
    v11 = a2;
    do
    {
      *v10 = v9;
      *v11 = v4;
      do
      {
        v12 = v10[1];
        ++v10;
        v4 = v12;
      }
      while (v12 < v3);
      do
      {
        v13 = *--v11;
        v9 = v13;
      }
      while (v13 >= v3);
    }
    while (v10 < v11);
    v6 = v10 - 1;
  }
  if (v6 != a1)
    *a1 = *v6;
  *v6 = v3;
  return v6;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned long long *>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (v6 < *a1)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned long long *>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned long long *>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned long long *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned long long *>(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    if (*v9 < *v8)
    {
      v14 = v11;
      while (1)
      {
        *(unint64_t *)((char *)a1 + v14) = v13;
        v15 = v14 - 8;
        if (v14 == 8)
          break;
        v13 = *(unint64_t *)((char *)a1 + v14 - 16);
        v14 -= 8;
        if (v12 >= v13)
        {
          v16 = (unint64_t *)((char *)a1 + v15);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned long long *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  uint64_t result;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned long long *>(a1, a2, a3);
  v9 = *a3;
  if (*a4 < *a3)
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = *a2;
    if (*a3 < *a2)
    {
      *a2 = *a3;
      *a3 = v10;
      v11 = *a1;
      if (*a2 < *a1)
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned long long *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  uint64_t result;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,unsigned long long *>(a1, a2, a3, a4);
  v11 = *a4;
  if (*a5 < *a4)
  {
    *a4 = *a5;
    *a5 = v11;
    v12 = *a3;
    if (*a4 < *a3)
    {
      *a3 = *a4;
      *a4 = v12;
      v13 = *a2;
      if (*a3 < *a2)
      {
        *a2 = *a3;
        *a3 = v13;
        v14 = *a1;
        if (*a2 < *a1)
        {
          *a1 = *a2;
          *a2 = v14;
        }
      }
    }
  }
  return result;
}

unint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less &,unsigned long long *,unsigned long long *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  unint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less &,unsigned long long *>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        v15 = *v14;
        if (*v14 < *a1)
        {
          *v14 = *a1;
          *a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less &,unsigned long long *>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 9)
    {
      v16 = (unint64_t)v8 >> 3;
      do
      {
        v17 = 0;
        v18 = *a1;
        v19 = a1;
        do
        {
          v20 = &v19[v17 + 1];
          v21 = (2 * v17) | 1;
          v17 = 2 * v17 + 2;
          if (v17 >= v16)
          {
            v22 = *v20;
            v17 = v21;
          }
          else
          {
            v22 = *v20;
            v23 = v20[1];
            if (*v20 <= v23)
              v22 = v20[1];
            if (*v20 >= v23)
              v17 = v21;
            else
              ++v20;
          }
          *v19 = v22;
          v19 = v20;
        }
        while (v17 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        if (v20 == --v6)
        {
          *v20 = v18;
        }
        else
        {
          *v20 = *v6;
          *v6 = v18;
          v24 = (char *)v20 - (char *)a1 + 8;
          if (v24 >= 9)
          {
            v25 = (((unint64_t)v24 >> 3) - 2) >> 1;
            v26 = &a1[v25];
            v27 = *v26;
            v28 = *v20;
            if (*v26 < *v20)
            {
              do
              {
                *v20 = v27;
                v20 = v26;
                if (!v25)
                  break;
                v25 = (v25 - 1) >> 1;
                v26 = &a1[v25];
                v27 = *v26;
              }
              while (*v26 < v28);
              *v20 = v28;
            }
          }
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less &,unsigned long long *>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      v6 = v4 >> 2;
      v7 = (v4 >> 2) + 1;
      v8 = (unint64_t *)(result + 8 * v7);
      v9 = v6 + 2;
      if (v9 >= a3)
      {
        v10 = *v8;
      }
      else
      {
        v10 = *v8;
        v11 = v8[1];
        if (*v8 <= v11)
          v10 = v8[1];
        if (*v8 < v11)
        {
          ++v8;
          v7 = v9;
        }
      }
      v12 = *a4;
      if (v10 >= *a4)
      {
        do
        {
          *a4 = v10;
          a4 = v8;
          if (v5 < v7)
            break;
          v13 = (2 * v7) | 1;
          v8 = (unint64_t *)(result + 8 * v13);
          v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            v10 = *v8;
            v7 = v13;
          }
          else
          {
            v10 = *v8;
            v14 = v8[1];
            if (*v8 <= v14)
              v10 = v8[1];
            if (*v8 >= v14)
              v7 = v13;
            else
              ++v8;
          }
        }
        while (v10 >= v12);
        *a4 = v12;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,float *>(float *a1, float *a2, float *a3)
{
  float v3;
  float v4;
  float v5;
  float v6;

  v3 = *a2;
  v4 = *a1;
  v5 = *a3;
  if (*a2 < *a1)
  {
    if (v5 < v3)
    {
      *a1 = v5;
      *a3 = v4;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    if (*a3 >= v4)
      return 1;
    *a2 = *a3;
    *a3 = v4;
    return 2;
  }
  if (v5 < v3)
  {
    *a2 = v5;
    *a3 = v3;
    v6 = *a1;
    if (*a2 >= *a1)
      return 1;
    *a1 = *a2;
    *a2 = v6;
    return 2;
  }
  return 0;
}

float *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,float *,std::ranges::less &>(float *a1, float *a2)
{
  float v2;
  float *v3;
  float v4;
  float *v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;

  v2 = *a1;
  if (*a1 >= *(a2 - 1))
  {
    v5 = a1 + 1;
    do
    {
      v3 = v5;
      if (v5 >= a2)
        break;
      ++v5;
    }
    while (v2 >= *v3);
  }
  else
  {
    v3 = a1;
    do
    {
      v4 = v3[1];
      ++v3;
    }
    while (v2 >= v4);
  }
  if (v3 < a2)
  {
    do
      v6 = *--a2;
    while (v2 < v6);
  }
  if (v3 < a2)
  {
    v7 = *v3;
    v8 = *a2;
    do
    {
      *v3 = v8;
      *a2 = v7;
      do
      {
        v9 = v3[1];
        ++v3;
        v7 = v9;
      }
      while (v2 >= v9);
      do
      {
        v10 = *--a2;
        v8 = v10;
      }
      while (v2 < v10);
    }
    while (v3 < a2);
  }
  if (v3 - 1 != a1)
    *a1 = *(v3 - 1);
  *(v3 - 1) = v2;
  return v3;
}

float *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,float *,std::ranges::less>(float *a1, float *a2)
{
  uint64_t v2;
  float v3;
  float v4;
  float *v5;
  float *v6;
  float v7;
  float v8;
  float v9;
  float *v10;
  float *v11;
  float v12;
  float v13;

  v2 = 0;
  v3 = *a1;
  do
    v4 = a1[++v2];
  while (v4 < v3);
  v5 = &a1[v2];
  v6 = &a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if (v5 >= a2)
        break;
      v8 = *--a2;
    }
    while (v8 >= v3);
  }
  else
  {
    do
      v7 = *--a2;
    while (v7 >= v3);
  }
  if (v5 < a2)
  {
    v9 = *a2;
    v10 = &a1[v2];
    v11 = a2;
    do
    {
      *v10 = v9;
      *v11 = v4;
      do
      {
        v12 = v10[1];
        ++v10;
        v4 = v12;
      }
      while (v12 < v3);
      do
      {
        v13 = *--v11;
        v9 = v13;
      }
      while (v13 >= v3);
    }
    while (v10 < v11);
    v6 = v10 - 1;
  }
  if (v6 != a1)
    *a1 = *v6;
  *v6 = v3;
  return v6;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,float *>(float *a1, float *a2)
{
  uint64_t v4;
  _BOOL8 result;
  float v6;
  float v7;
  float *v8;
  float *v9;
  int v10;
  uint64_t v11;
  float v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  float *v16;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (v6 < *a1)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,float *>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,float *>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,float *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,float *>(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 12;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    if (*v9 < *v8)
    {
      v14 = v11;
      while (1)
      {
        *(float *)((char *)a1 + v14) = v13;
        v15 = v14 - 4;
        if (v14 == 4)
          break;
        v13 = *(float *)((char *)a1 + v14 - 8);
        v14 -= 4;
        if (v12 >= v13)
        {
          v16 = (float *)((char *)a1 + v15);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 4;
    if (++v9 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,float *>(float *a1, float *a2, float *a3, float *a4)
{
  uint64_t result;
  float v9;
  float v10;
  float v11;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,float *>(a1, a2, a3);
  v9 = *a3;
  if (*a4 < *a3)
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = *a2;
    if (*a3 < *a2)
    {
      *a2 = *a3;
      *a3 = v10;
      v11 = *a1;
      if (*a2 < *a1)
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,float *>(float *a1, float *a2, float *a3, float *a4, float *a5)
{
  uint64_t result;
  float v11;
  float v12;
  float v13;
  float v14;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,float *>(a1, a2, a3, a4);
  v11 = *a4;
  if (*a5 < *a4)
  {
    *a4 = *a5;
    *a5 = v11;
    v12 = *a3;
    if (*a4 < *a3)
    {
      *a3 = *a4;
      *a4 = v12;
      v13 = *a2;
      if (*a3 < *a2)
      {
        *a2 = *a3;
        *a3 = v13;
        v14 = *a1;
        if (*a2 < *a1)
        {
          *a1 = *a2;
          *a2 = v14;
        }
      }
    }
  }
  return result;
}

float *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less &,float *,float *>(float *a1, float *a2, float *a3, uint64_t a4)
{
  float *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  float *v12;
  float *v13;
  float *v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  float *v19;
  float *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  float *v25;
  float v26;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 5)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less &,float *>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        v15 = *v14;
        if (*v14 < *a1)
        {
          *v14 = *a1;
          *a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less &,float *>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 5)
    {
      v16 = (unint64_t)v8 >> 2;
      do
      {
        v17 = 0;
        v18 = *a1;
        v19 = a1;
        do
        {
          v20 = v19;
          v19 += v17 + 1;
          v21 = 2 * v17;
          v17 = (2 * v17) | 1;
          v22 = v21 + 2;
          if (v22 < v16 && *v19 < v19[1])
          {
            ++v19;
            v17 = v22;
          }
          *v20 = *v19;
        }
        while (v17 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        if (v19 != --v6)
        {
          *v19 = *v6;
          *v6 = v18;
          v23 = (char *)v19 - (char *)a1 + 4;
          if (v23 < 5)
            continue;
          v24 = (((unint64_t)v23 >> 2) - 2) >> 1;
          v25 = &a1[v24];
          v26 = *v25;
          v18 = *v19;
          if (*v25 >= *v19)
            continue;
          do
          {
            *v19 = v26;
            v19 = v25;
            if (!v24)
              break;
            v24 = (v24 - 1) >> 1;
            v25 = &a1[v24];
            v26 = *v25;
          }
          while (*v25 < v18);
        }
        *v19 = v18;
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less &,float *>(uint64_t result, uint64_t a2, uint64_t a3, float *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float v10;
  float v11;
  uint64_t v12;
  uint64_t v13;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 2)
    {
      v6 = v4 >> 1;
      v7 = (v4 >> 1) + 1;
      v8 = (float *)(result + 4 * v7);
      v9 = v6 + 2;
      if (v9 < a3 && *v8 < v8[1])
      {
        ++v8;
        v7 = v9;
      }
      v10 = *v8;
      v11 = *a4;
      if (*v8 >= *a4)
      {
        do
        {
          *a4 = v10;
          a4 = v8;
          if (v5 < v7)
            break;
          v12 = 2 * v7;
          v7 = (2 * v7) | 1;
          v8 = (float *)(result + 4 * v7);
          v13 = v12 + 2;
          if (v13 < a3 && *v8 < v8[1])
          {
            ++v8;
            v7 = v13;
          }
          v10 = *v8;
        }
        while (*v8 >= v11);
        *a4 = v11;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,double *>(double *a1, double *a2, double *a3)
{
  double v3;
  double v4;
  double v5;
  double v6;

  v3 = *a2;
  v4 = *a1;
  v5 = *a3;
  if (*a2 < *a1)
  {
    if (v5 < v3)
    {
      *a1 = v5;
      *a3 = v4;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    if (*a3 >= v4)
      return 1;
    *a2 = *a3;
    *a3 = v4;
    return 2;
  }
  if (v5 < v3)
  {
    *a2 = v5;
    *a3 = v3;
    v6 = *a1;
    if (*a2 >= *a1)
      return 1;
    *a1 = *a2;
    *a2 = v6;
    return 2;
  }
  return 0;
}

double *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,double *,std::ranges::less &>(double *a1, double *a2)
{
  double v2;
  double *v3;
  double v4;
  double *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;

  v2 = *a1;
  if (*a1 >= *(a2 - 1))
  {
    v5 = a1 + 1;
    do
    {
      v3 = v5;
      if (v5 >= a2)
        break;
      ++v5;
    }
    while (v2 >= *v3);
  }
  else
  {
    v3 = a1;
    do
    {
      v4 = v3[1];
      ++v3;
    }
    while (v2 >= v4);
  }
  if (v3 < a2)
  {
    do
      v6 = *--a2;
    while (v2 < v6);
  }
  if (v3 < a2)
  {
    v7 = *v3;
    v8 = *a2;
    do
    {
      *v3 = v8;
      *a2 = v7;
      do
      {
        v9 = v3[1];
        ++v3;
        v7 = v9;
      }
      while (v2 >= v9);
      do
      {
        v10 = *--a2;
        v8 = v10;
      }
      while (v2 < v10);
    }
    while (v3 < a2);
  }
  if (v3 - 1 != a1)
    *a1 = *(v3 - 1);
  *(v3 - 1) = v2;
  return v3;
}

double *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,double *,std::ranges::less>(double *a1, double *a2)
{
  uint64_t v2;
  double v3;
  double v4;
  double *v5;
  double *v6;
  double v7;
  double v8;
  double v9;
  double *v10;
  double *v11;
  double v12;
  double v13;

  v2 = 0;
  v3 = *a1;
  do
    v4 = a1[++v2];
  while (v4 < v3);
  v5 = &a1[v2];
  v6 = &a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if (v5 >= a2)
        break;
      v8 = *--a2;
    }
    while (v8 >= v3);
  }
  else
  {
    do
      v7 = *--a2;
    while (v7 >= v3);
  }
  if (v5 < a2)
  {
    v9 = *a2;
    v10 = &a1[v2];
    v11 = a2;
    do
    {
      *v10 = v9;
      *v11 = v4;
      do
      {
        v12 = v10[1];
        ++v10;
        v4 = v12;
      }
      while (v12 < v3);
      do
      {
        v13 = *--v11;
        v9 = v13;
      }
      while (v13 >= v3);
    }
    while (v10 < v11);
    v6 = v10 - 1;
  }
  if (v6 != a1)
    *a1 = *v6;
  *v6 = v3;
  return v6;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,double *>(double *a1, double *a2)
{
  uint64_t v4;
  _BOOL8 result;
  double v6;
  double v7;
  double *v8;
  double *v9;
  int v10;
  uint64_t v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (v6 < *a1)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,double *>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,double *>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,double *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,double *>(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    if (*v9 < *v8)
    {
      v14 = v11;
      while (1)
      {
        *(double *)((char *)a1 + v14) = v13;
        v15 = v14 - 8;
        if (v14 == 8)
          break;
        v13 = *(double *)((char *)a1 + v14 - 16);
        v14 -= 8;
        if (v12 >= v13)
        {
          v16 = (double *)((char *)a1 + v15);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,double *>(double *a1, double *a2, double *a3, double *a4)
{
  uint64_t result;
  double v9;
  double v10;
  double v11;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,double *>(a1, a2, a3);
  v9 = *a3;
  if (*a4 < *a3)
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = *a2;
    if (*a3 < *a2)
    {
      *a2 = *a3;
      *a3 = v10;
      v11 = *a1;
      if (*a2 < *a1)
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,double *>(double *a1, double *a2, double *a3, double *a4, double *a5)
{
  uint64_t result;
  double v11;
  double v12;
  double v13;
  double v14;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,double *>(a1, a2, a3, a4);
  v11 = *a4;
  if (*a5 < *a4)
  {
    *a4 = *a5;
    *a5 = v11;
    v12 = *a3;
    if (*a4 < *a3)
    {
      *a3 = *a4;
      *a4 = v12;
      v13 = *a2;
      if (*a3 < *a2)
      {
        *a2 = *a3;
        *a3 = v13;
        v14 = *a1;
        if (*a2 < *a1)
        {
          *a1 = *a2;
          *a2 = v14;
        }
      }
    }
  }
  return result;
}

double *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less &,double *,double *>(double *a1, double *a2, double *a3, uint64_t a4)
{
  double *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  double *v12;
  double *v13;
  double *v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double *v19;
  double *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  double *v25;
  double v26;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less &,double *>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        v15 = *v14;
        if (*v14 < *a1)
        {
          *v14 = *a1;
          *a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less &,double *>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 9)
    {
      v16 = (unint64_t)v8 >> 3;
      do
      {
        v17 = 0;
        v18 = *a1;
        v19 = a1;
        do
        {
          v20 = v19;
          v19 += v17 + 1;
          v21 = 2 * v17;
          v17 = (2 * v17) | 1;
          v22 = v21 + 2;
          if (v22 < v16 && *v19 < v19[1])
          {
            ++v19;
            v17 = v22;
          }
          *v20 = *v19;
        }
        while (v17 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        if (v19 != --v6)
        {
          *v19 = *v6;
          *v6 = v18;
          v23 = (char *)v19 - (char *)a1 + 8;
          if (v23 < 9)
            continue;
          v24 = (((unint64_t)v23 >> 3) - 2) >> 1;
          v25 = &a1[v24];
          v26 = *v25;
          v18 = *v19;
          if (*v25 >= *v19)
            continue;
          do
          {
            *v19 = v26;
            v19 = v25;
            if (!v24)
              break;
            v24 = (v24 - 1) >> 1;
            v25 = &a1[v24];
            v26 = *v25;
          }
          while (*v25 < v18);
        }
        *v19 = v18;
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less &,double *>(uint64_t result, uint64_t a2, uint64_t a3, double *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  double *v8;
  uint64_t v9;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t v13;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      v6 = v4 >> 2;
      v7 = (v4 >> 2) + 1;
      v8 = (double *)(result + 8 * v7);
      v9 = v6 + 2;
      if (v9 < a3 && *v8 < v8[1])
      {
        ++v8;
        v7 = v9;
      }
      v10 = *v8;
      v11 = *a4;
      if (*v8 >= *a4)
      {
        do
        {
          *a4 = v10;
          a4 = v8;
          if (v5 < v7)
            break;
          v12 = 2 * v7;
          v7 = (2 * v7) | 1;
          v8 = (double *)(result + 8 * v7);
          v13 = v12 + 2;
          if (v13 < a3 && *v8 < v8[1])
          {
            ++v8;
            v7 = v13;
          }
          v10 = *v8;
        }
        while (*v8 >= v11);
        *a4 = v11;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,long double *>(double *a1, double *a2, double *a3)
{
  double v3;
  double v4;
  double v5;
  double v6;

  v3 = *a2;
  v4 = *a1;
  v5 = *a3;
  if (*a2 < *a1)
  {
    if (v5 < v3)
    {
      *a1 = v5;
      *a3 = v4;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    if (*a3 >= v4)
      return 1;
    *a2 = *a3;
    *a3 = v4;
    return 2;
  }
  if (v5 < v3)
  {
    *a2 = v5;
    *a3 = v3;
    v6 = *a1;
    if (*a2 >= *a1)
      return 1;
    *a1 = *a2;
    *a2 = v6;
    return 2;
  }
  return 0;
}

double *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,long double *,std::ranges::less &>(double *a1, double *a2)
{
  double v2;
  double *v3;
  double v4;
  double *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;

  v2 = *a1;
  if (*a1 >= *(a2 - 1))
  {
    v5 = a1 + 1;
    do
    {
      v3 = v5;
      if (v5 >= a2)
        break;
      ++v5;
    }
    while (v2 >= *v3);
  }
  else
  {
    v3 = a1;
    do
    {
      v4 = v3[1];
      ++v3;
    }
    while (v2 >= v4);
  }
  if (v3 < a2)
  {
    do
      v6 = *--a2;
    while (v2 < v6);
  }
  if (v3 < a2)
  {
    v7 = *v3;
    v8 = *a2;
    do
    {
      *v3 = v8;
      *a2 = v7;
      do
      {
        v9 = v3[1];
        ++v3;
        v7 = v9;
      }
      while (v2 >= v9);
      do
      {
        v10 = *--a2;
        v8 = v10;
      }
      while (v2 < v10);
    }
    while (v3 < a2);
  }
  if (v3 - 1 != a1)
    *a1 = *(v3 - 1);
  *(v3 - 1) = v2;
  return v3;
}

double *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,long double *,std::ranges::less>(double *a1, double *a2)
{
  uint64_t v2;
  double v3;
  double v4;
  double *v5;
  double *v6;
  double v7;
  double v8;
  double v9;
  double *v10;
  double *v11;
  double v12;
  double v13;

  v2 = 0;
  v3 = *a1;
  do
    v4 = a1[++v2];
  while (v4 < v3);
  v5 = &a1[v2];
  v6 = &a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if (v5 >= a2)
        break;
      v8 = *--a2;
    }
    while (v8 >= v3);
  }
  else
  {
    do
      v7 = *--a2;
    while (v7 >= v3);
  }
  if (v5 < a2)
  {
    v9 = *a2;
    v10 = &a1[v2];
    v11 = a2;
    do
    {
      *v10 = v9;
      *v11 = v4;
      do
      {
        v12 = v10[1];
        ++v10;
        v4 = v12;
      }
      while (v12 < v3);
      do
      {
        v13 = *--v11;
        v9 = v13;
      }
      while (v13 >= v3);
    }
    while (v10 < v11);
    v6 = v10 - 1;
  }
  if (v6 != a1)
    *a1 = *v6;
  *v6 = v3;
  return v6;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,long double *>(double *a1, double *a2)
{
  uint64_t v4;
  _BOOL8 result;
  double v6;
  double v7;
  double *v8;
  double *v9;
  int v10;
  uint64_t v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (v6 < *a1)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,long double *>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,long double *>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,long double *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,long double *>(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    if (*v9 < *v8)
    {
      v14 = v11;
      while (1)
      {
        *(double *)((char *)a1 + v14) = v13;
        v15 = v14 - 8;
        if (v14 == 8)
          break;
        v13 = *(double *)((char *)a1 + v14 - 16);
        v14 -= 8;
        if (v12 >= v13)
        {
          v16 = (double *)((char *)a1 + v15);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,long double *>(double *a1, double *a2, double *a3, double *a4)
{
  uint64_t result;
  double v9;
  double v10;
  double v11;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,long double *>(a1, a2, a3);
  v9 = *a3;
  if (*a4 < *a3)
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = *a2;
    if (*a3 < *a2)
    {
      *a2 = *a3;
      *a3 = v10;
      v11 = *a1;
      if (*a2 < *a1)
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,long double *>(double *a1, double *a2, double *a3, double *a4, double *a5)
{
  uint64_t result;
  double v11;
  double v12;
  double v13;
  double v14;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less,long double *>(a1, a2, a3, a4);
  v11 = *a4;
  if (*a5 < *a4)
  {
    *a4 = *a5;
    *a5 = v11;
    v12 = *a3;
    if (*a4 < *a3)
    {
      *a3 = *a4;
      *a4 = v12;
      v13 = *a2;
      if (*a3 < *a2)
      {
        *a2 = *a3;
        *a3 = v13;
        v14 = *a1;
        if (*a2 < *a1)
        {
          *a1 = *a2;
          *a2 = v14;
        }
      }
    }
  }
  return result;
}

double *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less &,long double *,long double *>(double *a1, double *a2, double *a3, uint64_t a4)
{
  double *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  double *v12;
  double *v13;
  double *v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double *v19;
  double *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  double *v25;
  double v26;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less &,long double *>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        v15 = *v14;
        if (*v14 < *a1)
        {
          *v14 = *a1;
          *a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less &,long double *>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 9)
    {
      v16 = (unint64_t)v8 >> 3;
      do
      {
        v17 = 0;
        v18 = *a1;
        v19 = a1;
        do
        {
          v20 = v19;
          v19 += v17 + 1;
          v21 = 2 * v17;
          v17 = (2 * v17) | 1;
          v22 = v21 + 2;
          if (v22 < v16 && *v19 < v19[1])
          {
            ++v19;
            v17 = v22;
          }
          *v20 = *v19;
        }
        while (v17 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        if (v19 != --v6)
        {
          *v19 = *v6;
          *v6 = v18;
          v23 = (char *)v19 - (char *)a1 + 8;
          if (v23 < 9)
            continue;
          v24 = (((unint64_t)v23 >> 3) - 2) >> 1;
          v25 = &a1[v24];
          v26 = *v25;
          v18 = *v19;
          if (*v25 >= *v19)
            continue;
          do
          {
            *v19 = v26;
            v19 = v25;
            if (!v24)
              break;
            v24 = (v24 - 1) >> 1;
            v25 = &a1[v24];
            v26 = *v25;
          }
          while (*v25 < v18);
        }
        *v19 = v18;
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::ranges::less &,long double *>(uint64_t result, uint64_t a2, uint64_t a3, double *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  double *v8;
  uint64_t v9;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t v13;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      v6 = v4 >> 2;
      v7 = (v4 >> 2) + 1;
      v8 = (double *)(result + 8 * v7);
      v9 = v6 + 2;
      if (v9 < a3 && *v8 < v8[1])
      {
        ++v8;
        v7 = v9;
      }
      v10 = *v8;
      v11 = *a4;
      if (*v8 >= *a4)
      {
        do
        {
          *a4 = v10;
          a4 = v8;
          if (v5 < v7)
            break;
          v12 = 2 * v7;
          v7 = (2 * v7) | 1;
          v8 = (double *)(result + 8 * v7);
          v13 = v12 + 2;
          if (v13 < a3 && *v8 < v8[1])
          {
            ++v8;
            v7 = v13;
          }
          v10 = *v8;
        }
        while (*v8 >= v11);
        *a4 = v11;
      }
    }
  }
  return result;
}

const char *__cdecl std::bad_any_cast::what(const std::bad_any_cast *this)
{
  return "bad any cast";
}

const char *std::experimental::fundamentals_v1::bad_any_cast::what(std::experimental::fundamentals_v1::bad_any_cast *this)
{
  return "bad any cast";
}

void std::bad_any_cast::~bad_any_cast(std::bad_any_cast *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x194021E38);
}

void std::experimental::fundamentals_v1::bad_any_cast::~bad_any_cast(std::exception *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x194021E38);
}

void std::__call_once(std::once_flag::_State_type *a1, void *a2, void (__cdecl *a3)(void *))
{
  std::once_flag::_State_type *v6;
  char v7;

  pthread_mutex_lock(&std::mut);
  while (*a1 == 1)
    pthread_cond_wait(&std::cv, &std::mut);
  if (*a1)
  {
    pthread_mutex_unlock(&std::mut);
  }
  else
  {
    v6 = a1;
    *a1 = 1;
    pthread_mutex_unlock(&std::mut);
    ((void (*)(void *))a3)(a2);
    pthread_mutex_lock(&std::mut);
    atomic_store(0xFFFFFFFFFFFFFFFFLL, a1);
    pthread_mutex_unlock(&std::mut);
    pthread_cond_broadcast(&std::cv);
    v7 = 1;
    std::__exception_guard_exceptions<std::__call_once(unsigned long volatile&,void *,void (*)(void *))::$_0>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&v6);
  }
}

void sub_191FB9E9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::__call_once(unsigned long volatile&,void *,void (*)(void *))::$_0>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::__call_once(unsigned long volatile&,void *,void (*)(void *))::$_0>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 8))
  {
    pthread_mutex_lock(&std::mut);
    **(_QWORD **)a1 = 0;
    pthread_mutex_unlock(&std::mut);
    pthread_cond_broadcast(&std::cv);
  }
  return a1;
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

_WORD *std::__itoa::__u32toa(std::__itoa *this, _WORD *a2, char *a3)
{
  return std::__itoa::__base_10_u32[abi:ne180100](a2, this);
}

_WORD *std::__itoa::__base_10_u32[abi:ne180100](_WORD *a1, unsigned int a2)
{
  unsigned int v3;
  unint64_t v4;
  unsigned __int16 v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned __int16 v10;

  if (a2 >= 0xF4240)
  {
    if (a2 >= 0x5F5E100)
    {
      if (a2 > 0x3B9AC9FF)
      {
        return std::__itoa::__append10[abi:ne180100]<unsigned int>(a1, a2);
      }
      else
      {
        *(_BYTE *)a1 = a2 / 0x5F5E100 + 48;
        *(_WORD *)((char *)a1 + 1) = std::__itoa::__digits_base_10[a2 % 0x5F5E100 / 0xF4240];
        v7 = a2 % 0x5F5E100 % 0xF4240;
        *(_WORD *)((char *)a1 + 3) = std::__itoa::__digits_base_10[v7 / 0x2710uLL];
        v7 %= 0x2710u;
        *(_WORD *)((char *)a1 + 5) = std::__itoa::__digits_base_10[(unsigned __int16)v7 / 0x64u];
        *(_WORD *)((char *)a1 + 7) = std::__itoa::__digits_base_10[(unsigned __int16)v7 % 0x64u];
        return (_WORD *)((char *)a1 + 9);
      }
    }
    else
    {
      v3 = a2 / 0xF4240;
      if (a2 > 0x98967F)
      {
        *a1 = std::__itoa::__digits_base_10[v3];
        a1[1] = std::__itoa::__digits_base_10[a2 % 0xF4240 / 0x2710uLL];
        v9 = a2 % 0xF4240 % 0x2710;
        a1[2] = std::__itoa::__digits_base_10[(unsigned __int16)v9 / 0x64u];
        a1[3] = std::__itoa::__digits_base_10[(unsigned __int16)v9 % 0x64u];
        return a1 + 4;
      }
      else
      {
        *(_BYTE *)a1 = v3 + 48;
        v4 = (429497 * (unint64_t)(a2 % 0xF4240)) >> 32;
        *(_WORD *)((char *)a1 + 1) = std::__itoa::__digits_base_10[v4];
        v5 = a2 % 0xF4240 - 10000 * v4;
        *(_WORD *)((char *)a1 + 3) = std::__itoa::__digits_base_10[v5 / 0x64u];
        *(_WORD *)((char *)a1 + 5) = std::__itoa::__digits_base_10[v5 % 0x64u];
        return (_WORD *)((char *)a1 + 7);
      }
    }
  }
  else if (a2 >> 4 > 0x270)
  {
    v6 = a2 / 0x2710;
    if (a2 >> 5 > 0xC34)
    {
      *a1 = std::__itoa::__digits_base_10[v6];
      v10 = a2 % 0x2710;
      a1[1] = std::__itoa::__digits_base_10[v10 / 0x64u];
      a1[2] = std::__itoa::__digits_base_10[v10 % 0x64u];
      return a1 + 3;
    }
    else
    {
      *(_BYTE *)a1 = v6 + 48;
      *(_WORD *)((char *)a1 + 1) = std::__itoa::__digits_base_10[(5243 * (a2 % 0x2710)) >> 19];
      *(_WORD *)((char *)a1 + 3) = std::__itoa::__digits_base_10[(unsigned __int16)(a2 % 0x2710
                                                                                  - 100
                                                                                  * ((unsigned __int16)((5243 * (a2 % 0x2710)) >> 16) >> 3))];
      return (_WORD *)((char *)a1 + 5);
    }
  }
  else if (a2 > 0x63)
  {
    v8 = (unsigned __int16)a2 / 0x64u;
    if (a2 > 0x3E7)
    {
      *a1 = std::__itoa::__digits_base_10[v8];
      a1[1] = std::__itoa::__digits_base_10[(unsigned __int16)a2 % 0x64u];
      return a1 + 2;
    }
    else
    {
      *(_BYTE *)a1 = v8 + 48;
      *(_WORD *)((char *)a1 + 1) = std::__itoa::__digits_base_10[(unsigned __int16)a2 % 0x64u];
      return (_WORD *)((char *)a1 + 3);
    }
  }
  else if (a2 > 9)
  {
    *a1 = std::__itoa::__digits_base_10[a2];
    return a1 + 1;
  }
  else
  {
    *(_BYTE *)a1 = a2 + 48;
    return (_WORD *)((char *)a1 + 1);
  }
}

_WORD *std::__itoa::__u64toa(unint64_t this, _WORD *a2, char *a3)
{
  unint64_t v3;

  v3 = this;
  if (!HIDWORD(this))
    return std::__itoa::__base_10_u32[abi:ne180100](a2, this);
  if (this > 0x2540BE3FFLL)
  {
    a2 = std::__itoa::__base_10_u32[abi:ne180100](a2, this / 0x2540BE400);
    v3 %= 0x2540BE400uLL;
  }
  return std::__itoa::__append10[abi:ne180100]<unsigned long long>(a2, v3);
}

_BYTE *std::to_chars(_BYTE *this, _BYTE *a2, char *x2_0, float a3)
{
  return std::_Floating_to_chars[abi:ne180100]<(std::_Floating_to_chars_overload)0,float>(this, a2, a3);
}

_BYTE *std::_Floating_to_chars[abi:ne180100]<(std::_Floating_to_chars_overload)0,float>(_BYTE *a1, _BYTE *a2, float a3)
{
  _BYTE *v3;
  float v4;
  int v5;
  const char *v6;
  int64_t v7;

  v3 = a1;
  v4 = a3;
  if ((LODWORD(a3) & 0x80000000) != 0)
  {
    if (a1 == a2)
      return v3;
    *a1 = 45;
    v3 = a1 + 1;
    v5 = LODWORD(a3) & 0x7FFFFFFF;
    LODWORD(a3) &= ~0x80000000;
  }
  else
  {
    v5 = LODWORD(a3);
  }
  if ((~v5 & 0x7F800000) != 0)
    return std::__f2s_buffered_n(v3, a2, 0, a3);
  if ((v5 & 0x7FFFFF) != 0)
  {
    if ((LODWORD(v4) & 0x80000000) != 0 && (v5 & 0x7FFFFF) == 0x400000)
    {
      v6 = "nan(ind)";
      v7 = 8;
    }
    else
    {
      v6 = "nan";
      if ((v5 & 0x400000) != 0)
      {
        v7 = 3;
      }
      else
      {
        v6 = "nan(snan)";
        v7 = 9;
      }
    }
  }
  else
  {
    v6 = "inf";
    v7 = 3;
  }
  if (a2 - v3 < v7)
    return a2;
  memcpy(v3, v6, v7);
  v3 += v7;
  return v3;
}

char *std::to_chars(std::__1 *this, std::__1 *a2, char *a3, double a4)
{
  return std::_Floating_to_chars[abi:ne180100]<(std::_Floating_to_chars_overload)0,double>(this, a2, a4, 0, 0);
}

{
  return std::_Floating_to_chars[abi:ne180100]<(std::_Floating_to_chars_overload)0,double>(this, a2, a4, 0, 0);
}

char *std::_Floating_to_chars[abi:ne180100]<(std::_Floating_to_chars_overload)0,double>(std::__1 *this, std::__1 *a2, double a3, uint64_t a4, char *a5)
{
  std::__1 *v5;
  double v6;
  uint64_t v7;
  const char *v8;
  int64_t v9;

  v5 = this;
  v6 = a3;
  if ((*(_QWORD *)&a3 & 0x8000000000000000) != 0)
  {
    if (this == a2)
      return (char *)v5;
    *(_BYTE *)this = 45;
    v5 = (std::__1 *)((char *)this + 1);
    v7 = *(_QWORD *)&a3 & 0x7FFFFFFFFFFFFFFFLL;
    *(_QWORD *)&a3 &= ~0x8000000000000000;
  }
  else
  {
    v7 = *(_QWORD *)&a3;
  }
  if ((~v7 & 0x7FF0000000000000) != 0)
    return std::__d2s_buffered_n(v5, a2, 0, a5, a3);
  if ((v7 & 0xFFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_QWORD *)&v6 & 0x8000000000000000) != 0 && (v7 & 0xFFFFFFFFFFFFFLL) == 0x8000000000000)
    {
      v8 = "nan(ind)";
      v9 = 8;
    }
    else
    {
      v8 = "nan";
      if ((v7 & 0x8000000000000) != 0)
      {
        v9 = 3;
      }
      else
      {
        v8 = "nan(snan)";
        v9 = 9;
      }
    }
  }
  else
  {
    v8 = "inf";
    v9 = 3;
  }
  if (a2 - v5 < v9)
    return (char *)a2;
  memcpy(v5, v8, v9);
  return (char *)v5 + v9;
}

char *std::to_chars(char *a1, char *a2, int a3, float a4)
{
  return std::_Floating_to_chars[abi:ne180100]<(std::_Floating_to_chars_overload)1,float>(a1, a2, a3, a4);
}

char *std::_Floating_to_chars[abi:ne180100]<(std::_Floating_to_chars_overload)1,float>(char *a1, char *a2, int a3, float a4)
{
  char *v4;
  float v5;
  int v6;
  const char *v7;
  int64_t v8;

  v4 = a1;
  v5 = a4;
  if ((LODWORD(a4) & 0x80000000) != 0)
  {
    if (a1 == a2)
      return v4;
    *a1 = 45;
    v4 = a1 + 1;
    v6 = LODWORD(a4) & 0x7FFFFFFF;
    LODWORD(a4) &= ~0x80000000;
  }
  else
  {
    v6 = LODWORD(a4);
  }
  if ((~v6 & 0x7F800000) != 0)
  {
    if (a3 == 4)
      return std::_Floating_to_chars_hex_shortest[abi:ne180100]<float>(v4, a2, a4);
    else
      return std::__f2s_buffered_n(v4, a2, a3, a4);
  }
  else
  {
    if ((v6 & 0x7FFFFF) != 0)
    {
      if ((LODWORD(v5) & 0x80000000) != 0 && (v6 & 0x7FFFFF) == 0x400000)
      {
        v7 = "nan(ind)";
        v8 = 8;
      }
      else
      {
        v7 = "nan";
        if ((v6 & 0x400000) != 0)
        {
          v8 = 3;
        }
        else
        {
          v7 = "nan(snan)";
          v8 = 9;
        }
      }
    }
    else
    {
      v7 = "inf";
      v8 = 3;
    }
    if (a2 - v4 >= v8)
    {
      memcpy(v4, v7, v8);
      v4 += v8;
    }
    else
    {
      return a2;
    }
  }
  return v4;
}

char *std::to_chars(std::__1 *a1, std::__1 *a2, int a3, double a4)
{
  return std::_Floating_to_chars[abi:ne180100]<(std::_Floating_to_chars_overload)1,double>(a1, a2, a3, 0, a4);
}

{
  return std::_Floating_to_chars[abi:ne180100]<(std::_Floating_to_chars_overload)1,double>(a1, a2, a3, 0, a4);
}

char *std::_Floating_to_chars[abi:ne180100]<(std::_Floating_to_chars_overload)1,double>(std::__1 *this, std::__1 *a2, int a3, char *a4, double a5)
{
  char *v5;
  double v6;
  uint64_t v7;
  const char *v8;
  int64_t v9;

  v5 = (char *)this;
  v6 = a5;
  if ((*(_QWORD *)&a5 & 0x8000000000000000) != 0)
  {
    if (this == a2)
      return v5;
    *(_BYTE *)this = 45;
    v5 = (char *)this + 1;
    v7 = *(_QWORD *)&a5 & 0x7FFFFFFFFFFFFFFFLL;
    *(_QWORD *)&a5 &= ~0x8000000000000000;
  }
  else
  {
    v7 = *(_QWORD *)&a5;
  }
  if ((~v7 & 0x7FF0000000000000) != 0)
  {
    if (a3 == 4)
      return std::_Floating_to_chars_hex_shortest[abi:ne180100]<double>(v5, (char *)a2, a5);
    else
      return std::__d2s_buffered_n((std::__1 *)v5, a2, a3, a4, a5);
  }
  else
  {
    if ((v7 & 0xFFFFFFFFFFFFFLL) != 0)
    {
      if ((*(_QWORD *)&v6 & 0x8000000000000000) != 0 && (v7 & 0xFFFFFFFFFFFFFLL) == 0x8000000000000)
      {
        v8 = "nan(ind)";
        v9 = 8;
      }
      else
      {
        v8 = "nan";
        if ((v7 & 0x8000000000000) != 0)
        {
          v9 = 3;
        }
        else
        {
          v8 = "nan(snan)";
          v9 = 9;
        }
      }
    }
    else
    {
      v8 = "inf";
      v9 = 3;
    }
    if (a2 - (std::__1 *)v5 >= v9)
    {
      memcpy(v5, v8, v9);
      v5 += v9;
    }
    else
    {
      return (char *)a2;
    }
  }
  return v5;
}

char *std::_Floating_to_chars[abi:ne180100]<(std::_Floating_to_chars_overload)2,float>(char *a1, char *a2, int a3, char *a4, float a5)
{
  std::__1 *v5;
  float v6;
  int v7;
  const char *v8;
  int64_t v9;

  v5 = (std::__1 *)a1;
  v6 = a5;
  if ((LODWORD(a5) & 0x80000000) != 0)
  {
    if (a1 == a2)
      return (char *)v5;
    *a1 = 45;
    v5 = (std::__1 *)(a1 + 1);
    v7 = LODWORD(a5) & 0x7FFFFFFF;
    LODWORD(a5) &= ~0x80000000;
  }
  else
  {
    v7 = LODWORD(a5);
  }
  if ((~v7 & 0x7F800000) != 0)
  {
    switch(a3)
    {
      case 3:
        return std::_Floating_to_chars_general_precision[abi:ne180100]<float>(v5, a2, a4, a4, a5);
      case 2:
        return std::_Floating_to_chars_fixed_precision[abi:ne180100]<float>(v5, a2, (uint64_t)a4, a4, a5);
      case 1:
        return std::_Floating_to_chars_scientific_precision[abi:ne180100]<float>(v5, a2, (uint64_t)a4, a5);
    }
    return (char *)std::_Floating_to_chars_hex_precision[abi:ne180100]<float>(v5, (uint64_t)a2, (int)a4, a5);
  }
  else
  {
    if ((v7 & 0x7FFFFF) != 0)
    {
      if ((LODWORD(v6) & 0x80000000) != 0 && (v7 & 0x7FFFFF) == 0x400000)
      {
        v8 = "nan(ind)";
        v9 = 8;
      }
      else
      {
        v8 = "nan";
        if ((v7 & 0x400000) != 0)
        {
          v9 = 3;
        }
        else
        {
          v8 = "nan(snan)";
          v9 = 9;
        }
      }
    }
    else
    {
      v8 = "inf";
      v9 = 3;
    }
    if (a2 - (char *)v5 >= v9)
    {
      memcpy(v5, v8, v9);
      return (char *)v5 + v9;
    }
    else
    {
      return a2;
    }
  }
}

char *std::_Floating_to_chars[abi:ne180100]<(std::_Floating_to_chars_overload)2,double>(char *a1, char *a2, int a3, char *a4, double a5)
{
  std::__1 *v5;
  double v6;
  uint64_t v7;
  const char *v8;
  int64_t v9;

  v5 = (std::__1 *)a1;
  v6 = a5;
  if ((*(_QWORD *)&a5 & 0x8000000000000000) != 0)
  {
    if (a1 == a2)
      return (char *)v5;
    *a1 = 45;
    v5 = (std::__1 *)(a1 + 1);
    v7 = *(_QWORD *)&a5 & 0x7FFFFFFFFFFFFFFFLL;
    *(_QWORD *)&a5 &= ~0x8000000000000000;
  }
  else
  {
    v7 = *(_QWORD *)&a5;
  }
  if ((~v7 & 0x7FF0000000000000) != 0)
  {
    switch(a3)
    {
      case 3:
        return std::_Floating_to_chars_general_precision[abi:ne180100]<double>(v5, a2, a4, a4, a5);
      case 2:
        return std::_Floating_to_chars_fixed_precision[abi:ne180100]<double>(v5, a2, (uint64_t)a4, a4, a5);
      case 1:
        return std::_Floating_to_chars_scientific_precision[abi:ne180100]<double>(v5, a2, (uint64_t)a4, a5);
    }
    return (char *)std::_Floating_to_chars_hex_precision[abi:ne180100]<double>(v5, (uint64_t)a2, (int)a4, a5);
  }
  else
  {
    if ((v7 & 0xFFFFFFFFFFFFFLL) != 0)
    {
      if ((*(_QWORD *)&v6 & 0x8000000000000000) != 0 && (v7 & 0xFFFFFFFFFFFFFLL) == 0x8000000000000)
      {
        v8 = "nan(ind)";
        v9 = 8;
      }
      else
      {
        v8 = "nan";
        if ((v7 & 0x8000000000000) != 0)
        {
          v9 = 3;
        }
        else
        {
          v8 = "nan(snan)";
          v9 = 9;
        }
      }
    }
    else
    {
      v8 = "inf";
      v9 = 3;
    }
    if (a2 - (char *)v5 >= v9)
    {
      memcpy(v5, v8, v9);
      return (char *)v5 + v9;
    }
    else
    {
      return a2;
    }
  }
}

_WORD *std::__itoa::__append10[abi:ne180100]<unsigned int>(_WORD *a1, unsigned int a2)
{
  unsigned int v2;

  *a1 = std::__itoa::__digits_base_10[a2 / 0x5F5E100uLL];
  a1[1] = std::__itoa::__digits_base_10[a2 % 0x5F5E100 / 0xF4240uLL];
  v2 = a2 % 0x5F5E100 % 0xF4240;
  a1[2] = std::__itoa::__digits_base_10[v2 / 0x2710uLL];
  v2 %= 0x2710u;
  a1[3] = std::__itoa::__digits_base_10[(unsigned __int16)v2 / 0x64u];
  a1[4] = std::__itoa::__digits_base_10[(unsigned __int16)v2 % 0x64u];
  return a1 + 5;
}

_WORD *std::__itoa::__append10[abi:ne180100]<unsigned long long>(_WORD *a1, unint64_t a2)
{
  unsigned int v2;

  *a1 = std::__itoa::__digits_base_10[(a2 / 0x5F5E100)];
  v2 = a2 % 0x5F5E100;
  a1[1] = std::__itoa::__digits_base_10[v2 / 0xF4240uLL];
  v2 %= 0xF4240u;
  a1[2] = std::__itoa::__digits_base_10[v2 / 0x2710uLL];
  v2 %= 0x2710u;
  a1[3] = std::__itoa::__digits_base_10[(unsigned __int16)v2 / 0x64u];
  a1[4] = std::__itoa::__digits_base_10[(unsigned __int16)v2 % 0x64u];
  return a1 + 5;
}

char *std::_Floating_to_chars_hex_shortest[abi:ne180100]<float>(char *a1, char *a2, float a3)
{
  char *v3;
  int v4;
  char v5;
  char *v6;
  unsigned int v7;
  int v8;
  char v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;

  v3 = a2;
  if (a3 == 0.0)
  {
    if (a2 - a1 < 4)
      return v3;
    *(_DWORD *)a1 = 808153136;
    a1 += 4;
    return a1;
  }
  if (LODWORD(a3) >= 0x800000)
    v4 = (LODWORD(a3) >> 23) - 127;
  else
    v4 = -126;
  if (a1 == a2)
    return a1;
  if (LODWORD(a3) < 0x800000)
    v5 = 48;
  else
    v5 = 49;
  *a1 = v5;
  v6 = a1 + 1;
  if ((LODWORD(a3) & 0x7FFFFF) != 0)
  {
    if (v6 != a2)
    {
      v6 = a1 + 2;
      a1[1] = 46;
      v7 = 2 * (LODWORD(a3) & 0x7FFFFF);
      v8 = 20;
      while (v6 != a2)
      {
        *v6++ = std::__itoa::_Charconv_digits[(unint64_t)v7 >> v8];
        v7 &= ~(-1 << v8);
        v8 -= 4;
        if (!v7)
          goto LABEL_14;
      }
    }
  }
  else
  {
LABEL_14:
    if (a2 - v6 >= 2)
    {
      *v6 = 112;
      if (v4 >= 0)
        v9 = 43;
      else
        v9 = 45;
      if (v4 < 0)
        v10 = -v4;
      else
        v10 = (LODWORD(a3) >> 23) - 127;
      v6[1] = v9;
      v11 = v3 - (v6 + 2);
      if (v11 > 9)
        return (char *)std::__itoa::__base_10_u32[abi:ne180100]((_WORD *)v6 + 1, v10);
      v12 = (1233 * (32 - __clz(v10 | 1))) >> 12;
      if (v11 >= (((__PAIR64__(v12, v10) - std::__itoa::__pow10_32[v12]) >> 32) + 1))
        return (char *)std::__itoa::__base_10_u32[abi:ne180100]((_WORD *)v6 + 1, v10);
    }
  }
  return v3;
}

char *std::_Floating_to_chars_hex_shortest[abi:ne180100]<double>(char *a1, char *a2, double a3)
{
  char *v3;
  int v4;
  char v5;
  char *v6;
  unint64_t v7;
  int v8;
  char v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;

  v3 = a2;
  if (a3 == 0.0)
  {
    if (a2 - a1 < 4)
      return v3;
    *(_DWORD *)a1 = 808153136;
    a1 += 4;
    return a1;
  }
  if (*(_QWORD *)&a3 >> 52)
    v4 = (*(_QWORD *)&a3 >> 52) - 1023;
  else
    v4 = -1022;
  if (a1 == a2)
    return a1;
  if (*(_QWORD *)&a3 >> 52)
    v5 = 49;
  else
    v5 = 48;
  *a1 = v5;
  v6 = a1 + 1;
  v7 = *(_QWORD *)&a3 & 0xFFFFFFFFFFFFFLL;
  if ((*(_QWORD *)&a3 & 0xFFFFFFFFFFFFFLL) != 0)
  {
    if (v6 != a2)
    {
      v6 = a1 + 2;
      a1[1] = 46;
      v8 = 48;
      while (v6 != a2)
      {
        *v6++ = std::__itoa::_Charconv_digits[(v7 >> v8)];
        v7 &= ~(-1 << v8);
        v8 -= 4;
        if (!v7)
          goto LABEL_14;
      }
    }
  }
  else
  {
LABEL_14:
    if (a2 - v6 >= 2)
    {
      *v6 = 112;
      if (v4 >= 0)
        v9 = 43;
      else
        v9 = 45;
      if (v4 < 0)
        v10 = -v4;
      else
        v10 = (*(_QWORD *)&a3 >> 52) - 1023;
      v6[1] = v9;
      v11 = v3 - (v6 + 2);
      if (v11 > 9)
        return (char *)std::__itoa::__base_10_u32[abi:ne180100]((_WORD *)v6 + 1, v10);
      v12 = (1233 * (32 - __clz(v10 | 1))) >> 12;
      if (v11 >= (((__PAIR64__(v12, v10) - std::__itoa::__pow10_32[v12]) >> 32) + 1))
        return (char *)std::__itoa::__base_10_u32[abi:ne180100]((_WORD *)v6 + 1, v10);
    }
  }
  return v3;
}

char *std::_Floating_to_chars_scientific_precision[abi:ne180100]<float>(std::__1 *a1, char *a2, uint64_t a3, float a4)
{
  char *v4;

  v4 = a2;
  if ((a3 & 0x80000000) != 0)
  {
    a3 = 6;
  }
  else if (a3 >= 0x3B9ACA00)
  {
    return v4;
  }
  return std::__d2exp_buffered_n(a1, a2, (char *)a3, a4);
}

char *std::_Floating_to_chars_fixed_precision[abi:ne180100]<float>(std::__1 *a1, char *a2, uint64_t a3, char *a4, float a5)
{
  char *v5;

  v5 = a2;
  if ((a3 & 0x80000000) != 0)
  {
    a3 = 6;
  }
  else if (a3 >= 0x3B9ACA00)
  {
    return v5;
  }
  return std::__d2fixed_buffered_n(a1, a2, (char *)a3, a5, a4);
}

char *std::_Floating_to_chars_general_precision[abi:ne180100]<float>(_BYTE *a1, _BYTE *a2, unsigned int a3, char *a4, float a5)
{
  _BYTE *v5;
  int v7;
  int *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  unint64_t v12;
  _BOOL4 v14;
  int v15;
  uint64_t v16;
  char *v17;
  _BYTE *v18;
  char *v19;
  int v20;
  int v21;
  int v22;
  size_t v23;
  int64_t v25;
  _BYTE __s[117];
  uint64_t v27;

  v5 = a2;
  v27 = *MEMORY[0x1E0C80C00];
  if (a5 == 0.0)
  {
    if (a1 == a2)
      return v5;
    *a1 = 48;
    return a1 + 1;
  }
  if ((a3 & 0x80000000) != 0)
  {
    a3 = 6;
LABEL_13:
    v8 = (int *)((char *)&std::_General_precision_tables<float>::_Special_X_table
               + 4 * (((a3 - 1) * (a3 + 10)) >> 1));
    goto LABEL_14;
  }
  if (!a3)
  {
    a3 = 1;
    goto LABEL_13;
  }
  v7 = 1000000;
  if (a3 >= 0xF4240)
  {
LABEL_8:
    v8 = &std::_General_precision_tables<float>::_Ordinary_X_table;
    a3 = 39;
    goto LABEL_15;
  }
  if (a3 <= 7)
    goto LABEL_13;
  if (a3 >= 0x28)
  {
    v7 = a3;
    goto LABEL_8;
  }
  v8 = &std::_General_precision_tables<float>::_Ordinary_X_table;
LABEL_14:
  v7 = a3;
LABEL_15:
  v10 = v8;
  if (v8 != &v8[a3 + 5])
  {
    v11 = 4 * a3 + 20;
    v10 = v8;
    while (*v10 < LODWORD(a5))
    {
      ++v10;
      v11 -= 4;
      if (!v11)
      {
        v10 = &v8[a3 + 5];
        break;
      }
    }
  }
  v12 = (unint64_t)((char *)v10 - (char *)v8) >> 2;
  v14 = v7 > (int)v12 - 5 && (int)v12 - 5 > -5;
  if (v14)
  {
    v15 = v7 - v12 + 4;
    if (v15 >= 37)
      v16 = 37;
    else
      v16 = v15;
    v17 = std::_Floating_to_chars_fixed_precision[abi:ne180100]<float>((std::__1 *)__s, (char *)&v27, v16, a4, a5);
    v18 = 0;
    v19 = 0;
  }
  else
  {
    if (v7 >= 112)
      v20 = 112;
    else
      v20 = v7;
    LODWORD(v16) = v20 - 1;
    v19 = std::_Floating_to_chars_scientific_precision[abi:ne180100]<float>((std::__1 *)__s, (char *)&v27, (v20 - 1), a5);
    v17 = (char *)memchr(__s, 101, v19 - __s);
    if (!v17)
      v17 = v19;
    v18 = v17;
  }
  if ((int)v16 >= 1)
  {
    do
    {
      v22 = *--v17;
      v21 = v22;
    }
    while (v22 == 48);
    if (v21 != 46)
      ++v17;
  }
  v23 = v17 - __s;
  if (v5 - a1 >= v17 - __s)
  {
    memcpy(a1, __s, v23);
    v9 = &a1[v23];
    if (!v14)
    {
      v25 = v19 - v18;
      if (v5 - v9 >= v25)
      {
        memcpy(v9, v18, v25);
        return &v9[v25];
      }
      return v5;
    }
    return v9;
  }
  return v5;
}

_WORD *std::_Floating_to_chars_hex_precision[abi:ne180100]<float>(_BYTE *a1, uint64_t a2, int a3, float a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v14;
  unint64_t v15;
  int v16;
  size_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;

  v4 = a2;
  if (a3 >= 0)
    v5 = a3;
  else
    v5 = 6;
  v6 = (LODWORD(a4) >> 23) - 127;
  if ((LODWORD(a4) & 0x7FFFFF) != 0)
    v7 = -126;
  else
    v7 = 0;
  if (LODWORD(a4) >> 23)
  {
    v8 = (2 * (LODWORD(a4) & 0x7FFFFF)) | 0x1000000;
  }
  else
  {
    v6 = v7;
    v8 = 2 * (LODWORD(a4) & 0x7FFFFF);
  }
  if (v6 >= 0)
    v9 = v6;
  else
    v9 = -v6;
  if (v6 >= 0)
    v10 = 43;
  else
    v10 = 45;
  if (a2 - (uint64_t)a1 >= v5)
  {
    v11 = 2;
    if (v9 >= 0x64)
      v11 = 3;
    if (v9 < 0xA)
      v11 = 1;
    v12 = 3;
    if ((_DWORD)v5)
      v12 = 4;
    if (a2 - (uint64_t)a1 - v5 >= v11 + v12)
    {
      if (v5 >= 6)
      {
        *a1 = HIBYTE(v8) | 0x30;
      }
      else
      {
        v8 += (1 << (24 - 4 * v5)) & ((2 * v8 - 1) | v8) & (2 * v8);
        *a1 = HIBYTE(v8) | 0x30;
        v14 = a1 + 1;
        if (!(_DWORD)v5)
        {
LABEL_35:
          *v14 = 112;
          v14[1] = v10;
          v19 = v4 - (_QWORD)(v14 + 2);
          if (v19 > 9)
            return std::__itoa::__base_10_u32[abi:ne180100]((_WORD *)v14 + 1, v9);
          v20 = (1233 * (32 - __clz(v9 | 1))) >> 12;
          if (v19 >= (((__PAIR64__(v20, v9) - std::__itoa::__pow10_32[v20]) >> 32) + 1))
            return std::__itoa::__base_10_u32[abi:ne180100]((_WORD *)v14 + 1, v9);
          return (_WORD *)v4;
        }
      }
      v15 = v8 & 0xFFFFFF;
      a1[1] = 46;
      v14 = a1 + 3;
      a1[2] = std::__itoa::_Charconv_digits[v15 >> 20];
      v16 = v5 - 1;
      if (v16)
      {
        v17 = v16;
        v18 = 20;
        while (v18)
        {
          v15 = v15 & ~(-1 << v18);
          v18 -= 4;
          *v14++ = std::__itoa::_Charconv_digits[v15 >> v18];
          if (!(_DWORD)--v17)
            goto LABEL_35;
        }
        memset(v14, 48, v17);
        v14 += v17;
      }
      goto LABEL_35;
    }
  }
  return (_WORD *)v4;
}

char *std::_Floating_to_chars_scientific_precision[abi:ne180100]<double>(std::__1 *a1, char *a2, uint64_t a3, double a4)
{
  char *v4;

  v4 = a2;
  if ((a3 & 0x80000000) != 0)
  {
    a3 = 6;
  }
  else if (a3 >= 0x3B9ACA00)
  {
    return v4;
  }
  return std::__d2exp_buffered_n(a1, a2, (char *)a3, a4);
}

char *std::_Floating_to_chars_fixed_precision[abi:ne180100]<double>(std::__1 *a1, char *a2, uint64_t a3, char *a4, double a5)
{
  char *v5;

  v5 = a2;
  if ((a3 & 0x80000000) != 0)
  {
    a3 = 6;
  }
  else if (a3 >= 0x3B9ACA00)
  {
    return v5;
  }
  return std::__d2fixed_buffered_n(a1, a2, (char *)a3, a5, a4);
}

char *std::_Floating_to_chars_general_precision[abi:ne180100]<double>(_BYTE *a1, _BYTE *a2, unsigned int a3, char *a4, double a5)
{
  _BYTE *v5;
  uint64_t *v7;
  char *v8;
  uint64_t *v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  _BOOL4 v18;
  int v19;
  uint64_t v20;
  char *v21;
  _BYTE *v22;
  char *v23;
  int v24;
  int v25;
  int v26;
  size_t v27;
  int64_t v29;
  _BYTE __s[773];
  uint64_t v31;

  v5 = a2;
  v31 = *MEMORY[0x1E0C80C00];
  if (a5 == 0.0)
  {
    if (a1 == a2)
      return v5;
    *a1 = 48;
    return a1 + 1;
  }
  if ((a3 & 0x80000000) != 0)
  {
    a3 = 6;
LABEL_12:
    v9 = (uint64_t *)((char *)&std::_General_precision_tables<double>::_Special_X_table
                   + 8 * ((unsigned __int16)((a3 - 1) * (a3 + 10)) >> 1));
    v7 = &v9[a3 + 5];
    goto LABEL_13;
  }
  if (!a3)
  {
    a3 = 1;
    goto LABEL_12;
  }
  if (a3 >= 0xF4240)
  {
    v7 = (uint64_t *)&std::chrono::system_clock::is_steady;
    a3 = 1000000;
LABEL_21:
    v9 = std::_General_precision_tables<double>::_Ordinary_X_table;
    v11 = v7 - std::_General_precision_tables<double>::_Ordinary_X_table;
    v7 = std::_General_precision_tables<double>::_Ordinary_X_table;
    do
    {
      v12 = v11 >> 1;
      v13 = &v7[v11 >> 1];
      v15 = *v13;
      v14 = v13 + 1;
      v11 += ~(v11 >> 1);
      if (v15 < *(_QWORD *)&a5)
        v7 = v14;
      else
        v11 = v12;
    }
    while (v11);
    goto LABEL_26;
  }
  if (a3 <= 0xF)
    goto LABEL_12;
  if (a3 > 0x135)
  {
    v7 = (uint64_t *)&std::chrono::system_clock::is_steady;
    goto LABEL_21;
  }
  v9 = std::_General_precision_tables<double>::_Ordinary_X_table;
  v7 = &std::_General_precision_tables<double>::_Ordinary_X_table[a3 + 5];
  if (a3 >= 0x9C)
  {
    if (v7 == std::_General_precision_tables<double>::_Ordinary_X_table)
    {
      v7 = std::_General_precision_tables<double>::_Ordinary_X_table;
      goto LABEL_26;
    }
    goto LABEL_21;
  }
LABEL_13:
  if (v9 == v7)
  {
    v9 = v7;
  }
  else
  {
    v10 = v9;
    while ((unint64_t)*v10 < *(_QWORD *)&a5)
    {
      if (++v10 == v7)
        goto LABEL_26;
    }
    v7 = v10;
  }
LABEL_26:
  v16 = (unint64_t)((char *)v7 - (char *)v9) >> 3;
  v18 = (int)a3 > (int)v16 - 5 && (int)v16 - 5 > -5;
  if (v18)
  {
    v19 = a3 - v16 + 4;
    if (v19 >= 66)
      v20 = 66;
    else
      v20 = v19;
    v21 = std::_Floating_to_chars_fixed_precision[abi:ne180100]<double>((std::__1 *)__s, (char *)&v31, v20, a4, a5);
    v22 = 0;
    v23 = 0;
  }
  else
  {
    if ((int)a3 >= 767)
      v24 = 767;
    else
      v24 = a3;
    LODWORD(v20) = v24 - 1;
    v23 = std::_Floating_to_chars_scientific_precision[abi:ne180100]<double>((std::__1 *)__s, (char *)&v31, (v24 - 1), a5);
    v21 = (char *)memchr(__s, 101, v23 - __s);
    if (!v21)
      v21 = v23;
    v22 = v21;
  }
  if ((int)v20 >= 1)
  {
    do
    {
      v26 = *--v21;
      v25 = v26;
    }
    while (v26 == 48);
    if (v25 != 46)
      ++v21;
  }
  v27 = v21 - __s;
  if (v5 - a1 >= v21 - __s)
  {
    memcpy(a1, __s, v27);
    v8 = &a1[v27];
    if (!v18)
    {
      v29 = v23 - v22;
      if (v5 - v8 >= v29)
      {
        memcpy(v8, v22, v29);
        return &v8[v29];
      }
      return v5;
    }
    return v8;
  }
  return v5;
}

_WORD *std::_Floating_to_chars_hex_precision[abi:ne180100]<double>(_BYTE *a1, uint64_t a2, int a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  BOOL v9;
  int v10;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v18;
  int v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;

  v4 = a2;
  if (a3 >= 0)
    v5 = a3;
  else
    v5 = 13;
  v6 = *(_QWORD *)&a4 >> 52;
  v7 = *(_QWORD *)&a4 & 0xFFFFFFFFFFFFFLL;
  if ((*(_QWORD *)&a4 & 0xFFFFFFFFFFFFFLL) != 0)
    v8 = -1022;
  else
    v8 = 0;
  v9 = (_DWORD)v6 == 0;
  if ((_DWORD)v6)
    v10 = (*(_QWORD *)&a4 >> 52) - 1023;
  else
    v10 = v8;
  if (!v9)
    v7 = *(_QWORD *)&a4 & 0xFFFFFFFFFFFFFLL | 0x10000000000000;
  if (v10 >= 0)
    v11 = v10;
  else
    v11 = -v10;
  if (v10 >= 0)
    v12 = 43;
  else
    v12 = 45;
  v13 = 1;
  v14 = 2;
  v15 = 3;
  if (v11 >= 0x3E8)
    v15 = 4;
  if (v11 >= 0x64)
    v14 = v15;
  if (v11 >= 0xA)
    v13 = v14;
  if (a2 - (uint64_t)a1 >= v5)
  {
    v16 = 3;
    if ((_DWORD)v5)
      v16 = 4;
    if (a2 - (uint64_t)a1 - v5 >= v13 + v16)
    {
      if (v5 >= 0xD)
      {
        *a1 = (v7 >> 52) | 0x30;
      }
      else
      {
        v7 += (1 << (52 - 4 * v5)) & ((2 * v7 + 0x1FFFFFFFFFFFFFLL) | v7) & (2 * v7);
        *a1 = (v7 >> 52) + 48;
        v18 = a1 + 1;
        if (!(_DWORD)v5)
        {
LABEL_39:
          *v18 = 112;
          v18[1] = v12;
          v23 = v4 - (_QWORD)(v18 + 2);
          if (v23 > 9)
            return std::__itoa::__base_10_u32[abi:ne180100]((_WORD *)v18 + 1, v11);
          v24 = (1233 * (32 - __clz(v11 | 1))) >> 12;
          if (v23 >= (((__PAIR64__(v24, v11) - std::__itoa::__pow10_32[v24]) >> 32) + 1))
            return std::__itoa::__base_10_u32[abi:ne180100]((_WORD *)v18 + 1, v11);
          return (_WORD *)v4;
        }
      }
      a1[1] = 46;
      v18 = a1 + 3;
      a1[2] = std::__itoa::_Charconv_digits[HIWORD(v7) & 0xF];
      v19 = v5 - 1;
      if ((_DWORD)v5 != 1)
      {
        v20 = v7 & 0xFFFFFFFFFFFFFLL;
        v21 = v19;
        v22 = 48;
        while (v22)
        {
          v20 &= ~(-1 << v22);
          v22 -= 4;
          *v18++ = std::__itoa::_Charconv_digits[(v20 >> (v22 & 0xFC))];
          if (!(_DWORD)--v21)
            goto LABEL_39;
        }
        memset(v18, 48, v21);
        v18 += v21;
      }
      goto LABEL_39;
    }
  }
  return (_WORD *)v4;
}

std::chrono::system_clock::time_point std::chrono::system_clock::now(void)
{
  int *v1;
  timespec v2;

  if (clock_gettime(_CLOCK_REALTIME, &v2))
  {
    v1 = __error();
    std::__throw_system_error(*v1, "clock_gettime(CLOCK_REALTIME) failed");
  }
  return (std::chrono::system_clock::time_point)(v2.tv_nsec / 1000 + 1000000 * v2.tv_sec);
}

time_t std::chrono::system_clock::to_time_t(const std::chrono::system_clock::time_point *__t)
{
  return __t->__d_.__rep_ / 1000000;
}

std::chrono::system_clock::time_point std::chrono::system_clock::from_time_t(time_t __t)
{
  return (std::chrono::system_clock::time_point)(1000000 * __t);
}

std::chrono::steady_clock::time_point std::chrono::steady_clock::now(void)
{
  int *v1;
  timespec v2;

  if (clock_gettime(_CLOCK_MONOTONIC_RAW, &v2))
  {
    v1 = __error();
    std::__throw_system_error(*v1, "clock_gettime(CLOCK_MONOTONIC_RAW) failed");
  }
  return (std::chrono::steady_clock::time_point)(v2.tv_nsec + 1000000000 * v2.tv_sec);
}

std::error_category *__cdecl std::error_category::error_category(std::error_category *this)
{
  return this;
}

std::error_condition std::error_category::default_error_condition(const std::error_category *this, int __ev)
{
  uint64_t v3;
  const std::error_category *v4;
  std::error_condition result;

  v3 = __ev;
  v4 = this;
  result.__cat_ = v4;
  result.__val_ = v3;
  return result;
}

BOOL std::error_category::equivalent(const std::error_category *this, int __code, const std::error_condition *__condition)
{
  int v4;
  const std::error_category *v5;

  v4 = ((uint64_t (*)(const std::error_category *, _QWORD))this->default_error_condition)(this, *(_QWORD *)&__code);
  return __condition->__cat_ == v5 && __condition->__val_ == v4;
}

BOOL std::error_category::equivalent(const std::error_category *this, const std::error_code *__code, int __condition)
{
  return __code->__cat_ == this && __code->__val_ == __condition;
}

BOOL std::uncaught_exception(void)
{
  return (int)__cxa_uncaught_exceptions() > 0;
}

void std::exception_ptr::~exception_ptr(std::exception_ptr *this)
{
  __cxa_decrement_exception_refcount(this->__ptr_);
}

{
  __cxa_decrement_exception_refcount(this->__ptr_);
}

std::exception_ptr *__cdecl std::exception_ptr::exception_ptr(std::exception_ptr *this, const std::exception_ptr *a2)
{
  void *ptr;

  ptr = a2->__ptr_;
  this->__ptr_ = a2->__ptr_;
  __cxa_increment_exception_refcount(ptr);
  return this;
}

{
  void *ptr;

  ptr = a2->__ptr_;
  this->__ptr_ = a2->__ptr_;
  __cxa_increment_exception_refcount(ptr);
  return this;
}

std::exception_ptr *__cdecl std::exception_ptr::operator=(std::exception_ptr *this, const std::exception_ptr *a2)
{
  if (this->__ptr_ != a2->__ptr_)
  {
    __cxa_increment_exception_refcount(a2->__ptr_);
    __cxa_decrement_exception_refcount(this->__ptr_);
    this->__ptr_ = a2->__ptr_;
  }
  return this;
}

void std::exception_ptr::__from_native_exception_pointer(std::exception_ptr *this@<X0>, std::exception_ptr **a2@<X8>)
{
  *a2 = this;
  __cxa_increment_exception_refcount(this);
}

std::nested_exception *__cdecl std::nested_exception::nested_exception(std::nested_exception *this)
{
  this->__ptr_.__ptr_ = __cxa_current_primary_exception();
  return this;
}

{
  this->__ptr_.__ptr_ = __cxa_current_primary_exception();
  return this;
}

std::exception_ptr std::current_exception(void)
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;

  v1 = v0;
  v2 = __cxa_current_primary_exception();
  *v1 = v2;
  return (std::exception_ptr)v2;
}

void std::nested_exception::~nested_exception(std::nested_exception *this)
{
  __cxa_decrement_exception_refcount(this->__ptr_.__ptr_);
}

{
  __cxa_decrement_exception_refcount(this->__ptr_.__ptr_);
}

{
  __cxa_decrement_exception_refcount(this->__ptr_.__ptr_);
  JUMPOUT(0x194021E38);
}

void std::nested_exception::rethrow_nested(const std::nested_exception *this)
{
  void *ptr;
  std::exception_ptr v3;
  void *v4;

  ptr = this->__ptr_.__ptr_;
  __cxa_decrement_exception_refcount(0);
  if (!ptr)
    std::terminate();
  v4 = this->__ptr_.__ptr_;
  __cxa_increment_exception_refcount(v4);
  v3.__ptr_ = &v4;
  std::rethrow_exception(v3);
}

void sub_191FBBC5C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_decrement_exception_refcount(v1);
  _Unwind_Resume(a1);
}

void std::rethrow_exception(std::exception_ptr a1)
{
  __cxa_rethrow_primary_exception(*(void **)a1.__ptr_);
  std::terminate();
}

std::__fs::filesystem::_FilesystemClock::time_point std::__fs::filesystem::_FilesystemClock::now(void)
{
  __darwin_time_t v0;
  uint64_t v1;
  int *v2;
  timespec v3;
  std::__fs::filesystem::_FilesystemClock::time_point result;

  if (clock_gettime(_CLOCK_REALTIME, &v3))
  {
    v2 = __error();
    std::__throw_system_error(*v2, "clock_gettime(CLOCK_REALTIME) failed");
  }
  v1 = (unsigned __int128)(v3.tv_sec * (__int128)1000000000 + v3.tv_nsec) >> 64;
  v0 = 1000000000 * v3.tv_sec + v3.tv_nsec;
  *((_QWORD *)&result.__d_.__rep_ + 1) = v1;
  *(_QWORD *)&result.__d_.__rep_ = v0;
  return result;
}

void std::__fs::filesystem::filesystem_error::~filesystem_error(std::__fs::filesystem::filesystem_error *this)
{
  std::shared_ptr<std::__fs::filesystem::filesystem_error::_Storage>::~shared_ptr[abi:ne180100]((uint64_t)&this->__storage_);
  std::system_error::~system_error(this);
}

{
  std::shared_ptr<std::__fs::filesystem::filesystem_error::_Storage>::~shared_ptr[abi:ne180100]((uint64_t)&this->__storage_);
  std::system_error::~system_error(this);
}

{
  std::shared_ptr<std::__fs::filesystem::filesystem_error::_Storage>::~shared_ptr[abi:ne180100]((uint64_t)&this->__storage_);
  std::system_error::~system_error(this);
  JUMPOUT(0x194021E38);
}

void std::__fs::filesystem::filesystem_error::__create_what(std::__fs::filesystem::filesystem_error *this, int __num_paths)
{
  const char *v4;
  std::shared_ptr<std::__fs::filesystem::filesystem_error::_Storage>::element_type *v5;
  std::shared_ptr<std::__fs::filesystem::filesystem_error::_Storage>::element_type *ptr;
  std::shared_ptr<std::__fs::filesystem::filesystem_error::_Storage>::element_type *v7;
  std::string::__raw *p_p2;
  std::shared_ptr<std::__fs::filesystem::filesystem_error::_Storage>::element_type *v9;
  void **p_data;
  std::string v11;

  v4 = std::runtime_error::what(this);
  if (__num_paths == 2)
  {
    ptr = this->__storage_.__ptr_;
    v7 = ptr;
    if (SHIBYTE(ptr->__p1_.__pn_.__r_.__value_.__r.__words[2]) < 0)
      v7 = (std::shared_ptr<std::__fs::filesystem::filesystem_error::_Storage>::element_type *)ptr->__p1_.__pn_.__r_.__value_.__r.__words[0];
    p_p2 = (std::string::__raw *)&ptr->__p2_;
    if (SHIBYTE(ptr->__p2_.__pn_.__r_.__value_.__r.__words[2]) < 0)
      p_p2 = (std::string::__raw *)p_p2->__words[0];
    std::__fs::filesystem::detail::format_string((std::__fs::filesystem::detail *)"filesystem error: %s [\"%s\"] [\"%s\"]", &v11, v4, v7, p_p2);
  }
  else if (__num_paths == 1)
  {
    v5 = this->__storage_.__ptr_;
    if (SHIBYTE(v5->__p1_.__pn_.__r_.__value_.__r.__words[2]) < 0)
      v5 = (std::shared_ptr<std::__fs::filesystem::filesystem_error::_Storage>::element_type *)v5->__p1_.__pn_.__r_.__value_.__r.__words[0];
    std::__fs::filesystem::detail::format_string((std::__fs::filesystem::detail *)"filesystem error: %s [\"%s\"]", &v11, v4, v5);
  }
  else
  {
    std::__fs::filesystem::detail::format_string((std::__fs::filesystem::detail *)"filesystem error: %s", &v11, v4);
  }
  v9 = this->__storage_.__ptr_;
  p_data = (void **)&v9->__what_.__r_.__value_.__l.__data_;
  if (SHIBYTE(v9->__what_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(*p_data);
  *(std::string *)p_data = v11;
}

const char *__cdecl std::__fs::filesystem::filesystem_error::what(const std::__fs::filesystem::filesystem_error *this)
{
  std::shared_ptr<std::__fs::filesystem::filesystem_error::_Storage>::element_type *ptr;
  const char *result;

  ptr = this->__storage_.__ptr_;
  result = (const char *)&ptr->__what_;
  if (SHIBYTE(ptr->__what_.__r_.__value_.__r.__words[2]) < 0)
    return *(const char **)result;
  return result;
}

double std::__fs::filesystem::detail::format_string@<D0>(std::__fs::filesystem::detail *this@<X0>, std::string *a2@<X8>, ...)
{
  double result;
  std::string v5;
  va_list v6;
  va_list va;

  va_start(va, a2);
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  va_copy(v6, va);
  std::__fs::filesystem::detail::vformat_string(this, va, &v5);
  result = *(double *)&v5.__r_.__value_.__l.__data_;
  *a2 = v5;
  return result;
}

void sub_191FBBEC8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_rethrow();
}

void sub_191FBBED4(_Unwind_Exception *a1)
{
  uint64_t v1;

  __cxa_end_catch();
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

std::string *std::__fs::filesystem::detail::vformat_string@<X0>(std::__fs::filesystem::detail *this@<X0>, va_list a2@<X1>, std::string *a3@<X8>)
{
  int v6;
  std::string::size_type v7;
  std::string *v9;
  char *v10;
  char __str[256];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v6 = vsnprintf(__str, 0x100uLL, (const char *)this, a2);
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  v7 = v6;
  if (v6 <= 0xFF)
    return std::string::__assign_external(a3, __str, v6);
  std::string::__grow_by(a3, 0x16uLL, v6 - 22, 0, 0, 0, 0);
  a3->__r_.__value_.__l.__size_ = 0;
  if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0)
  {
    v9 = (std::string *)a3->__r_.__value_.__r.__words[0];
    a3->__r_.__value_.__l.__size_ = v7;
  }
  else
  {
    *((_BYTE *)&a3->__r_.__value_.__s + 23) = v7 & 0x7F;
    v9 = a3;
  }
  v9->__r_.__value_.__s.__data_[v7] = 0;
  if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = (char *)a3;
  else
    v10 = (char *)a3->__r_.__value_.__r.__words[0];
  return (std::string *)vsnprintf(v10, v7 + 1, (const char *)this, a2);
}

void sub_191FBBFFC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  unint64_t v6;
  std::string *v7;
  std::string::size_type size;
  unint64_t v9;
  unint64_t v10;

  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    v10 = this->__r_.__value_.__r.__words[2];
    v9 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v9 < __n)
    {
      size = this->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }
    v6 = HIBYTE(v10);
    v7 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    v7 = this;
    if (__n > 0x16)
    {
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      v9 = 22;
LABEL_6:
      std::string::__grow_by_and_replace(this, v9, __n - v9, size, 0, size, __n, __s);
      return this;
    }
  }
  if (__n)
  {
    memmove(v7, __s, __n);
    LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0)
    this->__r_.__value_.__l.__size_ = __n;
  else
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
  v7->__r_.__value_.__s.__data_[__n] = 0;
  return this;
}

uint64_t std::shared_ptr<std::__fs::filesystem::filesystem_error::_Storage>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

std::__fs::filesystem::path *__cdecl std::__fs::filesystem::path::replace_extension(std::__fs::filesystem::path *this, const std::__fs::filesystem::path *__replacement)
{
  unint64_t v4;
  std::string::size_type size;
  int v6;
  const std::__fs::filesystem::path *v7;
  const std::__fs::filesystem::path *v8;
  std::string::size_type v9;
  void *__p[2];
  unsigned __int8 v12;

  std::__fs::filesystem::path::extension[abi:ne180100](this, (uint64_t)__p);
  v4 = v12;
  if ((v12 & 0x80u) != 0)
    v4 = (unint64_t)__p[1];
  if (v4)
  {
    if (SHIBYTE(this->__pn_.__r_.__value_.__r.__words[2]) < 0)
      size = this->__pn_.__r_.__value_.__l.__size_;
    else
      size = HIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
    std::string::erase(&this->__pn_, size - v4, 0xFFFFFFFFFFFFFFFFLL);
  }
  v6 = SHIBYTE(__replacement->__pn_.__r_.__value_.__r.__words[2]);
  if (v6 < 0)
  {
    if (!__replacement->__pn_.__r_.__value_.__l.__size_)
      goto LABEL_22;
    v7 = (const std::__fs::filesystem::path *)__replacement->__pn_.__r_.__value_.__r.__words[0];
  }
  else
  {
    v7 = __replacement;
    if (!*((_BYTE *)&__replacement->__pn_.__r_.__value_.__s + 23))
      goto LABEL_22;
  }
  if (v7->__pn_.__r_.__value_.__s.__data_[0] != 46)
  {
    std::string::append(&this->__pn_, ".", 1uLL);
    LOBYTE(v6) = *((_BYTE *)&__replacement->__pn_.__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80u) == 0)
    v8 = __replacement;
  else
    v8 = (const std::__fs::filesystem::path *)__replacement->__pn_.__r_.__value_.__r.__words[0];
  if ((v6 & 0x80u) == 0)
    v9 = v6;
  else
    v9 = __replacement->__pn_.__r_.__value_.__l.__size_;
  std::string::append(&this->__pn_, (const std::string::value_type *)v8, v9);
LABEL_22:
  if ((char)v12 < 0)
    operator delete(__p[0]);
  return this;
}

void sub_191FBC214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double std::__fs::filesystem::path::extension[abi:ne180100]@<D0>(const std::__fs::filesystem::path *a1@<X0>, uint64_t a2@<X8>)
{
  std::__fs::filesystem::path::__string_view v3;
  __int128 *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v5;
  std::basic_string_view<_CharT, _Traits>::size_type v6;
  double result;
  __int128 __dst;
  unint64_t v9;

  v3 = std::__fs::filesystem::path::__extension(a1);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v3.__size_ >= 0x17)
  {
    v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17)
      v5 = v3.__size_ | 7;
    v6 = v5 + 1;
    p_dst = (__int128 *)operator new(v5 + 1);
    *((_QWORD *)&__dst + 1) = v3.__size_;
    v9 = v6 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_)
      goto LABEL_9;
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((_BYTE *)p_dst + v3.__size_) = 0;
  result = *(double *)&__dst;
  *(_OWORD *)a2 = __dst;
  *(_QWORD *)(a2 + 16) = v9;
  return result;
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__root_name(const std::__fs::filesystem::path *this)
{
  std::string::size_type size;
  const std::__fs::filesystem::path *v2;
  const std::string_view::value_type *v3;
  std::basic_string_view<_CharT, _Traits>::size_type v4;
  _QWORD v5[2];
  const std::string_view::value_type *v6;
  std::basic_string_view<_CharT, _Traits>::size_type v7;
  char v8;
  std::__fs::filesystem::path::__string_view result;

  if (SHIBYTE(this->__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    v2 = this;
    this = (const std::__fs::filesystem::path *)this->__pn_.__r_.__value_.__r.__words[0];
    size = v2->__pn_.__r_.__value_.__l.__size_;
  }
  else
  {
    size = HIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
  }
  v5[0] = this;
  v5[1] = size;
  v6 = 0;
  v7 = 0;
  v8 = 1;
  std::__fs::filesystem::parser::PathParser::increment((uint64_t)v5);
  if (v8 == 2)
    v3 = v6;
  else
    v3 = 0;
  if (v8 == 2)
    v4 = v7;
  else
    v4 = 0;
  result.__size_ = v4;
  result.__data_ = v3;
  return result;
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__root_directory(const std::__fs::filesystem::path *this)
{
  std::string::size_type size;
  const std::__fs::filesystem::path *v2;
  int v3;
  const std::string_view::value_type *v4;
  std::basic_string_view<_CharT, _Traits>::size_type v5;
  _QWORD v6[2];
  _BYTE *v7;
  uint64_t v8;
  unsigned __int8 v9;
  std::__fs::filesystem::path::__string_view result;

  if (SHIBYTE(this->__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    v2 = this;
    this = (const std::__fs::filesystem::path *)this->__pn_.__r_.__value_.__r.__words[0];
    size = v2->__pn_.__r_.__value_.__l.__size_;
  }
  else
  {
    size = HIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
  }
  v6[0] = this;
  v6[1] = size;
  v7 = 0;
  v8 = 0;
  v9 = 1;
  std::__fs::filesystem::parser::PathParser::increment((uint64_t)v6);
  v3 = v9;
  if (v9 == 2)
  {
    std::__fs::filesystem::parser::PathParser::increment((uint64_t)v6);
    v3 = v9;
  }
  if (v3 == 3)
  {
    if (*v7 == 92)
      v4 = "\\";
    else
      v4 = "/";
    v5 = 1;
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  result.__size_ = v5;
  result.__data_ = v4;
  return result;
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__root_path_raw(const std::__fs::filesystem::path *this)
{
  const std::__fs::filesystem::path *v1;
  std::string::size_type size;
  const std::__fs::filesystem::path *v3;
  const std::string_view::value_type *v4;
  std::basic_string_view<_CharT, _Traits>::size_type v5;
  const std::__fs::filesystem::path *v6;
  std::string::size_type v7;
  const std::string_view::value_type *v8;
  std::basic_string_view<_CharT, _Traits>::size_type v9;
  char v10;
  std::__fs::filesystem::path::__string_view result;

  v1 = this;
  if (SHIBYTE(this->__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    v3 = (const std::__fs::filesystem::path *)this->__pn_.__r_.__value_.__r.__words[0];
    size = this->__pn_.__r_.__value_.__l.__size_;
  }
  else
  {
    size = HIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
    v3 = this;
  }
  v6 = v3;
  v7 = size;
  v8 = 0;
  v9 = 0;
  v10 = 1;
  std::__fs::filesystem::parser::PathParser::increment((uint64_t)&v6);
  if (v10 == 3)
  {
    if (*v8 == 92)
      v4 = "\\";
    else
      v4 = "/";
    v5 = 1;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    if (v10 == 2)
    {
      v4 = v8;
      v5 = v9;
      if (&v8[v9] != (char *)v6 + v7 && v8[v9] == 47)
      {
        std::__fs::filesystem::parser::PathParser::increment((uint64_t)&v6);
        if (SHIBYTE(v1->__pn_.__r_.__value_.__r.__words[2]) < 0)
          v1 = (const std::__fs::filesystem::path *)v1->__pn_.__r_.__value_.__r.__words[0];
        v5 = &v8[v9] - (const std::string_view::value_type *)v1;
        v4 = (const std::string_view::value_type *)v1;
      }
    }
  }
  result.__size_ = v5;
  result.__data_ = v4;
  return result;
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__relative_path(const std::__fs::filesystem::path *this)
{
  const std::__fs::filesystem::path *v1;
  std::string::size_type size;
  const std::__fs::filesystem::path *v3;
  int v4;
  const std::string_view::value_type *v5;
  std::basic_string_view<_CharT, _Traits>::size_type v6;
  std::string::size_type v7;
  const std::__fs::filesystem::path *v8;
  _QWORD v9[2];
  const std::string_view::value_type *v10;
  uint64_t v11;
  unsigned __int8 v12;
  std::__fs::filesystem::path::__string_view result;

  v1 = this;
  if (SHIBYTE(this->__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    v3 = (const std::__fs::filesystem::path *)this->__pn_.__r_.__value_.__r.__words[0];
    size = this->__pn_.__r_.__value_.__l.__size_;
  }
  else
  {
    size = HIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
    v3 = this;
  }
  v9[0] = v3;
  v9[1] = size;
  v10 = 0;
  v11 = 0;
  v12 = 1;
  std::__fs::filesystem::parser::PathParser::increment((uint64_t)v9);
  v4 = v12;
  if (v12 <= 3u)
  {
    do
    {
      std::__fs::filesystem::parser::PathParser::increment((uint64_t)v9);
      v4 = v12;
    }
    while (v12 < 4u);
  }
  if (v4 == 6)
  {
    v5 = 0;
    v6 = 0;
  }
  else
  {
    v5 = v10;
    if (SHIBYTE(v1->__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      v8 = v1;
      v1 = (const std::__fs::filesystem::path *)v1->__pn_.__r_.__value_.__r.__words[0];
      v7 = v8->__pn_.__r_.__value_.__l.__size_;
    }
    else
    {
      v7 = HIBYTE(v1->__pn_.__r_.__value_.__r.__words[2]);
    }
    v6 = (char *)v1 + v7 - v10;
  }
  result.__size_ = v6;
  result.__data_ = v5;
  return result;
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__parent_path(const std::__fs::filesystem::path *this)
{
  const std::__fs::filesystem::path *v1;
  std::string::size_type size;
  const std::__fs::filesystem::path *v3;
  int v4;
  std::basic_string_view<_CharT, _Traits>::size_type v5;
  std::string::size_type v6;
  unint64_t v7;
  const std::__fs::filesystem::path *v8;
  const std::__fs::filesystem::path *v9;
  const std::string_view::value_type *v10;
  unint64_t v11;
  std::string::size_type v12;
  const std::__fs::filesystem::path *v13;
  uint64_t v14;
  unsigned __int8 v15;
  std::__fs::filesystem::path::__string_view result;

  v1 = this;
  if (SHIBYTE(this->__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    size = this->__pn_.__r_.__value_.__l.__size_;
    if (!size)
      goto LABEL_21;
    v3 = (const std::__fs::filesystem::path *)this->__pn_.__r_.__value_.__r.__words[0];
  }
  else
  {
    size = HIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
    if (!*((_BYTE *)&this->__pn_.__r_.__value_.__s + 23))
      goto LABEL_21;
    v3 = this;
  }
  v11 = (unint64_t)v3;
  v12 = size;
  v13 = 0;
  v14 = 0;
  v15 = 1;
  std::__fs::filesystem::parser::PathParser::increment((uint64_t)&v11);
  v4 = v15;
  if (v15 <= 3u)
  {
    do
    {
      std::__fs::filesystem::parser::PathParser::increment((uint64_t)&v11);
      v4 = v15;
    }
    while (v15 < 4u);
  }
  if (v4 == 6)
  {
    if (SHIBYTE(v1->__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      v8 = v1;
      v1 = (const std::__fs::filesystem::path *)v1->__pn_.__r_.__value_.__r.__words[0];
      v5 = v8->__pn_.__r_.__value_.__l.__size_;
    }
    else
    {
      v5 = HIBYTE(v1->__pn_.__r_.__value_.__r.__words[2]);
    }
    goto LABEL_22;
  }
  if (SHIBYTE(v1->__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    v7 = v1->__pn_.__r_.__value_.__r.__words[0];
    v6 = v1->__pn_.__r_.__value_.__l.__size_;
  }
  else
  {
    v6 = HIBYTE(v1->__pn_.__r_.__value_.__r.__words[2]);
    v7 = (unint64_t)v1;
  }
  v11 = v7;
  v12 = v6;
  v13 = 0;
  v14 = 0;
  v15 = 6;
  std::__fs::filesystem::parser::PathParser::decrement(&v11);
  v9 = v1;
  if (SHIBYTE(v1->__pn_.__r_.__value_.__r.__words[2]) < 0)
    v9 = (const std::__fs::filesystem::path *)v1->__pn_.__r_.__value_.__r.__words[0];
  if (v13 == v9)
  {
LABEL_21:
    v1 = 0;
    v5 = 0;
    goto LABEL_22;
  }
  std::__fs::filesystem::parser::PathParser::decrement(&v11);
  if (SHIBYTE(v1->__pn_.__r_.__value_.__r.__words[2]) < 0)
    v1 = (const std::__fs::filesystem::path *)v1->__pn_.__r_.__value_.__r.__words[0];
  v5 = (char *)v13 + v14 - (char *)v1;
LABEL_22:
  v10 = (const std::string_view::value_type *)v1;
  result.__size_ = v5;
  result.__data_ = v10;
  return result;
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__filename(const std::__fs::filesystem::path *this)
{
  const std::__fs::filesystem::path *v1;
  std::string::size_type size;
  const std::__fs::filesystem::path *v3;
  int v4;
  const std::string_view::value_type *v5;
  std::basic_string_view<_CharT, _Traits>::size_type v6;
  std::string::size_type v7;
  const std::__fs::filesystem::path *v8;
  const std::__fs::filesystem::path *v9;
  std::string::size_type v10;
  const std::string_view::value_type *v11;
  std::basic_string_view<_CharT, _Traits>::size_type v12;
  unsigned __int8 v13;
  std::__fs::filesystem::path::__string_view result;

  v1 = this;
  if ((SHIBYTE(this->__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    size = HIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
    if (*((_BYTE *)&this->__pn_.__r_.__value_.__s + 23))
    {
      v3 = this;
      goto LABEL_6;
    }
LABEL_9:
    v5 = 0;
    v6 = 0;
    goto LABEL_21;
  }
  size = this->__pn_.__r_.__value_.__l.__size_;
  if (!size)
    goto LABEL_9;
  v3 = (const std::__fs::filesystem::path *)this->__pn_.__r_.__value_.__r.__words[0];
LABEL_6:
  v9 = v3;
  v10 = size;
  v11 = 0;
  v12 = 0;
  v13 = 1;
  std::__fs::filesystem::parser::PathParser::increment((uint64_t)&v9);
  v4 = v13;
  if (v13 <= 3u)
  {
    do
    {
      std::__fs::filesystem::parser::PathParser::increment((uint64_t)&v9);
      v4 = v13;
    }
    while (v13 < 4u);
  }
  if (v4 == 6)
    goto LABEL_9;
  if (SHIBYTE(v1->__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    v8 = v1;
    v1 = (const std::__fs::filesystem::path *)v1->__pn_.__r_.__value_.__r.__words[0];
    v7 = v8->__pn_.__r_.__value_.__l.__size_;
  }
  else
  {
    v7 = HIBYTE(v1->__pn_.__r_.__value_.__r.__words[2]);
  }
  v9 = v1;
  v10 = v7;
  v11 = 0;
  v12 = 0;
  v13 = 6;
  std::__fs::filesystem::parser::PathParser::decrement((unint64_t *)&v9);
  v5 = "";
  v6 = 0;
  if (((1 << v13) & 0x62) == 0)
  {
    if (((1 << v13) & 0x14) != 0)
    {
      v5 = v11;
      v6 = v12;
    }
    else
    {
      if (*v11 == 92)
        v5 = "\\";
      else
        v5 = "/";
      v6 = 1;
    }
  }
LABEL_21:
  result.__size_ = v6;
  result.__data_ = v5;
  return result;
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__stem(const std::__fs::filesystem::path *this)
{
  const std::string_view::value_type *data;
  std::basic_string_view<_CharT, _Traits>::size_type size;
  std::__fs::filesystem::path::__string_view v3;
  std::basic_string_view<_CharT, _Traits>::size_type v4;
  unint64_t v5;
  int v6;
  std::__fs::filesystem::path::__string_view result;

  v3 = std::__fs::filesystem::path::__filename(this);
  size = v3.__size_;
  data = v3.__data_;
  switch(v3.__size_)
  {
    case 2uLL:
      if (*(_WORD *)v3.__data_ == 11822)
      {
        size = 2;
        goto LABEL_15;
      }
      break;
    case 1uLL:
      if (*v3.__data_ == 46)
      {
        size = 1;
        goto LABEL_15;
      }
      break;
    case 0uLL:
      goto LABEL_15;
  }
  v4 = v3.__size_;
  while (v4)
  {
    v5 = v4;
    v6 = v3.__data_[--v4];
    if (v6 == 46)
    {
      if (v5 >= 2)
      {
        size = v4;
        if (v3.__size_ < v4)
          std::__throw_out_of_range[abi:ne180100]("string_view::substr");
      }
      break;
    }
  }
LABEL_15:
  result.__size_ = size;
  result.__data_ = data;
  return result;
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__extension(const std::__fs::filesystem::path *this)
{
  std::basic_string_view<_CharT, _Traits>::size_type size;
  std::__fs::filesystem::path::__string_view v2;
  const std::string_view::value_type *v3;
  uint64_t v4;
  int v5;
  std::__fs::filesystem::path::__string_view result;

  v2 = std::__fs::filesystem::path::__filename(this);
  size = v2.__size_;
  if (!v2.__size_)
    goto LABEL_6;
  if (v2.__size_ == 2)
  {
    if (*(_WORD *)v2.__data_ == 11822)
    {
LABEL_5:
      size = 0;
LABEL_6:
      v3 = "";
      goto LABEL_17;
    }
  }
  else if (v2.__size_ == 1 && *v2.__data_ == 46)
  {
    goto LABEL_5;
  }
  v4 = 0;
  do
  {
    if (-v2.__size_ == v4)
      goto LABEL_12;
    v5 = v2.__data_[v2.__size_ - 1 + v4--];
  }
  while (v5 != 46);
  if (v2.__size_ + v4 + 1 < 2)
  {
LABEL_12:
    size = 0;
    v3 = 0;
    goto LABEL_17;
  }
  if (v2.__size_ < v2.__size_ + v4)
    std::__throw_out_of_range[abi:ne180100]("string_view::substr");
  v3 = &v2.__data_[v2.__size_ + v4];
  size = -v4;
LABEL_17:
  result.__size_ = size;
  result.__data_ = v3;
  return result;
}

std::__fs::filesystem::path *__cdecl std::__fs::filesystem::path::lexically_normal(std::__fs::filesystem::path *__return_ptr retstr, std::__fs::filesystem::path *this)
{
  std::__fs::filesystem::path *v2;
  std::string::size_type size;
  std::__fs::filesystem::path *v4;
  _QWORD v5[4];
  char v6;
  void *__p[3];

  v2 = this;
  if ((SHIBYTE(this->__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!*((_BYTE *)&this->__pn_.__r_.__value_.__s + 23))
    {
      *retstr = *this;
      return this;
    }
LABEL_5:
    memset(__p, 0, sizeof(__p));
    std::vector<std::pair<std::string_view,std::__fs::filesystem::PathPartKind>>::reserve(__p, 0x20uLL);
    if (SHIBYTE(v2->__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      v4 = v2;
      v2 = (std::__fs::filesystem::path *)v2->__pn_.__r_.__value_.__r.__words[0];
      size = v4->__pn_.__r_.__value_.__l.__size_;
    }
    else
    {
      size = HIBYTE(v2->__pn_.__r_.__value_.__r.__words[2]);
    }
    v5[0] = v2;
    v5[1] = size;
    v5[2] = 0;
    v5[3] = 0;
    v6 = 1;
    std::__fs::filesystem::parser::PathParser::increment((uint64_t)v5);
    __asm { BR              X10; loc_191FBCC3C }
  }
  if (this->__pn_.__r_.__value_.__l.__size_)
    goto LABEL_5;
  std::string::__init_copy_ctor_external(&retstr->__pn_, this->__pn_.__r_.__value_.__l.__data_, 0);
  return this;
}

void sub_191FBCD48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<std::pair<std::string_view,std::__fs::filesystem::PathPartKind>>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<std::pair<std::string_view,std::__fs::filesystem::PathPartKind>>::__throw_length_error[abi:ne180100]();
    v5 = ((_BYTE *)a1[1] - (_BYTE *)*a1) / 24;
    v6 = (char *)std::allocator<std::pair<std::string_view,std::__fs::filesystem::PathPartKind>>::allocate_at_least[abi:ne180100](v3, a2);
    v7 = &v6[24 * v5];
    v9 = &v6[24 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *(_OWORD *)(v10 - 24);
        *((_QWORD *)v12 - 1) = *((_QWORD *)v10 - 1);
        *(_OWORD *)(v12 - 24) = v13;
        v12 -= 24;
        v10 -= 24;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

std::__fs::filesystem::path *__cdecl std::__fs::filesystem::path::lexically_relative(std::__fs::filesystem::path *__return_ptr retstr, const std::__fs::filesystem::path *this, const std::__fs::filesystem::path *__base)
{
  const std::__fs::filesystem::path *v4;
  std::string::size_type size;
  const std::__fs::filesystem::path *v7;
  std::string::size_type v8;
  const std::__fs::filesystem::path *v9;
  std::__fs::filesystem::path *result;
  int v11;
  int v12;
  std::string::size_type v13;
  const std::__fs::filesystem::path *v14;
  std::string::size_type v15;
  const std::__fs::filesystem::path *v16;
  const std::__fs::filesystem::path *v21;
  std::string::size_type v22;
  void *__s2[2];
  uint64_t v24;
  const std::__fs::filesystem::path *v25;
  std::string::size_type v26;
  const void *v27;
  size_t v28;
  unsigned __int8 v29;

  v4 = this;
  if (SHIBYTE(this->__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    v7 = (const std::__fs::filesystem::path *)this->__pn_.__r_.__value_.__r.__words[0];
    size = this->__pn_.__r_.__value_.__l.__size_;
  }
  else
  {
    size = HIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
    v7 = this;
  }
  v25 = v7;
  v26 = size;
  v27 = 0;
  v28 = 0;
  v29 = 1;
  std::__fs::filesystem::parser::PathParser::increment((uint64_t)&v25);
  v8 = HIBYTE(__base->__pn_.__r_.__value_.__r.__words[2]);
  if ((v8 & 0x80u) == 0)
    v9 = __base;
  else
    v9 = (const std::__fs::filesystem::path *)__base->__pn_.__r_.__value_.__r.__words[0];
  if ((v8 & 0x80u) != 0)
    v8 = __base->__pn_.__r_.__value_.__l.__size_;
  v21 = v9;
  v22 = v8;
  __s2[0] = 0;
  __s2[1] = 0;
  LOBYTE(v24) = 1;
  result = (std::__fs::filesystem::path *)std::__fs::filesystem::parser::PathParser::increment((uint64_t)&v21);
  v11 = v24;
  if (v29 != 2 || v24 != 2)
  {
    v12 = v29 & 0xFE;
    if (v29 == v24 || v12 != 2 && (v24 & 0xFE) != 2)
    {
      if (v12 != 2)
        goto LABEL_19;
      goto LABEL_18;
    }
LABEL_50:
    retstr->__pn_.__r_.__value_.__r.__words[0] = 0;
    retstr->__pn_.__r_.__value_.__l.__size_ = 0;
    retstr->__pn_.__r_.__value_.__r.__words[2] = 0;
    return result;
  }
  if ((void *)v28 != __s2[1])
    goto LABEL_50;
  result = (std::__fs::filesystem::path *)memcmp(v27, __s2[0], v28);
  if ((_DWORD)result)
    goto LABEL_50;
LABEL_18:
  result = (std::__fs::filesystem::path *)std::__fs::filesystem::parser::PathParser::increment((uint64_t)&v25);
  v11 = v24;
LABEL_19:
  if ((v11 & 0xFE) == 2)
  {
    result = (std::__fs::filesystem::path *)std::__fs::filesystem::parser::PathParser::increment((uint64_t)&v21);
    v11 = v24;
  }
  if (v29 != v11 && ((v29 & 0xFE) == 2 || (v11 & 0xFE) == 2))
    goto LABEL_50;
  if (SHIBYTE(v4->__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    v14 = v4;
    v4 = (const std::__fs::filesystem::path *)v4->__pn_.__r_.__value_.__r.__words[0];
    v13 = v14->__pn_.__r_.__value_.__l.__size_;
  }
  else
  {
    v13 = HIBYTE(v4->__pn_.__r_.__value_.__r.__words[2]);
  }
  v25 = v4;
  v26 = v13;
  v27 = 0;
  v28 = 0;
  v29 = 1;
  std::__fs::filesystem::parser::PathParser::increment((uint64_t)&v25);
  v15 = HIBYTE(__base->__pn_.__r_.__value_.__r.__words[2]);
  if ((v15 & 0x80u) == 0)
    v16 = __base;
  else
    v16 = (const std::__fs::filesystem::path *)__base->__pn_.__r_.__value_.__r.__words[0];
  if ((v15 & 0x80u) != 0)
    v15 = __base->__pn_.__r_.__value_.__l.__size_;
  v21 = v16;
  v22 = v15;
  __s2[0] = 0;
  __s2[1] = 0;
  LOBYTE(v24) = 1;
  std::__fs::filesystem::parser::PathParser::increment((uint64_t)&v21);
  if (v29 != 1 && v29 != 6)
  {
    if (v24 != 1 && v24 != 6 && v29 == v24)
      __asm { BR              X8; loc_191FBD2DC }
    goto LABEL_49;
  }
  if (v24 != 6 && v24 != 1)
LABEL_49:
    __asm { BR              X9; loc_191FBD170 }
  return (std::__fs::filesystem::path *)std::__fs::filesystem::path::path[abi:ne180100]<char [2],void>(&retstr->__pn_, ".");
}

void sub_191FBD280(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

int std::__fs::filesystem::path::__compare(const std::__fs::filesystem::path *this, std::__fs::filesystem::path::__string_view a2)
{
  std::basic_string_view<_CharT, _Traits>::size_type size;
  const std::string_view::value_type *data;
  std::string::size_type v4;
  const std::__fs::filesystem::path *v5;
  unsigned int v6;
  const char *v7;
  size_t v8;
  unsigned int v9;
  size_t v10;
  const char *v11;
  size_t v12;
  int v13;
  int v14;
  int v15;
  int v17;
  _QWORD v20[2];
  const char *v21;
  size_t v22;
  unsigned __int8 v23;
  _QWORD v24[2];
  const char *v25;
  size_t v26;
  unsigned __int8 v27;

  size = a2.__size_;
  data = a2.__data_;
  if (SHIBYTE(this->__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    v5 = this;
    this = (const std::__fs::filesystem::path *)this->__pn_.__r_.__value_.__r.__words[0];
    v4 = v5->__pn_.__r_.__value_.__l.__size_;
  }
  else
  {
    v4 = HIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
  }
  v24[0] = this;
  v24[1] = v4;
  v25 = 0;
  v26 = 0;
  v27 = 1;
  std::__fs::filesystem::parser::PathParser::increment((uint64_t)v24);
  v20[0] = data;
  v20[1] = size;
  v21 = 0;
  v22 = 0;
  v23 = 1;
  std::__fs::filesystem::parser::PathParser::increment((uint64_t)v20);
  v6 = v27;
  if (v27 == 2)
  {
    v7 = v25;
    v8 = v26;
    v9 = v23;
    if (v23 != 2)
    {
      v10 = 0;
      v11 = "";
      goto LABEL_10;
    }
  }
  else
  {
    v9 = v23;
    if (v23 != 2)
      goto LABEL_28;
    v8 = 0;
    v7 = "";
  }
  v9 = 2;
  v11 = v21;
  v10 = v22;
LABEL_10:
  if (v10 >= v8)
    v12 = v8;
  else
    v12 = v10;
  v13 = memcmp(v7, v11, v12);
  if (v8 < v10)
    v14 = -1;
  else
    v14 = 1;
  if (v8 == v10)
    v14 = 0;
  if (v13)
    v15 = v13;
  else
    v15 = v14;
  if (v6 <= 2)
  {
    do
      std::__fs::filesystem::parser::PathParser::increment((uint64_t)v24);
    while (v27 < 3u);
    v9 = v23;
  }
  if (v9 <= 2)
  {
    do
    {
      std::__fs::filesystem::parser::PathParser::increment((uint64_t)v20);
      v9 = v23;
    }
    while (v23 < 3u);
  }
  if (!v15)
  {
    v6 = v27;
LABEL_28:
    if (v6 == 3)
    {
      if (v9 != 3)
        return 1;
    }
    else
    {
      if (v9 == 3)
        return -1;
      if (v6 > 3)
      {
LABEL_35:
        if (v9 <= 3)
        {
          do
            std::__fs::filesystem::parser::PathParser::increment((uint64_t)v20);
          while (v23 < 4u);
        }
        if (v27 == 1 || v27 == 6)
        {
          v17 = v23;
        }
        else
        {
          v17 = v23;
          if (v23 != 1 && v23 != 6)
            __asm { BR              X10; loc_191FBD490 }
        }
        if (v27 == 6)
        {
          if (v17 != 6)
            return -1;
        }
        else if (v17 == 6)
        {
          return 1;
        }
        return 0;
      }
    }
    do
      std::__fs::filesystem::parser::PathParser::increment((uint64_t)v24);
    while (v27 < 4u);
    v9 = v23;
    goto LABEL_35;
  }
  return v15;
}

size_t std::__fs::filesystem::hash_value(const std::__fs::filesystem::path *__p)
{
  std::string::size_type size;
  const std::__fs::filesystem::path *v2;
  size_t result;
  _QWORD v4[4];
  char v5;

  size = HIBYTE(__p->__pn_.__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v2 = __p;
  else
    v2 = (const std::__fs::filesystem::path *)__p->__pn_.__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = __p->__pn_.__r_.__value_.__l.__size_;
  v4[0] = v2;
  v4[1] = size;
  v4[2] = 0;
  v4[3] = 0;
  v5 = 1;
  std::__fs::filesystem::parser::PathParser::increment((uint64_t)v4);
  __asm { BR              X9; loc_191FBD64C }
  return result;
}

unint64_t std::__string_view_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  char v4;

  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v4, a2, a3);
}

std::__fs::filesystem::path::iterator *__cdecl std::__fs::filesystem::path::begin(std::__fs::filesystem::path::iterator *__return_ptr retstr, const std::__fs::filesystem::path *this)
{
  std::string::size_type size;
  const std::__fs::filesystem::path *v5;
  std::__fs::filesystem::path::iterator *result;
  std::__fs::filesystem::path::iterator::_ParserState v7;
  const char *data;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;
  _QWORD v13[2];
  std::__fs::filesystem::path::__string_view v14;
  std::__fs::filesystem::path::iterator::_ParserState v15;
  __int128 v16;
  unint64_t v17;

  if (SHIBYTE(this->__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    v5 = (const std::__fs::filesystem::path *)this->__pn_.__r_.__value_.__r.__words[0];
    size = this->__pn_.__r_.__value_.__l.__size_;
  }
  else
  {
    size = HIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
    v5 = this;
  }
  v13[0] = v5;
  v13[1] = size;
  v14 = (std::__fs::filesystem::path::__string_view)0;
  v15 = _BeforeBegin;
  result = (std::__fs::filesystem::path::iterator *)std::__fs::filesystem::parser::PathParser::increment((uint64_t)v13);
  retstr->__stashed_elem_.__pn_.__r_.__value_.__r.__words[0] = 0;
  retstr->__stashed_elem_.__pn_.__r_.__value_.__l.__size_ = 0;
  retstr->__stashed_elem_.__pn_.__r_.__value_.__r.__words[2] = 0;
  retstr->__path_ptr_ = this;
  v7 = v15;
  retstr->__state_ = v15;
  retstr->__entry_ = v14;
  data = "";
  v9 = 0;
  if (((1 << v7) & 0x62) != 0)
    goto LABEL_15;
  if (((1 << v7) & 0x14) == 0)
  {
    if (*v14.__data_ == 92)
      data = "\\";
    else
      data = "/";
    v9 = 1;
    goto LABEL_15;
  }
  v9 = v14.__size_;
  if (v14.__size_ >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  data = v14.__data_;
  if (v14.__size_ < 0x17)
  {
LABEL_15:
    HIBYTE(v17) = v9;
    v12 = &v16;
    if (!v9)
      goto LABEL_17;
    goto LABEL_16;
  }
  v10 = (v14.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v14.__size_ | 7) != 0x17)
    v10 = v14.__size_ | 7;
  v11 = v10 + 1;
  v12 = (__int128 *)operator new(v10 + 1);
  *((_QWORD *)&v16 + 1) = v9;
  v17 = v11 | 0x8000000000000000;
  *(_QWORD *)&v16 = v12;
LABEL_16:
  result = (std::__fs::filesystem::path::iterator *)memmove(v12, data, v9);
LABEL_17:
  *((_BYTE *)v12 + v9) = 0;
  if (SHIBYTE(retstr->__stashed_elem_.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(retstr->__stashed_elem_.__pn_.__r_.__value_.__l.__data_);
  *(_OWORD *)&retstr->__stashed_elem_.__pn_.__r_.__value_.__l.__data_ = v16;
  retstr->__stashed_elem_.__pn_.__r_.__value_.__r.__words[2] = v17;
  return result;
}

std::__fs::filesystem::path::iterator *__cdecl std::__fs::filesystem::path::end(std::__fs::filesystem::path::iterator *__return_ptr retstr, std::__fs::filesystem::path::iterator *this)
{
  *(_OWORD *)&retstr->__stashed_elem_.__pn_.__r_.__value_.__r.__words[2] = 0u;
  retstr->__entry_ = 0u;
  *(_OWORD *)&retstr->__stashed_elem_.__pn_.__r_.__value_.__l.__data_ = 0u;
  retstr->__state_ = _AtEnd;
  retstr->__path_ptr_ = &this->__stashed_elem_;
  return this;
}

std::__fs::filesystem::path::iterator *__cdecl std::__fs::filesystem::path::iterator::__increment(std::__fs::filesystem::path::iterator *this)
{
  const std::__fs::filesystem::path *path_ptr;
  std::string::size_type size;
  std::__fs::filesystem::path::iterator::_ParserState state;
  std::__fs::filesystem::path::iterator::_ParserState v5;
  const char *data;
  size_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  _QWORD v13[2];
  std::__fs::filesystem::path::__string_view entry;
  std::__fs::filesystem::path::iterator::_ParserState v15;
  __int128 v16;
  unint64_t v17;

  path_ptr = this->__path_ptr_;
  if (SHIBYTE(path_ptr->__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    path_ptr = (const std::__fs::filesystem::path *)path_ptr->__pn_.__r_.__value_.__r.__words[0];
    size = this->__path_ptr_->__pn_.__r_.__value_.__l.__size_;
  }
  else
  {
    size = HIBYTE(path_ptr->__pn_.__r_.__value_.__r.__words[2]);
  }
  state = this->__state_;
  v13[0] = path_ptr;
  v13[1] = size;
  entry = this->__entry_;
  v15 = state;
  std::__fs::filesystem::parser::PathParser::increment((uint64_t)v13);
  v5 = v15;
  this->__state_ = v15;
  this->__entry_ = entry;
  data = "";
  v7 = 0;
  v8 = 1 << v5;
  if ((v8 & 0x62) != 0)
    goto LABEL_15;
  if ((v8 & 0x14) == 0)
  {
    if (*entry.__data_ == 92)
      data = "\\";
    else
      data = "/";
    v7 = 1;
    goto LABEL_15;
  }
  v7 = entry.__size_;
  if (entry.__size_ >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  data = entry.__data_;
  if (entry.__size_ < 0x17)
  {
LABEL_15:
    HIBYTE(v17) = v7;
    v11 = &v16;
    if (!v7)
      goto LABEL_17;
    goto LABEL_16;
  }
  v9 = (entry.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((entry.__size_ | 7) != 0x17)
    v9 = entry.__size_ | 7;
  v10 = v9 + 1;
  v11 = (__int128 *)operator new(v9 + 1);
  *((_QWORD *)&v16 + 1) = v7;
  v17 = v10 | 0x8000000000000000;
  *(_QWORD *)&v16 = v11;
LABEL_16:
  memmove(v11, data, v7);
LABEL_17:
  *((_BYTE *)v11 + v7) = 0;
  if (SHIBYTE(this->__stashed_elem_.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(this->__stashed_elem_.__pn_.__r_.__value_.__l.__data_);
  *(_OWORD *)&this->__stashed_elem_.__pn_.__r_.__value_.__l.__data_ = v16;
  this->__stashed_elem_.__pn_.__r_.__value_.__r.__words[2] = v17;
  return this;
}

std::__fs::filesystem::path::iterator *__cdecl std::__fs::filesystem::path::iterator::__decrement(std::__fs::filesystem::path::iterator *this)
{
  const std::__fs::filesystem::path *path_ptr;
  std::string::size_type size;
  std::__fs::filesystem::path::iterator::_ParserState state;
  std::__fs::filesystem::path::iterator::_ParserState v5;
  const char *data;
  size_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  unint64_t v13[2];
  std::__fs::filesystem::path::__string_view entry;
  std::__fs::filesystem::path::iterator::_ParserState v15;
  __int128 v16;
  unint64_t v17;

  path_ptr = this->__path_ptr_;
  if (SHIBYTE(path_ptr->__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    path_ptr = (const std::__fs::filesystem::path *)path_ptr->__pn_.__r_.__value_.__r.__words[0];
    size = this->__path_ptr_->__pn_.__r_.__value_.__l.__size_;
  }
  else
  {
    size = HIBYTE(path_ptr->__pn_.__r_.__value_.__r.__words[2]);
  }
  state = this->__state_;
  v13[0] = (unint64_t)path_ptr;
  v13[1] = size;
  entry = this->__entry_;
  v15 = state;
  std::__fs::filesystem::parser::PathParser::decrement(v13);
  v5 = v15;
  this->__state_ = v15;
  this->__entry_ = entry;
  data = "";
  v7 = 0;
  v8 = 1 << v5;
  if ((v8 & 0x62) != 0)
    goto LABEL_15;
  if ((v8 & 0x14) == 0)
  {
    if (*entry.__data_ == 92)
      data = "\\";
    else
      data = "/";
    v7 = 1;
    goto LABEL_15;
  }
  v7 = entry.__size_;
  if (entry.__size_ >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  data = entry.__data_;
  if (entry.__size_ < 0x17)
  {
LABEL_15:
    HIBYTE(v17) = v7;
    v11 = &v16;
    if (!v7)
      goto LABEL_17;
    goto LABEL_16;
  }
  v9 = (entry.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((entry.__size_ | 7) != 0x17)
    v9 = entry.__size_ | 7;
  v10 = v9 + 1;
  v11 = (__int128 *)operator new(v9 + 1);
  *((_QWORD *)&v16 + 1) = v7;
  v17 = v10 | 0x8000000000000000;
  *(_QWORD *)&v16 = v11;
LABEL_16:
  memmove(v11, data, v7);
LABEL_17:
  *((_BYTE *)v11 + v7) = 0;
  if (SHIBYTE(this->__stashed_elem_.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(this->__stashed_elem_.__pn_.__r_.__value_.__l.__data_);
  *(_OWORD *)&this->__stashed_elem_.__pn_.__r_.__value_.__l.__data_ = v16;
  this->__stashed_elem_.__pn_.__r_.__value_.__r.__words[2] = v17;
  return this;
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E2E57718, MEMORY[0x1E0DE5100]);
}

void sub_191FBDB2C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE51A8] + 16);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E0DE5188], MEMORY[0x1E0DE5138]);
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E2E57720, MEMORY[0x1E0DE5108]);
}

void sub_191FBDBC8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE51B0] + 16);
  return result;
}

uint64_t std::__fs::filesystem::parser::PathParser::increment(uint64_t this)
{
  _BYTE *v1;
  int v2;
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;

  v1 = *(_BYTE **)this;
  v2 = *(unsigned __int8 *)(this + 32);
  if ((v2 - 2) >= 3)
  {
    v3 = *(_BYTE **)this;
    if ((v2 - 5) < 2)
    {
LABEL_17:
      *(_BYTE *)(this + 32) = 6;
      *(_QWORD *)(this + 16) = 0;
      *(_QWORD *)(this + 24) = 0;
      return this;
    }
  }
  else
  {
    v3 = (_BYTE *)(*(_QWORD *)(this + 24) + *(_QWORD *)(this + 16));
  }
  v4 = &v1[*(_QWORD *)(this + 8)];
  if (v3 == v4)
    goto LABEL_17;
  if ((v2 - 1) < 2)
  {
    if (!v3)
    {
LABEL_28:
      v1 = 0;
LABEL_48:
      *(_BYTE *)(this + 32) = 4;
      v9 = v1 - v3;
LABEL_51:
      *(_QWORD *)(this + 16) = v3;
      *(_QWORD *)(this + 24) = v9;
      return this;
    }
    v7 = 1;
    if (v3 >= v4)
      v7 = -1;
    if (*v3 == 47)
    {
      v8 = v3;
      while (1)
      {
        v8 += v7;
        if (v8 == v4)
          break;
        if (*v8 != 47)
          goto LABEL_39;
      }
      v8 = &v1[*(_QWORD *)(this + 8)];
      if (!v1)
        goto LABEL_48;
LABEL_39:
      *(_BYTE *)(this + 32) = 3;
      v9 = v8 - v3;
      goto LABEL_51;
    }
    v1 = v3;
    while (1)
    {
      v1 += v7;
      if (v1 == v4)
        break;
      if (*v1 == 47)
        goto LABEL_48;
    }
LABEL_47:
    v1 = v4;
    goto LABEL_48;
  }
  if (v2 == 3)
  {
    if (!v3 || *v3 == 47)
      goto LABEL_28;
    if (v3 < v4)
      v10 = 1;
    else
      v10 = -1;
    v1 = v3;
    while (1)
    {
      v1 += v10;
      if (v1 == v4)
        goto LABEL_47;
      if (*v1 == 47)
        goto LABEL_48;
    }
  }
  if (v2 != 4)
    return this;
  if (v3 && *v3 == 47)
  {
    if (v3 < v4)
      v5 = 1;
    else
      v5 = -1;
    v6 = v3;
    while (1)
    {
      v6 += v5;
      if (v6 == v4)
        goto LABEL_50;
      if (*v6 != 47)
        goto LABEL_30;
    }
  }
  v6 = 0;
LABEL_30:
  if (v6 == v4)
    goto LABEL_50;
  if (!v6)
  {
    v4 = 0;
    goto LABEL_50;
  }
  if (*v6 == 47)
  {
LABEL_33:
    v4 = v6;
LABEL_50:
    *(_BYTE *)(this + 32) = 5;
    v9 = v4 - v3;
    goto LABEL_51;
  }
  if (v6 < v4)
    v11 = 1;
  else
    v11 = -1;
  v12 = v6;
  while (1)
  {
    v12 += v11;
    if (v12 == v4)
      break;
    if (*v12 == 47)
      goto LABEL_60;
  }
  v12 = &v1[*(_QWORD *)(this + 8)];
  if (!v1)
    goto LABEL_33;
LABEL_60:
  *(_BYTE *)(this + 32) = 4;
  *(_QWORD *)(this + 16) = v6;
  *(_QWORD *)(this + 24) = v12 - v6;
  return this;
}

unint64_t *std::__fs::filesystem::parser::PathParser::decrement(unint64_t *this)
{
  unint64_t v1;
  int v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  char v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *this;
  v2 = *((unsigned __int8 *)this + 32);
  v3 = v2 - 3;
  if ((v2 - 3) >= 3)
  {
    if ((v2 - 1) < 2)
    {
LABEL_9:
      *((_BYTE *)this + 32) = 1;
      this[2] = 0;
      this[3] = 0;
      return this;
    }
    v4 = this[1] + v1;
  }
  else
  {
    v4 = this[2];
  }
  v5 = v4 - v1;
  if (v4 == v1)
    goto LABEL_9;
  v6 = (_BYTE *)(v1 - 1);
  v7 = (_BYTE *)(v4 - 1);
  switch(v3)
  {
    case 0:
      v8 = 2;
      goto LABEL_8;
    case 1:
      if (*v7 != 47)
      {
        v7 = 0;
        v6 = 0;
        goto LABEL_35;
      }
      v9 = v4 >= v1;
      v10 = v4 - v1;
      v11 = 1;
      if (v9)
        v11 = -1;
      while (1)
      {
        v7 += v11;
        if (v7 == v6)
          break;
        if (*v7 != 47)
        {
          if (v7 < v6)
            v12 = 1;
          else
            v12 = -1;
          v13 = v7;
          do
          {
            v13 += v12;
            if (v13 == v6)
              goto LABEL_35;
          }
          while (*v13 != 47);
          v6 = v13;
LABEL_35:
          v18 = v6 + 1;
          *((_BYTE *)this + 32) = 4;
          v19 = v7 - v18 + 1;
          goto LABEL_43;
        }
      }
      *((_BYTE *)this + 32) = 3;
      this[2] = v1;
      this[3] = v10;
      return this;
    case 2:
      if (*v7 == 47)
      {
        v7 = 0;
        goto LABEL_42;
      }
      v9 = v4 >= v1;
      v20 = 1;
      if (v9)
        v20 = -1;
      break;
    case 3:
      v5 = v4 - v1;
      v14 = 1;
      if (v4 >= v1)
        v14 = -1;
      if (*(_BYTE *)(v4 - 1) == 47)
      {
        v15 = 0;
        v16 = v14 + v4 - 1;
        while ((_BYTE *)(v16 + v15) != v6)
        {
          v17 = *(unsigned __int8 *)(v16 + v15);
          v15 += v14;
          if (v17 != 47)
          {
            v18 = (_BYTE *)(v4 + v15);
            *((_BYTE *)this + 32) = 5;
            v19 = -v15;
            goto LABEL_43;
          }
        }
        v8 = 3;
LABEL_8:
        *((_BYTE *)this + 32) = v8;
        this[2] = v1;
        this[3] = v5;
        return this;
      }
      do
      {
        v7 += v14;
        if (v7 == v6)
          goto LABEL_41;
      }
      while (*v7 != 47);
      goto LABEL_42;
    default:
      return this;
  }
  while (1)
  {
    v7 += v20;
    if (v7 == v6)
      break;
    if (*v7 == 47)
      goto LABEL_42;
  }
LABEL_41:
  v7 = v6;
LABEL_42:
  v18 = v7 + 1;
  *((_BYTE *)this + 32) = 4;
  v19 = v4 - (_QWORD)(v7 + 1);
LABEL_43:
  this[2] = (unint64_t)v18;
  this[3] = v19;
  return this;
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

void std::vector<std::pair<std::string_view,std::__fs::filesystem::PathPartKind>>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void *std::allocator<std::pair<std::string_view,std::__fs::filesystem::PathPartKind>>::allocate_at_least[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a2);
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;

  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      v11 = v7 + v9;
      v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      v14 = v8 + a3 + v7 + v4;
      v15 = v14 + v5;
      v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      v18 = v17 + v6 + v9;
      v19 = __ROR8__(v18, 44);
      v20 = v18 + v10;
      v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      v23 = *a2;
      v22 = a2 + 4;
      v24 = v23 - 0x4B6D499041670D8DLL * v5;
      v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v26 = *(v22 - 3);
        v27 = v24 + v15 + v11 + v26;
        v28 = v22[2];
        v29 = v22[3];
        v30 = v22[1];
        v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        v31 = v13 + v20;
        v32 = *(v22 - 2);
        v33 = *(v22 - 1);
        v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        v35 = v34 + v20 + v33;
        v36 = v34 + v26 + v32;
        v15 = v36 + v33;
        v37 = __ROR8__(v36, 44) + v34;
        v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        v16 = v37 + __ROR8__(v35 + v38, 21);
        v39 = v24 + v21 + *v22;
        v20 = v39 + v30 + v28 + v29;
        v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        v13 = v38;
        v25 += 64;
      }
      while (v25);
      v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](a2, a3);
  }
  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](a2, a3);
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](_DWORD *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if (a2 < 9)
  {
    if (a2 < 4)
    {
      result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    v3 = *(_QWORD *)((char *)a1 + a2 - 8);
    v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = a1[1];
  v3 = 0xB492B66FBE98F273 * *a1;
  v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8);
  v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(_QWORD *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)((char *)a1 + a2 - 16);
  v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  v5 = a1[2];
  v4 = a1[3];
  v6 = __ROR8__(v3 + v4, 52);
  v7 = v3 + a1[1];
  v8 = __ROR8__(v7, 7);
  v9 = v7 + v5;
  v10 = *(_QWORD *)((char *)a1 + a2 - 32) + v5;
  v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  v12 = *(_QWORD *)((char *)a1 + a2 - 24) + v10 + v2;
  v13 = 0xC3A5C85C97CB3127 * (v12 + *(_QWORD *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char [2],void>(std::string *this, char *a2)
{
  char *v3;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  v3 = a2 - 1;
  while (*++v3)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, a2, v3);
  return this;
}

void sub_191FBE560(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::string::append[abi:ne180100]<char const*,0>(std::string *this, char *a2, char *a3)
{
  char *v4;
  unint64_t v6;
  unint64_t v7;
  std::string::size_type size;
  std::string::size_type v9;
  std::string *v10;
  unint64_t v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  _BYTE *i;
  char v16;
  std::string::size_type v17;
  void *__p[2];
  unsigned __int8 v20;

  v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  v7 = a3 - a2;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == a2)
      return this;
    size = this->__r_.__value_.__l.__size_;
    v11 = this->__r_.__value_.__r.__words[2];
    v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    v6 = HIBYTE(v11);
  }
  else
  {
    if (a3 == a2)
      return this;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v9 = 22;
    v10 = this;
  }
  if (v10 > (std::string *)v4 || (char *)&v10->__r_.__value_.__l.__data_ + size + 1 <= v4)
  {
    if (v9 - size < v7)
    {
      std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    }
    v14 = this;
    if ((v6 & 0x80) != 0)
      v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    for (i = (char *)v14 + size; v4 != a3; ++i)
    {
      v16 = *v4++;
      *i = v16;
    }
    *i = 0;
    v17 = v7 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      this->__r_.__value_.__l.__size_ = v17;
    else
      *((_BYTE *)&this->__r_.__value_.__s + 23) = v17 & 0x7F;
  }
  else
  {
    std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__p, v4, a3, v7);
    if ((v20 & 0x80u) == 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    if ((v20 & 0x80u) == 0)
      v13 = v20;
    else
      v13 = (std::string::size_type)__p[1];
    std::string::append(this, (const std::string::value_type *)v12, v13);
    if ((char)v20 < 0)
      operator delete(__p[0]);
  }
  return this;
}

void sub_191FBE6D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::__init_with_size[abi:ne180100]<char const*,char const*>(_QWORD *result, char *a2, char *a3, unint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a4 > 0x16)
  {
    v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v8 = a4 | 7;
    v9 = v8 + 1;
    result = operator new(v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    *v4 = result;
    v4 = result;
  }
  else
  {
    *((_BYTE *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    v10 = *a2++;
    *(_BYTE *)v4 = v10;
    v4 = (_QWORD *)((char *)v4 + 1);
  }
  *(_BYTE *)v4 = 0;
  return result;
}

std::string *std::__fs::filesystem::path::append[abi:ne180100]<std::string_view>(std::string *this, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 8) && **(_BYTE **)a2 == 47)
  {
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    {
      *this->__r_.__value_.__l.__data_ = 0;
      this->__r_.__value_.__l.__size_ = 0;
    }
    else
    {
      this->__r_.__value_.__s.__data_[0] = 0;
      *((_BYTE *)&this->__r_.__value_.__s + 23) = 0;
    }
  }
  else if (std::__fs::filesystem::path::__filename((const std::__fs::filesystem::path *)this).__size_)
  {
    std::string::push_back(this, 47);
  }
  std::string::append[abi:ne180100]<char const*,0>(this, *(char **)a2, (char *)(*(_QWORD *)a2 + *(_QWORD *)(a2 + 8)));
  return this;
}

std::string *std::__fs::filesystem::path::append[abi:ne180100]<char [1]>(std::string *this, char *a2)
{
  char *v4;

  if (*a2 == 47)
  {
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    {
      *this->__r_.__value_.__l.__data_ = 0;
      this->__r_.__value_.__l.__size_ = 0;
    }
    else
    {
      this->__r_.__value_.__s.__data_[0] = 0;
      *((_BYTE *)&this->__r_.__value_.__s + 23) = 0;
    }
  }
  else if (std::__fs::filesystem::path::__filename((const std::__fs::filesystem::path *)this).__size_)
  {
    std::string::push_back(this, 47);
  }
  v4 = a2 - 1;
  while (*++v4)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, a2, v4);
  return this;
}

std::string *std::__fs::filesystem::path::append[abi:ne180100]<char [3]>(std::string *this, char *a2)
{
  char *v4;

  if (*a2 == 47)
  {
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    {
      *this->__r_.__value_.__l.__data_ = 0;
      this->__r_.__value_.__l.__size_ = 0;
    }
    else
    {
      this->__r_.__value_.__s.__data_[0] = 0;
      *((_BYTE *)&this->__r_.__value_.__s + 23) = 0;
    }
  }
  else if (std::__fs::filesystem::path::__filename((const std::__fs::filesystem::path *)this).__size_)
  {
    std::string::push_back(this, 47);
  }
  v4 = a2 - 1;
  while (*++v4)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, a2, v4);
  return this;
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x194021E38);
}

size_t std::__next_prime(size_t __n)
{
  unsigned int *v1;
  unint64_t v2;
  unint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  size_t result;
  size_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int *v11;
  unint64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  size_t v19;
  size_t v20;
  size_t v21;
  size_t v22;
  size_t v23;
  size_t v24;
  size_t v25;
  size_t v26;
  size_t v27;
  size_t v28;
  size_t v29;
  size_t v30;
  size_t v31;
  size_t v32;
  size_t v33;
  size_t v34;
  size_t v35;
  size_t v36;
  size_t v37;
  size_t v38;
  size_t v39;
  size_t v40;
  size_t v41;
  size_t v42;
  size_t v43;
  size_t v44;
  size_t v45;
  size_t v46;
  size_t v47;
  size_t v48;
  size_t v49;
  size_t v50;
  size_t v51;
  size_t v52;
  size_t v53;
  size_t v54;
  size_t v55;
  size_t v56;
  size_t v57;
  size_t v58;
  size_t v59;
  size_t v60;
  size_t v61;
  size_t v62;
  size_t v63;
  size_t v64;
  size_t v65;
  size_t v66;
  size_t v67;

  if (__n > 0xD3)
  {
    if (__n >= 0xFFFFFFFFFFFFFFC6)
      std::__throw_overflow_error[abi:ne180100]("__next_prime overflow");
    v8 = __n / 0xD2;
    v9 = 210 * (__n / 0xD2);
    v10 = 48;
    do
    {
      v12 = v10 >> 1;
      v13 = &v11[v10 >> 1];
      v15 = *v13;
      v14 = v13 + 1;
      v10 += ~(v10 >> 1);
      if (__n % 0xD2 > v15)
        v11 = v14;
      else
        v10 = v12;
    }
    while (v10);
LABEL_16:
    v17 = 0x14u;
    while (1)
    {
      if (result / v18 < v18)
        break;
      if (result == result / v18 * v18)
      {
LABEL_117:
        if (v16 == 47)
        {
          ++v8;
          v16 = 0;
        }
        else
        {
          ++v16;
        }
        v9 = 210 * v8;
        goto LABEL_16;
      }
      v17 += 4;
      if (v17 == 188)
      {
        v19 = 419;
        while (1)
        {
          v20 = result / (v19 - 208);
          if (v20 < v19 - 208)
            return result;
          if (result == v20 * (v19 - 208))
            goto LABEL_117;
          v21 = result / (v19 - 198);
          if (v21 < v19 - 198)
            return result;
          if (result == v21 * (v19 - 198))
            goto LABEL_117;
          v22 = result / (v19 - 196);
          if (v22 < v19 - 196)
            return result;
          if (result == v22 * (v19 - 196))
            goto LABEL_117;
          v23 = result / (v19 - 192);
          if (v23 < v19 - 192)
            return result;
          if (result == v23 * (v19 - 192))
            goto LABEL_117;
          v24 = result / (v19 - 190);
          if (v24 < v19 - 190)
            return result;
          if (result == v24 * (v19 - 190))
            goto LABEL_117;
          v25 = result / (v19 - 186);
          if (v25 < v19 - 186)
            return result;
          if (result == v25 * (v19 - 186))
            goto LABEL_117;
          v26 = result / (v19 - 180);
          if (v26 < v19 - 180)
            return result;
          if (result == v26 * (v19 - 180))
            goto LABEL_117;
          v27 = result / (v19 - 178);
          if (v27 < v19 - 178)
            return result;
          if (result == v27 * (v19 - 178))
            goto LABEL_117;
          v28 = result / (v19 - 172);
          if (v28 < v19 - 172)
            return result;
          if (result == v28 * (v19 - 172))
            goto LABEL_117;
          v29 = result / (v19 - 168);
          if (v29 < v19 - 168)
            return result;
          if (result == v29 * (v19 - 168))
            goto LABEL_117;
          v30 = result / (v19 - 166);
          if (v30 < v19 - 166)
            return result;
          if (result == v30 * (v19 - 166))
            goto LABEL_117;
          v31 = result / (v19 - 162);
          if (v31 < v19 - 162)
            return result;
          if (result == v31 * (v19 - 162))
            goto LABEL_117;
          v32 = result / (v19 - 156);
          if (v32 < v19 - 156)
            return result;
          if (result == v32 * (v19 - 156))
            goto LABEL_117;
          v33 = result / (v19 - 150);
          if (v33 < v19 - 150)
            return result;
          if (result == v33 * (v19 - 150))
            goto LABEL_117;
          v34 = result / (v19 - 148);
          if (v34 < v19 - 148)
            return result;
          if (result == v34 * (v19 - 148))
            goto LABEL_117;
          v35 = result / (v19 - 142);
          if (v35 < v19 - 142)
            return result;
          if (result == v35 * (v19 - 142))
            goto LABEL_117;
          v36 = result / (v19 - 138);
          if (v36 < v19 - 138)
            return result;
          if (result == v36 * (v19 - 138))
            goto LABEL_117;
          v37 = result / (v19 - 136);
          if (v37 < v19 - 136)
            return result;
          if (result == v37 * (v19 - 136))
            goto LABEL_117;
          v38 = result / (v19 - 130);
          if (v38 < v19 - 130)
            return result;
          if (result == v38 * (v19 - 130))
            goto LABEL_117;
          v39 = result / (v19 - 126);
          if (v39 < v19 - 126)
            return result;
          if (result == v39 * (v19 - 126))
            goto LABEL_117;
          v40 = result / (v19 - 120);
          if (v40 < v19 - 120)
            return result;
          if (result == v40 * (v19 - 120))
            goto LABEL_117;
          v41 = result / (v19 - 112);
          if (v41 < v19 - 112)
            return result;
          if (result == v41 * (v19 - 112))
            goto LABEL_117;
          v42 = result / (v19 - 108);
          if (v42 < v19 - 108)
            return result;
          if (result == v42 * (v19 - 108))
            goto LABEL_117;
          v43 = result / (v19 - 106);
          if (v43 < v19 - 106)
            return result;
          if (result == v43 * (v19 - 106))
            goto LABEL_117;
          v44 = result / (v19 - 102);
          if (v44 < v19 - 102)
            return result;
          if (result == v44 * (v19 - 102))
            goto LABEL_117;
          v45 = result / (v19 - 100);
          if (v45 < v19 - 100)
            return result;
          if (result == v45 * (v19 - 100))
            goto LABEL_117;
          v46 = result / (v19 - 96);
          if (v46 < v19 - 96)
            return result;
          if (result == v46 * (v19 - 96))
            goto LABEL_117;
          v47 = result / (v19 - 88);
          if (v47 < v19 - 88)
            return result;
          if (result == v47 * (v19 - 88))
            goto LABEL_117;
          v48 = result / (v19 - 82);
          if (v48 < v19 - 82)
            return result;
          if (result == v48 * (v19 - 82))
            goto LABEL_117;
          v49 = result / (v19 - 78);
          if (v49 < v19 - 78)
            return result;
          if (result == v49 * (v19 - 78))
            goto LABEL_117;
          v50 = result / (v19 - 72);
          if (v50 < v19 - 72)
            return result;
          if (result == v50 * (v19 - 72))
            goto LABEL_117;
          v51 = result / (v19 - 70);
          if (v51 < v19 - 70)
            return result;
          if (result == v51 * (v19 - 70))
            goto LABEL_117;
          v52 = result / (v19 - 66);
          if (v52 < v19 - 66)
            return result;
          if (result == v52 * (v19 - 66))
            goto LABEL_117;
          v53 = result / (v19 - 60);
          if (v53 < v19 - 60)
            return result;
          if (result == v53 * (v19 - 60))
            goto LABEL_117;
          v54 = result / (v19 - 58);
          if (v54 < v19 - 58)
            return result;
          if (result == v54 * (v19 - 58))
            goto LABEL_117;
          v55 = result / (v19 - 52);
          if (v55 < v19 - 52)
            return result;
          if (result == v55 * (v19 - 52))
            goto LABEL_117;
          v56 = result / (v19 - 46);
          if (v56 < v19 - 46)
            return result;
          if (result == v56 * (v19 - 46))
            goto LABEL_117;
          v57 = result / (v19 - 42);
          if (v57 < v19 - 42)
            return result;
          if (result == v57 * (v19 - 42))
            goto LABEL_117;
          v58 = result / (v19 - 40);
          if (v58 < v19 - 40)
            return result;
          if (result == v58 * (v19 - 40))
            goto LABEL_117;
          v59 = result / (v19 - 36);
          if (v59 < v19 - 36)
            return result;
          if (result == v59 * (v19 - 36))
            goto LABEL_117;
          v60 = result / (v19 - 30);
          if (v60 < v19 - 30)
            return result;
          if (result == v60 * (v19 - 30))
            goto LABEL_117;
          v61 = result / (v19 - 28);
          if (v61 < v19 - 28)
            return result;
          if (result == v61 * (v19 - 28))
            goto LABEL_117;
          v62 = result / (v19 - 22);
          if (v62 < v19 - 22)
            return result;
          if (result == v62 * (v19 - 22))
            goto LABEL_117;
          v63 = result / (v19 - 18);
          if (v63 < v19 - 18)
            return result;
          if (result == v63 * (v19 - 18))
            goto LABEL_117;
          v64 = result / (v19 - 16);
          if (v64 < v19 - 16)
            return result;
          if (result == v64 * (v19 - 16))
            goto LABEL_117;
          v65 = result / (v19 - 12);
          if (v65 < v19 - 12)
            return result;
          if (result == v65 * (v19 - 12))
            goto LABEL_117;
          v66 = result / (v19 - 10);
          if (v66 < v19 - 10)
            return result;
          if (result == v66 * (v19 - 10))
            goto LABEL_117;
          if (result / v19 < v19)
            return result;
          v67 = result / v19 * v19;
          v19 += 210;
          if (result == v67)
            goto LABEL_117;
        }
      }
    }
  }
  else
  {
    v2 = 48;
    do
    {
      v3 = v2 >> 1;
      v4 = &v1[v2 >> 1];
      v6 = *v4;
      v5 = v4 + 1;
      v2 += ~(v2 >> 1);
      if (v6 < __n)
        v1 = v5;
      else
        v2 = v3;
    }
    while (v2);
    return *v1;
  }
  return result;
}

void std::__throw_overflow_error[abi:ne180100](const char *a1)
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::overflow_error::overflow_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E2E57730, MEMORY[0x1E0DE5120]);
}

void sub_191FBF0AC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *std::overflow_error::overflow_error[abi:ne180100](std::runtime_error *a1, const char *a2)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(a1, a2);
  result->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE51C0] + 16);
  return result;
}

void std::bad_weak_ptr::~bad_weak_ptr(std::bad_weak_ptr *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x194021E38);
}

const char *__cdecl std::bad_weak_ptr::what(const std::bad_weak_ptr *this)
{
  return "bad_weak_ptr";
}

void std::__shared_count::__add_shared(std::__shared_count *this)
{
  uint64_t *p_shared_owners;
  unint64_t v2;

  p_shared_owners = &this->__shared_owners_;
  do
    v2 = __ldxr((unint64_t *)p_shared_owners);
  while (__stxr(v2 + 1, (unint64_t *)p_shared_owners));
}

BOOL std::__shared_count::__release_shared(std::__shared_count *this)
{
  uint64_t *p_shared_owners;
  unint64_t v2;

  p_shared_owners = &this->__shared_owners_;
  do
    v2 = __ldaxr((unint64_t *)p_shared_owners);
  while (__stlxr(v2 - 1, (unint64_t *)p_shared_owners));
  if (!v2)
    ((void (*)(std::__shared_count *))this->__on_zero_shared)(this);
  return v2 == 0;
}

void std::__shared_weak_count::__add_shared(std::__shared_weak_count *this)
{
  uint64_t *p_shared_owners;
  unint64_t v2;

  p_shared_owners = &this->__shared_owners_;
  do
    v2 = __ldxr((unint64_t *)p_shared_owners);
  while (__stxr(v2 + 1, (unint64_t *)p_shared_owners));
}

void std::__shared_weak_count::__add_weak(std::__shared_weak_count *this)
{
  uint64_t *p_shared_weak_owners;
  unint64_t v2;

  p_shared_weak_owners = &this->__shared_weak_owners_;
  do
    v2 = __ldxr((unint64_t *)p_shared_weak_owners);
  while (__stxr(v2 + 1, (unint64_t *)p_shared_weak_owners));
}

void std::__shared_weak_count::__release_shared(std::__shared_weak_count *this)
{
  uint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t *p_shared_weak_owners;
  unint64_t v6;

  p_shared_owners = &this->__shared_owners_;
  do
    v3 = __ldaxr((unint64_t *)p_shared_owners);
  while (__stlxr(v3 - 1, (unint64_t *)p_shared_owners));
  if (!v3)
  {
    p_shared_weak_owners = &this->__shared_weak_owners_;
    ((void (*)(std::__shared_weak_count *))this->__on_zero_shared)(this);
    if (!atomic_load((unint64_t *)p_shared_weak_owners))
      goto LABEL_8;
    do
      v6 = __ldaxr((unint64_t *)p_shared_weak_owners);
    while (__stlxr(v6 - 1, (unint64_t *)p_shared_weak_owners));
    if (!v6)
LABEL_8:
      ((void (*)(std::__shared_weak_count *))this->__on_zero_shared_weak)(this);
  }
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
  uint64_t *p_shared_weak_owners;
  unint64_t v3;

  p_shared_weak_owners = &this->__shared_weak_owners_;
  if (!atomic_load((unint64_t *)&this->__shared_weak_owners_))
    goto LABEL_4;
  do
    v3 = __ldaxr((unint64_t *)p_shared_weak_owners);
  while (__stlxr(v3 - 1, (unint64_t *)p_shared_weak_owners));
  if (!v3)
LABEL_4:
    ((void (*)(std::__shared_weak_count *))this->__on_zero_shared_weak)(this);
}

std::__shared_weak_count *__cdecl std::__shared_weak_count::lock(std::__shared_weak_count *this)
{
  uint64_t *p_shared_owners;
  unint64_t v2;
  unint64_t v3;
  char v4;

  p_shared_owners = &this->__shared_owners_;
  v2 = atomic_load((unint64_t *)&this->__shared_owners_);
  if (v2 != -1)
  {
    while (1)
    {
      v3 = __ldaxr((unint64_t *)p_shared_owners);
      if (v3 != v2)
        break;
      if (__stlxr(v2 + 1, (unint64_t *)p_shared_owners))
        goto LABEL_6;
      v4 = 1;
LABEL_7:
      if ((v4 & 1) != 0)
        return this;
      v2 = v3;
      if (v3 == -1)
        return 0;
    }
    __clrex();
LABEL_6:
    v4 = 0;
    goto LABEL_7;
  }
  return 0;
}

const void *__cdecl std::__shared_weak_count::__get_deleter(const std::__shared_weak_count *this, const std::type_info *a2)
{
  return 0;
}

void std::__sp_mut::lock(std::__sp_mut *this)
{
  pthread_mutex_lock((pthread_mutex_t *)this->__lx_);
}

void std::__sp_mut::unlock(std::__sp_mut *this)
{
  pthread_mutex_unlock((pthread_mutex_t *)this->__lx_);
}

std::__sp_mut *__cdecl std::__get_sp_mut(const void *a1)
{
  unint64_t v1;
  unint64_t v2;

  v1 = 0x9DDFEA08EB382D69 * (((8 * (_DWORD)a1) + 8) ^ ((unint64_t)a1 >> 32));
  v2 = 0x9DDFEA08EB382D69 * (((unint64_t)a1 >> 32) ^ (v1 >> 47) ^ v1);
  return (std::__sp_mut *)(&std::__get_sp_mut(void const*)::muts
                         + ((9 * ((v2 >> 47) ^ v2)) & 0x1F));
}

void *__cdecl std::align(size_t __align, size_t __sz, void **__ptr, size_t *__space)
{
  size_t v4;
  void *result;
  _BYTE *v7;
  size_t v8;

  v4 = *__space;
  if (*__space < __sz)
    return 0;
  result = 0;
  v7 = (_BYTE *)(((unint64_t)*__ptr + __align - 1) & -(uint64_t)__align);
  v8 = v7 - (_BYTE *)*__ptr;
  if (v8 <= *__space - __sz)
  {
    *__ptr = v7;
    *__space = v4 - v8;
    return v7;
  }
  return result;
}

_UNKNOWN **std::pmr::new_delete_resource(std::pmr *this)
{
}

_UNKNOWN **std::pmr::null_memory_resource(std::pmr *this)
{
  return &off_1EE244988;
}

unint64_t std::pmr::get_default_resource(std::pmr *this)
{
  return atomic_load((unint64_t *)&std::pmr::__default_memory_resource(BOOL,std::pmr::memory_resource *)::__res);
}

unint64_t std::pmr::set_default_resource(std::pmr *this, std::pmr::memory_resource *a2)
{
  std::pmr *v2;
  unint64_t result;

  if (this)
    v2 = this;
  do
    result = __ldaxr((unint64_t *)&std::pmr::__default_memory_resource(BOOL,std::pmr::memory_resource *)::__res);
  while (__stlxr((unint64_t)v2, (unint64_t *)&std::pmr::__default_memory_resource(BOOL,std::pmr::memory_resource *)::__res));
  return result;
}

_QWORD **std::pmr::unsynchronized_pool_resource::__adhoc_pool::__release_ptr(_QWORD **this, std::pmr::memory_resource *a2)
{
  _QWORD *v2;
  _QWORD *v4;
  _QWORD *v5;

  v2 = *this;
  if (*this)
  {
    v4 = this;
    do
    {
      v5 = (_QWORD *)*v2;
      this = (_QWORD **)(*(uint64_t (**)(std::pmr::memory_resource *))(*(_QWORD *)a2 + 24))(a2);
      *v4 = v5;
      v2 = v5;
    }
    while (v5);
  }
  return this;
}

uint64_t std::pmr::unsynchronized_pool_resource::__adhoc_pool::__do_allocate(std::pmr::unsynchronized_pool_resource::__adhoc_pool *this, std::pmr::memory_resource *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t result;
  _QWORD *v8;

  if (a4 <= 8)
    v5 = 8;
  else
    v5 = a4;
  v6 = (a3 + 7) & 0xFFFFFFFFFFFFFFF8;
  result = (*(uint64_t (**)(std::pmr::memory_resource *, unint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v6 + 24, v5);
  v8 = (_QWORD *)(result + v6);
  *v8 = *(_QWORD *)this;
  *(_QWORD *)(result + v6 + 24 - 16) = result;
  v8[2] = v5;
  *(_QWORD *)this = result + v6;
  return result;
}

char **std::pmr::unsynchronized_pool_resource::__adhoc_pool::__do_deallocate(char **this, std::pmr::memory_resource *a2, _BYTE *a3)
{
  char *v3;
  char *v4;
  char *v5;

  v3 = *this;
  if (*((_BYTE **)*this + 1) == a3)
  {
    v4 = (char *)this;
LABEL_6:
    v5 = *(char **)v3;
    this = (char **)(*(uint64_t (**)(std::pmr::memory_resource *, _BYTE *, int64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, a3, v3 - a3 + 24, *((_QWORD *)v3 + 2));
    *(_QWORD *)v4 = v5;
  }
  else
  {
    while (1)
    {
      v4 = v3;
      v3 = *(char **)v3;
      if (!v3)
        break;
      if (*((_BYTE **)v3 + 1) == a3)
        goto LABEL_6;
    }
  }
  return this;
}

uint64_t std::pmr::unsynchronized_pool_resource::__pool_block_size(std::pmr::unsynchronized_pool_resource *this, char a2)
{
  return 1 << (a2 + 3);
}

uint64_t std::pmr::unsynchronized_pool_resource::__log2_pool_block_size(std::pmr::unsynchronized_pool_resource *this, int a2)
{
  return (a2 + 3);
}

uint64_t std::pmr::unsynchronized_pool_resource::__pool_index(std::pmr::unsynchronized_pool_resource *this, unint64_t a2, unint64_t a3)
{
  uint64_t result;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;

  result = *((unsigned int *)this + 8);
  if (a3 <= 8 && 1 << result >= a2)
  {
    if (a2 <= a3)
      v4 = a3;
    else
      v4 = a2;
    v5 = v4 - 1;
    if (v5 >= 8)
    {
      LODWORD(result) = 0;
      v6 = v5 >> 3;
      do
      {
        result = (result + 1);
        v7 = v6 > 1;
        v6 >>= 1;
      }
      while (v7);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t std::pmr::unsynchronized_pool_resource::unsynchronized_pool_resource(uint64_t result, unint64_t *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  int v8;
  int v9;
  unint64_t i;

  *(_QWORD *)result = &off_1E2E57FF8;
  *(_QWORD *)(result + 8) = a3;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  v3 = 0x40000000;
  v5 = *a2;
  v4 = a2[1];
  if (v4 < 0x40000000)
    v3 = a2[1];
  if (v3 <= 8)
    v3 = 8;
  if (!v4)
    v3 = 0x100000;
  LODWORD(v6) = 0x100000;
  if (v5 < 0x100000)
    v6 = *a2;
  if (v5 >= 0x10)
    v7 = v6;
  else
    v7 = 16;
  if (v5)
    v8 = v7;
  else
    v8 = 0x100000;
  *(_DWORD *)(result + 36) = v8;
  v9 = 1;
  if (v3 >= 9)
  {
    for (i = 8; i < v3; i *= 2)
      ++v9;
  }
  *(_DWORD *)(result + 32) = v9;
  return result;
}

uint64_t std::pmr::unsynchronized_pool_resource::options(std::pmr::unsynchronized_pool_resource *this)
{
  return *((unsigned int *)this + 9);
}

_QWORD **std::pmr::unsynchronized_pool_resource::release(std::pmr::unsynchronized_pool_resource *this)
{
  _QWORD **result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = std::pmr::unsynchronized_pool_resource::__adhoc_pool::__release_ptr((_QWORD **)this + 2, *((std::pmr::memory_resource **)this + 1));
  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    v4 = *((unsigned int *)this + 8);
    if ((int)v4 >= 1)
    {
      v5 = 0;
      v6 = 16 * v4;
      do
      {
        std::pmr::unsynchronized_pool_resource::__fixed_pool::__release_ptr((_QWORD *)(*((_QWORD *)this + 3) + v5), *((std::pmr::memory_resource **)this + 1));
        v5 += 16;
      }
      while (v6 != v5);
      v3 = *((_QWORD *)this + 3);
      LODWORD(v4) = *((_DWORD *)this + 8);
    }
    result = (_QWORD **)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1), v3, 16 * (int)v4, 8);
    *((_QWORD *)this + 3) = 0;
  }
  return result;
}

_QWORD *std::pmr::unsynchronized_pool_resource::__fixed_pool::__release_ptr(_QWORD *this, std::pmr::memory_resource *a2)
{
  _QWORD *v2;
  _QWORD *v4;
  _QWORD *v5;

  this[1] = 0;
  v2 = (_QWORD *)*this;
  if (*this)
  {
    v4 = this;
    do
    {
      v5 = (_QWORD *)*v2;
      this = (_QWORD *)(*(uint64_t (**)(std::pmr::memory_resource *))(*(_QWORD *)a2 + 24))(a2);
      *v4 = v5;
      v2 = v5;
    }
    while (v5);
  }
  return this;
}

unint64_t *std::pmr::unsynchronized_pool_resource::do_allocate(std::pmr::unsynchronized_pool_resource *this, unint64_t a2, unint64_t a3)
{
  int v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  _QWORD *v14;
  char *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;

  if (a3 > 8)
    goto LABEL_11;
  v4 = *((_DWORD *)this + 8);
  if (1 << v4 < a2)
    goto LABEL_11;
  v5 = a2 <= a3 ? a3 : a2;
  v6 = v5 - 1;
  if (v6 >= 8)
  {
    v7 = 0;
    v8 = v6 >> 3;
    do
    {
      ++v7;
      v9 = v8 > 1;
      v8 >>= 1;
    }
    while (v9);
  }
  else
  {
    v7 = 0;
  }
  if (v7 == v4)
  {
LABEL_11:
    v10 = *((_QWORD *)this + 1);
    if (a3 <= 8)
      v11 = 8;
    else
      v11 = a3;
    v12 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8;
    v13 = (unint64_t *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, v12 + 24, v11);
    v14 = (unint64_t *)((char *)v13 + v12);
    *v14 = *((_QWORD *)this + 2);
    *(unint64_t *)((char *)v13 + v12 + 8) = (unint64_t)v13;
    v14[2] = v11;
    *((_QWORD *)this + 2) = (char *)v13 + v12;
    return v13;
  }
  v16 = (char *)*((_QWORD *)this + 3);
  if (!v16)
  {
    v16 = (char *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), 16 * v4, 8);
    *((_QWORD *)this + 3) = v16;
    v17 = *((int *)this + 8);
    if ((_DWORD)v17)
    {
      bzero(v16, 16 * v17);
      v16 = (char *)*((_QWORD *)this + 3);
    }
  }
  v18 = (unint64_t *)&v16[16 * v7];
  v13 = (unint64_t *)v18[1];
  if (v13)
  {
    v18[1] = *v13;
    return v13;
  }
  v19 = *v18;
  if (*v18)
    v19 = v19 - *(_QWORD *)(v19 + 8) + 24;
  v20 = v7 + 3;
  v21 = v19 >> (v7 + 3);
  v22 = 0x400uLL >> (v7 + 3);
  if (v22 <= 0x10)
    v22 = 16;
  if (v21)
    v23 = v21 + (v21 >> 2);
  else
    v23 = v22;
  v24 = 0x40000000uLL >> v20;
  LODWORD(v25) = *((_DWORD *)this + 9);
  if (v25 >= 0x100000)
    v25 = 0x100000;
  else
    v25 = v25;
  if (v24 >= v25)
    v24 = v25;
  if (v23 >= v24)
    v23 = v24;
  return std::pmr::unsynchronized_pool_resource::__fixed_pool::__allocate_in_new_chunk((std::pmr::unsynchronized_pool_resource::__fixed_pool *)v18, *((std::pmr::memory_resource **)this + 1), 1 << v20, v23 << v20);
}

_QWORD *std::pmr::unsynchronized_pool_resource::__fixed_pool::__allocate_in_new_chunk(std::pmr::unsynchronized_pool_resource::__fixed_pool *this, std::pmr::memory_resource *a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4;
  unint64_t v7;
  _QWORD *result;
  _QWORD *v9;
  char *v10;
  _QWORD *v11;
  unint64_t v12;

  v4 = a4;
  v7 = (a4 + 7) & 0xFFFFFFFFFFFFFFF8;
  result = (_QWORD *)(*(uint64_t (**)(std::pmr::memory_resource *, unint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v7 + 24, 8);
  v9 = (_QWORD *)((char *)result + v7);
  *v9 = *(_QWORD *)this;
  *(_QWORD *)((char *)result + v7 + 8) = result;
  v9[2] = 8;
  *(_QWORD *)this = (char *)result + v7;
  if (v4 > a3)
  {
    v10 = (char *)*((_QWORD *)this + 1);
    v11 = result;
    v12 = a3;
    do
    {
      v11 = (_QWORD *)((char *)v11 + a3);
      *v11 = v10;
      v10 = (char *)result + v12;
      v12 += a3;
      v4 -= a3;
    }
    while (a3 != v4);
    *((_QWORD *)this + 1) = v11;
  }
  return result;
}

char **std::pmr::unsynchronized_pool_resource::do_deallocate(char **this, _QWORD *a2, unint64_t a3, unint64_t a4)
{
  int v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  BOOL v9;
  uint64_t v10;

  if (a4 > 8)
    return std::pmr::unsynchronized_pool_resource::__adhoc_pool::__do_deallocate(this + 2, (std::pmr::memory_resource *)this[1], a2);
  v4 = *((_DWORD *)this + 8);
  if (1 << v4 < a3)
    return std::pmr::unsynchronized_pool_resource::__adhoc_pool::__do_deallocate(this + 2, (std::pmr::memory_resource *)this[1], a2);
  v5 = a3 <= a4 ? a4 : a3;
  v6 = v5 - 1;
  if (v5 - 1 >= 8)
  {
    v7 = 0;
    v8 = v6 >> 3;
    do
    {
      ++v7;
      v9 = v8 > 1;
      v8 >>= 1;
    }
    while (v9);
  }
  else
  {
    v7 = 0;
  }
  if (v7 == v4)
    return std::pmr::unsynchronized_pool_resource::__adhoc_pool::__do_deallocate(this + 2, (std::pmr::memory_resource *)this[1], a2);
  v10 = (uint64_t)&this[3][16 * v7];
  *a2 = *(_QWORD *)(v10 + 8);
  *(_QWORD *)(v10 + 8) = a2;
  return this;
}

BOOL std::pmr::synchronized_pool_resource::do_is_equal(std::pmr::synchronized_pool_resource *this, const std::pmr::memory_resource *a2)
{
  return a2 == this;
}

unint64_t std::pmr::monotonic_buffer_resource::__initial_descriptor::__try_allocate_from_chunk(std::pmr::monotonic_buffer_resource::__initial_descriptor *this, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;
  BOOL v7;

  v3 = *((_QWORD *)this + 1);
  if (!v3 || v3 - *(_QWORD *)this < a2)
    return 0;
  v4 = 0;
  v6 = (v3 - a2) & -a3;
  if (v6)
    v7 = *(_QWORD *)this > v6;
  else
    v7 = 1;
  if (!v7)
  {
    *((_QWORD *)this + 1) = v6;
    return (v3 - a2) & -a3;
  }
  return v4;
}

unint64_t std::pmr::monotonic_buffer_resource::__chunk_footer::__try_allocate_from_chunk(std::pmr::monotonic_buffer_resource::__chunk_footer *this, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;

  v3 = *((_QWORD *)this + 2);
  if (v3 - *((_QWORD *)this + 1) < a2)
    return 0;
  v4 = 0;
  v5 = (v3 - a2) & -a3;
  if (v5)
    v6 = *((_QWORD *)this + 1) > v5;
  else
    v6 = 1;
  if (!v6)
  {
    *((_QWORD *)this + 2) = v5;
    return (v3 - a2) & -a3;
  }
  return v4;
}

unint64_t std::pmr::monotonic_buffer_resource::do_allocate(std::pmr::monotonic_buffer_resource *this, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  BOOL v23;

  v5 = *((_QWORD *)this + 2);
  if (v5 && v5 - *((_QWORD *)this + 1) >= a2)
  {
    result = (v5 - a2) & -(uint64_t)a3;
    if (result && *((_QWORD *)this + 1) <= result)
    {
      *((_QWORD *)this + 2) = result;
      return result;
    }
  }
  v8 = *((_QWORD *)this + 4);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    v10 = *(_QWORD *)(v8 + 16);
    if (v10 - v9 >= a2)
    {
      result = (v10 - a2) & -(uint64_t)a3;
      if (result && v9 <= result)
      {
        *(_QWORD *)(v8 + 16) = result;
        return result;
      }
    }
    if (a3 <= 8)
      v12 = 8;
    else
      v12 = a3;
    v13 = v8 - v9;
  }
  else
  {
    if (a3 <= 8)
      v12 = 8;
    else
      v12 = a3;
    v14 = *((_QWORD *)this + 1);
    if (v14)
      v15 = *((_QWORD *)this + 3) - v14;
    else
      v15 = *((_QWORD *)this + 3);
    v13 = (v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  v16 = v13 + 32;
  if (((a2 + 7) & 0xFFFFFFFFFFFFFFF8) + 32 <= v16)
    v17 = ((2 * v16 - 57) & 0xFFFFFFFFFFFFFFF8) + 32;
  else
    v17 = ((a2 + 7) & 0xFFFFFFFFFFFFFFF8) + 32;
  v18 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**((_QWORD **)this + 5) + 16))(*((_QWORD *)this + 5), v17, v12);
  v19 = v18 + v17;
  *(_QWORD *)(v18 + v17 - 32) = *((_QWORD *)this + 4);
  v20 = v18 + v17 - 32;
  *(_QWORD *)(v19 - 24) = v18;
  *(_QWORD *)(v19 - 16) = v20;
  *(_QWORD *)(v19 - 8) = v12;
  *((_QWORD *)this + 4) = v20;
  if (v17 - 32 < a2)
    return 0;
  result = 0;
  v21 = (v20 - a2) & -v12;
  v22 = v20 - (v17 - 32);
  if (v21)
    v23 = v22 > v21;
  else
    v23 = 1;
  if (!v23)
  {
    *(_QWORD *)(v19 - 16) = v21;
    return v21;
  }
  return result;
}

void std::pmr::monotonic_buffer_resource::~monotonic_buffer_resource(std::pmr::monotonic_buffer_resource *this)
{
  *(_QWORD *)this = &off_1E2E58030;
  std::pmr::monotonic_buffer_resource::release[abi:ne180100](this);
}

{
  *(_QWORD *)this = &off_1E2E58030;
  std::pmr::monotonic_buffer_resource::release[abi:ne180100](this);
  JUMPOUT(0x194021E38);
}

BOOL std::pmr::monotonic_buffer_resource::do_is_equal(std::pmr::monotonic_buffer_resource *this, const std::pmr::memory_resource *a2)
{
  return this == a2;
}

void std::pmr::unsynchronized_pool_resource::~unsynchronized_pool_resource(std::pmr::unsynchronized_pool_resource *this)
{
  *(_QWORD *)this = &off_1E2E57FF8;
  std::pmr::unsynchronized_pool_resource::release(this);
}

{
  *(_QWORD *)this = &off_1E2E57FF8;
  std::pmr::unsynchronized_pool_resource::release(this);
  JUMPOUT(0x194021E38);
}

BOOL std::pmr::unsynchronized_pool_resource::do_is_equal(std::pmr::unsynchronized_pool_resource *this, const std::pmr::memory_resource *a2)
{
  return a2 == this;
}

void std::pmr::synchronized_pool_resource::~synchronized_pool_resource(std::pmr::synchronized_pool_resource *this)
{
  std::pmr::synchronized_pool_resource::~synchronized_pool_resource(this);
  JUMPOUT(0x194021E38);
}

{
  *(_QWORD *)this = &off_1E2E580E0;
  *((_QWORD *)this + 9) = &off_1E2E57FF8;
  std::pmr::unsynchronized_pool_resource::release((std::pmr::synchronized_pool_resource *)((char *)this + 72));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

uint64_t std::pmr::synchronized_pool_resource::do_allocate(std::pmr::synchronized_pool_resource *this, uint64_t a2, uint64_t a3)
{
  std::mutex *v6;
  uint64_t v7;

  v6 = (std::mutex *)((char *)this + 8);
  std::mutex::lock((std::mutex *)((char *)this + 8));
  v7 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*((_QWORD *)this + 9) + 16))((char *)this + 72, a2, a3);
  std::mutex::unlock(v6);
  return v7;
}

void sub_191FBFDE0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::pmr::synchronized_pool_resource::do_deallocate(std::pmr::synchronized_pool_resource *this, void *a2, uint64_t a3, uint64_t a4)
{
  std::mutex *v8;

  v8 = (std::mutex *)((char *)this + 8);
  std::mutex::lock((std::mutex *)((char *)this + 8));
  (*(void (**)(char *, void *, uint64_t, uint64_t))(*((_QWORD *)this + 9) + 24))((char *)this + 72, a2, a3, a4);
  std::mutex::unlock(v8);
}

void sub_191FBFE58(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::pmr::__new_delete_memory_resource_imp::~__new_delete_memory_resource_imp(std::pmr::__new_delete_memory_resource_imp *this)
{
  JUMPOUT(0x194021E38);
}

void *std::pmr::__new_delete_memory_resource_imp::do_allocate(std::pmr::__new_delete_memory_resource_imp *this, size_t __sz, std::align_val_t a3)
{
  if (a3 < 0x11)
    return operator new(__sz);
  else
    return operator new(__sz, a3);
}

void std::pmr::__new_delete_memory_resource_imp::do_deallocate(std::pmr::__new_delete_memory_resource_imp *this, void *__p, unint64_t a3, unint64_t a4)
{
  if (a4 >= 0x11)
    JUMPOUT(0x194021E2CLL);
  operator delete(__p);
}

BOOL std::pmr::__new_delete_memory_resource_imp::do_is_equal(std::pmr::__new_delete_memory_resource_imp *this, const std::pmr::memory_resource *a2)
{
  return a2 == this;
}

void std::pmr::__null_memory_resource_imp::~__null_memory_resource_imp(std::pmr::__null_memory_resource_imp *this)
{
  JUMPOUT(0x194021E38);
}

void std::pmr::__null_memory_resource_imp::do_allocate(std::pmr::__null_memory_resource_imp *this)
{
  std::__throw_bad_alloc();
}

BOOL std::pmr::__null_memory_resource_imp::do_is_equal(std::pmr::__null_memory_resource_imp *this, const std::pmr::memory_resource *a2)
{
  return a2 == this;
}

_QWORD *std::pmr::monotonic_buffer_resource::release[abi:ne180100](_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = result;
  if (result[1])
    result[2] = result[3];
  v2 = (_QWORD *)result[4];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v1[5] + 24))(v1[5]);
      v1[4] = v3;
      v2 = v3;
    }
    while (v3);
  }
  return result;
}

void std::__throw_bad_alloc(void)
{
  std::bad_alloc *exception;
  std::bad_alloc *v1;

  exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_alloc::bad_alloc(exception);
  __cxa_throw(v1, MEMORY[0x1E0DE5198], MEMORY[0x1E0DE5160]);
}

void std::bad_optional_access::~bad_optional_access(std::bad_optional_access *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x194021E38);
}

const char *__cdecl std::bad_optional_access::what(const std::bad_optional_access *this)
{
  return "bad_optional_access";
}

void std::experimental::bad_optional_access::~bad_optional_access(std::logic_error *this)
{
  std::logic_error::~logic_error(this);
  JUMPOUT(0x194021E38);
}

BOOL std::__is_posix_terminal(FILE *this, __sFILE *a2)
{
  int v2;

  v2 = fileno(this);
  return isatty(v2) != 0;
}

std::__rs_default *__cdecl std::__rs_default::__rs_default(std::__rs_default *this)
{
  pthread_mutex_lock(&std::__rs_mut);
  std::__rs_default::__c_ = 1;
  return this;
}

{
  pthread_mutex_lock(&std::__rs_mut);
  std::__rs_default::__c_ = 1;
  return this;
}

std::__rs_default *__cdecl std::__rs_default::__rs_default(std::__rs_default *this, const std::__rs_default *a2)
{
  ++std::__rs_default::__c_;
  return this;
}

{
  ++std::__rs_default::__c_;
  return this;
}

void std::__rs_default::~__rs_default(std::__rs_default *this)
{
  if (!--std::__rs_default::__c_)
    pthread_mutex_unlock(&std::__rs_mut);
}

std::__rs_default::result_type std::__rs_default::operator()(std::__rs_default *this)
{
  unsigned __int8 v1;
  unsigned int v3;
  uint64_t i;

  {
    v3 = 5489;
    std::__rs_default::operator()(void)::__rs_g[0] = 5489;
    for (i = 1; i != 624; ++i)
    {
      v3 = i + 1812433253 * (v3 ^ (v3 >> 30));
      std::__rs_default::operator()(void)::__rs_g[i] = v3;
    }
    qword_1EE245480 = 0;
  }
  return std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()((std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *)std::__rs_default::operator()(void)::__rs_g);
}

std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *this)
{
  size_t i;
  size_t v2;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v3;

  i = this->__i_;
  v2 = (i + 1) % 0x270;
  v3 = this->__x_[(i + 397) % 0x270] ^ ((this->__x_[v2] & 0x7FFFFFFE | this->__x_[i] & 0x80000000) >> 1) ^ ((int)(this->__x_[v2] << 31) >> 31) & 0x9908B0DF;
  this->__x_[i] = v3;
  this->__i_ = v2;
  LODWORD(i) = ((v3 ^ (v3 >> 11)) << 7) & 0x9D2C5680 ^ v3 ^ (v3 >> 11);
  return ((_DWORD)i << 15) & 0xEFC60000 ^ i ^ ((((_DWORD)i << 15) & 0xEFC60000 ^ i) >> 18);
}

uint64_t std::__rs_get()
{
  uint64_t result;

  result = pthread_mutex_lock(&std::__rs_mut);
  std::__rs_default::__c_ = 1;
  return result;
}

unint64_t std::__append_n_digits(unint64_t this, unsigned int a2, _BYTE *a3, char *a4)
{
  _BYTE *v4;
  int v5;
  unsigned int v6;
  _BYTE *v7;
  BOOL v8;

  v4 = &a3[this];
  if (a2 >> 4 < 0x271)
  {
    v5 = 0;
  }
  else
  {
    v5 = 0;
    v6 = a2;
    do
    {
      a2 = v6 / 0x2710;
      this = v6 % 0x2710 / 0x64uLL;
      v7 = &v4[-v5];
      *((_WORD *)v7 - 1) = std::__itoa::__digits_base_10[v6 % 0x2710 % 0x64];
      *((_WORD *)v7 - 2) = std::__itoa::__digits_base_10[this];
      v5 += 4;
      v8 = v6 > 0x5F5E0FF;
      v6 /= 0x2710u;
    }
    while (v8);
  }
  if (a2 >= 0x64)
  {
    *(_WORD *)&v4[-v5 - 2] = std::__itoa::__digits_base_10[(unsigned __int16)a2 % 0x64u];
    v5 |= 2u;
    a2 = (unsigned __int16)a2 / 0x64u;
  }
  if (a2 < 0xA)
    *a3 = a2 + 48;
  else
    *(_WORD *)&v4[-v5 - 2] = std::__itoa::__digits_base_10[a2];
  return this;
}

unint64_t std::__append_nine_digits(unint64_t this, _BYTE *a2, char *a3)
{
  uint64_t v3;
  char v4;
  int v5;
  char v6;
  unsigned int v7;

  if ((_DWORD)this)
  {
    v3 = 0;
    v4 = 1;
    do
    {
      v5 = this;
      v6 = v4;
      this = this / 0x2710uLL;
      v7 = v5 - 10000 * this;
      *(_WORD *)&a2[v3 + 7] = std::__itoa::__digits_base_10[v7 % 0x64];
      *(_WORD *)&a2[v3 + 5] = std::__itoa::__digits_base_10[v7 / 0x64uLL];
      v3 = -4;
      v4 = 0;
    }
    while ((v6 & 1) != 0);
    *a2 = this + 48;
  }
  else
  {
    *(_QWORD *)a2 = 0x3030303030303030;
    a2[8] = 48;
  }
  return this;
}

char *std::__d2fixed_buffered_n(std::__1 *this, char *a2, char *__len, double a4, char *a5)
{
  unsigned int v5;
  std::__1 *v6;
  int v7;
  uint64_t v8;
  std::__1 *v9;
  char v10;
  unsigned int v11;
  char v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _BOOL8 v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  char v39;
  uint64_t v40;
  char *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  _BOOL8 v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  std::__1 *v58;
  unsigned int v59;
  int v60;
  int v61;
  int v62;
  unint64_t v63;
  uint64_t v64;
  int v65;
  char *v66;
  int v67;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  std::__1 *v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int __lena;
  unsigned int __lenb;
  char *__len_4;

  v5 = __len;
  v6 = this;
  if (a4 != 0.0)
  {
    v7 = (*(_QWORD *)&a4 >> 52) - 1075;
    v8 = *(_QWORD *)&a4 & 0xFFFFFFFFFFFFFLL | 0x10000000000000;
    if (!(*(_QWORD *)&a4 >> 52))
    {
      v8 = *(_QWORD *)&a4 & 0xFFFFFFFFFFFFFLL;
      v7 = -1074;
    }
    v9 = this;
    __len_4 = a2;
    if (v7 < -52)
      goto LABEL_39;
    __lena = __len;
    v10 = 0;
    v11 = (v7 + 15) >> 4;
    if (v7 < 0)
      v11 = 0;
    v75 = v7;
    v12 = 16 * v11 - v7;
    v77 = v8;
    v13 = v8 << 8;
    v14 = std::__POW10_OFFSET[v11];
    v9 = this;
    v15 = ((7282 * (((1262608 * v11) >> 18) + 25)) >> 16) + 1;
    do
    {
      v16 = (unint64_t *)((char *)&std::__POW10_SPLIT + 24 * (v14 + v15 - 2));
      v17 = v16[1];
      v18 = (*v16 * (unsigned __int128)(unint64_t)v13) >> 64;
      v19 = v16[2];
      v20 = (v19 * (unsigned __int128)(unint64_t)v13) >> 64;
      v21 = v19 * v13;
      v22 = ((v17 * (unsigned __int128)(unint64_t)v13) >> 64) + __CFADD__(v17 * v13, v18) + v21;
      if (v22 >= v21)
        v23 = v20;
      else
        v23 = v20 + 1;
      v24 = v23 >> v12;
      v25 = (v22 >> (v12 & 0x3F)) | ((2 * v23) << (v12 & 0x3F ^ 0x3Fu));
      v26 = __CFADD__(0x89705F4136B4A597 * v25, (__PAIR128__(v24, v25) * 0x31680A88F8953031) >> 64);
      v27 = v25
          - 1000000000
          * ((unint64_t)(v26
                                            + __CFADD__(((unint64_t)v25 * (unsigned __int128)0x31680A88F8953031uLL) >> 64, 0x31680A88F8953031 * v24)+ ((__PAIR128__(0x89705F4136B4A597, 0x31680A88F8953031) * v24) >> 64)+ (((unint64_t)v25 * (unsigned __int128)0x89705F4136B4A597) >> 64)) >> 29);
      if ((v10 & 1) != 0)
      {
        if (a2 - (char *)v9 < 9)
          return a2;
        std::__append_nine_digits(v27, v9, __len);
        a2 = __len_4;
        v9 = (std::__1 *)((char *)v9 + 9);
      }
      else if ((_DWORD)v27)
      {
        if (v27 <= 0x5F5E0FF)
        {
          if (v27 <= 0x98967F)
          {
            if (v27 <= 0xF423F)
            {
              if (v27 >> 5 <= 0xC34)
              {
                if (v27 >> 4 <= 0x270)
                {
                  if (v27 <= 0x3E7)
                  {
                    if (v27 <= 9)
                      v28 = 1;
                    else
                      v28 = 2;
                    if (v27 > 0x63)
                      v28 = 3;
                  }
                  else
                  {
                    v28 = 4;
                  }
                }
                else
                {
                  v28 = 5;
                }
              }
              else
              {
                v28 = 6;
              }
            }
            else
            {
              v28 = 7;
            }
          }
          else
          {
            v28 = 8;
          }
        }
        else
        {
          v28 = 9;
        }
        if (a2 - (char *)v9 < v28)
          return a2;
        v29 = v28;
        std::__append_n_digits(v28, v27, v9, a5);
        a2 = __len_4;
        v9 = (std::__1 *)((char *)v9 + v29);
        v10 = 1;
      }
      --v15;
    }
    while (v15 > 1);
    v6 = this;
    v5 = __lena;
    v8 = v77;
    v7 = v75;
    if ((v10 & 1) == 0)
    {
LABEL_39:
      if (v9 == (std::__1 *)a2)
        return a2;
      *(_BYTE *)v9 = 48;
      v9 = (std::__1 *)((char *)v9 + 1);
    }
    if (v5)
    {
      if (v9 == (std::__1 *)a2)
        return a2;
      *(_BYTE *)v9 = 46;
      v9 = (std::__1 *)((char *)v9 + 1);
    }
    if ((v7 & 0x80000000) == 0
      || (v30 = -v7,
          v31 = v30 >> 4,
          v32 = v5 / 9,
          v33 = std::__MIN_BLOCK_2[v30 >> 4],
          v5 / 9 < v33))
    {
      if (a2 - (char *)v9 >= v5)
      {
        memset(v9, 48, v5);
        return (char *)v9 + v5;
      }
      return a2;
    }
    v76 = v7;
    v78 = v8;
    if (v31 - 68 >= 0xFFFFFFFFFFFFFFC2)
    {
      if (a2 - (char *)v9 < 9 * v33)
        return a2;
      __lenb = v5;
      memset(v9, 48, 9 * v33);
      a2 = __len_4;
      v9 = (std::__1 *)((char *)v9 + 9 * v33);
      LODWORD(v35) = v33;
    }
    else
    {
      __lenb = v5;
      LODWORD(v35) = 0;
    }
    v36 = std::__POW10_OFFSET_2[v31];
    v37 = std::__POW10_OFFSET_2[(v31 + 1)];
    v38 = v35 - v33 + v36;
    if (v38 >= v37)
    {
LABEL_70:
      v55 = __lenb - 9 * (_DWORD)v35;
      if (a2 - (char *)v9 >= v55)
      {
        memset(v9, 48, __lenb - 9 * (_DWORD)v35);
        return (char *)v9 + v55;
      }
      return a2;
    }
    v74 = v6;
    v39 = v30 & 0xF;
    v40 = v78 << 8;
    v35 = v35;
    v71 = v32;
    v72 = v32;
    v70 = 9 * v32;
    v41 = (char *)v9 + ~v70 + __lenb;
    while (1)
    {
      v42 = (unint64_t *)((char *)&std::__POW10_SPLIT_2 + 24 * v38);
      v43 = v42[1];
      v44 = (*v42 * (unsigned __int128)(unint64_t)v40) >> 64;
      v45 = v42[2];
      v46 = (v45 * (unsigned __int128)(unint64_t)v40) >> 64;
      v47 = v45 * v40;
      v48 = ((v43 * (unsigned __int128)(unint64_t)v40) >> 64) + __CFADD__(v43 * v40, v44) + v47;
      v49 = v48 >= v47 ? v46 : v46 + 1;
      v50 = v49 >> v39;
      v51 = v48 >> v39;
      v52 = v51 | ((2 * v49) << (v39 ^ 0x3Fu));
      v53 = __CFADD__(0x89705F4136B4A597 * v52, (__PAIR128__(v50, v52) * 0x31680A88F8953031) >> 64);
      v54 = v51
          - 1000000000
          * ((unint64_t)(v53
                                            + __CFADD__(((unint64_t)v52 * (unsigned __int128)0x31680A88F8953031uLL) >> 64, 0x31680A88F8953031 * v50)+ ((__PAIR128__(0x89705F4136B4A597, 0x31680A88F8953031) * v50) >> 64)+ (((unint64_t)v52 * (unsigned __int128)0x89705F4136B4A597) >> 64)) >> 29);
      if (v35 == v72)
        break;
      if (a2 - (char *)v9 < 9)
        return a2;
      std::__append_nine_digits(v54, v9, __len);
      a2 = __len_4;
      v9 = (std::__1 *)((char *)v9 + 9);
      v38 = ++v35 - v33 + v36;
      v41 += 9;
      if (v38 >= v37)
        goto LABEL_70;
    }
    v56 = __lenb - 9 * v71;
    if ((_DWORD)v56 == 9)
    {
      v57 = 0;
      v58 = v74;
    }
    else
    {
      v59 = 0;
      v58 = v74;
      do
      {
        v60 = v54;
        LODWORD(v54) = v54 / 0xA;
        ++v59;
      }
      while (v59 < 9 - (int)v56);
      v57 = v60 - 10 * v54;
      if (v57 == 5)
      {
        v61 = ~__lenb - v76;
        if (v61 >= 1 && (v61 > 0x3B || (v78 & ~(-1 << v61)) != 0))
        {
          v62 = 1;
          if ((_DWORD)v56)
          {
LABEL_84:
            if (a2 - (char *)v9 < v56)
              return a2;
            if ((_DWORD)v56 == 1)
            {
              LODWORD(v63) = 0;
            }
            else
            {
              v63 = 0;
              v64 = __lenb - v70 - 2;
              do
              {
                v65 = v54;
                LODWORD(v54) = v54 / 0x64;
                *(_WORD *)((char *)v9 + v64) = std::__itoa::__digits_base_10[(v65 - 100 * v54)];
                v63 += 2;
                v64 -= 2;
              }
              while (v63 < (v56 - 1));
            }
            if (v63 < v56)
              *((_BYTE *)v9 + (v56 + ~(_DWORD)v63)) = (v54 % 0xA) | 0x30;
            v9 = (std::__1 *)((char *)v9 + v56);
          }
        }
        else
        {
          v62 = 2;
          if ((_DWORD)v56)
            goto LABEL_84;
        }
LABEL_95:
        if (!v62)
          return (char *)v9;
        if (v9 != v58)
        {
          v66 = a2;
          while (1)
          {
            v67 = *v41;
            if (v67 == 57)
            {
              *v41 = 48;
              v62 = 1;
            }
            else
            {
              if (v67 != 46)
              {
                if (v62 == 1 || (v67 & 1) != 0)
                  *v41 = v67 + 1;
                return (char *)v9;
              }
              v66 = v41;
            }
            if (v41-- == (char *)v58)
            {
              *(_BYTE *)v58 = 49;
              if (v66 != a2)
                *(_WORD *)v66 = 11824;
              goto LABEL_107;
            }
          }
        }
        *(_BYTE *)v58 = 49;
LABEL_107:
        if (v9 != (std::__1 *)a2)
        {
          *(_BYTE *)v9 = 48;
          return (char *)v9 + 1;
        }
        return a2;
      }
    }
    v62 = v57 > 5;
    if ((_DWORD)v56)
      goto LABEL_84;
    goto LABEL_95;
  }
  if ((_DWORD)__len)
    v34 = 2;
  else
    v34 = 1;
  if (a2 - (char *)this < v34 + (int)__len)
    return a2;
  *(_BYTE *)this = 48;
  v9 = (std::__1 *)((char *)this + 1);
  if ((_DWORD)__len)
  {
    *((_BYTE *)this + 1) = 46;
    memset((char *)this + 2, 48, __len);
    return (char *)v6 + v5 + 2;
  }
  return (char *)v9;
}

char *std::__d2exp_buffered_n(std::__1 *this, char *a2, char *__len, double a4)
{
  int v4;
  char *v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  std::__1 *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _BOOL8 v25;
  unint64_t v26;
  unsigned int v27;
  int64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  char v33;
  int v34;
  char *v35;
  char *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  _BOOL8 v59;
  unsigned int v60;
  int64_t v61;
  char *v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  char v67;
  BOOL v68;
  unint64_t v69;
  BOOL v70;
  unsigned int v71;
  int v72;
  int v73;
  int v74;
  _BOOL4 v75;
  int v76;
  std::__1 *v77;
  uint64_t v78;
  unint64_t v79;
  _WORD *v80;
  int v81;
  int64_t v82;
  uint64_t v83;
  unsigned int v84;
  unsigned int v85;
  uint64_t v86;
  std::__1 *v87;
  int v88;
  char v89;
  std::__1 *v90;
  std::__1 *v91;
  int v92;
  int v93;
  unsigned int v94;
  uint64_t v95;
  char v97;
  unsigned int v98;
  uint64_t v100;
  int v102;
  int v103;
  int v104;
  char v105;
  int v106;
  unsigned int v107;

  v4 = (int)__len;
  v5 = a2;
  if (a4 == 0.0)
  {
    if ((_DWORD)__len)
      v34 = 2;
    else
      v34 = 1;
    if (a2 - (char *)this >= (int)__len + v34 + 4)
    {
      *(_BYTE *)this = 48;
      v35 = (char *)this + 1;
      if ((_DWORD)__len)
      {
        v36 = (char *)this + 2;
        *((_BYTE *)this + 1) = 46;
        memset((char *)this + 2, 48, __len);
        v35 = &v36[v4];
      }
      *(_DWORD *)v35 = 808463205;
      return v35 + 4;
    }
    return v5;
  }
  v6 = 0;
  v103 = (int)__len;
  v104 = 0;
  v7 = *(_QWORD *)&a4 & 0xFFFFFFFFFFFFFLL;
  if (*(_QWORD *)&a4 >> 52)
  {
    v7 = *(_QWORD *)&a4 & 0xFFFFFFFFFFFFFLL | 0x10000000000000;
    v8 = (*(_QWORD *)&a4 >> 52) - 1075;
  }
  else
  {
    v8 = -1074;
  }
  v9 = (_DWORD)__len + 1;
  v100 = v7;
  v10 = v7 << 8;
  v11 = this;
  v102 = v8;
  v107 = (_DWORD)__len + 1;
  if (v8 < -52)
    goto LABEL_65;
  v6 = 0;
  v104 = 0;
  v12 = (v8 + 15) >> 4;
  if (v102 < 0)
    v12 = 0;
  v106 = std::__POW10_OFFSET[v12];
  v105 = 16 * v12 - v102;
  v13 = (7282 * (((1262608 * v12) >> 18) + 25)) >> 16;
  v11 = this;
  while (1)
  {
    v14 = v13--;
    v15 = (unint64_t *)((char *)&std::__POW10_SPLIT + 24 * (v13 + v106));
    v16 = v15[1];
    v17 = (*v15 * (unsigned __int128)(unint64_t)v10) >> 64;
    v18 = v15[2];
    v19 = (v18 * (unsigned __int128)(unint64_t)v10) >> 64;
    v20 = v18 * v10;
    v21 = ((v16 * (unsigned __int128)(unint64_t)v10) >> 64) + __CFADD__(v16 * v10, v17) + v20;
    if (v21 >= v20)
      v22 = v19;
    else
      v22 = v19 + 1;
    v23 = v22 >> v105;
    v24 = (v21 >> (v105 & 0x3F)) | ((2 * v22) << (v105 & 0x3F ^ 0x3Fu));
    v25 = __CFADD__(0x89705F4136B4A597 * v24, (__PAIR128__(v23, v24) * 0x31680A88F8953031) >> 64);
    v26 = v24
        - 1000000000
        * ((unint64_t)(v25
                                          + __CFADD__(((unint64_t)v24 * (unsigned __int128)0x31680A88F8953031uLL) >> 64, 0x31680A88F8953031 * v23)+ ((__PAIR128__(0x89705F4136B4A597, 0x31680A88F8953031) * v23) >> 64)+ (((unint64_t)v24 * (unsigned __int128)0x89705F4136B4A597) >> 64)) >> 29);
    if (!v6)
    {
      if ((_DWORD)v26)
      {
        if (v26 <= 0x5F5E0FF)
        {
          v5 = a2;
          if (v26 <= 0x98967F)
          {
            if (v26 <= 0xF423F)
            {
              if (v26 >> 5 <= 0xC34)
              {
                if (v26 >> 4 <= 0x270)
                {
                  if (v26 <= 0x3E7)
                  {
                    if (v26 <= 0x63)
                    {
                      if (v26 <= 9)
                        v6 = 1;
                      else
                        v6 = 2;
                    }
                    else
                    {
                      v6 = 3;
                    }
                  }
                  else
                  {
                    v6 = 4;
                  }
                }
                else
                {
                  v6 = 5;
                }
              }
              else
              {
                v6 = 6;
              }
            }
            else
            {
              v6 = 7;
            }
          }
          else
          {
            v6 = 8;
          }
        }
        else
        {
          v6 = 9;
          v5 = a2;
        }
        v104 = 9 * v13 + v6 - 1;
        if (v6 > v9)
        {
          v39 = 0;
          goto LABEL_124;
        }
        if (v103)
        {
          v28 = v6 + 1;
          if (v5 - (char *)v11 < v28)
            return v5;
          if (v26 >> 4 < 0x271)
          {
            v29 = 0;
          }
          else
          {
            LODWORD(v29) = 0;
            do
            {
              v30 = v26;
              LODWORD(v26) = v26 / 0x2710;
              v31 = v30 - 10000 * v26;
              v32 = (uint64_t)v11 + v6 - v29 + 1;
              *(_WORD *)(v32 - 2) = std::__itoa::__digits_base_10[v31 % 0x64];
              *(_WORD *)(v32 - 4) = std::__itoa::__digits_base_10[v31 / 0x64uLL];
              v29 = (v29 + 4);
            }
            while (v30 > 0x5F5E0FF);
          }
          if (v26 >= 0x64)
          {
            *(_WORD *)((char *)v11 + v6 + ~v29) = std::__itoa::__digits_base_10[(unsigned __int16)v26 % 0x64u];
            LODWORD(v26) = (unsigned __int16)v26 / 0x64u;
          }
          if (v26 < 0xA)
          {
            *((_BYTE *)v11 + 1) = 46;
            v33 = v26 + 48;
          }
          else
          {
            *((_BYTE *)v11 + 2) = *((_BYTE *)std::__itoa::__digits_base_10 + (2 * v26) + 1);
            *((_BYTE *)v11 + 1) = 46;
            v33 = std::__itoa::__digits_base_10[v26];
          }
          *(_BYTE *)v11 = v33;
          v11 = (std::__1 *)((char *)v11 + v28);
        }
        else
        {
          if (v11 == (std::__1 *)v5)
            return v5;
          *(_BYTE *)v11 = v24 + 48;
          v11 = (std::__1 *)((char *)v11 + 1);
        }
      }
      else
      {
        v6 = 0;
      }
      goto LABEL_19;
    }
    v27 = v6 + 9;
    if (v6 + 9 > v9)
      break;
    v5 = a2;
    if (a2 - (char *)v11 < 9)
      return v5;
    std::__append_nine_digits(v26, v11, __len);
    v9 = v107;
    v11 = (std::__1 *)((char *)v11 + 9);
    v6 = v27;
LABEL_19:
    if (v14 <= 1)
    {
      if ((v102 & 0x80000000) == 0)
      {
LABEL_64:
        v37 = 0;
        LODWORD(v26) = 0;
        v38 = v9 - v6;
        v39 = v6;
        v5 = a2;
        goto LABEL_133;
      }
LABEL_65:
      v40 = -v102;
      v41 = std::__MIN_BLOCK_2[v40 >> 4];
      v42 = std::__POW10_OFFSET_2[v40 >> 4];
      v43 = std::__POW10_OFFSET_2[(-v102 >> 4) + 1];
      v44 = -(char)v102 & 0xF;
      if (v41 <= 0xC7)
        v45 = 199;
      else
        v45 = std::__MIN_BLOCK_2[v40 >> 4];
      v46 = std::__MIN_BLOCK_2[v40 >> 4];
      while (2)
      {
        v47 = v46 - v41 + v42;
        if (v47 >= v43)
        {
          v26 = 0;
          if (!v6)
          {
            v6 = 0;
            goto LABEL_113;
          }
        }
        else
        {
          v48 = (unint64_t *)((char *)&std::__POW10_SPLIT_2 + 24 * v47);
          v49 = v48[1];
          v50 = (*v48 * (unsigned __int128)(unint64_t)v10) >> 64;
          v51 = v48[2];
          v52 = (v51 * (unsigned __int128)(unint64_t)v10) >> 64;
          v53 = v51 * v10;
          v54 = ((v49 * (unsigned __int128)(unint64_t)v10) >> 64) + __CFADD__(v49 * v10, v50) + v53;
          if (v54 >= v53)
            v55 = v52;
          else
            v55 = v52 + 1;
          v56 = v55 >> v44;
          v57 = v54 >> v44;
          v58 = v57 | ((2 * v55) << (v44 ^ 0x3Fu));
          v59 = __CFADD__(0x89705F4136B4A597 * v58, (__PAIR128__(v56, v58) * 0x31680A88F8953031) >> 64);
          v26 = v57
              - 1000000000
              * ((unint64_t)(v59
                                                + __CFADD__(((unint64_t)v58 * (unsigned __int128)0x31680A88F8953031uLL) >> 64, 0x31680A88F8953031 * v56)+ ((__PAIR128__(0x89705F4136B4A597, 0x31680A88F8953031) * v56) >> 64)+ (((unint64_t)v58 * (unsigned __int128)0x89705F4136B4A597) >> 64)) >> 29);
          if (!v6)
          {
            if ((_DWORD)v26)
            {
              if (v26 > 0x5F5E0FF)
              {
                v6 = 9;
                goto LABEL_96;
              }
              if (v26 > 0x98967F)
              {
                v6 = 8;
                goto LABEL_96;
              }
              if (v26 > 0xF423F)
              {
                v6 = 7;
                goto LABEL_96;
              }
              if (v26 >> 5 > 0xC34)
              {
                v6 = 6;
                goto LABEL_96;
              }
              if (v26 >> 4 > 0x270)
              {
                v6 = 5;
                goto LABEL_96;
              }
              if (v26 <= 0x3E7)
              {
                v5 = a2;
                if (v26 <= 0x63)
                {
                  if (v26 <= 9)
                    v6 = 1;
                  else
                    v6 = 2;
                }
                else
                {
                  v6 = 3;
                }
              }
              else
              {
                v6 = 4;
LABEL_96:
                v5 = a2;
              }
              v104 = 9 * ~(_DWORD)v46 + v6 - 1;
              if (v6 > v9)
              {
                v39 = 0;
                goto LABEL_124;
              }
              if (v103)
              {
                v61 = v6 + 1;
                if (v5 - (char *)v11 < v61)
                  return v5;
                v62 = (char *)v11 + v6;
                if (v26 >> 4 < 0x271)
                {
                  v63 = 0;
                }
                else
                {
                  LODWORD(v63) = 0;
                  do
                  {
                    v64 = v26;
                    LODWORD(v26) = v26 / 0x2710;
                    v65 = v64 - 10000 * v26;
                    v66 = (uint64_t)&v62[-v63 + 1];
                    *(_WORD *)(v66 - 2) = std::__itoa::__digits_base_10[v65 % 0x64];
                    *(_WORD *)(v66 - 4) = std::__itoa::__digits_base_10[v65 / 0x64uLL];
                    v63 = (v63 + 4);
                  }
                  while (v64 > 0x5F5E0FF);
                }
                if (v26 >= 0x64)
                {
                  *(_WORD *)&v62[~v63] = std::__itoa::__digits_base_10[(unsigned __int16)v26 % 0x64u];
                  LODWORD(v26) = (unsigned __int16)v26 / 0x64u;
                }
                if (v26 < 0xA)
                {
                  *((_BYTE *)v11 + 1) = 46;
                  v67 = v26 + 48;
                }
                else
                {
                  *((_BYTE *)v11 + 2) = *((_BYTE *)std::__itoa::__digits_base_10 + (2 * v26) + 1);
                  *((_BYTE *)v11 + 1) = 46;
                  v67 = std::__itoa::__digits_base_10[v26];
                }
                *(_BYTE *)v11 = v67;
                v11 = (std::__1 *)((char *)v11 + v61);
              }
              else
              {
                if (v11 == (std::__1 *)v5)
                  return v5;
                *(_BYTE *)v11 = v58 + 48;
                v11 = (std::__1 *)((char *)v11 + 1);
              }
            }
            else
            {
              v6 = 0;
            }
LABEL_113:
            v68 = v46++ == v45;
            if (v68)
              goto LABEL_64;
            continue;
          }
        }
        break;
      }
      v60 = v6 + 9;
      if (v6 + 9 > v9)
      {
        v39 = v6;
        v6 = 9;
        goto LABEL_123;
      }
      v5 = a2;
      if (a2 - (char *)v11 < 9)
        return v5;
      std::__append_nine_digits(v26, v11, (char *)0xFFFFD8F0);
      v9 = v107;
      v11 = (std::__1 *)((char *)v11 + 9);
      v6 = v60;
      goto LABEL_113;
    }
  }
  v39 = v6;
  v6 = 9;
LABEL_123:
  v5 = a2;
LABEL_124:
  v69 = v100;
  v38 = v9 - v39;
  v70 = v6 >= v9 - v39;
  v71 = v6 - (v9 - v39);
  if (v71 == 0 || !v70)
  {
    v37 = 0;
    goto LABEL_133;
  }
  if (v71 <= 1)
    v71 = 1;
  do
  {
    v72 = v26;
    LODWORD(v26) = v26 / 0xA;
    --v71;
  }
  while (v71);
  v37 = v72 - 10 * v26;
  if (v37 == 5)
  {
    v73 = v9 - v104;
    v74 = -v102 - (v9 - v104);
    if (v74 < 1)
    {
      v75 = 1;
      goto LABEL_188;
    }
    if (v74 > 0x3B)
      goto LABEL_198;
    v75 = (v100 & ~(-1 << v74)) == 0;
LABEL_188:
    if (v73 < 0 && v75)
    {
      v98 = -1;
      do
      {
        ++v98;
        v68 = v69 % 5 == 0;
        v69 /= 5uLL;
      }
      while (v68);
      if (v98 >= v104 - v9)
        goto LABEL_193;
LABEL_198:
      v76 = 1;
    }
    else
    {
      if (v73 < 0 || !v75)
        goto LABEL_198;
LABEL_193:
      v76 = 2;
    }
  }
  else
  {
LABEL_133:
    v76 = v37 > 5;
  }
  if (!v39)
  {
    v77 = this;
    if (v103)
    {
      v82 = v38 + 1;
      if (v5 - (char *)v11 < v82)
        return v5;
      if (v26 >> 4 < 0x271)
      {
        v83 = 0;
      }
      else
      {
        LODWORD(v83) = 0;
        do
        {
          v84 = v26;
          LODWORD(v26) = v26 / 0x2710;
          v85 = v84 - 10000 * v26;
          v86 = (uint64_t)v11 + v38 - v83 + 1;
          *(_WORD *)(v86 - 2) = std::__itoa::__digits_base_10[v85 % 0x64];
          *(_WORD *)(v86 - 4) = std::__itoa::__digits_base_10[v85 / 0x64uLL];
          v83 = (v83 + 4);
        }
        while (v84 > 0x5F5E0FF);
      }
      if (v26 >= 0x64)
      {
        *(_WORD *)((char *)v11 + v38 + ~v83) = std::__itoa::__digits_base_10[(unsigned __int16)v26 % 0x64u];
        LODWORD(v26) = (unsigned __int16)v26 / 0x64u;
      }
      if (v26 < 0xA)
      {
        *((_BYTE *)v11 + 1) = 46;
        v89 = v26 + 48;
      }
      else
      {
        *((_BYTE *)v11 + 2) = *((_BYTE *)std::__itoa::__digits_base_10 + (2 * v26) + 1);
        *((_BYTE *)v11 + 1) = 46;
        v89 = std::__itoa::__digits_base_10[v26];
      }
      v88 = v104;
      *(_BYTE *)v11 = v89;
      v87 = (std::__1 *)((char *)v11 + v82);
      if (!v76)
      {
LABEL_171:
        if (v88 >= 0)
          v94 = v88;
        else
          v94 = -v88;
        v95 = 4;
        if (v94 > 0x63)
          v95 = 5;
        if (v5 - (char *)v87 >= v95)
        {
          if (v88 >= 0)
            v97 = 43;
          else
            v97 = 45;
          *(_BYTE *)v87 = 101;
          *((_BYTE *)v87 + 1) = v97;
          if (v94 < 0x64)
          {
            *((_WORD *)v87 + 1) = std::__itoa::__digits_base_10[v94];
            return (char *)v87 + 4;
          }
          else
          {
            *((_WORD *)v87 + 1) = std::__itoa::__digits_base_10[v94 / 0xAuLL];
            *((_BYTE *)v87 + 4) = (v94 % 0xA) | 0x30;
            return (char *)v87 + 5;
          }
        }
        return v5;
      }
    }
    else
    {
      if (v11 == (std::__1 *)v5)
        return v5;
      *(_BYTE *)v11 = v26 + 48;
      v87 = (std::__1 *)((char *)v11 + 1);
LABEL_154:
      v88 = v104;
      if (!v76)
        goto LABEL_171;
    }
    if (v87 == v77)
    {
LABEL_170:
      *(_BYTE *)v77 = 49;
      ++v88;
      goto LABEL_171;
    }
    v90 = v87;
    v91 = v87;
    while (1)
    {
      v93 = *((unsigned __int8 *)v91 - 1);
      v91 = (std::__1 *)((char *)v91 - 1);
      v92 = v93;
      if (v93 != 46)
      {
        if (v92 != 57)
        {
          if (v76 == 1 || (v92 & 1) != 0)
            *((_BYTE *)v90 - 1) = v92 + 1;
          goto LABEL_171;
        }
        *(_BYTE *)v91 = 48;
        v76 = 1;
      }
      v90 = v91;
      if (v91 == v77)
        goto LABEL_170;
    }
  }
  v77 = this;
  if (v5 - (char *)v11 >= v38)
  {
    v78 = v38;
    if ((_DWORD)v26)
    {
      if (v38 == 1)
      {
        LODWORD(v79) = 0;
      }
      else
      {
        v79 = 0;
        v80 = (_WORD *)((char *)v11 + v38 - 2);
        do
        {
          v81 = v26;
          LODWORD(v26) = v26 / 0x64;
          *v80-- = std::__itoa::__digits_base_10[(v81 - 100 * v26)];
          v79 += 2;
        }
        while (v79 < v38 - 1);
      }
      if (v79 < v38)
        *((_BYTE *)v11 + v38 + ~(_DWORD)v79) = (v26 % 0xA) | 0x30;
    }
    else
    {
      memset(v11, 48, v38);
      v5 = a2;
    }
    v87 = (std::__1 *)((char *)v11 + v78);
    goto LABEL_154;
  }
  return v5;
}

char *std::__d2s_buffered_n(std::__1 *this, std::__1 *a2, int a3, char *a4, double a5)
{
  char *v7;
  std::__1 *v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v18;

  v7 = (char *)a2;
  v8 = this;
  if (a5 == 0.0)
  {
    if (a3 == 1)
    {
      if (a2 - this >= 5)
      {
        *((_BYTE *)this + 4) = 48;
        *(_DWORD *)this = 808150320;
        return (char *)this + 5;
      }
    }
    else
    {
      if (this != a2)
      {
        *(_BYTE *)this = 48;
        return (char *)this + 1;
      }
      return (char *)v8;
    }
  }
  else
  {
    v9 = *(_QWORD *)&a5 >> 52;
    if (a3 == 2 && v9 >= 0x434)
      return std::__d2fixed_buffered_n(this, v7, 0, a5, a4);
    v11 = *(_QWORD *)&a5 & 0xFFFFFFFFFFFFFLL;
    if ((v9 - 1076) < 0xFFFFFFCB
      || (v12 = v11 | 0x10000000000000,
          v13 = 51 - v9,
          ((v11 | 0x10000000000000) & ~(-1 << (51 - v9))) != 0))
    {
      v14 = std::__d2d[abi:ne180100](v11, v9);
      v16 = v15;
    }
    else
    {
      v14 = v12 >> v13;
      v18 = (v12 >> v13) / 0xA;
      if ((v12 >> v13) % 0xA)
      {
        v16 = 0;
      }
      else
      {
        v16 = 0;
        do
        {
          v14 = v18;
          v16 = (v16 + 1) | v16 & 0xFFFFFFFF00000000;
          v18 /= 0xAuLL;
        }
        while (!(-10 * (_DWORD)v18 + (_DWORD)v14));
      }
    }
    return std::__to_chars[abi:ne180100](v8, v7, v14, (char *)v16, a3, a5);
  }
  return v7;
}

unint64_t std::__d2d[abi:ne180100](uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  BOOL v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  _BOOL4 v47;
  int v48;
  unint64_t v49;
  int v50;
  unsigned __int8 v51;
  unint64_t v52;
  unint64_t v53;
  int v54;
  unsigned __int8 v55;
  unint64_t v56;
  BOOL v57;
  unsigned __int8 v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  int v62;
  unint64_t v63;
  unsigned int v64;
  unsigned int v66;

  v2 = a1 | 0x10000000000000;
  if (a2)
  {
    v3 = a2 - 1077;
  }
  else
  {
    v2 = a1;
    v3 = -1076;
  }
  v4 = 4 * v2;
  if (a1)
    v5 = 0;
  else
    v5 = a2 >= 2;
  v6 = !v5;
  if ((v3 & 0x80000000) != 0)
  {
    v30 = ((-732923 * v3) >> 20) - (v3 != -1);
    v31 = v30 - ((32337073 * (v30 + v3)) >> 19) + 56;
    v32 = (unint64_t *)((char *)&std::__DOUBLE_POW5_SPLIT - 16 * v30 + -16 * v3);
    v34 = *v32;
    v33 = v32[1];
    if (__CFADD__((*v32 * (unsigned __int128)(v4 | 2)) >> 64, v33 * (v4 | 2)))
      v35 = ((v33 * (unsigned __int128)(v4 | 2)) >> 64) + 1;
    else
      v35 = (v33 * (unsigned __int128)(v4 | 2)) >> 64;
    v36 = v31 & 0x3F ^ 0x3F;
    v15 = ((unint64_t)((__PAIR128__(v33, v34) * (v4 | 2)) >> 64) >> v31) | ((2 * v35) << v36);
    v37 = v4 + ~v6;
    v38 = v33 * v37;
    v39 = (v33 * (unsigned __int128)v37) >> 64;
    v40 = (v34 * (unsigned __int128)v37) >> 64;
    v5 = __CFADD__(v40, v38);
    v41 = v40 + v38;
    if (v5)
      v42 = v39 + 1;
    else
      v42 = v39;
    v22 = (v41 >> v31) | ((2 * v42) << v36);
    v43 = v33 * v4;
    v44 = (v33 * (unsigned __int128)v4) >> 64;
    v45 = (v34 * (unsigned __int128)v4) >> 64;
    v5 = __CFADD__(v45, v43);
    v46 = v45 + v43;
    if (v5)
      ++v44;
    v27 = (v46 >> v31) | ((2 * v44) << v36);
    if (v30 <= 1)
    {
      if ((v2 & 1) != 0)
        LODWORD(v6) = 0;
      v15 -= v2 & 1;
      v29 = 1;
      goto LABEL_42;
    }
    if (v30 <= 0x3E)
    {
      LODWORD(v6) = 0;
      v29 = (v4 & ~(-1 << (v30 - 1))) == 0;
      goto LABEL_38;
    }
LABEL_37:
    v29 = 0;
    LODWORD(v6) = 0;
    goto LABEL_38;
  }
  v7 = ((78913 * v3) >> 18) - (v3 > 3);
  v8 = v7 - v3 + ((1217359 * v7) >> 19) + 58;
  v9 = (unint64_t *)((char *)&std::__DOUBLE_POW5_INV_SPLIT + 16 * v7);
  v10 = v4 | 2;
  v12 = *v9;
  v11 = v9[1];
  v13 = (v11 * (unsigned __int128)(v4 | 2)) >> 64;
  if (__CFADD__((*v9 * (unsigned __int128)(v4 | 2)) >> 64, v11 * (v4 | 2)))
    ++v13;
  v14 = v8 & 0x3F ^ 0x3F;
  v15 = ((unint64_t)((__PAIR128__(v11, v12) * (v4 | 2)) >> 64) >> v8) | ((2 * v13) << v14);
  v16 = v4 + ~v6;
  v17 = v11 * v16;
  v18 = (v11 * (unsigned __int128)v16) >> 64;
  v19 = (v12 * (unsigned __int128)v16) >> 64;
  v5 = __CFADD__(v19, v17);
  v20 = v19 + v17;
  if (v5)
    v21 = v18 + 1;
  else
    v21 = v18;
  v22 = (v20 >> v8) | ((2 * v21) << v14);
  v23 = v11 * v4;
  v24 = (v11 * (unsigned __int128)v4) >> 64;
  v25 = (v12 * (unsigned __int128)v4) >> 64;
  v5 = __CFADD__(v25, v23);
  v26 = v25 + v23;
  if (v5)
    ++v24;
  v27 = (v26 >> v8) | ((2 * v24) << v14);
  if (v7 > 0x15)
    goto LABEL_37;
  if (v4 % 5)
  {
    if ((v2 & 1) != 0)
    {
      v66 = -1;
      do
      {
        ++v66;
        v57 = v10 % 5 == 0;
        v10 /= 5uLL;
      }
      while (v57);
      v29 = 0;
      LODWORD(v6) = 0;
      v15 -= v66 >= v7;
    }
    else
    {
      v63 = ~v6 + v4;
      v64 = -1;
      do
      {
        ++v64;
        v57 = v63 % 5 == 0;
        v63 /= 5uLL;
      }
      while (v57);
      v29 = 0;
      LODWORD(v6) = v64 >= v7;
    }
  }
  else
  {
    v28 = -1;
    do
    {
      ++v28;
      v57 = v4 % 5 == 0;
      v4 /= 5uLL;
    }
    while (v57);
    LODWORD(v6) = 0;
    v29 = v28 >= v7;
  }
LABEL_38:
  if ((v6 & 1) != 0 || v29)
  {
LABEL_42:
    v49 = v15 / 0xA;
    if (v15 / 0xA <= v22 / 0xA)
    {
      v55 = 0;
      v50 = 0;
    }
    else
    {
      v50 = 0;
      v51 = 0;
      v52 = v22 / 0xA;
      v53 = v27;
      v54 = v22;
      do
      {
        v22 = v52;
        v27 = v53 / 0xA;
        v55 = v53 % 0xA;
        LODWORD(v6) = v6 & (-10 * (_DWORD)v52 + v54 == 0);
        v29 = (v51 == 0) & v29;
        ++v50;
        v49 /= 0xAuLL;
        v52 /= 0xAuLL;
        v53 /= 0xAuLL;
        v51 = v55;
        v54 = v22;
      }
      while (v49 > v22 / 0xA);
    }
    v56 = v22 / 0xA;
    if ((_DWORD)v6)
      v57 = v22 % 0xA == 0;
    else
      v57 = 0;
    if (v57)
    {
      do
      {
        v22 = v56;
        v59 = v27 / 0xA;
        v58 = v27 % 0xA;
        v29 = (v55 == 0) & v29;
        ++v50;
        v56 /= 0xAuLL;
        v27 /= 0xAuLL;
        v55 = v58;
      }
      while (!(-10 * (_DWORD)v56 + (_DWORD)v22));
    }
    else
    {
      v58 = v55;
      v59 = v27;
    }
    v47 = (v59 == v22) & (v2 | v6 ^ 1) | ((v58 != 5) | ~v29 | v59) & (v58 > 4u);
    return v59 + v47;
  }
  if (v15 / 0x64 <= v22 / 0x64)
  {
    v47 = 0;
    v48 = 0;
  }
  else
  {
    v22 /= 0x64uLL;
    v47 = (v27 % 0x64) > 0x31;
    v48 = 2;
    v15 /= 0x64uLL;
    v27 /= 0x64uLL;
  }
  v60 = v15 / 0xA;
  if (v60 > v22 / 0xA)
  {
    v61 = v22 / 0xA;
    do
    {
      v62 = v27;
      v22 = v61;
      v27 /= 0xAuLL;
      ++v48;
      v60 /= 0xAuLL;
      v61 /= 0xAuLL;
    }
    while (v60 > v61);
    v47 = (v62 - 10 * v27) > 4;
  }
  if (v27 == v22)
    v47 = 1;
  v59 = v27;
  return v59 + v47;
}

char *std::__to_chars[abi:ne180100](std::__1 *this, char *a2, unint64_t a3, char *a4, int a5, double a6)
{
  char *v6;
  unsigned int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  char *v20;
  unsigned int v21;
  char *v22;
  BOOL v23;
  uint64_t v24;
  unsigned int v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  _WORD *v31;
  int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  __int16 v36;
  char *v37;
  size_t v38;

  v6 = a2;
  if (a3 <= 0x2386F26FC0FFFFLL)
  {
    if (a3 <= 0x38D7EA4C67FFFLL)
    {
      if (a3 <= 0x5AF3107A3FFFLL)
      {
        if (a3 <= 0x9184E729FFFLL)
        {
          if (a3 <= 0xE8D4A50FFFLL)
          {
            if (a3 <= 0x174876E7FFLL)
            {
              if (a3 <= 0x2540BE3FFLL)
              {
                if (a3 <= 0x3B9AC9FF)
                {
                  if (a3 <= 0x5F5E0FF)
                  {
                    if (a3 <= 0x98967F)
                    {
                      if (a3 <= 0xF423F)
                      {
                        if (a3 >> 5 <= 0xC34)
                        {
                          if (a3 >> 4 <= 0x270)
                          {
                            if (a3 <= 0x3E7)
                            {
                              if (a3 <= 0x63)
                              {
                                if (a3 <= 9)
                                  v8 = 1;
                                else
                                  v8 = 2;
                              }
                              else
                              {
                                v8 = 3;
                              }
                            }
                            else
                            {
                              v8 = 4;
                            }
                          }
                          else
                          {
                            v8 = 5;
                          }
                        }
                        else
                        {
                          v8 = 6;
                        }
                      }
                      else
                      {
                        v8 = 7;
                      }
                    }
                    else
                    {
                      v8 = 8;
                    }
                  }
                  else
                  {
                    v8 = 9;
                  }
                }
                else
                {
                  v8 = 10;
                }
              }
              else
              {
                v8 = 11;
              }
            }
            else
            {
              v8 = 12;
            }
          }
          else
          {
            v8 = 13;
          }
        }
        else
        {
          v8 = 14;
        }
      }
      else
      {
        v8 = 15;
      }
    }
    else
    {
      v8 = 16;
    }
  }
  else
  {
    v8 = 17;
  }
  v9 = v8 + (_DWORD)a4;
  if (a5 == 3)
  {
    if ((v9 + 3) <= 9)
      goto LABEL_45;
  }
  else if (a5 == 2
         || !a5
         && (v8 == 1 ? (v10 = 4) : (v10 = 5), v8 != 1 ? (v11 = -3 - v8) : (v11 = -3), v11 <= (int)a4 && v10 >= (int)a4))
  {
LABEL_45:
    if ((a4 & 0x80000000) != 0)
    {
      LODWORD(v12) = 2 - (_DWORD)a4;
      if (v9 >= 1)
        LODWORD(v12) = v8 + 1;
    }
    else
    {
      LODWORD(v12) = v8 + (_DWORD)a4;
      if (a3 == 1)
        LODWORD(v12) = v9
                     - std::__to_chars[abi:ne180100](char *,char *,std::__floating_decimal_64,std::chars_format,double)::_Adjustment[a4];
    }
    if (a2 - (char *)this < v12)
      return v6;
    v24 = v12;
    v12 = v12;
    if ((int)a4 >= 1)
    {
      if (a4 > 0x16)
        return std::__d2fixed_buffered_n(this, a2, 0, a6, a4);
      if ((_DWORD)a3)
        LOBYTE(v25) = __clz(__rbit32(a3));
      else
        v25 = __clz(__rbit32(HIDWORD(a3))) | 0x20;
      if (a3 >> v25 > std::__to_chars[abi:ne180100](char *,char *,std::__floating_decimal_64,std::chars_format,double)::_Max_shifted_mantissa[a4])
        return std::__d2fixed_buffered_n(this, a2, 0, a6, a4);
      v12 = v8;
    }
    v31 = (_WORD *)((char *)this + v12);
    if (HIDWORD(a3))
    {
      v32 = a3 % 0x5F5E100 % 0x2710;
      v33 = a3 % 0x5F5E100 / 0x2710 - 10000 * ((429497 * (a3 % 0x5F5E100 / 0x2710)) >> 32);
      v34 = (unsigned __int16)v32 / 0x64u;
      LOWORD(v32) = std::__itoa::__digits_base_10[(unsigned __int16)v32 % 0x64u];
      *(v31 - 4) = std::__itoa::__digits_base_10[(5243 * v33) >> 19];
      v31 -= 4;
      v31[3] = v32;
      v31[2] = std::__itoa::__digits_base_10[v34];
      v31[1] = std::__itoa::__digits_base_10[(unsigned __int16)(v33
                                                              - 100
                                                              * ((unsigned __int16)((5243 * v33) >> 16) >> 3))];
      a3 /= 0x5F5E100uLL;
    }
    if (a3 >> 4 < 0x271)
    {
      v35 = a3;
    }
    else
    {
      do
      {
        v35 = a3 / 0x2710;
        v36 = std::__itoa::__digits_base_10[a3 % 0x2710 % 0x64];
        *(v31 - 2) = std::__itoa::__digits_base_10[a3 % 0x2710 / 0x64uLL];
        v31 -= 2;
        v31[1] = v36;
        v23 = a3 > 0x5F5E0FF;
        LODWORD(a3) = a3 / 0x2710;
      }
      while (v23);
    }
    if (v35 >= 0x64)
    {
      *--v31 = std::__itoa::__digits_base_10[(unsigned __int16)v35 % 0x64u];
      v35 = (unsigned __int16)v35 / 0x64u;
    }
    if (v35 < 0xA)
      *((_BYTE *)v31 - 1) = v35 + 48;
    else
      *(v31 - 1) = std::__itoa::__digits_base_10[v35];
    if ((int)a4 < 1)
    {
      if (!(_DWORD)a4)
        return (char *)this + v24;
      if (v9 >= 1)
      {
        memmove(this, (char *)this + 1, v8 + a4);
        *((_BYTE *)this + v9) = 46;
        return (char *)this + v24;
      }
      *(_WORD *)this = 11824;
      v37 = (char *)this + 2;
      v38 = -v9;
    }
    else
    {
      v37 = (char *)this + v8;
      v38 = a4;
    }
    memset(v37, 48, v38);
    return (char *)this + v24;
  }
  if (v8 <= 1)
    v13 = v8;
  else
    v13 = v8 + 1;
  if ((v9 + 98) < 0xC7)
    v14 = 4;
  else
    v14 = 5;
  v15 = v13 + v14;
  if (a2 - (char *)this >= v15)
  {
    v16 = HIDWORD(a3);
    if (HIDWORD(a3))
    {
      v17 = a3 % 0x5F5E100;
      v18 = v17 / 0x2710;
      v17 %= 0x2710u;
      v19 = v18 - 10000 * ((429497 * (unint64_t)v18) >> 32);
      v20 = (char *)this + v8;
      *(_WORD *)(v20 - 1) = std::__itoa::__digits_base_10[(unsigned __int16)v17 % 0x64u];
      *(_WORD *)(v20 - 3) = std::__itoa::__digits_base_10[(unsigned __int16)v17 / 0x64u];
      *(_WORD *)(v20 - 5) = std::__itoa::__digits_base_10[(unsigned __int16)(v19
                                                                           - 100
                                                                           * ((unsigned __int16)((5243 * v19) >> 16) >> 3))];
      *(_WORD *)(v20 - 7) = std::__itoa::__digits_base_10[(5243 * v19) >> 19];
      LODWORD(v16) = 8;
      a3 /= 0x5F5E100uLL;
    }
    if (a3 >> 4 < 0x271)
    {
      v21 = a3;
    }
    else
    {
      do
      {
        v21 = a3 / 0x2710;
        v22 = (char *)this + v8 - v16;
        *(_WORD *)(v22 - 1) = std::__itoa::__digits_base_10[a3 % 0x2710 % 0x64];
        *(_WORD *)(v22 - 3) = std::__itoa::__digits_base_10[a3 % 0x2710 / 0x64uLL];
        LODWORD(v16) = v16 + 4;
        v23 = a3 > 0x5F5E0FF;
        LODWORD(a3) = a3 / 0x2710;
      }
      while (v23);
    }
    if (v21 >= 0x64)
    {
      *(_WORD *)((char *)this + v8 + ~(unint64_t)v16) = std::__itoa::__digits_base_10[(unsigned __int16)v21 % 0x64u];
      v21 = (unsigned __int16)v21 / 0x64u;
    }
    if (v21 < 0xA)
    {
      v26 = v21 + 48;
    }
    else
    {
      *((_BYTE *)this + 2) = HIBYTE(std::__itoa::__digits_base_10[v21]);
      v26 = std::__itoa::__digits_base_10[v21];
    }
    *(_BYTE *)this = v26;
    if (v8 < 2)
    {
      v27 = 1;
    }
    else
    {
      *((_BYTE *)this + 1) = 46;
      v27 = v8 + 1;
    }
    v28 = v27 + 1;
    *((_BYTE *)this + v27) = 101;
    if (v9 <= 0)
    {
      *((_BYTE *)this + v28) = 45;
      v29 = 1 - v9;
    }
    else
    {
      v29 = v9 - 1;
      *((_BYTE *)this + v28) = 43;
    }
    v30 = v27 + 2;
    if (v29 < 0x64)
    {
      *(_WORD *)((char *)this + v30) = std::__itoa::__digits_base_10[v29];
    }
    else
    {
      *(_WORD *)((char *)this + v30) = std::__itoa::__digits_base_10[v29 / 0xAuLL];
      *((_BYTE *)this + v27 + 4) = (v29 % 0xA) | 0x30;
    }
    return (char *)this + v15;
  }
  return v6;
}

_BYTE *std::__f2s_buffered_n(_BYTE *a1, _BYTE *a2, int a3, float a4)
{
  _BYTE *v5;
  _BYTE *v6;
  int v7;
  unsigned int v8;
  unint64_t v10;

  v5 = a2;
  v6 = a1;
  if (a4 == 0.0)
  {
    if (a3 == 1)
    {
      if (a2 - a1 >= 5)
      {
        a1[4] = 48;
        *(_DWORD *)a1 = 808150320;
        return a1 + 5;
      }
    }
    else
    {
      if (a1 != a2)
      {
        *a1 = 48;
        return a1 + 1;
      }
      return v6;
    }
  }
  else
  {
    v7 = LODWORD(a4) & 0x7FFFFF;
    v8 = LODWORD(a4) >> 23;
    if (a3 == 2 && v8 >= 0x97)
      return std::_Large_integer_to_chars[abi:ne180100](a1, a2, v7 | 0x800000u, v8 - 150);
    v10 = std::__f2d[abi:ne180100](LODWORD(a4) & 0x7FFFFF, LODWORD(a4) >> 23);
    return std::__to_chars[abi:ne180100](v6, v5, v10, a3, v7, v8);
  }
  return v5;
}

_BYTE *std::_Large_integer_to_chars[abi:ne180100](_BYTE *a1, _BYTE *a2, unsigned int a3, unint64_t a4)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  unsigned int v21[4];
  unsigned int v22[2];
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)v22 = 0;
  v23 = 0;
  v6 = (a4 + 55) >> 5;
  v7 = v6 - 1;
  v8 = a3 << a4;
  if ((a4 & 0x1F) >= 9)
  {
    v22[v6 - 2] = v8;
    v8 = a3 >> -(a4 & 0x1F);
  }
  v22[v7] = v8;
  if (v6 == 1)
  {
    LODWORD(v9) = 0;
  }
  else
  {
    v9 = 0;
    v10 = &v22[v6 - 2];
    do
    {
      v11 = v9;
      do
      {
        v12 = 0;
        v13 = v22[v7];
        v14 = v13 % 0x3B9ACA00;
        v22[v7] = v13 / 0x3B9ACA00;
        v15 = v10;
        do
        {
          v16 = *v15;
          a4 = (v16 | (unint64_t)(v14 << 32)) / 0x3B9ACA00;
          v14 = (v16 - 1000000000 * a4);
          *v15-- = a4;
          ++v12;
        }
        while (v7 != v12);
        v9 = v11 + 1;
        v21[v11++] = v14;
      }
      while (v13 >= 0x3B9ACA00);
      --v10;
      --v7;
    }
    while (v7);
  }
  if (v22[0] <= 0x3B9AC9FF)
  {
    if (v22[0] <= 0x5F5E0FF)
    {
      if (v22[0] <= 0x98967F)
      {
        if (v22[0] <= 0xF423F)
        {
          if (v22[0] >> 5 <= 0xC34)
          {
            if (v22[0] >> 4 <= 0x270)
            {
              if (v22[0] <= 0x3E7)
              {
                if (v22[0] <= 0x63)
                {
                  if (v22[0] <= 9)
                    v17 = 1;
                  else
                    v17 = 2;
                }
                else
                {
                  v17 = 3;
                }
              }
              else
              {
                v17 = 4;
              }
            }
            else
            {
              v17 = 5;
            }
          }
          else
          {
            v17 = 6;
          }
        }
        else
        {
          v17 = 7;
        }
      }
      else
      {
        v17 = 8;
      }
    }
    else
    {
      v17 = 9;
    }
  }
  else
  {
    v17 = 10;
  }
  if (a2 - a1 >= (v17 + 9 * v9))
  {
    std::__append_n_digits(v17, v22[0], a1, (char *)a4);
    a2 = &a1[v17];
    if ((int)v9 >= 1)
    {
      v19 = v9 + 1;
      do
      {
        std::__append_nine_digits(v21[(v19 - 2)], a2, v18);
        a2 += 9;
        --v19;
      }
      while (v19 > 1);
    }
  }
  return a2;
}

unint64_t std::__f2d[abi:ne180100](int a1, unsigned int a2)
{
  int v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  BOOL v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  int v17;
  char v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned int v39;
  int v40;
  char v41;
  char v42;
  unint64_t v43;
  unint64_t v44;
  unsigned int v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unsigned int v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unsigned int v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  int v70;
  char v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unint64_t v76;
  int v77;

  v2 = a1 | 0x800000;
  if (a2)
  {
    v3 = a2 - 152;
  }
  else
  {
    v2 = a1;
    v3 = -151;
  }
  v4 = 4 * v2;
  v5 = (4 * v2) | 2;
  if (a1)
    v6 = 0;
  else
    v6 = a2 >= 2;
  v7 = !v6;
  v8 = ~v7 + 4 * v2;
  if (v3 < 0)
  {
    v31 = 0;
    v32 = -732923 * v3;
    v33 = (-732923 * v3) >> 20;
    v10 = v3 + v33;
    v34 = v33 - ((-1217359 * (v3 + v33)) >> 19);
    v35 = std::__FLOAT_POW5_SPLIT[-v3 - v33];
    v36 = HIDWORD(v35);
    v37 = HIDWORD(v35) * (unint64_t)v4;
    v38 = (v35 * (unint64_t)v4) >> 32;
    v6 = __CFADD__((_DWORD)v38, (_DWORD)v37);
    v39 = v38 + v37;
    if (v6)
      v40 = HIDWORD(v37) + 1;
    else
      v40 = (HIDWORD(v35) * (unint64_t)v4) >> 32;
    v41 = 4 - v34;
    v42 = v34 + 28;
    v20 = (v40 << (4 - v34)) | (v39 >> (v34 + 28));
    v43 = v35 * (unint64_t)v5;
    v44 = HIDWORD(v35) * (unint64_t)v5;
    v43 >>= 32;
    v6 = __CFADD__((_DWORD)v43, (_DWORD)v44);
    v45 = v43 + v44;
    v46 = HIDWORD(v44);
    if (v6)
      LODWORD(v46) = v46 + 1;
    v25 = ((_DWORD)v46 << v41) | (v45 >> v42);
    v47 = v35 * (unint64_t)v8;
    v48 = v36 * (unint64_t)v8;
    v47 >>= 32;
    v6 = __CFADD__((_DWORD)v47, (_DWORD)v48);
    v49 = v47 + v48;
    if (v6)
      v50 = HIDWORD(v48) + 1;
    else
      v50 = HIDWORD(v48);
    v30 = (v50 << v41) | (v49 >> v42);
    if (v32 < 0x100000)
      goto LABEL_54;
    if ((v25 - 1) / 0xA <= v30 / 0xA)
    {
      v63 = std::__FLOAT_POW5_SPLIT[1 - v10];
      v64 = HIDWORD(v63) * (unint64_t)v4;
      v65 = (v63 * (unint64_t)v4) >> 32;
      v6 = __CFADD__((_DWORD)v65, (_DWORD)v64);
      v66 = v65 + v64;
      v67 = v6 ? HIDWORD(v64) + 1 : HIDWORD(v64);
      v62 = v33 + ~((1217359 * (1 - v10)) >> 19);
      v31 = ((v67 << (4 - v62)) | (v66 >> (v62 + 28))) % 0xA;
    }
    else
    {
      v31 = 0;
    }
    if (!(v32 >> 21))
    {
LABEL_54:
      if ((v2 & 1) != 0)
        v59 = 0;
      else
        v59 = v7;
      v25 -= v2 & 1;
      v60 = 1;
LABEL_73:
      v72 = v25 / 0xA;
      v73 = v30 / 0xA;
      if (v25 / 0xA <= v30 / 0xA)
      {
        v70 = 0;
        v75 = v20;
        if (!v59)
          goto LABEL_82;
      }
      else
      {
        v70 = 0;
        v74 = v30;
        do
        {
          v30 = v73;
          v59 = v59 & (-10 * v73 + v74 == 0);
          v60 = v60 & (v31 == 0);
          v75 = v20 / 0xA;
          v31 = v20 % 0xA;
          ++v70;
          v72 /= 0xAu;
          v73 /= 0xAu;
          v20 /= 0xAu;
          v74 = v30;
        }
        while (v72 > v73);
        if (!v59)
          goto LABEL_82;
      }
      if (!(v30 % 0xA))
      {
        do
        {
          v60 = v60 & (v31 == 0);
          v20 = v75 / 0xA;
          v31 = v75 % 0xA;
          v30 /= 0xAu;
          ++v70;
          HIDWORD(v76) = -858993459 * v30;
          LODWORD(v76) = -858993459 * v30;
          v75 /= 0xAu;
        }
        while ((v76 >> 1) < 0x1999999A);
        goto LABEL_83;
      }
LABEL_82:
      v20 = v75;
LABEL_83:
      v77 = (v20 == v30) & (v2 | v59 ^ 1) | ((v31 != 5) | ~v60 | v20) & (v31 > 4);
      return (v20 + v77) | ((unint64_t)(v70 + v10) << 32);
    }
    if (v33 <= 0x1E)
    {
      v59 = 0;
      v60 = (v4 & ~(-1 << (v33 - 1))) == 0;
      goto LABEL_68;
    }
    goto LABEL_60;
  }
  v9 = 78913 * v3;
  v10 = (78913 * v3) >> 18;
  v11 = v10 - v3;
  v12 = v10 - v3 + ((1217359 * v10) >> 19);
  v13 = std::__FLOAT_POW5_INV_SPLIT[v10];
  v14 = HIDWORD(v13) * (unint64_t)v4;
  v15 = (v13 * (unint64_t)v4) >> 32;
  v6 = __CFADD__((_DWORD)v15, (_DWORD)v14);
  v16 = v15 + v14;
  if (v6)
    v17 = HIDWORD(v14) + 1;
  else
    v17 = (HIDWORD(v13) * (unint64_t)v4) >> 32;
  v18 = v12 + 27;
  v19 = 5 - v12;
  v20 = (v17 << v19) | (v16 >> v18);
  v21 = HIDWORD(v13) * (unint64_t)v5;
  v22 = (v13 * (unint64_t)v5) >> 32;
  v6 = __CFADD__((_DWORD)v22, (_DWORD)v21);
  v23 = v22 + v21;
  if (v6)
    v24 = HIDWORD(v21) + 1;
  else
    v24 = (HIDWORD(v13) * (unint64_t)v5) >> 32;
  v25 = (v24 << v19) | (v23 >> v18);
  v26 = HIDWORD(v13) * (unint64_t)v8;
  v27 = (v13 * (unint64_t)v8) >> 32;
  v6 = __CFADD__((_DWORD)v27, (_DWORD)v26);
  v28 = v27 + v26;
  if (v6)
    v29 = HIDWORD(v26) + 1;
  else
    v29 = HIDWORD(v26);
  v30 = (v29 << v19) | (v28 >> v18);
  if (v9 < 0x40000)
  {
    v31 = 0;
    goto LABEL_40;
  }
  if ((v25 - 1) / 0xA <= v30 / 0xA)
  {
    v51 = v11 + ((1217359 * (v10 - 1)) >> 19);
    v52 = std::__FLOAT_POW5_INV_SPLIT[v10 - 1];
    v53 = HIDWORD(v52) * (unint64_t)v4;
    v54 = (v52 * (unint64_t)v4) >> 32;
    v6 = __CFADD__((_DWORD)v54, (_DWORD)v53);
    v55 = v54 + v53;
    if (v6)
      v56 = HIDWORD(v53) + 1;
    else
      v56 = HIDWORD(v53);
    v31 = ((v56 << (6 - v51)) | (v55 >> (v51 + 26))) % 0xA;
  }
  else
  {
    v31 = 0;
  }
  if (v9 >> 19 > 4)
  {
LABEL_60:
    v60 = 0;
    v59 = 0;
    goto LABEL_68;
  }
LABEL_40:
  if ((858993460 * v2) <= 0x33333333)
  {
    v58 = 0;
    do
    {
      v4 /= 5u;
      ++v58;
    }
    while (-858993459 * v4 < 0x33333334);
    v59 = 0;
    v60 = v58 >= v10;
  }
  else if ((v2 & 1) != 0)
  {
    if (-858993459 * v5 <= 0x33333333)
    {
      v61 = 0;
      do
      {
        v5 /= 5u;
        ++v61;
      }
      while (-858993459 * v5 < 0x33333334);
    }
    else
    {
      v61 = 0;
    }
    v60 = 0;
    v59 = 0;
    v25 -= v61 >= v10;
  }
  else
  {
    if (-858993459 * v8 <= 0x33333333)
    {
      v57 = 0;
      do
      {
        v8 /= 5u;
        ++v57;
      }
      while (-858993459 * v8 < 0x33333334);
    }
    else
    {
      v57 = 0;
    }
    v60 = 0;
    v59 = v57 >= v10;
    if (v57 >= v10)
      goto LABEL_73;
  }
LABEL_68:
  if ((v60 & 1) != 0)
    goto LABEL_73;
  v68 = v25 / 0xA;
  v69 = v30 / 0xA;
  if (v25 / 0xA <= v30 / 0xA)
  {
    v70 = 0;
  }
  else
  {
    v70 = 0;
    do
    {
      v71 = v20;
      v30 = v69;
      v20 /= 0xAu;
      ++v70;
      v68 /= 0xAu;
      v69 /= 0xAu;
    }
    while (v68 > v69);
    v31 = (v71 - 10 * v20);
  }
  v77 = v20 == v30 || v31 > 4;
  return (v20 + v77) | ((unint64_t)(v70 + v10) << 32);
}

_BYTE *std::__to_chars[abi:ne180100](_BYTE *a1, _BYTE *a2, unint64_t a3, int a4, int a5, int a6)
{
  size_t v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  _BYTE *v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  _BYTE *v31;
  unsigned int v32;
  __int16 v33;
  BOOL v34;
  _BYTE *v35;
  size_t v36;

  v8 = HIDWORD(a3);
  if (a3 <= 0x5F5E0FF)
  {
    if (a3 <= 9)
      v10 = 1;
    else
      v10 = 2;
    if (a3 <= 0x63)
      v11 = v10;
    else
      v11 = 3;
    if (a3 <= 0x3E7)
      v12 = v11;
    else
      v12 = 4;
    if (a3 >> 4 <= 0x270)
      v13 = v12;
    else
      v13 = 5;
    if (a3 >> 5 <= 0xC34)
      v14 = v13;
    else
      v14 = 6;
    if (a3 <= 0xF423F)
      v15 = v14;
    else
      v15 = 7;
    if (a3 <= 0x98967F)
      v9 = v15;
    else
      v9 = 8;
  }
  else
  {
    v9 = 9;
  }
  v16 = v9 + HIDWORD(a3);
  if (a4 == 3)
  {
    if ((v16 + 3) <= 9)
      goto LABEL_35;
  }
  else if (a4 == 2
         || !a4
         && (v9 == 1 ? (v17 = 4) : (v17 = 5),
             v9 != 1 ? (v18 = -3 - v9) : (v18 = -3),
             v18 <= SHIDWORD(a3) && v17 >= SHIDWORD(a3)))
  {
LABEL_35:
    if ((a3 & 0x8000000000000000) != 0)
    {
      LODWORD(v19) = 2 - HIDWORD(a3);
      if (v16 >= 1)
        LODWORD(v19) = v9 + 1;
    }
    else
    {
      LODWORD(v19) = v9 + HIDWORD(a3);
      if ((_DWORD)a3 == 1)
        LODWORD(v19) = v16
                     - std::__to_chars[abi:ne180100](char *,char *,std::__floating_decimal_32,std::chars_format,unsigned int,unsigned int)::_Adjustment[v8];
    }
    if (a2 - a1 < v19)
      return a2;
    v26 = v19;
    v19 = v19;
    if (SHIDWORD(a3) >= 1)
    {
      if (HIDWORD(a3) > 0xA
        || a3 >> __clz(__rbit32(a3)) > std::__to_chars[abi:ne180100](char *,char *,std::__floating_decimal_32,std::chars_format,unsigned int,unsigned int)::_Max_shifted_mantissa[v8])
      {
        return std::_Large_integer_to_chars[abi:ne180100](a1, a2, a5 | 0x800000u, (a6 - 150));
      }
      v19 = v9;
    }
    v31 = &a1[v19];
    if (a3 >> 4 < 0x271)
    {
      v32 = a3;
    }
    else
    {
      do
      {
        v32 = a3 / 0x2710;
        v33 = std::__itoa::__digits_base_10[a3 % 0x2710 % 0x64];
        *((_WORD *)v31 - 2) = std::__itoa::__digits_base_10[a3 % 0x2710 / 0x64uLL];
        v31 -= 4;
        *((_WORD *)v31 + 1) = v33;
        v34 = a3 > 0x5F5E0FF;
        LODWORD(a3) = a3 / 0x2710;
      }
      while (v34);
    }
    if (v32 >= 0x64)
    {
      *((_WORD *)v31 - 1) = std::__itoa::__digits_base_10[(unsigned __int16)v32 % 0x64u];
      v31 -= 2;
      v32 = (unsigned __int16)v32 / 0x64u;
    }
    if (v32 < 0xA)
      *(v31 - 1) = v32 + 48;
    else
      *((_WORD *)v31 - 1) = std::__itoa::__digits_base_10[v32];
    if ((int)v8 < 1)
    {
      if (!(_DWORD)v8)
        return &a1[v26];
      if (v16 >= 1)
      {
        memmove(a1, a1 + 1, v9 + v8);
        a1[v16] = 46;
        return &a1[v26];
      }
      *(_WORD *)a1 = 11824;
      v35 = a1 + 2;
      v36 = -v16;
    }
    else
    {
      v35 = &a1[v9];
      v36 = v8;
    }
    memset(v35, 48, v36);
    return &a1[v26];
  }
  if (v9 <= 1)
    v20 = v9;
  else
    v20 = v9 + 1;
  v21 = v20 + 4;
  if (a2 - a1 >= v21)
  {
    if (a3 >> 4 < 0x271)
    {
      v22 = 0;
    }
    else
    {
      LODWORD(v22) = 0;
      do
      {
        v23 = a3;
        LODWORD(a3) = a3 / 0x2710;
        v24 = v23 - 10000 * a3;
        v25 = &a1[v9 - v22];
        *(_WORD *)(v25 - 1) = std::__itoa::__digits_base_10[v24 % 0x64];
        *(_WORD *)(v25 - 3) = std::__itoa::__digits_base_10[v24 / 0x64uLL];
        v22 = (v22 + 4);
      }
      while (v23 > 0x5F5E0FF);
    }
    if (a3 >= 0x64)
    {
      *(_WORD *)&a1[v9 + ~v22] = std::__itoa::__digits_base_10[(unsigned __int16)a3 % 0x64u];
      LODWORD(a3) = (unsigned __int16)a3 / 0x64u;
    }
    if (a3 < 0xA)
    {
      v27 = a3 + 48;
    }
    else
    {
      a1[2] = *((_BYTE *)std::__itoa::__digits_base_10 + (2 * a3) + 1);
      v27 = std::__itoa::__digits_base_10[a3];
    }
    *a1 = v27;
    if (v9 < 2)
    {
      v28 = 1;
    }
    else
    {
      a1[1] = 46;
      v28 = v9 + 1;
    }
    v29 = v28 + 1;
    a1[v28] = 101;
    if (v16 <= 0)
    {
      a1[v29] = 45;
      v30 = 1 - v16;
    }
    else
    {
      v30 = v16 - 1;
      a1[v29] = 43;
    }
    *(_WORD *)&a1[v28 + 2] = std::__itoa::__digits_base_10[v30];
    return &a1[v21];
  }
  return a2;
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const std::string *a2)
{
  const std::string *v3;
  size_t v4;
  char *v5;
  const char *v6;

  this->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE51A0] + 16);
  if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v3 = a2;
  else
    v3 = (const std::string *)a2->__r_.__value_.__r.__words[0];
  v4 = strlen((const char *)v3);
  v5 = (char *)operator new(v4 + 25);
  *(_QWORD *)v5 = v4;
  *((_QWORD *)v5 + 1) = v4;
  v6 = v5 + 24;
  *((_DWORD *)v5 + 4) = 0;
  memcpy(v5 + 24, v3, v4 + 1);
  this->__imp_.__imp_ = v6;
  return this;
}

void sub_191FC3344(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  size_t v4;
  char *v5;
  const char *v6;

  this->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE51A0] + 16);
  v4 = strlen(a2);
  v5 = (char *)operator new(v4 + 25);
  *(_QWORD *)v5 = v4;
  *((_QWORD *)v5 + 1) = v4;
  v6 = v5 + 24;
  *((_DWORD *)v5 + 4) = 0;
  memcpy(v5 + 24, a2, v4 + 1);
  this->__imp_.__imp_ = v6;
  return this;
}

void sub_191FC33CC(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const std::logic_error *a2)
{
  const char *imp;
  unsigned __int8 v4;
  unsigned int *v5;
  unsigned int v6;
  void *v8;
  void *v9;
  uint64_t v10;

  imp = a2->__imp_.__imp_;
  this->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE51A0] + 16);
  this->__imp_.__imp_ = imp;
  if ((v4 & 1) == 0
  {
    v8 = dlopen("/usr/lib/libstdc++.6.dylib", 16);
    if (v8)
    {
      v9 = dlsym(v8, "_ZNSs4_Rep20_S_empty_rep_storageE");
      v10 = (uint64_t)v9 + 24;
      if (!v9)
        v10 = 0;
    }
    else
    {
      v10 = 0;
    }
  }
  {
    v5 = (unsigned int *)(this->__imp_.__imp_ - 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  return this;
}

std::logic_error *__cdecl std::logic_error::operator=(std::logic_error *this, const std::logic_error *a2)
{
  std::__libcpp_refstring::operator=(&this->__imp_, &a2->__imp_);
  return this;
}

std::__libcpp_refstring *__cdecl std::__libcpp_refstring::operator=(std::__libcpp_refstring *this, const std::__libcpp_refstring *__s)
{
  const char *imp;
  unsigned __int8 v5;
  uint64_t v6;
  const char *v7;
  const char *v8;
  unsigned __int8 v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  signed int v14;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;

  imp = this->__imp_;
  if ((v5 & 1) == 0
  {
    v16 = dlopen("/usr/lib/libstdc++.6.dylib", 16);
    if (v16)
    {
      v17 = dlsym(v16, "_ZNSs4_Rep20_S_empty_rep_storageE");
      v18 = (uint64_t)v17 + 24;
      if (!v17)
        v18 = 0;
    }
    else
    {
      v18 = 0;
    }
  }
  v7 = this->__imp_;
  v8 = __s->__imp_;
  this->__imp_ = v8;
  if ((v9 & 1) == 0
  {
    v19 = dlopen("/usr/lib/libstdc++.6.dylib", 16);
    if (v19)
    {
      v20 = dlsym(v19, "_ZNSs4_Rep20_S_empty_rep_storageE");
      v21 = (uint64_t)v20 + 24;
      if (!v20)
        v21 = 0;
    }
    else
    {
      v21 = 0;
    }
  }
  {
    v10 = (unsigned int *)(this->__imp_ - 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
  }
  if (imp != (const char *)v6)
  {
    v12 = (unsigned int *)(v7 - 8);
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (v14 < 0)
      operator delete((void *)(v7 - 24));
  }
  return this;
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::string *a2)
{
  const std::string *v3;
  size_t v4;
  char *v5;
  const char *v6;

  this->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE51B8] + 16);
  if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v3 = a2;
  else
    v3 = (const std::string *)a2->__r_.__value_.__r.__words[0];
  v4 = strlen((const char *)v3);
  v5 = (char *)operator new(v4 + 25);
  *(_QWORD *)v5 = v4;
  *((_QWORD *)v5 + 1) = v4;
  v6 = v5 + 24;
  *((_DWORD *)v5 + 4) = 0;
  memcpy(v5 + 24, v3, v4 + 1);
  this->__imp_.__imp_ = v6;
  return this;
}

void sub_191FC36D0(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  size_t v4;
  char *v5;
  const char *v6;

  this->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE51B8] + 16);
  v4 = strlen(a2);
  v5 = (char *)operator new(v4 + 25);
  *(_QWORD *)v5 = v4;
  *((_QWORD *)v5 + 1) = v4;
  v6 = v5 + 24;
  *((_DWORD *)v5 + 4) = 0;
  memcpy(v5 + 24, a2, v4 + 1);
  this->__imp_.__imp_ = v6;
  return this;
}

void sub_191FC3758(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::runtime_error *a2)
{
  const char *imp;
  unsigned __int8 v4;
  unsigned int *v5;
  unsigned int v6;
  void *v8;
  void *v9;
  uint64_t v10;

  imp = a2->__imp_.__imp_;
  this->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE51B8] + 16);
  this->__imp_.__imp_ = imp;
  if ((v4 & 1) == 0
  {
    v8 = dlopen("/usr/lib/libstdc++.6.dylib", 16);
    if (v8)
    {
      v9 = dlsym(v8, "_ZNSs4_Rep20_S_empty_rep_storageE");
      v10 = (uint64_t)v9 + 24;
      if (!v9)
        v10 = 0;
    }
    else
    {
      v10 = 0;
    }
  }
  {
    v5 = (unsigned int *)(this->__imp_.__imp_ - 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  return this;
}

std::runtime_error *__cdecl std::runtime_error::operator=(std::runtime_error *this, const std::runtime_error *a2)
{
  std::__libcpp_refstring::operator=(&this->__imp_, &a2->__imp_);
  return this;
}

void std::__throw_runtime_error(const char *a1)
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, a1);
  __cxa_throw(exception, MEMORY[0x1E0DE5180], MEMORY[0x1E0DE5110]);
}

void sub_191FC38AC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::string *__cdecl std::string::replace(std::string *this, std::string::size_type __pos, std::string::size_type __n1, const std::string::value_type *__s, std::string::size_type __n2)
{
  size_t v5;
  const std::string::value_type *v6;
  std::string::size_type v7;
  std::string::size_type size;
  std::string::size_type v10;
  size_t v11;
  std::string::size_type v12;
  std::string *v13;
  size_t v14;
  char *v15;
  std::string::size_type v16;
  std::string::size_type v17;

  v5 = __n2;
  v6 = __s;
  v7 = __pos;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    size = this->__r_.__value_.__l.__size_;
    v10 = size - __pos;
    if (size >= __pos)
    {
      if (v10 >= __n1)
        v11 = __n1;
      else
        v11 = size - __pos;
      v12 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (v11 - size + v12 < __n2)
        goto LABEL_13;
      v13 = (std::string *)this->__r_.__value_.__r.__words[0];
      goto LABEL_16;
    }
LABEL_39:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  v10 = size - __pos;
  if (size < __pos)
    goto LABEL_39;
  if (v10 >= __n1)
    v11 = __n1;
  else
    v11 = HIBYTE(this->__r_.__value_.__r.__words[2]) - __pos;
  if (v11 - size + 22 < __n2)
  {
    v12 = 22;
LABEL_13:
    std::string::__grow_by_and_replace(this, v12, size + __n2 - (v12 + v11), size, v7, v11, __n2, __s);
    return this;
  }
  v13 = this;
LABEL_16:
  if (__n2 == v11)
  {
    v11 = __n2;
  }
  else
  {
    v14 = v10 - v11;
    if (v10 != v11)
    {
      v15 = (char *)v13 + v7;
      v16 = __n2 - v11;
      if (__n2 < v11)
      {
        if (__n2)
          memmove((char *)v13 + v7, __s, __n2);
        memmove(&v15[v5], &v15[v11], v14);
        v17 = size + v16;
        goto LABEL_34;
      }
      if ((char *)v13 + size > __s && v15 + 1 <= __s)
      {
        if (&v15[v11] <= __s)
        {
          v6 = &__s[v16];
        }
        else
        {
          if (v11)
            memmove((char *)v13 + v7, __s, v11);
          v7 += v11;
          v6 += v5;
          v5 -= v11;
          v11 = 0;
        }
      }
      memmove((char *)v13 + v7 + v5, (char *)v13 + v7 + v11, v14);
    }
  }
  if (v5)
    memmove((char *)v13 + v7, v6, v5);
  v17 = v5 - v11 + size;
LABEL_34:
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    this->__r_.__value_.__l.__size_ = v17;
  else
    *((_BYTE *)&this->__r_.__value_.__s + 23) = v17 & 0x7F;
  v13->__r_.__value_.__s.__data_[v17] = 0;
  return this;
}

void std::string::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("basic_string");
}

void std::string::__grow_by_and_replace(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add, const std::string::value_type *__p_new_stuff)
{
  std::string *v15;
  std::string::size_type v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  void *v20;
  std::string::size_type v21;
  size_t v22;
  std::string::size_type v23;

  if (0x7FFFFFFFFFFFFFF6 - __old_cap < __delta_cap)
    std::string::__throw_length_error[abi:ne180100]();
  v15 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    v15 = (std::string *)this->__r_.__value_.__r.__words[0];
  v16 = __delta_cap + __old_cap;
  if (__delta_cap + __old_cap <= 2 * __old_cap)
    v16 = 2 * __old_cap;
  v17 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v16 | 7) != 0x17)
    v17 = v16 | 7;
  if (v16 >= 0x17)
    v18 = v17 + 1;
  else
    v18 = 23;
  if (__old_cap > 0x3FFFFFFFFFFFFFF2)
    v19 = 0x7FFFFFFFFFFFFFF7;
  else
    v19 = v18;
  v20 = operator new(v19);
  v21 = (std::string::size_type)v20;
  if (__n_copy)
    memmove(v20, v15, __n_copy);
  if (__n_add)
    memcpy((void *)(v21 + __n_copy), __p_new_stuff, __n_add);
  v22 = __old_sz - (__n_del + __n_copy);
  if (v22)
    memmove((void *)(v21 + __n_copy + __n_add), (char *)v15 + __n_copy + __n_del, v22);
  if (__old_cap != 22)
    operator delete(v15);
  v23 = __n_add + __n_copy + v22;
  this->__r_.__value_.__r.__words[0] = v21;
  this->__r_.__value_.__l.__size_ = v23;
  this->__r_.__value_.__r.__words[2] = v19 | 0x8000000000000000;
  *(_BYTE *)(v21 + v23) = 0;
}

std::string::size_type std::string::rfind(const std::string *this, const std::string::value_type *__s, std::string::size_type __pos, std::string::size_type __n)
{
  std::string::size_type size;
  const std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string::size_type v8;
  const std::string *v9;
  const std::string *v10;
  const std::string *v11;
  uint64_t v12;
  int v13;
  int v14;

  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    v5 = this;
    this = (const std::string *)this->__r_.__value_.__r.__words[0];
    size = v5->__r_.__value_.__l.__size_;
  }
  else
  {
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  }
  if (size >= __pos)
    v6 = __pos;
  else
    v6 = size;
  v7 = size - v6;
  v8 = v6 + __n;
  if (v7 <= __n)
    v8 = size;
  v9 = (const std::string *)((char *)this + v8);
  if (__n && v8)
  {
    v10 = this;
    v11 = (const std::string *)((char *)this + v8);
    do
    {
      if (v10->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)__s)
      {
        v12 = 1;
        while (__n != v12)
        {
          if ((const std::string *)((char *)v10 + v12) == v9)
            goto LABEL_22;
          v13 = v10->__r_.__value_.__s.__data_[v12];
          v14 = __s[v12++];
          if (v13 != v14)
            goto LABEL_13;
        }
        v11 = v10;
      }
LABEL_13:
      v10 = (const std::string *)((char *)v10 + 1);
    }
    while (v10 != v9);
  }
  else
  {
    v11 = (const std::string *)((char *)this + v8);
  }
LABEL_22:
  if (v11 != v9 || __n == 0)
    return (char *)v11 - (char *)this;
  else
    return -1;
}

void std::string::__init(std::string *this, const std::string::value_type *__s, std::string::size_type __sz, std::string::size_type __reserve)
{
  std::string *v4;
  std::string::size_type v7;
  std::string::size_type v8;
  std::string *v9;

  v4 = this;
  if (__reserve >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__reserve <= 0x16)
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz & 0x7F;
    if (!__sz)
      goto LABEL_9;
    goto LABEL_8;
  }
  v7 = (__reserve & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((__reserve | 7) != 0x17)
    v7 = __reserve | 7;
  v8 = v7 + 1;
  v9 = (std::string *)operator new(v7 + 1);
  v4->__r_.__value_.__l.__size_ = __sz;
  v4->__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
  v4->__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
  v4 = v9;
  if (__sz)
LABEL_8:
    memmove(v4, __s, __sz);
LABEL_9:
  v4->__r_.__value_.__s.__data_[__sz] = 0;
}

std::string *__cdecl std::string::basic_string(std::string *this, const std::string *__str)
{
  __int128 v3;

  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(this, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&__str->__r_.__value_.__l.__data_;
    this->__r_.__value_.__r.__words[2] = __str->__r_.__value_.__r.__words[2];
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  return this;
}

{
  __int128 v3;

  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(this, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&__str->__r_.__value_.__l.__data_;
    this->__r_.__value_.__r.__words[2] = __str->__r_.__value_.__r.__words[2];
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  return this;
}

std::string *__cdecl std::string::replace(std::string *this, std::string::size_type __pos, std::string::size_type __n1, const std::string::value_type *__s)
{
  size_t v8;

  v8 = strlen(__s);
  return std::string::replace(this, __pos, __n1, __s, v8);
}

std::string *__cdecl std::string::basic_string(std::string *this, const std::string *__str, const std::string::allocator_type *__a)
{
  __int128 v4;

  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(this, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
  }
  else
  {
    v4 = *(_OWORD *)&__str->__r_.__value_.__l.__data_;
    this->__r_.__value_.__r.__words[2] = __str->__r_.__value_.__r.__words[2];
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  return this;
}

{
  __int128 v4;

  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(this, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
  }
  else
  {
    v4 = *(_OWORD *)&__str->__r_.__value_.__l.__data_;
    this->__r_.__value_.__r.__words[2] = __str->__r_.__value_.__r.__words[2];
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  return this;
}

std::string::size_type std::string::find_last_not_of(const std::string *this, const std::string::value_type *__s, std::string::size_type __pos, std::string::size_type __n)
{
  const std::string *v6;
  std::string::size_type size;
  std::string::size_type v8;
  std::string::size_type v9;
  void *v10;

  v6 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    v6 = (const std::string *)this->__r_.__value_.__r.__words[0];
    size = this->__r_.__value_.__l.__size_;
  }
  else
  {
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  }
  if (size > __pos)
    size = __pos + 1;
  v8 = size - 1;
  do
  {
    v9 = v8;
    if (v8 == -1)
      break;
    if (!__n)
      break;
    v10 = memchr((void *)__s, v6->__r_.__value_.__s.__data_[v8], __n);
    v8 = v9 - 1;
  }
  while (v10);
  return v9;
}

void std::string::~string(std::string *this)
{
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    operator delete(this->__r_.__value_.__l.__data_);
}

{
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    operator delete(this->__r_.__value_.__l.__data_);
}

std::string::size_type std::string::find_first_not_of(const std::string *this, const std::string::value_type *__s, std::string::size_type __pos, std::string::size_type __n)
{
  const std::string *v6;
  std::string::size_type size;
  std::string::size_type v8;
  char *v9;

  v6 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    v6 = (const std::string *)this->__r_.__value_.__r.__words[0];
    size = this->__r_.__value_.__l.__size_;
  }
  else
  {
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  }
  v8 = size - __pos;
  if (size <= __pos)
    return -1;
  v9 = (char *)v6 + __pos;
  if (__n)
  {
    while (memchr((void *)__s, *v9, __n))
    {
      ++v9;
      if (!--v8)
        return -1;
    }
  }
  return v9 - (char *)v6;
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, std::string::size_type __n, std::string::value_type __c)
{
  int v4;
  std::string::size_type size;
  std::string::size_type v9;
  std::string *v10;
  std::string::size_type v11;

  v4 = __c;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    size = this->__r_.__value_.__l.__size_;
  else
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if (size < __pos)
    std::string::__throw_out_of_range[abi:ne180100]();
  if (__n)
  {
    if ((*((_BYTE *)&this->__r_.__value_.__s + 23) & 0x80) != 0)
    {
      v9 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (v9 - size >= __n)
      {
        v10 = (std::string *)this->__r_.__value_.__r.__words[0];
        goto LABEL_12;
      }
    }
    else
    {
      v9 = 22;
      v10 = this;
      if (22 - size >= __n)
      {
LABEL_12:
        if (size != __pos)
          memmove((char *)v10 + __pos + __n, (char *)v10 + __pos, size - __pos);
        goto LABEL_14;
      }
    }
    std::string::__grow_by(this, v9, size + __n - v9, size, __pos, 0, __n);
    this->__r_.__value_.__l.__size_ = size + __n;
    v10 = (std::string *)this->__r_.__value_.__r.__words[0];
LABEL_14:
    memset((char *)v10 + __pos, v4, __n);
    v11 = size + __n;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      this->__r_.__value_.__l.__size_ = v11;
    else
      *((_BYTE *)&this->__r_.__value_.__s + 23) = v11 & 0x7F;
    v10->__r_.__value_.__s.__data_[v11] = 0;
  }
  return this;
}

std::string *__cdecl std::string::operator=(std::string *this, std::string::value_type __c)
{
  std::string *v2;

  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    v2 = (std::string *)this->__r_.__value_.__r.__words[0];
    this->__r_.__value_.__l.__size_ = 1;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = 1;
    v2 = this;
  }
  v2->__r_.__value_.__s.__data_[0] = __c;
  v2->__r_.__value_.__s.__data_[1] = 0;
  return this;
}

void std::string::__init(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v3;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v3 = this;
  if (__sz >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__sz >= 0x17)
  {
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v3->__r_.__value_.__l.__size_ = __sz;
    v3->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v3->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v3 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
    if (!__sz)
      goto LABEL_9;
  }
  memmove(v3, __s, __sz);
LABEL_9:
  v3->__r_.__value_.__s.__data_[__sz] = 0;
}

std::string::const_reference std::string::at(const std::string *this, std::string::size_type __n)
{
  std::string::size_type size;

  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    size = this->__r_.__value_.__l.__size_;
  else
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if (size <= __n)
    std::string::__throw_out_of_range[abi:ne180100]();
  if ((*((_BYTE *)&this->__r_.__value_.__s + 23) & 0x80) != 0)
    this = (const std::string *)this->__r_.__value_.__r.__words[0];
  return (char *)this + __n;
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  const std::string::value_type *v5;
  std::string::size_type v8;
  std::string::size_type v9;
  std::string::size_type size;
  std::string *v11;
  const std::string::value_type *v12;
  std::string::size_type v14;
  std::string::size_type v15;

  v5 = __s;
  v8 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v8 >= __pos)
    {
      v9 = 22;
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      goto LABEL_6;
    }
LABEL_24:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  size = this->__r_.__value_.__l.__size_;
  if (size < __pos)
    goto LABEL_24;
  v9 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
LABEL_6:
  if (v9 - size >= __n)
  {
    if (__n)
    {
      v11 = this;
      if ((v8 & 0x80) != 0)
        v11 = (std::string *)this->__r_.__value_.__r.__words[0];
      if (size != __pos)
      {
        v12 = (char *)v11 + __pos;
        if ((char *)v11 + size <= __s || v12 > __s)
          v14 = 0;
        else
          v14 = __n;
        v5 = &__s[v14];
        memmove((void *)&v12[__n], v12, size - __pos);
      }
      memmove((char *)v11 + __pos, v5, __n);
      v15 = size + __n;
      if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
        this->__r_.__value_.__l.__size_ = v15;
      else
        *((_BYTE *)&this->__r_.__value_.__s + 23) = v15 & 0x7F;
      v11->__r_.__value_.__s.__data_[v15] = 0;
    }
  }
  else
  {
    std::string::__grow_by_and_replace(this, v9, size + __n - v9, size, __pos, 0, __n, __s);
  }
  return this;
}

std::string::size_type std::string::find_first_of(const std::string *this, const std::string::value_type *__s, std::string::size_type __pos, std::string::size_type __n)
{
  std::string::size_type size;
  const std::string *v5;
  std::string::size_type v6;
  const std::string *v7;
  unsigned __int8 *v8;
  std::string::size_type v9;
  const std::string::value_type *v10;

  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    v5 = this;
    this = (const std::string *)this->__r_.__value_.__r.__words[0];
    size = v5->__r_.__value_.__l.__size_;
  }
  else
  {
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  }
  v6 = -1;
  if (__n && size > __pos)
  {
    v7 = (const std::string *)((char *)this + __pos);
    v8 = (unsigned __int8 *)this + size;
LABEL_7:
    v9 = __n;
    v10 = __s;
    while (v7->__r_.__value_.__s.__data_[0] != *(unsigned __int8 *)v10)
    {
      ++v10;
      if (!--v9)
      {
        v7 = (const std::string *)((char *)v7 + 1);
        if (v7 != (const std::string *)v8)
          goto LABEL_7;
        v7 = (const std::string *)v8;
        break;
      }
    }
    if (v7 == (const std::string *)v8)
      return -1;
    else
      return (char *)v7 - (char *)this;
  }
  return v6;
}

std::string *__cdecl std::string::replace(std::string *this, std::string::size_type __pos, std::string::size_type __n1, std::string::size_type __n2, std::string::value_type __c)
{
  int v5;
  std::string::size_type size;
  std::string::size_type v10;
  std::string::size_type v11;
  std::string::size_type v12;
  std::string::size_type v13;
  std::string *v14;
  std::string::size_type v16;

  v5 = __c;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    size = this->__r_.__value_.__l.__size_;
    v10 = size - __pos;
    if (size >= __pos)
    {
      if (v10 >= __n1)
        v11 = __n1;
      else
        v11 = size - __pos;
      v12 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (v11 - size + v12 < __n2)
        goto LABEL_13;
      v14 = (std::string *)this->__r_.__value_.__r.__words[0];
      goto LABEL_16;
    }
LABEL_27:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  v10 = size - __pos;
  if (size < __pos)
    goto LABEL_27;
  if (v10 >= __n1)
    v11 = __n1;
  else
    v11 = HIBYTE(this->__r_.__value_.__r.__words[2]) - __pos;
  if (v11 - size + 22 < __n2)
  {
    v12 = 22;
LABEL_13:
    v13 = size + __n2;
    std::string::__grow_by(this, v12, size + __n2 - (v12 + v11), size, __pos, v11, __n2);
    this->__r_.__value_.__l.__size_ = v13 - v11;
    v14 = (std::string *)this->__r_.__value_.__r.__words[0];
LABEL_22:
    memset((char *)v14 + __pos, v5, __n2);
    goto LABEL_23;
  }
  v14 = this;
LABEL_16:
  if (v11 != __n2 && v10 != v11)
    memmove((char *)v14 + __pos + __n2, (char *)v14 + __pos + v11, v10 - v11);
  if (__n2)
    goto LABEL_22;
LABEL_23:
  v16 = __n2 - v11 + size;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    this->__r_.__value_.__l.__size_ = v16;
  else
    *((_BYTE *)&this->__r_.__value_.__s + 23) = v16 & 0x7F;
  v14->__r_.__value_.__s.__data_[v16] = 0;
  return this;
}

void std::string::reserve(std::string *this, std::string::size_type __requested_capacity)
{
  std::string::size_type v3;
  std::string::size_type v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  std::string *v8;
  char v9;
  void *v10;
  int v11;
  std::string::size_type size;
  std::string::size_type v13;
  std::string::size_type v14;
  unint64_t v15;
  std::string::size_type v16;

  if (__requested_capacity >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v3 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (__requested_capacity <= 0x16)
      return;
    if (v3 <= __requested_capacity)
      v4 = __requested_capacity;
    else
      v4 = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v5 = v4 | 7;
    if ((v4 | 7) == 0x17)
    {
      v6 = v4 & 0xFFFFFFFFFFFFFFF8;
      if (v6 <= 0xE)
      {
        v7 = v6 + 9;
        v8 = (std::string *)this->__r_.__value_.__r.__words[0];
        v9 = 1;
        v10 = this;
        v11 = 1;
        size = HIBYTE(this->__r_.__value_.__r.__words[2]);
        goto LABEL_28;
      }
      v5 = v6 + 8;
    }
    v16 = HIBYTE(this->__r_.__value_.__r.__words[2]);
    goto LABEL_24;
  }
  v13 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v13 >= __requested_capacity)
    return;
  size = this->__r_.__value_.__l.__size_;
  if (size <= __requested_capacity)
    v14 = __requested_capacity;
  else
    v14 = this->__r_.__value_.__l.__size_;
  if (v14 < 0x17)
  {
    if ((this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x17)
      return;
    v5 = 22;
    goto LABEL_21;
  }
  v15 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
  v5 = v14 | 7;
  if (v5 == 23)
    v5 = v15;
  if (v5 != v13)
  {
    if (v5 >= 0x17)
    {
      v16 = this->__r_.__value_.__l.__size_;
LABEL_24:
      v7 = v5 + 1;
      v10 = operator new(v5 + 1);
      v9 = 0;
      if ((v3 & 0x80) == 0)
      {
        v11 = 0;
        size = v3;
        v3 = v16;
        v8 = this;
        goto LABEL_28;
      }
      size = this->__r_.__value_.__l.__size_;
LABEL_27:
      v8 = (std::string *)this->__r_.__value_.__r.__words[0];
      v11 = 1;
      v3 = v16;
LABEL_28:
      if (size == -1)
      {
        if (!v11)
          goto LABEL_30;
      }
      else
      {
        memmove(v10, v8, size + 1);
        if (!v11)
        {
LABEL_30:
          if ((v9 & 1) != 0)
          {
LABEL_31:
            *((_BYTE *)&this->__r_.__value_.__s + 23) = v3 & 0x7F;
            return;
          }
          goto LABEL_34;
        }
      }
      operator delete(v8);
      if ((v9 & 1) != 0)
        goto LABEL_31;
LABEL_34:
      this->__r_.__value_.__l.__size_ = v3;
      this->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
      this->__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
      return;
    }
LABEL_21:
    v7 = v5 + 1;
    v9 = 1;
    v16 = this->__r_.__value_.__l.__size_;
    v10 = this;
    goto LABEL_27;
  }
}

void sub_191FC46B8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  std::string::size_type v6;
  std::string::size_type size;
  std::string *v8;
  std::string::size_type v9;

  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    size = this->__r_.__value_.__l.__size_;
    v6 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  }
  else
  {
    v6 = 22;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  }
  if (v6 - size >= __n)
  {
    if (__n)
    {
      v8 = this;
      if ((*((_BYTE *)&this->__r_.__value_.__s + 23) & 0x80) != 0)
        v8 = (std::string *)this->__r_.__value_.__r.__words[0];
      memmove((char *)v8 + size, __s, __n);
      v9 = size + __n;
      if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
        this->__r_.__value_.__l.__size_ = v9;
      else
        *((_BYTE *)&this->__r_.__value_.__s + 23) = v9 & 0x7F;
      v8->__r_.__value_.__s.__data_[v9] = 0;
    }
  }
  else
  {
    std::string::__grow_by_and_replace(this, v6, __n - v6 + size, size, size, 0, __n, __s);
  }
  return this;
}

std::string *__cdecl std::string::assign(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n)
{
  std::string::size_type size;
  std::string::size_type v5;

  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
  {
    size = __str->__r_.__value_.__l.__size_;
    if (size < __pos)
      goto LABEL_9;
    __str = (const std::string *)__str->__r_.__value_.__r.__words[0];
  }
  else
  {
    size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    if (size < __pos)
LABEL_9:
      std::string::__throw_out_of_range[abi:ne180100]();
  }
  v5 = size - __pos;
  if (v5 >= __n)
    v5 = __n;
  return std::string::__assign_external(this, (const std::string::value_type *)__str + __pos, v5);
}

std::string::size_type std::string::copy(const std::string *this, std::string::value_type *__s, std::string::size_type __n, std::string::size_type __pos)
{
  std::string::size_type v4;
  BOOL v5;
  std::string::size_type v6;
  size_t v7;
  std::string::size_type size;
  std::string::size_type v10;

  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    size = this->__r_.__value_.__l.__size_;
    v5 = size >= __pos;
    v10 = size - __pos;
    if (!v5)
LABEL_17:
      std::string::__throw_out_of_range[abi:ne180100]();
    if (v10 >= __n)
      v7 = __n;
    else
      v7 = v10;
    this = (const std::string *)this->__r_.__value_.__r.__words[0];
    if (v7)
      goto LABEL_8;
  }
  else
  {
    v4 = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v5 = v4 >= __pos;
    v6 = v4 - __pos;
    if (!v5)
      goto LABEL_17;
    if (v6 >= __n)
      v7 = __n;
    else
      v7 = v6;
    if (v7)
LABEL_8:
      memmove(__s, (char *)this + __pos, v7);
  }
  return v7;
}

std::string *__cdecl std::string::basic_string(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n, std::allocator<char> *__a)
{
  const std::string *v6;
  std::string::size_type size;
  std::string::size_type v9;
  std::string::size_type v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;

  v6 = __str;
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
  {
    size = __str->__r_.__value_.__l.__size_;
    if (size < __pos)
      goto LABEL_18;
    v6 = (const std::string *)__str->__r_.__value_.__r.__words[0];
  }
  else
  {
    size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    if (size < __pos)
LABEL_18:
      std::string::__throw_out_of_range[abi:ne180100]();
  }
  v9 = size - __pos;
  if (v9 >= __n)
    v10 = __n;
  else
    v10 = v9;
  if (v10 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v10 >= 0x17)
  {
    v12 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v12 = v10 | 7;
    v13 = v12 + 1;
    v11 = operator new(v12 + 1);
    this->__r_.__value_.__l.__size_ = v10;
    this->__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
    this->__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = v10;
    v11 = this;
    if (!v10)
      goto LABEL_17;
  }
  memmove(v11, (char *)v6 + __pos, v10);
LABEL_17:
  *((_BYTE *)v11 + v10) = 0;
  return this;
}

std::string::size_type std::string::find(const std::string *this, std::string::value_type __c, std::string::size_type __pos)
{
  const std::string *v3;
  std::string::size_type size;
  BOOL v5;
  size_t v6;
  _BYTE *v7;

  v3 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    v3 = (const std::string *)this->__r_.__value_.__r.__words[0];
    size = this->__r_.__value_.__l.__size_;
  }
  else
  {
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  }
  v5 = size > __pos;
  v6 = size - __pos;
  if (!v5)
    return -1;
  v7 = memchr((char *)v3 + __pos, __c, v6);
  if (v7)
    return v7 - (_BYTE *)v3;
  else
    return -1;
}

void std::string::__init(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  std::string *v3;
  int v4;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v3 = this;
  if (__n >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v4 = __c;
  if (__n >= 0x17)
  {
    v6 = (__n & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__n | 7) != 0x17)
      v6 = __n | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v3->__r_.__value_.__l.__size_ = __n;
    v3->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v3->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v3 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __n;
    if (!__n)
      goto LABEL_9;
  }
  memset(v3, v4, __n);
LABEL_9:
  v3->__r_.__value_.__s.__data_[__n] = 0;
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s)
{
  size_t v6;

  v6 = strlen(__s);
  return std::string::insert(this, __pos, __s, v6);
}

std::string::size_type std::string::find_last_of(const std::string *this, const std::string::value_type *__s, std::string::size_type __pos, std::string::size_type __n)
{
  std::string::size_type size;
  const std::string *v7;
  std::string::size_type v8;
  char *v9;

  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    v7 = this;
    this = (const std::string *)this->__r_.__value_.__r.__words[0];
    size = v7->__r_.__value_.__l.__size_;
    if (!__n)
      return -1;
  }
  else
  {
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    if (!__n)
      return -1;
  }
  if (size > __pos)
    v8 = __pos + 1;
  else
    v8 = size;
  v9 = (char *)&this[-1].__r_.__value_.__r.__words[2] + 7;
  while (v8)
  {
    if (memchr((void *)__s, v9[v8--], __n))
      return v8;
  }
  return -1;
}

void std::string::__grow_by(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add)
{
  std::string *v13;
  std::string::size_type v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  void *v18;
  std::string::size_type v19;

  if (0x7FFFFFFFFFFFFFF7 - __old_cap < __delta_cap)
    std::string::__throw_length_error[abi:ne180100]();
  v13 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    v13 = (std::string *)this->__r_.__value_.__r.__words[0];
  v14 = __delta_cap + __old_cap;
  if (__delta_cap + __old_cap <= 2 * __old_cap)
    v14 = 2 * __old_cap;
  v15 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v14 | 7) != 0x17)
    v15 = v14 | 7;
  if (v14 >= 0x17)
    v16 = v15 + 1;
  else
    v16 = 23;
  if (__old_cap <= 0x3FFFFFFFFFFFFFF2)
    v17 = v16;
  else
    v17 = 0x7FFFFFFFFFFFFFF7;
  v18 = operator new(v17);
  v19 = (std::string::size_type)v18;
  if (__n_copy)
    memmove(v18, v13, __n_copy);
  if (__old_sz != __n_del + __n_copy)
    memmove((void *)(v19 + __n_copy + __n_add), (char *)v13 + __n_copy + __n_del, __old_sz - (__n_del + __n_copy));
  if (__old_cap != 22)
    operator delete(v13);
  this->__r_.__value_.__r.__words[0] = v19;
  this->__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
  std::string *v3;
  std::string::size_type v4;
  std::string::size_type size;
  std::string::value_type *v6;

  v3 = this;
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((_BYTE *)&this->__r_.__value_.__s + 23) != 22)
    {
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      *((_BYTE *)&this->__r_.__value_.__s + 23) = (*((_BYTE *)&this->__r_.__value_.__s + 23) + 1) & 0x7F;
      goto LABEL_8;
    }
    v4 = 22;
    goto LABEL_5;
  }
  size = this->__r_.__value_.__l.__size_;
  v4 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (size == v4)
  {
LABEL_5:
    std::string::__grow_by(this, v4, 1uLL, v4, v4, 0, 0);
    size = v4;
  }
  v3->__r_.__value_.__l.__size_ = size + 1;
  v3 = (std::string *)v3->__r_.__value_.__r.__words[0];
LABEL_8:
  v6 = (char *)v3 + size;
  *v6 = __c;
  v6[1] = 0;
}

std::string *__cdecl std::string::append(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  int v4;
  unint64_t v6;
  std::string::size_type size;
  std::string::size_type v8;
  unint64_t v9;
  std::string *v10;
  std::string::size_type v11;

  if (__n)
  {
    v4 = __c;
    LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
    if ((v6 & 0x80000000) != 0)
    {
      size = this->__r_.__value_.__l.__size_;
      v9 = this->__r_.__value_.__r.__words[2];
      v8 = (v9 & 0x7FFFFFFFFFFFFFFFLL) - 1;
      v6 = HIBYTE(v9);
    }
    else
    {
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      v8 = 22;
    }
    if (v8 - size < __n)
    {
      std::string::__grow_by(this, v8, __n - v8 + size, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    }
    v10 = this;
    if ((v6 & 0x80) != 0)
      v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    memset((char *)v10 + size, v4, __n);
    v11 = size + __n;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      this->__r_.__value_.__l.__size_ = v11;
    else
      *((_BYTE *)&this->__r_.__value_.__s + 23) = v11 & 0x7F;
    v10->__r_.__value_.__s.__data_[v11] = 0;
  }
  return this;
}

std::string::size_type std::string::rfind(const std::string *this, std::string::value_type __c, std::string::size_type __pos)
{
  const std::string *v3;
  std::string::size_type size;
  std::string::size_type result;
  char *v6;
  int v7;

  v3 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    v3 = (const std::string *)this->__r_.__value_.__r.__words[0];
    size = this->__r_.__value_.__l.__size_;
    if (!size)
      return -1;
  }
  else
  {
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    if (!*((_BYTE *)&this->__r_.__value_.__s + 23))
      return -1;
  }
  if (size > __pos)
    result = __pos + 1;
  else
    result = size;
  v6 = (char *)&v3[-1].__r_.__value_.__r.__words[2] + 7;
  while (result)
  {
    v7 = v6[result--];
    if (v7 == __c)
      return result;
  }
  return -1;
}

std::string *__cdecl std::string::assign(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  int v3;
  unint64_t v6;
  std::string *v7;
  std::string::size_type size;
  unint64_t v9;
  unint64_t v10;

  v3 = __c;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    v10 = this->__r_.__value_.__r.__words[2];
    v9 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v9 >= __n)
    {
      v6 = HIBYTE(v10);
      if ((v6 & 0x80) == 0)
        goto LABEL_7;
      goto LABEL_15;
    }
    size = this->__r_.__value_.__l.__size_;
  }
  else
  {
    v7 = this;
    if (__n <= 0x16)
      goto LABEL_8;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v9 = 22;
  }
  std::string::__grow_by(this, v9, __n - v9, size, 0, size, 0);
  this->__r_.__value_.__l.__size_ = 0;
  LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
  if ((v6 & 0x80) == 0)
  {
LABEL_7:
    v7 = this;
LABEL_8:
    if (!__n)
      goto LABEL_10;
    goto LABEL_9;
  }
LABEL_15:
  v7 = (std::string *)this->__r_.__value_.__r.__words[0];
  if (__n)
  {
LABEL_9:
    memset(v7, v3, __n);
    LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
  }
LABEL_10:
  if ((v6 & 0x80) != 0)
    this->__r_.__value_.__l.__size_ = __n;
  else
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
  v7->__r_.__value_.__s.__data_[__n] = 0;
  return this;
}

std::string *__cdecl std::string::erase(std::string *this, std::string::size_type __pos, std::string::size_type __n)
{
  std::string::size_type size;
  std::string *v5;

  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    size = this->__r_.__value_.__l.__size_;
  else
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if (size < __pos)
    std::string::__throw_out_of_range[abi:ne180100]();
  if (__n == -1)
  {
    if ((*((_BYTE *)&this->__r_.__value_.__s + 23) & 0x80) != 0)
    {
      v5 = (std::string *)this->__r_.__value_.__r.__words[0];
      this->__r_.__value_.__l.__size_ = __pos;
    }
    else
    {
      *((_BYTE *)&this->__r_.__value_.__s + 23) = __pos & 0x7F;
      v5 = this;
    }
    v5->__r_.__value_.__s.__data_[__pos] = 0;
  }
  else
  {
    std::string::__erase_external_with_move(this, __pos, __n);
  }
  return this;
}

void std::string::__erase_external_with_move(std::string *this, std::string::size_type __pos, std::string::size_type __n)
{
  int v4;
  std::string::size_type size;
  std::string *v6;
  std::string::size_type v7;
  std::string::size_type v8;

  if (__n)
  {
    v4 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
    if (v4 < 0)
    {
      v6 = (std::string *)this->__r_.__value_.__r.__words[0];
      size = this->__r_.__value_.__l.__size_;
    }
    else
    {
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      v6 = this;
    }
    if (size - __pos >= __n)
      v7 = __n;
    else
      v7 = size - __pos;
    if (size - __pos > __n)
    {
      memmove((char *)v6 + __pos, (char *)v6 + __pos + v7, size - __pos - v7);
      LOBYTE(v4) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    }
    v8 = size - v7;
    if ((v4 & 0x80) != 0)
      this->__r_.__value_.__l.__size_ = v8;
    else
      *((_BYTE *)&this->__r_.__value_.__s + 23) = v8 & 0x7F;
    v6->__r_.__value_.__s.__data_[v8] = 0;
  }
}

std::string *__cdecl std::string::append(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n)
{
  std::string::size_type size;
  const std::string::value_type *v5;
  std::string::size_type v6;
  std::string::size_type v7;

  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
  {
    size = __str->__r_.__value_.__l.__size_;
    if (size < __pos)
      goto LABEL_10;
    __str = (const std::string *)__str->__r_.__value_.__r.__words[0];
  }
  else
  {
    size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    if (size < __pos)
LABEL_10:
      std::string::__throw_out_of_range[abi:ne180100]();
  }
  v5 = (char *)__str + __pos;
  v6 = size - __pos;
  if (v6 >= __n)
    v7 = __n;
  else
    v7 = v6;
  return std::string::append(this, v5, v7);
}

int std::string::compare(const std::string *this, const std::string::value_type *__s)
{
  size_t v4;
  std::string::size_type size;
  const std::string *v6;
  size_t v7;
  int v8;
  int result;

  v4 = strlen(__s);
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v4 != -1)
    {
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      goto LABEL_6;
    }
LABEL_15:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v4 == -1)
    goto LABEL_15;
  v6 = this;
  this = (const std::string *)this->__r_.__value_.__r.__words[0];
  size = v6->__r_.__value_.__l.__size_;
LABEL_6:
  if (size >= v4)
    v7 = v4;
  else
    v7 = size;
  if (size < v4)
    v8 = -1;
  else
    v8 = size > v4;
  result = memcmp(this, __s, v7);
  if (!result)
    return v8;
  return result;
}

int std::string::compare(const std::string *this, std::string::size_type __pos1, std::string::size_type __n1, const std::string::value_type *__s, std::string::size_type __n2)
{
  std::string::size_type v5;
  BOOL v6;
  std::string::size_type v7;
  std::string::size_type size;
  char *v9;
  size_t v10;
  int v11;
  int result;

  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    if (__n2 == -1 || (size = this->__r_.__value_.__l.__size_, v6 = size >= __pos1, v7 = size - __pos1, !v6))
LABEL_23:
      std::string::__throw_out_of_range[abi:ne180100]();
    if (v7 >= __n1)
      v7 = __n1;
    this = (const std::string *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    if (__n2 == -1)
      goto LABEL_23;
    v5 = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v6 = v5 >= __pos1;
    v7 = v5 - __pos1;
    if (!v6)
      goto LABEL_23;
    if (v7 >= __n1)
      v7 = __n1;
  }
  v9 = (char *)this + __pos1;
  if (v7 >= __n2)
    v10 = __n2;
  else
    v10 = v7;
  if (v7 < __n2)
    v11 = -1;
  else
    v11 = v7 > __n2;
  result = memcmp(v9, __s, v10);
  if (!result)
    return v11;
  return result;
}

int std::string::compare(const std::string *this, std::string::size_type __pos1, std::string::size_type __n1, const std::string::value_type *__s)
{
  size_t v8;
  std::string::size_type v9;
  BOOL v10;
  std::string::size_type v11;
  std::string::size_type v12;
  std::string::size_type size;
  std::string::size_type v14;
  char *v15;
  size_t v16;
  int v17;
  int result;

  v8 = strlen(__s);
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    if (v8 == -1 || (size = this->__r_.__value_.__l.__size_, v10 = size >= __pos1, v14 = size - __pos1, !v10))
LABEL_24:
      std::string::__throw_out_of_range[abi:ne180100]();
    if (v14 >= __n1)
      v12 = __n1;
    else
      v12 = v14;
    this = (const std::string *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    if (v8 == -1)
      goto LABEL_24;
    v9 = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v10 = v9 >= __pos1;
    v11 = v9 - __pos1;
    if (!v10)
      goto LABEL_24;
    if (v11 >= __n1)
      v12 = __n1;
    else
      v12 = v11;
  }
  v15 = (char *)this + __pos1;
  if (v12 >= v8)
    v16 = v8;
  else
    v16 = v12;
  if (v12 < v8)
    v17 = -1;
  else
    v17 = v12 > v8;
  result = memcmp(v15, __s, v16);
  if (!result)
    return v17;
  return result;
}

std::string::reference std::string::at(std::string *this, std::string::size_type __n)
{
  std::string::size_type size;

  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    size = this->__r_.__value_.__l.__size_;
  else
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if (size <= __n)
    std::string::__throw_out_of_range[abi:ne180100]();
  if ((*((_BYTE *)&this->__r_.__value_.__s + 23) & 0x80) != 0)
    this = (std::string *)this->__r_.__value_.__r.__words[0];
  return (char *)this + __n;
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s)
{
  size_t v4;

  v4 = strlen(__s);
  return std::string::__assign_external(this, __s, v4);
}

std::string::size_type std::string::find(const std::string *this, const std::string::value_type *__s, std::string::size_type __pos, std::string::size_type __n)
{
  const std::string *v6;
  std::string::size_type size;
  char *v8;
  char *v9;
  int64_t v10;
  char *v11;
  int v13;
  std::string::size_type v14;
  char *v15;

  v6 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    v6 = (const std::string *)this->__r_.__value_.__r.__words[0];
    size = this->__r_.__value_.__l.__size_;
  }
  else
  {
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  }
  if (size < __pos)
    return -1;
  if (__n)
  {
    v8 = (char *)v6 + __pos;
    v9 = (char *)v6 + size;
    v10 = size - __pos;
    if (v10 >= (uint64_t)__n)
    {
      v13 = *__s;
      do
      {
        v14 = v10 - __n;
        if (v14 == -1)
          break;
        v15 = (char *)memchr(v8, v13, v14 + 1);
        if (!v15)
          break;
        v11 = v15;
        if (!memcmp(v15, __s, __n))
          goto LABEL_9;
        v8 = v11 + 1;
        v10 = v9 - (v11 + 1);
      }
      while (v10 >= (uint64_t)__n);
    }
    v11 = v9;
LABEL_9:
    if (v11 == v9)
      return -1;
    else
      return v11 - (char *)v6;
  }
  return __pos;
}

int std::string::compare(const std::string *this, std::string::size_type __pos1, std::string::size_type __n1, const std::string *__str, std::string::size_type __pos2, std::string::size_type __n2)
{
  std::string::size_type size;
  const std::string *v7;
  std::string::size_type v8;
  const std::string *v9;
  BOOL v10;
  std::string::size_type v11;
  std::string::size_type v12;
  std::string::size_type v13;
  char *v14;
  std::string::size_type v15;
  size_t v16;
  int result;
  int v18;

  size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v7 = __str;
  else
    v7 = (const std::string *)__str->__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = __str->__r_.__value_.__l.__size_;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    v9 = this;
    this = (const std::string *)this->__r_.__value_.__r.__words[0];
    v8 = v9->__r_.__value_.__l.__size_;
  }
  else
  {
    v8 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  }
  v10 = v8 >= __pos1;
  v11 = v8 - __pos1;
  if (!v10 || (v11 >= __n1 ? (v12 = __n1) : (v12 = v11), v10 = size >= __pos2, v13 = size - __pos2, !v10))
    std::__throw_out_of_range[abi:ne180100]("string_view::substr");
  v14 = (char *)this + __pos1;
  if (v13 >= __n2)
    v15 = __n2;
  else
    v15 = v13;
  if (v15 >= v12)
    v16 = v12;
  else
    v16 = v15;
  result = memcmp(v14, (char *)v7 + __pos2, v16);
  if (v12 < v15)
    v18 = -1;
  else
    v18 = 1;
  if (v12 == v15)
    v18 = 0;
  if (!result)
    return v18;
  return result;
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  __int128 v2;
  std::string::size_type size;
  size_t v4;

  if (this != __str)
  {
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    {
      size = __str->__r_.__value_.__l.__size_;
      if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      {
        v4 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
      }
      else
      {
        __str = (const std::string *)__str->__r_.__value_.__r.__words[0];
        v4 = size;
      }
      return std::string::__assign_no_alias<false>(this, (const std::string::value_type *)__str, v4);
    }
    else if ((*((_BYTE *)&__str->__r_.__value_.__s + 23) & 0x80) != 0)
    {
      return std::string::__assign_no_alias<true>(this, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
    }
    else
    {
      v2 = *(_OWORD *)&__str->__r_.__value_.__l.__data_;
      this->__r_.__value_.__r.__words[2] = __str->__r_.__value_.__r.__words[2];
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v2;
    }
  }
  return this;
}

std::string *std::string::__assign_no_alias<true>(std::string *__dst, const std::string::value_type *__src, size_t __len)
{
  BOOL v5;
  std::string::size_type v6;

  v5 = __len > 0x16;
  v6 = __len - 22;
  if (v5)
  {
    std::string::__grow_by_and_replace(__dst, 0x16uLL, v6, *((_BYTE *)&__dst->__r_.__value_.__s + 23) & 0x7F, 0, *((_BYTE *)&__dst->__r_.__value_.__s + 23) & 0x7F, __len, __src);
  }
  else
  {
    *((_BYTE *)&__dst->__r_.__value_.__s + 23) = __len;
    if (__len)
      memmove(__dst, __src, __len);
    __dst->__r_.__value_.__s.__data_[__len] = 0;
  }
  return __dst;
}

std::string *std::string::__assign_no_alias<false>(std::string *this, const std::string::value_type *__src, size_t __len)
{
  std::string::size_type v5;
  void *v6;

  v5 = this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL;
  if (v5 <= __len)
  {
    std::string::__grow_by_and_replace(this, v5 - 1, __len - v5 + 1, this->__r_.__value_.__l.__size_, 0, this->__r_.__value_.__l.__size_, __len, __src);
  }
  else
  {
    v6 = (void *)this->__r_.__value_.__r.__words[0];
    this->__r_.__value_.__l.__size_ = __len;
    if (__len)
      memmove(v6, __src, __len);
    *((_BYTE *)v6 + __len) = 0;
  }
  return this;
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  size_t v4;

  v4 = strlen(__s);
  return std::string::append(this, __s, v4);
}

std::string *__cdecl std::string::replace(std::string *this, std::string::size_type __pos1, std::string::size_type __n1, const std::string *__str, std::string::size_type __pos2, std::string::size_type __n2)
{
  std::string::size_type size;
  const std::string::value_type *v7;
  std::string::size_type v8;
  std::string::size_type v9;

  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
  {
    size = __str->__r_.__value_.__l.__size_;
    if (size < __pos2)
      goto LABEL_10;
    __str = (const std::string *)__str->__r_.__value_.__r.__words[0];
  }
  else
  {
    size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    if (size < __pos2)
LABEL_10:
      std::string::__throw_out_of_range[abi:ne180100]();
  }
  v7 = (char *)__str + __pos2;
  v8 = size - __pos2;
  if (v8 >= __n2)
    v9 = __n2;
  else
    v9 = v8;
  return std::string::replace(this, __pos1, __n1, v7, v9);
}

std::string::iterator std::string::insert(std::string *this, std::string::const_iterator __pos, std::string::value_type __c)
{
  std::string *v4;
  std::string::size_type size;
  const char *v6;
  std::string *v7;
  std::string::size_type v8;

  v4 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    v7 = (std::string *)this->__r_.__value_.__r.__words[0];
    size = this->__r_.__value_.__l.__size_;
    v6 = &__pos.__i_[-this->__r_.__value_.__r.__words[0]];
    if ((this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1 == size)
      goto LABEL_5;
LABEL_7:
    if ((const char *)size == v6)
      v6 = (const char *)size;
    else
      memmove((void *)&v6[(_QWORD)v7 + 1], &v6[(_QWORD)v7], size - (_QWORD)v6);
    goto LABEL_10;
  }
  size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  v6 = (const char *)(__pos.__i_ - (std::__wrap_iter<const char *>::iterator_type)this);
  if (*((_BYTE *)&this->__r_.__value_.__s + 23) != 22)
  {
    v7 = this;
    goto LABEL_7;
  }
  size = 22;
LABEL_5:
  std::string::__grow_by(this, size, 1uLL, size, (std::string::size_type)v6, 0, 1uLL);
  v4->__r_.__value_.__l.__size_ = size + 1;
  v7 = (std::string *)v4->__r_.__value_.__r.__words[0];
LABEL_10:
  v6[(_QWORD)v7] = __c;
  v8 = size + 1;
  v7->__r_.__value_.__s.__data_[size + 1] = 0;
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    v4->__r_.__value_.__l.__size_ = v8;
    v4 = (std::string *)v4->__r_.__value_.__r.__words[0];
  }
  else
  {
    *((_BYTE *)&v4->__r_.__value_.__s + 23) = v8 & 0x7F;
  }
  return (std::string::iterator)&v6[(_QWORD)v4];
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  std::string::size_type size;

  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    size = this->__r_.__value_.__l.__size_;
    if (size >= __n)
    {
      this->__r_.__value_.__l.__size_ = __n;
      this = (std::string *)this->__r_.__value_.__r.__words[0];
      goto LABEL_7;
    }
LABEL_5:
    std::string::append(this, __n - size, __c);
    return;
  }
  size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if (size < __n)
    goto LABEL_5;
  *((_BYTE *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
LABEL_7:
  this->__r_.__value_.__s.__data_[__n] = 0;
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos1, const std::string *__str, std::string::size_type __pos2, std::string::size_type __n)
{
  std::string::size_type size;
  const std::string::value_type *v6;
  std::string::size_type v7;
  std::string::size_type v8;

  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
  {
    size = __str->__r_.__value_.__l.__size_;
    if (size < __pos2)
      goto LABEL_10;
    __str = (const std::string *)__str->__r_.__value_.__r.__words[0];
  }
  else
  {
    size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    if (size < __pos2)
LABEL_10:
      std::string::__throw_out_of_range[abi:ne180100]();
  }
  v6 = (char *)__str + __pos2;
  v7 = size - __pos2;
  if (v7 >= __n)
    v8 = __n;
  else
    v8 = v7;
  return std::string::insert(this, __pos1, v6, v8);
}

std::wstring *__cdecl std::wstring::replace(std::wstring *this, std::wstring::size_type __pos, std::wstring::size_type __n1, const std::wstring::value_type *__s, std::wstring::size_type __n2)
{
  std::wstring::size_type v5;
  const std::wstring::value_type *v6;
  std::wstring::size_type v7;
  std::wstring::size_type size;
  std::wstring::size_type v10;
  std::wstring::size_type v11;
  std::wstring::size_type v12;
  std::wstring *v13;
  std::wstring::size_type v14;
  char *v15;
  std::wstring::size_type v16;
  std::wstring::size_type v17;

  v5 = __n2;
  v6 = __s;
  v7 = __pos;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    size = this->__r_.__value_.__l.__size_;
    v10 = size - __pos;
    if (size >= __pos)
    {
      if (v10 >= __n1)
        v11 = __n1;
      else
        v11 = size - __pos;
      v12 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (v11 - size + v12 < __n2)
        goto LABEL_13;
      v13 = (std::wstring *)this->__r_.__value_.__r.__words[0];
      goto LABEL_16;
    }
LABEL_39:
    std::wstring::__throw_out_of_range[abi:ne180100]();
  }
  size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  v10 = size - __pos;
  if (size < __pos)
    goto LABEL_39;
  if (v10 >= __n1)
    v11 = __n1;
  else
    v11 = HIBYTE(this->__r_.__value_.__r.__words[2]) - __pos;
  if (v11 - size + 4 < __n2)
  {
    v12 = 4;
LABEL_13:
    std::wstring::__grow_by_and_replace(this, v12, size + __n2 - (v12 + v11), size, v7, v11, __n2, __s);
    return this;
  }
  v13 = this;
LABEL_16:
  if (__n2 == v11)
  {
    v11 = __n2;
  }
  else
  {
    v14 = v10 - v11;
    if (v10 != v11)
    {
      v15 = (char *)v13 + 4 * v7;
      v16 = __n2 - v11;
      if (__n2 < v11)
      {
        if (__n2)
          memmove((char *)v13 + 4 * v7, __s, 4 * __n2);
        memmove(&v15[4 * v5], &v15[4 * v11], 4 * v14);
        v17 = size + v16;
        goto LABEL_34;
      }
      if ((char *)v13 + 4 * size > (char *)__s && v15 + 4 <= (char *)__s)
      {
        if (&v15[4 * v11] <= (char *)__s)
        {
          v6 = &__s[v16];
        }
        else
        {
          if (v11)
            memmove((char *)v13 + 4 * v7, __s, 4 * v11);
          v7 += v11;
          v6 += v5;
          v5 -= v11;
          v11 = 0;
        }
      }
      memmove((char *)v13 + 4 * v7 + 4 * v5, (char *)v13 + 4 * v7 + 4 * v11, 4 * v14);
    }
  }
  if (v5)
    memmove((char *)v13 + 4 * v7, v6, 4 * v5);
  v17 = v5 - v11 + size;
LABEL_34:
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    this->__r_.__value_.__l.__size_ = v17;
  else
    *((_BYTE *)&this->__r_.__value_.__s + 23) = v17 & 0x7F;
  v13->__r_.__value_.__s.__data_[v17] = 0;
  return this;
}

void std::wstring::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("basic_string");
}

void std::wstring::__grow_by_and_replace(std::wstring *this, std::wstring::size_type __old_cap, std::wstring::size_type __delta_cap, std::wstring::size_type __old_sz, std::wstring::size_type __n_copy, std::wstring::size_type __n_del, std::wstring::size_type __n_add, const std::wstring::value_type *__p_new_stuff)
{
  std::wstring *v15;
  std::wstring::size_type v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  std::wstring::size_type v21;
  uint64_t v22;
  uint64_t v23;
  std::wstring::size_type v24;
  std::wstring::size_type v25;

  if (0x3FFFFFFFFFFFFFF6 - __old_cap < __delta_cap)
    std::wstring::__throw_length_error[abi:ne180100]();
  v15 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    v15 = (std::wstring *)this->__r_.__value_.__r.__words[0];
  v16 = __delta_cap + __old_cap;
  if (__delta_cap + __old_cap <= 2 * __old_cap)
    v16 = 2 * __old_cap;
  v17 = (v16 & 0xFFFFFFFFFFFFFFFELL) + 2;
  if ((v16 | 1) != 5)
    v17 = v16 | 1;
  if (v16 >= 5)
    v18 = v17 + 1;
  else
    v18 = 5;
  if (__old_cap > 0x1FFFFFFFFFFFFFF2)
    v19 = 0x3FFFFFFFFFFFFFF7;
  else
    v19 = v18;
  v20 = std::allocator<wchar_t>::allocate_at_least[abi:ne180100]((uint64_t)this, v19);
  v21 = (std::wstring::size_type)v20;
  v23 = v22;
  if (__n_copy)
    memmove(v20, v15, 4 * __n_copy);
  if (__n_add)
    memmove((void *)(v21 + 4 * __n_copy), __p_new_stuff, 4 * __n_add);
  v24 = __old_sz - (__n_del + __n_copy);
  if (v24)
    memmove((void *)(v21 + 4 * __n_copy + 4 * __n_add), (char *)v15 + 4 * __n_copy + 4 * __n_del, 4 * v24);
  if (__old_cap != 4)
    operator delete(v15);
  v25 = __n_add + __n_copy + v24;
  this->__r_.__value_.__r.__words[0] = v21;
  this->__r_.__value_.__l.__size_ = v25;
  this->__r_.__value_.__r.__words[2] = v23 | 0x8000000000000000;
  *(_DWORD *)(v21 + 4 * v25) = 0;
}

std::wstring::size_type std::wstring::rfind(const std::wstring *this, const std::wstring::value_type *__s, std::wstring::size_type __pos, std::wstring::size_type __n)
{
  std::wstring::size_type size;
  const std::wstring *v5;
  std::wstring::size_type v6;
  std::wstring::size_type v7;
  std::wstring::size_type v8;
  const std::wstring *v9;
  const std::wstring *v10;
  const std::wstring *v11;
  uint64_t v12;
  std::wstring::value_type v13;
  std::wstring::value_type v14;

  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    v5 = this;
    this = (const std::wstring *)this->__r_.__value_.__r.__words[0];
    size = v5->__r_.__value_.__l.__size_;
  }
  else
  {
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  }
  if (size >= __pos)
    v6 = __pos;
  else
    v6 = size;
  v7 = size - v6;
  v8 = v6 + __n;
  if (v7 <= __n)
    v8 = size;
  v9 = (const std::wstring *)((char *)this + 4 * v8);
  if (__n && v8)
  {
    v10 = this;
    v11 = (const std::wstring *)((char *)this + 4 * v8);
    do
    {
      if (v10->__r_.__value_.__s.__data_[0] == *__s)
      {
        v12 = 1;
        while (__n != v12)
        {
          if ((const std::wstring *)((char *)v10 + v12 * 4) == v9)
            goto LABEL_22;
          v13 = v10->__r_.__value_.__s.__data_[v12];
          v14 = __s[v12++];
          if (v13 != v14)
            goto LABEL_13;
        }
        v11 = v10;
      }
LABEL_13:
      v10 = (const std::wstring *)((char *)v10 + 4);
    }
    while (v10 != v9);
  }
  else
  {
    v11 = (const std::wstring *)((char *)this + 4 * v8);
  }
LABEL_22:
  if (v11 != v9 || __n == 0)
    return ((char *)v11 - (char *)this) >> 2;
  else
    return -1;
}

void std::wstring::__init(std::wstring *this, const std::wstring::value_type *__s, std::wstring::size_type __sz, std::wstring::size_type __reserve)
{
  std::wstring *v4;
  std::wstring::size_type v7;
  std::wstring *v8;
  uint64_t v9;

  v4 = this;
  if (__reserve >= 0x3FFFFFFFFFFFFFF8)
    std::wstring::__throw_length_error[abi:ne180100]();
  if (__reserve <= 4)
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz & 0x7F;
    if (!__sz)
      goto LABEL_9;
    goto LABEL_8;
  }
  v7 = (__reserve & 0xFFFFFFFFFFFFFFFELL) + 2;
  if ((__reserve | 1) != 5)
    v7 = __reserve | 1;
  v8 = (std::wstring *)std::allocator<wchar_t>::allocate_at_least[abi:ne180100]((uint64_t)this, v7 + 1);
  v4->__r_.__value_.__l.__size_ = __sz;
  v4->__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
  v4->__r_.__value_.__r.__words[0] = (std::wstring::size_type)v8;
  v4 = v8;
  if (__sz)
LABEL_8:
    memmove(v4, __s, 4 * __sz);
LABEL_9:
  v4->__r_.__value_.__s.__data_[__sz] = 0;
}

void std::wstring::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

std::wstring *__cdecl std::wstring::basic_string(std::wstring *this, const std::wstring *__str)
{
  __int128 v3;

  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
  {
    std::wstring::__init_copy_ctor_external(this, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&__str->__r_.__value_.__l.__data_;
    this->__r_.__value_.__r.__words[2] = __str->__r_.__value_.__r.__words[2];
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  return this;
}

{
  __int128 v3;

  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
  {
    std::wstring::__init_copy_ctor_external(this, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&__str->__r_.__value_.__l.__data_;
    this->__r_.__value_.__r.__words[2] = __str->__r_.__value_.__r.__words[2];
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  return this;
}

void std::wstring::__init_copy_ctor_external(std::wstring *this, const std::wstring::value_type *__s, std::wstring::size_type __sz)
{
  std::wstring *v5;
  std::wstring::size_type v6;
  std::wstring *v7;
  uint64_t v8;

  v5 = this;
  if (__sz > 4)
  {
    if (__sz >= 0x3FFFFFFFFFFFFFF8)
      std::wstring::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((__sz | 1) != 5)
      v6 = __sz | 1;
    v7 = (std::wstring *)std::allocator<wchar_t>::allocate_at_least[abi:ne180100]((uint64_t)this, v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::wstring::size_type)v7;
    v5 = v7;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, 4 * __sz + 4);
}

std::wstring *__cdecl std::wstring::replace(std::wstring *this, std::wstring::size_type __pos, std::wstring::size_type __n1, const std::wstring::value_type *__s)
{
  std::wstring::size_type v8;

  v8 = wcslen(__s);
  return std::wstring::replace(this, __pos, __n1, __s, v8);
}

std::wstring *__cdecl std::wstring::basic_string(std::wstring *this, const std::wstring *__str, const std::wstring::allocator_type *__a)
{
  __int128 v4;

  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
  {
    std::wstring::__init_copy_ctor_external(this, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
  }
  else
  {
    v4 = *(_OWORD *)&__str->__r_.__value_.__l.__data_;
    this->__r_.__value_.__r.__words[2] = __str->__r_.__value_.__r.__words[2];
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  return this;
}

{
  __int128 v4;

  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
  {
    std::wstring::__init_copy_ctor_external(this, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
  }
  else
  {
    v4 = *(_OWORD *)&__str->__r_.__value_.__l.__data_;
    this->__r_.__value_.__r.__words[2] = __str->__r_.__value_.__r.__words[2];
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  return this;
}

std::wstring::size_type std::wstring::find_last_not_of(const std::wstring *this, const std::wstring::value_type *__s, std::wstring::size_type __pos, std::wstring::size_type __n)
{
  const std::wstring *v6;
  std::wstring::size_type size;
  uint64_t v8;
  uint64_t v9;
  __int32 *v10;

  v6 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    v6 = (const std::wstring *)this->__r_.__value_.__r.__words[0];
    size = this->__r_.__value_.__l.__size_;
  }
  else
  {
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  }
  if (size > __pos)
    size = __pos + 1;
  v8 = 4 * size - 4;
  while (v8 != -4)
  {
    v9 = v8;
    if (__n)
    {
      v10 = wmemchr((__int32 *)__s, *(std::wstring::value_type *)((char *)v6->__r_.__value_.__s.__data_ + v8), __n);
      v8 = v9 - 4;
      if (v10)
        continue;
    }
    return v9 >> 2;
  }
  return -1;
}

void std::wstring::~wstring(std::wstring *this)
{
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    operator delete(this->__r_.__value_.__l.__data_);
}

{
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    operator delete(this->__r_.__value_.__l.__data_);
}

std::wstring::size_type std::wstring::find_first_not_of(const std::wstring *this, const std::wstring::value_type *__s, std::wstring::size_type __pos, std::wstring::size_type __n)
{
  const std::wstring *v6;
  std::wstring::size_type size;
  __int32 *v8;
  std::wstring::size_type v9;

  v6 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    v6 = (const std::wstring *)this->__r_.__value_.__r.__words[0];
    size = this->__r_.__value_.__l.__size_;
  }
  else
  {
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  }
  if (size <= __pos)
    return -1;
  v8 = (__int32 *)((char *)v6 + 4 * __pos);
  if (__n)
  {
    v9 = 4 * size - 4 * __pos;
    while (wmemchr((__int32 *)__s, *v8, __n))
    {
      ++v8;
      v9 -= 4;
      if (!v9)
        return -1;
    }
  }
  return ((char *)v8 - (char *)v6) >> 2;
}

std::wstring *__cdecl std::wstring::insert(std::wstring *this, std::wstring::size_type __pos, std::wstring::size_type __n, std::wstring::value_type __c)
{
  std::wstring::size_type size;
  std::wstring::size_type v9;
  std::wstring *v10;
  std::wstring::value_type *v11;
  std::wstring::size_type v12;
  std::wstring::size_type v13;

  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    size = this->__r_.__value_.__l.__size_;
  else
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if (size < __pos)
    std::wstring::__throw_out_of_range[abi:ne180100]();
  if (__n)
  {
    if ((*((_BYTE *)&this->__r_.__value_.__s + 23) & 0x80) != 0)
    {
      v9 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (v9 - size >= __n)
      {
        v10 = (std::wstring *)this->__r_.__value_.__r.__words[0];
        goto LABEL_12;
      }
    }
    else
    {
      v9 = 4;
      v10 = this;
      if (4 - size >= __n)
      {
LABEL_12:
        if (size != __pos)
          memmove((char *)v10 + 4 * __pos + 4 * __n, (char *)v10 + 4 * __pos, 4 * (size - __pos));
        goto LABEL_14;
      }
    }
    std::wstring::__grow_by(this, v9, size + __n - v9, size, __pos, 0, __n);
    this->__r_.__value_.__l.__size_ = size + __n;
    v10 = (std::wstring *)this->__r_.__value_.__r.__words[0];
LABEL_14:
    v11 = (std::wstring::value_type *)((char *)v10 + 4 * __pos);
    v12 = __n;
    do
    {
      *v11++ = __c;
      --v12;
    }
    while (v12);
    v13 = size + __n;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      this->__r_.__value_.__l.__size_ = v13;
    else
      *((_BYTE *)&this->__r_.__value_.__s + 23) = v13 & 0x7F;
    v10->__r_.__value_.__s.__data_[v13] = 0;
  }
  return this;
}

std::wstring *__cdecl std::wstring::operator=(std::wstring *this, std::wstring::value_type __c)
{
  std::wstring *v2;

  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    v2 = (std::wstring *)this->__r_.__value_.__r.__words[0];
    this->__r_.__value_.__l.__size_ = 1;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = 1;
    v2 = this;
  }
  v2->__r_.__value_.__s.__data_[0] = __c;
  v2->__r_.__value_.__s.__data_[1] = 0;
  return this;
}

void std::wstring::__init(std::wstring *this, const std::wstring::value_type *__s, std::wstring::size_type __sz)
{
  std::wstring *v3;
  std::wstring::size_type v6;
  std::wstring *v7;
  uint64_t v8;

  v3 = this;
  if (__sz >= 0x3FFFFFFFFFFFFFF8)
    std::wstring::__throw_length_error[abi:ne180100]();
  if (__sz >= 5)
  {
    v6 = (__sz & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((__sz | 1) != 5)
      v6 = __sz | 1;
    v7 = (std::wstring *)std::allocator<wchar_t>::allocate_at_least[abi:ne180100]((uint64_t)this, v6 + 1);
    v3->__r_.__value_.__l.__size_ = __sz;
    v3->__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    v3->__r_.__value_.__r.__words[0] = (std::wstring::size_type)v7;
    v3 = v7;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
    if (!__sz)
      goto LABEL_9;
  }
  memmove(v3, __s, 4 * __sz);
LABEL_9:
  v3->__r_.__value_.__s.__data_[__sz] = 0;
}

std::wstring::const_reference std::wstring::at(const std::wstring *this, std::wstring::size_type __n)
{
  std::wstring::size_type size;

  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    size = this->__r_.__value_.__l.__size_;
  else
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if (size <= __n)
    std::wstring::__throw_out_of_range[abi:ne180100]();
  if ((*((_BYTE *)&this->__r_.__value_.__s + 23) & 0x80) != 0)
    this = (const std::wstring *)this->__r_.__value_.__r.__words[0];
  return (std::wstring::const_reference)((char *)this + 4 * __n);
}

std::wstring *__cdecl std::wstring::insert(std::wstring *this, std::wstring::size_type __pos, const std::wstring::value_type *__s, std::wstring::size_type __n)
{
  const std::wstring::value_type *v5;
  std::wstring::size_type v8;
  std::wstring::size_type v9;
  std::wstring::size_type size;
  std::wstring *v11;
  const std::wstring::value_type *v12;
  std::wstring::size_type v14;
  std::wstring::size_type v15;

  v5 = __s;
  v8 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v8 >= __pos)
    {
      v9 = 4;
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      goto LABEL_6;
    }
LABEL_24:
    std::wstring::__throw_out_of_range[abi:ne180100]();
  }
  size = this->__r_.__value_.__l.__size_;
  if (size < __pos)
    goto LABEL_24;
  v9 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
LABEL_6:
  if (v9 - size >= __n)
  {
    if (__n)
    {
      v11 = this;
      if ((v8 & 0x80) != 0)
        v11 = (std::wstring *)this->__r_.__value_.__r.__words[0];
      if (size != __pos)
      {
        v12 = (const std::wstring::value_type *)((char *)v11 + 4 * __pos);
        if ((char *)v11 + 4 * size <= (char *)__s || v12 > __s)
          v14 = 0;
        else
          v14 = __n;
        v5 = &__s[v14];
        memmove((void *)&v12[__n], v12, 4 * (size - __pos));
      }
      memmove((char *)v11 + 4 * __pos, v5, 4 * __n);
      v15 = size + __n;
      if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
        this->__r_.__value_.__l.__size_ = v15;
      else
        *((_BYTE *)&this->__r_.__value_.__s + 23) = v15 & 0x7F;
      v11->__r_.__value_.__s.__data_[v15] = 0;
    }
  }
  else
  {
    std::wstring::__grow_by_and_replace(this, v9, size + __n - v9, size, __pos, 0, __n, __s);
  }
  return this;
}

std::wstring::size_type std::wstring::find_first_of(const std::wstring *this, const std::wstring::value_type *__s, std::wstring::size_type __pos, std::wstring::size_type __n)
{
  std::wstring::size_type size;
  const std::wstring *v5;
  std::wstring::size_type v6;
  char *v7;
  char *v8;
  std::wstring::size_type v9;
  const std::wstring::value_type *v10;

  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    v5 = this;
    this = (const std::wstring *)this->__r_.__value_.__r.__words[0];
    size = v5->__r_.__value_.__l.__size_;
  }
  else
  {
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  }
  v6 = -1;
  if (__n && size > __pos)
  {
    v7 = (char *)this + 4 * __pos;
    v8 = (char *)this + 4 * size;
LABEL_7:
    v9 = 4 * __n;
    v10 = __s;
    while (*(_DWORD *)v7 != *v10)
    {
      ++v10;
      v9 -= 4;
      if (!v9)
      {
        v7 += 4;
        if (v7 != v8)
          goto LABEL_7;
        v7 = v8;
        break;
      }
    }
    if (v7 == v8)
      return -1;
    else
      return (v7 - (char *)this) >> 2;
  }
  return v6;
}

std::wstring *__cdecl std::wstring::replace(std::wstring *this, std::wstring::size_type __pos, std::wstring::size_type __n1, std::wstring::size_type __n2, std::wstring::value_type __c)
{
  std::wstring::size_type size;
  std::wstring::size_type v10;
  std::wstring::size_type v11;
  std::wstring::size_type v12;
  std::wstring::size_type v13;
  std::wstring *v14;
  std::wstring::size_type v16;
  std::wstring::size_type v17;
  std::wstring::size_type v18;

  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    size = this->__r_.__value_.__l.__size_;
    v10 = size - __pos;
    if (size >= __pos)
    {
      if (v10 >= __n1)
        v11 = __n1;
      else
        v11 = size - __pos;
      v12 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (v11 - size + v12 < __n2)
        goto LABEL_13;
      v14 = (std::wstring *)this->__r_.__value_.__r.__words[0];
      goto LABEL_16;
    }
LABEL_28:
    std::wstring::__throw_out_of_range[abi:ne180100]();
  }
  size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  v10 = size - __pos;
  if (size < __pos)
    goto LABEL_28;
  if (v10 >= __n1)
    v11 = __n1;
  else
    v11 = HIBYTE(this->__r_.__value_.__r.__words[2]) - __pos;
  if (v11 - size + 4 < __n2)
  {
    v12 = 4;
LABEL_13:
    v13 = size + __n2;
    std::wstring::__grow_by(this, v12, size + __n2 - v12 - v11, size, __pos, v11, __n2);
    this->__r_.__value_.__l.__size_ = v13 - v11;
    v14 = (std::wstring *)this->__r_.__value_.__r.__words[0];
LABEL_22:
    v16 = __pos;
    v17 = __n2;
    do
    {
      v14->__r_.__value_.__s.__data_[v16++] = __c;
      --v17;
    }
    while (v17);
    goto LABEL_24;
  }
  v14 = this;
LABEL_16:
  if (v11 != __n2 && v10 != v11)
    memmove((char *)v14 + 4 * __pos + 4 * __n2, (char *)v14 + 4 * __pos + 4 * v11, 4 * (v10 - v11));
  if (__n2)
    goto LABEL_22;
LABEL_24:
  v18 = __n2 - v11 + size;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    this->__r_.__value_.__l.__size_ = v18;
  else
    *((_BYTE *)&this->__r_.__value_.__s + 23) = v18 & 0x7F;
  v14->__r_.__value_.__s.__data_[v18] = 0;
  return this;
}

std::wstring *__cdecl std::wstring::__assign_external(std::wstring *this, const std::wstring::value_type *__s, std::wstring::size_type __n)
{
  unint64_t v6;
  std::wstring *v7;
  std::wstring::size_type size;
  unint64_t v9;
  unint64_t v10;

  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    v10 = this->__r_.__value_.__r.__words[2];
    v9 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v9 < __n)
    {
      size = this->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }
    v6 = HIBYTE(v10);
    v7 = (std::wstring *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    v7 = this;
    if (__n > 4)
    {
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      v9 = 4;
LABEL_6:
      std::wstring::__grow_by_and_replace(this, v9, __n - v9, size, 0, size, __n, __s);
      return this;
    }
  }
  if (__n)
  {
    memmove(v7, __s, 4 * __n);
    LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0)
    this->__r_.__value_.__l.__size_ = __n;
  else
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
  v7->__r_.__value_.__s.__data_[__n] = 0;
  return this;
}

void std::wstring::reserve(std::wstring *this, std::wstring::size_type __requested_capacity)
{
  unint64_t v3;
  std::wstring::size_type v4;
  std::wstring::size_type v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::wstring::size_type v10;
  std::wstring::size_type v11;
  uint64_t v12;
  unint64_t v13;
  _BOOL4 v14;
  std::wstring *v15;
  void *v16;
  unint64_t v17;
  std::wstring::size_type size;
  BOOL v19;
  std::wstring::size_type v20;

  if (__requested_capacity >= 0x3FFFFFFFFFFFFFF8)
    std::wstring::__throw_length_error[abi:ne180100]();
  LODWORD(v3) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v3 & 0x80000000) == 0)
  {
    if (__requested_capacity <= 4)
      return;
    v4 = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v5 = v4 <= __requested_capacity ? __requested_capacity : HIBYTE(this->__r_.__value_.__r.__words[2]);
    v6 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 2;
    v7 = v5 | 1;
    v8 = v7 == 5 ? v6 : v7;
    if (v8 == 4)
      return;
LABEL_23:
    v13 = v8 + 1;
    v14 = v8 < 5;
    if (v8 >= 5)
    {
      v16 = std::allocator<wchar_t>::allocate_at_least[abi:ne180100]((uint64_t)this, v8 + 1);
      v13 = v17;
      LODWORD(v3) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
      if ((v3 & 0x80000000) != 0)
      {
        v15 = (std::wstring *)this->__r_.__value_.__r.__words[0];
LABEL_30:
        size = this->__r_.__value_.__l.__size_;
        v14 = 1;
        goto LABEL_31;
      }
      v15 = this;
    }
    else
    {
      v15 = (std::wstring *)this->__r_.__value_.__r.__words[0];
      v16 = this;
      if ((v3 & 0x80) != 0)
        goto LABEL_30;
    }
    size = v3;
LABEL_31:
    v19 = __CFADD__(size, 1);
    v20 = size + 1;
    if (!v19)
      memmove(v16, v15, 4 * v20);
    if (v14)
      operator delete(v15);
    if (v8 >= 5)
    {
      this->__r_.__value_.__l.__size_ = v4;
      this->__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
      this->__r_.__value_.__r.__words[0] = (std::wstring::size_type)v16;
    }
    else
    {
      *((_BYTE *)&this->__r_.__value_.__s + 23) = v4 & 0x7F;
    }
    return;
  }
  v9 = this->__r_.__value_.__r.__words[2];
  v10 = (v9 & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v10 < __requested_capacity)
  {
    v4 = this->__r_.__value_.__l.__size_;
    if (v4 <= __requested_capacity)
      v11 = __requested_capacity;
    else
      v11 = this->__r_.__value_.__l.__size_;
    v12 = (v11 & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((v11 | 1) != 5)
      v12 = v11 | 1;
    v8 = v11 >= 5 ? v12 : 4;
    if (v8 != v10)
    {
      v3 = HIBYTE(v9);
      goto LABEL_23;
    }
  }
}

void sub_191FC6634(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

std::wstring *__cdecl std::wstring::append(std::wstring *this, const std::wstring::value_type *__s, std::wstring::size_type __n)
{
  std::wstring::size_type v6;
  std::wstring::size_type size;
  std::wstring *v8;
  std::wstring::size_type v9;

  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    size = this->__r_.__value_.__l.__size_;
    v6 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  }
  else
  {
    v6 = 4;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  }
  if (v6 - size >= __n)
  {
    if (__n)
    {
      v8 = this;
      if ((*((_BYTE *)&this->__r_.__value_.__s + 23) & 0x80) != 0)
        v8 = (std::wstring *)this->__r_.__value_.__r.__words[0];
      memmove((char *)v8 + 4 * size, __s, 4 * __n);
      v9 = size + __n;
      if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
        this->__r_.__value_.__l.__size_ = v9;
      else
        *((_BYTE *)&this->__r_.__value_.__s + 23) = v9 & 0x7F;
      v8->__r_.__value_.__s.__data_[v9] = 0;
    }
  }
  else
  {
    std::wstring::__grow_by_and_replace(this, v6, __n - v6 + size, size, size, 0, __n, __s);
  }
  return this;
}

std::wstring *__cdecl std::wstring::assign(std::wstring *this, const std::wstring *__str, std::wstring::size_type __pos, std::wstring::size_type __n)
{
  std::wstring::size_type size;
  std::wstring::size_type v5;

  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
  {
    size = __str->__r_.__value_.__l.__size_;
    if (size < __pos)
      goto LABEL_9;
    __str = (const std::wstring *)__str->__r_.__value_.__r.__words[0];
  }
  else
  {
    size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    if (size < __pos)
LABEL_9:
      std::wstring::__throw_out_of_range[abi:ne180100]();
  }
  v5 = size - __pos;
  if (v5 >= __n)
    v5 = __n;
  return std::wstring::__assign_external(this, (const std::wstring::value_type *)__str + __pos, v5);
}

std::wstring::size_type std::wstring::copy(const std::wstring *this, std::wstring::value_type *__s, std::wstring::size_type __n, std::wstring::size_type __pos)
{
  std::wstring::size_type v4;
  BOOL v5;
  std::wstring::size_type v6;
  std::wstring::size_type v7;
  std::wstring::size_type size;
  std::wstring::size_type v10;

  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    size = this->__r_.__value_.__l.__size_;
    v5 = size >= __pos;
    v10 = size - __pos;
    if (!v5)
LABEL_17:
      std::wstring::__throw_out_of_range[abi:ne180100]();
    if (v10 >= __n)
      v7 = __n;
    else
      v7 = v10;
    this = (const std::wstring *)this->__r_.__value_.__r.__words[0];
    if (v7)
      goto LABEL_8;
  }
  else
  {
    v4 = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v5 = v4 >= __pos;
    v6 = v4 - __pos;
    if (!v5)
      goto LABEL_17;
    if (v6 >= __n)
      v7 = __n;
    else
      v7 = v6;
    if (v7)
LABEL_8:
      memmove(__s, (char *)this + 4 * __pos, 4 * v7);
  }
  return v7;
}

std::wstring *__cdecl std::wstring::basic_string(std::wstring *this, const std::wstring *__str, std::wstring::size_type __pos, std::wstring::size_type __n, std::allocator<wchar_t> *__a)
{
  const std::wstring *v6;
  std::wstring::size_type size;
  std::wstring::size_type v9;
  std::wstring::size_type v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;

  v6 = __str;
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
  {
    size = __str->__r_.__value_.__l.__size_;
    if (size < __pos)
      goto LABEL_18;
    v6 = (const std::wstring *)__str->__r_.__value_.__r.__words[0];
  }
  else
  {
    size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    if (size < __pos)
LABEL_18:
      std::wstring::__throw_out_of_range[abi:ne180100]();
  }
  v9 = size - __pos;
  if (v9 >= __n)
    v10 = __n;
  else
    v10 = v9;
  if (v10 >= 0x3FFFFFFFFFFFFFF8)
    std::wstring::__throw_length_error[abi:ne180100]();
  if (v10 >= 5)
  {
    v12 = (v10 & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((v10 | 1) != 5)
      v12 = v10 | 1;
    v11 = std::allocator<wchar_t>::allocate_at_least[abi:ne180100]((uint64_t)this, v12 + 1);
    this->__r_.__value_.__l.__size_ = v10;
    this->__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
    this->__r_.__value_.__r.__words[0] = (std::wstring::size_type)v11;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = v10;
    v11 = this;
    if (!v10)
      goto LABEL_17;
  }
  memmove(v11, (char *)v6 + 4 * __pos, 4 * v10);
LABEL_17:
  *((_DWORD *)v11 + v10) = 0;
  return this;
}

std::wstring::size_type std::wstring::find(const std::wstring *this, std::wstring::value_type __c, std::wstring::size_type __pos)
{
  const std::wstring *v3;
  std::wstring::size_type size;
  BOOL v5;
  size_t v6;
  __int32 *v7;

  v3 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    v3 = (const std::wstring *)this->__r_.__value_.__r.__words[0];
    size = this->__r_.__value_.__l.__size_;
  }
  else
  {
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  }
  v5 = size > __pos;
  v6 = size - __pos;
  if (!v5)
    return -1;
  v7 = wmemchr((__int32 *)v3 + __pos, __c, v6);
  if (v7)
    return ((char *)v7 - (char *)v3) >> 2;
  else
    return -1;
}

void std::wstring::__init(std::wstring *this, std::wstring::size_type __n, std::wstring::value_type __c)
{
  std::wstring *v3;
  std::wstring::size_type v6;
  std::wstring *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = this;
  if (__n >= 0x3FFFFFFFFFFFFFF8)
    std::wstring::__throw_length_error[abi:ne180100]();
  if (__n >= 5)
  {
    v6 = (__n & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((__n | 1) != 5)
      v6 = __n | 1;
    v7 = (std::wstring *)std::allocator<wchar_t>::allocate_at_least[abi:ne180100]((uint64_t)this, v6 + 1);
    v3->__r_.__value_.__l.__size_ = __n;
    v3->__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    v3->__r_.__value_.__r.__words[0] = (std::wstring::size_type)v7;
    v3 = v7;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __n;
    if (!__n)
      goto LABEL_10;
  }
  v9 = 0;
  do
    v3->__r_.__value_.__s.__data_[v9++] = __c;
  while (__n != v9);
LABEL_10:
  v3->__r_.__value_.__s.__data_[__n] = 0;
}

std::wstring *__cdecl std::wstring::insert(std::wstring *this, std::wstring::size_type __pos, const std::wstring::value_type *__s)
{
  std::wstring::size_type v6;

  v6 = wcslen(__s);
  return std::wstring::insert(this, __pos, __s, v6);
}

std::wstring::size_type std::wstring::find_last_of(const std::wstring *this, const std::wstring::value_type *__s, std::wstring::size_type __pos, std::wstring::size_type __n)
{
  std::wstring::size_type size;
  const std::wstring *v7;
  uint64_t v8;
  unsigned __int8 *padding;
  __int32 *v10;

  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    v7 = this;
    this = (const std::wstring *)this->__r_.__value_.__r.__words[0];
    size = v7->__r_.__value_.__l.__size_;
    if (!__n)
      return -1;
  }
  else
  {
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    if (!__n)
      return -1;
  }
  if (size > __pos)
    size = __pos + 1;
  v8 = 4 * size;
  padding = this[-1].__r_.__value_.__s.__padding_;
  while (v8)
  {
    v10 = wmemchr((__int32 *)__s, *(_DWORD *)&padding[v8], __n);
    v8 -= 4;
    if (v10)
      return v8 >> 2;
  }
  return -1;
}

void std::wstring::__grow_by(std::wstring *this, std::wstring::size_type __old_cap, std::wstring::size_type __delta_cap, std::wstring::size_type __old_sz, std::wstring::size_type __n_copy, std::wstring::size_type __n_del, std::wstring::size_type __n_add)
{
  std::wstring *v13;
  std::wstring::size_type v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  std::wstring::size_type v19;
  uint64_t v20;
  uint64_t v21;

  if (0x3FFFFFFFFFFFFFF7 - __old_cap < __delta_cap)
    std::wstring::__throw_length_error[abi:ne180100]();
  v13 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    v13 = (std::wstring *)this->__r_.__value_.__r.__words[0];
  v14 = __delta_cap + __old_cap;
  if (__delta_cap + __old_cap <= 2 * __old_cap)
    v14 = 2 * __old_cap;
  v15 = (v14 & 0xFFFFFFFFFFFFFFFELL) + 2;
  if ((v14 | 1) != 5)
    v15 = v14 | 1;
  if (v14 >= 5)
    v16 = v15 + 1;
  else
    v16 = 5;
  if (__old_cap <= 0x1FFFFFFFFFFFFFF2)
    v17 = v16;
  else
    v17 = 0x3FFFFFFFFFFFFFF7;
  v18 = std::allocator<wchar_t>::allocate_at_least[abi:ne180100]((uint64_t)this, v17);
  v19 = (std::wstring::size_type)v18;
  v21 = v20;
  if (__n_copy)
    memmove(v18, v13, 4 * __n_copy);
  if (__old_sz != __n_del + __n_copy)
    memmove((void *)(v19 + 4 * __n_copy + 4 * __n_add), (char *)v13 + 4 * __n_copy + 4 * __n_del, 4 * (__old_sz - (__n_del + __n_copy)));
  if (__old_cap != 4)
    operator delete(v13);
  this->__r_.__value_.__r.__words[0] = v19;
  this->__r_.__value_.__r.__words[2] = v21 | 0x8000000000000000;
}

void std::wstring::push_back(std::wstring *this, std::wstring::value_type __c)
{
  std::wstring *v3;
  std::wstring::size_type v4;
  std::wstring::size_type size;
  std::wstring::value_type *v6;

  v3 = this;
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((_BYTE *)&this->__r_.__value_.__s + 23) != 4)
    {
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      *((_BYTE *)&this->__r_.__value_.__s + 23) = (*((_BYTE *)&this->__r_.__value_.__s + 23) + 1) & 0x7F;
      goto LABEL_8;
    }
    v4 = 4;
    goto LABEL_5;
  }
  size = this->__r_.__value_.__l.__size_;
  v4 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (size == v4)
  {
LABEL_5:
    std::wstring::__grow_by(this, v4, 1uLL, v4, v4, 0, 0);
    size = v4;
  }
  v3->__r_.__value_.__l.__size_ = size + 1;
  v3 = (std::wstring *)v3->__r_.__value_.__r.__words[0];
LABEL_8:
  v6 = (std::wstring::value_type *)((char *)v3 + 4 * size);
  *v6 = __c;
  v6[1] = 0;
}

std::wstring *__cdecl std::wstring::append(std::wstring *this, std::wstring::size_type __n, std::wstring::value_type __c)
{
  unint64_t v6;
  std::wstring::size_type size;
  std::wstring::size_type v8;
  unint64_t v9;
  std::wstring *v10;
  std::wstring::value_type *v11;
  std::wstring::size_type v12;
  std::wstring::size_type v13;

  if (__n)
  {
    LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
    if ((v6 & 0x80000000) != 0)
    {
      size = this->__r_.__value_.__l.__size_;
      v9 = this->__r_.__value_.__r.__words[2];
      v8 = (v9 & 0x7FFFFFFFFFFFFFFFLL) - 1;
      v6 = HIBYTE(v9);
    }
    else
    {
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      v8 = 4;
    }
    if (v8 - size < __n)
    {
      std::wstring::__grow_by(this, v8, __n - v8 + size, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    }
    v10 = this;
    if ((v6 & 0x80) != 0)
      v10 = (std::wstring *)this->__r_.__value_.__r.__words[0];
    v11 = (std::wstring::value_type *)((char *)v10 + 4 * size);
    v12 = __n;
    do
    {
      *v11++ = __c;
      --v12;
    }
    while (v12);
    v13 = size + __n;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      this->__r_.__value_.__l.__size_ = v13;
    else
      *((_BYTE *)&this->__r_.__value_.__s + 23) = v13 & 0x7F;
    v10->__r_.__value_.__s.__data_[v13] = 0;
  }
  return this;
}

std::wstring::size_type std::wstring::rfind(const std::wstring *this, std::wstring::value_type __c, std::wstring::size_type __pos)
{
  std::wstring::size_type size;
  const std::wstring *v4;
  uint64_t v5;
  int v6;

  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    v4 = this;
    this = (const std::wstring *)this->__r_.__value_.__r.__words[0];
    size = v4->__r_.__value_.__l.__size_;
    if (!size)
      return -1;
  }
  else
  {
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    if (!*((_BYTE *)&this->__r_.__value_.__s + 23))
      return -1;
  }
  if (size > __pos)
    size = __pos + 1;
  v5 = 4 * size;
  while (v5)
  {
    v6 = *(_DWORD *)((char *)&this[-1].__r_.__value_.__r.__words[2] + v5 + 4);
    v5 -= 4;
    if (v6 == __c)
      return v5 >> 2;
  }
  return -1;
}

std::wstring *__cdecl std::wstring::assign(std::wstring *this, std::wstring::size_type __n, std::wstring::value_type __c)
{
  unint64_t v6;
  std::wstring *v7;
  std::wstring::size_type size;
  unint64_t v9;
  unint64_t v10;
  std::wstring *v11;
  std::wstring::size_type v12;

  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    v10 = this->__r_.__value_.__r.__words[2];
    v9 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v9 >= __n)
    {
      v6 = HIBYTE(v10);
      if ((v10 & 0x8000000000000000) == 0)
        goto LABEL_7;
      goto LABEL_17;
    }
    size = this->__r_.__value_.__l.__size_;
  }
  else
  {
    v7 = this;
    if (__n <= 4)
      goto LABEL_8;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v9 = 4;
  }
  std::wstring::__grow_by(this, v9, __n - v9, size, 0, size, 0);
  this->__r_.__value_.__l.__size_ = 0;
  LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
  if ((v6 & 0x80) == 0)
  {
LABEL_7:
    v7 = this;
LABEL_8:
    if (__n)
      goto LABEL_9;
    goto LABEL_12;
  }
LABEL_17:
  v7 = (std::wstring *)this->__r_.__value_.__r.__words[0];
  if (__n)
  {
LABEL_9:
    v11 = v7;
    v12 = __n;
    do
    {
      v11->__r_.__value_.__s.__data_[0] = __c;
      v11 = (std::wstring *)((char *)v11 + 4);
      --v12;
    }
    while (v12);
    LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
  }
LABEL_12:
  if ((v6 & 0x80) != 0)
    this->__r_.__value_.__l.__size_ = __n;
  else
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
  v7->__r_.__value_.__s.__data_[__n] = 0;
  return this;
}

std::wstring *__cdecl std::wstring::erase(std::wstring *this, std::wstring::size_type __pos, std::wstring::size_type __n)
{
  std::wstring::size_type size;
  std::wstring *v5;

  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    size = this->__r_.__value_.__l.__size_;
  else
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if (size < __pos)
    std::wstring::__throw_out_of_range[abi:ne180100]();
  if (__n == -1)
  {
    if ((*((_BYTE *)&this->__r_.__value_.__s + 23) & 0x80) != 0)
    {
      v5 = (std::wstring *)this->__r_.__value_.__r.__words[0];
      this->__r_.__value_.__l.__size_ = __pos;
    }
    else
    {
      *((_BYTE *)&this->__r_.__value_.__s + 23) = __pos & 0x7F;
      v5 = this;
    }
    v5->__r_.__value_.__s.__data_[__pos] = 0;
  }
  else
  {
    std::wstring::__erase_external_with_move(this, __pos, __n);
  }
  return this;
}

void std::wstring::__erase_external_with_move(std::wstring *this, std::wstring::size_type __pos, std::wstring::size_type __n)
{
  int v4;
  std::wstring::size_type size;
  std::wstring *v6;
  std::wstring::size_type v7;
  std::wstring::size_type v8;

  if (__n)
  {
    v4 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
    if (v4 < 0)
    {
      v6 = (std::wstring *)this->__r_.__value_.__r.__words[0];
      size = this->__r_.__value_.__l.__size_;
    }
    else
    {
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      v6 = this;
    }
    if (size - __pos >= __n)
      v7 = __n;
    else
      v7 = size - __pos;
    if (size - __pos > __n)
    {
      memmove((char *)v6 + 4 * __pos, (char *)v6 + 4 * __pos + 4 * v7, 4 * (size - __pos - v7));
      LOBYTE(v4) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    }
    v8 = size - v7;
    if ((v4 & 0x80) != 0)
      this->__r_.__value_.__l.__size_ = v8;
    else
      *((_BYTE *)&this->__r_.__value_.__s + 23) = v8 & 0x7F;
    v6->__r_.__value_.__s.__data_[v8] = 0;
  }
}

std::wstring *__cdecl std::wstring::append(std::wstring *this, const std::wstring *__str, std::wstring::size_type __pos, std::wstring::size_type __n)
{
  std::wstring::size_type size;
  const std::wstring::value_type *v5;
  std::wstring::size_type v6;
  std::wstring::size_type v7;

  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
  {
    size = __str->__r_.__value_.__l.__size_;
    if (size < __pos)
      goto LABEL_10;
    __str = (const std::wstring *)__str->__r_.__value_.__r.__words[0];
  }
  else
  {
    size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    if (size < __pos)
LABEL_10:
      std::wstring::__throw_out_of_range[abi:ne180100]();
  }
  v5 = (const std::wstring::value_type *)((char *)__str + 4 * __pos);
  v6 = size - __pos;
  if (v6 >= __n)
    v7 = __n;
  else
    v7 = v6;
  return std::wstring::append(this, v5, v7);
}

int std::wstring::compare(const std::wstring *this, const std::wstring::value_type *__s)
{
  size_t v4;
  size_t v5;
  std::wstring::size_type size;
  const std::wstring *v7;
  size_t v8;
  int result;

  v4 = wcslen(__s);
  v5 = v4;
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v4 != -1)
    {
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      goto LABEL_6;
    }
LABEL_15:
    std::wstring::__throw_out_of_range[abi:ne180100]();
  }
  if (v4 == -1)
    goto LABEL_15;
  v7 = this;
  this = (const std::wstring *)this->__r_.__value_.__r.__words[0];
  size = v7->__r_.__value_.__l.__size_;
LABEL_6:
  if (size >= v4)
    v8 = v4;
  else
    v8 = size;
  if (!v8 || (result = wmemcmp((const __int32 *)this, __s, v8)) == 0)
  {
    if (size < v5)
      return -1;
    else
      return size > v5;
  }
  return result;
}

int std::wstring::compare(const std::wstring *this, std::wstring::size_type __pos1, std::wstring::size_type __n1, const std::wstring::value_type *__s, std::wstring::size_type __n2)
{
  std::wstring::size_type v6;
  BOOL v7;
  std::wstring::size_type v8;
  std::wstring::size_type v9;
  std::wstring::size_type size;
  std::wstring::size_type v11;
  std::wstring::size_type v12;
  int result;

  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    if (__n2 == -1 || (size = this->__r_.__value_.__l.__size_, v7 = size >= __pos1, v11 = size - __pos1, !v7))
LABEL_24:
      std::wstring::__throw_out_of_range[abi:ne180100]();
    if (v11 >= __n1)
      v9 = __n1;
    else
      v9 = v11;
    this = (const std::wstring *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    if (__n2 == -1)
      goto LABEL_24;
    v6 = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v7 = v6 >= __pos1;
    v8 = v6 - __pos1;
    if (!v7)
      goto LABEL_24;
    if (v8 >= __n1)
      v9 = __n1;
    else
      v9 = v8;
  }
  if (v9 >= __n2)
    v12 = __n2;
  else
    v12 = v9;
  if (!v12 || (result = wmemcmp((const __int32 *)this + __pos1, __s, v12)) == 0)
  {
    if (v9 < __n2)
      return -1;
    else
      return v9 > __n2;
  }
  return result;
}

int std::wstring::compare(const std::wstring *this, std::wstring::size_type __pos1, std::wstring::size_type __n1, const std::wstring::value_type *__s)
{
  std::wstring::size_type v8;
  std::wstring::size_type v9;
  std::wstring::size_type v10;
  BOOL v11;
  std::wstring::size_type v12;
  std::wstring::size_type size;
  std::wstring::size_type v14;
  std::wstring::size_type v15;
  int result;

  v8 = wcslen(__s);
  v9 = v8;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    if (v8 == -1 || (size = this->__r_.__value_.__l.__size_, v11 = size >= __pos1, v14 = size - __pos1, !v11))
LABEL_23:
      std::wstring::__throw_out_of_range[abi:ne180100]();
    if (v14 < __n1)
      __n1 = v14;
    this = (const std::wstring *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    if (v8 == -1)
      goto LABEL_23;
    v10 = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v11 = v10 >= __pos1;
    v12 = v10 - __pos1;
    if (!v11)
      goto LABEL_23;
    if (v12 < __n1)
      __n1 = v12;
  }
  if (__n1 >= v8)
    v15 = v8;
  else
    v15 = __n1;
  if (!v15 || (result = wmemcmp((const __int32 *)this + __pos1, __s, v15)) == 0)
  {
    if (__n1 < v9)
      return -1;
    else
      return __n1 > v9;
  }
  return result;
}

std::wstring::reference std::wstring::at(std::wstring *this, std::wstring::size_type __n)
{
  std::wstring::size_type size;

  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    size = this->__r_.__value_.__l.__size_;
  else
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if (size <= __n)
    std::wstring::__throw_out_of_range[abi:ne180100]();
  if ((*((_BYTE *)&this->__r_.__value_.__s + 23) & 0x80) != 0)
    this = (std::wstring *)this->__r_.__value_.__r.__words[0];
  return (std::wstring::reference)((char *)this + 4 * __n);
}

std::wstring *__cdecl std::wstring::__assign_external(std::wstring *this, const std::wstring::value_type *__s)
{
  std::wstring::size_type v4;

  v4 = wcslen(__s);
  return std::wstring::__assign_external(this, __s, v4);
}

std::wstring::size_type std::wstring::find(const std::wstring *this, const std::wstring::value_type *__s, std::wstring::size_type __pos, std::wstring::size_type __n)
{
  const std::wstring *v6;
  std::wstring::size_type size;
  __int32 *v8;
  __int32 *v9;
  uint64_t v10;
  __int32 *v11;
  std::wstring::value_type v13;
  std::wstring::size_type v14;
  __int32 *v15;

  v6 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    v6 = (const std::wstring *)this->__r_.__value_.__r.__words[0];
    size = this->__r_.__value_.__l.__size_;
  }
  else
  {
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  }
  if (size < __pos)
    return -1;
  if (__n)
  {
    v8 = (__int32 *)((char *)v6 + 4 * __pos);
    v9 = (__int32 *)((char *)v6 + 4 * size);
    v10 = v9 - v8;
    if (v10 >= (uint64_t)__n)
    {
      v13 = *__s;
      do
      {
        v14 = v10 - __n;
        if (v14 == -1)
          break;
        v15 = wmemchr(v8, v13, v14 + 1);
        if (!v15)
          break;
        v11 = v15;
        if (!wmemcmp(v15, __s, __n))
          goto LABEL_9;
        v8 = v11 + 1;
        v10 = v9 - (v11 + 1);
      }
      while (v10 >= (uint64_t)__n);
    }
    v11 = v9;
LABEL_9:
    if (v11 == v9)
      return -1;
    else
      return ((char *)v11 - (char *)v6) >> 2;
  }
  return __pos;
}

int std::wstring::compare(const std::wstring *this, std::wstring::size_type __pos1, std::wstring::size_type __n1, const std::wstring *__str, std::wstring::size_type __pos2, std::wstring::size_type __n2)
{
  std::wstring::size_type size;
  int v7;
  std::wstring::size_type v8;
  const std::wstring *v9;
  std::basic_string_view<_CharT, _Traits>::size_type v10;
  std::wstring::size_type v11;
  BOOL v12;
  std::basic_string_view<_CharT, _Traits>::size_type v13;
  const std::wstring *v14;
  std::wstring_view v15;
  std::wstring_view v17;

  size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  v7 = (char)size;
  if ((size & 0x80u) != 0)
    size = __str->__r_.__value_.__l.__size_;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    v9 = this;
    this = (const std::wstring *)this->__r_.__value_.__r.__words[0];
    v8 = v9->__r_.__value_.__l.__size_;
  }
  else
  {
    v8 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  }
  v10 = v8 - __pos1;
  if (v8 < __pos1)
    goto LABEL_18;
  v11 = __str->__r_.__value_.__r.__words[0];
  if (v10 >= __n1)
    v10 = __n1;
  v17.__data_ = (const std::wstring_view::value_type *)((char *)this + 4 * __pos1);
  v17.__size_ = v10;
  v12 = size >= __pos2;
  v13 = size - __pos2;
  if (!v12)
LABEL_18:
    std::__throw_out_of_range[abi:ne180100]("string_view::substr");
  if (v7 >= 0)
    v14 = __str;
  else
    v14 = (const std::wstring *)v11;
  if (v13 >= __n2)
    v15.__size_ = __n2;
  else
    v15.__size_ = v13;
  v15.__data_ = (const std::wstring_view::value_type *)((char *)v14 + 4 * __pos2);
  return std::wstring_view::compare(&v17, v15);
}

std::wstring *__cdecl std::wstring::operator=(std::wstring *this, const std::wstring *__str)
{
  __int128 v2;
  std::wstring::size_type size;
  std::wstring::size_type v4;

  if (this != __str)
  {
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    {
      size = __str->__r_.__value_.__l.__size_;
      if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      {
        v4 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
      }
      else
      {
        __str = (const std::wstring *)__str->__r_.__value_.__r.__words[0];
        v4 = size;
      }
      return std::wstring::__assign_no_alias<false>(this, (const std::wstring::value_type *)__str, v4);
    }
    else if ((*((_BYTE *)&__str->__r_.__value_.__s + 23) & 0x80) != 0)
    {
      return std::wstring::__assign_no_alias<true>(this, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
    }
    else
    {
      v2 = *(_OWORD *)&__str->__r_.__value_.__l.__data_;
      this->__r_.__value_.__r.__words[2] = __str->__r_.__value_.__r.__words[2];
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v2;
    }
  }
  return this;
}

std::wstring *std::wstring::__assign_no_alias<true>(std::wstring *__dst, const std::wstring::value_type *__src, std::wstring::size_type __n_add)
{
  BOOL v5;
  std::wstring::size_type v6;

  v5 = __n_add > 4;
  v6 = __n_add - 4;
  if (v5)
  {
    std::wstring::__grow_by_and_replace(__dst, 4uLL, v6, *((_BYTE *)&__dst->__r_.__value_.__s + 23) & 0x7F, 0, *((_BYTE *)&__dst->__r_.__value_.__s + 23) & 0x7F, __n_add, __src);
  }
  else
  {
    *((_BYTE *)&__dst->__r_.__value_.__s + 23) = __n_add;
    if (__n_add)
      memmove(__dst, __src, 4 * __n_add);
    __dst->__r_.__value_.__s.__data_[__n_add] = 0;
  }
  return __dst;
}

std::wstring *std::wstring::__assign_no_alias<false>(std::wstring *this, const std::wstring::value_type *__src, std::wstring::size_type __n_add)
{
  std::wstring::size_type v5;
  void *v6;

  v5 = this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL;
  if (v5 <= __n_add)
  {
    std::wstring::__grow_by_and_replace(this, v5 - 1, __n_add - v5 + 1, this->__r_.__value_.__l.__size_, 0, this->__r_.__value_.__l.__size_, __n_add, __src);
  }
  else
  {
    v6 = (void *)this->__r_.__value_.__r.__words[0];
    this->__r_.__value_.__l.__size_ = __n_add;
    if (__n_add)
      memmove(v6, __src, 4 * __n_add);
    *((_DWORD *)v6 + __n_add) = 0;
  }
  return this;
}

std::wstring *__cdecl std::wstring::append(std::wstring *this, const std::wstring::value_type *__s)
{
  std::wstring::size_type v4;

  v4 = wcslen(__s);
  return std::wstring::append(this, __s, v4);
}

std::wstring *__cdecl std::wstring::replace(std::wstring *this, std::wstring::size_type __pos1, std::wstring::size_type __n1, const std::wstring *__str, std::wstring::size_type __pos2, std::wstring::size_type __n2)
{
  std::wstring::size_type size;
  const std::wstring::value_type *v7;
  std::wstring::size_type v8;
  std::wstring::size_type v9;

  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
  {
    size = __str->__r_.__value_.__l.__size_;
    if (size < __pos2)
      goto LABEL_10;
    __str = (const std::wstring *)__str->__r_.__value_.__r.__words[0];
  }
  else
  {
    size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    if (size < __pos2)
LABEL_10:
      std::wstring::__throw_out_of_range[abi:ne180100]();
  }
  v7 = (const std::wstring::value_type *)((char *)__str + 4 * __pos2);
  v8 = size - __pos2;
  if (v8 >= __n2)
    v9 = __n2;
  else
    v9 = v8;
  return std::wstring::replace(this, __pos1, __n1, v7, v9);
}

std::wstring::iterator std::wstring::insert(std::wstring *this, std::wstring::const_iterator __pos, std::wstring::value_type __c)
{
  std::wstring *v4;
  std::wstring::size_type size;
  std::wstring::size_type v6;
  std::wstring *v7;
  std::wstring::size_type v8;

  v4 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    v7 = (std::wstring *)this->__r_.__value_.__r.__words[0];
    size = this->__r_.__value_.__l.__size_;
    v6 = (uint64_t)((uint64_t)__pos.__i_ - this->__r_.__value_.__r.__words[0]) >> 2;
    if ((this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1 == size)
      goto LABEL_5;
LABEL_7:
    if (size == v6)
      v6 = size;
    else
      memmove((char *)v7->__r_.__value_.__r.__words + 4 * v6 + 4, (char *)v7 + 4 * v6, 4 * (size - v6));
    goto LABEL_10;
  }
  size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  v6 = ((char *)__pos.__i_ - (char *)this) >> 2;
  if (*((_BYTE *)&this->__r_.__value_.__s + 23) != 4)
  {
    v7 = this;
    goto LABEL_7;
  }
  size = 4;
LABEL_5:
  std::wstring::__grow_by(this, size, 1uLL, size, v6, 0, 1uLL);
  v4->__r_.__value_.__l.__size_ = size + 1;
  v7 = (std::wstring *)v4->__r_.__value_.__r.__words[0];
LABEL_10:
  v7->__r_.__value_.__s.__data_[v6] = __c;
  v8 = size + 1;
  v7->__r_.__value_.__s.__data_[size + 1] = 0;
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    v4->__r_.__value_.__l.__size_ = v8;
    v4 = (std::wstring *)v4->__r_.__value_.__r.__words[0];
  }
  else
  {
    *((_BYTE *)&v4->__r_.__value_.__s + 23) = v8 & 0x7F;
  }
  return (std::wstring::iterator)((char *)v4 + 4 * v6);
}

void std::wstring::resize(std::wstring *this, std::wstring::size_type __n, std::wstring::value_type __c)
{
  std::wstring::size_type size;

  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    size = this->__r_.__value_.__l.__size_;
    if (size >= __n)
    {
      this->__r_.__value_.__l.__size_ = __n;
      this = (std::wstring *)this->__r_.__value_.__r.__words[0];
      goto LABEL_7;
    }
LABEL_5:
    std::wstring::append(this, __n - size, __c);
    return;
  }
  size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if (size < __n)
    goto LABEL_5;
  *((_BYTE *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
LABEL_7:
  this->__r_.__value_.__s.__data_[__n] = 0;
}

std::wstring *__cdecl std::wstring::insert(std::wstring *this, std::wstring::size_type __pos1, const std::wstring *__str, std::wstring::size_type __pos2, std::wstring::size_type __n)
{
  std::wstring::size_type size;
  const std::wstring::value_type *v6;
  std::wstring::size_type v7;
  std::wstring::size_type v8;

  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
  {
    size = __str->__r_.__value_.__l.__size_;
    if (size < __pos2)
      goto LABEL_10;
    __str = (const std::wstring *)__str->__r_.__value_.__r.__words[0];
  }
  else
  {
    size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    if (size < __pos2)
LABEL_10:
      std::wstring::__throw_out_of_range[abi:ne180100]();
  }
  v6 = (const std::wstring::value_type *)((char *)__str + 4 * __pos2);
  v7 = size - __pos2;
  if (v7 >= __n)
    v8 = __n;
  else
    v8 = v7;
  return std::wstring::insert(this, __pos1, v6, v8);
}

uint64_t std::operator+<char>@<X0>(const char *a1@<X0>, const void **a2@<X1>, void **a3@<X8>)
{
  size_t v6;
  size_t v7;
  size_t v8;
  uint64_t result;
  const void *v10;

  v6 = strlen(a1);
  v7 = v6;
  if (*((char *)a2 + 23) >= 0)
    v8 = *((unsigned __int8 *)a2 + 23);
  else
    v8 = (size_t)a2[1];
  result = std::string::basic_string[abi:ne180100]((uint64_t)a3, v8 + v6);
  if (*((char *)a3 + 23) < 0)
    a3 = (void **)*a3;
  if (v7)
    result = (uint64_t)memmove(a3, a1, v7);
  if (v8)
  {
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = *a2;
    result = (uint64_t)memmove((char *)a3 + v7, v10, v8);
  }
  *((_BYTE *)a3 + v7 + v8) = 0;
  return result;
}

void std::__basic_string_common<true>::__throw_length_error()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

void std::__basic_string_common<true>::__throw_out_of_range()
{
  std::__throw_out_of_range[abi:ne180100]("basic_string");
}

int std::stoi(const std::string *__str, size_t *__idx, int __base)
{
  uint64_t v6;
  size_t v8;
  _QWORD *v9;
  void **v10;
  const char *v11;
  void *__p[2];
  unsigned __int8 v13;
  _QWORD v14[2];
  char v15;

  std::string::basic_string[abi:ne180100]<0>(__p, "stoi");
  if (v6 != (int)v6)
  {
    if ((v13 & 0x80u) == 0)
      v8 = v13;
    else
      v8 = (size_t)__p[1];
    v9 = v14;
    std::string::basic_string[abi:ne180100]((uint64_t)v14, v8 + 14);
    if (v15 < 0)
      v9 = (_QWORD *)v14[0];
    if (v8)
    {
      if ((v13 & 0x80u) == 0)
        v10 = __p;
      else
        v10 = (void **)__p[0];
      memmove(v9, v10, v8);
    }
    strcpy((char *)v9 + v8, ": out of range");
    if (v15 >= 0)
      v11 = (const char *)v14;
    else
      v11 = (const char *)v14[0];
    std::__throw_out_of_range[abi:ne180100](v11);
  }
  if ((char)v13 < 0)
    operator delete(__p[0]);
  return v6;
}

void sub_191FC7868(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t std::stol(const std::string *__str, size_t *__idx, int __base)
{
  uint64_t v6;
  void *__p[2];
  char v9;

  std::string::basic_string[abi:ne180100]<0>(__p, "stol");
  if (v9 < 0)
    operator delete(__p[0]);
  return v6;
}

void sub_191FC790C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t std::stoul(const std::string *__str, size_t *__idx, int __base)
{
  int v6;
  unint64_t v7;
  int *v8;
  int v9;
  size_t v11;
  _QWORD *v12;
  const void *p_p;
  const char *v14;
  size_t v15;
  _QWORD *v16;
  const void *v17;
  const char *v18;
  void *__p;
  size_t v20;
  unsigned __int8 v21;
  char *__endptr;
  _QWORD v23[2];
  char v24;

  std::string::basic_string[abi:ne180100]<0>(&__p, "stoul");
  __endptr = 0;
  if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    __str = (const std::string *)__str->__r_.__value_.__r.__words[0];
  v6 = *__error();
  *__error() = 0;
  v7 = strtoul((const char *)__str, &__endptr, __base);
  v8 = __error();
  v9 = *v8;
  *v8 = v6;
  if (v9 == 34)
  {
    if ((v21 & 0x80u) == 0)
      v11 = v21;
    else
      v11 = v20;
    v12 = v23;
    std::string::basic_string[abi:ne180100]((uint64_t)v23, v11 + 14);
    if (v24 < 0)
      v12 = (_QWORD *)v23[0];
    if (v11)
    {
      if ((v21 & 0x80u) == 0)
        p_p = &__p;
      else
        p_p = __p;
      memmove(v12, p_p, v11);
    }
    strcpy((char *)v12 + v11, ": out of range");
    if (v24 >= 0)
      v14 = (const char *)v23;
    else
      v14 = (const char *)v23[0];
    std::__throw_out_of_range[abi:ne180100](v14);
  }
  if (__endptr == (char *)__str)
  {
    if ((v21 & 0x80u) == 0)
      v15 = v21;
    else
      v15 = v20;
    v16 = v23;
    std::string::basic_string[abi:ne180100]((uint64_t)v23, v15 + 15);
    if (v24 < 0)
      v16 = (_QWORD *)v23[0];
    if (v15)
    {
      if ((v21 & 0x80u) == 0)
        v17 = &__p;
      else
        v17 = __p;
      memmove(v16, v17, v15);
    }
    strcpy((char *)v16 + v15, ": no conversion");
    if (v24 >= 0)
      v18 = (const char *)v23;
    else
      v18 = (const char *)v23[0];
    std::__throw_invalid_argument[abi:ne180100](v18);
  }
  if (__idx)
    *__idx = __endptr - (char *)__str;
  if ((char)v21 < 0)
    operator delete(__p);
  return v7;
}

void sub_191FC7B10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

uint64_t std::stoll(const std::string *__str, size_t *__idx, int __base)
{
  int v6;
  uint64_t v7;
  int *v8;
  int v9;
  size_t v11;
  _QWORD *v12;
  const void *p_p;
  const char *v14;
  size_t v15;
  _QWORD *v16;
  const void *v17;
  const char *v18;
  void *__p;
  size_t v20;
  unsigned __int8 v21;
  char *__endptr;
  _QWORD v23[2];
  char v24;

  std::string::basic_string[abi:ne180100]<0>(&__p, "stoll");
  __endptr = 0;
  if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    __str = (const std::string *)__str->__r_.__value_.__r.__words[0];
  v6 = *__error();
  *__error() = 0;
  v7 = strtoll((const char *)__str, &__endptr, __base);
  v8 = __error();
  v9 = *v8;
  *v8 = v6;
  if (v9 == 34)
  {
    if ((v21 & 0x80u) == 0)
      v11 = v21;
    else
      v11 = v20;
    v12 = v23;
    std::string::basic_string[abi:ne180100]((uint64_t)v23, v11 + 14);
    if (v24 < 0)
      v12 = (_QWORD *)v23[0];
    if (v11)
    {
      if ((v21 & 0x80u) == 0)
        p_p = &__p;
      else
        p_p = __p;
      memmove(v12, p_p, v11);
    }
    strcpy((char *)v12 + v11, ": out of range");
    if (v24 >= 0)
      v14 = (const char *)v23;
    else
      v14 = (const char *)v23[0];
    std::__throw_out_of_range[abi:ne180100](v14);
  }
  if (__endptr == (char *)__str)
  {
    if ((v21 & 0x80u) == 0)
      v15 = v21;
    else
      v15 = v20;
    v16 = v23;
    std::string::basic_string[abi:ne180100]((uint64_t)v23, v15 + 15);
    if (v24 < 0)
      v16 = (_QWORD *)v23[0];
    if (v15)
    {
      if ((v21 & 0x80u) == 0)
        v17 = &__p;
      else
        v17 = __p;
      memmove(v16, v17, v15);
    }
    strcpy((char *)v16 + v15, ": no conversion");
    if (v24 >= 0)
      v18 = (const char *)v23;
    else
      v18 = (const char *)v23[0];
    std::__throw_invalid_argument[abi:ne180100](v18);
  }
  if (__idx)
    *__idx = __endptr - (char *)__str;
  if ((char)v21 < 0)
    operator delete(__p);
  return v7;
}

void sub_191FC7D30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

unint64_t std::stoull(const std::string *__str, size_t *__idx, int __base)
{
  int v6;
  unint64_t v7;
  int *v8;
  int v9;
  size_t v11;
  _QWORD *v12;
  const void *p_p;
  const char *v14;
  size_t v15;
  _QWORD *v16;
  const void *v17;
  const char *v18;
  void *__p;
  size_t v20;
  unsigned __int8 v21;
  char *__endptr;
  _QWORD v23[2];
  char v24;

  std::string::basic_string[abi:ne180100]<0>(&__p, "stoull");
  __endptr = 0;
  if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    __str = (const std::string *)__str->__r_.__value_.__r.__words[0];
  v6 = *__error();
  *__error() = 0;
  v7 = strtoull((const char *)__str, &__endptr, __base);
  v8 = __error();
  v9 = *v8;
  *v8 = v6;
  if (v9 == 34)
  {
    if ((v21 & 0x80u) == 0)
      v11 = v21;
    else
      v11 = v20;
    v12 = v23;
    std::string::basic_string[abi:ne180100]((uint64_t)v23, v11 + 14);
    if (v24 < 0)
      v12 = (_QWORD *)v23[0];
    if (v11)
    {
      if ((v21 & 0x80u) == 0)
        p_p = &__p;
      else
        p_p = __p;
      memmove(v12, p_p, v11);
    }
    strcpy((char *)v12 + v11, ": out of range");
    if (v24 >= 0)
      v14 = (const char *)v23;
    else
      v14 = (const char *)v23[0];
    std::__throw_out_of_range[abi:ne180100](v14);
  }
  if (__endptr == (char *)__str)
  {
    if ((v21 & 0x80u) == 0)
      v15 = v21;
    else
      v15 = v20;
    v16 = v23;
    std::string::basic_string[abi:ne180100]((uint64_t)v23, v15 + 15);
    if (v24 < 0)
      v16 = (_QWORD *)v23[0];
    if (v15)
    {
      if ((v21 & 0x80u) == 0)
        v17 = &__p;
      else
        v17 = __p;
      memmove(v16, v17, v15);
    }
    strcpy((char *)v16 + v15, ": no conversion");
    if (v24 >= 0)
      v18 = (const char *)v23;
    else
      v18 = (const char *)v23[0];
    std::__throw_invalid_argument[abi:ne180100](v18);
  }
  if (__idx)
    *__idx = __endptr - (char *)__str;
  if ((char)v21 < 0)
    operator delete(__p);
  return v7;
}

void sub_191FC7F50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

float std::stof(const std::string *__str, size_t *__idx)
{
  int v4;
  float v5;
  int *v6;
  int v7;
  size_t v9;
  _QWORD *v10;
  const void *p_p;
  const char *v12;
  size_t v13;
  _QWORD *v14;
  const void *v15;
  const char *v16;
  void *__p;
  size_t v18;
  unsigned __int8 v19;
  char *v20;
  _QWORD v21[2];
  char v22;

  std::string::basic_string[abi:ne180100]<0>(&__p, "stof");
  v20 = 0;
  if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    __str = (const std::string *)__str->__r_.__value_.__r.__words[0];
  v4 = *__error();
  *__error() = 0;
  v5 = strtof((const char *)__str, &v20);
  v6 = __error();
  v7 = *v6;
  *v6 = v4;
  if (v7 == 34)
  {
    if ((v19 & 0x80u) == 0)
      v9 = v19;
    else
      v9 = v18;
    v10 = v21;
    std::string::basic_string[abi:ne180100]((uint64_t)v21, v9 + 14);
    if (v22 < 0)
      v10 = (_QWORD *)v21[0];
    if (v9)
    {
      if ((v19 & 0x80u) == 0)
        p_p = &__p;
      else
        p_p = __p;
      memmove(v10, p_p, v9);
    }
    strcpy((char *)v10 + v9, ": out of range");
    if (v22 >= 0)
      v12 = (const char *)v21;
    else
      v12 = (const char *)v21[0];
    std::__throw_out_of_range[abi:ne180100](v12);
  }
  if (v20 == (char *)__str)
  {
    if ((v19 & 0x80u) == 0)
      v13 = v19;
    else
      v13 = v18;
    v14 = v21;
    std::string::basic_string[abi:ne180100]((uint64_t)v21, v13 + 15);
    if (v22 < 0)
      v14 = (_QWORD *)v21[0];
    if (v13)
    {
      if ((v19 & 0x80u) == 0)
        v15 = &__p;
      else
        v15 = __p;
      memmove(v14, v15, v13);
    }
    strcpy((char *)v14 + v13, ": no conversion");
    if (v22 >= 0)
      v16 = (const char *)v21;
    else
      v16 = (const char *)v21[0];
    std::__throw_invalid_argument[abi:ne180100](v16);
  }
  if (__idx)
    *__idx = v20 - (char *)__str;
  if ((char)v19 < 0)
    operator delete(__p);
  return v5;
}

void sub_191FC8170(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

double std::stod(const std::string *__str, size_t *__idx)
{
  int v4;
  double v5;
  int *v6;
  int v7;
  size_t v9;
  _QWORD *v10;
  const void *p_p;
  const char *v12;
  size_t v13;
  _QWORD *v14;
  const void *v15;
  const char *v16;
  void *__p;
  size_t v18;
  unsigned __int8 v19;
  char *v20;
  _QWORD v21[2];
  char v22;

  std::string::basic_string[abi:ne180100]<0>(&__p, "stod");
  v20 = 0;
  if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    __str = (const std::string *)__str->__r_.__value_.__r.__words[0];
  v4 = *__error();
  *__error() = 0;
  v5 = strtod((const char *)__str, &v20);
  v6 = __error();
  v7 = *v6;
  *v6 = v4;
  if (v7 == 34)
  {
    if ((v19 & 0x80u) == 0)
      v9 = v19;
    else
      v9 = v18;
    v10 = v21;
    std::string::basic_string[abi:ne180100]((uint64_t)v21, v9 + 14);
    if (v22 < 0)
      v10 = (_QWORD *)v21[0];
    if (v9)
    {
      if ((v19 & 0x80u) == 0)
        p_p = &__p;
      else
        p_p = __p;
      memmove(v10, p_p, v9);
    }
    strcpy((char *)v10 + v9, ": out of range");
    if (v22 >= 0)
      v12 = (const char *)v21;
    else
      v12 = (const char *)v21[0];
    std::__throw_out_of_range[abi:ne180100](v12);
  }
  if (v20 == (char *)__str)
  {
    if ((v19 & 0x80u) == 0)
      v13 = v19;
    else
      v13 = v18;
    v14 = v21;
    std::string::basic_string[abi:ne180100]((uint64_t)v21, v13 + 15);
    if (v22 < 0)
      v14 = (_QWORD *)v21[0];
    if (v13)
    {
      if ((v19 & 0x80u) == 0)
        v15 = &__p;
      else
        v15 = __p;
      memmove(v14, v15, v13);
    }
    strcpy((char *)v14 + v13, ": no conversion");
    if (v22 >= 0)
      v16 = (const char *)v21;
    else
      v16 = (const char *)v21[0];
    std::__throw_invalid_argument[abi:ne180100](v16);
  }
  if (__idx)
    *__idx = v20 - (char *)__str;
  if ((char)v19 < 0)
    operator delete(__p);
  return v5;
}

void sub_191FC8390(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

long double std::stold(const std::string *__str, size_t *__idx)
{
  int v4;
  double v5;
  int *v6;
  int v7;
  size_t v9;
  _QWORD *v10;
  const void *p_p;
  const char *v12;
  size_t v13;
  _QWORD *v14;
  const void *v15;
  const char *v16;
  void *__p;
  size_t v18;
  unsigned __int8 v19;
  char *v20;
  _QWORD v21[2];
  char v22;

  std::string::basic_string[abi:ne180100]<0>(&__p, "stold");
  v20 = 0;
  if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    __str = (const std::string *)__str->__r_.__value_.__r.__words[0];
  v4 = *__error();
  *__error() = 0;
  v5 = strtold((const char *)__str, &v20);
  v6 = __error();
  v7 = *v6;
  *v6 = v4;
  if (v7 == 34)
  {
    if ((v19 & 0x80u) == 0)
      v9 = v19;
    else
      v9 = v18;
    v10 = v21;
    std::string::basic_string[abi:ne180100]((uint64_t)v21, v9 + 14);
    if (v22 < 0)
      v10 = (_QWORD *)v21[0];
    if (v9)
    {
      if ((v19 & 0x80u) == 0)
        p_p = &__p;
      else
        p_p = __p;
      memmove(v10, p_p, v9);
    }
    strcpy((char *)v10 + v9, ": out of range");
    if (v22 >= 0)
      v12 = (const char *)v21;
    else
      v12 = (const char *)v21[0];
    std::__throw_out_of_range[abi:ne180100](v12);
  }
  if (v20 == (char *)__str)
  {
    if ((v19 & 0x80u) == 0)
      v13 = v19;
    else
      v13 = v18;
    v14 = v21;
    std::string::basic_string[abi:ne180100]((uint64_t)v21, v13 + 15);
    if (v22 < 0)
      v14 = (_QWORD *)v21[0];
    if (v13)
    {
      if ((v19 & 0x80u) == 0)
        v15 = &__p;
      else
        v15 = __p;
      memmove(v14, v15, v13);
    }
    strcpy((char *)v14 + v13, ": no conversion");
    if (v22 >= 0)
      v16 = (const char *)v21;
    else
      v16 = (const char *)v21[0];
    std::__throw_invalid_argument[abi:ne180100](v16);
  }
  if (__idx)
    *__idx = v20 - (char *)__str;
  if ((char)v19 < 0)
    operator delete(__p);
  return v5;
}

void sub_191FC85B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

int std::stoi(const std::wstring *__str, size_t *__idx, int __base)
{
  uint64_t v6;
  size_t v8;
  _QWORD *v9;
  void **v10;
  const char *v11;
  void *__p[2];
  unsigned __int8 v13;
  _QWORD v14[2];
  char v15;

  std::string::basic_string[abi:ne180100]<0>(__p, "stoi");
  if (v6 != (int)v6)
  {
    if ((v13 & 0x80u) == 0)
      v8 = v13;
    else
      v8 = (size_t)__p[1];
    v9 = v14;
    std::string::basic_string[abi:ne180100]((uint64_t)v14, v8 + 14);
    if (v15 < 0)
      v9 = (_QWORD *)v14[0];
    if (v8)
    {
      if ((v13 & 0x80u) == 0)
        v10 = __p;
      else
        v10 = (void **)__p[0];
      memmove(v9, v10, v8);
    }
    strcpy((char *)v9 + v8, ": out of range");
    if (v15 >= 0)
      v11 = (const char *)v14;
    else
      v11 = (const char *)v14[0];
    std::__throw_out_of_range[abi:ne180100](v11);
  }
  if ((char)v13 < 0)
    operator delete(__p[0]);
  return v6;
}

void sub_191FC86F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t std::stol(const std::wstring *__str, size_t *__idx, int __base)
{
  uint64_t v6;
  void *__p[2];
  char v9;

  std::string::basic_string[abi:ne180100]<0>(__p, "stol");
  if (v9 < 0)
    operator delete(__p[0]);
  return v6;
}

void sub_191FC879C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t std::stoul(const std::wstring *__str, size_t *__idx, int __base)
{
  int v6;
  unint64_t v7;
  int *v8;
  int v9;
  size_t v11;
  _QWORD *v12;
  const void *p_p;
  const char *v14;
  size_t v15;
  _QWORD *v16;
  const void *v17;
  const char *v18;
  void *__p;
  size_t v20;
  unsigned __int8 v21;
  __int32 *v22;
  _QWORD v23[2];
  char v24;

  std::string::basic_string[abi:ne180100]<0>(&__p, "stoul");
  v22 = 0;
  if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    __str = (const std::wstring *)__str->__r_.__value_.__r.__words[0];
  v6 = *__error();
  *__error() = 0;
  v7 = wcstoul((const __int32 *)__str, &v22, __base);
  v8 = __error();
  v9 = *v8;
  *v8 = v6;
  if (v9 == 34)
  {
    if ((v21 & 0x80u) == 0)
      v11 = v21;
    else
      v11 = v20;
    v12 = v23;
    std::string::basic_string[abi:ne180100]((uint64_t)v23, v11 + 14);
    if (v24 < 0)
      v12 = (_QWORD *)v23[0];
    if (v11)
    {
      if ((v21 & 0x80u) == 0)
        p_p = &__p;
      else
        p_p = __p;
      memmove(v12, p_p, v11);
    }
    strcpy((char *)v12 + v11, ": out of range");
    if (v24 >= 0)
      v14 = (const char *)v23;
    else
      v14 = (const char *)v23[0];
    std::__throw_out_of_range[abi:ne180100](v14);
  }
  if (v22 == (__int32 *)__str)
  {
    if ((v21 & 0x80u) == 0)
      v15 = v21;
    else
      v15 = v20;
    v16 = v23;
    std::string::basic_string[abi:ne180100]((uint64_t)v23, v15 + 15);
    if (v24 < 0)
      v16 = (_QWORD *)v23[0];
    if (v15)
    {
      if ((v21 & 0x80u) == 0)
        v17 = &__p;
      else
        v17 = __p;
      memmove(v16, v17, v15);
    }
    strcpy((char *)v16 + v15, ": no conversion");
    if (v24 >= 0)
      v18 = (const char *)v23;
    else
      v18 = (const char *)v23[0];
    std::__throw_invalid_argument[abi:ne180100](v18);
  }
  if (__idx)
    *__idx = ((char *)v22 - (char *)__str) >> 2;
  if ((char)v21 < 0)
    operator delete(__p);
  return v7;
}

void sub_191FC89A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

uint64_t std::stoll(const std::wstring *__str, size_t *__idx, int __base)
{
  int v6;
  uint64_t v7;
  int *v8;
  int v9;
  size_t v11;
  _QWORD *v12;
  const void *p_p;
  const char *v14;
  size_t v15;
  _QWORD *v16;
  const void *v17;
  const char *v18;
  void *__p;
  size_t v20;
  unsigned __int8 v21;
  __int32 *v22;
  _QWORD v23[2];
  char v24;

  std::string::basic_string[abi:ne180100]<0>(&__p, "stoll");
  v22 = 0;
  if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    __str = (const std::wstring *)__str->__r_.__value_.__r.__words[0];
  v6 = *__error();
  *__error() = 0;
  v7 = wcstoll((const __int32 *)__str, &v22, __base);
  v8 = __error();
  v9 = *v8;
  *v8 = v6;
  if (v9 == 34)
  {
    if ((v21 & 0x80u) == 0)
      v11 = v21;
    else
      v11 = v20;
    v12 = v23;
    std::string::basic_string[abi:ne180100]((uint64_t)v23, v11 + 14);
    if (v24 < 0)
      v12 = (_QWORD *)v23[0];
    if (v11)
    {
      if ((v21 & 0x80u) == 0)
        p_p = &__p;
      else
        p_p = __p;
      memmove(v12, p_p, v11);
    }
    strcpy((char *)v12 + v11, ": out of range");
    if (v24 >= 0)
      v14 = (const char *)v23;
    else
      v14 = (const char *)v23[0];
    std::__throw_out_of_range[abi:ne180100](v14);
  }
  if (v22 == (__int32 *)__str)
  {
    if ((v21 & 0x80u) == 0)
      v15 = v21;
    else
      v15 = v20;
    v16 = v23;
    std::string::basic_string[abi:ne180100]((uint64_t)v23, v15 + 15);
    if (v24 < 0)
      v16 = (_QWORD *)v23[0];
    if (v15)
    {
      if ((v21 & 0x80u) == 0)
        v17 = &__p;
      else
        v17 = __p;
      memmove(v16, v17, v15);
    }
    strcpy((char *)v16 + v15, ": no conversion");
    if (v24 >= 0)
      v18 = (const char *)v23;
    else
      v18 = (const char *)v23[0];
    std::__throw_invalid_argument[abi:ne180100](v18);
  }
  if (__idx)
    *__idx = ((char *)v22 - (char *)__str) >> 2;
  if ((char)v21 < 0)
    operator delete(__p);
  return v7;
}

void sub_191FC8BC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

unint64_t std::stoull(const std::wstring *__str, size_t *__idx, int __base)
{
  int v6;
  unint64_t v7;
  int *v8;
  int v9;
  size_t v11;
  _QWORD *v12;
  const void *p_p;
  const char *v14;
  size_t v15;
  _QWORD *v16;
  const void *v17;
  const char *v18;
  void *__p;
  size_t v20;
  unsigned __int8 v21;
  __int32 *v22;
  _QWORD v23[2];
  char v24;

  std::string::basic_string[abi:ne180100]<0>(&__p, "stoull");
  v22 = 0;
  if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    __str = (const std::wstring *)__str->__r_.__value_.__r.__words[0];
  v6 = *__error();
  *__error() = 0;
  v7 = wcstoull((const __int32 *)__str, &v22, __base);
  v8 = __error();
  v9 = *v8;
  *v8 = v6;
  if (v9 == 34)
  {
    if ((v21 & 0x80u) == 0)
      v11 = v21;
    else
      v11 = v20;
    v12 = v23;
    std::string::basic_string[abi:ne180100]((uint64_t)v23, v11 + 14);
    if (v24 < 0)
      v12 = (_QWORD *)v23[0];
    if (v11)
    {
      if ((v21 & 0x80u) == 0)
        p_p = &__p;
      else
        p_p = __p;
      memmove(v12, p_p, v11);
    }
    strcpy((char *)v12 + v11, ": out of range");
    if (v24 >= 0)
      v14 = (const char *)v23;
    else
      v14 = (const char *)v23[0];
    std::__throw_out_of_range[abi:ne180100](v14);
  }
  if (v22 == (__int32 *)__str)
  {
    if ((v21 & 0x80u) == 0)
      v15 = v21;
    else
      v15 = v20;
    v16 = v23;
    std::string::basic_string[abi:ne180100]((uint64_t)v23, v15 + 15);
    if (v24 < 0)
      v16 = (_QWORD *)v23[0];
    if (v15)
    {
      if ((v21 & 0x80u) == 0)
        v17 = &__p;
      else
        v17 = __p;
      memmove(v16, v17, v15);
    }
    strcpy((char *)v16 + v15, ": no conversion");
    if (v24 >= 0)
      v18 = (const char *)v23;
    else
      v18 = (const char *)v23[0];
    std::__throw_invalid_argument[abi:ne180100](v18);
  }
  if (__idx)
    *__idx = ((char *)v22 - (char *)__str) >> 2;
  if ((char)v21 < 0)
    operator delete(__p);
  return v7;
}

void sub_191FC8DEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

float std::stof(const std::wstring *__str, size_t *__idx)
{
  int v4;
  float v5;
  int *v6;
  int v7;
  size_t v9;
  _QWORD *v10;
  const void *p_p;
  const char *v12;
  size_t v13;
  _QWORD *v14;
  const void *v15;
  const char *v16;
  void *__p;
  size_t v18;
  unsigned __int8 v19;
  __int32 *v20;
  _QWORD v21[2];
  char v22;

  std::string::basic_string[abi:ne180100]<0>(&__p, "stof");
  v20 = 0;
  if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    __str = (const std::wstring *)__str->__r_.__value_.__r.__words[0];
  v4 = *__error();
  *__error() = 0;
  v5 = wcstof((const __int32 *)__str, &v20);
  v6 = __error();
  v7 = *v6;
  *v6 = v4;
  if (v7 == 34)
  {
    if ((v19 & 0x80u) == 0)
      v9 = v19;
    else
      v9 = v18;
    v10 = v21;
    std::string::basic_string[abi:ne180100]((uint64_t)v21, v9 + 14);
    if (v22 < 0)
      v10 = (_QWORD *)v21[0];
    if (v9)
    {
      if ((v19 & 0x80u) == 0)
        p_p = &__p;
      else
        p_p = __p;
      memmove(v10, p_p, v9);
    }
    strcpy((char *)v10 + v9, ": out of range");
    if (v22 >= 0)
      v12 = (const char *)v21;
    else
      v12 = (const char *)v21[0];
    std::__throw_out_of_range[abi:ne180100](v12);
  }
  if (v20 == (__int32 *)__str)
  {
    if ((v19 & 0x80u) == 0)
      v13 = v19;
    else
      v13 = v18;
    v14 = v21;
    std::string::basic_string[abi:ne180100]((uint64_t)v21, v13 + 15);
    if (v22 < 0)
      v14 = (_QWORD *)v21[0];
    if (v13)
    {
      if ((v19 & 0x80u) == 0)
        v15 = &__p;
      else
        v15 = __p;
      memmove(v14, v15, v13);
    }
    strcpy((char *)v14 + v13, ": no conversion");
    if (v22 >= 0)
      v16 = (const char *)v21;
    else
      v16 = (const char *)v21[0];
    std::__throw_invalid_argument[abi:ne180100](v16);
  }
  if (__idx)
    *__idx = ((char *)v20 - (char *)__str) >> 2;
  if ((char)v19 < 0)
    operator delete(__p);
  return v5;
}

void sub_191FC9010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

double std::stod(const std::wstring *__str, size_t *__idx)
{
  int v4;
  double v5;
  int *v6;
  int v7;
  size_t v9;
  _QWORD *v10;
  const void *p_p;
  const char *v12;
  size_t v13;
  _QWORD *v14;
  const void *v15;
  const char *v16;
  void *__p;
  size_t v18;
  unsigned __int8 v19;
  __int32 *v20;
  _QWORD v21[2];
  char v22;

  std::string::basic_string[abi:ne180100]<0>(&__p, "stod");
  v20 = 0;
  if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    __str = (const std::wstring *)__str->__r_.__value_.__r.__words[0];
  v4 = *__error();
  *__error() = 0;
  v5 = wcstod((const __int32 *)__str, &v20);
  v6 = __error();
  v7 = *v6;
  *v6 = v4;
  if (v7 == 34)
  {
    if ((v19 & 0x80u) == 0)
      v9 = v19;
    else
      v9 = v18;
    v10 = v21;
    std::string::basic_string[abi:ne180100]((uint64_t)v21, v9 + 14);
    if (v22 < 0)
      v10 = (_QWORD *)v21[0];
    if (v9)
    {
      if ((v19 & 0x80u) == 0)
        p_p = &__p;
      else
        p_p = __p;
      memmove(v10, p_p, v9);
    }
    strcpy((char *)v10 + v9, ": out of range");
    if (v22 >= 0)
      v12 = (const char *)v21;
    else
      v12 = (const char *)v21[0];
    std::__throw_out_of_range[abi:ne180100](v12);
  }
  if (v20 == (__int32 *)__str)
  {
    if ((v19 & 0x80u) == 0)
      v13 = v19;
    else
      v13 = v18;
    v14 = v21;
    std::string::basic_string[abi:ne180100]((uint64_t)v21, v13 + 15);
    if (v22 < 0)
      v14 = (_QWORD *)v21[0];
    if (v13)
    {
      if ((v19 & 0x80u) == 0)
        v15 = &__p;
      else
        v15 = __p;
      memmove(v14, v15, v13);
    }
    strcpy((char *)v14 + v13, ": no conversion");
    if (v22 >= 0)
      v16 = (const char *)v21;
    else
      v16 = (const char *)v21[0];
    std::__throw_invalid_argument[abi:ne180100](v16);
  }
  if (__idx)
    *__idx = ((char *)v20 - (char *)__str) >> 2;
  if ((char)v19 < 0)
    operator delete(__p);
  return v5;
}

void sub_191FC9234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

long double std::stold(const std::wstring *__str, size_t *__idx)
{
  int v4;
  double v5;
  int *v6;
  int v7;
  size_t v9;
  _QWORD *v10;
  const void *p_p;
  const char *v12;
  size_t v13;
  _QWORD *v14;
  const void *v15;
  const char *v16;
  void *__p;
  size_t v18;
  unsigned __int8 v19;
  __int32 *v20;
  _QWORD v21[2];
  char v22;

  std::string::basic_string[abi:ne180100]<0>(&__p, "stold");
  v20 = 0;
  if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    __str = (const std::wstring *)__str->__r_.__value_.__r.__words[0];
  v4 = *__error();
  *__error() = 0;
  v5 = wcstold((const __int32 *)__str, &v20);
  v6 = __error();
  v7 = *v6;
  *v6 = v4;
  if (v7 == 34)
  {
    if ((v19 & 0x80u) == 0)
      v9 = v19;
    else
      v9 = v18;
    v10 = v21;
    std::string::basic_string[abi:ne180100]((uint64_t)v21, v9 + 14);
    if (v22 < 0)
      v10 = (_QWORD *)v21[0];
    if (v9)
    {
      if ((v19 & 0x80u) == 0)
        p_p = &__p;
      else
        p_p = __p;
      memmove(v10, p_p, v9);
    }
    strcpy((char *)v10 + v9, ": out of range");
    if (v22 >= 0)
      v12 = (const char *)v21;
    else
      v12 = (const char *)v21[0];
    std::__throw_out_of_range[abi:ne180100](v12);
  }
  if (v20 == (__int32 *)__str)
  {
    if ((v19 & 0x80u) == 0)
      v13 = v19;
    else
      v13 = v18;
    v14 = v21;
    std::string::basic_string[abi:ne180100]((uint64_t)v21, v13 + 15);
    if (v22 < 0)
      v14 = (_QWORD *)v21[0];
    if (v13)
    {
      if ((v19 & 0x80u) == 0)
        v15 = &__p;
      else
        v15 = __p;
      memmove(v14, v15, v13);
    }
    strcpy((char *)v14 + v13, ": no conversion");
    if (v22 >= 0)
      v16 = (const char *)v21;
    else
      v16 = (const char *)v21[0];
    std::__throw_invalid_argument[abi:ne180100](v16);
  }
  if (__idx)
    *__idx = ((char *)v20 - (char *)__str) >> 2;
  if ((char)v19 < 0)
    operator delete(__p);
  return v5;
}

void sub_191FC9458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  char *v4;
  char *v5;
  unsigned int v6;
  char v8;
  __int16 v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = &v8;
  v5 = (char *)&v10;
  if (__val < 0)
  {
    v4 = (char *)&v9;
    v8 = 45;
    __val = -__val;
  }
  if ((char *)&v10 - v4 > 9
    || (v6 = (1233 * (32 - __clz(__val | 1))) >> 12,
        (char *)&v10 - v4 >= (((__PAIR64__(v6, __val) - std::__itoa::__pow10_32[v6]) >> 32) + 1)))
  {
    v5 = (char *)std::__itoa::__base_10_u32[abi:ne180100](v4, __val);
  }
  return (std::string *)std::string::__init_with_size[abi:ne180100]<char *,char *>(retstr, &v8, v5, v5 - &v8);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, uint64_t __val)
{
  char *v4;
  char *v5;
  unsigned int v6;
  char v8;
  _BYTE v9[3];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = &v8;
  v5 = (char *)&v10;
  if (__val < 0)
  {
    v4 = v9;
    v8 = 45;
    __val = -__val;
  }
  if ((char *)&v10 - v4 > 19
    || (v6 = (1233 * (64 - __clz(__val | 1))) >> 12,
        (char *)&v10 - v4 >= v6 - (std::__itoa::__pow10_64[v6] > (unint64_t)__val) + 1))
  {
    v5 = (char *)std::__itoa::__traits_base<unsigned long long,void>::__convert[abi:ne180100](v4, __val);
  }
  return (std::string *)std::string::__init_with_size[abi:ne180100]<char *,char *>(retstr, &v8, v5, v5 - &v8);
}

{
  char *v4;
  char *v5;
  unsigned int v6;
  char v8;
  _BYTE v9[3];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = &v8;
  v5 = (char *)&v10;
  if (__val < 0)
  {
    v4 = v9;
    v8 = 45;
    __val = -__val;
  }
  if ((char *)&v10 - v4 > 19
    || (v6 = (1233 * (64 - __clz(__val | 1))) >> 12,
        (char *)&v10 - v4 >= v6 - (std::__itoa::__pow10_64[v6] > (unint64_t)__val) + 1))
  {
    v5 = (char *)std::__itoa::__traits_base<unsigned long long,void>::__convert[abi:ne180100](v4, __val);
  }
  return (std::string *)std::string::__init_with_size[abi:ne180100]<char *,char *>(retstr, &v8, v5, v5 - &v8);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unsigned int __val)
{
  char *v3;
  _WORD v5[5];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = (char *)std::__itoa::__base_10_u32[abi:ne180100](v5, __val);
  return (std::string *)std::string::__init_with_size[abi:ne180100]<char *,char *>(retstr, (char *)v5, v3, v3 - (char *)v5);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  char *v3;
  _WORD v5[10];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = (char *)std::__itoa::__traits_base<unsigned long long,void>::__convert[abi:ne180100](v5, __val);
  return (std::string *)std::string::__init_with_size[abi:ne180100]<char *,char *>(retstr, (char *)v5, v3, v3 - (char *)v5);
}

{
  char *v3;
  _WORD v5[10];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = (char *)std::__itoa::__traits_base<unsigned long long,void>::__convert[abi:ne180100](v5, __val);
  return (std::string *)std::string::__init_with_size[abi:ne180100]<char *,char *>(retstr, (char *)v5, v3, v3 - (char *)v5);
}

std::wstring *__cdecl std::to_wstring(std::wstring *__return_ptr retstr, int __val)
{
  char *v4;
  char *v5;
  unsigned int v6;
  char v8;
  __int16 v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = &v8;
  v5 = (char *)&v10;
  if (__val < 0)
  {
    v4 = (char *)&v9;
    v8 = 45;
    __val = -__val;
  }
  if ((char *)&v10 - v4 > 9
    || (v6 = (1233 * (32 - __clz(__val | 1))) >> 12,
        (char *)&v10 - v4 >= (((__PAIR64__(v6, __val) - std::__itoa::__pow10_32[v6]) >> 32) + 1)))
  {
    v5 = (char *)std::__itoa::__base_10_u32[abi:ne180100](v4, __val);
  }
  return (std::wstring *)std::wstring::__init_with_size[abi:ne180100]<char *,char *>(retstr, &v8, v5, v5 - &v8);
}

std::wstring *__cdecl std::to_wstring(std::wstring *__return_ptr retstr, uint64_t __val)
{
  char *v4;
  char *v5;
  unsigned int v6;
  char v8;
  _BYTE v9[3];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = &v8;
  v5 = (char *)&v10;
  if (__val < 0)
  {
    v4 = v9;
    v8 = 45;
    __val = -__val;
  }
  if ((char *)&v10 - v4 > 19
    || (v6 = (1233 * (64 - __clz(__val | 1))) >> 12,
        (char *)&v10 - v4 >= v6 - (std::__itoa::__pow10_64[v6] > (unint64_t)__val) + 1))
  {
    v5 = (char *)std::__itoa::__traits_base<unsigned long long,void>::__convert[abi:ne180100](v4, __val);
  }
  return (std::wstring *)std::wstring::__init_with_size[abi:ne180100]<char *,char *>(retstr, &v8, v5, v5 - &v8);
}

{
  char *v4;
  char *v5;
  unsigned int v6;
  char v8;
  _BYTE v9[3];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = &v8;
  v5 = (char *)&v10;
  if (__val < 0)
  {
    v4 = v9;
    v8 = 45;
    __val = -__val;
  }
  if ((char *)&v10 - v4 > 19
    || (v6 = (1233 * (64 - __clz(__val | 1))) >> 12,
        (char *)&v10 - v4 >= v6 - (std::__itoa::__pow10_64[v6] > (unint64_t)__val) + 1))
  {
    v5 = (char *)std::__itoa::__traits_base<unsigned long long,void>::__convert[abi:ne180100](v4, __val);
  }
  return (std::wstring *)std::wstring::__init_with_size[abi:ne180100]<char *,char *>(retstr, &v8, v5, v5 - &v8);
}

std::wstring *__cdecl std::to_wstring(std::wstring *__return_ptr retstr, unsigned int __val)
{
  char *v3;
  _WORD v5[5];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = (char *)std::__itoa::__base_10_u32[abi:ne180100](v5, __val);
  return (std::wstring *)std::wstring::__init_with_size[abi:ne180100]<char *,char *>(retstr, (char *)v5, v3, v3 - (char *)v5);
}

std::wstring *__cdecl std::to_wstring(std::wstring *__return_ptr retstr, unint64_t __val)
{
  char *v3;
  _WORD v5[10];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = (char *)std::__itoa::__traits_base<unsigned long long,void>::__convert[abi:ne180100](v5, __val);
  return (std::wstring *)std::wstring::__init_with_size[abi:ne180100]<char *,char *>(retstr, (char *)v5, v3, v3 - (char *)v5);
}

{
  char *v3;
  _WORD v5[10];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = (char *)std::__itoa::__traits_base<unsigned long long,void>::__convert[abi:ne180100](v5, __val);
  return (std::wstring *)std::wstring::__init_with_size[abi:ne180100]<char *,char *>(retstr, (char *)v5, v3, v3 - (char *)v5);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, float __val)
{
  char v4;
  unint64_t size;
  double v6;
  std::string *v7;
  unsigned int v8;
  std::string *result;
  std::string v10;

  v4 = HIBYTE(v10.__r_.__value_.__r.__words[2]);
  if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v10.__r_.__value_.__r.__words[2]);
  else
    size = v10.__r_.__value_.__l.__size_;
  v6 = __val;
  while (1)
  {
    v7 = v4 >= 0 ? &v10 : (std::string *)v10.__r_.__value_.__r.__words[0];
    v8 = snprintf((char *)v7, size + 1, "%f", v6);
    if ((v8 & 0x80000000) == 0)
      break;
    size = (2 * size) | 1;
LABEL_12:
    std::string::resize(&v10, size, 0);
    v4 = HIBYTE(v10.__r_.__value_.__r.__words[2]);
  }
  if (size < v8)
  {
    size = v8;
    goto LABEL_12;
  }
  std::string::resize(&v10, v8, 0);
  *retstr = v10;
  return result;
}

void sub_191FC9D38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::`anonymous namespace'::initial_string<std::string>::operator()(std::string *a1@<X8>)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::string::resize(a1, 0x16uLL, 0);
}

void sub_191FC9D8C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, double __val)
{
  char v4;
  unint64_t size;
  std::string *v6;
  unsigned int v7;
  std::string *result;
  std::string v9;

  v4 = HIBYTE(v9.__r_.__value_.__r.__words[2]);
  if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v9.__r_.__value_.__r.__words[2]);
  else
    size = v9.__r_.__value_.__l.__size_;
  while (1)
  {
    v6 = v4 >= 0 ? &v9 : (std::string *)v9.__r_.__value_.__r.__words[0];
    v7 = snprintf((char *)v6, size + 1, "%f", __val);
    if ((v7 & 0x80000000) == 0)
      break;
    size = (2 * size) | 1;
LABEL_11:
    std::string::resize(&v9, size, 0);
    v4 = HIBYTE(v9.__r_.__value_.__r.__words[2]);
  }
  if (size < v7)
  {
    size = v7;
    goto LABEL_11;
  }
  std::string::resize(&v9, v7, 0);
  *retstr = v9;
  return result;
}

void sub_191FC9E84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, long double __val)
{
  char v4;
  unint64_t size;
  std::string *v6;
  unsigned int v7;
  std::string *result;
  std::string v9;

  v4 = HIBYTE(v9.__r_.__value_.__r.__words[2]);
  if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v9.__r_.__value_.__r.__words[2]);
  else
    size = v9.__r_.__value_.__l.__size_;
  while (1)
  {
    v6 = v4 >= 0 ? &v9 : (std::string *)v9.__r_.__value_.__r.__words[0];
    v7 = snprintf((char *)v6, size + 1, "%Lf", __val);
    if ((v7 & 0x80000000) == 0)
      break;
    size = (2 * size) | 1;
LABEL_11:
    std::string::resize(&v9, size, 0);
    v4 = HIBYTE(v9.__r_.__value_.__r.__words[2]);
  }
  if (size < v7)
  {
    size = v7;
    goto LABEL_11;
  }
  std::string::resize(&v9, v7, 0);
  *retstr = v9;
  return result;
}

void sub_191FC9F80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::wstring *__cdecl std::to_wstring(std::wstring *__return_ptr retstr, float __val)
{
  char v4;
  unint64_t size;
  double v6;
  std::wstring *v7;
  unsigned int v8;
  std::wstring *result;
  std::wstring v10;

  v4 = HIBYTE(v10.__r_.__value_.__r.__words[2]);
  if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v10.__r_.__value_.__r.__words[2]);
  else
    size = v10.__r_.__value_.__l.__size_;
  v6 = __val;
  while (1)
  {
    v7 = v4 >= 0 ? &v10 : (std::wstring *)v10.__r_.__value_.__r.__words[0];
    v8 = swprintf((__int32 *)v7, size + 1, dword_192025860, *(_QWORD *)&v6);
    if ((v8 & 0x80000000) == 0)
      break;
    size = (2 * size) | 1;
LABEL_12:
    std::wstring::resize(&v10, size, 0);
    v4 = HIBYTE(v10.__r_.__value_.__r.__words[2]);
  }
  if (size < v8)
  {
    size = v8;
    goto LABEL_12;
  }
  std::wstring::resize(&v10, v8, 0);
  *retstr = v10;
  return result;
}

void sub_191FCA080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::`anonymous namespace'::initial_string<std::wstring>::operator()(uint64_t a1@<X8>)
{
  _OWORD *v2;

  v2 = operator new(0x58uLL);
  *(_QWORD *)a1 = v2;
  *(_OWORD *)(a1 + 8) = xmmword_192025840;
  *v2 = 0u;
  v2[1] = 0u;
  v2[2] = 0u;
  v2[3] = 0u;
  v2[4] = 0u;
  *((_DWORD *)v2 + 20) = 0;
  std::wstring::resize((std::wstring *)a1, 0x15uLL, 0);
}

void sub_191FCA0F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::wstring *__cdecl std::to_wstring(std::wstring *__return_ptr retstr, double __val)
{
  char v4;
  unint64_t size;
  std::wstring *v6;
  unsigned int v7;
  std::wstring *result;
  std::wstring v9;

  v4 = HIBYTE(v9.__r_.__value_.__r.__words[2]);
  if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v9.__r_.__value_.__r.__words[2]);
  else
    size = v9.__r_.__value_.__l.__size_;
  while (1)
  {
    v6 = v4 >= 0 ? &v9 : (std::wstring *)v9.__r_.__value_.__r.__words[0];
    v7 = swprintf((__int32 *)v6, size + 1, dword_192025860, *(_QWORD *)&__val);
    if ((v7 & 0x80000000) == 0)
      break;
    size = (2 * size) | 1;
LABEL_11:
    std::wstring::resize(&v9, size, 0);
    v4 = HIBYTE(v9.__r_.__value_.__r.__words[2]);
  }
  if (size < v7)
  {
    size = v7;
    goto LABEL_11;
  }
  std::wstring::resize(&v9, v7, 0);
  *retstr = v9;
  return result;
}

void sub_191FCA1F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::wstring *__cdecl std::to_wstring(std::wstring *__return_ptr retstr, long double __val)
{
  char v4;
  unint64_t size;
  std::wstring *v6;
  unsigned int v7;
  std::wstring *result;
  std::wstring v9;

  v4 = HIBYTE(v9.__r_.__value_.__r.__words[2]);
  if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v9.__r_.__value_.__r.__words[2]);
  else
    size = v9.__r_.__value_.__l.__size_;
  while (1)
  {
    v6 = v4 >= 0 ? &v9 : (std::wstring *)v9.__r_.__value_.__r.__words[0];
    v7 = swprintf((__int32 *)v6, size + 1, dword_19202586C, *(_QWORD *)&__val);
    if ((v7 & 0x80000000) == 0)
      break;
    size = (2 * size) | 1;
LABEL_11:
    std::wstring::resize(&v9, size, 0);
    v4 = HIBYTE(v9.__r_.__value_.__r.__words[2]);
  }
  if (size < v7)
  {
    size = v7;
    goto LABEL_11;
  }
  std::wstring::resize(&v9, v7, 0);
  *retstr = v9;
  return result;
}

void sub_191FCA2EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *std::allocator<wchar_t>::allocate_at_least[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(4 * a2);
}

int std::wstring_view::compare(const std::wstring_view *this, std::wstring_view __sv)
{
  std::basic_string_view<_CharT, _Traits>::size_type size;
  std::basic_string_view<_CharT, _Traits>::size_type v3;
  int result;
  BOOL v6;
  int v7;

  size = __sv.__size_;
  v3 = this->__size_;
  if (__sv.__size_ >= v3)
    __sv.__size_ = this->__size_;
  if (__sv.__size_)
  {
    result = wmemcmp(this->__data_, __sv.__data_, __sv.__size_);
    if (result)
      return result;
    v3 = this->__size_;
  }
  v6 = v3 == size;
  if (v3 < size)
    v7 = -1;
  else
    v7 = 1;
  if (v6)
    return 0;
  else
    return v7;
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

uint64_t std::`anonymous namespace'::as_integer_helper<long,std::string,long (*)(char const*,char **,int)>(const void **a1, char *a2, _QWORD *a3, int a4)
{
  char *v7;
  int v8;
  uint64_t v9;
  int *v10;
  int v11;
  size_t v13;
  _QWORD *v14;
  const void *v15;
  const char *v16;
  size_t v17;
  _QWORD *v18;
  const void *v19;
  const char *v20;
  char *__endptr;
  _QWORD v22[2];
  char v23;

  __endptr = 0;
  if (a2[23] >= 0)
    v7 = a2;
  else
    v7 = *(char **)a2;
  v8 = *__error();
  *__error() = 0;
  v9 = strtol(v7, &__endptr, a4);
  v10 = __error();
  v11 = *v10;
  *v10 = v8;
  if (v11 == 34)
  {
    if (*((char *)a1 + 23) >= 0)
      v13 = *((unsigned __int8 *)a1 + 23);
    else
      v13 = (size_t)a1[1];
    std::string::basic_string[abi:ne180100]((uint64_t)v22, v13 + 14);
    if (v23 >= 0)
      v14 = v22;
    else
      v14 = (_QWORD *)v22[0];
    if (v13)
    {
      if (*((char *)a1 + 23) >= 0)
        v15 = a1;
      else
        v15 = *a1;
      memmove(v14, v15, v13);
    }
    strcpy((char *)v14 + v13, ": out of range");
    if (v23 >= 0)
      v16 = (const char *)v22;
    else
      v16 = (const char *)v22[0];
    std::__throw_out_of_range[abi:ne180100](v16);
  }
  if (__endptr == v7)
  {
    if (*((char *)a1 + 23) >= 0)
      v17 = *((unsigned __int8 *)a1 + 23);
    else
      v17 = (size_t)a1[1];
    std::string::basic_string[abi:ne180100]((uint64_t)v22, v17 + 15);
    if (v23 >= 0)
      v18 = v22;
    else
      v18 = (_QWORD *)v22[0];
    if (v17)
    {
      if (*((char *)a1 + 23) >= 0)
        v19 = a1;
      else
        v19 = *a1;
      memmove(v18, v19, v17);
    }
    strcpy((char *)v18 + v17, ": no conversion");
    if (v23 >= 0)
      v20 = (const char *)v22;
    else
      v20 = (const char *)v22[0];
    std::__throw_invalid_argument[abi:ne180100](v20);
  }
  if (a3)
    *a3 = __endptr - v7;
  return v9;
}

void sub_191FCA5D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__throw_invalid_argument[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::invalid_argument::invalid_argument[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E2E57738, MEMORY[0x1E0DE5128]);
}

void sub_191FCA630(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::invalid_argument::invalid_argument[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE51C8] + 16);
  return result;
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

uint64_t std::`anonymous namespace'::as_integer_helper<long,std::wstring,long (*)(wchar_t const*,wchar_t **,int)>(const void **a1, uint64_t a2, _QWORD *a3, int a4)
{
  const __int32 *v7;
  int v8;
  uint64_t v9;
  int *v10;
  int v11;
  size_t v13;
  _QWORD *v14;
  const void *v15;
  const char *v16;
  size_t v17;
  _QWORD *v18;
  const void *v19;
  const char *v20;
  __int32 *v21;
  _QWORD v22[2];
  char v23;

  v21 = 0;
  if (*(char *)(a2 + 23) >= 0)
    v7 = (const __int32 *)a2;
  else
    v7 = *(const __int32 **)a2;
  v8 = *__error();
  *__error() = 0;
  v9 = wcstol(v7, &v21, a4);
  v10 = __error();
  v11 = *v10;
  *v10 = v8;
  if (v11 == 34)
  {
    if (*((char *)a1 + 23) >= 0)
      v13 = *((unsigned __int8 *)a1 + 23);
    else
      v13 = (size_t)a1[1];
    std::string::basic_string[abi:ne180100]((uint64_t)v22, v13 + 14);
    if (v23 >= 0)
      v14 = v22;
    else
      v14 = (_QWORD *)v22[0];
    if (v13)
    {
      if (*((char *)a1 + 23) >= 0)
        v15 = a1;
      else
        v15 = *a1;
      memmove(v14, v15, v13);
    }
    strcpy((char *)v14 + v13, ": out of range");
    if (v23 >= 0)
      v16 = (const char *)v22;
    else
      v16 = (const char *)v22[0];
    std::__throw_out_of_range[abi:ne180100](v16);
  }
  if (v21 == v7)
  {
    if (*((char *)a1 + 23) >= 0)
      v17 = *((unsigned __int8 *)a1 + 23);
    else
      v17 = (size_t)a1[1];
    std::string::basic_string[abi:ne180100]((uint64_t)v22, v17 + 15);
    if (v23 >= 0)
      v18 = v22;
    else
      v18 = (_QWORD *)v22[0];
    if (v17)
    {
      if (*((char *)a1 + 23) >= 0)
        v19 = a1;
      else
        v19 = *a1;
      memmove(v18, v19, v17);
    }
    strcpy((char *)v18 + v17, ": no conversion");
    if (v23 >= 0)
      v20 = (const char *)v22;
    else
      v20 = (const char *)v22[0];
    std::__throw_invalid_argument[abi:ne180100](v20);
  }
  if (a3)
    *a3 = v21 - v7;
  return v9;
}

void sub_191FCA8DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::__init_with_size[abi:ne180100]<char *,char *>(_QWORD *result, char *a2, char *a3, unint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a4 > 0x16)
  {
    v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v8 = a4 | 7;
    v9 = v8 + 1;
    result = operator new(v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    *v4 = result;
    v4 = result;
  }
  else
  {
    *((_BYTE *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    v10 = *a2++;
    *(_BYTE *)v4 = v10;
    v4 = (_QWORD *)((char *)v4 + 1);
  }
  *(_BYTE *)v4 = 0;
  return result;
}

_WORD *std::__itoa::__traits_base<unsigned long long,void>::__convert[abi:ne180100](_WORD *a1, unint64_t a2)
{
  unint64_t v2;

  v2 = a2;
  if (!HIDWORD(a2))
    return std::__itoa::__base_10_u32[abi:ne180100](a1, a2);
  if (a2 > 0x2540BE3FFLL)
  {
    a1 = std::__itoa::__base_10_u32[abi:ne180100](a1, a2 / 0x2540BE400);
    v2 %= 0x2540BE400uLL;
  }
  return std::__itoa::__append10[abi:ne180100]<unsigned long long>(a1, v2);
}

_QWORD *std::wstring::__init_with_size[abi:ne180100]<char *,char *>(_QWORD *result, char *a2, char *a3, unint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  int v10;

  v4 = result;
  if (a4 >= 0x3FFFFFFFFFFFFFF8)
    std::wstring::__throw_length_error[abi:ne180100]();
  if (a4 > 4)
  {
    v8 = (a4 & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((a4 | 1) != 5)
      v8 = a4 | 1;
    result = std::allocator<wchar_t>::allocate_at_least[abi:ne180100]((uint64_t)result, v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    *v4 = result;
    v4 = result;
  }
  else
  {
    *((_BYTE *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    v10 = *a2++;
    *(_DWORD *)v4 = v10;
    v4 = (_QWORD *)((char *)v4 + 4);
  }
  *(_DWORD *)v4 = 0;
  return result;
}

std::string *__cdecl std::__do_message::message(std::string *__return_ptr retstr, const std::__do_message *this, int __ev)
{
  int v5;
  char *v6;
  int v7;
  char __strerrbuf[1024];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v5 = *__error();
  v6 = __strerrbuf;
  v7 = strerror_r(__ev, __strerrbuf, 0x400uLL);
  if (v7)
  {
    if (v7 == -1)
      v7 = *__error();
    if (v7 != 22)
      abort();
    v6 = "";
  }
  if (!*v6)
  {
    v6 = __strerrbuf;
    snprintf(__strerrbuf, 0x400uLL, "Unknown error %d", __ev);
  }
  *__error() = v5;
  return (std::string *)std::string::basic_string[abi:ne180100]<0>(retstr, v6);
}

const char *std::__generic_error_category::name(std::__generic_error_category *this)
{
  return "generic";
}

std::string *std::__generic_error_category::message@<X0>(const std::__do_message *this@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  if (a2 < 107)
    return std::__do_message::message(a3, this, a2);
  else
    return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, "unspecified generic_category error");
}

const std::error_category *std::generic_category(void)
{
  unsigned __int8 v0;

  return (const std::error_category *)&std::generic_category(void)::helper;
}

const char *std::__system_error_category::name(std::__system_error_category *this)
{
  return "system";
}

std::string *std::__system_error_category::message@<X0>(const std::__do_message *this@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  if (a2 < 107)
    return std::__do_message::message(a3, this, a2);
  else
    return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, "unspecified system_category error");
}

uint64_t std::__system_error_category::default_error_condition(std::__system_error_category *this, int a2)
{
  if (a2 < 107)
    std::generic_category();
  else
    std::system_category();
  return a2;
}

const std::error_category *std::system_category(void)
{
  unsigned __int8 v0;

  return (const std::error_category *)&std::system_category(void)::helper;
}

std::string *__cdecl std::error_condition::message(std::string *__return_ptr retstr, const std::error_condition *this)
{
  return (std::string *)((std::string *(*)(std::string *__return_ptr, const std::error_category *, _QWORD))this->__cat_->message)(retstr, this->__cat_, this->__val_);
}

std::string *__cdecl std::error_code::message(std::string *__return_ptr retstr, const std::error_code *this)
{
  return (std::string *)((std::string *(*)(std::string *__return_ptr, const std::error_category *, _QWORD))this->__cat_->message)(retstr, this->__cat_, this->__val_);
}

std::system_error *__cdecl std::system_error::system_error(std::system_error *this, std::error_code __ec, const std::string *__what_arg)
{
  std::string __p;
  std::string v6;
  std::error_code v7;

  v7 = __ec;
  if (SHIBYTE(__what_arg->__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, __what_arg->__r_.__value_.__l.__data_, __what_arg->__r_.__value_.__l.__size_);
  else
    __p = *__what_arg;
  std::runtime_error::runtime_error(this, &v6);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  this->__ec_ = v7;
  return this;
}

void sub_191FCAD80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

__n128 std::`anonymous namespace'::make_error_str@<Q0>(std::string *this@<X1>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  void **v6;
  std::string::size_type v7;
  __n128 result;
  void *__p[2];
  unsigned __int8 v10;

  if (!*(_DWORD *)a2)
    goto LABEL_13;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    if (!this->__r_.__value_.__l.__size_)
      goto LABEL_5;
    goto LABEL_4;
  }
  if (*((_BYTE *)&this->__r_.__value_.__s + 23))
LABEL_4:
    std::string::append(this, ": ", 2uLL);
LABEL_5:
  (*(void (**)(void **__return_ptr))(**(_QWORD **)(a2 + 8) + 48))(__p);
  if ((v10 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v10 & 0x80u) == 0)
    v7 = v10;
  else
    v7 = (std::string::size_type)__p[1];
  std::string::append(this, (const std::string::value_type *)v6, v7);
  if ((char)v10 < 0)
    operator delete(__p[0]);
LABEL_13:
  result = *(__n128 *)&this->__r_.__value_.__l.__data_;
  *(_OWORD *)a3 = *(_OWORD *)&this->__r_.__value_.__l.__data_;
  *(_QWORD *)(a3 + 16) = *((_QWORD *)&this->__r_.__value_.__l + 2);
  this->__r_.__value_.__l.__size_ = 0;
  this->__r_.__value_.__r.__words[2] = 0;
  this->__r_.__value_.__r.__words[0] = 0;
  return result;
}

void sub_191FCAE84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::system_error *__cdecl std::system_error::system_error(std::system_error *this, std::error_code __ec, const char *__what_arg)
{
  std::string __p;
  std::string v6;
  std::error_code v7;

  v7 = __ec;
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)__what_arg);
  std::runtime_error::runtime_error(this, &v6);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  this->__ec_ = v7;
  return this;
}

void sub_191FCAF2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

std::system_error *__cdecl std::system_error::system_error(std::system_error *this, std::error_code __ec)
{
  const std::error_category *cat;
  uint64_t v3;
  std::string v6;

  cat = __ec.__cat_;
  v3 = *(_QWORD *)&__ec.__val_;
  if (__ec.__val_)
    ((void (*)(std::string *__return_ptr, const std::error_category *, _QWORD))__ec.__cat_->message)(&v6, __ec.__cat_, *(_QWORD *)&__ec.__val_);
  else
    memset(&v6, 0, sizeof(v6));
  std::runtime_error::runtime_error(this, &v6);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  *(_QWORD *)&this->__ec_.__val_ = v3;
  this->__ec_.__cat_ = cat;
  return this;
}

void sub_191FCAFF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::system_error *__cdecl std::system_error::system_error(std::system_error *this, int __ev, const std::error_category *__ecat, const std::string *__what_arg)
{
  std::string __p;
  int v9;
  const std::error_category *v10;
  std::string v11;

  v9 = __ev;
  v10 = __ecat;
  if (SHIBYTE(__what_arg->__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, __what_arg->__r_.__value_.__l.__data_, __what_arg->__r_.__value_.__l.__size_);
  else
    __p = *__what_arg;
  std::runtime_error::runtime_error(this, &v11);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  this->__ec_.__val_ = __ev;
  this->__ec_.__cat_ = __ecat;
  return this;
}

void sub_191FCB0C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

std::system_error *__cdecl std::system_error::system_error(std::system_error *this, int __ev, const std::error_category *__ecat, const char *__what_arg)
{
  std::string __p;
  int v9;
  const std::error_category *v10;
  std::string v11;

  v9 = __ev;
  v10 = __ecat;
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)__what_arg);
  std::runtime_error::runtime_error(this, &v11);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  this->__ec_.__val_ = __ev;
  this->__ec_.__cat_ = __ecat;
  return this;
}

void sub_191FCB19C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

std::system_error *__cdecl std::system_error::system_error(std::system_error *this, int __ev, const std::error_category *__ecat)
{
  std::string v7;

  if (__ev)
    ((void (*)(std::string *__return_ptr, const std::error_category *, _QWORD))__ecat->message)(&v7, __ecat, *(_QWORD *)&__ev);
  else
    memset(&v7, 0, sizeof(v7));
  std::runtime_error::runtime_error(this, &v7);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  this->__ec_.__val_ = __ev;
  this->__ec_.__cat_ = __ecat;
  return this;
}

void sub_191FCB264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::system_error::~system_error(std::system_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x194021E38);
}

void std::__throw_system_error(int __ev, const char *__what_arg)
{
  std::system_category();
  std::__throw_system_error[abi:ne180100](__ev, (const std::error_category *)&std::system_category(void)::helper, __what_arg);
}

void std::__throw_system_error[abi:ne180100](uint64_t a1, const std::error_category *a2, const char *a3)
{
  std::system_error *exception;
  std::error_code v7;

  exception = (std::system_error *)__cxa_allocate_exception(0x20uLL);
  *(_QWORD *)&v7.__val_ = a1;
  v7.__cat_ = a2;
  std::system_error::system_error(exception, v7, a3);
}

void sub_191FCB32C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__generic_error_category::~__generic_error_category(std::error_category *this)
{
  std::error_category::~error_category(this);
  JUMPOUT(0x194021E38);
}

void std::__system_error_category::~__system_error_category(std::error_category *this)
{
  std::error_category::~error_category(this);
  JUMPOUT(0x194021E38);
}

_QWORD *std::valarray<unsigned long>::valarray(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = (char *)operator new(8 * a2);
    *a1 = v4;
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = (char *)operator new(8 * a2);
    *a1 = v4;
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

uint64_t std::valarray<unsigned long>::~valarray(uint64_t a1)
{
  _BYTE *v2;
  _BYTE *v3;

  v2 = *(_BYTE **)a1;
  if (v2)
  {
    v3 = *(_BYTE **)(a1 + 8);
    if (v3 != v2)
      *(_QWORD *)(a1 + 8) = &v3[(v2 - v3 + 7) & 0xFFFFFFFFFFFFFFF8];
    operator delete(v2);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
  return a1;
}

{
  _BYTE *v2;
  _BYTE *v3;

  v2 = *(_BYTE **)a1;
  if (v2)
  {
    v3 = *(_BYTE **)(a1 + 8);
    if (v3 != v2)
      *(_QWORD *)(a1 + 8) = &v3[(v2 - v3 + 7) & 0xFFFFFFFFFFFFFFF8];
    operator delete(v2);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
  return a1;
}

void std::valarray<unsigned long>::resize(uint64_t a1, unint64_t a2, uint64_t a3)
{
  _BYTE *v6;
  _BYTE *v7;
  _QWORD *v8;

  v6 = *(_BYTE **)a1;
  if (v6)
  {
    v7 = *(_BYTE **)(a1 + 8);
    if (v7 != v6)
      *(_QWORD *)(a1 + 8) = &v7[(v6 - v7 + 7) & 0xFFFFFFFFFFFFFFF8];
    operator delete(v6);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v8 = operator new(8 * a2);
    *(_QWORD *)a1 = v8;
    do
    {
      *v8++ = a3;
      --a2;
    }
    while (a2);
    *(_QWORD *)(a1 + 8) = v8;
  }
}

void std::gslice::__init(uint64_t **this, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  int64_t v6;
  unint64_t v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v4 = *this;
  v5 = this[1];
  v6 = (char *)v5 - (char *)*this;
  if (v5 == *this)
  {
    v8 = 0;
    v9 = 0;
  }
  else
  {
    if (v6 < 0)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = v6 >> 3;
    v8 = operator new((char *)v5 - (char *)*this);
    bzero(v8, v6);
    v6 += (int64_t)v8;
    v9 = v5 != v4;
    if (v7 <= 1)
      v10 = 1;
    else
      v10 = v7;
    do
    {
      v11 = *v4++;
      v9 *= v11;
      --v10;
    }
    while (v10);
  }
  std::valarray<unsigned long>::resize((uint64_t)(this + 4), v9, 0);
  v12 = this[4];
  if (this[5] != v12)
  {
    v13 = 0;
    *v12 = a2;
    v14 = (v6 - (uint64_t)v8) >> 3;
    v15 = *this;
    v16 = v14 - 1;
    v17 = (uint64_t)(*this - 2);
    while (1)
    {
      v18 = *((_QWORD *)v8 + v16) + 1;
      *((_QWORD *)v8 + v16) = v18;
      v19 = (v6 - (uint64_t)v8) >> 3;
      v20 = v14 - 1;
      v21 = (unint64_t *)(v6 - 16);
      v22 = v19;
      if (v18 >= v15[v16])
        break;
LABEL_15:
      v25 = this[2];
      v26 = v13 + 1;
      v27 = v25[v20] + v12[v13];
      v12[++v13] = v27;
      v28 = v14 - v19;
      if (v14 != v19)
      {
        v29 = &v25[v19];
        v30 = &v15[v19];
        do
        {
          v32 = *v29++;
          v31 = v32;
          v33 = *v30++;
          v27 -= (v33 - 1) * v31;
          v12[v26] = v27;
          --v28;
        }
        while (v28);
        v13 = v26;
      }
    }
    while (1)
    {
      v19 = v22 - 1;
      if (v22 == 1)
        goto LABEL_20;
      v23 = *v21 + 1;
      *v21 = v23;
      v21[1] = 0;
      --v21;
      v24 = *(_QWORD *)(v17 + 8 * v22--);
      if (v23 < v24)
      {
        v20 = v19 - 1;
        goto LABEL_15;
      }
    }
  }
  if (v8)
LABEL_20:
    operator delete(v8);
}

void sub_191FCB70C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

const char *__cdecl std::bad_variant_access::what(const std::bad_variant_access *this)
{
  return "bad_variant_access";
}

void std::bad_variant_access::~bad_variant_access(std::bad_variant_access *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x194021E38);
}

void std::__vector_base_common<true>::__throw_length_error()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void std::__vector_base_common<true>::__throw_out_of_range()
{
  std::__throw_out_of_range[abi:ne180100]("vector");
}

void std::__libcpp_verbose_abort(const char *__format, ...)
{
  char *v2;
  va_list va;

  va_start(va, __format);
  va_copy(v2, va);
  vfprintf((FILE *)*MEMORY[0x1E0C80C10], __format, va);
  vasprintf(&v2, __format, va);
  qword_1EE244A68 = (uint64_t)v2;
  abort();
}

unint64_t std::__libcpp_atomic_notify(unint64_t this, const volatile void *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t *v4;
  unint64_t *v5;
  unint64_t v6;

  v2 = 0x9DDFEA08EB382D69 * (((8 * this) + 8) ^ HIDWORD(this));
  v3 = 0x9DDFEA08EB382D69 * (HIDWORD(this) ^ (v2 >> 47) ^ v2);
  v4 = &std::__libcpp_contention_table[8 * (unint64_t)(105 * ((v3 >> 47) ^ v3))];
  v5 = v4 + 1;
  do
    v6 = __ldxr(v5);
  while (__stlxr(v6 + 1, v5));
  if (atomic_load(v4))
    return __ulock_wake();
  return this;
}

std::__cxx_contention_t std::__libcpp_atomic_monitor(const void *a1)
{
  unint64_t v1;
  unint64_t v2;

  v1 = 0x9DDFEA08EB382D69 * (((8 * (_DWORD)a1) + 8) ^ ((unint64_t)a1 >> 32));
  v2 = 0x9DDFEA08EB382D69 * (((unint64_t)a1 >> 32) ^ (v1 >> 47) ^ v1);
  return atomic_load(&std::__libcpp_contention_table[8 * (unint64_t)(105 * ((v2 >> 47) ^ v2))
                                                   + 1]);
}

void std::__libcpp_atomic_wait(const void *a1, std::__cxx_contention_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;

  v2 = 0x9DDFEA08EB382D69 * (((8 * (_DWORD)a1) + 8) ^ ((unint64_t)a1 >> 32));
  v3 = 0x9DDFEA08EB382D69 * (((unint64_t)a1 >> 32) ^ (v2 >> 47) ^ v2);
  v4 = &std::__libcpp_contention_table[8 * (unint64_t)(105 * ((v3 >> 47) ^ v3))];
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  __ulock_wait();
  do
    v6 = __ldxr(v4);
  while (__stlxr(v6 - 1, v4));
}

void std::__cxx_atomic_notify_one(const std::__cxx_atomic_contention_t *a1)
{
  unint64_t v1;
  unint64_t v2;

  v1 = 0x9DDFEA08EB382D69 * (((8 * (_DWORD)a1) + 8) ^ ((unint64_t)a1 >> 32));
  v2 = 0x9DDFEA08EB382D69 * (((unint64_t)a1 >> 32) ^ (v1 >> 47) ^ v1);
  if (atomic_load(&std::__libcpp_contention_table[8 * (unint64_t)(105 * ((v2 >> 47) ^ v2))]))
    __ulock_wake();
}

void std::__cxx_atomic_notify_all(const std::__cxx_atomic_contention_t *a1)
{
  unint64_t v1;
  unint64_t v2;

  v1 = 0x9DDFEA08EB382D69 * (((8 * (_DWORD)a1) + 8) ^ ((unint64_t)a1 >> 32));
  v2 = 0x9DDFEA08EB382D69 * (((unint64_t)a1 >> 32) ^ (v1 >> 47) ^ v1);
  if (atomic_load(&std::__libcpp_contention_table[8 * (unint64_t)(105 * ((v2 >> 47) ^ v2))]))
    __ulock_wake();
}

std::__cxx_contention_t std::__libcpp_atomic_monitor(const std::__cxx_atomic_contention_t *a1)
{
  return atomic_load((unint64_t *)a1);
}

void std::__libcpp_atomic_wait(const std::__cxx_atomic_contention_t *a1, std::__cxx_contention_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;

  v2 = 0x9DDFEA08EB382D69 * (((8 * (_DWORD)a1) + 8) ^ ((unint64_t)a1 >> 32));
  v3 = 0x9DDFEA08EB382D69 * (((unint64_t)a1 >> 32) ^ (v2 >> 47) ^ v2);
  v4 = &std::__libcpp_contention_table[8 * (unint64_t)(105 * ((v3 >> 47) ^ v3))];
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  __ulock_wait();
  do
    v6 = __ldxr(v4);
  while (__stlxr(v6 - 1, v4));
}

std::__barrier_algorithm_base *__cdecl std::__construct_barrier_algorithm_base(ptrdiff_t *__expected)
{
  std::__barrier_algorithm_base *v2;

  v2 = (std::__barrier_algorithm_base *)operator new();
  std::__barrier_algorithm_base::__barrier_algorithm_base(v2, __expected);
  return v2;
}

void sub_191FCBB14(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194021E38](v1, 0x30C40EEE2E2AFLL);
  _Unwind_Resume(a1);
}

uint64_t std::__barrier_algorithm_base::__arrive(unint64_t **this, int a2)
{
  unint64_t v4;
  pthread_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unsigned __int8 *v16;
  int v17;
  unsigned __int8 *v18;
  int v19;
  unsigned __int8 *v20;
  int v21;

  v4 = **this;
  v5 = pthread_self();
  if (v4 < 2)
    return 1;
  v6 = 0;
  v7 = a2 + 1;
  v8 = 0x9DDFEA08EB382D69 * (((8 * (_DWORD)v5) + 8) ^ ((unint64_t)v5 >> 32));
  v9 = 0x9DDFEA08EB382D69 * (((unint64_t)v5 >> 32) ^ (v8 >> 47) ^ v8);
  v10 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47)) % ((uint64_t)(**this + 1) >> 1);
  v11 = a2 + 2;
LABEL_3:
  v12 = v4;
  v13 = v4 + 1;
  v4 = (v4 + 1) >> 1;
  v14 = v4 - 1;
  while (1)
  {
    if (v10 == v4)
      v10 = 0;
    v15 = this[1];
    if ((v12 & 1) == 0 || v10 != v14)
      break;
    v16 = (unsigned __int8 *)&v15[8 * v14] + v6;
    while (1)
    {
      v17 = __ldaxr(v16);
      if (v17 != a2)
        break;
      if (!__stlxr(v11, v16))
        goto LABEL_23;
    }
LABEL_21:
    __clrex();
LABEL_22:
    ++v10;
  }
  v18 = (unsigned __int8 *)&v15[8 * v10] + v6;
  do
  {
    v19 = __ldaxr(v18);
    if (v19 != a2)
    {
      __clrex();
      if (v19 != v7)
        goto LABEL_22;
      v20 = (unsigned __int8 *)&this[1][8 * v10] + v6;
      while (1)
      {
        v21 = __ldaxr(v20);
        if (v21 != v7)
          goto LABEL_21;
        if (!__stlxr(v11, v20))
        {
          v14 = v10;
LABEL_23:
          v10 = v14 >> 1;
          ++v6;
          if (v13 > 3)
            goto LABEL_3;
          return 1;
        }
      }
    }
  }
  while (__stlxr(v7, v18));
  return 0;
}

void std::__destroy_barrier_algorithm_base(std::__barrier_algorithm_base *__barrier)
{
  uint64_t v2;

  if (__barrier)
  {
    v2 = *((_QWORD *)__barrier + 1);
    *((_QWORD *)__barrier + 1) = 0;
    if (v2)
      MEMORY[0x194021E08](v2, 64);
    JUMPOUT(0x194021E38);
  }
}

std::__barrier_algorithm_base *std::__barrier_algorithm_base::__barrier_algorithm_base(std::__barrier_algorithm_base *this, uint64_t *a2)
{
  unint64_t v3;
  size_t v4;
  void *v5;
  void *v6;

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = 0;
  v3 = *a2 + 1;
  if (v3 >> 59)
    v4 = -1;
  else
    v4 = (32 * v3) & 0xFFFFFFFFFFFFFFC0;
  v5 = operator new(v4, (std::align_val_t)0x40uLL);
  v6 = v5;
  if (v3 >= 2)
    bzero(v5, (32 * v3) & 0xFFFFFFFFFFFFFFC0);
  *((_QWORD *)this + 1) = v6;
  return this;
}

void sub_191FCBD64(_Unwind_Exception *a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = 0;
  _Unwind_Resume(a1);
}

void std::condition_variable::~condition_variable(std::condition_variable *this)
{
  pthread_cond_destroy(&this->__cv_);
}

{
  pthread_cond_destroy(&this->__cv_);
}

void std::condition_variable::notify_one(std::condition_variable *this)
{
  pthread_cond_signal(&this->__cv_);
}

void std::condition_variable::notify_all(std::condition_variable *this)
{
  pthread_cond_broadcast(&this->__cv_);
}

void std::condition_variable::wait(std::condition_variable *this, std::unique_lock<std::mutex> *__lk)
{
  int v2;
  const char *v3;

  if (!__lk->__owns_)
  {
    v3 = "condition_variable::wait: mutex not locked";
    v2 = 1;
    goto LABEL_6;
  }
  v2 = pthread_cond_wait(&this->__cv_, &__lk->__m_->__m_);
  if (v2)
  {
    v3 = "condition_variable wait failed";
LABEL_6:
    std::__throw_system_error(v2, v3);
  }
}

void std::condition_variable::__do_timed_wait(std::condition_variable *this, std::unique_lock<std::mutex> *__lk, std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> a3)
{
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  int v4;
  const char *v5;
  timespec v6;

  if (!__lk->__owns_)
  {
    v5 = "condition_variable::timed wait: mutex not locked";
    v4 = 1;
    goto LABEL_9;
  }
  rep = 0x59682F000000E941;
  if (a3.__d_.__rep_ < 0x59682F000000E941)
    rep = a3.__d_.__rep_;
  v6.tv_sec = rep / 1000000000;
  v6.tv_nsec = rep % 1000000000;
  v4 = pthread_cond_timedwait(&this->__cv_, &__lk->__m_->__m_, &v6);
  if (v4 && v4 != 60)
  {
    v5 = "condition_variable timed_wait failed";
LABEL_9:
    std::__throw_system_error(v4, v5);
  }
}

void std::notify_all_at_thread_exit(std::condition_variable *a1, std::unique_lock<std::mutex> a2)
{
  std::unique_lock<std::mutex>::mutex_type *m;
  std::__thread_specific_ptr<std::__thread_struct> *v4;
  std::__thread_struct *v5;
  std::__thread_specific_ptr<std::__thread_struct> *v6;
  std::__thread_struct *v7;
  std::mutex *sig;

  m = a2.__m_;
  v4 = std::__thread_local_data();
  if (!pthread_getspecific(v4->__key_))
  {
    v5 = (std::__thread_struct *)operator new();
    std::__thread_struct::__thread_struct(v5);
    pthread_setspecific(v4->__key_, v5);
  }
  v6 = std::__thread_local_data();
  v7 = (std::__thread_struct *)pthread_getspecific(v6->__key_);
  sig = (std::mutex *)m->__m_.__sig;
  m->__m_.__sig = 0;
  m->__m_.__opaque[0] = 0;
  std::__thread_struct::notify_all_at_thread_exit(v7, a1, sig);
}

void sub_191FCBF54(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194021E38](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

const char *std::__future_error_category::name(std::__future_error_category *this)
{
  return "future";
}

_QWORD *std::__future_error_category::message@<X0>(unsigned int a1@<W1>, _QWORD *a2@<X8>)
{
  char *v3;

  if (a1 > 4)
    v3 = "unspecified future_errc value\n";
  else
    v3 = off_1E2E58458[a1];
  return std::string::basic_string[abi:ne180100]<0>(a2, v3);
}

const std::error_category *std::future_category(void)
{
  unsigned __int8 v0;

  return (const std::error_category *)&std::future_category(void)::helper;
}

std::future_error *__cdecl std::future_error::future_error(std::future_error *this, std::error_code __ec)
{
  std::string v4;
  std::error_code v5;

  v5 = __ec;
  std::error_code::message(&v4, &v5);
  std::logic_error::logic_error(this, &v4);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  this->__ec_ = v5;
  return this;
}

void sub_191FCC05C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::future_error::~future_error(std::future_error *this)
{
  std::logic_error::~logic_error(this);
  JUMPOUT(0x194021E38);
}

void std::__assoc_sub_state::__on_zero_shared(std::__assoc_sub_state *this)
{
  if (this)
    ((void (*)(std::__assoc_sub_state *))this->~__assoc_sub_state_0)(this);
}

void std::__assoc_sub_state::set_value(std::__assoc_sub_state *this)
{
  std::mutex *p_mut;
  void *ptr;
  std::exception_ptr v4;

  p_mut = &this->__mut_;
  std::mutex::lock(&this->__mut_);
  if ((this->__state_ & 1) != 0
    || (v4.__ptr_ = 0, ptr = this->__exception_.__ptr_, std::exception_ptr::~exception_ptr(&v4), ptr))
  {
    std::__throw_future_error[abi:ne180100](2u);
  }
  this->__state_ |= 5u;
  std::condition_variable::notify_all(&this->__cv_);
  std::mutex::unlock(p_mut);
}

void sub_191FCC13C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::__throw_future_error[abi:ne180100](unsigned int a1)
{
  std::future_error *exception;
  std::error_code v3;

  exception = (std::future_error *)__cxa_allocate_exception(0x20uLL);
  std::future_category();
  *(_QWORD *)&v3.__val_ = a1;
  v3.__cat_ = (const std::error_category *)&std::future_category(void)::helper;
  std::future_error::future_error(exception, v3);
}

void sub_191FCC19C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__assoc_sub_state::set_value_at_thread_exit(std::__assoc_sub_state *this)
{
  std::mutex *p_mut;
  void *ptr;
  std::__thread_specific_ptr<std::__thread_struct> *v4;
  std::__thread_struct *v5;
  std::exception_ptr v6;

  p_mut = &this->__mut_;
  std::mutex::lock(&this->__mut_);
  if ((this->__state_ & 1) != 0
    || (v6.__ptr_ = 0, ptr = this->__exception_.__ptr_, std::exception_ptr::~exception_ptr(&v6), ptr))
  {
    std::__throw_future_error[abi:ne180100](2u);
  }
  this->__state_ |= 1u;
  v4 = std::__thread_local_data();
  v5 = (std::__thread_struct *)pthread_getspecific(v4->__key_);
  std::__thread_struct::__make_ready_at_thread_exit(v5, this);
  std::mutex::unlock(p_mut);
}

void sub_191FCC238(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::__assoc_sub_state::set_exception(std::__assoc_sub_state *this, std::exception_ptr __p)
{
  std::mutex *p_mut;
  void *ptr;
  std::exception_ptr v6;

  p_mut = &this->__mut_;
  std::mutex::lock(&this->__mut_);
  if ((this->__state_ & 1) != 0
    || (ptr = this->__exception_.__ptr_, v6.__ptr_ = 0, std::exception_ptr::~exception_ptr(&v6), ptr))
  {
    std::__throw_future_error[abi:ne180100](2u);
  }
  std::exception_ptr::operator=(&this->__exception_, (const std::exception_ptr *)__p.__ptr_);
  this->__state_ |= 4u;
  std::condition_variable::notify_all(&this->__cv_);
  std::mutex::unlock(p_mut);
}

void sub_191FCC2E4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::__assoc_sub_state::set_exception_at_thread_exit(std::__assoc_sub_state *this, std::exception_ptr __p)
{
  std::mutex *p_mut;
  void *ptr;
  std::__thread_specific_ptr<std::__thread_struct> *v6;
  std::__thread_struct *v7;
  std::exception_ptr v8;

  p_mut = &this->__mut_;
  std::mutex::lock(&this->__mut_);
  if ((this->__state_ & 1) != 0
    || (ptr = this->__exception_.__ptr_, v8.__ptr_ = 0, std::exception_ptr::~exception_ptr(&v8), ptr))
  {
    std::__throw_future_error[abi:ne180100](2u);
  }
  std::exception_ptr::operator=(&this->__exception_, (const std::exception_ptr *)__p.__ptr_);
  v6 = std::__thread_local_data();
  v7 = (std::__thread_struct *)pthread_getspecific(v6->__key_);
  std::__thread_struct::__make_ready_at_thread_exit(v7, this);
  std::mutex::unlock(p_mut);
}

void sub_191FCC390(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::__assoc_sub_state::__make_ready(std::__assoc_sub_state *this)
{
  std::mutex *p_mut;

  p_mut = &this->__mut_;
  std::mutex::lock(&this->__mut_);
  this->__state_ |= 4u;
  std::condition_variable::notify_all(&this->__cv_);
  std::mutex::unlock(p_mut);
}

void std::__assoc_sub_state::copy(std::__assoc_sub_state *this)
{
  std::exception_ptr *p_exception;
  void *ptr;
  std::exception_ptr v4;
  std::exception_ptr v5;
  std::exception_ptr v6;
  std::unique_lock<std::mutex> __lk;

  __lk.__m_ = &this->__mut_;
  __lk.__owns_ = 1;
  std::mutex::lock(&this->__mut_);
  std::__assoc_sub_state::__sub_wait(this, &__lk);
  ptr = this->__exception_.__ptr_;
  p_exception = &this->__exception_;
  v6.__ptr_ = 0;
  std::exception_ptr::~exception_ptr(&v6);
  if (ptr)
  {
    std::exception_ptr::exception_ptr(&v5, p_exception);
    v4.__ptr_ = &v5;
    std::rethrow_exception(v4);
  }
  if (__lk.__owns_)
    std::mutex::unlock(__lk.__m_);
}

void sub_191FCC464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, char a12)
{
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  if (a12)
    std::mutex::unlock(a11);
  _Unwind_Resume(a1);
}

void std::__assoc_sub_state::__sub_wait(std::__assoc_sub_state *this, std::unique_lock<std::mutex> *__lk)
{
  unsigned int state;

  state = this->__state_;
  if ((state & 4) == 0)
  {
    if ((state & 8) != 0)
    {
      this->__state_ = state & 0xFFFFFFF7;
      std::unique_lock<std::mutex>::unlock(__lk);
      ((void (*)(std::__assoc_sub_state *))this->__execute)(this);
    }
    else
    {
      do
        std::condition_variable::wait(&this->__cv_, __lk);
      while ((this->__state_ & 4) == 0);
    }
  }
}

void std::__assoc_sub_state::wait(std::__assoc_sub_state *this)
{
  std::unique_lock<std::mutex> v2;

  v2.__m_ = &this->__mut_;
  v2.__owns_ = 1;
  std::mutex::lock(&this->__mut_);
  std::__assoc_sub_state::__sub_wait(this, &v2);
  if (v2.__owns_)
    std::mutex::unlock(v2.__m_);
}

void sub_191FCC55C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10)
{
  if (a10)
    std::mutex::unlock(a9);
  _Unwind_Resume(exception_object);
}

void std::unique_lock<std::mutex>::unlock(std::unique_lock<std::mutex> *this)
{
  if (!this->__owns_)
    std::__throw_system_error(1, "unique_lock::unlock: not locked");
  std::mutex::unlock(this->__m_);
  this->__owns_ = 0;
}

void std::__assoc_sub_state::__execute(std::__assoc_sub_state *this)
{
  std::__throw_future_error[abi:ne180100](3u);
}

std::future<void> *__cdecl std::future<void>::future(std::future<void> *this, std::__assoc_sub_state *__state)
{
  this->__state_ = __state;
  std::__assoc_sub_state::__attach_future[abi:ne180100]((uint64_t)__state);
  return this;
}

{
  this->__state_ = __state;
  std::__assoc_sub_state::__attach_future[abi:ne180100]((uint64_t)__state);
  return this;
}

void std::__assoc_sub_state::__attach_future[abi:ne180100](uint64_t a1)
{
  std::mutex *v2;
  int v3;
  unint64_t *v4;
  unint64_t v5;

  v2 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  v3 = *(_DWORD *)(a1 + 136);
  if ((v3 & 2) != 0)
    std::__throw_future_error[abi:ne180100](1u);
  v4 = (unint64_t *)(a1 + 8);
  do
    v5 = __ldxr(v4);
  while (__stxr(v5 + 1, v4));
  *(_DWORD *)(a1 + 136) = v3 | 2;
  std::mutex::unlock(v2);
}

void sub_191FCC650(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::future<void>::~future(std::future<void> *this)
{
  std::__assoc_sub_state *state;
  unint64_t *p_shared_owners;
  unint64_t v3;

  state = this->__state_;
  if (state)
  {
    p_shared_owners = (unint64_t *)&state->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
      ((void (*)(std::__assoc_sub_state *))state->__on_zero_shared)(state);
  }
}

{
  std::__assoc_sub_state *state;
  unint64_t *p_shared_owners;
  unint64_t v3;

  state = this->__state_;
  if (state)
  {
    p_shared_owners = (unint64_t *)&state->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
      ((void (*)(std::__assoc_sub_state *))state->__on_zero_shared)(state);
  }
}

void std::future<void>::get(std::future<void> *this)
{
  std::__assoc_sub_state *state;
  unint64_t *p_shared_owners;
  unint64_t v3;

  state = this->__state_;
  this->__state_ = 0;
  std::__assoc_sub_state::copy(state);
  if (state)
  {
    p_shared_owners = (unint64_t *)&state->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
      ((void (*)(std::__assoc_sub_state *))state->__on_zero_shared)(state);
  }
}

void sub_191FCC784(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    std::future<void>::get(v1);
  _Unwind_Resume(exception_object);
}

std::promise<void> *__cdecl std::promise<void>::promise(std::promise<void> *this)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = 850045863;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_QWORD *)(v2 + 80) = 0;
  *(_QWORD *)(v2 + 88) = 1018212795;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 124) = 0u;
  this->__state_ = (std::__assoc_sub_state *)v2;
  return this;
}

{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = 850045863;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_QWORD *)(v2 + 80) = 0;
  *(_QWORD *)(v2 + 88) = 1018212795;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 124) = 0u;
  this->__state_ = (std::__assoc_sub_state *)v2;
  return this;
}

void std::promise<void>::~promise(std::promise<void> *this)
{
  std::__assoc_sub_state *state;
  void *ptr;
  std::exception_ptr v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::future_error v7;
  std::exception_ptr v8;
  std::exception_ptr v9;
  std::error_code v10;

  state = this->__state_;
  if (this->__state_)
  {
    if ((state->__state_ & 1) == 0)
    {
      v9.__ptr_ = 0;
      ptr = state->__exception_.__ptr_;
      std::exception_ptr::~exception_ptr(&v9);
      state = this->__state_;
      if (!ptr && state->__shared_owners_ >= 1)
      {
        std::future_category();
        v10.__cat_ = (const std::error_category *)&std::future_category(void)::helper;
        *(_QWORD *)&v10.__val_ = 4;
        std::future_error::future_error(&v7, v10);
        std::make_exception_ptr[abi:ne180100]<std::future_error>(&v7, (std::exception_ptr **)&v8);
        v4.__ptr_ = &v8;
        std::__assoc_sub_state::set_exception(state, v4);
        std::exception_ptr::~exception_ptr(&v8);
        std::logic_error::~logic_error(&v7);
        state = this->__state_;
      }
    }
    p_shared_owners = (unint64_t *)&state->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
      ((void (*)(std::__assoc_sub_state *))state->__on_zero_shared)(state);
  }
}

void std::make_exception_ptr[abi:ne180100]<std::future_error>(const std::logic_error *a1@<X0>, std::exception_ptr **a2@<X8>)
{
  std::logic_error *exception;
  std::exception_ptr *v5;

  exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
  __cxa_init_primary_exception();
  v5 = (std::exception_ptr *)std::logic_error::logic_error(exception, a1);
  exception[1] = a1[1];
  std::exception_ptr::__from_native_exception_pointer(v5, a2);
}

std::future<void> std::promise<void>::get_future(std::promise<void> *this)
{
  std::__assoc_sub_state **v1;
  std::__assoc_sub_state *state;
  std::future<void> v3;

  state = this->__state_;
  if (!state)
    std::__throw_future_error[abi:ne180100](3u);
  *v1 = state;
  std::__assoc_sub_state::__attach_future[abi:ne180100]((uint64_t)state);
  return v3;
}

void std::promise<void>::set_value(std::promise<void> *this)
{
  std::__assoc_sub_state *state;

  state = this->__state_;
  if (!state)
    std::__throw_future_error[abi:ne180100](3u);
  std::__assoc_sub_state::set_value(state);
}

void std::promise<void>::set_exception(std::promise<void> *this, std::exception_ptr __p)
{
  std::__assoc_sub_state *state;
  std::exception_ptr v3;
  std::exception_ptr v4;

  state = this->__state_;
  if (!this->__state_)
    std::__throw_future_error[abi:ne180100](3u);
  std::exception_ptr::exception_ptr(&v4, (const std::exception_ptr *)__p.__ptr_);
  v3.__ptr_ = &v4;
  std::__assoc_sub_state::set_exception(state, v3);
  std::exception_ptr::~exception_ptr(&v4);
}

void sub_191FCCA58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  _Unwind_Resume(a1);
}

void std::promise<void>::set_value_at_thread_exit(std::promise<void> *this)
{
  std::__assoc_sub_state *state;

  state = this->__state_;
  if (!state)
    std::__throw_future_error[abi:ne180100](3u);
  std::__assoc_sub_state::set_value_at_thread_exit(state);
}

void std::promise<void>::set_exception_at_thread_exit(std::promise<void> *this, std::exception_ptr __p)
{
  std::__assoc_sub_state *state;
  std::exception_ptr v3;
  std::exception_ptr v4;

  state = this->__state_;
  if (!this->__state_)
    std::__throw_future_error[abi:ne180100](3u);
  std::exception_ptr::exception_ptr(&v4, (const std::exception_ptr *)__p.__ptr_);
  v3.__ptr_ = &v4;
  std::__assoc_sub_state::set_exception_at_thread_exit(state, v3);
  std::exception_ptr::~exception_ptr(&v4);
}

void sub_191FCCAD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  _Unwind_Resume(a1);
}

void std::shared_future<void>::~shared_future(std::shared_future<void> *this)
{
  std::__assoc_sub_state *state;
  unint64_t *p_shared_owners;
  unint64_t v3;

  state = this->__state_;
  if (state)
  {
    p_shared_owners = (unint64_t *)&state->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
      ((void (*)(std::__assoc_sub_state *))state->__on_zero_shared)(state);
  }
}

{
  std::__assoc_sub_state *state;
  unint64_t *p_shared_owners;
  unint64_t v3;

  state = this->__state_;
  if (state)
  {
    p_shared_owners = (unint64_t *)&state->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
      ((void (*)(std::__assoc_sub_state *))state->__on_zero_shared)(state);
  }
}

std::shared_future<void> *__cdecl std::shared_future<void>::operator=(std::shared_future<void> *this, const std::shared_future<void> *__rhs)
{
  uint64_t *p_shared_owners;
  unint64_t v5;
  std::__assoc_sub_state *state;
  unint64_t *v7;
  unint64_t v8;

  if (__rhs->__state_)
  {
    p_shared_owners = &__rhs->__state_->__shared_owners_;
    do
      v5 = __ldxr((unint64_t *)p_shared_owners);
    while (__stxr(v5 + 1, (unint64_t *)p_shared_owners));
  }
  state = this->__state_;
  if (this->__state_)
  {
    v7 = (unint64_t *)&state->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
      ((void (*)(std::__assoc_sub_state *))state->__on_zero_shared)(state);
  }
  this->__state_ = __rhs->__state_;
  return this;
}

void std::__assoc_sub_state::~__assoc_sub_state(std::__assoc_sub_state *this)
{
  std::exception_ptr *p_exception;

  p_exception = &this->__exception_;
  std::condition_variable::~condition_variable(&this->__cv_);
  std::mutex::~mutex(&this->__mut_);
  std::exception_ptr::~exception_ptr(p_exception);
  std::__shared_count::~__shared_count(this);
}

{
  std::exception_ptr *p_exception;

  p_exception = &this->__exception_;
  std::condition_variable::~condition_variable(&this->__cv_);
  std::mutex::~mutex(&this->__mut_);
  std::exception_ptr::~exception_ptr(p_exception);
  std::__shared_count::~__shared_count(this);
  JUMPOUT(0x194021E38);
}

void std::__future_error_category::~__future_error_category(std::error_category *this)
{
  std::error_category::~error_category(this);
  JUMPOUT(0x194021E38);
}

uint64_t std::make_exception_ptr[abi:ne180100]<std::future_error>(std::future_error)::{lambda(void *)#1}::__invoke(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void std::mutex::~mutex(std::mutex *this)
{
  pthread_mutex_destroy(&this->__m_);
}

{
  pthread_mutex_destroy(&this->__m_);
}

void std::mutex::lock(std::mutex *this)
{
  int v1;

  v1 = pthread_mutex_lock(&this->__m_);
  if (v1)
    std::__throw_system_error(v1, "mutex lock failed");
}

BOOL std::mutex::try_lock(std::mutex *this)
{
  return pthread_mutex_trylock(&this->__m_) == 0;
}

void std::mutex::unlock(std::mutex *this)
{
  pthread_mutex_unlock(&this->__m_);
}

std::recursive_mutex *__cdecl std::recursive_mutex::recursive_mutex(std::recursive_mutex *this)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int __eva;
  int __ev;
  pthread_mutexattr_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = pthread_mutexattr_init(&v9);
  if (v2)
    std::__throw_system_error(v2, "recursive_mutex constructor failed");
  v3 = pthread_mutexattr_settype(&v9, 2);
  if (v3)
  {
    __eva = v3;
    pthread_mutexattr_destroy(&v9);
    std::__throw_system_error(__eva, "recursive_mutex constructor failed");
  }
  v4 = pthread_mutex_init(&this->__m_, &v9);
  v5 = pthread_mutexattr_destroy(&v9);
  if (v4)
    std::__throw_system_error(v4, "recursive_mutex constructor failed");
  if (v5)
  {
    __ev = v5;
    pthread_mutex_destroy(&this->__m_);
    std::__throw_system_error(__ev, "recursive_mutex constructor failed");
  }
  return this;
}

void std::recursive_mutex::~recursive_mutex(std::recursive_mutex *this)
{
  pthread_mutex_destroy(&this->__m_);
}

{
  pthread_mutex_destroy(&this->__m_);
}

void std::recursive_mutex::lock(std::recursive_mutex *this)
{
  int v1;

  v1 = pthread_mutex_lock(&this->__m_);
  if (v1)
    std::__throw_system_error(v1, "recursive_mutex lock failed");
}

void std::recursive_mutex::unlock(std::recursive_mutex *this)
{
  pthread_mutex_unlock(&this->__m_);
}

BOOL std::recursive_mutex::try_lock(std::recursive_mutex *this)
{
  return pthread_mutex_trylock(&this->__m_) == 0;
}

std::timed_mutex *__cdecl std::timed_mutex::timed_mutex(std::timed_mutex *this)
{
  this->__m_.__m_.__sig = 850045863;
  *(_OWORD *)this->__m_.__m_.__opaque = 0u;
  *(_OWORD *)&this->__m_.__m_.__opaque[16] = 0u;
  *(_OWORD *)&this->__m_.__m_.__opaque[32] = 0u;
  *(_QWORD *)&this->__m_.__m_.__opaque[48] = 0;
  this->__cv_.__cv_.__sig = 1018212795;
  *(_OWORD *)this->__cv_.__cv_.__opaque = 0u;
  *(_OWORD *)&this->__cv_.__cv_.__opaque[16] = 0u;
  *(_OWORD *)&this->__cv_.__cv_.__opaque[25] = 0u;
  return this;
}

{
  this->__m_.__m_.__sig = 850045863;
  *(_OWORD *)this->__m_.__m_.__opaque = 0u;
  *(_OWORD *)&this->__m_.__m_.__opaque[16] = 0u;
  *(_OWORD *)&this->__m_.__m_.__opaque[32] = 0u;
  *(_QWORD *)&this->__m_.__m_.__opaque[48] = 0;
  this->__cv_.__cv_.__sig = 1018212795;
  *(_OWORD *)this->__cv_.__cv_.__opaque = 0u;
  *(_OWORD *)&this->__cv_.__cv_.__opaque[16] = 0u;
  *(_OWORD *)&this->__cv_.__cv_.__opaque[25] = 0u;
  return this;
}

void std::timed_mutex::~timed_mutex(std::timed_mutex *this)
{
  std::mutex::lock(&this->__m_);
  pthread_mutex_unlock(&this->__m_.__m_);
  std::condition_variable::~condition_variable(&this->__cv_);
  std::mutex::~mutex(&this->__m_);
}

void std::timed_mutex::lock(std::timed_mutex *this)
{
  std::unique_lock<std::mutex> v2;

  v2.__m_ = &this->__m_;
  v2.__owns_ = 1;
  std::mutex::lock(&this->__m_);
  while (this->__locked_)
    std::condition_variable::wait(&this->__cv_, &v2);
  this->__locked_ = 1;
  std::unique_lock<std::mutex>::~unique_lock[abi:ne180100]((uint64_t)&v2);
}

BOOL std::timed_mutex::try_lock(std::timed_mutex *this)
{
  int v2;
  BOOL v3;
  std::timed_mutex *v5;
  BOOL v6;

  v5 = this;
  v2 = pthread_mutex_trylock(&this->__m_.__m_);
  v6 = v2 == 0;
  if (v2 || this->__locked_)
  {
    v3 = 0;
  }
  else
  {
    v3 = 1;
    this->__locked_ = 1;
  }
  std::unique_lock<std::mutex>::~unique_lock[abi:ne180100]((uint64_t)&v5);
  return v3;
}

void std::timed_mutex::unlock(std::timed_mutex *this)
{
  std::mutex::lock(&this->__m_);
  this->__locked_ = 0;
  std::condition_variable::notify_one(&this->__cv_);
  pthread_mutex_unlock(&this->__m_.__m_);
}

std::recursive_timed_mutex *__cdecl std::recursive_timed_mutex::recursive_timed_mutex(std::recursive_timed_mutex *this)
{
  this->__m_.__m_.__sig = 850045863;
  *(_OWORD *)this->__m_.__m_.__opaque = 0u;
  *(_OWORD *)&this->__m_.__m_.__opaque[16] = 0u;
  *(_OWORD *)&this->__m_.__m_.__opaque[32] = 0u;
  *(_QWORD *)&this->__m_.__m_.__opaque[48] = 0;
  this->__cv_.__cv_.__sig = 1018212795;
  *(_OWORD *)this->__cv_.__cv_.__opaque = 0u;
  *(_OWORD *)&this->__cv_.__cv_.__opaque[16] = 0u;
  *(_OWORD *)&this->__cv_.__cv_.__opaque[32] = 0u;
  this->__id_.__id_ = 0;
  return this;
}

{
  this->__m_.__m_.__sig = 850045863;
  *(_OWORD *)this->__m_.__m_.__opaque = 0u;
  *(_OWORD *)&this->__m_.__m_.__opaque[16] = 0u;
  *(_OWORD *)&this->__m_.__m_.__opaque[32] = 0u;
  *(_QWORD *)&this->__m_.__m_.__opaque[48] = 0;
  this->__cv_.__cv_.__sig = 1018212795;
  *(_OWORD *)this->__cv_.__cv_.__opaque = 0u;
  *(_OWORD *)&this->__cv_.__cv_.__opaque[16] = 0u;
  *(_OWORD *)&this->__cv_.__cv_.__opaque[32] = 0u;
  this->__id_.__id_ = 0;
  return this;
}

void std::recursive_timed_mutex::~recursive_timed_mutex(std::recursive_timed_mutex *this)
{
  std::mutex::lock(&this->__m_);
  pthread_mutex_unlock(&this->__m_.__m_);
  std::condition_variable::~condition_variable(&this->__cv_);
  std::mutex::~mutex(&this->__m_);
}

void std::recursive_timed_mutex::lock(std::recursive_timed_mutex *this)
{
  _opaque_pthread_t *v2;
  std::__libcpp_thread_id id;
  size_t count;
  std::unique_lock<std::mutex> v5;

  v2 = pthread_self();
  v5.__m_ = &this->__m_;
  v5.__owns_ = 1;
  std::mutex::lock(&this->__m_);
  id = this->__id_.__id_;
  if (v2)
  {
    if (id && v2 == id)
      goto LABEL_4;
  }
  else if (!id)
  {
LABEL_4:
    count = this->__count_;
    if (count == -1)
      std::__throw_system_error(35, "recursive_timed_mutex lock limit reached");
    this->__count_ = count + 1;
    goto LABEL_10;
  }
  while (this->__count_)
    std::condition_variable::wait(&this->__cv_, &v5);
  this->__count_ = 1;
  this->__id_.__id_ = v2;
LABEL_10:
  std::unique_lock<std::mutex>::~unique_lock[abi:ne180100]((uint64_t)&v5);
}

void sub_191FCD224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_lock<std::mutex>::~unique_lock[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL std::recursive_timed_mutex::try_lock(std::recursive_timed_mutex *this)
{
  _opaque_pthread_t *v2;
  int v3;
  BOOL v4;
  size_t count;
  std::__libcpp_thread_id id;
  std::recursive_timed_mutex *v8;
  BOOL v9;

  v2 = pthread_self();
  v8 = this;
  v3 = pthread_mutex_trylock(&this->__m_.__m_);
  v9 = v3 == 0;
  if (v3)
  {
    v4 = 0;
    goto LABEL_12;
  }
  count = this->__count_;
  if (!count)
    goto LABEL_11;
  id = this->__id_.__id_;
  v4 = 0;
  if (v2)
  {
    if (count == -1 || !id || v2 != id)
      goto LABEL_12;
LABEL_11:
    this->__count_ = count + 1;
    this->__id_.__id_ = v2;
    v4 = 1;
    goto LABEL_12;
  }
  if (count != -1 && !id)
    goto LABEL_11;
LABEL_12:
  std::unique_lock<std::mutex>::~unique_lock[abi:ne180100]((uint64_t)&v8);
  return v4;
}

void std::recursive_timed_mutex::unlock(std::recursive_timed_mutex *this)
{
  size_t v2;
  std::unique_lock<std::mutex> v3;

  v3.__m_ = &this->__m_;
  v3.__owns_ = 1;
  std::mutex::lock(&this->__m_);
  v2 = this->__count_ - 1;
  this->__count_ = v2;
  if (!v2)
  {
    this->__id_.__id_ = 0;
    std::unique_lock<std::mutex>::unlock(&v3);
    std::condition_variable::notify_one(&this->__cv_);
  }
  std::unique_lock<std::mutex>::~unique_lock[abi:ne180100]((uint64_t)&v3);
}

uint64_t std::unique_lock<std::mutex>::~unique_lock[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    pthread_mutex_unlock(*(pthread_mutex_t **)a1);
  return a1;
}

std::__shared_mutex_base *__cdecl std::__shared_mutex_base::__shared_mutex_base(std::__shared_mutex_base *this)
{
  this->__mut_.__m_.__sig = 850045863;
  *(_OWORD *)this->__mut_.__m_.__opaque = 0u;
  *(_OWORD *)&this->__mut_.__m_.__opaque[16] = 0u;
  *(_OWORD *)&this->__mut_.__m_.__opaque[32] = 0u;
  *(_QWORD *)&this->__mut_.__m_.__opaque[48] = 0;
  this->__gate1_.__cv_.__sig = 1018212795;
  *(_OWORD *)this->__gate1_.__cv_.__opaque = 0u;
  *(_OWORD *)&this->__gate1_.__cv_.__opaque[16] = 0u;
  *(_QWORD *)&this->__gate1_.__cv_.__opaque[32] = 0;
  this->__gate2_.__cv_.__sig = 1018212795;
  *(_OWORD *)this->__gate2_.__cv_.__opaque = 0u;
  *(_OWORD *)&this->__gate2_.__cv_.__opaque[16] = 0u;
  *(_OWORD *)&this->__gate2_.__cv_.__opaque[28] = 0u;
  return this;
}

{
  this->__mut_.__m_.__sig = 850045863;
  *(_OWORD *)this->__mut_.__m_.__opaque = 0u;
  *(_OWORD *)&this->__mut_.__m_.__opaque[16] = 0u;
  *(_OWORD *)&this->__mut_.__m_.__opaque[32] = 0u;
  *(_QWORD *)&this->__mut_.__m_.__opaque[48] = 0;
  this->__gate1_.__cv_.__sig = 1018212795;
  *(_OWORD *)this->__gate1_.__cv_.__opaque = 0u;
  *(_OWORD *)&this->__gate1_.__cv_.__opaque[16] = 0u;
  *(_QWORD *)&this->__gate1_.__cv_.__opaque[32] = 0;
  this->__gate2_.__cv_.__sig = 1018212795;
  *(_OWORD *)this->__gate2_.__cv_.__opaque = 0u;
  *(_OWORD *)&this->__gate2_.__cv_.__opaque[16] = 0u;
  *(_OWORD *)&this->__gate2_.__cv_.__opaque[28] = 0u;
  return this;
}

void std::__shared_mutex_base::lock(std::__shared_mutex_base *this)
{
  unsigned int i;
  std::unique_lock<std::mutex> v3;

  v3.__m_ = &this->__mut_;
  v3.__owns_ = 1;
  std::mutex::lock(&this->__mut_);
  for (i = this->__state_; (i & 0x80000000) != 0; i = this->__state_)
    std::condition_variable::wait(&this->__gate1_, &v3);
  this->__state_ = i | 0x80000000;
  if (i)
  {
    do
      std::condition_variable::wait(&this->__gate2_, &v3);
    while ((this->__state_ & 0x7FFFFFFF) != 0);
  }
  if (v3.__owns_)
    std::mutex::unlock(v3.__m_);
}

BOOL std::__shared_mutex_base::try_lock(std::__shared_mutex_base *this)
{
  unsigned int state;
  BOOL v3;

  std::mutex::lock(&this->__mut_);
  state = this->__state_;
  if (!state)
    this->__state_ = 0x80000000;
  v3 = state == 0;
  std::mutex::unlock(&this->__mut_);
  return v3;
}

void std::__shared_mutex_base::unlock(std::__shared_mutex_base *this)
{
  std::mutex::lock(&this->__mut_);
  this->__state_ = 0;
  std::condition_variable::notify_all(&this->__gate1_);
  std::mutex::unlock(&this->__mut_);
}

void std::__shared_mutex_base::lock_shared(std::__shared_mutex_base *this)
{
  unsigned int state;
  unsigned int v3;
  _BOOL4 owns;
  std::unique_lock<std::mutex> v5;

  v5.__m_ = &this->__mut_;
  v5.__owns_ = 1;
  std::mutex::lock(&this->__mut_);
  state = this->__state_;
  if (state <= 0x7FFFFFFE)
  {
    this->__state_ = state + 1;
LABEL_6:
    std::mutex::unlock(v5.__m_);
    return;
  }
  do
  {
    std::condition_variable::wait(&this->__gate1_, &v5);
    v3 = this->__state_;
  }
  while (v3 > 0x7FFFFFFE);
  owns = v5.__owns_;
  this->__state_ = v3 + 1;
  if (owns)
    goto LABEL_6;
}

BOOL std::__shared_mutex_base::try_lock_shared(std::__shared_mutex_base *this)
{
  unsigned int state;
  BOOL v3;

  std::mutex::lock(&this->__mut_);
  state = this->__state_;
  if (state <= 0x7FFFFFFE)
    this->__state_ = state + 1;
  v3 = state < 0x7FFFFFFF;
  std::mutex::unlock(&this->__mut_);
  return v3;
}

void std::__shared_mutex_base::unlock_shared(std::__shared_mutex_base *this)
{
  unsigned int state;
  int v3;
  unsigned int v4;
  std::condition_variable *p_gate2;

  std::mutex::lock(&this->__mut_);
  state = this->__state_;
  v3 = (state & 0x7FFFFFFF) - 1;
  v4 = v3 | state & 0x80000000;
  this->__state_ = v4;
  if ((v4 & 0x80000000) != 0)
  {
    if (!v3)
    {
      p_gate2 = &this->__gate2_;
      goto LABEL_6;
    }
  }
  else if (v3 == 2147483646)
  {
    p_gate2 = &this->__gate1_;
LABEL_6:
    std::condition_variable::notify_one(p_gate2);
  }
  std::mutex::unlock(&this->__mut_);
}

std::shared_timed_mutex *__cdecl std::shared_timed_mutex::shared_timed_mutex(std::shared_timed_mutex *this)
{
  this->__base_.__mut_.__m_.__sig = 850045863;
  *(_OWORD *)this->__base_.__mut_.__m_.__opaque = 0u;
  *(_OWORD *)&this->__base_.__mut_.__m_.__opaque[16] = 0u;
  *(_OWORD *)&this->__base_.__mut_.__m_.__opaque[32] = 0u;
  *(_QWORD *)&this->__base_.__mut_.__m_.__opaque[48] = 0;
  this->__base_.__gate1_.__cv_.__sig = 1018212795;
  *(_OWORD *)this->__base_.__gate1_.__cv_.__opaque = 0u;
  *(_OWORD *)&this->__base_.__gate1_.__cv_.__opaque[16] = 0u;
  *(_QWORD *)&this->__base_.__gate1_.__cv_.__opaque[32] = 0;
  this->__base_.__gate2_.__cv_.__sig = 1018212795;
  *(_OWORD *)this->__base_.__gate2_.__cv_.__opaque = 0u;
  *(_OWORD *)&this->__base_.__gate2_.__cv_.__opaque[16] = 0u;
  *(_OWORD *)&this->__base_.__gate2_.__cv_.__opaque[28] = 0u;
  return this;
}

{
  this->__base_.__mut_.__m_.__sig = 850045863;
  *(_OWORD *)this->__base_.__mut_.__m_.__opaque = 0u;
  *(_OWORD *)&this->__base_.__mut_.__m_.__opaque[16] = 0u;
  *(_OWORD *)&this->__base_.__mut_.__m_.__opaque[32] = 0u;
  *(_QWORD *)&this->__base_.__mut_.__m_.__opaque[48] = 0;
  this->__base_.__gate1_.__cv_.__sig = 1018212795;
  *(_OWORD *)this->__base_.__gate1_.__cv_.__opaque = 0u;
  *(_OWORD *)&this->__base_.__gate1_.__cv_.__opaque[16] = 0u;
  *(_QWORD *)&this->__base_.__gate1_.__cv_.__opaque[32] = 0;
  this->__base_.__gate2_.__cv_.__sig = 1018212795;
  *(_OWORD *)this->__base_.__gate2_.__cv_.__opaque = 0u;
  *(_OWORD *)&this->__base_.__gate2_.__cv_.__opaque[16] = 0u;
  *(_OWORD *)&this->__base_.__gate2_.__cv_.__opaque[28] = 0u;
  return this;
}

void std::thread::~thread(std::thread *this)
{
  if (this->__t_)
    std::terminate();
}

{
  if (this->__t_)
    std::terminate();
}

void std::thread::join(std::thread *this)
{
  _opaque_pthread_t *t;
  int v3;

  t = this->__t_;
  if (!t)
  {
    v3 = 22;
LABEL_5:
    std::__throw_system_error(v3, "thread::join failed");
  }
  v3 = pthread_join(t, 0);
  if (v3)
    goto LABEL_5;
  this->__t_ = 0;
}

void std::thread::detach(std::thread *this)
{
  _opaque_pthread_t *t;
  int v3;

  t = this->__t_;
  if (!t)
  {
    v3 = 22;
LABEL_5:
    std::__throw_system_error(v3, "thread::detach failed");
  }
  v3 = pthread_detach(t);
  if (v3)
    goto LABEL_5;
  this->__t_ = 0;
}

unsigned int std::thread::hardware_concurrency(void)
{
  uint64_t v0;

  v0 = sysconf(58);
  return v0 & ~(v0 >> 63);
}

void std::this_thread::sleep_for (const std::chrono::nanoseconds *__ns)
{
  unint64_t rep;
  timespec v2;

  rep = __ns->__rep_;
  if (__ns->__rep_ >= 1)
  {
    v2.tv_sec = rep / 0x3B9ACA00;
    v2.tv_nsec = rep % 0x3B9ACA00;
    while (nanosleep(&v2, &v2) == -1 && *__error() == 4)
      ;
  }
}

std::__thread_specific_ptr<std::__thread_struct> *std::__thread_local_data(void)
{
  unsigned __int8 v0;

  {
    std::__thread_local_data(void)::__p = (uint64_t)std::__thread_specific_ptr<std::__thread_struct>::__thread_specific_ptr(&std::__thread_local_data(void)::__b);
  }
  return (std::__thread_specific_ptr<std::__thread_struct> *)std::__thread_local_data(void)::__p;
}

void sub_191FCD898(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__thread_struct_imp::~__thread_struct_imp(std::__thread_struct_imp *this)
{
  uint64_t v2;
  uint64_t v3;
  std::__assoc_sub_state **v4;
  std::__assoc_sub_state **v5;
  std::__assoc_sub_state *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;
  void *v10;

  v2 = *((_QWORD *)this + 3);
  v3 = *((_QWORD *)this + 4);
  while (v2 != v3)
  {
    std::condition_variable::notify_all(*(std::condition_variable **)v2);
    std::mutex::unlock(*(std::mutex **)(v2 + 8));
    v2 += 16;
  }
  v4 = *(std::__assoc_sub_state ***)this;
  v5 = (std::__assoc_sub_state **)*((_QWORD *)this + 1);
  while (v4 != v5)
  {
    std::__assoc_sub_state::__make_ready(*v4);
    v6 = *v4;
    p_shared_owners = (unint64_t *)&(*v4)->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
      ((void (*)(std::__assoc_sub_state *))v6->__on_zero_shared)(v6);
    ++v4;
  }
  v9 = (void *)*((_QWORD *)this + 3);
  if (v9)
  {
    *((_QWORD *)this + 4) = v9;
    operator delete(v9);
  }
  v10 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v10;
    operator delete(v10);
  }
}

void std::__thread_struct_imp::notify_all_at_thread_exit(std::__thread_struct_imp *this, std::condition_variable *a2, std::mutex *a3)
{
  unint64_t v6;
  char *v7;
  _QWORD *v8;
  void **v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;

  v7 = (char *)*((_QWORD *)this + 4);
  v6 = *((_QWORD *)this + 5);
  if ((unint64_t)v7 >= v6)
  {
    v9 = (void **)((char *)this + 24);
    v10 = (char *)*((_QWORD *)this + 3);
    v11 = (v7 - v10) >> 4;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60)
      std::vector<std::pair<std::condition_variable *,std::mutex *>,std::__hidden_allocator<std::pair<std::condition_variable *,std::mutex *>>>::__throw_length_error[abi:ne180100]();
    v13 = v6 - (_QWORD)v10;
    if (v13 >> 3 > v12)
      v12 = v13 >> 3;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      v15 = (char *)operator new(16 * v14);
      v10 = (char *)*((_QWORD *)this + 3);
      v7 = (char *)*((_QWORD *)this + 4);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[16 * v11];
    v17 = &v15[16 * v14];
    *(_QWORD *)v16 = a2;
    *((_QWORD *)v16 + 1) = a3;
    v8 = v16 + 16;
    if (v7 != v10)
    {
      do
      {
        *((_OWORD *)v16 - 1) = *((_OWORD *)v7 - 1);
        v16 -= 16;
        v7 -= 16;
      }
      while (v7 != v10);
      v10 = (char *)*v9;
    }
    *((_QWORD *)this + 3) = v16;
    *((_QWORD *)this + 4) = v8;
    *((_QWORD *)this + 5) = v17;
    if (v10)
      operator delete(v10);
  }
  else
  {
    *(_QWORD *)v7 = a2;
    *((_QWORD *)v7 + 1) = a3;
    v8 = v7 + 16;
  }
  *((_QWORD *)this + 4) = v8;
}

void std::__thread_struct_imp::__make_ready_at_thread_exit(std::__thread_struct_imp *this, std::__assoc_sub_state *a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t *p_shared_owners;
  unint64_t v17;

  v5 = (_QWORD *)*((_QWORD *)this + 1);
  v4 = *((_QWORD *)this + 2);
  if ((unint64_t)v5 >= v4)
  {
    v7 = *(_QWORD **)this;
    v8 = ((uint64_t)v5 - *(_QWORD *)this) >> 3;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61)
      std::vector<std::__assoc_sub_state *,std::__hidden_allocator<std::__assoc_sub_state *>>::__throw_length_error[abi:ne180100]();
    v10 = v4 - (_QWORD)v7;
    if (v10 >> 2 > v9)
      v9 = v10 >> 2;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      v12 = (char *)operator new(8 * v11);
      v7 = *(_QWORD **)this;
      v5 = (_QWORD *)*((_QWORD *)this + 1);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[8 * v8];
    v14 = &v12[8 * v11];
    *(_QWORD *)v13 = a2;
    v6 = v13 + 8;
    if (v5 != v7)
    {
      do
      {
        v15 = *--v5;
        *((_QWORD *)v13 - 1) = v15;
        v13 -= 8;
      }
      while (v5 != v7);
      v7 = *(_QWORD **)this;
    }
    *(_QWORD *)this = v13;
    *((_QWORD *)this + 1) = v6;
    *((_QWORD *)this + 2) = v14;
    if (v7)
      operator delete(v7);
  }
  else
  {
    *v5 = a2;
    v6 = v5 + 1;
  }
  *((_QWORD *)this + 1) = v6;
  p_shared_owners = &a2->__shared_owners_;
  do
    v17 = __ldxr((unint64_t *)p_shared_owners);
  while (__stxr(v17 + 1, (unint64_t *)p_shared_owners));
}

std::__thread_struct *__cdecl std::__thread_struct::__thread_struct(std::__thread_struct *this)
{
  std::__thread_struct_imp *v2;

  v2 = (std::__thread_struct_imp *)operator new();
  *(_OWORD *)v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  *((_OWORD *)v2 + 2) = 0u;
  this->__p_ = v2;
  return this;
}

{
  std::__thread_struct_imp *v2;

  v2 = (std::__thread_struct_imp *)operator new();
  *(_OWORD *)v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  *((_OWORD *)v2 + 2) = 0u;
  this->__p_ = v2;
  return this;
}

void std::__thread_struct::~__thread_struct(std::__thread_struct *this)
{
  std::__thread_struct_imp *p;

  p = this->__p_;
  if (p)
  {
    std::__thread_struct_imp::~__thread_struct_imp(p);
    MEMORY[0x194021E38]();
  }
}

void std::__thread_struct::notify_all_at_thread_exit(std::__thread_struct *this, std::condition_variable *a2, std::mutex *a3)
{
  std::__thread_struct_imp::notify_all_at_thread_exit(this->__p_, a2, a3);
}

void std::__thread_struct::__make_ready_at_thread_exit(std::__thread_struct *this, std::__assoc_sub_state *a2)
{
  std::__thread_struct_imp::__make_ready_at_thread_exit(this->__p_, a2);
}

void std::vector<std::pair<std::condition_variable *,std::mutex *>,std::__hidden_allocator<std::pair<std::condition_variable *,std::mutex *>>>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void std::vector<std::__assoc_sub_state *,std::__hidden_allocator<std::__assoc_sub_state *>>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

std::__thread_specific_ptr<std::__thread_struct> *__cdecl std::__thread_specific_ptr<std::__thread_struct>::__thread_specific_ptr(std::__thread_specific_ptr<std::__thread_struct> *this)
{
  int v2;

  v2 = pthread_key_create(&this->__key_, std::__thread_specific_ptr<std::__thread_struct>::__at_thread_exit);
  if (v2)
    std::__throw_system_error(v2, "__thread_specific_ptr construction failed");
  return this;
}

void std::__thread_specific_ptr<std::__thread_struct>::__at_thread_exit(void *a1)
{
  if (a1)
  {
    std::__thread_struct::~__thread_struct((std::__thread_struct *)a1);
    JUMPOUT(0x194021E38);
  }
}

double std::random_device::entropy(const std::random_device *this)
{
  return 32.0;
}

const char *std::__iostream_category::name(std::__iostream_category *this)
{
  return "iostream";
}

std::string *std::__iostream_category::message@<X0>(const std::__do_message *this@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  if (a2 == 1 || a2 > 106)
    return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, "unspecified iostream_category error");
  else
    return std::__do_message::message(a3, this, a2);
}

const std::error_category *std::iostream_category(void)
{
  unsigned __int8 v0;

  return (const std::error_category *)&std::iostream_category(void)::helper;
}

std::ios_base::failure *__cdecl std::ios_base::failure::failure(std::ios_base::failure *this, const std::string *__msg, const std::error_code *__ec)
{
  std::ios_base::failure *result;

  result = (std::ios_base::failure *)std::system_error::system_error(this, *__ec, __msg);
  return result;
}

{
  std::ios_base::failure *result;

  result = (std::ios_base::failure *)std::system_error::system_error(this, *__ec, __msg);
  return result;
}

std::ios_base::failure *__cdecl std::ios_base::failure::failure(std::ios_base::failure *this, const char *__msg, const std::error_code *__ec)
{
  std::ios_base::failure *result;

  result = (std::ios_base::failure *)std::system_error::system_error(this, *__ec, __msg);
  return result;
}

{
  std::ios_base::failure *result;

  result = (std::ios_base::failure *)std::system_error::system_error(this, *__ec, __msg);
  return result;
}

void std::ios_base::failure::~failure(std::ios_base::failure *this)
{
  std::system_error::~system_error(this);
  JUMPOUT(0x194021E38);
}

void std::ios_base::__call_callbacks(std::ios_base *this, std::ios_base::event a2)
{
  size_t event_size;
  uint64_t v3;
  size_t v5;

  event_size = this->__event_size_;
  if (event_size)
  {
    v3 = *(_QWORD *)&a2;
    v5 = event_size - 1;
    do
    {
      ((void (*)(uint64_t, std::ios_base *, _QWORD))this->__fn_[v5])(v3, this, this->__index_[v5]);
      --v5;
    }
    while (v5 != -1);
  }
}

std::locale std::ios_base::imbue(std::ios_base *this, const std::locale *__loc)
{
  std::locale *v2;
  std::locale *p_loc;
  const std::locale *v6;
  size_t event_size;
  size_t v8;

  p_loc = (std::locale *)&this->__loc_;
  std::locale::locale(v2, (const std::locale *)&this->__loc_);
  v6 = std::locale::operator=(p_loc, __loc);
  event_size = this->__event_size_;
  if (event_size)
  {
    v8 = event_size - 1;
    do
    {
      v6 = (const std::locale *)((uint64_t (*)(uint64_t, std::ios_base *, _QWORD))this->__fn_[v8])(1, this, this->__index_[v8]);
      --v8;
    }
    while (v8 != -1);
  }
  return (std::locale)v6;
}

void sub_191FCDEF8(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  std::locale *v1;

  return (std::locale)std::locale::locale(v1, (const std::locale *)&this->__loc_);
}

int std::ios_base::xalloc(void)
{
  int result;

  do
    result = __ldaxr(&std::ios_base::__xindex_);
  while (__stlxr(result + 1, &std::ios_base::__xindex_));
  return result;
}

uint64_t *__cdecl std::ios_base::iword(std::ios_base *this, int __index)
{
  uint64_t v3;
  unint64_t v4;
  size_t iarray_cap;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *iarray;
  int64_t iarray_size;
  uint64_t *v12;
  uint64_t *v13;
  size_t v14;
  uint64_t *result;

  v3 = __index;
  v4 = __index + 1;
  iarray_cap = this->__iarray_cap_;
  if (v4 <= iarray_cap)
  {
    iarray = this->__iarray_;
  }
  else
  {
    v6 = 2 * iarray_cap;
    if (v6 <= v4)
      v6 = __index + 1;
    if (v4 >= 0xFFFFFFFFFFFFFFFLL)
      v7 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v7 = v6;
    v8 = v7;
    v9 = (uint64_t *)malloc_type_realloc(this->__iarray_, 8 * v7, 0x100004000313F17uLL);
    if (!v9)
    {
      std::ios_base::clear(this, this->__rdstate_ | 1);
      result = &std::ios_base::iword(int)::error;
      std::ios_base::iword(int)::error = 0;
      return result;
    }
    iarray = v9;
    this->__iarray_ = v9;
    iarray_size = this->__iarray_size_;
    if (iarray_size < v7)
    {
      v12 = &v9[iarray_size];
      v13 = v12 + 1;
      if (v12 + 1 <= &iarray[v8])
        v13 = &iarray[v8];
      bzero(v12, (((unint64_t)v13 + ~(unint64_t)iarray + -8 * iarray_size) & 0xFFFFFFFFFFFFFFF8) + 8);
    }
    this->__iarray_cap_ = v7;
  }
  v14 = this->__iarray_size_;
  if (v14 <= v4)
    v14 = v4;
  this->__iarray_size_ = v14;
  return &iarray[v3];
}

void **__cdecl std::ios_base::pword(std::ios_base *this, int __index)
{
  uint64_t v3;
  size_t v4;
  void **v5;
  unint64_t v6;
  int64_t v7;
  void **parray;
  size_t parray_size;
  void **v10;
  void **result;

  v3 = __index;
  v4 = __index + 1;
  if (v4 <= this->__parray_cap_)
  {
    parray = this->__parray_;
    parray_size = this->__parray_size_;
  }
  else
  {
    v5 = this->__parray_;
    v6 = 2 * this->__iarray_cap_;
    if (v6 <= v4)
      v6 = __index + 1;
    if (v4 >= 0xFFFFFFFFFFFFFFFLL)
      v7 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v7 = v6;
    parray = (void **)malloc_type_realloc(v5, 8 * v7, 0x80040B8603338uLL);
    if (!parray)
    {
      std::ios_base::clear(this, this->__rdstate_ | 1);
      result = (void **)&std::ios_base::pword(int)::error;
      std::ios_base::pword(int)::error = 0;
      return result;
    }
    this->__parray_ = parray;
    parray_size = this->__parray_size_;
    if ((uint64_t)parray_size < v7)
    {
      v10 = &parray[parray_size];
      do
      {
        *v10++ = 0;
        parray = this->__parray_;
      }
      while (v10 < &parray[v7]);
    }
    this->__parray_cap_ = v7;
  }
  if (parray_size <= v4)
    parray_size = v4;
  this->__parray_size_ = parray_size;
  return &parray[v3];
}

void std::ios_base::register_callback(std::ios_base *this, std::ios_base::event_callback __fn, int __index)
{
  size_t event_size;
  size_t event_cap;
  size_t v8;
  uint64_t v9;
  size_t v10;
  std::ios_base::event_callback *v11;
  int *v12;

  event_size = this->__event_size_;
  event_cap = this->__event_cap_;
  v8 = event_size + 1;
  if (event_size + 1 > event_cap)
  {
    v9 = 2 * event_cap;
    if (2 * event_cap <= v8)
      v9 = v8;
    if (v8 >= 0xFFFFFFFFFFFFFFFLL)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    v11 = (std::ios_base::event_callback *)malloc_type_realloc(this->__fn_, 8 * v10, 0x80040B8603338uLL);
    if (!v11)
      std::ios_base::clear(this, this->__rdstate_ | 1);
    this->__fn_ = v11;
    v12 = (int *)malloc_type_realloc(this->__index_, 4 * v10, 0x100004052888210uLL);
    if (!v12)
      std::ios_base::clear(this, this->__rdstate_ | 1);
    this->__index_ = v12;
    this->__event_cap_ = v10;
    event_size = this->__event_size_;
    v8 = event_size + 1;
  }
  this->__fn_[event_size] = __fn;
  this->__index_[event_size] = __index;
  this->__event_size_ = v8;
}

void std::ios_base::~ios_base(std::ios_base *this)
{
  size_t event_size;
  size_t v3;

  event_size = this->__event_size_;
  if (event_size)
  {
    v3 = event_size - 1;
    do
    {
      ((void (*)(_QWORD, std::ios_base *, _QWORD))this->__fn_[v3])(0, this, this->__index_[v3]);
      --v3;
    }
    while (v3 != -1);
  }
  std::locale::~locale((std::locale *)&this->__loc_);
  free(this->__fn_);
  free(this->__index_);
  free(this->__iarray_);
  free(this->__parray_);
}

{
  std::ios_base::~ios_base(this);
  JUMPOUT(0x194021E38);
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
  std::ios_base::iostate v2;

  v2 = (this->__rdbuf_ == 0) | __state;
  this->__rdstate_ = v2;
  if ((this->__exceptions_ & v2) != 0)
    std::__throw_failure[abi:ne180100]("ios_base::clear");
}

void std::__throw_failure[abi:ne180100](const char *a1)
{
  std::system_error *exception;
  std::error_code v3;

  exception = (std::system_error *)__cxa_allocate_exception(0x20uLL);
  std::iostream_category();
  v3.__cat_ = (const std::error_category *)&std::iostream_category(void)::helper;
  *(_QWORD *)&v3.__val_ = 1;
  std::system_error::system_error(exception, v3, a1);
}

void sub_191FCE344(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
  this->__rdbuf_ = __sb;
  this->__rdstate_ = __sb == 0;
  this->__exceptions_ = 0;
  this->__fmtflags_ = 4098;
  *(_OWORD *)&this->__precision_ = xmmword_192025A00;
  *(_OWORD *)&this->__fn_ = 0u;
  *(_OWORD *)&this->__event_size_ = 0u;
  *(_OWORD *)&this->__iarray_ = 0u;
  *(_OWORD *)&this->__iarray_cap_ = 0u;
  *(_OWORD *)&this->__parray_size_ = 0u;
  std::locale::locale((std::locale *)&this->__loc_);
}

void std::ios_base::copyfmt(std::ios_base *this, const std::ios_base *a2)
{
  size_t event_size;
  std::ios_base::event_callback *v5;
  std::ios_base::event_callback *v6;
  int *v7;
  size_t iarray_size;
  uint64_t *v9;
  size_t parray_size;
  void **v11;
  size_t v12;
  size_t v13;
  uint64_t *iarray;
  uint64_t *v15;
  size_t v16;

  event_size = a2->__event_size_;
  if (this->__event_cap_ >= event_size)
  {
    v7 = 0;
    v6 = 0;
  }
  else
  {
    v5 = (std::ios_base::event_callback *)malloc_type_malloc(8 * event_size, 0x6D99082BuLL);
    if (!v5)
      std::__throw_bad_alloc();
    v6 = v5;
    v7 = (int *)malloc_type_malloc(4 * a2->__event_size_, 0xCE646B98uLL);
    if (!v7)
      std::__throw_bad_alloc();
  }
  iarray_size = a2->__iarray_size_;
  if (this->__iarray_cap_ >= iarray_size)
  {
    v9 = 0;
  }
  else
  {
    v9 = (uint64_t *)malloc_type_malloc(8 * iarray_size, 0xB3BC3AF6uLL);
    if (!v9)
      std::__throw_bad_alloc();
  }
  parray_size = a2->__parray_size_;
  if (this->__parray_cap_ >= parray_size)
  {
    v11 = 0;
  }
  else
  {
    v11 = (void **)malloc_type_malloc(8 * parray_size, 0x7BD22BCuLL);
    if (!v11)
      std::__throw_bad_alloc();
  }
  this->__fmtflags_ = a2->__fmtflags_;
  *(_OWORD *)&this->__precision_ = *(_OWORD *)&a2->__precision_;
  std::locale::operator=((std::locale *)&this->__loc_, (const std::locale *)&a2->__loc_);
  if (this->__event_cap_ < a2->__event_size_)
  {
    free(this->__fn_);
    this->__fn_ = v6;
    free(this->__index_);
    v6 = 0;
    this->__index_ = v7;
    this->__event_cap_ = a2->__event_size_;
    v7 = 0;
  }
  this->__event_size_ = 0;
  if (a2->__event_size_)
  {
    v12 = 0;
    do
    {
      this->__fn_[v12] = a2->__fn_[v12];
      this->__index_[v12] = a2->__index_[v12];
      this->__event_size_ = ++v12;
    }
    while (v12 < a2->__event_size_);
  }
  if (this->__iarray_cap_ < a2->__iarray_size_)
  {
    free(this->__iarray_);
    this->__iarray_ = v9;
    this->__iarray_cap_ = a2->__iarray_size_;
    v9 = 0;
  }
  this->__iarray_size_ = 0;
  if (a2->__iarray_size_)
  {
    v13 = 0;
    iarray = a2->__iarray_;
    v15 = this->__iarray_;
    do
    {
      v15[v13] = iarray[v13];
      v13 = this->__iarray_size_ + 1;
      this->__iarray_size_ = v13;
    }
    while (v13 < a2->__iarray_size_);
  }
  if (this->__parray_cap_ < a2->__parray_size_)
  {
    free(this->__parray_);
    this->__parray_ = v11;
    this->__parray_cap_ = a2->__parray_size_;
    v11 = 0;
  }
  this->__parray_size_ = 0;
  if (a2->__parray_size_)
  {
    v16 = 0;
    do
    {
      this->__parray_[v16] = a2->__parray_[v16];
      this->__parray_size_ = ++v16;
    }
    while (v16 < a2->__parray_size_);
  }
  if (v11)
    free(v11);
  if (v9)
    free(v9);
  if (v7)
    free(v7);
  if (v6)
    free(v6);
}

void sub_191FCE624(_Unwind_Exception *exception_object)
{
  void *v1;
  void *v2;
  void *v3;

  if (v3)
  {
    free(v3);
    if (!v2)
    {
LABEL_3:
      if (!v1)
LABEL_8:
        _Unwind_Resume(exception_object);
LABEL_7:
      free(v1);
      goto LABEL_8;
    }
  }
  else if (!v2)
  {
    goto LABEL_3;
  }
  free(v2);
  if (!v1)
    goto LABEL_8;
  goto LABEL_7;
}

void std::ios_base::move(std::ios_base *this, std::ios_base *a2)
{
  this->__fmtflags_ = a2->__fmtflags_;
  *(_OWORD *)&this->__precision_ = *(_OWORD *)&a2->__precision_;
  *(_QWORD *)&this->__rdstate_ = *(_QWORD *)&a2->__rdstate_;
  this->__rdbuf_ = 0;
  std::locale::locale((std::locale *)&this->__loc_, (const std::locale *)&a2->__loc_);
  *(_OWORD *)&this->__fn_ = *(_OWORD *)&a2->__fn_;
  *(_OWORD *)&a2->__fn_ = 0u;
  *(_OWORD *)&this->__event_size_ = *(_OWORD *)&a2->__event_size_;
  *(_OWORD *)&a2->__event_size_ = 0u;
  this->__iarray_ = a2->__iarray_;
  a2->__iarray_ = 0;
  *(_OWORD *)&this->__iarray_size_ = *(_OWORD *)&a2->__iarray_size_;
  *(_OWORD *)&a2->__iarray_size_ = 0u;
  this->__parray_ = a2->__parray_;
  a2->__parray_ = 0;
  *(_OWORD *)&this->__parray_size_ = *(_OWORD *)&a2->__parray_size_;
  *(_OWORD *)&a2->__parray_size_ = 0u;
}

void std::ios_base::swap(std::ios_base *this, std::ios_base *a2)
{
  std::ios_base::fmtflags fmtflags;
  std::streamsize precision;
  std::streamsize width;
  std::locale *p_loc;
  std::locale *v8;
  std::ios_base::event_callback *fn;
  int *index;
  size_t event_size;
  size_t v12;
  size_t event_cap;
  uint64_t *iarray;
  uint64_t *v15;
  size_t iarray_size;
  size_t iarray_cap;
  void **parray;
  void **v19;
  size_t parray_size;
  size_t parray_cap;
  std::locale v22;

  fmtflags = this->__fmtflags_;
  this->__fmtflags_ = a2->__fmtflags_;
  a2->__fmtflags_ = fmtflags;
  precision = this->__precision_;
  this->__precision_ = a2->__precision_;
  a2->__precision_ = precision;
  width = this->__width_;
  this->__width_ = a2->__width_;
  a2->__width_ = width;
  LODWORD(width) = this->__rdstate_;
  this->__rdstate_ = a2->__rdstate_;
  a2->__rdstate_ = width;
  LODWORD(width) = this->__exceptions_;
  this->__exceptions_ = a2->__exceptions_;
  a2->__exceptions_ = width;
  p_loc = (std::locale *)&this->__loc_;
  v8 = (std::locale *)&a2->__loc_;
  std::locale::locale(&v22, (const std::locale *)&this->__loc_);
  std::locale::operator=(p_loc, v8);
  std::locale::operator=(v8, &v22);
  std::locale::~locale(&v22);
  fn = this->__fn_;
  this->__fn_ = a2->__fn_;
  a2->__fn_ = fn;
  index = this->__index_;
  event_size = this->__event_size_;
  v12 = a2->__event_size_;
  this->__index_ = a2->__index_;
  this->__event_size_ = v12;
  a2->__index_ = index;
  a2->__event_size_ = event_size;
  event_cap = this->__event_cap_;
  iarray = this->__iarray_;
  v15 = a2->__iarray_;
  this->__event_cap_ = a2->__event_cap_;
  this->__iarray_ = v15;
  a2->__event_cap_ = event_cap;
  a2->__iarray_ = iarray;
  iarray_size = this->__iarray_size_;
  this->__iarray_size_ = a2->__iarray_size_;
  a2->__iarray_size_ = iarray_size;
  iarray_cap = this->__iarray_cap_;
  parray = this->__parray_;
  v19 = a2->__parray_;
  this->__iarray_cap_ = a2->__iarray_cap_;
  this->__parray_ = v19;
  a2->__iarray_cap_ = iarray_cap;
  a2->__parray_ = parray;
  parray_size = this->__parray_size_;
  this->__parray_size_ = a2->__parray_size_;
  a2->__parray_size_ = parray_size;
  parray_cap = this->__parray_cap_;
  this->__parray_cap_ = a2->__parray_cap_;
  a2->__parray_cap_ = parray_cap;
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
  this->__rdstate_ |= 1u;
  if ((this->__exceptions_ & 1) != 0)
    __cxa_rethrow();
}

void std::ios_base::__set_failbit_and_consider_rethrow(std::ios_base *this)
{
  this->__rdstate_ |= 4u;
  if ((this->__exceptions_ & 4) != 0)
    __cxa_rethrow();
}

BOOL std::ios_base::sync_with_stdio(BOOL __sync)
{
  char v1;

  v1 = std::ios_base::sync_with_stdio(BOOL)::previous_state;
  std::ios_base::sync_with_stdio(BOOL)::previous_state = __sync;
  return v1;
}

void std::__iostream_category::~__iostream_category(std::error_category *this)
{
  std::error_category::~error_category(this);
  JUMPOUT(0x194021E38);
}

void std::ios::~ios(std::ios_base *a1)
{
  std::ios_base::~ios_base(a1);
  JUMPOUT(0x194021E38);
}

std::ios_base *std::ios::copyfmt(std::ios_base *this, std::ios_base *a2)
{
  if (this != a2)
  {
    std::ios_base::__call_callbacks(this, erase_event);
    std::ios_base::copyfmt(this, a2);
    this[1].__vftable = a2[1].__vftable;
    this[1].__fmtflags_ = a2[1].__fmtflags_;
    std::ios_base::__call_callbacks(this, copyfmt_event);
    this->__exceptions_ = a2->__exceptions_;
    std::ios_base::clear(this, this->__rdstate_);
  }
  return this;
}

std::locale *std::streambuf::~streambuf(std::locale *a1)
{
  std::locale::~locale(a1 + 1);
  return a1;
}

{
  std::locale::~locale(a1 + 1);
  return a1;
}

void std::streambuf::~streambuf(std::locale *a1)
{
  std::locale::~locale(a1 + 1);
  JUMPOUT(0x194021E38);
}

const std::locale *std::streambuf::pubimbue@<X0>(std::locale *a1@<X0>, const std::locale *a2@<X1>, std::locale *a3@<X8>)
{
  std::locale *v5;

  v5 = a1 + 1;
  (*((void (**)(std::locale *))a1->__locale_ + 2))(a1);
  std::locale::locale(a3, v5);
  return std::locale::operator=(v5, a2);
}

std::locale *std::streambuf::getloc@<X0>(const std::locale *a1@<X0>, std::locale *a2@<X8>)
{
  return std::locale::locale(a2, a1 + 1);
}

uint64_t std::streambuf::pubsetbuf(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
}

uint64_t std::streambuf::pubseekoff(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
}

uint64_t std::streambuf::pubseekpos(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[8];
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v2;
  v8 = *(_QWORD *)(a2 + 128);
  v3 = *(_OWORD *)(a2 + 112);
  v7[6] = *(_OWORD *)(a2 + 96);
  v7[7] = v3;
  v4 = *(_OWORD *)(a2 + 80);
  v7[4] = *(_OWORD *)(a2 + 64);
  v7[5] = v4;
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return (*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)a1 + 40))(a1, v7);
}

uint64_t std::streambuf::pubsync(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t std::streambuf::in_avail(_QWORD *a1)
{
  unint64_t v1;
  unint64_t v2;

  v1 = a1[3];
  v2 = a1[4];
  if (v1 >= v2)
    return (*(uint64_t (**)(_QWORD *))(*a1 + 56))(a1);
  else
    return v2 - v1;
}

uint64_t std::streambuf::snextc(_QWORD *a1)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t result;

  v3 = (unsigned __int8 *)a1[3];
  v2 = (unsigned __int8 *)a1[4];
  if (v3 == v2)
  {
    result = (*(uint64_t (**)(_QWORD *))(*a1 + 80))(a1);
    if ((_DWORD)result == -1)
      return result;
    v4 = (unsigned __int8 *)a1[3];
    v2 = (unsigned __int8 *)a1[4];
  }
  else
  {
    v4 = v3 + 1;
    a1[3] = v4;
  }
  if (v4 == v2)
    return (*(uint64_t (**)(_QWORD *))(*a1 + 72))(a1);
  else
    return *v4;
}

uint64_t std::streambuf::sbumpc(_QWORD *a1)
{
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)a1[3];
  if (v1 == (unsigned __int8 *)a1[4])
    return (*(uint64_t (**)(_QWORD *))(*a1 + 80))(a1);
  a1[3] = v1 + 1;
  return *v1;
}

uint64_t std::streambuf::sgetc(_QWORD *a1)
{
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)a1[3];
  if (v1 == (unsigned __int8 *)a1[4])
    return (*(uint64_t (**)(_QWORD *))(*a1 + 72))(a1);
  else
    return *v1;
}

uint64_t std::streambuf::sgetn(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t std::streambuf::sputbackc(_QWORD *a1, unsigned __int8 a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  int v4;

  v2 = a1[3];
  if (a1[2] == v2)
    return (*(uint64_t (**)(_QWORD *, _QWORD))(*a1 + 88))(a1, a2);
  v4 = *(unsigned __int8 *)(v2 - 1);
  v3 = (unsigned __int8 *)(v2 - 1);
  if (v4 != a2)
    return (*(uint64_t (**)(_QWORD *, _QWORD))(*a1 + 88))(a1, a2);
  a1[3] = v3;
  return *v3;
}

uint64_t std::streambuf::sungetc(_QWORD *a1)
{
  uint64_t v1;

  v1 = a1[3];
  if (a1[2] == v1)
    return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 88))(a1, 0xFFFFFFFFLL);
  a1[3] = v1 - 1;
  return *(unsigned __int8 *)(v1 - 1);
}

uint64_t std::streambuf::sputc(_QWORD *a1, unsigned __int8 a2)
{
  unsigned __int8 *v2;

  v2 = (unsigned __int8 *)a1[6];
  if (v2 == (unsigned __int8 *)a1[7])
    return (*(uint64_t (**)(_QWORD *, _QWORD))(*a1 + 104))(a1, a2);
  a1[6] = v2 + 1;
  *v2 = a2;
  return a2;
}

uint64_t std::streambuf::sputn(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
}

uint64_t std::streambuf::basic_streambuf(uint64_t a1)
{
  std::locale::locale((std::locale *)(a1 + 8));
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return a1;
}

{
  std::locale::locale((std::locale *)(a1 + 8));
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return a1;
}

uint64_t std::streambuf::basic_streambuf(uint64_t a1, uint64_t a2)
{
  std::locale::locale((std::locale *)(a1 + 8), (const std::locale *)(a2 + 8));
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  return a1;
}

{
  std::locale::locale((std::locale *)(a1 + 8), (const std::locale *)(a2 + 8));
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  return a1;
}

uint64_t std::streambuf::operator=(uint64_t a1, uint64_t a2)
{
  std::locale::operator=((std::locale *)(a1 + 8), (const std::locale *)(a2 + 8));
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  return a1;
}

void std::streambuf::swap(const std::locale *a1, std::locale *a2)
{
  std::locale *v4;
  std::locale *v5;
  std::locale::__imp *locale;
  std::locale::__imp *v7;
  std::locale::__imp *v8;
  std::locale::__imp *v9;
  std::locale::__imp *v10;
  std::locale::__imp *v11;
  std::locale v12;

  v4 = (std::locale *)&a1[1];
  v5 = a2 + 1;
  std::locale::locale(&v12, a1 + 1);
  std::locale::operator=(v4, v5);
  std::locale::operator=(v5, &v12);
  std::locale::~locale(&v12);
  locale = a1[2].__locale_;
  a1[2].__locale_ = a2[2].__locale_;
  a2[2].__locale_ = locale;
  v7 = a1[3].__locale_;
  a1[3].__locale_ = a2[3].__locale_;
  a2[3].__locale_ = v7;
  v8 = a1[4].__locale_;
  a1[4].__locale_ = a2[4].__locale_;
  a2[4].__locale_ = v8;
  v9 = a1[5].__locale_;
  a1[5].__locale_ = a2[5].__locale_;
  a2[5].__locale_ = v9;
  v10 = a1[6].__locale_;
  a1[6].__locale_ = a2[6].__locale_;
  a2[6].__locale_ = v10;
  v11 = a1[7].__locale_;
  a1[7].__locale_ = a2[7].__locale_;
  a2[7].__locale_ = v11;
}

uint64_t std::streambuf::gbump(uint64_t result, int a2)
{
  *(_QWORD *)(result + 24) += a2;
  return result;
}

_QWORD *std::streambuf::setg(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  result[2] = a2;
  result[3] = a3;
  result[4] = a4;
  return result;
}

uint64_t std::streambuf::pbump(uint64_t result, int a2)
{
  *(_QWORD *)(result + 48) += a2;
  return result;
}

_QWORD *std::streambuf::setp(_QWORD *result, uint64_t a2, uint64_t a3)
{
  result[5] = a2;
  result[6] = a2;
  result[7] = a3;
  return result;
}

double std::streambuf::seekoff@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 128) = -1;
  return result;
}

double std::streambuf::seekpos@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 128) = -1;
  return result;
}

uint64_t std::streambuf::sync()
{
  return 0;
}

uint64_t std::streambuf::showmanyc()
{
  return 0;
}

uint64_t std::streambuf::xsgetn(_QWORD *a1, char *__dst, uint64_t a3)
{
  uint64_t i;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  size_t v10;
  int v11;

  if (a3 < 1)
    return 0;
  for (i = 0; i < a3; i += v10)
  {
    v7 = (char *)a1[3];
    v8 = a1[4];
    if ((unint64_t)v7 >= v8)
    {
      v11 = (*(uint64_t (**)(_QWORD *))(*a1 + 80))(a1);
      if (v11 == -1)
        return i;
      *__dst++ = v11;
      v10 = 1;
    }
    else
    {
      v9 = v8 - (_QWORD)v7;
      if (a3 - i < v9)
        v9 = a3 - i;
      if (v9 >= 0x7FFFFFFF)
        v10 = 0x7FFFFFFFLL;
      else
        v10 = v9;
      if (v10)
      {
        memmove(__dst, v7, v10);
        v7 = (char *)a1[3];
      }
      __dst += v10;
      a1[3] = &v7[(int)v10];
    }
  }
  return i;
}

uint64_t std::streambuf::underflow()
{
  return 0xFFFFFFFFLL;
}

uint64_t std::streambuf::uflow(_QWORD *a1)
{
  uint64_t result;
  unsigned __int8 *v3;

  result = (*(uint64_t (**)(_QWORD *))(*a1 + 72))(a1);
  if ((_DWORD)result != -1)
  {
    v3 = (unsigned __int8 *)a1[3];
    a1[3] = v3 + 1;
    return *v3;
  }
  return result;
}

uint64_t std::streambuf::pbackfail()
{
  return 0xFFFFFFFFLL;
}

uint64_t std::streambuf::xsputn(_QWORD *a1, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  unint64_t v8;
  int64_t v9;
  size_t v10;

  if (a3 < 1)
    return 0;
  v6 = 0;
  do
  {
    v7 = (char *)a1[6];
    v8 = a1[7];
    if ((unint64_t)v7 >= v8)
    {
      if ((*(unsigned int (**)(_QWORD *, _QWORD))(*a1 + 104))(a1, *__src) == -1)
        return v6;
      ++__src;
      ++v6;
    }
    else
    {
      v9 = v8 - (_QWORD)v7;
      if (a3 - v6 >= v9)
        v10 = v9;
      else
        v10 = a3 - v6;
      if (v10)
      {
        memmove(v7, __src, v10);
        v7 = (char *)a1[6];
      }
      a1[6] = &v7[v10];
      __src += v10;
      v6 += v10;
    }
  }
  while (v6 < a3);
  return v6;
}

uint64_t std::streambuf::overflow()
{
  return 0xFFFFFFFFLL;
}

uint64_t *std::istream::basic_istream(uint64_t *a1, uint64_t *a2, void *__sb)
{
  uint64_t v4;
  std::ios_base *v5;

  v4 = *a2;
  *a1 = *a2;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(v4 - 24)) = a2[1];
  a1[1] = 0;
  v5 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v5, __sb);
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  return a1;
}

uint64_t std::istream::basic_istream(uint64_t a1, void *a2)
{
  *(_QWORD *)(a1 + 8) = 0;
  std::ios_base::init((std::ios_base *)(a1 + 16), a2);
  *(_QWORD *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 160) = -1;
  return a1;
}

void sub_191FCF1C8(_Unwind_Exception *a1)
{
  std::ios_base *v1;

  std::ios_base::~ios_base(v1);
  _Unwind_Resume(a1);
}

uint64_t std::istream::~istream(uint64_t a1)
{
  std::ios_base::~ios_base((std::ios_base *)(a1 + 16));
  return a1;
}

void `virtual thunk to'std::istream::~istream(_QWORD *a1)
{
  std::ios_base::~ios_base((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 16));
}

{
  std::ios_base::~ios_base((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 16));
  JUMPOUT(0x194021E38);
}

void std::istream::~istream(uint64_t a1)
{
  std::ios_base::~ios_base((std::ios_base *)(a1 + 16));
  JUMPOUT(0x194021E38);
}

void std::istream::swap(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::ios_base *v5;
  std::ios_base *v6;
  std::ios_base_vtbl *v7;

  v3 = *a1;
  v2 = a1[1];
  v4 = *a2;
  a1[1] = a2[1];
  a2[1] = v2;
  v5 = (std::ios_base *)((char *)a1 + *(_QWORD *)(v3 - 24));
  v6 = (std::ios_base *)((char *)a2 + *(_QWORD *)(v4 - 24));
  std::ios_base::swap(v5, v6);
  v7 = v5[1].__vftable;
  v5[1].__vftable = v6[1].__vftable;
  v6[1].__vftable = v7;
  LODWORD(v7) = v5[1].__fmtflags_;
  v5[1].__fmtflags_ = v6[1].__fmtflags_;
  v6[1].__fmtflags_ = v7;
}

BOOL *std::istream::sentry::sentry(BOOL *a1, uint64_t *a2, char a3)
{
  uint64_t v4;
  std::ios_base *v5;
  std::ios_base::iostate rdstate;
  std::ios_base_vtbl *v9;
  const std::ios_base *v10;
  const std::locale::facet *v11;
  std::locale::__imp *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  _QWORD *v18;
  std::locale v19;

  *a1 = 0;
  v4 = *a2;
  v5 = (std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24));
  rdstate = v5->__rdstate_;
  if (rdstate)
  {
    std::ios_base::clear(v5, rdstate | 4);
  }
  else
  {
    v9 = v5[1].__vftable;
    if (v9)
    {
      std::ostream::flush(v9, (uint64_t)a2);
      v4 = *a2;
    }
    if ((a3 & 1) == 0)
    {
      v10 = (const std::ios_base *)((char *)a2 + *(_QWORD *)(v4 - 24));
      if ((v10->__fmtflags_ & 0x1000) != 0)
      {
        std::ios_base::getloc(v10);
        v11 = std::locale::use_facet(&v19, &std::ctype<char>::id);
        std::locale::~locale(&v19);
        v12 = *(std::locale::__imp **)((char *)a2 + *(_QWORD *)(*a2 - 24) + 40);
        v18 = 0;
        v19.__locale_ = v12;
        if ((std::istreambuf_iterator<char>::equal[abi:ne180100](&v19, &v18) & 1) == 0)
        {
          do
          {
            v13 = (unsigned __int8 *)*((_QWORD *)v19.__locale_ + 3);
            if (v13 == *((unsigned __int8 **)v19.__locale_ + 4))
            {
              v15 = (*(uint64_t (**)(std::locale::__imp *))(*(_QWORD *)v19.__locale_ + 72))(v19.__locale_);
              v14 = v15;
              if ((v15 & 0x80) != 0)
                break;
            }
            else
            {
              v14 = *v13;
              if ((v14 & 0x80) != 0)
                break;
            }
            if ((*((_DWORD *)&v11[1].~facet + v14) & 0x4000) == 0)
              break;
            v16 = *((_QWORD *)v19.__locale_ + 3);
            if (v16 == *((_QWORD *)v19.__locale_ + 4))
              (*(void (**)(std::locale::__imp *))(*(_QWORD *)v19.__locale_ + 80))(v19.__locale_);
            else
              *((_QWORD *)v19.__locale_ + 3) = v16 + 1;
          }
          while (!std::istreambuf_iterator<char>::equal[abi:ne180100](&v19, &v18));
        }
        if (std::istreambuf_iterator<char>::equal[abi:ne180100](&v19, &v18))
          std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) | 6);
        v4 = *a2;
      }
    }
    *a1 = *(_DWORD *)((char *)a2 + *(_QWORD *)(v4 - 24) + 32) == 0;
  }
  return a1;
}

void sub_191FCF478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

_QWORD *std::ostream::flush(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char v8[8];
  _QWORD *v9;

  v3 = *a1;
  v4 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if (*((_QWORD *)v4 + 5))
  {
    v8[0] = 0;
    v9 = a1;
    if (!*((_DWORD *)v4 + 8))
    {
      v5 = *((_QWORD *)v4 + 17);
      if (v5)
      {
        std::ostream::flush(v5, a2);
        v3 = *a1;
      }
      v8[0] = 1;
      v6 = *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24) + 40);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6) == -1)
        std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 1);
    }
    std::ostream::sentry::~sentry((uint64_t)v8);
  }
  return a1;
}

void sub_191FCF530(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v1 + *(_QWORD *)(*v1 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x191FCF51CLL);
}

void sub_191FCF564(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

char *std::istream::operator>>(char *a1, void (*a2)(char *))
{
  a2(&a1[*(_QWORD *)(*(_QWORD *)a1 - 24)]);
  return a1;
}

{
  a2(&a1[*(_QWORD *)(*(_QWORD *)a1 - 24)]);
  return a1;
}

uint64_t *std::istream::operator>>(uint64_t *a1, _QWORD *a2)
{
  uint64_t *v4;
  _QWORD *v5;
  _BYTE *v6;
  int v7;
  _BYTE *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  int v13;
  BOOL v15;

  a1[1] = 0;
  std::istream::sentry::sentry(&v15, a1, 1);
  if (!v15)
    return a1;
  if (!a2)
  {
    v12 = 4;
    goto LABEL_21;
  }
  v4 = a1 + 5;
  while (1)
  {
    v5 = *(_QWORD **)((char *)v4 + *(_QWORD *)(*a1 - 24));
    v6 = (_BYTE *)v5[3];
    if (v6 == (_BYTE *)v5[4])
    {
      v7 = (*(uint64_t (**)(_QWORD *))(*v5 + 72))(v5);
      if (v7 == -1)
      {
        v13 = 2;
        goto LABEL_18;
      }
    }
    else
    {
      LOBYTE(v7) = *v6;
    }
    v8 = (_BYTE *)a2[6];
    if (v8 != (_BYTE *)a2[7])
    {
      a2[6] = v8 + 1;
      *v8 = v7;
      goto LABEL_10;
    }
    if ((*(unsigned int (**)(_QWORD *, _QWORD))(*a2 + 104))(a2, v7) == -1)
      break;
LABEL_10:
    v9 = a1[1];
    if (v9 != 0x7FFFFFFFFFFFFFFFLL)
      a1[1] = v9 + 1;
    v10 = *(_QWORD **)((char *)v4 + *(_QWORD *)(*a1 - 24));
    v11 = v10[3];
    if (v11 == v10[4])
      (*(void (**)(_QWORD *))(*v10 + 80))(v10);
    else
      v10[3] = v11 + 1;
  }
  v13 = 0;
LABEL_18:
  if (a1[1])
    v12 = v13;
  else
    v12 = v13 | 4;
LABEL_21:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v12);
  return a1;
}

void sub_191FCF72C(void *a1)
{
  _QWORD *v1;
  uint64_t v2;
  int v3;

  __cxa_begin_catch(a1);
  v2 = *v1;
  if (v1[1])
    v3 = 1;
  else
    v3 = 5;
  *(_DWORD *)((char *)v1 + *(_QWORD *)(v2 - 24) + 32) |= v3;
  if ((*((_BYTE *)v1 + *(_QWORD *)(v2 - 24) + 36) & 5) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x191FCF6FCLL);
  }
  __cxa_rethrow();
}

void sub_191FCF778(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *std::__input_arithmetic[abi:ne180100]<BOOL,char,std::char_traits<char>>(uint64_t *a1, uint64_t a2)
{
  const std::locale::facet *v4;
  std::locale v6;
  BOOL v7;
  int v8;

  v8 = 0;
  std::istream::sentry::sentry(&v7, a1, 0);
  if (v7)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
    v4 = std::locale::use_facet(&v6, &std::num_get<char,std::istreambuf_iterator<char>>::id);
    ((void (*)(const std::locale::facet *, _QWORD, _QWORD, char *, int *, uint64_t))v4->__vftable[1].~facet)(v4, *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40), 0, (char *)a1 + *(_QWORD *)(*a1 - 24), &v8, a2);
    std::locale::~locale(&v6);
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v8);
  }
  return a1;
}

void sub_191FCF848(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11)
{
  _QWORD *v11;
  uint64_t v12;

  __cxa_begin_catch(a1);
  v12 = *v11;
  *(_DWORD *)((char *)v11 + *(_QWORD *)(*v11 - 24) + 32) |= a11 | 1;
  if ((*((_BYTE *)v11 + *(_QWORD *)(v12 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x191FCF818);
  }
  __cxa_rethrow();
}

void sub_191FCF8A8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *std::__input_arithmetic_with_numeric_limits[abi:ne180100]<short,char,std::char_traits<char>>(uint64_t *a1, __int16 *a2)
{
  const std::locale::facet *v4;
  __int16 v5;
  std::locale v7;
  uint64_t v8;
  BOOL v9;
  int v10;

  v10 = 0;
  std::istream::sentry::sentry(&v9, a1, 0);
  if (v9)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
    v4 = std::locale::use_facet(&v7, &std::num_get<char,std::istreambuf_iterator<char>>::id);
    ((void (*)(const std::locale::facet *, _QWORD, _QWORD, char *, int *, uint64_t *))v4->__vftable[1].~facet_0)(v4, *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40), 0, (char *)a1 + *(_QWORD *)(*a1 - 24), &v10, &v8);
    std::locale::~locale(&v7);
    v5 = v8;
    if (v8 > -32769)
    {
      if (v8 >= 0x8000)
      {
        v10 |= 4u;
        v5 = 0x7FFF;
      }
    }
    else
    {
      v10 |= 4u;
      v5 = 0x8000;
    }
    *a2 = v5;
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v10);
  }
  return a1;
}

void sub_191FCF9B8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  __cxa_begin_catch(a1);
  v12 = *(_DWORD *)(v11 - 20) | 1;
  *(_DWORD *)(v11 - 20) = v12;
  v13 = *v10;
  *(_DWORD *)((char *)v10 + *(_QWORD *)(*v10 - 24) + 32) |= v12;
  if ((*((_BYTE *)v10 + *(_QWORD *)(v13 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x191FCF988);
  }
  __cxa_rethrow();
}

void sub_191FCFA18(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *std::__input_arithmetic[abi:ne180100]<unsigned short,char,std::char_traits<char>>(uint64_t *a1, uint64_t a2)
{
  const std::locale::facet *v4;
  std::locale v6;
  BOOL v7;
  int v8;

  v8 = 0;
  std::istream::sentry::sentry(&v7, a1, 0);
  if (v7)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
    v4 = std::locale::use_facet(&v6, &std::num_get<char,std::istreambuf_iterator<char>>::id);
    ((void (*)(const std::locale::facet *, _QWORD, _QWORD, char *, int *, uint64_t))v4->__vftable[2].~facet)(v4, *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40), 0, (char *)a1 + *(_QWORD *)(*a1 - 24), &v8, a2);
    std::locale::~locale(&v6);
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v8);
  }
  return a1;
}

void sub_191FCFAE8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11)
{
  _QWORD *v11;
  uint64_t v12;

  __cxa_begin_catch(a1);
  v12 = *v11;
  *(_DWORD *)((char *)v11 + *(_QWORD *)(*v11 - 24) + 32) |= a11 | 1;
  if ((*((_BYTE *)v11 + *(_QWORD *)(v12 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x191FCFAB8);
  }
  __cxa_rethrow();
}

void sub_191FCFB48(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *std::__input_arithmetic_with_numeric_limits[abi:ne180100]<int,char,std::char_traits<char>>(uint64_t *a1, unsigned int *a2)
{
  const std::locale::facet *v4;
  unsigned int v5;
  std::locale v7;
  uint64_t v8;
  BOOL v9;
  int v10;

  v10 = 0;
  std::istream::sentry::sentry(&v9, a1, 0);
  if (v9)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
    v4 = std::locale::use_facet(&v7, &std::num_get<char,std::istreambuf_iterator<char>>::id);
    ((void (*)(const std::locale::facet *, _QWORD, _QWORD, char *, int *, uint64_t *))v4->__vftable[1].~facet_0)(v4, *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40), 0, (char *)a1 + *(_QWORD *)(*a1 - 24), &v10, &v8);
    std::locale::~locale(&v7);
    v5 = v8;
    if (v8 > (uint64_t)0xFFFFFFFF7FFFFFFFLL)
    {
      if (v8 >= 0x80000000)
      {
        v10 |= 4u;
        v5 = 0x7FFFFFFF;
      }
    }
    else
    {
      v10 |= 4u;
      v5 = 0x80000000;
    }
    *a2 = v5;
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v10);
  }
  return a1;
}

void sub_191FCFC5C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  __cxa_begin_catch(a1);
  v12 = *(_DWORD *)(v11 - 20) | 1;
  *(_DWORD *)(v11 - 20) = v12;
  v13 = *v10;
  *(_DWORD *)((char *)v10 + *(_QWORD *)(*v10 - 24) + 32) |= v12;
  if ((*((_BYTE *)v10 + *(_QWORD *)(v13 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x191FCFC2CLL);
  }
  __cxa_rethrow();
}

void sub_191FCFCBC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *std::__input_arithmetic[abi:ne180100]<unsigned int,char,std::char_traits<char>>(uint64_t *a1, uint64_t a2)
{
  const std::locale::facet *v4;
  std::locale v6;
  BOOL v7;
  int v8;

  v8 = 0;
  std::istream::sentry::sentry(&v7, a1, 0);
  if (v7)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
    v4 = std::locale::use_facet(&v6, &std::num_get<char,std::istreambuf_iterator<char>>::id);
    ((void (*)(const std::locale::facet *, _QWORD, _QWORD, char *, int *, uint64_t))v4->__vftable[2].~facet_0)(v4, *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40), 0, (char *)a1 + *(_QWORD *)(*a1 - 24), &v8, a2);
    std::locale::~locale(&v6);
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v8);
  }
  return a1;
}

void sub_191FCFD8C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11)
{
  _QWORD *v11;
  uint64_t v12;

  __cxa_begin_catch(a1);
  v12 = *v11;
  *(_DWORD *)((char *)v11 + *(_QWORD *)(*v11 - 24) + 32) |= a11 | 1;
  if ((*((_BYTE *)v11 + *(_QWORD *)(v12 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x191FCFD5CLL);
  }
  __cxa_rethrow();
}

void sub_191FCFDEC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *std::__input_arithmetic[abi:ne180100]<long,char,std::char_traits<char>>(uint64_t *a1, uint64_t a2)
{
  const std::locale::facet *v4;
  std::locale v6;
  BOOL v7;
  int v8;

  v8 = 0;
  std::istream::sentry::sentry(&v7, a1, 0);
  if (v7)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
    v4 = std::locale::use_facet(&v6, &std::num_get<char,std::istreambuf_iterator<char>>::id);
    ((void (*)(const std::locale::facet *, _QWORD, _QWORD, char *, int *, uint64_t))v4->__vftable[1].~facet_0)(v4, *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40), 0, (char *)a1 + *(_QWORD *)(*a1 - 24), &v8, a2);
    std::locale::~locale(&v6);
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v8);
  }
  return a1;
}

void sub_191FCFEBC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11)
{
  _QWORD *v11;
  uint64_t v12;

  __cxa_begin_catch(a1);
  v12 = *v11;
  *(_DWORD *)((char *)v11 + *(_QWORD *)(*v11 - 24) + 32) |= a11 | 1;
  if ((*((_BYTE *)v11 + *(_QWORD *)(v12 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x191FCFE8CLL);
  }
  __cxa_rethrow();
}

void sub_191FCFF1C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *std::__input_arithmetic[abi:ne180100]<unsigned long,char,std::char_traits<char>>(uint64_t *a1, uint64_t a2)
{
  const std::locale::facet *v4;
  std::locale v6;
  BOOL v7;
  int v8;

  v8 = 0;
  std::istream::sentry::sentry(&v7, a1, 0);
  if (v7)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
    v4 = std::locale::use_facet(&v6, &std::num_get<char,std::istreambuf_iterator<char>>::id);
    ((void (*)(const std::locale::facet *, _QWORD, _QWORD, char *, int *, uint64_t))v4->__vftable[2].__on_zero_shared)(v4, *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40), 0, (char *)a1 + *(_QWORD *)(*a1 - 24), &v8, a2);
    std::locale::~locale(&v6);
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v8);
  }
  return a1;
}

void sub_191FCFFEC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11)
{
  _QWORD *v11;
  uint64_t v12;

  __cxa_begin_catch(a1);
  v12 = *v11;
  *(_DWORD *)((char *)v11 + *(_QWORD *)(*v11 - 24) + 32) |= a11 | 1;
  if ((*((_BYTE *)v11 + *(_QWORD *)(v12 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x191FCFFBCLL);
  }
  __cxa_rethrow();
}

void sub_191FD004C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *std::__input_arithmetic[abi:ne180100]<long long,char,std::char_traits<char>>(uint64_t *a1, uint64_t a2)
{
  const std::locale::facet *v4;
  std::locale v6;
  BOOL v7;
  int v8;

  v8 = 0;
  std::istream::sentry::sentry(&v7, a1, 0);
  if (v7)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
    v4 = std::locale::use_facet(&v6, &std::num_get<char,std::istreambuf_iterator<char>>::id);
    ((void (*)(const std::locale::facet *, _QWORD, _QWORD, char *, int *, uint64_t))v4->__vftable[1].__on_zero_shared)(v4, *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40), 0, (char *)a1 + *(_QWORD *)(*a1 - 24), &v8, a2);
    std::locale::~locale(&v6);
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v8);
  }
  return a1;
}

void sub_191FD011C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11)
{
  _QWORD *v11;
  uint64_t v12;

  __cxa_begin_catch(a1);
  v12 = *v11;
  *(_DWORD *)((char *)v11 + *(_QWORD *)(*v11 - 24) + 32) |= a11 | 1;
  if ((*((_BYTE *)v11 + *(_QWORD *)(v12 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x191FD00ECLL);
  }
  __cxa_rethrow();
}

void sub_191FD017C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *std::__input_arithmetic[abi:ne180100]<unsigned long long,char,std::char_traits<char>>(uint64_t *a1, uint64_t a2)
{
  const std::locale::facet *v4;
  std::locale v6;
  BOOL v7;
  int v8;

  v8 = 0;
  std::istream::sentry::sentry(&v7, a1, 0);
  if (v7)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
    v4 = std::locale::use_facet(&v6, &std::num_get<char,std::istreambuf_iterator<char>>::id);
    ((void (*)(const std::locale::facet *, _QWORD, _QWORD, char *, int *, uint64_t))v4->__vftable[3].~facet)(v4, *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40), 0, (char *)a1 + *(_QWORD *)(*a1 - 24), &v8, a2);
    std::locale::~locale(&v6);
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v8);
  }
  return a1;
}

void sub_191FD024C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11)
{
  _QWORD *v11;
  uint64_t v12;

  __cxa_begin_catch(a1);
  v12 = *v11;
  *(_DWORD *)((char *)v11 + *(_QWORD *)(*v11 - 24) + 32) |= a11 | 1;
  if ((*((_BYTE *)v11 + *(_QWORD *)(v12 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x191FD021CLL);
  }
  __cxa_rethrow();
}

void sub_191FD02AC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *std::__input_arithmetic[abi:ne180100]<float,char,std::char_traits<char>>(uint64_t *a1, uint64_t a2)
{
  const std::locale::facet *v4;
  std::locale v6;
  BOOL v7;
  int v8;

  v8 = 0;
  std::istream::sentry::sentry(&v7, a1, 0);
  if (v7)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
    v4 = std::locale::use_facet(&v6, &std::num_get<char,std::istreambuf_iterator<char>>::id);
    ((void (*)(const std::locale::facet *, _QWORD, _QWORD, char *, int *, uint64_t))v4->__vftable[3].~facet_0)(v4, *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40), 0, (char *)a1 + *(_QWORD *)(*a1 - 24), &v8, a2);
    std::locale::~locale(&v6);
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v8);
  }
  return a1;
}

void sub_191FD037C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11)
{
  _QWORD *v11;
  uint64_t v12;

  __cxa_begin_catch(a1);
  v12 = *v11;
  *(_DWORD *)((char *)v11 + *(_QWORD *)(*v11 - 24) + 32) |= a11 | 1;
  if ((*((_BYTE *)v11 + *(_QWORD *)(v12 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x191FD034CLL);
  }
  __cxa_rethrow();
}

void sub_191FD03DC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *std::__input_arithmetic[abi:ne180100]<double,char,std::char_traits<char>>(uint64_t *a1, uint64_t a2)
{
  const std::locale::facet *v4;
  std::locale v6;
  BOOL v7;
  int v8;

  v8 = 0;
  std::istream::sentry::sentry(&v7, a1, 0);
  if (v7)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
    v4 = std::locale::use_facet(&v6, &std::num_get<char,std::istreambuf_iterator<char>>::id);
    ((void (*)(const std::locale::facet *, _QWORD, _QWORD, char *, int *, uint64_t))v4->__vftable[3].__on_zero_shared)(v4, *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40), 0, (char *)a1 + *(_QWORD *)(*a1 - 24), &v8, a2);
    std::locale::~locale(&v6);
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v8);
  }
  return a1;
}

void sub_191FD04AC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11)
{
  _QWORD *v11;
  uint64_t v12;

  __cxa_begin_catch(a1);
  v12 = *v11;
  *(_DWORD *)((char *)v11 + *(_QWORD *)(*v11 - 24) + 32) |= a11 | 1;
  if ((*((_BYTE *)v11 + *(_QWORD *)(v12 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x191FD047CLL);
  }
  __cxa_rethrow();
}

void sub_191FD050C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *std::__input_arithmetic[abi:ne180100]<long double,char,std::char_traits<char>>(uint64_t *a1, uint64_t a2)
{
  const std::locale::facet *v4;
  std::locale v6;
  BOOL v7;
  int v8;

  v8 = 0;
  std::istream::sentry::sentry(&v7, a1, 0);
  if (v7)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
    v4 = std::locale::use_facet(&v6, &std::num_get<char,std::istreambuf_iterator<char>>::id);
    ((void (*)(const std::locale::facet *, _QWORD, _QWORD, char *, int *, uint64_t))v4->__vftable[4].~facet)(v4, *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40), 0, (char *)a1 + *(_QWORD *)(*a1 - 24), &v8, a2);
    std::locale::~locale(&v6);
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v8);
  }
  return a1;
}

void sub_191FD05DC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11)
{
  _QWORD *v11;
  uint64_t v12;

  __cxa_begin_catch(a1);
  v12 = *v11;
  *(_DWORD *)((char *)v11 + *(_QWORD *)(*v11 - 24) + 32) |= a11 | 1;
  if ((*((_BYTE *)v11 + *(_QWORD *)(v12 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x191FD05ACLL);
  }
  __cxa_rethrow();
}

void sub_191FD063C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *std::__input_arithmetic[abi:ne180100]<void *,char,std::char_traits<char>>(uint64_t *a1, uint64_t a2)
{
  const std::locale::facet *v4;
  std::locale v6;
  BOOL v7;
  int v8;

  v8 = 0;
  std::istream::sentry::sentry(&v7, a1, 0);
  if (v7)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
    v4 = std::locale::use_facet(&v6, &std::num_get<char,std::istreambuf_iterator<char>>::id);
    ((void (*)(const std::locale::facet *, _QWORD, _QWORD, char *, int *, uint64_t))v4->__vftable[4].~facet_0)(v4, *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40), 0, (char *)a1 + *(_QWORD *)(*a1 - 24), &v8, a2);
    std::locale::~locale(&v6);
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v8);
  }
  return a1;
}

void sub_191FD070C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11)
{
  _QWORD *v11;
  uint64_t v12;

  __cxa_begin_catch(a1);
  v12 = *v11;
  *(_DWORD *)((char *)v11 + *(_QWORD *)(*v11 - 24) + 32) |= a11 | 1;
  if ((*((_BYTE *)v11 + *(_QWORD *)(v12 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x191FD06DCLL);
  }
  __cxa_rethrow();
}

void sub_191FD076C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::istream::get(uint64_t *a1)
{
  _QWORD *v2;
  unsigned __int8 *v3;
  uint64_t v4;
  int v5;
  BOOL v7;

  a1[1] = 0;
  std::istream::sentry::sentry(&v7, a1, 1);
  if (v7)
  {
    v2 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v3 = (unsigned __int8 *)v2[3];
    if (v3 == (unsigned __int8 *)v2[4])
    {
      v4 = (*(uint64_t (**)(_QWORD *))(*v2 + 80))(v2);
      if ((_DWORD)v4 == -1)
      {
        v5 = 6;
        goto LABEL_7;
      }
    }
    else
    {
      v2[3] = v3 + 1;
      v4 = *v3;
    }
    v5 = 0;
    a1[1] = 1;
LABEL_7:
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v5);
    return v4;
  }
  return 0xFFFFFFFFLL;
}

void sub_191FD083C(void *a1)
{
  _QWORD *v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  v2 = *v1;
  *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v1 + *(_QWORD *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x191FD0808);
  }
  __cxa_rethrow();
}

void sub_191FD0880(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *std::istream::get(uint64_t *a1, _BYTE *a2)
{
  int v4;

  v4 = std::istream::get(a1);
  if (v4 != -1)
    *a2 = v4;
  return a1;
}

uint64_t *std::istream::get(uint64_t *a1, _BYTE *a2, uint64_t a3)
{
  const std::locale::facet *v6;
  unsigned __int8 v7;
  std::locale v9;

  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
  v6 = std::locale::use_facet(&v9, &std::ctype<char>::id);
  v7 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
  std::locale::~locale(&v9);
  return std::istream::get(a1, a2, a3, v7);
}

void sub_191FD0950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t *std::istream::get(uint64_t *a1, _BYTE *a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  _BYTE *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  BOOL v20;

  a1[1] = 0;
  std::istream::sentry::sentry(&v20, a1, 1);
  if (!v20)
    goto LABEL_23;
  v8 = a3 - 1;
  if (a3 < 1)
  {
    v18 = 4;
    goto LABEL_22;
  }
  v9 = a1[1];
  if (v9 >= v8)
  {
    v18 = 0;
    goto LABEL_19;
  }
  v10 = a1 + 5;
  while (1)
  {
    v11 = *(_QWORD **)((char *)v10 + *(_QWORD *)(*a1 - 24));
    v12 = (_BYTE *)v11[3];
    if (v12 != (_BYTE *)v11[4])
    {
      LOBYTE(v13) = *v12;
      goto LABEL_8;
    }
    v13 = (*(uint64_t (**)(_QWORD *))(*v11 + 72))(v11);
    if (v13 == -1)
      break;
LABEL_8:
    if (v13 != a4)
    {
      *a2++ = v13;
      v14 = a1[1];
      v15 = 0x7FFFFFFFFFFFFFFFLL;
      if (v14 != 0x7FFFFFFFFFFFFFFFLL)
      {
        v15 = v14 + 1;
        a1[1] = v14 + 1;
      }
      v16 = *(_QWORD **)((char *)v10 + *(_QWORD *)(*a1 - 24));
      v17 = v16[3];
      if (v17 == v16[4])
      {
        (*(void (**)(_QWORD *))(*v16 + 80))(v16);
        v15 = a1[1];
      }
      else
      {
        v16[3] = v17 + 1;
      }
      if (v15 < v8)
        continue;
    }
    v18 = 0;
    goto LABEL_16;
  }
  v18 = 2;
LABEL_16:
  v9 = a1[1];
LABEL_19:
  if (!v9)
    v18 |= 4u;
  *a2 = 0;
LABEL_22:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v18);
LABEL_23:
  if (a3 >= 1)
    *a2 = 0;
  return a1;
}

void sub_191FD0ACC(void *a1)
{
  _BYTE *v1;
  _QWORD *v2;
  uint64_t v3;

  __cxa_begin_catch(a1);
  v3 = *v2;
  *(_DWORD *)((char *)v2 + *(_QWORD *)(*v2 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v2 + *(_QWORD *)(v3 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x191FD0A80);
  }
  *v1 = 0;
  __cxa_rethrow();
}

void sub_191FD0B14(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *std::istream::get(uint64_t *a1, _QWORD *a2)
{
  const std::locale::facet *v4;
  unsigned __int8 v5;
  std::locale v7;

  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
  v4 = std::locale::use_facet(&v7, &std::ctype<char>::id);
  v5 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
  std::locale::~locale(&v7);
  return std::istream::get(a1, a2, v5);
}

void sub_191FD0BA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t *std::istream::get(uint64_t *a1, _QWORD *a2, unsigned __int8 a3)
{
  uint64_t *v6;
  _QWORD *v7;
  _BYTE *v8;
  int v9;
  _BYTE *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  BOOL v16;

  a1[1] = 0;
  std::istream::sentry::sentry(&v16, a1, 1);
  if (!v16)
    return a1;
  v6 = a1 + 5;
  while (1)
  {
    v7 = *(_QWORD **)((char *)v6 + *(_QWORD *)(*a1 - 24));
    v8 = (_BYTE *)v7[3];
    if (v8 != (_BYTE *)v7[4])
    {
      LOBYTE(v9) = *v8;
      goto LABEL_6;
    }
    v9 = (*(uint64_t (**)(_QWORD *))(*v7 + 72))(v7);
    if (v9 == -1)
      break;
LABEL_6:
    if (v9 == a3)
      goto LABEL_15;
    v10 = (_BYTE *)a2[6];
    if (v10 == (_BYTE *)a2[7])
    {
      if ((*(unsigned int (**)(_QWORD *, _QWORD))(*a2 + 104))(a2, v9) == -1)
      {
LABEL_15:
        v14 = 0;
        goto LABEL_17;
      }
    }
    else
    {
      a2[6] = v10 + 1;
      *v10 = v9;
    }
    v11 = a1[1];
    if (v11 != 0x7FFFFFFFFFFFFFFFLL)
      a1[1] = v11 + 1;
    v12 = *(_QWORD **)((char *)v6 + *(_QWORD *)(*a1 - 24));
    v13 = v12[3];
    if (v13 == v12[4])
      (*(void (**)(_QWORD *))(*v12 + 80))(v12);
    else
      v12[3] = v13 + 1;
  }
  v14 = 2;
LABEL_17:
  if (!a1[1])
    v14 |= 4u;
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v14);
  return a1;
}

void sub_191FD0D14(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x191FD0CD4);
}

uint64_t *std::istream::getline(uint64_t *a1, _BYTE *a2, uint64_t a3)
{
  const std::locale::facet *v6;
  unsigned __int8 v7;
  std::locale v9;

  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
  v6 = std::locale::use_facet(&v9, &std::ctype<char>::id);
  v7 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
  std::locale::~locale(&v9);
  return std::istream::getline(a1, a2, a3, v7);
}

void sub_191FD0DB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t *std::istream::getline(uint64_t *a1, _BYTE *a2, uint64_t a3, unsigned __int8 a4)
{
  int v8;
  uint64_t *v9;
  _QWORD *v10;
  _BYTE *v11;
  int v12;
  _BYTE *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v21;

  a1[1] = 0;
  std::istream::sentry::sentry(&v21, a1, 1);
  v8 = v21;
  if (v21)
  {
    v9 = a1 + 5;
    while (1)
    {
      v10 = *(_QWORD **)((char *)v9 + *(_QWORD *)(*a1 - 24));
      v11 = (_BYTE *)v10[3];
      if (v11 == (_BYTE *)v10[4])
      {
        v12 = (*(uint64_t (**)(_QWORD *))(*v10 + 72))(v10);
        if (v12 == -1)
        {
          v8 = 2;
          goto LABEL_20;
        }
      }
      else
      {
        LOBYTE(v12) = *v11;
      }
      if (v12 == a4)
        break;
      if (a1[1] >= a3 - 1)
      {
        v8 = 4;
        goto LABEL_20;
      }
      *a2 = v12;
      v13 = a2 + 1;
      v14 = *(_QWORD **)((char *)v9 + *(_QWORD *)(*a1 - 24));
      v15 = v14[3];
      if (v15 == v14[4])
        (*(void (**)(_QWORD *))(*v14 + 80))(v14);
      else
        v14[3] = v15 + 1;
      v16 = a1[1];
      ++a2;
      if (v16 != 0x7FFFFFFFFFFFFFFFLL)
      {
        a1[1] = v16 + 1;
        a2 = v13;
      }
    }
    v17 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v18 = v17[3];
    if (v18 == v17[4])
      (*(void (**)(_QWORD *))(*v17 + 80))(v17);
    else
      v17[3] = v18 + 1;
    v19 = a1[1];
    v8 = 0;
    if (v19 != 0x7FFFFFFFFFFFFFFFLL)
      a1[1] = v19 + 1;
  }
LABEL_20:
  if (a3 >= 1)
    *a2 = 0;
  if (!a1[1])
    v8 |= 4u;
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v8);
  return a1;
}

void sub_191FD0F78(void *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;

  __cxa_begin_catch(a1);
  v4 = *v1;
  *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v1 + *(_QWORD *)(v4 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x191FD0F28);
  }
  if (v2 >= 1)
    *v3 = 0;
  __cxa_rethrow();
}

void sub_191FD0FD0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *std::istream::ignore(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t *v6;
  _QWORD *v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unsigned __int8 *v13;
  int v14;
  uint64_t v15;
  int v16;
  BOOL v18;

  a1[1] = 0;
  std::istream::sentry::sentry(&v18, a1, 1);
  if (!v18)
    return a1;
  v6 = a1 + 5;
  if (a2 != 0x7FFFFFFFFFFFFFFFLL)
  {
    v11 = a1[1];
    while (1)
    {
      if (v11 >= a2)
        goto LABEL_18;
      v12 = *(_QWORD **)((char *)v6 + *(_QWORD *)(*a1 - 24));
      v13 = (unsigned __int8 *)v12[3];
      if (v13 != (unsigned __int8 *)v12[4])
        break;
      v14 = (*(uint64_t (**)(_QWORD *))(*v12 + 80))(v12);
      if (v14 == -1)
      {
LABEL_19:
        v16 = 2;
        goto LABEL_20;
      }
      v11 = a1[1];
      v15 = 0x7FFFFFFFFFFFFFFFLL;
      if (v11 != 0x7FFFFFFFFFFFFFFFLL)
        goto LABEL_16;
LABEL_17:
      v11 = v15;
      if (v14 == a3)
        goto LABEL_18;
    }
    v12[3] = v13 + 1;
    v14 = *v13;
LABEL_16:
    v15 = v11 + 1;
    a1[1] = v11 + 1;
    goto LABEL_17;
  }
  do
  {
    v7 = *(_QWORD **)((char *)v6 + *(_QWORD *)(*a1 - 24));
    v8 = (unsigned __int8 *)v7[3];
    if (v8 == (unsigned __int8 *)v7[4])
    {
      v9 = (*(uint64_t (**)(_QWORD *))(*v7 + 80))(v7);
      if (v9 == -1)
        goto LABEL_19;
    }
    else
    {
      v7[3] = v8 + 1;
      v9 = *v8;
    }
    v10 = a1[1];
    if (v10 != 0x7FFFFFFFFFFFFFFFLL)
      a1[1] = v10 + 1;
  }
  while (v9 != a3);
LABEL_18:
  v16 = 0;
LABEL_20:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v16);
  return a1;
}

void sub_191FD113C(void *a1)
{
  _QWORD *v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  v2 = *v1;
  *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v1 + *(_QWORD *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x191FD1108);
  }
  __cxa_rethrow();
}

void sub_191FD1180(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::istream::peek(uint64_t *a1)
{
  _QWORD *v2;
  unsigned __int8 *v3;
  uint64_t v4;
  BOOL v6;

  a1[1] = 0;
  std::istream::sentry::sentry(&v6, a1, 1);
  if (!v6)
    return 0xFFFFFFFFLL;
  v2 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
  v3 = (unsigned __int8 *)v2[3];
  if (v3 == (unsigned __int8 *)v2[4])
    v4 = (*(uint64_t (**)(_QWORD *))(*v2 + 72))(v2);
  else
    v4 = *v3;
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | (2 * ((_DWORD)v4 == -1)));
  return v4;
}

void sub_191FD1238(void *a1)
{
  _QWORD *v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  v2 = *v1;
  *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v1 + *(_QWORD *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x191FD120CLL);
  }
  __cxa_rethrow();
}

void sub_191FD127C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *std::istream::read(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v10;

  a1[1] = 0;
  std::istream::sentry::sentry(&v10, a1, 1);
  if (v10)
  {
    v6 = *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 64))(v6, a2, a3);
    a1[1] = v7;
    if (v7 == a3)
      v8 = 0;
    else
      v8 = 6;
  }
  else
  {
    v8 = 4;
  }
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v8);
  return a1;
}

void sub_191FD1338(void *a1)
{
  _QWORD *v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  v2 = *v1;
  *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v1 + *(_QWORD *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x191FD1308);
  }
  __cxa_rethrow();
}

void sub_191FD1378(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::istream::readsome(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v14;

  a1[1] = 0;
  std::istream::sentry::sentry(&v14, a1, 1);
  if (v14)
  {
    v6 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v7 = v6[3];
    v8 = v6[4];
    if (v7 >= v8)
      v9 = (*(uint64_t (**)(_QWORD *))(*v6 + 56))(v6);
    else
      v9 = v8 - v7;
    if (v9 == -1)
    {
      v10 = 2;
    }
    else if (v9)
    {
      if (v9 < a3)
        a3 = v9;
      v11 = *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
      v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 64))(v11, a2, a3);
      a1[1] = v12;
      if (v12 == a3)
        v10 = 0;
      else
        v10 = 6;
    }
    else
    {
      v10 = 0;
    }
  }
  else
  {
    v10 = 4;
  }
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v10);
  return a1[1];
}

void sub_191FD1488(void *a1)
{
  _QWORD *v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  v2 = *v1;
  *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v1 + *(_QWORD *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x191FD1458);
  }
  __cxa_rethrow();
}

void sub_191FD14C8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *std::istream::putback(uint64_t *a1, unsigned __int8 a2)
{
  uint64_t v4;
  std::ios_base::iostate v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v11;

  v4 = *a1;
  v5 = *(_DWORD *)((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 0xFFFFFFFD;
  a1[1] = 0;
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(v4 - 24)), v5);
  std::istream::sentry::sentry(&v11, a1, 1);
  if (!v11)
  {
    v5 |= 4u;
    goto LABEL_9;
  }
  v6 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
  if (!v6)
  {
LABEL_8:
    v5 |= 1u;
    goto LABEL_9;
  }
  v7 = v6[3];
  if (v6[2] == v7 || (v9 = *(unsigned __int8 *)(v7 - 1), v8 = v7 - 1, v9 != a2))
  {
    if ((*(unsigned int (**)(_QWORD *, _QWORD))(*v6 + 88))(v6, a2) != -1)
      goto LABEL_9;
    goto LABEL_8;
  }
  v6[3] = v8;
LABEL_9:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v5);
  return a1;
}

void sub_191FD15C0(void *a1)
{
  _QWORD *v1;
  int v2;
  uint64_t v3;

  __cxa_begin_catch(a1);
  v3 = *v1;
  *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 32) |= v2 | 1;
  if ((*((_BYTE *)v1 + *(_QWORD *)(v3 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x191FD1590);
  }
  __cxa_rethrow();
}

void sub_191FD1600(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *std::istream::unget(uint64_t *a1)
{
  uint64_t v2;
  std::ios_base::iostate v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v7;

  v2 = *a1;
  v3 = *(_DWORD *)((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 0xFFFFFFFD;
  a1[1] = 0;
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(v2 - 24)), v3);
  std::istream::sentry::sentry(&v7, a1, 1);
  if (!v7)
  {
    v3 |= 4u;
    goto LABEL_8;
  }
  v4 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
  if (!v4)
  {
LABEL_7:
    v3 |= 1u;
    goto LABEL_8;
  }
  v5 = v4[3];
  if (v4[2] == v5)
  {
    if ((*(unsigned int (**)(_QWORD *, uint64_t))(*v4 + 88))(v4, 0xFFFFFFFFLL) != -1)
      goto LABEL_8;
    goto LABEL_7;
  }
  v4[3] = v5 - 1;
LABEL_8:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v3);
  return a1;
}

void sub_191FD16E4(void *a1)
{
  _QWORD *v1;
  int v2;
  uint64_t v3;

  __cxa_begin_catch(a1);
  v3 = *v1;
  *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 32) |= v2 | 1;
  if ((*((_BYTE *)v1 + *(_QWORD *)(v3 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x191FD16B8);
  }
  __cxa_rethrow();
}

void sub_191FD1724(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::istream::sync(uint64_t *a1)
{
  uint64_t v2;
  uint64_t result;
  BOOL v4;

  std::istream::sentry::sentry(&v4, a1, 1);
  if (!v4)
    return 0;
  v2 = *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
  if (v2)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
    if ((_DWORD)result == -1)
      return result;
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32));
    return 0;
  }
  return 0xFFFFFFFFLL;
}

void sub_191FD17C4(void *a1)
{
  _QWORD *v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  v2 = *v1;
  *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v1 + *(_QWORD *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x191FD1790);
  }
  __cxa_rethrow();
}

void sub_191FD1804(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::istream::tellg(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  BOOL v9;
  _OWORD v10[8];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_QWORD *)(a2 + 128) = -1;
  std::istream::sentry::sentry(&v9, a1, 1);
  if (v9)
  {
    v4 = *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v4 + 32))(v10, v4, 0, 1, 8);
    *(_QWORD *)(a2 + 128) = v11;
    v5 = v10[7];
    *(_OWORD *)(a2 + 96) = v10[6];
    *(_OWORD *)(a2 + 112) = v5;
    v6 = v10[3];
    *(_OWORD *)(a2 + 32) = v10[2];
    *(_OWORD *)(a2 + 48) = v6;
    v7 = v10[5];
    *(_OWORD *)(a2 + 64) = v10[4];
    *(_OWORD *)(a2 + 80) = v7;
    v8 = v10[1];
    *(_OWORD *)a2 = v10[0];
    *(_OWORD *)(a2 + 16) = v8;
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32));
  }
}

void sub_191FD1914(_Unwind_Exception *exception_object, int a2)
{
  _QWORD *v2;
  uint64_t v3;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    v3 = *v2;
    *(_DWORD *)((char *)v2 + *(_QWORD *)(*v2 - 24) + 32) |= 1u;
    if ((*((_BYTE *)v2 + *(_QWORD *)(v3 - 24) + 36) & 1) == 0)
    {
      __cxa_end_catch();
      JUMPOUT(0x191FD18D0);
    }
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::istream::seekg(uint64_t *a1, __int128 *a2)
{
  std::ios_base *v4;
  std::ios_base::iostate v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  BOOL v13;
  _QWORD v14[17];
  _OWORD v15[8];
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  v5 = v4->__rdstate_ & 0xFFFFFFFD;
  std::ios_base::clear(v4, v5);
  std::istream::sentry::sentry(&v13, a1, 1);
  if (v13)
  {
    v6 = *(_QWORD *)(*a1 - 24);
    v7 = *a2;
    v15[1] = a2[1];
    v15[0] = v7;
    v8 = a2[5];
    v15[4] = a2[4];
    v9 = a2[2];
    v15[3] = a2[3];
    v15[2] = v9;
    v10 = a2[6];
    v15[7] = a2[7];
    v15[6] = v10;
    v11 = *(uint64_t *)((char *)a1 + v6 + 40);
    v16 = *((_QWORD *)a2 + 16);
    v15[5] = v8;
    (*(void (**)(_QWORD *__return_ptr, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)v11 + 40))(v14, v11, v15, 8);
    if (v14[16] == -1)
      v5 |= 4u;
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v5);
  }
  return a1;
}

void sub_191FD1AB0(_Unwind_Exception *exception_object, int a2)
{
  _QWORD *v2;
  int v3;
  uint64_t v4;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    v4 = *v2;
    *(_DWORD *)((char *)v2 + *(_QWORD *)(*v2 - 24) + 32) |= v3 | 1;
    if ((*((_BYTE *)v2 + *(_QWORD *)(v4 - 24) + 36) & 1) == 0)
    {
      __cxa_end_catch();
      JUMPOUT(0x191FD1A60);
    }
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::istream::seekg(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  std::ios_base *v6;
  std::ios_base::iostate v7;
  uint64_t v8;
  BOOL v10;
  _QWORD v11[18];

  v11[17] = *MEMORY[0x1E0C80C00];
  v6 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  v7 = v6->__rdstate_ & 0xFFFFFFFD;
  std::ios_base::clear(v6, v7);
  std::istream::sentry::sentry(&v10, a1, 1);
  if (v10)
  {
    v8 = *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v11, v8, a2, a3, 8);
    if (v11[16] == -1)
      v7 |= 4u;
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v7);
  }
  return a1;
}

void sub_191FD1C14(_Unwind_Exception *exception_object, int a2)
{
  _QWORD *v2;
  int v3;
  uint64_t v4;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    v4 = *v2;
    *(_DWORD *)((char *)v2 + *(_QWORD *)(*v2 - 24) + 32) |= v3 | 1;
    if ((*((_BYTE *)v2 + *(_QWORD *)(v4 - 24) + 36) & 1) == 0)
    {
      __cxa_end_catch();
      JUMPOUT(0x191FD1BC8);
    }
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::ostream::basic_ostream(uint64_t *a1, uint64_t *a2, void *__sb)
{
  uint64_t v4;
  std::ios_base *v5;

  v4 = *a2;
  *a1 = *a2;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(v4 - 24)) = a2[1];
  v5 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v5, __sb);
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  return a1;
}

uint64_t std::ostream::basic_ostream(uint64_t a1, void *a2)
{
  std::ios_base::init((std::ios_base *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 152) = -1;
  return a1;
}

void sub_191FD1D30(_Unwind_Exception *a1)
{
  std::ios_base *v1;

  std::ios_base::~ios_base(v1);
  _Unwind_Resume(a1);
}

uint64_t std::ostream::~ostream(uint64_t a1)
{
  std::ios_base::~ios_base((std::ios_base *)(a1 + 8));
  return a1;
}

void `virtual thunk to'std::ostream::~ostream(_QWORD *a1)
{
  std::ios_base::~ios_base((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8));
}

{
  std::ios_base::~ios_base((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8));
  JUMPOUT(0x194021E38);
}

void std::ostream::~ostream(uint64_t a1)
{
  std::ios_base::~ios_base((std::ios_base *)(a1 + 8));
  JUMPOUT(0x194021E38);
}

void std::ostream::swap(_QWORD *a1, _QWORD *a2)
{
  std::ios_base *v2;
  std::ios_base *v3;
  std::ios_base_vtbl *v4;

  v2 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  v3 = (std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24));
  std::ios_base::swap(v2, v3);
  v4 = v2[1].__vftable;
  v2[1].__vftable = v3[1].__vftable;
  v3[1].__vftable = v4;
  LODWORD(v4) = v2[1].__fmtflags_;
  v2[1].__fmtflags_ = v3[1].__fmtflags_;
  v3[1].__fmtflags_ = v4;
}

uint64_t std::ostream::sentry::sentry(uint64_t a1, _QWORD *a2)
{
  char *v3;
  _QWORD *v4;

  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  v3 = (char *)a2 + *(_QWORD *)(*a2 - 24);
  if (!*((_DWORD *)v3 + 8))
  {
    v4 = (_QWORD *)*((_QWORD *)v3 + 17);
    if (v4)
      std::ostream::flush(v4, (uint64_t)a2);
    *(_BYTE *)a1 = 1;
  }
  return a1;
}

uint64_t std::ostream::sentry::~sentry(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;

  v2 = *(_QWORD *)(a1 + 8) + *(_QWORD *)(**(_QWORD **)(a1 + 8) - 24);
  if (*(_QWORD *)(v2 + 40))
  {
    if (!*(_DWORD *)(v2 + 32) && (*(_BYTE *)(v2 + 9) & 0x20) != 0 && !std::uncaught_exception())
    {
      v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + *(_QWORD *)(**(_QWORD **)(a1 + 8) - 24) + 40);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3) == -1)
      {
        v4 = (std::ios_base *)(*(_QWORD *)(a1 + 8) + *(_QWORD *)(**(_QWORD **)(a1 + 8) - 24));
        std::ios_base::clear(v4, v4->__rdstate_ | 1);
      }
    }
  }
  return a1;
}

void sub_191FD1F40(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x191FD1F30);
}

char *std::ostream::operator<<(char *a1, void (*a2)(char *))
{
  a2(&a1[*(_QWORD *)(*(_QWORD *)a1 - 24)]);
  return a1;
}

{
  a2(&a1[*(_QWORD *)(*(_QWORD *)a1 - 24)]);
  return a1;
}

_QWORD *std::ostream::operator<<(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  _QWORD *v6;
  const std::locale::facet *v7;
  char *v8;
  uint64_t v9;
  int v10;
  const std::locale::facet *v11;
  char v13[8];
  _QWORD *v14;
  std::locale v15;

  v13[0] = 0;
  v14 = a1;
  v3 = *a1;
  v4 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if (!*((_DWORD *)v4 + 8))
  {
    v6 = (_QWORD *)*((_QWORD *)v4 + 17);
    if (v6)
    {
      std::ostream::flush(v6, a2);
      v3 = *a1;
    }
    v13[0] = 1;
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(v3 - 24)));
    v7 = std::locale::use_facet(&v15, &std::num_put<char,std::ostreambuf_iterator<char>>::id);
    std::locale::~locale(&v15);
    v8 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v9 = *((_QWORD *)v8 + 5);
    v10 = *((_DWORD *)v8 + 36);
    if (v10 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v11 = std::locale::use_facet(&v15, &std::ctype<char>::id);
      v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 32);
      std::locale::~locale(&v15);
      *((_DWORD *)v8 + 36) = v10;
    }
    if (!((uint64_t (*)(const std::locale::facet *, uint64_t, char *, _QWORD, uint64_t))v7->__vftable[1].~facet)(v7, v9, v8, (char)v10, a2))std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  std::ostream::sentry::~sentry((uint64_t)v13);
  return a1;
}

{
  uint64_t v3;
  char *v4;
  int v5;
  _QWORD *v6;
  const std::ios_base *v7;
  std::ios_base::fmtflags fmtflags;
  const std::locale::facet *v9;
  char *v10;
  uint64_t v11;
  int v12;
  const std::locale::facet *v13;
  uint64_t v15;
  char v17[8];
  _QWORD *v18;
  std::locale v19;

  v17[0] = 0;
  v18 = a1;
  v3 = *a1;
  v4 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if (!*((_DWORD *)v4 + 8))
  {
    v5 = a2;
    v6 = (_QWORD *)*((_QWORD *)v4 + 17);
    if (v6)
    {
      std::ostream::flush(v6, a2);
      v3 = *a1;
    }
    v17[0] = 1;
    v7 = (const std::ios_base *)((char *)a1 + *(_QWORD *)(v3 - 24));
    fmtflags = v7->__fmtflags_;
    std::ios_base::getloc(v7);
    v9 = std::locale::use_facet(&v19, &std::num_put<char,std::ostreambuf_iterator<char>>::id);
    std::locale::~locale(&v19);
    v10 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v11 = *((_QWORD *)v10 + 5);
    v12 = *((_DWORD *)v10 + 36);
    if (v12 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v13 = std::locale::use_facet(&v19, &std::ctype<char>::id);
      v12 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 32);
      std::locale::~locale(&v19);
      *((_DWORD *)v10 + 36) = v12;
    }
    if ((fmtflags & 0x4A) == 8 || (fmtflags & 0x4A) == 64)
      v15 = (unsigned __int16)v5;
    else
      v15 = v5;
    if (!((uint64_t (*)(const std::locale::facet *, uint64_t, char *, _QWORD, uint64_t))v9->__vftable[1].~facet_0)(v9, v11, v10, (char)v12, v15))std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  std::ostream::sentry::~sentry((uint64_t)v17);
  return a1;
}

{
  uint64_t v3;
  char *v4;
  unsigned int v5;
  _QWORD *v6;
  const std::locale::facet *v7;
  char *v8;
  uint64_t v9;
  int v10;
  const std::locale::facet *v11;
  char v13[8];
  _QWORD *v14;
  std::locale v15;

  v13[0] = 0;
  v14 = a1;
  v3 = *a1;
  v4 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if (!*((_DWORD *)v4 + 8))
  {
    v5 = a2;
    v6 = (_QWORD *)*((_QWORD *)v4 + 17);
    if (v6)
    {
      std::ostream::flush(v6, a2);
      v3 = *a1;
    }
    v13[0] = 1;
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(v3 - 24)));
    v7 = std::locale::use_facet(&v15, &std::num_put<char,std::ostreambuf_iterator<char>>::id);
    std::locale::~locale(&v15);
    v8 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v9 = *((_QWORD *)v8 + 5);
    v10 = *((_DWORD *)v8 + 36);
    if (v10 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v11 = std::locale::use_facet(&v15, &std::ctype<char>::id);
      v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 32);
      std::locale::~locale(&v15);
      *((_DWORD *)v8 + 36) = v10;
    }
    if (!((uint64_t (*)(const std::locale::facet *, uint64_t, char *, _QWORD, _QWORD))v7->__vftable[2].~facet)(v7, v9, v8, (char)v10, v5))std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  std::ostream::sentry::~sentry((uint64_t)v13);
  return a1;
}

{
  uint64_t v3;
  char *v4;
  unsigned int v5;
  _QWORD *v6;
  const std::ios_base *v7;
  std::ios_base::fmtflags fmtflags;
  const std::locale::facet *v9;
  char *v10;
  uint64_t v11;
  int v12;
  const std::locale::facet *v13;
  uint64_t v15;
  char v17[8];
  _QWORD *v18;
  std::locale v19;

  v17[0] = 0;
  v18 = a1;
  v3 = *a1;
  v4 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if (!*((_DWORD *)v4 + 8))
  {
    v5 = a2;
    v6 = (_QWORD *)*((_QWORD *)v4 + 17);
    if (v6)
    {
      std::ostream::flush(v6, a2);
      v3 = *a1;
    }
    v17[0] = 1;
    v7 = (const std::ios_base *)((char *)a1 + *(_QWORD *)(v3 - 24));
    fmtflags = v7->__fmtflags_;
    std::ios_base::getloc(v7);
    v9 = std::locale::use_facet(&v19, &std::num_put<char,std::ostreambuf_iterator<char>>::id);
    std::locale::~locale(&v19);
    v10 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v11 = *((_QWORD *)v10 + 5);
    v12 = *((_DWORD *)v10 + 36);
    if (v12 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v13 = std::locale::use_facet(&v19, &std::ctype<char>::id);
      v12 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 32);
      std::locale::~locale(&v19);
      *((_DWORD *)v10 + 36) = v12;
    }
    if ((fmtflags & 0x4A) == 8 || (fmtflags & 0x4A) == 64)
      v15 = v5;
    else
      v15 = (int)v5;
    if (!((uint64_t (*)(const std::locale::facet *, uint64_t, char *, _QWORD, uint64_t))v9->__vftable[1].~facet_0)(v9, v11, v10, (char)v12, v15))std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  std::ostream::sentry::~sentry((uint64_t)v17);
  return a1;
}

{
  uint64_t v3;
  char *v4;
  unsigned int v5;
  _QWORD *v6;
  const std::locale::facet *v7;
  char *v8;
  uint64_t v9;
  int v10;
  const std::locale::facet *v11;
  char v13[8];
  _QWORD *v14;
  std::locale v15;

  v13[0] = 0;
  v14 = a1;
  v3 = *a1;
  v4 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if (!*((_DWORD *)v4 + 8))
  {
    v5 = a2;
    v6 = (_QWORD *)*((_QWORD *)v4 + 17);
    if (v6)
    {
      std::ostream::flush(v6, a2);
      v3 = *a1;
    }
    v13[0] = 1;
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(v3 - 24)));
    v7 = std::locale::use_facet(&v15, &std::num_put<char,std::ostreambuf_iterator<char>>::id);
    std::locale::~locale(&v15);
    v8 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v9 = *((_QWORD *)v8 + 5);
    v10 = *((_DWORD *)v8 + 36);
    if (v10 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v11 = std::locale::use_facet(&v15, &std::ctype<char>::id);
      v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 32);
      std::locale::~locale(&v15);
      *((_DWORD *)v8 + 36) = v10;
    }
    if (!((uint64_t (*)(const std::locale::facet *, uint64_t, char *, _QWORD, _QWORD))v7->__vftable[2].~facet)(v7, v9, v8, (char)v10, v5))std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  std::ostream::sentry::~sentry((uint64_t)v13);
  return a1;
}

{
  uint64_t v3;
  char *v4;
  _QWORD *v6;
  const std::locale::facet *v7;
  char *v8;
  uint64_t v9;
  int v10;
  const std::locale::facet *v11;
  char v13[8];
  _QWORD *v14;
  std::locale v15;

  v13[0] = 0;
  v14 = a1;
  v3 = *a1;
  v4 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if (!*((_DWORD *)v4 + 8))
  {
    v6 = (_QWORD *)*((_QWORD *)v4 + 17);
    if (v6)
    {
      std::ostream::flush(v6, a2);
      v3 = *a1;
    }
    v13[0] = 1;
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(v3 - 24)));
    v7 = std::locale::use_facet(&v15, &std::num_put<char,std::ostreambuf_iterator<char>>::id);
    std::locale::~locale(&v15);
    v8 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v9 = *((_QWORD *)v8 + 5);
    v10 = *((_DWORD *)v8 + 36);
    if (v10 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v11 = std::locale::use_facet(&v15, &std::ctype<char>::id);
      v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 32);
      std::locale::~locale(&v15);
      *((_DWORD *)v8 + 36) = v10;
    }
    if (!((uint64_t (*)(const std::locale::facet *, uint64_t, char *, _QWORD, uint64_t))v7->__vftable[1].~facet_0)(v7, v9, v8, (char)v10, a2))std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  std::ostream::sentry::~sentry((uint64_t)v13);
  return a1;
}

{
  uint64_t v3;
  char *v4;
  _QWORD *v6;
  const std::locale::facet *v7;
  char *v8;
  uint64_t v9;
  int v10;
  const std::locale::facet *v11;
  char v13[8];
  _QWORD *v14;
  std::locale v15;

  v13[0] = 0;
  v14 = a1;
  v3 = *a1;
  v4 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if (!*((_DWORD *)v4 + 8))
  {
    v6 = (_QWORD *)*((_QWORD *)v4 + 17);
    if (v6)
    {
      std::ostream::flush(v6, a2);
      v3 = *a1;
    }
    v13[0] = 1;
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(v3 - 24)));
    v7 = std::locale::use_facet(&v15, &std::num_put<char,std::ostreambuf_iterator<char>>::id);
    std::locale::~locale(&v15);
    v8 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v9 = *((_QWORD *)v8 + 5);
    v10 = *((_DWORD *)v8 + 36);
    if (v10 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v11 = std::locale::use_facet(&v15, &std::ctype<char>::id);
      v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 32);
      std::locale::~locale(&v15);
      *((_DWORD *)v8 + 36) = v10;
    }
    if (!((uint64_t (*)(const std::locale::facet *, uint64_t, char *, _QWORD, uint64_t))v7->__vftable[2].~facet)(v7, v9, v8, (char)v10, a2))std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  std::ostream::sentry::~sentry((uint64_t)v13);
  return a1;
}

{
  uint64_t v3;
  char *v4;
  _QWORD *v6;
  const std::locale::facet *v7;
  char *v8;
  uint64_t v9;
  int v10;
  const std::locale::facet *v11;
  char v13[8];
  _QWORD *v14;
  std::locale v15;

  v13[0] = 0;
  v14 = a1;
  v3 = *a1;
  v4 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if (!*((_DWORD *)v4 + 8))
  {
    v6 = (_QWORD *)*((_QWORD *)v4 + 17);
    if (v6)
    {
      std::ostream::flush(v6, a2);
      v3 = *a1;
    }
    v13[0] = 1;
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(v3 - 24)));
    v7 = std::locale::use_facet(&v15, &std::num_put<char,std::ostreambuf_iterator<char>>::id);
    std::locale::~locale(&v15);
    v8 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v9 = *((_QWORD *)v8 + 5);
    v10 = *((_DWORD *)v8 + 36);
    if (v10 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v11 = std::locale::use_facet(&v15, &std::ctype<char>::id);
      v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 32);
      std::locale::~locale(&v15);
      *((_DWORD *)v8 + 36) = v10;
    }
    if (!((uint64_t (*)(const std::locale::facet *, uint64_t, char *, _QWORD, uint64_t))v7->__vftable[1].__on_zero_shared)(v7, v9, v8, (char)v10, a2))std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  std::ostream::sentry::~sentry((uint64_t)v13);
  return a1;
}

{
  uint64_t v3;
  char *v4;
  _QWORD *v6;
  const std::locale::facet *v7;
  char *v8;
  uint64_t v9;
  int v10;
  const std::locale::facet *v11;
  char v13[8];
  _QWORD *v14;
  std::locale v15;

  v13[0] = 0;
  v14 = a1;
  v3 = *a1;
  v4 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if (!*((_DWORD *)v4 + 8))
  {
    v6 = (_QWORD *)*((_QWORD *)v4 + 17);
    if (v6)
    {
      std::ostream::flush(v6, a2);
      v3 = *a1;
    }
    v13[0] = 1;
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(v3 - 24)));
    v7 = std::locale::use_facet(&v15, &std::num_put<char,std::ostreambuf_iterator<char>>::id);
    std::locale::~locale(&v15);
    v8 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v9 = *((_QWORD *)v8 + 5);
    v10 = *((_DWORD *)v8 + 36);
    if (v10 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v11 = std::locale::use_facet(&v15, &std::ctype<char>::id);
      v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 32);
      std::locale::~locale(&v15);
      *((_DWORD *)v8 + 36) = v10;
    }
    if (!((uint64_t (*)(const std::locale::facet *, uint64_t, char *, _QWORD, uint64_t))v7->__vftable[2].~facet_0)(v7, v9, v8, (char)v10, a2))std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  std::ostream::sentry::~sentry((uint64_t)v13);
  return a1;
}

{
  uint64_t v3;
  char *v4;
  _QWORD *v6;
  const std::locale::facet *v7;
  char *v8;
  uint64_t v9;
  int v10;
  const std::locale::facet *v11;
  char v13[8];
  _QWORD *v14;
  std::locale v15;

  v13[0] = 0;
  v14 = a1;
  v3 = *a1;
  v4 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if (!*((_DWORD *)v4 + 8))
  {
    v6 = (_QWORD *)*((_QWORD *)v4 + 17);
    if (v6)
    {
      std::ostream::flush(v6, a2);
      v3 = *a1;
    }
    v13[0] = 1;
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(v3 - 24)));
    v7 = std::locale::use_facet(&v15, &std::num_put<char,std::ostreambuf_iterator<char>>::id);
    std::locale::~locale(&v15);
    v8 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v9 = *((_QWORD *)v8 + 5);
    v10 = *((_DWORD *)v8 + 36);
    if (v10 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v11 = std::locale::use_facet(&v15, &std::ctype<char>::id);
      v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 32);
      std::locale::~locale(&v15);
      *((_DWORD *)v8 + 36) = v10;
    }
    if (!((uint64_t (*)(const std::locale::facet *, uint64_t, char *, _QWORD, uint64_t))v7->__vftable[3].~facet_0)(v7, v9, v8, (char)v10, a2))std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  std::ostream::sentry::~sentry((uint64_t)v13);
  return a1;
}

void sub_191FD20F4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  std::ostream::sentry::~sentry((uint64_t)&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x191FD20D8);
}

void sub_191FD2144(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_191FD22BC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  std::ostream::sentry::~sentry((uint64_t)&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x191FD229CLL);
}

void sub_191FD230C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_191FD245C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  std::ostream::sentry::~sentry((uint64_t)&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x191FD2440);
}

void sub_191FD24AC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_191FD2624(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  std::ostream::sentry::~sentry((uint64_t)&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x191FD2604);
}

void sub_191FD2674(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_191FD27C4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  std::ostream::sentry::~sentry((uint64_t)&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x191FD27A8);
}

void sub_191FD2814(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_191FD2964(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  std::ostream::sentry::~sentry((uint64_t)&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x191FD2948);
}

void sub_191FD29B4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_191FD2B04(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  std::ostream::sentry::~sentry((uint64_t)&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x191FD2AE8);
}

void sub_191FD2B54(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_191FD2CA4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  std::ostream::sentry::~sentry((uint64_t)&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x191FD2C88);
}

void sub_191FD2CF4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_191FD2E44(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  std::ostream::sentry::~sentry((uint64_t)&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x191FD2E28);
}

void sub_191FD2E94(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *std::ostream::operator<<(_QWORD *a1, uint64_t a2, float a3)
{
  uint64_t v4;
  char *v5;
  _QWORD *v7;
  const std::locale::facet *v8;
  char *v9;
  uint64_t v10;
  int v11;
  const std::locale::facet *v12;
  char v14[8];
  _QWORD *v15;
  std::locale v16;

  v14[0] = 0;
  v15 = a1;
  v4 = *a1;
  v5 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if (!*((_DWORD *)v5 + 8))
  {
    v7 = (_QWORD *)*((_QWORD *)v5 + 17);
    if (v7)
    {
      std::ostream::flush(v7, a2);
      v4 = *a1;
    }
    v14[0] = 1;
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(v4 - 24)));
    v8 = std::locale::use_facet(&v16, &std::num_put<char,std::ostreambuf_iterator<char>>::id);
    std::locale::~locale(&v16);
    v9 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v10 = *((_QWORD *)v9 + 5);
    v11 = *((_DWORD *)v9 + 36);
    if (v11 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v12 = std::locale::use_facet(&v16, &std::ctype<char>::id);
      v11 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 32);
      std::locale::~locale(&v16);
      *((_DWORD *)v9 + 36) = v11;
    }
    if (!((uint64_t (*)(const std::locale::facet *, uint64_t, char *, _QWORD, double))v8->__vftable[2].__on_zero_shared)(v8, v10, v9, (char)v11, a3))std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  std::ostream::sentry::~sentry((uint64_t)v14);
  return a1;
}

void sub_191FD2FEC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  std::ostream::sentry::~sentry((uint64_t)&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x191FD2FCCLL);
}

void sub_191FD303C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *std::ostream::operator<<(_QWORD *a1, uint64_t a2, double a3)
{
  uint64_t v4;
  char *v5;
  _QWORD *v7;
  const std::locale::facet *v8;
  char *v9;
  uint64_t v10;
  int v11;
  const std::locale::facet *v12;
  char v14[8];
  _QWORD *v15;
  std::locale v16;

  v14[0] = 0;
  v15 = a1;
  v4 = *a1;
  v5 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if (!*((_DWORD *)v5 + 8))
  {
    v7 = (_QWORD *)*((_QWORD *)v5 + 17);
    if (v7)
    {
      std::ostream::flush(v7, a2);
      v4 = *a1;
    }
    v14[0] = 1;
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(v4 - 24)));
    v8 = std::locale::use_facet(&v16, &std::num_put<char,std::ostreambuf_iterator<char>>::id);
    std::locale::~locale(&v16);
    v9 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v10 = *((_QWORD *)v9 + 5);
    v11 = *((_DWORD *)v9 + 36);
    if (v11 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v12 = std::locale::use_facet(&v16, &std::ctype<char>::id);
      v11 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 32);
      std::locale::~locale(&v16);
      *((_DWORD *)v9 + 36) = v11;
    }
    if (!((uint64_t (*)(const std::locale::facet *, uint64_t, char *, _QWORD, double))v8->__vftable[2].__on_zero_shared)(v8, v10, v9, (char)v11, a3))std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  std::ostream::sentry::~sentry((uint64_t)v14);
  return a1;
}

{
  uint64_t v4;
  char *v5;
  _QWORD *v7;
  const std::locale::facet *v8;
  char *v9;
  uint64_t v10;
  int v11;
  const std::locale::facet *v12;
  char v14[8];
  _QWORD *v15;
  std::locale v16;

  v14[0] = 0;
  v15 = a1;
  v4 = *a1;
  v5 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if (!*((_DWORD *)v5 + 8))
  {
    v7 = (_QWORD *)*((_QWORD *)v5 + 17);
    if (v7)
    {
      std::ostream::flush(v7, a2);
      v4 = *a1;
    }
    v14[0] = 1;
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(v4 - 24)));
    v8 = std::locale::use_facet(&v16, &std::num_put<char,std::ostreambuf_iterator<char>>::id);
    std::locale::~locale(&v16);
    v9 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v10 = *((_QWORD *)v9 + 5);
    v11 = *((_DWORD *)v9 + 36);
    if (v11 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v12 = std::locale::use_facet(&v16, &std::ctype<char>::id);
      v11 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 32);
      std::locale::~locale(&v16);
      *((_DWORD *)v9 + 36) = v11;
    }
    if (!((uint64_t (*)(const std::locale::facet *, uint64_t, char *, _QWORD, double))v8->__vftable[3].~facet)(v8, v10, v9, (char)v11, a3))std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  std::ostream::sentry::~sentry((uint64_t)v14);
  return a1;
}

void sub_191FD3194(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  std::ostream::sentry::~sentry((uint64_t)&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x191FD3174);
}

void sub_191FD31E4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_191FD333C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  std::ostream::sentry::~sentry((uint64_t)&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x191FD331CLL);
}

void sub_191FD338C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_191FD34DC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  std::ostream::sentry::~sentry((uint64_t)&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x191FD34C0);
}

void sub_191FD352C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *std::ostream::operator<<(_QWORD *a1, _QWORD *a2)
{
  char *v3;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  char v15[8];
  _QWORD *v16;

  v15[0] = 0;
  v16 = a1;
  v3 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if (!*((_DWORD *)v3 + 8))
  {
    v6 = (_QWORD *)*((_QWORD *)v3 + 17);
    if (v6)
      std::ostream::flush(v6, (uint64_t)a2);
    v15[0] = 1;
    if (a2)
    {
      v7 = 0;
      v13 = 0;
      v14 = a2;
      v8 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
      while ((std::istreambuf_iterator<char>::equal[abi:ne180100](&v14, &v13) & 1) == 0)
      {
        v9 = (unsigned __int8 *)v14[3];
        if (v9 == (unsigned __int8 *)v14[4])
        {
          v10 = (*(unsigned __int8 (**)(_QWORD *))(*v14 + 72))(v14);
          if (!v8)
            goto LABEL_21;
        }
        else
        {
          v10 = *v9;
          if (!v8)
            goto LABEL_21;
        }
        v11 = (_BYTE *)v8[6];
        if (v11 == (_BYTE *)v8[7])
        {
          if ((*(unsigned int (**)(_QWORD *, uint64_t))(*v8 + 104))(v8, v10) == -1)
            break;
        }
        else
        {
          v8[6] = v11 + 1;
          *v11 = v10;
        }
        v12 = v14[3];
        if (v12 == v14[4])
          (*(void (**)(_QWORD *))(*v14 + 80))(v14);
        else
          v14[3] = v12 + 1;
        --v7;
      }
      if (v7)
        goto LABEL_2;
LABEL_21:
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
    }
    else
    {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 1);
    }
  }
LABEL_2:
  std::ostream::sentry::~sentry((uint64_t)v15);
  return a1;
}

void sub_191FD36A8(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  std::ios_base::__set_failbit_and_consider_rethrow((std::ios_base *)((char *)v1 + *(_QWORD *)(*v1 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x191FD3574);
}

void sub_191FD36D0(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __cxa_end_catch();
  std::ostream::sentry::~sentry((uint64_t)va);
  JUMPOUT(0x191FD36E8);
}

void sub_191FD3708(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *std::ostream::put(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  unsigned __int8 v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  unsigned __int8 *v9;
  char v11[8];
  _QWORD *v12;

  v11[0] = 0;
  v12 = a1;
  v3 = *a1;
  v4 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if (!*((_DWORD *)v4 + 8))
  {
    v5 = a2;
    v6 = (_QWORD *)*((_QWORD *)v4 + 17);
    if (v6)
    {
      std::ostream::flush(v6, a2);
      v3 = *a1;
    }
    v11[0] = 1;
    v7 = *(_QWORD *)(v3 - 24);
    v8 = *(_QWORD **)((char *)a1 + v7 + 40);
    if (v8)
    {
      v9 = (unsigned __int8 *)v8[6];
      if (v9 != (unsigned __int8 *)v8[7])
      {
        v8[6] = v9 + 1;
        *v9 = v5;
        goto LABEL_10;
      }
      if ((*(unsigned int (**)(_QWORD *, _QWORD))(*v8 + 104))(v8, v5) != -1)
        goto LABEL_10;
      v7 = *(_QWORD *)(*a1 - 24);
    }
    std::ios_base::clear((std::ios_base *)((char *)a1 + v7), *(_DWORD *)((char *)a1 + v7 + 32) | 1);
  }
LABEL_10:
  std::ostream::sentry::~sentry((uint64_t)v11);
  return a1;
}

void sub_191FD37E0(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v1 + *(_QWORD *)(*v1 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x191FD37CCLL);
}

void sub_191FD3814(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *std::ostream::write(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  char *v4;
  _QWORD *v8;
  uint64_t v9;
  char v10[8];
  _QWORD *v11;

  v10[0] = 0;
  v11 = a1;
  v4 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if (!*((_DWORD *)v4 + 8))
  {
    v8 = (_QWORD *)*((_QWORD *)v4 + 17);
    if (v8)
      std::ostream::flush(v8, a2);
    v10[0] = 1;
    if (a3)
    {
      v9 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
      if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 96))(v9, a2, a3) != a3)
        std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 1);
    }
  }
  std::ostream::sentry::~sentry((uint64_t)v10);
  return a1;
}

void sub_191FD38E4(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v1 + *(_QWORD *)(*v1 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x191FD3864);
}

void sub_191FD3918(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *std::ostream::tellp@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  char *v2;

  v2 = (char *)result + *(_QWORD *)(*result - 24);
  if ((v2[32] & 5) == 0)
    return (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v2 + 5) + 32))(*((_QWORD *)v2 + 5), 0, 1, 16);
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_QWORD *)(a2 + 128) = -1;
  return result;
}

_QWORD *std::ostream::seekp(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  char v13[8];
  _QWORD *v14;
  _QWORD v15[17];
  _OWORD v16[8];
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v13[0] = 0;
  v14 = a1;
  v4 = *(_QWORD *)(*a1 - 24);
  v5 = *(_DWORD *)((char *)a1 + v4 + 32);
  if (!v5)
  {
    v6 = *(_QWORD **)((char *)a1 + v4 + 136);
    if (v6)
    {
      std::ostream::flush(v6, a2);
      v4 = *(_QWORD *)(*a1 - 24);
      v5 = *(_DWORD *)((char *)a1 + v4 + 32);
    }
    else
    {
      LOBYTE(v5) = 0;
    }
    v13[0] = 1;
  }
  if ((v5 & 5) == 0)
  {
    v7 = *(_QWORD *)((char *)a1 + v4 + 40);
    v8 = *(_OWORD *)(a2 + 16);
    v16[0] = *(_OWORD *)a2;
    v16[1] = v8;
    v9 = *(_OWORD *)(a2 + 48);
    v16[2] = *(_OWORD *)(a2 + 32);
    v16[3] = v9;
    v17 = *(_QWORD *)(a2 + 128);
    v10 = *(_OWORD *)(a2 + 112);
    v16[6] = *(_OWORD *)(a2 + 96);
    v16[7] = v10;
    v11 = *(_OWORD *)(a2 + 80);
    v16[4] = *(_OWORD *)(a2 + 64);
    v16[5] = v11;
    (*(void (**)(_QWORD *__return_ptr, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)v7 + 40))(v15, v7, v16, 16);
    if (v15[16] == -1)
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  }
  std::ostream::sentry::~sentry((uint64_t)v13);
  return a1;
}

void sub_191FD3AB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostream::sentry::~sentry((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::ostream::seekp(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  _QWORD *v8;
  char v10[8];
  _QWORD *v11;
  _QWORD v12[18];

  v12[17] = *MEMORY[0x1E0C80C00];
  v10[0] = 0;
  v11 = a1;
  v6 = *(_QWORD *)(*a1 - 24);
  v7 = *(_DWORD *)((char *)a1 + v6 + 32);
  if (!v7)
  {
    v8 = *(_QWORD **)((char *)a1 + v6 + 136);
    if (v8)
    {
      std::ostream::flush(v8, a2);
      v6 = *(_QWORD *)(*a1 - 24);
      v7 = *(_DWORD *)((char *)a1 + v6 + 32);
    }
    else
    {
      LOBYTE(v7) = 0;
    }
    v10[0] = 1;
  }
  if ((v7 & 5) == 0)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)((char *)a1 + v6 + 40)
                                                                                    + 32))(v12, *(_QWORD *)((char *)a1 + v6 + 40), a2, a3, 16);
    if (v12[16] == -1)
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  }
  std::ostream::sentry::~sentry((uint64_t)v10);
  return a1;
}

void sub_191FD3BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostream::sentry::~sentry((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::iostream::basic_iostream(uint64_t *a1, uint64_t *a2, void *__sb)
{
  uint64_t v5;
  std::ios_base *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = a2[1];
  *a1 = v5;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(v5 - 24)) = a2[2];
  a1[1] = 0;
  v6 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v6, __sb);
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  v7 = a2[3];
  a1[2] = v7;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(v7 - 24) + 16) = a2[4];
  v8 = *a2;
  *a1 = *a2;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(v8 - 24)) = a2[5];
  a1[2] = a2[6];
  return a1;
}

uint64_t std::iostream::basic_iostream(uint64_t a1, void *a2)
{
  *(_QWORD *)(a1 + 24) = &off_1E2E58A58;
  *(_QWORD *)a1 = &off_1E2E58A30;
  *(_QWORD *)(a1 + 8) = 0;
  std::ios_base::init((std::ios_base *)(a1 + 24), a2);
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 168) = -1;
  return a1;
}

void sub_191FD3CF0(_Unwind_Exception *a1)
{
  std::ios_base *v1;

  std::ios_base::~ios_base(v1);
  _Unwind_Resume(a1);
}

uint64_t std::iostream::~basic_iostream(uint64_t a1)
{
  std::ios_base::~ios_base((std::ios_base *)(a1 + 24));
  return a1;
}

void `non-virtual thunk to'std::iostream::~basic_iostream(uint64_t a1)
{
  std::ios_base::~ios_base((std::ios_base *)(a1 + 8));
}

{
  std::ios_base::~ios_base((std::ios_base *)(a1 + 8));
  JUMPOUT(0x194021E38);
}

void `virtual thunk to'std::iostream::~basic_iostream(_QWORD *a1)
{
  std::ios_base::~ios_base((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 24));
}

{
  std::ios_base::~ios_base((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 24));
  JUMPOUT(0x194021E38);
}

void std::iostream::~basic_iostream(uint64_t a1)
{
  std::ios_base::~ios_base((std::ios_base *)(a1 + 24));
  JUMPOUT(0x194021E38);
}

void std::iostream::swap(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::ios_base *v5;
  std::ios_base *v6;
  std::ios_base_vtbl *v7;

  v3 = *a1;
  v2 = a1[1];
  v4 = *a2;
  a1[1] = a2[1];
  a2[1] = v2;
  v5 = (std::ios_base *)((char *)a1 + *(_QWORD *)(v3 - 24));
  v6 = (std::ios_base *)((char *)a2 + *(_QWORD *)(v4 - 24));
  std::ios_base::swap(v5, v6);
  v7 = v5[1].__vftable;
  v5[1].__vftable = v6[1].__vftable;
  v6[1].__vftable = v7;
  LODWORD(v7) = v5[1].__fmtflags_;
  v5[1].__fmtflags_ = v6[1].__fmtflags_;
  v6[1].__fmtflags_ = v7;
}

void std::wios::~wios(std::ios_base *a1)
{
  std::ios_base::~ios_base(a1);
  JUMPOUT(0x194021E38);
}

std::ios_base *std::wios::copyfmt(std::ios_base *this, std::ios_base *a2)
{
  if (this != a2)
  {
    std::ios_base::__call_callbacks(this, erase_event);
    std::ios_base::copyfmt(this, a2);
    this[1].__vftable = a2[1].__vftable;
    this[1].__fmtflags_ = a2[1].__fmtflags_;
    std::ios_base::__call_callbacks(this, copyfmt_event);
    this->__exceptions_ = a2->__exceptions_;
    std::ios_base::clear(this, this->__rdstate_);
  }
  return this;
}

std::locale *std::wstreambuf::~wstreambuf(std::locale *a1)
{
  std::locale::~locale(a1 + 1);
  return a1;
}

{
  std::locale::~locale(a1 + 1);
  return a1;
}

void std::wstreambuf::~wstreambuf(std::locale *a1)
{
  std::locale::~locale(a1 + 1);
  JUMPOUT(0x194021E38);
}

const std::locale *std::wstreambuf::pubimbue@<X0>(std::locale *a1@<X0>, const std::locale *a2@<X1>, std::locale *a3@<X8>)
{
  std::locale *v5;

  v5 = a1 + 1;
  (*((void (**)(std::locale *))a1->__locale_ + 2))(a1);
  std::locale::locale(a3, v5);
  return std::locale::operator=(v5, a2);
}

std::locale *std::wstreambuf::getloc@<X0>(const std::locale *a1@<X0>, std::locale *a2@<X8>)
{
  return std::locale::locale(a2, a1 + 1);
}

uint64_t std::wstreambuf::pubsetbuf(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
}

uint64_t std::wstreambuf::pubseekoff(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
}

uint64_t std::wstreambuf::pubseekpos(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[8];
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v2;
  v8 = *(_QWORD *)(a2 + 128);
  v3 = *(_OWORD *)(a2 + 112);
  v7[6] = *(_OWORD *)(a2 + 96);
  v7[7] = v3;
  v4 = *(_OWORD *)(a2 + 80);
  v7[4] = *(_OWORD *)(a2 + 64);
  v7[5] = v4;
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return (*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)a1 + 40))(a1, v7);
}

uint64_t std::wstreambuf::pubsync(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t std::wstreambuf::in_avail(_QWORD *a1)
{
  unint64_t v1;
  unint64_t v2;

  v1 = a1[3];
  v2 = a1[4];
  if (v1 >= v2)
    return (*(uint64_t (**)(_QWORD *))(*a1 + 56))(a1);
  else
    return (uint64_t)(v2 - v1) >> 2;
}

uint64_t std::wstreambuf::snextc(_QWORD *a1)
{
  unsigned int *v2;
  uint64_t result;
  unsigned int *v4;

  v2 = (unsigned int *)a1[3];
  if (v2 == (unsigned int *)a1[4])
  {
    result = (*(uint64_t (**)(_QWORD *))(*a1 + 80))(a1);
  }
  else
  {
    result = *v2;
    a1[3] = v2 + 1;
  }
  if ((_DWORD)result != -1)
  {
    v4 = (unsigned int *)a1[3];
    if (v4 == (unsigned int *)a1[4])
      return (*(uint64_t (**)(_QWORD *))(*a1 + 72))(a1);
    else
      return *v4;
  }
  return result;
}

uint64_t std::wstreambuf::sbumpc(_QWORD *a1)
{
  unsigned int *v1;
  uint64_t v2;

  v1 = (unsigned int *)a1[3];
  if (v1 == (unsigned int *)a1[4])
    return (*(uint64_t (**)(_QWORD *))(*a1 + 80))(a1);
  v2 = *v1;
  a1[3] = v1 + 1;
  return v2;
}

uint64_t std::wstreambuf::sgetc(_QWORD *a1)
{
  unsigned int *v1;

  v1 = (unsigned int *)a1[3];
  if (v1 == (unsigned int *)a1[4])
    return (*(uint64_t (**)(_QWORD *))(*a1 + 72))(a1);
  else
    return *v1;
}

uint64_t std::wstreambuf::sgetn(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t std::wstreambuf::sputbackc(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;

  v2 = a1[3];
  if (a1[2] == v2)
    return (*(uint64_t (**)(_QWORD *))(*a1 + 88))(a1);
  v4 = *(_DWORD *)(v2 - 4);
  v3 = v2 - 4;
  if (v4 != (_DWORD)a2)
    return (*(uint64_t (**)(_QWORD *))(*a1 + 88))(a1);
  a1[3] = v3;
  return a2;
}

uint64_t std::wstreambuf::sungetc(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1[3];
  if (a1[2] == v1)
    return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 88))(a1, 0xFFFFFFFFLL);
  v2 = *(unsigned int *)(v1 - 4);
  a1[3] = v1 - 4;
  return v2;
}

uint64_t std::wstreambuf::sputc(_QWORD *a1, uint64_t a2)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[6];
  if (v2 == (_DWORD *)a1[7])
    return (*(uint64_t (**)(_QWORD *))(*a1 + 104))(a1);
  *v2 = a2;
  a1[6] = v2 + 1;
  return a2;
}

uint64_t std::wstreambuf::sputn(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
}

uint64_t std::wstreambuf::basic_streambuf(uint64_t a1)
{
  std::locale::locale((std::locale *)(a1 + 8));
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return a1;
}

{
  std::locale::locale((std::locale *)(a1 + 8));
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return a1;
}

uint64_t std::wstreambuf::basic_streambuf(uint64_t a1, uint64_t a2)
{
  std::locale::locale((std::locale *)(a1 + 8), (const std::locale *)(a2 + 8));
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  return a1;
}

{
  std::locale::locale((std::locale *)(a1 + 8), (const std::locale *)(a2 + 8));
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  return a1;
}

uint64_t std::wstreambuf::operator=(uint64_t a1, uint64_t a2)
{
  std::locale::operator=((std::locale *)(a1 + 8), (const std::locale *)(a2 + 8));
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  return a1;
}

void std::wstreambuf::swap(const std::locale *a1, std::locale *a2)
{
  std::locale *v4;
  std::locale *v5;
  std::locale::__imp *locale;
  std::locale::__imp *v7;
  std::locale::__imp *v8;
  std::locale::__imp *v9;
  std::locale::__imp *v10;
  std::locale::__imp *v11;
  std::locale v12;

  v4 = (std::locale *)&a1[1];
  v5 = a2 + 1;
  std::locale::locale(&v12, a1 + 1);
  std::locale::operator=(v4, v5);
  std::locale::operator=(v5, &v12);
  std::locale::~locale(&v12);
  locale = a1[2].__locale_;
  a1[2].__locale_ = a2[2].__locale_;
  a2[2].__locale_ = locale;
  v7 = a1[3].__locale_;
  a1[3].__locale_ = a2[3].__locale_;
  a2[3].__locale_ = v7;
  v8 = a1[4].__locale_;
  a1[4].__locale_ = a2[4].__locale_;
  a2[4].__locale_ = v8;
  v9 = a1[5].__locale_;
  a1[5].__locale_ = a2[5].__locale_;
  a2[5].__locale_ = v9;
  v10 = a1[6].__locale_;
  a1[6].__locale_ = a2[6].__locale_;
  a2[6].__locale_ = v10;
  v11 = a1[7].__locale_;
  a1[7].__locale_ = a2[7].__locale_;
  a2[7].__locale_ = v11;
}

uint64_t std::wstreambuf::gbump(uint64_t result, int a2)
{
  *(_QWORD *)(result + 24) += 4 * a2;
  return result;
}

_QWORD *std::wstreambuf::setg(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  result[2] = a2;
  result[3] = a3;
  result[4] = a4;
  return result;
}

uint64_t std::wstreambuf::pbump(uint64_t result, int a2)
{
  *(_QWORD *)(result + 48) += 4 * a2;
  return result;
}

_QWORD *std::wstreambuf::setp(_QWORD *result, uint64_t a2, uint64_t a3)
{
  result[5] = a2;
  result[6] = a2;
  result[7] = a3;
  return result;
}

double std::wstreambuf::seekoff@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 128) = -1;
  return result;
}

double std::wstreambuf::seekpos@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 128) = -1;
  return result;
}

uint64_t std::wstreambuf::sync()
{
  return 0;
}

uint64_t std::wstreambuf::showmanyc()
{
  return 0;
}

uint64_t std::wstreambuf::xsgetn(_QWORD *a1, char *__dst, uint64_t a3)
{
  uint64_t i;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  if (a3 < 1)
    return 0;
  for (i = 0; i < a3; i += v10)
  {
    v7 = (char *)a1[3];
    v8 = a1[4];
    if ((unint64_t)v7 >= v8)
    {
      v11 = (*(uint64_t (**)(_QWORD *))(*a1 + 80))(a1);
      if (v11 == -1)
        return i;
      *(_DWORD *)__dst = v11;
      __dst += 4;
      v10 = 1;
    }
    else
    {
      if (a3 - i >= (uint64_t)(v8 - (_QWORD)v7) >> 2)
        v9 = (uint64_t)(v8 - (_QWORD)v7) >> 2;
      else
        v9 = a3 - i;
      if (v9 >= 0x7FFFFFFF)
        v10 = 0x7FFFFFFFLL;
      else
        v10 = v9;
      if (v10)
      {
        memmove(__dst, v7, 4 * v10);
        v7 = (char *)a1[3];
      }
      __dst += 4 * v10;
      a1[3] = &v7[4 * (int)v10];
    }
  }
  return i;
}

uint64_t std::wstreambuf::underflow()
{
  return 0xFFFFFFFFLL;
}

uint64_t std::wstreambuf::uflow(_QWORD *a1)
{
  uint64_t result;
  unsigned int *v3;

  result = (*(uint64_t (**)(_QWORD *))(*a1 + 72))(a1);
  if ((_DWORD)result != -1)
  {
    v3 = (unsigned int *)a1[3];
    result = *v3;
    a1[3] = v3 + 1;
  }
  return result;
}

uint64_t std::wstreambuf::pbackfail()
{
  return 0xFFFFFFFFLL;
}

uint64_t std::wstreambuf::xsputn(_QWORD *a1, char *__src, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a3 < 1)
    return 0;
  v6 = 0;
  do
  {
    v7 = (char *)a1[6];
    v8 = a1[7];
    if ((unint64_t)v7 >= v8)
    {
      if ((*(unsigned int (**)(_QWORD *, _QWORD))(*a1 + 104))(a1, *(unsigned int *)__src) == -1)
        return v6;
      __src += 4;
      ++v6;
    }
    else
    {
      v9 = v8 - (_QWORD)v7;
      if (a3 - v6 >= v9 >> 2)
        v10 = v9 >> 2;
      else
        v10 = a3 - v6;
      if (v10)
      {
        memmove(v7, __src, 4 * v10);
        v7 = (char *)a1[6];
      }
      a1[6] = &v7[4 * v10];
      __src += 4 * v10;
      v6 += v10;
    }
  }
  while (v6 < a3);
  return v6;
}

uint64_t std::wstreambuf::overflow()
{
  return 0xFFFFFFFFLL;
}

uint64_t *std::wistream::basic_istream(uint64_t *a1, uint64_t *a2, void *__sb)
{
  uint64_t v4;
  std::ios_base *v5;

  v4 = *a2;
  *a1 = *a2;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(v4 - 24)) = a2[1];
  a1[1] = 0;
  v5 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v5, __sb);
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  return a1;
}

uint64_t std::wistream::basic_istream(uint64_t a1, void *a2)
{
  *(_QWORD *)(a1 + 8) = 0;
  std::ios_base::init((std::ios_base *)(a1 + 16), a2);
  *(_QWORD *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 160) = -1;
  return a1;
}

void sub_191FD4770(_Unwind_Exception *a1)
{
  std::ios_base *v1;

  std::ios_base::~ios_base(v1);
  _Unwind_Resume(a1);
}

uint64_t std::wistream::~wistream(uint64_t a1)
{
  std::ios_base::~ios_base((std::ios_base *)(a1 + 16));
  return a1;
}

void `virtual thunk to'std::wistream::~wistream(_QWORD *a1)
{
  std::ios_base::~ios_base((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 16));
}

{
  std::ios_base::~ios_base((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 16));
  JUMPOUT(0x194021E38);
}

void std::wistream::~wistream(uint64_t a1)
{
  std::ios_base::~ios_base((std::ios_base *)(a1 + 16));
  JUMPOUT(0x194021E38);
}

void std::wistream::swap(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::ios_base *v5;
  std::ios_base *v6;
  std::ios_base_vtbl *v7;

  v3 = *a1;
  v2 = a1[1];
  v4 = *a2;
  a1[1] = a2[1];
  a2[1] = v2;
  v5 = (std::ios_base *)((char *)a1 + *(_QWORD *)(v3 - 24));
  v6 = (std::ios_base *)((char *)a2 + *(_QWORD *)(v4 - 24));
  std::ios_base::swap(v5, v6);
  v7 = v5[1].__vftable;
  v5[1].__vftable = v6[1].__vftable;
  v6[1].__vftable = v7;
  LODWORD(v7) = v5[1].__fmtflags_;
  v5[1].__fmtflags_ = v6[1].__fmtflags_;
  v6[1].__fmtflags_ = v7;
}

BOOL *std::wistream::sentry::sentry(BOOL *a1, uint64_t *a2, char a3)
{
  uint64_t v4;
  std::ios_base *v5;
  std::ios_base::iostate rdstate;
  std::ios_base_vtbl *v9;
  const std::ios_base *v10;
  const std::locale::facet *v11;
  _QWORD *v12;
  _DWORD *v13;
  int v14;
  unsigned int *v15;
  uint64_t v16;
  char v17;
  int *v18;
  int *v19;
  int v21;
  std::locale v22;

  *a1 = 0;
  v4 = *a2;
  v5 = (std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24));
  rdstate = v5->__rdstate_;
  if (rdstate)
  {
    std::ios_base::clear(v5, rdstate | 4);
  }
  else
  {
    v9 = v5[1].__vftable;
    if (v9)
    {
      std::wostream::flush(v9, (uint64_t)a2);
      v4 = *a2;
    }
    if ((a3 & 1) == 0)
    {
      v10 = (const std::ios_base *)((char *)a2 + *(_QWORD *)(v4 - 24));
      if ((v10->__fmtflags_ & 0x1000) != 0)
      {
        std::ios_base::getloc(v10);
        v11 = std::locale::use_facet(&v22, &std::ctype<wchar_t>::id);
        std::locale::~locale(&v22);
        v12 = *(_QWORD **)((char *)a2 + *(_QWORD *)(*a2 - 24) + 40);
        if (v12)
        {
          while (1)
          {
            v13 = (_DWORD *)v12[3];
            v14 = v13 == (_DWORD *)v12[4] ? (*(uint64_t (**)(_QWORD *))(*v12 + 72))(v12) : *v13;
            if (v14 == -1)
              break;
            v15 = (unsigned int *)v12[3];
            if (v15 == (unsigned int *)v12[4])
              v16 = (*(uint64_t (**)(_QWORD *))(*v12 + 72))(v12);
            else
              v16 = *v15;
            v17 = ((uint64_t (*)(const std::locale::facet *, uint64_t, uint64_t))v11->__vftable[1].~facet)(v11, 0x4000, v16);
            v18 = (int *)v12[3];
            v19 = (int *)v12[4];
            if ((v17 & 1) == 0)
            {
              if (v18 == v19)
                v21 = (*(uint64_t (**)(_QWORD *))(*v12 + 72))(v12);
              else
                v21 = *v18;
              v4 = *a2;
              if (v21 != -1)
                goto LABEL_21;
              goto LABEL_20;
            }
            if (v18 == v19)
              (*(void (**)(_QWORD *))(*v12 + 80))(v12);
            else
              v12[3] = v18 + 1;
          }
        }
        v4 = *a2;
LABEL_20:
        std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(v4 - 24)), *(_DWORD *)((char *)a2 + *(_QWORD *)(v4 - 24) + 32) | 6);
        v4 = *a2;
      }
    }
LABEL_21:
    *a1 = *(_DWORD *)((char *)a2 + *(_QWORD *)(v4 - 24) + 32) == 0;
  }
  return a1;
}

void sub_191FD4A54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

_QWORD *std::wostream::flush(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char v8[8];
  _QWORD *v9;

  v3 = *a1;
  v4 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if (*((_QWORD *)v4 + 5))
  {
    v8[0] = 0;
    v9 = a1;
    if (!*((_DWORD *)v4 + 8))
    {
      v5 = *((_QWORD *)v4 + 17);
      if (v5)
      {
        std::wostream::flush(v5, a2);
        v3 = *a1;
      }
      v8[0] = 1;
      v6 = *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24) + 40);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6) == -1)
        std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 1);
    }
    std::wostream::sentry::~sentry((uint64_t)v8);
  }
  return a1;
}

void sub_191FD4B0C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v1 + *(_QWORD *)(*v1 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x191FD4AF8);
}

void sub_191FD4B40(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

char *std::wistream::operator>>(char *a1, void (*a2)(char *))
{
  a2(&a1[*(_QWORD *)(*(_QWORD *)a1 - 24)]);
  return a1;
}

{
  a2(&a1[*(_QWORD *)(*(_QWORD *)a1 - 24)]);
  return a1;
}

uint64_t *std::wistream::operator>>(uint64_t *a1, _QWORD *a2)
{
  uint64_t *v4;
  _QWORD *v5;
  int *v6;
  int v7;
  _DWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  int v13;
  BOOL v15;

  a1[1] = 0;
  std::wistream::sentry::sentry(&v15, a1, 1);
  if (!v15)
    return a1;
  if (!a2)
  {
    v13 = 4;
    goto LABEL_22;
  }
  v4 = a1 + 5;
  while (1)
  {
    v5 = *(_QWORD **)((char *)v4 + *(_QWORD *)(*a1 - 24));
    v6 = (int *)v5[3];
    if (v6 == (int *)v5[4])
      v7 = (*(uint64_t (**)(_QWORD *))(*v5 + 72))(v5);
    else
      v7 = *v6;
    if (v7 == -1)
    {
      v12 = 2;
      goto LABEL_19;
    }
    v8 = (_DWORD *)a2[6];
    if (v8 != (_DWORD *)a2[7])
    {
      *v8 = v7;
      a2[6] = v8 + 1;
      goto LABEL_11;
    }
    if ((*(unsigned int (**)(_QWORD *))(*a2 + 104))(a2) == -1)
      break;
LABEL_11:
    v9 = a1[1];
    if (v9 != 0x7FFFFFFFFFFFFFFFLL)
      a1[1] = v9 + 1;
    v10 = *(_QWORD **)((char *)v4 + *(_QWORD *)(*a1 - 24));
    v11 = v10[3];
    if (v11 == v10[4])
      (*(void (**)(_QWORD *))(*v10 + 80))(v10);
    else
      v10[3] = v11 + 4;
  }
  v12 = 0;
LABEL_19:
  if (a1[1])
    v13 = v12;
  else
    v13 = v12 | 4;
LABEL_22:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v13);
  return a1;
}

void sub_191FD4D04(void *a1)
{
  _QWORD *v1;
  uint64_t v2;
  int v3;

  __cxa_begin_catch(a1);
  v2 = *v1;
  if (v1[1])
    v3 = 1;
  else
    v3 = 5;
  *(_DWORD *)((char *)v1 + *(_QWORD *)(v2 - 24) + 32) |= v3;
  if ((*((_BYTE *)v1 + *(_QWORD *)(v2 - 24) + 36) & 5) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x191FD4CD4);
  }
  __cxa_rethrow();
}

void sub_191FD4D50(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *std::__input_arithmetic[abi:ne180100]<BOOL,wchar_t,std::char_traits<wchar_t>>(uint64_t *a1, uint64_t a2)
{
  const std::locale::facet *v4;
  std::locale v6;
  BOOL v7;
  int v8;

  v8 = 0;
  std::wistream::sentry::sentry(&v7, a1, 0);
  if (v7)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
    v4 = std::locale::use_facet(&v6, &std::num_get<wchar_t,std::istreambuf_iterator<wchar_t>>::id);
    ((void (*)(const std::locale::facet *, _QWORD, _QWORD, char *, int *, uint64_t))v4->__vftable[1].~facet)(v4, *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40), 0, (char *)a1 + *(_QWORD *)(*a1 - 24), &v8, a2);
    std::locale::~locale(&v6);
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v8);
  }
  return a1;
}

void sub_191FD4E20(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11)
{
  _QWORD *v11;
  uint64_t v12;

  __cxa_begin_catch(a1);
  v12 = *v11;
  *(_DWORD *)((char *)v11 + *(_QWORD *)(*v11 - 24) + 32) |= a11 | 1;
  if ((*((_BYTE *)v11 + *(_QWORD *)(v12 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x191FD4DF0);
  }
  __cxa_rethrow();
}

void sub_191FD4E80(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *std::__input_arithmetic_with_numeric_limits[abi:ne180100]<short,wchar_t,std::char_traits<wchar_t>>(uint64_t *a1, __int16 *a2)
{
  const std::locale::facet *v4;
  __int16 v5;
  std::locale v7;
  uint64_t v8;
  BOOL v9;
  int v10;

  v10 = 0;
  std::wistream::sentry::sentry(&v9, a1, 0);
  if (v9)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
    v4 = std::locale::use_facet(&v7, &std::num_get<wchar_t,std::istreambuf_iterator<wchar_t>>::id);
    ((void (*)(const std::locale::facet *, _QWORD, _QWORD, char *, int *, uint64_t *))v4->__vftable[1].~facet_0)(v4, *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40), 0, (char *)a1 + *(_QWORD *)(*a1 - 24), &v10, &v8);
    std::locale::~locale(&v7);
    v5 = v8;
    if (v8 > -32769)
    {
      if (v8 >= 0x8000)
      {
        v10 |= 4u;
        v5 = 0x7FFF;
      }
    }
    else
    {
      v10 |= 4u;
      v5 = 0x8000;
    }
    *a2 = v5;
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v10);
  }
  return a1;
}

void sub_191FD4F90(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  __cxa_begin_catch(a1);
  v12 = *(_DWORD *)(v11 - 20) | 1;
  *(_DWORD *)(v11 - 20) = v12;
  v13 = *v10;
  *(_DWORD *)((char *)v10 + *(_QWORD *)(*v10 - 24) + 32) |= v12;
  if ((*((_BYTE *)v10 + *(_QWORD *)(v13 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x191FD4F60);
  }
  __cxa_rethrow();
}

void sub_191FD4FF0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *std::__input_arithmetic[abi:ne180100]<unsigned short,wchar_t,std::char_traits<wchar_t>>(uint64_t *a1, uint64_t a2)
{
  const std::locale::facet *v4;
  std::locale v6;
  BOOL v7;
  int v8;

  v8 = 0;
  std::wistream::sentry::sentry(&v7, a1, 0);
  if (v7)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
    v4 = std::locale::use_facet(&v6, &std::num_get<wchar_t,std::istreambuf_iterator<wchar_t>>::id);
    ((void (*)(const std::locale::facet *, _QWORD, _QWORD, char *, int *, uint64_t))v4->__vftable[2].~facet)(v4, *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40), 0, (char *)a1 + *(_QWORD *)(*a1 - 24), &v8, a2);
    std::locale::~locale(&v6);
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v8);
  }
  return a1;
}

void sub_191FD50C0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11)
{
  _QWORD *v11;
  uint64_t v12;

  __cxa_begin_catch(a1);
  v12 = *v11;
  *(_DWORD *)((char *)v11 + *(_QWORD *)(*v11 - 24) + 32) |= a11 | 1;
  if ((*((_BYTE *)v11 + *(_QWORD *)(v12 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x191FD5090);
  }
  __cxa_rethrow();
}

void sub_191FD5120(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *std::__input_arithmetic_with_numeric_limits[abi:ne180100]<int,wchar_t,std::char_traits<wchar_t>>(uint64_t *a1, unsigned int *a2)
{
  const std::locale::facet *v4;
  unsigned int v5;
  std::locale v7;
  uint64_t v8;
  BOOL v9;
  int v10;

  v10 = 0;
  std::wistream::sentry::sentry(&v9, a1, 0);
  if (v9)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
    v4 = std::locale::use_facet(&v7, &std::num_get<wchar_t,std::istreambuf_iterator<wchar_t>>::id);
    ((void (*)(const std::locale::facet *, _QWORD, _QWORD, char *, int *, uint64_t *))v4->__vftable[1].~facet_0)(v4, *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40), 0, (char *)a1 + *(_QWORD *)(*a1 - 24), &v10, &v8);
    std::locale::~locale(&v7);
    v5 = v8;
    if (v8 > (uint64_t)0xFFFFFFFF7FFFFFFFLL)
    {
      if (v8 >= 0x80000000)
      {
        v10 |= 4u;
        v5 = 0x7FFFFFFF;
      }
    }
    else
    {
      v10 |= 4u;
      v5 = 0x80000000;
    }
    *a2 = v5;
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v10);
  }
  return a1;
}

void sub_191FD5234(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  __cxa_begin_catch(a1);
  v12 = *(_DWORD *)(v11 - 20) | 1;
  *(_DWORD *)(v11 - 20) = v12;
  v13 = *v10;
  *(_DWORD *)((char *)v10 + *(_QWORD *)(*v10 - 24) + 32) |= v12;
  if ((*((_BYTE *)v10 + *(_QWORD *)(v13 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x191FD5204);
  }
  __cxa_rethrow();
}

void sub_191FD5294(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *std::__input_arithmetic[abi:ne180100]<unsigned int,wchar_t,std::char_traits<wchar_t>>(uint64_t *a1, uint64_t a2)
{
  const std::locale::facet *v4;
  std::locale v6;
  BOOL v7;
  int v8;

  v8 = 0;
  std::wistream::sentry::sentry(&v7, a1, 0);
  if (v7)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
    v4 = std::locale::use_facet(&v6, &std::num_get<wchar_t,std::istreambuf_iterator<wchar_t>>::id);
    ((void (*)(const std::locale::facet *, _QWORD, _QWORD, char *, int *, uint64_t))v4->__vftable[2].~facet_0)(v4, *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40), 0, (char *)a1 + *(_QWORD *)(*a1 - 24), &v8, a2);
    std::locale::~locale(&v6);
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v8);
  }
  return a1;
}

void sub_191FD5364(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11)
{
  _QWORD *v11;
  uint64_t v12;

  __cxa_begin_catch(a1);
  v12 = *v11;
  *(_DWORD *)((char *)v11 + *(_QWORD *)(*v11 - 24) + 32) |= a11 | 1;
  if ((*((_BYTE *)v11 + *(_QWORD *)(v12 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x191FD5334);
  }
  __cxa_rethrow();
}

void sub_191FD53C4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *std::__input_arithmetic[abi:ne180100]<long,wchar_t,std::char_traits<wchar_t>>(uint64_t *a1, uint64_t a2)
{
  const std::locale::facet *v4;
  std::locale v6;
  BOOL v7;
  int v8;

  v8 = 0;
  std::wistream::sentry::sentry(&v7, a1, 0);
  if (v7)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
    v4 = std::locale::use_facet(&v6, &std::num_get<wchar_t,std::istreambuf_iterator<wchar_t>>::id);
    ((void (*)(const std::locale::facet *, _QWORD, _QWORD, char *, int *, uint64_t))v4->__vftable[1].~facet_0)(v4, *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40), 0, (char *)a1 + *(_QWORD *)(*a1 - 24), &v8, a2);
    std::locale::~locale(&v6);
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v8);
  }
  return a1;
}

void sub_191FD5494(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11)
{
  _QWORD *v11;
  uint64_t v12;

  __cxa_begin_catch(a1);
  v12 = *v11;
  *(_DWORD *)((char *)v11 + *(_QWORD *)(*v11 - 24) + 32) |= a11 | 1;
  if ((*((_BYTE *)v11 + *(_QWORD *)(v12 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x191FD5464);
  }
  __cxa_rethrow();
}

void sub_191FD54F4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *std::__input_arithmetic[abi:ne180100]<unsigned long,wchar_t,std::char_traits<wchar_t>>(uint64_t *a1, uint64_t a2)
{
  const std::locale::facet *v4;
  std::locale v6;
  BOOL v7;
  int v8;

  v8 = 0;
  std::wistream::sentry::sentry(&v7, a1, 0);
  if (v7)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
    v4 = std::locale::use_facet(&v6, &std::num_get<wchar_t,std::istreambuf_iterator<wchar_t>>::id);
    ((void (*)(const std::locale::facet *, _QWORD, _QWORD, char *, int *, uint64_t))v4->__vftable[2].__on_zero_shared)(v4, *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40), 0, (char *)a1 + *(_QWORD *)(*a1 - 24), &v8, a2);
    std::locale::~locale(&v6);
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v8);
  }
  return a1;
}

void sub_191FD55C4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11)
{
  _QWORD *v11;
  uint64_t v12;

  __cxa_begin_catch(a1);
  v12 = *v11;
  *(_DWORD *)((char *)v11 + *(_QWORD *)(*v11 - 24) + 32) |= a11 | 1;
  if ((*((_BYTE *)v11 + *(_QWORD *)(v12 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x191FD5594);
  }
  __cxa_rethrow();
}

void sub_191FD5624(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *std::__input_arithmetic[abi:ne180100]<long long,wchar_t,std::char_traits<wchar_t>>(uint64_t *a1, uint64_t a2)
{
  const std::locale::facet *v4;
  std::locale v6;
  BOOL v7;
  int v8;

  v8 = 0;
  std::wistream::sentry::sentry(&v7, a1, 0);
  if (v7)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
    v4 = std::locale::use_facet(&v6, &std::num_get<wchar_t,std::istreambuf_iterator<wchar_t>>::id);
    ((void (*)(const std::locale::facet *, _QWORD, _QWORD, char *, int *, uint64_t))v4->__vftable[1].__on_zero_shared)(v4, *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40), 0, (char *)a1 + *(_QWORD *)(*a1 - 24), &v8, a2);
    std::locale::~locale(&v6);
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v8);
  }
  return a1;
}

void sub_191FD56F4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11)
{
  _QWORD *v11;
  uint64_t v12;

  __cxa_begin_catch(a1);
  v12 = *v11;
  *(_DWORD *)((char *)v11 + *(_QWORD *)(*v11 - 24) + 32) |= a11 | 1;
  if ((*((_BYTE *)v11 + *(_QWORD *)(v12 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x191FD56C4);
  }
  __cxa_rethrow();
}

void sub_191FD5754(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *std::__input_arithmetic[abi:ne180100]<unsigned long long,wchar_t,std::char_traits<wchar_t>>(uint64_t *a1, uint64_t a2)
{
  const std::locale::facet *v4;
  std::locale v6;
  BOOL v7;
  int v8;

  v8 = 0;
  std::wistream::sentry::sentry(&v7, a1, 0);
  if (v7)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
    v4 = std::locale::use_facet(&v6, &std::num_get<wchar_t,std::istreambuf_iterator<wchar_t>>::id);
    ((void (*)(const std::locale::facet *, _QWORD, _QWORD, char *, int *, uint64_t))v4->__vftable[3].~facet)(v4, *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40), 0, (char *)a1 + *(_QWORD *)(*a1 - 24), &v8, a2);
    std::locale::~locale(&v6);
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v8);
  }
  return a1;
}

void sub_191FD5824(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11)
{
  _QWORD *v11;
  uint64_t v12;

  __cxa_begin_catch(a1);
  v12 = *v11;
  *(_DWORD *)((char *)v11 + *(_QWORD *)(*v11 - 24) + 32) |= a11 | 1;
  if ((*((_BYTE *)v11 + *(_QWORD *)(v12 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x191FD57F4);
  }
  __cxa_rethrow();
}

void sub_191FD5884(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *std::__input_arithmetic[abi:ne180100]<float,wchar_t,std::char_traits<wchar_t>>(uint64_t *a1, uint64_t a2)
{
  const std::locale::facet *v4;
  std::locale v6;
  BOOL v7;
  int v8;

  v8 = 0;
  std::wistream::sentry::sentry(&v7, a1, 0);
  if (v7)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
    v4 = std::locale::use_facet(&v6, &std::num_get<wchar_t,std::istreambuf_iterator<wchar_t>>::id);
    ((void (*)(const std::locale::facet *, _QWORD, _QWORD, char *, int *, uint64_t))v4->__vftable[3].~facet_0)(v4, *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40), 0, (char *)a1 + *(_QWORD *)(*a1 - 24), &v8, a2);
    std::locale::~locale(&v6);
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v8);
  }
  return a1;
}

void sub_191FD5954(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11)
{
  _QWORD *v11;
  uint64_t v12;

  __cxa_begin_catch(a1);
  v12 = *v11;
  *(_DWORD *)((char *)v11 + *(_QWORD *)(*v11 - 24) + 32) |= a11 | 1;
  if ((*((_BYTE *)v11 + *(_QWORD *)(v12 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x191FD5924);
  }
  __cxa_rethrow();
}

void sub_191FD59B4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *std::__input_arithmetic[abi:ne180100]<double,wchar_t,std::char_traits<wchar_t>>(uint64_t *a1, uint64_t a2)
{
  const std::locale::facet *v4;
  std::locale v6;
  BOOL v7;
  int v8;

  v8 = 0;
  std::wistream::sentry::sentry(&v7, a1, 0);
  if (v7)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
    v4 = std::locale::use_facet(&v6, &std::num_get<wchar_t,std::istreambuf_iterator<wchar_t>>::id);
    ((void (*)(const std::locale::facet *, _QWORD, _QWORD, char *, int *, uint64_t))v4->__vftable[3].__on_zero_shared)(v4, *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40), 0, (char *)a1 + *(_QWORD *)(*a1 - 24), &v8, a2);
    std::locale::~locale(&v6);
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v8);
  }
  return a1;
}

void sub_191FD5A84(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11)
{
  _QWORD *v11;
  uint64_t v12;

  __cxa_begin_catch(a1);
  v12 = *v11;
  *(_DWORD *)((char *)v11 + *(_QWORD *)(*v11 - 24) + 32) |= a11 | 1;
  if ((*((_BYTE *)v11 + *(_QWORD *)(v12 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x191FD5A54);
  }
  __cxa_rethrow();
}

void sub_191FD5AE4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *std::__input_arithmetic[abi:ne180100]<long double,wchar_t,std::char_traits<wchar_t>>(uint64_t *a1, uint64_t a2)
{
  const std::locale::facet *v4;
  std::locale v6;
  BOOL v7;
  int v8;

  v8 = 0;
  std::wistream::sentry::sentry(&v7, a1, 0);
  if (v7)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
    v4 = std::locale::use_facet(&v6, &std::num_get<wchar_t,std::istreambuf_iterator<wchar_t>>::id);
    ((void (*)(const std::locale::facet *, _QWORD, _QWORD, char *, int *, uint64_t))v4->__vftable[4].~facet)(v4, *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40), 0, (char *)a1 + *(_QWORD *)(*a1 - 24), &v8, a2);
    std::locale::~locale(&v6);
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v8);
  }
  return a1;
}

void sub_191FD5BB4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11)
{
  _QWORD *v11;
  uint64_t v12;

  __cxa_begin_catch(a1);
  v12 = *v11;
  *(_DWORD *)((char *)v11 + *(_QWORD *)(*v11 - 24) + 32) |= a11 | 1;
  if ((*((_BYTE *)v11 + *(_QWORD *)(v12 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x191FD5B84);
  }
  __cxa_rethrow();
}

void sub_191FD5C14(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *std::__input_arithmetic[abi:ne180100]<void *,wchar_t,std::char_traits<wchar_t>>(uint64_t *a1, uint64_t a2)
{
  const std::locale::facet *v4;
  std::locale v6;
  BOOL v7;
  int v8;

  v8 = 0;
  std::wistream::sentry::sentry(&v7, a1, 0);
  if (v7)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
    v4 = std::locale::use_facet(&v6, &std::num_get<wchar_t,std::istreambuf_iterator<wchar_t>>::id);
    ((void (*)(const std::locale::facet *, _QWORD, _QWORD, char *, int *, uint64_t))v4->__vftable[4].~facet_0)(v4, *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40), 0, (char *)a1 + *(_QWORD *)(*a1 - 24), &v8, a2);
    std::locale::~locale(&v6);
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v8);
  }
  return a1;
}

void sub_191FD5CE4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11)
{
  _QWORD *v11;
  uint64_t v12;

  __cxa_begin_catch(a1);
  v12 = *v11;
  *(_DWORD *)((char *)v11 + *(_QWORD *)(*v11 - 24) + 32) |= a11 | 1;
  if ((*((_BYTE *)v11 + *(_QWORD *)(v12 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x191FD5CB4);
  }
  __cxa_rethrow();
}

void sub_191FD5D44(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::wistream::get(uint64_t *a1)
{
  _QWORD *v2;
  unsigned int *v3;
  uint64_t v4;
  int v5;
  BOOL v7;

  a1[1] = 0;
  std::wistream::sentry::sentry(&v7, a1, 1);
  if (!v7)
    return 0xFFFFFFFFLL;
  v2 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
  v3 = (unsigned int *)v2[3];
  if (v3 == (unsigned int *)v2[4])
  {
    v4 = (*(uint64_t (**)(_QWORD *))(*v2 + 80))(v2);
  }
  else
  {
    v4 = *v3;
    v2[3] = v3 + 1;
  }
  if ((_DWORD)v4 == -1)
  {
    v5 = 6;
  }
  else
  {
    v5 = 0;
    a1[1] = 1;
  }
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v5);
  return v4;
}

void sub_191FD5E10(void *a1)
{
  _QWORD *v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  v2 = *v1;
  *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v1 + *(_QWORD *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x191FD5DE4);
  }
  __cxa_rethrow();
}

void sub_191FD5E54(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *std::wistream::get(uint64_t *a1, _DWORD *a2)
{
  int v4;

  v4 = std::wistream::get(a1);
  if (v4 != -1)
    *a2 = v4;
  return a1;
}

uint64_t *std::wistream::get(uint64_t *a1, _DWORD *a2, uint64_t a3)
{
  const std::locale::facet *v6;
  int v7;
  std::locale v9;

  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
  v6 = std::locale::use_facet(&v9, &std::ctype<wchar_t>::id);
  v7 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v6->__vftable[3].__on_zero_shared)(v6, 10);
  std::locale::~locale(&v9);
  return std::wistream::get(a1, a2, a3, v7);
}

void sub_191FD5F24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t *std::wistream::get(uint64_t *a1, _DWORD *a2, uint64_t a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  int *v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  int v18;
  BOOL v20;

  a1[1] = 0;
  std::wistream::sentry::sentry(&v20, a1, 1);
  if (v20)
  {
    v8 = a3 - 1;
    if (a3 < 1)
    {
      v18 = 4;
    }
    else
    {
      v9 = a1[1];
      if (v9 >= v8)
      {
LABEL_16:
        v17 = 0;
      }
      else
      {
        v10 = a1 + 5;
        while (1)
        {
          v11 = *(_QWORD **)((char *)v10 + *(_QWORD *)(*a1 - 24));
          v12 = (int *)v11[3];
          if (v12 == (int *)v11[4])
            v13 = (*(uint64_t (**)(_QWORD *))(*v11 + 72))(v11);
          else
            v13 = *v12;
          if (v13 == -1)
          {
            v9 = a1[1];
            v17 = 2;
            goto LABEL_20;
          }
          v14 = a1[1];
          if (v13 == a4)
            break;
          *a2++ = v13;
          v9 = 0x7FFFFFFFFFFFFFFFLL;
          if (v14 != 0x7FFFFFFFFFFFFFFFLL)
          {
            v9 = v14 + 1;
            a1[1] = v14 + 1;
          }
          v15 = *(_QWORD **)((char *)v10 + *(_QWORD *)(*a1 - 24));
          v16 = v15[3];
          if (v16 == v15[4])
          {
            (*(void (**)(_QWORD *))(*v15 + 80))(v15);
            v9 = a1[1];
          }
          else
          {
            v15[3] = v16 + 4;
          }
          if (v9 >= v8)
            goto LABEL_16;
        }
        v17 = 0;
        v9 = a1[1];
      }
LABEL_20:
      if (v9)
        v18 = v17;
      else
        v18 = v17 | 4;
      *a2 = 0;
    }
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v18);
  }
  if (a3 >= 1)
    *a2 = 0;
  return a1;
}

void sub_191FD609C(void *a1)
{
  _DWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  __cxa_begin_catch(a1);
  v3 = *v2;
  *(_DWORD *)((char *)v2 + *(_QWORD *)(*v2 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v2 + *(_QWORD *)(v3 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x191FD6058);
  }
  *v1 = 0;
  __cxa_rethrow();
}

void sub_191FD60E4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *std::wistream::get(uint64_t *a1, _QWORD *a2)
{
  const std::locale::facet *v4;
  int v5;
  std::locale v7;

  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
  v4 = std::locale::use_facet(&v7, &std::ctype<wchar_t>::id);
  v5 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v4->__vftable[3].__on_zero_shared)(v4, 10);
  std::locale::~locale(&v7);
  return std::wistream::get(a1, a2, v5);
}

void sub_191FD6178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t *std::wistream::get(uint64_t *a1, _QWORD *a2, int a3)
{
  uint64_t *v6;
  _QWORD *v7;
  _DWORD *v8;
  int v9;
  _DWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  BOOL v16;

  a1[1] = 0;
  std::wistream::sentry::sentry(&v16, a1, 1);
  if (v16)
  {
    v6 = a1 + 5;
    while (1)
    {
      v7 = *(_QWORD **)((char *)v6 + *(_QWORD *)(*a1 - 24));
      v8 = (_DWORD *)v7[3];
      v9 = v8 == (_DWORD *)v7[4] ? (*(uint64_t (**)(_QWORD *))(*v7 + 72))(v7) : *v8;
      if (v9 == -1)
        break;
      if (v9 == a3)
        goto LABEL_16;
      v10 = (_DWORD *)a2[6];
      if (v10 == (_DWORD *)a2[7])
      {
        if ((*(unsigned int (**)(_QWORD *))(*a2 + 104))(a2) == -1)
        {
LABEL_16:
          v14 = 0;
          goto LABEL_18;
        }
      }
      else
      {
        *v10 = v9;
        a2[6] = v10 + 1;
      }
      v11 = a1[1];
      if (v11 != 0x7FFFFFFFFFFFFFFFLL)
        a1[1] = v11 + 1;
      v12 = *(_QWORD **)((char *)v6 + *(_QWORD *)(*a1 - 24));
      v13 = v12[3];
      if (v13 == v12[4])
        (*(void (**)(_QWORD *))(*v12 + 80))(v12);
      else
        v12[3] = v13 + 4;
    }
    v14 = 2;
LABEL_18:
    if (!a1[1])
      v14 |= 4u;
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v14);
  }
  return a1;
}

void sub_191FD62D8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x191FD6298);
}

uint64_t *std::wistream::getline(uint64_t *a1, _DWORD *a2, uint64_t a3)
{
  const std::locale::facet *v6;
  int v7;
  std::locale v9;

  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
  v6 = std::locale::use_facet(&v9, &std::ctype<wchar_t>::id);
  v7 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v6->__vftable[3].__on_zero_shared)(v6, 10);
  std::locale::~locale(&v9);
  return std::wistream::getline(a1, a2, a3, v7);
}

void sub_191FD6374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t *std::wistream::getline(uint64_t *a1, _DWORD *a2, uint64_t a3, int a4)
{
  int v8;
  uint64_t *v9;
  _QWORD *v10;
  int *v11;
  int v12;
  uint64_t v13;
  _DWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v21;

  a1[1] = 0;
  std::wistream::sentry::sentry(&v21, a1, 1);
  v8 = v21;
  if (!v21)
    goto LABEL_20;
  v9 = a1 + 5;
  while (1)
  {
    v10 = *(_QWORD **)((char *)v9 + *(_QWORD *)(*a1 - 24));
    v11 = (int *)v10[3];
    if (v11 == (int *)v10[4])
      v12 = (*(uint64_t (**)(_QWORD *))(*v10 + 72))(v10);
    else
      v12 = *v11;
    if (v12 == -1)
    {
      v8 = 2;
      goto LABEL_20;
    }
    if (v12 == a4)
      break;
    v13 = a1[1];
    if (v13 >= a3 - 1)
    {
      v8 = 4;
      goto LABEL_20;
    }
    *a2 = v12;
    v14 = a2 + 1;
    v15 = *(_QWORD **)((char *)v9 + *(_QWORD *)(*a1 - 24));
    v16 = v15[3];
    if (v16 != v15[4])
    {
      v15[3] = v16 + 4;
      goto LABEL_12;
    }
    (*(void (**)(_QWORD *))(*v15 + 80))(v15);
    v13 = a1[1];
    ++a2;
    if (v13 != 0x7FFFFFFFFFFFFFFFLL)
    {
LABEL_12:
      a1[1] = v13 + 1;
      a2 = v14;
    }
  }
  v17 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
  v18 = v17[3];
  if (v18 == v17[4])
    (*(void (**)(_QWORD *))(*v17 + 80))(v17);
  else
    v17[3] = v18 + 4;
  v19 = a1[1];
  v8 = 0;
  if (v19 != 0x7FFFFFFFFFFFFFFFLL)
    a1[1] = v19 + 1;
LABEL_20:
  if (a3 >= 1)
    *a2 = 0;
  if (!a1[1])
    v8 |= 4u;
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v8);
  return a1;
}

void sub_191FD6534(void *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;

  __cxa_begin_catch(a1);
  v4 = *v1;
  *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v1 + *(_QWORD *)(v4 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x191FD64E4);
  }
  if (v2 >= 1)
    *v3 = 0;
  __cxa_rethrow();
}

void sub_191FD658C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *std::wistream::ignore(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t *v6;
  _QWORD *v7;
  int *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int *v13;
  int v14;
  uint64_t v15;
  int v16;
  BOOL v18;

  a1[1] = 0;
  std::wistream::sentry::sentry(&v18, a1, 1);
  if (v18)
  {
    v6 = a1 + 5;
    if (a2 == 0x7FFFFFFFFFFFFFFFLL)
    {
      while (1)
      {
        v7 = *(_QWORD **)((char *)v6 + *(_QWORD *)(*a1 - 24));
        v8 = (int *)v7[3];
        if (v8 == (int *)v7[4])
        {
          v9 = (*(uint64_t (**)(_QWORD))(*v7 + 80))(*(uint64_t *)((char *)v6 + *(_QWORD *)(*a1 - 24)));
        }
        else
        {
          v9 = *v8;
          v7[3] = v8 + 1;
        }
        if (v9 == -1)
          break;
        v10 = a1[1];
        if (v10 != 0x7FFFFFFFFFFFFFFFLL)
          a1[1] = v10 + 1;
        if (v9 == a3)
          goto LABEL_20;
      }
LABEL_21:
      v16 = 2;
    }
    else
    {
      v11 = a1[1];
      do
      {
        if (v11 >= a2)
          break;
        v12 = *(_QWORD **)((char *)v6 + *(_QWORD *)(*a1 - 24));
        v13 = (int *)v12[3];
        if (v13 == (int *)v12[4])
        {
          v14 = (*(uint64_t (**)(_QWORD))(*v12 + 80))(*(uint64_t *)((char *)v6 + *(_QWORD *)(*a1 - 24)));
        }
        else
        {
          v14 = *v13;
          v12[3] = v13 + 1;
        }
        if (v14 == -1)
          goto LABEL_21;
        v15 = a1[1];
        v11 = 0x7FFFFFFFFFFFFFFFLL;
        if (v15 != 0x7FFFFFFFFFFFFFFFLL)
        {
          v11 = v15 + 1;
          a1[1] = v15 + 1;
        }
      }
      while (v14 != a3);
LABEL_20:
      v16 = 0;
    }
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v16);
  }
  return a1;
}

void sub_191FD66F4(void *a1)
{
  _QWORD *v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  v2 = *v1;
  *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v1 + *(_QWORD *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x191FD66C0);
  }
  __cxa_rethrow();
}

void sub_191FD6738(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::wistream::peek(uint64_t *a1)
{
  _QWORD *v2;
  unsigned int *v3;
  uint64_t v4;
  BOOL v6;

  a1[1] = 0;
  std::wistream::sentry::sentry(&v6, a1, 1);
  if (!v6)
    return 0xFFFFFFFFLL;
  v2 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
  v3 = (unsigned int *)v2[3];
  if (v3 == (unsigned int *)v2[4])
    v4 = (*(uint64_t (**)(_QWORD *))(*v2 + 72))(v2);
  else
    v4 = *v3;
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | (2 * ((_DWORD)v4 == -1)));
  return v4;
}

void sub_191FD67F0(void *a1)
{
  _QWORD *v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  v2 = *v1;
  *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v1 + *(_QWORD *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x191FD67C4);
  }
  __cxa_rethrow();
}

void sub_191FD6834(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *std::wistream::read(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v10;

  a1[1] = 0;
  std::wistream::sentry::sentry(&v10, a1, 1);
  if (v10)
  {
    v6 = *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 64))(v6, a2, a3);
    a1[1] = v7;
    if (v7 == a3)
      v8 = 0;
    else
      v8 = 6;
  }
  else
  {
    v8 = 4;
  }
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v8);
  return a1;
}

void sub_191FD68F0(void *a1)
{
  _QWORD *v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  v2 = *v1;
  *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v1 + *(_QWORD *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x191FD68C0);
  }
  __cxa_rethrow();
}

void sub_191FD6930(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::wistream::readsome(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v14;

  a1[1] = 0;
  std::wistream::sentry::sentry(&v14, a1, 1);
  if (v14)
  {
    v6 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v7 = v6[3];
    v8 = v6[4];
    if (v7 >= v8)
      v9 = (*(uint64_t (**)(_QWORD *))(*v6 + 56))(v6);
    else
      v9 = (uint64_t)(v8 - v7) >> 2;
    if (v9 == -1)
    {
      v10 = 2;
    }
    else if (v9)
    {
      if (v9 < a3)
        a3 = v9;
      v11 = *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
      v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 64))(v11, a2, a3);
      a1[1] = v12;
      if (v12 == a3)
        v10 = 0;
      else
        v10 = 6;
    }
    else
    {
      v10 = 0;
    }
  }
  else
  {
    v10 = 4;
  }
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v10);
  return a1[1];
}

void sub_191FD6A44(void *a1)
{
  _QWORD *v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  v2 = *v1;
  *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v1 + *(_QWORD *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x191FD6A14);
  }
  __cxa_rethrow();
}

void sub_191FD6A84(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *std::wistream::putback(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  std::ios_base::iostate v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v11;

  v4 = *a1;
  v5 = *(_DWORD *)((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 0xFFFFFFFD;
  a1[1] = 0;
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(v4 - 24)), v5);
  std::wistream::sentry::sentry(&v11, a1, 1);
  if (v11)
  {
    v6 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    if (!v6
      || ((v7 = v6[3], v6[2] == v7) || (v9 = *(_DWORD *)(v7 - 4), v8 = v7 - 4, v9 != (_DWORD)a2)
        ? (LODWORD(a2) = (*(uint64_t (**)(_QWORD *, uint64_t))(*v6 + 88))(v6, a2))
        : (v6[3] = v8),
          (_DWORD)a2 == -1))
    {
      v5 |= 1u;
    }
  }
  else
  {
    v5 |= 4u;
  }
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v5);
  return a1;
}

void sub_191FD6B80(void *a1)
{
  _QWORD *v1;
  int v2;
  uint64_t v3;

  __cxa_begin_catch(a1);
  v3 = *v1;
  *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 32) |= v2 | 1;
  if ((*((_BYTE *)v1 + *(_QWORD *)(v3 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x191FD6B50);
  }
  __cxa_rethrow();
}

void sub_191FD6BC0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *std::wistream::unget(uint64_t *a1)
{
  uint64_t v2;
  std::ios_base::iostate v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  BOOL v8;

  v2 = *a1;
  v3 = *(_DWORD *)((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 0xFFFFFFFD;
  a1[1] = 0;
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(v2 - 24)), v3);
  std::wistream::sentry::sentry(&v8, a1, 1);
  if (v8)
  {
    v4 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    if (!v4
      || ((v5 = v4[3], v4[2] == v5)
        ? (v6 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v4 + 88))(v4, 0xFFFFFFFFLL))
        : (v6 = *(_DWORD *)(v5 - 4), v4[3] = v5 - 4),
          v6 == -1))
    {
      v3 |= 1u;
    }
  }
  else
  {
    v3 |= 4u;
  }
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v3);
  return a1;
}

void sub_191FD6CA8(void *a1)
{
  _QWORD *v1;
  int v2;
  uint64_t v3;

  __cxa_begin_catch(a1);
  v3 = *v1;
  *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 32) |= v2 | 1;
  if ((*((_BYTE *)v1 + *(_QWORD *)(v3 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x191FD6C7CLL);
  }
  __cxa_rethrow();
}

void sub_191FD6CE8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::wistream::sync(uint64_t *a1)
{
  uint64_t v2;
  uint64_t result;
  BOOL v4;

  std::wistream::sentry::sentry(&v4, a1, 1);
  if (!v4)
    return 0;
  v2 = *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
  if (v2)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
    if ((_DWORD)result == -1)
      return result;
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32));
    return 0;
  }
  return 0xFFFFFFFFLL;
}

void sub_191FD6D88(void *a1)
{
  _QWORD *v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  v2 = *v1;
  *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v1 + *(_QWORD *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x191FD6D54);
  }
  __cxa_rethrow();
}

void sub_191FD6DC8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::wistream::tellg(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  BOOL v9;
  _OWORD v10[8];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_QWORD *)(a2 + 128) = -1;
  std::wistream::sentry::sentry(&v9, a1, 1);
  if (v9)
  {
    v4 = *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v4 + 32))(v10, v4, 0, 1, 8);
    *(_QWORD *)(a2 + 128) = v11;
    v5 = v10[7];
    *(_OWORD *)(a2 + 96) = v10[6];
    *(_OWORD *)(a2 + 112) = v5;
    v6 = v10[3];
    *(_OWORD *)(a2 + 32) = v10[2];
    *(_OWORD *)(a2 + 48) = v6;
    v7 = v10[5];
    *(_OWORD *)(a2 + 64) = v10[4];
    *(_OWORD *)(a2 + 80) = v7;
    v8 = v10[1];
    *(_OWORD *)a2 = v10[0];
    *(_OWORD *)(a2 + 16) = v8;
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32));
  }
}

void sub_191FD6ED8(_Unwind_Exception *exception_object, int a2)
{
  _QWORD *v2;
  uint64_t v3;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    v3 = *v2;
    *(_DWORD *)((char *)v2 + *(_QWORD *)(*v2 - 24) + 32) |= 1u;
    if ((*((_BYTE *)v2 + *(_QWORD *)(v3 - 24) + 36) & 1) == 0)
    {
      __cxa_end_catch();
      JUMPOUT(0x191FD6E94);
    }
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::wistream::seekg(uint64_t *a1, __int128 *a2)
{
  std::ios_base *v4;
  std::ios_base::iostate v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  BOOL v13;
  _QWORD v14[17];
  _OWORD v15[8];
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  v5 = v4->__rdstate_ & 0xFFFFFFFD;
  std::ios_base::clear(v4, v5);
  std::wistream::sentry::sentry(&v13, a1, 1);
  if (v13)
  {
    v6 = *(_QWORD *)(*a1 - 24);
    v7 = *a2;
    v15[1] = a2[1];
    v15[0] = v7;
    v8 = a2[5];
    v15[4] = a2[4];
    v9 = a2[2];
    v15[3] = a2[3];
    v15[2] = v9;
    v10 = a2[6];
    v15[7] = a2[7];
    v15[6] = v10;
    v11 = *(uint64_t *)((char *)a1 + v6 + 40);
    v16 = *((_QWORD *)a2 + 16);
    v15[5] = v8;
    (*(void (**)(_QWORD *__return_ptr, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)v11 + 40))(v14, v11, v15, 8);
    if (v14[16] == -1)
      v5 |= 4u;
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v5);
  }
  return a1;
}

void sub_191FD7074(_Unwind_Exception *exception_object, int a2)
{
  _QWORD *v2;
  int v3;
  uint64_t v4;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    v4 = *v2;
    *(_DWORD *)((char *)v2 + *(_QWORD *)(*v2 - 24) + 32) |= v3 | 1;
    if ((*((_BYTE *)v2 + *(_QWORD *)(v4 - 24) + 36) & 1) == 0)
    {
      __cxa_end_catch();
      JUMPOUT(0x191FD7024);
    }
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::wistream::seekg(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  std::ios_base *v6;
  std::ios_base::iostate v7;
  uint64_t v8;
  BOOL v10;
  _QWORD v11[18];

  v11[17] = *MEMORY[0x1E0C80C00];
  v6 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  v7 = v6->__rdstate_ & 0xFFFFFFFD;
  std::ios_base::clear(v6, v7);
  std::wistream::sentry::sentry(&v10, a1, 1);
  if (v10)
  {
    v8 = *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v11, v8, a2, a3, 8);
    if (v11[16] == -1)
      v7 |= 4u;
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v7);
  }
  return a1;
}

void sub_191FD71D8(_Unwind_Exception *exception_object, int a2)
{
  _QWORD *v2;
  int v3;
  uint64_t v4;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    v4 = *v2;
    *(_DWORD *)((char *)v2 + *(_QWORD *)(*v2 - 24) + 32) |= v3 | 1;
    if ((*((_BYTE *)v2 + *(_QWORD *)(v4 - 24) + 36) & 1) == 0)
    {
      __cxa_end_catch();
      JUMPOUT(0x191FD718CLL);
    }
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::wostream::basic_ostream(uint64_t *a1, uint64_t *a2, void *__sb)
{
  uint64_t v4;
  std::ios_base *v5;

  v4 = *a2;
  *a1 = *a2;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(v4 - 24)) = a2[1];
  v5 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v5, __sb);
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  return a1;
}

uint64_t std::wostream::basic_ostream(uint64_t a1, void *a2)
{
  std::ios_base::init((std::ios_base *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 152) = -1;
  return a1;
}

void sub_191FD72F4(_Unwind_Exception *a1)
{
  std::ios_base *v1;

  std::ios_base::~ios_base(v1);
  _Unwind_Resume(a1);
}

uint64_t std::wostream::~wostream(uint64_t a1)
{
  std::ios_base::~ios_base((std::ios_base *)(a1 + 8));
  return a1;
}

void `virtual thunk to'std::wostream::~wostream(_QWORD *a1)
{
  std::ios_base::~ios_base((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8));
}

{
  std::ios_base::~ios_base((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8));
  JUMPOUT(0x194021E38);
}

void std::wostream::~wostream(uint64_t a1)
{
  std::ios_base::~ios_base((std::ios_base *)(a1 + 8));
  JUMPOUT(0x194021E38);
}

void std::wostream::swap(_QWORD *a1, _QWORD *a2)
{
  std::ios_base *v2;
  std::ios_base *v3;
  std::ios_base_vtbl *v4;

  v2 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  v3 = (std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24));
  std::ios_base::swap(v2, v3);
  v4 = v2[1].__vftable;
  v2[1].__vftable = v3[1].__vftable;
  v3[1].__vftable = v4;
  LODWORD(v4) = v2[1].__fmtflags_;
  v2[1].__fmtflags_ = v3[1].__fmtflags_;
  v3[1].__fmtflags_ = v4;
}

uint64_t std::wostream::sentry::sentry(uint64_t a1, _QWORD *a2)
{
  char *v3;
  _QWORD *v4;

  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  v3 = (char *)a2 + *(_QWORD *)(*a2 - 24);
  if (!*((_DWORD *)v3 + 8))
  {
    v4 = (_QWORD *)*((_QWORD *)v3 + 17);
    if (v4)
      std::wostream::flush(v4, (uint64_t)a2);
    *(_BYTE *)a1 = 1;
  }
  return a1;
}

uint64_t std::wostream::sentry::~sentry(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;

  v2 = *(_QWORD *)(a1 + 8) + *(_QWORD *)(**(_QWORD **)(a1 + 8) - 24);
  if (*(_QWORD *)(v2 + 40))
  {
    if (!*(_DWORD *)(v2 + 32) && (*(_BYTE *)(v2 + 9) & 0x20) != 0 && !std::uncaught_exception())
    {
      v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + *(_QWORD *)(**(_QWORD **)(a1 + 8) - 24) + 40);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3) == -1)
      {
        v4 = (std::ios_base *)(*(_QWORD *)(a1 + 8) + *(_QWORD *)(**(_QWORD **)(a1 + 8) - 24));
        std::ios_base::clear(v4, v4->__rdstate_ | 1);
      }
    }
  }
  return a1;
}

void sub_191FD7504(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x191FD74F4);
}

char *std::wostream::operator<<(char *a1, void (*a2)(char *))
{
  a2(&a1[*(_QWORD *)(*(_QWORD *)a1 - 24)]);
  return a1;
}

{
  a2(&a1[*(_QWORD *)(*(_QWORD *)a1 - 24)]);
  return a1;
}

_QWORD *std::wostream::operator<<(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  _QWORD *v6;
  const std::locale::facet *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  const std::locale::facet *v11;
  char v13[8];
  _QWORD *v14;
  std::locale v15;

  v13[0] = 0;
  v14 = a1;
  v3 = *a1;
  v4 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if (!*((_DWORD *)v4 + 8))
  {
    v6 = (_QWORD *)*((_QWORD *)v4 + 17);
    if (v6)
    {
      std::wostream::flush(v6, a2);
      v3 = *a1;
    }
    v13[0] = 1;
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(v3 - 24)));
    v7 = std::locale::use_facet(&v15, &std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t>>::id);
    std::locale::~locale(&v15);
    v8 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v9 = *((_QWORD *)v8 + 5);
    v10 = *((unsigned int *)v8 + 36);
    if ((_DWORD)v10 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v11 = std::locale::use_facet(&v15, &std::ctype<wchar_t>::id);
      v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[3].__on_zero_shared)(v11, 32);
      std::locale::~locale(&v15);
      *((_DWORD *)v8 + 36) = v10;
    }
    if (!((uint64_t (*)(const std::locale::facet *, uint64_t, char *, uint64_t, uint64_t))v7->__vftable[1].~facet)(v7, v9, v8, v10, a2))std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  std::wostream::sentry::~sentry((uint64_t)v13);
  return a1;
}

{
  uint64_t v3;
  char *v4;
  int v5;
  _QWORD *v6;
  const std::ios_base *v7;
  std::ios_base::fmtflags fmtflags;
  const std::locale::facet *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  const std::locale::facet *v13;
  uint64_t v15;
  char v17[8];
  _QWORD *v18;
  std::locale v19;

  v17[0] = 0;
  v18 = a1;
  v3 = *a1;
  v4 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if (!*((_DWORD *)v4 + 8))
  {
    v5 = a2;
    v6 = (_QWORD *)*((_QWORD *)v4 + 17);
    if (v6)
    {
      std::wostream::flush(v6, a2);
      v3 = *a1;
    }
    v17[0] = 1;
    v7 = (const std::ios_base *)((char *)a1 + *(_QWORD *)(v3 - 24));
    fmtflags = v7->__fmtflags_;
    std::ios_base::getloc(v7);
    v9 = std::locale::use_facet(&v19, &std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t>>::id);
    std::locale::~locale(&v19);
    v10 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v11 = *((_QWORD *)v10 + 5);
    v12 = *((unsigned int *)v10 + 36);
    if ((_DWORD)v12 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v13 = std::locale::use_facet(&v19, &std::ctype<wchar_t>::id);
      v12 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v13->__vftable[3].__on_zero_shared)(v13, 32);
      std::locale::~locale(&v19);
      *((_DWORD *)v10 + 36) = v12;
    }
    if ((fmtflags & 0x4A) == 8 || (fmtflags & 0x4A) == 64)
      v15 = (unsigned __int16)v5;
    else
      v15 = v5;
    if (!((uint64_t (*)(const std::locale::facet *, uint64_t, char *, uint64_t, uint64_t))v9->__vftable[1].~facet_0)(v9, v11, v10, v12, v15))std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  std::wostream::sentry::~sentry((uint64_t)v17);
  return a1;
}

{
  uint64_t v3;
  char *v4;
  unsigned int v5;
  _QWORD *v6;
  const std::locale::facet *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  const std::locale::facet *v11;
  char v13[8];
  _QWORD *v14;
  std::locale v15;

  v13[0] = 0;
  v14 = a1;
  v3 = *a1;
  v4 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if (!*((_DWORD *)v4 + 8))
  {
    v5 = a2;
    v6 = (_QWORD *)*((_QWORD *)v4 + 17);
    if (v6)
    {
      std::wostream::flush(v6, a2);
      v3 = *a1;
    }
    v13[0] = 1;
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(v3 - 24)));
    v7 = std::locale::use_facet(&v15, &std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t>>::id);
    std::locale::~locale(&v15);
    v8 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v9 = *((_QWORD *)v8 + 5);
    v10 = *((unsigned int *)v8 + 36);
    if ((_DWORD)v10 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v11 = std::locale::use_facet(&v15, &std::ctype<wchar_t>::id);
      v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[3].__on_zero_shared)(v11, 32);
      std::locale::~locale(&v15);
      *((_DWORD *)v8 + 36) = v10;
    }
    if (!((uint64_t (*)(const std::locale::facet *, uint64_t, char *, uint64_t, _QWORD))v7->__vftable[2].~facet)(v7, v9, v8, v10, v5))std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  std::wostream::sentry::~sentry((uint64_t)v13);
  return a1;
}

{
  uint64_t v3;
  char *v4;
  unsigned int v5;
  _QWORD *v6;
  const std::ios_base *v7;
  std::ios_base::fmtflags fmtflags;
  const std::locale::facet *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  const std::locale::facet *v13;
  uint64_t v15;
  char v17[8];
  _QWORD *v18;
  std::locale v19;

  v17[0] = 0;
  v18 = a1;
  v3 = *a1;
  v4 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if (!*((_DWORD *)v4 + 8))
  {
    v5 = a2;
    v6 = (_QWORD *)*((_QWORD *)v4 + 17);
    if (v6)
    {
      std::wostream::flush(v6, a2);
      v3 = *a1;
    }
    v17[0] = 1;
    v7 = (const std::ios_base *)((char *)a1 + *(_QWORD *)(v3 - 24));
    fmtflags = v7->__fmtflags_;
    std::ios_base::getloc(v7);
    v9 = std::locale::use_facet(&v19, &std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t>>::id);
    std::locale::~locale(&v19);
    v10 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v11 = *((_QWORD *)v10 + 5);
    v12 = *((unsigned int *)v10 + 36);
    if ((_DWORD)v12 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v13 = std::locale::use_facet(&v19, &std::ctype<wchar_t>::id);
      v12 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v13->__vftable[3].__on_zero_shared)(v13, 32);
      std::locale::~locale(&v19);
      *((_DWORD *)v10 + 36) = v12;
    }
    if ((fmtflags & 0x4A) == 8 || (fmtflags & 0x4A) == 64)
      v15 = v5;
    else
      v15 = (int)v5;
    if (!((uint64_t (*)(const std::locale::facet *, uint64_t, char *, uint64_t, uint64_t))v9->__vftable[1].~facet_0)(v9, v11, v10, v12, v15))std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  std::wostream::sentry::~sentry((uint64_t)v17);
  return a1;
}

{
  uint64_t v3;
  char *v4;
  unsigned int v5;
  _QWORD *v6;
  const std::locale::facet *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  const std::locale::facet *v11;
  char v13[8];
  _QWORD *v14;
  std::locale v15;

  v13[0] = 0;
  v14 = a1;
  v3 = *a1;
  v4 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if (!*((_DWORD *)v4 + 8))
  {
    v5 = a2;
    v6 = (_QWORD *)*((_QWORD *)v4 + 17);
    if (v6)
    {
      std::wostream::flush(v6, a2);
      v3 = *a1;
    }
    v13[0] = 1;
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(v3 - 24)));
    v7 = std::locale::use_facet(&v15, &std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t>>::id);
    std::locale::~locale(&v15);
    v8 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v9 = *((_QWORD *)v8 + 5);
    v10 = *((unsigned int *)v8 + 36);
    if ((_DWORD)v10 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v11 = std::locale::use_facet(&v15, &std::ctype<wchar_t>::id);
      v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[3].__on_zero_shared)(v11, 32);
      std::locale::~locale(&v15);
      *((_DWORD *)v8 + 36) = v10;
    }
    if (!((uint64_t (*)(const std::locale::facet *, uint64_t, char *, uint64_t, _QWORD))v7->__vftable[2].~facet)(v7, v9, v8, v10, v5))std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  std::wostream::sentry::~sentry((uint64_t)v13);
  return a1;
}

{
  uint64_t v3;
  char *v4;
  _QWORD *v6;
  const std::locale::facet *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  const std::locale::facet *v11;
  char v13[8];
  _QWORD *v14;
  std::locale v15;

  v13[0] = 0;
  v14 = a1;
  v3 = *a1;
  v4 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if (!*((_DWORD *)v4 + 8))
  {
    v6 = (_QWORD *)*((_QWORD *)v4 + 17);
    if (v6)
    {
      std::wostream::flush(v6, a2);
      v3 = *a1;
    }
    v13[0] = 1;
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(v3 - 24)));
    v7 = std::locale::use_facet(&v15, &std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t>>::id);
    std::locale::~locale(&v15);
    v8 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v9 = *((_QWORD *)v8 + 5);
    v10 = *((unsigned int *)v8 + 36);
    if ((_DWORD)v10 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v11 = std::locale::use_facet(&v15, &std::ctype<wchar_t>::id);
      v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[3].__on_zero_shared)(v11, 32);
      std::locale::~locale(&v15);
      *((_DWORD *)v8 + 36) = v10;
    }
    if (!((uint64_t (*)(const std::locale::facet *, uint64_t, char *, uint64_t, uint64_t))v7->__vftable[1].~facet_0)(v7, v9, v8, v10, a2))std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  std::wostream::sentry::~sentry((uint64_t)v13);
  return a1;
}

{
  uint64_t v3;
  char *v4;
  _QWORD *v6;
  const std::locale::facet *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  const std::locale::facet *v11;
  char v13[8];
  _QWORD *v14;
  std::locale v15;

  v13[0] = 0;
  v14 = a1;
  v3 = *a1;
  v4 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if (!*((_DWORD *)v4 + 8))
  {
    v6 = (_QWORD *)*((_QWORD *)v4 + 17);
    if (v6)
    {
      std::wostream::flush(v6, a2);
      v3 = *a1;
    }
    v13[0] = 1;
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(v3 - 24)));
    v7 = std::locale::use_facet(&v15, &std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t>>::id);
    std::locale::~locale(&v15);
    v8 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v9 = *((_QWORD *)v8 + 5);
    v10 = *((unsigned int *)v8 + 36);
    if ((_DWORD)v10 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v11 = std::locale::use_facet(&v15, &std::ctype<wchar_t>::id);
      v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[3].__on_zero_shared)(v11, 32);
      std::locale::~locale(&v15);
      *((_DWORD *)v8 + 36) = v10;
    }
    if (!((uint64_t (*)(const std::locale::facet *, uint64_t, char *, uint64_t, uint64_t))v7->__vftable[2].~facet)(v7, v9, v8, v10, a2))std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  std::wostream::sentry::~sentry((uint64_t)v13);
  return a1;
}

{
  uint64_t v3;
  char *v4;
  _QWORD *v6;
  const std::locale::facet *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  const std::locale::facet *v11;
  char v13[8];
  _QWORD *v14;
  std::locale v15;

  v13[0] = 0;
  v14 = a1;
  v3 = *a1;
  v4 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if (!*((_DWORD *)v4 + 8))
  {
    v6 = (_QWORD *)*((_QWORD *)v4 + 17);
    if (v6)
    {
      std::wostream::flush(v6, a2);
      v3 = *a1;
    }
    v13[0] = 1;
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(v3 - 24)));
    v7 = std::locale::use_facet(&v15, &std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t>>::id);
    std::locale::~locale(&v15);
    v8 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v9 = *((_QWORD *)v8 + 5);
    v10 = *((unsigned int *)v8 + 36);
    if ((_DWORD)v10 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v11 = std::locale::use_facet(&v15, &std::ctype<wchar_t>::id);
      v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[3].__on_zero_shared)(v11, 32);
      std::locale::~locale(&v15);
      *((_DWORD *)v8 + 36) = v10;
    }
    if (!((uint64_t (*)(const std::locale::facet *, uint64_t, char *, uint64_t, uint64_t))v7->__vftable[1].__on_zero_shared)(v7, v9, v8, v10, a2))std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  std::wostream::sentry::~sentry((uint64_t)v13);
  return a1;
}

{
  uint64_t v3;
  char *v4;
  _QWORD *v6;
  const std::locale::facet *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  const std::locale::facet *v11;
  char v13[8];
  _QWORD *v14;
  std::locale v15;

  v13[0] = 0;
  v14 = a1;
  v3 = *a1;
  v4 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if (!*((_DWORD *)v4 + 8))
  {
    v6 = (_QWORD *)*((_QWORD *)v4 + 17);
    if (v6)
    {
      std::wostream::flush(v6, a2);
      v3 = *a1;
    }
    v13[0] = 1;
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(v3 - 24)));
    v7 = std::locale::use_facet(&v15, &std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t>>::id);
    std::locale::~locale(&v15);
    v8 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v9 = *((_QWORD *)v8 + 5);
    v10 = *((unsigned int *)v8 + 36);
    if ((_DWORD)v10 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v11 = std::locale::use_facet(&v15, &std::ctype<wchar_t>::id);
      v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[3].__on_zero_shared)(v11, 32);
      std::locale::~locale(&v15);
      *((_DWORD *)v8 + 36) = v10;
    }
    if (!((uint64_t (*)(const std::locale::facet *, uint64_t, char *, uint64_t, uint64_t))v7->__vftable[2].~facet_0)(v7, v9, v8, v10, a2))std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  std::wostream::sentry::~sentry((uint64_t)v13);
  return a1;
}

{
  uint64_t v3;
  char *v4;
  _QWORD *v6;
  const std::locale::facet *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  const std::locale::facet *v11;
  char v13[8];
  _QWORD *v14;
  std::locale v15;

  v13[0] = 0;
  v14 = a1;
  v3 = *a1;
  v4 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if (!*((_DWORD *)v4 + 8))
  {
    v6 = (_QWORD *)*((_QWORD *)v4 + 17);
    if (v6)
    {
      std::wostream::flush(v6, a2);
      v3 = *a1;
    }
    v13[0] = 1;
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(v3 - 24)));
    v7 = std::locale::use_facet(&v15, &std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t>>::id);
    std::locale::~locale(&v15);
    v8 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v9 = *((_QWORD *)v8 + 5);
    v10 = *((unsigned int *)v8 + 36);
    if ((_DWORD)v10 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v11 = std::locale::use_facet(&v15, &std::ctype<wchar_t>::id);
      v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[3].__on_zero_shared)(v11, 32);
      std::locale::~locale(&v15);
      *((_DWORD *)v8 + 36) = v10;
    }
    if (!((uint64_t (*)(const std::locale::facet *, uint64_t, char *, uint64_t, uint64_t))v7->__vftable[3].~facet_0)(v7, v9, v8, v10, a2))std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  std::wostream::sentry::~sentry((uint64_t)v13);
  return a1;
}

void sub_191FD76B8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  std::wostream::sentry::~sentry((uint64_t)&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x191FD769CLL);
}

void sub_191FD7708(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_191FD7880(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  std::wostream::sentry::~sentry((uint64_t)&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x191FD7860);
}

void sub_191FD78D0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_191FD7A20(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  std::wostream::sentry::~sentry((uint64_t)&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x191FD7A04);
}

void sub_191FD7A70(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_191FD7BE8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  std::wostream::sentry::~sentry((uint64_t)&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x191FD7BC8);
}

void sub_191FD7C38(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_191FD7D88(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  std::wostream::sentry::~sentry((uint64_t)&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x191FD7D6CLL);
}

void sub_191FD7DD8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_191FD7F28(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  std::wostream::sentry::~sentry((uint64_t)&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x191FD7F0CLL);
}

void sub_191FD7F78(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_191FD80C8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  std::wostream::sentry::~sentry((uint64_t)&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x191FD80ACLL);
}

void sub_191FD8118(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_191FD8268(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  std::wostream::sentry::~sentry((uint64_t)&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x191FD824CLL);
}

void sub_191FD82B8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_191FD8408(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  std::wostream::sentry::~sentry((uint64_t)&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x191FD83ECLL);
}

void sub_191FD8458(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *std::wostream::operator<<(_QWORD *a1, uint64_t a2, float a3)
{
  uint64_t v4;
  char *v5;
  _QWORD *v7;
  const std::locale::facet *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  const std::locale::facet *v12;
  char v14[8];
  _QWORD *v15;
  std::locale v16;

  v14[0] = 0;
  v15 = a1;
  v4 = *a1;
  v5 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if (!*((_DWORD *)v5 + 8))
  {
    v7 = (_QWORD *)*((_QWORD *)v5 + 17);
    if (v7)
    {
      std::wostream::flush(v7, a2);
      v4 = *a1;
    }
    v14[0] = 1;
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(v4 - 24)));
    v8 = std::locale::use_facet(&v16, &std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t>>::id);
    std::locale::~locale(&v16);
    v9 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v10 = *((_QWORD *)v9 + 5);
    v11 = *((unsigned int *)v9 + 36);
    if ((_DWORD)v11 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v12 = std::locale::use_facet(&v16, &std::ctype<wchar_t>::id);
      v11 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v12->__vftable[3].__on_zero_shared)(v12, 32);
      std::locale::~locale(&v16);
      *((_DWORD *)v9 + 36) = v11;
    }
    if (!((uint64_t (*)(const std::locale::facet *, uint64_t, char *, uint64_t, double))v8->__vftable[2].__on_zero_shared)(v8, v10, v9, v11, a3))std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  std::wostream::sentry::~sentry((uint64_t)v14);
  return a1;
}

void sub_191FD85B0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  std::wostream::sentry::~sentry((uint64_t)&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x191FD8590);
}

void sub_191FD8600(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *std::wostream::operator<<(_QWORD *a1, uint64_t a2, double a3)
{
  uint64_t v4;
  char *v5;
  _QWORD *v7;
  const std::locale::facet *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  const std::locale::facet *v12;
  char v14[8];
  _QWORD *v15;
  std::locale v16;

  v14[0] = 0;
  v15 = a1;
  v4 = *a1;
  v5 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if (!*((_DWORD *)v5 + 8))
  {
    v7 = (_QWORD *)*((_QWORD *)v5 + 17);
    if (v7)
    {
      std::wostream::flush(v7, a2);
      v4 = *a1;
    }
    v14[0] = 1;
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(v4 - 24)));
    v8 = std::locale::use_facet(&v16, &std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t>>::id);
    std::locale::~locale(&v16);
    v9 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v10 = *((_QWORD *)v9 + 5);
    v11 = *((unsigned int *)v9 + 36);
    if ((_DWORD)v11 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v12 = std::locale::use_facet(&v16, &std::ctype<wchar_t>::id);
      v11 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v12->__vftable[3].__on_zero_shared)(v12, 32);
      std::locale::~locale(&v16);
      *((_DWORD *)v9 + 36) = v11;
    }
    if (!((uint64_t (*)(const std::locale::facet *, uint64_t, char *, uint64_t, double))v8->__vftable[2].__on_zero_shared)(v8, v10, v9, v11, a3))std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  std::wostream::sentry::~sentry((uint64_t)v14);
  return a1;
}

{
  uint64_t v4;
  char *v5;
  _QWORD *v7;
  const std::locale::facet *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  const std::locale::facet *v12;
  char v14[8];
  _QWORD *v15;
  std::locale v16;

  v14[0] = 0;
  v15 = a1;
  v4 = *a1;
  v5 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if (!*((_DWORD *)v5 + 8))
  {
    v7 = (_QWORD *)*((_QWORD *)v5 + 17);
    if (v7)
    {
      std::wostream::flush(v7, a2);
      v4 = *a1;
    }
    v14[0] = 1;
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(v4 - 24)));
    v8 = std::locale::use_facet(&v16, &std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t>>::id);
    std::locale::~locale(&v16);
    v9 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v10 = *((_QWORD *)v9 + 5);
    v11 = *((unsigned int *)v9 + 36);
    if ((_DWORD)v11 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v12 = std::locale::use_facet(&v16, &std::ctype<wchar_t>::id);
      v11 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v12->__vftable[3].__on_zero_shared)(v12, 32);
      std::locale::~locale(&v16);
      *((_DWORD *)v9 + 36) = v11;
    }
    if (!((uint64_t (*)(const std::locale::facet *, uint64_t, char *, uint64_t, double))v8->__vftable[3].~facet)(v8, v10, v9, v11, a3))std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  std::wostream::sentry::~sentry((uint64_t)v14);
  return a1;
}

void sub_191FD8758(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  std::wostream::sentry::~sentry((uint64_t)&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x191FD8738);
}

void sub_191FD87A8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_191FD8900(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  std::wostream::sentry::~sentry((uint64_t)&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x191FD88E0);
}

void sub_191FD8950(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_191FD8AA0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  std::wostream::sentry::~sentry((uint64_t)&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x191FD8A84);
}

void sub_191FD8AF0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *std::wostream::operator<<(_QWORD *a1, _QWORD *a2)
{
  char *v3;
  _QWORD *v6;
  std::ios_base *v7;
  uint64_t v8;
  _QWORD *rdbuf;
  _DWORD *v10;
  int v11;
  unsigned int *v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  char v16[8];
  _QWORD *v17;

  v16[0] = 0;
  v17 = a1;
  v3 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if (!*((_DWORD *)v3 + 8))
  {
    v6 = (_QWORD *)*((_QWORD *)v3 + 17);
    if (v6)
      std::wostream::flush(v6, (uint64_t)a2);
    v16[0] = 1;
    v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
    if (a2)
    {
      v8 = 0;
      rdbuf = v7->__rdbuf_;
      while (1)
      {
        v10 = (_DWORD *)a2[3];
        v11 = v10 == (_DWORD *)a2[4] ? (*(uint64_t (**)(_QWORD *))(*a2 + 72))(a2) : *v10;
        if (v11 == -1)
          break;
        v12 = (unsigned int *)a2[3];
        if (v12 == (unsigned int *)a2[4])
          v13 = (*(uint64_t (**)(_QWORD *))(*a2 + 72))(a2);
        else
          v13 = *v12;
        if (!rdbuf)
          goto LABEL_24;
        v14 = (_DWORD *)rdbuf[6];
        if (v14 == (_DWORD *)rdbuf[7])
        {
          LODWORD(v13) = (*(uint64_t (**)(_QWORD *, uint64_t))(*rdbuf + 104))(rdbuf, v13);
        }
        else
        {
          *v14 = v13;
          rdbuf[6] = v14 + 1;
        }
        if ((_DWORD)v13 == -1)
          break;
        v15 = a2[3];
        if (v15 == a2[4])
          (*(void (**)(_QWORD *))(*a2 + 80))(a2);
        else
          a2[3] = v15 + 4;
        --v8;
      }
      if (v8)
        goto LABEL_2;
LABEL_24:
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
    }
    else
    {
      std::ios_base::clear(v7, v7->__rdstate_ | 1);
    }
  }
LABEL_2:
  std::wostream::sentry::~sentry((uint64_t)v16);
  return a1;
}

void sub_191FD8C74(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  std::ios_base::__set_failbit_and_consider_rethrow((std::ios_base *)((char *)v1 + *(_QWORD *)(*v1 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x191FD8B38);
}

void sub_191FD8C9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __cxa_end_catch();
  std::wostream::sentry::~sentry((uint64_t)&a9);
  JUMPOUT(0x191FD8CB4);
}

void sub_191FD8CD4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *std::wostream::put(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _DWORD *v9;
  char v11[8];
  _QWORD *v12;

  v11[0] = 0;
  v12 = a1;
  v3 = *a1;
  v4 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if (!*((_DWORD *)v4 + 8))
  {
    v5 = a2;
    v6 = (_QWORD *)*((_QWORD *)v4 + 17);
    if (v6)
    {
      std::wostream::flush(v6, a2);
      v3 = *a1;
    }
    v11[0] = 1;
    v7 = *(_QWORD *)(v3 - 24);
    v8 = *(_QWORD **)((char *)a1 + v7 + 40);
    if (!v8)
      goto LABEL_10;
    v9 = (_DWORD *)v8[6];
    if (v9 == (_DWORD *)v8[7])
    {
      LODWORD(v5) = (*(uint64_t (**)(_QWORD *, uint64_t))(*v8 + 104))(v8, v5);
    }
    else
    {
      *v9 = v5;
      v8[6] = v9 + 1;
    }
    if ((_DWORD)v5 == -1)
    {
      v7 = *(_QWORD *)(*a1 - 24);
LABEL_10:
      std::ios_base::clear((std::ios_base *)((char *)a1 + v7), *(_DWORD *)((char *)a1 + v7 + 32) | 1);
    }
  }
  std::wostream::sentry::~sentry((uint64_t)v11);
  return a1;
}

void sub_191FD8DAC(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v1 + *(_QWORD *)(*v1 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x191FD8D98);
}

void sub_191FD8DE0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *std::wostream::write(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  char *v4;
  _QWORD *v8;
  uint64_t v9;
  char v10[8];
  _QWORD *v11;

  v10[0] = 0;
  v11 = a1;
  v4 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if (!*((_DWORD *)v4 + 8))
  {
    v8 = (_QWORD *)*((_QWORD *)v4 + 17);
    if (v8)
      std::wostream::flush(v8, a2);
    v10[0] = 1;
    if (a3)
    {
      v9 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
      if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 96))(v9, a2, a3) != a3)
        std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 1);
    }
  }
  std::wostream::sentry::~sentry((uint64_t)v10);
  return a1;
}

void sub_191FD8EB0(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v1 + *(_QWORD *)(*v1 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x191FD8E30);
}

void sub_191FD8EE4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *std::wostream::tellp@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  char *v2;

  v2 = (char *)result + *(_QWORD *)(*result - 24);
  if ((v2[32] & 5) == 0)
    return (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v2 + 5) + 32))(*((_QWORD *)v2 + 5), 0, 1, 16);
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_QWORD *)(a2 + 128) = -1;
  return result;
}

_QWORD *std::wostream::seekp(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  char v13[8];
  _QWORD *v14;
  _QWORD v15[17];
  _OWORD v16[8];
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v13[0] = 0;
  v14 = a1;
  v4 = *(_QWORD *)(*a1 - 24);
  v5 = *(_DWORD *)((char *)a1 + v4 + 32);
  if (!v5)
  {
    v6 = *(_QWORD **)((char *)a1 + v4 + 136);
    if (v6)
    {
      std::wostream::flush(v6, a2);
      v4 = *(_QWORD *)(*a1 - 24);
      v5 = *(_DWORD *)((char *)a1 + v4 + 32);
    }
    else
    {
      LOBYTE(v5) = 0;
    }
    v13[0] = 1;
  }
  if ((v5 & 5) == 0)
  {
    v7 = *(_QWORD *)((char *)a1 + v4 + 40);
    v8 = *(_OWORD *)(a2 + 16);
    v16[0] = *(_OWORD *)a2;
    v16[1] = v8;
    v9 = *(_OWORD *)(a2 + 48);
    v16[2] = *(_OWORD *)(a2 + 32);
    v16[3] = v9;
    v17 = *(_QWORD *)(a2 + 128);
    v10 = *(_OWORD *)(a2 + 112);
    v16[6] = *(_OWORD *)(a2 + 96);
    v16[7] = v10;
    v11 = *(_OWORD *)(a2 + 80);
    v16[4] = *(_OWORD *)(a2 + 64);
    v16[5] = v11;
    (*(void (**)(_QWORD *__return_ptr, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)v7 + 40))(v15, v7, v16, 16);
    if (v15[16] == -1)
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  }
  std::wostream::sentry::~sentry((uint64_t)v13);
  return a1;
}

void sub_191FD907C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::wostream::sentry::~sentry((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::wostream::seekp(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  _QWORD *v8;
  char v10[8];
  _QWORD *v11;
  _QWORD v12[18];

  v12[17] = *MEMORY[0x1E0C80C00];
  v10[0] = 0;
  v11 = a1;
  v6 = *(_QWORD *)(*a1 - 24);
  v7 = *(_DWORD *)((char *)a1 + v6 + 32);
  if (!v7)
  {
    v8 = *(_QWORD **)((char *)a1 + v6 + 136);
    if (v8)
    {
      std::wostream::flush(v8, a2);
      v6 = *(_QWORD *)(*a1 - 24);
      v7 = *(_DWORD *)((char *)a1 + v6 + 32);
    }
    else
    {
      LOBYTE(v7) = 0;
    }
    v10[0] = 1;
  }
  if ((v7 & 5) == 0)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)((char *)a1 + v6 + 40)
                                                                                    + 32))(v12, *(_QWORD *)((char *)a1 + v6 + 40), a2, a3, 16);
    if (v12[16] == -1)
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  }
  std::wostream::sentry::~sentry((uint64_t)v10);
  return a1;
}

void sub_191FD919C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::wostream::sentry::~sentry((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::stringbuf::basic_stringbuf(uint64_t a1, uint64_t a2)
{
  std::locale::locale((std::locale *)(a1 + 8));
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  std::stringbuf::__move_init[abi:ne180100](a1, a2);
  return a1;
}

void sub_191FD9240(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::locale *v2;
  uint64_t v3;
  void **v4;

  if (*(char *)(v1 + 87) < 0)
    operator delete(*v4);
  *(_QWORD *)v1 = v3 + 16;
  std::locale::~locale(v2);
  _Unwind_Resume(a1);
}

void std::stringbuf::__move_init[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  __int128 v18;
  char *v19;
  __int128 *v20;
  std::locale *v21;
  uint64_t v22;
  std::locale v23;
  std::locale v24;

  v5 = (__int128 *)(a2 + 64);
  v4 = *(_QWORD *)(a2 + 64);
  if (*(char *)(a2 + 87) >= 0)
    v4 = a2 + 64;
  v6 = *(_QWORD *)(a2 + 16);
  if (v6)
  {
    v7 = v6 - v4;
    v8 = *(_QWORD *)(a2 + 24) - v4;
    v9 = *(_QWORD *)(a2 + 32) - v4;
  }
  else
  {
    v9 = -1;
    v8 = -1;
    v7 = -1;
  }
  v10 = *(_QWORD *)(a2 + 40);
  if (v10)
  {
    v11 = v10 - v4;
    v12 = *(_QWORD *)(a2 + 48) - v4;
    v13 = *(_QWORD *)(a2 + 56) - v4;
  }
  else
  {
    v11 = -1;
    v12 = -1;
    v13 = -1;
  }
  v14 = *(_QWORD *)(a2 + 88);
  v15 = v14 - v4;
  if (v14)
    v16 = v15;
  else
    v16 = -1;
  v17 = (void **)(a1 + 64);
  if (*(char *)(a1 + 87) < 0)
  {
    v22 = v9;
    operator delete(*v17);
    v9 = v22;
  }
  v18 = *v5;
  *(_QWORD *)(a1 + 80) = *((_QWORD *)v5 + 2);
  *(_OWORD *)v17 = v18;
  *(_BYTE *)(a2 + 87) = 0;
  *(_BYTE *)(a2 + 64) = 0;
  if (*(char *)(a1 + 87) < 0)
    v17 = (void **)*v17;
  if (v7 != -1)
  {
    *(_QWORD *)(a1 + 16) = (char *)v17 + v7;
    *(_QWORD *)(a1 + 24) = (char *)v17 + v8;
    *(_QWORD *)(a1 + 32) = (char *)v17 + v9;
  }
  if (v11 != -1)
  {
    *(_QWORD *)(a1 + 56) = (char *)v17 + v13;
    *(_QWORD *)(a1 + 40) = (char *)v17 + v11;
    *(_QWORD *)(a1 + 48) = (char *)v17 + v11 + v12;
  }
  v19 = (char *)v17 + v16;
  if (v16 == -1)
    v19 = 0;
  *(_QWORD *)(a1 + 88) = v19;
  if (*(char *)(a2 + 87) >= 0)
    v20 = v5;
  else
    v20 = *(__int128 **)(a2 + 64);
  *(_QWORD *)(a2 + 16) = v20;
  *(_QWORD *)(a2 + 24) = v20;
  *(_QWORD *)(a2 + 32) = v20;
  *(_QWORD *)(a2 + 40) = v20;
  *(_QWORD *)(a2 + 48) = v20;
  *(_QWORD *)(a2 + 56) = v20;
  *(_QWORD *)(a2 + 88) = v20;
  std::locale::locale(&v23, (const std::locale *)(a2 + 8));
  (*(void (**)(uint64_t, std::locale *))(*(_QWORD *)a1 + 16))(a1, &v23);
  v21 = (std::locale *)(a1 + 8);
  std::locale::locale(&v24, v21);
  std::locale::operator=(v21, &v23);
  std::locale::~locale(&v24);
  std::locale::~locale(&v23);
}

void sub_191FD941C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::locale a11)
{
  std::locale::~locale(&a11);
  _Unwind_Resume(a1);
}

uint64_t std::stringbuf::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  __int128 v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 *v25;
  uint64_t v27;
  std::locale v28;
  std::locale v29;

  v5 = (__int128 *)(a2 + 64);
  v4 = *(_QWORD *)(a2 + 64);
  if (*(char *)(a2 + 87) >= 0)
    v4 = a2 + 64;
  v6 = *(_QWORD *)(a2 + 16);
  if (v6)
  {
    v7 = v6 - v4;
    v8 = *(_QWORD *)(a2 + 24) - v4;
    v9 = *(_QWORD *)(a2 + 32) - v4;
  }
  else
  {
    v9 = -1;
    v8 = -1;
    v7 = -1;
  }
  v10 = *(_QWORD *)(a2 + 40);
  if (v10)
  {
    v11 = v10 - v4;
    v12 = *(_QWORD *)(a2 + 48) - v4;
    v13 = *(_QWORD *)(a2 + 56) - v4;
  }
  else
  {
    v11 = -1;
    v12 = -1;
    v13 = -1;
  }
  v14 = *(_QWORD *)(a2 + 88);
  v15 = v14 - v4;
  if (v14)
    v16 = v15;
  else
    v16 = -1;
  v17 = (void **)(a1 + 64);
  if (*(char *)(a1 + 87) < 0)
  {
    v27 = v11;
    operator delete(*v17);
    v11 = v27;
  }
  v18 = *v5;
  *(_QWORD *)(a1 + 80) = *((_QWORD *)v5 + 2);
  *(_OWORD *)v17 = v18;
  *(_BYTE *)(a2 + 87) = 0;
  *(_BYTE *)(a2 + 64) = 0;
  if (*(char *)(a1 + 87) < 0)
    v17 = (void **)*v17;
  v19 = (char *)v17 + v7;
  v20 = (char *)v17 + v8;
  v21 = (char *)v17 + v9;
  if (v7 == -1)
  {
    v19 = 0;
    v20 = 0;
    v21 = 0;
  }
  *(_QWORD *)(a1 + 16) = v19;
  *(_QWORD *)(a1 + 24) = v20;
  *(_QWORD *)(a1 + 32) = v21;
  if (v11 == -1)
  {
    v22 = 0;
    v23 = 0;
    *(_QWORD *)(a1 + 48) = 0;
  }
  else
  {
    v22 = (char *)v17 + v11;
    v23 = (char *)v17 + v13;
    *(_QWORD *)(a1 + 48) = (char *)v17 + v11 + v12;
  }
  *(_QWORD *)(a1 + 40) = v22;
  *(_QWORD *)(a1 + 56) = v23;
  v24 = (char *)v17 + v16;
  if (v16 == -1)
    v24 = 0;
  *(_QWORD *)(a1 + 88) = v24;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  if (*(char *)(a2 + 87) >= 0)
    v25 = v5;
  else
    v25 = *(__int128 **)(a2 + 64);
  *(_QWORD *)(a2 + 16) = v25;
  *(_QWORD *)(a2 + 24) = v25;
  *(_QWORD *)(a2 + 32) = v25;
  *(_QWORD *)(a2 + 40) = v25;
  *(_QWORD *)(a2 + 48) = v25;
  *(_QWORD *)(a2 + 56) = v25;
  *(_QWORD *)(a2 + 88) = v25;
  std::locale::locale(&v28, (const std::locale *)(a2 + 8));
  (*(void (**)(uint64_t, std::locale *))(*(_QWORD *)a1 + 16))(a1, &v28);
  std::locale::locale(&v29, (const std::locale *)(a1 + 8));
  std::locale::operator=((std::locale *)(a1 + 8), &v28);
  std::locale::~locale(&v29);
  std::locale::~locale(&v28);
  return a1;
}

void sub_191FD960C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::locale a11)
{
  std::locale::~locale(&a11);
  _Unwind_Resume(a1);
}

void std::stringbuf::swap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  char *v33;
  BOOL v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  std::locale v45;
  std::locale v46;
  std::locale v47;
  std::locale v48;

  v4 = a2 + 64;
  if (*(char *)(a2 + 87) >= 0)
    v5 = a2 + 64;
  else
    v5 = *(_QWORD *)(a2 + 64);
  v6 = *(_QWORD *)(a2 + 16);
  if (v6)
  {
    v7 = v6 - v5;
    v8 = *(_QWORD *)(a2 + 24) - v5;
    v9 = *(_QWORD *)(a2 + 32) - v5;
  }
  else
  {
    v8 = -1;
    v9 = -1;
    v7 = -1;
  }
  v10 = *(_QWORD *)(a2 + 40);
  if (v10)
  {
    v11 = v10 - v5;
    v12 = *(_QWORD *)(a2 + 48) - v5;
    v13 = *(_QWORD *)(a2 + 56) - v5;
  }
  else
  {
    v11 = -1;
    v12 = -1;
    v13 = -1;
  }
  v14 = *(_QWORD *)(a2 + 88);
  v15 = v14 - v5;
  if (!v14)
    v15 = -1;
  v16 = (_QWORD *)(a1 + 64);
  v17 = (_QWORD *)(a1 + 64);
  if (*(char *)(a1 + 87) < 0)
    v17 = (_QWORD *)*v16;
  v18 = *(_QWORD *)(a1 + 16);
  if (v18)
  {
    v19 = v18 - (_QWORD)v17;
    v20 = *(_QWORD *)(a1 + 24) - (_QWORD)v17;
    v21 = *(_QWORD *)(a1 + 32) - (_QWORD)v17;
  }
  else
  {
    v19 = -1;
    v20 = -1;
    v21 = -1;
  }
  v22 = *(_QWORD *)(a1 + 40);
  if (v22)
  {
    v23 = v22 - (_QWORD)v17;
    v24 = *(_QWORD *)(a1 + 48) - (_QWORD)v17;
    v25 = *(_QWORD *)(a1 + 56) - (_QWORD)v17;
  }
  else
  {
    v23 = -1;
    v24 = -1;
    v25 = -1;
  }
  v26 = *(_QWORD *)(a1 + 88);
  v27 = v26 - (_QWORD)v17;
  if (!v26)
    v27 = -1;
  v28 = *(_DWORD *)(a1 + 96);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a2 + 96) = v28;
  v29 = *(_QWORD *)(a1 + 80);
  v30 = *(_OWORD *)v16;
  v31 = *(_QWORD *)(v4 + 16);
  *(_OWORD *)v16 = *(_OWORD *)v4;
  *(_QWORD *)(a1 + 80) = v31;
  *(_OWORD *)v4 = v30;
  *(_QWORD *)(v4 + 16) = v29;
  if (*(char *)(a1 + 87) < 0)
    v16 = (_QWORD *)*v16;
  v32 = (char *)v16 + v8;
  v33 = (char *)v16 + v9;
  v34 = v7 == -1;
  if (v7 == -1)
    v35 = 0;
  else
    v35 = (char *)v16 + v7;
  if (v34)
  {
    v32 = 0;
    v33 = 0;
  }
  *(_QWORD *)(a1 + 16) = v35;
  *(_QWORD *)(a1 + 24) = v32;
  *(_QWORD *)(a1 + 32) = v33;
  if (v11 == -1)
  {
    v36 = 0;
    v37 = 0;
    *(_QWORD *)(a1 + 48) = 0;
  }
  else
  {
    v36 = (char *)v16 + v11;
    v37 = (char *)v16 + v13;
    *(_QWORD *)(a1 + 48) = (char *)v16 + v11 + v12;
  }
  *(_QWORD *)(a1 + 40) = v36;
  *(_QWORD *)(a1 + 56) = v37;
  v38 = (char *)v16 + v15;
  if (v15 == -1)
    v38 = 0;
  *(_QWORD *)(a1 + 88) = v38;
  if (*(char *)(a2 + 87) < 0)
    v4 = *(_QWORD *)(a2 + 64);
  v39 = v4 + v19;
  v40 = v4 + v20;
  v41 = v4 + v21;
  if (v19 == -1)
  {
    v39 = 0;
    v40 = 0;
    v41 = 0;
  }
  *(_QWORD *)(a2 + 16) = v39;
  *(_QWORD *)(a2 + 24) = v40;
  *(_QWORD *)(a2 + 32) = v41;
  if (v23 == -1)
  {
    v42 = 0;
    v43 = 0;
    *(_QWORD *)(a2 + 48) = 0;
  }
  else
  {
    v42 = v4 + v23;
    v43 = v4 + v25;
    *(_QWORD *)(a2 + 48) = v4 + v23 + v24;
  }
  *(_QWORD *)(a2 + 40) = v42;
  *(_QWORD *)(a2 + 56) = v43;
  v44 = v4 + v27;
  if (v27 == -1)
    v44 = 0;
  *(_QWORD *)(a2 + 88) = v44;
  std::locale::locale(&v48, (const std::locale *)(a2 + 8));
  std::locale::locale(&v46, (const std::locale *)(a1 + 8));
  (*(void (**)(uint64_t, std::locale *))(*(_QWORD *)a2 + 16))(a2, &v46);
  std::locale::locale(&v47, (const std::locale *)(a2 + 8));
  std::locale::operator=((std::locale *)(a2 + 8), &v46);
  std::locale::~locale(&v47);
  std::locale::~locale(&v46);
  (*(void (**)(uint64_t, std::locale *))(*(_QWORD *)a1 + 16))(a1, &v48);
  std::locale::locale(&v45, (const std::locale *)(a1 + 8));
  std::locale::operator=((std::locale *)(a1 + 8), &v48);
  std::locale::~locale(&v45);
  std::locale::~locale(&v48);
}

_QWORD *std::stringbuf::str@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  int v2;
  char *v3;
  char *v4;
  char *v5;

  v2 = *((_DWORD *)result + 24);
  if ((v2 & 0x10) != 0)
  {
    v3 = (char *)result[11];
    v4 = (char *)result[6];
    if (v3 < v4)
    {
      result[11] = v4;
      v3 = v4;
    }
    v5 = (char *)result[5];
  }
  else
  {
    if ((v2 & 8) == 0)
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      return result;
    }
    v5 = (char *)result[2];
    v3 = (char *)result[4];
  }
  return std::string::__init_with_size[abi:ne180100]<char *,char *>(a2, v5, v3, v3 - v5);
}

void std::stringbuf::str(uint64_t a1, const std::string *a2)
{
  std::string::operator=((std::string *)(a1 + 64), a2);
  std::stringbuf::__init_buf_ptrs[abi:ne180100](a1);
}

void std::stringbuf::__init_buf_ptrs[abi:ne180100](uint64_t a1)
{
  std::string *v2;
  char v3;
  std::string *v4;
  unint64_t v5;
  int v6;
  std::string::size_type v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)(a1 + 88) = 0;
  v2 = (std::string *)(a1 + 64);
  v3 = *(_BYTE *)(a1 + 87);
  if (v3 < 0)
  {
    v4 = *(std::string **)(a1 + 64);
    v5 = *(_QWORD *)(a1 + 72);
  }
  else
  {
    v4 = v2;
    v5 = *(unsigned __int8 *)(a1 + 87);
  }
  v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = (char *)v4 + v5;
  }
  if ((v6 & 0x10) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    v7 = v3 < 0 ? (*(_QWORD *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    v8 = *(char *)(a1 + 87) < 0 ? *(_QWORD *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(_QWORD *)(a1 + 40) = v4;
    *(_QWORD *)(a1 + 48) = v4;
    *(_QWORD *)(a1 + 56) = (char *)v4 + v8;
    if ((*(_BYTE *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        v5 = v5 - v10 - 0x7FFFFFFF;
        *(_QWORD *)(a1 + 48) = v4;
      }
      if (v5)
        *(_QWORD *)(a1 + 48) = (char *)v4 + v5;
    }
  }
}

uint64_t std::stringbuf::underflow(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;

  v1 = *(_QWORD *)(a1 + 88);
  v2 = *(_QWORD *)(a1 + 48);
  if (v1 < v2)
  {
    *(_QWORD *)(a1 + 88) = v2;
    v1 = v2;
  }
  if ((*(_BYTE *)(a1 + 96) & 8) == 0)
    return 0xFFFFFFFFLL;
  v3 = *(_QWORD *)(a1 + 32);
  if (v3 < v1)
  {
    *(_QWORD *)(a1 + 32) = v1;
    v3 = v1;
  }
  v4 = *(unsigned __int8 **)(a1 + 24);
  if ((unint64_t)v4 < v3)
    return *v4;
  else
    return 0xFFFFFFFFLL;
}

uint64_t std::stringbuf::pbackfail(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a1 + 88);
  v3 = *(_QWORD *)(a1 + 48);
  if (v2 < v3)
  {
    *(_QWORD *)(a1 + 88) = v3;
    v2 = v3;
  }
  v4 = *(_QWORD *)(a1 + 24);
  if (*(_QWORD *)(a1 + 16) >= v4)
    return 0xFFFFFFFFLL;
  if ((_DWORD)a2 == -1)
  {
    a2 = 0;
    *(_QWORD *)(a1 + 24) = v4 - 1;
    *(_QWORD *)(a1 + 32) = v2;
    return a2;
  }
  if ((*(_BYTE *)(a1 + 96) & 0x10) == 0 && *(unsigned __int8 *)(v4 - 1) != a2)
    return 0xFFFFFFFFLL;
  *(_QWORD *)(a1 + 24) = v4 - 1;
  *(_QWORD *)(a1 + 32) = v2;
  *(_BYTE *)(v4 - 1) = a2;
  return a2;
}

uint64_t std::stringbuf::overflow(uint64_t a1, int a2)
{
  unsigned __int8 v2;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::string::size_type v13;
  unsigned __int8 *v14;
  uint64_t v15;
  _QWORD *v16;

  if (a2 == -1)
    return 0;
  v2 = a2;
  v5 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v7 = *(unsigned __int8 **)(a1 + 48);
  v6 = *(unsigned __int8 **)(a1 + 56);
  if (v7 == v6)
  {
    if ((*(_BYTE *)(a1 + 96) & 0x10) == 0)
      return 0xFFFFFFFFLL;
    v10 = *(_QWORD *)(a1 + 40);
    v11 = *(_QWORD *)(a1 + 88);
    v12 = a1 + 64;
    std::string::push_back((std::string *)(a1 + 64), 0);
    if (*(char *)(a1 + 87) < 0)
      v13 = (*(_QWORD *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1;
    else
      v13 = 22;
    std::string::resize((std::string *)(a1 + 64), v13, 0);
    v14 = &v7[-v10];
    if (*(char *)(a1 + 87) < 0)
    {
      v12 = *(_QWORD *)(a1 + 64);
      v15 = *(_QWORD *)(a1 + 72);
    }
    else
    {
      v15 = *(unsigned __int8 *)(a1 + 87);
    }
    v6 = (unsigned __int8 *)(v12 + v15);
    v7 = &v14[v12];
    *(_QWORD *)(a1 + 40) = v12;
    *(_QWORD *)(a1 + 48) = &v14[v12];
    *(_QWORD *)(a1 + 56) = v6;
    v8 = v12 + v11 - v10;
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 88);
  }
  if ((unint64_t)(v7 + 1) >= v8)
    v8 = (unint64_t)(v7 + 1);
  *(_QWORD *)(a1 + 88) = v8;
  if ((*(_BYTE *)(a1 + 96) & 8) != 0)
  {
    v16 = (_QWORD *)(a1 + 64);
    if (*(char *)(a1 + 87) < 0)
      v16 = (_QWORD *)*v16;
    *(_QWORD *)(a1 + 16) = v16;
    *(_QWORD *)(a1 + 24) = (char *)v16 + v4 - v5;
    *(_QWORD *)(a1 + 32) = v8;
  }
  if (v7 == v6)
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 104))(a1, v2);
  *(_QWORD *)(a1 + 48) = v7 + 1;
  *v7 = v2;
  return v2;
}

void sub_191FD9C7C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x191FD9B78);
}

double std::stringbuf::seekoff@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;
  uint64_t v12;

  v5 = *(_QWORD *)(a1 + 88);
  v6 = *(_QWORD *)(a1 + 48);
  if (v5 < v6)
  {
    *(_QWORD *)(a1 + 88) = v6;
    v5 = v6;
  }
  if ((a4 & 0x18) == 0 || a3 == 1 && (a4 & 0x18) == 0x18)
    goto LABEL_14;
  if (v5)
  {
    v7 = (_QWORD *)(a1 + 64);
    if (*(char *)(a1 + 87) < 0)
      v7 = (_QWORD *)*v7;
    v8 = v5 - (_QWORD)v7;
    if (a3)
      goto LABEL_10;
LABEL_17:
    v9 = a3;
    goto LABEL_20;
  }
  v8 = 0;
  if (!a3)
    goto LABEL_17;
LABEL_10:
  if (a3 != 2)
  {
    if (a3 == 1)
    {
      if ((a4 & 8) != 0)
        v9 = *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16);
      else
        v9 = v6 - *(_QWORD *)(a1 + 40);
      goto LABEL_20;
    }
LABEL_14:
    v10 = -1;
    goto LABEL_15;
  }
  v9 = v8;
LABEL_20:
  v10 = -1;
  v12 = v9 + a2;
  if (v12 >= 0 && v8 >= v12 && (!v12 || ((a4 & 8) == 0 || *(_QWORD *)(a1 + 24)) && ((a4 & 0x10) == 0 || v6)))
  {
    if ((a4 & 8) != 0)
    {
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a1 + 16) + v12;
      *(_QWORD *)(a1 + 32) = v5;
    }
    if ((a4 & 0x10) != 0)
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 40) + v12;
    v10 = v12;
  }
LABEL_15:
  result = 0.0;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_QWORD *)(a5 + 128) = v10;
  return result;
}

uint64_t *std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;
  std::ios_base *v8;
  std::ios_base_vtbl *v9;

  v5 = *a1;
  v4 = a1[1];
  v6 = *a2;
  a1[1] = a2[1];
  a2[1] = v4;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(v5 - 24));
  v8 = (std::ios_base *)((char *)a2 + *(_QWORD *)(v6 - 24));
  std::ios_base::swap(v7, v8);
  v9 = v7[1].__vftable;
  v7[1].__vftable = v8[1].__vftable;
  v8[1].__vftable = v9;
  LODWORD(v9) = v7[1].__fmtflags_;
  v7[1].__fmtflags_ = v8[1].__fmtflags_;
  v8[1].__fmtflags_ = v9;
  std::stringbuf::operator=((uint64_t)(a1 + 3), (uint64_t)(a2 + 3));
  return a1;
}

_QWORD *std::ostringstream::operator=(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  std::ios_base *v4;
  uint64_t v5;
  std::ios_base *v6;
  std::ios_base_vtbl *v7;

  v3 = (uint64_t)(a1 + 1);
  v4 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  v5 = (uint64_t)(a2 + 1);
  v6 = (std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24));
  std::ios_base::swap(v4, v6);
  v7 = v4[1].__vftable;
  v4[1].__vftable = v6[1].__vftable;
  v6[1].__vftable = v7;
  LODWORD(v7) = v4[1].__fmtflags_;
  v4[1].__fmtflags_ = v6[1].__fmtflags_;
  v6[1].__fmtflags_ = v7;
  std::stringbuf::operator=(v3, v5);
  return a1;
}

uint64_t *std::istringstream::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;
  std::ios_base *v8;
  std::ios_base_vtbl *v9;

  v5 = *a1;
  v4 = a1[1];
  v6 = *a2;
  a1[1] = a2[1];
  a2[1] = v4;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(v5 - 24));
  v8 = (std::ios_base *)((char *)a2 + *(_QWORD *)(v6 - 24));
  std::ios_base::swap(v7, v8);
  v9 = v7[1].__vftable;
  v7[1].__vftable = v8[1].__vftable;
  v8[1].__vftable = v9;
  LODWORD(v9) = v7[1].__fmtflags_;
  v7[1].__fmtflags_ = v8[1].__fmtflags_;
  v8[1].__fmtflags_ = v9;
  std::stringbuf::operator=((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  return a1;
}

void std::ifstream::open(_QWORD *a1, const char *a2, int a3)
{
  uint64_t v4;
  std::ios_base *v5;
  std::ios_base::iostate v6;

  v4 = std::filebuf::open((uint64_t)(a1 + 2), a2, a3 | 8u);
  v5 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  if (v4)
    v6 = 0;
  else
    v6 = v5->__rdstate_ | 4;
  std::ios_base::clear(v5, v6);
}

{
  uint64_t v4;
  int v5;
  uint64_t v6;
  std::ios_base *v7;
  std::ios_base::iostate v8;

  v4 = (uint64_t)(a1 + 2);
  v5 = a3 | 8;
  if (a2[23] < 0)
    a2 = *(const char **)a2;
  v6 = std::filebuf::open(v4, a2, v5);
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  if (v6)
    v8 = 0;
  else
    v8 = v7->__rdstate_ | 4;
  std::ios_base::clear(v7, v8);
}

uint64_t std::filebuf::open(uint64_t a1, const char *a2, int a3)
{
  uint64_t v3;
  const char *mdstring;
  FILE *v8;

  if (*(_QWORD *)(a1 + 120))
    return 0;
  v3 = a1;
  mdstring = std::filebuf::__make_mdstring(a3);
  if (!mdstring)
    return 0;
  v8 = fopen(a2, mdstring);
  *(_QWORD *)(v3 + 120) = v8;
  if (!v8)
    return 0;
  *(_DWORD *)(v3 + 392) = a3;
  if ((a3 & 2) != 0 && fseek(v8, 0, 2))
  {
    fclose(*(FILE **)(v3 + 120));
    *(_QWORD *)(v3 + 120) = 0;
    return 0;
  }
  return v3;
}

void std::ofstream::open(_QWORD *a1, const char *a2, int a3)
{
  uint64_t v4;
  std::ios_base *v5;
  std::ios_base::iostate v6;

  v4 = std::filebuf::open((uint64_t)(a1 + 1), a2, a3 | 0x10u);
  v5 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  if (v4)
    v6 = 0;
  else
    v6 = v5->__rdstate_ | 4;
  std::ios_base::clear(v5, v6);
}

{
  uint64_t v4;
  int v5;
  uint64_t v6;
  std::ios_base *v7;
  std::ios_base::iostate v8;

  v4 = (uint64_t)(a1 + 1);
  v5 = a3 | 0x10;
  if (a2[23] < 0)
    a2 = *(const char **)a2;
  v6 = std::filebuf::open(v4, a2, v5);
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  if (v6)
    v8 = 0;
  else
    v8 = v7->__rdstate_ | 4;
  std::ios_base::clear(v7, v8);
}

uint64_t std::filebuf::basic_filebuf(uint64_t a1)
{
  const std::locale *v2;
  _BOOL4 has_facet;
  std::locale v5;

  v2 = (const std::locale *)(a1 + 8);
  std::locale::locale((std::locale *)(a1 + 8));
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_DWORD *)(a1 + 399) = 0;
  std::locale::locale(&v5, v2);
  has_facet = std::locale::has_facet(&v5, &std::codecvt<char,char,__mbstate_t>::id);
  std::locale::~locale(&v5);
  if (has_facet)
  {
    std::locale::locale(&v5, v2);
    *(_QWORD *)(a1 + 128) = std::locale::use_facet(&v5, &std::codecvt<char,char,__mbstate_t>::id);
    std::locale::~locale(&v5);
    *(_BYTE *)(a1 + 402) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 128) + 56))(*(_QWORD *)(a1 + 128));
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 24))(a1, 0, 4096);
  return a1;
}

void sub_191FDA20C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  _QWORD *v10;
  std::locale *v11;
  uint64_t v12;

  std::locale::~locale(&a10);
  *v10 = v12 + 16;
  std::locale::~locale(v11);
  _Unwind_Resume(a1);
}

uint64_t std::filebuf::basic_filebuf(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  std::locale::locale((std::locale *)(a1 + 8), (const std::locale *)(a2 + 8));
  v4 = (uint64_t *)(a2 + 16);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v5 = *(_QWORD *)(a2 + 64);
  if (v5 == a2 + 88)
  {
    v5 = a1 + 88;
    *(_QWORD *)(a1 + 64) = a1 + 88;
    v8 = *(_QWORD *)(a2 + 64);
    v6 = a1 + 88 + *(_QWORD *)(a2 + 72) - v8;
    v7 = a1 + 88 + *(_QWORD *)(a2 + 80) - v8;
  }
  else
  {
    *(_QWORD *)(a1 + 64) = v5;
    v6 = *(_QWORD *)(a2 + 72);
    v7 = *(_QWORD *)(a2 + 80);
  }
  *(_QWORD *)(a1 + 72) = v6;
  *(_QWORD *)(a1 + 80) = v7;
  v9 = *(_QWORD *)(a2 + 104);
  v10 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v9;
  *(_QWORD *)(a1 + 112) = v10;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  v11 = *(_OWORD *)(a2 + 136);
  v12 = *(_OWORD *)(a2 + 152);
  v13 = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = v13;
  *(_OWORD *)(a1 + 152) = v12;
  *(_OWORD *)(a1 + 136) = v11;
  v14 = *(_OWORD *)(a2 + 200);
  v15 = *(_OWORD *)(a2 + 216);
  v16 = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 232) = v16;
  *(_OWORD *)(a1 + 216) = v15;
  *(_OWORD *)(a1 + 200) = v14;
  v17 = *(_OWORD *)(a2 + 344);
  v18 = *(_OWORD *)(a2 + 376);
  v19 = *(_OWORD *)(a2 + 328);
  *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
  *(_OWORD *)(a1 + 376) = v18;
  *(_OWORD *)(a1 + 328) = v19;
  *(_OWORD *)(a1 + 344) = v17;
  v20 = *(_OWORD *)(a2 + 264);
  v21 = *(_OWORD *)(a2 + 280);
  v22 = *(_OWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 312) = v22;
  *(_OWORD *)(a1 + 264) = v20;
  *(_OWORD *)(a1 + 280) = v21;
  *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
  *(_BYTE *)(a1 + 400) = *(_BYTE *)(a2 + 400);
  *(_WORD *)(a1 + 401) = *(_WORD *)(a2 + 401);
  v23 = *(_QWORD *)(a2 + 40);
  if (v23)
  {
    if (v23 == *(_QWORD *)(a2 + 104))
      v5 = v9;
    v24 = v5 + *(_QWORD *)(a2 + 56) - v23;
    *(_QWORD *)(a1 + 40) = v5;
    *(_QWORD *)(a1 + 48) = v5;
    *(_QWORD *)(a1 + 48) = v5 + *(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = v24;
  }
  else
  {
    v25 = *v4;
    if (*v4)
    {
      v26 = *(_QWORD *)(a2 + 24) - v25;
      v27 = *(_QWORD *)(a2 + 32) - v25;
      if (v25 == *(_QWORD *)(a2 + 104))
      {
        v28 = v9 + v27;
        *(_QWORD *)(a1 + 16) = v9;
        *(_QWORD *)(a1 + 24) = v9 + v26;
      }
      else
      {
        v28 = v5 + v27;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v5 + v26;
      }
      *(_QWORD *)(a1 + 32) = v28;
    }
  }
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 136) = 0u;
  *(_OWORD *)(a2 + 152) = 0u;
  *(_OWORD *)(a2 + 168) = 0u;
  *(_OWORD *)(a2 + 184) = 0u;
  *(_OWORD *)(a2 + 200) = 0u;
  *(_OWORD *)(a2 + 216) = 0u;
  *(_OWORD *)(a2 + 232) = 0u;
  *(_OWORD *)(a2 + 248) = 0u;
  *(_OWORD *)(a2 + 264) = 0u;
  *(_OWORD *)(a2 + 280) = 0u;
  *(_OWORD *)(a2 + 296) = 0u;
  *(_OWORD *)(a2 + 312) = 0u;
  *(_OWORD *)(a2 + 328) = 0u;
  *(_OWORD *)(a2 + 344) = 0u;
  *(_OWORD *)(a2 + 360) = 0u;
  *(_OWORD *)(a2 + 376) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)v4 = 0u;
  *(_QWORD *)(a2 + 392) = 0;
  *(_WORD *)(a2 + 400) = 0;
  return a1;
}

uint64_t std::filebuf::~filebuf(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  std::filebuf::close((FILE *)a1);
  if (*(_BYTE *)(a1 + 400))
  {
    v2 = *(_QWORD *)(a1 + 64);
    if (v2)
      MEMORY[0x194021E14](v2, 0x1000C8077774924);
  }
  if (*(_BYTE *)(a1 + 401))
  {
    v3 = *(_QWORD *)(a1 + 104);
    if (v3)
      MEMORY[0x194021E14](v3, 0x1000C8077774924);
  }
  std::locale::~locale((std::locale *)(a1 + 8));
  return a1;
}

void sub_191FDA4F4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x191FDA484);
}

FILE *std::filebuf::close(FILE *a1)
{
  FILE *base;
  int v3;

  base = (FILE *)a1->_lb._base;
  if (base)
  {
    v3 = (*((uint64_t (**)(FILE *))a1->_p + 6))(a1);
    if (fclose(base) | v3)
      base = 0;
    else
      base = a1;
    a1->_lb._base = 0;
    (*((void (**)(FILE *, _QWORD, _QWORD))a1->_p + 3))(a1, 0, 0);
  }
  return base;
}

void sub_191FDA574(_Unwind_Exception *a1)
{
  FILE *v1;

  fclose(v1);
  _Unwind_Resume(a1);
}

void std::filebuf::~filebuf(uint64_t a1)
{
  std::filebuf::~filebuf(a1);
  JUMPOUT(0x194021E38);
}

void std::filebuf::swap(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;

  std::streambuf::swap((const std::locale *)a1, (std::locale *)a2);
  v4 = *(uint64_t **)(a1 + 64);
  v5 = (uint64_t *)(a1 + 88);
  v6 = *(uint64_t **)(a2 + 64);
  v7 = (uint64_t *)(a2 + 88);
  if (v4 != (uint64_t *)(a1 + 88) && v6 != v7)
  {
    *(_QWORD *)(a1 + 64) = v6;
    *(_QWORD *)(a2 + 64) = v4;
    v17 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a2 + 72) = v17;
    v18 = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    goto LABEL_21;
  }
  v9 = *(_QWORD *)(a1 + 72);
  v10 = *(_QWORD *)(a1 + 80);
  v11 = v9 - (_QWORD)v4;
  if (!v9)
    v11 = 0;
  v12 = v10 - (_QWORD)v4;
  if (!v10)
    v12 = 0;
  v13 = *(_QWORD *)(a2 + 72);
  v14 = *(_QWORD *)(a2 + 80);
  v15 = v13 - (_QWORD)v6;
  if (!v13)
    v15 = 0;
  v16 = v14 - (_QWORD)v6;
  if (!v14)
    v16 = 0;
  if (v4 == v5)
  {
    if (v6 != v7)
    {
      *(_QWORD *)(a1 + 64) = v6;
      *(_QWORD *)(a2 + 64) = v7;
      *(_QWORD *)(a2 + 88) = *v4;
      goto LABEL_20;
    }
LABEL_19:
    v19 = *v5;
    *v5 = *v7;
    *v7 = v19;
    goto LABEL_20;
  }
  if (v6 != v7)
    goto LABEL_19;
  *(_QWORD *)(a2 + 64) = v4;
  *(_QWORD *)(a1 + 64) = v5;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
LABEL_20:
  v20 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 72) = v20 + v15;
  *(_QWORD *)(a1 + 80) = v20 + v16;
  v21 = *(_QWORD *)(a2 + 64);
  v22 = v21 + v11;
  v18 = v21 + v12;
  *(_QWORD *)(a2 + 72) = v22;
LABEL_21:
  *(_QWORD *)(a2 + 80) = v18;
  v23 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 96) = v23;
  v24 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 104) = v24;
  v25 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = v25;
  v26 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a2 + 120) = v26;
  v27 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 128) = v27;
  v55 = *(_OWORD *)(a1 + 200);
  v57 = *(_OWORD *)(a1 + 216);
  v59 = *(_OWORD *)(a1 + 232);
  v61 = *(_OWORD *)(a1 + 248);
  v47 = *(_OWORD *)(a1 + 136);
  v49 = *(_OWORD *)(a1 + 152);
  v51 = *(_OWORD *)(a1 + 168);
  v53 = *(_OWORD *)(a1 + 184);
  v28 = *(_OWORD *)(a2 + 136);
  v29 = *(_OWORD *)(a2 + 152);
  v30 = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = v30;
  *(_OWORD *)(a1 + 152) = v29;
  *(_OWORD *)(a1 + 136) = v28;
  v31 = *(_OWORD *)(a2 + 248);
  v32 = *(_OWORD *)(a2 + 200);
  v33 = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = v33;
  *(_OWORD *)(a1 + 200) = v32;
  *(_OWORD *)(a1 + 248) = v31;
  *(_OWORD *)(a2 + 248) = v61;
  *(_OWORD *)(a2 + 200) = v55;
  *(_OWORD *)(a2 + 216) = v57;
  *(_OWORD *)(a2 + 232) = v59;
  *(_OWORD *)(a2 + 136) = v47;
  *(_OWORD *)(a2 + 152) = v49;
  *(_OWORD *)(a2 + 168) = v51;
  *(_OWORD *)(a2 + 184) = v53;
  v56 = *(_OWORD *)(a1 + 328);
  v58 = *(_OWORD *)(a1 + 344);
  v60 = *(_OWORD *)(a1 + 360);
  v62 = *(_OWORD *)(a1 + 376);
  v48 = *(_OWORD *)(a1 + 264);
  v50 = *(_OWORD *)(a1 + 280);
  v52 = *(_OWORD *)(a1 + 296);
  v54 = *(_OWORD *)(a1 + 312);
  v35 = *(_OWORD *)(a2 + 296);
  v34 = *(_OWORD *)(a2 + 312);
  v36 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 280) = v36;
  *(_OWORD *)(a1 + 296) = v35;
  *(_OWORD *)(a1 + 312) = v34;
  v37 = *(_OWORD *)(a2 + 328);
  v38 = *(_OWORD *)(a2 + 344);
  v39 = *(_OWORD *)(a2 + 376);
  *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
  *(_OWORD *)(a1 + 376) = v39;
  *(_OWORD *)(a1 + 328) = v37;
  *(_OWORD *)(a1 + 344) = v38;
  *(_OWORD *)(a2 + 328) = v56;
  *(_OWORD *)(a2 + 344) = v58;
  *(_OWORD *)(a2 + 360) = v60;
  *(_OWORD *)(a2 + 376) = v62;
  *(_OWORD *)(a2 + 264) = v48;
  *(_OWORD *)(a2 + 280) = v50;
  *(_OWORD *)(a2 + 296) = v52;
  *(_OWORD *)(a2 + 312) = v54;
  LODWORD(v27) = *(_DWORD *)(a1 + 392);
  *(_DWORD *)(a1 + 392) = *(_DWORD *)(a2 + 392);
  *(_DWORD *)(a2 + 392) = v27;
  LODWORD(v27) = *(_DWORD *)(a1 + 396);
  *(_DWORD *)(a1 + 396) = *(_DWORD *)(a2 + 396);
  *(_DWORD *)(a2 + 396) = v27;
  LOBYTE(v27) = *(_BYTE *)(a1 + 400);
  *(_BYTE *)(a1 + 400) = *(_BYTE *)(a2 + 400);
  *(_BYTE *)(a2 + 400) = v27;
  LOBYTE(v27) = *(_BYTE *)(a1 + 401);
  *(_BYTE *)(a1 + 401) = *(_BYTE *)(a2 + 401);
  *(_BYTE *)(a2 + 401) = v27;
  LOBYTE(v27) = *(_BYTE *)(a1 + 402);
  *(_BYTE *)(a1 + 402) = *(_BYTE *)(a2 + 402);
  *(_BYTE *)(a2 + 402) = v27;
  if (*(uint64_t **)(a1 + 16) == v7)
  {
    v42 = (char *)v5 + *(_QWORD *)(a1 + 24) - (_QWORD)v7;
    v43 = (char *)v5 + *(_QWORD *)(a1 + 32) - (_QWORD)v7;
    *(_QWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 24) = v42;
    *(_QWORD *)(a1 + 32) = v43;
  }
  else if (*(uint64_t **)(a1 + 40) == v7)
  {
    v40 = (char *)v5 + *(_QWORD *)(a1 + 56) - (_QWORD)v7;
    v41 = (char *)v5 + *(_QWORD *)(a1 + 48) - (_QWORD)v7;
    *(_QWORD *)(a1 + 40) = v5;
    *(_QWORD *)(a1 + 48) = v41;
    *(_QWORD *)(a1 + 56) = v40;
  }
  if (*(uint64_t **)(a2 + 16) == v5)
  {
    v45 = (char *)v7 + *(_QWORD *)(a2 + 24) - (_QWORD)v5;
    v46 = (char *)v7 + *(_QWORD *)(a2 + 32) - (_QWORD)v5;
    *(_QWORD *)(a2 + 16) = v7;
    *(_QWORD *)(a2 + 24) = v45;
    *(_QWORD *)(a2 + 32) = v46;
  }
  else if (*(uint64_t **)(a2 + 40) == v5)
  {
    v44 = *(_QWORD *)(a2 + 48) - (_QWORD)v5;
    *(_QWORD *)(a2 + 56) = (char *)v7 + *(_QWORD *)(a2 + 56) - (_QWORD)v5;
    *(_QWORD *)(a2 + 40) = v7;
    *(_QWORD *)(a2 + 48) = (char *)v7 + v44;
  }
}

const char *std::filebuf::__make_mdstring(int a1)
{
  signed int v1;
  const char *result;

  v1 = a1 & 0xFFFFFFFD;
  result = "w";
  if (v1 > 47)
  {
    if (v1 <= 83)
    {
      if (v1 > 55)
      {
        if (v1 == 56)
          return "w+";
        if (v1 == 60)
          return "w+b";
        if (v1 != 80)
          return 0;
        return "wx";
      }
      if (v1 == 48)
        return result;
      if (v1 == 52)
        return "wb";
      return 0;
    }
    if (v1 <= 115)
    {
      if (v1 != 84)
      {
        if (v1 == 112)
          return "wx";
        return 0;
      }
    }
    else if (v1 != 116)
    {
      if (v1 == 120)
        return "w+x";
      if (v1 == 124)
        return "w+bx";
      return 0;
    }
    return "wbx";
  }
  switch(v1)
  {
    case 1:
    case 17:
      result = "a";
      break;
    case 5:
    case 21:
      result = "ab";
      break;
    case 8:
      result = "r";
      break;
    case 9:
    case 25:
      result = "a+";
      break;
    case 12:
      result = "rb";
      break;
    case 13:
    case 29:
      result = "a+b";
      break;
    case 16:
      return result;
    case 20:
      return "wb";
    case 24:
      result = "r+";
      break;
    case 28:
      result = "r+b";
      break;
    default:
      return 0;
  }
  return result;
}

uint64_t std::filebuf::underflow(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t result;
  unsigned __int8 *v8;
  size_t v9;
  size_t v10;
  unsigned __int8 *v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  FILE *v19;
  size_t v20;
  size_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  size_t v26;
  size_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  char *v31;
  unsigned __int8 *v32;
  char v33;
  uint64_t v34;

  if (!*(_QWORD *)(a1 + 120))
    return 0xFFFFFFFFLL;
  v2 = *(_DWORD *)(a1 + 396);
  if ((v2 & 8) != 0)
  {
    v6 = *(unsigned __int8 **)(a1 + 24);
    if (v6)
      goto LABEL_12;
    goto LABEL_11;
  }
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v3 = 96;
  if (!*(_BYTE *)(a1 + 402))
    v3 = 112;
  v4 = 64;
  if (!*(_BYTE *)(a1 + 402))
    v4 = 104;
  v5 = *(_QWORD *)(a1 + v4);
  v6 = (unsigned __int8 *)(v5 + *(_QWORD *)(a1 + v3));
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 396) = 8;
  if (!v6)
  {
LABEL_11:
    v6 = (unsigned __int8 *)&v34;
    *(_QWORD *)(a1 + 16) = &v33;
    *(_QWORD *)(a1 + 24) = &v34;
    *(_QWORD *)(a1 + 32) = &v34;
  }
LABEL_12:
  v8 = *(unsigned __int8 **)(a1 + 32);
  if ((v2 & 8) != 0)
  {
    if ((unint64_t)((uint64_t)&v8[-*(_QWORD *)(a1 + 16)] / 2) >= 4)
      v9 = 4;
    else
      v9 = (uint64_t)&v8[-*(_QWORD *)(a1 + 16)] / 2;
  }
  else
  {
    v9 = 0;
  }
  if (v6 != v8)
    goto LABEL_36;
  memmove(*(void **)(a1 + 16), &v6[-v9], v9);
  if (*(_BYTE *)(a1 + 402))
  {
    v10 = fread((void *)(v9 + *(_QWORD *)(a1 + 16)), 1uLL, *(_QWORD *)(a1 + 32) - (v9 + *(_QWORD *)(a1 + 16)), *(FILE **)(a1 + 120));
    if (v10)
    {
      v6 = (unsigned __int8 *)(*(_QWORD *)(a1 + 16) + v9);
      v11 = &v6[v10];
LABEL_35:
      *(_QWORD *)(a1 + 24) = v6;
      *(_QWORD *)(a1 + 32) = v11;
LABEL_36:
      result = *v6;
      goto LABEL_37;
    }
  }
  else
  {
    v12 = *(_BYTE **)(a1 + 72);
    v13 = *(_BYTE **)(a1 + 80);
    if (v13 == v12)
    {
      v14 = *(_QWORD *)(a1 + 80);
    }
    else
    {
      memmove(*(void **)(a1 + 64), v12, v13 - v12);
      v13 = *(_BYTE **)(a1 + 72);
      v14 = *(_QWORD *)(a1 + 80);
    }
    v15 = *(_QWORD *)(a1 + 64);
    v16 = (void *)(v15 + v14 - (_QWORD)v13);
    *(_QWORD *)(a1 + 72) = v16;
    if (v15 == a1 + 88)
      v17 = 8;
    else
      v17 = *(_QWORD *)(a1 + 96);
    v18 = v15 + v17;
    *(_QWORD *)(a1 + 80) = v18;
    v19 = *(FILE **)(a1 + 120);
    v20 = v18 - (_QWORD)v16;
    if (v20 >= *(_QWORD *)(a1 + 112) - v9)
      v21 = *(_QWORD *)(a1 + 112) - v9;
    else
      v21 = v20;
    v22 = *(_OWORD *)(a1 + 216);
    *(_OWORD *)(a1 + 328) = *(_OWORD *)(a1 + 200);
    *(_OWORD *)(a1 + 344) = v22;
    v23 = *(_OWORD *)(a1 + 248);
    *(_OWORD *)(a1 + 360) = *(_OWORD *)(a1 + 232);
    *(_OWORD *)(a1 + 376) = v23;
    v24 = *(_OWORD *)(a1 + 152);
    *(_OWORD *)(a1 + 264) = *(_OWORD *)(a1 + 136);
    *(_OWORD *)(a1 + 280) = v24;
    v25 = *(_OWORD *)(a1 + 184);
    *(_OWORD *)(a1 + 296) = *(_OWORD *)(a1 + 168);
    *(_OWORD *)(a1 + 312) = v25;
    v26 = fread(v16, 1uLL, v21, v19);
    if (v26)
    {
      v27 = v26;
      v28 = *(_QWORD *)(a1 + 128);
      if (!v28)
        std::__throw_bad_cast[abi:ne180100]();
      v29 = *(_QWORD *)(a1 + 64);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a1 + 72) + v27;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v28 + 32))(v28, a1 + 136, v29) == 3)
      {
        v6 = *(unsigned __int8 **)(a1 + 64);
        v11 = *(unsigned __int8 **)(a1 + 80);
        *(_QWORD *)(a1 + 16) = v6;
        goto LABEL_35;
      }
      v11 = v32;
      v6 = (unsigned __int8 *)(*(_QWORD *)(a1 + 16) + v9);
      if (v32 != v6)
        goto LABEL_35;
    }
  }
  result = 0xFFFFFFFFLL;
LABEL_37:
  v31 = *(char **)(a1 + 16);
  v30 = (_QWORD *)(a1 + 16);
  if (v31 == &v33)
  {
    *v30 = 0;
    v30[1] = 0;
    v30[2] = 0;
  }
  return result;
}

BOOL std::filebuf::__read_mode(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_DWORD *)(a1 + 396);
  if ((v1 & 8) == 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    v2 = 96;
    if (!*(_BYTE *)(a1 + 402))
      v2 = 112;
    v3 = 64;
    if (!*(_BYTE *)(a1 + 402))
      v3 = 104;
    v4 = *(_QWORD *)(a1 + v3);
    v5 = v4 + *(_QWORD *)(a1 + v2);
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 24) = v5;
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 396) = 8;
  }
  return (v1 & 8) == 0;
}

void std::__throw_bad_cast[abi:ne180100]()
{
  std::bad_cast *exception;
  std::bad_cast *v1;

  exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_cast::bad_cast(exception);
  __cxa_throw(v1, MEMORY[0x1E0DE5190], MEMORY[0x1E0DE5148]);
}

uint64_t std::filebuf::pbackfail(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  if (!*(_QWORD *)(a1 + 120))
    return 0xFFFFFFFFLL;
  v2 = *(_QWORD *)(a1 + 24);
  if (*(_QWORD *)(a1 + 16) >= v2)
    return 0xFFFFFFFFLL;
  if ((_DWORD)a2 == -1)
  {
    a2 = 0;
    *(_QWORD *)(a1 + 24) = v2 - 1;
    return a2;
  }
  if ((*(_BYTE *)(a1 + 392) & 0x10) == 0 && *(unsigned __int8 *)(v2 - 1) != a2)
    return 0xFFFFFFFFLL;
  *(_QWORD *)(a1 + 24) = v2 - 1;
  *(_BYTE *)(v2 - 1) = a2;
  return a2;
}

uint64_t std::filebuf::overflow(uint64_t a1, unsigned int a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  size_t v8;
  FILE *v9;
  const void *v10;
  uint64_t v12;
  unsigned int v13;
  const void *v14;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;

  if (!*(_QWORD *)(a1 + 120))
    return 0xFFFFFFFFLL;
  std::filebuf::__write_mode(a1);
  v4 = *(char **)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 40);
  if (a2 == -1)
  {
    v7 = *(_BYTE **)(a1 + 40);
  }
  else
  {
    if (!v4)
    {
      v4 = &v18;
      *(_QWORD *)(a1 + 40) = &v18;
      *(_QWORD *)(a1 + 48) = &v18;
      *(_QWORD *)(a1 + 56) = &v19;
    }
    *v4 = a2;
    v7 = *(_BYTE **)(a1 + 40);
    v4 = (char *)(*(_QWORD *)(a1 + 48) + 1);
    *(_QWORD *)(a1 + 48) = v4;
  }
  v8 = v4 - v7;
  if (v4 == v7)
    goto LABEL_12;
  if (!*(_BYTE *)(a1 + 402))
  {
    v17 = *(_QWORD *)(a1 + 64);
    v12 = *(_QWORD *)(a1 + 128);
    if (!v12)
LABEL_22:
      std::__throw_bad_cast[abi:ne180100]();
    while (1)
    {
      v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 24))(v12, a1 + 136);
      v10 = *(const void **)(a1 + 40);
      if (v16 == v10)
        return 0xFFFFFFFFLL;
      if (v13 == 3)
      {
        v8 = *(_QWORD *)(a1 + 48) - (_QWORD)v10;
        v9 = *(FILE **)(a1 + 120);
        goto LABEL_10;
      }
      if (v13 > 1)
        return 0xFFFFFFFFLL;
      v14 = *(const void **)(a1 + 64);
      if (fwrite(v14, 1uLL, v17 - (_QWORD)v14, *(FILE **)(a1 + 120)) != v17 - (_QWORD)v14)
        return 0xFFFFFFFFLL;
      if (v13 != 1)
        goto LABEL_11;
      v15 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)(a1 + 40) = v16;
      *(_QWORD *)(a1 + 56) = v15;
      v12 = *(_QWORD *)(a1 + 128);
      if (!v12)
        goto LABEL_22;
    }
  }
  v9 = *(FILE **)(a1 + 120);
  v10 = v7;
LABEL_10:
  if (fwrite(v10, 1uLL, v8, v9) != v8)
    return 0xFFFFFFFFLL;
LABEL_11:
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = v5;
LABEL_12:
  if (a2 == -1)
    return 0;
  else
    return a2;
}

uint64_t std::filebuf::__write_mode(uint64_t result)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if ((*(_BYTE *)(result + 396) & 0x10) == 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = 0;
    v1 = *(_QWORD *)(result + 96);
    if (v1 < 9)
    {
      *(_QWORD *)(result + 40) = 0;
      *(_QWORD *)(result + 48) = 0;
      *(_QWORD *)(result + 56) = 0;
    }
    else if (*(_BYTE *)(result + 402))
    {
      v2 = *(_QWORD *)(result + 64);
      *(_QWORD *)(result + 40) = v2;
      *(_QWORD *)(result + 48) = v2;
      *(_QWORD *)(result + 56) = v1 + v2 - 1;
    }
    else
    {
      v3 = *(_QWORD *)(result + 104);
      v4 = *(_QWORD *)(result + 112) + v3 - 1;
      *(_QWORD *)(result + 40) = v3;
      *(_QWORD *)(result + 48) = v3;
      *(_QWORD *)(result + 56) = v4;
    }
    *(_DWORD *)(result + 396) = 16;
  }
  return result;
}

uint64_t std::filebuf::setbuf(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  unint64_t v9;

  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  if (*(_BYTE *)(a1 + 400))
  {
    v6 = *(_QWORD *)(a1 + 64);
    if (v6)
      MEMORY[0x194021E14](v6, 0x1000C8077774924);
  }
  if (*(_BYTE *)(a1 + 401))
  {
    v7 = *(_QWORD *)(a1 + 104);
    if (v7)
      MEMORY[0x194021E14](v7, 0x1000C8077774924);
  }
  *(_QWORD *)(a1 + 96) = a3;
  if ((unint64_t)a3 < 9)
  {
    v8 = 0;
    *(_QWORD *)(a1 + 64) = a1 + 88;
    *(_QWORD *)(a1 + 96) = 8;
  }
  else if (a2 && *(_BYTE *)(a1 + 402))
  {
    v8 = 0;
    *(_QWORD *)(a1 + 64) = a2;
  }
  else
  {
    *(_QWORD *)(a1 + 64) = operator new[]();
    v8 = 1;
  }
  *(_BYTE *)(a1 + 400) = v8;
  if (*(_BYTE *)(a1 + 402))
  {
    *(_BYTE *)(a1 + 401) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
  }
  else
  {
    if (a3 <= 8)
      v9 = 8;
    else
      v9 = a3;
    *(_QWORD *)(a1 + 112) = v9;
    if (a2 && v9 >= 9)
    {
      *(_QWORD *)(a1 + 104) = a2;
      *(_BYTE *)(a1 + 401) = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 104) = operator new[]();
      *(_BYTE *)(a1 + 401) = 1;
    }
  }
  return a1;
}

__n128 std::filebuf::seekoff@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  int v9;
  __n128 result;
  int v11;
  off_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v5 = *(_QWORD *)(a1 + 128);
  if (!v5)
    std::__throw_bad_cast[abi:ne180100]();
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  if (!*(_QWORD *)(a1 + 120)
    || (v11 = v9, a2) && v9 < 1
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1)
    || a3 >= 3
    || (v11 <= 0 ? (v12 = 0) : (v12 = v11 * a2), fseeko(*(FILE **)(a1 + 120), v12, a3)))
  {
    result.n128_u64[0] = 0;
    *(_OWORD *)(a4 + 96) = 0u;
    *(_OWORD *)(a4 + 112) = 0u;
    *(_OWORD *)(a4 + 64) = 0u;
    *(_OWORD *)(a4 + 80) = 0u;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_QWORD *)(a4 + 128) = -1;
  }
  else
  {
    *(_QWORD *)(a4 + 128) = ftello(*(FILE **)(a1 + 120));
    v13 = *(_OWORD *)(a1 + 216);
    *(_OWORD *)(a4 + 64) = *(_OWORD *)(a1 + 200);
    *(_OWORD *)(a4 + 80) = v13;
    v14 = *(_OWORD *)(a1 + 248);
    *(_OWORD *)(a4 + 96) = *(_OWORD *)(a1 + 232);
    *(_OWORD *)(a4 + 112) = v14;
    v15 = *(_OWORD *)(a1 + 152);
    *(_OWORD *)a4 = *(_OWORD *)(a1 + 136);
    *(_OWORD *)(a4 + 16) = v15;
    result = *(__n128 *)(a1 + 168);
    v16 = *(_OWORD *)(a1 + 184);
    *(__n128 *)(a4 + 32) = result;
    *(_OWORD *)(a4 + 48) = v16;
  }
  return result;
}

__n128 std::filebuf::seekpos@<Q0>(FILE **a1@<X0>, __n128 *a2@<X1>, uint64_t a3@<X8>)
{
  __n128 result;
  __n128 v7;
  __n128 v8;
  __n128 v9;

  if (!a1[15] || ((unsigned int (*)(FILE **))(*a1)->_cookie)(a1) || fseeko(a1[15], a2[8].n128_i64[0], 0))
  {
    result.n128_u64[0] = 0;
    *(_OWORD *)(a3 + 96) = 0u;
    *(_OWORD *)(a3 + 112) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_QWORD *)(a3 + 128) = -1;
  }
  else
  {
    memmove(a1 + 17, a2, 0x80uLL);
    v7 = a2[7];
    *(__n128 *)(a3 + 96) = a2[6];
    *(__n128 *)(a3 + 112) = v7;
    *(_QWORD *)(a3 + 128) = a2[8].n128_u64[0];
    v8 = a2[3];
    *(__n128 *)(a3 + 32) = a2[2];
    *(__n128 *)(a3 + 48) = v8;
    v9 = a2[5];
    *(__n128 *)(a3 + 64) = a2[4];
    *(__n128 *)(a3 + 80) = v9;
    result = a2[1];
    *(__n128 *)a3 = *a2;
    *(__n128 *)(a3 + 16) = result;
  }
  return result;
}

uint64_t std::filebuf::sync(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  const void *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  int v12;
  uint64_t v13;
  int v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 120))
    return 0;
  v2 = *(_QWORD *)(a1 + 128);
  if (!v2)
    std::__throw_bad_cast[abi:ne180100]();
  v3 = *(_DWORD *)(a1 + 396);
  if ((v3 & 0x10) != 0)
  {
    if (*(_QWORD *)(a1 + 48) == *(_QWORD *)(a1 + 40)
      || (v4 = 0xFFFFFFFFLL,
          (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, 0xFFFFFFFFLL) != -1))
    {
      while (1)
      {
        v5 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD, __int128 *))(**(_QWORD **)(a1 + 128) + 40))(*(_QWORD *)(a1 + 128), a1 + 136, *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 64) + *(_QWORD *)(a1 + 96), &v21);
        v6 = *(const void **)(a1 + 64);
        v7 = v21 - (_QWORD)v6;
        if (fwrite(v6, 1uLL, v21 - (_QWORD)v6, *(FILE **)(a1 + 120)) != v7)
          break;
        if (v5 != 1)
        {
          if (v5 == 2 || fflush(*(FILE **)(a1 + 120)))
            return 0xFFFFFFFFLL;
          return 0;
        }
      }
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    if ((v3 & 8) == 0)
      return 0;
    v8 = *(_OWORD *)(a1 + 344);
    v25 = *(_OWORD *)(a1 + 328);
    v26 = v8;
    v9 = *(_OWORD *)(a1 + 376);
    v27 = *(_OWORD *)(a1 + 360);
    v28 = v9;
    v10 = *(_OWORD *)(a1 + 280);
    v21 = *(_OWORD *)(a1 + 264);
    v22 = v10;
    v11 = *(_OWORD *)(a1 + 312);
    v23 = *(_OWORD *)(a1 + 296);
    v24 = v11;
    if (*(_BYTE *)(a1 + 402))
    {
      v12 = 0;
      v13 = *(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24);
    }
    else
    {
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
      v13 = *(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72);
      if (v14 < 1)
      {
        if (*(_QWORD *)(a1 + 24) == *(_QWORD *)(a1 + 32))
        {
          v12 = 0;
        }
        else
        {
          v13 = v13
              + *(_QWORD *)(a1 + 72)
              - (*(_QWORD *)(a1 + 64)
               + (*(int (**)(_QWORD, __int128 *, _QWORD))(**(_QWORD **)(a1 + 128) + 64))(*(_QWORD *)(a1 + 128), &v21, *(_QWORD *)(a1 + 64)));
          v12 = 1;
        }
      }
      else
      {
        v12 = 0;
        v13 += (*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) * v14;
      }
    }
    if (fseeko(*(FILE **)(a1 + 120), -v13, 1))
      return 0xFFFFFFFFLL;
    if (v12)
    {
      v16 = v26;
      *(_OWORD *)(a1 + 200) = v25;
      *(_OWORD *)(a1 + 216) = v16;
      v17 = v28;
      *(_OWORD *)(a1 + 232) = v27;
      *(_OWORD *)(a1 + 248) = v17;
      v18 = v22;
      *(_OWORD *)(a1 + 136) = v21;
      *(_OWORD *)(a1 + 152) = v18;
      v19 = v24;
      *(_OWORD *)(a1 + 168) = v23;
      *(_OWORD *)(a1 + 184) = v19;
    }
    v4 = 0;
    v20 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 72) = v20;
    *(_QWORD *)(a1 + 80) = v20;
    *(_DWORD *)(a1 + 396) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  return v4;
}

uint64_t std::filebuf::imbue(uint64_t a1, const std::locale *a2)
{
  const std::locale::facet *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  v4 = std::locale::use_facet(a2, &std::codecvt<char,char,__mbstate_t>::id);
  *(_QWORD *)(a1 + 128) = v4;
  LODWORD(a2) = *(unsigned __int8 *)(a1 + 402);
  result = ((uint64_t (*)(const std::locale::facet *))v4->__vftable[2].~facet_0)(v4);
  *(_BYTE *)(a1 + 402) = result;
  if ((_DWORD)a2 != (_DWORD)result)
  {
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    if ((_DWORD)result)
    {
      if (*(_BYTE *)(a1 + 400))
      {
        result = *(_QWORD *)(a1 + 64);
        if (result)
          result = MEMORY[0x194021E14](result, 0x1000C8077774924);
      }
      *(_BYTE *)(a1 + 400) = *(_BYTE *)(a1 + 401);
      v6 = *(_QWORD *)(a1 + 112);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 104);
      *(_BYTE *)(a1 + 401) = 0;
      *(_QWORD *)(a1 + 104) = 0;
      *(_QWORD *)(a1 + 112) = 0;
      *(_QWORD *)(a1 + 96) = v6;
    }
    else if (*(_BYTE *)(a1 + 400) || (v7 = *(_QWORD *)(a1 + 64), v7 == a1 + 88))
    {
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 96);
      result = operator new[]();
      *(_QWORD *)(a1 + 104) = result;
      *(_BYTE *)(a1 + 401) = 1;
    }
    else
    {
      v8 = *(_QWORD *)(a1 + 96);
      *(_QWORD *)(a1 + 104) = v7;
      *(_QWORD *)(a1 + 112) = v8;
      *(_BYTE *)(a1 + 401) = 0;
      result = operator new[]();
      *(_QWORD *)(a1 + 64) = result;
      *(_BYTE *)(a1 + 400) = 1;
    }
  }
  return result;
}

uint64_t std::stringbuf::~stringbuf(uint64_t a1)
{
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  std::locale::~locale((std::locale *)(a1 + 8));
  return a1;
}

void std::stringbuf::~stringbuf(uint64_t a1)
{
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  std::locale::~locale((std::locale *)(a1 + 8));
  JUMPOUT(0x194021E38);
}

uint64_t std::stringbuf::seekpos(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a1 + 32))(a1, *(_QWORD *)(a2 + 128), 0, a3);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  std::ios_base *v2;

  v2 = (std::ios_base *)(a1 + 128);
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::locale::~locale((std::locale *)(a1 + 32));
  std::ios_base::~ios_base(v2);
  return a1;
}

void std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  std::ios_base *v2;

  v2 = (std::ios_base *)(a1 + 128);
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::locale::~locale((std::locale *)(a1 + 32));
  std::ios_base::~ios_base(v2);
  JUMPOUT(0x194021E38);
}

void `non-virtual thunk to'std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  std::ios_base *v2;

  v2 = (std::ios_base *)(a1 + 112);
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::locale::~locale((std::locale *)(a1 + 16));
  std::ios_base::~ios_base(v2);
}

{
  std::ios_base *v2;

  v2 = (std::ios_base *)(a1 + 112);
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::locale::~locale((std::locale *)(a1 + 16));
  std::ios_base::~ios_base(v2);
  JUMPOUT(0x194021E38);
}

void `virtual thunk to'std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if (v1[111] < 0)
    operator delete(*((void **)v1 + 11));
  std::locale::~locale((std::locale *)v1 + 4);
  std::ios_base::~ios_base((std::ios_base *)(v1 + 128));
}

{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if (v1[111] < 0)
    operator delete(*((void **)v1 + 11));
  std::locale::~locale((std::locale *)v1 + 4);
  std::ios_base::~ios_base((std::ios_base *)(v1 + 128));
  JUMPOUT(0x194021E38);
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  std::ios_base *v2;

  v2 = (std::ios_base *)(a1 + 112);
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::locale::~locale((std::locale *)(a1 + 16));
  std::ios_base::~ios_base(v2);
  return a1;
}

void std::ostringstream::~ostringstream(uint64_t a1)
{
  std::ios_base *v2;

  v2 = (std::ios_base *)(a1 + 112);
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::locale::~locale((std::locale *)(a1 + 16));
  std::ios_base::~ios_base(v2);
  JUMPOUT(0x194021E38);
}

void `virtual thunk to'std::ostringstream::~ostringstream(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if (v1[95] < 0)
    operator delete(*((void **)v1 + 9));
  std::locale::~locale((std::locale *)v1 + 2);
  std::ios_base::~ios_base((std::ios_base *)(v1 + 112));
}

{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if (v1[95] < 0)
    operator delete(*((void **)v1 + 9));
  std::locale::~locale((std::locale *)v1 + 2);
  std::ios_base::~ios_base((std::ios_base *)(v1 + 112));
  JUMPOUT(0x194021E38);
}

uint64_t std::istringstream::~istringstream(uint64_t a1)
{
  std::ios_base *v2;

  v2 = (std::ios_base *)(a1 + 120);
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  std::locale::~locale((std::locale *)(a1 + 24));
  std::ios_base::~ios_base(v2);
  return a1;
}

void std::istringstream::~istringstream(uint64_t a1)
{
  std::ios_base *v2;

  v2 = (std::ios_base *)(a1 + 120);
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  std::locale::~locale((std::locale *)(a1 + 24));
  std::ios_base::~ios_base(v2);
  JUMPOUT(0x194021E38);
}

void `virtual thunk to'std::istringstream::~istringstream(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if (v1[103] < 0)
    operator delete(*((void **)v1 + 10));
  std::locale::~locale((std::locale *)v1 + 3);
  std::ios_base::~ios_base((std::ios_base *)(v1 + 120));
}

{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if (v1[103] < 0)
    operator delete(*((void **)v1 + 10));
  std::locale::~locale((std::locale *)v1 + 3);
  std::ios_base::~ios_base((std::ios_base *)(v1 + 120));
  JUMPOUT(0x194021E38);
}

void (__cdecl ***std::ifstream::~ifstream(void (__cdecl ***a1)(std::ifstream *__hidden this)))(std::ifstream *__hidden this)
{
  std::ios_base *v2;

  v2 = (std::ios_base *)(a1 + 53);
  std::filebuf::~filebuf((uint64_t)(a1 + 2));
  std::ios_base::~ios_base(v2);
  return a1;
}

void std::ifstream::~ifstream(void (__cdecl ***a1)(std::ifstream *__hidden this))
{
  std::ios_base *v1;

  v1 = (std::ios_base *)(a1 + 53);
  std::filebuf::~filebuf((uint64_t)(a1 + 2));
  std::ios_base::~ios_base(v1);
  JUMPOUT(0x194021E38);
}

void `virtual thunk to'std::ifstream::~ifstream(_QWORD *a1)
{
  void (__cdecl ***v1)(std::ifstream *__hidden);
  std::ios_base *v2;

  v1 = (void (__cdecl ***)(std::ifstream *__hidden))((char *)a1 + *(_QWORD *)(*a1 - 24));
  v2 = (std::ios_base *)(v1 + 53);
  std::filebuf::~filebuf((uint64_t)(v1 + 2));
  std::ios_base::~ios_base(v2);
}

{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  std::filebuf::~filebuf((uint64_t)(v1 + 16));
  std::ios_base::~ios_base((std::ios_base *)(v1 + 424));
  JUMPOUT(0x194021E38);
}

void (__cdecl ***std::ofstream::~ofstream(void (__cdecl ***a1)(std::ofstream *__hidden this)))(std::ofstream *__hidden this)
{
  std::ios_base *v2;

  v2 = (std::ios_base *)(a1 + 52);
  std::filebuf::~filebuf((uint64_t)(a1 + 1));
  std::ios_base::~ios_base(v2);
  return a1;
}

void std::ofstream::~ofstream(void (__cdecl ***a1)(std::ofstream *__hidden this))
{
  std::ios_base *v1;

  v1 = (std::ios_base *)(a1 + 52);
  std::filebuf::~filebuf((uint64_t)(a1 + 1));
  std::ios_base::~ios_base(v1);
  JUMPOUT(0x194021E38);
}

void `virtual thunk to'std::ofstream::~ofstream(_QWORD *a1)
{
  void (__cdecl ***v1)(std::ofstream *__hidden);
  std::ios_base *v2;

  v1 = (void (__cdecl ***)(std::ofstream *__hidden))((char *)a1 + *(_QWORD *)(*a1 - 24));
  v2 = (std::ios_base *)(v1 + 52);
  std::filebuf::~filebuf((uint64_t)(v1 + 1));
  std::ios_base::~ios_base(v2);
}

{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  std::filebuf::~filebuf((uint64_t)(v1 + 8));
  std::ios_base::~ios_base((std::ios_base *)(v1 + 416));
  JUMPOUT(0x194021E38);
}

uint64_t std::istreambuf_iterator<char>::equal[abi:ne180100](_QWORD **a1, _QWORD **a2)
{
  _QWORD *v4;
  _BOOL4 v5;
  _QWORD *v6;
  _BOOL4 v7;

  v4 = *a1;
  if (v4)
  {
    if (v4[3] != v4[4])
    {
      v5 = 0;
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(_QWORD *))(*v4 + 72))(v4) != -1)
    {
      v5 = *a1 == 0;
      goto LABEL_8;
    }
    *a1 = 0;
  }
  v5 = 1;
LABEL_8:
  v6 = *a2;
  if (!*a2)
    goto LABEL_14;
  if (v6[3] == v6[4])
  {
    if ((*(unsigned int (**)(_QWORD *))(*v6 + 72))(v6) != -1)
    {
      v7 = *a2 == 0;
      return v5 ^ v7 ^ 1u;
    }
    *a2 = 0;
LABEL_14:
    v7 = 1;
    return v5 ^ v7 ^ 1u;
  }
  v7 = 0;
  return v5 ^ v7 ^ 1u;
}

std::DoIOSInit *std::DoIOSInit::DoIOSInit(std::DoIOSInit *this)
{
  uint64_t *v2;
  std::locale::__imp **v3;
  std::locale::__imp **v4;
  void *v5;
  std::ostream_vtbl *v6;
  void *v7;
  std::wostream_vtbl *v8;

  v2 = (uint64_t *)MEMORY[0x1E0C80C18];
  std::__stdinbuf<char>::__stdinbuf((uint64_t)&std::__cin, *MEMORY[0x1E0C80C18], (uint64_t)&std::mb_cin);
  std::cin.__gc_ = 0;
  std::ios_base::init(&stru_1ECCF0EF8, &std::__cin);
  qword_1ECCF0F80 = 0;
  dword_1ECCF0F88 = -1;
  v3 = (std::locale::__imp **)MEMORY[0x1E0C80C20];
  std::__stdoutbuf<char>::__stdoutbuf((uint64_t)&std::__cout, (std::locale::__imp *)*MEMORY[0x1E0C80C20], (uint64_t)&std::mb_cout);
  std::ios_base::init(&stru_1ECCF1040, &std::__cout);
  qword_1ECCF10C8 = 0;
  dword_1ECCF10D0 = -1;
  v4 = (std::locale::__imp **)MEMORY[0x1E0C80C10];
  std::__stdoutbuf<char>::__stdoutbuf((uint64_t)&std::__cerr, (std::locale::__imp *)*MEMORY[0x1E0C80C10], (uint64_t)&std::mb_cerr);
  std::ios_base::init(&stru_1ECCF1180, &std::__cerr);
  qword_1ECCF1208 = 0;
  dword_1ECCF1210 = -1;
  v5 = *(void **)((char *)&std::cerr + (unint64_t)std::cerr.__vftable[-2].~basic_ostream_0 + 40);
  std::ios_base::init(&stru_1ECCF12C0, v5);
  qword_1ECCF1348 = 0;
  dword_1ECCF1350 = -1;
  *(_QWORD *)((char *)&std::cin + (unint64_t)std::cin.__vftable[-2].~basic_istream_0 + 136) = &std::cout;
  v6 = std::cerr.__vftable;
  *(_DWORD *)((char *)&std::cerr + (unint64_t)std::cerr.__vftable[-2].~basic_ostream_0 + 8) |= 0x2000u;
  *(std::ostream *)((char *)&std::cerr + (unint64_t)v6[-2].~basic_ostream_0 + 136) = (std::ostream)&std::cout;
  std::__stdinbuf<wchar_t>::__stdinbuf((uint64_t)&std::__wcin, *v2, (uint64_t)&std::mb_wcin);
  std::wcin.__gc_ = 0;
  std::ios_base::init(&stru_1ECCF0FA0, &std::__wcin);
  qword_1ECCF1028 = 0;
  dword_1ECCF1030 = -1;
  std::__stdoutbuf<wchar_t>::__stdoutbuf((uint64_t)&std::__wcout, *v3, (uint64_t)&std::mb_wcout);
  std::ios_base::init(&stru_1ECCF10E0, &std::__wcout);
  qword_1ECCF1168 = 0;
  dword_1ECCF1170 = -1;
  std::__stdoutbuf<wchar_t>::__stdoutbuf((uint64_t)&std::__wcerr, *v4, (uint64_t)&std::mb_wcerr);
  std::ios_base::init(&stru_1ECCF1220, &std::__wcerr);
  qword_1ECCF12A8 = 0;
  dword_1ECCF12B0 = -1;
  v7 = *(void **)((char *)&std::wcerr + (unint64_t)std::wcerr.__vftable[-2].~basic_ostream_0 + 40);
  std::ios_base::init(&stru_1ECCF1360, v7);
  qword_1ECCF13E8 = 0;
  dword_1ECCF13F0 = -1;
  *(_QWORD *)((char *)&std::wcin + (unint64_t)std::wcin.__vftable[-2].~basic_istream_0 + 136) = &std::wcout;
  v8 = std::wcerr.__vftable;
  *(_DWORD *)((char *)&std::wcerr + (unint64_t)std::wcerr.__vftable[-2].~basic_ostream_0 + 8) |= 0x2000u;
  *(std::wostream *)((char *)&std::wcerr + (unint64_t)v8[-2].~basic_ostream_0 + 136) = (std::wostream)&std::wcout;
  return this;
}

void sub_191FDC4FC(_Unwind_Exception *a1)
{
  std::wios::~wios(&stru_1ECCF1360);
  _Unwind_Resume(a1);
}

void std::DoIOSInit::~DoIOSInit(std::DoIOSInit *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  std::ostream::flush(&std::cout, a2);
  std::ostream::flush(&std::clog, v2);
  std::wostream::flush(&std::wcout, v3);
  std::wostream::flush(&std::wclog, v4);
}

std::ios_base::Init *__cdecl std::ios_base::Init::Init(std::ios_base::Init *this)
{
  unsigned __int8 v2;

  {
    std::DoIOSInit::DoIOSInit((std::DoIOSInit *)&std::ios_base::Init::Init(void)::init_the_streams);
    __cxa_atexit((void (*)(void *))std::DoIOSInit::~DoIOSInit, &std::ios_base::Init::Init(void)::init_the_streams, &dword_191FAF000);
  }
  return this;
}

void sub_191FDC65C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::__stdinbuf<char>::__stdinbuf(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  std::locale v8;

  v6 = std::streambuf::basic_streambuf(a1);
  *(_QWORD *)v6 = &off_1E2E59120;
  *(_QWORD *)(v6 + 64) = a2;
  *(_QWORD *)(v6 + 80) = a3;
  *(_DWORD *)(v6 + 92) = -1;
  *(_BYTE *)(v6 + 96) = 0;
  std::locale::locale(&v8, (const std::locale *)(v6 + 8));
  (*(void (**)(uint64_t, std::locale *))(*(_QWORD *)a1 + 16))(a1, &v8);
  std::locale::~locale(&v8);
  return a1;
}

void sub_191FDC6FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale *v10;

  std::locale::~locale(&a10);
  std::streambuf::~streambuf(v10);
  _Unwind_Resume(a1);
}

void std::__stdinbuf<char>::~__stdinbuf(std::locale *a1)
{
  std::streambuf::~streambuf(a1);
  JUMPOUT(0x194021E38);
}

uint64_t std::__stdinbuf<char>::imbue(uint64_t a1, std::locale *this)
{
  const std::locale::facet *v3;
  uint64_t result;

  v3 = std::locale::use_facet(this, &std::codecvt<char,char,__mbstate_t>::id);
  *(_QWORD *)(a1 + 72) = v3;
  *(_DWORD *)(a1 + 88) = ((uint64_t (*)(const std::locale::facet *))v3->__vftable[2].~facet)(v3);
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 56))(*(_QWORD *)(a1 + 72));
  *(_BYTE *)(a1 + 97) = result;
  if (*(int *)(a1 + 88) >= 9)
    std::__throw_runtime_error("unsupported locale for standard input");
  return result;
}

uint64_t std::__stdinbuf<char>::underflow(uint64_t a1)
{
  return std::__stdinbuf<char>::__getchar(a1, 0);
}

uint64_t std::__stdinbuf<char>::uflow(uint64_t a1)
{
  return std::__stdinbuf<char>::__getchar(a1, 1);
}

uint64_t std::__stdinbuf<char>::pbackfail(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  BOOL v4;
  int v5;
  char *v6;
  _BYTE v8[15];
  char v9;
  char *v10;
  char v11;
  _BYTE v12[7];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a2 == -1)
  {
    if (!*(_BYTE *)(a1 + 96))
    {
      v3 = *(unsigned int *)(a1 + 92);
      v4 = (_DWORD)v3 != -1;
LABEL_16:
      *(_BYTE *)(a1 + 96) = v4;
      return v3;
    }
  }
  else
  {
    v3 = a2;
    if (*(_BYTE *)(a1 + 97))
    {
      if (*(_BYTE *)(a1 + 96) && ungetc(*(_DWORD *)(a1 + 92), *(FILE **)(a1 + 64)) == -1)
        return 0xFFFFFFFFLL;
      goto LABEL_15;
    }
    if (!*(_BYTE *)(a1 + 96))
    {
LABEL_15:
      *(_DWORD *)(a1 + 92) = v3;
      v4 = 1;
      goto LABEL_16;
    }
    v9 = *(_DWORD *)(a1 + 92);
    v5 = (*(uint64_t (**)(_QWORD, _QWORD, char *, char **, _BYTE *, char *, uint64_t *, char **))(**(_QWORD **)(a1 + 72) + 24))(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), &v9, &v10, v8, &v11, &v13, &v10);
    if ((v5 - 1) >= 2)
    {
      if (v5 == 3)
      {
        v11 = *(_DWORD *)(a1 + 92);
        v10 = v12;
      }
      while (1)
      {
        v6 = v10;
        if (v10 <= &v11)
          break;
        --v10;
        if (ungetc(*(v6 - 1), *(FILE **)(a1 + 64)) == -1)
          return 0xFFFFFFFFLL;
      }
      goto LABEL_15;
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t std::__stdinbuf<char>::__getchar(uint64_t a1, int a2)
{
  char v2;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  __int128 *v10;
  int v11;
  _OWORD *v12;
  int v13;
  uint64_t v14;
  unsigned __int8 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[8];
  uint64_t v27;

  v2 = a2;
  v27 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 96))
  {
    v4 = *(unsigned int *)(a1 + 92);
    if (a2)
    {
      *(_DWORD *)(a1 + 92) = -1;
      *(_BYTE *)(a1 + 96) = 0;
    }
    return v4;
  }
  if (!*(_BYTE *)(a1 + 97))
  {
    v6 = 0;
    v7 = *(_DWORD *)(a1 + 88);
    if (v7 <= 1)
      v8 = 1;
    else
      v8 = v7;
    while (1)
    {
      v9 = getc(*(FILE **)(a1 + 64));
      if (v9 == -1)
        return 0xFFFFFFFFLL;
      v26[v6++] = v9;
      if (v8 == v6)
      {
        while (1)
        {
          v10 = *(__int128 **)(a1 + 80);
          v22 = v10[4];
          v23 = v10[5];
          v24 = v10[6];
          v25 = v10[7];
          v18 = *v10;
          v19 = v10[1];
          v20 = v10[2];
          v21 = v10[3];
          v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 32))(*(_QWORD *)(a1 + 72));
          if (v11 != 1)
            break;
          v12 = *(_OWORD **)(a1 + 80);
          v12[4] = v22;
          v12[5] = v23;
          v12[6] = v24;
          v12[7] = v25;
          *v12 = v18;
          v12[1] = v19;
          v12[2] = v20;
          v12[3] = v21;
          if (v8 == 8)
            return 0xFFFFFFFFLL;
          v13 = getc(*(FILE **)(a1 + 64));
          if (v13 == -1)
            return 0xFFFFFFFFLL;
          v26[v8++] = v13;
        }
        if (v11 == 2)
          return 0xFFFFFFFFLL;
        if (v11 == 3)
          v17 = v26[0];
        if ((v2 & 1) != 0)
        {
          v4 = v17;
          goto LABEL_7;
        }
        v14 = v8;
        while (v14-- >= 1)
        {
          if (ungetc(v26[v14], *(FILE **)(a1 + 64)) == -1)
            return 0xFFFFFFFFLL;
        }
        return v17;
      }
    }
  }
  v5 = getc(*(FILE **)(a1 + 64));
  if (v5 == -1)
    return 0xFFFFFFFFLL;
  v4 = v5;
  if ((v2 & 1) != 0)
  {
LABEL_7:
    *(_DWORD *)(a1 + 92) = v4;
  }
  else if (ungetc(v5, *(FILE **)(a1 + 64)) == -1)
  {
    return 0xFFFFFFFFLL;
  }
  else
  {
    return v4;
  }
  return v4;
}

uint64_t std::__stdoutbuf<char>::__stdoutbuf(uint64_t a1, std::locale::__imp *a2, uint64_t a3)
{
  std::locale *v6;
  const std::locale::facet *v7;
  std::locale v9;

  v6 = (std::locale *)std::streambuf::basic_streambuf(a1);
  v6->__locale_ = (std::locale::__imp *)&off_1E2E591B8;
  v6[8].__locale_ = a2;
  std::locale::locale(&v9, v6 + 1);
  v7 = std::locale::use_facet(&v9, &std::codecvt<char,char,__mbstate_t>::id);
  std::locale::~locale(&v9);
  *(_QWORD *)(a1 + 72) = v7;
  *(_QWORD *)(a1 + 80) = a3;
  *(_BYTE *)(a1 + 88) = ((uint64_t (*)(const std::locale::facet *))v7->__vftable[2].~facet_0)(v7);
  return a1;
}

void sub_191FDCB9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale *v10;

  std::locale::~locale(&a10);
  std::streambuf::~streambuf(v10);
  _Unwind_Resume(a1);
}

void std::__stdoutbuf<char>::~__stdoutbuf(std::locale *a1)
{
  std::streambuf::~streambuf(a1);
  JUMPOUT(0x194021E38);
}

uint64_t std::__stdoutbuf<char>::imbue(uint64_t a1, const std::locale *a2)
{
  const std::locale::facet *v4;
  uint64_t result;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  v4 = std::locale::use_facet(a2, &std::codecvt<char,char,__mbstate_t>::id);
  *(_QWORD *)(a1 + 72) = v4;
  result = ((uint64_t (*)(const std::locale::facet *))v4->__vftable[2].~facet_0)(v4);
  *(_BYTE *)(a1 + 88) = result;
  return result;
}

uint64_t std::__stdoutbuf<char>::sync(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v5;
  _BYTE __ptr[8];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  do
  {
    v2 = (*(uint64_t (**)(_QWORD, _QWORD, _BYTE *, uint64_t *, uint64_t *))(**(_QWORD **)(a1 + 72) + 40))(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), __ptr, &v7, &v5);
    v3 = v5 - (_QWORD)__ptr;
    if (fwrite(__ptr, 1uLL, v5 - (_QWORD)__ptr, *(FILE **)(a1 + 64)) != v3)
      return 0xFFFFFFFFLL;
  }
  while (v2 == 1);
  if (v2 == 2)
    return 0xFFFFFFFFLL;
  if (fflush(*(FILE **)(a1 + 64)))
    return 0xFFFFFFFFLL;
  else
    return 0;
}

size_t std::__stdoutbuf<char>::xsputn(uint64_t a1, unsigned __int8 *__ptr, int64_t __nitems)
{
  uint64_t v7;

  if (*(_BYTE *)(a1 + 88))
    return fwrite(__ptr, 1uLL, __nitems, *(FILE **)(a1 + 64));
  if (__nitems < 1)
    return 0;
  v7 = 0;
  while ((*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 104))(a1, __ptr[v7]) != -1)
  {
    if (__nitems == ++v7)
      return __nitems;
  }
  return v7;
}

uint64_t std::__stdoutbuf<char>::overflow(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  FILE *v4;
  char *v5;
  char *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  char *v11;
  _BYTE *v12;
  char v13;
  _BYTE __ptr[8];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a2 == -1)
    return 0;
  v2 = a2;
  v13 = a2;
  if (!*(_BYTE *)(a1 + 88))
  {
    v12 = __ptr;
    v7 = &v13;
    while (1)
    {
      v8 = (*(uint64_t (**)(_QWORD, _QWORD, char *, _BYTE *, char **, _BYTE *, uint64_t *, _BYTE **))(**(_QWORD **)(a1 + 72) + 24))(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), v7, __ptr, &v11, __ptr, &v15, &v12);
      if (v11 == v7)
        return 0xFFFFFFFFLL;
      v9 = v8;
      if (v8 == 3)
      {
        v4 = *(FILE **)(a1 + 64);
        v5 = v7;
        goto LABEL_4;
      }
      if (v8 > 1)
        return 0xFFFFFFFFLL;
      v10 = v12 - __ptr;
      if (fwrite(__ptr, 1uLL, v12 - __ptr, *(FILE **)(a1 + 64)) != v10)
        return 0xFFFFFFFFLL;
      v7 = v11;
      if (v9 != 1)
        return v2;
    }
  }
  v4 = *(FILE **)(a1 + 64);
  __ptr[0] = a2;
  v5 = __ptr;
LABEL_4:
  if (fwrite(v5, 1uLL, 1uLL, v4) != 1)
    return 0xFFFFFFFFLL;
  return v2;
}

uint64_t std::__stdinbuf<wchar_t>::__stdinbuf(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  std::locale v8;

  v6 = std::wstreambuf::basic_streambuf(a1);
  *(_QWORD *)v6 = &off_1E2E59250;
  *(_QWORD *)(v6 + 64) = a2;
  *(_QWORD *)(v6 + 80) = a3;
  *(_DWORD *)(v6 + 92) = -1;
  *(_BYTE *)(v6 + 96) = 0;
  std::locale::locale(&v8, (const std::locale *)(v6 + 8));
  (*(void (**)(uint64_t, std::locale *))(*(_QWORD *)a1 + 16))(a1, &v8);
  std::locale::~locale(&v8);
  return a1;
}

void sub_191FDCF6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale *v10;

  std::locale::~locale(&a10);
  std::wstreambuf::~wstreambuf(v10);
  _Unwind_Resume(a1);
}

void std::__stdinbuf<wchar_t>::~__stdinbuf(std::locale *a1)
{
  std::wstreambuf::~wstreambuf(a1);
  JUMPOUT(0x194021E38);
}

uint64_t std::__stdinbuf<wchar_t>::imbue(uint64_t a1, std::locale *this)
{
  const std::locale::facet *v3;
  uint64_t result;

  v3 = std::locale::use_facet(this, &std::codecvt<wchar_t,char,__mbstate_t>::id);
  *(_QWORD *)(a1 + 72) = v3;
  *(_DWORD *)(a1 + 88) = ((uint64_t (*)(const std::locale::facet *))v3->__vftable[2].~facet)(v3);
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 56))(*(_QWORD *)(a1 + 72));
  *(_BYTE *)(a1 + 97) = result;
  if (*(int *)(a1 + 88) >= 9)
    std::__throw_runtime_error("unsupported locale for standard input");
  return result;
}

uint64_t std::__stdinbuf<wchar_t>::underflow(uint64_t a1)
{
  return std::__stdinbuf<wchar_t>::__getchar(a1, 0);
}

uint64_t std::__stdinbuf<wchar_t>::uflow(uint64_t a1)
{
  return std::__stdinbuf<wchar_t>::__getchar(a1, 1);
}

uint64_t std::__stdinbuf<wchar_t>::pbackfail(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  BOOL v4;
  int v5;
  char *v6;
  _BYTE v8[12];
  int v9;
  char *v10;
  char v11;
  _BYTE v12[7];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a2 == -1)
  {
    if (!*(_BYTE *)(a1 + 96))
    {
      v3 = *(unsigned int *)(a1 + 92);
      v4 = (_DWORD)v3 != -1;
LABEL_16:
      *(_BYTE *)(a1 + 96) = v4;
      return v3;
    }
  }
  else
  {
    v3 = a2;
    if (*(_BYTE *)(a1 + 97))
    {
      if (*(_BYTE *)(a1 + 96) && ungetwc(*(_DWORD *)(a1 + 92), *(FILE **)(a1 + 64)) == -1)
        return 0xFFFFFFFFLL;
      goto LABEL_15;
    }
    if (!*(_BYTE *)(a1 + 96))
    {
LABEL_15:
      *(_DWORD *)(a1 + 92) = v3;
      v4 = 1;
      goto LABEL_16;
    }
    v9 = *(_DWORD *)(a1 + 92);
    v5 = (*(uint64_t (**)(_QWORD, _QWORD, int *, char **, _BYTE *, char *, uint64_t *, char **))(**(_QWORD **)(a1 + 72) + 24))(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), &v9, &v10, v8, &v11, &v13, &v10);
    if ((v5 - 1) >= 2)
    {
      if (v5 == 3)
      {
        v11 = *(_DWORD *)(a1 + 92);
        v10 = v12;
      }
      while (1)
      {
        v6 = v10;
        if (v10 <= &v11)
          break;
        --v10;
        if (ungetc(*(v6 - 1), *(FILE **)(a1 + 64)) == -1)
          return 0xFFFFFFFFLL;
      }
      goto LABEL_15;
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t std::__stdinbuf<wchar_t>::__getchar(uint64_t a1, int a2)
{
  char v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  __int128 *v10;
  int v11;
  _OWORD *v12;
  int v13;
  uint64_t v14;
  unsigned int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[8];
  uint64_t v27;

  v2 = a2;
  v27 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 96))
  {
    v4 = *(unsigned int *)(a1 + 92);
    if (a2)
    {
      *(_DWORD *)(a1 + 92) = -1;
      *(_BYTE *)(a1 + 96) = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 97))
  {
    v5 = getwc(*(FILE **)(a1 + 64));
    v4 = v5;
    if ((_DWORD)v5 != -1)
    {
      if ((v2 & 1) != 0)
      {
LABEL_7:
        *(_DWORD *)(a1 + 92) = v4;
      }
      else if (ungetwc(v5, *(FILE **)(a1 + 64)) == -1)
      {
        return 0xFFFFFFFFLL;
      }
      else
      {
        return v4;
      }
    }
  }
  else
  {
    v6 = 0;
    v7 = *(_DWORD *)(a1 + 88);
    if (v7 <= 1)
      v8 = 1;
    else
      v8 = v7;
    do
    {
      v9 = getc(*(FILE **)(a1 + 64));
      if (v9 == -1)
        return 0xFFFFFFFFLL;
      v26[v6++] = v9;
    }
    while (v8 != v6);
    while (1)
    {
      v10 = *(__int128 **)(a1 + 80);
      v22 = v10[4];
      v23 = v10[5];
      v24 = v10[6];
      v25 = v10[7];
      v18 = *v10;
      v19 = v10[1];
      v20 = v10[2];
      v21 = v10[3];
      v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 32))(*(_QWORD *)(a1 + 72));
      if (v11 != 1)
        break;
      v12 = *(_OWORD **)(a1 + 80);
      v12[4] = v22;
      v12[5] = v23;
      v12[6] = v24;
      v12[7] = v25;
      *v12 = v18;
      v12[1] = v19;
      v12[2] = v20;
      v12[3] = v21;
      if (v8 == 8)
        return 0xFFFFFFFFLL;
      v13 = getc(*(FILE **)(a1 + 64));
      if (v13 == -1)
        return 0xFFFFFFFFLL;
      v26[v8++] = v13;
    }
    if (v11 == 2)
      return 0xFFFFFFFFLL;
    if (v11 == 3)
      v17 = v26[0];
    if ((v2 & 1) != 0)
    {
      v4 = v17;
      goto LABEL_7;
    }
    v14 = v8;
    while (v14-- >= 1)
    {
      if (ungetc((char)v26[v14], *(FILE **)(a1 + 64)) == -1)
        return 0xFFFFFFFFLL;
    }
    return v17;
  }
  return v4;
}

uint64_t std::__stdoutbuf<wchar_t>::__stdoutbuf(uint64_t a1, std::locale::__imp *a2, uint64_t a3)
{
  std::locale *v6;
  const std::locale::facet *v7;
  std::locale v9;

  v6 = (std::locale *)std::wstreambuf::basic_streambuf(a1);
  v6->__locale_ = (std::locale::__imp *)&off_1E2E592E8;
  v6[8].__locale_ = a2;
  std::locale::locale(&v9, v6 + 1);
  v7 = std::locale::use_facet(&v9, &std::codecvt<wchar_t,char,__mbstate_t>::id);
  std::locale::~locale(&v9);
  *(_QWORD *)(a1 + 72) = v7;
  *(_QWORD *)(a1 + 80) = a3;
  *(_BYTE *)(a1 + 88) = ((uint64_t (*)(const std::locale::facet *))v7->__vftable[2].~facet_0)(v7);
  return a1;
}

void sub_191FDD40C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale *v10;

  std::locale::~locale(&a10);
  std::wstreambuf::~wstreambuf(v10);
  _Unwind_Resume(a1);
}

void std::__stdoutbuf<wchar_t>::~__stdoutbuf(std::locale *a1)
{
  std::wstreambuf::~wstreambuf(a1);
  JUMPOUT(0x194021E38);
}

uint64_t std::__stdoutbuf<wchar_t>::imbue(uint64_t a1, const std::locale *a2)
{
  const std::locale::facet *v4;
  uint64_t result;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  v4 = std::locale::use_facet(a2, &std::codecvt<wchar_t,char,__mbstate_t>::id);
  *(_QWORD *)(a1 + 72) = v4;
  result = ((uint64_t (*)(const std::locale::facet *))v4->__vftable[2].~facet_0)(v4);
  *(_BYTE *)(a1 + 88) = result;
  return result;
}

uint64_t std::__stdoutbuf<wchar_t>::sync(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v5;
  _BYTE __ptr[8];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  do
  {
    v2 = (*(uint64_t (**)(_QWORD, _QWORD, _BYTE *, uint64_t *, uint64_t *))(**(_QWORD **)(a1 + 72) + 40))(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), __ptr, &v7, &v5);
    v3 = v5 - (_QWORD)__ptr;
    if (fwrite(__ptr, 1uLL, v5 - (_QWORD)__ptr, *(FILE **)(a1 + 64)) != v3)
      return 0xFFFFFFFFLL;
  }
  while (v2 == 1);
  if (v2 == 2)
    return 0xFFFFFFFFLL;
  if (fflush(*(FILE **)(a1 + 64)))
    return 0xFFFFFFFFLL;
  else
    return 0;
}

size_t std::__stdoutbuf<wchar_t>::xsputn(uint64_t a1, unsigned int *__ptr, int64_t __nitems)
{
  uint64_t v7;

  if (*(_BYTE *)(a1 + 88))
    return fwrite(__ptr, 4uLL, __nitems, *(FILE **)(a1 + 64));
  if (__nitems < 1)
    return 0;
  v7 = 0;
  while ((*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 104))(a1, __ptr[v7]) != -1)
  {
    if (__nitems == ++v7)
      return __nitems;
  }
  return v7;
}

uint64_t std::__stdoutbuf<wchar_t>::overflow(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  int *v9;
  _BYTE *v10;
  int v11;
  _BYTE __ptr[8];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a2 == -1)
    return 0;
  v2 = a2;
  v11 = a2;
  if (!*(_BYTE *)(a1 + 88))
  {
    v10 = __ptr;
    v5 = &v11;
    while (1)
    {
      v6 = (*(uint64_t (**)(_QWORD, _QWORD, int *, _BYTE *, int **, _BYTE *, uint64_t *, _BYTE **))(**(_QWORD **)(a1 + 72) + 24))(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), v5, __ptr, &v9, __ptr, &v13, &v10);
      if (v9 == v5)
        break;
      v7 = v6;
      if (v6 == 3)
      {
        if (fwrite(v5, 1uLL, 1uLL, *(FILE **)(a1 + 64)) != 1)
          return 0xFFFFFFFFLL;
        return v2;
      }
      if (v6 > 1)
        return 0xFFFFFFFFLL;
      v8 = v10 - __ptr;
      if (fwrite(__ptr, 1uLL, v10 - __ptr, *(FILE **)(a1 + 64)) != v8)
        return 0xFFFFFFFFLL;
      v5 = v9;
      if (v7 != 1)
        return v2;
    }
    return 0xFFFFFFFFLL;
  }
  if (fputwc(a2, *(FILE **)(a1 + 64)) == -1)
    return 0xFFFFFFFFLL;
  return v2;
}

std::ios_base::Init *`global constructor keyed to'_000100()
{
  return std::ios_base::Init::Init((std::ios_base::Init *)&std::__start_std_streams);
}

void std::collate<char>::~collate(std::__shared_count *a1)
{
  std::__shared_count::~__shared_count(a1);
  JUMPOUT(0x194021E38);
}

uint64_t std::collate<char>::do_compare(uint64_t a1, char *a2, char *a3, char *a4, char *a5)
{
  char *v5;
  int v6;
  int v7;

  if (a4 == a5)
    return a2 != a3;
  v5 = &a2[a5 - a4];
  while (1)
  {
    if (a2 == a3)
      return 0xFFFFFFFFLL;
    v6 = *a2;
    v7 = *a4;
    if (v6 < v7)
      return 0xFFFFFFFFLL;
    if (v7 < v6)
      break;
    ++a2;
    if (++a4 == a5)
    {
      a2 = v5;
      return a2 != a3;
    }
  }
  return 1;
}

_QWORD *std::collate<char>::do_transform@<X0>(char *a1@<X1>, char *a2@<X2>, _QWORD *a3@<X8>)
{
  return std::string::__init_with_size[abi:ne180100]<char const*,char const*>(a3, a1, a2, a2 - a1);
}

unint64_t std::collate<char>::do_hash(uint64_t a1, char *a2, char *a3)
{
  unint64_t result;
  uint64_t v4;

  if (a2 == a3)
    return 0;
  result = 0;
  do
  {
    v4 = *a2++;
    result = ((v4 + 16 * result) & 0xF000000000000000 | (((v4 + 16 * result) & 0xF000000000000000) >> 56)) ^ (v4 + 16 * result);
  }
  while (a2 != a3);
  return result;
}

void std::collate<wchar_t>::~collate(std::__shared_count *a1)
{
  std::__shared_count::~__shared_count(a1);
  JUMPOUT(0x194021E38);
}

uint64_t std::collate<wchar_t>::do_compare(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  while (1)
  {
    if (a4 == a5)
      return a2 != a3;
    if (a2 == a3 || *a2 < *a4)
      return 0xFFFFFFFFLL;
    if (*a4 < *a2)
      break;
    ++a2;
    ++a4;
  }
  return 1;
}

_QWORD *std::collate<wchar_t>::do_transform@<X0>(int *a1@<X1>, int *a2@<X2>, _QWORD *a3@<X8>)
{
  return std::wstring::__init_with_size[abi:ne180100]<wchar_t const*,wchar_t const*>(a3, a1, a2, a2 - a1);
}

unint64_t std::collate<wchar_t>::do_hash(uint64_t a1, int *a2, int *a3)
{
  unint64_t result;
  uint64_t v4;

  if (a2 == a3)
    return 0;
  result = 0;
  do
  {
    v4 = *a2++;
    result = ((v4 + 16 * result) & 0xF000000000000000 | (((v4 + 16 * result) & 0xF000000000000000) >> 56)) ^ (v4 + 16 * result);
  }
  while (a2 != a3);
  return result;
}

_QWORD *std::num_get<char,std::istreambuf_iterator<char>>::do_get(uint64_t a1, _QWORD *a2, _QWORD *a3, std::ios_base *this, _DWORD *a5, BOOL *a6)
{
  _QWORD *v10;
  const std::locale::facet *v11;
  std::locale::__imp *locale;
  unint64_t *v13;
  unint64_t v14;
  const std::locale::facet *v15;
  std::locale::__imp *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  _QWORD *v22;
  std::locale v23;
  _QWORD v24[3];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v22 = a2;
  if ((this->__fmtflags_ & 1) != 0)
  {
    std::ios_base::getloc(this);
    v11 = std::locale::use_facet(&v23, &std::ctype<char>::id);
    locale = v23.__locale_;
    if (v23.__locale_ != (std::locale::__imp *)&std::locale::__imp::classic_locale_imp_)
    {
      v13 = (unint64_t *)((char *)v23.__locale_ + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
        (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 16))(locale);
    }
    std::ios_base::getloc(this);
    v15 = std::locale::use_facet(&v23, &std::numpunct<char>::id);
    v16 = v23.__locale_;
    if (v23.__locale_ != (std::locale::__imp *)&std::locale::__imp::classic_locale_imp_)
    {
      v17 = (unint64_t *)((char *)v23.__locale_ + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
        (*(void (**)(std::locale::__imp *))(*(_QWORD *)v16 + 16))(v16);
    }
    ((void (*)(std::locale *__return_ptr, const std::locale::facet *))v15->__vftable[2].~facet)(&v23, v15);
    ((void (*)(_QWORD *__return_ptr, const std::locale::facet *))v15->__vftable[2].~facet_0)(v24, v15);
    v19 = std::__scan_keyword[abi:ne180100]<std::istreambuf_iterator<char>,std::string const*,std::ctype<char>>(&v22, a3, (uint64_t *)&v23, &v25, (uint64_t)v11, a5, 1);
    v20 = 0;
    *a6 = v19 == (uint64_t *)&v23;
    v10 = v22;
    do
    {
      if (SHIBYTE(v24[v20 + 2]) < 0)
        operator delete((void *)v24[v20]);
      v20 -= 3;
    }
    while (v20 != -6);
  }
  else
  {
    v23.__locale_ = (std::locale::__imp *)-1;
    v10 = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, std::ios_base *, _DWORD *, std::locale *))(*(_QWORD *)a1 + 32))(a1, a2, a3, this, a5, &v23);
    if (v23.__locale_ == (std::locale::__imp *)1)
    {
      *a6 = 1;
    }
    else if (v23.__locale_)
    {
      *a6 = 1;
      *a5 = 4;
    }
    else
    {
      *a6 = 0;
    }
  }
  return v10;
}

void sub_191FDDB00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v17;

  v17 = 0;
  while (1)
  {
    if (*(char *)(v15 + v17 + 47) < 0)
      operator delete(*(void **)(v15 + v17 + 24));
    v17 -= 24;
    if (v17 == -48)
      _Unwind_Resume(exception_object);
  }
}

void std::locale::~locale(std::locale *this)
{
  std::locale::__imp *locale;
  unint64_t *v2;
  unint64_t v3;

  locale = this->__locale_;
  if (locale != (std::locale::__imp *)&std::locale::__imp::classic_locale_imp_)
  {
    v2 = (unint64_t *)((char *)locale + 8);
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 - 1, v2));
    if (!v3)
      (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 16))(locale);
  }
}

{
  std::locale::__imp *locale;
  unint64_t *v2;
  unint64_t v3;

  locale = this->__locale_;
  if (locale != (std::locale::__imp *)&std::locale::__imp::classic_locale_imp_)
  {
    v2 = (unint64_t *)((char *)locale + 8);
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 - 1, v2));
    if (!v3)
      (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 16))(locale);
  }
}

uint64_t *std::__scan_keyword[abi:ne180100]<std::istreambuf_iterator<char>,std::string const*,std::ctype<char>>(_QWORD **a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, _DWORD *a6, char a7)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t *v17;
  char *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  int v24;
  int v25;
  char *v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t *v30;
  char v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t *v35;
  char *v36;
  uint64_t v37;
  _DWORD *v39;
  char *v40;
  _QWORD **v41;
  char *v42;
  uint64_t *v43;
  _QWORD *v45;
  char v46;
  uint64_t v47;

  v9 = a4;
  v10 = a3;
  v47 = *MEMORY[0x1E0C80C00];
  v45 = a2;
  v12 = a4 - a3;
  v13 = 0xAAAAAAAAAAAAAAABLL * v12;
  if (0xAAAAAAAAAAAAAAABLL * v12 < 0x65)
  {
    v14 = 0;
    v15 = &v46;
  }
  else
  {
    v14 = (char *)malloc_type_malloc(0xAAAAAAAAAAAAAAABLL * v12, 0x8BE91F8AuLL);
    v15 = v14;
    if (!v14)
      std::__throw_bad_alloc();
  }
  v40 = v14;
  if (v10 == v9)
  {
    v16 = 0;
  }
  else
  {
    v16 = 0;
    v17 = v10;
    v18 = v15;
    do
    {
      if (*((char *)v17 + 23) < 0)
        v19 = v17[1];
      else
        v19 = *((unsigned __int8 *)v17 + 23);
      v20 = v19 == 0;
      v21 = v19 == 0;
      if (v20)
        v22 = 2;
      else
        v22 = 1;
      if (v20)
        ++v16;
      v13 -= v21;
      *v18++ = v22;
      v17 += 3;
    }
    while (v17 != v9);
  }
  v39 = a6;
  v23 = 0;
  v42 = v15;
  v43 = v10;
  v41 = a1;
  while (1)
  {
    v24 = std::istreambuf_iterator<char>::equal[abi:ne180100](a1, &v45);
    v25 = v13 ? v24 : 1;
    if (v25 == 1)
      break;
    v26 = (char *)(*a1)[3];
    if (v26 == (char *)(*a1)[4])
      v27 = (*(uint64_t (**)(_QWORD))(**a1 + 72))(*a1);
    else
      v27 = *v26;
    if ((a7 & 1) == 0)
      v27 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a5 + 24))(a5, v27);
    if (v10 != v9)
    {
      v28 = 0;
      v29 = v23 + 1;
      do
      {
        if (*v15 == 1)
        {
          v30 = v10;
          if (*((char *)v10 + 23) < 0)
            v30 = (uint64_t *)*v10;
          v31 = *((_BYTE *)v30 + v23);
          if ((a7 & 1) == 0)
            v31 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a5 + 24))(a5, v31);
          if (v27 == v31)
          {
            if (*((char *)v10 + 23) < 0)
              v32 = v10[1];
            else
              v32 = *((unsigned __int8 *)v10 + 23);
            if (v32 == v29)
            {
              *v15 = 2;
              --v13;
              ++v16;
            }
            v28 = 1;
          }
          else
          {
            *v15 = 0;
            --v13;
          }
        }
        v10 += 3;
        ++v15;
      }
      while (v10 != v9);
      if ((v28 & 1) != 0)
      {
        a1 = v41;
        v15 = v42;
        v33 = *v41;
        v34 = (*v41)[3];
        v10 = v43;
        if (v34 == (*v41)[4])
          (*(void (**)(_QWORD *))(*v33 + 80))(v33);
        else
          v33[3] = v34 + 1;
        v35 = v43;
        v36 = v42;
        if (v16 + v13 >= 2)
        {
          do
          {
            if (*v36 == 2)
            {
              if (*((char *)v35 + 23) < 0)
                v37 = v35[1];
              else
                v37 = *((unsigned __int8 *)v35 + 23);
              if (v37 != v29)
              {
                *v36 = 0;
                --v16;
              }
            }
            v35 += 3;
            ++v36;
          }
          while (v35 != v9);
        }
      }
      else
      {
        v15 = v42;
        v10 = v43;
        a1 = v41;
      }
    }
    ++v23;
  }
  if (std::istreambuf_iterator<char>::equal[abi:ne180100](a1, &v45))
    *v39 |= 2u;
  while (1)
  {
    if (v10 == v9)
    {
      *v39 |= 4u;
      goto LABEL_65;
    }
    if (*v15 == 2)
      break;
    v10 += 3;
    ++v15;
  }
  v9 = v10;
LABEL_65:
  if (v40)
    free(v40);
  return v9;
}

void sub_191FDDF20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (a10)
    free(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *std::num_get<char,std::istreambuf_iterator<char>>::__do_get_signed<long>(uint64_t a1, _QWORD *a2, uint64_t a3, const std::ios_base *a4, std::ios_base::iostate *a5, uint64_t *a6)
{
  int v8;
  int v9;
  unsigned int v10;
  std::string *v11;
  std::string::size_type size;
  std::string::size_type v13;
  _BYTE *v14;
  char v15;
  uint64_t v16;
  std::string::size_type v17;
  unsigned int *v18;
  _QWORD *v19;
  unsigned int v21;
  unsigned int *__g_end;
  std::string *v23;
  std::string v24;
  std::string __grouping;
  _BYTE v26[9];
  _QWORD *v27;
  unsigned int __g[40];
  char v29[26];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v26[1] = a3;
  v27 = a2;
  v8 = a4->__fmtflags_ & 0x4A;
  if (v8)
  {
    if (v8 == 8)
      v9 = 16;
    else
      v9 = 10;
    if (v8 == 64)
      v10 = 8;
    else
      v10 = v9;
  }
  else
  {
    v10 = 0;
  }
  std::__num_get<char>::__stage2_int_prep(a4, (uint64_t)v29, v26);
  memset(&v24, 0, sizeof(v24));
  std::string::resize(&v24, 0x16uLL, 0);
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = &v24;
  else
    v11 = (std::string *)v24.__r_.__value_.__r.__words[0];
  __g_end = __g;
  v23 = v11;
  v21 = 0;
  while ((std::istreambuf_iterator<char>::equal[abi:ne180100](&v27, (_QWORD **)&v26[1]) & 1) == 0)
  {
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      size = v24.__r_.__value_.__l.__size_;
    else
      size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
    if (v23 == (std::string *)((char *)v11 + size))
    {
      std::string::resize(&v24, 2 * size, 0);
      if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v13 = 22;
      else
        v13 = (v24.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      std::string::resize(&v24, v13, 0);
      if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v11 = &v24;
      else
        v11 = (std::string *)v24.__r_.__value_.__r.__words[0];
      v23 = (std::string *)((char *)v11 + size);
    }
    v14 = (_BYTE *)v27[3];
    v15 = v14 == (_BYTE *)v27[4] ? (*(uint64_t (**)(_QWORD *))(*v27 + 72))(v27) : *v14;
    if (std::__num_get<char>::__stage2_int_loop(v15, v10, (char *)v11, (char **)&v23, &v21, v26[0], (uint64_t)&__grouping, (uint64_t)__g, &__g_end, v29))break;
    v16 = v27[3];
    if (v16 == v27[4])
      (*(void (**)(_QWORD *))(*v27 + 80))(v27);
    else
      v27[3] = v16 + 1;
  }
  v17 = HIBYTE(__grouping.__r_.__value_.__r.__words[2]);
  if ((__grouping.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v17 = __grouping.__r_.__value_.__l.__size_;
  if (v17)
  {
    v18 = __g_end;
    if ((char *)__g_end - (char *)__g <= 159)
    {
      *__g_end = v21;
      __g_end = v18 + 1;
    }
  }
  *a6 = std::__num_get_signed_integral[abi:ne180100]<long>((const char *)v11, (char *)v23, a5, v10);
  std::__check_grouping(&__grouping, __g, __g_end, a5);
  if (std::istreambuf_iterator<char>::equal[abi:ne180100](&v27, (_QWORD **)&v26[1]))
    *a5 |= 2u;
  v19 = v27;
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__grouping.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__grouping.__r_.__value_.__l.__data_);
  return v19;
}

void sub_191FDE1F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

_QWORD *std::num_get<char,std::istreambuf_iterator<char>>::__do_get_signed<long long>(uint64_t a1, _QWORD *a2, uint64_t a3, const std::ios_base *a4, std::ios_base::iostate *a5, uint64_t *a6)
{
  int v8;
  int v9;
  unsigned int v10;
  std::string *v11;
  std::string::size_type size;
  std::string::size_type v13;
  _BYTE *v14;
  char v15;
  uint64_t v16;
  std::string::size_type v17;
  unsigned int *v18;
  _QWORD *v19;
  unsigned int v21;
  unsigned int *__g_end;
  std::string *v23;
  std::string v24;
  std::string __grouping;
  _BYTE v26[9];
  _QWORD *v27;
  unsigned int __g[40];
  char v29[26];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v26[1] = a3;
  v27 = a2;
  v8 = a4->__fmtflags_ & 0x4A;
  if (v8)
  {
    if (v8 == 8)
      v9 = 16;
    else
      v9 = 10;
    if (v8 == 64)
      v10 = 8;
    else
      v10 = v9;
  }
  else
  {
    v10 = 0;
  }
  std::__num_get<char>::__stage2_int_prep(a4, (uint64_t)v29, v26);
  memset(&v24, 0, sizeof(v24));
  std::string::resize(&v24, 0x16uLL, 0);
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = &v24;
  else
    v11 = (std::string *)v24.__r_.__value_.__r.__words[0];
  __g_end = __g;
  v23 = v11;
  v21 = 0;
  while ((std::istreambuf_iterator<char>::equal[abi:ne180100](&v27, (_QWORD **)&v26[1]) & 1) == 0)
  {
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      size = v24.__r_.__value_.__l.__size_;
    else
      size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
    if (v23 == (std::string *)((char *)v11 + size))
    {
      std::string::resize(&v24, 2 * size, 0);
      if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v13 = 22;
      else
        v13 = (v24.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      std::string::resize(&v24, v13, 0);
      if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v11 = &v24;
      else
        v11 = (std::string *)v24.__r_.__value_.__r.__words[0];
      v23 = (std::string *)((char *)v11 + size);
    }
    v14 = (_BYTE *)v27[3];
    v15 = v14 == (_BYTE *)v27[4] ? (*(uint64_t (**)(_QWORD *))(*v27 + 72))(v27) : *v14;
    if (std::__num_get<char>::__stage2_int_loop(v15, v10, (char *)v11, (char **)&v23, &v21, v26[0], (uint64_t)&__grouping, (uint64_t)__g, &__g_end, v29))break;
    v16 = v27[3];
    if (v16 == v27[4])
      (*(void (**)(_QWORD *))(*v27 + 80))(v27);
    else
      v27[3] = v16 + 1;
  }
  v17 = HIBYTE(__grouping.__r_.__value_.__r.__words[2]);
  if ((__grouping.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v17 = __grouping.__r_.__value_.__l.__size_;
  if (v17)
  {
    v18 = __g_end;
    if ((char *)__g_end - (char *)__g <= 159)
    {
      *__g_end = v21;
      __g_end = v18 + 1;
    }
  }
  *a6 = std::__num_get_signed_integral[abi:ne180100]<long long>((const char *)v11, (char *)v23, a5, v10);
  std::__check_grouping(&__grouping, __g, __g_end, a5);
  if (std::istreambuf_iterator<char>::equal[abi:ne180100](&v27, (_QWORD **)&v26[1]))
    *a5 |= 2u;
  v19 = v27;
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__grouping.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__grouping.__r_.__value_.__l.__data_);
  return v19;
}

void sub_191FDE4E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

_QWORD *std::num_get<char,std::istreambuf_iterator<char>>::__do_get_unsigned<unsigned short>(uint64_t a1, _QWORD *a2, uint64_t a3, const std::ios_base *a4, std::ios_base::iostate *a5, _WORD *a6)
{
  int v8;
  int v9;
  unsigned int v10;
  std::string *v11;
  std::string::size_type size;
  std::string::size_type v13;
  _BYTE *v14;
  char v15;
  uint64_t v16;
  std::string::size_type v17;
  unsigned int *v18;
  _QWORD *v19;
  unsigned int v21;
  unsigned int *__g_end;
  std::string *v23;
  std::string v24;
  std::string __grouping;
  _BYTE v26[9];
  _QWORD *v27;
  unsigned int __g[40];
  char v29[26];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v26[1] = a3;
  v27 = a2;
  v8 = a4->__fmtflags_ & 0x4A;
  if (v8)
  {
    if (v8 == 8)
      v9 = 16;
    else
      v9 = 10;
    if (v8 == 64)
      v10 = 8;
    else
      v10 = v9;
  }
  else
  {
    v10 = 0;
  }
  std::__num_get<char>::__stage2_int_prep(a4, (uint64_t)v29, v26);
  memset(&v24, 0, sizeof(v24));
  std::string::resize(&v24, 0x16uLL, 0);
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = &v24;
  else
    v11 = (std::string *)v24.__r_.__value_.__r.__words[0];
  __g_end = __g;
  v23 = v11;
  v21 = 0;
  while ((std::istreambuf_iterator<char>::equal[abi:ne180100](&v27, (_QWORD **)&v26[1]) & 1) == 0)
  {
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      size = v24.__r_.__value_.__l.__size_;
    else
      size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
    if (v23 == (std::string *)((char *)v11 + size))
    {
      std::string::resize(&v24, 2 * size, 0);
      if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v13 = 22;
      else
        v13 = (v24.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      std::string::resize(&v24, v13, 0);
      if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v11 = &v24;
      else
        v11 = (std::string *)v24.__r_.__value_.__r.__words[0];
      v23 = (std::string *)((char *)v11 + size);
    }
    v14 = (_BYTE *)v27[3];
    v15 = v14 == (_BYTE *)v27[4] ? (*(uint64_t (**)(_QWORD *))(*v27 + 72))(v27) : *v14;
    if (std::__num_get<char>::__stage2_int_loop(v15, v10, (char *)v11, (char **)&v23, &v21, v26[0], (uint64_t)&__grouping, (uint64_t)__g, &__g_end, v29))break;
    v16 = v27[3];
    if (v16 == v27[4])
      (*(void (**)(_QWORD *))(*v27 + 80))(v27);
    else
      v27[3] = v16 + 1;
  }
  v17 = HIBYTE(__grouping.__r_.__value_.__r.__words[2]);
  if ((__grouping.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v17 = __grouping.__r_.__value_.__l.__size_;
  if (v17)
  {
    v18 = __g_end;
    if ((char *)__g_end - (char *)__g <= 159)
    {
      *__g_end = v21;
      __g_end = v18 + 1;
    }
  }
  *a6 = std::__num_get_unsigned_integral[abi:ne180100]<unsigned short>((char *)v11, (char *)v23, a5, v10);
  std::__check_grouping(&__grouping, __g, __g_end, a5);
  if (std::istreambuf_iterator<char>::equal[abi:ne180100](&v27, (_QWORD **)&v26[1]))
    *a5 |= 2u;
  v19 = v27;
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__grouping.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__grouping.__r_.__value_.__l.__data_);
  return v19;
}

void sub_191FDE7CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

_QWORD *std::num_get<char,std::istreambuf_iterator<char>>::__do_get_unsigned<unsigned int>(uint64_t a1, _QWORD *a2, uint64_t a3, const std::ios_base *a4, std::ios_base::iostate *a5, _DWORD *a6)
{
  int v8;
  int v9;
  unsigned int v10;
  std::string *v11;
  std::string::size_type size;
  std::string::size_type v13;
  _BYTE *v14;
  char v15;
  uint64_t v16;
  std::string::size_type v17;
  unsigned int *v18;
  _QWORD *v19;
  unsigned int v21;
  unsigned int *__g_end;
  std::string *v23;
  std::string v24;
  std::string __grouping;
  _BYTE v26[9];
  _QWORD *v27;
  unsigned int __g[40];
  char v29[26];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v26[1] = a3;
  v27 = a2;
  v8 = a4->__fmtflags_ & 0x4A;
  if (v8)
  {
    if (v8 == 8)
      v9 = 16;
    else
      v9 = 10;
    if (v8 == 64)
      v10 = 8;
    else
      v10 = v9;
  }
  else
  {
    v10 = 0;
  }
  std::__num_get<char>::__stage2_int_prep(a4, (uint64_t)v29, v26);
  memset(&v24, 0, sizeof(v24));
  std::string::resize(&v24, 0x16uLL, 0);
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = &v24;
  else
    v11 = (std::string *)v24.__r_.__value_.__r.__words[0];
  __g_end = __g;
  v23 = v11;
  v21 = 0;
  while ((std::istreambuf_iterator<char>::equal[abi:ne180100](&v27, (_QWORD **)&v26[1]) & 1) == 0)
  {
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      size = v24.__r_.__value_.__l.__size_;
    else
      size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
    if (v23 == (std::string *)((char *)v11 + size))
    {
      std::string::resize(&v24, 2 * size, 0);
      if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v13 = 22;
      else
        v13 = (v24.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      std::string::resize(&v24, v13, 0);
      if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v11 = &v24;
      else
        v11 = (std::string *)v24.__r_.__value_.__r.__words[0];
      v23 = (std::string *)((char *)v11 + size);
    }
    v14 = (_BYTE *)v27[3];
    v15 = v14 == (_BYTE *)v27[4] ? (*(uint64_t (**)(_QWORD *))(*v27 + 72))(v27) : *v14;
    if (std::__num_get<char>::__stage2_int_loop(v15, v10, (char *)v11, (char **)&v23, &v21, v26[0], (uint64_t)&__grouping, (uint64_t)__g, &__g_end, v29))break;
    v16 = v27[3];
    if (v16 == v27[4])
      (*(void (**)(_QWORD *))(*v27 + 80))(v27);
    else
      v27[3] = v16 + 1;
  }
  v17 = HIBYTE(__grouping.__r_.__value_.__r.__words[2]);
  if ((__grouping.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v17 = __grouping.__r_.__value_.__l.__size_;
  if (v17)
  {
    v18 = __g_end;
    if ((char *)__g_end - (char *)__g <= 159)
    {
      *__g_end = v21;
      __g_end = v18 + 1;
    }
  }
  *a6 = std::__num_get_unsigned_integral[abi:ne180100]<unsigned int>((char *)v11, (char *)v23, a5, v10);
  std::__check_grouping(&__grouping, __g, __g_end, a5);
  if (std::istreambuf_iterator<char>::equal[abi:ne180100](&v27, (_QWORD **)&v26[1]))
    *a5 |= 2u;
  v19 = v27;
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__grouping.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__grouping.__r_.__value_.__l.__data_);
  return v19;
}

void sub_191FDEAB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

_QWORD *std::num_get<char,std::istreambuf_iterator<char>>::__do_get_unsigned<unsigned long>(uint64_t a1, _QWORD *a2, uint64_t a3, const std::ios_base *a4, std::ios_base::iostate *a5, uint64_t *a6)
{
  int v8;
  int v9;
  unsigned int v10;
  std::string *v11;
  std::string::size_type size;
  std::string::size_type v13;
  _BYTE *v14;
  char v15;
  uint64_t v16;
  std::string::size_type v17;
  unsigned int *v18;
  _QWORD *v19;
  unsigned int v21;
  unsigned int *__g_end;
  std::string *v23;
  std::string v24;
  std::string __grouping;
  _BYTE v26[9];
  _QWORD *v27;
  unsigned int __g[40];
  char v29[26];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v26[1] = a3;
  v27 = a2;
  v8 = a4->__fmtflags_ & 0x4A;
  if (v8)
  {
    if (v8 == 8)
      v9 = 16;
    else
      v9 = 10;
    if (v8 == 64)
      v10 = 8;
    else
      v10 = v9;
  }
  else
  {
    v10 = 0;
  }
  std::__num_get<char>::__stage2_int_prep(a4, (uint64_t)v29, v26);
  memset(&v24, 0, sizeof(v24));
  std::string::resize(&v24, 0x16uLL, 0);
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = &v24;
  else
    v11 = (std::string *)v24.__r_.__value_.__r.__words[0];
  __g_end = __g;
  v23 = v11;
  v21 = 0;
  while ((std::istreambuf_iterator<char>::equal[abi:ne180100](&v27, (_QWORD **)&v26[1]) & 1) == 0)
  {
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      size = v24.__r_.__value_.__l.__size_;
    else
      size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
    if (v23 == (std::string *)((char *)v11 + size))
    {
      std::string::resize(&v24, 2 * size, 0);
      if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v13 = 22;
      else
        v13 = (v24.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      std::string::resize(&v24, v13, 0);
      if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v11 = &v24;
      else
        v11 = (std::string *)v24.__r_.__value_.__r.__words[0];
      v23 = (std::string *)((char *)v11 + size);
    }
    v14 = (_BYTE *)v27[3];
    v15 = v14 == (_BYTE *)v27[4] ? (*(uint64_t (**)(_QWORD *))(*v27 + 72))(v27) : *v14;
    if (std::__num_get<char>::__stage2_int_loop(v15, v10, (char *)v11, (char **)&v23, &v21, v26[0], (uint64_t)&__grouping, (uint64_t)__g, &__g_end, v29))break;
    v16 = v27[3];
    if (v16 == v27[4])
      (*(void (**)(_QWORD *))(*v27 + 80))(v27);
    else
      v27[3] = v16 + 1;
  }
  v17 = HIBYTE(__grouping.__r_.__value_.__r.__words[2]);
  if ((__grouping.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v17 = __grouping.__r_.__value_.__l.__size_;
  if (v17)
  {
    v18 = __g_end;
    if ((char *)__g_end - (char *)__g <= 159)
    {
      *__g_end = v21;
      __g_end = v18 + 1;
    }
  }
  *a6 = std::__num_get_unsigned_integral[abi:ne180100]<unsigned long>((char *)v11, (char *)v23, a5, v10);
  std::__check_grouping(&__grouping, __g, __g_end, a5);
  if (std::istreambuf_iterator<char>::equal[abi:ne180100](&v27, (_QWORD **)&v26[1]))
    *a5 |= 2u;
  v19 = v27;
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__grouping.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__grouping.__r_.__value_.__l.__data_);
  return v19;
}

void sub_191FDEDA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

_QWORD *std::num_get<char,std::istreambuf_iterator<char>>::__do_get_unsigned<unsigned long long>(uint64_t a1, _QWORD *a2, uint64_t a3, const std::ios_base *a4, std::ios_base::iostate *a5, uint64_t *a6)
{
  int v8;
  int v9;
  unsigned int v10;
  std::string *v11;
  std::string::size_type size;
  std::string::size_type v13;
  _BYTE *v14;
  char v15;
  uint64_t v16;
  std::string::size_type v17;
  unsigned int *v18;
  _QWORD *v19;
  unsigned int v21;
  unsigned int *__g_end;
  std::string *v23;
  std::string v24;
  std::string __grouping;
  _BYTE v26[9];
  _QWORD *v27;
  unsigned int __g[40];
  char v29[26];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v26[1] = a3;
  v27 = a2;
  v8 = a4->__fmtflags_ & 0x4A;
  if (v8)
  {
    if (v8 == 8)
      v9 = 16;
    else
      v9 = 10;
    if (v8 == 64)
      v10 = 8;
    else
      v10 = v9;
  }
  else
  {
    v10 = 0;
  }
  std::__num_get<char>::__stage2_int_prep(a4, (uint64_t)v29, v26);
  memset(&v24, 0, sizeof(v24));
  std::string::resize(&v24, 0x16uLL, 0);
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = &v24;
  else
    v11 = (std::string *)v24.__r_.__value_.__r.__words[0];
  __g_end = __g;
  v23 = v11;
  v21 = 0;
  while ((std::istreambuf_iterator<char>::equal[abi:ne180100](&v27, (_QWORD **)&v26[1]) & 1) == 0)
  {
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      size = v24.__r_.__value_.__l.__size_;
    else
      size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
    if (v23 == (std::string *)((char *)v11 + size))
    {
      std::string::resize(&v24, 2 * size, 0);
      if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v13 = 22;
      else
        v13 = (v24.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      std::string::resize(&v24, v13, 0);
      if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v11 = &v24;
      else
        v11 = (std::string *)v24.__r_.__value_.__r.__words[0];
      v23 = (std::string *)((char *)v11 + size);
    }
    v14 = (_BYTE *)v27[3];
    v15 = v14 == (_BYTE *)v27[4] ? (*(uint64_t (**)(_QWORD *))(*v27 + 72))(v27) : *v14;
    if (std::__num_get<char>::__stage2_int_loop(v15, v10, (char *)v11, (char **)&v23, &v21, v26[0], (uint64_t)&__grouping, (uint64_t)__g, &__g_end, v29))break;
    v16 = v27[3];
    if (v16 == v27[4])
      (*(void (**)(_QWORD *))(*v27 + 80))(v27);
    else
      v27[3] = v16 + 1;
  }
  v17 = HIBYTE(__grouping.__r_.__value_.__r.__words[2]);
  if ((__grouping.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v17 = __grouping.__r_.__value_.__l.__size_;
  if (v17)
  {
    v18 = __g_end;
    if ((char *)__g_end - (char *)__g <= 159)
    {
      *__g_end = v21;
      __g_end = v18 + 1;
    }
  }
  *a6 = std::__num_get_unsigned_integral[abi:ne180100]<unsigned long long>((char *)v11, (char *)v23, a5, v10);
  std::__check_grouping(&__grouping, __g, __g_end, a5);
  if (std::istreambuf_iterator<char>::equal[abi:ne180100](&v27, (_QWORD **)&v26[1]))
    *a5 |= 2u;
  v19 = v27;
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__grouping.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__grouping.__r_.__value_.__l.__data_);
  return v19;
}

void sub_191FDF090(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

_QWORD *std::num_get<char,std::istreambuf_iterator<char>>::__do_get_floating_point<float>(uint64_t a1, _QWORD *a2, uint64_t a3, const std::ios_base *a4, std::ios_base::iostate *a5, float *a6)
{
  std::string *v8;
  std::string::size_type size;
  std::string::size_type v10;
  _BYTE *v11;
  char v12;
  uint64_t v13;
  std::string::size_type v14;
  BOOL v15;
  unsigned int *v16;
  _QWORD *v17;
  char v19;
  char v20;
  unsigned int v21;
  unsigned int *__g_end;
  std::string *v23;
  std::string v24;
  std::string __grouping;
  _WORD v26[5];
  _QWORD *v27;
  unsigned int __g[40];
  char v29[32];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v26[1] = a3;
  v27 = a2;
  std::__num_get<char>::__stage2_float_prep(a4, (uint64_t)v29, (_BYTE *)v26 + 1, v26);
  memset(&v24, 0, sizeof(v24));
  std::string::resize(&v24, 0x16uLL, 0);
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &v24;
  else
    v8 = (std::string *)v24.__r_.__value_.__r.__words[0];
  __g_end = __g;
  v23 = v8;
  v21 = 0;
  v20 = 1;
  v19 = 69;
  while ((std::istreambuf_iterator<char>::equal[abi:ne180100](&v27, (_QWORD **)&v26[1]) & 1) == 0)
  {
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      size = v24.__r_.__value_.__l.__size_;
    else
      size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
    if (v23 == (std::string *)((char *)v8 + size))
    {
      std::string::resize(&v24, 2 * size, 0);
      if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v10 = 22;
      else
        v10 = (v24.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      std::string::resize(&v24, v10, 0);
      if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v8 = &v24;
      else
        v8 = (std::string *)v24.__r_.__value_.__r.__words[0];
      v23 = (std::string *)((char *)v8 + size);
    }
    v11 = (_BYTE *)v27[3];
    v12 = v11 == (_BYTE *)v27[4] ? (*(uint64_t (**)(_QWORD *))(*v27 + 72))(v27) : *v11;
    if (std::__num_get<char>::__stage2_float_loop(v12, &v20, &v19, (char *)v8, (char **)&v23, SHIBYTE(v26[0]), SLOBYTE(v26[0]), (uint64_t)&__grouping, (uint64_t)__g, &__g_end, &v21, v29))break;
    v13 = v27[3];
    if (v13 == v27[4])
      (*(void (**)(_QWORD *))(*v27 + 80))(v27);
    else
      v27[3] = v13 + 1;
  }
  v14 = HIBYTE(__grouping.__r_.__value_.__r.__words[2]);
  if ((__grouping.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = __grouping.__r_.__value_.__l.__size_;
  if (v14)
    v15 = v20 == 0;
  else
    v15 = 1;
  if (!v15)
  {
    v16 = __g_end;
    if ((char *)__g_end - (char *)__g <= 159)
    {
      *__g_end = v21;
      __g_end = v16 + 1;
    }
  }
  *a6 = std::__num_get_float[abi:ne180100]<float>((const char *)v8, (char *)v23, a5);
  std::__check_grouping(&__grouping, __g, __g_end, a5);
  if (std::istreambuf_iterator<char>::equal[abi:ne180100](&v27, (_QWORD **)&v26[1]))
    *a5 |= 2u;
  v17 = v27;
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__grouping.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__grouping.__r_.__value_.__l.__data_);
  return v17;
}

void sub_191FDF36C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

_QWORD *std::num_get<char,std::istreambuf_iterator<char>>::__do_get_floating_point<double>(uint64_t a1, _QWORD *a2, uint64_t a3, const std::ios_base *a4, std::ios_base::iostate *a5, double *a6)
{
  std::string *v8;
  std::string::size_type size;
  std::string::size_type v10;
  _BYTE *v11;
  char v12;
  uint64_t v13;
  std::string::size_type v14;
  BOOL v15;
  unsigned int *v16;
  _QWORD *v17;
  char v19;
  char v20;
  unsigned int v21;
  unsigned int *__g_end;
  std::string *v23;
  std::string v24;
  std::string __grouping;
  _WORD v26[5];
  _QWORD *v27;
  unsigned int __g[40];
  char v29[32];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v26[1] = a3;
  v27 = a2;
  std::__num_get<char>::__stage2_float_prep(a4, (uint64_t)v29, (_BYTE *)v26 + 1, v26);
  memset(&v24, 0, sizeof(v24));
  std::string::resize(&v24, 0x16uLL, 0);
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &v24;
  else
    v8 = (std::string *)v24.__r_.__value_.__r.__words[0];
  __g_end = __g;
  v23 = v8;
  v21 = 0;
  v20 = 1;
  v19 = 69;
  while ((std::istreambuf_iterator<char>::equal[abi:ne180100](&v27, (_QWORD **)&v26[1]) & 1) == 0)
  {
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      size = v24.__r_.__value_.__l.__size_;
    else
      size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
    if (v23 == (std::string *)((char *)v8 + size))
    {
      std::string::resize(&v24, 2 * size, 0);
      if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v10 = 22;
      else
        v10 = (v24.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      std::string::resize(&v24, v10, 0);
      if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v8 = &v24;
      else
        v8 = (std::string *)v24.__r_.__value_.__r.__words[0];
      v23 = (std::string *)((char *)v8 + size);
    }
    v11 = (_BYTE *)v27[3];
    v12 = v11 == (_BYTE *)v27[4] ? (*(uint64_t (**)(_QWORD *))(*v27 + 72))(v27) : *v11;
    if (std::__num_get<char>::__stage2_float_loop(v12, &v20, &v19, (char *)v8, (char **)&v23, SHIBYTE(v26[0]), SLOBYTE(v26[0]), (uint64_t)&__grouping, (uint64_t)__g, &__g_end, &v21, v29))break;
    v13 = v27[3];
    if (v13 == v27[4])
      (*(void (**)(_QWORD *))(*v27 + 80))(v27);
    else
      v27[3] = v13 + 1;
  }
  v14 = HIBYTE(__grouping.__r_.__value_.__r.__words[2]);
  if ((__grouping.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = __grouping.__r_.__value_.__l.__size_;
  if (v14)
    v15 = v20 == 0;
  else
    v15 = 1;
  if (!v15)
  {
    v16 = __g_end;
    if ((char *)__g_end - (char *)__g <= 159)
    {
      *__g_end = v21;
      __g_end = v16 + 1;
    }
  }
  *a6 = std::__num_get_float[abi:ne180100]<double>((const char *)v8, (char *)v23, a5);
  std::__check_grouping(&__grouping, __g, __g_end, a5);
  if (std::istreambuf_iterator<char>::equal[abi:ne180100](&v27, (_QWORD **)&v26[1]))
    *a5 |= 2u;
  v17 = v27;
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__grouping.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__grouping.__r_.__value_.__l.__data_);
  return v17;
}

void sub_191FDF648(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

_QWORD *std::num_get<char,std::istreambuf_iterator<char>>::__do_get_floating_point<long double>(uint64_t a1, _QWORD *a2, uint64_t a3, const std::ios_base *a4, std::ios_base::iostate *a5, double *a6)
{
  std::string *v8;
  std::string::size_type size;
  std::string::size_type v10;
  _BYTE *v11;
  char v12;
  uint64_t v13;
  std::string::size_type v14;
  BOOL v15;
  unsigned int *v16;
  _QWORD *v17;
  char v19;
  char v20;
  unsigned int v21;
  unsigned int *__g_end;
  std::string *v23;
  std::string v24;
  std::string __grouping;
  _WORD v26[5];
  _QWORD *v27;
  unsigned int __g[40];
  char v29[32];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v26[1] = a3;
  v27 = a2;
  std::__num_get<char>::__stage2_float_prep(a4, (uint64_t)v29, (_BYTE *)v26 + 1, v26);
  memset(&v24, 0, sizeof(v24));
  std::string::resize(&v24, 0x16uLL, 0);
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &v24;
  else
    v8 = (std::string *)v24.__r_.__value_.__r.__words[0];
  __g_end = __g;
  v23 = v8;
  v21 = 0;
  v20 = 1;
  v19 = 69;
  while ((std::istreambuf_iterator<char>::equal[abi:ne180100](&v27, (_QWORD **)&v26[1]) & 1) == 0)
  {
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      size = v24.__r_.__value_.__l.__size_;
    else
      size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
    if (v23 == (std::string *)((char *)v8 + size))
    {
      std::string::resize(&v24, 2 * size, 0);
      if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v10 = 22;
      else
        v10 = (v24.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      std::string::resize(&v24, v10, 0);
      if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v8 = &v24;
      else
        v8 = (std::string *)v24.__r_.__value_.__r.__words[0];
      v23 = (std::string *)((char *)v8 + size);
    }
    v11 = (_BYTE *)v27[3];
    v12 = v11 == (_BYTE *)v27[4] ? (*(uint64_t (**)(_QWORD *))(*v27 + 72))(v27) : *v11;
    if (std::__num_get<char>::__stage2_float_loop(v12, &v20, &v19, (char *)v8, (char **)&v23, SHIBYTE(v26[0]), SLOBYTE(v26[0]), (uint64_t)&__grouping, (uint64_t)__g, &__g_end, &v21, v29))break;
    v13 = v27[3];
    if (v13 == v27[4])
      (*(void (**)(_QWORD *))(*v27 + 80))(v27);
    else
      v27[3] = v13 + 1;
  }
  v14 = HIBYTE(__grouping.__r_.__value_.__r.__words[2]);
  if ((__grouping.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = __grouping.__r_.__value_.__l.__size_;
  if (v14)
    v15 = v20 == 0;
  else
    v15 = 1;
  if (!v15)
  {
    v16 = __g_end;
    if ((char *)__g_end - (char *)__g <= 159)
    {
      *__g_end = v21;
      __g_end = v16 + 1;
    }
  }
  *a6 = std::__num_get_float[abi:ne180100]<long double>((const char *)v8, (char *)v23, a5);
  std::__check_grouping(&__grouping, __g, __g_end, a5);
  if (std::istreambuf_iterator<char>::equal[abi:ne180100](&v27, (_QWORD **)&v26[1]))
    *a5 |= 2u;
  v17 = v27;
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__grouping.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__grouping.__r_.__value_.__l.__data_);
  return v17;
}

void sub_191FDF924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

_QWORD *std::num_get<char,std::istreambuf_iterator<char>>::do_get(int a1, _QWORD *a2, _QWORD *a3, std::ios_base *this, _DWORD *a5, uint64_t a6)
{
  const std::locale::facet *v8;
  std::locale::__imp *locale;
  unint64_t *v10;
  unint64_t v11;
  std::string *v12;
  std::string::size_type size;
  std::string::size_type v14;
  _BYTE *v15;
  char v16;
  uint64_t v17;
  std::string *v18;
  _QWORD *v19;
  int v21;
  std::locale *v22;
  char *v23;
  std::string v24;
  void *__p[2];
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  std::locale v29;
  char v30[26];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v27 = a3;
  v28 = a2;
  __p[0] = 0;
  __p[1] = 0;
  v26 = 0;
  std::ios_base::getloc(this);
  v8 = std::locale::use_facet(&v29, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, const char *, char *, char *))v8->__vftable[2].__on_zero_shared)(v8, "0123456789abcdefABCDEFxX+-pPiInN", "pPiInN", v30);
  locale = v29.__locale_;
  if (v29.__locale_ != (std::locale::__imp *)&std::locale::__imp::classic_locale_imp_)
  {
    v10 = (unint64_t *)((char *)v29.__locale_ + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
      (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 16))(locale);
  }
  memset(&v24, 0, sizeof(v24));
  std::string::resize(&v24, 0x16uLL, 0);
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v12 = &v24;
  else
    v12 = (std::string *)v24.__r_.__value_.__r.__words[0];
  v22 = &v29;
  v23 = (char *)v12;
  v21 = 0;
  while ((std::istreambuf_iterator<char>::equal[abi:ne180100](&v28, &v27) & 1) == 0)
  {
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      size = v24.__r_.__value_.__l.__size_;
    else
      size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
    if (v23 == (char *)v12 + size)
    {
      std::string::resize(&v24, 2 * size, 0);
      if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v14 = 22;
      else
        v14 = (v24.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      std::string::resize(&v24, v14, 0);
      if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = &v24;
      else
        v12 = (std::string *)v24.__r_.__value_.__r.__words[0];
      v23 = (char *)v12 + size;
    }
    v15 = (_BYTE *)v28[3];
    v16 = v15 == (_BYTE *)v28[4] ? (*(uint64_t (**)(_QWORD *))(*v28 + 72))(v28) : *v15;
    if (std::__num_get<char>::__stage2_int_loop(v16, 0x10u, (char *)v12, &v23, &v21, 0, (uint64_t)__p, (uint64_t)&v29, (_DWORD **)&v22, v30))break;
    v17 = v28[3];
    if (v17 == v28[4])
      (*(void (**)(_QWORD *))(*v28 + 80))(v28);
    else
      v28[3] = v17 + 1;
  }
  std::string::resize(&v24, v23 - (char *)v12, 0);
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v18 = &v24;
  else
    v18 = (std::string *)v24.__r_.__value_.__r.__words[0];
  if (sscanf_l((const char *)v18, 0, "%p", a6) != 1)
    *a5 = 4;
  if (std::istreambuf_iterator<char>::equal[abi:ne180100](&v28, &v27))
    *a5 |= 2u;
  v19 = v28;
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26) < 0)
    operator delete(__p[0]);
  return v19;
}

void sub_191FDFC24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

uint64_t std::__num_get<char>::__stage2_int_loop(int __c, unsigned int a2, char *a3, char **a4, _DWORD *a5, int a6, uint64_t a7, uint64_t a8, _DWORD **a9, char *__s)
{
  char *v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t result;
  char v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char v22;
  char v23;

  v14 = *a4;
  if (*a4 == a3)
  {
    if (__s[24] == __c)
    {
      v18 = 43;
    }
    else
    {
      if (__s[25] != __c)
        goto LABEL_2;
      v18 = 45;
    }
    result = 0;
    *a4 = a3 + 1;
    *a3 = v18;
    goto LABEL_18;
  }
LABEL_2:
  v15 = *(unsigned __int8 *)(a7 + 23);
  if ((v15 & 0x80u) != 0)
    v15 = *(_QWORD *)(a7 + 8);
  if (__c != a6 || !v15)
  {
    v19 = (char *)memchr(__s, __c, 0x1AuLL);
    if (v19)
      v20 = v19;
    else
      v20 = __s + 26;
    v21 = v20 - __s;
    if (v21 > 23)
      return 0xFFFFFFFFLL;
    if (a2 != 8)
    {
      if (a2 == 16)
      {
        if (v21 >= 22)
        {
          result = 0xFFFFFFFFLL;
          if (v14 != a3 && v14 - a3 <= 2 && *(v14 - 1) == 48)
          {
            result = 0;
            *a5 = 0;
            v23 = std::__num_get_base::__src[v21];
            *a4 = v14 + 1;
            *v14 = v23;
          }
          return result;
        }
        goto LABEL_26;
      }
      if (a2 != 10)
        goto LABEL_26;
    }
    if (v21 >= a2)
      return 0xFFFFFFFFLL;
LABEL_26:
    result = 0;
    v22 = std::__num_get_base::__src[v21];
    *a4 = v14 + 1;
    *v14 = v22;
    ++*a5;
    return result;
  }
  v16 = *a9;
  if ((uint64_t)*a9 - a8 <= 159)
  {
    result = 0;
    *v16 = *a5;
    *a9 = v16 + 1;
LABEL_18:
    *a5 = 0;
    return result;
  }
  return 0;
}

_QWORD *std::num_get<wchar_t,std::istreambuf_iterator<wchar_t>>::do_get(uint64_t a1, _QWORD *a2, _QWORD *a3, std::ios_base *this, _DWORD *a5, BOOL *a6)
{
  _QWORD *v10;
  const std::locale::facet *v11;
  std::locale::__imp *locale;
  unint64_t *v13;
  unint64_t v14;
  const std::locale::facet *v15;
  std::locale::__imp *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  _QWORD *v22;
  std::locale v23;
  _QWORD v24[3];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v22 = a2;
  if ((this->__fmtflags_ & 1) != 0)
  {
    std::ios_base::getloc(this);
    v11 = std::locale::use_facet(&v23, &std::ctype<wchar_t>::id);
    locale = v23.__locale_;
    if (v23.__locale_ != (std::locale::__imp *)&std::locale::__imp::classic_locale_imp_)
    {
      v13 = (unint64_t *)((char *)v23.__locale_ + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
        (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 16))(locale);
    }
    std::ios_base::getloc(this);
    v15 = std::locale::use_facet(&v23, &std::numpunct<wchar_t>::id);
    v16 = v23.__locale_;
    if (v23.__locale_ != (std::locale::__imp *)&std::locale::__imp::classic_locale_imp_)
    {
      v17 = (unint64_t *)((char *)v23.__locale_ + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
        (*(void (**)(std::locale::__imp *))(*(_QWORD *)v16 + 16))(v16);
    }
    ((void (*)(std::locale *__return_ptr, const std::locale::facet *))v15->__vftable[2].~facet)(&v23, v15);
    ((void (*)(_QWORD *__return_ptr, const std::locale::facet *))v15->__vftable[2].~facet_0)(v24, v15);
    v19 = std::__scan_keyword[abi:ne180100]<std::istreambuf_iterator<wchar_t>,std::wstring const*,std::ctype<wchar_t>>(&v22, a3, (uint64_t *)&v23, &v25, (uint64_t)v11, a5, 1);
    v20 = 0;
    *a6 = v19 == (uint64_t *)&v23;
    v10 = v22;
    do
    {
      if (SHIBYTE(v24[v20 + 2]) < 0)
        operator delete((void *)v24[v20]);
      v20 -= 3;
    }
    while (v20 != -6);
  }
  else
  {
    v23.__locale_ = (std::locale::__imp *)-1;
    v10 = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, std::ios_base *, _DWORD *, std::locale *))(*(_QWORD *)a1 + 32))(a1, a2, a3, this, a5, &v23);
    if (v23.__locale_ == (std::locale::__imp *)1)
    {
      *a6 = 1;
    }
    else if (v23.__locale_)
    {
      *a6 = 1;
      *a5 = 4;
    }
    else
    {
      *a6 = 0;
    }
  }
  return v10;
}

void sub_191FE004C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v17;

  v17 = 0;
  while (1)
  {
    if (*(char *)(v15 + v17 + 47) < 0)
      operator delete(*(void **)(v15 + v17 + 24));
    v17 -= 24;
    if (v17 == -48)
      _Unwind_Resume(exception_object);
  }
}

uint64_t *std::__scan_keyword[abi:ne180100]<std::istreambuf_iterator<wchar_t>,std::wstring const*,std::ctype<wchar_t>>(_QWORD **a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, _DWORD *a6, char a7)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t *v18;
  char *v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  int v25;
  int *v26;
  int v27;
  int v28;
  _QWORD *v29;
  unsigned int *v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t *v39;
  char *v40;
  uint64_t v41;
  _BOOL4 v42;
  int *v43;
  int v44;
  _DWORD *v46;
  char *v47;
  _QWORD **v48;
  char *v49;
  uint64_t *v50;
  _QWORD *v51;
  char v53;
  uint64_t v54;

  v9 = a4;
  v10 = a3;
  v54 = *MEMORY[0x1E0C80C00];
  v13 = a4 - a3;
  v14 = 0xAAAAAAAAAAAAAAABLL * v13;
  if (0xAAAAAAAAAAAAAAABLL * v13 < 0x65)
  {
    v15 = 0;
    v16 = &v53;
  }
  else
  {
    v15 = (char *)malloc_type_malloc(0xAAAAAAAAAAAAAAABLL * v13, 0x8BE91F8AuLL);
    v16 = v15;
    if (!v15)
      std::__throw_bad_alloc();
  }
  v51 = a2;
  v46 = a6;
  v47 = v15;
  if (v10 == v9)
  {
    v17 = 0;
  }
  else
  {
    v17 = 0;
    v18 = v10;
    v19 = v16;
    do
    {
      if (*((char *)v18 + 23) < 0)
        v20 = v18[1];
      else
        v20 = *((unsigned __int8 *)v18 + 23);
      v21 = v20 == 0;
      v22 = v20 == 0;
      if (v21)
        v23 = 2;
      else
        v23 = 1;
      if (v21)
        ++v17;
      v14 -= v22;
      *v19++ = v23;
      v18 += 3;
    }
    while (v18 != v9);
  }
  v24 = 0;
  v49 = v16;
  v50 = v10;
  v48 = a1;
  while (1)
  {
    v25 = std::istreambuf_iterator<wchar_t>::__test_for_eof[abi:ne180100](a1);
    if (v51)
    {
      v26 = (int *)v51[3];
      if (v26 == (int *)v51[4])
        v27 = (*(uint64_t (**)(void))(*v51 + 72))();
      else
        v27 = *v26;
      v28 = v27 == -1;
      v29 = v51;
      if (v27 == -1)
        v29 = 0;
      v51 = v29;
    }
    else
    {
      v51 = 0;
      v28 = 1;
    }
    if (v25 == v28 || !v14)
      break;
    v30 = (unsigned int *)(*a1)[3];
    if (v30 == (unsigned int *)(*a1)[4])
      v31 = (*(uint64_t (**)(_QWORD))(**a1 + 72))(*a1);
    else
      v31 = *v30;
    if ((a7 & 1) == 0)
      LODWORD(v31) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a5 + 56))(a5, v31);
    if (v10 != v9)
    {
      v32 = 0;
      v33 = v24 + 1;
      do
      {
        if (*v16 == 1)
        {
          v34 = v10;
          if (*((char *)v10 + 23) < 0)
            v34 = (uint64_t *)*v10;
          v35 = *((unsigned int *)v34 + v24);
          if ((a7 & 1) == 0)
            LODWORD(v35) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a5 + 56))(a5, v35);
          if ((_DWORD)v31 == (_DWORD)v35)
          {
            if (*((char *)v10 + 23) < 0)
              v36 = v10[1];
            else
              v36 = *((unsigned __int8 *)v10 + 23);
            if (v36 == v33)
            {
              *v16 = 2;
              --v14;
              ++v17;
            }
            v32 = 1;
          }
          else
          {
            *v16 = 0;
            --v14;
          }
        }
        v10 += 3;
        ++v16;
      }
      while (v10 != v9);
      if ((v32 & 1) != 0)
      {
        a1 = v48;
        v16 = v49;
        v37 = *v48;
        v38 = (*v48)[3];
        v10 = v50;
        if (v38 == (*v48)[4])
          (*(void (**)(_QWORD *))(*v37 + 80))(v37);
        else
          v37[3] = v38 + 4;
        v39 = v50;
        v40 = v49;
        if (v17 + v14 >= 2)
        {
          do
          {
            if (*v40 == 2)
            {
              if (*((char *)v39 + 23) < 0)
                v41 = v39[1];
              else
                v41 = *((unsigned __int8 *)v39 + 23);
              if (v41 != v33)
              {
                *v40 = 0;
                --v17;
              }
            }
            v39 += 3;
            ++v40;
          }
          while (v39 != v9);
        }
      }
      else
      {
        v16 = v49;
        v10 = v50;
        a1 = v48;
      }
    }
    ++v24;
  }
  v42 = std::istreambuf_iterator<wchar_t>::__test_for_eof[abi:ne180100](a1);
  if (!v51)
  {
    if (!v42)
      goto LABEL_74;
    goto LABEL_71;
  }
  v43 = (int *)v51[3];
  if (v43 == (int *)v51[4])
    v44 = (*(uint64_t (**)(void))(*v51 + 72))();
  else
    v44 = *v43;
  if (((v42 ^ (v44 == -1)) & 1) == 0)
  {
LABEL_71:
    *v46 |= 2u;
    goto LABEL_74;
  }
  while (1)
  {
LABEL_74:
    if (v10 == v9)
    {
      *v46 |= 4u;
      goto LABEL_77;
    }
    if (*v16 == 2)
      break;
    v10 += 3;
    ++v16;
  }
  v9 = v10;
LABEL_77:
  if (v47)
    free(v47);
  return v9;
}

void sub_191FE0490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
  if (a11)
    free(a11);
  _Unwind_Resume(exception_object);
}

_QWORD *std::num_get<wchar_t,std::istreambuf_iterator<wchar_t>>::__do_get_signed<long>(uint64_t a1, _QWORD *a2, _QWORD *a3, const std::ios_base *a4, std::ios_base::iostate *a5, uint64_t *a6)
{
  int v10;
  int v11;
  unsigned int v12;
  std::string *v13;
  int *v14;
  int v15;
  _BOOL4 v16;
  int *v17;
  int v18;
  std::string::size_type size;
  std::string::size_type v20;
  __int32 *v21;
  __int32 v22;
  uint64_t v23;
  std::string::size_type v24;
  unsigned int *v25;
  int *v26;
  int v27;
  _BOOL4 v28;
  int *v29;
  int v30;
  uint64_t *v32;
  unsigned int v33;
  unsigned int *__g_end;
  std::string *v35;
  std::string v36;
  std::string __grouping;
  int v38;
  unsigned int __g[40];
  __int32 v40[26];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v10 = a4->__fmtflags_ & 0x4A;
  if (v10)
  {
    if (v10 == 8)
      v11 = 16;
    else
      v11 = 10;
    if (v10 == 64)
      v12 = 8;
    else
      v12 = v11;
  }
  else
  {
    v12 = 0;
  }
  std::__num_get<wchar_t>::__stage2_int_prep(a4, (uint64_t)v40, &v38);
  v32 = a6;
  memset(&v36, 0, sizeof(v36));
  std::string::resize(&v36, 0x16uLL, 0);
  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = &v36;
  else
    v13 = (std::string *)v36.__r_.__value_.__r.__words[0];
  __g_end = __g;
  v35 = v13;
  v33 = 0;
  while (!a2)
  {
    v16 = 1;
    if (a3)
      goto LABEL_23;
LABEL_17:
    if (v16)
      goto LABEL_47;
LABEL_29:
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      size = v36.__r_.__value_.__l.__size_;
    else
      size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
    if (v35 == (std::string *)((char *)v13 + size))
    {
      std::string::resize(&v36, 2 * size, 0);
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v20 = 22;
      else
        v20 = (v36.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      std::string::resize(&v36, v20, 0);
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v13 = &v36;
      else
        v13 = (std::string *)v36.__r_.__value_.__r.__words[0];
      v35 = (std::string *)((char *)v13 + size);
    }
    v21 = (__int32 *)a2[3];
    if (v21 == (__int32 *)a2[4])
      v22 = (*(uint64_t (**)(_QWORD *))(*a2 + 72))(a2);
    else
      v22 = *v21;
    if (std::__num_get<wchar_t>::__stage2_int_loop(v22, v12, (char *)v13, (char **)&v35, &v33, v38, (uint64_t)&__grouping, (uint64_t)__g, &__g_end, v40))goto LABEL_47;
    v23 = a2[3];
    if (v23 == a2[4])
      (*(void (**)(_QWORD *))(*a2 + 80))(a2);
    else
      a2[3] = v23 + 4;
  }
  v14 = (int *)a2[3];
  if (v14 == (int *)a2[4])
    v15 = (*(uint64_t (**)(_QWORD *))(*a2 + 72))(a2);
  else
    v15 = *v14;
  v16 = v15 == -1;
  if (v15 == -1)
    a2 = 0;
  if (!a3)
    goto LABEL_17;
LABEL_23:
  v17 = (int *)a3[3];
  if (v17 == (int *)a3[4])
    v18 = (*(uint64_t (**)(_QWORD *))(*a3 + 72))(a3);
  else
    v18 = *v17;
  if (v18 == -1)
    a3 = 0;
  if (v16 != (v18 == -1))
    goto LABEL_29;
LABEL_47:
  v24 = HIBYTE(__grouping.__r_.__value_.__r.__words[2]);
  if ((__grouping.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v24 = __grouping.__r_.__value_.__l.__size_;
  if (v24)
  {
    v25 = __g_end;
    if ((char *)__g_end - (char *)__g <= 159)
    {
      *__g_end = v33;
      __g_end = v25 + 1;
    }
  }
  *v32 = std::__num_get_signed_integral[abi:ne180100]<long>((const char *)v13, (char *)v35, a5, v12);
  std::__check_grouping(&__grouping, __g, __g_end, a5);
  if (!a2)
  {
    v28 = 1;
    if (a3)
      goto LABEL_62;
LABEL_56:
    if (v28)
      goto LABEL_66;
    goto LABEL_67;
  }
  v26 = (int *)a2[3];
  if (v26 == (int *)a2[4])
    v27 = (*(uint64_t (**)(_QWORD *))(*a2 + 72))(a2);
  else
    v27 = *v26;
  v28 = v27 == -1;
  if (v27 == -1)
    a2 = 0;
  if (!a3)
    goto LABEL_56;
LABEL_62:
  v29 = (int *)a3[3];
  if (v29 == (int *)a3[4])
    v30 = (*(uint64_t (**)(_QWORD *))(*a3 + 72))(a3);
  else
    v30 = *v29;
  if (((v28 ^ (v30 == -1)) & 1) == 0)
LABEL_66:
    *a5 |= 2u;
LABEL_67:
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if (SHIBYTE(__grouping.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__grouping.__r_.__value_.__l.__data_);
  return a2;
}

void sub_191FE0844(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

_QWORD *std::num_get<wchar_t,std::istreambuf_iterator<wchar_t>>::__do_get_signed<long long>(uint64_t a1, _QWORD *a2, _QWORD *a3, const std::ios_base *a4, std::ios_base::iostate *a5, uint64_t *a6)
{
  int v10;
  int v11;
  unsigned int v12;
  std::string *v13;
  int *v14;
  int v15;
  _BOOL4 v16;
  int *v17;
  int v18;
  std::string::size_type size;
  std::string::size_type v20;
  __int32 *v21;
  __int32 v22;
  uint64_t v23;
  std::string::size_type v24;
  unsigned int *v25;
  int *v26;
  int v27;
  _BOOL4 v28;
  int *v29;
  int v30;
  uint64_t *v32;
  unsigned int v33;
  unsigned int *__g_end;
  std::string *v35;
  std::string v36;
  std::string __grouping;
  int v38;
  unsigned int __g[40];
  __int32 v40[26];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v10 = a4->__fmtflags_ & 0x4A;
  if (v10)
  {
    if (v10 == 8)
      v11 = 16;
    else
      v11 = 10;
    if (v10 == 64)
      v12 = 8;
    else
      v12 = v11;
  }
  else
  {
    v12 = 0;
  }
  std::__num_get<wchar_t>::__stage2_int_prep(a4, (uint64_t)v40, &v38);
  v32 = a6;
  memset(&v36, 0, sizeof(v36));
  std::string::resize(&v36, 0x16uLL, 0);
  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = &v36;
  else
    v13 = (std::string *)v36.__r_.__value_.__r.__words[0];
  __g_end = __g;
  v35 = v13;
  v33 = 0;
  while (!a2)
  {
    v16 = 1;
    if (a3)
      goto LABEL_23;
LABEL_17:
    if (v16)
      goto LABEL_47;
LABEL_29:
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      size = v36.__r_.__value_.__l.__size_;
    else
      size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
    if (v35 == (std::string *)((char *)v13 + size))
    {
      std::string::resize(&v36, 2 * size, 0);
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v20 = 22;
      else
        v20 = (v36.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      std::string::resize(&v36, v20, 0);
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v13 = &v36;
      else
        v13 = (std::string *)v36.__r_.__value_.__r.__words[0];
      v35 = (std::string *)((char *)v13 + size);
    }
    v21 = (__int32 *)a2[3];
    if (v21 == (__int32 *)a2[4])
      v22 = (*(uint64_t (**)(_QWORD *))(*a2 + 72))(a2);
    else
      v22 = *v21;
    if (std::__num_get<wchar_t>::__stage2_int_loop(v22, v12, (char *)v13, (char **)&v35, &v33, v38, (uint64_t)&__grouping, (uint64_t)__g, &__g_end, v40))goto LABEL_47;
    v23 = a2[3];
    if (v23 == a2[4])
      (*(void (**)(_QWORD *))(*a2 + 80))(a2);
    else
      a2[3] = v23 + 4;
  }
  v14 = (int *)a2[3];
  if (v14 == (int *)a2[4])
    v15 = (*(uint64_t (**)(_QWORD *))(*a2 + 72))(a2);
  else
    v15 = *v14;
  v16 = v15 == -1;
  if (v15 == -1)
    a2 = 0;
  if (!a3)
    goto LABEL_17;
LABEL_23:
  v17 = (int *)a3[3];
  if (v17 == (int *)a3[4])
    v18 = (*(uint64_t (**)(_QWORD *))(*a3 + 72))(a3);
  else
    v18 = *v17;
  if (v18 == -1)
    a3 = 0;
  if (v16 != (v18 == -1))
    goto LABEL_29;
LABEL_47:
  v24 = HIBYTE(__grouping.__r_.__value_.__r.__words[2]);
  if ((__grouping.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v24 = __grouping.__r_.__value_.__l.__size_;
  if (v24)
  {
    v25 = __g_end;
    if ((char *)__g_end - (char *)__g <= 159)
    {
      *__g_end = v33;
      __g_end = v25 + 1;
    }
  }
  *v32 = std::__num_get_signed_integral[abi:ne180100]<long long>((const char *)v13, (char *)v35, a5, v12);
  std::__check_grouping(&__grouping, __g, __g_end, a5);
  if (!a2)
  {
    v28 = 1;
    if (a3)
      goto LABEL_62;
LABEL_56:
    if (v28)
      goto LABEL_66;
    goto LABEL_67;
  }
  v26 = (int *)a2[3];
  if (v26 == (int *)a2[4])
    v27 = (*(uint64_t (**)(_QWORD *))(*a2 + 72))(a2);
  else
    v27 = *v26;
  v28 = v27 == -1;
  if (v27 == -1)
    a2 = 0;
  if (!a3)
    goto LABEL_56;
LABEL_62:
  v29 = (int *)a3[3];
  if (v29 == (int *)a3[4])
    v30 = (*(uint64_t (**)(_QWORD *))(*a3 + 72))(a3);
  else
    v30 = *v29;
  if (((v28 ^ (v30 == -1)) & 1) == 0)
LABEL_66:
    *a5 |= 2u;
LABEL_67:
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if (SHIBYTE(__grouping.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__grouping.__r_.__value_.__l.__data_);
  return a2;
}

void sub_191FE0C10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

_QWORD *std::num_get<wchar_t,std::istreambuf_iterator<wchar_t>>::__do_get_unsigned<unsigned short>(uint64_t a1, _QWORD *a2, _QWORD *a3, const std::ios_base *a4, std::ios_base::iostate *a5, _WORD *a6)
{
  int v10;
  int v11;
  unsigned int v12;
  std::string *v13;
  int *v14;
  int v15;
  _BOOL4 v16;
  int *v17;
  int v18;
  std::string::size_type size;
  std::string::size_type v20;
  __int32 *v21;
  __int32 v22;
  uint64_t v23;
  std::string::size_type v24;
  unsigned int *v25;
  int *v26;
  int v27;
  _BOOL4 v28;
  int *v29;
  int v30;
  _WORD *v32;
  unsigned int v33;
  unsigned int *__g_end;
  std::string *v35;
  std::string v36;
  std::string __grouping;
  int v38;
  unsigned int __g[40];
  __int32 v40[26];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v10 = a4->__fmtflags_ & 0x4A;
  if (v10)
  {
    if (v10 == 8)
      v11 = 16;
    else
      v11 = 10;
    if (v10 == 64)
      v12 = 8;
    else
      v12 = v11;
  }
  else
  {
    v12 = 0;
  }
  std::__num_get<wchar_t>::__stage2_int_prep(a4, (uint64_t)v40, &v38);
  v32 = a6;
  memset(&v36, 0, sizeof(v36));
  std::string::resize(&v36, 0x16uLL, 0);
  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = &v36;
  else
    v13 = (std::string *)v36.__r_.__value_.__r.__words[0];
  __g_end = __g;
  v35 = v13;
  v33 = 0;
  while (!a2)
  {
    v16 = 1;
    if (a3)
      goto LABEL_23;
LABEL_17:
    if (v16)
      goto LABEL_47;
LABEL_29:
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      size = v36.__r_.__value_.__l.__size_;
    else
      size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
    if (v35 == (std::string *)((char *)v13 + size))
    {
      std::string::resize(&v36, 2 * size, 0);
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v20 = 22;
      else
        v20 = (v36.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      std::string::resize(&v36, v20, 0);
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v13 = &v36;
      else
        v13 = (std::string *)v36.__r_.__value_.__r.__words[0];
      v35 = (std::string *)((char *)v13 + size);
    }
    v21 = (__int32 *)a2[3];
    if (v21 == (__int32 *)a2[4])
      v22 = (*(uint64_t (**)(_QWORD *))(*a2 + 72))(a2);
    else
      v22 = *v21;
    if (std::__num_get<wchar_t>::__stage2_int_loop(v22, v12, (char *)v13, (char **)&v35, &v33, v38, (uint64_t)&__grouping, (uint64_t)__g, &__g_end, v40))goto LABEL_47;
    v23 = a2[3];
    if (v23 == a2[4])
      (*(void (**)(_QWORD *))(*a2 + 80))(a2);
    else
      a2[3] = v23 + 4;
  }
  v14 = (int *)a2[3];
  if (v14 == (int *)a2[4])
    v15 = (*(uint64_t (**)(_QWORD *))(*a2 + 72))(a2);
  else
    v15 = *v14;
  v16 = v15 == -1;
  if (v15 == -1)
    a2 = 0;
  if (!a3)
    goto LABEL_17;
LABEL_23:
  v17 = (int *)a3[3];
  if (v17 == (int *)a3[4])
    v18 = (*(uint64_t (**)(_QWORD *))(*a3 + 72))(a3);
  else
    v18 = *v17;
  if (v18 == -1)
    a3 = 0;
  if (v16 != (v18 == -1))
    goto LABEL_29;
LABEL_47:
  v24 = HIBYTE(__grouping.__r_.__value_.__r.__words[2]);
  if ((__grouping.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v24 = __grouping.__r_.__value_.__l.__size_;
  if (v24)
  {
    v25 = __g_end;
    if ((char *)__g_end - (char *)__g <= 159)
    {
      *__g_end = v33;
      __g_end = v25 + 1;
    }
  }
  *v32 = std::__num_get_unsigned_integral[abi:ne180100]<unsigned short>((char *)v13, (char *)v35, a5, v12);
  std::__check_grouping(&__grouping, __g, __g_end, a5);
  if (!a2)
  {
    v28 = 1;
    if (a3)
      goto LABEL_62;
LABEL_56:
    if (v28)
      goto LABEL_66;
    goto LABEL_67;
  }
  v26 = (int *)a2[3];
  if (v26 == (int *)a2[4])
    v27 = (*(uint64_t (**)(_QWORD *))(*a2 + 72))(a2);
  else
    v27 = *v26;
  v28 = v27 == -1;
  if (v27 == -1)
    a2 = 0;
  if (!a3)
    goto LABEL_56;
LABEL_62:
  v29 = (int *)a3[3];
  if (v29 == (int *)a3[4])
    v30 = (*(uint64_t (**)(_QWORD *))(*a3 + 72))(a3);
  else
    v30 = *v29;
  if (((v28 ^ (v30 == -1)) & 1) == 0)
LABEL_66:
    *a5 |= 2u;
LABEL_67:
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if (SHIBYTE(__grouping.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__grouping.__r_.__value_.__l.__data_);
  return a2;
}

void sub_191FE0FDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

_QWORD *std::num_get<wchar_t,std::istreambuf_iterator<wchar_t>>::__do_get_unsigned<unsigned int>(uint64_t a1, _QWORD *a2, _QWORD *a3, const std::ios_base *a4, std::ios_base::iostate *a5, _DWORD *a6)
{
  int v10;
  int v11;
  unsigned int v12;
  std::string *v13;
  int *v14;
  int v15;
  _BOOL4 v16;
  int *v17;
  int v18;
  std::string::size_type size;
  std::string::size_type v20;
  __int32 *v21;
  __int32 v22;
  uint64_t v23;
  std::string::size_type v24;
  unsigned int *v25;
  int *v26;
  int v27;
  _BOOL4 v28;
  int *v29;
  int v30;
  _DWORD *v32;
  unsigned int v33;
  unsigned int *__g_end;
  std::string *v35;
  std::string v36;
  std::string __grouping;
  int v38;
  unsigned int __g[40];
  __int32 v40[26];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v10 = a4->__fmtflags_ & 0x4A;
  if (v10)
  {
    if (v10 == 8)
      v11 = 16;
    else
      v11 = 10;
    if (v10 == 64)
      v12 = 8;
    else
      v12 = v11;
  }
  else
  {
    v12 = 0;
  }
  std::__num_get<wchar_t>::__stage2_int_prep(a4, (uint64_t)v40, &v38);
  v32 = a6;
  memset(&v36, 0, sizeof(v36));
  std::string::resize(&v36, 0x16uLL, 0);
  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = &v36;
  else
    v13 = (std::string *)v36.__r_.__value_.__r.__words[0];
  __g_end = __g;
  v35 = v13;
  v33 = 0;
  while (!a2)
  {
    v16 = 1;
    if (a3)
      goto LABEL_23;
LABEL_17:
    if (v16)
      goto LABEL_47;
LABEL_29:
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      size = v36.__r_.__value_.__l.__size_;
    else
      size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
    if (v35 == (std::string *)((char *)v13 + size))
    {
      std::string::resize(&v36, 2 * size, 0);
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v20 = 22;
      else
        v20 = (v36.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      std::string::resize(&v36, v20, 0);
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v13 = &v36;
      else
        v13 = (std::string *)v36.__r_.__value_.__r.__words[0];
      v35 = (std::string *)((char *)v13 + size);
    }
    v21 = (__int32 *)a2[3];
    if (v21 == (__int32 *)a2[4])
      v22 = (*(uint64_t (**)(_QWORD *))(*a2 + 72))(a2);
    else
      v22 = *v21;
    if (std::__num_get<wchar_t>::__stage2_int_loop(v22, v12, (char *)v13, (char **)&v35, &v33, v38, (uint64_t)&__grouping, (uint64_t)__g, &__g_end, v40))goto LABEL_47;
    v23 = a2[3];
    if (v23 == a2[4])
      (*(void (**)(_QWORD *))(*a2 + 80))(a2);
    else
      a2[3] = v23 + 4;
  }
  v14 = (int *)a2[3];
  if (v14 == (int *)a2[4])
    v15 = (*(uint64_t (**)(_QWORD *))(*a2 + 72))(a2);
  else
    v15 = *v14;
  v16 = v15 == -1;
  if (v15 == -1)
    a2 = 0;
  if (!a3)
    goto LABEL_17;
LABEL_23:
  v17 = (int *)a3[3];
  if (v17 == (int *)a3[4])
    v18 = (*(uint64_t (**)(_QWORD *))(*a3 + 72))(a3);
  else
    v18 = *v17;
  if (v18 == -1)
    a3 = 0;
  if (v16 != (v18 == -1))
    goto LABEL_29;
LABEL_47:
  v24 = HIBYTE(__grouping.__r_.__value_.__r.__words[2]);
  if ((__grouping.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v24 = __grouping.__r_.__value_.__l.__size_;
  if (v24)
  {
    v25 = __g_end;
    if ((char *)__g_end - (char *)__g <= 159)
    {
      *__g_end = v33;
      __g_end = v25 + 1;
    }
  }
  *v32 = std::__num_get_unsigned_integral[abi:ne180100]<unsigned int>((char *)v13, (char *)v35, a5, v12);
  std::__check_grouping(&__grouping, __g, __g_end, a5);
  if (!a2)
  {
    v28 = 1;
    if (a3)
      goto LABEL_62;
LABEL_56:
    if (v28)
      goto LABEL_66;
    goto LABEL_67;
  }
  v26 = (int *)a2[3];
  if (v26 == (int *)a2[4])
    v27 = (*(uint64_t (**)(_QWORD *))(*a2 + 72))(a2);
  else
    v27 = *v26;
  v28 = v27 == -1;
  if (v27 == -1)
    a2 = 0;
  if (!a3)
    goto LABEL_56;
LABEL_62:
  v29 = (int *)a3[3];
  if (v29 == (int *)a3[4])
    v30 = (*(uint64_t (**)(_QWORD *))(*a3 + 72))(a3);
  else
    v30 = *v29;
  if (((v28 ^ (v30 == -1)) & 1) == 0)
LABEL_66:
    *a5 |= 2u;
LABEL_67:
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if (SHIBYTE(__grouping.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__grouping.__r_.__value_.__l.__data_);
  return a2;
}

void sub_191FE13A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

_QWORD *std::num_get<wchar_t,std::istreambuf_iterator<wchar_t>>::__do_get_unsigned<unsigned long>(uint64_t a1, _QWORD *a2, _QWORD *a3, const std::ios_base *a4, std::ios_base::iostate *a5, uint64_t *a6)
{
  int v10;
  int v11;
  unsigned int v12;
  std::string *v13;
  int *v14;
  int v15;
  _BOOL4 v16;
  int *v17;
  int v18;
  std::string::size_type size;
  std::string::size_type v20;
  __int32 *v21;
  __int32 v22;
  uint64_t v23;
  std::string::size_type v24;
  unsigned int *v25;
  int *v26;
  int v27;
  _BOOL4 v28;
  int *v29;
  int v30;
  uint64_t *v32;
  unsigned int v33;
  unsigned int *__g_end;
  std::string *v35;
  std::string v36;
  std::string __grouping;
  int v38;
  unsigned int __g[40];
  __int32 v40[26];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v10 = a4->__fmtflags_ & 0x4A;
  if (v10)
  {
    if (v10 == 8)
      v11 = 16;
    else
      v11 = 10;
    if (v10 == 64)
      v12 = 8;
    else
      v12 = v11;
  }
  else
  {
    v12 = 0;
  }
  std::__num_get<wchar_t>::__stage2_int_prep(a4, (uint64_t)v40, &v38);
  v32 = a6;
  memset(&v36, 0, sizeof(v36));
  std::string::resize(&v36, 0x16uLL, 0);
  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = &v36;
  else
    v13 = (std::string *)v36.__r_.__value_.__r.__words[0];
  __g_end = __g;
  v35 = v13;
  v33 = 0;
  while (!a2)
  {
    v16 = 1;
    if (a3)
      goto LABEL_23;
LABEL_17:
    if (v16)
      goto LABEL_47;
LABEL_29:
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      size = v36.__r_.__value_.__l.__size_;
    else
      size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
    if (v35 == (std::string *)((char *)v13 + size))
    {
      std::string::resize(&v36, 2 * size, 0);
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v20 = 22;
      else
        v20 = (v36.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      std::string::resize(&v36, v20, 0);
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v13 = &v36;
      else
        v13 = (std::string *)v36.__r_.__value_.__r.__words[0];
      v35 = (std::string *)((char *)v13 + size);
    }
    v21 = (__int32 *)a2[3];
    if (v21 == (__int32 *)a2[4])
      v22 = (*(uint64_t (**)(_QWORD *))(*a2 + 72))(a2);
    else
      v22 = *v21;
    if (std::__num_get<wchar_t>::__stage2_int_loop(v22, v12, (char *)v13, (char **)&v35, &v33, v38, (uint64_t)&__grouping, (uint64_t)__g, &__g_end, v40))goto LABEL_47;
    v23 = a2[3];
    if (v23 == a2[4])
      (*(void (**)(_QWORD *))(*a2 + 80))(a2);
    else
      a2[3] = v23 + 4;
  }
  v14 = (int *)a2[3];
  if (v14 == (int *)a2[4])
    v15 = (*(uint64_t (**)(_QWORD *))(*a2 + 72))(a2);
  else
    v15 = *v14;
  v16 = v15 == -1;
  if (v15 == -1)
    a2 = 0;
  if (!a3)
    goto LABEL_17;
LABEL_23:
  v17 = (int *)a3[3];
  if (v17 == (int *)a3[4])
    v18 = (*(uint64_t (**)(_QWORD *))(*a3 + 72))(a3);
  else
    v18 = *v17;
  if (v18 == -1)
    a3 = 0;
  if (v16 != (v18 == -1))
    goto LABEL_29;
LABEL_47:
  v24 = HIBYTE(__grouping.__r_.__value_.__r.__words[2]);
  if ((__grouping.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v24 = __grouping.__r_.__value_.__l.__size_;
  if (v24)
  {
    v25 = __g_end;
    if ((char *)__g_end - (char *)__g <= 159)
    {
      *__g_end = v33;
      __g_end = v25 + 1;
    }
  }
  *v32 = std::__num_get_unsigned_integral[abi:ne180100]<unsigned long>((char *)v13, (char *)v35, a5, v12);
  std::__check_grouping(&__grouping, __g, __g_end, a5);
  if (!a2)
  {
    v28 = 1;
    if (a3)
      goto LABEL_62;
LABEL_56:
    if (v28)
      goto LABEL_66;
    goto LABEL_67;
  }
  v26 = (int *)a2[3];
  if (v26 == (int *)a2[4])
    v27 = (*(uint64_t (**)(_QWORD *))(*a2 + 72))(a2);
  else
    v27 = *v26;
  v28 = v27 == -1;
  if (v27 == -1)
    a2 = 0;
  if (!a3)
    goto LABEL_56;
LABEL_62:
  v29 = (int *)a3[3];
  if (v29 == (int *)a3[4])
    v30 = (*(uint64_t (**)(_QWORD *))(*a3 + 72))(a3);
  else
    v30 = *v29;
  if (((v28 ^ (v30 == -1)) & 1) == 0)
LABEL_66:
    *a5 |= 2u;
LABEL_67:
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if (SHIBYTE(__grouping.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__grouping.__r_.__value_.__l.__data_);
  return a2;
}

void sub_191FE1774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

_QWORD *std::num_get<wchar_t,std::istreambuf_iterator<wchar_t>>::__do_get_unsigned<unsigned long long>(uint64_t a1, _QWORD *a2, _QWORD *a3, const std::ios_base *a4, std::ios_base::iostate *a5, uint64_t *a6)
{
  int v10;
  int v11;
  unsigned int v12;
  std::string *v13;
  int *v14;
  int v15;
  _BOOL4 v16;
  int *v17;
  int v18;
  std::string::size_type size;
  std::string::size_type v20;
  __int32 *v21;
  __int32 v22;
  uint64_t v23;
  std::string::size_type v24;
  unsigned int *v25;
  int *v26;
  int v27;
  _BOOL4 v28;
  int *v29;
  int v30;
  uint64_t *v32;
  unsigned int v33;
  unsigned int *__g_end;
  std::string *v35;
  std::string v36;
  std::string __grouping;
  int v38;
  unsigned int __g[40];
  __int32 v40[26];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v10 = a4->__fmtflags_ & 0x4A;
  if (v10)
  {
    if (v10 == 8)
      v11 = 16;
    else
      v11 = 10;
    if (v10 == 64)
      v12 = 8;
    else
      v12 = v11;
  }
  else
  {
    v12 = 0;
  }
  std::__num_get<wchar_t>::__stage2_int_prep(a4, (uint64_t)v40, &v38);
  v32 = a6;
  memset(&v36, 0, sizeof(v36));
  std::string::resize(&v36, 0x16uLL, 0);
  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = &v36;
  else
    v13 = (std::string *)v36.__r_.__value_.__r.__words[0];
  __g_end = __g;
  v35 = v13;
  v33 = 0;
  while (!a2)
  {
    v16 = 1;
    if (a3)
      goto LABEL_23;
LABEL_17:
    if (v16)
      goto LABEL_47;
LABEL_29:
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      size = v36.__r_.__value_.__l.__size_;
    else
      size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
    if (v35 == (std::string *)((char *)v13 + size))
    {
      std::string::resize(&v36, 2 * size, 0);
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v20 = 22;
      else
        v20 = (v36.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      std::string::resize(&v36, v20, 0);
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v13 = &v36;
      else
        v13 = (std::string *)v36.__r_.__value_.__r.__words[0];
      v35 = (std::string *)((char *)v13 + size);
    }
    v21 = (__int32 *)a2[3];
    if (v21 == (__int32 *)a2[4])
      v22 = (*(uint64_t (**)(_QWORD *))(*a2 + 72))(a2);
    else
      v22 = *v21;
    if (std::__num_get<wchar_t>::__stage2_int_loop(v22, v12, (char *)v13, (char **)&v35, &v33, v38, (uint64_t)&__grouping, (uint64_t)__g, &__g_end, v40))goto LABEL_47;
    v23 = a2[3];
    if (v23 == a2[4])
      (*(void (**)(_QWORD *))(*a2 + 80))(a2);
    else
      a2[3] = v23 + 4;
  }
  v14 = (int *)a2[3];
  if (v14 == (int *)a2[4])
    v15 = (*(uint64_t (**)(_QWORD *))(*a2 + 72))(a2);
  else
    v15 = *v14;
  v16 = v15 == -1;
  if (v15 == -1)
    a2 = 0;
  if (!a3)
    goto LABEL_17;
LABEL_23:
  v17 = (int *)a3[3];
  if (v17 == (int *)a3[4])
    v18 = (*(uint64_t (**)(_QWORD *))(*a3 + 72))(a3);
  else
    v18 = *v17;
  if (v18 == -1)
    a3 = 0;
  if (v16 != (v18 == -1))
    goto LABEL_29;
LABEL_47:
  v24 = HIBYTE(__grouping.__r_.__value_.__r.__words[2]);
  if ((__grouping.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v24 = __grouping.__r_.__value_.__l.__size_;
  if (v24)
  {
    v25 = __g_end;
    if ((char *)__g_end - (char *)__g <= 159)
    {
      *__g_end = v33;
      __g_end = v25 + 1;
    }
  }
  *v32 = std::__num_get_unsigned_integral[abi:ne180100]<unsigned long long>((char *)v13, (char *)v35, a5, v12);
  std::__check_grouping(&__grouping, __g, __g_end, a5);
  if (!a2)
  {
    v28 = 1;
    if (a3)
      goto LABEL_62;
LABEL_56:
    if (v28)
      goto LABEL_66;
    goto LABEL_67;
  }
  v26 = (int *)a2[3];
  if (v26 == (int *)a2[4])
    v27 = (*(uint64_t (**)(_QWORD *))(*a2 + 72))(a2);
  else
    v27 = *v26;
  v28 = v27 == -1;
  if (v27 == -1)
    a2 = 0;
  if (!a3)
    goto LABEL_56;
LABEL_62:
  v29 = (int *)a3[3];
  if (v29 == (int *)a3[4])
    v30 = (*(uint64_t (**)(_QWORD *))(*a3 + 72))(a3);
  else
    v30 = *v29;
  if (((v28 ^ (v30 == -1)) & 1) == 0)
LABEL_66:
    *a5 |= 2u;
LABEL_67:
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if (SHIBYTE(__grouping.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__grouping.__r_.__value_.__l.__data_);
  return a2;
}

void sub_191FE1B40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

_QWORD *std::num_get<wchar_t,std::istreambuf_iterator<wchar_t>>::__do_get_floating_point<float>(uint64_t a1, _QWORD *a2, _QWORD *a3, const std::ios_base *a4, std::ios_base::iostate *a5, float *a6)
{
  std::string *v10;
  int *v11;
  int v12;
  _BOOL4 v13;
  int *v14;
  int v15;
  std::string::size_type size;
  std::string::size_type v17;
  __int32 *v18;
  __int32 v19;
  uint64_t v20;
  std::string::size_type v21;
  BOOL v22;
  unsigned int *v23;
  int *v24;
  int v25;
  _BOOL4 v26;
  int *v27;
  int v28;
  std::ios_base::iostate *v30;
  char v31;
  char v32;
  unsigned int v33;
  unsigned int *__g_end;
  std::string *v35;
  std::string v36;
  std::string __grouping;
  int v38;
  int v39;
  unsigned int __g[40];
  __int32 v41[32];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  std::__num_get<wchar_t>::__stage2_float_prep(a4, (uint64_t)v41, &v39, &v38);
  v30 = a5;
  memset(&v36, 0, sizeof(v36));
  std::string::resize(&v36, 0x16uLL, 0);
  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = &v36;
  else
    v10 = (std::string *)v36.__r_.__value_.__r.__words[0];
  __g_end = __g;
  v35 = v10;
  v33 = 0;
  v32 = 1;
  v31 = 69;
  while (!a2)
  {
    v13 = 1;
    if (a3)
      goto LABEL_15;
LABEL_9:
    if (v13)
      goto LABEL_39;
LABEL_21:
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      size = v36.__r_.__value_.__l.__size_;
    else
      size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
    if (v35 == (std::string *)((char *)v10 + size))
    {
      std::string::resize(&v36, 2 * size, 0);
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v17 = 22;
      else
        v17 = (v36.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      std::string::resize(&v36, v17, 0);
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v10 = &v36;
      else
        v10 = (std::string *)v36.__r_.__value_.__r.__words[0];
      v35 = (std::string *)((char *)v10 + size);
    }
    v18 = (__int32 *)a2[3];
    if (v18 == (__int32 *)a2[4])
      v19 = (*(uint64_t (**)(_QWORD *))(*a2 + 72))(a2);
    else
      v19 = *v18;
    if (std::__num_get<wchar_t>::__stage2_float_loop(v19, &v32, &v31, (char *)v10, (char **)&v35, v39, v38, (uint64_t)&__grouping, (uint64_t)__g, &__g_end, &v33, v41))goto LABEL_39;
    v20 = a2[3];
    if (v20 == a2[4])
      (*(void (**)(_QWORD *))(*a2 + 80))(a2);
    else
      a2[3] = v20 + 4;
  }
  v11 = (int *)a2[3];
  if (v11 == (int *)a2[4])
    v12 = (*(uint64_t (**)(_QWORD *))(*a2 + 72))(a2);
  else
    v12 = *v11;
  v13 = v12 == -1;
  if (v12 == -1)
    a2 = 0;
  if (!a3)
    goto LABEL_9;
LABEL_15:
  v14 = (int *)a3[3];
  if (v14 == (int *)a3[4])
    v15 = (*(uint64_t (**)(_QWORD *))(*a3 + 72))(a3);
  else
    v15 = *v14;
  if (v15 == -1)
    a3 = 0;
  if (v13 != (v15 == -1))
    goto LABEL_21;
LABEL_39:
  v21 = HIBYTE(__grouping.__r_.__value_.__r.__words[2]);
  if ((__grouping.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v21 = __grouping.__r_.__value_.__l.__size_;
  if (v21)
    v22 = v32 == 0;
  else
    v22 = 1;
  if (!v22)
  {
    v23 = __g_end;
    if ((char *)__g_end - (char *)__g <= 159)
    {
      *__g_end = v33;
      __g_end = v23 + 1;
    }
  }
  *a6 = std::__num_get_float[abi:ne180100]<float>((const char *)v10, (char *)v35, v30);
  std::__check_grouping(&__grouping, __g, __g_end, v30);
  if (!a2)
  {
    v26 = 1;
    if (a3)
      goto LABEL_57;
LABEL_51:
    if (v26)
      goto LABEL_61;
    goto LABEL_62;
  }
  v24 = (int *)a2[3];
  if (v24 == (int *)a2[4])
    v25 = (*(uint64_t (**)(_QWORD *))(*a2 + 72))(a2);
  else
    v25 = *v24;
  v26 = v25 == -1;
  if (v25 == -1)
    a2 = 0;
  if (!a3)
    goto LABEL_51;
LABEL_57:
  v27 = (int *)a3[3];
  if (v27 == (int *)a3[4])
    v28 = (*(uint64_t (**)(_QWORD *))(*a3 + 72))(a3);
  else
    v28 = *v27;
  if (((v26 ^ (v28 == -1)) & 1) == 0)
LABEL_61:
    *v30 |= 2u;
LABEL_62:
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if (SHIBYTE(__grouping.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__grouping.__r_.__value_.__l.__data_);
  return a2;
}

void sub_191FE1EFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

_QWORD *std::num_get<wchar_t,std::istreambuf_iterator<wchar_t>>::__do_get_floating_point<double>(uint64_t a1, _QWORD *a2, _QWORD *a3, const std::ios_base *a4, std::ios_base::iostate *a5, double *a6)
{
  std::string *v10;
  int *v11;
  int v12;
  _BOOL4 v13;
  int *v14;
  int v15;
  std::string::size_type size;
  std::string::size_type v17;
  __int32 *v18;
  __int32 v19;
  uint64_t v20;
  std::string::size_type v21;
  BOOL v22;
  unsigned int *v23;
  int *v24;
  int v25;
  _BOOL4 v26;
  int *v27;
  int v28;
  std::ios_base::iostate *v30;
  char v31;
  char v32;
  unsigned int v33;
  unsigned int *__g_end;
  std::string *v35;
  std::string v36;
  std::string __grouping;
  int v38;
  int v39;
  unsigned int __g[40];
  __int32 v41[32];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  std::__num_get<wchar_t>::__stage2_float_prep(a4, (uint64_t)v41, &v39, &v38);
  v30 = a5;
  memset(&v36, 0, sizeof(v36));
  std::string::resize(&v36, 0x16uLL, 0);
  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = &v36;
  else
    v10 = (std::string *)v36.__r_.__value_.__r.__words[0];
  __g_end = __g;
  v35 = v10;
  v33 = 0;
  v32 = 1;
  v31 = 69;
  while (!a2)
  {
    v13 = 1;
    if (a3)
      goto LABEL_15;
LABEL_9:
    if (v13)
      goto LABEL_39;
LABEL_21:
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      size = v36.__r_.__value_.__l.__size_;
    else
      size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
    if (v35 == (std::string *)((char *)v10 + size))
    {
      std::string::resize(&v36, 2 * size, 0);
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v17 = 22;
      else
        v17 = (v36.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      std::string::resize(&v36, v17, 0);
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v10 = &v36;
      else
        v10 = (std::string *)v36.__r_.__value_.__r.__words[0];
      v35 = (std::string *)((char *)v10 + size);
    }
    v18 = (__int32 *)a2[3];
    if (v18 == (__int32 *)a2[4])
      v19 = (*(uint64_t (**)(_QWORD *))(*a2 + 72))(a2);
    else
      v19 = *v18;
    if (std::__num_get<wchar_t>::__stage2_float_loop(v19, &v32, &v31, (char *)v10, (char **)&v35, v39, v38, (uint64_t)&__grouping, (uint64_t)__g, &__g_end, &v33, v41))goto LABEL_39;
    v20 = a2[3];
    if (v20 == a2[4])
      (*(void (**)(_QWORD *))(*a2 + 80))(a2);
    else
      a2[3] = v20 + 4;
  }
  v11 = (int *)a2[3];
  if (v11 == (int *)a2[4])
    v12 = (*(uint64_t (**)(_QWORD *))(*a2 + 72))(a2);
  else
    v12 = *v11;
  v13 = v12 == -1;
  if (v12 == -1)
    a2 = 0;
  if (!a3)
    goto LABEL_9;
LABEL_15:
  v14 = (int *)a3[3];
  if (v14 == (int *)a3[4])
    v15 = (*(uint64_t (**)(_QWORD *))(*a3 + 72))(a3);
  else
    v15 = *v14;
  if (v15 == -1)
    a3 = 0;
  if (v13 != (v15 == -1))
    goto LABEL_21;
LABEL_39:
  v21 = HIBYTE(__grouping.__r_.__value_.__r.__words[2]);
  if ((__grouping.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v21 = __grouping.__r_.__value_.__l.__size_;
  if (v21)
    v22 = v32 == 0;
  else
    v22 = 1;
  if (!v22)
  {
    v23 = __g_end;
    if ((char *)__g_end - (char *)__g <= 159)
    {
      *__g_end = v33;
      __g_end = v23 + 1;
    }
  }
  *a6 = std::__num_get_float[abi:ne180100]<double>((const char *)v10, (char *)v35, v30);
  std::__check_grouping(&__grouping, __g, __g_end, v30);
  if (!a2)
  {
    v26 = 1;
    if (a3)
      goto LABEL_57;
LABEL_51:
    if (v26)
      goto LABEL_61;
    goto LABEL_62;
  }
  v24 = (int *)a2[3];
  if (v24 == (int *)a2[4])
    v25 = (*(uint64_t (**)(_QWORD *))(*a2 + 72))(a2);
  else
    v25 = *v24;
  v26 = v25 == -1;
  if (v25 == -1)
    a2 = 0;
  if (!a3)
    goto LABEL_51;
LABEL_57:
  v27 = (int *)a3[3];
  if (v27 == (int *)a3[4])
    v28 = (*(uint64_t (**)(_QWORD *))(*a3 + 72))(a3);
  else
    v28 = *v27;
  if (((v26 ^ (v28 == -1)) & 1) == 0)
LABEL_61:
    *v30 |= 2u;
LABEL_62:
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if (SHIBYTE(__grouping.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__grouping.__r_.__value_.__l.__data_);
  return a2;
}

void sub_191FE22B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

_QWORD *std::num_get<wchar_t,std::istreambuf_iterator<wchar_t>>::__do_get_floating_point<long double>(uint64_t a1, _QWORD *a2, _QWORD *a3, const std::ios_base *a4, std::ios_base::iostate *a5, double *a6)
{
  std::string *v10;
  int *v11;
  int v12;
  _BOOL4 v13;
  int *v14;
  int v15;
  std::string::size_type size;
  std::string::size_type v17;
  __int32 *v18;
  __int32 v19;
  uint64_t v20;
  std::string::size_type v21;
  BOOL v22;
  unsigned int *v23;
  int *v24;
  int v25;
  _BOOL4 v26;
  int *v27;
  int v28;
  std::ios_base::iostate *v30;
  char v31;
  char v32;
  unsigned int v33;
  unsigned int *__g_end;
  std::string *v35;
  std::string v36;
  std::string __grouping;
  int v38;
  int v39;
  unsigned int __g[40];
  __int32 v41[32];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  std::__num_get<wchar_t>::__stage2_float_prep(a4, (uint64_t)v41, &v39, &v38);
  v30 = a5;
  memset(&v36, 0, sizeof(v36));
  std::string::resize(&v36, 0x16uLL, 0);
  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = &v36;
  else
    v10 = (std::string *)v36.__r_.__value_.__r.__words[0];
  __g_end = __g;
  v35 = v10;
  v33 = 0;
  v32 = 1;
  v31 = 69;
  while (!a2)
  {
    v13 = 1;
    if (a3)
      goto LABEL_15;
LABEL_9:
    if (v13)
      goto LABEL_39;
LABEL_21:
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      size = v36.__r_.__value_.__l.__size_;
    else
      size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
    if (v35 == (std::string *)((char *)v10 + size))
    {
      std::string::resize(&v36, 2 * size, 0);
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v17 = 22;
      else
        v17 = (v36.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      std::string::resize(&v36, v17, 0);
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v10 = &v36;
      else
        v10 = (std::string *)v36.__r_.__value_.__r.__words[0];
      v35 = (std::string *)((char *)v10 + size);
    }
    v18 = (__int32 *)a2[3];
    if (v18 == (__int32 *)a2[4])
      v19 = (*(uint64_t (**)(_QWORD *))(*a2 + 72))(a2);
    else
      v19 = *v18;
    if (std::__num_get<wchar_t>::__stage2_float_loop(v19, &v32, &v31, (char *)v10, (char **)&v35, v39, v38, (uint64_t)&__grouping, (uint64_t)__g, &__g_end, &v33, v41))goto LABEL_39;
    v20 = a2[3];
    if (v20 == a2[4])
      (*(void (**)(_QWORD *))(*a2 + 80))(a2);
    else
      a2[3] = v20 + 4;
  }
  v11 = (int *)a2[3];
  if (v11 == (int *)a2[4])
    v12 = (*(uint64_t (**)(_QWORD *))(*a2 + 72))(a2);
  else
    v12 = *v11;
  v13 = v12 == -1;
  if (v12 == -1)
    a2 = 0;
  if (!a3)
    goto LABEL_9;
LABEL_15:
  v14 = (int *)a3[3];
  if (v14 == (int *)a3[4])
    v15 = (*(uint64_t (**)(_QWORD *))(*a3 + 72))(a3);
  else
    v15 = *v14;
  if (v15 == -1)
    a3 = 0;
  if (v13 != (v15 == -1))
    goto LABEL_21;
LABEL_39:
  v21 = HIBYTE(__grouping.__r_.__value_.__r.__words[2]);
  if ((__grouping.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v21 = __grouping.__r_.__value_.__l.__size_;
  if (v21)
    v22 = v32 == 0;
  else
    v22 = 1;
  if (!v22)
  {
    v23 = __g_end;
    if ((char *)__g_end - (char *)__g <= 159)
    {
      *__g_end = v33;
      __g_end = v23 + 1;
    }
  }
  *a6 = std::__num_get_float[abi:ne180100]<long double>((const char *)v10, (char *)v35, v30);
  std::__check_grouping(&__grouping, __g, __g_end, v30);
  if (!a2)
  {
    v26 = 1;
    if (a3)
      goto LABEL_57;
LABEL_51:
    if (v26)
      goto LABEL_61;
    goto LABEL_62;
  }
  v24 = (int *)a2[3];
  if (v24 == (int *)a2[4])
    v25 = (*(uint64_t (**)(_QWORD *))(*a2 + 72))(a2);
  else
    v25 = *v24;
  v26 = v25 == -1;
  if (v25 == -1)
    a2 = 0;
  if (!a3)
    goto LABEL_51;
LABEL_57:
  v27 = (int *)a3[3];
  if (v27 == (int *)a3[4])
    v28 = (*(uint64_t (**)(_QWORD *))(*a3 + 72))(a3);
  else
    v28 = *v27;
  if (((v26 ^ (v28 == -1)) & 1) == 0)
LABEL_61:
    *v30 |= 2u;
LABEL_62:
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if (SHIBYTE(__grouping.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__grouping.__r_.__value_.__l.__data_);
  return a2;
}

void sub_191FE2674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

_QWORD *std::num_get<wchar_t,std::istreambuf_iterator<wchar_t>>::do_get(int a1, _QWORD *a2, _QWORD *a3, std::ios_base *this, _DWORD *a5, uint64_t a6)
{
  const std::locale::facet *v10;
  std::locale::__imp *locale;
  unint64_t *v12;
  unint64_t v13;
  std::string *v14;
  int *v15;
  int v16;
  _BOOL4 v17;
  char *v18;
  int *v19;
  int v20;
  std::string::size_type size;
  std::string::size_type v22;
  _DWORD *v23;
  __int32 v24;
  uint64_t v25;
  std::string *v26;
  int *v27;
  int v28;
  _BOOL4 v29;
  int *v30;
  int v31;
  int v33;
  std::locale *v34;
  std::string *v35;
  std::string v36;
  void *__p[2];
  uint64_t v38;
  std::locale v39;
  __int32 v40[26];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  __p[0] = 0;
  __p[1] = 0;
  v38 = 0;
  std::ios_base::getloc(this);
  v10 = std::locale::use_facet(&v39, &std::ctype<wchar_t>::id);
  ((void (*)(const std::locale::facet *, const char *, char *, __int32 *))v10->__vftable[4].~facet)(v10, "0123456789abcdefABCDEFxX+-pPiInN", "pPiInN", v40);
  locale = v39.__locale_;
  if (v39.__locale_ != (std::locale::__imp *)&std::locale::__imp::classic_locale_imp_)
  {
    v12 = (unint64_t *)((char *)v39.__locale_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
      (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 16))(locale);
  }
  memset(&v36, 0, sizeof(v36));
  std::string::resize(&v36, 0x16uLL, 0);
  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = &v36;
  else
    v14 = (std::string *)v36.__r_.__value_.__r.__words[0];
  v34 = &v39;
  v35 = v14;
  v33 = 0;
  while (1)
  {
    if (a2)
    {
      v15 = (int *)a2[3];
      if (v15 == (int *)a2[4])
        v16 = (*(uint64_t (**)(_QWORD *))(*a2 + 72))(a2);
      else
        v16 = *v15;
      v17 = v16 == -1;
      if (v16 == -1)
        a2 = 0;
      if (!a3)
      {
LABEL_14:
        v18 = (char *)v35;
        if (v17)
          goto LABEL_45;
        goto LABEL_26;
      }
    }
    else
    {
      v17 = 1;
      if (!a3)
        goto LABEL_14;
    }
    v19 = (int *)a3[3];
    if (v19 == (int *)a3[4])
      v20 = (*(uint64_t (**)(_QWORD *))(*a3 + 72))(a3);
    else
      v20 = *v19;
    if (v20 == -1)
      a3 = 0;
    v18 = (char *)v35;
    if (v17 == (v20 == -1))
      goto LABEL_45;
LABEL_26:
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      size = v36.__r_.__value_.__l.__size_;
    else
      size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
    if (v18 == (char *)v14 + size)
    {
      std::string::resize(&v36, 2 * size, 0);
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = 22;
      else
        v22 = (v36.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      std::string::resize(&v36, v22, 0);
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v14 = &v36;
      else
        v14 = (std::string *)v36.__r_.__value_.__r.__words[0];
      v35 = (std::string *)((char *)v14 + size);
    }
    v23 = (_DWORD *)a2[3];
    v24 = v23 == (_DWORD *)a2[4] ? (*(uint64_t (**)(_QWORD *))(*a2 + 72))(a2) : *v23;
    if (std::__num_get<wchar_t>::__stage2_int_loop(v24, 0x10u, (char *)v14, (char **)&v35, &v33, 0, (uint64_t)__p, (uint64_t)&v39, (_DWORD **)&v34, v40))break;
    v25 = a2[3];
    if (v25 == a2[4])
      (*(void (**)(_QWORD *))(*a2 + 80))(a2);
    else
      a2[3] = v25 + 4;
  }
  v18 = (char *)v35;
LABEL_45:
  std::string::resize(&v36, v18 - (char *)v14, 0);
  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v26 = &v36;
  else
    v26 = (std::string *)v36.__r_.__value_.__r.__words[0];
  if (sscanf_l((const char *)v26, 0, "%p", a6) != 1)
    *a5 = 4;
  if (!a2)
  {
    v29 = 1;
    if (a3)
      goto LABEL_60;
LABEL_54:
    if (v29)
      goto LABEL_64;
    goto LABEL_65;
  }
  v27 = (int *)a2[3];
  if (v27 == (int *)a2[4])
    v28 = (*(uint64_t (**)(_QWORD *))(*a2 + 72))(a2);
  else
    v28 = *v27;
  v29 = v28 == -1;
  if (v28 == -1)
    a2 = 0;
  if (!a3)
    goto LABEL_54;
LABEL_60:
  v30 = (int *)a3[3];
  if (v30 == (int *)a3[4])
    v31 = (*(uint64_t (**)(_QWORD *))(*a3 + 72))(a3);
  else
    v31 = *v30;
  if (((v29 ^ (v31 == -1)) & 1) == 0)
LABEL_64:
    *a5 |= 2u;
LABEL_65:
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if (SHIBYTE(v38) < 0)
    operator delete(__p[0]);
  return a2;
}

void sub_191FE2A50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26)
{
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

uint64_t std::__num_get<wchar_t>::__stage2_int_loop(__int32 __c, unsigned int a2, char *a3, char **a4, _DWORD *a5, int a6, uint64_t a7, uint64_t a8, _DWORD **a9, __int32 *__s)
{
  uint64_t v14;
  _DWORD *v15;
  uint64_t result;
  char v17;
  __int32 *v18;
  __int32 *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char *v23;
  char *v24;
  char v25;

  if (*a4 == a3)
  {
    if (__s[24] == __c)
    {
      v17 = 43;
    }
    else
    {
      if (__s[25] != __c)
        goto LABEL_2;
      v17 = 45;
    }
    result = 0;
    *a4 = a3 + 1;
    *a3 = v17;
    goto LABEL_18;
  }
LABEL_2:
  v14 = *(unsigned __int8 *)(a7 + 23);
  if ((v14 & 0x80u) != 0)
    v14 = *(_QWORD *)(a7 + 8);
  if (__c != a6 || !v14)
  {
    v18 = wmemchr(__s, __c, 0x1AuLL);
    if (v18)
      v19 = v18;
    else
      v19 = __s + 26;
    v20 = (char *)v19 - (char *)__s;
    if ((char *)v19 - (char *)__s > 92)
      return 0xFFFFFFFFLL;
    v21 = v20 >> 2;
    if (a2 != 8)
    {
      if (a2 == 16)
      {
        if (v20 >= 88)
        {
          v24 = *a4;
          result = 0xFFFFFFFFLL;
          if (*a4 != a3 && *a4 - a3 <= 2 && *(v24 - 1) == 48)
          {
            result = 0;
            *a5 = 0;
            v25 = std::__num_get_base::__src[v21];
            *a4 = v24 + 1;
            *v24 = v25;
          }
          return result;
        }
        goto LABEL_26;
      }
      if (a2 != 10)
        goto LABEL_26;
    }
    if (v21 >= a2)
      return 0xFFFFFFFFLL;
LABEL_26:
    result = 0;
    v22 = std::__num_get_base::__src[v21];
    v23 = (*a4)++;
    *v23 = v22;
    ++*a5;
    return result;
  }
  v15 = *a9;
  if ((uint64_t)*a9 - a8 <= 159)
  {
    result = 0;
    *v15 = *a5;
    *a9 = v15 + 1;
LABEL_18:
    *a5 = 0;
    return result;
  }
  return 0;
}

std::locale::__imp *std::__num_get<char>::__stage2_float_prep(const std::ios_base *a1, uint64_t a2, _BYTE *a3, _BYTE *a4)
{
  const std::locale::facet *v7;
  const std::locale::facet *v8;
  std::locale::__imp *result;
  unint64_t *v10;
  unint64_t v11;
  std::locale v12;

  std::ios_base::getloc(a1);
  v7 = std::locale::use_facet(&v12, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, const char *, char *, uint64_t))v7->__vftable[2].__on_zero_shared)(v7, "0123456789abcdefABCDEFxX+-pPiInN", "", a2);
  v8 = std::locale::use_facet(&v12, &std::numpunct<char>::id);
  *a3 = ((uint64_t (*)(const std::locale::facet *))v8->__vftable[1].~facet)(v8);
  *a4 = ((uint64_t (*)(const std::locale::facet *))v8->__vftable[1].~facet_0)(v8);
  ((void (*)(const std::locale::facet *))v8->__vftable[1].__on_zero_shared)(v8);
  result = v12.__locale_;
  if (v12.__locale_ != (std::locale::__imp *)&std::locale::__imp::classic_locale_imp_)
  {
    v10 = (unint64_t *)((char *)v12.__locale_ + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
      return (std::locale::__imp *)(*(uint64_t (**)(std::locale::__imp *))(*(_QWORD *)result + 16))(result);
  }
  return result;
}

void sub_191FE2D68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unint64_t *a10)
{
  unint64_t *v11;
  unint64_t v12;

  if (a10 != (unint64_t *)&std::locale::__imp::classic_locale_imp_)
  {
    v11 = a10 + 1;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
      (*(void (**)(unint64_t *))(*a10 + 16))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__num_get<char>::__stage2_float_loop(int __c, _BYTE *a2, _BYTE *a3, char *a4, char **a5, int a6, int a7, uint64_t a8, uint64_t a9, _DWORD **a10, _DWORD *a11, char *__s)
{
  char *v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t result;
  uint64_t v21;
  _DWORD *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char v26;
  __darwin_ct_rune_t v27;
  char *v28;
  __darwin_ct_rune_t v29;
  uint64_t v30;
  _DWORD *v31;
  char *v32;

  if (__c == a6)
  {
    if (*a2)
    {
      *a2 = 0;
      v15 = (*a5)++;
      *v15 = 46;
      v16 = *(unsigned __int8 *)(a8 + 23);
      if ((v16 & 0x80u) != 0)
        v16 = *(_QWORD *)(a8 + 8);
      if (v16)
      {
        v17 = *a10;
        if ((uint64_t)*a10 - a9 <= 159)
        {
          result = 0;
          *v17 = *a11;
          *a10 = v17 + 1;
          return result;
        }
      }
      return 0;
    }
    return 0xFFFFFFFFLL;
  }
  if (__c == a7)
  {
    v21 = *(unsigned __int8 *)(a8 + 23);
    if ((v21 & 0x80u) != 0)
      v21 = *(_QWORD *)(a8 + 8);
    if (v21)
    {
      if (*a2)
      {
        v22 = *a10;
        if ((uint64_t)*a10 - a9 <= 159)
        {
          result = 0;
          *v22 = *a11;
          *a10 = v22 + 1;
          *a11 = 0;
          return result;
        }
        return 0;
      }
      return 0xFFFFFFFFLL;
    }
  }
  v23 = (char *)memchr(__s, __c, 0x20uLL);
  if (v23)
    v24 = v23;
  else
    v24 = __s + 32;
  v25 = v24 - __s;
  if (v24 - __s > 31)
    return 0xFFFFFFFFLL;
  v26 = std::__num_get_base::__src[v25];
  if ((v25 & 0xFFFFFFFFFFFFFFFELL) == 0x16)
  {
    result = 0;
    *a3 = 80;
    v28 = (*a5)++;
    *v28 = v26;
    return result;
  }
  if ((v25 & 0xFFFFFFFFFFFFFFFELL) == 0x18)
  {
    if (*a5 != a4)
    {
      v27 = __toupper(*(*a5 - 1));
      if (v27 != __toupper((char)*a3))
        return 0xFFFFFFFFLL;
      a4 = *a5;
    }
    result = 0;
    *a5 = a4 + 1;
    *a4 = v26;
    return result;
  }
  v29 = __toupper(std::__num_get_base::__src[v25]);
  if (v29 == (char)*a3)
  {
    *a3 = __tolower(v29);
    if (*a2)
    {
      *a2 = 0;
      v30 = *(unsigned __int8 *)(a8 + 23);
      if ((v30 & 0x80u) != 0)
        v30 = *(_QWORD *)(a8 + 8);
      if (v30)
      {
        v31 = *a10;
        if ((uint64_t)*a10 - a9 <= 159)
        {
          *v31 = *a11;
          *a10 = v31 + 1;
        }
      }
    }
  }
  v32 = (*a5)++;
  *v32 = v26;
  if (v25 > 21)
    return 0;
  result = 0;
  ++*a11;
  return result;
}

std::locale::__imp *std::__num_get<char>::__stage2_int_prep(const std::ios_base *a1, uint64_t a2, _BYTE *a3)
{
  const std::locale::facet *v5;
  const std::locale::facet *v6;
  std::locale::__imp *result;
  unint64_t *v8;
  unint64_t v9;
  std::locale v10;

  std::ios_base::getloc(a1);
  v5 = std::locale::use_facet(&v10, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, const char *, char *, uint64_t))v5->__vftable[2].__on_zero_shared)(v5, "0123456789abcdefABCDEFxX+-pPiInN", "pPiInN", a2);
  v6 = std::locale::use_facet(&v10, &std::numpunct<char>::id);
  *a3 = ((uint64_t (*)(const std::locale::facet *))v6->__vftable[1].~facet_0)(v6);
  ((void (*)(const std::locale::facet *))v6->__vftable[1].__on_zero_shared)(v6);
  result = v10.__locale_;
  if (v10.__locale_ != (std::locale::__imp *)&std::locale::__imp::classic_locale_imp_)
  {
    v8 = (unint64_t *)((char *)v10.__locale_ + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
      return (std::locale::__imp *)(*(uint64_t (**)(std::locale::__imp *))(*(_QWORD *)result + 16))(result);
  }
  return result;
}

void sub_191FE30D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unint64_t *a10)
{
  unint64_t *v11;
  unint64_t v12;

  if (a10 != (unint64_t *)&std::locale::__imp::classic_locale_imp_)
  {
    v11 = a10 + 1;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
      (*(void (**)(unint64_t *))(*a10 + 16))(a10);
  }
  _Unwind_Resume(exception_object);
}

std::locale::__imp *std::__num_get<wchar_t>::__stage2_float_prep(const std::ios_base *a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  const std::locale::facet *v7;
  const std::locale::facet *v8;
  std::locale::__imp *result;
  unint64_t *v10;
  unint64_t v11;
  std::locale v12;

  std::ios_base::getloc(a1);
  v7 = std::locale::use_facet(&v12, &std::ctype<wchar_t>::id);
  ((void (*)(const std::locale::facet *, const char *, char *, uint64_t))v7->__vftable[4].~facet)(v7, "0123456789abcdefABCDEFxX+-pPiInN", "", a2);
  v8 = std::locale::use_facet(&v12, &std::numpunct<wchar_t>::id);
  *a3 = ((uint64_t (*)(const std::locale::facet *))v8->__vftable[1].~facet)(v8);
  *a4 = ((uint64_t (*)(const std::locale::facet *))v8->__vftable[1].~facet_0)(v8);
  ((void (*)(const std::locale::facet *))v8->__vftable[1].__on_zero_shared)(v8);
  result = v12.__locale_;
  if (v12.__locale_ != (std::locale::__imp *)&std::locale::__imp::classic_locale_imp_)
  {
    v10 = (unint64_t *)((char *)v12.__locale_ + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
      return (std::locale::__imp *)(*(uint64_t (**)(std::locale::__imp *))(*(_QWORD *)result + 16))(result);
  }
  return result;
}

void sub_191FE3208(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unint64_t *a10)
{
  unint64_t *v11;
  unint64_t v12;

  if (a10 != (unint64_t *)&std::locale::__imp::classic_locale_imp_)
  {
    v11 = a10 + 1;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
      (*(void (**)(unint64_t *))(*a10 + 16))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__num_get<wchar_t>::__stage2_float_loop(__int32 __c, _BYTE *a2, _BYTE *a3, char *a4, char **a5, int a6, int a7, uint64_t a8, uint64_t a9, _DWORD **a10, _DWORD *a11, __int32 *__s)
{
  char *v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t result;
  uint64_t v21;
  _DWORD *v22;
  __int32 *v23;
  __int32 *v24;
  uint64_t v25;
  char v26;
  __darwin_ct_rune_t v27;
  char *v28;
  __darwin_ct_rune_t v29;
  uint64_t v30;
  _DWORD *v31;
  char *v32;

  if (__c == a6)
  {
    if (*a2)
    {
      *a2 = 0;
      v15 = (*a5)++;
      *v15 = 46;
      v16 = *(unsigned __int8 *)(a8 + 23);
      if ((v16 & 0x80u) != 0)
        v16 = *(_QWORD *)(a8 + 8);
      if (v16)
      {
        v17 = *a10;
        if ((uint64_t)*a10 - a9 <= 159)
        {
          result = 0;
          *v17 = *a11;
          *a10 = v17 + 1;
          return result;
        }
      }
      return 0;
    }
    return 0xFFFFFFFFLL;
  }
  if (__c == a7)
  {
    v21 = *(unsigned __int8 *)(a8 + 23);
    if ((v21 & 0x80u) != 0)
      v21 = *(_QWORD *)(a8 + 8);
    if (v21)
    {
      if (*a2)
      {
        v22 = *a10;
        if ((uint64_t)*a10 - a9 <= 159)
        {
          result = 0;
          *v22 = *a11;
          *a10 = v22 + 1;
          *a11 = 0;
          return result;
        }
        return 0;
      }
      return 0xFFFFFFFFLL;
    }
  }
  v23 = wmemchr(__s, __c, 0x20uLL);
  if (v23)
    v24 = v23;
  else
    v24 = __s + 32;
  v25 = (char *)v24 - (char *)__s;
  if ((char *)v24 - (char *)__s > 124)
    return 0xFFFFFFFFLL;
  v26 = std::__num_get_base::__src[v25 >> 2];
  if ((v25 & 0xFFFFFFFFFFFFFFFBLL) == 0x58)
  {
    result = 0;
    *a3 = 80;
    v28 = (*a5)++;
    *v28 = v26;
    return result;
  }
  if ((v25 & 0xFFFFFFFFFFFFFFFBLL) == 0x60)
  {
    if (*a5 != a4)
    {
      v27 = __toupper(*(*a5 - 1));
      if (v27 != __toupper((char)*a3))
        return 0xFFFFFFFFLL;
      a4 = *a5;
    }
    result = 0;
    *a5 = a4 + 1;
    *a4 = v26;
    return result;
  }
  v29 = __toupper(std::__num_get_base::__src[v25 >> 2]);
  if (v29 == (char)*a3)
  {
    *a3 = __tolower(v29);
    if (*a2)
    {
      *a2 = 0;
      v30 = *(unsigned __int8 *)(a8 + 23);
      if ((v30 & 0x80u) != 0)
        v30 = *(_QWORD *)(a8 + 8);
      if (v30)
      {
        v31 = *a10;
        if ((uint64_t)*a10 - a9 <= 159)
        {
          *v31 = *a11;
          *a10 = v31 + 1;
        }
      }
    }
  }
  v32 = (*a5)++;
  *v32 = v26;
  if (v25 > 84)
    return 0;
  result = 0;
  ++*a11;
  return result;
}

std::locale::__imp *std::__num_get<wchar_t>::__stage2_int_prep(const std::ios_base *a1, uint64_t a2, _DWORD *a3)
{
  const std::locale::facet *v5;
  const std::locale::facet *v6;
  std::locale::__imp *result;
  unint64_t *v8;
  unint64_t v9;
  std::locale v10;

  std::ios_base::getloc(a1);
  v5 = std::locale::use_facet(&v10, &std::ctype<wchar_t>::id);
  ((void (*)(const std::locale::facet *, const char *, char *, uint64_t))v5->__vftable[4].~facet)(v5, "0123456789abcdefABCDEFxX+-pPiInN", "pPiInN", a2);
  v6 = std::locale::use_facet(&v10, &std::numpunct<wchar_t>::id);
  *a3 = ((uint64_t (*)(const std::locale::facet *))v6->__vftable[1].~facet_0)(v6);
  ((void (*)(const std::locale::facet *))v6->__vftable[1].__on_zero_shared)(v6);
  result = v10.__locale_;
  if (v10.__locale_ != (std::locale::__imp *)&std::locale::__imp::classic_locale_imp_)
  {
    v8 = (unint64_t *)((char *)v10.__locale_ + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
      return (std::locale::__imp *)(*(uint64_t (**)(std::locale::__imp *))(*(_QWORD *)result + 16))(result);
  }
  return result;
}

void sub_191FE3574(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unint64_t *a10)
{
  unint64_t *v11;
  unint64_t v12;

  if (a10 != (unint64_t *)&std::locale::__imp::classic_locale_imp_)
  {
    v11 = a10 + 1;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
      (*(void (**)(unint64_t *))(*a10 + 16))(a10);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::num_put<char,std::ostreambuf_iterator<char>>::do_put(uint64_t a1, _QWORD *a2, std::ios_base *this, uint64_t a4, int a5)
{
  _QWORD *v6;
  const std::locale::facet *v8;
  std::locale::__imp *locale;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::locale::__imp *v14;
  uint64_t v15;
  _BYTE *v16;
  std::locale v17;
  uint64_t v18;
  unsigned __int8 v19;

  v6 = a2;
  if ((this->__fmtflags_ & 1) == 0)
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 48))(a1, a2);
  std::ios_base::getloc(this);
  v8 = std::locale::use_facet(&v17, &std::numpunct<char>::id);
  locale = v17.__locale_;
  if (v17.__locale_ != (std::locale::__imp *)&std::locale::__imp::classic_locale_imp_)
  {
    v10 = (unint64_t *)((char *)v17.__locale_ + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
      (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 16))(locale);
  }
  v12 = 56;
  if (a5)
    v12 = 48;
  (*(void (**)(std::locale *__return_ptr, const std::locale::facet *))((char *)&v8->~facet + v12))(&v17, v8);
  v13 = v19;
  if ((v19 & 0x80u) == 0)
    v14 = (std::locale::__imp *)&v17;
  else
    v14 = v17.__locale_;
  if ((v19 & 0x80) != 0)
    goto LABEL_16;
  while (v14 != (std::locale::__imp *)((char *)&v17 + v13))
  {
    while (1)
    {
      if (v6)
      {
        v15 = *(unsigned __int8 *)v14;
        v16 = (_BYTE *)v6[6];
        if (v16 == (_BYTE *)v6[7])
        {
          if ((*(unsigned int (**)(_QWORD *, uint64_t))(*v6 + 104))(v6, v15) == -1)
            v6 = 0;
        }
        else
        {
          v6[6] = v16 + 1;
          *v16 = v15;
        }
      }
      v14 = (std::locale::__imp *)((char *)v14 + 1);
      v13 = v19;
      if ((v19 & 0x80) == 0)
        break;
LABEL_16:
      if (v14 == (std::locale::__imp *)((char *)v17.__locale_ + v18))
      {
        operator delete(v17.__locale_);
        return v6;
      }
    }
  }
  return v6;
}

void sub_191FE3724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (__p != &std::locale::__imp::classic_locale_imp_)
    std::num_put<char,std::ostreambuf_iterator<char>>::do_put((uint64_t)__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::num_put<char,std::ostreambuf_iterator<char>>::do_put(int a1, uint64_t a2, const std::ios_base *a3, int a4, uint64_t a5)
{
  return std::num_put<char,std::ostreambuf_iterator<char>>::__do_put_integral[abi:ne180100]<long>(a1, a2, a3, a4, a5, "l");
}

{
  return std::num_put<char,std::ostreambuf_iterator<char>>::__do_put_integral[abi:ne180100]<long long>(a1, a2, a3, a4, a5, "ll");
}

{
  return std::num_put<char,std::ostreambuf_iterator<char>>::__do_put_integral[abi:ne180100]<unsigned long>(a1, a2, a3, a4, a5, "l");
}

{
  return std::num_put<char,std::ostreambuf_iterator<char>>::__do_put_integral[abi:ne180100]<unsigned long long>(a1, a2, a3, a4, a5, "ll");
}

uint64_t std::num_put<char,std::ostreambuf_iterator<char>>::__do_put_integral[abi:ne180100]<long>(int a1, uint64_t a2, const std::ios_base *a3, int a4, uint64_t a5, char *__len)
{
  char *v10;
  char *v11;
  std::locale::__imp *locale;
  unint64_t *v13;
  unint64_t v14;
  std::locale v16;
  uint64_t v17;
  uint64_t v18;
  char v19[45];
  char __nb[24];
  char v21[8];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)v21 = 37;
  std::__num_put_base::__format_int(&v21[1], __len, 1, a3->__fmtflags_);
  v10 = &__nb[snprintf_l(__nb, 0x18uLL, 0, v21, a5)];
  v11 = std::__num_put_base::__identify_padding(__nb, v10, a3);
  std::ios_base::getloc(a3);
  std::__num_put<char>::__widen_and_group_int((unsigned __int8 *)__nb, v11, v10, (uint64_t)v19, &v18, &v17, &v16);
  locale = v16.__locale_;
  if (v16.__locale_ != (std::locale::__imp *)&std::locale::__imp::classic_locale_imp_)
  {
    v13 = (unint64_t *)((char *)v16.__locale_ + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
      (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 16))(locale);
  }
  return std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v19, v18, v17, (uint64_t)a3, a4);
}

void sub_191FE38A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
  if (a11 != &std::locale::__imp::classic_locale_imp_)
    std::num_put<char,std::ostreambuf_iterator<char>>::__do_put_integral[abi:ne180100]<long>((uint64_t)a11);
  _Unwind_Resume(exception_object);
}

uint64_t std::num_put<char,std::ostreambuf_iterator<char>>::__do_put_integral[abi:ne180100]<long long>(int a1, uint64_t a2, const std::ios_base *a3, int a4, uint64_t a5, char *__len)
{
  char *v10;
  char *v11;
  std::locale::__imp *locale;
  unint64_t *v13;
  unint64_t v14;
  std::locale v16;
  uint64_t v17;
  uint64_t v18;
  char v19[45];
  char __nb[24];
  char v21[8];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)v21 = 37;
  std::__num_put_base::__format_int(&v21[1], __len, 1, a3->__fmtflags_);
  v10 = &__nb[snprintf_l(__nb, 0x18uLL, 0, v21, a5)];
  v11 = std::__num_put_base::__identify_padding(__nb, v10, a3);
  std::ios_base::getloc(a3);
  std::__num_put<char>::__widen_and_group_int((unsigned __int8 *)__nb, v11, v10, (uint64_t)v19, &v18, &v17, &v16);
  locale = v16.__locale_;
  if (v16.__locale_ != (std::locale::__imp *)&std::locale::__imp::classic_locale_imp_)
  {
    v13 = (unint64_t *)((char *)v16.__locale_ + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
      (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 16))(locale);
  }
  return std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v19, v18, v17, (uint64_t)a3, a4);
}

void sub_191FE3A1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
  if (a11 != &std::locale::__imp::classic_locale_imp_)
    std::num_put<char,std::ostreambuf_iterator<char>>::__do_put_integral[abi:ne180100]<long long>((uint64_t)a11);
  _Unwind_Resume(exception_object);
}

uint64_t std::num_put<char,std::ostreambuf_iterator<char>>::__do_put_integral[abi:ne180100]<unsigned long>(int a1, uint64_t a2, const std::ios_base *a3, int a4, uint64_t a5, char *__len)
{
  char *v10;
  char *v11;
  std::locale::__imp *locale;
  unint64_t *v13;
  unint64_t v14;
  std::locale v16;
  uint64_t v17;
  uint64_t v18;
  char v19[45];
  char __nb[24];
  char v21[8];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)v21 = 37;
  std::__num_put_base::__format_int(&v21[1], __len, 0, a3->__fmtflags_);
  v10 = &__nb[snprintf_l(__nb, 0x18uLL, 0, v21, a5)];
  v11 = std::__num_put_base::__identify_padding(__nb, v10, a3);
  std::ios_base::getloc(a3);
  std::__num_put<char>::__widen_and_group_int((unsigned __int8 *)__nb, v11, v10, (uint64_t)v19, &v18, &v17, &v16);
  locale = v16.__locale_;
  if (v16.__locale_ != (std::locale::__imp *)&std::locale::__imp::classic_locale_imp_)
  {
    v13 = (unint64_t *)((char *)v16.__locale_ + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
      (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 16))(locale);
  }
  return std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v19, v18, v17, (uint64_t)a3, a4);
}

void sub_191FE3B90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
  if (a11 != &std::locale::__imp::classic_locale_imp_)
    std::num_put<char,std::ostreambuf_iterator<char>>::__do_put_integral[abi:ne180100]<unsigned long>((uint64_t)a11);
  _Unwind_Resume(exception_object);
}

uint64_t std::num_put<char,std::ostreambuf_iterator<char>>::__do_put_integral[abi:ne180100]<unsigned long long>(int a1, uint64_t a2, const std::ios_base *a3, int a4, uint64_t a5, char *__len)
{
  char *v10;
  char *v11;
  std::locale::__imp *locale;
  unint64_t *v13;
  unint64_t v14;
  std::locale v16;
  uint64_t v17;
  uint64_t v18;
  char v19[45];
  char __nb[24];
  char v21[8];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)v21 = 37;
  std::__num_put_base::__format_int(&v21[1], __len, 0, a3->__fmtflags_);
  v10 = &__nb[snprintf_l(__nb, 0x18uLL, 0, v21, a5)];
  v11 = std::__num_put_base::__identify_padding(__nb, v10, a3);
  std::ios_base::getloc(a3);
  std::__num_put<char>::__widen_and_group_int((unsigned __int8 *)__nb, v11, v10, (uint64_t)v19, &v18, &v17, &v16);
  locale = v16.__locale_;
  if (v16.__locale_ != (std::locale::__imp *)&std::locale::__imp::classic_locale_imp_)
  {
    v13 = (unint64_t *)((char *)v16.__locale_ + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
      (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 16))(locale);
  }
  return std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v19, v18, v17, (uint64_t)a3, a4);
}

void sub_191FE3D04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
  if (a11 != &std::locale::__imp::classic_locale_imp_)
    std::num_put<char,std::ostreambuf_iterator<char>>::__do_put_integral[abi:ne180100]<unsigned long long>((uint64_t)a11);
  _Unwind_Resume(exception_object);
}

uint64_t std::num_put<char,std::ostreambuf_iterator<char>>::do_put(int a1, uint64_t a2, const std::ios_base *a3, int a4, double a5)
{
  return std::num_put<char,std::ostreambuf_iterator<char>>::__do_put_floating_point[abi:ne180100]<double>(a1, a2, a3, a4, "", a5);
}

{
  return std::num_put<char,std::ostreambuf_iterator<char>>::__do_put_floating_point[abi:ne180100]<long double>(a1, a2, a3, a4, "L", a5);
}

uint64_t std::num_put<char,std::ostreambuf_iterator<char>>::__do_put_floating_point[abi:ne180100]<double>(int a1, uint64_t a2, const std::ios_base *a3, int a4, char *__len, double a6)
{
  _BOOL4 v10;
  int v11;
  int v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  void *v18;
  void *v19;
  char *v20;
  std::locale::__imp *locale;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  std::locale v26;
  uint64_t v27;
  uint64_t v28;
  char *__nb;
  char v30;
  char v31[30];
  char v32[8];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)v32 = 37;
  v10 = std::__num_put_base::__format_float(&v32[1], __len, a3->__fmtflags_);
  __nb = v31;
  if (!v10)
  {
    v11 = snprintf_l(v31, 0x1EuLL, 0, v32, *(_QWORD *)&a6);
    if (v11 > 29)
    {
      v12 = asprintf_l(&__nb, 0, v32, *(_QWORD *)&a6);
      goto LABEL_6;
    }
LABEL_8:
    v13 = 0;
    goto LABEL_9;
  }
  v11 = snprintf_l(v31, 0x1EuLL, 0, v32, a3->__precision_, *(_QWORD *)&a6);
  if (v11 <= 29)
    goto LABEL_8;
  v12 = asprintf_l(&__nb, 0, v32, a3->__precision_, *(_QWORD *)&a6);
LABEL_6:
  v11 = v12;
  if (v12 == -1)
    std::__throw_bad_alloc();
  v13 = __nb;
LABEL_9:
  v14 = __nb;
  v15 = &__nb[v11];
  v16 = std::__num_put_base::__identify_padding(__nb, v15, a3);
  v17 = v31;
  if (v14 == v31)
  {
    v19 = 0;
    v20 = &v30;
  }
  else
  {
    v18 = malloc_type_malloc(2 * v11, 0x100004077774924uLL);
    v19 = v18;
    if (!v18)
      std::__throw_bad_alloc();
    v17 = __nb;
    v20 = (char *)v18;
  }
  std::ios_base::getloc(a3);
  std::__num_put<char>::__widen_and_group_float(v17, (uint64_t)v16, (unint64_t)v15, (unint64_t)v20, (unint64_t *)&v28, (unint64_t *)&v27, &v26);
  locale = v26.__locale_;
  if (v26.__locale_ != (std::locale::__imp *)&std::locale::__imp::classic_locale_imp_)
  {
    v22 = (unint64_t *)((char *)v26.__locale_ + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
      (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 16))(locale);
  }
  v24 = std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v20, v28, v27, (uint64_t)a3, a4);
  if (v19)
    free(v19);
  if (v13)
    free(v13);
  return v24;
}

void sub_191FE3F90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;
  void *v13;

  if (v13)
    free(v13);
  if (v12)
    free(v12);
  _Unwind_Resume(exception_object);
}

uint64_t std::num_put<char,std::ostreambuf_iterator<char>>::__do_put_floating_point[abi:ne180100]<long double>(int a1, uint64_t a2, const std::ios_base *a3, int a4, char *__len, double a6)
{
  _BOOL4 v10;
  int v11;
  int v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  void *v18;
  void *v19;
  char *v20;
  std::locale::__imp *locale;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  std::locale v26;
  uint64_t v27;
  uint64_t v28;
  char *__nb;
  char v30;
  char v31[30];
  char v32[8];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)v32 = 37;
  v10 = std::__num_put_base::__format_float(&v32[1], __len, a3->__fmtflags_);
  __nb = v31;
  if (!v10)
  {
    v11 = snprintf_l(v31, 0x1EuLL, 0, v32, *(_QWORD *)&a6);
    if (v11 > 29)
    {
      v12 = asprintf_l(&__nb, 0, v32, *(_QWORD *)&a6);
      goto LABEL_6;
    }
LABEL_8:
    v13 = 0;
    goto LABEL_9;
  }
  v11 = snprintf_l(v31, 0x1EuLL, 0, v32, a3->__precision_, *(_QWORD *)&a6);
  if (v11 <= 29)
    goto LABEL_8;
  v12 = asprintf_l(&__nb, 0, v32, a3->__precision_, *(_QWORD *)&a6);
LABEL_6:
  v11 = v12;
  if (v12 == -1)
    std::__throw_bad_alloc();
  v13 = __nb;
LABEL_9:
  v14 = __nb;
  v15 = &__nb[v11];
  v16 = std::__num_put_base::__identify_padding(__nb, v15, a3);
  v17 = v31;
  if (v14 == v31)
  {
    v19 = 0;
    v20 = &v30;
  }
  else
  {
    v18 = malloc_type_malloc(2 * v11, 0x100004077774924uLL);
    v19 = v18;
    if (!v18)
      std::__throw_bad_alloc();
    v17 = __nb;
    v20 = (char *)v18;
  }
  std::ios_base::getloc(a3);
  std::__num_put<char>::__widen_and_group_float(v17, (uint64_t)v16, (unint64_t)v15, (unint64_t)v20, (unint64_t *)&v28, (unint64_t *)&v27, &v26);
  locale = v26.__locale_;
  if (v26.__locale_ != (std::locale::__imp *)&std::locale::__imp::classic_locale_imp_)
  {
    v22 = (unint64_t *)((char *)v26.__locale_ + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
      (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 16))(locale);
  }
  v24 = std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v20, v28, v27, (uint64_t)a3, a4);
  if (v19)
    free(v19);
  if (v13)
    free(v13);
  return v24;
}

void sub_191FE4268(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;
  void *v13;

  if (v13)
    free(v13);
  if (v12)
    free(v12);
  _Unwind_Resume(exception_object);
}

uint64_t std::num_put<char,std::ostreambuf_iterator<char>>::do_put(uint64_t a1, uint64_t a2, const std::ios_base *a3, int a4, const void *a5)
{
  int v8;
  char *v9;
  char *v10;
  const std::locale::facet *v11;
  std::locale::__imp *locale;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  std::locale v17;
  char v18[37];
  char __nb[20];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v8 = snprintf_l(__nb, 0x14uLL, 0, "%p", a5);
  v9 = &__nb[v8];
  v10 = std::__num_put_base::__identify_padding(__nb, v9, a3);
  std::ios_base::getloc(a3);
  v11 = std::locale::use_facet(&v17, &std::ctype<char>::id);
  locale = v17.__locale_;
  if (v17.__locale_ != (std::locale::__imp *)&std::locale::__imp::classic_locale_imp_)
  {
    v13 = (unint64_t *)((char *)v17.__locale_ + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
      (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 16))(locale);
  }
  ((void (*)(const std::locale::facet *, char *, char *, char *))v11->__vftable[2].__on_zero_shared)(v11, __nb, v9, v18);
  if (v10 == v9)
    v15 = &v18[v8];
  else
    v15 = &v18[v10 - __nb];
  return std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v18, (uint64_t)v15, (uint64_t)&v18[v8], (uint64_t)a3, a4);
}

void sub_191FE443C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
  if (a11 != &std::locale::__imp::classic_locale_imp_)
    std::num_put<char,std::ostreambuf_iterator<char>>::do_put((uint64_t)a11);
  _Unwind_Resume(exception_object);
}

char *__cdecl std::__num_put_base::__identify_padding(char *__nb, char *__ne, const std::ios_base *__iob)
{
  std::ios_base::fmtflags v3;
  int v4;

  v3 = __iob->__fmtflags_ & 0xB0;
  if (v3 == 32)
    return __ne;
  if (v3 == 16)
  {
    v4 = *__nb;
    if (v4 == 45 || v4 == 43)
    {
      ++__nb;
    }
    else if (__ne - __nb >= 2 && v4 == 48 && (__nb[1] | 0x20) == 0x78)
    {
      __nb += 2;
    }
  }
  return __nb;
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if (v12 >= 1)
    {
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (v18 < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v15) == v15)
      *(_QWORD *)(a5 + 24) = 0;
    else
      return 0;
  }
  return v6;
}

void sub_191FE45F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t>>::do_put(uint64_t a1, _QWORD *a2, std::ios_base *this, uint64_t a4, int a5)
{
  _QWORD *v6;
  const std::locale::facet *v8;
  std::locale::__imp *locale;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::locale::__imp *v14;
  uint64_t v15;
  _DWORD *v16;
  std::locale v17;
  uint64_t v18;
  unsigned __int8 v19;

  v6 = a2;
  if ((this->__fmtflags_ & 1) == 0)
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 48))(a1, a2);
  std::ios_base::getloc(this);
  v8 = std::locale::use_facet(&v17, &std::numpunct<wchar_t>::id);
  locale = v17.__locale_;
  if (v17.__locale_ != (std::locale::__imp *)&std::locale::__imp::classic_locale_imp_)
  {
    v10 = (unint64_t *)((char *)v17.__locale_ + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
      (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 16))(locale);
  }
  v12 = 56;
  if (a5)
    v12 = 48;
  (*(void (**)(std::locale *__return_ptr, const std::locale::facet *))((char *)&v8->~facet + v12))(&v17, v8);
  v13 = v19;
  if ((v19 & 0x80u) == 0)
    v14 = (std::locale::__imp *)&v17;
  else
    v14 = v17.__locale_;
  if ((v19 & 0x80) != 0)
    goto LABEL_16;
  while (v14 != (std::locale::__imp *)((char *)&v17 + 4 * v13))
  {
    while (1)
    {
      if (v6)
      {
        v15 = *(unsigned int *)v14;
        v16 = (_DWORD *)v6[6];
        if (v16 == (_DWORD *)v6[7])
        {
          LODWORD(v15) = (*(uint64_t (**)(_QWORD *, uint64_t))(*v6 + 104))(v6, v15);
        }
        else
        {
          *v16 = v15;
          v6[6] = v16 + 1;
        }
        if ((_DWORD)v15 == -1)
          v6 = 0;
        v13 = v19;
      }
      v14 = (std::locale::__imp *)((char *)v14 + 4);
      if ((v13 & 0x80) == 0)
        break;
LABEL_16:
      if (v14 == (std::locale::__imp *)((char *)v17.__locale_ + 4 * v18))
      {
        operator delete(v17.__locale_);
        return v6;
      }
    }
  }
  return v6;
}

void sub_191FE4778(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (__p != &std::locale::__imp::classic_locale_imp_)
    std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t>>::do_put((uint64_t)__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t>>::do_put(int a1, uint64_t a2, const std::ios_base *a3, int a4, uint64_t a5)
{
  return std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t>>::__do_put_integral[abi:ne180100]<long>(a1, a2, a3, a4, a5, "l");
}

{
  return std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t>>::__do_put_integral[abi:ne180100]<long long>(a1, a2, a3, a4, a5, "ll");
}

{
  return std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t>>::__do_put_integral[abi:ne180100]<unsigned long>(a1, a2, a3, a4, a5, "l");
}

{
  return std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t>>::__do_put_integral[abi:ne180100]<unsigned long long>(a1, a2, a3, a4, a5, "ll");
}

uint64_t std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t>>::__do_put_integral[abi:ne180100]<long>(int a1, uint64_t a2, const std::ios_base *a3, int a4, uint64_t a5, char *__len)
{
  char *v10;
  char *v11;
  std::locale::__imp *locale;
  unint64_t *v13;
  unint64_t v14;
  std::locale v16;
  uint64_t v17;
  uint64_t v18;
  char v19[180];
  char __nb[24];
  char v21[8];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)v21 = 37;
  std::__num_put_base::__format_int(&v21[1], __len, 1, a3->__fmtflags_);
  v10 = &__nb[snprintf_l(__nb, 0x18uLL, 0, v21, a5)];
  v11 = std::__num_put_base::__identify_padding(__nb, v10, a3);
  std::ios_base::getloc(a3);
  std::__num_put<wchar_t>::__widen_and_group_int(__nb, v11, v10, (uint64_t)v19, &v18, &v17, &v16);
  locale = v16.__locale_;
  if (v16.__locale_ != (std::locale::__imp *)&std::locale::__imp::classic_locale_imp_)
  {
    v13 = (unint64_t *)((char *)v16.__locale_ + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
      (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 16))(locale);
  }
  return std::__pad_and_output[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v19, v18, v17, (uint64_t)a3, a4);
}

void sub_191FE48FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (a10 != &std::locale::__imp::classic_locale_imp_)
    std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t>>::__do_put_integral[abi:ne180100]<long>((uint64_t)a10);
  _Unwind_Resume(exception_object);
}

uint64_t std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t>>::__do_put_integral[abi:ne180100]<long long>(int a1, uint64_t a2, const std::ios_base *a3, int a4, uint64_t a5, char *__len)
{
  char *v10;
  char *v11;
  std::locale::__imp *locale;
  unint64_t *v13;
  unint64_t v14;
  std::locale v16;
  uint64_t v17;
  uint64_t v18;
  char v19[180];
  char __nb[24];
  char v21[8];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)v21 = 37;
  std::__num_put_base::__format_int(&v21[1], __len, 1, a3->__fmtflags_);
  v10 = &__nb[snprintf_l(__nb, 0x18uLL, 0, v21, a5)];
  v11 = std::__num_put_base::__identify_padding(__nb, v10, a3);
  std::ios_base::getloc(a3);
  std::__num_put<wchar_t>::__widen_and_group_int(__nb, v11, v10, (uint64_t)v19, &v18, &v17, &v16);
  locale = v16.__locale_;
  if (v16.__locale_ != (std::locale::__imp *)&std::locale::__imp::classic_locale_imp_)
  {
    v13 = (unint64_t *)((char *)v16.__locale_ + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
      (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 16))(locale);
  }
  return std::__pad_and_output[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v19, v18, v17, (uint64_t)a3, a4);
}

void sub_191FE4A70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (a10 != &std::locale::__imp::classic_locale_imp_)
    std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t>>::__do_put_integral[abi:ne180100]<long long>((uint64_t)a10);
  _Unwind_Resume(exception_object);
}

uint64_t std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t>>::__do_put_integral[abi:ne180100]<unsigned long>(int a1, uint64_t a2, const std::ios_base *a3, int a4, uint64_t a5, char *__len)
{
  char *v10;
  char *v11;
  std::locale::__imp *locale;
  unint64_t *v13;
  unint64_t v14;
  std::locale v16;
  uint64_t v17;
  uint64_t v18;
  char v19[180];
  char __nb[24];
  char v21[8];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)v21 = 37;
  std::__num_put_base::__format_int(&v21[1], __len, 0, a3->__fmtflags_);
  v10 = &__nb[snprintf_l(__nb, 0x18uLL, 0, v21, a5)];
  v11 = std::__num_put_base::__identify_padding(__nb, v10, a3);
  std::ios_base::getloc(a3);
  std::__num_put<wchar_t>::__widen_and_group_int(__nb, v11, v10, (uint64_t)v19, &v18, &v17, &v16);
  locale = v16.__locale_;
  if (v16.__locale_ != (std::locale::__imp *)&std::locale::__imp::classic_locale_imp_)
  {
    v13 = (unint64_t *)((char *)v16.__locale_ + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
      (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 16))(locale);
  }
  return std::__pad_and_output[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v19, v18, v17, (uint64_t)a3, a4);
}

void sub_191FE4BE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (a10 != &std::locale::__imp::classic_locale_imp_)
    std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t>>::__do_put_integral[abi:ne180100]<unsigned long>((uint64_t)a10);
  _Unwind_Resume(exception_object);
}

uint64_t std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t>>::__do_put_integral[abi:ne180100]<unsigned long long>(int a1, uint64_t a2, const std::ios_base *a3, int a4, uint64_t a5, char *__len)
{
  char *v10;
  char *v11;
  std::locale::__imp *locale;
  unint64_t *v13;
  unint64_t v14;
  std::locale v16;
  uint64_t v17;
  uint64_t v18;
  char v19[180];
  char __nb[24];
  char v21[8];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)v21 = 37;
  std::__num_put_base::__format_int(&v21[1], __len, 0, a3->__fmtflags_);
  v10 = &__nb[snprintf_l(__nb, 0x18uLL, 0, v21, a5)];
  v11 = std::__num_put_base::__identify_padding(__nb, v10, a3);
  std::ios_base::getloc(a3);
  std::__num_put<wchar_t>::__widen_and_group_int(__nb, v11, v10, (uint64_t)v19, &v18, &v17, &v16);
  locale = v16.__locale_;
  if (v16.__locale_ != (std::locale::__imp *)&std::locale::__imp::classic_locale_imp_)
  {
    v13 = (unint64_t *)((char *)v16.__locale_ + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
      (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 16))(locale);
  }
  return std::__pad_and_output[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v19, v18, v17, (uint64_t)a3, a4);
}

void sub_191FE4D58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (a10 != &std::locale::__imp::classic_locale_imp_)
    std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t>>::__do_put_integral[abi:ne180100]<unsigned long long>((uint64_t)a10);
  _Unwind_Resume(exception_object);
}

uint64_t std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t>>::do_put(int a1, uint64_t a2, const std::ios_base *a3, int a4, double a5)
{
  return std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t>>::__do_put_floating_point[abi:ne180100]<double>(a1, a2, a3, a4, "", a5);
}

{
  return std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t>>::__do_put_floating_point[abi:ne180100]<long double>(a1, a2, a3, a4, "L", a5);
}

uint64_t std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t>>::__do_put_floating_point[abi:ne180100]<double>(int a1, uint64_t a2, const std::ios_base *a3, int a4, char *__len, double a6)
{
  _BOOL4 v10;
  int v11;
  int v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  void *v18;
  void *v19;
  char *v20;
  std::locale::__imp *locale;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  std::locale v26;
  uint64_t v27;
  uint64_t v28;
  char *__nb;
  char v30;
  char v31[30];
  char v32[8];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)v32 = 37;
  v10 = std::__num_put_base::__format_float(&v32[1], __len, a3->__fmtflags_);
  __nb = v31;
  if (!v10)
  {
    v11 = snprintf_l(v31, 0x1EuLL, 0, v32, *(_QWORD *)&a6);
    if (v11 > 29)
    {
      v12 = asprintf_l(&__nb, 0, v32, *(_QWORD *)&a6);
      goto LABEL_6;
    }
LABEL_8:
    v13 = 0;
    goto LABEL_9;
  }
  v11 = snprintf_l(v31, 0x1EuLL, 0, v32, a3->__precision_, *(_QWORD *)&a6);
  if (v11 <= 29)
    goto LABEL_8;
  v12 = asprintf_l(&__nb, 0, v32, a3->__precision_, *(_QWORD *)&a6);
LABEL_6:
  v11 = v12;
  if (v12 == -1)
    std::__throw_bad_alloc();
  v13 = __nb;
LABEL_9:
  v14 = __nb;
  v15 = &__nb[v11];
  v16 = std::__num_put_base::__identify_padding(__nb, v15, a3);
  v17 = v31;
  if (v14 == v31)
  {
    v19 = 0;
    v20 = &v30;
  }
  else
  {
    v18 = malloc_type_malloc(8 * v11, 0x100004052888210uLL);
    v19 = v18;
    if (!v18)
      std::__throw_bad_alloc();
    v17 = __nb;
    v20 = (char *)v18;
  }
  std::ios_base::getloc(a3);
  std::__num_put<wchar_t>::__widen_and_group_float((unint64_t)v17, (uint64_t)v16, (unint64_t)v15, (uint64_t)v20, &v28, &v27, &v26);
  locale = v26.__locale_;
  if (v26.__locale_ != (std::locale::__imp *)&std::locale::__imp::classic_locale_imp_)
  {
    v22 = (unint64_t *)((char *)v26.__locale_ + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
      (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 16))(locale);
  }
  v24 = std::__pad_and_output[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v20, v28, v27, (uint64_t)a3, a4);
  if (v19)
    free(v19);
  if (v13)
    free(v13);
  return v24;
}

void sub_191FE4FE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;
  void *v13;

  if (v13)
    free(v13);
  if (v12)
    free(v12);
  _Unwind_Resume(exception_object);
}

uint64_t std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t>>::__do_put_floating_point[abi:ne180100]<long double>(int a1, uint64_t a2, const std::ios_base *a3, int a4, char *__len, double a6)
{
  _BOOL4 v10;
  int v11;
  int v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  void *v18;
  void *v19;
  char *v20;
  std::locale::__imp *locale;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  std::locale v26;
  uint64_t v27;
  uint64_t v28;
  char *__nb;
  char v30;
  char v31[30];
  char v32[8];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)v32 = 37;
  v10 = std::__num_put_base::__format_float(&v32[1], __len, a3->__fmtflags_);
  __nb = v31;
  if (!v10)
  {
    v11 = snprintf_l(v31, 0x1EuLL, 0, v32, *(_QWORD *)&a6);
    if (v11 > 29)
    {
      v12 = asprintf_l(&__nb, 0, v32, *(_QWORD *)&a6);
      goto LABEL_6;
    }
LABEL_8:
    v13 = 0;
    goto LABEL_9;
  }
  v11 = snprintf_l(v31, 0x1EuLL, 0, v32, a3->__precision_, *(_QWORD *)&a6);
  if (v11 <= 29)
    goto LABEL_8;
  v12 = asprintf_l(&__nb, 0, v32, a3->__precision_, *(_QWORD *)&a6);
LABEL_6:
  v11 = v12;
  if (v12 == -1)
    std::__throw_bad_alloc();
  v13 = __nb;
LABEL_9:
  v14 = __nb;
  v15 = &__nb[v11];
  v16 = std::__num_put_base::__identify_padding(__nb, v15, a3);
  v17 = v31;
  if (v14 == v31)
  {
    v19 = 0;
    v20 = &v30;
  }
  else
  {
    v18 = malloc_type_malloc(8 * v11, 0x100004052888210uLL);
    v19 = v18;
    if (!v18)
      std::__throw_bad_alloc();
    v17 = __nb;
    v20 = (char *)v18;
  }
  std::ios_base::getloc(a3);
  std::__num_put<wchar_t>::__widen_and_group_float((unint64_t)v17, (uint64_t)v16, (unint64_t)v15, (uint64_t)v20, &v28, &v27, &v26);
  locale = v26.__locale_;
  if (v26.__locale_ != (std::locale::__imp *)&std::locale::__imp::classic_locale_imp_)
  {
    v22 = (unint64_t *)((char *)v26.__locale_ + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
      (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 16))(locale);
  }
  v24 = std::__pad_and_output[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v20, v28, v27, (uint64_t)a3, a4);
  if (v19)
    free(v19);
  if (v13)
    free(v13);
  return v24;
}

void sub_191FE52BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;
  void *v13;

  if (v13)
    free(v13);
  if (v12)
    free(v12);
  _Unwind_Resume(exception_object);
}

uint64_t std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t>>::do_put(uint64_t a1, uint64_t a2, const std::ios_base *a3, int a4, const void *a5)
{
  int v8;
  char *v9;
  char *v10;
  const std::locale::facet *v11;
  std::locale::__imp *locale;
  unint64_t *v13;
  unint64_t v14;
  _DWORD *v15;
  std::locale v17;
  _DWORD v18[37];
  char __nb[20];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v8 = snprintf_l(__nb, 0x14uLL, 0, "%p", a5);
  v9 = &__nb[v8];
  v10 = std::__num_put_base::__identify_padding(__nb, v9, a3);
  std::ios_base::getloc(a3);
  v11 = std::locale::use_facet(&v17, &std::ctype<wchar_t>::id);
  locale = v17.__locale_;
  if (v17.__locale_ != (std::locale::__imp *)&std::locale::__imp::classic_locale_imp_)
  {
    v13 = (unint64_t *)((char *)v17.__locale_ + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
      (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 16))(locale);
  }
  ((void (*)(const std::locale::facet *, char *, char *, _DWORD *))v11->__vftable[4].~facet)(v11, __nb, v9, v18);
  if (v10 == v9)
    v15 = &v18[v8];
  else
    v15 = &v18[v10 - __nb];
  return std::__pad_and_output[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v18, (uint64_t)v15, (uint64_t)&v18[v8], (uint64_t)a3, a4);
}

void sub_191FE5490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (a10 != &std::locale::__imp::classic_locale_imp_)
    std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t>>::do_put((uint64_t)a10);
  _Unwind_Resume(exception_object);
}

uint64_t std::__pad_and_output[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= (a4 - a2) >> 2)
      v12 = 0;
    else
      v12 = v11 - ((a4 - a2) >> 2);
    if (a3 - a2 >= 1
      && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != (unint64_t)(a3 - a2) >> 2)
    {
      return 0;
    }
    if (v12 >= 1)
    {
      std::wstring::basic_string[abi:ne180100](__p, v12, a6);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (v18 < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1
      || (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v6 + 96))(v6, a3, (unint64_t)v15 >> 2) == (unint64_t)v15 >> 2)
    {
      *(_QWORD *)(a5 + 24) = 0;
    }
    else
    {
      return 0;
    }
  }
  return v6;
}

void sub_191FE55DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__num_put<char>::__widen_and_group_int(unsigned __int8 *a1, char *a2, char *a3, uint64_t a4, _QWORD *a5, uint64_t *a6, std::locale *this)
{
  const std::locale::facet *v14;
  const std::locale::facet *v15;
  uint64_t v16;
  int v17;
  char *v18;
  char v19;
  _BYTE *v20;
  char v21;
  _BYTE *v22;
  char v23;
  _BYTE *v24;
  char *v25;
  char *v26;
  char v27;
  BOOL v28;
  char v29;
  char v30;
  unsigned int v31;
  int v32;
  int64_t v33;
  char *p_p;
  int v35;
  BOOL v36;
  _BYTE *v37;
  uint64_t v38;
  char v39;
  _BYTE *v40;
  unint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  unint64_t v45;
  char v46;
  uint64_t v47;
  char *v48;
  _QWORD *v49;
  char *v50;
  void *__p;
  uint64_t v52;
  unsigned __int8 v53;

  v14 = std::locale::use_facet(this, &std::ctype<char>::id);
  v15 = std::locale::use_facet(this, &std::numpunct<char>::id);
  ((void (*)(void **__return_ptr))v15->__vftable[1].__on_zero_shared)(&__p);
  v16 = v53;
  if ((v53 & 0x80u) != 0)
    v16 = v52;
  if (v16)
  {
    *a6 = a4;
    v17 = *a1;
    if (v17 == 45 || (v18 = (char *)a1, v17 == 43))
    {
      v19 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v14->__vftable[2].~facet_0)(v14, (char)v17);
      v18 = (char *)(a1 + 1);
      v20 = (_BYTE *)(*a6)++;
      *v20 = v19;
    }
    if (a3 - v18 >= 2 && *v18 == 48 && (v18[1] | 0x20) == 0x78)
    {
      v21 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 48);
      v22 = (_BYTE *)(*a6)++;
      *v22 = v21;
      v23 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v14->__vftable[2].~facet_0)(v14, v18[1]);
      v18 += 2;
      v24 = (_BYTE *)(*a6)++;
      *v24 = v23;
    }
    v49 = a5;
    v50 = v18;
    v48 = a2;
    if (v18 != a3)
    {
      v25 = a3 - 1;
      if (a3 - 1 > v18)
      {
        v26 = v18 + 1;
        do
        {
          v27 = *(v26 - 1);
          *(v26 - 1) = *v25;
          *v25-- = v27;
          v28 = v26++ >= v25;
        }
        while (!v28);
      }
    }
    v29 = ((uint64_t (*)(const std::locale::facet *))v15->__vftable[1].~facet_0)(v15);
    if (v18 < a3)
    {
      v30 = v29;
      v31 = 0;
      v32 = 0;
      v33 = a3 - v18;
      do
      {
        if ((v53 & 0x80u) == 0)
          p_p = (char *)&__p;
        else
          p_p = (char *)__p;
        v35 = p_p[v31];
        if (v35)
          v36 = v32 == v35;
        else
          v36 = 0;
        if (v36)
        {
          v32 = 0;
          v37 = (_BYTE *)(*a6)++;
          *v37 = v30;
          v38 = v53;
          if ((v53 & 0x80u) != 0)
            v38 = v52;
          if (v38 - 1 > (unint64_t)v31)
            ++v31;
        }
        v39 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v14->__vftable[2].~facet_0)(v14, *v18);
        v40 = (_BYTE *)(*a6)++;
        *v40 = v39;
        ++v32;
        ++v18;
        --v33;
      }
      while (v33);
    }
    a5 = v49;
    a2 = v48;
    v41 = a4 + v50 - (char *)a1;
    v42 = *a6;
    v43 = (_BYTE *)(*a6 - 1);
    if (v41 != *a6 && (unint64_t)v43 > v41)
    {
      v45 = v50 - (char *)a1 + a4 + 1;
      do
      {
        v46 = *(_BYTE *)(v45 - 1);
        *(_BYTE *)(v45 - 1) = *v43;
        *v43-- = v46;
        v28 = v45++ >= (unint64_t)v43;
      }
      while (!v28);
      v42 = *a6;
    }
  }
  else
  {
    ((void (*)(const std::locale::facet *, unsigned __int8 *, char *, uint64_t))v14->__vftable[2].__on_zero_shared)(v14, a1, a3, a4);
    v42 = a4 + a3 - (char *)a1;
    *a6 = v42;
  }
  v47 = a4 + a2 - (char *)a1;
  if (a2 == a3)
    v47 = v42;
  *a5 = v47;
  if ((char)v53 < 0)
    operator delete(__p);
}

void sub_191FE58F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__num_put<char>::__widen_and_group_float(char *a1, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t *a5, unint64_t *a6, std::locale *this)
{
  const std::locale::facet *v14;
  int v15;
  char *v16;
  char v17;
  _BYTE *v18;
  uint64_t v19;
  char v20;
  _BYTE *v21;
  char v22;
  char *v23;
  _BYTE *v24;
  uint64_t v25;
  char *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char v34;
  BOOL v35;
  char v36;
  char v37;
  unsigned int v38;
  int v39;
  int64_t v40;
  char *v41;
  char *p_p;
  int v43;
  _BYTE *v45;
  uint64_t v46;
  char v47;
  _BYTE *v48;
  _BYTE *v49;
  _BYTE *v50;
  BOOL v51;
  unint64_t v52;
  char v53;
  unint64_t v54;
  int v55;
  char v56;
  _BYTE *v57;
  char v58;
  _BYTE *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t *v62;
  const std::locale::facet *v63;
  uint64_t v64;
  char *v65;
  void *__p;
  uint64_t v67;
  unsigned __int8 v68;

  v14 = std::locale::use_facet(this, &std::ctype<char>::id);
  v63 = std::locale::use_facet(this, &std::numpunct<char>::id);
  ((void (*)(void **__return_ptr))v63->__vftable[1].__on_zero_shared)(&__p);
  *a6 = a4;
  v15 = *a1;
  if (v15 == 45 || (v16 = a1, v15 == 43))
  {
    v17 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v14->__vftable[2].~facet_0)(v14, (char)v15);
    v16 = a1 + 1;
    v18 = (_BYTE *)(*a6)++;
    *v18 = v17;
  }
  v19 = a3 - (_QWORD)v16 - 2;
  v64 = a2;
  v65 = a1;
  if ((uint64_t)(a3 - (_QWORD)v16) < 2 || *v16 != 48 || (v16[1] | 0x20) != 0x78)
  {
    if ((unint64_t)v16 >= a3)
    {
      v26 = v16;
      goto LABEL_27;
    }
    v28 = 0;
    v26 = (char *)a3;
    v29 = MEMORY[0x1E0C80978];
    while (1)
    {
      v30 = v16[v28];
      if ((v30 & 0x80000000) != 0)
      {
        if (!__maskrune_l(v30, 0x400uLL, 0))
        {
LABEL_24:
          v26 = &v16[v28];
          goto LABEL_27;
        }
      }
      else if ((*(_DWORD *)(v29 + 4 * v30 + 60) & 0x400) == 0)
      {
        goto LABEL_24;
      }
      if (a3 - (_QWORD)v16 == ++v28)
        goto LABEL_27;
    }
  }
  v20 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 48);
  v21 = (_BYTE *)(*a6)++;
  *v21 = v20;
  v22 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v14->__vftable[2].~facet_0)(v14, v16[1]);
  v23 = v16 + 2;
  v24 = (_BYTE *)(*a6)++;
  *v24 = v22;
  if ((unint64_t)(v16 + 2) >= a3)
  {
    v26 = v16 + 2;
  }
  else
  {
    v25 = MEMORY[0x1E0C80978];
    v26 = v23;
    do
    {
      v27 = *v26;
      if ((v27 & 0x80000000) != 0)
      {
        if (!__maskrune_l(v27, 0x10000uLL, 0))
          goto LABEL_26;
      }
      else if ((*(_DWORD *)(v25 + 4 * v27 + 60) & 0x10000) == 0)
      {
        goto LABEL_26;
      }
      ++v26;
      --v19;
    }
    while (v19);
    v26 = (char *)a3;
  }
LABEL_26:
  v16 = v23;
LABEL_27:
  v31 = v68;
  if ((v68 & 0x80u) != 0)
    v31 = v67;
  if (v31)
  {
    v61 = a4;
    if (v16 != v26)
    {
      v32 = v26 - 1;
      if (v26 - 1 > v16)
      {
        v33 = v16 + 1;
        do
        {
          v34 = *(v33 - 1);
          *(v33 - 1) = *v32;
          *v32-- = v34;
          v35 = v33++ >= v32;
        }
        while (!v35);
      }
    }
    v62 = a5;
    v36 = ((uint64_t (*)(const std::locale::facet *))v63->__vftable[1].~facet_0)(v63);
    if (v16 < v26)
    {
      v37 = v36;
      v38 = 0;
      v39 = 0;
      v40 = v26 - v16;
      v41 = v16;
      do
      {
        if ((v68 & 0x80u) == 0)
          p_p = (char *)&__p;
        else
          p_p = (char *)__p;
        v43 = p_p[v38];
        if (v43 >= 1 && v39 == v43)
        {
          v39 = 0;
          v45 = (_BYTE *)(*a6)++;
          *v45 = v37;
          v46 = v68;
          if ((v68 & 0x80u) != 0)
            v46 = v67;
          if (v46 - 1 > (unint64_t)v38)
            ++v38;
        }
        v47 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v14->__vftable[2].~facet_0)(v14, *v41);
        v48 = (_BYTE *)(*a6)++;
        *v48 = v47;
        ++v39;
        ++v41;
        --v40;
      }
      while (v40);
    }
    a4 = v61;
    v49 = (_BYTE *)(v61 + v16 - v65);
    v50 = (_BYTE *)(*a6 - 1);
    v51 = v49 != (_BYTE *)*a6 && v50 > v49;
    a5 = v62;
    if (v51)
    {
      v52 = v16 - v65 + v61 + 1;
      do
      {
        v53 = *(_BYTE *)(v52 - 1);
        *(_BYTE *)(v52 - 1) = *v50;
        *v50-- = v53;
        v35 = v52++ >= (unint64_t)v50;
      }
      while (!v35);
    }
  }
  else
  {
    ((void (*)(const std::locale::facet *, char *, char *, unint64_t))v14->__vftable[2].__on_zero_shared)(v14, v16, v26, *a6);
    *a6 += v26 - v16;
  }
  if ((unint64_t)v26 < a3)
  {
    v54 = a3 - (_QWORD)v26++;
    while (1)
    {
      v55 = *(v26 - 1);
      if (v55 == 46)
        break;
      v56 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v14->__vftable[2].~facet_0)(v14, (char)v55);
      v57 = (_BYTE *)(*a6)++;
      *v57 = v56;
      ++v26;
      if (!--v54)
      {
        v26 = (char *)a3;
        goto LABEL_66;
      }
    }
    v58 = ((uint64_t (*)(const std::locale::facet *))v63->__vftable[1].~facet)(v63);
    v59 = (_BYTE *)(*a6)++;
    *v59 = v58;
  }
LABEL_66:
  ((void (*)(const std::locale::facet *, char *, unint64_t, unint64_t))v14->__vftable[2].__on_zero_shared)(v14, v26, a3, *a6);
  v60 = *a6 + a3 - (_QWORD)v26;
  *a6 = v60;
  if (v64 != a3)
    v60 = a4 + v64 - (_QWORD)v65;
  *a5 = v60;
  if ((char)v68 < 0)
    operator delete(__p);
}

void sub_191FE5D98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__num_put<wchar_t>::__widen_and_group_int(char *a1, char *a2, char *a3, uint64_t a4, _QWORD *a5, _QWORD *a6, std::locale *this)
{
  const std::locale::facet *v14;
  const std::locale::facet *v15;
  uint64_t v16;
  int v17;
  char *v18;
  int v19;
  _DWORD *v20;
  int v21;
  _DWORD *v22;
  int v23;
  char *v24;
  _DWORD *v25;
  char *v26;
  char *v27;
  char v28;
  BOOL v29;
  int v30;
  int v31;
  unsigned int v32;
  int v33;
  uint64_t v34;
  char *p_p;
  int v36;
  BOOL v37;
  _DWORD *v38;
  uint64_t v39;
  int v40;
  _DWORD *v41;
  _DWORD *v42;
  _DWORD *v43;
  unint64_t v44;
  _DWORD *v45;
  unint64_t v46;
  int v47;
  _DWORD *v48;
  char *v49;
  char *v50;
  _QWORD *v51;
  void *__p;
  uint64_t v53;
  unsigned __int8 v54;

  v14 = std::locale::use_facet(this, &std::ctype<wchar_t>::id);
  v15 = std::locale::use_facet(this, &std::numpunct<wchar_t>::id);
  ((void (*)(void **__return_ptr))v15->__vftable[1].__on_zero_shared)(&__p);
  v16 = v54;
  if ((v54 & 0x80u) != 0)
    v16 = v53;
  if (v16)
  {
    *a6 = a4;
    v17 = *a1;
    if (v17 == 45 || (v18 = a1, v17 == 43))
    {
      v19 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v14->__vftable[3].__on_zero_shared)(v14, (char)v17);
      v18 = a1 + 1;
      v20 = (_DWORD *)*a6;
      *v20 = v19;
      *a6 = v20 + 1;
    }
    if (a3 - v18 >= 2 && *v18 == 48 && (v18[1] | 0x20) == 0x78)
    {
      v21 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v14->__vftable[3].__on_zero_shared)(v14, 48);
      v22 = (_DWORD *)*a6;
      *v22 = v21;
      *a6 = v22 + 1;
      v23 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v14->__vftable[3].__on_zero_shared)(v14, v18[1]);
      v24 = v18 + 2;
      v25 = (_DWORD *)*a6;
      *v25 = v23;
      *a6 = v25 + 1;
      v18 += 2;
    }
    else
    {
      v24 = v18;
    }
    if (v18 != a3)
    {
      v26 = a3 - 1;
      if (a3 - 1 > v18)
      {
        v27 = v18 + 1;
        do
        {
          v28 = *(v27 - 1);
          *(v27 - 1) = *v26;
          *v26-- = v28;
          v29 = v27++ >= v26;
        }
        while (!v29);
      }
    }
    v30 = ((uint64_t (*)(const std::locale::facet *))v15->__vftable[1].~facet_0)(v15);
    if (v18 >= a3)
    {
      v43 = (_DWORD *)*a6;
    }
    else
    {
      v31 = v30;
      v50 = a2;
      v51 = a5;
      v32 = 0;
      v33 = 0;
      v49 = v24;
      v34 = a3 - v24;
      do
      {
        if ((v54 & 0x80u) == 0)
          p_p = (char *)&__p;
        else
          p_p = (char *)__p;
        v36 = p_p[v32];
        if (v36)
          v37 = v33 == v36;
        else
          v37 = 0;
        if (v37)
        {
          v33 = 0;
          v38 = (_DWORD *)*a6;
          *v38 = v31;
          *a6 = v38 + 1;
          v39 = v54;
          if ((v54 & 0x80u) != 0)
            v39 = v53;
          if (v39 - 1 > (unint64_t)v32)
            ++v32;
        }
        v40 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v14->__vftable[3].__on_zero_shared)(v14, *v18);
        v41 = (_DWORD *)*a6;
        v42 = (_DWORD *)*a6;
        *v42 = v40;
        *a6 = v42 + 1;
        ++v33;
        ++v18;
        --v34;
      }
      while (v34);
      v43 = v41 + 1;
      a2 = v50;
      a5 = v51;
      v24 = v49;
    }
    v44 = a4 + 4 * (v24 - a1);
    if ((_DWORD *)v44 != v43)
    {
      v45 = v43 - 1;
      if ((unint64_t)v45 > v44)
      {
        v46 = a4 - 4 * (_QWORD)a1 + 4 * (_QWORD)v24 + 4;
        do
        {
          v47 = *(_DWORD *)(v46 - 4);
          *(_DWORD *)(v46 - 4) = *v45;
          *v45-- = v47;
          v29 = v46 >= (unint64_t)v45;
          v46 += 4;
        }
        while (!v29);
      }
    }
  }
  else
  {
    ((void (*)(const std::locale::facet *, char *, char *, uint64_t))v14->__vftable[4].~facet)(v14, a1, a3, a4);
    *a6 = a4 + 4 * (a3 - a1);
  }
  v48 = (_DWORD *)(a4 + 4 * (a2 - a1));
  if (a2 == a3)
    v48 = (_DWORD *)*a6;
  *a5 = v48;
  if ((char)v54 < 0)
    operator delete(__p);
}

void sub_191FE60D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__num_put<wchar_t>::__widen_and_group_float(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6, std::locale *this)
{
  const std::locale::facet *v14;
  const std::locale::facet *v15;
  int v16;
  unint64_t v17;
  int v18;
  _DWORD *v19;
  uint64_t v20;
  int v21;
  _DWORD *v22;
  int v23;
  char *v24;
  _DWORD *v25;
  uint64_t v26;
  char *v27;
  unsigned int v28;
  unsigned __int8 *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  char v37;
  BOOL v38;
  int v39;
  uint64_t v40;
  int v41;
  unsigned int v42;
  int v43;
  char *v44;
  char *v45;
  char *p_p;
  int v47;
  _DWORD *v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  _DWORD *v53;
  uint64_t v54;
  unint64_t v55;
  _DWORD *v56;
  unint64_t v57;
  int v58;
  uint64_t v59;
  unint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  _DWORD *v64;
  int v65;
  _DWORD *v66;
  uint64_t v67;
  unsigned __int8 *v68;
  uint64_t v69;
  uint64_t v70;
  const std::locale::facet *v71;
  const std::locale::facet *v72;
  uint64_t *v73;
  uint64_t v74;
  void *__p;
  uint64_t v76;
  unsigned __int8 v77;

  v14 = std::locale::use_facet(this, &std::ctype<wchar_t>::id);
  v15 = std::locale::use_facet(this, &std::numpunct<wchar_t>::id);
  ((void (*)(void **__return_ptr))v15->__vftable[1].__on_zero_shared)(&__p);
  *a6 = a4;
  v16 = *(unsigned __int8 *)a1;
  if (v16 == 45 || (v17 = a1, v16 == 43))
  {
    v18 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v14->__vftable[3].__on_zero_shared)(v14, (char)v16);
    v17 = a1 + 1;
    v19 = (_DWORD *)*a6;
    *v19 = v18;
    *a6 = (uint64_t)(v19 + 1);
  }
  v73 = a5;
  v74 = a4;
  v20 = a3 - v17 - 2;
  if ((uint64_t)(a3 - v17) >= 2 && *(_BYTE *)v17 == 48 && (*(unsigned __int8 *)(v17 + 1) | 0x20) == 0x78)
  {
    v21 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v14->__vftable[3].__on_zero_shared)(v14, 48);
    v22 = (_DWORD *)*a6;
    *v22 = v21;
    *a6 = (uint64_t)(v22 + 1);
    v23 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v14->__vftable[3].__on_zero_shared)(v14, *(char *)(v17 + 1));
    v69 = a2;
    v24 = (char *)(v17 + 2);
    v25 = (_DWORD *)*a6;
    *v25 = v23;
    *a6 = (uint64_t)(v25 + 1);
    if (v17 + 2 >= a3)
    {
      v27 = (char *)(v17 + 2);
    }
    else
    {
      v26 = MEMORY[0x1E0C80978];
      v27 = v24;
      do
      {
        v28 = *v27;
        if ((v28 & 0x80000000) != 0)
        {
          if (!__maskrune_l(v28, 0x10000uLL, 0))
            goto LABEL_27;
        }
        else if ((*(_DWORD *)(v26 + 4 * v28 + 60) & 0x10000) == 0)
        {
          goto LABEL_27;
        }
        ++v27;
        --v20;
      }
      while (v20);
      v27 = (char *)a3;
    }
LABEL_27:
    v17 = (unint64_t)v24;
    a2 = v69;
    goto LABEL_28;
  }
  if (v17 >= a3)
  {
    v27 = (char *)v17;
    goto LABEL_28;
  }
  v71 = v15;
  v29 = (unsigned __int8 *)a1;
  v30 = a2;
  v31 = 0;
  v27 = (char *)a3;
  v32 = MEMORY[0x1E0C80978];
  while (1)
  {
    v33 = *(char *)(v17 + v31);
    if ((v33 & 0x80000000) != 0)
      break;
    if ((*(_DWORD *)(v32 + 4 * v33 + 60) & 0x400) == 0)
      goto LABEL_24;
LABEL_21:
    if (a3 - v17 == ++v31)
      goto LABEL_25;
  }
  if (__maskrune_l(v33, 0x400uLL, 0))
    goto LABEL_21;
LABEL_24:
  v27 = (char *)(v17 + v31);
LABEL_25:
  a2 = v30;
  a1 = (unint64_t)v29;
  v15 = v71;
LABEL_28:
  v34 = v77;
  if ((v77 & 0x80u) != 0)
    v34 = v76;
  if (v34)
  {
    if ((char *)v17 != v27)
    {
      v35 = v27 - 1;
      if ((unint64_t)(v27 - 1) > v17)
      {
        v36 = v17 + 1;
        do
        {
          v37 = *(_BYTE *)(v36 - 1);
          *(_BYTE *)(v36 - 1) = *v35;
          *v35-- = v37;
          v38 = v36++ >= (unint64_t)v35;
        }
        while (!v38);
      }
    }
    v39 = ((uint64_t (*)(const std::locale::facet *))v15->__vftable[1].~facet_0)(v15);
    v40 = v74;
    if (v17 >= (unint64_t)v27)
    {
      v54 = *a6;
    }
    else
    {
      v41 = v39;
      v70 = a2;
      v72 = v15;
      v68 = (unsigned __int8 *)a1;
      v42 = 0;
      v43 = 0;
      v44 = &v27[-v17];
      v45 = (char *)v17;
      do
      {
        if ((v77 & 0x80u) == 0)
          p_p = (char *)&__p;
        else
          p_p = (char *)__p;
        v47 = p_p[v42];
        if (v47 >= 1 && v43 == v47)
        {
          v43 = 0;
          v49 = (_DWORD *)*a6;
          *v49 = v41;
          *a6 = (uint64_t)(v49 + 1);
          v50 = v77;
          if ((v77 & 0x80u) != 0)
            v50 = v76;
          if (v50 - 1 > (unint64_t)v42)
            ++v42;
        }
        v51 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v14->__vftable[3].__on_zero_shared)(v14, *v45);
        v52 = *a6;
        v53 = (_DWORD *)*a6;
        *v53 = v51;
        *a6 = (uint64_t)(v53 + 1);
        ++v43;
        ++v45;
        --v44;
      }
      while (v44);
      v54 = v52 + 4;
      a2 = v70;
      v40 = v74;
      a1 = (unint64_t)v68;
      v15 = v72;
    }
    v55 = v40 + 4 * (v17 - a1);
    if (v55 != v54)
    {
      v56 = (_DWORD *)(v54 - 4);
      if (v54 - 4 > v55)
      {
        v57 = v40 - 4 * a1 + 4 * v17 + 4;
        do
        {
          v58 = *(_DWORD *)(v57 - 4);
          *(_DWORD *)(v57 - 4) = *v56;
          *v56-- = v58;
          v38 = v57 >= (unint64_t)v56;
          v57 += 4;
        }
        while (!v38);
      }
    }
  }
  else
  {
    ((void (*)(const std::locale::facet *, unint64_t, char *, uint64_t))v14->__vftable[4].~facet)(v14, v17, v27, *a6);
    v54 = *a6 + 4 * (_QWORD)&v27[-v17];
    *a6 = v54;
    v40 = v74;
  }
  v59 = v40;
  if ((unint64_t)v27 < a3)
  {
    v60 = a3 - (_QWORD)v27++;
    while (1)
    {
      v61 = *(v27 - 1);
      if (v61 == 46)
        break;
      v62 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v14->__vftable[3].__on_zero_shared)(v14, (char)v61);
      v63 = *a6;
      v64 = (_DWORD *)*a6;
      *v64 = v62;
      *a6 = (uint64_t)(v64 + 1);
      ++v27;
      if (!--v60)
      {
        v54 = v63 + 4;
        v27 = (char *)a3;
        goto LABEL_65;
      }
    }
    v65 = ((uint64_t (*)(const std::locale::facet *))v15->__vftable[1].~facet)(v15);
    v66 = (_DWORD *)*a6;
    *v66 = v65;
    v54 = (uint64_t)(v66 + 1);
    *a6 = v54;
  }
LABEL_65:
  ((void (*)(const std::locale::facet *, char *, unint64_t, uint64_t))v14->__vftable[4].~facet)(v14, v27, a3, v54);
  v67 = *a6 + 4 * (a3 - (_QWORD)v27);
  *a6 = v67;
  if (a2 != a3)
    v67 = v59 + 4 * (a2 - a1);
  *v73 = v67;
  if ((char)v77 < 0)
    operator delete(__p);
}

void sub_191FE65A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::time_get<char,std::istreambuf_iterator<char>>::get(uint64_t a1, _QWORD *a2, _QWORD *a3, std::ios_base *this, _DWORD *a5, uint64_t a6, char *a7, char *a8)
{
  const std::locale::facet *v14;
  std::locale::__imp *locale;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::locale::facet_vtbl *v23;
  char *v24;
  char v25;
  char *v26;
  int v27;
  int v28;
  uint64_t v29;
  unsigned __int8 *v30;
  uint64_t v31;
  unsigned __int8 v32;
  uint64_t v33;
  std::locale v35;
  _QWORD *v36;
  _QWORD *v37;

  v36 = a3;
  v37 = a2;
  std::ios_base::getloc(this);
  v14 = std::locale::use_facet(&v35, &std::ctype<char>::id);
  locale = v35.__locale_;
  if (v35.__locale_ != (std::locale::__imp *)&std::locale::__imp::classic_locale_imp_)
  {
    v16 = (unint64_t *)((char *)v35.__locale_ + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
      (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 16))(locale);
  }
  *a5 = 0;
  if (a7 != a8)
  {
    while (1)
    {
      if ((std::istreambuf_iterator<char>::equal[abi:ne180100](&v37, &v36) & 1) != 0)
      {
LABEL_46:
        *a5 = 4;
        goto LABEL_47;
      }
      if (((unsigned int (*)(const std::locale::facet *, _QWORD, _QWORD))v14->__vftable[3].~facet)(v14, *a7, 0) == 37)break;
      if ((*a7 & 0x80000000) == 0)
      {
        v23 = v14[1].__vftable;
        if ((*((_DWORD *)&v23->~facet + *a7) & 0x4000) != 0)
        {
          v26 = a7 + 1;
          do
          {
            if (v26 == a8)
            {
              a7 = a8;
              break;
            }
            v27 = *v26;
            if (v27 < 0)
            {
              a7 = v26;
              break;
            }
            ++a7;
            ++v26;
          }
          while ((*((_DWORD *)&v23->~facet + v27) & 0x4000) != 0);
          while ((std::istreambuf_iterator<char>::equal[abi:ne180100](&v37, &v36) & 1) == 0)
          {
            v30 = (unsigned __int8 *)v37[3];
            if (v30 == (unsigned __int8 *)v37[4])
            {
              v32 = (*(uint64_t (**)(_QWORD *))(*v37 + 72))(v37);
              v31 = v32;
              if ((v32 & 0x80) != 0)
                goto LABEL_31;
            }
            else
            {
              v31 = *v30;
              if ((v31 & 0x80) != 0)
                goto LABEL_31;
            }
            if ((*((_DWORD *)&v14[1].~facet + v31) & 0x4000) == 0)
              break;
            v33 = v37[3];
            if (v33 == v37[4])
              (*(void (**)(_QWORD *))(*v37 + 80))(v37);
            else
              v37[3] = v33 + 1;
          }
          goto LABEL_31;
        }
      }
      v24 = (char *)v37[3];
      if (v24 == (char *)v37[4])
        v25 = (*(uint64_t (**)(_QWORD *))(*v37 + 72))(v37);
      else
        v25 = *v24;
      v28 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v14->__vftable[1].~facet)(v14, v25);
      if (v28 == ((unsigned int (*)(const std::locale::facet *, _QWORD))v14->__vftable[1].~facet)(v14, *a7))
      {
        v29 = v37[3];
        if (v29 == v37[4])
          (*(void (**)(_QWORD *))(*v37 + 80))(v37);
        else
          v37[3] = v29 + 1;
LABEL_20:
        ++a7;
        goto LABEL_31;
      }
      *a5 = 4;
LABEL_31:
      if (a7 == a8 || *a5)
        goto LABEL_47;
    }
    if (a7 + 1 == a8)
      goto LABEL_46;
    v18 = ((uint64_t (*)(const std::locale::facet *, _QWORD, _QWORD))v14->__vftable[3].~facet)(v14, a7[1], 0);
    v19 = v18;
    if ((_DWORD)v18 == 69 || v18 == 48)
    {
      if (a7 + 2 == a8)
        goto LABEL_46;
      v20 = ((uint64_t (*)(const std::locale::facet *, _QWORD, _QWORD))v14->__vftable[3].~facet)(v14, a7[2], 0);
      v21 = v19;
      v19 = v20;
      v22 = 2;
    }
    else
    {
      v21 = 0;
      v22 = 1;
    }
    a7 += v22;
    v37 = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, std::ios_base *, _DWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, v37, v36, this, a5, a6, v19, v21);
    goto LABEL_20;
  }
LABEL_47:
  if (std::istreambuf_iterator<char>::equal[abi:ne180100](&v37, &v36))
    *a5 |= 2u;
  return v37;
}

void sub_191FE6904(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (a10 != &std::locale::__imp::classic_locale_imp_)
    std::time_get<char,std::istreambuf_iterator<char>>::get((uint64_t)a10);
  _Unwind_Resume(exception_object);
}

uint64_t std::time_get<char,std::istreambuf_iterator<char>>::do_date_order()
{
  return 2;
}

_QWORD *std::time_get<char,std::istreambuf_iterator<char>>::do_get_time(uint64_t a1, _QWORD *a2, _QWORD *a3, std::ios_base *a4, _DWORD *a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v7 = 0x53253A4D253A4825;
  return std::time_get<char,std::istreambuf_iterator<char>>::get(a1, a2, a3, a4, a5, a6, (char *)&v7, (char *)&v8);
}

_QWORD *std::time_get<char,std::istreambuf_iterator<char>>::do_get_date(uint64_t a1, _QWORD *a2, _QWORD *a3, std::ios_base *a4, _DWORD *a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;

  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 40))(a1 + 16);
  v13 = *(unsigned __int8 *)(v12 + 23);
  if ((v13 & 0x80u) == 0)
    v14 = (char *)v12;
  else
    v14 = *(char **)v12;
  if ((v13 & 0x80u) != 0)
    v13 = *(_QWORD *)(v12 + 8);
  return std::time_get<char,std::istreambuf_iterator<char>>::get(a1, a2, a3, a4, a5, a6, v14, &v14[v13]);
}

_QWORD *std::time_get<char,std::istreambuf_iterator<char>>::do_get_weekday(uint64_t a1, _QWORD *a2, _QWORD *a3, std::ios_base *this, _DWORD *a5, uint64_t a6)
{
  const std::locale::facet *v10;
  std::locale::__imp *locale;
  unint64_t *v12;
  unint64_t v13;
  std::locale v15;
  _QWORD *v16;

  v16 = a2;
  std::ios_base::getloc(this);
  v10 = std::locale::use_facet(&v15, &std::ctype<char>::id);
  locale = v15.__locale_;
  if (v15.__locale_ != (std::locale::__imp *)&std::locale::__imp::classic_locale_imp_)
  {
    v12 = (unint64_t *)((char *)v15.__locale_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
      (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 16))(locale);
  }
  std::time_get<char,std::istreambuf_iterator<char>>::__get_weekdayname(a1, (int *)(a6 + 24), &v16, a3, a5, (uint64_t)v10);
  return v16;
}

void sub_191FE6AD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  if (a9 != &std::locale::__imp::classic_locale_imp_)
    std::time_get<char,std::istreambuf_iterator<char>>::do_get_weekday((uint64_t)a9);
  _Unwind_Resume(exception_object);
}

uint64_t *std::time_get<char,std::istreambuf_iterator<char>>::__get_weekdayname(uint64_t a1, int *a2, _QWORD **a3, _QWORD *a4, _DWORD *a5, uint64_t a6)
{
  uint64_t *v11;
  uint64_t *result;

  v11 = (uint64_t *)(**(uint64_t (***)(uint64_t))(a1 + 16))(a1 + 16);
  result = std::__scan_keyword[abi:ne180100]<std::istreambuf_iterator<char>,std::string const*,std::ctype<char>>(a3, a4, v11, v11 + 42, a6, a5, 0);
  if ((char *)result - (char *)v11 <= 335)
    *a2 = (int)(-1431655765 * (result - v11)) % 7;
  return result;
}

_QWORD *std::time_get<char,std::istreambuf_iterator<char>>::do_get_monthname(uint64_t a1, _QWORD *a2, _QWORD *a3, std::ios_base *this, _DWORD *a5, uint64_t a6)
{
  const std::locale::facet *v10;
  std::locale::__imp *locale;
  unint64_t *v12;
  unint64_t v13;
  std::locale v15;
  _QWORD *v16;

  v16 = a2;
  std::ios_base::getloc(this);
  v10 = std::locale::use_facet(&v15, &std::ctype<char>::id);
  locale = v15.__locale_;
  if (v15.__locale_ != (std::locale::__imp *)&std::locale::__imp::classic_locale_imp_)
  {
    v12 = (unint64_t *)((char *)v15.__locale_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
      (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 16))(locale);
  }
  std::time_get<char,std::istreambuf_iterator<char>>::__get_monthname(a1, (int *)(a6 + 16), &v16, a3, a5, (uint64_t)v10);
  return v16;
}

void sub_191FE6C68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  if (a9 != &std::locale::__imp::classic_locale_imp_)
    std::time_get<char,std::istreambuf_iterator<char>>::do_get_monthname((uint64_t)a9);
  _Unwind_Resume(exception_object);
}

uint64_t *std::time_get<char,std::istreambuf_iterator<char>>::__get_monthname(uint64_t a1, int *a2, _QWORD **a3, _QWORD *a4, _DWORD *a5, uint64_t a6)
{
  uint64_t *v11;
  uint64_t *result;

  v11 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 8))(a1 + 16);
  result = std::__scan_keyword[abi:ne180100]<std::istreambuf_iterator<char>,std::string const*,std::ctype<char>>(a3, a4, v11, v11 + 72, a6, a5, 0);
  if ((char *)result - (char *)v11 <= 575)
    *a2 = (int)(-1431655765 * (result - v11)) % 12;
  return result;
}

_QWORD *std::time_get<char,std::istreambuf_iterator<char>>::do_get_year(uint64_t a1, _QWORD *a2, _QWORD *a3, std::ios_base *this, _DWORD *a5, uint64_t a6)
{
  std::locale::facet *v10;
  std::locale::__imp *locale;
  unint64_t *v12;
  unint64_t v13;
  std::locale v15;
  _QWORD *v16;

  v16 = a2;
  std::ios_base::getloc(this);
  v10 = (std::locale::facet *)std::locale::use_facet(&v15, &std::ctype<char>::id);
  locale = v15.__locale_;
  if (v15.__locale_ != (std::locale::__imp *)&std::locale::__imp::classic_locale_imp_)
  {
    v12 = (unint64_t *)((char *)v15.__locale_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
      (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 16))(locale);
  }
  std::time_get<char,std::istreambuf_iterator<char>>::__get_year(a1, (_DWORD *)(a6 + 20), &v16, a3, a5, v10);
  return v16;
}

void sub_191FE6DF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  if (a9 != &std::locale::__imp::classic_locale_imp_)
    std::time_get<char,std::istreambuf_iterator<char>>::do_get_year((uint64_t)a9);
  _Unwind_Resume(exception_object);
}

uint64_t std::time_get<char,std::istreambuf_iterator<char>>::__get_year(uint64_t a1, _DWORD *a2, _QWORD **a3, _QWORD *a4, _DWORD *a5, _QWORD *a6)
{
  uint64_t result;
  int v9;
  int v10;

  result = std::__get_up_to_n_digits[abi:ne180100]<char,std::istreambuf_iterator<char>>(a3, a4, a5, a6, 4);
  if ((*(_BYTE *)a5 & 4) == 0)
  {
    v9 = result + 2000;
    v10 = result + 1900;
    if ((int)result >= 100)
      v10 = result;
    if ((int)result >= 69)
      v9 = v10;
    *a2 = v9 - 1900;
  }
  return result;
}

_QWORD *std::time_get<char,std::istreambuf_iterator<char>>::do_get(_QWORD *a1, uint64_t a2, _QWORD *a3, std::ios_base *this, int *a5, int *a6, int a7)
{
  std::locale::facet *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  int v17;
  _QWORD *v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  char *v25;
  int v26;
  uint64_t v27;
  int v28;
  int v30;
  int v31[2];
  _BYTE v32[11];
  char v33[5];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)v31 = a2;
  *a5 = 0;
  std::ios_base::getloc(this);
  v13 = (std::locale::facet *)std::locale::use_facet((const std::locale *)v32, &std::ctype<char>::id);
  v14 = *(_QWORD *)v32;
  if (*(_UNKNOWN **)v32 != &std::locale::__imp::classic_locale_imp_)
  {
    v15 = (unint64_t *)(*(_QWORD *)v32 + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
  }
  switch(a7)
  {
    case 'A':
    case 'a':
      std::time_get<char,std::istreambuf_iterator<char>>::__get_weekdayname((uint64_t)a1, a6 + 6, (_QWORD **)v31, a3, a5, (uint64_t)v13);
      return *(_QWORD **)v31;
    case 'B':
    case 'b':
    case 'h':
      std::time_get<char,std::istreambuf_iterator<char>>::__get_monthname((uint64_t)a1, a6 + 4, (_QWORD **)v31, a3, a5, (uint64_t)v13);
      return *(_QWORD **)v31;
    case 'C':
    case 'E':
    case 'G':
    case 'J':
    case 'K':
    case 'L':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'U':
    case 'V':
    case 'W':
    case 'Z':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '_':
    case 'f':
    case 'g':
    case 'i':
    case 'k':
    case 'l':
    case 'o':
    case 'q':
    case 's':
    case 'u':
    case 'v':
      goto LABEL_13;
    case 'D':
      *(_QWORD *)v32 = 0x79252F64252F6D25;
      v18 = std::time_get<char,std::istreambuf_iterator<char>>::get((uint64_t)a1, *(_QWORD **)v31, a3, this, a5, (uint64_t)a6, v32, &v32[8]);
      goto LABEL_49;
    case 'F':
      *(_QWORD *)v32 = 0x64252D6D252D5925;
      v18 = std::time_get<char,std::istreambuf_iterator<char>>::get((uint64_t)a1, *(_QWORD **)v31, a3, this, a5, (uint64_t)a6, v32, &v32[8]);
      goto LABEL_49;
    case 'H':
      v19 = std::__get_up_to_n_digits[abi:ne180100]<char,std::istreambuf_iterator<char>>((_QWORD **)v31, a3, a5, v13, 2);
      v17 = *a5;
      if ((*a5 & 4) != 0 || v19 > 23)
        goto LABEL_14;
      a6[2] = v19;
      return *(_QWORD **)v31;
    case 'I':
      std::time_get<char,std::istreambuf_iterator<char>>::__get_12_hour((uint64_t)a1, a6 + 2, (_QWORD **)v31, a3, a5, v13);
      return *(_QWORD **)v31;
    case 'M':
      v20 = std::__get_up_to_n_digits[abi:ne180100]<char,std::istreambuf_iterator<char>>((_QWORD **)v31, a3, a5, v13, 2);
      v17 = *a5;
      if ((*a5 & 4) != 0 || v20 > 59)
        goto LABEL_14;
      a6[1] = v20;
      return *(_QWORD **)v31;
    case 'R':
      qmemcpy(v32, "%H:%M", 5);
      v18 = std::time_get<char,std::istreambuf_iterator<char>>::get((uint64_t)a1, *(_QWORD **)v31, a3, this, a5, (uint64_t)a6, v32, &v32[5]);
      goto LABEL_49;
    case 'S':
      v21 = std::__get_up_to_n_digits[abi:ne180100]<char,std::istreambuf_iterator<char>>((_QWORD **)v31, a3, a5, v13, 2);
      v17 = *a5;
      if ((*a5 & 4) != 0 || v21 > 60)
        goto LABEL_14;
      *a6 = v21;
      return *(_QWORD **)v31;
    case 'T':
      *(_QWORD *)v32 = 0x53253A4D253A4825;
      v18 = std::time_get<char,std::istreambuf_iterator<char>>::get((uint64_t)a1, *(_QWORD **)v31, a3, this, a5, (uint64_t)a6, v32, &v32[8]);
      goto LABEL_49;
    case 'X':
      v22 = (*(uint64_t (**)(_QWORD *))(a1[2] + 48))(a1 + 2);
      v23 = *(_QWORD **)v31;
      v24 = *(unsigned __int8 *)(v22 + 23);
      if ((v24 & 0x80u) == 0)
        v25 = (char *)v22;
      else
        v25 = *(char **)v22;
      if ((v24 & 0x80u) != 0)
        v24 = *(_QWORD *)(v22 + 8);
      goto LABEL_34;
    case 'Y':
      v26 = std::__get_up_to_n_digits[abi:ne180100]<char,std::istreambuf_iterator<char>>((_QWORD **)v31, a3, a5, v13, 4);
      if ((*(_BYTE *)a5 & 4) == 0)
        a6[5] = v26 - 1900;
      return *(_QWORD **)v31;
    case 'c':
      v27 = (*(uint64_t (**)(_QWORD *))(a1[2] + 24))(a1 + 2);
      v23 = *(_QWORD **)v31;
      v24 = *(unsigned __int8 *)(v27 + 23);
      if ((v24 & 0x80u) == 0)
        v25 = (char *)v27;
      else
        v25 = *(char **)v27;
      if ((v24 & 0x80u) != 0)
        v24 = *(_QWORD *)(v27 + 8);
LABEL_34:
      v18 = std::time_get<char,std::istreambuf_iterator<char>>::get((uint64_t)a1, v23, a3, this, a5, (uint64_t)a6, v25, &v25[v24]);
      goto LABEL_49;
    case 'd':
    case 'e':
      std::time_get<char,std::istreambuf_iterator<char>>::__get_day((uint64_t)a1, a6 + 3, (_QWORD **)v31, a3, a5, v13);
      return *(_QWORD **)v31;
    case 'j':
      v28 = std::__get_up_to_n_digits[abi:ne180100]<char,std::istreambuf_iterator<char>>((_QWORD **)v31, a3, a5, v13, 3);
      v17 = *a5;
      if ((*a5 & 4) != 0 || v28 > 365)
        goto LABEL_14;
      a6[7] = v28;
      return *(_QWORD **)v31;
    case 'm':
      std::time_get<char,std::istreambuf_iterator<char>>::__get_month((uint64_t)a1, a6 + 4, (_QWORD **)v31, a3, a5, v13);
      return *(_QWORD **)v31;
    case 'n':
    case 't':
      std::time_get<char,std::istreambuf_iterator<char>>::__get_white_space((uint64_t)a1, (_QWORD **)v31, a3, a5, (uint64_t)v13);
      return *(_QWORD **)v31;
    case 'p':
      std::time_get<char,std::istreambuf_iterator<char>>::__get_am_pm((uint64_t)a1, a6 + 2, (_QWORD **)v31, a3, a5, (uint64_t)v13);
      return *(_QWORD **)v31;
    case 'r':
      qmemcpy(v32, "%I:%M:%S %p", sizeof(v32));
      v18 = std::time_get<char,std::istreambuf_iterator<char>>::get((uint64_t)a1, *(_QWORD **)v31, a3, this, a5, (uint64_t)a6, v32, v33);
LABEL_49:
      *(_QWORD *)v31 = v18;
      return *(_QWORD **)v31;
    case 'w':
      v30 = std::__get_up_to_n_digits[abi:ne180100]<char,std::istreambuf_iterator<char>>((_QWORD **)v31, a3, a5, v13, 1);
      v17 = *a5;
      if ((*a5 & 4) != 0 || v30 > 6)
        goto LABEL_14;
      a6[6] = v30;
      break;
    case 'x':
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD, _QWORD *, std::ios_base *, int *, int *))(*a1 + 40))(a1, *(_QWORD *)v31, a3, this, a5, a6);
    case 'y':
      std::time_get<char,std::istreambuf_iterator<char>>::__get_year((uint64_t)a1, a6 + 5, (_QWORD **)v31, a3, a5, v13);
      return *(_QWORD **)v31;
    default:
      if (a7 == 37)
      {
        std::time_get<char,std::istreambuf_iterator<char>>::__get_percent((uint64_t)a1, (_QWORD **)v31, a3, a5, (uint64_t)v13);
      }
      else
      {
LABEL_13:
        v17 = *a5;
LABEL_14:
        *a5 = v17 | 4;
      }
      break;
  }
  return *(_QWORD **)v31;
}

void sub_191FE73D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (a10 != &std::locale::__imp::classic_locale_imp_)
    std::time_get<char,std::istreambuf_iterator<char>>::do_get((uint64_t)a10);
  _Unwind_Resume(exception_object);
}

uint64_t std::time_get<char,std::istreambuf_iterator<char>>::__get_day(uint64_t a1, _DWORD *a2, _QWORD **a3, _QWORD *a4, _DWORD *a5, _QWORD *a6)
{
  uint64_t result;

  result = std::__get_up_to_n_digits[abi:ne180100]<char,std::istreambuf_iterator<char>>(a3, a4, a5, a6, 2);
  if ((*a5 & 4) != 0 || (int)result < 1 || (int)result > 31)
    *a5 |= 4u;
  else
    *a2 = result;
  return result;
}

uint64_t std::time_get<char,std::istreambuf_iterator<char>>::__get_hour(uint64_t a1, _DWORD *a2, _QWORD **a3, _QWORD *a4, _DWORD *a5, _QWORD *a6)
{
  uint64_t result;

  result = std::__get_up_to_n_digits[abi:ne180100]<char,std::istreambuf_iterator<char>>(a3, a4, a5, a6, 2);
  if ((*a5 & 4) != 0 || (int)result > 23)
    *a5 |= 4u;
  else
    *a2 = result;
  return result;
}

uint64_t std::time_get<char,std::istreambuf_iterator<char>>::__get_12_hour(uint64_t a1, _DWORD *a2, _QWORD **a3, _QWORD *a4, _DWORD *a5, _QWORD *a6)
{
  uint64_t result;

  result = std::__get_up_to_n_digits[abi:ne180100]<char,std::istreambuf_iterator<char>>(a3, a4, a5, a6, 2);
  if ((*a5 & 4) != 0 || (int)result < 1 || (int)result > 12)
    *a5 |= 4u;
  else
    *a2 = result;
  return result;
}

uint64_t std::time_get<char,std::istreambuf_iterator<char>>::__get_day_year_num(uint64_t a1, _DWORD *a2, _QWORD **a3, _QWORD *a4, _DWORD *a5, _QWORD *a6)
{
  uint64_t result;

  result = std::__get_up_to_n_digits[abi:ne180100]<char,std::istreambuf_iterator<char>>(a3, a4, a5, a6, 3);
  if ((*a5 & 4) != 0 || (int)result > 365)
    *a5 |= 4u;
  else
    *a2 = result;
  return result;
}

uint64_t std::time_get<char,std::istreambuf_iterator<char>>::__get_month(uint64_t a1, _DWORD *a2, _QWORD **a3, _QWORD *a4, _DWORD *a5, _QWORD *a6)
{
  uint64_t result;

  result = std::__get_up_to_n_digits[abi:ne180100]<char,std::istreambuf_iterator<char>>(a3, a4, a5, a6, 2);
  if ((*a5 & 4) != 0 || (int)result < 1 || (int)result > 12)
    *a5 |= 4u;
  else
    *a2 = result - 1;
  return result;
}

uint64_t std::time_get<char,std::istreambuf_iterator<char>>::__get_minute(uint64_t a1, _DWORD *a2, _QWORD **a3, _QWORD *a4, _DWORD *a5, _QWORD *a6)
{
  uint64_t result;

  result = std::__get_up_to_n_digits[abi:ne180100]<char,std::istreambuf_iterator<char>>(a3, a4, a5, a6, 2);
  if ((*a5 & 4) != 0 || (int)result > 59)
    *a5 |= 4u;
  else
    *a2 = result;
  return result;
}

uint64_t std::time_get<char,std::istreambuf_iterator<char>>::__get_white_space(uint64_t a1, _QWORD **a2, _QWORD *a3, _DWORD *a4, uint64_t a5)
{
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned __int8 v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t result;
  _QWORD *v14;

  v14 = a3;
  if ((std::istreambuf_iterator<char>::equal[abi:ne180100](a2, &v14) & 1) == 0)
  {
    do
    {
      v8 = (unsigned __int8 *)(*a2)[3];
      if (v8 == (unsigned __int8 *)(*a2)[4])
      {
        v10 = (*(uint64_t (**)(_QWORD))(**a2 + 72))(*a2);
        v9 = v10;
        if ((v10 & 0x80) != 0)
          break;
      }
      else
      {
        v9 = *v8;
        if ((v9 & 0x80) != 0)
          break;
      }
      if ((*(_DWORD *)(*(_QWORD *)(a5 + 16) + 4 * v9) & 0x4000) == 0)
        break;
      v11 = *a2;
      v12 = (*a2)[3];
      if (v12 == (*a2)[4])
        (*(void (**)(_QWORD *))(*v11 + 80))(v11);
      else
        v11[3] = v12 + 1;
    }
    while (!std::istreambuf_iterator<char>::equal[abi:ne180100](a2, &v14));
  }
  result = std::istreambuf_iterator<char>::equal[abi:ne180100](a2, &v14);
  if ((_DWORD)result)
    *a4 |= 2u;
  return result;
}

uint64_t *std::time_get<char,std::istreambuf_iterator<char>>::__get_am_pm(uint64_t a1, int *a2, _QWORD **a3, _QWORD *a4, _DWORD *a5, uint64_t a6)
{
  uint64_t *result;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 16))(a1 + 16);
  v12 = result;
  if (*((char *)result + 23) < 0)
    v13 = result[1];
  else
    v13 = *((unsigned __int8 *)result + 23);
  if (*((char *)result + 47) < 0)
    v14 = result[4];
  else
    v14 = *((unsigned __int8 *)result + 47);
  if (v13 + v14)
  {
    result = std::__scan_keyword[abi:ne180100]<std::istreambuf_iterator<char>,std::string const*,std::ctype<char>>(a3, a4, result, result + 6, a6, a5, 0);
    v15 = *a2;
    if (result == v12 && v15 == 12)
    {
      *a2 = 0;
    }
    else if ((char *)result - (char *)v12 == 24 && v15 <= 11)
    {
      *a2 = v15 + 12;
    }
  }
  else
  {
    *a5 |= 4u;
  }
  return result;
}

uint64_t std::time_get<char,std::istreambuf_iterator<char>>::__get_second(uint64_t a1, _DWORD *a2, _QWORD **a3, _QWORD *a4, _DWORD *a5, _QWORD *a6)
{
  uint64_t result;

  result = std::__get_up_to_n_digits[abi:ne180100]<char,std::istreambuf_iterator<char>>(a3, a4, a5, a6, 2);
  if ((*a5 & 4) != 0 || (int)result > 60)
    *a5 |= 4u;
  else
    *a2 = result;
  return result;
}

uint64_t std::time_get<char,std::istreambuf_iterator<char>>::__get_weekday(uint64_t a1, _DWORD *a2, _QWORD **a3, _QWORD *a4, _DWORD *a5, _QWORD *a6)
{
  uint64_t result;

  result = std::__get_up_to_n_digits[abi:ne180100]<char,std::istreambuf_iterator<char>>(a3, a4, a5, a6, 1);
  if ((*a5 & 4) != 0 || (int)result > 6)
    *a5 |= 4u;
  else
    *a2 = result;
  return result;
}

uint64_t std::time_get<char,std::istreambuf_iterator<char>>::__get_year4(uint64_t a1, _DWORD *a2, _QWORD **a3, _QWORD *a4, _DWORD *a5, _QWORD *a6)
{
  uint64_t result;

  result = std::__get_up_to_n_digits[abi:ne180100]<char,std::istreambuf_iterator<char>>(a3, a4, a5, a6, 4);
  if ((*(_BYTE *)a5 & 4) == 0)
    *a2 = result - 1900;
  return result;
}

uint64_t std::time_get<char,std::istreambuf_iterator<char>>::__get_percent(uint64_t a1, _QWORD **a2, _QWORD *a3, _DWORD *a4, uint64_t a5)
{
  uint64_t result;
  int v9;
  char *v10;
  char v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;

  v14 = a3;
  result = std::istreambuf_iterator<char>::equal[abi:ne180100](a2, &v14);
  if ((result & 1) != 0)
  {
    v9 = 6;
LABEL_13:
    *a4 |= v9;
    return result;
  }
  v10 = (char *)(*a2)[3];
  if (v10 == (char *)(*a2)[4])
    v11 = (*(uint64_t (**)(_QWORD))(**a2 + 72))(*a2);
  else
    v11 = *v10;
  result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a5 + 72))(a5, v11, 0);
  if ((_DWORD)result != 37)
  {
    v9 = 4;
    goto LABEL_13;
  }
  v12 = *a2;
  v13 = (*a2)[3];
  if (v13 == (*a2)[4])
    (*(void (**)(_QWORD *))(*v12 + 80))(v12);
  else
    v12[3] = v13 + 1;
  result = std::istreambuf_iterator<char>::equal[abi:ne180100](a2, &v14);
  if ((_DWORD)result)
  {
    v9 = 2;
    goto LABEL_13;
  }
  return result;
}

uint64_t std::__get_up_to_n_digits[abi:ne180100]<char,std::istreambuf_iterator<char>>(_QWORD **a1, _QWORD *a2, _DWORD *a3, _QWORD *a4, int a5)
{
  uint64_t v9;
  int v10;
  unsigned __int8 *v11;
  unsigned __int8 v12;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unsigned __int8 v18;
  int v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v23;

  v23 = a2;
  if ((std::istreambuf_iterator<char>::equal[abi:ne180100](a1, &v23) & 1) != 0)
  {
    v9 = 0;
    v10 = 6;
LABEL_9:
    *a3 |= v10;
    return v9;
  }
  v11 = (unsigned __int8 *)(*a1)[3];
  if (v11 == (unsigned __int8 *)(*a1)[4])
  {
    v12 = (*(uint64_t (**)(_QWORD))(**a1 + 72))(*a1);
    if ((v12 & 0x80) != 0)
    {
LABEL_8:
      v9 = 0;
      v10 = 4;
      goto LABEL_9;
    }
  }
  else
  {
    v12 = *v11;
    if ((*v11 & 0x80) != 0)
      goto LABEL_8;
  }
  if ((*(_DWORD *)(a4[2] + 4 * v12) & 0x400) == 0)
    goto LABEL_8;
  v14 = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*a4 + 72))(a4, (char)v12, 0);
  v15 = *a1;
  v16 = (*a1)[3];
  if (v16 == (*a1)[4])
    (*(void (**)(_QWORD *))(*v15 + 80))(v15);
  else
    v15[3] = v16 + 1;
  v9 = (v14 - 48);
  if ((std::istreambuf_iterator<char>::equal[abi:ne180100](a1, &v23) & 1) != 0 || a5 < 2)
  {
LABEL_26:
    if (!std::istreambuf_iterator<char>::equal[abi:ne180100](a1, &v23))
      return v9;
    v10 = 2;
    goto LABEL_9;
  }
  while (1)
  {
    v17 = (unsigned __int8 *)(*a1)[3];
    if (v17 == (unsigned __int8 *)(*a1)[4])
    {
      v18 = (*(uint64_t (**)(_QWORD))(**a1 + 72))(*a1);
      if ((v18 & 0x80) != 0)
        return v9;
    }
    else
    {
      v18 = *v17;
      if ((*v17 & 0x80) != 0)
        return v9;
    }
    if ((*(_DWORD *)(a4[2] + 4 * v18) & 0x400) == 0)
      return v9;
    v19 = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*a4 + 72))(a4, (char)v18, 0);
    v20 = *a1;
    v21 = (*a1)[3];
    if (v21 == (*a1)[4])
      (*(void (**)(_QWORD *))(*v20 + 80))(v20);
    else
      v20[3] = v21 + 1;
    v9 = (v19 + 10 * v9 - 48);
    if ((std::istreambuf_iterator<char>::equal[abi:ne180100](a1, &v23) & 1) == 0 && a5-- > 2)
      continue;
    goto LABEL_26;
  }
}

_QWORD *std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::get(uint64_t a1, _QWORD *a2, _QWORD *a3, std::ios_base *this, _DWORD *a5, uint64_t a6, unsigned int *a7, unsigned int *a8)
{
  const std::locale::facet *v16;
  std::locale::__imp *locale;
  unint64_t *v18;
  unint64_t v19;
  int *v20;
  int v21;
  _BOOL4 v22;
  int *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  uint64_t v33;
  int *v34;
  int v35;
  _BOOL4 v36;
  int *v37;
  int v38;
  unsigned int *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int *v44;
  int v45;
  _BOOL4 v46;
  int *v47;
  int v48;
  std::locale v50;

  std::ios_base::getloc(this);
  v16 = std::locale::use_facet(&v50, &std::ctype<wchar_t>::id);
  locale = v50.__locale_;
  if (v50.__locale_ != (std::locale::__imp *)&std::locale::__imp::classic_locale_imp_)
  {
    v18 = (unint64_t *)((char *)v50.__locale_ + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
      (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 16))(locale);
  }
  *a5 = 0;
  if (a7 != a8)
  {
    do
    {
      if (a2)
      {
        v20 = (int *)a2[3];
        if (v20 == (int *)a2[4])
          v21 = (*(uint64_t (**)(_QWORD *))(*a2 + 72))(a2);
        else
          v21 = *v20;
        v22 = v21 == -1;
        if (v21 == -1)
          a2 = 0;
        if (!a3)
        {
LABEL_11:
          if (v22)
            goto LABEL_72;
          goto LABEL_23;
        }
      }
      else
      {
        v22 = 1;
        if (!a3)
          goto LABEL_11;
      }
      v23 = (int *)a3[3];
      if (v23 == (int *)a3[4])
        v24 = (*(uint64_t (**)(_QWORD *))(*a3 + 72))(a3);
      else
        v24 = *v23;
      if (v24 == -1)
        a3 = 0;
      if (((v22 ^ (v24 == -1)) & 1) == 0)
      {
LABEL_72:
        *a5 = 4;
        break;
      }
LABEL_23:
      if (((unsigned int (*)(const std::locale::facet *, _QWORD, _QWORD))v16->__vftable[4].~facet_0)(v16, *a7, 0) == 37)
      {
        if (a7 + 1 == a8)
          goto LABEL_72;
        v25 = ((uint64_t (*)(const std::locale::facet *, _QWORD, _QWORD))v16->__vftable[4].~facet_0)(v16, a7[1], 0);
        v26 = v25;
        if ((_DWORD)v25 == 69 || v25 == 48)
        {
          if (a7 + 2 == a8)
            goto LABEL_72;
          v27 = ((uint64_t (*)(const std::locale::facet *, _QWORD, _QWORD))v16->__vftable[4].~facet_0)(v16, a7[2], 0);
          v28 = v26;
          v26 = v27;
          v29 = 2;
        }
        else
        {
          v28 = 0;
          v29 = 1;
        }
        a7 += v29;
        a2 = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, std::ios_base *, _DWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, a3, this, a5, a6, v26, v28);
        goto LABEL_38;
      }
      if (((unsigned int (*)(const std::locale::facet *, uint64_t, _QWORD))v16->__vftable[1].~facet)(v16, 0x4000, *a7))
      {
        v30 = a7 + 1;
        while (v30 != a8)
        {
          v31 = *v30++;
          if ((((uint64_t (*)(const std::locale::facet *, uint64_t, _QWORD))v16->__vftable[1].~facet)(v16, 0x4000, v31) & 1) == 0)
          {
            a7 = v30 - 1;
            goto LABEL_43;
          }
        }
        a7 = a8;
        while (1)
        {
LABEL_43:
          if (a2)
          {
            v34 = (int *)a2[3];
            if (v34 == (int *)a2[4])
              v35 = (*(uint64_t (**)(_QWORD *))(*a2 + 72))(a2);
            else
              v35 = *v34;
            v36 = v35 == -1;
            if (v35 == -1)
              a2 = 0;
            if (!a3)
            {
LABEL_47:
              if (v36)
                goto LABEL_39;
              goto LABEL_59;
            }
          }
          else
          {
            v36 = 1;
            if (!a3)
              goto LABEL_47;
          }
          v37 = (int *)a3[3];
          if (v37 == (int *)a3[4])
            v38 = (*(uint64_t (**)(_QWORD *))(*a3 + 72))(a3);
          else
            v38 = *v37;
          if (v38 == -1)
            a3 = 0;
          if (v36 == (v38 == -1))
            goto LABEL_39;
LABEL_59:
          v39 = (unsigned int *)a2[3];
          if (v39 == (unsigned int *)a2[4])
            v40 = (*(uint64_t (**)(_QWORD *))(*a2 + 72))(a2);
          else
            v40 = *v39;
          if (!((unsigned int (*)(const std::locale::facet *, uint64_t, uint64_t))v16->__vftable[1].~facet)(v16, 0x4000, v40))goto LABEL_39;
          v41 = a2[3];
          if (v41 == a2[4])
            (*(void (**)(_QWORD *))(*a2 + 80))(a2);
          else
            a2[3] = v41 + 4;
        }
      }
      v32 = (unsigned int *)a2[3];
      if (v32 == (unsigned int *)a2[4])
        v33 = (*(uint64_t (**)(_QWORD *))(*a2 + 72))(a2);
      else
        v33 = *v32;
      v42 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, v33);
      if (v42 == ((unsigned int (*)(const std::locale::facet *, _QWORD))v16->__vftable[2].~facet_0)(v16, *a7))
      {
        v43 = a2[3];
        if (v43 == a2[4])
          (*(void (**)(_QWORD *))(*a2 + 80))(a2);
        else
          a2[3] = v43 + 4;
LABEL_38:
        ++a7;
        continue;
      }
      *a5 = 4;
LABEL_39:
      ;
    }
    while (a7 != a8 && !*a5);
  }
  if (!a2)
  {
    v46 = 1;
    if (a3)
      goto LABEL_83;
LABEL_77:
    if (!v46)
      return a2;
    goto LABEL_87;
  }
  v44 = (int *)a2[3];
  if (v44 == (int *)a2[4])
    v45 = (*(uint64_t (**)(_QWORD *))(*a2 + 72))(a2);
  else
    v45 = *v44;
  v46 = v45 == -1;
  if (v45 == -1)
    a2 = 0;
  if (!a3)
    goto LABEL_77;
LABEL_83:
  v47 = (int *)a3[3];
  if (v47 == (int *)a3[4])
    v48 = (*(uint64_t (**)(_QWORD *))(*a3 + 72))(a3);
  else
    v48 = *v47;
  if (((v46 ^ (v48 == -1)) & 1) == 0)
LABEL_87:
    *a5 |= 2u;
  return a2;
}

void sub_191FE8014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (a10 != &std::locale::__imp::classic_locale_imp_)
    std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::get((uint64_t)a10);
  _Unwind_Resume(exception_object);
}

uint64_t std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::do_date_order()
{
  return 2;
}

_QWORD *std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::do_get_time(uint64_t a1, _QWORD *a2, _QWORD *a3, std::ios_base *a4, _DWORD *a5, uint64_t a6)
{
  _OWORD v7[2];
  unsigned int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v7[0] = xmmword_19202605C;
  v7[1] = unk_19202606C;
  return std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::get(a1, a2, a3, a4, a5, a6, (unsigned int *)v7, &v8);
}

_QWORD *std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::do_get_date(uint64_t a1, _QWORD *a2, _QWORD *a3, std::ios_base *a4, _DWORD *a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;

  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 40))(a1 + 16);
  v13 = *(unsigned __int8 *)(v12 + 23);
  if ((v13 & 0x80u) == 0)
    v14 = (unsigned int *)v12;
  else
    v14 = *(unsigned int **)v12;
  if ((v13 & 0x80u) != 0)
    v13 = *(_QWORD *)(v12 + 8);
  return std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::get(a1, a2, a3, a4, a5, a6, v14, &v14[v13]);
}

_QWORD *std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::do_get_weekday(uint64_t a1, _QWORD *a2, _QWORD *a3, std::ios_base *this, _DWORD *a5, uint64_t a6)
{
  const std::locale::facet *v10;
  std::locale::__imp *locale;
  unint64_t *v12;
  unint64_t v13;
  std::locale v15;
  _QWORD *v16;

  v16 = a2;
  std::ios_base::getloc(this);
  v10 = std::locale::use_facet(&v15, &std::ctype<wchar_t>::id);
  locale = v15.__locale_;
  if (v15.__locale_ != (std::locale::__imp *)&std::locale::__imp::classic_locale_imp_)
  {
    v12 = (unint64_t *)((char *)v15.__locale_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
      (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 16))(locale);
  }
  std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::__get_weekdayname(a1, (int *)(a6 + 24), &v16, a3, a5, (uint64_t)v10);
  return v16;
}

void sub_191FE81E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  if (a9 != &std::locale::__imp::classic_locale_imp_)
    std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::do_get_weekday((uint64_t)a9);
  _Unwind_Resume(exception_object);
}

uint64_t *std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::__get_weekdayname(uint64_t a1, int *a2, _QWORD **a3, _QWORD *a4, _DWORD *a5, uint64_t a6)
{
  uint64_t *v11;
  uint64_t *result;

  v11 = (uint64_t *)(**(uint64_t (***)(uint64_t))(a1 + 16))(a1 + 16);
  result = std::__scan_keyword[abi:ne180100]<std::istreambuf_iterator<wchar_t>,std::wstring const*,std::ctype<wchar_t>>(a3, a4, v11, v11 + 42, a6, a5, 0);
  if ((char *)result - (char *)v11 <= 335)
    *a2 = (int)(-1431655765 * (result - v11)) % 7;
  return result;
}

_QWORD *std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::do_get_monthname(uint64_t a1, _QWORD *a2, _QWORD *a3, std::ios_base *this, _DWORD *a5, uint64_t a6)
{
  const std::locale::facet *v10;
  std::locale::__imp *locale;
  unint64_t *v12;
  unint64_t v13;
  std::locale v15;
  _QWORD *v16;

  v16 = a2;
  std::ios_base::getloc(this);
  v10 = std::locale::use_facet(&v15, &std::ctype<wchar_t>::id);
  locale = v15.__locale_;
  if (v15.__locale_ != (std::locale::__imp *)&std::locale::__imp::classic_locale_imp_)
  {
    v12 = (unint64_t *)((char *)v15.__locale_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
      (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 16))(locale);
  }
  std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::__get_monthname(a1, (int *)(a6 + 16), &v16, a3, a5, (uint64_t)v10);
  return v16;
}

void sub_191FE8374(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  if (a9 != &std::locale::__imp::classic_locale_imp_)
    std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::do_get_monthname((uint64_t)a9);
  _Unwind_Resume(exception_object);
}

uint64_t *std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::__get_monthname(uint64_t a1, int *a2, _QWORD **a3, _QWORD *a4, _DWORD *a5, uint64_t a6)
{
  uint64_t *v11;
  uint64_t *result;

  v11 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 8))(a1 + 16);
  result = std::__scan_keyword[abi:ne180100]<std::istreambuf_iterator<wchar_t>,std::wstring const*,std::ctype<wchar_t>>(a3, a4, v11, v11 + 72, a6, a5, 0);
  if ((char *)result - (char *)v11 <= 575)
    *a2 = (int)(-1431655765 * (result - v11)) % 12;
  return result;
}

_QWORD *std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::do_get_year(uint64_t a1, _QWORD *a2, _QWORD *a3, std::ios_base *this, _DWORD *a5, uint64_t a6)
{
  const std::locale::facet *v10;
  std::locale::__imp *locale;
  unint64_t *v12;
  unint64_t v13;
  std::locale v15;
  _QWORD *v16;

  v16 = a2;
  std::ios_base::getloc(this);
  v10 = std::locale::use_facet(&v15, &std::ctype<wchar_t>::id);
  locale = v15.__locale_;
  if (v15.__locale_ != (std::locale::__imp *)&std::locale::__imp::classic_locale_imp_)
  {
    v12 = (unint64_t *)((char *)v15.__locale_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
      (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 16))(locale);
  }
  std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::__get_year(a1, (_DWORD *)(a6 + 20), &v16, a3, a5, (uint64_t)v10);
  return v16;
}

void sub_191FE8504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  if (a9 != &std::locale::__imp::classic_locale_imp_)
    std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::do_get_year((uint64_t)a9);
  _Unwind_Resume(exception_object);
}

uint64_t std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::__get_year(uint64_t a1, _DWORD *a2, _QWORD **a3, _QWORD *a4, _DWORD *a5, uint64_t a6)
{
  uint64_t result;
  int v9;
  int v10;

  result = std::__get_up_to_n_digits[abi:ne180100]<wchar_t,std::istreambuf_iterator<wchar_t>>(a3, a4, a5, a6, 4);
  if ((*(_BYTE *)a5 & 4) == 0)
  {
    v9 = result + 2000;
    v10 = result + 1900;
    if ((int)result >= 100)
      v10 = result;
    if ((int)result >= 69)
      v9 = v10;
    *a2 = v9 - 1900;
  }
  return result;
}

_QWORD *std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::do_get(_QWORD *a1, uint64_t a2, _QWORD *a3, std::ios_base *this, int *a5, int *a6, int a7)
{
  const std::locale::facet *v13;
  std::locale::__imp *locale;
  unint64_t *v15;
  unint64_t v16;
  int v17;
  _QWORD *v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned int *v25;
  int v26;
  uint64_t v27;
  int v28;
  int v30;
  int v31[2];
  std::locale v32[2];
  _BYTE v33[28];
  unsigned int v34[3];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)v31 = a2;
  *a5 = 0;
  std::ios_base::getloc(this);
  v13 = std::locale::use_facet(v32, &std::ctype<wchar_t>::id);
  locale = v32[0].__locale_;
  if (v32[0].__locale_ != (std::locale::__imp *)&std::locale::__imp::classic_locale_imp_)
  {
    v15 = (unint64_t *)((char *)v32[0].__locale_ + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
      (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 16))(locale);
  }
  switch(a7)
  {
    case 'A':
    case 'a':
      std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::__get_weekdayname((uint64_t)a1, a6 + 6, (_QWORD **)v31, a3, a5, (uint64_t)v13);
      return *(_QWORD **)v31;
    case 'B':
    case 'b':
    case 'h':
      std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::__get_monthname((uint64_t)a1, a6 + 4, (_QWORD **)v31, a3, a5, (uint64_t)v13);
      return *(_QWORD **)v31;
    case 'C':
    case 'E':
    case 'G':
    case 'J':
    case 'K':
    case 'L':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'U':
    case 'V':
    case 'W':
    case 'Z':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '_':
    case 'f':
    case 'g':
    case 'i':
    case 'k':
    case 'l':
    case 'o':
    case 'q':
    case 's':
    case 'u':
    case 'v':
      goto LABEL_13;
    case 'D':
      *(_OWORD *)&v32[0].__locale_ = *(_OWORD *)"%";
      *(_OWORD *)v33 = *(_OWORD *)"d";
      v18 = std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::get((uint64_t)a1, *(_QWORD **)v31, a3, this, a5, (uint64_t)a6, (unsigned int *)v32, (unsigned int *)&v33[16]);
      goto LABEL_49;
    case 'F':
      *(_OWORD *)&v32[0].__locale_ = xmmword_192025FFC;
      *(_OWORD *)v33 = unk_19202600C;
      v18 = std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::get((uint64_t)a1, *(_QWORD **)v31, a3, this, a5, (uint64_t)a6, (unsigned int *)v32, (unsigned int *)&v33[16]);
      goto LABEL_49;
    case 'H':
      v19 = std::__get_up_to_n_digits[abi:ne180100]<wchar_t,std::istreambuf_iterator<wchar_t>>((_QWORD **)v31, a3, a5, (uint64_t)v13, 2);
      v17 = *a5;
      if ((*a5 & 4) != 0 || v19 > 23)
        goto LABEL_14;
      a6[2] = v19;
      return *(_QWORD **)v31;
    case 'I':
      std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::__get_12_hour((uint64_t)a1, a6 + 2, (_QWORD **)v31, a3, a5, (uint64_t)v13);
      return *(_QWORD **)v31;
    case 'M':
      v20 = std::__get_up_to_n_digits[abi:ne180100]<wchar_t,std::istreambuf_iterator<wchar_t>>((_QWORD **)v31, a3, a5, (uint64_t)v13, 2);
      v17 = *a5;
      if ((*a5 & 4) != 0 || v20 > 59)
        goto LABEL_14;
      a6[1] = v20;
      return *(_QWORD **)v31;
    case 'R':
      *(_DWORD *)v33 = 77;
      *(_OWORD *)&v32[0].__locale_ = xmmword_192026048;
      v18 = std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::get((uint64_t)a1, *(_QWORD **)v31, a3, this, a5, (uint64_t)a6, (unsigned int *)v32, (unsigned int *)&v33[4]);
      goto LABEL_49;
    case 'S':
      v21 = std::__get_up_to_n_digits[abi:ne180100]<wchar_t,std::istreambuf_iterator<wchar_t>>((_QWORD **)v31, a3, a5, (uint64_t)v13, 2);
      v17 = *a5;
      if ((*a5 & 4) != 0 || v21 > 60)
        goto LABEL_14;
      *a6 = v21;
      return *(_QWORD **)v31;
    case 'T':
      *(_OWORD *)&v32[0].__locale_ = xmmword_19202605C;
      *(_OWORD *)v33 = unk_19202606C;
      v18 = std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::get((uint64_t)a1, *(_QWORD **)v31, a3, this, a5, (uint64_t)a6, (unsigned int *)v32, (unsigned int *)&v33[16]);
      goto LABEL_49;
    case 'X':
      v22 = (*(uint64_t (**)(_QWORD *))(a1[2] + 48))(a1 + 2);
      v23 = *(_QWORD **)v31;
      v24 = *(unsigned __int8 *)(v22 + 23);
      if ((v24 & 0x80u) == 0)
        v25 = (unsigned int *)v22;
      else
        v25 = *(unsigned int **)v22;
      if ((v24 & 0x80u) != 0)
        v24 = *(_QWORD *)(v22 + 8);
      goto LABEL_34;
    case 'Y':
      v26 = std::__get_up_to_n_digits[abi:ne180100]<wchar_t,std::istreambuf_iterator<wchar_t>>((_QWORD **)v31, a3, a5, (uint64_t)v13, 4);
      if ((*(_BYTE *)a5 & 4) == 0)
        a6[5] = v26 - 1900;
      return *(_QWORD **)v31;
    case 'c':
      v27 = (*(uint64_t (**)(_QWORD *))(a1[2] + 24))(a1 + 2);
      v23 = *(_QWORD **)v31;
      v24 = *(unsigned __int8 *)(v27 + 23);
      if ((v24 & 0x80u) == 0)
        v25 = (unsigned int *)v27;
      else
        v25 = *(unsigned int **)v27;
      if ((v24 & 0x80u) != 0)
        v24 = *(_QWORD *)(v27 + 8);
LABEL_34:
      v18 = std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::get((uint64_t)a1, v23, a3, this, a5, (uint64_t)a6, v25, &v25[v24]);
      goto LABEL_49;
    case 'd':
    case 'e':
      std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::__get_day((uint64_t)a1, a6 + 3, (_QWORD **)v31, a3, a5, (uint64_t)v13);
      return *(_QWORD **)v31;
    case 'j':
      v28 = std::__get_up_to_n_digits[abi:ne180100]<wchar_t,std::istreambuf_iterator<wchar_t>>((_QWORD **)v31, a3, a5, (uint64_t)v13, 3);
      v17 = *a5;
      if ((*a5 & 4) != 0 || v28 > 365)
        goto LABEL_14;
      a6[7] = v28;
      return *(_QWORD **)v31;
    case 'm':
      std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::__get_month((uint64_t)a1, a6 + 4, (_QWORD **)v31, a3, a5, (uint64_t)v13);
      return *(_QWORD **)v31;
    case 'n':
    case 't':
      std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::__get_white_space((uint64_t)a1, (_QWORD **)v31, a3, a5, (uint64_t)v13);
      return *(_QWORD **)v31;
    case 'p':
      std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::__get_am_pm((uint64_t)a1, a6 + 2, (_QWORD **)v31, a3, a5, (uint64_t)v13);
      return *(_QWORD **)v31;
    case 'r':
      *(_OWORD *)&v32[0].__locale_ = xmmword_19202601C;
      *(_OWORD *)v33 = unk_19202602C;
      *(_OWORD *)&v33[12] = unk_192026038;
      v18 = std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::get((uint64_t)a1, *(_QWORD **)v31, a3, this, a5, (uint64_t)a6, (unsigned int *)v32, v34);
LABEL_49:
      *(_QWORD *)v31 = v18;
      return *(_QWORD **)v31;
    case 'w':
      v30 = std::__get_up_to_n_digits[abi:ne180100]<wchar_t,std::istreambuf_iterator<wchar_t>>((_QWORD **)v31, a3, a5, (uint64_t)v13, 1);
      v17 = *a5;
      if ((*a5 & 4) != 0 || v30 > 6)
        goto LABEL_14;
      a6[6] = v30;
      break;
    case 'x':
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD, _QWORD *, std::ios_base *, int *, int *))(*a1 + 40))(a1, *(_QWORD *)v31, a3, this, a5, a6);
    case 'y':
      std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::__get_year((uint64_t)a1, a6 + 5, (_QWORD **)v31, a3, a5, (uint64_t)v13);
      return *(_QWORD **)v31;
    default:
      if (a7 == 37)
      {
        std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::__get_percent((uint64_t)a1, (_QWORD **)v31, a3, a5, (uint64_t)v13);
      }
      else
      {
LABEL_13:
        v17 = *a5;
LABEL_14:
        *a5 = v17 | 4;
      }
      break;
  }
  return *(_QWORD **)v31;
}

void sub_191FE8AD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
  if (a11 != &std::locale::__imp::classic_locale_imp_)
    std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::do_get((uint64_t)a11);
  _Unwind_Resume(exception_object);
}

uint64_t std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::__get_day(uint64_t a1, _DWORD *a2, _QWORD **a3, _QWORD *a4, _DWORD *a5, uint64_t a6)
{
  uint64_t result;

  result = std::__get_up_to_n_digits[abi:ne180100]<wchar_t,std::istreambuf_iterator<wchar_t>>(a3, a4, a5, a6, 2);
  if ((*a5 & 4) != 0 || (int)result < 1 || (int)result > 31)
    *a5 |= 4u;
  else
    *a2 = result;
  return result;
}

uint64_t std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::__get_hour(uint64_t a1, _DWORD *a2, _QWORD **a3, _QWORD *a4, _DWORD *a5, uint64_t a6)
{
  uint64_t result;

  result = std::__get_up_to_n_digits[abi:ne180100]<wchar_t,std::istreambuf_iterator<wchar_t>>(a3, a4, a5, a6, 2);
  if ((*a5 & 4) != 0 || (int)result > 23)
    *a5 |= 4u;
  else
    *a2 = result;
  return result;
}

uint64_t std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::__get_12_hour(uint64_t a1, _DWORD *a2, _QWORD **a3, _QWORD *a4, _DWORD *a5, uint64_t a6)
{
  uint64_t result;

  result = std::__get_up_to_n_digits[abi:ne180100]<wchar_t,std::istreambuf_iterator<wchar_t>>(a3, a4, a5, a6, 2);
  if ((*a5 & 4) != 0 || (int)result < 1 || (int)result > 12)
    *a5 |= 4u;
  else
    *a2 = result;
  return result;
}

uint64_t std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::__get_day_year_num(uint64_t a1, _DWORD *a2, _QWORD **a3, _QWORD *a4, _DWORD *a5, uint64_t a6)
{
  uint64_t result;

  result = std::__get_up_to_n_digits[abi:ne180100]<wchar_t,std::istreambuf_iterator<wchar_t>>(a3, a4, a5, a6, 3);
  if ((*a5 & 4) != 0 || (int)result > 365)
    *a5 |= 4u;
  else
    *a2 = result;
  return result;
}

uint64_t std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::__get_month(uint64_t a1, _DWORD *a2, _QWORD **a3, _QWORD *a4, _DWORD *a5, uint64_t a6)
{
  uint64_t result;

  result = std::__get_up_to_n_digits[abi:ne180100]<wchar_t,std::istreambuf_iterator<wchar_t>>(a3, a4, a5, a6, 2);
  if ((*a5 & 4) != 0 || (int)result < 1 || (int)result > 12)
    *a5 |= 4u;
  else
    *a2 = result - 1;
  return result;
}

uint64_t std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::__get_minute(uint64_t a1, _DWORD *a2, _QWORD **a3, _QWORD *a4, _DWORD *a5, uint64_t a6)
{
  uint64_t result;

  result = std::__get_up_to_n_digits[abi:ne180100]<wchar_t,std::istreambuf_iterator<wchar_t>>(a3, a4, a5, a6, 2);
  if ((*a5 & 4) != 0 || (int)result > 59)
    *a5 |= 4u;
  else
    *a2 = result;
  return result;
}

uint64_t std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::__get_white_space(uint64_t a1, _QWORD **a2, _QWORD *a3, _DWORD *a4, uint64_t a5)
{
  _BOOL4 v9;
  _BOOL4 v10;
  int *v11;
  int v12;
  unsigned int *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t result;
  unsigned int *v18;

  while (1)
  {
    v9 = std::istreambuf_iterator<wchar_t>::__test_for_eof[abi:ne180100](a2);
    v10 = v9;
    if (!a3)
    {
      if (!v9)
      {
        a3 = 0;
        goto LABEL_10;
      }
      result = std::istreambuf_iterator<wchar_t>::__test_for_eof[abi:ne180100](a2);
      LOBYTE(a2) = result;
LABEL_21:
      if ((a2 & 1) == 0)
        return result;
      goto LABEL_25;
    }
    v11 = (int *)a3[3];
    if (v11 == (int *)a3[4])
      v12 = (*(uint64_t (**)(_QWORD *))(*a3 + 72))(a3);
    else
      v12 = *v11;
    if (v12 == -1)
      a3 = 0;
    if (v10 == (v12 == -1))
      break;
LABEL_10:
    v13 = (unsigned int *)(*a2)[3];
    if (v13 == (unsigned int *)(*a2)[4])
      v14 = (*(uint64_t (**)(_QWORD))(**a2 + 72))(*a2);
    else
      v14 = *v13;
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a5 + 24))(a5, 0x4000, v14))
      break;
    v15 = *a2;
    v16 = (*a2)[3];
    if (v16 == (*a2)[4])
      (*(void (**)(_QWORD *))(*v15 + 80))(v15);
    else
      v15[3] = v16 + 4;
  }
  result = std::istreambuf_iterator<wchar_t>::__test_for_eof[abi:ne180100](a2);
  LODWORD(a2) = result;
  if (!a3)
    goto LABEL_21;
  v18 = (unsigned int *)a3[3];
  if (v18 == (unsigned int *)a3[4])
    result = (*(uint64_t (**)(_QWORD *))(*a3 + 72))(a3);
  else
    result = *v18;
  if (((a2 ^ ((_DWORD)result == -1)) & 1) == 0)
LABEL_25:
    *a4 |= 2u;
  return result;
}

uint64_t *std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::__get_am_pm(uint64_t a1, int *a2, _QWORD **a3, _QWORD *a4, _DWORD *a5, uint64_t a6)
{
  uint64_t *result;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 16))(a1 + 16);
  v12 = result;
  if (*((char *)result + 23) < 0)
    v13 = result[1];
  else
    v13 = *((unsigned __int8 *)result + 23);
  if (*((char *)result + 47) < 0)
    v14 = result[4];
  else
    v14 = *((unsigned __int8 *)result + 47);
  if (v13 + v14)
  {
    result = std::__scan_keyword[abi:ne180100]<std::istreambuf_iterator<wchar_t>,std::wstring const*,std::ctype<wchar_t>>(a3, a4, result, result + 6, a6, a5, 0);
    v15 = *a2;
    if (result == v12 && v15 == 12)
    {
      *a2 = 0;
    }
    else if ((char *)result - (char *)v12 == 24 && v15 <= 11)
    {
      *a2 = v15 + 12;
    }
  }
  else
  {
    *a5 |= 4u;
  }
  return result;
}

uint64_t std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::__get_second(uint64_t a1, _DWORD *a2, _QWORD **a3, _QWORD *a4, _DWORD *a5, uint64_t a6)
{
  uint64_t result;

  result = std::__get_up_to_n_digits[abi:ne180100]<wchar_t,std::istreambuf_iterator<wchar_t>>(a3, a4, a5, a6, 2);
  if ((*a5 & 4) != 0 || (int)result > 60)
    *a5 |= 4u;
  else
    *a2 = result;
  return result;
}

uint64_t std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::__get_weekday(uint64_t a1, _DWORD *a2, _QWORD **a3, _QWORD *a4, _DWORD *a5, uint64_t a6)
{
  uint64_t result;

  result = std::__get_up_to_n_digits[abi:ne180100]<wchar_t,std::istreambuf_iterator<wchar_t>>(a3, a4, a5, a6, 1);
  if ((*a5 & 4) != 0 || (int)result > 6)
    *a5 |= 4u;
  else
    *a2 = result;
  return result;
}

uint64_t std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::__get_year4(uint64_t a1, _DWORD *a2, _QWORD **a3, _QWORD *a4, _DWORD *a5, uint64_t a6)
{
  uint64_t result;

  result = std::__get_up_to_n_digits[abi:ne180100]<wchar_t,std::istreambuf_iterator<wchar_t>>(a3, a4, a5, a6, 4);
  if ((*(_BYTE *)a5 & 4) == 0)
    *a2 = result - 1900;
  return result;
}

uint64_t std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::__get_percent(uint64_t a1, _QWORD **a2, _QWORD *a3, _DWORD *a4, uint64_t a5)
{
  uint64_t result;
  int v10;
  unsigned int *v11;
  unsigned int *v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  unsigned int *v18;

  result = std::istreambuf_iterator<wchar_t>::__test_for_eof[abi:ne180100](a2);
  v10 = result;
  if (!a3)
  {
    if ((result & 1) == 0)
    {
      a3 = 0;
      goto LABEL_10;
    }
LABEL_12:
    v14 = 6;
LABEL_27:
    *a4 |= v14;
    return result;
  }
  v11 = (unsigned int *)a3[3];
  if (v11 == (unsigned int *)a3[4])
    result = (*(uint64_t (**)(_QWORD *))(*a3 + 72))(a3);
  else
    result = *v11;
  if ((_DWORD)result == -1)
    a3 = 0;
  if (v10 == ((_DWORD)result == -1))
    goto LABEL_12;
LABEL_10:
  v12 = (unsigned int *)(*a2)[3];
  if (v12 == (unsigned int *)(*a2)[4])
    v13 = (*(uint64_t (**)(_QWORD))(**a2 + 72))(*a2);
  else
    v13 = *v12;
  result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a5 + 104))(a5, v13, 0);
  if ((_DWORD)result != 37)
  {
    v14 = 4;
    goto LABEL_27;
  }
  v15 = *a2;
  v16 = (*a2)[3];
  if (v16 == (*a2)[4])
    (*(void (**)(_QWORD *))(*v15 + 80))(v15);
  else
    v15[3] = v16 + 4;
  result = std::istreambuf_iterator<wchar_t>::__test_for_eof[abi:ne180100](a2);
  v17 = result;
  if (a3)
  {
    v18 = (unsigned int *)a3[3];
    if (v18 == (unsigned int *)a3[4])
      result = (*(uint64_t (**)(_QWORD *))(*a3 + 72))(a3);
    else
      result = *v18;
    if (((v17 ^ ((_DWORD)result == -1)) & 1) == 0)
      goto LABEL_26;
  }
  else if ((result & 1) != 0)
  {
LABEL_26:
    v14 = 2;
    goto LABEL_27;
  }
  return result;
}

uint64_t std::__get_up_to_n_digits[abi:ne180100]<wchar_t,std::istreambuf_iterator<wchar_t>>(_QWORD **a1, _QWORD *a2, _DWORD *a3, uint64_t a4, int a5)
{
  _BOOL4 v10;
  _BOOL4 v11;
  int *v12;
  int v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  int *v22;
  int v23;
  int v24;
  unsigned int *v25;
  uint64_t v26;
  int v27;
  _QWORD *v28;
  uint64_t v29;
  _BOOL4 v30;
  _BOOL4 v31;
  int *v32;
  int v33;

  v10 = std::istreambuf_iterator<wchar_t>::__test_for_eof[abi:ne180100](a1);
  v11 = v10;
  if (!a2)
  {
    if (!v10)
    {
      a2 = 0;
      goto LABEL_10;
    }
LABEL_12:
    v16 = 0;
    v17 = 6;
LABEL_44:
    *a3 |= v17;
    return v16;
  }
  v12 = (int *)a2[3];
  if (v12 == (int *)a2[4])
    v13 = (*(uint64_t (**)(_QWORD *))(*a2 + 72))(a2);
  else
    v13 = *v12;
  if (v13 == -1)
    a2 = 0;
  if (v11 == (v13 == -1))
    goto LABEL_12;
LABEL_10:
  v14 = (unsigned int *)(*a1)[3];
  if (v14 == (unsigned int *)(*a1)[4])
    v15 = (*(uint64_t (**)(_QWORD))(**a1 + 72))(*a1);
  else
    v15 = *v14;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a4 + 24))(a4, 1024, v15))
  {
    v16 = 0;
    v17 = 4;
    goto LABEL_44;
  }
  v18 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a4 + 104))(a4, v15, 0);
  v19 = *a1;
  v20 = (*a1)[3];
  if (v20 == (*a1)[4])
    (*(void (**)(_QWORD *))(*v19 + 80))(v19);
  else
    v19[3] = v20 + 4;
  while (1)
  {
    v21 = std::istreambuf_iterator<wchar_t>::__test_for_eof[abi:ne180100](a1);
    if (a2)
    {
      v22 = (int *)a2[3];
      if (v22 == (int *)a2[4])
        v23 = (*(uint64_t (**)(_QWORD *))(*a2 + 72))(a2);
      else
        v23 = *v22;
      v24 = v23 == -1;
      if (v23 == -1)
        a2 = 0;
    }
    else
    {
      v24 = 1;
    }
    v16 = (v18 - 48);
    if (v21 == v24 || a5 < 2)
      break;
    v25 = (unsigned int *)(*a1)[3];
    if (v25 == (unsigned int *)(*a1)[4])
      v26 = (*(uint64_t (**)(_QWORD))(**a1 + 72))(*a1);
    else
      v26 = *v25;
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a4 + 24))(a4, 1024, v26))
      return v16;
    v27 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a4 + 104))(a4, v26, 0);
    v28 = *a1;
    v29 = (*a1)[3];
    if (v29 == (*a1)[4])
      (*(void (**)(_QWORD *))(*v28 + 80))(v28);
    else
      v28[3] = v29 + 4;
    v18 = v27 + 10 * v16;
    --a5;
  }
  v30 = std::istreambuf_iterator<wchar_t>::__test_for_eof[abi:ne180100](a1);
  v31 = v30;
  if (!a2)
  {
    if (!v30)
      return v16;
    goto LABEL_43;
  }
  v32 = (int *)a2[3];
  if (v32 == (int *)a2[4])
    v33 = (*(uint64_t (**)(_QWORD *))(*a2 + 72))(a2);
  else
    v33 = *v32;
  if (((v31 ^ (v33 == -1)) & 1) == 0)
  {
LABEL_43:
    v17 = 2;
    goto LABEL_44;
  }
  return v16;
}

_QWORD *std::time_put<char,std::ostreambuf_iterator<char>>::put(uint64_t a1, _QWORD *a2, std::ios_base *this, uint64_t a4, uint64_t a5, char *a6, unsigned __int8 *a7)
{
  const std::locale::facet *v13;
  std::locale::__imp *locale;
  unint64_t *v15;
  unint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  std::locale v29;

  std::ios_base::getloc(this);
  v13 = std::locale::use_facet(&v29, &std::ctype<char>::id);
  locale = v29.__locale_;
  if (v29.__locale_ != (std::locale::__imp *)&std::locale::__imp::classic_locale_imp_)
  {
    v15 = (unint64_t *)((char *)v29.__locale_ + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
      (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 16))(locale);
  }
  while (a6 != (char *)a7)
  {
    if (((unsigned int (*)(const std::locale::facet *, _QWORD, _QWORD))v13->__vftable[3].~facet)(v13, *a6, 0) == 37)
    {
      v17 = (unsigned __int8 *)(a6 + 1);
      if (a6 + 1 == (char *)a7)
      {
        if (!a2)
          return a2;
        v23 = *a6;
LABEL_29:
        v26 = (_BYTE *)a2[6];
        if (v26 == (_BYTE *)a2[7])
        {
          if ((*(unsigned int (**)(_QWORD *, uint64_t))(*a2 + 104))(a2, v23) == -1)
            return 0;
        }
        else
        {
          a2[6] = v26 + 1;
          *v26 = v23;
        }
        return a2;
      }
      v18 = ((uint64_t (*)(const std::locale::facet *, _QWORD, _QWORD))v13->__vftable[3].~facet)(v13, (char)*v17, 0);
      v19 = v18;
      if ((_DWORD)v18 == 79 || v18 == 69)
      {
        if (a6 + 2 == (char *)a7)
        {
          if (!a2)
            return a2;
          v24 = *a6;
          v25 = (_BYTE *)a2[6];
          if (v25 == (_BYTE *)a2[7])
          {
            if ((*(unsigned int (**)(_QWORD *, uint64_t))(*a2 + 104))(a2, v24) == -1)
              return 0;
          }
          else
          {
            a2[6] = v25 + 1;
            *v25 = v24;
          }
          v23 = *v17;
          goto LABEL_29;
        }
        v20 = ((uint64_t (*)(const std::locale::facet *, _QWORD, _QWORD))v13->__vftable[3].~facet)(v13, a6[2], 0);
        v17 = (unsigned __int8 *)(a6 + 2);
      }
      else
      {
        v20 = v18;
        v19 = 0;
      }
      a2 = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, std::ios_base *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, a2, this, a4, a5, v20, v19);
      a6 = (char *)v17;
    }
    else if (a2)
    {
      v21 = *a6;
      v22 = (_BYTE *)a2[6];
      if (v22 == (_BYTE *)a2[7])
      {
        if ((*(unsigned int (**)(_QWORD *, uint64_t))(*a2 + 104))(a2, v21) == -1)
          a2 = 0;
      }
      else
      {
        a2[6] = v22 + 1;
        *v22 = v21;
      }
    }
    ++a6;
  }
  return a2;
}

void sub_191FE9690(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (a10 != &std::locale::__imp::classic_locale_imp_)
    std::time_put<char,std::ostreambuf_iterator<char>>::put((uint64_t)a10);
  _Unwind_Resume(exception_object);
}

uint64_t std::time_put<char,std::ostreambuf_iterator<char>>::do_put(const std::__time_put *a1, _QWORD *a2, int a3, int a4, tm *__tm, char __fmt, char __mod)
{
  uint64_t v8;
  char *__ne;
  char v11;
  char __nb[100];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  __ne = (char *)&v13;
  std::__time_put::__do_put(a1 + 2, __nb, &__ne, __tm, __fmt, __mod);
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<char *,char *,std::ostreambuf_iterator<char>>((uint64_t)&v11, (unsigned __int8 *)__nb, (unsigned __int8 *)__ne, a2);
  return v8;
}

void std::__time_put::__do_put(const std::__time_put *this, char *__nb, char **__ne, const tm *__tm, char __fmt, char __mod)
{
  char v6;
  char v7;
  char v8;
  char v9;

  v6 = 37;
  v7 = __fmt;
  v8 = __mod;
  v9 = 0;
  if (__mod)
  {
    v7 = __mod;
    v8 = __fmt;
  }
  *__ne = &__nb[strftime_l(__nb, *__ne - __nb, &v6, __tm, this->__loc_)];
}

_QWORD *std::time_put<wchar_t,std::ostreambuf_iterator<wchar_t>>::put(uint64_t a1, _QWORD *a2, std::ios_base *this, uint64_t a4, uint64_t a5, unsigned int *a6, unsigned int *a7)
{
  const std::locale::facet *v13;
  std::locale::__imp *locale;
  unint64_t *v15;
  unint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  _DWORD *v27;
  std::locale v29;

  std::ios_base::getloc(this);
  v13 = std::locale::use_facet(&v29, &std::ctype<wchar_t>::id);
  locale = v29.__locale_;
  if (v29.__locale_ != (std::locale::__imp *)&std::locale::__imp::classic_locale_imp_)
  {
    v15 = (unint64_t *)((char *)v29.__locale_ + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
      (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 16))(locale);
  }
  while (a6 != a7)
  {
    if (((unsigned int (*)(const std::locale::facet *, _QWORD, _QWORD))v13->__vftable[4].~facet_0)(v13, *a6, 0) == 37)
    {
      v17 = a6 + 1;
      if (a6 + 1 == a7)
      {
        if (!a2)
          return a2;
        v24 = *a6;
LABEL_31:
        v27 = (_DWORD *)a2[6];
        if (v27 == (_DWORD *)a2[7])
        {
          LODWORD(v24) = (*(uint64_t (**)(_QWORD *, uint64_t))(*a2 + 104))(a2, v24);
        }
        else
        {
          *v27 = v24;
          a2[6] = v27 + 1;
        }
        if ((_DWORD)v24 == -1)
          return 0;
        return a2;
      }
      v18 = ((uint64_t (*)(const std::locale::facet *, _QWORD, _QWORD))v13->__vftable[4].~facet_0)(v13, *v17, 0);
      v19 = v18;
      if ((_DWORD)v18 == 79 || v18 == 69)
      {
        if (a6 + 2 == a7)
        {
          if (!a2)
            return a2;
          v25 = *a6;
          v26 = (_DWORD *)a2[6];
          if (v26 == (_DWORD *)a2[7])
          {
            LODWORD(v25) = (*(uint64_t (**)(_QWORD *, uint64_t))(*a2 + 104))(a2, v25);
          }
          else
          {
            *v26 = v25;
            a2[6] = v26 + 1;
          }
          if ((_DWORD)v25 == -1)
            return 0;
          v24 = *v17;
          goto LABEL_31;
        }
        v20 = ((uint64_t (*)(const std::locale::facet *, _QWORD, _QWORD))v13->__vftable[4].~facet_0)(v13, a6[2], 0);
        v17 = a6 + 2;
      }
      else
      {
        v20 = v18;
        v19 = 0;
      }
      a2 = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, std::ios_base *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, a2, this, a4, a5, v20, v19);
      a6 = v17;
    }
    else if (a2)
    {
      v21 = *a6;
      v22 = (_DWORD *)a2[6];
      if (v22 == (_DWORD *)a2[7])
      {
        LODWORD(v21) = (*(uint64_t (**)(_QWORD *, uint64_t))(*a2 + 104))(a2, v21);
      }
      else
      {
        *v22 = v21;
        a2[6] = v22 + 1;
      }
      if ((_DWORD)v21 == -1)
        a2 = 0;
    }
    ++a6;
  }
  return a2;
}

void sub_191FE9A04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (a10 != &std::locale::__imp::classic_locale_imp_)
    std::time_put<wchar_t,std::ostreambuf_iterator<wchar_t>>::put((uint64_t)a10);
  _Unwind_Resume(exception_object);
}

uint64_t std::time_put<wchar_t,std::ostreambuf_iterator<wchar_t>>::do_put(const std::__time_put *a1, _QWORD *a2, int a3, int a4, tm *__tm, char __fmt, char __mod)
{
  uint64_t v8;
  __int32 *__we;
  char v11;
  __int32 __wb[100];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  __we = (__int32 *)&v13;
  std::__time_put::__do_put(a1 + 2, __wb, &__we, __tm, __fmt, __mod);
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<wchar_t *,wchar_t *,std::ostreambuf_iterator<wchar_t>>((uint64_t)&v11, (unsigned int *)__wb, (unsigned int *)__we, a2);
  return v8;
}

void std::__time_put::__do_put(const std::__time_put *this, __int32 *__wb, __int32 **__we, const tm *__tm, char __fmt, char __mod)
{
  size_t v9;
  char *v10;
  char *__ne;
  mbstate_t v12;
  char __nb[100];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  __ne = (char *)&v14;
  std::__time_put::__do_put(this, __nb, &__ne, __tm, __fmt, __mod);
  memset(&v12, 0, sizeof(v12));
  v10 = __nb;
  v9 = mbsrtowcs_l(__wb, (const char **)&v10, *__we - __wb, &v12, this->__loc_);
  if (v9 == -1)
    std::__throw_runtime_error("locale not supported");
  *__we = &__wb[v9];
}

uint64_t std::moneypunct<char,false>::do_decimal_point()
{
  return 127;
}

uint64_t std::moneypunct<char,false>::do_thousands_sep()
{
  return 127;
}

void std::moneypunct<char,false>::do_grouping(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::moneypunct<char,false>::do_curr_symbol(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::moneypunct<char,false>::do_positive_sign(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::moneypunct<char,false>::do_negative_sign(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 1;
  *(_WORD *)a1 = 45;
}

uint64_t std::moneypunct<char,false>::do_frac_digits()
{
  return 0;
}

uint64_t std::moneypunct<char,false>::do_pos_format()
{
  return 67109634;
}

uint64_t std::moneypunct<char,false>::do_neg_format()
{
  return 67109634;
}

uint64_t std::moneypunct<char,true>::do_decimal_point()
{
  return 127;
}

uint64_t std::moneypunct<char,true>::do_thousands_sep()
{
  return 127;
}

void std::moneypunct<char,true>::do_grouping(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::moneypunct<char,true>::do_curr_symbol(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::moneypunct<char,true>::do_positive_sign(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::moneypunct<char,true>::do_negative_sign(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 1;
  *(_WORD *)a1 = 45;
}

uint64_t std::moneypunct<char,true>::do_frac_digits()
{
  return 0;
}

uint64_t std::moneypunct<char,true>::do_pos_format()
{
  return 67109634;
}

uint64_t std::moneypunct<char,true>::do_neg_format()
{
  return 67109634;
}

uint64_t std::moneypunct<wchar_t,false>::do_decimal_point()
{
  return 0x7FFFFFFFLL;
}

uint64_t std::moneypunct<wchar_t,false>::do_thousands_sep()
{
  return 0x7FFFFFFFLL;
}

void std::moneypunct<wchar_t,false>::do_grouping(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::moneypunct<wchar_t,false>::do_curr_symbol(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::moneypunct<wchar_t,false>::do_positive_sign(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

double std::moneypunct<wchar_t,false>::do_negative_sign@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_BYTE *)(a1 + 23) = 1;
  *(_QWORD *)&result = 45;
  *(_QWORD *)a1 = 45;
  return result;
}

uint64_t std::moneypunct<wchar_t,false>::do_frac_digits()
{
  return 0;
}

uint64_t std::moneypunct<wchar_t,false>::do_pos_format()
{
  return 67109634;
}

uint64_t std::moneypunct<wchar_t,false>::do_neg_format()
{
  return 67109634;
}

uint64_t std::moneypunct<wchar_t,true>::do_decimal_point()
{
  return 0x7FFFFFFFLL;
}

uint64_t std::moneypunct<wchar_t,true>::do_thousands_sep()
{
  return 0x7FFFFFFFLL;
}

void std::moneypunct<wchar_t,true>::do_grouping(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::moneypunct<wchar_t,true>::do_curr_symbol(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::moneypunct<wchar_t,true>::do_positive_sign(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

double std::moneypunct<wchar_t,true>::do_negative_sign@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_BYTE *)(a1 + 23) = 1;
  *(_QWORD *)&result = 45;
  *(_QWORD *)a1 = 45;
  return result;
}

uint64_t std::moneypunct<wchar_t,true>::do_frac_digits()
{
  return 0;
}

uint64_t std::moneypunct<wchar_t,true>::do_pos_format()
{
  return 67109634;
}

uint64_t std::moneypunct<wchar_t,true>::do_neg_format()
{
  return 67109634;
}

uint64_t std::moneypunct_byname<char,false>::do_decimal_point(uint64_t a1)
{
  return *(char *)(a1 + 16);
}

uint64_t std::moneypunct_byname<char,false>::do_thousands_sep(uint64_t a1)
{
  return *(char *)(a1 + 17);
}

void std::moneypunct_byname<char,false>::do_grouping(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(a1 + 24), *(_QWORD *)(a1 + 32));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 24);
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 40);
  }
}

void std::moneypunct_byname<char,false>::do_curr_symbol(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(a1 + 48), *(_QWORD *)(a1 + 56));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 48);
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 64);
  }
}

void std::moneypunct_byname<char,false>::do_positive_sign(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(a1 + 72), *(_QWORD *)(a1 + 80));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 72);
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 88);
  }
}

void std::moneypunct_byname<char,false>::do_negative_sign(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(a1 + 96), *(_QWORD *)(a1 + 104));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 96);
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 112);
  }
}

uint64_t std::moneypunct_byname<char,false>::do_frac_digits(uint64_t a1)
{
  return *(unsigned int *)(a1 + 120);
}

uint64_t std::moneypunct_byname<char,false>::do_pos_format(uint64_t a1)
{
  return *(unsigned int *)(a1 + 124);
}

uint64_t std::moneypunct_byname<char,false>::do_neg_format(uint64_t a1)
{
  return *(unsigned int *)(a1 + 128);
}

uint64_t std::moneypunct_byname<char,true>::do_decimal_point(uint64_t a1)
{
  return *(char *)(a1 + 16);
}

uint64_t std::moneypunct_byname<char,true>::do_thousands_sep(uint64_t a1)
{
  return *(char *)(a1 + 17);
}

void std::moneypunct_byname<char,true>::do_grouping(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(a1 + 24), *(_QWORD *)(a1 + 32));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 24);
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 40);
  }
}

void std::moneypunct_byname<char,true>::do_curr_symbol(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(a1 + 48), *(_QWORD *)(a1 + 56));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 48);
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 64);
  }
}

void std::moneypunct_byname<char,true>::do_positive_sign(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(a1 + 72), *(_QWORD *)(a1 + 80));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 72);
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 88);
  }
}

void std::moneypunct_byname<char,true>::do_negative_sign(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(a1 + 96), *(_QWORD *)(a1 + 104));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 96);
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 112);
  }
}

uint64_t std::moneypunct_byname<char,true>::do_frac_digits(uint64_t a1)
{
  return *(unsigned int *)(a1 + 120);
}

uint64_t std::moneypunct_byname<char,true>::do_pos_format(uint64_t a1)
{
  return *(unsigned int *)(a1 + 124);
}

uint64_t std::moneypunct_byname<char,true>::do_neg_format(uint64_t a1)
{
  return *(unsigned int *)(a1 + 128);
}

uint64_t std::moneypunct_byname<wchar_t,false>::do_decimal_point(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t std::moneypunct_byname<wchar_t,false>::do_thousands_sep(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void std::moneypunct_byname<wchar_t,false>::do_grouping(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(a1 + 24), *(_QWORD *)(a1 + 32));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 24);
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 40);
  }
}

void std::moneypunct_byname<wchar_t,false>::do_curr_symbol(uint64_t a1@<X0>, std::wstring *a2@<X8>)
{
  if (*(char *)(a1 + 71) < 0)
  {
    std::wstring::__init_copy_ctor_external(a2, *(const std::wstring::value_type **)(a1 + 48), *(_QWORD *)(a1 + 56));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 48);
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 64);
  }
}

void std::moneypunct_byname<wchar_t,false>::do_positive_sign(uint64_t a1@<X0>, std::wstring *a2@<X8>)
{
  if (*(char *)(a1 + 95) < 0)
  {
    std::wstring::__init_copy_ctor_external(a2, *(const std::wstring::value_type **)(a1 + 72), *(_QWORD *)(a1 + 80));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 72);
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 88);
  }
}

void std::moneypunct_byname<wchar_t,false>::do_negative_sign(uint64_t a1@<X0>, std::wstring *a2@<X8>)
{
  if (*(char *)(a1 + 119) < 0)
  {
    std::wstring::__init_copy_ctor_external(a2, *(const std::wstring::value_type **)(a1 + 96), *(_QWORD *)(a1 + 104));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 96);
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 112);
  }
}

uint64_t std::moneypunct_byname<wchar_t,false>::do_frac_digits(uint64_t a1)
{
  return *(unsigned int *)(a1 + 120);
}

uint64_t std::moneypunct_byname<wchar_t,false>::do_pos_format(uint64_t a1)
{
  return *(unsigned int *)(a1 + 124);
}

uint64_t std::moneypunct_byname<wchar_t,false>::do_neg_format(uint64_t a1)
{
  return *(unsigned int *)(a1 + 128);
}

uint64_t std::moneypunct_byname<wchar_t,true>::do_decimal_point(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t std::moneypunct_byname<wchar_t,true>::do_thousands_sep(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void std::moneypunct_byname<wchar_t,true>::do_grouping(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(a1 + 24), *(_QWORD *)(a1 + 32));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 24);
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 40);
  }
}

void std::moneypunct_byname<wchar_t,true>::do_curr_symbol(uint64_t a1@<X0>, std::wstring *a2@<X8>)
{
  if (*(char *)(a1 + 71) < 0)
  {
    std::wstring::__init_copy_ctor_external(a2, *(const std::wstring::value_type **)(a1 + 48), *(_QWORD *)(a1 + 56));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 48);
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 64);
  }
}

void std::moneypunct_byname<wchar_t,true>::do_positive_sign(uint64_t a1@<X0>, std::wstring *a2@<X8>)
{
  if (*(char *)(a1 + 95) < 0)
  {
    std::wstring::__init_copy_ctor_external(a2, *(const std::wstring::value_type **)(a1 + 72), *(_QWORD *)(a1 + 80));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 72);
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 88);
  }
}

void std::moneypunct_byname<wchar_t,true>::do_negative_sign(uint64_t a1@<X0>, std::wstring *a2@<X8>)
{
  if (*(char *)(a1 + 119) < 0)
  {
    std::wstring::__init_copy_ctor_external(a2, *(const std::wstring::value_type **)(a1 + 96), *(_QWORD *)(a1 + 104));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 96);
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 112);
  }
}

uint64_t std::moneypunct_byname<wchar_t,true>::do_frac_digits(uint64_t a1)
{
  return *(unsigned int *)(a1 + 120);
}

uint64_t std::moneypunct_byname<wchar_t,true>::do_pos_format(uint64_t a1)
{
  return *(unsigned int *)(a1 + 124);
}

uint64_t std::moneypunct_byname<wchar_t,true>::do_neg_format(uint64_t a1)
{
  return *(unsigned int *)(a1 + 128);
}

_QWORD *std::money_get<char,std::istreambuf_iterator<char>>::do_get(int a1, _QWORD *a2, _QWORD *a3, int a4, std::ios_base *this, _DWORD *a6, uint64_t a7)
{
  const std::locale::facet *v12;
  char *v13;
  char *v14;
  char *i;
  int v16;
  char *v17;
  char *v18;
  _QWORD *v19;
  std::locale::__imp *locale;
  unint64_t *v21;
  unint64_t v22;
  char *v23;
  BOOL v25;
  std::locale v26;
  unint64_t v27;
  char *v28;
  void (*v29)(void);
  _QWORD *v30;
  _QWORD *v31;
  char v32[100];
  _BYTE __s[10];
  char v34[112];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v30 = a3;
  v31 = a2;
  v28 = &v34[12];
  v29 = (void (*)(void))std::__do_nothing;
  std::ios_base::getloc(this);
  v12 = std::locale::use_facet(&v26, &std::ctype<char>::id);
  v25 = 0;
  if (std::money_get<char,std::istreambuf_iterator<char>>::__do_get(&v31, a3, a4, &v26, this->__fmtflags_, a6, &v25, (uint64_t)v12, (void **)&v28, (uint64_t *)&v27, (uint64_t)&v35))
  {
    strcpy(v34, "0123456789");
    ((void (*)(const std::locale::facet *, char *, char *, _BYTE *))v12->__vftable[2].__on_zero_shared)(v12, v34, &v34[10], __s);
    if ((uint64_t)(v27 - (_QWORD)v28) < 99)
    {
      v13 = 0;
      v14 = v32;
    }
    else
    {
      v13 = (char *)malloc_type_malloc(v27 - (_QWORD)v28 + 2, 0x81D7759AuLL);
      v14 = v13;
      if (!v13)
        std::__throw_bad_alloc();
    }
    if (v25)
      *v14++ = 45;
    for (i = v28; (unint64_t)i < v27; ++v14)
    {
      v16 = *i++;
      v17 = (char *)memchr(__s, v16, 0xAuLL);
      if (v17)
        v18 = v17;
      else
        v18 = v34;
      *v14 = v34[v18 - __s];
    }
    *v14 = 0;
    if (sscanf(v32, "%Lf", a7) != 1)
      std::__throw_runtime_error("money_get error");
    if (v13)
      free(v13);
  }
  if (std::istreambuf_iterator<char>::equal[abi:ne180100](&v31, &v30))
    *a6 |= 2u;
  v19 = v31;
  locale = v26.__locale_;
  if (v26.__locale_ != (std::locale::__imp *)&std::locale::__imp::classic_locale_imp_)
  {
    v21 = (unint64_t *)((char *)v26.__locale_ + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
      (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 16))(locale);
  }
  v23 = v28;
  v28 = 0;
  if (v23)
    v29();
  return v19;
}

{
  const std::locale::facet *v12;
  std::string::value_type v13;
  char v14;
  char *v15;
  char *v16;
  char *v17;
  _QWORD *v18;
  std::locale::__imp *locale;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  BOOL v24;
  std::locale v25;
  char *v26;
  char *v27;
  void (*v28)(void);
  _QWORD *v29;
  _QWORD *v30;
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v29 = a3;
  v30 = a2;
  v27 = &v31;
  v28 = (void (*)(void))std::__do_nothing;
  std::ios_base::getloc(this);
  v12 = std::locale::use_facet(&v25, &std::ctype<char>::id);
  v24 = 0;
  if (std::money_get<char,std::istreambuf_iterator<char>>::__do_get(&v30, a3, a4, &v25, this->__fmtflags_, a6, &v24, (uint64_t)v12, (void **)&v27, (uint64_t *)&v26, (uint64_t)&v32))
  {
    if (*(char *)(a7 + 23) < 0)
    {
      **(_BYTE **)a7 = 0;
      *(_QWORD *)(a7 + 8) = 0;
    }
    else
    {
      *(_BYTE *)a7 = 0;
      *(_BYTE *)(a7 + 23) = 0;
    }
    if (v24)
    {
      v13 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 45);
      std::string::push_back((std::string *)a7, v13);
    }
    v14 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 48);
    v15 = v27;
    if (v27 < v26 - 1)
    {
      v16 = &v26[~(unint64_t)v27];
      v17 = &v16[(_QWORD)v27];
      while (*v15 == v14)
      {
        ++v15;
        if (!--v16)
        {
          v15 = v17;
          break;
        }
      }
    }
    std::string::append[abi:ne180100]<char *,0>((std::string *)a7, v15, v26);
  }
  if (std::istreambuf_iterator<char>::equal[abi:ne180100](&v30, &v29))
    *a6 |= 2u;
  v18 = v30;
  locale = v25.__locale_;
  if (v25.__locale_ != (std::locale::__imp *)&std::locale::__imp::classic_locale_imp_)
  {
    v20 = (unint64_t *)((char *)v25.__locale_ + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
      (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 16))(locale);
  }
  v22 = v27;
  v27 = 0;
  if (v22)
    v28();
  return v18;
}

void sub_191FEA30C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t *a14, uint64_t a15, uint64_t a16, void (*a17)(void))
{
  void *v17;
  unint64_t *v19;
  unint64_t v20;

  if (v17)
    free(v17);
  if (a14 != (unint64_t *)&std::locale::__imp::classic_locale_imp_)
  {
    v19 = a14 + 1;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
      (*(void (**)(unint64_t *))(*a14 + 16))(a14);
  }
  if (a16)
    a17();
  _Unwind_Resume(exception_object);
}

uint64_t std::money_get<char,std::istreambuf_iterator<char>>::__do_get(_QWORD **a1, _QWORD *a2, int a3, std::locale *a4, __int16 a5, _DWORD *a6, BOOL *a7, uint64_t a8, void **a9, uint64_t *a10, uint64_t a11)
{
  uint64_t v17;
  unint64_t v18;
  void **v19;
  unsigned __int8 *v20;
  uint64_t v21;
  BOOL v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  unsigned __int8 *v26;
  int v27;
  unsigned int v28;
  unsigned __int8 *v29;
  uint64_t v30;
  unsigned __int8 v31;
  std::string::size_type v32;
  BOOL v33;
  unsigned int *v35;
  _BYTE *v36;
  _QWORD *v37;
  uint64_t v38;
  unsigned int *v39;
  _BYTE *v41;
  int v42;
  uint64_t v43;
  _BOOL4 v44;
  unsigned __int8 *v45;
  uint64_t v46;
  unsigned __int8 v47;
  _QWORD *v48;
  std::string::value_type *v49;
  std::string::value_type v50;
  unsigned __int8 *v51;
  uint64_t v52;
  unsigned __int8 v53;
  std::string::value_type *v54;
  uint64_t v55;
  unsigned __int8 *v56;
  unsigned __int8 *v57;
  unsigned __int8 *v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unsigned __int8 *v64;
  int v65;
  _QWORD *v66;
  uint64_t v67;
  unsigned __int8 *v68;
  uint64_t v69;
  unsigned __int8 v70;
  char *v71;
  char v72;
  _BYTE *v73;
  int v74;
  _QWORD *v75;
  uint64_t v76;
  unsigned __int8 *p_p;
  _QWORD *v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  BOOL v83;
  void **v84;
  size_t v85;
  std::string::size_type size;
  std::string *v87;
  uint64_t v88;
  _BYTE *v89;
  int v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  char *v96;
  unint64_t v97;
  unsigned int i;
  unint64_t v99;
  uint64_t v100;
  unsigned __int8 *v101;
  int v102;
  unsigned __int8 *v103;
  _QWORD *v104;
  uint64_t v105;
  unsigned int *v106;
  _DWORD *v108;
  BOOL *v109;
  std::ios_base::iostate __err;
  int v112;
  std::string v113;
  void *__p;
  unint64_t v115;
  uint64_t v116;
  void *v117;
  unint64_t v118;
  uint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  std::string __grouping;
  unsigned __int8 v124;
  unsigned __int8 v125;
  int v126;
  char *v127;
  unsigned int *v128;
  unsigned int *v129;
  void (*v130)(void);
  _QWORD *v131;
  _BYTE v132[400];
  uint64_t v133;

  v133 = *MEMORY[0x1E0C80C00];
  v131 = a2;
  if (std::istreambuf_iterator<char>::equal[abi:ne180100](a1, &v131))
  {
    v17 = 0;
    *a6 |= 4u;
  }
  else
  {
    v129 = (unsigned int *)v132;
    v130 = (void (*)(void))std::__do_nothing;
    v128 = (unsigned int *)v132;
    v127 = (char *)&v133;
    memset(&__grouping, 0, sizeof(__grouping));
    v120 = 0;
    v121 = 0;
    v122 = 0;
    v117 = 0;
    v118 = 0;
    v119 = 0;
    __p = 0;
    v115 = 0;
    v116 = 0;
    memset(&v113, 0, sizeof(v113));
    std::__money_get<char>::__gather_info(a3, a4, &v126, &v125, &v124, (uint64_t)&__grouping, (uint64_t)&v120, (uint64_t)&v117, (uint64_t)&__p, &v112);
    v18 = 0;
    v19 = 0;
    *a10 = (uint64_t)*a9;
    while ((std::istreambuf_iterator<char>::equal[abi:ne180100](a1, &v131) & 1) == 0)
    {
      switch(*((_BYTE *)&v126 + v18))
      {
        case 0:
          if (v18 == 3)
            goto LABEL_198;
          goto LABEL_77;
        case 1:
          if (v18 == 3)
            goto LABEL_198;
          v20 = (unsigned __int8 *)(*a1)[3];
          if (v20 == (unsigned __int8 *)(*a1)[4])
          {
            v47 = (*(uint64_t (**)(_QWORD))(**a1 + 72))(*a1);
            v21 = v47;
            if ((v47 & 0x80) != 0)
              goto LABEL_217;
          }
          else
          {
            v21 = *v20;
            if ((v21 & 0x80) != 0)
              goto LABEL_217;
          }
          if ((*(_DWORD *)(*(_QWORD *)(a8 + 16) + 4 * v21) & 0x4000) == 0)
            goto LABEL_217;
          v48 = *a1;
          v49 = (std::string::value_type *)(*a1)[3];
          if (v49 != (std::string::value_type *)(*a1)[4])
          {
            v48[3] = v49 + 1;
            v50 = *v49;
            goto LABEL_76;
          }
LABEL_75:
          v50 = (*(uint64_t (**)(_QWORD *))(*v48 + 80))(v48);
LABEL_76:
          while (1)
          {
            std::string::push_back(&v113, v50);
LABEL_77:
            if ((std::istreambuf_iterator<char>::equal[abi:ne180100](a1, &v131) & 1) != 0)
              goto LABEL_197;
            v51 = (unsigned __int8 *)(*a1)[3];
            if (v51 == (unsigned __int8 *)(*a1)[4])
            {
              v53 = (*(uint64_t (**)(_QWORD))(**a1 + 72))(*a1);
              v52 = v53;
              if ((v53 & 0x80) != 0)
                goto LABEL_197;
            }
            else
            {
              v52 = *v51;
              if ((v52 & 0x80) != 0)
                goto LABEL_197;
            }
            if ((*(_DWORD *)(*(_QWORD *)(a8 + 16) + 4 * v52) & 0x4000) == 0)
              goto LABEL_197;
            v48 = *a1;
            v54 = (std::string::value_type *)(*a1)[3];
            if (v54 == (std::string::value_type *)(*a1)[4])
              goto LABEL_75;
            v48[3] = v54 + 1;
            v50 = *v54;
          }
        case 2:
          if (v18 < 2 || v19)
          {
            v109 = a7;
            v43 = HIBYTE(v122);
            v44 = v122 < 0;
            if (v122 >= 0)
              v45 = (unsigned __int8 *)&v120;
            else
              v45 = (unsigned __int8 *)v120;
            if (!v18)
            {
              v108 = a6;
              v46 = v121;
              goto LABEL_165;
            }
          }
          else
          {
            v22 = v18 != 2 || HIBYTE(v126) == 0;
            v23 = !v22;
            if ((a5 & 0x200) == 0 && !v23)
            {
              v19 = 0;
              goto LABEL_197;
            }
            v109 = a7;
            v43 = HIBYTE(v122);
            v44 = v122 < 0;
            if (v122 >= 0)
              v45 = (unsigned __int8 *)&v120;
            else
              v45 = (unsigned __int8 *)v120;
          }
          v46 = v121;
          v108 = a6;
          if (*((unsigned __int8 *)&v126 + (v18 - 1)) > 1u)
            goto LABEL_165;
          if (v44)
            v55 = v121;
          else
            v55 = v43;
          if (v55)
          {
            v56 = &v45[v55];
            v57 = v45;
            while (((char)*v57 & 0x80000000) == 0 && (*(_DWORD *)(*(_QWORD *)(a8 + 16) + 4 * *v57) & 0x4000) != 0)
            {
              ++v57;
              if (!--v55)
              {
                v57 = v56;
                break;
              }
            }
          }
          else
          {
            v57 = v45;
          }
          v85 = v57 - v45;
          if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
          {
            size = v113.__r_.__value_.__l.__size_;
            if (v85 > v113.__r_.__value_.__l.__size_)
              goto LABEL_165;
            v87 = (std::string *)v113.__r_.__value_.__r.__words[0];
          }
          else
          {
            size = HIBYTE(v113.__r_.__value_.__r.__words[2]);
            if (v85 > HIBYTE(v113.__r_.__value_.__r.__words[2]))
              goto LABEL_165;
            v87 = &v113;
          }
          if (!memcmp((char *)v87 + size - v85, v45, v85))
            goto LABEL_166;
LABEL_165:
          v57 = v45;
LABEL_166:
          if (v44)
            v88 = v46;
          else
            v88 = v43;
          if (v57 == &v45[v88])
          {
            a7 = v109;
          }
          else
          {
            a7 = v109;
            do
            {
              if ((std::istreambuf_iterator<char>::equal[abi:ne180100](a1, &v131) & 1) != 0)
                break;
              v89 = (_BYTE *)(*a1)[3];
              v90 = v89 == (_BYTE *)(*a1)[4]
                  ? (*(unsigned __int8 (**)(_QWORD))(**a1 + 72))(*a1)
                  : *v89;
              if (v90 != *v57)
                break;
              v91 = *a1;
              v92 = (*a1)[3];
              if (v92 == (*a1)[4])
                (*(void (**)(_QWORD *))(*v91 + 80))(v91);
              else
                v91[3] = v92 + 1;
              ++v57;
              v93 = HIBYTE(v122);
              v94 = (char *)&v120;
              if (v122 < 0)
              {
                v94 = (char *)v120;
                v93 = v121;
              }
            }
            while (v57 != (unsigned __int8 *)&v94[v93]);
          }
          if ((a5 & 0x200) != 0)
          {
            v95 = HIBYTE(v122);
            v96 = (char *)&v120;
            if (v122 < 0)
            {
              v96 = (char *)v120;
              v95 = v121;
            }
            v22 = v57 == (unsigned __int8 *)&v96[v95];
            a6 = v108;
            if (!v22)
              goto LABEL_217;
          }
          else
          {
            a6 = v108;
          }
          goto LABEL_197;
        case 3:
          v24 = HIBYTE(v119);
          if (v119 >= 0)
            v25 = HIBYTE(v119);
          else
            v25 = v118;
          if (v25)
          {
            v26 = (unsigned __int8 *)(*a1)[3];
            if (v26 == (unsigned __int8 *)(*a1)[4])
            {
              v27 = (*(unsigned __int8 (**)(_QWORD))(**a1 + 72))(*a1);
              v24 = HIBYTE(v119);
            }
            else
            {
              v27 = *v26;
            }
            v58 = (unsigned __int8 *)&v117;
            if ((v24 & 0x80u) != 0)
              v58 = (unsigned __int8 *)v117;
            if (v27 == *v58)
            {
              v59 = *a1;
              v60 = (*a1)[3];
              if (v60 == (*a1)[4])
              {
                (*(void (**)(_QWORD *))(*v59 + 80))(v59);
                v24 = HIBYTE(v119);
              }
              else
              {
                v59[3] = v60 + 1;
              }
              *a7 = 0;
              if ((v24 & 0x80u) != 0)
                v24 = v118;
              v83 = v24 > 1;
              v84 = &v117;
              goto LABEL_195;
            }
          }
          v61 = HIBYTE(v116);
          v62 = v115;
          if (v116 >= 0)
            v63 = HIBYTE(v116);
          else
            v63 = v115;
          if (v63)
          {
            v64 = (unsigned __int8 *)(*a1)[3];
            if (v64 == (unsigned __int8 *)(*a1)[4])
            {
              v65 = (*(unsigned __int8 (**)(_QWORD))(**a1 + 72))(*a1);
              v61 = HIBYTE(v116);
            }
            else
            {
              v65 = *v64;
            }
            p_p = (unsigned __int8 *)&__p;
            if ((v61 & 0x80u) != 0)
              p_p = (unsigned __int8 *)__p;
            if (v65 == *p_p)
            {
              v78 = *a1;
              v79 = (*a1)[3];
              if (v79 == (*a1)[4])
              {
                (*(void (**)(_QWORD *))(*v78 + 80))(v78);
                v61 = HIBYTE(v116);
              }
              else
              {
                v78[3] = v79 + 1;
              }
              *a7 = 1;
              if ((v61 & 0x80u) == 0)
                v97 = v61;
              else
                v97 = v115;
              v83 = v97 > 1;
              v84 = &__p;
LABEL_195:
              if (v83)
                v19 = v84;
              goto LABEL_197;
            }
            v24 = HIBYTE(v119);
            v62 = v115;
          }
          v80 = v118;
          if ((v24 & 0x80u) == 0)
            v80 = v24;
          if ((v61 & 0x80u) == 0)
            v81 = v61;
          else
            v81 = v62;
          if (v80)
          {
            if (v81)
              goto LABEL_217;
          }
          else if (!v81)
          {
            goto LABEL_197;
          }
          if ((v61 & 0x80u) == 0)
            v82 = v61;
          else
            v82 = v62;
          *a7 = v82 == 0;
LABEL_197:
          if (++v18 == 4)
            goto LABEL_198;
          break;
        case 4:
          v28 = 0;
          while ((std::istreambuf_iterator<char>::equal[abi:ne180100](a1, &v131) & 1) == 0)
          {
            v29 = (unsigned __int8 *)(*a1)[3];
            if (v29 == (unsigned __int8 *)(*a1)[4])
            {
              v31 = (*(uint64_t (**)(_QWORD))(**a1 + 72))(*a1);
              v30 = v31;
              if ((v31 & 0x80) != 0)
                goto LABEL_36;
            }
            else
            {
              v30 = *v29;
              if ((v30 & 0x80) != 0)
                goto LABEL_36;
            }
            if ((*(_DWORD *)(*(_QWORD *)(a8 + 16) + 4 * v30) & 0x400) != 0)
            {
              v36 = (_BYTE *)*a10;
              if (*a10 == a11)
              {
                std::__double_or_nothing[abi:ne180100]<char>(a9, a10, &a11);
                v36 = (_BYTE *)*a10;
              }
              *a10 = (uint64_t)(v36 + 1);
              *v36 = v30;
              ++v28;
              goto LABEL_52;
            }
LABEL_36:
            v32 = HIBYTE(__grouping.__r_.__value_.__r.__words[2]);
            if ((__grouping.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v32 = __grouping.__r_.__value_.__l.__size_;
            if (v32)
              v33 = v28 == 0;
            else
              v33 = 1;
            if (!v33 && v30 == v124)
            {
              v35 = v128;
              if (v128 == (unsigned int *)v127)
              {
                std::__double_or_nothing[abi:ne180100]<unsigned int>((void **)&v129, (uint64_t *)&v128, &v127);
                v35 = v128;
              }
              *v35 = v28;
              v28 = 0;
              v128 = v35 + 1;
LABEL_52:
              v37 = *a1;
              v38 = (*a1)[3];
              if (v38 == (*a1)[4])
                (*(void (**)(_QWORD *))(*v37 + 80))(v37);
              else
                v37[3] = v38 + 1;
              continue;
            }
            break;
          }
          v39 = v128;
          if (v129 != v128 && v28 != 0)
          {
            if (v128 == (unsigned int *)v127)
            {
              std::__double_or_nothing[abi:ne180100]<unsigned int>((void **)&v129, (uint64_t *)&v128, &v127);
              v39 = v128;
            }
            *v39 = v28;
            v128 = v39 + 1;
          }
          if (v112 >= 1)
          {
            if ((std::istreambuf_iterator<char>::equal[abi:ne180100](a1, &v131) & 1) != 0)
              goto LABEL_217;
            v41 = (_BYTE *)(*a1)[3];
            v42 = v41 == (_BYTE *)(*a1)[4]
                ? (*(unsigned __int8 (**)(_QWORD))(**a1 + 72))(*a1)
                : *v41;
            if (v42 != v125)
              goto LABEL_217;
            v66 = *a1;
            v67 = (*a1)[3];
            if (v67 == (*a1)[4])
              (*(void (**)(_QWORD *))(*v66 + 80))(v66);
            else
              v66[3] = v67 + 1;
            if (v112 >= 1)
            {
              while ((std::istreambuf_iterator<char>::equal[abi:ne180100](a1, &v131) & 1) == 0)
              {
                v68 = (unsigned __int8 *)(*a1)[3];
                if (v68 == (unsigned __int8 *)(*a1)[4])
                {
                  v70 = (*(uint64_t (**)(_QWORD))(**a1 + 72))(*a1);
                  v69 = v70;
                  if ((v70 & 0x80) != 0)
                    break;
                }
                else
                {
                  v69 = *v68;
                  if ((v69 & 0x80) != 0)
                    break;
                }
                if ((*(_DWORD *)(*(_QWORD *)(a8 + 16) + 4 * v69) & 0x400) == 0)
                  break;
                if (*a10 == a11)
                  std::__double_or_nothing[abi:ne180100]<char>(a9, a10, &a11);
                v71 = (char *)(*a1)[3];
                if (v71 == (char *)(*a1)[4])
                  v72 = (*(uint64_t (**)(_QWORD))(**a1 + 72))(*a1);
                else
                  v72 = *v71;
                v73 = (_BYTE *)(*a10)++;
                *v73 = v72;
                v74 = --v112;
                v75 = *a1;
                v76 = (*a1)[3];
                if (v76 == (*a1)[4])
                {
                  (*(void (**)(_QWORD *))(*v75 + 80))(v75);
                  v74 = v112;
                }
                else
                {
                  v75[3] = v76 + 1;
                }
                if (v74 <= 0)
                  goto LABEL_132;
              }
LABEL_217:
              v17 = 0;
              *a6 |= 4u;
              goto LABEL_218;
            }
          }
LABEL_132:
          if ((void *)*a10 == *a9)
            goto LABEL_217;
          goto LABEL_197;
        default:
          goto LABEL_197;
      }
    }
LABEL_198:
    if (v19)
    {
      for (i = 1; ; i = v100 + 1)
      {
        v99 = *((char *)v19 + 23) < 0 ? (unint64_t)v19[1] : *((unsigned __int8 *)v19 + 23);
        v100 = i;
        if (v99 <= i)
          break;
        if ((std::istreambuf_iterator<char>::equal[abi:ne180100](a1, &v131) & 1) != 0)
          goto LABEL_217;
        v101 = (unsigned __int8 *)(*a1)[3];
        if (v101 == (unsigned __int8 *)(*a1)[4])
          v102 = (*(unsigned __int8 (**)(_QWORD))(**a1 + 72))(*a1);
        else
          v102 = *v101;
        v103 = (unsigned __int8 *)v19;
        if (*((char *)v19 + 23) < 0)
          v103 = (unsigned __int8 *)*v19;
        if (v102 != v103[v100])
          goto LABEL_217;
        v104 = *a1;
        v105 = (*a1)[3];
        if (v105 == (*a1)[4])
          (*(void (**)(_QWORD *))(*v104 + 80))(v104);
        else
          v104[3] = v105 + 1;
      }
    }
    if (v129 != v128)
    {
      __err = 0;
      std::__check_grouping(&__grouping, v129, v128, &__err);
      if (__err)
        goto LABEL_217;
    }
    v17 = 1;
LABEL_218:
    if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v113.__r_.__value_.__l.__data_);
    if (SHIBYTE(v116) < 0)
      operator delete(__p);
    if (SHIBYTE(v119) < 0)
      operator delete(v117);
    if (SHIBYTE(v122) < 0)
      operator delete(v120);
    if (SHIBYTE(__grouping.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__grouping.__r_.__value_.__l.__data_);
    v106 = v129;
    v129 = 0;
    if (v106)
      v130();
  }
  return v17;
}

void sub_191FEAE1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_191FEB0D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t *a13, uint64_t a14, uint64_t a15, void (*a16)(void))
{
  unint64_t *v17;
  unint64_t v18;

  if (a13 != (unint64_t *)&std::locale::__imp::classic_locale_imp_)
  {
    v17 = a13 + 1;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
      (*(void (**)(unint64_t *))(*a13 + 16))(a13);
  }
  if (a15)
    a16();
  _Unwind_Resume(exception_object);
}

std::string *std::string::append[abi:ne180100]<char *,0>(std::string *this, char *a2, char *a3)
{
  char *v4;
  unint64_t v6;
  unint64_t v7;
  std::string::size_type size;
  std::string::size_type v9;
  std::string *v10;
  unint64_t v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  _BYTE *i;
  char v16;
  std::string::size_type v17;
  void *__p[2];
  unsigned __int8 v20;

  v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  v7 = a3 - a2;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == a2)
      return this;
    size = this->__r_.__value_.__l.__size_;
    v11 = this->__r_.__value_.__r.__words[2];
    v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    v6 = HIBYTE(v11);
  }
  else
  {
    if (a3 == a2)
      return this;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v9 = 22;
    v10 = this;
  }
  if (v10 > (std::string *)v4 || (char *)&v10->__r_.__value_.__l.__data_ + size + 1 <= v4)
  {
    if (v9 - size < v7)
    {
      std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    }
    v14 = this;
    if ((v6 & 0x80) != 0)
      v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    for (i = (char *)v14 + size; v4 != a3; ++i)
    {
      v16 = *v4++;
      *i = v16;
    }
    *i = 0;
    v17 = v7 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      this->__r_.__value_.__l.__size_ = v17;
    else
      *((_BYTE *)&this->__r_.__value_.__s + 23) = v17 & 0x7F;
  }
  else
  {
    std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, v4, a3, v7);
    if ((v20 & 0x80u) == 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    if ((v20 & 0x80u) == 0)
      v13 = v20;
    else
      v13 = (std::string::size_type)__p[1];
    std::string::append(this, (const std::string::value_type *)v12, v13);
    if ((char)v20 < 0)
      operator delete(__p[0]);
  }
  return this;
}

void sub_191FEB2AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__money_get<char>::__gather_info(int a1, std::locale *this, _DWORD *a3, _BYTE *a4, _BYTE *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10)
{
  std::locale::id *v17;
  const std::locale::facet *v18;
  uint64_t result;
  __int128 v20;
  uint64_t v21;

  if (a1)
    v17 = (std::locale::id *)&std::moneypunct<char,true>::id;
  else
    v17 = (std::locale::id *)&std::moneypunct<char,false>::id;
  v18 = std::locale::use_facet(this, v17);
  *a3 = ((uint64_t (*)(const std::locale::facet *))v18->__vftable[3].__on_zero_shared)(v18);
  ((void (*)(__int128 *__return_ptr, const std::locale::facet *))v18->__vftable[2].__on_zero_shared)(&v20, v18);
  if (*(char *)(a9 + 23) < 0)
    operator delete(*(void **)a9);
  *(_OWORD *)a9 = v20;
  *(_QWORD *)(a9 + 16) = v21;
  ((void (*)(__int128 *__return_ptr, const std::locale::facet *))v18->__vftable[2].~facet_0)(&v20, v18);
  if (*(char *)(a8 + 23) < 0)
    operator delete(*(void **)a8);
  *(_OWORD *)a8 = v20;
  *(_QWORD *)(a8 + 16) = v21;
  *a4 = ((uint64_t (*)(const std::locale::facet *))v18->__vftable[1].~facet)(v18);
  *a5 = ((uint64_t (*)(const std::locale::facet *))v18->__vftable[1].~facet_0)(v18);
  ((void (*)(__int128 *__return_ptr, const std::locale::facet *))v18->__vftable[1].__on_zero_shared)(&v20, v18);
  if (*(char *)(a6 + 23) < 0)
    operator delete(*(void **)a6);
  *(_OWORD *)a6 = v20;
  *(_QWORD *)(a6 + 16) = v21;
  ((void (*)(__int128 *__return_ptr, const std::locale::facet *))v18->__vftable[2].~facet)(&v20, v18);
  if (*(char *)(a7 + 23) < 0)
    operator delete(*(void **)a7);
  *(_OWORD *)a7 = v20;
  *(_QWORD *)(a7 + 16) = v21;
  result = ((uint64_t (*)(const std::locale::facet *))v18->__vftable[3].~facet)(v18);
  *a10 = result;
  return result;
}

char *std::__double_or_nothing[abi:ne180100]<char>(void **a1, uint64_t *a2, _QWORD *a3)
{
  void *v6;
  unint64_t v7;
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  char *result;
  void *v12;

  v6 = *a1;
  v7 = *a3 - (_QWORD)*a1;
  v8 = 2 * v7;
  if (2 * v7 <= 1)
    v8 = 1;
  if (v7 >= 0x7FFFFFFFFFFFFFFFLL)
    v9 = -1;
  else
    v9 = v8;
  v10 = *a2;
  if (a1[1] != std::__do_nothing)
  {
    result = (char *)malloc_type_realloc(*a1, v9, 0x47592606uLL);
    if (result)
    {
      *a1 = result;
      goto LABEL_12;
    }
LABEL_13:
    std::__throw_bad_alloc();
  }
  result = (char *)malloc_type_realloc(0, v9, 0x47592606uLL);
  if (!result)
    goto LABEL_13;
  v12 = *a1;
  *a1 = result;
  if (v12)
  {
    ((void (*)(void *))a1[1])(v12);
    result = (char *)*a1;
  }
LABEL_12:
  a1[1] = MEMORY[0x1E0C834A8];
  *a2 = (uint64_t)&result[v10 - (_QWORD)v6];
  *a3 = (char *)*a1 + v9;
  return result;
}

char *std::__double_or_nothing[abi:ne180100]<unsigned int>(void **a1, uint64_t *a2, char **a3)
{
  void *v6;
  unint64_t v7;
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  char *result;
  void *v12;

  v6 = *a1;
  v7 = *a3 - (_BYTE *)*a1;
  v8 = 2 * v7;
  if (*a3 == *a1)
    v8 = 4;
  if (v7 >= 0x7FFFFFFFFFFFFFFFLL)
    v9 = -1;
  else
    v9 = v8;
  v10 = *a2;
  if (a1[1] != std::__do_nothing)
  {
    result = (char *)malloc_type_realloc(*a1, v9, 0x47592606uLL);
    if (result)
    {
      *a1 = result;
      goto LABEL_12;
    }
LABEL_13:
    std::__throw_bad_alloc();
  }
  result = (char *)malloc_type_realloc(0, v9, 0x47592606uLL);
  if (!result)
    goto LABEL_13;
  v12 = *a1;
  *a1 = result;
  if (v12)
  {
    ((void (*)(void *))a1[1])(v12);
    result = (char *)*a1;
  }
LABEL_12:
  a1[1] = MEMORY[0x1E0C834A8];
  *a2 = (uint64_t)&result[v10 - (_QWORD)v6];
  *a3 = (char *)*a1 + (v9 & 0xFFFFFFFFFFFFFFFCLL);
  return result;
}

void std::__check_grouping(const std::string *__grouping, unsigned int *__g, unsigned int *__g_end, std::ios_base::iostate *__err)
{
  std::string::size_type size;
  std::string::size_type v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  const std::string *v11;
  char *v12;
  int v13;
  unsigned int v14;

  size = HIBYTE(__grouping->__r_.__value_.__r.__words[2]);
  LOBYTE(v5) = size;
  if ((size & 0x80u) != 0)
    size = __grouping->__r_.__value_.__l.__size_;
  if ((char *)__g_end - (char *)__g >= 5 && size)
  {
    v6 = __g_end - 1;
    if (__g != __g_end && v6 > __g)
    {
      v7 = __g + 1;
      v8 = __g_end - 1;
      do
      {
        v9 = *(v7 - 1);
        *(v7 - 1) = *v8;
        *v8-- = v9;
      }
      while (v7++ < v8);
      LOBYTE(v5) = *((_BYTE *)&__grouping->__r_.__value_.__s + 23);
    }
    v11 = (const std::string *)__grouping->__r_.__value_.__r.__words[0];
    if ((v5 & 0x80u) == 0)
      v11 = __grouping;
    if (v6 > __g)
    {
      v5 = v5;
      if ((v5 & 0x80u) != 0)
        v5 = __grouping->__r_.__value_.__l.__size_;
      v12 = (char *)v11 + v5;
      do
      {
        v13 = v11->__r_.__value_.__s.__data_[0];
        if ((v13 - 1) <= 0x7D && *__g != v13)
          goto LABEL_24;
        if (v12 - (char *)v11 > 1)
          v11 = (const std::string *)((char *)v11 + 1);
        ++__g;
      }
      while (__g < v6);
    }
    v14 = v11->__r_.__value_.__s.__data_[0];
    if (v14 - 1 <= 0x7D && *v6 - 1 >= v14)
LABEL_24:
      *__err = 4;
  }
}

_QWORD *std::money_get<wchar_t,std::istreambuf_iterator<wchar_t>>::do_get(int a1, _QWORD *a2, _QWORD *a3, int a4, std::ios_base *this, _DWORD *a6, uint64_t a7)
{
  const std::locale::facet *v12;
  char *v13;
  char *v14;
  __int32 *i;
  __int32 v16;
  __int32 *v17;
  char *v18;
  int *v19;
  int v20;
  _BOOL4 v21;
  int *v22;
  int v23;
  _QWORD *v24;
  std::locale::__imp *locale;
  unint64_t *v26;
  unint64_t v27;
  __int32 *v28;
  BOOL v30;
  std::locale v31;
  unint64_t v32;
  __int32 *v33;
  void (*v34)(void);
  _QWORD *v35;
  char v36[100];
  __int32 __s[10];
  char v38[16];
  char v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v33 = (__int32 *)&v39;
  v34 = (void (*)(void))std::__do_nothing;
  v35 = a2;
  std::ios_base::getloc(this);
  v12 = std::locale::use_facet(&v31, &std::ctype<wchar_t>::id);
  v30 = 0;
  if (std::money_get<wchar_t,std::istreambuf_iterator<wchar_t>>::__do_get(&v35, a3, a4, &v31, this->__fmtflags_, a6, &v30, (uint64_t)v12, (void **)&v33, (uint64_t *)&v32, (char *)&v40))
  {
    strcpy(v38, "0123456789");
    ((void (*)(const std::locale::facet *, char *, char *, __int32 *))v12->__vftable[4].~facet)(v12, v38, &v38[10], __s);
    if ((uint64_t)(v32 - (_QWORD)v33) < 393)
    {
      v13 = 0;
      v14 = v36;
    }
    else
    {
      v13 = (char *)malloc_type_malloc(((v32 - (unint64_t)v33) >> 2) + 2, 0x81D7759AuLL);
      v14 = v13;
      if (!v13)
        std::__throw_bad_alloc();
    }
    if (v30)
      *v14++ = 45;
    for (i = v33; (unint64_t)i < v32; ++v14)
    {
      v16 = *i++;
      v17 = wmemchr(__s, v16, 0xAuLL);
      if (v17)
        v18 = (char *)v17;
      else
        v18 = v38;
      *v14 = v38[(v18 - (char *)__s) >> 2];
    }
    *v14 = 0;
    if (sscanf(v36, "%Lf", a7) != 1)
      std::__throw_runtime_error("money_get error");
    if (v13)
      free(v13);
  }
  if (v35)
  {
    v19 = (int *)v35[3];
    if (v19 == (int *)v35[4])
      v20 = (*(uint64_t (**)(void))(*v35 + 72))();
    else
      v20 = *v19;
    if (v20 != -1)
    {
      v21 = v35 == 0;
      if (!a3)
        goto LABEL_22;
      goto LABEL_26;
    }
    v35 = 0;
  }
  v21 = 1;
  if (!a3)
  {
LABEL_22:
    if (!v21)
      goto LABEL_31;
    goto LABEL_30;
  }
LABEL_26:
  v22 = (int *)a3[3];
  if (v22 == (int *)a3[4])
    v23 = (*(uint64_t (**)(_QWORD *))(*a3 + 72))(a3);
  else
    v23 = *v22;
  if (((v21 ^ (v23 == -1)) & 1) == 0)
LABEL_30:
    *a6 |= 2u;
LABEL_31:
  v24 = v35;
  locale = v31.__locale_;
  if (v31.__locale_ != (std::locale::__imp *)&std::locale::__imp::classic_locale_imp_)
  {
    v26 = (unint64_t *)((char *)v31.__locale_ + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
      (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 16))(locale);
  }
  v28 = v33;
  v33 = 0;
  if (v28)
    v34();
  return v24;
}

{
  const std::locale::facet *v12;
  std::wstring::value_type v13;
  int v14;
  int *i;
  int *v16;
  int v17;
  _BOOL4 v18;
  int *v19;
  int v20;
  _QWORD *v21;
  std::locale::__imp *locale;
  unint64_t *v23;
  unint64_t v24;
  int *v25;
  BOOL v27;
  std::locale v28;
  int *v29;
  int *v30;
  void (*v31)(void);
  _QWORD *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v30 = (int *)&v33;
  v31 = (void (*)(void))std::__do_nothing;
  v32 = a2;
  std::ios_base::getloc(this);
  v12 = std::locale::use_facet(&v28, &std::ctype<wchar_t>::id);
  v27 = 0;
  if (std::money_get<wchar_t,std::istreambuf_iterator<wchar_t>>::__do_get(&v32, a3, a4, &v28, this->__fmtflags_, a6, &v27, (uint64_t)v12, (void **)&v30, (uint64_t *)&v29, (char *)&v34))
  {
    if (*(char *)(a7 + 23) < 0)
    {
      **(_DWORD **)a7 = 0;
      *(_QWORD *)(a7 + 8) = 0;
    }
    else
    {
      *(_DWORD *)a7 = 0;
      *(_BYTE *)(a7 + 23) = 0;
    }
    if (v27)
    {
      v13 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v12->__vftable[3].__on_zero_shared)(v12, 45);
      std::wstring::push_back((std::wstring *)a7, v13);
    }
    v14 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v12->__vftable[3].__on_zero_shared)(v12, 48);
    for (i = v30; i < v29 - 1 && *i == v14; ++i)
      ;
    std::wstring::append[abi:ne180100]<wchar_t *,0>((std::wstring *)a7, i, v29);
  }
  if (v32)
  {
    v16 = (int *)v32[3];
    if (v16 == (int *)v32[4])
      v17 = (*(uint64_t (**)(void))(*v32 + 72))();
    else
      v17 = *v16;
    if (v17 != -1)
    {
      v18 = v32 == 0;
      if (!a3)
        goto LABEL_18;
      goto LABEL_22;
    }
    v32 = 0;
  }
  v18 = 1;
  if (!a3)
  {
LABEL_18:
    if (!v18)
      goto LABEL_27;
    goto LABEL_26;
  }
LABEL_22:
  v19 = (int *)a3[3];
  if (v19 == (int *)a3[4])
    v20 = (*(uint64_t (**)(_QWORD *))(*a3 + 72))(a3);
  else
    v20 = *v19;
  if (((v18 ^ (v20 == -1)) & 1) == 0)
LABEL_26:
    *a6 |= 2u;
LABEL_27:
  v21 = v32;
  locale = v28.__locale_;
  if (v28.__locale_ != (std::locale::__imp *)&std::locale::__imp::classic_locale_imp_)
  {
    v23 = (unint64_t *)((char *)v28.__locale_ + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
      (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 16))(locale);
  }
  v25 = v30;
  v30 = 0;
  if (v25)
    v31();
  return v21;
}

void sub_191FEBA30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t *a13, uint64_t a14, uint64_t a15, void (*a16)(void))
{
  void *v16;
  unint64_t *v18;
  unint64_t v19;

  if (v16)
    free(v16);
  if (a13 != (unint64_t *)&std::locale::__imp::classic_locale_imp_)
  {
    v18 = a13 + 1;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
      (*(void (**)(unint64_t *))(*a13 + 16))(a13);
  }
  if (a15)
    a16();
  _Unwind_Resume(exception_object);
}

uint64_t std::money_get<wchar_t,std::istreambuf_iterator<wchar_t>>::__do_get(_QWORD **a1, _QWORD *a2, int a3, std::locale *a4, __int16 a5, _DWORD *a6, BOOL *a7, uint64_t a8, void **a9, uint64_t *a10, char *a11)
{
  _BOOL4 v17;
  _BOOL4 v18;
  int *v19;
  int v20;
  unint64_t v21;
  void **v22;
  _BOOL4 v23;
  _BOOL4 v24;
  int *v25;
  int v26;
  unsigned int *v27;
  uint64_t v28;
  _BOOL4 v30;
  unint64_t v31;
  unint64_t v32;
  int *v33;
  int v34;
  unsigned int v35;
  _BOOL4 v36;
  _BOOL4 v37;
  int *v38;
  int v39;
  unsigned int *v40;
  uint64_t v41;
  _DWORD *v42;
  std::string::size_type v43;
  unsigned int *v44;
  _QWORD *v45;
  uint64_t v46;
  unsigned int *v47;
  _BOOL4 v49;
  _BOOL4 v50;
  int *v51;
  int v52;
  _DWORD *v53;
  uint64_t v54;
  _BOOL4 v55;
  void **v56;
  void **v57;
  _QWORD *v58;
  std::wstring::value_type *v59;
  std::wstring::value_type v60;
  _BOOL4 v61;
  _BOOL4 v62;
  int *v63;
  int v64;
  unsigned int *v65;
  uint64_t v66;
  std::wstring::value_type *v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  char *v71;
  void **v72;
  std::wstring::size_type v73;
  std::wstring::size_type size;
  std::wstring *v75;
  _DWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  int *v82;
  int v83;
  _DWORD *p_p;
  _QWORD *v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  int *v90;
  int v91;
  _QWORD *v92;
  uint64_t v93;
  _BOOL4 v94;
  _BOOL4 v95;
  int *v96;
  int v97;
  unsigned int *v98;
  uint64_t v99;
  int *v100;
  int v101;
  _DWORD *v102;
  int v103;
  _QWORD *v104;
  uint64_t v105;
  BOOL v106;
  void **v107;
  uint64_t v108;
  void **v109;
  _BOOL4 v110;
  _BOOL4 v111;
  int *v112;
  int v113;
  int *v114;
  int v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  char *v121;
  unint64_t v122;
  unsigned int i;
  unint64_t v124;
  uint64_t v125;
  _BOOL4 v126;
  _BOOL4 v127;
  int *v128;
  int v129;
  int *v130;
  int v131;
  _DWORD *v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  unsigned int *v136;
  std::ios_base::iostate __err;
  int v141;
  std::wstring v142;
  void *__p;
  unint64_t v144;
  uint64_t v145;
  void *v146;
  unint64_t v147;
  uint64_t v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  std::string __grouping;
  int v153;
  int v154;
  int v155;
  char *v156;
  unsigned int *v157;
  unsigned int *v158;
  void (*v159)(void);
  _BYTE v160[400];
  uint64_t v161;

  v161 = *MEMORY[0x1E0C80C00];
  v17 = std::istreambuf_iterator<wchar_t>::__test_for_eof[abi:ne180100](a1);
  v18 = v17;
  if (a2)
  {
    v19 = (int *)a2[3];
    if (v19 == (int *)a2[4])
      v20 = (*(uint64_t (**)(_QWORD *))(*a2 + 72))(a2);
    else
      v20 = *v19;
    if (v20 == -1)
      a2 = 0;
    if (((v18 ^ (v20 == -1)) & 1) != 0)
      goto LABEL_10;
LABEL_269:
    v135 = 0;
    *a6 |= 4u;
    return v135;
  }
  if (v17)
    goto LABEL_269;
  a2 = 0;
LABEL_10:
  v158 = (unsigned int *)v160;
  v159 = (void (*)(void))std::__do_nothing;
  v157 = (unsigned int *)v160;
  v156 = (char *)&v161;
  memset(&__grouping, 0, sizeof(__grouping));
  v149 = 0;
  v150 = 0;
  v151 = 0;
  v146 = 0;
  v147 = 0;
  v148 = 0;
  __p = 0;
  v144 = 0;
  v145 = 0;
  memset(&v142, 0, sizeof(v142));
  std::__money_get<wchar_t>::__gather_info(a3, a4, &v155, &v154, &v153, (uint64_t)&__grouping, (uint64_t)&v149, (uint64_t)&v146, (uint64_t)&__p, &v141);
  v21 = 0;
  v22 = 0;
  *a10 = (uint64_t)*a9;
  while (1)
  {
    v23 = std::istreambuf_iterator<wchar_t>::__test_for_eof[abi:ne180100](a1);
    v24 = v23;
    if (!a2)
    {
      if (v23)
        break;
      goto LABEL_20;
    }
    v25 = (int *)a2[3];
    if (v25 == (int *)a2[4])
      v26 = (*(uint64_t (**)(_QWORD *))(*a2 + 72))(a2);
    else
      v26 = *v25;
    if (v26 == -1)
      a2 = 0;
    if (((v24 ^ (v26 == -1)) & 1) == 0)
      break;
LABEL_20:
    switch(*((_BYTE *)&v155 + v21))
    {
      case 0:
        if (v21 == 3)
          goto LABEL_244;
        goto LABEL_93;
      case 1:
        if (v21 == 3)
          goto LABEL_244;
        v27 = (unsigned int *)(*a1)[3];
        if (v27 == (unsigned int *)(*a1)[4])
          v28 = (*(uint64_t (**)(_QWORD))(**a1 + 72))(*a1);
        else
          v28 = *v27;
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a8 + 24))(a8, 0x4000, v28))
          goto LABEL_272;
        v58 = *a1;
        v59 = (std::wstring::value_type *)(*a1)[3];
        if (v59 == (std::wstring::value_type *)(*a1)[4])
          goto LABEL_91;
        v60 = *v59;
        v58[3] = v59 + 1;
        while (2)
        {
          std::wstring::push_back(&v142, v60);
LABEL_93:
          v61 = std::istreambuf_iterator<wchar_t>::__test_for_eof[abi:ne180100](a1);
          v62 = v61;
          if (a2)
          {
            v63 = (int *)a2[3];
            if (v63 == (int *)a2[4])
              v64 = (*(uint64_t (**)(_QWORD *))(*a2 + 72))(a2);
            else
              v64 = *v63;
            if (v64 == -1)
              a2 = 0;
            if (v62 == (v64 == -1))
              goto LABEL_243;
          }
          else if (v61)
          {
            goto LABEL_243;
          }
          v65 = (unsigned int *)(*a1)[3];
          if (v65 == (unsigned int *)(*a1)[4])
            v66 = (*(uint64_t (**)(_QWORD))(**a1 + 72))(*a1);
          else
            v66 = *v65;
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a8 + 24))(a8, 0x4000, v66))
          {
            v58 = *a1;
            v67 = (std::wstring::value_type *)(*a1)[3];
            if (v67 == (std::wstring::value_type *)(*a1)[4])
            {
LABEL_91:
              v60 = (*(uint64_t (**)(_QWORD *))(*v58 + 80))(v58);
            }
            else
            {
              v60 = *v67;
              v58[3] = v67 + 1;
            }
            continue;
          }
          goto LABEL_243;
        }
      case 2:
        if (v21 < 2 || v22)
        {
          v53 = a6;
          v54 = HIBYTE(v151);
          v55 = v151 < 0;
          v56 = (void **)v149;
          if (v151 >= 0)
            v57 = &v149;
          else
            v57 = (void **)v149;
          if (!v21)
          {
LABEL_128:
            v72 = v57;
            goto LABEL_207;
          }
        }
        else
        {
          v30 = v21 == 2 && HIBYTE(v155) != 0;
          if ((a5 & 0x200) == 0 && !v30)
          {
            v22 = 0;
            goto LABEL_243;
          }
          v53 = a6;
          v54 = HIBYTE(v151);
          v55 = v151 < 0;
          v56 = (void **)v149;
          if (v151 >= 0)
            v57 = &v149;
          else
            v57 = (void **)v149;
        }
        if (*((unsigned __int8 *)&v155 + (v21 - 1)) > 1u)
          goto LABEL_128;
        if (v55)
          v68 = v150;
        else
          v68 = v54;
        if (v68)
        {
          do
          {
            v69 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a8 + 24))(a8, 0x4000, *(unsigned int *)v57);
            v54 = HIBYTE(v151);
            v56 = (void **)v149;
            if (!v69)
              break;
            v57 = (void **)((char *)v57 + 4);
            v70 = v150;
            v71 = (char *)&v149;
            if (v151 >= 0)
              v70 = HIBYTE(v151);
            else
              v71 = (char *)v149;
          }
          while (v57 != (void **)&v71[4 * v70]);
        }
        if ((v54 & 0x80u) == 0)
          v72 = &v149;
        else
          v72 = v56;
        v73 = ((char *)v57 - (char *)v72) >> 2;
        if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
        {
          size = v142.__r_.__value_.__l.__size_;
          if (v73 > v142.__r_.__value_.__l.__size_)
            goto LABEL_206;
          v75 = (std::wstring *)v142.__r_.__value_.__r.__words[0];
        }
        else
        {
          size = HIBYTE(v142.__r_.__value_.__r.__words[2]);
          if (v73 > HIBYTE(v142.__r_.__value_.__r.__words[2]))
            goto LABEL_206;
          v75 = &v142;
        }
        if (!memcmp((char *)v75 + 4 * size + -4 * v73, v72, 4 * size - (4 * size - 4 * v73)))
          goto LABEL_207;
LABEL_206:
        v57 = v72;
LABEL_207:
        if ((v54 & 0x80u) == 0)
          v108 = v54;
        else
          v108 = v150;
        v109 = (void **)((char *)v72 + 4 * v108);
        a6 = v53;
        while (v57 != v109)
        {
          v110 = std::istreambuf_iterator<wchar_t>::__test_for_eof[abi:ne180100](a1);
          v111 = v110;
          if (a2)
          {
            v112 = (int *)a2[3];
            if (v112 == (int *)a2[4])
              v113 = (*(uint64_t (**)(_QWORD *))(*a2 + 72))(a2);
            else
              v113 = *v112;
            if (v113 == -1)
              a2 = 0;
            if (v111 == (v113 == -1))
              break;
          }
          else if (v110)
          {
            break;
          }
          v114 = (int *)(*a1)[3];
          if (v114 == (int *)(*a1)[4])
            v115 = (*(uint64_t (**)(_QWORD))(**a1 + 72))(*a1);
          else
            v115 = *v114;
          if (v115 != *(_DWORD *)v57)
            break;
          v116 = *a1;
          v117 = (*a1)[3];
          if (v117 == (*a1)[4])
            (*(void (**)(_QWORD *))(*v116 + 80))(v116);
          else
            v116[3] = v117 + 4;
          v57 = (void **)((char *)v57 + 4);
          v118 = HIBYTE(v151);
          v119 = (char *)&v149;
          if (v151 < 0)
          {
            v119 = (char *)v149;
            v118 = v150;
          }
          v109 = (void **)&v119[4 * v118];
        }
        if ((a5 & 0x200) != 0)
        {
          v120 = HIBYTE(v151);
          v121 = (char *)&v149;
          if (v151 < 0)
          {
            v121 = (char *)v149;
            v120 = v150;
          }
          if (v57 != (void **)&v121[4 * v120])
            goto LABEL_272;
        }
        goto LABEL_243;
      case 3:
        v31 = HIBYTE(v148);
        if (v148 >= 0)
          v32 = HIBYTE(v148);
        else
          v32 = v147;
        if (v32)
        {
          v33 = (int *)(*a1)[3];
          if (v33 == (int *)(*a1)[4])
          {
            v34 = (*(uint64_t (**)(_QWORD))(**a1 + 72))(*a1);
            v31 = HIBYTE(v148);
          }
          else
          {
            v34 = *v33;
          }
          v76 = &v146;
          if ((v31 & 0x80u) != 0)
            v76 = v146;
          if (v34 == *v76)
          {
            v77 = *a1;
            v78 = (*a1)[3];
            if (v78 == (*a1)[4])
            {
              (*(void (**)(_QWORD *))(*v77 + 80))(v77);
              v31 = HIBYTE(v148);
            }
            else
            {
              v77[3] = v78 + 4;
            }
            *a7 = 0;
            if ((v31 & 0x80u) != 0)
              v31 = v147;
            v106 = v31 > 1;
            v107 = &v146;
            goto LABEL_241;
          }
        }
        v79 = HIBYTE(v145);
        v80 = v144;
        if (v145 >= 0)
          v81 = HIBYTE(v145);
        else
          v81 = v144;
        if (v81)
        {
          v82 = (int *)(*a1)[3];
          if (v82 == (int *)(*a1)[4])
          {
            v83 = (*(uint64_t (**)(_QWORD))(**a1 + 72))(*a1);
            v79 = HIBYTE(v145);
          }
          else
          {
            v83 = *v82;
          }
          p_p = &__p;
          if ((v79 & 0x80u) != 0)
            p_p = __p;
          if (v83 == *p_p)
          {
            v85 = *a1;
            v86 = (*a1)[3];
            if (v86 == (*a1)[4])
            {
              (*(void (**)(_QWORD *))(*v85 + 80))(v85);
              v79 = HIBYTE(v145);
            }
            else
            {
              v85[3] = v86 + 4;
            }
            *a7 = 1;
            if ((v79 & 0x80u) == 0)
              v122 = v79;
            else
              v122 = v144;
            v106 = v122 > 1;
            v107 = &__p;
LABEL_241:
            if (v106)
              v22 = v107;
            goto LABEL_243;
          }
          v31 = HIBYTE(v148);
          v80 = v144;
        }
        v87 = v147;
        if ((v31 & 0x80u) == 0)
          v87 = v31;
        if ((v79 & 0x80u) == 0)
          v88 = v79;
        else
          v88 = v80;
        if (v87)
        {
          if (v88)
            goto LABEL_272;
        }
        else if (!v88)
        {
          goto LABEL_243;
        }
        if ((v79 & 0x80u) == 0)
          v89 = v79;
        else
          v89 = v80;
        *a7 = v89 == 0;
        goto LABEL_243;
      case 4:
        v35 = 0;
        while (2)
        {
          v36 = std::istreambuf_iterator<wchar_t>::__test_for_eof[abi:ne180100](a1);
          v37 = v36;
          if (a2)
          {
            v38 = (int *)a2[3];
            if (v38 == (int *)a2[4])
              v39 = (*(uint64_t (**)(_QWORD *))(*a2 + 72))(a2);
            else
              v39 = *v38;
            if (v39 == -1)
              a2 = 0;
            if (v37 == (v39 == -1))
              goto LABEL_71;
          }
          else if (v36)
          {
            goto LABEL_71;
          }
          v40 = (unsigned int *)(*a1)[3];
          if (v40 == (unsigned int *)(*a1)[4])
            v41 = (*(uint64_t (**)(_QWORD))(**a1 + 72))(*a1);
          else
            v41 = *v40;
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a8 + 24))(a8, 1024, v41))
          {
            v42 = (_DWORD *)*a10;
            if ((char *)*a10 == a11)
            {
              std::__double_or_nothing[abi:ne180100]<wchar_t>(a9, a10, &a11);
              v42 = (_DWORD *)*a10;
            }
            *v42 = v41;
            *a10 = (uint64_t)(v42 + 1);
            ++v35;
LABEL_68:
            v45 = *a1;
            v46 = (*a1)[3];
            if (v46 == (*a1)[4])
              (*(void (**)(_QWORD *))(*v45 + 80))(v45);
            else
              v45[3] = v46 + 4;
            continue;
          }
          break;
        }
        v43 = HIBYTE(__grouping.__r_.__value_.__r.__words[2]);
        if ((__grouping.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v43 = __grouping.__r_.__value_.__l.__size_;
        if (v43 && v35 && (_DWORD)v41 == v153)
        {
          v44 = v157;
          if (v157 == (unsigned int *)v156)
          {
            std::__double_or_nothing[abi:ne180100]<unsigned int>((void **)&v158, (uint64_t *)&v157, &v156);
            v44 = v157;
          }
          *v44 = v35;
          v35 = 0;
          v157 = v44 + 1;
          goto LABEL_68;
        }
LABEL_71:
        v47 = v157;
        if (v158 != v157 && v35 != 0)
        {
          if (v157 == (unsigned int *)v156)
          {
            std::__double_or_nothing[abi:ne180100]<unsigned int>((void **)&v158, (uint64_t *)&v157, &v156);
            v47 = v157;
          }
          *v47 = v35;
          v157 = v47 + 1;
        }
        if (v141 >= 1)
        {
          v49 = std::istreambuf_iterator<wchar_t>::__test_for_eof[abi:ne180100](a1);
          v50 = v49;
          if (a2)
          {
            v51 = (int *)a2[3];
            if (v51 == (int *)a2[4])
              v52 = (*(uint64_t (**)(_QWORD *))(*a2 + 72))(a2);
            else
              v52 = *v51;
            if (v52 == -1)
              a2 = 0;
            if (v50 == (v52 == -1))
              goto LABEL_272;
          }
          else
          {
            if (v49)
              goto LABEL_272;
            a2 = 0;
          }
          v90 = (int *)(*a1)[3];
          if (v90 == (int *)(*a1)[4])
            v91 = (*(uint64_t (**)(_QWORD))(**a1 + 72))(*a1);
          else
            v91 = *v90;
          if (v91 != v154)
            goto LABEL_272;
          v92 = *a1;
          v93 = (*a1)[3];
          if (v93 == (*a1)[4])
            (*(void (**)(_QWORD *))(*v92 + 80))(v92);
          else
            v92[3] = v93 + 4;
          if (v141 >= 1)
          {
            do
            {
              v94 = std::istreambuf_iterator<wchar_t>::__test_for_eof[abi:ne180100](a1);
              v95 = v94;
              if (a2)
              {
                v96 = (int *)a2[3];
                if (v96 == (int *)a2[4])
                  v97 = (*(uint64_t (**)(_QWORD *))(*a2 + 72))(a2);
                else
                  v97 = *v96;
                if (v97 == -1)
                  a2 = 0;
                if (v95 == (v97 == -1))
                  goto LABEL_272;
              }
              else
              {
                if (v94)
                  goto LABEL_272;
                a2 = 0;
              }
              v98 = (unsigned int *)(*a1)[3];
              if (v98 == (unsigned int *)(*a1)[4])
                v99 = (*(uint64_t (**)(_QWORD))(**a1 + 72))(*a1);
              else
                v99 = *v98;
              if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a8 + 24))(a8, 1024, v99) & 1) == 0)
                goto LABEL_272;
              if ((char *)*a10 == a11)
                std::__double_or_nothing[abi:ne180100]<wchar_t>(a9, a10, &a11);
              v100 = (int *)(*a1)[3];
              if (v100 == (int *)(*a1)[4])
                v101 = (*(uint64_t (**)(_QWORD))(**a1 + 72))(*a1);
              else
                v101 = *v100;
              v102 = (_DWORD *)*a10;
              *v102 = v101;
              *a10 = (uint64_t)(v102 + 1);
              v103 = --v141;
              v104 = *a1;
              v105 = (*a1)[3];
              if (v105 == (*a1)[4])
              {
                (*(void (**)(_QWORD *))(*v104 + 80))(v104);
                v103 = v141;
              }
              else
              {
                v104[3] = v105 + 4;
              }
            }
            while (v103 > 0);
          }
        }
        if ((void *)*a10 == *a9)
          goto LABEL_272;
LABEL_243:
        if (++v21 == 4)
          goto LABEL_244;
        break;
      default:
        goto LABEL_243;
    }
  }
LABEL_244:
  if (v22)
  {
    for (i = 1; ; i = v125 + 1)
    {
      v124 = *((char *)v22 + 23) < 0 ? (unint64_t)v22[1] : *((unsigned __int8 *)v22 + 23);
      v125 = i;
      if (v124 <= i)
        break;
      v126 = std::istreambuf_iterator<wchar_t>::__test_for_eof[abi:ne180100](a1);
      v127 = v126;
      if (a2)
      {
        v128 = (int *)a2[3];
        if (v128 == (int *)a2[4])
          v129 = (*(uint64_t (**)(_QWORD *))(*a2 + 72))(a2);
        else
          v129 = *v128;
        if (v129 == -1)
          a2 = 0;
        if (v127 == (v129 == -1))
          goto LABEL_272;
      }
      else
      {
        if (v126)
          goto LABEL_272;
        a2 = 0;
      }
      v130 = (int *)(*a1)[3];
      if (v130 == (int *)(*a1)[4])
        v131 = (*(uint64_t (**)(_QWORD))(**a1 + 72))(*a1);
      else
        v131 = *v130;
      v132 = v22;
      if (*((char *)v22 + 23) < 0)
        v132 = *v22;
      if (v131 != v132[v125])
        goto LABEL_272;
      v133 = *a1;
      v134 = (*a1)[3];
      if (v134 == (*a1)[4])
        (*(void (**)(_QWORD *))(*v133 + 80))(v133);
      else
        v133[3] = v134 + 4;
    }
  }
  if (v158 == v157 || (__err = 0, std::__check_grouping(&__grouping, v158, v157, &__err), !__err))
  {
    v135 = 1;
  }
  else
  {
LABEL_272:
    v135 = 0;
    *a6 |= 4u;
  }
  if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v142.__r_.__value_.__l.__data_);
  if (SHIBYTE(v145) < 0)
    operator delete(__p);
  if (SHIBYTE(v148) < 0)
    operator delete(v146);
  if (SHIBYTE(v151) < 0)
    operator delete(v149);
  if (SHIBYTE(__grouping.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__grouping.__r_.__value_.__l.__data_);
  v136 = v158;
  v158 = 0;
  if (v136)
    v159();
  return v135;
}

void sub_191FEC760(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_191FECA74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t *a13, uint64_t a14, uint64_t a15, void (*a16)(void))
{
  unint64_t *v17;
  unint64_t v18;

  if (a13 != (unint64_t *)&std::locale::__imp::classic_locale_imp_)
  {
    v17 = a13 + 1;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
      (*(void (**)(unint64_t *))(*a13 + 16))(a13);
  }
  if (a15)
    a16();
  _Unwind_Resume(exception_object);
}

std::wstring *std::wstring::append[abi:ne180100]<wchar_t *,0>(std::wstring *this, int *a2, int *a3)
{
  int *v4;
  unint64_t v6;
  uint64_t v7;
  std::wstring::size_type size;
  std::wstring::size_type v9;
  std::wstring *v10;
  unint64_t v11;
  unint64_t v12;
  void **v13;
  std::wstring::size_type v14;
  std::wstring *v15;
  int *v16;
  int v17;
  std::wstring::size_type v18;
  void *__p[2];
  unsigned __int8 v21;

  v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    v7 = (char *)a3 - (char *)a2;
    if (a3 == a2)
      return this;
    size = this->__r_.__value_.__l.__size_;
    v11 = this->__r_.__value_.__r.__words[2];
    v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v10 = (std::wstring *)this->__r_.__value_.__r.__words[0];
    v6 = HIBYTE(v11);
  }
  else
  {
    v7 = (char *)a3 - (char *)a2;
    if (a3 == a2)
      return this;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v9 = 4;
    v10 = this;
  }
  v12 = v7 >> 2;
  if (v10 > (std::wstring *)v4 || (char *)v10->__r_.__value_.__r.__words + 4 * size + 4 <= (char *)v4)
  {
    if (v9 - size < v12)
    {
      std::wstring::__grow_by(this, v9, size - v9 + v12, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    }
    v15 = this;
    if ((v6 & 0x80) != 0)
      v15 = (std::wstring *)this->__r_.__value_.__r.__words[0];
    v16 = (int *)((char *)v15 + 4 * size);
    while (v4 != a3)
    {
      v17 = *v4++;
      *v16++ = v17;
    }
    *v16 = 0;
    v18 = v12 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      this->__r_.__value_.__l.__size_ = v18;
    else
      *((_BYTE *)&this->__r_.__value_.__s + 23) = v18 & 0x7F;
  }
  else
  {
    std::wstring::__init_with_size[abi:ne180100]<wchar_t *,wchar_t *>(__p, v4, a3, v12);
    if ((v21 & 0x80u) == 0)
      v13 = __p;
    else
      v13 = (void **)__p[0];
    if ((v21 & 0x80u) == 0)
      v14 = v21;
    else
      v14 = (std::wstring::size_type)__p[1];
    std::wstring::append(this, (const std::wstring::value_type *)v13, v14);
    if ((char)v21 < 0)
      operator delete(__p[0]);
  }
  return this;
}

void sub_191FECC54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__money_get<wchar_t>::__gather_info(int a1, std::locale *this, _DWORD *a3, _DWORD *a4, _DWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10)
{
  std::locale::id *v17;
  const std::locale::facet *v18;
  uint64_t result;
  __int128 v20;
  uint64_t v21;

  if (a1)
    v17 = (std::locale::id *)&std::moneypunct<wchar_t,true>::id;
  else
    v17 = (std::locale::id *)&std::moneypunct<wchar_t,false>::id;
  v18 = std::locale::use_facet(this, v17);
  *a3 = ((uint64_t (*)(const std::locale::facet *))v18->__vftable[3].__on_zero_shared)(v18);
  ((void (*)(__int128 *__return_ptr, const std::locale::facet *))v18->__vftable[2].__on_zero_shared)(&v20, v18);
  if (*(char *)(a9 + 23) < 0)
    operator delete(*(void **)a9);
  *(_OWORD *)a9 = v20;
  *(_QWORD *)(a9 + 16) = v21;
  ((void (*)(__int128 *__return_ptr, const std::locale::facet *))v18->__vftable[2].~facet_0)(&v20, v18);
  if (*(char *)(a8 + 23) < 0)
    operator delete(*(void **)a8);
  *(_OWORD *)a8 = v20;
  *(_QWORD *)(a8 + 16) = v21;
  *a4 = ((uint64_t (*)(const std::locale::facet *))v18->__vftable[1].~facet)(v18);
  *a5 = ((uint64_t (*)(const std::locale::facet *))v18->__vftable[1].~facet_0)(v18);
  ((void (*)(__int128 *__return_ptr, const std::locale::facet *))v18->__vftable[1].__on_zero_shared)(&v20, v18);
  if (*(char *)(a6 + 23) < 0)
    operator delete(*(void **)a6);
  *(_OWORD *)a6 = v20;
  *(_QWORD *)(a6 + 16) = v21;
  ((void (*)(__int128 *__return_ptr, const std::locale::facet *))v18->__vftable[2].~facet)(&v20, v18);
  if (*(char *)(a7 + 23) < 0)
    operator delete(*(void **)a7);
  *(_OWORD *)a7 = v20;
  *(_QWORD *)(a7 + 16) = v21;
  result = ((uint64_t (*)(const std::locale::facet *))v18->__vftable[3].~facet)(v18);
  *a10 = result;
  return result;
}

char *std::__double_or_nothing[abi:ne180100]<wchar_t>(void **a1, uint64_t *a2, char **a3)
{
  void *v6;
  unint64_t v7;
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  char *result;
  void *v12;

  v6 = *a1;
  v7 = *a3 - (_BYTE *)*a1;
  v8 = 2 * v7;
  if (*a3 == *a1)
    v8 = 4;
  if (v7 >= 0x7FFFFFFFFFFFFFFFLL)
    v9 = -1;
  else
    v9 = v8;
  v10 = *a2;
  if (a1[1] != std::__do_nothing)
  {
    result = (char *)malloc_type_realloc(*a1, v9, 0x47592606uLL);
    if (result)
    {
      *a1 = result;
      goto LABEL_12;
    }
LABEL_13:
    std::__throw_bad_alloc();
  }
  result = (char *)malloc_type_realloc(0, v9, 0x47592606uLL);
  if (!result)
    goto LABEL_13;
  v12 = *a1;
  *a1 = result;
  if (v12)
  {
    ((void (*)(void *))a1[1])(v12);
    result = (char *)*a1;
  }
LABEL_12:
  a1[1] = MEMORY[0x1E0C834A8];
  *a2 = (uint64_t)&result[v10 - (_QWORD)v6];
  *a3 = (char *)*a1 + (v9 & 0xFFFFFFFFFFFFFFFCLL);
  return result;
}

uint64_t std::money_put<char,std::ostreambuf_iterator<char>>::do_put(double a1, uint64_t a2, uint64_t a3, int a4, const std::ios_base *a5, int a6)
{
  unsigned int v11;
  int v12;
  int v13;
  char *v14;
  void *v15;
  void *v16;
  char *v17;
  std::locale::facet *v18;
  _BOOL4 v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  char *v29;
  uint64_t v30;
  std::locale::__imp *locale;
  unint64_t *v32;
  unint64_t v33;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  void *__p;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45[2];
  uint64_t v46;
  char v47;
  char v48;
  int v49;
  std::locale v50;
  char *v51;
  char v52;
  char v53;
  char __str[100];
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v51 = __str;
  v11 = snprintf(__str, 0x64uLL, "%.0Lf", a1);
  if (v11 < 0x64)
  {
    v13 = v11;
    v16 = 0;
    v14 = 0;
    v17 = &v53;
  }
  else
  {
    v12 = asprintf_l(&v51, 0, "%.0Lf", a1);
    v13 = v12;
    if (v12 == -1)
      std::__throw_bad_alloc();
    v14 = v51;
    v15 = malloc_type_malloc(v12, 0x100004077774924uLL);
    v16 = v15;
    if (!v15)
      std::__throw_bad_alloc();
    v17 = (char *)v15;
  }
  v35 = v14;
  std::ios_base::getloc(a5);
  v18 = (std::locale::facet *)std::locale::use_facet(&v50, &std::ctype<char>::id);
  ((void (*)(std::locale::facet *, char *, char *, char *))v18->__vftable[2].__on_zero_shared)(v18, v51, &v51[v13], v17);
  v19 = v13 >= 1 && *v51 == 45;
  v45[0] = 0;
  v45[1] = 0;
  v46 = 0;
  v42 = 0;
  v43 = 0;
  v44 = 0;
  __p = 0;
  v40 = 0;
  v41 = 0;
  std::__money_put<char>::__gather_info(a4, v19, &v50, &v49, &v48, &v47, (uint64_t)v45, (uint64_t)&v42, (uint64_t)&__p, &v38);
  v20 = v13;
  v21 = v38;
  if (v13 <= v38)
  {
    v25 = HIBYTE(v41);
    if (v41 < 0)
      v25 = v40;
    v26 = HIBYTE(v44);
    if (v44 < 0)
      v26 = v43;
    v24 = v38 + v25 + v26 + 2;
  }
  else
  {
    v22 = HIBYTE(v41);
    if (v41 < 0)
      v22 = v40;
    v23 = HIBYTE(v44);
    if (v44 < 0)
      v23 = v43;
    v24 = v38 + 2 * (v13 - (uint64_t)v38) + v22 + v23 + 1;
  }
  if (v24 < 0x65)
  {
    v28 = 0;
    v29 = &v52;
  }
  else
  {
    v27 = malloc_type_malloc(v24, 0x100004077774924uLL);
    v28 = v27;
    if (!v27)
      std::__throw_bad_alloc();
    v21 = v38;
    v29 = (char *)v27;
  }
  std::__money_put<char>::__format(v29, (void **)&v37, (void **)&v36, a5->__fmtflags_, v17, (unsigned __int8 *)&v17[v20], v18, v19, (uint64_t)&v49, v48, v47, (char *)v45, (const void **)&v42, &__p, v21);
  v30 = std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)v29, v37, v36, (uint64_t)a5, a6);
  if (v28)
    free(v28);
  if (SHIBYTE(v41) < 0)
    operator delete(__p);
  if (SHIBYTE(v44) < 0)
    operator delete(v42);
  if (SHIBYTE(v46) < 0)
    operator delete(v45[0]);
  locale = v50.__locale_;
  if (v50.__locale_ != (std::locale::__imp *)&std::locale::__imp::classic_locale_imp_)
  {
    v32 = (unint64_t *)((char *)v50.__locale_ + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
      (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 16))(locale);
  }
  if (v16)
    free(v16);
  if (v35)
    free(v35);
  return v30;
}

void sub_191FED2A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,unint64_t *a38)
{
  void *v38;
  unint64_t *v40;
  unint64_t v41;

  if (a24 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  if (a36 < 0)
    operator delete(a31);
  if (a38 != (unint64_t *)&std::locale::__imp::classic_locale_imp_)
  {
    v40 = a38 + 1;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
      (*(void (**)(unint64_t *))(*a38 + 16))(a38);
  }
  if (v38)
    free(v38);
  if (a15)
    free(a15);
  _Unwind_Resume(exception_object);
}

uint64_t std::__money_put<char>::__gather_info(int a1, int a2, std::locale *this, _DWORD *a4, _BYTE *a5, _BYTE *a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10)
{
  std::locale::id *v16;
  const std::locale::facet *v17;
  const std::locale::facet *v18;
  std::locale::facet_vtbl *v19;
  uint64_t result;
  __int128 v21;
  uint64_t v22;

  if (a1)
    v16 = (std::locale::id *)&std::moneypunct<char,true>::id;
  else
    v16 = (std::locale::id *)&std::moneypunct<char,false>::id;
  v17 = std::locale::use_facet(this, v16);
  v18 = v17;
  v19 = v17->__vftable;
  if (a2)
  {
    *a4 = ((uint64_t (*)(const std::locale::facet *))v19[3].__on_zero_shared)(v17);
    ((void (*)(__int128 *__return_ptr, const std::locale::facet *))v18->__vftable[2].__on_zero_shared)(&v21, v18);
  }
  else
  {
    *a4 = ((uint64_t (*)(const std::locale::facet *))v19[3].~facet_0)(v17);
    ((void (*)(__int128 *__return_ptr, const std::locale::facet *))v18->__vftable[2].~facet_0)(&v21, v18);
  }
  if (*(char *)(a9 + 23) < 0)
    operator delete(*(void **)a9);
  *(_OWORD *)a9 = v21;
  *(_QWORD *)(a9 + 16) = v22;
  *a5 = ((uint64_t (*)(const std::locale::facet *))v18->__vftable[1].~facet)(v18);
  *a6 = ((uint64_t (*)(const std::locale::facet *))v18->__vftable[1].~facet_0)(v18);
  ((void (*)(__int128 *__return_ptr, const std::locale::facet *))v18->__vftable[1].__on_zero_shared)(&v21, v18);
  if (*(char *)(a7 + 23) < 0)
    operator delete(*(void **)a7);
  *(_OWORD *)a7 = v21;
  *(_QWORD *)(a7 + 16) = v22;
  ((void (*)(__int128 *__return_ptr, const std::locale::facet *))v18->__vftable[2].~facet)(&v21, v18);
  if (*(char *)(a8 + 23) < 0)
    operator delete(*(void **)a8);
  *(_OWORD *)a8 = v21;
  *(_QWORD *)(a8 + 16) = v22;
  result = ((uint64_t (*)(const std::locale::facet *))v18->__vftable[3].~facet)(v18);
  *a10 = result;
  return result;
}

void *std::__money_put<char>::__format(void *result, void **a2, void **a3, __int16 a4, char *a5, unsigned __int8 *a6, _QWORD *a7, unsigned int a8, uint64_t a9, char a10, char a11, char *a12, const void **a13, _BYTE *a14, int a15)
{
  void **v18;
  uint64_t v19;
  const void **v20;
  _BYTE *v21;
  _BYTE *v22;
  int v23;
  size_t v24;
  const void *v25;
  char *v26;
  unsigned __int8 *v27;
  char *v28;
  char *v29;
  int v30;
  int v31;
  char v32;
  _BYTE *v33;
  const void **v34;
  char *v35;
  char v36;
  _BYTE *v37;
  unsigned int v38;
  _BYTE *v39;
  _BYTE *v40;
  char *v41;
  _BYTE *v42;
  int v43;
  unint64_t v44;
  int v45;
  _BYTE *v46;
  unint64_t v47;
  int v48;
  char *v49;
  char v50;
  _BYTE *v51;
  char *v52;
  BOOL v53;
  char *v54;
  char v55;
  unint64_t v57;
  void **v58;
  char *v59;
  unint64_t v60;
  void *v61;
  void *v62;
  uint64_t v64;

  v18 = a2;
  v19 = 0;
  v20 = a13;
  v21 = a14;
  v64 = a8;
  v62 = result;
  *a3 = result;
  while (2)
  {
    switch(*(_BYTE *)(a9 + v19))
    {
      case 0:
        *v18 = *a3;
        goto LABEL_70;
      case 1:
        *v18 = *a3;
        result = (void *)(*(uint64_t (**)(_QWORD *, uint64_t))(*a7 + 56))(a7, 32);
        v22 = *a3;
        *a3 = (char *)*a3 + 1;
        *v22 = (_BYTE)result;
        goto LABEL_70;
      case 2:
        v23 = *((char *)v20 + 23);
        if ((v23 & 0x80000000) == 0)
        {
          if ((a4 & 0x200) == 0)
            goto LABEL_70;
          v24 = *((unsigned __int8 *)v20 + 23);
          if (!(_BYTE)v23)
            goto LABEL_69;
          v25 = a13;
          goto LABEL_29;
        }
        if ((a4 & 0x200) == 0)
          goto LABEL_70;
        v34 = v20;
        v24 = (size_t)v20[1];
        if (v24)
        {
          v25 = *v34;
LABEL_29:
          v35 = (char *)*a3;
          result = memmove(*a3, v25, v24);
          *a3 = &v35[v24];
          v21 = a14;
          v20 = a13;
          goto LABEL_70;
        }
        v20 = v34;
LABEL_70:
        if (++v19 != 4)
          continue;
        if ((char)v21[23] < 0)
        {
          v57 = *((_QWORD *)v21 + 1);
          if (v57 > 1)
          {
            v58 = v18;
            v21 = *(_BYTE **)v21;
LABEL_78:
            v59 = (char *)*a3;
            v60 = v57 - 1;
            result = memmove(*a3, v21 + 1, v57 - 1);
            *a3 = &v59[v60];
            v18 = v58;
          }
        }
        else
        {
          v57 = v21[23];
          if (v57 > 1)
          {
            v58 = v18;
            goto LABEL_78;
          }
        }
        if ((a4 & 0xB0) != 0x10)
        {
          v61 = v62;
          if ((a4 & 0xB0) == 0x20)
            v61 = *a3;
          *v18 = v61;
        }
        return result;
      case 3:
        if ((char)v21[23] < 0)
        {
          if (!*((_QWORD *)v21 + 1))
            goto LABEL_70;
          v26 = *(char **)v21;
        }
        else
        {
          v26 = v21;
          if (!v21[23])
            goto LABEL_70;
        }
        v36 = *v26;
        v37 = *a3;
        *a3 = (char *)*a3 + 1;
        *v37 = v36;
        goto LABEL_70;
      case 4:
        a5 += v64;
        v27 = (unsigned __int8 *)a5;
        if (a5 < (char *)a6)
        {
          v27 = (unsigned __int8 *)a5;
          while (((char)*v27 & 0x80000000) == 0 && (*(_DWORD *)(a7[2] + 4 * *v27) & 0x400) != 0)
          {
            if (++v27 >= a6)
            {
              v27 = a6;
              break;
            }
          }
        }
        v28 = (char *)*a3;
        if (a15 < 1)
          goto LABEL_39;
        if (v27 <= (unsigned __int8 *)a5)
        {
          v30 = a15;
        }
        else
        {
          v29 = (char *)(v27 - 1);
          v30 = a15;
          do
          {
            v31 = v30--;
            v53 = v29 > a5;
            v32 = *v29--;
            v33 = *a3;
            *a3 = (char *)*a3 + 1;
            *v33 = v32;
          }
          while (v53 && v31 != 1);
          v27 = (unsigned __int8 *)(v29 + 1);
          if (v31 == 1)
          {
            v30 = 0;
            result = 0;
            goto LABEL_35;
          }
        }
        result = (void *)(*(uint64_t (**)(_QWORD *, uint64_t))(*a7 + 56))(a7, 48);
LABEL_35:
        if (v30 >= 1)
        {
          v38 = v30 + 1;
          do
          {
            v39 = *a3;
            *a3 = (char *)*a3 + 1;
            *v39 = (_BYTE)result;
            --v38;
          }
          while (v38 > 1);
        }
        v40 = *a3;
        *a3 = (char *)*a3 + 1;
        *v40 = a10;
        v18 = a2;
LABEL_39:
        if (v27 == (unsigned __int8 *)a5)
        {
          result = (void *)(*(uint64_t (**)(_QWORD *, uint64_t))(*a7 + 56))(a7, 48);
          v42 = *a3;
          *a3 = (char *)*a3 + 1;
          *v42 = (_BYTE)result;
          goto LABEL_60;
        }
        if (a12[23] < 0)
        {
          if (*((_QWORD *)a12 + 1))
          {
            v41 = *(char **)a12;
LABEL_46:
            v43 = *v41;
            goto LABEL_48;
          }
        }
        else
        {
          v41 = a12;
          if (a12[23])
            goto LABEL_46;
        }
        v43 = -1;
LABEL_48:
        LODWORD(v44) = 0;
        v45 = 0;
        do
        {
          if (v45 == v43)
          {
            v46 = *a3;
            *a3 = (char *)*a3 + 1;
            *v46 = a11;
            v44 = (v44 + 1);
            v47 = a12[23];
            v48 = (char)v47;
            if ((v47 & 0x80u) != 0)
              v47 = *((_QWORD *)a12 + 1);
            if (v47 <= v44)
            {
              v45 = 0;
            }
            else
            {
              v45 = 0;
              v49 = *(char **)a12;
              if (v48 >= 0)
                v49 = a12;
              v43 = v49[v44];
              if (v43 == 127)
                LOBYTE(v43) = -1;
              v43 = (char)v43;
            }
          }
          v50 = *--v27;
          v51 = *a3;
          *a3 = (char *)*a3 + 1;
          *v51 = v50;
          ++v45;
        }
        while (v27 != (unsigned __int8 *)a5);
LABEL_60:
        v52 = (char *)*a3 - 1;
        v53 = v28 != *a3 && v52 > v28;
        if (v53)
        {
          v54 = v28 + 1;
          do
          {
            v55 = *(v54 - 1);
            *(v54 - 1) = *v52;
            *v52-- = v55;
          }
          while (v54++ < v52);
        }
        v21 = a14;
LABEL_69:
        v20 = a13;
        goto LABEL_70;
      default:
        goto LABEL_70;
    }
  }
}

uint64_t std::money_put<char,std::ostreambuf_iterator<char>>::do_put(int a1, uint64_t a2, int a3, std::ios_base *this, int a5, unsigned __int8 *a6)
{
  const std::locale::facet *v11;
  _QWORD *v12;
  unsigned __int8 *v13;
  int v14;
  _BOOL4 v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  std::locale::__imp *locale;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v34;
  uint64_t v35;
  int v36;
  void *__p;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43[2];
  uint64_t v44;
  char v45;
  char v46;
  int v47;
  std::locale v48;
  char v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  std::ios_base::getloc(this);
  v11 = std::locale::use_facet(&v48, &std::ctype<char>::id);
  v12 = &v11->__vftable;
  if (((char)a6[23] & 0x80000000) == 0)
  {
    v13 = a6;
    if (!a6[23])
      goto LABEL_7;
LABEL_6:
    v14 = *v13;
    v15 = v14 == ((unsigned __int8 (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 45);
    goto LABEL_8;
  }
  if (*((_QWORD *)a6 + 1))
  {
    v13 = *(unsigned __int8 **)a6;
    goto LABEL_6;
  }
LABEL_7:
  v15 = 0;
LABEL_8:
  v43[0] = 0;
  v43[1] = 0;
  v44 = 0;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  __p = 0;
  v38 = 0;
  v39 = 0;
  std::__money_put<char>::__gather_info(a3, v15, &v48, &v47, &v46, &v45, (uint64_t)v43, (uint64_t)&v40, (uint64_t)&__p, &v36);
  LODWORD(v16) = (char)a6[23];
  if ((v16 & 0x80000000) != 0)
  {
    v18 = *((_QWORD *)a6 + 1);
    v17 = v36;
    if (v36 < (int)v18)
      goto LABEL_12;
  }
  else
  {
    v17 = v36;
    if (v36 < a6[23])
    {
      v18 = a6[23];
LABEL_12:
      v19 = 2 * (v18 - v17);
      v20 = HIBYTE(v39);
      if (v39 < 0)
        v20 = v38;
      v21 = HIBYTE(v42);
      if (v42 < 0)
        v21 = v41;
      v22 = v19 + v17 + v20 + v21 + 1;
      goto LABEL_22;
    }
  }
  v23 = HIBYTE(v39);
  if (v39 < 0)
    v23 = v38;
  v24 = HIBYTE(v42);
  if (v42 < 0)
    v24 = v41;
  v22 = v23 + v17 + v24 + 2;
LABEL_22:
  if (v22 < 0x65)
  {
    v26 = 0;
    v27 = &v49;
  }
  else
  {
    v25 = malloc_type_malloc(v22, 0x100004077774924uLL);
    v26 = v25;
    if (!v25)
      std::__throw_bad_alloc();
    LOBYTE(v16) = a6[23];
    v17 = v36;
    v27 = (char *)v25;
  }
  v16 = v16;
  if ((v16 & 0x80u) == 0)
    v28 = (char *)a6;
  else
    v28 = *(char **)a6;
  if ((v16 & 0x80u) != 0)
    v16 = *((_QWORD *)a6 + 1);
  std::__money_put<char>::__format(v27, (void **)&v35, (void **)&v34, this->__fmtflags_, v28, (unsigned __int8 *)&v28[v16], v12, v15, (uint64_t)&v47, v46, v45, (char *)v43, (const void **)&v40, &__p, v17);
  v29 = std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v27, v35, v34, (uint64_t)this, a5);
  if (v26)
    free(v26);
  if (SHIBYTE(v39) < 0)
    operator delete(__p);
  if (SHIBYTE(v42) < 0)
    operator delete(v40);
  if (SHIBYTE(v44) < 0)
    operator delete(v43[0]);
  locale = v48.__locale_;
  if (v48.__locale_ != (std::locale::__imp *)&std::locale::__imp::classic_locale_imp_)
  {
    v31 = (unint64_t *)((char *)v48.__locale_ + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
      (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 16))(locale);
  }
  return v29;
}

void sub_191FEDC6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,unint64_t *a37)
{
  unint64_t *v38;
  unint64_t v39;

  if (a37 != (unint64_t *)&std::locale::__imp::classic_locale_imp_)
  {
    v38 = a37 + 1;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
      (*(void (**)(unint64_t *))(*a37 + 16))(a37);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::money_put<wchar_t,std::ostreambuf_iterator<wchar_t>>::do_put(double a1, uint64_t a2, uint64_t a3, int a4, const std::ios_base *a5, int a6)
{
  unsigned int v11;
  int v12;
  int v13;
  char *v14;
  void *v15;
  void *v16;
  unsigned int *v17;
  const std::locale::facet *v18;
  _BOOL4 v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  char *v29;
  uint64_t v30;
  std::locale::__imp *locale;
  unint64_t *v32;
  unint64_t v33;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  void *__p;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45[2];
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  std::locale v50;
  char *v51;
  char v52;
  char v53;
  char __str[100];
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v51 = __str;
  v11 = snprintf(__str, 0x64uLL, "%.0Lf", a1);
  if (v11 < 0x64)
  {
    v13 = v11;
    v16 = 0;
    v14 = 0;
    v17 = (unsigned int *)&v53;
  }
  else
  {
    v12 = asprintf_l(&v51, 0, "%.0Lf", a1);
    v13 = v12;
    if (v12 == -1)
      std::__throw_bad_alloc();
    v14 = v51;
    v15 = malloc_type_malloc(4 * v12, 0x100004052888210uLL);
    v16 = v15;
    if (!v15)
      std::__throw_bad_alloc();
    v17 = (unsigned int *)v15;
  }
  v35 = v14;
  std::ios_base::getloc(a5);
  v18 = std::locale::use_facet(&v50, &std::ctype<wchar_t>::id);
  ((void (*)(const std::locale::facet *, char *, char *, unsigned int *))v18->__vftable[4].~facet)(v18, v51, &v51[v13], v17);
  v19 = v13 >= 1 && *v51 == 45;
  v45[0] = 0;
  v45[1] = 0;
  v46 = 0;
  v42 = 0;
  v43 = 0;
  v44 = 0;
  __p = 0;
  v40 = 0;
  v41 = 0;
  std::__money_put<wchar_t>::__gather_info(a4, v19, &v50, &v49, &v48, &v47, (uint64_t)v45, (uint64_t)&v42, (uint64_t)&__p, &v38);
  v20 = v13;
  v21 = v38;
  if (v13 <= v38)
  {
    v25 = HIBYTE(v41);
    if (v41 < 0)
      v25 = v40;
    v26 = HIBYTE(v44);
    if (v44 < 0)
      v26 = v43;
    v24 = v38 + v25 + v26 + 2;
  }
  else
  {
    v22 = HIBYTE(v41);
    if (v41 < 0)
      v22 = v40;
    v23 = HIBYTE(v44);
    if (v44 < 0)
      v23 = v43;
    v24 = v38 + 2 * (v13 - (uint64_t)v38) + v22 + v23 + 1;
  }
  if (v24 < 0x65)
  {
    v28 = 0;
    v29 = &v52;
  }
  else
  {
    v27 = malloc_type_malloc(4 * v24, 0x100004052888210uLL);
    v28 = v27;
    if (!v27)
      std::__throw_bad_alloc();
    v21 = v38;
    v29 = (char *)v27;
  }
  std::__money_put<wchar_t>::__format(v29, (void **)&v37, (void **)&v36, a5->__fmtflags_, v17, (unint64_t)&v17[v20], (uint64_t)v18, v19, (uint64_t)&v49, v48, v47, (char *)v45, (const void **)&v42, (uint64_t *)&__p, v21);
  v30 = std::__pad_and_output[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a3, (uint64_t)v29, v37, v36, (uint64_t)a5, a6);
  if (v28)
    free(v28);
  if (SHIBYTE(v41) < 0)
    operator delete(__p);
  if (SHIBYTE(v44) < 0)
    operator delete(v42);
  if (SHIBYTE(v46) < 0)
    operator delete(v45[0]);
  locale = v50.__locale_;
  if (v50.__locale_ != (std::locale::__imp *)&std::locale::__imp::classic_locale_imp_)
  {
    v32 = (unint64_t *)((char *)v50.__locale_ + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
      (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 16))(locale);
  }
  if (v16)
    free(v16);
  if (v35)
    free(v35);
  return v30;
}

void sub_191FEE0A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,unint64_t *a39)
{
  void *v39;
  unint64_t *v41;
  unint64_t v42;

  if (a24 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  if (a36 < 0)
    operator delete(a31);
  if (a39 != (unint64_t *)&std::locale::__imp::classic_locale_imp_)
  {
    v41 = a39 + 1;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
      (*(void (**)(unint64_t *))(*a39 + 16))(a39);
  }
  if (v39)
    free(v39);
  if (a15)
    free(a15);
  _Unwind_Resume(exception_object);
}

uint64_t std::__money_put<wchar_t>::__gather_info(int a1, int a2, std::locale *this, _DWORD *a4, _DWORD *a5, _DWORD *a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10)
{
  std::locale::id *v16;
  const std::locale::facet *v17;
  const std::locale::facet *v18;
  std::locale::facet_vtbl *v19;
  uint64_t result;
  __int128 v21;
  uint64_t v22;

  if (a1)
    v16 = (std::locale::id *)&std::moneypunct<wchar_t,true>::id;
  else
    v16 = (std::locale::id *)&std::moneypunct<wchar_t,false>::id;
  v17 = std::locale::use_facet(this, v16);
  v18 = v17;
  v19 = v17->__vftable;
  if (a2)
  {
    *a4 = ((uint64_t (*)(const std::locale::facet *))v19[3].__on_zero_shared)(v17);
    ((void (*)(__int128 *__return_ptr, const std::locale::facet *))v18->__vftable[2].__on_zero_shared)(&v21, v18);
  }
  else
  {
    *a4 = ((uint64_t (*)(const std::locale::facet *))v19[3].~facet_0)(v17);
    ((void (*)(__int128 *__return_ptr, const std::locale::facet *))v18->__vftable[2].~facet_0)(&v21, v18);
  }
  if (*(char *)(a9 + 23) < 0)
    operator delete(*(void **)a9);
  *(_OWORD *)a9 = v21;
  *(_QWORD *)(a9 + 16) = v22;
  *a5 = ((uint64_t (*)(const std::locale::facet *))v18->__vftable[1].~facet)(v18);
  *a6 = ((uint64_t (*)(const std::locale::facet *))v18->__vftable[1].~facet_0)(v18);
  ((void (*)(__int128 *__return_ptr, const std::locale::facet *))v18->__vftable[1].__on_zero_shared)(&v21, v18);
  if (*(char *)(a7 + 23) < 0)
    operator delete(*(void **)a7);
  *(_OWORD *)a7 = v21;
  *(_QWORD *)(a7 + 16) = v22;
  ((void (*)(__int128 *__return_ptr, const std::locale::facet *))v18->__vftable[2].~facet)(&v21, v18);
  if (*(char *)(a8 + 23) < 0)
    operator delete(*(void **)a8);
  *(_OWORD *)a8 = v21;
  *(_QWORD *)(a8 + 16) = v22;
  result = ((uint64_t (*)(const std::locale::facet *))v18->__vftable[3].~facet)(v18);
  *a10 = result;
  return result;
}

void *std::__money_put<wchar_t>::__format(void *result, void **a2, void **a3, __int16 a4, unsigned int *a5, unint64_t a6, uint64_t a7, unsigned int a8, uint64_t a9, int a10, int a11, char *a12, const void **a13, uint64_t *a14, int a15)
{
  void **v19;
  uint64_t v20;
  uint64_t *v21;
  _DWORD *v22;
  const void *v23;
  unint64_t v24;
  _DWORD *v25;
  unsigned int *v26;
  _DWORD *v27;
  unsigned int *v28;
  int v29;
  int v30;
  int v31;
  char *v32;
  _DWORD *v33;
  unsigned int v34;
  char *v35;
  _DWORD *v36;
  int v37;
  _DWORD *v38;
  _DWORD *v39;
  unint64_t v40;
  int v41;
  unint64_t v42;
  int v43;
  char *v44;
  int v45;
  _DWORD *v46;
  BOOL v47;
  unint64_t v48;
  int v49;
  BOOL v50;
  unint64_t v51;
  char *v52;
  size_t v53;
  void *v54;
  void *v55;
  uint64_t v56;
  _DWORD *v59;

  v19 = a2;
  v20 = 0;
  v21 = a14;
  v56 = a8;
  v55 = result;
  *a3 = result;
  while (2)
  {
    switch(*(_BYTE *)(a9 + v20))
    {
      case 0:
        *v19 = *a3;
        goto LABEL_66;
      case 1:
        *v19 = *a3;
        result = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a7 + 88))(a7, 32);
        v22 = *a3;
        *v22 = (_DWORD)result;
        *a3 = v22 + 1;
        goto LABEL_66;
      case 2:
        v23 = a13;
        if (*((char *)a13 + 23) < 0)
        {
          if ((a4 & 0x200) == 0)
            goto LABEL_66;
          v24 = (unint64_t)a13[1];
          if (v24)
          {
            v23 = *a13;
LABEL_27:
            v32 = (char *)*a3;
            result = memmove(*a3, v23, 4 * v24);
            *a3 = &v32[4 * v24];
            v19 = a2;
            goto LABEL_65;
          }
        }
        else
        {
          if ((a4 & 0x200) == 0)
            goto LABEL_66;
          v24 = *((unsigned __int8 *)a13 + 23);
          if (*((_BYTE *)a13 + 23))
            goto LABEL_27;
        }
        v21 = a14;
        goto LABEL_66;
      case 3:
        if (*((char *)v21 + 23) < 0)
        {
          if (!v21[1])
            goto LABEL_66;
          v25 = (_DWORD *)*v21;
        }
        else
        {
          v25 = v21;
          if (!*((_BYTE *)v21 + 23))
            goto LABEL_66;
        }
        v33 = *a3;
        *v33 = *v25;
        *a3 = v33 + 1;
        goto LABEL_66;
      case 4:
        v59 = *a3;
        a5 += v56;
        v26 = a5;
        if ((unint64_t)a5 < a6)
        {
          v26 = a5;
          do
          {
            result = (void *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a7 + 24))(a7, 1024, *v26);
            if (!(_DWORD)result)
              break;
            ++v26;
          }
          while ((unint64_t)v26 < a6);
        }
        if (a15 < 1)
          goto LABEL_36;
        if (v26 <= a5)
        {
          v29 = a15;
        }
        else
        {
          v27 = *a3;
          v28 = v26 - 1;
          v29 = a15;
          do
          {
            v30 = v29--;
            v47 = v28 > a5;
            v31 = *v28--;
            *v27++ = v31;
          }
          while (v47 && v30 != 1);
          *a3 = v27;
          v26 = v28 + 1;
          if (v30 == 1)
            goto LABEL_35;
        }
        result = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a7 + 88))(a7, 48);
        v27 = *a3;
        if (v29 >= 1)
        {
          v34 = v29 + 1;
          do
          {
            *v27++ = (_DWORD)result;
            --v34;
          }
          while (v34 > 1);
        }
LABEL_35:
        *v27 = a10;
        *a3 = v27 + 1;
        v19 = a2;
LABEL_36:
        if (v26 == a5)
        {
          result = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a7 + 88))(a7, 48);
          v38 = *a3;
          *v38 = (_DWORD)result;
          v39 = v38 + 1;
          *a3 = v39;
          v36 = v59;
          goto LABEL_57;
        }
        if ((a12[23] & 0x80000000) == 0)
        {
          v35 = a12;
          v36 = v59;
          if (!a12[23])
          {
            v37 = -1;
            goto LABEL_45;
          }
          goto LABEL_44;
        }
        if (*((_QWORD *)a12 + 1))
        {
          v35 = *(char **)a12;
          v36 = v59;
LABEL_44:
          v37 = *v35;
          goto LABEL_45;
        }
        v37 = -1;
        v36 = v59;
LABEL_45:
        LODWORD(v40) = 0;
        v41 = 0;
        v39 = *a3;
        do
        {
          if (v41 == v37)
          {
            *v39++ = a11;
            *a3 = v39;
            v40 = (v40 + 1);
            v42 = a12[23];
            v43 = (char)v42;
            if ((v42 & 0x80u) != 0)
              v42 = *((_QWORD *)a12 + 1);
            if (v42 <= v40)
            {
              v41 = 0;
            }
            else
            {
              v41 = 0;
              v44 = *(char **)a12;
              if (v43 >= 0)
                v44 = a12;
              v37 = v44[v40];
              if (v37 == 127)
                LOBYTE(v37) = -1;
              v37 = (char)v37;
            }
          }
          v45 = *--v26;
          *v39++ = v45;
          *a3 = v39;
          ++v41;
        }
        while (v26 != a5);
LABEL_57:
        v46 = v39 - 1;
        v47 = v36 != v39 && v46 > v36;
        if (v47)
        {
          v48 = (unint64_t)(v36 + 1);
          do
          {
            v49 = *(_DWORD *)(v48 - 4);
            *(_DWORD *)(v48 - 4) = *v46;
            *v46-- = v49;
            v50 = v48 >= (unint64_t)v46;
            v48 += 4;
          }
          while (!v50);
        }
LABEL_65:
        v21 = a14;
LABEL_66:
        if (++v20 != 4)
          continue;
        if (*((char *)v21 + 23) < 0)
        {
          v51 = v21[1];
          if (v51 <= 1)
            goto LABEL_75;
          v21 = (uint64_t *)*v21;
          goto LABEL_74;
        }
        v51 = *((unsigned __int8 *)v21 + 23);
        if (v51 > 1)
        {
LABEL_74:
          v52 = (char *)*a3;
          v53 = 4 * v51 - 4;
          result = memmove(*a3, (char *)v21 + 4, v53);
          *a3 = &v52[v53];
        }
LABEL_75:
        if ((a4 & 0xB0) != 0x10)
        {
          v54 = v55;
          if ((a4 & 0xB0) == 0x20)
            v54 = *a3;
          *v19 = v54;
        }
        return result;
      default:
        goto LABEL_66;
    }
  }
}

uint64_t std::money_put<wchar_t,std::ostreambuf_iterator<wchar_t>>::do_put(int a1, uint64_t a2, int a3, std::ios_base *this, int a5, uint64_t a6)
{
  const std::locale::facet *v11;
  uint64_t v12;
  int *v13;
  int v14;
  _BOOL4 v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  char *v27;
  unsigned int *v28;
  uint64_t v29;
  std::locale::__imp *locale;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v34;
  uint64_t v35;
  int v36;
  void *__p;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43[2];
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  std::locale v48;
  char v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  std::ios_base::getloc(this);
  v11 = std::locale::use_facet(&v48, &std::ctype<wchar_t>::id);
  v12 = (uint64_t)v11;
  if ((*(char *)(a6 + 23) & 0x80000000) == 0)
  {
    v13 = (int *)a6;
    if (!*(_BYTE *)(a6 + 23))
      goto LABEL_7;
LABEL_6:
    v14 = *v13;
    v15 = v14 == ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[3].__on_zero_shared)(v11, 45);
    goto LABEL_8;
  }
  if (*(_QWORD *)(a6 + 8))
  {
    v13 = *(int **)a6;
    goto LABEL_6;
  }
LABEL_7:
  v15 = 0;
LABEL_8:
  v43[0] = 0;
  v43[1] = 0;
  v44 = 0;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  __p = 0;
  v38 = 0;
  v39 = 0;
  std::__money_put<wchar_t>::__gather_info(a3, v15, &v48, &v47, &v46, &v45, (uint64_t)v43, (uint64_t)&v40, (uint64_t)&__p, &v36);
  LODWORD(v16) = *(char *)(a6 + 23);
  if ((v16 & 0x80000000) != 0)
  {
    v18 = *(_QWORD *)(a6 + 8);
    v17 = v36;
    if (v36 < (int)v18)
      goto LABEL_12;
  }
  else
  {
    v17 = v36;
    if (v36 < *(unsigned __int8 *)(a6 + 23))
    {
      v18 = *(unsigned __int8 *)(a6 + 23);
LABEL_12:
      v19 = 2 * (v18 - v17);
      v20 = HIBYTE(v39);
      if (v39 < 0)
        v20 = v38;
      v21 = HIBYTE(v42);
      if (v42 < 0)
        v21 = v41;
      v22 = v19 + v17 + v20 + v21 + 1;
      goto LABEL_22;
    }
  }
  v23 = HIBYTE(v39);
  if (v39 < 0)
    v23 = v38;
  v24 = HIBYTE(v42);
  if (v42 < 0)
    v24 = v41;
  v22 = v23 + v17 + v24 + 2;
LABEL_22:
  if (v22 < 0x65)
  {
    v26 = 0;
    v27 = &v49;
  }
  else
  {
    v25 = malloc_type_malloc(4 * v22, 0x100004052888210uLL);
    v26 = v25;
    if (!v25)
      std::__throw_bad_alloc();
    LOBYTE(v16) = *(_BYTE *)(a6 + 23);
    v17 = v36;
    v27 = (char *)v25;
  }
  v16 = v16;
  if ((v16 & 0x80u) == 0)
    v28 = (unsigned int *)a6;
  else
    v28 = *(unsigned int **)a6;
  if ((v16 & 0x80u) != 0)
    v16 = *(_QWORD *)(a6 + 8);
  std::__money_put<wchar_t>::__format(v27, (void **)&v35, (void **)&v34, this->__fmtflags_, v28, (unint64_t)&v28[v16], v12, v15, (uint64_t)&v47, v46, v45, (char *)v43, (const void **)&v40, (uint64_t *)&__p, v17);
  v29 = std::__pad_and_output[abi:ne180100]<wchar_t,std::char_traits<wchar_t>>(a2, (uint64_t)v27, v35, v34, (uint64_t)this, a5);
  if (v26)
    free(v26);
  if (SHIBYTE(v39) < 0)
    operator delete(__p);
  if (SHIBYTE(v42) < 0)
    operator delete(v40);
  if (SHIBYTE(v44) < 0)
    operator delete(v43[0]);
  locale = v48.__locale_;
  if (v48.__locale_ != (std::locale::__imp *)&std::locale::__imp::classic_locale_imp_)
  {
    v31 = (unint64_t *)((char *)v48.__locale_ + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
      (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 16))(locale);
  }
  return v29;
}

void sub_191FEEA20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,unint64_t *a38)
{
  unint64_t *v39;
  unint64_t v40;

  if (a38 != (unint64_t *)&std::locale::__imp::classic_locale_imp_)
  {
    v39 = a38 + 1;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
      (*(void (**)(unint64_t *))(*a38 + 16))(a38);
  }
  _Unwind_Resume(exception_object);
}

nl_catd std::messages<char>::do_open(uint64_t a1, uint64_t a2)
{
  const char *v2;

  if (*(char *)(a2 + 23) >= 0)
    v2 = (const char *)a2;
  else
    v2 = *(const char **)a2;
  return catopen(v2, 1);
}

void std::messages<char>::do_get(__nl_cat_d *a1@<X1>, int a2@<W2>, int a3@<W3>, uint64_t a4@<X4>, std::string *a5@<X8>)
{
  int v9;
  std::string::value_type *v10;
  uint64_t v11;
  std::string *v12;
  char *v13;
  int64_t v14;
  int64_t v15;
  std::string v16;

  memset(&v16, 0, sizeof(v16));
  v9 = *(char *)(a4 + 23);
  if (v9 >= 0)
    v10 = (std::string::value_type *)a4;
  else
    v10 = *(std::string::value_type **)a4;
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(a4 + 23);
  else
    v11 = *(_QWORD *)(a4 + 8);
  if (v11 < 1)
  {
    v12 = &v16;
  }
  else
  {
    do
    {
      std::string::push_back(&v16, *v10++);
      --v11;
    }
    while (v11);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = &v16;
    else
      v12 = (std::string *)v16.__r_.__value_.__r.__words[0];
  }
  v13 = catgets(a1, a2, a3, (const char *)v12);
  a5->__r_.__value_.__r.__words[0] = 0;
  a5->__r_.__value_.__l.__size_ = 0;
  a5->__r_.__value_.__r.__words[2] = 0;
  v14 = strlen(v13);
  if (v14 >= 1)
  {
    v15 = v14;
    do
    {
      std::string::push_back(a5, *v13++);
      --v15;
    }
    while (v15);
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
}

void sub_191FEEBC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::messages<char>::do_close(int a1, nl_catd a2)
{
  return catclose(a2);
}

nl_catd std::messages<wchar_t>::do_open(uint64_t a1, uint64_t a2)
{
  const char *v2;

  if (*(char *)(a2 + 23) >= 0)
    v2 = (const char *)a2;
  else
    v2 = *(const char **)a2;
  return catopen(v2, 1);
}

void std::messages<wchar_t>::do_get(__nl_cat_d *a1@<X1>, int a2@<W2>, int a3@<W3>, unint64_t a4@<X4>, std::wstring *a5@<X8>)
{
  uint64_t v9;
  unint64_t v10;
  std::string *p_p;
  char *v12;
  size_t v13;
  std::__shared_count v14;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  v14.__shared_owners_ = 0;
  v9 = *(unsigned __int8 *)(a4 + 23);
  if ((v9 & 0x80u) == 0)
    v10 = a4;
  else
    v10 = *(_QWORD *)a4;
  if ((v9 & 0x80u) != 0)
    v9 = *(_QWORD *)(a4 + 8);
  std::__narrow_to_utf8<32ul>::operator()[abi:ne180100]<std::back_insert_iterator<std::string>,wchar_t>((uint64_t)&v14, &__p, v10, v10 + 4 * v9);
  std::__shared_count::~__shared_count(&v14);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v12 = catgets(a1, a2, a3, (const char *)p_p);
  a5->__r_.__value_.__r.__words[0] = 0;
  a5->__r_.__value_.__l.__size_ = 0;
  a5->__r_.__value_.__r.__words[2] = 0;
  v14.__shared_owners_ = 0;
  v13 = strlen(v12);
  std::__widen_from_utf8<32ul>::operator()[abi:ne180100]<std::back_insert_iterator<std::wstring>>((uint64_t)&v14, a5, (unint64_t)v12, (unint64_t)&v12[v13]);
  std::__shared_count::~__shared_count(&v14);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_191FEED10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_count a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  std::__shared_count::~__shared_count(&a10);
  if (*(char *)(v16 + 23) < 0)
    operator delete(*(void **)v16);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

std::string *std::__narrow_to_utf8<32ul>::operator()[abi:ne180100]<std::back_insert_iterator<std::string>,wchar_t>(uint64_t a1, std::string *a2, unint64_t a3, unint64_t a4)
{
  unint64_t v6;
  std::string::value_type *v9;
  std::string::value_type v10;
  unint64_t v12;
  unint64_t v13;
  _BYTE v14[32];
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a3 < a4)
  {
    v6 = a3;
    do
    {
      v12 = v6;
      if ((*(unsigned int (**)(uint64_t, _BYTE *, unint64_t, unint64_t, unint64_t *, _BYTE *, _BYTE *, unint64_t *))(*(_QWORD *)a1 + 24))(a1, v15, v6, a4, &v12, v14, v15, &v13) == 2|| v12 == v6)
      {
        std::__throw_runtime_error("locale not supported");
      }
      v6 = v12;
      if ((unint64_t)v14 < v13)
      {
        v9 = v14;
        do
        {
          v10 = *v9++;
          std::string::push_back(a2, v10);
        }
        while ((unint64_t)v9 < v13);
        v6 = v12;
      }
    }
    while (v6 < a4);
  }
  return a2;
}

std::wstring *std::__widen_from_utf8<32ul>::operator()[abi:ne180100]<std::back_insert_iterator<std::wstring>>(uint64_t a1, std::wstring *a2, unint64_t a3, unint64_t a4)
{
  unint64_t v6;
  unint64_t v8;
  std::wstring::value_type *v10;
  std::wstring::value_type v11;
  unint64_t v13;
  unint64_t v14;
  _BYTE v15[128];
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a3 < a4)
  {
    v6 = a3;
    do
    {
      v13 = v6;
      if ((uint64_t)(a4 - v6) <= 32)
        v8 = a4;
      else
        v8 = v6 + 32;
      if ((*(unsigned int (**)(uint64_t, _BYTE *, unint64_t, unint64_t, unint64_t *, _BYTE *, _BYTE *, unint64_t *))(*(_QWORD *)a1 + 32))(a1, v16, v6, v8, &v13, v15, v16, &v14) == 2|| v13 == v6)
      {
        std::__throw_runtime_error("locale not supported");
      }
      v6 = v13;
      if ((unint64_t)v15 < v14)
      {
        v10 = (std::wstring::value_type *)v15;
        do
        {
          v11 = *v10++;
          std::wstring::push_back(a2, v11);
        }
        while ((unint64_t)v10 < v14);
        v6 = v13;
      }
    }
    while (v6 < a4);
  }
  return a2;
}

uint64_t std::messages<wchar_t>::do_close(int a1, nl_catd a2)
{
  return catclose(a2);
}

void std::codecvt_byname<char,char,__mbstate_t>::~codecvt_byname(std::__shared_count *a1)
{
  std::__shared_count::~__shared_count(a1);
  JUMPOUT(0x194021E38);
}

void std::codecvt<wchar_t,char,__mbstate_t>::~codecvt(std::codecvt<wchar_t, char, mbstate_t> *this)
{
  _xlocale *l;

  l = this->__l_;
  if (l)
    freelocale(l);
  std::__shared_count::~__shared_count(this);
}

{
  std::codecvt<wchar_t,char,__mbstate_t>::~codecvt(this);
  JUMPOUT(0x194021E38);
}

void std::codecvt_byname<wchar_t,char,__mbstate_t>::~codecvt_byname(std::codecvt<wchar_t, char, mbstate_t> *a1)
{
  std::codecvt<wchar_t,char,__mbstate_t>::~codecvt(a1);
  JUMPOUT(0x194021E38);
}

void std::codecvt_byname<char16_t,char,__mbstate_t>::~codecvt_byname(std::__shared_count *a1)
{
  std::__shared_count::~__shared_count(a1);
  JUMPOUT(0x194021E38);
}

void std::codecvt_byname<char32_t,char,__mbstate_t>::~codecvt_byname(std::__shared_count *a1)
{
  std::__shared_count::~__shared_count(a1);
  JUMPOUT(0x194021E38);
}

void std::codecvt_byname<char16_t,char8_t,__mbstate_t>::~codecvt_byname(std::__shared_count *a1)
{
  std::__shared_count::~__shared_count(a1);
  JUMPOUT(0x194021E38);
}

void std::codecvt_byname<char32_t,char8_t,__mbstate_t>::~codecvt_byname(std::__shared_count *a1)
{
  std::__shared_count::~__shared_count(a1);
  JUMPOUT(0x194021E38);
}

void std::build_name(unsigned __int8 *a1@<X0>, unsigned __int8 *a2@<X1>, int a3@<W2>, std::string *a4@<X8>)
{
  signed __int8 v5;
  size_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  _BYTE *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  const std::string::value_type *v14;

  v5 = a1[23];
  v6 = *((_QWORD *)a1 + 1);
  if (v5 >= 0)
    v7 = a1[23];
  else
    v7 = *((_QWORD *)a1 + 1);
  if (v7 == 1)
  {
    v8 = v5 >= 0 ? a1 : *(unsigned __int8 **)a1;
    if (*v8 == 42)
      goto LABEL_28;
  }
  v9 = a2[23];
  v10 = (char)v9;
  if ((v9 & 0x80u) != 0)
    v9 = *((_QWORD *)a2 + 1);
  if (v9 == 1)
  {
    v11 = *(_BYTE **)a2;
    if (v10 >= 0)
      v11 = a2;
    if (*v11 == 42)
      goto LABEL_28;
  }
  if (a3)
  {
    if (v7 != v9)
      goto LABEL_28;
    if (v10 < 0)
      a2 = *(unsigned __int8 **)a2;
    if ((a1[23] & 0x80) == 0)
    {
      if (a1[23])
      {
        v12 = a1;
        v13 = a1[23];
        while (*v12 == *a2)
        {
          ++v12;
          ++a2;
          if (!--v13)
            goto LABEL_24;
        }
        goto LABEL_28;
      }
LABEL_25:
      *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a4->__r_.__value_.__r.__words[2] = *((_QWORD *)a1 + 2);
      return;
    }
    v14 = *(const std::string::value_type **)a1;
    if (memcmp(*(const void **)a1, a2, v6))
    {
LABEL_28:
      std::string::basic_string[abi:ne180100]<0>(a4, "*");
      return;
    }
  }
  else
  {
LABEL_24:
    if ((a1[23] & 0x80) == 0)
      goto LABEL_25;
    v14 = *(const std::string::value_type **)a1;
  }
  std::string::__init_copy_ctor_external(a4, v14, v6);
}

std::locale::__imp *std::locale::__imp::__imp(std::locale::__imp *this, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;

  *(_QWORD *)this = &off_1E2E59380;
  *((_QWORD *)this + 1) = a2 - 1;
  std::vector<std::locale::facet *,std::__sso_allocator<std::locale::facet *,30ul>>::vector((uint64_t)this + 16, 0x1EuLL);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 36, "C");
  *((_QWORD *)this + 3) = *((_QWORD *)this + 2);
  *(_QWORD *)algn_1ECCF0C98 = 0;
  v3 = std::locale::id::__get(&std::collate<char>::id);
  *(_QWORD *)algn_1ECCF0CA8 = 0;
  v4 = std::locale::id::__get(&std::collate<wchar_t>::id);
  *(_QWORD *)algn_1ECCF0CB8 = 0;
  byte_1ECCF0CC8 = 0;
  qword_1ECCF0CC0 = MEMORY[0x1E0C80978] + 60;
  v5 = std::locale::id::__get(&std::ctype<char>::id);
  *(_QWORD *)algn_1ECCF0CD8 = 0;
  v6 = std::locale::id::__get(&std::ctype<wchar_t>::id);
  *(_QWORD *)algn_1ECCF0CE8 = 0;
  v7 = std::locale::id::__get(&std::codecvt<char,char,__mbstate_t>::id);
  qword_1ECCF0CF8 = 0;
  unk_1ECCF0D00 = 0;
  v8 = std::locale::id::__get(&std::codecvt<wchar_t,char,__mbstate_t>::id);
  v9 = std::locale::id::__get(&std::codecvt<char16_t,char,__mbstate_t>::id);
  v10 = std::locale::id::__get(&std::codecvt<char32_t,char,__mbstate_t>::id);
  v11 = std::locale::id::__get(&std::codecvt<char16_t,char8_t,__mbstate_t>::id);
  v12 = std::locale::id::__get(&std::codecvt<char32_t,char8_t,__mbstate_t>::id);
  word_1ECCF0D58 = 11310;
  qword_1ECCF0D68 = 0;
  unk_1ECCF0D70 = 0;
  qword_1ECCF0D60 = 0;
  v13 = std::locale::id::__get(&std::numpunct<char>::id);
  qword_1ECCF0D88 = 0x2C0000002ELL;
  qword_1ECCF0D98 = 0;
  unk_1ECCF0DA0 = 0;
  qword_1ECCF0D90 = 0;
  v14 = std::locale::id::__get(&std::numpunct<wchar_t>::id);
  v15 = std::locale::id::__get(&std::num_get<char,std::istreambuf_iterator<char>>::id);
  v16 = std::locale::id::__get(&std::num_get<wchar_t,std::istreambuf_iterator<wchar_t>>::id);
  v17 = std::locale::id::__get(&std::num_put<char,std::ostreambuf_iterator<char>>::id);
  v18 = std::locale::id::__get(&std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t>>::id);
  v19 = std::locale::id::__get(&std::moneypunct<char,false>::id);
  v20 = std::locale::id::__get(&std::moneypunct<char,true>::id);
  v21 = std::locale::id::__get(&std::moneypunct<wchar_t,false>::id);
  v22 = std::locale::id::__get(&std::moneypunct<wchar_t,true>::id);
  v23 = std::locale::id::__get(&std::money_get<char,std::istreambuf_iterator<char>>::id);
  v24 = std::locale::id::__get(&std::money_get<wchar_t,std::istreambuf_iterator<wchar_t>>::id);
  v25 = std::locale::id::__get(&std::money_put<char,std::ostreambuf_iterator<char>>::id);
  v26 = std::locale::id::__get(&std::money_put<wchar_t,std::ostreambuf_iterator<wchar_t>>::id);
  v27 = std::locale::id::__get(&std::time_get<char,std::istreambuf_iterator<char>>::id);
  *(_QWORD *)algn_1ECCF0E88 = 0;
  v28 = std::locale::id::__get(&std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::id);
  qword_1ECCF0EA8 = 0;
  v29 = std::locale::id::__get(&std::time_put<char,std::ostreambuf_iterator<char>>::id);
  qword_1ECCF0EC0 = 0;
  *(_QWORD *)algn_1ECCF0EB8 = 0;
  v30 = std::locale::id::__get(&std::time_put<wchar_t,std::ostreambuf_iterator<wchar_t>>::id);
  v31 = std::locale::id::__get(&std::messages<char>::id);
  v32 = std::locale::id::__get(&std::messages<wchar_t>::id);
  return this;
}

void sub_191FEF948(_Unwind_Exception *a1)
{
  std::__shared_count *v1;
  uint64_t **v2;
  uint64_t *v4;

  v4 = *v2;
  if (*v2)
  {
    v1[1].__shared_owners_ = (uint64_t)v4;
    if (v4 == &v1[2].__shared_owners_)
      *((_BYTE *)v4 + 240) = 0;
    else
      operator delete(v4);
  }
  std::__shared_count::~__shared_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::locale::__imp::__imp(uint64_t a1, __int128 *a2, uint64_t a3)
{
  char *v5;
  __int128 v6;
  std::locale::__imp *locale;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::collate_byname<char> *v15;
  unint64_t v16;
  std::collate_byname<wchar_t> *v17;
  unint64_t v18;
  std::ctype_byname<char> *v19;
  unint64_t v20;
  std::ctype_byname<wchar_t> *v21;
  unint64_t v22;
  std::locale::facet *v23;
  unint64_t v24;
  std::codecvt<wchar_t, char, mbstate_t> *v25;
  std::locale::facet *v26;
  const char *v27;
  unint64_t v28;
  std::locale::facet *v29;
  unint64_t v30;
  std::locale::facet *v31;
  unint64_t v32;
  std::locale::facet *v33;
  unint64_t v34;
  std::locale::facet *v35;
  unint64_t v36;
  std::numpunct_byname<char> *v37;
  unint64_t v38;
  std::numpunct_byname<wchar_t> *v39;
  unint64_t v40;
  std::locale::facet *v41;
  unint64_t v42;
  std::locale::facet *v43;
  unint64_t v44;
  std::locale::facet *v45;
  unint64_t v46;
  std::locale::facet *v47;
  unint64_t v48;
  std::__time_get *v49;
  unint64_t v50;
  std::__time_get *v51;
  unint64_t v52;
  std::__time_put *v53;
  unint64_t v54;
  std::__time_put *v55;
  unint64_t v56;
  std::locale::facet *v57;
  unint64_t v58;
  std::locale::facet *v59;
  unint64_t v60;

  *(_QWORD *)a1 = &off_1E2E59380;
  *(_QWORD *)(a1 + 8) = a3 - 1;
  v5 = (char *)(a1 + 16);
  std::vector<std::locale::facet *,std::__sso_allocator<std::locale::facet *,30ul>>::vector(a1 + 16, 0x1EuLL);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 288), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    *(_QWORD *)(a1 + 304) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 288) = v6;
  }
  locale = std::locale::classic()->__locale_;
  if (locale != (std::locale::__imp *)a1)
    std::vector<std::locale::facet *,std::__sso_allocator<std::locale::facet *,30ul>>::__assign_with_size[abi:ne180100]<std::locale::facet **,std::locale::facet **>(v5, *((char **)locale + 2), *((_QWORD *)locale + 3), (uint64_t)(*((_QWORD *)locale + 3) - *((_QWORD *)locale + 2)) >> 3);
  v9 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  if (v8 != v9)
  {
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = *(_QWORD *)(v9 + 8 * v10);
      if (v12)
      {
        v13 = (unint64_t *)(v12 + 8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
        v9 = *(_QWORD *)(a1 + 16);
        v8 = *(_QWORD *)(a1 + 24);
      }
      v10 = ++v11;
    }
    while (v11 < (unint64_t)((v8 - v9) >> 3));
  }
  v15 = (std::collate_byname<char> *)operator new();
  std::collate_byname<char>::collate_byname(v15, (const std::string *)(a1 + 288), 0);
  v16 = std::locale::id::__get(&std::collate<char>::id);
  std::locale::__imp::install((std::locale::__imp *)a1, (std::locale::facet *)v15, v16);
  v17 = (std::collate_byname<wchar_t> *)operator new();
  std::collate_byname<wchar_t>::collate_byname(v17, (const std::string *)(a1 + 288), 0);
  v18 = std::locale::id::__get(&std::collate<wchar_t>::id);
  std::locale::__imp::install((std::locale::__imp *)a1, (std::locale::facet *)v17, v18);
  v19 = (std::ctype_byname<char> *)operator new();
  std::ctype_byname<char>::ctype_byname(v19, (const std::string *)(a1 + 288), 0);
  v20 = std::locale::id::__get(&std::ctype<char>::id);
  std::locale::__imp::install((std::locale::__imp *)a1, v19, v20);
  v21 = (std::ctype_byname<wchar_t> *)operator new();
  std::ctype_byname<wchar_t>::ctype_byname(v21, (const std::string *)(a1 + 288), 0);
  v22 = std::locale::id::__get(&std::ctype<wchar_t>::id);
  std::locale::__imp::install((std::locale::__imp *)a1, v21, v22);
  v23 = (std::locale::facet *)operator new();
  v23->__shared_owners_ = -1;
  v24 = std::locale::id::__get(&std::codecvt<char,char,__mbstate_t>::id);
  std::locale::__imp::install((std::locale::__imp *)a1, v23, v24);
  v25 = (std::codecvt<wchar_t, char, mbstate_t> *)operator new();
  v26 = v25;
  if (*(char *)(a1 + 311) >= 0)
    v27 = (const char *)(a1 + 288);
  else
    v27 = *(const char **)(a1 + 288);
  std::codecvt<wchar_t,char,__mbstate_t>::codecvt(v25, v27, 0);
  v28 = std::locale::id::__get(&std::codecvt<wchar_t,char,__mbstate_t>::id);
  std::locale::__imp::install((std::locale::__imp *)a1, v26, v28);
  v29 = (std::locale::facet *)operator new();
  v29->__shared_owners_ = -1;
  v30 = std::locale::id::__get(&std::codecvt<char16_t,char,__mbstate_t>::id);
  std::locale::__imp::install((std::locale::__imp *)a1, v29, v30);
  v31 = (std::locale::facet *)operator new();
  v31->__shared_owners_ = -1;
  v32 = std::locale::id::__get(&std::codecvt<char32_t,char,__mbstate_t>::id);
  std::locale::__imp::install((std::locale::__imp *)a1, v31, v32);
  v33 = (std::locale::facet *)operator new();
  v33->__vftable = (std::locale::facet_vtbl *)&unk_1E2E5B870;
  v33->__shared_owners_ = -1;
  v34 = std::locale::id::__get(&std::codecvt<char16_t,char8_t,__mbstate_t>::id);
  std::locale::__imp::install((std::locale::__imp *)a1, v33, v34);
  v35 = (std::locale::facet *)operator new();
  v35->__vftable = (std::locale::facet_vtbl *)&unk_1E2E5B8E8;
  v35->__shared_owners_ = -1;
  v36 = std::locale::id::__get(&std::codecvt<char32_t,char8_t,__mbstate_t>::id);
  std::locale::__imp::install((std::locale::__imp *)a1, v35, v36);
  v37 = (std::numpunct_byname<char> *)operator new();
  std::numpunct_byname<char>::numpunct_byname(v37, (const std::string *)(a1 + 288), 0);
  v38 = std::locale::id::__get(&std::numpunct<char>::id);
  std::locale::__imp::install((std::locale::__imp *)a1, v37, v38);
  v39 = (std::numpunct_byname<wchar_t> *)operator new();
  std::numpunct_byname<wchar_t>::numpunct_byname(v39, (const std::string *)(a1 + 288), 0);
  v40 = std::locale::id::__get(&std::numpunct<wchar_t>::id);
  std::locale::__imp::install((std::locale::__imp *)a1, v39, v40);
  v41 = (std::locale::facet *)operator new();
  std::moneypunct_byname<char,false>::moneypunct_byname[abi:ne180100]((uint64_t)v41, (char *)(a1 + 288), 0);
  v42 = std::locale::id::__get(&std::moneypunct<char,false>::id);
  std::locale::__imp::install((std::locale::__imp *)a1, v41, v42);
  v43 = (std::locale::facet *)operator new();
  std::moneypunct_byname<char,true>::moneypunct_byname[abi:ne180100]((uint64_t)v43, (char *)(a1 + 288), 0);
  v44 = std::locale::id::__get(&std::moneypunct<char,true>::id);
  std::locale::__imp::install((std::locale::__imp *)a1, v43, v44);
  v45 = (std::locale::facet *)operator new();
  std::moneypunct_byname<wchar_t,false>::moneypunct_byname[abi:ne180100]((uint64_t)v45, (char *)(a1 + 288), 0);
  v46 = std::locale::id::__get(&std::moneypunct<wchar_t,false>::id);
  std::locale::__imp::install((std::locale::__imp *)a1, v45, v46);
  v47 = (std::locale::facet *)operator new();
  std::moneypunct_byname<wchar_t,true>::moneypunct_byname[abi:ne180100]((uint64_t)v47, (char *)(a1 + 288), 0);
  v48 = std::locale::id::__get(&std::moneypunct<wchar_t,true>::id);
  std::locale::__imp::install((std::locale::__imp *)a1, v47, v48);
  v49 = (std::__time_get *)operator new();
  std::time_get_byname<char,std::istreambuf_iterator<char>>::time_get_byname[abi:ne180100](v49, (const std::string *)(a1 + 288), 0);
  v50 = std::locale::id::__get(&std::time_get<char,std::istreambuf_iterator<char>>::id);
  std::locale::__imp::install((std::locale::__imp *)a1, (std::locale::facet *)v49, v50);
  v51 = (std::__time_get *)operator new();
  std::time_get_byname<wchar_t,std::istreambuf_iterator<wchar_t>>::time_get_byname[abi:ne180100](v51, (const std::string *)(a1 + 288), 0);
  v52 = std::locale::id::__get(&std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::id);
  std::locale::__imp::install((std::locale::__imp *)a1, (std::locale::facet *)v51, v52);
  v53 = (std::__time_put *)operator new();
  std::time_put<char,std::ostreambuf_iterator<char>>::time_put[abi:ne180100](v53, (const std::string *)(a1 + 288), 0);
  v54 = std::locale::id::__get(&std::time_put<char,std::ostreambuf_iterator<char>>::id);
  std::locale::__imp::install((std::locale::__imp *)a1, (std::locale::facet *)v53, v54);
  v55 = (std::__time_put *)operator new();
  std::time_put<wchar_t,std::ostreambuf_iterator<wchar_t>>::time_put[abi:ne180100](v55, (const std::string *)(a1 + 288), 0);
  v56 = std::locale::id::__get(&std::time_put<wchar_t,std::ostreambuf_iterator<wchar_t>>::id);
  std::locale::__imp::install((std::locale::__imp *)a1, (std::locale::facet *)v55, v56);
  v57 = (std::locale::facet *)operator new();
  v57->__shared_owners_ = -1;
  v58 = std::locale::id::__get(&std::messages<char>::id);
  std::locale::__imp::install((std::locale::__imp *)a1, v57, v58);
  v59 = (std::locale::facet *)operator new();
  v59->__shared_owners_ = -1;
  v60 = std::locale::id::__get(&std::messages<wchar_t>::id);
  std::locale::__imp::install((std::locale::__imp *)a1, v59, v60);
  return a1;
}

void sub_191FF00DC(_Unwind_Exception *a1)
{
  std::__shared_count *v1;
  uint64_t **v2;
  uint64_t *v4;

  v4 = *v2;
  if (*v2)
  {
    v1[1].__shared_owners_ = (uint64_t)v4;
    if (v4 == &v1[2].__shared_owners_)
      *((_BYTE *)v4 + 240) = 0;
    else
      operator delete(v4);
  }
  std::__shared_count::~__shared_count(v1);
  _Unwind_Resume(a1);
}

const std::locale *std::locale::classic(void)
{
  unsigned __int8 v0;

  {
    std::locale::classic(void)::classic_locale = (uint64_t)std::locale::__imp::__imp((std::locale::__imp *)&std::locale::__imp::classic_locale_imp_, 1);
  }
  return (const std::locale *)&std::locale::classic(void)::classic_locale;
}

void sub_191FF02DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

std::string *std::locale::__imp::__imp(std::string *this, std::string *a2)
{
  char *v4;
  unint64_t v5;
  __int128 v6;
  std::string::pointer data;
  char *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  this->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E2E59380;
  this->__r_.__value_.__l.__size_ = -1;
  v4 = &this->__r_.__value_.__s.__data_[16];
  if ((unint64_t)((uint64_t)(a2[1].__r_.__value_.__r.__words[0] - a2->__r_.__value_.__r.__words[2]) >> 3) <= 0x1E)
    v5 = 30;
  else
    v5 = (uint64_t)(a2[1].__r_.__value_.__r.__words[0] - a2->__r_.__value_.__r.__words[2]) >> 3;
  std::vector<std::locale::facet *,std::__sso_allocator<std::locale::facet *,30ul>>::vector((uint64_t)&this->__r_.__value_.__r.__words[2], v5);
  if (SHIBYTE(a2[12].__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(this + 12, a2[12].__r_.__value_.__l.__data_, a2[12].__r_.__value_.__l.__size_);
  }
  else
  {
    v6 = *(_OWORD *)&a2[12].__r_.__value_.__l.__data_;
    this[12].__r_.__value_.__r.__words[2] = a2[12].__r_.__value_.__r.__words[2];
    *(_OWORD *)&this[12].__r_.__value_.__l.__data_ = v6;
  }
  if (this != a2)
    std::vector<std::locale::facet *,std::__sso_allocator<std::locale::facet *,30ul>>::__assign_with_size[abi:ne180100]<std::locale::facet **,std::locale::facet **>(v4, (char *)a2->__r_.__value_.__r.__words[2], (uint64_t)a2[1].__r_.__value_.__l.__data_, (uint64_t)(a2[1].__r_.__value_.__r.__words[0] - a2->__r_.__value_.__r.__words[2]) >> 3);
  v8 = (char *)this->__r_.__value_.__r.__words[2];
  data = this[1].__r_.__value_.__l.__data_;
  if (data != v8)
  {
    v9 = 0;
    v10 = 0;
    do
    {
      v11 = *(_QWORD *)&v8[8 * v9];
      if (v11)
      {
        v12 = (unint64_t *)(v11 + 8);
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 1, v12));
        v8 = (char *)this->__r_.__value_.__r.__words[2];
        data = this[1].__r_.__value_.__l.__data_;
      }
      v9 = ++v10;
    }
    while (v10 < (unint64_t)((data - v8) >> 3));
  }
  return this;
}

void sub_191FF0404(_Unwind_Exception *a1)
{
  std::__shared_count *v1;
  uint64_t **v2;
  uint64_t *v4;

  v4 = *v2;
  if (*v2)
  {
    v1[1].__shared_owners_ = (uint64_t)v4;
    if (v4 == &v1[2].__shared_owners_)
      *((_BYTE *)v4 + 240) = 0;
    else
      operator delete(v4);
  }
  std::__shared_count::~__shared_count(v1);
  _Unwind_Resume(a1);
}

std::string *std::locale::__imp::__imp(std::string *a1, uint64_t a2, uint64_t a3, int a4)
{
  char *v8;
  std::string::pointer data;
  char *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::collate_byname<char> *v16;
  unint64_t v17;
  std::collate_byname<wchar_t> *v18;
  unint64_t v19;
  std::ctype_byname<char> *v20;
  unint64_t v21;
  std::ctype_byname<wchar_t> *v22;
  unint64_t v23;
  std::locale::facet *v24;
  unint64_t v25;
  std::codecvt<wchar_t, char, mbstate_t> *v26;
  std::locale::facet *v27;
  const char *v28;
  unint64_t v29;
  std::locale::facet *v30;
  unint64_t v31;
  std::locale::facet *v32;
  unint64_t v33;
  std::locale::facet *v34;
  unint64_t v35;
  std::locale::facet *v36;
  unint64_t v37;
  std::locale::facet *v38;
  unint64_t v39;
  std::locale::facet *v40;
  unint64_t v41;
  std::locale::facet *v42;
  unint64_t v43;
  std::locale::facet *v44;
  unint64_t v45;
  std::numpunct_byname<char> *v46;
  unint64_t v47;
  std::numpunct_byname<wchar_t> *v48;
  unint64_t v49;
  std::__time_get *v50;
  unint64_t v51;
  std::__time_get *v52;
  unint64_t v53;
  std::__time_put *v54;
  unint64_t v55;
  std::__time_put *v56;
  unint64_t v57;
  std::locale::facet *v58;
  unint64_t v59;
  std::locale::facet *v60;
  unint64_t v61;

  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E2E59380;
  a1->__r_.__value_.__l.__size_ = -1;
  v8 = &a1->__r_.__value_.__s.__data_[16];
  std::vector<std::locale::facet *,std::__sso_allocator<std::locale::facet *,30ul>>::vector((uint64_t)&a1->__r_.__value_.__r.__words[2], 0x1EuLL);
  std::build_name((unsigned __int8 *)(a2 + 288), (unsigned __int8 *)a3, a4, a1 + 12);
  if (a1 != (std::string *)a2)
    std::vector<std::locale::facet *,std::__sso_allocator<std::locale::facet *,30ul>>::__assign_with_size[abi:ne180100]<std::locale::facet **,std::locale::facet **>(v8, *(char **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 3);
  v10 = (char *)a1->__r_.__value_.__r.__words[2];
  data = a1[1].__r_.__value_.__l.__data_;
  if (data != v10)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = *(_QWORD *)&v10[8 * v11];
      if (v13)
      {
        v14 = (unint64_t *)(v13 + 8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
        v10 = (char *)a1->__r_.__value_.__r.__words[2];
        data = a1[1].__r_.__value_.__l.__data_;
      }
      v11 = ++v12;
    }
    while (v12 < (unint64_t)((data - v10) >> 3));
  }
  if ((a4 & 1) != 0)
  {
    v16 = (std::collate_byname<char> *)operator new();
    std::collate_byname<char>::collate_byname(v16, (const std::string *)a3, 0);
    v17 = std::locale::id::__get(&std::collate<char>::id);
    std::locale::__imp::install((std::locale::__imp *)a1, (std::locale::facet *)v16, v17);
    v18 = (std::collate_byname<wchar_t> *)operator new();
    std::collate_byname<wchar_t>::collate_byname(v18, (const std::string *)a3, 0);
    v19 = std::locale::id::__get(&std::collate<wchar_t>::id);
    std::locale::__imp::install((std::locale::__imp *)a1, (std::locale::facet *)v18, v19);
  }
  if ((a4 & 2) != 0)
  {
    v20 = (std::ctype_byname<char> *)operator new();
    std::ctype_byname<char>::ctype_byname(v20, (const std::string *)a3, 0);
    v21 = std::locale::id::__get(&std::ctype<char>::id);
    std::locale::__imp::install((std::locale::__imp *)a1, v20, v21);
    v22 = (std::ctype_byname<wchar_t> *)operator new();
    std::ctype_byname<wchar_t>::ctype_byname(v22, (const std::string *)a3, 0);
    v23 = std::locale::id::__get(&std::ctype<wchar_t>::id);
    std::locale::__imp::install((std::locale::__imp *)a1, v22, v23);
    v24 = (std::locale::facet *)operator new();
    v24->__shared_owners_ = -1;
    v25 = std::locale::id::__get(&std::codecvt<char,char,__mbstate_t>::id);
    std::locale::__imp::install((std::locale::__imp *)a1, v24, v25);
    v26 = (std::codecvt<wchar_t, char, mbstate_t> *)operator new();
    v27 = v26;
    if (*(char *)(a3 + 23) >= 0)
      v28 = (const char *)a3;
    else
      v28 = *(const char **)a3;
    std::codecvt<wchar_t,char,__mbstate_t>::codecvt(v26, v28, 0);
    v29 = std::locale::id::__get(&std::codecvt<wchar_t,char,__mbstate_t>::id);
    std::locale::__imp::install((std::locale::__imp *)a1, v27, v29);
    v30 = (std::locale::facet *)operator new();
    v30->__shared_owners_ = -1;
    v31 = std::locale::id::__get(&std::codecvt<char16_t,char,__mbstate_t>::id);
    std::locale::__imp::install((std::locale::__imp *)a1, v30, v31);
    v32 = (std::locale::facet *)operator new();
    v32->__shared_owners_ = -1;
    v33 = std::locale::id::__get(&std::codecvt<char32_t,char,__mbstate_t>::id);
    std::locale::__imp::install((std::locale::__imp *)a1, v32, v33);
    v34 = (std::locale::facet *)operator new();
    v34->__vftable = (std::locale::facet_vtbl *)&unk_1E2E5B870;
    v34->__shared_owners_ = -1;
    v35 = std::locale::id::__get(&std::codecvt<char16_t,char8_t,__mbstate_t>::id);
    std::locale::__imp::install((std::locale::__imp *)a1, v34, v35);
    v36 = (std::locale::facet *)operator new();
    v36->__vftable = (std::locale::facet_vtbl *)&unk_1E2E5B8E8;
    v36->__shared_owners_ = -1;
    v37 = std::locale::id::__get(&std::codecvt<char32_t,char8_t,__mbstate_t>::id);
    std::locale::__imp::install((std::locale::__imp *)a1, v36, v37);
  }
  if ((a4 & 8) != 0)
  {
    v38 = (std::locale::facet *)operator new();
    std::moneypunct_byname<char,false>::moneypunct_byname[abi:ne180100]((uint64_t)v38, (char *)a3, 0);
    v39 = std::locale::id::__get(&std::moneypunct<char,false>::id);
    std::locale::__imp::install((std::locale::__imp *)a1, v38, v39);
    v40 = (std::locale::facet *)operator new();
    std::moneypunct_byname<char,true>::moneypunct_byname[abi:ne180100]((uint64_t)v40, (char *)a3, 0);
    v41 = std::locale::id::__get(&std::moneypunct<char,true>::id);
    std::locale::__imp::install((std::locale::__imp *)a1, v40, v41);
    v42 = (std::locale::facet *)operator new();
    std::moneypunct_byname<wchar_t,false>::moneypunct_byname[abi:ne180100]((uint64_t)v42, (char *)a3, 0);
    v43 = std::locale::id::__get(&std::moneypunct<wchar_t,false>::id);
    std::locale::__imp::install((std::locale::__imp *)a1, v42, v43);
    v44 = (std::locale::facet *)operator new();
    std::moneypunct_byname<wchar_t,true>::moneypunct_byname[abi:ne180100]((uint64_t)v44, (char *)a3, 0);
    v45 = std::locale::id::__get(&std::moneypunct<wchar_t,true>::id);
    std::locale::__imp::install((std::locale::__imp *)a1, v44, v45);
  }
  if ((a4 & 0x10) != 0)
  {
    v46 = (std::numpunct_byname<char> *)operator new();
    std::numpunct_byname<char>::numpunct_byname(v46, (const std::string *)a3, 0);
    v47 = std::locale::id::__get(&std::numpunct<char>::id);
    std::locale::__imp::install((std::locale::__imp *)a1, v46, v47);
    v48 = (std::numpunct_byname<wchar_t> *)operator new();
    std::numpunct_byname<wchar_t>::numpunct_byname(v48, (const std::string *)a3, 0);
    v49 = std::locale::id::__get(&std::numpunct<wchar_t>::id);
    std::locale::__imp::install((std::locale::__imp *)a1, v48, v49);
  }
  if ((a4 & 0x20) != 0)
  {
    v50 = (std::__time_get *)operator new();
    std::time_get_byname<char,std::istreambuf_iterator<char>>::time_get_byname[abi:ne180100](v50, (const std::string *)a3, 0);
    v51 = std::locale::id::__get(&std::time_get<char,std::istreambuf_iterator<char>>::id);
    std::locale::__imp::install((std::locale::__imp *)a1, (std::locale::facet *)v50, v51);
    v52 = (std::__time_get *)operator new();
    std::time_get_byname<wchar_t,std::istreambuf_iterator<wchar_t>>::time_get_byname[abi:ne180100](v52, (const std::string *)a3, 0);
    v53 = std::locale::id::__get(&std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::id);
    std::locale::__imp::install((std::locale::__imp *)a1, (std::locale::facet *)v52, v53);
    v54 = (std::__time_put *)operator new();
    std::time_put<char,std::ostreambuf_iterator<char>>::time_put[abi:ne180100](v54, (const std::string *)a3, 0);
    v55 = std::locale::id::__get(&std::time_put<char,std::ostreambuf_iterator<char>>::id);
    std::locale::__imp::install((std::locale::__imp *)a1, (std::locale::facet *)v54, v55);
    v56 = (std::__time_put *)operator new();
    std::time_put<wchar_t,std::ostreambuf_iterator<wchar_t>>::time_put[abi:ne180100](v56, (const std::string *)a3, 0);
    v57 = std::locale::id::__get(&std::time_put<wchar_t,std::ostreambuf_iterator<wchar_t>>::id);
    std::locale::__imp::install((std::locale::__imp *)a1, (std::locale::facet *)v56, v57);
  }
  if ((a4 & 4) != 0)
  {
    v58 = (std::locale::facet *)operator new();
    v58->__shared_owners_ = -1;
    v59 = std::locale::id::__get(&std::messages<char>::id);
    std::locale::__imp::install((std::locale::__imp *)a1, v58, v59);
    v60 = (std::locale::facet *)operator new();
    v60->__shared_owners_ = -1;
    v61 = std::locale::id::__get(&std::messages<wchar_t>::id);
    std::locale::__imp::install((std::locale::__imp *)a1, v60, v61);
  }
  return a1;
}

void sub_191FF0B9C(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;

  MEMORY[0x194021E38](v2, 0x10A1C40319E9F20);
  __cxa_begin_catch(a1);
  v4 = *(_QWORD *)(v1 + 16);
  if (*(_QWORD *)(v1 + 24) != v4)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      v7 = *(unint64_t **)(v4 + 8 * v5);
      if (v7)
      {
        v8 = v7 + 1;
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
          (*(void (**)(unint64_t *))(*v7 + 16))(v7);
      }
      v4 = *(_QWORD *)(v1 + 16);
      v5 = ++v6;
    }
    while (v6 < (unint64_t)((*(_QWORD *)(v1 + 24) - v4) >> 3));
  }
  __cxa_rethrow();
}

void sub_191FF0CF0()
{
  __cxa_end_catch();
  JUMPOUT(0x191FF0CF8);
}

std::string *std::locale::__imp::__imp(std::string *this, std::string *a2, const std::locale::__imp *a3, int a4)
{
  char *v8;
  std::string::pointer data;
  char *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  std::locale::facet *v18;
  unint64_t v19;
  uint64_t v20;
  std::locale::facet *v21;
  unint64_t v22;
  uint64_t v23;
  std::locale::facet *v24;
  unint64_t v25;
  uint64_t v26;
  std::locale::facet *v27;
  unint64_t v28;
  uint64_t v29;
  std::locale::facet *v30;
  unint64_t v31;
  uint64_t v32;
  std::locale::facet *v33;
  unint64_t v34;
  uint64_t v35;
  std::locale::facet *v36;
  unint64_t v37;
  uint64_t v38;
  std::locale::facet *v39;
  unint64_t v40;
  uint64_t v41;
  std::locale::facet *v42;
  unint64_t v43;
  uint64_t v44;
  std::locale::facet *v45;
  unint64_t v46;
  uint64_t v47;
  std::locale::facet *v48;
  unint64_t v49;
  uint64_t v50;
  std::locale::facet *v51;
  unint64_t v52;
  uint64_t v53;
  std::locale::facet *v54;
  unint64_t v55;
  uint64_t v56;
  std::locale::facet *v57;
  unint64_t v58;
  uint64_t v59;
  std::locale::facet *v60;
  unint64_t v61;
  uint64_t v62;
  std::locale::facet *v63;
  unint64_t v64;
  uint64_t v65;
  std::locale::facet *v66;
  unint64_t v67;
  uint64_t v68;
  std::locale::facet *v69;
  unint64_t v70;
  uint64_t v71;
  std::locale::facet *v72;
  unint64_t v73;
  uint64_t v74;
  std::locale::facet *v75;
  unint64_t v76;
  uint64_t v77;
  std::locale::facet *v78;
  unint64_t v79;
  uint64_t v80;
  std::locale::facet *v81;
  unint64_t v82;
  uint64_t v83;
  std::locale::facet *v84;
  unint64_t v85;
  uint64_t v86;
  std::locale::facet *v87;
  unint64_t v88;
  uint64_t v89;
  std::locale::facet *v90;
  unint64_t v91;
  uint64_t v92;
  std::locale::facet *v93;
  unint64_t v94;
  uint64_t v95;
  std::locale::facet *v96;
  unint64_t v97;
  uint64_t v98;
  std::locale::facet *v99;
  unint64_t v100;
  uint64_t v101;
  std::locale::facet *v102;
  unint64_t v103;
  uint64_t v104;
  std::locale::facet *v105;

  this->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E2E59380;
  this->__r_.__value_.__l.__size_ = -1;
  v8 = &this->__r_.__value_.__s.__data_[16];
  std::vector<std::locale::facet *,std::__sso_allocator<std::locale::facet *,30ul>>::vector((uint64_t)&this->__r_.__value_.__r.__words[2], 0x1EuLL);
  std::build_name((unsigned __int8 *)&a2[12], (unsigned __int8 *)a3 + 288, a4, this + 12);
  if (this != a2)
    std::vector<std::locale::facet *,std::__sso_allocator<std::locale::facet *,30ul>>::__assign_with_size[abi:ne180100]<std::locale::facet **,std::locale::facet **>(v8, (char *)a2->__r_.__value_.__r.__words[2], (uint64_t)a2[1].__r_.__value_.__l.__data_, (uint64_t)(a2[1].__r_.__value_.__r.__words[0] - a2->__r_.__value_.__r.__words[2]) >> 3);
  data = this[1].__r_.__value_.__l.__data_;
  v10 = (char *)this->__r_.__value_.__r.__words[2];
  if (data != v10)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = *(_QWORD *)&v10[8 * v11];
      if (v13)
      {
        v14 = (unint64_t *)(v13 + 8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
        data = this[1].__r_.__value_.__l.__data_;
        v10 = *(char **)v8;
      }
      v11 = ++v12;
    }
    while (v12 < (unint64_t)((data - v10) >> 3));
  }
  if ((a4 & 1) != 0)
  {
    v16 = std::locale::id::__get(&std::collate<char>::id);
    v17 = *((_QWORD *)a3 + 2);
    if (v16 >= (*((_QWORD *)a3 + 3) - v17) >> 3)
      goto LABEL_83;
    v18 = *(std::locale::facet **)(v17 + 8 * v16);
    if (!v18)
      goto LABEL_83;
    std::locale::__imp::install((std::locale::__imp *)this, v18, v16);
    v19 = std::locale::id::__get(&std::collate<wchar_t>::id);
    v20 = *((_QWORD *)a3 + 2);
    if (v19 >= (*((_QWORD *)a3 + 3) - v20) >> 3)
      goto LABEL_83;
    v21 = *(std::locale::facet **)(v20 + 8 * v19);
    if (!v21)
      goto LABEL_83;
    std::locale::__imp::install((std::locale::__imp *)this, v21, v19);
  }
  if ((a4 & 2) != 0)
  {
    v22 = std::locale::id::__get(&std::ctype<char>::id);
    v23 = *((_QWORD *)a3 + 2);
    if (v22 >= (*((_QWORD *)a3 + 3) - v23) >> 3)
      goto LABEL_83;
    v24 = *(std::locale::facet **)(v23 + 8 * v22);
    if (!v24)
      goto LABEL_83;
    std::locale::__imp::install((std::locale::__imp *)this, v24, v22);
    v25 = std::locale::id::__get(&std::ctype<wchar_t>::id);
    v26 = *((_QWORD *)a3 + 2);
    if (v25 >= (*((_QWORD *)a3 + 3) - v26) >> 3)
      goto LABEL_83;
    v27 = *(std::locale::facet **)(v26 + 8 * v25);
    if (!v27)
      goto LABEL_83;
    std::locale::__imp::install((std::locale::__imp *)this, v27, v25);
    v28 = std::locale::id::__get(&std::codecvt<char,char,__mbstate_t>::id);
    v29 = *((_QWORD *)a3 + 2);
    if (v28 >= (*((_QWORD *)a3 + 3) - v29) >> 3)
      goto LABEL_83;
    v30 = *(std::locale::facet **)(v29 + 8 * v28);
    if (!v30)
      goto LABEL_83;
    std::locale::__imp::install((std::locale::__imp *)this, v30, v28);
    v31 = std::locale::id::__get(&std::codecvt<char16_t,char,__mbstate_t>::id);
    v32 = *((_QWORD *)a3 + 2);
    if (v31 >= (*((_QWORD *)a3 + 3) - v32) >> 3)
      goto LABEL_83;
    v33 = *(std::locale::facet **)(v32 + 8 * v31);
    if (!v33)
      goto LABEL_83;
    std::locale::__imp::install((std::locale::__imp *)this, v33, v31);
    v34 = std::locale::id::__get(&std::codecvt<char32_t,char,__mbstate_t>::id);
    v35 = *((_QWORD *)a3 + 2);
    if (v34 >= (*((_QWORD *)a3 + 3) - v35) >> 3)
      goto LABEL_83;
    v36 = *(std::locale::facet **)(v35 + 8 * v34);
    if (!v36)
      goto LABEL_83;
    std::locale::__imp::install((std::locale::__imp *)this, v36, v34);
    v37 = std::locale::id::__get(&std::codecvt<char16_t,char8_t,__mbstate_t>::id);
    v38 = *((_QWORD *)a3 + 2);
    if (v37 >= (*((_QWORD *)a3 + 3) - v38) >> 3)
      goto LABEL_83;
    v39 = *(std::locale::facet **)(v38 + 8 * v37);
    if (!v39)
      goto LABEL_83;
    std::locale::__imp::install((std::locale::__imp *)this, v39, v37);
    v40 = std::locale::id::__get(&std::codecvt<char32_t,char8_t,__mbstate_t>::id);
    v41 = *((_QWORD *)a3 + 2);
    if (v40 >= (*((_QWORD *)a3 + 3) - v41) >> 3)
      goto LABEL_83;
    v42 = *(std::locale::facet **)(v41 + 8 * v40);
    if (!v42)
      goto LABEL_83;
    std::locale::__imp::install((std::locale::__imp *)this, v42, v40);
    v43 = std::locale::id::__get(&std::codecvt<wchar_t,char,__mbstate_t>::id);
    v44 = *((_QWORD *)a3 + 2);
    if (v43 >= (*((_QWORD *)a3 + 3) - v44) >> 3)
      goto LABEL_83;
    v45 = *(std::locale::facet **)(v44 + 8 * v43);
    if (!v45)
      goto LABEL_83;
    std::locale::__imp::install((std::locale::__imp *)this, v45, v43);
  }
  if ((a4 & 8) != 0)
  {
    v46 = std::locale::id::__get(&std::moneypunct<char,false>::id);
    v47 = *((_QWORD *)a3 + 2);
    if (v46 >= (*((_QWORD *)a3 + 3) - v47) >> 3)
      goto LABEL_83;
    v48 = *(std::locale::facet **)(v47 + 8 * v46);
    if (!v48)
      goto LABEL_83;
    std::locale::__imp::install((std::locale::__imp *)this, v48, v46);
    v49 = std::locale::id::__get(&std::moneypunct<char,true>::id);
    v50 = *((_QWORD *)a3 + 2);
    if (v49 >= (*((_QWORD *)a3 + 3) - v50) >> 3)
      goto LABEL_83;
    v51 = *(std::locale::facet **)(v50 + 8 * v49);
    if (!v51)
      goto LABEL_83;
    std::locale::__imp::install((std::locale::__imp *)this, v51, v49);
    v52 = std::locale::id::__get(&std::moneypunct<wchar_t,false>::id);
    v53 = *((_QWORD *)a3 + 2);
    if (v52 >= (*((_QWORD *)a3 + 3) - v53) >> 3)
      goto LABEL_83;
    v54 = *(std::locale::facet **)(v53 + 8 * v52);
    if (!v54)
      goto LABEL_83;
    std::locale::__imp::install((std::locale::__imp *)this, v54, v52);
    v55 = std::locale::id::__get(&std::moneypunct<wchar_t,true>::id);
    v56 = *((_QWORD *)a3 + 2);
    if (v55 >= (*((_QWORD *)a3 + 3) - v56) >> 3)
      goto LABEL_83;
    v57 = *(std::locale::facet **)(v56 + 8 * v55);
    if (!v57)
      goto LABEL_83;
    std::locale::__imp::install((std::locale::__imp *)this, v57, v55);
    v58 = std::locale::id::__get(&std::money_get<char,std::istreambuf_iterator<char>>::id);
    v59 = *((_QWORD *)a3 + 2);
    if (v58 >= (*((_QWORD *)a3 + 3) - v59) >> 3)
      goto LABEL_83;
    v60 = *(std::locale::facet **)(v59 + 8 * v58);
    if (!v60)
      goto LABEL_83;
    std::locale::__imp::install((std::locale::__imp *)this, v60, v58);
    v61 = std::locale::id::__get(&std::money_get<wchar_t,std::istreambuf_iterator<wchar_t>>::id);
    v62 = *((_QWORD *)a3 + 2);
    if (v61 >= (*((_QWORD *)a3 + 3) - v62) >> 3)
      goto LABEL_83;
    v63 = *(std::locale::facet **)(v62 + 8 * v61);
    if (!v63)
      goto LABEL_83;
    std::locale::__imp::install((std::locale::__imp *)this, v63, v61);
    v64 = std::locale::id::__get(&std::money_put<char,std::ostreambuf_iterator<char>>::id);
    v65 = *((_QWORD *)a3 + 2);
    if (v64 >= (*((_QWORD *)a3 + 3) - v65) >> 3)
      goto LABEL_83;
    v66 = *(std::locale::facet **)(v65 + 8 * v64);
    if (!v66)
      goto LABEL_83;
    std::locale::__imp::install((std::locale::__imp *)this, v66, v64);
    v67 = std::locale::id::__get(&std::money_put<wchar_t,std::ostreambuf_iterator<wchar_t>>::id);
    v68 = *((_QWORD *)a3 + 2);
    if (v67 >= (*((_QWORD *)a3 + 3) - v68) >> 3)
      goto LABEL_83;
    v69 = *(std::locale::facet **)(v68 + 8 * v67);
    if (!v69)
      goto LABEL_83;
    std::locale::__imp::install((std::locale::__imp *)this, v69, v67);
  }
  if ((a4 & 0x10) != 0)
  {
    v70 = std::locale::id::__get(&std::numpunct<char>::id);
    v71 = *((_QWORD *)a3 + 2);
    if (v70 >= (*((_QWORD *)a3 + 3) - v71) >> 3)
      goto LABEL_83;
    v72 = *(std::locale::facet **)(v71 + 8 * v70);
    if (!v72)
      goto LABEL_83;
    std::locale::__imp::install((std::locale::__imp *)this, v72, v70);
    v73 = std::locale::id::__get(&std::numpunct<wchar_t>::id);
    v74 = *((_QWORD *)a3 + 2);
    if (v73 >= (*((_QWORD *)a3 + 3) - v74) >> 3)
      goto LABEL_83;
    v75 = *(std::locale::facet **)(v74 + 8 * v73);
    if (!v75)
      goto LABEL_83;
    std::locale::__imp::install((std::locale::__imp *)this, v75, v73);
    v76 = std::locale::id::__get(&std::num_get<char,std::istreambuf_iterator<char>>::id);
    v77 = *((_QWORD *)a3 + 2);
    if (v76 >= (*((_QWORD *)a3 + 3) - v77) >> 3)
      goto LABEL_83;
    v78 = *(std::locale::facet **)(v77 + 8 * v76);
    if (!v78)
      goto LABEL_83;
    std::locale::__imp::install((std::locale::__imp *)this, v78, v76);
    v79 = std::locale::id::__get(&std::num_get<wchar_t,std::istreambuf_iterator<wchar_t>>::id);
    v80 = *((_QWORD *)a3 + 2);
    if (v79 >= (*((_QWORD *)a3 + 3) - v80) >> 3)
      goto LABEL_83;
    v81 = *(std::locale::facet **)(v80 + 8 * v79);
    if (!v81)
      goto LABEL_83;
    std::locale::__imp::install((std::locale::__imp *)this, v81, v79);
    v82 = std::locale::id::__get(&std::num_put<char,std::ostreambuf_iterator<char>>::id);
    v83 = *((_QWORD *)a3 + 2);
    if (v82 >= (*((_QWORD *)a3 + 3) - v83) >> 3)
      goto LABEL_83;
    v84 = *(std::locale::facet **)(v83 + 8 * v82);
    if (!v84)
      goto LABEL_83;
    std::locale::__imp::install((std::locale::__imp *)this, v84, v82);
    v85 = std::locale::id::__get(&std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t>>::id);
    v86 = *((_QWORD *)a3 + 2);
    if (v85 >= (*((_QWORD *)a3 + 3) - v86) >> 3)
      goto LABEL_83;
    v87 = *(std::locale::facet **)(v86 + 8 * v85);
    if (!v87)
      goto LABEL_83;
    std::locale::__imp::install((std::locale::__imp *)this, v87, v85);
  }
  if ((a4 & 0x20) != 0)
  {
    v88 = std::locale::id::__get(&std::time_get<char,std::istreambuf_iterator<char>>::id);
    v89 = *((_QWORD *)a3 + 2);
    if (v88 >= (*((_QWORD *)a3 + 3) - v89) >> 3)
      goto LABEL_83;
    v90 = *(std::locale::facet **)(v89 + 8 * v88);
    if (!v90)
      goto LABEL_83;
    std::locale::__imp::install((std::locale::__imp *)this, v90, v88);
    v91 = std::locale::id::__get(&std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::id);
    v92 = *((_QWORD *)a3 + 2);
    if (v91 >= (*((_QWORD *)a3 + 3) - v92) >> 3)
      goto LABEL_83;
    v93 = *(std::locale::facet **)(v92 + 8 * v91);
    if (!v93)
      goto LABEL_83;
    std::locale::__imp::install((std::locale::__imp *)this, v93, v91);
    v94 = std::locale::id::__get(&std::time_put<char,std::ostreambuf_iterator<char>>::id);
    v95 = *((_QWORD *)a3 + 2);
    if (v94 >= (*((_QWORD *)a3 + 3) - v95) >> 3)
      goto LABEL_83;
    v96 = *(std::locale::facet **)(v95 + 8 * v94);
    if (!v96)
      goto LABEL_83;
    std::locale::__imp::install((std::locale::__imp *)this, v96, v94);
    v97 = std::locale::id::__get(&std::time_put<wchar_t,std::ostreambuf_iterator<wchar_t>>::id);
    v98 = *((_QWORD *)a3 + 2);
    if (v97 >= (*((_QWORD *)a3 + 3) - v98) >> 3)
      goto LABEL_83;
    v99 = *(std::locale::facet **)(v98 + 8 * v97);
    if (!v99)
      goto LABEL_83;
    std::locale::__imp::install((std::locale::__imp *)this, v99, v97);
  }
  if ((a4 & 4) != 0)
  {
    v100 = std::locale::id::__get(&std::messages<char>::id);
    v101 = *((_QWORD *)a3 + 2);
    if (v100 < (*((_QWORD *)a3 + 3) - v101) >> 3)
    {
      v102 = *(std::locale::facet **)(v101 + 8 * v100);
      if (v102)
      {
        std::locale::__imp::install((std::locale::__imp *)this, v102, v100);
        v103 = std::locale::id::__get(&std::messages<wchar_t>::id);
        v104 = *((_QWORD *)a3 + 2);
        if (v103 < (*((_QWORD *)a3 + 3) - v104) >> 3)
        {
          v105 = *(std::locale::facet **)(v104 + 8 * v103);
          if (v105)
          {
            std::locale::__imp::install((std::locale::__imp *)this, v105, v103);
            return this;
          }
        }
      }
    }
LABEL_83:
    std::__throw_bad_cast[abi:ne180100]();
  }
  return this;
}

void sub_191FF13E4()
{
  __break(1u);
}

void sub_191FF1428()
{
  __cxa_end_catch();
  JUMPOUT(0x191FF1430);
}

std::locale::__imp *std::locale::__imp::__imp(std::locale::__imp *this, const std::locale::__imp *a2, std::locale::facet *a3, unint64_t a4)
{
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;

  *(_QWORD *)this = &off_1E2E59380;
  *((_QWORD *)this + 1) = -1;
  v8 = (char *)this + 16;
  v9 = (uint64_t)(*((_QWORD *)a2 + 3) - *((_QWORD *)a2 + 2)) >> 3;
  if ((unint64_t)(v9 + 1) > 0x1E)
    v10 = v9 + 1;
  else
    v10 = 30;
  std::vector<std::locale::facet *,std::__sso_allocator<std::locale::facet *,30ul>>::vector((uint64_t)this + 16, v10);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 36, "*");
  p_shared_owners = &a3->__shared_owners_;
  do
    v12 = __ldxr((unint64_t *)p_shared_owners);
  while (__stxr(v12 + 1, (unint64_t *)p_shared_owners));
  if (this != a2)
    std::vector<std::locale::facet *,std::__sso_allocator<std::locale::facet *,30ul>>::__assign_with_size[abi:ne180100]<std::locale::facet **,std::locale::facet **>(v8, *((char **)a2 + 2), *((_QWORD *)a2 + 3), (uint64_t)(*((_QWORD *)a2 + 3) - *((_QWORD *)a2 + 2)) >> 3);
  v14 = *((_QWORD *)a2 + 2);
  v13 = *((_QWORD *)a2 + 3);
  if (v13 != v14)
  {
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = *(_QWORD *)(*(_QWORD *)v8 + 8 * v15);
      if (v17)
      {
        v18 = (unint64_t *)(v17 + 8);
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
        v14 = *((_QWORD *)a2 + 2);
        v13 = *((_QWORD *)a2 + 3);
      }
      v15 = ++v16;
    }
    while (v16 < (unint64_t)((v13 - v14) >> 3));
  }
  std::locale::__imp::install(this, a3, a4);
  if (a3)
  {
    do
      v20 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v20 - 1, (unint64_t *)p_shared_owners));
    if (!v20)
      ((void (*)(std::locale::facet *))a3->__on_zero_shared)(a3);
  }
  return this;
}

void sub_191FF15C0(_Unwind_Exception *a1)
{
  std::__shared_count *v1;
  uint64_t **v2;
  uint64_t *v4;

  v4 = *v2;
  if (*v2)
  {
    v1[1].__shared_owners_ = (uint64_t)v4;
    if (v4 == &v1[2].__shared_owners_)
      *((_BYTE *)v4 + 240) = 0;
    else
      operator delete(v4);
  }
  std::__shared_count::~__shared_count(v1);
  _Unwind_Resume(a1);
}

unint64_t *std::locale::__imp::install(std::locale::__imp *this, std::locale::facet *a2, unint64_t a3)
{
  uint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t *result;
  unint64_t *v10;
  unint64_t v11;

  p_shared_owners = &a2->__shared_owners_;
  do
    v6 = __ldxr((unint64_t *)p_shared_owners);
  while (__stxr(v6 + 1, (unint64_t *)p_shared_owners));
  v7 = *((_QWORD *)this + 2);
  v8 = (uint64_t *)((char *)this + 16);
  if (a3 >= (*((_QWORD *)this + 3) - v7) >> 3)
  {
    std::vector<std::locale::facet *,std::__sso_allocator<std::locale::facet *,30ul>>::resize(v8, a3 + 1);
    v7 = *v8;
  }
  result = *(unint64_t **)(v7 + 8 * a3);
  if (result)
  {
    v10 = result + 1;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
      result = (unint64_t *)(*(uint64_t (**)(unint64_t *))(*result + 16))(result);
  }
  *(_QWORD *)(*v8 + 8 * a3) = a2;
  return result;
}

void sub_191FF16D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v4;

  if (v1)
  {
    do
      v4 = __ldaxr(v2);
    while (__stlxr(v4 - 1, v2));
    if (!v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::locale::__imp::~__imp(std::__shared_count *this)
{
  uint64_t shared_owners;
  uint64_t v3;
  unsigned int v4;
  unint64_t *v5;
  unint64_t *v6;
  unint64_t v7;

  this->__vftable = (std::__shared_count_vtbl *)&off_1E2E59380;
  shared_owners = this[1].__shared_owners_;
  if ((std::__shared_count_vtbl *)shared_owners != this[1].__vftable)
  {
    v3 = 0;
    v4 = 0;
    shared_owners = (uint64_t)this[1].__vftable;
    do
    {
      v5 = *(unint64_t **)(shared_owners + 8 * v3);
      if (v5)
      {
        v6 = v5 + 1;
        do
          v7 = __ldaxr(v6);
        while (__stlxr(v7 - 1, v6));
        if (!v7)
          (*(void (**)(unint64_t *))(*v5 + 16))(v5);
      }
      shared_owners = (uint64_t)this[1].__vftable;
      v3 = ++v4;
    }
    while (v4 < (unint64_t)((this[1].__shared_owners_ - shared_owners) >> 3));
  }
  if (SHIBYTE(this[19].__vftable) < 0)
  {
    operator delete(this[18].__vftable);
    shared_owners = (uint64_t)this[1].__vftable;
    if (!shared_owners)
      goto LABEL_16;
  }
  else if (!shared_owners)
  {
    goto LABEL_16;
  }
  this[1].__shared_owners_ = shared_owners;
  if ((uint64_t *)shared_owners == &this[2].__shared_owners_)
    *(_BYTE *)(shared_owners + 240) = 0;
  else
    operator delete((void *)shared_owners);
LABEL_16:
  std::__shared_count::~__shared_count(this);
}

{
  std::locale::__imp::~__imp(this);
  JUMPOUT(0x194021E38);
}

void std::vector<std::locale::facet *,std::__sso_allocator<std::locale::facet *,30ul>>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (a1[1] - *a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      a1[1] = *a1 + 8 * a2;
  }
  else
  {
    std::vector<std::locale::facet *,std::__sso_allocator<std::locale::facet *,30ul>>::__append(a1, a2 - v2);
  }
}

uint64_t std::locale::__imp::use_facet(std::locale::__imp *this, unint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *((_QWORD *)this + 2);
  if (a2 >= (*((_QWORD *)this + 3) - v2) >> 3 || (result = *(_QWORD *)(v2 + 8 * a2)) == 0)
    std::__throw_bad_cast[abi:ne180100]();
  return result;
}

std::locale *std::locale::__global(void)
{
  unsigned __int8 v0;
  std::locale::__imp *locale;
  unint64_t *v3;
  unint64_t v4;

  {
    locale = std::locale::classic()->__locale_;
    std::locale::__global(void)::g = (uint64_t)locale;
    if (locale != (std::locale::__imp *)&std::locale::__imp::classic_locale_imp_)
    {
      v3 = (unint64_t *)((char *)locale + 8);
      do
        v4 = __ldxr(v3);
      while (__stxr(v4 + 1, v3));
    }
  }
  return (std::locale *)&std::locale::__global(void)::g;
}

void sub_191FF18DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

char *std::locale::__imp::acquire(char *this)
{
  unint64_t *v1;
  unint64_t v2;

  if (this != (char *)&std::locale::__imp::classic_locale_imp_)
  {
    v1 = (unint64_t *)(this + 8);
    do
      v2 = __ldxr(v1);
    while (__stxr(v2 + 1, v1));
  }
  return this;
}

unint64_t *std::locale::__imp::release(unint64_t *this)
{
  unint64_t *v1;
  unint64_t v2;

  if (this != (unint64_t *)&std::locale::__imp::classic_locale_imp_)
  {
    v1 = this + 1;
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 - 1, v1));
    if (!v2)
      return (unint64_t *)(*(uint64_t (**)(unint64_t *))(*this + 16))(this);
  }
  return this;
}

std::locale *__cdecl std::locale::locale(std::locale *this)
{
  std::locale *v2;
  std::locale::__imp *locale;
  unint64_t *v4;
  unint64_t v5;

  v2 = std::locale::__global();
  locale = v2->__locale_;
  this->__locale_ = v2->__locale_;
  if (locale != (std::locale::__imp *)&std::locale::__imp::classic_locale_imp_)
  {
    v4 = (unint64_t *)((char *)locale + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return this;
}

std::locale *__cdecl std::locale::locale(std::locale *this, const std::locale *a2)
{
  std::locale::__imp *locale;
  unint64_t *v3;
  unint64_t v4;

  locale = a2->__locale_;
  this->__locale_ = a2->__locale_;
  if (locale != (std::locale::__imp *)&std::locale::__imp::classic_locale_imp_)
  {
    v3 = (unint64_t *)((char *)locale + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

{
  std::locale::__imp *locale;
  unint64_t *v3;
  unint64_t v4;

  locale = a2->__locale_;
  this->__locale_ = a2->__locale_;
  if (locale != (std::locale::__imp *)&std::locale::__imp::classic_locale_imp_)
  {
    v3 = (unint64_t *)((char *)locale + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

const std::locale *__cdecl std::locale::operator=(std::locale *this, const std::locale *a2)
{
  unint64_t *v4;
  unint64_t v5;
  std::locale::__imp *locale;
  unint64_t *v7;
  unint64_t v8;

  if (a2->__locale_ != (std::locale::__imp *)&std::locale::__imp::classic_locale_imp_)
  {
    v4 = (unint64_t *)((char *)a2->__locale_ + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  locale = this->__locale_;
  if (this->__locale_ != (std::locale::__imp *)&std::locale::__imp::classic_locale_imp_)
  {
    v7 = (unint64_t *)((char *)locale + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
      (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 16))(locale);
  }
  this->__locale_ = a2->__locale_;
  return this;
}

std::locale *__cdecl std::locale::locale(std::locale *this, const char *a2)
{
  std::locale::__imp *v4;
  unint64_t *v5;
  unint64_t v6;
  void *__p[2];
  char v9;

  if (!a2)
    std::__throw_runtime_error("locale constructed with null");
  v4 = (std::locale::__imp *)operator new();
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)a2);
  std::locale::__imp::__imp((uint64_t)v4, (__int128 *)__p, 0);
  if (v9 < 0)
    operator delete(__p[0]);
  this->__locale_ = v4;
  v5 = (unint64_t *)((char *)v4 + 8);
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  return this;
}

void sub_191FF1B8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x194021E38](v15, 0x1093C4098993A93);
  _Unwind_Resume(a1);
}

std::locale *__cdecl std::locale::locale(std::locale *this, const std::string *a2)
{
  std::locale::__imp *v4;
  unint64_t *v5;
  unint64_t v6;

  v4 = (std::locale::__imp *)operator new();
  std::locale::__imp::__imp((uint64_t)v4, (__int128 *)a2, 0);
  this->__locale_ = v4;
  v5 = (unint64_t *)((char *)v4 + 8);
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  return this;
}

void sub_191FF1C38(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194021E38](v1, 0x1093C4098993A93);
  _Unwind_Resume(a1);
}

std::locale *__cdecl std::locale::locale(std::locale *this, const std::locale *a2, const char *a3, std::locale::category a4)
{
  std::string *v8;
  std::locale::__imp *locale;
  unint64_t *p_size;
  unint64_t v11;
  void *__p[2];
  char v14;

  if (!a3)
    std::__throw_runtime_error("locale constructed with null");
  v8 = (std::string *)operator new();
  locale = a2->__locale_;
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)a3);
  std::locale::__imp::__imp(v8, (uint64_t)locale, (uint64_t)__p, a4);
  if (v14 < 0)
    operator delete(__p[0]);
  this->__locale_ = (std::locale::__imp *)v8;
  p_size = &v8->__r_.__value_.__l.__size_;
  do
    v11 = __ldxr(p_size);
  while (__stxr(v11 + 1, p_size));
  return this;
}

void sub_191FF1D1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x194021E38](v15, 0x1093C4098993A93);
  _Unwind_Resume(a1);
}

std::locale *__cdecl std::locale::locale(std::locale *this, const std::locale *a2, const std::string *a3, std::locale::category a4)
{
  std::string *v8;
  unint64_t *p_size;
  unint64_t v10;

  v8 = (std::string *)operator new();
  std::locale::__imp::__imp(v8, (uint64_t)a2->__locale_, (uint64_t)a3, a4);
  this->__locale_ = (std::locale::__imp *)v8;
  p_size = &v8->__r_.__value_.__l.__size_;
  do
    v10 = __ldxr(p_size);
  while (__stxr(v10 + 1, p_size));
  return this;
}

void sub_191FF1DDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194021E38](v1, 0x1093C4098993A93);
  _Unwind_Resume(a1);
}

std::locale *__cdecl std::locale::locale(std::locale *this, const std::locale *a2, const std::locale *a3, std::locale::category a4)
{
  std::string *v8;
  unint64_t *p_size;
  unint64_t v10;

  v8 = (std::string *)operator new();
  std::locale::__imp::__imp(v8, (std::string *)a2->__locale_, a3->__locale_, a4);
  this->__locale_ = (std::locale::__imp *)v8;
  p_size = &v8->__r_.__value_.__l.__size_;
  do
    v10 = __ldxr(p_size);
  while (__stxr(v10 + 1, p_size));
  return this;
}

void sub_191FF1E84(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194021E38](v1, 0x1093C4098993A93);
  _Unwind_Resume(a1);
}

std::string *__cdecl std::locale::name(std::string *__return_ptr retstr, std::string *this)
{
  std::string::size_type v2;
  std::string::size_type v3;
  __int128 v4;

  v2 = this->__r_.__value_.__r.__words[0];
  if (*(char *)(this->__r_.__value_.__r.__words[0] + 311) < 0)
  {
    std::string::__init_copy_ctor_external(retstr, *(const std::string::value_type **)(v2 + 288), *(_QWORD *)(v2 + 296));
  }
  else
  {
    v3 = v2 + 288;
    v4 = *(_OWORD *)v3;
    retstr->__r_.__value_.__r.__words[2] = *(_QWORD *)(v3 + 16);
    *(_OWORD *)&retstr->__r_.__value_.__l.__data_ = v4;
  }
  return this;
}

void std::locale::__install_ctor(std::locale *this, const std::locale *a2, std::locale::facet *a3, uint64_t a4)
{
  std::locale::__imp *locale;
  unint64_t *v9;
  unint64_t v10;

  if (a3)
  {
    locale = (std::locale::__imp *)operator new();
    std::locale::__imp::__imp(locale, a2->__locale_, a3, a4);
    this->__locale_ = locale;
  }
  else
  {
    locale = a2->__locale_;
    this->__locale_ = a2->__locale_;
    if (locale == (std::locale::__imp *)&std::locale::__imp::classic_locale_imp_)
      return;
  }
  v9 = (unint64_t *)((char *)locale + 8);
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
}

void sub_191FF1F78(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194021E38](v1, 0x1093C4098993A93);
  _Unwind_Resume(a1);
}

std::locale std::locale::global(const std::locale *a1)
{
  std::locale::__imp **v1;
  std::locale::__imp **v3;
  std::locale *v4;
  std::locale *v5;
  std::locale::__imp *locale;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  unint64_t *v12;
  unint64_t v13;
  std::locale::__imp *v14;
  std::string::size_type size;
  std::string *p_p;
  BOOL v17;
  std::locale::__imp *v18;
  std::string *v19;
  std::string __p;

  v3 = v1;
  v4 = std::locale::__global();
  v5 = v4;
  locale = v4->__locale_;
  *v3 = v4->__locale_;
  if (locale != (std::locale::__imp *)&std::locale::__imp::classic_locale_imp_)
  {
    v7 = (unint64_t *)((char *)locale + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  if (a1->__locale_ != (std::locale::__imp *)&std::locale::__imp::classic_locale_imp_)
  {
    v9 = (unint64_t *)((char *)a1->__locale_ + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = (char *)v4->__locale_;
  if (v5->__locale_ != (std::locale::__imp *)&std::locale::__imp::classic_locale_imp_)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
      v11 = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)v11 + 16))(v11);
  }
  v14 = a1->__locale_;
  v5->__locale_ = a1->__locale_;
  if (*((char *)v14 + 311) < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v14 + 36), *((_QWORD *)v14 + 37));
  else
    __p = *(std::string *)((_BYTE *)v14 + 12);
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (size == 1)
  {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    v17 = p_p->__r_.__value_.__s.__data_[0] == 42;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_25:
      operator delete(__p.__r_.__value_.__l.__data_);
      if (v17)
        return (std::locale)v11;
      goto LABEL_26;
    }
  }
  else
  {
    v17 = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_25;
  }
  if (v17)
    return (std::locale)v11;
LABEL_26:
  v18 = v5->__locale_;
  if (*((char *)v5->__locale_ + 311) < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v18 + 36), *((_QWORD *)v18 + 37));
  else
    __p = *(std::string *)((_BYTE *)v18 + 12);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = &__p;
  else
    v19 = (std::string *)__p.__r_.__value_.__r.__words[0];
  v11 = setlocale(0, (const char *)v19);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return (std::locale)v11;
}

void sub_191FF213C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  unint64_t **v14;
  unint64_t *v15;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t v19;

  v17 = *v14;
  if (*v14 != v15)
  {
    v18 = v17 + 1;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
      (*(void (**)(unint64_t *))(*v17 + 16))(v17);
  }
  _Unwind_Resume(exception_object);
}

BOOL std::locale::has_facet(const std::locale *this, std::locale::id *a2)
{
  std::locale::__imp *locale;
  unint64_t v3;
  uint64_t v4;

  locale = this->__locale_;
  v3 = std::locale::id::__get(a2);
  v4 = *((_QWORD *)locale + 2);
  return v3 < (*((_QWORD *)locale + 3) - v4) >> 3 && *(_QWORD *)(v4 + 8 * v3) != 0;
}

uint64_t std::locale::id::__get(std::locale::id *this)
{
  unint64_t v2;
  std::locale::id *v4;
  std::locale::id ***v5;
  std::locale::id **v6;

  v4 = this;
  v2 = atomic_load(&this->__flag_.__state_);
  if (v2 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&this->__flag_.__state_, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<std::locale::id::__get(void)::$_0 &&>>);
  }
  return this->__id_ - 1;
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  std::locale::__imp *locale;
  unint64_t v3;
  uint64_t v4;
  const std::locale::facet *result;

  locale = this->__locale_;
  v3 = std::locale::id::__get(a2);
  v4 = *((_QWORD *)locale + 2);
  if (v3 >= (*((_QWORD *)locale + 3) - v4) >> 3 || (result = *(const std::locale::facet **)(v4 + 8 * v3)) == 0)
    std::__throw_bad_cast[abi:ne180100]();
  return result;
}

BOOL std::locale::operator==(const std::locale *this, const std::locale *a2)
{
  std::locale::__imp *locale;
  std::locale::__imp *v3;
  const void **v4;
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  const void **v8;
  uint64_t v9;
  int v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  BOOL v20;
  BOOL result;

  locale = this->__locale_;
  v3 = a2->__locale_;
  if (this->__locale_ == a2->__locale_)
    return 1;
  v4 = (const void **)((char *)locale + 288);
  v5 = *((unsigned __int8 *)locale + 311);
  v6 = *((_QWORD *)locale + 37);
  if ((v5 & 0x80u) == 0)
    v7 = *((unsigned __int8 *)locale + 311);
  else
    v7 = *((_QWORD *)locale + 37);
  if (v7 == 1)
  {
    v8 = (v5 & 0x80u) == 0 ? v4 : (const void **)*v4;
    if (*(_BYTE *)v8 == 42)
      return 0;
  }
  v9 = *((unsigned __int8 *)v3 + 311);
  v10 = (char)v9;
  if ((v9 & 0x80u) != 0)
    v9 = *((_QWORD *)v3 + 37);
  if (v7 != v9)
    return 0;
  v11 = (unsigned __int8 *)v3 + 288;
  v12 = (unsigned __int8 *)*((_QWORD *)v3 + 36);
  if (v10 >= 0)
    v13 = v11;
  else
    v13 = v12;
  if ((v5 & 0x80) != 0)
    return memcmp(*v4, v13, v6) == 0;
  if (!(_DWORD)v5)
    return 1;
  v14 = v5 - 1;
  do
  {
    v16 = *(unsigned __int8 *)v4;
    v4 = (const void **)((char *)v4 + 1);
    v15 = v16;
    v18 = *v13++;
    v17 = v18;
    v20 = v14-- != 0;
    result = v15 == v17;
  }
  while (v15 == v17 && v20);
  return result;
}

void std::locale::facet::~facet(std::locale::facet *this)
{
  std::__shared_count::~__shared_count(this);
  JUMPOUT(0x194021E38);
}

void std::locale::facet::__on_zero_shared(std::locale::facet *this)
{
  if (this)
    ((void (*)(std::locale::facet *))this->~facet_0)(this);
}

std::collate_byname<char> *__cdecl std::collate_byname<char>::collate_byname(std::collate_byname<char> *this, const char *__n, size_t __refs)
{
  _xlocale *v5;
  std::string *v7;
  std::string v8;
  std::string v9;

  this[1].__l_ = (locale_t)(__refs - 1);
  v5 = newlocale(63, __n, 0);
  this[2].__l_ = v5;
  if (!v5)
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, (char *)__n);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("collate_byname<char>::collate_byname failed to construct for ", &v8, &v9);
    if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v7 = &v9;
    else
      v7 = (std::string *)v9.__r_.__value_.__r.__words[0];
    std::__throw_runtime_error((const char *)v7);
  }
  return this;
}

void sub_191FF241C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_count *v20;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  std::__shared_count::~__shared_count(v20);
  _Unwind_Resume(a1);
}

__n128 std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<Q0>(const char *a1@<X0>, std::string *a2@<X1>, std::string *a3@<X8>)
{
  size_t v6;
  __n128 *v7;
  __n128 result;

  v6 = strlen(a1);
  v7 = (__n128 *)std::string::insert(a2, 0, a1, v6);
  result = *v7;
  *a3 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

std::collate_byname<char> *__cdecl std::collate_byname<char>::collate_byname(std::collate_byname<char> *this, const std::string *__n, size_t __refs)
{
  std::string *v3;
  _xlocale *v5;
  const char *v7;
  void *v8[2];
  char v9;

  v3 = (std::string *)__n;
  this[1].__l_ = (locale_t)(__refs - 1);
  if ((__n->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    __n = (const std::string *)__n->__r_.__value_.__r.__words[0];
  v5 = newlocale(63, (const char *)__n, 0);
  this[2].__l_ = v5;
  if (!v5)
  {
    std::operator+<char>("collate_byname<char>::collate_byname failed to construct for ", (const void **)&v3->__r_.__value_.__l.__data_, v8);
    if (v9 >= 0)
      v7 = (const char *)v8;
    else
      v7 = (const char *)v8[0];
    std::__throw_runtime_error(v7);
  }
  return this;
}

void sub_191FF255C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__shared_count *v15;

  if (a15 < 0)
    operator delete(__p);
  std::__shared_count::~__shared_count(v15);
  _Unwind_Resume(a1);
}

void std::collate_byname<char>::~collate_byname(std::collate_byname<char> *this)
{
  freelocale(this[2].__l_);
  std::__shared_count::~__shared_count((std::__shared_count *)this);
}

{
  std::collate_byname<char>::~collate_byname(this);
  JUMPOUT(0x194021E38);
}

int std::collate_byname<char>::do_compare(const std::collate_byname<char> *this, const std::collate_byname<char>::char_type *__lo1, const std::collate_byname<char>::char_type *__hi1, const std::collate_byname<char>::char_type *__lo2, const std::collate_byname<char>::char_type *__hi2)
{
  void **v8;
  void **v9;
  int v10;
  void *__p[2];
  char v13;
  void *v14[2];
  char v15;

  std::string::__init_with_size[abi:ne180100]<char const*,char const*>(v14, (char *)__lo1, (char *)__hi1, __hi1 - __lo1);
  std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__p, (char *)__lo2, (char *)__hi2, __hi2 - __lo2);
  if (v15 >= 0)
    v8 = v14;
  else
    v8 = (void **)v14[0];
  if (v13 >= 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  v10 = strcoll_l((const char *)v8, (const char *)v9, this[2].__l_);
  if (v13 < 0)
    operator delete(__p[0]);
  if (v15 < 0)
    operator delete(v14[0]);
  if (v10 < 0)
    return -1;
  else
    return v10 != 0;
}

void sub_191FF26A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

std::collate_byname<char>::string_type *__cdecl std::collate_byname<char>::do_transform(std::collate_byname<char>::string_type *__return_ptr retstr, const std::collate_byname<char> *this, const std::collate_byname<char>::char_type *__lo, const std::collate_byname<char>::char_type *__hi)
{
  void **v6;
  size_t v7;
  int v8;
  void **v9;
  BOOL v10;
  std::collate_byname<char>::string_type *v11;
  std::string::size_type size;
  std::collate_byname<char>::string_type *result;
  void *__p[2];
  char v15;

  std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__p, (char *)__lo, (char *)__hi, __hi - __lo);
  if (v15 >= 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  v7 = strxfrm_l(0, (const char *)v6, 0, this[2].__l_);
  std::string::basic_string[abi:ne180100](retstr, v7, 0);
  v8 = SHIBYTE(retstr->__r_.__value_.__r.__words[2]);
  if (v15 >= 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  v10 = v8 < 0;
  if (v8 >= 0)
    v11 = retstr;
  else
    v11 = (std::collate_byname<char>::string_type *)retstr->__r_.__value_.__r.__words[0];
  size = HIBYTE(retstr->__r_.__value_.__r.__words[2]);
  if (v10)
    size = retstr->__r_.__value_.__l.__size_;
  result = (std::collate_byname<char>::string_type *)strxfrm_l((char *)v11, (const char *)v9, size + 1, this[2].__l_);
  if (v15 < 0)
    operator delete(__p[0]);
  return result;
}

void sub_191FF2794(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::collate_byname<wchar_t> *__cdecl std::collate_byname<wchar_t>::collate_byname(std::collate_byname<wchar_t> *this, const char *__n, size_t __refs)
{
  _xlocale *v5;
  std::string *v7;
  std::string v8;
  std::string v9;

  this[1].__l_ = (locale_t)(__refs - 1);
  v5 = newlocale(63, __n, 0);
  this[2].__l_ = v5;
  if (!v5)
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, (char *)__n);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("collate_byname<wchar_t>::collate_byname(size_t refs) failed to construct for ", &v8, &v9);
    if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v7 = &v9;
    else
      v7 = (std::string *)v9.__r_.__value_.__r.__words[0];
    std::__throw_runtime_error((const char *)v7);
  }
  return this;
}

void sub_191FF2854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_count *v20;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  std::__shared_count::~__shared_count(v20);
  _Unwind_Resume(a1);
}

std::collate_byname<wchar_t> *__cdecl std::collate_byname<wchar_t>::collate_byname(std::collate_byname<wchar_t> *this, const std::string *__n, size_t __refs)
{
  std::string *v3;
  _xlocale *v5;
  const char *v7;
  void *v8[2];
  char v9;

  v3 = (std::string *)__n;
  this[1].__l_ = (locale_t)(__refs - 1);
  if ((__n->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    __n = (const std::string *)__n->__r_.__value_.__r.__words[0];
  v5 = newlocale(63, (const char *)__n, 0);
  this[2].__l_ = v5;
  if (!v5)
  {
    std::operator+<char>("collate_byname<wchar_t>::collate_byname(size_t refs) failed to construct for ", (const void **)&v3->__r_.__value_.__l.__data_, v8);
    if (v9 >= 0)
      v7 = (const char *)v8;
    else
      v7 = (const char *)v8[0];
    std::__throw_runtime_error(v7);
  }
  return this;
}

void sub_191FF2938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__shared_count *v15;

  if (a15 < 0)
    operator delete(__p);
  std::__shared_count::~__shared_count(v15);
  _Unwind_Resume(a1);
}

void std::collate_byname<wchar_t>::~collate_byname(std::collate_byname<wchar_t> *this)
{
  freelocale(this[2].__l_);
  std::__shared_count::~__shared_count((std::__shared_count *)this);
}

{
  std::collate_byname<wchar_t>::~collate_byname(this);
  JUMPOUT(0x194021E38);
}

int std::collate_byname<wchar_t>::do_compare(const std::collate_byname<wchar_t> *this, const std::collate_byname<wchar_t>::char_type *__lo1, const std::collate_byname<wchar_t>::char_type *__hi1, const std::collate_byname<wchar_t>::char_type *__lo2, const std::collate_byname<wchar_t>::char_type *__hi2)
{
  void **v8;
  void **v9;
  int v10;
  void *__p[2];
  char v13;
  void *v14[2];
  char v15;

  std::wstring::__init_with_size[abi:ne180100]<wchar_t const*,wchar_t const*>(v14, (int *)__lo1, (int *)__hi1, __hi1 - __lo1);
  std::wstring::__init_with_size[abi:ne180100]<wchar_t const*,wchar_t const*>(__p, (int *)__lo2, (int *)__hi2, __hi2 - __lo2);
  if (v15 >= 0)
    v8 = v14;
  else
    v8 = (void **)v14[0];
  if (v13 >= 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  v10 = wcscoll_l((const __int32 *)v8, (const __int32 *)v9, this[2].__l_);
  if (v13 < 0)
    operator delete(__p[0]);
  if (v15 < 0)
    operator delete(v14[0]);
  if (v10 < 0)
    return -1;
  else
    return v10 != 0;
}

void sub_191FF2A8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

std::collate_byname<wchar_t>::string_type *__cdecl std::collate_byname<wchar_t>::do_transform(std::collate_byname<wchar_t>::string_type *__return_ptr retstr, const std::collate_byname<wchar_t> *this, const std::collate_byname<wchar_t>::char_type *__lo, const std::collate_byname<wchar_t>::char_type *__hi)
{
  void **v6;
  size_t v7;
  int v8;
  void **v9;
  BOOL v10;
  std::collate_byname<wchar_t>::string_type *v11;
  std::wstring::size_type size;
  std::collate_byname<wchar_t>::string_type *result;
  void *__p[2];
  char v15;

  std::wstring::__init_with_size[abi:ne180100]<wchar_t const*,wchar_t const*>(__p, (int *)__lo, (int *)__hi, __hi - __lo);
  if (v15 >= 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  v7 = wcsxfrm_l(0, (const __int32 *)v6, 0, this[2].__l_);
  std::wstring::basic_string[abi:ne180100](retstr, v7, 0);
  v8 = SHIBYTE(retstr->__r_.__value_.__r.__words[2]);
  if (v15 >= 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  v10 = v8 < 0;
  if (v8 >= 0)
    v11 = retstr;
  else
    v11 = (std::collate_byname<wchar_t>::string_type *)retstr->__r_.__value_.__r.__words[0];
  size = HIBYTE(retstr->__r_.__value_.__r.__words[2]);
  if (v10)
    size = retstr->__r_.__value_.__l.__size_;
  result = (std::collate_byname<wchar_t>::string_type *)wcsxfrm_l((__int32 *)v11, (const __int32 *)v9, size + 1, this[2].__l_);
  if (v15 < 0)
    operator delete(__p[0]);
  return result;
}

void sub_191FF2B7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::ctype<wchar_t>::~ctype(std::ctype<wchar_t> *this)
{
  std::__shared_count::~__shared_count(this);
  JUMPOUT(0x194021E38);
}

BOOL std::ctype<wchar_t>::do_is(const std::ctype<wchar_t> *this, std::ctype_base::mask __m, std::ctype<wchar_t>::char_type __c)
{
  return __c <= 0x7F && (*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * __c + 60) & __m) != 0;
}

const std::ctype_base::mask *std::ctype<char>::classic_table(void)
{
  return (const std::ctype_base::mask *)(MEMORY[0x1E0C80978] + 60);
}

const std::ctype<wchar_t>::char_type *__cdecl std::ctype<wchar_t>::do_is(const std::ctype<wchar_t> *this, const std::ctype<wchar_t>::char_type *__low, const std::ctype<wchar_t>::char_type *__high, std::ctype_base::mask *__vec)
{
  const std::ctype<wchar_t>::char_type *result;
  uint64_t v5;
  uint64_t v6;
  std::ctype_base::mask v7;

  result = __low;
  if (__low != __high)
  {
    v5 = MEMORY[0x1E0C80978];
    do
    {
      v6 = *(unsigned int *)result;
      if (v6 <= 0x7F)
        v7 = *(_DWORD *)(v5 + 4 * v6 + 60);
      else
        v7 = 0;
      *__vec++ = v7;
      ++result;
    }
    while (result != __high);
    return __high;
  }
  return result;
}

const std::ctype<wchar_t>::char_type *__cdecl std::ctype<wchar_t>::do_scan_is(const std::ctype<wchar_t> *this, std::ctype_base::mask __m, const std::ctype<wchar_t>::char_type *__low, const std::ctype<wchar_t>::char_type *__high)
{
  const std::ctype<wchar_t>::char_type *result;
  uint64_t v5;

  result = __low;
  if (__low != __high)
  {
    while (1)
    {
      v5 = *(unsigned int *)result;
      if (v5 <= 0x7F && (*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v5 + 60) & __m) != 0)
        break;
      if (++result == __high)
        return __high;
    }
  }
  return result;
}

const std::ctype<wchar_t>::char_type *__cdecl std::ctype<wchar_t>::do_scan_not(const std::ctype<wchar_t> *this, std::ctype_base::mask __m, const std::ctype<wchar_t>::char_type *__low, const std::ctype<wchar_t>::char_type *__high)
{
  const std::ctype<wchar_t>::char_type *result;
  uint64_t v5;

  result = __low;
  if (__low != __high)
  {
    while (1)
    {
      v5 = *(unsigned int *)result;
      if (v5 > 0x7F || (*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v5 + 60) & __m) == 0)
        break;
      if (++result == __high)
        return __high;
    }
  }
  return result;
}

std::ctype<wchar_t>::char_type std::ctype<wchar_t>::do_toupper(const std::ctype<wchar_t> *this, std::ctype<wchar_t>::char_type a2)
{
  std::ctype<wchar_t>::char_type result;

  result = a2;
  if (a2 <= 0x7F)
    return *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * a2 + 2108);
  return result;
}

const std::ctype<wchar_t>::char_type *__cdecl std::ctype<wchar_t>::do_toupper(const std::ctype<wchar_t> *this, std::ctype<wchar_t>::char_type *__low, const std::ctype<wchar_t>::char_type *__high)
{
  const std::ctype<wchar_t>::char_type *result;
  uint64_t v4;
  uint64_t v5;
  const std::ctype<wchar_t>::char_type *v6;

  result = __low;
  if (__low != __high)
  {
    v4 = MEMORY[0x1E0C80978];
    do
    {
      v5 = *result;
      if (v5 <= 0x7F)
        v6 = (const std::ctype<wchar_t>::char_type *)(v4 + 4 * v5 + 2108);
      else
        v6 = result;
      *result++ = *v6;
    }
    while (result != __high);
    return __high;
  }
  return result;
}

std::ctype<wchar_t>::char_type std::ctype<wchar_t>::do_tolower(const std::ctype<wchar_t> *this, std::ctype<wchar_t>::char_type a2)
{
  std::ctype<wchar_t>::char_type result;

  result = a2;
  if (a2 <= 0x7F)
    return *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * a2 + 1084);
  return result;
}

const std::ctype<wchar_t>::char_type *__cdecl std::ctype<wchar_t>::do_tolower(const std::ctype<wchar_t> *this, std::ctype<wchar_t>::char_type *__low, const std::ctype<wchar_t>::char_type *__high)
{
  const std::ctype<wchar_t>::char_type *result;
  uint64_t v4;
  uint64_t v5;
  const std::ctype<wchar_t>::char_type *v6;

  result = __low;
  if (__low != __high)
  {
    v4 = MEMORY[0x1E0C80978];
    do
    {
      v5 = *result;
      if (v5 <= 0x7F)
        v6 = (const std::ctype<wchar_t>::char_type *)(v4 + 4 * v5 + 1084);
      else
        v6 = result;
      *result++ = *v6;
    }
    while (result != __high);
    return __high;
  }
  return result;
}

std::ctype<wchar_t>::char_type std::ctype<wchar_t>::do_widen(const std::ctype<wchar_t> *this, char a2)
{
  return a2;
}

const char *__cdecl std::ctype<wchar_t>::do_widen(const std::ctype<wchar_t> *this, const char *__low, const char *__high, std::ctype<wchar_t>::char_type *__dest)
{
  const char *result;
  std::ctype<wchar_t>::char_type v5;

  result = __low;
  if (__low != __high)
  {
    do
    {
      v5 = *result++;
      *__dest++ = v5;
    }
    while (result != __high);
    return __high;
  }
  return result;
}

char std::ctype<wchar_t>::do_narrow(const std::ctype<wchar_t> *this, std::ctype<wchar_t>::char_type a2, char __dfault)
{
  if (a2 <= 0x7F)
    return a2;
  return __dfault;
}

const std::ctype<wchar_t>::char_type *__cdecl std::ctype<wchar_t>::do_narrow(const std::ctype<wchar_t> *this, const std::ctype<wchar_t>::char_type *__low, const std::ctype<wchar_t>::char_type *__high, char __dfault, char *__dest)
{
  const std::ctype<wchar_t>::char_type *result;
  char v6;
  unsigned int v7;

  result = __low;
  if (__low != __high)
  {
    do
    {
      v7 = *result++;
      v6 = v7;
      if (v7 > 0x7F)
        v6 = __dfault;
      *__dest++ = v6;
    }
    while (result != __high);
    return __high;
  }
  return result;
}

std::ctype<char> *__cdecl std::ctype<char>::ctype(std::ctype<char> *this, const std::ctype_base::mask *__tab, BOOL __del, size_t __refs)
{
  this->__shared_owners_ = __refs - 1;
  this->__tab_ = __tab;
  this->__del_ = __del;
  if (!__tab)
    this->__tab_ = (const std::ctype_base::mask *)(MEMORY[0x1E0C80978] + 60);
  return this;
}

{
  this->__shared_owners_ = __refs - 1;
  this->__tab_ = __tab;
  this->__del_ = __del;
  if (!__tab)
    this->__tab_ = (const std::ctype_base::mask *)(MEMORY[0x1E0C80978] + 60);
  return this;
}

void std::ctype<char>::~ctype(std::ctype<char> *this)
{
  if (this->__tab_ && this->__del_)
    MEMORY[0x194021E14]();
  std::__shared_count::~__shared_count(this);
}

{
  std::ctype<char>::~ctype(this);
  JUMPOUT(0x194021E38);
}

std::ctype<char>::char_type std::ctype<char>::do_toupper(const std::ctype<char> *this, std::ctype<char>::char_type __c)
{
  if ((__c & 0x80000000) == 0)
    *(_DWORD *)&__c = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * __c + 2108);
  return __c;
}

const std::ctype<char>::char_type *__cdecl std::ctype<char>::do_toupper(const std::ctype<char> *this, std::ctype<char>::char_type *__low, const std::ctype<char>::char_type *__high)
{
  const std::ctype<char>::char_type *result;
  uint64_t v4;
  int v5;

  result = __low;
  if (__low != __high)
  {
    v4 = MEMORY[0x1E0C80978];
    do
    {
      v5 = *result;
      if ((v5 & 0x80000000) == 0)
        v5 = *(_DWORD *)(v4 + 4 * *(unsigned __int8 *)result + 2108);
      *result++ = v5;
    }
    while (result != __high);
    return __high;
  }
  return result;
}

std::ctype<char>::char_type std::ctype<char>::do_tolower(const std::ctype<char> *this, std::ctype<char>::char_type __c)
{
  if ((__c & 0x80000000) == 0)
    *(_DWORD *)&__c = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * __c + 1084);
  return __c;
}

const std::ctype<char>::char_type *__cdecl std::ctype<char>::do_tolower(const std::ctype<char> *this, std::ctype<char>::char_type *__low, const std::ctype<char>::char_type *__high)
{
  const std::ctype<char>::char_type *result;
  uint64_t v4;
  int v5;

  result = __low;
  if (__low != __high)
  {
    v4 = MEMORY[0x1E0C80978];
    do
    {
      v5 = *result;
      if ((v5 & 0x80000000) == 0)
        v5 = *(_DWORD *)(v4 + 4 * *(unsigned __int8 *)result + 1084);
      *result++ = v5;
    }
    while (result != __high);
    return __high;
  }
  return result;
}

std::ctype<char>::char_type std::ctype<char>::do_widen(const std::ctype<char> *this, char __c)
{
  return __c;
}

const char *__cdecl std::ctype<char>::do_widen(const std::ctype<char> *this, const char *__low, const char *__high, std::ctype<char>::char_type *__to)
{
  const char *result;
  std::ctype<char>::char_type v5;

  result = __low;
  if (__low != __high)
  {
    do
    {
      v5 = *result++;
      *__to++ = v5;
    }
    while (result != __high);
    return __high;
  }
  return result;
}

char std::ctype<char>::do_narrow(const std::ctype<char> *this, std::ctype<char>::char_type __c, char __dfault)
{
  if (__c >= 0)
    return __c;
  else
    return __dfault;
}

const char *__cdecl std::ctype<char>::do_narrow(const std::ctype<char> *this, const std::ctype<char>::char_type *__low, const std::ctype<char>::char_type *__high, char __dfault, char *__to)
{
  const char *result;
  char v6;
  int v7;

  result = __low;
  if (__low != __high)
  {
    do
    {
      v7 = *result++;
      v6 = v7;
      if (v7 < 0)
        v6 = __dfault;
      *__to++ = v6;
    }
    while (result != __high);
    return __high;
  }
  return result;
}

std::ctype_byname<char> *__cdecl std::ctype_byname<char>::ctype_byname(std::ctype_byname<char> *this, const char *a2, size_t a3)
{
  const std::ctype_base::mask *v5;
  _xlocale *v6;
  std::string *v8;
  std::string v9;
  std::string v10;

  this->__del_ = 0;
  v5 = (const std::ctype_base::mask *)(MEMORY[0x1E0C80978] + 60);
  this->__shared_owners_ = a3 - 1;
  this->__tab_ = v5;
  v6 = newlocale(63, a2, 0);
  this->__l_ = v6;
  if (!v6)
  {
    std::string::basic_string[abi:ne180100]<0>(&v9, (char *)a2);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("ctype_byname<char>::ctype_byname failed to construct for ", &v9, &v10);
    if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = &v10;
    else
      v8 = (std::string *)v10.__r_.__value_.__r.__words[0];
    std::__throw_runtime_error((const char *)v8);
  }
  return this;
}

void sub_191FF30A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::ctype<char> *v20;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  std::ctype<char>::~ctype(v20);
  _Unwind_Resume(a1);
}

std::ctype_byname<char> *__cdecl std::ctype_byname<char>::ctype_byname(std::ctype_byname<char> *this, const std::string *a2, size_t a3)
{
  std::string *v3;
  const std::ctype_base::mask *v5;
  _xlocale *v6;
  const char *v8;
  void *v9[2];
  char v10;

  v3 = (std::string *)a2;
  this->__del_ = 0;
  v5 = (const std::ctype_base::mask *)(MEMORY[0x1E0C80978] + 60);
  this->__shared_owners_ = a3 - 1;
  this->__tab_ = v5;
  if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    a2 = (const std::string *)a2->__r_.__value_.__r.__words[0];
  v6 = newlocale(63, (const char *)a2, 0);
  this->__l_ = v6;
  if (!v6)
  {
    std::operator+<char>("ctype_byname<char>::ctype_byname failed to construct for ", (const void **)&v3->__r_.__value_.__l.__data_, v9);
    if (v10 >= 0)
      v8 = (const char *)v9;
    else
      v8 = (const char *)v9[0];
    std::__throw_runtime_error(v8);
  }
  return this;
}

void sub_191FF319C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::ctype<char> *v15;

  if (a15 < 0)
    operator delete(__p);
  std::ctype<char>::~ctype(v15);
  _Unwind_Resume(a1);
}

void std::ctype_byname<char>::~ctype_byname(std::ctype_byname<char> *this)
{
  freelocale(this->__l_);
  std::ctype<char>::~ctype(this);
}

{
  std::ctype_byname<char>::~ctype_byname(this);
  JUMPOUT(0x194021E38);
}

std::ctype<char>::char_type std::ctype_byname<char>::do_toupper(const std::ctype_byname<char> *this, std::ctype<char>::char_type a2)
{
  int v2;

  if (a2 < 0)
    LOBYTE(v2) = ___toupper_l(a2, this->__l_);
  else
    return *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * a2 + 2108);
  return v2;
}

const std::ctype<char>::char_type *__cdecl std::ctype_byname<char>::do_toupper(const std::ctype_byname<char> *this, std::ctype<char>::char_type *__low, const std::ctype<char>::char_type *__high)
{
  std::ctype<char>::char_type *v3;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v3 = __low;
  if (__low != __high)
  {
    v6 = MEMORY[0x1E0C80978];
    do
    {
      v7 = *v3;
      if (*v3 < 0)
        LOBYTE(v8) = ___toupper_l(v7, this->__l_);
      else
        v8 = *(_DWORD *)(v6 + 4 * v7 + 2108);
      *v3++ = v8;
    }
    while (v3 != __high);
    return __high;
  }
  return v3;
}

std::ctype<char>::char_type std::ctype_byname<char>::do_tolower(const std::ctype_byname<char> *this, std::ctype<char>::char_type a2)
{
  int v2;

  if (a2 < 0)
    LOBYTE(v2) = ___tolower_l(a2, this->__l_);
  else
    return *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * a2 + 1084);
  return v2;
}

const std::ctype<char>::char_type *__cdecl std::ctype_byname<char>::do_tolower(const std::ctype_byname<char> *this, std::ctype<char>::char_type *__low, const std::ctype<char>::char_type *__high)
{
  std::ctype<char>::char_type *v3;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v3 = __low;
  if (__low != __high)
  {
    v6 = MEMORY[0x1E0C80978];
    do
    {
      v7 = *v3;
      if (*v3 < 0)
        LOBYTE(v8) = ___tolower_l(v7, this->__l_);
      else
        v8 = *(_DWORD *)(v6 + 4 * v7 + 1084);
      *v3++ = v8;
    }
    while (v3 != __high);
    return __high;
  }
  return v3;
}

std::ctype_byname<wchar_t> *__cdecl std::ctype_byname<wchar_t>::ctype_byname(std::ctype_byname<wchar_t> *this, const char *a2, size_t a3)
{
  _xlocale *v5;
  std::string *v7;
  std::string v8;
  std::string v9;

  this->__shared_owners_ = a3 - 1;
  v5 = newlocale(63, a2, 0);
  this->__l_ = v5;
  if (!v5)
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, (char *)a2);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("ctype_byname<wchar_t>::ctype_byname failed to construct for ", &v8, &v9);
    if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v7 = &v9;
    else
      v7 = (std::string *)v9.__r_.__value_.__r.__words[0];
    std::__throw_runtime_error((const char *)v7);
  }
  return this;
}

void sub_191FF3410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_count *v20;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  std::__shared_count::~__shared_count(v20);
  _Unwind_Resume(a1);
}

std::ctype_byname<wchar_t> *__cdecl std::ctype_byname<wchar_t>::ctype_byname(std::ctype_byname<wchar_t> *this, const std::string *a2, size_t a3)
{
  std::string *v3;
  _xlocale *v5;
  const char *v7;
  void *v8[2];
  char v9;

  v3 = (std::string *)a2;
  this->__shared_owners_ = a3 - 1;
  if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    a2 = (const std::string *)a2->__r_.__value_.__r.__words[0];
  v5 = newlocale(63, (const char *)a2, 0);
  this->__l_ = v5;
  if (!v5)
  {
    std::operator+<char>("ctype_byname<wchar_t>::ctype_byname failed to construct for ", (const void **)&v3->__r_.__value_.__l.__data_, v8);
    if (v9 >= 0)
      v7 = (const char *)v8;
    else
      v7 = (const char *)v8[0];
    std::__throw_runtime_error(v7);
  }
  return this;
}

void sub_191FF34F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__shared_count *v15;

  if (a15 < 0)
    operator delete(__p);
  std::__shared_count::~__shared_count(v15);
  _Unwind_Resume(a1);
}

void std::ctype_byname<wchar_t>::~ctype_byname(std::ctype_byname<wchar_t> *this)
{
  freelocale(this->__l_);
  std::__shared_count::~__shared_count(this);
}

{
  std::ctype_byname<wchar_t>::~ctype_byname(this);
  JUMPOUT(0x194021E38);
}

BOOL std::ctype_byname<wchar_t>::do_is(const std::ctype_byname<wchar_t> *this, std::ctype_base::mask __m, std::ctype<wchar_t>::char_type __c)
{
  uint64_t v3;

  if (__c <= 0x7F)
    v3 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * __c + 60) & __m;
  else
    v3 = __maskrune_l(__c, __m, this->__l_);
  return v3 != 0;
}

const std::ctype<wchar_t>::char_type *__cdecl std::ctype_byname<wchar_t>::do_is(const std::ctype_byname<wchar_t> *this, const std::ctype<wchar_t>::char_type *__low, const std::ctype<wchar_t>::char_type *__high, std::ctype_base::mask *__vec)
{
  const std::ctype<wchar_t>::char_type *v4;
  uint64_t v8;
  uint64_t v9;
  std::ctype_base::mask v10;

  v4 = __low;
  if (__low != __high)
  {
    v8 = MEMORY[0x1E0C80978];
    while (1)
    {
      v9 = *(unsigned int *)v4;
      if (v9 <= 0x7F)
      {
        v10 = *(_DWORD *)(v8 + 4 * v9 + 60);
      }
      else
      {
        *__vec = 0;
        if (__maskrune_l(v9, 0x4000uLL, this->__l_))
          *__vec |= 0x4000u;
        if (__maskrune_l(v9, 0x40000uLL, this->__l_))
          *__vec |= 0x40000u;
        if (__maskrune_l(v9, 0x200uLL, this->__l_))
          *__vec |= 0x200u;
        if (__maskrune_l(v9, 0x8000uLL, this->__l_))
          *__vec |= 0x8000u;
        if (__maskrune_l(v9, 0x1000uLL, this->__l_))
          *__vec |= 0x1000u;
        if (__maskrune_l(v9, 0x100uLL, this->__l_))
          *__vec |= 0x100u;
        if (__maskrune_l(v9, 0x400uLL, this->__l_))
          *__vec |= 0x400u;
        if (__maskrune_l(v9, 0x2000uLL, this->__l_))
          *__vec |= 0x2000u;
        if (__maskrune_l(v9, 0x10000uLL, this->__l_))
          *__vec |= 0x10000u;
        if (!__maskrune_l(v9, 0x20000uLL, this->__l_))
          goto LABEL_26;
        v10 = *__vec | 0x20000;
      }
      *__vec = v10;
LABEL_26:
      ++v4;
      ++__vec;
      if (v4 == __high)
        return __high;
    }
  }
  return v4;
}

const std::ctype<wchar_t>::char_type *__cdecl std::ctype_byname<wchar_t>::do_scan_is(const std::ctype_byname<wchar_t> *this, std::ctype_base::mask __m, const std::ctype<wchar_t>::char_type *__low, const std::ctype<wchar_t>::char_type *__high)
{
  const std::ctype<wchar_t>::char_type *v4;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = __low;
  if (__low != __high)
  {
    v8 = __m;
    v9 = MEMORY[0x1E0C80978];
    do
    {
      v10 = *(unsigned int *)v4;
      if (v10 <= 0x7F)
      {
        if ((*(_DWORD *)(v9 + 4 * v10 + 60) & __m) != 0)
          return v4;
      }
      else if (__maskrune_l(v10, v8, this->__l_))
      {
        return v4;
      }
      ++v4;
    }
    while (v4 != __high);
    return __high;
  }
  return v4;
}

const std::ctype<wchar_t>::char_type *__cdecl std::ctype_byname<wchar_t>::do_scan_not(const std::ctype_byname<wchar_t> *this, std::ctype_base::mask __m, const std::ctype<wchar_t>::char_type *__low, const std::ctype<wchar_t>::char_type *__high)
{
  const std::ctype<wchar_t>::char_type *v4;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = __low;
  if (__low != __high)
  {
    v8 = __m;
    v9 = MEMORY[0x1E0C80978];
    do
    {
      v10 = *(unsigned int *)v4;
      if (v10 <= 0x7F)
      {
        if ((*(_DWORD *)(v9 + 4 * v10 + 60) & __m) == 0)
          return v4;
      }
      else if (!__maskrune_l(v10, v8, this->__l_))
      {
        return v4;
      }
      ++v4;
    }
    while (v4 != __high);
    return __high;
  }
  return v4;
}

std::ctype<wchar_t>::char_type std::ctype_byname<wchar_t>::do_toupper(const std::ctype_byname<wchar_t> *this, std::ctype<wchar_t>::char_type a2)
{
  if (a2 <= 0x7F)
    return *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * a2 + 2108);
  else
    return ___toupper_l(a2, this->__l_);
}

const std::ctype<wchar_t>::char_type *__cdecl std::ctype_byname<wchar_t>::do_toupper(const std::ctype_byname<wchar_t> *this, std::ctype<wchar_t>::char_type *__low, const std::ctype<wchar_t>::char_type *__high)
{
  std::ctype<wchar_t>::char_type *v3;
  uint64_t v6;
  uint64_t v7;
  __darwin_ct_rune_t v8;

  v3 = __low;
  if (__low != __high)
  {
    v6 = MEMORY[0x1E0C80978];
    do
    {
      v7 = *v3;
      if (v7 <= 0x7F)
        v8 = *(_DWORD *)(v6 + 4 * v7 + 2108);
      else
        v8 = ___toupper_l(v7, this->__l_);
      *v3++ = v8;
    }
    while (v3 != __high);
    return __high;
  }
  return v3;
}

std::ctype<wchar_t>::char_type std::ctype_byname<wchar_t>::do_tolower(const std::ctype_byname<wchar_t> *this, std::ctype<wchar_t>::char_type a2)
{
  if (a2 <= 0x7F)
    return *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * a2 + 1084);
  else
    return ___tolower_l(a2, this->__l_);
}

const std::ctype<wchar_t>::char_type *__cdecl std::ctype_byname<wchar_t>::do_tolower(const std::ctype_byname<wchar_t> *this, std::ctype<wchar_t>::char_type *__low, const std::ctype<wchar_t>::char_type *__high)
{
  std::ctype<wchar_t>::char_type *v3;
  uint64_t v6;
  uint64_t v7;
  __darwin_ct_rune_t v8;

  v3 = __low;
  if (__low != __high)
  {
    v6 = MEMORY[0x1E0C80978];
    do
    {
      v7 = *v3;
      if (v7 <= 0x7F)
        v8 = *(_DWORD *)(v6 + 4 * v7 + 1084);
      else
        v8 = ___tolower_l(v7, this->__l_);
      *v3++ = v8;
    }
    while (v3 != __high);
    return __high;
  }
  return v3;
}

std::ctype<wchar_t>::char_type std::ctype_byname<wchar_t>::do_widen(const std::ctype_byname<wchar_t> *this, char a2)
{
  return btowc_l(a2, this->__l_);
}

const char *__cdecl std::ctype_byname<wchar_t>::do_widen(const std::ctype_byname<wchar_t> *this, const char *__low, const char *__high, std::ctype<wchar_t>::char_type *__dest)
{
  const char *v4;
  int v8;

  v4 = __low;
  if (__low != __high)
  {
    do
    {
      v8 = *v4++;
      *__dest++ = btowc_l(v8, this->__l_);
    }
    while (v4 != __high);
    return __high;
  }
  return v4;
}

char std::ctype_byname<wchar_t>::do_narrow(const std::ctype_byname<wchar_t> *this, std::ctype<wchar_t>::char_type a2, char __dfault)
{
  int v4;

  v4 = wctob_l(a2, this->__l_);
  if (v4 == -1)
    return __dfault;
  else
    return v4;
}

const std::ctype<wchar_t>::char_type *__cdecl std::ctype_byname<wchar_t>::do_narrow(const std::ctype_byname<wchar_t> *this, const std::ctype<wchar_t>::char_type *__low, const std::ctype<wchar_t>::char_type *__high, char __dfault, char *__dest)
{
  const std::ctype<wchar_t>::char_type *v5;
  wint_t v10;
  int v11;
  char v12;

  v5 = __low;
  if (__low != __high)
  {
    do
    {
      v10 = *v5++;
      v11 = wctob_l(v10, this->__l_);
      if (v11 == -1)
        v12 = __dfault;
      else
        v12 = v11;
      *__dest++ = v12;
    }
    while (v5 != __high);
    return __high;
  }
  return v5;
}

void std::codecvt<char,char,__mbstate_t>::~codecvt(std::codecvt<char, char, mbstate_t> *this)
{
  std::__shared_count::~__shared_count(this);
  JUMPOUT(0x194021E38);
}

std::codecvt_base::result std::codecvt<char,char,__mbstate_t>::do_out(const std::codecvt<char, char, mbstate_t> *this, std::codecvt<char, char, mbstate_t>::state_type *__st, const std::codecvt<char, char, mbstate_t>::intern_type *__frm, const std::codecvt<char, char, mbstate_t>::intern_type *__frm_end, const std::codecvt<char, char, mbstate_t>::intern_type **__frm_nxt, std::codecvt<char, char, mbstate_t>::extern_type *__to, std::codecvt<char, char, mbstate_t>::extern_type *__to_end, std::codecvt<char, char, mbstate_t>::extern_type **__to_nxt)
{
  *__frm_nxt = __frm;
  *__to_nxt = __to;
  return 3;
}

std::codecvt_base::result std::codecvt<char,char,__mbstate_t>::do_in(const std::codecvt<char, char, mbstate_t> *this, std::codecvt<char, char, mbstate_t>::state_type *__st, const std::codecvt<char, char, mbstate_t>::extern_type *__frm, const std::codecvt<char, char, mbstate_t>::extern_type *__frm_end, const std::codecvt<char, char, mbstate_t>::extern_type **__frm_nxt, std::codecvt<char, char, mbstate_t>::intern_type *__to, std::codecvt<char, char, mbstate_t>::intern_type *__to_end, std::codecvt<char, char, mbstate_t>::intern_type **__to_nxt)
{
  *__frm_nxt = __frm;
  *__to_nxt = __to;
  return 3;
}

std::codecvt_base::result std::codecvt<char,char,__mbstate_t>::do_unshift(const std::codecvt<char, char, mbstate_t> *this, std::codecvt<char, char, mbstate_t>::state_type *__st, std::codecvt<char, char, mbstate_t>::extern_type *__to, std::codecvt<char, char, mbstate_t>::extern_type *__to_end, std::codecvt<char, char, mbstate_t>::extern_type **__to_nxt)
{
  *__to_nxt = __to;
  return 3;
}

int std::codecvt<char,char,__mbstate_t>::do_encoding(const std::codecvt<char, char, mbstate_t> *this)
{
  return 1;
}

BOOL std::codecvt<char,char,__mbstate_t>::do_always_noconv(const std::codecvt<char, char, mbstate_t> *this)
{
  return 1;
}

int std::codecvt<char,char,__mbstate_t>::do_length(const std::codecvt<char, char, mbstate_t> *this, std::codecvt<char, char, mbstate_t>::state_type *__st, const std::codecvt<char, char, mbstate_t>::extern_type *__frm, const std::codecvt<char, char, mbstate_t>::extern_type *__end, size_t __mx)
{
  if (__end - __frm >= __mx)
    return __mx;
  else
    return (_DWORD)__end - (_DWORD)__frm;
}

int std::codecvt<char,char,__mbstate_t>::do_max_length(const std::codecvt<char, char, mbstate_t> *this)
{
  return 1;
}

std::codecvt<wchar_t, char, mbstate_t> *__cdecl std::codecvt<wchar_t,char,__mbstate_t>::codecvt(std::codecvt<wchar_t, char, mbstate_t> *this, size_t __refs)
{
  this->__shared_owners_ = __refs - 1;
  this->__l_ = 0;
  return this;
}

{
  this->__shared_owners_ = __refs - 1;
  this->__l_ = 0;
  return this;
}

std::codecvt<wchar_t, char, mbstate_t> *__cdecl std::codecvt<wchar_t,char,__mbstate_t>::codecvt(std::codecvt<wchar_t, char, mbstate_t> *this, const char *a2, size_t __refs)
{
  _xlocale *v5;
  std::string *v7;
  std::string v8;
  std::string v9;

  this->__shared_owners_ = __refs - 1;
  v5 = newlocale(63, a2, 0);
  this->__l_ = v5;
  if (!v5)
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, (char *)a2);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("codecvt_byname<wchar_t, char, mbstate_t>::codecvt_byname failed to construct for ", &v8, &v9);
    if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v7 = &v9;
    else
      v7 = (std::string *)v9.__r_.__value_.__r.__words[0];
    std::__throw_runtime_error((const char *)v7);
  }
  return this;
}

void sub_191FF3C64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_count *v20;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  std::__shared_count::~__shared_count(v20);
  _Unwind_Resume(a1);
}

std::codecvt_base::result std::codecvt<wchar_t,char,__mbstate_t>::do_out(const std::codecvt<wchar_t, char, mbstate_t> *this, std::codecvt<wchar_t, char, mbstate_t>::state_type *__st, const std::codecvt<wchar_t, char, mbstate_t>::intern_type *__frm, const std::codecvt<wchar_t, char, mbstate_t>::intern_type *__frm_end, const std::codecvt<wchar_t, char, mbstate_t>::intern_type **__frm_nxt, std::codecvt<wchar_t, char, mbstate_t>::extern_type *__to, std::codecvt<wchar_t, char, mbstate_t>::extern_type *__to_end, std::codecvt<wchar_t, char, mbstate_t>::extern_type **__to_nxt)
{
  char *v10;
  __int32 *v13;
  const std::codecvt<wchar_t, char, mbstate_t>::intern_type *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  size_t v21;
  size_t v22;
  char *v23;
  std::codecvt<wchar_t, char, mbstate_t>::extern_type v24;
  std::codecvt<wchar_t, char, mbstate_t>::extern_type *v25;
  const std::codecvt<wchar_t, char, mbstate_t>::intern_type *v26;
  size_t v28;
  char v29[6];
  mbstate_t v30;
  uint64_t v31;

  v10 = __to;
  v13 = (__int32 *)__frm;
  v31 = *MEMORY[0x1E0C80C00];
  v16 = __frm;
  if (__frm != __frm_end)
  {
    v16 = __frm;
    while (*v16)
    {
      if (++v16 == __frm_end)
      {
        v16 = __frm_end;
        break;
      }
    }
  }
  *__to_nxt = __to;
  *__frm_nxt = __frm;
  while (v13 != __frm_end && v10 != __to_end)
  {
    v17 = *((_OWORD *)&__st->_mbstateL + 5);
    *((_OWORD *)&v30._mbstateL + 4) = *((_OWORD *)&__st->_mbstateL + 4);
    *((_OWORD *)&v30._mbstateL + 5) = v17;
    v18 = *((_OWORD *)&__st->_mbstateL + 7);
    *((_OWORD *)&v30._mbstateL + 6) = *((_OWORD *)&__st->_mbstateL + 6);
    *((_OWORD *)&v30._mbstateL + 7) = v18;
    v19 = *((_OWORD *)&__st->_mbstateL + 1);
    *(_OWORD *)v30.__mbstate8 = *(_OWORD *)__st->__mbstate8;
    *((_OWORD *)&v30._mbstateL + 1) = v19;
    v20 = *((_OWORD *)&__st->_mbstateL + 3);
    *((_OWORD *)&v30._mbstateL + 2) = *((_OWORD *)&__st->_mbstateL + 2);
    *((_OWORD *)&v30._mbstateL + 3) = v20;
    v21 = wcsnrtombs_l(v10, __frm_nxt, v16 - v13, __to_end - v10, __st, this->__l_);
    if (!v21)
      return 1;
    if (v21 == -1)
    {
      *__to_nxt = v10;
      while (v13 != *__frm_nxt)
      {
        v28 = wcrtomb_l(v10, *v13, &v30, this->__l_);
        if (v28 == -1)
          break;
        v10 = &(*__to_nxt)[v28];
        *__to_nxt = v10;
        ++v13;
      }
      *__frm_nxt = v13;
      return 2;
    }
    v10 = &(*__to_nxt)[v21];
    *__to_nxt = v10;
    if (v10 == __to_end)
    {
      v13 = (__int32 *)*__frm_nxt;
      return v13 != __frm_end;
    }
    if (v16 == __frm_end)
    {
      v13 = (__int32 *)*__frm_nxt;
      v16 = __frm_end;
    }
    else
    {
      v22 = wcrtomb_l(v29, 0, __st, this->__l_);
      if (v22 == -1)
        return 2;
      if (v22 > __to_end - *__to_nxt)
        return 1;
      if (v22)
      {
        v23 = v29;
        do
        {
          v24 = *v23++;
          v25 = (*__to_nxt)++;
          *v25 = v24;
          --v22;
        }
        while (v22);
      }
      v13 = (__int32 *)(*__frm_nxt + 1);
      *__frm_nxt = v13;
      v26 = v13;
      v16 = __frm_end;
      if (v13 != __frm_end)
      {
        while (*v26)
        {
          if (++v26 == __frm_end)
          {
            v16 = __frm_end;
            goto LABEL_24;
          }
        }
        v16 = v26;
      }
LABEL_24:
      v10 = *__to_nxt;
    }
  }
  return v13 != __frm_end;
}

std::codecvt_base::result std::codecvt<wchar_t,char,__mbstate_t>::do_in(const std::codecvt<wchar_t, char, mbstate_t> *this, std::codecvt<wchar_t, char, mbstate_t>::state_type *__st, const std::codecvt<wchar_t, char, mbstate_t>::extern_type *__frm, const std::codecvt<wchar_t, char, mbstate_t>::extern_type *__frm_end, const std::codecvt<wchar_t, char, mbstate_t>::extern_type **__frm_nxt, std::codecvt<wchar_t, char, mbstate_t>::intern_type *__to, std::codecvt<wchar_t, char, mbstate_t>::intern_type *__to_end, std::codecvt<wchar_t, char, mbstate_t>::intern_type **__to_nxt)
{
  __int32 *v10;
  const std::codecvt<wchar_t, char, mbstate_t>::extern_type *v13;
  const std::codecvt<wchar_t, char, mbstate_t>::extern_type *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  size_t v21;
  std::codecvt<wchar_t, char, mbstate_t>::intern_type *v22;
  size_t v23;
  mbstate_t v25;
  uint64_t v26;

  v10 = __to;
  v13 = __frm;
  v26 = *MEMORY[0x1E0C80C00];
  v16 = __frm_end;
  if (__frm != __frm_end)
  {
    v16 = __frm;
    while (*v16)
    {
      if (++v16 == __frm_end)
      {
        v16 = __frm_end;
        break;
      }
    }
  }
  *__to_nxt = __to;
  *__frm_nxt = __frm;
  if (__frm != __frm_end)
  {
    while (v10 != __to_end)
    {
      v17 = *((_OWORD *)&__st->_mbstateL + 5);
      *((_OWORD *)&v25._mbstateL + 4) = *((_OWORD *)&__st->_mbstateL + 4);
      *((_OWORD *)&v25._mbstateL + 5) = v17;
      v18 = *((_OWORD *)&__st->_mbstateL + 7);
      *((_OWORD *)&v25._mbstateL + 6) = *((_OWORD *)&__st->_mbstateL + 6);
      *((_OWORD *)&v25._mbstateL + 7) = v18;
      v19 = *((_OWORD *)&__st->_mbstateL + 1);
      *(_OWORD *)v25.__mbstate8 = *(_OWORD *)__st->__mbstate8;
      *((_OWORD *)&v25._mbstateL + 1) = v19;
      v20 = *((_OWORD *)&__st->_mbstateL + 3);
      *((_OWORD *)&v25._mbstateL + 2) = *((_OWORD *)&__st->_mbstateL + 2);
      *((_OWORD *)&v25._mbstateL + 3) = v20;
      v21 = mbsnrtowcs_l(v10, __frm_nxt, v16 - v13, __to_end - v10, __st, this->__l_);
      if (v21 == -1)
      {
        while (1)
        {
          *__to_nxt = v10;
          if (v13 == *__frm_nxt)
          {
            *__frm_nxt = v13;
            return v13 != __frm_end;
          }
          v23 = mbrtowc_l(v10, v13, v16 - v13, &v25, this->__l_);
          if (v23)
          {
            if (v23 == -2)
            {
              *__frm_nxt = v13;
              return 1;
            }
            if (v23 == -1)
            {
              *__frm_nxt = v13;
              return 2;
            }
          }
          else
          {
            v23 = 1;
          }
          v13 += v23;
          v10 = *__to_nxt + 1;
        }
      }
      v22 = &(*__to_nxt)[v21];
      *__to_nxt = v22;
      if (v22 == __to_end)
      {
        v13 = *__frm_nxt;
        return v13 != __frm_end;
      }
      v13 = *__frm_nxt;
      if (v16 == __frm_end)
      {
LABEL_16:
        v16 = __frm_end;
      }
      else
      {
        if (mbrtowc_l(v22, *__frm_nxt, 1uLL, __st, this->__l_))
          return 2;
        ++*__to_nxt;
        v13 = *__frm_nxt + 1;
        *__frm_nxt = v13;
        if (v13 == __frm_end)
        {
          v13 = __frm_end;
          return v13 != __frm_end;
        }
        v16 = v13;
        while (*v16)
        {
          if (++v16 == __frm_end)
            goto LABEL_16;
        }
      }
      if (v13 == __frm_end)
        return v13 != __frm_end;
      v10 = *__to_nxt;
    }
  }
  return v13 != __frm_end;
}

std::codecvt_base::result std::codecvt<wchar_t,char,__mbstate_t>::do_unshift(const std::codecvt<wchar_t, char, mbstate_t> *this, std::codecvt<wchar_t, char, mbstate_t>::state_type *__st, std::codecvt<wchar_t, char, mbstate_t>::extern_type *__to, std::codecvt<wchar_t, char, mbstate_t>::extern_type *__to_end, std::codecvt<wchar_t, char, mbstate_t>::extern_type **__to_nxt)
{
  size_t v7;
  size_t v9;
  char *v10;
  std::codecvt<wchar_t, char, mbstate_t>::extern_type v11;
  std::codecvt<wchar_t, char, mbstate_t>::extern_type *v12;
  char v13[6];

  *__to_nxt = __to;
  v7 = wcrtomb_l(v13, 0, __st, this->__l_);
  if (v7 + 1 < 2)
    return 2;
  v9 = v7 - 1;
  if (v7 - 1 > __to_end - *__to_nxt)
    return 1;
  if (v7 != 1)
  {
    v10 = v13;
    do
    {
      v11 = *v10++;
      v12 = (*__to_nxt)++;
      *v12 = v11;
      --v9;
    }
    while (v9);
  }
  return 0;
}

int std::codecvt<wchar_t,char,__mbstate_t>::do_encoding(const std::codecvt<wchar_t, char, mbstate_t> *this)
{
  _xlocale *l;

  if (mbtowc_l(0, 0, 6uLL, this->__l_))
    return -1;
  l = this->__l_;
  return !l || ___mb_cur_max_l(l) == 1;
}

BOOL std::codecvt<wchar_t,char,__mbstate_t>::do_always_noconv(const std::codecvt<wchar_t, char, mbstate_t> *this)
{
  return 0;
}

int std::codecvt<wchar_t,char,__mbstate_t>::do_length(const std::codecvt<wchar_t, char, mbstate_t> *this, std::codecvt<wchar_t, char, mbstate_t>::state_type *a2, const std::codecvt<wchar_t, char, mbstate_t>::extern_type *__frm, const std::codecvt<wchar_t, char, mbstate_t>::extern_type *__end, size_t __mx)
{
  int v5;
  const char *v7;
  size_t v11;
  size_t v12;
  int v13;

  v5 = 0;
  if (__mx)
  {
    v7 = __frm;
    if (__frm != __end)
    {
      v5 = 0;
      v11 = 1;
      do
      {
        v12 = mbrlen_l(v7, __end - v7, a2, this->__l_);
        if (v12)
        {
          if (v12 >= 0xFFFFFFFFFFFFFFFELL)
            return v5;
          v13 = v12;
        }
        else
        {
          v12 = 1;
          v13 = 1;
        }
        v5 += v13;
        if (v11 >= __mx)
          break;
        v7 += v12;
        ++v11;
      }
      while (v7 != __end);
    }
  }
  return v5;
}

int std::codecvt<wchar_t,char,__mbstate_t>::do_max_length(const std::codecvt<wchar_t, char, mbstate_t> *this)
{
  _xlocale *l;

  l = this->__l_;
  if (l)
    return ___mb_cur_max_l(l);
  else
    return 1;
}

void std::codecvt<char16_t,char,__mbstate_t>::~codecvt(std::codecvt<char16_t, char, mbstate_t> *this)
{
  std::__shared_count::~__shared_count(this);
  JUMPOUT(0x194021E38);
}

std::codecvt_base::result std::codecvt<char16_t,char,__mbstate_t>::do_out(const std::codecvt<char16_t, char, mbstate_t> *this, std::codecvt<char16_t, char, mbstate_t>::state_type *__st, const std::codecvt<char16_t, char, mbstate_t>::intern_type *__frm, const std::codecvt<char16_t, char, mbstate_t>::intern_type *__frm_end, const std::codecvt<char16_t, char, mbstate_t>::intern_type **__frm_nxt, std::codecvt<char16_t, char, mbstate_t>::extern_type *__to, std::codecvt<char16_t, char, mbstate_t>::extern_type *__to_end, std::codecvt<char16_t, char, mbstate_t>::extern_type **__to_nxt)
{
  std::codecvt_base::result result;
  std::codecvt_mode v11[2];
  unsigned __int16 v12[4];

  *(_QWORD *)v12 = __frm;
  result = std::utf16_to_utf8((std::__1 *)__frm, (char *)__frm_end, v12, (const unsigned __int16 **)__to, (unsigned __int8 *)__to_end, (unsigned __int8 *)v11, (unsigned __int8 **)0x10FFFF, 0, (std::codecvt_mode)__to);
  *__frm_nxt = *(const std::codecvt<char16_t, char, mbstate_t>::intern_type **)v12;
  *__to_nxt = *(std::codecvt<char16_t, char, mbstate_t>::extern_type **)v11;
  return result;
}

uint64_t std::utf16_to_utf8(std::__1 *this, char *a2, unsigned __int16 *a3, const unsigned __int16 **a4, unsigned __int8 *a5, unsigned __int8 *a6, unsigned __int8 **a7, char a8, std::codecvt_mode a9)
{
  _BYTE *v10;
  _BYTE *v11;
  char *v12;
  unint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  unsigned __int16 *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  _BYTE *v20;
  _BYTE *v21;
  _BYTE *v22;
  _BYTE *v23;
  _BYTE *v24;
  _BYTE *v25;
  char v26;
  _BYTE *v27;

  *(_QWORD *)a3 = this;
  *(_QWORD *)a6 = a4;
  if ((a8 & 2) != 0)
  {
    if (a5 - (unsigned __int8 *)a4 < 3)
      return 1;
    *(_QWORD *)a6 = (char *)a4 + 1;
    *(_BYTE *)a4 = -17;
    v10 = (_BYTE *)(*(_QWORD *)a6)++;
    *v10 = -69;
    v11 = (_BYTE *)(*(_QWORD *)a6)++;
    *v11 = -65;
  }
  v12 = *(char **)a3;
  if (*(_QWORD *)a3 >= (unint64_t)a2)
    return 0;
  while (1)
  {
    v13 = *(unsigned __int16 *)v12;
    if (v13 > (unint64_t)a7)
      return 2;
    if (v13 <= 0x7F)
    {
      v14 = *(_BYTE **)a6;
      if ((uint64_t)&a5[-*(_QWORD *)a6] < 1)
        return 1;
      *(_QWORD *)a6 = v14 + 1;
      *v14 = v13;
      goto LABEL_24;
    }
    if (v13 <= 0x7FF)
    {
      v15 = *(_BYTE **)a6;
      if ((uint64_t)&a5[-*(_QWORD *)a6] < 2)
        return 1;
      *(_QWORD *)a6 = v15 + 1;
      *v15 = (v13 >> 6) | 0xC0;
      goto LABEL_23;
    }
    if (v13 >> 11 <= 0x1A)
      goto LABEL_21;
    if (v13 >> 10 > 0x36)
    {
      if (v13 < 0xE000)
        return 2;
LABEL_21:
      v24 = *(_BYTE **)a6;
      if ((uint64_t)&a5[-*(_QWORD *)a6] < 3)
        return 1;
      *(_QWORD *)a6 = v24 + 1;
      *v24 = (v13 >> 12) | 0xE0;
      v25 = (_BYTE *)(*(_QWORD *)a6)++;
      *v25 = (v13 >> 6) & 0x3F | 0x80;
LABEL_23:
      v26 = v13 & 0x3F | 0x80;
      v27 = (_BYTE *)(*(_QWORD *)a6)++;
      *v27 = v26;
      goto LABEL_24;
    }
    if (a2 - v12 < 4)
      return 1;
    v18 = *((unsigned __int16 *)v12 + 1);
    v16 = (unsigned __int16 *)(v12 + 2);
    v17 = v18;
    if ((v18 & 0xFC00) != 0xDC00)
      return 2;
    if ((uint64_t)&a5[-*(_QWORD *)a6] < 4)
      return 1;
    if ((v17 & 0x3FF | ((v13 & 0x3FF) << 10)) + 0x10000 > (unint64_t)a7)
      return 2;
    *(_QWORD *)a3 = v16;
    v19 = ((v13 >> 6) & 0xF) + 1;
    v20 = (_BYTE *)(*(_QWORD *)a6)++;
    *v20 = (v19 >> 2) | 0xF0;
    v21 = (_BYTE *)(*(_QWORD *)a6)++;
    *v21 = (16 * (v19 & 3)) | (v13 >> 2) & 0xF | 0x80;
    v22 = (_BYTE *)(*(_QWORD *)a6)++;
    *v22 = (16 * (v13 & 3)) | (v17 >> 6) & 0xF | 0x80;
    v23 = (_BYTE *)(*(_QWORD *)a6)++;
    *v23 = v17 & 0x3F | 0x80;
LABEL_24:
    v12 = (char *)(*(_QWORD *)a3 + 2);
    *(_QWORD *)a3 = v12;
    if (v12 >= a2)
      return 0;
  }
}

std::codecvt_base::result std::codecvt<char16_t,char,__mbstate_t>::do_in(const std::codecvt<char16_t, char, mbstate_t> *this, std::codecvt<char16_t, char, mbstate_t>::state_type *__st, const std::codecvt<char16_t, char, mbstate_t>::extern_type *__frm, const std::codecvt<char16_t, char, mbstate_t>::extern_type *__frm_end, const std::codecvt<char16_t, char, mbstate_t>::extern_type **__frm_nxt, std::codecvt<char16_t, char, mbstate_t>::intern_type *__to, std::codecvt<char16_t, char, mbstate_t>::intern_type *__to_end, std::codecvt<char16_t, char, mbstate_t>::intern_type **__to_nxt)
{
  std::codecvt_base::result result;
  std::codecvt_mode v11[2];
  unsigned __int8 v12[8];

  *(_QWORD *)v12 = __frm;
  result = std::utf8_to_utf16((std::__1 *)__frm, (unsigned __int8 *)__frm_end, v12, (const unsigned __int8 **)__to, (char *)__to_end, (unsigned __int16 *)v11, (unsigned __int16 **)0x10FFFF, 0, (std::codecvt_mode)__to);
  *__frm_nxt = *(const std::codecvt<char16_t, char, mbstate_t>::extern_type **)v12;
  *__to_nxt = *(std::codecvt<char16_t, char, mbstate_t>::intern_type **)v11;
  return result;
}

uint64_t std::utf8_to_utf16(std::__1 *this, unsigned __int8 *a2, unsigned __int8 *a3, const unsigned __int8 **a4, char *a5, unsigned __int16 *a6, unsigned __int16 **a7, char a8, std::codecvt_mode a9)
{
  unsigned __int8 *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  unint64_t v14;
  unsigned __int8 v15;
  const unsigned __int8 *v16;
  unsigned int v17;
  int v18;
  unsigned __int8 v19;
  unsigned __int16 v20;
  int v21;
  unsigned int v22;
  unsigned __int8 v23;

  *(_QWORD *)a3 = this;
  *(_QWORD *)a6 = a4;
  v9 = *(unsigned __int8 **)a3;
  if ((a8 & 4) != 0 && a2 - v9 >= 3 && *v9 == 239 && v9[1] == 187 && v9[2] == 191)
  {
    v9 += 3;
    *(_QWORD *)a3 = v9;
  }
  if (v9 >= a2)
    return 0;
  v10 = *(char **)a6;
  while (v10 < a5)
  {
    v11 = *v9;
    if (v11 > (unint64_t)a7)
      return 2;
    if ((v11 & 0x80) == 0)
    {
      *(_WORD *)v10 = v11;
      v12 = (uint64_t)(v9 + 1);
      goto LABEL_48;
    }
    if (v11 < 0xC2)
      return 2;
    if (v11 <= 0xDF)
    {
      if (a2 - v9 < 2)
        return 1;
      v13 = v9[1];
      if ((v13 & 0xC0) != 0x80)
        return 2;
      v14 = v13 & 0x3F | ((v11 & 0x1F) << 6);
      if (v14 > (unint64_t)a7)
        return 2;
      *(_WORD *)v10 = v14;
      v12 = (uint64_t)(v9 + 2);
      goto LABEL_48;
    }
    if (v11 <= 0xEF)
    {
      if (a2 - v9 < 2)
        return 1;
      v15 = v9[1];
      if ((_DWORD)v11 == 237)
      {
        v18 = v15 & 0xE0;
      }
      else
      {
        if ((_DWORD)v11 == 224)
        {
          if ((v15 & 0xE0) != 0xA0)
            return 2;
LABEL_34:
          if ((unint64_t)(a2 - v9) < 3)
            return 1;
          v19 = v9[2];
          if ((v19 & 0xC0) != 0x80)
            return 2;
          v20 = ((_WORD)v11 << 12) | ((v15 & 0x3F) << 6) | v19 & 0x3F;
          if (v20 > (unint64_t)a7)
            return 2;
          *(_WORD *)v10 = v20;
          v12 = (uint64_t)(v9 + 3);
          goto LABEL_48;
        }
        v18 = v15 & 0xC0;
      }
      if (v18 != 128)
        return 2;
      goto LABEL_34;
    }
    if (v11 > 0xF4)
      return 2;
    v16 = (const unsigned __int8 *)(a2 - v9);
    if (a2 - v9 < 2)
      return 1;
    v17 = v9[1];
    if ((_DWORD)v11 == 244)
    {
      v21 = v17 & 0xF0;
      goto LABEL_40;
    }
    if ((_DWORD)v11 != 240)
    {
      v21 = v17 & 0xC0;
LABEL_40:
      if (v21 != 128)
        return 2;
      goto LABEL_41;
    }
    if ((v17 + 112) >= 0x30u)
      return 2;
LABEL_41:
    if ((unint64_t)v16 < 3)
      return 1;
    v22 = v9[2];
    if ((v22 & 0xC0) != 0x80)
      return 2;
    if ((unint64_t)v16 < 4)
      return 1;
    v23 = v9[3];
    if ((v23 & 0xC0) != 0x80)
      return 2;
    if (a5 - v10 < 4)
      return 1;
    if ((((v11 & 7) << 18) | ((unint64_t)(v17 & 0x3F) << 12) | ((unint64_t)(v22 & 0x3F) << 6) | v23 & 0x3F) > (unint64_t)a7)
      return 2;
    *(_WORD *)v10 = (((4 * (v17 & 0xF)) | (((unsigned __int16)(4 * (v11 & 7)) | (v17 >> 4) & 3) << 6) | (v22 >> 4) & 3)
                   + 16320) | 0xD800;
    *((_WORD *)v10 + 1) = v23 & 0x3F | ((v22 & 0xF) << 6) | 0xDC00;
    *(_QWORD *)a6 = v10 + 2;
    v12 = *(_QWORD *)a3 + 4;
LABEL_48:
    *(_QWORD *)a3 = v12;
    v10 = (char *)(*(_QWORD *)a6 + 2);
    *(_QWORD *)a6 = v10;
    v9 = *(unsigned __int8 **)a3;
    if (*(_QWORD *)a3 >= (unint64_t)a2)
      return 0;
  }
  return 1;
}

std::codecvt_base::result std::codecvt<char16_t,char,__mbstate_t>::do_unshift(const std::codecvt<char16_t, char, mbstate_t> *this, std::codecvt<char16_t, char, mbstate_t>::state_type *__st, std::codecvt<char16_t, char, mbstate_t>::extern_type *__to, std::codecvt<char16_t, char, mbstate_t>::extern_type *__to_end, std::codecvt<char16_t, char, mbstate_t>::extern_type **__to_nxt)
{
  *__to_nxt = __to;
  return 3;
}

int std::codecvt<char16_t,char,__mbstate_t>::do_encoding(const std::codecvt<char16_t, char, mbstate_t> *this)
{
  return 0;
}

BOOL std::codecvt<char16_t,char,__mbstate_t>::do_always_noconv(const std::codecvt<char16_t, char, mbstate_t> *this)
{
  return 0;
}

int std::codecvt<char16_t,char,__mbstate_t>::do_length(const std::codecvt<char16_t, char, mbstate_t> *this, std::codecvt<char16_t, char, mbstate_t>::state_type *a2, const std::codecvt<char16_t, char, mbstate_t>::extern_type *__frm, const std::codecvt<char16_t, char, mbstate_t>::extern_type *__end, size_t __mx)
{
  std::codecvt_mode v5;

  return std::utf8_to_utf16_length((std::__1 *)__frm, (const unsigned __int8 *)__end, (const unsigned __int8 *)__mx, 0x10FFFFuLL, 0, v5);
}

uint64_t std::utf8_to_utf16_length(std::__1 *this, const unsigned __int8 *a2, const unsigned __int8 *a3, unint64_t a4, char a5, std::codecvt_mode a6)
{
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  int v17;
  int v18;

  v6 = a2 - (const unsigned __int8 *)this < 3 || (a5 & 4) == 0;
  v7 = (unint64_t)this;
  if (!v6)
  {
    v7 = (unint64_t)this;
    if (*(unsigned __int8 *)this == 239)
    {
      v7 = (unint64_t)this;
      if (*((unsigned __int8 *)this + 1) == 187)
      {
        v8 = 3;
        if (*((unsigned __int8 *)this + 2) != 191)
          v8 = 0;
        v7 = (unint64_t)this + v8;
      }
    }
  }
  if (v7 < (unint64_t)a2 && a3)
  {
    v9 = 0;
    while (1)
    {
      v10 = *(unsigned __int8 *)v7;
      if (v10 > a4)
        return (v7 - (_DWORD)this);
      if ((v10 & 0x80) == 0)
      {
        ++v7;
        goto LABEL_48;
      }
      if (v10 < 0xC2)
        return (v7 - (_DWORD)this);
      if (v10 <= 0xDF)
      {
        if ((uint64_t)&a2[-v7] < 2)
          return (v7 - (_DWORD)this);
        v11 = *(_BYTE *)(v7 + 1);
        if ((v11 & 0xC0) != 0x80 || (v11 & 0x3F | ((v10 & 0x1F) << 6)) > a4)
          return (v7 - (_DWORD)this);
        v7 += 2;
        goto LABEL_48;
      }
      if (v10 <= 0xEF)
      {
        if ((uint64_t)&a2[-v7] < 3)
          return (v7 - (_DWORD)this);
        v12 = *(_BYTE *)(v7 + 1);
        v13 = *(_BYTE *)(v7 + 2);
        if ((_DWORD)v10 == 237)
        {
          v17 = v12 & 0xE0;
        }
        else
        {
          if ((_DWORD)v10 == 224)
          {
            if ((v12 & 0xE0) != 0xA0)
              return (v7 - (_DWORD)this);
LABEL_38:
            if ((v13 & 0xC0) != 0x80 || (((v10 & 0xF) << 12) | ((v12 & 0x3F) << 6) | v13 & 0x3F) > a4)
              return (v7 - (_DWORD)this);
            v7 += 3;
            goto LABEL_48;
          }
          v17 = v12 & 0xC0;
        }
        if (v17 != 128)
          return (v7 - (_DWORD)this);
        goto LABEL_38;
      }
      if (v10 > 0xF4 || (uint64_t)&a2[-v7] < 4 || (unint64_t)&a3[-v9] < 2)
        return (v7 - (_DWORD)this);
      v14 = *(_BYTE *)(v7 + 1);
      v15 = *(_BYTE *)(v7 + 2);
      v16 = *(_BYTE *)(v7 + 3);
      if ((_DWORD)v10 == 244)
        break;
      if ((_DWORD)v10 != 240)
      {
        v18 = v14 & 0xC0;
LABEL_43:
        if (v18 != 128)
          return (v7 - (_DWORD)this);
        goto LABEL_44;
      }
      if ((v14 + 112) >= 0x30u)
        return (v7 - (_DWORD)this);
LABEL_44:
      if ((v15 & 0xC0) != 0x80
        || (v16 & 0xC0) != 0x80
        || (((v10 & 7) << 18) | ((unint64_t)(v14 & 0x3F) << 12) | ((unint64_t)(v15 & 0x3F) << 6) | v16 & 0x3F) > a4)
      {
        return (v7 - (_DWORD)this);
      }
      ++v9;
      v7 += 4;
LABEL_48:
      if (v7 < (unint64_t)a2 && ++v9 < (unint64_t)a3)
        continue;
      return (v7 - (_DWORD)this);
    }
    v18 = v14 & 0xF0;
    goto LABEL_43;
  }
  return (v7 - (_DWORD)this);
}

int std::codecvt<char16_t,char,__mbstate_t>::do_max_length(const std::codecvt<char16_t, char, mbstate_t> *this)
{
  return 4;
}

void std::codecvt<char16_t,char8_t,__mbstate_t>::~codecvt(std::__shared_count *a1)
{
  std::__shared_count::~__shared_count(a1);
  JUMPOUT(0x194021E38);
}

uint64_t std::codecvt<char16_t,char8_t,__mbstate_t>::do_out(int a1, int a2, std::__1 *this, char *a4, _QWORD *a5, const unsigned __int16 **a6, unsigned __int8 *a7, _QWORD *a8)
{
  uint64_t result;
  std::codecvt_mode v11[2];
  unsigned __int16 v12[4];

  *(_QWORD *)v12 = this;
  result = std::utf16_to_utf8(this, a4, v12, a6, a7, (unsigned __int8 *)v11, (unsigned __int8 **)0x10FFFF, 0, (std::codecvt_mode)a6);
  *a5 = *(_QWORD *)v12;
  *a8 = *(_QWORD *)v11;
  return result;
}

uint64_t std::codecvt<char16_t,char8_t,__mbstate_t>::do_in(int a1, int a2, std::__1 *this, unsigned __int8 *a4, _QWORD *a5, const unsigned __int8 **a6, char *a7, _QWORD *a8)
{
  uint64_t result;
  std::codecvt_mode v11[2];
  unsigned __int8 v12[8];

  *(_QWORD *)v12 = this;
  result = std::utf8_to_utf16(this, a4, v12, a6, a7, (unsigned __int16 *)v11, (unsigned __int16 **)0x10FFFF, 0, (std::codecvt_mode)a6);
  *a5 = *(_QWORD *)v12;
  *a8 = *(_QWORD *)v11;
  return result;
}

uint64_t std::codecvt<char16_t,char8_t,__mbstate_t>::do_unshift(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  *a5 = a3;
  return 3;
}

uint64_t std::codecvt<char16_t,char8_t,__mbstate_t>::do_encoding()
{
  return 0;
}

uint64_t std::codecvt<char16_t,char8_t,__mbstate_t>::do_always_noconv()
{
  return 0;
}

uint64_t std::codecvt<char16_t,char8_t,__mbstate_t>::do_length(int a1, int a2, std::__1 *this, unsigned __int8 *a4, unsigned __int8 *a5, std::codecvt_mode a6)
{
  return std::utf8_to_utf16_length(this, a4, a5, 0x10FFFFuLL, 0, a6);
}

uint64_t std::codecvt<char16_t,char8_t,__mbstate_t>::do_max_length()
{
  return 4;
}

void std::codecvt<char32_t,char,__mbstate_t>::~codecvt(std::codecvt<char32_t, char, mbstate_t> *this)
{
  std::__shared_count::~__shared_count(this);
  JUMPOUT(0x194021E38);
}

std::codecvt_base::result std::codecvt<char32_t,char,__mbstate_t>::do_out(const std::codecvt<char32_t, char, mbstate_t> *this, std::codecvt<char32_t, char, mbstate_t>::state_type *__st, const std::codecvt<char32_t, char, mbstate_t>::intern_type *__frm, const std::codecvt<char32_t, char, mbstate_t>::intern_type *__frm_end, const std::codecvt<char32_t, char, mbstate_t>::intern_type **__frm_nxt, std::codecvt<char32_t, char, mbstate_t>::extern_type *__to, std::codecvt<char32_t, char, mbstate_t>::extern_type *__to_end, std::codecvt<char32_t, char, mbstate_t>::extern_type **__to_nxt)
{
  std::codecvt_base::result result;
  std::codecvt_mode v11[2];
  unsigned int v12[2];

  *(_QWORD *)v12 = __frm;
  result = std::ucs4_to_utf8((std::__1 *)__frm, (const unsigned int *)__frm_end, v12, (const unsigned int **)__to, (unsigned __int8 *)__to_end, (unsigned __int8 *)v11, (unsigned __int8 **)0x10FFFF, 0, (std::codecvt_mode)__to);
  *__frm_nxt = *(const std::codecvt<char32_t, char, mbstate_t>::intern_type **)v12;
  *__to_nxt = *(std::codecvt<char32_t, char, mbstate_t>::extern_type **)v11;
  return result;
}

uint64_t std::ucs4_to_utf8(std::__1 *this, const unsigned int *a2, unsigned int *a3, const unsigned int **a4, unsigned __int8 *a5, unsigned __int8 *a6, unsigned __int8 **a7, char a8, std::codecvt_mode a9)
{
  _BYTE *v10;
  _BYTE *v11;
  const unsigned int *i;
  unint64_t v13;
  _BYTE *v15;
  _BYTE *v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  char v21;
  _BYTE *v22;

  *(_QWORD *)a3 = this;
  *(_QWORD *)a6 = a4;
  if ((a8 & 2) != 0)
  {
    if (a5 - (unsigned __int8 *)a4 < 3)
      return 1;
    *(_QWORD *)a6 = (char *)a4 + 1;
    *(_BYTE *)a4 = -17;
    v10 = (_BYTE *)(*(_QWORD *)a6)++;
    *v10 = -69;
    v11 = (_BYTE *)(*(_QWORD *)a6)++;
    *v11 = -65;
  }
  for (i = *(const unsigned int **)a3; ; *(_QWORD *)a3 = i)
  {
    if (i >= a2)
      return 0;
    v13 = *i;
    if (v13 >> 11 == 27 || v13 > (unint64_t)a7)
      break;
    if (v13 > 0x7F)
    {
      if (v13 > 0x7FF)
      {
        v17 = *(_BYTE **)a6;
        v18 = (uint64_t)&a5[-*(_QWORD *)a6];
        if (WORD1(v13))
        {
          if (v18 < 4)
            return 1;
          *(_QWORD *)a6 = v17 + 1;
          *v17 = (v13 >> 18) | 0xF0;
          v19 = (_BYTE *)(*(_QWORD *)a6)++;
          *v19 = (v13 >> 12) & 0x3F | 0x80;
        }
        else
        {
          if (v18 < 3)
            return 1;
          *(_QWORD *)a6 = v17 + 1;
          *v17 = (v13 >> 12) | 0xE0;
        }
        v20 = (_BYTE *)(*(_QWORD *)a6)++;
        *v20 = (v13 >> 6) & 0x3F | 0x80;
      }
      else
      {
        v16 = *(_BYTE **)a6;
        if ((uint64_t)&a5[-*(_QWORD *)a6] < 2)
          return 1;
        *(_QWORD *)a6 = v16 + 1;
        *v16 = (v13 >> 6) | 0xC0;
      }
      v21 = v13 & 0x3F | 0x80;
      v22 = (_BYTE *)(*(_QWORD *)a6)++;
      *v22 = v21;
    }
    else
    {
      v15 = *(_BYTE **)a6;
      if ((uint64_t)&a5[-*(_QWORD *)a6] < 1)
        return 1;
      *(_QWORD *)a6 = v15 + 1;
      *v15 = v13;
    }
    i = (const unsigned int *)(*(_QWORD *)a3 + 4);
  }
  return 2;
}

std::codecvt_base::result std::codecvt<char32_t,char,__mbstate_t>::do_in(const std::codecvt<char32_t, char, mbstate_t> *this, std::codecvt<char32_t, char, mbstate_t>::state_type *__st, const std::codecvt<char32_t, char, mbstate_t>::extern_type *__frm, const std::codecvt<char32_t, char, mbstate_t>::extern_type *__frm_end, const std::codecvt<char32_t, char, mbstate_t>::extern_type **__frm_nxt, std::codecvt<char32_t, char, mbstate_t>::intern_type *__to, std::codecvt<char32_t, char, mbstate_t>::intern_type *__to_end, std::codecvt<char32_t, char, mbstate_t>::intern_type **__to_nxt)
{
  std::codecvt_base::result result;
  std::codecvt_mode v11[2];
  unsigned __int8 v12[8];

  *(_QWORD *)v12 = __frm;
  result = std::utf8_to_ucs4((std::__1 *)__frm, (char *)__frm_end, v12, (const unsigned __int8 **)__to, (unsigned int *)__to_end, (unsigned int *)v11, (unsigned int **)0x10FFFF, 0, (std::codecvt_mode)__to);
  *__frm_nxt = *(const std::codecvt<char32_t, char, mbstate_t>::extern_type **)v12;
  *__to_nxt = *(std::codecvt<char32_t, char, mbstate_t>::intern_type **)v11;
  return result;
}

uint64_t std::utf8_to_ucs4(std::__1 *this, char *a2, unsigned __int8 *a3, const unsigned __int8 **a4, unsigned int *a5, unsigned int *a6, unsigned int **a7, char a8, std::codecvt_mode a9)
{
  char *v9;
  unsigned int *v10;
  unint64_t v11;
  uint64_t result;
  unsigned __int8 v13;
  unint64_t v14;
  unsigned __int8 v15;
  const unsigned __int8 *v16;
  unsigned __int8 v17;
  int v18;
  unsigned __int8 v19;
  int v20;
  unsigned __int8 v21;
  unsigned __int8 v22;

  *(_QWORD *)a3 = this;
  *(_QWORD *)a6 = a4;
  v9 = *(char **)a3;
  if ((a8 & 4) != 0
    && a2 - v9 >= 3
    && *v9 == 239
    && v9[1] == 187
    && v9[2] == 191)
  {
    v9 += 3;
    *(_QWORD *)a3 = v9;
  }
  if (v9 < a2)
  {
    v10 = *(unsigned int **)a6;
    do
    {
      if (v10 >= a5)
        return 1;
      LODWORD(v11) = *v9;
      if ((*v9 & 0x80000000) == 0)
      {
        if (*v9 > (unint64_t)a7)
          return 2;
        result = 1;
        goto LABEL_47;
      }
      if (v11 < 0xC2)
        return 2;
      if (v11 <= 0xDF)
      {
        if (a2 - v9 < 2)
          return 1;
        v13 = v9[1];
        if ((v13 & 0xC0) != 0x80)
          return 2;
        v14 = v13 & 0x3F | ((v11 & 0x1F) << 6);
        result = 2;
        if (v14 > (unint64_t)a7)
          return result;
        LODWORD(v11) = v14;
        goto LABEL_47;
      }
      if (v11 <= 0xEF)
      {
        if (a2 - v9 < 2)
          return 1;
        v15 = v9[1];
        if ((_DWORD)v11 == 237)
        {
          v18 = v15 & 0xE0;
        }
        else
        {
          if ((_DWORD)v11 == 224)
          {
            if ((v15 & 0xE0) != 0xA0)
              return 2;
LABEL_34:
            if ((unint64_t)(a2 - v9) < 3)
              return 1;
            v19 = v9[2];
            if ((v19 & 0xC0) != 0x80)
              return 2;
            v11 = ((v11 & 0xF) << 12) | ((v15 & 0x3F) << 6) | v19 & 0x3F;
            if (v11 > (unint64_t)a7)
              return 2;
            result = 3;
            goto LABEL_47;
          }
          v18 = v15 & 0xC0;
        }
        if (v18 != 128)
          return 2;
        goto LABEL_34;
      }
      if (v11 > 0xF4)
        return 2;
      v16 = (const unsigned __int8 *)(a2 - v9);
      if (a2 - v9 < 2)
        return 1;
      v17 = v9[1];
      if ((_DWORD)v11 == 244)
      {
        v20 = v17 & 0xF0;
      }
      else
      {
        if ((_DWORD)v11 == 240)
        {
          if ((v17 + 112) >= 0x30u)
            return 2;
          goto LABEL_41;
        }
        v20 = v17 & 0xC0;
      }
      if (v20 != 128)
        return 2;
LABEL_41:
      if ((unint64_t)v16 < 3)
        return 1;
      v21 = v9[2];
      if ((v21 & 0xC0) != 0x80)
        return 2;
      if ((unint64_t)v16 < 4)
        return 1;
      v22 = v9[3];
      if ((v22 & 0xC0) != 0x80)
        return 2;
      v11 = ((v11 & 7) << 18) | ((v17 & 0x3F) << 12) | ((v21 & 0x3F) << 6) | v22 & 0x3F;
      if (v11 > (unint64_t)a7)
        return 2;
      result = 4;
LABEL_47:
      *v10 = v11;
      *(_QWORD *)a3 = &v9[result];
      v10 = (unsigned int *)(*(_QWORD *)a6 + 4);
      *(_QWORD *)a6 = v10;
      v9 = *(char **)a3;
    }
    while (*(_QWORD *)a3 < (unint64_t)a2);
  }
  return 0;
}

std::codecvt_base::result std::codecvt<char32_t,char,__mbstate_t>::do_unshift(const std::codecvt<char32_t, char, mbstate_t> *this, std::codecvt<char32_t, char, mbstate_t>::state_type *__st, std::codecvt<char32_t, char, mbstate_t>::extern_type *__to, std::codecvt<char32_t, char, mbstate_t>::extern_type *__to_end, std::codecvt<char32_t, char, mbstate_t>::extern_type **__to_nxt)
{
  *__to_nxt = __to;
  return 3;
}

int std::codecvt<char32_t,char,__mbstate_t>::do_encoding(const std::codecvt<char32_t, char, mbstate_t> *this)
{
  return 0;
}

BOOL std::codecvt<char32_t,char,__mbstate_t>::do_always_noconv(const std::codecvt<char32_t, char, mbstate_t> *this)
{
  return 0;
}

int std::codecvt<char32_t,char,__mbstate_t>::do_length(const std::codecvt<char32_t, char, mbstate_t> *this, std::codecvt<char32_t, char, mbstate_t>::state_type *a2, const std::codecvt<char32_t, char, mbstate_t>::extern_type *__frm, const std::codecvt<char32_t, char, mbstate_t>::extern_type *__end, size_t __mx)
{
  std::codecvt_mode v5;

  return std::utf8_to_ucs4_length((std::__1 *)__frm, (const unsigned __int8 *)__end, (const unsigned __int8 *)__mx, 0x10FFFFuLL, 0, v5);
}

uint64_t std::utf8_to_ucs4_length(std::__1 *this, const unsigned __int8 *a2, const unsigned __int8 *a3, unint64_t a4, char a5, std::codecvt_mode a6)
{
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  int v18;
  int v19;

  v6 = a2 - (const unsigned __int8 *)this < 3 || (a5 & 4) == 0;
  v7 = (unint64_t)this;
  if (!v6)
  {
    v7 = (unint64_t)this;
    if (*(unsigned __int8 *)this == 239)
    {
      v7 = (unint64_t)this;
      if (*((unsigned __int8 *)this + 1) == 187)
      {
        v8 = 3;
        if (*((unsigned __int8 *)this + 2) != 191)
          v8 = 0;
        v7 = (unint64_t)this + v8;
      }
    }
  }
  if (v7 < (unint64_t)a2 && a3)
  {
    v9 = 1;
    while (1)
    {
      if ((*(char *)v7 & 0x80000000) == 0)
      {
        if (*(unsigned __int8 *)v7 > a4)
          return (v7 - (_DWORD)this);
        v10 = 1;
        goto LABEL_47;
      }
      v11 = *(unsigned __int8 *)v7;
      if (v11 < 0xC2)
        return (v7 - (_DWORD)this);
      if (v11 <= 0xDF)
      {
        if ((uint64_t)&a2[-v7] < 2)
          return (v7 - (_DWORD)this);
        v12 = *(_BYTE *)(v7 + 1);
        if ((v12 & 0xC0) != 0x80 || (v12 & 0x3F | ((v11 & 0x1F) << 6)) > a4)
          return (v7 - (_DWORD)this);
        v10 = 2;
        goto LABEL_47;
      }
      if (v11 <= 0xEF)
      {
        if ((uint64_t)&a2[-v7] < 3)
          return (v7 - (_DWORD)this);
        v13 = *(_BYTE *)(v7 + 1);
        v14 = *(_BYTE *)(v7 + 2);
        if (v11 == 237)
        {
          v18 = v13 & 0xE0;
        }
        else
        {
          if (v11 == 224)
          {
            if ((v13 & 0xE0) != 0xA0)
              return (v7 - (_DWORD)this);
LABEL_37:
            if ((v14 & 0xC0) != 0x80 || (((v11 & 0xF) << 12) | ((v13 & 0x3F) << 6) | v14 & 0x3F) > a4)
              return (v7 - (_DWORD)this);
            v10 = 3;
            goto LABEL_47;
          }
          v18 = v13 & 0xC0;
        }
        if (v18 != 128)
          return (v7 - (_DWORD)this);
        goto LABEL_37;
      }
      if (v11 > 0xF4 || (uint64_t)&a2[-v7] < 4)
        return (v7 - (_DWORD)this);
      v15 = *(_BYTE *)(v7 + 1);
      v16 = *(_BYTE *)(v7 + 2);
      v17 = *(_BYTE *)(v7 + 3);
      if (v11 == 244)
        break;
      if (v11 != 240)
      {
        v19 = v15 & 0xC0;
LABEL_42:
        if (v19 != 128)
          return (v7 - (_DWORD)this);
        goto LABEL_43;
      }
      if ((v15 + 112) >= 0x30u)
        return (v7 - (_DWORD)this);
LABEL_43:
      if ((v16 & 0xC0) != 0x80
        || (v17 & 0xC0) != 0x80
        || (((v11 & 7) << 18) | ((v15 & 0x3F) << 12) | ((v16 & 0x3F) << 6) | v17 & 0x3F) > a4)
      {
        return (v7 - (_DWORD)this);
      }
      v10 = 4;
LABEL_47:
      v7 += v10;
      if (v7 < (unint64_t)a2 && v9++ < (unint64_t)a3)
        continue;
      return (v7 - (_DWORD)this);
    }
    v19 = v15 & 0xF0;
    goto LABEL_42;
  }
  return (v7 - (_DWORD)this);
}

int std::codecvt<char32_t,char,__mbstate_t>::do_max_length(const std::codecvt<char32_t, char, mbstate_t> *this)
{
  return 4;
}

void std::codecvt<char32_t,char8_t,__mbstate_t>::~codecvt(std::__shared_count *a1)
{
  std::__shared_count::~__shared_count(a1);
  JUMPOUT(0x194021E38);
}

uint64_t std::codecvt<char32_t,char8_t,__mbstate_t>::do_out(int a1, int a2, std::__1 *this, unsigned int *a4, _QWORD *a5, const unsigned int **a6, unsigned __int8 *a7, _QWORD *a8)
{
  uint64_t result;
  std::codecvt_mode v11[2];
  unsigned int v12[2];

  *(_QWORD *)v12 = this;
  result = std::ucs4_to_utf8(this, a4, v12, a6, a7, (unsigned __int8 *)v11, (unsigned __int8 **)0x10FFFF, 0, (std::codecvt_mode)a6);
  *a5 = *(_QWORD *)v12;
  *a8 = *(_QWORD *)v11;
  return result;
}

uint64_t std::codecvt<char32_t,char8_t,__mbstate_t>::do_in(int a1, int a2, std::__1 *this, char *a4, _QWORD *a5, const unsigned __int8 **a6, unsigned int *a7, _QWORD *a8)
{
  uint64_t result;
  std::codecvt_mode v11[2];
  unsigned __int8 v12[8];

  *(_QWORD *)v12 = this;
  result = std::utf8_to_ucs4(this, a4, v12, a6, a7, (unsigned int *)v11, (unsigned int **)0x10FFFF, 0, (std::codecvt_mode)a6);
  *a5 = *(_QWORD *)v12;
  *a8 = *(_QWORD *)v11;
  return result;
}

uint64_t std::codecvt<char32_t,char8_t,__mbstate_t>::do_unshift(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  *a5 = a3;
  return 3;
}

uint64_t std::codecvt<char32_t,char8_t,__mbstate_t>::do_encoding()
{
  return 0;
}

uint64_t std::codecvt<char32_t,char8_t,__mbstate_t>::do_always_noconv()
{
  return 0;
}

uint64_t std::codecvt<char32_t,char8_t,__mbstate_t>::do_length(int a1, int a2, std::__1 *this, unsigned __int8 *a4, unsigned __int8 *a5, std::codecvt_mode a6)
{
  return std::utf8_to_ucs4_length(this, a4, a5, 0x10FFFFuLL, 0, a6);
}

uint64_t std::codecvt<char32_t,char8_t,__mbstate_t>::do_max_length()
{
  return 4;
}

std::codecvt_base::result std::__codecvt_utf8<wchar_t>::do_out(const std::__codecvt_utf8<wchar_t> *this, std::__codecvt_utf8<wchar_t>::state_type *__st, const std::__codecvt_utf8<wchar_t>::intern_type *__frm, const std::__codecvt_utf8<wchar_t>::intern_type *__frm_end, const std::__codecvt_utf8<wchar_t>::intern_type **__frm_nxt, std::__codecvt_utf8<wchar_t>::extern_type *__to, std::__codecvt_utf8<wchar_t>::extern_type *__to_end, std::__codecvt_utf8<wchar_t>::extern_type **__to_nxt)
{
  std::codecvt_base::result result;
  std::codecvt_mode v11[2];
  unsigned int v12[2];

  *(_QWORD *)v12 = __frm;
  result = std::ucs4_to_utf8((std::__1 *)__frm, (const unsigned int *)__frm_end, v12, (const unsigned int **)__to, (unsigned __int8 *)__to_end, (unsigned __int8 *)v11, (unsigned __int8 **)this->__maxcode_, this->__mode_, (std::codecvt_mode)__to);
  *__frm_nxt = *(const std::__codecvt_utf8<wchar_t>::intern_type **)v12;
  *__to_nxt = *(std::__codecvt_utf8<wchar_t>::extern_type **)v11;
  return result;
}

std::codecvt_base::result std::__codecvt_utf8<wchar_t>::do_in(const std::__codecvt_utf8<wchar_t> *this, std::__codecvt_utf8<wchar_t>::state_type *__st, const std::__codecvt_utf8<wchar_t>::extern_type *__frm, const std::__codecvt_utf8<wchar_t>::extern_type *__frm_end, const std::__codecvt_utf8<wchar_t>::extern_type **__frm_nxt, std::__codecvt_utf8<wchar_t>::intern_type *__to, std::__codecvt_utf8<wchar_t>::intern_type *__to_end, std::__codecvt_utf8<wchar_t>::intern_type **__to_nxt)
{
  std::codecvt_base::result result;
  std::codecvt_mode v11[2];
  unsigned __int8 v12[8];

  *(_QWORD *)v12 = __frm;
  result = std::utf8_to_ucs4((std::__1 *)__frm, (char *)__frm_end, v12, (const unsigned __int8 **)__to, (unsigned int *)__to_end, (unsigned int *)v11, (unsigned int **)this->__maxcode_, this->__mode_, (std::codecvt_mode)__to);
  *__frm_nxt = *(const std::__codecvt_utf8<wchar_t>::extern_type **)v12;
  *__to_nxt = *(std::__codecvt_utf8<wchar_t>::intern_type **)v11;
  return result;
}

std::codecvt_base::result std::__codecvt_utf8<wchar_t>::do_unshift(const std::__codecvt_utf8<wchar_t> *this, std::__codecvt_utf8<wchar_t>::state_type *__st, std::__codecvt_utf8<wchar_t>::extern_type *__to, std::__codecvt_utf8<wchar_t>::extern_type *__to_end, std::__codecvt_utf8<wchar_t>::extern_type **__to_nxt)
{
  *__to_nxt = __to;
  return 3;
}

int std::__codecvt_utf8<wchar_t>::do_encoding(const std::__codecvt_utf8<wchar_t> *this)
{
  return 0;
}

BOOL std::__codecvt_utf8<wchar_t>::do_always_noconv(const std::__codecvt_utf8<wchar_t> *this)
{
  return 0;
}

int std::__codecvt_utf8<wchar_t>::do_length(const std::__codecvt_utf8<wchar_t> *this, std::__codecvt_utf8<wchar_t>::state_type *a2, const std::__codecvt_utf8<wchar_t>::extern_type *__frm, const std::__codecvt_utf8<wchar_t>::extern_type *__end, size_t __mx)
{
  std::codecvt_mode v5;

  return std::utf8_to_ucs4_length((std::__1 *)__frm, (const unsigned __int8 *)__end, (const unsigned __int8 *)__mx, this->__maxcode_, this->__mode_, v5);
}

int std::__codecvt_utf8<wchar_t>::do_max_length(const std::__codecvt_utf8<wchar_t> *this)
{
  if ((this->__mode_ & 4) != 0)
    return 7;
  else
    return 4;
}

std::codecvt_base::result std::__codecvt_utf8<char16_t>::do_out(const std::__codecvt_utf8<char16_t> *this, std::__codecvt_utf8<char16_t>::state_type *__st, const std::__codecvt_utf8<char16_t>::intern_type *__frm, const std::__codecvt_utf8<char16_t>::intern_type *__frm_end, const std::__codecvt_utf8<char16_t>::intern_type **__frm_nxt, std::__codecvt_utf8<char16_t>::extern_type *__to, std::__codecvt_utf8<char16_t>::extern_type *__to_end, std::__codecvt_utf8<char16_t>::extern_type **__to_nxt)
{
  unint64_t maxcode;
  std::codecvt_base::result result;
  unint64_t v10;
  int64_t v12;

  maxcode = this->__maxcode_;
  if ((this->__mode_ & 2) != 0)
  {
    if (__to_end - __to < 3)
    {
LABEL_3:
      result = partial;
      goto LABEL_21;
    }
    *(_WORD *)__to = -17425;
    __to[2] = -65;
    __to += 3;
  }
  if (__frm >= __frm_end)
  {
LABEL_20:
    result = ok;
  }
  else
  {
    while (1)
    {
      v10 = *(unsigned __int16 *)__frm;
      if ((v10 & 0xF800) == 0xD800 || maxcode < v10)
        break;
      v12 = __to_end - __to;
      if (v10 > 0x7F)
      {
        if (v10 > 0x7FF)
        {
          if (v12 < 3)
            goto LABEL_3;
          *__to = (v10 >> 12) | 0xE0;
          __to[1] = (v10 >> 6) & 0x3F | 0x80;
          __to[2] = v10 & 0x3F | 0x80;
          __to += 3;
        }
        else
        {
          if (v12 < 2)
            goto LABEL_3;
          *__to = (v10 >> 6) | 0xC0;
          __to[1] = v10 & 0x3F | 0x80;
          __to += 2;
        }
      }
      else
      {
        if (v12 < 1)
          goto LABEL_3;
        *__to++ = v10;
      }
      if (++__frm >= __frm_end)
        goto LABEL_20;
    }
    result = error;
  }
LABEL_21:
  *__frm_nxt = __frm;
  *__to_nxt = __to;
  return result;
}

std::codecvt_base::result std::__codecvt_utf8<char16_t>::do_in(const std::__codecvt_utf8<char16_t> *this, std::__codecvt_utf8<char16_t>::state_type *__st, const std::__codecvt_utf8<char16_t>::extern_type *__frm, const std::__codecvt_utf8<char16_t>::extern_type *__frm_end, const std::__codecvt_utf8<char16_t>::extern_type **__frm_nxt, std::__codecvt_utf8<char16_t>::intern_type *__to, std::__codecvt_utf8<char16_t>::intern_type *__to_end, std::__codecvt_utf8<char16_t>::intern_type **__to_nxt)
{
  BOOL v8;
  uint64_t v9;
  unint64_t maxcode;
  unsigned int v11;
  uint64_t v12;
  std::__codecvt_utf8<char16_t>::extern_type v13;
  unint64_t v14;
  std::__codecvt_utf8<char16_t>::extern_type v15;
  int v16;
  std::__codecvt_utf8<char16_t>::extern_type v17;
  std::__codecvt_utf8<char16_t>::intern_type *v18;
  std::codecvt_base::result result;

  v8 = __frm_end - __frm < 3 || (this->__mode_ & 4) == 0;
  if (!v8 && *(unsigned __int8 *)__frm == 239 && *((unsigned __int8 *)__frm + 1) == 187)
  {
    v9 = 3;
    if (*((unsigned __int8 *)__frm + 2) != 191)
      v9 = 0;
    __frm += v9;
  }
  if (__frm >= __frm_end)
  {
    result = ok;
  }
  else
  {
    if (__to < __to_end)
    {
      maxcode = this->__maxcode_;
      while (1)
      {
        v11 = *(unsigned __int8 *)__frm;
        if ((*__frm & 0x80000000) == 0)
        {
          if (maxcode < *(unsigned __int8 *)__frm)
            goto LABEL_40;
          v12 = 1;
          goto LABEL_35;
        }
        if (v11 < 0xC2)
          goto LABEL_40;
        if (v11 <= 0xDF)
        {
          if (__frm_end - __frm < 2)
            goto LABEL_39;
          v13 = __frm[1];
          if ((v13 & 0xC0) != 0x80)
            goto LABEL_40;
          v14 = v13 & 0x3F | ((v11 & 0x1F) << 6);
          if (maxcode < v14)
            goto LABEL_40;
          LOWORD(v11) = v14;
          v12 = 2;
          goto LABEL_35;
        }
        if (v11 > 0xEF)
          goto LABEL_40;
        if (__frm_end - __frm < 2)
          goto LABEL_39;
        v15 = __frm[1];
        if (v11 == 237)
          break;
        if (v11 != 224)
        {
          v16 = v15 & 0xC0;
LABEL_30:
          if (v16 != 128)
            goto LABEL_40;
          goto LABEL_31;
        }
        if ((v15 & 0xE0) != 0xA0)
          goto LABEL_40;
LABEL_31:
        if ((unint64_t)(__frm_end - __frm) < 3)
          goto LABEL_39;
        v17 = __frm[2];
        if ((v17 & 0xC0) != 0x80
          || (LOWORD(v11) = ((_WORD)v11 << 12) | ((v15 & 0x3F) << 6) | v17 & 0x3F, maxcode < (unsigned __int16)v11))
        {
LABEL_40:
          result = error;
          goto LABEL_42;
        }
        v12 = 3;
LABEL_35:
        *__to = v11;
        v18 = __to + 1;
        __frm += v12;
        if (__frm >= __frm_end)
        {
          result = ok;
          ++__to;
          goto LABEL_42;
        }
        ++__to;
        if (v18 >= __to_end)
        {
          result = partial;
          __to = v18;
          goto LABEL_42;
        }
      }
      v16 = v15 & 0xE0;
      goto LABEL_30;
    }
LABEL_39:
    result = partial;
  }
LABEL_42:
  *__frm_nxt = __frm;
  *__to_nxt = __to;
  return result;
}

std::codecvt_base::result std::__codecvt_utf8<char16_t>::do_unshift(const std::__codecvt_utf8<char16_t> *this, std::__codecvt_utf8<char16_t>::state_type *__st, std::__codecvt_utf8<char16_t>::extern_type *__to, std::__codecvt_utf8<char16_t>::extern_type *__to_end, std::__codecvt_utf8<char16_t>::extern_type **__to_nxt)
{
  *__to_nxt = __to;
  return 3;
}

int std::__codecvt_utf8<char16_t>::do_encoding(const std::__codecvt_utf8<char16_t> *this)
{
  return 0;
}

BOOL std::__codecvt_utf8<char16_t>::do_always_noconv(const std::__codecvt_utf8<char16_t> *this)
{
  return 0;
}

int std::__codecvt_utf8<char16_t>::do_length(const std::__codecvt_utf8<char16_t> *this, std::__codecvt_utf8<char16_t>::state_type *a2, const std::__codecvt_utf8<char16_t>::extern_type *__frm, const std::__codecvt_utf8<char16_t>::extern_type *__end, size_t __mx)
{
  BOOL v5;
  const std::__codecvt_utf8<char16_t>::extern_type *v6;
  uint64_t v7;
  unint64_t maxcode;
  size_t v9;
  uint64_t v10;
  unsigned int v11;
  std::__codecvt_utf8<char16_t>::extern_type v12;
  std::__codecvt_utf8<char16_t>::extern_type v13;
  std::__codecvt_utf8<char16_t>::extern_type v14;
  int v15;

  v5 = __end - __frm < 3 || (this->__mode_ & 4) == 0;
  v6 = __frm;
  if (!v5)
  {
    v6 = __frm;
    if (*(unsigned __int8 *)__frm == 239)
    {
      v6 = __frm;
      if (*((unsigned __int8 *)__frm + 1) == 187)
      {
        v7 = 3;
        if (*((unsigned __int8 *)__frm + 2) != 191)
          v7 = 0;
        v6 = &__frm[v7];
      }
    }
  }
  if (__mx && v6 < __end)
  {
    maxcode = this->__maxcode_;
    v9 = 1;
    while (1)
    {
      if ((*v6 & 0x80000000) == 0)
      {
        if (maxcode < *(unsigned __int8 *)v6)
          return (_DWORD)v6 - (_DWORD)__frm;
        v10 = 1;
        goto LABEL_34;
      }
      v11 = *(unsigned __int8 *)v6;
      if (v11 < 0xC2)
        return (_DWORD)v6 - (_DWORD)__frm;
      if (v11 <= 0xDF)
      {
        if (__end - v6 < 2)
          return (_DWORD)v6 - (_DWORD)__frm;
        v12 = v6[1];
        if ((v12 & 0xC0) != 0x80 || maxcode < (v12 & 0x3F | ((v11 & 0x1F) << 6)))
          return (_DWORD)v6 - (_DWORD)__frm;
        v10 = 2;
        goto LABEL_34;
      }
      if (v11 > 0xEF || __end - v6 < 3)
        return (_DWORD)v6 - (_DWORD)__frm;
      v13 = v6[1];
      v14 = v6[2];
      if (v11 == 237)
        break;
      if (v11 != 224)
      {
        v15 = v13 & 0xC0;
LABEL_30:
        if (v15 != 128)
          return (_DWORD)v6 - (_DWORD)__frm;
        goto LABEL_31;
      }
      if ((v13 & 0xE0) != 0xA0)
        return (_DWORD)v6 - (_DWORD)__frm;
LABEL_31:
      if ((v14 & 0xC0) != 0x80 || maxcode < (((v11 & 0xF) << 12) | ((v13 & 0x3F) << 6) | v14 & 0x3F))
        return (_DWORD)v6 - (_DWORD)__frm;
      v10 = 3;
LABEL_34:
      v6 += v10;
      if (v6 < __end && v9++ < __mx)
        continue;
      return (_DWORD)v6 - (_DWORD)__frm;
    }
    v15 = v13 & 0xE0;
    goto LABEL_30;
  }
  return (_DWORD)v6 - (_DWORD)__frm;
}

int std::__codecvt_utf8<char16_t>::do_max_length(const std::__codecvt_utf8<char16_t> *this)
{
  if ((this->__mode_ & 4) != 0)
    return 6;
  else
    return 3;
}

std::codecvt_base::result std::__codecvt_utf8<char32_t>::do_out(const std::__codecvt_utf8<char32_t> *this, std::__codecvt_utf8<char32_t>::state_type *__st, const std::__codecvt_utf8<char32_t>::intern_type *__frm, const std::__codecvt_utf8<char32_t>::intern_type *__frm_end, const std::__codecvt_utf8<char32_t>::intern_type **__frm_nxt, std::__codecvt_utf8<char32_t>::extern_type *__to, std::__codecvt_utf8<char32_t>::extern_type *__to_end, std::__codecvt_utf8<char32_t>::extern_type **__to_nxt)
{
  std::codecvt_base::result result;
  std::codecvt_mode v11[2];
  unsigned int v12[2];

  *(_QWORD *)v12 = __frm;
  result = std::ucs4_to_utf8((std::__1 *)__frm, (const unsigned int *)__frm_end, v12, (const unsigned int **)__to, (unsigned __int8 *)__to_end, (unsigned __int8 *)v11, (unsigned __int8 **)this->__maxcode_, this->__mode_, (std::codecvt_mode)__to);
  *__frm_nxt = *(const std::__codecvt_utf8<char32_t>::intern_type **)v12;
  *__to_nxt = *(std::__codecvt_utf8<char32_t>::extern_type **)v11;
  return result;
}

std::codecvt_base::result std::__codecvt_utf8<char32_t>::do_in(const std::__codecvt_utf8<char32_t> *this, std::__codecvt_utf8<char32_t>::state_type *__st, const std::__codecvt_utf8<char32_t>::extern_type *__frm, const std::__codecvt_utf8<char32_t>::extern_type *__frm_end, const std::__codecvt_utf8<char32_t>::extern_type **__frm_nxt, std::__codecvt_utf8<char32_t>::intern_type *__to, std::__codecvt_utf8<char32_t>::intern_type *__to_end, std::__codecvt_utf8<char32_t>::intern_type **__to_nxt)
{
  std::codecvt_base::result result;
  std::codecvt_mode v11[2];
  unsigned __int8 v12[8];

  *(_QWORD *)v12 = __frm;
  result = std::utf8_to_ucs4((std::__1 *)__frm, (char *)__frm_end, v12, (const unsigned __int8 **)__to, (unsigned int *)__to_end, (unsigned int *)v11, (unsigned int **)this->__maxcode_, this->__mode_, (std::codecvt_mode)__to);
  *__frm_nxt = *(const std::__codecvt_utf8<char32_t>::extern_type **)v12;
  *__to_nxt = *(std::__codecvt_utf8<char32_t>::intern_type **)v11;
  return result;
}

std::codecvt_base::result std::__codecvt_utf8<char32_t>::do_unshift(const std::__codecvt_utf8<char32_t> *this, std::__codecvt_utf8<char32_t>::state_type *__st, std::__codecvt_utf8<char32_t>::extern_type *__to, std::__codecvt_utf8<char32_t>::extern_type *__to_end, std::__codecvt_utf8<char32_t>::extern_type **__to_nxt)
{
  *__to_nxt = __to;
  return 3;
}

int std::__codecvt_utf8<char32_t>::do_encoding(const std::__codecvt_utf8<char32_t> *this)
{
  return 0;
}

BOOL std::__codecvt_utf8<char32_t>::do_always_noconv(const std::__codecvt_utf8<char32_t> *this)
{
  return 0;
}

int std::__codecvt_utf8<char32_t>::do_length(const std::__codecvt_utf8<char32_t> *this, std::__codecvt_utf8<char32_t>::state_type *a2, const std::__codecvt_utf8<char32_t>::extern_type *__frm, const std::__codecvt_utf8<char32_t>::extern_type *__end, size_t __mx)
{
  std::codecvt_mode v5;

  return std::utf8_to_ucs4_length((std::__1 *)__frm, (const unsigned __int8 *)__end, (const unsigned __int8 *)__mx, this->__maxcode_, this->__mode_, v5);
}

int std::__codecvt_utf8<char32_t>::do_max_length(const std::__codecvt_utf8<char32_t> *this)
{
  if ((this->__mode_ & 4) != 0)
    return 7;
  else
    return 4;
}

std::codecvt_base::result std::__codecvt_utf16<wchar_t,false>::do_out(const std::__codecvt_utf16<wchar_t, false> *this, std::__codecvt_utf16<wchar_t, false>::state_type *__st, const std::__codecvt_utf16<wchar_t, false>::intern_type *__frm, const std::__codecvt_utf16<wchar_t, false>::intern_type *__frm_end, const std::__codecvt_utf16<wchar_t, false>::intern_type **__frm_nxt, std::__codecvt_utf16<wchar_t, false>::extern_type *__to, std::__codecvt_utf16<wchar_t, false>::extern_type *__to_end, std::__codecvt_utf16<wchar_t, false>::extern_type **__to_nxt)
{
  std::codecvt_base::result result;
  std::codecvt_mode v11[2];
  unsigned int v12[2];

  *(_QWORD *)v12 = __frm;
  result = std::ucs4_to_utf16be((std::__1 *)__frm, (const unsigned int *)__frm_end, v12, (const unsigned int **)__to, (unsigned __int8 *)__to_end, (unsigned __int8 *)v11, (unsigned __int8 **)this->__maxcode_, this->__mode_, (std::codecvt_mode)__to);
  *__frm_nxt = *(const std::__codecvt_utf16<wchar_t, false>::intern_type **)v12;
  *__to_nxt = *(std::__codecvt_utf16<wchar_t, false>::extern_type **)v11;
  return result;
}

uint64_t std::ucs4_to_utf16be(std::__1 *this, const unsigned int *a2, unsigned int *a3, const unsigned int **a4, unsigned __int8 *a5, unsigned __int8 *a6, unsigned __int8 **a7, char a8, std::codecvt_mode a9)
{
  _BYTE *v10;
  const unsigned int *v11;
  unint64_t v12;
  _BYTE *v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  _BYTE *v18;

  *(_QWORD *)a3 = this;
  *(_QWORD *)a6 = a4;
  if ((a8 & 2) != 0)
  {
    if (a5 - (unsigned __int8 *)a4 < 2)
      return 1;
    *(_QWORD *)a6 = (char *)a4 + 1;
    *(_BYTE *)a4 = -2;
    v10 = (_BYTE *)(*(_QWORD *)a6)++;
    *v10 = -1;
  }
  v11 = *(const unsigned int **)a3;
  if (*(_QWORD *)a3 >= (unint64_t)a2)
    return 0;
  while (1)
  {
    v12 = *v11;
    if (v12 >> 11 == 27 || v12 > (unint64_t)a7)
      break;
    v14 = *(_BYTE **)a6;
    v15 = (uint64_t)&a5[-*(_QWORD *)a6];
    if (WORD1(v12))
    {
      if (v15 < 4)
        return 1;
      *(_QWORD *)a6 = v14 + 1;
      *v14 = ((unsigned __int16)(((v12 >> 10) & 0x7C0) + 16320) >> 8) | 0xD8;
      v16 = (_BYTE *)(*(_QWORD *)a6)++;
      *v16 = (((v12 >> 10) & 0xC0) - 64) & 0xC0 | ((unsigned __int16)v12 >> 10);
      v17 = (_BYTE *)(*(_QWORD *)a6)++;
      *v17 = BYTE1(v12) & 3 | 0xDC;
    }
    else
    {
      if (v15 < 2)
        return 1;
      *(_QWORD *)a6 = v14 + 1;
      *v14 = BYTE1(v12);
    }
    v18 = (_BYTE *)(*(_QWORD *)a6)++;
    *v18 = v12;
    v11 = (const unsigned int *)(*(_QWORD *)a3 + 4);
    *(_QWORD *)a3 = v11;
    if (v11 >= a2)
      return 0;
  }
  return 2;
}

std::codecvt_base::result std::__codecvt_utf16<wchar_t,false>::do_in(const std::__codecvt_utf16<wchar_t, false> *this, std::__codecvt_utf16<wchar_t, false>::state_type *__st, const std::__codecvt_utf16<wchar_t, false>::extern_type *__frm, const std::__codecvt_utf16<wchar_t, false>::extern_type *__frm_end, const std::__codecvt_utf16<wchar_t, false>::extern_type **__frm_nxt, std::__codecvt_utf16<wchar_t, false>::intern_type *__to, std::__codecvt_utf16<wchar_t, false>::intern_type *__to_end, std::__codecvt_utf16<wchar_t, false>::intern_type **__to_nxt)
{
  std::codecvt_base::result result;
  std::codecvt_mode v11[2];
  unsigned __int8 v12[8];

  *(_QWORD *)v12 = __frm;
  result = std::utf16be_to_ucs4((std::__1 *)__frm, (unsigned __int8 *)__frm_end, v12, (const unsigned __int8 **)__to, (unsigned int *)__to_end, (unsigned int *)v11, (unsigned int **)this->__maxcode_, this->__mode_, (std::codecvt_mode)__to);
  *__frm_nxt = *(const std::__codecvt_utf16<wchar_t, false>::extern_type **)v12;
  *__to_nxt = *(std::__codecvt_utf16<wchar_t, false>::intern_type **)v11;
  return result;
}

uint64_t std::utf16be_to_ucs4(std::__1 *this, unsigned __int8 *a2, unsigned __int8 *a3, const unsigned __int8 **a4, unsigned int *a5, unsigned int *a6, unsigned int **a7, char a8, std::codecvt_mode a9)
{
  unsigned __int8 *v9;
  unsigned int *v10;
  unint64_t v11;
  int v12;
  uint64_t result;
  unsigned __int8 v14;

  *(_QWORD *)a3 = this;
  *(_QWORD *)a6 = a4;
  v9 = *(unsigned __int8 **)a3;
  if ((a8 & 4) != 0 && a2 - v9 >= 2 && *v9 == 254 && v9[1] == 255)
  {
    v9 += 2;
    *(_QWORD *)a3 = v9;
  }
  if (v9 < a2 - 1)
  {
    v10 = *(unsigned int **)a6;
    while (v10 < a5)
    {
      v11 = v9[1] | (*v9 << 8);
      v12 = (*v9 << 8) & 0xFC00;
      if (v12 == 55296)
      {
        if (a2 - v9 < 4)
          return 1;
        v14 = v9[2];
        if ((v14 & 0xFC) != 0xDC)
          return 2;
        v11 = (v9[3] | ((v14 & 3) << 8) & 0x3FF | ((v9[1] | (*v9 << 8) & 0x3FFu) << 10)) + 0x10000;
        if (v11 > (unint64_t)a7)
          return 2;
        result = 4;
      }
      else
      {
        if (v12 == 56320)
          return 2;
        result = 2;
        if (v11 > (unint64_t)a7)
          return result;
      }
      *v10 = v11;
      *(_QWORD *)a3 = &v9[result];
      v10 = (unsigned int *)(*(_QWORD *)a6 + 4);
      *(_QWORD *)a6 = v10;
      v9 = *(unsigned __int8 **)a3;
      if (*(_QWORD *)a3 >= (unint64_t)(a2 - 1))
        return v9 < a2;
    }
  }
  return v9 < a2;
}

std::codecvt_base::result std::__codecvt_utf16<wchar_t,false>::do_unshift(const std::__codecvt_utf16<wchar_t, false> *this, std::__codecvt_utf16<wchar_t, false>::state_type *__st, std::__codecvt_utf16<wchar_t, false>::extern_type *__to, std::__codecvt_utf16<wchar_t, false>::extern_type *__to_end, std::__codecvt_utf16<wchar_t, false>::extern_type **__to_nxt)
{
  *__to_nxt = __to;
  return 3;
}

int std::__codecvt_utf16<wchar_t,false>::do_encoding(const std::__codecvt_utf16<wchar_t, false> *this)
{
  return 0;
}

BOOL std::__codecvt_utf16<wchar_t,false>::do_always_noconv(const std::__codecvt_utf16<wchar_t, false> *this)
{
  return 0;
}

int std::__codecvt_utf16<wchar_t,false>::do_length(const std::__codecvt_utf16<wchar_t, false> *this, std::__codecvt_utf16<wchar_t, false>::state_type *a2, const std::__codecvt_utf16<wchar_t, false>::extern_type *__frm, const std::__codecvt_utf16<wchar_t, false>::extern_type *__end, size_t __mx)
{
  std::codecvt_mode v5;

  return std::utf16be_to_ucs4_length((std::__1 *)__frm, (const unsigned __int8 *)__end, (const unsigned __int8 *)__mx, this->__maxcode_, this->__mode_, v5);
}

uint64_t std::utf16be_to_ucs4_length(std::__1 *this, const unsigned __int8 *a2, const unsigned __int8 *a3, unint64_t a4, char a5, std::codecvt_mode a6)
{
  BOOL v6;
  unsigned __int8 *v7;
  unint64_t v8;
  int v9;
  unsigned __int8 v11;

  v6 = a2 - (const unsigned __int8 *)this < 2 || (a5 & 4) == 0;
  v7 = (unsigned __int8 *)this;
  if (!v6)
  {
    v7 = (unsigned __int8 *)this;
    if (*(unsigned __int8 *)this == 254)
      v7 = (unsigned __int8 *)this + 2 * (*((unsigned __int8 *)this + 1) == 255);
  }
  if (v7 < a2 - 1 && a3)
  {
    v8 = 1;
    while (1)
    {
      v9 = (*v7 << 8) & 0xFC00;
      if (v9 == 55296)
      {
        if (a2 - v7 < 4)
          return ((_DWORD)v7 - (_DWORD)this);
        v11 = v7[2];
        if ((v11 & 0xFC) != 0xDC
          || (v7[3] | ((v11 & 3) << 8) & 0x3FF | ((v7[1] | (*v7 << 8) & 0x3FFu) << 10)) + 0x10000 > a4)
        {
          return ((_DWORD)v7 - (_DWORD)this);
        }
        v7 += 4;
      }
      else
      {
        if (v9 == 56320 || (v7[1] | (*v7 << 8)) > a4)
          return ((_DWORD)v7 - (_DWORD)this);
        v7 += 2;
      }
      if (v7 < a2 - 1 && v8++ < (unint64_t)a3)
        continue;
      return ((_DWORD)v7 - (_DWORD)this);
    }
  }
  return ((_DWORD)v7 - (_DWORD)this);
}

int std::__codecvt_utf16<wchar_t,false>::do_max_length(const std::__codecvt_utf16<wchar_t, false> *this)
{
  if ((this->__mode_ & 4) != 0)
    return 6;
  else
    return 4;
}

std::codecvt_base::result std::__codecvt_utf16<wchar_t,true>::do_out(const std::__codecvt_utf16<wchar_t, true> *this, std::__codecvt_utf16<wchar_t, true>::state_type *__st, const std::__codecvt_utf16<wchar_t, true>::intern_type *__frm, const std::__codecvt_utf16<wchar_t, true>::intern_type *__frm_end, const std::__codecvt_utf16<wchar_t, true>::intern_type **__frm_nxt, std::__codecvt_utf16<wchar_t, true>::extern_type *__to, std::__codecvt_utf16<wchar_t, true>::extern_type *__to_end, std::__codecvt_utf16<wchar_t, true>::extern_type **__to_nxt)
{
  std::codecvt_base::result result;
  std::codecvt_mode v11[2];
  unsigned int v12[2];

  *(_QWORD *)v12 = __frm;
  result = std::ucs4_to_utf16le((std::__1 *)__frm, (const unsigned int *)__frm_end, v12, (const unsigned int **)__to, (unsigned __int8 *)__to_end, (unsigned __int8 *)v11, (unsigned __int8 **)this->__maxcode_, this->__mode_, (std::codecvt_mode)__to);
  *__frm_nxt = *(const std::__codecvt_utf16<wchar_t, true>::intern_type **)v12;
  *__to_nxt = *(std::__codecvt_utf16<wchar_t, true>::extern_type **)v11;
  return result;
}

uint64_t std::ucs4_to_utf16le(std::__1 *this, const unsigned int *a2, unsigned int *a3, const unsigned int **a4, unsigned __int8 *a5, unsigned __int8 *a6, unsigned __int8 **a7, char a8, std::codecvt_mode a9)
{
  _BYTE *v10;
  const unsigned int *v11;
  unint64_t v12;
  _BYTE *v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  _BYTE *v18;
  _BYTE *v19;

  *(_QWORD *)a3 = this;
  *(_QWORD *)a6 = a4;
  if ((a8 & 2) != 0)
  {
    if (a5 - (unsigned __int8 *)a4 < 2)
      return 1;
    *(_QWORD *)a6 = (char *)a4 + 1;
    *(_BYTE *)a4 = -1;
    v10 = (_BYTE *)(*(_QWORD *)a6)++;
    *v10 = -2;
  }
  v11 = *(const unsigned int **)a3;
  if (*(_QWORD *)a3 >= (unint64_t)a2)
    return 0;
  while (1)
  {
    v12 = *v11;
    if (v12 >> 11 == 27 || v12 > (unint64_t)a7)
      break;
    v14 = *(_BYTE **)a6;
    v15 = (uint64_t)&a5[-*(_QWORD *)a6];
    if (WORD1(v12))
    {
      if (v15 < 4)
        return 1;
      *(_QWORD *)a6 = v14 + 1;
      *v14 = (((v12 >> 10) & 0xC0) - 64) & 0xC0 | ((unsigned __int16)v12 >> 10);
      v17 = (_BYTE *)(*(_QWORD *)a6)++;
      *v17 = ((unsigned __int16)(((v12 >> 10) & 0x7C0) + 16320) >> 8) | 0xD8;
      v18 = (_BYTE *)(*(_QWORD *)a6)++;
      *v18 = v12;
      LODWORD(v18) = (v12 >> 8) & 3 | 0xDC;
      v19 = (_BYTE *)(*(_QWORD *)a6)++;
      *v19 = (_BYTE)v18;
    }
    else
    {
      if (v15 < 2)
        return 1;
      *(_QWORD *)a6 = v14 + 1;
      *v14 = v12;
      v16 = (_BYTE *)(*(_QWORD *)a6)++;
      *v16 = BYTE1(v12);
    }
    v11 = (const unsigned int *)(*(_QWORD *)a3 + 4);
    *(_QWORD *)a3 = v11;
    if (v11 >= a2)
      return 0;
  }
  return 2;
}

std::codecvt_base::result std::__codecvt_utf16<wchar_t,true>::do_in(const std::__codecvt_utf16<wchar_t, true> *this, std::__codecvt_utf16<wchar_t, true>::state_type *__st, const std::__codecvt_utf16<wchar_t, true>::extern_type *__frm, const std::__codecvt_utf16<wchar_t, true>::extern_type *__frm_end, const std::__codecvt_utf16<wchar_t, true>::extern_type **__frm_nxt, std::__codecvt_utf16<wchar_t, true>::intern_type *__to, std::__codecvt_utf16<wchar_t, true>::intern_type *__to_end, std::__codecvt_utf16<wchar_t, true>::intern_type **__to_nxt)
{
  std::codecvt_base::result result;
  std::codecvt_mode v11[2];
  unsigned __int8 v12[8];

  *(_QWORD *)v12 = __frm;
  result = std::utf16le_to_ucs4((std::__1 *)__frm, (unsigned __int8 *)__frm_end, v12, (const unsigned __int8 **)__to, (unsigned int *)__to_end, (unsigned int *)v11, (unsigned int **)this->__maxcode_, this->__mode_, (std::codecvt_mode)__to);
  *__frm_nxt = *(const std::__codecvt_utf16<wchar_t, true>::extern_type **)v12;
  *__to_nxt = *(std::__codecvt_utf16<wchar_t, true>::intern_type **)v11;
  return result;
}

uint64_t std::utf16le_to_ucs4(std::__1 *this, unsigned __int8 *a2, unsigned __int8 *a3, const unsigned __int8 **a4, unsigned int *a5, unsigned int *a6, unsigned int **a7, char a8, std::codecvt_mode a9)
{
  unsigned __int8 *v9;
  unsigned int *v10;
  unint64_t v11;
  int v12;
  uint64_t result;
  unsigned __int8 v14;

  *(_QWORD *)a3 = this;
  *(_QWORD *)a6 = a4;
  v9 = *(unsigned __int8 **)a3;
  if ((a8 & 4) != 0 && a2 - v9 >= 2 && *v9 == 255 && v9[1] == 254)
  {
    v9 += 2;
    *(_QWORD *)a3 = v9;
  }
  if (v9 < a2 - 1)
  {
    v10 = *(unsigned int **)a6;
    while (v10 < a5)
    {
      v11 = *v9 | (v9[1] << 8);
      v12 = (v9[1] << 8) & 0xFC00;
      if (v12 == 55296)
      {
        if (a2 - v9 < 4)
          return 1;
        v14 = v9[3];
        if ((v14 & 0xFC) != 0xDC)
          return 2;
        v11 = (v9[2] | ((v14 & 3) << 8) & 0x3FF | ((*v9 | (v9[1] << 8) & 0x3FFu) << 10)) + 0x10000;
        if (v11 > (unint64_t)a7)
          return 2;
        result = 4;
      }
      else
      {
        if (v12 == 56320)
          return 2;
        result = 2;
        if (v11 > (unint64_t)a7)
          return result;
      }
      *v10 = v11;
      *(_QWORD *)a3 = &v9[result];
      v10 = (unsigned int *)(*(_QWORD *)a6 + 4);
      *(_QWORD *)a6 = v10;
      v9 = *(unsigned __int8 **)a3;
      if (*(_QWORD *)a3 >= (unint64_t)(a2 - 1))
        return v9 < a2;
    }
  }
  return v9 < a2;
}

std::codecvt_base::result std::__codecvt_utf16<wchar_t,true>::do_unshift(const std::__codecvt_utf16<wchar_t, true> *this, std::__codecvt_utf16<wchar_t, true>::state_type *__st, std::__codecvt_utf16<wchar_t, true>::extern_type *__to, std::__codecvt_utf16<wchar_t, true>::extern_type *__to_end, std::__codecvt_utf16<wchar_t, true>::extern_type **__to_nxt)
{
  *__to_nxt = __to;
  return 3;
}

int std::__codecvt_utf16<wchar_t,true>::do_encoding(const std::__codecvt_utf16<wchar_t, true> *this)
{
  return 0;
}

BOOL std::__codecvt_utf16<wchar_t,true>::do_always_noconv(const std::__codecvt_utf16<wchar_t, true> *this)
{
  return 0;
}

int std::__codecvt_utf16<wchar_t,true>::do_length(const std::__codecvt_utf16<wchar_t, true> *this, std::__codecvt_utf16<wchar_t, true>::state_type *a2, const std::__codecvt_utf16<wchar_t, true>::extern_type *__frm, const std::__codecvt_utf16<wchar_t, true>::extern_type *__end, size_t __mx)
{
  std::codecvt_mode v5;

  return std::utf16le_to_ucs4_length((std::__1 *)__frm, (const unsigned __int8 *)__end, (const unsigned __int8 *)__mx, this->__maxcode_, this->__mode_, v5);
}

uint64_t std::utf16le_to_ucs4_length(std::__1 *this, const unsigned __int8 *a2, const unsigned __int8 *a3, unint64_t a4, char a5, std::codecvt_mode a6)
{
  BOOL v6;
  unsigned __int8 *v7;
  unint64_t v8;
  int v9;
  unsigned __int8 v11;

  v6 = a2 - (const unsigned __int8 *)this < 2 || (a5 & 4) == 0;
  v7 = (unsigned __int8 *)this;
  if (!v6)
  {
    v7 = (unsigned __int8 *)this;
    if (*(unsigned __int8 *)this == 255)
      v7 = (unsigned __int8 *)this + 2 * (*((unsigned __int8 *)this + 1) == 254);
  }
  if (v7 < a2 - 1 && a3)
  {
    v8 = 1;
    while (1)
    {
      v9 = (v7[1] << 8) & 0xFC00;
      if (v9 == 55296)
      {
        if (a2 - v7 < 4)
          return ((_DWORD)v7 - (_DWORD)this);
        v11 = v7[3];
        if ((v11 & 0xFC) != 0xDC
          || (v7[2] | ((v11 & 3) << 8) & 0x3FF | ((*v7 | (v7[1] << 8) & 0x3FFu) << 10)) + 0x10000 > a4)
        {
          return ((_DWORD)v7 - (_DWORD)this);
        }
        v7 += 4;
      }
      else
      {
        if (v9 == 56320 || (*v7 | (v7[1] << 8)) > a4)
          return ((_DWORD)v7 - (_DWORD)this);
        v7 += 2;
      }
      if (v7 < a2 - 1 && v8++ < (unint64_t)a3)
        continue;
      return ((_DWORD)v7 - (_DWORD)this);
    }
  }
  return ((_DWORD)v7 - (_DWORD)this);
}

int std::__codecvt_utf16<wchar_t,true>::do_max_length(const std::__codecvt_utf16<wchar_t, true> *this)
{
  if ((this->__mode_ & 4) != 0)
    return 6;
  else
    return 4;
}

std::codecvt_base::result std::__codecvt_utf16<char16_t,false>::do_out(const std::__codecvt_utf16<char16_t, false> *this, std::__codecvt_utf16<char16_t, false>::state_type *__st, const std::__codecvt_utf16<char16_t, false>::intern_type *__frm, const std::__codecvt_utf16<char16_t, false>::intern_type *__frm_end, const std::__codecvt_utf16<char16_t, false>::intern_type **__frm_nxt, std::__codecvt_utf16<char16_t, false>::extern_type *__to, std::__codecvt_utf16<char16_t, false>::extern_type *__to_end, std::__codecvt_utf16<char16_t, false>::extern_type **__to_nxt)
{
  unint64_t maxcode;
  std::codecvt_base::result result;
  int64_t v10;
  unint64_t v11;
  BOOL v13;
  std::__codecvt_utf16<char16_t, false>::extern_type *v14;

  maxcode = this->__maxcode_;
  if ((this->__mode_ & 2) != 0)
  {
    if (__to_end - __to < 2)
    {
LABEL_3:
      result = partial;
      goto LABEL_16;
    }
    *(_WORD *)__to = -2;
    __to += 2;
  }
  if (__frm >= __frm_end)
  {
    result = ok;
  }
  else
  {
    v10 = __to_end - __to;
    do
    {
      v11 = *(unsigned __int16 *)__frm;
      if ((v11 & 0xF800) == 0xD800 || maxcode < v11)
      {
        result = error;
        goto LABEL_16;
      }
      v13 = v10 < 2;
      v10 -= 2;
      if (v13)
        goto LABEL_3;
      *__to = BYTE1(v11);
      v14 = __to + 2;
      __to[1] = v11;
      ++__frm;
      __to += 2;
    }
    while (__frm < __frm_end);
    result = ok;
    __to = v14;
  }
LABEL_16:
  *__frm_nxt = __frm;
  *__to_nxt = __to;
  return result;
}

std::codecvt_base::result std::__codecvt_utf16<char16_t,false>::do_in(const std::__codecvt_utf16<char16_t, false> *this, std::__codecvt_utf16<char16_t, false>::state_type *__st, const std::__codecvt_utf16<char16_t, false>::extern_type *__frm, const std::__codecvt_utf16<char16_t, false>::extern_type *__frm_end, const std::__codecvt_utf16<char16_t, false>::extern_type **__frm_nxt, std::__codecvt_utf16<char16_t, false>::intern_type *__to, std::__codecvt_utf16<char16_t, false>::intern_type *__to_end, std::__codecvt_utf16<char16_t, false>::intern_type **__to_nxt)
{
  BOOL v8;
  unint64_t maxcode;
  int v10;
  std::codecvt_base::result result;

  v8 = __frm_end - __frm < 2 || (this->__mode_ & 4) == 0;
  if (!v8 && *(unsigned __int8 *)__frm == 254)
    __frm += 2 * (*((unsigned __int8 *)__frm + 1) == 255);
  if (__frm < __frm_end - 1)
  {
    maxcode = this->__maxcode_;
    while (__to < __to_end)
    {
      v10 = *(unsigned __int8 *)__frm;
      if ((v10 & 0xF8) == 0xD8 || maxcode < (*((unsigned __int8 *)__frm + 1) | (v10 << 8)))
      {
        result = error;
        goto LABEL_17;
      }
      *__to++ = _byteswap_ushort(*(_WORD *)__frm);
      __frm += 2;
      if (__frm >= __frm_end - 1)
        break;
    }
  }
  result = __frm < __frm_end;
LABEL_17:
  *__frm_nxt = __frm;
  *__to_nxt = __to;
  return result;
}

std::codecvt_base::result std::__codecvt_utf16<char16_t,false>::do_unshift(const std::__codecvt_utf16<char16_t, false> *this, std::__codecvt_utf16<char16_t, false>::state_type *__st, std::__codecvt_utf16<char16_t, false>::extern_type *__to, std::__codecvt_utf16<char16_t, false>::extern_type *__to_end, std::__codecvt_utf16<char16_t, false>::extern_type **__to_nxt)
{
  *__to_nxt = __to;
  return 3;
}

int std::__codecvt_utf16<char16_t,false>::do_encoding(const std::__codecvt_utf16<char16_t, false> *this)
{
  return 0;
}

BOOL std::__codecvt_utf16<char16_t,false>::do_always_noconv(const std::__codecvt_utf16<char16_t, false> *this)
{
  return 0;
}

int std::__codecvt_utf16<char16_t,false>::do_length(const std::__codecvt_utf16<char16_t, false> *this, std::__codecvt_utf16<char16_t, false>::state_type *a2, const std::__codecvt_utf16<char16_t, false>::extern_type *__frm, const std::__codecvt_utf16<char16_t, false>::extern_type *__end, size_t __mx)
{
  BOOL v5;
  const std::__codecvt_utf16<char16_t, false>::extern_type *v6;
  size_t v7;
  int v8;
  BOOL v9;

  v5 = __end - __frm < 2 || (this->__mode_ & 4) == 0;
  v6 = __frm;
  if (!v5)
  {
    v6 = __frm;
    if (*(unsigned __int8 *)__frm == 254)
      v6 = &__frm[2 * (*((unsigned __int8 *)__frm + 1) == 255)];
  }
  if (__mx && v6 < __end - 1)
  {
    v7 = 1;
    do
    {
      v8 = *(unsigned __int8 *)v6;
      if ((v8 & 0xF8) == 0xD8)
        break;
      v9 = this->__maxcode_ >= (*((unsigned __int8 *)v6 + 1) | (v8 << 8));
      v6 += 2 * v9;
      v9 = !v9 || v6 >= __end - 1;
    }
    while (!v9 && v7++ < __mx);
  }
  return (_DWORD)v6 - (_DWORD)__frm;
}

int std::__codecvt_utf16<char16_t,false>::do_max_length(const std::__codecvt_utf16<char16_t, false> *this)
{
  if ((this->__mode_ & 4) != 0)
    return 4;
  else
    return 2;
}

std::codecvt_base::result std::__codecvt_utf16<char16_t,true>::do_out(const std::__codecvt_utf16<char16_t, true> *this, std::__codecvt_utf16<char16_t, true>::state_type *__st, const std::__codecvt_utf16<char16_t, true>::intern_type *__frm, const std::__codecvt_utf16<char16_t, true>::intern_type *__frm_end, const std::__codecvt_utf16<char16_t, true>::intern_type **__frm_nxt, std::__codecvt_utf16<char16_t, true>::extern_type *__to, std::__codecvt_utf16<char16_t, true>::extern_type *__to_end, std::__codecvt_utf16<char16_t, true>::extern_type **__to_nxt)
{
  unint64_t maxcode;
  std::codecvt_base::result result;
  int64_t v10;
  unint64_t v11;
  BOOL v13;
  unsigned int v14;
  std::__codecvt_utf16<char16_t, true>::extern_type *v15;

  maxcode = this->__maxcode_;
  if ((this->__mode_ & 2) != 0)
  {
    if (__to_end - __to < 2)
    {
LABEL_3:
      result = partial;
      goto LABEL_16;
    }
    *(_WORD *)__to = -257;
    __to += 2;
  }
  if (__frm >= __frm_end)
  {
    result = ok;
  }
  else
  {
    v10 = __to_end - __to;
    do
    {
      v11 = *(unsigned __int16 *)__frm;
      if ((v11 & 0xF800) == 0xD800 || maxcode < v11)
      {
        result = error;
        goto LABEL_16;
      }
      v13 = v10 < 2;
      v10 -= 2;
      if (v13)
        goto LABEL_3;
      *__to = v11;
      v14 = v11 >> 8;
      v15 = __to + 2;
      __to[1] = v14;
      ++__frm;
      __to += 2;
    }
    while (__frm < __frm_end);
    result = ok;
    __to = v15;
  }
LABEL_16:
  *__frm_nxt = __frm;
  *__to_nxt = __to;
  return result;
}

std::codecvt_base::result std::__codecvt_utf16<char16_t,true>::do_in(const std::__codecvt_utf16<char16_t, true> *this, std::__codecvt_utf16<char16_t, true>::state_type *__st, const std::__codecvt_utf16<char16_t, true>::extern_type *__frm, const std::__codecvt_utf16<char16_t, true>::extern_type *__frm_end, const std::__codecvt_utf16<char16_t, true>::extern_type **__frm_nxt, std::__codecvt_utf16<char16_t, true>::intern_type *__to, std::__codecvt_utf16<char16_t, true>::intern_type *__to_end, std::__codecvt_utf16<char16_t, true>::intern_type **__to_nxt)
{
  BOOL v8;
  unint64_t maxcode;
  int v10;
  std::codecvt_base::result result;

  v8 = __frm_end - __frm < 2 || (this->__mode_ & 4) == 0;
  if (!v8 && *(unsigned __int8 *)__frm == 255)
    __frm += 2 * (*((unsigned __int8 *)__frm + 1) == 254);
  if (__frm < __frm_end - 1)
  {
    maxcode = this->__maxcode_;
    while (__to < __to_end)
    {
      v10 = *((unsigned __int8 *)__frm + 1);
      if ((v10 & 0xF8) == 0xD8 || maxcode < (*(unsigned __int8 *)__frm | (v10 << 8)))
      {
        result = error;
        goto LABEL_17;
      }
      *__to++ = *(unsigned __int8 *)__frm | (unsigned __int16)((_WORD)v10 << 8);
      __frm += 2;
      if (__frm >= __frm_end - 1)
        break;
    }
  }
  result = __frm < __frm_end;
LABEL_17:
  *__frm_nxt = __frm;
  *__to_nxt = __to;
  return result;
}

std::codecvt_base::result std::__codecvt_utf16<char16_t,true>::do_unshift(const std::__codecvt_utf16<char16_t, true> *this, std::__codecvt_utf16<char16_t, true>::state_type *__st, std::__codecvt_utf16<char16_t, true>::extern_type *__to, std::__codecvt_utf16<char16_t, true>::extern_type *__to_end, std::__codecvt_utf16<char16_t, true>::extern_type **__to_nxt)
{
  *__to_nxt = __to;
  return 3;
}

int std::__codecvt_utf16<char16_t,true>::do_encoding(const std::__codecvt_utf16<char16_t, true> *this)
{
  return 0;
}

BOOL std::__codecvt_utf16<char16_t,true>::do_always_noconv(const std::__codecvt_utf16<char16_t, true> *this)
{
  return 0;
}

int std::__codecvt_utf16<char16_t,true>::do_length(const std::__codecvt_utf16<char16_t, true> *this, std::__codecvt_utf16<char16_t, true>::state_type *a2, const std::__codecvt_utf16<char16_t, true>::extern_type *__frm, const std::__codecvt_utf16<char16_t, true>::extern_type *__end, size_t __mx)
{
  BOOL v5;
  const std::__codecvt_utf16<char16_t, true>::extern_type *v6;
  size_t v7;
  int v8;
  BOOL v9;

  v5 = __end - __frm < 2 || (this->__mode_ & 4) == 0;
  v6 = __frm;
  if (!v5)
  {
    v6 = __frm;
    if (*(unsigned __int8 *)__frm == 255)
      v6 = &__frm[2 * (*((unsigned __int8 *)__frm + 1) == 254)];
  }
  if (__mx && v6 < __end - 1)
  {
    v7 = 1;
    do
    {
      v8 = *((unsigned __int8 *)v6 + 1);
      if ((v8 & 0xF8) == 0xD8)
        break;
      v9 = this->__maxcode_ >= (*(unsigned __int8 *)v6 | (v8 << 8));
      v6 += 2 * v9;
      v9 = !v9 || v6 >= __end - 1;
    }
    while (!v9 && v7++ < __mx);
  }
  return (_DWORD)v6 - (_DWORD)__frm;
}

int std::__codecvt_utf16<char16_t,true>::do_max_length(const std::__codecvt_utf16<char16_t, true> *this)
{
  if ((this->__mode_ & 4) != 0)
    return 4;
  else
    return 2;
}

std::codecvt_base::result std::__codecvt_utf16<char32_t,false>::do_out(const std::__codecvt_utf16<char32_t, false> *this, std::__codecvt_utf16<char32_t, false>::state_type *__st, const std::__codecvt_utf16<char32_t, false>::intern_type *__frm, const std::__codecvt_utf16<char32_t, false>::intern_type *__frm_end, const std::__codecvt_utf16<char32_t, false>::intern_type **__frm_nxt, std::__codecvt_utf16<char32_t, false>::extern_type *__to, std::__codecvt_utf16<char32_t, false>::extern_type *__to_end, std::__codecvt_utf16<char32_t, false>::extern_type **__to_nxt)
{
  std::codecvt_base::result result;
  std::codecvt_mode v11[2];
  unsigned int v12[2];

  *(_QWORD *)v12 = __frm;
  result = std::ucs4_to_utf16be((std::__1 *)__frm, (const unsigned int *)__frm_end, v12, (const unsigned int **)__to, (unsigned __int8 *)__to_end, (unsigned __int8 *)v11, (unsigned __int8 **)this->__maxcode_, this->__mode_, (std::codecvt_mode)__to);
  *__frm_nxt = *(const std::__codecvt_utf16<char32_t, false>::intern_type **)v12;
  *__to_nxt = *(std::__codecvt_utf16<char32_t, false>::extern_type **)v11;
  return result;
}

std::codecvt_base::result std::__codecvt_utf16<char32_t,false>::do_in(const std::__codecvt_utf16<char32_t, false> *this, std::__codecvt_utf16<char32_t, false>::state_type *__st, const std::__codecvt_utf16<char32_t, false>::extern_type *__frm, const std::__codecvt_utf16<char32_t, false>::extern_type *__frm_end, const std::__codecvt_utf16<char32_t, false>::extern_type **__frm_nxt, std::__codecvt_utf16<char32_t, false>::intern_type *__to, std::__codecvt_utf16<char32_t, false>::intern_type *__to_end, std::__codecvt_utf16<char32_t, false>::intern_type **__to_nxt)
{
  std::codecvt_base::result result;
  std::codecvt_mode v11[2];
  unsigned __int8 v12[8];

  *(_QWORD *)v12 = __frm;
  result = std::utf16be_to_ucs4((std::__1 *)__frm, (unsigned __int8 *)__frm_end, v12, (const unsigned __int8 **)__to, (unsigned int *)__to_end, (unsigned int *)v11, (unsigned int **)this->__maxcode_, this->__mode_, (std::codecvt_mode)__to);
  *__frm_nxt = *(const std::__codecvt_utf16<char32_t, false>::extern_type **)v12;
  *__to_nxt = *(std::__codecvt_utf16<char32_t, false>::intern_type **)v11;
  return result;
}

std::codecvt_base::result std::__codecvt_utf16<char32_t,false>::do_unshift(const std::__codecvt_utf16<char32_t, false> *this, std::__codecvt_utf16<char32_t, false>::state_type *__st, std::__codecvt_utf16<char32_t, false>::extern_type *__to, std::__codecvt_utf16<char32_t, false>::extern_type *__to_end, std::__codecvt_utf16<char32_t, false>::extern_type **__to_nxt)
{
  *__to_nxt = __to;
  return 3;
}

int std::__codecvt_utf16<char32_t,false>::do_encoding(const std::__codecvt_utf16<char32_t, false> *this)
{
  return 0;
}

BOOL std::__codecvt_utf16<char32_t,false>::do_always_noconv(const std::__codecvt_utf16<char32_t, false> *this)
{
  return 0;
}

int std::__codecvt_utf16<char32_t,false>::do_length(const std::__codecvt_utf16<char32_t, false> *this, std::__codecvt_utf16<char32_t, false>::state_type *a2, const std::__codecvt_utf16<char32_t, false>::extern_type *__frm, const std::__codecvt_utf16<char32_t, false>::extern_type *__end, size_t __mx)
{
  std::codecvt_mode v5;

  return std::utf16be_to_ucs4_length((std::__1 *)__frm, (const unsigned __int8 *)__end, (const unsigned __int8 *)__mx, this->__maxcode_, this->__mode_, v5);
}

int std::__codecvt_utf16<char32_t,false>::do_max_length(const std::__codecvt_utf16<char32_t, false> *this)
{
  if ((this->__mode_ & 4) != 0)
    return 6;
  else
    return 4;
}

std::codecvt_base::result std::__codecvt_utf16<char32_t,true>::do_out(const std::__codecvt_utf16<char32_t, true> *this, std::__codecvt_utf16<char32_t, true>::state_type *__st, const std::__codecvt_utf16<char32_t, true>::intern_type *__frm, const std::__codecvt_utf16<char32_t, true>::intern_type *__frm_end, const std::__codecvt_utf16<char32_t, true>::intern_type **__frm_nxt, std::__codecvt_utf16<char32_t, true>::extern_type *__to, std::__codecvt_utf16<char32_t, true>::extern_type *__to_end, std::__codecvt_utf16<char32_t, true>::extern_type **__to_nxt)
{
  std::codecvt_base::result result;
  std::codecvt_mode v11[2];
  unsigned int v12[2];

  *(_QWORD *)v12 = __frm;
  result = std::ucs4_to_utf16le((std::__1 *)__frm, (const unsigned int *)__frm_end, v12, (const unsigned int **)__to, (unsigned __int8 *)__to_end, (unsigned __int8 *)v11, (unsigned __int8 **)this->__maxcode_, this->__mode_, (std::codecvt_mode)__to);
  *__frm_nxt = *(const std::__codecvt_utf16<char32_t, true>::intern_type **)v12;
  *__to_nxt = *(std::__codecvt_utf16<char32_t, true>::extern_type **)v11;
  return result;
}

std::codecvt_base::result std::__codecvt_utf16<char32_t,true>::do_in(const std::__codecvt_utf16<char32_t, true> *this, std::__codecvt_utf16<char32_t, true>::state_type *__st, const std::__codecvt_utf16<char32_t, true>::extern_type *__frm, const std::__codecvt_utf16<char32_t, true>::extern_type *__frm_end, const std::__codecvt_utf16<char32_t, true>::extern_type **__frm_nxt, std::__codecvt_utf16<char32_t, true>::intern_type *__to, std::__codecvt_utf16<char32_t, true>::intern_type *__to_end, std::__codecvt_utf16<char32_t, true>::intern_type **__to_nxt)
{
  std::codecvt_base::result result;
  std::codecvt_mode v11[2];
  unsigned __int8 v12[8];

  *(_QWORD *)v12 = __frm;
  result = std::utf16le_to_ucs4((std::__1 *)__frm, (unsigned __int8 *)__frm_end, v12, (const unsigned __int8 **)__to, (unsigned int *)__to_end, (unsigned int *)v11, (unsigned int **)this->__maxcode_, this->__mode_, (std::codecvt_mode)__to);
  *__frm_nxt = *(const std::__codecvt_utf16<char32_t, true>::extern_type **)v12;
  *__to_nxt = *(std::__codecvt_utf16<char32_t, true>::intern_type **)v11;
  return result;
}

std::codecvt_base::result std::__codecvt_utf16<char32_t,true>::do_unshift(const std::__codecvt_utf16<char32_t, true> *this, std::__codecvt_utf16<char32_t, true>::state_type *__st, std::__codecvt_utf16<char32_t, true>::extern_type *__to, std::__codecvt_utf16<char32_t, true>::extern_type *__to_end, std::__codecvt_utf16<char32_t, true>::extern_type **__to_nxt)
{
  *__to_nxt = __to;
  return 3;
}

int std::__codecvt_utf16<char32_t,true>::do_encoding(const std::__codecvt_utf16<char32_t, true> *this)
{
  return 0;
}

BOOL std::__codecvt_utf16<char32_t,true>::do_always_noconv(const std::__codecvt_utf16<char32_t, true> *this)
{
  return 0;
}

int std::__codecvt_utf16<char32_t,true>::do_length(const std::__codecvt_utf16<char32_t, true> *this, std::__codecvt_utf16<char32_t, true>::state_type *a2, const std::__codecvt_utf16<char32_t, true>::extern_type *__frm, const std::__codecvt_utf16<char32_t, true>::extern_type *__end, size_t __mx)
{
  std::codecvt_mode v5;

  return std::utf16le_to_ucs4_length((std::__1 *)__frm, (const unsigned __int8 *)__end, (const unsigned __int8 *)__mx, this->__maxcode_, this->__mode_, v5);
}

int std::__codecvt_utf16<char32_t,true>::do_max_length(const std::__codecvt_utf16<char32_t, true> *this)
{
  if ((this->__mode_ & 4) != 0)
    return 6;
  else
    return 4;
}

std::codecvt_base::result std::__codecvt_utf8_utf16<wchar_t>::do_out(const std::__codecvt_utf8_utf16<wchar_t> *this, std::__codecvt_utf8_utf16<wchar_t>::state_type *__st, const std::__codecvt_utf8_utf16<wchar_t>::intern_type *__frm, const std::__codecvt_utf8_utf16<wchar_t>::intern_type *__frm_end, const std::__codecvt_utf8_utf16<wchar_t>::intern_type **__frm_nxt, std::__codecvt_utf8_utf16<wchar_t>::extern_type *__to, std::__codecvt_utf8_utf16<wchar_t>::extern_type *__to_end, std::__codecvt_utf8_utf16<wchar_t>::extern_type **__to_nxt)
{
  std::codecvt_base::result result;
  std::codecvt_mode v11[2];
  unsigned int v12[2];

  *(_QWORD *)v12 = __frm;
  result = std::utf16_to_utf8((std::__1 *)__frm, (char *)__frm_end, v12, (const unsigned int **)__to, (unsigned __int8 *)__to_end, (unsigned __int8 *)v11, (unsigned __int8 **)this->__maxcode_, this->__mode_, (std::codecvt_mode)__to);
  *__frm_nxt = *(const std::__codecvt_utf8_utf16<wchar_t>::intern_type **)v12;
  *__to_nxt = *(std::__codecvt_utf8_utf16<wchar_t>::extern_type **)v11;
  return result;
}

uint64_t std::utf16_to_utf8(std::__1 *this, char *a2, unsigned int *a3, const unsigned int **a4, unsigned __int8 *a5, unsigned __int8 *a6, unsigned __int8 **a7, char a8, std::codecvt_mode a9)
{
  _BYTE *v10;
  _BYTE *v11;
  char *v12;
  unsigned int v13;
  unint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  _DWORD *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  _BYTE *v21;
  _BYTE *v22;
  _BYTE *v23;
  _BYTE *v24;
  _BYTE *v25;
  _BYTE *v26;
  char v27;
  _BYTE *v28;

  *(_QWORD *)a3 = this;
  *(_QWORD *)a6 = a4;
  if ((a8 & 2) != 0)
  {
    if (a5 - (unsigned __int8 *)a4 < 3)
      return 1;
    *(_QWORD *)a6 = (char *)a4 + 1;
    *(_BYTE *)a4 = -17;
    v10 = (_BYTE *)(*(_QWORD *)a6)++;
    *v10 = -69;
    v11 = (_BYTE *)(*(_QWORD *)a6)++;
    *v11 = -65;
  }
  v12 = *(char **)a3;
  if (*(_QWORD *)a3 >= (unint64_t)a2)
    return 0;
  while (1)
  {
    v13 = *(_DWORD *)v12;
    v14 = (unsigned __int16)*(_DWORD *)v12;
    if (v14 > (unint64_t)a7)
      return 2;
    if (v14 <= 0x7F)
    {
      v15 = *(_BYTE **)a6;
      if ((uint64_t)&a5[-*(_QWORD *)a6] < 1)
        return 1;
      *(_QWORD *)a6 = v15 + 1;
      *v15 = v13;
      goto LABEL_24;
    }
    if (v14 <= 0x7FF)
    {
      v16 = *(_BYTE **)a6;
      if ((uint64_t)&a5[-*(_QWORD *)a6] < 2)
        return 1;
      *(_QWORD *)a6 = v16 + 1;
      *v16 = (v13 >> 6) | 0xC0;
      goto LABEL_23;
    }
    if (v14 >> 11 <= 0x1A)
      goto LABEL_21;
    if (v14 >> 10 > 0x36)
    {
      if (v14 < 0xE000)
        return 2;
LABEL_21:
      v25 = *(_BYTE **)a6;
      if ((uint64_t)&a5[-*(_QWORD *)a6] < 3)
        return 1;
      *(_QWORD *)a6 = v25 + 1;
      *v25 = (v14 >> 12) | 0xE0;
      v26 = (_BYTE *)(*(_QWORD *)a6)++;
      *v26 = (v13 >> 6) & 0x3F | 0x80;
LABEL_23:
      v27 = v13 & 0x3F | 0x80;
      v28 = (_BYTE *)(*(_QWORD *)a6)++;
      *v28 = v27;
      goto LABEL_24;
    }
    if (a2 - v12 < 8)
      return 1;
    v19 = *((_DWORD *)v12 + 1);
    v17 = v12 + 4;
    v18 = v19;
    if ((v19 & 0xFC00) != 0xDC00)
      return 2;
    if ((uint64_t)&a5[-*(_QWORD *)a6] < 4)
      return 1;
    if ((v18 & 0x3FF | ((v14 & 0x3FF) << 10)) + 0x10000 > (unint64_t)a7)
      return 2;
    *(_QWORD *)a3 = v17;
    v20 = ((v13 >> 6) & 0xF) + 1;
    v21 = (_BYTE *)(*(_QWORD *)a6)++;
    *v21 = (v20 >> 2) | 0xF0;
    v22 = (_BYTE *)(*(_QWORD *)a6)++;
    *v22 = (v13 >> 2) & 0xF | (16 * (v20 & 3)) | 0x80;
    v23 = (_BYTE *)(*(_QWORD *)a6)++;
    *v23 = (16 * (v13 & 3)) | (v18 >> 6) & 0xF | 0x80;
    v24 = (_BYTE *)(*(_QWORD *)a6)++;
    *v24 = v18 & 0x3F | 0x80;
LABEL_24:
    v12 = (char *)(*(_QWORD *)a3 + 4);
    *(_QWORD *)a3 = v12;
    if (v12 >= a2)
      return 0;
  }
}

std::codecvt_base::result std::__codecvt_utf8_utf16<wchar_t>::do_in(const std::__codecvt_utf8_utf16<wchar_t> *this, std::__codecvt_utf8_utf16<wchar_t>::state_type *__st, const std::__codecvt_utf8_utf16<wchar_t>::extern_type *__frm, const std::__codecvt_utf8_utf16<wchar_t>::extern_type *__frm_end, const std::__codecvt_utf8_utf16<wchar_t>::extern_type **__frm_nxt, std::__codecvt_utf8_utf16<wchar_t>::intern_type *__to, std::__codecvt_utf8_utf16<wchar_t>::intern_type *__to_end, std::__codecvt_utf8_utf16<wchar_t>::intern_type **__to_nxt)
{
  std::codecvt_base::result result;
  std::codecvt_mode v11[2];
  unsigned __int8 v12[8];

  *(_QWORD *)v12 = __frm;
  result = std::utf8_to_utf16((std::__1 *)__frm, (unsigned __int8 *)__frm_end, v12, (const unsigned __int8 **)__to, (char *)__to_end, (unsigned int *)v11, (unsigned int **)this->__maxcode_, this->__mode_, (std::codecvt_mode)__to);
  *__frm_nxt = *(const std::__codecvt_utf8_utf16<wchar_t>::extern_type **)v12;
  *__to_nxt = *(std::__codecvt_utf8_utf16<wchar_t>::intern_type **)v11;
  return result;
}

uint64_t std::utf8_to_utf16(std::__1 *this, unsigned __int8 *a2, unsigned __int8 *a3, const unsigned __int8 **a4, char *a5, unsigned int *a6, unsigned int **a7, char a8, std::codecvt_mode a9)
{
  unsigned __int8 *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  unint64_t v14;
  unsigned __int8 v15;
  const unsigned __int8 *v16;
  unsigned int v17;
  int v18;
  unsigned __int8 v19;
  unint64_t v20;
  int v21;
  unsigned int v22;
  unsigned __int8 v23;

  *(_QWORD *)a3 = this;
  *(_QWORD *)a6 = a4;
  v9 = *(unsigned __int8 **)a3;
  if ((a8 & 4) != 0 && a2 - v9 >= 3 && *v9 == 239 && v9[1] == 187 && v9[2] == 191)
  {
    v9 += 3;
    *(_QWORD *)a3 = v9;
  }
  if (v9 >= a2)
    return 0;
  v10 = *(char **)a6;
  while (v10 < a5)
  {
    v11 = *v9;
    if (v11 > (unint64_t)a7)
      return 2;
    if ((v11 & 0x80) == 0)
    {
      *(_DWORD *)v10 = v11;
      v12 = (uint64_t)(v9 + 1);
      goto LABEL_48;
    }
    if (v11 < 0xC2)
      return 2;
    if (v11 <= 0xDF)
    {
      if (a2 - v9 < 2)
        return 1;
      v13 = v9[1];
      if ((v13 & 0xC0) != 0x80)
        return 2;
      v14 = v13 & 0x3F | ((v11 & 0x1F) << 6);
      if (v14 > (unint64_t)a7)
        return 2;
      *(_DWORD *)v10 = v14;
      v12 = (uint64_t)(v9 + 2);
      goto LABEL_48;
    }
    if (v11 <= 0xEF)
    {
      if (a2 - v9 < 2)
        return 1;
      v15 = v9[1];
      if ((_DWORD)v11 == 237)
      {
        v18 = v15 & 0xE0;
      }
      else
      {
        if ((_DWORD)v11 == 224)
        {
          if ((v15 & 0xE0) != 0xA0)
            return 2;
LABEL_34:
          if ((unint64_t)(a2 - v9) < 3)
            return 1;
          v19 = v9[2];
          if ((v19 & 0xC0) != 0x80)
            return 2;
          v20 = ((v11 & 0xF) << 12) | ((v15 & 0x3F) << 6) | v19 & 0x3F;
          if (v20 > (unint64_t)a7)
            return 2;
          *(_DWORD *)v10 = v20;
          v12 = (uint64_t)(v9 + 3);
          goto LABEL_48;
        }
        v18 = v15 & 0xC0;
      }
      if (v18 != 128)
        return 2;
      goto LABEL_34;
    }
    if (v11 > 0xF4)
      return 2;
    v16 = (const unsigned __int8 *)(a2 - v9);
    if (a2 - v9 < 2)
      return 1;
    v17 = v9[1];
    if ((_DWORD)v11 == 244)
    {
      v21 = v17 & 0xF0;
      goto LABEL_40;
    }
    if ((_DWORD)v11 != 240)
    {
      v21 = v17 & 0xC0;
LABEL_40:
      if (v21 != 128)
        return 2;
      goto LABEL_41;
    }
    if ((v17 + 112) >= 0x30u)
      return 2;
LABEL_41:
    if ((unint64_t)v16 < 3)
      return 1;
    v22 = v9[2];
    if ((v22 & 0xC0) != 0x80)
      return 2;
    if ((unint64_t)v16 < 4)
      return 1;
    v23 = v9[3];
    if ((v23 & 0xC0) != 0x80)
      return 2;
    if (a5 - v10 < 8)
      return 1;
    if ((((v11 & 7) << 18) | ((unint64_t)(v17 & 0x3F) << 12) | ((unint64_t)(v22 & 0x3F) << 6) | v23 & 0x3F) > (unint64_t)a7)
      return 2;
    *(_DWORD *)v10 = (((4 * (v17 & 0xF)) | (((4 * (v11 & 7)) | (v17 >> 4) & 3) << 6) | (v22 >> 4) & 3) - 64) | 0xD800;
    *((_DWORD *)v10 + 1) = v23 & 0x3F | ((v22 & 0xF) << 6) | 0xDC00;
    *(_QWORD *)a6 = v10 + 4;
    v12 = *(_QWORD *)a3 + 4;
LABEL_48:
    *(_QWORD *)a3 = v12;
    v10 = (char *)(*(_QWORD *)a6 + 4);
    *(_QWORD *)a6 = v10;
    v9 = *(unsigned __int8 **)a3;
    if (*(_QWORD *)a3 >= (unint64_t)a2)
      return 0;
  }
  return 1;
}

std::codecvt_base::result std::__codecvt_utf8_utf16<wchar_t>::do_unshift(const std::__codecvt_utf8_utf16<wchar_t> *this, std::__codecvt_utf8_utf16<wchar_t>::state_type *__st, std::__codecvt_utf8_utf16<wchar_t>::extern_type *__to, std::__codecvt_utf8_utf16<wchar_t>::extern_type *__to_end, std::__codecvt_utf8_utf16<wchar_t>::extern_type **__to_nxt)
{
  *__to_nxt = __to;
  return 3;
}

int std::__codecvt_utf8_utf16<wchar_t>::do_encoding(const std::__codecvt_utf8_utf16<wchar_t> *this)
{
  return 0;
}

BOOL std::__codecvt_utf8_utf16<wchar_t>::do_always_noconv(const std::__codecvt_utf8_utf16<wchar_t> *this)
{
  return 0;
}

int std::__codecvt_utf8_utf16<wchar_t>::do_length(const std::__codecvt_utf8_utf16<wchar_t> *this, std::__codecvt_utf8_utf16<wchar_t>::state_type *a2, const std::__codecvt_utf8_utf16<wchar_t>::extern_type *__frm, const std::__codecvt_utf8_utf16<wchar_t>::extern_type *__end, size_t __mx)
{
  std::codecvt_mode v5;

  return std::utf8_to_utf16_length((std::__1 *)__frm, (const unsigned __int8 *)__end, (const unsigned __int8 *)__mx, this->__maxcode_, this->__mode_, v5);
}

int std::__codecvt_utf8_utf16<wchar_t>::do_max_length(const std::__codecvt_utf8_utf16<wchar_t> *this)
{
  if ((this->__mode_ & 4) != 0)
    return 7;
  else
    return 4;
}

std::codecvt_base::result std::__codecvt_utf8_utf16<char16_t>::do_out(const std::__codecvt_utf8_utf16<char16_t> *this, std::__codecvt_utf8_utf16<char16_t>::state_type *__st, const std::__codecvt_utf8_utf16<char16_t>::intern_type *__frm, const std::__codecvt_utf8_utf16<char16_t>::intern_type *__frm_end, const std::__codecvt_utf8_utf16<char16_t>::intern_type **__frm_nxt, std::__codecvt_utf8_utf16<char16_t>::extern_type *__to, std::__codecvt_utf8_utf16<char16_t>::extern_type *__to_end, std::__codecvt_utf8_utf16<char16_t>::extern_type **__to_nxt)
{
  std::codecvt_base::result result;
  std::codecvt_mode v11[2];
  unsigned __int16 v12[4];

  *(_QWORD *)v12 = __frm;
  result = std::utf16_to_utf8((std::__1 *)__frm, (char *)__frm_end, v12, (const unsigned __int16 **)__to, (unsigned __int8 *)__to_end, (unsigned __int8 *)v11, (unsigned __int8 **)this->__maxcode_, this->__mode_, (std::codecvt_mode)__to);
  *__frm_nxt = *(const std::__codecvt_utf8_utf16<char16_t>::intern_type **)v12;
  *__to_nxt = *(std::__codecvt_utf8_utf16<char16_t>::extern_type **)v11;
  return result;
}

std::codecvt_base::result std::__codecvt_utf8_utf16<char16_t>::do_in(const std::__codecvt_utf8_utf16<char16_t> *this, std::__codecvt_utf8_utf16<char16_t>::state_type *__st, const std::__codecvt_utf8_utf16<char16_t>::extern_type *__frm, const std::__codecvt_utf8_utf16<char16_t>::extern_type *__frm_end, const std::__codecvt_utf8_utf16<char16_t>::extern_type **__frm_nxt, std::__codecvt_utf8_utf16<char16_t>::intern_type *__to, std::__codecvt_utf8_utf16<char16_t>::intern_type *__to_end, std::__codecvt_utf8_utf16<char16_t>::intern_type **__to_nxt)
{
  std::codecvt_base::result result;
  std::codecvt_mode v11[2];
  unsigned __int8 v12[8];

  *(_QWORD *)v12 = __frm;
  result = std::utf8_to_utf16((std::__1 *)__frm, (unsigned __int8 *)__frm_end, v12, (const unsigned __int8 **)__to, (char *)__to_end, (unsigned __int16 *)v11, (unsigned __int16 **)this->__maxcode_, this->__mode_, (std::codecvt_mode)__to);
  *__frm_nxt = *(const std::__codecvt_utf8_utf16<char16_t>::extern_type **)v12;
  *__to_nxt = *(std::__codecvt_utf8_utf16<char16_t>::intern_type **)v11;
  return result;
}

std::codecvt_base::result std::__codecvt_utf8_utf16<char16_t>::do_unshift(const std::__codecvt_utf8_utf16<char16_t> *this, std::__codecvt_utf8_utf16<char16_t>::state_type *__st, std::__codecvt_utf8_utf16<char16_t>::extern_type *__to, std::__codecvt_utf8_utf16<char16_t>::extern_type *__to_end, std::__codecvt_utf8_utf16<char16_t>::extern_type **__to_nxt)
{
  *__to_nxt = __to;
  return 3;
}

int std::__codecvt_utf8_utf16<char16_t>::do_encoding(const std::__codecvt_utf8_utf16<char16_t> *this)
{
  return 0;
}

BOOL std::__codecvt_utf8_utf16<char16_t>::do_always_noconv(const std::__codecvt_utf8_utf16<char16_t> *this)
{
  return 0;
}

int std::__codecvt_utf8_utf16<char16_t>::do_length(const std::__codecvt_utf8_utf16<char16_t> *this, std::__codecvt_utf8_utf16<char16_t>::state_type *a2, const std::__codecvt_utf8_utf16<char16_t>::extern_type *__frm, const std::__codecvt_utf8_utf16<char16_t>::extern_type *__end, size_t __mx)
{
  std::codecvt_mode v5;

  return std::utf8_to_utf16_length((std::__1 *)__frm, (const unsigned __int8 *)__end, (const unsigned __int8 *)__mx, this->__maxcode_, this->__mode_, v5);
}

int std::__codecvt_utf8_utf16<char16_t>::do_max_length(const std::__codecvt_utf8_utf16<char16_t> *this)
{
  if ((this->__mode_ & 4) != 0)
    return 7;
  else
    return 4;
}

std::codecvt_base::result std::__codecvt_utf8_utf16<char32_t>::do_out(const std::__codecvt_utf8_utf16<char32_t> *this, std::__codecvt_utf8_utf16<char32_t>::state_type *__st, const std::__codecvt_utf8_utf16<char32_t>::intern_type *__frm, const std::__codecvt_utf8_utf16<char32_t>::intern_type *__frm_end, const std::__codecvt_utf8_utf16<char32_t>::intern_type **__frm_nxt, std::__codecvt_utf8_utf16<char32_t>::extern_type *__to, std::__codecvt_utf8_utf16<char32_t>::extern_type *__to_end, std::__codecvt_utf8_utf16<char32_t>::extern_type **__to_nxt)
{
  std::codecvt_base::result result;
  std::codecvt_mode v11[2];
  unsigned int v12[2];

  *(_QWORD *)v12 = __frm;
  result = std::utf16_to_utf8((std::__1 *)__frm, (char *)__frm_end, v12, (const unsigned int **)__to, (unsigned __int8 *)__to_end, (unsigned __int8 *)v11, (unsigned __int8 **)this->__maxcode_, this->__mode_, (std::codecvt_mode)__to);
  *__frm_nxt = *(const std::__codecvt_utf8_utf16<char32_t>::intern_type **)v12;
  *__to_nxt = *(std::__codecvt_utf8_utf16<char32_t>::extern_type **)v11;
  return result;
}

std::codecvt_base::result std::__codecvt_utf8_utf16<char32_t>::do_in(const std::__codecvt_utf8_utf16<char32_t> *this, std::__codecvt_utf8_utf16<char32_t>::state_type *__st, const std::__codecvt_utf8_utf16<char32_t>::extern_type *__frm, const std::__codecvt_utf8_utf16<char32_t>::extern_type *__frm_end, const std::__codecvt_utf8_utf16<char32_t>::extern_type **__frm_nxt, std::__codecvt_utf8_utf16<char32_t>::intern_type *__to, std::__codecvt_utf8_utf16<char32_t>::intern_type *__to_end, std::__codecvt_utf8_utf16<char32_t>::intern_type **__to_nxt)
{
  std::codecvt_base::result result;
  std::codecvt_mode v11[2];
  unsigned __int8 v12[8];

  *(_QWORD *)v12 = __frm;
  result = std::utf8_to_utf16((std::__1 *)__frm, (unsigned __int8 *)__frm_end, v12, (const unsigned __int8 **)__to, (char *)__to_end, (unsigned int *)v11, (unsigned int **)this->__maxcode_, this->__mode_, (std::codecvt_mode)__to);
  *__frm_nxt = *(const std::__codecvt_utf8_utf16<char32_t>::extern_type **)v12;
  *__to_nxt = *(std::__codecvt_utf8_utf16<char32_t>::intern_type **)v11;
  return result;
}

std::codecvt_base::result std::__codecvt_utf8_utf16<char32_t>::do_unshift(const std::__codecvt_utf8_utf16<char32_t> *this, std::__codecvt_utf8_utf16<char32_t>::state_type *__st, std::__codecvt_utf8_utf16<char32_t>::extern_type *__to, std::__codecvt_utf8_utf16<char32_t>::extern_type *__to_end, std::__codecvt_utf8_utf16<char32_t>::extern_type **__to_nxt)
{
  *__to_nxt = __to;
  return 3;
}

int std::__codecvt_utf8_utf16<char32_t>::do_encoding(const std::__codecvt_utf8_utf16<char32_t> *this)
{
  return 0;
}

BOOL std::__codecvt_utf8_utf16<char32_t>::do_always_noconv(const std::__codecvt_utf8_utf16<char32_t> *this)
{
  return 0;
}

int std::__codecvt_utf8_utf16<char32_t>::do_length(const std::__codecvt_utf8_utf16<char32_t> *this, std::__codecvt_utf8_utf16<char32_t>::state_type *a2, const std::__codecvt_utf8_utf16<char32_t>::extern_type *__frm, const std::__codecvt_utf8_utf16<char32_t>::extern_type *__end, size_t __mx)
{
  std::codecvt_mode v5;

  return std::utf8_to_utf16_length((std::__1 *)__frm, (const unsigned __int8 *)__end, (const unsigned __int8 *)__mx, this->__maxcode_, this->__mode_, v5);
}

int std::__codecvt_utf8_utf16<char32_t>::do_max_length(const std::__codecvt_utf8_utf16<char32_t> *this)
{
  if ((this->__mode_ & 4) != 0)
    return 7;
  else
    return 4;
}

void std::__narrow_to_utf8<16ul>::~__narrow_to_utf8(std::__narrow_to_utf8<16> *this)
{
  std::__shared_count::~__shared_count(this);
  JUMPOUT(0x194021E38);
}

void std::__narrow_to_utf8<32ul>::~__narrow_to_utf8(std::__narrow_to_utf8<32> *this)
{
  std::__shared_count::~__shared_count(this);
  JUMPOUT(0x194021E38);
}

void std::__widen_from_utf8<16ul>::~__widen_from_utf8(std::__widen_from_utf8<16> *this)
{
  std::__shared_count::~__shared_count(this);
  JUMPOUT(0x194021E38);
}

void std::__widen_from_utf8<32ul>::~__widen_from_utf8(std::__widen_from_utf8<32> *this)
{
  std::__shared_count::~__shared_count(this);
  JUMPOUT(0x194021E38);
}

std::numpunct<char> *__cdecl std::numpunct<char>::numpunct(std::numpunct<char> *this, size_t __refs)
{
  this->__shared_owners_ = __refs - 1;
  *(_WORD *)&this->__decimal_point_ = 11310;
  *(_OWORD *)&this->__grouping_.__r_.__value_.__r.__words[1] = 0uLL;
  this->__grouping_.__r_.__value_.__r.__words[0] = 0;
  return this;
}

{
  this->__shared_owners_ = __refs - 1;
  *(_WORD *)&this->__decimal_point_ = 11310;
  *(_OWORD *)&this->__grouping_.__r_.__value_.__r.__words[1] = 0uLL;
  this->__grouping_.__r_.__value_.__r.__words[0] = 0;
  return this;
}

std::numpunct<wchar_t> *__cdecl std::numpunct<wchar_t>::numpunct(std::numpunct<wchar_t> *this, size_t __refs)
{
  this->__shared_owners_ = __refs - 1;
  *(_QWORD *)&this->__decimal_point_ = 0x2C0000002ELL;
  *(_OWORD *)&this->__grouping_.__r_.__value_.__r.__words[1] = 0uLL;
  this->__grouping_.__r_.__value_.__r.__words[0] = 0;
  return this;
}

{
  this->__shared_owners_ = __refs - 1;
  *(_QWORD *)&this->__decimal_point_ = 0x2C0000002ELL;
  *(_OWORD *)&this->__grouping_.__r_.__value_.__r.__words[1] = 0uLL;
  this->__grouping_.__r_.__value_.__r.__words[0] = 0;
  return this;
}

void std::numpunct<char>::~numpunct(std::numpunct<char> *this)
{
  if (SHIBYTE(this->__grouping_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(this->__grouping_.__r_.__value_.__l.__data_);
  std::__shared_count::~__shared_count(this);
}

{
  std::numpunct<char>::~numpunct(this);
  JUMPOUT(0x194021E38);
}

void std::numpunct<wchar_t>::~numpunct(std::numpunct<wchar_t> *this)
{
  if (SHIBYTE(this->__grouping_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(this->__grouping_.__r_.__value_.__l.__data_);
  std::__shared_count::~__shared_count(this);
}

{
  std::numpunct<wchar_t>::~numpunct(this);
  JUMPOUT(0x194021E38);
}

std::numpunct<char>::char_type std::numpunct<char>::do_decimal_point(const std::numpunct<char> *this)
{
  return this->__decimal_point_;
}

std::numpunct<wchar_t>::char_type std::numpunct<wchar_t>::do_decimal_point(const std::numpunct<wchar_t> *this)
{
  return this->__decimal_point_;
}

std::numpunct<char>::char_type std::numpunct<char>::do_thousands_sep(const std::numpunct<char> *this)
{
  return this->__thousands_sep_;
}

std::numpunct<wchar_t>::char_type std::numpunct<wchar_t>::do_thousands_sep(const std::numpunct<wchar_t> *this)
{
  return this->__thousands_sep_;
}

std::string *__cdecl std::numpunct<char>::do_grouping(std::string *__return_ptr retstr, std::string *this)
{
  if (SHIBYTE(this[1].__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(retstr, this[1].__r_.__value_.__l.__data_, this[1].__r_.__value_.__l.__size_);
  else
    *retstr = this[1];
  return this;
}

std::string *__cdecl std::numpunct<wchar_t>::do_grouping(std::string *__return_ptr retstr, std::string *this)
{
  if (SHIBYTE(this[1].__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(retstr, this[1].__r_.__value_.__l.__data_, this[1].__r_.__value_.__l.__size_);
  else
    *retstr = this[1];
  return this;
}

std::numpunct<char>::string_type *__cdecl std::numpunct<char>::do_truename(std::numpunct<char>::string_type *__return_ptr retstr, const std::numpunct<char> *this)
{
  return (std::numpunct<char>::string_type *)std::string::basic_string[abi:ne180100]<0>(retstr, "true");
}

std::numpunct<wchar_t>::string_type *__cdecl std::numpunct<wchar_t>::do_truename(std::numpunct<wchar_t>::string_type *__return_ptr retstr, const std::numpunct<wchar_t> *this)
{
  return (std::numpunct<wchar_t>::string_type *)std::wstring::basic_string[abi:ne180100]<0>((uint64_t)retstr, dword_1920260D8);
}

std::numpunct<char>::string_type *__cdecl std::numpunct<char>::do_falsename(std::numpunct<char>::string_type *__return_ptr retstr, const std::numpunct<char> *this)
{
  return (std::numpunct<char>::string_type *)std::string::basic_string[abi:ne180100]<0>(retstr, "false");
}

std::numpunct<wchar_t>::string_type *__cdecl std::numpunct<wchar_t>::do_falsename(std::numpunct<wchar_t>::string_type *__return_ptr retstr, const std::numpunct<wchar_t> *this)
{
  return (std::numpunct<wchar_t>::string_type *)std::wstring::basic_string[abi:ne180100]<0>((uint64_t)retstr, dword_1920260EC);
}

std::numpunct_byname<char> *__cdecl std::numpunct_byname<char>::numpunct_byname(std::numpunct_byname<char> *this, const char *__nm, size_t __refs)
{
  *(_WORD *)&this->__decimal_point_ = 11310;
  *(_OWORD *)&this->__grouping_.__r_.__value_.__r.__words[1] = 0uLL;
  this->__grouping_.__r_.__value_.__r.__words[0] = 0;
  this->__shared_owners_ = __refs - 1;
  std::numpunct_byname<char>::__init(this, __nm);
  return this;
}

void sub_191FF73AC(_Unwind_Exception *a1)
{
  std::numpunct<char> *v1;

  std::numpunct<char>::~numpunct(v1);
  _Unwind_Resume(a1);
}

void std::numpunct_byname<char>::__init(std::numpunct_byname<char> *this, const char *a2)
{
  _xlocale *v4;
  lconv *v5;
  _xlocale *v6;
  _xlocale *v7;
  std::string *v8;
  std::string v9;
  std::string v10;
  _xlocale *v11;

  if (strcmp(a2, "C"))
  {
    v4 = newlocale(63, a2, 0);
    v11 = v4;
    if (!v4)
    {
      std::string::basic_string[abi:ne180100]<0>(&v9, (char *)a2);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("numpunct_byname<char>::numpunct_byname failed to construct for ", &v9, &v10);
      if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v8 = &v10;
      else
        v8 = (std::string *)v10.__r_.__value_.__r.__words[0];
      std::__throw_runtime_error((const char *)v8);
    }
    v5 = localeconv_l(v4);
    std::checked_string_to_char_convert((std::__1 *)&this->__decimal_point_, v5->decimal_point, v11, v6);
    std::checked_string_to_char_convert((std::__1 *)&this->__thousands_sep_, v5->thousands_sep, v11, v7);
    std::string::__assign_external(&this->__grouping_, v5->grouping);
    std::__libcpp_unique_locale::~__libcpp_unique_locale(&v11);
  }
}

void sub_191FF748C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  std::__libcpp_unique_locale::~__libcpp_unique_locale((_xlocale **)(v21 - 24));
  _Unwind_Resume(a1);
}

std::numpunct_byname<char> *__cdecl std::numpunct_byname<char>::numpunct_byname(std::numpunct_byname<char> *this, const std::string *__nm, size_t __refs)
{
  *(_WORD *)&this->__decimal_point_ = 11310;
  *(_OWORD *)&this->__grouping_.__r_.__value_.__r.__words[1] = 0uLL;
  this->__grouping_.__r_.__value_.__r.__words[0] = 0;
  this->__shared_owners_ = __refs - 1;
  if ((__nm->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    __nm = (const std::string *)__nm->__r_.__value_.__r.__words[0];
  std::numpunct_byname<char>::__init(this, (const char *)__nm);
  return this;
}

void sub_191FF752C(_Unwind_Exception *a1)
{
  std::numpunct<char> *v1;

  std::numpunct<char>::~numpunct(v1);
  _Unwind_Resume(a1);
}

void std::numpunct_byname<char>::~numpunct_byname(std::numpunct_byname<char> *this)
{
  std::numpunct<char>::~numpunct(this);
  JUMPOUT(0x194021E38);
}

BOOL std::checked_string_to_char_convert(std::__1 *this, char *a2, _xlocale *a3, _xlocale *a4)
{
  _BOOL8 result;
  wint_t v7;
  int v8;
  wint_t v9;

  if (*a2)
  {
    if (a2[1])
    {
      result = std::checked_string_to_wchar_convert(&v9, a2, a3);
      if (!result)
        return result;
      v7 = v9;
      v8 = wctob_l(v9, a3);
      if (v8 == -1)
      {
        LOBYTE(v8) = 32;
        if (v7 != 8239 && v7 != 160)
          return 0;
      }
      *(_BYTE *)this = v8;
    }
    else
    {
      *(_BYTE *)this = *a2;
    }
    return 1;
  }
  return 0;
}

std::numpunct_byname<wchar_t> *__cdecl std::numpunct_byname<wchar_t>::numpunct_byname(std::numpunct_byname<wchar_t> *this, const char *__nm, size_t __refs)
{
  *(_QWORD *)&this->__decimal_point_ = 0x2C0000002ELL;
  *(_OWORD *)&this->__grouping_.__r_.__value_.__r.__words[1] = 0uLL;
  this->__grouping_.__r_.__value_.__r.__words[0] = 0;
  this->__shared_owners_ = __refs - 1;
  std::numpunct_byname<wchar_t>::__init(this, __nm);
  return this;
}

void sub_191FF7648(_Unwind_Exception *a1)
{
  std::numpunct<wchar_t> *v1;

  std::numpunct<wchar_t>::~numpunct(v1);
  _Unwind_Resume(a1);
}

void std::numpunct_byname<wchar_t>::__init(std::numpunct_byname<wchar_t> *this, const char *a2)
{
  _xlocale *v4;
  lconv *v5;
  std::string *v6;
  std::string v7;
  std::string v8;
  _xlocale *v9;

  if (strcmp(a2, "C"))
  {
    v4 = newlocale(63, a2, 0);
    v9 = v4;
    if (!v4)
    {
      std::string::basic_string[abi:ne180100]<0>(&v7, (char *)a2);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("numpunct_byname<wchar_t>::numpunct_byname failed to construct for ", &v7, &v8);
      if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v6 = &v8;
      else
        v6 = (std::string *)v8.__r_.__value_.__r.__words[0];
      std::__throw_runtime_error((const char *)v6);
    }
    v5 = localeconv_l(v4);
    std::checked_string_to_wchar_convert(&this->__decimal_point_, v5->decimal_point, v9);
    std::checked_string_to_wchar_convert(&this->__thousands_sep_, v5->thousands_sep, v9);
    std::string::__assign_external(&this->__grouping_, v5->grouping);
    std::__libcpp_unique_locale::~__libcpp_unique_locale(&v9);
  }
}

void sub_191FF7728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  std::__libcpp_unique_locale::~__libcpp_unique_locale((_xlocale **)(v21 - 24));
  _Unwind_Resume(a1);
}

std::numpunct_byname<wchar_t> *__cdecl std::numpunct_byname<wchar_t>::numpunct_byname(std::numpunct_byname<wchar_t> *this, const std::string *__nm, size_t __refs)
{
  *(_QWORD *)&this->__decimal_point_ = 0x2C0000002ELL;
  *(_OWORD *)&this->__grouping_.__r_.__value_.__r.__words[1] = 0uLL;
  this->__grouping_.__r_.__value_.__r.__words[0] = 0;
  this->__shared_owners_ = __refs - 1;
  if ((__nm->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    __nm = (const std::string *)__nm->__r_.__value_.__r.__words[0];
  std::numpunct_byname<wchar_t>::__init(this, (const char *)__nm);
  return this;
}

void sub_191FF77CC(_Unwind_Exception *a1)
{
  std::numpunct<wchar_t> *v1;

  std::numpunct<wchar_t>::~numpunct(v1);
  _Unwind_Resume(a1);
}

void std::numpunct_byname<wchar_t>::~numpunct_byname(std::numpunct_byname<wchar_t> *this)
{
  std::numpunct<wchar_t>::~numpunct(this);
  JUMPOUT(0x194021E38);
}

BOOL std::checked_string_to_wchar_convert(__int32 *a1, char *__s, _xlocale *a3)
{
  size_t v6;
  size_t v7;
  _BOOL8 result;
  __int32 v9;
  mbstate_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (!*__s)
    return 0;
  memset(&v10, 0, sizeof(v10));
  v6 = strlen(__s);
  v7 = mbrtowc_l(&v9, __s, v6, &v10, a3);
  result = v7 < 0xFFFFFFFFFFFFFFFELL;
  if (v7 <= 0xFFFFFFFFFFFFFFFDLL)
    *a1 = v9;
  return result;
}

int std::__num_get_base::__get_base(std::ios_base *a1)
{
  std::ios_base::fmtflags v1;
  int v2;

  v1 = a1->__fmtflags_ & 0x4A;
  if (!v1)
    return 0;
  if (v1 == 8)
    v2 = 16;
  else
    v2 = 10;
  if (v1 == 64)
    return 8;
  else
    return v2;
}

void std::__num_put_base::__format_int(char *__fmt, const char *__len, BOOL __signd, std::ios_base::fmtflags __flags)
{
  char v4;
  const char *v5;
  int v6;
  std::ios_base::fmtflags v7;
  char v8;
  char v9;
  char v10;

  if ((__flags & 0x800) != 0 && (__flags & 0x4A) != 8 && (__flags & 0x4A) != 0x40 && __signd)
    *__fmt++ = 43;
  if ((__flags & 0x200) != 0)
    *__fmt++ = 35;
  v4 = *__len;
  if (*__len)
  {
    v5 = __len + 1;
    do
    {
      *__fmt++ = v4;
      v6 = *(unsigned __int8 *)v5++;
      v4 = v6;
    }
    while (v6);
  }
  v7 = __flags & 0x4A;
  if (__signd)
    v8 = 100;
  else
    v8 = 117;
  if ((__flags & 0x4000) != 0)
    v9 = 88;
  else
    v9 = 120;
  if (v7 == 8)
    v8 = v9;
  if (v7 == 64)
    v10 = 111;
  else
    v10 = v8;
  *__fmt = v10;
}

BOOL std::__num_put_base::__format_float(char *__fmt, const char *__len, std::ios_base::fmtflags __flags)
{
  std::ios_base::fmtflags v3;
  char v4;
  const char *v5;
  int v6;
  char v7;
  char v8;
  char v9;
  char v10;

  if ((__flags & 0x800) != 0)
    *__fmt++ = 43;
  if ((__flags & 0x400) != 0)
    *__fmt++ = 35;
  v3 = __flags & 0x104;
  if (v3 != 260)
  {
    *(_WORD *)__fmt = 10798;
    __fmt += 2;
  }
  v4 = *__len;
  if (*__len)
  {
    v5 = __len + 1;
    do
    {
      *__fmt++ = v4;
      v6 = *(unsigned __int8 *)v5++;
      v4 = v6;
    }
    while (v6);
  }
  if ((__flags & 0x4000) != 0)
    v7 = 69;
  else
    v7 = 101;
  if ((__flags & 0x4000) != 0)
    v8 = 71;
  else
    v8 = 103;
  if ((__flags & 0x4000) != 0)
    v9 = 65;
  else
    v9 = 97;
  if (v3 == 260)
    v8 = v9;
  if ((__flags & 0x4000) != 0)
    v10 = 70;
  else
    v10 = 102;
  if (v3 == 4)
    v8 = v10;
  if (v3 != 256)
    v7 = v8;
  *__fmt = v7;
  return v3 != 260;
}

unint64_t std::__time_get_c_storage<char>::__weeks()
{
  unsigned __int8 v0;
  unint64_t *v1;
  std::__1 *v3;

  v1 = &std::__libcpp_contention_table[1896];
  if ((v0 & 1) == 0)
  {
    v1 = std::__libcpp_contention_table + 15168;
    if ((_DWORD)v3)
    {
      std::init_weeks(v3);
      std::__time_get_c_storage<char>::__weeks(void)const::weeks = (uint64_t)std::init_weeks(void)::weeks;
      v1 = std::__libcpp_contention_table + 15168;
    }
  }
  return v1[254];
}

void std::init_weeks(std::__1 *this)
{
  unsigned __int8 v1;
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;

  {
    __cxa_atexit((void (*)(void *))__cxx_global_array_dtor, 0, &dword_191FAF000);
  }
  v2 = (char *)std::init_weeks(void)::weeks;
  if (byte_1EE249907 < 0)
  {
    qword_1EE2498F8 = 6;
    v2 = (char *)std::init_weeks(void)::weeks[0];
  }
  else
  {
    byte_1EE249907 = 6;
  }
  strcpy(v2, "Sunday");
  v3 = (char *)&qword_1EE249908;
  if (byte_1EE24991F < 0)
  {
    qword_1EE249910 = 6;
    v3 = (char *)qword_1EE249908;
  }
  else
  {
    byte_1EE24991F = 6;
  }
  strcpy(v3, "Monday");
  v4 = (char *)&qword_1EE249920;
  if (byte_1EE249937 < 0)
  {
    qword_1EE249928 = 7;
    v4 = (char *)qword_1EE249920;
  }
  else
  {
    byte_1EE249937 = 7;
  }
  strcpy(v4, "Tuesday");
  v5 = (char *)&qword_1EE249938;
  if (byte_1EE24994F < 0)
  {
    qword_1EE249940 = 9;
    v5 = (char *)qword_1EE249938;
  }
  else
  {
    byte_1EE24994F = 9;
  }
  strcpy(v5, "Wednesday");
  if (byte_1EE249967 < 0)
  {
    qword_1EE249958 = 8;
    v6 = (char *)qword_1EE249950;
  }
  else
  {
    v6 = (char *)&qword_1EE249950;
    byte_1EE249967 = 8;
  }
  strcpy(v6, "Thursday");
  if (byte_1EE24997F < 0)
  {
    qword_1EE249970 = 6;
    v7 = (char *)qword_1EE249968;
  }
  else
  {
    v7 = (char *)&qword_1EE249968;
    byte_1EE24997F = 6;
  }
  strcpy(v7, "Friday");
  if (byte_1EE249997 < 0)
  {
    qword_1EE249988 = 8;
    v8 = (char *)qword_1EE249980;
  }
  else
  {
    v8 = (char *)&qword_1EE249980;
    byte_1EE249997 = 8;
  }
  strcpy(v8, "Saturday");
  if (byte_1EE2499AF < 0)
  {
    qword_1EE2499A0 = 3;
    v9 = (uint64_t *)qword_1EE249998;
  }
  else
  {
    v9 = &qword_1EE249998;
    byte_1EE2499AF = 3;
  }
  *(_DWORD *)v9 = 7238995;
  if (byte_1EE2499C7 < 0)
  {
    qword_1EE2499B8 = 3;
    v10 = (uint64_t *)qword_1EE2499B0;
  }
  else
  {
    v10 = &qword_1EE2499B0;
    byte_1EE2499C7 = 3;
  }
  *(_DWORD *)v10 = 7237453;
  if (byte_1EE2499DF < 0)
  {
    qword_1EE2499D0 = 3;
    v11 = (uint64_t *)qword_1EE2499C8;
  }
  else
  {
    v11 = &qword_1EE2499C8;
    byte_1EE2499DF = 3;
  }
  *(_DWORD *)v11 = 6649172;
  if (byte_1EE2499F7 < 0)
  {
    qword_1EE2499E8 = 3;
    v12 = (uint64_t *)qword_1EE2499E0;
  }
  else
  {
    v12 = &qword_1EE2499E0;
    byte_1EE2499F7 = 3;
  }
  *(_DWORD *)v12 = 6579543;
  if (byte_1EE249A0F < 0)
  {
    qword_1EE249A00 = 3;
    v13 = (uint64_t *)qword_1EE2499F8;
  }
  else
  {
    v13 = &qword_1EE2499F8;
    byte_1EE249A0F = 3;
  }
  *(_DWORD *)v13 = 7694420;
  if (byte_1EE249A27 < 0)
  {
    qword_1EE249A18 = 3;
    v14 = (uint64_t *)qword_1EE249A10;
  }
  else
  {
    v14 = &qword_1EE249A10;
    byte_1EE249A27 = 3;
  }
  *(_DWORD *)v14 = 6910534;
  if (byte_1EE249A3F < 0)
  {
    qword_1EE249A30 = 3;
    v15 = (uint64_t *)qword_1EE249A28;
  }
  else
  {
    v15 = &qword_1EE249A28;
    byte_1EE249A3F = 3;
  }
  *(_DWORD *)v15 = 7627091;
}

uint64_t std::__time_get_c_storage<wchar_t>::__weeks()
{
  unsigned __int8 v0;
  std::__1 *v2;

  if ((v0 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      std::init_wweeks(v2);
      std::__time_get_c_storage<wchar_t>::__weeks(void)const::weeks = (uint64_t)std::init_wweeks(void)::weeks;
    }
  }
  return std::__time_get_c_storage<wchar_t>::__weeks(void)const::weeks;
}

void sub_191FF7F18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

std::wstring *std::init_wweeks(std::__1 *this)
{
  unsigned __int8 v1;
  std::wstring *result;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;

  {
    __cxa_atexit((void (*)(void *))__cxx_global_array_dtor_80, 0, &dword_191FAF000);
  }
  std::wstring::__assign_external((std::wstring *)std::init_wweeks(void)::weeks, (const std::wstring::value_type *)"S", 6uLL);
  std::wstring::__assign_external((std::wstring *)&std::init_wweeks(void)::weeks[24], (const std::wstring::value_type *)"M", 6uLL);
  std::wstring::__assign_external((std::wstring *)&std::init_wweeks(void)::weeks[48], (const std::wstring::value_type *)"T", 7uLL);
  std::wstring::__assign_external((std::wstring *)&std::init_wweeks(void)::weeks[72], (const std::wstring::value_type *)"W", 9uLL);
  std::wstring::__assign_external((std::wstring *)&std::init_wweeks(void)::weeks[96], (const std::wstring::value_type *)"T", 8uLL);
  std::wstring::__assign_external((std::wstring *)&std::init_wweeks(void)::weeks[120], (const std::wstring::value_type *)"F", 6uLL);
  result = std::wstring::__assign_external((std::wstring *)&std::init_wweeks(void)::weeks[144], (const std::wstring::value_type *)"S", 8uLL);
  if (byte_1EE249B07 < 0)
  {
    qword_1EE249AF8 = 3;
    v3 = (uint64_t *)qword_1EE249AF0;
  }
  else
  {
    v3 = &qword_1EE249AF0;
    byte_1EE249B07 = 3;
  }
  *v3 = 0x7500000053;
  v3[1] = 110;
  if (byte_1EE249B1F < 0)
  {
    qword_1EE249B10 = 3;
    v4 = (uint64_t *)qword_1EE249B08;
  }
  else
  {
    v4 = &qword_1EE249B08;
    byte_1EE249B1F = 3;
  }
  *v4 = 0x6F0000004DLL;
  v4[1] = 110;
  if (byte_1EE249B37 < 0)
  {
    qword_1EE249B28 = 3;
    v5 = (uint64_t *)qword_1EE249B20;
  }
  else
  {
    v5 = &qword_1EE249B20;
    byte_1EE249B37 = 3;
  }
  *v5 = 0x7500000054;
  v5[1] = 101;
  if (byte_1EE249B4F < 0)
  {
    qword_1EE249B40 = 3;
    v6 = (uint64_t *)qword_1EE249B38;
  }
  else
  {
    v6 = &qword_1EE249B38;
    byte_1EE249B4F = 3;
  }
  *v6 = 0x6500000057;
  v6[1] = 100;
  if (byte_1EE249B67 < 0)
  {
    qword_1EE249B58 = 3;
    v7 = (uint64_t *)qword_1EE249B50;
  }
  else
  {
    v7 = &qword_1EE249B50;
    byte_1EE249B67 = 3;
  }
  *v7 = 0x6800000054;
  v7[1] = 117;
  if (byte_1EE249B7F < 0)
  {
    qword_1EE249B70 = 3;
    v8 = (uint64_t *)qword_1EE249B68;
  }
  else
  {
    v8 = &qword_1EE249B68;
    byte_1EE249B7F = 3;
  }
  *v8 = 0x7200000046;
  v8[1] = 105;
  if (byte_1EE249B97 < 0)
  {
    qword_1EE249B88 = 3;
    v9 = (uint64_t *)qword_1EE249B80;
  }
  else
  {
    v9 = &qword_1EE249B80;
    byte_1EE249B97 = 3;
  }
  *v9 = 0x6100000053;
  v9[1] = 116;
  return result;
}

unint64_t std::__time_get_c_storage<char>::__months()
{
  unsigned __int8 v0;
  unint64_t *v1;
  std::__1 *v3;

  v1 = &std::__libcpp_contention_table[1896];
  if ((v0 & 1) == 0)
  {
    v1 = std::__libcpp_contention_table + 15168;
    if ((_DWORD)v3)
    {
      std::init_months(v3);
      std::__time_get_c_storage<char>::__months(void)const::months = (uint64_t)std::init_months(void)::months;
      v1 = std::__libcpp_contention_table + 15168;
    }
  }
  return v1[258];
}

void std::init_months(std::__1 *this)
{
  unsigned __int8 v1;
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;

  {
    __cxa_atexit((void (*)(void *))__cxx_global_array_dtor_95, 0, &dword_191FAF000);
  }
  v2 = (char *)std::init_months(void)::months;
  if (byte_1EE249BB7 < 0)
  {
    qword_1EE249BA8 = 7;
    v2 = (char *)std::init_months(void)::months[0];
  }
  else
  {
    byte_1EE249BB7 = 7;
  }
  strcpy(v2, "January");
  v3 = (char *)&qword_1EE249BB8;
  if (byte_1EE249BCF < 0)
  {
    qword_1EE249BC0 = 8;
    v3 = (char *)qword_1EE249BB8;
  }
  else
  {
    byte_1EE249BCF = 8;
  }
  strcpy(v3, "February");
  v4 = (char *)&qword_1EE249BD0;
  if (byte_1EE249BE7 < 0)
  {
    qword_1EE249BD8 = 5;
    v4 = (char *)qword_1EE249BD0;
  }
  else
  {
    byte_1EE249BE7 = 5;
  }
  strcpy(v4, "March");
  v5 = (char *)&qword_1EE249BE8;
  if (byte_1EE249BFF < 0)
  {
    qword_1EE249BF0 = 5;
    v5 = (char *)qword_1EE249BE8;
  }
  else
  {
    byte_1EE249BFF = 5;
  }
  strcpy(v5, "April");
  v6 = &qword_1EE249C00;
  if (byte_1EE249C17 < 0)
  {
    qword_1EE249C08 = 3;
    v6 = (uint64_t *)qword_1EE249C00;
  }
  else
  {
    byte_1EE249C17 = 3;
  }
  *(_DWORD *)v6 = 7954765;
  v7 = (char *)&qword_1EE249C18;
  if (byte_1EE249C2F < 0)
  {
    qword_1EE249C20 = 4;
    v7 = (char *)qword_1EE249C18;
  }
  else
  {
    byte_1EE249C2F = 4;
  }
  strcpy(v7, "June");
  v8 = (char *)&qword_1EE249C30;
  if (byte_1EE249C47 < 0)
  {
    qword_1EE249C38 = 4;
    v8 = (char *)qword_1EE249C30;
  }
  else
  {
    byte_1EE249C47 = 4;
  }
  strcpy(v8, "July");
  v9 = (char *)&qword_1EE249C48;
  if (byte_1EE249C5F < 0)
  {
    qword_1EE249C50 = 6;
    v9 = (char *)qword_1EE249C48;
  }
  else
  {
    byte_1EE249C5F = 6;
  }
  strcpy(v9, "August");
  v10 = (char *)&qword_1EE249C60;
  if (byte_1EE249C77 < 0)
  {
    qword_1EE249C68 = 9;
    v10 = (char *)qword_1EE249C60;
  }
  else
  {
    byte_1EE249C77 = 9;
  }
  strcpy(v10, "September");
  v11 = (char *)&qword_1EE249C78;
  if (byte_1EE249C8F < 0)
  {
    qword_1EE249C80 = 7;
    v11 = (char *)qword_1EE249C78;
  }
  else
  {
    byte_1EE249C8F = 7;
  }
  strcpy(v11, "October");
  v12 = (char *)&qword_1EE249C90;
  if (byte_1EE249CA7 < 0)
  {
    qword_1EE249C98 = 8;
    v12 = (char *)qword_1EE249C90;
  }
  else
  {
    byte_1EE249CA7 = 8;
  }
  strcpy(v12, "November");
  v13 = (char *)&qword_1EE249CA8;
  if (byte_1EE249CBF < 0)
  {
    qword_1EE249CB0 = 8;
    v13 = (char *)qword_1EE249CA8;
  }
  else
  {
    byte_1EE249CBF = 8;
  }
  strcpy(v13, "December");
  v14 = &qword_1EE249CC0;
  if (byte_1EE249CD7 < 0)
  {
    qword_1EE249CC8 = 3;
    v14 = (uint64_t *)qword_1EE249CC0;
  }
  else
  {
    byte_1EE249CD7 = 3;
  }
  *(_DWORD *)v14 = 7233866;
  v15 = &qword_1EE249CD8;
  if (byte_1EE249CEF < 0)
  {
    qword_1EE249CE0 = 3;
    v15 = (uint64_t *)qword_1EE249CD8;
  }
  else
  {
    byte_1EE249CEF = 3;
  }
  *(_DWORD *)v15 = 6448454;
  if (byte_1EE249D07 < 0)
  {
    qword_1EE249CF8 = 3;
    v16 = (uint64_t *)qword_1EE249CF0;
  }
  else
  {
    v16 = &qword_1EE249CF0;
    byte_1EE249D07 = 3;
  }
  *(_DWORD *)v16 = 7496013;
  if (byte_1EE249D1F < 0)
  {
    qword_1EE249D10 = 3;
    v17 = (uint64_t *)qword_1EE249D08;
  }
  else
  {
    v17 = &qword_1EE249D08;
    byte_1EE249D1F = 3;
  }
  *(_DWORD *)v17 = 7499841;
  if (byte_1EE249D37 < 0)
  {
    qword_1EE249D28 = 3;
    v18 = (uint64_t *)qword_1EE249D20;
  }
  else
  {
    v18 = &qword_1EE249D20;
    byte_1EE249D37 = 3;
  }
  *(_DWORD *)v18 = 7954765;
  if (byte_1EE249D4F < 0)
  {
    qword_1EE249D40 = 3;
    v19 = (uint64_t *)qword_1EE249D38;
  }
  else
  {
    v19 = &qword_1EE249D38;
    byte_1EE249D4F = 3;
  }
  *(_DWORD *)v19 = 7238986;
  if (byte_1EE249D67 < 0)
  {
    qword_1EE249D58 = 3;
    v20 = (uint64_t *)qword_1EE249D50;
  }
  else
  {
    v20 = &qword_1EE249D50;
    byte_1EE249D67 = 3;
  }
  *(_DWORD *)v20 = 7107914;
  if (byte_1EE249D7F < 0)
  {
    qword_1EE249D70 = 3;
    v21 = (uint64_t *)qword_1EE249D68;
  }
  else
  {
    v21 = &qword_1EE249D68;
    byte_1EE249D7F = 3;
  }
  *(_DWORD *)v21 = 6780225;
  if (byte_1EE249D97 < 0)
  {
    qword_1EE249D88 = 3;
    v22 = (uint64_t *)qword_1EE249D80;
  }
  else
  {
    v22 = &qword_1EE249D80;
    byte_1EE249D97 = 3;
  }
  *(_DWORD *)v22 = 7365971;
  if (byte_1EE249DAF < 0)
  {
    qword_1EE249DA0 = 3;
    v23 = (uint64_t *)qword_1EE249D98;
  }
  else
  {
    v23 = &qword_1EE249D98;
    byte_1EE249DAF = 3;
  }
  *(_DWORD *)v23 = 7627599;
  if (byte_1EE249DC7 < 0)
  {
    qword_1EE249DB8 = 3;
    v24 = (uint64_t *)qword_1EE249DB0;
  }
  else
  {
    v24 = &qword_1EE249DB0;
    byte_1EE249DC7 = 3;
  }
  *(_DWORD *)v24 = 7761742;
  if (byte_1EE249DDF < 0)
  {
    qword_1EE249DD0 = 3;
    v25 = (uint64_t *)qword_1EE249DC8;
  }
  else
  {
    v25 = &qword_1EE249DC8;
    byte_1EE249DDF = 3;
  }
  *(_DWORD *)v25 = 6513988;
}

uint64_t std::__time_get_c_storage<wchar_t>::__months()
{
  unsigned __int8 v0;
  std::__1 *v2;

  if ((v0 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      std::init_wmonths(v2);
      std::__time_get_c_storage<wchar_t>::__months(void)const::months = (uint64_t)std::init_wmonths(void)::months;
    }
  }
  return std::__time_get_c_storage<wchar_t>::__months(void)const::months;
}

void sub_191FF891C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

std::wstring *std::init_wmonths(std::__1 *this)
{
  unsigned __int8 v1;
  uint64_t *v2;
  __int128 *v3;
  __int128 *v4;
  std::wstring *result;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;

  {
    __cxa_atexit((void (*)(void *))__cxx_global_array_dtor_119, 0, &dword_191FAF000);
  }
  std::wstring::__assign_external((std::wstring *)std::init_wmonths(void)::months, dword_19202702C, 7uLL);
  std::wstring::__assign_external((std::wstring *)&std::init_wmonths(void)::months[24], dword_19202704C, 8uLL);
  std::wstring::__assign_external((std::wstring *)&std::init_wmonths(void)::months[48], dword_192027070, 5uLL);
  std::wstring::__assign_external((std::wstring *)&std::init_wmonths(void)::months[72], dword_192027088, 5uLL);
  v2 = &qword_1EE249E48;
  if (byte_1EE249E5F < 0)
  {
    qword_1EE249E50 = 3;
    v2 = (uint64_t *)qword_1EE249E48;
  }
  else
  {
    byte_1EE249E5F = 3;
  }
  *v2 = 0x610000004DLL;
  v2[1] = 121;
  v3 = &xmmword_1EE249E60;
  if (byte_1EE249E77 < 0)
  {
    *((_QWORD *)&xmmword_1EE249E60 + 1) = 4;
    v3 = (__int128 *)xmmword_1EE249E60;
  }
  else
  {
    byte_1EE249E77 = 4;
  }
  *v3 = xmmword_1920270B0;
  *((_DWORD *)v3 + 4) = 0;
  v4 = &xmmword_1EE249E78;
  if (byte_1EE249E8F < 0)
  {
    *((_QWORD *)&xmmword_1EE249E78 + 1) = 4;
    v4 = (__int128 *)xmmword_1EE249E78;
  }
  else
  {
    byte_1EE249E8F = 4;
  }
  *v4 = xmmword_1920270C4;
  *((_DWORD *)v4 + 4) = 0;
  std::wstring::__assign_external(&stru_1EE249E90, dword_1920270D8, 6uLL);
  std::wstring::__assign_external(&stru_1EE249EA8, dword_1920270F4, 9uLL);
  std::wstring::__assign_external(&stru_1EE249EC0, dword_19202711C, 7uLL);
  std::wstring::__assign_external(&stru_1EE249ED8, dword_19202713C, 8uLL);
  result = std::wstring::__assign_external(&stru_1EE249EF0, dword_192027160, 8uLL);
  v6 = &qword_1EE249F08;
  if (byte_1EE249F1F < 0)
  {
    qword_1EE249F10 = 3;
    v6 = (uint64_t *)qword_1EE249F08;
  }
  else
  {
    byte_1EE249F1F = 3;
  }
  *v6 = 0x610000004ALL;
  v6[1] = 110;
  v7 = &qword_1EE249F20;
  if (byte_1EE249F37 < 0)
  {
    qword_1EE249F28 = 3;
    v7 = (uint64_t *)qword_1EE249F20;
  }
  else
  {
    byte_1EE249F37 = 3;
  }
  *v7 = 0x6500000046;
  v7[1] = 98;
  if (byte_1EE249F4F < 0)
  {
    qword_1EE249F40 = 3;
    v8 = (uint64_t *)qword_1EE249F38;
  }
  else
  {
    v8 = &qword_1EE249F38;
    byte_1EE249F4F = 3;
  }
  *v8 = 0x610000004DLL;
  v8[1] = 114;
  if (byte_1EE249F67 < 0)
  {
    qword_1EE249F58 = 3;
    v9 = (uint64_t *)qword_1EE249F50;
  }
  else
  {
    v9 = &qword_1EE249F50;
    byte_1EE249F67 = 3;
  }
  *v9 = 0x7000000041;
  v9[1] = 114;
  if (byte_1EE249F7F < 0)
  {
    qword_1EE249F70 = 3;
    v10 = (uint64_t *)qword_1EE249F68;
  }
  else
  {
    v10 = &qword_1EE249F68;
    byte_1EE249F7F = 3;
  }
  *v10 = 0x610000004DLL;
  v10[1] = 121;
  if (byte_1EE249F97 < 0)
  {
    qword_1EE249F88 = 3;
    v11 = (uint64_t *)qword_1EE249F80;
  }
  else
  {
    v11 = &qword_1EE249F80;
    byte_1EE249F97 = 3;
  }
  *v11 = 0x750000004ALL;
  v11[1] = 110;
  if (byte_1EE249FAF < 0)
  {
    qword_1EE249FA0 = 3;
    v12 = (uint64_t *)qword_1EE249F98;
  }
  else
  {
    v12 = &qword_1EE249F98;
    byte_1EE249FAF = 3;
  }
  *v12 = 0x750000004ALL;
  v12[1] = 108;
  if (byte_1EE249FC7 < 0)
  {
    qword_1EE249FB8 = 3;
    v13 = (uint64_t *)qword_1EE249FB0;
  }
  else
  {
    v13 = &qword_1EE249FB0;
    byte_1EE249FC7 = 3;
  }
  *v13 = 0x7500000041;
  v13[1] = 103;
  if (byte_1EE249FDF < 0)
  {
    qword_1EE249FD0 = 3;
    v14 = (uint64_t *)qword_1EE249FC8;
  }
  else
  {
    v14 = &qword_1EE249FC8;
    byte_1EE249FDF = 3;
  }
  *v14 = 0x6500000053;
  v14[1] = 112;
  if (byte_1EE249FF7 < 0)
  {
    qword_1EE249FE8 = 3;
    v15 = (uint64_t *)qword_1EE249FE0;
  }
  else
  {
    v15 = &qword_1EE249FE0;
    byte_1EE249FF7 = 3;
  }
  *v15 = 0x630000004FLL;
  v15[1] = 116;
  if (byte_1EE24A00F < 0)
  {
    qword_1EE24A000 = 3;
    v16 = (uint64_t *)qword_1EE249FF8;
  }
  else
  {
    v16 = &qword_1EE249FF8;
    byte_1EE24A00F = 3;
  }
  *v16 = 0x6F0000004ELL;
  v16[1] = 118;
  if (byte_1EE24A027 < 0)
  {
    qword_1EE24A018 = 3;
    v17 = (uint64_t *)qword_1EE24A010;
  }
  else
  {
    v17 = &qword_1EE24A010;
    byte_1EE24A027 = 3;
  }
  *v17 = 0x6500000044;
  v17[1] = 99;
  return result;
}

unint64_t std::__time_get_c_storage<char>::__am_pm()
{
  unsigned __int8 v0;
  unint64_t *v1;
  std::__1 *v3;

  v1 = &std::__libcpp_contention_table[1896];
  if ((v0 & 1) == 0)
  {
    v1 = std::__libcpp_contention_table + 15168;
    if ((_DWORD)v3)
    {
      std::init_am_pm(v3);
      std::__time_get_c_storage<char>::__am_pm(void)const::am_pm = (uint64_t)std::init_am_pm(void)::am_pm;
      v1 = std::__libcpp_contention_table + 15168;
    }
  }
  return v1[262];
}

void std::init_am_pm(std::__1 *this)
{
  unsigned __int8 v1;
  char *v2;
  char *v3;

  {
    __cxa_atexit((void (*)(void *))__cxx_global_array_dtor_143, 0, &dword_191FAF000);
  }
  if (byte_1EE24A047 < 0)
  {
    qword_1EE24A038 = 2;
    v2 = (char *)std::init_am_pm(void)::am_pm[0];
  }
  else
  {
    v2 = (char *)std::init_am_pm(void)::am_pm;
    byte_1EE24A047 = 2;
  }
  strcpy(v2, "AM");
  if (byte_1EE24A05F < 0)
  {
    qword_1EE24A050 = 2;
    v3 = (char *)qword_1EE24A048;
  }
  else
  {
    v3 = (char *)&qword_1EE24A048;
    byte_1EE24A05F = 2;
  }
  strcpy(v3, "PM");
}

unint64_t std::__time_get_c_storage<wchar_t>::__am_pm()
{
  unsigned __int8 v0;
  unint64_t *v1;
  std::__1 *v3;

  v1 = &std::__libcpp_contention_table[1896];
  if ((v0 & 1) == 0)
  {
    v1 = std::__libcpp_contention_table + 15168;
    if ((_DWORD)v3)
    {
      std::init_wam_pm(v3);
      std::__time_get_c_storage<wchar_t>::__am_pm(void)const::am_pm = (uint64_t)std::init_wam_pm(void)::am_pm;
      v1 = std::__libcpp_contention_table + 15168;
    }
  }
  return v1[264];
}

void std::init_wam_pm(std::__1 *this)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t *v3;

  {
    __cxa_atexit((void (*)(void *))__cxx_global_array_dtor_146, 0, &dword_191FAF000);
  }
  if (byte_1EE24A07F < 0)
  {
    qword_1EE24A070 = 2;
    v2 = (uint64_t *)std::init_wam_pm(void)::am_pm[0];
  }
  else
  {
    v2 = std::init_wam_pm(void)::am_pm;
    byte_1EE24A07F = 2;
  }
  *v2 = 0x4D00000041;
  *((_DWORD *)v2 + 2) = 0;
  if (byte_1EE24A097 < 0)
  {
    qword_1EE24A088 = 2;
    v3 = (uint64_t *)qword_1EE24A080;
  }
  else
  {
    v3 = &qword_1EE24A080;
    byte_1EE24A097 = 2;
  }
  *v3 = 0x4D00000050;
  *((_DWORD *)v3 + 2) = 0;
}

char *std::__time_get_c_storage<char>::__x()
{
  unsigned __int8 v0;

  {
    __cxa_atexit((void (*)(void *))std::string::~string, std::__time_get_c_storage<char>::__x(void)const::s, &dword_191FAF000);
  }
  return std::__time_get_c_storage<char>::__x(void)const::s;
}

void *std::__time_get_c_storage<wchar_t>::__x()
{
  unsigned __int8 v0;

  {
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&std::__time_get_c_storage<wchar_t>::__x(void)const::s, dword_192026104);
    __cxa_atexit((void (*)(void *))std::wstring::~wstring, &std::__time_get_c_storage<wchar_t>::__x(void)const::s, &dword_191FAF000);
  }
  return &std::__time_get_c_storage<wchar_t>::__x(void)const::s;
}

void sub_191FF918C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

char *std::__time_get_c_storage<char>::__X()
{
  unsigned __int8 v0;

  {
    __cxa_atexit((void (*)(void *))std::string::~string, std::__time_get_c_storage<char>::__X(void)const::s, &dword_191FAF000);
  }
  return std::__time_get_c_storage<char>::__X(void)const::s;
}

void *std::__time_get_c_storage<wchar_t>::__X()
{
  unsigned __int8 v0;

  {
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&std::__time_get_c_storage<wchar_t>::__X(void)const::s, dword_192026128);
    __cxa_atexit((void (*)(void *))std::wstring::~wstring, &std::__time_get_c_storage<wchar_t>::__X(void)const::s, &dword_191FAF000);
  }
  return &std::__time_get_c_storage<wchar_t>::__X(void)const::s;
}

void sub_191FF9288(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

char *std::__time_get_c_storage<char>::__c()
{
  unsigned __int8 v0;

  {
    __cxa_atexit((void (*)(void *))std::string::~string, std::__time_get_c_storage<char>::__c(void)const::s, &dword_191FAF000);
  }
  return std::__time_get_c_storage<char>::__c(void)const::s;
}

void *std::__time_get_c_storage<wchar_t>::__c()
{
  unsigned __int8 v0;

  {
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&std::__time_get_c_storage<wchar_t>::__c(void)const::s, dword_19202614C);
    __cxa_atexit((void (*)(void *))std::wstring::~wstring, &std::__time_get_c_storage<wchar_t>::__c(void)const::s, &dword_191FAF000);
  }
  return &std::__time_get_c_storage<wchar_t>::__c(void)const::s;
}

void sub_191FF9384(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

char *std::__time_get_c_storage<char>::__r()
{
  unsigned __int8 v0;

  {
    __cxa_atexit((void (*)(void *))std::string::~string, std::__time_get_c_storage<char>::__r(void)const::s, &dword_191FAF000);
  }
  return std::__time_get_c_storage<char>::__r(void)const::s;
}

void *std::__time_get_c_storage<wchar_t>::__r()
{
  unsigned __int8 v0;

  {
    std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&std::__time_get_c_storage<wchar_t>::__r(void)const::s, dword_1920261A0);
    __cxa_atexit((void (*)(void *))std::wstring::~wstring, &std::__time_get_c_storage<wchar_t>::__r(void)const::s, &dword_191FAF000);
  }
  return &std::__time_get_c_storage<wchar_t>::__r(void)const::s;
}

void sub_191FF9480(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

std::__time_get *__cdecl std::__time_get::__time_get(std::__time_get *this, const char *__nm)
{
  _xlocale *v4;
  std::string *v6;
  std::string v7;
  std::string v8;

  v4 = newlocale(63, __nm, 0);
  this->__loc_ = v4;
  if (!v4)
  {
    std::string::basic_string[abi:ne180100]<0>(&v7, (char *)__nm);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("time_get_byname failed to construct for ", &v7, &v8);
    if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v6 = &v8;
    else
      v6 = (std::string *)v8.__r_.__value_.__r.__words[0];
    std::__throw_runtime_error((const char *)v6);
  }
  return this;
}

void sub_191FF9514(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

std::__time_get *__cdecl std::__time_get::__time_get(std::__time_get *this, const std::string *__nm)
{
  std::string *v2;
  _xlocale *v4;
  const char *v6;
  void *v7[2];
  char v8;

  v2 = (std::string *)__nm;
  if ((__nm->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    __nm = (const std::string *)__nm->__r_.__value_.__r.__words[0];
  v4 = newlocale(63, (const char *)__nm, 0);
  this->__loc_ = v4;
  if (!v4)
  {
    std::operator+<char>("time_get_byname failed to construct for ", (const void **)&v2->__r_.__value_.__l.__data_, v7);
    if (v8 >= 0)
      v6 = (const char *)v7;
    else
      v6 = (const char *)v7[0];
    std::__throw_runtime_error(v6);
  }
  return this;
}

void sub_191FF95CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__time_get::~__time_get(std::__time_get *this)
{
  freelocale(this->__loc_);
}

{
  freelocale(this->__loc_);
}

void std::__time_get_storage<char>::__analyze(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X2>, std::string *a4@<X8>)
{
  size_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  std::string::value_type v12;
  char *v13;
  uint64_t v14;
  std::string::value_type v15;
  uint64_t v16;
  char *v17;
  int v18;
  std::string::size_type size;
  std::string *v20;
  uint64_t v21;
  char *v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  std::string::value_type v29;
  std::string::value_type *i;
  int v31;
  char *v32;
  char *v33;
  char v34[3];
  tm v35;
  char v36[100];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v35.tm_isdst = 0xFFFFFFFFLL;
  v35.tm_gmtoff = 0;
  v35.tm_zone = 0;
  *(_OWORD *)&v35.tm_sec = xmmword_1920272A0;
  *(_OWORD *)&v35.tm_mon = xmmword_1920272B0;
  v34[2] = 0;
  v34[0] = 37;
  v34[1] = a2;
  v8 = strftime_l(v36, 0x64uLL, v34, &v35, *(locale_t *)a1);
  v33 = v36;
  a4->__r_.__value_.__l.__size_ = 0;
  a4->__r_.__value_.__r.__words[2] = 0;
  a4->__r_.__value_.__r.__words[0] = 0;
  if (v8)
  {
    v9 = &v36[v8];
    v10 = v36;
    while (1)
    {
      if ((*v10 & 0x80000000) == 0 && (*(_DWORD *)(a3[2] + 4 * *v10) & 0x4000) != 0)
      {
        std::string::push_back(a4, 32);
        v21 = a3[2];
        v22 = v33 + 1;
        do
        {
          v10 = v22;
          v33 = v22;
          if (v22 == v9)
            break;
          v23 = *v22;
          if (v23 < 0)
            break;
          v24 = *(_DWORD *)(v21 + 4 * v23);
          v22 = v10 + 1;
        }
        while ((v24 & 0x4000) != 0);
        goto LABEL_13;
      }
      v32 = v10;
      v31 = 0;
      v11 = (uint64_t)std::__scan_keyword[abi:ne180100]<char *,std::string *,std::ctype<char>>(&v32, v9, (uint64_t *)(a1 + 8), (uint64_t *)(a1 + 344), (uint64_t)a3, &v31, 0)- a1- 8;
      if (v11 <= 335)
        break;
      v32 = v33;
      v14 = (uint64_t)std::__scan_keyword[abi:ne180100]<char *,std::string *,std::ctype<char>>(&v32, v9, (uint64_t *)(a1 + 344), (uint64_t *)(a1 + 920), (uint64_t)a3, &v31, 0)- a1- 344;
      if (v14 <= 575)
      {
        std::string::push_back(a4, 37);
        if (v14 >= 288)
          v15 = 98;
        else
          v15 = 66;
        std::string::push_back(a4, v15);
        if (a2 == 120)
        {
          v16 = a1 + 8 * (v14 >> 3);
          v17 = (char *)(v16 + 344);
          if (*(char *)(v16 + 367) < 0)
            v17 = *(char **)v17;
          v18 = *v17;
          if ((v18 & 0x80000000) == 0 && (*(_DWORD *)(a3[2] + 4 * v18) & 0x400) != 0)
          {
            size = HIBYTE(a4->__r_.__value_.__r.__words[2]);
            if ((size & 0x80u) == 0)
              v20 = a4;
            else
              v20 = (std::string *)a4->__r_.__value_.__r.__words[0];
            if ((size & 0x80u) != 0)
              size = a4->__r_.__value_.__l.__size_;
            v20->__r_.__value_.__s.__data_[size - 1] = 109;
          }
        }
        goto LABEL_10;
      }
      if (*(char *)(a1 + 943) < 0)
        v25 = *(_QWORD *)(a1 + 928);
      else
        v25 = *(unsigned __int8 *)(a1 + 943);
      if (*(char *)(a1 + 967) < 0)
        v26 = *(_QWORD *)(a1 + 952);
      else
        v26 = *(unsigned __int8 *)(a1 + 967);
      if (v25 + v26)
      {
        v32 = v33;
        if ((uint64_t)std::__scan_keyword[abi:ne180100]<char *,std::string *,std::ctype<char>>(&v32, v9, (uint64_t *)(a1 + 920), (uint64_t *)(a1 + 968), (uint64_t)a3, &v31, 0)- a1- 920 <= 47)
        {
          std::string::push_back(a4, 37);
          std::string::push_back(a4, 112);
LABEL_10:
          v13 = v32;
          goto LABEL_11;
        }
      }
      v32 = v33;
      v27 = *v33;
      if (*v33 < 0)
        goto LABEL_48;
      if ((*(_DWORD *)(a3[2] + 4 * v27) & 0x400) == 0)
      {
        if ((_DWORD)v27 == 37)
        {
          std::string::push_back(a4, 37);
          std::string::push_back(a4, 37);
        }
        else
        {
LABEL_48:
          std::string::push_back(a4, v27);
        }
        v13 = v33 + 1;
LABEL_11:
        v33 = v13;
        goto LABEL_12;
      }
      v28 = std::__get_up_to_n_digits[abi:ne180100]<char,char *>(&v33, v9, &v31, a3, 4);
      if (v28 > 54)
      {
        if (v28 <= 60)
        {
          if (v28 == 55)
          {
            std::string::push_back(a4, 37);
            v29 = 77;
          }
          else
          {
            if (v28 != 59)
            {
LABEL_64:
              for (i = v32; i != v33; i = ++v32)
                std::string::push_back(a4, *i);
              goto LABEL_12;
            }
            std::string::push_back(a4, 37);
            v29 = 83;
          }
        }
        else
        {
          switch(v28)
          {
            case 61:
              std::string::push_back(a4, 37);
              v29 = 121;
              break;
            case 364:
              std::string::push_back(a4, 37);
              v29 = 106;
              break;
            case 2061:
              std::string::push_back(a4, 37);
              v29 = 89;
              break;
            default:
              goto LABEL_64;
          }
        }
      }
      else
      {
        switch(v28)
        {
          case 6:
            std::string::push_back(a4, 37);
            v29 = 119;
            break;
          case 7:
            std::string::push_back(a4, 37);
            v29 = 117;
            break;
          case 8:
          case 9:
          case 10:
            goto LABEL_64;
          case 11:
            std::string::push_back(a4, 37);
            v29 = 73;
            break;
          case 12:
            std::string::push_back(a4, 37);
            v29 = 109;
            break;
          default:
            if (v28 == 23)
            {
              std::string::push_back(a4, 37);
              v29 = 72;
            }
            else
            {
              if (v28 != 31)
                goto LABEL_64;
              std::string::push_back(a4, 37);
              v29 = 100;
            }
            break;
        }
      }
      std::string::push_back(a4, v29);
LABEL_12:
      v10 = v33;
LABEL_13:
      if (v10 == v9)
        return;
    }
    std::string::push_back(a4, 37);
    if (v11 >= 168)
      v12 = 97;
    else
      v12 = 65;
    std::string::push_back(a4, v12);
    goto LABEL_10;
  }
}

void sub_191FF9B40(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t *std::__scan_keyword[abi:ne180100]<char *,std::string *,std::ctype<char>>(char **a1, char *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, _DWORD *a6, char a7)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  char v22;
  char *v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t *v28;
  char v29;
  uint64_t v30;
  char **v31;
  uint64_t *v32;
  char *v33;
  uint64_t v34;
  _DWORD *v37;
  char *v38;
  uint64_t *v39;
  char *v40;
  char **v41;
  char v43;
  char v44;
  uint64_t v45;

  v9 = a4;
  v10 = a3;
  v45 = *MEMORY[0x1E0C80C00];
  v12 = a4 - a3;
  v13 = 0xAAAAAAAAAAAAAAABLL * v12;
  v43 = a7;
  if (0xAAAAAAAAAAAAAAABLL * v12 < 0x65)
  {
    v14 = 0;
    v40 = &v44;
  }
  else
  {
    v14 = (char *)malloc_type_malloc(0xAAAAAAAAAAAAAAABLL * v12, 0x8BE91F8AuLL);
    a7 = v43;
    v40 = v14;
    if (!v14)
      std::__throw_bad_alloc();
  }
  v37 = a6;
  v15 = 0;
  if (v10 == v9)
  {
    v17 = v40;
  }
  else
  {
    v16 = v10;
    v17 = v40;
    v18 = v40;
    do
    {
      if (*((char *)v16 + 23) < 0)
        v19 = v16[1];
      else
        v19 = *((unsigned __int8 *)v16 + 23);
      v20 = v19 == 0;
      v21 = v19 == 0;
      if (v20)
        v22 = 2;
      else
        v22 = 1;
      if (v20)
        ++v15;
      v13 -= v21;
      *v18++ = v22;
      v16 += 3;
    }
    while (v16 != v9);
  }
  v23 = *a1;
  v38 = v14;
  if (*a1 != a2 && v13)
  {
    v24 = 0;
    v39 = v10;
    v41 = a1;
    while (1)
    {
      v25 = *v23;
      if ((a7 & 1) == 0)
      {
        v25 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a5 + 24))(a5, v25);
        a7 = v43;
      }
      if (v10 == v9)
        break;
      v26 = 0;
      v27 = v24 + 1;
      do
      {
        if (*v17 == 1)
        {
          v28 = v10;
          if (*((char *)v10 + 23) < 0)
            v28 = (uint64_t *)*v10;
          v29 = *((_BYTE *)v28 + v24);
          if ((a7 & 1) == 0)
          {
            v29 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a5 + 24))(a5, v29);
            a7 = v43;
          }
          if (v25 == v29)
          {
            if (*((char *)v10 + 23) < 0)
              v30 = v10[1];
            else
              v30 = *((unsigned __int8 *)v10 + 23);
            if (v30 == v27)
            {
              *v17 = 2;
              --v13;
              ++v15;
            }
            v26 = 1;
          }
          else
          {
            *v17 = 0;
            --v13;
          }
        }
        v10 += 3;
        ++v17;
      }
      while (v10 != v9);
      v31 = v41;
      v23 = *v41;
      if ((v26 & 1) == 0)
      {
        v10 = v39;
        v17 = v40;
        goto LABEL_53;
      }
      *v41 = ++v23;
      v10 = v39;
      v17 = v40;
      if (v15 + v13 >= 2)
      {
        v32 = v39;
        v33 = v40;
        do
        {
          if (*v33 == 2)
          {
            v34 = *((char *)v32 + 23) < 0 ? v32[1] : *((unsigned __int8 *)v32 + 23);
            if (v34 != v27)
            {
              *v33 = 0;
              --v15;
            }
          }
          v32 += 3;
          ++v33;
        }
        while (v32 != v9);
        goto LABEL_51;
      }
LABEL_53:
      ++v24;
      if (v23 == a2 || v13 == 0)
        goto LABEL_58;
    }
    v31 = v41;
LABEL_51:
    v23 = *v31;
    goto LABEL_53;
  }
LABEL_58:
  if (v23 == a2)
    *v37 |= 2u;
  if (v10 == v9)
  {
LABEL_63:
    *v37 |= 4u;
    if (!v38)
      return v9;
LABEL_64:
    free(v38);
    return v9;
  }
  while (*v17 != 2)
  {
    v10 += 3;
    ++v17;
    if (v10 == v9)
      goto LABEL_63;
  }
  v9 = v10;
  if (v38)
    goto LABEL_64;
  return v9;
}

void sub_191FF9E84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
  if (a11)
    free(a11);
  _Unwind_Resume(exception_object);
}

uint64_t std::__get_up_to_n_digits[abi:ne180100]<char,char *>(char **a1, char *a2, _DWORD *a3, _QWORD *a4, int a5)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v14;
  char *v15;
  int v17;
  int v18;

  if (*a1 == a2)
  {
    v8 = 0;
    v9 = 6;
    goto LABEL_6;
  }
  if (**a1 < 0 || (v7 = **a1, (*(_DWORD *)(a4[2] + 4 * v7) & 0x400) == 0))
  {
    v8 = 0;
    v9 = 4;
LABEL_6:
    *a3 |= v9;
    return v8;
  }
  v14 = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*a4 + 72))(a4, (char)v7, 0);
  v15 = *a1 + 1;
  *a1 = v15;
  v8 = (v14 - 48);
  if (v15 == a2 || a5 < 2)
  {
LABEL_18:
    if (v15 != a2)
      return v8;
    v9 = 2;
    goto LABEL_6;
  }
  while (1)
  {
    v17 = *v15;
    if (v17 < 0 || (*(_DWORD *)(a4[2] + 4 * v17) & 0x400) == 0)
      return v8;
    v18 = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*a4 + 72))(a4, (char)v17, 0);
    v15 = *a1 + 1;
    *a1 = v15;
    v8 = (v18 + 10 * v8 - 48);
    if (v15 == a2 || a5-- <= 2)
      goto LABEL_18;
  }
}

void std::__time_get_storage<wchar_t>::__analyze(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, std::wstring *a4@<X8>)
{
  size_t v8;
  unsigned int *v9;
  __int32 *v10;
  unsigned int *v11;
  uint64_t v12;
  std::wstring::value_type v13;
  unsigned int *v14;
  uint64_t v15;
  std::wstring::value_type v16;
  uint64_t v17;
  unsigned int *v18;
  std::wstring::size_type size;
  std::wstring *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  std::wstring::value_type v24;
  unsigned int *i;
  int v26;
  unsigned int *v27;
  char *v28;
  unsigned int *v29;
  char v30[3];
  tm v31;
  mbstate_t v32;
  __int32 v33[100];
  char v34[100];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v31.tm_isdst = 0xFFFFFFFFLL;
  v31.tm_gmtoff = 0;
  v31.tm_zone = 0;
  *(_OWORD *)&v31.tm_sec = xmmword_1920272A0;
  *(_OWORD *)&v31.tm_mon = xmmword_1920272B0;
  v30[2] = 0;
  v30[0] = 37;
  v30[1] = a2;
  strftime_l(v34, 0x64uLL, v30, &v31, *(locale_t *)a1);
  v28 = v34;
  v29 = (unsigned int *)v33;
  memset(&v32, 0, sizeof(v32));
  v8 = mbsrtowcs_l(v33, (const char **)&v28, 0x64uLL, &v32, *(locale_t *)a1);
  if (v8 == -1)
    std::__throw_runtime_error("locale not supported");
  a4->__r_.__value_.__r.__words[0] = 0;
  a4->__r_.__value_.__l.__size_ = 0;
  a4->__r_.__value_.__r.__words[2] = 0;
  if (v8)
  {
    v9 = (unsigned int *)&v33[v8];
    v10 = v33;
    while (1)
    {
      if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a3 + 24))(a3, 0x4000, *v10))
      {
        std::wstring::push_back(a4, 32);
        do
        {
          v11 = v29 + 1;
          v29 = v11;
        }
        while (v11 != v9
             && ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a3 + 24))(a3, 0x4000, *v11) & 1) != 0);
        goto LABEL_16;
      }
      v27 = v29;
      v26 = 0;
      v12 = (uint64_t)std::__scan_keyword[abi:ne180100]<wchar_t *,std::wstring *,std::ctype<wchar_t>>(&v27, v9, (uint64_t *)(a1 + 8), (uint64_t *)(a1 + 344), a3, &v26, 0)- a1- 8;
      if (v12 <= 335)
        break;
      v27 = v29;
      v15 = (uint64_t)std::__scan_keyword[abi:ne180100]<wchar_t *,std::wstring *,std::ctype<wchar_t>>(&v27, v9, (uint64_t *)(a1 + 344), (uint64_t *)(a1 + 920), a3, &v26, 0)- a1- 344;
      if (v15 <= 575)
      {
        std::wstring::push_back(a4, 37);
        if (v15 >= 288)
          v16 = 98;
        else
          v16 = 66;
        std::wstring::push_back(a4, v16);
        if (a2 == 120)
        {
          v17 = a1 + 8 * (v15 >> 3);
          v18 = (unsigned int *)(v17 + 344);
          if (*(char *)(v17 + 367) < 0)
            v18 = *(unsigned int **)v18;
          if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a3 + 24))(a3, 1024, *v18))
          {
            size = HIBYTE(a4->__r_.__value_.__r.__words[2]);
            if ((size & 0x80u) == 0)
              v20 = a4;
            else
              v20 = (std::wstring *)a4->__r_.__value_.__r.__words[0];
            if ((size & 0x80u) != 0)
              size = a4->__r_.__value_.__l.__size_;
            v20->__r_.__value_.__s.__data_[size - 1] = 109;
          }
        }
        goto LABEL_14;
      }
      if (*(char *)(a1 + 943) < 0)
        v21 = *(_QWORD *)(a1 + 928);
      else
        v21 = *(unsigned __int8 *)(a1 + 943);
      if (*(char *)(a1 + 967) < 0)
        v22 = *(_QWORD *)(a1 + 952);
      else
        v22 = *(unsigned __int8 *)(a1 + 967);
      if (v21 + v22)
      {
        v27 = v29;
        if ((uint64_t)std::__scan_keyword[abi:ne180100]<wchar_t *,std::wstring *,std::ctype<wchar_t>>(&v27, v9, (uint64_t *)(a1 + 920), (uint64_t *)(a1 + 968), a3, &v26, 0)- a1- 920 <= 47)
        {
          std::wstring::push_back(a4, 37);
          std::wstring::push_back(a4, 112);
          goto LABEL_14;
        }
      }
      v27 = v29;
      if (!(*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a3 + 24))(a3, 1024, *v29))
      {
        if ((*(unsigned int (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a3 + 104))(a3, *v29, 0) == 37)
        {
          std::wstring::push_back(a4, 37);
          std::wstring::push_back(a4, 37);
        }
        else
        {
          std::wstring::push_back(a4, *v29);
        }
        v14 = v29 + 1;
        goto LABEL_15;
      }
      v23 = std::__get_up_to_n_digits[abi:ne180100]<wchar_t,wchar_t *>(&v29, v9, &v26, a3, 4);
      if (v23 > 54)
      {
        if (v23 <= 60)
        {
          if (v23 == 55)
          {
            std::wstring::push_back(a4, 37);
            v24 = 77;
          }
          else
          {
            if (v23 != 59)
            {
LABEL_60:
              for (i = v27; i != v29; i = ++v27)
                std::wstring::push_back(a4, *i);
              goto LABEL_16;
            }
            std::wstring::push_back(a4, 37);
            v24 = 83;
          }
        }
        else
        {
          switch(v23)
          {
            case 61:
              std::wstring::push_back(a4, 37);
              v24 = 121;
              break;
            case 364:
              std::wstring::push_back(a4, 37);
              v24 = 106;
              break;
            case 2061:
              std::wstring::push_back(a4, 37);
              v24 = 89;
              break;
            default:
              goto LABEL_60;
          }
        }
      }
      else
      {
        switch(v23)
        {
          case 6:
            std::wstring::push_back(a4, 37);
            v24 = 119;
            break;
          case 7:
            std::wstring::push_back(a4, 37);
            v24 = 117;
            break;
          case 8:
          case 9:
          case 10:
            goto LABEL_60;
          case 11:
            std::wstring::push_back(a4, 37);
            v24 = 73;
            break;
          case 12:
            std::wstring::push_back(a4, 37);
            v24 = 109;
            break;
          default:
            if (v23 == 23)
            {
              std::wstring::push_back(a4, 37);
              v24 = 72;
            }
            else
            {
              if (v23 != 31)
                goto LABEL_60;
              std::wstring::push_back(a4, 37);
              v24 = 100;
            }
            break;
        }
      }
      std::wstring::push_back(a4, v24);
LABEL_16:
      v10 = (__int32 *)v29;
      if (v29 == v9)
        return;
    }
    std::wstring::push_back(a4, 37);
    if (v12 >= 168)
      v13 = 97;
    else
      v13 = 65;
    std::wstring::push_back(a4, v13);
LABEL_14:
    v14 = v27;
LABEL_15:
    v29 = v14;
    goto LABEL_16;
  }
}

void sub_191FFA540(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t *std::__scan_keyword[abi:ne180100]<wchar_t *,std::wstring *,std::ctype<wchar_t>>(unsigned int **a1, unsigned int *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, _DWORD *a6, char a7)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  char v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int **v31;
  uint64_t *v32;
  char *v33;
  uint64_t v34;
  _DWORD *v37;
  char *v38;
  uint64_t *v39;
  char *v40;
  unsigned int **v41;
  char v43;
  char v44;
  uint64_t v45;

  v9 = a4;
  v10 = a3;
  v45 = *MEMORY[0x1E0C80C00];
  v12 = a4 - a3;
  v13 = 0xAAAAAAAAAAAAAAABLL * v12;
  v43 = a7;
  if (0xAAAAAAAAAAAAAAABLL * v12 < 0x65)
  {
    v14 = 0;
    v40 = &v44;
  }
  else
  {
    v14 = (char *)malloc_type_malloc(0xAAAAAAAAAAAAAAABLL * v12, 0x8BE91F8AuLL);
    a7 = v43;
    v40 = v14;
    if (!v14)
      std::__throw_bad_alloc();
  }
  v37 = a6;
  v15 = 0;
  if (v10 == v9)
  {
    v17 = v40;
  }
  else
  {
    v16 = v10;
    v17 = v40;
    v18 = v40;
    do
    {
      if (*((char *)v16 + 23) < 0)
        v19 = v16[1];
      else
        v19 = *((unsigned __int8 *)v16 + 23);
      v20 = v19 == 0;
      v21 = v19 == 0;
      if (v20)
        v22 = 2;
      else
        v22 = 1;
      if (v20)
        ++v15;
      v13 -= v21;
      *v18++ = v22;
      v16 += 3;
    }
    while (v16 != v9);
  }
  v23 = *a1;
  v38 = v14;
  if (*a1 != a2 && v13)
  {
    v24 = 0;
    v39 = v10;
    v41 = a1;
    while (1)
    {
      v25 = *v23;
      if ((a7 & 1) == 0)
      {
        LODWORD(v25) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a5 + 56))(a5, v25);
        a7 = v43;
      }
      if (v10 == v9)
        break;
      v26 = 0;
      v27 = v24 + 1;
      do
      {
        if (*v17 == 1)
        {
          v28 = v10;
          if (*((char *)v10 + 23) < 0)
            v28 = (uint64_t *)*v10;
          v29 = *((unsigned int *)v28 + v24);
          if ((a7 & 1) == 0)
          {
            LODWORD(v29) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a5 + 56))(a5, v29);
            a7 = v43;
          }
          if ((_DWORD)v25 == (_DWORD)v29)
          {
            if (*((char *)v10 + 23) < 0)
              v30 = v10[1];
            else
              v30 = *((unsigned __int8 *)v10 + 23);
            if (v30 == v27)
            {
              *v17 = 2;
              --v13;
              ++v15;
            }
            v26 = 1;
          }
          else
          {
            *v17 = 0;
            --v13;
          }
        }
        v10 += 3;
        ++v17;
      }
      while (v10 != v9);
      v31 = v41;
      v23 = *v41;
      if ((v26 & 1) == 0)
      {
        v10 = v39;
        v17 = v40;
        goto LABEL_53;
      }
      *v41 = ++v23;
      v10 = v39;
      v17 = v40;
      if (v15 + v13 >= 2)
      {
        v32 = v39;
        v33 = v40;
        do
        {
          if (*v33 == 2)
          {
            v34 = *((char *)v32 + 23) < 0 ? v32[1] : *((unsigned __int8 *)v32 + 23);
            if (v34 != v27)
            {
              *v33 = 0;
              --v15;
            }
          }
          v32 += 3;
          ++v33;
        }
        while (v32 != v9);
        goto LABEL_51;
      }
LABEL_53:
      ++v24;
      if (v23 == a2 || v13 == 0)
        goto LABEL_58;
    }
    v31 = v41;
LABEL_51:
    v23 = *v31;
    goto LABEL_53;
  }
LABEL_58:
  if (v23 == a2)
    *v37 |= 2u;
  if (v10 == v9)
  {
LABEL_63:
    *v37 |= 4u;
    if (!v38)
      return v9;
LABEL_64:
    free(v38);
    return v9;
  }
  while (*v17 != 2)
  {
    v10 += 3;
    ++v17;
    if (v10 == v9)
      goto LABEL_63;
  }
  v9 = v10;
  if (v38)
    goto LABEL_64;
  return v9;
}

void sub_191FFA884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
  if (a11)
    free(a11);
  _Unwind_Resume(exception_object);
}

uint64_t std::__get_up_to_n_digits[abi:ne180100]<wchar_t,wchar_t *>(unsigned int **a1, unsigned int *a2, _DWORD *a3, uint64_t a4, int a5)
{
  uint64_t v10;
  int v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v15;
  int v16;
  int v18;

  if (*a1 == a2)
  {
    v13 = 0;
    v18 = 6;
    goto LABEL_17;
  }
  v10 = **a1;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a4 + 24))(a4, 1024, v10))
  {
    v13 = 0;
    v18 = 4;
    goto LABEL_17;
  }
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a4 + 104))(a4, v10, 0);
  v12 = *a1 + 1;
  *a1 = v12;
  v13 = (v11 - 48);
  if (v12 == a2 || a5 < 2)
  {
LABEL_13:
    if (v12 != a2)
      return v13;
    v18 = 2;
LABEL_17:
    *a3 |= v18;
    return v13;
  }
  while (1)
  {
    v15 = *v12;
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a4 + 24))(a4, 1024, v15))
      return v13;
    v16 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a4 + 104))(a4, v15, 0);
    v12 = *a1 + 1;
    *a1 = v12;
    v13 = (v16 + 10 * v13 - 48);
    if (v12 == a2 || a5-- <= 2)
      goto LABEL_13;
  }
}

double std::__time_get_storage<char>::init(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  std::string *v5;
  uint64_t v6;
  std::string *v7;
  void **v8;
  void **v9;
  void **v10;
  void **v11;
  double result;
  std::string v13;
  tm v14;
  std::string::value_type __s[100];
  uint64_t v16;

  v4 = 0;
  v16 = *MEMORY[0x1E0C80C00];
  memset(&v14, 0, sizeof(v14));
  v5 = (std::string *)(a1 + 176);
  do
  {
    v14.tm_wday = v4;
    strftime_l(__s, 0x64uLL, "%A", &v14, *(locale_t *)a1);
    std::string::__assign_external(v5 - 7, __s);
    strftime_l(__s, 0x64uLL, "%a", &v14, *(locale_t *)a1);
    std::string::__assign_external(v5, __s);
    ++v4;
    ++v5;
  }
  while (v4 != 7);
  v6 = 0;
  v7 = (std::string *)(a1 + 632);
  do
  {
    v14.tm_mon = v6;
    strftime_l(__s, 0x64uLL, "%B", &v14, *(locale_t *)a1);
    std::string::__assign_external(v7 - 12, __s);
    strftime_l(__s, 0x64uLL, "%b", &v14, *(locale_t *)a1);
    std::string::__assign_external(v7, __s);
    ++v6;
    ++v7;
  }
  while (v6 != 12);
  v14.tm_hour = 1;
  strftime_l(__s, 0x64uLL, "%p", &v14, *(locale_t *)a1);
  std::string::__assign_external((std::string *)(a1 + 920), __s);
  v14.tm_hour = 13;
  strftime_l(__s, 0x64uLL, "%p", &v14, *(locale_t *)a1);
  std::string::__assign_external((std::string *)(a1 + 944), __s);
  std::__time_get_storage<char>::__analyze(a1, 99, a2, &v13);
  v8 = (void **)(a1 + 968);
  if (*(char *)(a1 + 991) < 0)
    operator delete(*v8);
  *(_OWORD *)v8 = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 984) = *((_QWORD *)&v13.__r_.__value_.__l + 2);
  std::__time_get_storage<char>::__analyze(a1, 114, a2, &v13);
  v9 = (void **)(a1 + 992);
  if (*(char *)(a1 + 1015) < 0)
    operator delete(*v9);
  *(_OWORD *)v9 = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 1008) = *((_QWORD *)&v13.__r_.__value_.__l + 2);
  std::__time_get_storage<char>::__analyze(a1, 120, a2, &v13);
  v10 = (void **)(a1 + 1016);
  if (*(char *)(a1 + 1039) < 0)
    operator delete(*v10);
  *(_OWORD *)v10 = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 1032) = *((_QWORD *)&v13.__r_.__value_.__l + 2);
  std::__time_get_storage<char>::__analyze(a1, 88, a2, &v13);
  v11 = (void **)(a1 + 1040);
  if (*(char *)(a1 + 1063) < 0)
    operator delete(*v11);
  result = *(double *)&v13.__r_.__value_.__l.__data_;
  *(_OWORD *)v11 = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 1056) = *((_QWORD *)&v13.__r_.__value_.__l + 2);
  return result;
}

double std::__time_get_storage<wchar_t>::init(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::wstring *v5;
  std::wstring::size_type v6;
  std::wstring::size_type v7;
  uint64_t v8;
  std::wstring *v9;
  std::wstring::size_type v10;
  std::wstring::size_type v11;
  std::wstring::size_type v12;
  std::wstring::size_type v13;
  void **v14;
  void **v15;
  void **v16;
  void **v17;
  double result;
  std::wstring v19;
  char *v20;
  tm v21;
  mbstate_t v22;
  std::wstring::value_type v23[100];
  char v24[100];
  uint64_t v25;

  v4 = 0;
  v25 = *MEMORY[0x1E0C80C00];
  memset(&v21, 0, sizeof(v21));
  v5 = (std::wstring *)(a1 + 176);
  memset(&v22, 0, sizeof(v22));
  do
  {
    v21.tm_wday = v4;
    strftime_l(v24, 0x64uLL, "%A", &v21, *(locale_t *)a1);
    memset(&v22, 0, sizeof(v22));
    v19.__r_.__value_.__r.__words[0] = (std::wstring::size_type)v24;
    v6 = mbsrtowcs_l(v23, (const char **)&v19, 0x64uLL, &v22, *(locale_t *)a1);
    if (v6 + 1 <= 1)
      std::__throw_runtime_error("locale not supported");
    std::wstring::__assign_trivial[abi:ne180100]<wchar_t *,wchar_t *>(v5 - 7, v23, &v23[v6], v6);
    strftime_l(v24, 0x64uLL, "%a", &v21, *(locale_t *)a1);
    memset(&v22, 0, sizeof(v22));
    v19.__r_.__value_.__r.__words[0] = (std::wstring::size_type)v24;
    v7 = mbsrtowcs_l(v23, (const char **)&v19, 0x64uLL, &v22, *(locale_t *)a1);
    if (v7 + 1 <= 1)
      std::__throw_runtime_error("locale not supported");
    std::wstring::__assign_trivial[abi:ne180100]<wchar_t *,wchar_t *>(v5, v23, &v23[v7], v7);
    ++v4;
    ++v5;
  }
  while (v4 != 7);
  v8 = 0;
  v9 = (std::wstring *)(a1 + 632);
  do
  {
    v21.tm_mon = v8;
    strftime_l(v24, 0x64uLL, "%B", &v21, *(locale_t *)a1);
    memset(&v22, 0, sizeof(v22));
    v19.__r_.__value_.__r.__words[0] = (std::wstring::size_type)v24;
    v10 = mbsrtowcs_l(v23, (const char **)&v19, 0x64uLL, &v22, *(locale_t *)a1);
    if (v10 + 1 <= 1)
      std::__throw_runtime_error("locale not supported");
    std::wstring::__assign_trivial[abi:ne180100]<wchar_t *,wchar_t *>(v9 - 12, v23, &v23[v10], v10);
    strftime_l(v24, 0x64uLL, "%b", &v21, *(locale_t *)a1);
    memset(&v22, 0, sizeof(v22));
    v19.__r_.__value_.__r.__words[0] = (std::wstring::size_type)v24;
    v11 = mbsrtowcs_l(v23, (const char **)&v19, 0x64uLL, &v22, *(locale_t *)a1);
    if (v11 + 1 <= 1)
      std::__throw_runtime_error("locale not supported");
    std::wstring::__assign_trivial[abi:ne180100]<wchar_t *,wchar_t *>(v9, v23, &v23[v11], v11);
    ++v8;
    ++v9;
  }
  while (v8 != 12);
  v21.tm_hour = 1;
  strftime_l(v24, 0x64uLL, "%p", &v21, *(locale_t *)a1);
  memset(&v22, 0, sizeof(v22));
  v20 = v24;
  v12 = mbsrtowcs_l(v23, (const char **)&v20, 0x64uLL, &v22, *(locale_t *)a1);
  if (v12 == -1)
    std::__throw_runtime_error("locale not supported");
  std::wstring::__assign_trivial[abi:ne180100]<wchar_t *,wchar_t *>((std::wstring *)(a1 + 920), v23, &v23[v12], v12);
  v21.tm_hour = 13;
  strftime_l(v24, 0x64uLL, "%p", &v21, *(locale_t *)a1);
  memset(&v22, 0, sizeof(v22));
  v20 = v24;
  v13 = mbsrtowcs_l(v23, (const char **)&v20, 0x64uLL, &v22, *(locale_t *)a1);
  if (v13 == -1)
    std::__throw_runtime_error("locale not supported");
  std::wstring::__assign_trivial[abi:ne180100]<wchar_t *,wchar_t *>((std::wstring *)(a1 + 944), v23, &v23[v13], v13);
  std::__time_get_storage<wchar_t>::__analyze(a1, 99, a2, &v19);
  v14 = (void **)(a1 + 968);
  if (*(char *)(a1 + 991) < 0)
    operator delete(*v14);
  *(_OWORD *)v14 = *(_OWORD *)&v19.__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 984) = *((_QWORD *)&v19.__r_.__value_.__l + 2);
  std::__time_get_storage<wchar_t>::__analyze(a1, 114, a2, &v19);
  v15 = (void **)(a1 + 992);
  if (*(char *)(a1 + 1015) < 0)
    operator delete(*v15);
  *(_OWORD *)v15 = *(_OWORD *)&v19.__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 1008) = *((_QWORD *)&v19.__r_.__value_.__l + 2);
  std::__time_get_storage<wchar_t>::__analyze(a1, 120, a2, &v19);
  v16 = (void **)(a1 + 1016);
  if (*(char *)(a1 + 1039) < 0)
    operator delete(*v16);
  *(_OWORD *)v16 = *(_OWORD *)&v19.__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 1032) = *((_QWORD *)&v19.__r_.__value_.__l + 2);
  std::__time_get_storage<wchar_t>::__analyze(a1, 88, a2, &v19);
  v17 = (void **)(a1 + 1040);
  if (*(char *)(a1 + 1063) < 0)
    operator delete(*v17);
  result = *(double *)&v19.__r_.__value_.__l.__data_;
  *(_OWORD *)v17 = *(_OWORD *)&v19.__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 1056) = *((_QWORD *)&v19.__r_.__value_.__l + 2);
  return result;
}

std::__time_get *std::__time_get_storage<char>::__time_get_storage(std::__time_get *a1, const char *a2)
{
  std::__time_get *v4;
  std::ctype_byname<char> v6;

  v4 = std::__time_get::__time_get(a1, a2);
  bzero(&v4[1], 0x420uLL);
  std::ctype_byname<char>::ctype_byname(&v6, a2, 1uLL);
  v6.__vftable = (std::ctype_byname<char>_vtbl *)&off_1E2E5B960;
  std::__time_get_storage<char>::init((uint64_t)a1, &v6);
  std::ctype_byname<char>::~ctype_byname(&v6);
  return a1;
}

void sub_191FFB1D4(_Unwind_Exception *a1, std::ctype_byname<char> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  std::ctype_byname<char>::~ctype_byname((std::ctype_byname<char> *)&a10);
  if (*(char *)(v10 + 1063) < 0)
    operator delete(*(void **)(v10 + 1040));
  if (*(char *)(v10 + 1039) < 0)
    operator delete(*(void **)(v10 + 1016));
  if (*(char *)(v10 + 1015) < 0)
    operator delete(*(void **)(v10 + 992));
  if (*(char *)(v10 + 991) < 0)
    operator delete(*(void **)(v10 + 968));
  v12 = 0;
  while (1)
  {
    if (*(char *)(v10 + v12 + 967) < 0)
      operator delete(*(void **)(v10 + v12 + 944));
    v12 -= 24;
    if (v12 == -48)
    {
      v13 = 576;
      while (1)
      {
        if (*(char *)(v10 + v13 + 343) < 0)
          operator delete(*(void **)(v10 + v13 + 320));
        v13 -= 24;
        if (!v13)
        {
          while (1)
          {
            if (*(char *)(v10 + v13 + 343) < 0)
              operator delete(*(void **)(v10 + v13 + 320));
            v13 -= 24;
            if (v13 == -336)
            {
              std::__time_get::~__time_get((std::__time_get *)v10);
              _Unwind_Resume(a1);
            }
          }
        }
      }
    }
  }
}

std::__time_get *std::__time_get_storage<char>::__time_get_storage(std::__time_get *a1, const std::string *a2)
{
  std::__time_get *v4;
  std::ctype_byname<char> v6;

  v4 = std::__time_get::__time_get(a1, a2);
  bzero(&v4[1], 0x420uLL);
  std::ctype_byname<char>::ctype_byname(&v6, a2, 1uLL);
  v6.__vftable = (std::ctype_byname<char>_vtbl *)&off_1E2E5B960;
  std::__time_get_storage<char>::init((uint64_t)a1, &v6);
  std::ctype_byname<char>::~ctype_byname(&v6);
  return a1;
}

void sub_191FFB318(_Unwind_Exception *a1, std::ctype_byname<char> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  std::ctype_byname<char>::~ctype_byname((std::ctype_byname<char> *)&a10);
  if (*(char *)(v10 + 1063) < 0)
    operator delete(*(void **)(v10 + 1040));
  if (*(char *)(v10 + 1039) < 0)
    operator delete(*(void **)(v10 + 1016));
  if (*(char *)(v10 + 1015) < 0)
    operator delete(*(void **)(v10 + 992));
  if (*(char *)(v10 + 991) < 0)
    operator delete(*(void **)(v10 + 968));
  v12 = 0;
  while (1)
  {
    if (*(char *)(v10 + v12 + 967) < 0)
      operator delete(*(void **)(v10 + v12 + 944));
    v12 -= 24;
    if (v12 == -48)
    {
      v13 = 576;
      while (1)
      {
        if (*(char *)(v10 + v13 + 343) < 0)
          operator delete(*(void **)(v10 + v13 + 320));
        v13 -= 24;
        if (!v13)
        {
          while (1)
          {
            if (*(char *)(v10 + v13 + 343) < 0)
              operator delete(*(void **)(v10 + v13 + 320));
            v13 -= 24;
            if (v13 == -336)
            {
              std::__time_get::~__time_get((std::__time_get *)v10);
              _Unwind_Resume(a1);
            }
          }
        }
      }
    }
  }
}

std::__time_get *std::__time_get_storage<wchar_t>::__time_get_storage(std::__time_get *a1, const char *a2)
{
  std::__time_get *v4;
  std::ctype_byname<wchar_t> v6;

  v4 = std::__time_get::__time_get(a1, a2);
  bzero(&v4[1], 0x420uLL);
  std::ctype_byname<wchar_t>::ctype_byname(&v6, a2, 1uLL);
  v6.__vftable = (std::ctype_byname<wchar_t>_vtbl *)&off_1E2E5B9E0;
  std::__time_get_storage<wchar_t>::init((uint64_t)a1, (uint64_t)&v6);
  std::ctype_byname<wchar_t>::~ctype_byname(&v6);
  return a1;
}

void sub_191FFB458(_Unwind_Exception *a1, std::ctype_byname<wchar_t> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  std::ctype_byname<wchar_t>::~ctype_byname((std::ctype_byname<wchar_t> *)&a10);
  if (*(char *)(v10 + 1063) < 0)
    operator delete(*(void **)(v10 + 1040));
  if (*(char *)(v10 + 1039) < 0)
    operator delete(*(void **)(v10 + 1016));
  if (*(char *)(v10 + 1015) < 0)
    operator delete(*(void **)(v10 + 992));
  if (*(char *)(v10 + 991) < 0)
    operator delete(*(void **)(v10 + 968));
  v12 = 0;
  while (1)
  {
    if (*(char *)(v10 + v12 + 967) < 0)
      operator delete(*(void **)(v10 + v12 + 944));
    v12 -= 24;
    if (v12 == -48)
    {
      v13 = 576;
      while (1)
      {
        if (*(char *)(v10 + v13 + 343) < 0)
          operator delete(*(void **)(v10 + v13 + 320));
        v13 -= 24;
        if (!v13)
        {
          while (1)
          {
            if (*(char *)(v10 + v13 + 343) < 0)
              operator delete(*(void **)(v10 + v13 + 320));
            v13 -= 24;
            if (v13 == -336)
            {
              std::__time_get::~__time_get((std::__time_get *)v10);
              _Unwind_Resume(a1);
            }
          }
        }
      }
    }
  }
}

std::__time_get *std::__time_get_storage<wchar_t>::__time_get_storage(std::__time_get *a1, const std::string *a2)
{
  std::__time_get *v4;
  std::ctype_byname<wchar_t> v6;

  v4 = std::__time_get::__time_get(a1, a2);
  bzero(&v4[1], 0x420uLL);
  std::ctype_byname<wchar_t>::ctype_byname(&v6, a2, 1uLL);
  v6.__vftable = (std::ctype_byname<wchar_t>_vtbl *)&off_1E2E5B9E0;
  std::__time_get_storage<wchar_t>::init((uint64_t)a1, (uint64_t)&v6);
  std::ctype_byname<wchar_t>::~ctype_byname(&v6);
  return a1;
}

void sub_191FFB59C(_Unwind_Exception *a1, std::ctype_byname<wchar_t> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  std::ctype_byname<wchar_t>::~ctype_byname((std::ctype_byname<wchar_t> *)&a10);
  if (*(char *)(v10 + 1063) < 0)
    operator delete(*(void **)(v10 + 1040));
  if (*(char *)(v10 + 1039) < 0)
    operator delete(*(void **)(v10 + 1016));
  if (*(char *)(v10 + 1015) < 0)
    operator delete(*(void **)(v10 + 992));
  if (*(char *)(v10 + 991) < 0)
    operator delete(*(void **)(v10 + 968));
  v12 = 0;
  while (1)
  {
    if (*(char *)(v10 + v12 + 967) < 0)
      operator delete(*(void **)(v10 + v12 + 944));
    v12 -= 24;
    if (v12 == -48)
    {
      v13 = 576;
      while (1)
      {
        if (*(char *)(v10 + v13 + 343) < 0)
          operator delete(*(void **)(v10 + v13 + 320));
        v13 -= 24;
        if (!v13)
        {
          while (1)
          {
            if (*(char *)(v10 + v13 + 343) < 0)
              operator delete(*(void **)(v10 + v13 + 320));
            v13 -= 24;
            if (v13 == -336)
            {
              std::__time_get::~__time_get((std::__time_get *)v10);
              _Unwind_Resume(a1);
            }
          }
        }
      }
    }
  }
}

uint64_t std::__time_get_storage<char>::__do_date_order(uint64_t a1)
{
  _QWORD *v1;
  unsigned int i;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;

  v1 = (_QWORD *)(a1 + 1016);
  for (i = 5; ; ++i)
  {
    v3 = *(unsigned __int8 *)(a1 + 1039);
    if ((*(_BYTE *)(a1 + 1039) & 0x80) != 0)
      v3 = *(_QWORD *)(a1 + 1024);
    v4 = i - 5;
    if (v3 <= v4)
      break;
    v5 = (_QWORD *)(a1 + 1016);
    if ((*(_BYTE *)(a1 + 1039) & 0x80) != 0)
      v5 = (_QWORD *)*v1;
    if (*((_BYTE *)v5 + v4) == 37)
      break;
  }
  v6 = (_QWORD *)(a1 + 1016);
  if ((*(_BYTE *)(a1 + 1039) & 0x80) != 0)
    v6 = (_QWORD *)*v1;
  v7 = *((char *)v6 + i - 4);
  if (v7 > 108)
  {
    if (v7 == 109)
    {
      while (1)
      {
        v21 = *(unsigned __int8 *)(a1 + 1039);
        if ((*(_BYTE *)(a1 + 1039) & 0x80) != 0)
          v21 = *(_QWORD *)(a1 + 1024);
        v22 = i - 3;
        if (v21 <= v22)
          break;
        v20 = (_QWORD *)(a1 + 1016);
        if ((*(_BYTE *)(a1 + 1039) & 0x80) != 0)
          v20 = (_QWORD *)*v1;
        if (*((_BYTE *)v20 + v22) == 37)
          break;
        ++i;
      }
      v23 = *(unsigned __int8 *)(a1 + 1039);
      if ((*(_BYTE *)(a1 + 1039) & 0x80) != 0)
        v23 = *(_QWORD *)(a1 + 1024);
      if (v23 != v22)
      {
        v24 = (_QWORD *)(a1 + 1016);
        if ((*(_BYTE *)(a1 + 1039) & 0x80) != 0)
          v24 = (_QWORD *)*v1;
        if (*((_BYTE *)v24 + i - 2) == 100)
        {
          while (1)
          {
            v25 = *(unsigned __int8 *)(a1 + 1039);
            if ((*(_BYTE *)(a1 + 1039) & 0x80) != 0)
              v25 = *(_QWORD *)(a1 + 1024);
            v26 = i - 1;
            if (v25 <= v26)
              break;
            v27 = (_QWORD *)(a1 + 1016);
            if ((*(_BYTE *)(a1 + 1039) & 0x80) != 0)
              v27 = (_QWORD *)*v1;
            if (*((_BYTE *)v27 + v26) == 37)
              break;
            ++i;
          }
          v39 = *(unsigned __int8 *)(a1 + 1039);
          if ((*(_BYTE *)(a1 + 1039) & 0x80) != 0)
            v39 = *(_QWORD *)(a1 + 1024);
          if (v39 != v26)
          {
            v40 = (_QWORD *)(a1 + 1016);
            if ((*(_BYTE *)(a1 + 1039) & 0x80) != 0)
              v40 = (_QWORD *)*v1;
            if (*((_BYTE *)v40 + i) == 121)
              return 2;
            if ((*(_BYTE *)(a1 + 1039) & 0x80) != 0)
              v1 = (_QWORD *)*v1;
            if (*((_BYTE *)v1 + i) == 89)
              return 2;
          }
        }
      }
      return 0;
    }
    if (v7 != 121)
      return 0;
    while (1)
    {
LABEL_28:
      v12 = *(unsigned __int8 *)(a1 + 1039);
      if ((*(_BYTE *)(a1 + 1039) & 0x80) != 0)
        v12 = *(_QWORD *)(a1 + 1024);
      v13 = i - 3;
      if (v12 <= v13)
        break;
      v11 = a1 + 1016;
      if ((*(_BYTE *)(a1 + 1039) & 0x80) != 0)
        v11 = *v1;
      if (*(_BYTE *)(v11 + v13) == 37)
        break;
      ++i;
    }
    v14 = *(unsigned __int8 *)(a1 + 1039);
    if ((*(_BYTE *)(a1 + 1039) & 0x80) != 0)
      v14 = *(_QWORD *)(a1 + 1024);
    if (v14 != v13)
    {
      v15 = a1 + 1016;
      if ((*(_BYTE *)(a1 + 1039) & 0x80) != 0)
        v15 = *v1;
      v16 = *(char *)(v15 + i - 2);
      if (v16 == 100)
      {
        while (1)
        {
          v29 = *(unsigned __int8 *)(a1 + 1039);
          if ((*(_BYTE *)(a1 + 1039) & 0x80) != 0)
            v29 = *(_QWORD *)(a1 + 1024);
          v30 = i - 1;
          if (v29 <= v30)
            break;
          v28 = a1 + 1016;
          if ((*(_BYTE *)(a1 + 1039) & 0x80) != 0)
            v28 = *v1;
          if (*(_BYTE *)(v28 + v30) == 37)
            break;
          ++i;
        }
        v31 = *(unsigned __int8 *)(a1 + 1039);
        if ((*(_BYTE *)(a1 + 1039) & 0x80) != 0)
          v31 = *(_QWORD *)(a1 + 1024);
        if (v31 != v30)
        {
          if ((*(_BYTE *)(a1 + 1039) & 0x80) != 0)
            v1 = (_QWORD *)*v1;
          if (*((_BYTE *)v1 + i) == 109)
            return 4;
        }
      }
      else if (v16 == 109)
      {
        while (1)
        {
          v17 = *(unsigned __int8 *)(a1 + 1039);
          if ((*(_BYTE *)(a1 + 1039) & 0x80) != 0)
            v17 = *(_QWORD *)(a1 + 1024);
          v18 = i - 1;
          if (v17 <= v18)
            break;
          v19 = a1 + 1016;
          if ((*(_BYTE *)(a1 + 1039) & 0x80) != 0)
            v19 = *v1;
          if (*(_BYTE *)(v19 + v18) == 37)
            break;
          ++i;
        }
        v38 = *(unsigned __int8 *)(a1 + 1039);
        if ((*(_BYTE *)(a1 + 1039) & 0x80) != 0)
          v38 = *(_QWORD *)(a1 + 1024);
        if (v38 != v18)
        {
          if ((*(_BYTE *)(a1 + 1039) & 0x80) != 0)
            v1 = (_QWORD *)*v1;
          if (*((_BYTE *)v1 + i) == 100)
            return 3;
        }
      }
    }
    return 0;
  }
  if (v7 == 89)
    goto LABEL_28;
  if (v7 != 100)
    return 0;
  while (1)
  {
    v8 = *(unsigned __int8 *)(a1 + 1039);
    if ((*(_BYTE *)(a1 + 1039) & 0x80) != 0)
      v8 = *(_QWORD *)(a1 + 1024);
    v9 = i - 3;
    if (v8 <= v9)
      break;
    v10 = a1 + 1016;
    if ((*(_BYTE *)(a1 + 1039) & 0x80) != 0)
      v10 = *v1;
    if (*(_BYTE *)(v10 + v9) == 37)
      break;
    ++i;
  }
  v33 = *(unsigned __int8 *)(a1 + 1039);
  if ((*(_BYTE *)(a1 + 1039) & 0x80) != 0)
    v33 = *(_QWORD *)(a1 + 1024);
  if (v33 == v9)
    return 0;
  v34 = a1 + 1016;
  if ((*(_BYTE *)(a1 + 1039) & 0x80) != 0)
    v34 = *v1;
  if (*(_BYTE *)(v34 + i - 2) != 109)
    return 0;
  while (1)
  {
    v35 = *(unsigned __int8 *)(a1 + 1039);
    if ((*(_BYTE *)(a1 + 1039) & 0x80) != 0)
      v35 = *(_QWORD *)(a1 + 1024);
    v36 = i - 1;
    if (v35 <= v36)
      break;
    v37 = a1 + 1016;
    if ((*(_BYTE *)(a1 + 1039) & 0x80) != 0)
      v37 = *v1;
    if (*(_BYTE *)(v37 + v36) == 37)
      break;
    ++i;
  }
  v41 = *(unsigned __int8 *)(a1 + 1039);
  if ((*(_BYTE *)(a1 + 1039) & 0x80) != 0)
    v41 = *(_QWORD *)(a1 + 1024);
  if (v41 == v36)
    return 0;
  v42 = a1 + 1016;
  if ((*(_BYTE *)(a1 + 1039) & 0x80) != 0)
    v42 = *v1;
  if (*(_BYTE *)(v42 + i) != 121)
  {
    if ((*(_BYTE *)(a1 + 1039) & 0x80) != 0)
      v1 = (_QWORD *)*v1;
    if (*((_BYTE *)v1 + i) != 89)
      return 0;
  }
  return 1;
}

uint64_t std::__time_get_storage<wchar_t>::__do_date_order(uint64_t a1)
{
  _QWORD *v1;
  unsigned int i;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;

  v1 = (_QWORD *)(a1 + 1016);
  for (i = 5; ; ++i)
  {
    v3 = *(unsigned __int8 *)(a1 + 1039);
    if ((*(_BYTE *)(a1 + 1039) & 0x80) != 0)
      v3 = *(_QWORD *)(a1 + 1024);
    v4 = i - 5;
    if (v3 <= v4)
      break;
    v5 = (_QWORD *)(a1 + 1016);
    if ((*(_BYTE *)(a1 + 1039) & 0x80) != 0)
      v5 = (_QWORD *)*v1;
    if (*((_DWORD *)v5 + v4) == 37)
      break;
  }
  v6 = (_QWORD *)(a1 + 1016);
  if ((*(_BYTE *)(a1 + 1039) & 0x80) != 0)
    v6 = (_QWORD *)*v1;
  v7 = *((_DWORD *)v6 + i - 4);
  if (v7 > 108)
  {
    if (v7 == 109)
    {
      while (1)
      {
        v21 = *(unsigned __int8 *)(a1 + 1039);
        if ((*(_BYTE *)(a1 + 1039) & 0x80) != 0)
          v21 = *(_QWORD *)(a1 + 1024);
        v22 = i - 3;
        if (v21 <= v22)
          break;
        v20 = (_QWORD *)(a1 + 1016);
        if ((*(_BYTE *)(a1 + 1039) & 0x80) != 0)
          v20 = (_QWORD *)*v1;
        if (*((_DWORD *)v20 + v22) == 37)
          break;
        ++i;
      }
      v23 = *(unsigned __int8 *)(a1 + 1039);
      if ((*(_BYTE *)(a1 + 1039) & 0x80) != 0)
        v23 = *(_QWORD *)(a1 + 1024);
      if (v23 != v22)
      {
        v24 = (_QWORD *)(a1 + 1016);
        if ((*(_BYTE *)(a1 + 1039) & 0x80) != 0)
          v24 = (_QWORD *)*v1;
        if (*((_DWORD *)v24 + i - 2) == 100)
        {
          while (1)
          {
            v25 = *(unsigned __int8 *)(a1 + 1039);
            if ((*(_BYTE *)(a1 + 1039) & 0x80) != 0)
              v25 = *(_QWORD *)(a1 + 1024);
            v26 = i - 1;
            if (v25 <= v26)
              break;
            v27 = (_QWORD *)(a1 + 1016);
            if ((*(_BYTE *)(a1 + 1039) & 0x80) != 0)
              v27 = (_QWORD *)*v1;
            if (*((_DWORD *)v27 + v26) == 37)
              break;
            ++i;
          }
          v39 = *(unsigned __int8 *)(a1 + 1039);
          if ((*(_BYTE *)(a1 + 1039) & 0x80) != 0)
            v39 = *(_QWORD *)(a1 + 1024);
          if (v39 != v26)
          {
            v40 = (_QWORD *)(a1 + 1016);
            if ((*(_BYTE *)(a1 + 1039) & 0x80) != 0)
              v40 = (_QWORD *)*v1;
            if (*((_DWORD *)v40 + i) == 121)
              return 2;
            if ((*(_BYTE *)(a1 + 1039) & 0x80) != 0)
              v1 = (_QWORD *)*v1;
            if (*((_DWORD *)v1 + i) == 89)
              return 2;
          }
        }
      }
      return 0;
    }
    if (v7 != 121)
      return 0;
    while (1)
    {
LABEL_28:
      v12 = *(unsigned __int8 *)(a1 + 1039);
      if ((*(_BYTE *)(a1 + 1039) & 0x80) != 0)
        v12 = *(_QWORD *)(a1 + 1024);
      v13 = i - 3;
      if (v12 <= v13)
        break;
      v11 = a1 + 1016;
      if ((*(_BYTE *)(a1 + 1039) & 0x80) != 0)
        v11 = *v1;
      if (*(_DWORD *)(v11 + 4 * v13) == 37)
        break;
      ++i;
    }
    v14 = *(unsigned __int8 *)(a1 + 1039);
    if ((*(_BYTE *)(a1 + 1039) & 0x80) != 0)
      v14 = *(_QWORD *)(a1 + 1024);
    if (v14 != v13)
    {
      v15 = a1 + 1016;
      if ((*(_BYTE *)(a1 + 1039) & 0x80) != 0)
        v15 = *v1;
      v16 = *(_DWORD *)(v15 + 4 * (i - 2));
      if (v16 == 100)
      {
        while (1)
        {
          v29 = *(unsigned __int8 *)(a1 + 1039);
          if ((*(_BYTE *)(a1 + 1039) & 0x80) != 0)
            v29 = *(_QWORD *)(a1 + 1024);
          v30 = i - 1;
          if (v29 <= v30)
            break;
          v28 = a1 + 1016;
          if ((*(_BYTE *)(a1 + 1039) & 0x80) != 0)
            v28 = *v1;
          if (*(_DWORD *)(v28 + 4 * v30) == 37)
            break;
          ++i;
        }
        v31 = *(unsigned __int8 *)(a1 + 1039);
        if ((*(_BYTE *)(a1 + 1039) & 0x80) != 0)
          v31 = *(_QWORD *)(a1 + 1024);
        if (v31 != v30)
        {
          if ((*(_BYTE *)(a1 + 1039) & 0x80) != 0)
            v1 = (_QWORD *)*v1;
          if (*((_DWORD *)v1 + i) == 109)
            return 4;
        }
      }
      else if (v16 == 109)
      {
        while (1)
        {
          v17 = *(unsigned __int8 *)(a1 + 1039);
          if ((*(_BYTE *)(a1 + 1039) & 0x80) != 0)
            v17 = *(_QWORD *)(a1 + 1024);
          v18 = i - 1;
          if (v17 <= v18)
            break;
          v19 = a1 + 1016;
          if ((*(_BYTE *)(a1 + 1039) & 0x80) != 0)
            v19 = *v1;
          if (*(_DWORD *)(v19 + 4 * v18) == 37)
            break;
          ++i;
        }
        v38 = *(unsigned __int8 *)(a1 + 1039);
        if ((*(_BYTE *)(a1 + 1039) & 0x80) != 0)
          v38 = *(_QWORD *)(a1 + 1024);
        if (v38 != v18)
        {
          if ((*(_BYTE *)(a1 + 1039) & 0x80) != 0)
            v1 = (_QWORD *)*v1;
          if (*((_DWORD *)v1 + i) == 100)
            return 3;
        }
      }
    }
    return 0;
  }
  if (v7 == 89)
    goto LABEL_28;
  if (v7 != 100)
    return 0;
  while (1)
  {
    v8 = *(unsigned __int8 *)(a1 + 1039);
    if ((*(_BYTE *)(a1 + 1039) & 0x80) != 0)
      v8 = *(_QWORD *)(a1 + 1024);
    v9 = i - 3;
    if (v8 <= v9)
      break;
    v10 = a1 + 1016;
    if ((*(_BYTE *)(a1 + 1039) & 0x80) != 0)
      v10 = *v1;
    if (*(_DWORD *)(v10 + 4 * v9) == 37)
      break;
    ++i;
  }
  v33 = *(unsigned __int8 *)(a1 + 1039);
  if ((*(_BYTE *)(a1 + 1039) & 0x80) != 0)
    v33 = *(_QWORD *)(a1 + 1024);
  if (v33 == v9)
    return 0;
  v34 = a1 + 1016;
  if ((*(_BYTE *)(a1 + 1039) & 0x80) != 0)
    v34 = *v1;
  if (*(_DWORD *)(v34 + 4 * (i - 2)) != 109)
    return 0;
  while (1)
  {
    v35 = *(unsigned __int8 *)(a1 + 1039);
    if ((*(_BYTE *)(a1 + 1039) & 0x80) != 0)
      v35 = *(_QWORD *)(a1 + 1024);
    v36 = i - 1;
    if (v35 <= v36)
      break;
    v37 = a1 + 1016;
    if ((*(_BYTE *)(a1 + 1039) & 0x80) != 0)
      v37 = *v1;
    if (*(_DWORD *)(v37 + 4 * v36) == 37)
      break;
    ++i;
  }
  v41 = *(unsigned __int8 *)(a1 + 1039);
  if ((*(_BYTE *)(a1 + 1039) & 0x80) != 0)
    v41 = *(_QWORD *)(a1 + 1024);
  if (v41 == v36)
    return 0;
  v42 = a1 + 1016;
  if ((*(_BYTE *)(a1 + 1039) & 0x80) != 0)
    v42 = *v1;
  if (*(_DWORD *)(v42 + 4 * i) != 121)
  {
    if ((*(_BYTE *)(a1 + 1039) & 0x80) != 0)
      v1 = (_QWORD *)*v1;
    if (*((_DWORD *)v1 + i) != 89)
      return 0;
  }
  return 1;
}

std::__time_put *__cdecl std::__time_put::__time_put(std::__time_put *this, const char *__nm)
{
  _xlocale *v4;
  std::string *v6;
  std::string v7;
  std::string v8;

  v4 = newlocale(63, __nm, 0);
  this->__loc_ = v4;
  if (!v4)
  {
    std::string::basic_string[abi:ne180100]<0>(&v7, (char *)__nm);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("time_put_byname failed to construct for ", &v7, &v8);
    if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v6 = &v8;
    else
      v6 = (std::string *)v8.__r_.__value_.__r.__words[0];
    std::__throw_runtime_error((const char *)v6);
  }
  return this;
}

void sub_191FFBE24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

std::__time_put *__cdecl std::__time_put::__time_put(std::__time_put *this, const std::string *__nm)
{
  std::string *v2;
  _xlocale *v4;
  const char *v6;
  void *v7[2];
  char v8;

  v2 = (std::string *)__nm;
  if ((__nm->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    __nm = (const std::string *)__nm->__r_.__value_.__r.__words[0];
  v4 = newlocale(63, (const char *)__nm, 0);
  this->__loc_ = v4;
  if (!v4)
  {
    std::operator+<char>("time_put_byname failed to construct for ", (const void **)&v2->__r_.__value_.__l.__data_, v7);
    if (v8 >= 0)
      v6 = (const char *)v7;
    else
      v6 = (const char *)v7[0];
    std::__throw_runtime_error(v6);
  }
  return this;
}

void sub_191FFBEDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__time_put::~__time_put(std::__time_put *this)
{
  _xlocale *loc;

  loc = this->__loc_;
  if (loc)
    freelocale(loc);
}

void std::moneypunct_byname<char,false>::init(uint64_t a1, char *a2)
{
  _xlocale *v4;
  lconv *v5;
  _xlocale *v6;
  _xlocale *v7;
  int frac_digits;
  std::string *v9;
  std::string *v10;
  std::string *v11;
  std::string v12;
  std::string v13;
  _xlocale *v14;

  v4 = newlocale(63, a2, 0);
  v14 = v4;
  if (!v4)
  {
    std::string::basic_string[abi:ne180100]<0>(&v12, a2);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("moneypunct_byname failed to construct for ", &v12, &v13);
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v13;
    else
      v11 = (std::string *)v13.__r_.__value_.__r.__words[0];
    std::__throw_runtime_error((const char *)v11);
  }
  v5 = localeconv_l(v4);
  if (!std::checked_string_to_char_convert((std::__1 *)(a1 + 16), v5->mon_decimal_point, v14, v6))
    *(_BYTE *)(a1 + 16) = 127;
  if (!std::checked_string_to_char_convert((std::__1 *)(a1 + 17), v5->mon_thousands_sep, v14, v7))
    *(_BYTE *)(a1 + 17) = 127;
  std::string::__assign_external((std::string *)(a1 + 24), v5->mon_grouping);
  std::string::__assign_external((std::string *)(a1 + 48), v5->currency_symbol);
  frac_digits = v5->frac_digits;
  if (frac_digits == 127)
    LOBYTE(frac_digits) = 0;
  *(_DWORD *)(a1 + 120) = (char)frac_digits;
  v9 = (std::string *)(a1 + 72);
  if (v5->p_sign_posn)
  {
    std::string::__assign_external(v9, v5->positive_sign);
  }
  else
  {
    if (*(char *)(a1 + 95) < 0)
    {
      *(_QWORD *)(a1 + 80) = 2;
      v9 = *(std::string **)(a1 + 72);
    }
    else
    {
      *(_BYTE *)(a1 + 95) = 2;
    }
    strcpy((char *)v9, "()");
  }
  v10 = (std::string *)(a1 + 96);
  if (v5->n_sign_posn)
  {
    std::string::__assign_external(v10, v5->negative_sign);
  }
  else
  {
    if (*(char *)(a1 + 119) < 0)
    {
      *(_QWORD *)(a1 + 104) = 2;
      v10 = *(std::string **)(a1 + 96);
    }
    else
    {
      *(_BYTE *)(a1 + 119) = 2;
    }
    strcpy((char *)v10, "()");
  }
  if (*(char *)(a1 + 71) < 0)
    std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)(a1 + 48), *(_QWORD *)(a1 + 56));
  else
    v13 = *(std::string *)(a1 + 48);
  std::__init_pat<char>(a1 + 124, &v13, 0, v5->p_cs_precedes, v5->p_sep_by_space, v5->p_sign_posn);
  std::__init_pat<char>(a1 + 128, (std::string *)(a1 + 48), 0, v5->n_cs_precedes, v5->n_sep_by_space, v5->n_sign_posn);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  std::__libcpp_unique_locale::~__libcpp_unique_locale(&v14);
}

void sub_191FFC128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  std::__libcpp_unique_locale::~__libcpp_unique_locale((_xlocale **)(v21 - 40));
  _Unwind_Resume(a1);
}

void std::__init_pat<char>(uint64_t a1, std::string *this, int a3, int a4, int a5, int a6)
{
  std::string *v8;
  std::string::size_type size;
  _BOOL4 v11;
  std::string::size_type v12;
  std::string *v13;
  int v14;
  __int16 v15;
  __int16 v16;
  __int16 v17;
  __int16 v18;
  __int16 v19;
  std::string::size_type v20;

  v8 = this;
  if (a3)
  {
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    if ((size & 0x80u) != 0)
      size = this->__r_.__value_.__l.__size_;
    v11 = size == 4;
  }
  else
  {
    v11 = 0;
  }
  if (a4 == 1)
  {
    switch(a6)
    {
      case 0:
        v14 = 67109379;
LABEL_38:
        *(_DWORD *)a1 = v14;
        if (!a5 || a5 == 2)
          return;
        if (a5 != 1)
          goto LABEL_51;
        if (v11)
          return;
        goto LABEL_66;
      case 1:
      case 3:
        *(_BYTE *)a1 = 3;
        *(_BYTE *)(a1 + 3) = 4;
        if (a5 == 2)
        {
          v17 = 513;
          goto LABEL_71;
        }
        if (a5 == 1)
        {
          v18 = 2;
          goto LABEL_75;
        }
        if (a5)
          goto LABEL_51;
        v15 = 2;
        goto LABEL_59;
      case 2:
        *(_BYTE *)a1 = 2;
        *(_BYTE *)(a1 + 3) = 3;
        if (a5 == 2)
        {
          v17 = 260;
          goto LABEL_71;
        }
        if (a5 == 1)
        {
          v18 = 1024;
          goto LABEL_75;
        }
        if (a5)
          goto LABEL_51;
        v15 = 1024;
        goto LABEL_59;
      case 4:
        *(_BYTE *)a1 = 2;
        *(_BYTE *)(a1 + 3) = 4;
        if (a5 == 2)
        {
          v18 = 768;
LABEL_75:
          *(_WORD *)(a1 + 1) = v18;
          if (!v11)
            std::string::push_back(this, 32);
        }
        else if (a5 == 1)
        {
          v17 = 259;
LABEL_71:
          *(_WORD *)(a1 + 1) = v17;
          if (v11)
          {
            if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
            {
              v20 = this->__r_.__value_.__l.__size_ - 1;
              this->__r_.__value_.__l.__size_ = v20;
              v8 = (std::string *)this->__r_.__value_.__r.__words[0];
            }
            else
            {
              v20 = HIBYTE(this->__r_.__value_.__r.__words[2]) - 1;
              *((_BYTE *)&this->__r_.__value_.__s + 23) = v20 & 0x7F;
            }
            v8->__r_.__value_.__s.__data_[v20] = 0;
          }
        }
        else
        {
          if (a5)
            goto LABEL_51;
          v15 = 3;
LABEL_59:
          *(_WORD *)(a1 + 1) = v15;
        }
        break;
      default:
        goto LABEL_51;
    }
  }
  else if (a4)
  {
LABEL_51:
    *(_DWORD *)a1 = 67109634;
  }
  else
  {
    if (v11)
    {
      v12 = HIBYTE(this->__r_.__value_.__r.__words[2]);
      if ((v12 & 0x80u) == 0)
        v13 = this;
      else
        v13 = (std::string *)this->__r_.__value_.__r.__words[0];
      if ((v12 & 0x80u) != 0)
        v12 = this->__r_.__value_.__l.__size_;
      std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<char *>,std::__wrap_iter<char *>>((char *)v13, &v13->__r_.__value_.__s.__data_[3], (char *)v13 + v12);
    }
    switch(a6)
    {
      case 0:
        v14 = 33555459;
        goto LABEL_38;
      case 1:
        *(_BYTE *)a1 = 3;
        *(_BYTE *)(a1 + 3) = 2;
        if (a5 == 2)
        {
          v19 = 1025;
          goto LABEL_68;
        }
        if (a5 == 1)
        {
          v16 = 4;
          goto LABEL_65;
        }
        if (a5)
          goto LABEL_51;
        v15 = 4;
        goto LABEL_59;
      case 2:
        *(_BYTE *)a1 = 4;
        *(_BYTE *)(a1 + 3) = 3;
        if (a5 == 2)
          goto LABEL_55;
        if (a5 != 1)
          goto LABEL_31;
        if (!v11)
          std::string::insert(v8, 0, 1uLL, 32);
        goto LABEL_58;
      case 3:
        *(_BYTE *)a1 = 4;
        *(_BYTE *)(a1 + 3) = 2;
        if (a5 == 2)
        {
          v16 = 3;
          goto LABEL_65;
        }
        if (a5 == 1)
        {
          v19 = 769;
          goto LABEL_68;
        }
        if (a5)
          goto LABEL_51;
        v15 = 768;
        goto LABEL_59;
      case 4:
        *(_BYTE *)a1 = 4;
        *(_BYTE *)(a1 + 3) = 3;
        if (a5 == 2)
        {
LABEL_55:
          v19 = 258;
LABEL_68:
          *(_WORD *)(a1 + 1) = v19;
          if (v11)
            std::string::erase(v8, 0, 1uLL);
          return;
        }
        if (a5 != 1)
        {
LABEL_31:
          if (a5)
            goto LABEL_51;
LABEL_58:
          v15 = 512;
          goto LABEL_59;
        }
        v16 = 512;
LABEL_65:
        *(_WORD *)(a1 + 1) = v16;
        if (v11)
          return;
        break;
      default:
        goto LABEL_51;
    }
LABEL_66:
    std::string::insert(v8, 0, 1uLL, 32);
  }
}

void std::moneypunct_byname<char,true>::init(uint64_t a1, char *a2)
{
  _xlocale *v4;
  lconv *v5;
  _xlocale *v6;
  _xlocale *v7;
  int int_frac_digits;
  std::string *v9;
  std::string *v10;
  std::string *v11;
  std::string v12;
  std::string v13;
  _xlocale *v14;

  v4 = newlocale(63, a2, 0);
  v14 = v4;
  if (!v4)
  {
    std::string::basic_string[abi:ne180100]<0>(&v12, a2);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("moneypunct_byname failed to construct for ", &v12, &v13);
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v13;
    else
      v11 = (std::string *)v13.__r_.__value_.__r.__words[0];
    std::__throw_runtime_error((const char *)v11);
  }
  v5 = localeconv_l(v4);
  if (!std::checked_string_to_char_convert((std::__1 *)(a1 + 16), v5->mon_decimal_point, v14, v6))
    *(_BYTE *)(a1 + 16) = 127;
  if (!std::checked_string_to_char_convert((std::__1 *)(a1 + 17), v5->mon_thousands_sep, v14, v7))
    *(_BYTE *)(a1 + 17) = 127;
  std::string::__assign_external((std::string *)(a1 + 24), v5->mon_grouping);
  std::string::__assign_external((std::string *)(a1 + 48), v5->int_curr_symbol);
  int_frac_digits = v5->int_frac_digits;
  if (int_frac_digits == 127)
    LOBYTE(int_frac_digits) = 0;
  *(_DWORD *)(a1 + 120) = (char)int_frac_digits;
  v9 = (std::string *)(a1 + 72);
  if (v5->int_p_sign_posn)
  {
    std::string::__assign_external(v9, v5->positive_sign);
  }
  else
  {
    if (*(char *)(a1 + 95) < 0)
    {
      *(_QWORD *)(a1 + 80) = 2;
      v9 = *(std::string **)(a1 + 72);
    }
    else
    {
      *(_BYTE *)(a1 + 95) = 2;
    }
    strcpy((char *)v9, "()");
  }
  v10 = (std::string *)(a1 + 96);
  if (v5->int_n_sign_posn)
  {
    std::string::__assign_external(v10, v5->negative_sign);
  }
  else
  {
    if (*(char *)(a1 + 119) < 0)
    {
      *(_QWORD *)(a1 + 104) = 2;
      v10 = *(std::string **)(a1 + 96);
    }
    else
    {
      *(_BYTE *)(a1 + 119) = 2;
    }
    strcpy((char *)v10, "()");
  }
  if (*(char *)(a1 + 71) < 0)
    std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)(a1 + 48), *(_QWORD *)(a1 + 56));
  else
    v13 = *(std::string *)(a1 + 48);
  std::__init_pat<char>(a1 + 124, &v13, 1, v5->int_p_cs_precedes, v5->int_p_sep_by_space, v5->int_p_sign_posn);
  std::__init_pat<char>(a1 + 128, (std::string *)(a1 + 48), 1, v5->int_n_cs_precedes, v5->int_n_sep_by_space, v5->int_n_sign_posn);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  std::__libcpp_unique_locale::~__libcpp_unique_locale(&v14);
}

void sub_191FFC6E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  std::__libcpp_unique_locale::~__libcpp_unique_locale((_xlocale **)(v21 - 40));
  _Unwind_Resume(a1);
}

void std::moneypunct_byname<wchar_t,false>::init(uint64_t a1, char *a2)
{
  _xlocale *v4;
  lconv *v5;
  std::wstring::size_type v6;
  int frac_digits;
  std::wstring::size_type v8;
  uint64_t v9;
  std::wstring::size_type v10;
  uint64_t v11;
  std::string *v12;
  std::wstring __p;
  char *currency_symbol;
  locale_t v15;
  mbstate_t v16;
  std::string v17[16];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = newlocale(63, a2, 0);
  v15 = v4;
  if (!v4)
  {
    std::string::basic_string[abi:ne180100]<0>(&v16, a2);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("moneypunct_byname failed to construct for ", (std::string *)&v16, v17);
    if ((v17[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = v17;
    else
      v12 = (std::string *)v17[0].__r_.__value_.__r.__words[0];
    std::__throw_runtime_error((const char *)v12);
  }
  v5 = localeconv_l(v4);
  if (!std::checked_string_to_wchar_convert((__int32 *)(a1 + 16), v5->mon_decimal_point, v15))
    *(_DWORD *)(a1 + 16) = 0x7FFFFFFF;
  if (!std::checked_string_to_wchar_convert((__int32 *)(a1 + 20), v5->mon_thousands_sep, v15))
    *(_DWORD *)(a1 + 20) = 0x7FFFFFFF;
  std::string::__assign_external((std::string *)(a1 + 24), v5->mon_grouping);
  memset(&v16, 0, sizeof(v16));
  currency_symbol = v5->currency_symbol;
  v6 = mbsrtowcs_l((__int32 *)v17, (const char **)&currency_symbol, 0x64uLL, &v16, v15);
  if (v6 == -1)
    std::__throw_runtime_error("locale not supported");
  std::wstring::__assign_trivial[abi:ne180100]<wchar_t *,wchar_t *>((std::wstring *)(a1 + 48), (std::wstring::value_type *)v17, (std::wstring::value_type *)v17 + v6, v6);
  frac_digits = v5->frac_digits;
  if (frac_digits == 127)
    LOBYTE(frac_digits) = 0;
  *(_DWORD *)(a1 + 120) = (char)frac_digits;
  if (v5->p_sign_posn)
  {
    memset(&v16, 0, sizeof(v16));
    currency_symbol = v5->positive_sign;
    v8 = mbsrtowcs_l((__int32 *)v17, (const char **)&currency_symbol, 0x64uLL, &v16, v15);
    if (v8 == -1)
      goto LABEL_29;
    std::wstring::__assign_trivial[abi:ne180100]<wchar_t *,wchar_t *>((std::wstring *)(a1 + 72), (std::wstring::value_type *)v17, (std::wstring::value_type *)v17 + v8, v8);
  }
  else
  {
    if (*(char *)(a1 + 95) < 0)
    {
      *(_QWORD *)(a1 + 80) = 2;
      v9 = *(_QWORD *)(a1 + 72);
    }
    else
    {
      v9 = a1 + 72;
      *(_BYTE *)(a1 + 95) = 2;
    }
    *(_QWORD *)v9 = 0x2900000028;
    *(_DWORD *)(v9 + 8) = 0;
  }
  if (v5->n_sign_posn)
  {
    memset(&v16, 0, sizeof(v16));
    currency_symbol = v5->negative_sign;
    v10 = mbsrtowcs_l((__int32 *)v17, (const char **)&currency_symbol, 0x64uLL, &v16, v15);
    if (v10 != -1)
    {
      std::wstring::__assign_trivial[abi:ne180100]<wchar_t *,wchar_t *>((std::wstring *)(a1 + 96), (std::wstring::value_type *)v17, (std::wstring::value_type *)v17 + v10, v10);
      goto LABEL_23;
    }
LABEL_29:
    std::__throw_runtime_error("locale not supported");
  }
  if (*(char *)(a1 + 119) < 0)
  {
    *(_QWORD *)(a1 + 104) = 2;
    v11 = *(_QWORD *)(a1 + 96);
  }
  else
  {
    v11 = a1 + 96;
    *(_BYTE *)(a1 + 119) = 2;
  }
  *(_QWORD *)v11 = 0x2900000028;
  *(_DWORD *)(v11 + 8) = 0;
LABEL_23:
  if (*(char *)(a1 + 71) < 0)
    std::wstring::__init_copy_ctor_external(&__p, *(const std::wstring::value_type **)(a1 + 48), *(_QWORD *)(a1 + 56));
  else
    __p = *(std::wstring *)(a1 + 48);
  std::__init_pat<wchar_t>(a1 + 124, &__p, 0, v5->p_cs_precedes, v5->p_sep_by_space, v5->p_sign_posn);
  std::__init_pat<wchar_t>(a1 + 128, (std::wstring *)(a1 + 48), 0, v5->n_cs_precedes, v5->n_sep_by_space, v5->n_sign_posn);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__libcpp_unique_locale::~__libcpp_unique_locale(&v15);
}

void sub_191FFCA74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, _xlocale *a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a43 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  std::__libcpp_unique_locale::~__libcpp_unique_locale(&a17);
  _Unwind_Resume(a1);
}

void std::__init_pat<wchar_t>(uint64_t a1, std::wstring *this, int a3, int a4, int a5, int a6)
{
  std::wstring *v8;
  std::wstring::size_type size;
  _BOOL4 v11;
  std::wstring::size_type v12;
  char *v13;
  int v14;
  __int16 v15;
  __int16 v16;
  __int16 v17;
  __int16 v18;
  __int16 v19;
  std::wstring::size_type v20;

  v8 = this;
  if (a3)
  {
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    if ((size & 0x80u) != 0)
      size = this->__r_.__value_.__l.__size_;
    v11 = size == 4;
  }
  else
  {
    v11 = 0;
  }
  if (a4 == 1)
  {
    switch(a6)
    {
      case 0:
        v14 = 67109379;
LABEL_38:
        *(_DWORD *)a1 = v14;
        if (!a5 || a5 == 2)
          return;
        if (a5 != 1)
          goto LABEL_51;
        if (v11)
          return;
        goto LABEL_66;
      case 1:
      case 3:
        *(_BYTE *)a1 = 3;
        *(_BYTE *)(a1 + 3) = 4;
        if (a5 == 2)
        {
          v17 = 513;
          goto LABEL_71;
        }
        if (a5 == 1)
        {
          v18 = 2;
          goto LABEL_75;
        }
        if (a5)
          goto LABEL_51;
        v15 = 2;
        goto LABEL_59;
      case 2:
        *(_BYTE *)a1 = 2;
        *(_BYTE *)(a1 + 3) = 3;
        if (a5 == 2)
        {
          v17 = 260;
          goto LABEL_71;
        }
        if (a5 == 1)
        {
          v18 = 1024;
          goto LABEL_75;
        }
        if (a5)
          goto LABEL_51;
        v15 = 1024;
        goto LABEL_59;
      case 4:
        *(_BYTE *)a1 = 2;
        *(_BYTE *)(a1 + 3) = 4;
        if (a5 == 2)
        {
          v18 = 768;
LABEL_75:
          *(_WORD *)(a1 + 1) = v18;
          if (!v11)
            std::wstring::push_back(this, 32);
        }
        else if (a5 == 1)
        {
          v17 = 259;
LABEL_71:
          *(_WORD *)(a1 + 1) = v17;
          if (v11)
          {
            if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
            {
              v20 = this->__r_.__value_.__l.__size_ - 1;
              this->__r_.__value_.__l.__size_ = v20;
              v8 = (std::wstring *)this->__r_.__value_.__r.__words[0];
            }
            else
            {
              v20 = HIBYTE(this->__r_.__value_.__r.__words[2]) - 1;
              *((_BYTE *)&this->__r_.__value_.__s + 23) = v20 & 0x7F;
            }
            v8->__r_.__value_.__s.__data_[v20] = 0;
          }
        }
        else
        {
          if (a5)
            goto LABEL_51;
          v15 = 3;
LABEL_59:
          *(_WORD *)(a1 + 1) = v15;
        }
        break;
      default:
        goto LABEL_51;
    }
  }
  else if (a4)
  {
LABEL_51:
    *(_DWORD *)a1 = 67109634;
  }
  else
  {
    if (v11)
    {
      v12 = HIBYTE(this->__r_.__value_.__r.__words[2]);
      if ((v12 & 0x80u) == 0)
        v13 = (char *)this;
      else
        v13 = (char *)this->__r_.__value_.__r.__words[0];
      if ((v12 & 0x80u) != 0)
        v12 = this->__r_.__value_.__l.__size_;
      std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<wchar_t *>,std::__wrap_iter<wchar_t *>>(v13, v13 + 12, &v13[4 * v12]);
    }
    switch(a6)
    {
      case 0:
        v14 = 33555459;
        goto LABEL_38;
      case 1:
        *(_BYTE *)a1 = 3;
        *(_BYTE *)(a1 + 3) = 2;
        if (a5 == 2)
        {
          v19 = 1025;
          goto LABEL_68;
        }
        if (a5 == 1)
        {
          v16 = 4;
          goto LABEL_65;
        }
        if (a5)
          goto LABEL_51;
        v15 = 4;
        goto LABEL_59;
      case 2:
        *(_BYTE *)a1 = 4;
        *(_BYTE *)(a1 + 3) = 3;
        if (a5 == 2)
          goto LABEL_55;
        if (a5 != 1)
          goto LABEL_31;
        if (!v11)
          std::wstring::insert(v8, 0, 1uLL, 32);
        goto LABEL_58;
      case 3:
        *(_BYTE *)a1 = 4;
        *(_BYTE *)(a1 + 3) = 2;
        if (a5 == 2)
        {
          v16 = 3;
          goto LABEL_65;
        }
        if (a5 == 1)
        {
          v19 = 769;
          goto LABEL_68;
        }
        if (a5)
          goto LABEL_51;
        v15 = 768;
        goto LABEL_59;
      case 4:
        *(_BYTE *)a1 = 4;
        *(_BYTE *)(a1 + 3) = 3;
        if (a5 == 2)
        {
LABEL_55:
          v19 = 258;
LABEL_68:
          *(_WORD *)(a1 + 1) = v19;
          if (v11)
            std::wstring::erase(v8, 0, 1uLL);
          return;
        }
        if (a5 != 1)
        {
LABEL_31:
          if (a5)
            goto LABEL_51;
LABEL_58:
          v15 = 512;
          goto LABEL_59;
        }
        v16 = 512;
LABEL_65:
        *(_WORD *)(a1 + 1) = v16;
        if (v11)
          return;
        break;
      default:
        goto LABEL_51;
    }
LABEL_66:
    std::wstring::insert(v8, 0, 1uLL, 32);
  }
}

void std::moneypunct_byname<wchar_t,true>::init(uint64_t a1, char *a2)
{
  _xlocale *v4;
  lconv *v5;
  std::wstring::size_type v6;
  int int_frac_digits;
  std::wstring::size_type v8;
  uint64_t v9;
  std::wstring::size_type v10;
  uint64_t v11;
  std::string *v12;
  std::wstring __p;
  char *int_curr_symbol;
  locale_t v15;
  mbstate_t v16;
  std::string v17[16];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = newlocale(63, a2, 0);
  v15 = v4;
  if (!v4)
  {
    std::string::basic_string[abi:ne180100]<0>(&v16, a2);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("moneypunct_byname failed to construct for ", (std::string *)&v16, v17);
    if ((v17[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = v17;
    else
      v12 = (std::string *)v17[0].__r_.__value_.__r.__words[0];
    std::__throw_runtime_error((const char *)v12);
  }
  v5 = localeconv_l(v4);
  if (!std::checked_string_to_wchar_convert((__int32 *)(a1 + 16), v5->mon_decimal_point, v15))
    *(_DWORD *)(a1 + 16) = 0x7FFFFFFF;
  if (!std::checked_string_to_wchar_convert((__int32 *)(a1 + 20), v5->mon_thousands_sep, v15))
    *(_DWORD *)(a1 + 20) = 0x7FFFFFFF;
  std::string::__assign_external((std::string *)(a1 + 24), v5->mon_grouping);
  memset(&v16, 0, sizeof(v16));
  int_curr_symbol = v5->int_curr_symbol;
  v6 = mbsrtowcs_l((__int32 *)v17, (const char **)&int_curr_symbol, 0x64uLL, &v16, v15);
  if (v6 == -1)
    std::__throw_runtime_error("locale not supported");
  std::wstring::__assign_trivial[abi:ne180100]<wchar_t *,wchar_t *>((std::wstring *)(a1 + 48), (std::wstring::value_type *)v17, (std::wstring::value_type *)v17 + v6, v6);
  int_frac_digits = v5->int_frac_digits;
  if (int_frac_digits == 127)
    LOBYTE(int_frac_digits) = 0;
  *(_DWORD *)(a1 + 120) = (char)int_frac_digits;
  if (v5->int_p_sign_posn)
  {
    memset(&v16, 0, sizeof(v16));
    int_curr_symbol = v5->positive_sign;
    v8 = mbsrtowcs_l((__int32 *)v17, (const char **)&int_curr_symbol, 0x64uLL, &v16, v15);
    if (v8 == -1)
      goto LABEL_29;
    std::wstring::__assign_trivial[abi:ne180100]<wchar_t *,wchar_t *>((std::wstring *)(a1 + 72), (std::wstring::value_type *)v17, (std::wstring::value_type *)v17 + v8, v8);
  }
  else
  {
    if (*(char *)(a1 + 95) < 0)
    {
      *(_QWORD *)(a1 + 80) = 2;
      v9 = *(_QWORD *)(a1 + 72);
    }
    else
    {
      v9 = a1 + 72;
      *(_BYTE *)(a1 + 95) = 2;
    }
    *(_QWORD *)v9 = 0x2900000028;
    *(_DWORD *)(v9 + 8) = 0;
  }
  if (v5->int_n_sign_posn)
  {
    memset(&v16, 0, sizeof(v16));
    int_curr_symbol = v5->negative_sign;
    v10 = mbsrtowcs_l((__int32 *)v17, (const char **)&int_curr_symbol, 0x64uLL, &v16, v15);
    if (v10 != -1)
    {
      std::wstring::__assign_trivial[abi:ne180100]<wchar_t *,wchar_t *>((std::wstring *)(a1 + 96), (std::wstring::value_type *)v17, (std::wstring::value_type *)v17 + v10, v10);
      goto LABEL_23;
    }
LABEL_29:
    std::__throw_runtime_error("locale not supported");
  }
  if (*(char *)(a1 + 119) < 0)
  {
    *(_QWORD *)(a1 + 104) = 2;
    v11 = *(_QWORD *)(a1 + 96);
  }
  else
  {
    v11 = a1 + 96;
    *(_BYTE *)(a1 + 119) = 2;
  }
  *(_QWORD *)v11 = 0x2900000028;
  *(_DWORD *)(v11 + 8) = 0;
LABEL_23:
  if (*(char *)(a1 + 71) < 0)
    std::wstring::__init_copy_ctor_external(&__p, *(const std::wstring::value_type **)(a1 + 48), *(_QWORD *)(a1 + 56));
  else
    __p = *(std::wstring *)(a1 + 48);
  std::__init_pat<wchar_t>(a1 + 124, &__p, 1, v5->int_p_cs_precedes, v5->int_p_sep_by_space, v5->int_p_sign_posn);
  std::__init_pat<wchar_t>(a1 + 128, (std::wstring *)(a1 + 48), 1, v5->int_n_cs_precedes, v5->int_n_sep_by_space, v5->int_n_sign_posn);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__libcpp_unique_locale::~__libcpp_unique_locale(&v15);
}

void sub_191FFD170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, _xlocale *a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a43 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  std::__libcpp_unique_locale::~__libcpp_unique_locale(&a17);
  _Unwind_Resume(a1);
}

void std::__codecvt_utf8<wchar_t>::~__codecvt_utf8(std::codecvt<wchar_t, char, mbstate_t> *a1)
{
  std::codecvt<wchar_t,char,__mbstate_t>::~codecvt(a1);
  JUMPOUT(0x194021E38);
}

void std::__codecvt_utf8<char16_t>::~__codecvt_utf8(std::__shared_count *a1)
{
  std::__shared_count::~__shared_count(a1);
  JUMPOUT(0x194021E38);
}

void std::__codecvt_utf8<char32_t>::~__codecvt_utf8(std::__shared_count *a1)
{
  std::__shared_count::~__shared_count(a1);
  JUMPOUT(0x194021E38);
}

void std::__codecvt_utf16<wchar_t,false>::~__codecvt_utf16(std::codecvt<wchar_t, char, mbstate_t> *a1)
{
  std::codecvt<wchar_t,char,__mbstate_t>::~codecvt(a1);
  JUMPOUT(0x194021E38);
}

void std::__codecvt_utf16<wchar_t,true>::~__codecvt_utf16(std::codecvt<wchar_t, char, mbstate_t> *a1)
{
  std::codecvt<wchar_t,char,__mbstate_t>::~codecvt(a1);
  JUMPOUT(0x194021E38);
}

void std::__codecvt_utf16<char16_t,false>::~__codecvt_utf16(std::__shared_count *a1)
{
  std::__shared_count::~__shared_count(a1);
  JUMPOUT(0x194021E38);
}

void std::__codecvt_utf16<char16_t,true>::~__codecvt_utf16(std::__shared_count *a1)
{
  std::__shared_count::~__shared_count(a1);
  JUMPOUT(0x194021E38);
}

void std::__codecvt_utf16<char32_t,false>::~__codecvt_utf16(std::__shared_count *a1)
{
  std::__shared_count::~__shared_count(a1);
  JUMPOUT(0x194021E38);
}

void std::__codecvt_utf16<char32_t,true>::~__codecvt_utf16(std::__shared_count *a1)
{
  std::__shared_count::~__shared_count(a1);
  JUMPOUT(0x194021E38);
}

void std::__codecvt_utf8_utf16<wchar_t>::~__codecvt_utf8_utf16(std::codecvt<wchar_t, char, mbstate_t> *a1)
{
  std::codecvt<wchar_t,char,__mbstate_t>::~codecvt(a1);
  JUMPOUT(0x194021E38);
}

void std::__codecvt_utf8_utf16<char32_t>::~__codecvt_utf8_utf16(std::__shared_count *a1)
{
  std::__shared_count::~__shared_count(a1);
  JUMPOUT(0x194021E38);
}

void std::__codecvt_utf8_utf16<char16_t>::~__codecvt_utf8_utf16(std::__shared_count *a1)
{
  std::__shared_count::~__shared_count(a1);
  JUMPOUT(0x194021E38);
}

void std::num_get<char,std::istreambuf_iterator<char>>::~num_get(std::__shared_count *a1)
{
  std::__shared_count::~__shared_count(a1);
  JUMPOUT(0x194021E38);
}

void std::num_get<wchar_t,std::istreambuf_iterator<wchar_t>>::~num_get(std::__shared_count *a1)
{
  std::__shared_count::~__shared_count(a1);
  JUMPOUT(0x194021E38);
}

void std::num_put<char,std::ostreambuf_iterator<char>>::~num_put(std::__shared_count *a1)
{
  std::__shared_count::~__shared_count(a1);
  JUMPOUT(0x194021E38);
}

void std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t>>::~num_put(std::__shared_count *a1)
{
  std::__shared_count::~__shared_count(a1);
  JUMPOUT(0x194021E38);
}

void std::time_get<char,std::istreambuf_iterator<char>>::~time_get(std::__shared_count *a1)
{
  std::__shared_count::~__shared_count(a1);
  JUMPOUT(0x194021E38);
}

void std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::~time_get(std::__shared_count *a1)
{
  std::__shared_count::~__shared_count(a1);
  JUMPOUT(0x194021E38);
}

void std::time_get_byname<char,std::istreambuf_iterator<char>>::~time_get_byname(std::__shared_count *a1)
{
  std::__time_get_storage<char>::~__time_get_storage[abi:ne180100]((uint64_t)&a1[1].__shared_owners_);
  std::__shared_count::~__shared_count(a1);
}

{
  std::__time_get_storage<char>::~__time_get_storage[abi:ne180100]((uint64_t)&a1[1].__shared_owners_);
  std::__shared_count::~__shared_count(a1);
  JUMPOUT(0x194021E38);
}

uint64_t std::time_get_byname<char,std::istreambuf_iterator<char>>::do_date_order(uint64_t a1)
{
  return std::__time_get_storage<char>::__do_date_order(a1 + 24);
}

uint64_t std::time_get_byname<char,std::istreambuf_iterator<char>>::__weeks(uint64_t a1)
{
  return a1 + 32;
}

uint64_t std::time_get_byname<char,std::istreambuf_iterator<char>>::__months(uint64_t a1)
{
  return a1 + 368;
}

uint64_t std::time_get_byname<char,std::istreambuf_iterator<char>>::__am_pm(uint64_t a1)
{
  return a1 + 944;
}

uint64_t std::time_get_byname<char,std::istreambuf_iterator<char>>::__c(uint64_t a1)
{
  return a1 + 992;
}

uint64_t std::time_get_byname<char,std::istreambuf_iterator<char>>::__r(uint64_t a1)
{
  return a1 + 1016;
}

uint64_t std::time_get_byname<char,std::istreambuf_iterator<char>>::__x(uint64_t a1)
{
  return a1 + 1040;
}

uint64_t std::time_get_byname<char,std::istreambuf_iterator<char>>::__X(uint64_t a1)
{
  return a1 + 1064;
}

uint64_t `non-virtual thunk to'std::time_get_byname<char,std::istreambuf_iterator<char>>::__weeks(uint64_t a1)
{
  return a1 + 16;
}

uint64_t `non-virtual thunk to'std::time_get_byname<char,std::istreambuf_iterator<char>>::__months(uint64_t a1)
{
  return a1 + 352;
}

uint64_t `non-virtual thunk to'std::time_get_byname<char,std::istreambuf_iterator<char>>::__am_pm(uint64_t a1)
{
  return a1 + 928;
}

uint64_t `non-virtual thunk to'std::time_get_byname<char,std::istreambuf_iterator<char>>::__c(uint64_t a1)
{
  return a1 + 976;
}

uint64_t `non-virtual thunk to'std::time_get_byname<char,std::istreambuf_iterator<char>>::__r(uint64_t a1)
{
  return a1 + 1000;
}

uint64_t `non-virtual thunk to'std::time_get_byname<char,std::istreambuf_iterator<char>>::__x(uint64_t a1)
{
  return a1 + 1024;
}

uint64_t `non-virtual thunk to'std::time_get_byname<char,std::istreambuf_iterator<char>>::__X(uint64_t a1)
{
  return a1 + 1048;
}

void std::time_get_byname<wchar_t,std::istreambuf_iterator<wchar_t>>::~time_get_byname(std::__shared_count *a1)
{
  std::__time_get_storage<wchar_t>::~__time_get_storage[abi:ne180100]((uint64_t)&a1[1].__shared_owners_);
  std::__shared_count::~__shared_count(a1);
}

{
  std::__time_get_storage<wchar_t>::~__time_get_storage[abi:ne180100]((uint64_t)&a1[1].__shared_owners_);
  std::__shared_count::~__shared_count(a1);
  JUMPOUT(0x194021E38);
}

uint64_t std::time_get_byname<wchar_t,std::istreambuf_iterator<wchar_t>>::do_date_order(uint64_t a1)
{
  return std::__time_get_storage<wchar_t>::__do_date_order(a1 + 24);
}

uint64_t std::time_get_byname<wchar_t,std::istreambuf_iterator<wchar_t>>::__weeks(uint64_t a1)
{
  return a1 + 32;
}

uint64_t std::time_get_byname<wchar_t,std::istreambuf_iterator<wchar_t>>::__months(uint64_t a1)
{
  return a1 + 368;
}

uint64_t std::time_get_byname<wchar_t,std::istreambuf_iterator<wchar_t>>::__am_pm(uint64_t a1)
{
  return a1 + 944;
}

uint64_t std::time_get_byname<wchar_t,std::istreambuf_iterator<wchar_t>>::__c(uint64_t a1)
{
  return a1 + 992;
}

uint64_t std::time_get_byname<wchar_t,std::istreambuf_iterator<wchar_t>>::__r(uint64_t a1)
{
  return a1 + 1016;
}

uint64_t std::time_get_byname<wchar_t,std::istreambuf_iterator<wchar_t>>::__x(uint64_t a1)
{
  return a1 + 1040;
}

uint64_t std::time_get_byname<wchar_t,std::istreambuf_iterator<wchar_t>>::__X(uint64_t a1)
{
  return a1 + 1064;
}

uint64_t `non-virtual thunk to'std::time_get_byname<wchar_t,std::istreambuf_iterator<wchar_t>>::__weeks(uint64_t a1)
{
  return a1 + 16;
}

uint64_t `non-virtual thunk to'std::time_get_byname<wchar_t,std::istreambuf_iterator<wchar_t>>::__months(uint64_t a1)
{
  return a1 + 352;
}

uint64_t `non-virtual thunk to'std::time_get_byname<wchar_t,std::istreambuf_iterator<wchar_t>>::__am_pm(uint64_t a1)
{
  return a1 + 928;
}

uint64_t `non-virtual thunk to'std::time_get_byname<wchar_t,std::istreambuf_iterator<wchar_t>>::__c(uint64_t a1)
{
  return a1 + 976;
}

uint64_t `non-virtual thunk to'std::time_get_byname<wchar_t,std::istreambuf_iterator<wchar_t>>::__r(uint64_t a1)
{
  return a1 + 1000;
}

uint64_t `non-virtual thunk to'std::time_get_byname<wchar_t,std::istreambuf_iterator<wchar_t>>::__x(uint64_t a1)
{
  return a1 + 1024;
}

uint64_t `non-virtual thunk to'std::time_get_byname<wchar_t,std::istreambuf_iterator<wchar_t>>::__X(uint64_t a1)
{
  return a1 + 1048;
}

void std::time_put<char,std::ostreambuf_iterator<char>>::~time_put(uint64_t a1)
{
  std::__time_put::~__time_put((std::__time_put *)(a1 + 16));
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

{
  std::__time_put::~__time_put((std::__time_put *)(a1 + 16));
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  JUMPOUT(0x194021E38);
}

void std::time_put<wchar_t,std::ostreambuf_iterator<wchar_t>>::~time_put(uint64_t a1)
{
  std::__time_put::~__time_put((std::__time_put *)(a1 + 16));
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

{
  std::__time_put::~__time_put((std::__time_put *)(a1 + 16));
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  JUMPOUT(0x194021E38);
}

void std::time_put_byname<char,std::ostreambuf_iterator<char>>::~time_put_byname(uint64_t a1)
{
  std::__time_put::~__time_put((std::__time_put *)(a1 + 16));
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

{
  std::__time_put::~__time_put((std::__time_put *)(a1 + 16));
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  JUMPOUT(0x194021E38);
}

void std::time_put_byname<wchar_t,std::ostreambuf_iterator<wchar_t>>::~time_put_byname(uint64_t a1)
{
  std::__time_put::~__time_put((std::__time_put *)(a1 + 16));
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

{
  std::__time_put::~__time_put((std::__time_put *)(a1 + 16));
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  JUMPOUT(0x194021E38);
}

void std::moneypunct<char,false>::~moneypunct(std::__shared_count *a1)
{
  std::__shared_count::~__shared_count(a1);
  JUMPOUT(0x194021E38);
}

void std::moneypunct<char,true>::~moneypunct(std::__shared_count *a1)
{
  std::__shared_count::~__shared_count(a1);
  JUMPOUT(0x194021E38);
}

void std::moneypunct<wchar_t,false>::~moneypunct(std::__shared_count *a1)
{
  std::__shared_count::~__shared_count(a1);
  JUMPOUT(0x194021E38);
}

void std::moneypunct<wchar_t,true>::~moneypunct(std::__shared_count *a1)
{
  std::__shared_count::~__shared_count(a1);
  JUMPOUT(0x194021E38);
}

void std::moneypunct_byname<char,false>::~moneypunct_byname(std::__shared_count *a1)
{
  std::moneypunct_byname<char,false>::~moneypunct_byname(a1);
  JUMPOUT(0x194021E38);
}

void std::moneypunct_byname<char,true>::~moneypunct_byname(std::__shared_count *a1)
{
  std::moneypunct_byname<char,true>::~moneypunct_byname(a1);
  JUMPOUT(0x194021E38);
}

void std::moneypunct_byname<wchar_t,false>::~moneypunct_byname(std::__shared_count *a1)
{
  std::moneypunct_byname<wchar_t,false>::~moneypunct_byname(a1);
  JUMPOUT(0x194021E38);
}

void std::moneypunct_byname<wchar_t,true>::~moneypunct_byname(std::__shared_count *a1)
{
  std::moneypunct_byname<wchar_t,true>::~moneypunct_byname(a1);
  JUMPOUT(0x194021E38);
}

void std::money_get<char,std::istreambuf_iterator<char>>::~money_get(std::__shared_count *a1)
{
  std::__shared_count::~__shared_count(a1);
  JUMPOUT(0x194021E38);
}

void std::money_get<wchar_t,std::istreambuf_iterator<wchar_t>>::~money_get(std::__shared_count *a1)
{
  std::__shared_count::~__shared_count(a1);
  JUMPOUT(0x194021E38);
}

void std::money_put<char,std::ostreambuf_iterator<char>>::~money_put(std::__shared_count *a1)
{
  std::__shared_count::~__shared_count(a1);
  JUMPOUT(0x194021E38);
}

void std::money_put<wchar_t,std::ostreambuf_iterator<wchar_t>>::~money_put(std::__shared_count *a1)
{
  std::__shared_count::~__shared_count(a1);
  JUMPOUT(0x194021E38);
}

void std::messages<char>::~messages(std::__shared_count *a1)
{
  std::__shared_count::~__shared_count(a1);
  JUMPOUT(0x194021E38);
}

void std::messages<wchar_t>::~messages(std::__shared_count *a1)
{
  std::__shared_count::~__shared_count(a1);
  JUMPOUT(0x194021E38);
}

void std::messages_byname<char>::~messages_byname(std::__shared_count *a1)
{
  std::__shared_count::~__shared_count(a1);
  JUMPOUT(0x194021E38);
}

void std::messages_byname<wchar_t>::~messages_byname(std::__shared_count *a1)
{
  std::__shared_count::~__shared_count(a1);
  JUMPOUT(0x194021E38);
}

_QWORD *std::wstring::__init_with_size[abi:ne180100]<wchar_t const*,wchar_t const*>(_QWORD *result, int *a2, int *a3, unint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  int v10;

  v4 = result;
  if (a4 >= 0x3FFFFFFFFFFFFFF8)
    std::wstring::__throw_length_error[abi:ne180100]();
  if (a4 > 4)
  {
    v8 = (a4 & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((a4 | 1) != 5)
      v8 = a4 | 1;
    result = std::allocator<wchar_t>::allocate_at_least[abi:ne180100]((uint64_t)result, v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    *v4 = result;
    v4 = result;
  }
  else
  {
    *((_BYTE *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    v10 = *a2++;
    *(_DWORD *)v4 = v10;
    v4 = (_QWORD *)((char *)v4 + 4);
  }
  *(_DWORD *)v4 = 0;
  return result;
}

unsigned __int8 *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<char *,char *,std::ostreambuf_iterator<char>>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, _QWORD *a4)
{
  unsigned __int8 *v5;
  uint64_t v7;
  _BYTE *v8;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (a4)
      {
        v7 = *v5;
        v8 = (_BYTE *)a4[6];
        if (v8 == (_BYTE *)a4[7])
        {
          if ((*(unsigned int (**)(_QWORD *, uint64_t))(*a4 + 104))(a4, v7) == -1)
            a4 = 0;
        }
        else
        {
          a4[6] = v8 + 1;
          *v8 = v7;
        }
      }
      ++v5;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

unsigned int *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<wchar_t *,wchar_t *,std::ostreambuf_iterator<wchar_t>>(uint64_t a1, unsigned int *a2, unsigned int *a3, _QWORD *a4)
{
  unsigned int *v5;
  uint64_t v7;
  _DWORD *v8;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (a4)
      {
        v7 = *v5;
        v8 = (_DWORD *)a4[6];
        if (v8 == (_DWORD *)a4[7])
        {
          LODWORD(v7) = (*(uint64_t (**)(_QWORD *, uint64_t))(*a4 + 104))(a4, v7);
        }
        else
        {
          *v8 = v7;
          a4[6] = v8 + 1;
        }
        if ((_DWORD)v7 == -1)
          a4 = 0;
      }
      ++v5;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

_QWORD *std::wstring::basic_string[abi:ne180100](_QWORD *a1, unint64_t a2, int a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = a1;
  if (a2 >= 0x3FFFFFFFFFFFFFF8)
    std::wstring::__throw_length_error[abi:ne180100]();
  if (a2 >= 5)
  {
    v6 = (a2 & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((a2 | 1) != 5)
      v6 = a2 | 1;
    a1 = std::allocator<wchar_t>::allocate_at_least[abi:ne180100]((uint64_t)a1, v6 + 1);
    v3[1] = a2;
    v3[2] = v7 | 0x8000000000000000;
    *v3 = a1;
  }
  else
  {
    *((_BYTE *)a1 + 23) = a2;
    if (!a2)
      goto LABEL_10;
  }
  v8 = 0;
  do
    *((_DWORD *)a1 + v8++) = a3;
  while (a2 != v8);
LABEL_10:
  *((_DWORD *)a1 + a2) = 0;
  return v3;
}

_QWORD *std::wstring::__init_with_size[abi:ne180100]<wchar_t *,wchar_t *>(_QWORD *result, int *a2, int *a3, unint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  int v10;

  v4 = result;
  if (a4 >= 0x3FFFFFFFFFFFFFF8)
    std::wstring::__throw_length_error[abi:ne180100]();
  if (a4 > 4)
  {
    v8 = (a4 & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((a4 | 1) != 5)
      v8 = a4 | 1;
    result = std::allocator<wchar_t>::allocate_at_least[abi:ne180100]((uint64_t)result, v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    *v4 = result;
    v4 = result;
  }
  else
  {
    *((_BYTE *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    v10 = *a2++;
    *(_DWORD *)v4 = v10;
    v4 = (_QWORD *)((char *)v4 + 4);
  }
  *(_DWORD *)v4 = 0;
  return result;
}

uint64_t std::vector<std::locale::facet *,std::__sso_allocator<std::locale::facet *,30ul>>::vector(uint64_t a1, unint64_t a2)
{
  char *v4;

  *(_BYTE *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  if (a2)
  {
    std::vector<std::locale::facet *,std::__sso_allocator<std::locale::facet *,30ul>>::__vallocate[abi:ne180100](a1, a2);
    v4 = *(char **)(a1 + 8);
    bzero(v4, 8 * a2);
    *(_QWORD *)(a1 + 8) = &v4[8 * a2];
  }
  return a1;
}

void sub_191FFDE6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::vector<std::locale::facet *,std::__sso_allocator<std::locale::facet *,30ul>>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_BYTE *std::vector<std::locale::facet *,std::__sso_allocator<std::locale::facet *,30ul>>::__vallocate[abi:ne180100](uint64_t a1, unint64_t a2)
{
  _BYTE *result;

  if (a2 >> 61)
    std::vector<std::locale::facet *,std::__sso_allocator<std::locale::facet *,30ul>>::__throw_length_error[abi:ne180100]();
  result = std::__sso_allocator<std::locale::facet *,30ul>::allocate[abi:ne180100]((_BYTE *)(a1 + 24), a2);
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = result;
  *(_QWORD *)(a1 + 16) = &result[8 * a2];
  return result;
}

void std::vector<std::locale::facet *,std::__sso_allocator<std::locale::facet *,30ul>>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

_BYTE *std::__sso_allocator<std::locale::facet *,30ul>::allocate[abi:ne180100](_BYTE *result, unint64_t a2)
{
  if (a2 > 0x1E || result[240])
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    return operator new(8 * a2);
  }
  else
  {
    result[240] = 1;
  }
  return result;
}

uint64_t std::__exception_guard_exceptions<std::vector<std::locale::facet *,std::__sso_allocator<std::locale::facet *,30ul>>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  _BYTE **v3;
  _BYTE *v4;

  if (!*(_BYTE *)(a1 + 8))
  {
    v3 = *(_BYTE ***)a1;
    v4 = **(_BYTE ***)a1;
    if (v4)
    {
      v3[1] = v4;
      if (v4 == (_BYTE *)(v3 + 3))
        v4[240] = 0;
      else
        operator delete(v4);
    }
  }
  return a1;
}

char *std::vector<std::locale::facet *,std::__sso_allocator<std::locale::facet *,30ul>>::__assign_with_size[abi:ne180100]<std::locale::facet **,std::locale::facet **>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  _BYTE *v10;
  char **v11;
  unint64_t v12;
  char *v13;
  size_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 3)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      if (v9 == result + 24)
        v9[240] = 0;
      else
        operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61)
      std::vector<std::locale::facet *,std::__sso_allocator<std::locale::facet *,30ul>>::__throw_length_error[abi:ne180100]();
    v17 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v17 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v17;
    result = std::vector<std::locale::facet *,std::__sso_allocator<std::locale::facet *,30ul>>::__vallocate[abi:ne180100]((uint64_t)v7, v18);
    v19 = (char *)v7[1];
    v11 = (char **)(v7 + 1);
    v9 = v19;
LABEL_19:
    v14 = a3 - (_QWORD)__src;
    if (v14)
    {
      v15 = v9;
      v16 = __src;
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  v11 = (char **)(result + 8);
  v10 = (_BYTE *)*((_QWORD *)result + 1);
  v12 = (v10 - v9) >> 3;
  if (v12 >= a4)
    goto LABEL_19;
  v13 = &__src[8 * v12];
  if (v10 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v10 - v9);
    v9 = *v11;
  }
  v14 = a3 - (_QWORD)v13;
  if (v14)
  {
    v15 = v9;
    v16 = v13;
LABEL_21:
    result = (char *)memmove(v15, v16, v14);
  }
LABEL_22:
  *v11 = &v9[v14];
  return result;
}

void std::vector<std::locale::facet *,std::__sso_allocator<std::locale::facet *,30ul>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _BYTE *v12;
  char *v13;
  _BYTE *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64x2_t v19;
  _BYTE *v20;
  uint64_t v21;
  int64x2_t v22;
  _BYTE *v23;
  uint64_t *v24;

  v5 = a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      bzero((void *)a1[1], 8 * a2);
      v5 += 8 * a2;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = a1 + 3;
    v7 = v5 - *a1;
    v8 = a2 + (v7 >> 3);
    if (v8 >> 61)
      std::vector<std::locale::facet *,std::__sso_allocator<std::locale::facet *,30ul>>::__throw_length_error[abi:ne180100]();
    v9 = v7 >> 3;
    v10 = v4 - *a1;
    if (v10 >> 2 > v8)
      v8 = v10 >> 2;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v8;
    v24 = a1 + 3;
    if (v11)
      v12 = std::__sso_allocator<std::locale::facet *,30ul>::allocate[abi:ne180100](v6, v11);
    else
      v12 = 0;
    v13 = &v12[8 * v9];
    v14 = &v12[8 * v11];
    v23 = v14;
    bzero(v13, 8 * a2);
    v15 = &v13[8 * a2];
    v22.i64[1] = (uint64_t)v15;
    v17 = *a1;
    v16 = a1[1];
    if (v16 == *a1)
    {
      v19 = vdupq_n_s64(v16);
    }
    else
    {
      do
      {
        v18 = *(_QWORD *)(v16 - 8);
        v16 -= 8;
        *((_QWORD *)v13 - 1) = v18;
        v13 -= 8;
      }
      while (v16 != v17);
      v19 = *(int64x2_t *)a1;
      v15 = (char *)v22.i64[1];
      v14 = v23;
    }
    *a1 = (uint64_t)v13;
    a1[1] = (uint64_t)v15;
    v22 = v19;
    v20 = (_BYTE *)a1[2];
    a1[2] = (uint64_t)v14;
    v23 = v20;
    v21 = v19.i64[0];
    std::__split_buffer<std::locale::facet *,std::__sso_allocator<std::locale::facet *,30ul> &>::~__split_buffer((uint64_t)&v21);
  }
}

uint64_t std::__split_buffer<std::locale::facet *,std::__sso_allocator<std::locale::facet *,30ul> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(_BYTE **)a1;
  if (*(_QWORD *)a1)
  {
    if (v4 == *(_BYTE **)(a1 + 32))
      v4[240] = 0;
    else
      operator delete(v4);
  }
  return a1;
}

uint64_t std::wstring::basic_string[abi:ne180100]<0>(uint64_t a1, __int32 *a2)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = wcslen(a2);
  if (v4 >= 0x3FFFFFFFFFFFFFF8)
    std::wstring::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 5)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((v4 | 1) != 5)
      v7 = v4 | 1;
    v6 = std::allocator<wchar_t>::allocate_at_least[abi:ne180100](a1, v7 + 1);
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v8 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_BYTE *)(a1 + 23) = v4;
    v6 = (void *)a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, a2, 4 * v5);
LABEL_9:
  *((_DWORD *)v6 + v5) = 0;
  return a1;
}

void std::__libcpp_unique_locale::~__libcpp_unique_locale(_xlocale **this)
{
  _xlocale *v1;

  v1 = *this;
  if (v1)
    freelocale(v1);
}

void std::wstring::__assign_trivial[abi:ne180100]<wchar_t *,wchar_t *>(std::wstring *this, std::wstring::value_type *a2, std::wstring::value_type *a3, std::wstring::size_type a4)
{
  std::wstring *v8;
  std::wstring::size_type size;
  std::wstring::size_type v10;
  unint64_t v11;
  unint64_t v12;
  std::wstring::value_type v13;

  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v8 = this;
    if (a4 <= 4)
      goto LABEL_11;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v10 = 4;
    goto LABEL_6;
  }
  v11 = this->__r_.__value_.__r.__words[2];
  v10 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v10 < a4)
  {
    size = this->__r_.__value_.__l.__size_;
LABEL_6:
    std::wstring::__grow_by(this, v10, a4 - v10, size, 0, size, 0);
    this->__r_.__value_.__l.__size_ = 0;
    LOBYTE(v12) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    goto LABEL_8;
  }
  v12 = HIBYTE(v11);
LABEL_8:
  v8 = this;
  if ((v12 & 0x80) != 0)
    v8 = (std::wstring *)this->__r_.__value_.__r.__words[0];
LABEL_11:
  while (a2 != a3)
  {
    v13 = *a2++;
    v8->__r_.__value_.__s.__data_[0] = v13;
    v8 = (std::wstring *)((char *)v8 + 4);
  }
  v8->__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    this->__r_.__value_.__l.__size_ = a4;
  else
    *((_BYTE *)&this->__r_.__value_.__s + 23) = a4 & 0x7F;
}

uint64_t std::moneypunct_byname<char,false>::moneypunct_byname[abi:ne180100](uint64_t a1, char *a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 8) = a3 - 1;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  if (a2[23] < 0)
    a2 = *(char **)a2;
  std::moneypunct_byname<char,false>::init(a1, a2);
  return a1;
}

void sub_191FFE434(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 + 119) < 0)
    operator delete(*(void **)(v1 + 96));
  std::moneypunct_byname<char,false>::moneypunct_byname[abi:ne180100]();
  std::__shared_count::~__shared_count((std::__shared_count *)v1);
  _Unwind_Resume(a1);
}

uint64_t std::moneypunct_byname<char,true>::moneypunct_byname[abi:ne180100](uint64_t a1, char *a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 8) = a3 - 1;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  if (a2[23] < 0)
    a2 = *(char **)a2;
  std::moneypunct_byname<char,true>::init(a1, a2);
  return a1;
}

void sub_191FFE4EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 + 119) < 0)
    operator delete(*(void **)(v1 + 96));
  std::moneypunct_byname<char,true>::moneypunct_byname[abi:ne180100]();
  std::__shared_count::~__shared_count((std::__shared_count *)v1);
  _Unwind_Resume(a1);
}

uint64_t std::moneypunct_byname<wchar_t,false>::moneypunct_byname[abi:ne180100](uint64_t a1, char *a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 8) = a3 - 1;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  if (a2[23] < 0)
    a2 = *(char **)a2;
  std::moneypunct_byname<wchar_t,false>::init(a1, a2);
  return a1;
}

void sub_191FFE5A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 + 119) < 0)
    operator delete(*(void **)(v1 + 96));
  std::moneypunct_byname<wchar_t,false>::moneypunct_byname[abi:ne180100]();
  std::__shared_count::~__shared_count((std::__shared_count *)v1);
  _Unwind_Resume(a1);
}

uint64_t std::moneypunct_byname<wchar_t,true>::moneypunct_byname[abi:ne180100](uint64_t a1, char *a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 8) = a3 - 1;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  if (a2[23] < 0)
    a2 = *(char **)a2;
  std::moneypunct_byname<wchar_t,true>::init(a1, a2);
  return a1;
}

void sub_191FFE65C(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 + 119) < 0)
    operator delete(*(void **)(v1 + 96));
  std::moneypunct_byname<wchar_t,true>::moneypunct_byname[abi:ne180100]();
  std::__shared_count::~__shared_count((std::__shared_count *)v1);
  _Unwind_Resume(a1);
}

std::__time_get *std::time_get_byname<char,std::istreambuf_iterator<char>>::time_get_byname[abi:ne180100](std::__time_get *a1, const std::string *a2, uint64_t a3)
{
  a1[1].__loc_ = (locale_t)(a3 - 1);
  std::__time_get_storage<char>::__time_get_storage(a1 + 3, a2);
  return a1;
}

void sub_191FFE6F0(_Unwind_Exception *a1)
{
  std::__shared_count *v1;

  std::__shared_count::~__shared_count(v1);
  _Unwind_Resume(a1);
}

std::__time_get *std::time_get_byname<wchar_t,std::istreambuf_iterator<wchar_t>>::time_get_byname[abi:ne180100](std::__time_get *a1, const std::string *a2, uint64_t a3)
{
  a1[1].__loc_ = (locale_t)(a3 - 1);
  std::__time_get_storage<wchar_t>::__time_get_storage(a1 + 3, a2);
  return a1;
}

void sub_191FFE760(_Unwind_Exception *a1)
{
  std::__shared_count *v1;

  std::__shared_count::~__shared_count(v1);
  _Unwind_Resume(a1);
}

std::__time_put *std::time_put<char,std::ostreambuf_iterator<char>>::time_put[abi:ne180100](std::__time_put *a1, const std::string *a2, uint64_t a3)
{
  a1[1].__loc_ = (locale_t)(a3 - 1);
  std::__time_put::__time_put(a1 + 2, a2);
  return a1;
}

void sub_191FFE7B8(_Unwind_Exception *a1)
{
  std::__shared_count *v1;

  std::__shared_count::~__shared_count(v1);
  _Unwind_Resume(a1);
}

std::__time_put *std::time_put<wchar_t,std::ostreambuf_iterator<wchar_t>>::time_put[abi:ne180100](std::__time_put *a1, const std::string *a2, uint64_t a3)
{
  a1[1].__loc_ = (locale_t)(a3 - 1);
  std::__time_put::__time_put(a1 + 2, a2);
  return a1;
}

void sub_191FFE810(_Unwind_Exception *a1)
{
  std::__shared_count *v1;

  std::__shared_count::~__shared_count(v1);
  _Unwind_Resume(a1);
}

uint64_t ***std::__call_once_proxy[abi:ne180100]<std::tuple<std::locale::id::__get(void)::$_0 &&>>(uint64_t ***result)
{
  uint64_t v1;
  unsigned int v2;
  unsigned int v3;

  v1 = ***result;
  do
  {
    v2 = __ldaxr((unsigned int *)&std::locale::id::__next_id);
    v3 = v2 + 1;
  }
  while (__stlxr(v3, (unsigned int *)&std::locale::id::__next_id));
  *(_DWORD *)(v1 + 8) = v3;
  return result;
}

void std::__time_get_temp<char>::~__time_get_temp(std::ctype_byname<char> *a1)
{
  std::ctype_byname<char>::~ctype_byname(a1);
  JUMPOUT(0x194021E38);
}

void std::__time_get_temp<wchar_t>::~__time_get_temp(std::ctype_byname<wchar_t> *a1)
{
  std::ctype_byname<wchar_t>::~ctype_byname(a1);
  JUMPOUT(0x194021E38);
}

char *std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<char *>,std::__wrap_iter<char *>>(char *__src, char *a2, char *a3)
{
  char *v4;
  char v6;
  int64_t v7;
  char v8;
  size_t v9;

  v4 = a3;
  if (__src != a2)
  {
    if (a2 == a3)
    {
      return __src;
    }
    else if (__src + 1 == a2)
    {
      v6 = *__src;
      v7 = a3 - a2;
      memmove(__src, a2, a3 - a2);
      v4 = &__src[v7];
      *v4 = v6;
    }
    else if (a2 + 1 == a3)
    {
      v8 = *(a3 - 1);
      v4 = __src + 1;
      v9 = a3 - 1 - __src;
      if (a3 - 1 != __src)
        memmove(__src + 1, __src, v9);
      *__src = v8;
    }
    else
    {
      return std::__rotate_gcd[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<char *>>(__src, a2, a3);
    }
  }
  return v4;
}

_BYTE *std::__rotate_gcd[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<char *>>(_BYTE *a1, _BYTE *a2, _BYTE *a3)
{
  uint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  char v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  char v12;
  char v13;
  _BYTE *v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;
  BOOL v18;
  char v19;
  uint64_t v20;

  v3 = a2 - a1;
  if (a2 - a1 == a3 - a2)
  {
    if (a1 != a2 && a2 != a3)
    {
      v4 = a1 + 1;
      v5 = a2 + 1;
      do
      {
        v6 = *(v4 - 1);
        *(v4 - 1) = *(v5 - 1);
        *(v5 - 1) = v6;
        if (v4 == a2)
          break;
        ++v4;
      }
      while (v5++ != a3);
    }
  }
  else
  {
    v8 = a3 - a2;
    v9 = a2 - a1;
    do
    {
      v10 = v9;
      v9 = v8;
      v8 = v10 % v8;
    }
    while (v8);
    if (v9)
    {
      v11 = &a1[v9];
      do
      {
        v13 = *--v11;
        v12 = v13;
        v14 = &v11[v3];
        v15 = v11;
        do
        {
          v16 = v14;
          *v15 = *v14;
          v17 = a3 - v14;
          v18 = __OFSUB__(v3, v17);
          v20 = v3 - v17;
          v19 = (v20 < 0) ^ v18;
          v14 = &a1[v20];
          if (v19)
            v14 = &v16[v3];
          v15 = v16;
        }
        while (v14 != v11);
        *v16 = v12;
      }
      while (v11 != a1);
    }
    return &a1[a3 - a2];
  }
  return a2;
}

char *std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<wchar_t *>,std::__wrap_iter<wchar_t *>>(char *__src, char *a2, char *a3)
{
  char *v4;
  int v6;
  int64_t v7;
  int v8;
  size_t v9;

  v4 = a3;
  if (__src != a2)
  {
    if (a2 == a3)
    {
      return __src;
    }
    else if (__src + 4 == a2)
    {
      v6 = *(_DWORD *)__src;
      v7 = a3 - a2;
      memmove(__src, a2, a3 - a2);
      v4 = &__src[v7];
      *(_DWORD *)v4 = v6;
    }
    else if (a2 + 4 == a3)
    {
      v8 = *((_DWORD *)a3 - 1);
      v4 = __src + 4;
      v9 = a3 - 4 - __src;
      if (a3 - 4 != __src)
        memmove(__src + 4, __src, v9);
      *(_DWORD *)__src = v8;
    }
    else
    {
      return (char *)std::__rotate_gcd[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<wchar_t *>>(__src, a2, a3);
    }
  }
  return v4;
}

_DWORD *std::__rotate_gcd[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<wchar_t *>>(_DWORD *a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  int v12;
  int v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  BOOL v18;
  char v19;
  uint64_t v20;

  v3 = a2 - a1;
  if (v3 == a3 - a2)
  {
    if (a1 != a2 && a2 != a3)
    {
      v4 = a1 + 1;
      v5 = a2 + 1;
      do
      {
        v6 = *(v4 - 1);
        *(v4 - 1) = *(v5 - 1);
        *(v5 - 1) = v6;
        if (v4 == a2)
          break;
        ++v4;
      }
      while (v5++ != a3);
    }
  }
  else
  {
    v8 = a3 - a2;
    v9 = a2 - a1;
    do
    {
      v10 = v9;
      v9 = v8;
      v8 = v10 % v8;
    }
    while (v8);
    if (v9)
    {
      v11 = &a1[v9];
      do
      {
        v13 = *--v11;
        v12 = v13;
        v14 = &v11[v3];
        v15 = v11;
        do
        {
          v16 = v14;
          *v15 = *v14;
          v17 = &v14[v3];
          v18 = __OFSUB__(v3, a3 - v14);
          v20 = v3 - (a3 - v14);
          v19 = (v20 < 0) ^ v18;
          v14 = &a1[v20];
          if (v19)
            v14 = v17;
          v15 = v16;
        }
        while (v14 != v11);
        *v16 = v12;
      }
      while (v11 != a1);
    }
    return &a1[a3 - a2];
  }
  return a2;
}

uint64_t std::__num_get_signed_integral[abi:ne180100]<long>(const char *a1, char *a2, _DWORD *a3, int a4)
{
  int v8;
  uint64_t v9;
  int v10;
  char *v12;

  if (a1 == a2)
    goto LABEL_9;
  v8 = *__error();
  *__error() = 0;
  v9 = strtoll_l(a1, &v12, a4, 0);
  v10 = *__error();
  if (!v10)
  {
    *__error() = v8;
    if (v12 == a2)
      return v9;
LABEL_9:
    v9 = 0;
    *a3 = 4;
    return v9;
  }
  if (v12 != a2)
    goto LABEL_9;
  if (v10 == 34)
  {
    *a3 = 4;
    if (v9 > 0)
      return 0x7FFFFFFFFFFFFFFFLL;
    else
      return 0x8000000000000000;
  }
  return v9;
}

uint64_t std::__num_get_signed_integral[abi:ne180100]<long long>(const char *a1, char *a2, _DWORD *a3, int a4)
{
  int v8;
  uint64_t v9;
  int v10;
  char *v12;

  if (a1 == a2)
    goto LABEL_9;
  v8 = *__error();
  *__error() = 0;
  v9 = strtoll_l(a1, &v12, a4, 0);
  v10 = *__error();
  if (!v10)
  {
    *__error() = v8;
    if (v12 == a2)
      return v9;
LABEL_9:
    v9 = 0;
    *a3 = 4;
    return v9;
  }
  if (v12 != a2)
    goto LABEL_9;
  if (v10 == 34)
  {
    *a3 = 4;
    if (v9 > 0)
      return 0x7FFFFFFFFFFFFFFFLL;
    else
      return 0x8000000000000000;
  }
  return v9;
}

uint64_t std::__num_get_unsigned_integral[abi:ne180100]<unsigned short>(char *a1, char *a2, _DWORD *a3, int a4)
{
  const char *v7;
  int v8;
  int v9;
  unint64_t v10;
  int v11;
  int v12;
  char *v14;

  if (a1 == a2)
    goto LABEL_12;
  v7 = a1;
  v8 = *a1;
  if (v8 == 45)
  {
    v7 = a1 + 1;
    if (a1 + 1 == a2)
      goto LABEL_12;
  }
  v9 = *__error();
  *__error() = 0;
  v10 = strtoull_l(v7, &v14, a4, 0);
  v11 = *__error();
  if (v11)
  {
    if (v14 == a2)
    {
      if (v11 != 34 && !(v10 >> 16))
        goto LABEL_8;
LABEL_15:
      *a3 = 4;
      LOWORD(v12) = -1;
      return (unsigned __int16)v12;
    }
LABEL_12:
    LOWORD(v12) = 0;
    *a3 = 4;
    return (unsigned __int16)v12;
  }
  *__error() = v9;
  if (v14 != a2)
    goto LABEL_12;
  if (v10 >= 0x10000)
    goto LABEL_15;
LABEL_8:
  if (v8 == 45)
    return (unsigned __int16)-(int)v10;
  else
    LOWORD(v12) = v10;
  return (unsigned __int16)v12;
}

uint64_t std::__num_get_unsigned_integral[abi:ne180100]<unsigned int>(char *a1, char *a2, _DWORD *a3, int a4)
{
  const char *v7;
  int v8;
  int v9;
  unint64_t v10;
  int v11;
  uint64_t result;
  char *v13;

  if (a1 == a2)
    goto LABEL_9;
  v7 = a1;
  v8 = *a1;
  if (v8 == 45)
  {
    v7 = a1 + 1;
    if (a1 + 1 == a2)
      goto LABEL_9;
  }
  v9 = *__error();
  *__error() = 0;
  v10 = strtoull_l(v7, &v13, a4, 0);
  v11 = *__error();
  if (!v11)
  {
    *__error() = v9;
    if (v13 == a2)
      goto LABEL_10;
LABEL_9:
    result = 0;
    *a3 = 4;
    return result;
  }
  if (v13 != a2)
    goto LABEL_9;
  if (v11 == 34)
    goto LABEL_14;
LABEL_10:
  if (HIDWORD(v10))
  {
LABEL_14:
    *a3 = 4;
    return 0xFFFFFFFFLL;
  }
  if (v8 == 45)
    return -(int)v10;
  else
    return v10;
}

uint64_t std::__num_get_unsigned_integral[abi:ne180100]<unsigned long>(char *a1, char *a2, _DWORD *a3, int a4)
{
  const char *v7;
  int v8;
  int v9;
  unint64_t v10;
  int v11;
  uint64_t result;
  char *v13;

  if (a1 == a2)
    goto LABEL_9;
  v7 = a1;
  v8 = *a1;
  if (v8 == 45)
  {
    v7 = a1 + 1;
    if (a1 + 1 == a2)
      goto LABEL_9;
  }
  v9 = *__error();
  *__error() = 0;
  v10 = strtoull_l(v7, &v13, a4, 0);
  v11 = *__error();
  if (v11)
  {
    if (v13 == a2)
    {
      if (v11 == 34)
      {
        *a3 = 4;
        return -1;
      }
      goto LABEL_11;
    }
LABEL_9:
    result = 0;
    *a3 = 4;
    return result;
  }
  *__error() = v9;
  if (v13 != a2)
    goto LABEL_9;
LABEL_11:
  if (v8 == 45)
    return -(uint64_t)v10;
  else
    return v10;
}

uint64_t std::__num_get_unsigned_integral[abi:ne180100]<unsigned long long>(char *a1, char *a2, _DWORD *a3, int a4)
{
  const char *v7;
  int v8;
  int v9;
  unint64_t v10;
  int v11;
  uint64_t result;
  char *v13;

  if (a1 == a2)
    goto LABEL_9;
  v7 = a1;
  v8 = *a1;
  if (v8 == 45)
  {
    v7 = a1 + 1;
    if (a1 + 1 == a2)
      goto LABEL_9;
  }
  v9 = *__error();
  *__error() = 0;
  v10 = strtoull_l(v7, &v13, a4, 0);
  v11 = *__error();
  if (v11)
  {
    if (v13 == a2)
    {
      if (v11 == 34)
      {
        *a3 = 4;
        return -1;
      }
      goto LABEL_11;
    }
LABEL_9:
    result = 0;
    *a3 = 4;
    return result;
  }
  *__error() = v9;
  if (v13 != a2)
    goto LABEL_9;
LABEL_11:
  if (v8 == 45)
    return -(uint64_t)v10;
  else
    return v10;
}

float std::__num_get_float[abi:ne180100]<float>(const char *a1, char *a2, _DWORD *a3)
{
  int v6;
  float v7;
  int v8;
  float v9;
  char *v11;

  if (a1 == a2)
  {
    *a3 = 4;
    return 0.0;
  }
  v6 = *__error();
  *__error() = 0;
  v7 = strtof_l(a1, &v11, 0);
  v8 = *__error();
  if (!v8)
  {
    *__error() = v6;
    v9 = 0.0;
    if (v11 == a2)
      return v7;
LABEL_8:
    *a3 = 4;
    return v9;
  }
  v9 = 0.0;
  if (v11 != a2)
    goto LABEL_8;
  v9 = v7;
  if (v8 == 34)
    goto LABEL_8;
  return v7;
}

double std::__num_get_float[abi:ne180100]<double>(const char *a1, char *a2, _DWORD *a3)
{
  int v6;
  double v7;
  int v8;
  double v9;
  char *v11;

  if (a1 == a2)
  {
    *a3 = 4;
    return 0.0;
  }
  v6 = *__error();
  *__error() = 0;
  v7 = strtod_l(a1, &v11, 0);
  v8 = *__error();
  if (!v8)
  {
    *__error() = v6;
    v9 = 0.0;
    if (v11 == a2)
      return v7;
LABEL_8:
    *a3 = 4;
    return v9;
  }
  v9 = 0.0;
  if (v11 != a2)
    goto LABEL_8;
  v9 = v7;
  if (v8 == 34)
    goto LABEL_8;
  return v7;
}

double std::__num_get_float[abi:ne180100]<long double>(const char *a1, char *a2, _DWORD *a3)
{
  int v6;
  double v7;
  int v8;
  double v9;
  char *v11;

  if (a1 == a2)
  {
    *a3 = 4;
    return 0.0;
  }
  v6 = *__error();
  *__error() = 0;
  v7 = strtold_l(a1, &v11, 0);
  v8 = *__error();
  if (!v8)
  {
    *__error() = v6;
    v9 = 0.0;
    if (v11 == a2)
      return v7;
LABEL_8:
    *a3 = 4;
    return v9;
  }
  v9 = 0.0;
  if (v11 != a2)
    goto LABEL_8;
  v9 = v7;
  if (v8 == 34)
    goto LABEL_8;
  return v7;
}

BOOL std::istreambuf_iterator<wchar_t>::__test_for_eof[abi:ne180100](_QWORD **a1)
{
  _QWORD *v2;
  int *v3;
  int v4;

  v2 = *a1;
  if (v2)
  {
    v3 = (int *)v2[3];
    if (v3 == (int *)v2[4])
      v4 = (*(uint64_t (**)(_QWORD *))(*v2 + 72))(v2);
    else
      v4 = *v3;
    if (v4 != -1)
      return *a1 == 0;
    *a1 = 0;
  }
  return 1;
}

uint64_t std::__time_get_storage<char>::~__time_get_storage[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  if (*(char *)(a1 + 1063) < 0)
    operator delete(*(void **)(a1 + 1040));
  if (*(char *)(a1 + 1039) < 0)
    operator delete(*(void **)(a1 + 1016));
  if (*(char *)(a1 + 1015) < 0)
    operator delete(*(void **)(a1 + 992));
  if (*(char *)(a1 + 991) < 0)
    operator delete(*(void **)(a1 + 968));
  for (i = 0; i != -48; i -= 24)
  {
    if (*(char *)(a1 + i + 967) < 0)
      operator delete(*(void **)(a1 + i + 944));
  }
  v3 = 576;
  do
  {
    if (*(char *)(a1 + v3 + 343) < 0)
      operator delete(*(void **)(a1 + v3 + 320));
    v3 -= 24;
  }
  while (v3);
  do
  {
    if (*(char *)(a1 + v3 + 343) < 0)
      operator delete(*(void **)(a1 + v3 + 320));
    v3 -= 24;
  }
  while (v3 != -336);
  freelocale(*(locale_t *)a1);
  return a1;
}

uint64_t std::__time_get_storage<wchar_t>::~__time_get_storage[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  if (*(char *)(a1 + 1063) < 0)
    operator delete(*(void **)(a1 + 1040));
  if (*(char *)(a1 + 1039) < 0)
    operator delete(*(void **)(a1 + 1016));
  if (*(char *)(a1 + 1015) < 0)
    operator delete(*(void **)(a1 + 992));
  if (*(char *)(a1 + 991) < 0)
    operator delete(*(void **)(a1 + 968));
  for (i = 0; i != -48; i -= 24)
  {
    if (*(char *)(a1 + i + 967) < 0)
      operator delete(*(void **)(a1 + i + 944));
  }
  v3 = 576;
  do
  {
    if (*(char *)(a1 + v3 + 343) < 0)
      operator delete(*(void **)(a1 + v3 + 320));
    v3 -= 24;
  }
  while (v3);
  do
  {
    if (*(char *)(a1 + v3 + 343) < 0)
      operator delete(*(void **)(a1 + v3 + 320));
    v3 -= 24;
  }
  while (v3 != -336);
  freelocale(*(locale_t *)a1);
  return a1;
}

void std::moneypunct_byname<char,false>::~moneypunct_byname(std::__shared_count *this)
{
  if (SHIBYTE(this[7].__vftable) < 0)
    operator delete(this[6].__vftable);
  if (SHIBYTE(this[5].__shared_owners_) < 0)
    operator delete((void *)this[4].__shared_owners_);
  if (SHIBYTE(this[4].__vftable) < 0)
    operator delete(this[3].__vftable);
  if (SHIBYTE(this[2].__shared_owners_) < 0)
    operator delete((void *)this[1].__shared_owners_);
  std::__shared_count::~__shared_count(this);
}

void std::moneypunct_byname<char,true>::~moneypunct_byname(std::__shared_count *this)
{
  if (SHIBYTE(this[7].__vftable) < 0)
    operator delete(this[6].__vftable);
  if (SHIBYTE(this[5].__shared_owners_) < 0)
    operator delete((void *)this[4].__shared_owners_);
  if (SHIBYTE(this[4].__vftable) < 0)
    operator delete(this[3].__vftable);
  if (SHIBYTE(this[2].__shared_owners_) < 0)
    operator delete((void *)this[1].__shared_owners_);
  std::__shared_count::~__shared_count(this);
}

void std::moneypunct_byname<wchar_t,false>::~moneypunct_byname(std::__shared_count *this)
{
  if (SHIBYTE(this[7].__vftable) < 0)
    operator delete(this[6].__vftable);
  if (SHIBYTE(this[5].__shared_owners_) < 0)
    operator delete((void *)this[4].__shared_owners_);
  if (SHIBYTE(this[4].__vftable) < 0)
    operator delete(this[3].__vftable);
  if (SHIBYTE(this[2].__shared_owners_) < 0)
    operator delete((void *)this[1].__shared_owners_);
  std::__shared_count::~__shared_count(this);
}

void std::moneypunct_byname<wchar_t,true>::~moneypunct_byname(std::__shared_count *this)
{
  if (SHIBYTE(this[7].__vftable) < 0)
    operator delete(this[6].__vftable);
  if (SHIBYTE(this[5].__shared_owners_) < 0)
    operator delete((void *)this[4].__shared_owners_);
  if (SHIBYTE(this[4].__vftable) < 0)
    operator delete(this[3].__vftable);
  if (SHIBYTE(this[2].__shared_owners_) < 0)
    operator delete((void *)this[1].__shared_owners_);
  std::__shared_count::~__shared_count(this);
}

uint64_t OUTLINED_FUNCTION_0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

void OUTLINED_FUNCTION_1(unint64_t *a1@<X8>)
{
  unint64_t v1;

  v1 = __ldaxr(a1);
  __stlxr(v1 - 1, a1);
}

void OUTLINED_FUNCTION_2(void *__p)
{
  operator delete(__p);
}

void OUTLINED_FUNCTION_5()
{
  void **v0;

  operator delete(*v0);
}

void OUTLINED_FUNCTION_6(uint64_t a1, void **a2)
{
  operator delete(*a2);
}

void __cxx_global_array_dtor()
{
  uint64_t v0;

  v0 = 0x2Au;
  do
  {
    if (SHIBYTE(std::init_weeks(void)::weeks[v0 - 1]) < 0)
      operator delete((void *)std::init_weeks(void)::weeks[v0 - 3]);
    v0 -= 3;
  }
  while (v0 * 8);
}

void __cxx_global_array_dtor_80()
{
  uint64_t v0;

  v0 = 0x150u;
  do
  {
    if (std::init_wweeks(void)::weeks[v0 - 1] < 0)
      operator delete(*(void **)&std::init_wweeks(void)::weeks[v0 - 24]);
    v0 -= 24;
  }
  while (v0);
}

void __cxx_global_array_dtor_95()
{
  uint64_t v0;

  v0 = 0x48u;
  do
  {
    if (SHIBYTE(std::init_months(void)::months[v0 - 1]) < 0)
      operator delete((void *)std::init_months(void)::months[v0 - 3]);
    v0 -= 3;
  }
  while (v0 * 8);
}

void __cxx_global_array_dtor_119()
{
  uint64_t v0;

  v0 = 0x240u;
  do
  {
    if (std::init_wmonths(void)::months[v0 - 1] < 0)
      operator delete(*(void **)&std::init_wmonths(void)::months[v0 - 24]);
    v0 -= 24;
  }
  while (v0);
}

void __cxx_global_array_dtor_143()
{
  uint64_t i;

  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(std::init_am_pm(void)::am_pm[i + 5]) < 0)
      operator delete((void *)std::init_am_pm(void)::am_pm[i + 3]);
  }
}

void __cxx_global_array_dtor_146()
{
  uint64_t i;

  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(std::init_wam_pm(void)::am_pm[i + 5]) < 0)
      operator delete((void *)std::init_wam_pm(void)::am_pm[i + 3]);
  }
}

char *std::__get_ostream_file(_QWORD *a1)
{
  char *v1;
  const void *v2;
  char *v3;
  char *v4;
  char *result;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v2 = (const void *)*((_QWORD *)v1 + 5);
  if (!v2)
    return 0;
  if (v3)
  {
    v4 = v3 + 120;
  }
  else
  {
    if (!result)
      return result;
    v4 = result + 64;
  }
  return *(char **)v4;
}

std::regex_error *__cdecl std::regex_error::regex_error(std::regex_error *this, std::regex_constants::error_type __ecode)
{
  const char *v3;
  std::regex_error *result;

  if (__ecode - 1 > 0x10)
    v3 = "Unknown error type";
  else
    v3 = (&off_1E2E5C290)[__ecode - 1];
  result = (std::regex_error *)std::runtime_error::runtime_error(this, v3);
  result->__code_ = __ecode;
  return result;
}

void std::regex_error::~regex_error(std::regex_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x194021E38);
}

std::string *__cdecl std::__get_collation_name(std::string *__return_ptr retstr, const char *__s)
{
  unint64_t v4;
  char **v5;
  const char **v6;
  char **v7;
  const char *v8;
  std::string *result;
  std::string::value_type v10;

  v4 = 111;
  do
  {
    v6 = (const char **)&v5[2 * (v4 >> 1)];
    v8 = *v6;
    v7 = (char **)(v6 + 2);
    result = (std::string *)strcmp(v8, __s);
    if ((int)result >= 0)
      v4 >>= 1;
    else
      v4 += ~(v4 >> 1);
    if ((int)result < 0)
      v5 = v7;
  }
  while (v4);
  retstr->__r_.__value_.__r.__words[0] = 0;
  retstr->__r_.__value_.__l.__size_ = 0;
  retstr->__r_.__value_.__r.__words[2] = 0;
  {
    result = (std::string *)strcmp(__s, *v5);
    if (!(_DWORD)result)
    {
      v10 = *((_BYTE *)v5 + 8);
      *((_BYTE *)&retstr->__r_.__value_.__s + 23) = 1;
      retstr->__r_.__value_.__s.__data_[0] = v10;
    }
  }
  return result;
}

std::regex_traits<char>::char_class_type std::__get_classname(const char *__s, BOOL __icase)
{
  _BOOL4 v2;
  unint64_t v4;
  char **v5;
  const char **v6;
  char **v7;
  const char *v8;
  int v9;
  std::regex_traits<char>::char_class_type result;
  int v11;

  v2 = __icase;
  v4 = 15;
  do
  {
    v6 = (const char **)&v5[2 * (v4 >> 1)];
    v8 = *v6;
    v7 = (char **)(v6 + 2);
    v9 = strcmp(v8, __s);
    if (v9 >= 0)
      v4 >>= 1;
    else
      v4 += ~(v4 >> 1);
    if (v9 < 0)
      v5 = v7;
  }
  while (v4);
    return 0;
  v11 = *((_DWORD *)v5 + 2);
  if (v11 == 128)
    result = 38272;
  else
    result = *((_DWORD *)v5 + 2);
  if (v11 != 128 && v2)
  {
    if ((v11 & 0x9000) != 0)
      return v11 | 0x100;
    else
      return *((_DWORD *)v5 + 2);
  }
  return result;
}

uint64_t std::__match_any_but_newline<char>::__exec(uint64_t result, uint64_t a2)
{
  char *v2;
  int v3;
  BOOL v4;
  uint64_t v5;

  v2 = *(char **)(a2 + 16);
  if (v2 == *(char **)(a2 + 24) || ((v3 = *v2, v3 != 13) ? (v4 = v3 == 10) : (v4 = 1), v4))
  {
    v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    v5 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(a2 + 80) = v5;
  return result;
}

uint64_t std::__match_any_but_newline<wchar_t>::__exec(uint64_t result, uint64_t a2)
{
  int *v2;
  int v3;
  BOOL v4;
  BOOL v5;
  uint64_t v6;

  v2 = *(int **)(a2 + 16);
  if (v2 == *(int **)(a2 + 24)
    || ((v3 = *v2, (*v2 - 8232) >= 2) ? (v4 = v3 == 13) : (v4 = 1), !v4 ? (v5 = v3 == 10) : (v5 = 1), v5))
  {
    v6 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    v6 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(a2 + 80) = v6;
  return result;
}

std::strstreambuf *__cdecl std::strstreambuf::strstreambuf(std::strstreambuf *this, std::streamsize __alsize)
{
  std::strstreambuf *result;

  result = (std::strstreambuf *)std::streambuf::basic_streambuf((uint64_t)this);
  result->__strmode_ = 4;
  result->__palloc_ = 0;
  result->__pfree_ = 0;
  result->__alsize_ = __alsize;
  return result;
}

{
  std::strstreambuf *result;

  result = (std::strstreambuf *)std::streambuf::basic_streambuf((uint64_t)this);
  result->__strmode_ = 4;
  result->__palloc_ = 0;
  result->__pfree_ = 0;
  result->__alsize_ = __alsize;
  return result;
}

std::strstreambuf *__cdecl std::strstreambuf::strstreambuf(std::strstreambuf *this, void *(__cdecl *__palloc)(size_t), void (__cdecl *__pfree)(void *))
{
  std::strstreambuf *result;

  result = (std::strstreambuf *)std::streambuf::basic_streambuf((uint64_t)this);
  result->__strmode_ = 4;
  result->__alsize_ = 4096;
  result->__palloc_ = __palloc;
  result->__pfree_ = __pfree;
  return result;
}

{
  std::strstreambuf *result;

  result = (std::strstreambuf *)std::streambuf::basic_streambuf((uint64_t)this);
  result->__strmode_ = 4;
  result->__alsize_ = 4096;
  result->__palloc_ = __palloc;
  result->__pfree_ = __pfree;
  return result;
}

void std::strstreambuf::__init(std::strstreambuf *this, char *__gnext, std::streamsize __n, char *__pbeg)
{
  char *v4;
  size_t v7;

  v4 = __pbeg;
  if (__n)
  {
    if (__n >= 0)
      v7 = __n;
    else
      v7 = 0x7FFFFFFFLL;
    if (__pbeg)
      goto LABEL_6;
LABEL_8:
    v4 = &__gnext[v7];
    goto LABEL_9;
  }
  v7 = strlen(__gnext);
  if (!v4)
    goto LABEL_8;
LABEL_6:
  this->__bout_ = v4;
  this->__nout_ = v4;
  this->__eout_ = &v4[v7];
LABEL_9:
  this->__binp_ = __gnext;
  this->__ninp_ = __gnext;
  this->__einp_ = v4;
}

std::strstreambuf *__cdecl std::strstreambuf::strstreambuf(std::strstreambuf *this, char *__gnext, std::streamsize __n, char *__pbeg)
{
  uint64_t v8;
  size_t v9;

  v8 = std::streambuf::basic_streambuf((uint64_t)this);
  *(_DWORD *)(v8 + 64) = 0;
  *(_QWORD *)(v8 + 80) = 0;
  *(_QWORD *)(v8 + 88) = 0;
  *(_QWORD *)(v8 + 72) = 4096;
  if (__n)
  {
    if (__n >= 0)
      v9 = __n;
    else
      v9 = 0x7FFFFFFFLL;
    if (__pbeg)
      goto LABEL_6;
LABEL_8:
    __pbeg = &__gnext[v9];
    goto LABEL_9;
  }
  v9 = strlen(__gnext);
  if (!__pbeg)
    goto LABEL_8;
LABEL_6:
  this->__bout_ = __pbeg;
  this->__nout_ = __pbeg;
  this->__eout_ = &__pbeg[v9];
LABEL_9:
  this->__binp_ = __gnext;
  this->__ninp_ = __gnext;
  this->__einp_ = __pbeg;
  return this;
}

{
  uint64_t v8;
  size_t v9;

  v8 = std::streambuf::basic_streambuf((uint64_t)this);
  *(_DWORD *)(v8 + 64) = 0;
  *(_QWORD *)(v8 + 80) = 0;
  *(_QWORD *)(v8 + 88) = 0;
  *(_QWORD *)(v8 + 72) = 4096;
  if (__n)
  {
    if (__n >= 0)
      v9 = __n;
    else
      v9 = 0x7FFFFFFFLL;
    if (__pbeg)
      goto LABEL_6;
LABEL_8:
    __pbeg = &__gnext[v9];
    goto LABEL_9;
  }
  v9 = strlen(__gnext);
  if (!__pbeg)
    goto LABEL_8;
LABEL_6:
  this->__bout_ = __pbeg;
  this->__nout_ = __pbeg;
  this->__eout_ = &__pbeg[v9];
LABEL_9:
  this->__binp_ = __gnext;
  this->__ninp_ = __gnext;
  this->__einp_ = __pbeg;
  return this;
}

std::strstreambuf *__cdecl std::strstreambuf::strstreambuf(std::strstreambuf *this, const char *__gnext, std::streamsize __n)
{
  uint64_t v6;
  size_t v7;

  v6 = std::streambuf::basic_streambuf((uint64_t)this);
  *(_DWORD *)(v6 + 64) = 2;
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = 0;
  *(_QWORD *)(v6 + 72) = 4096;
  if (__n)
  {
    if (__n >= 0)
      v7 = __n;
    else
      v7 = 0x7FFFFFFFLL;
  }
  else
  {
    v7 = strlen(__gnext);
  }
  this->__binp_ = (std::streambuf::char_type *)__gnext;
  this->__ninp_ = (std::streambuf::char_type *)__gnext;
  this->__einp_ = (std::streambuf::char_type *)&__gnext[v7];
  return this;
}

{
  uint64_t v6;
  size_t v7;

  v6 = std::streambuf::basic_streambuf((uint64_t)this);
  *(_DWORD *)(v6 + 64) = 2;
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = 0;
  *(_QWORD *)(v6 + 72) = 4096;
  if (__n)
  {
    if (__n >= 0)
      v7 = __n;
    else
      v7 = 0x7FFFFFFFLL;
  }
  else
  {
    v7 = strlen(__gnext);
  }
  this->__binp_ = (std::streambuf::char_type *)__gnext;
  this->__ninp_ = (std::streambuf::char_type *)__gnext;
  this->__einp_ = (std::streambuf::char_type *)&__gnext[v7];
  return this;
}

std::strstreambuf *__cdecl std::strstreambuf::strstreambuf(std::strstreambuf *this, unsigned __int8 *__gnext, std::streamsize __n, unsigned __int8 *__pbeg)
{
  uint64_t v8;
  size_t v9;

  v8 = std::streambuf::basic_streambuf((uint64_t)this);
  *(_DWORD *)(v8 + 64) = 0;
  *(_QWORD *)(v8 + 80) = 0;
  *(_QWORD *)(v8 + 88) = 0;
  *(_QWORD *)(v8 + 72) = 4096;
  if (__n)
  {
    if (__n >= 0)
      v9 = __n;
    else
      v9 = 0x7FFFFFFFLL;
    if (__pbeg)
      goto LABEL_6;
LABEL_8:
    __pbeg = &__gnext[v9];
    goto LABEL_9;
  }
  v9 = strlen((const char *)__gnext);
  if (!__pbeg)
    goto LABEL_8;
LABEL_6:
  this->__bout_ = (std::streambuf::char_type *)__pbeg;
  this->__nout_ = (std::streambuf::char_type *)__pbeg;
  this->__eout_ = (std::streambuf::char_type *)&__pbeg[v9];
LABEL_9:
  this->__binp_ = (std::streambuf::char_type *)__gnext;
  this->__ninp_ = (std::streambuf::char_type *)__gnext;
  this->__einp_ = (std::streambuf::char_type *)__pbeg;
  return this;
}

std::strstreambuf *__cdecl std::strstreambuf::strstreambuf(std::strstreambuf *this, const unsigned __int8 *__gnext, std::streamsize __n)
{
  uint64_t v6;
  size_t v7;

  v6 = std::streambuf::basic_streambuf((uint64_t)this);
  *(_DWORD *)(v6 + 64) = 2;
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = 0;
  *(_QWORD *)(v6 + 72) = 4096;
  if (__n)
  {
    if (__n >= 0)
      v7 = __n;
    else
      v7 = 0x7FFFFFFFLL;
  }
  else
  {
    v7 = strlen((const char *)__gnext);
  }
  this->__binp_ = (std::streambuf::char_type *)__gnext;
  this->__ninp_ = (std::streambuf::char_type *)__gnext;
  this->__einp_ = (std::streambuf::char_type *)&__gnext[v7];
  return this;
}

void std::strstreambuf::~strstreambuf(std::strstreambuf *this)
{
  void (*pfree)(void);

  if (this->__binp_ && (this->__strmode_ & 9) == 1)
  {
    pfree = (void (*)(void))this->__pfree_;
    if (pfree)
      pfree();
    else
      MEMORY[0x194021E14]();
  }
  std::streambuf::~streambuf((std::locale *)this);
}

{
  std::strstreambuf::~strstreambuf(this);
  JUMPOUT(0x194021E38);
}

void std::strstreambuf::swap(std::strstreambuf *this, std::strstreambuf *__rhs)
{
  std::strstreambuf::__mode_type strmode;
  std::streamsize alsize;
  void *(__cdecl *palloc)(size_t);
  void *(__cdecl *v7)(size_t);
  void (__cdecl *pfree)(void *);

  std::streambuf::swap((const std::locale *)this, (std::locale *)__rhs);
  strmode = this->__strmode_;
  this->__strmode_ = __rhs->__strmode_;
  __rhs->__strmode_ = strmode;
  alsize = this->__alsize_;
  palloc = this->__palloc_;
  v7 = __rhs->__palloc_;
  this->__alsize_ = __rhs->__alsize_;
  this->__palloc_ = v7;
  __rhs->__alsize_ = alsize;
  __rhs->__palloc_ = palloc;
  pfree = this->__pfree_;
  this->__pfree_ = __rhs->__pfree_;
  __rhs->__pfree_ = pfree;
}

void std::strstreambuf::freeze(std::strstreambuf *this, BOOL __freezefl)
{
  std::strstreambuf::__mode_type strmode;
  unsigned int v3;
  int v4;

  strmode = this->__strmode_;
  if ((strmode & 4) != 0)
  {
    v3 = strmode & 0xFFFFFFF7;
    if (__freezefl)
      v4 = 8;
    else
      v4 = 0;
    this->__strmode_ = v3 | v4;
  }
}

char *__cdecl std::strstreambuf::str(std::strstreambuf *this)
{
  std::strstreambuf::__mode_type strmode;

  strmode = this->__strmode_;
  if ((strmode & 4) != 0)
    this->__strmode_ = strmode | 8;
  return this->__binp_;
}

int std::strstreambuf::pcount(const std::strstreambuf *this)
{
  return LODWORD(this->__nout_) - LODWORD(this->__bout_);
}

std::streambuf::int_type std::strstreambuf::overflow(std::strstreambuf *this, std::streambuf::int_type __c)
{
  unsigned __int8 v2;
  std::streambuf::char_type *nout;
  std::streambuf::char_type *binp;
  unint64_t alsize;
  void *(__cdecl *palloc)(size_t);
  uint64_t v9;
  uint64_t v10;
  std::streambuf::char_type *v11;
  std::streambuf::char_type *v12;
  std::streambuf::char_type *v13;
  int64_t v14;
  void (*pfree)(void);

  if (__c == -1)
    return 0;
  v2 = __c;
  nout = this->__nout_;
  if (nout != this->__eout_)
  {
LABEL_3:
    *nout = v2;
    ++this->__nout_;
    return v2;
  }
  if ((this->__strmode_ & 0xC) == 4)
  {
    if (!nout)
      nout = this->__einp_;
    binp = this->__binp_;
    alsize = 2 * (nout - binp);
    palloc = this->__palloc_;
    if (this->__alsize_ > alsize)
      alsize = this->__alsize_;
    if (alsize)
      v9 = alsize;
    else
      v9 = 4096;
    if (palloc)
    {
      v10 = ((uint64_t (*)(uint64_t))palloc)(v9);
      if (!v10)
        return -1;
    }
    else
    {
      v10 = operator new[]();
    }
    if (nout != binp)
      memcpy((void *)v10, this->__binp_, nout - binp);
    v11 = this->__binp_;
    v12 = (std::streambuf::char_type *)(this->__ninp_ - v11);
    v13 = (std::streambuf::char_type *)(this->__einp_ - v11);
    v14 = this->__nout_ - this->__bout_;
    if ((this->__strmode_ & 1) != 0)
    {
      pfree = (void (*)(void))this->__pfree_;
      if (pfree)
      {
        pfree();
      }
      else if (v11)
      {
        MEMORY[0x194021E14](v11, 0x1000C8077774924);
      }
    }
    this->__binp_ = (std::streambuf::char_type *)v10;
    this->__ninp_ = &v12[v10];
    this->__einp_ = &v13[v10];
    this->__bout_ = &v13[v10];
    nout = &v13[v10 + v14];
    this->__nout_ = nout;
    this->__eout_ = (std::streambuf::char_type *)(v10 + v9);
    this->__strmode_ |= 1u;
    goto LABEL_3;
  }
  return -1;
}

std::streambuf::int_type std::strstreambuf::pbackfail(std::strstreambuf *this, std::streambuf::int_type __c)
{
  std::streambuf::char_type *ninp;
  std::streambuf::char_type *v3;

  ninp = this->__ninp_;
  if (this->__binp_ == ninp)
    return -1;
  if (__c == -1)
  {
    __c = 0;
    v3 = ninp - 1;
LABEL_7:
    this->__ninp_ = v3;
    return __c;
  }
  v3 = ninp - 1;
  if ((this->__strmode_ & 2) != 0)
  {
    if (*v3 == (char)__c)
      goto LABEL_7;
    return -1;
  }
  this->__ninp_ = v3;
  *v3 = __c;
  return __c;
}

std::streambuf::int_type std::strstreambuf::underflow(std::strstreambuf *this)
{
  std::streambuf::char_type *ninp;
  std::streambuf::char_type *nout;

  ninp = this->__ninp_;
  if (ninp != this->__einp_)
    return *ninp;
  nout = this->__nout_;
  if (ninp < nout)
  {
    this->__einp_ = nout;
    return *ninp;
  }
  return -1;
}

std::streambuf::pos_type *__cdecl std::strstreambuf::seekoff(std::streambuf::pos_type *__return_ptr retstr, std::streambuf::pos_type *this, std::streambuf::off_type a3, std::ios_base::seekdir __way, std::ios_base::openmode __which)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::streamoff v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;

  if (__way == end)
  {
LABEL_4:
    if ((__which & 0x18) == 0)
      goto LABEL_22;
    goto LABEL_7;
  }
  if (__way != cur)
  {
    if (__way)
      goto LABEL_7;
    goto LABEL_4;
  }
  if ((__which & 8) >> 3 == (__which & 0x10) >> 4)
  {
LABEL_22:
    v9 = -1;
    goto LABEL_23;
  }
LABEL_7:
  if ((__which & 8) != 0 && !*(&this->__st_._mbstateL + 3) || (__which & 0x10) != 0 && !*(&this->__st_._mbstateL + 6))
    goto LABEL_22;
  v5 = *(&this->__st_._mbstateL + 7);
  if (!v5)
  {
    v5 = *(&this->__st_._mbstateL + 4);
    if (__way)
      goto LABEL_13;
LABEL_19:
    v8 = __way;
    goto LABEL_20;
  }
  if (__way == beg)
    goto LABEL_19;
LABEL_13:
  v6 = v5;
  if (__way != end)
  {
    v7 = 24;
    if ((__which & 8) == 0)
      v7 = 48;
    v6 = *(_QWORD *)&this->__st_.__mbstate8[v7];
  }
  v8 = v6 - *(&this->__st_._mbstateL + 2);
LABEL_20:
  v9 = v8 + a3;
  if (v9 < 0)
    goto LABEL_22;
  v10 = *(&this->__st_._mbstateL + 2);
  if (v9 > v5 - v10)
    goto LABEL_22;
  v11 = v10 + v9;
  if ((__which & 8) != 0)
  {
    v12 = *(&this->__st_._mbstateL + 4);
    if (v11 >= v12)
      v12 = v10 + v9;
    *(&this->__st_._mbstateL + 3) = v11;
    *(&this->__st_._mbstateL + 4) = v12;
  }
  if ((__which & 0x10) != 0)
  {
    v13 = *(&this->__st_._mbstateL + 5);
    if (v11 < v13)
      v13 = v10 + v9;
    *(&this->__st_._mbstateL + 5) = v13;
    *(&this->__st_._mbstateL + 6) = v11;
  }
LABEL_23:
  *((_OWORD *)&retstr->__st_._mbstateL + 6) = 0u;
  *((_OWORD *)&retstr->__st_._mbstateL + 7) = 0u;
  *((_OWORD *)&retstr->__st_._mbstateL + 4) = 0u;
  *((_OWORD *)&retstr->__st_._mbstateL + 5) = 0u;
  *((_OWORD *)&retstr->__st_._mbstateL + 2) = 0u;
  *((_OWORD *)&retstr->__st_._mbstateL + 3) = 0u;
  *(_OWORD *)retstr->__st_.__mbstate8 = 0u;
  *((_OWORD *)&retstr->__st_._mbstateL + 1) = 0u;
  retstr->__off_ = v9;
  return this;
}

std::streambuf::pos_type *__cdecl std::strstreambuf::seekpos(std::streambuf::pos_type *__return_ptr retstr, std::streambuf::pos_type *this, std::streambuf::pos_type *__sp, std::ios_base::openmode __which)
{
  std::streamoff off;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  if ((__which & 0x18) == 0
    || (__which & 8) != 0 && !*(&this->__st_._mbstateL + 3)
    || (__which & 0x10) != 0 && !*(&this->__st_._mbstateL + 6))
  {
    goto LABEL_11;
  }
  off = __sp->__off_;
  v5 = *(&this->__st_._mbstateL + 7);
  if (v5)
  {
    if (off < 0)
      goto LABEL_11;
  }
  else
  {
    v5 = *(&this->__st_._mbstateL + 4);
    if (off < 0)
    {
LABEL_11:
      off = -1;
      goto LABEL_12;
    }
  }
  v6 = *(&this->__st_._mbstateL + 2);
  if (off > v5 - v6)
    goto LABEL_11;
  v7 = v6 + off;
  if ((__which & 8) != 0)
  {
    v8 = *(&this->__st_._mbstateL + 4);
    if (v7 >= v8)
      v8 = v7;
    *(&this->__st_._mbstateL + 3) = v7;
    *(&this->__st_._mbstateL + 4) = v8;
  }
  if ((__which & 0x10) != 0)
  {
    v9 = *(&this->__st_._mbstateL + 5);
    if (v7 < v9)
      v9 = v7;
    *(&this->__st_._mbstateL + 5) = v9;
    *(&this->__st_._mbstateL + 6) = v7;
  }
LABEL_12:
  *((_OWORD *)&retstr->__st_._mbstateL + 6) = 0u;
  *((_OWORD *)&retstr->__st_._mbstateL + 7) = 0u;
  *((_OWORD *)&retstr->__st_._mbstateL + 4) = 0u;
  *((_OWORD *)&retstr->__st_._mbstateL + 5) = 0u;
  *((_OWORD *)&retstr->__st_._mbstateL + 2) = 0u;
  *((_OWORD *)&retstr->__st_._mbstateL + 3) = 0u;
  *(_OWORD *)retstr->__st_.__mbstate8 = 0u;
  *((_OWORD *)&retstr->__st_._mbstateL + 1) = 0u;
  retstr->__off_ = off;
  return this;
}

void std::istrstream::~istrstream(std::istrstream *this)
{
  uint64_t v1;
  uint64_t v2;
  std::istrstream_vtbl *v4;

  v2 = v1;
  v4 = *(std::istrstream_vtbl **)v1;
  this->__vftable = *(std::istrstream_vtbl **)v1;
  *(std::istrstream_vtbl **)((char *)&this->__vftable + (unint64_t)v4[-2].~istrstream_0) = *(std::istrstream_vtbl **)(v1 + 24);
  std::strstreambuf::~strstreambuf(&this->__sb_);
  std::istream::~istream(this, v2 + 8);
}

{
  std::strstreambuf::~strstreambuf(&this->__sb_);
  std::istream::~istream(this, off_1E2E5C3F0);
  std::ios::~ios((std::ios_base *)&this[1]);
}

{
  std::istrstream::~istrstream(this);
  JUMPOUT(0x194021E38);
}

void `virtual thunk to'std::istrstream::~istrstream(std::istrstream *this)
{
  std::istrstream::~istrstream((std::istrstream *)((char *)this + (unint64_t)this->__vftable[-2].~istrstream_0));
}

{
  std::istrstream::~istrstream((std::istrstream *)((char *)this + (unint64_t)this->__vftable[-2].~istrstream_0));
  JUMPOUT(0x194021E38);
}

void std::ostrstream::~ostrstream(std::ostrstream *this)
{
  uint64_t v1;
  uint64_t v2;
  std::ostrstream_vtbl *v4;

  v2 = v1;
  v4 = *(std::ostrstream_vtbl **)v1;
  this->__vftable = *(std::ostrstream_vtbl **)v1;
  *(std::ostrstream_vtbl **)((char *)&this->__vftable + (unint64_t)v4[-2].~ostrstream_0) = *(std::ostrstream_vtbl **)(v1 + 24);
  std::strstreambuf::~strstreambuf(&this->__sb_);
  std::ostream::~ostream(this, v2 + 8);
}

{
  std::strstreambuf::~strstreambuf(&this->__sb_);
  std::ostream::~ostream(this, off_1E2E5C460);
  std::ios::~ios((std::ios_base *)&this[1]);
}

{
  std::ostrstream::~ostrstream(this);
  JUMPOUT(0x194021E38);
}

void `virtual thunk to'std::ostrstream::~ostrstream(std::ostrstream *this)
{
  std::ostrstream::~ostrstream((std::ostrstream *)((char *)this + (unint64_t)this->__vftable[-2].~ostrstream_0));
}

{
  std::ostrstream::~ostrstream((std::ostrstream *)((char *)this + (unint64_t)this->__vftable[-2].~ostrstream_0));
  JUMPOUT(0x194021E38);
}

void std::strstream::~strstream(std::strstream *this)
{
  uint64_t v1;
  uint64_t v2;
  std::strstreambuf_vtbl *v4;

  v2 = v1;
  v4 = *(std::strstreambuf_vtbl **)v1;
  this->__sb_.__vftable = *(std::strstreambuf_vtbl **)v1;
  *(std::strstreambuf_vtbl **)((char *)&this->__sb_.__vftable + (unint64_t)v4[-1].pbackfail) = *(std::strstreambuf_vtbl **)(v1 + 64);
  this->__sb_.__binp_ = *(std::streambuf::char_type **)(v1 + 72);
  std::strstreambuf::~strstreambuf((std::strstreambuf *)&this->__sb_.__ninp_);
  std::iostream::~basic_iostream(this, v2 + 8);
}

{
  std::ios_base *p_ninp;

  p_ninp = (std::ios_base *)&this[1].__sb_.__ninp_;
  std::strstreambuf::~strstreambuf((std::strstreambuf *)&this->__sb_.__ninp_);
  std::iostream::~basic_iostream(this, off_1E2E5C4F8);
  std::ios::~ios(p_ninp);
}

{
  std::strstream::~strstream(this);
  JUMPOUT(0x194021E38);
}

void `non-virtual thunk to'std::strstream::~strstream(std::strstream *this)
{
  std::strstream::~strstream((std::strstream *)((char *)this - 16));
}

{
  std::strstream::~strstream((std::strstream *)((char *)this - 16));
  JUMPOUT(0x194021E38);
}

void `virtual thunk to'std::strstream::~strstream(std::strstream *this)
{
  std::strstream::~strstream((std::strstream *)((char *)this + (unint64_t)this->__sb_.__vftable[-1].pbackfail));
}

{
  std::strstream::~strstream((std::strstream *)((char *)this + (unint64_t)this->__sb_.__vftable[-1].pbackfail));
  JUMPOUT(0x194021E38);
}

std::error_code std::__fs::filesystem::directory_entry::__do_refresh(std::__fs::filesystem::directory_entry *this)
{
  std::__fs::filesystem::directory_entry::__cached_data *p_data;
  uint64_t v3;
  uint64_t v4;
  __darwin_time_t tv_sec;
  __darwin_time_t v6;
  unint64_t v7;
  unint64_t v8;
  const std::error_category *v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  stat v14;
  uint64_t v15;
  const std::error_category *v16;
  std::error_code result;

  this->__data_.__size_ = -1;
  p_data = &this->__data_;
  *(_WORD *)&this->__data_.__type_ = 0;
  *(_QWORD *)&this->__data_.__sym_perms_ = 0xFFFF0000FFFFLL;
  this->__data_.__write_time_.__d_.__rep_ = 0uLL;
  this->__data_.__nlink_ = -1;
  LODWORD(v15) = 0;
  v16 = std::system_category();
  std::__fs::filesystem::detail::posix_lstat((const char **)&this->__p_.__pn_.__r_.__value_.__l.__data_, (stat *)&v14.st_rdev, (stat *)&v15, (uint64_t)&v14.st_uid);
  LOBYTE(v3) = v14.st_uid;
  v4 = HIDWORD(*(_QWORD *)&v14.st_uid);
  if (LOBYTE(v14.st_uid) != 3)
  {
    if (!LOBYTE(v14.st_uid))
    {
      *(_WORD *)&this->__data_.__type_ = 0;
      *(_QWORD *)&this->__data_.__sym_perms_ = 0xFFFF0000FFFFLL;
      p_data->__size_ = -1;
      p_data->__nlink_ = -1;
      *(_QWORD *)&this->__data_.__write_time_.__d_.__rep_ = 0;
      *((_QWORD *)&this->__data_.__write_time_.__d_.__rep_ + 1) = 0x8000000000000000;
LABEL_17:
      v10 = v15;
      v9 = v16;
      v11 = v15 & 0xFFFFFFFF00000000;
      goto LABEL_18;
    }
    this->__data_.__cache_type_ = _RefreshNonSymlink;
    this->__data_.__type_ = v3;
    this->__data_.__non_sym_perms_ = v4;
LABEL_7:
    if (v3 == 1)
      p_data->__size_ = *(_QWORD *)&v14.st_gen;
    if ((_BYTE)v3 && v3 != 255)
    {
      this->__data_.__nlink_ = *((unsigned __int16 *)&v14.st_rdev + 3);
      std::system_category();
      std::system_category();
      tv_sec = v14.st_birthtimespec.tv_sec;
      if (v14.st_ctimespec.tv_nsec < 0 && v14.st_birthtimespec.tv_sec)
      {
        v7 = (v14.st_birthtimespec.tv_sec + __PAIR128__(-1, -1000000000)) >> 64;
        v6 = v14.st_birthtimespec.tv_sec - 1000000000;
        v8 = (unsigned __int128)((v14.st_ctimespec.tv_nsec + 1) * (__int128)1000000000) >> 64;
        tv_sec = 1000000000 * (v14.st_ctimespec.tv_nsec + 1);
      }
      else
      {
        v8 = v14.st_birthtimespec.tv_sec >> 63;
        v7 = (unsigned __int128)(v14.st_ctimespec.tv_nsec * (__int128)1000000000) >> 64;
        v6 = 1000000000 * v14.st_ctimespec.tv_nsec;
      }
      this->__data_.__write_time_.__d_.__rep_ = __PAIR128__(v7, v6) + __PAIR128__(v8, tv_sec);
    }
    goto LABEL_17;
  }
  this->__data_.__sym_perms_ = v14.st_gid;
  v14.st_dev = 0;
  v14.st_ino = (__darwin_ino64_t)std::system_category();
  std::__fs::filesystem::detail::posix_stat((const char **)&this->__p_.__pn_.__r_.__value_.__l.__data_, (stat *)&v14.st_rdev, &v14, (uint64_t)&v13);
  v3 = v13;
  *(_QWORD *)&v14.st_uid = v13;
  this->__data_.__type_ = v13;
  this->__data_.__non_sym_perms_ = HIDWORD(v3);
  if ((_BYTE)v3)
  {
    this->__data_.__cache_type_ = _RefreshSymlink;
    goto LABEL_7;
  }
  this->__data_.__cache_type_ = _RefreshSymlinkUnresolved;
  v9 = std::system_category();
  v10 = 0;
  v11 = 0;
LABEL_18:
  v12 = v11 | v10;
  result.__cat_ = v9;
  result.__val_ = v12;
  return result;
}

void std::__fs::filesystem::detail::posix_lstat(const char **this@<X0>, stat *a2@<X1>, stat *a3@<X2>, uint64_t a4@<X8>)
{
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t st_mode;
  uint64_t v17;
  char v18;
  int v19;
  __n128 v20;
  _QWORD v21[4];

  v20.n128_u32[0] = 0;
  v20.n128_u64[1] = (unint64_t)std::system_category();
  if (*((char *)this + 23) >= 0)
    v9 = (const char *)this;
  else
    v9 = *this;
  LODWORD(v15) = 0;
  if (lstat(v9, a2) == -1)
  {
    v15 = *__error();
    v20.n128_u64[0] = v15;
    v20.n128_u64[1] = (unint64_t)std::generic_category();
  }
  if (a3)
    *(__n128 *)&a3->st_dev = v20;
  if ((_DWORD)v15)
  {
    if ((_DWORD)v15 == 20 || (_DWORD)v15 == 2)
    {
      *(_BYTE *)a4 = -1;
    }
    else
    {
      v21[0] = "posix_stat";
      v21[1] = a3;
      v21[2] = this;
      v21[3] = 0;
      if (a3)
      {
        a3->st_dev = 0;
        a3->st_ino = (__darwin_ino64_t)std::system_category();
      }
      std::__fs::filesystem::detail::ErrorHandler<void>::report((uint64_t)v21, &v20, (std::__fs::filesystem::detail *)"failed to determine attributes for the specified path", v10, v11, v12, v13, v14, v20.n128_i8[0]);
      *(_BYTE *)a4 = 0;
    }
    v19 = 0xFFFF;
  }
  else
  {
    st_mode = a2->st_mode;
    v17 = (st_mode >> 12) ^ 8;
    if ((_DWORD)v17 == 15)
      v18 = 8;
    else
      v18 = byte_19202732A[v17];
    *(_BYTE *)a4 = v18;
    v19 = st_mode & 0xFFF;
  }
  *(_DWORD *)(a4 + 4) = v19;
}

void std::__fs::filesystem::detail::posix_stat(const char **this@<X0>, stat *a2@<X1>, stat *a3@<X2>, uint64_t a4@<X8>)
{
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t st_mode;
  uint64_t v17;
  char v18;
  int v19;
  __n128 v20;
  _QWORD v21[4];

  v20.n128_u32[0] = 0;
  v20.n128_u64[1] = (unint64_t)std::system_category();
  if (*((char *)this + 23) >= 0)
    v9 = (const char *)this;
  else
    v9 = *this;
  LODWORD(v15) = 0;
  if (stat(v9, a2) == -1)
  {
    v15 = *__error();
    v20.n128_u64[0] = v15;
    v20.n128_u64[1] = (unint64_t)std::generic_category();
  }
  if (a3)
    *(__n128 *)&a3->st_dev = v20;
  if ((_DWORD)v15)
  {
    if ((_DWORD)v15 == 20 || (_DWORD)v15 == 2)
    {
      *(_BYTE *)a4 = -1;
    }
    else
    {
      v21[0] = "posix_stat";
      v21[1] = a3;
      v21[2] = this;
      v21[3] = 0;
      if (a3)
      {
        a3->st_dev = 0;
        a3->st_ino = (__darwin_ino64_t)std::system_category();
      }
      std::__fs::filesystem::detail::ErrorHandler<void>::report((uint64_t)v21, &v20, (std::__fs::filesystem::detail *)"failed to determine attributes for the specified path", v10, v11, v12, v13, v14, v20.n128_i8[0]);
      *(_BYTE *)a4 = 0;
    }
    v19 = 0xFFFF;
  }
  else
  {
    st_mode = a2->st_mode;
    v17 = (st_mode >> 12) ^ 8;
    if ((_DWORD)v17 == 15)
      v18 = 8;
    else
      v18 = byte_19202732A[v17];
    *(_BYTE *)a4 = v18;
    v19 = st_mode & 0xFFF;
  }
  *(_DWORD *)(a4 + 4) = v19;
}

double std::__fs::filesystem::detail::ErrorHandler<void>::report(uint64_t a1, __n128 *a2, std::__fs::filesystem::detail *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  double result;

  *(_QWORD *)&result = std::__fs::filesystem::detail::ErrorHandler<void>::report_impl(a1, a2, a3, &a9).n128_u64[0];
  return result;
}

void sub_192000CD8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_rethrow();
}

void sub_192000CE4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

__n128 std::__fs::filesystem::detail::ErrorHandler<void>::report_impl(uint64_t a1, __n128 *a2, std::__fs::filesystem::detail *a3, va_list a4)
{
  __n128 *v4;
  __n128 result;
  std::string *p_p;
  std::string::size_type size;
  std::string *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  std::string __p;
  std::string v18;
  std::string v19;
  std::string v20;
  __int128 v21;
  std::string::size_type v22;

  v4 = *(__n128 **)(a1 + 8);
  if (!v4)
  {
    std::string::basic_string[abi:ne180100]<0>(&v18, "in ");
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(*(char **)a1, &v18, &v19);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(": ", &v19, &v20);
    std::__fs::filesystem::detail::vformat_string(a3, a4, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v10 = std::string::append(&v20, (const std::string::value_type *)p_p, size);
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v22 = v10->__r_.__value_.__r.__words[2];
    v21 = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_QWORD *)(a1 + 24);
    v14 = v12 != 0;
    if (v13)
      ++v14;
    if (v14)
    {
      if (v14 == 1)
        std::__fs::filesystem::__throw_filesystem_error[abi:ne180100]<std::string &,std::__fs::filesystem::path const&,std::error_code const&>((uint64_t)&v21, v12, a2);
      std::__fs::filesystem::__throw_filesystem_error[abi:ne180100]<std::string &,std::__fs::filesystem::path const&,std::__fs::filesystem::path const&,std::error_code const&>((uint64_t)&v21, v12, v13, a2);
    }
    std::__fs::filesystem::__throw_filesystem_error[abi:ne180100]<std::string &,std::error_code const&>((uint64_t)&v21, a2);
  }
  result = *a2;
  *v4 = *a2;
  return result;
}

void sub_192000E4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  if (*(char *)(v30 - 25) < 0)
    operator delete(*(void **)(v30 - 48));
  _Unwind_Resume(exception_object);
}

__n128 std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<Q0>(char *__s@<X1>, std::string *a2@<X0>, std::string *a3@<X8>)
{
  size_t v6;
  __n128 *v7;
  __n128 result;

  v6 = strlen(__s);
  v7 = (__n128 *)std::string::append(a2, __s, v6);
  result = *v7;
  *a3 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

void std::__fs::filesystem::__throw_filesystem_error[abi:ne180100]<std::string &,std::error_code const&>(uint64_t a1, _QWORD *a2)
{
  void *exception;

  exception = __cxa_allocate_exception(0x30uLL);
  std::__fs::filesystem::filesystem_error::filesystem_error[abi:ne180100](exception, a1, *a2, a2[1]);
}

void sub_192000F68(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__fs::filesystem::__throw_filesystem_error[abi:ne180100]<std::string &,std::__fs::filesystem::path const&,std::error_code const&>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  void *exception;

  exception = __cxa_allocate_exception(0x30uLL);
  std::__fs::filesystem::filesystem_error::filesystem_error[abi:ne180100](exception, a1, a2, *a3, a3[1]);
}

void sub_192000FCC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__fs::filesystem::__throw_filesystem_error[abi:ne180100]<std::string &,std::__fs::filesystem::path const&,std::__fs::filesystem::path const&,std::error_code const&>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  void *exception;

  exception = __cxa_allocate_exception(0x30uLL);
  std::__fs::filesystem::filesystem_error::filesystem_error[abi:ne180100](exception, a1, a2, a3, *a4, a4[1]);
}

void sub_19200103C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::__fs::filesystem::filesystem_error *std::__fs::filesystem::filesystem_error::filesystem_error[abi:ne180100](std::__fs::filesystem::filesystem_error *a1, std::string *__what_arg, std::error_code __ec)
{
  std::system_error *v4;
  __int128 __p;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  v4 = std::system_error::system_error(a1, __ec, __what_arg);
  v8 = 0uLL;
  v9 = 0;
  __p = 0uLL;
  v7 = 0;
  std::allocate_shared[abi:ne180100]<std::__fs::filesystem::filesystem_error::_Storage,std::allocator<std::__fs::filesystem::filesystem_error::_Storage>,std::__fs::filesystem::path,std::__fs::filesystem::path,void>(&v8, &__p, &v4[1].__vftable);
  if (SHIBYTE(v7) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v9) < 0)
    operator delete((void *)v8);
  std::__fs::filesystem::filesystem_error::__create_what(a1, 0);
  return a1;
}

void sub_1920010FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::system_error *v21;
  uint64_t v22;

  std::shared_ptr<std::__fs::filesystem::filesystem_error::_Storage>::~shared_ptr[abi:ne180100](v22);
  std::system_error::~system_error(v21);
  _Unwind_Resume(a1);
}

std::string *std::allocate_shared[abi:ne180100]<std::__fs::filesystem::filesystem_error::_Storage,std::allocator<std::__fs::filesystem::filesystem_error::_Storage>,std::__fs::filesystem::path,std::__fs::filesystem::path,void>@<X0>(__int128 *a1@<X1>, __int128 *a2@<X2>, _QWORD *a3@<X8>)
{
  std::string *v6;
  std::string *result;

  v6 = (std::string *)operator new(0x60uLL);
  result = std::__shared_ptr_emplace<std::__fs::filesystem::filesystem_error::_Storage>::__shared_ptr_emplace[abi:ne180100]<std::__fs::filesystem::path,std::__fs::filesystem::path,std::allocator<std::__fs::filesystem::filesystem_error::_Storage>,0>(v6, a1, a2);
  *a3 = v6 + 1;
  a3[1] = v6;
  return result;
}

void sub_19200118C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<std::__fs::filesystem::filesystem_error::_Storage>::__shared_ptr_emplace[abi:ne180100]<std::__fs::filesystem::path,std::__fs::filesystem::path,std::allocator<std::__fs::filesystem::filesystem_error::_Storage>,0>(std::string *a1, __int128 *a2, __int128 *a3)
{
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E2E5C768;
  std::__fs::filesystem::filesystem_error::_Storage::_Storage[abi:ne180100](a1 + 1, a2, a3);
  return a1;
}

void sub_1920011D4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::__fs::filesystem::filesystem_error::_Storage>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2E5C768;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::__fs::filesystem::filesystem_error::_Storage>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2E5C768;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x194021E38);
}

void std::__shared_ptr_emplace<std::__fs::filesystem::filesystem_error::_Storage>::__on_zero_shared(uint64_t a1)
{
  std::__destroy_at[abi:ne180100]<std::__fs::filesystem::filesystem_error::_Storage,0>(a1 + 24);
}

std::string *std::__fs::filesystem::filesystem_error::_Storage::_Storage[abi:ne180100](std::string *this, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  std::string *v6;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  v6 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v7 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  this[2].__r_.__value_.__r.__words[0] = 0;
  this[2].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__r.__words[2] = 0;
  return this;
}

void sub_1920012B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::__destroy_at[abi:ne180100]<std::__fs::filesystem::filesystem_error::_Storage,0>(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

std::__fs::filesystem::filesystem_error *std::__fs::filesystem::filesystem_error::filesystem_error[abi:ne180100](std::__fs::filesystem::filesystem_error *a1, std::string *__what_arg, __int128 *a3, std::error_code __ec)
{
  std::system_error *v6;
  __int128 __p;
  uint64_t v9;

  v6 = std::system_error::system_error(a1, __ec, __what_arg);
  __p = 0uLL;
  v9 = 0;
  std::allocate_shared[abi:ne180100]<std::__fs::filesystem::filesystem_error::_Storage,std::allocator<std::__fs::filesystem::filesystem_error::_Storage>,std::__fs::filesystem::path const&,std::__fs::filesystem::path,void>(a3, &__p, &v6[1].__vftable);
  if (SHIBYTE(v9) < 0)
    operator delete((void *)__p);
  std::__fs::filesystem::filesystem_error::__create_what(a1, 1);
  return a1;
}

void sub_1920013BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::system_error *v14;
  uint64_t v15;

  std::shared_ptr<std::__fs::filesystem::filesystem_error::_Storage>::~shared_ptr[abi:ne180100](v15);
  std::system_error::~system_error(v14);
  _Unwind_Resume(a1);
}

std::string *std::allocate_shared[abi:ne180100]<std::__fs::filesystem::filesystem_error::_Storage,std::allocator<std::__fs::filesystem::filesystem_error::_Storage>,std::__fs::filesystem::path const&,std::__fs::filesystem::path,void>@<X0>(__int128 *a1@<X1>, __int128 *a2@<X2>, _QWORD *a3@<X8>)
{
  std::string *v6;
  std::string *result;

  v6 = (std::string *)operator new(0x60uLL);
  result = std::__shared_ptr_emplace<std::__fs::filesystem::filesystem_error::_Storage>::__shared_ptr_emplace[abi:ne180100]<std::__fs::filesystem::path const&,std::__fs::filesystem::path,std::allocator<std::__fs::filesystem::filesystem_error::_Storage>,0>(v6, a1, a2);
  *a3 = v6 + 1;
  a3[1] = v6;
  return result;
}

void sub_19200143C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<std::__fs::filesystem::filesystem_error::_Storage>::__shared_ptr_emplace[abi:ne180100]<std::__fs::filesystem::path const&,std::__fs::filesystem::path,std::allocator<std::__fs::filesystem::filesystem_error::_Storage>,0>(std::string *a1, __int128 *a2, __int128 *a3)
{
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E2E5C768;
  std::__fs::filesystem::filesystem_error::_Storage::_Storage[abi:ne180100](a1 + 1, a2, a3);
  return a1;
}

void sub_192001484(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

std::__fs::filesystem::filesystem_error *std::__fs::filesystem::filesystem_error::filesystem_error[abi:ne180100](std::__fs::filesystem::filesystem_error *a1, std::string *__what_arg, __int128 *a3, __int128 *a4, std::error_code __ec)
{
  std::system_error *v8;

  v8 = std::system_error::system_error(a1, __ec, __what_arg);
  std::allocate_shared[abi:ne180100]<std::__fs::filesystem::filesystem_error::_Storage,std::allocator<std::__fs::filesystem::filesystem_error::_Storage>,std::__fs::filesystem::path const&,std::__fs::filesystem::path const&,void>(a3, a4, &v8[1].__vftable);
  std::__fs::filesystem::filesystem_error::__create_what(a1, 2);
  return a1;
}

void sub_192001518(_Unwind_Exception *a1)
{
  std::system_error *v1;
  uint64_t v2;

  std::shared_ptr<std::__fs::filesystem::filesystem_error::_Storage>::~shared_ptr[abi:ne180100](v2);
  std::system_error::~system_error(v1);
  _Unwind_Resume(a1);
}

std::string *std::allocate_shared[abi:ne180100]<std::__fs::filesystem::filesystem_error::_Storage,std::allocator<std::__fs::filesystem::filesystem_error::_Storage>,std::__fs::filesystem::path const&,std::__fs::filesystem::path const&,void>@<X0>(__int128 *a1@<X1>, __int128 *a2@<X2>, _QWORD *a3@<X8>)
{
  std::string *v6;
  std::string *result;

  v6 = (std::string *)operator new(0x60uLL);
  result = std::__shared_ptr_emplace<std::__fs::filesystem::filesystem_error::_Storage>::__shared_ptr_emplace[abi:ne180100]<std::__fs::filesystem::path const&,std::__fs::filesystem::path const&,std::allocator<std::__fs::filesystem::filesystem_error::_Storage>,0>(v6, a1, a2);
  *a3 = v6 + 1;
  a3[1] = v6;
  return result;
}

void sub_192001588(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<std::__fs::filesystem::filesystem_error::_Storage>::__shared_ptr_emplace[abi:ne180100]<std::__fs::filesystem::path const&,std::__fs::filesystem::path const&,std::allocator<std::__fs::filesystem::filesystem_error::_Storage>,0>(std::string *a1, __int128 *a2, __int128 *a3)
{
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E2E5C768;
  std::__fs::filesystem::filesystem_error::_Storage::_Storage[abi:ne180100](a1 + 1, a2, a3);
  return a1;
}

void sub_1920015D0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

std::__fs::filesystem::directory_iterator *__cdecl std::__fs::filesystem::directory_iterator::directory_iterator(std::__fs::filesystem::directory_iterator *this, const std::__fs::filesystem::path *a2, std::error_code *a3, std::__fs::filesystem::directory_options a4)
{
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v11;
  std::error_code v12;
  _QWORD v13[4];
  std::__fs::filesystem::directory_options v14;

  v14 = a4;
  this->__imp_.__ptr_ = 0;
  this->__imp_.__cntrl_ = 0;
  v13[0] = "directory_iterator::directory_iterator(...)";
  v13[1] = a3;
  v13[2] = a2;
  v13[3] = 0;
  if (a3)
  {
    a3->__val_ = 0;
    a3->__cat_ = std::system_category();
  }
  v12.__val_ = 0;
  v12.__cat_ = std::system_category();
  std::allocate_shared[abi:ne180100]<std::__fs::filesystem::__dir_stream,std::allocator<std::__fs::filesystem::__dir_stream>,std::__fs::filesystem::path const&,std::__fs::filesystem::directory_options &,std::error_code &,void>(a2, &v14, &v12, &v11);
  std::shared_ptr<std::__fs::filesystem::__dir_stream>::operator=[abi:ne180100]((uint64_t)this, &v11);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (a3)
    *a3 = v12;
  if (!*(_QWORD *)this->__imp_.__ptr_)
  {
    std::shared_ptr<std::__fs::filesystem::__dir_stream>::reset[abi:ne180100](this);
    if (v12.__val_)
      std::__fs::filesystem::detail::ErrorHandler<void>::report((uint64_t)v13, (__n128 *)&v12);
  }
  return this;
}

void sub_1920016E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<std::__fs::filesystem::__dir_stream>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::shared_ptr<std::__fs::filesystem::__dir_stream>::operator=[abi:ne180100](uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

void std::shared_ptr<std::__fs::filesystem::__dir_stream>::reset[abi:ne180100](_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)a1[1];
  *a1 = 0;
  a1[1] = 0;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

__n128 std::__fs::filesystem::detail::ErrorHandler<void>::report(uint64_t a1, __n128 *a2)
{
  __n128 *v2;
  __n128 result;
  uint64_t v5;
  uint64_t v6;
  int v7;
  std::string __p;
  std::string v10;

  v2 = *(__n128 **)(a1 + 8);
  if (!v2)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "in ");
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(*(char **)a1, &__p, &v10);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v5 = *(_QWORD *)(a1 + 16);
    v6 = *(_QWORD *)(a1 + 24);
    v7 = v5 != 0;
    if (v6)
      ++v7;
    if (v7)
    {
      if (v7 == 1)
        std::__fs::filesystem::__throw_filesystem_error[abi:ne180100]<std::string &,std::__fs::filesystem::path const&,std::error_code const&>((uint64_t)&v10, v5, a2);
      std::__fs::filesystem::__throw_filesystem_error[abi:ne180100]<std::string &,std::__fs::filesystem::path const&,std::__fs::filesystem::path const&,std::error_code const&>((uint64_t)&v10, v5, v6, a2);
    }
    std::__fs::filesystem::__throw_filesystem_error[abi:ne180100]<std::string &,std::error_code const&>((uint64_t)&v10, a2);
  }
  result = *a2;
  *v2 = *a2;
  return result;
}

void sub_192001874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::__fs::filesystem::directory_iterator *__cdecl std::__fs::filesystem::directory_iterator::__increment(std::__fs::filesystem::directory_iterator *this, std::error_code *__ec)
{
  std::shared_ptr<std::__fs::filesystem::__dir_stream>::element_type *ptr;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  void *__p[2];
  uint64_t v13;
  std::error_code v14;
  _QWORD v15[4];

  v15[0] = "directory_iterator::operator++()";
  v15[1] = __ec;
  v15[2] = 0;
  v15[3] = 0;
  if (__ec)
  {
    __ec->__val_ = 0;
    __ec->__cat_ = std::system_category();
  }
  v14.__val_ = 0;
  v14.__cat_ = std::system_category();
  if ((std::__fs::filesystem::__dir_stream::advance((DIR **)this->__imp_.__ptr_, &v14) & 1) == 0)
  {
    ptr = this->__imp_.__ptr_;
    v4 = *(_OWORD *)((char *)this->__imp_.__ptr_ + 8);
    v13 = *((_QWORD *)this->__imp_.__ptr_ + 3);
    *(_OWORD *)__p = v4;
    *((_QWORD *)ptr + 1) = 0;
    *((_QWORD *)ptr + 2) = 0;
    *((_QWORD *)ptr + 3) = 0;
    std::shared_ptr<std::__fs::filesystem::__dir_stream>::reset[abi:ne180100](this);
    if (v14.__val_)
    {
      v10 = __p;
      if (v13 < 0)
        LOBYTE(v10) = __p[0];
      std::__fs::filesystem::detail::ErrorHandler<void>::report((uint64_t)v15, (__n128 *)&v14, (std::__fs::filesystem::detail *)"at root \"%s\"", v5, v6, v7, v8, v9, (char)v10);
    }
    if (SHIBYTE(v13) < 0)
      operator delete(__p[0]);
  }
  return this;
}

void sub_192001978(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__fs::filesystem::__dir_stream::advance(DIR **this, std::error_code *a2)
{
  DIR *v4;
  dirent *v5;
  const char *d_name;
  char file;
  size_t v8;
  uint64_t v9;
  DIR *v10;
  uint64_t v11;
  const std::error_category *v12;
  void **v14;
  char v15;
  char v16;
  char v17;
  std::string __p;
  std::__fs::filesystem::path v19;
  _QWORD v20[2];
  char v21;

  v4 = *this;
  *__error() = 0;
  a2->__val_ = 0;
  a2->__cat_ = std::system_category();
  v5 = readdir(v4);
  if (!v5)
  {
LABEL_8:
    if (*__error())
    {
      v11 = *__error();
      v12 = std::generic_category();
      *(_QWORD *)&a2->__val_ = v11;
      a2->__cat_ = v12;
    }
LABEL_10:
    std::__fs::filesystem::__dir_stream::close(this);
    return 0;
  }
  while (1)
  {
    d_name = v5->d_name;
    file = std::__fs::filesystem::detail::get_file_type<dirent,unsigned char>((uint64_t)v5);
    v20[0] = d_name;
    v8 = strlen(d_name);
    v9 = v8;
    v20[1] = v8;
    v21 = file;
    if (v8 != 2)
      break;
    if (memcmp(d_name, "..", 2uLL))
      goto LABEL_12;
LABEL_7:
    v10 = *this;
    *__error() = 0;
    a2->__val_ = 0;
    a2->__cat_ = std::system_category();
    v5 = readdir(v10);
    if (!v5)
      goto LABEL_8;
  }
  if (v8 != 1)
    goto LABEL_13;
  if (*d_name == 46)
    goto LABEL_7;
LABEL_12:
  v9 = 2;
LABEL_13:
  if (a2->__val_ || !v9)
    goto LABEL_10;
  std::__fs::filesystem::path::path[abi:ne180100]<std::string_view,void>(&__p, (uint64_t)v20);
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&__p, (uint64_t)(this + 1), &v19);
  v14 = (void **)(this + 4);
  v15 = v21;
  if (v21 == 3)
    v16 = 1;
  else
    v16 = 2;
  if (v21)
    v17 = v16;
  else
    v17 = 0;
  if (*((char *)this + 55) < 0)
    operator delete(*v14);
  *(_OWORD *)v14 = *(_OWORD *)&v19.__pn_.__r_.__value_.__l.__data_;
  this[6] = (DIR *)v19.__pn_.__r_.__value_.__r.__words[2];
  *((_BYTE *)&v19.__pn_.__r_.__value_.__s + 23) = 0;
  v19.__pn_.__r_.__value_.__s.__data_[0] = 0;
  this[8] = (DIR *)-1;
  this[9] = (DIR *)-1;
  this[10] = 0;
  this[11] = (DIR *)0x8000000000000000;
  this[12] = (DIR *)0xFFFF0000FFFFLL;
  *((_BYTE *)this + 104) = v15;
  *((_BYTE *)this + 105) = v17;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 1;
}

void sub_192001B4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

const std::__fs::filesystem::directory_entry *__cdecl std::__fs::filesystem::directory_iterator::__dereference(const std::__fs::filesystem::directory_iterator *this)
{
  return (const std::__fs::filesystem::directory_entry *)((char *)this->__imp_.__ptr_ + 32);
}

std::__fs::filesystem::recursive_directory_iterator *__cdecl std::__fs::filesystem::recursive_directory_iterator::recursive_directory_iterator(std::__fs::filesystem::recursive_directory_iterator *this, const std::__fs::filesystem::path *__p, std::__fs::filesystem::directory_options __opt, std::error_code *__ec)
{
  char *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::shared_ptr<std::__fs::filesystem::recursive_directory_iterator::__shared_imp>::element_type *ptr;
  __int128 v13;
  std::error_code v14;
  _QWORD v15[4];
  _QWORD v16[16];

  v16[15] = *MEMORY[0x1E0C80C00];
  this->__imp_.__ptr_ = 0;
  this->__imp_.__cntrl_ = 0;
  this->__rec_ = 1;
  v15[0] = "recursive_directory_iterator";
  v15[1] = __ec;
  v15[2] = __p;
  v15[3] = 0;
  if (__ec)
  {
    __ec->__val_ = 0;
    __ec->__cat_ = std::system_category();
  }
  v14.__val_ = 0;
  v14.__cat_ = std::system_category();
  std::__fs::filesystem::__dir_stream::__dir_stream((std::__fs::filesystem::__dir_stream *)v16, __p, __opt, &v14);
  if (!v14.__val_
    || (std::__fs::filesystem::detail::ErrorHandler<void>::report((uint64_t)v15, (__n128 *)&v14), !v14.__val_))
  {
    if (v16[0])
    {
      v7 = (char *)operator new(0x50uLL);
      *((_QWORD *)v7 + 1) = 0;
      *((_QWORD *)v7 + 2) = 0;
      *(_QWORD *)v7 = &off_1E2E5C808;
      *(_OWORD *)(v7 + 40) = 0u;
      *(_OWORD *)(v7 + 56) = 0u;
      *((_QWORD *)v7 + 9) = 0;
      *(_OWORD *)(v7 + 24) = 0u;
      *(_QWORD *)&v13 = v7 + 24;
      *((_QWORD *)&v13 + 1) = v7;
      std::shared_ptr<std::__fs::filesystem::recursive_directory_iterator::__shared_imp>::operator=[abi:ne180100]((uint64_t)this, &v13);
      v8 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
      if (*((_QWORD *)&v13 + 1))
      {
        v9 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      ptr = this->__imp_.__ptr_;
      *((_BYTE *)ptr + 48) = __opt;
      std::deque<std::__fs::filesystem::__dir_stream>::push_back(ptr, (uint64_t)v16);
    }
  }
  std::__fs::filesystem::__dir_stream::~__dir_stream((std::__fs::filesystem::__dir_stream *)v16);
  return this;
}

void sub_192001CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  std::__fs::filesystem::__dir_stream::~__dir_stream((std::__fs::filesystem::__dir_stream *)va);
  std::shared_ptr<std::__fs::filesystem::recursive_directory_iterator::__shared_imp>::~shared_ptr[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

uint64_t std::shared_ptr<std::__fs::filesystem::recursive_directory_iterator::__shared_imp>::operator=[abi:ne180100](uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

void std::__fs::filesystem::recursive_directory_iterator::__pop(std::__fs::filesystem::recursive_directory_iterator *this, std::error_code *__ec)
{
  if (__ec)
  {
    __ec->__val_ = 0;
    __ec->__cat_ = std::system_category();
  }
  std::deque<std::__fs::filesystem::__dir_stream>::pop_back(this->__imp_.__ptr_);
  if (*((_QWORD *)this->__imp_.__ptr_ + 5))
    std::__fs::filesystem::recursive_directory_iterator::__advance(this, __ec);
  else
    std::shared_ptr<std::__fs::filesystem::recursive_directory_iterator::__shared_imp>::reset[abi:ne180100](this);
}

void std::shared_ptr<std::__fs::filesystem::recursive_directory_iterator::__shared_imp>::reset[abi:ne180100](_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)a1[1];
  *a1 = 0;
  a1[1] = 0;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__fs::filesystem::recursive_directory_iterator::__advance(std::__fs::filesystem::recursive_directory_iterator *this, std::error_code *__ec)
{
  std::shared_ptr<std::__fs::filesystem::recursive_directory_iterator::__shared_imp>::element_type *ptr;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  void *__p[2];
  uint64_t v15;
  std::error_code v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[4];

  v19[0] = "recursive_directory_iterator::operator++()";
  v19[1] = __ec;
  v19[2] = 0;
  v19[3] = 0;
  if (__ec)
  {
    __ec->__val_ = 0;
    __ec->__cat_ = std::system_category();
  }
  v17 = 0;
  v18 = 0;
  ptr = this->__imp_.__ptr_;
  v16.__val_ = 0;
  v16.__cat_ = std::system_category();
  while (1)
  {
    v4 = *((_QWORD *)ptr + 5);
    if (!v4)
      break;
    if ((std::__fs::filesystem::__dir_stream::advance((DIR **)(*(_QWORD *)(*((_QWORD *)ptr + 1) + 8 * ((v4 + *((_QWORD *)ptr + 4) - 1) / 0x24uLL))+ 112 * ((v4 + *((_QWORD *)ptr + 4) - 1) % 0x24uLL)), &v16) & 1) != 0)return;
    if (v16.__val_)
    {
      v5 = *((_QWORD *)ptr + 5) - 1;
      goto LABEL_11;
    }
    std::deque<std::__fs::filesystem::__dir_stream>::pop_back(ptr);
  }
  if (!v16.__val_)
  {
    std::shared_ptr<std::__fs::filesystem::recursive_directory_iterator::__shared_imp>::reset[abi:ne180100](this);
    return;
  }
  v5 = -1;
LABEL_11:
  v6 = *(_QWORD *)(*((_QWORD *)ptr + 1) + 8 * ((v5 + *((_QWORD *)ptr + 4)) / 0x24uLL))
     + 112 * ((v5 + *((_QWORD *)ptr + 4)) % 0x24uLL);
  v7 = *(_QWORD *)(v6 + 24);
  *(_OWORD *)__p = *(_OWORD *)(v6 + 8);
  v15 = v7;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 8) = 0;
  std::shared_ptr<std::__fs::filesystem::recursive_directory_iterator::__shared_imp>::reset[abi:ne180100](this);
  v13 = __p;
  if (v15 < 0)
    LOBYTE(v13) = __p[0];
  std::__fs::filesystem::detail::ErrorHandler<void>::report((uint64_t)v19, (__n128 *)&v16, (std::__fs::filesystem::detail *)"at root \"%s\"", v8, v9, v10, v11, v12, (char)v13);
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
}

void sub_192001FAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<std::__fs::filesystem::__dir_stream>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  _Unwind_Resume(a1);
}

std::__fs::filesystem::directory_options std::__fs::filesystem::recursive_directory_iterator::options(const std::__fs::filesystem::recursive_directory_iterator *this)
{
  return *((_BYTE *)this->__imp_.__ptr_ + 48);
}

int std::__fs::filesystem::recursive_directory_iterator::depth(const std::__fs::filesystem::recursive_directory_iterator *this)
{
  return *((_DWORD *)this->__imp_.__ptr_ + 10) - 1;
}

const std::__fs::filesystem::directory_entry *__cdecl std::__fs::filesystem::recursive_directory_iterator::__dereference(const std::__fs::filesystem::recursive_directory_iterator *this)
{
  unint64_t v1;

  v1 = *((_QWORD *)this->__imp_.__ptr_ + 5) + *((_QWORD *)this->__imp_.__ptr_ + 4) - 1;
  return (const std::__fs::filesystem::directory_entry *)(*(_QWORD *)(*((_QWORD *)this->__imp_.__ptr_ + 1)
                                                                    + 8 * (v1 / 0x24))
                                                        + 112 * (v1 % 0x24)
                                                        + 32);
}

std::__fs::filesystem::recursive_directory_iterator *__cdecl std::__fs::filesystem::recursive_directory_iterator::__increment(std::__fs::filesystem::recursive_directory_iterator *this, std::error_code *__ec)
{
  if (__ec)
  {
    __ec->__val_ = 0;
    __ec->__cat_ = std::system_category();
  }
  if (!this->__rec_
    || !std::__fs::filesystem::recursive_directory_iterator::__try_recursion(this, __ec) && (!__ec || !__ec->__val_))
  {
    this->__rec_ = 1;
    std::__fs::filesystem::recursive_directory_iterator::__advance(this, __ec);
  }
  return this;
}

BOOL std::__fs::filesystem::recursive_directory_iterator::__try_recursion(std::__fs::filesystem::recursive_directory_iterator *this, std::error_code *__ec)
{
  char v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  const std::__fs::filesystem::path *v9;
  int v10;
  int v11;
  int val;
  BOOL result;
  const std::error_category *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  std::error_code __eca;
  _QWORD v23[4];
  void *__p[2];
  int64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v23[0] = "recursive_directory_iterator::operator++()";
  v23[1] = __ec;
  v23[2] = 0;
  v23[3] = 0;
  if (__ec)
  {
    __ec->__val_ = 0;
    __ec->__cat_ = std::system_category();
  }
  v4 = *((_BYTE *)this->__imp_.__ptr_ + 48);
  v5 = *((_QWORD *)this->__imp_.__ptr_ + 5) + *((_QWORD *)this->__imp_.__ptr_ + 4) - 1;
  v6 = *(_QWORD *)(*((_QWORD *)this->__imp_.__ptr_ + 1) + 8 * (v5 / 0x24));
  v7 = v5 % 0x24;
  __eca.__val_ = 0;
  __eca.__cat_ = std::system_category();
  v8 = v6 + 112 * v7;
  v9 = (const std::__fs::filesystem::path *)(v8 + 32);
  if ((v4 & 1) != 0)
    v10 = std::__fs::filesystem::directory_entry::__get_ft[abi:ne180100]((std::__fs::filesystem::path *)(v8 + 32), &__eca);
  else
    v10 = std::__fs::filesystem::directory_entry::__get_sym_ft[abi:ne180100]((std::__fs::filesystem::path *)(v8 + 32), &__eca);
  v11 = v10;
  val = __eca.__val_;
  if (__eca.__val_)
  {
    if (!v10)
      goto LABEL_14;
    __eca.__val_ = 0;
    __eca.__cat_ = std::system_category();
    val = __eca.__val_;
    if (__eca.__val_)
      goto LABEL_14;
  }
  if (v11 == 2)
  {
    std::__fs::filesystem::__dir_stream::__dir_stream((std::__fs::filesystem::__dir_stream *)__p, v9, *((std::__fs::filesystem::directory_options *)this->__imp_.__ptr_ + 48), &__eca);
    if (__p[0])
    {
      std::deque<std::__fs::filesystem::__dir_stream>::push_back(this->__imp_.__ptr_, (uint64_t)__p);
      std::__fs::filesystem::__dir_stream::~__dir_stream((std::__fs::filesystem::__dir_stream *)__p);
      return 1;
    }
    std::__fs::filesystem::__dir_stream::~__dir_stream((std::__fs::filesystem::__dir_stream *)__p);
    val = __eca.__val_;
    if (__eca.__val_)
    {
LABEL_14:
      if (val == 13 && (*((_BYTE *)this->__imp_.__ptr_ + 48) & 2) != 0)
      {
        if (__ec)
        {
          __ec->__val_ = 0;
          v14 = std::system_category();
          result = 0;
          __ec->__cat_ = v14;
          return result;
        }
      }
      else
      {
        v15 = *(_OWORD *)&v9->__pn_.__r_.__value_.__l.__data_;
        v25 = v9->__pn_.__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v15;
        v9->__pn_.__r_.__value_.__l.__size_ = 0;
        v9->__pn_.__r_.__value_.__r.__words[2] = 0;
        v9->__pn_.__r_.__value_.__r.__words[0] = 0;
        std::shared_ptr<std::__fs::filesystem::recursive_directory_iterator::__shared_imp>::reset[abi:ne180100](this);
        v21 = __p;
        if (v25 < 0)
          LOBYTE(v21) = __p[0];
        std::__fs::filesystem::detail::ErrorHandler<void>::report((uint64_t)v23, (__n128 *)&__eca, (std::__fs::filesystem::detail *)"attempting recursion into \"%s\"", v16, v17, v18, v19, v20, (char)v21);
        if (SHIBYTE(v25) < 0)
          operator delete(__p[0]);
      }
    }
  }
  return 0;
}

void sub_1920022A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  std::__fs::filesystem::__dir_stream::~__dir_stream((std::__fs::filesystem::__dir_stream *)&__p);
  _Unwind_Resume(a1);
}

uint64_t std::__fs::filesystem::directory_entry::__get_sym_ft[abi:ne180100](std::__fs::filesystem::path *a1, std::error_code *__ec)
{
  int v3;
  const std::error_category *v6;
  std::string::value_type v8;

  v3 = 1 << a1[3].__pn_.__r_.__value_.__s.__data_[1];
  if ((v3 & 0x1A) != 0)
  {
    if (__ec)
    {
      __ec->__val_ = 0;
      __ec->__cat_ = std::system_category();
    }
    return 3;
  }
  else if ((v3 & 0x24) != 0)
  {
    if (__ec)
    {
      if ((a1[3].__pn_.__r_.__value_.__s.__data_[0] + 1) > 1u)
      {
        __ec->__val_ = 0;
        v6 = std::system_category();
      }
      else
      {
        v6 = std::generic_category();
        *(_QWORD *)&__ec->__val_ = 2;
      }
      __ec->__cat_ = v6;
    }
    return a1[3].__pn_.__r_.__value_.__s.__data_[0];
  }
  else
  {
    std::__fs::filesystem::__symlink_status(a1, __ec);
    return v8;
  }
}

uint64_t std::__fs::filesystem::directory_entry::__get_ft[abi:ne180100](std::__fs::filesystem::path *a1, std::error_code *__ec)
{
  const std::error_category *v5;
  std::string::value_type v7;

  if (((1 << a1[3].__pn_.__r_.__value_.__s.__data_[1]) & 0x13) != 0)
  {
    std::__fs::filesystem::__status(a1, __ec);
    return v7;
  }
  else
  {
    if (__ec)
    {
      if ((a1[3].__pn_.__r_.__value_.__s.__data_[0] + 1) > 1u)
      {
        __ec->__val_ = 0;
        v5 = std::system_category();
      }
      else
      {
        v5 = std::generic_category();
        *(_QWORD *)&__ec->__val_ = 2;
      }
      __ec->__cat_ = v5;
    }
    return a1[3].__pn_.__r_.__value_.__s.__data_[0];
  }
}

uint64_t std::__fs::filesystem::__dir_stream::close(DIR **this)
{
  uint64_t v2;

  std::system_category();
  if (closedir(*this) == -1)
  {
    v2 = *__error();
    std::generic_category();
  }
  else
  {
    v2 = 0;
  }
  *this = 0;
  return v2;
}

std::__fs::filesystem::path *std::__fs::filesystem::operator/[abi:ne180100]@<X0>(std::__fs::filesystem::path *this@<X1>, uint64_t a2@<X0>, std::__fs::filesystem::path *a3@<X8>)
{
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&a3->__pn_, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&a3->__pn_.__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a3->__pn_.__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  }
  return std::__fs::filesystem::path::operator/=[abi:ne180100](a3, this);
}

void sub_1920024E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__fs::filesystem::detail::get_file_type<dirent,unsigned char>(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 20) - 1;
  if (v1 > 0xB)
    return 0;
  else
    return (char)byte_192027405[(char)v1];
}

std::__fs::filesystem::path *std::__fs::filesystem::path::operator/=[abi:ne180100](std::__fs::filesystem::path *a1, std::__fs::filesystem::path *this)
{
  int v4;
  std::__fs::filesystem::path *v5;
  std::string::size_type size;

  if (std::__fs::filesystem::path::__root_directory(this).__size_)
  {
    std::string::operator=(&a1->__pn_, &this->__pn_);
  }
  else
  {
    if (std::__fs::filesystem::path::__filename(a1).__size_)
      std::string::push_back(&a1->__pn_, 47);
    v4 = SHIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
    if (v4 >= 0)
      v5 = this;
    else
      v5 = (std::__fs::filesystem::path *)this->__pn_.__r_.__value_.__r.__words[0];
    if (v4 >= 0)
      size = HIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
    else
      size = this->__pn_.__r_.__value_.__l.__size_;
    std::string::append(&a1->__pn_, (const std::string::value_type *)v5, size);
  }
  return a1;
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<std::string_view,void>(std::string *a1, uint64_t a2)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::string::append[abi:ne180100]<char const*,0>(a1, *(char **)a2, (char *)(*(_QWORD *)a2 + *(_QWORD *)(a2 + 8)));
  return a1;
}

void sub_1920025D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::__fs::filesystem::__dir_stream *std::__fs::filesystem::__dir_stream::__dir_stream(std::__fs::filesystem::__dir_stream *this, const std::__fs::filesystem::path *a2, std::__fs::filesystem::directory_options a3, std::error_code *a4)
{
  __int128 v8;
  const std::__fs::filesystem::path *v9;
  DIR *v10;
  uint64_t v11;
  const std::error_category *v12;

  *(_QWORD *)this = 0;
  if (SHIBYTE(a2->__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), a2->__pn_.__r_.__value_.__l.__data_, a2->__pn_.__r_.__value_.__l.__size_);
  }
  else
  {
    v8 = *(_OWORD *)&a2->__pn_.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 3) = *((_QWORD *)&a2->__pn_.__r_.__value_.__l + 2);
    *(_OWORD *)((char *)this + 8) = v8;
  }
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_WORD *)this + 52) = 0;
  *((_QWORD *)this + 12) = 0xFFFF0000FFFFLL;
  *((_QWORD *)this + 8) = -1;
  *((_QWORD *)this + 9) = -1;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0x8000000000000000;
  if ((a2->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = a2;
  else
    v9 = (const std::__fs::filesystem::path *)a2->__pn_.__r_.__value_.__r.__words[0];
  v10 = opendir((const char *)v9);
  *(_QWORD *)this = v10;
  if (v10)
  {
    std::__fs::filesystem::__dir_stream::advance((DIR **)this, a4);
  }
  else
  {
    v11 = *__error();
    v12 = std::generic_category();
    *(_QWORD *)&a4->__val_ = v11;
    a4->__cat_ = v12;
    if ((a3 & 2) != 0 && (_DWORD)v11 == 13)
    {
      a4->__val_ = 0;
      a4->__cat_ = std::system_category();
    }
  }
  return this;
}

void sub_1920026DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 55) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void std::__fs::filesystem::__dir_stream::~__dir_stream(std::__fs::filesystem::__dir_stream *this)
{
  if (*(_QWORD *)this)
    std::__fs::filesystem::__dir_stream::close((DIR **)this);
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

uint64_t std::shared_ptr<std::__fs::filesystem::__dir_stream>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

uint64_t std::shared_ptr<std::__fs::filesystem::recursive_directory_iterator::__shared_imp>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

_QWORD *std::allocate_shared[abi:ne180100]<std::__fs::filesystem::__dir_stream,std::allocator<std::__fs::filesystem::__dir_stream>,std::__fs::filesystem::path const&,std::__fs::filesystem::directory_options &,std::error_code &,void>@<X0>(const std::__fs::filesystem::path *a1@<X1>, std::__fs::filesystem::directory_options *a2@<X2>, std::error_code *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0x90uLL);
  result = std::__shared_ptr_emplace<std::__fs::filesystem::__dir_stream>::__shared_ptr_emplace[abi:ne180100]<std::__fs::filesystem::path const&,std::__fs::filesystem::directory_options &,std::error_code &,std::allocator<std::__fs::filesystem::__dir_stream>,0>(v8, a1, a2, a3);
  *a4 = v8 + 4;
  a4[1] = v8;
  return result;
}

void sub_192002868(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<std::__fs::filesystem::__dir_stream>::__shared_ptr_emplace[abi:ne180100]<std::__fs::filesystem::path const&,std::__fs::filesystem::directory_options &,std::error_code &,std::allocator<std::__fs::filesystem::__dir_stream>,0>(_QWORD *a1, const std::__fs::filesystem::path *a2, std::__fs::filesystem::directory_options *a3, std::error_code *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E2E5C7B8;
  std::__fs::filesystem::__dir_stream::__dir_stream((std::__fs::filesystem::__dir_stream *)(a1 + 4), a2, *a3, a4);
  return a1;
}

void sub_1920028B4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::__fs::filesystem::__dir_stream>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2E5C7B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::__fs::filesystem::__dir_stream>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2E5C7B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x194021E38);
}

void std::__shared_ptr_emplace<std::__fs::filesystem::__dir_stream>::__on_zero_shared(uint64_t a1)
{
  std::__fs::filesystem::__dir_stream::~__dir_stream((std::__fs::filesystem::__dir_stream *)(a1 + 32));
}

void std::__shared_ptr_emplace<std::__fs::filesystem::recursive_directory_iterator::__shared_imp>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2E5C808;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::__fs::filesystem::recursive_directory_iterator::__shared_imp>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2E5C808;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x194021E38);
}

uint64_t std::__shared_ptr_emplace<std::__fs::filesystem::recursive_directory_iterator::__shared_imp>::__on_zero_shared(uint64_t a1)
{
  return std::deque<std::__fs::filesystem::__dir_stream>::~deque[abi:ne180100]((_QWORD *)(a1 + 24));
}

uint64_t std::deque<std::__fs::filesystem::__dir_stream>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  std::__fs::filesystem::__dir_stream *v7;
  unint64_t v8;
  uint64_t v9;
  std::__fs::filesystem::__dir_stream *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 / 0x24];
    v7 = (std::__fs::filesystem::__dir_stream *)((char *)*v6 + 112 * (v5 % 0x24));
    v8 = (unint64_t)v2[(a1[5] + v5) / 0x24] + 112 * ((a1[5] + v5) % 0x24);
    if (v7 != (std::__fs::filesystem::__dir_stream *)v8)
    {
      do
      {
        std::__fs::filesystem::__dir_stream::~__dir_stream(v7);
        v7 = (std::__fs::filesystem::__dir_stream *)(v9 + 112);
        if (v7 - (std::__fs::filesystem::__dir_stream *)*v6 == 4032)
        {
          v10 = (std::__fs::filesystem::__dir_stream *)v6[1];
          ++v6;
          v7 = v10;
        }
      }
      while (v7 != (std::__fs::filesystem::__dir_stream *)v8);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v12 = v11 >> 3;
  if (v12 == 1)
  {
    v13 = 18;
  }
  else
  {
    if (v12 != 2)
      goto LABEL_16;
    v13 = 36;
  }
  a1[4] = v13;
LABEL_16:
  while (v2 != v3)
  {
    v14 = *v2++;
    operator delete(v14);
  }
  return std::__split_buffer<std::__fs::filesystem::__dir_stream *>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<std::__fs::filesystem::__dir_stream *>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v4);
  return a1;
}

__n128 std::deque<std::__fs::filesystem::__dir_stream>::push_back(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __n128 result;
  __int128 v12;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 36 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<std::__fs::filesystem::__dir_stream>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x24)) + 112 * (v7 % 0x24);
  *(_QWORD *)v8 = *(_QWORD *)a2;
  v9 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(v8 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(v8 + 8) = v9;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v10 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(v8 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(v8 + 32) = v10;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  result = *(__n128 *)(a2 + 64);
  v12 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(v8 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v8 + 96) = v12;
  *(__n128 *)(v8 + 64) = result;
  *(_QWORD *)a2 = 0;
  ++a1[5];
  return result;
}

void std::deque<std::__fs::filesystem::__dir_stream>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x24;
  v4 = v2 - 36;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::allocator<std::__fs::filesystem::__dir_stream *>::allocate_at_least[abi:ne180100](v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFC0uLL);
      std::__split_buffer<std::__fs::filesystem::__dir_stream *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFC0uLL);
    std::__split_buffer<std::__fs::filesystem::__dir_stream *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::allocator<std::__fs::filesystem::__dir_stream *>::allocate_at_least[abi:ne180100]((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::allocator<std::__fs::filesystem::__dir_stream *>::allocate_at_least[abi:ne180100]((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFC0uLL);
  std::__split_buffer<std::__fs::filesystem::__dir_stream *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<std::__fs::filesystem::__dir_stream *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_192002E98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::__split_buffer<std::__fs::filesystem::__dir_stream *>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;

  v5 = (char *)a1[3];
  v4 = (uint64_t)(a1 + 3);
  v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    v7 = (char *)a1[1];
    v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v18 = 1;
      else
        v18 = (uint64_t)&v6[-*a1] >> 2;
      v19 = (char *)std::allocator<std::__fs::filesystem::__dir_stream *>::allocate_at_least[abi:ne180100](v4, v18);
      v21 = &v19[8 * (v18 >> 2)];
      v22 = (uint64_t *)a1[1];
      v6 = v21;
      v23 = a1[2] - (_QWORD)v22;
      if (v23)
      {
        v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        v24 = 8 * (v23 >> 3);
        v25 = &v19[8 * (v18 >> 2)];
        do
        {
          v26 = *v22++;
          *(_QWORD *)v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        v6 = (char *)a1[2];
      }
    }
    else
    {
      v9 = v8 >> 3;
      v10 = v8 >> 3 < -1;
      v11 = (v8 >> 3) + 2;
      if (v10)
        v12 = v11;
      else
        v12 = v9 + 1;
      v13 = -(v12 >> 1);
      v14 = v12 >> 1;
      v15 = &v7[-8 * v14];
      v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        v6 = (char *)a1[1];
      }
      v17 = &v6[8 * v13];
      v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(_QWORD *)v6 = *a2;
  a1[2] += 8;
}

{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)std::allocator<std::__fs::filesystem::__dir_stream *>::allocate_at_least[abi:ne180100](a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<std::__fs::filesystem::__dir_stream *>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = a1 + 24;
    v7 = *(_BYTE **)(a1 + 24);
    v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4)
        v12 = 1;
      else
        v12 = (v7 - v4) >> 2;
      v13 = 2 * v12;
      v14 = (char *)std::allocator<std::__fs::filesystem::__dir_stream *>::allocate_at_least[abi:ne180100](v6, v12);
      v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      v16 = *(uint64_t **)(a1 + 8);
      v17 = v5;
      v18 = *(_QWORD *)(a1 + 16) - (_QWORD)v16;
      if (v18)
      {
        v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = v5;
        do
        {
          v21 = *v16++;
          *(_QWORD *)v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      v22 = *(char **)a1;
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v17;
      *(_QWORD *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v9 = (v7 - v8) >> 3;
      if (v9 >= -1)
        v10 = v9 + 1;
      else
        v10 = v9 + 2;
      v11 = v10 >> 1;
      v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)std::allocator<std::__fs::filesystem::__dir_stream *>::allocate_at_least[abi:ne180100](*(_QWORD *)(a1 + 32), v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

void *std::allocator<std::__fs::filesystem::__dir_stream *>::allocate_at_least[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a2);
}

uint64_t std::deque<std::__fs::filesystem::__dir_stream>::pop_back(_QWORD *a1)
{
  unint64_t v2;

  v2 = a1[5] + a1[4] - 1;
  std::__fs::filesystem::__dir_stream::~__dir_stream((std::__fs::filesystem::__dir_stream *)(*(_QWORD *)(a1[1] + 8 * (v2 / 0x24))
                                                                                           + 112 * (v2 % 0x24)));
  --a1[5];
  return std::deque<std::__fs::filesystem::__dir_stream>::__maybe_remove_back_spare[abi:ne180100](a1, 1);
}

uint64_t std::deque<std::__fs::filesystem::__dir_stream>::__maybe_remove_back_spare[abi:ne180100](_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = 36 * ((v2 - v3) >> 3) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x24)
    a2 = 1;
  if (v5 < 0x48)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

std::__fs::filesystem::path *__cdecl std::__fs::filesystem::__absolute(std::__fs::filesystem::path *__return_ptr retstr, const std::__fs::filesystem::path *a2, std::error_code *__ec)
{
  std::__fs::filesystem::path *result;
  std::__fs::filesystem::path __p;

  memset(&__p, 0, sizeof(__p));
  std::__fs::filesystem::__do_absolute((std::__fs::filesystem::path *)a2, &__p, __ec, retstr);
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
  return result;
}

void sub_19200349C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__fs::filesystem::__do_absolute(std::__fs::filesystem::path *this@<X0>, std::__fs::filesystem::path *a2@<X1>, std::error_code *a3@<X2>, std::__fs::filesystem::path *a4@<X8>)
{
  std::__fs::filesystem::path v9;

  if (a3)
  {
    a3->__val_ = 0;
    a3->__cat_ = std::system_category();
  }
  if (std::__fs::filesystem::path::__root_directory(this).__size_)
  {
    if (SHIBYTE(this->__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&a4->__pn_, this->__pn_.__r_.__value_.__l.__data_, this->__pn_.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)&a4->__pn_.__r_.__value_.__l.__data_ = *(_OWORD *)&this->__pn_.__r_.__value_.__l.__data_;
      a4->__pn_.__r_.__value_.__r.__words[2] = this->__pn_.__r_.__value_.__r.__words[2];
    }
  }
  else
  {
    std::__fs::filesystem::__current_path(&v9, a3);
    if (SHIBYTE(a2->__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(a2->__pn_.__r_.__value_.__l.__data_);
    *a2 = v9;
    if (a3 && a3->__val_)
    {
      a4->__pn_.__r_.__value_.__r.__words[0] = 0;
      a4->__pn_.__r_.__value_.__l.__size_ = 0;
      a4->__pn_.__r_.__value_.__r.__words[2] = 0;
    }
    else
    {
      std::__fs::filesystem::operator/[abi:ne180100](this, (uint64_t)a2, a4);
    }
  }
}

std::__fs::filesystem::path *__cdecl std::__fs::filesystem::__canonical(std::__fs::filesystem::path *__return_ptr retstr, const std::__fs::filesystem::path *a2, std::error_code *__ec)
{
  std::__fs::filesystem::path *p_p;
  char *v7;
  char *v8;
  std::__fs::filesystem::path *result;
  __n128 v10;
  std::__fs::filesystem::path __p;
  _QWORD v12[4];
  std::__fs::filesystem::path v13;

  memset(&v13, 0, sizeof(v13));
  v12[0] = "canonical";
  v12[1] = __ec;
  v12[2] = a2;
  v12[3] = &v13;
  if (__ec)
  {
    __ec->__val_ = 0;
    __ec->__cat_ = std::system_category();
  }
  std::__fs::filesystem::__do_absolute((std::__fs::filesystem::path *)a2, &v13, __ec, &__p);
  if ((__p.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::__fs::filesystem::path *)__p.__pn_.__r_.__value_.__r.__words[0];
  v7 = realpath_DARWIN_EXTSN((const char *)p_p, 0);
  v8 = v7;
  if (v7)
  {
    v10.n128_u64[0] = (unint64_t)v7;
    std::__fs::filesystem::path::path[abi:ne180100]<char *,void>(&retstr->__pn_, (char **)&v10);
    free(v8);
  }
  else
  {
    v10.n128_u64[0] = *__error();
    v10.n128_u64[1] = (unint64_t)std::generic_category();
    std::__fs::filesystem::detail::ErrorHandler<std::__fs::filesystem::path>::report((uint64_t)v12, &v10, retstr);
  }
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__pn_.__r_.__value_.__l.__data_);
  return result;
}

void sub_192003690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;
  uint64_t v17;

  free(v16);
  if (a16 < 0)
    operator delete(__p);
  if (*(char *)(v17 - 33) < 0)
    operator delete(*(void **)(v17 - 56));
  _Unwind_Resume(a1);
}

__n128 std::__fs::filesystem::detail::ErrorHandler<std::__fs::filesystem::path>::report@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X1>, _QWORD *a3@<X8>)
{
  __n128 *v3;
  __n128 result;
  uint64_t v6;
  uint64_t v7;
  int v8;
  std::string __p;
  std::string v11;

  v3 = *(__n128 **)(a1 + 8);
  if (!v3)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "in ");
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(*(char **)a1, &__p, &v11);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v6 = *(_QWORD *)(a1 + 16);
    v7 = *(_QWORD *)(a1 + 24);
    v8 = v6 != 0;
    if (v7)
      ++v8;
    if (v8)
    {
      if (v8 == 1)
        std::__fs::filesystem::__throw_filesystem_error[abi:ne180100]<std::string &,std::__fs::filesystem::path const&,std::error_code const&>((uint64_t)&v11, v6, a2);
      std::__fs::filesystem::__throw_filesystem_error[abi:ne180100]<std::string &,std::__fs::filesystem::path const&,std::__fs::filesystem::path const&,std::error_code const&>((uint64_t)&v11, v6, v7, a2);
    }
    std::__fs::filesystem::__throw_filesystem_error[abi:ne180100]<std::string &,std::error_code const&>((uint64_t)&v11, a2);
  }
  result = *a2;
  *v3 = *a2;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  return result;
}

void sub_19200379C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__fs::filesystem::__copy(const std::__fs::filesystem::path *__from, const std::__fs::filesystem::path *__to, std::__fs::filesystem::copy_options __opt, std::error_code *__ec)
{
  int v5;
  std::__fs::filesystem::path *p_toa;
  char v9;
  int v10;
  std::__fs::filesystem::copy_options v11;
  const std::__fs::filesystem::directory_entry *v12;
  const std::__fs::filesystem::directory_entry *v13;
  std::error_code __eca;
  std::__fs::filesystem::directory_iterator v15;
  std::__fs::filesystem::path __p;
  std::__fs::filesystem::path __toa;
  _BYTE v18[8];
  stat v19;
  uint64_t v20;
  stat v21;
  int v22;
  const std::error_category *v23;
  _QWORD _1A0[12];

  v5 = __opt;
  _1A0[0] = "copy";
  _1A0[1] = __ec;
  _1A0[2] = __from;
  _1A0[3] = __to;
  if (__ec)
  {
    __ec->__val_ = 0;
    __ec->__cat_ = std::system_category();
  }
  v22 = 0;
  v23 = std::system_category();
  memset(&v21, 0, sizeof(v21));
  if ((v5 & 0xB0) != 0)
    std::__fs::filesystem::detail::posix_lstat((const char **)&__from->__pn_.__r_.__value_.__l.__data_, &v21, (stat *)&v22, (uint64_t)&v20);
  else
    std::__fs::filesystem::detail::posix_stat((const char **)&__from->__pn_.__r_.__value_.__l.__data_, &v21, (stat *)&v22, (uint64_t)&v20);
  if (v22)
    goto LABEL_7;
  memset(&v19, 0, sizeof(v19));
  if ((v5 & 0xA0) != 0)
    std::__fs::filesystem::detail::posix_lstat((const char **)&__to->__pn_.__r_.__value_.__l.__data_, &v19, (stat *)&v22, (uint64_t)v18);
  else
    std::__fs::filesystem::detail::posix_stat((const char **)&__to->__pn_.__r_.__value_.__l.__data_, &v19, (stat *)&v22, (uint64_t)v18);
  if (!v18[0])
  {
LABEL_7:
    p_toa = (std::__fs::filesystem::path *)&v22;
LABEL_31:
    std::__fs::filesystem::detail::ErrorHandler<void>::report((uint64_t)_1A0, (__n128 *)p_toa);
    return;
  }
  v9 = v20;
  if (!(_BYTE)v20
    || v20 == 255
    || v20 - 4 < 0xFFFFFFFD
    || v18[0] != 255 && (v18[0] - 4 < 0xFFFFFFFD || v18[0] == 1 && v20 == 2)
    || v21.st_dev == v19.st_dev && v21.st_ino == v19.st_ino)
  {
    __toa.__pn_.__r_.__value_.__r.__words[0] = 78;
    __toa.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)std::generic_category();
    p_toa = &__toa;
    goto LABEL_31;
  }
  if (__ec)
  {
    __ec->__val_ = 0;
    __ec->__cat_ = std::system_category();
    v9 = v20;
  }
  if (v9 == 1)
  {
    if ((v5 & 0x40) == 0)
    {
      if ((v5 & 0x80) != 0)
      {
        std::__fs::filesystem::__create_symlink(__from, __to, __ec);
      }
      else if ((v5 & 0x100) != 0)
      {
        std::__fs::filesystem::__create_hard_link(__from, __to, __ec);
      }
      else if (v18[0] == 2)
      {
        std::__fs::filesystem::path::filename[abi:ne180100](__from, (uint64_t)&__p);
        std::__fs::filesystem::operator/[abi:ne180100](&__p, (uint64_t)__to, &__toa);
        std::__fs::filesystem::__copy_file(__from, &__toa, (std::__fs::filesystem::copy_options)v5, __ec);
        if (SHIBYTE(__toa.__pn_.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__toa.__pn_.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__pn_.__r_.__value_.__l.__data_);
      }
      else
      {
        std::__fs::filesystem::__copy_file(__from, __to, (std::__fs::filesystem::copy_options)v5, __ec);
      }
    }
    return;
  }
  if (v9 != 2)
  {
    if (v9 == 3 && (v5 & 0x20) == 0)
    {
      if (v18[0] == 255 || !v18[0])
      {
        std::__fs::filesystem::__copy_symlink(__from, __to, __ec);
        return;
      }
      v10 = 17;
      goto LABEL_52;
    }
    return;
  }
  if ((v5 & 0x80) != 0)
  {
    v10 = 21;
LABEL_52:
    LODWORD(__toa.__pn_.__r_.__value_.__l.__data_) = v10;
    std::__fs::filesystem::detail::ErrorHandler<void>::report((uint64_t)_1A0, (unsigned int *)&__toa);
    return;
  }
  if (!v5 || (v5 & 8) != 0)
  {
    if (v18[0] != 255 && v18[0])
    {
      if (__ec)
        goto LABEL_55;
    }
    else
    {
      std::__fs::filesystem::__create_directory(__to, __from, __ec);
      if (__ec)
      {
        if (__ec->__val_)
          return;
LABEL_55:
        std::__fs::filesystem::directory_iterator::directory_iterator(&v15, __from, __ec, none);
        if (__ec->__val_)
        {
LABEL_70:
          std::shared_ptr<std::__fs::filesystem::__dir_stream>::~shared_ptr[abi:ne180100]((uint64_t)&v15);
          return;
        }
LABEL_58:
        __eca.__val_ = 0;
        __eca.__cat_ = std::system_category();
        v11 = v5 | 0x200;
        while (v15.__imp_.__ptr_)
        {
          if (__eca.__val_)
          {
            std::__fs::filesystem::detail::ErrorHandler<void>::report((uint64_t)_1A0, (__n128 *)&__eca);
            goto LABEL_70;
          }
          v12 = std::__fs::filesystem::directory_iterator::__dereference(&v15);
          v13 = std::__fs::filesystem::directory_iterator::__dereference(&v15);
          std::__fs::filesystem::path::filename[abi:ne180100](&v13->__p_, (uint64_t)&__p);
          std::__fs::filesystem::operator/[abi:ne180100](&__p, (uint64_t)__to, &__toa);
          std::__fs::filesystem::__copy(&v12->__p_, &__toa, v11, __ec);
          if (SHIBYTE(__toa.__pn_.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__toa.__pn_.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__pn_.__r_.__value_.__l.__data_);
          if (__ec && __ec->__val_)
            goto LABEL_70;
          std::__fs::filesystem::directory_iterator::__increment(&v15, &__eca);
        }
        goto LABEL_70;
      }
    }
    std::__fs::filesystem::directory_iterator::directory_iterator(&v15, __from, 0, none);
    goto LABEL_58;
  }
}

void sub_192003BC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  std::shared_ptr<std::__fs::filesystem::__dir_stream>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  _Unwind_Resume(a1);
}

double std::__fs::filesystem::detail::ErrorHandler<void>::report(uint64_t a1, unsigned int *a2)
{
  double result;
  __n128 v4;

  v4.n128_u64[0] = *a2;
  v4.n128_u64[1] = (unint64_t)std::generic_category();
  *(_QWORD *)&result = std::__fs::filesystem::detail::ErrorHandler<void>::report(a1, &v4).n128_u64[0];
  return result;
}

void std::__fs::filesystem::__copy_symlink(const std::__fs::filesystem::path *__existing_symlink, const std::__fs::filesystem::path *__new_symlink, std::error_code *__ec)
{
  std::__fs::filesystem::path __to;

  std::__fs::filesystem::__read_symlink(&__to, __existing_symlink, __ec);
  if (!__ec || !__ec->__val_)
    std::__fs::filesystem::__create_symlink(&__to, __new_symlink, __ec);
  if (SHIBYTE(__to.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__to.__pn_.__r_.__value_.__l.__data_);
}

void sub_192003CE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__fs::filesystem::__create_symlink(const std::__fs::filesystem::path *__to, const std::__fs::filesystem::path *__new_symlink, std::error_code *__ec)
{
  const std::__fs::filesystem::path *v5;
  const std::__fs::filesystem::path *v6;
  __n128 v7;
  _QWORD v8[4];

  v8[0] = "create_symlink";
  v8[1] = __ec;
  v8[2] = __to;
  v8[3] = __new_symlink;
  if (__ec)
  {
    __ec->__val_ = 0;
    __ec->__cat_ = std::system_category();
  }
  if ((__to->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = __to;
  else
    v5 = (const std::__fs::filesystem::path *)__to->__pn_.__r_.__value_.__r.__words[0];
  if ((__new_symlink->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = __new_symlink;
  else
    v6 = (const std::__fs::filesystem::path *)__new_symlink->__pn_.__r_.__value_.__r.__words[0];
  if (symlink((const char *)v5, (const char *)v6) == -1)
  {
    v7.n128_u64[0] = *__error();
    v7.n128_u64[1] = (unint64_t)std::generic_category();
    std::__fs::filesystem::detail::ErrorHandler<void>::report((uint64_t)v8, &v7);
  }
}

void std::__fs::filesystem::__create_hard_link(const std::__fs::filesystem::path *__to, const std::__fs::filesystem::path *__new_hard_link, std::error_code *__ec)
{
  const std::__fs::filesystem::path *v5;
  const std::__fs::filesystem::path *v6;
  __n128 v7;
  _QWORD v8[4];

  v8[0] = "create_hard_link";
  v8[1] = __ec;
  v8[2] = __to;
  v8[3] = __new_hard_link;
  if (__ec)
  {
    __ec->__val_ = 0;
    __ec->__cat_ = std::system_category();
  }
  if ((__to->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = __to;
  else
    v5 = (const std::__fs::filesystem::path *)__to->__pn_.__r_.__value_.__r.__words[0];
  if ((__new_hard_link->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = __new_hard_link;
  else
    v6 = (const std::__fs::filesystem::path *)__new_hard_link->__pn_.__r_.__value_.__r.__words[0];
  if (link((const char *)v5, (const char *)v6) == -1)
  {
    v7.n128_u64[0] = *__error();
    v7.n128_u64[1] = (unint64_t)std::generic_category();
    std::__fs::filesystem::detail::ErrorHandler<void>::report((uint64_t)v8, &v7);
  }
}

BOOL std::__fs::filesystem::__copy_file(const std::__fs::filesystem::path *__from, const std::__fs::filesystem::path *__to, std::__fs::filesystem::copy_options __opt, std::error_code *__ec)
{
  char v4;
  char v7;
  const std::error_category *v8;
  BOOL v9;
  int v11;
  char v12;
  unsigned int v13;
  uint64_t v14;
  const std::error_category *v15;
  int v16;
  uint64_t v17;
  _BYTE v18[8];
  stat v19;
  _BYTE v20[16];
  int v21;
  unsigned __int16 v22;
  uint64_t v23;
  __darwin_time_t v24;
  uint64_t v25;
  char v26;
  std::error_code v27;
  _QWORD _200[12];

  v4 = __opt;
  _200[0] = "copy_file";
  _200[1] = __ec;
  _200[2] = __to;
  _200[3] = __from;
  if (__ec)
  {
    __ec->__val_ = 0;
    __ec->__cat_ = std::system_category();
  }
  v27.__val_ = 0;
  v27.__cat_ = std::system_category();
  std::__fs::filesystem::detail::FileDescriptor::create_with_status<int>((uint64_t)__from, &v27, 4, (std::__fs::filesystem::detail::FileDescriptor *)v20);
  if (v27.__val_)
  {
    v7 = std::__fs::filesystem::detail::ErrorHandler<BOOL>::report((uint64_t)_200, &v27);
LABEL_11:
    v9 = v7;
    goto LABEL_12;
  }
  if (v26 != 1)
  {
    v8 = std::generic_category();
    *(_QWORD *)&v27.__val_ = 45;
    v27.__cat_ = v8;
    v7 = std::__fs::filesystem::detail::ErrorHandler<BOOL>::report((uint64_t)_200, &v27);
    goto LABEL_11;
  }
  std::__fs::filesystem::detail::posix_stat((const char **)&__to->__pn_.__r_.__value_.__l.__data_, &v19, (stat *)&v27, (uint64_t)v18);
  if (v18[0] == 255)
  {
    v11 = 513;
    v9 = 1;
    goto LABEL_14;
  }
  if (v18[0] != 1)
  {
    if (v18[0])
    {
      v14 = 45;
      v15 = std::generic_category();
      v7 = std::__fs::filesystem::detail::ErrorHandler<BOOL>::report((uint64_t)_200, &v14);
    }
    else
    {
      v7 = std::__fs::filesystem::detail::ErrorHandler<BOOL>::report((uint64_t)_200, &v27);
    }
    goto LABEL_11;
  }
  if (v21 == v19.st_dev && v23 == v19.st_ino)
  {
    LODWORD(v14) = 17;
    v7 = std::__fs::filesystem::detail::ErrorHandler<BOOL>::report((uint64_t)_200, (unsigned int *)&v14);
    goto LABEL_11;
  }
  if ((v4 & 1) != 0)
    goto LABEL_36;
  if ((v4 & 4) == 0)
  {
    if ((v4 & 2) != 0)
    {
      v9 = 0;
    }
    else
    {
      v14 = 17;
      v15 = std::generic_category();
      v9 = 0;
      if ((std::__fs::filesystem::detail::ErrorHandler<BOOL>::report((uint64_t)_200, &v14) & 1) == 0)
        goto LABEL_12;
    }
    v11 = 1;
    goto LABEL_14;
  }
  if (v24 < v19.st_mtimespec.tv_sec)
  {
LABEL_36:
    v9 = 0;
    goto LABEL_12;
  }
  v9 = 0;
  v11 = 1;
  if (v24 != v19.st_mtimespec.tv_sec || v25 > v19.st_mtimespec.tv_nsec)
  {
LABEL_14:
    std::__fs::filesystem::detail::FileDescriptor::create_with_status<int,unsigned short>((uint64_t)__to, &v27, v11, v22, (std::__fs::filesystem::detail::FileDescriptor *)&v14);
    if (!v27.__val_)
    {
      if (v9)
        goto LABEL_28;
      if (v19.st_dev != v16 || v19.st_ino != v17)
      {
        v13 = 9;
        v12 = std::__fs::filesystem::detail::ErrorHandler<BOOL>::report((uint64_t)_200, &v13);
        goto LABEL_16;
      }
      if (!std::__fs::filesystem::detail::posix_fchmod((uint64_t)&v14, (uint64_t)&v21, &v27)
        && !std::__fs::filesystem::detail::posix_ftruncate((uint64_t)&v14, 0, &v27))
      {
LABEL_28:
        {
          v9 = 1;
          goto LABEL_17;
        }
      }
    }
    v12 = std::__fs::filesystem::detail::ErrorHandler<BOOL>::report((uint64_t)_200, &v27);
LABEL_16:
    v9 = v12;
LABEL_17:
    std::__fs::filesystem::detail::FileDescriptor::close((std::__fs::filesystem::detail::FileDescriptor *)&v14);
  }
LABEL_12:
  std::__fs::filesystem::detail::FileDescriptor::close((std::__fs::filesystem::detail::FileDescriptor *)v20);
  return v9;
}

void sub_1920040D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  std::__fs::filesystem::detail::FileDescriptor::close((std::__fs::filesystem::detail::FileDescriptor *)&a50);
  _Unwind_Resume(a1);
}

double std::__fs::filesystem::path::filename[abi:ne180100]@<D0>(const std::__fs::filesystem::path *a1@<X0>, uint64_t a2@<X8>)
{
  std::__fs::filesystem::path::__string_view v3;
  __int128 *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v5;
  std::basic_string_view<_CharT, _Traits>::size_type v6;
  double result;
  __int128 __dst;
  unint64_t v9;

  v3 = std::__fs::filesystem::path::__filename(a1);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v3.__size_ >= 0x17)
  {
    v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17)
      v5 = v3.__size_ | 7;
    v6 = v5 + 1;
    p_dst = (__int128 *)operator new(v5 + 1);
    *((_QWORD *)&__dst + 1) = v3.__size_;
    v9 = v6 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_)
      goto LABEL_9;
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((_BYTE *)p_dst + v3.__size_) = 0;
  result = *(double *)&__dst;
  *(_OWORD *)a2 = __dst;
  *(_QWORD *)(a2 + 16) = v9;
  return result;
}

BOOL std::__fs::filesystem::__create_directory(const std::__fs::filesystem::path *a1, const std::__fs::filesystem::path *__attributes, std::error_code *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  stat *p_st_rdev;
  const std::__fs::filesystem::path *v11;
  uint64_t v12;
  const std::error_category *v13;
  uint64_t v15;
  const std::error_category *v16;
  uint64_t v17;
  stat v18;
  _QWORD v19[4];
  stat v20;

  v19[0] = "create_directory";
  v19[1] = a3;
  v19[2] = a1;
  v19[3] = __attributes;
  if (a3)
  {
    a3->__val_ = 0;
    a3->__cat_ = std::system_category();
  }
  v18.st_rdev = 0;
  v18.st_atimespec.tv_sec = (__darwin_time_t)std::system_category();
  std::__fs::filesystem::detail::posix_stat((const char **)&__attributes->__pn_.__r_.__value_.__l.__data_, (stat *)&v18.st_atimespec.tv_nsec, (stat *)&v18.st_rdev, (uint64_t)&v18.st_uid);
  if (LOBYTE(v18.st_uid) == 2)
  {
    if ((a1->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = a1;
    else
      v11 = (const std::__fs::filesystem::path *)a1->__pn_.__r_.__value_.__r.__words[0];
    if (!mkdir((const char *)v11, WORD2(v18.st_atimespec.tv_nsec)))
      return 1;
    if (*__error() != 17)
    {
      v15 = *__error();
      v16 = std::generic_category();
      *(_QWORD *)&v20.st_dev = v15;
      v20.st_ino = (__darwin_ino64_t)v16;
      p_st_rdev = &v20;
      return std::__fs::filesystem::detail::ErrorHandler<BOOL>::report((uint64_t)v19, p_st_rdev);
    }
    v12 = *__error();
    v13 = std::generic_category();
    *(_QWORD *)&v18.st_rdev = v12;
    v18.st_atimespec.tv_sec = (__darwin_time_t)v13;
    v18.st_dev = 0;
    v18.st_ino = (__darwin_ino64_t)std::system_category();
    std::__fs::filesystem::detail::posix_stat((const char **)&a1->__pn_.__r_.__value_.__l.__data_, &v20, &v18, (uint64_t)&v17);
    *(_QWORD *)&v18.st_uid = v17;
    if (v17 == 2)
      return 0;
  }
  else if (LOBYTE(v18.st_uid))
  {
    v20.st_dev = 20;
    return std::__fs::filesystem::detail::ErrorHandler<BOOL>::report((uint64_t)v19, (unsigned int *)&v20, (std::__fs::filesystem::detail *)"the specified attribute path is invalid", v5, v6, v7, v8, v9, v17);
  }
  p_st_rdev = (stat *)&v18.st_rdev;
  return std::__fs::filesystem::detail::ErrorHandler<BOOL>::report((uint64_t)v19, p_st_rdev);
}

void std::__fs::filesystem::detail::FileDescriptor::create_with_status<int>(uint64_t a1@<X0>, std::error_code *a2@<X1>, int a3@<W2>, std::__fs::filesystem::detail::FileDescriptor *a4@<X8>)
{
  uint64_t v6;

  std::__fs::filesystem::detail::FileDescriptor::create<int>(a1, (uint64_t)a2, a3, (uint64_t)a4);
  if (!a2->__val_)
    std::__fs::filesystem::detail::FileDescriptor::refresh_status(a4, a2, &v6);
}

void sub_192004370(_Unwind_Exception *a1)
{
  std::__fs::filesystem::detail::FileDescriptor *v1;

  std::__fs::filesystem::detail::FileDescriptor::close(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__fs::filesystem::detail::ErrorHandler<BOOL>::report(uint64_t a1, _QWORD *a2)
{
  _OWORD *v2;
  uint64_t v5;
  uint64_t v6;
  int v7;
  std::string __p;
  std::string v10;

  v2 = *(_OWORD **)(a1 + 8);
  if (!v2)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "in ");
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(*(char **)a1, &__p, &v10);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v5 = *(_QWORD *)(a1 + 16);
    v6 = *(_QWORD *)(a1 + 24);
    v7 = v5 != 0;
    if (v6)
      ++v7;
    if (v7)
    {
      if (v7 == 1)
        std::__fs::filesystem::__throw_filesystem_error[abi:ne180100]<std::string &,std::__fs::filesystem::path const&,std::error_code const&>((uint64_t)&v10, v5, a2);
      std::__fs::filesystem::__throw_filesystem_error[abi:ne180100]<std::string &,std::__fs::filesystem::path const&,std::__fs::filesystem::path const&,std::error_code const&>((uint64_t)&v10, v5, v6, a2);
    }
    std::__fs::filesystem::__throw_filesystem_error[abi:ne180100]<std::string &,std::error_code const&>((uint64_t)&v10, a2);
  }
  *v2 = *(_OWORD *)a2;
  return 0;
}

void sub_192004444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__fs::filesystem::detail::ErrorHandler<BOOL>::report(uint64_t a1, unsigned int *a2)
{
  _QWORD v4[2];

  v4[0] = *a2;
  v4[1] = std::generic_category();
  return std::__fs::filesystem::detail::ErrorHandler<BOOL>::report(a1, v4);
}

void std::__fs::filesystem::detail::FileDescriptor::create_with_status<int,unsigned short>(uint64_t a1@<X0>, std::error_code *a2@<X1>, int a3@<W2>, unsigned int a4@<W3>, std::__fs::filesystem::detail::FileDescriptor *a5@<X8>)
{
  uint64_t v7;

  std::__fs::filesystem::detail::FileDescriptor::create<int,unsigned short>(a1, (uint64_t)a2, a3, a4, (uint64_t)a5);
  if (!a2->__val_)
    std::__fs::filesystem::detail::FileDescriptor::refresh_status(a5, a2, &v7);
}

void sub_1920044F4(_Unwind_Exception *a1)
{
  std::__fs::filesystem::detail::FileDescriptor *v1;

  std::__fs::filesystem::detail::FileDescriptor::close(v1);
  _Unwind_Resume(a1);
}

BOOL std::__fs::filesystem::detail::posix_fchmod(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  int v4;
  const std::error_category *v5;
  uint64_t v6;

  v4 = fchmod(*(_DWORD *)(a1 + 8), *(_WORD *)(a2 + 4));
  if (v4 == -1)
  {
    v6 = *__error();
    v5 = std::generic_category();
    *a3 = v6;
  }
  else
  {
    *(_DWORD *)a3 = 0;
    v5 = std::system_category();
  }
  a3[1] = v5;
  return v4 == -1;
}

BOOL std::__fs::filesystem::detail::posix_ftruncate(uint64_t a1, off_t a2, _QWORD *a3)
{
  int v4;
  const std::error_category *v5;
  uint64_t v6;

  v4 = ftruncate(*(_DWORD *)(a1 + 8), a2);
  if (v4 == -1)
  {
    v6 = *__error();
    v5 = std::generic_category();
    *a3 = v6;
  }
  else
  {
    *(_DWORD *)a3 = 0;
    v5 = std::system_category();
  }
  a3[1] = v5;
  return v4 == -1;
}

BOOL std::__fs::filesystem::detail::`anonymous namespace'::copy_file_impl(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _copyfile_state *v6;
  int v7;
  const std::error_category *v8;
  uint64_t v9;

  v6 = copyfile_state_alloc();
  v7 = fcopyfile(*(_DWORD *)(a1 + 8), *(_DWORD *)(a2 + 8), v6, 8u);
  if (v7 < 0)
  {
    v9 = *__error();
    v8 = std::generic_category();
    *a3 = v9;
  }
  else
  {
    *(_DWORD *)a3 = 0;
    v8 = std::system_category();
  }
  a3[1] = v8;
  copyfile_state_free(v6);
  return v7 >= 0;
}

void sub_19200464C(_Unwind_Exception *a1)
{
  _copyfile_state *v1;

  copyfile_state_free(v1);
  _Unwind_Resume(a1);
}

std::__fs::filesystem::path *__cdecl std::__fs::filesystem::__read_symlink(std::__fs::filesystem::path *__return_ptr retstr, const std::__fs::filesystem::path *a2, std::error_code *__ec)
{
  const std::__fs::filesystem::path *v5;
  unint64_t v6;
  std::__fs::filesystem::path *result;
  _QWORD v8[4];
  __n128 v9;
  char v10[1025];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v8[0] = "read_symlink";
  v8[1] = __ec;
  v8[2] = a2;
  v8[3] = 0;
  if (__ec)
  {
    __ec->__val_ = 0;
    __ec->__cat_ = std::system_category();
  }
  if ((a2->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = a2;
  else
    v5 = (const std::__fs::filesystem::path *)a2->__pn_.__r_.__value_.__r.__words[0];
  v6 = readlink((const char *)v5, v10, 0x401uLL);
  if (v6 == -1)
  {
    v9.n128_u64[0] = *__error();
    v9.n128_u64[1] = (unint64_t)std::generic_category();
    std::__fs::filesystem::detail::ErrorHandler<std::__fs::filesystem::path>::report((uint64_t)v8, &v9, retstr);
  }
  else if (v6 < 0x401)
  {
    v10[v6] = 0;
    v9.n128_u64[0] = (unint64_t)v10;
    return (std::__fs::filesystem::path *)std::__fs::filesystem::path::path[abi:ne180100]<char *,void>(&retstr->__pn_, (char **)&v9);
  }
  else
  {
    v9.n128_u64[0] = 84;
    v9.n128_u64[1] = (unint64_t)std::generic_category();
    std::__fs::filesystem::detail::ErrorHandler<std::__fs::filesystem::path>::report((uint64_t)v8, &v9, retstr);
  }
  return result;
}

BOOL std::__fs::filesystem::__create_directories(const std::__fs::filesystem::path *a1, std::error_code *a2)
{
  _QWORD *p_tv_sec;
  std::string::size_type size;
  std::__fs::filesystem::path::__string_view v6;
  BOOL v7;
  const std::error_category *v8;
  char directory;
  _BYTE v11[8];
  std::__fs::filesystem::path v12;
  _BYTE v13[8];
  stat v14;

  *(_QWORD *)&v14.st_uid = "create_directories";
  *(_QWORD *)&v14.st_rdev = a2;
  v14.st_atimespec.tv_sec = (__darwin_time_t)a1;
  v14.st_atimespec.tv_nsec = 0;
  if (a2)
  {
    a2->__val_ = 0;
    a2->__cat_ = std::system_category();
  }
  v14.st_dev = 0;
  v14.st_ino = (__darwin_ino64_t)std::system_category();
  std::__fs::filesystem::detail::posix_stat((const char **)&a1->__pn_.__r_.__value_.__l.__data_, (stat *)&v14.st_mtimespec, &v14, (uint64_t)v13);
  if (v13[0] != 255)
  {
    if (v13[0] == 2)
      return 0;
    if (v13[0])
    {
      v8 = std::generic_category();
      v14.st_mtimespec.tv_sec = 17;
      v14.st_mtimespec.tv_nsec = (uint64_t)v8;
      p_tv_sec = &v14.st_mtimespec.tv_sec;
    }
    else
    {
      p_tv_sec = &v14;
    }
    return std::__fs::filesystem::detail::ErrorHandler<BOOL>::report((uint64_t)&v14.st_uid, p_tv_sec);
  }
  std::__fs::filesystem::path::parent_path[abi:ne180100](a1, (uint64_t)&v12);
  size = HIBYTE(v12.__pn_.__r_.__value_.__r.__words[2]);
  if ((v12.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v12.__pn_.__r_.__value_.__l.__size_;
  if (size)
  {
    std::__fs::filesystem::detail::posix_stat((const char **)&v12.__pn_.__r_.__value_.__l.__data_, (stat *)&v14.st_mtimespec, &v14, (uint64_t)v11);
    switch(v11[0])
    {
      case 0xFF:
        v6.__data_ = (const std::string_view::value_type *)a1;
        if (std::__fs::filesystem::operator==[abi:ne180100](&v12, v6))
        {
          LODWORD(v14.st_mtimespec.tv_sec) = 22;
          directory = std::__fs::filesystem::detail::ErrorHandler<BOOL>::report((uint64_t)&v14.st_uid, (unsigned int *)&v14.st_mtimespec);
          goto LABEL_25;
        }
        std::__fs::filesystem::__create_directories(&v12, a2);
        if (a2 && a2->__val_)
        {
          v7 = 0;
          goto LABEL_26;
        }
        break;
      case 2:
        break;
      case 0:
        goto LABEL_24;
      default:
        LODWORD(v14.st_mtimespec.tv_sec) = 20;
        directory = std::__fs::filesystem::detail::ErrorHandler<BOOL>::report((uint64_t)&v14.st_uid, (unsigned int *)&v14.st_mtimespec);
        goto LABEL_25;
    }
  }
  directory = std::__fs::filesystem::__create_directory(a1, (std::error_code *)&v14);
  if (v14.st_dev)
LABEL_24:
    directory = std::__fs::filesystem::detail::ErrorHandler<BOOL>::report((uint64_t)&v14.st_uid, &v14);
LABEL_25:
  v7 = directory;
LABEL_26:
  if (SHIBYTE(v12.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__pn_.__r_.__value_.__l.__data_);
  return v7;
}

void sub_192004930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double std::__fs::filesystem::path::parent_path[abi:ne180100]@<D0>(const std::__fs::filesystem::path *a1@<X0>, uint64_t a2@<X8>)
{
  std::__fs::filesystem::path::__string_view v3;
  __int128 *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v5;
  std::basic_string_view<_CharT, _Traits>::size_type v6;
  double result;
  __int128 __dst;
  unint64_t v9;

  v3 = std::__fs::filesystem::path::__parent_path(a1);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v3.__size_ >= 0x17)
  {
    v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17)
      v5 = v3.__size_ | 7;
    v6 = v5 + 1;
    p_dst = (__int128 *)operator new(v5 + 1);
    *((_QWORD *)&__dst + 1) = v3.__size_;
    v9 = v6 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_)
      goto LABEL_9;
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((_BYTE *)p_dst + v3.__size_) = 0;
  result = *(double *)&__dst;
  *(_OWORD *)a2 = __dst;
  *(_QWORD *)(a2 + 16) = v9;
  return result;
}

BOOL std::__fs::filesystem::operator==[abi:ne180100](const std::__fs::filesystem::path *a1, std::__fs::filesystem::path::__string_view a2)
{
  std::basic_string_view<_CharT, _Traits>::size_type v2;

  v2 = *((_QWORD *)a2.__data_ + 1);
  if (*((char *)a2.__data_ + 23) >= 0)
  {
    a2.__size_ = *((unsigned __int8 *)a2.__data_ + 23);
  }
  else
  {
    a2.__data_ = *(const std::string_view::value_type **)a2.__data_;
    a2.__size_ = v2;
  }
  return std::__fs::filesystem::path::__compare(a1, a2) == 0;
}

BOOL std::__fs::filesystem::__create_directory(const std::__fs::filesystem::path *a1, std::error_code *a2)
{
  const std::__fs::filesystem::path *v3;
  _QWORD *p_st_uid;
  _BYTE v6[8];
  stat v7;

  v7.st_atimespec.tv_sec = (__darwin_time_t)"create_directory";
  v7.st_atimespec.tv_nsec = (uint64_t)a2;
  v7.st_mtimespec.tv_sec = (__darwin_time_t)a1;
  v7.st_mtimespec.tv_nsec = 0;
  if (a2)
  {
    a2->__val_ = 0;
    a2->__cat_ = std::system_category();
  }
  if ((a1->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v3 = a1;
  else
    v3 = (const std::__fs::filesystem::path *)a1->__pn_.__r_.__value_.__r.__words[0];
  if (!mkdir((const char *)v3, 0x1FFu))
    return 1;
  if (*__error() == 17)
  {
    *(_QWORD *)&v7.st_uid = *__error();
    *(_QWORD *)&v7.st_rdev = std::generic_category();
    v7.st_dev = 0;
    v7.st_ino = (__darwin_ino64_t)std::system_category();
    std::__fs::filesystem::detail::posix_stat((const char **)&a1->__pn_.__r_.__value_.__l.__data_, (stat *)&v7.st_ctimespec, &v7, (uint64_t)v6);
    if (v6[0] == 2)
      return 0;
    p_st_uid = &v7.st_uid;
  }
  else
  {
    v7.st_ctimespec.tv_sec = *__error();
    v7.st_ctimespec.tv_nsec = (uint64_t)std::generic_category();
    p_st_uid = &v7.st_ctimespec.tv_sec;
  }
  return std::__fs::filesystem::detail::ErrorHandler<BOOL>::report((uint64_t)&v7.st_atimespec, p_st_uid);
}

uint64_t std::__fs::filesystem::detail::ErrorHandler<BOOL>::report(uint64_t a1, unsigned int *a2, std::__fs::filesystem::detail *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  __n128 v12;
  char *v13;

  v13 = &a9;
  v12.n128_u64[0] = *a2;
  v12.n128_u64[1] = (unint64_t)std::generic_category();
  std::__fs::filesystem::detail::ErrorHandler<BOOL>::report_impl(a1, &v12, a3, &a9);
  return 0;
}

void sub_192004BA4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_rethrow();
}

void sub_192004BB0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__fs::filesystem::__create_directory_symlink(const std::__fs::filesystem::path *__to, const std::__fs::filesystem::path *__new_symlink, std::error_code *__ec)
{
  const std::__fs::filesystem::path *v5;
  const std::__fs::filesystem::path *v6;
  __n128 v7;
  _QWORD v8[4];

  v8[0] = "create_directory_symlink";
  v8[1] = __ec;
  v8[2] = __to;
  v8[3] = __new_symlink;
  if (__ec)
  {
    __ec->__val_ = 0;
    __ec->__cat_ = std::system_category();
  }
  if ((__to->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = __to;
  else
    v5 = (const std::__fs::filesystem::path *)__to->__pn_.__r_.__value_.__r.__words[0];
  if ((__new_symlink->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = __new_symlink;
  else
    v6 = (const std::__fs::filesystem::path *)__new_symlink->__pn_.__r_.__value_.__r.__words[0];
  if (symlink((const char *)v5, (const char *)v6) == -1)
  {
    v7.n128_u64[0] = *__error();
    v7.n128_u64[1] = (unint64_t)std::generic_category();
    std::__fs::filesystem::detail::ErrorHandler<void>::report((uint64_t)v8, &v7);
  }
}

std::__fs::filesystem::path *__cdecl std::__fs::filesystem::__current_path(std::__fs::filesystem::path *__return_ptr retstr, std::error_code *__ec)
{
  char *v3;
  char *v4;
  std::__fs::filesystem::path *result;
  int v6;
  __n128 v7;
  _QWORD v8[4];

  v8[0] = "current_path";
  v8[1] = __ec;
  v8[2] = 0;
  v8[3] = 0;
  if (__ec)
  {
    __ec->__val_ = 0;
    __ec->__cat_ = std::system_category();
  }
  v3 = getcwd(0, 0);
  if (v3)
  {
    v4 = v3;
    v7.n128_u64[0] = (unint64_t)v3;
    std::__fs::filesystem::path::path[abi:ne180100]<char *,void>(&retstr->__pn_, (char **)&v7);
    free(v4);
  }
  else
  {
    v6 = *__error();
    v7.n128_u64[1] = (unint64_t)std::generic_category();
    std::__fs::filesystem::detail::ErrorHandler<std::__fs::filesystem::path>::report((uint64_t)v8, &v7, (std::__fs::filesystem::detail *)"call to getcwd failed", retstr, v6);
  }
  return result;
}

void sub_192004D04(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

void std::__fs::filesystem::detail::ErrorHandler<std::__fs::filesystem::path>::report(uint64_t a1@<X0>, __n128 *a2@<X1>, std::__fs::filesystem::detail *a3@<X2>, _QWORD *a4@<X8>, char a5)
{
  std::__fs::filesystem::detail::ErrorHandler<std::__fs::filesystem::path>::report_impl(a1, a2, a3, &a5);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
}

void sub_192004D54(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_rethrow();
}

void sub_192004D60(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__fs::filesystem::__current_path(const std::__fs::filesystem::path *a1, std::error_code *__ec)
{
  const std::__fs::filesystem::path *v3;
  __n128 v4;
  _QWORD v5[4];

  v5[0] = "current_path";
  v5[1] = __ec;
  v5[2] = a1;
  v5[3] = 0;
  if (__ec)
  {
    __ec->__val_ = 0;
    __ec->__cat_ = std::system_category();
  }
  if ((a1->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v3 = a1;
  else
    v3 = (const std::__fs::filesystem::path *)a1->__pn_.__r_.__value_.__r.__words[0];
  if (chdir((const char *)v3) == -1)
  {
    v4.n128_u64[0] = *__error();
    v4.n128_u64[1] = (unint64_t)std::generic_category();
    std::__fs::filesystem::detail::ErrorHandler<void>::report((uint64_t)v5, &v4);
  }
}

BOOL std::__fs::filesystem::__equivalent(const std::__fs::filesystem::path *a1, const std::__fs::filesystem::path *a2, std::error_code *__ec)
{
  const std::error_category *v5;
  const std::error_category *v7;
  _BYTE v9[8];
  std::string __p;
  _BYTE v11[8];
  stat v12;
  stat v13;
  int v14;
  const std::error_category *v15;
  int v16;
  const std::error_category *v17;
  _QWORD _170[12];

  _170[0] = "equivalent";
  _170[1] = __ec;
  _170[2] = a1;
  _170[3] = a2;
  if (__ec)
  {
    __ec->__val_ = 0;
    __ec->__cat_ = std::system_category();
  }
  v16 = 0;
  v17 = std::system_category();
  v14 = 0;
  v15 = std::system_category();
  memset(&v13, 0, sizeof(v13));
  memset(&v12, 0, sizeof(v12));
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&__p, (char *)a1);
  std::__fs::filesystem::detail::posix_stat((const char **)&__p.__r_.__value_.__l.__data_, &v13, (stat *)&v16, (uint64_t)v11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v11[0] != 255 && v11[0])
  {
    std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&__p, (char *)a2);
    std::__fs::filesystem::detail::posix_stat((const char **)&__p.__r_.__value_.__l.__data_, &v12, (stat *)&v14, (uint64_t)v9);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v9[0] != 255 && v9[0])
    {
      return v13.st_dev == v12.st_dev && v13.st_ino == v12.st_ino;
    }
    else
    {
      v7 = std::generic_category();
      __p.__r_.__value_.__r.__words[0] = 45;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)v7;
      return std::__fs::filesystem::detail::ErrorHandler<BOOL>::report((uint64_t)_170, &__p);
    }
  }
  else
  {
    v5 = std::generic_category();
    __p.__r_.__value_.__r.__words[0] = 45;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v5;
    return std::__fs::filesystem::detail::ErrorHandler<BOOL>::report((uint64_t)_170, &__p);
  }
}

void sub_192004F70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  _Unwind_Resume(exception_object);
}

uintmax_t std::__fs::filesystem::__file_size(const std::__fs::filesystem::path *a1, std::error_code *__ec)
{
  uint64_t v3;
  const std::error_category *v5;
  uint64_t v6;
  uint64_t v8;
  stat v9;
  uint64_t v10;
  const std::error_category *v11;
  _QWORD _B0[8];

  _B0[0] = "file_size";
  _B0[1] = __ec;
  _B0[2] = a1;
  _B0[3] = 0;
  if (__ec)
  {
    __ec->__val_ = 0;
    __ec->__cat_ = std::system_category();
  }
  LODWORD(v10) = 0;
  v11 = std::system_category();
  std::__fs::filesystem::detail::posix_stat((const char **)&a1->__pn_.__r_.__value_.__l.__data_, &v9, (stat *)&v10, (uint64_t)&v8);
  v3 = v8;
  if ((_BYTE)v8)
  {
    if (v8 != 255 && v8 == 1)
      return v9.st_size;
  }
  if (!(_DWORD)v10)
  {
    v5 = std::generic_category();
    v6 = 45;
    if (v3 == 2)
      v6 = 21;
    v10 = v6;
    v11 = v5;
  }
  return std::__fs::filesystem::detail::ErrorHandler<unsigned long>::report((uint64_t)_B0, &v10);
}

uint64_t std::__fs::filesystem::detail::ErrorHandler<unsigned long>::report(uint64_t a1, _QWORD *a2)
{
  _OWORD *v2;
  uint64_t v5;
  uint64_t v6;
  int v7;
  std::string __p;
  std::string v10;

  v2 = *(_OWORD **)(a1 + 8);
  if (!v2)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "in ");
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(*(char **)a1, &__p, &v10);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v5 = *(_QWORD *)(a1 + 16);
    v6 = *(_QWORD *)(a1 + 24);
    v7 = v5 != 0;
    if (v6)
      ++v7;
    if (v7)
    {
      if (v7 == 1)
        std::__fs::filesystem::__throw_filesystem_error[abi:ne180100]<std::string &,std::__fs::filesystem::path const&,std::error_code const&>((uint64_t)&v10, v5, a2);
      std::__fs::filesystem::__throw_filesystem_error[abi:ne180100]<std::string &,std::__fs::filesystem::path const&,std::__fs::filesystem::path const&,std::error_code const&>((uint64_t)&v10, v5, v6, a2);
    }
    std::__fs::filesystem::__throw_filesystem_error[abi:ne180100]<std::string &,std::error_code const&>((uint64_t)&v10, a2);
  }
  *v2 = *(_OWORD *)a2;
  return -1;
}

void sub_192005114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uintmax_t std::__fs::filesystem::__hard_link_count(const std::__fs::filesystem::path *a1, std::error_code *__ec)
{
  _BYTE v4[8];
  stat v5;
  _QWORD v6[2];
  _QWORD _B0[8];

  _B0[0] = "hard_link_count";
  _B0[1] = __ec;
  _B0[2] = a1;
  _B0[3] = 0;
  if (__ec)
  {
    __ec->__val_ = 0;
    __ec->__cat_ = std::system_category();
  }
  LODWORD(v6[0]) = 0;
  v6[1] = std::system_category();
  std::__fs::filesystem::detail::posix_stat((const char **)&a1->__pn_.__r_.__value_.__l.__data_, &v5, (stat *)v6, (uint64_t)v4);
  if (LODWORD(v6[0]))
    return std::__fs::filesystem::detail::ErrorHandler<unsigned long>::report((uint64_t)_B0, v6);
  else
    return v5.st_nlink;
}

BOOL std::__fs::filesystem::__fs_is_empty(const std::__fs::filesystem::path *__p, std::error_code *__ec)
{
  std::__fs::filesystem::directory_iterator *v4;
  BOOL v5;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *cntrl;
  uint64_t *p_shared_owners;
  unint64_t v10;
  _BYTE v11[8];
  stat v12;
  int v13;
  const std::error_category *v14;
  _QWORD v15[4];
  std::__fs::filesystem::directory_iterator _D0[4];

  v15[0] = "is_empty";
  v15[1] = __ec;
  v15[2] = __p;
  v15[3] = 0;
  if (__ec)
  {
    __ec->__val_ = 0;
    __ec->__cat_ = std::system_category();
  }
  v13 = 0;
  v14 = std::system_category();
  std::__fs::filesystem::detail::posix_stat((const char **)&__p->__pn_.__r_.__value_.__l.__data_, &v12, (stat *)&v13, (uint64_t)v11);
  if (v13)
  {
    v4 = (std::__fs::filesystem::directory_iterator *)&v13;
    return std::__fs::filesystem::detail::ErrorHandler<BOOL>::report((uint64_t)v15, v4);
  }
  if (v11[0] == 1)
    return v12.st_size == 0;
  if (v11[0] != 2)
  {
    v7 = (std::__shared_weak_count *)std::generic_category();
    _D0[0].__imp_.__ptr_ = (std::shared_ptr<std::__fs::filesystem::__dir_stream>::element_type *)45;
    _D0[0].__imp_.__cntrl_ = v7;
    v4 = _D0;
    return std::__fs::filesystem::detail::ErrorHandler<BOOL>::report((uint64_t)v15, v4);
  }
  if (!__ec)
  {
    std::__fs::filesystem::directory_iterator::directory_iterator(_D0, __p, 0, none);
LABEL_15:
    v5 = _D0[0].__imp_.__ptr_ == 0;
    goto LABEL_16;
  }
  std::__fs::filesystem::directory_iterator::directory_iterator(_D0, __p, __ec, none);
  v5 = 0;
  if (!__ec->__val_)
    goto LABEL_15;
LABEL_16:
  cntrl = _D0[0].__imp_.__cntrl_;
  if (_D0[0].__imp_.__cntrl_)
  {
    p_shared_owners = &_D0[0].__imp_.__cntrl_->__shared_owners_;
    do
      v10 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v10 - 1, (unint64_t *)p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))cntrl->__on_zero_shared)(cntrl);
      std::__shared_weak_count::__release_weak(cntrl);
    }
  }
  return v5;
}

std::__fs::filesystem::file_time_type std::__fs::filesystem::__last_write_time(const std::__fs::filesystem::path *a1, std::error_code *__ec)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t tv_nsec;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _BYTE v10[8];
  stat v11;
  _QWORD v12[2];
  _QWORD _B0[8];
  std::__fs::filesystem::file_time_type result;

  _B0[0] = "last_write_time";
  _B0[1] = __ec;
  _B0[2] = a1;
  _B0[3] = 0;
  if (__ec)
  {
    __ec->__val_ = 0;
    __ec->__cat_ = std::system_category();
  }
  LODWORD(v12[0]) = 0;
  v12[1] = std::system_category();
  std::__fs::filesystem::detail::posix_stat((const char **)&a1->__pn_.__r_.__value_.__l.__data_, &v11, (stat *)v12, (uint64_t)v10);
  if (LODWORD(v12[0]))
  {
    v4 = std::__fs::filesystem::detail::ErrorHandler<std::chrono::time_point<std::__fs::filesystem::_FilesystemClock,std::chrono::duration<__int128,std::ratio<1l,1000000000l>>>>::report((uint64_t)_B0, v12);
  }
  else
  {
    if (__ec)
    {
      __ec->__val_ = 0;
      __ec->__cat_ = std::system_category();
    }
    tv_nsec = v11.st_mtimespec.tv_nsec;
    if (v11.st_mtimespec.tv_sec < 0 && v11.st_mtimespec.tv_nsec)
    {
      v8 = (v11.st_mtimespec.tv_nsec + __PAIR128__(-1, -1000000000)) >> 64;
      v7 = v11.st_mtimespec.tv_nsec - 1000000000;
      v9 = (unsigned __int128)((v11.st_mtimespec.tv_sec + 1) * (__int128)1000000000) >> 64;
      tv_nsec = 1000000000 * (v11.st_mtimespec.tv_sec + 1);
    }
    else
    {
      v9 = v11.st_mtimespec.tv_nsec >> 63;
      v8 = (unsigned __int128)(v11.st_mtimespec.tv_sec * (__int128)1000000000) >> 64;
      v7 = 1000000000 * v11.st_mtimespec.tv_sec;
    }
    v5 = (__PAIR128__(v8, v7) + __PAIR128__(v9, tv_nsec)) >> 64;
    v4 = v7 + tv_nsec;
  }
  *((_QWORD *)&result.__d_.__rep_ + 1) = v5;
  *(_QWORD *)&result.__d_.__rep_ = v4;
  return result;
}

uint64_t std::__fs::filesystem::detail::ErrorHandler<std::chrono::time_point<std::__fs::filesystem::_FilesystemClock,std::chrono::duration<__int128,std::ratio<1l,1000000000l>>>>::report(uint64_t a1, _QWORD *a2)
{
  _OWORD *v2;
  uint64_t v5;
  uint64_t v6;
  int v7;
  std::string __p;
  std::string v10;

  v2 = *(_OWORD **)(a1 + 8);
  if (!v2)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "in ");
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(*(char **)a1, &__p, &v10);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v5 = *(_QWORD *)(a1 + 16);
    v6 = *(_QWORD *)(a1 + 24);
    v7 = v5 != 0;
    if (v6)
      ++v7;
    if (v7)
    {
      if (v7 == 1)
        std::__fs::filesystem::__throw_filesystem_error[abi:ne180100]<std::string &,std::__fs::filesystem::path const&,std::error_code const&>((uint64_t)&v10, v5, a2);
      std::__fs::filesystem::__throw_filesystem_error[abi:ne180100]<std::string &,std::__fs::filesystem::path const&,std::__fs::filesystem::path const&,std::error_code const&>((uint64_t)&v10, v5, v6, a2);
    }
    std::__fs::filesystem::__throw_filesystem_error[abi:ne180100]<std::string &,std::error_code const&>((uint64_t)&v10, a2);
  }
  *v2 = *(_OWORD *)a2;
  return 0;
}

void sub_1920054B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__fs::filesystem::__last_write_time(const std::__fs::filesystem::path *a1, std::__fs::filesystem::file_time_type __new_time, std::error_code *__ec)
{
  unint64_t v3;
  unint64_t v4;
  const std::__fs::filesystem::path *v6;
  unint64_t v7;
  const std::error_category *v8;
  const std::error_category *v9;
  __int128 v10;
  unint64_t v11;
  _QWORD v12[4];
  __n128 v13;

  v3 = *((_QWORD *)&__new_time.__d_.__rep_ + 1);
  v4 = *(_QWORD *)&__new_time.__d_.__rep_;
  v12[0] = "last_write_time";
  v12[1] = __ec;
  v12[2] = a1;
  v12[3] = 0;
  if (__ec)
  {
    __ec->__val_ = 0;
    __ec->__cat_ = std::system_category();
  }
  std::system_category();
  v10 = xmmword_192027420;
  if ((std::__fs::filesystem::detail::time_util<std::chrono::time_point<std::__fs::filesystem::_FilesystemClock,std::chrono::duration<__int128,std::ratio<1l,1000000000l>>>,long,timespec>::convert_to_timespec(&v11, v4, v3) & 1) == 0)
  {
    v9 = std::generic_category();
    v13.n128_u64[0] = 84;
    v13.n128_u64[1] = (unint64_t)v9;
LABEL_11:
    std::__fs::filesystem::detail::ErrorHandler<void>::report((uint64_t)v12, &v13);
    return;
  }
  if ((a1->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = a1;
  else
    v6 = (const std::__fs::filesystem::path *)a1->__pn_.__r_.__value_.__r.__words[0];
  if (utimensat(-2, (const char *)v6, (const timespec *)&v10, 0) == -1)
  {
    v7 = *__error();
    v8 = std::generic_category();
    v13.n128_u64[0] = v7;
    v13.n128_u64[1] = (unint64_t)v8;
    if ((_DWORD)v7)
      goto LABEL_11;
  }
}

uint64_t std::__fs::filesystem::detail::time_util<std::chrono::time_point<std::__fs::filesystem::_FilesystemClock,std::chrono::duration<__int128,std::ratio<1l,1000000000l>>>,long,timespec>::convert_to_timespec(unint64_t *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL4 v12;
  _BOOL4 v13;
  BOOL v14;
  uint64_t v15;

  v6 = __divti3();
  v9 = (__PAIR128__(v7, v6) * -1000000000 + __PAIR128__(a3, a2)) >> 64;
  v8 = -1000000000 * v6 + a2;
  v10 = v6 + (v9 >> 63);
  if (__CFADD__(v6, v9 >> 63))
    v11 = v7 + 1;
  else
    v11 = v7;
  v12 = __PAIR128__(v11, v10) < 0x8000000000000000;
  v13 = __PAIR128__(-1, 0x7FFFFFFFFFFFFFFFLL) < __PAIR128__(v11, v10);
  if (v11 >= 0)
    v13 = v12;
  if (!v13)
    return 0;
  if ((v9 & 0x8000000000000000) != 0)
  {
    if ((__int128)__PAIR128__(a3, a2) < (__int128)__PAIR128__(0x8000000000000000, 884105729))
      return 0;
    v14 = v6-- != 0;
    v7 = v14 + v7 - 1;
    v14 = __CFADD__(v8, 1000000000);
    v8 += 1000000000;
    if (v14)
      ++v9;
  }
  if (v6 < 0x8000000000000000)
    v15 = v7;
  else
    v15 = v7 + 1;
  if (!v15)
  {
    *a1 = v6;
    if (v8 >= 0x8000000000000000)
      ++v9;
    if (!v9)
    {
      a1[1] = v8;
      return 1;
    }
  }
  return 0;
}

void std::__fs::filesystem::__permissions(const std::__fs::filesystem::path *a1, std::__fs::filesystem::perms a2, std::__fs::filesystem::perm_options a3, std::error_code *a4)
{
  __int16 v5;
  mode_t v7;
  int v8;
  __n128 *p_st_mtimespec;
  __int16 v10;
  __int16 v11;
  const std::__fs::filesystem::path *v12;
  __darwin_time_t v13;
  const std::error_category *v14;
  _BYTE v15[4];
  __int16 v16;
  stat v17;

  v5 = a2;
  *(_QWORD *)&v17.st_uid = "permissions";
  *(_QWORD *)&v17.st_rdev = a4;
  v17.st_atimespec.tv_sec = (__darwin_time_t)a1;
  v17.st_atimespec.tv_nsec = 0;
  if (a4)
  {
    a4->__val_ = 0;
    a4->__cat_ = std::system_category();
  }
  v7 = v5 & 0xFFF;
  if ((a3 & 0xE) != 0)
  {
    v17.st_dev = 0;
    v17.st_ino = (__darwin_ino64_t)std::system_category();
    if ((a3 & 8) != 0)
      std::__fs::filesystem::detail::posix_lstat((const char **)&a1->__pn_.__r_.__value_.__l.__data_, (stat *)&v17.st_mtimespec, &v17, (uint64_t)v15);
    else
      std::__fs::filesystem::detail::posix_stat((const char **)&a1->__pn_.__r_.__value_.__l.__data_, (stat *)&v17.st_mtimespec, &v17, (uint64_t)v15);
    if (v17.st_dev)
    {
      p_st_mtimespec = (__n128 *)&v17;
LABEL_20:
      std::__fs::filesystem::detail::ErrorHandler<void>::report((uint64_t)&v17.st_uid, p_st_mtimespec);
      return;
    }
    v10 = v16 & ~v7;
    if ((a3 & 4) == 0)
      v10 = v7;
    v11 = v7 | v16;
    if ((a3 & 2) == 0)
      v11 = v10;
    v7 = v11 & 0xFFF;
    v8 = 32 * (v15[0] == 3);
  }
  else
  {
    v8 = 0;
  }
  if ((a1->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v12 = a1;
  else
    v12 = (const std::__fs::filesystem::path *)a1->__pn_.__r_.__value_.__r.__words[0];
  if (fchmodat(-2, (const char *)v12, v7, v8) == -1)
  {
    v13 = *__error();
    v14 = std::generic_category();
    v17.st_mtimespec.tv_sec = v13;
    v17.st_mtimespec.tv_nsec = (uint64_t)v14;
    p_st_mtimespec = (__n128 *)&v17.st_mtimespec;
    goto LABEL_20;
  }
}

BOOL std::__fs::filesystem::__remove(const std::__fs::filesystem::path *a1, std::error_code *__ec)
{
  const std::__fs::filesystem::path *v3;
  int v4;
  _QWORD v6[2];
  _QWORD v7[4];

  v7[0] = "remove";
  v7[1] = __ec;
  v7[2] = a1;
  v7[3] = 0;
  if (__ec)
  {
    __ec->__val_ = 0;
    __ec->__cat_ = std::system_category();
  }
  if ((a1->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v3 = a1;
  else
    v3 = (const std::__fs::filesystem::path *)a1->__pn_.__r_.__value_.__r.__words[0];
  v4 = remove(v3, __ec);
  if (v4 == -1 && *__error() != 2)
  {
    v6[0] = *__error();
    v6[1] = std::generic_category();
    std::__fs::filesystem::detail::ErrorHandler<BOOL>::report((uint64_t)v7, v6);
  }
  return v4 != -1;
}

uintmax_t std::__fs::filesystem::__remove_all(const std::__fs::filesystem::path *a1, std::error_code *__ec)
{
  std::error_code *v3;
  uintmax_t result;
  std::__fs::filesystem::path v5;
  std::error_code *v6;
  const std::__fs::filesystem::path *v7;
  uint64_t v8;

  v5.__pn_.__r_.__value_.__r.__words[2] = (std::string::size_type)"remove_all";
  v6 = __ec;
  v7 = a1;
  v8 = 0;
  if (__ec)
  {
    __ec->__val_ = 0;
    __ec->__cat_ = std::system_category();
  }
  LODWORD(v5.__pn_.__r_.__value_.__l.__data_) = 0;
  v5.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)std::system_category();
  if (LODWORD(v5.__pn_.__r_.__value_.__l.__data_))
    return std::__fs::filesystem::detail::ErrorHandler<unsigned long>::report((uint64_t)&v5.__pn_.__r_.__value_.__r.__words[2], &v5);
  return result;
}

uint64_t std::__fs::filesystem::`anonymous namespace'::remove_all_impl(std::__fs::filesystem::_anonymous_namespace_ *this, const char *a2, const std::__fs::filesystem::path *a3, std::error_code *a4)
{
  const char *v5;
  int v6;
  std::__fs::filesystem::_anonymous_namespace_ *v7;
  std::__fs::filesystem::_anonymous_namespace_ *v8;
  DIR *v9;
  DIR *v10;
  uint64_t v11;
  dirent *v12;
  const char *d_name;
  char file;
  size_t v15;
  uint64_t v16;
  std::error_code *v17;
  uint64_t v18;
  std::string::size_type v19;
  const std::error_category *v20;
  const std::error_category *v21;
  std::string::size_type v22;
  std::string::size_type v23;
  const std::error_category *v24;
  const char *v25;
  std::string::size_type v26;
  const std::error_category *v27;
  const std::error_category *v29;
  const char *v30;
  std::string __p;
  uint64_t v32;
  const std::error_category *v33;
  char v34;

  v5 = a2;
  v6 = (int)this;
  if (a2[23] < 0)
    a2 = *(const char **)a2;
  v7 = (std::__fs::filesystem::_anonymous_namespace_ *)openat((int)this, a2, 17826048, a4);
  if ((_DWORD)v7 == -1)
  {
    v19 = *__error();
    v20 = std::generic_category();
    a3->__pn_.__r_.__value_.__r.__words[0] = v19;
    a3->__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)v20;
    v32 = 2;
    v33 = std::generic_category();
    if ((*(unsigned int (**)(std::string::size_type, _QWORD, uint64_t *))(*(_QWORD *)a3->__pn_.__r_.__value_.__l.__size_
                                                                                   + 32))(a3->__pn_.__r_.__value_.__l.__size_, LODWORD(a3->__pn_.__r_.__value_.__l.__data_), &v32)|| ((unsigned int (*)(const std::error_category *, const std::__fs::filesystem::path *, _QWORD))v33->equivalent_0)(v33, a3, v32))
    {
      LODWORD(a3->__pn_.__r_.__value_.__l.__data_) = 0;
      v21 = std::system_category();
      v11 = 0;
LABEL_23:
      a3->__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)v21;
      return v11;
    }
    v29 = std::generic_category();
    v32 = 20;
    v33 = v29;
    if (!(*(unsigned int (**)(std::string::size_type, _QWORD, uint64_t *))(*(_QWORD *)a3->__pn_.__r_.__value_.__l.__size_
                                                                                    + 32))(a3->__pn_.__r_.__value_.__l.__size_, LODWORD(a3->__pn_.__r_.__value_.__l.__data_), &v32)&& (((uint64_t (*)(const std::error_category *, const std::__fs::filesystem::path *, _QWORD))v33->equivalent_0)(v33, a3, v32) & 1) == 0)
    {
      __p.__r_.__value_.__r.__words[0] = 62;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)std::generic_category();
      if (!(*(unsigned int (**)(std::string::size_type, _QWORD, std::string *))(*(_QWORD *)a3->__pn_.__r_.__value_.__l.__size_
                                                                                          + 32))(a3->__pn_.__r_.__value_.__l.__size_, LODWORD(a3->__pn_.__r_.__value_.__l.__data_), &__p)&& ((*(uint64_t (**)(std::string::size_type, const std::__fs::filesystem::path *, _QWORD))(*(_QWORD *)__p.__r_.__value_.__l.__size_ + 40))(__p.__r_.__value_.__l.__size_, a3, LODWORD(__p.__r_.__value_.__l.__data_)) & 1) == 0)
      {
        return 0;
      }
    }
    LODWORD(a3->__pn_.__r_.__value_.__l.__data_) = 0;
    a3->__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)std::system_category();
    if (v5[23] >= 0)
      v30 = v5;
    else
      v30 = *(const char **)v5;
    if (unlinkat(v6, v30, 0) != -1)
      return 1;
LABEL_22:
    v22 = *__error();
    v21 = std::generic_category();
    v11 = 0;
    a3->__pn_.__r_.__value_.__r.__words[0] = v22;
    goto LABEL_23;
  }
  v8 = v7;
  v9 = fdopendir((int)v7);
  if (!v9)
  {
    close((int)v8);
    goto LABEL_22;
  }
  v10 = v9;
  v11 = 0;
  while (1)
  {
    *__error() = 0;
    LODWORD(a3->__pn_.__r_.__value_.__l.__data_) = 0;
    a3->__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)std::system_category();
    v12 = readdir(v10);
    if (!v12)
      break;
    d_name = v12->d_name;
    file = std::__fs::filesystem::detail::get_file_type<dirent,unsigned char>((uint64_t)v12);
    v32 = (uint64_t)d_name;
    v15 = strlen(d_name);
    v16 = v15;
    v33 = (const std::error_category *)v15;
    v34 = file;
    if (v15 == 2)
    {
      if (memcmp(d_name, "..", 2uLL))
      {
LABEL_12:
        v16 = 2;
        goto LABEL_13;
      }
    }
    else if (v15 == 1)
    {
      if (*d_name != 46)
        goto LABEL_12;
    }
    else
    {
LABEL_13:
      if (LODWORD(a3->__pn_.__r_.__value_.__l.__data_) || !v16)
        goto LABEL_26;
      std::__fs::filesystem::path::path[abi:ne180100]<std::string_view,void>(&__p, (uint64_t)&v32);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v11 += v18;
    }
  }
  if (*__error())
  {
    v23 = *__error();
    v24 = std::generic_category();
    a3->__pn_.__r_.__value_.__r.__words[0] = v23;
    a3->__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)v24;
  }
LABEL_26:
  if (v5[23] >= 0)
    v25 = v5;
  else
    v25 = *(const char **)v5;
  if (unlinkat(v6, v25, 128) == -1)
  {
    v26 = *__error();
    v27 = std::generic_category();
    a3->__pn_.__r_.__value_.__r.__words[0] = v26;
    a3->__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)v27;
  }
  else
  {
    ++v11;
  }
  closedir(v10);
  return v11;
}

void sub_192005C08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  DIR *v14;

  closedir(v14);
  _Unwind_Resume(a1);
}

void std::__fs::filesystem::__rename(const std::__fs::filesystem::path *__from, const std::__fs::filesystem::path *__to, std::error_code *__ec)
{
  const std::__fs::filesystem::path *v5;
  const std::__fs::filesystem::path *v6;
  int v7;
  __n128 v8;
  _QWORD v9[4];

  v9[0] = "rename";
  v9[1] = __ec;
  v9[2] = __from;
  v9[3] = __to;
  if (__ec)
  {
    __ec->__val_ = 0;
    __ec->__cat_ = std::system_category();
  }
  if ((__from->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = __from;
  else
    v5 = (const std::__fs::filesystem::path *)__from->__pn_.__r_.__value_.__r.__words[0];
  if ((__to->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = __to;
  else
    v6 = (const std::__fs::filesystem::path *)__to->__pn_.__r_.__value_.__r.__words[0];
  rename(v5, v6, __ec);
  if (v7 == -1)
  {
    v8.n128_u64[0] = *__error();
    v8.n128_u64[1] = (unint64_t)std::generic_category();
    std::__fs::filesystem::detail::ErrorHandler<void>::report((uint64_t)v9, &v8);
  }
}

void std::__fs::filesystem::__resize_file(const std::__fs::filesystem::path *a1, uintmax_t __size, std::error_code *a3)
{
  const std::__fs::filesystem::path *v5;
  __n128 v6;
  _QWORD v7[4];

  v7[0] = "resize_file";
  v7[1] = a3;
  v7[2] = a1;
  v7[3] = 0;
  if (a3)
  {
    a3->__val_ = 0;
    a3->__cat_ = std::system_category();
  }
  if ((a1->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = a1;
  else
    v5 = (const std::__fs::filesystem::path *)a1->__pn_.__r_.__value_.__r.__words[0];
  if (truncate((const char *)v5, __size) == -1)
  {
    v6.n128_u64[0] = *__error();
    v6.n128_u64[1] = (unint64_t)std::generic_category();
    std::__fs::filesystem::detail::ErrorHandler<void>::report((uint64_t)v7, &v6);
  }
}

std::__fs::filesystem::space_info *__cdecl std::__fs::filesystem::__space(std::__fs::filesystem::space_info *__return_ptr retstr, const std::__fs::filesystem::path *a2, std::error_code *__ec)
{
  const std::__fs::filesystem::path *v5;
  std::__fs::filesystem::space_info *result;
  fsblkcnt_t f_blocks;
  unint64_t f_frsize;
  _BOOL4 v9;
  fsblkcnt_t f_bfree;
  _BOOL4 v11;
  fsblkcnt_t f_bavail;
  _BOOL4 v13;
  __n128 v14;
  statvfs v15;
  _QWORD v16[4];

  v16[0] = "space";
  v16[1] = __ec;
  v16[2] = a2;
  v16[3] = 0;
  if (__ec)
  {
    __ec->__val_ = 0;
    __ec->__cat_ = std::system_category();
  }
  memset(&v15, 0, sizeof(v15));
  if ((a2->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = a2;
  else
    v5 = (const std::__fs::filesystem::path *)a2->__pn_.__r_.__value_.__r.__words[0];
  result = (std::__fs::filesystem::space_info *)statvfs((const char *)v5, &v15);
  if ((_DWORD)result == -1)
  {
    v14.n128_u64[0] = *__error();
    v14.n128_u64[1] = (unint64_t)std::generic_category();
    std::__fs::filesystem::detail::ErrorHandler<void>::report((uint64_t)v16, &v14);
    retstr->free = -1;
    retstr->available = -1;
    retstr->capacity = -1;
  }
  else
  {
    f_blocks = v15.f_blocks;
    f_frsize = v15.f_frsize;
    v9 = !is_mul_ok(v15.f_blocks, v15.f_frsize);
    retstr->capacity = v15.f_blocks * v15.f_frsize;
    if (!f_blocks || v9)
      retstr->capacity = -1;
    f_bfree = v15.f_bfree;
    v11 = !is_mul_ok(v15.f_bfree, f_frsize);
    retstr->free = v15.f_bfree * f_frsize;
    if (!f_bfree || v11)
      retstr->free = -1;
    f_bavail = v15.f_bavail;
    v13 = !is_mul_ok(v15.f_bavail, f_frsize);
    retstr->available = v15.f_bavail * f_frsize;
    if (!f_bavail || v13)
      retstr->available = -1;
  }
  return result;
}

std::__fs::filesystem::file_status std::__fs::filesystem::__status(const std::__fs::filesystem::path *a1, std::error_code *__ec)
{
  uint64_t v2;
  std::__fs::filesystem::file_status v3;
  stat v4;

  std::__fs::filesystem::detail::posix_stat((const char **)&a1->__pn_.__r_.__value_.__l.__data_, &v4, (stat *)__ec, v2);
  return v3;
}

std::__fs::filesystem::file_status std::__fs::filesystem::__symlink_status(const std::__fs::filesystem::path *a1, std::error_code *__ec)
{
  uint64_t v2;
  std::__fs::filesystem::file_status v3;
  stat v4;

  std::__fs::filesystem::detail::posix_lstat((const char **)&a1->__pn_.__r_.__value_.__l.__data_, &v4, (stat *)__ec, v2);
  return v3;
}

std::__fs::filesystem::path *__cdecl std::__fs::filesystem::__temp_directory_path(std::__fs::filesystem::path *__return_ptr retstr, std::error_code *__ec)
{
  uint64_t v3;
  const char *v4;
  char *v5;
  std::__fs::filesystem::path *result;
  uid_t *v7;
  uid_t *p_st_uid;
  _BYTE v9[8];
  stat v10;

  v10.st_mtimespec.tv_sec = (__darwin_time_t)"temp_directory_path";
  v10.st_mtimespec.tv_nsec = (uint64_t)__ec;
  v10.st_ctimespec.tv_sec = 0;
  v10.st_ctimespec.tv_nsec = 0;
  if (__ec)
  {
    __ec->__val_ = 0;
    __ec->__cat_ = std::system_category();
  }
  v3 = 0;
  v4 = "/tmp";
  while (1)
  {
    v5 = getenv((&off_1E2E5C848)[v3]);
    if (v5)
      break;
    if (++v3 == 4)
      goto LABEL_8;
  }
  v4 = v5;
LABEL_8:
  v10.st_atimespec.tv_nsec = (uint64_t)v4;
  std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>((std::string *)&v10.st_uid, (char **)&v10.st_atimespec.tv_nsec);
  v10.st_dev = 0;
  v10.st_ino = (__darwin_ino64_t)std::system_category();
  std::__fs::filesystem::detail::posix_stat((const char **)&v10.st_uid, (stat *)&v10.st_birthtimespec, &v10, (uint64_t)v9);
  if (v9[0] == 2)
  {
    *(_OWORD *)&retstr->__pn_.__r_.__value_.__l.__data_ = *(_OWORD *)&v10.st_uid;
    retstr->__pn_.__r_.__value_.__r.__words[2] = v10.st_atimespec.tv_sec;
    memset(&v10.st_uid, 0, 24);
  }
  else if (v9[0])
  {
    LODWORD(v10.st_birthtimespec.tv_sec) = 20;
    p_st_uid = &v10.st_uid;
    if (v10.st_atimespec.tv_sec < 0)
      LOBYTE(p_st_uid) = v10.st_uid;
    std::__fs::filesystem::detail::ErrorHandler<std::__fs::filesystem::path>::report((uint64_t)&v10.st_mtimespec, (unsigned int *)&v10.st_birthtimespec, (std::__fs::filesystem::detail *)"path \"%s\" is not a directory", retstr, (char)p_st_uid);
  }
  else
  {
    v7 = &v10.st_uid;
    if (v10.st_atimespec.tv_sec < 0)
      LOBYTE(v7) = v10.st_uid;
    std::__fs::filesystem::detail::ErrorHandler<std::__fs::filesystem::path>::report((uint64_t)&v10.st_mtimespec, (__n128 *)&v10, (std::__fs::filesystem::detail *)"cannot access path \"%s\"", retstr, (char)v7);
  }
  if (SHIBYTE(v10.st_atimespec.tv_sec) < 0)
    operator delete(*(void **)&v10.st_uid);
  return result;
}

void sub_192006050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__fs::filesystem::detail::ErrorHandler<std::__fs::filesystem::path>::report(uint64_t a1@<X0>, unsigned int *a2@<X1>, std::__fs::filesystem::detail *a3@<X2>, _QWORD *a4@<X8>, char a5)
{
  __n128 v8;
  char *v9;

  v9 = &a5;
  v8.n128_u64[0] = *a2;
  v8.n128_u64[1] = (unint64_t)std::generic_category();
  std::__fs::filesystem::detail::ErrorHandler<std::__fs::filesystem::path>::report_impl(a1, &v8, a3, &a5);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
}

void sub_1920060D8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_rethrow();
}

void sub_1920060E4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

std::__fs::filesystem::path *__cdecl std::__fs::filesystem::__weakly_canonical(std::__fs::filesystem::path *__return_ptr retstr, const std::__fs::filesystem::path *__p, std::error_code *__ec)
{
  std::string::size_type size;
  __darwin_time_t v7;
  const std::__fs::filesystem::path *v8;
  std::__fs::filesystem::path *v9;
  uint64_t tv_nsec;
  __darwin_time_t tv_sec;
  __darwin_time_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  __darwin_time_t v18;
  unint64_t v19;
  char *v20;
  const char **v21;
  char *v22;
  __darwin_time_t v23;
  __darwin_time_t v24;
  std::__fs::filesystem::path *result;
  void *v26;
  uint64_t v27;
  std::__fs::filesystem::path *v28;
  stat v29;
  _QWORD v30[4];
  stat v31;

  v30[0] = "weakly_canonical";
  v30[1] = __ec;
  v30[2] = __p;
  v30[3] = 0;
  if (__ec)
  {
    __ec->__val_ = 0;
    __ec->__cat_ = std::system_category();
  }
  if (SHIBYTE(__p->__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __p->__pn_.__r_.__value_.__l.__size_;
    if (size)
      goto LABEL_5;
LABEL_45:
    std::__fs::filesystem::path::path[abi:ne180100]<char [1],void>((std::string *)&v31, "");
    result = std::__fs::filesystem::__canonical(retstr, (const std::__fs::filesystem::path *)&v31, __ec);
    if ((SHIBYTE(v31.st_gid) & 0x80000000) == 0)
      return result;
    v26 = *(void **)&v31.st_dev;
    goto LABEL_68;
  }
  size = HIBYTE(__p->__pn_.__r_.__value_.__r.__words[2]);
  if (!*((_BYTE *)&__p->__pn_.__r_.__value_.__s + 23))
    goto LABEL_45;
LABEL_5:
  memset(&v29.st_size, 0, 48);
  v28 = retstr;
  std::string::reserve((std::string *)&v29.st_size, size);
  v7 = HIBYTE(__p->__pn_.__r_.__value_.__r.__words[2]);
  if ((v7 & 0x80u) == 0)
    v8 = __p;
  else
    v8 = (const std::__fs::filesystem::path *)__p->__pn_.__r_.__value_.__r.__words[0];
  if ((v7 & 0x80u) != 0)
    v7 = __p->__pn_.__r_.__value_.__l.__size_;
  v29.st_mtimespec.tv_nsec = (uint64_t)v8;
  v29.st_ctimespec.tv_sec = v7;
  v29.st_ctimespec.tv_nsec = 0;
  v29.st_birthtimespec.tv_sec = 0;
  LOBYTE(v29.st_birthtimespec.tv_nsec) = 6;
  std::__fs::filesystem::parser::PathParser::decrement((unint64_t *)&v29.st_mtimespec.tv_nsec);
  memset(&v29.st_atimespec, 0, 24);
  if (LOBYTE(v29.st_birthtimespec.tv_nsec) == 1)
    goto LABEL_51;
  while (1)
  {
    if ((__p->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v9 = (std::__fs::filesystem::path *)__p;
    else
      v9 = (std::__fs::filesystem::path *)__p->__pn_.__r_.__value_.__r.__words[0];
    tv_nsec = v29.st_ctimespec.tv_nsec;
    tv_sec = v29.st_birthtimespec.tv_sec;
    if (SHIBYTE(v29.st_flags) < 0)
    {
      *(_BYTE *)v29.st_size = 0;
      v29.st_blocks = 0;
    }
    else
    {
      LOBYTE(v29.st_size) = 0;
      HIBYTE(v29.st_flags) = 0;
    }
    std::string::append[abi:ne180100]<char const*,0>((std::string *)&v29.st_size, (char *)v9, (char *)(tv_sec + tv_nsec));
    v29.st_dev = 0;
    v29.st_ino = (__darwin_ino64_t)std::system_category();
    std::__fs::filesystem::detail::posix_stat((const char **)&v29.st_size, &v31, &v29, (uint64_t)&v29.st_rdev);
    if (!LOBYTE(v29.st_rdev))
    {
      std::__fs::filesystem::detail::ErrorHandler<std::__fs::filesystem::path>::report((uint64_t)v30, (__n128 *)&v29, v28);
      goto LABEL_62;
    }
    if (LOBYTE(v29.st_rdev) != 255)
      break;
    v12 = 0;
    v13 = "";
    if (((1 << SLOBYTE(v29.st_birthtimespec.tv_nsec)) & 0x62) == 0)
    {
      if (((1 << SLOBYTE(v29.st_birthtimespec.tv_nsec)) & 0x14) != 0)
      {
        v13 = (const char *)v29.st_ctimespec.tv_nsec;
        v12 = v29.st_birthtimespec.tv_sec;
      }
      else
      {
        if (*(_BYTE *)v29.st_ctimespec.tv_nsec == 92)
          v13 = "\\";
        else
          v13 = "/";
        v12 = 1;
      }
    }
    v14 = v29.st_atimespec.tv_nsec;
    if (v29.st_atimespec.tv_nsec >= (unint64_t)v29.st_mtimespec.tv_sec)
    {
      v16 = (v29.st_atimespec.tv_nsec - v29.st_atimespec.tv_sec) >> 4;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 60)
        std::vector<std::string_view>::__throw_length_error[abi:ne180100]();
      v18 = v29.st_mtimespec.tv_sec - v29.st_atimespec.tv_sec;
      if ((v29.st_mtimespec.tv_sec - v29.st_atimespec.tv_sec) >> 3 > v17)
        v17 = v18 >> 3;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0)
        v19 = 0xFFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
        v20 = (char *)std::allocator<std::string_view>::allocate_at_least[abi:ne180100]((uint64_t)&v29.st_mtimespec, v19);
      else
        v20 = 0;
      v21 = (const char **)&v20[16 * v16];
      *v21 = v13;
      v21[1] = (const char *)v12;
      v23 = v29.st_atimespec.tv_sec;
      v22 = (char *)v29.st_atimespec.tv_nsec;
      v24 = (__darwin_time_t)v21;
      if (v29.st_atimespec.tv_nsec != v29.st_atimespec.tv_sec)
      {
        do
        {
          *(_OWORD *)(v24 - 16) = *((_OWORD *)v22 - 1);
          v24 -= 16;
          v22 -= 16;
        }
        while (v22 != (char *)v23);
        v22 = (char *)v29.st_atimespec.tv_sec;
      }
      v15 = (uint64_t)(v21 + 2);
      v29.st_atimespec.tv_sec = v24;
      v29.st_atimespec.tv_nsec = (uint64_t)(v21 + 2);
      v29.st_mtimespec.tv_sec = (__darwin_time_t)&v20[16 * v19];
      if (v22)
        operator delete(v22);
    }
    else
    {
      *(_QWORD *)v29.st_atimespec.tv_nsec = v13;
      *(_QWORD *)(v14 + 8) = v12;
      v15 = v14 + 16;
    }
    v29.st_atimespec.tv_nsec = v15;
    std::__fs::filesystem::parser::PathParser::decrement((unint64_t *)&v29.st_mtimespec.tv_nsec);
    if (LOBYTE(v29.st_birthtimespec.tv_nsec) == 1)
      goto LABEL_51;
  }
  std::__fs::filesystem::__canonical((std::__fs::filesystem::path *)&v31, (const std::__fs::filesystem::path *)&v29.st_size, __ec);
  if (SHIBYTE(v29.st_qspare[1]) < 0)
    operator delete(*(void **)&v29.st_gen);
  *(_OWORD *)&v29.st_gen = *(_OWORD *)&v31.st_dev;
  v29.st_qspare[1] = *(_QWORD *)&v31.st_uid;
  if (LOBYTE(v29.st_birthtimespec.tv_nsec) == 1)
  {
LABEL_51:
    std::__fs::filesystem::path::path[abi:ne180100]<char [1],void>((std::string *)&v29, "");
    std::__fs::filesystem::__canonical((std::__fs::filesystem::path *)&v31, (const std::__fs::filesystem::path *)&v29, __ec);
    if (SHIBYTE(v29.st_qspare[1]) < 0)
      operator delete(*(void **)&v29.st_gen);
    *(_OWORD *)&v29.st_gen = *(_OWORD *)&v31.st_dev;
    v29.st_qspare[1] = *(_QWORD *)&v31.st_uid;
    HIBYTE(v31.st_gid) = 0;
    LOBYTE(v31.st_dev) = 0;
    if (SHIBYTE(v29.st_gid) < 0)
      operator delete(*(void **)&v29.st_dev);
  }
  if (__ec)
  {
    __ec->__val_ = 0;
    __ec->__cat_ = std::system_category();
  }
  v27 = v29.st_atimespec.tv_nsec;
  if (v29.st_atimespec.tv_sec == v29.st_atimespec.tv_nsec)
  {
    *(_OWORD *)&v28->__pn_.__r_.__value_.__l.__data_ = *(_OWORD *)&v29.st_gen;
    v28->__pn_.__r_.__value_.__r.__words[2] = v29.st_qspare[1];
    memset(&v29.st_gen, 0, 24);
  }
  else
  {
    while (v27 != v29.st_atimespec.tv_sec)
    {
      v27 -= 16;
      std::__fs::filesystem::path::append[abi:ne180100]<std::string_view>((std::string *)&v29.st_gen, v27);
    }
    std::__fs::filesystem::path::lexically_normal(v28, (const std::__fs::filesystem::path *)&v29.st_gen);
  }
LABEL_62:
  result = (std::__fs::filesystem::path *)v29.st_atimespec.tv_sec;
  if (v29.st_atimespec.tv_sec)
  {
    v29.st_atimespec.tv_nsec = v29.st_atimespec.tv_sec;
    operator delete((void *)v29.st_atimespec.tv_sec);
  }
  if (SHIBYTE(v29.st_flags) < 0)
    operator delete((void *)v29.st_size);
  if (SHIBYTE(v29.st_qspare[1]) < 0)
  {
    v26 = *(void **)&v29.st_gen;
LABEL_68:
    operator delete(v26);
  }
  return result;
}

void sub_192006520(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (__p)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  if (a36 < 0)
    operator delete(a31);
  _Unwind_Resume(exception_object);
}

uint64_t std::__fs::filesystem::detail::FileDescriptor::close(std::__fs::filesystem::detail::FileDescriptor *this)
{
  uint64_t result;

  result = *((unsigned int *)this + 2);
  if ((_DWORD)result != -1)
    result = close(result);
  *((_DWORD *)this + 2) = -1;
  return result;
}

void std::vector<std::string_view>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void *std::allocator<std::string_view>::allocate_at_least[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a2);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char *,void>(std::string *this, char **a2)
{
  char *v3;
  char *v4;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  v3 = *a2;
  v4 = v3 - 1;
  while (*++v4)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, v3, v4);
  return this;
}

void sub_192006670(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

const std::error_category *std::__fs::filesystem::detail::FileDescriptor::create<int>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  const char *v8;
  const std::error_category *result;
  int v10;
  uint64_t v11;

  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = std::system_category();
  v8 = (const char *)a1;
  if (*(char *)(a1 + 23) < 0)
    v8 = *(const char **)a1;
  result = (const std::error_category *)open(v8, a3);
  v10 = (int)result;
  if ((_DWORD)result == -1)
  {
    v11 = *__error();
    result = std::generic_category();
    *(_QWORD *)a2 = v11;
    *(_QWORD *)(a2 + 8) = result;
  }
  *(_QWORD *)a4 = a1;
  *(_DWORD *)(a4 + 8) = v10;
  *(_BYTE *)(a4 + 160) = 0;
  *(_DWORD *)(a4 + 164) = 0xFFFF;
  return result;
}

void std::__fs::filesystem::detail::FileDescriptor::refresh_status(std::__fs::filesystem::detail::FileDescriptor *this@<X0>, std::error_code *a2@<X1>, uint64_t *a3@<X8>)
{
  stat *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::error_code v19;
  _QWORD v20[4];

  *((_OWORD *)this + 1) = 0u;
  v6 = (stat *)((char *)this + 16);
  *((_QWORD *)this + 20) = 0xFFFF00000000;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  v19.__val_ = 0;
  v19.__cat_ = std::system_category();
  if (fstat(v6[-1].st_qspare[1], v6) != -1)
  {
    *a2 = v19;
LABEL_3:
    v7 = *((unsigned __int16 *)this + 10);
    v8 = (v7 >> 12) ^ 8;
    if ((_DWORD)v8 == 15)
      v9 = 8;
    else
      v9 = qword_1920274B8[v8];
    v12 = (v7 & 0xFFF) << 32;
    goto LABEL_11;
  }
  v10 = *__error();
  *(_QWORD *)&v19.__val_ = v10;
  v19.__cat_ = std::generic_category();
  v11 = *(_QWORD *)this;
  *a2 = v19;
  if (!(_DWORD)v10)
    goto LABEL_3;
  v12 = 0xFFFF00000000;
  v9 = 255;
  if ((_DWORD)v10 != 2 && (_DWORD)v10 != 20)
  {
    v20[0] = "posix_stat";
    v20[1] = a2;
    v20[2] = v11;
    v20[3] = 0;
    a2->__val_ = 0;
    a2->__cat_ = std::system_category();
    std::__fs::filesystem::detail::ErrorHandler<void>::report((uint64_t)v20, (__n128 *)&v19, (std::__fs::filesystem::detail *)"failed to determine attributes for the specified path", v13, v14, v15, v16, v17, v19.__val_);
    v9 = 0;
    v12 = 0xFFFF00000000;
  }
LABEL_11:
  v18 = v9 | v12;
  *((_QWORD *)this + 20) = v18;
  *a3 = v18;
}

const std::error_category *std::__fs::filesystem::detail::FileDescriptor::create<int,unsigned short>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  const char *v10;
  const std::error_category *result;
  int v12;
  uint64_t v13;

  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = std::system_category();
  v10 = (const char *)a1;
  if (*(char *)(a1 + 23) < 0)
    v10 = *(const char **)a1;
  result = (const std::error_category *)open(v10, a3, a4);
  v12 = (int)result;
  if ((_DWORD)result == -1)
  {
    v13 = *__error();
    result = std::generic_category();
    *(_QWORD *)a2 = v13;
    *(_QWORD *)(a2 + 8) = result;
  }
  *(_QWORD *)a5 = a1;
  *(_DWORD *)(a5 + 8) = v12;
  *(_BYTE *)(a5 + 160) = 0;
  *(_DWORD *)(a5 + 164) = 0xFFFF;
  return result;
}

__n128 std::__fs::filesystem::detail::ErrorHandler<BOOL>::report_impl(uint64_t a1, __n128 *a2, std::__fs::filesystem::detail *a3, va_list a4)
{
  __n128 *v4;
  __n128 result;
  std::string *p_p;
  std::string::size_type size;
  std::string *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  std::string __p;
  std::string v18;
  std::string v19;
  std::string v20;
  __int128 v21;
  std::string::size_type v22;

  v4 = *(__n128 **)(a1 + 8);
  if (!v4)
  {
    std::string::basic_string[abi:ne180100]<0>(&v18, "in ");
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(*(char **)a1, &v18, &v19);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(": ", &v19, &v20);
    std::__fs::filesystem::detail::vformat_string(a3, a4, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v10 = std::string::append(&v20, (const std::string::value_type *)p_p, size);
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v22 = v10->__r_.__value_.__r.__words[2];
    v21 = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_QWORD *)(a1 + 24);
    v14 = v12 != 0;
    if (v13)
      ++v14;
    if (v14)
    {
      if (v14 == 1)
        std::__fs::filesystem::__throw_filesystem_error[abi:ne180100]<std::string &,std::__fs::filesystem::path const&,std::error_code const&>((uint64_t)&v21, v12, a2);
      std::__fs::filesystem::__throw_filesystem_error[abi:ne180100]<std::string &,std::__fs::filesystem::path const&,std::__fs::filesystem::path const&,std::error_code const&>((uint64_t)&v21, v12, v13, a2);
    }
    std::__fs::filesystem::__throw_filesystem_error[abi:ne180100]<std::string &,std::error_code const&>((uint64_t)&v21, a2);
  }
  result = *a2;
  *v4 = *a2;
  return result;
}

void sub_192006A3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  if (*(char *)(v30 - 25) < 0)
    operator delete(*(void **)(v30 - 48));
  _Unwind_Resume(exception_object);
}

__n128 std::__fs::filesystem::detail::ErrorHandler<std::__fs::filesystem::path>::report_impl(uint64_t a1, __n128 *a2, std::__fs::filesystem::detail *a3, va_list a4)
{
  __n128 *v4;
  __n128 result;
  std::string *p_p;
  std::string::size_type size;
  std::string *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  std::string __p;
  std::string v18;
  std::string v19;
  std::string v20;
  __int128 v21;
  std::string::size_type v22;

  v4 = *(__n128 **)(a1 + 8);
  if (!v4)
  {
    std::string::basic_string[abi:ne180100]<0>(&v18, "in ");
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(*(char **)a1, &v18, &v19);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(": ", &v19, &v20);
    std::__fs::filesystem::detail::vformat_string(a3, a4, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v10 = std::string::append(&v20, (const std::string::value_type *)p_p, size);
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v22 = v10->__r_.__value_.__r.__words[2];
    v21 = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_QWORD *)(a1 + 24);
    v14 = v12 != 0;
    if (v13)
      ++v14;
    if (v14)
    {
      if (v14 == 1)
        std::__fs::filesystem::__throw_filesystem_error[abi:ne180100]<std::string &,std::__fs::filesystem::path const&,std::error_code const&>((uint64_t)&v21, v12, a2);
      std::__fs::filesystem::__throw_filesystem_error[abi:ne180100]<std::string &,std::__fs::filesystem::path const&,std::__fs::filesystem::path const&,std::error_code const&>((uint64_t)&v21, v12, v13, a2);
    }
    std::__fs::filesystem::__throw_filesystem_error[abi:ne180100]<std::string &,std::error_code const&>((uint64_t)&v21, a2);
  }
  result = *a2;
  *v4 = *a2;
  return result;
}

void sub_192006C08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  if (*(char *)(v30 - 25) < 0)
    operator delete(*(void **)(v30 - 48));
  _Unwind_Resume(exception_object);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(std::string *a1, char *a2)
{
  uint64_t v3;
  BOOL v4;
  uint64_t v5;

  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  LODWORD(v3) = a2[23];
  v4 = (int)v3 < 0;
  v5 = *((_QWORD *)a2 + 1);
  if ((int)v3 < 0)
    a2 = *(char **)a2;
  v3 = v3;
  if (v4)
    v3 = v5;
  std::string::append[abi:ne180100]<char const*,0>(a1, a2, &a2[v3]);
  return a1;
}

void sub_192006CC8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(std::string *this, char **a2)
{
  char *v3;
  char *v4;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  v3 = *a2;
  v4 = v3 - 1;
  while (*++v4)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, v3, v4);
  return this;
}

void sub_192006D24(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char [1],void>(std::string *this, char *a2)
{
  char *v3;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  v3 = a2 - 1;
  while (*++v3)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, a2, v3);
  return this;
}

void sub_192006D7C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::future<void>::get(uint64_t result)
{
  unint64_t *v1;
  unint64_t v2;

  v1 = (unint64_t *)(result + 8);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (!v2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

void std::num_get<char,std::istreambuf_iterator<char>>::do_get(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;

  v1 = (unint64_t *)(a1 + 8);
  do
    OUTLINED_FUNCTION_1(v1);
  while (v4);
  if (!v3)
    OUTLINED_FUNCTION_0(v2);
}

{
  unint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;

  v1 = (unint64_t *)(a1 + 8);
  do
    OUTLINED_FUNCTION_1(v1);
  while (v4);
  if (!v3)
    OUTLINED_FUNCTION_0(v2);
}

void std::num_get<wchar_t,std::istreambuf_iterator<wchar_t>>::do_get(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;

  v1 = (unint64_t *)(a1 + 8);
  do
    OUTLINED_FUNCTION_1(v1);
  while (v4);
  if (!v3)
    OUTLINED_FUNCTION_0(v2);
}

{
  unint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;

  v1 = (unint64_t *)(a1 + 8);
  do
    OUTLINED_FUNCTION_1(v1);
  while (v4);
  if (!v3)
    OUTLINED_FUNCTION_0(v2);
}

void std::num_put<char,std::ostreambuf_iterator<char>>::do_put(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;

  v1 = (unint64_t *)(a1 + 8);
  do
    OUTLINED_FUNCTION_1(v1);
  while (v4);
  if (!v3)
    OUTLINED_FUNCTION_0(v2);
}

{
  unint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;

  v1 = (unint64_t *)(a1 + 8);
  do
    OUTLINED_FUNCTION_1(v1);
  while (v4);
  if (!v3)
    OUTLINED_FUNCTION_0(v2);
}

void std::num_put<char,std::ostreambuf_iterator<char>>::__do_put_integral[abi:ne180100]<long>(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;

  v1 = (unint64_t *)(a1 + 8);
  do
    OUTLINED_FUNCTION_1(v1);
  while (v4);
  if (!v3)
    OUTLINED_FUNCTION_0(v2);
}

void std::num_put<char,std::ostreambuf_iterator<char>>::__do_put_integral[abi:ne180100]<long long>(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;

  v1 = (unint64_t *)(a1 + 8);
  do
    OUTLINED_FUNCTION_1(v1);
  while (v4);
  if (!v3)
    OUTLINED_FUNCTION_0(v2);
}

void std::num_put<char,std::ostreambuf_iterator<char>>::__do_put_integral[abi:ne180100]<unsigned long>(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;

  v1 = (unint64_t *)(a1 + 8);
  do
    OUTLINED_FUNCTION_1(v1);
  while (v4);
  if (!v3)
    OUTLINED_FUNCTION_0(v2);
}

void std::num_put<char,std::ostreambuf_iterator<char>>::__do_put_integral[abi:ne180100]<unsigned long long>(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;

  v1 = (unint64_t *)(a1 + 8);
  do
    OUTLINED_FUNCTION_1(v1);
  while (v4);
  if (!v3)
    OUTLINED_FUNCTION_0(v2);
}

void std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t>>::do_put(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;

  v1 = (unint64_t *)(a1 + 8);
  do
    OUTLINED_FUNCTION_1(v1);
  while (v4);
  if (!v3)
    OUTLINED_FUNCTION_0(v2);
}

{
  unint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;

  v1 = (unint64_t *)(a1 + 8);
  do
    OUTLINED_FUNCTION_1(v1);
  while (v4);
  if (!v3)
    OUTLINED_FUNCTION_0(v2);
}

void std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t>>::__do_put_integral[abi:ne180100]<long>(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;

  v1 = (unint64_t *)(a1 + 8);
  do
    OUTLINED_FUNCTION_1(v1);
  while (v4);
  if (!v3)
    OUTLINED_FUNCTION_0(v2);
}

void std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t>>::__do_put_integral[abi:ne180100]<long long>(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;

  v1 = (unint64_t *)(a1 + 8);
  do
    OUTLINED_FUNCTION_1(v1);
  while (v4);
  if (!v3)
    OUTLINED_FUNCTION_0(v2);
}

void std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t>>::__do_put_integral[abi:ne180100]<unsigned long>(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;

  v1 = (unint64_t *)(a1 + 8);
  do
    OUTLINED_FUNCTION_1(v1);
  while (v4);
  if (!v3)
    OUTLINED_FUNCTION_0(v2);
}

void std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t>>::__do_put_integral[abi:ne180100]<unsigned long long>(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;

  v1 = (unint64_t *)(a1 + 8);
  do
    OUTLINED_FUNCTION_1(v1);
  while (v4);
  if (!v3)
    OUTLINED_FUNCTION_0(v2);
}

void std::time_get<char,std::istreambuf_iterator<char>>::get(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;

  v1 = (unint64_t *)(a1 + 8);
  do
    OUTLINED_FUNCTION_1(v1);
  while (v4);
  if (!v3)
    OUTLINED_FUNCTION_0(v2);
}

void std::time_get<char,std::istreambuf_iterator<char>>::do_get_weekday(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;

  v1 = (unint64_t *)(a1 + 8);
  do
    OUTLINED_FUNCTION_1(v1);
  while (v4);
  if (!v3)
    OUTLINED_FUNCTION_0(v2);
}

void std::time_get<char,std::istreambuf_iterator<char>>::do_get_monthname(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;

  v1 = (unint64_t *)(a1 + 8);
  do
    OUTLINED_FUNCTION_1(v1);
  while (v4);
  if (!v3)
    OUTLINED_FUNCTION_0(v2);
}

void std::time_get<char,std::istreambuf_iterator<char>>::do_get_year(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;

  v1 = (unint64_t *)(a1 + 8);
  do
    OUTLINED_FUNCTION_1(v1);
  while (v4);
  if (!v3)
    OUTLINED_FUNCTION_0(v2);
}

void std::time_get<char,std::istreambuf_iterator<char>>::do_get(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;

  v1 = (unint64_t *)(a1 + 8);
  do
    OUTLINED_FUNCTION_1(v1);
  while (v4);
  if (!v3)
    OUTLINED_FUNCTION_0(v2);
}

void std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::get(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;

  v1 = (unint64_t *)(a1 + 8);
  do
    OUTLINED_FUNCTION_1(v1);
  while (v4);
  if (!v3)
    OUTLINED_FUNCTION_0(v2);
}

void std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::do_get_weekday(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;

  v1 = (unint64_t *)(a1 + 8);
  do
    OUTLINED_FUNCTION_1(v1);
  while (v4);
  if (!v3)
    OUTLINED_FUNCTION_0(v2);
}

void std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::do_get_monthname(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;

  v1 = (unint64_t *)(a1 + 8);
  do
    OUTLINED_FUNCTION_1(v1);
  while (v4);
  if (!v3)
    OUTLINED_FUNCTION_0(v2);
}

void std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::do_get_year(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;

  v1 = (unint64_t *)(a1 + 8);
  do
    OUTLINED_FUNCTION_1(v1);
  while (v4);
  if (!v3)
    OUTLINED_FUNCTION_0(v2);
}

void std::time_get<wchar_t,std::istreambuf_iterator<wchar_t>>::do_get(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;

  v1 = (unint64_t *)(a1 + 8);
  do
    OUTLINED_FUNCTION_1(v1);
  while (v4);
  if (!v3)
    OUTLINED_FUNCTION_0(v2);
}

void std::time_put<char,std::ostreambuf_iterator<char>>::put(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;

  v1 = (unint64_t *)(a1 + 8);
  do
    OUTLINED_FUNCTION_1(v1);
  while (v4);
  if (!v3)
    OUTLINED_FUNCTION_0(v2);
}

void std::time_put<wchar_t,std::ostreambuf_iterator<wchar_t>>::put(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;

  v1 = (unint64_t *)(a1 + 8);
  do
    OUTLINED_FUNCTION_1(v1);
  while (v4);
  if (!v3)
    OUTLINED_FUNCTION_0(v2);
}

void std::locale::__imp::__imp(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  v5 = 0;
  v6 = 0;
  do
  {
    v7 = *(_QWORD *)(a1 + 8 * v5);
    if (v7)
    {
      v8 = (unint64_t *)(v7 + 8);
      do
        OUTLINED_FUNCTION_1(v8);
      while (v11);
      if (!v10)
        OUTLINED_FUNCTION_0(v9);
    }
    a1 = *a3;
    v5 = ++v6;
  }
  while (v6 < (unint64_t)((*a2 - *a3) >> 3));
  OUTLINED_FUNCTION_4();
}

void std::moneypunct_byname<char,false>::moneypunct_byname[abi:ne180100]()
{
  void **v0;
  uint64_t v1;
  uint64_t v2;
  void **v3;
  int v4;

  OUTLINED_FUNCTION_3();
  if (v4 < 0)
    OUTLINED_FUNCTION_6(v2, v3);
  if (*(char *)(v1 + 71) < 0)
    OUTLINED_FUNCTION_5();
  if (*(char *)(v1 + 47) < 0)
    OUTLINED_FUNCTION_2(*v0);
  else
    OUTLINED_FUNCTION_4();
}

void std::moneypunct_byname<char,true>::moneypunct_byname[abi:ne180100]()
{
  void **v0;
  uint64_t v1;
  uint64_t v2;
  void **v3;
  int v4;

  OUTLINED_FUNCTION_3();
  if (v4 < 0)
    OUTLINED_FUNCTION_6(v2, v3);
  if (*(char *)(v1 + 71) < 0)
    OUTLINED_FUNCTION_5();
  if (*(char *)(v1 + 47) < 0)
    OUTLINED_FUNCTION_2(*v0);
  else
    OUTLINED_FUNCTION_4();
}

void std::moneypunct_byname<wchar_t,false>::moneypunct_byname[abi:ne180100]()
{
  void **v0;
  uint64_t v1;
  uint64_t v2;
  void **v3;
  int v4;

  OUTLINED_FUNCTION_3();
  if (v4 < 0)
    OUTLINED_FUNCTION_6(v2, v3);
  if (*(char *)(v1 + 71) < 0)
    OUTLINED_FUNCTION_5();
  if (*(char *)(v1 + 47) < 0)
    OUTLINED_FUNCTION_2(*v0);
  else
    OUTLINED_FUNCTION_4();
}

void std::moneypunct_byname<wchar_t,true>::moneypunct_byname[abi:ne180100]()
{
  void **v0;
  uint64_t v1;
  uint64_t v2;
  void **v3;
  int v4;

  OUTLINED_FUNCTION_3();
  if (v4 < 0)
    OUTLINED_FUNCTION_6(v2, v3);
  if (*(char *)(v1 + 71) < 0)
    OUTLINED_FUNCTION_5();
  if (*(char *)(v1 + 47) < 0)
    OUTLINED_FUNCTION_2(*v0);
  else
    OUTLINED_FUNCTION_4();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x1E0C80A20](exception_object);
}

const char *__cdecl std::runtime_error::what(const std::runtime_error *this)
{
  return (const char *)MEMORY[0x1E0DE50F0](this);
}

void std::logic_error::~logic_error(std::logic_error *this)
{
  MEMORY[0x1E0DE50F8](this);
}

void std::runtime_error::~runtime_error(std::runtime_error *this)
{
  MEMORY[0x1E0DE5118](this);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x1E0DE5130](this);
}

std::bad_cast *__cdecl std::bad_cast::bad_cast(std::bad_cast *this)
{
  return (std::bad_cast *)MEMORY[0x1E0DE5140](this);
}

void std::bad_cast::~bad_cast(std::bad_cast *this)
{
  MEMORY[0x1E0DE5150](this);
}

std::bad_alloc *__cdecl std::bad_alloc::bad_alloc(std::bad_alloc *this)
{
  return (std::bad_alloc *)MEMORY[0x1E0DE5158](this);
}

void std::exception::~exception(std::exception *this)
{
  MEMORY[0x1E0DE5168](this);
}

void std::terminate(void)
{
  MEMORY[0x1E0DE5178]();
}

void operator delete[](void *__p, std::align_val_t a2)
{
  off_1E2E57788(__p, a2);
}

uint64_t operator delete[]()
{
  return off_1E2E57790();
}

void operator delete(void *__p)
{
  off_1E2E57798(__p);
}

void operator delete(void *__p, std::align_val_t a2)
{
  off_1E2E577A0(__p, a2);
}

uint64_t operator delete()
{
  return off_1E2E577A8();
}

void *__cdecl operator new[](size_t __sz, std::align_val_t a2)
{
  return (void *)off_1E2E577B0(__sz, a2);
}

uint64_t operator new[]()
{
  return off_1E2E577B8();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_1E2E577C0(__sz);
}

void *__cdecl operator new(size_t __sz, std::align_val_t a2)
{
  return (void *)off_1E2E577C8(__sz, a2);
}

uint64_t operator new()
{
  return off_1E2E577D0();
}

int ___mb_cur_max_l(locale_t a1)
{
  return MEMORY[0x1E0C80A38](a1);
}

__darwin_ct_rune_t ___tolower_l(__darwin_ct_rune_t a1, locale_t a2)
{
  return MEMORY[0x1E0C80A40](*(_QWORD *)&a1, a2);
}

__darwin_ct_rune_t ___toupper_l(__darwin_ct_rune_t a1, locale_t a2)
{
  return MEMORY[0x1E0C80A48](*(_QWORD *)&a1, a2);
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1E0DE51D0](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x1E0C80A98](lpfunc, obj, lpdso_handle);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1E0DE51D8](a1);
}

void *__cxa_current_primary_exception(void)
{
  return (void *)MEMORY[0x1E0DE51E8]();
}

void __cxa_decrement_exception_refcount(void *primary_exception)
{
  MEMORY[0x1E0DE51F0](primary_exception);
}

void __cxa_end_catch(void)
{
  MEMORY[0x1E0DE51F8]();
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x1E0DE5200](a1);
}

void __cxa_guard_abort(__guard *a1)
{
  MEMORY[0x1E0DE5208](a1);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1E0DE5210](a1);
}

void __cxa_guard_release(__guard *a1)
{
  MEMORY[0x1E0DE5218](a1);
}

void __cxa_increment_exception_refcount(void *primary_exception)
{
  MEMORY[0x1E0DE5220](primary_exception);
}

uint64_t __cxa_init_primary_exception()
{
  return MEMORY[0x1E0DE5228]();
}

void __cxa_rethrow(void)
{
  MEMORY[0x1E0DE5230]();
}

void __cxa_rethrow_primary_exception(void *primary_exception)
{
  MEMORY[0x1E0DE5238](primary_exception);
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x1E0DE5240](a1, lptinfo, a3);
}

unsigned int __cxa_uncaught_exceptions(void)
{
  return MEMORY[0x1E0DE5248]();
}

uint64_t __divti3()
{
  return MEMORY[0x1E0C80AB0]();
}

void *__dynamic_cast(const void *lpsrc, const struct __class_type_info *lpstype, const struct __class_type_info *lpdtype, ptrdiff_t s2d)
{
  return (void *)MEMORY[0x1E0DE5250](lpsrc, lpstype, lpdtype, s2d);
}

int *__error(void)
{
  return (int *)MEMORY[0x1E0C80AC0]();
}

int __maskrune_l(__darwin_ct_rune_t a1, unint64_t a2, locale_t a3)
{
  return MEMORY[0x1E0C80B58](*(_QWORD *)&a1, a2, a3);
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1E0C80C70](*(_QWORD *)&a1);
}

__darwin_ct_rune_t __toupper(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1E0C80C78](*(_QWORD *)&a1);
}

uint64_t __ulock_wait()
{
  return MEMORY[0x1E0C80C88]();
}

uint64_t __ulock_wake()
{
  return MEMORY[0x1E0C80C90]();
}

void abort(void)
{
  MEMORY[0x1E0C813A8]();
}

uint32_t arc4random(void)
{
  return MEMORY[0x1E0C81570]();
}

int asprintf_l(char **a1, locale_t a2, const char *a3, ...)
{
  return MEMORY[0x1E0C81610](a1, a2, a3);
}

wint_t btowc_l(int a1, locale_t a2)
{
  return MEMORY[0x1E0C81750](*(_QWORD *)&a1, a2);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

int catclose(nl_catd a1)
{
  return MEMORY[0x1E0C81838](a1);
}

char *__cdecl catgets(nl_catd a1, int a2, int a3, const char *a4)
{
  return (char *)MEMORY[0x1E0C81840](a1, *(_QWORD *)&a2, *(_QWORD *)&a3, a4);
}

nl_catd catopen(const char *a1, int a2)
{
  return (nl_catd)MEMORY[0x1E0C81848](a1, *(_QWORD *)&a2);
}

int chdir(const char *a1)
{
  return MEMORY[0x1E0C82628](a1);
}

int clock_gettime(clockid_t __clock_id, timespec *__tp)
{
  return MEMORY[0x1E0C82668](*(_QWORD *)&__clock_id, __tp);
}

int close(int a1)
{
  return MEMORY[0x1E0C82688](*(_QWORD *)&a1);
}

int closedir(DIR *a1)
{
  return MEMORY[0x1E0C82698](a1);
}

copyfile_state_t copyfile_state_alloc(void)
{
  return (copyfile_state_t)MEMORY[0x1E0C82B20]();
}

int copyfile_state_free(copyfile_state_t a1)
{
  return MEMORY[0x1E0C82B28](a1);
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1E0C83040](__path, *(_QWORD *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1E0C83050](__handle, __symbol);
}

int fchmod(int a1, mode_t a2)
{
  return MEMORY[0x1E0C832D0](*(_QWORD *)&a1, a2);
}

int fchmodat(int a1, const char *a2, mode_t a3, int a4)
{
  return MEMORY[0x1E0C832D8](*(_QWORD *)&a1, a2, a3, *(_QWORD *)&a4);
}

int fclose(FILE *a1)
{
  return MEMORY[0x1E0C832F8](a1);
}

int fcopyfile(int from_fd, int to_fd, copyfile_state_t a3, copyfile_flags_t flags)
{
  return MEMORY[0x1E0C83308](*(_QWORD *)&from_fd, *(_QWORD *)&to_fd, a3, *(_QWORD *)&flags);
}

DIR *__cdecl fdopendir(int a1)
{
  return (DIR *)MEMORY[0x1E0C83320](*(_QWORD *)&a1);
}

int fflush(FILE *a1)
{
  return MEMORY[0x1E0C83370](a1);
}

int fileno(FILE *a1)
{
  return MEMORY[0x1E0C833B0](a1);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x1E0C83460](__filename, __mode);
}

wint_t fputwc(__int32 a1, FILE *a2)
{
  return MEMORY[0x1E0C83498](*(_QWORD *)&a1, a2);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1E0C834A0](__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

int freelocale(locale_t a1)
{
  return MEMORY[0x1E0C834D8](a1);
}

int fseek(FILE *a1, uint64_t a2, int a3)
{
  return MEMORY[0x1E0C83530](a1, a2, *(_QWORD *)&a3);
}

int fseeko(FILE *__stream, off_t a2, int __whence)
{
  return MEMORY[0x1E0C83538](__stream, a2, *(_QWORD *)&__whence);
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x1E0C83560](*(_QWORD *)&a1, a2);
}

off_t ftello(FILE *__stream)
{
  return MEMORY[0x1E0C83588](__stream);
}

int ftruncate(int a1, off_t a2)
{
  return MEMORY[0x1E0C83590](*(_QWORD *)&a1, a2);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1E0C835E0](__ptr, __size, __nitems, __stream);
}

int getc(FILE *a1)
{
  return MEMORY[0x1E0C83638](a1);
}

char *__cdecl getcwd(char *a1, size_t a2)
{
  return (char *)MEMORY[0x1E0C83648](a1, a2);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x1E0C83660](a1);
}

wint_t getwc(FILE *a1)
{
  return MEMORY[0x1E0C83830](a1);
}

int isatty(int a1)
{
  return MEMORY[0x1E0C839A8](*(_QWORD *)&a1);
}

int link(const char *a1, const char *a2)
{
  return MEMORY[0x1E0C83B70](a1, a2);
}

lconv *__cdecl localeconv_l(locale_t a1)
{
  return (lconv *)MEMORY[0x1E0C83BA0](a1);
}

int lstat(const char *a1, stat *a2)
{
  return MEMORY[0x1E0C83C40](a1, a2);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F00](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F10](ptr, size, type_id);
}

size_t mbrlen_l(const char *a1, size_t a2, mbstate_t *a3, locale_t a4)
{
  return MEMORY[0x1E0C84030](a1, a2, a3, a4);
}

size_t mbrtowc_l(__int32 *a1, const char *a2, size_t a3, mbstate_t *a4, locale_t a5)
{
  return MEMORY[0x1E0C84040](a1, a2, a3, a4, a5);
}

size_t mbsnrtowcs_l(__int32 *a1, const char **a2, size_t a3, size_t a4, mbstate_t *a5, locale_t a6)
{
  return MEMORY[0x1E0C84048](a1, a2, a3, a4, a5, a6);
}

size_t mbsrtowcs_l(__int32 *a1, const char **a2, size_t a3, mbstate_t *a4, locale_t a5)
{
  return MEMORY[0x1E0C84050](a1, a2, a3, a4, a5);
}

int mbtowc_l(__int32 *a1, const char *a2, size_t a3, locale_t a4)
{
  return MEMORY[0x1E0C84060](a1, a2, a3, a4);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x1E0C84070](__s, *(_QWORD *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1E0C84078](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1E0C840B0](__b, *(_QWORD *)&__c, __len);
}

int mkdir(const char *a1, mode_t a2)
{
  return MEMORY[0x1E0C84160](a1, a2);
}

int nanosleep(const timespec *__rqtp, timespec *__rmtp)
{
  return MEMORY[0x1E0C84238](__rqtp, __rmtp);
}

locale_t newlocale(int a1, const char *a2, locale_t a3)
{
  return (locale_t)MEMORY[0x1E0C843A0](*(_QWORD *)&a1, a2, a3);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1E0C84480](a1, *(_QWORD *)&a2);
}

int openat(int a1, const char *a2, int a3, ...)
{
  return MEMORY[0x1E0C844A0](*(_QWORD *)&a1, a2, *(_QWORD *)&a3);
}

DIR *__cdecl opendir(const char *a1)
{
  return (DIR *)MEMORY[0x1E0C844C0](a1);
}

int pthread_cond_broadcast(pthread_cond_t *a1)
{
  return MEMORY[0x1E0C84D18](a1);
}

int pthread_cond_destroy(pthread_cond_t *a1)
{
  return MEMORY[0x1E0C84D20](a1);
}

int pthread_cond_signal(pthread_cond_t *a1)
{
  return MEMORY[0x1E0C84D30](a1);
}

int pthread_cond_timedwait(pthread_cond_t *a1, pthread_mutex_t *a2, const timespec *a3)
{
  return MEMORY[0x1E0C84D38](a1, a2, a3);
}

int pthread_cond_wait(pthread_cond_t *a1, pthread_mutex_t *a2)
{
  return MEMORY[0x1E0C84D48](a1, a2);
}

int pthread_detach(pthread_t a1)
{
  return MEMORY[0x1E0C84D78](a1);
}

void *__cdecl pthread_getspecific(pthread_key_t a1)
{
  return (void *)MEMORY[0x1E0C84DC0](a1);
}

int pthread_join(pthread_t a1, void **a2)
{
  return MEMORY[0x1E0C84DD8](a1, a2);
}

int pthread_key_create(pthread_key_t *a1, void (__cdecl *a2)(void *))
{
  return MEMORY[0x1E0C84DE0](a1, a2);
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E18](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x1E0C84E20](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E28](a1);
}

int pthread_mutex_trylock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E30](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E38](a1);
}

int pthread_mutexattr_destroy(pthread_mutexattr_t *a1)
{
  return MEMORY[0x1E0C84E40](a1);
}

int pthread_mutexattr_init(pthread_mutexattr_t *a1)
{
  return MEMORY[0x1E0C84E48](a1);
}

int pthread_mutexattr_settype(pthread_mutexattr_t *a1, int a2)
{
  return MEMORY[0x1E0C84E60](a1, *(_QWORD *)&a2);
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x1E0C84ED8]();
}

int pthread_setspecific(pthread_key_t a1, const void *a2)
{
  return MEMORY[0x1E0C84F18](a1, a2);
}

dirent *__cdecl readdir(DIR *a1)
{
  return (dirent *)MEMORY[0x1E0C85008](a1);
}

ssize_t readlink(const char *a1, char *a2, size_t a3)
{
  return MEMORY[0x1E0C85018](a1, a2, a3);
}

char *__cdecl realpath_DARWIN_EXTSN(const char *a1, char *a2)
{
  return (char *)MEMORY[0x1E0C85040](a1, a2);
}

BOOL remove(const std::__fs::filesystem::path *__p, std::error_code *__ec)
{
  return MEMORY[0x1E0C850B8](__p, __ec);
}

void rename(const std::__fs::filesystem::path *__from, const std::__fs::filesystem::path *__to, std::error_code *__ec)
{
  MEMORY[0x1E0C85100](__from, __to, __ec);
}

char *__cdecl setlocale(int a1, const char *a2)
{
  return (char *)MEMORY[0x1E0C85358](*(_QWORD *)&a1, a2);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1E0C85440](__str, __size, __format);
}

int snprintf_l(char *a1, size_t a2, locale_t a3, const char *a4, ...)
{
  return MEMORY[0x1E0C85448](a1, a2, a3, a4);
}

int sscanf(const char *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C85498](a1, a2);
}

int sscanf_l(const char *a1, locale_t a2, const char *a3, ...)
{
  return MEMORY[0x1E0C854A0](a1, a2, a3);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x1E0C854D8](a1, a2);
}

int statvfs(const char *a1, statvfs *a2)
{
  return MEMORY[0x1E0C854E8](a1, a2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1E0C85520](__s1, __s2);
}

int strcoll_l(const char *a1, const char *a2, locale_t a3)
{
  return MEMORY[0x1E0C85528](a1, a2, a3);
}

int strerror_r(int __errnum, char *__strerrbuf, size_t __buflen)
{
  return MEMORY[0x1E0C85550](*(_QWORD *)&__errnum, __strerrbuf, __buflen);
}

size_t strftime_l(char *a1, size_t a2, const char *a3, const tm *a4, locale_t a5)
{
  return MEMORY[0x1E0C85560](a1, a2, a3, a4, a5);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1E0C85578](__s);
}

double strtod(const char *a1, char **a2)
{
  double result;

  MEMORY[0x1E0C85618](a1, a2);
  return result;
}

double strtod_l(const char *a1, char **a2, locale_t a3)
{
  double result;

  MEMORY[0x1E0C85620](a1, a2, a3);
  return result;
}

float strtof(const char *a1, char **a2)
{
  float result;

  MEMORY[0x1E0C85628](a1, a2);
  return result;
}

float strtof_l(const char *a1, char **a2, locale_t a3)
{
  float result;

  MEMORY[0x1E0C85630](a1, a2, a3);
  return result;
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1E0C85658](__str, __endptr, *(_QWORD *)&__base);
}

long double strtold(const char *a1, char **a2)
{
  long double result;

  MEMORY[0x1E0C85668](a1, a2);
  return result;
}

long double strtold_l(const char *a1, char **a2, locale_t a3)
{
  long double result;

  MEMORY[0x1E0C85670](a1, a2, a3);
  return result;
}

uint64_t strtoll(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1E0C85678](__str, __endptr, *(_QWORD *)&__base);
}

uint64_t strtoll_l(const char *a1, char **a2, int a3, locale_t a4)
{
  return MEMORY[0x1E0C85680](a1, a2, *(_QWORD *)&a3, a4);
}

unint64_t strtoul(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1E0C85698](__str, __endptr, *(_QWORD *)&__base);
}

unint64_t strtoull(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1E0C856A8](__str, __endptr, *(_QWORD *)&__base);
}

unint64_t strtoull_l(const char *a1, char **a2, int a3, locale_t a4)
{
  return MEMORY[0x1E0C856B0](a1, a2, *(_QWORD *)&a3, a4);
}

size_t strxfrm_l(char *a1, const char *a2, size_t a3, locale_t a4)
{
  return MEMORY[0x1E0C856C8](a1, a2, a3, a4);
}

int swprintf(__int32 *a1, size_t a2, const __int32 *a3, ...)
{
  return MEMORY[0x1E0C85710](a1, a2, a3);
}

int symlink(const char *a1, const char *a2)
{
  return MEMORY[0x1E0C85718](a1, a2);
}

uint64_t sysconf(int a1)
{
  return MEMORY[0x1E0C85790](*(_QWORD *)&a1);
}

int truncate(const char *a1, off_t a2)
{
  return MEMORY[0x1E0C85980](a1, a2);
}

int ungetc(int a1, FILE *a2)
{
  return MEMORY[0x1E0C859A8](*(_QWORD *)&a1, a2);
}

wint_t ungetwc(wint_t a1, FILE *a2)
{
  return MEMORY[0x1E0C859B0](*(_QWORD *)&a1, a2);
}

int unlinkat(int a1, const char *a2, int a3)
{
  return MEMORY[0x1E0C859C0](*(_QWORD *)&a1, a2, *(_QWORD *)&a3);
}

int utimensat(int __fd, const char *__path, const timespec __times[2], int __flag)
{
  return MEMORY[0x1E0C859F0](*(_QWORD *)&__fd, __path, __times, *(_QWORD *)&__flag);
}

int vasprintf(char **a1, const char *a2, va_list a3)
{
  return MEMORY[0x1E0C85A58](a1, a2, a3);
}

int vfprintf(FILE *a1, const char *a2, va_list a3)
{
  return MEMORY[0x1E0C85A68](a1, a2, a3);
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return MEMORY[0x1E0C85B98](__str, __size, __format, a4);
}

size_t wcrtomb_l(char *a1, __int32 a2, mbstate_t *a3, locale_t a4)
{
  return MEMORY[0x1E0C85BF0](a1, *(_QWORD *)&a2, a3, a4);
}

int wcscoll_l(const __int32 *a1, const __int32 *a2, locale_t a3)
{
  return MEMORY[0x1E0C85C10](a1, a2, a3);
}

size_t wcslen(const __int32 *a1)
{
  return MEMORY[0x1E0C85C20](a1);
}

size_t wcsnrtombs_l(char *a1, const __int32 **a2, size_t a3, size_t a4, mbstate_t *a5, locale_t a6)
{
  return MEMORY[0x1E0C85C40](a1, a2, a3, a4, a5, a6);
}

double wcstod(const __int32 *a1, __int32 **a2)
{
  double result;

  MEMORY[0x1E0C85C58](a1, a2);
  return result;
}

float wcstof(const __int32 *a1, __int32 **a2)
{
  float result;

  MEMORY[0x1E0C85C60](a1, a2);
  return result;
}

uint64_t wcstol(const __int32 *a1, __int32 **a2, int a3)
{
  return MEMORY[0x1E0C85C68](a1, a2, *(_QWORD *)&a3);
}

long double wcstold(const __int32 *a1, __int32 **a2)
{
  long double result;

  MEMORY[0x1E0C85C70](a1, a2);
  return result;
}

uint64_t wcstoll(const __int32 *a1, __int32 **a2, int a3)
{
  return MEMORY[0x1E0C85C78](a1, a2, *(_QWORD *)&a3);
}

unint64_t wcstoul(const __int32 *a1, __int32 **a2, int a3)
{
  return MEMORY[0x1E0C85C88](a1, a2, *(_QWORD *)&a3);
}

unint64_t wcstoull(const __int32 *a1, __int32 **a2, int a3)
{
  return MEMORY[0x1E0C85C90](a1, a2, *(_QWORD *)&a3);
}

size_t wcsxfrm_l(__int32 *a1, const __int32 *a2, size_t a3, locale_t a4)
{
  return MEMORY[0x1E0C85C98](a1, a2, a3, a4);
}

int wctob_l(wint_t a1, locale_t a2)
{
  return MEMORY[0x1E0C85CA8](*(_QWORD *)&a1, a2);
}

__int32 *__cdecl wmemchr(__int32 *__s, __int32 __c, size_t __n)
{
  return (__int32 *)MEMORY[0x1E0C85CB8](__s, *(_QWORD *)&__c, __n);
}

