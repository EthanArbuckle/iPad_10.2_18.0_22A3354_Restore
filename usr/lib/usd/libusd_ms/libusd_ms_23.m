void sub_20C792720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, _QWORD *a19)
{
  uint64_t v19;

  sub_20BFED2B4((uint64_t)&a18, a19);
  sub_20BF4C2D8(v19 - 112);
  _Unwind_Resume(a1);
}

char *sub_20C79278C(uint64_t a1)
{
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 127;
  *(_BYTE *)(a1 + 12) = 0;
  sub_20BDDF7E4((char *)(a1 + 16), 0, 0, 0);
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 127;
  *(_BYTE *)(a1 + 52) = 0;
  sub_20BDDF7E4((char *)(a1 + 56), 0, 0, 0);
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 127;
  *(_BYTE *)(a1 + 92) = 0;
  sub_20BDDF7E4((char *)(a1 + 96), 0, 0, 0);
  *(_QWORD *)(a1 + 120) = 0xC0000000C0000000;
  *(_DWORD *)(a1 + 128) = -1073741824;
  *(_QWORD *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 144) = 127;
  *(_BYTE *)(a1 + 148) = 0;
  sub_20BDDF7E4((char *)(a1 + 152), 0, 0, 0);
  *(_QWORD *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 184) = 127;
  *(_BYTE *)(a1 + 188) = 0;
  sub_20BDDF7E4((char *)(a1 + 192), 0, 0, 0);
  *(_QWORD *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 224) = 127;
  *(_BYTE *)(a1 + 228) = 0;
  sub_20BDDF7E4((char *)(a1 + 232), 0, 0, 0);
  *(_QWORD *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = 127;
  *(_BYTE *)(a1 + 268) = 0;
  sub_20BDDF7E4((char *)(a1 + 272), 0, 0, 0);
  *(_QWORD *)(a1 + 296) = 0;
  *(_DWORD *)(a1 + 304) = 127;
  *(_BYTE *)(a1 + 308) = 0;
  sub_20BDDF7E4((char *)(a1 + 312), 0, 0, 0);
  *(_QWORD *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 344) = 127;
  *(_BYTE *)(a1 + 348) = 0;
  sub_20BDDF7E4((char *)(a1 + 352), 0, 0, 0);
  MEMORY[0x212B929D0](a1 + 376, "catmull-clark");
  *(_QWORD *)(a1 + 448) = 0;
  *(_DWORD *)(a1 + 456) = 127;
  *(_BYTE *)(a1 + 460) = 0;
  sub_20BDDF7E4((char *)(a1 + 464), 0, 0, 0);
  *(int64x2_t *)(a1 + 400) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(_OWORD *)(a1 + 416) = xmmword_20CA521E0;
  *(int64x2_t *)(a1 + 432) = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  return sub_20C79513C(a1 + 488);
}

uint64_t sub_20C792930(uint64_t result, int a2)
{
  *(_DWORD *)(result + 128) = a2;
  return result;
}

uint64_t sub_20C792938(uint64_t result, int a2)
{
  *(_DWORD *)(result + 120) = a2;
  return result;
}

void sub_20C792940(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X2>, void (*a4)(_QWORD *, void **)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>, double a7@<D0>)
{
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName *v14;
  _QWORD **Converter;
  pxrInternal__aapl__pxrReserved__::VtValue *v16;
  _QWORD *v17;
  uint64_t v18;
  void *v19[2];
  void *__p;
  void *v21;

  v14 = (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)(a2 + 16);
  Converter = pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::GetConverter(a1, (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)(a2 + 16));
  v16 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20C78EDF8((uint64_t)a2, a7);
  LODWORD(v19[0]) = 6;
  BYTE4(v19[0]) = 1;
  sub_20C78E7FC(v14, v16, a1, (uint64_t)Converter, (int *)v19, 0, a6);
  if (sub_20C78EEDC(a6, a2, (uint64_t)v14))
  {
    v17 = (_QWORD *)(a3 + (a5 >> 1));
    if ((a5 & 1) != 0)
      a4 = *(void (**)(_QWORD *, void **))(*v17 + a4);
    v18 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a6 + 8) + 16))(*(_QWORD *)(a6 + 8));
    sub_20C7952C8(v19, v18, *(_QWORD *)a6);
    a4(v17, v19);
    if (__p)
    {
      v21 = __p;
      operator delete(__p);
    }
  }
}

void sub_20C792A48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  uint64_t v13;

  if (__p)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v13 + 24));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v13 + 8));
  _Unwind_Resume(a1);
}

char *sub_20C792A80(char *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 5);
  *((_QWORD *)result + 5) = *(_QWORD *)a2;
  *(_QWORD *)(result + 45) = v2;
  if (result + 40 != (char *)a2)
    return sub_20BDDF7E4(result + 56, *(char **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 3);
  return result;
}

char *sub_20C792AB8(char *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 5);
  *((_QWORD *)result + 10) = *(_QWORD *)a2;
  *(_QWORD *)(result + 85) = v2;
  if (result + 80 != (char *)a2)
    return sub_20BDDF7E4(result + 96, *(char **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 3);
  return result;
}

void sub_20C792AF0(_QWORD *a1@<X0>, const char *a2@<X1>, char *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v4;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v7;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v8;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v9;
  unint64_t v10;
  const char *v11;
  void *__p[2];
  char v13;

  v4 = a1;
  v6 = a1[1];
  if ((v6 & 4) != 0)
    v4 = (_QWORD *)(*(uint64_t (**)(_QWORD *))((v6 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  if (!*v4)
    goto LABEL_16;
  v7 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v7)
    v7 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if ((*v4 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v7 + 12) & 0xFFFFFFFFFFFFFFF8))
  {
LABEL_16:
    sub_20BDDC0E4(__p, "catmull-clark");
    sub_20C76CB18(a4, (uint64_t)__p);
  }
  else
  {
    v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v8)
      v8 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if ((*v4 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v8 + 69) & 0xFFFFFFFFFFFFFFF8))
    {
      sub_20BDDC0E4(__p, "loop");
      sub_20C76CB18(a4, (uint64_t)__p);
    }
    else
    {
      v9 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v9)
        v9 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      v10 = *v4 & 0xFFFFFFFFFFFFFFF8;
      if (v10 == (*((_QWORD *)v9 + 6) & 0xFFFFFFFFFFFFFFF8))
      {
        sub_20BDDC0E4(__p, "bilinear");
        sub_20C76CB18(a4, (uint64_t)__p);
      }
      else
      {
        if (v10)
        {
          v11 = (const char *)(v10 + 16);
          if (*(char *)(v10 + 39) < 0)
            v11 = *(const char **)v11;
        }
        else
        {
          v11 = "";
        }
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Unsupported subdivisionScheme '%s'", a2, a3, v11);
        pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::_ErrorSampleForAlembic((__int128 *)__p, a4);
      }
    }
  }
  if (v13 < 0)
    operator delete(__p[0]);
}

void sub_20C792C90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C792CB8(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion *a1, uint64_t a2, _DWORD *a3, uint64_t a4, void (*a5)(_QWORD *, _QWORD), uint64_t a6, double a7)
{
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName *v13;
  pxrInternal__aapl__pxrReserved__::VtValue *v14;
  _QWORD *v15;
  unsigned int *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  int v27;
  char v28;

  v13 = (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)(a3 + 16);
  v14 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20C78EDF8((uint64_t)a3, a7);
  v27 = 6;
  v28 = 1;
  sub_20C78E7FC(v13, v14, a1, a2, &v27, 1, (uint64_t)&v23);
  if (sub_20C78EEDC((uint64_t)&v23, a3, (uint64_t)v13))
  {
    v15 = (_QWORD *)(a4 + (a6 >> 1));
    if ((a6 & 1) != 0)
      a5 = *(void (**)(_QWORD *, _QWORD))(*v15 + a5);
    v16 = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 16))(v24);
    a5(v15, *v16);
  }
  v17 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = v25;
  if (v25)
  {
    v21 = (unint64_t *)&v25->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_20C792DF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v1 + 24));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_20C792E14(_QWORD *a1@<X0>, const char *a2@<X1>, char *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v4;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v7;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v8;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v9;
  unint64_t v10;
  const char *v11;
  _DWORD *v12;
  __int128 __p;
  char v14;

  v4 = a1;
  v6 = a1[1];
  if ((v6 & 4) != 0)
    v4 = (_QWORD *)(*(uint64_t (**)(_QWORD *))((v6 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  if (!*v4)
    goto LABEL_16;
  v7 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v7)
    v7 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if ((*v4 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v7 + 32) & 0xFFFFFFFFFFFFFFF8))
  {
LABEL_16:
    *a4 = 1;
    v12 = operator new(0x10uLL);
    *(_QWORD *)v12 = &unk_24C546480;
    v12[2] = 1;
LABEL_17:
    sub_20C76527C(a4 + 1, (uint64_t)v12);
    a4[3] = 0;
    a4[4] = 0;
    return;
  }
  v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8)
    v8 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if ((*v4 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v8 + 85) & 0xFFFFFFFFFFFFFFF8))
  {
    *a4 = 1;
    v12 = operator new(0x10uLL);
    *(_QWORD *)v12 = &unk_24C546480;
    v12[2] = 0;
    goto LABEL_17;
  }
  v9 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v9)
    v9 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v10 = *v4 & 0xFFFFFFFFFFFFFFF8;
  if (v10 == (*((_QWORD *)v9 + 33) & 0xFFFFFFFFFFFFFFF8))
  {
    *a4 = 1;
    v12 = operator new(0x10uLL);
    *(_QWORD *)v12 = &unk_24C546480;
    v12[2] = 2;
    goto LABEL_17;
  }
  if (v10)
  {
    v11 = (const char *)(v10 + 16);
    if (*(char *)(v10 + 39) < 0)
      v11 = *(const char **)v11;
  }
  else
  {
    v11 = "";
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Unsupported interpolateBoundary '%s'", a2, a3, v11);
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::_ErrorSampleForAlembic(&__p, a4);
  if (v14 < 0)
    operator delete((void *)__p);
}

void sub_20C792FE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C793004(_QWORD *a1@<X0>, const char *a2@<X1>, char *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v4;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v7;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v8;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v9;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v10;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v11;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v12;
  unint64_t v13;
  const char *v14;
  _DWORD *v15;
  int v16;
  void *__p[2];
  char v18;

  v4 = a1;
  v6 = a1[1];
  if ((v6 & 4) != 0)
    v4 = (_QWORD *)(*(uint64_t (**)(_QWORD *))((v6 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  if (!*v4)
    goto LABEL_25;
  v7 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v7)
    v7 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if ((*v4 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v7 + 21) & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_25;
  v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8)
    v8 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if ((*v4 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v8 + 20) & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_25;
  v9 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v9)
    v9 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if ((*v4 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v9 + 22) & 0xFFFFFFFFFFFFFFF8))
  {
LABEL_25:
    *a4 = 1;
    v15 = operator new(0x10uLL);
    *(_QWORD *)v15 = &unk_24C546480;
    v15[2] = 1;
LABEL_26:
    sub_20C76527C(a4 + 1, (uint64_t)v15);
    a4[3] = 0;
    a4[4] = 0;
    return;
  }
  v10 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v10)
    v10 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if ((*v4 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v10 + 1) & 0xFFFFFFFFFFFFFFF8))
  {
    *a4 = 1;
    v15 = operator new(0x10uLL);
    *(_QWORD *)v15 = &unk_24C546480;
    v15[2] = 0;
    goto LABEL_26;
  }
  v11 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v11)
    v11 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if ((*v4 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v11 + 85) & 0xFFFFFFFFFFFFFFF8))
  {
    v16 = 2;
LABEL_31:
    LODWORD(__p[0]) = v16;
    sub_20C79535C(a4, __p);
    return;
  }
  v12 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v12)
    v12 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v13 = *v4 & 0xFFFFFFFFFFFFFFF8;
  if (v13 == (*((_QWORD *)v12 + 7) & 0xFFFFFFFFFFFFFFF8))
  {
    v16 = 3;
    goto LABEL_31;
  }
  if (v13)
  {
    v14 = (const char *)(v13 + 16);
    if (*(char *)(v13 + 39) < 0)
      v14 = *(const char **)v14;
  }
  else
  {
    v14 = "";
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Unsupported faceVaryingLinearInterpolation '%s'", a2, a3, v14);
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::_ErrorSampleForAlembic((__int128 *)__p, a4);
  if (v18 < 0)
    operator delete(__p[0]);
}

void sub_20C793258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_20C793274(char *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_QWORD *)(result + 261) = *(uint64_t *)((char *)a2 + 5);
  *((_QWORD *)result + 32) = v2;
  if (result + 256 != (char *)a2)
    return sub_20BDDF7E4(result + 272, (char *)a2[2], a2[3], (a2[3] - a2[2]) >> 3);
  return result;
}

void sub_20C7932AC(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X2>, void (*a4)(_QWORD *, void **)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>, double a7@<D0>)
{
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName *v14;
  _QWORD **Converter;
  pxrInternal__aapl__pxrReserved__::VtValue *v16;
  _QWORD *v17;
  uint64_t v18;
  void *v19[2];
  void *__p;
  void *v21;

  v14 = (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)(a2 + 16);
  Converter = pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::GetConverter(a1, (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)(a2 + 16));
  v16 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20C78EDF8((uint64_t)a2, a7);
  LODWORD(v19[0]) = 10;
  BYTE4(v19[0]) = 1;
  sub_20C78E7FC(v14, v16, a1, (uint64_t)Converter, (int *)v19, 0, a6);
  if (sub_20C78EEDC(a6, a2, (uint64_t)v14))
  {
    v17 = (_QWORD *)(a3 + (a5 >> 1));
    if ((a5 & 1) != 0)
      a4 = *(void (**)(_QWORD *, void **))(*v17 + a4);
    v18 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a6 + 8) + 16))(*(_QWORD *)(a6 + 8));
    sub_20C7953B8(v19, v18, *(_QWORD *)a6);
    a4(v17, v19);
    if (__p)
    {
      v21 = __p;
      operator delete(__p);
    }
  }
}

void sub_20C7933B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  uint64_t v13;

  if (__p)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v13 + 24));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v13 + 8));
  _Unwind_Resume(a1);
}

char *sub_20C7933EC(char *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_QWORD *)(result + 301) = *(uint64_t *)((char *)a2 + 5);
  *((_QWORD *)result + 37) = v2;
  if (result + 296 != (char *)a2)
    return sub_20BDDF7E4(result + 312, (char *)a2[2], a2[3], (a2[3] - a2[2]) >> 3);
  return result;
}

char *sub_20C793424(char *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 5);
  *((_QWORD *)result + 17) = *(_QWORD *)a2;
  *(_QWORD *)(result + 141) = v2;
  if (result + 136 != (char *)a2)
    return sub_20BDDF7E4(result + 152, *(char **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 3);
  return result;
}

char *sub_20C79345C(char *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 5);
  *((_QWORD *)result + 22) = *(_QWORD *)a2;
  *(_QWORD *)(result + 181) = v2;
  if (result + 176 != (char *)a2)
    return sub_20BDDF7E4(result + 192, *(char **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 3);
  return result;
}

char *sub_20C793494(char *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 5);
  *((_QWORD *)result + 27) = *(_QWORD *)a2;
  *(_QWORD *)(result + 221) = v2;
  if (result + 216 != (char *)a2)
    return sub_20BDDF7E4(result + 232, *(char **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 3);
  return result;
}

char *sub_20C7934CC(char *result, char *a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = result;
  v4 = *(_QWORD *)a2;
  *(_QWORD *)(result + 493) = *(_QWORD *)(a2 + 5);
  *((_QWORD *)result + 61) = v4;
  if (result + 488 == a2)
  {
    v6 = *((_QWORD *)a2 + 5);
    *(_QWORD *)(result + 533) = *(_QWORD *)(a2 + 45);
    *((_QWORD *)result + 66) = v6;
  }
  else
  {
    sub_20BDDF7E4(result + 504, *((char **)a2 + 2), *((_QWORD *)a2 + 3), (uint64_t)(*((_QWORD *)a2 + 3) - *((_QWORD *)a2 + 2)) >> 3);
    v5 = *((_QWORD *)a2 + 5);
    *(_QWORD *)(v3 + 533) = *(_QWORD *)(a2 + 45);
    *((_QWORD *)v3 + 66) = v5;
    result = sub_20BDDF7E4(v3 + 544, *((char **)a2 + 7), *((_QWORD *)a2 + 8), (uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 3);
  }
  *((_DWORD *)v3 + 142) = *((_DWORD *)a2 + 20);
  return result;
}

uint64_t sub_20C793564(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t **a4, uint64_t **a5, uint64_t **a6)
{
  _DWORD *v12;
  int v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  int v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t *v26;
  unint64_t v27;
  int v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  int v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  _QWORD *exception;
  _QWORD *v47;
  _DWORD v48[4];
  int v49;
  __int128 **p_p_p;
  _DWORD v51[4];
  _DWORD v52[4];
  void *v53[2];
  char v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  __int128 __p;
  uint64_t v58;
  __int128 *p_p;
  _QWORD *v60[3];
  std::__shared_weak_count *v61;
  std::string __str;
  void *v63;
  char v64;
  _QWORD *v65[3];
  __int128 v66;
  char v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  _DWORD *v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  const void **v75[3];
  _QWORD *v76;
  std::__shared_weak_count *v77;
  int v78;
  uint64_t v79;

  *(_DWORD *)(a1 + 8) = 2;
  v12 = (_DWORD *)(a1 + 8);
  sub_20BDDC0E4((_QWORD *)(a1 + 16), "");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = &unk_24C54A898;
  sub_20C79426C(a1 + 56);
  v13 = *(_DWORD *)(a2 + 8);
  *((_QWORD *)&__p + 1) = 0;
  v58 = 0;
  *(_QWORD *)&__p = (char *)&__p + 8;
  v72 = 0;
  v73 = 0;
  v74 = v13;
  sub_20BDEBF8C((uint64_t *)v75, (const void ***)&__p);
  v76 = 0;
  v77 = 0;
  v78 = 0;
  v79 = 1;
  sub_20BDE9D48((uint64_t)&__p, *((_QWORD **)&__p + 1));
  sub_20BE02E30(a4, (uint64_t)&v74);
  sub_20BE02E30(a5, (uint64_t)&v74);
  sub_20BE02E30(a6, (uint64_t)&v74);
  *v12 = v74;
  v70 = v12;
  v71 = "OSchemaObject::OSchemaObject( OObject)";
  v15 = *(_QWORD *)(a2 + 40);
  v14 = *(std::__shared_weak_count **)(a2 + 48);
  v68 = v15;
  v69 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  if (!v15)
  {
    sub_20BDDBD68((uint64_t)&__p);
    sub_20BDDC1C8(&v58, (uint64_t)"NULL Parent ObjectWriter in OSchemaObject ctor", 46);
    std::stringbuf::str();
    sub_20BDDBF20(&__str, &v66);
    if (v67 < 0)
      operator delete((void *)v66);
    exception = __cxa_allocate_exception(0x20uLL);
    v47 = sub_20BDDC09C(exception, (uint64_t)&__str);
    __cxa_throw(v47, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  sub_20BDEBF8C((uint64_t *)&v66, v75);
  if (HIDWORD(v79) == 1)
  {
    v18 = 1;
  }
  else
  {
    sub_20BDDC0E4(&__p, "schema");
    sub_20BDDC0E4(&__str, "AbcGeom_SubD_v1");
    p_p = &__p;
    v19 = sub_20BDDDFDC((uint64_t **)&v66, (const void **)&__p, (uint64_t)&unk_20CAC184C, &p_p);
    std::string::operator=((std::string *)(v19 + 7), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(v58) < 0)
      operator delete((void *)__p);
    sub_20BDDC0E4(&__p, "schemaObjTitle");
    sub_20C793D74(&__str);
    p_p = &__p;
    v20 = sub_20BDDDFDC((uint64_t **)&v66, (const void **)&__p, (uint64_t)&unk_20CAC184C, &p_p);
    std::string::operator=((std::string *)(v20 + 7), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(v58) < 0)
      operator delete((void *)__p);
    sub_20BDDC0E4(&__p, "schemaBaseType");
    sub_20BDDC0E4(&__str, "AbcGeom_GeomBase_v1");
    p_p = &__p;
    v21 = sub_20BDDDFDC((uint64_t **)&v66, (const void **)&__p, (uint64_t)&unk_20CAC184C, &p_p);
    std::string::operator=((std::string *)(v21 + 7), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(v58) < 0)
      operator delete((void *)__p);
    v18 = 0;
  }
  sub_20BE0C5F0(&__str, a3, (const void ***)&v66);
  (*(void (**)(__int128 *__return_ptr, uint64_t, std::string *))(*(_QWORD *)v15 + 80))(&__p, v15, &__str);
  sub_20BDE82DC(a1 + 40, &__p);
  v22 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
  if (*((_QWORD *)&__p + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v76;
  v60[2] = v76;
  v61 = v77;
  if (v77)
  {
    v26 = (unint64_t *)&v77->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  if (v25)
  {
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v68 + 24))(&__p);
    v28 = (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)__p + 48))(__p, v25);
    v29 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
    if (*((_QWORD *)&__p + 1))
    {
      v30 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
  }
  else
  {
    v28 = v78;
  }
  v60[1] = 0;
  v60[0] = 0;
  p_p = (__int128 *)v60;
  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 40) + 40))(&v55);
  sub_20BDDC0E4(v53, ".geom");
  v32 = *v12;
  v52[0] = 1;
  v52[2] = v32;
  v51[0] = 2;
  v51[2] = v28;
  v49 = 3;
  p_p_p = &p_p;
  v48[0] = 6;
  v48[2] = v18;
  Alembic::AbcGeom::v12::OSubDSchema::OSubDSchema(&__p, &v55, v53, v52, v51, &v49, v48);
  sub_20C793E50(a1 + 56, (uint64_t)&__p);
  sub_20BE5B630((uint64_t)&__p);
  if (v54 < 0)
    operator delete(v53[0]);
  v33 = v56;
  if (v56)
  {
    v34 = (unint64_t *)&v56->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  sub_20BDE9D48((uint64_t)&p_p, v60[0]);
  v36 = v61;
  if (v61)
  {
    v37 = (unint64_t *)&v61->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  sub_20BDE9D48((uint64_t)v65, v65[1]);
  if (v64 < 0)
    operator delete(v63);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  sub_20BDE9D48((uint64_t)&v66, *((_QWORD **)&v66 + 1));
  v39 = v69;
  if (v69)
  {
    v40 = (unint64_t *)&v69->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = v77;
  if (v77)
  {
    v43 = (unint64_t *)&v77->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  sub_20BDE9D48((uint64_t)v75, v75[1]);
  return a1;
}

void sub_20C793B78(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  uint64_t v16;
  uint64_t v17;
  va_list __p;

  va_start(__p, a16);
  sub_20BDDC194((std::exception *)&STACK[0x528]);
  sub_20BDDBE98((uint64_t)__p);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v17 - 200));
  __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20C7941C8(v16);
  sub_20C7941C8(v16);
}

void sub_20C793CE8()
{
  uint64_t v0;

  sub_20BE02504(v0 - 184, 0);
  __cxa_end_catch();
  JUMPOUT(0x20C793A9CLL);
}

void sub_20C793D04()
{
  __cxa_end_catch();
  JUMPOUT(0x20C793D54);
}

void sub_20C793D10()
{
  __cxa_end_catch();
  JUMPOUT(0x20C793D54);
}

void sub_20C793D2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,_QWORD *a24)
{
  uint64_t v24;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v24 - 168));
  sub_20BDE9D48((uint64_t)&a23, a24);
  JUMPOUT(0x20C793D5CLL);
}

void sub_20C793D48()
{
  JUMPOUT(0x20C793D64);
}

void sub_20C793D50(_Unwind_Exception *a1)
{
  void **v1;
  uint64_t v2;
  uint64_t v3;

  sub_20BE02EB0(v3 - 152);
  sub_20BE5B630(v2);
  Alembic::Abc::v12::OObject::~OObject(v1);
  _Unwind_Resume(a1);
}

void sub_20C793D74(std::string *a1@<X8>)
{
  std::string *v2;
  __int128 v3;
  std::string *v4;
  std::string v5;
  std::string v6;

  sub_20BDDC0E4(&v5, ":");
  v2 = std::string::insert(&v5, 0, "AbcGeom_SubD_v1");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v6.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v6.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  v4 = std::string::append(&v6, ".geom");
  *a1 = *v4;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
}

void sub_20C793E1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C793E50(uint64_t a1, uint64_t a2)
{
  void **v4;
  __int128 v5;
  void **v6;
  __int128 v7;
  __int128 v8;

  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  std::string::operator=((std::string *)(a1 + 16), (const std::string *)(a2 + 16));
  sub_20BDE881C((_QWORD *)(a1 + 40), (uint64_t *)(a2 + 40));
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  std::string::operator=((std::string *)(a1 + 64), (const std::string *)(a2 + 64));
  sub_20BDE881C((_QWORD *)(a1 + 88), (uint64_t *)(a2 + 88));
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(a2 + 112));
  sub_20BDE881C((_QWORD *)(a1 + 136), (uint64_t *)(a2 + 136));
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  std::string::operator=((std::string *)(a1 + 160), (const std::string *)(a2 + 160));
  sub_20BDE881C((_QWORD *)(a1 + 184), (uint64_t *)(a2 + 184));
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  std::string::operator=((std::string *)(a1 + 208), (const std::string *)(a2 + 208));
  sub_20BDE881C((_QWORD *)(a1 + 232), (uint64_t *)(a2 + 232));
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  std::string::operator=((std::string *)(a1 + 256), (const std::string *)(a2 + 256));
  sub_20BDE881C((_QWORD *)(a1 + 280), (uint64_t *)(a2 + 280));
  *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 296);
  std::string::operator=((std::string *)(a1 + 304), (const std::string *)(a2 + 304));
  sub_20BDE881C((_QWORD *)(a1 + 328), (uint64_t *)(a2 + 328));
  *(_DWORD *)(a1 + 344) = *(_DWORD *)(a2 + 344);
  std::string::operator=((std::string *)(a1 + 352), (const std::string *)(a2 + 352));
  sub_20BDE881C((_QWORD *)(a1 + 376), (uint64_t *)(a2 + 376));
  *(_DWORD *)(a1 + 392) = *(_DWORD *)(a2 + 392);
  std::string::operator=((std::string *)(a1 + 400), (const std::string *)(a2 + 400));
  sub_20BDE881C((_QWORD *)(a1 + 424), (uint64_t *)(a2 + 424));
  *(_DWORD *)(a1 + 440) = *(_DWORD *)(a2 + 440);
  std::string::operator=((std::string *)(a1 + 448), (const std::string *)(a2 + 448));
  sub_20BDE881C((_QWORD *)(a1 + 472), (uint64_t *)(a2 + 472));
  *(_DWORD *)(a1 + 488) = *(_DWORD *)(a2 + 488);
  std::string::operator=((std::string *)(a1 + 496), (const std::string *)(a2 + 496));
  sub_20BDE881C((_QWORD *)(a1 + 520), (uint64_t *)(a2 + 520));
  *(_DWORD *)(a1 + 536) = *(_DWORD *)(a2 + 536);
  std::string::operator=((std::string *)(a1 + 544), (const std::string *)(a2 + 544));
  sub_20BDE881C((_QWORD *)(a1 + 568), (uint64_t *)(a2 + 568));
  *(_DWORD *)(a1 + 584) = *(_DWORD *)(a2 + 584);
  std::string::operator=((std::string *)(a1 + 592), (const std::string *)(a2 + 592));
  sub_20BDE881C((_QWORD *)(a1 + 616), (uint64_t *)(a2 + 616));
  *(_DWORD *)(a1 + 632) = *(_DWORD *)(a2 + 632);
  std::string::operator=((std::string *)(a1 + 640), (const std::string *)(a2 + 640));
  sub_20BDE881C((_QWORD *)(a1 + 664), (uint64_t *)(a2 + 664));
  *(_DWORD *)(a1 + 680) = *(_DWORD *)(a2 + 680);
  std::string::operator=((std::string *)(a1 + 688), (const std::string *)(a2 + 688));
  sub_20BDE881C((_QWORD *)(a1 + 712), (uint64_t *)(a2 + 712));
  *(_DWORD *)(a1 + 728) = *(_DWORD *)(a2 + 728);
  std::string::operator=((std::string *)(a1 + 736), (const std::string *)(a2 + 736));
  sub_20BDE881C((_QWORD *)(a1 + 760), (uint64_t *)(a2 + 760));
  *(_DWORD *)(a1 + 776) = *(_DWORD *)(a2 + 776);
  std::string::operator=((std::string *)(a1 + 784), (const std::string *)(a2 + 784));
  sub_20BDE881C((_QWORD *)(a1 + 808), (uint64_t *)(a2 + 808));
  *(_DWORD *)(a1 + 824) = *(_DWORD *)(a2 + 824);
  std::string::operator=((std::string *)(a1 + 832), (const std::string *)(a2 + 832));
  sub_20BDE881C((_QWORD *)(a1 + 856), (uint64_t *)(a2 + 856));
  *(_DWORD *)(a1 + 872) = *(_DWORD *)(a2 + 872);
  std::string::operator=((std::string *)(a1 + 880), (const std::string *)(a2 + 880));
  sub_20BDE881C((_QWORD *)(a1 + 904), (uint64_t *)(a2 + 904));
  v4 = (void **)(a1 + 920);
  if (*(char *)(a1 + 943) < 0)
    operator delete(*v4);
  v5 = *(_OWORD *)(a2 + 920);
  *(_QWORD *)(a1 + 936) = *(_QWORD *)(a2 + 936);
  *(_OWORD *)v4 = v5;
  *(_BYTE *)(a2 + 943) = 0;
  *(_BYTE *)(a2 + 920) = 0;
  *(_DWORD *)(a1 + 944) = *(_DWORD *)(a2 + 944);
  std::string::operator=((std::string *)(a1 + 952), (const std::string *)(a2 + 952));
  sub_20BDE881C((_QWORD *)(a1 + 976), (uint64_t *)(a2 + 976));
  *(_DWORD *)(a1 + 992) = *(_DWORD *)(a2 + 992);
  std::string::operator=((std::string *)(a1 + 1000), (const std::string *)(a2 + 1000));
  sub_20BDE881C((_QWORD *)(a1 + 1024), (uint64_t *)(a2 + 1024));
  *(_QWORD *)(a1 + 1040) = *(_QWORD *)(a2 + 1040);
  *(_DWORD *)(a1 + 1048) = *(_DWORD *)(a2 + 1048);
  std::string::operator=((std::string *)(a1 + 1056), (const std::string *)(a2 + 1056));
  sub_20BDE881C((_QWORD *)(a1 + 1080), (uint64_t *)(a2 + 1080));
  v6 = (void **)(a1 + 1096);
  if (*(char *)(a1 + 1119) < 0)
    operator delete(*v6);
  v7 = *(_OWORD *)(a2 + 1096);
  *(_QWORD *)(a1 + 1112) = *(_QWORD *)(a2 + 1112);
  *(_OWORD *)v6 = v7;
  *(_BYTE *)(a2 + 1119) = 0;
  *(_BYTE *)(a2 + 1096) = 0;
  sub_20C794664(a1 + 1120, (_QWORD *)(a2 + 1120));
  v8 = *(_OWORD *)(a2 + 1144);
  *(_DWORD *)(a1 + 1160) = *(_DWORD *)(a2 + 1160);
  *(_OWORD *)(a1 + 1144) = v8;
  return a1;
}

void sub_20C7941C8(uint64_t a1)
{
  sub_20BE5AB40(a1 + 56);
}

void sub_20C7941E0()
{
  uint64_t v0;

  sub_20BDEBF08((_QWORD *)(v0 + 40));
  JUMPOUT(0x212B929D0);
}

void sub_20C794200(void **a1)
{
  *a1 = &unk_24C54A898;
  sub_20BE5B630((uint64_t)(a1 + 7));
  Alembic::Abc::v12::OObject::~OObject(a1);
}

void sub_20C794234(void **a1)
{
  void *v2;

  *a1 = &unk_24C54A898;
  sub_20BE5B630((uint64_t)(a1 + 7));
  Alembic::Abc::v12::OObject::~OObject(a1);
  operator delete(v2);
}

uint64_t sub_20C79426C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_20C794550(a1);
  *(_QWORD *)v2 = &unk_24C5199E0;
  *(_DWORD *)(v2 + 248) = 2;
  sub_20BDDC0E4((_QWORD *)(v2 + 256), "");
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 304), "");
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 344) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 352), "");
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_DWORD *)(a1 + 392) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 400), "");
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  *(_DWORD *)(a1 + 440) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 448), "");
  *(_QWORD *)(a1 + 472) = 0;
  *(_QWORD *)(a1 + 480) = 0;
  *(_DWORD *)(a1 + 488) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 496), "");
  *(_QWORD *)(a1 + 528) = 0;
  *(_QWORD *)(a1 + 520) = 0;
  *(_DWORD *)(a1 + 536) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 544), "");
  *(_QWORD *)(a1 + 576) = 0;
  *(_QWORD *)(a1 + 568) = 0;
  *(_DWORD *)(a1 + 584) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 592), "");
  *(_QWORD *)(a1 + 624) = 0;
  *(_QWORD *)(a1 + 616) = 0;
  *(_DWORD *)(a1 + 632) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 640), "");
  *(_QWORD *)(a1 + 672) = 0;
  *(_QWORD *)(a1 + 664) = 0;
  *(_DWORD *)(a1 + 680) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 688), "");
  *(_QWORD *)(a1 + 720) = 0;
  *(_QWORD *)(a1 + 712) = 0;
  *(_DWORD *)(a1 + 728) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 736), "");
  *(_QWORD *)(a1 + 768) = 0;
  *(_QWORD *)(a1 + 760) = 0;
  *(_DWORD *)(a1 + 776) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 784), "");
  *(_QWORD *)(a1 + 816) = 0;
  *(_QWORD *)(a1 + 808) = 0;
  *(_DWORD *)(a1 + 824) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 832), "");
  *(_QWORD *)(a1 + 864) = 0;
  *(_QWORD *)(a1 + 856) = 0;
  *(_DWORD *)(a1 + 872) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 880), "");
  *(_QWORD *)(a1 + 912) = 0;
  *(_QWORD *)(a1 + 904) = 0;
  sub_20BE3FF78(a1 + 920);
  *(_QWORD *)(a1 + 1112) = 0;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_QWORD *)(a1 + 1120) = a1 + 1128;
  *(_BYTE *)(a1 + 1144) = 0;
  *(_QWORD *)(a1 + 1152) = 0;
  *(_DWORD *)(a1 + 1160) = 0;
  return a1;
}

void sub_20C794458(_Unwind_Exception *a1)
{
  void **v1;
  void **v2;
  void **v3;
  void **v4;

  v4 = v3;
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v4);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v1 + 103);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v1 + 97);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v1 + 91);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v1 + 85);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v1 + 79);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v1 + 73);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v1 + 67);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v1 + 61);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v1 + 55);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v1 + 49);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v1 + 43);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v1 + 37);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v2);
  sub_20BE53F18((uint64_t)v1);
  _Unwind_Resume(a1);
}

void sub_20C794500()
{
  JUMPOUT(0x20C7944A8);
}

void sub_20C794508()
{
  JUMPOUT(0x20C7944B0);
}

void sub_20C794510()
{
  JUMPOUT(0x20C7944B8);
}

void sub_20C794518()
{
  JUMPOUT(0x20C7944C0);
}

void sub_20C794520()
{
  JUMPOUT(0x20C7944C8);
}

void sub_20C794528()
{
  JUMPOUT(0x20C7944D0);
}

void sub_20C794530()
{
  JUMPOUT(0x20C7944D8);
}

void sub_20C794538()
{
  JUMPOUT(0x20C7944E0);
}

void sub_20C794540()
{
  JUMPOUT(0x20C7944E8);
}

void sub_20C794548()
{
  JUMPOUT(0x20C7944F0);
}

uint64_t sub_20C794550(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 16), "");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = off_24C519A68;
  *(_DWORD *)(a1 + 56) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 64), "");
  *(_DWORD *)(a1 + 104) = 2;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  sub_20BDDC0E4((_QWORD *)(a1 + 112), "");
  *(_DWORD *)(a1 + 152) = 2;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  sub_20BDDC0E4((_QWORD *)(a1 + 160), "");
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 200) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 208), "");
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  return a1;
}

void sub_20C794620(_Unwind_Exception *a1)
{
  void **v1;
  void **v2;
  void **v3;
  Alembic::Abc::v12::OCompoundProperty *v4;

  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v4);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v3);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v2);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v1);
  _Unwind_Resume(a1);
}

void sub_20C794664(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (_QWORD *)(a1 + 8);
  sub_20BE4D944(a1, *(_QWORD **)(a1 + 8));
  *(_QWORD *)a1 = *a2;
  v5 = a2 + 1;
  v6 = a2[1];
  *v4 = v6;
  v7 = a2[2];
  *(_QWORD *)(a1 + 16) = v7;
  if (v7)
  {
    *(_QWORD *)(v6 + 16) = v4;
    *a2 = v5;
    *v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *(_QWORD *)a1 = v4;
  }
}

_QWORD *sub_20C7946CC(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C54A8D0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20C794714(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_20C794738(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20C79474C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20C794764(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C54A920))
    return a1 + 24;
  else
    return 0;
}

_QWORD *sub_20C7947A4(_QWORD *a1)
{
  *a1 = off_24C54A360;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 1));
  return a1;
}

void sub_20C7947D4(_QWORD *a1)
{
  *a1 = off_24C54A360;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 1));
  operator delete(a1);
}

void sub_20C794804(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _BYTE *v7;
  __int128 v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  *(_DWORD *)a2 = *(_DWORD *)(v4 + 64);
  v7 = (_BYTE *)(a2 + 8);
  if (*(char *)(v4 + 95) < 0)
  {
    sub_20BDDBFAC(v7, *(void **)(v4 + 72), *(_QWORD *)(v4 + 80));
  }
  else
  {
    v8 = *(_OWORD *)(v4 + 72);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(v4 + 88);
    *(_OWORD *)v7 = v8;
  }
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v4 + 96);
  v9 = *(_QWORD *)(v4 + 104);
  *(_QWORD *)(a2 + 40) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  if (v3)
  {
    v12 = (unint64_t *)&v3->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20C7948F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

void sub_20C794904(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  sub_20C794A3C(v2 + 56, a2);
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20C79498C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

void sub_20C7949A0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  sub_20C794C7C(v2 + 56, a2);
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20C794A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

_BYTE *sub_20C794A3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _BYTE *result;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _DWORD v15[4];
  _DWORD v16[4];
  void *__p[2];
  char v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  int v21;
  std::string v22;
  uint64_t v23[4];

  v23[2] = a1 + 8;
  v23[3] = (uint64_t)"OGeomBaseSchema::getArbGeomParams()";
  v4 = *(char *)(a1 + 183);
  if (v4 < 0)
  {
    if (!*(_QWORD *)(a1 + 168))
      goto LABEL_5;
  }
  else if (!*(_BYTE *)(a1 + 183))
  {
LABEL_5:
    if (*(_QWORD *)(a1 + 184))
      goto LABEL_17;
  }
  v5 = *(std::__shared_weak_count **)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 40);
  v20 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_20BDDC0E4(__p, ".arbGeomParams");
  v16[0] = 0;
  v16[2] = 0;
  v15[0] = 0;
  v15[2] = 0;
  Alembic::Abc::v12::OCompoundProperty::OCompoundProperty(&v21, &v19, __p, v16, v15);
  *(_DWORD *)(a1 + 152) = v21;
  std::string::operator=((std::string *)(a1 + 160), &v22);
  sub_20BDE881C((_QWORD *)(a1 + 184), v23);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v21);
  if (v18 < 0)
    operator delete(__p[0]);
  v8 = v20;
  if (v20)
  {
    v9 = (unint64_t *)&v20->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  LOBYTE(v4) = *(_BYTE *)(a1 + 183);
LABEL_17:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 152);
  result = (_BYTE *)(a2 + 8);
  if ((v4 & 0x80) != 0)
  {
    result = sub_20BDDBFAC(result, *(void **)(a1 + 160), *(_QWORD *)(a1 + 168));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)(a1 + 160);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 176);
  }
  v12 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a2 + 40) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  return result;
}

void sub_20C794BC0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,char a22)
{
  uint64_t v22;
  uint64_t v23;
  void *v25;

  v25 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570(v23 - 48, (uint64_t)v25);
  else
    sub_20BE02504(v23 - 48, 0);
  __cxa_end_catch();
  *(_DWORD *)v22 = 2;
  sub_20BDDC0E4((_QWORD *)(v22 + 8), "");
  *(_QWORD *)(v22 + 32) = 0;
  *(_QWORD *)(v22 + 40) = 0;
  JUMPOUT(0x20C794BACLL);
}

void sub_20C794C5C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_BYTE *sub_20C794C7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _BYTE *result;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _DWORD v15[4];
  _DWORD v16[4];
  void *__p[2];
  char v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  int v21;
  std::string v22;
  uint64_t v23[4];

  v23[2] = a1 + 8;
  v23[3] = (uint64_t)"OGeomBaseSchema::getUserProperties()";
  v4 = *(char *)(a1 + 231);
  if (v4 < 0)
  {
    if (!*(_QWORD *)(a1 + 216))
      goto LABEL_5;
  }
  else if (!*(_BYTE *)(a1 + 231))
  {
LABEL_5:
    if (*(_QWORD *)(a1 + 232))
      goto LABEL_17;
  }
  v5 = *(std::__shared_weak_count **)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 40);
  v20 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_20BDDC0E4(__p, ".userProperties");
  v16[0] = 0;
  v16[2] = 0;
  v15[0] = 0;
  v15[2] = 0;
  Alembic::Abc::v12::OCompoundProperty::OCompoundProperty(&v21, &v19, __p, v16, v15);
  *(_DWORD *)(a1 + 200) = v21;
  std::string::operator=((std::string *)(a1 + 208), &v22);
  sub_20BDE881C((_QWORD *)(a1 + 232), v23);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v21);
  if (v18 < 0)
    operator delete(__p[0]);
  v8 = v20;
  if (v20)
  {
    v9 = (unint64_t *)&v20->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  LOBYTE(v4) = *(_BYTE *)(a1 + 231);
LABEL_17:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 200);
  result = (_BYTE *)(a2 + 8);
  if ((v4 & 0x80) != 0)
  {
    result = sub_20BDDBFAC(result, *(void **)(a1 + 208), *(_QWORD *)(a1 + 216));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)(a1 + 208);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 224);
  }
  v12 = *(_QWORD *)(a1 + 240);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 232);
  *(_QWORD *)(a2 + 40) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  return result;
}

void sub_20C794E00(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,char a22)
{
  uint64_t v22;
  uint64_t v23;
  void *v25;

  v25 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570(v23 - 48, (uint64_t)v25);
  else
    sub_20BE02504(v23 - 48, 0);
  __cxa_end_catch();
  *(_DWORD *)v22 = 2;
  sub_20BDDC0E4((_QWORD *)(v22 + 8), "");
  *(_QWORD *)(v22 + 32) = 0;
  *(_QWORD *)(v22 + 40) = 0;
  JUMPOUT(0x20C794DECLL);
}

void sub_20C794E9C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20C794EC0(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20C794ED4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20C794EEC(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C54A9E8))
    return a1 + 24;
  else
    return 0;
}

uint64_t sub_20C794F2C(uint64_t a1)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0x30000000ALL;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 48) = 0x100000006;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)(a1 + 88) = 0x100000006;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0x100000006;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_QWORD *)(a1 + 184) = 0x100000006;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_QWORD *)(a1 + 224) = 0x10000000ALL;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_QWORD *)(a1 + 264) = 0x100000006;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_QWORD *)(a1 + 304) = 0x10000000ALL;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_QWORD *)(a1 + 344) = 0x100000006;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(int64x2_t *)(a1 + 400) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(_OWORD *)(a1 + 416) = xmmword_20CA521E0;
  *(int64x2_t *)(a1 + 432) = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  *(_QWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 456) = 0x30000000ALL;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_QWORD *)(a1 + 496) = 0x20000000ALL;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_QWORD *)(a1 + 536) = 0x100000005;
  *(_QWORD *)(a1 + 552) = 0;
  *(_QWORD *)(a1 + 544) = 0;
  *(_QWORD *)(a1 + 560) = 0;
  *(_DWORD *)(a1 + 568) = 127;
  sub_20C79278C(a1);
  return a1;
}

void sub_20C795070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void **v11;
  void **v12;
  void **v13;
  void **v14;
  void **v15;
  void **v16;
  void **v17;
  _QWORD *v18;
  void **v19;
  _QWORD *v20;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;

  v20 = v18;
  sub_20BE28D2C(v20);
  v22 = *(void **)(v10 + 464);
  if (v22)
  {
    *(_QWORD *)(v10 + 472) = v22;
    operator delete(v22);
  }
  if (*(char *)(v10 + 399) < 0)
    operator delete(*(void **)(v10 + 376));
  v23 = *v11;
  if (*v11)
  {
    *(_QWORD *)(v10 + 360) = v23;
    operator delete(v23);
  }
  v24 = *v19;
  if (*v19)
  {
    *(_QWORD *)(v10 + 320) = v24;
    operator delete(v24);
  }
  v25 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v10 + 280) = v25;
    operator delete(v25);
  }
  v26 = *v17;
  if (*v17)
  {
    *(_QWORD *)(v10 + 240) = v26;
    operator delete(v26);
  }
  v27 = *v16;
  if (*v16)
  {
    *(_QWORD *)(v10 + 200) = v27;
    operator delete(v27);
  }
  v28 = *v15;
  if (*v15)
  {
    *(_QWORD *)(v10 + 160) = v28;
    operator delete(v28);
  }
  v29 = *v14;
  if (*v14)
  {
    *(_QWORD *)(v10 + 104) = v29;
    operator delete(v29);
  }
  v30 = *v13;
  if (*v13)
  {
    *(_QWORD *)(v10 + 64) = v30;
    operator delete(v30);
  }
  v31 = *v12;
  if (*v12)
  {
    *(_QWORD *)(v10 + 24) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(a1);
}

char *sub_20C79513C(uint64_t a1)
{
  char *result;

  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 127;
  *(_BYTE *)(a1 + 12) = 0;
  sub_20BDDF7E4((char *)(a1 + 16), 0, 0, 0);
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 127;
  *(_BYTE *)(a1 + 52) = 0;
  result = sub_20BDDF7E4((char *)(a1 + 56), 0, 0, 0);
  *(_DWORD *)(a1 + 80) = 127;
  return result;
}

_QWORD *sub_20C7951A0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *__p;
  _BYTE *v8;

  v6 = a3;
  sub_20BDE8894(&__p, 1uLL, &v6);
  *a1 = a2;
  a1[1] = 0x30000000ALL;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  sub_20BDE1364(a1 + 2, __p, (uint64_t)v8, (v8 - (_BYTE *)__p) >> 3);
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_20C795218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C795234(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *__p;
  _BYTE *v8;

  v6 = a3;
  sub_20BDE8894(&__p, 1uLL, &v6);
  *a1 = a2;
  a1[1] = 0x30000000ALL;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  sub_20BDE1364(a1 + 2, __p, (uint64_t)v8, (v8 - (_BYTE *)__p) >> 3);
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_20C7952AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C7952C8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *__p;
  _BYTE *v8;

  v6 = a3;
  sub_20BDE8894(&__p, 1uLL, &v6);
  *a1 = a2;
  a1[1] = 0x100000006;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  sub_20BDE1364(a1 + 2, __p, (uint64_t)v8, (v8 - (_BYTE *)__p) >> 3);
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_20C795340(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C79535C(_QWORD *a1, _DWORD *a2)
{
  _DWORD *v4;

  *a1 = 1;
  v4 = operator new(0x10uLL);
  *(_QWORD *)v4 = &unk_24C546480;
  v4[2] = *a2;
  sub_20C76527C(a1 + 1, (uint64_t)v4);
  a1[3] = 0;
  a1[4] = 0;
  return a1;
}

_QWORD *sub_20C7953B8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *__p;
  _BYTE *v8;

  v6 = a3;
  sub_20BDE8894(&__p, 1uLL, &v6);
  *a1 = a2;
  a1[1] = 0x10000000ALL;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  sub_20BDE1364(a1 + 2, __p, (uint64_t)v8, (v8 - (_BYTE *)__p) >> 3);
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_20C795430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C79544C(unint64_t *a1)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  int v11;
  uint64_t *v12;
  uint64_t **v13;
  uint64_t **v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  float v18;
  BOOL v19;
  uint64_t v20;
  float v21;
  float v22;
  BOOL v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  size_t v33;
  void (__cdecl *v34)(std::__shared_weak_count *__hidden);
  void (__cdecl *v35)(std::__shared_weak_count *__hidden);
  uint64_t v36;
  char *v37;
  void (__cdecl *v38)(std::__shared_weak_count *__hidden);
  _QWORD *v39;
  std::__shared_weak_count_vtbl *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t *v52;
  _QWORD *v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  std::__shared_weak_count_vtbl *v57;
  std::__shared_weak_count *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  uint64_t **v61;
  uint64_t *v62;
  uint64_t v63;
  _QWORD *v64;
  std::__shared_weak_count *v65;

  v2 = *a1;
  v3 = *a1 >> 1;
  v4 = operator new(0x18uLL);
  LODWORD(v56) = 0;
  v54 = v3;
  sub_20C654B14(v4, v3, &v56);
  sub_20C7958F4(&v64, (uint64_t)v4);
  v53 = v64;
  v62 = 0;
  v63 = 0;
  v61 = &v62;
  v5 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a1[1] + 16))(a1[1]);
  v51 = a1 + 1;
  v52 = (uint64_t *)a1;
  if (v2 >= 2)
  {
    v8 = v5;
    v6 = 0;
    v9 = 0;
    v55 = 0;
    v7 = 0;
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = v62;
      v13 = &v62;
      v14 = &v62;
      if (v62)
      {
        v13 = &v62;
LABEL_6:
        while (2)
        {
          v15 = 0;
          v14 = (uint64_t **)v12;
          v16 = v12[4];
          while (1)
          {
            v17 = *(float *)(v8 + v15);
            v18 = *(float *)(v16 + v15);
            if (v17 < v18)
              break;
            v19 = v18 < v17 || v15 == 4;
            v15 += 4;
            if (v19)
            {
              v20 = 0;
              do
              {
                v21 = *(float *)(v16 + v20);
                v22 = *(float *)(v8 + v20);
                if (v21 < v22)
                {
                  v13 = v14 + 1;
                  v12 = v14[1];
                  if (v12)
                    goto LABEL_6;
                  goto LABEL_27;
                }
                v23 = v22 < v21 || v20 == 4;
                v20 += 4;
              }
              while (!v23);
              if (!v14)
                goto LABEL_27;
              v24 = v14;
              goto LABEL_47;
            }
          }
          v12 = *v14;
          v13 = v14;
          if (*v14)
            continue;
          break;
        }
      }
LABEL_27:
      v24 = operator new(0x30uLL);
      v24[4] = v8;
      *((_DWORD *)v24 + 10) = v11;
      *v24 = 0;
      v24[1] = 0;
      v24[2] = v14;
      *v13 = v24;
      v25 = v24;
      if (*v61)
      {
        v61 = (uint64_t **)*v61;
        v25 = *v13;
      }
      sub_20BDDE208(v62, v25);
      ++v63;
      if (v9 >= v55)
      {
        v26 = (v9 - v6) >> 3;
        v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 61)
          sub_20BDDF694();
        if ((v55 - v6) >> 2 > v27)
          v27 = (v55 - v6) >> 2;
        if ((unint64_t)(v55 - v6) >= 0x7FFFFFFFFFFFFFF8)
          v28 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v28 = v27;
        if (v28)
        {
          if (v28 >> 61)
            sub_20BDDF5B4();
          v29 = (char *)operator new(8 * v28);
        }
        else
        {
          v29 = 0;
        }
        v30 = &v29[8 * v26];
        *(_QWORD *)v30 = v24[4];
        v7 = v30 + 8;
        if (v9 != v6)
        {
          do
          {
            v31 = *((_QWORD *)v9 - 1);
            v9 -= 8;
            *((_QWORD *)v30 - 1) = v31;
            v30 -= 8;
          }
          while (v9 != v6);
          v9 = v6;
        }
        v6 = v30;
        v55 = &v29[8 * v28];
        if (v9)
          operator delete(v9);
      }
      else
      {
        *(_QWORD *)v9 = v24[4];
        v7 = v9 + 8;
      }
      ++v11;
      v9 = v7;
LABEL_47:
      *(_DWORD *)(*v53 + 4 * v10) = *((_DWORD *)v24 + 10);
      v8 += 8;
      ++v10;
    }
    while (v10 != v3);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v32 = v7 - v6;
  if (v7 - v6 + 4 * v54 < 8 * v54)
  {
    if (v32 < 0)
      v33 = -1;
    else
      v33 = v7 - v6;
    v34 = (void (__cdecl *)(std::__shared_weak_count *__hidden))operator new[](v33);
    v35 = v34;
    if (v7 != v6)
    {
      v36 = v32 >> 3;
      v37 = v6;
      v38 = v34;
      do
      {
        v39 = *(_QWORD **)v37;
        v37 += 8;
        *(_QWORD *)v38 = *v39;
        v38 = (void (__cdecl *)(std::__shared_weak_count *__hidden))((char *)v38 + 8);
        --v36;
      }
      while (v36);
    }
    v56 = v32 >> 2;
    v40 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
    v40->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&unk_24C5472D8;
    v40->~__shared_weak_count_0 = v35;
    v57 = v40;
    v41 = (std::__shared_weak_count *)operator new(0x20uLL);
    v41->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C545DB8;
    v41->__shared_owners_ = 0;
    v41->__shared_weak_owners_ = 0;
    v41[1].__vftable = v40;
    v59 = 0;
    v60 = 0;
    v58 = v41;
    sub_20BDE881C(&v59, (uint64_t *)&v64);
    *v52 = v56;
    sub_20BDE881C(v51, (uint64_t *)&v57);
    sub_20BDE881C(v52 + 3, &v59);
    v42 = v60;
    if (v60)
    {
      p_shared_owners = (unint64_t *)&v60->__shared_owners_;
      do
        v44 = __ldaxr(p_shared_owners);
      while (__stlxr(v44 - 1, p_shared_owners));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    v45 = v58;
    if (v58)
    {
      v46 = (unint64_t *)&v58->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
  }
  if (v6)
    operator delete(v6);
  sub_20C599E48(v62);
  v48 = v65;
  if (v65)
  {
    v49 = (unint64_t *)&v65->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
}

void sub_20C795884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,_QWORD *a21)
{
  void *v21;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::_SampleForAlembic::_Holder *v22;
  uint64_t v23;
  void *v25;

  sub_20C7959C4(v22);
  operator delete(v25);
  if (v21)
    operator delete(v21);
  sub_20C599E48(a21);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v23 - 96));
  _Unwind_Resume(a1);
}

_QWORD *sub_20C7958F4(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C54AA10;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20C795944(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;

  a10 = 0;
  if (v10)
    sub_20C28D1A8((int)&a10, v10);
  _Unwind_Resume(exception_object);
}

void sub_20C795968(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_20C79597C(uint64_t a1)
{
  sub_20C28D1A8(a1 + 24, *(void ***)(a1 + 24));
}

uint64_t sub_20C795984(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C54AA60))
    return a1 + 24;
  else
    return 0;
}

void sub_20C7959C4(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::_SampleForAlembic::_Holder *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &unk_24C5472D8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    operator delete[](v2);
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::_SampleForAlembic::_Holder::~_Holder(this);
}

_QWORD *sub_20C795A00(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *__p;
  _BYTE *v8;

  v6 = a3;
  sub_20BDE8894(&__p, 1uLL, &v6);
  *a1 = a2;
  a1[1] = 0x100000005;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  sub_20BDE1364(a1 + 2, __p, (uint64_t)v8, (v8 - (_BYTE *)__p) >> 3);
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_20C795A78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C795A94(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *__p;
  _BYTE *v8;

  v6 = a3;
  sub_20BDE8894(&__p, 1uLL, &v6);
  *a1 = a2;
  a1[1] = 0x20000000ALL;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  sub_20BDE1364(a1 + 2, __p, (uint64_t)v8, (v8 - (_BYTE *)__p) >> 3);
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_20C795B0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C795B28(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v2 = *(void **)(a1 + 544);
  if (v2)
  {
    *(_QWORD *)(a1 + 552) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 504);
  if (v3)
  {
    *(_QWORD *)(a1 + 512) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 464);
  if (v4)
  {
    *(_QWORD *)(a1 + 472) = v4;
    operator delete(v4);
  }
  if (*(char *)(a1 + 399) < 0)
    operator delete(*(void **)(a1 + 376));
  v5 = *(void **)(a1 + 352);
  if (v5)
  {
    *(_QWORD *)(a1 + 360) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 312);
  if (v6)
  {
    *(_QWORD *)(a1 + 320) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 272);
  if (v7)
  {
    *(_QWORD *)(a1 + 280) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 232);
  if (v8)
  {
    *(_QWORD *)(a1 + 240) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(a1 + 192);
  if (v9)
  {
    *(_QWORD *)(a1 + 200) = v9;
    operator delete(v9);
  }
  v10 = *(void **)(a1 + 152);
  if (v10)
  {
    *(_QWORD *)(a1 + 160) = v10;
    operator delete(v10);
  }
  v11 = *(void **)(a1 + 96);
  if (v11)
  {
    *(_QWORD *)(a1 + 104) = v11;
    operator delete(v11);
  }
  v12 = *(void **)(a1 + 56);
  if (v12)
  {
    *(_QWORD *)(a1 + 64) = v12;
    operator delete(v12);
  }
  v13 = *(void **)(a1 + 16);
  if (v13)
  {
    *(_QWORD *)(a1 + 24) = v13;
    operator delete(v13);
  }
  return a1;
}

_QWORD *sub_20C795C18@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  _QWORD *result;

  v3 = a1[1];
  if ((v3 & 4) != 0)
    v4 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  else
    v4 = *a1;
  v5 = operator new[](0x10uLL);
  v6 = *(_QWORD *)(v4 + 32);
  v7 = *(_DWORD *)(v6 + 8);
  *(_QWORD *)v5 = *(_QWORD *)v6;
  v5[2] = v7;
  v5[3] = 1065353216;
  *a2 = 4;
  v8 = operator new(0x10uLL);
  *v8 = &unk_24C5472D8;
  v8[1] = v5;
  result = sub_20C76527C(a2 + 1, (uint64_t)v8);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_20C795CB0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete[](v1);
  _Unwind_Resume(a1);
}

char *sub_20C795CC4(uint64_t a1)
{
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 127;
  *(_BYTE *)(a1 + 12) = 0;
  sub_20BDDF7E4((char *)(a1 + 16), 0, 0, 0);
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 127;
  *(_BYTE *)(a1 + 52) = 0;
  sub_20BDDF7E4((char *)(a1 + 56), 0, 0, 0);
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 127;
  *(_BYTE *)(a1 + 92) = 0;
  sub_20BDDF7E4((char *)(a1 + 96), 0, 0, 0);
  *(int64x2_t *)(a1 + 120) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(_OWORD *)(a1 + 136) = xmmword_20CA521E0;
  *(int64x2_t *)(a1 + 152) = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  *(_QWORD *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 176) = 127;
  *(_BYTE *)(a1 + 180) = 0;
  sub_20BDDF7E4((char *)(a1 + 184), 0, 0, 0);
  sub_20C79513C(a1 + 208);
  return sub_20C79513C(a1 + 296);
}

void sub_20C795D94(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X2>, void (*a4)(_QWORD *, void **)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>, double a7@<D0>)
{
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName *v14;
  _QWORD **Converter;
  pxrInternal__aapl__pxrReserved__::VtValue *v16;
  _QWORD *v17;
  uint64_t v18;
  void *v19[2];
  void *__p;
  void *v21;

  v14 = (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)(a2 + 16);
  Converter = pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::GetConverter(a1, (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)(a2 + 16));
  v16 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20C78EDF8((uint64_t)a2, a7);
  LODWORD(v19[0]) = 6;
  BYTE4(v19[0]) = 1;
  sub_20C78E7FC(v14, v16, a1, (uint64_t)Converter, (int *)v19, 0, a6);
  if (sub_20C78EEDC(a6, a2, (uint64_t)v14))
  {
    v17 = (_QWORD *)(a3 + (a5 >> 1));
    if ((a5 & 1) != 0)
      a4 = *(void (**)(_QWORD *, void **))(*v17 + a4);
    v18 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a6 + 8) + 16))(*(_QWORD *)(a6 + 8));
    sub_20C7952C8(v19, v18, *(_QWORD *)a6);
    a4(v17, v19);
    if (__p)
    {
      v21 = __p;
      operator delete(__p);
    }
  }
}

void sub_20C795E9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  uint64_t v13;

  if (__p)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v13 + 24));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v13 + 8));
  _Unwind_Resume(a1);
}

char *sub_20C795ED4(char *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 5);
  *((_QWORD *)result + 5) = *(_QWORD *)a2;
  *(_QWORD *)(result + 45) = v2;
  if (result + 40 != (char *)a2)
    return sub_20BDDF7E4(result + 56, *(char **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 3);
  return result;
}

char *sub_20C795F0C(char *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 5);
  *((_QWORD *)result + 10) = *(_QWORD *)a2;
  *(_QWORD *)(result + 85) = v2;
  if (result + 80 != (char *)a2)
    return sub_20BDDF7E4(result + 96, *(char **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 3);
  return result;
}

char *sub_20C795F44(char *result, char *a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = result;
  v4 = *(_QWORD *)a2;
  *(_QWORD *)(result + 301) = *(_QWORD *)(a2 + 5);
  *((_QWORD *)result + 37) = v4;
  if (result + 296 == a2)
  {
    v6 = *((_QWORD *)a2 + 5);
    *(_QWORD *)(result + 341) = *(_QWORD *)(a2 + 45);
    *((_QWORD *)result + 42) = v6;
  }
  else
  {
    sub_20BDDF7E4(result + 312, *((char **)a2 + 2), *((_QWORD *)a2 + 3), (uint64_t)(*((_QWORD *)a2 + 3) - *((_QWORD *)a2 + 2)) >> 3);
    v5 = *((_QWORD *)a2 + 5);
    *(_QWORD *)(v3 + 341) = *(_QWORD *)(a2 + 45);
    *((_QWORD *)v3 + 42) = v5;
    result = sub_20BDDF7E4(v3 + 352, *((char **)a2 + 7), *((_QWORD *)a2 + 8), (uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 3);
  }
  *((_DWORD *)v3 + 94) = *((_DWORD *)a2 + 20);
  return result;
}

char *sub_20C795FDC(char *result, uint64_t a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 5);
  *((_QWORD *)result + 26) = *(_QWORD *)a2;
  *(_QWORD *)(result + 213) = v4;
  if (result + 208 == (char *)a2)
  {
    v6 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(result + 253) = *(_QWORD *)(a2 + 45);
    *((_QWORD *)result + 31) = v6;
  }
  else
  {
    sub_20BDDF7E4(result + 224, *(char **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 3);
    v5 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(v3 + 253) = *(_QWORD *)(a2 + 45);
    *((_QWORD *)v3 + 31) = v5;
    result = sub_20BDDF7E4(v3 + 264, *(char **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3);
  }
  *((_DWORD *)v3 + 72) = *(_DWORD *)(a2 + 80);
  return result;
}

uint64_t sub_20C79606C(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t **a4, uint64_t **a5, uint64_t **a6)
{
  _DWORD *v12;
  int v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  int v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t *v26;
  unint64_t v27;
  int v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  int v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  _QWORD *exception;
  _QWORD *v47;
  _DWORD v48[4];
  int v49;
  __int128 **p_p_p;
  _DWORD v51[4];
  _DWORD v52[4];
  void *v53[2];
  char v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  __int128 __p;
  uint64_t v58;
  __int128 *p_p;
  _QWORD *v60[3];
  std::__shared_weak_count *v61;
  std::string __str;
  void *v63;
  char v64;
  _QWORD *v65[3];
  __int128 v66;
  char v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  _DWORD *v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  const void **v75[3];
  _QWORD *v76;
  std::__shared_weak_count *v77;
  int v78;
  uint64_t v79;

  *(_DWORD *)(a1 + 8) = 2;
  v12 = (_DWORD *)(a1 + 8);
  sub_20BDDC0E4((_QWORD *)(a1 + 16), "");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = &unk_24C54AA88;
  sub_20C796CC8(a1 + 56);
  v13 = *(_DWORD *)(a2 + 8);
  *((_QWORD *)&__p + 1) = 0;
  v58 = 0;
  *(_QWORD *)&__p = (char *)&__p + 8;
  v72 = 0;
  v73 = 0;
  v74 = v13;
  sub_20BDEBF8C((uint64_t *)v75, (const void ***)&__p);
  v76 = 0;
  v77 = 0;
  v78 = 0;
  v79 = 1;
  sub_20BDE9D48((uint64_t)&__p, *((_QWORD **)&__p + 1));
  sub_20BE02E30(a4, (uint64_t)&v74);
  sub_20BE02E30(a5, (uint64_t)&v74);
  sub_20BE02E30(a6, (uint64_t)&v74);
  *v12 = v74;
  v70 = v12;
  v71 = "OSchemaObject::OSchemaObject( OObject)";
  v15 = *(_QWORD *)(a2 + 40);
  v14 = *(std::__shared_weak_count **)(a2 + 48);
  v68 = v15;
  v69 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  if (!v15)
  {
    sub_20BDDBD68((uint64_t)&__p);
    sub_20BDDC1C8(&v58, (uint64_t)"NULL Parent ObjectWriter in OSchemaObject ctor", 46);
    std::stringbuf::str();
    sub_20BDDBF20(&__str, &v66);
    if (v67 < 0)
      operator delete((void *)v66);
    exception = __cxa_allocate_exception(0x20uLL);
    v47 = sub_20BDDC09C(exception, (uint64_t)&__str);
    __cxa_throw(v47, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  sub_20BDEBF8C((uint64_t *)&v66, v75);
  if (HIDWORD(v79) == 1)
  {
    v18 = 1;
  }
  else
  {
    sub_20BDDC0E4(&__p, "schema");
    sub_20BDDC0E4(&__str, "AbcGeom_PolyMesh_v1");
    p_p = &__p;
    v19 = sub_20BDDDFDC((uint64_t **)&v66, (const void **)&__p, (uint64_t)&unk_20CAC184C, &p_p);
    std::string::operator=((std::string *)(v19 + 7), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(v58) < 0)
      operator delete((void *)__p);
    sub_20BDDC0E4(&__p, "schemaObjTitle");
    sub_20C79687C(&__str);
    p_p = &__p;
    v20 = sub_20BDDDFDC((uint64_t **)&v66, (const void **)&__p, (uint64_t)&unk_20CAC184C, &p_p);
    std::string::operator=((std::string *)(v20 + 7), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(v58) < 0)
      operator delete((void *)__p);
    sub_20BDDC0E4(&__p, "schemaBaseType");
    sub_20BDDC0E4(&__str, "AbcGeom_GeomBase_v1");
    p_p = &__p;
    v21 = sub_20BDDDFDC((uint64_t **)&v66, (const void **)&__p, (uint64_t)&unk_20CAC184C, &p_p);
    std::string::operator=((std::string *)(v21 + 7), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(v58) < 0)
      operator delete((void *)__p);
    v18 = 0;
  }
  sub_20BE0C5F0(&__str, a3, (const void ***)&v66);
  (*(void (**)(__int128 *__return_ptr, uint64_t, std::string *))(*(_QWORD *)v15 + 80))(&__p, v15, &__str);
  sub_20BDE82DC(a1 + 40, &__p);
  v22 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
  if (*((_QWORD *)&__p + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v76;
  v60[2] = v76;
  v61 = v77;
  if (v77)
  {
    v26 = (unint64_t *)&v77->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  if (v25)
  {
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v68 + 24))(&__p);
    v28 = (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)__p + 48))(__p, v25);
    v29 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
    if (*((_QWORD *)&__p + 1))
    {
      v30 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
  }
  else
  {
    v28 = v78;
  }
  v60[1] = 0;
  v60[0] = 0;
  p_p = (__int128 *)v60;
  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 40) + 40))(&v55);
  sub_20BDDC0E4(v53, ".geom");
  v32 = *v12;
  v52[0] = 1;
  v52[2] = v32;
  v51[0] = 2;
  v51[2] = v28;
  v49 = 3;
  p_p_p = &p_p;
  v48[0] = 6;
  v48[2] = v18;
  Alembic::AbcGeom::v12::OPolyMeshSchema::OPolyMeshSchema(&__p, &v55, v53, v52, v51, &v49, v48);
  sub_20C796958(a1 + 56, (uint64_t)&__p);
  sub_20BE4EF70((uint64_t)&__p);
  if (v54 < 0)
    operator delete(v53[0]);
  v33 = v56;
  if (v56)
  {
    v34 = (unint64_t *)&v56->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  sub_20BDE9D48((uint64_t)&p_p, v60[0]);
  v36 = v61;
  if (v61)
  {
    v37 = (unint64_t *)&v61->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  sub_20BDE9D48((uint64_t)v65, v65[1]);
  if (v64 < 0)
    operator delete(v63);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  sub_20BDE9D48((uint64_t)&v66, *((_QWORD **)&v66 + 1));
  v39 = v69;
  if (v69)
  {
    v40 = (unint64_t *)&v69->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = v77;
  if (v77)
  {
    v43 = (unint64_t *)&v77->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  sub_20BDE9D48((uint64_t)v75, v75[1]);
  return a1;
}

void sub_20C796680(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  uint64_t v16;
  uint64_t v17;
  va_list __p;

  va_start(__p, a16);
  sub_20BDDC194((std::exception *)&STACK[0x3F8]);
  sub_20BDDBE98((uint64_t)__p);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v17 - 200));
  __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20C796C24(v16);
  sub_20C796C24(v16);
}

void sub_20C7967F0()
{
  uint64_t v0;

  sub_20BE02504(v0 - 184, 0);
  __cxa_end_catch();
  JUMPOUT(0x20C7965A4);
}

void sub_20C79680C()
{
  __cxa_end_catch();
  JUMPOUT(0x20C79685CLL);
}

void sub_20C796818()
{
  __cxa_end_catch();
  JUMPOUT(0x20C79685CLL);
}

void sub_20C796834(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,_QWORD *a24)
{
  uint64_t v24;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v24 - 168));
  sub_20BDE9D48((uint64_t)&a23, a24);
  JUMPOUT(0x20C796864);
}

void sub_20C796850()
{
  JUMPOUT(0x20C79686CLL);
}

void sub_20C796858(_Unwind_Exception *a1)
{
  void **v1;
  uint64_t v2;
  uint64_t v3;

  sub_20BE02EB0(v3 - 152);
  sub_20BE4EF70(v2);
  Alembic::Abc::v12::OObject::~OObject(v1);
  _Unwind_Resume(a1);
}

void sub_20C79687C(std::string *a1@<X8>)
{
  std::string *v2;
  __int128 v3;
  std::string *v4;
  std::string v5;
  std::string v6;

  sub_20BDDC0E4(&v5, ":");
  v2 = std::string::insert(&v5, 0, "AbcGeom_PolyMesh_v1");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v6.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v6.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  v4 = std::string::append(&v6, ".geom");
  *a1 = *v4;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
}

void sub_20C796924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C796958(uint64_t a1, uint64_t a2)
{
  void **v4;
  __int128 v5;
  void **v6;
  __int128 v7;
  void **v8;
  __int128 v9;
  __int128 v10;

  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  std::string::operator=((std::string *)(a1 + 16), (const std::string *)(a2 + 16));
  sub_20BDE881C((_QWORD *)(a1 + 40), (uint64_t *)(a2 + 40));
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  std::string::operator=((std::string *)(a1 + 64), (const std::string *)(a2 + 64));
  sub_20BDE881C((_QWORD *)(a1 + 88), (uint64_t *)(a2 + 88));
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(a2 + 112));
  sub_20BDE881C((_QWORD *)(a1 + 136), (uint64_t *)(a2 + 136));
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  std::string::operator=((std::string *)(a1 + 160), (const std::string *)(a2 + 160));
  sub_20BDE881C((_QWORD *)(a1 + 184), (uint64_t *)(a2 + 184));
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  std::string::operator=((std::string *)(a1 + 208), (const std::string *)(a2 + 208));
  sub_20BDE881C((_QWORD *)(a1 + 232), (uint64_t *)(a2 + 232));
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  std::string::operator=((std::string *)(a1 + 256), (const std::string *)(a2 + 256));
  sub_20BDE881C((_QWORD *)(a1 + 280), (uint64_t *)(a2 + 280));
  *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 296);
  std::string::operator=((std::string *)(a1 + 304), (const std::string *)(a2 + 304));
  sub_20BDE881C((_QWORD *)(a1 + 328), (uint64_t *)(a2 + 328));
  *(_DWORD *)(a1 + 344) = *(_DWORD *)(a2 + 344);
  std::string::operator=((std::string *)(a1 + 352), (const std::string *)(a2 + 352));
  sub_20BDE881C((_QWORD *)(a1 + 376), (uint64_t *)(a2 + 376));
  *(_DWORD *)(a1 + 392) = *(_DWORD *)(a2 + 392);
  std::string::operator=((std::string *)(a1 + 400), (const std::string *)(a2 + 400));
  sub_20BDE881C((_QWORD *)(a1 + 424), (uint64_t *)(a2 + 424));
  sub_20C794664(a1 + 440, (_QWORD *)(a2 + 440));
  v4 = (void **)(a1 + 464);
  if (*(char *)(a1 + 487) < 0)
    operator delete(*v4);
  v5 = *(_OWORD *)(a2 + 464);
  *(_QWORD *)(a1 + 480) = *(_QWORD *)(a2 + 480);
  *(_OWORD *)v4 = v5;
  *(_BYTE *)(a2 + 487) = 0;
  *(_BYTE *)(a2 + 464) = 0;
  *(_DWORD *)(a1 + 488) = *(_DWORD *)(a2 + 488);
  std::string::operator=((std::string *)(a1 + 496), (const std::string *)(a2 + 496));
  sub_20BDE881C((_QWORD *)(a1 + 520), (uint64_t *)(a2 + 520));
  *(_DWORD *)(a1 + 536) = *(_DWORD *)(a2 + 536);
  std::string::operator=((std::string *)(a1 + 544), (const std::string *)(a2 + 544));
  sub_20BDE881C((_QWORD *)(a1 + 568), (uint64_t *)(a2 + 568));
  *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
  *(_DWORD *)(a1 + 592) = *(_DWORD *)(a2 + 592);
  std::string::operator=((std::string *)(a1 + 600), (const std::string *)(a2 + 600));
  sub_20BDE881C((_QWORD *)(a1 + 624), (uint64_t *)(a2 + 624));
  v6 = (void **)(a1 + 640);
  if (*(char *)(a1 + 663) < 0)
    operator delete(*v6);
  v7 = *(_OWORD *)(a2 + 640);
  *(_QWORD *)(a1 + 656) = *(_QWORD *)(a2 + 656);
  *(_OWORD *)v6 = v7;
  *(_BYTE *)(a2 + 663) = 0;
  *(_BYTE *)(a2 + 640) = 0;
  *(_DWORD *)(a1 + 664) = *(_DWORD *)(a2 + 664);
  std::string::operator=((std::string *)(a1 + 672), (const std::string *)(a2 + 672));
  sub_20BDE881C((_QWORD *)(a1 + 696), (uint64_t *)(a2 + 696));
  *(_DWORD *)(a1 + 712) = *(_DWORD *)(a2 + 712);
  std::string::operator=((std::string *)(a1 + 720), (const std::string *)(a2 + 720));
  sub_20BDE881C((_QWORD *)(a1 + 744), (uint64_t *)(a2 + 744));
  *(_QWORD *)(a1 + 760) = *(_QWORD *)(a2 + 760);
  *(_DWORD *)(a1 + 768) = *(_DWORD *)(a2 + 768);
  std::string::operator=((std::string *)(a1 + 776), (const std::string *)(a2 + 776));
  sub_20BDE881C((_QWORD *)(a1 + 800), (uint64_t *)(a2 + 800));
  v8 = (void **)(a1 + 816);
  if (*(char *)(a1 + 839) < 0)
    operator delete(*v8);
  v9 = *(_OWORD *)(a2 + 816);
  *(_QWORD *)(a1 + 832) = *(_QWORD *)(a2 + 832);
  *(_OWORD *)v8 = v9;
  *(_BYTE *)(a2 + 839) = 0;
  *(_BYTE *)(a2 + 816) = 0;
  v10 = *(_OWORD *)(a2 + 840);
  *(_DWORD *)(a1 + 856) = *(_DWORD *)(a2 + 856);
  *(_OWORD *)(a1 + 840) = v10;
  return a1;
}

void sub_20C796C24(uint64_t a1)
{
  sub_20BE4D1CC(a1 + 56);
}

void sub_20C796C3C()
{
  uint64_t v0;

  sub_20BDEBF08((_QWORD *)(v0 + 40));
  JUMPOUT(0x212B929D0);
}

void sub_20C796C5C(void **a1)
{
  *a1 = &unk_24C54AA88;
  sub_20BE4EF70((uint64_t)(a1 + 7));
  Alembic::Abc::v12::OObject::~OObject(a1);
}

void sub_20C796C90(void **a1)
{
  void *v2;

  *a1 = &unk_24C54AA88;
  sub_20BE4EF70((uint64_t)(a1 + 7));
  Alembic::Abc::v12::OObject::~OObject(a1);
  operator delete(v2);
}

uint64_t sub_20C796CC8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_20C796E30(a1);
  *(_QWORD *)v2 = &unk_24C5197C0;
  *(_DWORD *)(v2 + 248) = 2;
  sub_20BDDC0E4((_QWORD *)(v2 + 256), "");
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 304), "");
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 344) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 352), "");
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_DWORD *)(a1 + 392) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 400), "");
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 456) = 0;
  *(_QWORD *)(a1 + 440) = a1 + 448;
  sub_20BE3FF78(a1 + 464);
  sub_20BE3FEAC(a1 + 640);
  *(_QWORD *)(a1 + 848) = 0;
  *(_DWORD *)(a1 + 856) = 0;
  *(_QWORD *)(a1 + 816) = 0;
  *(_QWORD *)(a1 + 832) = 0;
  *(_QWORD *)(a1 + 824) = 0;
  *(_BYTE *)(a1 + 840) = 0;
  return a1;
}

void sub_20C796DAC(_Unwind_Exception *a1)
{
  void **v1;
  void **v2;
  uint64_t v3;
  _QWORD **v4;
  uint64_t v5;

  v5 = v3;
  sub_20BE28E38(v5);
  sub_20BE4D944((uint64_t)(v1 + 55), *v4);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v1 + 49);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v1 + 43);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v1 + 37);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v2);
  sub_20BE496F4((uint64_t)v1);
  _Unwind_Resume(a1);
}

void sub_20C796E28()
{
  JUMPOUT(0x20C796E18);
}

uint64_t sub_20C796E30(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 16), "");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = off_24C519848;
  *(_DWORD *)(a1 + 56) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 64), "");
  *(_DWORD *)(a1 + 104) = 2;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  sub_20BDDC0E4((_QWORD *)(a1 + 112), "");
  *(_DWORD *)(a1 + 152) = 2;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  sub_20BDDC0E4((_QWORD *)(a1 + 160), "");
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 200) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 208), "");
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  return a1;
}

void sub_20C796F00(_Unwind_Exception *a1)
{
  void **v1;
  void **v2;
  void **v3;
  Alembic::Abc::v12::OCompoundProperty *v4;

  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v4);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v3);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v2);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C796F44(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C54AAC0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20C796F8C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_20C796FB0(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20C796FC4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20C796FDC(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C54AB10))
    return a1 + 24;
  else
    return 0;
}

_QWORD *sub_20C79701C(_QWORD *a1)
{
  *a1 = off_24C54A360;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 1));
  return a1;
}

void sub_20C79704C(_QWORD *a1)
{
  *a1 = off_24C54A360;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 1));
  operator delete(a1);
}

void sub_20C79707C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _BYTE *v7;
  __int128 v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  *(_DWORD *)a2 = *(_DWORD *)(v4 + 64);
  v7 = (_BYTE *)(a2 + 8);
  if (*(char *)(v4 + 95) < 0)
  {
    sub_20BDDBFAC(v7, *(void **)(v4 + 72), *(_QWORD *)(v4 + 80));
  }
  else
  {
    v8 = *(_OWORD *)(v4 + 72);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(v4 + 88);
    *(_OWORD *)v7 = v8;
  }
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v4 + 96);
  v9 = *(_QWORD *)(v4 + 104);
  *(_QWORD *)(a2 + 40) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  if (v3)
  {
    v12 = (unint64_t *)&v3->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20C797168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

void sub_20C79717C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  sub_20C7972B4(v2 + 56, a2);
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20C797204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

void sub_20C797218(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  sub_20C7974F4(v2 + 56, a2);
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20C7972A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

_BYTE *sub_20C7972B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _BYTE *result;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _DWORD v15[4];
  _DWORD v16[4];
  void *__p[2];
  char v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  int v21;
  std::string v22;
  uint64_t v23[4];

  v23[2] = a1 + 8;
  v23[3] = (uint64_t)"OGeomBaseSchema::getArbGeomParams()";
  v4 = *(char *)(a1 + 183);
  if (v4 < 0)
  {
    if (!*(_QWORD *)(a1 + 168))
      goto LABEL_5;
  }
  else if (!*(_BYTE *)(a1 + 183))
  {
LABEL_5:
    if (*(_QWORD *)(a1 + 184))
      goto LABEL_17;
  }
  v5 = *(std::__shared_weak_count **)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 40);
  v20 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_20BDDC0E4(__p, ".arbGeomParams");
  v16[0] = 0;
  v16[2] = 0;
  v15[0] = 0;
  v15[2] = 0;
  Alembic::Abc::v12::OCompoundProperty::OCompoundProperty(&v21, &v19, __p, v16, v15);
  *(_DWORD *)(a1 + 152) = v21;
  std::string::operator=((std::string *)(a1 + 160), &v22);
  sub_20BDE881C((_QWORD *)(a1 + 184), v23);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v21);
  if (v18 < 0)
    operator delete(__p[0]);
  v8 = v20;
  if (v20)
  {
    v9 = (unint64_t *)&v20->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  LOBYTE(v4) = *(_BYTE *)(a1 + 183);
LABEL_17:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 152);
  result = (_BYTE *)(a2 + 8);
  if ((v4 & 0x80) != 0)
  {
    result = sub_20BDDBFAC(result, *(void **)(a1 + 160), *(_QWORD *)(a1 + 168));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)(a1 + 160);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 176);
  }
  v12 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a2 + 40) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  return result;
}

void sub_20C797438(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,char a22)
{
  uint64_t v22;
  uint64_t v23;
  void *v25;

  v25 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570(v23 - 48, (uint64_t)v25);
  else
    sub_20BE02504(v23 - 48, 0);
  __cxa_end_catch();
  *(_DWORD *)v22 = 2;
  sub_20BDDC0E4((_QWORD *)(v22 + 8), "");
  *(_QWORD *)(v22 + 32) = 0;
  *(_QWORD *)(v22 + 40) = 0;
  JUMPOUT(0x20C797424);
}

void sub_20C7974D4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_BYTE *sub_20C7974F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _BYTE *result;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _DWORD v15[4];
  _DWORD v16[4];
  void *__p[2];
  char v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  int v21;
  std::string v22;
  uint64_t v23[4];

  v23[2] = a1 + 8;
  v23[3] = (uint64_t)"OGeomBaseSchema::getUserProperties()";
  v4 = *(char *)(a1 + 231);
  if (v4 < 0)
  {
    if (!*(_QWORD *)(a1 + 216))
      goto LABEL_5;
  }
  else if (!*(_BYTE *)(a1 + 231))
  {
LABEL_5:
    if (*(_QWORD *)(a1 + 232))
      goto LABEL_17;
  }
  v5 = *(std::__shared_weak_count **)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 40);
  v20 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_20BDDC0E4(__p, ".userProperties");
  v16[0] = 0;
  v16[2] = 0;
  v15[0] = 0;
  v15[2] = 0;
  Alembic::Abc::v12::OCompoundProperty::OCompoundProperty(&v21, &v19, __p, v16, v15);
  *(_DWORD *)(a1 + 200) = v21;
  std::string::operator=((std::string *)(a1 + 208), &v22);
  sub_20BDE881C((_QWORD *)(a1 + 232), v23);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v21);
  if (v18 < 0)
    operator delete(__p[0]);
  v8 = v20;
  if (v20)
  {
    v9 = (unint64_t *)&v20->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  LOBYTE(v4) = *(_BYTE *)(a1 + 231);
LABEL_17:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 200);
  result = (_BYTE *)(a2 + 8);
  if ((v4 & 0x80) != 0)
  {
    result = sub_20BDDBFAC(result, *(void **)(a1 + 208), *(_QWORD *)(a1 + 216));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)(a1 + 208);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 224);
  }
  v12 = *(_QWORD *)(a1 + 240);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 232);
  *(_QWORD *)(a2 + 40) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  return result;
}

void sub_20C797678(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,char a22)
{
  uint64_t v22;
  uint64_t v23;
  void *v25;

  v25 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570(v23 - 48, (uint64_t)v25);
  else
    sub_20BE02504(v23 - 48, 0);
  __cxa_end_catch();
  *(_DWORD *)v22 = 2;
  sub_20BDDC0E4((_QWORD *)(v22 + 8), "");
  *(_QWORD *)(v22 + 32) = 0;
  *(_QWORD *)(v22 + 40) = 0;
  JUMPOUT(0x20C797664);
}

void sub_20C797714(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20C797738(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20C79774C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20C797764(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C54ABD8))
    return a1 + 24;
  else
    return 0;
}

uint64_t sub_20C7977A4(uint64_t a1)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0x30000000ALL;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 48) = 0x100000006;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)(a1 + 88) = 0x100000006;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(int64x2_t *)(a1 + 120) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(_OWORD *)(a1 + 136) = xmmword_20CA521E0;
  *(int64x2_t *)(a1 + 152) = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0x30000000ALL;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_QWORD *)(a1 + 216) = 0x20000000ALL;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_QWORD *)(a1 + 256) = 0x100000005;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 288) = 127;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0x30000000ALL;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_QWORD *)(a1 + 344) = 0x100000005;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_DWORD *)(a1 + 376) = 127;
  sub_20C795CC4(a1);
  return a1;
}

void sub_20C797888(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void **v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v8;

  v6 = v5;
  sub_20BE28D2C(v6);
  sub_20BE28D2C(v1 + 26);
  v8 = (void *)v1[23];
  if (v8)
  {
    v1[24] = v8;
    operator delete(v8);
  }
  sub_20C96BF64(v4, v3, v2, v1);
  _Unwind_Resume(a1);
}

void sub_20C7978D0(unint64_t *a1)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  int v11;
  uint64_t *v12;
  uint64_t **v13;
  uint64_t **v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  float v18;
  BOOL v19;
  uint64_t v20;
  float v21;
  float v22;
  BOOL v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  size_t v35;
  void (__cdecl *v36)(std::__shared_weak_count *__hidden);
  void (__cdecl *v37)(std::__shared_weak_count *__hidden);
  char *v38;
  void (__cdecl *v39)(std::__shared_weak_count *__hidden);
  uint64_t *v40;
  uint64_t v41;
  std::__shared_weak_count_vtbl *v42;
  std::__shared_weak_count *v43;
  std::__shared_weak_count *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  _QWORD *v53;
  unint64_t *v54;
  _QWORD *v55;
  char *v56;
  unint64_t v57;
  std::__shared_weak_count_vtbl *v58;
  std::__shared_weak_count *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  uint64_t **v62;
  uint64_t *v63;
  uint64_t v64;
  _QWORD *v65;
  std::__shared_weak_count *v66;

  v2 = *a1;
  v3 = *a1 / 3;
  v4 = operator new(0x18uLL);
  LODWORD(v57) = 0;
  sub_20C654B14(v4, v3, &v57);
  sub_20C7958F4(&v65, (uint64_t)v4);
  v55 = v65;
  v63 = 0;
  v64 = 0;
  v62 = &v63;
  v5 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a1[1] + 16))(a1[1]);
  v53 = a1 + 1;
  v54 = a1;
  if (v2 >= 3)
  {
    v8 = v5;
    v6 = 0;
    v9 = 0;
    v56 = 0;
    v7 = 0;
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = v63;
      v13 = &v63;
      v14 = &v63;
      if (v63)
      {
        v13 = &v63;
LABEL_6:
        while (2)
        {
          v15 = 0;
          v14 = (uint64_t **)v12;
          v16 = v12[4];
          while (1)
          {
            v17 = *(float *)(v8 + v15);
            v18 = *(float *)(v16 + v15);
            if (v17 < v18)
              break;
            v19 = v18 < v17 || v15 == 8;
            v15 += 4;
            if (v19)
            {
              v20 = 0;
              do
              {
                v21 = *(float *)(v16 + v20);
                v22 = *(float *)(v8 + v20);
                if (v21 < v22)
                {
                  v13 = v14 + 1;
                  v12 = v14[1];
                  if (v12)
                    goto LABEL_6;
                  goto LABEL_27;
                }
                v23 = v22 < v21 || v20 == 8;
                v20 += 4;
              }
              while (!v23);
              if (!v14)
                goto LABEL_27;
              v24 = v14;
              goto LABEL_47;
            }
          }
          v12 = *v14;
          v13 = v14;
          if (*v14)
            continue;
          break;
        }
      }
LABEL_27:
      v24 = operator new(0x30uLL);
      v24[4] = v8;
      *((_DWORD *)v24 + 10) = v11;
      *v24 = 0;
      v24[1] = 0;
      v24[2] = v14;
      *v13 = v24;
      v25 = v24;
      if (*v62)
      {
        v62 = (uint64_t **)*v62;
        v25 = *v13;
      }
      sub_20BDDE208(v63, v25);
      ++v64;
      if (v9 >= v56)
      {
        v26 = (v9 - v6) >> 3;
        v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 61)
          sub_20BDDF694();
        if ((v56 - v6) >> 2 > v27)
          v27 = (v56 - v6) >> 2;
        if ((unint64_t)(v56 - v6) >= 0x7FFFFFFFFFFFFFF8)
          v28 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v28 = v27;
        if (v28)
        {
          if (v28 >> 61)
            sub_20BDDF5B4();
          v29 = (char *)operator new(8 * v28);
        }
        else
        {
          v29 = 0;
        }
        v30 = &v29[8 * v26];
        *(_QWORD *)v30 = v24[4];
        v7 = v30 + 8;
        if (v9 != v6)
        {
          do
          {
            v31 = *((_QWORD *)v9 - 1);
            v9 -= 8;
            *((_QWORD *)v30 - 1) = v31;
            v30 -= 8;
          }
          while (v9 != v6);
          v9 = v6;
        }
        v6 = v30;
        v56 = &v29[8 * v28];
        if (v9)
          operator delete(v9);
      }
      else
      {
        *(_QWORD *)v9 = v24[4];
        v7 = v9 + 8;
      }
      ++v11;
      v9 = v7;
LABEL_47:
      *(_DWORD *)(*v55 + 4 * v10) = *((_DWORD *)v24 + 10);
      v8 += 12;
      ++v10;
    }
    while (v10 != v3);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v32 = v7 - v6;
  if (12 * v3 > 4 * (((unint64_t)(v7 - v6) >> 2) + ((v7 - v6) >> 3)) + 4 * v3)
  {
    v33 = v32 >> 3;
    v34 = 3 * (v32 >> 3);
    if (v34 >> 62)
      v35 = -1;
    else
      v35 = 4 * (((unint64_t)(v7 - v6) >> 2) + ((v7 - v6) >> 3));
    v36 = (void (__cdecl *)(std::__shared_weak_count *__hidden))operator new[](v35);
    v37 = v36;
    if (v7 != v6)
    {
      v38 = v6;
      v39 = v36;
      do
      {
        v40 = *(uint64_t **)v38;
        v38 += 8;
        v41 = *v40;
        *((_DWORD *)v39 + 2) = *((_DWORD *)v40 + 2);
        *(_QWORD *)v39 = v41;
        v39 = (void (__cdecl *)(std::__shared_weak_count *__hidden))((char *)v39 + 12);
        --v33;
      }
      while (v33);
    }
    v57 = v34;
    v42 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
    v42->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&unk_24C5472D8;
    v42->~__shared_weak_count_0 = v37;
    v58 = v42;
    v43 = (std::__shared_weak_count *)operator new(0x20uLL);
    v43->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C545DB8;
    v43->__shared_owners_ = 0;
    v43->__shared_weak_owners_ = 0;
    v43[1].__vftable = v42;
    v60 = 0;
    v61 = 0;
    v59 = v43;
    sub_20BDE881C(&v60, (uint64_t *)&v65);
    *v54 = v57;
    sub_20BDE881C(v53, (uint64_t *)&v58);
    sub_20BDE881C(v54 + 3, &v60);
    v44 = v61;
    if (v61)
    {
      p_shared_owners = (unint64_t *)&v61->__shared_owners_;
      do
        v46 = __ldaxr(p_shared_owners);
      while (__stlxr(v46 - 1, p_shared_owners));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    v47 = v59;
    if (v59)
    {
      v48 = (unint64_t *)&v59->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
  }
  if (v6)
    operator delete(v6);
  sub_20C599E48(v63);
  v50 = v66;
  if (v66)
  {
    v51 = (unint64_t *)&v66->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
}

void sub_20C797D34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,_QWORD *a21)
{
  void *v21;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::_SampleForAlembic::_Holder *v22;
  uint64_t v23;
  void *v25;

  sub_20C7959C4(v22);
  operator delete(v25);
  if (v21)
    operator delete(v21);
  sub_20C599E48(a21);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v23 - 96));
  _Unwind_Resume(a1);
}

_QWORD *sub_20C797DA4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *__p;
  _BYTE *v8;

  v6 = a3;
  sub_20BDE8894(&__p, 1uLL, &v6);
  *a1 = a2;
  a1[1] = 0x30000000ALL;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  sub_20BDE1364(a1 + 2, __p, (uint64_t)v8, (v8 - (_BYTE *)__p) >> 3);
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_20C797E1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C797E38(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v2 = (void *)a1[44];
  if (v2)
  {
    a1[45] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[39];
  if (v3)
  {
    a1[40] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[33];
  if (v4)
  {
    a1[34] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[28];
  if (v5)
  {
    a1[29] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[23];
  if (v6)
  {
    a1[24] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[12];
  if (v7)
  {
    a1[13] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[7];
  if (v8)
  {
    a1[8] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[2];
  if (v9)
  {
    a1[3] = v9;
    operator delete(v9);
  }
  return a1;
}

_QWORD *sub_20C797ED8(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;

  v4 = operator new(0x18uLL);
  v5 = v4;
  v6 = *a2;
  v7 = (std::__shared_weak_count *)a2[1];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *v4 = off_24C54A360;
    v4[1] = v6;
    v4[2] = v7;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  else
  {
    v4[1] = v6;
    v4[2] = 0;
  }
  *v5 = off_24C54AD88;
  *a1 = v5;
  v12 = operator new(0x20uLL);
  *v12 = &off_24C54ADD8;
  v12[1] = 0;
  v12[2] = 0;
  v12[3] = v5;
  a1[1] = v12;
  return a1;
}

void sub_20C797FAC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_24C54A360;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v1 + 1));
  operator delete(v1);
  _Unwind_Resume(a1);
}

int64x2_t sub_20C797FD4(int64x2_t *a1)
{
  int64x2_t result;

  a1->i64[0] = 0;
  a1->i32[2] = 127;
  a1->i8[12] = 0;
  sub_20BDDF7E4(a1[1].i8, 0, 0, 0);
  a1[25].i64[0] = 0;
  a1[25].i32[2] = 127;
  a1[25].i8[12] = 0;
  sub_20BDDF7E4(a1[26].i8, 0, 0, 0);
  a1[2].i64[1] = 0;
  a1[3].i32[0] = 127;
  a1[3].i8[4] = 0;
  sub_20BDDF7E4(&a1[3].i8[8], 0, 0, 0);
  sub_20C79513C((uint64_t)&a1[13].i64[1]);
  sub_20C79513C((uint64_t)a1[19].i64);
  sub_20C79513C((uint64_t)a1[8].i64);
  a1[5].i64[0] = 0;
  a1[5].i32[2] = 127;
  a1[5].i8[12] = 0;
  sub_20BDDF7E4(a1[6].i8, 0, 0, 0);
  a1[27].i64[1] = 0;
  a1[28].i32[0] = 127;
  a1[28].i8[4] = 0;
  sub_20BDDF7E4(&a1[28].i8[8], 0, 0, 0);
  a1[30].i64[0] = 0;
  a1[30].i32[2] = 127;
  a1[30].i8[12] = 0;
  sub_20BDDF7E4(a1[31].i8, 0, 0, 0);
  a1[32].i64[1] = 0x7FEFFFFFFFFFFFFFLL;
  result = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  a1[33] = result;
  a1[34] = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  a1[35].i64[0] = 0xFFEFFFFFFFFFFFFFLL;
  a1[7].i64[1] = 0;
  a1[24].i32[2] = 1;
  return result;
}

uint64_t sub_20C7980F4(uint64_t a1, uint64_t a2, double a3)
{
  _QWORD *v4;
  pxrInternal__aapl__pxrReserved__::VtValue *v5;
  const std::type_info *v6;
  char *v7;
  uint64_t v8;
  float32x2_t *v9;
  char *v10;
  void **v11;
  void *v13[2];
  char v14;
  void *__p[2];
  char v16;
  _QWORD v17[4];
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20C78EDF8(a1, a3);
  v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20BF4C6D0(&v19, v4);
  if (sub_20BF5B118(v5))
  {
    if ((v20 & 4) != 0)
      v8 = (*(uint64_t (**)(uint64_t *))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(&v19);
    else
      v8 = v19;
    v9 = *(float32x2_t **)(v8 + 32);
    *(float64x2_t *)(a2 + 520) = vcvtq_f64_f32(*v9);
    *(float64x2_t *)(a2 + 536) = vcvtq_f64_f32(v9[1]);
    *(float64x2_t *)(a2 + 552) = vcvtq_f64_f32(v9[2]);
  }
  else
  {
    v17[0] = "usdAbc/alembicWriter.cpp";
    v17[1] = "_CopySelfBounds";
    v17[2] = 1759;
    v17[3] = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_CopySelfBounds(double, const UsdSamples &, D"
             "ST *) [DST = Alembic::AbcGeom::v12::OCurvesSchema::Sample]";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((pxrInternal__aapl__pxrReserved__::VtValue *)&v19, v6, v7, (uint64_t)v13);
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((uint64_t)v13, (uint64_t)__p);
    if (v16 >= 0)
      v11 = __p;
    else
      v11 = (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v17, (pxrInternal__aapl__pxrReserved__ *)"Expected type 'VtArray<GfVec3f>', got '%s'", v10, v11);
    if (v16 < 0)
      operator delete(__p[0]);
    if (v14 < 0)
      operator delete(v13[0]);
  }
  return sub_20BF4C2D8((uint64_t)&v19);
}

void sub_20C79823C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  sub_20BF4C2D8(v22 - 40);
  _Unwind_Resume(a1);
}

void sub_20C798290(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName *v10;
  _QWORD **Converter;
  pxrInternal__aapl__pxrReserved__::VtValue *v12;
  uint64_t v13;
  _BYTE v14[13];
  void *__p;
  _BYTE *v16;

  v10 = (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)(a2 + 16);
  Converter = pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::GetConverter(a1, (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)(a2 + 16));
  v12 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20C78EDF8((uint64_t)a2, a5);
  *(_DWORD *)v14 = 10;
  v14[4] = 3;
  sub_20C78E7FC(v10, v12, a1, (uint64_t)Converter, (int *)v14, 0, a4);
  if (sub_20C78EEDC(a4, a2, (uint64_t)v10))
  {
    v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a4 + 8) + 16))(*(_QWORD *)(a4 + 8));
    sub_20C7951A0(v14, v13, *(_QWORD *)a4 / 3uLL);
    *(_QWORD *)a3 = *(_QWORD *)v14;
    *(_QWORD *)(a3 + 5) = *(_QWORD *)&v14[5];
    if (v14 != (_BYTE *)a3)
      sub_20BDDF7E4((char *)(a3 + 16), (char *)__p, (uint64_t)v16, (v16 - (_BYTE *)__p) >> 3);
    if (__p)
    {
      v16 = __p;
      operator delete(__p);
    }
  }
}

void sub_20C7983AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  uint64_t v13;

  if (__p)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v13 + 24));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v13 + 8));
  _Unwind_Resume(a1);
}

void sub_20C7983E4(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName *v10;
  _QWORD **Converter;
  pxrInternal__aapl__pxrReserved__::VtValue *v12;
  uint64_t v13;
  _BYTE v14[13];
  void *__p;
  _BYTE *v16;

  v10 = (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)(a2 + 16);
  Converter = pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::GetConverter(a1, (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)(a2 + 16));
  v12 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20C78EDF8((uint64_t)a2, a5);
  *(_DWORD *)v14 = 10;
  v14[4] = 3;
  sub_20C78E7FC(v10, v12, a1, (uint64_t)Converter, (int *)v14, 0, a4);
  if (sub_20C78EEDC(a4, a2, (uint64_t)v10))
  {
    v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a4 + 8) + 16))(*(_QWORD *)(a4 + 8));
    sub_20C795234(v14, v13, *(_QWORD *)a4 / 3uLL);
    *(_QWORD *)(a3 + 40) = *(_QWORD *)v14;
    *(_QWORD *)(a3 + 45) = *(_QWORD *)&v14[5];
    if ((_BYTE *)(a3 + 40) != v14)
      sub_20BDDF7E4((char *)(a3 + 56), (char *)__p, (uint64_t)v16, (v16 - (_BYTE *)__p) >> 3);
    if (__p)
    {
      v16 = __p;
      operator delete(__p);
    }
  }
}

void sub_20C798504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  uint64_t v13;

  if (__p)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v13 + 24));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v13 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_20C79853C@<X0>(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion *a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName *v10;
  _QWORD **Converter;
  pxrInternal__aapl__pxrReserved__::VtValue *v12;
  uint64_t result;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v14;
  uint64_t *v15;
  int v16;
  uint64_t *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26[2];
  void *v27;
  void *v28;
  _BYTE v29[13];
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *__p;
  void *v36;
  uint64_t v37;
  int v38;
  _BYTE v39[13];
  void *v40;
  _BYTE *v41;
  uint64_t *v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v10 = (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)(a2 + 64);
  Converter = pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::GetConverter(a1, (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)(a2 + 64));
  v12 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20C78EDF8(a2, a5);
  *(_DWORD *)v29 = 10;
  v29[4] = 3;
  sub_20C78E7FC(v10, v12, a1, (uint64_t)Converter, (int *)v29, 0, a4);
  result = sub_20C78EEDC(a4, (_DWORD *)a2, (uint64_t)v10);
  if ((result & 1) == 0)
    return result;
  v14 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v14)
    v14 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 8) + 136))(&v44, *(_QWORD *)(a2 + 8), a2, (uint64_t)v14 + 488);
  if (sub_20BFB5E50((pxrInternal__aapl__pxrReserved__::VtValue *)&v44))
  {
    if ((v45 & 4) != 0)
      v15 = (uint64_t *)(*(uint64_t (**)(uint64_t *))((v45 & 0xFFFFFFFFFFFFFFF8) + 168))(&v44);
    else
      v15 = &v44;
    v16 = sub_20C78E510(v15);
  }
  else
  {
    v16 = 127;
  }
  sub_20C7978D0((unint64_t *)a4);
  v17 = *(uint64_t **)(a4 + 24);
  v18 = *(std::__shared_weak_count **)(a4 + 32);
  v42 = v17;
  v43 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
  }
  if (v17)
  {
    sub_20C795A00(v39, *v17, (v17[1] - *v17) >> 2);
    v21 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a4 + 8) + 16))(*(_QWORD *)(a4 + 8));
    sub_20C797DA4(v26, v21, *(_QWORD *)a4 / 3uLL);
    sub_20BE2C9F0((uint64_t)v29, v26, (uint64_t *)v39, v16);
    sub_20C7988E4(a3, v29);
    if (__p)
    {
      v36 = __p;
      operator delete(__p);
    }
    if (v30)
    {
      v31 = v30;
      operator delete(v30);
    }
    v22 = v27;
    if (!v27)
      goto LABEL_24;
    v28 = v27;
  }
  else
  {
    v23 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a4 + 8) + 16))(*(_QWORD *)(a4 + 8));
    sub_20C797DA4(v39, v23, *(_QWORD *)a4 / 3uLL);
    *(_QWORD *)v29 = *(_QWORD *)v39;
    *(_QWORD *)&v29[5] = *(_QWORD *)&v39[5];
    v30 = 0;
    v31 = 0;
    v32 = 0;
    sub_20BDE1364(&v30, v40, (uint64_t)v41, (v41 - (_BYTE *)v40) >> 3);
    v33 = 0;
    v34 = 0x100000005;
    v36 = 0;
    v37 = 0;
    __p = 0;
    v38 = v16;
    sub_20C7988E4(a3, v29);
    if (__p)
    {
      v36 = __p;
      operator delete(__p);
    }
    v22 = v30;
    if (!v30)
      goto LABEL_24;
    v31 = v30;
  }
  operator delete(v22);
LABEL_24:
  if (v40)
  {
    v41 = v40;
    operator delete(v40);
  }
  if (v18)
  {
    v24 = (unint64_t *)&v18->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  return sub_20BF4C2D8((uint64_t)&v44);
}

void sub_20C798844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  uint64_t v28;
  uint64_t v29;

  sub_20BE28D2C(&a14);
  if (__p)
  {
    a28 = (uint64_t)__p;
    operator delete(__p);
  }
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v29 - 120));
  sub_20BF4C2D8(v29 - 104);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v28 + 24));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v28 + 8));
  _Unwind_Resume(a1);
}

char *sub_20C7988E4(char *result, char *a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = result;
  v4 = *(_QWORD *)a2;
  *(_QWORD *)(result + 309) = *(_QWORD *)(a2 + 5);
  *((_QWORD *)result + 38) = v4;
  if (result + 304 == a2)
  {
    v6 = *((_QWORD *)a2 + 5);
    *(_QWORD *)(result + 349) = *(_QWORD *)(a2 + 45);
    *((_QWORD *)result + 43) = v6;
  }
  else
  {
    sub_20BDDF7E4(result + 320, *((char **)a2 + 2), *((_QWORD *)a2 + 3), (uint64_t)(*((_QWORD *)a2 + 3) - *((_QWORD *)a2 + 2)) >> 3);
    v5 = *((_QWORD *)a2 + 5);
    *(_QWORD *)(v3 + 349) = *(_QWORD *)(a2 + 45);
    *((_QWORD *)v3 + 43) = v5;
    result = sub_20BDDF7E4(v3 + 360, *((char **)a2 + 7), *((_QWORD *)a2 + 8), (uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 3);
  }
  *((_DWORD *)v3 + 96) = *((_DWORD *)a2 + 20);
  return result;
}

void sub_20C79897C(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName *v10;
  _QWORD **Converter;
  pxrInternal__aapl__pxrReserved__::VtValue *v12;
  uint64_t v13;
  _BYTE v14[13];
  void *__p;
  _BYTE *v16;

  v10 = (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)(a2 + 16);
  Converter = pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::GetConverter(a1, (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)(a2 + 16));
  v12 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20C78EDF8((uint64_t)a2, a5);
  *(_DWORD *)v14 = 6;
  v14[4] = 1;
  sub_20C78E7FC(v10, v12, a1, (uint64_t)Converter, (int *)v14, 0, a4);
  if (sub_20C78EEDC(a4, a2, (uint64_t)v10))
  {
    v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a4 + 8) + 16))(*(_QWORD *)(a4 + 8));
    sub_20C7952C8(v14, v13, *(_QWORD *)a4);
    *(_QWORD *)(a3 + 80) = *(_QWORD *)v14;
    *(_QWORD *)(a3 + 85) = *(_QWORD *)&v14[5];
    if ((_BYTE *)(a3 + 80) != v14)
      sub_20BDDF7E4((char *)(a3 + 96), (char *)__p, (uint64_t)v16, (v16 - (_BYTE *)__p) >> 3);
    if (__p)
    {
      v16 = __p;
      operator delete(__p);
    }
  }
}

void sub_20C798A8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  uint64_t v13;

  if (__p)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v13 + 24));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v13 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_20C798AC4@<X0>(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion *a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName *v10;
  _QWORD **Converter;
  pxrInternal__aapl__pxrReserved__::VtValue *v12;
  uint64_t result;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v14;
  uint64_t *v15;
  int v16;
  uint64_t *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26[2];
  void *v27;
  void *v28;
  _BYTE v29[13];
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *__p;
  void *v36;
  uint64_t v37;
  int v38;
  _BYTE v39[13];
  void *v40;
  _BYTE *v41;
  uint64_t *v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v10 = (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)(a2 + 64);
  Converter = pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::GetConverter(a1, (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)(a2 + 64));
  v12 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20C78EDF8(a2, a5);
  *(_DWORD *)v29 = 10;
  v29[4] = 1;
  sub_20C78E7FC(v10, v12, a1, (uint64_t)Converter, (int *)v29, 0, a4);
  result = sub_20C78EEDC(a4, (_DWORD *)a2, (uint64_t)v10);
  if ((result & 1) == 0)
    return result;
  v14 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v14)
    v14 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 8) + 136))(&v44, *(_QWORD *)(a2 + 8), a2, (uint64_t)v14 + 488);
  if (sub_20BFB5E50((pxrInternal__aapl__pxrReserved__::VtValue *)&v44))
  {
    if ((v45 & 4) != 0)
      v15 = (uint64_t *)(*(uint64_t (**)(uint64_t *))((v45 & 0xFFFFFFFFFFFFFFF8) + 168))(&v44);
    else
      v15 = &v44;
    v16 = sub_20C78E510(v15);
  }
  else
  {
    v16 = 127;
  }
  sub_20C79BCF8((unint64_t *)a4);
  v17 = *(uint64_t **)(a4 + 24);
  v18 = *(std::__shared_weak_count **)(a4 + 32);
  v42 = v17;
  v43 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
  }
  if (v17)
  {
    sub_20C795A00(v39, *v17, (v17[1] - *v17) >> 2);
    v21 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a4 + 8) + 16))(*(_QWORD *)(a4 + 8));
    sub_20C7953B8(v26, v21, *(_QWORD *)a4);
    sub_20BE2DF60((uint64_t)v29, v26, (uint64_t *)v39, v16);
    sub_20C798E4C(a3, (uint64_t)v29);
    if (__p)
    {
      v36 = __p;
      operator delete(__p);
    }
    if (v30)
    {
      v31 = v30;
      operator delete(v30);
    }
    v22 = v27;
    if (!v27)
      goto LABEL_24;
    v28 = v27;
  }
  else
  {
    v23 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a4 + 8) + 16))(*(_QWORD *)(a4 + 8));
    sub_20C7953B8(v39, v23, *(_QWORD *)a4);
    *(_QWORD *)v29 = *(_QWORD *)v39;
    *(_QWORD *)&v29[5] = *(_QWORD *)&v39[5];
    v30 = 0;
    v31 = 0;
    v32 = 0;
    sub_20BDE1364(&v30, v40, (uint64_t)v41, (v41 - (_BYTE *)v40) >> 3);
    v33 = 0;
    v34 = 0x100000005;
    v36 = 0;
    v37 = 0;
    __p = 0;
    v38 = v16;
    sub_20C798E4C(a3, (uint64_t)v29);
    if (__p)
    {
      v36 = __p;
      operator delete(__p);
    }
    v22 = v30;
    if (!v30)
      goto LABEL_24;
    v31 = v30;
  }
  operator delete(v22);
LABEL_24:
  if (v40)
  {
    v41 = v40;
    operator delete(v40);
  }
  if (v18)
  {
    v24 = (unint64_t *)&v18->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  return sub_20BF4C2D8((uint64_t)&v44);
}

void sub_20C798DAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  uint64_t v28;
  uint64_t v29;

  sub_20BE28D2C(&a14);
  if (__p)
  {
    a28 = (uint64_t)__p;
    operator delete(__p);
  }
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v29 - 120));
  sub_20BF4C2D8(v29 - 104);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v28 + 24));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v28 + 8));
  _Unwind_Resume(a1);
}

char *sub_20C798E4C(char *result, uint64_t a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 5);
  *((_QWORD *)result + 16) = *(_QWORD *)a2;
  *(_QWORD *)(result + 133) = v4;
  if (result + 128 == (char *)a2)
  {
    v6 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(result + 173) = *(_QWORD *)(a2 + 45);
    *((_QWORD *)result + 21) = v6;
  }
  else
  {
    sub_20BDDF7E4(result + 144, *(char **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 3);
    v5 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(v3 + 173) = *(_QWORD *)(a2 + 45);
    *((_QWORD *)v3 + 21) = v5;
    result = sub_20BDDF7E4(v3 + 184, *(char **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3);
  }
  *((_DWORD *)v3 + 52) = *(_DWORD *)(a2 + 80);
  return result;
}

void sub_20C798EDC(uint64_t a1@<X0>, int64_t *a2@<X8>)
{
  uint64_t v3;
  unint64_t *v4;
  double *v5;
  unint64_t v6;
  double *v7;
  void *__p;
  _BYTE *v9;
  uint64_t v10;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    v4 = (unint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  else
    v4 = *(unint64_t **)a1;
  v5 = (double *)v4[4];
  v6 = *v4;
  v7 = &v5[*v4];
  v9 = 0;
  v10 = 0;
  __p = 0;
  sub_20C79C158((char *)&__p, v5, v7, v6);
  *a2 = (v9 - (_BYTE *)__p) >> 2;
  sub_20C79C1CC((uint64_t)&__p, a2 + 1);
  a2[3] = 0;
  a2[4] = 0;
  if (__p)
  {
    v9 = __p;
    operator delete(__p);
  }
}

void sub_20C798F68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C798F84(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  size_t *v4;
  int *v5;
  size_t v6;
  int *v7;
  void *__p;
  _BYTE *v9;
  uint64_t v10;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    v4 = (size_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  else
    v4 = *(size_t **)a1;
  v5 = (int *)v4[4];
  v6 = *v4;
  v7 = &v5[*v4];
  v9 = 0;
  v10 = 0;
  __p = 0;
  sub_20C79C2E0((char *)&__p, v5, v7, v6);
  *a2 = v9 - (_BYTE *)__p;
  sub_20C79C350((uint64_t)&__p, a2 + 1);
  a2[3] = 0;
  a2[4] = 0;
  if (__p)
  {
    v9 = __p;
    operator delete(__p);
  }
}

void sub_20C79900C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C799028(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t **a4, uint64_t **a5, uint64_t **a6)
{
  _DWORD *v12;
  int v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  int v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t *v26;
  unint64_t v27;
  int v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  int v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  _QWORD *exception;
  _QWORD *v47;
  uint64_t *v48;
  int v49;
  uint64_t *v50[2];
  uint64_t *v51;
  int v52;
  uint64_t *v53;
  int v54;
  void *v55[2];
  char v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  __int128 __p;
  uint64_t v60;
  __int128 *p_p;
  _QWORD *v62[3];
  std::__shared_weak_count *v63;
  std::string __str;
  void *v65;
  char v66;
  _QWORD *v67[3];
  __int128 v68;
  char v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  _DWORD *v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  const void **v77[3];
  _QWORD *v78;
  std::__shared_weak_count *v79;
  int v80;
  uint64_t v81;

  *(_DWORD *)(a1 + 8) = 2;
  v12 = (_DWORD *)(a1 + 8);
  sub_20BDDC0E4((_QWORD *)(a1 + 16), "");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = &unk_24C54AC00;
  sub_20C799D44(a1 + 56);
  v13 = *(_DWORD *)(a2 + 8);
  *((_QWORD *)&__p + 1) = 0;
  v60 = 0;
  *(_QWORD *)&__p = (char *)&__p + 8;
  v74 = 0;
  v75 = 0;
  v76 = v13;
  sub_20BDEBF8C((uint64_t *)v77, (const void ***)&__p);
  v78 = 0;
  v79 = 0;
  v80 = 0;
  v81 = 1;
  sub_20BDE9D48((uint64_t)&__p, *((_QWORD **)&__p + 1));
  sub_20BE02E30(a4, (uint64_t)&v76);
  sub_20BE02E30(a5, (uint64_t)&v76);
  sub_20BE02E30(a6, (uint64_t)&v76);
  *v12 = v76;
  v72 = v12;
  v73 = "OSchemaObject::OSchemaObject( OObject)";
  v15 = *(_QWORD *)(a2 + 40);
  v14 = *(std::__shared_weak_count **)(a2 + 48);
  v70 = v15;
  v71 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  if (!v15)
  {
    sub_20BDDBD68((uint64_t)&__p);
    sub_20BDDC1C8(&v60, (uint64_t)"NULL Parent ObjectWriter in OSchemaObject ctor", 46);
    std::stringbuf::str();
    sub_20BDDBF20(&__str, &v68);
    if (v69 < 0)
      operator delete((void *)v68);
    exception = __cxa_allocate_exception(0x20uLL);
    v47 = sub_20BDDC09C(exception, (uint64_t)&__str);
    __cxa_throw(v47, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  sub_20BDEBF8C((uint64_t *)&v68, v77);
  if (HIDWORD(v81) == 1)
  {
    v18 = 1;
  }
  else
  {
    sub_20BDDC0E4(&__p, "schema");
    sub_20BDDC0E4(&__str, "AbcGeom_Curve_v2");
    p_p = &__p;
    v19 = sub_20BDDDFDC((uint64_t **)&v68, (const void **)&__p, (uint64_t)&unk_20CAC184C, &p_p);
    std::string::operator=((std::string *)(v19 + 7), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(v60) < 0)
      operator delete((void *)__p);
    sub_20BDDC0E4(&__p, "schemaObjTitle");
    sub_20C799838(&__str);
    p_p = &__p;
    v20 = sub_20BDDDFDC((uint64_t **)&v68, (const void **)&__p, (uint64_t)&unk_20CAC184C, &p_p);
    std::string::operator=((std::string *)(v20 + 7), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(v60) < 0)
      operator delete((void *)__p);
    sub_20BDDC0E4(&__p, "schemaBaseType");
    sub_20BDDC0E4(&__str, "AbcGeom_GeomBase_v1");
    p_p = &__p;
    v21 = sub_20BDDDFDC((uint64_t **)&v68, (const void **)&__p, (uint64_t)&unk_20CAC184C, &p_p);
    std::string::operator=((std::string *)(v21 + 7), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(v60) < 0)
      operator delete((void *)__p);
    v18 = 0;
  }
  sub_20BE0C5F0(&__str, a3, (const void ***)&v68);
  (*(void (**)(__int128 *__return_ptr, uint64_t, std::string *))(*(_QWORD *)v15 + 80))(&__p, v15, &__str);
  sub_20BDE82DC(a1 + 40, &__p);
  v22 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
  if (*((_QWORD *)&__p + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v78;
  v62[2] = v78;
  v63 = v79;
  if (v79)
  {
    v26 = (unint64_t *)&v79->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  if (v25)
  {
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v70 + 24))(&__p);
    v28 = (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)__p + 48))(__p, v25);
    v29 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
    if (*((_QWORD *)&__p + 1))
    {
      v30 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
  }
  else
  {
    v28 = v80;
  }
  v62[1] = 0;
  v62[0] = 0;
  p_p = (__int128 *)v62;
  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 40) + 40))(&v57);
  sub_20BDDC0E4(v55, ".geom");
  v32 = *v12;
  LODWORD(v53) = 1;
  v54 = v32;
  LODWORD(v51) = 2;
  v52 = v28;
  LODWORD(v50[0]) = 3;
  v50[1] = (uint64_t *)&p_p;
  LODWORD(v48) = 6;
  v49 = v18;
  sub_20C79A37C((uint64_t)&__p, &v57, (uint64_t)v55, &v53, &v51, v50, &v48);
  sub_20C799914(a1 + 56, (uint64_t)&__p);
  sub_20C79B1B0((uint64_t)&__p);
  if (v56 < 0)
    operator delete(v55[0]);
  v33 = v58;
  if (v58)
  {
    v34 = (unint64_t *)&v58->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  sub_20BDE9D48((uint64_t)&p_p, v62[0]);
  v36 = v63;
  if (v63)
  {
    v37 = (unint64_t *)&v63->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  sub_20BDE9D48((uint64_t)v67, v67[1]);
  if (v66 < 0)
    operator delete(v65);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  sub_20BDE9D48((uint64_t)&v68, *((_QWORD **)&v68 + 1));
  v39 = v71;
  if (v71)
  {
    v40 = (unint64_t *)&v71->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = v79;
  if (v79)
  {
    v43 = (unint64_t *)&v79->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  sub_20BDE9D48((uint64_t)v77, v77[1]);
  return a1;
}

void sub_20C79963C(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  uint64_t v16;
  uint64_t v17;
  va_list __p;

  va_start(__p, a16);
  sub_20BDDC194((std::exception *)&STACK[0x508]);
  sub_20BDDBE98((uint64_t)__p);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v17 - 200));
  __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20C799CA0(v16);
  sub_20C799CA0(v16);
}

void sub_20C7997AC()
{
  uint64_t v0;

  sub_20BE02504(v0 - 184, 0);
  __cxa_end_catch();
  JUMPOUT(0x20C799560);
}

void sub_20C7997C8()
{
  __cxa_end_catch();
  JUMPOUT(0x20C799818);
}

void sub_20C7997D4()
{
  __cxa_end_catch();
  JUMPOUT(0x20C799818);
}

void sub_20C7997F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,_QWORD *a24)
{
  uint64_t v24;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v24 - 168));
  sub_20BDE9D48((uint64_t)&a23, a24);
  JUMPOUT(0x20C799820);
}

void sub_20C79980C()
{
  JUMPOUT(0x20C799828);
}

void sub_20C799814(_Unwind_Exception *a1)
{
  void **v1;
  uint64_t v2;
  uint64_t v3;

  sub_20BE02EB0(v3 - 152);
  sub_20C79B1B0(v2);
  Alembic::Abc::v12::OObject::~OObject(v1);
  _Unwind_Resume(a1);
}

void sub_20C799838(std::string *a1@<X8>)
{
  std::string *v2;
  __int128 v3;
  std::string *v4;
  std::string v5;
  std::string v6;

  sub_20BDDC0E4(&v5, ":");
  v2 = std::string::insert(&v5, 0, "AbcGeom_Curve_v2");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v6.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v6.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  v4 = std::string::append(&v6, ".geom");
  *a1 = *v4;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
}

void sub_20C7998E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C799914(uint64_t a1, uint64_t a2)
{
  int v4;
  void **v5;
  __int128 v6;
  void **v7;
  __int128 v8;
  void **v9;
  __int128 v10;

  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  std::string::operator=((std::string *)(a1 + 16), (const std::string *)(a2 + 16));
  sub_20BDE881C((_QWORD *)(a1 + 40), (uint64_t *)(a2 + 40));
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  std::string::operator=((std::string *)(a1 + 64), (const std::string *)(a2 + 64));
  sub_20BDE881C((_QWORD *)(a1 + 88), (uint64_t *)(a2 + 88));
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(a2 + 112));
  sub_20BDE881C((_QWORD *)(a1 + 136), (uint64_t *)(a2 + 136));
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  std::string::operator=((std::string *)(a1 + 160), (const std::string *)(a2 + 160));
  sub_20BDE881C((_QWORD *)(a1 + 184), (uint64_t *)(a2 + 184));
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  std::string::operator=((std::string *)(a1 + 208), (const std::string *)(a2 + 208));
  sub_20BDE881C((_QWORD *)(a1 + 232), (uint64_t *)(a2 + 232));
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  std::string::operator=((std::string *)(a1 + 256), (const std::string *)(a2 + 256));
  sub_20BDE881C((_QWORD *)(a1 + 280), (uint64_t *)(a2 + 280));
  *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 296);
  std::string::operator=((std::string *)(a1 + 304), (const std::string *)(a2 + 304));
  sub_20BDE881C((_QWORD *)(a1 + 328), (uint64_t *)(a2 + 328));
  v4 = *(_DWORD *)(a2 + 360);
  *(_OWORD *)(a1 + 344) = *(_OWORD *)(a2 + 344);
  *(_DWORD *)(a1 + 360) = v4;
  v5 = (void **)(a1 + 368);
  if (*(char *)(a1 + 391) < 0)
    operator delete(*v5);
  v6 = *(_OWORD *)(a2 + 368);
  *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
  *(_OWORD *)v5 = v6;
  *(_BYTE *)(a2 + 391) = 0;
  *(_BYTE *)(a2 + 368) = 0;
  *(_DWORD *)(a1 + 392) = *(_DWORD *)(a2 + 392);
  std::string::operator=((std::string *)(a1 + 400), (const std::string *)(a2 + 400));
  sub_20BDE881C((_QWORD *)(a1 + 424), (uint64_t *)(a2 + 424));
  *(_DWORD *)(a1 + 440) = *(_DWORD *)(a2 + 440);
  std::string::operator=((std::string *)(a1 + 448), (const std::string *)(a2 + 448));
  sub_20BDE881C((_QWORD *)(a1 + 472), (uint64_t *)(a2 + 472));
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
  *(_DWORD *)(a1 + 496) = *(_DWORD *)(a2 + 496);
  std::string::operator=((std::string *)(a1 + 504), (const std::string *)(a2 + 504));
  sub_20BDE881C((_QWORD *)(a1 + 528), (uint64_t *)(a2 + 528));
  v7 = (void **)(a1 + 544);
  if (*(char *)(a1 + 567) < 0)
    operator delete(*v7);
  v8 = *(_OWORD *)(a2 + 544);
  *(_QWORD *)(a1 + 560) = *(_QWORD *)(a2 + 560);
  *(_OWORD *)v7 = v8;
  *(_BYTE *)(a2 + 567) = 0;
  *(_BYTE *)(a2 + 544) = 0;
  *(_DWORD *)(a1 + 568) = *(_DWORD *)(a2 + 568);
  std::string::operator=((std::string *)(a1 + 576), (const std::string *)(a2 + 576));
  sub_20BDE881C((_QWORD *)(a1 + 600), (uint64_t *)(a2 + 600));
  *(_DWORD *)(a1 + 616) = *(_DWORD *)(a2 + 616);
  std::string::operator=((std::string *)(a1 + 624), (const std::string *)(a2 + 624));
  sub_20BDE881C((_QWORD *)(a1 + 648), (uint64_t *)(a2 + 648));
  *(_QWORD *)(a1 + 664) = *(_QWORD *)(a2 + 664);
  *(_DWORD *)(a1 + 672) = *(_DWORD *)(a2 + 672);
  std::string::operator=((std::string *)(a1 + 680), (const std::string *)(a2 + 680));
  sub_20BDE881C((_QWORD *)(a1 + 704), (uint64_t *)(a2 + 704));
  v9 = (void **)(a1 + 720);
  if (*(char *)(a1 + 743) < 0)
    operator delete(*v9);
  v10 = *(_OWORD *)(a2 + 720);
  *(_QWORD *)(a1 + 736) = *(_QWORD *)(a2 + 736);
  *(_OWORD *)v9 = v10;
  *(_BYTE *)(a2 + 743) = 0;
  *(_BYTE *)(a2 + 720) = 0;
  *(_DWORD *)(a1 + 744) = *(_DWORD *)(a2 + 744);
  std::string::operator=((std::string *)(a1 + 752), (const std::string *)(a2 + 752));
  sub_20BDE881C((_QWORD *)(a1 + 776), (uint64_t *)(a2 + 776));
  *(_DWORD *)(a1 + 792) = *(_DWORD *)(a2 + 792);
  std::string::operator=((std::string *)(a1 + 800), (const std::string *)(a2 + 800));
  sub_20BDE881C((_QWORD *)(a1 + 824), (uint64_t *)(a2 + 824));
  *(_QWORD *)(a1 + 840) = *(_QWORD *)(a2 + 840);
  *(_DWORD *)(a1 + 848) = *(_DWORD *)(a2 + 848);
  std::string::operator=((std::string *)(a1 + 856), (const std::string *)(a2 + 856));
  sub_20BDE881C((_QWORD *)(a1 + 880), (uint64_t *)(a2 + 880));
  *(_DWORD *)(a1 + 896) = *(_DWORD *)(a2 + 896);
  std::string::operator=((std::string *)(a1 + 904), (const std::string *)(a2 + 904));
  sub_20BDE881C((_QWORD *)(a1 + 928), (uint64_t *)(a2 + 928));
  *(_DWORD *)(a1 + 944) = *(_DWORD *)(a2 + 944);
  std::string::operator=((std::string *)(a1 + 952), (const std::string *)(a2 + 952));
  sub_20BDE881C((_QWORD *)(a1 + 976), (uint64_t *)(a2 + 976));
  *(_DWORD *)(a1 + 992) = *(_DWORD *)(a2 + 992);
  std::string::operator=((std::string *)(a1 + 1000), (const std::string *)(a2 + 1000));
  sub_20BDE881C((_QWORD *)(a1 + 1024), (uint64_t *)(a2 + 1024));
  *(_DWORD *)(a1 + 1040) = *(_DWORD *)(a2 + 1040);
  std::string::operator=((std::string *)(a1 + 1048), (const std::string *)(a2 + 1048));
  sub_20BDE881C((_QWORD *)(a1 + 1072), (uint64_t *)(a2 + 1072));
  *(_DWORD *)(a1 + 1088) = *(_DWORD *)(a2 + 1088);
  std::string::operator=((std::string *)(a1 + 1096), (const std::string *)(a2 + 1096));
  sub_20BDE881C((_QWORD *)(a1 + 1120), (uint64_t *)(a2 + 1120));
  return a1;
}

void sub_20C799CA0(uint64_t a1)
{
  sub_20C79A0B4((_QWORD *)(a1 + 56));
}

void sub_20C799CB8()
{
  uint64_t v0;

  sub_20BDEBF08((_QWORD *)(v0 + 40));
  JUMPOUT(0x212B929D0);
}

void sub_20C799CD8(void **a1)
{
  *a1 = &unk_24C54AC00;
  sub_20C79B1B0((uint64_t)(a1 + 7));
  Alembic::Abc::v12::OObject::~OObject(a1);
}

void sub_20C799D0C(void **a1)
{
  void *v2;

  *a1 = &unk_24C54AC00;
  sub_20C79B1B0((uint64_t)(a1 + 7));
  Alembic::Abc::v12::OObject::~OObject(a1);
  operator delete(v2);
}

uint64_t sub_20C799D44(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_20C799F30(a1);
  *(_QWORD *)v2 = &unk_24C54AC38;
  *(_DWORD *)(v2 + 248) = 2;
  sub_20BDDC0E4((_QWORD *)(v2 + 256), "");
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 304), "");
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  sub_20BE3FF78(a1 + 368);
  sub_20BE3FEAC(a1 + 544);
  sub_20BE46E6C(a1 + 720);
  *(_DWORD *)(a1 + 896) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 904), "");
  *(_QWORD *)(a1 + 936) = 0;
  *(_QWORD *)(a1 + 928) = 0;
  *(_DWORD *)(a1 + 944) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 952), "");
  *(_QWORD *)(a1 + 984) = 0;
  *(_QWORD *)(a1 + 976) = 0;
  *(_DWORD *)(a1 + 992) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 1000), "");
  *(_QWORD *)(a1 + 1032) = 0;
  *(_QWORD *)(a1 + 1024) = 0;
  *(_DWORD *)(a1 + 1040) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 1048), "");
  *(_QWORD *)(a1 + 1080) = 0;
  *(_QWORD *)(a1 + 1072) = 0;
  *(_DWORD *)(a1 + 1088) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 1096), "");
  *(_QWORD *)(a1 + 1128) = 0;
  *(_QWORD *)(a1 + 1120) = 0;
  *(_BYTE *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_DWORD *)(a1 + 360) = 0;
  return a1;
}

void sub_20C799E88(_Unwind_Exception *a1)
{
  void **v1;
  void **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  void **v7;

  v7 = v6;
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v7);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v1 + 124);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v1 + 118);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v1 + 112);
  sub_20BE28E38(v5);
  sub_20BE28E38(v4);
  sub_20BE28E38(v3);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v1 + 37);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v2);
  sub_20C79A044((uint64_t)v1);
  _Unwind_Resume(a1);
}

void sub_20C799F08()
{
  JUMPOUT(0x20C799ED8);
}

void sub_20C799F10()
{
  JUMPOUT(0x20C799EE0);
}

void sub_20C799F18()
{
  JUMPOUT(0x20C799EE8);
}

void sub_20C799F20()
{
  JUMPOUT(0x20C799EF0);
}

void sub_20C799F28()
{
  JUMPOUT(0x20C799EF8);
}

uint64_t sub_20C799F30(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 16), "");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = &unk_24C54ACC0;
  *(_DWORD *)(a1 + 56) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 64), "");
  *(_DWORD *)(a1 + 104) = 2;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  sub_20BDDC0E4((_QWORD *)(a1 + 112), "");
  *(_DWORD *)(a1 + 152) = 2;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  sub_20BDDC0E4((_QWORD *)(a1 + 160), "");
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 200) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 208), "");
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  return a1;
}

void sub_20C79A000(_Unwind_Exception *a1)
{
  void **v1;
  void **v2;
  void **v3;
  Alembic::Abc::v12::OCompoundProperty *v4;

  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v4);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v3);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v2);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C79A044(uint64_t a1)
{
  void **v2;

  *(_QWORD *)a1 = &unk_24C54ACC0;
  v2 = (void **)(a1 + 8);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 200));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 152));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(a1 + 104));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(a1 + 56));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v2);
  return a1;
}

void sub_20C79A0A0(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_20C79B1B0(a1);
  operator delete(v1);
}

void sub_20C79A0B4(_QWORD *a1)
{
  sub_20BDEBF08(a1 + 35);
  MEMORY[0x212B929D0](a1 + 32, "");
  sub_20BDEBF08(a1 + 122);
  MEMORY[0x212B929D0](a1 + 119, "");
  sub_20BE29790((uint64_t)(a1 + 46));
  sub_20BE29790((uint64_t)(a1 + 68));
  sub_20BE29790((uint64_t)(a1 + 90));
  sub_20BDEBF08(a1 + 41);
  MEMORY[0x212B929D0](a1 + 38, "");
  sub_20BDEBF08(a1 + 128);
  MEMORY[0x212B929D0](a1 + 125, "");
  sub_20BDEBF08(a1 + 134);
  MEMORY[0x212B929D0](a1 + 131, "");
  sub_20BDEBF08(a1 + 140);
  MEMORY[0x212B929D0](a1 + 137, "");
  sub_20C79A27C(a1);
}

uint64_t sub_20C79A16C(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0)
  {
    if (*(_QWORD *)(a1 + 24))
      return *(_BYTE *)(a1 + 344) != 0;
  }
  else if (*(_BYTE *)(a1 + 39))
  {
    return *(_BYTE *)(a1 + 344) != 0;
  }
  if (*(_QWORD *)(a1 + 40))
  {
    if (*(char *)(a1 + 279) < 0)
    {
      if (*(_QWORD *)(a1 + 264))
        return *(_BYTE *)(a1 + 344) != 0;
    }
    else if (*(_BYTE *)(a1 + 279))
    {
      return *(_BYTE *)(a1 + 344) != 0;
    }
    if (*(_QWORD *)(a1 + 280))
      return 1;
  }
  return *(_BYTE *)(a1 + 344) != 0;
}

uint64_t sub_20C79A1C4(uint64_t a1)
{
  void **v2;

  *(_QWORD *)a1 = &unk_24C54ACC0;
  v2 = (void **)(a1 + 8);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 200));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 152));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(a1 + 104));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(a1 + 56));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v2);
  return a1;
}

void sub_20C79A220(void **a1)
{
  void **v2;

  *a1 = &unk_24C54ACC0;
  v2 = a1 + 1;
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 25));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 19));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(a1 + 13);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(a1 + 7);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v2);
  operator delete(a1);
}

void sub_20C79A27C(_QWORD *a1)
{
  sub_20BDEBF08(a1 + 11);
  MEMORY[0x212B929D0](a1 + 8, "");
  sub_20BDEBF08(a1 + 17);
  MEMORY[0x212B929D0](a1 + 14, "");
  sub_20BDEBF08(a1 + 23);
  MEMORY[0x212B929D0](a1 + 20, "");
  sub_20BDEBF08(a1 + 29);
  MEMORY[0x212B929D0](a1 + 26, "");
  sub_20BDEBF08(a1 + 5);
  JUMPOUT(0x212B929D0);
}

BOOL sub_20C79A300(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0)
  {
    if (*(_QWORD *)(a1 + 24))
      return 0;
  }
  else if (*(_BYTE *)(a1 + 39))
  {
    return 0;
  }
  return *(_QWORD *)(a1 + 40) != 0;
}

uint64_t sub_20C79A32C(uint64_t a1)
{
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((void **)(a1 + 8));
  return a1;
}

void sub_20C79A354(void **a1)
{
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(a1 + 1);
  operator delete(a1);
}

uint64_t sub_20C79A37C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  int v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  char v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;

  v13 = (std::__shared_weak_count *)a2[1];
  v45 = *a2;
  v46 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  sub_20C79A834(a1, &v45, a3, a4, a5, a6, a7);
  v16 = v46;
  if (v46)
  {
    v17 = (unint64_t *)&v46->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  *(_QWORD *)a1 = &unk_24C54AC38;
  *(_DWORD *)(a1 + 248) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 256), "");
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 304), "");
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  sub_20BE3FF78(a1 + 368);
  sub_20BE3FEAC(a1 + 544);
  sub_20BE46E6C(a1 + 720);
  *(_DWORD *)(a1 + 896) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 904), "");
  *(_QWORD *)(a1 + 936) = 0;
  *(_QWORD *)(a1 + 928) = 0;
  *(_DWORD *)(a1 + 944) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 952), "");
  *(_QWORD *)(a1 + 984) = 0;
  *(_QWORD *)(a1 + 976) = 0;
  *(_DWORD *)(a1 + 992) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 1000), "");
  *(_QWORD *)(a1 + 1032) = 0;
  *(_QWORD *)(a1 + 1024) = 0;
  *(_DWORD *)(a1 + 1040) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 1048), "");
  *(_QWORD *)(a1 + 1080) = 0;
  *(_QWORD *)(a1 + 1072) = 0;
  *(_DWORD *)(a1 + 1088) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 1096), "");
  *(_QWORD *)(a1 + 1128) = 0;
  *(_QWORD *)(a1 + 1120) = 0;
  sub_20BE304B4(a4, a5, a6, a7, &v43);
  v19 = sub_20BE3060C(a4, a5, a6, a7);
  if (v43)
  {
    v20 = *a2;
    v21 = (std::__shared_weak_count *)a2[1];
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    v38 = v21;
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v20 + 24))(&v39);
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v39 + 24))(&v41);
    v24 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v41 + 48))(v41, v43);
    v25 = v42;
    if (v42)
    {
      v26 = (unint64_t *)&v42->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v28 = v40;
    if (v40)
    {
      v29 = (unint64_t *)&v40->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    if (v38)
    {
      v31 = (unint64_t *)&v38->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
  }
  else
  {
    v24 = v19;
  }
  v33 = sub_20BE312C4(a4, a5, a6, a7);
  Alembic::AbcGeom::v12::OCurvesSchema::init((Alembic::AbcGeom::v12::OCurvesSchema *)a1, v24, v33);
  v34 = v44;
  if (v44)
  {
    v35 = (unint64_t *)&v44->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  return a1;
}

void sub_20C79A728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void **v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  uint64_t v13;
  uint64_t v14;
  va_list va2;
  uint64_t v16;
  uint64_t v17;
  va_list va3;
  uint64_t v19;
  va_list va4;

  va_start(va4, a3);
  va_start(va3, a3);
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v14 = va_arg(va3, _QWORD);
  v16 = va_arg(va3, _QWORD);
  va_copy(va4, va3);
  v17 = va_arg(va4, _QWORD);
  v19 = va_arg(va4, _QWORD);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va3);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va2);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va1);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va4);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(v3 + 136));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v3 + 130);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v3 + 124);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v3 + 118);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v3 + 112);
  sub_20BE28E38(v6);
  sub_20BE28E38(v5);
  sub_20BE28E38(a3);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v3 + 37);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v4);
  sub_20C79A044((uint64_t)v3);
  _Unwind_Resume(a1);
}

uint64_t sub_20C79A834(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  int v19;
  int v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  char v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;

  v13 = (std::__shared_weak_count *)a2[1];
  v38 = *a2;
  v39 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  sub_20C79AB6C(a1, &v38, a3, a4, a5, a6, a7);
  v16 = v39;
  if (v39)
  {
    v17 = (unint64_t *)&v39->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  *(_QWORD *)a1 = &unk_24C54ACC0;
  *(_DWORD *)(a1 + 56) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 64), "");
  *(_DWORD *)(a1 + 104) = 2;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  sub_20BDDC0E4((_QWORD *)(a1 + 112), "");
  *(_DWORD *)(a1 + 152) = 2;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  sub_20BDDC0E4((_QWORD *)(a1 + 160), "");
  *(_DWORD *)(a1 + 200) = 2;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  sub_20BDDC0E4((_QWORD *)(a1 + 208), "");
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  sub_20BE304B4(a4, a5, a6, a7, &v36);
  v19 = sub_20BE3060C(a4, a5, a6, a7);
  if (v36)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a2 + 24))(&v32);
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v32 + 24))(&v34);
    v20 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v34 + 48))(v34, v36);
    v21 = v35;
    if (v35)
    {
      v22 = (unint64_t *)&v35->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = v33;
    if (v33)
    {
      v25 = (unint64_t *)&v33->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
  else
  {
    v20 = v19;
  }
  v27 = sub_20BE312C4(a4, a5, a6, a7);
  sub_20C79AC88(a1, v20, v27);
  v28 = v37;
  if (v37)
  {
    v29 = (unint64_t *)&v37->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  return a1;
}

void sub_20C79AAD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
  uint64_t v17;
  void **v18;
  Alembic::Abc::v12::OCompoundProperty *v19;
  Alembic::Abc::v12::OCompoundProperty *v20;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a13);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a11);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a15);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v20);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v19);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v18);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(a10);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((void **)(v17 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_20C79AB6C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v21;
  std::__shared_weak_count *v22;

  *(_DWORD *)(a1 + 8) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 16), "");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = &unk_24C54ACF0;
  v14 = (std::__shared_weak_count *)a2[1];
  v21 = *a2;
  v22 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  sub_20C79AD40(a1, &v21, a3, a4, a5, a6, a7);
  v17 = v22;
  if (v22)
  {
    v18 = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return a1;
}

void sub_20C79AC6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void **v9;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v9);
  _Unwind_Resume(a1);
}

void sub_20C79AC88(uint64_t a1, int a2, char a3)
{
  if ((a3 & 1) == 0)
    sub_20BE28B00(a1, a2, 0);
}

void sub_20C79ACD0(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;
  void (*v12)(uint64_t);
  uint64_t v13;

  v11 = __cxa_begin_catch(a1);
  v12 = *(void (**)(uint64_t))(*(_QWORD *)v9 + 16);
  if (a2 == 2)
  {
    v13 = (uint64_t)v11;
    v12(v9);
    sub_20BE02570((uint64_t)&a9, v13);
  }
  else
  {
    v12(v9);
    sub_20BE02504((uint64_t)&a9, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x20C79ACBCLL);
}

void sub_20C79AD20(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20C79AD40(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6, uint64_t **a7)
{
  uint64_t *v14;
  uint64_t *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  _QWORD *exception;
  _QWORD *v23;
  std::string __p;
  void *v25[2];
  char v26;
  uint64_t *v27;
  _QWORD *v28;
  _QWORD v29[37];
  int v30;
  const void **v31[4];
  std::__shared_weak_count *v32;
  int v33;
  uint64_t v34;
  void **v35;

  v28 = 0;
  v29[0] = 0;
  v27 = (uint64_t *)&v28;
  v29[35] = 0;
  v29[36] = 0;
  v30 = 2;
  sub_20BDEBF8C((uint64_t *)v31, (const void ***)&v27);
  v31[3] = 0;
  v32 = 0;
  v33 = 0;
  v34 = 1;
  sub_20BDE9D48((uint64_t)&v27, v28);
  sub_20BE02E30(a4, (uint64_t)&v30);
  sub_20BE02E30(a5, (uint64_t)&v30);
  sub_20BE02E30(a6, (uint64_t)&v30);
  sub_20BE02E30(a7, (uint64_t)&v30);
  *(_DWORD *)(a1 + 8) = v30;
  v29[33] = a1 + 8;
  v29[34] = "OSchema::OSchema::init()";
  if (!*a2)
  {
    sub_20BDDBD68((uint64_t)&v27);
    sub_20BDDC1C8(v29, (uint64_t)"NULL parent passed into OSchema ctor", 36);
    std::stringbuf::str();
    sub_20BDDBF20(v25, (__int128 *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    exception = __cxa_allocate_exception(0x20uLL);
    v23 = sub_20BDDC09C(exception, (uint64_t)v25);
    __cxa_throw(v23, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  sub_20BDEBF8C((uint64_t *)&v27, v31);
  if (HIDWORD(v34) != 1)
  {
    sub_20BDDC0E4(v25, "schema");
    sub_20BDDC0E4(&__p, "AbcGeom_Curve_v2");
    v35 = v25;
    v14 = sub_20BDDDFDC(&v27, (const void **)v25, (uint64_t)&unk_20CAC184C, (__int128 **)&v35);
    std::string::operator=((std::string *)(v14 + 7), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v26 < 0)
      operator delete(v25[0]);
    if (HIDWORD(v34) != 1)
    {
      sub_20BDDC0E4(v25, "schemaBaseType");
      sub_20BDDC0E4(&__p, "AbcGeom_GeomBase_v1");
      v35 = v25;
      v15 = sub_20BDDDFDC(&v27, (const void **)v25, (uint64_t)&unk_20CAC184C, (__int128 **)&v35);
      std::string::operator=((std::string *)(v15 + 7), &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v26 < 0)
        operator delete(v25[0]);
    }
  }
  (*(void (**)(void **__return_ptr, _QWORD, uint64_t, uint64_t **))(*(_QWORD *)*a2 + 112))(v25, *a2, a3, &v27);
  sub_20BDE82DC(a1 + 40, (__int128 *)v25);
  v16 = (std::__shared_weak_count *)v25[1];
  if (v25[1])
  {
    v17 = (unint64_t *)((char *)v25[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  sub_20BDE9D48((uint64_t)&v27, v28);
  v19 = v32;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  sub_20BDE9D48((uint64_t)v31, v31[1]);
}

void sub_20C79B064(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v24;
  void *v27;

  sub_20BDDC194((std::exception *)&__p);
  sub_20BDDBE98((uint64_t)&a22);
  v27 = __cxa_begin_catch(a1);
  sub_20BDEBF08((_QWORD *)(v23 + 40));
  MEMORY[0x212B929D0](v23 + 16, "");
  if (a2 == 2)
    sub_20BE02570(v24 - 192, (uint64_t)v27);
  else
    sub_20BE02504(v24 - 192, 0);
  __cxa_end_catch();
  JUMPOUT(0x20C79AF8CLL);
}

void sub_20C79B15C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BE02EB0(v1 - 160);
  _Unwind_Resume(a1);
}

uint64_t sub_20C79B1B0(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C54AC38;
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 1088));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(a1 + 1040));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(a1 + 992));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(a1 + 944));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(a1 + 896));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 848));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(a1 + 792));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(a1 + 744));
  if (*(char *)(a1 + 743) < 0)
    operator delete(*(void **)(a1 + 720));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 672));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(a1 + 616));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(a1 + 568));
  if (*(char *)(a1 + 567) < 0)
    operator delete(*(void **)(a1 + 544));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 496));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(a1 + 440));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(a1 + 392));
  if (*(char *)(a1 + 391) < 0)
    operator delete(*(void **)(a1 + 368));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(a1 + 296));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(a1 + 248));
  *(_QWORD *)a1 = &unk_24C54ACC0;
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 200));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 152));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(a1 + 104));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(a1 + 56));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((void **)(a1 + 8));
  return a1;
}

_QWORD *sub_20C79B2CC(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C54AD10;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20C79B314(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_20C79B338(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20C79B34C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20C79B364(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C54AD60))
    return a1 + 24;
  else
    return 0;
}

_QWORD *sub_20C79B3A4(_QWORD *a1)
{
  *a1 = off_24C54A360;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 1));
  return a1;
}

void sub_20C79B3D4(_QWORD *a1)
{
  *a1 = off_24C54A360;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 1));
  operator delete(a1);
}

void sub_20C79B404(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _BYTE *v7;
  __int128 v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  *(_DWORD *)a2 = *(_DWORD *)(v4 + 64);
  v7 = (_BYTE *)(a2 + 8);
  if (*(char *)(v4 + 95) < 0)
  {
    sub_20BDDBFAC(v7, *(void **)(v4 + 72), *(_QWORD *)(v4 + 80));
  }
  else
  {
    v8 = *(_OWORD *)(v4 + 72);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(v4 + 88);
    *(_OWORD *)v7 = v8;
  }
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v4 + 96);
  v9 = *(_QWORD *)(v4 + 104);
  *(_QWORD *)(a2 + 40) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  if (v3)
  {
    v12 = (unint64_t *)&v3->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20C79B4F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

void sub_20C79B504(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  sub_20C79B63C(v2 + 56, a2);
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20C79B58C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

void sub_20C79B5A0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  sub_20C79B87C(v2 + 56, a2);
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20C79B628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

_BYTE *sub_20C79B63C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _BYTE *result;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _DWORD v15[4];
  _DWORD v16[4];
  void *__p[2];
  char v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  int v21;
  std::string v22;
  uint64_t v23[4];

  v23[2] = a1 + 8;
  v23[3] = (uint64_t)"OGeomBaseSchema::getArbGeomParams()";
  v4 = *(char *)(a1 + 183);
  if (v4 < 0)
  {
    if (!*(_QWORD *)(a1 + 168))
      goto LABEL_5;
  }
  else if (!*(_BYTE *)(a1 + 183))
  {
LABEL_5:
    if (*(_QWORD *)(a1 + 184))
      goto LABEL_17;
  }
  v5 = *(std::__shared_weak_count **)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 40);
  v20 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_20BDDC0E4(__p, ".arbGeomParams");
  v16[0] = 0;
  v16[2] = 0;
  v15[0] = 0;
  v15[2] = 0;
  Alembic::Abc::v12::OCompoundProperty::OCompoundProperty(&v21, &v19, __p, v16, v15);
  *(_DWORD *)(a1 + 152) = v21;
  std::string::operator=((std::string *)(a1 + 160), &v22);
  sub_20BDE881C((_QWORD *)(a1 + 184), v23);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v21);
  if (v18 < 0)
    operator delete(__p[0]);
  v8 = v20;
  if (v20)
  {
    v9 = (unint64_t *)&v20->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  LOBYTE(v4) = *(_BYTE *)(a1 + 183);
LABEL_17:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 152);
  result = (_BYTE *)(a2 + 8);
  if ((v4 & 0x80) != 0)
  {
    result = sub_20BDDBFAC(result, *(void **)(a1 + 160), *(_QWORD *)(a1 + 168));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)(a1 + 160);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 176);
  }
  v12 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a2 + 40) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  return result;
}

void sub_20C79B7C0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,char a22)
{
  uint64_t v22;
  uint64_t v23;
  void *v25;

  v25 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570(v23 - 48, (uint64_t)v25);
  else
    sub_20BE02504(v23 - 48, 0);
  __cxa_end_catch();
  *(_DWORD *)v22 = 2;
  sub_20BDDC0E4((_QWORD *)(v22 + 8), "");
  *(_QWORD *)(v22 + 32) = 0;
  *(_QWORD *)(v22 + 40) = 0;
  JUMPOUT(0x20C79B7ACLL);
}

void sub_20C79B85C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_BYTE *sub_20C79B87C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _BYTE *result;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _DWORD v15[4];
  _DWORD v16[4];
  void *__p[2];
  char v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  int v21;
  std::string v22;
  uint64_t v23[4];

  v23[2] = a1 + 8;
  v23[3] = (uint64_t)"OGeomBaseSchema::getUserProperties()";
  v4 = *(char *)(a1 + 231);
  if (v4 < 0)
  {
    if (!*(_QWORD *)(a1 + 216))
      goto LABEL_5;
  }
  else if (!*(_BYTE *)(a1 + 231))
  {
LABEL_5:
    if (*(_QWORD *)(a1 + 232))
      goto LABEL_17;
  }
  v5 = *(std::__shared_weak_count **)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 40);
  v20 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_20BDDC0E4(__p, ".userProperties");
  v16[0] = 0;
  v16[2] = 0;
  v15[0] = 0;
  v15[2] = 0;
  Alembic::Abc::v12::OCompoundProperty::OCompoundProperty(&v21, &v19, __p, v16, v15);
  *(_DWORD *)(a1 + 200) = v21;
  std::string::operator=((std::string *)(a1 + 208), &v22);
  sub_20BDE881C((_QWORD *)(a1 + 232), v23);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v21);
  if (v18 < 0)
    operator delete(__p[0]);
  v8 = v20;
  if (v20)
  {
    v9 = (unint64_t *)&v20->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  LOBYTE(v4) = *(_BYTE *)(a1 + 231);
LABEL_17:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 200);
  result = (_BYTE *)(a2 + 8);
  if ((v4 & 0x80) != 0)
  {
    result = sub_20BDDBFAC(result, *(void **)(a1 + 208), *(_QWORD *)(a1 + 216));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)(a1 + 208);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 224);
  }
  v12 = *(_QWORD *)(a1 + 240);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 232);
  *(_QWORD *)(a2 + 40) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  return result;
}

void sub_20C79BA00(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,char a22)
{
  uint64_t v22;
  uint64_t v23;
  void *v25;

  v25 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570(v23 - 48, (uint64_t)v25);
  else
    sub_20BE02504(v23 - 48, 0);
  __cxa_end_catch();
  *(_DWORD *)v22 = 2;
  sub_20BDDC0E4((_QWORD *)(v22 + 8), "");
  *(_QWORD *)(v22 + 32) = 0;
  *(_QWORD *)(v22 + 40) = 0;
  JUMPOUT(0x20C79B9ECLL);
}

void sub_20C79BA9C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20C79BAC0(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20C79BAD4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20C79BAEC(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C54AE28))
    return a1 + 24;
  else
    return 0;
}

uint64_t sub_20C79BB2C(uint64_t a1)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0x30000000ALL;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 48) = 0x30000000ALL;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)(a1 + 88) = 0x100000006;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0x10000000ALL;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_QWORD *)(a1 + 176) = 0x100000005;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_DWORD *)(a1 + 208) = 127;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0x20000000ALL;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_QWORD *)(a1 + 264) = 0x100000005;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 127;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0x30000000ALL;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_QWORD *)(a1 + 352) = 0x100000005;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_DWORD *)(a1 + 384) = 127;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0x10000000ALL;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_QWORD *)(a1 + 448) = 0x100000001;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_QWORD *)(a1 + 488) = 0x10000000ALL;
  *(_QWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 520) = 0x7FEFFFFFFFFFFFFFLL;
  *(int64x2_t *)(a1 + 528) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(int64x2_t *)(a1 + 544) = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  *(_QWORD *)(a1 + 560) = 0xFFEFFFFFFFFFFFFFLL;
  sub_20C797FD4((int64x2_t *)a1);
  *(_QWORD *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 392) = 1;
  return a1;
}

void sub_20C79BC74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object)
{
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  void **v13;
  _QWORD *v14;
  void **v15;
  void **v16;
  void **v17;
  void **v18;
  void **v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  v20 = *v13;
  if (*v13)
  {
    v10[63] = v20;
    operator delete(v20);
  }
  v21 = *v19;
  if (*v19)
  {
    v10[58] = v21;
    operator delete(v21);
  }
  v22 = *v18;
  if (*v18)
  {
    v10[53] = v22;
    operator delete(v22);
  }
  sub_20BE28D2C(v14);
  sub_20BE28D2C(v12);
  sub_20BE28D2C(v11);
  v23 = *v17;
  if (*v17)
  {
    v10[13] = v23;
    operator delete(v23);
  }
  v24 = *v16;
  if (*v16)
  {
    v10[8] = v24;
    operator delete(v24);
  }
  v25 = *v15;
  if (*v15)
  {
    v10[3] = v25;
    operator delete(v25);
  }
  _Unwind_Resume(a1);
}

void sub_20C79BCF8(unint64_t *a1)
{
  unint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  float *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int v11;
  uint64_t *v12;
  uint64_t **v13;
  uint64_t **v14;
  float v15;
  float v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  void (__cdecl *v27)(std::__shared_weak_count *__hidden);
  void (__cdecl *v28)(std::__shared_weak_count *__hidden);
  char *v29;
  void (__cdecl *v30)(std::__shared_weak_count *__hidden);
  uint64_t v31;
  _DWORD *v32;
  std::__shared_weak_count_vtbl *v33;
  std::__shared_weak_count *v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t *v45;
  _QWORD *v46;
  unint64_t v47;
  uint64_t v48;
  std::__shared_weak_count_vtbl *v49;
  std::__shared_weak_count *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  uint64_t **v53;
  uint64_t *v54;
  uint64_t v55;
  _QWORD *v56;
  std::__shared_weak_count *v57;

  v2 = *a1;
  v3 = operator new(0x18uLL);
  LODWORD(v48) = 0;
  v47 = v2;
  sub_20C654B14(v3, v2, &v48);
  sub_20C7958F4(&v56, (uint64_t)v3);
  v54 = 0;
  v55 = 0;
  v46 = v56;
  v53 = &v54;
  v4 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a1[1] + 16))(a1[1]);
  v44 = a1 + 1;
  v45 = (uint64_t *)a1;
  if (v2)
  {
    v5 = (float *)v4;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = v54;
      v13 = &v54;
      v14 = &v54;
      if (v54)
      {
        v15 = *v5;
        while (1)
        {
          while (1)
          {
            v13 = (uint64_t **)v12;
            v16 = *(float *)v12[4];
            if (v15 >= v16)
              break;
            v12 = (uint64_t *)*v12;
            v14 = v13;
            if (!*v13)
              goto LABEL_11;
          }
          if (v16 >= v15)
            break;
          v12 = (uint64_t *)v12[1];
          if (!v12)
          {
            v14 = v13 + 1;
            goto LABEL_11;
          }
        }
        v17 = v12;
      }
      else
      {
LABEL_11:
        v17 = operator new(0x30uLL);
        v17[4] = v5;
        *((_DWORD *)v17 + 10) = v11;
        *v17 = 0;
        v17[1] = 0;
        v17[2] = v13;
        *v14 = v17;
        v18 = v17;
        if (*v53)
        {
          v53 = (uint64_t **)*v53;
          v18 = *v14;
        }
        sub_20BDDE208(v54, v18);
        ++v55;
        if (v7 >= v8)
        {
          v19 = (v7 - v6) >> 3;
          v20 = v19 + 1;
          if ((unint64_t)(v19 + 1) >> 61)
            sub_20BDDF694();
          if ((v8 - v6) >> 2 > v20)
            v20 = (v8 - v6) >> 2;
          if ((unint64_t)(v8 - v6) >= 0x7FFFFFFFFFFFFFF8)
            v21 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v21 = v20;
          if (v21)
          {
            if (v21 >> 61)
              sub_20BDDF5B4();
            v22 = (char *)operator new(8 * v21);
          }
          else
          {
            v22 = 0;
          }
          v23 = &v22[8 * v19];
          *(_QWORD *)v23 = v17[4];
          v9 = v23 + 8;
          if (v7 != v6)
          {
            do
            {
              v24 = *((_QWORD *)v7 - 1);
              v7 -= 8;
              *((_QWORD *)v23 - 1) = v24;
              v23 -= 8;
            }
            while (v7 != v6);
            v7 = v6;
          }
          v6 = v23;
          v8 = &v22[8 * v21];
          if (v7)
            operator delete(v7);
        }
        else
        {
          *(_QWORD *)v7 = v17[4];
          v9 = v7 + 8;
        }
        ++v11;
        v7 = v9;
      }
      *(_DWORD *)(*v46 + 4 * v10) = *((_DWORD *)v17 + 10);
      ++v5;
      ++v10;
    }
    while (v10 != v47);
  }
  else
  {
    v6 = 0;
    v9 = 0;
  }
  v25 = v9 - v6;
  if (4 * v47 > 4 * (v47 + ((v9 - v6) >> 3)))
  {
    if (v25 < 0)
      v26 = -1;
    else
      v26 = v25 >> 1;
    v27 = (void (__cdecl *)(std::__shared_weak_count *__hidden))operator new[](v26);
    v28 = v27;
    if (v9 != v6)
    {
      v29 = v6;
      v30 = v27;
      v31 = v25 >> 3;
      do
      {
        v32 = *(_DWORD **)v29;
        v29 += 8;
        *(_DWORD *)v30 = *v32;
        v30 = (void (__cdecl *)(std::__shared_weak_count *__hidden))((char *)v30 + 4);
        --v31;
      }
      while (v31);
    }
    v48 = v25 >> 3;
    v33 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
    v33->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&unk_24C5472D8;
    v33->~__shared_weak_count_0 = v28;
    v49 = v33;
    v34 = (std::__shared_weak_count *)operator new(0x20uLL);
    v34->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C545DB8;
    v34->__shared_owners_ = 0;
    v34->__shared_weak_owners_ = 0;
    v34[1].__vftable = v33;
    v51 = 0;
    v52 = 0;
    v50 = v34;
    sub_20BDE881C(&v51, (uint64_t *)&v56);
    *v45 = v48;
    sub_20BDE881C(v44, (uint64_t *)&v49);
    sub_20BDE881C(v45 + 3, &v51);
    v35 = v52;
    if (v52)
    {
      p_shared_owners = (unint64_t *)&v52->__shared_owners_;
      do
        v37 = __ldaxr(p_shared_owners);
      while (__stlxr(v37 - 1, p_shared_owners));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    v38 = v50;
    if (v50)
    {
      v39 = (unint64_t *)&v50->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
  }
  if (v6)
    operator delete(v6);
  sub_20C599E48(v54);
  v41 = v57;
  if (v57)
  {
    v42 = (unint64_t *)&v57->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
}

void sub_20C79C0E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,_QWORD *a21)
{
  void *v21;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::_SampleForAlembic::_Holder *v22;
  uint64_t v23;
  void *v25;

  sub_20C7959C4(v22);
  operator delete(v25);
  if (v21)
    operator delete(v21);
  sub_20C599E48(a21);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v23 - 96));
  _Unwind_Resume(a1);
}

char *sub_20C79C158(char *result, double *a2, double *a3, unint64_t a4)
{
  char *v6;
  float *v7;
  double v8;
  float v9;

  if (a4)
  {
    v6 = result;
    result = sub_20BDE3738(result, a4);
    v7 = (float *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      v9 = v8;
      *v7++ = v9;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_20C79C1B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C79C1CC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _BYTE *v3;
  _BYTE *v4;
  size_t v5;
  void *v6;
  void *v7;
  _QWORD *v8;

  v3 = *(_BYTE **)a1;
  v4 = *(_BYTE **)(a1 + 8);
  if ((uint64_t)&v4[-*(_QWORD *)a1] < 0)
    v5 = -1;
  else
    v5 = (size_t)&v4[-*(_QWORD *)a1];
  v6 = operator new[](v5);
  v7 = v6;
  if (v4 != v3)
    memmove(v6, v3, v4 - v3);
  v8 = operator new(0x10uLL);
  *v8 = &unk_24C5472D8;
  v8[1] = v7;
  return sub_20C76527C(a2, (uint64_t)v8);
}

void sub_20C79C23C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete[](v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C79C250(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *__p;
  _BYTE *v8;

  v6 = a3;
  sub_20BDE8894(&__p, 1uLL, &v6);
  *a1 = a2;
  a1[1] = 0x100000001;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  sub_20BDE1364(a1 + 2, __p, (uint64_t)v8, (v8 - (_BYTE *)__p) >> 3);
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_20C79C2C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_20C79C2E0(char *result, int *a2, int *a3, size_t __sz)
{
  char *v6;
  _BYTE *v7;
  int v8;

  if (__sz)
  {
    v6 = result;
    result = sub_20BDE2970(result, __sz);
    v7 = (_BYTE *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_20C79C334(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C79C350@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _BYTE *v3;
  _BYTE *v4;
  void *v5;
  void *v6;
  _QWORD *v7;

  v3 = *(_BYTE **)a1;
  v4 = *(_BYTE **)(a1 + 8);
  v5 = operator new[]((size_t)&v4[-*(_QWORD *)a1]);
  v6 = v5;
  if (v4 != v3)
    memmove(v5, v3, v4 - v3);
  v7 = operator new(0x10uLL);
  *v7 = &unk_24C546330;
  v7[1] = v6;
  return sub_20C76527C(a2, (uint64_t)v7);
}

void sub_20C79C3B8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete[](v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C79C3CC(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v2 = (void *)a1[62];
  if (v2)
  {
    a1[63] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[57];
  if (v3)
  {
    a1[58] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[52];
  if (v4)
  {
    a1[53] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[45];
  if (v5)
  {
    a1[46] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[40];
  if (v6)
  {
    a1[41] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[34];
  if (v7)
  {
    a1[35] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[29];
  if (v8)
  {
    a1[30] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[23];
  if (v9)
  {
    a1[24] = v9;
    operator delete(v9);
  }
  v10 = (void *)a1[18];
  if (v10)
  {
    a1[19] = v10;
    operator delete(v10);
  }
  v11 = (void *)a1[12];
  if (v11)
  {
    a1[13] = v11;
    operator delete(v11);
  }
  v12 = (void *)a1[7];
  if (v12)
  {
    a1[8] = v12;
    operator delete(v12);
  }
  v13 = (void *)a1[2];
  if (v13)
  {
    a1[3] = v13;
    operator delete(v13);
  }
  return a1;
}

void sub_20C79C4AC(_QWORD *a1@<X0>, const char *a2@<X1>, char *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v4;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v7;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v8;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v9;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v10;
  unint64_t v11;
  const char *v12;
  _DWORD *v13;
  _QWORD *v14;
  int v15;
  __int128 __p;
  char v17;

  v4 = a1;
  v6 = a1[1];
  if ((v6 & 4) != 0)
    v4 = (_QWORD *)(*(uint64_t (**)(_QWORD *))((v6 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  if (!*v4)
    goto LABEL_19;
  v7 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v7)
    v7 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if ((*v4 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v7 + 85) & 0xFFFFFFFFFFFFFFF8))
  {
LABEL_19:
    *a4 = 1;
    v13 = operator new(0x10uLL);
    *(_QWORD *)v13 = &unk_24C54AE50;
    v13[2] = 0;
LABEL_20:
    sub_20C76527C(a4 + 1, (uint64_t)v13);
    a4[3] = 0;
    a4[4] = 0;
    return;
  }
  v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8)
    v8 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if ((*v4 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v8 + 5) & 0xFFFFFFFFFFFFFFF8))
  {
    *a4 = 1;
    v13 = operator new(0x10uLL);
    *(_QWORD *)v13 = &unk_24C54AE50;
    v13[2] = 1;
    goto LABEL_20;
  }
  v9 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v9)
    v9 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if ((*v4 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v9 + 10) & 0xFFFFFFFFFFFFFFF8))
  {
    *a4 = 1;
    v14 = operator new(0x10uLL);
    v13 = v14;
    *v14 = &unk_24C54AE50;
    v15 = 2;
LABEL_25:
    *((_DWORD *)v14 + 2) = v15;
    goto LABEL_20;
  }
  v10 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v10)
    v10 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v11 = *v4 & 0xFFFFFFFFFFFFFFF8;
  if (v11 == (*((_QWORD *)v10 + 13) & 0xFFFFFFFFFFFFFFF8))
  {
    *a4 = 1;
    v14 = operator new(0x10uLL);
    v13 = v14;
    *v14 = &unk_24C54AE50;
    v15 = 3;
    goto LABEL_25;
  }
  if (v11)
  {
    v12 = (const char *)(v11 + 16);
    if (*(char *)(v11 + 39) < 0)
      v12 = *(const char **)v12;
  }
  else
  {
    v12 = "";
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Unsupported curve basis '%s'", a2, a3, v12);
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::_ErrorSampleForAlembic(&__p, a4);
  if (v17 < 0)
    operator delete((void *)__p);
}

void sub_20C79C6DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C79C6F8(_QWORD *a1@<X0>, const char *a2@<X1>, char *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v4;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v7;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v8;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v9;
  unint64_t v10;
  const char *v11;
  _DWORD *v12;
  __int128 __p;
  char v14;

  v4 = a1;
  v6 = a1[1];
  if ((v6 & 4) != 0)
    v4 = (_QWORD *)(*(uint64_t (**)(_QWORD *))((v6 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  if (!*v4)
    goto LABEL_16;
  v7 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v7)
    v7 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if ((*v4 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v7 + 85) & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_16;
  v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8)
    v8 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if ((*v4 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v8 + 68) & 0xFFFFFFFFFFFFFFF8))
  {
    *a4 = 1;
    v12 = operator new(0x10uLL);
    *(_QWORD *)v12 = &unk_24C54AE98;
    v12[2] = 1;
    goto LABEL_17;
  }
  v9 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v9)
    v9 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v10 = *v4 & 0xFFFFFFFFFFFFFFF8;
  if (v10 == (*((_QWORD *)v9 + 27) & 0xFFFFFFFFFFFFFFF8))
  {
LABEL_16:
    *a4 = 1;
    v12 = operator new(0x10uLL);
    *(_QWORD *)v12 = &unk_24C54AE98;
    v12[2] = 0;
LABEL_17:
    sub_20C76527C(a4 + 1, (uint64_t)v12);
    a4[3] = 0;
    a4[4] = 0;
    return;
  }
  if (v10)
  {
    v11 = (const char *)(v10 + 16);
    if (*(char *)(v10 + 39) < 0)
      v11 = *(const char **)v11;
  }
  else
  {
    v11 = "";
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Unsupported curve type '%s'", a2, a3, v11);
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::_ErrorSampleForAlembic(&__p, a4);
  if (v14 < 0)
    operator delete((void *)__p);
}

void sub_20C79C89C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C79C8B8(_QWORD *a1@<X0>, const char *a2@<X1>, char *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v4;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v7;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v8;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v9;
  unint64_t v10;
  const char *v11;
  _DWORD *v12;
  __int128 __p;
  char v14;

  v4 = a1;
  v6 = a1[1];
  if ((v6 & 4) != 0)
    v4 = (_QWORD *)(*(uint64_t (**)(_QWORD *))((v6 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  if (!*v4)
    goto LABEL_16;
  v7 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v7)
    v7 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if ((*v4 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v7 + 85) & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_16;
  v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8)
    v8 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if ((*v4 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v8 + 87) & 0xFFFFFFFFFFFFFFF8))
  {
LABEL_16:
    *a4 = 1;
    v12 = operator new(0x10uLL);
    *(_QWORD *)v12 = &unk_24C54AEE0;
    v12[2] = 0;
LABEL_17:
    sub_20C76527C(a4 + 1, (uint64_t)v12);
    a4[3] = 0;
    a4[4] = 0;
    return;
  }
  v9 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v9)
    v9 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  v10 = *v4 & 0xFFFFFFFFFFFFFFF8;
  if (v10 == (*((_QWORD *)v9 + 97) & 0xFFFFFFFFFFFFFFF8))
  {
    *a4 = 1;
    v12 = operator new(0x10uLL);
    *(_QWORD *)v12 = &unk_24C54AEE0;
    v12[2] = 1;
    goto LABEL_17;
  }
  if (v10)
  {
    v11 = (const char *)(v10 + 16);
    if (*(char *)(v10 + 39) < 0)
      v11 = *(const char **)v11;
  }
  else
  {
    v11 = "";
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Unsupported curve wrap '%s'", a2, a3, v11);
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::_ErrorSampleForAlembic(&__p, a4);
  if (v14 < 0)
    operator delete((void *)__p);
}

void sub_20C79CA5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C79CA7C(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::_SampleForAlembic::_Holder *a1)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::_SampleForAlembic::_Holder::~_Holder(a1);
  operator delete(v1);
}

uint64_t sub_20C79CA90(uint64_t a1)
{
  return a1 + 8;
}

void sub_20C79CA9C(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::_SampleForAlembic::_Holder *a1)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::_SampleForAlembic::_Holder::~_Holder(a1);
  operator delete(v1);
}

uint64_t sub_20C79CAB0(uint64_t a1)
{
  return a1 + 8;
}

void sub_20C79CABC(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::_SampleForAlembic::_Holder *a1)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::_SampleForAlembic::_Holder::~_Holder(a1);
  operator delete(v1);
}

uint64_t sub_20C79CAD0(uint64_t a1)
{
  return a1 + 8;
}

uint64_t sub_20C79CAD8(uint64_t a1)
{
  sub_20BF5618C(a1 + 40);
  sub_20BF5618C(a1);
  return a1;
}

uint64_t sub_20C79CB10(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v13[4];
  char v14;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 - 16);
    if (*(_QWORD *)(a1 + 24))
      v6 = *(unint64_t **)(a1 + 24);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *a3;
  *(_OWORD *)(a1 + 56) = a3[1];
  *(_OWORD *)(a1 + 40) = v8;
  v9 = *((_QWORD *)a3 + 4);
  *(_QWORD *)(a1 + 72) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 - 16);
    if (*(_QWORD *)(a1 + 64))
      v10 = *(unint64_t **)(a1 + 64);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  if (*(_QWORD *)a1 != *(_QWORD *)(a1 + 40))
  {
    v13[0] = "usdGeom/hermiteCurves.h";
    v13[1] = "PointAndTangentArrays";
    v13[2] = 242;
    v13[3] = "pxrInternal__aapl__pxrReserved__::UsdGeomHermiteCurves::PointAndTangentArrays::PointAndTangentArrays(const "
             "VtVec3fArray &, const VtVec3fArray &)";
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v13, 3, (pxrInternal__aapl__pxrReserved__ *)"Points and tangents must be the same size.");
    sub_20BF56210((_QWORD *)a1);
    sub_20BF56210((_QWORD *)(a1 + 40));
  }
  return a1;
}

void sub_20C79CC0C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_20BF5618C(v2);
  sub_20BF5618C(v1);
  _Unwind_Resume(a1);
}

int64x2_t sub_20C79CC34(uint64_t a1)
{
  int64x2_t result;

  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 127;
  *(_BYTE *)(a1 + 12) = 0;
  sub_20BDDF7E4((char *)(a1 + 16), 0, 0, 0);
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 127;
  *(_BYTE *)(a1 + 52) = 0;
  sub_20BDDF7E4((char *)(a1 + 56), 0, 0, 0);
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 127;
  *(_BYTE *)(a1 + 92) = 0;
  sub_20BDDF7E4((char *)(a1 + 96), 0, 0, 0);
  sub_20C79513C(a1 + 120);
  *(int64x2_t *)(a1 + 208) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(_OWORD *)(a1 + 224) = xmmword_20CA521E0;
  result = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  *(int64x2_t *)(a1 + 240) = result;
  return result;
}

char *sub_20C79CCDC(char *result, uint64_t a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 5);
  *((_QWORD *)result + 15) = *(_QWORD *)a2;
  *(_QWORD *)(result + 125) = v4;
  if (result + 120 == (char *)a2)
  {
    v6 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(result + 165) = *(_QWORD *)(a2 + 45);
    *((_QWORD *)result + 20) = v6;
  }
  else
  {
    sub_20BDDF7E4(result + 136, *(char **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 3);
    v5 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(v3 + 165) = *(_QWORD *)(a2 + 45);
    *((_QWORD *)v3 + 20) = v5;
    result = sub_20BDDF7E4(v3 + 176, *(char **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3);
  }
  *((_DWORD *)v3 + 50) = *(_DWORD *)(a2 + 80);
  return result;
}

void sub_20C79CD6C(uint64_t a1@<X0>, int64_t *a2@<X8>)
{
  uint64_t v3;
  unint64_t *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t *v7;
  void *__p;
  _BYTE *v9;
  uint64_t v10;

  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 4) != 0)
    v4 = (unint64_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  else
    v4 = *(unint64_t **)a1;
  v5 = (uint64_t *)v4[4];
  v6 = *v4;
  v7 = &v5[*v4];
  v9 = 0;
  v10 = 0;
  __p = 0;
  sub_20C79E534((char *)&__p, v5, v7, v6);
  *a2 = (v9 - (_BYTE *)__p) >> 3;
  sub_20C79E5A4((uint64_t)&__p, a2 + 1);
  a2[3] = 0;
  a2[4] = 0;
  if (__p)
  {
    v9 = __p;
    operator delete(__p);
  }
}

void sub_20C79CDF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C79CE14(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (void *)a1[22];
  if (v2)
  {
    a1[23] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[17];
  if (v3)
  {
    a1[18] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[12];
  if (v4)
  {
    a1[13] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[7];
  if (v5)
  {
    a1[8] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[2];
  if (v6)
  {
    a1[3] = v6;
    operator delete(v6);
  }
  return a1;
}

uint64_t sub_20C79CE84(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t **a4, uint64_t **a5, uint64_t **a6)
{
  _DWORD *v12;
  int v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  int v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t *v26;
  unint64_t v27;
  int v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  int v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  _QWORD *exception;
  _QWORD *v47;
  _DWORD v48[4];
  int v49;
  __int128 **p_p_p;
  _DWORD v51[4];
  _DWORD v52[4];
  void *v53[2];
  char v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  __int128 __p;
  uint64_t v58;
  __int128 *p_p;
  _QWORD *v60[3];
  std::__shared_weak_count *v61;
  std::string __str;
  void *v63;
  char v64;
  _QWORD *v65[3];
  __int128 v66;
  char v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  _DWORD *v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  const void **v75[3];
  _QWORD *v76;
  std::__shared_weak_count *v77;
  int v78;
  uint64_t v79;

  *(_DWORD *)(a1 + 8) = 2;
  v12 = (_DWORD *)(a1 + 8);
  sub_20BDDC0E4((_QWORD *)(a1 + 16), "");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = &unk_24C54AF28;
  sub_20C79D9F0(a1 + 56);
  v13 = *(_DWORD *)(a2 + 8);
  *((_QWORD *)&__p + 1) = 0;
  v58 = 0;
  *(_QWORD *)&__p = (char *)&__p + 8;
  v72 = 0;
  v73 = 0;
  v74 = v13;
  sub_20BDEBF8C((uint64_t *)v75, (const void ***)&__p);
  v76 = 0;
  v77 = 0;
  v78 = 0;
  v79 = 1;
  sub_20BDE9D48((uint64_t)&__p, *((_QWORD **)&__p + 1));
  sub_20BE02E30(a4, (uint64_t)&v74);
  sub_20BE02E30(a5, (uint64_t)&v74);
  sub_20BE02E30(a6, (uint64_t)&v74);
  *v12 = v74;
  v70 = v12;
  v71 = "OSchemaObject::OSchemaObject( OObject)";
  v15 = *(_QWORD *)(a2 + 40);
  v14 = *(std::__shared_weak_count **)(a2 + 48);
  v68 = v15;
  v69 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  if (!v15)
  {
    sub_20BDDBD68((uint64_t)&__p);
    sub_20BDDC1C8(&v58, (uint64_t)"NULL Parent ObjectWriter in OSchemaObject ctor", 46);
    std::stringbuf::str();
    sub_20BDDBF20(&__str, &v66);
    if (v67 < 0)
      operator delete((void *)v66);
    exception = __cxa_allocate_exception(0x20uLL);
    v47 = sub_20BDDC09C(exception, (uint64_t)&__str);
    __cxa_throw(v47, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  sub_20BDEBF8C((uint64_t *)&v66, v75);
  if (HIDWORD(v79) == 1)
  {
    v18 = 1;
  }
  else
  {
    sub_20BDDC0E4(&__p, "schema");
    sub_20BDDC0E4(&__str, "AbcGeom_Points_v1");
    p_p = &__p;
    v19 = sub_20BDDDFDC((uint64_t **)&v66, (const void **)&__p, (uint64_t)&unk_20CAC184C, &p_p);
    std::string::operator=((std::string *)(v19 + 7), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(v58) < 0)
      operator delete((void *)__p);
    sub_20BDDC0E4(&__p, "schemaObjTitle");
    sub_20C79D694(&__str);
    p_p = &__p;
    v20 = sub_20BDDDFDC((uint64_t **)&v66, (const void **)&__p, (uint64_t)&unk_20CAC184C, &p_p);
    std::string::operator=((std::string *)(v20 + 7), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(v58) < 0)
      operator delete((void *)__p);
    sub_20BDDC0E4(&__p, "schemaBaseType");
    sub_20BDDC0E4(&__str, "AbcGeom_GeomBase_v1");
    p_p = &__p;
    v21 = sub_20BDDDFDC((uint64_t **)&v66, (const void **)&__p, (uint64_t)&unk_20CAC184C, &p_p);
    std::string::operator=((std::string *)(v21 + 7), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(v58) < 0)
      operator delete((void *)__p);
    v18 = 0;
  }
  sub_20BE0C5F0(&__str, a3, (const void ***)&v66);
  (*(void (**)(__int128 *__return_ptr, uint64_t, std::string *))(*(_QWORD *)v15 + 80))(&__p, v15, &__str);
  sub_20BDE82DC(a1 + 40, &__p);
  v22 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
  if (*((_QWORD *)&__p + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v76;
  v60[2] = v76;
  v61 = v77;
  if (v77)
  {
    v26 = (unint64_t *)&v77->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  if (v25)
  {
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v68 + 24))(&__p);
    v28 = (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)__p + 48))(__p, v25);
    v29 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
    if (*((_QWORD *)&__p + 1))
    {
      v30 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
  }
  else
  {
    v28 = v78;
  }
  v60[1] = 0;
  v60[0] = 0;
  p_p = (__int128 *)v60;
  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 40) + 40))(&v55);
  sub_20BDDC0E4(v53, ".geom");
  v32 = *v12;
  v52[0] = 1;
  v52[2] = v32;
  v51[0] = 2;
  v51[2] = v28;
  v49 = 3;
  p_p_p = &p_p;
  v48[0] = 6;
  v48[2] = v18;
  Alembic::AbcGeom::v12::OPointsSchema::OPointsSchema(&__p, &v55, v53, v52, v51, &v49, v48);
  sub_20C79D770(a1 + 56, (uint64_t)&__p);
  sub_20BE47D64((uint64_t)&__p);
  if (v54 < 0)
    operator delete(v53[0]);
  v33 = v56;
  if (v56)
  {
    v34 = (unint64_t *)&v56->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  sub_20BDE9D48((uint64_t)&p_p, v60[0]);
  v36 = v61;
  if (v61)
  {
    v37 = (unint64_t *)&v61->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  sub_20BDE9D48((uint64_t)v65, v65[1]);
  if (v64 < 0)
    operator delete(v63);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  sub_20BDE9D48((uint64_t)&v66, *((_QWORD **)&v66 + 1));
  v39 = v69;
  if (v69)
  {
    v40 = (unint64_t *)&v69->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = v77;
  if (v77)
  {
    v43 = (unint64_t *)&v77->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  sub_20BDE9D48((uint64_t)v75, v75[1]);
  return a1;
}

void sub_20C79D498(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  uint64_t v16;
  uint64_t v17;
  va_list __p;

  va_start(__p, a16);
  sub_20BDDC194((std::exception *)&STACK[0x2E8]);
  sub_20BDDBE98((uint64_t)__p);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v17 - 200));
  __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20C79D94C(v16);
  sub_20C79D94C(v16);
}

void sub_20C79D608()
{
  uint64_t v0;

  sub_20BE02504(v0 - 184, 0);
  __cxa_end_catch();
  JUMPOUT(0x20C79D3BCLL);
}

void sub_20C79D624()
{
  __cxa_end_catch();
  JUMPOUT(0x20C79D674);
}

void sub_20C79D630()
{
  __cxa_end_catch();
  JUMPOUT(0x20C79D674);
}

void sub_20C79D64C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,_QWORD *a24)
{
  uint64_t v24;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v24 - 168));
  sub_20BDE9D48((uint64_t)&a23, a24);
  JUMPOUT(0x20C79D67CLL);
}

void sub_20C79D668()
{
  JUMPOUT(0x20C79D684);
}

void sub_20C79D670(_Unwind_Exception *a1)
{
  void **v1;
  uint64_t v2;
  uint64_t v3;

  sub_20BE02EB0(v3 - 152);
  sub_20BE47D64(v2);
  Alembic::Abc::v12::OObject::~OObject(v1);
  _Unwind_Resume(a1);
}

void sub_20C79D694(std::string *a1@<X8>)
{
  std::string *v2;
  __int128 v3;
  std::string *v4;
  std::string v5;
  std::string v6;

  sub_20BDDC0E4(&v5, ":");
  v2 = std::string::insert(&v5, 0, "AbcGeom_Points_v1");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v6.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v6.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  v4 = std::string::append(&v6, ".geom");
  *a1 = *v4;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
}

void sub_20C79D73C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C79D770(uint64_t a1, uint64_t a2)
{
  void **v4;
  __int128 v5;
  int v6;

  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  std::string::operator=((std::string *)(a1 + 16), (const std::string *)(a2 + 16));
  sub_20BDE881C((_QWORD *)(a1 + 40), (uint64_t *)(a2 + 40));
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  std::string::operator=((std::string *)(a1 + 64), (const std::string *)(a2 + 64));
  sub_20BDE881C((_QWORD *)(a1 + 88), (uint64_t *)(a2 + 88));
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(a2 + 112));
  sub_20BDE881C((_QWORD *)(a1 + 136), (uint64_t *)(a2 + 136));
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  std::string::operator=((std::string *)(a1 + 160), (const std::string *)(a2 + 160));
  sub_20BDE881C((_QWORD *)(a1 + 184), (uint64_t *)(a2 + 184));
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  std::string::operator=((std::string *)(a1 + 208), (const std::string *)(a2 + 208));
  sub_20BDE881C((_QWORD *)(a1 + 232), (uint64_t *)(a2 + 232));
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  std::string::operator=((std::string *)(a1 + 256), (const std::string *)(a2 + 256));
  sub_20BDE881C((_QWORD *)(a1 + 280), (uint64_t *)(a2 + 280));
  *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 296);
  std::string::operator=((std::string *)(a1 + 304), (const std::string *)(a2 + 304));
  sub_20BDE881C((_QWORD *)(a1 + 328), (uint64_t *)(a2 + 328));
  *(_DWORD *)(a1 + 344) = *(_DWORD *)(a2 + 344);
  std::string::operator=((std::string *)(a1 + 352), (const std::string *)(a2 + 352));
  sub_20BDE881C((_QWORD *)(a1 + 376), (uint64_t *)(a2 + 376));
  v4 = (void **)(a1 + 392);
  if (*(char *)(a1 + 415) < 0)
    operator delete(*v4);
  v5 = *(_OWORD *)(a2 + 392);
  *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
  *(_OWORD *)v4 = v5;
  *(_BYTE *)(a2 + 415) = 0;
  *(_BYTE *)(a2 + 392) = 0;
  *(_DWORD *)(a1 + 416) = *(_DWORD *)(a2 + 416);
  std::string::operator=((std::string *)(a1 + 424), (const std::string *)(a2 + 424));
  sub_20BDE881C((_QWORD *)(a1 + 448), (uint64_t *)(a2 + 448));
  *(_DWORD *)(a1 + 464) = *(_DWORD *)(a2 + 464);
  std::string::operator=((std::string *)(a1 + 472), (const std::string *)(a2 + 472));
  sub_20BDE881C((_QWORD *)(a1 + 496), (uint64_t *)(a2 + 496));
  *(_QWORD *)(a1 + 512) = *(_QWORD *)(a2 + 512);
  *(_DWORD *)(a1 + 520) = *(_DWORD *)(a2 + 520);
  std::string::operator=((std::string *)(a1 + 528), (const std::string *)(a2 + 528));
  sub_20BDE881C((_QWORD *)(a1 + 552), (uint64_t *)(a2 + 552));
  v6 = *(_DWORD *)(a2 + 584);
  *(_OWORD *)(a1 + 568) = *(_OWORD *)(a2 + 568);
  *(_DWORD *)(a1 + 584) = v6;
  return a1;
}

void sub_20C79D94C(uint64_t a1)
{
  sub_20BE46C28((_QWORD *)(a1 + 56));
}

void sub_20C79D964()
{
  uint64_t v0;

  sub_20BDEBF08((_QWORD *)(v0 + 40));
  JUMPOUT(0x212B929D0);
}

void sub_20C79D984(void **a1)
{
  *a1 = &unk_24C54AF28;
  sub_20BE47D64((uint64_t)(a1 + 7));
  Alembic::Abc::v12::OObject::~OObject(a1);
}

void sub_20C79D9B8(void **a1)
{
  void *v2;

  *a1 = &unk_24C54AF28;
  sub_20BE47D64((uint64_t)(a1 + 7));
  Alembic::Abc::v12::OObject::~OObject(a1);
  operator delete(v2);
}

uint64_t sub_20C79D9F0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_20C79DAE0(a1);
  *(_QWORD *)v2 = &unk_24C5196E8;
  *(_DWORD *)(v2 + 248) = 2;
  sub_20BDDC0E4((_QWORD *)(v2 + 256), "");
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 304), "");
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 344) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 352), "");
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  sub_20BE46E6C(a1 + 392);
  *(_BYTE *)(a1 + 568) = 0;
  *(_QWORD *)(a1 + 576) = 0;
  *(_DWORD *)(a1 + 584) = 0;
  return a1;
}

void sub_20C79DA98(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;

  v4 = v3;
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v4);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(v1 + 296));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v2);
  sub_20BE441C0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C79DAE0(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 16), "");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = off_24C519770;
  *(_DWORD *)(a1 + 56) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 64), "");
  *(_DWORD *)(a1 + 104) = 2;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  sub_20BDDC0E4((_QWORD *)(a1 + 112), "");
  *(_DWORD *)(a1 + 152) = 2;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  sub_20BDDC0E4((_QWORD *)(a1 + 160), "");
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 200) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 208), "");
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  return a1;
}

void sub_20C79DBB0(_Unwind_Exception *a1)
{
  void **v1;
  void **v2;
  void **v3;
  Alembic::Abc::v12::OCompoundProperty *v4;

  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v4);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v3);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v2);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C79DBF4(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C54AF60;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20C79DC3C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_20C79DC60(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20C79DC74(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20C79DC8C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C54AFB0))
    return a1 + 24;
  else
    return 0;
}

_QWORD *sub_20C79DCCC(_QWORD *a1)
{
  *a1 = off_24C54A360;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 1));
  return a1;
}

void sub_20C79DCFC(_QWORD *a1)
{
  *a1 = off_24C54A360;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 1));
  operator delete(a1);
}

void sub_20C79DD2C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _BYTE *v7;
  __int128 v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  *(_DWORD *)a2 = *(_DWORD *)(v4 + 64);
  v7 = (_BYTE *)(a2 + 8);
  if (*(char *)(v4 + 95) < 0)
  {
    sub_20BDDBFAC(v7, *(void **)(v4 + 72), *(_QWORD *)(v4 + 80));
  }
  else
  {
    v8 = *(_OWORD *)(v4 + 72);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(v4 + 88);
    *(_OWORD *)v7 = v8;
  }
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v4 + 96);
  v9 = *(_QWORD *)(v4 + 104);
  *(_QWORD *)(a2 + 40) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  if (v3)
  {
    v12 = (unint64_t *)&v3->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20C79DE18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

void sub_20C79DE2C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  sub_20C79DF64(v2 + 56, a2);
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20C79DEB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

void sub_20C79DEC8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  sub_20C79E1A4(v2 + 56, a2);
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20C79DF50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

_BYTE *sub_20C79DF64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _BYTE *result;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _DWORD v15[4];
  _DWORD v16[4];
  void *__p[2];
  char v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  int v21;
  std::string v22;
  uint64_t v23[4];

  v23[2] = a1 + 8;
  v23[3] = (uint64_t)"OGeomBaseSchema::getArbGeomParams()";
  v4 = *(char *)(a1 + 183);
  if (v4 < 0)
  {
    if (!*(_QWORD *)(a1 + 168))
      goto LABEL_5;
  }
  else if (!*(_BYTE *)(a1 + 183))
  {
LABEL_5:
    if (*(_QWORD *)(a1 + 184))
      goto LABEL_17;
  }
  v5 = *(std::__shared_weak_count **)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 40);
  v20 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_20BDDC0E4(__p, ".arbGeomParams");
  v16[0] = 0;
  v16[2] = 0;
  v15[0] = 0;
  v15[2] = 0;
  Alembic::Abc::v12::OCompoundProperty::OCompoundProperty(&v21, &v19, __p, v16, v15);
  *(_DWORD *)(a1 + 152) = v21;
  std::string::operator=((std::string *)(a1 + 160), &v22);
  sub_20BDE881C((_QWORD *)(a1 + 184), v23);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v21);
  if (v18 < 0)
    operator delete(__p[0]);
  v8 = v20;
  if (v20)
  {
    v9 = (unint64_t *)&v20->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  LOBYTE(v4) = *(_BYTE *)(a1 + 183);
LABEL_17:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 152);
  result = (_BYTE *)(a2 + 8);
  if ((v4 & 0x80) != 0)
  {
    result = sub_20BDDBFAC(result, *(void **)(a1 + 160), *(_QWORD *)(a1 + 168));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)(a1 + 160);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 176);
  }
  v12 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a2 + 40) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  return result;
}

void sub_20C79E0E8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,char a22)
{
  uint64_t v22;
  uint64_t v23;
  void *v25;

  v25 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570(v23 - 48, (uint64_t)v25);
  else
    sub_20BE02504(v23 - 48, 0);
  __cxa_end_catch();
  *(_DWORD *)v22 = 2;
  sub_20BDDC0E4((_QWORD *)(v22 + 8), "");
  *(_QWORD *)(v22 + 32) = 0;
  *(_QWORD *)(v22 + 40) = 0;
  JUMPOUT(0x20C79E0D4);
}

void sub_20C79E184(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_BYTE *sub_20C79E1A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _BYTE *result;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _DWORD v15[4];
  _DWORD v16[4];
  void *__p[2];
  char v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  int v21;
  std::string v22;
  uint64_t v23[4];

  v23[2] = a1 + 8;
  v23[3] = (uint64_t)"OGeomBaseSchema::getUserProperties()";
  v4 = *(char *)(a1 + 231);
  if (v4 < 0)
  {
    if (!*(_QWORD *)(a1 + 216))
      goto LABEL_5;
  }
  else if (!*(_BYTE *)(a1 + 231))
  {
LABEL_5:
    if (*(_QWORD *)(a1 + 232))
      goto LABEL_17;
  }
  v5 = *(std::__shared_weak_count **)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 40);
  v20 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_20BDDC0E4(__p, ".userProperties");
  v16[0] = 0;
  v16[2] = 0;
  v15[0] = 0;
  v15[2] = 0;
  Alembic::Abc::v12::OCompoundProperty::OCompoundProperty(&v21, &v19, __p, v16, v15);
  *(_DWORD *)(a1 + 200) = v21;
  std::string::operator=((std::string *)(a1 + 208), &v22);
  sub_20BDE881C((_QWORD *)(a1 + 232), v23);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v21);
  if (v18 < 0)
    operator delete(__p[0]);
  v8 = v20;
  if (v20)
  {
    v9 = (unint64_t *)&v20->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  LOBYTE(v4) = *(_BYTE *)(a1 + 231);
LABEL_17:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 200);
  result = (_BYTE *)(a2 + 8);
  if ((v4 & 0x80) != 0)
  {
    result = sub_20BDDBFAC(result, *(void **)(a1 + 208), *(_QWORD *)(a1 + 216));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)(a1 + 208);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 224);
  }
  v12 = *(_QWORD *)(a1 + 240);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 232);
  *(_QWORD *)(a2 + 40) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  return result;
}

void sub_20C79E328(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,char a22)
{
  uint64_t v22;
  uint64_t v23;
  void *v25;

  v25 = __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20BE02570(v23 - 48, (uint64_t)v25);
  else
    sub_20BE02504(v23 - 48, 0);
  __cxa_end_catch();
  *(_DWORD *)v22 = 2;
  sub_20BDDC0E4((_QWORD *)(v22 + 8), "");
  *(_QWORD *)(v22 + 32) = 0;
  *(_QWORD *)(v22 + 40) = 0;
  JUMPOUT(0x20C79E314);
}

void sub_20C79E3C4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20C79E3E8(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20C79E3FC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20C79E414(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C54B078))
    return a1 + 24;
  else
    return 0;
}

uint64_t sub_20C79E454(uint64_t a1)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0x30000000ALL;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 48) = 0x30000000ALL;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)(a1 + 88) = 0x100000007;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_QWORD *)(a1 + 128) = 0x10000000ALL;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 168) = 0x100000005;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 200) = 127;
  *(int64x2_t *)(a1 + 208) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(_OWORD *)(a1 + 224) = xmmword_20CA521E0;
  *(int64x2_t *)(a1 + 240) = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  sub_20C79CC34(a1);
  return a1;
}

void sub_20C79E500(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void *v5;

  sub_20BE28D2C(v1 + 15);
  v5 = (void *)v1[12];
  if (v5)
  {
    v1[13] = v5;
    operator delete(v5);
  }
  sub_20C96BFCC(v3, v2, (uint64_t)v1);
  _Unwind_Resume(a1);
}

char *sub_20C79E534(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_20BDDF654(result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_20C79E588(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C79E5A4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _BYTE *v3;
  _BYTE *v4;
  size_t v5;
  void *v6;
  void *v7;
  _QWORD *v8;

  v3 = *(_BYTE **)a1;
  v4 = *(_BYTE **)(a1 + 8);
  if ((uint64_t)&v4[-*(_QWORD *)a1] < 0)
    v5 = -1;
  else
    v5 = (size_t)&v4[-*(_QWORD *)a1];
  v6 = operator new[](v5);
  v7 = v6;
  if (v4 != v3)
    memmove(v6, v3, v4 - v3);
  v8 = operator new(0x10uLL);
  *v8 = &unk_24C546DB0;
  v8[1] = v7;
  return sub_20C76527C(a2, (uint64_t)v8);
}

void sub_20C79E614(_Unwind_Exception *a1)
{
  void *v1;

  operator delete[](v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C79E628(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *__p;
  _BYTE *v8;

  v6 = a3;
  sub_20BDE8894(&__p, 1uLL, &v6);
  *a1 = a2;
  a1[1] = 0x100000007;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  sub_20BDE1364(a1 + 2, __p, (uint64_t)v8, (v8 - (_BYTE *)__p) >> 3);
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_20C79E6A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20C79E6BC@<X0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *result;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  if ((sub_20BFB5E50(a1) & 1) != 0)
    return sub_20C1023FC(a1, a2);
  result = (uint64_t *)pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_20BFB5E88, (uint64_t)&stru_24C51BCE0);
  v5 = *result;
  *a2 = *result;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      *a2 = v6;
  }
  return result;
}

_QWORD *sub_20C79E73C(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t (**a4)(_QWORD, uint64_t), double a5)
{
  _QWORD *v7;
  pxrInternal__aapl__pxrReserved__::VtValue *v8;
  uint64_t v9;
  uint64_t *v10;
  void **v12;
  const std::type_info *v13;
  char *v14;
  char *v15;
  void **v16;
  unint64_t v17;
  const char *v18;
  void *v19[2];
  char v20;
  void *__p[2];
  char v22;
  void *v23[2];
  char v24;
  _QWORD v25[4];
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(*(_QWORD *)(a1 + 48) + 16))
  {
    v7 = sub_20C78EDF8(a1, a5);
    v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_20BF4C6D0(&v27, v7);
    v9 = sub_20BF7B9F8(v8);
    if ((_DWORD)v9)
    {
      if ((v28 & 4) != 0)
        v10 = (uint64_t *)(*(uint64_t (**)(uint64_t *))((v28 & 0xFFFFFFFFFFFFFFF8) + 168))(&v27);
      else
        v10 = &v27;
      *(_DWORD *)a4 = *(_DWORD *)v10;
    }
    else
    {
      v25[0] = "usdAbc/alembicWriter.cpp";
      v25[1] = "_ExtractWithFallback";
      v25[2] = 2536;
      v25[3] = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ExtractWithFallback(const UsdSamples &, do"
               "uble, const UsdPrimDefinition *, const TfToken &, T *) [T = float]";
      v26 = 0;
      v12 = v23;
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(MEMORY[0x24BEDB788] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v23);
      if (v24 < 0)
        v12 = (void **)v23[0];
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((pxrInternal__aapl__pxrReserved__::VtValue *)&v27, v13, v14, (uint64_t)v19);
      pxrInternal__aapl__pxrReserved__::ArchGetDemangled((uint64_t)v19, (uint64_t)__p);
      if (v22 >= 0)
        v16 = __p;
      else
        v16 = (void **)__p[0];
      v17 = *a3 & 0xFFFFFFFFFFFFFFF8;
      if (v17)
      {
        v18 = (const char *)(v17 + 16);
        if (*(char *)(v17 + 39) < 0)
          v18 = *(const char **)v18;
      }
      else
      {
        v18 = "";
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v25, (pxrInternal__aapl__pxrReserved__ *)"Expected type '%s', but found '%s' for %s", v15, v12, v16, v18);
      if (v22 < 0)
        operator delete(__p[0]);
      if (v20 < 0)
        operator delete(v19[0]);
      if (v24 < 0)
        operator delete(v23[0]);
    }
    sub_20BF4C2D8((uint64_t)&v27);
  }
  else
  {
    if (a2)
      return sub_20C79F854(a2, a3, a4);
    return 0;
  }
  return (_QWORD *)v9;
}

void sub_20C79E92C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  if (a23 < 0)
    operator delete(__p);
  if (a17 < 0)
    operator delete(a12);
  if (a29 < 0)
    operator delete(a24);
  sub_20BF4C2D8(v29 - 56);
  _Unwind_Resume(a1);
}

uint64_t sub_20C79E994(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t **a4, uint64_t **a5, uint64_t **a6)
{
  _DWORD *v12;
  int v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  int v18;
  uint64_t *v19;
  uint64_t *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t *v25;
  unint64_t v26;
  int v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  int v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  _QWORD *exception;
  _QWORD *v47;
  uint64_t *v48;
  int v49;
  uint64_t *v50[2];
  uint64_t *v51;
  int v52;
  int64x2_t *v53;
  int v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  int64x2_t __p;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  std::string v66;
  int64x2_t *p_p;
  _QWORD *v68[3];
  std::__shared_weak_count *v69;
  std::string __str;
  void *v71;
  char v72;
  _QWORD *v73[3];
  __int128 v74;
  char v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  _DWORD *v78;
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  const void **v83[3];
  _QWORD *v84;
  std::__shared_weak_count *v85;
  int v86;
  uint64_t v87;
  void **v88;

  *(_DWORD *)(a1 + 8) = 2;
  v12 = (_DWORD *)(a1 + 8);
  sub_20BDDC0E4((_QWORD *)(a1 + 16), "");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = &unk_24C54B0A0;
  sub_20BE34914((int64x2_t *)(a1 + 56));
  v13 = *(_DWORD *)(a2 + 8);
  __p.i64[1] = 0;
  v58 = 0;
  __p.i64[0] = (uint64_t)&__p.i64[1];
  v80 = 0;
  v81 = 0;
  v82 = v13;
  sub_20BDEBF8C((uint64_t *)v83, (const void ***)&__p);
  v84 = 0;
  v85 = 0;
  v86 = 0;
  v87 = 1;
  sub_20BDE9D48((uint64_t)&__p, (_QWORD *)__p.i64[1]);
  sub_20BE02E30(a4, (uint64_t)&v82);
  sub_20BE02E30(a5, (uint64_t)&v82);
  sub_20BE02E30(a6, (uint64_t)&v82);
  *v12 = v82;
  v78 = v12;
  v79 = "OSchemaObject::OSchemaObject( OObject)";
  v15 = *(_QWORD *)(a2 + 40);
  v14 = *(std::__shared_weak_count **)(a2 + 48);
  v76 = v15;
  v77 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  if (!v15)
  {
    sub_20BDDBD68((uint64_t)&__p);
    sub_20BDDC1C8(&v58, (uint64_t)"NULL Parent ObjectWriter in OSchemaObject ctor", 46);
    std::stringbuf::str();
    sub_20BDDBF20(&__str, &v74);
    if (v75 < 0)
      operator delete((void *)v74);
    exception = __cxa_allocate_exception(0x20uLL);
    v47 = sub_20BDDC09C(exception, (uint64_t)&__str);
    __cxa_throw(v47, (struct type_info *)&unk_24C516920, (void (*)(void *))sub_20BDDBE94);
  }
  sub_20BDEBF8C((uint64_t *)&v74, v83);
  if (HIDWORD(v87) == 1)
  {
    v18 = 1;
  }
  else
  {
    sub_20BDDC0E4(&__p, "schema");
    sub_20BDDC0E4(&__str, "AbcGeom_Camera_v1");
    p_p = &__p;
    v19 = sub_20BDDDFDC((uint64_t **)&v74, (const void **)&__p, (uint64_t)&unk_20CAC184C, (__int128 **)&p_p);
    std::string::operator=((std::string *)(v19 + 7), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(v58) < 0)
      operator delete((void *)__p.i64[0]);
    sub_20BDDC0E4(&__p, "schemaObjTitle");
    sub_20C79F234(&__str);
    p_p = &__p;
    v20 = sub_20BDDDFDC((uint64_t **)&v74, (const void **)&__p, (uint64_t)&unk_20CAC184C, (__int128 **)&p_p);
    std::string::operator=((std::string *)(v20 + 7), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(v58) < 0)
      operator delete((void *)__p.i64[0]);
    v18 = 0;
  }
  sub_20BE0C5F0(&__str, a3, (const void ***)&v74);
  (*(void (**)(int64x2_t *__return_ptr, uint64_t, std::string *))(*(_QWORD *)v15 + 80))(&__p, v15, &__str);
  sub_20BDE82DC(a1 + 40, (__int128 *)__p.i8);
  v21 = (std::__shared_weak_count *)__p.i64[1];
  if (__p.i64[1])
  {
    v22 = (unint64_t *)(__p.i64[1] + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v84;
  v68[2] = v84;
  v69 = v85;
  if (v85)
  {
    v25 = (unint64_t *)&v85->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  if (v24)
  {
    (*(void (**)(int64x2_t *__return_ptr))(*(_QWORD *)v76 + 24))(&__p);
    v27 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)__p.i64[0] + 48))(__p.i64[0], v24);
    v28 = (std::__shared_weak_count *)__p.i64[1];
    if (__p.i64[1])
    {
      v29 = (unint64_t *)(__p.i64[1] + 8);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
  }
  else
  {
    v27 = v86;
  }
  v68[1] = 0;
  v68[0] = 0;
  p_p = (int64x2_t *)v68;
  if (HIDWORD(v87) == 1)
  {
    sub_20BDDC0E4(&__p, "replace");
    sub_20BDDC0E4(&v66, "1");
    v53 = &__p;
    v31 = sub_20BDDDFDC((uint64_t **)&p_p, (const void **)&__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v53);
    std::string::operator=((std::string *)(v31 + 7), &v66);
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v66.__r_.__value_.__l.__data_);
    if (SHIBYTE(v58) < 0)
      operator delete((void *)__p.i64[0]);
  }
  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 40) + 40))(&v55);
  sub_20BDDC0E4(&v66, ".geom");
  v32 = *v12;
  LODWORD(v53) = 1;
  v54 = v32;
  LODWORD(v51) = 2;
  v52 = v27;
  LODWORD(v50[0]) = 3;
  v50[1] = (uint64_t *)&p_p;
  LODWORD(v48) = 6;
  v49 = v18;
  sub_20BE34C18(&__p, &v55, (uint64_t)&v66, (uint64_t **)&v53, &v51, v50, &v48);
  sub_20BE33B1C(a1 + 56, (uint64_t)&__p);
  __p.i64[0] = (uint64_t)&unk_24C5194C0;
  v88 = (void **)&v65;
  sub_20BE34B94(&v88);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)&v64);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(&v63);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v62);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v61);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(&v60);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)&v59);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((void **)&__p.i64[1]);
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v66.__r_.__value_.__l.__data_);
  v33 = v56;
  if (v56)
  {
    v34 = (unint64_t *)&v56->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  sub_20BDE9D48((uint64_t)&p_p, v68[0]);
  v36 = v69;
  if (v69)
  {
    v37 = (unint64_t *)&v69->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  sub_20BDE9D48((uint64_t)v73, v73[1]);
  if (v72 < 0)
    operator delete(v71);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  sub_20BDE9D48((uint64_t)&v74, *((_QWORD **)&v74 + 1));
  v39 = v77;
  if (v77)
  {
    v40 = (unint64_t *)&v77->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = v85;
  if (v85)
  {
    v43 = (unint64_t *)&v85->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  sub_20BDE9D48((uint64_t)v83, v83[1]);
  return a1;
}

void sub_20C79F008(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v12;
  uint64_t v13;
  va_list __p;

  va_start(__p, a12);
  sub_20BDDC194((std::exception *)&STACK[0x2B0]);
  sub_20BDDBE98((uint64_t)__p);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v13 - 208));
  __cxa_begin_catch(a1);
  if (a2 == 2)
    sub_20C79F310(v12);
  sub_20C79F310(v12);
}

void sub_20C79F160()
{
  uint64_t v0;

  sub_20BE02504(v0 - 192, 0);
  __cxa_end_catch();
  JUMPOUT(0x20C79EF2CLL);
}

void sub_20C79F17C()
{
  __cxa_end_catch();
  JUMPOUT(0x20C79F214);
}

void sub_20C79F188()
{
  __cxa_end_catch();
  JUMPOUT(0x20C79F214);
}

void sub_20C79F19C()
{
  JUMPOUT(0x20C79F10CLL);
}

void sub_20C79F1B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (SLOBYTE(STACK[0x2C7]) < 0)
    operator delete((void *)STACK[0x2B0]);
  if (a24 < 0)
    operator delete(a19);
  JUMPOUT(0x20C79F114);
}

void sub_20C79F1EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, _QWORD *a20)
{
  uint64_t v20;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v20 - 176));
  sub_20BDE9D48((uint64_t)&a19, a20);
  JUMPOUT(0x20C79F21CLL);
}

void sub_20C79F208()
{
  JUMPOUT(0x20C79F224);
}

void sub_20C79F210(_Unwind_Exception *a1)
{
  void **v1;
  uint64_t v2;
  uint64_t v3;

  sub_20BE02EB0(v3 - 160);
  sub_20BE33518(v2);
  Alembic::Abc::v12::OObject::~OObject(v1);
  _Unwind_Resume(a1);
}

void sub_20C79F234(std::string *a1@<X8>)
{
  std::string *v2;
  __int128 v3;
  std::string *v4;
  std::string v5;
  std::string v6;

  sub_20BDDC0E4(&v5, ":");
  v2 = std::string::insert(&v5, 0, "AbcGeom_Camera_v1");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v6.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v6.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  v4 = std::string::append(&v6, ".geom");
  *a1 = *v4;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
}

void sub_20C79F2DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void sub_20C79F310(uint64_t a1)
{
  sub_20BE1AB0C((_QWORD *)(a1 + 56));
}

void sub_20C79F328()
{
  uint64_t v0;

  sub_20BDEBF08((_QWORD *)(v0 + 40));
  JUMPOUT(0x212B929D0);
}

void sub_20C79F348(uint64_t a1)
{
  void **v2;

  *(_QWORD *)a1 = &unk_24C54B0A0;
  *(_QWORD *)(a1 + 56) = &unk_24C5194C0;
  v2 = (void **)(a1 + 576);
  sub_20BE34B94(&v2);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(a1 + 304));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 208));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(a1 + 160));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 112));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((void **)(a1 + 64));
  Alembic::Abc::v12::OObject::~OObject((void **)a1);
}

void sub_20C79F3DC(uint64_t a1)
{
  void *v2;
  void **v3;

  *(_QWORD *)a1 = &unk_24C54B0A0;
  *(_QWORD *)(a1 + 56) = &unk_24C5194C0;
  v3 = (void **)(a1 + 576);
  sub_20BE34B94(&v3);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((void **)(a1 + 304));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 208));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((void **)(a1 + 160));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 112));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((void **)(a1 + 64));
  Alembic::Abc::v12::OObject::~OObject((void **)a1);
  operator delete(v2);
}

_QWORD *sub_20C79F474(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C54B0D8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20C79F4BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_20C79F4E0(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20C79F4F4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20C79F50C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C54B128))
    return a1 + 24;
  else
    return 0;
}

_QWORD *sub_20C79F54C(_QWORD *a1)
{
  *a1 = off_24C54A360;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 1));
  return a1;
}

void sub_20C79F57C(_QWORD *a1)
{
  *a1 = off_24C54A360;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 1));
  operator delete(a1);
}

void sub_20C79F5AC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _BYTE *v7;
  __int128 v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  *(_DWORD *)a2 = *(_DWORD *)(v4 + 64);
  v7 = (_BYTE *)(a2 + 8);
  if (*(char *)(v4 + 95) < 0)
  {
    sub_20BDDBFAC(v7, *(void **)(v4 + 72), *(_QWORD *)(v4 + 80));
  }
  else
  {
    v8 = *(_OWORD *)(v4 + 72);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(v4 + 88);
    *(_OWORD *)v7 = v8;
  }
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v4 + 96);
  v9 = *(_QWORD *)(v4 + 104);
  *(_QWORD *)(a2 + 40) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  if (v3)
  {
    v12 = (unint64_t *)&v3->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20C79F698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

void sub_20C79F6AC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  Alembic::AbcGeom::v12::OCameraSchema::getArbGeomParams((Alembic::AbcGeom::v12::OCameraSchema *)(v2 + 56), a2);
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20C79F734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

void sub_20C79F748(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  Alembic::AbcGeom::v12::OCameraSchema::getUserProperties((Alembic::AbcGeom::v12::OCameraSchema *)(v2 + 56), a2);
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20C79F7D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

void sub_20C79F7E8(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20C79F7FC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20C79F814(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C54B1F0))
    return a1 + 24;
  else
    return 0;
}

_QWORD *sub_20C79F854(uint64_t a1, _QWORD *a2, uint64_t (**a3)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v6;

  v6 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v6)
    v6 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return sub_20C79F8B0(a1, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v6 + 88), a3);
}

_QWORD *sub_20C79F8B0(uint64_t a1, _QWORD *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  _QWORD *result;

  result = sub_20BF2B2B4((_QWORD *)(a1 + 16), a2);
  if (result)
    return (_QWORD *)sub_20C34A248((pxrInternal__aapl__pxrReserved__::SdfLayer *)result[3], (const pxrInternal__aapl__pxrReserved__::SdfPath *)(result + 4), a3, a4);
  return result;
}

_QWORD *sub_20C79F8FC(uint64_t a1, _QWORD *a2, uint64_t (**a3)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v6;

  v6 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v6)
    v6 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return sub_20C79F958(a1, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v6 + 88), a3);
}

_QWORD *sub_20C79F958(uint64_t a1, _QWORD *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  _QWORD *result;

  result = sub_20BF2B2B4((_QWORD *)(a1 + 16), a2);
  if (result)
    return (_QWORD *)sub_20C34F884((pxrInternal__aapl__pxrReserved__::SdfLayer *)result[3], (const pxrInternal__aapl__pxrReserved__::SdfPath *)(result + 4), a3, a4);
  return result;
}

uint64_t *sub_20C79F9A4(uint64_t *a1, uint64_t a2, uint64_t *a3, _DWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v12;
  uint64_t **v13;
  uint64_t **v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  *a1 = a2;
  v7 = *a3;
  v6 = a3[1];
  a1[2] = v6;
  a1[1] = v7;
  if (v6)
  {
    v8 = (unint64_t *)(v6 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  sub_20BFD6E54((_DWORD *)a1 + 6, a4);
  sub_20BFD6EA4((_DWORD *)a1 + 7, a4 + 1);
  a1[4] = 0;
  a1[8] = 0;
  a1[7] = (uint64_t)(a1 + 8);
  a1[5] = 0;
  a1[6] = 0;
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = 0;
  a1[12] = 0;
  v16 = 0;
  v10 = *a1;
  if (*(_QWORD *)(*a1 + 104))
  {
    if (*(_BYTE *)(sub_20BEB47BC((uint64_t *)(*a1 + 104)) + 14))
      v11 = *(_QWORD *)(v10 + 96);
    else
      v11 = 0;
  }
  else
  {
    v11 = 0;
  }
  v12 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v12)
    v12 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t, uint64_t ***))(*(_QWORD *)v11 + 112))(v11, a1 + 3, (uint64_t)v12 + 40, &v15)&& sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v15))
  {
    if ((v16 & 4) != 0)
      v13 = (uint64_t **)(*(uint64_t (**)(uint64_t ***))((v16 & 0xFFFFFFFFFFFFFFF8) + 168))(&v15);
    else
      v13 = v15;
    if (a1 + 10 != (uint64_t *)v13)
      sub_20C106430(a1 + 10, *v13, v13[1], v13[1] - *v13);
  }
  sub_20BF4C2D8((uint64_t)&v15);
  return a1;
}

void sub_20C79FB4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::__shared_weak_count **v2;
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  void **v7;
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  sub_20BEEB2B8((void ***)va);
  sub_20BE6100C(v6, *(_QWORD **)(v3 + 64));
  if (*(char *)(v3 + 55) < 0)
    operator delete(*v7);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v5);
  sub_20C96C010(v4, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_20C79FBB8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void **v6;

  v6 = (void **)(a1 + 80);
  sub_20BEEB2B8(&v6);
  sub_20BE6100C(a1 + 56, *(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_20BFD265C((_DWORD *)(a1 + 24));
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

_QWORD *sub_20C79FC58(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C54B218;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20C79FCA0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_20C79FCC4(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20C79FCD8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20C79FCF0(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C54B268))
    return a1 + 24;
  else
    return 0;
}

uint64_t sub_20C79FD30(uint64_t a1)
{
  int64x2_t v3;
  int64x2_t v4;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v4 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(int64x2_t *)(a1 + 40) = v4;
  *(_OWORD *)(a1 + 56) = xmmword_20CA521E0;
  v3 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  *(int64x2_t *)(a1 + 72) = v3;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 127;
  sub_20BDDF7E4((char *)(a1 + 16), 0, 0, 0);
  *(int64x2_t *)(a1 + 40) = v4;
  *(_OWORD *)(a1 + 56) = xmmword_20CA521E0;
  *(int64x2_t *)(a1 + 72) = v3;
  return a1;
}

void sub_20C79FDCC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C79FDE8(uint64_t **a1, uint64_t *a2, _QWORD *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  pxrInternal__aapl__pxrReserved__::TfToken *v6;
  uint64_t *v7;
  std::string __str;
  void *__p[2];
  char v11;
  void **v12;
  _BYTE v13[16];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  sub_20C78BD0C(a2, (uint64_t)a3, a4);
  v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BF78EEC((pxrInternal__aapl__pxrReserved__::VtValue *)v13);
  if ((_DWORD)v6)
  {
    if ((*a3 & 0xFFFFFFFFFFFFFFF8) == 0)
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
    std::operator+<char>();
    sub_20BF834B0((uint64_t)v13);
    v12 = __p;
    v7 = sub_20BDDDFDC(a1, (const void **)__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v12);
    std::string::operator=((std::string *)(v7 + 7), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (v11 < 0)
      operator delete(__p[0]);
  }
  return sub_20BF4C2D8((uint64_t)v13);
}

void sub_20C79FEEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a21 < 0)
    operator delete(__p);
  sub_20BF4C2D8(v21 - 40);
  _Unwind_Resume(a1);
}

uint64_t sub_20C79FF3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4, uint64_t **a5, uint64_t **a6)
{
  *(_DWORD *)(a1 + 8) = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 16), "");
  *(_QWORD *)a1 = off_24C518EC0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  Alembic::Abc::v12::OObject::init(a1, a2, a4, a5, a6);
  return a1;
}

void sub_20C79FFD4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v3;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v3);
  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(a1);
}

void sub_20C79FFF8(void **a1)
{
  unint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  if (a1)
  {
    sub_20C79FFF8(*a1);
    sub_20C79FFF8(a1[1]);
    sub_20C78AF10(a1 + 5);
    v2 = (unint64_t)a1[4];
    if ((v2 & 7) != 0)
    {
      v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
      do
        v4 = __ldxr(v3);
      while (__stlxr(v4 - 2, v3));
    }
    operator delete(a1);
  }
}

void sub_20C7A0058(uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  if (a2)
  {
    sub_20C77B0F4(a2 + 112, *(_QWORD **)(a2 + 120));
    v3 = *(unsigned int **)(a2 + 104);
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
    Alembic::Abc::v12::OArchive::~OArchive((Alembic::Abc::v12::OArchive *)(a2 + 40));
    sub_20BF2B200(a2 + 16, *(_QWORD **)(a2 + 24));
    operator delete((void *)a2);
  }
}

void sub_20C7A00CC(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t **a4@<X3>, uint64_t **a5@<X4>, uint64_t a6@<X8>, double a7@<D0>)
{
  int v14;
  uint64_t *v15;
  size_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  std::string __str;
  void *p_p;
  uint64_t **v22;
  char v23;
  time_t v24;
  uint64_t *v25[3];
  void **p_p_p;
  void *__p;
  int v28;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  LODWORD(__p) = 0;
  v28 = 0;
  LODWORD(p_p) = 0;
  LODWORD(v22) = 0;
  sub_20C7A045C(a4, a5, (uint64_t **)&__p, (uint64_t **)&p_p, (uint64_t *)v25);
  LODWORD(__p) = 0;
  v28 = 0;
  LODWORD(p_p) = 0;
  LODWORD(v22) = 0;
  v14 = sub_20BE51F30(a4, a5, (uint64_t **)&__p, (uint64_t **)&p_p);
  if (*(char *)(a2 + 23) < 0)
  {
    if (!*(_QWORD *)(a2 + 8))
      goto LABEL_7;
  }
  else if (!*(_BYTE *)(a2 + 23))
  {
    goto LABEL_7;
  }
  sub_20BDDC0E4(&__p, "_ai_Application");
  p_p = &__p;
  v15 = sub_20BDDDFDC(v25, (const void **)&__p, (uint64_t)&unk_20CAC184C, (__int128 **)&p_p);
  std::string::operator=((std::string *)(v15 + 7), (const std::string *)a2);
  if (v29 < 0)
    operator delete(__p);
LABEL_7:
  v24 = 0;
  time(&v24);
  ctime_r(&v24, (char *)&__p);
  v16 = strlen((const char *)&__p);
  if (v16 && *((_BYTE *)&__p + v16 - 1) == 10)
    *((_BYTE *)&__p + v16 - 1) = 0;
  sub_20BDDC0E4(&p_p, "_ai_DateWritten");
  sub_20BDDC0E4(&__str, (char *)&__p);
  p_p_p = &p_p;
  v17 = sub_20BDDDFDC(v25, (const void **)&p_p, (uint64_t)&unk_20CAC184C, (__int128 **)&p_p_p);
  std::string::operator=((std::string *)(v17 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v23 < 0)
    operator delete(p_p);
  if (*(char *)(a3 + 23) < 0)
  {
    if (!*(_QWORD *)(a3 + 8))
      goto LABEL_20;
  }
  else if (!*(_BYTE *)(a3 + 23))
  {
    goto LABEL_20;
  }
  sub_20BDDC0E4(&p_p, "_ai_Description");
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&p_p;
  v18 = sub_20BDDDFDC(v25, (const void **)&p_p, (uint64_t)&unk_20CAC184C, (__int128 **)&__str);
  std::string::operator=((std::string *)(v18 + 7), (const std::string *)a3);
  if (v23 < 0)
    operator delete(p_p);
LABEL_20:
  if (a7 > 0.0)
  {
    sub_20BDDC0E4(&p_p, "_ai_DCC_FPS");
    std::to_string(&__str, a7);
    p_p_p = &p_p;
    v19 = sub_20BDDDFDC(v25, (const void **)&p_p, (uint64_t)&unk_20CAC184C, (__int128 **)&p_p_p);
    std::string::operator=((std::string *)(v19 + 7), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (v23 < 0)
      operator delete(p_p);
  }
  LODWORD(p_p) = 3;
  v22 = v25;
  LODWORD(__str.__r_.__value_.__l.__data_) = 1;
  LODWORD(__str.__r_.__value_.__r.__words[1]) = v14;
  sub_20C7A05A0(a6, a1, (uint64_t **)&p_p, (uint64_t **)&__str);
  sub_20BDE9D48((uint64_t)v25, v25[1]);
}

void sub_20C7A03D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,_QWORD *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a21 < 0)
    operator delete(__p);
  sub_20BDE9D48((uint64_t)&a23, a24);
  _Unwind_Resume(a1);
}

void sub_20C7A045C(uint64_t **a1@<X0>, uint64_t **a2@<X1>, uint64_t **a3@<X2>, uint64_t **a4@<X3>, uint64_t *a5@<X8>)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  const void **v13;
  _QWORD *v14[2];
  int v15;
  const void **v16[4];
  std::__shared_weak_count *v17;
  int v18;
  uint64_t v19;

  v14[0] = 0;
  v14[1] = 0;
  v13 = (const void **)v14;
  v15 = 2;
  sub_20BDEBF8C((uint64_t *)v16, &v13);
  v16[3] = 0;
  v17 = 0;
  v18 = 0;
  v19 = 1;
  sub_20BDE9D48((uint64_t)&v13, v14[0]);
  sub_20BE02E30(a1, (uint64_t)&v15);
  sub_20BE02E30(a2, (uint64_t)&v15);
  sub_20BE02E30(a3, (uint64_t)&v15);
  sub_20BE02E30(a4, (uint64_t)&v15);
  sub_20BDEBF8C(a5, v16);
  v10 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  sub_20BDE9D48((uint64_t)v16, v16[1]);
}

void sub_20C7A0570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, _QWORD *a13)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  sub_20BDE9D48((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

uint64_t sub_20C7A05A0(uint64_t a1, __int128 *a2, uint64_t **a3, uint64_t **a4)
{
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  const void **v18;
  _QWORD *v19[2];
  int v20;
  const void **v21[4];
  std::__shared_weak_count *v22;
  int v23;
  uint64_t v24;

  *(_DWORD *)a1 = 2;
  sub_20BDDC0E4((_QWORD *)(a1 + 8), "");
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v19[0] = 0;
  v19[1] = 0;
  v17 = 0;
  v18 = (const void **)v19;
  v16 = 0;
  v20 = 2;
  sub_20BDEBF8C((uint64_t *)v21, &v18);
  v21[3] = 0;
  v22 = 0;
  v23 = 0;
  v24 = 1;
  sub_20BDE9D48((uint64_t)&v18, v19[0]);
  sub_20BE02E30(a3, (uint64_t)&v20);
  sub_20BE02E30(a4, (uint64_t)&v20);
  *(_DWORD *)a1 = v20;
  v18 = (const void **)a1;
  v19[0] = "OArchive::OArchive( iFileName)";
  Alembic::AbcCoreOgawa::v12::WriteArchive::operator()(a2, v21, &v15);
  sub_20BDE82DC(a1 + 32, &v15);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  sub_20BDE9D48((uint64_t)v21, v21[1]);
  return a1;
}

void sub_20C7A0724(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  _QWORD *v7;
  void *v9;
  va_list va;

  va_start(va, a6);
  v9 = __cxa_begin_catch(a1);
  sub_20BDEBF08(v7);
  MEMORY[0x212B929D0](v6, "");
  if (a2 == 2)
    sub_20BE02570((uint64_t)va, (uint64_t)v9);
  else
    sub_20BE02504((uint64_t)va, 0);
  __cxa_end_catch();
  JUMPOUT(0x20C7A06C0);
}

void sub_20C7A0788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  void **v9;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v10;
  va_list va;

  va_start(va, a8);
  sub_20BE02EB0((uint64_t)va);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v10);
  if (*(char *)(v8 + 31) < 0)
    operator delete(*v9);
  _Unwind_Resume(a1);
}

void sub_20C7A07F4(std::__shared_weak_count *this)
{
  std::__shared_weak_count::__release_weak(this);
}

void pxrInternal__aapl__pxrReserved__::UsdXpcFileFormatTokens_StaticTokenType::~UsdXpcFileFormatTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::UsdXpcFileFormatTokens_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  void **v19;

  v19 = (void **)((char *)this + 48);
  sub_20BEEB2B8(&v19);
  v2 = *((_QWORD *)this + 5);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *((_QWORD *)this + 4);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v8 = *((_QWORD *)this + 3);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  v11 = *((_QWORD *)this + 2);
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  v14 = *((_QWORD *)this + 1);
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  if ((*(_QWORD *)this & 7) != 0)
  {
    v17 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v18 = __ldxr(v17);
    while (__stlxr(v18 - 2, v17));
  }
}

pxrInternal__aapl__pxrReserved__::UsdXpcFileFormatTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::UsdXpcFileFormatTokens_StaticTokenType::UsdXpcFileFormatTokens_StaticTokenType(unsigned int **this)
{
  unsigned int **v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int **v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int *v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v2 = (unsigned int **)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "xpc", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2, "1.0", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 2, "usd", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 3, "obj", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 4, "stl", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 5, "ply", 0);
  v3 = *this;
  v32 = v3;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      v32 = v4;
  }
  v6 = *v2;
  v33 = v6;
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    if ((v8 & 1) == 0)
      v33 = v7;
  }
  v9 = this[2];
  v34 = v9;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      v34 = v10;
  }
  v12 = this[3];
  v35 = v12;
  if ((v12 & 7) != 0)
  {
    v13 = (unsigned int *)((unint64_t)v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 2, v13));
    if ((v14 & 1) == 0)
      v35 = v13;
  }
  v15 = this[4];
  v36 = v15;
  if ((v15 & 7) != 0)
  {
    v16 = (unsigned int *)((unint64_t)v15 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 2, v16));
    if ((v17 & 1) == 0)
      v36 = v16;
  }
  v18 = this[5];
  v37 = v18;
  if ((v18 & 7) != 0)
  {
    v19 = (unsigned int *)((unint64_t)v18 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 2, v19));
    if ((v20 & 1) == 0)
      v37 = v19;
  }
  this[6] = 0;
  this[7] = 0;
  this[8] = 0;
  v21 = (unsigned int *)operator new(0x30uLL);
  v22 = 0;
  this[6] = v21;
  this[7] = v21;
  this[8] = v21 + 12;
  do
  {
    v23 = (&v32)[v22];
    *(_QWORD *)v21 = v23;
    if ((v23 & 7) != 0)
    {
      v24 = (unsigned int *)((unint64_t)v23 & 0xFFFFFFFFFFFFFFF8);
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 2, v24));
      if ((v25 & 1) == 0)
        *(_QWORD *)v21 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v22;
    v21 += 2;
  }
  while (v22 != 6);
  v26 = (unsigned int **)&v38;
  this[7] = v21;
  do
  {
    v28 = (uint64_t)*--v26;
    v27 = v28;
    if ((v28 & 7) != 0)
    {
      v29 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
      do
        v30 = __ldxr(v29);
      while (__stlxr(v30 - 2, v29));
    }
  }
  while (v26 != &v32);
  return (pxrInternal__aapl__pxrReserved__::UsdXpcFileFormatTokens_StaticTokenType *)this;
}

void sub_20C7A0B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;

  sub_20BEEB2B8(&a10);
  v25 = &a18;
  while (1)
  {
    v27 = *--v25;
    v26 = v27;
    if ((v27 & 7) != 0)
    {
      v28 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
      do
        v29 = __ldxr(v28);
      while (__stlxr(v29 - 2, v28));
    }
    if (v25 == (uint64_t *)&a12)
    {
      if ((*v23 & 7) != 0)
      {
        v30 = (unsigned int *)(*v23 & 0xFFFFFFFFFFFFFFF8);
        do
          v31 = __ldxr(v30);
        while (__stlxr(v31 - 2, v30));
      }
      if ((*v22 & 7) != 0)
      {
        v32 = (unsigned int *)(*v22 & 0xFFFFFFFFFFFFFFF8);
        do
          v33 = __ldxr(v32);
        while (__stlxr(v33 - 2, v32));
      }
      if ((*v21 & 7) != 0)
      {
        v34 = (unsigned int *)(*v21 & 0xFFFFFFFFFFFFFFF8);
        do
          v35 = __ldxr(v34);
        while (__stlxr(v35 - 2, v34));
      }
      if ((*v20 & 7) != 0)
      {
        v36 = (unsigned int *)(*v20 & 0xFFFFFFFFFFFFFFF8);
        do
          v37 = __ldxr(v36);
        while (__stlxr(v37 - 2, v36));
      }
      if ((*v19 & 7) != 0)
      {
        v38 = (unsigned int *)(*v19 & 0xFFFFFFFFFFFFFFF8);
        do
          v39 = __ldxr(v38);
        while (__stlxr(v39 - 2, v38));
      }
      if ((*v18 & 7) != 0)
      {
        v40 = (unsigned int *)(*v18 & 0xFFFFFFFFFFFFFFF8);
        do
          v41 = __ldxr(v40);
        while (__stlxr(v41 - 2, v40));
      }
      _Unwind_Resume(a1);
    }
  }
}

uint64_t sub_20C7A0CCC()
{
  uint64_t *v0;

  v0 = sub_20C7A1734();
  return sub_20C7A1854(v0);
}

pxrInternal__aapl__pxrReserved__::UsdXpcFileFormat *pxrInternal__aapl__pxrReserved__::UsdXpcFileFormat::UsdXpcFileFormat(pxrInternal__aapl__pxrReserved__::UsdXpcFileFormat *this)
{
  uint64_t *v2;
  unsigned int **v3;
  unsigned int **v4;
  unsigned int **v5;
  uint64_t *EmptyString;
  __int128 v7;
  unsigned int **v8;
  uint64_t *v9;
  __int128 v10;
  unsigned int **v11;
  uint64_t *v12;
  __int128 v13;
  uint64_t i;
  char *v16;
  char *v17;
  char *v18;
  char **v19;
  char v20;
  __int128 __dst;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;

  *(_QWORD *)&v27 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdXpcFileFormatTokens);
  if (!v2)
    v2 = (uint64_t *)sub_20C7A197C(&pxrInternal__aapl__pxrReserved__::UsdXpcFileFormatTokens);
  v3 = (unsigned int **)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdXpcFileFormatTokens);
  if (!v3)
    v3 = sub_20C7A197C(&pxrInternal__aapl__pxrReserved__::UsdXpcFileFormatTokens);
  v4 = (unsigned int **)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdXpcFileFormatTokens);
  if (!v4)
    v4 = sub_20C7A197C(&pxrInternal__aapl__pxrReserved__::UsdXpcFileFormatTokens);
  v5 = (unsigned int **)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdXpcFileFormatTokens);
  if (!v5)
    v5 = sub_20C7A197C(&pxrInternal__aapl__pxrReserved__::UsdXpcFileFormatTokens);
  if (((unint64_t)v5[3] & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)(((unint64_t)v5[3] & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v5);
  if (*((char *)EmptyString + 23) < 0)
  {
    sub_20BDDBFAC(&__dst, (void *)*EmptyString, EmptyString[1]);
  }
  else
  {
    v7 = *(_OWORD *)EmptyString;
    v22 = EmptyString[2];
    __dst = v7;
  }
  v8 = (unsigned int **)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdXpcFileFormatTokens);
  if (!v8)
    v8 = sub_20C7A197C(&pxrInternal__aapl__pxrReserved__::UsdXpcFileFormatTokens);
  if (((unint64_t)v8[4] & 0xFFFFFFFFFFFFFFF8) != 0)
    v9 = (uint64_t *)(((unint64_t)v8[4] & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v9 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v8);
  if (*((char *)v9 + 23) < 0)
  {
    sub_20BDDBFAC(&v23, (void *)*v9, v9[1]);
  }
  else
  {
    v10 = *(_OWORD *)v9;
    v24 = v9[2];
    v23 = v10;
  }
  v11 = (unsigned int **)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdXpcFileFormatTokens);
  if (!v11)
    v11 = sub_20C7A197C(&pxrInternal__aapl__pxrReserved__::UsdXpcFileFormatTokens);
  if (((unint64_t)v11[5] & 0xFFFFFFFFFFFFFFF8) != 0)
    v12 = (uint64_t *)(((unint64_t)v11[5] & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v12 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v11);
  if (*((char *)v12 + 23) < 0)
  {
    sub_20BDDBFAC(&v25, (void *)*v12, v12[1]);
  }
  else
  {
    v13 = *(_OWORD *)v12;
    v26 = v12[2];
    v25 = v13;
  }
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = &v16;
  v20 = 0;
  v16 = (char *)operator new(0x48uLL);
  v17 = v16;
  v18 = v16 + 72;
  v17 = sub_20BFB76A8((uint64_t)&v18, &__dst, &v27, v16);
  pxrInternal__aapl__pxrReserved__::SdfFileFormat::SdfFileFormat((uint64_t)this, v2, (uint64_t *)v3 + 1, (uint64_t *)v4 + 2, (__int128 **)&v16);
  v19 = &v16;
  sub_20BDE5038((void ***)&v19);
  for (i = 0; i != -72; i -= 24)
  {
    if (*((char *)&v26 + i + 7) < 0)
      operator delete(*(void **)((char *)&v25 + i));
  }
  *(_QWORD *)this = off_24C54B300;
  return this;
}

void sub_20C7A0F58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdXpcFileFormat::~UsdXpcFileFormat(pxrInternal__aapl__pxrReserved__::UsdXpcFileFormat *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::SdfFileFormat::~SdfFileFormat(this);
  operator delete(v1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdXpcFileFormat::CanRead()
{
  return 1;
}

void pxrInternal__aapl__pxrReserved__::UsdXpcFileFormat::CallbackFromXPC(int a1, xpc_object_t xdict)
{
  char *string;
  char *v4;
  _xpc_connection_s *remote_connection;
  xpc_object_t reply;
  void *v7;
  void *__p;
  char v9;

  string = (char *)xpc_dictionary_get_string(xdict, "consume");
  if (string)
  {
    sub_20BDDC0E4(&__p, string);
    v4 = (char *)sandbox_extension_issue_file();
    remote_connection = xpc_dictionary_get_remote_connection(xdict);
    reply = xpc_dictionary_create_reply(xdict);
    v7 = reply;
    if (v4)
    {
      xpc_dictionary_set_string(reply, "consumeToken", v4);
      free(v4);
    }
    xpc_connection_send_message(remote_connection, v7);
    if (v9 < 0)
      operator delete(__p);
  }
}

void sub_20C7A10D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdXpcFileFormat::Read(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfLayer *a2, uint64_t a3)
{
  _xpc_connection_s *v6;
  xpc_object_t v7;
  void *v8;
  const char *v9;
  char *v10;
  xpc_object_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  const char *string;
  xpc_object_t value;
  xpc_object_t v19;
  xpc_object_t *v20;
  char *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v28;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v29[4];
  _QWORD handler[5];

  v6 = xpc_connection_create("com.apple.USDLib.FormatLoader", 0);
  handler[0] = MEMORY[0x24BDAC760];
  handler[1] = 3221225472;
  handler[2] = sub_20C7A13A0;
  handler[3] = &unk_24C54B390;
  handler[4] = a1;
  xpc_connection_set_event_handler(v6, handler);
  xpc_connection_resume(v6);
  v7 = xpc_dictionary_create(0, 0, 0);
  v8 = v7;
  if (*(char *)(a3 + 23) >= 0)
    v9 = (const char *)a3;
  else
    v9 = *(const char **)a3;
  xpc_dictionary_set_string(v7, "filename", v9);
  v10 = (char *)sandbox_extension_issue_file();
  if (v10)
    xpc_dictionary_set_string(v8, "extensionToken", v10);
  free(v10);
  v11 = xpc_connection_send_message_with_reply_sync(v6, v8);
  if (!v11
    || (v12 = v11, v13 = MEMORY[0x212B93B34](), v14 = MEMORY[0x24BDACFA0], v13 != MEMORY[0x24BDACFA0])
    || (string = xpc_dictionary_get_string(v12, "error")) != 0 && *string
    || (value = xpc_dictionary_get_value(v12, "object")) == 0
    || (v19 = value, MEMORY[0x212B93B34]() != v14))
  {
    xpc_release(v8);
    return 0;
  }
  v20 = (xpc_object_t *)operator new(0x10uLL);
  serialize::Serializer::Serializer(v20);
  v20[1] = v19;
  v21 = serialize::Serializer::load(v20);
  operator delete(v20);
  xpc_release(v8);
  if (!v21)
    return 0;
  pxrInternal__aapl__pxrReserved__::XpcConverter::XpcConverter(v29);
  pxrInternal__aapl__pxrReserved__::XpcConverter::makeUsdStage(v29, (serialize::Prim *)v21, (uint64_t *)&v28);
  (*(void (**)(char *))(*(_QWORD *)v21 + 16))(v21);
  v15 = v28 != 0;
  if (v28)
  {
    sub_20C1034E8(&v26, (uint64_t *)&v28);
    pxrInternal__aapl__pxrReserved__::SdfLayer::TransferContent(a2, &v26);
    v22 = v27;
    if (v27)
    {
      v23 = (unsigned int *)(v27 + 8);
      do
      {
        v24 = __ldxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (!v25)
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    }
  }
  sub_20C103234(&v28);
  pxrInternal__aapl__pxrReserved__::XpcConverter::~XpcConverter((pxrInternal__aapl__pxrReserved__::XpcConverter *)v29);
  return v15;
}

void sub_20C7A1334(_Unwind_Exception *a1, uint64_t a2, unsigned int *a3, ...)
{
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v7;
  va_list va;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v7 = va_arg(va1, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *);
  if (a3)
  {
    v4 = a3 + 2;
    do
    {
      v5 = __ldxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)a3 + 8))(a3);
  }
  sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  pxrInternal__aapl__pxrReserved__::XpcConverter::~XpcConverter((pxrInternal__aapl__pxrReserved__::XpcConverter *)va1);
  _Unwind_Resume(a1);
}

void sub_20C7A13A0(uint64_t a1, void *a2)
{
  uint64_t v3;

  if (a2)
  {
    v3 = MEMORY[0x212B93B34](a2);
    if (v3 == MEMORY[0x24BDACFA0])
      pxrInternal__aapl__pxrReserved__::UsdXpcFileFormat::CallbackFromXPC(v3, a2);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdXpcFileFormat::ReadFromString(uint64_t a1, uint64_t a2, const std::string *a3)
{
  uint64_t v3;
  _QWORD v5[13];
  char v6;
  uint64_t v7;

  sub_20C7A1484(v5, a3, 24);
  v5[0] = *MEMORY[0x24BEDB7F0];
  v3 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v5[2] = v3;
  v5[3] = MEMORY[0x24BEDB848] + 16;
  if (v6 < 0)
    operator delete((void *)v5[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212B92EB0](&v7);
  return 1;
}

_QWORD *sub_20C7A1484(_QWORD *a1, const std::string *a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  std::ios_base *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = MEMORY[0x24BEDB858];
  v6 = MEMORY[0x24BEDB858] + 104;
  a1[16] = MEMORY[0x24BEDB858] + 104;
  a1[2] = v5 + 64;
  v7 = a1 + 2;
  v8 = (uint64_t)(a1 + 3);
  v9 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v10 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 16);
  v11 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 24);
  *a1 = v10;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v10 - 24)) = v11;
  a1[1] = 0;
  v12 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v12, a1 + 3);
  v12[1].__vftable = 0;
  v12[1].__fmtflags_ = -1;
  v13 = v9[4];
  v14 = v9[5];
  a1[2] = v13;
  *(_QWORD *)((char *)v7 + *(_QWORD *)(v13 - 24)) = v14;
  v15 = v9[1];
  *a1 = v15;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v15 - 24)) = v9[6];
  *a1 = v5 + 24;
  a1[16] = v6;
  a1[2] = v5 + 64;
  sub_20C3CF0D4(v8, a2, a3);
  return a1;
}

void sub_20C7A157C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x212B92EB0](v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdXpcFileFormat::WriteToString(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  pxrInternal__aapl__pxrReserved__::SdfFileFormat *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v15;
  uint64_t v16;

  v7 = (pxrInternal__aapl__pxrReserved__::SdfFileFormat *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdUsdaFileFormatTokens);
  if (!v7)
    v7 = sub_20C27EB9C(&pxrInternal__aapl__pxrReserved__::UsdUsdaFileFormatTokens);
  pxrInternal__aapl__pxrReserved__::SdfFileFormat::FindById(v7, &v15);
  v8 = sub_20BFCF6F4(&v15);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 88))(v8, a2, a3, a4);
  v10 = v16;
  if (v16)
  {
    v11 = (unsigned int *)(v16 + 8);
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  return v9;
}

void sub_20C7A1654(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    sub_20C96B340(a10);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdXpcFileFormat::WriteToStream(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  pxrInternal__aapl__pxrReserved__::SdfFileFormat *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v15;
  uint64_t v16;

  v7 = (pxrInternal__aapl__pxrReserved__::SdfFileFormat *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdUsdaFileFormatTokens);
  if (!v7)
    v7 = sub_20C27EB9C(&pxrInternal__aapl__pxrReserved__::UsdUsdaFileFormatTokens);
  pxrInternal__aapl__pxrReserved__::SdfFileFormat::FindById(v7, &v15);
  v8 = sub_20BFCF6F4(&v15);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 80))(v8, a2, a3, a4);
  v10 = v16;
  if (v16)
  {
    v11 = (unsigned int *)(v16 + 8);
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  return v9;
}

void sub_20C7A171C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    sub_20C96B340(a10);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20C7A1734()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C1BA13C((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C7A1808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_20C7A1854(uint64_t *a1)
{
  _QWORD *v2;
  char *v3;
  uint64_t result;
  _QWORD *v5;

  v2 = operator new(8uLL);
  *v2 = &unk_24C54B3D8;
  v5 = v2;
  pxrInternal__aapl__pxrReserved__::TfType::SetFactory(a1, (uint64_t *)&v5, v3);
  result = (uint64_t)v5;
  v5 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_20C7A18B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_20C7A18E4(pxrInternal__aapl__pxrReserved__::Sdf_FileFormatFactoryBase *a1)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::Sdf_FileFormatFactoryBase::~Sdf_FileFormatFactoryBase(a1);
  operator delete(v1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20C7A18F8@<X0>(pxrInternal__aapl__pxrReserved__::UsdXpcFileFormat **a1@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdXpcFileFormat *v2;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v4;

  v2 = (pxrInternal__aapl__pxrReserved__::UsdXpcFileFormat *)operator new(0x70uLL);
  pxrInternal__aapl__pxrReserved__::UsdXpcFileFormat::UsdXpcFileFormat(v2);
  *a1 = v2;
  v4 = 0;
  return sub_20C7A1950(&v4);
}

void sub_20C7A193C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20C7A1950(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  sub_20BF1D8F4((int)a1, *a1);
  return a1;
}

unsigned int **sub_20C7A197C(unint64_t *a1)
{
  unsigned int **result;
  void *v4;

  result = sub_20C7A19C4();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::UsdXpcFileFormatTokens_StaticTokenType::~UsdXpcFileFormatTokens_StaticTokenType((pxrInternal__aapl__pxrReserved__::UsdXpcFileFormatTokens_StaticTokenType *)result);
    operator delete(v4);
  }
  return (unsigned int **)atomic_load(a1);
}

unsigned int **sub_20C7A19C4()
{
  unsigned int **v0;

  v0 = (unsigned int **)operator new(0x48uLL);
  pxrInternal__aapl__pxrReserved__::UsdXpcFileFormatTokens_StaticTokenType::UsdXpcFileFormatTokens_StaticTokenType(v0);
  return v0;
}

void sub_20C7A19F0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::converterUtils::makeValidIdentifier@<D0>(uint64_t *a1@<X0>, std::string *a2@<X8>)
{
  BOOL v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unsigned int v9;
  int v10;
  uint64_t *v11;
  unint64_t v12;
  std::string *v13;
  std::string *v14;
  int v15;
  int v16;
  char v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  double result;
  std::string v24;
  std::string v25;

  memset(&v25, 0, sizeof(v25));
  v3 = *((char *)a1 + 23) < 0;
  v4 = *((unsigned __int8 *)a1 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = a1[1];
  if (!v4)
    goto LABEL_43;
  v6 = 0;
  v7 = MEMORY[0x24BDAC740];
  do
  {
    if (v3)
      v8 = (uint64_t *)*a1;
    else
      v8 = a1;
    v9 = *((char *)v8 + v6);
    if ((v9 & 0x80000000) != 0)
      v10 = __maskrune(v9, 0x500uLL);
    else
      v10 = *(_DWORD *)(v7 + 4 * v9 + 60) & 0x500;
    if (v10)
    {
      if (*((char *)a1 + 23) >= 0)
        v11 = a1;
      else
        v11 = (uint64_t *)*a1;
      std::string::push_back(&v25, *((_BYTE *)v11 + v6));
    }
    else
    {
      std::string::append(&v25, "_");
    }
    ++v6;
    v3 = *((char *)a1 + 23) < 0;
    v12 = *((unsigned __int8 *)a1 + 23);
    if ((v12 & 0x80u) != 0)
      v12 = a1[1];
  }
  while (v6 < v12);
  v13 = (std::string *)v25.__r_.__value_.__r.__words[0];
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = &v25;
  else
    v14 = (std::string *)v25.__r_.__value_.__r.__words[0];
  v15 = v14->__r_.__value_.__s.__data_[0];
  if ((v15 & 0x80000000) == 0 && (*(_DWORD *)(v7 + 4 * v15 + 60) & 0x400) != 0)
  {
    std::operator+<char>();
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
    v25 = v24;
    v13 = (std::string *)v24.__r_.__value_.__r.__words[0];
  }
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = &v25;
  v16 = v13->__r_.__value_.__s.__data_[0];
  if (!v13->__r_.__value_.__s.__data_[0]
    || (v16 - 48) < 0xA
    || v16 != 95 && (v16 & 0xFFFFFFDF) - 65 > 0x19)
  {
    goto LABEL_43;
  }
  do
  {
    v18 = v13->__r_.__value_.__s.__data_[0];
    v13 = (std::string *)((char *)v13 + 1);
    v17 = v18;
    v19 = (v18 & 0xFFFFFFDF) - 65;
    v20 = v18 - 48;
  }
  while (v18 == 95 || v19 < 0x1A || v20 < 0xA);
  if (!v17)
  {
    result = *(double *)&v25.__r_.__value_.__l.__data_;
    *a2 = v25;
  }
  else
  {
LABEL_43:
    sub_20BDDC0E4(a2, "defaultIdentifier");
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
  }
  return result;
}

void sub_20C7A1BF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::converterUtils::Asset::getPath(pxrInternal__aapl__pxrReserved__::converterUtils::Asset *this@<X0>, std::string *a2@<X8>)
{
  const std::string::value_type *v4;
  char *v5;
  const std::string::value_type *v6;
  int v7;
  const std::string::value_type *v8;
  std::string::size_type v9;
  std::string *v10;
  std::string v11;

  sub_20BDDC0E4(&v11, "/");
  v6 = (const std::string::value_type *)*((_QWORD *)this + 1);
  v5 = (char *)this + 8;
  v4 = v6;
  v7 = v5[23];
  if (v7 >= 0)
    v8 = v5;
  else
    v8 = v4;
  if (v7 >= 0)
    v9 = v5[23];
  else
    v9 = *((_QWORD *)v5 + 1);
  v10 = std::string::append(&v11, v8, v9);
  *a2 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

void sub_20C7A1C98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_DWORD *pxrInternal__aapl__pxrReserved__::converterUtils::Asset::getMaterialsPath@<X0>(_DWORD *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _DWORD *v4;
  std::string *v5;
  std::string::size_type v6;
  char v7;
  uint64_t v8;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  int v16;
  int v17;
  uint64_t v18;
  std::string v19;
  _BYTE v20[15];
  uint64_t v21;

  v2 = (uint64_t)this;
  v21 = *MEMORY[0x24BDAC8D0];
  v4 = this + 8;
  if (*((char *)this + 55) < 0)
  {
    if (*((_QWORD *)this + 5))
      return sub_20BDDBFAC((_BYTE *)a2, *(void **)(v2 + 32), *(_QWORD *)(v2 + 40));
  }
  else if (*((_BYTE *)this + 55))
  {
LABEL_18:
    *(_OWORD *)a2 = *(_OWORD *)v4;
    *(_QWORD *)(a2 + 16) = *((_QWORD *)v4 + 2);
    return this;
  }
  pxrInternal__aapl__pxrReserved__::converterUtils::Asset::getPath((pxrInternal__aapl__pxrReserved__::converterUtils::Asset *)this, &v19);
  v5 = std::string::append(&v19, "/Materials");
  v6 = v5->__r_.__value_.__r.__words[0];
  *(_QWORD *)v20 = v5->__r_.__value_.__l.__size_;
  *(_QWORD *)&v20[7] = *(std::string::size_type *)((char *)&v5->__r_.__value_.__r.__words[1] + 7);
  v7 = HIBYTE(v5->__r_.__value_.__r.__words[2]);
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(v2 + 55) < 0)
    operator delete(*(void **)v4);
  v8 = *(_QWORD *)v20;
  *(_QWORD *)(v2 + 32) = v6;
  *(_QWORD *)(v2 + 40) = v8;
  *(_QWORD *)(v2 + 47) = *(_QWORD *)&v20[7];
  *(_BYTE *)(v2 + 55) = v7;
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  v9 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C39A7A8((uint64_t *)v2);
  pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(&v19, v4);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)v20, "Scope");
  pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v9, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v19, (void **)v20, (uint64_t)&v14);
  if ((v18 & 7) != 0)
  {
    v10 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
  sub_20BFD265C(&v16);
  if (v15)
    sub_20C35C614(v15);
  if ((v20[0] & 7) != 0)
  {
    v12 = (unsigned int *)(*(_QWORD *)v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v19.__r_.__value_.__r.__words + 1);
  this = sub_20BFD265C(&v19);
  if ((*(char *)(v2 + 55) & 0x80000000) == 0)
    goto LABEL_18;
  return sub_20BDDBFAC((_BYTE *)a2, *(void **)(v2 + 32), *(_QWORD *)(v2 + 40));
}

void sub_20C7A1E78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

_DWORD *pxrInternal__aapl__pxrReserved__::converterUtils::Asset::getGeomPath@<X0>(_DWORD *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _DWORD *v4;
  std::string *v5;
  std::string::size_type v6;
  char v7;
  uint64_t v8;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  int v16;
  int v17;
  uint64_t v18;
  std::string v19;
  _BYTE v20[15];
  uint64_t v21;

  v2 = (uint64_t)this;
  v21 = *MEMORY[0x24BDAC8D0];
  v4 = this + 14;
  if (*((char *)this + 79) < 0)
  {
    if (*((_QWORD *)this + 8))
      return sub_20BDDBFAC((_BYTE *)a2, *(void **)(v2 + 56), *(_QWORD *)(v2 + 64));
  }
  else if (*((_BYTE *)this + 79))
  {
LABEL_18:
    *(_OWORD *)a2 = *(_OWORD *)v4;
    *(_QWORD *)(a2 + 16) = *((_QWORD *)v4 + 2);
    return this;
  }
  pxrInternal__aapl__pxrReserved__::converterUtils::Asset::getPath((pxrInternal__aapl__pxrReserved__::converterUtils::Asset *)this, &v19);
  v5 = std::string::append(&v19, "/Geom");
  v6 = v5->__r_.__value_.__r.__words[0];
  *(_QWORD *)v20 = v5->__r_.__value_.__l.__size_;
  *(_QWORD *)&v20[7] = *(std::string::size_type *)((char *)&v5->__r_.__value_.__r.__words[1] + 7);
  v7 = HIBYTE(v5->__r_.__value_.__r.__words[2]);
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(v2 + 79) < 0)
    operator delete(*(void **)v4);
  v8 = *(_QWORD *)v20;
  *(_QWORD *)(v2 + 56) = v6;
  *(_QWORD *)(v2 + 64) = v8;
  *(_QWORD *)(v2 + 71) = *(_QWORD *)&v20[7];
  *(_BYTE *)(v2 + 79) = v7;
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  v9 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C39A7A8((uint64_t *)v2);
  pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(&v19, v4);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)v20, "Scope");
  pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v9, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v19, (void **)v20, (uint64_t)&v14);
  if ((v18 & 7) != 0)
  {
    v10 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
  sub_20BFD265C(&v16);
  if (v15)
    sub_20C35C614(v15);
  if ((v20[0] & 7) != 0)
  {
    v12 = (unsigned int *)(*(_QWORD *)v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v19.__r_.__value_.__r.__words + 1);
  this = sub_20BFD265C(&v19);
  if ((*(char *)(v2 + 79) & 0x80000000) == 0)
    goto LABEL_18;
  return sub_20BDDBFAC((_BYTE *)a2, *(void **)(v2 + 56), *(_QWORD *)(v2 + 64));
}

void sub_20C7A20AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **pxrInternal__aapl__pxrReserved__::converterUtils::Asset::makeUsdStage@<X0>(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **this@<X0>, uint64_t *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v4;
  std::string::size_type size;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  std::string::size_type v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  pxrInternal__aapl__pxrReserved__::UsdStage *v22;
  pxrInternal__aapl__pxrReserved__::UsdStage *v23;
  std::string *v24;
  __int128 v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  std::string v33;
  void *v34[2];
  std::string::size_type v35;
  uint64_t v36;
  uint64_t v37;
  std::string __p;
  uint64_t v39;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v40;
  std::string v41;
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  sub_20BDDC0E4(&__p, ".usda");
  *(_OWORD *)&v41.__r_.__value_.__r.__words[1] = 0uLL;
  v41.__r_.__value_.__r.__words[0] = (std::string::size_type)&v41.__r_.__value_.__l.__size_;
  pxrInternal__aapl__pxrReserved__::SdfLayer::CreateAnonymous(&__p, (pxrInternal__aapl__pxrReserved__::TfToken *)&v41, (uint64_t *)&v40);
  sub_20BDE9D48((uint64_t)&v41, (_QWORD *)v41.__r_.__value_.__l.__size_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  sub_20C1034E8((uint64_t *)&__p, (uint64_t *)&v40);
  pxrInternal__aapl__pxrReserved__::UsdStage::Open((uint64_t *)&__p, 0, (pxrInternal__aapl__pxrReserved__ **)&v41);
  v4 = *this;
  *this = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)v41.__r_.__value_.__r.__words[0];
  v41.__r_.__value_.__r.__words[0] = 0;
  sub_20BF1D8F4((int)this, v4);
  sub_20C455C74((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v41);
  size = __p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v6 = (unsigned int *)(__p.__r_.__value_.__l.__size_ + 8);
    do
    {
      v7 = __ldxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
      (*(void (**)(std::string::size_type))(*(_QWORD *)size + 8))(size);
  }
  sub_20C696CA8((uint64_t *)&__p, (uint64_t *)this);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&v41, "Y");
  pxrInternal__aapl__pxrReserved__::UsdGeomSetStageUpAxis((uint64_t *)&__p, &v41);
  if ((v41.__r_.__value_.__s.__data_[0] & 7) != 0)
  {
    v9 = (unsigned int *)(v41.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  v11 = __p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v12 = (unsigned int *)(__p.__r_.__value_.__l.__size_ + 8);
    do
    {
      v13 = __ldxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v11 + 8))(v11);
  }
  v15 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C39A7A8((uint64_t *)this);
  pxrInternal__aapl__pxrReserved__::converterUtils::Asset::getPath((pxrInternal__aapl__pxrReserved__::converterUtils::Asset *)this, &v41);
  pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(v34, &v41);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&v33, "Xform");
  pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v15, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v34, (void **)&v33.__r_.__value_.__l.__data_, (uint64_t)&__p);
  if ((v33.__r_.__value_.__s.__data_[0] & 7) != 0)
  {
    v16 = (unsigned int *)(v33.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stlxr(v17 - 2, v16));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v34 + 1);
  sub_20BFD265C(v34);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)v34, "name");
  v41.__r_.__value_.__l.__size_ = (std::string::size_type)&off_24C520700;
  sub_20BF77444((unsigned int **)&v41, (uint64_t)(this + 1));
  pxrInternal__aapl__pxrReserved__::UsdObject::SetAssetInfoByKey((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p, (const pxrInternal__aapl__pxrReserved__::TfToken *)v34, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v41);
  sub_20BF4C2D8((uint64_t)&v41);
  if (((uint64_t)v34[0] & 7) != 0)
  {
    v18 = (unsigned int *)((unint64_t)v34[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v41, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&__p);
  v42 = 0;
  v41.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C538548;
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)v34, "component");
  pxrInternal__aapl__pxrReserved__::UsdModelAPI::SetKind((pxrInternal__aapl__pxrReserved__::UsdModelAPI *)&v41, (const pxrInternal__aapl__pxrReserved__::TfToken *)v34);
  if (((uint64_t)v34[0] & 7) != 0)
  {
    v20 = (unsigned int *)((unint64_t)v34[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v21 = __ldxr(v20);
    while (__stlxr(v21 - 2, v20));
  }
  v22 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20C39A7A8((uint64_t *)this);
  pxrInternal__aapl__pxrReserved__::UsdStage::SetDefaultPrim(v22, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&__p);
  v23 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20C39A7A8((uint64_t *)this);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&v37, "customLayerData");
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&v36, "creator");
  sub_20BDDC0E4(&v33, "Apple USD plugin ");
  v24 = std::string::append(&v33, "0.03");
  v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v35 = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)v34 = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  sub_20C7A2784(v23, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v37, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v36, (uint64_t)v34);
  if (SHIBYTE(v35) < 0)
    operator delete(v34[0]);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if ((v36 & 7) != 0)
  {
    v26 = (unsigned int *)(v36 & 0xFFFFFFFFFFFFFFF8);
    do
      v27 = __ldxr(v26);
    while (__stlxr(v27 - 2, v26));
  }
  if ((v37 & 7) != 0)
  {
    v28 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFFFF8);
    do
      v29 = __ldxr(v28);
    while (__stlxr(v29 - 2, v28));
  }
  *a2 = (uint64_t)*this;
  sub_20BF1DD04(a2);
  pxrInternal__aapl__pxrReserved__::UsdModelAPI::~UsdModelAPI((pxrInternal__aapl__pxrReserved__::UsdModelAPI *)&v41);
  if ((v39 & 7) != 0)
  {
    v30 = (unsigned int *)(v39 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p.__r_.__value_.__r.__words[2] + 1);
  sub_20BFD265C(&__p.__r_.__value_.__r.__words[2]);
  if (__p.__r_.__value_.__l.__size_)
    sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)__p.__r_.__value_.__l.__size_);
  return sub_20C103234(&v40);
}

void sub_20C7A2538(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C7A2784(pxrInternal__aapl__pxrReserved__::UsdStage *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int *v9[3];

  v9[2] = *(unsigned int **)MEMORY[0x24BDAC8D0];
  v9[1] = (unsigned int *)&off_24C520700;
  sub_20BF77444(v9, a4);
  v7 = pxrInternal__aapl__pxrReserved__::UsdStage::SetMetadataByDictKey(a1, a2, a3, (const pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  sub_20BF4C2D8((uint64_t)v9);
  return v7;
}

void sub_20C7A2820(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::converterUtils::Material::makeUsdMaterial(uint64_t a1@<X0>, uint64_t *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;

  sub_20C696CA8(&v11, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(&v13, a1);
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::Define(&v11, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v13, a3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
  sub_20BFD265C(&v13);
  v6 = v12;
  if (v12)
  {
    v7 = (unsigned int *)(v12 + 8);
    do
    {
      v8 = __ldxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  v10 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*a2;
  sub_20BF1DD04((uint64_t *)&v10);
  pxrInternal__aapl__pxrReserved__::converterUtils::Material::_createSurfaceShader(a1, a3, (uint64_t *)&v10, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v11);
  sub_20C455C74(&v10);
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::~UsdShadeShader((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v11);
}

void sub_20C7A290C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *v2;
  va_list va;

  va_start(va, a2);
  sub_20C455C74((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::~UsdShadeMaterial(v2);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::converterUtils::Material::_createSurfaceShader(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *a2@<X1>, uint64_t *a3@<X2>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a4@<X8>)
{
  uint64_t *String;
  __int128 v9;
  size_t v10;
  void **v11;
  void **v12;
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name;
  unint64_t *v14;
  unint64_t v15;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  pxrInternal__aapl__pxrReserved__::UsdShadeShader *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  uint64_t v33;
  void *__p[2];
  char v35;
  _BYTE v36[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  void *__dst[2];
  uint64_t v46;
  std::type_info v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  sub_20C3630C0((uint64_t)a2, &v47);
  String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v47);
  if (*((char *)String + 23) < 0)
  {
    sub_20BDDBFAC(__dst, (void *)*String, String[1]);
  }
  else
  {
    v9 = *(_OWORD *)String;
    v46 = String[2];
    *(_OWORD *)__dst = v9;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v47.__vftable + 1);
  sub_20BFD265C(&v47);
  sub_20C696CA8(&v43, a3);
  if (v46 >= 0)
    v10 = HIBYTE(v46);
  else
    v10 = (size_t)__dst[1];
  v11 = __p;
  sub_20BDF6BDC((uint64_t)__p, v10 + 14);
  if (v35 < 0)
    v11 = (void **)__p[0];
  if (v10)
  {
    if (v46 >= 0)
      v12 = __dst;
    else
      v12 = (void **)__dst[0];
    memmove(v11, v12, v10);
  }
  strcpy((char *)v11 + v10, "/surfaceShader");
  pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(&v41, __p);
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::Define(&v43, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v41, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v47);
  type_name = v47.__type_name;
  if (v47.__type_name)
  {
    v14 = (unint64_t *)(v47.__type_name + 48);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = type_name;
  if (v16)
    sub_20C35C614(v16);
  sub_20C01A074((int *)(a1 + 40), &v48);
  sub_20C01A0C8((int *)(a1 + 44), &v49);
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::~UsdShadeShader((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v47);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v42);
  sub_20BFD265C(&v41);
  if (v35 < 0)
    operator delete(__p[0]);
  v17 = v44;
  if (v44)
  {
    v18 = (unsigned int *)(v44 + 8);
    do
    {
      v19 = __ldxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)__p, "UsdPreviewSurface");
  v21 = (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)(a1 + 24);
  v47.__vftable = (std::type_info_vtbl *)__p[0];
  v47.__type_name = (std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t)&off_24C5207B8 + 1;
  if (((uint64_t)__p[0] & 7) != 0)
  {
    v22 = (unsigned int *)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 2, v22));
    if ((v23 & 1) == 0)
      v47.__vftable = (std::type_info_vtbl *)((unint64_t)v47.__vftable & 0xFFFFFFFFFFFFFFF8);
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateIdAttr(v21, &v47, 0, (uint64_t)v36);
  if ((v40 & 7) != 0)
  {
    v24 = (unsigned int *)(v40 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v39);
  sub_20BFD265C(&v38);
  if (v37)
    sub_20C35C614(v37);
  sub_20BF4C2D8((uint64_t)&v47);
  if (((uint64_t)__p[0] & 7) != 0)
  {
    v26 = (unsigned int *)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v27 = __ldxr(v26);
    while (__stlxr(v27 - 2, v26));
  }
  v28 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v28)
    v28 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::CreateSurfaceOutput(a2, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v28 + 216), (uint64_t)&v47);
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::ConnectableAPI(v21, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)__p);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&v43, "surface");
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v33);
  pxrInternal__aapl__pxrReserved__::UsdShadeOutput::ConnectToSource(&v47, __p, &v43, 2, v33);
  if ((v43 & 7) != 0)
  {
    v29 = (unsigned int *)(v43 & 0xFFFFFFFFFFFFFFF8);
    do
      v30 = __ldxr(v29);
    while (__stlxr(v30 - 2, v29));
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)__p);
  if ((v50 & 7) != 0)
  {
    v31 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v32 = __ldxr(v31);
    while (__stlxr(v32 - 2, v31));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v49);
  sub_20BFD265C(&v48);
  if (v47.__type_name)
    sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v47.__type_name);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a4, v21);
  *(_QWORD *)a4 = off_24C53DB40;
  if (SHIBYTE(v46) < 0)
    operator delete(__dst[0]);
}

void sub_20C7A2D4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_DWORD *pxrInternal__aapl__pxrReserved__::converterUtils::Material::makeUsdUVTexture(uint64_t a1, const void **a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *a4, uint64_t *a5)
{
  size_t v10;
  std::string *v11;
  const void *v12;
  int v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  std::string *v16;
  std::type_info v17;
  uint64_t *v18;
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int *v61;
  unsigned int v62;
  float32x4_t v63;
  unsigned int v64;
  std::string::size_type v65;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int *v74;
  unsigned int v75;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v76;
  __int128 v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int *v80;
  unsigned int v81;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v82;
  unsigned int *v84;
  unsigned int v85;
  unsigned int *v86;
  unsigned int v87;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v88;
  unsigned int *v89;
  unsigned int v90;
  unsigned int *v91;
  unsigned int v92;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v93;
  unsigned int *v94;
  unsigned int v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int *v98;
  unsigned int v99;
  uint64_t v100;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v101;
  uint64_t *v102;
  unsigned int *v103;
  unsigned int v104;
  unsigned int *v105;
  unsigned int v106;
  unsigned int *v107;
  unsigned int v108;
  unsigned int *v109;
  unsigned int v110;
  unsigned int *v111;
  unsigned int v112;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _BYTE v117[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v118;
  int v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _BYTE v125[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v126;
  int v127;
  int v128;
  uint64_t v129;
  _QWORD v130[3];
  _BYTE v131[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v132;
  int v133;
  int v134;
  uint64_t v135;
  std::string v136;
  uint64_t v137;
  _BYTE v138[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v139;
  int v140;
  int v141;
  uint64_t v142;
  _BYTE v143[24];
  int v144;
  int v145;
  std::type_info v146;
  std::string::size_type v147;
  unint64_t v148;
  char v149;
  uint64_t v150;

  v150 = *MEMORY[0x24BDAC8D0];
  if (*((char *)a2 + 23) >= 0)
    v10 = *((unsigned __int8 *)a2 + 23);
  else
    v10 = (size_t)a2[1];
  v11 = &v136;
  sub_20BDF6BDC((uint64_t)&v136, v10 + 10);
  if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v11 = (std::string *)v136.__r_.__value_.__r.__words[0];
  if (v10)
  {
    if (*((char *)a2 + 23) >= 0)
      v12 = a2;
    else
      v12 = *a2;
    memmove(v11, v12, v10);
  }
  strcpy((char *)v11 + v10, "/uvReader_");
  v13 = *(char *)(a3 + 175);
  if (v13 >= 0)
    v14 = (const std::string::value_type *)(a3 + 152);
  else
    v14 = *(const std::string::value_type **)(a3 + 152);
  if (v13 >= 0)
    v15 = *(unsigned __int8 *)(a3 + 175);
  else
    v15 = *(_QWORD *)(a3 + 160);
  v16 = std::string::append(&v136, v14, v15);
  v17 = *(std::type_info *)&v16->__r_.__value_.__l.__data_;
  v147 = v16->__r_.__value_.__r.__words[2];
  v146 = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(&v144, &v146);
  if (SHIBYTE(v147) < 0)
    operator delete(v146.__vftable);
  if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v136.__r_.__value_.__l.__data_);
  v18 = sub_20C696CA8((uint64_t *)&v146, a5);
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::Define(v18, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v144, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v143);
  type_name = v146.__type_name;
  if (v146.__type_name)
  {
    v20 = (unsigned int *)(v146.__type_name + 8);
    do
    {
      v21 = __ldxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
      (*(void (**)(std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t))(*(_QWORD *)type_name + 8))(type_name);
  }
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&v136, "UsdPrimvarReader_float2");
  v146.__vftable = (std::type_info_vtbl *)v136.__r_.__value_.__r.__words[0];
  v146.__type_name = (std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t)&off_24C5207B8 + 1;
  if ((v136.__r_.__value_.__s.__data_[0] & 7) != 0)
  {
    v23 = (unsigned int *)(v136.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 2, v23));
    if ((v24 & 1) == 0)
      v146.__vftable = (std::type_info_vtbl *)((unint64_t)v146.__vftable & 0xFFFFFFFFFFFFFFF8);
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateIdAttr((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)v143, &v146, 0, (uint64_t)v138);
  if ((v142 & 7) != 0)
  {
    v25 = (unsigned int *)(v142 & 0xFFFFFFFFFFFFFFF8);
    do
      v26 = __ldxr(v25);
    while (__stlxr(v26 - 2, v25));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v141);
  sub_20BFD265C(&v140);
  if (v139)
    sub_20C35C614(v139);
  sub_20BF4C2D8((uint64_t)&v146);
  if ((v136.__r_.__value_.__s.__data_[0] & 7) != 0)
  {
    v27 = (unsigned int *)(v136.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  if (*(_DWORD *)(a3 + 64))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&v136, "varname");
    v29 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v29)
      v29 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateInput((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)v143, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v136, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v29 + 88), (uint64_t)&v146);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v130);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__ **)&v146, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v130, NAN);
    if ((v130[0] & 7) != 0)
    {
      v30 = (unsigned int *)(v130[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v31 = __ldxr(v30);
      while (__stlxr(v31 - 2, v30));
    }
    if ((v148 & 7) != 0)
    {
      v32 = (unsigned int *)(v148 & 0xFFFFFFFFFFFFFFF8);
      do
        v33 = __ldxr(v32);
      while (__stlxr(v33 - 2, v32));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v147 + 1);
    sub_20BFD265C(&v147);
    if (v146.__type_name)
      sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v146.__type_name);
    if ((v136.__r_.__value_.__s.__data_[0] & 7) != 0)
    {
      v34 = (unsigned int *)(v136.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v35 = __ldxr(v34);
      while (__stlxr(v35 - 2, v34));
    }
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&v136, "frame:stPrimvarName");
    v36 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v36)
      v36 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::CreateInput(a4, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v136, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v36 + 88), (uint64_t)&v146);
    if ((v136.__r_.__value_.__s.__data_[0] & 7) != 0)
    {
      v37 = (unsigned int *)(v136.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v38 = __ldxr(v37);
      while (__stlxr(v38 - 2, v37));
    }
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v136);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__ **)&v146, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v136, NAN);
    if ((v136.__r_.__value_.__s.__data_[0] & 7) != 0)
    {
      v39 = (unsigned int *)(v136.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v40 = __ldxr(v39);
      while (__stlxr(v40 - 2, v39));
    }
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)v130, "varname");
    v41 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v41)
      v41 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateInput((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)v143, (const pxrInternal__aapl__pxrReserved__::TfToken *)v130, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v41 + 88), (uint64_t)&v136);
    pxrInternal__aapl__pxrReserved__::UsdShadeInput::ConnectToSource((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&v136, (const pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&v146);
    if ((v137 & 7) != 0)
    {
      v42 = (unsigned int *)(v137 & 0xFFFFFFFFFFFFFFF8);
      do
        v43 = __ldxr(v42);
      while (__stlxr(v43 - 2, v42));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v136.__r_.__value_.__r.__words[2] + 1);
    sub_20BFD265C(&v136.__r_.__value_.__r.__words[2]);
    if (v136.__r_.__value_.__l.__size_)
      sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v136.__r_.__value_.__l.__size_);
    if ((v130[0] & 7) != 0)
    {
      v44 = (unsigned int *)(v130[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v45 = __ldxr(v44);
      while (__stlxr(v45 - 2, v44));
    }
    if ((v148 & 7) != 0)
    {
      v46 = (unsigned int *)(v148 & 0xFFFFFFFFFFFFFFF8);
      do
        v47 = __ldxr(v46);
      while (__stlxr(v47 - 2, v46));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v147 + 1);
    sub_20BFD265C(&v147);
    if (v146.__type_name)
      sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v146.__type_name);
  }
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&v146, "result");
  v48 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v48)
    v48 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateOutput((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)v143, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v146, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v48 + 152), (uint64_t)v131);
  if ((v135 & 7) != 0)
  {
    v49 = (unsigned int *)(v135 & 0xFFFFFFFFFFFFFFF8);
    do
      v50 = __ldxr(v49);
    while (__stlxr(v50 - 2, v49));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v134);
  sub_20BFD265C(&v133);
  if (v132)
    sub_20C35C614(v132);
  if (((uint64_t)v146.__vftable & 7) != 0)
  {
    v51 = (unsigned int *)((unint64_t)v146.__vftable & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stlxr(v52 - 2, v51));
  }
  sub_20C696CA8((uint64_t *)&v146, a5);
  pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(&v136, a3 + 16);
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::Define((uint64_t *)&v146, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v136, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v130);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v136.__r_.__value_.__r.__words + 1);
  sub_20BFD265C(&v136);
  v53 = v146.__type_name;
  if (v146.__type_name)
  {
    v54 = (unsigned int *)(v146.__type_name + 8);
    do
    {
      v55 = __ldxr(v54);
      v56 = v55 - 1;
    }
    while (__stlxr(v56, v54));
    if (!v56)
      (*(void (**)(std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t))(*(_QWORD *)v53 + 8))(v53);
  }
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&v136, "UsdUVTexture");
  v146.__vftable = (std::type_info_vtbl *)v136.__r_.__value_.__r.__words[0];
  v146.__type_name = (std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t)&off_24C5207B8 + 1;
  if ((v136.__r_.__value_.__s.__data_[0] & 7) != 0)
  {
    v57 = (unsigned int *)(v136.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v58 = __ldxr(v57);
    while (__stxr(v58 + 2, v57));
    if ((v58 & 1) == 0)
      v146.__vftable = (std::type_info_vtbl *)((unint64_t)v146.__vftable & 0xFFFFFFFFFFFFFFF8);
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateIdAttr((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)v130, &v146, 0, (uint64_t)v125);
  if ((v129 & 7) != 0)
  {
    v59 = (unsigned int *)(v129 & 0xFFFFFFFFFFFFFFF8);
    do
      v60 = __ldxr(v59);
    while (__stlxr(v60 - 2, v59));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v128);
  sub_20BFD265C(&v127);
  if (v126)
    sub_20C35C614(v126);
  sub_20BF4C2D8((uint64_t)&v146);
  if ((v136.__r_.__value_.__s.__data_[0] & 7) != 0)
  {
    v61 = (unsigned int *)(v136.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v62 = __ldxr(v61);
    while (__stlxr(v62 - 2, v61));
  }
  if (*(_DWORD *)(a3 + 64))
  {
    v64 = *(_DWORD *)(a3 + 72);
    v65 = *(_QWORD *)(a3 + 76);
    LODWORD(v136.__r_.__value_.__l.__data_) = *(_DWORD *)(a3 + 68);
    v63.i64[0] = __PAIR64__(v64, v136.__r_.__value_.__l.__data_);
    HIDWORD(v136.__r_.__value_.__r.__words[0]) = v64;
    v136.__r_.__value_.__l.__size_ = v65;
    v63.i64[1] = v65;
    __asm { FMOV            V1.4S, #1.0 }
    if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(v63, _Q1)))) & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&v124, "scale");
      v71 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (!v71)
        v71 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateInput((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)v130, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v124, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v71 + 168), (uint64_t)&v146);
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::GfVec4f>((pxrInternal__aapl__pxrReserved__ **)&v146, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v136, NAN);
      if ((v148 & 7) != 0)
      {
        v72 = (unsigned int *)(v148 & 0xFFFFFFFFFFFFFFF8);
        do
          v73 = __ldxr(v72);
        while (__stlxr(v73 - 2, v72));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v147 + 1);
      sub_20BFD265C(&v147);
      if (v146.__type_name)
        sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v146.__type_name);
      if ((v124 & 7) != 0)
      {
        v74 = (unsigned int *)(v124 & 0xFFFFFFFFFFFFFFF8);
        do
          v75 = __ldxr(v74);
        while (__stlxr(v75 - 2, v74));
      }
    }
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&v124, "scale");
    v76 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v76)
      v76 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateInput((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)v130, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v124, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v76 + 168), (uint64_t)&v146);
    *(_QWORD *)&v77 = 0x4000000040000000;
    *((_QWORD *)&v77 + 1) = 0x4000000040000000;
    *(_OWORD *)&v136.__r_.__value_.__l.__data_ = v77;
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::GfVec4f>((pxrInternal__aapl__pxrReserved__ **)&v146, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v136, NAN);
    if ((v148 & 7) != 0)
    {
      v78 = (unsigned int *)(v148 & 0xFFFFFFFFFFFFFFF8);
      do
        v79 = __ldxr(v78);
      while (__stlxr(v79 - 2, v78));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v147 + 1);
    sub_20BFD265C(&v147);
    if (v146.__type_name)
      sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v146.__type_name);
    if ((v124 & 7) != 0)
    {
      v80 = (unsigned int *)(v124 & 0xFFFFFFFFFFFFFFF8);
      do
        v81 = __ldxr(v80);
      while (__stlxr(v81 - 2, v80));
    }
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&v124, "bias");
    v82 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v82)
      v82 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateInput((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)v130, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v124, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v82 + 168), (uint64_t)&v146);
    __asm { FMOV            V0.4S, #-1.0 }
    *(_OWORD *)&v136.__r_.__value_.__l.__data_ = _Q0;
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::GfVec4f>((pxrInternal__aapl__pxrReserved__ **)&v146, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v136, NAN);
    if ((v148 & 7) != 0)
    {
      v84 = (unsigned int *)(v148 & 0xFFFFFFFFFFFFFFF8);
      do
        v85 = __ldxr(v84);
      while (__stlxr(v85 - 2, v84));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v147 + 1);
    sub_20BFD265C(&v147);
    if (v146.__type_name)
      sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v146.__type_name);
    if ((v124 & 7) != 0)
    {
      v86 = (unsigned int *)(v124 & 0xFFFFFFFFFFFFFFF8);
      do
        v87 = __ldxr(v86);
      while (__stlxr(v87 - 2, v86));
    }
  }
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&v124, "file");
  v88 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v88)
    v88 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateInput((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)v130, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v124, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v88 + 96), (uint64_t)&v136);
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(&v146, a3 + 104);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::SdfAssetPath>((pxrInternal__aapl__pxrReserved__ **)&v136, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v146, NAN);
  if (v149 < 0)
    operator delete((void *)v148);
  if (SHIBYTE(v147) < 0)
    operator delete(v146.__vftable);
  if ((v137 & 7) != 0)
  {
    v89 = (unsigned int *)(v137 & 0xFFFFFFFFFFFFFFF8);
    do
      v90 = __ldxr(v89);
    while (__stlxr(v90 - 2, v89));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v136.__r_.__value_.__r.__words[2] + 1);
  sub_20BFD265C(&v136.__r_.__value_.__r.__words[2]);
  if (v136.__r_.__value_.__l.__size_)
    sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v136.__r_.__value_.__l.__size_);
  if ((v124 & 7) != 0)
  {
    v91 = (unsigned int *)(v124 & 0xFFFFFFFFFFFFFFF8);
    do
      v92 = __ldxr(v91);
    while (__stlxr(v92 - 2, v91));
  }
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&v124, "st");
  v93 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v93)
    v93 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateInput((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)v130, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v124, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v93 + 152), (uint64_t)&v146);
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::ConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)v143, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v136);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&v123, "result");
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v122);
  pxrInternal__aapl__pxrReserved__::UsdShadeInput::ConnectToSource(&v146, &v136, &v123, 2, v122);
  if ((v123 & 7) != 0)
  {
    v94 = (unsigned int *)(v123 & 0xFFFFFFFFFFFFFFF8);
    do
      v95 = __ldxr(v94);
    while (__stlxr(v95 - 2, v94));
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v136);
  if ((v148 & 7) != 0)
  {
    v96 = (unsigned int *)(v148 & 0xFFFFFFFFFFFFFFF8);
    do
      v97 = __ldxr(v96);
    while (__stlxr(v97 - 2, v96));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v147 + 1);
  sub_20BFD265C(&v147);
  if (v146.__type_name)
    sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v146.__type_name);
  if ((v124 & 7) != 0)
  {
    v98 = (unsigned int *)(v124 & 0xFFFFFFFFFFFFFFF8);
    do
      v99 = __ldxr(v98);
    while (__stlxr(v99 - 2, v98));
  }
  if (*(char *)(a3 + 151) < 0)
    v100 = *(_QWORD *)(a3 + 136);
  else
    v100 = *(unsigned __int8 *)(a3 + 151);
  v101 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (v100 == 3)
  {
    if (!v101)
      v101 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    v102 = (uint64_t *)((char *)v101 + 160);
  }
  else
  {
    if (!v101)
      v101 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    v102 = (uint64_t *)((char *)v101 + 56);
  }
  v124 = *v102;
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v146);
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateOutput((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)v130, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v146, (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v124, (uint64_t)v117);
  if ((v121 & 7) != 0)
  {
    v103 = (unsigned int *)(v121 & 0xFFFFFFFFFFFFFFF8);
    do
      v104 = __ldxr(v103);
    while (__stlxr(v104 - 2, v103));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v120);
  sub_20BFD265C(&v119);
  if (v118)
    sub_20C35C614(v118);
  if (((uint64_t)v146.__vftable & 7) != 0)
  {
    v105 = (unsigned int *)((unint64_t)v146.__vftable & 0xFFFFFFFFFFFFFFF8);
    do
      v106 = __ldxr(v105);
    while (__stlxr(v106 - 2, v105));
  }
  v123 = sub_20C7A4054(*(_DWORD *)(a3 + 64));
  sub_20C7A41D8(*(_DWORD *)(a3 + 64));
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v116);
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateInput((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)(a1 + 24), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v116, (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v123, (uint64_t)&v146);
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::ConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)v130, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v136);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v115);
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v114);
  pxrInternal__aapl__pxrReserved__::UsdShadeInput::ConnectToSource(&v146, &v136, &v115, 2, v114);
  if ((v115 & 7) != 0)
  {
    v107 = (unsigned int *)(v115 & 0xFFFFFFFFFFFFFFF8);
    do
      v108 = __ldxr(v107);
    while (__stlxr(v108 - 2, v107));
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v136);
  if ((v148 & 7) != 0)
  {
    v109 = (unsigned int *)(v148 & 0xFFFFFFFFFFFFFFF8);
    do
      v110 = __ldxr(v109);
    while (__stlxr(v110 - 2, v109));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v147 + 1);
  sub_20BFD265C(&v147);
  if (v146.__type_name)
    sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v146.__type_name);
  if ((v116 & 7) != 0)
  {
    v111 = (unsigned int *)(v116 & 0xFFFFFFFFFFFFFFF8);
    do
      v112 = __ldxr(v111);
    while (__stlxr(v112 - 2, v111));
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::~UsdShadeShader((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)v130);
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::~UsdShadeShader((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)v143);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v145);
  return sub_20BFD265C(&v144);
}

void sub_20C7A3B78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;

  pxrInternal__aapl__pxrReserved__::UsdShadeShader::~UsdShadeShader((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&a24);
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::~UsdShadeShader((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)(v36 - 176));
  sub_20BFD1A18((_DWORD *)(v36 - 152));
  _Unwind_Resume(a1);
}

uint64_t sub_20C7A4054(int a1)
{
  unsigned __int8 v1;
  int v3;
  int v4;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v5;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v6;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v7;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v10;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v11;

  v1 = atomic_load((unsigned __int8 *)&qword_25473DAD8);
  if ((v1 & 1) == 0)
  {
    v3 = a1;
    v4 = __cxa_guard_acquire(&qword_25473DAD8);
    a1 = v3;
    if (v4)
    {
      v5 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (!v5)
        v5 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      qword_25473DAA0[0] = *((_QWORD *)v5 + 32);
      v6 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (!v6)
        v6 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      qword_25473DAA8 = *((_QWORD *)v6 + 35);
      v7 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (!v7)
        v7 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      qword_25473DAB0 = *((_QWORD *)v7 + 7);
      v8 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (!v8)
        v8 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      qword_25473DAB8 = *((_QWORD *)v8 + 35);
      v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (!v9)
        v9 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      qword_25473DAC0 = *((_QWORD *)v9 + 7);
      v10 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (!v10)
        v10 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      qword_25473DAC8 = *((_QWORD *)v10 + 7);
      v11 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (!v11)
        v11 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      qword_25473DAD0 = *((_QWORD *)v11 + 7);
      __cxa_guard_release(&qword_25473DAD8);
      a1 = v3;
    }
  }
  return qword_25473DAA0[a1];
}

void sub_20C7A41C0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25473DAD8);
  _Unwind_Resume(a1);
}

char *sub_20C7A41D8(int a1)
{
  unsigned __int8 v2;

  v2 = atomic_load((unsigned __int8 *)&qword_25473DB88);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25473DB88))
  {
    sub_20BDDC0E4(qword_25473DAE0, "normal");
    sub_20BDDC0E4(qword_25473DAF8, "diffuseColor");
    sub_20BDDC0E4(qword_25473DB10, "opacity");
    sub_20BDDC0E4(qword_25473DB28, "emissiveColor");
    sub_20BDDC0E4(qword_25473DB40, "occlusion");
    sub_20BDDC0E4(qword_25473DB58, "metallic");
    sub_20BDDC0E4(qword_25473DB70, "roughness");
    __cxa_atexit((void (*)(void *))sub_20C7A4540, 0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25473DB88);
  }
  return (char *)&qword_25473DAE0[3 * a1];
}

void sub_20C7A42F0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25473DB88);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::converterUtils::Material::makeConstInput(pxrInternal__aapl__pxrReserved__::converterUtils::Material *this, serialize::MapInput *a2, pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *a3)
{
  uint64_t v5;
  int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  pxrInternal__aapl__pxrReserved__ *v16;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;

  v23 = sub_20C7A4054(*((_DWORD *)a2 + 16));
  if (*((char *)a2 + 103) < 0)
    v5 = *((_QWORD *)a2 + 11);
  else
    v5 = *((unsigned __int8 *)a2 + 103);
  if (v5 == 3)
  {
    v6 = *((_DWORD *)a2 + 19);
    v21 = *(_QWORD *)((char *)a2 + 68);
    v22 = v6;
    sub_20C7A41D8(*((_DWORD *)a2 + 16));
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v15);
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateInput((pxrInternal__aapl__pxrReserved__::converterUtils::Material *)((char *)this + 24), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v15, (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v23, (uint64_t)&v16);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::GfVec3f>(&v16, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v21, NAN);
    if ((v20 & 7) != 0)
    {
      v7 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stlxr(v8 - 2, v7));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
    sub_20BFD265C(&v18);
    if (v17)
      sub_20C35C614(v17);
    if ((v15 & 7) != 0)
    {
      v9 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    sub_20C7A41D8(*((_DWORD *)a2 + 16));
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v21);
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateInput((pxrInternal__aapl__pxrReserved__::converterUtils::Material *)((char *)this + 24), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v21, (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v23, (uint64_t)&v16);
    LODWORD(v15) = *((_DWORD *)a2 + 17);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<float>(&v16, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v15, NAN);
    if ((v20 & 7) != 0)
    {
      v11 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
    sub_20BFD265C(&v18);
    if (v17)
      sub_20C35C614(v17);
    if ((v21 & 7) != 0)
    {
      v13 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
      do
        v14 = __ldxr(v13);
      while (__stlxr(v14 - 2, v13));
    }
  }
}

void sub_20C7A44C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  unsigned int *v15;
  unsigned int v16;

  sub_20C5BD350((uint64_t)&a10);
  if ((a14 & 7) != 0)
  {
    v15 = (unsigned int *)(a14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  _Unwind_Resume(a1);
}

void sub_20C7A4540()
{
  uint64_t i;

  for (i = 0; i != -168; i -= 24)
  {
    if (*((char *)&unk_25473DAE0 + i + 167) < 0)
      operator delete(*(void **)((char *)&unk_25473DAE0 + i + 144));
  }
}

_QWORD *pxrInternal__aapl__pxrReserved__::XpcConverter::XpcConverter(_QWORD *this)
{
  this[2] = 0;
  this[3] = 0;
  *this = off_24C54B418;
  this[1] = this + 2;
  return this;
}

{
  this[2] = 0;
  this[3] = 0;
  *this = off_24C54B418;
  this[1] = this + 2;
  return this;
}

void pxrInternal__aapl__pxrReserved__::XpcConverter::~XpcConverter(pxrInternal__aapl__pxrReserved__::XpcConverter *this)
{
  *(_QWORD *)this = off_24C54B418;
  sub_20C7A65B8((uint64_t)this + 8, *((_QWORD **)this + 2));
}

{
  *(_QWORD *)this = off_24C54B418;
  sub_20C7A65B8((uint64_t)this + 8, *((_QWORD **)this + 2));
}

{
  *(_QWORD *)this = off_24C54B418;
  sub_20C7A65B8((uint64_t)this + 8, *((_QWORD **)this + 2));
  operator delete(this);
}

void pxrInternal__aapl__pxrReserved__::XpcConverter::createMaterial(uint64_t a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a3)
{
  const void **v6;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v7;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v8;
  serialize::MapInput **v9;
  serialize::MapInput **v10;
  uint64_t v11;
  int v12;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v19;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v20;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v21;
  char v22[8];
  uint64_t v23;
  int v24;
  int v25;
  void *__p[2];
  char v27;
  uint64_t v28;
  const void **v29;

  v6 = (const void **)(a2 + 16);
  sub_20C7A601C((char *)__p, (__int128 *)(a2 + 16));
  v8 = a3 + 1;
  v7 = a3[1];
  if (v7)
  {
    if (*(_BYTE *)(sub_20BEB47BC((uint64_t *)a3 + 1) + 14))
      v7 = *a3;
    else
      v7 = 0;
  }
  v21 = v7;
  sub_20BF1DD04((uint64_t *)&v21);
  pxrInternal__aapl__pxrReserved__::converterUtils::Material::makeUsdMaterial((uint64_t)__p, (uint64_t *)&v21, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v22);
  sub_20C455C74(&v21);
  v9 = *(serialize::MapInput ***)(a2 + 40);
  v10 = *(serialize::MapInput ***)(a2 + 48);
  while (v9 != v10)
  {
    v11 = (uint64_t)*v9;
    v12 = *((_DWORD *)*v9 + 2);
    if (v12 == 8)
    {
      v13 = *v8;
      if (*v8)
      {
        if (*(_BYTE *)(sub_20BEB47BC((uint64_t *)a3 + 1) + 14))
          v13 = *a3;
        else
          v13 = 0;
      }
      v20 = v13;
      sub_20BF1DD04((uint64_t *)&v20);
      pxrInternal__aapl__pxrReserved__::converterUtils::Material::makeUsdUVTexture((uint64_t)__p, v6, v11, (pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)v22, (uint64_t *)&v20);
      sub_20C455C74(&v20);
    }
    else if (v12 == 7)
    {
      pxrInternal__aapl__pxrReserved__::converterUtils::Material::makeConstInput((pxrInternal__aapl__pxrReserved__::converterUtils::Material *)__p, *v9, (pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)v22);
    }
    ++v9;
  }
  v29 = v6;
  v14 = sub_20C7A663C((uint64_t **)(a1 + 8), v6, (uint64_t)&unk_20CAC184C, (__int128 **)&v29);
  v15 = v14;
  v16 = v23;
  if (v23)
  {
    v17 = (unint64_t *)(v23 + 48);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v14[8];
  v15[8] = v16;
  if (v19)
    sub_20C35C614(v19);
  sub_20C01A074((int *)v15 + 18, &v24);
  sub_20C01A0C8((int *)v15 + 19, &v25);
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::~UsdShadeMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)v22);
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::~UsdShadeShader((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v28);
  if (v27 < 0)
    operator delete(__p[0]);
}

void sub_20C7A4810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::~UsdShadeMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)va);
  sub_20C7A485C((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C7A485C(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::~UsdShadeShader((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void pxrInternal__aapl__pxrReserved__::XpcConverter::createMesh(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  char *v14;
  __int128 v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int **v39;
  unsigned int **v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int v49;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int *v65;
  unsigned int v66;
  uint64_t *v67;
  uint64_t *i;
  uint64_t v69;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v70;
  unsigned int *v71;
  unsigned int v72;
  uint64_t *v73;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v74;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v75;
  unsigned int *v76;
  unsigned int v77;
  uint64_t *v78;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v79;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v80;
  unint64_t v81;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v82;
  int v83;
  int v84;
  uint64_t v85;
  _QWORD v86[3];
  _BYTE v87[8];
  uint64_t v88;
  int v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  _BYTE v93[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v94;
  int v95;
  int v96;
  uint64_t v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  _OWORD v101[2];
  uint64_t v102;
  _QWORD v103[4];
  _BYTE v104[24];
  std::type_info v105;
  int v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;

  v110 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 72) != *(_QWORD *)(a2 + 64))
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(&v105, a2 + 16);
    pxrInternal__aapl__pxrReserved__::UsdGeomMesh::Define(a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v105, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v104);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v105.__vftable + 1);
    sub_20BFD265C(&v105);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v103, (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v104);
    v103[3] = 0;
    v103[0] = off_24C53CE78;
    pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetSubdivisionSchemeAttr((pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)v104, (uint64_t)&v105);
    v6 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v6)
      v6 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__ **)&v105, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v6 + 680), NAN);
    if ((v108 & 7) != 0)
    {
      v7 = (unsigned int *)(v108 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stlxr(v8 - 2, v7));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v107);
    sub_20BFD265C(&v106);
    if (v105.__type_name)
      sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v105.__type_name);
    v102 = 0;
    memset(v101, 0, sizeof(v101));
    sub_20C6C59E4((unint64_t *)v101, *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 72));
    pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetFaceVertexCountsAttr((pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)v104, (uint64_t)&v105);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<int>>((pxrInternal__aapl__pxrReserved__ **)&v105, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v101, NAN);
    if ((v108 & 7) != 0)
    {
      v9 = (unsigned int *)(v108 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v107);
    sub_20BFD265C(&v106);
    if (v105.__type_name)
      sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v105.__type_name);
    v100 = 0;
    v98 = 0u;
    v99 = 0u;
    sub_20C7A612C((unint64_t *)&v98, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 168) - *(_QWORD *)(a2 + 160)) >> 2));
    v11 = *(_QWORD *)(a2 + 160);
    v12 = *(_QWORD *)(a2 + 168);
    while (v11 != v12)
    {
      v13 = *(_DWORD *)(v11 + 8);
      v105.__vftable = *(std::type_info_vtbl **)v11;
      LODWORD(v105.__type_name) = v13;
      sub_20C7A61D8((uint64_t)&v98, (uint64_t *)&v105);
      v11 += 12;
    }
    v105.__type_name = (std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t)off_24C51EC58;
    v14 = (char *)operator new(0x30uLL);
    v15 = v99;
    *(_OWORD *)v14 = v98;
    *((_OWORD *)v14 + 1) = v15;
    v16 = v100;
    *((_QWORD *)v14 + 4) = v100;
    if (v16)
    {
      v17 = (unint64_t *)(v16 - 16);
      if (*((_QWORD *)v14 + 3))
        v17 = (unint64_t *)*((_QWORD *)v14 + 3);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    v19 = (unsigned int *)(v14 + 40);
    atomic_store(0, (unsigned int *)v14 + 10);
    v105.__vftable = (std::type_info_vtbl *)v14;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::CreatePointsAttr((pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *)v104, &v105, 0, (uint64_t)v93);
    if ((v97 & 7) != 0)
    {
      v21 = (unsigned int *)(v97 & 0xFFFFFFFFFFFFFFF8);
      do
        v22 = __ldxr(v21);
      while (__stlxr(v22 - 2, v21));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v96);
    sub_20BFD265C(&v95);
    if (v94)
      sub_20C35C614(v94);
    sub_20BF4C2D8((uint64_t)&v105);
    sub_20C6C59E4((unint64_t *)v101, *(_QWORD *)(a2 + 88), *(_QWORD *)(a2 + 96));
    pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetFaceVertexIndicesAttr((pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)v104, (uint64_t)&v105);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<int>>((pxrInternal__aapl__pxrReserved__ **)&v105, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v101, NAN);
    if ((v108 & 7) != 0)
    {
      v23 = (unsigned int *)(v108 & 0xFFFFFFFFFFFFFFF8);
      do
        v24 = __ldxr(v23);
      while (__stlxr(v24 - 2, v23));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v107);
    sub_20BFD265C(&v106);
    if (v105.__type_name)
      sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v105.__type_name);
    if (*(_QWORD *)(a2 + 216) != *(_QWORD *)(a2 + 208))
    {
      sub_20C7A5674(*(_DWORD *)(a2 + 260), (unsigned int **)&v90);
      pxrInternal__aapl__pxrReserved__::UsdGeomGprim::CreateDisplayColorPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomGprim *)v104, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v90, -1, (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v105);
      if ((v90 & 7) != 0)
      {
        v25 = (unsigned int *)(v90 & 0xFFFFFFFFFFFFFFF8);
        do
          v26 = __ldxr(v25);
        while (__stlxr(v26 - 2, v25));
      }
      if ((_QWORD)v98)
        sub_20BF56210(&v98);
      sub_20C7A612C((unint64_t *)&v98, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 216) - *(_QWORD *)(a2 + 208)) >> 2));
      v27 = *(_QWORD *)(a2 + 208);
      v28 = *(_QWORD *)(a2 + 216);
      while (v27 != v28)
      {
        v29 = *(_DWORD *)(v27 + 8);
        *(_QWORD *)&v90 = *(_QWORD *)v27;
        DWORD2(v90) = v29;
        sub_20C7A61D8((uint64_t)&v98, (uint64_t *)&v90);
        v27 += 12;
      }
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>((pxrInternal__aapl__pxrReserved__ **)&v105, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v98, NAN);
      if ((v109 & 7) != 0)
      {
        v30 = (unsigned int *)(v109 & 0xFFFFFFFFFFFFFFF8);
        do
          v31 = __ldxr(v30);
        while (__stlxr(v31 - 2, v30));
      }
      if ((v108 & 7) != 0)
      {
        v32 = (unsigned int *)(v108 & 0xFFFFFFFFFFFFFFF8);
        do
          v33 = __ldxr(v32);
        while (__stlxr(v33 - 2, v32));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v107);
      sub_20BFD265C(&v106);
      if (v105.__type_name)
        sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v105.__type_name);
    }
    if (*(_QWORD *)(a2 + 240) != *(_QWORD *)(a2 + 232))
    {
      pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&v90, "st");
      v34 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (!v34)
        v34 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      v81 = 0;
      pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::CreatePrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)v103, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v90, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v34 + 840), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v81, -1, (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v105);
      if ((v81 & 7) != 0)
      {
        v35 = (unsigned int *)(v81 & 0xFFFFFFFFFFFFFFF8);
        do
          v36 = __ldxr(v35);
        while (__stlxr(v36 - 2, v35));
      }
      if ((v90 & 7) != 0)
      {
        v37 = (unsigned int *)(v90 & 0xFFFFFFFFFFFFFFF8);
        do
          v38 = __ldxr(v37);
        while (__stlxr(v38 - 2, v37));
      }
      v92 = 0;
      v90 = 0u;
      v91 = 0u;
      sub_20C7A636C((unint64_t *)&v90, (uint64_t)(*(_QWORD *)(a2 + 240) - *(_QWORD *)(a2 + 232)) >> 3);
      v39 = *(unsigned int ***)(a2 + 232);
      v40 = *(unsigned int ***)(a2 + 240);
      while (v39 != v40)
      {
        v81 = (unint64_t)*v39;
        sub_20C7A6404((uint64_t)&v90, &v81);
        ++v39;
      }
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>((pxrInternal__aapl__pxrReserved__ **)&v105, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v90, NAN);
      v41 = *(_QWORD *)(a2 + 112);
      v42 = *(_QWORD *)(a2 + 120);
      if (v42 != v41)
      {
        sub_20C6C59E4((unint64_t *)v101, v41, v42);
        pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::SetIndices((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v105, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v101, NAN);
      }
      v43 = *(_DWORD *)(a2 + 264);
      if (v43)
      {
        sub_20C7A5674(v43, (unsigned int **)&v81);
        pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::SetInterpolation((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v105, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v81);
        if ((v81 & 7) != 0)
        {
          v44 = (unsigned int *)(v81 & 0xFFFFFFFFFFFFFFF8);
          do
            v45 = __ldxr(v44);
          while (__stlxr(v45 - 2, v44));
        }
      }
      sub_20BF5618C((uint64_t)&v90);
      if ((v109 & 7) != 0)
      {
        v46 = (unsigned int *)(v109 & 0xFFFFFFFFFFFFFFF8);
        do
          v47 = __ldxr(v46);
        while (__stlxr(v47 - 2, v46));
      }
      if ((v108 & 7) != 0)
      {
        v48 = (unsigned int *)(v108 & 0xFFFFFFFFFFFFFFF8);
        do
          v49 = __ldxr(v48);
        while (__stlxr(v49 - 2, v48));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v107);
      sub_20BFD265C(&v106);
      if (v105.__type_name)
        sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v105.__type_name);
    }
    if (*(_QWORD *)(a2 + 192) != *(_QWORD *)(a2 + 184))
    {
      pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&v90, "normals");
      v50 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (!v50)
        v50 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      v81 = 0;
      pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::CreatePrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)v103, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v90, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v50 + 712), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v81, -1, (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v105);
      if ((v81 & 7) != 0)
      {
        v51 = (unsigned int *)(v81 & 0xFFFFFFFFFFFFFFF8);
        do
          v52 = __ldxr(v51);
        while (__stlxr(v52 - 2, v51));
      }
      if ((v90 & 7) != 0)
      {
        v53 = (unsigned int *)(v90 & 0xFFFFFFFFFFFFFFF8);
        do
          v54 = __ldxr(v53);
        while (__stlxr(v54 - 2, v53));
      }
      if ((_QWORD)v98)
        sub_20BF56210(&v98);
      sub_20C7A612C((unint64_t *)&v98, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 192) - *(_QWORD *)(a2 + 184)) >> 2));
      v55 = *(_QWORD *)(a2 + 184);
      v56 = *(_QWORD *)(a2 + 192);
      while (v55 != v56)
      {
        v57 = *(_DWORD *)(v55 + 8);
        *(_QWORD *)&v90 = *(_QWORD *)v55;
        DWORD2(v90) = v57;
        sub_20C7A61D8((uint64_t)&v98, (uint64_t *)&v90);
        v55 += 12;
      }
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>((pxrInternal__aapl__pxrReserved__ **)&v105, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v98, NAN);
      v58 = *(_QWORD *)(a2 + 136);
      v59 = *(_QWORD *)(a2 + 144);
      if (v59 != v58)
      {
        sub_20C6C59E4((unint64_t *)v101, v58, v59);
        pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::SetIndices((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v105, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v101, NAN);
      }
      v60 = *(_DWORD *)(a2 + 256);
      if (v60)
      {
        sub_20C7A5674(v60, (unsigned int **)&v90);
        pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::SetInterpolation((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v105, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v90);
        if ((v90 & 7) != 0)
        {
          v61 = (unsigned int *)(v90 & 0xFFFFFFFFFFFFFFF8);
          do
            v62 = __ldxr(v61);
          while (__stlxr(v62 - 2, v61));
        }
      }
      if ((v109 & 7) != 0)
      {
        v63 = (unsigned int *)(v109 & 0xFFFFFFFFFFFFFFF8);
        do
          v64 = __ldxr(v63);
        while (__stlxr(v64 - 2, v63));
      }
      if ((v108 & 7) != 0)
      {
        v65 = (unsigned int *)(v108 & 0xFFFFFFFFFFFFFFF8);
        do
          v66 = __ldxr(v65);
        while (__stlxr(v66 - 2, v65));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v107);
      sub_20BFD265C(&v106);
      if (v105.__type_name)
        sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v105.__type_name);
    }
    if (*(_QWORD *)(a2 + 48) != *(_QWORD *)(a2 + 40))
    {
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v105, (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v104);
      v108 = 0;
      v105.__vftable = (std::type_info_vtbl *)off_24C53D9C8;
      v67 = *(uint64_t **)(a2 + 40);
      for (i = *(uint64_t **)(a2 + 48); v67 != i; ++v67)
      {
        v69 = *v67;
        if (*(_DWORD *)(*v67 + 8) == 5)
        {
          sub_20C6C59E4((unint64_t *)v101, *(_QWORD *)(v69 + 64), *(_QWORD *)(v69 + 72));
          pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v90);
          v70 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
          if (!v70)
            v70 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
          pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CreateMaterialBindSubset((uint64_t)&v105, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v90, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v101, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v70 + 312), (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v87);
          if ((v90 & 7) != 0)
          {
            v71 = (unsigned int *)(v90 & 0xFFFFFFFFFFFFFFF8);
            do
              v72 = __ldxr(v71);
            while (__stlxr(v72 - 2, v71));
          }
          *(_QWORD *)&v90 = v69 + 112;
          v73 = sub_20C7A663C((uint64_t **)(a1 + 8), (const void **)(v69 + 112), (uint64_t)&unk_20CAC184C, (__int128 **)&v90);
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v86, (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(v73 + 7));
          v86[0] = off_24C53D820;
          sub_20C35C4F8((uint64_t)&v81, &v88, &v89);
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v90, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v81);
          *((_QWORD *)&v91 + 1) = 0;
          *(_QWORD *)&v90 = off_24C53D9C8;
          v74 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
          if (!v74)
            v74 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
          v75 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
          if (!v75)
            v75 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
          pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::Bind((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)&v90, (const pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)v86, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v74 + 40), v75);
          pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::~UsdShadeMaterialBindingAPI((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)&v90);
          if ((v85 & 7) != 0)
          {
            v76 = (unsigned int *)(v85 & 0xFFFFFFFFFFFFFFF8);
            do
              v77 = __ldxr(v76);
            while (__stlxr(v77 - 2, v76));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v84);
          sub_20BFD265C(&v83);
          if (v82)
            sub_20C35C614(v82);
          pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::~UsdShadeMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)v86);
          pxrInternal__aapl__pxrReserved__::UsdGeomSubset::~UsdGeomSubset((pxrInternal__aapl__pxrReserved__::UsdGeomSubset *)v87);
        }
      }
      pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::~UsdShadeMaterialBindingAPI((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)&v105);
      goto LABEL_133;
    }
    if (*(char *)(a2 + 295) < 0)
    {
      if (!*(_QWORD *)(a2 + 280))
      {
LABEL_133:
        sub_20BF5618C((uint64_t)&v98);
        sub_20BF5618C((uint64_t)v101);
        pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::~UsdGeomPrimvarsAPI((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)v103);
        pxrInternal__aapl__pxrReserved__::UsdGeomMesh::~UsdGeomMesh((pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)v104);
        return;
      }
    }
    else if (!*(_BYTE *)(a2 + 295))
    {
      goto LABEL_133;
    }
    v105.__vftable = (std::type_info_vtbl *)(a2 + 272);
    v78 = sub_20C7A663C((uint64_t **)(a1 + 8), (const void **)(a2 + 272), (uint64_t)&unk_20CAC184C, (__int128 **)&v105);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v90, (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(v78 + 7));
    *(_QWORD *)&v90 = off_24C53D820;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v105, (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v104);
    v108 = 0;
    v105.__vftable = (std::type_info_vtbl *)off_24C53D9C8;
    v79 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if (!v79)
      v79 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    v80 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if (!v80)
      v80 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::Bind((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)&v105, (const pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)&v90, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v79 + 40), v80);
    pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::~UsdShadeMaterialBindingAPI((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)&v105);
    pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::~UsdShadeMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)&v90);
    goto LABEL_133;
  }
}

void sub_20C7A537C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;
  unsigned int *v39;
  unsigned int v40;

  if ((a21 & 7) != 0)
  {
    v39 = (unsigned int *)(a21 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stlxr(v40 - 2, v39));
  }
  sub_20BF5618C((uint64_t)&a31);
  sub_20BF5618C((uint64_t)&a37);
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::~UsdGeomPrimvarsAPI((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)(v37 - 200));
  pxrInternal__aapl__pxrReserved__::UsdGeomMesh::~UsdGeomMesh((pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)(v37 - 168));
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *sub_20C7A5674@<X0>(int a1@<W0>, unsigned int **a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *result;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;

  switch(a1)
  {
    case 3:
      result = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!result)
        result = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      v7 = (unsigned int *)*((_QWORD *)result + 40);
      *a2 = v7;
      if ((v7 & 7) != 0)
      {
        v5 = (unsigned int *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
        do
          v6 = __ldxr(v5);
        while (__stxr(v6 + 2, v5));
        goto LABEL_27;
      }
      break;
    case 2:
      result = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!result)
        result = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      v8 = (unsigned int *)*((_QWORD *)result + 153);
      *a2 = v8;
      if ((v8 & 7) != 0)
      {
        v5 = (unsigned int *)((unint64_t)v8 & 0xFFFFFFFFFFFFFFF8);
        do
          v6 = __ldxr(v5);
        while (__stxr(v6 + 2, v5));
        goto LABEL_27;
      }
      break;
    case 1:
      result = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!result)
        result = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      v4 = (unsigned int *)*((_QWORD *)result + 145);
      *a2 = v4;
      if ((v4 & 7) != 0)
      {
        v5 = (unsigned int *)((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8);
        do
          v6 = __ldxr(v5);
        while (__stxr(v6 + 2, v5));
LABEL_27:
        if ((v6 & 1) == 0)
          *a2 = v5;
      }
      break;
    default:
      result = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!result)
        result = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      v9 = (unsigned int *)*((_QWORD *)result + 153);
      *a2 = v9;
      if ((v9 & 7) != 0)
      {
        v5 = (unsigned int *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
        do
          v6 = __ldxr(v5);
        while (__stxr(v6 + 2, v5));
        goto LABEL_27;
      }
      break;
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::XpcConverter::createPointCloud(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  char *v9;
  __int128 v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t *v26;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v27;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v28;
  void (**v29)(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *__hidden);
  int v30;
  _BYTE v31[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v32;
  int v33;
  int v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  _BYTE v39[31];
  std::type_info v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(&v40, a2 + 16);
  pxrInternal__aapl__pxrReserved__::UsdGeomPoints::Define(a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v40, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v39);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v40.__vftable + 1);
  sub_20BFD265C(&v40);
  v38 = 0;
  v36 = 0u;
  v37 = 0u;
  sub_20C7A612C((unint64_t *)&v36, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 2));
  v6 = *(_QWORD *)(a2 + 64);
  v7 = *(_QWORD *)(a2 + 72);
  while (v6 != v7)
  {
    v8 = *(_DWORD *)(v6 + 8);
    v40.__vftable = *(std::type_info_vtbl **)v6;
    LODWORD(v40.__type_name) = v8;
    sub_20C7A61D8((uint64_t)&v36, (uint64_t *)&v40);
    v6 += 12;
  }
  v40.__type_name = (std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t)off_24C51EC58;
  v9 = (char *)operator new(0x30uLL);
  v10 = v37;
  *(_OWORD *)v9 = v36;
  *((_OWORD *)v9 + 1) = v10;
  v11 = v38;
  *((_QWORD *)v9 + 4) = v38;
  if (v11)
  {
    v12 = (unint64_t *)(v11 - 16);
    if (*((_QWORD *)v9 + 3))
      v12 = (unint64_t *)*((_QWORD *)v9 + 3);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = (unsigned int *)(v9 + 40);
  atomic_store(0, (unsigned int *)v9 + 10);
  v40.__vftable = (std::type_info_vtbl *)v9;
  do
    v15 = __ldxr(v14);
  while (__stxr(v15 + 1, v14));
  pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::CreatePointsAttr((pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *)v39, &v40, 0, (uint64_t)v31);
  if ((v35 & 7) != 0)
  {
    v16 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stlxr(v17 - 2, v16));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v34);
  sub_20BFD265C(&v33);
  if (v32)
    sub_20C35C614(v32);
  sub_20BF4C2D8((uint64_t)&v40);
  if (*(_QWORD *)(a2 + 96) != *(_QWORD *)(a2 + 88))
  {
    v18 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v18)
      v18 = sub_20C549C2C(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    pxrInternal__aapl__pxrReserved__::UsdGeomGprim::CreateDisplayColorPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomGprim *)v39, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v18 + 1224), -1, (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v40);
    if ((_QWORD)v36)
      sub_20BF56210(&v36);
    sub_20C7A612C((unint64_t *)&v36, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 96) - *(_QWORD *)(a2 + 88)) >> 2));
    v19 = *(_QWORD *)(a2 + 88);
    v20 = *(_QWORD *)(a2 + 96);
    while (v19 != v20)
    {
      v21 = *(_DWORD *)(v19 + 8);
      v29 = *(void (***)(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *__hidden))v19;
      v30 = v21;
      sub_20C7A61D8((uint64_t)&v36, (uint64_t *)&v29);
      v19 += 12;
    }
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>((pxrInternal__aapl__pxrReserved__ **)&v40, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v36, NAN);
    if ((v44 & 7) != 0)
    {
      v22 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
      do
        v23 = __ldxr(v22);
      while (__stlxr(v23 - 2, v22));
    }
    if ((v43 & 7) != 0)
    {
      v24 = (unsigned int *)(v43 & 0xFFFFFFFFFFFFFFF8);
      do
        v25 = __ldxr(v24);
      while (__stlxr(v25 - 2, v24));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v42);
    sub_20BFD265C(&v41);
    if (v40.__type_name)
      sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v40.__type_name);
  }
  if (*(char *)(a2 + 135) < 0)
  {
    if (!*(_QWORD *)(a2 + 120))
      goto LABEL_40;
  }
  else if (!*(_BYTE *)(a2 + 135))
  {
    goto LABEL_40;
  }
  v40.__vftable = (std::type_info_vtbl *)(a2 + 112);
  v26 = sub_20C7A663C((uint64_t **)(a1 + 8), (const void **)(a2 + 112), (uint64_t)&unk_20CAC184C, (__int128 **)&v40);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v29, (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(v26 + 7));
  v29 = off_24C53D820;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v40, (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v39);
  v43 = 0;
  v40.__vftable = (std::type_info_vtbl *)off_24C53D9C8;
  v27 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v27)
    v27 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  v28 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v28)
    v28 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::Bind((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)&v40, (const pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)&v29, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v27 + 40), v28);
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::~UsdShadeMaterialBindingAPI((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)&v40);
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::~UsdShadeMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)&v29);
LABEL_40:
  sub_20BF5618C((uint64_t)&v36);
  pxrInternal__aapl__pxrReserved__::UsdGeomPoints::~UsdGeomPoints((pxrInternal__aapl__pxrReserved__::UsdGeomPoints *)v39);
}

void sub_20C7A5B58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v12 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::~UsdShadeMaterialBindingAPI((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)(v2 - 88));
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::~UsdShadeMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)va);
  sub_20BF5618C((uint64_t)va1);
  pxrInternal__aapl__pxrReserved__::UsdGeomPoints::~UsdGeomPoints((pxrInternal__aapl__pxrReserved__::UsdGeomPoints *)va2);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **pxrInternal__aapl__pxrReserved__::XpcConverter::makeUsdStage@<X0>(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **this@<X0>, serialize::Prim *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  BOOL v20;
  unsigned int *v21;
  unsigned int v22;
  pxrInternal__aapl__pxrReserved__::UsdStage *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  char v38;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v39;
  uint64_t v40;
  void *v41;
  char v42;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v43;
  void *__p[2];
  uint64_t v45;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v46[3];
  char v47;
  void *v48;
  char v49;
  void *v50;
  char v51;

  if (*((_DWORD *)a2 + 2) == 2)
  {
    v5 = (uint64_t)this;
    if (*((char *)a2 + 87) < 0)
    {
      sub_20BDDBFAC(__p, *((void **)a2 + 8), *((_QWORD *)a2 + 9));
    }
    else
    {
      *(_OWORD *)__p = *((_OWORD *)a2 + 4);
      v45 = *((_QWORD *)a2 + 10);
    }
    sub_20C7A6568((uint64_t)v46, (uint64_t *)__p);
    if (SHIBYTE(v45) < 0)
      operator delete(__p[0]);
    pxrInternal__aapl__pxrReserved__::converterUtils::Asset::makeUsdStage(v46, (uint64_t *)&v43);
    v6 = (uint64_t *)*((_QWORD *)a2 + 5);
    v7 = (uint64_t *)*((_QWORD *)a2 + 6);
    if (v6 != v7)
    {
      do
      {
        v8 = *v6;
        if (*(_DWORD *)(*v6 + 8) == 6)
        {
          pxrInternal__aapl__pxrReserved__::converterUtils::Asset::getMaterialsPath(v46, (uint64_t)&v41);
          if (v42 < 0)
            operator delete(v41);
          sub_20C696CA8((uint64_t *)&v39, (uint64_t *)&v43);
          pxrInternal__aapl__pxrReserved__::XpcConverter::createMaterial(v5, v8, &v39);
          v9 = v40;
          if (v40)
          {
            v10 = (unsigned int *)(v40 + 8);
            do
            {
              v11 = __ldxr(v10);
              v12 = v11 - 1;
            }
            while (__stlxr(v12, v10));
            if (!v12)
              (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
          }
        }
        ++v6;
      }
      while (v6 != v7);
      v13 = (uint64_t *)*((_QWORD *)a2 + 5);
      v14 = (uint64_t *)*((_QWORD *)a2 + 6);
      while (v13 != v14)
      {
        v15 = *v13;
        v16 = *(_DWORD *)(*v13 + 8);
        if (v16 == 3)
        {
          pxrInternal__aapl__pxrReserved__::converterUtils::Asset::getGeomPath(v46, (uint64_t)&v33);
          if (v34 < 0)
            operator delete(v33);
          sub_20C696CA8(&v31, (uint64_t *)&v43);
          pxrInternal__aapl__pxrReserved__::XpcConverter::createPointCloud(v5, v15, &v31);
          v17 = v32;
          if (v32)
          {
            v21 = (unsigned int *)(v32 + 8);
            do
            {
              v22 = __ldxr(v21);
              v20 = --v22 == 0;
            }
            while (__stlxr(v22, v21));
            goto LABEL_33;
          }
        }
        else if (v16 == 4)
        {
          pxrInternal__aapl__pxrReserved__::converterUtils::Asset::getGeomPath(v46, (uint64_t)&v37);
          if (v38 < 0)
            operator delete(v37);
          sub_20C696CA8(&v35, (uint64_t *)&v43);
          pxrInternal__aapl__pxrReserved__::XpcConverter::createMesh(v5, v15, &v35);
          v17 = v36;
          if (v36)
          {
            v18 = (unsigned int *)(v36 + 8);
            do
            {
              v19 = __ldxr(v18);
              v20 = --v19 == 0;
            }
            while (__stlxr(v19, v18));
LABEL_33:
            if (v20)
              (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
          }
        }
        ++v13;
      }
    }
    v23 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20C39A7A8((uint64_t *)&v43);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetRootLayer(v23, &v29);
    v24 = v30;
    if (v30)
    {
      if (*(_BYTE *)(sub_20BEB47BC(&v30) + 14))
        v24 = v29;
      else
        v24 = 0;
    }
    *a3 = v24;
    sub_20BF1DD04(a3);
    v25 = v30;
    if (v30)
    {
      v26 = (unsigned int *)(v30 + 8);
      do
      {
        v27 = __ldxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
        (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
    }
    sub_20C455C74(&v43);
    if (v51 < 0)
      operator delete(v50);
    if (v49 < 0)
      operator delete(v48);
    if (v47 < 0)
      operator delete(v46[1]);
    return sub_20C455C74(v46);
  }
  else
  {
    *a3 = 0;
  }
  return this;
}

void sub_20C7A5EDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  sub_20C7A5FCC(v32 - 144);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20C7A5FCC(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return sub_20C455C74((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)a1);
}

char *sub_20C7A601C(char *__dst, __int128 *a2)
{
  __int128 v3;
  unsigned int *v4;
  unsigned int v5;
  int v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v3;
  }
  v7 = 1;
  v8 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v9);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v10);
  v11 = 0;
  *(_QWORD *)pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(__dst + 24), (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7) = off_24C53DB40;
  if ((v11 & 7) != 0)
  {
    v4 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  if (v8)
    sub_20C35C614(v8);
  return __dst;
}

void sub_20C7A6108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_20C35C2E0((uint64_t)&a9);
  if (*(char *)(v9 + 23) < 0)
    operator delete(*(void **)v9);
  _Unwind_Resume(a1);
}

void sub_20C7A612C(unint64_t *a1, unint64_t a2)
{
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;

  v3 = a1[4];
  if (!v3)
  {
    if (!a2)
      return;
    v7 = sub_20BF5AF1C((uint64_t)a1, a2);
    goto LABEL_12;
  }
  if (a1[3])
    v4 = a1;
  else
    v4 = (unint64_t *)(v3 - 8);
  if (*v4 < a2)
  {
    v5 = *a1;
    v6 = sub_20BF5AF1C((uint64_t)a1, a2);
    v7 = v6;
    if (v5)
    {
      v8 = 0;
      do
      {
        v9 = (char *)v6 + v8;
        v10 = *(_QWORD *)(v3 + v8);
        *((_DWORD *)v9 + 2) = *(_DWORD *)(v3 + v8 + 8);
        *(_QWORD *)v9 = v10;
        v8 += 12;
      }
      while (12 * v5 != v8);
    }
LABEL_12:
    sub_20BF5618C((uint64_t)a1);
    a1[4] = (unint64_t)v7;
  }
}

void sub_20C7A61D8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int v21;
  _QWORD v22[4];
  char v23;

  if (!*(_DWORD *)(a1 + 8))
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)(a1 + 24))
      goto LABEL_14;
    v5 = *(_QWORD *)(a1 + 32);
    if (!v5)
      goto LABEL_10;
    v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1)
      goto LABEL_14;
    v5 = *(_QWORD *)(a1 + 32);
    if (v5)
    {
      if (*(_QWORD *)(a1 + 24))
        v7 = (uint64_t *)a1;
      else
        v7 = (uint64_t *)(v5 - 8);
      v8 = *v7;
    }
    else
    {
LABEL_10:
      v8 = 0;
    }
    if (v4 != v8)
    {
      v9 = *a2;
      v10 = v5 + 12 * v4;
      *(_DWORD *)(v10 + 8) = *((_DWORD *)a2 + 2);
      *(_QWORD *)v10 = v9;
LABEL_13:
      ++*(_QWORD *)a1;
      return;
    }
LABEL_14:
    v11 = *(uint64_t **)(a1 + 32);
    v12 = 1;
    do
    {
      v13 = v12;
      v12 *= 2;
    }
    while (v13 < v4 + 1);
    v14 = sub_20BF5AF1C(a1, v13);
    v15 = v14;
    if (v4)
    {
      v16 = 12 * v4;
      v17 = v14;
      do
      {
        v18 = *v11;
        *((_DWORD *)v17 + 2) = *((_DWORD *)v11 + 2);
        *v17 = v18;
        v17 = (_QWORD *)((char *)v17 + 12);
        v11 = (uint64_t *)((char *)v11 + 12);
        v16 -= 12;
      }
      while (v16);
    }
    v19 = *a2;
    v20 = (char *)v14 + 12 * v4;
    *((_DWORD *)v20 + 2) = *((_DWORD *)a2 + 2);
    *(_QWORD *)v20 = v19;
    sub_20BF5618C(a1);
    *(_QWORD *)(a1 + 32) = v15;
    goto LABEL_13;
  }
  v22[0] = "vt/array.h";
  v22[1] = "emplace_back";
  v22[2] = 433;
  v22[3] = "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::emplace_back(Args "
           "&&...) [T = pxrInternal__aapl__pxrReserved__::GfVec3f, Args = <pxrInternal__aapl__pxrReserved__::GfVec3f>]";
  v23 = 0;
  if (*(_DWORD *)(a1 + 12))
  {
    if (*(_DWORD *)(a1 + 16))
      v21 = 4;
    else
      v21 = 3;
  }
  else
  {
    v21 = 2;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v22, 1, (pxrInternal__aapl__pxrReserved__ *)"Array rank %u != 1", v21);
}

void sub_20C7A636C(unint64_t *a1, unint64_t a2)
{
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t i;

  v3 = a1[4];
  if (!v3)
  {
    if (!a2)
      return;
    v7 = sub_20BF588C8((uint64_t)a1, a2);
    goto LABEL_12;
  }
  if (a1[3])
    v4 = a1;
  else
    v4 = (unint64_t *)(v3 - 8);
  if (*v4 < a2)
  {
    v5 = *a1;
    v6 = sub_20BF588C8((uint64_t)a1, a2);
    v7 = v6;
    if (v5)
    {
      for (i = 0; i != v5; ++i)
        v6[i] = *(_QWORD *)(v3 + i * 8);
    }
LABEL_12:
    sub_20BF5618C((uint64_t)a1);
    a1[4] = (unint64_t)v7;
  }
}

void sub_20C7A6404(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  _QWORD v18[4];
  char v19;

  if (!*(_DWORD *)(a1 + 8))
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)(a1 + 24))
      goto LABEL_14;
    v5 = *(_QWORD *)(a1 + 32);
    if (!v5)
      goto LABEL_10;
    v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1)
      goto LABEL_14;
    v5 = *(_QWORD *)(a1 + 32);
    if (v5)
    {
      if (*(_QWORD *)(a1 + 24))
        v7 = (uint64_t *)a1;
      else
        v7 = (uint64_t *)(v5 - 8);
      v8 = *v7;
    }
    else
    {
LABEL_10:
      v8 = 0;
    }
    if (v4 != v8)
    {
      *(_QWORD *)(v5 + 8 * v4) = *a2;
LABEL_13:
      ++*(_QWORD *)a1;
      return;
    }
LABEL_14:
    v9 = *(uint64_t **)(a1 + 32);
    v10 = 1;
    do
    {
      v11 = v10;
      v10 *= 2;
    }
    while (v11 < v4 + 1);
    v12 = sub_20BF588C8(a1, v11);
    v13 = v12;
    if (v4)
    {
      v14 = 8 * v4;
      v15 = v12;
      do
      {
        v16 = *v9++;
        *v15++ = v16;
        v14 -= 8;
      }
      while (v14);
    }
    v12[v4] = *a2;
    sub_20BF5618C(a1);
    *(_QWORD *)(a1 + 32) = v13;
    goto LABEL_13;
  }
  v18[0] = "vt/array.h";
  v18[1] = "emplace_back";
  v18[2] = 433;
  v18[3] = "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>::emplace_back(Args "
           "&&...) [T = pxrInternal__aapl__pxrReserved__::GfVec2f, Args = <pxrInternal__aapl__pxrReserved__::GfVec2f>]";
  v19 = 0;
  if (*(_DWORD *)(a1 + 12))
  {
    if (*(_DWORD *)(a1 + 16))
      v17 = 4;
    else
      v17 = 3;
  }
  else
  {
    v17 = 2;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Array rank %u != 1", v17);
}

uint64_t sub_20C7A6568(uint64_t a1, uint64_t *a2)
{
  *(_QWORD *)a1 = 0;
  pxrInternal__aapl__pxrReserved__::converterUtils::makeValidIdentifier(a2, (std::string *)(a1 + 8));
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return a1;
}

void sub_20C7A65A4(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v1;

  sub_20C455C74(v1);
  _Unwind_Resume(a1);
}

void sub_20C7A65B8(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20C7A65B8(a1, *a2);
    sub_20C7A65B8(a1, a2[1]);
    sub_20C7A6600((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_20C7A6600(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::~UsdShadeMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t *sub_20C7A663C(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)sub_20BDDE084((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    sub_20C7A66E4((uint64_t)a1, a4, (uint64_t)v10);
    sub_20BDDE1B4(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_20C7A6870((uint64_t)v10, 0);
  }
  return v7;
}

char *sub_20C7A66E4@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  char *result;
  __int128 *v8;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v8 = *a2;
  result = sub_20C7A6760(v6 + 32, &v8);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20C7A6748(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C7A6870(v1, 0);
  _Unwind_Resume(a1);
}

char *sub_20C7A6760(char *__dst, __int128 **a2)
{
  __int128 *v3;
  __int128 v4;
  unsigned int *v5;
  unsigned int v6;
  int v8;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v9;
  int v10;
  int v11;
  uint64_t v12;

  v3 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)v3, *((_QWORD *)v3 + 1));
  }
  else
  {
    v4 = *v3;
    *((_QWORD *)__dst + 2) = *((_QWORD *)v3 + 2);
    *(_OWORD *)__dst = v4;
  }
  v8 = 1;
  v9 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v10);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v11);
  v12 = 0;
  *(_QWORD *)pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(__dst + 24), (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v8) = off_24C53D820;
  if ((v12 & 7) != 0)
  {
    v5 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
  sub_20BFD265C(&v10);
  if (v9)
    sub_20C35C614(v9);
  return __dst;
}

void sub_20C7A684C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_20C35C2E0((uint64_t)&a9);
  if (*(char *)(v9 + 23) < 0)
    operator delete(*(void **)v9);
  _Unwind_Resume(a1);
}

void sub_20C7A6870(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C7A6600((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

_BYTE *serialize::Serializer::Serializer(_BYTE *this)
{
  *this = 1;
  return this;
}

{
  *this = 1;
  return this;
}

char *serialize::Serializer::load(xpc_object_t *this)
{
  char *v2;
  _BYTE *v3;
  _BYTE *v4;
  _BYTE *v5;
  int v7;
  int v8;
  int v9;
  void *__p[2];
  uint64_t v11;

  *(_BYTE *)this = 0;
  switch(xpc_dictionary_get_int64(this[1], "type"))
  {
    case 1u:
      v2 = (char *)operator new(0x40uLL);
      sub_20BDDC0E4(__p, "");
      *(_QWORD *)v2 = off_24C54B448;
      *((_DWORD *)v2 + 2) = 1;
      v3 = v2 + 16;
      if ((SHIBYTE(v11) & 0x80000000) == 0)
      {
        *(_OWORD *)v3 = *(_OWORD *)__p;
        *((_QWORD *)v2 + 4) = v11;
        *((_QWORD *)v2 + 6) = 0;
        *((_QWORD *)v2 + 7) = 0;
        *((_QWORD *)v2 + 5) = 0;
        goto LABEL_16;
      }
      sub_20BDDBFAC(v3, __p[0], (unint64_t)__p[1]);
      v7 = SHIBYTE(v11);
      *((_QWORD *)v2 + 6) = 0;
      *((_QWORD *)v2 + 7) = 0;
      *((_QWORD *)v2 + 5) = 0;
      if ((v7 & 0x80000000) == 0)
        goto LABEL_16;
      goto LABEL_15;
    case 2u:
      v2 = (char *)operator new(0x68uLL);
      sub_20C7A79A4((uint64_t)v2);
      goto LABEL_16;
    case 3u:
      v2 = (char *)operator new(0x88uLL);
      sub_20BDDC0E4(__p, "");
      *(_QWORD *)v2 = off_24C54B448;
      *((_DWORD *)v2 + 2) = 3;
      v4 = v2 + 16;
      if ((SHIBYTE(v11) & 0x80000000) == 0)
      {
        *(_OWORD *)v4 = *(_OWORD *)__p;
        *((_QWORD *)v2 + 4) = v11;
        *((_QWORD *)v2 + 6) = 0;
        *((_QWORD *)v2 + 7) = 0;
        *((_QWORD *)v2 + 5) = 0;
        *(_QWORD *)v2 = off_24C54B4D0;
        *((_OWORD *)v2 + 4) = 0u;
        *((_OWORD *)v2 + 5) = 0u;
        *((_OWORD *)v2 + 6) = 0u;
        *((_OWORD *)v2 + 7) = 0u;
        *((_QWORD *)v2 + 16) = 0;
        goto LABEL_16;
      }
      sub_20BDDBFAC(v4, __p[0], (unint64_t)__p[1]);
      v8 = SHIBYTE(v11);
      *((_QWORD *)v2 + 6) = 0;
      *((_QWORD *)v2 + 7) = 0;
      *((_QWORD *)v2 + 5) = 0;
      *(_QWORD *)v2 = off_24C54B4D0;
      *((_OWORD *)v2 + 4) = 0u;
      *((_OWORD *)v2 + 5) = 0u;
      *((_OWORD *)v2 + 6) = 0u;
      *((_OWORD *)v2 + 7) = 0u;
      *((_QWORD *)v2 + 16) = 0;
      if (v8 < 0)
        goto LABEL_15;
      goto LABEL_16;
    case 4u:
      v2 = (char *)operator new(0x128uLL);
      sub_20BDDC0E4(__p, "");
      sub_20C7A77D4((uint64_t)v2, (__int128 *)__p);
      goto LABEL_14;
    case 5u:
      v2 = (char *)operator new(0x88uLL);
      sub_20BDDC0E4(__p, "");
      sub_20C7A7878((uint64_t)v2, (__int128 *)__p);
      goto LABEL_14;
    case 6u:
      v2 = (char *)operator new(0x40uLL);
      sub_20BDDC0E4(__p, "");
      *(_QWORD *)v2 = off_24C54B448;
      *((_DWORD *)v2 + 2) = 6;
      v5 = v2 + 16;
      if (SHIBYTE(v11) < 0)
      {
        sub_20BDDBFAC(v5, __p[0], (unint64_t)__p[1]);
        v9 = SHIBYTE(v11);
        *((_QWORD *)v2 + 6) = 0;
        *((_QWORD *)v2 + 7) = 0;
        *((_QWORD *)v2 + 5) = 0;
        *(_QWORD *)v2 = &unk_24C54B5A8;
        if (v9 < 0)
LABEL_15:
          operator delete(__p[0]);
      }
      else
      {
        *(_OWORD *)v5 = *(_OWORD *)__p;
        *((_QWORD *)v2 + 4) = v11;
        *((_QWORD *)v2 + 6) = 0;
        *((_QWORD *)v2 + 7) = 0;
        *((_QWORD *)v2 + 5) = 0;
        *(_QWORD *)v2 = &unk_24C54B5A8;
      }
LABEL_16:
      (*(void (**)(char *, xpc_object_t *))(*(_QWORD *)v2 + 24))(v2, this);
      return v2;
    case 7u:
      v2 = (char *)operator new(0x68uLL);
      sub_20C7A7A84((uint64_t)v2, 1);
      goto LABEL_16;
    case 8u:
      v2 = (char *)operator new(0xB0uLL);
      sub_20BDDC0E4(__p, "");
      sub_20C7A7B60((uint64_t)v2, 1, (__int128 *)__p);
LABEL_14:
      if (SHIBYTE(v11) < 0)
        goto LABEL_15;
      goto LABEL_16;
    default:
      return 0;
  }
}

void sub_20C7A6BD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);
  operator delete(v15);
  _Unwind_Resume(a1);
}

uint64_t serialize::Serializer::save(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 8) = xpc_dictionary_create(0, 0, 0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, a1);
  return *(_QWORD *)(a1 + 8);
}

void serialize::Serializer::sync(unsigned __int8 *a1, const char *a2, int *a3)
{
  int v3;
  void *v4;

  v3 = *a1;
  v4 = (void *)*((_QWORD *)a1 + 1);
  if (v3)
    xpc_dictionary_set_int64(v4, a2, *a3);
  else
    *a3 = xpc_dictionary_get_int64(v4, a2);
}

{
  int v3;
  void *v4;

  v3 = *a1;
  v4 = (void *)*((_QWORD *)a1 + 1);
  if (v3)
    xpc_dictionary_set_int64(v4, a2, *a3);
  else
    *a3 = xpc_dictionary_get_int64(v4, a2);
}

{
  int v3;
  void *v4;

  v3 = *a1;
  v4 = (void *)*((_QWORD *)a1 + 1);
  if (v3)
    xpc_dictionary_set_int64(v4, a2, *a3);
  else
    *a3 = xpc_dictionary_get_int64(v4, a2);
}

void serialize::Serializer::sync(unsigned __int8 *a1, const char *a2, const char *a3)
{
  int v3;
  void *v4;

  v3 = *a1;
  v4 = (void *)*((_QWORD *)a1 + 1);
  if (!v3)
  {
    xpc_dictionary_get_string(v4, a2);
    JUMPOUT(0x212B929D0);
  }
  if (a3[23] < 0)
    a3 = *(const char **)a3;
  xpc_dictionary_set_string(v4, a2, a3);
}

float serialize::Serializer::sync(serialize::Serializer *this, const char *a2, float *a3)
{
  int v4;
  void *v5;
  float result;

  v4 = *(unsigned __int8 *)this;
  v5 = (void *)*((_QWORD *)this + 1);
  if (v4)
  {
    xpc_dictionary_set_double(v5, a2, *a3);
  }
  else
  {
    result = xpc_dictionary_get_double(v5, a2);
    *a3 = result;
  }
  return result;
}

void serialize::Serializer::sync(serialize::Serializer *this, const char *a2, unint64_t *a3)
{
  int v3;
  void *v4;

  v3 = *(unsigned __int8 *)this;
  v4 = (void *)*((_QWORD *)this + 1);
  if (v3)
    xpc_dictionary_set_uint64(v4, a2, *a3);
  else
    *a3 = xpc_dictionary_get_uint64(v4, a2);
}

void serialize::Serializer::sync(serialize::Serializer *this, const char *a2, int *a3)
{
  int v3;
  void *v4;

  v3 = *(unsigned __int8 *)this;
  v4 = (void *)*((_QWORD *)this + 1);
  if (v3)
    xpc_dictionary_set_uint64(v4, a2, *a3);
  else
    *a3 = xpc_dictionary_get_uint64(v4, a2);
}

void serialize::Serializer::sync(serialize::Serializer *a1, char *a2, float *a3)
{
  std::string *v6;
  __int128 v7;
  void **v8;
  std::string *v9;
  __int128 v10;
  void **v11;
  std::string *v12;
  __int128 v13;
  void **v14;
  std::string v15;
  void *__p[2];
  int64_t v17;

  sub_20BDDC0E4(&v15, a2);
  v6 = std::string::append(&v15, ":x");
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v17 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (v17 >= 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  serialize::Serializer::sync(a1, (const char *)v8, a3);
  if (SHIBYTE(v17) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  sub_20BDDC0E4(&v15, a2);
  v9 = std::string::append(&v15, ":y");
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v17 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (v17 >= 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  serialize::Serializer::sync(a1, (const char *)v11, a3 + 1);
  if (SHIBYTE(v17) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  sub_20BDDC0E4(&v15, a2);
  v12 = std::string::append(&v15, ":z");
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v17 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (v17 >= 0)
    v14 = __p;
  else
    v14 = (void **)__p[0];
  serialize::Serializer::sync(a1, (const char *)v14, a3 + 2);
  if (SHIBYTE(v17) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
}

{
  std::string *v6;
  __int128 v7;
  void **v8;
  std::string *v9;
  __int128 v10;
  void **v11;
  std::string *v12;
  __int128 v13;
  void **v14;
  std::string *v15;
  __int128 v16;
  void **v17;
  std::string v18;
  void *__p[2];
  int64_t v20;

  sub_20BDDC0E4(&v18, a2);
  v6 = std::string::append(&v18, ":x");
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v20 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (v20 >= 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  serialize::Serializer::sync(a1, (const char *)v8, a3);
  if (SHIBYTE(v20) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  sub_20BDDC0E4(&v18, a2);
  v9 = std::string::append(&v18, ":y");
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v20 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (v20 >= 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  serialize::Serializer::sync(a1, (const char *)v11, a3 + 1);
  if (SHIBYTE(v20) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  sub_20BDDC0E4(&v18, a2);
  v12 = std::string::append(&v18, ":z");
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v20 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (v20 >= 0)
    v14 = __p;
  else
    v14 = (void **)__p[0];
  serialize::Serializer::sync(a1, (const char *)v14, a3 + 2);
  if (SHIBYTE(v20) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  sub_20BDDC0E4(&v18, a2);
  v15 = std::string::append(&v18, ":w");
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v20 = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (v20 >= 0)
    v17 = __p;
  else
    v17 = (void **)__p[0];
  serialize::Serializer::sync(a1, (const char *)v17, a3 + 3);
  if (SHIBYTE(v20) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
}

void sub_20C7A6F5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void sub_20C7A71A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void serialize::Serializer::sync(uint64_t a1, const char *a2, uint64_t a3)
{
  char *data;
  size_t length;

  if (*(_BYTE *)a1)
  {
    xpc_dictionary_set_data(*(xpc_object_t *)(a1 + 8), a2, *(const void **)a3, *(_QWORD *)(a3 + 8) - *(_QWORD *)a3);
  }
  else
  {
    length = 0;
    data = (char *)xpc_dictionary_get_data(*(xpc_object_t *)(a1 + 8), a2, &length);
    sub_20BE8B37C((char *)a3, data, (uint64_t)&data[length & 0xFFFFFFFFFFFFFFFCLL], (uint64_t)length >> 2);
  }
}

{
  char *data;
  size_t length;

  if (*(_BYTE *)a1)
  {
    xpc_dictionary_set_data(*(xpc_object_t *)(a1 + 8), a2, *(const void **)a3, *(_QWORD *)(a3 + 8) - *(_QWORD *)a3);
  }
  else
  {
    length = 0;
    data = (char *)xpc_dictionary_get_data(*(xpc_object_t *)(a1 + 8), a2, &length);
    sub_20BE8B37C((char *)a3, data, (uint64_t)&data[length & 0xFFFFFFFFFFFFFFFCLL], (uint64_t)length >> 2);
  }
}

{
  uint64_t *data;
  size_t length;

  if (*(_BYTE *)a1)
  {
    xpc_dictionary_set_data(*(xpc_object_t *)(a1 + 8), a2, *(const void **)a3, *(_QWORD *)(a3 + 8) - *(_QWORD *)a3);
  }
  else
  {
    length = 0;
    data = (uint64_t *)xpc_dictionary_get_data(*(xpc_object_t *)(a1 + 8), a2, &length);
    sub_20C7A7C50((_QWORD *)a3, data, (uint64_t *)((char *)data + 12 * (length / 0xC)), length / 0xC);
  }
}

{
  uint64_t *data;
  size_t length;

  if (*(_BYTE *)a1)
  {
    xpc_dictionary_set_data(*(xpc_object_t *)(a1 + 8), a2, *(const void **)a3, *(_QWORD *)(a3 + 8) - *(_QWORD *)a3);
  }
  else
  {
    length = 0;
    data = (uint64_t *)xpc_dictionary_get_data(*(xpc_object_t *)(a1 + 8), a2, &length);
    sub_20C7A7E0C((_QWORD *)a3, data, (uint64_t *)((char *)data + (length & 0xFFFFFFFFFFFFFFF8)), (uint64_t)length >> 3);
  }
}

void serialize::Serializer::sync(xpc_object_t *a1, char *a2, void **a3)
{
  std::string *v6;
  __int128 v7;
  void **v8;
  size_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  std::string::size_type size;
  char *v14;
  void *v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  std::string::size_type *v20;
  char *v21;
  char *v22;
  std::string::size_type v23;
  xpc_object_t v24;
  xpc_object_t value;
  size_t v26;
  xpc_object_t v27;
  char *v28;
  char *v29;
  unint64_t v30;
  char **v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char **v38;
  char *v39;
  char *v40;
  char *v41;
  char *key;
  std::string v43;
  void *__p[2];
  char *v45;
  unint64_t v46;

  v46 = ((_BYTE *)a3[1] - (_BYTE *)*a3) >> 3;
  sub_20BDDC0E4(&v43, a2);
  v6 = std::string::append(&v43, ":count");
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v45 = (char *)v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v45) >= 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  serialize::Serializer::sync((serialize::Serializer *)a1, (const char *)v8, &v46);
  if (SHIBYTE(v45) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  v9 = v46;
  if (v46)
  {
    if (*(_BYTE *)a1)
    {
      key = a2;
      __p[0] = 0;
      __p[1] = 0;
      v45 = 0;
      sub_20BE8BBC4(__p, v46);
      v10 = (char *)*a3;
      v11 = (char *)a3[1];
      if (*a3 != v11)
      {
        do
        {
          v12 = *(_QWORD *)v10;
          v43.__r_.__value_.__s.__data_[0] = 1;
          v43.__r_.__value_.__l.__size_ = (std::string::size_type)xpc_dictionary_create(0, 0, 0);
          (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v12 + 24))(v12, &v43);
          size = v43.__r_.__value_.__l.__size_;
          v14 = (char *)__p[1];
          if (__p[1] >= v45)
          {
            v16 = ((char *)__p[1] - (char *)__p[0]) >> 3;
            if ((unint64_t)(v16 + 1) >> 61)
              sub_20BDDF694();
            v17 = (v45 - (char *)__p[0]) >> 2;
            if (v17 <= v16 + 1)
              v17 = v16 + 1;
            if ((unint64_t)(v45 - (char *)__p[0]) >= 0x7FFFFFFFFFFFFFF8)
              v18 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v18 = v17;
            if (v18)
              v19 = (char *)sub_20BDDF6A8((uint64_t)&v45, v18);
            else
              v19 = 0;
            v20 = (std::string::size_type *)&v19[8 * v16];
            *v20 = size;
            v15 = v20 + 1;
            v22 = (char *)__p[0];
            v21 = (char *)__p[1];
            if (__p[1] != __p[0])
            {
              do
              {
                v23 = *((_QWORD *)v21 - 1);
                v21 -= 8;
                *--v20 = v23;
              }
              while (v21 != v22);
              v21 = (char *)__p[0];
            }
            __p[0] = v20;
            __p[1] = v15;
            v45 = &v19[8 * v18];
            if (v21)
              operator delete(v21);
          }
          else
          {
            *(_QWORD *)__p[1] = v43.__r_.__value_.__l.__size_;
            v15 = v14 + 8;
          }
          __p[1] = v15;
          v10 += 8;
        }
        while (v10 != v11);
      }
      v24 = xpc_array_create((xpc_object_t *)__p[0], v9);
      xpc_dictionary_set_value(a1[1], key, v24);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
    else
    {
      value = xpc_dictionary_get_value(a1[1], a2);
      sub_20BE8BBC4(a3, v9);
      v26 = 0;
      do
      {
        v27 = xpc_array_get_value(value, v26);
        LOBYTE(__p[0]) = 1;
        __p[1] = v27;
        v28 = serialize::Serializer::load(__p);
        if (v28)
        {
          v29 = v28;
          v31 = (char **)a3[1];
          v30 = (unint64_t)a3[2];
          if ((unint64_t)v31 >= v30)
          {
            v33 = ((char *)v31 - (_BYTE *)*a3) >> 3;
            if ((unint64_t)(v33 + 1) >> 61)
              sub_20BDDF694();
            v34 = v30 - (_QWORD)*a3;
            v35 = v34 >> 2;
            if (v34 >> 2 <= (unint64_t)(v33 + 1))
              v35 = v33 + 1;
            if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
              v36 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v36 = v35;
            if (v36)
              v37 = (char *)sub_20BDDF6A8((uint64_t)(a3 + 2), v36);
            else
              v37 = 0;
            v38 = (char **)&v37[8 * v33];
            *v38 = v29;
            v32 = (char *)(v38 + 1);
            v40 = (char *)*a3;
            v39 = (char *)a3[1];
            if (v39 != *a3)
            {
              do
              {
                v41 = (char *)*((_QWORD *)v39 - 1);
                v39 -= 8;
                *--v38 = v41;
              }
              while (v39 != v40);
              v39 = (char *)*a3;
            }
            *a3 = v38;
            a3[1] = v32;
            a3[2] = &v37[8 * v36];
            if (v39)
              operator delete(v39);
          }
          else
          {
            *v31 = v28;
            v32 = (char *)(v31 + 1);
          }
          a3[1] = v32;
        }
        ++v26;
      }
      while (v26 != v9);
    }
  }
}

void sub_20C7A7780(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C7A77D4(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;

  *(_QWORD *)a1 = off_24C54B448;
  *(_DWORD *)(a1 + 8) = 4;
  v3 = a1 + 16;
  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC((_BYTE *)v3, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(v3 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
  }
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)a1 = &off_24C54B518;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 252) = 0u;
  return a1;
}

uint64_t sub_20C7A7878(uint64_t a1, __int128 *a2)
{
  _BYTE *v4;
  int v5;
  _BYTE *v6;
  __int128 v7;
  void *__p[2];
  uint64_t v10;

  sub_20BDDC0E4(__p, "");
  *(_QWORD *)a1 = off_24C54B448;
  *(_DWORD *)(a1 + 8) = 5;
  v4 = (_BYTE *)(a1 + 16);
  if (SHIBYTE(v10) < 0)
  {
    sub_20BDDBFAC(v4, __p[0], (unint64_t)__p[1]);
    v5 = SHIBYTE(v10);
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    if (v5 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)v4 = *(_OWORD *)__p;
    *(_QWORD *)(a1 + 32) = v10;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 40) = 0;
  }
  *(_QWORD *)a1 = off_24C54B560;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  v6 = (_BYTE *)(a1 + 88);
  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(v6, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v7 = *a2;
    *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v6 = v7;
  }
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  return a1;
}

void sub_20C7A7968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  serialize::Prim *v15;
  void **v16;
  void *v18;

  v18 = *v16;
  if (*v16)
  {
    *((_QWORD *)v15 + 9) = v18;
    operator delete(v18);
  }
  serialize::Prim::~Prim(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_20C7A79A4(uint64_t a1)
{
  _BYTE *v2;
  int v3;
  void *__p[2];
  uint64_t v6;

  sub_20BDDC0E4(__p, "");
  *(_QWORD *)a1 = off_24C54B448;
  *(_DWORD *)(a1 + 8) = 2;
  v2 = (_BYTE *)(a1 + 16);
  if (SHIBYTE(v6) < 0)
  {
    sub_20BDDBFAC(v2, __p[0], (unint64_t)__p[1]);
    v3 = SHIBYTE(v6);
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    if (v3 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)v2 = *(_OWORD *)__p;
    *(_QWORD *)(a1 + 32) = v6;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 40) = 0;
  }
  *(_QWORD *)a1 = off_24C54B488;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 88) = 1008981770;
  *(_DWORD *)(a1 + 92) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 100) = 24;
  return a1;
}

void sub_20C7A7A68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C7A7A84(uint64_t a1, int a2)
{
  _BYTE *v4;
  int v5;
  void *__p[2];
  uint64_t v8;

  sub_20BDDC0E4(__p, "");
  *(_QWORD *)a1 = off_24C54B448;
  *(_DWORD *)(a1 + 8) = 7;
  v4 = (_BYTE *)(a1 + 16);
  if (SHIBYTE(v8) < 0)
  {
    sub_20BDDBFAC(v4, __p[0], (unint64_t)__p[1]);
    v5 = SHIBYTE(v8);
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    if (v5 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)v4 = *(_OWORD *)__p;
    *(_QWORD *)(a1 + 32) = v8;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 40) = 0;
  }
  *(_QWORD *)a1 = off_24C54B5F0;
  *(_DWORD *)(a1 + 64) = a2;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = 0;
  return a1;
}

void sub_20C7A7B44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C7A7B60(uint64_t a1, int a2, __int128 *a3)
{
  uint64_t v5;
  __int128 v6;

  *(_QWORD *)a1 = off_24C54B448;
  *(_DWORD *)(a1 + 8) = 8;
  v5 = a1 + 16;
  if (*((char *)a3 + 23) < 0)
  {
    sub_20BDDBFAC((_BYTE *)v5, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v6 = *a3;
    *(_QWORD *)(v5 + 16) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v5 = v6;
  }
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)a1 = off_24C54B638;
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)(a1 + 68) = _Q0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 64) = a2;
  *(_QWORD *)(a1 + 92) = 0;
  *(_QWORD *)(a1 + 84) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  sub_20BDDC0E4((_QWORD *)(a1 + 152), "st");
  return a1;
}

void sub_20C7A7C1C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 151) < 0)
    operator delete(*(void **)(v1 + 128));
  if (*(char *)(v1 + 127) < 0)
    operator delete(*v2);
  serialize::Prim::~Prim((serialize::Prim *)v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C7A7C50(_QWORD *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  uint64_t v8;
  _DWORD *result;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _DWORD **v13;
  _DWORD *v14;
  char *v15;
  _DWORD *v16;
  _DWORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _DWORD *v23;
  int64_t v24;
  _DWORD *v25;
  uint64_t v26;

  v6 = a2;
  v8 = a1[2];
  result = (_DWORD *)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)result) >> 2) < a4)
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x1555555555555555)
      sub_20BDDF694();
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 2);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0xAAAAAAAAAAAAAAALL)
      v12 = 0x1555555555555555;
    else
      v12 = v11;
    sub_20C211DE0(a1, v12);
    v14 = (_DWORD *)a1[1];
    v13 = (_DWORD **)(a1 + 1);
    result = v14;
    v15 = (char *)v14;
    if (v6 != a3)
    {
      v15 = (char *)result;
      do
      {
        *(_QWORD *)v15 = *v6;
        *((_DWORD *)v15 + 2) = *((_DWORD *)v6 + 2);
        v15 += 12;
        v6 = (uint64_t *)((char *)v6 + 12);
      }
      while (v6 != a3);
    }
LABEL_26:
    v24 = v15 - (char *)result;
    goto LABEL_27;
  }
  v17 = (_DWORD *)a1[1];
  v13 = (_DWORD **)(a1 + 1);
  v16 = v17;
  v18 = 0xAAAAAAAAAAAAAAABLL * (v17 - result);
  if (v18 >= a4)
  {
    v15 = (char *)result;
    if (a2 != a3)
    {
      v25 = result;
      do
      {
        v26 = *v6;
        v25[2] = *((_DWORD *)v6 + 2);
        *(_QWORD *)v25 = v26;
        v25 += 3;
        v6 = (uint64_t *)((char *)v6 + 12);
        v15 += 12;
      }
      while (v6 != a3);
    }
    goto LABEL_26;
  }
  v19 = (uint64_t)a2 + 12 * v18;
  if (v16 != result)
  {
    v20 = 12 * v18;
    do
    {
      v21 = *v6;
      result[2] = *((_DWORD *)v6 + 2);
      *(_QWORD *)result = v21;
      result += 3;
      v6 = (uint64_t *)((char *)v6 + 12);
      v20 -= 12;
    }
    while (v20);
    result = *v13;
  }
  v22 = (char *)result;
  if ((uint64_t *)v19 != a3)
  {
    v22 = (char *)result;
    v23 = result;
    do
    {
      *(_QWORD *)v23 = *(_QWORD *)v19;
      v23[2] = *(_DWORD *)(v19 + 8);
      v22 += 12;
      v19 += 12;
      v23 += 3;
    }
    while ((uint64_t *)v19 != a3);
  }
  v24 = v22 - (char *)result;
LABEL_27:
  *v13 = (_DWORD *)((char *)result + v24);
  return result;
}

_QWORD *sub_20C7A7E0C(_QWORD *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  unint64_t v11;
  _QWORD **v12;
  _QWORD *v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _QWORD *v23;
  uint64_t v24;
  int64_t v25;
  _QWORD *v26;
  uint64_t v27;

  v6 = a2;
  v8 = a1[2];
  result = (_QWORD *)*a1;
  if (a4 > (v8 - (uint64_t)result) >> 3)
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 61)
      sub_20BDDF694();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    sub_20BDDF654(a1, v11);
    v13 = (_QWORD *)a1[1];
    v12 = (_QWORD **)(a1 + 1);
    result = v13;
    v14 = (char *)v13;
    if (v6 != a3)
    {
      v14 = (char *)result;
      do
      {
        v15 = *v6++;
        *(_QWORD *)v14 = v15;
        v14 += 8;
      }
      while (v6 != a3);
    }
LABEL_26:
    v25 = v14 - (char *)result;
    goto LABEL_27;
  }
  v17 = (_QWORD *)a1[1];
  v12 = (_QWORD **)(a1 + 1);
  v16 = v17;
  v18 = v17 - result;
  if (v18 >= a4)
  {
    v14 = (char *)result;
    if (a2 != a3)
    {
      v26 = result;
      do
      {
        v27 = *v6++;
        *v26++ = v27;
        v14 += 8;
      }
      while (v6 != a3);
    }
    goto LABEL_26;
  }
  v19 = &a2[v18];
  if (v16 != result)
  {
    v20 = 8 * v18;
    do
    {
      v21 = *v6++;
      *result++ = v21;
      v20 -= 8;
    }
    while (v20);
    result = *v12;
  }
  v22 = (char *)result;
  if (v19 != a3)
  {
    v22 = (char *)result;
    v23 = result;
    do
    {
      v24 = *v19++;
      *v23++ = v24;
      v22 += 8;
    }
    while (v19 != a3);
  }
  v25 = v22 - (char *)result;
LABEL_27:
  *v12 = (_QWORD *)((char *)result + v25);
  return result;
}

void serialize::Prim::~Prim(serialize::Prim *this)
{
  void *v2;

  *(_QWORD *)this = off_24C54B448;
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 39) < 0)
    operator delete(*((void **)this + 2));
}

{
  void *v1;

  serialize::Prim::~Prim(this);
  operator delete(v1);
}

uint64_t serialize::Prim::release(serialize::Prim *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t result;

  v2 = (uint64_t *)*((_QWORD *)this + 5);
  v3 = (uint64_t *)*((_QWORD *)this + 6);
  if (v2 == v3)
    return (*(uint64_t (**)(serialize::Prim *))(*(_QWORD *)this + 8))(this);
  do
  {
    v4 = *v2++;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  }
  while (v2 != v3);
  if (this)
    return (*(uint64_t (**)(serialize::Prim *))(*(_QWORD *)this + 8))(this);
  return result;
}

void serialize::Prim::serialize(serialize::Prim *this, serialize::Serializer *a2)
{
  serialize::Serializer::sync((unsigned __int8 *)a2, "type", (int *)this + 2);
  serialize::Serializer::sync((unsigned __int8 *)a2, "path", (const char *)this + 16);
  serialize::Serializer::sync((xpc_object_t *)a2, "children", (void **)this + 5);
}

void serialize::Prim::addChild(serialize::Prim *this, serialize::Prim *a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v6 = *((_QWORD *)this + 7);
  v4 = (char *)this + 56;
  v5 = v6;
  v7 = (_QWORD *)*((_QWORD *)v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    v9 = (void **)(v4 - 16);
    v10 = *((_QWORD *)v4 - 2);
    v11 = ((uint64_t)v7 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61)
      sub_20BDDF694();
    v12 = v5 - v10;
    v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
      v15 = (char *)sub_20BDDF6A8((uint64_t)v4, v14);
    else
      v15 = 0;
    v16 = &v15[8 * v11];
    v17 = &v15[8 * v14];
    *(_QWORD *)v16 = a2;
    v8 = v16 + 8;
    v19 = (char *)*((_QWORD *)this + 5);
    v18 = (char *)*((_QWORD *)this + 6);
    if (v18 != v19)
    {
      do
      {
        v20 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      v18 = (char *)*v9;
    }
    *((_QWORD *)this + 5) = v16;
    *((_QWORD *)this + 6) = v8;
    *((_QWORD *)this + 7) = v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v7 = a2;
    v8 = v7 + 1;
  }
  *((_QWORD *)this + 6) = v8;
}

void serialize::Stage::serialize(serialize::Stage *this, serialize::Serializer *a2)
{
  serialize::Prim::serialize(this, a2);
  serialize::Serializer::sync((unsigned __int8 *)a2, "defaultPrim", (const char *)this + 64);
  serialize::Serializer::sync(a2, "metersPerUnit", (float *)this + 22);
  serialize::Serializer::sync(a2, "startTimeCode", (int *)this + 23);
  serialize::Serializer::sync(a2, "endTimeCode", (int *)this + 24);
  serialize::Serializer::sync(a2, "timeCodesPerSecond", (int *)this + 25);
}

void serialize::PointCloud::serialize(serialize::PointCloud *this, serialize::Serializer *a2)
{
  serialize::Prim::serialize(this, a2);
  serialize::Serializer::sync((uint64_t)a2, "vertices", (uint64_t)this + 64);
  serialize::Serializer::sync((uint64_t)a2, "colors", (uint64_t)this + 88);
  serialize::Serializer::sync((unsigned __int8 *)a2, "materialPath", (const char *)this + 112);
}

void serialize::Mesh::serialize(serialize::Mesh *this, serialize::Serializer *a2)
{
  serialize::Prim::serialize(this, a2);
  serialize::Serializer::sync((uint64_t)a2, "faceVertexCounts", (uint64_t)this + 64);
  serialize::Serializer::sync((uint64_t)a2, "indices", (uint64_t)this + 88);
  serialize::Serializer::sync((uint64_t)a2, "uvIndices", (uint64_t)this + 112);
  serialize::Serializer::sync((uint64_t)a2, "normalIndices", (uint64_t)this + 136);
  serialize::Serializer::sync((uint64_t)a2, "vertices", (uint64_t)this + 160);
  serialize::Serializer::sync((uint64_t)a2, "normals", (uint64_t)this + 184);
  serialize::Serializer::sync((uint64_t)a2, "colors", (uint64_t)this + 208);
  serialize::Serializer::sync((uint64_t)a2, "uvs", (uint64_t)this + 232);
  serialize::Serializer::sync((unsigned __int8 *)a2, "normalInterpolation", (int *)this + 64);
  serialize::Serializer::sync((unsigned __int8 *)a2, "colorInterpolation", (int *)this + 65);
  serialize::Serializer::sync((unsigned __int8 *)a2, "uvInterpolation", (int *)this + 66);
  serialize::Serializer::sync((unsigned __int8 *)a2, "materialPath", (const char *)this + 272);
}

void serialize::Subset::serialize(serialize::Subset *this, serialize::Serializer *a2)
{
  serialize::Prim::serialize(this, a2);
  serialize::Serializer::sync((uint64_t)a2, "faces", (uint64_t)this + 64);
  serialize::Serializer::sync((unsigned __int8 *)a2, "name", (const char *)this + 88);
  serialize::Serializer::sync((unsigned __int8 *)a2, "materialPath", (const char *)this + 112);
}

void serialize::MapInput::serialize(serialize::MapInput *this, serialize::Serializer *a2)
{
  serialize::Prim::serialize(this, a2);
  serialize::Serializer::sync((unsigned __int8 *)a2, "inputName", (int *)this + 16);
  serialize::Serializer::sync(a2, "value", (float *)this + 17);
  serialize::Serializer::sync((unsigned __int8 *)a2, "channels", (const char *)this + 80);
}

void serialize::Shader::serialize(serialize::Shader *this, serialize::Serializer *a2)
{
  serialize::Prim::serialize(this, a2);
  serialize::Serializer::sync((unsigned __int8 *)a2, "inputName", (int *)this + 16);
  serialize::Serializer::sync(a2, "scale", (float *)this + 17);
  serialize::Serializer::sync(a2, "bias", (float *)this + 21);
  serialize::Serializer::sync((unsigned __int8 *)a2, "file", (const char *)this + 104);
  serialize::Serializer::sync((unsigned __int8 *)a2, "channels", (const char *)this + 128);
  serialize::Serializer::sync((unsigned __int8 *)a2, "texCoordSet", (const char *)this + 152);
}

void sub_20C7A849C(void **this)
{
  *this = off_24C54B488;
  if (*((char *)this + 87) < 0)
    operator delete(this[8]);
  serialize::Prim::~Prim((serialize::Prim *)this);
}

void sub_20C7A84D8(void **this)
{
  void *v2;

  *this = off_24C54B488;
  if (*((char *)this + 87) < 0)
    operator delete(this[8]);
  serialize::Prim::~Prim((serialize::Prim *)this);
  operator delete(v2);
}

void sub_20C7A8518(void **this)
{
  void *v2;
  void *v3;

  *this = off_24C54B4D0;
  if (*((char *)this + 135) < 0)
    operator delete(this[14]);
  v2 = this[11];
  if (v2)
  {
    this[12] = v2;
    operator delete(v2);
  }
  v3 = this[8];
  if (v3)
  {
    this[9] = v3;
    operator delete(v3);
  }
  serialize::Prim::~Prim((serialize::Prim *)this);
}

void sub_20C7A8574(void **this)
{
  void *v2;
  void *v3;
  void *v4;

  *this = off_24C54B4D0;
  if (*((char *)this + 135) < 0)
    operator delete(this[14]);
  v2 = this[11];
  if (v2)
  {
    this[12] = v2;
    operator delete(v2);
  }
  v3 = this[8];
  if (v3)
  {
    this[9] = v3;
    operator delete(v3);
  }
  serialize::Prim::~Prim((serialize::Prim *)this);
  operator delete(v4);
}

void sub_20C7A85D8(void **a1)
{
  void *v1;

  sub_20C7A87F8(a1);
  operator delete(v1);
}

void sub_20C7A85EC(void **this)
{
  void *v2;

  *this = off_24C54B560;
  if (*((char *)this + 135) < 0)
    operator delete(this[14]);
  if (*((char *)this + 111) < 0)
    operator delete(this[11]);
  v2 = this[8];
  if (v2)
  {
    this[9] = v2;
    operator delete(v2);
  }
  serialize::Prim::~Prim((serialize::Prim *)this);
}

void sub_20C7A8648(void **this)
{
  void *v2;
  void *v3;

  *this = off_24C54B560;
  if (*((char *)this + 135) < 0)
    operator delete(this[14]);
  if (*((char *)this + 111) < 0)
    operator delete(this[11]);
  v2 = this[8];
  if (v2)
  {
    this[9] = v2;
    operator delete(v2);
  }
  serialize::Prim::~Prim((serialize::Prim *)this);
  operator delete(v3);
}

void sub_20C7A86AC(serialize::Prim *a1)
{
  void *v1;

  serialize::Prim::~Prim(a1);
  operator delete(v1);
}

void sub_20C7A86C0(void **this)
{
  *this = off_24C54B5F0;
  if (*((char *)this + 103) < 0)
    operator delete(this[10]);
  serialize::Prim::~Prim((serialize::Prim *)this);
}

void sub_20C7A86FC(void **this)
{
  void *v2;

  *this = off_24C54B5F0;
  if (*((char *)this + 103) < 0)
    operator delete(this[10]);
  serialize::Prim::~Prim((serialize::Prim *)this);
  operator delete(v2);
}

void sub_20C7A873C(void **this)
{
  *this = off_24C54B638;
  if (*((char *)this + 175) < 0)
    operator delete(this[19]);
  if (*((char *)this + 151) < 0)
    operator delete(this[16]);
  if (*((char *)this + 127) < 0)
    operator delete(this[13]);
  serialize::Prim::~Prim((serialize::Prim *)this);
}

void sub_20C7A8798(void **this)
{
  void *v2;

  *this = off_24C54B638;
  if (*((char *)this + 175) < 0)
    operator delete(this[19]);
  if (*((char *)this + 151) < 0)
    operator delete(this[16]);
  if (*((char *)this + 127) < 0)
    operator delete(this[13]);
  serialize::Prim::~Prim((serialize::Prim *)this);
  operator delete(v2);
}

void sub_20C7A87F8(void **this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  *this = &off_24C54B518;
  if (*((char *)this + 295) < 0)
    operator delete(this[34]);
  v2 = this[29];
  if (v2)
  {
    this[30] = v2;
    operator delete(v2);
  }
  v3 = this[26];
  if (v3)
  {
    this[27] = v3;
    operator delete(v3);
  }
  v4 = this[23];
  if (v4)
  {
    this[24] = v4;
    operator delete(v4);
  }
  v5 = this[20];
  if (v5)
  {
    this[21] = v5;
    operator delete(v5);
  }
  v6 = this[17];
  if (v6)
  {
    this[18] = v6;
    operator delete(v6);
  }
  v7 = this[14];
  if (v7)
  {
    this[15] = v7;
    operator delete(v7);
  }
  v8 = this[11];
  if (v8)
  {
    this[12] = v8;
    operator delete(v8);
  }
  v9 = this[8];
  if (v9)
  {
    this[9] = v9;
    operator delete(v9);
  }
  serialize::Prim::~Prim((serialize::Prim *)this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdMetrics::Init(uint64_t this)
{
  dword_25498CCD8 = this;
  return this;
}

int *pxrInternal__aapl__pxrReserved__::UsdMetrics::GetType(pxrInternal__aapl__pxrReserved__::UsdMetrics *this)
{
  return &dword_25498CCD8;
}

void pxrInternal__aapl__pxrReserved__::UsdMetrics::AddField(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, std::string *__str, int a6)
{
  std::string *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[4];
  std::string __p;
  int v12;

  memset(&__p, 0, sizeof(__p));
  v10[0] = a1;
  v10[1] = a2;
  v10[2] = a3;
  v10[3] = a4;
  v7 = std::string::operator=(&__p, __str);
  v12 = a6;
  pxrInternal__aapl__pxrReserved__::UsdMetrics::GetFields((pxrInternal__aapl__pxrReserved__::UsdMetrics *)v7);
  v8 = qword_25498CCE8;
  if (qword_25498CCE8 >= (unint64_t)qword_25498CCF0)
  {
    v9 = sub_20C7A91EC(&qword_25498CCE0, (uint64_t)v10);
  }
  else
  {
    sub_20C7A9174((uint64_t)&qword_25498CCE0, (uint64_t)v10);
    v9 = v8 + 64;
  }
  qword_25498CCE8 = v9;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20C7A8978(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdMetrics::GetFields(pxrInternal__aapl__pxrReserved__::UsdMetrics *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_25498CCF8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498CCF8))
  {
    qword_25498CCE0 = 0;
    qword_25498CCE8 = 0;
    qword_25498CCF0 = 0;
    __cxa_atexit((void (*)(void *))sub_20C7A8A1C, &qword_25498CCE0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498CCF8);
  }
  return &qword_25498CCE0;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdMetrics::ReadFields(pxrInternal__aapl__pxrReserved__::UsdMetrics *this)
{
  pxrInternal__aapl__pxrReserved__::UsdMetrics::GetFields(this);
  return &qword_25498CCE0;
}

void **sub_20C7A8A1C(void **a1)
{
  void **v3;

  v3 = a1;
  sub_20C7A9534(&v3);
  return a1;
}

double pxrInternal__aapl__pxrReserved__::UsdMetrics::GetField@<D0>(pxrInternal__aapl__pxrReserved__::UsdMetrics *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void **v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  pxrInternal__aapl__pxrReserved__::UsdMetrics *v12;
  unsigned __int8 *v13;
  uint64_t v14;

  pxrInternal__aapl__pxrReserved__::UsdMetrics::GetFields(a1);
  v4 = qword_25498CCE0;
  v5 = qword_25498CCE8;
  if (qword_25498CCE0 != qword_25498CCE8)
  {
    v6 = (const void **)(a2 + 32);
    do
    {
      v7 = *(_OWORD *)(v4 + 16);
      *(_OWORD *)a2 = *(_OWORD *)v4;
      *(_OWORD *)(a2 + 16) = v7;
      if (*(char *)(v4 + 55) < 0)
      {
        sub_20BDDBFAC((_BYTE *)(a2 + 32), *(void **)(v4 + 32), *(_QWORD *)(v4 + 40));
      }
      else
      {
        v8 = *(_OWORD *)(v4 + 32);
        *(_QWORD *)(a2 + 48) = *(_QWORD *)(v4 + 48);
        *(_OWORD *)v6 = v8;
      }
      *(_DWORD *)(a2 + 56) = *(_DWORD *)(v4 + 56);
      if (*(char *)(a2 + 55) >= 0)
        v9 = *(unsigned __int8 *)(a2 + 55);
      else
        v9 = *(_QWORD *)(a2 + 40);
      v10 = *((unsigned __int8 *)a1 + 23);
      v11 = (char)v10;
      if ((v10 & 0x80u) != 0)
        v10 = *((_QWORD *)a1 + 1);
      if (v9 == v10)
      {
        if (v11 >= 0)
          v12 = a1;
        else
          v12 = *(pxrInternal__aapl__pxrReserved__::UsdMetrics **)a1;
        if ((*(_BYTE *)(a2 + 55) & 0x80) != 0)
        {
          if (!memcmp(*v6, v12, *(_QWORD *)(a2 + 40)))
            return *(double *)&v8;
LABEL_24:
          operator delete((void *)*v6);
          goto LABEL_25;
        }
        if (!*(_BYTE *)(a2 + 55))
          return *(double *)&v8;
        v13 = (unsigned __int8 *)(a2 + 32);
        v14 = *(unsigned __int8 *)(a2 + 55);
        while (*v13 == *(unsigned __int8 *)v12)
        {
          ++v13;
          v12 = (pxrInternal__aapl__pxrReserved__::UsdMetrics *)((char *)v12 + 1);
          if (!--v14)
            return *(double *)&v8;
        }
      }
      if ((*(_BYTE *)(a2 + 55) & 0x80) != 0)
        goto LABEL_24;
LABEL_25:
      v4 += 64;
    }
    while (v4 != v5);
  }
  *(_QWORD *)&v8 = 0;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return *(double *)&v8;
}

unint64_t pxrInternal__aapl__pxrReserved__::UsdMetrics::GetTime(pxrInternal__aapl__pxrReserved__::UsdMetrics *this)
{
  pxrInternal__aapl__pxrReserved__ *v1;

  v1 = (pxrInternal__aapl__pxrReserved__ *)mach_absolute_time();
  return pxrInternal__aapl__pxrReserved__::ArchTicksToNanoseconds(v1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdMetrics::GetUsedMemory(pxrInternal__aapl__pxrReserved__::UsdMetrics *this)
{
  mach_msg_type_number_t task_info_outCnt;
  integer_t task_info_out;
  uint64_t v4;

  task_info_outCnt = 12;
  if (task_info(*MEMORY[0x24BDAEC58], 0x14u, &task_info_out, &task_info_outCnt))
    return 0;
  else
    return v4;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdMetrics::GetGPUMemory(pxrInternal__aapl__pxrReserved__::UsdMetrics *this)
{
  pid_t v1;
  std::string *v2;
  std::string::size_type size;
  std::string *v4;
  __int128 v5;
  void **v6;
  FILE *v7;
  FILE *v8;
  uint64_t v9;
  int64_t v10;
  int v11;
  void *v12;
  std::string *v13;
  char *v14;
  std::string *v15;
  char *v16;
  uint64_t v18;
  std::string *i;
  int v20;
  std::string::value_type v23;
  int v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  std::string v29;
  void *__p[2];
  int64_t v31;
  std::string v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  sub_20BDDC0E4(&v32, "footprint ");
  v1 = getpid();
  std::to_string(&v29, v1);
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v2 = &v29;
  else
    v2 = (std::string *)v29.__r_.__value_.__r.__words[0];
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
  else
    size = v29.__r_.__value_.__l.__size_;
  v4 = std::string::append(&v32, (const std::string::value_type *)v2, size);
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v31 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  if (v31 >= 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  v7 = popen((const char *)v6, "r");
  v8 = v7;
  if (v7)
  {
    v9 = 0;
    if (!feof(v7))
    {
      do
      {
        fgets((char *)&v32, 2048, v8);
        sub_20BDDC0E4(&v29, (char *)&v32);
        v10 = HIBYTE(v29.__r_.__value_.__r.__words[2]);
        v11 = SHIBYTE(v29.__r_.__value_.__r.__words[2]);
        v12 = (void *)v29.__r_.__value_.__r.__words[0];
        if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        {
          v13 = &v29;
        }
        else
        {
          v10 = v29.__r_.__value_.__l.__size_;
          v13 = (std::string *)v29.__r_.__value_.__r.__words[0];
        }
        if (v10 >= 13)
        {
          v14 = (char *)v13 + v10;
          v15 = v13;
          do
          {
            v16 = (char *)memchr(v15, 73, v10 - 12);
            if (!v16)
              break;
            if (*(_QWORD *)v16 == 0x656C656363414F49 && *(_QWORD *)(v16 + 5) == 0x726F746172656C65)
            {
              if (v16 != v14 && v16 - (char *)v13 != -1)
              {
                v28 = v9;
                v18 = 0;
                for (i = &v32; ; i = (std::string *)((char *)i + 1))
                {
                  v20 = v32.__r_.__value_.__s.__data_[v18];
                  if (v20 != 32 && v20 != 9)
                    break;
                  ++v18;
                }
                v27 = atoll((const char *)&v32 + v18);
                while (v20 > 0x20u || ((1 << v20) & 0x100000201) == 0)
                {
                  LOBYTE(v20) = *((_BYTE *)&v32.__r_.__value_.__l.__data_ + ++v18);
                  i = (std::string *)((char *)i + 1);
                }
                while (v20 == 32 || v20 == 9)
                {
                  v23 = i->__r_.__value_.__s.__data_[1];
                  i = (std::string *)((char *)i + 1);
                  LOBYTE(v20) = v23;
                }
                if (!strncmp("KB", (const char *)i, 2uLL))
                {
                  v25 = v27 << 10;
                }
                else if (!strncmp("MB", (const char *)i, 2uLL))
                {
                  v25 = v27 << 20;
                }
                else if (!strncmp("GB", (const char *)i, 2uLL))
                {
                  v25 = v27 << 30;
                }
                else
                {
                  v24 = strncmp("TB", (const char *)i, 2uLL);
                  v25 = v27 << 40;
                  if (v24)
                    v25 = v27;
                }
                v9 = v25 + v28;
              }
              break;
            }
            v15 = (std::string *)(v16 + 1);
            v10 = v14 - (char *)v15;
          }
          while (v14 - (char *)v15 >= 13);
        }
        if (v11 < 0)
          operator delete(v12);
      }
      while (!feof(v8));
    }
    pclose(v8);
  }
  else
  {
    v9 = 0;
  }
  if (SHIBYTE(v31) < 0)
    operator delete(__p[0]);
  return v9;
}

void sub_20C7A8F0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdMetrics::Reset(pxrInternal__aapl__pxrReserved__::UsdMetrics *this)
{
  pxrInternal__aapl__pxrReserved__::UsdMetrics::GetFields(this);
  sub_20C7A9574(&qword_25498CCE0);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdMetricsProfile::UsdMetricsProfile(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  int v4;
  pxrInternal__aapl__pxrReserved__ *v5;
  pxrInternal__aapl__pxrReserved__::UsdMetrics *v6;
  uint64_t v7;
  mach_msg_type_number_t task_info_outCnt;
  integer_t task_info_out;
  uint64_t v11;

  *(_QWORD *)a1 = off_24C54B680;
  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC((_BYTE *)(a1 + 24), *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 24) = v3;
  }
  v4 = dword_25498CCD8;
  *(_DWORD *)(a1 + 48) = dword_25498CCD8;
  if (v4 == 2)
  {
    task_info_outCnt = 12;
    v6 = (pxrInternal__aapl__pxrReserved__::UsdMetrics *)task_info(*MEMORY[0x24BDAEC58], 0x14u, &task_info_out, &task_info_outCnt);
    v7 = v11;
    if ((_DWORD)v6)
      v7 = 0;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = pxrInternal__aapl__pxrReserved__::UsdMetrics::GetGPUMemory(v6);
  }
  else if (v4 == 1)
  {
    v5 = (pxrInternal__aapl__pxrReserved__ *)mach_absolute_time();
    *(_QWORD *)(a1 + 8) = pxrInternal__aapl__pxrReserved__::ArchTicksToNanoseconds(v5);
  }
  return a1;
}

void sub_20C7A9050(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdMetricsProfile::~UsdMetricsProfile(pxrInternal__aapl__pxrReserved__::UsdMetricsProfile *this)
{
  int v2;
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__ *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  pxrInternal__aapl__pxrReserved__::UsdMetrics *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t GPUMemory;
  uint64_t v14;
  mach_msg_type_number_t task_info_outCnt;
  integer_t task_info_out;
  uint64_t v17;

  *(_QWORD *)this = off_24C54B680;
  v2 = *((_DWORD *)this + 12);
  if (v2 == 2)
  {
    v3 = *((_QWORD *)this + 1);
    task_info_outCnt = 12;
    v9 = (pxrInternal__aapl__pxrReserved__::UsdMetrics *)task_info(*MEMORY[0x24BDAEC58], 0x14u, &task_info_out, &task_info_outCnt);
    v10 = (int)v9;
    v11 = v17;
    v12 = *((_QWORD *)this + 1);
    v6 = *((_QWORD *)this + 2);
    GPUMemory = pxrInternal__aapl__pxrReserved__::UsdMetrics::GetGPUMemory(v9);
    if (v10)
      v14 = 0;
    else
      v14 = v11;
    v8 = v14 - v12;
    v7 = GPUMemory - *((_QWORD *)this + 2);
  }
  else
  {
    if (v2 != 1)
      goto LABEL_9;
    v3 = *((_QWORD *)this + 1);
    v4 = (pxrInternal__aapl__pxrReserved__ *)mach_absolute_time();
    v5 = pxrInternal__aapl__pxrReserved__::ArchTicksToNanoseconds(v4);
    v6 = 0;
    v7 = 0;
    v8 = v5 - *((_QWORD *)this + 1);
  }
  pxrInternal__aapl__pxrReserved__::UsdMetrics::AddField(v3, v8, v6, v7, (std::string *)this + 1, *((_DWORD *)this + 12));
LABEL_9:
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
}

{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdMetricsProfile::~UsdMetricsProfile(this);
  operator delete(v1);
}

_BYTE *sub_20C7A9174(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  _BYTE *result;
  __int128 v7;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v4 = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 16) = v5;
  result = (_BYTE *)(v4 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    result = sub_20BDDBFAC(result, *(void **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(v4 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)result = v7;
  }
  *(_DWORD *)(v4 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 8) = v4 + 64;
  return result;
}

void sub_20C7A91E4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_20C7A91EC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _DWORD *v10;
  char *v11;
  __int128 v12;
  _BYTE *v13;
  __int128 v14;
  uint64_t v15;
  _QWORD v17[2];
  char *v18;
  char *v19;
  uint64_t *v20;

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 6;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 58)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 5 > v5)
    v5 = v8 >> 5;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0)
    v9 = 0x3FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v20 = a1 + 2;
  if (v9)
    v10 = sub_20C00D6F0(v7, v9);
  else
    v10 = 0;
  v11 = (char *)&v10[16 * v4];
  v17[0] = v10;
  v17[1] = v11;
  v18 = v11;
  v19 = (char *)&v10[16 * v9];
  v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_OWORD *)v11 + 1) = v12;
  v13 = v11 + 32;
  if (*(char *)(a2 + 55) < 0)
  {
    sub_20BDDBFAC(v13, *(void **)(a2 + 32), *(_QWORD *)(a2 + 40));
    v11 = v18;
  }
  else
  {
    v14 = *(_OWORD *)(a2 + 32);
    *((_QWORD *)v11 + 6) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)v13 = v14;
  }
  v10[16 * v4 + 14] = *(_DWORD *)(a2 + 56);
  v18 = v11 + 64;
  sub_20C7A9308(a1, v17);
  v15 = a1[1];
  sub_20C7A94AC((uint64_t)v17);
  return v15;
}

void sub_20C7A92F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C7A94AC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C7A9308(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C7A937C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C7A937C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  _QWORD v14[3];
  char v15;
  __int128 v16;
  __int128 v17;

  *(_QWORD *)&v17 = a6;
  *((_QWORD *)&v17 + 1) = a7;
  v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  if (a3 == a5)
  {
    v12 = a6;
  }
  else
  {
    v7 = 0;
    do
    {
      v8 = a7 + v7;
      v9 = a3 + v7;
      v10 = *(_OWORD *)(a3 + v7 - 48);
      *(_OWORD *)(v8 - 64) = *(_OWORD *)(a3 + v7 - 64);
      *(_OWORD *)(v8 - 48) = v10;
      v11 = *(_OWORD *)(a3 + v7 - 32);
      *(_QWORD *)(v8 - 16) = *(_QWORD *)(a3 + v7 - 16);
      *(_OWORD *)(v8 - 32) = v11;
      *(_QWORD *)(v9 - 24) = 0;
      *(_QWORD *)(v9 - 16) = 0;
      *(_QWORD *)(v9 - 32) = 0;
      *(_DWORD *)(v8 - 8) = *(_DWORD *)(a3 + v7 - 8);
      v7 -= 64;
    }
    while (a3 + v7 != a5);
    *((_QWORD *)&v17 + 1) = a7 + v7;
    v12 = v17;
  }
  v15 = 1;
  sub_20C7A9434((uint64_t)v14);
  return v12;
}

uint64_t sub_20C7A9434(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C7A9468(a1);
  return a1;
}

void sub_20C7A9468(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 55) < 0)
      operator delete(*(void **)(v1 + 32));
    v1 += 64;
  }
}

uint64_t sub_20C7A94AC(uint64_t a1)
{
  sub_20C7A94E0(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20C7A94E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 64;
      *(_QWORD *)(a1 + 16) = v2 - 64;
      if (*(char *)(v2 - 9) < 0)
      {
        operator delete(*(void **)(v2 - 32));
        v5 = *(_QWORD *)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

void sub_20C7A9534(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_20C7A9574((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_20C7A9574(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 64)
  {
    if (*(char *)(i - 9) < 0)
      operator delete(*(void **)(i - 32));
  }
  a1[1] = v2;
}

double pxrInternal__aapl__pxrReserved__::UsdMetricsBenchmarkArgs::UsdMetricsBenchmarkArgs(pxrInternal__aapl__pxrReserved__::UsdMetricsBenchmarkArgs *this)
{
  double result;

  *((_WORD *)this + 2) = 0;
  *(_DWORD *)this = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  return result;
}

{
  double result;

  *((_WORD *)this + 2) = 0;
  *(_DWORD *)this = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  return result;
}

double pxrInternal__aapl__pxrReserved__::UsdMetricsBenchmarkArgs::Processing(pxrInternal__aapl__pxrReserved__::UsdMetricsBenchmarkArgs *this)
{
  int v2;
  int v3;
  size_t v4;
  int v5;
  int v6;
  int v7;
  void **v8;
  _QWORD *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  int *v18;
  int v19;
  std::string::size_type v21;
  double result;
  std::string::size_type v23;
  std::string::size_type v24;
  void **v25;
  std::string::size_type v26;
  std::string::size_type v27;
  char *v28;
  void **v29;
  std::string __str;
  size_t __idx;
  char v32;

  if (*((char *)this + 87) < 0)
  {
    if (!*((_QWORD *)this + 9))
      goto LABEL_42;
  }
  else if (!*((_BYTE *)this + 87))
  {
    goto LABEL_42;
  }
  __idx = 0;
  v2 = std::stoi((const std::string *)((char *)this + 64), &__idx, 10);
  v3 = v2;
  if (*((char *)this + 87) < 0)
    v4 = *((_QWORD *)this + 9);
  else
    v4 = *((unsigned __int8 *)this + 87);
  v5 = v2;
  if (__idx + 1 >= v4)
    goto LABEL_22;
  std::string::basic_string(&__str, (const std::string *)((char *)this + 64), __idx, 2uLL, (std::allocator<char> *)&v32);
  if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) == 2)
    {
      v5 = v3;
      if (LOWORD(__str.__r_.__value_.__l.__data_) == 11822)
        goto LABEL_15;
      goto LABEL_22;
    }
LABEL_21:
    v5 = v3;
    goto LABEL_22;
  }
  if (__str.__r_.__value_.__l.__size_ != 2)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    goto LABEL_21;
  }
  v6 = *(unsigned __int16 *)__str.__r_.__value_.__l.__data_;
  operator delete(__str.__r_.__value_.__l.__data_);
  v5 = v3;
  if (v6 == 11822)
  {
LABEL_15:
    std::string::basic_string(&__str, (const std::string *)((char *)this + 64), __idx + 2, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v32);
    v7 = std::stoi(&__str, 0, 10);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (v7 <= v3)
      v5 = v3;
    else
      v5 = v7;
  }
LABEL_22:
  v8 = (void **)((char *)this + 88);
  sub_20BE857FC((void **)this + 11, v5 - v3 + 1);
  if (v5 >= v3)
  {
    v9 = (_QWORD *)((char *)this + 104);
    v10 = (char *)*((_QWORD *)this + 12);
    do
    {
      if ((unint64_t)v10 >= *v9)
      {
        v12 = (char *)*v8;
        v13 = (v10 - (_BYTE *)*v8) >> 2;
        v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 62)
          sub_20BDDF694();
        v15 = *v9 - (_QWORD)v12;
        if (v15 >> 1 > v14)
          v14 = v15 >> 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
          v16 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v16 = v14;
        if (v16)
        {
          v17 = (char *)sub_20BDE1330((uint64_t)this + 104, v16);
          v12 = (char *)*((_QWORD *)this + 11);
          v10 = (char *)*((_QWORD *)this + 12);
        }
        else
        {
          v17 = 0;
        }
        v18 = (int *)&v17[4 * v13];
        *v18 = v3;
        v11 = (char *)(v18 + 1);
        while (v10 != v12)
        {
          v19 = *((_DWORD *)v10 - 1);
          v10 -= 4;
          *--v18 = v19;
        }
        *((_QWORD *)this + 11) = v18;
        *((_QWORD *)this + 12) = v11;
        *((_QWORD *)this + 13) = &v17[4 * v16];
        if (v12)
          operator delete(v12);
      }
      else
      {
        *(_DWORD *)v10 = v3;
        v11 = v10 + 4;
      }
      *((_QWORD *)this + 12) = v11;
      v10 = v11;
    }
    while (v3++ != v5);
  }
LABEL_42:
  *((_DWORD *)this + 52) = 0;
  if ((*((char *)this + 55) & 0x80000000) == 0)
  {
    if (*((_BYTE *)this + 55))
      goto LABEL_44;
LABEL_47:
    MEMORY[0x212B929D0]((char *)this + 160, "image");
    MEMORY[0x212B929D0]((char *)this + 184, ".jpg");
    *((_DWORD *)this + 52) = 4;
    return result;
  }
  if (!*((_QWORD *)this + 5))
    goto LABEL_47;
LABEL_44:
  v21 = std::string::find((const std::string *)((char *)this + 32), 35, 0);
  v23 = v21;
  if (*((char *)this + 55) < 0)
    v24 = *((_QWORD *)this + 5);
  else
    v24 = *((unsigned __int8 *)this + 55);
  if (v21 < v24)
  {
    std::string::basic_string(&__str, (const std::string *)((char *)this + 32), 0, v21, (std::allocator<char> *)&__idx);
    v25 = (void **)((char *)this + 160);
    if (*((char *)this + 183) < 0)
      operator delete(*v25);
    *(_OWORD *)v25 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 22) = *((_QWORD *)&__str.__r_.__value_.__l + 2);
    v26 = *((unsigned __int8 *)this + 55);
    while (1)
    {
      v27 = v26;
      if ((v26 & 0x80) != 0)
        v27 = *((_QWORD *)this + 5);
      if (v23 >= v27)
        break;
      v28 = (char *)this + 32;
      if ((v26 & 0x80) != 0)
        v28 = (char *)*((_QWORD *)this + 4);
      if (v28[v23] != 35)
        break;
      ++*((_DWORD *)this + 52);
      ++v23;
    }
    std::string::basic_string(&__str, (const std::string *)((char *)this + 32), v23, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&__idx);
    v29 = (void **)((char *)this + 184);
    if (*((char *)this + 207) < 0)
      operator delete(*v29);
    result = *(double *)&__str.__r_.__value_.__l.__data_;
    *(_OWORD *)v29 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 25) = *((_QWORD *)&__str.__r_.__value_.__l + 2);
  }
  return result;
}

void sub_20C7A9990(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x20C7A9744);
}

void sub_20C7A99C0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x20C7A967CLL);
}

void pxrInternal__aapl__pxrReserved__::UsdMetricsBenchmarkArgs::GetImagePath(pxrInternal__aapl__pxrReserved__::UsdMetricsBenchmarkArgs *this@<X0>, int __val@<W1>, uint64_t a3@<X8>)
{
  std::string::size_type size;
  std::string *v6;
  std::string::size_type v7;
  std::string *v8;
  std::string::size_type v9;
  std::string::size_type v10;
  std::string::size_type v11;
  const std::string::value_type *v12;
  char *v13;
  const std::string::value_type *v14;
  int v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  void **v20;
  unint64_t v21;
  std::string v22;
  std::string v23;
  _QWORD v24[3];

  v24[2] = *MEMORY[0x24BDAC8D0];
  if (!*((_DWORD *)this + 52))
  {
    v20 = (void **)((char *)this + 32);
    if (*((char *)this + 55) < 0)
    {
      v21 = *((_QWORD *)this + 5);
      if (v21)
      {
        sub_20BDDBFAC((_BYTE *)a3, *v20, v21);
        return;
      }
    }
    else if (*((_BYTE *)this + 55))
    {
      *(_OWORD *)a3 = *(_OWORD *)v20;
      *(_QWORD *)(a3 + 16) = *((_QWORD *)this + 6);
      return;
    }
  }
  std::to_string(&v23, __val);
  size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v23.__r_.__value_.__l.__size_;
  if (size < *((int *)this + 52))
  {
    do
    {
      sub_20BDDC0E4(&v22, "0");
      if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v6 = &v23;
      else
        v6 = (std::string *)v23.__r_.__value_.__r.__words[0];
      if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v7 = HIBYTE(v23.__r_.__value_.__r.__words[2]);
      else
        v7 = v23.__r_.__value_.__l.__size_;
      v8 = std::string::append(&v22, (const std::string::value_type *)v6, v7);
      v9 = v8->__r_.__value_.__r.__words[0];
      v24[0] = v8->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v24 + 7) = *(std::string::size_type *)((char *)&v8->__r_.__value_.__r.__words[1] + 7);
      v10 = HIBYTE(v8->__r_.__value_.__r.__words[2]);
      v8->__r_.__value_.__r.__words[0] = 0;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v23.__r_.__value_.__l.__data_);
      v23.__r_.__value_.__r.__words[0] = v9;
      v23.__r_.__value_.__l.__size_ = v24[0];
      *(std::string::size_type *)((char *)&v23.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v24 + 7);
      *((_BYTE *)&v23.__r_.__value_.__s + 23) = v10;
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v22.__r_.__value_.__l.__data_);
        v10 = HIBYTE(v23.__r_.__value_.__r.__words[2]);
      }
      if ((v10 & 0x80u) == 0)
        v11 = v10;
      else
        v11 = v23.__r_.__value_.__l.__size_;
    }
    while (v11 < *((int *)this + 52));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier((const void **)this + 20, (const void **)&v23.__r_.__value_.__l.__data_, (uint64_t)&v22);
  v14 = (const std::string::value_type *)*((_QWORD *)this + 23);
  v13 = (char *)this + 184;
  v12 = v14;
  v15 = v13[23];
  if (v15 >= 0)
    v16 = v13;
  else
    v16 = v12;
  if (v15 >= 0)
    v17 = v13[23];
  else
    v17 = *((_QWORD *)v13 + 1);
  v18 = std::string::append(&v22, v16, v17);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  *(_QWORD *)(a3 + 16) = *((_QWORD *)&v18->__r_.__value_.__l + 2);
  *(_OWORD *)a3 = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
}

void sub_20C7A9BF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdMetricsBenchmark::usdBenchmark(pxrInternal__aapl__pxrReserved__::UsdMetricsBenchmark *this, const pxrInternal__aapl__pxrReserved__::UsdMetricsBenchmarkArgs *a2, pxrInternal__aapl__pxrReserved__::UsdMetricsConsole *a3)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v6;
  void *v8[2];
  uint64_t v9;
  void *__p[2];
  char v11;
  void *v12[2];
  char v13;
  pxrInternal__aapl__pxrReserved__ *v14;

  if (*((char *)a2 + 159) < 0)
  {
    if (*((_QWORD *)a2 + 18))
      goto LABEL_3;
  }
  else if (*((_BYTE *)a2 + 159))
  {
LABEL_3:
    pxrInternal__aapl__pxrReserved__::UsdStage::Open((uint64_t)a2 + 136, 0, &v14);
    if (*((_BYTE *)a2 + 5))
    {
      v8[0] = 0;
      v8[1] = 0;
      v9 = 0;
      sub_20BDDC0E4(__p, "export");
      pxrInternal__aapl__pxrReserved__::UsdMetricsProfile::UsdMetricsProfile(v12, __p);
      if (v11 < 0)
        operator delete(__p[0]);
      v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20C39A7A8((uint64_t *)&v14);
      pxrInternal__aapl__pxrReserved__::UsdStage::ExportToString(v5, (const char *)v8, 1);
      pxrInternal__aapl__pxrReserved__::UsdMetricsProfile::~UsdMetricsProfile((pxrInternal__aapl__pxrReserved__::UsdMetricsProfile *)v12);
      if (*((_BYTE *)a2 + 4))
        pxrInternal__aapl__pxrReserved__::UsdMetricsConsole::print((uint64_t)a3, (uint64_t)v8);
      if (SHIBYTE(v9) < 0)
        operator delete(v8[0]);
    }
    sub_20BDDC0E4(v8, "shutdown");
    pxrInternal__aapl__pxrReserved__::UsdMetricsProfile::UsdMetricsProfile(v12, v8);
    if (SHIBYTE(v9) < 0)
      operator delete(v8[0]);
    sub_20BDDC0E4(__p, "shutdown USD");
    pxrInternal__aapl__pxrReserved__::UsdMetricsProfile::UsdMetricsProfile(v8, __p);
    if (v11 < 0)
      operator delete(__p[0]);
    sub_20C7A9E8C(&v14);
    v6 = v14;
    v14 = 0;
    __p[0] = 0;
    sub_20BF1D8F4((int)&v14, v6);
    sub_20C455C74((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)__p);
    pxrInternal__aapl__pxrReserved__::UsdMetricsProfile::~UsdMetricsProfile((pxrInternal__aapl__pxrReserved__::UsdMetricsProfile *)v8);
    pxrInternal__aapl__pxrReserved__::UsdMetricsProfile::~UsdMetricsProfile((pxrInternal__aapl__pxrReserved__::UsdMetricsProfile *)v12);
    sub_20C455C74(&v14);
    return 0;
  }
  sub_20BDDC0E4(v12, "usdFilePath is not specified");
  pxrInternal__aapl__pxrReserved__::UsdMetricsConsole::error((uint64_t)a3, (uint64_t)v12);
  if (v13 < 0)
    operator delete(v12[0]);
  return 1;
}

void sub_20C7A9DD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  if (a14 < 0)
    operator delete(__p);
  sub_20C455C74((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(v30 - 24));
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20C7A9E8C(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v1;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v3;

  v1 = *a1;
  *a1 = 0;
  v3 = 0;
  sub_20BF1D8F4((int)a1, v1);
  return sub_20C455C74(&v3);
}

void sub_20C7A9EC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C455C74((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdMetricsConsole *pxrInternal__aapl__pxrReserved__::UsdMetricsConsole::UsdMetricsConsole(pxrInternal__aapl__pxrReserved__::UsdMetricsConsole *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  std::ios_base *v10;

  v2 = MEMORY[0x24BEDB7E8];
  *(_BYTE *)this = 0;
  v3 = *(_QWORD *)(v2 + 8);
  v4 = *(_QWORD *)(v2 + 16);
  *((_QWORD *)this + 1) = v3;
  v5 = (_QWORD *)((char *)this + 8);
  v6 = (uint64_t *)((char *)this + 424);
  v7 = MEMORY[0x24BEDB840];
  v8 = MEMORY[0x24BEDB840] + 64;
  *((_QWORD *)this + 53) = MEMORY[0x24BEDB840] + 64;
  v9 = (char *)this + 16;
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 24) + 8) = v4;
  v10 = (std::ios_base *)((char *)this + *(_QWORD *)(*((_QWORD *)this + 1) - 24) + 8);
  std::ios_base::init(v10, (char *)this + 16);
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  *v5 = v7 + 24;
  *v6 = v8;
  MEMORY[0x212B92AA8](v9);
  return this;
}

void sub_20C7A9F80(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x212B92EB0](v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdMetricsConsole::~UsdMetricsConsole(pxrInternal__aapl__pxrReserved__::UsdMetricsConsole *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (_QWORD *)((char *)this + 8);
  if (*((_QWORD *)this + 17) && !std::filebuf::close())
    std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), *(_DWORD *)((char *)v2 + *(_QWORD *)(*v2 - 24) + 32) | 4);
  v3 = MEMORY[0x24BEDB7E8];
  v4 = *MEMORY[0x24BEDB7E8];
  *((_QWORD *)this + 1) = *MEMORY[0x24BEDB7E8];
  *(_QWORD *)((char *)v2 + *(_QWORD *)(v4 - 24)) = *(_QWORD *)(v3 + 24);
  MEMORY[0x212B92AB4]((char *)this + 16);
  std::ostream::~ostream();
  MEMORY[0x212B92EB0]((char *)this + 424);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdMetricsConsole::log(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  const std::locale::facet *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  std::locale v12;

  if (*(_BYTE *)a1 && *(_QWORD *)(a1 + 136))
  {
    v2 = (_QWORD *)(a1 + 8);
    v3 = *(_QWORD *)(a2 + 8);
    if (*(char *)(a2 + 23) >= 0)
    {
      v4 = *(unsigned __int8 *)(a2 + 23);
    }
    else
    {
      a2 = *(_QWORD *)a2;
      v4 = v3;
    }
    v5 = sub_20BDDC1C8(v2, a2, v4);
    std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(_QWORD *)(*v5 - 24)));
    v6 = std::locale::use_facet(&v12, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
  }
  else
  {
    v7 = *(_QWORD *)(a2 + 8);
    if (*(char *)(a2 + 23) >= 0)
    {
      v8 = *(unsigned __int8 *)(a2 + 23);
    }
    else
    {
      a2 = *(_QWORD *)a2;
      v8 = v7;
    }
    v9 = sub_20BDDC1C8(MEMORY[0x24BEDB318], a2, v8);
    std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
    v10 = std::locale::use_facet(&v12, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  }
  std::locale::~locale(&v12);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_20C7AA14C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdMetricsConsole::print(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  const std::locale::facet *v5;
  std::locale v7;

  v2 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v3 = v2;
  }
  v4 = sub_20BDDC1C8(MEMORY[0x24BEDB318], a2, v3);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(_QWORD *)(*v4 - 24)));
  v5 = std::locale::use_facet(&v7, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v7);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_20C7AA200(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdMetricsConsole::error(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  std::locale v12;

  v3 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)"\x1B[91m", 5);
  v4 = sub_20BDDC1C8(v3, (uint64_t)"Error: ", 7);
  v5 = *(char *)(a2 + 23);
  if (v5 >= 0)
    v6 = a2;
  else
    v6 = *(_QWORD *)a2;
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(a2 + 23);
  else
    v7 = *(_QWORD *)(a2 + 8);
  v8 = sub_20BDDC1C8(v4, v6, v7);
  v9 = sub_20BDDC1C8(v8, (uint64_t)"\x1B[0m", 4);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v12, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v12);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_20C7AA2E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdMetricsConsole::openFile(uint64_t a1, uint64_t a2)
{
  std::string *v3;
  __int128 v4;
  std::string v5;
  void *__p[2];
  std::string::size_type v7;

  if (*(char *)(a2 + 23) < 0)
  {
    if (!*(_QWORD *)(a2 + 8))
      return;
  }
  else if (!*(_BYTE *)(a2 + 23))
  {
    return;
  }
  std::ofstream::open();
  if (*(_QWORD *)(a1 + 136))
  {
    *(_BYTE *)a1 = 1;
  }
  else
  {
    std::operator+<char>();
    v3 = std::string::append(&v5, "'");
    v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    v7 = v3->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    pxrInternal__aapl__pxrReserved__::UsdMetricsConsole::error((uint64_t)v3, (uint64_t)__p);
    if (SHIBYTE(v7) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v5.__r_.__value_.__l.__data_);
  }
}

void sub_20C7AA3C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *pxrInternal__aapl__pxrReserved__::UsdMetricsPlatform::CPU@<X0>(_QWORD *a1@<X8>)
{
  size_t v4;
  char __s[1024];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  bzero(__s, 0x400uLL);
  v4 = 1024;
  sysctlbyname("machdep.cpu.brand_string", __s, &v4, 0, 0);
  __s[v4 - 1] = 0;
  return sub_20BDDC0E4(a1, __s);
}

_QWORD *pxrInternal__aapl__pxrReserved__::UsdMetricsPlatform::GPU@<X0>(_QWORD *a1@<X8>)
{
  return sub_20BDDC0E4(a1, "unknown");
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdMetricsPlatform::GetVirtualMemory(pxrInternal__aapl__pxrReserved__::UsdMetricsPlatform *this)
{
  mach_msg_type_number_t task_info_outCnt;
  integer_t task_info_out[12];

  task_info_outCnt = 12;
  if (task_info(*MEMORY[0x24BDAEC58], 0x14u, task_info_out, &task_info_outCnt))
    return 0;
  else
    return *(_QWORD *)task_info_out;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdMetricsPlatform::GetMaxMemory(pxrInternal__aapl__pxrReserved__::UsdMetricsPlatform *this)
{
  mach_msg_type_number_t task_info_outCnt;
  integer_t task_info_out[4];
  uint64_t v4;

  task_info_outCnt = 12;
  if (task_info(*MEMORY[0x24BDAEC58], 0x14u, task_info_out, &task_info_outCnt))
    return 0;
  else
    return v4;
}

void sub_20C7AA538()
{
  uint64_t v0;
  void *__p[2];
  uint64_t v2;
  void *v3[2];
  char v4;

  sub_20BDDC0E4(v3, "USDMTLX_READER");
  __p[0] = 0;
  __p[1] = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C54B6A0, 0, (uint64_t)v3, (uint64_t)__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p[0]);
  if (v4 < 0)
    operator delete(v3[0]);
  v0 = sub_20C7AA5EC();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v0, "USDMTLX_READER", "UsdMtlx reader details");
}

void sub_20C7AA5C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C7AA5EC()
{
  unsigned __int8 v0;
  _DWORD *v2;

  v0 = atomic_load((unsigned __int8 *)&qword_25473DB98);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25473DB98))
  {
    v2 = operator new(4uLL);
    *v2 = 0;
    qword_25473DB90 = (uint64_t)v2;
    __cxa_guard_release(&qword_25473DB98);
  }
  return qword_25473DB90;
}

void sub_20C7AA64C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25473DB98);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdMtlxDiscoveryPlugin *pxrInternal__aapl__pxrReserved__::UsdMtlxDiscoveryPlugin::UsdMtlxDiscoveryPlugin(pxrInternal__aapl__pxrReserved__::UsdMtlxDiscoveryPlugin *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  void *v6;

  v2 = pxrInternal__aapl__pxrReserved__::NdrDiscoveryPlugin::NdrDiscoveryPlugin((uint64_t)this);
  *(_QWORD *)v2 = off_24C54B6C0;
  *(_OWORD *)(v2 + 24) = 0u;
  v3 = v2 + 24;
  v4 = v2 + 48;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  v5 = pxrInternal__aapl__pxrReserved__::UsdMtlxCustomSearchPaths((pxrInternal__aapl__pxrReserved__ *)v2);
  if ((uint64_t *)v3 != v5)
    sub_20BE75818(v3, (std::string *)*v5, (__int128 *)v5[1], 0xAAAAAAAAAAAAAAABLL * ((v5[1] - *v5) >> 3));
  v6 = pxrInternal__aapl__pxrReserved__::UsdMtlxSearchPaths((pxrInternal__aapl__pxrReserved__ *)v5);
  if ((void *)v4 != v6)
    sub_20BE75818(v4, *(std::string **)v6, *((__int128 **)v6 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v6 + 1) - *(_QWORD *)v6) >> 3));
  return this;
}

void sub_20C7AA714(_Unwind_Exception *a1, uint64_t a2, ...)
{
  unsigned int **v2;
  const void *v4;
  va_list va;

  va_start(va, a2);
  sub_20BDE5038((void ***)va);
  sub_20BDE5038((void ***)va);
  pxrInternal__aapl__pxrReserved__::NdrDiscoveryPlugin::~NdrDiscoveryPlugin(v2, v4);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdMtlxDiscoveryPlugin::DiscoverNodes(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _BOOL8 v7;
  __int128 *v8;
  __int128 *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  void *v13;
  std::__shared_weak_count *v14;
  char v15;
  void **v16;
  _QWORD *v17;
  void *__p[2];
  char v19;
  void *v20;
  char v21;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_20BDDC0E4(__p, "");
  pxrInternal__aapl__pxrReserved__::UsdMtlxGetDocument((uint64_t)__p, &v13);
  if (v19 < 0)
    operator delete(__p[0]);
  if (v13)
  {
    sub_20BDDC0E4(__p, "mtlx");
    sub_20BDDC0E4(&v20, "mtlx");
    sub_20C7AAD60((uint64_t *)&v13, (uint64_t)&v16);
    sub_20C7AAA38(a2, (uint64_t *)&v13, (__int128 *)__p, (uint64_t)&v16);
    sub_20BDE9D48((uint64_t)&v16, v17);
    if (v21 < 0)
      operator delete(v20);
    if (v19 < 0)
      operator delete(__p[0]);
  }
  v4 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  pxrInternal__aapl__pxrReserved__::UsdMtlxStandardFileExtensions((uint64_t)&v16);
  sub_20BDDC0E4(&v13, "USDMTLX_PLUGIN_FOLLOW_SYMLINKS");
  v7 = pxrInternal__aapl__pxrReserved__::TfGetenvBool((const char *)&v13, 0);
  pxrInternal__aapl__pxrReserved__::NdrFsHelpersDiscoverFiles((char *)(a1 + 24), (uint64_t)&v16, v7, __p);
  if (v15 < 0)
    operator delete(v13);
  v13 = &v16;
  sub_20BDE5038((void ***)&v13);
  v8 = (__int128 *)__p[0];
  v9 = (__int128 *)__p[1];
  while (v8 != v9)
  {
    pxrInternal__aapl__pxrReserved__::UsdMtlxGetDocument((uint64_t)v8 + 24, &v13);
    if (v13)
    {
      sub_20C7AAD60((uint64_t *)&v13, (uint64_t)&v16);
      sub_20C7AAA38(a2, (uint64_t *)&v13, v8, (uint64_t)&v16);
      sub_20BDE9D48((uint64_t)&v16, v17);
    }
    v10 = v14;
    if (v14)
    {
      v11 = (unint64_t *)&v14->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v8 += 3;
  }
  v16 = __p;
  sub_20BE93030(&v16);
}

void sub_20C7AA94C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, _QWORD *a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  sub_20BDE9D48((uint64_t)&a15, a16);
  sub_20BE930F8((uint64_t)&__p);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  sub_20C1E7E2C((void ***)&a15);
  _Unwind_Resume(a1);
}

void sub_20C7AAA38(uint64_t *a1, uint64_t *a2, __int128 *a3, uint64_t a4)
{
  unsigned __int8 v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t *v11;
  uint64_t *i;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  int v16;
  const void **v17;
  uint64_t v18;
  const void **v19;
  uint64_t *v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t v31;
  void *__p[2];
  const void *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t Version;
  int v37;
  uint64_t v38;
  char v39;
  uint64_t *v40;
  uint64_t *v41;

  v8 = atomic_load((unsigned __int8 *)&qword_25498CD08);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_25498CD08))
  {
    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &unk_25498CD00, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498CD08);
  }
  v9 = *a2;
  v10 = sub_20C957390();
  sub_20C7AB528(v9, (unsigned __int8 *)v10, (uint64_t)&v40);
  v11 = v40;
  for (i = v41; v11 != i; v11 += 2)
  {
    v39 = 0;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v38);
    v13 = v11[1];
    v34 = *v11;
    v35 = (std::__shared_weak_count *)v13;
    if (v13)
    {
      v14 = (unint64_t *)(v13 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    Version = pxrInternal__aapl__pxrReserved__::UsdMtlxGetVersion(&v34, &v39);
    v37 = v16;
    v17 = (const void **)(*v11 + 48);
    v18 = sub_20BDEEBA4(a4, v17);
    v19 = (const void **)(v18 + 56);
    if (a4 + 8 == v18)
      v19 = v17;
    if (*((char *)v19 + 23) < 0)
    {
      sub_20BDDBFAC(__p, (void *)*v19, (unint64_t)v19[1]);
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)v19;
      v33 = v19[2];
    }
    sub_20C7AB2F8(*v11);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v31);
    v20 = (uint64_t *)sub_20C7AB380();
    v21 = (uint64_t *)sub_20C7AB380();
    v22 = a1[1];
    if (v22 >= a1[2])
    {
      v23 = sub_20C7AB6DC(a1, &v38, &Version, (__int128 *)__p, &v31, v20, v21, a3, (__int128 *)((char *)a3 + 24));
    }
    else
    {
      sub_20C7AB854((uint64_t)(a1 + 2), v22, &v38, &Version, (__int128 *)__p, &v31, v20, v21, a3, (__int128 *)((char *)a3 + 24));
      v23 = v22 + 216;
      a1[1] = v22 + 216;
    }
    a1[1] = v23;
    if ((v31 & 7) != 0)
    {
      v24 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
      do
        v25 = __ldxr(v24);
      while (__stlxr(v25 - 2, v24));
    }
    if (SHIBYTE(v33) < 0)
      operator delete(__p[0]);
    v26 = v35;
    if (v35)
    {
      p_shared_owners = (unint64_t *)&v35->__shared_owners_;
      do
        v28 = __ldaxr(p_shared_owners);
      while (__stlxr(v28 - 1, p_shared_owners));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    if ((v38 & 7) != 0)
    {
      v29 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
      do
        v30 = __ldxr(v29);
      while (__stlxr(v30 - 2, v29));
    }
  }
  __p[0] = &v40;
  sub_20BDE9EB0((void ***)__p);
}

void sub_20C7AACC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;
  uint64_t v26;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;

  *(_QWORD *)(v25 + 8) = v26;
  if ((a12 & 7) != 0)
  {
    v28 = (unsigned int *)(a12 & 0xFFFFFFFFFFFFFFF8);
    do
      v29 = __ldxr(v28);
    while (__stlxr(v29 - 2, v28));
  }
  if (a18 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a19);
  if ((a23 & 7) != 0)
  {
    v30 = (unsigned int *)(a23 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  __p = &a25;
  sub_20BDE9EB0((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_20C7AAD60(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  __int128 *v4;
  uint64_t *v5;
  uint64_t *v6;
  void (*v7)(void *);
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void **v15;
  unsigned __int8 *v16;
  __int128 *v17;
  unsigned __int8 *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  char v32;
  void *v33;
  unint64_t v34;
  unsigned __int8 *v35;
  __int128 *v36;
  unsigned __int8 *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  char v46;
  void *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  void **v66;
  std::__shared_weak_count *v67;

  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = a2 + 8;
  v3 = *a1;
  v4 = sub_20C957390();
  sub_20C7AB528(v3, (unsigned __int8 *)v4, (uint64_t)&v60);
  v5 = v60;
  v6 = v61;
  if (v60 != v61)
  {
    v7 = (void (*)(void *))MEMORY[0x24BEDACF0];
    do
    {
      if (sub_20C7AB964(*v5))
      {
        v8 = v5[1];
        v58 = *v5;
        v59 = (std::__shared_weak_count *)v8;
        if (v8)
        {
          v9 = (unint64_t *)(v8 + 8);
          do
            v10 = __ldxr(v9);
          while (__stxr(v10 + 1, v9));
        }
        v11 = atomic_load((unsigned __int8 *)&qword_25498CD30);
        if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_25498CD30))
        {
          sub_20BDDC0E4(byte_25498CD18, "inherit");
          __cxa_atexit(v7, byte_25498CD18, &dword_20BDBC000);
          __cxa_guard_release(&qword_25498CD30);
        }
        v12 = v58;
        v66 = (void **)v58;
        v67 = v59;
        if (v59)
        {
          p_shared_owners = (unint64_t *)&v59->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        v15 = (void **)(v12 + 48);
        do
        {
          while (1)
          {
            v16 = sub_20C67F73C(v66 + 20, byte_25498CD18);
            v17 = v16 ? (__int128 *)(v16 + 40) : sub_20C957390();
            if (*((char *)v17 + 23) < 0)
            {
              if (!*((_QWORD *)v17 + 1))
                goto LABEL_46;
            }
            else if (!*((_BYTE *)v17 + 23))
            {
              goto LABEL_46;
            }
            sub_20C93D9DC((uint64_t)v66, &v62);
            v18 = sub_20C67F73C((_QWORD *)(v62 + 96), (unsigned __int8 *)v17);
            if (v18)
            {
              v19 = (std::__shared_weak_count *)*((_QWORD *)v18 + 6);
              v64 = *((_QWORD *)v18 + 5);
              v65 = v19;
              if (v19)
              {
                v20 = (unint64_t *)&v19->__shared_owners_;
                do
                  v21 = __ldxr(v20);
                while (__stxr(v21 + 1, v20));
              }
            }
            else
            {
              v64 = 0;
              v65 = 0;
            }
            v22 = v63;
            if (v63)
            {
              v23 = (unint64_t *)&v63->__shared_owners_;
              do
                v24 = __ldaxr(v23);
              while (__stlxr(v24 - 1, v23));
              if (!v24)
              {
                ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
                std::__shared_weak_count::__release_weak(v22);
              }
            }
            v25 = v64;
            if (v64)
            {
              sub_20BDE881C(&v66, &v64);
              v26 = *((char *)v66 + 71) < 0 ? v66[7] : (void *)*((unsigned __int8 *)v66 + 71);
              v27 = *((char *)v15 + 23) < 0 ? v15[1] : (void *)*((unsigned __int8 *)v15 + 23);
              if (v26 < v27)
                v15 = v66 + 6;
            }
            v28 = v65;
            if (v65)
            {
              v29 = (unint64_t *)&v65->__shared_owners_;
              do
                v30 = __ldaxr(v29);
              while (__stlxr(v30 - 1, v29));
              if (!v30)
                break;
            }
            if (!v25)
              goto LABEL_46;
          }
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
        while (v25);
LABEL_46:
        v31 = sub_20BEB97DC((uint64_t **)a2, (const void **)(v58 + 48), (__int128 *)(v58 + 48), (__int128 *)v15);
        if (!v32)
        {
          v33 = *((char *)v15 + 23) < 0 ? v15[1] : (void *)*((unsigned __int8 *)v15 + 23);
          v34 = *((char *)v31 + 79) < 0 ? v31[8] : *((unsigned __int8 *)v31 + 79);
          if ((unint64_t)v33 < v34)
            std::string::operator=((std::string *)(v31 + 7), (const std::string *)v15);
        }
        do
        {
          while (1)
          {
            v35 = sub_20C67F73C((_QWORD *)(v58 + 160), byte_25498CD18);
            v36 = v35 ? (__int128 *)(v35 + 40) : sub_20C957390();
            if (*((char *)v36 + 23) < 0)
            {
              if (!*((_QWORD *)v36 + 1))
                goto LABEL_90;
            }
            else if (!*((_BYTE *)v36 + 23))
            {
              goto LABEL_90;
            }
            sub_20C93D9DC(v58, &v62);
            v37 = sub_20C67F73C((_QWORD *)(v62 + 96), (unsigned __int8 *)v36);
            if (v37)
            {
              v38 = (std::__shared_weak_count *)*((_QWORD *)v37 + 6);
              v64 = *((_QWORD *)v37 + 5);
              v65 = v38;
              if (v38)
              {
                v39 = (unint64_t *)&v38->__shared_owners_;
                do
                  v40 = __ldxr(v39);
                while (__stxr(v40 + 1, v39));
              }
            }
            else
            {
              v64 = 0;
              v65 = 0;
            }
            v41 = v63;
            if (v63)
            {
              v42 = (unint64_t *)&v63->__shared_owners_;
              do
                v43 = __ldaxr(v42);
              while (__stlxr(v43 - 1, v42));
              if (!v43)
              {
                ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
                std::__shared_weak_count::__release_weak(v41);
              }
            }
            v44 = v64;
            if (v64)
            {
              sub_20BDE881C(&v58, &v64);
              v45 = sub_20BEB97DC((uint64_t **)a2, (const void **)(v58 + 48), (__int128 *)(v58 + 48), (__int128 *)v15);
              if (!v46)
              {
                v47 = *((char *)v15 + 23) < 0 ? v15[1] : (void *)*((unsigned __int8 *)v15 + 23);
                v48 = *((char *)v45 + 79) < 0 ? v45[8] : *((unsigned __int8 *)v45 + 79);
                if ((unint64_t)v47 < v48)
                  std::string::operator=((std::string *)(v45 + 7), (const std::string *)v15);
              }
            }
            v49 = v65;
            if (v65)
            {
              v50 = (unint64_t *)&v65->__shared_owners_;
              do
                v51 = __ldaxr(v50);
              while (__stlxr(v51 - 1, v50));
              if (!v51)
                break;
            }
            if (!v44)
              goto LABEL_90;
          }
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
        while (v44);
LABEL_90:
        v52 = v67;
        if (v67)
        {
          v53 = (unint64_t *)&v67->__shared_owners_;
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 - 1, v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
            std::__shared_weak_count::__release_weak(v52);
          }
        }
        v55 = v59;
        if (v59)
        {
          v56 = (unint64_t *)&v59->__shared_owners_;
          do
            v57 = __ldaxr(v56);
          while (__stlxr(v57 - 1, v56));
          if (!v57)
          {
            ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
            std::__shared_weak_count::__release_weak(v55);
          }
        }
      }
      v5 += 2;
    }
    while (v5 != v6);
  }
  v66 = (void **)&v60;
  sub_20BDE9EB0(&v66);
}

void sub_20C7AB234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19)
{
  uint64_t v19;

  __cxa_guard_abort(&qword_25498CD30);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  a19 = (void **)&a12;
  sub_20BDE9EB0(&a19);
  sub_20BDE9D48(v19, *(_QWORD **)(v19 + 8));
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdMtlxDiscoveryPlugin::GetSearchURIs(pxrInternal__aapl__pxrReserved__::UsdMtlxDiscoveryPlugin *this)
{
  return (uint64_t)this + 48;
}

uint64_t sub_20C7AB2CC()
{
  uint64_t *v0;

  v0 = sub_20C7AB9E0();
  return sub_20C7ABB00(v0);
}

void sub_20C7AB2E4(uint64_t a1)
{
  void *v1;

  sub_20C7ABC28(a1);
  operator delete(v1);
}

__int128 *sub_20C7AB2F8(uint64_t a1)
{
  unsigned __int8 *v2;
  __int128 *v3;
  void *__p[2];
  char v6;

  sub_20BDDC0E4(__p, off_25473DCD8[0]);
  v2 = sub_20C67F73C((_QWORD *)(a1 + 160), (unsigned __int8 *)__p);
  if (v2)
    v3 = (__int128 *)(v2 + 40);
  else
    v3 = sub_20C957390();
  if (v6 < 0)
    operator delete(__p[0]);
  return v3;
}

void sub_20C7AB364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t sub_20C7AB380()
{
  char *v0;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  _QWORD *v5;
  _QWORD *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v11;
  unsigned int v12;
  void **v13;
  char v14;

  v0 = (char *)atomic_load(&qword_25498CD10);
  if (!v0)
  {
    v0 = (char *)operator new(0x20uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0, "mtlx", 0);
    v2 = *(_QWORD *)v0;
    if ((*(_QWORD *)v0 & 7) != 0)
    {
      v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
      do
        v4 = __ldxr(v3);
      while (__stxr(v4 + 2, v3));
      if ((v4 & 1) == 0)
        v2 &= 0xFFFFFFFFFFFFFFF8;
    }
    *((_QWORD *)v0 + 1) = 0;
    *((_QWORD *)v0 + 2) = 0;
    *((_QWORD *)v0 + 3) = 0;
    v13 = (void **)(v0 + 8);
    v14 = 0;
    v5 = operator new(8uLL);
    *((_QWORD *)v0 + 1) = v5;
    *((_QWORD *)v0 + 2) = v5;
    *v5 = v2;
    v6 = v5 + 1;
    *((_QWORD *)v0 + 3) = v5 + 1;
    if ((v2 & 7) != 0)
    {
      v7 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        *v5 &= 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)v0 + 2) = v6;
      do
        v9 = __ldxr(v7);
      while (__stlxr(v9 - 2, v7));
    }
    else
    {
      *((_QWORD *)v0 + 2) = v6;
    }
    while (!__ldaxr(&qword_25498CD10))
    {
      if (!__stlxr((unint64_t)v0, &qword_25498CD10))
        return (unint64_t)v0;
    }
    __clrex();
    v13 = (void **)(v0 + 8);
    sub_20BEEB2B8(&v13);
    if ((*(_QWORD *)v0 & 7) != 0)
    {
      v11 = (unsigned int *)(*(_QWORD *)v0 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
    operator delete(v0);
    return atomic_load(&qword_25498CD10);
  }
  return (unint64_t)v0;
}

void sub_20C7AB4C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  _QWORD *v9;
  uint64_t v10;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;

  sub_20BEEB2B8(&a9);
  if ((v10 & 7) != 0)
  {
    v12 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  if ((*v9 & 7) != 0)
  {
    v14 = (unsigned int *)(*v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_20C7AB528(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void **v15;
  unsigned __int8 *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v3 = *(uint64_t **)(a1 + 136);
  for (i = *(uint64_t **)(a1 + 144); v3 != i; v3 += 2)
  {
    v8 = *v3;
    v7 = v3[1];
    v24 = *v3;
    v25 = (std::__shared_weak_count *)v7;
    if (v7)
    {
      v9 = (unint64_t *)(v7 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    sub_20C93B264(v8, &v23);
    if (!(_QWORD)v23)
      goto LABEL_23;
    v11 = (char)a2[23];
    v12 = *((_QWORD *)a2 + 1);
    if (v11 >= 0)
      v12 = a2[23];
    if (v12)
    {
      v13 = *(unsigned __int8 *)(v8 + 47);
      if ((v13 & 0x80u) == 0)
        v14 = *(unsigned __int8 *)(v8 + 47);
      else
        v14 = *(_QWORD *)(v8 + 32);
      if (v14 != v12)
        goto LABEL_23;
      v15 = (const void **)(v8 + 24);
      if (v11 >= 0)
        v16 = a2;
      else
        v16 = *(unsigned __int8 **)a2;
      if ((v13 & 0x80) != 0)
      {
        if (memcmp(*v15, v16, *(_QWORD *)(v8 + 32)))
          goto LABEL_23;
      }
      else if (*(_BYTE *)(v8 + 47))
      {
        while (*(unsigned __int8 *)v15 == *v16)
        {
          v15 = (const void **)((char *)v15 + 1);
          ++v16;
          if (!--v13)
            goto LABEL_22;
        }
        goto LABEL_23;
      }
    }
LABEL_22:
    sub_20BDEA72C((char **)a3, &v23);
LABEL_23:
    v17 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
    if (*((_QWORD *)&v23 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v20 = v25;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
}

void sub_20C7AB6AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a11);
  sub_20BDE9EB0((void ***)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20C7AB6DC(uint64_t *a1, uint64_t *a2, uint64_t *a3, __int128 *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, __int128 *a8, __int128 *a9)
{
  unint64_t v10;
  unint64_t v11;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t *v28;

  v10 = 0x84BDA12F684BDA13 * ((a1[1] - *a1) >> 3);
  v11 = v10 + 1;
  if (v10 + 1 > 0x12F684BDA12F684)
    sub_20BDDF694();
  if (0x97B425ED097B426 * ((a1[2] - *a1) >> 3) > v11)
    v11 = 0x97B425ED097B426 * ((a1[2] - *a1) >> 3);
  if (0x84BDA12F684BDA13 * ((a1[2] - *a1) >> 3) >= 0x97B425ED097B42)
    v19 = 0x12F684BDA12F684;
  else
    v19 = v11;
  v28 = a1 + 2;
  if (v19)
  {
    v23 = v10;
    v20 = (char *)sub_20C1E9B8C((uint64_t)(a1 + 2), v19);
    v10 = v23;
  }
  else
  {
    v20 = 0;
  }
  v24 = v20;
  v25 = &v20[216 * v10];
  v27 = &v20[216 * v19];
  sub_20C7AB854((uint64_t)(a1 + 2), (uint64_t)v25, a2, a3, a4, a5, a6, a7, a8, a9);
  v26 = v25 + 216;
  sub_20C1E9AF0(a1, &v24);
  v21 = a1[1];
  sub_20C1E9CC4((uint64_t)&v24);
  return v21;
}

void sub_20C7AB840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20C1E9CC4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C7AB854(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, __int128 *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, __int128 *a9, __int128 *a10)
{
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  __int128 __p;
  uint64_t v14;
  _OWORD v15[2];
  int v16;
  __int128 v17;
  uint64_t v18;

  v17 = 0uLL;
  v18 = 0;
  memset(v15, 0, sizeof(v15));
  v16 = 1065353216;
  __p = 0uLL;
  v14 = 0;
  v12 = 0;
  sub_20C1E936C(a2, a3, a4, a5, a6, a7, a8, a9, a10, &v17, (uint64_t)v15, &__p, &v12);
  if ((v12 & 7) != 0)
  {
    v10 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  if (SHIBYTE(v14) < 0)
    operator delete((void *)__p);
  sub_20C1E7FB4((uint64_t)v15);
  if (SHIBYTE(v18) < 0)
    operator delete((void *)v17);
}

void sub_20C7AB924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  va_list va1;
  uint64_t v15;
  uint64_t v16;
  va_list va2;

  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  v11 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v13 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  if ((v11 & 7) != 0)
  {
    v9 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  sub_20C96B794((uint64_t)va, (uint64_t)va1, (uint64_t)va2, v7 - 40);
  _Unwind_Resume(a1);
}

BOOL sub_20C7AB964(uint64_t a1)
{
  unsigned __int8 *v2;
  void *__p[2];
  char v5;

  sub_20BDDC0E4(__p, off_25473DD08[0]);
  v2 = sub_20C67F73C((_QWORD *)(a1 + 160), (unsigned __int8 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  return v2 != 0;
}

void sub_20C7AB9C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20C7AB9E0()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C1E7A44((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C7ABAB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_20C7ABB00(uint64_t *a1)
{
  _QWORD *v2;
  char *v3;
  uint64_t result;
  _QWORD *v5;

  v2 = operator new(8uLL);
  *v2 = &unk_24C54B708;
  v5 = v2;
  pxrInternal__aapl__pxrReserved__::TfType::SetFactory(a1, (uint64_t *)&v5, v3);
  result = (uint64_t)v5;
  v5 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_20C7ABB64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_20C7ABB90(pxrInternal__aapl__pxrReserved__::TfType::FactoryBase *a1)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::TfType::FactoryBase::~FactoryBase(a1);
  operator delete(v1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20C7ABBA4@<X0>(pxrInternal__aapl__pxrReserved__::UsdMtlxDiscoveryPlugin **a1@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdMtlxDiscoveryPlugin *v2;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v4;

  v2 = (pxrInternal__aapl__pxrReserved__::UsdMtlxDiscoveryPlugin *)operator new(0x48uLL);
  pxrInternal__aapl__pxrReserved__::UsdMtlxDiscoveryPlugin::UsdMtlxDiscoveryPlugin(v2);
  *a1 = v2;
  v4 = 0;
  return sub_20C7ABBFC(&v4);
}

void sub_20C7ABBE8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20C7ABBFC(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  sub_20BF1D8F4((int)a1, *a1);
  return a1;
}

void sub_20C7ABC28(uint64_t a1)
{
  void **v2;
  const void *v3;
  void **v4;

  *(_QWORD *)a1 = off_24C54B6C0;
  v2 = (void **)(a1 + 24);
  v4 = (void **)(a1 + 48);
  sub_20BDE5038(&v4);
  v4 = v2;
  sub_20BDE5038(&v4);
  pxrInternal__aapl__pxrReserved__::NdrDiscoveryPlugin::~NdrDiscoveryPlugin((unsigned int **)a1, v3);
}

void sub_20C7ABC80()
{
  if (!atomic_load((unint64_t *)off_25473DBA0))
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<std::string>((uint64_t)&off_25473DBA0);
    atomic_load((unint64_t *)off_25473DBA0);
  }
}

void pxrInternal__aapl__pxrReserved__::UsdMtlxParserPlugin::Parse(char *a1@<X1>, char *a2@<X2>, _QWORD *a3@<X8>)
{
  _DWORD **v5;
  int v6;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  std::__shared_weak_count *size;
  void *v13;
  uint64_t *EmptyString;
  char *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unsigned __int8 *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  unsigned int *v25;
  unsigned int v26;
  std::__shared_weak_count *v27;
  unint64_t *p_size;
  unint64_t v29;
  pxrInternal__aapl__pxrReserved__::SdrNodeContext_StaticTokenType *v30;
  unint64_t *v31;
  unint64_t v32;
  const std::string *SourceURI;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  __int128 *v37;
  pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType *v38;
  std::string *v39;
  uint64_t *v40;
  unint64_t *v41;
  unint64_t v42;
  pxrInternal__aapl__pxrReserved__::TfToken *v43;
  uint64_t *v44;
  unint64_t v45;
  const char *v46;
  unint64_t *v47;
  unint64_t v48;
  pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType *v49;
  unint64_t *v50;
  unint64_t v51;
  pxrInternal__aapl__pxrReserved__::TfToken *v52;
  uint64_t *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType *v57;
  unint64_t *v58;
  unint64_t v59;
  pxrInternal__aapl__pxrReserved__::TfToken *v60;
  uint64_t *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType *v65;
  unint64_t *v66;
  unint64_t v67;
  pxrInternal__aapl__pxrReserved__::TfToken *v68;
  uint64_t *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  int v74;
  unint64_t v75;
  const char *v76;
  std::string *v77;
  __int128 v78;
  unint64_t v79;
  const char *v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  char *v84;
  std::string::size_type v85;
  __int128 v86;
  std::string *v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  std::string *v94;
  __int128 v95;
  std::string *v96;
  __int128 *v97;
  uint64_t v98;
  __int128 *v99;
  uint64_t v100;
  std::string::size_type v101;
  uint64_t *v102;
  char v103;
  uint64_t v104;
  __int128 *v105;
  std::string *v106;
  __int128 v107;
  std::string *v108;
  uint64_t v109;
  int v110;
  unsigned int v111;
  unsigned int v112;
  int v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  uint64_t v117;
  __int128 v118;
  pxrInternal__aapl__pxrReserved__ *v119;
  std::string *v120;
  __int128 v121;
  uint64_t v122;
  _BOOL4 v123;
  std::string *v124;
  std::__shared_weak_count *v125;
  unint64_t *p_shared_owners;
  unint64_t v127;
  unsigned __int8 v128;
  uint64_t v129;
  unsigned __int8 *v130;
  __int128 *v131;
  std::string::size_type v132;
  std::string *v133;
  unint64_t v134;
  pxrInternal__aapl__pxrReserved__ *v135;
  std::string *v136;
  std::string::size_type *v137;
  std::string::size_type v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  unint64_t *v142;
  unint64_t v143;
  std::string::size_type *i;
  std::string::size_type v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  unint64_t *v149;
  unint64_t v150;
  pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType *v151;
  _QWORD *v152;
  void **v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  unsigned int *v157;
  unsigned int v158;
  unint64_t *v159;
  unint64_t v160;
  void *v161;
  unsigned int *v162;
  unsigned int v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  unint64_t *v167;
  unint64_t v168;
  uint64_t v169;
  pxrInternal__aapl__pxrReserved__ *v170;
  __int128 v171;
  void *__p[2];
  void *v173[2];
  void *v174[2];
  __int128 v175;
  _OWORD v176[2];
  _BYTE v177[40];
  _QWORD **v178;
  _QWORD *v179[3];
  __int128 v180;
  unsigned __int128 v181;
  void *v182[2];
  char v183;
  std::string *v184;
  uint64_t *v185;
  uint64_t v186;
  std::__shared_weak_count *v187;
  uint64_t v188;
  std::__shared_weak_count *v189;
  std::string __str;
  std::string *v191;
  std::string *v192;
  unint64_t v193;
  std::string::size_type v194;
  std::string v195;
  const char *v196;
  unint64_t *v197;
  std::string **v198;

  v181 = 0uLL;
  v5 = (_DWORD **)(a1 + 96);
  v6 = a1[119];
  if ((v6 & 0x80) != 0)
  {
    a2 = (char *)*((_QWORD *)a1 + 13);
    if (a2)
    {
      v8 = *v5;
      if (a2 != (char *)4 || *v8 != 2020373613)
      {
        sub_20BDDBFAC(__p, v8, (unint64_t)a2);
        goto LABEL_20;
      }
LABEL_19:
      sub_20BDDC0E4(__p, "");
      goto LABEL_20;
    }
  }
  else if (a1[119])
  {
    if (v6 != 4 || *(_DWORD *)v5 != 2020373613)
    {
      *(_OWORD *)__p = *(_OWORD *)v5;
      v173[0] = *((void **)a1 + 14);
LABEL_20:
      pxrInternal__aapl__pxrReserved__::UsdMtlxGetDocument((uint64_t)__p, &v195);
      size = (std::__shared_weak_count *)v195.__r_.__value_.__l.__size_;
      v13 = (void *)v195.__r_.__value_.__r.__words[0];
      *(_OWORD *)&v195.__r_.__value_.__l.__data_ = 0uLL;
      v181 = __PAIR128__((unint64_t)size, (unint64_t)v13);
      if (SHIBYTE(v173[0]) < 0)
        operator delete(__p[0]);
      if (v13)
        goto LABEL_23;
      __p[0] = "usdMtlx/parser.cpp";
      __p[1] = "Parse";
      v173[0] = (void *)566;
      v173[1] = "virtual NdrNodeUniquePtr pxrInternal__aapl__pxrReserved__::UsdMtlxParserPlugin::Parse(const NdrNodeDiscoveryResult &)";
      LOBYTE(v174[0]) = 0;
      v10 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)__p, "document", 0);
      if ((v10 & 1) != 0)
      {
        v13 = 0;
        goto LABEL_23;
      }
      pxrInternal__aapl__pxrReserved__::NdrParserPlugin::GetInvalidNode((uint64_t)a1, a3);
LABEL_17:
      if (!size)
        return;
      goto LABEL_296;
    }
    goto LABEL_19;
  }
  v9 = a1[143];
  if ((v9 & 0x80u) != 0)
    v9 = *((_QWORD *)a1 + 16);
  if (!v9)
  {
    __p[0] = "usdMtlx/parser.cpp";
    __p[1] = "Parse";
    v173[0] = (void *)578;
    v173[1] = "virtual NdrNodeUniquePtr pxrInternal__aapl__pxrReserved__::UsdMtlxParserPlugin::Parse(const NdrNodeDiscoveryResult &)";
    LOBYTE(v174[0]) = 0;
    v79 = *(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8;
    if (v79)
    {
      v80 = (const char *)(v79 + 16);
      if (*(char *)(v79 + 39) < 0)
        v80 = *(const char **)v80;
    }
    else
    {
      v80 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)__p, (pxrInternal__aapl__pxrReserved__ *)"Invalid NdrNodeDiscoveryResult for identifier '%s': both resolvedUri and sourceCode fields are empty.", a2, v80);
    pxrInternal__aapl__pxrReserved__::NdrParserPlugin::GetInvalidNode((uint64_t)a1, a3);
    return;
  }
  pxrInternal__aapl__pxrReserved__::UsdMtlxGetDocumentFromString((const std::string *)a1 + 5, __p);
  v13 = __p[0];
  size = (std::__shared_weak_count *)__p[1];
  v181 = *(_OWORD *)__p;
  if (!__p[0])
  {
    __p[0] = "usdMtlx/parser.cpp";
    __p[1] = "Parse";
    v173[0] = (void *)572;
    v173[1] = "virtual NdrNodeUniquePtr pxrInternal__aapl__pxrReserved__::UsdMtlxParserPlugin::Parse(const NdrNodeDiscoveryResult &)";
    LOBYTE(v174[0]) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)__p, (pxrInternal__aapl__pxrReserved__ *)"Invalid mtlx source code.", v11);
    pxrInternal__aapl__pxrReserved__::NdrParserPlugin::GetInvalidNode((uint64_t)a1, a3);
    goto LABEL_17;
  }
LABEL_23:
  if ((*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v10);
  sub_20C7AE380((uint64_t)v13, (unsigned __int8 *)EmptyString, &v180);
  if ((_QWORD)v180)
  {
    __p[0] = a1;
    LOBYTE(__p[1]) = 1;
    *(_OWORD *)v173 = 0u;
    *(_OWORD *)v174 = 0u;
    v175 = 0u;
    memset(v176, 0, sizeof(v176));
    sub_20C1E96B8((uint64_t)v177, (uint64_t)(a1 + 144));
    v179[0] = 0;
    v179[1] = 0;
    v178 = v179;
    v16 = (std::__shared_weak_count *)*((_QWORD *)&v180 + 1);
    v17 = v180;
    v171 = v180;
    if (*((_QWORD *)&v180 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v180 + 1) + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    if (!v17)
    {
      v195.__r_.__value_.__r.__words[0] = (std::string::size_type)"usdMtlx/parser.cpp";
      v195.__r_.__value_.__l.__size_ = (std::string::size_type)"ParseElement";
      v195.__r_.__value_.__r.__words[2] = 433;
      v196 = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::ParseElement(ShaderBuilder *, const mx::ConstNodeDefPtr &)";
      LOBYTE(v197) = 0;
      if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v195, "nodeDef", 0) & 1) == 0)
        goto LABEL_274;
    }
    v20 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 56))(v17);
    sub_20C93BF6C(v17, &v195);
    sub_20C7AE44C((uint64_t *)&v195, v20, &v194);
    v21 = (std::__shared_weak_count *)v195.__r_.__value_.__l.__size_;
    if (v195.__r_.__value_.__l.__size_)
    {
      v22 = (unint64_t *)(v195.__r_.__value_.__l.__size_ + 8);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    if (!v194)
    {
      v24 = sub_20BDDC0E4(&v195, "");
      pxrInternal__aapl__pxrReserved__::UsdMtlxGetDocument((uint64_t)v24, &v191);
      sub_20C7AE44C((uint64_t *)&v191, v20, &__str);
      if ((v194 & 7) != 0)
      {
        v25 = (unsigned int *)(v194 & 0xFFFFFFFFFFFFFFF8);
        do
          v26 = __ldxr(v25);
        while (__stlxr(v26 - 2, v25));
      }
      v194 = __str.__r_.__value_.__r.__words[0];
      __str.__r_.__value_.__r.__words[0] = 0;
      v27 = (std::__shared_weak_count *)v192;
      if (v192)
      {
        p_size = &v192->__r_.__value_.__l.__size_;
        do
          v29 = __ldaxr(p_size);
        while (__stlxr(v29 - 1, p_size));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v195.__r_.__value_.__l.__data_);
      if (!v194)
      {
        v30 = (pxrInternal__aapl__pxrReserved__::SdrNodeContext_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrNodeContext);
        if (!v30)
          v30 = sub_20C5EC744(&pxrInternal__aapl__pxrReserved__::SdrNodeContext);
        sub_20BF32220(&v194, v30);
      }
    }
    sub_20BF32220(v176, &v194);
    *(_OWORD *)&v195.__r_.__value_.__l.__data_ = v171;
    if (*((_QWORD *)&v171 + 1))
    {
      v31 = (unint64_t *)(*((_QWORD *)&v171 + 1) + 8);
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    SourceURI = (const std::string *)pxrInternal__aapl__pxrReserved__::UsdMtlxGetSourceURI((uint64_t *)&v195);
    std::string::operator=((std::string *)v173, SourceURI);
    v34 = (std::__shared_weak_count *)v195.__r_.__value_.__l.__size_;
    if (v195.__r_.__value_.__l.__size_)
    {
      v35 = (unint64_t *)(v195.__r_.__value_.__l.__size_ + 8);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    std::string::operator=((std::string *)&v174[1], (const std::string *)v173);
    v37 = sub_20C7AB2F8(v171);
    v38 = (pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
    if (!v38)
      v38 = sub_20C1F61A0(&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
    v195.__r_.__value_.__r.__words[0] = (std::string::size_type)v38 + 32;
    v39 = (std::string *)sub_20C5DEC3C((uint64_t)v177, (_QWORD *)v38 + 4, (uint64_t)&unk_20CAC184C, (uint64_t **)&v195);
    std::string::operator=(v39 + 1, (const std::string *)v37);
    v40 = (uint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
    if (!v40)
      v40 = (uint64_t *)sub_20C1F61A0(&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
    *(_OWORD *)&v195.__r_.__value_.__l.__data_ = v171;
    if (*((_QWORD *)&v171 + 1))
    {
      v41 = (unint64_t *)(*((_QWORD *)&v171 + 1) + 8);
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
    }
    v43 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C7AD570();
    if ((*((_QWORD *)v43 + 7) & 0xFFFFFFFFFFFFFFF8) != 0)
      v44 = (uint64_t *)((*((_QWORD *)v43 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v44 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v43);
    sub_20C7AE5F4((uint64_t)__p, v40, (uint64_t)&v195, (unsigned __int8 *)v44);
    if (*((_QWORD *)&v171 + 1))
    {
      v47 = (unint64_t *)(*((_QWORD *)&v171 + 1) + 8);
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v171 + 1) + 16))(*((_QWORD *)&v171 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v171 + 1));
      }
    }
    v49 = (pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
    if (!v49)
      v49 = sub_20C1F61A0(&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
    *(_OWORD *)&v195.__r_.__value_.__l.__data_ = v171;
    if (*((_QWORD *)&v171 + 1))
    {
      v50 = (unint64_t *)(*((_QWORD *)&v171 + 1) + 8);
      do
        v51 = __ldxr(v50);
      while (__stxr(v51 + 1, v50));
    }
    v52 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C7AD570();
    if ((*((_QWORD *)v52 + 4) & 0xFFFFFFFFFFFFFFF8) != 0)
      v53 = (uint64_t *)((*((_QWORD *)v52 + 4) & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v53 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v52);
    sub_20C7AE5F4((uint64_t)__p, (uint64_t *)v49 + 3, (uint64_t)&v195, (unsigned __int8 *)v53);
    v54 = (std::__shared_weak_count *)v195.__r_.__value_.__l.__size_;
    if (v195.__r_.__value_.__l.__size_)
    {
      v55 = (unint64_t *)(v195.__r_.__value_.__l.__size_ + 8);
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
    v57 = (pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
    if (!v57)
      v57 = sub_20C1F61A0(&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
    *(_OWORD *)&v195.__r_.__value_.__l.__data_ = v171;
    if (*((_QWORD *)&v171 + 1))
    {
      v58 = (unint64_t *)(*((_QWORD *)&v171 + 1) + 8);
      do
        v59 = __ldxr(v58);
      while (__stxr(v59 + 1, v58));
    }
    v60 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C7AD570();
    if ((*((_QWORD *)v60 + 9) & 0xFFFFFFFFFFFFFFF8) != 0)
      v61 = (uint64_t *)((*((_QWORD *)v60 + 9) & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v61 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v60);
    sub_20C7AE5F4((uint64_t)__p, (uint64_t *)v57 + 8, (uint64_t)&v195, (unsigned __int8 *)v61);
    v62 = (std::__shared_weak_count *)v195.__r_.__value_.__l.__size_;
    if (v195.__r_.__value_.__l.__size_)
    {
      v63 = (unint64_t *)(v195.__r_.__value_.__l.__size_ + 8);
      do
        v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
    }
    v65 = (pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
    if (!v65)
      v65 = sub_20C1F61A0(&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
    *(_OWORD *)&v195.__r_.__value_.__l.__data_ = v171;
    if (*((_QWORD *)&v171 + 1))
    {
      v66 = (unint64_t *)(*((_QWORD *)&v171 + 1) + 8);
      do
        v67 = __ldxr(v66);
      while (__stxr(v67 + 1, v66));
    }
    v68 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C7AD570();
    if ((*((_QWORD *)v68 + 8) & 0xFFFFFFFFFFFFFFF8) != 0)
      v69 = (uint64_t *)((*((_QWORD *)v68 + 8) & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v69 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v68);
    v70 = (uint64_t)sub_20C7AE5F4((uint64_t)__p, (uint64_t *)v65 + 1, (uint64_t)&v195, (unsigned __int8 *)v69);
    v71 = (std::__shared_weak_count *)v195.__r_.__value_.__l.__size_;
    if (v195.__r_.__value_.__l.__size_)
    {
      v72 = (unint64_t *)(v195.__r_.__value_.__l.__size_ + 8);
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
    v191 = 0;
    v192 = 0;
    v193 = 0;
    v74 = *(unsigned __int8 *)(v171 + 71);
    v75 = *(_QWORD *)(v171 + 56);
    if ((v74 & 0x80u) == 0)
      v75 = *(unsigned __int8 *)(v171 + 71);
    if (v75 >= 0x10)
    {
      v76 = (v74 & 0x80u) == 0 ? (const char *)(v171 + 48) : *(const char **)(v171 + 48);
      v70 = strncmp(v76, "ND_geompropvalue", 0x10uLL);
      if (!(_DWORD)v70)
      {
        v70 = (uint64_t)sub_20BDDC0E4(&__str, "$geomprop");
        v77 = v192;
        if ((unint64_t)v192 >= v193)
        {
          v81 = 0xAAAAAAAAAAAAAAABLL * (((char *)v192 - (char *)v191) >> 3);
          v82 = v81 + 1;
          if (v81 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_20BDDF694();
          if (0x5555555555555556 * ((uint64_t)(v193 - (_QWORD)v191) >> 3) > v82)
            v82 = 0x5555555555555556 * ((uint64_t)(v193 - (_QWORD)v191) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v193 - (_QWORD)v191) >> 3) >= 0x555555555555555)
            v83 = 0xAAAAAAAAAAAAAAALL;
          else
            v83 = v82;
          v197 = &v193;
          if (v83)
            v84 = (char *)sub_20BDE4FF4((uint64_t)&v193, v83);
          else
            v84 = 0;
          v85 = (std::string::size_type)&v84[24 * v81];
          v195.__r_.__value_.__r.__words[0] = (std::string::size_type)v84;
          v195.__r_.__value_.__l.__size_ = v85;
          v196 = &v84[24 * v83];
          v86 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
          *(_QWORD *)(v85 + 16) = *((_QWORD *)&__str.__r_.__value_.__l + 2);
          *(_OWORD *)v85 = v86;
          memset(&__str, 0, sizeof(__str));
          v195.__r_.__value_.__r.__words[2] = v85 + 24;
          sub_20BDF34C0((uint64_t *)&v191, &v195);
          v87 = v192;
          v70 = sub_20BDF3648((uint64_t)&v195);
          v192 = v87;
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
        }
        else
        {
          v78 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
          v192->__r_.__value_.__r.__words[2] = __str.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v77->__r_.__value_.__l.__data_ = v78;
          v192 = v77 + 1;
        }
        v74 = *(unsigned __int8 *)(v171 + 71);
      }
    }
    v88 = (_QWORD *)(v171 + 48);
    if ((v74 & 0x80) != 0)
    {
      if (*(_QWORD *)(v171 + 56) != 19)
        goto LABEL_165;
      v88 = (_QWORD *)*v88;
    }
    else if (v74 != 19)
    {
      goto LABEL_165;
    }
    v89 = (_QWORD *)*v88;
    v90 = v88[1];
    v91 = *(_QWORD *)((char *)v88 + 11);
    if (v89 == (_QWORD *)0x6F637865745F444ELL && v90 == 0x746365765F64726FLL && v91 == 0x32726F746365765FLL)
    {
      sub_20C7AE74C((pxrInternal__aapl__pxrReserved__ *)v70, (uint64_t)&v195);
      v94 = v192;
      if ((unint64_t)v192 >= v193)
      {
        v96 = (std::string *)sub_20BE4EE50((uint64_t *)&v191, (__int128 *)&v195);
      }
      else
      {
        if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
        {
          sub_20BDDBFAC(v192, v195.__r_.__value_.__l.__data_, v195.__r_.__value_.__l.__size_);
        }
        else
        {
          v95 = *(_OWORD *)&v195.__r_.__value_.__l.__data_;
          v192->__r_.__value_.__r.__words[2] = v195.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v94->__r_.__value_.__l.__data_ = v95;
        }
        v96 = v94 + 1;
      }
      v192 = v96;
      if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v195.__r_.__value_.__l.__data_);
    }
LABEL_165:
    v97 = sub_20C957390();
    sub_20C924EEC((std::string *)v171, (uint64_t)v97, &v188);
    v98 = v188;
    if (!v188)
      goto LABEL_223;
    v99 = sub_20C957390();
    if (!sub_20C7AE8B4(v98, (unsigned __int8 *)v99))
    {
      LOBYTE(v98) = 0;
      goto LABEL_223;
    }
    sub_20C93B318(v188, &v186);
    v100 = v186;
    sub_20BDDC0E4(&__str, "geompropvalue");
    sub_20C7B04F8(v100, (unsigned __int8 *)&__str, (uint64_t)&v195);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v101 = v195.__r_.__value_.__l.__size_;
    v102 = (uint64_t *)v195.__r_.__value_.__r.__words[0];
    if (v195.__r_.__value_.__r.__words[0] != v195.__r_.__value_.__l.__size_)
    {
      v103 = 0;
      while (1)
      {
        v104 = *v102;
        sub_20BDDC0E4(&__str, "geomprop");
        sub_20C7B06AC(v104, (unsigned __int8 *)&__str, &v184);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        if (!v184)
          goto LABEL_193;
        v105 = sub_20C7AE9B8((uint64_t)v184);
        v106 = v192;
        if ((unint64_t)v192 >= v193)
        {
          v108 = (std::string *)sub_20BE4EE50((uint64_t *)&v191, v105);
        }
        else
        {
          if (*((char *)v105 + 23) < 0)
          {
            sub_20BDDBFAC(v192, *(void **)v105, *((_QWORD *)v105 + 1));
          }
          else
          {
            v107 = *v105;
            v192->__r_.__value_.__r.__words[2] = *((_QWORD *)v105 + 2);
            *(_OWORD *)&v106->__r_.__value_.__l.__data_ = v107;
          }
          v108 = v106 + 1;
        }
        v192 = v108;
        v109 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v102 + 56))(*v102);
        v110 = *(char *)(v109 + 23);
        if (v110 < 0)
        {
          if (*(_QWORD *)(v109 + 8) == 7)
          {
            v109 = *(_QWORD *)v109;
LABEL_185:
            v111 = bswap32(*(_DWORD *)v109);
            v112 = 1986356084;
            if (v111 == 1986356084 && (v111 = bswap32(*(_DWORD *)(v109 + 3)), v112 = 1953460786, v111 == 1953460786))
            {
              v113 = 0;
            }
            else if (v111 < v112)
            {
              v113 = -1;
            }
            else
            {
              v113 = 1;
            }
            if (!v113)
              v103 = 1;
          }
        }
        else if (v110 == 7)
        {
          goto LABEL_185;
        }
LABEL_193:
        v114 = (std::__shared_weak_count *)v185;
        if (v185)
        {
          v115 = (unint64_t *)(v185 + 1);
          do
            v116 = __ldaxr(v115);
          while (__stlxr(v116 - 1, v115));
          if (!v116)
          {
            ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
            std::__shared_weak_count::__release_weak(v114);
          }
        }
        v102 += 2;
        if (v102 == (uint64_t *)v101)
          goto LABEL_202;
      }
    }
    v103 = 0;
LABEL_202:
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v195;
    sub_20BDE9EB0((void ***)&__str);
    v117 = v186;
    sub_20BDDC0E4(&__str, "texcoord");
    sub_20C7B04F8(v117, (unsigned __int8 *)&__str, (uint64_t)&v195);
    v118 = *(_OWORD *)&v195.__r_.__value_.__l.__data_;
    v184 = &v195;
    sub_20BDE9EB0((void ***)&v184);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (*((_QWORD *)&v118 + 1) == (_QWORD)v118)
    {
      if ((v103 & 1) != 0)
        goto LABEL_217;
      v122 = v186;
      sub_20BDDC0E4(&__str, "tiledimage");
      sub_20C7B04F8(v122, (unsigned __int8 *)&__str, (uint64_t)&v195);
      if (v195.__r_.__value_.__l.__size_ == v195.__r_.__value_.__r.__words[0])
      {
        v169 = v186;
        sub_20BDDC0E4(v182, "image");
        sub_20C7B04F8(v169, (unsigned __int8 *)v182, (uint64_t)&v184);
        v123 = v185 != (uint64_t *)v184;
        v198 = &v184;
        sub_20BDE9EB0((void ***)&v198);
        if (v183 < 0)
          operator delete(v182[0]);
      }
      else
      {
        v123 = 1;
      }
      v184 = &v195;
      sub_20BDE9EB0((void ***)&v184);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (!v123)
        goto LABEL_217;
      sub_20C7AE74C(v170, (uint64_t)&v195);
      v120 = v192;
      if ((unint64_t)v192 < v193)
      {
        if ((SHIBYTE(v195.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_207;
        goto LABEL_212;
      }
    }
    else
    {
      sub_20C7AE74C(v119, (uint64_t)&v195);
      v120 = v192;
      if ((unint64_t)v192 < v193)
      {
        if ((SHIBYTE(v195.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_207:
          v121 = *(_OWORD *)&v195.__r_.__value_.__l.__data_;
          v120->__r_.__value_.__r.__words[2] = v195.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v120->__r_.__value_.__l.__data_ = v121;
LABEL_213:
          v124 = v120 + 1;
          goto LABEL_214;
        }
LABEL_212:
        sub_20BDDBFAC(v192, v195.__r_.__value_.__l.__data_, v195.__r_.__value_.__l.__size_);
        goto LABEL_213;
      }
    }
    v124 = (std::string *)sub_20BE4EE50((uint64_t *)&v191, (__int128 *)&v195);
LABEL_214:
    v192 = v124;
    if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v195.__r_.__value_.__l.__data_);
    v103 = 1;
LABEL_217:
    v125 = v187;
    if (v187)
    {
      p_shared_owners = (unint64_t *)&v187->__shared_owners_;
      do
        v127 = __ldaxr(p_shared_owners);
      while (__stlxr(v127 - 1, p_shared_owners));
      if (!v127)
      {
        ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
        std::__shared_weak_count::__release_weak(v125);
      }
    }
    LOBYTE(v98) = v103;
LABEL_223:
    v128 = atomic_load((unsigned __int8 *)&qword_25498CD80);
    if ((v128 & 1) == 0 && __cxa_guard_acquire(&qword_25498CD80))
    {
      sub_20BDDC0E4(byte_25498CD68, "internalgeomprops");
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_25498CD68, &dword_20BDBC000);
      __cxa_guard_release(&qword_25498CD80);
    }
    v129 = v171;
    v130 = sub_20C67F73C((_QWORD *)(v171 + 160), byte_25498CD68);
    if (v130)
      v131 = (__int128 *)(v130 + 40);
    else
      v131 = sub_20C957390();
    if (*((char *)v131 + 23) < 0)
    {
      if (!*((_QWORD *)v131 + 1))
      {
LABEL_239:
        sub_20C94DA7C(v171, (uint64_t)&v195);
        v138 = v195.__r_.__value_.__l.__size_;
        v137 = (std::string::size_type *)v195.__r_.__value_.__r.__words[0];
        if (v195.__r_.__value_.__r.__words[0] != v195.__r_.__value_.__l.__size_)
        {
          do
          {
            v139 = (std::__shared_weak_count *)v137[1];
            __str.__r_.__value_.__r.__words[0] = *v137;
            __str.__r_.__value_.__l.__size_ = (std::string::size_type)v139;
            if (v139)
            {
              v140 = (unint64_t *)&v139->__shared_owners_;
              do
                v141 = __ldxr(v140);
              while (__stxr(v141 + 1, v140));
            }
            sub_20C7AEA40(__p, (uint64_t *)&__str, 0, (uint64_t *)&v191, v98);
            if (v139)
            {
              v142 = (unint64_t *)&v139->__shared_owners_;
              do
                v143 = __ldaxr(v142);
              while (__stlxr(v143 - 1, v142));
              if (!v143)
              {
                ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
                std::__shared_weak_count::__release_weak(v139);
              }
            }
            v137 += 2;
          }
          while (v137 != (std::string::size_type *)v138);
          v129 = v171;
        }
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v195;
        sub_20BDE9EB0((void ***)&__str);
        sub_20C94DDFC(v129, (uint64_t)&v195);
        v145 = v195.__r_.__value_.__l.__size_;
        for (i = (std::string::size_type *)v195.__r_.__value_.__r.__words[0]; i != (std::string::size_type *)v145; i += 2)
        {
          v146 = (std::__shared_weak_count *)i[1];
          __str.__r_.__value_.__r.__words[0] = *i;
          __str.__r_.__value_.__l.__size_ = (std::string::size_type)v146;
          if (v146)
          {
            v147 = (unint64_t *)&v146->__shared_owners_;
            do
              v148 = __ldxr(v147);
            while (__stxr(v148 + 1, v147));
          }
          sub_20C7AEA40(__p, (uint64_t *)&__str, 1, 0, 0);
          if (v146)
          {
            v149 = (unint64_t *)&v146->__shared_owners_;
            do
              v150 = __ldaxr(v149);
            while (__stlxr(v150 - 1, v149));
            if (!v150)
            {
              ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
              std::__shared_weak_count::__release_weak(v146);
            }
          }
        }
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v195;
        sub_20BDE9EB0((void ***)&__str);
        sub_20BEE380C("|", v191, v192, &v195);
        v151 = (pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
        if (!v151)
          v151 = sub_20C1F61A0(&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
        v184 = (std::string *)((char *)v151 + 48);
        v152 = sub_20C5DEC3C((uint64_t)v177, (_QWORD *)v151 + 6, (uint64_t)&unk_20CAC184C, (uint64_t **)&v184);
        v153 = (void **)(v152 + 3);
        if (*((char *)v152 + 47) < 0)
          operator delete(*v153);
        *(std::string *)v153 = v195;
        v154 = v189;
        if (v189)
        {
          v155 = (unint64_t *)&v189->__shared_owners_;
          do
            v156 = __ldaxr(v155);
          while (__stlxr(v156 - 1, v155));
          if (!v156)
          {
            ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
            std::__shared_weak_count::__release_weak(v154);
          }
        }
        v195.__r_.__value_.__r.__words[0] = (std::string::size_type)&v191;
        sub_20BDE5038((void ***)&v195);
        if ((v194 & 7) != 0)
        {
          v157 = (unsigned int *)(v194 & 0xFFFFFFFFFFFFFFF8);
          do
            v158 = __ldxr(v157);
          while (__stlxr(v158 - 2, v157));
        }
        v16 = (std::__shared_weak_count *)*((_QWORD *)&v171 + 1);
LABEL_274:
        if (v16)
        {
          v159 = (unint64_t *)&v16->__shared_owners_;
          do
            v160 = __ldaxr(v159);
          while (__stlxr(v160 - 1, v159));
          if (!v160)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
        if (LOBYTE(__p[1]))
        {
          v161 = operator new(0x220uLL);
          memset(&v195, 0, sizeof(v195));
          pxrInternal__aapl__pxrReserved__::SdrShaderNode::SdrShaderNode((uint64_t)v161, (uint64_t *)__p[0], (uint64_t *)__p[0] + 1, (__int128 *)((char *)__p[0] + 24), (uint64_t *)__p[0] + 6, (uint64_t *)v176, (uint64_t *)__p[0] + 8, (__int128 *)v173, (__int128 *)&v174[1], (uint64_t)v176 + 8, (uint64_t)v177, (__int128 *)&v195);
          *a3 = v161;
          if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v195.__r_.__value_.__l.__data_);
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::NdrParserPlugin::GetInvalidNode((uint64_t)__p[0], a3);
        }
        sub_20BDE9D48((uint64_t)&v178, v179[0]);
        sub_20C1E7FB4((uint64_t)v177);
        v195.__r_.__value_.__r.__words[0] = (std::string::size_type)v176 + 8;
        sub_20C086448((void ***)&v195);
        if ((v176[0] & 7) != 0)
        {
          v162 = (unsigned int *)(*(_QWORD *)&v176[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v163 = __ldxr(v162);
          while (__stlxr(v163 - 2, v162));
        }
        if (SHIBYTE(v175) < 0)
          operator delete(v174[1]);
        if (SHIBYTE(v174[0]) < 0)
          operator delete(v173[0]);
        goto LABEL_290;
      }
    }
    else if (!*((_BYTE *)v131 + 23))
    {
      goto LABEL_239;
    }
    pxrInternal__aapl__pxrReserved__::UsdMtlxSplitStringArray((std::string *)v131, (uint64_t *)&v195);
    v132 = v195.__r_.__value_.__l.__size_;
    v133 = (std::string *)v195.__r_.__value_.__r.__words[0];
    if (v195.__r_.__value_.__r.__words[0] == v195.__r_.__value_.__l.__size_)
    {
      v136 = (std::string *)v195.__r_.__value_.__r.__words[0];
    }
    else
    {
      do
      {
        v134 = sub_20C7AD570();
        v135 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::TfToken::operator==((pxrInternal__aapl__pxrReserved__::TfToken *)(v134 + 152), (unsigned __int8 *)v133);
        if ((_DWORD)v135)
        {
          sub_20C7AE74C(v135, (uint64_t)&__str);
          std::string::operator=(v133, &__str);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
        }
        ++v133;
      }
      while (v133 != (std::string *)v132);
      v133 = (std::string *)v195.__r_.__value_.__l.__size_;
      v136 = (std::string *)v195.__r_.__value_.__r.__words[0];
    }
    sub_20BEC8D0C((uint64_t *)&v191, v192, v136, (__int128 *)v133, 0xAAAAAAAAAAAAAAABLL * (((char *)v133 - (char *)v136) >> 3));
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v195;
    sub_20BDE5038((void ***)&__str);
    goto LABEL_239;
  }
  __p[0] = "usdMtlx/parser.cpp";
  __p[1] = "Parse";
  v173[0] = (void *)585;
  v173[1] = "virtual NdrNodeUniquePtr pxrInternal__aapl__pxrReserved__::UsdMtlxParserPlugin::Parse(const NdrNodeDiscoveryResult &)";
  LOBYTE(v174[0]) = 0;
  v45 = *(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8;
  if (v45)
  {
    v46 = (const char *)(v45 + 16);
    if (*(char *)(v45 + 39) < 0)
      v46 = *(const char **)v46;
  }
  else
  {
    v46 = "";
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)__p, (pxrInternal__aapl__pxrReserved__ *)"Invalid MaterialX NodeDef; unknown node name ' %s '",
    v15,
    v46);
  pxrInternal__aapl__pxrReserved__::NdrParserPlugin::GetInvalidNode((uint64_t)a1, a3);
LABEL_290:
  v164 = (std::__shared_weak_count *)*((_QWORD *)&v180 + 1);
  if (*((_QWORD *)&v180 + 1))
  {
    v165 = (unint64_t *)(*((_QWORD *)&v180 + 1) + 8);
    do
      v166 = __ldaxr(v165);
    while (__stlxr(v166 - 1, v165));
    if (!v166)
    {
      ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
      std::__shared_weak_count::__release_weak(v164);
    }
  }
  size = (std::__shared_weak_count *)*((_QWORD *)&v181 + 1);
  if (*((_QWORD *)&v181 + 1))
  {
LABEL_296:
    v167 = (unint64_t *)&size->__shared_owners_;
    do
      v168 = __ldaxr(v167);
    while (__stlxr(v168 - 1, v167));
    if (!v168)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_20C7AD01C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,char a46,uint64_t a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  uint64_t v53;
  uint64_t v55;
  unsigned int *v56;
  unsigned int v57;

  __cxa_guard_abort(&qword_25498CD80);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v53 - 216));
  *(_QWORD *)(v53 - 200) = v53 - 176;
  sub_20BDE5038((void ***)(v53 - 200));
  v55 = *(_QWORD *)(v53 - 152);
  if ((v55 & 7) != 0)
  {
    v56 = (unsigned int *)(v55 & 0xFFFFFFFFFFFFFFF8);
    do
      v57 = __ldxr(v56);
    while (__stlxr(v57 - 2, v56));
  }
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a15);
  sub_20C7AD3A0((uint64_t)&a17);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a44);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a46);
  _Unwind_Resume(a1);
}

uint64_t sub_20C7AD3A0(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  void **v6;

  sub_20BDE9D48(a1 + 136, *(_QWORD **)(a1 + 144));
  sub_20C1E7FB4(a1 + 96);
  v6 = (void **)(a1 + 72);
  sub_20C086448(&v6);
  v2 = *(_QWORD *)(a1 + 64);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

_QWORD *pxrInternal__aapl__pxrReserved__::UsdMtlxParserPlugin::GetDiscoveryTypes(pxrInternal__aapl__pxrReserved__::UsdMtlxParserPlugin *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8[2];

  v8[1] = *MEMORY[0x24BDAC8D0];
  v1 = atomic_load((unsigned __int8 *)&qword_25498CD50);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498CD50))
  {
    v3 = *(_QWORD *)sub_20C7AD570();
    v8[0] = v3;
    if ((v3 & 7) != 0)
    {
      v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v5 = __ldxr(v4);
      while (__stxr(v5 + 2, v4));
      if ((v5 & 1) == 0)
        v8[0] = (uint64_t)v4;
    }
    sub_20C374970(qword_25498CD38, v8, 1uLL);
    if ((v8[0] & 7) != 0)
    {
      v6 = (unsigned int *)(v8[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stlxr(v7 - 2, v6));
    }
    __cxa_atexit((void (*)(void *))sub_20C1984B4, qword_25498CD38, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498CD50);
  }
  return qword_25498CD38;
}

void sub_20C7AD530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unsigned int *v10;
  unsigned int v11;

  if ((a9 & 7) != 0)
  {
    v10 = (unsigned int *)(a9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  __cxa_guard_abort(&qword_25498CD50);
  _Unwind_Resume(a1);
}

unint64_t sub_20C7AD570()
{
  unint64_t *v0;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int *v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int *v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int *v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int *v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int *v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int *v64;
  unsigned int v65;
  uint64_t v66;
  unsigned int *v67;
  unsigned int v68;
  _QWORD *v69;
  uint64_t v70;
  unint64_t v71;
  unsigned int *v72;
  unsigned int v73;
  void ***v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int *v80;
  unsigned int v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int *v88;
  unsigned int v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int *v92;
  unsigned int v93;
  unsigned int *v94;
  unsigned int v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int *v98;
  unsigned int v99;
  unsigned int *v100;
  unsigned int v101;
  unsigned int *v102;
  unsigned int v103;
  unsigned int *v104;
  unsigned int v105;
  unsigned int *v106;
  unsigned int v107;
  unsigned int *v108;
  unsigned int v109;
  unsigned int *v110;
  unsigned int v111;
  unsigned int *v112;
  unsigned int v113;
  unsigned int *v114;
  unsigned int v115;
  unsigned int *v116;
  unsigned int v117;
  unsigned int *v118;
  unsigned int v119;
  uint64_t *v120;
  uint64_t *v121;
  uint64_t *v122;
  uint64_t *v123;
  uint64_t *v124;
  uint64_t *v125;
  uint64_t *v126;
  uint64_t *v127;
  uint64_t *v128;
  uint64_t *v129;
  uint64_t *v130;
  uint64_t *v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;

  v152 = *MEMORY[0x24BDAC8D0];
  v0 = (unint64_t *)atomic_load(&qword_25498CD58);
  if (!v0)
  {
    v0 = (unint64_t *)operator new(0xB8uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0, "mtlx", 0);
    v131 = (uint64_t *)(v0 + 1);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 1, "", 0);
    v130 = (uint64_t *)(v0 + 2);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 2, "defaultgeomprop", 0);
    v129 = (uint64_t *)(v0 + 3);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 3, "defaultinput", 0);
    v128 = (uint64_t *)(v0 + 4);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 4, "doc", 0);
    v127 = (uint64_t *)(v0 + 5);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 5, "enum", 0);
    v126 = (uint64_t *)(v0 + 6);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 6, "enumvalues", 0);
    v125 = (uint64_t *)(v0 + 7);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 7, "nodecategory", 0);
    v124 = (uint64_t *)(v0 + 8);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 8, "nodegroup", 0);
    v123 = (uint64_t *)(v0 + 9);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 9, "target", 0);
    v122 = (uint64_t *)(v0 + 10);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 10, "uifolder", 0);
    v121 = (uint64_t *)(v0 + 11);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 11, "uimax", 0);
    v120 = (uint64_t *)(v0 + 12);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 12, "uimin", 0);
    v2 = (uint64_t *)(v0 + 13);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 13, "uiname", 0);
    v3 = (uint64_t *)(v0 + 14);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 14, "uisoftmax", 0);
    v4 = (uint64_t *)(v0 + 15);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 15, "uisoftmin", 0);
    v5 = (uint64_t *)(v0 + 16);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 16, "uistep", 0);
    v6 = (uint64_t *)(v0 + 17);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 17, "unit", 0);
    v7 = (uint64_t *)(v0 + 18);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 18, "unittype", 0);
    v8 = (uint64_t *)(v0 + 19);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 19, "UV0", 0);
    v9 = *v0;
    v132 = v9;
    if ((v9 & 7) != 0)
    {
      v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 2, v10));
      if ((v11 & 1) == 0)
        v132 &= 0xFFFFFFFFFFFFFFF8;
    }
    v12 = *v131;
    v133 = v12;
    if ((v12 & 7) != 0)
    {
      v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 2, v13));
      if ((v14 & 1) == 0)
        v133 &= 0xFFFFFFFFFFFFFFF8;
    }
    v15 = *v130;
    v134 = v15;
    if ((v15 & 7) != 0)
    {
      v16 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 2, v16));
      if ((v17 & 1) == 0)
        v134 &= 0xFFFFFFFFFFFFFFF8;
    }
    v18 = *v129;
    v135 = v18;
    if ((v18 & 7) != 0)
    {
      v19 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 2, v19));
      if ((v20 & 1) == 0)
        v135 &= 0xFFFFFFFFFFFFFFF8;
    }
    v21 = *v128;
    v136 = v21;
    if ((v21 & 7) != 0)
    {
      v22 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 2, v22));
      if ((v23 & 1) == 0)
        v136 &= 0xFFFFFFFFFFFFFFF8;
    }
    v24 = *v127;
    v137 = v24;
    if ((v24 & 7) != 0)
    {
      v25 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 2, v25));
      if ((v26 & 1) == 0)
        v137 &= 0xFFFFFFFFFFFFFFF8;
    }
    v27 = *v126;
    v138 = v27;
    if ((v27 & 7) != 0)
    {
      v28 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 2, v28));
      if ((v29 & 1) == 0)
        v138 &= 0xFFFFFFFFFFFFFFF8;
    }
    v30 = *v125;
    v139 = v30;
    if ((v30 & 7) != 0)
    {
      v31 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 2, v31));
      if ((v32 & 1) == 0)
        v139 &= 0xFFFFFFFFFFFFFFF8;
    }
    v33 = *v124;
    v140 = v33;
    if ((v33 & 7) != 0)
    {
      v34 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFF8);
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 2, v34));
      if ((v35 & 1) == 0)
        v140 &= 0xFFFFFFFFFFFFFFF8;
    }
    v36 = *v123;
    v141 = v36;
    if ((v36 & 7) != 0)
    {
      v37 = (unsigned int *)(v36 & 0xFFFFFFFFFFFFFFF8);
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 2, v37));
      if ((v38 & 1) == 0)
        v141 &= 0xFFFFFFFFFFFFFFF8;
    }
    v39 = *v122;
    v142 = v39;
    if ((v39 & 7) != 0)
    {
      v40 = (unsigned int *)(v39 & 0xFFFFFFFFFFFFFFF8);
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 2, v40));
      if ((v41 & 1) == 0)
        v142 &= 0xFFFFFFFFFFFFFFF8;
    }
    v42 = *v121;
    v143 = v42;
    if ((v42 & 7) != 0)
    {
      v43 = (unsigned int *)(v42 & 0xFFFFFFFFFFFFFFF8);
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 2, v43));
      if ((v44 & 1) == 0)
        v143 &= 0xFFFFFFFFFFFFFFF8;
    }
    v45 = *v120;
    v144 = v45;
    if ((v45 & 7) != 0)
    {
      v46 = (unsigned int *)(v45 & 0xFFFFFFFFFFFFFFF8);
      do
        v47 = __ldxr(v46);
      while (__stxr(v47 + 2, v46));
      if ((v47 & 1) == 0)
        v144 &= 0xFFFFFFFFFFFFFFF8;
    }
    v48 = *v2;
    v145 = v48;
    if ((v48 & 7) != 0)
    {
      v49 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
      do
        v50 = __ldxr(v49);
      while (__stxr(v50 + 2, v49));
      if ((v50 & 1) == 0)
        v145 &= 0xFFFFFFFFFFFFFFF8;
    }
    v51 = *v3;
    v146 = v51;
    if ((v51 & 7) != 0)
    {
      v52 = (unsigned int *)(v51 & 0xFFFFFFFFFFFFFFF8);
      do
        v53 = __ldxr(v52);
      while (__stxr(v53 + 2, v52));
      if ((v53 & 1) == 0)
        v146 &= 0xFFFFFFFFFFFFFFF8;
    }
    v54 = *v4;
    v147 = v54;
    if ((v54 & 7) != 0)
    {
      v55 = (unsigned int *)(v54 & 0xFFFFFFFFFFFFFFF8);
      do
        v56 = __ldxr(v55);
      while (__stxr(v56 + 2, v55));
      if ((v56 & 1) == 0)
        v147 &= 0xFFFFFFFFFFFFFFF8;
    }
    v57 = *v5;
    v148 = v57;
    if ((v57 & 7) != 0)
    {
      v58 = (unsigned int *)(v57 & 0xFFFFFFFFFFFFFFF8);
      do
        v59 = __ldxr(v58);
      while (__stxr(v59 + 2, v58));
      if ((v59 & 1) == 0)
        v148 &= 0xFFFFFFFFFFFFFFF8;
    }
    v60 = *v6;
    v149 = v60;
    if ((v60 & 7) != 0)
    {
      v61 = (unsigned int *)(v60 & 0xFFFFFFFFFFFFFFF8);
      do
        v62 = __ldxr(v61);
      while (__stxr(v62 + 2, v61));
      if ((v62 & 1) == 0)
        v149 &= 0xFFFFFFFFFFFFFFF8;
    }
    v63 = *v7;
    v150 = v63;
    if ((v63 & 7) != 0)
    {
      v64 = (unsigned int *)(v63 & 0xFFFFFFFFFFFFFFF8);
      do
        v65 = __ldxr(v64);
      while (__stxr(v65 + 2, v64));
      if ((v65 & 1) == 0)
        v150 &= 0xFFFFFFFFFFFFFFF8;
    }
    v66 = *v8;
    v151 = v66;
    if ((v66 & 7) != 0)
    {
      v67 = (unsigned int *)(v66 & 0xFFFFFFFFFFFFFFF8);
      do
        v68 = __ldxr(v67);
      while (__stxr(v68 + 2, v67));
      if ((v68 & 1) == 0)
        v151 &= 0xFFFFFFFFFFFFFFF8;
    }
    v0[20] = 0;
    v0[21] = 0;
    v0[22] = 0;
    v69 = operator new(0xA0uLL);
    v70 = 0;
    v0[20] = (unint64_t)v69;
    v0[21] = (unint64_t)v69;
    v0[22] = (unint64_t)(v69 + 20);
    do
    {
      v71 = *(&v132 + v70);
      *v69 = v71;
      if ((v71 & 7) != 0)
      {
        v72 = (unsigned int *)(v71 & 0xFFFFFFFFFFFFFFF8);
        do
          v73 = __ldxr(v72);
        while (__stxr(v73 + 2, v72));
        if ((v73 & 1) == 0)
          *v69 &= 0xFFFFFFFFFFFFFFF8;
      }
      ++v70;
      ++v69;
    }
    while (v70 != 20);
    v74 = (void ***)&v152;
    v0[21] = (unint64_t)v69;
    do
    {
      v76 = (uint64_t)*--v74;
      v75 = v76;
      if ((v76 & 7) != 0)
      {
        v77 = (unsigned int *)(v75 & 0xFFFFFFFFFFFFFFF8);
        do
          v78 = __ldxr(v77);
        while (__stlxr(v78 - 2, v77));
      }
    }
    while (v74 != (void ***)&v132);
    while (!__ldaxr(&qword_25498CD58))
    {
      if (!__stlxr((unint64_t)v0, &qword_25498CD58))
        return (unint64_t)v0;
    }
    __clrex();
    v132 = (unint64_t)(v0 + 20);
    sub_20BEEB2B8((void ***)&v132);
    if ((*v8 & 7) != 0)
    {
      v80 = (unsigned int *)(*v8 & 0xFFFFFFFFFFFFFFF8);
      do
        v81 = __ldxr(v80);
      while (__stlxr(v81 - 2, v80));
    }
    if ((*v7 & 7) != 0)
    {
      v82 = (unsigned int *)(*v7 & 0xFFFFFFFFFFFFFFF8);
      do
        v83 = __ldxr(v82);
      while (__stlxr(v83 - 2, v82));
    }
    if ((*v6 & 7) != 0)
    {
      v84 = (unsigned int *)(*v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v85 = __ldxr(v84);
      while (__stlxr(v85 - 2, v84));
    }
    if ((*v5 & 7) != 0)
    {
      v86 = (unsigned int *)(*v5 & 0xFFFFFFFFFFFFFFF8);
      do
        v87 = __ldxr(v86);
      while (__stlxr(v87 - 2, v86));
    }
    if ((*v4 & 7) != 0)
    {
      v88 = (unsigned int *)(*v4 & 0xFFFFFFFFFFFFFFF8);
      do
        v89 = __ldxr(v88);
      while (__stlxr(v89 - 2, v88));
    }
    if ((*v3 & 7) != 0)
    {
      v90 = (unsigned int *)(*v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v91 = __ldxr(v90);
      while (__stlxr(v91 - 2, v90));
    }
    if ((*v2 & 7) != 0)
    {
      v92 = (unsigned int *)(*v2 & 0xFFFFFFFFFFFFFFF8);
      do
        v93 = __ldxr(v92);
      while (__stlxr(v93 - 2, v92));
    }
    if ((*v120 & 7) != 0)
    {
      v94 = (unsigned int *)(*v120 & 0xFFFFFFFFFFFFFFF8);
      do
        v95 = __ldxr(v94);
      while (__stlxr(v95 - 2, v94));
    }
    if ((*v121 & 7) != 0)
    {
      v96 = (unsigned int *)(*v121 & 0xFFFFFFFFFFFFFFF8);
      do
        v97 = __ldxr(v96);
      while (__stlxr(v97 - 2, v96));
    }
    if ((*v122 & 7) != 0)
    {
      v98 = (unsigned int *)(*v122 & 0xFFFFFFFFFFFFFFF8);
      do
        v99 = __ldxr(v98);
      while (__stlxr(v99 - 2, v98));
    }
    if ((*v123 & 7) != 0)
    {
      v100 = (unsigned int *)(*v123 & 0xFFFFFFFFFFFFFFF8);
      do
        v101 = __ldxr(v100);
      while (__stlxr(v101 - 2, v100));
    }
    if ((*v124 & 7) != 0)
    {
      v102 = (unsigned int *)(*v124 & 0xFFFFFFFFFFFFFFF8);
      do
        v103 = __ldxr(v102);
      while (__stlxr(v103 - 2, v102));
    }
    if ((*v125 & 7) != 0)
    {
      v104 = (unsigned int *)(*v125 & 0xFFFFFFFFFFFFFFF8);
      do
        v105 = __ldxr(v104);
      while (__stlxr(v105 - 2, v104));
    }
    if ((*v126 & 7) != 0)
    {
      v106 = (unsigned int *)(*v126 & 0xFFFFFFFFFFFFFFF8);
      do
        v107 = __ldxr(v106);
      while (__stlxr(v107 - 2, v106));
    }
    if ((*v127 & 7) != 0)
    {
      v108 = (unsigned int *)(*v127 & 0xFFFFFFFFFFFFFFF8);
      do
        v109 = __ldxr(v108);
      while (__stlxr(v109 - 2, v108));
    }
    if ((*v128 & 7) != 0)
    {
      v110 = (unsigned int *)(*v128 & 0xFFFFFFFFFFFFFFF8);
      do
        v111 = __ldxr(v110);
      while (__stlxr(v111 - 2, v110));
    }
    if ((*v129 & 7) != 0)
    {
      v112 = (unsigned int *)(*v129 & 0xFFFFFFFFFFFFFFF8);
      do
        v113 = __ldxr(v112);
      while (__stlxr(v113 - 2, v112));
    }
    if ((*v130 & 7) != 0)
    {
      v114 = (unsigned int *)(*v130 & 0xFFFFFFFFFFFFFFF8);
      do
        v115 = __ldxr(v114);
      while (__stlxr(v115 - 2, v114));
    }
    if ((*v131 & 7) != 0)
    {
      v116 = (unsigned int *)(*v131 & 0xFFFFFFFFFFFFFFF8);
      do
        v117 = __ldxr(v116);
      while (__stlxr(v117 - 2, v116));
    }
    if ((*v0 & 7) != 0)
    {
      v118 = (unsigned int *)(*v0 & 0xFFFFFFFFFFFFFFF8);
      do
        v119 = __ldxr(v118);
      while (__stlxr(v119 - 2, v118));
    }
    operator delete(v0);
    return atomic_load(&qword_25498CD58);
  }
  return (unint64_t)v0;
}

void sub_20C7ADFA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9, _QWORD *a10, _QWORD *a11, _QWORD *a12, _QWORD *a13, _QWORD *a14, _QWORD *a15, _QWORD *a16, _QWORD *a17, _QWORD *a18, _QWORD *a19, _QWORD *a20,void **a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int *v75;
  unsigned int v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int *v79;
  unsigned int v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int *v83;
  unsigned int v84;
  unsigned int *v85;
  unsigned int v86;
  unsigned int *v87;
  unsigned int v88;
  unsigned int *v89;
  unsigned int v90;
  unsigned int *v91;
  unsigned int v92;
  unsigned int *v93;
  unsigned int v94;
  unsigned int *v95;
  unsigned int v96;

  sub_20BEEB2B8(&a21);
  v52 = &a43;
  while (1)
  {
    v54 = *--v52;
    v53 = v54;
    if ((v54 & 7) != 0)
    {
      v55 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFF8);
      do
        v56 = __ldxr(v55);
      while (__stlxr(v56 - 2, v55));
    }
    if (v52 == (uint64_t *)&a23)
    {
      if ((*v44 & 7) != 0)
      {
        v57 = (unsigned int *)(*v44 & 0xFFFFFFFFFFFFFFF8);
        do
          v58 = __ldxr(v57);
        while (__stlxr(v58 - 2, v57));
      }
      if ((*v50 & 7) != 0)
      {
        v59 = (unsigned int *)(*v50 & 0xFFFFFFFFFFFFFFF8);
        do
          v60 = __ldxr(v59);
        while (__stlxr(v60 - 2, v59));
      }
      if ((*v49 & 7) != 0)
      {
        v61 = (unsigned int *)(*v49 & 0xFFFFFFFFFFFFFFF8);
        do
          v62 = __ldxr(v61);
        while (__stlxr(v62 - 2, v61));
      }
      if ((*v48 & 7) != 0)
      {
        v63 = (unsigned int *)(*v48 & 0xFFFFFFFFFFFFFFF8);
        do
          v64 = __ldxr(v63);
        while (__stlxr(v64 - 2, v63));
      }
      if ((*v47 & 7) != 0)
      {
        v65 = (unsigned int *)(*v47 & 0xFFFFFFFFFFFFFFF8);
        do
          v66 = __ldxr(v65);
        while (__stlxr(v66 - 2, v65));
      }
      if ((*v46 & 7) != 0)
      {
        v67 = (unsigned int *)(*v46 & 0xFFFFFFFFFFFFFFF8);
        do
          v68 = __ldxr(v67);
        while (__stlxr(v68 - 2, v67));
      }
      if ((*v45 & 7) != 0)
      {
        v69 = (unsigned int *)(*v45 & 0xFFFFFFFFFFFFFFF8);
        do
          v70 = __ldxr(v69);
        while (__stlxr(v70 - 2, v69));
      }
      if ((*a9 & 7) != 0)
      {
        v71 = (unsigned int *)(*a9 & 0xFFFFFFFFFFFFFFF8);
        do
          v72 = __ldxr(v71);
        while (__stlxr(v72 - 2, v71));
      }
      if ((*a10 & 7) != 0)
      {
        v73 = (unsigned int *)(*a10 & 0xFFFFFFFFFFFFFFF8);
        do
          v74 = __ldxr(v73);
        while (__stlxr(v74 - 2, v73));
      }
      if ((*a11 & 7) != 0)
      {
        v75 = (unsigned int *)(*a11 & 0xFFFFFFFFFFFFFFF8);
        do
          v76 = __ldxr(v75);
        while (__stlxr(v76 - 2, v75));
      }
      if ((*a12 & 7) != 0)
      {
        v77 = (unsigned int *)(*a12 & 0xFFFFFFFFFFFFFFF8);
        do
          v78 = __ldxr(v77);
        while (__stlxr(v78 - 2, v77));
      }
      if ((*a13 & 7) != 0)
      {
        v79 = (unsigned int *)(*a13 & 0xFFFFFFFFFFFFFFF8);
        do
          v80 = __ldxr(v79);
        while (__stlxr(v80 - 2, v79));
      }
      if ((*a14 & 7) != 0)
      {
        v81 = (unsigned int *)(*a14 & 0xFFFFFFFFFFFFFFF8);
        do
          v82 = __ldxr(v81);
        while (__stlxr(v82 - 2, v81));
      }
      if ((*a15 & 7) != 0)
      {
        v83 = (unsigned int *)(*a15 & 0xFFFFFFFFFFFFFFF8);
        do
          v84 = __ldxr(v83);
        while (__stlxr(v84 - 2, v83));
      }
      if ((*a16 & 7) != 0)
      {
        v85 = (unsigned int *)(*a16 & 0xFFFFFFFFFFFFFFF8);
        do
          v86 = __ldxr(v85);
        while (__stlxr(v86 - 2, v85));
      }
      if ((*a17 & 7) != 0)
      {
        v87 = (unsigned int *)(*a17 & 0xFFFFFFFFFFFFFFF8);
        do
          v88 = __ldxr(v87);
        while (__stlxr(v88 - 2, v87));
      }
      if ((*a18 & 7) != 0)
      {
        v89 = (unsigned int *)(*a18 & 0xFFFFFFFFFFFFFFF8);
        do
          v90 = __ldxr(v89);
        while (__stlxr(v90 - 2, v89));
      }
      if ((*a19 & 7) != 0)
      {
        v91 = (unsigned int *)(*a19 & 0xFFFFFFFFFFFFFFF8);
        do
          v92 = __ldxr(v91);
        while (__stlxr(v92 - 2, v91));
      }
      if ((*a20 & 7) != 0)
      {
        v93 = (unsigned int *)(*a20 & 0xFFFFFFFFFFFFFFF8);
        do
          v94 = __ldxr(v93);
        while (__stlxr(v94 - 2, v93));
      }
      if ((*v43 & 7) != 0)
      {
        v95 = (unsigned int *)(*v43 & 0xFFFFFFFFFFFFFFF8);
        do
          v96 = __ldxr(v95);
        while (__stlxr(v96 - 2, v95));
      }
      operator delete(v43);
      _Unwind_Resume(a1);
    }
  }
}

void sub_20C7AE2DC()
{
  JUMPOUT(0x20C7AE144);
}

void sub_20C7AE2E4()
{
  JUMPOUT(0x20C7AE168);
}

void sub_20C7AE2EC()
{
  JUMPOUT(0x20C7AE18CLL);
}

void sub_20C7AE2F4()
{
  JUMPOUT(0x20C7AE1B0);
}

void sub_20C7AE2FC()
{
  JUMPOUT(0x20C7AE1D4);
}

void sub_20C7AE304()
{
  JUMPOUT(0x20C7AE1F8);
}

void sub_20C7AE30C()
{
  JUMPOUT(0x20C7AE21CLL);
}

void sub_20C7AE314()
{
  JUMPOUT(0x20C7AE240);
}

void sub_20C7AE31C()
{
  JUMPOUT(0x20C7AE264);
}

void sub_20C7AE324()
{
  JUMPOUT(0x20C7AE288);
}

void sub_20C7AE32C()
{
  JUMPOUT(0x20C7AE2ACLL);
}

void sub_20C7AE334()
{
  JUMPOUT(0x20C7AE2CCLL);
}

unint64_t pxrInternal__aapl__pxrReserved__::UsdMtlxParserPlugin::GetSourceType(pxrInternal__aapl__pxrReserved__::UsdMtlxParserPlugin *this)
{
  return sub_20C7AD570() + 8;
}

uint64_t sub_20C7AE354()
{
  uint64_t *v0;

  v0 = sub_20C7B1E80();
  return sub_20C7B1FA0(v0);
}

void sub_20C7AE36C(unsigned int **a1, const void *a2)
{
  void *v2;

  pxrInternal__aapl__pxrReserved__::NdrParserPlugin::~NdrParserPlugin(a1, a2);
  operator delete(v2);
}

void sub_20C7AE380(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v4 = sub_20C67F73C((_QWORD *)(a1 + 96), a2);
  if (!v4)
  {
    v7 = 0;
    goto LABEL_9;
  }
  v5 = v4;
  v6 = *((_QWORD *)v4 + 5);
  v7 = (std::__shared_weak_count *)*((_QWORD *)v5 + 6);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  if (!v6)
  {
LABEL_9:
    *a3 = 0;
    a3[1] = 0;
    if (!v7)
      return;
    goto LABEL_10;
  }
  sub_20C93B264(v6, a3);
  if (!v7)
    return;
LABEL_10:
  v10 = (unint64_t *)&v7->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_20C7AE438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

void sub_20C7AE44C(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  __int128 *v7;
  int v8;
  _BOOL4 v10;
  uint64_t v11;
  char v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void *__p[2];
  char v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v4 = *a1;
  if (!v4)
    goto LABEL_33;
  sub_20C7B042C(v4, a2, &v18);
  v5 = v18;
  if (!v18)
    goto LABEL_23;
  sub_20BDDC0E4(__p, "semantic");
  v6 = sub_20C67F73C((_QWORD *)(v5 + 160), (unsigned __int8 *)__p);
  if (v6)
    v7 = (__int128 *)(v6 + 40);
  else
    v7 = sub_20C957390();
  v8 = *((char *)v7 + 23);
  if (v8 < 0)
  {
    if (*((_QWORD *)v7 + 1) != 6)
    {
LABEL_17:
      v10 = 0;
      goto LABEL_18;
    }
    v7 = *(__int128 **)v7;
  }
  else if (v8 != 6)
  {
    goto LABEL_17;
  }
  v10 = *(_DWORD *)v7 == 1684105331 && *((_WORD *)v7 + 2) == 29285;
LABEL_18:
  if (v17 < 0)
  {
    operator delete(__p[0]);
    if (v10)
      goto LABEL_20;
LABEL_23:
    v12 = 1;
    goto LABEL_28;
  }
  if (!v10)
    goto LABEL_23;
LABEL_20:
  v11 = v18;
  sub_20BDDC0E4(__p, "context");
  if (!sub_20C67F73C((_QWORD *)(v11 + 160), (unsigned __int8 *)__p))
    sub_20C957390();
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a3);
  if (v17 < 0)
    operator delete(__p[0]);
  v12 = 0;
LABEL_28:
  v13 = v19;
  if (!v19)
    goto LABEL_32;
  p_shared_owners = (unint64_t *)&v19->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if ((v12 & 1) == 0)
      return;
  }
  else
  {
LABEL_32:
    if ((v12 & 1) == 0)
      return;
  }
LABEL_33:
  *a3 = 0;
}

void sub_20C7AE5C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a16);
  _Unwind_Resume(a1);
}

std::string *sub_20C7AE5F4(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned __int8 *a4)
{
  std::string *result;
  std::string *v7;
  pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType *v8;
  std::string *v9;
  int v10;
  std::string *v11;
  std::string::size_type v12;
  int v13;
  _QWORD *v15;
  uint64_t *v16;

  result = (std::string *)sub_20C67F73C((_QWORD *)(*(_QWORD *)a3 + 160), a4);
  if (result)
  {
    v7 = (std::string *)((char *)result + 40);
  }
  else
  {
    result = (std::string *)sub_20C957390();
    v7 = result;
  }
  if (SHIBYTE(v7->__r_.__value_.__r.__words[2]) < 0)
  {
    if (!v7->__r_.__value_.__l.__size_)
      return result;
  }
  else if (!*((_BYTE *)&v7->__r_.__value_.__s + 23))
  {
    return result;
  }
  v8 = (pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
  if (!v8)
    v8 = sub_20C1F61A0(&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v8 + 1) & 0xFFFFFFFFFFFFFFF8))
  {
    v10 = SHIBYTE(v7->__r_.__value_.__r.__words[2]);
    if (v10 < 0)
    {
      if (v7->__r_.__value_.__l.__size_ != 9)
        goto LABEL_11;
      v11 = (std::string *)v7->__r_.__value_.__r.__words[0];
    }
    else
    {
      v11 = v7;
      if (v10 != 9)
        goto LABEL_11;
    }
    v12 = v11->__r_.__value_.__r.__words[0];
    v13 = v11->__r_.__value_.__s.__data_[8];
    if (v12 == 0x3265727574786574 && v13 == 100)
    {
      v16 = a2;
      v15 = sub_20C5DEC3C(a1 + 96, a2, (uint64_t)&unk_20CAC184C, &v16);
      return (std::string *)MEMORY[0x212B929D0](v15 + 3, "texture");
    }
  }
LABEL_11:
  v16 = a2;
  v9 = (std::string *)sub_20C5DEC3C(a1 + 96, a2, (uint64_t)&unk_20CAC184C, &v16);
  return std::string::operator=(v9 + 1, v7);
}

void sub_20C7AE74C(pxrInternal__aapl__pxrReserved__ *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v3;
  unint64_t v4;
  void *v5;
  pxrInternal__aapl__pxrReserved__::TfToken *PrimaryUVSetName;
  uint64_t *EmptyString;
  __int128 v8;
  unint64_t v9;
  __int128 v10;

  v3 = atomic_load((unsigned __int8 *)&qword_25498CDA0);
  if ((v3 & 1) == 0)
  {
    a1 = (pxrInternal__aapl__pxrReserved__ *)__cxa_guard_acquire(&qword_25498CDA0);
    if ((_DWORD)a1)
    {
      v9 = atomic_load((unint64_t *)off_25473DBA0);
      if (!v9)
      {
        pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<std::string>((uint64_t)&off_25473DBA0);
        v9 = atomic_load((unint64_t *)off_25473DBA0);
      }
      if (*(char *)(v9 + 23) < 0)
      {
        sub_20BDDBFAC(&xmmword_25498CD88, *(void **)v9, *(_QWORD *)(v9 + 8));
      }
      else
      {
        v10 = *(_OWORD *)v9;
        unk_25498CD98 = *(_QWORD *)(v9 + 16);
        xmmword_25498CD88 = v10;
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25498CD88, &dword_20BDBC000);
      __cxa_guard_release(&qword_25498CDA0);
    }
  }
  if (byte_25498CD9F < 0)
  {
    v4 = *((_QWORD *)&xmmword_25498CD88 + 1);
    if (*((_QWORD *)&xmmword_25498CD88 + 1))
    {
      v5 = (void *)xmmword_25498CD88;
      goto LABEL_13;
    }
  }
  else if (byte_25498CD9F)
  {
    *(_OWORD *)a2 = xmmword_25498CD88;
    *(_QWORD *)(a2 + 16) = unk_25498CD98;
    return;
  }
  PrimaryUVSetName = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdUtilsGetPrimaryUVSetName(a1);
  if ((*(_QWORD *)PrimaryUVSetName & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)PrimaryUVSetName & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(PrimaryUVSetName);
  if ((*((char *)EmptyString + 23) & 0x80000000) == 0)
  {
    v8 = *(_OWORD *)EmptyString;
    *(_QWORD *)(a2 + 16) = EmptyString[2];
    *(_OWORD *)a2 = v8;
    return;
  }
  v5 = (void *)*EmptyString;
  v4 = EmptyString[1];
LABEL_13:
  sub_20BDDBFAC((_BYTE *)a2, v5, v4);
}

void sub_20C7AE89C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498CDA0);
  _Unwind_Resume(a1);
}

BOOL sub_20C7AE8B4(uint64_t a1, unsigned __int8 *a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const void **v12;
  unsigned __int8 *v13;
  uint64_t v15;
  std::__shared_weak_count *v16;

  sub_20C93B318(a1, &v15);
  v5 = v15;
  v4 = v16;
  if (!v16)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v16->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (!v5)
      return 0;
  }
  else
  {
LABEL_5:
    if (!v5)
      return 0;
  }
  v8 = (char)a2[23];
  v9 = *((_QWORD *)a2 + 1);
  if (v8 >= 0)
    v9 = a2[23];
  if (!v9)
    return 1;
  v10 = *(unsigned __int8 *)(a1 + 47);
  if ((v10 & 0x80u) == 0)
    v11 = *(unsigned __int8 *)(a1 + 47);
  else
    v11 = *(_QWORD *)(a1 + 32);
  if (v11 != v9)
    return 0;
  v12 = (const void **)(a1 + 24);
  if (v8 >= 0)
    v13 = a2;
  else
    v13 = *(unsigned __int8 **)a2;
  if ((v10 & 0x80) != 0)
    return !memcmp(*v12, v13, *(_QWORD *)(a1 + 32));
  if (*(_BYTE *)(a1 + 47))
  {
    while (*(unsigned __int8 *)v12 == *v13)
    {
      v12 = (const void **)((char *)v12 + 1);
      ++v13;
      if (!--v10)
        return 1;
    }
    return 0;
  }
  return 1;
}

__int128 *sub_20C7AE9B8(uint64_t a1)
{
  unsigned __int8 *v2;
  __int128 *v3;
  void *__p[2];
  char v6;

  sub_20BDDC0E4(__p, off_25473DD28[0]);
  v2 = sub_20C67F73C((_QWORD *)(a1 + 160), (unsigned __int8 *)__p);
  if (v2)
    v3 = (__int128 *)(v2 + 40);
  else
    v3 = sub_20C957390();
  if (v6 < 0)
    operator delete(__p[0]);
  return v3;
}

void sub_20C7AEA24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C7AEA40(_QWORD *a1, uint64_t *a2, int a3, uint64_t *a4, char a5)
{
  uint64_t v10;
  _BOOL4 IsArray;
  _BOOL4 v12;
  pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *v13;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v14;
  pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  __int128 v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  __int128 *v35;
  unint64_t *p_shared_owners;
  unsigned int *v37;
  unsigned int v38;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v39;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *v47;
  uint64_t v48;
  pxrInternal__aapl__pxrReserved__::TfToken *v49;
  uint64_t *v50;
  pxrInternal__aapl__pxrReserved__::TfToken *v51;
  uint64_t *EmptyString;
  unsigned __int8 *v53;
  __int128 *v54;
  unsigned __int8 *v55;
  __int128 *v56;
  pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *v57;
  pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *v58;
  uint64_t v59;
  __int128 *v60;
  __int128 *v61;
  __int128 *v62;
  uint64_t v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  std::__shared_weak_count *v66;
  __int128 *v67;
  __int128 *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  __int128 *v74;
  int v75;
  int v76;
  int v77;
  _BOOL4 v78;
  unint64_t *v80;
  unint64_t v81;
  pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *v82;
  std::string *v83;
  uint64_t v84;
  pxrInternal__aapl__pxrReserved__::TfToken *v85;
  uint64_t *v86;
  unsigned __int8 *v87;
  __int128 *v88;
  unint64_t v89;
  pxrInternal__aapl__pxrReserved__ *v90;
  unint64_t v91;
  __int128 v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  pxrInternal__aapl__pxrReserved__::UsdMtlxTokens_StaticTokenType *v96;
  const std::string *v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *v102;
  std::string *v103;
  uint64_t *v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  pxrInternal__aapl__pxrReserved__::TfToken *v108;
  uint64_t *v109;
  unint64_t *v110;
  unint64_t v111;
  pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *v112;
  uint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  pxrInternal__aapl__pxrReserved__::TfToken *v116;
  uint64_t *v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *v121;
  uint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  pxrInternal__aapl__pxrReserved__::TfToken *v125;
  uint64_t *v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  uint64_t *v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  unint64_t *v134;
  unint64_t v135;
  uint64_t *v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  unint64_t *v140;
  unint64_t v141;
  uint64_t *v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  unint64_t *v146;
  unint64_t v147;
  uint64_t *v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  unint64_t *v152;
  unint64_t v153;
  uint64_t *v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  unint64_t *v158;
  unint64_t v159;
  uint64_t *v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  unint64_t *v164;
  unint64_t v165;
  uint64_t *v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  unint64_t *v170;
  unint64_t v171;
  uint64_t *v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  unint64_t *v176;
  unint64_t v177;
  pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *v178;
  uint64_t *i;
  uint64_t v180;
  unsigned int *v181;
  unsigned int v182;
  pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *v183;
  _QWORD *v184;
  _QWORD *v185;
  unsigned int *v186;
  unsigned int v187;
  unsigned int *v188;
  unsigned int v189;
  std::__shared_weak_count *v190;
  uint64_t v191;
  unint64_t *v192;
  unint64_t v193;
  pxrInternal__aapl__pxrReserved__::TfToken *v194;
  uint64_t *v195;
  unint64_t v196;
  pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *v197;
  _QWORD *v198;
  const char *v199;
  char *v200;
  _QWORD *v201;
  _QWORD *v202;
  unsigned __int8 *v203;
  __int128 *v204;
  pxrInternal__aapl__pxrReserved__::TfToken *v205;
  uint64_t *v206;
  unsigned __int8 *v207;
  __int128 *v208;
  uint64_t v209;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unsigned int *v216;
  unsigned int v217;
  _QWORD *v218;
  uint64_t v219;
  unsigned int *v220;
  unsigned int v221;
  uint64_t v222;
  unsigned int *v223;
  unsigned int v224;
  unsigned int *v225;
  unsigned int v226;
  unint64_t *v227;
  unint64_t v228;
  void *v229;
  unint64_t v230;
  _QWORD *v231;
  _QWORD *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  unint64_t v237;
  char *v238;
  char *v239;
  const char *v240;
  _QWORD *v241;
  _QWORD *v242;
  uint64_t v243;
  int64x2_t v244;
  const char *v245;
  unsigned int *v246;
  unsigned int v247;
  unsigned int *v248;
  unsigned int v249;
  uint64_t result;
  unsigned int *v251;
  unsigned int v252;
  uint64_t v253;
  unint64_t v254;
  int v255;
  const std::string::value_type *v256;
  std::string::size_type v257;
  _OWORD *v258;
  __int128 v259;
  uint64_t v260;
  unint64_t v261;
  unint64_t v262;
  std::__shared_weak_count *v263;
  std::string __dst;
  uint64_t v265;
  std::__shared_weak_count *v266;
  uint64_t *v267;
  uint64_t v268;
  int v269;
  uint64_t *v270;
  _QWORD *v271;
  unint64_t v272;
  _OWORD v273[2];
  int v274;
  __int128 v275;
  __int128 v276;
  int v277;
  unint64_t v278;
  std::string v279;
  unsigned __int128 v280;
  unint64_t v281;
  unsigned __int128 v282;
  uint64_t v283;
  _QWORD v284[2];
  _BYTE v285[24];
  const char *v286;
  _QWORD *v287;
  uint64_t v288;

  v288 = *MEMORY[0x24BDAC8D0];
  v278 = 0;
  v275 = 0u;
  v276 = 0u;
  v277 = 1065353216;
  memset(v273, 0, sizeof(v273));
  v274 = 1065353216;
  v270 = 0;
  v271 = 0;
  v272 = 0;
  v284[1] = 0;
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 56))(*a2);
  pxrInternal__aapl__pxrReserved__::UsdMtlxGetUsdType((unsigned __int8 *)v10, (uint64_t)&v267);
  if (v268)
  {
    sub_20BF32220(&v278, &v268);
    IsArray = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsArray((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v267);
    if (v269)
      v12 = 0;
    else
      v12 = IsArray;
    if (v12)
    {
      v13 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
      if (!v13)
        v13 = sub_20C1F3958(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
      sub_20C7B0EE0((uint64_t)&v275, (_QWORD *)v13 + 8, (uint64_t *)v13 + 8, "");
    }
    v14 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v14)
      v14 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(&v267, (_QWORD **)v14 + 12))
    {
      v15 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
      if (!v15)
        v15 = sub_20C1F3958(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
      sub_20C7B0EE0((uint64_t)&v275, (_QWORD *)v15 + 15, (uint64_t *)v15 + 15, "");
    }
    v16 = a2[1];
    *(_QWORD *)&v282 = *a2;
    *((_QWORD *)&v282 + 1) = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    pxrInternal__aapl__pxrReserved__::UsdMtlxGetUsdValue((uint64_t)&v282, a3, (uint64_t)v285);
    sub_20BF4B5D8(v284, v285);
    sub_20BF4C2D8((uint64_t)v285);
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v282 + 1);
    if (*((_QWORD *)&v282 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v282 + 1) + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      goto LABEL_21;
    }
  }
  else if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::_IsEmpty((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v267))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v285);
    if ((v278 & 7) != 0)
    {
      v22 = (unsigned int *)(v278 & 0xFFFFFFFFFFFFFFF8);
      do
        v23 = __ldxr(v22);
      while (__stlxr(v23 - 2, v22));
    }
    v278 = *(_QWORD *)v285;
    sub_20C93BF6C(*a2, &v282);
    sub_20C7B042C(v282, (unsigned __int8 *)v10, v285);
    v24 = *(_OWORD *)v285;
    if (*(_QWORD *)&v285[8])
    {
      v25 = (unint64_t *)(*(_QWORD *)&v285[8] + 8);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v24 + 1) + 16))(*((_QWORD *)&v24 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v24 + 1));
      }
    }
    v27 = (std::__shared_weak_count *)*((_QWORD *)&v282 + 1);
    if (*((_QWORD *)&v282 + 1))
    {
      v28 = (unint64_t *)(*((_QWORD *)&v282 + 1) + 8);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    if (!(_QWORD)v24)
    {
      *(_QWORD *)v285 = "usdMtlx/parser.cpp";
      *(_QWORD *)&v285[8] = "AddProperty";
      *(_QWORD *)&v285[16] = 258;
      v286 = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::ShaderBuilder::AddProperty(const mx::ConstTyp"
             "edElementPtr &, BOOL, NdrStringVec *, BOOL)";
      LOBYTE(v287) = 0;
      v30 = *(char *)(v10 + 23);
      v31 = *(_QWORD *)v10;
      v32 = *a2;
      v265 = 0;
      v266 = 0;
      sub_20C93BC54(v32, &v265, (uint64_t)&v282);
      if (v30 >= 0)
        v34 = v10;
      else
        v34 = v31;
      if (v283 >= 0)
        v35 = (__int128 *)&v282;
      else
        v35 = (__int128 *)v282;
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v285, (pxrInternal__aapl__pxrReserved__ *)"MaterialX unrecognized type %s on %s", v33, v34, v35);
      if (SHIBYTE(v283) < 0)
        operator delete((void *)v282);
      v19 = v266;
      if (v266)
      {
        p_shared_owners = (unint64_t *)&v266->__shared_owners_;
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
LABEL_21:
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
    }
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&v267, (unsigned int **)v285);
    if ((v278 & 7) != 0)
    {
      v37 = (unsigned int *)(v278 & 0xFFFFFFFFFFFFFFF8);
      do
        v38 = __ldxr(v37);
      while (__stlxr(v38 - 2, v37));
    }
    v278 = *(_QWORD *)v285;
    v39 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v39)
      v39 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(&v267, (_QWORD **)v39))
      goto LABEL_59;
    v40 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v40)
      v40 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(&v267, (_QWORD **)v40 + 44))
    {
LABEL_59:
      v41 = a2[1];
      *(_QWORD *)&v282 = *a2;
      *((_QWORD *)&v282 + 1) = v41;
      if (v41)
      {
        v42 = (unint64_t *)(v41 + 8);
        do
          v43 = __ldxr(v42);
        while (__stxr(v43 + 1, v42));
      }
      pxrInternal__aapl__pxrReserved__::UsdMtlxGetUsdValue((uint64_t)&v282, a3, (uint64_t)v285);
      sub_20BF4B5D8(v284, v285);
      sub_20BF4C2D8((uint64_t)v285);
      v44 = (std::__shared_weak_count *)*((_QWORD *)&v282 + 1);
      if (*((_QWORD *)&v282 + 1))
      {
        v45 = (unint64_t *)(*((_QWORD *)&v282 + 1) + 8);
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 - 1, v45));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
      }
      v47 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
      if (!v47)
        v47 = sub_20C1F3958(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
      pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAliasesAsTokens(&v267, v285);
      sub_20C7B0B3C((uint64_t)&v275, (_QWORD *)v47 + 17, (uint64_t *)v47 + 17, *(_QWORD **)v285);
      *(_QWORD *)&v282 = v285;
      sub_20BEEB2B8((void ***)&v282);
    }
  }
  v48 = *a2;
  if (!a3)
  {
    v51 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C7AD570();
    if ((*((_QWORD *)v51 + 9) & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((*((_QWORD *)v51 + 9) & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v51);
    v55 = sub_20C67F73C((_QWORD *)(v48 + 160), (unsigned __int8 *)EmptyString);
    if (v55)
      v56 = (__int128 *)(v55 + 40);
    else
      v56 = sub_20C957390();
    if (*((char *)v56 + 23) < 0)
    {
      if (!*((_QWORD *)v56 + 1))
        goto LABEL_97;
    }
    else if (!*((_BYTE *)v56 + 23))
    {
      goto LABEL_97;
    }
    v58 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
    if (!v58)
      v58 = sub_20C1F3958(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
    sub_20C7B124C((uint64_t)&v275, (_QWORD *)v58 + 19, (uint64_t *)v58 + 19, v56);
LABEL_97:
    v59 = *a2;
    v60 = sub_20C957390();
    if (!sub_20C7B0778(v59, (unsigned __int8 *)v60))
      goto LABEL_136;
    goto LABEL_98;
  }
  v49 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C7AD570();
  if ((*((_QWORD *)v49 + 3) & 0xFFFFFFFFFFFFFFF8) != 0)
    v50 = (uint64_t *)((*((_QWORD *)v49 + 3) & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v50 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v49);
  v53 = sub_20C67F73C((_QWORD *)(v48 + 160), (unsigned __int8 *)v50);
  if (v53)
    v54 = (__int128 *)(v53 + 40);
  else
    v54 = sub_20C957390();
  if (*((char *)v54 + 23) < 0)
  {
    if (!*((_QWORD *)v54 + 1))
      goto LABEL_98;
  }
  else if (!*((_BYTE *)v54 + 23))
  {
    goto LABEL_98;
  }
  v57 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  if (!v57)
    v57 = sub_20C1F3958(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
  sub_20C7B124C((uint64_t)&v275, (_QWORD *)v57 + 18, (uint64_t *)v57 + 18, v54);
LABEL_98:
  v61 = sub_20C7B087C(*a2);
  v62 = v61;
  v63 = *((unsigned __int8 *)v61 + 23);
  if ((v63 & 0x80u) != 0)
    v63 = *((_QWORD *)v61 + 1);
  if (v63)
  {
    v64 = *a2;
    v65 = *(std::__shared_weak_count **)(*a2 + 232);
    if (v65)
    {
      v65 = std::__shared_weak_count::lock(v65);
      v66 = v65;
      if (v65)
        v65 = *(std::__shared_weak_count **)(v64 + 224);
    }
    else
    {
      v66 = 0;
    }
    *(_QWORD *)v285 = v65;
    *(_QWORD *)&v285[8] = v66;
    v67 = sub_20C7B0904((uint64_t)v65);
    v69 = *((unsigned __int8 *)v62 + 23);
    if ((v69 & 0x80u) == 0)
      v70 = *((unsigned __int8 *)v62 + 23);
    else
      v70 = *((_QWORD *)v62 + 1);
    v71 = *((unsigned __int8 *)v67 + 23);
    v72 = (char)v71;
    if ((v71 & 0x80u) != 0)
      v71 = *((_QWORD *)v67 + 1);
    if (v70 == v71)
    {
      if (v72 >= 0)
        v68 = v67;
      else
        v68 = *(__int128 **)v67;
      if ((v69 & 0x80) != 0)
      {
        v78 = memcmp(*(const void **)v62, v68, *((_QWORD *)v62 + 1)) != 0;
        if (!v66)
          goto LABEL_132;
      }
      else if (*((_BYTE *)v62 + 23))
      {
        v73 = v69 - 1;
        v74 = v62;
        do
        {
          v76 = *(unsigned __int8 *)v74;
          v74 = (__int128 *)((char *)v74 + 1);
          v75 = v76;
          v77 = *(unsigned __int8 *)v68;
          v68 = (__int128 *)((char *)v68 + 1);
          v78 = v75 != v77;
        }
        while (v75 == v77 && v73-- != 0);
        if (!v66)
          goto LABEL_132;
      }
      else
      {
        v78 = 0;
        if (!v66)
          goto LABEL_132;
      }
    }
    else
    {
      v78 = 1;
      if (!v66)
        goto LABEL_132;
    }
    v80 = (unint64_t *)&v66->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *, __int128 *))v66->__on_zero_shared)(v66, v68);
      std::__shared_weak_count::__release_weak(v66);
      if (!v78)
        goto LABEL_136;
      goto LABEL_133;
    }
LABEL_132:
    if (!v78)
      goto LABEL_136;
LABEL_133:
    v82 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
    if (!v82)
      v82 = sub_20C1F3958(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
    sub_20C7B124C((uint64_t)&v275, (_QWORD *)v82 + 20, (uint64_t *)v82 + 20, v62);
  }
LABEL_136:
  v83 = (std::string *)*a2;
  if (*(char *)(*a2 + 71) < 0)
    sub_20BDDBFAC(&__dst, v83[2].__r_.__value_.__l.__data_, v83[2].__r_.__value_.__l.__size_);
  else
    __dst = v83[2];
  if (a4 && (a3 & 1) == 0)
  {
    v84 = *a2;
    v85 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C7AD570();
    if ((*((_QWORD *)v85 + 2) & 0xFFFFFFFFFFFFFFF8) != 0)
      v86 = (uint64_t *)((*((_QWORD *)v85 + 2) & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v86 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v85);
    v87 = sub_20C67F73C((_QWORD *)(v84 + 160), (unsigned __int8 *)v86);
    if (v87)
      v88 = (__int128 *)(v87 + 40);
    else
      v88 = sub_20C957390();
    if (*((char *)v88 + 23) < 0)
    {
      if (!*((_QWORD *)v88 + 1))
        goto LABEL_167;
    }
    else if (!*((_BYTE *)v88 + 23))
    {
      goto LABEL_167;
    }
    v89 = sub_20C7AD570();
    v90 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::TfToken::operator==((pxrInternal__aapl__pxrReserved__::TfToken *)(v89 + 152), (unsigned __int8 *)v88);
    if ((_DWORD)v90)
    {
      if ((a5 & 1) == 0)
      {
        sub_20C7AE74C(v90, (uint64_t)v285);
        v91 = a4[1];
        if (v91 >= a4[2])
        {
          v95 = sub_20BE4EE50(a4, (__int128 *)v285);
        }
        else
        {
          if ((v285[23] & 0x80000000) != 0)
          {
            sub_20BDDBFAC((_BYTE *)a4[1], *(void **)v285, *(unint64_t *)&v285[8]);
          }
          else
          {
            v92 = *(_OWORD *)v285;
            *(_QWORD *)(v91 + 16) = *(_QWORD *)&v285[16];
            *(_OWORD *)v91 = v92;
          }
          v95 = v91 + 24;
          a4[1] = v91 + 24;
        }
        a4[1] = v95;
        if ((v285[23] & 0x80000000) != 0)
          operator delete(*(void **)v285);
      }
    }
    else
    {
      v93 = a4[1];
      if (v93 >= a4[2])
      {
        v94 = sub_20BE4EE50(a4, v88);
      }
      else
      {
        sub_20BE4EDF4(a4, v88);
        v94 = v93 + 24;
      }
      a4[1] = v94;
    }
  }
LABEL_167:
  sub_20C93B264(*a2, v285);
  if (*(_QWORD *)v285)
  {
    v96 = (pxrInternal__aapl__pxrReserved__::UsdMtlxTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdMtlxTokens);
    if (!v96)
      v96 = sub_20C7B1650(&pxrInternal__aapl__pxrReserved__::UsdMtlxTokens);
    if ((*(_QWORD *)v96 & 0xFFFFFFFFFFFFFFF8) != 0)
      v97 = (const std::string *)((*(_QWORD *)v96 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v97 = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v96);
    std::string::operator=(&__dst, v97);
  }
  v98 = *(std::__shared_weak_count **)&v285[8];
  if (*(_QWORD *)&v285[8])
  {
    v99 = (unint64_t *)(*(_QWORD *)&v285[8] + 8);
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  v101 = sub_20BDEEBA4((uint64_t)(a1 + 17), (const void **)&__dst.__r_.__value_.__l.__data_);
  if (a1 + 18 != (_QWORD *)v101)
  {
    v102 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
    if (!v102)
      v102 = sub_20C1F3958(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
    *(_QWORD *)v285 = (char *)v102 + 128;
    v103 = (std::string *)sub_20C5DEC3C((uint64_t)&v275, (_QWORD *)v102 + 16, (uint64_t)&unk_20CAC184C, (uint64_t **)v285);
    std::string::operator=(v103 + 1, (const std::string *)(v101 + 56));
  }
  if ((a3 & 1) == 0)
  {
    v104 = (uint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
    if (!v104)
      v104 = (uint64_t *)sub_20C1F3958(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
    v105 = (std::__shared_weak_count *)a2[1];
    *(_QWORD *)v285 = *a2;
    *(_QWORD *)&v285[8] = v105;
    if (v105)
    {
      v106 = (unint64_t *)&v105->__shared_owners_;
      do
        v107 = __ldxr(v106);
      while (__stxr(v107 + 1, v106));
    }
    v108 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C7AD570();
    if ((*((_QWORD *)v108 + 13) & 0xFFFFFFFFFFFFFFF8) != 0)
      v109 = (uint64_t *)((*((_QWORD *)v108 + 13) & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v109 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v108);
    sub_20C7B0A30((uint64_t)&v275, v104, (uint64_t)v285, (unsigned __int8 *)v109);
    if (v105)
    {
      v110 = (unint64_t *)&v105->__shared_owners_;
      do
        v111 = __ldaxr(v110);
      while (__stlxr(v111 - 1, v110));
      if (!v111)
      {
        ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
        std::__shared_weak_count::__release_weak(v105);
      }
    }
    v112 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
    if (!v112)
      v112 = sub_20C1F3958(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
    v113 = a2[1];
    *(_QWORD *)v285 = *a2;
    *(_QWORD *)&v285[8] = v113;
    if (v113)
    {
      v114 = (unint64_t *)(v113 + 8);
      do
        v115 = __ldxr(v114);
      while (__stxr(v115 + 1, v114));
    }
    v116 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C7AD570();
    if ((*((_QWORD *)v116 + 4) & 0xFFFFFFFFFFFFFFF8) != 0)
      v117 = (uint64_t *)((*((_QWORD *)v116 + 4) & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v117 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v116);
    sub_20C7B0A30((uint64_t)&v275, (uint64_t *)v112 + 1, (uint64_t)v285, (unsigned __int8 *)v117);
    v118 = *(std::__shared_weak_count **)&v285[8];
    if (*(_QWORD *)&v285[8])
    {
      v119 = (unint64_t *)(*(_QWORD *)&v285[8] + 8);
      do
        v120 = __ldaxr(v119);
      while (__stlxr(v120 - 1, v119));
      if (!v120)
      {
        ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
        std::__shared_weak_count::__release_weak(v118);
      }
    }
    v121 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
    if (!v121)
      v121 = sub_20C1F3958(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
    v122 = a2[1];
    *(_QWORD *)v285 = *a2;
    *(_QWORD *)&v285[8] = v122;
    if (v122)
    {
      v123 = (unint64_t *)(v122 + 8);
      do
        v124 = __ldxr(v123);
      while (__stxr(v124 + 1, v123));
    }
    v125 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C7AD570();
    if ((*((_QWORD *)v125 + 10) & 0xFFFFFFFFFFFFFFF8) != 0)
      v126 = (uint64_t *)((*((_QWORD *)v125 + 10) & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v126 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v125);
    sub_20C7B0A30((uint64_t)&v275, (uint64_t *)v121 + 2, (uint64_t)v285, (unsigned __int8 *)v126);
    v127 = *(std::__shared_weak_count **)&v285[8];
    if (*(_QWORD *)&v285[8])
    {
      v128 = (unint64_t *)(*(_QWORD *)&v285[8] + 8);
      do
        v129 = __ldaxr(v128);
      while (__stlxr(v129 - 1, v128));
      if (!v129)
      {
        ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
        std::__shared_weak_count::__release_weak(v127);
      }
    }
    v130 = (uint64_t *)(sub_20C7AD570() + 96);
    v131 = (std::__shared_weak_count *)a2[1];
    *(_QWORD *)v285 = *a2;
    *(_QWORD *)&v285[8] = v131;
    if (v131)
    {
      v132 = (unint64_t *)&v131->__shared_owners_;
      do
        v133 = __ldxr(v132);
      while (__stxr(v133 + 1, v132));
    }
    sub_20C7B0AA4((pxrInternal__aapl__pxrReserved__::TfToken *)&v275, v130, (uint64_t *)v285);
    if (v131)
    {
      v134 = (unint64_t *)&v131->__shared_owners_;
      do
        v135 = __ldaxr(v134);
      while (__stlxr(v135 - 1, v134));
      if (!v135)
      {
        ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
        std::__shared_weak_count::__release_weak(v131);
      }
    }
    v136 = (uint64_t *)(sub_20C7AD570() + 88);
    v137 = (std::__shared_weak_count *)a2[1];
    *(_QWORD *)v285 = *a2;
    *(_QWORD *)&v285[8] = v137;
    if (v137)
    {
      v138 = (unint64_t *)&v137->__shared_owners_;
      do
        v139 = __ldxr(v138);
      while (__stxr(v139 + 1, v138));
    }
    sub_20C7B0AA4((pxrInternal__aapl__pxrReserved__::TfToken *)&v275, v136, (uint64_t *)v285);
    if (v137)
    {
      v140 = (unint64_t *)&v137->__shared_owners_;
      do
        v141 = __ldaxr(v140);
      while (__stlxr(v141 - 1, v140));
      if (!v141)
      {
        ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
        std::__shared_weak_count::__release_weak(v137);
      }
    }
    v142 = (uint64_t *)(sub_20C7AD570() + 120);
    v143 = (std::__shared_weak_count *)a2[1];
    *(_QWORD *)v285 = *a2;
    *(_QWORD *)&v285[8] = v143;
    if (v143)
    {
      v144 = (unint64_t *)&v143->__shared_owners_;
      do
        v145 = __ldxr(v144);
      while (__stxr(v145 + 1, v144));
    }
    sub_20C7B0AA4((pxrInternal__aapl__pxrReserved__::TfToken *)&v275, v142, (uint64_t *)v285);
    if (v143)
    {
      v146 = (unint64_t *)&v143->__shared_owners_;
      do
        v147 = __ldaxr(v146);
      while (__stlxr(v147 - 1, v146));
      if (!v147)
      {
        ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
        std::__shared_weak_count::__release_weak(v143);
      }
    }
    v148 = (uint64_t *)(sub_20C7AD570() + 112);
    v149 = (std::__shared_weak_count *)a2[1];
    *(_QWORD *)v285 = *a2;
    *(_QWORD *)&v285[8] = v149;
    if (v149)
    {
      v150 = (unint64_t *)&v149->__shared_owners_;
      do
        v151 = __ldxr(v150);
      while (__stxr(v151 + 1, v150));
    }
    sub_20C7B0AA4((pxrInternal__aapl__pxrReserved__::TfToken *)&v275, v148, (uint64_t *)v285);
    if (v149)
    {
      v152 = (unint64_t *)&v149->__shared_owners_;
      do
        v153 = __ldaxr(v152);
      while (__stlxr(v153 - 1, v152));
      if (!v153)
      {
        ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
        std::__shared_weak_count::__release_weak(v149);
      }
    }
    v154 = (uint64_t *)(sub_20C7AD570() + 128);
    v155 = (std::__shared_weak_count *)a2[1];
    *(_QWORD *)v285 = *a2;
    *(_QWORD *)&v285[8] = v155;
    if (v155)
    {
      v156 = (unint64_t *)&v155->__shared_owners_;
      do
        v157 = __ldxr(v156);
      while (__stxr(v157 + 1, v156));
    }
    sub_20C7B0AA4((pxrInternal__aapl__pxrReserved__::TfToken *)&v275, v154, (uint64_t *)v285);
    if (v155)
    {
      v158 = (unint64_t *)&v155->__shared_owners_;
      do
        v159 = __ldaxr(v158);
      while (__stlxr(v159 - 1, v158));
      if (!v159)
      {
        ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
        std::__shared_weak_count::__release_weak(v155);
      }
    }
    v160 = (uint64_t *)(sub_20C7AD570() + 136);
    v161 = (std::__shared_weak_count *)a2[1];
    *(_QWORD *)v285 = *a2;
    *(_QWORD *)&v285[8] = v161;
    if (v161)
    {
      v162 = (unint64_t *)&v161->__shared_owners_;
      do
        v163 = __ldxr(v162);
      while (__stxr(v163 + 1, v162));
    }
    sub_20C7B0AA4((pxrInternal__aapl__pxrReserved__::TfToken *)&v275, v160, (uint64_t *)v285);
    if (v161)
    {
      v164 = (unint64_t *)&v161->__shared_owners_;
      do
        v165 = __ldaxr(v164);
      while (__stlxr(v165 - 1, v164));
      if (!v165)
      {
        ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
        std::__shared_weak_count::__release_weak(v161);
      }
    }
    v166 = (uint64_t *)(sub_20C7AD570() + 144);
    v167 = (std::__shared_weak_count *)a2[1];
    *(_QWORD *)v285 = *a2;
    *(_QWORD *)&v285[8] = v167;
    if (v167)
    {
      v168 = (unint64_t *)&v167->__shared_owners_;
      do
        v169 = __ldxr(v168);
      while (__stxr(v169 + 1, v168));
    }
    sub_20C7B0AA4((pxrInternal__aapl__pxrReserved__::TfToken *)&v275, v166, (uint64_t *)v285);
    if (v167)
    {
      v170 = (unint64_t *)&v167->__shared_owners_;
      do
        v171 = __ldaxr(v170);
      while (__stlxr(v171 - 1, v170));
      if (!v171)
      {
        ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
        std::__shared_weak_count::__release_weak(v167);
      }
    }
    v172 = (uint64_t *)(sub_20C7AD570() + 16);
    v173 = (std::__shared_weak_count *)a2[1];
    *(_QWORD *)v285 = *a2;
    *(_QWORD *)&v285[8] = v173;
    if (v173)
    {
      v174 = (unint64_t *)&v173->__shared_owners_;
      do
        v175 = __ldxr(v174);
      while (__stxr(v175 + 1, v174));
    }
    sub_20C7B0AA4((pxrInternal__aapl__pxrReserved__::TfToken *)&v275, v172, (uint64_t *)v285);
    if (v173)
    {
      v176 = (unint64_t *)&v173->__shared_owners_;
      do
        v177 = __ldaxr(v176);
      while (__stlxr(v177 - 1, v176));
      if (!v177)
      {
        ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
        std::__shared_weak_count::__release_weak(v173);
      }
    }
    v178 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
    if (!v178)
      v178 = sub_20C1F3958(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
    if (!sub_20BF2B2B4(&v275, (_QWORD *)v178 + 1))
    {
      v196 = sub_20C7AD570();
      if (sub_20BF2B2B4(&v275, (_QWORD *)(v196 + 136)))
      {
        v197 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
        if (!v197)
          v197 = sub_20C1F3958(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
        *(_QWORD *)&v280 = sub_20C7AD570() + 136;
        v198 = sub_20C5DEC3C((uint64_t)&v275, (_QWORD *)v280, (uint64_t)&unk_20CAC184C, (uint64_t **)&v280);
        v201 = v198 + 3;
        if (*((char *)v198 + 47) < 0)
          v201 = (_QWORD *)*v201;
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Unit is %s.", v199, v200, v201);
        sub_20C7B19C0((uint64_t)&v275, (_QWORD *)v197 + 1, (uint64_t *)v197 + 1, (__n128 *)v285);
        if ((v285[23] & 0x80000000) != 0)
          operator delete(*(void **)v285);
      }
    }
    for (i = (uint64_t *)v276; i; i = (uint64_t *)*i)
    {
      v180 = i[2];
      *(_QWORD *)&v280 = v180;
      if ((v180 & 7) != 0)
      {
        v181 = (unsigned int *)(v180 & 0xFFFFFFFFFFFFFFF8);
        do
          v182 = __ldxr(v181);
        while (__stxr(v182 + 2, v181));
        if ((v182 & 1) == 0)
          *(_QWORD *)&v280 = v280 & 0xFFFFFFFFFFFFFFF8;
      }
      if (*((char *)i + 47) < 0)
      {
        sub_20BDDBFAC(&v282, (void *)i[3], i[4]);
      }
      else
      {
        v282 = *(_OWORD *)(i + 3);
        v283 = i[5];
      }
      v183 = (pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
      if (!v183)
        v183 = sub_20C1F3958(&pxrInternal__aapl__pxrReserved__::SdrPropertyMetadata);
      v185 = (_QWORD *)*((_QWORD *)v183 + 21);
      v184 = (_QWORD *)*((_QWORD *)v183 + 22);
      if (v185 != v184)
      {
        while ((*v185 & 0xFFFFFFFFFFFFFFF8) != (v280 & 0xFFFFFFFFFFFFFFF8))
        {
          if (++v185 == v184)
          {
            v185 = (_QWORD *)*((_QWORD *)v183 + 22);
            break;
          }
        }
      }
      if (v185 == v184)
      {
        sub_20C7B1CC4((uint64_t *)v285, (uint64_t *)&v280, (__int128 *)&v282);
        sub_20C1FD34C((uint64_t)v273, v285, (uint64_t *)v285);
        if (SHIBYTE(v286) < 0)
          operator delete(*(void **)&v285[8]);
        if ((v285[0] & 7) != 0)
        {
          v186 = (unsigned int *)(*(_QWORD *)v285 & 0xFFFFFFFFFFFFFFF8);
          do
            v187 = __ldxr(v186);
          while (__stlxr(v187 - 2, v186));
        }
      }
      if (SHIBYTE(v283) < 0)
        operator delete((void *)v282);
      if ((v280 & 7) != 0)
      {
        v188 = (unsigned int *)(v280 & 0xFFFFFFFFFFFFFFF8);
        do
          v189 = __ldxr(v188);
        while (__stlxr(v189 - 2, v188));
      }
    }
    v191 = *a2;
    v190 = (std::__shared_weak_count *)a2[1];
    v263 = v190;
    if (v190)
    {
      v192 = (unint64_t *)&v190->__shared_owners_;
      do
        v193 = __ldxr(v192);
      while (__stxr(v193 + 1, v192));
    }
    v194 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C7AD570();
    if ((*((_QWORD *)v194 + 5) & 0xFFFFFFFFFFFFFFF8) != 0)
      v195 = (uint64_t *)((*((_QWORD *)v194 + 5) & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v195 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v194);
    v202 = (_QWORD *)(v191 + 160);
    v203 = sub_20C67F73C((_QWORD *)(v191 + 160), (unsigned __int8 *)v195);
    if (v203)
      v204 = (__int128 *)(v203 + 40);
    else
      v204 = sub_20C957390();
    if (*((char *)v204 + 23) < 0)
    {
      if (!*((_QWORD *)v204 + 1))
      {
LABEL_374:
        if (v190)
        {
          v227 = (unint64_t *)&v190->__shared_owners_;
          do
            v228 = __ldaxr(v227);
          while (__stlxr(v228 - 1, v227));
          if (!v228)
          {
            ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
            std::__shared_weak_count::__release_weak(v190);
          }
        }
        goto LABEL_379;
      }
    }
    else if (!*((_BYTE *)v204 + 23))
    {
      goto LABEL_374;
    }
    v205 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C7AD570();
    if ((*((_QWORD *)v205 + 6) & 0xFFFFFFFFFFFFFFF8) != 0)
      v206 = (uint64_t *)((*((_QWORD *)v205 + 6) & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v206 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v205);
    v207 = sub_20C67F73C(v202, (unsigned __int8 *)v206);
    if (v207)
      v208 = (__int128 *)(v207 + 40);
    else
      v208 = sub_20C957390();
    pxrInternal__aapl__pxrReserved__::UsdMtlxSplitStringArray((std::string *)v204, (uint64_t *)v285);
    pxrInternal__aapl__pxrReserved__::UsdMtlxSplitStringArray((std::string *)v208, (uint64_t *)&v282);
    v209 = *((_QWORD *)&v282 + 1);
    v210 = v282;
    if ((_QWORD)v282 != *((_QWORD *)&v282 + 1))
    {
      v211 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v282 + 1) - v282) >> 3);
      v212 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v285[8] - *(_QWORD *)v285) >> 3);
      if (v211 != v212)
      {
        if (v211 <= v212 || (v213 = v211 / v212, v211 % v212))
        {
          do
          {
            if (*(char *)(v209 - 1) < 0)
              operator delete(*(void **)(v209 - 24));
            v209 -= 24;
          }
          while (v209 != v210);
          *((_QWORD *)&v282 + 1) = v210;
        }
        else
        {
          v253 = 0;
          v254 = 0;
          v280 = 0uLL;
          v281 = 0;
          memset(&v279, 0, sizeof(v279));
          do
          {
            if (v254 % v213)
            {
              std::string::append(&v279, off_25473DF80[0]);
              v210 = v282;
            }
            v255 = *(char *)(v210 + v253 + 23);
            if (v255 >= 0)
              v256 = (const std::string::value_type *)(v210 + v253);
            else
              v256 = *(const std::string::value_type **)(v210 + v253);
            if (v255 >= 0)
              v257 = *(unsigned __int8 *)(v210 + v253 + 23);
            else
              v257 = *(_QWORD *)(v210 + v253 + 8);
            std::string::append(&v279, v256, v257);
            if (!(++v254 % v213))
            {
              v258 = (_OWORD *)*((_QWORD *)&v280 + 1);
              if (*((_QWORD *)&v280 + 1) >= v281)
              {
                v260 = sub_20BE4EE50((uint64_t *)&v280, (__int128 *)&v279);
              }
              else
              {
                if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0)
                {
                  sub_20BDDBFAC(*((_BYTE **)&v280 + 1), v279.__r_.__value_.__l.__data_, v279.__r_.__value_.__l.__size_);
                }
                else
                {
                  v259 = *(_OWORD *)&v279.__r_.__value_.__l.__data_;
                  *(_QWORD *)(*((_QWORD *)&v280 + 1) + 16) = *((_QWORD *)&v279.__r_.__value_.__l + 2);
                  *v258 = v259;
                }
                v260 = (uint64_t)v258 + 24;
              }
              *((_QWORD *)&v280 + 1) = v260;
              MEMORY[0x212B929D0](&v279, "");
            }
            v261 = *((_QWORD *)&v282 + 1);
            v210 = v282;
            v253 += 24;
          }
          while (v254 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v282 + 1) - v282) >> 3));
          v282 = v280;
          v280 = __PAIR128__(v261, v210);
          v262 = v283;
          v283 = v281;
          v281 = v262;
          if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v279.__r_.__value_.__l.__data_);
          v279.__r_.__value_.__r.__words[0] = (std::string::size_type)&v280;
          sub_20BDE5038((void ***)&v279);
        }
      }
    }
    v214 = *(_QWORD *)v285;
    if (*(_QWORD *)v285 != *(_QWORD *)&v285[8])
    {
      v215 = v282;
      do
      {
        *(_QWORD *)&v280 = 0;
        if (v215 != *((_QWORD *)&v282 + 1))
        {
          pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v279);
          if ((v280 & 7) != 0)
          {
            v216 = (unsigned int *)(v280 & 0xFFFFFFFFFFFFFFF8);
            do
              v217 = __ldxr(v216);
            while (__stlxr(v217 - 2, v216));
          }
          v215 += 24;
          *(_QWORD *)&v280 = v279.__r_.__value_.__r.__words[0];
        }
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v279);
        v218 = v271;
        if ((unint64_t)v271 >= v272)
        {
          v222 = sub_20C7B1D64((uint64_t *)&v270, &v279, (uint64_t *)&v280);
        }
        else
        {
          *v271 = v279.__r_.__value_.__r.__words[0];
          v279.__r_.__value_.__r.__words[0] = 0;
          v219 = v280;
          v218[1] = v280;
          if ((v219 & 7) != 0)
          {
            v220 = (unsigned int *)(v219 & 0xFFFFFFFFFFFFFFF8);
            do
              v221 = __ldxr(v220);
            while (__stxr(v221 + 2, v220));
            if ((v221 & 1) == 0)
              v218[1] &= 0xFFFFFFFFFFFFFFF8;
          }
          v222 = (uint64_t)(v218 + 2);
        }
        v271 = (_QWORD *)v222;
        if ((v279.__r_.__value_.__s.__data_[0] & 7) != 0)
        {
          v223 = (unsigned int *)(v279.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v224 = __ldxr(v223);
          while (__stlxr(v224 - 2, v223));
        }
        if ((v280 & 7) != 0)
        {
          v225 = (unsigned int *)(v280 & 0xFFFFFFFFFFFFFFF8);
          do
            v226 = __ldxr(v225);
          while (__stlxr(v226 - 2, v225));
        }
        v214 += 24;
      }
      while (v214 != *(_QWORD *)&v285[8]);
    }
    *(_QWORD *)&v280 = &v282;
    sub_20BDE5038((void ***)&v280);
    *(_QWORD *)&v282 = v285;
    sub_20BDE5038((void ***)&v282);
    v190 = v263;
    goto LABEL_374;
  }
LABEL_379:
  v229 = operator new(0x108uLL);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v282);
  pxrInternal__aapl__pxrReserved__::SdrShaderProperty::SdrShaderProperty((uint64_t)v229, (uint64_t *)&v282, (unsigned int **)&v278, v284, a3, (unsigned int *)v269, &v275, (uint64_t)v273, &v270);
  v230 = a1[11];
  v231 = (_QWORD *)a1[10];
  if ((unint64_t)v231 >= v230)
  {
    v233 = a1[9];
    v234 = ((uint64_t)v231 - v233) >> 3;
    if ((unint64_t)(v234 + 1) >> 61)
      sub_20BDDF694();
    v235 = v230 - v233;
    v236 = v235 >> 2;
    if (v235 >> 2 <= (unint64_t)(v234 + 1))
      v236 = v234 + 1;
    if ((unint64_t)v235 >= 0x7FFFFFFFFFFFFFF8)
      v237 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v237 = v236;
    v287 = a1 + 11;
    if (v237)
      v238 = (char *)sub_20BDDF6A8((uint64_t)(a1 + 11), v237);
    else
      v238 = 0;
    v239 = &v238[8 * v234];
    v240 = &v238[8 * v237];
    v286 = v240;
    *(_QWORD *)v239 = v229;
    v232 = v239 + 8;
    *(_QWORD *)&v285[16] = v239 + 8;
    v242 = (_QWORD *)a1[9];
    v241 = (_QWORD *)a1[10];
    if (v241 == v242)
    {
      v244 = vdupq_n_s64((unint64_t)v241);
    }
    else
    {
      do
      {
        v243 = *--v241;
        *v241 = 0;
        *((_QWORD *)v239 - 1) = v243;
        v239 -= 8;
      }
      while (v241 != v242);
      v244 = *(int64x2_t *)(a1 + 9);
      v232 = *(_QWORD **)&v285[16];
      v240 = v286;
    }
    a1[9] = v239;
    a1[10] = v232;
    *(int64x2_t *)&v285[8] = v244;
    v245 = (const char *)a1[11];
    a1[11] = v240;
    v286 = v245;
    *(_QWORD *)v285 = v244.i64[0];
    sub_20C0A3EB4((uint64_t)v285);
  }
  else
  {
    *v231 = v229;
    v232 = v231 + 1;
  }
  a1[10] = v232;
  if ((v282 & 7) != 0)
  {
    v246 = (unsigned int *)(v282 & 0xFFFFFFFFFFFFFFF8);
    do
      v247 = __ldxr(v246);
    while (__stlxr(v247 - 2, v246));
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if ((v268 & 7) != 0)
  {
    v248 = (unsigned int *)(v268 & 0xFFFFFFFFFFFFFFF8);
    do
      v249 = __ldxr(v248);
    while (__stlxr(v249 - 2, v248));
  }
  sub_20BF4C2D8((uint64_t)v284);
  *(_QWORD *)v285 = &v270;
  sub_20C1F3690((void ***)v285);
  sub_20C1E7FB4((uint64_t)v273);
  result = sub_20C1E7FB4((uint64_t)&v275);
  if ((v278 & 7) != 0)
  {
    v251 = (unsigned int *)(v278 & 0xFFFFFFFFFFFFFFF8);
    do
      v252 = __ldxr(v251);
    while (__stlxr(v252 - 2, v251));
  }
  return result;
}

void sub_20C7B00E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v46;
  uint64_t v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;

  if (*(char *)(v46 - 169) < 0)
    operator delete(*(void **)(v46 - 192));
  v48 = *(_QWORD *)(v46 - 224);
  if ((v48 & 7) != 0)
  {
    v49 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
    do
      v50 = __ldxr(v49);
    while (__stlxr(v50 - 2, v49));
  }
  if (a18 < 0)
    operator delete(__p);
  if ((a23 & 7) != 0)
  {
    v51 = (unsigned int *)(a23 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stlxr(v52 - 2, v51));
  }
  sub_20BF4C2D8(v46 - 160);
  *(_QWORD *)(v46 - 192) = &a25;
  sub_20C1F3690((void ***)(v46 - 192));
  sub_20C1E7FB4((uint64_t)&a28);
  sub_20C1E7FB4((uint64_t)&a34);
  if ((a40 & 7) != 0)
  {
    v53 = (unsigned int *)(a40 & 0xFFFFFFFFFFFFFFF8);
    do
      v54 = __ldxr(v53);
    while (__stlxr(v54 - 2, v53));
  }
  _Unwind_Resume(a1);
}

void sub_20C7B042C(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v4 = sub_20C67F73C((_QWORD *)(a1 + 96), a2);
  if (!v4)
  {
    v7 = 0;
    goto LABEL_9;
  }
  v5 = v4;
  v6 = *((_QWORD *)v4 + 5);
  v7 = (std::__shared_weak_count *)*((_QWORD *)v5 + 6);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  if (!v6)
  {
LABEL_9:
    *a3 = 0;
    a3[1] = 0;
    if (!v7)
      return;
    goto LABEL_10;
  }
  sub_20C93B5E8(v6, a3);
  if (!v7)
    return;
LABEL_10:
  v10 = (unint64_t *)&v7->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_20C7B04E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

void sub_20C7B04F8(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void **v15;
  unsigned __int8 *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v3 = *(uint64_t **)(a1 + 136);
  for (i = *(uint64_t **)(a1 + 144); v3 != i; v3 += 2)
  {
    v8 = *v3;
    v7 = v3[1];
    v24 = *v3;
    v25 = (std::__shared_weak_count *)v7;
    if (v7)
    {
      v9 = (unint64_t *)(v7 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    sub_20C93B1B0(v8, &v23);
    if (!(_QWORD)v23)
      goto LABEL_23;
    v11 = (char)a2[23];
    v12 = *((_QWORD *)a2 + 1);
    if (v11 >= 0)
      v12 = a2[23];
    if (v12)
    {
      v13 = *(unsigned __int8 *)(v8 + 47);
      if ((v13 & 0x80u) == 0)
        v14 = *(unsigned __int8 *)(v8 + 47);
      else
        v14 = *(_QWORD *)(v8 + 32);
      if (v14 != v12)
        goto LABEL_23;
      v15 = (const void **)(v8 + 24);
      if (v11 >= 0)
        v16 = a2;
      else
        v16 = *(unsigned __int8 **)a2;
      if ((v13 & 0x80) != 0)
      {
        if (memcmp(*v15, v16, *(_QWORD *)(v8 + 32)))
          goto LABEL_23;
      }
      else if (*(_BYTE *)(v8 + 47))
      {
        while (*(unsigned __int8 *)v15 == *v16)
        {
          v15 = (const void **)((char *)v15 + 1);
          ++v16;
          if (!--v13)
            goto LABEL_22;
        }
        goto LABEL_23;
      }
    }
LABEL_22:
    sub_20BDEA72C((char **)a3, &v23);
LABEL_23:
    v17 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
    if (*((_QWORD *)&v23 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v20 = v25;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
}

void sub_20C7B067C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a11);
  sub_20BDE9EB0((void ***)&a11);
  _Unwind_Resume(a1);
}

void sub_20C7B06AC(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v4 = sub_20C67F73C((_QWORD *)(a1 + 96), a2);
  if (!v4)
  {
    v7 = 0;
    goto LABEL_9;
  }
  v5 = v4;
  v6 = *((_QWORD *)v4 + 5);
  v7 = (std::__shared_weak_count *)*((_QWORD *)v5 + 6);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  if (!v6)
  {
LABEL_9:
    *a3 = 0;
    a3[1] = 0;
    if (!v7)
      return;
    goto LABEL_10;
  }
  sub_20C93AF94(v6, a3);
  if (!v7)
    return;
LABEL_10:
  v10 = (unint64_t *)&v7->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_20C7B0764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_20C7B0778(uint64_t a1, unsigned __int8 *a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const void **v12;
  unsigned __int8 *v13;
  uint64_t v15;
  std::__shared_weak_count *v16;

  sub_20C93AF94(a1, &v15);
  v5 = v15;
  v4 = v16;
  if (!v16)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v16->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (!v5)
      return 0;
  }
  else
  {
LABEL_5:
    if (!v5)
      return 0;
  }
  v8 = (char)a2[23];
  v9 = *((_QWORD *)a2 + 1);
  if (v8 >= 0)
    v9 = a2[23];
  if (!v9)
    return 1;
  v10 = *(unsigned __int8 *)(a1 + 47);
  if ((v10 & 0x80u) == 0)
    v11 = *(unsigned __int8 *)(a1 + 47);
  else
    v11 = *(_QWORD *)(a1 + 32);
  if (v11 != v9)
    return 0;
  v12 = (const void **)(a1 + 24);
  if (v8 >= 0)
    v13 = a2;
  else
    v13 = *(unsigned __int8 **)a2;
  if ((v10 & 0x80) != 0)
    return !memcmp(*v12, v13, *(_QWORD *)(a1 + 32));
  if (*(_BYTE *)(a1 + 47))
  {
    while (*(unsigned __int8 *)v12 == *v13)
    {
      v12 = (const void **)((char *)v12 + 1);
      ++v13;
      if (!--v10)
        return 1;
    }
    return 0;
  }
  return 1;
}

__int128 *sub_20C7B087C(uint64_t a1)
{
  unsigned __int8 *v2;
  __int128 *v3;
  void *__p[2];
  char v6;

  sub_20BDDC0E4(__p, off_25473DD00[0]);
  v2 = sub_20C67F73C((_QWORD *)(a1 + 160), (unsigned __int8 *)__p);
  if (v2)
    v3 = (__int128 *)(v2 + 40);
  else
    v3 = sub_20C957390();
  if (v6 < 0)
    operator delete(__p[0]);
  return v3;
}

void sub_20C7B08E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__int128 *sub_20C7B0904(uint64_t a1)
{
  __int128 *v1;
  std::__shared_weak_count *shared_weak_owners;
  _BOOL4 v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  int v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;

  sub_20BDE70B8(&v13, (_QWORD *)(a1 + 8));
  shared_weak_owners = v13;
  if (v13)
  {
    while (1)
    {
      v3 = sub_20C7B15D4((uint64_t)shared_weak_owners);
      v4 = (uint64_t)v13;
      if (v3)
        break;
      shared_weak_owners = (std::__shared_weak_count *)v13[9].__shared_weak_owners_;
      if (shared_weak_owners)
      {
        shared_weak_owners = std::__shared_weak_count::lock(shared_weak_owners);
        v5 = shared_weak_owners;
        if (shared_weak_owners)
          shared_weak_owners = *(std::__shared_weak_count **)(v4 + 224);
      }
      else
      {
        v5 = 0;
      }
      v1 = (__int128 *)v14;
      v13 = shared_weak_owners;
      v14 = v5;
      if (v1)
      {
        v6 = (unint64_t *)v1 + 1;
        do
          v7 = __ldaxr(v6);
        while (__stlxr(v7 - 1, v6));
        if (!v7)
        {
          (*(void (**)(__int128 *))(*(_QWORD *)v1 + 16))(v1);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v1);
        }
        shared_weak_owners = v13;
      }
      if (!shared_weak_owners)
        goto LABEL_14;
    }
    v1 = sub_20C7B087C((uint64_t)v13);
    v8 = 0;
  }
  else
  {
LABEL_14:
    v8 = 1;
  }
  v9 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      if (!v8)
        return v1;
      return sub_20C957390();
    }
  }
  if (v8)
    return sub_20C957390();
  return v1;
}

void sub_20C7B0A18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C7B0A30(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned __int8 *a4)
{
  _QWORD *result;
  _QWORD *v7;

  result = sub_20C67F73C((_QWORD *)(*(_QWORD *)a3 + 160), a4);
  if (result)
  {
    v7 = result + 5;
  }
  else
  {
    result = sub_20C957390();
    v7 = result;
  }
  if ((*((char *)v7 + 23) & 0x80000000) == 0)
  {
    if (!*((_BYTE *)v7 + 23))
      return result;
    return sub_20C7B16D8(a1, a2, a2, (__int128 *)v7);
  }
  if (v7[1])
    return sub_20C7B16D8(a1, a2, a2, (__int128 *)v7);
  return result;
}

_QWORD *sub_20C7B0AA4(pxrInternal__aapl__pxrReserved__::TfToken *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t *EmptyString;
  _QWORD *result;
  _QWORD *v8;

  v5 = *a3;
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  result = sub_20C67F73C((_QWORD *)(v5 + 160), (unsigned __int8 *)EmptyString);
  if (result)
  {
    v8 = result + 5;
  }
  else
  {
    result = sub_20C957390();
    v8 = result;
  }
  if ((*((char *)v8 + 23) & 0x80000000) == 0)
  {
    if (!*((_BYTE *)v8 + 23))
      return result;
    return sub_20C7B16D8((uint64_t)a1, a2, a2, (__int128 *)v8);
  }
  if (v8[1])
    return sub_20C7B16D8((uint64_t)a1, a2, a2, (__int128 *)v8);
  return result;
}

_QWORD *sub_20C7B0B3C(uint64_t a1, _QWORD *a2, uint64_t *a3, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD v22[3];

  v6 = *a2 & 0xFFFFFFFFFFFFFFF8;
  v7 = bswap64(0x9E3779B97F4A7C55 * v6);
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = v7;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = v7 & (v8 - 1);
    }
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if ((v11[2] & 0xFFFFFFFFFFFFFFF8) == v6)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  sub_20C7B0DA0(a1, v7, a3, a4, (uint64_t)v22);
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    sub_20BDEC6E0(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v19)
  {
    *(_QWORD *)v22[0] = *v19;
    *v19 = v22[0];
  }
  else
  {
    *(_QWORD *)v22[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v22[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v22[0])
    {
      v20 = *(_QWORD *)(*(_QWORD *)v22[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v20 >= v8)
          v20 %= v8;
      }
      else
      {
        v20 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v20) = v22[0];
    }
  }
  v11 = (_QWORD *)v22[0];
  v22[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C1E9AAC((uint64_t)v22, 0);
  return v11;
}

void sub_20C7B0D88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C1E9AAC((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20C7B0DA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t result;

  v9 = a1 + 16;
  v10 = operator new(0x30uLL);
  *(_QWORD *)a5 = v10;
  *(_QWORD *)(a5 + 8) = v9;
  *(_BYTE *)(a5 + 16) = 0;
  *v10 = 0;
  v10[1] = a2;
  result = sub_20C7B0E24((uint64_t)(v10 + 2), a3, a4);
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

void sub_20C7B0E0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C1E9AAC(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20C7B0E24(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t *EmptyString;
  __int128 v8;

  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 2, v5));
    if ((v6 & 1) == 0)
      *(_QWORD *)a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)a1);
  if (*((char *)EmptyString + 23) < 0)
  {
    sub_20BDDBFAC((_BYTE *)(a1 + 8), (void *)*EmptyString, EmptyString[1]);
  }
  else
  {
    v8 = *(_OWORD *)EmptyString;
    *(_QWORD *)(a1 + 24) = EmptyString[2];
    *(_OWORD *)(a1 + 8) = v8;
  }
  return a1;
}

_QWORD *sub_20C7B0EE0(uint64_t a1, _QWORD *a2, uint64_t *a3, char *a4)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD v22[3];

  v6 = *a2 & 0xFFFFFFFFFFFFFFF8;
  v7 = bswap64(0x9E3779B97F4A7C55 * v6);
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = v7;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = v7 & (v8 - 1);
    }
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if ((v11[2] & 0xFFFFFFFFFFFFFFF8) == v6)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  sub_20C7B1144(a1, v7, a3, a4, (uint64_t)v22);
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    sub_20BDEC6E0(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v19)
  {
    *(_QWORD *)v22[0] = *v19;
    *v19 = v22[0];
  }
  else
  {
    *(_QWORD *)v22[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v22[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v22[0])
    {
      v20 = *(_QWORD *)(*(_QWORD *)v22[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v20 >= v8)
          v20 %= v8;
      }
      else
      {
        v20 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v20) = v22[0];
    }
  }
  v11 = (_QWORD *)v22[0];
  v22[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C1E9AAC((uint64_t)v22, 0);
  return v11;
}

void sub_20C7B112C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C1E9AAC((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C7B1144@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, char *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t *result;

  v9 = a1 + 16;
  v10 = operator new(0x30uLL);
  *(_QWORD *)a5 = v10;
  *(_QWORD *)(a5 + 8) = v9;
  *(_BYTE *)(a5 + 16) = 0;
  *v10 = 0;
  v10[1] = a2;
  result = sub_20C7B11C8(v10 + 2, a3, a4);
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

void sub_20C7B11B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C1E9AAC(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C7B11C8(uint64_t *a1, uint64_t *a2, char *__s)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  v4 = *a2;
  *a1 = *a2;
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 2, v5));
    if ((v6 & 1) == 0)
      *a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  sub_20BDDC0E4(a1 + 1, __s);
  return a1;
}

_QWORD *sub_20C7B124C(uint64_t a1, _QWORD *a2, uint64_t *a3, __int128 *a4)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD v22[3];

  v6 = *a2 & 0xFFFFFFFFFFFFFFF8;
  v7 = bswap64(0x9E3779B97F4A7C55 * v6);
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = v7;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = v7 & (v8 - 1);
    }
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if ((v11[2] & 0xFFFFFFFFFFFFFFF8) == v6)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  sub_20C7B14B0(a1, v7, a3, a4, (uint64_t)v22);
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    sub_20BDEC6E0(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v19)
  {
    *(_QWORD *)v22[0] = *v19;
    *v19 = v22[0];
  }
  else
  {
    *(_QWORD *)v22[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v22[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v22[0])
    {
      v20 = *(_QWORD *)(*(_QWORD *)v22[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v20 >= v8)
          v20 %= v8;
      }
      else
      {
        v20 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v20) = v22[0];
    }
  }
  v11 = (_QWORD *)v22[0];
  v22[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C1E9AAC((uint64_t)v22, 0);
  return v11;
}

void sub_20C7B1498(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C1E9AAC((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C7B14B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, __int128 *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t *result;

  v9 = a1 + 16;
  v10 = operator new(0x30uLL);
  *(_QWORD *)a5 = v10;
  *(_QWORD *)(a5 + 8) = v9;
  *(_BYTE *)(a5 + 16) = 0;
  *v10 = 0;
  v10[1] = a2;
  result = sub_20C7B1534(v10 + 2, a3, a4);
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

void sub_20C7B151C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C1E9AAC(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C7B1534(uint64_t *a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  _BYTE *v7;
  __int128 v8;

  v4 = *a2;
  *a1 = *a2;
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 2, v5));
    if ((v6 & 1) == 0)
      *a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  v7 = a1 + 1;
  if (*((char *)a3 + 23) < 0)
  {
    sub_20BDDBFAC(v7, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v8 = *a3;
    a1[3] = *((_QWORD *)a3 + 2);
    *(_OWORD *)v7 = v8;
  }
  return a1;
}

BOOL sub_20C7B15D4(uint64_t a1)
{
  unsigned __int8 *v2;
  void *__p[2];
  char v5;

  sub_20BDDC0E4(__p, off_25473DD00[0]);
  v2 = sub_20C67F73C((_QWORD *)(a1 + 160), (unsigned __int8 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  return v2 != 0;
}

void sub_20C7B1634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::UsdMtlxTokens_StaticTokenType *sub_20C7B1650(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdMtlxTokens_StaticTokenType *result;
  void *v4;

  result = sub_20C7B1698();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::UsdMtlxTokens_StaticTokenType::~UsdMtlxTokens_StaticTokenType(result);
    operator delete(v4);
  }
  return (pxrInternal__aapl__pxrReserved__::UsdMtlxTokens_StaticTokenType *)atomic_load(a1);
}

pxrInternal__aapl__pxrReserved__::UsdMtlxTokens_StaticTokenType *sub_20C7B1698()
{
  pxrInternal__aapl__pxrReserved__::UsdMtlxTokens_StaticTokenType *v0;

  v0 = (pxrInternal__aapl__pxrReserved__::UsdMtlxTokens_StaticTokenType *)operator new(0x20uLL);
  pxrInternal__aapl__pxrReserved__::UsdMtlxTokens_StaticTokenType::UsdMtlxTokens_StaticTokenType(v0);
  return v0;
}

void sub_20C7B16C4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C7B16D8(uint64_t a1, _QWORD *a2, uint64_t *a3, __int128 *a4)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD v22[3];

  v6 = *a2 & 0xFFFFFFFFFFFFFFF8;
  v7 = bswap64(0x9E3779B97F4A7C55 * v6);
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = v7;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = v7 & (v8 - 1);
    }
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if ((v11[2] & 0xFFFFFFFFFFFFFFF8) == v6)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  sub_20C7B193C(a1, v7, a3, a4, (uint64_t)v22);
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    sub_20BDEC6E0(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v19)
  {
    *(_QWORD *)v22[0] = *v19;
    *v19 = v22[0];
  }
  else
  {
    *(_QWORD *)v22[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v22[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v22[0])
    {
      v20 = *(_QWORD *)(*(_QWORD *)v22[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v20 >= v8)
          v20 %= v8;
      }
      else
      {
        v20 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v20) = v22[0];
    }
  }
  v11 = (_QWORD *)v22[0];
  v22[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C1E9AAC((uint64_t)v22, 0);
  return v11;
}

void sub_20C7B1924(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C1E9AAC((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C7B193C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, __int128 *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t *result;

  v9 = a1 + 16;
  v10 = operator new(0x30uLL);
  *(_QWORD *)a5 = v10;
  *(_QWORD *)(a5 + 8) = v9;
  *(_BYTE *)(a5 + 16) = 0;
  *v10 = 0;
  v10[1] = a2;
  result = sub_20C7B1CC4(v10 + 2, a3, a4);
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

void sub_20C7B19A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C1E9AAC(v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C7B19C0(uint64_t a1, _QWORD *a2, uint64_t *a3, __n128 *a4)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD v22[3];

  v6 = *a2 & 0xFFFFFFFFFFFFFFF8;
  v7 = bswap64(0x9E3779B97F4A7C55 * v6);
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = v7;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = v7 & (v8 - 1);
    }
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if ((v11[2] & 0xFFFFFFFFFFFFFFF8) == v6)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  sub_20C7B1C24(a1, v7, a3, a4, (uint64_t)v22);
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    sub_20BDEC6E0(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v19)
  {
    *(_QWORD *)v22[0] = *v19;
    *v19 = v22[0];
  }
  else
  {
    *(_QWORD *)v22[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v22[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v22[0])
    {
      v20 = *(_QWORD *)(*(_QWORD *)v22[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v20 >= v8)
          v20 %= v8;
      }
      else
      {
        v20 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v20) = v22[0];
    }
  }
  v11 = (_QWORD *)v22[0];
  v22[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C1E9AAC((uint64_t)v22, 0);
  return v11;
}

void sub_20C7B1C0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C1E9AAC((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

__n128 sub_20C7B1C24@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, __n128 *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  __n128 result;

  v9 = a1 + 16;
  v10 = (char *)operator new(0x30uLL);
  *(_QWORD *)a5 = v10;
  *(_QWORD *)(a5 + 8) = v9;
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = a2;
  v11 = *a3;
  *((_QWORD *)v10 + 2) = *a3;
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 2, v12));
    if ((v13 & 1) == 0)
      *((_QWORD *)v10 + 2) &= 0xFFFFFFFFFFFFFFF8;
  }
  result = *a4;
  *(__n128 *)(v10 + 24) = *a4;
  *((_QWORD *)v10 + 5) = a4[1].n128_u64[0];
  a4->n128_u64[1] = 0;
  a4[1].n128_u64[0] = 0;
  a4->n128_u64[0] = 0;
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

uint64_t *sub_20C7B1CC4(uint64_t *a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  _BYTE *v7;
  __int128 v8;

  v4 = *a2;
  *a1 = *a2;
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 2, v5));
    if ((v6 & 1) == 0)
      *a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  v7 = a1 + 1;
  if (*((char *)a3 + 23) < 0)
  {
    sub_20BDDBFAC(v7, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v8 = *a3;
    a1[3] = *((_QWORD *)a3 + 2);
    *(_OWORD *)v7 = v8;
  }
  return a1;
}

uint64_t sub_20C7B1D64(uint64_t *a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  _QWORD v19[5];

  v4 = *a1;
  v5 = (a1[1] - *a1) >> 4;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60)
    sub_20BDDF694();
  v9 = (uint64_t)(a1 + 2);
  v10 = a1[2] - v4;
  if (v10 >> 3 > v6)
    v6 = v10 >> 3;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
    v11 = 0xFFFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  v19[4] = a1 + 2;
  if (v11)
    v12 = (char *)sub_20BDEA2F0(v9, v11);
  else
    v12 = 0;
  v13 = &v12[16 * v5];
  v19[0] = v12;
  v19[1] = v13;
  v19[3] = &v12[16 * v11];
  *(_QWORD *)v13 = *a2;
  *a2 = 0;
  v14 = *a3;
  *((_QWORD *)v13 + 1) = *a3;
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 2, v15));
    if ((v16 & 1) == 0)
      *((_QWORD *)v13 + 1) &= 0xFFFFFFFFFFFFFFF8;
  }
  v19[2] = v13 + 16;
  sub_20C1F3728(a1, v19);
  v17 = a1[1];
  sub_20C1F38C8((uint64_t)v19);
  return v17;
}

void sub_20C7B1E6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C1F38C8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C7B1E80()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C5DF048((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C7B1F54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_20C7B1FA0(uint64_t *a1)
{
  _QWORD *v2;
  char *v3;
  uint64_t result;
  _QWORD *v5;

  v2 = operator new(8uLL);
  *v2 = &unk_24C54B798;
  v5 = v2;
  pxrInternal__aapl__pxrReserved__::TfType::SetFactory(a1, (uint64_t *)&v5, v3);
  result = (uint64_t)v5;
  v5 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_20C7B2004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_20C7B2030(pxrInternal__aapl__pxrReserved__::TfType::FactoryBase *a1)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::TfType::FactoryBase::~FactoryBase(a1);
  operator delete(v1);
}

_QWORD *sub_20C7B2044()
{
  _QWORD *v0;

  v0 = operator new(0x10uLL);
  pxrInternal__aapl__pxrReserved__::NdrParserPlugin::NdrParserPlugin(v0);
  *v0 = &off_24C54B748;
  return v0;
}

void sub_20C7B207C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdMtlxTokens_StaticTokenType::~UsdMtlxTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::UsdMtlxTokens_StaticTokenType *this)
{
  unsigned int *v2;
  unsigned int v3;
  void **v4;

  v4 = (void **)((char *)this + 8);
  sub_20BEEB2B8(&v4);
  if ((*(_QWORD *)this & 7) != 0)
  {
    v2 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
}

{
  unsigned int *v2;
  unsigned int v3;
  void **v4;

  v4 = (void **)((char *)this + 8);
  sub_20BEEB2B8(&v4);
  if ((*(_QWORD *)this & 7) != 0)
  {
    v2 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
}

pxrInternal__aapl__pxrReserved__::UsdMtlxTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::UsdMtlxTokens_StaticTokenType::UsdMtlxTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::UsdMtlxTokens_StaticTokenType *this)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "out", 0);
  v3 = *v2;
  if ((*v2 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      v3 &= 0xFFFFFFFFFFFFFFF8;
  }
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  v6 = operator new(8uLL);
  *((_QWORD *)this + 1) = v6;
  *((_QWORD *)this + 2) = v6;
  *v6 = v3;
  v7 = v6 + 1;
  *((_QWORD *)this + 3) = v6 + 1;
  if ((v3 & 7) != 0)
  {
    v8 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      *v6 &= 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = v7;
    do
      v10 = __ldxr(v8);
    while (__stlxr(v10 - 2, v8));
  }
  else
  {
    *((_QWORD *)this + 2) = v7;
  }
  return this;
}

void sub_20C7B221C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v13;
  unsigned int v14;

  v11 = v10;
  sub_20BEEB2B8(&a9);
  if ((v11 & 7) != 0)
  {
    v13 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  sub_20C96B3E4(v9);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::UsdMtlxStandardLibraryPaths(pxrInternal__aapl__pxrReserved__ *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_25498CDC0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498CDC0))
  {
    sub_20C7B22E8();
    __cxa_atexit((void (*)(void *))sub_20BFBB378, &unk_25498CDA8, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498CDC0);
  }
  return &unk_25498CDA8;
}

void sub_20C7B22D0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498CDC0);
  _Unwind_Resume(a1);
}

void sub_20C7B22E8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  size_t v4;
  std::__fs::filesystem::path *v5;
  void **v6;
  size_t v7;
  std::__fs::filesystem::path *p_dst;
  void **v9;
  std::string::size_type v10;
  char *v11;
  char *v12;
  char *v13;
  std::__fs::filesystem::path __dst;
  std::__fs::filesystem::path v15;
  std::__fs::filesystem::path v16;
  void *__p[2];
  unsigned __int8 v18;
  void *v19[2];
  unsigned __int8 v20;
  std::__fs::filesystem::path v21;
  std::__fs::filesystem::path *v22;
  char v23;
  std::__fs::filesystem::path v24;
  __int128 v25;

  *(_QWORD *)&v25 = *MEMORY[0x24BDAC8D0];
  sub_20C7B28BC("PXR_MTLX_STDLIB_SEARCH_PATHS", (uint64_t *)&unk_25498CDA8);
  sub_20BDDC0E4(&v21, "");
  v0 = dyld_image_path_containing_address();
  dyld_image_header_containing_address();
  v1 = macho_dylib_install_name();
  v2 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x24BDBCF48], "fileURLWithPath:", objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v0)), "URLByResolvingSymlinksInPath");
  v3 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x24BDBCF48], "fileURLWithPath:", objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v1)), "URLByResolvingSymlinksInPath");
  sub_20BDDC0E4(v19, (char *)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v2, "URLByDeletingLastPathComponent"), "path"), "cStringUsingEncoding:", 4));
  sub_20BDDC0E4(__p, (char *)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v3, "URLByDeletingLastPathComponent"), "path"), "cStringUsingEncoding:", 4));
  if ((v20 & 0x80u) == 0)
    v4 = v20;
  else
    v4 = (size_t)v19[1];
  v5 = &v15;
  sub_20BDF6BDC((uint64_t)&v15, v4 + 11);
  if ((v15.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v5 = (std::__fs::filesystem::path *)v15.__pn_.__r_.__value_.__r.__words[0];
  if (v4)
  {
    if ((v20 & 0x80u) == 0)
      v6 = v19;
    else
      v6 = (void **)v19[0];
    memmove(v5, v6, v4);
  }
  strcpy((char *)v5 + v4, "/libraries/");
  v16 = v15;
  if ((v18 & 0x80u) == 0)
    v7 = v18;
  else
    v7 = (size_t)__p[1];
  p_dst = &__dst;
  sub_20BDF6BDC((uint64_t)&__dst, v7 + 11);
  if ((__dst.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_dst = (std::__fs::filesystem::path *)__dst.__pn_.__r_.__value_.__r.__words[0];
  if (v7)
  {
    if ((v18 & 0x80u) == 0)
      v9 = __p;
    else
      v9 = (void **)__p[0];
    memmove(p_dst, v9, v7);
  }
  strcpy((char *)p_dst + v7, "/libraries/");
  v15 = __dst;
  std::__fs::filesystem::__status(&v16, 0);
  if (__dst.__pn_.__r_.__value_.__s.__data_[0] && __dst.__pn_.__r_.__value_.__s.__data_[0] != 255)
  {
    if (SHIBYTE(v16.__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_20BDDBFAC(&__dst, v16.__pn_.__r_.__value_.__l.__data_, v16.__pn_.__r_.__value_.__l.__size_);
      goto LABEL_32;
    }
    *(_OWORD *)&__dst.__pn_.__r_.__value_.__l.__data_ = *(_OWORD *)&v16.__pn_.__r_.__value_.__l.__data_;
    v10 = v16.__pn_.__r_.__value_.__r.__words[2];
  }
  else
  {
    std::__fs::filesystem::__status(&v15, 0);
    if (!__dst.__pn_.__r_.__value_.__s.__data_[0] || __dst.__pn_.__r_.__value_.__s.__data_[0] == 255)
      goto LABEL_35;
    if (SHIBYTE(v15.__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_20BDDBFAC(&__dst, v15.__pn_.__r_.__value_.__l.__data_, v15.__pn_.__r_.__value_.__l.__size_);
      goto LABEL_32;
    }
    *(_OWORD *)&__dst.__pn_.__r_.__value_.__l.__data_ = *(_OWORD *)&v15.__pn_.__r_.__value_.__l.__data_;
    v10 = v15.__pn_.__r_.__value_.__r.__words[2];
  }
  __dst.__pn_.__r_.__value_.__r.__words[2] = v10;
LABEL_32:
  if (SHIBYTE(v21.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__pn_.__r_.__value_.__l.__data_);
  v21 = __dst;
LABEL_35:
  if (SHIBYTE(v21.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!v21.__pn_.__r_.__value_.__l.__size_)
      goto LABEL_42;
    sub_20BDDBFAC(&v24, v21.__pn_.__r_.__value_.__l.__data_, v21.__pn_.__r_.__value_.__l.__size_);
  }
  else
  {
    if (!*((_BYTE *)&v21.__pn_.__r_.__value_.__s + 23))
      goto LABEL_42;
    v24 = v21;
  }
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v22 = (std::__fs::filesystem::path *)&v11;
  v23 = 0;
  v11 = (char *)operator new(0x18uLL);
  v12 = v11;
  v13 = v11 + 24;
  v12 = sub_20BFB76A8((uint64_t)&v13, (__int128 *)&v24, &v25, v11);
  sub_20C7B2A9C((__int128 **)&unk_25498CDA8, (uint64_t)&v11, (uint64_t)&__dst);
  sub_20BE75818((uint64_t)&unk_25498CDA8, (std::string *)__dst.__pn_.__r_.__value_.__l.__data_, (__int128 *)__dst.__pn_.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(__dst.__pn_.__r_.__value_.__l.__size_ - __dst.__pn_.__r_.__value_.__r.__words[0]) >> 3));
  v22 = &__dst;
  sub_20BDE5038((void ***)&v22);
  v22 = (std::__fs::filesystem::path *)&v11;
  sub_20BDE5038((void ***)&v22);
  if (SHIBYTE(v24.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__pn_.__r_.__value_.__l.__data_);
LABEL_42:
  if (SHIBYTE(v15.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v16.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__pn_.__r_.__value_.__l.__data_);
  if ((char)v18 < 0)
    operator delete(__p[0]);
  if ((char)v20 < 0)
    operator delete(v19[0]);
  if (SHIBYTE(v21.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__pn_.__r_.__value_.__l.__data_);
}

void sub_20C7B2724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;
  uint64_t v43;

  if (a22 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  if (a36 < 0)
    operator delete(a31);
  if (a42 < 0)
    operator delete(a37);
  if (*(char *)(v43 - 121) < 0)
    operator delete(*(void **)(v43 - 144));
  *(_QWORD *)(v43 - 144) = v42;
  sub_20BDE5038((void ***)(v43 - 144));
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdMtlxCustomSearchPaths(pxrInternal__aapl__pxrReserved__ *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_25498CDE0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498CDE0))
  {
    sub_20C7B28BC("PXR_MTLX_PLUGIN_SEARCH_PATHS", qword_25498CDC8);
    __cxa_atexit((void (*)(void *))sub_20BFBB378, qword_25498CDC8, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498CDE0);
  }
  return qword_25498CDC8;
}

void sub_20C7B28A4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498CDE0);
  _Unwind_Resume(a1);
}

void sub_20C7B28BC(char *__s@<X0>, uint64_t *a2@<X8>)
{
  std::string::size_type size;
  char v4;
  void *__p[2];
  char v6;
  void *v7[2];
  char v8;
  std::string __str;

  sub_20BDDC0E4(v7, __s);
  sub_20BDDC0E4(__p, "");
  pxrInternal__aapl__pxrReserved__::TfGetenv((const char *)v7, (uint64_t)__p, (uint64_t)&__str);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  v4 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __str.__r_.__value_.__l.__size_;
  if (size)
  {
    sub_20BDDC0E4(v7, ":");
    pxrInternal__aapl__pxrReserved__::TfStringSplit(&__str, (char *)v7, a2);
    if (v8 < 0)
      operator delete(v7[0]);
    if ((*((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x80) != 0)
      goto LABEL_11;
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    if (v4 < 0)
LABEL_11:
      operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_20C7B2994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a21 < 0)
    operator delete(__p);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

void *pxrInternal__aapl__pxrReserved__::UsdMtlxSearchPaths(pxrInternal__aapl__pxrReserved__ *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__ *v3;
  uint64_t *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498CE00);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__ *)__cxa_guard_acquire(&qword_25498CE00);
    if ((_DWORD)v3)
    {
      v4 = pxrInternal__aapl__pxrReserved__::UsdMtlxCustomSearchPaths(v3);
      pxrInternal__aapl__pxrReserved__::UsdMtlxStandardLibraryPaths((pxrInternal__aapl__pxrReserved__ *)v4);
      sub_20C7B2A9C((__int128 **)qword_25498CDC8, (uint64_t)byte_25498CDA8, (uint64_t)&unk_25498CDE8);
      __cxa_atexit((void (*)(void *))sub_20BFBB378, &unk_25498CDE8, &dword_20BDBC000);
      __cxa_guard_release(&qword_25498CE00);
    }
  }
  return &unk_25498CDE8;
}

void sub_20C7B2A84(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498CE00);
  _Unwind_Resume(a1);
}

std::string *sub_20C7B2A9C@<X0>(__int128 **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_20BE78B98((char *)a3, *a1, a1[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 3));
  return sub_20BFB74E8((uint64_t *)a3, *(std::string **)(a3 + 8), *(std::string **)a2, *(__int128 **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
}

void sub_20C7B2B10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDE5038((void ***)va);
  _Unwind_Resume(a1);
}

char *pxrInternal__aapl__pxrReserved__::UsdMtlxStandardFileExtensions@<X0>(uint64_t a1@<X8>)
{
  unsigned __int8 v3;
  void *__p[2];
  char v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v3 = atomic_load((unsigned __int8 *)&qword_25498CE20);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25498CE20))
  {
    sub_20BDDC0E4(__p, "mtlx");
    sub_20C088980((uint64_t)&qword_25498CE08, (__int128 *)__p, 1uLL);
    if (v6 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))sub_20BFBB378, &qword_25498CE08, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498CE20);
  }
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return sub_20BE78B98((char *)a1, (__int128 *)qword_25498CE08, *(__int128 **)algn_25498CE10, 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)algn_25498CE10 - qword_25498CE08) >> 3));
}

void sub_20C7B2C28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_25498CE20);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdMtlxReadDocument(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *a2@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *Instance;
  unint64_t v25;
  unint64_t v26;
  BOOL IsCleanImpl;
  void *__p[2];
  uint64_t v29;
  void **v30[3];
  _QWORD v31[2];
  unint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  std::string *v35;
  std::__shared_weak_count *v36;
  uint64_t v37[3];
  _QWORD v38[4];
  std::string *v39;
  std::__shared_weak_count *v40;
  void ***v41;

  sub_20C926150(a2, a1);
  if (pxrInternal__aapl__pxrReserved__::TfIsFile((const char *)a1, 0))
  {
    v4 = (std::__shared_weak_count *)*((_QWORD *)a2 + 1);
    v39 = *(std::string **)a2;
    v40 = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
    sub_20C7B7EC8(v38, (std::string *)a1);
    memset(v37, 0, sizeof(v37));
    sub_20C968D70(&v39, (uint64_t)v38, v37, 0);
    __p[0] = v37;
    sub_20C7B7F14((void ***)__p);
    __p[0] = v38;
    sub_20BDE5038((void ***)__p);
    v7 = v40;
    if (v40)
    {
      v8 = (unint64_t *)&v40->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v10 = (std::__shared_weak_count *)*((_QWORD *)a2 + 1);
    v35 = *(std::string **)a2;
    v36 = v10;
    if (v10)
    {
      v11 = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    __p[0] = 0;
    __p[1] = 0;
    v29 = 0;
    v33 = 0;
    v34 = 0;
    sub_20C9683AC((uint64_t *)&v35, (uint64_t *)__p, &v33);
    v13 = v34;
    if (v34)
    {
      v14 = (unint64_t *)&v34->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v30[0] = __p;
    sub_20C7B7F14(v30);
    v16 = v36;
    if (v36)
    {
      v17 = (unint64_t *)&v36->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v32);
    v19 = (std::__shared_weak_count *)*((_QWORD *)a2 + 1);
    v31[0] = *(_QWORD *)a2;
    v31[1] = v19;
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    if (*(char *)(a1 + 23) < 0)
    {
      sub_20BDDBFAC(__p, *(void **)a1, *(_QWORD *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a1;
      v29 = *(_QWORD *)(a1 + 16);
    }
    memset(v30, 0, sizeof(v30));
    sub_20C7B3114((pxrInternal__aapl__pxrReserved__ *)v31, (uint64_t)__p, (uint64_t *)v30, 0);
    v41 = v30;
    sub_20C7B7F14((void ***)&v41);
    if (SHIBYTE(v29) < 0)
      operator delete(__p[0]);
    if (v19)
    {
      v22 = (unint64_t *)&v19->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    if (!Instance)
      Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    v25 = v32;
    v26 = atomic_load(Instance + 18);
    if (v25 >= v26)
    {
      pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v32);
    }
    else
    {
      IsCleanImpl = pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v32, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance);
      pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v32);
      if (!IsCleanImpl)
      {
        pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(a2);
        *(_QWORD *)a2 = 0;
        *((_QWORD *)a2 + 1) = 0;
      }
    }
  }
}

#error "20C7B30D8: call analysis failed (funcsize=62)"

void sub_20C7B3108()
{
  JUMPOUT(0x20C7B3000);
}

void sub_20C7B3114(pxrInternal__aapl__pxrReserved__ *a1, uint64_t a2, uint64_t *a3, __int128 **a4)
{
  uint64_t *Resolver;
  size_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  const char *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22[2];
  std::string __p;
  const char *v24;
  char v25;
  __int128 v26;
  __int128 v27;

  v27 = 0uLL;
  Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(a1);
  pxrInternal__aapl__pxrReserved__::ArResolver::OpenAsset((uint64_t)Resolver);
  if (__p.__r_.__value_.__r.__words[0])
  {
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 24))(&v26);
    v27 = v26;
    v9 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 16))(__p.__r_.__value_.__r.__words[0]);
  }
  else
  {
    v9 = 0;
  }
  if (__p.__r_.__value_.__l.__size_)
  {
    v10 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      (*(void (**)(std::string::size_type))(*(_QWORD *)__p.__r_.__value_.__l.__size_ + 16))(__p.__r_.__value_.__l.__size_);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
    }
  }
  if ((_QWORD)v27)
  {
    sub_20BDFC7D8(&__p, (void *)v27, v9);
    v12 = *(_QWORD *)a1;
    v13 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
    v22[0] = v12;
    v22[1] = (uint64_t)v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
    sub_20C7B3604(v22, &__p, a2, a3, a4);
    if (v13)
    {
      v16 = (unint64_t *)&v13->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"usdMtlx/utils.mm";
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)"_ReadFromAsset";
    __p.__r_.__value_.__r.__words[2] = 387;
    v24 = "void pxrInternal__aapl__pxrReserved__::_ReadFromAsset(mx::DocumentPtr, const ArResolvedPath &, const mx::FileS"
          "earchPath &, const mx::XmlReadOptions *)";
    v25 = 0;
    if (*(char *)(a2 + 23) >= 0)
      v18 = (const char *)a2;
    else
      v18 = *(const char **)a2;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Unable to open MaterialX document '%s'", v18);
  }
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
  if (*((_QWORD *)&v27 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_20C7B32F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v17 - 64));
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdMtlxGetDocumentFromString(const std::string *a1@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  char v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19[3];
  void *__p[2];
  uint64_t v21;
  uint64_t v22[2];
  uint64_t v23;
  uint64_t v24;
  std::string v25;
  void **v26;

  v4 = sub_20BEF33B4((uint64_t)__p, (uint64_t)a1);
  std::to_string(&v25, v4);
  sub_20C7B3598();
  __p[0] = 0;
  v5 = sub_20C7B8A28((uint64_t **)&qword_25498CF08, (const void **)&v25.__r_.__value_.__l.__data_, (uint64_t)&v25);
  v6 = v5;
  if (v7)
  {
    sub_20C926150(&v23, v5);
    v8 = (std::__shared_weak_count *)v24;
    v22[0] = v23;
    v22[1] = v24;
    if (v24)
    {
      v9 = (unint64_t *)(v24 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    __p[0] = 0;
    __p[1] = 0;
    v21 = 0;
    memset(v19, 0, sizeof(v19));
    sub_20C7B3604(v22, a1, (uint64_t)__p, v19, 0);
    v26 = (void **)v19;
    sub_20C7B7F14(&v26);
    if (SHIBYTE(v21) < 0)
      operator delete(__p[0]);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    sub_20BDE881C(v6 + 7, &v23);
    v13 = (std::__shared_weak_count *)v24;
    if (v24)
    {
      v14 = (unint64_t *)(v24 + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  v16 = v6[8];
  *a2 = v6[7];
  a2[1] = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
}

void sub_20C7B34DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,char a22)
{
  uint64_t v22;
  uint64_t v23;
  void *v26;
  const char *v27;
  char *v28;

  *(_QWORD *)(v23 - 56) = v22;
  sub_20C7B7F14((void ***)(v23 - 56));
  if (a19 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a20);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a22);
  if (a2 == 1)
  {
    v26 = __cxa_begin_catch(a1);
    if (sub_20C1E8FF8(1))
    {
      (*(void (**)(void *))(*(_QWORD *)v26 + 16))(v26);
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"MaterialX error reading source XML: %s", v27, v28);
    }
    __cxa_end_catch();
    JUMPOUT(0x20C7B3494);
  }
  if (*(char *)(v23 - 57) < 0)
    operator delete(*(void **)(v23 - 80));
  _Unwind_Resume(a1);
}

void sub_20C7B3598()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25498CF20);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_25498CF20))
    {
      qword_25498CF18 = 0;
      qword_25498CF10 = 0;
      qword_25498CF08 = (uint64_t)&qword_25498CF10;
      __cxa_atexit((void (*)(void *))sub_20C7B7F84, &qword_25498CF08, &dword_20BDBC000);
      __cxa_guard_release(&qword_25498CF20);
    }
  }
}

uint64_t sub_20C7B3604(uint64_t *a1, const std::string *a2, uint64_t a3, uint64_t *a4, __int128 **a5)
{
  void ***v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  uint64_t v32[3];
  uint64_t v33;
  std::__shared_weak_count *v34;
  void ***v35;
  __int16 v36;
  _QWORD v37[4];
  _QWORD v38[3];
  void **v39;
  uint64_t v40;
  uint64_t v41;
  void ***v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  if (a5)
  {
    v36 = *(_WORD *)a5;
    sub_20BE9E6E8((uint64_t)v37, (uint64_t)(a5 + 1));
    memset(v38, 0, sizeof(v38));
    sub_20BE78B98((char *)v38, a5[5], a5[6], 0xAAAAAAAAAAAAAAABLL * (((char *)a5[6] - (char *)a5[5]) >> 3));
  }
  else
  {
    sub_20C969040((uint64_t)&v36);
  }
  v39 = (void **)&off_24C54B808;
  v40 = a3;
  v42 = &v39;
  sub_20C7B84CC(&v39, v37);
  v10 = v42;
  if (v42 == &v39)
  {
    v11 = 4;
    v10 = &v39;
  }
  else
  {
    if (!v42)
      goto LABEL_9;
    v11 = 5;
  }
  ((void (*)(void))(*v10)[v11])();
LABEL_9:
  v12 = a1[1];
  v33 = *a1;
  v34 = (std::__shared_weak_count *)v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  memset(v32, 0, sizeof(v32));
  sub_20C7B8640(v32, *a4, a4[1], (a4[1] - *a4) >> 5);
  sub_20C969F14(&v33, a2, v32, &v36);
  v39 = (void **)v32;
  sub_20C7B7F14(&v39);
  v15 = v34;
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = a1[1];
  v30 = *a1;
  v31 = (std::__shared_weak_count *)v18;
  if (v18)
  {
    v19 = (unint64_t *)(v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v28 = 0;
  v29 = 0;
  sub_20C9683AC(&v30, (uint64_t *)&v39, &v28);
  v21 = v29;
  if (v29)
  {
    v22 = (unint64_t *)&v29->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v35 = &v39;
  sub_20C7B7F14((void ***)&v35);
  v24 = v31;
  if (v31)
  {
    v25 = (unint64_t *)&v31->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  return sub_20C7B8804((uint64_t)&v36);
}

void sub_20C7B3880(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,_QWORD *a24)
{
  _QWORD *v24;
  uint64_t v26;

  if (a24 == v24)
  {
    v26 = 4;
  }
  else
  {
    if (!a24)
      goto LABEL_6;
    v26 = 5;
    v24 = a24;
  }
  (*(void (**)(_QWORD *))(*v24 + 8 * v26))(v24);
LABEL_6:
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdMtlxGetDocument(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;
  char v6;
  _QWORD **v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  pxrInternal__aapl__pxrReserved__ *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  pxrInternal__aapl__pxrReserved__ *v20;
  unint64_t *Instance;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t i;
  const char *v26;
  char *v27;
  _QWORD *v28;
  unint64_t *v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  __int128 v35;
  unint64_t v36;

  sub_20C7B3598();
  *(_QWORD *)&v35 = 0;
  v4 = sub_20C7B8A28((uint64_t **)&qword_25498CF08, (const void **)a1, a1);
  v5 = v4;
  if (v6)
  {
    v7 = (_QWORD **)(v4 + 7);
    v8 = pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v36);
    v9 = *(unsigned __int8 *)(a1 + 23);
    if ((v9 & 0x80u) != 0)
      v9 = *(_QWORD *)(a1 + 8);
    if (v9)
    {
      pxrInternal__aapl__pxrReserved__::UsdMtlxReadDocument(a1, (pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v35);
      sub_20BDE82DC((uint64_t)(v5 + 7), &v35);
      v10 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
      if (*((_QWORD *)&v35 + 1))
      {
        v11 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
    else
    {
      sub_20C926150(&v35, v8);
      v16 = (pxrInternal__aapl__pxrReserved__ *)sub_20BDE82DC((uint64_t)(v5 + 7), &v35);
      v17 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
      if (*((_QWORD *)&v35 + 1))
      {
        v18 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      pxrInternal__aapl__pxrReserved__::UsdMtlxStandardLibraryPaths(v16);
      sub_20C7B3BC8(byte_25498CDA8, *v7);
      pxrInternal__aapl__pxrReserved__::UsdMtlxCustomSearchPaths(v20);
      sub_20C7B3BC8((char *)qword_25498CDC8, *v7);
    }
    Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    if (!Instance)
      Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    v22 = v36;
    v23 = atomic_load(Instance + 18);
    if (v22 < v23
      && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v36, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
    {
      v24 = sub_20BEC5244(&v36, 0);
      for (i = sub_20BEDAF68(); v24 != (_QWORD *)i; v24 = (_QWORD *)v24[1])
      {
        if (sub_20C1E8FF8(1))
        {
          v28 = v24 + 7;
          if (*((char *)v24 + 79) < 0)
            v28 = (_QWORD *)*v28;
          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"%s\n", v26, v27, v28, (_QWORD)v35);
        }
      }
      v29 = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      if (!v29)
        v29 = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      v30 = sub_20BEC5244(&v36, 0);
      LOBYTE(v35) = 0;
      v31 = (_QWORD *)sub_20BEB5B80(v29 + 19, &v35);
      if (v31 != v30)
        pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(v29, v30, v31);
    }
    v32 = v5[8];
    *a2 = v5[7];
    a2[1] = v32;
    if (v32)
    {
      v33 = (unint64_t *)(v32 + 8);
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
    }
    pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v36);
  }
  else
  {
    v13 = v4[8];
    *a2 = v4[7];
    a2[1] = v13;
    if (v13)
    {
      v14 = (unint64_t *)(v13 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
  }
}

void sub_20C7B3B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

void sub_20C7B3BC8(char *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t i;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  void **v14;
  std::__shared_weak_count *v15;
  void **v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  uint64_t v19;

  pxrInternal__aapl__pxrReserved__::UsdMtlxStandardFileExtensions((uint64_t)&v14);
  pxrInternal__aapl__pxrReserved__::NdrFsHelpersDiscoverFiles(a1, (uint64_t)&v14, 0, &v18);
  v16 = (void **)&v14;
  sub_20BDE5038(&v16);
  v4 = v18;
  for (i = v19; v4 != i; v4 += 48)
  {
    pxrInternal__aapl__pxrReserved__::UsdMtlxReadDocument(v4 + 24, (pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v16);
    if (v16)
    {
      v14 = v16;
      v15 = v17;
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      sub_20C9266D4(a2, (uint64_t *)&v14);
      v8 = v15;
      if (v15)
      {
        v9 = (unint64_t *)&v15->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    v11 = v17;
    if (v17)
    {
      v12 = (unint64_t *)&v17->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  v14 = (void **)&v18;
  sub_20BE93030(&v14);
}

void sub_20C7B3DA4()
{
  uint64_t v0;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v0);
  JUMPOUT(0x20C7B3DDCLL);
}

void sub_20C7B3DAC()
{
  __cxa_end_catch();
  JUMPOUT(0x20C7B3DB4);
}

void sub_20C7B3DC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20BDE5038((void ***)va);
  JUMPOUT(0x20C7B3DECLL);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdMtlxGetVersion(uint64_t *a1, _BYTE *a2)
{
  __int128 *v4;
  __int128 v5;
  void *v6;
  uint64_t v7;
  unint64_t *Instance;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v12;
  void *__p[2];
  uint64_t v14;
  unint64_t v15;

  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v15);
  v4 = sub_20C7B3F74(*a1);
  if (*((char *)v4 + 23) < 0)
  {
    sub_20BDDBFAC(__p, *(void **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v14 = *((_QWORD *)v4 + 2);
    *(_OWORD *)__p = v5;
  }
  v6 = (void *)HIBYTE(v14);
  if (v14 < 0)
    v6 = __p[1];
  if (!v6)
  {
    v7 = 0;
    if (!a2)
      goto LABEL_14;
    goto LABEL_13;
  }
  pxrInternal__aapl__pxrReserved__::NdrVersion::NdrVersion((uint64_t)&v12, (uint64_t)__p);
  if (v12)
    v7 = v12;
  else
    v7 = 0;
  if (a2)
LABEL_13:
    *a2 = sub_20C7B3FFC(*a1) ^ 1;
LABEL_14:
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v9 = sub_20BEC5244(&v15, 0);
  LOBYTE(v12) = 0;
  v10 = (_QWORD *)sub_20BEB5B80(Instance + 19, &v12);
  if (v10 != v9)
    pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(Instance, v9, v10);
  if (SHIBYTE(v14) < 0)
    operator delete(__p[0]);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v15);
  return v7;
}

void sub_20C7B3F40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&a17);
  _Unwind_Resume(a1);
}

__int128 *sub_20C7B3F74(uint64_t a1)
{
  unsigned __int8 *v2;
  __int128 *v3;
  void *__p[2];
  char v6;

  sub_20BDDC0E4(__p, off_25473DED8[0]);
  v2 = sub_20C67F73C((_QWORD *)(a1 + 160), (unsigned __int8 *)__p);
  if (v2)
    v3 = (__int128 *)(v2 + 40);
  else
    v3 = sub_20C957390();
  if (v6 < 0)
    operator delete(__p[0]);
  return v3;
}

void sub_20C7B3FE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *sub_20C7B3FFC(uint64_t a1)
{
  unsigned __int8 *v2;
  void *__p[2];
  char v5;

  sub_20BDDC0E4(__p, off_25473DEE0[0]);
  v2 = sub_20C7B886C(a1, (unsigned __int8 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_20C7B4058(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdMtlxGetSourceURI(uint64_t *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  int v10;
  unint64_t *v11;
  unint64_t v12;

  v3 = *a1;
  v2 = (std::__shared_weak_count *)a1[1];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  while (1)
  {
    if (!v3)
    {
      v10 = 1;
      if (!v2)
        goto LABEL_28;
      goto LABEL_24;
    }
    v6 = v2;
    if ((*(char *)(v3 + 95) & 0x80000000) == 0)
    {
      if (*(_BYTE *)(v3 + 95))
        break;
      goto LABEL_9;
    }
    if (*(_QWORD *)(v3 + 80))
      break;
LABEL_9:
    v7 = *(std::__shared_weak_count **)(v3 + 232);
    if (v7)
    {
      v2 = std::__shared_weak_count::lock(v7);
      if (v2)
      {
        v3 = *(_QWORD *)(v3 + 224);
        if (v6)
          goto LABEL_16;
      }
      else
      {
        v3 = 0;
        if (v6)
        {
LABEL_16:
          v8 = (unint64_t *)&v6->__shared_owners_;
          do
            v9 = __ldaxr(v8);
          while (__stlxr(v9 - 1, v8));
          if (!v9)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
      }
    }
    else
    {
      v3 = 0;
      v2 = 0;
      if (v6)
        goto LABEL_16;
    }
  }
  v10 = 0;
  v3 += 72;
  if (!v2)
    goto LABEL_28;
LABEL_24:
  v11 = (unint64_t *)&v2->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
LABEL_28:
  if (v10)
    return *a1 + 72;
  else
    return v3;
}

unsigned __int8 *pxrInternal__aapl__pxrReserved__::UsdMtlxGetUsdType@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 *result;
  uint64_t *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  BOOL v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v35;
  uint64_t v36;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v37;
  unsigned int *v38;
  unsigned int v39;
  unint64_t v40;
  unint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v44;
  uint64_t v45;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v46;
  unsigned int *v47;
  unsigned int v48;
  unint64_t v49;
  unint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v53;
  uint64_t v54;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v55;
  unsigned int *v56;
  unsigned int v57;
  unint64_t v58;
  unint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v62;
  uint64_t v63;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v64;
  unsigned int *v65;
  unsigned int v66;
  unint64_t v67;
  unint64_t v68;
  unsigned int *v69;
  unsigned int v70;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v71;
  uint64_t v72;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v73;
  unsigned int *v74;
  unsigned int v75;
  unint64_t v76;
  unint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v80;
  uint64_t v81;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v82;
  unsigned int *v83;
  unsigned int v84;
  unint64_t v85;
  unint64_t v86;
  unsigned int *v87;
  unsigned int v88;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v89;
  uint64_t v90;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v91;
  unsigned int *v92;
  unsigned int v93;
  unint64_t v94;
  unint64_t v95;
  unsigned int *v96;
  unsigned int v97;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v98;
  uint64_t v99;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v100;
  unsigned int *v101;
  unsigned int v102;
  unint64_t v103;
  unint64_t v104;
  unsigned int *v105;
  unsigned int v106;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v107;
  uint64_t v108;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v109;
  unsigned int *v110;
  unsigned int v111;
  unint64_t v112;
  unint64_t v113;
  unsigned int *v114;
  unsigned int v115;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v116;
  uint64_t v117;
  unsigned int *v118;
  unsigned int v119;
  uint64_t v120;
  unint64_t v121;
  unsigned int *v122;
  unsigned int v123;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v124;
  uint64_t v125;
  unsigned int *v126;
  unsigned int v127;
  uint64_t v128;
  unint64_t v129;
  unsigned int *v130;
  unsigned int v131;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v132;
  uint64_t v133;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v134;
  unsigned int *v135;
  unsigned int v136;
  unint64_t v137;
  unint64_t v138;
  unsigned int *v139;
  unsigned int v140;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v141;
  uint64_t v142;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v143;
  unsigned int *v144;
  unsigned int v145;
  unint64_t v146;
  unint64_t v147;
  unsigned int *v148;
  unsigned int v149;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v150;
  uint64_t v151;
  unsigned int *v152;
  unsigned int v153;
  uint64_t v154;
  unint64_t v155;
  unsigned int *v156;
  unsigned int v157;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v158;
  uint64_t v159;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v160;
  unsigned int *v161;
  unsigned int v162;
  unint64_t v163;
  unint64_t v164;
  unsigned int *v165;
  unsigned int v166;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v167;
  uint64_t v168;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v169;
  unsigned int *v170;
  unsigned int v171;
  unint64_t v172;
  unint64_t v173;
  unsigned int *v174;
  unsigned int v175;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v176;
  uint64_t v177;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v178;
  unsigned int *v179;
  unsigned int v180;
  unint64_t v181;
  unint64_t v182;
  unsigned int *v183;
  unsigned int v184;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v185;
  uint64_t v186;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v187;
  unsigned int *v188;
  unsigned int v189;
  unint64_t v190;
  unint64_t v191;
  unsigned int *v192;
  unsigned int v193;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v194;
  uint64_t v195;
  unsigned int *v196;
  unsigned int v197;
  uint64_t v198;
  unint64_t v199;
  unsigned int *v200;
  unsigned int v201;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v202;
  uint64_t v203;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v204;
  unsigned int *v205;
  unsigned int v206;
  unint64_t v207;
  unint64_t v208;
  unsigned int *v209;
  unsigned int v210;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v211;
  uint64_t v212;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v213;
  unsigned int *v214;
  unsigned int v215;
  unint64_t v216;
  unint64_t v217;
  unsigned int *v218;
  unsigned int v219;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v220;
  uint64_t v221;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v222;
  unsigned int *v223;
  unsigned int v224;
  unint64_t v225;
  unint64_t v226;
  unsigned int *v227;
  unsigned int v228;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v229;
  uint64_t v230;
  unsigned int *v231;
  unsigned int v232;
  uint64_t v233;
  unint64_t v234;
  unsigned int *v235;
  unsigned int v236;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v237;
  uint64_t v238;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v239;
  unsigned int *v240;
  unsigned int v241;
  unint64_t v242;
  unint64_t v243;
  unsigned int *v244;
  unsigned int v245;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v246;
  uint64_t v247;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v248;
  unint64_t v249;
  unsigned int *v250;
  unsigned int v251;
  unint64_t v252;
  unsigned int *v253;
  unsigned int v254;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v255;
  uint64_t v256;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v257;
  unint64_t v258;
  unsigned int *v259;
  unsigned int v260;
  unint64_t v261;
  unsigned int *v262;
  unsigned int v263;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v264;
  uint64_t v265;
  uint64_t v266;
  unsigned int *v267;
  unsigned int v268;
  unint64_t v269;
  unsigned int *v270;
  unsigned int v271;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v272;
  uint64_t v273;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v274;
  unint64_t v275;
  unsigned int *v276;
  unsigned int v277;
  unint64_t v278;
  unsigned int *v279;
  unsigned int v280;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v281;
  uint64_t v282;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v283;
  unint64_t v284;
  unsigned int *v285;
  unsigned int v286;
  unint64_t v287;
  unsigned int *v288;
  unsigned int v289;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v290;
  uint64_t v291;
  pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *v292;
  unint64_t v293;
  unsigned int *v294;
  unsigned int v295;
  unint64_t v296;
  unsigned int *v297;
  unsigned int v298;
  uint64_t i;
  unsigned int *v300;
  unsigned int v301;
  unsigned int *v302;
  unsigned int v303;
  unsigned int *v304;
  unsigned int v305;
  unsigned int *v306;
  unsigned int v307;
  unsigned int *v308;
  unsigned int v309;
  unsigned int *v310;
  unsigned int v311;
  unsigned int *v312;
  unsigned int v313;
  unsigned int *v314;
  unsigned int v315;
  unsigned int *v316;
  unsigned int v317;
  unsigned int *v318;
  unsigned int v319;
  unsigned int *v320;
  unsigned int v321;
  unsigned int *v322;
  unsigned int v323;
  unsigned int *v324;
  unsigned int v325;
  unsigned int *v326;
  unsigned int v327;
  unsigned int *v328;
  unsigned int v329;
  unsigned int *v330;
  unsigned int v331;
  unsigned int *v332;
  unsigned int v333;
  unsigned int *v334;
  unsigned int v335;
  unsigned int *v336;
  unsigned int v337;
  unsigned int *v338;
  unsigned int v339;
  unsigned int *v340;
  unsigned int v341;
  unsigned int *v342;
  unsigned int v343;
  unsigned int *v344;
  unsigned int v345;
  unsigned int *v346;
  unsigned int v347;
  unsigned int *v348;
  unsigned int v349;
  unsigned int *v350;
  unsigned int v351;
  unsigned int *v352;
  unsigned int v353;
  unsigned int *v354;
  unsigned int v355;
  unsigned int *v356;
  unsigned int v357;
  unsigned int *v358;
  unsigned int v359;
  unsigned int *v360;
  unsigned int v361;
  unsigned int *v362;
  unsigned int v363;
  uint64_t v364;
  unsigned __int8 *v365;
  unint64_t v366;
  uint64_t v367;
  unint64_t v368;
  unint64_t v369;
  unint64_t v370;
  uint64_t v371;
  unint64_t v372;
  unint64_t v373;
  unint64_t v374;
  unint64_t v375;
  uint64_t v376;
  unint64_t v377;
  unint64_t v378;
  uint64_t v379;
  uint64_t v380;
  unint64_t v381;
  unint64_t v382;
  unint64_t v383;
  unint64_t v384;
  unint64_t v385;
  unint64_t v386;
  unint64_t v387;
  unint64_t v388;
  unint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  _QWORD v393[5];
  int v394;
  char v395;
  _QWORD v396[5];
  int v397;
  char v398;
  _QWORD v399[5];
  int v400;
  char v401;
  _QWORD v402[5];
  int v403;
  char v404;
  _QWORD v405[5];
  int v406;
  char v407;
  _QWORD v408[5];
  int v409;
  char v410;
  _QWORD v411[5];
  int v412;
  char v413;
  _QWORD v414[5];
  int v415;
  char v416;
  _QWORD v417[5];
  int v418;
  char v419;
  _QWORD v420[5];
  int v421;
  char v422;
  _QWORD v423[5];
  int v424;
  char v425;
  _QWORD v426[5];
  int v427;
  char v428;
  _QWORD v429[5];
  int v430;
  char v431;
  _QWORD v432[5];
  int v433;
  char v434;
  _QWORD v435[5];
  int v436;
  char v437;
  _QWORD v438[5];
  int v439;
  char v440;
  _QWORD v441[5];
  int v442;
  char v443;
  _QWORD v444[5];
  int v445;
  char v446;
  _QWORD v447[5];
  int v448;
  char v449;
  _QWORD v450[5];
  int v451;
  char v452;
  _QWORD v453[5];
  int v454;
  char v455;
  _QWORD v456[5];
  int v457;
  char v458;
  _QWORD v459[5];
  int v460;
  char v461;
  _QWORD v462[5];
  int v463;
  char v464;
  _QWORD v465[5];
  int v466;
  char v467;
  _QWORD v468[5];
  int v469;
  char v470;
  _QWORD v471[5];
  int v472;
  char v473;
  _QWORD v474[5];
  int v475;
  char v476;
  _QWORD v477[5];
  int v478;
  char v479;
  _QWORD v480[5];
  int v481;
  char v482;
  _QWORD v483[5];
  int v484;
  char v485;
  _QWORD v486[5];
  int v487;
  char v488;
  uint64_t v489;

  v489 = *MEMORY[0x24BDAC8D0];
  v4 = atomic_load((unsigned __int8 *)&qword_25498CE30);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25498CE30))
  {
    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_25498CE28, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498CE30);
  }
  v5 = atomic_load((unsigned __int8 *)&qword_25498CE50);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_25498CE50))
  {
    pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v392);
    v12 = qword_25498CE28;
    if ((qword_25498CE28 & 7) != 0)
    {
      v13 = (unsigned int *)(qword_25498CE28 & 0xFFFFFFFFFFFFFFF8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 2, v13));
      if ((v14 & 1) == 0)
        v12 &= 0xFFFFFFFFFFFFFFF8;
    }
    qword_25498CE38 = v392;
    qword_25498CE40 = v12;
    if ((v12 & 7) != 0)
    {
      v15 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 2, v15));
      if ((v16 & 1) == 0)
        qword_25498CE40 &= 0xFFFFFFFFFFFFFFF8;
      dword_25498CE48 = 0;
      byte_25498CE4C = 0;
      do
        v17 = __ldxr(v15);
      while (__stlxr(v17 - 2, v15));
    }
    else
    {
      dword_25498CE48 = 0;
      byte_25498CE4C = 0;
    }
    __cxa_atexit((void (*)(void *))sub_20C7B6C34, &qword_25498CE38, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498CE50);
  }
  v6 = atomic_load((unsigned __int8 *)&qword_25498CE80);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25498CE80))
  {
    v365 = a1;
    v364 = a2;
    v18 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v18)
      v18 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    v19 = *(_QWORD *)v18;
    v391 = qword_25498CE28;
    if ((qword_25498CE28 & 7) != 0)
    {
      v20 = (unsigned int *)(qword_25498CE28 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 2, v20));
      v22 = (v21 & 1) == 0;
      v23 = v391;
      if (v22)
        v23 = (uint64_t)v20;
      v391 = v23;
    }
    v24 = v391;
    if ((v391 & 7) != 0)
    {
      v25 = (unsigned int *)(v391 & 0xFFFFFFFFFFFFFFF8);
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 2, v25));
      if ((v26 & 1) != 0)
        v24 = v391;
      else
        v24 = v391 & 0xFFFFFFFFFFFFFFF8;
    }
    sub_20BDDC0E4(v393, "BOOLean");
    v393[3] = v19;
    v393[4] = v24;
    v394 = 0;
    v395 = 1;
    v27 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v27)
      v27 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    v28 = *((_QWORD *)v27 + 76);
    v390 = qword_25498CE28;
    if ((qword_25498CE28 & 7) != 0)
    {
      v29 = (unsigned int *)(qword_25498CE28 & 0xFFFFFFFFFFFFFFF8);
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 2, v29));
      v22 = (v30 & 1) == 0;
      v31 = v390;
      if (v22)
        v31 = (uint64_t)v29;
      v390 = v31;
    }
    v32 = v390;
    if ((v390 & 7) != 0)
    {
      v33 = (unsigned int *)(v390 & 0xFFFFFFFFFFFFFFF8);
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 2, v33));
      if ((v34 & 1) != 0)
        v32 = v390;
      else
        v32 = v390 & 0xFFFFFFFFFFFFFFF8;
    }
    sub_20BDDC0E4(v396, "color2array");
    v396[3] = v28;
    v396[4] = v32;
    v397 = 0;
    v398 = 0;
    v35 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v35)
      v35 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    v36 = *((_QWORD *)v35 + 19);
    v37 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v37)
      v37 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    v389 = *((_QWORD *)v37 + 2);
    if ((v389 & 7) != 0)
    {
      v38 = (unsigned int *)(v389 & 0xFFFFFFFFFFFFFFF8);
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 2, v38));
      v22 = (v39 & 1) == 0;
      v40 = v389;
      if (v22)
        v40 = v389 & 0xFFFFFFFFFFFFFFF8;
      v389 = v40;
    }
    v41 = v389;
    if ((v389 & 7) != 0)
    {
      v42 = (unsigned int *)(v389 & 0xFFFFFFFFFFFFFFF8);
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 2, v42));
      if ((v43 & 1) != 0)
        v41 = v389;
      else
        v41 = v389 & 0xFFFFFFFFFFFFFFF8;
    }
    sub_20BDDC0E4(v399, "color2");
    v399[3] = v36;
    v399[4] = v41;
    v400 = 2;
    v401 = 0;
    v44 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v44)
      v44 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    v45 = *((_QWORD *)v44 + 92);
    v46 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v46)
      v46 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    v388 = *((_QWORD *)v46 + 4);
    if ((v388 & 7) != 0)
    {
      v47 = (unsigned int *)(v388 & 0xFFFFFFFFFFFFFFF8);
      do
        v48 = __ldxr(v47);
      while (__stxr(v48 + 2, v47));
      v22 = (v48 & 1) == 0;
      v49 = v388;
      if (v22)
        v49 = v388 & 0xFFFFFFFFFFFFFFF8;
      v388 = v49;
    }
    v50 = v388;
    if ((v388 & 7) != 0)
    {
      v51 = (unsigned int *)(v388 & 0xFFFFFFFFFFFFFFF8);
      do
        v52 = __ldxr(v51);
      while (__stxr(v52 + 2, v51));
      if ((v52 & 1) != 0)
        v50 = v388;
      else
        v50 = v388 & 0xFFFFFFFFFFFFFFF8;
    }
    sub_20BDDC0E4(v402, "color3array");
    v402[3] = v45;
    v402[4] = v50;
    v403 = 0;
    v404 = 1;
    v53 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v53)
      v53 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    v54 = *((_QWORD *)v53 + 35);
    v55 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v55)
      v55 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    v387 = *((_QWORD *)v55 + 4);
    if ((v387 & 7) != 0)
    {
      v56 = (unsigned int *)(v387 & 0xFFFFFFFFFFFFFFF8);
      do
        v57 = __ldxr(v56);
      while (__stxr(v57 + 2, v56));
      v22 = (v57 & 1) == 0;
      v58 = v387;
      if (v22)
        v58 = v387 & 0xFFFFFFFFFFFFFFF8;
      v387 = v58;
    }
    v59 = v387;
    if ((v387 & 7) != 0)
    {
      v60 = (unsigned int *)(v387 & 0xFFFFFFFFFFFFFFF8);
      do
        v61 = __ldxr(v60);
      while (__stxr(v61 + 2, v60));
      if ((v61 & 1) != 0)
        v59 = v387;
      else
        v59 = v387 & 0xFFFFFFFFFFFFFFF8;
    }
    sub_20BDDC0E4(v405, "color3");
    v405[3] = v54;
    v405[4] = v59;
    v406 = 0;
    v407 = 1;
    v62 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v62)
      v62 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    v63 = *((_QWORD *)v62 + 95);
    v64 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v64)
      v64 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    v386 = *((_QWORD *)v64 + 5);
    if ((v386 & 7) != 0)
    {
      v65 = (unsigned int *)(v386 & 0xFFFFFFFFFFFFFFF8);
      do
        v66 = __ldxr(v65);
      while (__stxr(v66 + 2, v65));
      v22 = (v66 & 1) == 0;
      v67 = v386;
      if (v22)
        v67 = v386 & 0xFFFFFFFFFFFFFFF8;
      v386 = v67;
    }
    v68 = v386;
    if ((v386 & 7) != 0)
    {
      v69 = (unsigned int *)(v386 & 0xFFFFFFFFFFFFFFF8);
      do
        v70 = __ldxr(v69);
      while (__stxr(v70 + 2, v69));
      if ((v70 & 1) != 0)
        v68 = v386;
      else
        v68 = v386 & 0xFFFFFFFFFFFFFFF8;
    }
    sub_20BDDC0E4(v408, "color4array");
    v408[3] = v63;
    v408[4] = v68;
    v409 = 0;
    v410 = 1;
    v71 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v71)
      v71 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    v72 = *((_QWORD *)v71 + 38);
    v73 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v73)
      v73 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    v385 = *((_QWORD *)v73 + 5);
    if ((v385 & 7) != 0)
    {
      v74 = (unsigned int *)(v385 & 0xFFFFFFFFFFFFFFF8);
      do
        v75 = __ldxr(v74);
      while (__stxr(v75 + 2, v74));
      v22 = (v75 & 1) == 0;
      v76 = v385;
      if (v22)
        v76 = v385 & 0xFFFFFFFFFFFFFFF8;
      v385 = v76;
    }
    v77 = v385;
    if ((v385 & 7) != 0)
    {
      v78 = (unsigned int *)(v385 & 0xFFFFFFFFFFFFFFF8);
      do
        v79 = __ldxr(v78);
      while (__stxr(v79 + 2, v78));
      if ((v79 & 1) != 0)
        v77 = v385;
      else
        v77 = v385 & 0xFFFFFFFFFFFFFFF8;
    }
    sub_20BDDC0E4(v411, "color4");
    v411[3] = v72;
    v411[4] = v77;
    v412 = 0;
    v413 = 1;
    v80 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v80)
      v80 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    v81 = *((_QWORD *)v80 + 12);
    v82 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v82)
      v82 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    v384 = *((_QWORD *)v82 + 1);
    if ((v384 & 7) != 0)
    {
      v83 = (unsigned int *)(v384 & 0xFFFFFFFFFFFFFFF8);
      do
        v84 = __ldxr(v83);
      while (__stxr(v84 + 2, v83));
      v22 = (v84 & 1) == 0;
      v85 = v384;
      if (v22)
        v85 = v384 & 0xFFFFFFFFFFFFFFF8;
      v384 = v85;
    }
    v86 = v384;
    if ((v384 & 7) != 0)
    {
      v87 = (unsigned int *)(v384 & 0xFFFFFFFFFFFFFFF8);
      do
        v88 = __ldxr(v87);
      while (__stxr(v88 + 2, v87));
      if ((v88 & 1) != 0)
        v86 = v384;
      else
        v86 = v384 & 0xFFFFFFFFFFFFFFF8;
    }
    sub_20BDDC0E4(v414, "filename");
    v414[3] = v81;
    v414[4] = v86;
    v415 = 0;
    v416 = 1;
    v89 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v89)
      v89 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    v90 = *((_QWORD *)v89 + 64);
    v91 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v91)
      v91 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    v383 = *((_QWORD *)v91 + 2);
    if ((v383 & 7) != 0)
    {
      v92 = (unsigned int *)(v383 & 0xFFFFFFFFFFFFFFF8);
      do
        v93 = __ldxr(v92);
      while (__stxr(v93 + 2, v92));
      v22 = (v93 & 1) == 0;
      v94 = v383;
      if (v22)
        v94 = v383 & 0xFFFFFFFFFFFFFFF8;
      v383 = v94;
    }
    v95 = v383;
    if ((v383 & 7) != 0)
    {
      v96 = (unsigned int *)(v383 & 0xFFFFFFFFFFFFFFF8);
      do
        v97 = __ldxr(v96);
      while (__stxr(v97 + 2, v96));
      if ((v97 & 1) != 0)
        v95 = v383;
      else
        v95 = v383 & 0xFFFFFFFFFFFFFFF8;
    }
    sub_20BDDC0E4(v417, "floatarray");
    v417[3] = v90;
    v417[4] = v95;
    v418 = 0;
    v419 = 1;
    v98 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v98)
      v98 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    v99 = *((_QWORD *)v98 + 7);
    v100 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v100)
      v100 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    v382 = *((_QWORD *)v100 + 2);
    if ((v382 & 7) != 0)
    {
      v101 = (unsigned int *)(v382 & 0xFFFFFFFFFFFFFFF8);
      do
        v102 = __ldxr(v101);
      while (__stxr(v102 + 2, v101));
      v22 = (v102 & 1) == 0;
      v103 = v382;
      if (v22)
        v103 = v382 & 0xFFFFFFFFFFFFFFF8;
      v382 = v103;
    }
    v104 = v382;
    if ((v382 & 7) != 0)
    {
      v105 = (unsigned int *)(v382 & 0xFFFFFFFFFFFFFFF8);
      do
        v106 = __ldxr(v105);
      while (__stxr(v106 + 2, v105));
      if ((v106 & 1) != 0)
        v104 = v382;
      else
        v104 = v382 & 0xFFFFFFFFFFFFFFF8;
    }
    sub_20BDDC0E4(v420, "float");
    v420[3] = v99;
    v420[4] = v104;
    v421 = 0;
    v422 = 1;
    v107 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v107)
      v107 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    v108 = *((_QWORD *)v107 + 6);
    v109 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v109)
      v109 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    v381 = *((_QWORD *)v109 + 3);
    if ((v381 & 7) != 0)
    {
      v110 = (unsigned int *)(v381 & 0xFFFFFFFFFFFFFFF8);
      do
        v111 = __ldxr(v110);
      while (__stxr(v111 + 2, v110));
      v22 = (v111 & 1) == 0;
      v112 = v381;
      if (v22)
        v112 = v381 & 0xFFFFFFFFFFFFFFF8;
      v381 = v112;
    }
    v113 = v381;
    if ((v381 & 7) != 0)
    {
      v114 = (unsigned int *)(v381 & 0xFFFFFFFFFFFFFFF8);
      do
        v115 = __ldxr(v114);
      while (__stxr(v115 + 2, v114));
      if ((v115 & 1) != 0)
        v113 = v381;
      else
        v113 = v381 & 0xFFFFFFFFFFFFFFF8;
    }
    sub_20BDDC0E4(v423, "half");
    v423[3] = v108;
    v423[4] = v113;
    v424 = 0;
    v425 = 1;
    v116 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v116)
      v116 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    v117 = *((_QWORD *)v116 + 67);
    v380 = qword_25498CE28;
    if ((qword_25498CE28 & 7) != 0)
    {
      v118 = (unsigned int *)(qword_25498CE28 & 0xFFFFFFFFFFFFFFF8);
      do
        v119 = __ldxr(v118);
      while (__stxr(v119 + 2, v118));
      v22 = (v119 & 1) == 0;
      v120 = v380;
      if (v22)
        v120 = (uint64_t)v118;
      v380 = v120;
    }
    v121 = v380;
    if ((v380 & 7) != 0)
    {
      v122 = (unsigned int *)(v380 & 0xFFFFFFFFFFFFFFF8);
      do
        v123 = __ldxr(v122);
      while (__stxr(v123 + 2, v122));
      if ((v123 & 1) != 0)
        v121 = v380;
      else
        v121 = v380 & 0xFFFFFFFFFFFFFFF8;
    }
    sub_20BDDC0E4(v426, "geomnamearray");
    v426[3] = v117;
    v426[4] = v121;
    v427 = 0;
    v428 = 0;
    v124 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v124)
      v124 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    v125 = *((_QWORD *)v124 + 10);
    v379 = qword_25498CE28;
    if ((qword_25498CE28 & 7) != 0)
    {
      v126 = (unsigned int *)(qword_25498CE28 & 0xFFFFFFFFFFFFFFF8);
      do
        v127 = __ldxr(v126);
      while (__stxr(v127 + 2, v126));
      v22 = (v127 & 1) == 0;
      v128 = v379;
      if (v22)
        v128 = (uint64_t)v126;
      v379 = v128;
    }
    v129 = v379;
    if ((v379 & 7) != 0)
    {
      v130 = (unsigned int *)(v379 & 0xFFFFFFFFFFFFFFF8);
      do
        v131 = __ldxr(v130);
      while (__stxr(v131 + 2, v130));
      if ((v131 & 1) != 0)
        v129 = v379;
      else
        v129 = v379 & 0xFFFFFFFFFFFFFFF8;
    }
    sub_20BDDC0E4(v429, "geomname");
    v429[3] = v125;
    v429[4] = v129;
    v430 = 0;
    v431 = 0;
    v132 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v132)
      v132 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    v133 = *((_QWORD *)v132 + 58);
    v134 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v134)
      v134 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    v378 = *(_QWORD *)v134;
    if ((*(_QWORD *)v134 & 7) != 0)
    {
      v135 = (unsigned int *)(v378 & 0xFFFFFFFFFFFFFFF8);
      do
        v136 = __ldxr(v135);
      while (__stxr(v136 + 2, v135));
      v22 = (v136 & 1) == 0;
      v137 = v378;
      if (v22)
        v137 = v378 & 0xFFFFFFFFFFFFFFF8;
      v378 = v137;
    }
    v138 = v378;
    if ((v378 & 7) != 0)
    {
      v139 = (unsigned int *)(v378 & 0xFFFFFFFFFFFFFFF8);
      do
        v140 = __ldxr(v139);
      while (__stxr(v140 + 2, v139));
      if ((v140 & 1) != 0)
        v138 = v378;
      else
        v138 = v378 & 0xFFFFFFFFFFFFFFF8;
    }
    sub_20BDDC0E4(v432, "integerarray");
    v432[3] = v133;
    v432[4] = v138;
    v433 = 0;
    v434 = 1;
    v141 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v141)
      v141 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    v142 = *((_QWORD *)v141 + 2);
    v143 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v143)
      v143 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    v377 = *(_QWORD *)v143;
    if ((*(_QWORD *)v143 & 7) != 0)
    {
      v144 = (unsigned int *)(v377 & 0xFFFFFFFFFFFFFFF8);
      do
        v145 = __ldxr(v144);
      while (__stxr(v145 + 2, v144));
      v22 = (v145 & 1) == 0;
      v146 = v377;
      if (v22)
        v146 = v377 & 0xFFFFFFFFFFFFFFF8;
      v377 = v146;
    }
    v147 = v377;
    if ((v377 & 7) != 0)
    {
      v148 = (unsigned int *)(v377 & 0xFFFFFFFFFFFFFFF8);
      do
        v149 = __ldxr(v148);
      while (__stxr(v149 + 2, v148));
      if ((v149 & 1) != 0)
        v147 = v377;
      else
        v147 = v377 & 0xFFFFFFFFFFFFFFF8;
    }
    sub_20BDDC0E4(v435, "integer");
    v435[3] = v142;
    v435[4] = v147;
    v436 = 0;
    v437 = 1;
    v150 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v150)
      v150 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    v151 = *((_QWORD *)v150 + 44);
    v376 = qword_25498CE28;
    if ((qword_25498CE28 & 7) != 0)
    {
      v152 = (unsigned int *)(qword_25498CE28 & 0xFFFFFFFFFFFFFFF8);
      do
        v153 = __ldxr(v152);
      while (__stxr(v153 + 2, v152));
      v22 = (v153 & 1) == 0;
      v154 = v376;
      if (v22)
        v154 = (uint64_t)v152;
      v376 = v154;
    }
    v155 = v376;
    if ((v376 & 7) != 0)
    {
      v156 = (unsigned int *)(v376 & 0xFFFFFFFFFFFFFFF8);
      do
        v157 = __ldxr(v156);
      while (__stxr(v157 + 2, v156));
      if ((v157 & 1) != 0)
        v155 = v376;
      else
        v155 = v376 & 0xFFFFFFFFFFFFFFF8;
    }
    sub_20BDDC0E4(v438, "matrix33");
    v438[3] = v151;
    v438[4] = v155;
    v439 = 0;
    v440 = 1;
    v158 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v158)
      v158 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    v159 = *((_QWORD *)v158 + 45);
    v160 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v160)
      v160 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    v375 = *((_QWORD *)v160 + 9);
    if ((v375 & 7) != 0)
    {
      v161 = (unsigned int *)(v375 & 0xFFFFFFFFFFFFFFF8);
      do
        v162 = __ldxr(v161);
      while (__stxr(v162 + 2, v161));
      v22 = (v162 & 1) == 0;
      v163 = v375;
      if (v22)
        v163 = v375 & 0xFFFFFFFFFFFFFFF8;
      v375 = v163;
    }
    v164 = v375;
    if ((v375 & 7) != 0)
    {
      v165 = (unsigned int *)(v375 & 0xFFFFFFFFFFFFFFF8);
      do
        v166 = __ldxr(v165);
      while (__stxr(v166 + 2, v165));
      if ((v166 & 1) != 0)
        v164 = v375;
      else
        v164 = v375 & 0xFFFFFFFFFFFFFFF8;
    }
    sub_20BDDC0E4(v441, "matrix44");
    v441[3] = v159;
    v441[4] = v164;
    v442 = 0;
    v443 = 1;
    v167 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v167)
      v167 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    v168 = *((_QWORD *)v167 + 67);
    v169 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v169)
      v169 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    v374 = *((_QWORD *)v169 + 1);
    if ((v374 & 7) != 0)
    {
      v170 = (unsigned int *)(v374 & 0xFFFFFFFFFFFFFFF8);
      do
        v171 = __ldxr(v170);
      while (__stxr(v171 + 2, v170));
      v22 = (v171 & 1) == 0;
      v172 = v374;
      if (v22)
        v172 = v374 & 0xFFFFFFFFFFFFFFF8;
      v374 = v172;
    }
    v173 = v374;
    if ((v374 & 7) != 0)
    {
      v174 = (unsigned int *)(v374 & 0xFFFFFFFFFFFFFFF8);
      do
        v175 = __ldxr(v174);
      while (__stxr(v175 + 2, v174));
      if ((v175 & 1) != 0)
        v173 = v374;
      else
        v173 = v374 & 0xFFFFFFFFFFFFFFF8;
    }
    sub_20BDDC0E4(v444, "stringarray");
    v444[3] = v168;
    v444[4] = v173;
    v445 = 0;
    v446 = 1;
    v176 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v176)
      v176 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    v177 = *((_QWORD *)v176 + 10);
    v178 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v178)
      v178 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    v373 = *((_QWORD *)v178 + 1);
    if ((v373 & 7) != 0)
    {
      v179 = (unsigned int *)(v373 & 0xFFFFFFFFFFFFFFF8);
      do
        v180 = __ldxr(v179);
      while (__stxr(v180 + 2, v179));
      v22 = (v180 & 1) == 0;
      v181 = v373;
      if (v22)
        v181 = v373 & 0xFFFFFFFFFFFFFFF8;
      v373 = v181;
    }
    v182 = v373;
    if ((v373 & 7) != 0)
    {
      v183 = (unsigned int *)(v373 & 0xFFFFFFFFFFFFFFF8);
      do
        v184 = __ldxr(v183);
      while (__stxr(v184 + 2, v183));
      if ((v184 & 1) != 0)
        v182 = v373;
      else
        v182 = v373 & 0xFFFFFFFFFFFFFFF8;
    }
    sub_20BDDC0E4(v447, "string");
    v447[3] = v177;
    v447[4] = v182;
    v448 = 0;
    v449 = 1;
    v185 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v185)
      v185 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    v186 = *((_QWORD *)v185 + 11);
    v187 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v187)
      v187 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    v372 = *((_QWORD *)v187 + 11);
    if ((v372 & 7) != 0)
    {
      v188 = (unsigned int *)(v372 & 0xFFFFFFFFFFFFFFF8);
      do
        v189 = __ldxr(v188);
      while (__stxr(v189 + 2, v188));
      v22 = (v189 & 1) == 0;
      v190 = v372;
      if (v22)
        v190 = v372 & 0xFFFFFFFFFFFFFFF8;
      v372 = v190;
    }
    v191 = v372;
    if ((v372 & 7) != 0)
    {
      v192 = (unsigned int *)(v372 & 0xFFFFFFFFFFFFFFF8);
      do
        v193 = __ldxr(v192);
      while (__stxr(v193 + 2, v192));
      if ((v193 & 1) != 0)
        v191 = v372;
      else
        v191 = v372 & 0xFFFFFFFFFFFFFFF8;
    }
    sub_20BDDC0E4(v450, "surfaceshader");
    v450[3] = v186;
    v450[4] = v191;
    v451 = 0;
    v452 = 1;
    v194 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v194)
      v194 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    v195 = *((_QWORD *)v194 + 76);
    v371 = qword_25498CE28;
    if ((qword_25498CE28 & 7) != 0)
    {
      v196 = (unsigned int *)(qword_25498CE28 & 0xFFFFFFFFFFFFFFF8);
      do
        v197 = __ldxr(v196);
      while (__stxr(v197 + 2, v196));
      v22 = (v197 & 1) == 0;
      v198 = v371;
      if (v22)
        v198 = (uint64_t)v196;
      v371 = v198;
    }
    v199 = v371;
    if ((v371 & 7) != 0)
    {
      v200 = (unsigned int *)(v371 & 0xFFFFFFFFFFFFFFF8);
      do
        v201 = __ldxr(v200);
      while (__stxr(v201 + 2, v200));
      if ((v201 & 1) != 0)
        v199 = v371;
      else
        v199 = v371 & 0xFFFFFFFFFFFFFFF8;
    }
    sub_20BDDC0E4(v453, "vector2array");
    v453[3] = v195;
    v453[4] = v199;
    v454 = 0;
    v455 = 1;
    v202 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v202)
      v202 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    v203 = *((_QWORD *)v202 + 19);
    v204 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v204)
      v204 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    v370 = *((_QWORD *)v204 + 2);
    if ((v370 & 7) != 0)
    {
      v205 = (unsigned int *)(v370 & 0xFFFFFFFFFFFFFFF8);
      do
        v206 = __ldxr(v205);
      while (__stxr(v206 + 2, v205));
      v22 = (v206 & 1) == 0;
      v207 = v370;
      if (v22)
        v207 = v370 & 0xFFFFFFFFFFFFFFF8;
      v370 = v207;
    }
    v208 = v370;
    if ((v370 & 7) != 0)
    {
      v209 = (unsigned int *)(v370 & 0xFFFFFFFFFFFFFFF8);
      do
        v210 = __ldxr(v209);
      while (__stxr(v210 + 2, v209));
      if ((v210 & 1) != 0)
        v208 = v370;
      else
        v208 = v370 & 0xFFFFFFFFFFFFFFF8;
    }
    sub_20BDDC0E4(v456, "vector2");
    v456[3] = v203;
    v456[4] = v208;
    v457 = 2;
    v458 = 1;
    v211 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v211)
      v211 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    v212 = *((_QWORD *)v211 + 16);
    v213 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v213)
      v213 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    v369 = *((_QWORD *)v213 + 2);
    if ((v369 & 7) != 0)
    {
      v214 = (unsigned int *)(v369 & 0xFFFFFFFFFFFFFFF8);
      do
        v215 = __ldxr(v214);
      while (__stxr(v215 + 2, v214));
      v22 = (v215 & 1) == 0;
      v216 = v369;
      if (v22)
        v216 = v369 & 0xFFFFFFFFFFFFFFF8;
      v369 = v216;
    }
    v217 = v369;
    if ((v369 & 7) != 0)
    {
      v218 = (unsigned int *)(v369 & 0xFFFFFFFFFFFFFFF8);
      do
        v219 = __ldxr(v218);
      while (__stxr(v219 + 2, v218));
      if ((v219 & 1) != 0)
        v217 = v369;
      else
        v217 = v369 & 0xFFFFFFFFFFFFFFF8;
    }
    sub_20BDDC0E4(v459, "half2");
    v459[3] = v212;
    v459[4] = v217;
    v460 = 2;
    v461 = 1;
    v220 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v220)
      v220 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    v221 = *((_QWORD *)v220 + 13);
    v222 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v222)
      v222 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    v368 = *(_QWORD *)v222;
    if ((*(_QWORD *)v222 & 7) != 0)
    {
      v223 = (unsigned int *)(v368 & 0xFFFFFFFFFFFFFFF8);
      do
        v224 = __ldxr(v223);
      while (__stxr(v224 + 2, v223));
      v22 = (v224 & 1) == 0;
      v225 = v368;
      if (v22)
        v225 = v368 & 0xFFFFFFFFFFFFFFF8;
      v368 = v225;
    }
    v226 = v368;
    if ((v368 & 7) != 0)
    {
      v227 = (unsigned int *)(v368 & 0xFFFFFFFFFFFFFFF8);
      do
        v228 = __ldxr(v227);
      while (__stxr(v228 + 2, v227));
      if ((v228 & 1) != 0)
        v226 = v368;
      else
        v226 = v368 & 0xFFFFFFFFFFFFFFF8;
    }
    sub_20BDDC0E4(v462, "integer2");
    v462[3] = v221;
    v462[4] = v226;
    v463 = 2;
    v464 = 1;
    v229 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v229)
      v229 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    v230 = *((_QWORD *)v229 + 77);
    v367 = qword_25498CE28;
    if ((qword_25498CE28 & 7) != 0)
    {
      v231 = (unsigned int *)(qword_25498CE28 & 0xFFFFFFFFFFFFFFF8);
      do
        v232 = __ldxr(v231);
      while (__stxr(v232 + 2, v231));
      v22 = (v232 & 1) == 0;
      v233 = v367;
      if (v22)
        v233 = (uint64_t)v231;
      v367 = v233;
    }
    v234 = v367;
    if ((v367 & 7) != 0)
    {
      v235 = (unsigned int *)(v367 & 0xFFFFFFFFFFFFFFF8);
      do
        v236 = __ldxr(v235);
      while (__stxr(v236 + 2, v235));
      if ((v236 & 1) != 0)
        v234 = v367;
      else
        v234 = v367 & 0xFFFFFFFFFFFFFFF8;
    }
    sub_20BDDC0E4(v465, "vector3array");
    v465[3] = v230;
    v465[4] = v234;
    v466 = 0;
    v467 = 1;
    v237 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v237)
      v237 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    v238 = *((_QWORD *)v237 + 20);
    v239 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v239)
      v239 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    v366 = *((_QWORD *)v239 + 2);
    if ((v366 & 7) != 0)
    {
      v240 = (unsigned int *)(v366 & 0xFFFFFFFFFFFFFFF8);
      do
        v241 = __ldxr(v240);
      while (__stxr(v241 + 2, v240));
      v22 = (v241 & 1) == 0;
      v242 = v366;
      if (v22)
        v242 = v366 & 0xFFFFFFFFFFFFFFF8;
      v366 = v242;
    }
    v243 = v366;
    if ((v366 & 7) != 0)
    {
      v244 = (unsigned int *)(v366 & 0xFFFFFFFFFFFFFFF8);
      do
        v245 = __ldxr(v244);
      while (__stxr(v245 + 2, v244));
      if ((v245 & 1) != 0)
        v243 = v366;
      else
        v243 = v366 & 0xFFFFFFFFFFFFFFF8;
    }
    sub_20BDDC0E4(v468, "vector3");
    v468[3] = v238;
    v468[4] = v243;
    v469 = 3;
    v470 = 1;
    v246 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v246)
      v246 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    v247 = *((_QWORD *)v246 + 17);
    v248 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v248)
      v248 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    v249 = *((_QWORD *)v248 + 2);
    if ((v249 & 7) != 0)
    {
      v250 = (unsigned int *)(v249 & 0xFFFFFFFFFFFFFFF8);
      do
        v251 = __ldxr(v250);
      while (__stxr(v251 + 2, v250));
      if ((v251 & 1) == 0)
        v249 &= 0xFFFFFFFFFFFFFFF8;
    }
    v252 = v249;
    if ((v249 & 7) != 0)
    {
      v253 = (unsigned int *)(v249 & 0xFFFFFFFFFFFFFFF8);
      do
        v254 = __ldxr(v253);
      while (__stxr(v254 + 2, v253));
      if ((v254 & 1) != 0)
        v252 = v249;
      else
        v252 = v249 & 0xFFFFFFFFFFFFFFF8;
    }
    sub_20BDDC0E4(v471, "half3");
    v471[3] = v247;
    v471[4] = v252;
    v472 = 3;
    v473 = 1;
    v255 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v255)
      v255 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    v256 = *((_QWORD *)v255 + 14);
    v257 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v257)
      v257 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    v258 = *(_QWORD *)v257;
    if ((*(_QWORD *)v257 & 7) != 0)
    {
      v259 = (unsigned int *)(v258 & 0xFFFFFFFFFFFFFFF8);
      do
        v260 = __ldxr(v259);
      while (__stxr(v260 + 2, v259));
      if ((v260 & 1) == 0)
        v258 &= 0xFFFFFFFFFFFFFFF8;
    }
    v261 = v258;
    if ((v258 & 7) != 0)
    {
      v262 = (unsigned int *)(v258 & 0xFFFFFFFFFFFFFFF8);
      do
        v263 = __ldxr(v262);
      while (__stxr(v263 + 2, v262));
      if ((v263 & 1) != 0)
        v261 = v258;
      else
        v261 = v258 & 0xFFFFFFFFFFFFFFF8;
    }
    sub_20BDDC0E4(v474, "integer3");
    v474[3] = v256;
    v474[4] = v261;
    v475 = 3;
    v476 = 1;
    v264 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v264)
      v264 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    v265 = *((_QWORD *)v264 + 78);
    v266 = qword_25498CE28;
    if ((qword_25498CE28 & 7) != 0)
    {
      v267 = (unsigned int *)(qword_25498CE28 & 0xFFFFFFFFFFFFFFF8);
      do
        v268 = __ldxr(v267);
      while (__stxr(v268 + 2, v267));
      if ((v268 & 1) == 0)
        v266 &= 0xFFFFFFFFFFFFFFF8;
    }
    v269 = v266;
    if ((v266 & 7) != 0)
    {
      v270 = (unsigned int *)(v266 & 0xFFFFFFFFFFFFFFF8);
      do
        v271 = __ldxr(v270);
      while (__stxr(v271 + 2, v270));
      if ((v271 & 1) != 0)
        v269 = v266;
      else
        v269 = v266 & 0xFFFFFFFFFFFFFFF8;
    }
    sub_20BDDC0E4(v477, "vector4array");
    v477[3] = v265;
    v477[4] = v269;
    v478 = 0;
    v479 = 1;
    v272 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v272)
      v272 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    v273 = *((_QWORD *)v272 + 21);
    v274 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v274)
      v274 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    v275 = *((_QWORD *)v274 + 2);
    if ((v275 & 7) != 0)
    {
      v276 = (unsigned int *)(v275 & 0xFFFFFFFFFFFFFFF8);
      do
        v277 = __ldxr(v276);
      while (__stxr(v277 + 2, v276));
      if ((v277 & 1) == 0)
        v275 &= 0xFFFFFFFFFFFFFFF8;
    }
    v278 = v275;
    if ((v275 & 7) != 0)
    {
      v279 = (unsigned int *)(v275 & 0xFFFFFFFFFFFFFFF8);
      do
        v280 = __ldxr(v279);
      while (__stxr(v280 + 2, v279));
      if ((v280 & 1) != 0)
        v278 = v275;
      else
        v278 = v275 & 0xFFFFFFFFFFFFFFF8;
    }
    sub_20BDDC0E4(v480, "vector4");
    v480[3] = v273;
    v480[4] = v278;
    v481 = 4;
    v482 = 1;
    v281 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v281)
      v281 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    v282 = *((_QWORD *)v281 + 18);
    v283 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v283)
      v283 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    v284 = *((_QWORD *)v283 + 2);
    if ((v284 & 7) != 0)
    {
      v285 = (unsigned int *)(v284 & 0xFFFFFFFFFFFFFFF8);
      do
        v286 = __ldxr(v285);
      while (__stxr(v286 + 2, v285));
      if ((v286 & 1) == 0)
        v284 &= 0xFFFFFFFFFFFFFFF8;
    }
    v287 = v284;
    if ((v284 & 7) != 0)
    {
      v288 = (unsigned int *)(v284 & 0xFFFFFFFFFFFFFFF8);
      do
        v289 = __ldxr(v288);
      while (__stxr(v289 + 2, v288));
      if ((v289 & 1) != 0)
        v287 = v284;
      else
        v287 = v284 & 0xFFFFFFFFFFFFFFF8;
    }
    sub_20BDDC0E4(v483, "half4");
    v483[3] = v282;
    v483[4] = v287;
    v484 = 4;
    v485 = 1;
    v290 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v290)
      v290 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    v291 = *((_QWORD *)v290 + 15);
    v292 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v292)
      v292 = sub_20C1F6344(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    v293 = *(_QWORD *)v292;
    if ((*(_QWORD *)v292 & 7) != 0)
    {
      v294 = (unsigned int *)(v293 & 0xFFFFFFFFFFFFFFF8);
      do
        v295 = __ldxr(v294);
      while (__stxr(v295 + 2, v294));
      if ((v295 & 1) == 0)
        v293 &= 0xFFFFFFFFFFFFFFF8;
    }
    v296 = v293;
    if ((v293 & 7) != 0)
    {
      v297 = (unsigned int *)(v293 & 0xFFFFFFFFFFFFFFF8);
      do
        v298 = __ldxr(v297);
      while (__stxr(v298 + 2, v297));
      if ((v298 & 1) != 0)
        v296 = v293;
      else
        v296 = v293 & 0xFFFFFFFFFFFFFFF8;
    }
    sub_20BDDC0E4(v486, "integer4");
    v486[3] = v291;
    v486[4] = v296;
    v487 = 4;
    v488 = 1;
    sub_20C7B8B54((uint64_t)qword_25498CE58, (unsigned __int8 *)v393, 32);
    for (i = 186; i != -6; i -= 6)
      sub_20C7B6C58((uint64_t)&v393[i]);
    if ((v293 & 7) != 0)
    {
      v300 = (unsigned int *)(v293 & 0xFFFFFFFFFFFFFFF8);
      do
        v301 = __ldxr(v300);
      while (__stlxr(v301 - 2, v300));
    }
    if ((v284 & 7) != 0)
    {
      v302 = (unsigned int *)(v284 & 0xFFFFFFFFFFFFFFF8);
      do
        v303 = __ldxr(v302);
      while (__stlxr(v303 - 2, v302));
    }
    if ((v275 & 7) != 0)
    {
      v304 = (unsigned int *)(v275 & 0xFFFFFFFFFFFFFFF8);
      do
        v305 = __ldxr(v304);
      while (__stlxr(v305 - 2, v304));
    }
    if ((v266 & 7) != 0)
    {
      v306 = (unsigned int *)(v266 & 0xFFFFFFFFFFFFFFF8);
      do
        v307 = __ldxr(v306);
      while (__stlxr(v307 - 2, v306));
    }
    if ((v258 & 7) != 0)
    {
      v308 = (unsigned int *)(v258 & 0xFFFFFFFFFFFFFFF8);
      do
        v309 = __ldxr(v308);
      while (__stlxr(v309 - 2, v308));
    }
    if ((v249 & 7) != 0)
    {
      v310 = (unsigned int *)(v249 & 0xFFFFFFFFFFFFFFF8);
      do
        v311 = __ldxr(v310);
      while (__stlxr(v311 - 2, v310));
    }
    if ((v366 & 7) != 0)
    {
      v312 = (unsigned int *)(v366 & 0xFFFFFFFFFFFFFFF8);
      do
        v313 = __ldxr(v312);
      while (__stlxr(v313 - 2, v312));
    }
    if ((v367 & 7) != 0)
    {
      v314 = (unsigned int *)(v367 & 0xFFFFFFFFFFFFFFF8);
      do
        v315 = __ldxr(v314);
      while (__stlxr(v315 - 2, v314));
    }
    if ((v368 & 7) != 0)
    {
      v316 = (unsigned int *)(v368 & 0xFFFFFFFFFFFFFFF8);
      do
        v317 = __ldxr(v316);
      while (__stlxr(v317 - 2, v316));
    }
    if ((v369 & 7) != 0)
    {
      v318 = (unsigned int *)(v369 & 0xFFFFFFFFFFFFFFF8);
      do
        v319 = __ldxr(v318);
      while (__stlxr(v319 - 2, v318));
    }
    if ((v370 & 7) != 0)
    {
      v320 = (unsigned int *)(v370 & 0xFFFFFFFFFFFFFFF8);
      do
        v321 = __ldxr(v320);
      while (__stlxr(v321 - 2, v320));
    }
    if ((v371 & 7) != 0)
    {
      v322 = (unsigned int *)(v371 & 0xFFFFFFFFFFFFFFF8);
      do
        v323 = __ldxr(v322);
      while (__stlxr(v323 - 2, v322));
    }
    if ((v372 & 7) != 0)
    {
      v324 = (unsigned int *)(v372 & 0xFFFFFFFFFFFFFFF8);
      do
        v325 = __ldxr(v324);
      while (__stlxr(v325 - 2, v324));
    }
    if ((v373 & 7) != 0)
    {
      v326 = (unsigned int *)(v373 & 0xFFFFFFFFFFFFFFF8);
      do
        v327 = __ldxr(v326);
      while (__stlxr(v327 - 2, v326));
    }
    if ((v374 & 7) != 0)
    {
      v328 = (unsigned int *)(v374 & 0xFFFFFFFFFFFFFFF8);
      do
        v329 = __ldxr(v328);
      while (__stlxr(v329 - 2, v328));
    }
    if ((v375 & 7) != 0)
    {
      v330 = (unsigned int *)(v375 & 0xFFFFFFFFFFFFFFF8);
      do
        v331 = __ldxr(v330);
      while (__stlxr(v331 - 2, v330));
    }
    if ((v376 & 7) != 0)
    {
      v332 = (unsigned int *)(v376 & 0xFFFFFFFFFFFFFFF8);
      do
        v333 = __ldxr(v332);
      while (__stlxr(v333 - 2, v332));
    }
    if ((v377 & 7) != 0)
    {
      v334 = (unsigned int *)(v377 & 0xFFFFFFFFFFFFFFF8);
      do
        v335 = __ldxr(v334);
      while (__stlxr(v335 - 2, v334));
    }
    if ((v378 & 7) != 0)
    {
      v336 = (unsigned int *)(v378 & 0xFFFFFFFFFFFFFFF8);
      do
        v337 = __ldxr(v336);
      while (__stlxr(v337 - 2, v336));
    }
    if ((v379 & 7) != 0)
    {
      v338 = (unsigned int *)(v379 & 0xFFFFFFFFFFFFFFF8);
      do
        v339 = __ldxr(v338);
      while (__stlxr(v339 - 2, v338));
    }
    if ((v380 & 7) != 0)
    {
      v340 = (unsigned int *)(v380 & 0xFFFFFFFFFFFFFFF8);
      do
        v341 = __ldxr(v340);
      while (__stlxr(v341 - 2, v340));
    }
    if ((v381 & 7) != 0)
    {
      v342 = (unsigned int *)(v381 & 0xFFFFFFFFFFFFFFF8);
      do
        v343 = __ldxr(v342);
      while (__stlxr(v343 - 2, v342));
    }
    if ((v382 & 7) != 0)
    {
      v344 = (unsigned int *)(v382 & 0xFFFFFFFFFFFFFFF8);
      do
        v345 = __ldxr(v344);
      while (__stlxr(v345 - 2, v344));
    }
    if ((v383 & 7) != 0)
    {
      v346 = (unsigned int *)(v383 & 0xFFFFFFFFFFFFFFF8);
      do
        v347 = __ldxr(v346);
      while (__stlxr(v347 - 2, v346));
    }
    if ((v384 & 7) != 0)
    {
      v348 = (unsigned int *)(v384 & 0xFFFFFFFFFFFFFFF8);
      do
        v349 = __ldxr(v348);
      while (__stlxr(v349 - 2, v348));
    }
    if ((v385 & 7) != 0)
    {
      v350 = (unsigned int *)(v385 & 0xFFFFFFFFFFFFFFF8);
      do
        v351 = __ldxr(v350);
      while (__stlxr(v351 - 2, v350));
    }
    if ((v386 & 7) != 0)
    {
      v352 = (unsigned int *)(v386 & 0xFFFFFFFFFFFFFFF8);
      do
        v353 = __ldxr(v352);
      while (__stlxr(v353 - 2, v352));
    }
    if ((v387 & 7) != 0)
    {
      v354 = (unsigned int *)(v387 & 0xFFFFFFFFFFFFFFF8);
      do
        v355 = __ldxr(v354);
      while (__stlxr(v355 - 2, v354));
    }
    if ((v388 & 7) != 0)
    {
      v356 = (unsigned int *)(v388 & 0xFFFFFFFFFFFFFFF8);
      do
        v357 = __ldxr(v356);
      while (__stlxr(v357 - 2, v356));
    }
    if ((v389 & 7) != 0)
    {
      v358 = (unsigned int *)(v389 & 0xFFFFFFFFFFFFFFF8);
      do
        v359 = __ldxr(v358);
      while (__stlxr(v359 - 2, v358));
    }
    if ((v390 & 7) != 0)
    {
      v360 = (unsigned int *)(v390 & 0xFFFFFFFFFFFFFFF8);
      do
        v361 = __ldxr(v360);
      while (__stlxr(v361 - 2, v360));
    }
    if ((v391 & 7) != 0)
    {
      v362 = (unsigned int *)(v391 & 0xFFFFFFFFFFFFFFF8);
      do
        v363 = __ldxr(v362);
      while (__stlxr(v363 - 2, v362));
    }
    __cxa_atexit((void (*)(void *))sub_20C7B6CA8, qword_25498CE58, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498CE80);
    a2 = v364;
    a1 = v365;
  }
  result = sub_20C67F73C(qword_25498CE58, a1);
  v8 = (uint64_t *)(result + 40);
  if (!result)
    v8 = &qword_25498CE38;
  v9 = v8[1];
  *(_QWORD *)a2 = *v8;
  *(_QWORD *)(a2 + 8) = v9;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      *(_QWORD *)(a2 + 8) = v10;
  }
  *(_DWORD *)(a2 + 16) = *((_DWORD *)v8 + 4);
  *(_BYTE *)(a2 + 20) = *((_BYTE *)v8 + 20);
  return result;
}

void sub_20C7B60D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,_Unwind_Exception *exception_objecta,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a64;
  uint64_t a65;
  uint64_t a66;
  uint64_t a67;
  char a69;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int *v88;
  unsigned int v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int *v92;
  unsigned int v93;
  unsigned int *v94;
  unsigned int v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int *v98;
  unsigned int v99;
  unsigned int *v100;
  unsigned int v101;
  unsigned int *v102;
  unsigned int v103;
  unsigned int *v104;
  unsigned int v105;
  unsigned int *v106;
  unsigned int v107;
  unsigned int *v108;
  unsigned int v109;
  unsigned int *v110;
  unsigned int v111;
  unsigned int *v112;
  unsigned int v113;
  unsigned int *v114;
  unsigned int v115;
  unsigned int *v116;
  unsigned int v117;
  unsigned int *v118;
  unsigned int v119;
  unsigned int *v120;
  unsigned int v121;
  unsigned int *v122;
  unsigned int v123;
  unsigned int *v124;
  unsigned int v125;
  unsigned int *v126;
  unsigned int v127;

  if (a12)
  {
    v72 = (unsigned int *)(v71 & 0xFFFFFFFFFFFFFFF8);
    do
      v73 = __ldxr(v72);
    while (__stlxr(v73 - 2, v72));
  }
  if (a13)
  {
    v74 = (unsigned int *)(v70 & 0xFFFFFFFFFFFFFFF8);
    do
      v75 = __ldxr(v74);
    while (__stlxr(v75 - 2, v74));
  }
  if (a14)
  {
    v76 = (unsigned int *)(a42 & 0xFFFFFFFFFFFFFFF8);
    do
      v77 = __ldxr(v76);
    while (__stlxr(v77 - 2, v76));
  }
  if (a15)
  {
    v78 = (unsigned int *)(a43 & 0xFFFFFFFFFFFFFFF8);
    do
      v79 = __ldxr(v78);
    while (__stlxr(v79 - 2, v78));
  }
  if (a16)
  {
    v80 = (unsigned int *)(a44 & 0xFFFFFFFFFFFFFFF8);
    do
      v81 = __ldxr(v80);
    while (__stlxr(v81 - 2, v80));
  }
  if (a17)
  {
    v82 = (unsigned int *)(a45 & 0xFFFFFFFFFFFFFFF8);
    do
      v83 = __ldxr(v82);
    while (__stlxr(v83 - 2, v82));
  }
  if (a18)
  {
    v84 = (unsigned int *)(a46 & 0xFFFFFFFFFFFFFFF8);
    do
      v85 = __ldxr(v84);
    while (__stlxr(v85 - 2, v84));
  }
  if (a19)
  {
    v86 = (unsigned int *)(a47 & 0xFFFFFFFFFFFFFFF8);
    do
      v87 = __ldxr(v86);
    while (__stlxr(v87 - 2, v86));
  }
  if (a20)
  {
    v88 = (unsigned int *)(a48 & 0xFFFFFFFFFFFFFFF8);
    do
      v89 = __ldxr(v88);
    while (__stlxr(v89 - 2, v88));
  }
  if (a21)
  {
    v90 = (unsigned int *)(a49 & 0xFFFFFFFFFFFFFFF8);
    do
      v91 = __ldxr(v90);
    while (__stlxr(v91 - 2, v90));
  }
  if (a22)
  {
    v92 = (unsigned int *)(a50 & 0xFFFFFFFFFFFFFFF8);
    do
      v93 = __ldxr(v92);
    while (__stlxr(v93 - 2, v92));
  }
  if (a24)
  {
    v94 = (unsigned int *)(a51 & 0xFFFFFFFFFFFFFFF8);
    do
      v95 = __ldxr(v94);
    while (__stlxr(v95 - 2, v94));
  }
  if (a25)
  {
    v96 = (unsigned int *)(a52 & 0xFFFFFFFFFFFFFFF8);
    do
      v97 = __ldxr(v96);
    while (__stlxr(v97 - 2, v96));
  }
  if (a26)
  {
    v98 = (unsigned int *)(a53 & 0xFFFFFFFFFFFFFFF8);
    do
      v99 = __ldxr(v98);
    while (__stlxr(v99 - 2, v98));
  }
  if (a27)
  {
    v100 = (unsigned int *)(a54 & 0xFFFFFFFFFFFFFFF8);
    do
      v101 = __ldxr(v100);
    while (__stlxr(v101 - 2, v100));
  }
  if (a28)
  {
    v102 = (unsigned int *)(a55 & 0xFFFFFFFFFFFFFFF8);
    do
      v103 = __ldxr(v102);
    while (__stlxr(v103 - 2, v102));
  }
  if (a29)
  {
    v104 = (unsigned int *)(a56 & 0xFFFFFFFFFFFFFFF8);
    do
      v105 = __ldxr(v104);
    while (__stlxr(v105 - 2, v104));
  }
  if (a30)
  {
    v106 = (unsigned int *)(a57 & 0xFFFFFFFFFFFFFFF8);
    do
      v107 = __ldxr(v106);
    while (__stlxr(v107 - 2, v106));
  }
  if (a31)
  {
    v108 = (unsigned int *)(a58 & 0xFFFFFFFFFFFFFFF8);
    do
      v109 = __ldxr(v108);
    while (__stlxr(v109 - 2, v108));
  }
  if (a32)
  {
    v110 = (unsigned int *)(a59 & 0xFFFFFFFFFFFFFFF8);
    do
      v111 = __ldxr(v110);
    while (__stlxr(v111 - 2, v110));
  }
  if (a33)
  {
    v112 = (unsigned int *)(a60 & 0xFFFFFFFFFFFFFFF8);
    do
      v113 = __ldxr(v112);
    while (__stlxr(v113 - 2, v112));
  }
  if (a34)
  {
    v114 = (unsigned int *)(a61 & 0xFFFFFFFFFFFFFFF8);
    do
      v115 = __ldxr(v114);
    while (__stlxr(v115 - 2, v114));
  }
  if (a35)
  {
    v116 = (unsigned int *)(a62 & 0xFFFFFFFFFFFFFFF8);
    do
      v117 = __ldxr(v116);
    while (__stlxr(v117 - 2, v116));
  }
  if (a36)
  {
    v118 = (unsigned int *)(a63 & 0xFFFFFFFFFFFFFFF8);
    do
      v119 = __ldxr(v118);
    while (__stlxr(v119 - 2, v118));
  }
  if (a37)
  {
    v120 = (unsigned int *)(a64 & 0xFFFFFFFFFFFFFFF8);
    do
      v121 = __ldxr(v120);
    while (__stlxr(v121 - 2, v120));
  }
  if (a38)
  {
    v122 = (unsigned int *)(a65 & 0xFFFFFFFFFFFFFFF8);
    do
      v123 = __ldxr(v122);
    while (__stlxr(v123 - 2, v122));
  }
  if (a39)
  {
    v124 = (unsigned int *)(a66 & 0xFFFFFFFFFFFFFFF8);
    do
      v125 = __ldxr(v124);
    while (__stlxr(v125 - 2, v124));
  }
  if (a40)
  {
    v126 = (unsigned int *)(a67 & 0xFFFFFFFFFFFFFFF8);
    do
      v127 = __ldxr(v126);
    while (__stlxr(v127 - 2, v126));
  }
  while (v69 != &a69)
  {
    v69 -= 48;
    sub_20C7B6C58((uint64_t)v69);
  }
  __cxa_guard_abort(&qword_25498CE80);
  _Unwind_Resume(a1);
}

uint64_t sub_20C7B6C34(uint64_t result)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;

  v1 = *(_QWORD *)(result + 8);
  if ((v1 & 7) != 0)
  {
    v2 = (unsigned int *)(v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  return result;
}

uint64_t sub_20C7B6C58(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void pxrInternal__aapl__pxrReserved__::UsdMtlxGetUsdValue(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  __int128 *v11;
  unsigned __int8 *v12;
  __int128 *v13;

  v6 = atomic_load((unsigned __int8 *)&qword_25498CEA0);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25498CEA0))
  {
    sub_20BDDC0E4(qword_25498CE88, "default");
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25498CE88, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498CEA0);
  }
  v7 = atomic_load((unsigned __int8 *)&qword_25498CEC0);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_25498CEC0))
  {
    sub_20BDDC0E4(byte_25498CEA8, off_25473DD20[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_25498CEA8, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498CEC0);
  }
  v8 = atomic_load((unsigned __int8 *)&qword_25498CEE0);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_25498CEE0))
  {
    sub_20BDDC0E4(qword_25498CEC8, off_25473DD28[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25498CEC8, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498CEE0);
  }
  if (*(_QWORD *)a1)
  {
    if (a2)
      v9 = (unsigned __int8 *)qword_25498CE88;
    else
      v9 = (unsigned __int8 *)qword_25498CEC8;
    v10 = sub_20C67F73C((_QWORD *)(*(_QWORD *)a1 + 160), v9);
    if (v10)
      v11 = (__int128 *)(v10 + 40);
    else
      v11 = sub_20C957390();
    v12 = sub_20C67F73C((_QWORD *)(*(_QWORD *)a1 + 160), byte_25498CEA8);
    if (v12)
      v13 = (__int128 *)(v12 + 40);
    else
      v13 = sub_20C957390();
    sub_20C7B6EB8((uint64_t)v11, (unsigned __int8 *)v13, a3);
  }
  else
  {
    *(_QWORD *)(a3 + 8) = 0;
  }
}

void sub_20C7B6E80(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498CEE0);
  _Unwind_Resume(a1);
}

void sub_20C7B6EB8(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v6;
  unsigned __int8 v7;
  uint64_t v8;
  char v9;
  char v10;
  int v11;
  float v12;
  __int16 *v13;
  float v14;
  char *v15;
  char *v16;
  unint64_t v17;
  _QWORD *v18;
  int v19;
  int v20;
  int v21;
  _QWORD *v22;
  BOOL v23;
  char *v24;
  char *v25;
  _DWORD *v26;
  _DWORD *v27;
  char *v28;
  _DWORD *v29;
  _DWORD *v30;
  char *v31;
  __int128 *v32;
  __int128 *v33;
  __int128 v34;
  char *v35;
  _DWORD *v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int *v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  _DWORD *v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int *v49;
  unsigned int v50;
  char *v51;
  uint64_t i;
  float v53;
  char *v54;
  uint64_t j;
  float v56;
  char *v57;
  uint64_t n;
  float v59;
  char *v60;
  _DWORD *v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int *v64;
  unsigned int *v65;
  unsigned int v66;
  char *v67;
  uint64_t v68;
  __int128 *v69;
  uint64_t k;
  char *v71;
  __int128 v72;
  __int128 v73;
  unsigned int *v74;
  unsigned int v75;
  char *v76;
  uint64_t m;
  float32x4_t v78;
  float64x2_t *v79;
  char *v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  unsigned int *v85;
  unsigned int v86;
  uint64_t v87;
  char *v88;
  uint64_t *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  void *__p[2];
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;

  v104 = *MEMORY[0x24BDAC8D0];
  v6 = atomic_load((unsigned __int8 *)&qword_25498CF40);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25498CF40))
  {
    sub_20BDDC0E4(byte_25498CF28, "filename");
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_25498CF28, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498CF40);
  }
  v7 = atomic_load((unsigned __int8 *)&qword_25498CF60);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_25498CF60))
  {
    sub_20BDDC0E4(byte_25498CF48, "geomname");
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_25498CF48, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498CF60);
  }
  v8 = *(unsigned __int8 *)(a1 + 23);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a1 + 8);
  if (!v8)
    goto LABEL_127;
  sub_20C95DEC8((std::string *)a1, a2, &v95);
  if (!(_QWORD)v95)
    goto LABEL_121;
  if (sub_20C95830C((const void *)v95))
  {
    v9 = 0;
    v10 = *sub_20C958340((const void *)v95);
    *(_QWORD *)(a3 + 8) = &unk_24C51FCF3;
    *(_BYTE *)a3 = v10;
    goto LABEL_122;
  }
  if (sub_20C957DC4((const void *)v95))
  {
    v9 = 0;
    v11 = *(_DWORD *)sub_20C957DF8((const void *)v95);
    *(_QWORD *)(a3 + 8) = &unk_24C52008B;
LABEL_11:
    *(_DWORD *)a3 = v11;
    goto LABEL_122;
  }
  if (sub_20C958694((const void *)v95))
  {
    v9 = 0;
    v12 = *(float *)sub_20C9586C8((const void *)v95);
LABEL_14:
    *(_QWORD *)(a3 + 8) = &unk_24C520593;
    *(float *)a3 = v12;
    goto LABEL_122;
  }
  if (sub_20C958C04((const void *)v95))
  {
    v13 = (__int16 *)sub_20C958C38((const void *)v95);
    v14 = sub_20C7B88C8(v13);
    sub_20C7B892C(&v96, v14);
    v9 = 0;
    *(_QWORD *)(a3 + 8) = (char *)&off_24C5204D8 + 3;
    *(_WORD *)a3 = v96;
    goto LABEL_122;
  }
  if (sub_20C95C2C0((const void *)v95))
  {
    if (sub_20BF772F0(a2, byte_25498CF28))
    {
      v15 = sub_20C95C2F4((const void *)v95);
      pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(&v96, v15);
      *(_QWORD *)(a3 + 8) = &off_24C5255B8;
      sub_20C00A0DC((char **)a3, &v96);
      sub_20BE930F8((uint64_t)&v96);
    }
    else
    {
      sub_20BF772F0(a2, byte_25498CF48);
      v24 = sub_20C95C2F4((const void *)v95);
      *(_QWORD *)(a3 + 8) = &off_24C520700;
      sub_20BF77444((unsigned int **)a3, (uint64_t)v24);
    }
LABEL_61:
    v9 = 0;
    goto LABEL_122;
  }
  if (sub_20C95C8B4((const void *)v95))
  {
    v16 = sub_20C95C8E8((const void *)v95);
    *(_QWORD *)&v98 = 0;
    v96 = 0u;
    v97 = 0u;
    sub_20C7B8994((unint64_t *)&v96, *((_QWORD *)v16 + 1));
    v18 = *(_QWORD **)v16;
    v17 = *((_QWORD *)v16 + 1);
    v19 = v17 & 0x3F;
    if (v17 > 0x3F || (v17 & 0x3F) != 0)
    {
      v20 = 0;
      v21 = 0;
      v22 = &v18[v17 >> 6];
      do
      {
        LOBYTE(__p[0]) = (*v18 >> v21) & 1;
        sub_20C080028((uint64_t)&v96, __p);
        v18 += v20 == 63;
        if (v20 == 63)
          v20 = 0;
        else
          v20 = v21 + 1;
        v23 = v18 == v22 && v19 == v20;
        v21 = v20;
      }
      while (!v23);
    }
    *(_QWORD *)(a3 + 8) = &off_24C524F38;
    sub_20BF56B40((_QWORD *)a3, (uint64_t)&v96);
    sub_20BF5618C((uint64_t)&v96);
    goto LABEL_61;
  }
  if (sub_20C95C4E8((const void *)v95))
  {
    v25 = sub_20C95C51C((const void *)v95);
    *(_QWORD *)&v98 = 0;
    v96 = 0u;
    v97 = 0u;
    sub_20C596AB8((unint64_t *)&v96, (uint64_t)(*((_QWORD *)v25 + 1) - *(_QWORD *)v25) >> 2);
    v27 = *(_DWORD **)v25;
    v26 = (_DWORD *)*((_QWORD *)v25 + 1);
    while (v27 != v26)
    {
      LODWORD(__p[0]) = *v27;
      sub_20C59A0AC((uint64_t)&v96, __p);
      ++v27;
    }
    *(_QWORD *)(a3 + 8) = &off_24C51F5B0;
    sub_20BF56B40((_QWORD *)a3, (uint64_t)&v96);
    sub_20BF5618C((uint64_t)&v96);
    goto LABEL_61;
  }
  if (sub_20C95CBD8((const void *)v95))
  {
    v28 = sub_20C95CC0C((const void *)v95);
    *(_QWORD *)&v98 = 0;
    v96 = 0u;
    v97 = 0u;
    sub_20C6506B4((unint64_t *)&v96, (uint64_t)(*((_QWORD *)v28 + 1) - *(_QWORD *)v28) >> 2);
    v30 = *(_DWORD **)v28;
    v29 = (_DWORD *)*((_QWORD *)v28 + 1);
    while (v30 != v29)
    {
      LODWORD(__p[0]) = *v30;
      sub_20C6545A0((uint64_t)&v96, __p);
      ++v30;
    }
    *(_QWORD *)(a3 + 8) = &off_24C51E808;
    sub_20BF56B40((_QWORD *)a3, (uint64_t)&v96);
    sub_20BF5618C((uint64_t)&v96);
    goto LABEL_61;
  }
  if (sub_20C95CFA4((const void *)v95))
  {
    v31 = sub_20C95CFD8((const void *)v95);
    *(_QWORD *)&v98 = 0;
    v96 = 0u;
    v97 = 0u;
    sub_20C5E20F4((unint64_t *)&v96, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v31 + 1) - *(_QWORD *)v31) >> 3));
    v33 = *(__int128 **)v31;
    v32 = (__int128 *)*((_QWORD *)v31 + 1);
    while (v33 != v32)
    {
      if (*((char *)v33 + 23) < 0)
      {
        sub_20BDDBFAC(__p, *(void **)v33, *((_QWORD *)v33 + 1));
      }
      else
      {
        v34 = *v33;
        v94 = *((_QWORD *)v33 + 2);
        *(_OWORD *)__p = v34;
      }
      sub_20C080904((uint64_t)&v96, (__int128 *)__p);
      if (SHIBYTE(v94) < 0)
        operator delete(__p[0]);
      v33 = (__int128 *)((char *)v33 + 24);
    }
    *(_QWORD *)(a3 + 8) = off_24C525448;
    sub_20BF56B40((_QWORD *)a3, (uint64_t)&v96);
    sub_20C008280(&v96);
    goto LABEL_61;
  }
  if (sub_20C9591C0((const void *)v95))
  {
    v35 = sub_20C9591F4((const void *)v95);
    *(_QWORD *)&v96 = *(_QWORD *)v35;
    DWORD2(v96) = *((_DWORD *)v35 + 2);
    *(_QWORD *)(a3 + 8) = (char *)&off_24C51E0D8 + 2;
    v36 = operator new(0x10uLL);
    *(_QWORD *)v36 = v96;
    v36[2] = DWORD2(v96);
    v37 = v36 + 3;
    atomic_store(0, v36 + 3);
    *(_QWORD *)a3 = v36;
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
    goto LABEL_61;
  }
  if (sub_20C9595B4((const void *)v95))
  {
    v96 = *(_OWORD *)sub_20C9595E8((const void *)v95);
    *(_QWORD *)(a3 + 8) = (char *)&off_24C51E300 + 2;
    v39 = (unsigned int *)operator new(0x14uLL);
    *(_OWORD *)v39 = v96;
    v40 = v39 + 4;
    atomic_store(0, v39 + 4);
    *(_QWORD *)a3 = v39;
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
    goto LABEL_61;
  }
  if (sub_20C9599A4((const void *)v95))
  {
    v9 = 0;
    v42 = *(_QWORD *)sub_20C9599D8((const void *)v95);
    v43 = (unint64_t)&off_24C51DEB0;
LABEL_64:
    *(_QWORD *)a3 = v42;
    *(_QWORD *)(a3 + 8) = v43 | 3;
    goto LABEL_122;
  }
  if (sub_20C959D98((const void *)v95))
  {
    v44 = sub_20C959DCC((const void *)v95);
    *(_QWORD *)&v96 = *(_QWORD *)v44;
    DWORD2(v96) = *((_DWORD *)v44 + 2);
    *(_QWORD *)(a3 + 8) = (char *)&off_24C51E0D8 + 2;
    v45 = operator new(0x10uLL);
    *(_QWORD *)v45 = v96;
    v45[2] = DWORD2(v96);
    v46 = v45 + 3;
    atomic_store(0, v45 + 3);
    *(_QWORD *)a3 = v45;
    do
      v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
    goto LABEL_61;
  }
  if (sub_20C95A18C((const void *)v95))
  {
    v96 = *(_OWORD *)sub_20C95A1C0((const void *)v95);
    *(_QWORD *)(a3 + 8) = (char *)&off_24C51E300 + 2;
    v48 = (unsigned int *)operator new(0x14uLL);
    *(_OWORD *)v48 = v96;
    v49 = v48 + 4;
    atomic_store(0, v48 + 4);
    *(_QWORD *)a3 = v48;
    do
      v50 = __ldxr(v49);
    while (__stxr(v50 + 1, v49));
    goto LABEL_61;
  }
  if (sub_20C95A57C((const void *)v95))
  {
    v51 = sub_20C95A5B0((const void *)v95);
    for (i = 0; i != 4; i += 2)
    {
      v53 = sub_20C7B88C8((__int16 *)&v51[i]);
      sub_20C7B892C(__p, v53);
      *(_WORD *)((char *)&v96 + i) = __p[0];
    }
    v9 = 0;
    *(_QWORD *)(a3 + 8) = (char *)&off_24C51DDF8 + 3;
    v11 = v96;
    goto LABEL_11;
  }
  if (sub_20C95A8F4((const void *)v95))
  {
    v54 = sub_20C95A928((const void *)v95);
    for (j = 0; j != 6; j += 2)
    {
      v56 = sub_20C7B88C8((__int16 *)&v54[j]);
      sub_20C7B892C(__p, v56);
      *(_WORD *)((char *)&v96 + j) = __p[0];
    }
    v9 = 0;
    *(_QWORD *)(a3 + 8) = (char *)&off_24C51E020 + 3;
    *(_DWORD *)a3 = v96;
    *(_WORD *)(a3 + 4) = WORD2(v96);
    goto LABEL_122;
  }
  if (!sub_20C95AC70((const void *)v95))
  {
    if (sub_20C95AFE0((const void *)v95))
    {
      v9 = 0;
      v42 = *(_QWORD *)sub_20C95B014((const void *)v95);
      v43 = (unint64_t)&off_24C525968;
      goto LABEL_64;
    }
    if (sub_20C95B358((const void *)v95))
    {
      v60 = sub_20C95B38C((const void *)v95);
      *(_QWORD *)&v96 = *(_QWORD *)v60;
      DWORD2(v96) = *((_DWORD *)v60 + 2);
      *(_QWORD *)(a3 + 8) = (char *)&off_24C525AD8 + 2;
      v61 = operator new(0x10uLL);
      *(_QWORD *)v61 = v96;
      v61[2] = DWORD2(v96);
      v62 = v61 + 3;
      atomic_store(0, v61 + 3);
      *(_QWORD *)a3 = v61;
      do
        v63 = __ldxr(v62);
      while (__stxr(v63 + 1, v62));
      goto LABEL_61;
    }
    if (sub_20C95B6D0((const void *)v95))
    {
      v96 = *(_OWORD *)sub_20C95B704((const void *)v95);
      *(_QWORD *)(a3 + 8) = (char *)&off_24C525C48 + 2;
      v64 = (unsigned int *)operator new(0x14uLL);
      *(_OWORD *)v64 = v96;
      v65 = v64 + 4;
      atomic_store(0, v64 + 4);
      *(_QWORD *)a3 = v64;
      do
        v66 = __ldxr(v65);
      while (__stxr(v66 + 1, v65));
      goto LABEL_61;
    }
    if (sub_20C95BA40((const void *)v95))
    {
      v67 = sub_20C95BA74((const void *)v95);
      v68 = 0;
      v69 = &v96;
      do
      {
        for (k = 0; k != 3; ++k)
          *((double *)v69 + k) = *(float *)&v67[4 * k];
        ++v68;
        v69 = (__int128 *)((char *)v69 + 24);
        v67 += 12;
      }
      while (v68 != 3);
      *(_QWORD *)(a3 + 8) = (char *)&off_24C522470 + 2;
      v71 = (char *)operator new(0x50uLL);
      v72 = v99;
      *((_OWORD *)v71 + 2) = v98;
      *((_OWORD *)v71 + 3) = v72;
      *((_QWORD *)v71 + 8) = v100;
      v73 = v97;
      *(_OWORD *)v71 = v96;
      *((_OWORD *)v71 + 1) = v73;
      v74 = (unsigned int *)(v71 + 72);
      atomic_store(0, (unsigned int *)v71 + 18);
      *(_QWORD *)a3 = v71;
      do
        v75 = __ldxr(v74);
      while (__stxr(v75 + 1, v74));
      goto LABEL_61;
    }
    if (sub_20C95BE80((const void *)v95))
    {
      v76 = sub_20C95BEB4((const void *)v95);
      for (m = 0; m != 4; ++m)
      {
        v78 = *(float32x4_t *)&v76[16 * m];
        v79 = (float64x2_t *)(&v96 + 2 * m);
        *v79 = vcvtq_f64_f32(*(float32x2_t *)v78.f32);
        v79[1] = vcvt_hight_f64_f32(v78);
      }
      *(_QWORD *)(a3 + 8) = (char *)&off_24C51E470 + 2;
      v80 = (char *)operator new(0x88uLL);
      v81 = v101;
      *((_OWORD *)v80 + 4) = v100;
      *((_OWORD *)v80 + 5) = v81;
      v82 = v103;
      *((_OWORD *)v80 + 6) = v102;
      *((_OWORD *)v80 + 7) = v82;
      v83 = v97;
      *(_OWORD *)v80 = v96;
      *((_OWORD *)v80 + 1) = v83;
      v84 = v99;
      *((_OWORD *)v80 + 2) = v98;
      *((_OWORD *)v80 + 3) = v84;
      v85 = (unsigned int *)(v80 + 128);
      atomic_store(0, (unsigned int *)v80 + 32);
      *(_QWORD *)a3 = v80;
      do
        v86 = __ldxr(v85);
      while (__stxr(v86 + 1, v85));
      goto LABEL_61;
    }
    if (sub_20C95D3C0((const void *)v95))
    {
      v9 = 0;
      v87 = *(_QWORD *)sub_20C95D3F4((const void *)v95);
      *(_QWORD *)(a3 + 8) = &unk_24C52008B;
      *(_DWORD *)a3 = v87;
      goto LABEL_122;
    }
    if (sub_20C95D914((const void *)v95))
    {
      v9 = 0;
      v12 = *(double *)sub_20C95D948((const void *)v95);
      goto LABEL_14;
    }
    *(_QWORD *)&v96 = "usdMtlx/utils.mm";
    *((_QWORD *)&v96 + 1) = "_GetUsdValue";
    *(_QWORD *)&v97 = 178;
    *((_QWORD *)&v97 + 1) = "VtValue pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_GetUsdValue(const std::str"
                            "ing &, const std::string &)";
    LOBYTE(v98) = 0;
    if ((a2[23] & 0x80u) == 0)
      v89 = (uint64_t *)a2;
    else
      v89 = *(uint64_t **)a2;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v96, (pxrInternal__aapl__pxrReserved__ *)"MaterialX unsupported type %s", v88, v89);
LABEL_121:
    v9 = 1;
    goto LABEL_122;
  }
  v57 = sub_20C95ACA4((const void *)v95);
  for (n = 0; n != 8; n += 2)
  {
    v59 = sub_20C7B88C8((__int16 *)&v57[n]);
    sub_20C7B892C(__p, v59);
    *(_WORD *)((char *)&v96 + n) = __p[0];
  }
  v9 = 0;
  *(_QWORD *)a3 = v96;
  *(_QWORD *)(a3 + 8) = (char *)&off_24C51E248 + 3;
LABEL_122:
  v90 = (std::__shared_weak_count *)*((_QWORD *)&v95 + 1);
  if (!*((_QWORD *)&v95 + 1))
    goto LABEL_126;
  v91 = (unint64_t *)(*((_QWORD *)&v95 + 1) + 8);
  do
    v92 = __ldaxr(v91);
  while (__stlxr(v92 - 1, v91));
  if (!v92)
  {
    ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
    std::__shared_weak_count::__release_weak(v90);
    if ((v9 & 1) == 0)
      return;
  }
  else
  {
LABEL_126:
    if ((v9 & 1) == 0)
      return;
  }
LABEL_127:
  *(_QWORD *)(a3 + 8) = 0;
}

void sub_20C7B79FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a18);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdMtlxGetPackedUsdValues(std::string *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v6;
  int v7;
  const char *v8;
  uint64_t v9;
  uint64_t i;
  __int128 v11;
  uint64_t v12;
  uint64_t j;
  uint64_t v14;
  std::string v15;
  std::string __p;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = a2[23];
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *((_QWORD *)a2 + 1);
  if (v6 < 5 || (v7 >= 0 ? (v8 = (const char *)a2) : (v8 = *(const char **)a2), strcmp(&v8[v6 - 5], "array")))
  {
    sub_20BDDC0E4(&__p, ",");
    pxrInternal__aapl__pxrReserved__::TfStringSplit(a1, (char *)&__p, &v17);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v9 = v17;
    for (i = v18; v9 != i; v9 += 24)
    {
      if (*(char *)(v9 + 23) < 0)
      {
        sub_20BDDBFAC(&__p, *(void **)v9, *(_QWORD *)(v9 + 8));
      }
      else
      {
        v11 = *(_OWORD *)v9;
        __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v9 + 16);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v11;
      }
      pxrInternal__aapl__pxrReserved__::TfStringTrim(" \n\t\r", &__p, &v15);
      sub_20C7B6EB8((uint64_t)&v15, a2, (uint64_t)&v19);
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v15.__r_.__value_.__l.__data_);
      v12 = v20;
      if (v20)
      {
        sub_20C29E3AC(a3, &v19);
      }
      else
      {
        v14 = *a3;
        for (j = a3[1]; j != v14; j = sub_20BF4C2D8(j - 16))
          ;
        a3[1] = v14;
      }
      sub_20BF4C2D8((uint64_t)&v19);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (!v12)
        break;
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17;
    sub_20BDE5038((void ***)&__p);
  }
}

void sub_20C7B7D30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a21 < 0)
    operator delete(__p);
  sub_20BF8CA20((void ***)&__p);
  _Unwind_Resume(a1);
}

__n128 pxrInternal__aapl__pxrReserved__::UsdMtlxSplitStringArray@<Q0>(std::string *__str@<X0>, uint64_t *a2@<X8>)
{
  unsigned __int8 v4;
  __n128 result;
  uint64_t v6;
  uint64_t v7;
  std::string v8;

  v4 = atomic_load((unsigned __int8 *)&qword_25498CF00);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25498CF00))
  {
    sub_20BDDC0E4(&unk_25498CEE8, ",");
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_25498CEE8, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498CF00);
  }
  sub_20C95773C(__str, (unsigned __int8 **)&unk_25498CEE8, a2);
  v6 = *a2;
  v7 = a2[1];
  while (v6 != v7)
  {
    sub_20C957C24((std::string *)v6, &v8);
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    result = *(__n128 *)&v8.__r_.__value_.__l.__data_;
    *(_QWORD *)(v6 + 16) = *((_QWORD *)&v8.__r_.__value_.__l + 2);
    *(__n128 *)v6 = result;
    v6 += 24;
  }
  return result;
}

void sub_20C7B7E98(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498CF00);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C7B7EC8(_QWORD *a1, std::string *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_20C9671E0((uint64_t)a1, a2);
  return a1;
}

void sub_20C7B7EFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDE5038((void ***)va);
  _Unwind_Resume(a1);
}

void sub_20C7B7F14(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 4;
        v6 = v4;
        sub_20BDE5038(&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_20C7B7F84(uint64_t a1)
{
  sub_20BE78E5C(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

_QWORD *sub_20C7B7FB4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C54B808;
  result[1] = v3;
  return result;
}

uint64_t sub_20C7B7FE8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C54B808;
  a2[1] = v2;
  return result;
}

void sub_20C7B8004(uint64_t a1, std::string::size_type *a2, char **a3, uint64_t *a4, __int128 ***a5)
{
  std::__shared_weak_count *v8;
  std::string::size_type v9;
  __int128 **v10;
  _BOOL8 IsPackageRelativePath;
  std::string::size_type size;
  uint64_t *Resolver;
  pxrInternal__aapl__pxrReserved__ *Identifier;
  uint64_t *v15;
  std::string::size_type v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::string *v21;
  unint64_t *v22;
  unint64_t v23;
  std::string v24;
  std::string v25;
  std::string v26;
  std::string v27;
  void *__p;
  char v29;
  char v30;
  std::string __str;
  std::string v32;
  std::string v33;

  v9 = *a2;
  v8 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v10 = *a5;
  IsPackageRelativePath = pxrInternal__aapl__pxrReserved__::ArIsPackageRelativePath(*(_QWORD *)(a1 + 8));
  if (!IsPackageRelativePath)
  {
    Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver((pxrInternal__aapl__pxrReserved__ *)IsPackageRelativePath);
    sub_20C967358(a3, 1, &v32);
    Identifier = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::ArResolver::CreateIdentifier((uint64_t)Resolver);
    v33 = v27;
    *((_BYTE *)&v27.__r_.__value_.__s + 23) = 0;
    v27.__r_.__value_.__s.__data_[0] = 0;
    if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_12;
  }
  memset(&v32, 0, sizeof(v32));
  memset(&__str, 0, sizeof(__str));
  pxrInternal__aapl__pxrReserved__::ArSplitPackageRelativePathInner(*(_QWORD *)(a1 + 8), (uint64_t)&v27);
  v26.__r_.__value_.__r.__words[0] = (std::string::size_type)&v32;
  v26.__r_.__value_.__l.__size_ = (std::string::size_type)&__str;
  sub_20BFC1B10(&v26, (__int128 *)&v27);
  if (v30 < 0)
    operator delete(__p);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  pxrInternal__aapl__pxrReserved__::TfGetPathName(&__str, &v27);
  if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v27.__r_.__value_.__r.__words[2]);
  else
    size = v27.__r_.__value_.__l.__size_;
  if (size)
  {
    sub_20C967358(a3, 1, &v24);
    pxrInternal__aapl__pxrReserved__::TfStringCatPaths((const void **)&v27.__r_.__value_.__l.__data_, (uint64_t)&v24, &v25);
  }
  else
  {
    sub_20C967358(a3, 1, &v25);
  }
  pxrInternal__aapl__pxrReserved__::TfNormPath(&v26, &v25, 0);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  v27 = v26;
  *((_BYTE *)&v26.__r_.__value_.__s + 23) = 0;
  v26.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  if (size && SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  pxrInternal__aapl__pxrReserved__::ArJoinPackageRelativePath((uint64_t)&v32, (uint64_t)&v27, &v26);
  v33 = v26;
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
LABEL_12:
    operator delete(v32.__r_.__value_.__l.__data_);
LABEL_13:
  v15 = pxrInternal__aapl__pxrReserved__::ArGetResolver(Identifier);
  pxrInternal__aapl__pxrReserved__::ArResolver::Resolve((uint64_t)v15);
  v16 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v16 = v32.__r_.__value_.__l.__size_;
  if (v16)
  {
    v27.__r_.__value_.__r.__words[0] = v9;
    v27.__r_.__value_.__l.__size_ = (std::string::size_type)v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
    }
    sub_20C7B3114((pxrInternal__aapl__pxrReserved__ *)&v27, (uint64_t)&v32, a4, v10);
    if (v8)
    {
      v19 = (unint64_t *)&v8->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  else
  {
    v27.__r_.__value_.__r.__words[0] = (std::string::size_type)"usdMtlx/utils.mm";
    v27.__r_.__value_.__l.__size_ = (std::string::size_type)"operator()";
    v27.__r_.__value_.__r.__words[2] = 357;
    __p = "auto pxrInternal__aapl__pxrReserved__::_ReadFromString(mx::DocumentPtr, const std::string &, const ArResolvedP"
          "ath &, const mx::FileSearchPath &, const mx::XmlReadOptions *)::(anonymous class)::operator()(mx::DocumentPtr,"
          " const mx::FilePath &, const mx::FileSearchPath &, const mx::XmlReadOptions *) const";
    v29 = 0;
    v21 = &v33;
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v21 = (std::string *)v33.__r_.__value_.__r.__words[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v27, 3, (pxrInternal__aapl__pxrReserved__ *)"Unable to open MaterialX document '%s'", (const char *)v21);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if (v8)
  {
    v22 = (unint64_t *)&v8->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_20C7B834C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  std::__shared_weak_count *v39;
  uint64_t v40;
  unint64_t *p_shared_owners;
  unint64_t v43;

  if (a30 < 0)
    operator delete(__p);
  if (a39 < 0)
    operator delete(a34);
  if (*(char *)(v40 - 113) < 0)
    operator delete(*(void **)(v40 - 136));
  if (v39)
  {
    p_shared_owners = (unint64_t *)&v39->__shared_owners_;
    do
      v43 = __ldaxr(p_shared_owners);
    while (__stlxr(v43 - 1, p_shared_owners));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C7B8484(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C54B878))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C7B84C0()
{
  return &unk_24C54B878;
}

_QWORD *sub_20C7B84CC(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_20C7B8634(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_20BDC12F4(a1);
}

_QWORD *sub_20C7B8640(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_20BF25370(result, a4);
    result = (_QWORD *)sub_20C7B86C4((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_20C7B86A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_20C7B7F14(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C7B86C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_QWORD *)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      sub_20BE78B98((char *)v4, *(__int128 **)v6, *(__int128 **)(v6 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 3));
      *(_DWORD *)(v4 + 24) = *(_DWORD *)(v6 + 24);
      v4 = v11 + 32;
      v11 += 32;
      v6 += 32;
    }
    while (v6 != a3);
  }
  v9 = 1;
  sub_20C7B8788((uint64_t)v8);
  return v4;
}

void sub_20C7B8774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C7B8788((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C7B8788(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C7B87BC(a1);
  return a1;
}

void sub_20C7B87BC(uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = **(void ****)(a1 + 16);
  v2 = **(void ****)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 4;
    v3 = v1;
    sub_20BDE5038(&v3);
  }
}

uint64_t sub_20C7B8804(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void **v5;

  v5 = (void **)(a1 + 40);
  sub_20BDE5038(&v5);
  v2 = *(_QWORD **)(a1 + 32);
  if (v2 == (_QWORD *)(a1 + 8))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 8);
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

unsigned __int8 *sub_20C7B886C(uint64_t a1, unsigned __int8 *a2)
{
  _QWORD *v3;
  unsigned __int8 *result;
  unsigned __int8 *v5;
  __int128 *v6;

  v3 = (_QWORD *)(a1 + 160);
  result = sub_20C67F73C((_QWORD *)(a1 + 160), a2);
  if (result)
  {
    v5 = sub_20C67F73C(v3, a2);
    if (v5)
      v6 = (__int128 *)(v5 + 40);
    else
      v6 = sub_20C957390();
    return (unsigned __int8 *)sub_20C958488((uint64_t)v6);
  }
  return result;
}

void sub_20C7B88B8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x20C7B88ACLL);
}

float sub_20C7B88C8(__int16 *a1)
{
  int v1;
  unsigned int v2;
  unsigned int v3;
  int v4;
  float result;

  v1 = *a1;
  v2 = v1 & 0x80000000;
  if ((v1 & 0x7C00) != 0)
    v3 = (v1 & 0x7FFF) + 114688;
  else
    v3 = v1 & 0x7FFF;
  if (v3 >> 10 > 0x8E)
    v3 += 114688;
  if (v3 < 0x400)
    v4 = -1;
  else
    v4 = 1;
  LODWORD(result) = COERCE_UNSIGNED_INT((float)(int)v3 * 0.000000059605) & v4 | (v3 << 13) & ~v4 | v2;
  return result;
}

_WORD *sub_20C7B892C(_WORD *a1, float a2)
{
  unsigned int v3;

  if (a2 == 0.0)
  {
    v3 = HIWORD(LODWORD(a2));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(a2) >> 23])
  {
    v3 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(a2) >> 23]
       + (((LODWORD(a2) & 0x7FFFFF) + ((LODWORD(a2) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v3) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(a2));
  }
  *a1 = v3;
  return a1;
}

void sub_20C7B8994(unint64_t *a1, unint64_t a2)
{
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t i;

  v3 = a1[4];
  if (!v3)
  {
    if (!a2)
      return;
    v7 = sub_20C00190C((uint64_t)a1, a2);
    goto LABEL_12;
  }
  if (a1[3])
    v4 = a1;
  else
    v4 = (unint64_t *)(v3 - 8);
  if (*v4 < a2)
  {
    v5 = *a1;
    v6 = sub_20C00190C((uint64_t)a1, a2);
    v7 = v6;
    if (v5)
    {
      for (i = 0; i != v5; ++i)
        *((_BYTE *)v6 + i) = *(_BYTE *)(v3 + i);
    }
LABEL_12:
    sub_20BF5618C((uint64_t)a1);
    a1[4] = (unint64_t)v7;
  }
}

uint64_t *sub_20C7B8A28(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v9[3];
  uint64_t v10;

  v5 = (uint64_t **)sub_20BDDE084((uint64_t)a1, &v10, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    sub_20C7B8AC8((uint64_t)a1, a3, (uint64_t)v9);
    sub_20BDDE1B4(a1, v10, v7, v9[0]);
    v6 = v9[0];
    v9[0] = 0;
    sub_20BE7B260((uint64_t)v9, 0);
  }
  return v6;
}

_BYTE *sub_20C7B8AC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _BYTE *result;

  v5 = a1 + 8;
  v6 = operator new(0x48uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = v6 + 4;
  if (*(char *)(a2 + 23) < 0)
  {
    result = sub_20BDDBFAC(result, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)a2;
    v6[6] = *(_QWORD *)(a2 + 16);
  }
  v6[7] = 0;
  v6[8] = 0;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20C7B8B3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BE7B260(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20C7B8B54(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 48 * a3;
    do
    {
      sub_20C7B8BCC(a1, a2, (__int128 *)a2);
      a2 += 48;
      v5 -= 48;
    }
    while (v5);
  }
  return a1;
}

void sub_20C7B8BB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C7B8FD0(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_20C7B8BCC(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = sub_20BEF33B4(a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((sub_20BEB4EF8(a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  sub_20C7B8E4C(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_20BDEC6E0(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_20C7B8F58((uint64_t)v25, 0);
  return i;
}

void sub_20C7B8E34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C7B8F58((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C7B8E4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;

  v7 = a1 + 16;
  v8 = operator new(0x40uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = sub_20C7B8EC0(v8 + 2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_20C7B8EA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C7B8F58(v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C7B8EC0(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  int v8;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  __dst[3] = *((_QWORD *)a2 + 3);
  v5 = *((_QWORD *)a2 + 4);
  __dst[4] = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      __dst[4] &= 0xFFFFFFFFFFFFFFF8;
  }
  v8 = *((_DWORD *)a2 + 10);
  *((_BYTE *)__dst + 44) = *((_BYTE *)a2 + 44);
  *((_DWORD *)__dst + 10) = v8;
  return __dst;
}

void sub_20C7B8F58(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C7B8F9C((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

void sub_20C7B8F9C(uint64_t a1)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;

  v1 = *(_QWORD *)(a1 + 32);
  if ((v1 & 7) != 0)
  {
    v2 = (unsigned int *)(v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t sub_20C7B8FD0(uint64_t a1)
{
  void *v2;

  sub_20C7B9008(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C7B9008(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20C7B8F9C((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void pxrInternal__aapl__pxrReserved__::UsdMtlx_TestString(const std::string *a1@<X0>, int a2@<W1>, pxrInternal__aapl__pxrReserved__ **a3@<X8>)
{
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  unint64_t *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::string __p;
  int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  std::__shared_weak_count *v42;
  void *v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  void *v46;
  std::__shared_weak_count *v47;

  sub_20C926150(&v41, a1);
  v46 = v41;
  v47 = v42;
  if (v42)
  {
    p_shared_owners = (unint64_t *)&v42->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v43 = 0;
  v44 = 0;
  v45 = 0;
  sub_20C969F14((uint64_t *)&v46, a1, (uint64_t *)&v43, 0);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v43;
  sub_20C7B7F14((void ***)&__p);
  v8 = v47;
  if (v47)
  {
    v9 = (unint64_t *)&v47->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (!v41)
  {
    *a3 = 0;
    goto LABEL_50;
  }
  sub_20BDDC0E4(&__p, "tmp.usda");
  v43 = 0;
  v44 = 0;
  pxrInternal__aapl__pxrReserved__::UsdStage::CreateInMemory(&__p, (uint64_t *)&v43, 0, a3);
  v11 = v44;
  if (v44)
  {
    v12 = (unsigned int *)&v44->__shared_owners_;
    do
    {
      v13 = __ldxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
      ((void (*)(std::__shared_weak_count *))v11->~__shared_weak_count_0)(v11);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (a2)
    {
LABEL_17:
      v43 = v41;
      v44 = v42;
      if (v42)
      {
        v15 = (unint64_t *)&v42->__shared_owners_;
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      sub_20C696CA8((uint64_t *)&v46, (uint64_t *)a3);
      sub_20BDDC0E4(&__p, "/MaterialX");
      pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(&v39, &__p);
      pxrInternal__aapl__pxrReserved__::UsdMtlxReadNodeGraphs((uint64_t *)&v43, &v46, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v39);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v39 + 1);
      sub_20BFD265C(&v39);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v17 = v47;
      if (v47)
      {
        v18 = (unsigned int *)&v47->__shared_owners_;
        do
        {
          v19 = __ldxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
          ((void (*)(std::__shared_weak_count *))v17->~__shared_weak_count_0)(v17);
      }
      v21 = v44;
      if (v44)
      {
        v22 = (unint64_t *)&v44->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        goto LABEL_48;
      }
      goto LABEL_50;
    }
  }
  else if (a2)
  {
    goto LABEL_17;
  }
  v46 = v41;
  v47 = v42;
  if (v42)
  {
    v24 = (unint64_t *)&v42->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  sub_20C696CA8(&v39, (uint64_t *)a3);
  sub_20BDDC0E4(&__p, "/MaterialX");
  pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(&v37, &__p);
  sub_20BDDC0E4(&v43, "/ModelRoot");
  pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(&v35, &v43);
  pxrInternal__aapl__pxrReserved__::UsdMtlxRead((uint64_t *)&v46, &v39, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v37, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v35);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v36);
  sub_20BFD265C(&v35);
  if (SHIBYTE(v45) < 0)
    operator delete(v43);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v38);
  sub_20BFD265C(&v37);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v26 = v40;
  if (v40)
  {
    v27 = (unsigned int *)(v40 + 8);
    do
    {
      v28 = __ldxr(v27);
      v29 = v28 - 1;
    }
    while (__stlxr(v29, v27));
    if (!v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  }
  v21 = v47;
  if (v47)
  {
    v30 = (unint64_t *)&v47->__shared_owners_;
    do
      v23 = __ldaxr(v30);
    while (__stlxr(v23 - 1, v30));
LABEL_48:
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
LABEL_50:
  v31 = v42;
  if (v42)
  {
    v32 = (unint64_t *)&v42->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

#error "20C7B96D0: call analysis failed (funcsize=111)"

void pxrInternal__aapl__pxrReserved__::UsdMtlx_TestFile(uint64_t a1@<X0>, int a2@<W1>, pxrInternal__aapl__pxrReserved__ **a3@<X8>)
{
  std::__shared_weak_count *v5;
  unsigned int *p_shared_owners;
  unsigned int v7;
  unsigned int v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::string __p;
  void *v29;
  std::__shared_weak_count *v30;
  char v31;
  int v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  std::__shared_weak_count *v39;
  void *v40;
  std::__shared_weak_count *v41;

  pxrInternal__aapl__pxrReserved__::UsdMtlxReadDocument(a1, (pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v40);
  if (!v40)
  {
    *a3 = 0;
    goto LABEL_42;
  }
  sub_20BDDC0E4(&__p, "tmp.usda");
  v29 = 0;
  v30 = 0;
  pxrInternal__aapl__pxrReserved__::UsdStage::CreateInMemory(&__p, (uint64_t *)&v29, 0, a3);
  v5 = v30;
  if (v30)
  {
    p_shared_owners = (unsigned int *)&v30->__shared_owners_;
    do
    {
      v7 = __ldxr(p_shared_owners);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, p_shared_owners));
    if (!v8)
      ((void (*)(std::__shared_weak_count *))v5->~__shared_weak_count_0)(v5);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (a2)
    {
LABEL_9:
      v29 = v40;
      v30 = v41;
      if (v41)
      {
        v9 = (unint64_t *)&v41->__shared_owners_;
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      sub_20C696CA8((uint64_t *)&v38, (uint64_t *)a3);
      sub_20BDDC0E4(&__p, "/MaterialX");
      pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(&v36, &__p);
      pxrInternal__aapl__pxrReserved__::UsdMtlxReadNodeGraphs((uint64_t *)&v29, &v38, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v36);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v36 + 1);
      sub_20BFD265C(&v36);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v11 = v39;
      if (v39)
      {
        v12 = (unsigned int *)&v39->__shared_owners_;
        do
        {
          v13 = __ldxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
          ((void (*)(std::__shared_weak_count *))v11->~__shared_weak_count_0)(v11);
      }
      v15 = v30;
      if (v30)
      {
        v16 = (unint64_t *)&v30->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        goto LABEL_40;
      }
      goto LABEL_42;
    }
  }
  else if (a2)
  {
    goto LABEL_9;
  }
  v38 = v40;
  v39 = v41;
  if (v41)
  {
    v18 = (unint64_t *)&v41->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  sub_20C696CA8(&v36, (uint64_t *)a3);
  sub_20BDDC0E4(&__p, "/MaterialX");
  pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(&v34, &__p);
  sub_20BDDC0E4(&v29, "/ModelRoot");
  pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(&v32, &v29);
  pxrInternal__aapl__pxrReserved__::UsdMtlxRead((uint64_t *)&v38, &v36, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v34, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v32);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v33);
  sub_20BFD265C(&v32);
  if (v31 < 0)
    operator delete(v29);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v35);
  sub_20BFD265C(&v34);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v20 = v37;
  if (v37)
  {
    v21 = (unsigned int *)(v37 + 8);
    do
    {
      v22 = __ldxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  }
  v15 = v39;
  if (v39)
  {
    v24 = (unint64_t *)&v39->__shared_owners_;
    do
      v17 = __ldaxr(v24);
    while (__stlxr(v17 - 1, v24));
LABEL_40:
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
LABEL_42:
  v25 = v41;
  if (v41)
  {
    v26 = (unint64_t *)&v41->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
}

#error "20C7B9CB4: call analysis failed (funcsize=111)"

void pxrInternal__aapl__pxrReserved__::UsdMtlxFileFormatTokens_StaticTokenType::~UsdMtlxFileFormatTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::UsdMtlxFileFormatTokens_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  void **v10;

  v10 = (void **)((char *)this + 24);
  sub_20BEEB2B8(&v10);
  v2 = *((_QWORD *)this + 2);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *((_QWORD *)this + 1);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  if ((*(_QWORD *)this & 7) != 0)
  {
    v8 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
}

pxrInternal__aapl__pxrReserved__::UsdMtlxFileFormatTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::UsdMtlxFileFormatTokens_StaticTokenType::UsdMtlxFileFormatTokens_StaticTokenType(unsigned int **this)
{
  unsigned int **v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int **v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v2 = (unsigned int **)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "mtlx", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2, "1.0", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 2, "usd", 0);
  v3 = *this;
  v23 = v3;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      v23 = v4;
  }
  v6 = *v2;
  v24 = v6;
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    if ((v8 & 1) == 0)
      v24 = v7;
  }
  v9 = this[2];
  v25 = v9;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      v25 = v10;
  }
  this[3] = 0;
  this[4] = 0;
  this[5] = 0;
  v12 = (unsigned int *)operator new(0x18uLL);
  v13 = 0;
  this[3] = v12;
  this[4] = v12;
  this[5] = v12 + 6;
  do
  {
    v14 = (&v23)[v13];
    *(_QWORD *)v12 = v14;
    if ((v14 & 7) != 0)
    {
      v15 = (unsigned int *)((unint64_t)v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 2, v15));
      if ((v16 & 1) == 0)
        *(_QWORD *)v12 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v13;
    v12 += 2;
  }
  while (v13 != 3);
  v17 = (unsigned int **)&v26;
  this[4] = v12;
  do
  {
    v19 = (uint64_t)*--v17;
    v18 = v19;
    if ((v19 & 7) != 0)
    {
      v20 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stlxr(v21 - 2, v20));
    }
  }
  while (v17 != &v23);
  return (pxrInternal__aapl__pxrReserved__::UsdMtlxFileFormatTokens_StaticTokenType *)this;
}

void sub_20C7B9F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;

  sub_20BEEB2B8(&a9);
  v18 = &a14;
  while (1)
  {
    v20 = *--v18;
    v19 = v20;
    if ((v20 & 7) != 0)
    {
      v21 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
      do
        v22 = __ldxr(v21);
      while (__stlxr(v22 - 2, v21));
    }
    if (v18 == (uint64_t *)&a11)
    {
      if ((*v16 & 7) != 0)
      {
        v23 = (unsigned int *)(*v16 & 0xFFFFFFFFFFFFFFF8);
        do
          v24 = __ldxr(v23);
        while (__stlxr(v24 - 2, v23));
      }
      if ((*v15 & 7) != 0)
      {
        v25 = (unsigned int *)(*v15 & 0xFFFFFFFFFFFFFFF8);
        do
          v26 = __ldxr(v25);
        while (__stlxr(v26 - 2, v25));
      }
      if ((*v14 & 7) != 0)
      {
        v27 = (unsigned int *)(*v14 & 0xFFFFFFFFFFFFFFF8);
        do
          v28 = __ldxr(v27);
        while (__stlxr(v28 - 2, v27));
      }
      _Unwind_Resume(a1);
    }
  }
}

uint64_t sub_20C7BA000()
{
  uint64_t *v0;

  v0 = sub_20C7BAAA0();
  return sub_20C7BABC0(v0);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdMtlxFileFormat::UsdMtlxFileFormat(pxrInternal__aapl__pxrReserved__::UsdMtlxFileFormat *this)
{
  uint64_t *v2;
  unsigned int **v3;
  unsigned int **v4;
  pxrInternal__aapl__pxrReserved__::TfToken *v5;
  uint64_t *EmptyString;
  uint64_t result;

  v2 = (uint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdMtlxFileFormatTokens);
  if (!v2)
    v2 = (uint64_t *)sub_20C7BACE8(&pxrInternal__aapl__pxrReserved__::UsdMtlxFileFormatTokens);
  v3 = (unsigned int **)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdMtlxFileFormatTokens);
  if (!v3)
    v3 = sub_20C7BACE8(&pxrInternal__aapl__pxrReserved__::UsdMtlxFileFormatTokens);
  v4 = (unsigned int **)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdMtlxFileFormatTokens);
  if (!v4)
    v4 = sub_20C7BACE8(&pxrInternal__aapl__pxrReserved__::UsdMtlxFileFormatTokens);
  v5 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdMtlxFileFormatTokens);
  if (!v5)
    v5 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C7BACE8(&pxrInternal__aapl__pxrReserved__::UsdMtlxFileFormatTokens);
  if ((*(_QWORD *)v5 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)v5 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v5);
  result = pxrInternal__aapl__pxrReserved__::SdfFileFormat::SdfFileFormat((uint64_t)this, v2, (uint64_t *)v3 + 1, (uint64_t *)v4 + 2, (uint64_t)EmptyString);
  *(_QWORD *)this = off_24C54B8B0;
  return result;
}

void pxrInternal__aapl__pxrReserved__::UsdMtlxFileFormat::~UsdMtlxFileFormat(pxrInternal__aapl__pxrReserved__::UsdMtlxFileFormat *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::SdfFileFormat::~SdfFileFormat(this);
  operator delete(v1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdMtlxFileFormat::CanRead(pxrInternal__aapl__pxrReserved__::SdfFileFormat *a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::TfToken *FormatId;
  uint64_t v4;
  std::string __p;

  pxrInternal__aapl__pxrReserved__::TfGetExtension(a2, &__p);
  FormatId = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetFormatId(a1);
  v4 = pxrInternal__aapl__pxrReserved__::TfToken::operator==(FormatId, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v4;
}

void sub_20C7BA16C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdMtlxFileFormat::Read(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfLayer *a2, uint64_t a3)
{
  _BOOL8 v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  pxrInternal__aapl__pxrReserved__::UsdStage *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v24;
  uint64_t v25;
  pxrInternal__aapl__pxrReserved__ *v26;
  void *v27;
  uint64_t v28;
  char v29;
  void *__p[2];
  char v31;
  int v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;

  pxrInternal__aapl__pxrReserved__::UsdStage::CreateInMemory(0, &v26);
  sub_20C696CA8(&v24, (uint64_t *)&v26);
  pxrInternal__aapl__pxrReserved__::UsdMtlxReadDocument(a3, (pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v38);
  v5 = v38 != 0;
  if (v38)
  {
    v36 = v38;
    v37 = v39;
    if (v39)
    {
      p_shared_owners = (unint64_t *)&v39->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    sub_20BDDC0E4(&v27, "/MaterialX");
    pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(&v34, &v27);
    sub_20BDDC0E4(__p, "/ModelRoot");
    pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(&v32, __p);
    pxrInternal__aapl__pxrReserved__::UsdMtlxRead(&v36, &v24, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v34, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v32);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v33);
    sub_20BFD265C(&v32);
    if (v31 < 0)
      operator delete(__p[0]);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v35);
    sub_20BFD265C(&v34);
    if (v29 < 0)
      operator delete(v27);
    v8 = v37;
    if (v37)
    {
      v9 = (unint64_t *)&v37->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  v11 = v39;
  if (v39)
  {
    v12 = (unint64_t *)&v39->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v25;
  if (v25)
  {
    v15 = (unsigned int *)(v25 + 8);
    do
    {
      v16 = __ldxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  if (v5)
  {
    v18 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20C39A7A8((uint64_t *)&v26);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetRootLayer(v18, (uint64_t *)&v27);
    pxrInternal__aapl__pxrReserved__::SdfLayer::TransferContent(a2, (uint64_t *)&v27);
    v19 = v28;
    if (v28)
    {
      v20 = (unsigned int *)(v28 + 8);
      do
      {
        v21 = __ldxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    }
  }
  sub_20C455C74(&v26);
  return v5;
}

void sub_20C7BA398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;

  v27 = a14;
  if (a14)
  {
    v28 = (unsigned int *)(a14 + 8);
    do
    {
      v29 = __ldxr(v28);
      v30 = v29 - 1;
    }
    while (__stlxr(v30, v28));
    if (!v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  }
  sub_20C455C74(&a12);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdMtlxFileFormat::WriteToFile()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdMtlxFileFormat::ReadFromString(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfLayer *a2, const std::string *a3)
{
  _BOOL8 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  pxrInternal__aapl__pxrReserved__::UsdStage *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v19;
  uint64_t v20;
  pxrInternal__aapl__pxrReserved__ *v21;
  void *v22;
  uint64_t v23;
  char v24;
  void *__p[2];
  char v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  std::__shared_weak_count *v32;

  pxrInternal__aapl__pxrReserved__::UsdStage::CreateInMemory(0, &v21);
  sub_20C696CA8(&v19, (uint64_t *)&v21);
  pxrInternal__aapl__pxrReserved__::UsdMtlxGetDocumentFromString(a3, &v31);
  v5 = v31 != 0;
  if (v31)
  {
    sub_20BDDC0E4(&v22, "/MaterialX");
    pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(&v29, &v22);
    sub_20BDDC0E4(__p, "/ModelRoot");
    pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(&v27, __p);
    pxrInternal__aapl__pxrReserved__::UsdMtlxRead(&v31, &v19, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v29, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v27);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v28);
    sub_20BFD265C(&v27);
    if (v26 < 0)
      operator delete(__p[0]);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v30);
    sub_20BFD265C(&v29);
    if (v24 < 0)
      operator delete(v22);
  }
  v6 = v32;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = v20;
  if (v20)
  {
    v10 = (unsigned int *)(v20 + 8);
    do
    {
      v11 = __ldxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  if (v5)
  {
    v13 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20C39A7A8((uint64_t *)&v21);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetRootLayer(v13, (uint64_t *)&v22);
    pxrInternal__aapl__pxrReserved__::SdfLayer::TransferContent(a2, (uint64_t *)&v22);
    v14 = v23;
    if (v23)
    {
      v15 = (unsigned int *)(v23 + 8);
      do
      {
        v16 = __ldxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    }
  }
  sub_20C455C74(&v21);
  return v5;
}

void sub_20C7BA738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;

  v27 = a14;
  if (a14)
  {
    v28 = (unsigned int *)(a14 + 8);
    do
    {
      v29 = __ldxr(v28);
      v30 = v29 - 1;
    }
    while (__stlxr(v30, v28));
    if (!v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  }
  sub_20C455C74(&a12);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdMtlxFileFormat::WriteToString(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  pxrInternal__aapl__pxrReserved__::SdfFileFormat *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v15;
  uint64_t v16;

  v7 = (pxrInternal__aapl__pxrReserved__::SdfFileFormat *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdUsdaFileFormatTokens);
  if (!v7)
    v7 = sub_20C27EB9C(&pxrInternal__aapl__pxrReserved__::UsdUsdaFileFormatTokens);
  pxrInternal__aapl__pxrReserved__::SdfFileFormat::FindById(v7, &v15);
  v8 = sub_20BFCF6F4(&v15);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 88))(v8, a2, a3, a4);
  v10 = v16;
  if (v16)
  {
    v11 = (unsigned int *)(v16 + 8);
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  return v9;
}

void sub_20C7BA9C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    sub_20C96B340(a10);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdMtlxFileFormat::WriteToStream(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  pxrInternal__aapl__pxrReserved__::SdfFileFormat *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v15;
  uint64_t v16;

  v7 = (pxrInternal__aapl__pxrReserved__::SdfFileFormat *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdUsdaFileFormatTokens);
  if (!v7)
    v7 = sub_20C27EB9C(&pxrInternal__aapl__pxrReserved__::UsdUsdaFileFormatTokens);
  pxrInternal__aapl__pxrReserved__::SdfFileFormat::FindById(v7, &v15);
  v8 = sub_20BFCF6F4(&v15);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 80))(v8, a2, a3, a4);
  v10 = v16;
  if (v16)
  {
    v11 = (unsigned int *)(v16 + 8);
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  return v9;
}

void sub_20C7BAA88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    sub_20C96B340(a10);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20C7BAAA0()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C1BA13C((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C7BAB74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_20C7BABC0(uint64_t *a1)
{
  _QWORD *v2;
  char *v3;
  uint64_t result;
  _QWORD *v5;

  v2 = operator new(8uLL);
  *v2 = &unk_24C54B968;
  v5 = v2;
  pxrInternal__aapl__pxrReserved__::TfType::SetFactory(a1, (uint64_t *)&v5, v3);
  result = (uint64_t)v5;
  v5 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_20C7BAC24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_20C7BAC50(pxrInternal__aapl__pxrReserved__::Sdf_FileFormatFactoryBase *a1)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::Sdf_FileFormatFactoryBase::~Sdf_FileFormatFactoryBase(a1);
  operator delete(v1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20C7BAC64@<X0>(pxrInternal__aapl__pxrReserved__::UsdMtlxFileFormat **a1@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdMtlxFileFormat *v2;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v4;

  v2 = (pxrInternal__aapl__pxrReserved__::UsdMtlxFileFormat *)operator new(0x70uLL);
  pxrInternal__aapl__pxrReserved__::UsdMtlxFileFormat::UsdMtlxFileFormat(v2);
  *a1 = v2;
  v4 = 0;
  return sub_20C7BACBC(&v4);
}

void sub_20C7BACA8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20C7BACBC(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  sub_20BF1D8F4((int)a1, *a1);
  return a1;
}

unsigned int **sub_20C7BACE8(unint64_t *a1)
{
  unsigned int **result;
  void *v4;

  result = sub_20C7BAD30();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::UsdMtlxFileFormatTokens_StaticTokenType::~UsdMtlxFileFormatTokens_StaticTokenType((pxrInternal__aapl__pxrReserved__::UsdMtlxFileFormatTokens_StaticTokenType *)result);
    operator delete(v4);
  }
  return (unsigned int **)atomic_load(a1);
}

unsigned int **sub_20C7BAD30()
{
  unsigned int **v0;

  v0 = (unsigned int **)operator new(0x30uLL);
  pxrInternal__aapl__pxrReserved__::UsdMtlxFileFormatTokens_StaticTokenType::UsdMtlxFileFormatTokens_StaticTokenType(v0);
  return v0;
}

void sub_20C7BAD5C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdMtlxRead(uint64_t *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, pxrInternal__aapl__pxrReserved__::SdfPath *a4)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::UsdStage *v8;
  unsigned int *v9;
  unsigned int v10;
  pxrInternal__aapl__pxrReserved__::UsdStage *v11;
  __int128 *v12;
  uint64_t v13;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v14;
  uint64_t *EmptyString;
  uint64_t *v16;
  pxrInternal__aapl__pxrReserved__::UsdStage *v17;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t *v28;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v29;
  const char *v30;
  char *v31;
  _QWORD *v32;
  unint64_t *v33;
  unint64_t *v34;
  unint64_t v35;
  void *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unsigned int *v49;
  unsigned int v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t *v53;
  void *v54;
  unint64_t *v55;
  unint64_t v56;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v57;
  unint64_t *v58;
  unint64_t *v59;
  unint64_t v60;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v61;
  char *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  unint64_t *v68;
  unint64_t *v69;
  unint64_t v70;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t *v76;
  unint64_t v77;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v78;
  unsigned int *v79;
  unsigned int v80;
  _QWORD *v81;
  uint64_t i;
  uint64_t v83;
  char *v84;
  unsigned int *v85;
  unsigned int v86;
  unsigned int *v87;
  unsigned int v88;
  const char *v89;
  char *v90;
  _QWORD *v91;
  void *v92;
  _QWORD *v93;
  void *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  unsigned int *v98;
  unsigned int v99;
  pxrInternal__aapl__pxrReserved__::UsdStage *v100;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v101;
  unsigned int *v102;
  unsigned int v103;
  uint64_t v104;
  __int128 *v105;
  void *v106;
  void *v107;
  std::__shared_weak_count *v108;
  uint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  __int128 *v112;
  __int128 *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  const void **v117;
  uint64_t *v118;
  _QWORD *v119;
  __int128 *v120;
  __int128 *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  const void **v125;
  uint64_t *v126;
  void (**v127)(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *__hidden);
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v128;
  uint64_t *v129;
  uint64_t *v130;
  _QWORD *v131;
  void *v132;
  int64_t v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  char *v137;
  uint64_t v138;
  char *v139;
  _QWORD *v140;
  _QWORD *v141;
  char *v142;
  __int128 v143;
  int64x2_t v144;
  char *v145;
  std::__shared_weak_count *size;
  unint64_t *v147;
  unint64_t v148;
  uint64_t *v149;
  uint64_t *v150;
  uint64_t *v151;
  uint64_t *v152;
  _QWORD *v153;
  _QWORD *v154;
  _QWORD *v155;
  uint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  _QWORD *v159;
  uint64_t *v160;
  _QWORD *v161;
  _QWORD *v162;
  uint64_t v163;
  uint64_t v164;
  _OWORD *v165;
  __int128 v166;
  void *v167;
  unint64_t *v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t *v172;
  unint64_t v173;
  __int128 *v174;
  _QWORD *v175;
  uint64_t v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  __int128 *v182;
  uint64_t *v183;
  uint64_t *v184;
  uint64_t v185;
  __int128 *v186;
  uint64_t *v187;
  char *v188;
  uint64_t v189;
  unint64_t *v190;
  unint64_t v191;
  unsigned int *v192;
  unsigned int v193;
  unsigned int *v194;
  unsigned int v195;
  uint64_t *v196;
  uint64_t *v197;
  uint64_t v198;
  unint64_t *v199;
  unint64_t v200;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v201;
  unint64_t v202;
  uint64_t v203;
  void **v204;
  uint64_t *v205;
  char v206;
  char v207;
  unsigned int *v208;
  unsigned int v209;
  unsigned int *v210;
  unsigned int v211;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v212;
  unsigned int *v213;
  unsigned int v214;
  int j;
  std::string *v216;
  __int128 v217;
  int IsCompatible;
  unsigned int *v219;
  unsigned int v220;
  const void **v221;
  char *v222;
  void **v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  std::string *v227;
  __int128 v228;
  void *v229;
  unint64_t *v230;
  unint64_t v231;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v232;
  uint64_t *v233;
  unsigned int *v234;
  unsigned int v235;
  uint64_t *v236;
  __int128 *v237;
  pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *v238;
  std::string::size_type v239;
  const void **v240;
  const void **v241;
  unsigned int *v242;
  unsigned int v243;
  uint64_t v244;
  unsigned int *v245;
  unsigned int v246;
  unsigned int *v247;
  unsigned int v248;
  unsigned int *v249;
  unsigned int v250;
  unsigned int *v251;
  unsigned int v252;
  uint64_t v253;
  unsigned int *v254;
  unsigned int v255;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v256;
  unint64_t *v257;
  unint64_t v258;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v259;
  uint64_t *v260;
  uint64_t *v261;
  uint64_t v262;
  unint64_t *v263;
  unint64_t v264;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v265;
  const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v266;
  uint64_t *v267;
  uint64_t v268;
  unsigned int *v269;
  unsigned int v270;
  std::__shared_weak_count *v271;
  unint64_t *v272;
  unint64_t v273;
  std::__shared_weak_count *v274;
  uint64_t *v275;
  unint64_t *v276;
  unint64_t v277;
  uint64_t v278;
  __int128 *v279;
  void (**v280)(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *__hidden);
  std::__shared_weak_count *v281;
  unint64_t *v282;
  unint64_t v283;
  unint64_t *v284;
  unint64_t v285;
  uint64_t v286;
  __int128 *v287;
  uint64_t v288;
  uint64_t k;
  std::__shared_weak_count *v290;
  unint64_t *v291;
  unint64_t v292;
  unint64_t *v293;
  unint64_t v294;
  uint64_t v295;
  uint64_t *v296;
  unint64_t *v297;
  unint64_t v298;
  uint64_t *v299;
  uint64_t **v300;
  uint64_t **v301;
  unint64_t v302;
  uint64_t **v303;
  uint64_t **v304;
  unint64_t *v305;
  unint64_t v306;
  uint64_t *v307;
  uint64_t *v308;
  uint64_t *v309;
  uint64_t *v310;
  uint64_t v311;
  char **v312;
  char *v313;
  char *v314;
  char *v315;
  std::__shared_weak_count *v316;
  unint64_t *v317;
  unint64_t v318;
  uint64_t **v319;
  uint64_t **v320;
  __int128 v321;
  __int128 *v322;
  __int128 *v323;
  uint64_t **v324;
  char *v325;
  uint64_t *v326;
  uint64_t **v327;
  BOOL v328;
  uint64_t **v329;
  __int128 v330;
  std::string::size_type m;
  uint64_t *v332;
  const void **v333;
  uint64_t *v334;
  uint64_t *v335;
  uint64_t *v336;
  uint64_t v337;
  unsigned int *v338;
  unsigned int v339;
  uint64_t v340;
  unsigned int *v341;
  unsigned int v342;
  unsigned int v343;
  uint64_t v344;
  unsigned int *v345;
  unsigned int v346;
  unsigned int v347;
  std::string::size_type v348;
  unsigned int *v349;
  unsigned int v350;
  unsigned int v351;
  uint64_t **v352;
  uint64_t v353;
  void **v354;
  void **v355;
  std::string::size_type v356;
  unint64_t *v357;
  unint64_t v358;
  unsigned int *v359;
  unsigned int v360;
  std::__shared_weak_count *v361;
  unint64_t *v362;
  unint64_t v363;
  void **v364;
  void **v365;
  const char *v366;
  const char *v367;
  const char *Text;
  unsigned int *v369;
  unsigned int v370;
  uint64_t *v371;
  uint64_t *v372;
  unsigned int *v373;
  unsigned int v374;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v375;
  unsigned int *v376;
  unsigned int v377;
  unsigned int *v378;
  unsigned int v379;
  uint64_t v380;
  __int128 *v381;
  uint64_t *v382;
  uint64_t *v383;
  std::string::size_type v384;
  std::string::size_type v385;
  unint64_t *v386;
  unint64_t v387;
  char v388;
  _QWORD *v389;
  unsigned __int8 *v390;
  __int128 *v391;
  uint64_t v392;
  unsigned __int8 *v393;
  std::string::size_type v394;
  void *v395;
  std::__shared_weak_count *v396;
  unint64_t *v397;
  unint64_t v398;
  std::__shared_weak_count *v399;
  unint64_t *v400;
  unint64_t v401;
  std::__shared_weak_count *v402;
  unint64_t *v403;
  unint64_t v404;
  unint64_t *v405;
  unint64_t v406;
  std::__shared_weak_count *v407;
  unint64_t *v408;
  unint64_t v409;
  char *v410;
  char *v411;
  uint64_t v413;
  uint64_t v414;
  std::__shared_weak_count *v415;
  unint64_t *v416;
  unint64_t v417;
  char *v418;
  char *v419;
  uint64_t v420;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v421;
  unsigned int *v422;
  unsigned int v423;
  unsigned int *v424;
  unsigned int v425;
  std::__shared_weak_count *v426;
  unint64_t *v427;
  unint64_t v428;
  unsigned __int8 v429;
  unint64_t *v430;
  unint64_t v431;
  unint64_t *v432;
  unint64_t v433;
  unsigned __int8 *v434;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v435;
  __int128 *v436;
  uint64_t v437;
  uint64_t v438;
  unsigned int *v439;
  unsigned int v440;
  unsigned int *v441;
  unsigned int v442;
  unsigned int *v443;
  unsigned int v444;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v445;
  unsigned int *v446;
  unsigned int v447;
  void *v448;
  unsigned int *v449;
  unsigned int v450;
  unsigned int v451;
  __int128 *v452;
  uint64_t *v453;
  uint64_t *v454;
  uint64_t v455;
  std::__shared_weak_count *v456;
  unint64_t *v457;
  unint64_t v458;
  unsigned int *v459;
  unsigned int v460;
  unint64_t *v461;
  unint64_t v462;
  pxrInternal__aapl__pxrReserved__ *v463;
  uint64_t *UsdPrimAllPrimsPredicate;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  unsigned int *v468;
  unsigned int v469;
  __int128 *v470;
  unint64_t *v471;
  unint64_t *v472;
  unsigned __int8 *v473;
  __int128 *v474;
  uint64_t v475;
  unint64_t v476;
  std::__shared_weak_count *v477;
  unint64_t *v478;
  unint64_t v479;
  unint64_t *v480;
  unint64_t v481;
  uint64_t *v482;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v483;
  uint64_t *v484;
  pxrInternal__aapl__pxrReserved__::TfToken *v485;
  uint64_t *v486;
  size_t v487;
  _BYTE *v488;
  const void *v489;
  int v490;
  const std::string::value_type *v491;
  std::string::size_type v492;
  std::string *v493;
  __int128 v494;
  unsigned int *v495;
  unsigned int v496;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v497;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v498;
  char IsDefined;
  unsigned int *v500;
  unsigned int v501;
  unint64_t v502;
  unsigned int *v503;
  unsigned int v504;
  unsigned int v505;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v506;
  unsigned int *v507;
  unsigned int v508;
  void *v509;
  unsigned int *v510;
  unsigned int v511;
  unsigned int v512;
  std::__shared_weak_count *v513;
  unint64_t *v514;
  unint64_t v515;
  unint64_t *v516;
  unint64_t v517;
  unsigned int *v518;
  unsigned int v519;
  std::__shared_weak_count *v520;
  unint64_t *v521;
  unint64_t v522;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v523;
  uint64_t *v524;
  unint64_t v525;
  uint64_t *v526;
  __int128 *v527;
  uint64_t v528;
  unsigned int *v529;
  unsigned int v530;
  uint64_t *v531;
  uint64_t *v532;
  unint64_t v533;
  unint64_t v534;
  unint64_t *v535;
  unint64_t v536;
  _QWORD *v537;
  _QWORD *v538;
  _QWORD *v539;
  _QWORD *v540;
  unint64_t v541;
  _QWORD *v542;
  _QWORD *v543;
  unsigned int *v544;
  unsigned int v545;
  unsigned int *v546;
  unsigned int v547;
  std::__shared_weak_count *v548;
  unint64_t *v549;
  unint64_t v550;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v551;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v552;
  int v553;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v554;
  uint64_t *v555;
  char *v556;
  uint64_t v557;
  unsigned int *v558;
  unsigned int v559;
  char *v560;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v561;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v562;
  int v563;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v564;
  uint64_t *v565;
  char *v566;
  uint64_t v567;
  unsigned int *v568;
  unsigned int v569;
  char *v570;
  unsigned int *v571;
  unsigned int v572;
  unsigned int *v573;
  unsigned int v574;
  unsigned int *v575;
  unsigned int v576;
  pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *v577;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v578;
  pxrInternal__aapl__pxrReserved__::TfToken *v579;
  void *v580;
  unsigned int *v581;
  unsigned int v582;
  unsigned int v583;
  const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v584;
  _QWORD *v585;
  uint64_t v586;
  unsigned int *v587;
  unsigned int v588;
  unsigned int *v589;
  unsigned int v590;
  unsigned int *v591;
  unsigned int v592;
  unsigned int *v593;
  unsigned int v594;
  unsigned int *v595;
  unsigned int v596;
  unint64_t *v597;
  unint64_t v598;
  uint64_t v599;
  unsigned int *v600;
  unsigned int v601;
  unsigned int v602;
  uint64_t v603;
  unsigned int *v604;
  unsigned int v605;
  unsigned int v606;
  uint64_t v607;
  unsigned int *v608;
  unsigned int v609;
  unsigned int v610;
  unsigned int *v611;
  unsigned int v612;
  void **v613;
  const char *v614;
  const char *v615;
  unsigned int *v616;
  unsigned int v617;
  unsigned int *v618;
  unsigned int v619;
  unsigned int *v620;
  unsigned int v621;
  _QWORD *exception;
  std::string *v623;
  __int128 v624;
  __int128 *v625;
  uint64_t *v626;
  _QWORD *v627;
  _QWORD *v628;
  pxrInternal__aapl__pxrReserved__::SdfPath *v629;
  uint64_t *v630;
  unint64_t *v632;
  char *v633;
  uint64_t *v635;
  std::string::size_type v636;
  uint64_t *v637;
  unint64_t *v638;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v639;
  uint64_t *v640;
  std::__shared_weak_count *v641;
  char *v642;
  char *v643;
  _QWORD *v644;
  uint64_t v645;
  _QWORD *v646;
  uint64_t *v647;
  _QWORD *v648;
  std::__shared_weak_count *v649;
  void *v650[2];
  std::string::size_type v651;
  uint64_t v652;
  void *v653[2];
  uint64_t v654;
  char *v655;
  char *v656;
  uint64_t v657;
  const void **v658;
  __int128 *v659;
  std::string v660;
  uint64_t v661;
  int v662;
  int v663;
  uint64_t **v664;
  uint64_t *v665;
  uint64_t v666;
  uint64_t v667;
  std::__shared_weak_count *v668;
  uint64_t v669;
  std::__shared_weak_count *v670;
  uint64_t v671[2];
  char *v672;
  const char *v673;
  uint64_t v674;
  const char *v675;
  char v676[24];
  uint64_t *v677;
  uint64_t v678;
  std::string *__str;
  void *__dst;
  unint64_t v681;
  uint64_t *v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t *v685;
  uint64_t v686;
  _QWORD v687[2];
  uint64_t *v688;
  uint64_t v689;
  int __val;
  uint64_t v691;
  std::__shared_weak_count *v692;
  uint64_t v693;
  unint64_t *v694;
  int v695;
  int v696;
  void (**v697)(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *__hidden);
  void (**v698)(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *__hidden);
  uint64_t v699;
  uint64_t v700;
  void *v701;
  char v702;
  unint64_t v703;
  unint64_t v704;
  unint64_t v705;
  std::string *v706;
  uint64_t v707;
  uint64_t v708;
  std::__shared_weak_count *v709;
  char *v710;
  char *v711;
  unint64_t v712;
  uint64_t *v713;
  uint64_t *v714;
  std::string v715;
  uint64_t v716;
  _BYTE v717[32];
  uint64_t v718;
  std::string v719;
  void *v720[2];
  char *v721;
  uint64_t v722;
  uint64_t v723;
  char *v724;
  unint64_t v725;
  void *v726[2];
  _OWORD v727[2];
  uint64_t *v728;
  __int128 v729;
  __int128 v730;
  char *v731;
  char **v732;
  char *v733;
  char *v734;
  void *v735[4];
  __int128 v736;
  uint64_t *v737;
  _QWORD *v738;
  uint64_t v739;
  const void **v740;
  uint64_t v741;
  uint64_t v742;
  char **v743;
  char *v744;
  uint64_t v745;
  __int128 v746;
  __int128 v747;
  _QWORD v748[10];

  v748[7] = *MEMORY[0x24BDAC8D0];
  if (!*a1)
  {
    v672 = "usdMtlx/reader.cpp";
    v673 = "UsdMtlxRead";
    v674 = 2616;
    v675 = "void pxrInternal__aapl__pxrReserved__::UsdMtlxRead(const MaterialX::ConstDocumentPtr &, const UsdStagePtr &, "
           "const SdfPath &, const SdfPath &)";
    v676[0] = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v672, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid MaterialX document");
    return;
  }
  v6 = sub_20C369024(a2);
  if (!(v7 & 1 | (unint64_t)v6))
  {
    v672 = "usdMtlx/reader.cpp";
    v673 = "UsdMtlxRead";
    v674 = 2620;
    v675 = "void pxrInternal__aapl__pxrReserved__::UsdMtlxRead(const MaterialX::ConstDocumentPtr &, const UsdStagePtr &, "
           "const SdfPath &, const SdfPath &)";
    v676[0] = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v672, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    return;
  }
  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(a3))
  {
    v672 = "usdMtlx/reader.cpp";
    v673 = "UsdMtlxRead";
    v674 = 2624;
    v675 = "void pxrInternal__aapl__pxrReserved__::UsdMtlxRead(const MaterialX::ConstDocumentPtr &, const UsdStagePtr &, "
           "const SdfPath &, const SdfPath &)";
    v676[0] = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v672, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid internal prim path");
    return;
  }
  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(a4))
  {
    v672 = "usdMtlx/reader.cpp";
    v673 = "UsdMtlxRead";
    v674 = 2628;
    v675 = "void pxrInternal__aapl__pxrReserved__::UsdMtlxRead(const MaterialX::ConstDocumentPtr &, const UsdStagePtr &, "
           "const SdfPath &, const SdfPath &)";
    v676[0] = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v672, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid external prim path");
    return;
  }
  sub_20C7C0A20((uint64_t)&v672, a2, a3);
  sub_20C7C0F74();
  sub_20C7C0FDC((__int128 **)v735, (uint64_t)a1, (unsigned __int8 *)&qword_25498CF80);
  if (*((char *)v735[0] + 23) < 0)
  {
    if (!*((_QWORD *)v735[0] + 1))
      goto LABEL_16;
  }
  else if (!*((_BYTE *)v735[0] + 23))
  {
    goto LABEL_16;
  }
  v8 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20C348E08(a2);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v726);
  pxrInternal__aapl__pxrReserved__::UsdStage::SetColorManagementSystem(v8, (const pxrInternal__aapl__pxrReserved__::TfToken *)v726);
  if (((uint64_t)v726[0] & 7) != 0)
  {
    v9 = (unsigned int *)((unint64_t)v726[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
LABEL_16:
  sub_20C7C0F74();
  sub_20C7C0FDC((__int128 **)v726, (uint64_t)a1, (unsigned __int8 *)&qword_25498CF98);
  if ((*((char *)v726[0] + 23) & 0x80000000) == 0)
  {
    if (!*((_BYTE *)v726[0] + 23))
      goto LABEL_24;
LABEL_20:
    v11 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20C348E08(a2);
    pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(v735, v726[0]);
    pxrInternal__aapl__pxrReserved__::UsdStage::SetColorConfiguration(v11, (const pxrInternal__aapl__pxrReserved__::SdfAssetPath *)v735);
    if (SHIBYTE(v736) < 0)
      operator delete(v735[3]);
    if (SHIBYTE(v735[2]) < 0)
      operator delete(v735[0]);
    goto LABEL_24;
  }
  if (*((_QWORD *)v726[0] + 1))
    goto LABEL_20;
LABEL_24:
  v12 = sub_20C7B0904(*a1);
  v13 = *((unsigned __int8 *)v12 + 23);
  if ((v13 & 0x80u) != 0)
    v13 = *((_QWORD *)v12 + 1);
  if (v13)
  {
    v726[0] = 0;
    v735[1] = &off_24C520700;
    sub_20BF77444((unsigned int **)v735, (uint64_t)v12);
    v14 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v14)
      v14 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if ((*((_QWORD *)v14 + 5) & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((*((_QWORD *)v14 + 5) & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v14);
    v16 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]((pxrInternal__aapl__pxrReserved__::VtDictionary *)v726, (__int128 *)EmptyString);
    sub_20BF4B5D8(v16, v735);
    sub_20BF4C2D8((uint64_t)v735);
    v17 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20C348E08(a2);
    v18 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v18)
      v18 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    sub_20C43D588(v17, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v18 + 80), (const void ****)v726);
    sub_20BF49F14((_QWORD ***)v726, 0);
  }
  v19 = (std::__shared_weak_count *)a1[1];
  v671[0] = *a1;
  v671[1] = (uint64_t)v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
  }
  sub_20C7C103C(v671, (uint64_t)&v672);
  if (v19)
  {
    v22 = (unint64_t *)&v19->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v25 = *a1;
  v24 = a1[1];
  v669 = *a1;
  v670 = (std::__shared_weak_count *)v24;
  if (v24)
  {
    v26 = (unint64_t *)(v24 + 8);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  v629 = a3;
  v635 = a2;
  sub_20C7CC094(v25, (uint64_t)&v697);
  v28 = (uint64_t *)v697;
  v29 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v698;
  if (v697 != v698)
  {
    do
    {
      if (sub_20C7C289C(0))
      {
        v32 = (_QWORD *)(*v28 + 48);
        if (*(char *)(*v28 + 71) < 0)
          v32 = (_QWORD *)*v32;
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Adding mtlxMaterial '%s'\n", v30, v31, v32);
      }
      v33 = (unint64_t *)v28[1];
      v720[0] = (void *)*v28;
      v720[1] = v33;
      if (v33)
      {
        v34 = v33 + 1;
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
      }
      if (!v694
        || (*((_BYTE *)v694 + 57) & 8) != 0
        || !(*(unsigned int (**)(uint64_t *))(v693 + 32))(&v693)
        || (v735[0] = "usdMtlx/reader.cpp",
            v735[1] = "BeginMaterial",
            v735[2] = (void *)1484,
            v735[3] = "UsdShadeMaterial pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_Context::BeginMaterial("
                      "const mx::ConstNodePtr &)",
            LOBYTE(v736) = 0,
            (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v735, "!_usdMaterial", 0) & 1) != 0))
      {
        v36 = v720[0];
        v37 = (std::__shared_weak_count *)v720[1];
        v735[0] = v720[0];
        v735[1] = v720[1];
        if (v720[1])
        {
          v38 = (unint64_t *)((char *)v720[1] + 8);
          do
            v39 = __ldxr(v38);
          while (__stxr(v39 + 1, v38));
        }
        if (v36)
          sub_20C7C3084((uint64_t)v36 + 48, (uint64_t)v726);
        else
          v726[0] = 0;
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)v676, (const pxrInternal__aapl__pxrReserved__::TfToken *)v726, &v660);
        if (((uint64_t)v726[0] & 7) != 0)
        {
          v40 = (unsigned int *)((unint64_t)v726[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v41 = __ldxr(v40);
          while (__stlxr(v41 - 2, v40));
          v37 = (std::__shared_weak_count *)v735[1];
        }
        if (v37)
        {
          v42 = (unint64_t *)&v37->__shared_owners_;
          do
            v43 = __ldaxr(v42);
          while (__stlxr(v43 - 1, v42));
          if (!v43)
          {
            ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
            std::__shared_weak_count::__release_weak(v37);
          }
        }
        pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::Define((uint64_t *)&v672, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v660, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v726);
        if (v726[1]
          && (*((_BYTE *)v726[1] + 57) & 8) == 0
          && (*((unsigned int (**)(void **))v726[0] + 4))(v726))
        {
          sub_20C35C4F8((uint64_t)v735, (uint64_t *)&v726[1], v727);
          v44 = (std::__shared_weak_count *)v720[1];
          v746 = *(_OWORD *)v720;
          if (v720[1])
          {
            v45 = (unint64_t *)((char *)v720[1] + 8);
            do
              v46 = __ldxr(v45);
            while (__stxr(v46 + 1, v45));
          }
          sub_20C7C5A74((uint64_t)v735, (uint64_t)&v746);
          if (v44)
          {
            v47 = (unint64_t *)&v44->__shared_owners_;
            do
              v48 = __ldaxr(v47);
            while (__stlxr(v48 - 1, v47));
            if (!v48)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          if (((uint64_t)v735[3] & 7) != 0)
          {
            v49 = (unsigned int *)((unint64_t)v735[3] & 0xFFFFFFFFFFFFFFF8);
            do
              v50 = __ldxr(v49);
            while (__stlxr(v50 - 2, v49));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v735[2] + 1);
          sub_20BFD265C(&v735[2]);
          if (v735[1])
            sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v735[1]);
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v735, (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v726);
          v735[3] = 0;
          v735[0] = off_24C53D618;
          *(_QWORD *)&v746 = (char *)v720[0] + 48;
          v51 = sub_20C7CC3AC(&v688, (const void **)v720[0] + 6, (uint64_t)&unk_20CAC184C, (__int128 **)&v746);
          sub_20BDDC0E4(&v746, "");
          v715.__r_.__value_.__r.__words[0] = (std::string::size_type)&v746;
          v52 = sub_20C7CC52C((uint64_t **)v51 + 7, (const void **)&v746, (uint64_t)&unk_20CAC184C, (__int128 **)&v715);
          v53 = v52;
          v54 = v735[1];
          if (v735[1])
          {
            v55 = (unint64_t *)((char *)v735[1] + 48);
            do
              v56 = __ldxr(v55);
            while (__stxr(v56 + 1, v55));
          }
          v57 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v52[8];
          v53[8] = (uint64_t)v54;
          if (v57)
            sub_20C35C614(v57);
          sub_20C01A074((int *)v53 + 18, &v735[2]);
          sub_20C01A0C8((int *)v53 + 19, (_DWORD *)&v735[2] + 1);
          sub_20BF32220(v53 + 10, &v735[3]);
          if (SBYTE7(v747) < 0)
            operator delete((void *)v746);
          pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v735);
          sub_20BDE881C(&v691, (uint64_t *)v720);
          v58 = (unint64_t *)v726[1];
          if (v726[1])
          {
            v59 = (unint64_t *)((char *)v726[1] + 48);
            do
              v60 = __ldxr(v59);
            while (__stxr(v60 + 1, v59));
          }
          v61 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v694;
          v694 = v58;
          if (v61)
            sub_20C35C614(v61);
          sub_20C01A074(&v695, v727);
          sub_20C01A0C8(&v696, (_DWORD *)v727 + 1);
        }
        pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::~UsdShadeMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)v726);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v660.__r_.__value_.__r.__words + 1);
        sub_20BFD265C(&v660);
      }
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v717, (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v693);
      *(_QWORD *)v717 = off_24C53D820;
      v63 = (std::__shared_weak_count *)v720[1];
      if (v720[1])
      {
        v64 = (unint64_t *)((char *)v720[1] + 8);
        do
          v65 = __ldaxr(v64);
        while (__stlxr(v65 - 1, v64));
        if (!v65)
        {
          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
          std::__shared_weak_count::__release_weak(v63);
        }
      }
      if (*(_QWORD *)&v717[8]
        && (*(_BYTE *)(*(_QWORD *)&v717[8] + 57) & 8) == 0
        && (*(unsigned int (**)(pxrInternal__aapl__pxrReserved__::UsdTyped *))(*(_QWORD *)v717 + 32))((pxrInternal__aapl__pxrReserved__::UsdTyped *)v717))
      {
        sub_20BDDC0E4(v735, off_25473DF20[0]);
        sub_20C7CC798((uint64_t *)&v672, v28, (unsigned __int8 *)v735);
        if (SHIBYTE(v735[2]) < 0)
          operator delete(v735[0]);
        sub_20BDDC0E4(v735, off_25473DF30[0]);
        sub_20C7CC798((uint64_t *)&v672, v28, (unsigned __int8 *)v735);
        if (SHIBYTE(v735[2]) < 0)
          operator delete(v735[0]);
        sub_20BDDC0E4(v735, off_25473DF28[0]);
        sub_20C7CC798((uint64_t *)&v672, v28, (unsigned __int8 *)v735);
        if (SHIBYTE(v735[2]) < 0)
          operator delete(v735[0]);
        sub_20BDDC0E4(v735, off_25473DF38[0]);
        sub_20C7CC798((uint64_t *)&v672, v28, (unsigned __int8 *)v735);
        if (SHIBYTE(v735[2]) < 0)
          operator delete(v735[0]);
        if (v694
          && (*((_BYTE *)v694 + 57) & 8) == 0
          && ((*(uint64_t (**)(uint64_t *))(v693 + 32))(&v693) & 1) != 0
          || (v735[0] = "usdMtlx/reader.cpp",
              v735[1] = "EndMaterial",
              v735[2] = (void *)1505,
              v735[3] = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_Context::EndMaterial()",
              LOBYTE(v736) = 0,
              (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v735, "_usdMaterial", 0) & 1) != 0))
        {
          v735[0] = (void *)(v691 + 48);
          v66 = sub_20C7A663C(&v682, (const void **)(v691 + 48), (uint64_t)&unk_20CAC184C, (__int128 **)v735);
          v67 = v66;
          v68 = v694;
          if (v694)
          {
            v69 = v694 + 6;
            do
              v70 = __ldxr(v69);
            while (__stxr(v70 + 1, v69));
          }
          v71 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v66[8];
          v67[8] = (uint64_t)v68;
          if (v71)
            sub_20C35C614(v71);
          sub_20C01A074((int *)v67 + 18, &v695);
          sub_20C01A0C8((int *)v67 + 19, &v696);
          v72 = v692;
          v691 = 0;
          v692 = 0;
          if (v72)
          {
            v73 = (unint64_t *)&v72->__shared_owners_;
            do
              v74 = __ldaxr(v73);
            while (__stlxr(v74 - 1, v73));
            if (!v74)
            {
              ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
              std::__shared_weak_count::__release_weak(v72);
            }
          }
          LODWORD(v735[0]) = 1;
          v735[1] = 0;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v735[2]);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v735[2] + 1);
          v735[3] = 0;
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v726, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v735);
          v726[0] = off_24C53D820;
          v75 = (unint64_t *)v726[1];
          if (v726[1])
          {
            v76 = (unint64_t *)((char *)v726[1] + 48);
            do
              v77 = __ldxr(v76);
            while (__stxr(v77 + 1, v76));
          }
          v78 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v694;
          v694 = v75;
          if (v78)
            sub_20C35C614(v78);
          sub_20C01A074(&v695, v727);
          sub_20C01A0C8(&v696, (_DWORD *)v727 + 1);
          pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::~UsdShadeMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)v726);
          if (((uint64_t)v735[3] & 7) != 0)
          {
            v79 = (unsigned int *)((unint64_t)v735[3] & 0xFFFFFFFFFFFFFFF8);
            do
              v80 = __ldxr(v79);
            while (__stlxr(v80 - 2, v79));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v735[2] + 1);
          sub_20BFD265C(&v735[2]);
          if (v735[1])
            sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v735[1]);
        }
      }
      else
      {
        v735[0] = "usdMtlx/reader.cpp";
        v735[1] = "ReadMaterials";
        v735[2] = (void *)2386;
        v735[3] = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::ReadMaterials(mx::ConstDocumentPtr, _Context &)";
        LOBYTE(v736) = 0;
        v81 = (_QWORD *)(*v28 + 48);
        if (*(char *)(*v28 + 71) < 0)
          v81 = (_QWORD *)*v81;
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v735, (pxrInternal__aapl__pxrReserved__ *)"Failed to create material '%s'", v62, v81);
      }
      pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::~UsdShadeMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)v717);
      v28 += 2;
    }
    while (v28 != (uint64_t *)v29);
    v25 = v669;
  }
  v735[0] = &v697;
  sub_20BDE9EB0((void ***)v735);
  sub_20C7CC094(v25, (uint64_t)&v746);
  v83 = *((_QWORD *)&v746 + 1);
  for (i = v746; i != v83; i += 16)
  {
    sub_20C7CC10C((uint64_t)&v672, (const void **)(*(_QWORD *)i + 48), (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v697);
    if (v698 && (*((_BYTE *)v698 + 57) & 8) == 0 && ((unsigned int (*)(_QWORD))v697[4])(&v697))
    {
      sub_20C7C0F74();
      sub_20C7C0FDC((__int128 **)v720, i, (unsigned __int8 *)&qword_25498D0B8);
      if (*((char *)v720[0] + 23) < 0)
      {
        if (*((_QWORD *)v720[0] + 1))
        {
LABEL_158:
          sub_20C7CC10C((uint64_t)&v672, (const void **)v720[0], (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v717);
          if (*(_QWORD *)&v717[8]
            && (*(_BYTE *)(*(_QWORD *)&v717[8] + 57) & 8) == 0
            && (*(unsigned int (**)(_BYTE *))(*(_QWORD *)v717 + 32))(v717))
          {
            sub_20C35C4F8((uint64_t)v726, (uint64_t *)&v698, &v699);
            pxrInternal__aapl__pxrReserved__::UsdPrim::GetSpecializes((pxrInternal__aapl__pxrReserved__::UsdPrim *)v726, (uint64_t)v735);
            sub_20C3630C0((uint64_t)v717, &v715);
            pxrInternal__aapl__pxrReserved__::UsdSpecializes::AddSpecialize(v735, &v715, 1);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v715.__r_.__value_.__r.__words + 1);
            sub_20BFD265C(&v715);
            if (((uint64_t)v735[3] & 7) != 0)
            {
              v85 = (unsigned int *)((unint64_t)v735[3] & 0xFFFFFFFFFFFFFFF8);
              do
                v86 = __ldxr(v85);
              while (__stlxr(v86 - 2, v85));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v735[2] + 1);
            sub_20BFD265C(&v735[2]);
            if (v735[1])
              sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v735[1]);
            if ((BYTE8(v727[0]) & 7) != 0)
            {
              v87 = (unsigned int *)(*((_QWORD *)&v727[0] + 1) & 0xFFFFFFFFFFFFFFF8);
              do
                v88 = __ldxr(v87);
              while (__stlxr(v88 - 2, v87));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v727 + 1);
            sub_20BFD265C(v727);
            if (v726[1])
              sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v726[1]);
            if (sub_20C7C289C(0))
            {
              v91 = (_QWORD *)(*(_QWORD *)i + 48);
              if (*(char *)(*(_QWORD *)i + 71) < 0)
                v91 = (_QWORD *)*v91;
              v92 = v720[0];
              if (*((char *)v720[0] + 23) < 0)
                v92 = *(void **)v720[0];
              pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Material '%s' inherit from  '%s'\n", v89, v90, v91, v92);
            }
          }
          else
          {
            v735[0] = "usdMtlx/reader.cpp";
            v735[1] = "ReadMaterials";
            v735[2] = (void *)2406;
            v735[3] = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::ReadMaterials(mx::ConstDocumentPtr, _Context &)";
            LOBYTE(v736) = 0;
            v93 = (_QWORD *)(*(_QWORD *)i + 48);
            if (*(char *)(*(_QWORD *)i + 71) < 0)
              v93 = (_QWORD *)*v93;
            v94 = v720[0];
            if (*((char *)v720[0] + 23) < 0)
              v94 = *(void **)v720[0];
            pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v735, (pxrInternal__aapl__pxrReserved__ *)"Material '%s' attempted to inherit from unknown material '%s'", v84, v93, v94);
          }
          pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::~UsdShadeMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)v717);
        }
      }
      else if (*((_BYTE *)v720[0] + 23))
      {
        goto LABEL_158;
      }
    }
    pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::~UsdShadeMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)&v697);
  }
  v735[0] = &v746;
  sub_20BDE9EB0((void ***)v735);
  v95 = v670;
  if (v670)
  {
    v96 = (unint64_t *)&v670->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomGetFallbackUpAxis((unsigned int **)v735);
  pxrInternal__aapl__pxrReserved__::UsdGeomSetStageUpAxis(a2, v735);
  if (((uint64_t)v735[0] & 7) != 0)
  {
    v98 = (unsigned int *)((unint64_t)v735[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v99 = __ldxr(v98);
    while (__stlxr(v99 - 2, v98));
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomSetStageMetersPerUnit(a2, 0.01);
  v100 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20C348E08(a2);
  v101 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a2);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v101, a3, (uint64_t)v735);
  pxrInternal__aapl__pxrReserved__::UsdStage::SetDefaultPrim(v100, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v735);
  if (((uint64_t)v735[3] & 7) != 0)
  {
    v102 = (unsigned int *)((unint64_t)v735[3] & 0xFFFFFFFFFFFFFFF8);
    do
      v103 = __ldxr(v102);
    while (__stlxr(v103 - 2, v102));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v735[2] + 1);
  sub_20BFD265C(&v735[2]);
  if (v735[1])
    sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v735[1]);
  v104 = *a1;
  v105 = sub_20C957390();
  sub_20C7D1160(v104, (unsigned __int8 *)v105, (uint64_t)v735);
  v106 = v735[0];
  v107 = v735[1];
  v726[0] = v735;
  sub_20BDE9EB0((void ***)v726);
  if (v106 != v107)
  {
    v109 = *a1;
    v108 = (std::__shared_weak_count *)a1[1];
    v660.__r_.__value_.__r.__words[0] = *a1;
    v660.__r_.__value_.__l.__size_ = (std::string::size_type)v108;
    if (v108)
    {
      v110 = (unint64_t *)&v108->__shared_owners_;
      do
        v111 = __ldxr(v110);
      while (__stxr(v111 + 1, v110));
    }
    sub_20C7C0F74();
    v726[1] = 0;
    v726[0] = 0;
    *(_QWORD *)&v727[0] = 0;
    v112 = *(__int128 **)(v109 + 136);
    v113 = *(__int128 **)(v109 + 144);
    if (v112 == v113)
      goto LABEL_285;
    while (1)
    {
      v114 = *(unsigned __int8 *)(*(_QWORD *)v112 + 47);
      if ((v114 & 0x80u) == 0)
        v115 = *(unsigned __int8 *)(*(_QWORD *)v112 + 47);
      else
        v115 = *(_QWORD *)(*(_QWORD *)v112 + 32);
      v116 = byte_25498D30F;
      if (byte_25498D30F < 0)
        v116 = qword_25498D300;
      if (v115 != v116)
        goto LABEL_218;
      v117 = (const void **)(*(_QWORD *)v112 + 24);
      v118 = byte_25498D30F >= 0 ? &qword_25498D2F8 : (uint64_t *)qword_25498D2F8;
      if ((v114 & 0x80) == 0)
        break;
      if (!memcmp(*v117, v118, *(_QWORD *)(*(_QWORD *)v112 + 32)))
        goto LABEL_217;
LABEL_218:
      if (++v112 == v113)
      {
        v119 = v726[0];
        v644 = v726[1];
        if (v726[0] != v726[1])
        {
          while (1)
          {
            *((_QWORD *)&v746 + 1) = 0;
            *(_QWORD *)&v747 = 0;
            *(_QWORD *)&v746 = (char *)&v746 + 8;
            sub_20C7C0F74();
            v698 = 0;
            v697 = 0;
            v699 = 0;
            v646 = v119;
            v120 = *(__int128 **)(*v119 + 136);
            v121 = *(__int128 **)(*v119 + 144);
            if (v120 == v121)
              goto LABEL_272;
            do
            {
              v122 = *(unsigned __int8 *)(*(_QWORD *)v120 + 47);
              if ((v122 & 0x80u) == 0)
                v123 = *(unsigned __int8 *)(*(_QWORD *)v120 + 47);
              else
                v123 = *(_QWORD *)(*(_QWORD *)v120 + 32);
              v124 = byte_25498D2DF;
              if (byte_25498D2DF < 0)
                v124 = qword_25498D2D0;
              if (v123 == v124)
              {
                v125 = (const void **)(*(_QWORD *)v120 + 24);
                if (byte_25498D2DF >= 0)
                  v126 = &qword_25498D2C8;
                else
                  v126 = (uint64_t *)qword_25498D2C8;
                if ((v122 & 0x80) != 0)
                {
                  if (memcmp(*v125, v126, *(_QWORD *)(*(_QWORD *)v120 + 32)))
                    goto LABEL_237;
LABEL_236:
                  sub_20C7D1314((char **)&v697, v120);
                  goto LABEL_237;
                }
                if (!*(_BYTE *)(*(_QWORD *)v120 + 47))
                  goto LABEL_236;
                while (*(unsigned __int8 *)v125 == *(unsigned __int8 *)v126)
                {
                  v125 = (const void **)((char *)v125 + 1);
                  v126 = (uint64_t *)((char *)v126 + 1);
                  if (!--v122)
                    goto LABEL_236;
                }
              }
LABEL_237:
              ++v120;
            }
            while (v120 != v121);
            v127 = v697;
            v128 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v698;
            while (v127 != (void (**)(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *__hidden))v128)
            {
              *(_OWORD *)&v717[8] = 0uLL;
              *(_QWORD *)v717 = &v717[8];
              v720[1] = 0;
              v720[0] = 0;
              v721 = 0;
              v129 = (uint64_t *)*((_QWORD *)*v127 + 17);
              v130 = (uint64_t *)*((_QWORD *)*v127 + 18);
              if (v129 != v130)
              {
                do
                {
                  sub_20C93AAA8(*v129, &v715);
                  if (v715.__r_.__value_.__r.__words[0])
                  {
                    v131 = v720[1];
                    if (v720[1] >= v721)
                    {
                      v133 = ((char *)v720[1] - (char *)v720[0]) >> 4;
                      v134 = v133 + 1;
                      if ((unint64_t)(v133 + 1) >> 60)
                        sub_20BDDF694();
                      v135 = v721 - (char *)v720[0];
                      if ((v721 - (char *)v720[0]) >> 3 > v134)
                        v134 = v135 >> 3;
                      if ((unint64_t)v135 >= 0x7FFFFFFFFFFFFFF0)
                        v136 = 0xFFFFFFFFFFFFFFFLL;
                      else
                        v136 = v134;
                      *(_QWORD *)&v736 = &v721;
                      v137 = (char *)sub_20BDEA2F0((uint64_t)&v721, v136);
                      v139 = &v137[16 * v133];
                      *(_OWORD *)v139 = *(_OWORD *)&v715.__r_.__value_.__l.__data_;
                      *(_OWORD *)&v715.__r_.__value_.__l.__data_ = 0uLL;
                      v140 = v720[1];
                      v141 = v720[0];
                      if (v720[1] == v720[0])
                      {
                        v144 = vdupq_n_s64((unint64_t)v720[1]);
                        v142 = &v137[16 * v133];
                      }
                      else
                      {
                        v142 = &v137[16 * v133];
                        do
                        {
                          v143 = *((_OWORD *)v140 - 1);
                          v140 -= 2;
                          *((_OWORD *)v142 - 1) = v143;
                          v142 -= 16;
                          *v140 = 0;
                          v140[1] = 0;
                        }
                        while (v140 != v141);
                        v144 = *(int64x2_t *)v720;
                      }
                      v132 = v139 + 16;
                      v720[0] = v142;
                      v720[1] = v139 + 16;
                      *(int64x2_t *)&v735[1] = v144;
                      v145 = v721;
                      v721 = &v137[16 * v138];
                      v735[3] = v145;
                      v735[0] = (void *)v144.i64[0];
                      sub_20BDEA324((uint64_t)v735);
                    }
                    else
                    {
                      *(_QWORD *)v720[1] = v715.__r_.__value_.__r.__words[0];
                      v131[1] = v715.__r_.__value_.__l.__size_;
                      *(_OWORD *)&v715.__r_.__value_.__l.__data_ = 0uLL;
                      v132 = v131 + 2;
                    }
                    v720[1] = v132;
                  }
                  size = (std::__shared_weak_count *)v715.__r_.__value_.__l.__size_;
                  if (v715.__r_.__value_.__l.__size_)
                  {
                    v147 = (unint64_t *)(v715.__r_.__value_.__l.__size_ + 8);
                    do
                      v148 = __ldaxr(v147);
                    while (__stlxr(v148 - 1, v147));
                    if (!v148)
                    {
                      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                      std::__shared_weak_count::__release_weak(size);
                    }
                  }
                  v129 += 2;
                }
                while (v129 != v130);
                v149 = (uint64_t *)v720[0];
                v150 = (uint64_t *)v720[1];
                while (v149 != v150)
                {
                  v715.__r_.__value_.__r.__words[0] = *v149 + 48;
                  v151 = sub_20C7D1458((uint64_t **)v717, (const void **)v715.__r_.__value_.__l.__data_, (uint64_t)&unk_20CAC184C, (__int128 **)&v715);
                  sub_20BDE881C(v151 + 7, v149);
                  v149 += 2;
                }
              }
              v735[0] = v720;
              sub_20BDE9EB0((void ***)v735);
              if (*(_QWORD *)&v717[16])
              {
                v735[0] = (char *)*v127 + 48;
                v152 = sub_20C7D1590((uint64_t **)&v746, (const void **)v735[0], (uint64_t)&unk_20CAC184C, (__int128 **)v735);
                v153 = v152 + 8;
                v154 = v152 + 7;
                sub_20BE78E5C((uint64_t)(v152 + 7), (_QWORD *)v152[8]);
                v155 = *(_QWORD **)&v717[8];
                *(v153 - 1) = *(_QWORD *)v717;
                *v153 = v155;
                v156 = *(_QWORD *)&v717[16];
                v153[1] = *(_QWORD *)&v717[16];
                if (v156)
                {
                  v155[2] = v153;
                  *(_QWORD *)v717 = &v717[8];
                  *(_OWORD *)&v717[8] = 0uLL;
                  v155 = 0;
                }
                else
                {
                  *v154 = v153;
                }
              }
              else
              {
                v155 = *(_QWORD **)&v717[8];
              }
              sub_20BE78E5C((uint64_t)v717, v155);
              v127 += 2;
            }
LABEL_272:
            v735[0] = &v697;
            sub_20BDE9EB0((void ***)v735);
            v157 = v646;
            if ((_QWORD)v747)
            {
              v158 = *v646;
              v159 = (_QWORD *)(*v646 + 48);
              v735[0] = v159;
              v160 = sub_20C7D1710(&v677, (const void **)v159, (uint64_t)&unk_20CAC184C, (__int128 **)v735);
              v161 = v160 + 8;
              v162 = v160 + 7;
              sub_20C7C1F9C((uint64_t)(v160 + 7), (_QWORD *)v160[8]);
              v163 = *((_QWORD *)&v746 + 1);
              *(v161 - 1) = v746;
              *v161 = v163;
              v164 = v747;
              v161[1] = v747;
              if (v164)
              {
                *(_QWORD *)(v163 + 16) = v161;
                *(_QWORD *)&v746 = (char *)&v746 + 8;
                *((_QWORD *)&v746 + 1) = 0;
                *(_QWORD *)&v747 = 0;
              }
              else
              {
                *v162 = v161;
              }
              v165 = __dst;
              v157 = v646;
              if ((unint64_t)__dst >= v681)
              {
                v167 = (void *)sub_20BE4EE50((uint64_t *)&__str, (__int128 *)v159);
              }
              else
              {
                if (*(char *)(v158 + 71) < 0)
                {
                  sub_20BDDBFAC(__dst, *(void **)(v158 + 48), *(_QWORD *)(v158 + 56));
                }
                else
                {
                  v166 = *(_OWORD *)v159;
                  *((_QWORD *)__dst + 2) = v159[2];
                  *v165 = v166;
                }
                v167 = (char *)v165 + 24;
              }
              __dst = v167;
            }
            sub_20C7C1F9C((uint64_t)&v746, *((_QWORD **)&v746 + 1));
            v119 = v157 + 2;
            if (v119 == v644)
            {
              v108 = (std::__shared_weak_count *)v660.__r_.__value_.__l.__size_;
              break;
            }
          }
        }
LABEL_285:
        v735[0] = v726;
        sub_20BDE9EB0((void ***)v735);
        if (v108)
        {
          v168 = (unint64_t *)&v108->__shared_owners_;
          do
            v169 = __ldaxr(v168);
          while (__stlxr(v169 - 1, v168));
          if (!v169)
          {
            ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
            std::__shared_weak_count::__release_weak(v108);
          }
        }
        v171 = *a1;
        v170 = a1[1];
        v667 = *a1;
        v668 = (std::__shared_weak_count *)v170;
        if (v170)
        {
          v172 = (unint64_t *)(v170 + 8);
          do
            v173 = __ldxr(v172);
          while (__stxr(v173 + 1, v172));
        }
        v174 = sub_20C957390();
        sub_20C7D1890(v171, (unsigned __int8 *)v174, (uint64_t)v726);
        v627 = v726[0];
        v628 = v726[1];
        if (v726[0] != v726[1])
        {
          v175 = v726[0];
          do
          {
            v176 = v175[1];
            *(_QWORD *)&v746 = *v175;
            *((_QWORD *)&v746 + 1) = v176;
            if (v176)
            {
              v177 = (unint64_t *)(v176 + 8);
              do
                v178 = __ldxr(v177);
              while (__stxr(v178 + 1, v177));
            }
            v735[1] = 0;
            v735[2] = 0;
            v735[0] = &v735[1];
            sub_20C7D1A44((uint64_t)&v672, (unint64_t *)&v746, (uint64_t **)v735, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v717);
            sub_20C2162E8((uint64_t)v735, (_QWORD *)v735[1]);
            pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::~UsdCollectionAPI((pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)v717);
            v179 = (std::__shared_weak_count *)*((_QWORD *)&v746 + 1);
            if (*((_QWORD *)&v746 + 1))
            {
              v180 = (unint64_t *)(*((_QWORD *)&v746 + 1) + 8);
              do
                v181 = __ldaxr(v180);
              while (__stlxr(v181 - 1, v180));
              if (!v181)
              {
                ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
                std::__shared_weak_count::__release_weak(v179);
              }
            }
            v175 += 2;
          }
          while (v175 != v628);
          v171 = v667;
        }
        v735[0] = v726;
        sub_20BDE9EB0((void ***)v735);
        v182 = sub_20C957390();
        sub_20C7D1160(v171, (unsigned __int8 *)v182, (uint64_t)&v713);
        v183 = v713;
        v630 = v714;
        if (v713 != v714)
        {
          v184 = &v683;
          do
          {
            v637 = v183;
            v185 = *v183;
            v186 = sub_20C957390();
            sub_20C7D3D10(v185, (unsigned __int8 *)v186, (uint64_t)&v710);
            v187 = (uint64_t *)v710;
            v188 = v711;
            v643 = v711;
            while (v187 != (uint64_t *)v188)
            {
              v189 = v187[1];
              v708 = *v187;
              v709 = (std::__shared_weak_count *)v189;
              if (v189)
              {
                v190 = (unint64_t *)(v189 + 8);
                do
                  v191 = __ldxr(v190);
                while (__stxr(v191 + 1, v190));
              }
              LODWORD(v735[0]) = 1;
              v735[1] = 0;
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v735[2]);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v735[2] + 1);
              v735[3] = 0;
              v726[0] = 0;
              sub_20C37A850((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v746, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v735, (uint64_t *)v726);
              *(_QWORD *)&v746 = off_24C537740;
              if (((uint64_t)v726[0] & 7) != 0)
              {
                v192 = (unsigned int *)((unint64_t)v726[0] & 0xFFFFFFFFFFFFFFF8);
                do
                  v193 = __ldxr(v192);
                while (__stlxr(v193 - 2, v192));
              }
              if (((uint64_t)v735[3] & 7) != 0)
              {
                v194 = (unsigned int *)((unint64_t)v735[3] & 0xFFFFFFFFFFFFFFF8);
                do
                  v195 = __ldxr(v194);
                while (__stlxr(v195 - 2, v194));
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v735[2] + 1);
              sub_20BFD265C(&v735[2]);
              if (v735[1])
                sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v735[1]);
              sub_20C7C0F74();
              sub_20C7C0FDC((__int128 **)&v658, (uint64_t)&v708, (unsigned __int8 *)&qword_25498CFB0);
              if (*((char *)v658 + 23) < 0)
              {
                if (v658[1])
                {
LABEL_322:
                  v196 = (uint64_t *)sub_20BDEEBA4((uint64_t)v184, v658);
                  v197 = v196;
                  if (&v684 == v196)
                  {
                    v735[0] = "usdMtlx/reader.cpp";
                    v735[1] = "AddGeometryReference";
                    v735[2] = (void *)1742;
                    v735[3] = "UsdCollectionAPI pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_Context::AddGeo"
                              "metryReference(const mx::ConstGeomElementPtr &)";
                    LOBYTE(v736) = 0;
                    v221 = v658;
                    if (*((char *)v658 + 23) < 0)
                      v221 = (const void **)*v658;
                    v698 = 0;
                    v697 = 0;
                    sub_20C93BC54(v708, &v697, (uint64_t)v726);
                    v223 = v726;
                    if (SBYTE7(v727[0]) < 0)
                      v223 = (void **)v726[0];
                    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v735, (pxrInternal__aapl__pxrReserved__ *)"Unknown collection '%s' in %s", v222, v221, v223);
                    if (SBYTE7(v727[0]) < 0)
                      operator delete(v726[0]);
                    v224 = (std::__shared_weak_count *)v698;
                    if (v698)
                    {
                      v225 = (unint64_t *)(v698 + 1);
                      do
                        v226 = __ldaxr(v225);
                      while (__stlxr(v226 - 1, v225));
                      if (!v226)
                      {
                        ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
                        std::__shared_weak_count::__release_weak(v224);
                      }
                    }
                  }
                  else
                  {
                    v198 = v196[8];
                    if (v198)
                    {
                      v199 = (unint64_t *)(v198 + 48);
                      do
                        v200 = __ldxr(v199);
                      while (__stxr(v200 + 1, v199));
                    }
                    v201 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)*((_QWORD *)&v746 + 1);
                    *((_QWORD *)&v746 + 1) = v198;
                    if (v201)
                      sub_20C35C614(v201);
                    sub_20C01A074((int *)&v747, (_DWORD *)v197 + 18);
                    sub_20C01A0C8((int *)&v747 + 1, (_DWORD *)v197 + 19);
                    sub_20BF32220((_QWORD *)&v747 + 1, v197 + 10);
                  }
                  goto LABEL_432;
                }
              }
              else if (*((_BYTE *)v658 + 23))
              {
                goto LABEL_322;
              }
              sub_20C7C0F74();
              sub_20C7C0FDC((__int128 **)&v706, (uint64_t)&v708, (unsigned __int8 *)&qword_25498D058);
              if (SHIBYTE(v706->__r_.__value_.__r.__words[2]) < 0)
              {
                if (!v706->__r_.__value_.__l.__size_)
                {
LABEL_405:
                  LODWORD(v735[0]) = 1;
                  v735[1] = 0;
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v735[2]);
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v735[2] + 1);
                  v735[3] = 0;
                  v726[0] = 0;
                  sub_20C37A850((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v697, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v735, (uint64_t *)v726);
                  v697 = off_24C537740;
                  if (((uint64_t)v726[0] & 7) != 0)
                  {
                    v249 = (unsigned int *)((unint64_t)v726[0] & 0xFFFFFFFFFFFFFFF8);
                    do
                      v250 = __ldxr(v249);
                    while (__stlxr(v250 - 2, v249));
                  }
                  if (((uint64_t)v735[3] & 7) != 0)
                  {
                    v251 = (unsigned int *)((unint64_t)v735[3] & 0xFFFFFFFFFFFFFFF8);
                    do
                      v252 = __ldxr(v251);
                    while (__stlxr(v252 - 2, v251));
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v735[2] + 1);
                  sub_20BFD265C(&v735[2]);
                  if (v735[1])
                    sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v735[1]);
                  goto LABEL_422;
                }
              }
              else if (!*((_BYTE *)&v706->__r_.__value_.__s + 23))
              {
                goto LABEL_405;
              }
              pxrInternal__aapl__pxrReserved__::UsdMtlxSplitStringArray(v706, (uint64_t *)&v715);
              v202 = 126
                   - 2
                   * __clz(0xAAAAAAAAAAAAAAABLL* ((uint64_t)(v715.__r_.__value_.__l.__size_ - v715.__r_.__value_.__r.__words[0]) >> 3));
              if (v715.__r_.__value_.__l.__size_ == v715.__r_.__value_.__r.__words[0])
                v203 = 0;
              else
                v203 = v202;
              sub_20BEDAFAC((uint64_t)v715.__r_.__value_.__l.__data_, (const void **)v715.__r_.__value_.__l.__size_, (uint64_t)v726, v203, 1);
              v204 = sub_20C104400((unsigned __int8 *)v715.__r_.__value_.__l.__data_, (unsigned __int8 *)v715.__r_.__value_.__l.__size_, (uint64_t)v726);
              sub_20C0F9EEC((uint64_t)&v715, (uint64_t)v204, (__int128 *)v715.__r_.__value_.__l.__size_);
              pxrInternal__aapl__pxrReserved__::TfStringJoin(",", (std::string **)&v715, &v660);
              LODWORD(v726[0]) = 1;
              v726[1] = 0;
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(v727);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v727 + 1);
              *((_QWORD *)&v727[0] + 1) = 0;
              v650[0] = 0;
              sub_20C37A850((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v735, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v726, (uint64_t *)v650);
              v735[0] = off_24C537740;
              v205 = sub_20C7D2AC8(&v685, (const void **)&v660.__r_.__value_.__l.__data_, (__int128 *)&v660, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v735);
              v207 = v206;
              pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::~UsdCollectionAPI((pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)v735);
              if (((uint64_t)v650[0] & 7) != 0)
              {
                v208 = (unsigned int *)((unint64_t)v650[0] & 0xFFFFFFFFFFFFFFF8);
                do
                  v209 = __ldxr(v208);
                while (__stlxr(v209 - 2, v208));
              }
              if ((BYTE8(v727[0]) & 7) != 0)
              {
                v210 = (unsigned int *)(*((_QWORD *)&v727[0] + 1) & 0xFFFFFFFFFFFFFFF8);
                do
                  v211 = __ldxr(v210);
                while (__stlxr(v211 - 2, v210));
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v727 + 1);
              sub_20BFD265C(v727);
              if (v726[1])
                sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v726[1]);
              if (v207)
              {
                v212 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08((uint64_t *)&v672);
                v726[0] = 0;
                pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v212, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v674, v726, (uint64_t)v735);
                if (((uint64_t)v726[0] & 7) != 0)
                {
                  v213 = (unsigned int *)((unint64_t)v726[0] & 0xFFFFFFFFFFFFFFF8);
                  do
                    v214 = __ldxr(v213);
                  while (__stlxr(v214 - 2, v213));
                }
                for (j = __val; ; j = ++__val)
                {
                  std::to_string(&v719, j);
                  v216 = std::string::insert(&v719, 0, "geom_");
                  v217 = *(_OWORD *)&v216->__r_.__value_.__l.__data_;
                  v651 = v216->__r_.__value_.__r.__words[2];
                  *(_OWORD *)v650 = v217;
                  v216->__r_.__value_.__l.__size_ = 0;
                  v216->__r_.__value_.__r.__words[2] = 0;
                  v216->__r_.__value_.__r.__words[0] = 0;
                  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v664);
                  sub_20C37A850((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v726, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v735, (uint64_t *)&v664);
                  v726[0] = off_24C537740;
                  if (!v726[1] || (*((_BYTE *)v726[1] + 57) & 8) != 0)
                    IsCompatible = 0;
                  else
                    IsCompatible = pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::_IsCompatible((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)v726);
                  pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::~UsdCollectionAPI((pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)v726);
                  if ((v664 & 7) != 0)
                  {
                    v219 = (unsigned int *)((unint64_t)v664 & 0xFFFFFFFFFFFFFFF8);
                    do
                      v220 = __ldxr(v219);
                    while (__stlxr(v220 - 2, v219));
                  }
                  if (SHIBYTE(v651) < 0)
                    operator delete(v650[0]);
                  if (SHIBYTE(v719.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v719.__r_.__value_.__l.__data_);
                  if (!IsCompatible)
                    break;
                }
                std::to_string(&v719, __val);
                v227 = std::string::insert(&v719, 0, "geom_");
                v228 = *(_OWORD *)&v227->__r_.__value_.__l.__data_;
                v651 = v227->__r_.__value_.__r.__words[2];
                *(_OWORD *)v650 = v228;
                v227->__r_.__value_.__l.__size_ = 0;
                v227->__r_.__value_.__r.__words[2] = 0;
                v227->__r_.__value_.__r.__words[0] = 0;
                pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v664);
                pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::Apply((pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)v735, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v664, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v726);
                v229 = v726[1];
                if (v726[1])
                {
                  v230 = (unint64_t *)((char *)v726[1] + 48);
                  do
                    v231 = __ldxr(v230);
                  while (__stxr(v231 + 1, v230));
                }
                v232 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v205[8];
                v205[8] = (uint64_t)v229;
                if (v232)
                  sub_20C35C614(v232);
                sub_20C01A074((int *)v205 + 18, v727);
                sub_20C01A0C8((int *)v205 + 19, (_DWORD *)v727 + 1);
                v233 = v205 + 10;
                sub_20BF32220(v205 + 10, (_QWORD *)v727 + 1);
                pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::~UsdCollectionAPI((pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)v726);
                if ((v664 & 7) != 0)
                {
                  v234 = (unsigned int *)((unint64_t)v664 & 0xFFFFFFFFFFFFFFF8);
                  do
                    v235 = __ldxr(v234);
                  while (__stlxr(v235 - 2, v234));
                }
                if (SHIBYTE(v651) < 0)
                  operator delete(v650[0]);
                if (SHIBYTE(v719.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v719.__r_.__value_.__l.__data_);
                v236 = v184;
                v237 = sub_20C7D238C(v708);
                v238 = (pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)(v205 + 7);
                v239 = v715.__r_.__value_.__l.__size_;
                v240 = (const void **)v715.__r_.__value_.__r.__words[0];
                if (v715.__r_.__value_.__r.__words[0] != v715.__r_.__value_.__l.__size_)
                {
                  v241 = (const void **)v237;
                  do
                  {
                    pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::CreateIncludesRel(v238, (pxrInternal__aapl__pxrReserved__::UsdRelationship *)v726);
                    pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier(v241, v240, (uint64_t)v650);
                    sub_20C7D24B8((uint64_t)&v672, (pxrInternal__aapl__pxrReserved__::UsdRelationship *)v726, (__int128 *)v650);
                    if (SHIBYTE(v651) < 0)
                      operator delete(v650[0]);
                    if ((BYTE8(v727[0]) & 7) != 0)
                    {
                      v242 = (unsigned int *)(*((_QWORD *)&v727[0] + 1) & 0xFFFFFFFFFFFFFFF8);
                      do
                        v243 = __ldxr(v242);
                      while (__stlxr(v243 - 2, v242));
                    }
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v727 + 1);
                    sub_20BFD265C(v727);
                    if (v726[1])
                      sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v726[1]);
                    v240 += 3;
                  }
                  while (v240 != (const void **)v239);
                }
                pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v697, v238);
                v244 = *v233;
                v697 = (void (**)(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *__hidden))&unk_24C537498;
                v700 = v244;
                v184 = v236;
                if ((v244 & 7) != 0)
                {
                  v245 = (unsigned int *)(v244 & 0xFFFFFFFFFFFFFFF8);
                  do
                    v246 = __ldxr(v245);
                  while (__stxr(v246 + 2, v245));
                  if ((v246 & 1) == 0)
                    v700 &= 0xFFFFFFFFFFFFFFF8;
                }
                v697 = off_24C537740;
                if (((uint64_t)v735[3] & 7) != 0)
                {
                  v247 = (unsigned int *)((unint64_t)v735[3] & 0xFFFFFFFFFFFFFFF8);
                  do
                    v248 = __ldxr(v247);
                  while (__stlxr(v248 - 2, v247));
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v735[2] + 1);
                sub_20BFD265C(&v735[2]);
                if (v735[1])
                  sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v735[1]);
              }
              else
              {
                pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v697, (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(v205 + 7));
                v253 = v205[10];
                v697 = (void (**)(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *__hidden))&unk_24C537498;
                v700 = v253;
                if ((v253 & 7) != 0)
                {
                  v254 = (unsigned int *)(v253 & 0xFFFFFFFFFFFFFFF8);
                  do
                    v255 = __ldxr(v254);
                  while (__stxr(v255 + 2, v254));
                  if ((v255 & 1) == 0)
                    v700 &= 0xFFFFFFFFFFFFFFF8;
                }
                v697 = off_24C537740;
              }
              if (SHIBYTE(v660.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v660.__r_.__value_.__l.__data_);
              v735[0] = &v715;
              sub_20BDE5038((void ***)v735);
LABEL_422:
              if (v698
                && (*((_BYTE *)v698 + 57) & 8) == 0
                && ((unsigned int (*)(pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *))v697[4])((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)&v697))
              {
                v256 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v698;
                if (v698)
                {
                  v257 = (unint64_t *)(v698 + 6);
                  do
                    v258 = __ldxr(v257);
                  while (__stxr(v258 + 1, v257));
                }
                v259 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)*((_QWORD *)&v746 + 1);
                *((_QWORD *)&v746 + 1) = v256;
                if (v259)
                  sub_20C35C614(v259);
                sub_20C01A074((int *)&v747, &v699);
                sub_20C01A0C8((int *)&v747 + 1, (_DWORD *)&v699 + 1);
                sub_20BF32220((_QWORD *)&v747 + 1, &v700);
              }
              pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::~UsdCollectionAPI((pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)&v697);
LABEL_432:
              v726[0] = &v708;
              v260 = sub_20C7D2C8C((uint64_t)&v686, (unint64_t *)&v708, (uint64_t)&unk_20CAC184C, (_QWORD **)v726);
              v261 = v260;
              v262 = *((_QWORD *)&v746 + 1);
              if (*((_QWORD *)&v746 + 1))
              {
                v263 = (unint64_t *)(*((_QWORD *)&v746 + 1) + 48);
                do
                  v264 = __ldxr(v263);
                while (__stxr(v264 + 1, v263));
              }
              v265 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v260[7];
              v261[7] = v262;
              if (v265)
                sub_20C35C614(v265);
              v266 = (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(v261 + 6);
              sub_20C01A074((int *)v261 + 16, &v747);
              sub_20C01A0C8((int *)v261 + 17, (_DWORD *)&v747 + 1);
              v267 = v261 + 9;
              sub_20BF32220(v267, (_QWORD *)&v747 + 1);
              pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v720, v266);
              v268 = *v267;
              v720[0] = &unk_24C537498;
              v722 = v268;
              if ((v268 & 7) != 0)
              {
                v269 = (unsigned int *)(v268 & 0xFFFFFFFFFFFFFFF8);
                do
                  v270 = __ldxr(v269);
                while (__stxr(v270 + 2, v269));
                if ((v270 & 1) == 0)
                  v722 &= 0xFFFFFFFFFFFFFFF8;
              }
              v720[0] = off_24C537740;
              pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::~UsdCollectionAPI((pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)&v746);
              pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::~UsdCollectionAPI((pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)v720);
              v271 = v709;
              if (v709)
              {
                v272 = (unint64_t *)&v709->__shared_owners_;
                do
                  v273 = __ldaxr(v272);
                while (__stlxr(v273 - 1, v272));
                if (!v273)
                {
                  ((void (*)(std::__shared_weak_count *))v271->__on_zero_shared)(v271);
                  std::__shared_weak_count::__release_weak(v271);
                }
              }
              v187 += 2;
              v188 = v643;
            }
            v735[0] = &v710;
            sub_20BDE9EB0((void ***)v735);
            v183 = v637 + 2;
          }
          while (v637 + 2 != v630);
        }
        v735[0] = &v713;
        sub_20BDE9EB0((void ***)v735);
        v274 = v668;
        v275 = v635;
        if (v668)
        {
          v276 = (unint64_t *)&v668->__shared_owners_;
          do
            v277 = __ldaxr(v276);
          while (__stlxr(v277 - 1, v276));
          if (!v277)
          {
            ((void (*)(std::__shared_weak_count *))v274->__on_zero_shared)(v274);
            std::__shared_weak_count::__release_weak(v274);
          }
        }
        v666 = 0;
        v665 = 0;
        v664 = &v665;
        v278 = *a1;
        v279 = sub_20C957390();
        sub_20C7D1160(v278, (unsigned __int8 *)v279, (uint64_t)&v697);
        v280 = v697;
        v639 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v698;
        if (v697 != v698)
        {
          do
          {
            v738 = 0;
            v739 = 0;
            memset(v735, 0, sizeof(v735));
            v736 = 0u;
            v741 = 0;
            v742 = 0;
            v740 = 0;
            v744 = 0;
            v745 = 0;
            v737 = (uint64_t *)&v738;
            v743 = &v744;
            v281 = (std::__shared_weak_count *)v280[1];
            v640 = (uint64_t *)v280;
            v726[0] = *v280;
            v726[1] = v281;
            if (v281)
            {
              v282 = (unint64_t *)&v281->__shared_owners_;
              do
                v283 = __ldxr(v282);
              while (__stxr(v283 + 1, v282));
            }
            sub_20C7C1434((uint64_t)v735, (uint64_t *)v726);
            if (v281)
            {
              v284 = (unint64_t *)&v281->__shared_owners_;
              do
                v285 = __ldaxr(v284);
              while (__stlxr(v285 - 1, v284));
              if (!v285)
              {
                ((void (*)(std::__shared_weak_count *))v281->__on_zero_shared)(v281);
                std::__shared_weak_count::__release_weak(v281);
              }
            }
            v286 = *v640;
            v287 = sub_20C957390();
            sub_20C7D3D10(v286, (unsigned __int8 *)v287, (uint64_t)v717);
            v288 = *(_QWORD *)&v717[8];
            v645 = *(_QWORD *)&v717[8];
            for (k = *(_QWORD *)v717; k != v288; k += 16)
            {
              v729 = 0uLL;
              *(_OWORD *)v726 = 0u;
              memset(v727, 0, sizeof(v727));
              v731 = 0;
              v730 = 0uLL;
              v733 = 0;
              v734 = 0;
              v728 = (uint64_t *)&v729;
              v732 = &v733;
              v290 = *(std::__shared_weak_count **)(k + 8);
              v720[0] = *(void **)k;
              v720[1] = v290;
              if (v290)
              {
                v291 = (unint64_t *)&v290->__shared_owners_;
                do
                  v292 = __ldxr(v291);
                while (__stxr(v292 + 1, v291));
              }
              sub_20C7D3010((uint64_t)v726, (uint64_t *)v720, (uint64_t *)&v746);
              sub_20C7D3EC4((uint64_t *)&v730, *((__int128 **)&v730 + 1), v746, *((__int128 **)&v746 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v746 + 1) - v746) >> 4));
              v715.__r_.__value_.__r.__words[0] = (std::string::size_type)&v746;
              sub_20BE93030((void ***)&v715);
              if (v290)
              {
                v293 = (unint64_t *)&v290->__shared_owners_;
                do
                  v294 = __ldaxr(v293);
                while (__stlxr(v294 - 1, v293));
                if (!v294)
                {
                  ((void (*)(std::__shared_weak_count *))v290->__on_zero_shared)(v290);
                  std::__shared_weak_count::__release_weak(v290);
                }
              }
              sub_20C7D2F74((uint64_t)v726, &v740);
              v296 = *(uint64_t **)k;
              v295 = *(_QWORD *)(k + 8);
              *(_QWORD *)&v746 = *(_QWORD *)k;
              *((_QWORD *)&v746 + 1) = v295;
              if (v295)
              {
                v297 = (unint64_t *)(v295 + 8);
                do
                  v298 = __ldxr(v297);
                while (__stxr(v298 + 1, v297));
              }
              v299 = v665;
              v300 = &v665;
LABEL_477:
              v301 = v300;
              if (v299)
              {
                while (1)
                {
                  v300 = (uint64_t **)v299;
                  v302 = v299[4];
                  if ((unint64_t)v296 < v302)
                  {
                    v299 = *v300;
                    goto LABEL_477;
                  }
                  if (v302 >= (unint64_t)v296)
                    break;
                  v299 = v300[1];
                  if (!v299)
                  {
                    v301 = v300 + 1;
                    goto LABEL_484;
                  }
                }
                v303 = v300;
              }
              else
              {
LABEL_484:
                v304 = (uint64_t **)operator new(0xA8uLL);
                v303 = v304;
                v304[4] = v296;
                v304[5] = (uint64_t *)v295;
                if (v295)
                {
                  v305 = (unint64_t *)(v295 + 8);
                  do
                    v306 = __ldxr(v305);
                  while (__stxr(v306 + 1, v305));
                }
                v304[14] = 0;
                v304[15] = 0;
                *((_OWORD *)v304 + 5) = 0u;
                *((_OWORD *)v304 + 6) = 0u;
                *((_OWORD *)v304 + 3) = 0u;
                *((_OWORD *)v304 + 4) = 0u;
                v304[12] = (uint64_t *)(v304 + 13);
                v304[16] = 0;
                v304[17] = 0;
                v304[20] = 0;
                v304[19] = 0;
                v304[18] = (uint64_t *)(v304 + 19);
                *v304 = 0;
                v304[1] = 0;
                v304[2] = (uint64_t *)v300;
                *v301 = (uint64_t *)v304;
                v307 = (uint64_t *)v304;
                if (*v664)
                {
                  v664 = (uint64_t **)*v664;
                  v307 = *v301;
                }
                sub_20BDDE208(v665, v307);
                ++v666;
              }
              sub_20BE7598C((uint64_t *)v303 + 6);
              *((_OWORD *)v303 + 3) = *(_OWORD *)v726;
              v303[8] = *(uint64_t **)&v727[0];
              *(_QWORD *)&v727[0] = 0;
              v726[1] = 0;
              v726[0] = 0;
              sub_20BE10AE4((void **)v303 + 9);
              *(_OWORD *)(v303 + 9) = *(_OWORD *)((char *)v727 + 8);
              v309 = (uint64_t *)(v303 + 13);
              v308 = v303[13];
              v303[11] = (uint64_t *)*((_QWORD *)&v727[1] + 1);
              memset((char *)v727 + 8, 0, 24);
              sub_20C7D4364((uint64_t)(v303 + 12), v308);
              v310 = (uint64_t *)v729;
              v303[12] = v728;
              v303[13] = v310;
              v311 = *((_QWORD *)&v729 + 1);
              v303[14] = (uint64_t *)*((_QWORD *)&v729 + 1);
              if (v311)
              {
                v310[2] = (uint64_t)v309;
                v728 = (uint64_t *)&v729;
                v729 = 0uLL;
              }
              else
              {
                v303[12] = v309;
              }
              sub_20C241224((void **)v303 + 15);
              *(_OWORD *)(v303 + 15) = v730;
              v313 = (char *)v303[19];
              v312 = (char **)(v303 + 19);
              *(v312 - 2) = v731;
              v731 = 0;
              v730 = 0uLL;
              sub_20BDECAB8((uint64_t)(v312 - 1), v313);
              v314 = v733;
              *(v312 - 1) = (char *)v732;
              *v312 = v314;
              v315 = v734;
              v312[1] = v734;
              if (v315)
              {
                *((_QWORD *)v314 + 2) = v312;
                v732 = &v733;
                v733 = 0;
                v734 = 0;
              }
              else
              {
                *(v312 - 1) = (char *)v312;
              }
              v316 = (std::__shared_weak_count *)*((_QWORD *)&v746 + 1);
              if (*((_QWORD *)&v746 + 1))
              {
                v317 = (unint64_t *)(*((_QWORD *)&v746 + 1) + 8);
                do
                  v318 = __ldaxr(v317);
                while (__stlxr(v318 - 1, v317));
                if (!v318)
                {
                  ((void (*)(std::__shared_weak_count *))v316->__on_zero_shared)(v316);
                  std::__shared_weak_count::__release_weak(v316);
                }
              }
              sub_20BDECAB8((uint64_t)&v732, v733);
              *(_QWORD *)&v746 = &v730;
              sub_20BE93030((void ***)&v746);
              sub_20C7D4364((uint64_t)&v728, (_QWORD *)v729);
              *(_QWORD *)&v746 = (char *)v727 + 8;
              sub_20BDE9EB0((void ***)&v746);
              *(_QWORD *)&v746 = v726;
              sub_20BDE5038((void ***)&v746);
              v288 = v645;
            }
            v726[0] = v717;
            sub_20BDE9EB0((void ***)v726);
            sub_20BDECAB8((uint64_t)&v743, v744);
            v726[0] = &v740;
            sub_20BE93030((void ***)v726);
            sub_20C7D4364((uint64_t)&v737, v738);
            v726[0] = &v735[3];
            sub_20BDE9EB0((void ***)v726);
            v726[0] = v735;
            sub_20BDE5038((void ***)v726);
            v280 = (void (**)(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *__hidden))(v640 + 2);
            v275 = v635;
          }
          while (v640 + 2 != (uint64_t *)v639);
        }
        v735[0] = &v697;
        sub_20BDE9EB0((void ***)v735);
        memset(v735, 0, sizeof(v735));
        v736 = 0u;
        v738 = 0;
        v737 = (uint64_t *)&v738;
        v739 = 0;
        v740 = 0;
        v742 = 0;
        v741 = 0;
        v745 = 0;
        v744 = 0;
        v743 = &v744;
        sub_20BE75818((uint64_t)v735, __str, (__int128 *)__dst, 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)__dst - (_BYTE *)__str) >> 3));
        v319 = v664;
        if (v664 != &v665)
        {
          do
          {
            v726[0] = v319 + 4;
            v320 = sub_20C7D4448(&v737, (unint64_t *)v319 + 4, (uint64_t)&unk_20CAC184C, (uint64_t **)v726);
            sub_20C7C0F74();
            sub_20C7D43E4((__int128 **)&v746, (uint64_t)(v319 + 4));
            if (*(char *)(v746 + 23) < 0)
            {
              sub_20BDDBFAC(v726, *(void **)v746, *(_QWORD *)(v746 + 8));
            }
            else
            {
              v321 = *(_OWORD *)v746;
              *(_QWORD *)&v727[0] = *(_QWORD *)(v746 + 16);
              *(_OWORD *)v726 = v321;
            }
            sub_20C7D1314((char **)&v735[3], (__int128 *)v319 + 2);
            v322 = (__int128 *)v319[15];
            v323 = (__int128 *)v319[16];
            if (v322 != v323)
            {
              v324 = v320 + 6;
              do
              {
                v325 = (char *)v322 + 24;
                sub_20C7D452C(v324, v322, (__int128 *)((char *)v322 + 24));
                v322 = (__int128 *)(v325 + 24);
              }
              while (v325 + 24 != (char *)v323);
            }
            if (SBYTE7(v727[0]) < 0)
              operator delete(v726[0]);
            v326 = v319[1];
            v275 = v635;
            if (v326)
            {
              do
              {
                v327 = (uint64_t **)v326;
                v326 = (uint64_t *)*v326;
              }
              while (v326);
            }
            else
            {
              do
              {
                v327 = (uint64_t **)v319[2];
                v328 = *v327 == (uint64_t *)v319;
                v319 = v327;
              }
              while (!v328);
            }
            v319 = v327;
          }
          while (v327 != &v665);
        }
        sub_20C7D4764((uint64_t)&v664, v665);
        v666 = 0;
        v664 = &v665;
        v665 = 0;
        v638 = (unint64_t *)v735[3];
        v632 = (unint64_t *)v736;
        if (v735[3] != (void *)v736)
        {
          v329 = &v688;
          do
          {
            sub_20C7C0F74();
            sub_20C7D43E4((__int128 **)v726, (uint64_t)v638);
            if (*((char *)v726[0] + 23) < 0)
            {
              sub_20BDDBFAC(v720, *(void **)v726[0], *((_QWORD *)v726[0] + 1));
            }
            else
            {
              v330 = *(_OWORD *)v726[0];
              v721 = (char *)*((_QWORD *)v726[0] + 2);
              *(_OWORD *)v720 = v330;
            }
            memset(&v715, 0, sizeof(v715));
            sub_20BE78B98((char *)&v715, (__int128 *)v735[0], (__int128 *)v735[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v735[1] - (char *)v735[0]) >> 3));
            v636 = v715.__r_.__value_.__l.__size_;
            for (m = v715.__r_.__value_.__r.__words[0]; m != v636; m += 24)
            {
              v332 = sub_20C7D47AC((uint64_t)v735, v638);
              v333 = (const void **)*v332;
              v647 = v332 + 1;
              if ((uint64_t *)*v332 != v332 + 1)
              {
                do
                {
                  v334 = (uint64_t *)sub_20BDEEBA4((uint64_t)v329, (const void **)v720);
                  if (&v689 != v334)
                  {
                    v335 = (uint64_t *)sub_20BDEEBA4((uint64_t)&v677, (const void **)m);
                    v336 = v335;
                    if (&v678 != v335)
                    {
                      v337 = sub_20BDEEBA4((uint64_t)(v335 + 7), v333 + 7);
                      if (v336 + 8 != (uint64_t *)v337)
                      {
                        sub_20C7CC10C((uint64_t)&v672, (const void **)v720, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v717);
                        sub_20C35C4F8((uint64_t)v726, (uint64_t *)&v717[8], &v717[16]);
                        pxrInternal__aapl__pxrReserved__::UsdPrim::GetVariantSet((uint64_t)v726, (__int128 *)m, (uint64_t)&v697);
                        if ((BYTE8(v727[0]) & 7) != 0)
                        {
                          v338 = (unsigned int *)(*((_QWORD *)&v727[0] + 1) & 0xFFFFFFFFFFFFFFF8);
                          do
                            v339 = __ldxr(v338);
                          while (__stlxr(v339 - 2, v338));
                        }
                        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v727 + 1);
                        sub_20BFD265C(v727);
                        if (v726[1])
                          sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v726[1]);
                        if ((pxrInternal__aapl__pxrReserved__::UsdVariantSet::AddVariant((pxrInternal__aapl__pxrReserved__::UsdVariantSet *)&v697, (__int128 *)(v333 + 7), (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)1) & 1) != 0)
                        {
                          pxrInternal__aapl__pxrReserved__::UsdVariantSet::SetVariantSelection((pxrInternal__aapl__pxrReserved__::UsdVariantSet *)&v697, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)(v333 + 7));
                          *(_OWORD *)&v660.__r_.__value_.__l.__data_ = 0uLL;
                          pxrInternal__aapl__pxrReserved__::UsdVariantSet::GetVariantEditContext((pxrInternal__aapl__pxrReserved__::UsdObject *)&v697, (uint64_t *)&v660, (uint64_t)&v746);
                          pxrInternal__aapl__pxrReserved__::UsdEditContext::UsdEditContext(v726, &v746);
                          sub_20C2011B8((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v748);
                          v340 = *((_QWORD *)&v747 + 1);
                          if (*((_QWORD *)&v747 + 1))
                          {
                            v341 = (unsigned int *)(*((_QWORD *)&v747 + 1) + 8);
                            do
                            {
                              v342 = __ldxr(v341);
                              v343 = v342 - 1;
                            }
                            while (__stlxr(v343, v341));
                            if (!v343)
                              (*(void (**)(uint64_t))(*(_QWORD *)v340 + 8))(v340);
                          }
                          v344 = *((_QWORD *)&v746 + 1);
                          if (*((_QWORD *)&v746 + 1))
                          {
                            v345 = (unsigned int *)(*((_QWORD *)&v746 + 1) + 8);
                            do
                            {
                              v346 = __ldxr(v345);
                              v347 = v346 - 1;
                            }
                            while (__stlxr(v347, v345));
                            if (!v347)
                              (*(void (**)(uint64_t))(*(_QWORD *)v344 + 8))(v344);
                          }
                          v348 = v660.__r_.__value_.__l.__size_;
                          if (v660.__r_.__value_.__l.__size_)
                          {
                            v349 = (unsigned int *)(v660.__r_.__value_.__l.__size_ + 8);
                            do
                            {
                              v350 = __ldxr(v349);
                              v351 = v350 - 1;
                            }
                            while (__stlxr(v351, v349));
                            if (!v351)
                              (*(void (**)(std::string::size_type))(*(_QWORD *)v348 + 8))(v348);
                          }
                          sub_20BDDC0E4(&v746, "");
                          v352 = v329;
                          v353 = sub_20BDEEBA4((uint64_t)(v334 + 7), (const void **)&v746);
                          if (SBYTE7(v747) < 0)
                            operator delete((void *)v746);
                          if (v334 + 8 != (uint64_t *)v353)
                          {
                            v354 = *(void ***)(v337 + 56);
                            v355 = (void **)(v337 + 64);
                            if (v354 != (void **)(v337 + 64))
                            {
                              do
                              {
                                v356 = (std::string::size_type)v354[8];
                                v660.__r_.__value_.__r.__words[0] = (std::string::size_type)v354[7];
                                v660.__r_.__value_.__l.__size_ = v356;
                                if (v356)
                                {
                                  v357 = (unint64_t *)(v356 + 8);
                                  do
                                    v358 = __ldxr(v357);
                                  while (__stxr(v358 + 1, v357));
                                }
                                sub_20C7C77E8((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)(v353 + 56), &v660, (uint64_t)&v746);
                                sub_20C7C7AA0((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v746, v354 + 7);
                                if ((BYTE8(v747) & 7) != 0)
                                {
                                  v359 = (unsigned int *)(*((_QWORD *)&v747 + 1) & 0xFFFFFFFFFFFFFFF8);
                                  do
                                    v360 = __ldxr(v359);
                                  while (__stlxr(v360 - 2, v359));
                                }
                                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v747 + 1);
                                sub_20BFD265C(&v747);
                                if (*((_QWORD *)&v746 + 1))
                                  sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v746 + 1));
                                v361 = (std::__shared_weak_count *)v660.__r_.__value_.__l.__size_;
                                if (v660.__r_.__value_.__l.__size_)
                                {
                                  v362 = (unint64_t *)(v660.__r_.__value_.__l.__size_ + 8);
                                  do
                                    v363 = __ldaxr(v362);
                                  while (__stlxr(v363 - 1, v362));
                                  if (!v363)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v361->__on_zero_shared)(v361);
                                    std::__shared_weak_count::__release_weak(v361);
                                  }
                                }
                                v364 = (void **)v354[1];
                                if (v364)
                                {
                                  do
                                  {
                                    v365 = v364;
                                    v364 = (void **)*v364;
                                  }
                                  while (v364);
                                }
                                else
                                {
                                  do
                                  {
                                    v365 = (void **)v354[2];
                                    v328 = *v365 == v354;
                                    v354 = v365;
                                  }
                                  while (!v328);
                                }
                                v354 = v365;
                              }
                              while (v365 != v355);
                            }
                          }
                          pxrInternal__aapl__pxrReserved__::UsdEditContext::~UsdEditContext((pxrInternal__aapl__pxrReserved__::UsdEditContext *)v726);
                          pxrInternal__aapl__pxrReserved__::UsdVariantSet::ClearVariantSelection((pxrInternal__aapl__pxrReserved__::UsdVariantSet *)&v697);
                          v329 = v352;
                        }
                        else
                        {
                          v726[0] = "usdMtlx/reader.cpp";
                          v726[1] = "AddMaterialVariant";
                          *(_QWORD *)&v727[0] = 1705;
                          *((_QWORD *)&v727[0] + 1) = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_Con"
                                                      "text::AddMaterialVariant(const std::string &, const VariantSetName"
                                                      " &, const VariantName &) const";
                          LOBYTE(v727[1]) = 0;
                          if (*((char *)v333 + 79) >= 0)
                            v366 = (const char *)(v333 + 7);
                          else
                            v366 = (const char *)v333[7];
                          if (*(char *)(m + 23) >= 0)
                            v367 = (const char *)m;
                          else
                            v367 = *(const char **)m;
                          sub_20C3630C0((uint64_t)v717, &v746);
                          Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v746);
                          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v726, 1, (pxrInternal__aapl__pxrReserved__ *)"Failed to author material variant '%s' in variant set '%s' on <%s>", v366, v367, Text);
                          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v746 + 1);
                          sub_20BFD265C(&v746);
                        }
                        if (v702 < 0)
                          operator delete(v701);
                        if ((v700 & 7) != 0)
                        {
                          v369 = (unsigned int *)(v700 & 0xFFFFFFFFFFFFFFF8);
                          do
                            v370 = __ldxr(v369);
                          while (__stlxr(v370 - 2, v369));
                        }
                        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v699 + 1);
                        sub_20BFD265C(&v699);
                        if (v698)
                          sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v698);
                        pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::~UsdShadeMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)v717);
                      }
                    }
                  }
                  v371 = (uint64_t *)v333[1];
                  if (v371)
                  {
                    do
                    {
                      v372 = v371;
                      v371 = (uint64_t *)*v371;
                    }
                    while (v371);
                  }
                  else
                  {
                    do
                    {
                      v372 = (uint64_t *)v333[2];
                      v328 = *v372 == (_QWORD)v333;
                      v333 = (const void **)v372;
                    }
                    while (!v328);
                  }
                  v333 = (const void **)v372;
                }
                while (v372 != v647);
              }
            }
            v726[0] = &v715;
            sub_20BDE5038((void ***)v726);
            if (SHIBYTE(v721) < 0)
              operator delete(v720[0]);
            v638 += 2;
            v275 = v635;
          }
          while (v638 != v632);
        }
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)v726, "Looks");
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(v629, (const pxrInternal__aapl__pxrReserved__::TfToken *)v726, &v662);
        if (((uint64_t)v726[0] & 7) != 0)
        {
          v373 = (unsigned int *)((unint64_t)v726[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v374 = __ldxr(v373);
          while (__stlxr(v374 - 2, v373));
        }
        v375 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(v275);
        v726[0] = 0;
        pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v375, a4, v726, (uint64_t)&v660);
        if (((uint64_t)v726[0] & 7) != 0)
        {
          v376 = (unsigned int *)((unint64_t)v726[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v377 = __ldxr(v376);
          while (__stlxr(v377 - 2, v376));
        }
        pxrInternal__aapl__pxrReserved__::UsdPrim::GetVariantSets((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v660, (uint64_t)v726);
        sub_20BDDC0E4(&v746, "LookVariant");
        pxrInternal__aapl__pxrReserved__::UsdVariantSets::AddVariantSet((pxrInternal__aapl__pxrReserved__::UsdProperty *)v726, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v746, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)1, (pxrInternal__aapl__pxrReserved__::UsdVariantSet *)&v697);
        if (SBYTE7(v747) < 0)
          operator delete((void *)v746);
        if ((BYTE8(v727[0]) & 7) != 0)
        {
          v378 = (unsigned int *)(*((_QWORD *)&v727[0] + 1) & 0xFFFFFFFFFFFFFFF8);
          do
            v379 = __ldxr(v378);
          while (__stlxr(v379 - 2, v378));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v727 + 1);
        sub_20BFD265C(v727);
        if (v726[1])
          sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v726[1]);
        v380 = *a1;
        v381 = sub_20C957390();
        sub_20C7D1160(v380, (unsigned __int8 *)v381, (uint64_t)&v658);
        v625 = v659;
        if (v658 == (const void **)v659)
          goto LABEL_1028;
        v382 = (uint64_t *)v658;
LABEL_613:
        v655 = 0;
        v656 = 0;
        v657 = 0;
        v726[1] = 0;
        *(_QWORD *)&v727[0] = 0;
        v726[0] = &v726[1];
        v383 = v382;
        sub_20C93BBD0(*v382, v720);
        v384 = *v383;
        v385 = v383[1];
        v626 = v383;
        v715.__r_.__value_.__r.__words[0] = *v383;
        v715.__r_.__value_.__l.__size_ = v385;
        if (v385)
        {
          v386 = (unint64_t *)(v385 + 8);
          do
            v387 = __ldxr(v386);
          while (__stxr(v387 + 1, v386));
        }
        while (1)
        {
          if (!v384)
          {
            v407 = (std::__shared_weak_count *)v715.__r_.__value_.__l.__size_;
            if (v715.__r_.__value_.__l.__size_)
            {
              v408 = (unint64_t *)(v715.__r_.__value_.__l.__size_ + 8);
              do
                v409 = __ldaxr(v408);
              while (__stlxr(v409 - 1, v408));
              if (!v409)
              {
                ((void (*)(std::__shared_weak_count *))v407->__on_zero_shared)(v407);
                std::__shared_weak_count::__release_weak(v407);
              }
            }
            v410 = v655;
            v411 = v656 - 16;
            if (v655 != v656 && v411 > v655)
            {
              do
              {
                v413 = *(_QWORD *)v410;
                *(_QWORD *)v410 = *(_QWORD *)v411;
                *(_QWORD *)v411 = v413;
                v414 = *((_QWORD *)v410 + 1);
                *((_QWORD *)v410 + 1) = *((_QWORD *)v411 + 1);
                *((_QWORD *)v411 + 1) = v414;
                v410 += 16;
                v411 -= 16;
              }
              while (v410 < v411);
            }
            v415 = (std::__shared_weak_count *)v720[1];
            if (v720[1])
            {
              v416 = (unint64_t *)((char *)v720[1] + 8);
              do
                v417 = __ldaxr(v416);
              while (__stlxr(v417 - 1, v416));
              if (!v417)
              {
                ((void (*)(std::__shared_weak_count *))v415->__on_zero_shared)(v415);
                std::__shared_weak_count::__release_weak(v415);
              }
            }
            sub_20C2162E8((uint64_t)v726, (_QWORD *)v726[1]);
            v418 = v655;
            v419 = v656;
            v633 = v656;
            while (2)
            {
              if (v418 != v419)
              {
                v642 = v418;
                v420 = *(_QWORD *)v418;
                if (*(char *)(v420 + 71) < 0)
                {
                  sub_20BDDBFAC(v653, *(void **)(v420 + 48), *(_QWORD *)(v420 + 56));
                }
                else
                {
                  *(_OWORD *)v653 = *(_OWORD *)(v420 + 48);
                  v654 = *(_QWORD *)(v420 + 64);
                }
                v421 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(v635);
                pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v746);
                pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)&v662, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v746, v726);
                *(_QWORD *)v717 = 0;
                pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v421, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v726, (void **)v717, (uint64_t)v650);
                if ((v717[0] & 7) != 0)
                {
                  v422 = (unsigned int *)(*(_QWORD *)v717 & 0xFFFFFFFFFFFFFFF8);
                  do
                    v423 = __ldxr(v422);
                  while (__stlxr(v423 - 2, v422));
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v726 + 1);
                sub_20BFD265C(v726);
                if ((v746 & 7) != 0)
                {
                  v424 = (unsigned int *)(v746 & 0xFFFFFFFFFFFFFFF8);
                  do
                    v425 = __ldxr(v424);
                  while (__stlxr(v425 - 2, v424));
                }
                if ((pxrInternal__aapl__pxrReserved__::UsdPrim::HasAuthoredReferences((pxrInternal__aapl__pxrReserved__::UsdPrim *)v650) & 1) == 0)
                {
                  v426 = (std::__shared_weak_count *)*((_QWORD *)v642 + 1);
                  v648 = *(_QWORD **)v642;
                  v649 = v426;
                  if (v426)
                  {
                    v427 = (unint64_t *)&v426->__shared_owners_;
                    do
                      v428 = __ldxr(v427);
                    while (__stxr(v428 + 1, v427));
                  }
                  v429 = atomic_load((unsigned __int8 *)&qword_25498D3E8);
                  if ((v429 & 1) == 0 && __cxa_guard_acquire(&qword_25498D3E8))
                  {
                    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&unk_25498D3E0, "Materials");
                    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &unk_25498D3E0, &dword_20BDBC000);
                    __cxa_guard_release(&qword_25498D3E8);
                  }
                  v726[0] = v648;
                  v726[1] = v649;
                  if (v649)
                  {
                    v430 = (unint64_t *)&v649->__shared_owners_;
                    do
                      v431 = __ldxr(v430);
                    while (__stxr(v431 + 1, v430));
                  }
                  sub_20C7C5A74((uint64_t)v650, (uint64_t)v726);
                  if (v649)
                  {
                    v432 = (unint64_t *)&v649->__shared_owners_;
                    do
                      v433 = __ldaxr(v432);
                    while (__stlxr(v433 - 1, v432));
                    if (!v433)
                    {
                      ((void (*)(std::__shared_weak_count *))v649->__on_zero_shared)(v649);
                      std::__shared_weak_count::__release_weak(v649);
                    }
                  }
                  sub_20C7C0F74();
                  v434 = sub_20C67F73C(v648 + 20, (unsigned __int8 *)&qword_25498D0B8);
                  if (v434)
                    v436 = (__int128 *)(v434 + 40);
                  else
                    v436 = sub_20C957390();
                  v437 = *((unsigned __int8 *)v436 + 23);
                  if ((v437 & 0x80u) == 0)
                    v438 = *((unsigned __int8 *)v436 + 23);
                  else
                    v438 = *((_QWORD *)v436 + 1);
                  if (v438)
                  {
                    if ((v437 & 0x80) == 0)
                      goto LABEL_701;
LABEL_704:
                    if (*((_QWORD *)v436 + 1))
                      goto LABEL_705;
                  }
                  else
                  {
                    v436 = sub_20C957390();
                    v437 = *((unsigned __int8 *)v436 + 23);
                    if ((v437 & 0x80) != 0)
                      goto LABEL_704;
LABEL_701:
                    if (v437)
                    {
LABEL_705:
                      sub_20C348EEC((uint64_t)v650, (int *)&v746);
                      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v746, v726);
                      sub_20C7C3084((uint64_t)v436, (uint64_t)v717);
                      pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)v726, (const pxrInternal__aapl__pxrReserved__::TfToken *)v717, v720);
                      if ((v717[0] & 7) != 0)
                      {
                        v439 = (unsigned int *)(*(_QWORD *)v717 & 0xFFFFFFFFFFFFFFF8);
                        do
                          v440 = __ldxr(v439);
                        while (__stlxr(v440 - 2, v439));
                      }
                      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v726 + 1);
                      sub_20BFD265C(v726);
                      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v746 + 1);
                      sub_20BFD265C(&v746);
                      pxrInternal__aapl__pxrReserved__::UsdPrim::GetReferences((pxrInternal__aapl__pxrReserved__::UsdPrim *)v650, (uint64_t)v726);
                      pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)&v746, 0.0, 1.0);
                      pxrInternal__aapl__pxrReserved__::UsdReferences::AddInternalReference((pxrInternal__aapl__pxrReserved__::UsdObject *)v726, (uint64_t)v720, (uint64_t)&v746, 1);
                      if ((BYTE8(v727[0]) & 7) != 0)
                      {
                        v441 = (unsigned int *)(*((_QWORD *)&v727[0] + 1) & 0xFFFFFFFFFFFFFFF8);
                        do
                          v442 = __ldxr(v441);
                        while (__stlxr(v442 - 2, v441));
                      }
                      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v727 + 1);
                      sub_20BFD265C(v727);
                      if (v726[1])
                        sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v726[1]);
                      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v720 + 1);
                      sub_20BFD265C(v720);
                    }
                  }
                  if (v627 != v628)
                  {
                    pxrInternal__aapl__pxrReserved__::UsdPrim::GetReferences((pxrInternal__aapl__pxrReserved__::UsdPrim *)v650, (uint64_t)v726);
                    sub_20BFD6E54(v717, &v674);
                    sub_20BFD6EA4(&v717[4], (_DWORD *)&v674 + 1);
                    pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)&v746, 0.0, 1.0);
                    pxrInternal__aapl__pxrReserved__::UsdReferences::AddInternalReference((pxrInternal__aapl__pxrReserved__::UsdObject *)v726, (uint64_t)v717, (uint64_t)&v746, 1);
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v717[4]);
                    sub_20BFD265C(v717);
                    if ((BYTE8(v727[0]) & 7) != 0)
                    {
                      v443 = (unsigned int *)(*((_QWORD *)&v727[0] + 1) & 0xFFFFFFFFFFFFFFF8);
                      do
                        v444 = __ldxr(v443);
                      while (__stlxr(v444 - 2, v443));
                    }
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v727 + 1);
                    sub_20BFD265C(v727);
                    if (v726[1])
                      sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v726[1]);
                  }
                  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((pxrInternal__aapl__pxrReserved__::UsdObject *)v650, v435, v726);
                  v445 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08((uint64_t *)v726);
                  sub_20C348EEC((uint64_t)v650, (int *)v717);
                  pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)v717, (const pxrInternal__aapl__pxrReserved__::TfToken *)&unk_25498D3E0, &v746);
                  v715.__r_.__value_.__r.__words[0] = 0;
                  pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v445, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v746, (void **)&v715.__r_.__value_.__l.__data_, (uint64_t)v720);
                  if ((v715.__r_.__value_.__s.__data_[0] & 7) != 0)
                  {
                    v446 = (unsigned int *)(v715.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
                    do
                      v447 = __ldxr(v446);
                    while (__stlxr(v447 - 2, v446));
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v746 + 1);
                  sub_20BFD265C(&v746);
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v717[4]);
                  sub_20BFD265C(v717);
                  v448 = v726[1];
                  if (v726[1])
                  {
                    v449 = (unsigned int *)((char *)v726[1] + 8);
                    do
                    {
                      v450 = __ldxr(v449);
                      v451 = v450 - 1;
                    }
                    while (__stlxr(v451, v449));
                    if (!v451)
                      (*(void (**)(void *))(*(_QWORD *)v448 + 8))(v448);
                  }
                  *(_OWORD *)&v719.__r_.__value_.__r.__words[1] = 0uLL;
                  v719.__r_.__value_.__r.__words[0] = (std::string::size_type)&v719.__r_.__value_.__l.__size_;
                  v452 = sub_20C957390();
                  sub_20C7D3D10((uint64_t)v648, (unsigned __int8 *)v452, (uint64_t)v726);
                  v453 = (uint64_t *)v726[0];
                  v454 = (uint64_t *)v726[1];
                  while (v453 != v454)
                  {
                    v455 = *v453;
                    v456 = (std::__shared_weak_count *)v453[1];
                    *(_QWORD *)&v746 = *v453;
                    *((_QWORD *)&v746 + 1) = v456;
                    if (v456)
                    {
                      v457 = (unint64_t *)&v456->__shared_owners_;
                      do
                        v458 = __ldxr(v457);
                      while (__stxr(v458 + 1, v457));
                    }
                    if (v455)
                      sub_20C7C3084(v455 + 48, (uint64_t)v717);
                    else
                      *(_QWORD *)v717 = 0;
                    v715.__r_.__value_.__r.__words[0] = (std::string::size_type)v717;
                    *((_DWORD *)sub_20C7D491C((uint64_t **)&v719, (uint64_t *)v717, (uint64_t)&unk_20CAC184C, &v715) + 10) = 0;
                    if ((v717[0] & 7) != 0)
                    {
                      v459 = (unsigned int *)(*(_QWORD *)v717 & 0xFFFFFFFFFFFFFFF8);
                      do
                        v460 = __ldxr(v459);
                      while (__stlxr(v460 - 2, v459));
                      v456 = (std::__shared_weak_count *)*((_QWORD *)&v746 + 1);
                    }
                    if (v456)
                    {
                      v461 = (unint64_t *)&v456->__shared_owners_;
                      do
                        v462 = __ldaxr(v461);
                      while (__stlxr(v462 - 1, v461));
                      if (!v462)
                      {
                        ((void (*)(std::__shared_weak_count *))v456->__on_zero_shared)(v456);
                        std::__shared_weak_count::__release_weak(v456);
                      }
                    }
                    v453 += 2;
                  }
                  *(_QWORD *)&v746 = v726;
                  sub_20BDE9EB0((void ***)&v746);
                  UsdPrimAllPrimsPredicate = pxrInternal__aapl__pxrReserved__::GetUsdPrimAllPrimsPredicate(v463);
                  v466 = *UsdPrimAllPrimsPredicate;
                  v465 = UsdPrimAllPrimsPredicate[1];
                  v467 = UsdPrimAllPrimsPredicate[2];
                  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v721)
                    && ((v466 & 0x2000) != 0 || (v465 & 0x2000) == 0))
                  {
                    v466 |= 0x2000uLL;
                    v465 &= ~0x2000uLL;
                  }
                  *(_QWORD *)&v746 = v466;
                  *((_QWORD *)&v746 + 1) = v465;
                  *(_QWORD *)&v747 = v467;
                  sub_20C3ADEFC((uint64_t)v720, (uint64_t *)&v746, (uint64_t)v726);
                  *(void **)&v746 = v726[0];
                  sub_20BFD6E54((_DWORD *)&v746 + 2, &v726[1]);
                  sub_20BFD6EA4((_DWORD *)&v746 + 3, (_DWORD *)&v726[1] + 1);
                  v747 = v727[0];
                  *(_QWORD *)v717 = *((_QWORD *)&v727[1] + 1);
                  v748[0] = *(_QWORD *)&v727[1];
                  sub_20BFD6E54(&v717[8], &v728);
                  sub_20BFD6EA4(&v717[12], (_DWORD *)&v728 + 1);
                  *(_OWORD *)&v717[16] = v729;
                  v718 = v730;
                  while (v746 != *(_OWORD *)v717 || !sub_20C39FA44((uint64_t)&v747, (uint64_t)&v717[16]))
                  {
                    sub_20C3ADDEC((uint64_t)&v746, (uint64_t)&v715);
                    v713 = (uint64_t *)sub_20C398E78(&v715);
                    *((_DWORD *)sub_20C7D49A8((uint64_t **)&v719, v713, (uint64_t)&unk_20CAC184C, &v713) + 10) = 1;
                    if ((v716 & 7) != 0)
                    {
                      v468 = (unsigned int *)(v716 & 0xFFFFFFFFFFFFFFF8);
                      do
                        v469 = __ldxr(v468);
                      while (__stlxr(v469 - 2, v468));
                    }
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v715.__r_.__value_.__r.__words[2] + 1);
                    sub_20BFD265C(&v715.__r_.__value_.__r.__words[2]);
                    if (v715.__r_.__value_.__l.__size_)
                      sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v715.__r_.__value_.__l.__size_);
                    sub_20C3ADE64((uint64_t)&v746);
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v717[12]);
                  sub_20BFD265C(&v717[8]);
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v746 + 3);
                  sub_20BFD265C((_DWORD *)&v746 + 2);
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v728 + 1);
                  sub_20BFD265C(&v728);
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v726[1] + 1);
                  sub_20BFD265C(&v726[1]);
                  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::Apply((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)v650, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v746);
                  pxrInternal__aapl__pxrReserved__::UsdPrim::GetPropertyOrder((pxrInternal__aapl__pxrReserved__::UsdPrim *)v650, &v713);
                  v711 = 0;
                  v710 = 0;
                  v712 = 0;
                  v470 = sub_20C957390();
                  sub_20C7D3D10((uint64_t)v648, (unsigned __int8 *)v470, (uint64_t)&v708);
                  v471 = (unint64_t *)v708;
                  v472 = (unint64_t *)v709;
                  v641 = v709;
                  if ((std::__shared_weak_count *)v708 != v709)
                  {
                    while (2)
                    {
                      sub_20C7C0F74();
                      v473 = sub_20C67F73C((_QWORD *)(*v471 + 160), (unsigned __int8 *)&qword_25498D118);
                      if (v473)
                        v474 = (__int128 *)(v473 + 40);
                      else
                        v474 = sub_20C957390();
                      v475 = *((unsigned __int8 *)v474 + 23);
                      if ((v475 & 0x80u) != 0)
                        v475 = *((_QWORD *)v474 + 1);
                      if (!v475)
                        v474 = sub_20C957390();
                      sub_20C7CC10C((uint64_t)&v672, (const void **)v474, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v706);
                      if (v707
                        && (*(_BYTE *)(v707 + 57) & 8) == 0
                        && (((uint64_t (*)(std::string **))v706[1].__r_.__value_.__l.__size_)(&v706) & 1) != 0)
                      {
                        v476 = *v471;
                        v477 = (std::__shared_weak_count *)v471[1];
                        v726[0] = (void *)*v471;
                        v726[1] = v477;
                        if (v477)
                        {
                          v478 = (unint64_t *)&v477->__shared_owners_;
                          do
                            v479 = __ldxr(v478);
                          while (__stxr(v479 + 1, v478));
                        }
                        if (v476)
                        {
                          sub_20C7C3084(v476 + 48, (uint64_t)&v705);
                          if (!v477)
                            goto LABEL_781;
                        }
                        else
                        {
                          v705 = 0;
                          if (!v477)
                            goto LABEL_781;
                        }
                        v480 = (unint64_t *)&v477->__shared_owners_;
                        do
                          v481 = __ldaxr(v480);
                        while (__stlxr(v481 - 1, v480));
                        if (!v481)
                        {
                          ((void (*)(std::__shared_weak_count *))v477->__on_zero_shared)(v477);
                          std::__shared_weak_count::__release_weak(v477);
                        }
LABEL_781:
                        v715.__r_.__value_.__r.__words[0] = (std::string::size_type)&v705;
                        v482 = sub_20C7D49A8((uint64_t **)&v719, (uint64_t *)&v705, (uint64_t)&unk_20CAC184C, (uint64_t **)&v715);
                        v484 = v482;
                        if (*((_DWORD *)v482 + 10))
                        {
                          pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((pxrInternal__aapl__pxrReserved__::UsdObject *)v720, v483, &v703);
                          sub_20C348EEC((uint64_t)v720, (int *)&v725);
                          if ((v705 & 0xFFFFFFFFFFFFFFF8) != 0)
                            v486 = (uint64_t *)((v705 & 0xFFFFFFFFFFFFFFF8) + 16);
                          else
                            v486 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v485);
                          if (*((char *)v486 + 23) >= 0)
                            v487 = *((unsigned __int8 *)v486 + 23);
                          else
                            v487 = v486[1];
                          sub_20BDF6BDC((uint64_t)v717, v487 + 1);
                          if (v717[23] >= 0)
                            v488 = v717;
                          else
                            v488 = *(_BYTE **)v717;
                          if (v487)
                          {
                            if (*((char *)v486 + 23) >= 0)
                              v489 = v486;
                            else
                              v489 = (const void *)*v486;
                            memmove(v488, v489, v487);
                          }
                          *(_WORD *)&v488[v487] = 95;
                          do
                          {
                            v490 = *((_DWORD *)v484 + 10);
                            *((_DWORD *)v484 + 10) = v490 + 1;
                            std::to_string(&v715, v490);
                            if (v717[23] >= 0)
                              v491 = v717;
                            else
                              v491 = *(const std::string::value_type **)v717;
                            if (v717[23] >= 0)
                              v492 = v717[23];
                            else
                              v492 = *(_QWORD *)&v717[8];
                            v493 = std::string::insert(&v715, 0, v491, v492);
                            v494 = *(_OWORD *)&v493->__r_.__value_.__l.__data_;
                            *(_QWORD *)&v727[0] = *((_QWORD *)&v493->__r_.__value_.__l + 2);
                            *(_OWORD *)v726 = v494;
                            v493->__r_.__value_.__l.__size_ = 0;
                            v493->__r_.__value_.__r.__words[2] = 0;
                            v493->__r_.__value_.__r.__words[0] = 0;
                            pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v724);
                            if ((v705 & 7) != 0)
                            {
                              v495 = (unsigned int *)(v705 & 0xFFFFFFFFFFFFFFF8);
                              do
                                v496 = __ldxr(v495);
                              while (__stlxr(v496 - 2, v495));
                            }
                            v705 = (unint64_t)v724;
                            v724 = 0;
                            if (SBYTE7(v727[0]) < 0)
                              operator delete(v726[0]);
                            if (SHIBYTE(v715.__r_.__value_.__r.__words[2]) < 0)
                              operator delete(v715.__r_.__value_.__l.__data_);
                            v497 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08((uint64_t *)&v703);
                            pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)&v725, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v705, &v715);
                            pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v497, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v715, (uint64_t)v726);
                            IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v726, v498);
                            if ((BYTE8(v727[0]) & 7) != 0)
                            {
                              v500 = (unsigned int *)(*((_QWORD *)&v727[0] + 1) & 0xFFFFFFFFFFFFFFF8);
                              do
                                v501 = __ldxr(v500);
                              while (__stlxr(v501 - 2, v500));
                            }
                            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v727 + 1);
                            sub_20BFD265C(v727);
                            if (v726[1])
                              sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v726[1]);
                            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v715.__r_.__value_.__r.__words + 1);
                            sub_20BFD265C(&v715);
                          }
                          while ((IsDefined & 1) != 0);
                          if ((v717[23] & 0x80000000) != 0)
                            operator delete(*(void **)v717);
                          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v725 + 1);
                          sub_20BFD265C(&v725);
                          v502 = v704;
                          if (v704)
                          {
                            v503 = (unsigned int *)(v704 + 8);
                            do
                            {
                              v504 = __ldxr(v503);
                              v505 = v504 - 1;
                            }
                            while (__stlxr(v505, v503));
                            if (!v505)
                              (*(void (**)(unint64_t))(*(_QWORD *)v502 + 8))(v502);
                          }
                        }
                        else
                        {
                          *((_DWORD *)v482 + 10) = 1;
                        }
                        pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((pxrInternal__aapl__pxrReserved__::UsdObject *)v720, v483, v726);
                        v506 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08((uint64_t *)v726);
                        sub_20C348EEC((uint64_t)v720, (int *)&v703);
                        pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)&v703, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v705, &v715);
                        v725 = 0;
                        pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v506, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v715, (void **)&v725, (uint64_t)v717);
                        if ((v725 & 7) != 0)
                        {
                          v507 = (unsigned int *)(v725 & 0xFFFFFFFFFFFFFFF8);
                          do
                            v508 = __ldxr(v507);
                          while (__stlxr(v508 - 2, v507));
                        }
                        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v715.__r_.__value_.__r.__words + 1);
                        sub_20BFD265C(&v715);
                        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v703 + 1);
                        sub_20BFD265C(&v703);
                        v509 = v726[1];
                        if (v726[1])
                        {
                          v510 = (unsigned int *)((char *)v726[1] + 8);
                          do
                          {
                            v511 = __ldxr(v510);
                            v512 = v511 - 1;
                          }
                          while (__stlxr(v512, v510));
                          if (!v512)
                            (*(void (**)(void *))(*(_QWORD *)v509 + 8))(v509);
                        }
                        v513 = (std::__shared_weak_count *)v471[1];
                        v726[0] = (void *)*v471;
                        v726[1] = v513;
                        if (v513)
                        {
                          v514 = (unint64_t *)&v513->__shared_owners_;
                          do
                            v515 = __ldxr(v514);
                          while (__stxr(v515 + 1, v514));
                        }
                        sub_20C7C7604((uint64_t)v717, (uint64_t)v726);
                        if (v513)
                        {
                          v516 = (unint64_t *)&v513->__shared_owners_;
                          do
                            v517 = __ldaxr(v516);
                          while (__stlxr(v517 - 1, v516));
                          if (!v517)
                          {
                            ((void (*)(std::__shared_weak_count *))v513->__on_zero_shared)(v513);
                            std::__shared_weak_count::__release_weak(v513);
                          }
                        }
                        pxrInternal__aapl__pxrReserved__::UsdPrim::GetReferences((pxrInternal__aapl__pxrReserved__::UsdPrim *)v717, (uint64_t)v726);
                        sub_20C3630C0((uint64_t)&v706, &v703);
                        pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)&v715, 0.0, 1.0);
                        pxrInternal__aapl__pxrReserved__::UsdReferences::AddInternalReference((pxrInternal__aapl__pxrReserved__::UsdObject *)v726, (uint64_t)&v703, (uint64_t)&v715, 1);
                        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v703 + 1);
                        sub_20BFD265C(&v703);
                        if ((BYTE8(v727[0]) & 7) != 0)
                        {
                          v518 = (unsigned int *)(*((_QWORD *)&v727[0] + 1) & 0xFFFFFFFFFFFFFFF8);
                          do
                            v519 = __ldxr(v518);
                          while (__stlxr(v519 - 2, v518));
                        }
                        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v727 + 1);
                        sub_20BFD265C(v727);
                        if (v726[1])
                          sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v726[1]);
                        v520 = (std::__shared_weak_count *)v471[1];
                        v726[0] = (void *)*v471;
                        v726[1] = v520;
                        if (v520)
                        {
                          v521 = (unint64_t *)&v520->__shared_owners_;
                          do
                            v522 = __ldxr(v521);
                          while (__stxr(v522 + 1, v521));
                          v524 = sub_20C7D47AC((uint64_t)v735, (unint64_t *)v726);
                          do
                            v525 = __ldaxr(v521);
                          while (__stlxr(v525 - 1, v521));
                          if (!v525)
                          {
                            ((void (*)(std::__shared_weak_count *))v520->__on_zero_shared)(v520);
                            std::__shared_weak_count::__release_weak(v520);
                          }
                        }
                        else
                        {
                          v524 = sub_20C7D47AC((uint64_t)v735, (unint64_t *)v726);
                        }
                        v528 = *v524;
                        v526 = v524 + 1;
                        v527 = (__int128 *)v528;
                        if ((uint64_t *)v528 != v526)
                        {
                          do
                          {
                            pxrInternal__aapl__pxrReserved__::UsdPrim::GetVariantSet((uint64_t)v717, v527 + 2, (uint64_t)v726);
                            pxrInternal__aapl__pxrReserved__::UsdVariantSet::SetVariantSelection((pxrInternal__aapl__pxrReserved__::UsdVariantSet *)v726, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)((char *)v527 + 56));
                            if (SHIBYTE(v728) < 0)
                              operator delete(*(void **)&v727[1]);
                            if ((BYTE8(v727[0]) & 7) != 0)
                            {
                              v529 = (unsigned int *)(*((_QWORD *)&v727[0] + 1) & 0xFFFFFFFFFFFFFFF8);
                              do
                                v530 = __ldxr(v529);
                              while (__stlxr(v530 - 2, v529));
                            }
                            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v727 + 1);
                            sub_20BFD265C(v727);
                            if (v726[1])
                              sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v726[1]);
                            v531 = (uint64_t *)*((_QWORD *)v527 + 1);
                            if (v531)
                            {
                              do
                              {
                                v532 = v531;
                                v531 = (uint64_t *)*v531;
                              }
                              while (v531);
                            }
                            else
                            {
                              do
                              {
                                v532 = (uint64_t *)*((_QWORD *)v527 + 2);
                                v328 = *v532 == (_QWORD)v527;
                                v527 = (__int128 *)v532;
                              }
                              while (!v328);
                            }
                            v527 = (__int128 *)v532;
                          }
                          while (v532 != v526);
                        }
                        v534 = *v471;
                        v533 = v471[1];
                        v703 = *v471;
                        v704 = v533;
                        if (v533)
                        {
                          v535 = (unint64_t *)(v533 + 8);
                          do
                            v536 = __ldxr(v535);
                          while (__stxr(v536 + 1, v535));
                        }
                        v537 = (_QWORD *)v687[0];
                        if (!v687[0])
                          goto LABEL_880;
                        v538 = v687;
                        do
                        {
                          v539 = v537;
                          v540 = v538;
                          v541 = v537[4];
                          v542 = v537 + 1;
                          if (v541 >= v534)
                          {
                            v542 = v539;
                            v538 = v539;
                          }
                          v537 = (_QWORD *)*v542;
                        }
                        while (v537);
                        if (v538 != v687 && (v541 >= v534 ? (v543 = v539) : (v543 = v540), v534 >= v543[4]))
                        {
                          if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v650, v523) & 1) != 0)
                          {
                            if (v541 >= v534)
                              v577 = (pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)(v539 + 6);
                            else
                              v577 = (pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)(v540 + 6);
                            pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetCollectionPath(v577, (int *)&v725);
                            pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v725, v726);
                            sub_20C348EEC((uint64_t)v650, (int *)&v723);
                            pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix((uint64_t *)&v724, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v725, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v726, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v723, 1);
                            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v723 + 1);
                            sub_20BFD265C(&v723);
                            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v726 + 1);
                            sub_20BFD265C(v726);
                            if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v724))
                            {
                              pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((pxrInternal__aapl__pxrReserved__::UsdObject *)v650, v578, v726);
                              pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetCollection((pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)&v724, (uint64_t *)v726, v579, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v715);
                              v580 = v726[1];
                              if (v726[1])
                              {
                                v581 = (unsigned int *)((char *)v726[1] + 8);
                                do
                                {
                                  v582 = __ldxr(v581);
                                  v583 = v582 - 1;
                                }
                                while (__stlxr(v583, v581));
                                if (!v583)
                                  (*(void (**)(void *))(*(_QWORD *)v580 + 8))(v580);
                              }
                            }
                            else
                            {
                              LODWORD(v726[0]) = 1;
                              v726[1] = 0;
                              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(v727);
                              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v727 + 1);
                              *((_QWORD *)&v727[0] + 1) = 0;
                              v723 = 0;
                              sub_20C37A850((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v715, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v726, &v723);
                              v715.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C537740;
                              if ((v723 & 7) != 0)
                              {
                                v589 = (unsigned int *)(v723 & 0xFFFFFFFFFFFFFFF8);
                                do
                                  v590 = __ldxr(v589);
                                while (__stlxr(v590 - 2, v589));
                              }
                              if ((BYTE8(v727[0]) & 7) != 0)
                              {
                                v591 = (unsigned int *)(*((_QWORD *)&v727[0] + 1) & 0xFFFFFFFFFFFFFFF8);
                                do
                                  v592 = __ldxr(v591);
                                while (__stlxr(v592 - 2, v591));
                              }
                              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v727 + 1);
                              sub_20BFD265C(v727);
                              if (v726[1])
                                sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v726[1]);
                            }
                            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v724 + 1);
                            sub_20BFD265C(&v724);
                            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v725 + 1);
                            sub_20BFD265C(&v725);
                          }
                          else
                          {
                            if (v541 >= v534)
                              v584 = (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(v539 + 6);
                            else
                              v584 = (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(v540 + 6);
                            pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v715, v584);
                            if (v541 >= v534)
                              v585 = v539;
                            else
                              v585 = v540;
                            v586 = v585[9];
                            v715.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C537498;
                            v716 = v586;
                            if ((v586 & 7) != 0)
                            {
                              v587 = (unsigned int *)(v586 & 0xFFFFFFFFFFFFFFF8);
                              do
                                v588 = __ldxr(v587);
                              while (__stxr(v588 + 2, v587));
                              if ((v588 & 1) == 0)
                                v716 &= 0xFFFFFFFFFFFFFFF8;
                            }
                            v715.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C537740;
                          }
                        }
                        else
                        {
LABEL_880:
                          LODWORD(v726[0]) = 1;
                          v726[1] = 0;
                          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(v727);
                          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v727 + 1);
                          *((_QWORD *)&v727[0] + 1) = 0;
                          v725 = 0;
                          sub_20C37A850((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v715, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v726, (uint64_t *)&v725);
                          v715.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C537740;
                          if ((v725 & 7) != 0)
                          {
                            v544 = (unsigned int *)(v725 & 0xFFFFFFFFFFFFFFF8);
                            do
                              v545 = __ldxr(v544);
                            while (__stlxr(v545 - 2, v544));
                          }
                          if ((BYTE8(v727[0]) & 7) != 0)
                          {
                            v546 = (unsigned int *)(*((_QWORD *)&v727[0] + 1) & 0xFFFFFFFFFFFFFFF8);
                            do
                              v547 = __ldxr(v546);
                            while (__stlxr(v547 - 2, v546));
                          }
                          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v727 + 1);
                          sub_20BFD265C(v727);
                          if (v726[1])
                            sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v726[1]);
                        }
                        v548 = (std::__shared_weak_count *)v704;
                        if (v704)
                        {
                          v549 = (unint64_t *)(v704 + 8);
                          do
                            v550 = __ldaxr(v549);
                          while (__stlxr(v550 - 1, v549));
                          if (!v550)
                          {
                            ((void (*)(std::__shared_weak_count *))v548->__on_zero_shared)(v548);
                            std::__shared_weak_count::__release_weak(v548);
                          }
                        }
                        if (v715.__r_.__value_.__l.__size_
                          && (*(_BYTE *)(v715.__r_.__value_.__l.__size_ + 57) & 8) == 0
                          && (*(unsigned int (**)(std::string *))(v715.__r_.__value_.__r.__words[0] + 32))(&v715))
                        {
                          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v726, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v717);
                          v726[0] = off_24C53D820;
                          v551 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
                          if (!v551)
                            v551 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
                          v552 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
                          if (!v552)
                            v552 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
                          v553 = pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::Bind((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)&v746, (const pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)&v715, (const pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)v726, (char **)&v705, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v551 + 40), v552);
                          pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::~UsdShadeMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)v726);
                          if (v553)
                          {
                            v554 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
                            if (!v554)
                              v554 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
                            pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetCollectionBindingRel((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)&v746, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v705, v554, (uint64_t)v726);
                            v555 = (uint64_t *)sub_20C398E78(v726);
                            v556 = v711;
                            if ((unint64_t)v711 >= v712)
                            {
                              v560 = sub_20BFCA068(&v710, v555);
                            }
                            else
                            {
                              v557 = *v555;
                              *(_QWORD *)v711 = *v555;
                              if ((v557 & 7) != 0)
                              {
                                v558 = (unsigned int *)(v557 & 0xFFFFFFFFFFFFFFF8);
                                do
                                  v559 = __ldxr(v558);
                                while (__stxr(v559 + 2, v558));
                                if ((v559 & 1) == 0)
                                  *(_QWORD *)v556 &= 0xFFFFFFFFFFFFFFF8;
                              }
                              v560 = v556 + 8;
                            }
                            v711 = v560;
                            if ((BYTE8(v727[0]) & 7) != 0)
                            {
                              v593 = (unsigned int *)(*((_QWORD *)&v727[0] + 1) & 0xFFFFFFFFFFFFFFF8);
                              do
                                v594 = __ldxr(v593);
                              while (__stlxr(v594 - 2, v593));
                            }
                            goto LABEL_928;
                          }
                        }
                        else
                        {
                          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v726, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v717);
                          v726[0] = off_24C53D820;
                          v561 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
                          if (!v561)
                            v561 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
                          v562 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
                          if (!v562)
                            v562 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
                          v563 = pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::Bind((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)&v746, (const pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)v726, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v561 + 40), v562);
                          pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::~UsdShadeMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)v726);
                          if (v563)
                          {
                            v564 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
                            if (!v564)
                              v564 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
                            pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetDirectBindingRel((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)&v746, v564, (uint64_t)v726);
                            v565 = (uint64_t *)sub_20C398E78(v726);
                            v566 = v711;
                            if ((unint64_t)v711 >= v712)
                            {
                              v570 = sub_20BFCA068(&v710, v565);
                            }
                            else
                            {
                              v567 = *v565;
                              *(_QWORD *)v711 = *v565;
                              if ((v567 & 7) != 0)
                              {
                                v568 = (unsigned int *)(v567 & 0xFFFFFFFFFFFFFFF8);
                                do
                                  v569 = __ldxr(v568);
                                while (__stxr(v569 + 2, v568));
                                if ((v569 & 1) == 0)
                                  *(_QWORD *)v566 &= 0xFFFFFFFFFFFFFFF8;
                              }
                              v570 = v566 + 8;
                            }
                            v711 = v570;
                            if ((BYTE8(v727[0]) & 7) != 0)
                            {
                              v571 = (unsigned int *)(*((_QWORD *)&v727[0] + 1) & 0xFFFFFFFFFFFFFFF8);
                              do
                                v572 = __ldxr(v571);
                              while (__stlxr(v572 - 2, v571));
                            }
LABEL_928:
                            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v727 + 1);
                            sub_20BFD265C(v727);
                            if (v726[1])
                              sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v726[1]);
                          }
                        }
                        pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::~UsdCollectionAPI((pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)&v715);
                        if ((v717[24] & 7) != 0)
                        {
                          v573 = (unsigned int *)(*(_QWORD *)&v717[24] & 0xFFFFFFFFFFFFFFF8);
                          do
                            v574 = __ldxr(v573);
                          while (__stlxr(v574 - 2, v573));
                        }
                        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v717[20]);
                        v472 = (unint64_t *)v641;
                        sub_20BFD265C(&v717[16]);
                        if (*(_QWORD *)&v717[8])
                          sub_20C35C614(*(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v717[8]);
                        if ((v705 & 7) != 0)
                        {
                          v575 = (unsigned int *)(v705 & 0xFFFFFFFFFFFFFFF8);
                          do
                            v576 = __ldxr(v575);
                          while (__stlxr(v576 - 2, v575));
                        }
                      }
                      pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::~UsdShadeMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)&v706);
                      v471 += 2;
                      if (v471 == v472)
                        break;
                      continue;
                    }
                  }
                  v726[0] = &v708;
                  sub_20BDE9EB0((void ***)v726);
                  if (v710 != v711)
                  {
                    sub_20C1292A0((uint64_t *)&v710, v711, v713, v714, v714 - v713);
                    sub_20C7D4878((uint64_t)v650, (uint64_t (**)(_QWORD, uint64_t))&v710);
                  }
                  v726[0] = &v710;
                  sub_20BEEB2B8((void ***)v726);
                  v726[0] = &v713;
                  sub_20BEEB2B8((void ***)v726);
                  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::~UsdShadeMaterialBindingAPI((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)&v746);
                  sub_20BF2B200((uint64_t)&v719, (_QWORD *)v719.__r_.__value_.__l.__size_);
                  if ((v722 & 7) != 0)
                  {
                    v595 = (unsigned int *)(v722 & 0xFFFFFFFFFFFFFFF8);
                    do
                      v596 = __ldxr(v595);
                    while (__stlxr(v596 - 2, v595));
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v721 + 1);
                  sub_20BFD265C(&v721);
                  if (v720[1])
                    sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v720[1]);
                  if (v649)
                  {
                    v597 = (unint64_t *)&v649->__shared_owners_;
                    do
                      v598 = __ldaxr(v597);
                    while (__stlxr(v598 - 1, v597));
                    if (!v598)
                    {
                      ((void (*)(std::__shared_weak_count *))v649->__on_zero_shared)(v649);
                      std::__shared_weak_count::__release_weak(v649);
                    }
                  }
                  if (pxrInternal__aapl__pxrReserved__::UsdVariantSet::AddVariant((pxrInternal__aapl__pxrReserved__::UsdVariantSet *)&v697, (__int128 *)v653, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)1))
                  {
                    pxrInternal__aapl__pxrReserved__::UsdVariantSet::SetVariantSelection((pxrInternal__aapl__pxrReserved__::UsdVariantSet *)&v697, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v653);
                    *(_OWORD *)v717 = 0uLL;
                    pxrInternal__aapl__pxrReserved__::UsdVariantSet::GetVariantEditContext((pxrInternal__aapl__pxrReserved__::UsdObject *)&v697, (uint64_t *)v717, (uint64_t)&v746);
                    pxrInternal__aapl__pxrReserved__::UsdEditContext::UsdEditContext(v726, &v746);
                    sub_20C2011B8((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v748);
                    v599 = *((_QWORD *)&v747 + 1);
                    if (*((_QWORD *)&v747 + 1))
                    {
                      v600 = (unsigned int *)(*((_QWORD *)&v747 + 1) + 8);
                      do
                      {
                        v601 = __ldxr(v600);
                        v602 = v601 - 1;
                      }
                      while (__stlxr(v602, v600));
                      if (!v602)
                        (*(void (**)(uint64_t))(*(_QWORD *)v599 + 8))(v599);
                    }
                    v603 = *((_QWORD *)&v746 + 1);
                    if (*((_QWORD *)&v746 + 1))
                    {
                      v604 = (unsigned int *)(*((_QWORD *)&v746 + 1) + 8);
                      do
                      {
                        v605 = __ldxr(v604);
                        v606 = v605 - 1;
                      }
                      while (__stlxr(v606, v604));
                      if (!v606)
                        (*(void (**)(uint64_t))(*(_QWORD *)v603 + 8))(v603);
                    }
                    v607 = *(_QWORD *)&v717[8];
                    if (*(_QWORD *)&v717[8])
                    {
                      v608 = (unsigned int *)(*(_QWORD *)&v717[8] + 8);
                      do
                      {
                        v609 = __ldxr(v608);
                        v610 = v609 - 1;
                      }
                      while (__stlxr(v610, v608));
                      if (!v610)
                        (*(void (**)(uint64_t))(*(_QWORD *)v607 + 8))(v607);
                    }
                    pxrInternal__aapl__pxrReserved__::UsdPrim::GetReferences((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v660, (uint64_t)&v746);
                    sub_20C348EEC((uint64_t)v650, (int *)v720);
                    pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)v717, 0.0, 1.0);
                    pxrInternal__aapl__pxrReserved__::UsdReferences::AddInternalReference((pxrInternal__aapl__pxrReserved__::UsdObject *)&v746, (uint64_t)v720, (uint64_t)v717, 1);
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v720 + 1);
                    sub_20BFD265C(v720);
                    if ((BYTE8(v747) & 7) != 0)
                    {
                      v611 = (unsigned int *)(*((_QWORD *)&v747 + 1) & 0xFFFFFFFFFFFFFFF8);
                      do
                        v612 = __ldxr(v611);
                      while (__stlxr(v612 - 2, v611));
                    }
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v747 + 1);
                    sub_20BFD265C(&v747);
                    if (*((_QWORD *)&v746 + 1))
                      sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v746 + 1));
                    pxrInternal__aapl__pxrReserved__::UsdEditContext::~UsdEditContext((pxrInternal__aapl__pxrReserved__::UsdEditContext *)v726);
                  }
                  else
                  {
                    v726[0] = "usdMtlx/reader.cpp";
                    v726[1] = "UsdMtlxRead";
                    *(_QWORD *)&v727[0] = 2740;
                    *((_QWORD *)&v727[0] + 1) = "void pxrInternal__aapl__pxrReserved__::UsdMtlxRead(const MaterialX::Cons"
                                                "tDocumentPtr &, const UsdStagePtr &, const SdfPath &, const SdfPath &)";
                    LOBYTE(v727[1]) = 0;
                    if (v654 >= 0)
                      v613 = v653;
                    else
                      v613 = (void **)v653[0];
                    if (v702 >= 0)
                      v614 = (const char *)&v701;
                    else
                      v614 = (const char *)v701;
                    sub_20C348EEC((uint64_t)&v660, (int *)&v746);
                    v615 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v746);
                    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v726, 1, (pxrInternal__aapl__pxrReserved__ *)"Failed to author look variant '%s' in variant set '%s' on <%s>", (const char *)v613, v614, v615);
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v746 + 1);
                    sub_20BFD265C(&v746);
                  }
                }
                if ((v652 & 7) != 0)
                {
                  v616 = (unsigned int *)(v652 & 0xFFFFFFFFFFFFFFF8);
                  do
                    v617 = __ldxr(v616);
                  while (__stlxr(v617 - 2, v616));
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v651 + 1);
                sub_20BFD265C(&v651);
                if (v650[1])
                  sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v650[1]);
                if (SHIBYTE(v654) < 0)
                  operator delete(v653[0]);
                v418 = v642 + 16;
                v419 = v633;
                continue;
              }
              break;
            }
            v726[0] = &v655;
            sub_20BDE9EB0((void ***)v726);
            v382 = v626 + 2;
            if (v626 + 2 == (uint64_t *)v625)
            {
LABEL_1028:
              v726[0] = &v658;
              sub_20BDE9EB0((void ***)v726);
              pxrInternal__aapl__pxrReserved__::UsdVariantSet::ClearVariantSelection((pxrInternal__aapl__pxrReserved__::UsdVariantSet *)&v697);
              if (v702 < 0)
                operator delete(v701);
              if ((v700 & 7) != 0)
              {
                v618 = (unsigned int *)(v700 & 0xFFFFFFFFFFFFFFF8);
                do
                  v619 = __ldxr(v618);
                while (__stlxr(v619 - 2, v618));
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v699 + 1);
              sub_20BFD265C(&v699);
              if (v698)
                sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v698);
              if ((v661 & 7) != 0)
              {
                v620 = (unsigned int *)(v661 & 0xFFFFFFFFFFFFFFF8);
                do
                  v621 = __ldxr(v620);
                while (__stlxr(v621 - 2, v620));
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v660.__r_.__value_.__r.__words[2] + 1);
              sub_20BFD265C(&v660.__r_.__value_.__r.__words[2]);
              if (v660.__r_.__value_.__l.__size_)
                sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v660.__r_.__value_.__l.__size_);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v663);
              sub_20BFD265C(&v662);
              sub_20BDECAB8((uint64_t)&v743, v744);
              v726[0] = &v740;
              sub_20BE93030((void ***)v726);
              sub_20C7D4364((uint64_t)&v737, v738);
              v726[0] = &v735[3];
              sub_20BDE9EB0((void ***)v726);
              v726[0] = v735;
              sub_20BDE5038((void ***)v726);
              sub_20C7D4764((uint64_t)&v664, v665);
              goto LABEL_1041;
            }
            goto LABEL_613;
          }
          sub_20C215CE8((uint64_t **)v726, (unint64_t *)&v715, (uint64_t *)&v715);
          if ((v388 & 1) == 0)
          {
            exception = __cxa_allocate_exception(0x20uLL);
            sub_20C93D684((uint64_t)v715.__r_.__value_.__l.__data_, (std::string *)v717);
            v623 = std::string::insert((std::string *)v717, 0, "Encountered cycle at element: ");
            v624 = *(_OWORD *)&v623->__r_.__value_.__l.__data_;
            *(_QWORD *)&v747 = *((_QWORD *)&v623->__r_.__value_.__l + 2);
            v746 = v624;
            v623->__r_.__value_.__l.__size_ = 0;
            v623->__r_.__value_.__r.__words[2] = 0;
            v623->__r_.__value_.__r.__words[0] = 0;
            sub_20C7C76F4(exception, &v746);
            *exception = &unk_24C54B9A8;
            __cxa_throw(exception, (struct type_info *)&unk_24C54B7E0, (void (*)(void *))sub_20C7C76F0);
          }
          sub_20BDEA72C(&v655, (__int128 *)&v715);
          v389 = v720[0];
          sub_20C7C0F74();
          v390 = sub_20C67F73C((_QWORD *)(v715.__r_.__value_.__r.__words[0] + 160), (unsigned __int8 *)&qword_25498D0B8);
          if (v390)
            v391 = (__int128 *)(v390 + 40);
          else
            v391 = sub_20C957390();
          v392 = *((unsigned __int8 *)v391 + 23);
          if ((v392 & 0x80u) != 0)
            v392 = *((_QWORD *)v391 + 1);
          if (!v392)
            v391 = sub_20C957390();
          v393 = sub_20C67F73C(v389 + 12, (unsigned __int8 *)v391);
          v394 = (std::string::size_type)v393;
          if (v393)
          {
            v395 = (void *)*((_QWORD *)v393 + 5);
            v396 = *(std::__shared_weak_count **)(v394 + 48);
            if (v396)
            {
              v397 = (unint64_t *)&v396->__shared_owners_;
              do
                v398 = __ldxr(v397);
              while (__stxr(v398 + 1, v397));
            }
            if (v395)
            {
              v395 = __dynamic_cast(v395, (const struct __class_type_info *)&unk_24C55B1D8, (const struct __class_type_info *)&unk_24C54BA20, 0);
              v394 = 0;
              if (v395)
                v399 = 0;
              else
                v399 = v396;
              if (v396 && v395)
              {
                v400 = (unint64_t *)&v396->__shared_owners_;
                do
                  v401 = __ldxr(v400);
                while (__stxr(v401 + 1, v400));
                v394 = (std::string::size_type)v396;
              }
              else
              {
                v396 = v399;
              }
            }
            else
            {
              v394 = 0;
            }
          }
          else
          {
            v396 = 0;
            v395 = 0;
          }
          v402 = (std::__shared_weak_count *)v715.__r_.__value_.__l.__size_;
          v715.__r_.__value_.__r.__words[0] = (std::string::size_type)v395;
          v715.__r_.__value_.__l.__size_ = v394;
          if (!v402)
            goto LABEL_645;
          v403 = (unint64_t *)&v402->__shared_owners_;
          do
            v404 = __ldaxr(v403);
          while (__stlxr(v404 - 1, v403));
          if (!v404)
          {
            ((void (*)(std::__shared_weak_count *))v402->__on_zero_shared)(v402);
            std::__shared_weak_count::__release_weak(v402);
            if (!v396)
              goto LABEL_651;
          }
          else
          {
LABEL_645:
            if (!v396)
              goto LABEL_651;
          }
          v405 = (unint64_t *)&v396->__shared_owners_;
          do
            v406 = __ldaxr(v405);
          while (__stlxr(v406 - 1, v405));
          if (!v406)
          {
            ((void (*)(std::__shared_weak_count *))v396->__on_zero_shared)(v396);
            std::__shared_weak_count::__release_weak(v396);
          }
LABEL_651:
          v384 = v715.__r_.__value_.__r.__words[0];
        }
      }
    }
    if (*(_BYTE *)(*(_QWORD *)v112 + 47))
    {
      while (*(unsigned __int8 *)v117 == *(unsigned __int8 *)v118)
      {
        v117 = (const void **)((char *)v117 + 1);
        v118 = (uint64_t *)((char *)v118 + 1);
        if (!--v114)
          goto LABEL_217;
      }
      goto LABEL_218;
    }
LABEL_217:
    sub_20C7D1314((char **)v726, v112);
    goto LABEL_218;
  }
LABEL_1041:
  sub_20C7C1694((uint64_t)&v672);
}

void sub_20C7BF944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,void *__p)
{
  char a68;
  char a69;
  char a72;
  void *a73;

  __cxa_guard_abort(&qword_25498D3E8);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a57);
  sub_20C35C2E0((uint64_t)&a59);
  if (a68 < 0)
    operator delete(__p);
  STACK[0x460] = (unint64_t)&a69;
  sub_20BDE9EB0((void ***)&STACK[0x460]);
  STACK[0x460] = (unint64_t)&a72;
  sub_20BDE9EB0((void ***)&STACK[0x460]);
  sub_20C532868((uint64_t)&STACK[0x390]);
  sub_20C35C2E0((uint64_t)&a73);
  sub_20BFD1A18(&STACK[0x218]);
  sub_20C7C1628((uint64_t)&STACK[0x560]);
  sub_20C7D4764((uint64_t)&STACK[0x220], (_QWORD *)STACK[0x228]);
  sub_20C7C1694((uint64_t)&STACK[0x268]);
  _Unwind_Resume(a1);
}

uint64_t sub_20C7C0A20(uint64_t a1, _QWORD *a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v21;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v22;
  int v23;
  int v24;
  uint64_t v25;

  *(_QWORD *)a1 = *a2;
  v5 = a2[1];
  *(_QWORD *)(a1 + 8) = v5;
  if (v5)
  {
    v6 = (unsigned int *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&v21, "Collections");
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(a3, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v21, (_DWORD *)(a1 + 16));
  if ((v21 & 7) != 0)
  {
    v8 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&v21, "Looks");
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(a3, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v21, (_DWORD *)(a1 + 24));
  if ((v21 & 7) != 0)
  {
    v10 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&v21, "Materials");
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(a3, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v21, (_DWORD *)(a1 + 32));
  if ((v21 & 7) != 0)
  {
    v12 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&v21, "NodeGraphs");
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(a3, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v21, (_DWORD *)(a1 + 40));
  if ((v21 & 7) != 0)
  {
    v14 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&v21, "Shaders");
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(a3, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v21, (_DWORD *)(a1 + 48));
  if ((v21 & 7) != 0)
  {
    v16 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stlxr(v17 - 2, v16));
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 104) = a1 + 112;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 128) = a1 + 136;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = a1 + 160;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 224) = a1 + 232;
  *(_QWORD *)(a1 + 176) = a1 + 184;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 200) = a1 + 208;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 248) = 1;
  *(_QWORD *)(a1 + 264) = 0;
  LODWORD(v21) = 1;
  v22 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v23);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v24);
  v25 = 0;
  *(_QWORD *)pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(a1 + 272), (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v21) = off_24C53D820;
  if ((v25 & 7) != 0)
  {
    v18 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v24);
  sub_20BFD265C(&v23);
  if (v22)
    sub_20C35C614(v22);
  return a1;
}

void sub_20C7C0D38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _Unwind_Exception *exception_object, _DWORD *a16, uint64_t a17, _DWORD *a18, _DWORD *a19, _DWORD *a20,_DWORD *a21,_DWORD *a22,uint64_t a23,pxrInternal__aapl__pxrReserved__::Usd_PrimData *a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v32;
  _DWORD *v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;

  if ((a26 & 7) != 0)
  {
    v35 = (unsigned int *)(a26 & 0xFFFFFFFFFFFFFFF8);
    do
      v36 = __ldxr(v35);
    while (__stlxr(v36 - 2, v35));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v33);
  sub_20BFD265C(a22);
  if (a24)
    sub_20C35C614(a24);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v32);
  sub_20C7C1B6C(v27, *(_QWORD **)(v26 + 232));
  sub_20C7C1C78(v34, *(_QWORD **)(v26 + 208));
  sub_20C7C1CCC(v31, *(_QWORD **)(v26 + 184));
  sub_20C7C1CCC(v29, *(_QWORD **)(v26 + 160));
  sub_20C7A65B8(v28, *(_QWORD **)(v26 + 136));
  sub_20C7C1D50(v30, *(_QWORD **)(v26 + 112));
  sub_20BDE5038((void ***)&a23);
  sub_20C7C1F14(a17, *(_QWORD **)(v26 + 64));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v26 + 52));
  sub_20BFD265C(a16);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v26 + 44));
  sub_20BFD265C(a18);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v26 + 36));
  sub_20BFD265C(a19);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v26 + 28));
  sub_20BFD265C(a20);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v26 + 20));
  sub_20BFD265C(a21);
  v37 = *(unsigned int **)(v26 + 8);
  if (v37)
  {
    v38 = v37 + 2;
    do
    {
      v39 = __ldxr(v38);
      v40 = v39 - 1;
    }
    while (__stlxr(v40, v38));
    if (!v40)
      (*(void (**)(unsigned int *))(*(_QWORD *)v37 + 8))(v37);
  }
  _Unwind_Resume(a1);
}

void sub_20C7C0F74()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25498D358);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_25498D358))
    {
      sub_20C7C2024();
      __cxa_guard_release(&qword_25498D358);
    }
  }
}

void sub_20C7C0FC4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498D358);
  _Unwind_Resume(a1);
}

__int128 **sub_20C7C0FDC(__int128 **a1, uint64_t a2, unsigned __int8 *a3)
{
  unsigned __int8 *v4;
  __int128 *v5;
  uint64_t v6;

  v4 = sub_20C67F73C((_QWORD *)(*(_QWORD *)a2 + 160), a3);
  if (v4)
    v5 = (__int128 *)(v4 + 40);
  else
    v5 = sub_20C957390();
  v6 = *((unsigned __int8 *)v5 + 23);
  if ((v6 & 0x80u) != 0)
    v6 = *((_QWORD *)v5 + 1);
  if (!v6)
    v5 = sub_20C957390();
  *a1 = v5;
  return a1;
}

void sub_20C7C103C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 *v3;
  std::string **i;
  std::string **v5;
  const char *v6;
  char *v7;
  std::string::__raw *v8;
  std::__shared_weak_count *v9;
  std::string *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t *v13;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  char IsDefined;
  char v16;
  const char *v17;
  char *v18;
  _QWORD *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v44;
  std::__shared_weak_count *v45;
  char v46[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v47;
  int v48;
  int v49;
  uint64_t v50;
  _QWORD *v51[3];
  int v52;
  int v53;
  std::string **v54;
  std::string **v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  void **v58[2];
  uint64_t v59[14];
  uint64_t v60;
  std::__shared_weak_count *v61;

  v2 = *a1;
  v3 = sub_20C957390();
  sub_20C7C28F8(v2, (unsigned __int8 *)v3, (uint64_t)&v54);
  v5 = v54;
  for (i = v55; v5 != i; v5 += 2)
  {
    if (sub_20C7C289C(0))
    {
      v8 = (std::string::__raw *)&(*v5)[2];
      if (SHIBYTE((*v5)[2].__r_.__value_.__r.__words[2]) < 0)
        v8 = (std::string::__raw *)v8->__words[0];
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Read node graph %s\n", v6, v7, v8);
    }
    v10 = *v5;
    v9 = (std::__shared_weak_count *)v5[1];
    v44 = (uint64_t)*v5;
    v45 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    v13 = sub_20C7C2AAC((uint64_t **)(a2 + 104), (unint64_t *)&v44);
    IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v13, v14);
    if (v10)
      v16 = IsDefined;
    else
      v16 = 1;
    if ((v16 & 1) == 0)
    {
      sub_20C951A6C(v10, &v60);
      if (v60)
      {
        if (sub_20C7C289C(0))
        {
          v19 = (_QWORD *)(v60 + 48);
          if (*(char *)(v60 + 71) < 0)
            v19 = (_QWORD *)*v19;
          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Add mtlxNodeDef %s\n", v17, v18, v19);
        }
        sub_20C7C2BA0((uint64_t)v58);
        v56 = v60;
        v57 = v61;
        if (v61)
        {
          v20 = (unint64_t *)&v61->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        sub_20BDE881C(v58, &v56);
        v22 = v57;
        if (v57)
        {
          v23 = (unint64_t *)&v57->__shared_owners_;
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        v56 = v44;
        v57 = v45;
        if (v45)
        {
          v25 = (unint64_t *)&v45->__shared_owners_;
          do
            v26 = __ldxr(v25);
          while (__stxr(v26 + 1, v25));
        }
        sub_20BDE881C(v59, &v56);
        v27 = v57;
        if (v57)
        {
          v28 = (unint64_t *)&v57->__shared_owners_;
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 - 1, v28));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v30 = v61;
        v56 = v60;
        v57 = v61;
        if (v61)
        {
          v31 = (unint64_t *)&v61->__shared_owners_;
          do
            v32 = __ldxr(v31);
          while (__stxr(v32 + 1, v31));
        }
        sub_20C7C2C0C((uint64_t)v58, a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 40), &v56);
        if (v30)
        {
          v33 = (unint64_t *)&v30->__shared_owners_;
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
        sub_20C7C2CF0((uint64_t)v13, (uint64_t *)v58);
        sub_20C7C2E38((uint64_t)v58);
      }
      v35 = v61;
      if (v61)
      {
        v36 = (unint64_t *)&v61->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
    }
    sub_20C7C2EC4((uint64_t)v46, (uint64_t)v13);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v53);
    sub_20BFD265C(&v52);
    sub_20C7C1E98((uint64_t)v51, v51[1]);
    if ((v50 & 7) != 0)
    {
      v38 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
      do
        v39 = __ldxr(v38);
      while (__stlxr(v39 - 2, v38));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v49);
    sub_20BFD265C(&v48);
    if (v47)
      sub_20C35C614(v47);
    v40 = v45;
    if (v45)
    {
      v41 = (unint64_t *)&v45->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
  }
  v58[0] = (void **)&v54;
  sub_20BDE9EB0(v58);
}

void sub_20C7C13C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void **a28)
{
  uint64_t v28;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v28 - 104));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a13);
  a28 = (void **)&a23;
  sub_20BDE9EB0(&a28);
  _Unwind_Resume(a1);
}

void sub_20C7C1434(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  void **v20[2];
  void **v21;
  void **v22;
  const void **v23;
  std::__shared_weak_count *v24;

  v4 = (std::__shared_weak_count *)a2[1];
  v21 = (void **)*a2;
  v22 = (void **)&v4->__vftable;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  sub_20C7D3010(a1, (uint64_t *)&v21, (uint64_t *)&v23);
  sub_20C7D2F74(a1, &v23);
  v20[0] = (void **)&v23;
  sub_20BE93030(v20);
  if (v4)
  {
    v7 = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  sub_20C7D33B4(*a2, &v23);
  if (v23)
  {
    sub_20C93B048((uint64_t)v23, &v21);
    if (v21)
    {
      v9 = (std::__shared_weak_count *)v22;
      v20[0] = v21;
      v20[1] = v22;
      if (v22)
      {
        v10 = (unint64_t *)(v22 + 1);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      sub_20C7C1434(a1, v20);
      if (v9)
      {
        v12 = (unint64_t *)&v9->__shared_owners_;
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    v14 = (std::__shared_weak_count *)v22;
    if (v22)
    {
      v15 = (unint64_t *)(v22 + 1);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  v17 = v24;
  if (v24)
  {
    v18 = (unint64_t *)&v24->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_20C7C15D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;
  uint64_t v8;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  v8 = va_arg(va2, _QWORD);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va1);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va2);
  _Unwind_Resume(a1);
}

uint64_t sub_20C7C1628(uint64_t a1)
{
  void **v3;

  sub_20BDECAB8(a1 + 96, *(char **)(a1 + 104));
  v3 = (void **)(a1 + 72);
  sub_20BE93030(&v3);
  sub_20C7D4364(a1 + 48, *(_QWORD **)(a1 + 56));
  v3 = (void **)(a1 + 24);
  sub_20BDE9EB0(&v3);
  v3 = (void **)a1;
  sub_20BDE5038(&v3);
  return a1;
}

uint64_t sub_20C7C1694(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  void **v7;

  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::~UsdShadeMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)(a1 + 272));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 256));
  sub_20C7C1B6C(a1 + 224, *(_QWORD **)(a1 + 232));
  sub_20C7C1C78(a1 + 200, *(_QWORD **)(a1 + 208));
  sub_20C7C1CCC(a1 + 176, *(_QWORD **)(a1 + 184));
  sub_20C7C1CCC(a1 + 152, *(_QWORD **)(a1 + 160));
  sub_20C7A65B8(a1 + 128, *(_QWORD **)(a1 + 136));
  sub_20C7C1D50(a1 + 104, *(_QWORD **)(a1 + 112));
  v7 = (void **)(a1 + 80);
  sub_20BDE5038(&v7);
  sub_20C7C1F14(a1 + 56, *(_QWORD **)(a1 + 64));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 52));
  sub_20BFD265C((_DWORD *)(a1 + 48));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 44));
  sub_20BFD265C((_DWORD *)(a1 + 40));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 36));
  sub_20BFD265C((_DWORD *)(a1 + 32));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_20BFD265C((_DWORD *)(a1 + 24));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_20BFD265C((_DWORD *)(a1 + 16));
  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::UsdMtlxReadNodeGraphs(uint64_t *a1, _QWORD *a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 *v17;
  uint64_t v18;
  uint64_t i;
  std::__shared_weak_count *v20;
  void **p_data;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34[2];
  char *v35;
  const char *v36;
  uint64_t v37;
  const char *v38;
  char v39;
  char v40[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v41;
  int v42;
  int v43;
  uint64_t v44;
  _QWORD *v45[3];
  int v46;
  int v47;
  std::string *v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  uint64_t v51;

  if (*a1)
  {
    v6 = sub_20C369024(a2);
    if (v7 & 1 | (unint64_t)v6)
    {
      if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(a3))
      {
        sub_20C7C0A20((uint64_t)&v35, a2, a3);
        v8 = (std::__shared_weak_count *)a1[1];
        v34[0] = *a1;
        v34[1] = (uint64_t)v8;
        if (v8)
        {
          p_shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldxr(p_shared_owners);
          while (__stxr(v10 + 1, p_shared_owners));
        }
        sub_20C7C103C(v34, (uint64_t)&v35);
        if (v8)
        {
          v11 = (unint64_t *)&v8->__shared_owners_;
          do
            v12 = __ldaxr(v11);
          while (__stlxr(v12 - 1, v11));
          if (!v12)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        v14 = *a1;
        v13 = (std::__shared_weak_count *)a1[1];
        if (v13)
        {
          v15 = (unint64_t *)&v13->__shared_owners_;
          do
            v16 = __ldxr(v15);
          while (__stxr(v16 + 1, v15));
        }
        v17 = sub_20C957390();
        sub_20C7C28F8(v14, (unsigned __int8 *)v17, (uint64_t)&v50);
        v18 = v50;
        for (i = v51; v18 != i; v18 += 16)
        {
          sub_20C951A6C(*(std::string **)v18, &v48);
          p_data = (void **)&v48->__r_.__value_.__l.__data_;
          v20 = v49;
          if (!v49)
            goto LABEL_20;
          v22 = (unint64_t *)&v49->__shared_owners_;
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
            if (!p_data)
            {
LABEL_24:
              v24 = *(std::__shared_weak_count **)(v18 + 8);
              v48 = *(std::string **)v18;
              v49 = v24;
              if (v24)
              {
                v25 = (unint64_t *)&v24->__shared_owners_;
                do
                  v26 = __ldxr(v25);
                while (__stxr(v26 + 1, v25));
              }
              sub_20C7CF8E0((uint64_t)&v35, (uint64_t *)&v48, (uint64_t)v40);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v47);
              sub_20BFD265C(&v46);
              sub_20C7C1E98((uint64_t)v45, v45[1]);
              if ((v44 & 7) != 0)
              {
                v27 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
                do
                  v28 = __ldxr(v27);
                while (__stlxr(v28 - 2, v27));
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v43);
              sub_20BFD265C(&v42);
              if (v41)
                sub_20C35C614(v41);
              v29 = v49;
              if (v49)
              {
                v30 = (unint64_t *)&v49->__shared_owners_;
                do
                  v31 = __ldaxr(v30);
                while (__stlxr(v31 - 1, v30));
                if (!v31)
                {
                  ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
                  std::__shared_weak_count::__release_weak(v29);
                }
              }
            }
          }
          else
          {
LABEL_20:
            if (!p_data)
              goto LABEL_24;
          }
        }
        v48 = (std::string *)&v50;
        sub_20BDE9EB0((void ***)&v48);
        if (v13)
        {
          v32 = (unint64_t *)&v13->__shared_owners_;
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 - 1, v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        sub_20C7C1694((uint64_t)&v35);
      }
      else
      {
        v35 = "usdMtlx/reader.cpp";
        v36 = "UsdMtlxReadNodeGraphs";
        v37 = 2762;
        v38 = "void pxrInternal__aapl__pxrReserved__::UsdMtlxReadNodeGraphs(const MaterialX::ConstDocumentPtr &, const Us"
              "dStagePtr &, const SdfPath &)";
        v39 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v35, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid internal prim path");
      }
    }
    else
    {
      v35 = "usdMtlx/reader.cpp";
      v36 = "UsdMtlxReadNodeGraphs";
      v37 = 2758;
      v38 = "void pxrInternal__aapl__pxrReserved__::UsdMtlxReadNodeGraphs(const MaterialX::ConstDocumentPtr &, const UsdS"
            "tagePtr &, const SdfPath &)";
      v39 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v35, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    }
  }
  else
  {
    v35 = "usdMtlx/reader.cpp";
    v36 = "UsdMtlxReadNodeGraphs";
    v37 = 2754;
    v38 = "void pxrInternal__aapl__pxrReserved__::UsdMtlxReadNodeGraphs(const MaterialX::ConstDocumentPtr &, const UsdSta"
          "gePtr &, const SdfPath &)";
    v39 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v35, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid MaterialX document");
  }
}

void sub_20C7C1B14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  sub_20C7C1694((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20C7C1B6C(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20C7C1B6C(a1, *a2);
    sub_20C7C1B6C(a1, a2[1]);
    sub_20C7C1BB4((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_20C7C1BB4(uint64_t a1)
{
  sub_20C7C1BF4(a1 + 24, *(_QWORD **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_20C7C1BF4(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20C7C1BF4(a1, *a2);
    sub_20C7C1BF4(a1, a2[1]);
    sub_20C7C1C3C((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_20C7C1C3C(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_20C7C1C78(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20C7C1C78(a1, *a2);
    sub_20C7C1C78(a1, a2[1]);
    pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::~UsdCollectionAPI((pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)(a2 + 6));
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a2 + 4));
    operator delete(a2);
  }
}

void sub_20C7C1CCC(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20C7C1CCC(a1, *a2);
    sub_20C7C1CCC(a1, a2[1]);
    sub_20C7C1D14((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_20C7C1D14(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::~UsdCollectionAPI((pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_20C7C1D50(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20C7C1D50(a1, *a2);
    sub_20C7C1D50(a1, a2[1]);
    sub_20C7C1D98((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_20C7C1D98(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 76));
  sub_20BFD265C((_DWORD *)(a1 + 72));
  sub_20C7C1E98(a1 + 48, *(_QWORD **)(a1 + 56));
  v2 = *(_QWORD *)(a1 + 40);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 36));
  sub_20BFD265C((_DWORD *)(a1 + 32));
  v5 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 24);
  if (v5)
    sub_20C35C614(v5);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)a1);
}

uint64_t sub_20C7C1E18(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 60));
  sub_20BFD265C((_DWORD *)(a1 + 56));
  sub_20C7C1E98(a1 + 32, *(_QWORD **)(a1 + 40));
  v2 = *(_QWORD *)(a1 + 24);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_20BFD265C((_DWORD *)(a1 + 16));
  v5 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 8);
  if (v5)
    sub_20C35C614(v5);
  return a1;
}

void sub_20C7C1E98(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20C7C1E98(a1, *a2);
    sub_20C7C1E98(a1, a2[1]);
    sub_20C7C1EE0((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_20C7C1EE0(uint64_t a1)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;

  v1 = *(_QWORD *)(a1 + 24);
  if ((v1 & 7) != 0)
  {
    v2 = (unsigned int *)(v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_20C7C1F14(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20C7C1F14(a1, *a2);
    sub_20C7C1F14(a1, a2[1]);
    sub_20C7C1F5C((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_20C7C1F5C(uint64_t a1)
{
  sub_20C7C1F9C(a1 + 24, *(_QWORD **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_20C7C1F9C(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20C7C1F9C(a1, *a2);
    sub_20C7C1F9C(a1, a2[1]);
    sub_20C7C1FE4((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_20C7C1FE4(uint64_t a1)
{
  sub_20BE78E5C(a1 + 24, *(_QWORD **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

_QWORD *sub_20C7C2024()
{
  _QWORD *v0;

  v0 = sub_20BDDC0E4(&qword_25498CF68, "channels");
  sub_20BDDC0E4(v0 + 3, "cms");
  sub_20BDDC0E4(&qword_25498CF98, "cmsconfig");
  sub_20BDDC0E4(&qword_25498CFB0, "collection");
  sub_20BDDC0E4(&qword_25498CFC8, "context");
  sub_20BDDC0E4(&qword_25498CFE0, "default");
  sub_20BDDC0E4(&qword_25498CFF8, "doc");
  sub_20BDDC0E4(&qword_25498D010, "enum");
  sub_20BDDC0E4(&qword_25498D028, "enumvalues");
  sub_20BDDC0E4(&qword_25498D040, "excludegeom");
  sub_20BDDC0E4(&qword_25498D058, "geom");
  sub_20BDDC0E4(&qword_25498D070, "helptext");
  sub_20BDDC0E4(&qword_25498D088, "includegeom");
  sub_20BDDC0E4(&qword_25498D0A0, "includecollection");
  sub_20BDDC0E4(&qword_25498D0B8, "inherit");
  sub_20BDDC0E4(&qword_25498D0D0, "interfacename");
  sub_20BDDC0E4(&qword_25498D0E8, "isdefaultversion");
  sub_20BDDC0E4(&qword_25498D100, "look");
  sub_20BDDC0E4(&qword_25498D118, "material");
  sub_20BDDC0E4(&qword_25498D130, "member");
  sub_20BDDC0E4(&qword_25498D148, "nodedef");
  sub_20BDDC0E4(&qword_25498D160, "nodegraph");
  sub_20BDDC0E4(&qword_25498D178, "nodename");
  sub_20BDDC0E4(&qword_25498D190, "node");
  sub_20BDDC0E4(&qword_25498D1A8, "output");
  sub_20BDDC0E4(&qword_25498D1C0, "semantic");
  sub_20BDDC0E4(&qword_25498D1D8, "token");
  sub_20BDDC0E4(&qword_25498D1F0, "type");
  sub_20BDDC0E4(&qword_25498D208, "uicolor");
  sub_20BDDC0E4(&qword_25498D220, "uifolder");
  sub_20BDDC0E4(&qword_25498D238, "uimax");
  sub_20BDDC0E4(&qword_25498D250, "uimin");
  sub_20BDDC0E4(&qword_25498D268, "uiname");
  sub_20BDDC0E4(&qword_25498D280, "value");
  sub_20BDDC0E4(&qword_25498D298, "valuecurve");
  sub_20BDDC0E4(&qword_25498D2B0, "valuerange");
  sub_20BDDC0E4(&qword_25498D2C8, "variant");
  sub_20BDDC0E4(&qword_25498D2E0, "variantassign");
  sub_20BDDC0E4(&qword_25498D2F8, "variantset");
  sub_20BDDC0E4(&qword_25498D310, "version");
  sub_20BDDC0E4(&qword_25498D328, "xpos");
  return sub_20BDDC0E4(qword_25498D340, "ypos");
}

void sub_20C7C2380(_Unwind_Exception *exception_object)
{
  if (byte_25498D33F < 0)
    sub_20C96C104();
  if (byte_25498D327 < 0)
    operator delete((void *)qword_25498D310);
  if (byte_25498D30F < 0)
    operator delete((void *)qword_25498D2F8);
  if (byte_25498D2F7 < 0)
    operator delete((void *)qword_25498D2E0);
  if (byte_25498D2DF < 0)
    operator delete((void *)qword_25498D2C8);
  if (byte_25498D2C7 < 0)
    operator delete((void *)qword_25498D2B0);
  if (byte_25498D2AF < 0)
    operator delete((void *)qword_25498D298);
  if (byte_25498D297 < 0)
    operator delete((void *)qword_25498D280);
  if (byte_25498D27F < 0)
    operator delete((void *)qword_25498D268);
  if (byte_25498D267 < 0)
    operator delete((void *)qword_25498D250);
  if (byte_25498D24F < 0)
    operator delete((void *)qword_25498D238);
  if (byte_25498D237 < 0)
    operator delete((void *)qword_25498D220);
  if (byte_25498D21F < 0)
    operator delete((void *)qword_25498D208);
  if (byte_25498D207 < 0)
    operator delete((void *)qword_25498D1F0);
  if (byte_25498D1EF < 0)
    operator delete((void *)qword_25498D1D8);
  if (byte_25498D1D7 < 0)
    operator delete((void *)qword_25498D1C0);
  if (byte_25498D1BF < 0)
    operator delete((void *)qword_25498D1A8);
  if (byte_25498D1A7 < 0)
    operator delete((void *)qword_25498D190);
  if (byte_25498D18F < 0)
    operator delete((void *)qword_25498D178);
  if (byte_25498D177 < 0)
    operator delete((void *)qword_25498D160);
  if (byte_25498D15F < 0)
    operator delete((void *)qword_25498D148);
  if (byte_25498D147 < 0)
    operator delete((void *)qword_25498D130);
  if (byte_25498D12F < 0)
    operator delete((void *)qword_25498D118);
  if (byte_25498D117 < 0)
    operator delete((void *)qword_25498D100);
  if (byte_25498D0FF < 0)
    operator delete((void *)qword_25498D0E8);
  if (byte_25498D0E7 < 0)
    operator delete((void *)qword_25498D0D0);
  if (byte_25498D0CF < 0)
    operator delete((void *)qword_25498D0B8);
  if (byte_25498D0B7 < 0)
    operator delete((void *)qword_25498D0A0);
  if (byte_25498D09F < 0)
    operator delete((void *)qword_25498D088);
  if (byte_25498D087 < 0)
    operator delete((void *)qword_25498D070);
  if (byte_25498D06F < 0)
    operator delete((void *)qword_25498D058);
  if (byte_25498D057 < 0)
    operator delete((void *)qword_25498D040);
  if (byte_25498D03F < 0)
    operator delete((void *)qword_25498D028);
  if (byte_25498D027 < 0)
    operator delete((void *)qword_25498D010);
  if (byte_25498D00F < 0)
    operator delete((void *)qword_25498CFF8);
  if (byte_25498CFF7 < 0)
    operator delete((void *)qword_25498CFE0);
  if (byte_25498CFDF < 0)
    operator delete((void *)qword_25498CFC8);
  if (byte_25498CFC7 < 0)
    operator delete((void *)qword_25498CFB0);
  if (byte_25498CFAF < 0)
    operator delete((void *)qword_25498CF98);
  if (byte_25498CF97 < 0)
    operator delete((void *)qword_25498CF80);
  if (byte_25498CF7F < 0)
    operator delete((void *)qword_25498CF68);
  _Unwind_Resume(exception_object);
}

void sub_20C7C279C()
{
  JUMPOUT(0x20C7C2494);
}

void sub_20C7C27A4()
{
  JUMPOUT(0x20C7C24ACLL);
}

void sub_20C7C27AC()
{
  JUMPOUT(0x20C7C24C4);
}

void sub_20C7C27B4()
{
  JUMPOUT(0x20C7C24DCLL);
}

void sub_20C7C27BC()
{
  JUMPOUT(0x20C7C24F4);
}

void sub_20C7C27C4()
{
  JUMPOUT(0x20C7C250CLL);
}

void sub_20C7C27CC()
{
  JUMPOUT(0x20C7C2524);
}

void sub_20C7C27D4()
{
  JUMPOUT(0x20C7C253CLL);
}

void sub_20C7C27DC()
{
  JUMPOUT(0x20C7C2554);
}

void sub_20C7C27E4()
{
  JUMPOUT(0x20C7C256CLL);
}

void sub_20C7C27EC()
{
  JUMPOUT(0x20C7C2584);
}

void sub_20C7C27F4()
{
  JUMPOUT(0x20C7C259CLL);
}

void sub_20C7C27FC()
{
  JUMPOUT(0x20C7C25B4);
}

void sub_20C7C2804()
{
  JUMPOUT(0x20C7C25CCLL);
}

void sub_20C7C280C()
{
  JUMPOUT(0x20C7C25E4);
}

void sub_20C7C2814()
{
  JUMPOUT(0x20C7C25FCLL);
}

void sub_20C7C281C()
{
  JUMPOUT(0x20C7C2614);
}

void sub_20C7C2824()
{
  JUMPOUT(0x20C7C262CLL);
}

void sub_20C7C282C()
{
  JUMPOUT(0x20C7C2644);
}

void sub_20C7C2834()
{
  JUMPOUT(0x20C7C265CLL);
}

void sub_20C7C283C()
{
  JUMPOUT(0x20C7C2674);
}

void sub_20C7C2844()
{
  JUMPOUT(0x20C7C268CLL);
}

void sub_20C7C284C()
{
  JUMPOUT(0x20C7C26A4);
}

void sub_20C7C2854()
{
  JUMPOUT(0x20C7C26BCLL);
}

void sub_20C7C285C()
{
  JUMPOUT(0x20C7C26D4);
}

void sub_20C7C2864()
{
  JUMPOUT(0x20C7C26ECLL);
}

void sub_20C7C286C()
{
  JUMPOUT(0x20C7C2704);
}

void sub_20C7C2874()
{
  JUMPOUT(0x20C7C271CLL);
}

void sub_20C7C287C()
{
  JUMPOUT(0x20C7C2734);
}

void sub_20C7C2884()
{
  JUMPOUT(0x20C7C274CLL);
}

void sub_20C7C288C()
{
  JUMPOUT(0x20C7C2764);
}

void sub_20C7C2894()
{
  JUMPOUT(0x20C7C277CLL);
}

BOOL sub_20C7C289C(int a1)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v5;
  uint64_t v6;

  v2 = sub_20C7AA5EC();
  v3 = atomic_load((unsigned int *)(v2 + 4 * a1));
  if (!v3)
  {
    v5 = v2;
    v6 = sub_20C7AA5EC();
    pxrInternal__aapl__pxrReserved__::TfDebug::_InitializeNode((void *)(v6 + 4 * a1), "USDMTLX_READER");
    v3 = atomic_load((unsigned int *)(v5 + 4 * a1));
  }
  return v3 == 2;
}

void sub_20C7C28F8(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void **v15;
  unsigned __int8 *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v3 = *(uint64_t **)(a1 + 136);
  for (i = *(uint64_t **)(a1 + 144); v3 != i; v3 += 2)
  {
    v8 = *v3;
    v7 = v3[1];
    v24 = *v3;
    v25 = (std::__shared_weak_count *)v7;
    if (v7)
    {
      v9 = (unint64_t *)(v7 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    sub_20C93B318(v8, &v23);
    if (!(_QWORD)v23)
      goto LABEL_23;
    v11 = (char)a2[23];
    v12 = *((_QWORD *)a2 + 1);
    if (v11 >= 0)
      v12 = a2[23];
    if (v12)
    {
      v13 = *(unsigned __int8 *)(v8 + 47);
      if ((v13 & 0x80u) == 0)
        v14 = *(unsigned __int8 *)(v8 + 47);
      else
        v14 = *(_QWORD *)(v8 + 32);
      if (v14 != v12)
        goto LABEL_23;
      v15 = (const void **)(v8 + 24);
      if (v11 >= 0)
        v16 = a2;
      else
        v16 = *(unsigned __int8 **)a2;
      if ((v13 & 0x80) != 0)
      {
        if (memcmp(*v15, v16, *(_QWORD *)(v8 + 32)))
          goto LABEL_23;
      }
      else if (*(_BYTE *)(v8 + 47))
      {
        while (*(unsigned __int8 *)v15 == *v16)
        {
          v15 = (const void **)((char *)v15 + 1);
          ++v16;
          if (!--v13)
            goto LABEL_22;
        }
        goto LABEL_23;
      }
    }
LABEL_22:
    sub_20BDEA72C((char **)a3, &v23);
LABEL_23:
    v17 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
    if (*((_QWORD *)&v23 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v20 = v25;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
}

void sub_20C7C2A7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a11);
  sub_20BDE9EB0((void ***)&a11);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C7C2AAC(uint64_t **a1, unint64_t *a2)
{
  uint64_t *v4;
  uint64_t **v5;
  unint64_t v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;

  v5 = a1 + 1;
  v4 = a1[1];
  v6 = *a2;
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v4;
        v8 = v4[4];
        if (v6 >= v8)
          break;
        v4 = *v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= v6)
        break;
      v4 = v7[1];
      if (!v4)
      {
        v5 = v7 + 1;
        goto LABEL_9;
      }
    }
    v10 = (uint64_t *)v7;
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)operator new(0x70uLL);
    v10 = v9;
    v11 = a2[1];
    v9[4] = v6;
    v9[5] = v11;
    if (v11)
    {
      v12 = (unint64_t *)(v11 + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    sub_20C7C2FDC((uint64_t)(v9 + 6));
    *v10 = 0;
    v10[1] = 0;
    v10[2] = (uint64_t)v7;
    *v5 = v10;
    v14 = (uint64_t *)**a1;
    v15 = v10;
    if (v14)
    {
      *a1 = v14;
      v15 = *v5;
    }
    sub_20BDDE208(a1[1], v15);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v10 + 6;
}

uint64_t sub_20C7C2BA0(uint64_t a1)
{
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 48));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 52));
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = a1 + 112;
  return a1;
}

_DWORD *sub_20C7C2C0C(uint64_t a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, _QWORD *a4)
{
  _DWORD *result;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  int v12;

  if (*a4)
    sub_20C7C3084(*a4 + 48, (uint64_t)&v10);
  else
    v10 = 0;
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(a3, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v10, &v11);
  sub_20C7C3048(a1, a2, &v11);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  result = sub_20BFD265C(&v11);
  if ((v10 & 7) != 0)
  {
    v8 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  return result;
}

void sub_20C7C2CB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  unsigned int *v3;
  unsigned int v4;
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  if ((a2 & 7) != 0)
  {
    v3 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  _Unwind_Resume(a1);
}

void sub_20C7C2CF0(uint64_t a1, uint64_t *a2)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v3;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v4;
  unint64_t *v5;
  unint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v12;
  int v13;
  int v14;
  uint64_t v15;

  sub_20C7C3160(a2, (uint64_t **)(a1 + 32), (uint64_t)&v11);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v11, v3))
  {
    *(_DWORD *)a1 = v11;
    v4 = v12;
    if (v12)
    {
      v5 = (unint64_t *)((char *)v12 + 48);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    v7 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    if (v7)
      sub_20C35C614(v7);
    sub_20C01A074((int *)(a1 + 16), &v13);
    sub_20C01A0C8((int *)(a1 + 20), &v14);
    sub_20BF32220((_QWORD *)(a1 + 24), &v15);
    v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v10);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v10 + 1);
    sub_20BFD3EBC((int *)(a1 + 56), (int *)&v10);
    sub_20BFD3F10((int *)(a1 + 60), (int *)&v10 + 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v10 + 1);
    sub_20BFD265C(&v10);
  }
  if ((v15 & 7) != 0)
  {
    v8 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
  sub_20BFD265C(&v13);
  if (v12)
    sub_20C35C614(v12);
}

void sub_20C7C2E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C7C2E38(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  sub_20C7CBD68(a1 + 104, *(_QWORD **)(a1 + 112));
  sub_20C7CBDB0(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_20C7CBDF8(a1 + 56, *(_QWORD **)(a1 + 64));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 52));
  sub_20BFD265C((_DWORD *)(a1 + 48));
  v2 = *(unsigned int **)(a1 + 40);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)a1);
}

uint64_t sub_20C7C2EC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 48);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  sub_20BFD6E54((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  sub_20BFD6EA4((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v7;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      *(_QWORD *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  sub_20C7CBE40((uint64_t *)(a1 + 32), (const void ***)(a2 + 32));
  sub_20BFD6E54((_DWORD *)(a1 + 56), (_DWORD *)(a2 + 56));
  sub_20BFD6EA4((_DWORD *)(a1 + 60), (_DWORD *)(a2 + 60));
  return a1;
}

void sub_20C7C2F90(_Unwind_Exception *a1)
{
  uint64_t v1;
  _DWORD *v2;
  _DWORD *v3;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;

  v5 = *(_QWORD *)(v1 + 24);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v3);
  sub_20BFD265C(v2);
  v8 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(v1 + 8);
  if (v8)
    sub_20C35C614(v8);
  _Unwind_Resume(a1);
}

uint64_t sub_20C7C2FDC(uint64_t a1)
{
  *(_DWORD *)a1 = 1;
  *(_QWORD *)(a1 + 8) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 20));
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 56));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 60));
  return a1;
}

int *sub_20C7C3048(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  sub_20BF2D298(a1 + 32, a2);
  sub_20C01A074((int *)(a1 + 48), a3);
  return sub_20C01A0C8((int *)(a1 + 52), a3 + 1);
}

void sub_20C7C3084(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type v4;
  std::string::size_type v5;
  std::string __p;

  v4 = std::string::find((const std::string *)a1, 58, 0);
  if (v4 == -1)
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a2);
  }
  else
  {
    v5 = v4;
    if (*(char *)(a1 + 23) < 0)
      sub_20BDDBFAC(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
    else
      __p = *(std::string *)a1;
    std::string::replace(&__p, v5, 1uLL, "__");
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_20C7C3144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C7C3160(uint64_t *a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t (*v5)(uint64_t *);
  char v6;
  uint64_t v7;
  __int128 *v8;
  _BOOL4 v9;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v10;
  unsigned int *v11;
  unsigned int v12;
  _BOOL4 v13;
  uint64_t m;
  uint64_t v15;
  std::__shared_weak_count *v16;
  __int128 *v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 *v20;
  __int128 *v21;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v22;
  std::string::size_type v23;
  std::string::size_type v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  __int128 *v39;
  std::string *v40;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *n;
  __int128 *v42;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *v55;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *size;
  unsigned int *v57;
  unsigned int v58;
  uint64_t v59;
  __int128 *v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t *v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  unsigned int *v76;
  unsigned int v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t SourceURI;
  __int128 v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  std::string::size_type v87;
  uint64_t v88;
  __int128 v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::string::size_type v93;
  std::string *p_str;
  unsigned __int8 *v95;
  std::string *v96;
  std::string *v97;
  std::string *v98;
  unsigned __int8 *v99;
  int v100;
  int64_t v101;
  unsigned __int8 v102;
  unsigned __int8 v103;
  int v104;
  _QWORD *v105;
  _QWORD *v106;
  const char *Text;
  const char *v108;
  char *v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  _QWORD *v114;
  const char *v115;
  const char *v116;
  char *v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  unsigned int *v122;
  unsigned int v123;
  unint64_t *v124;
  unint64_t v125;
  std::string::size_type v126;
  unsigned int *v127;
  unsigned int v128;
  unsigned int *v129;
  unsigned int v130;
  char v131;
  unsigned int *v132;
  unsigned int v133;
  unsigned int *v134;
  unsigned int v135;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v136;
  unint64_t *v137;
  unint64_t v138;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v139;
  uint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  unint64_t *v144;
  unint64_t v145;
  unsigned int *v146;
  unsigned int v147;
  unsigned int *v148;
  unsigned int v149;
  unint64_t *p_shared_owners;
  unint64_t v151;
  unsigned int *v152;
  unsigned int v153;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v154;
  unint64_t *v155;
  unint64_t v156;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v157;
  uint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  unint64_t *v162;
  unint64_t v163;
  unsigned int *v164;
  unsigned int v165;
  uint64_t v166;
  __int128 *v167;
  std::string::size_type *i;
  std::string::size_type v169;
  std::string::size_type v170;
  std::string::size_type v171;
  unint64_t *v172;
  unint64_t v173;
  unint64_t v174;
  unsigned int *v175;
  unsigned int v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  char *v183;
  std::string::size_type v184;
  uint64_t *j;
  std::__shared_weak_count *v186;
  uint64_t v187;
  unint64_t *v188;
  unint64_t v189;
  __int128 *v190;
  __int128 **v191;
  __int128 **v192;
  __int128 *v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t *v198;
  unint64_t v199;
  unsigned int *v200;
  unsigned int v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  unint64_t *v211;
  unint64_t v212;
  _QWORD *v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  uint64_t v217;
  unsigned int *v218;
  unsigned int v219;
  unsigned int v220;
  unsigned int *v221;
  unsigned int v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  std::string *v226;
  __int128 *v227;
  char *v228;
  uint64_t v229;
  __int128 *v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  _QWORD *v237;
  uint64_t *v238;
  __int128 *v239;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v240;
  unint64_t *v241;
  unint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  const char *v246;
  char *v247;
  unint64_t *v248;
  unint64_t v249;
  unint64_t *v250;
  unint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unsigned int *v255;
  unsigned int v256;
  uint64_t v257;
  unsigned int *v258;
  unsigned int v259;
  std::string::size_type v260;
  unint64_t *v261;
  unint64_t v262;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v263;
  std::__shared_weak_count *v264;
  unint64_t *v265;
  unint64_t v266;
  unint64_t *v267;
  unint64_t v268;
  unsigned int *v269;
  unsigned int v270;
  std::__shared_weak_count *v271;
  unint64_t *v272;
  unint64_t v273;
  uint64_t *v274;
  uint64_t *v275;
  uint64_t v276;
  __int128 *v277;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v278;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v279;
  std::__shared_weak_count *v280;
  std::string::size_type v281;
  unint64_t *v282;
  unint64_t v283;
  std::string::size_type v284;
  unint64_t *v285;
  unint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  const char *v290;
  char *v291;
  unint64_t *v292;
  unint64_t v293;
  unint64_t *v294;
  unint64_t v295;
  uint64_t v296;
  uint64_t v297;
  unint64_t v298;
  unsigned int *v299;
  unsigned int v300;
  unint64_t v301;
  unsigned int *v302;
  unsigned int v303;
  std::string::size_type v304;
  unint64_t *v305;
  unint64_t v306;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v307;
  std::__shared_weak_count *v308;
  unint64_t *v309;
  unint64_t v310;
  unint64_t *v311;
  unint64_t v312;
  unsigned int *v313;
  unsigned int v314;
  unsigned int *v315;
  unsigned int v316;
  std::__shared_weak_count *v317;
  unint64_t *v318;
  unint64_t v319;
  std::__shared_weak_count *v320;
  unint64_t *v321;
  unint64_t v322;
  uint64_t v323;
  __int128 *v324;
  std::string::size_type k;
  std::string::size_type v326;
  unsigned __int8 *v327;
  __int128 *v328;
  uint64_t v329;
  uint64_t v330;
  __int128 **v331;
  unsigned int *v332;
  unsigned int v333;
  std::string *v334;
  unsigned int *v335;
  unsigned int v336;
  unsigned int *v337;
  unsigned int v338;
  _BOOL4 v339;
  _QWORD *v342;
  uint64_t *v343;
  _QWORD *v344;
  __int128 v345;
  _QWORD *v346;
  _QWORD *v347;
  char v348[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v349;
  int v350;
  int v351;
  uint64_t v352;
  int data;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v354;
  int v355;
  int v356;
  unint64_t v357;
  __int128 v358;
  __int128 *v359;
  std::__shared_weak_count *v360;
  __int128 v361;
  int v362;
  int v363;
  uint64_t v364;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v365;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v366;
  int v367;
  int v368;
  uint64_t v369;
  __int128 *v370;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v371;
  int v372;
  int v373;
  uint64_t v374;
  __int128 v375;
  uint64_t v376;
  uint64_t v377;
  std::string::size_type v378;
  __int128 *p_dst;
  std::__shared_weak_count *v380;
  char v381;
  std::string v382;
  __int128 __dst;
  _QWORD v384[2];
  std::string *v385;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v386;
  int v387;
  int v388;
  uint64_t v389;
  std::string __str;
  const char *v391;
  char v392;
  uint64_t v393;

  v393 = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 4;
  v5 = sub_20C369024(a1 + 4);
  if (!(v6 & 1 | (unint64_t)v5))
  {
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)"usdMtlx/reader.cpp";
    __str.__r_.__value_.__l.__size_ = (std::string::size_type)"Build";
    __str.__r_.__value_.__r.__words[2] = 760;
    v391 = "UsdPrim pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_NodeGraphBuilder::Build(ShaderNamesByOutputName *)";
    v392 = 0;
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&__str, "_usdStage", 0) & 1) == 0)
      goto LABEL_564;
  }
  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 6))
    || !pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 6)))
  {
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)"usdMtlx/reader.cpp";
    __str.__r_.__value_.__l.__size_ = (std::string::size_type)"Build";
    __str.__r_.__value_.__r.__words[2] = 763;
    v391 = "UsdPrim pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_NodeGraphBuilder::Build(ShaderNamesByOutputName *)";
    v392 = 0;
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&__str, "_usdPath.IsAbsolutePath() && _usdPath.IsPrimPath()", 0) & 1) == 0)
    {
LABEL_564:
      sub_20C65D670(a3);
      return;
    }
  }
  v7 = a1[2];
  v343 = a1 + 2;
  v8 = sub_20C957390();
  v9 = sub_20C7AE8B4(v7, (unsigned __int8 *)v8);
  data = 1;
  v354 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v355);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v356);
  v357 = 0;
  if (!v9)
  {
    pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::Define(v4, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 6), (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v385);
    sub_20C35C4F8((uint64_t)&__str, (uint64_t *)&v386, &v387);
    data = (int)__str.__r_.__value_.__l.__data_;
    size = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)__str.__r_.__value_.__l.__size_;
    __str.__r_.__value_.__l.__size_ = 0;
    v354 = size;
    sub_20BFD3EBC(&v355, (int *)&__str.__r_.__value_.__r.__words[2]);
    sub_20BFD3F10(&v356, (int *)&__str.__r_.__value_.__r.__words[2] + 1);
    if ((v357 & 7) != 0)
    {
      v57 = (unsigned int *)(v357 & 0xFFFFFFFFFFFFFFF8);
      do
        v58 = __ldxr(v57);
      while (__stlxr(v58 - 2, v57));
    }
    v357 = (unint64_t)v391;
    v391 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__str.__r_.__value_.__r.__words[2] + 1);
    sub_20BFD265C(&__str.__r_.__value_.__r.__words[2]);
    if (__str.__r_.__value_.__l.__size_)
      sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)__str.__r_.__value_.__l.__size_);
    v55 = (pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)&v385;
LABEL_81:
    pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::~UsdShadeNodeGraph(v55);
    v339 = v9;
    v59 = *v343;
    v60 = sub_20C957390();
    sub_20C7B04F8(v59, (unsigned __int8 *)v60, (uint64_t)&v346);
    v61 = v346;
    v62 = v347;
    if (v346 != v347)
    {
      v342 = v347;
      do
      {
        sub_20C7C0F74();
        sub_20C7C0FDC((__int128 **)&__str, (uint64_t)v61, (unsigned __int8 *)&qword_25498D1F0);
        v63 = (uint64_t *)__str.__r_.__value_.__r.__words[0];
        if (*(char *)(__str.__r_.__value_.__r.__words[0] + 23) < 0)
        {
          v65 = *(_QWORD *)(__str.__r_.__value_.__r.__words[0] + 8);
          if (v65 == 8 && **(_QWORD **)__str.__r_.__value_.__l.__data_ == 0x6C6169726574616DLL)
            goto LABEL_367;
          if (v65 != 13)
            goto LABEL_98;
          v63 = *(uint64_t **)__str.__r_.__value_.__l.__data_;
        }
        else
        {
          v64 = *(unsigned __int8 *)(__str.__r_.__value_.__r.__words[0] + 23);
          if (v64 == 8)
          {
            if (*(_QWORD *)__str.__r_.__value_.__l.__data_ != 0x6C6169726574616DLL)
              goto LABEL_98;
            goto LABEL_367;
          }
          if (v64 != 13)
            goto LABEL_98;
        }
        v66 = *v63;
        v67 = *(uint64_t *)((char *)v63 + 5);
        v68 = v66 == 0x7365636166727573 && v67 == 0x7265646168736563;
        if (!v68)
        {
LABEL_98:
          v69 = v61[1];
          *(_QWORD *)&v345 = *v61;
          *((_QWORD *)&v345 + 1) = v69;
          if (v69)
          {
            v70 = (unint64_t *)(v69 + 8);
            do
              v71 = __ldxr(v70);
            while (__stxr(v71 + 1, v70));
          }
          sub_20C7C861C((uint64_t *)&v345, &__str);
          if (__str.__r_.__value_.__r.__words[0])
            pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v378);
          else
            v378 = 0;
          v73 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
          if (__str.__r_.__value_.__l.__size_)
          {
            v74 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
            do
              v75 = __ldaxr(v74);
            while (__stlxr(v75 - 1, v74));
            if (!v75)
            {
              ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
              std::__shared_weak_count::__release_weak(v73);
            }
          }
          if (!v378 && *a1)
            goto LABEL_362;
          pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((pxrInternal__aapl__pxrReserved__::UsdObject *)&data, v72, &v376);
          sub_20C7C861C((uint64_t *)&v345, &v375);
          LODWORD(__str.__r_.__value_.__l.__data_) = 1;
          __str.__r_.__value_.__l.__size_ = 0;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&__str.__r_.__value_.__r.__words[2]);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&__str.__r_.__value_.__r.__words[2] + 1);
          v391 = 0;
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v385, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&__str);
          v389 = 0;
          v385 = (std::string *)off_24C53D618;
          if ((v391 & 7) != 0)
          {
            v76 = (unsigned int *)((unint64_t)v391 & 0xFFFFFFFFFFFFFFF8);
            do
              v77 = __ldxr(v76);
            while (__stlxr(v77 - 2, v76));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__str.__r_.__value_.__r.__words[2] + 1);
          sub_20BFD265C(&__str.__r_.__value_.__r.__words[2]);
          if (__str.__r_.__value_.__l.__size_)
            sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)__str.__r_.__value_.__l.__size_);
          if (!(_QWORD)v375)
            goto LABEL_182;
          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v375;
          if (*((_QWORD *)&v375 + 1))
          {
            v78 = (unint64_t *)(*((_QWORD *)&v375 + 1) + 8);
            do
              v79 = __ldxr(v78);
            while (__stxr(v79 + 1, v78));
          }
          SourceURI = pxrInternal__aapl__pxrReserved__::UsdMtlxGetSourceURI((uint64_t *)&__str);
          if (*(char *)(SourceURI + 23) < 0)
          {
            sub_20BDDBFAC(&__dst, *(void **)SourceURI, *(_QWORD *)(SourceURI + 8));
          }
          else
          {
            v81 = *(_OWORD *)SourceURI;
            v384[0] = *(_QWORD *)(SourceURI + 16);
            __dst = v81;
          }
          v82 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
          if (__str.__r_.__value_.__l.__size_)
          {
            v83 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
            do
              v84 = __ldaxr(v83);
            while (__stlxr(v84 - 1, v83));
            if (!v84)
            {
              ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
              std::__shared_weak_count::__release_weak(v82);
            }
          }
          if (pxrInternal__aapl__pxrReserved__::TfIsRelativePath((unsigned __int8 *)&__dst))
          {
            v85 = v375;
            v86 = *(std::__shared_weak_count **)(v375 + 232);
            if (v86 && (v86 = std::__shared_weak_count::lock(v86)) != 0)
              v87 = *(_QWORD *)(v85 + 224);
            else
              v87 = 0;
            v382.__r_.__value_.__r.__words[0] = v87;
            v382.__r_.__value_.__l.__size_ = (std::string::size_type)v86;
            v88 = pxrInternal__aapl__pxrReserved__::UsdMtlxGetSourceURI((uint64_t *)&v382);
            if (*(char *)(v88 + 23) < 0)
            {
              sub_20BDDBFAC(&__str, *(void **)v88, *(_QWORD *)(v88 + 8));
            }
            else
            {
              v89 = *(_OWORD *)v88;
              __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(v88 + 16);
              *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v89;
            }
            v90 = (std::__shared_weak_count *)v382.__r_.__value_.__l.__size_;
            if (v382.__r_.__value_.__l.__size_)
            {
              v91 = (unint64_t *)(v382.__r_.__value_.__l.__size_ + 8);
              do
                v92 = __ldaxr(v91);
              while (__stlxr(v92 - 1, v91));
              if (!v92)
              {
                ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
                std::__shared_weak_count::__release_weak(v90);
              }
            }
            v93 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
            p_str = &__str;
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            {
              v93 = __str.__r_.__value_.__l.__size_;
              p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
            }
            if (v93)
            {
              v95 = (unsigned __int8 *)p_str + v93;
              v96 = p_str;
              v97 = (std::string *)v95;
              do
              {
                v98 = v96;
                v99 = (unsigned __int8 *)v96;
                while (1)
                {
                  v100 = *v99++;
                  if (v100 == 47)
                    break;
                  v98 = (std::string *)v99;
                  if (v99 == v95)
                  {
                    v98 = v97;
                    goto LABEL_151;
                  }
                }
                v96 = (std::string *)((char *)&v98->__r_.__value_.__l.__data_ + 1);
                v97 = v98;
              }
              while (v99 != v95);
LABEL_151:
              if (v98 != (std::string *)v95)
              {
                v101 = (char *)v98 - (char *)p_str;
                if (v101 != -1)
                {
                  std::string::basic_string(&v382, &__str, 0, v101 + 1, (std::allocator<char> *)&p_dst);
                  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__str.__r_.__value_.__l.__data_);
                  __str = v382;
                }
              }
            }
            pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier((const void **)&__str.__r_.__value_.__l.__data_, (const void **)&__dst, (uint64_t)&p_dst);
            pxrInternal__aapl__pxrReserved__::TfNormPath(&v382, &p_dst, 0);
            if (SHIBYTE(v384[0]) < 0)
              operator delete((void *)__dst);
            __dst = *(_OWORD *)&v382.__r_.__value_.__l.__data_;
            v384[0] = *((_QWORD *)&v382.__r_.__value_.__l + 2);
            *((_BYTE *)&v382.__r_.__value_.__s + 23) = 0;
            v382.__r_.__value_.__s.__data_[0] = 0;
            if (v381 < 0)
              operator delete(p_dst);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
          }
          v102 = atomic_load((unsigned __int8 *)&qword_25498D390);
          if ((v102 & 1) == 0 && __cxa_guard_acquire(&qword_25498D390))
          {
            qword_25498D388 = 0;
            qword_25498D380 = 0;
            qword_25498D378 = (uint64_t)&qword_25498D380;
            __cxa_atexit((void (*)(void *))sub_20C6DAEBC, &qword_25498D378, &dword_20BDBC000);
            __cxa_guard_release(&qword_25498D390);
          }
          v103 = atomic_load((unsigned __int8 *)&qword_25498D3B0);
          if ((v103 & 1) == 0 && __cxa_guard_acquire(&qword_25498D3B0))
          {
            v237 = sub_20BDDC0E4(&__str, "");
            pxrInternal__aapl__pxrReserved__::UsdMtlxGetDocument((uint64_t)v237, &v382);
            sub_20C926E8C((uint64_t)v382.__r_.__value_.__l.__data_, (uint64_t)&unk_25498D398);
            pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v382);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            __cxa_atexit((void (*)(void *))sub_20C6DAEBC, &unk_25498D398, &dword_20BDBC000);
            __cxa_guard_release(&qword_25498D3B0);
          }
          if ((_UNKNOWN *)sub_20BDEEBA4((uint64_t)&unk_25498D398, (const void **)&__dst) == &unk_25498D3A0)
          {
            if (sub_20C7CA5E4((_QWORD *)qword_25498D378, &qword_25498D380, (unsigned __int8 **)(v375 + 48)) == &qword_25498D380)
            {
              v226 = (std::string *)v375;
              v227 = sub_20C957390();
              sub_20C924EEC(v226, (uint64_t)v227, (uint64_t *)&__str);
              v229 = __str.__r_.__value_.__r.__words[0];
              if (!__str.__r_.__value_.__r.__words[0]
                || (v230 = sub_20C957390(), !sub_20C7AE8B4(v229, (unsigned __int8 *)v230)))
              {
                v234 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
                if (__str.__r_.__value_.__l.__size_)
                {
                  v235 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
                  do
                    v236 = __ldaxr(v235);
                  while (__stlxr(v236 - 1, v235));
                  if (!v236)
                  {
                    ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
                    std::__shared_weak_count::__release_weak(v234);
                  }
                }
                __str.__r_.__value_.__r.__words[0] = (std::string::size_type)"usdMtlx/reader.cpp";
                __str.__r_.__value_.__l.__size_ = (std::string::size_type)"_IsLocalCustomNode";
                __str.__r_.__value_.__r.__words[2] = 883;
                v391 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_NodeGraphBuilder::_IsLocalCustomNo"
                       "de(const mx::ConstNodeDefPtr &)";
                v392 = 0;
                pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__str, (pxrInternal__aapl__pxrReserved__ *)"Locally defined custom nodes without nodegraph implementations are not currently supported.", v228);
                goto LABEL_165;
              }
              sub_20BE74FC0((uint64_t **)&qword_25498D378, (const void **)(v375 + 48), v375 + 48);
              v231 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
              if (__str.__r_.__value_.__l.__size_)
              {
                v232 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
                do
                  v233 = __ldaxr(v232);
                while (__stlxr(v233 - 1, v232));
                if (!v233)
                {
                  ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
                  std::__shared_weak_count::__release_weak(v231);
                }
              }
            }
            v104 = 1;
          }
          else
          {
LABEL_165:
            v104 = 0;
          }
          if (SHIBYTE(v384[0]) < 0)
          {
            operator delete((void *)__dst);
            if (!v104)
              goto LABEL_182;
LABEL_170:
            if (sub_20C7C289C(0))
            {
              v105 = (_QWORD *)(v345 + 48);
              if (*(char *)(v345 + 71) < 0)
                v105 = (_QWORD *)*v105;
              v106 = (_QWORD *)(v375 + 48);
              if (*(char *)(v375 + 71) < 0)
                v106 = (_QWORD *)*v106;
              sub_20C348EEC((uint64_t)&data, (int *)&__str);
              Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&__str);
              pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Processing custom node (%s) of def (%s) to be added alongside nodegraph (%s).\n", v108, v109, v105, v106, Text);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__str.__r_.__value_.__r.__words + 1);
              sub_20BFD265C(&__str);
            }
            sub_20C3AD22C((uint64_t)&data, (uint64_t)&__str);
            sub_20C348EEC((uint64_t)&__str, (int *)&v382);
            v111 = (std::__shared_weak_count *)*((_QWORD *)&v375 + 1);
            v110 = v375;
            __dst = v375;
            if (*((_QWORD *)&v375 + 1))
            {
              v112 = (unint64_t *)(*((_QWORD *)&v375 + 1) + 8);
              do
                v113 = __ldxr(v112);
              while (__stxr(v113 + 1, v112));
            }
            if (v110)
              sub_20C7C3084(v110 + 48, (uint64_t)&v359);
            else
              v359 = 0;
            pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)&v382, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v359, &p_dst);
            if ((v359 & 7) != 0)
            {
              v148 = (unsigned int *)((unint64_t)v359 & 0xFFFFFFFFFFFFFFF8);
              do
                v149 = __ldxr(v148);
              while (__stlxr(v149 - 2, v148));
              v111 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
            }
            if (v111)
            {
              p_shared_owners = (unint64_t *)&v111->__shared_owners_;
              do
                v151 = __ldaxr(p_shared_owners);
              while (__stlxr(v151 - 1, p_shared_owners));
              if (!v151)
              {
                ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
                std::__shared_weak_count::__release_weak(v111);
              }
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v382.__r_.__value_.__r.__words + 1);
            sub_20BFD265C(&v382);
            if ((v391 & 7) != 0)
            {
              v152 = (unsigned int *)((unint64_t)v391 & 0xFFFFFFFFFFFFFFF8);
              do
                v153 = __ldxr(v152);
              while (__stlxr(v153 - 2, v152));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__str.__r_.__value_.__r.__words[2] + 1);
            sub_20BFD265C(&__str.__r_.__value_.__r.__words[2]);
            if (__str.__r_.__value_.__l.__size_)
              sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)__str.__r_.__value_.__l.__size_);
            pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::Get(&v376, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&p_dst, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&__dst);
            pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::ConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)&__dst, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&__str);
            v154 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)__str.__r_.__value_.__l.__size_;
            if (__str.__r_.__value_.__l.__size_)
            {
              v155 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 48);
              do
                v156 = __ldxr(v155);
              while (__stxr(v156 + 1, v155));
            }
            v157 = v386;
            v386 = v154;
            if (v157)
              sub_20C35C614(v157);
            sub_20C01A074(&v387, &__str.__r_.__value_.__r.__words[2]);
            sub_20C01A0C8(&v388, (_DWORD *)&__str.__r_.__value_.__r.__words[2] + 1);
            sub_20BF32220(&v389, &v391);
            pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&__str);
            sub_20C35C4F8(v158, (uint64_t *)&__dst + 1, v384);
            v159 = (std::__shared_weak_count *)*((_QWORD *)&v345 + 1);
            *(_OWORD *)&v382.__r_.__value_.__l.__data_ = v345;
            if (*((_QWORD *)&v345 + 1))
            {
              v160 = (unint64_t *)(*((_QWORD *)&v345 + 1) + 8);
              do
                v161 = __ldxr(v160);
              while (__stxr(v161 + 1, v160));
            }
            sub_20C7C5A74((uint64_t)&__str, (uint64_t)&v382);
            if (v159)
            {
              v162 = (unint64_t *)&v159->__shared_owners_;
              do
                v163 = __ldaxr(v162);
              while (__stlxr(v163 - 1, v162));
              if (!v163)
              {
                ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
                std::__shared_weak_count::__release_weak(v159);
              }
            }
            if ((v391 & 7) != 0)
            {
              v164 = (unsigned int *)((unint64_t)v391 & 0xFFFFFFFFFFFFFFF8);
              do
                v165 = __ldxr(v164);
              while (__stlxr(v165 - 2, v164));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__str.__r_.__value_.__r.__words[2] + 1);
            sub_20BFD265C(&__str.__r_.__value_.__r.__words[2]);
            if (__str.__r_.__value_.__l.__size_)
              sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)__str.__r_.__value_.__l.__size_);
            pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::~UsdShadeNodeGraph((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)&__dst);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&p_dst + 1);
            goto LABEL_275;
          }
          if (v104)
            goto LABEL_170;
LABEL_182:
          if (sub_20C7C289C(0))
          {
            v114 = (_QWORD *)(v345 + 48);
            if (*(char *)(v345 + 71) < 0)
              v114 = (_QWORD *)*v114;
            sub_20C348EEC((uint64_t)&data, (int *)&__str);
            v115 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&__str);
            pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Processing shader node (%s) to be added under parent (%s).\n", v116, v117, v114, v115);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__str.__r_.__value_.__r.__words + 1);
            sub_20BFD265C(&__str);
          }
          sub_20C348EEC((uint64_t)&data, (int *)&__dst);
          v119 = (std::__shared_weak_count *)*((_QWORD *)&v345 + 1);
          v118 = v345;
          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v345;
          if (*((_QWORD *)&v345 + 1))
          {
            v120 = (unint64_t *)(*((_QWORD *)&v345 + 1) + 8);
            do
              v121 = __ldxr(v120);
            while (__stxr(v121 + 1, v120));
          }
          if (v118)
            sub_20C7C3084(v118 + 48, (uint64_t)&v382);
          else
            v382.__r_.__value_.__r.__words[0] = 0;
          pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)&__dst, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v382, &p_dst);
          if ((v382.__r_.__value_.__s.__data_[0] & 7) != 0)
          {
            v122 = (unsigned int *)(v382.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
            do
              v123 = __ldxr(v122);
            while (__stlxr(v123 - 2, v122));
            v119 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
          }
          if (v119)
          {
            v124 = (unint64_t *)&v119->__shared_owners_;
            do
              v125 = __ldaxr(v124);
            while (__stlxr(v125 - 1, v124));
            if (!v125)
            {
              ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
              std::__shared_weak_count::__release_weak(v119);
            }
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__dst + 1);
          sub_20BFD265C(&__dst);
          pxrInternal__aapl__pxrReserved__::UsdShadeShader::Define(&v376, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&p_dst, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&__dst);
          v126 = v378;
          if (!v378)
            goto LABEL_222;
          if ((v378 & 7) != 0)
          {
            v127 = (unsigned int *)(v378 & 0xFFFFFFFFFFFFFFF8);
            do
              v128 = __ldxr(v127);
            while (__stxr(v128 + 2, v127));
            if ((v128 & 1) == 0)
              v126 &= 0xFFFFFFFFFFFFFFF8;
            __str.__r_.__value_.__r.__words[0] = v126;
            __str.__r_.__value_.__l.__size_ = (std::string::size_type)&off_24C5207B8 + 1;
            if ((v126 & 7) != 0)
            {
              v129 = (unsigned int *)(v126 & 0xFFFFFFFFFFFFFFF8);
              do
                v130 = __ldxr(v129);
              while (__stxr(v130 + 2, v129));
              v131 = 0;
              if ((v130 & 1) == 0)
                __str.__r_.__value_.__r.__words[0] &= 0xFFFFFFFFFFFFFFF8;
LABEL_214:
              pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateIdAttr((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&__dst, (std::type_info *)&__str, 0, (uint64_t)&v370);
              if ((v374 & 7) != 0)
              {
                v132 = (unsigned int *)(v374 & 0xFFFFFFFFFFFFFFF8);
                do
                  v133 = __ldxr(v132);
                while (__stlxr(v133 - 2, v132));
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v373);
              sub_20BFD265C(&v372);
              if (v371)
                sub_20C35C614(v371);
              sub_20BF4C2D8((uint64_t)&__str);
              if ((v131 & 1) == 0)
              {
                v134 = (unsigned int *)(v126 & 0xFFFFFFFFFFFFFFF8);
                do
                  v135 = __ldxr(v134);
                while (__stlxr(v135 - 2, v134));
              }
LABEL_222:
              pxrInternal__aapl__pxrReserved__::UsdShadeShader::ConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&__dst, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&__str);
              v136 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)__str.__r_.__value_.__l.__size_;
              if (__str.__r_.__value_.__l.__size_)
              {
                v137 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 48);
                do
                  v138 = __ldxr(v137);
                while (__stxr(v138 + 1, v137));
              }
              v139 = v386;
              v386 = v136;
              if (v139)
                sub_20C35C614(v139);
              sub_20C01A074(&v387, &__str.__r_.__value_.__r.__words[2]);
              sub_20C01A0C8(&v388, (_DWORD *)&__str.__r_.__value_.__r.__words[2] + 1);
              sub_20BF32220(&v389, &v391);
              pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&__str);
              sub_20C35C4F8(v140, (uint64_t *)&__dst + 1, v384);
              v141 = (std::__shared_weak_count *)*((_QWORD *)&v345 + 1);
              *(_OWORD *)&v382.__r_.__value_.__l.__data_ = v345;
              if (*((_QWORD *)&v345 + 1))
              {
                v142 = (unint64_t *)(*((_QWORD *)&v345 + 1) + 8);
                do
                  v143 = __ldxr(v142);
                while (__stxr(v143 + 1, v142));
              }
              sub_20C7C5A74((uint64_t)&__str, (uint64_t)&v382);
              if (v141)
              {
                v144 = (unint64_t *)&v141->__shared_owners_;
                do
                  v145 = __ldaxr(v144);
                while (__stlxr(v145 - 1, v144));
                if (!v145)
                {
                  ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
                  std::__shared_weak_count::__release_weak(v141);
                }
              }
              if ((v391 & 7) != 0)
              {
                v146 = (unsigned int *)((unint64_t)v391 & 0xFFFFFFFFFFFFFFF8);
                do
                  v147 = __ldxr(v146);
                while (__stlxr(v147 - 2, v146));
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__str.__r_.__value_.__r.__words[2] + 1);
              sub_20BFD265C(&__str.__r_.__value_.__r.__words[2]);
              if (__str.__r_.__value_.__l.__size_)
                sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)__str.__r_.__value_.__l.__size_);
              pxrInternal__aapl__pxrReserved__::UsdShadeShader::~UsdShadeShader((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&__dst);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&p_dst + 1);
LABEL_275:
              sub_20BFD265C(&p_dst);
              v166 = v345;
              v167 = sub_20C957390();
              sub_20C7C6180(v166, (unsigned __int8 *)v167, (uint64_t)&__str);
              v169 = __str.__r_.__value_.__l.__size_;
              for (i = (std::string::size_type *)__str.__r_.__value_.__r.__words[0];
                    i != (std::string::size_type *)v169;
                    i += 2)
              {
                v170 = *i;
                v171 = i[1];
                *(_QWORD *)&__dst = *i;
                *((_QWORD *)&__dst + 1) = v171;
                if (v171)
                {
                  v172 = (unint64_t *)(v171 + 8);
                  do
                    v173 = __ldxr(v172);
                  while (__stxr(v173 + 1, v172));
                  v382.__r_.__value_.__l.__size_ = v171;
                  do
                    v174 = __ldxr(v172);
                  while (__stxr(v174 + 1, v172));
                }
                else
                {
                  v382.__r_.__value_.__l.__size_ = 0;
                }
                v382.__r_.__value_.__r.__words[0] = v170;
                sub_20C7C6334((uint64_t)a1, (unint64_t *)&v382, (uint64_t)&v385, 0, (uint64_t)&v365);
                if ((v369 & 7) != 0)
                {
                  v175 = (unsigned int *)(v369 & 0xFFFFFFFFFFFFFFF8);
                  do
                    v176 = __ldxr(v175);
                  while (__stlxr(v176 - 2, v175));
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v368);
                sub_20BFD265C(&v367);
                if (v366)
                  sub_20C35C614(v366);
                v177 = (std::__shared_weak_count *)v382.__r_.__value_.__l.__size_;
                if (v382.__r_.__value_.__l.__size_)
                {
                  v178 = (unint64_t *)(v382.__r_.__value_.__l.__size_ + 8);
                  do
                    v179 = __ldaxr(v178);
                  while (__stlxr(v179 - 1, v178));
                  if (!v179)
                  {
                    ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
                    std::__shared_weak_count::__release_weak(v177);
                  }
                }
                v180 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
                if (*((_QWORD *)&__dst + 1))
                {
                  v181 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
                  do
                    v182 = __ldaxr(v181);
                  while (__stlxr(v182 - 1, v181));
                  if (!v182)
                  {
                    ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
                    std::__shared_weak_count::__release_weak(v180);
                  }
                }
              }
              *(_QWORD *)&__dst = &__str;
              sub_20BDE9EB0((void ***)&__dst);
              if ((_QWORD)v375)
              {
                v344 = v61;
                sub_20C7C5D90((uint64_t *)&v375, (uint64_t)&__str);
                v184 = __str.__r_.__value_.__l.__size_;
                for (j = (uint64_t *)__str.__r_.__value_.__r.__words[0]; j != (uint64_t *)v184; j += 2)
                {
                  v187 = *j;
                  v186 = (std::__shared_weak_count *)j[1];
                  v382.__r_.__value_.__r.__words[0] = *j;
                  v382.__r_.__value_.__l.__size_ = (std::string::size_type)v186;
                  if (v186)
                  {
                    v188 = (unint64_t *)&v186->__shared_owners_;
                    do
                      v189 = __ldxr(v188);
                    while (__stxr(v189 + 1, v188));
                  }
                  v190 = sub_20C957390();
                  sub_20C7C7450(v187, (unsigned __int8 *)v190, (uint64_t)&__dst);
                  v192 = (__int128 **)*((_QWORD *)&__dst + 1);
                  v191 = (__int128 **)__dst;
                  if ((_QWORD)__dst != *((_QWORD *)&__dst + 1))
                  {
                    do
                    {
                      v193 = *v191;
                      v194 = (std::__shared_weak_count *)v191[1];
                      p_dst = *v191;
                      v380 = v194;
                      if (v194)
                      {
                        v195 = (unint64_t *)&v194->__shared_owners_;
                        do
                          v196 = __ldxr(v195);
                        while (__stxr(v196 + 1, v195));
                        v360 = v194;
                        do
                          v197 = __ldxr(v195);
                        while (__stxr(v197 + 1, v195));
                      }
                      else
                      {
                        v360 = 0;
                      }
                      v359 = v193;
                      v358 = v345;
                      if (*((_QWORD *)&v345 + 1))
                      {
                        v198 = (unint64_t *)(*((_QWORD *)&v345 + 1) + 8);
                        do
                          v199 = __ldxr(v198);
                        while (__stxr(v199 + 1, v198));
                      }
                      sub_20C7C9B78((uint64_t)a1, (uint64_t *)&v359, (uint64_t *)&v358, (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v385, (uint64_t)&v361);
                      if ((v364 & 7) != 0)
                      {
                        v200 = (unsigned int *)(v364 & 0xFFFFFFFFFFFFFFF8);
                        do
                          v201 = __ldxr(v200);
                        while (__stlxr(v201 - 2, v200));
                      }
                      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v363);
                      sub_20BFD265C(&v362);
                      if (*((_QWORD *)&v361 + 1))
                        sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v361 + 1));
                      v202 = (std::__shared_weak_count *)*((_QWORD *)&v358 + 1);
                      if (*((_QWORD *)&v358 + 1))
                      {
                        v203 = (unint64_t *)(*((_QWORD *)&v358 + 1) + 8);
                        do
                          v204 = __ldaxr(v203);
                        while (__stlxr(v204 - 1, v203));
                        if (!v204)
                        {
                          ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
                          std::__shared_weak_count::__release_weak(v202);
                        }
                      }
                      v205 = v360;
                      if (v360)
                      {
                        v206 = (unint64_t *)&v360->__shared_owners_;
                        do
                          v207 = __ldaxr(v206);
                        while (__stlxr(v207 - 1, v206));
                        if (!v207)
                        {
                          ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
                          std::__shared_weak_count::__release_weak(v205);
                        }
                      }
                      v208 = v380;
                      if (v380)
                      {
                        v209 = (unint64_t *)&v380->__shared_owners_;
                        do
                          v210 = __ldaxr(v209);
                        while (__stlxr(v210 - 1, v209));
                        if (!v210)
                        {
                          ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
                          std::__shared_weak_count::__release_weak(v208);
                        }
                      }
                      v191 += 2;
                    }
                    while (v191 != v192);
                    v186 = (std::__shared_weak_count *)v382.__r_.__value_.__l.__size_;
                  }
                  p_dst = &__dst;
                  sub_20BDE9EB0((void ***)&p_dst);
                  if (v186)
                  {
                    v211 = (unint64_t *)&v186->__shared_owners_;
                    do
                      v212 = __ldaxr(v211);
                    while (__stlxr(v212 - 1, v211));
                    if (!v212)
                    {
                      ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
                      std::__shared_weak_count::__release_weak(v186);
                    }
                  }
                }
                *(_QWORD *)&__dst = &__str;
                sub_20BDE9EB0((void ***)&__dst);
                v61 = v344;
                v62 = v342;
              }
              else
              {
                __str.__r_.__value_.__r.__words[0] = (std::string::size_type)"usdMtlx/reader.cpp";
                __str.__r_.__value_.__l.__size_ = (std::string::size_type)"_AddNode";
                __str.__r_.__value_.__r.__words[2] = 955;
                v391 = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_NodeGraphBuilder::_AddNode(const m"
                       "x::ConstNodePtr &, const UsdPrim &)";
                v392 = 0;
                v213 = (_QWORD *)(v345 + 48);
                if (*(char *)(v345 + 71) < 0)
                  v213 = (_QWORD *)*v213;
                pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__str, (pxrInternal__aapl__pxrReserved__ *)"Unable to find the nodedef for '%s' node, outputs not added.", v183, v213);
              }
              pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v385);
              v214 = (std::__shared_weak_count *)*((_QWORD *)&v375 + 1);
              if (*((_QWORD *)&v375 + 1))
              {
                v215 = (unint64_t *)(*((_QWORD *)&v375 + 1) + 8);
                do
                  v216 = __ldaxr(v215);
                while (__stlxr(v216 - 1, v215));
                if (!v216)
                {
                  ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
                  std::__shared_weak_count::__release_weak(v214);
                }
              }
              v217 = v377;
              if (v377)
              {
                v218 = (unsigned int *)(v377 + 8);
                do
                {
                  v219 = __ldxr(v218);
                  v220 = v219 - 1;
                }
                while (__stlxr(v220, v218));
                if (!v220)
                  (*(void (**)(uint64_t))(*(_QWORD *)v217 + 8))(v217);
              }
              if ((v378 & 7) != 0)
              {
                v221 = (unsigned int *)(v378 & 0xFFFFFFFFFFFFFFF8);
                do
                  v222 = __ldxr(v221);
                while (__stlxr(v222 - 2, v221));
              }
LABEL_362:
              v223 = (std::__shared_weak_count *)*((_QWORD *)&v345 + 1);
              if (*((_QWORD *)&v345 + 1))
              {
                v224 = (unint64_t *)(*((_QWORD *)&v345 + 1) + 8);
                do
                  v225 = __ldaxr(v224);
                while (__stlxr(v225 - 1, v224));
                if (!v225)
                {
                  ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
                  std::__shared_weak_count::__release_weak(v223);
                }
              }
              goto LABEL_367;
            }
          }
          else
          {
            __str.__r_.__value_.__r.__words[0] = v378;
            __str.__r_.__value_.__l.__size_ = (std::string::size_type)&off_24C5207B8 + 1;
          }
          v131 = 1;
          goto LABEL_214;
        }
LABEL_367:
        v61 += 2;
      }
      while (v61 != v62);
    }
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v346;
    sub_20BDE9EB0((void ***)&__str);
    v238 = (uint64_t *)a1[10];
    if (v238 != a1 + 11)
    {
      do
      {
        v239 = (__int128 *)v238[4];
        v240 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v238[5];
        v370 = v239;
        v371 = v240;
        if (v240)
        {
          v241 = (unint64_t *)((char *)v240 + 8);
          do
            v242 = __ldxr(v241);
          while (__stxr(v242 + 1, v241));
        }
        sub_20C7C0F74();
        sub_20C7C0FDC((__int128 **)&v365, (uint64_t)&v370, (unsigned __int8 *)&qword_25498D178);
        if (*((char *)v365 + 23) < 0)
        {
          if (!*((_QWORD *)v365 + 1))
            goto LABEL_442;
        }
        else if (!*((_BYTE *)v365 + 23))
        {
          goto LABEL_442;
        }
        v243 = sub_20BDEEBA4((uint64_t)(a1 + 13), (const void **)v365);
        v244 = v243;
        if (a1 + 14 != (uint64_t *)v243)
        {
          v245 = *(_QWORD *)(v243 + 56);
          if ((unint64_t)(*(_QWORD *)(v243 + 64) - v245) < 0x21)
          {
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v239;
            __str.__r_.__value_.__l.__size_ = (std::string::size_type)v240;
            if (v240)
            {
              v248 = (unint64_t *)((char *)v240 + 8);
              do
                v249 = __ldxr(v248);
              while (__stxr(v249 + 1, v248));
              v245 = *(_QWORD *)(v243 + 56);
            }
            sub_20C7CAB44((uint64_t *)&__str, v245, (uint64_t)(v238 + 6));
            if (v240)
            {
              v250 = (unint64_t *)((char *)v240 + 8);
              do
                v251 = __ldaxr(v250);
              while (__stlxr(v251 - 1, v250));
              if (!v251)
              {
                (*(void (**)(pxrInternal__aapl__pxrReserved__::Usd_PrimData *))(*(_QWORD *)v240 + 16))(v240);
                std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v240);
              }
            }
            goto LABEL_442;
          }
          LODWORD(__str.__r_.__value_.__l.__data_) = 3;
          __str.__r_.__value_.__l.__size_ = 0;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&__str.__r_.__value_.__r.__words[2]);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&__str.__r_.__value_.__r.__words[2] + 1);
          v391 = 0;
          sub_20C7C0F74();
          sub_20C7C0FDC((__int128 **)&v385, (uint64_t)&v370, (unsigned __int8 *)&qword_25498D1A8);
          if (SHIBYTE(v385->__r_.__value_.__r.__words[2]) < 0)
          {
            if (!v385->__r_.__value_.__l.__size_)
            {
LABEL_429:
              v264 = (std::__shared_weak_count *)v371;
              v385 = (std::string *)v370;
              v386 = v371;
              if (v371)
              {
                v265 = (unint64_t *)((char *)v371 + 8);
                do
                  v266 = __ldxr(v265);
                while (__stxr(v266 + 1, v265));
              }
              sub_20C7CAB44((uint64_t *)&v385, (uint64_t)&__str, (uint64_t)(v238 + 6));
              if (v264)
              {
                v267 = (unint64_t *)&v264->__shared_owners_;
                do
                  v268 = __ldaxr(v267);
                while (__stlxr(v268 - 1, v267));
                if (!v268)
                {
                  ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
                  std::__shared_weak_count::__release_weak(v264);
                }
              }
              if ((v391 & 7) != 0)
              {
                v269 = (unsigned int *)((unint64_t)v391 & 0xFFFFFFFFFFFFFFF8);
                do
                  v270 = __ldxr(v269);
                while (__stlxr(v270 - 2, v269));
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__str.__r_.__value_.__r.__words[2] + 1);
              sub_20BFD265C(&__str.__r_.__value_.__r.__words[2]);
              if (__str.__r_.__value_.__l.__size_)
                sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)__str.__r_.__value_.__l.__size_);
              goto LABEL_442;
            }
          }
          else if (!*((_BYTE *)&v385->__r_.__value_.__s + 23))
          {
            goto LABEL_429;
          }
          v253 = *(_QWORD *)(v244 + 56);
          v252 = *(_QWORD *)(v244 + 64);
          while (v253 != v252)
          {
            pxrInternal__aapl__pxrReserved__::UsdShadeOutput::GetBaseName((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)v253, (uint64_t)&v361);
            pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&__dst);
            v254 = v361;
            v255 = (unsigned int *)(__dst & 0xFFFFFFFFFFFFFFF8);
            if ((__dst & 7) != 0)
            {
              do
                v256 = __ldxr(v255);
              while (__stlxr(v256 - 2, v255));
              v257 = v361;
            }
            else
            {
              v257 = v361;
            }
            if ((v257 & 7) != 0)
            {
              v258 = (unsigned int *)(v257 & 0xFFFFFFFFFFFFFFF8);
              do
                v259 = __ldxr(v258);
              while (__stlxr(v259 - 2, v258));
            }
            if ((unsigned int *)(v254 & 0xFFFFFFFFFFFFFFF8) == v255)
            {
              LODWORD(__str.__r_.__value_.__l.__data_) = *(_DWORD *)v253;
              v260 = *(_QWORD *)(v253 + 8);
              if (v260)
              {
                v261 = (unint64_t *)(v260 + 48);
                do
                  v262 = __ldxr(v261);
                while (__stxr(v262 + 1, v261));
              }
              v263 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)__str.__r_.__value_.__l.__size_;
              __str.__r_.__value_.__l.__size_ = v260;
              if (v263)
                sub_20C35C614(v263);
              sub_20C01A074((int *)&__str.__r_.__value_.__r.__words[2], (_DWORD *)(v253 + 16));
              sub_20C01A0C8((int *)&__str.__r_.__value_.__r.__words[2] + 1, (_DWORD *)(v253 + 20));
              sub_20BF32220(&v391, (_QWORD *)(v253 + 24));
              goto LABEL_429;
            }
            v253 += 32;
          }
          goto LABEL_429;
        }
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)"usdMtlx/reader.cpp";
        __str.__r_.__value_.__l.__size_ = (std::string::size_type)"_ConnectPorts";
        __str.__r_.__value_.__r.__words[2] = 1081;
        v391 = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_NodeGraphBuilder::_ConnectPorts(const mx::"
               "ConstPortElementPtr &, const D &) [D = pxrInternal__aapl__pxrReserved__::UsdShadeInput]";
        v392 = 0;
        sub_20C348EEC((uint64_t)(v238 + 6), (int *)&v385);
        v246 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v385);
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__str, (pxrInternal__aapl__pxrReserved__ *)"Output for <%s> missing", v247, v246);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v385 + 1);
        sub_20BFD265C(&v385);
LABEL_442:
        v271 = (std::__shared_weak_count *)v371;
        if (v371)
        {
          v272 = (unint64_t *)((char *)v371 + 8);
          do
            v273 = __ldaxr(v272);
          while (__stlxr(v273 - 1, v272));
          if (!v273)
          {
            ((void (*)(std::__shared_weak_count *))v271->__on_zero_shared)(v271);
            std::__shared_weak_count::__release_weak(v271);
          }
        }
        v274 = (uint64_t *)v238[1];
        if (v274)
        {
          do
          {
            v275 = v274;
            v274 = (uint64_t *)*v274;
          }
          while (v274);
        }
        else
        {
          do
          {
            v275 = (uint64_t *)v238[2];
            v68 = *v275 == (_QWORD)v238;
            v238 = v275;
          }
          while (!v68);
        }
        v238 = v275;
      }
      while (v275 != a1 + 11);
    }
    if (v339)
    {
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v370, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&data);
      v374 = 0;
      v370 = (__int128 *)off_24C53D618;
      v276 = *v343;
      v277 = sub_20C957390();
      sub_20C7C7450(v276, (unsigned __int8 *)v277, (uint64_t)&v365);
      v279 = v365;
      v278 = v366;
      while (v279 != v278)
      {
        v281 = *(_QWORD *)v279;
        v280 = (std::__shared_weak_count *)*((_QWORD *)v279 + 1);
        *(_QWORD *)&__dst = *(_QWORD *)v279;
        *((_QWORD *)&__dst + 1) = v280;
        if (v280)
        {
          v282 = (unint64_t *)&v280->__shared_owners_;
          do
            v283 = __ldxr(v282);
          while (__stxr(v283 + 1, v282));
          v284 = *((_QWORD *)v279 + 1);
          v382.__r_.__value_.__r.__words[0] = *(_QWORD *)v279;
          v382.__r_.__value_.__l.__size_ = v284;
          if (v284)
          {
            v285 = (unint64_t *)(v284 + 8);
            do
              v286 = __ldxr(v285);
            while (__stxr(v286 + 1, v285));
          }
        }
        else
        {
          *(_OWORD *)&v382.__r_.__value_.__l.__data_ = v281;
        }
        sub_20C7C9B78((uint64_t)a1, (uint64_t *)&v382, v343, (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v370, (uint64_t)&v385);
        sub_20C7C0F74();
        sub_20C7C0FDC(&p_dst, (uint64_t)&__dst, (unsigned __int8 *)&qword_25498D178);
        if (*((char *)p_dst + 23) < 0)
        {
          if (!*((_QWORD *)p_dst + 1))
            goto LABEL_513;
        }
        else if (!*((_BYTE *)p_dst + 23))
        {
          goto LABEL_513;
        }
        v287 = sub_20BDEEBA4((uint64_t)(a1 + 13), (const void **)p_dst);
        v288 = v287;
        if (a1 + 14 != (uint64_t *)v287)
        {
          v289 = *(_QWORD *)(v287 + 56);
          if ((unint64_t)(*(_QWORD *)(v287 + 64) - v289) < 0x21)
          {
            __str.__r_.__value_.__r.__words[0] = v281;
            __str.__r_.__value_.__l.__size_ = (std::string::size_type)v280;
            if (v280)
            {
              v292 = (unint64_t *)&v280->__shared_owners_;
              do
                v293 = __ldxr(v292);
              while (__stxr(v293 + 1, v292));
              v289 = *(_QWORD *)(v287 + 56);
            }
            sub_20C7CB398((uint64_t *)&__str, v289, (uint64_t)&v385);
            if (v280)
            {
              v294 = (unint64_t *)&v280->__shared_owners_;
              do
                v295 = __ldaxr(v294);
              while (__stlxr(v295 - 1, v294));
              if (!v295)
              {
                ((void (*)(std::__shared_weak_count *))v280->__on_zero_shared)(v280);
                std::__shared_weak_count::__release_weak(v280);
              }
            }
            goto LABEL_513;
          }
          LODWORD(__str.__r_.__value_.__l.__data_) = 3;
          __str.__r_.__value_.__l.__size_ = 0;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&__str.__r_.__value_.__r.__words[2]);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&__str.__r_.__value_.__r.__words[2] + 1);
          v391 = 0;
          sub_20C7C0F74();
          sub_20C7C0FDC((__int128 **)&v361, (uint64_t)&__dst, (unsigned __int8 *)&qword_25498D1A8);
          if (*(char *)(v361 + 23) < 0)
          {
            if (!*(_QWORD *)(v361 + 8))
            {
LABEL_500:
              v308 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
              v361 = __dst;
              if (*((_QWORD *)&__dst + 1))
              {
                v309 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
                do
                  v310 = __ldxr(v309);
                while (__stxr(v310 + 1, v309));
              }
              sub_20C7CB398((uint64_t *)&v361, (uint64_t)&__str, (uint64_t)&v385);
              if (v308)
              {
                v311 = (unint64_t *)&v308->__shared_owners_;
                do
                  v312 = __ldaxr(v311);
                while (__stlxr(v312 - 1, v311));
                if (!v312)
                {
                  ((void (*)(std::__shared_weak_count *))v308->__on_zero_shared)(v308);
                  std::__shared_weak_count::__release_weak(v308);
                }
              }
              if ((v391 & 7) != 0)
              {
                v313 = (unsigned int *)((unint64_t)v391 & 0xFFFFFFFFFFFFFFF8);
                do
                  v314 = __ldxr(v313);
                while (__stlxr(v314 - 2, v313));
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__str.__r_.__value_.__r.__words[2] + 1);
              sub_20BFD265C(&__str.__r_.__value_.__r.__words[2]);
              if (__str.__r_.__value_.__l.__size_)
                sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)__str.__r_.__value_.__l.__size_);
              goto LABEL_513;
            }
          }
          else if (!*(_BYTE *)(v361 + 23))
          {
            goto LABEL_500;
          }
          v296 = *(_QWORD *)(v288 + 56);
          v297 = *(_QWORD *)(v288 + 64);
          while (v296 != v297)
          {
            pxrInternal__aapl__pxrReserved__::UsdShadeOutput::GetBaseName((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)v296, (uint64_t)&v346);
            pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v376);
            v298 = (unint64_t)v346;
            v299 = (unsigned int *)(v376 & 0xFFFFFFFFFFFFFFF8);
            if ((v376 & 7) != 0)
            {
              do
                v300 = __ldxr(v299);
              while (__stlxr(v300 - 2, v299));
              v301 = (unint64_t)v346;
            }
            else
            {
              v301 = (unint64_t)v346;
            }
            if ((v301 & 7) != 0)
            {
              v302 = (unsigned int *)(v301 & 0xFFFFFFFFFFFFFFF8);
              do
                v303 = __ldxr(v302);
              while (__stlxr(v303 - 2, v302));
            }
            if ((unsigned int *)(v298 & 0xFFFFFFFFFFFFFFF8) == v299)
            {
              LODWORD(__str.__r_.__value_.__l.__data_) = *(_DWORD *)v296;
              v304 = *(_QWORD *)(v296 + 8);
              if (v304)
              {
                v305 = (unint64_t *)(v304 + 48);
                do
                  v306 = __ldxr(v305);
                while (__stxr(v306 + 1, v305));
              }
              v307 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)__str.__r_.__value_.__l.__size_;
              __str.__r_.__value_.__l.__size_ = v304;
              if (v307)
                sub_20C35C614(v307);
              sub_20C01A074((int *)&__str.__r_.__value_.__r.__words[2], (_DWORD *)(v296 + 16));
              sub_20C01A0C8((int *)&__str.__r_.__value_.__r.__words[2] + 1, (_DWORD *)(v296 + 20));
              sub_20BF32220(&v391, (_QWORD *)(v296 + 24));
              goto LABEL_500;
            }
            v296 += 32;
          }
          goto LABEL_500;
        }
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)"usdMtlx/reader.cpp";
        __str.__r_.__value_.__l.__size_ = (std::string::size_type)"_ConnectPorts";
        __str.__r_.__value_.__r.__words[2] = 1081;
        v391 = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_NodeGraphBuilder::_ConnectPorts(const mx::"
               "ConstPortElementPtr &, const D &) [D = pxrInternal__aapl__pxrReserved__::UsdShadeOutput]";
        v392 = 0;
        sub_20C348EEC((uint64_t)&v385, (int *)&v361);
        v290 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v361);
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__str, (pxrInternal__aapl__pxrReserved__ *)"Output for <%s> missing", v291, v290);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v361 + 1);
        sub_20BFD265C(&v361);
LABEL_513:
        if ((v389 & 7) != 0)
        {
          v315 = (unsigned int *)(v389 & 0xFFFFFFFFFFFFFFF8);
          do
            v316 = __ldxr(v315);
          while (__stlxr(v316 - 2, v315));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v388);
        sub_20BFD265C(&v387);
        if (v386)
          sub_20C35C614(v386);
        v317 = (std::__shared_weak_count *)v382.__r_.__value_.__l.__size_;
        if (v382.__r_.__value_.__l.__size_)
        {
          v318 = (unint64_t *)(v382.__r_.__value_.__l.__size_ + 8);
          do
            v319 = __ldaxr(v318);
          while (__stlxr(v319 - 1, v318));
          if (!v319)
          {
            ((void (*)(std::__shared_weak_count *))v317->__on_zero_shared)(v317);
            std::__shared_weak_count::__release_weak(v317);
          }
        }
        v320 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
        if (*((_QWORD *)&__dst + 1))
        {
          v321 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
          do
            v322 = __ldaxr(v321);
          while (__stlxr(v322 - 1, v321));
          if (!v322)
          {
            ((void (*)(std::__shared_weak_count *))v320->__on_zero_shared)(v320);
            std::__shared_weak_count::__release_weak(v320);
          }
        }
        v279 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)((char *)v279 + 16);
      }
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v365;
      sub_20BDE9EB0((void ***)&__str);
      pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v370);
      goto LABEL_556;
    }
    if (a2)
    {
      v323 = *v343;
      v324 = sub_20C957390();
      sub_20C7C7450(v323, (unsigned __int8 *)v324, (uint64_t)&__str);
      v326 = __str.__r_.__value_.__l.__size_;
      for (k = __str.__r_.__value_.__r.__words[0]; k != v326; k += 16)
      {
        sub_20C7C0F74();
        v327 = sub_20C67F73C((_QWORD *)(*(_QWORD *)k + 160), (unsigned __int8 *)&qword_25498D178);
        if (v327)
          v328 = (__int128 *)(v327 + 40);
        else
          v328 = sub_20C957390();
        v329 = *((unsigned __int8 *)v328 + 23);
        if ((v329 & 0x80u) == 0)
          v330 = *((unsigned __int8 *)v328 + 23);
        else
          v330 = *((_QWORD *)v328 + 1);
        if (v330)
        {
          if ((v329 & 0x80) == 0)
            goto LABEL_541;
        }
        else
        {
          v328 = sub_20C957390();
          v329 = *((unsigned __int8 *)v328 + 23);
          if ((v329 & 0x80) == 0)
          {
LABEL_541:
            if (v329)
              goto LABEL_545;
            continue;
          }
        }
        if (*((_QWORD *)v328 + 1))
        {
LABEL_545:
          pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v385);
          v370 = (__int128 *)(*(_QWORD *)k + 48);
          v331 = (__int128 **)(sub_20C7CBBEC(a2, (const void **)v370, (uint64_t)&unk_20CAC184C, &v370) + 7);
          if (&v385 == (std::string **)v331)
          {
            v334 = v385;
          }
          else
          {
            if (((unint64_t)*v331 & 7) != 0)
            {
              v332 = (unsigned int *)((unint64_t)*v331 & 0xFFFFFFFFFFFFFFF8);
              do
                v333 = __ldxr(v332);
              while (__stlxr(v333 - 2, v332));
            }
            v334 = 0;
            *v331 = (__int128 *)v385;
            v385 = 0;
          }
          if ((v334 & 7) != 0)
          {
            v335 = (unsigned int *)((unint64_t)v334 & 0xFFFFFFFFFFFFFFF8);
            do
              v336 = __ldxr(v335);
            while (__stlxr(v336 - 2, v335));
          }
        }
      }
      v385 = &__str;
      sub_20BDE9EB0((void ***)&v385);
    }
LABEL_556:
    *(_DWORD *)a3 = data;
    *(_QWORD *)(a3 + 8) = v354;
    v354 = 0;
    sub_20BFD38A4((_DWORD *)(a3 + 16), &v355);
    sub_20BFD38DC((_DWORD *)(a3 + 20), &v356);
    *(_QWORD *)(a3 + 24) = v357;
    v357 = 0;
    goto LABEL_557;
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::Define(v4, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 6), (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v365);
  if (v366
    && (*((_BYTE *)v366 + 57) & 8) == 0
    && ((*((uint64_t (**)(pxrInternal__aapl__pxrReserved__::Usd_PrimData **))v365 + 4))(&v365) & 1) != 0)
  {
    sub_20C35C4F8((uint64_t)&__str, (uint64_t *)&v366, &v367);
    data = (int)__str.__r_.__value_.__l.__data_;
    v10 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)__str.__r_.__value_.__l.__size_;
    __str.__r_.__value_.__l.__size_ = 0;
    v354 = v10;
    sub_20BFD3EBC(&v355, (int *)&__str.__r_.__value_.__r.__words[2]);
    sub_20BFD3F10(&v356, (int *)&__str.__r_.__value_.__r.__words[2] + 1);
    if ((v357 & 7) != 0)
    {
      v11 = (unsigned int *)(v357 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
    v357 = (unint64_t)v391;
    v391 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__str.__r_.__value_.__r.__words[2] + 1);
    sub_20BFD265C(&__str.__r_.__value_.__r.__words[2]);
    if (__str.__r_.__value_.__l.__size_)
      sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)__str.__r_.__value_.__l.__size_);
    sub_20C7C5A74((uint64_t)&data, (uint64_t)v343);
    if (*a1)
    {
      v13 = v9;
      sub_20C7C5D90(a1, (uint64_t)&v361);
      v15 = *((_QWORD *)&v361 + 1);
      for (m = v361; m != v15; m += 16)
      {
        v17 = *(__int128 **)m;
        v16 = *(std::__shared_weak_count **)(m + 8);
        p_dst = *(__int128 **)m;
        v380 = v16;
        if (v16)
        {
          v18 = (unint64_t *)&v16->__shared_owners_;
          do
            v19 = __ldxr(v18);
          while (__stxr(v19 + 1, v18));
        }
        pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::ConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)&v365, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v385);
        v20 = sub_20C957390();
        sub_20C7C6180((uint64_t)v17, (unsigned __int8 *)v20, (uint64_t)&v370);
        v21 = v370;
        v22 = v371;
        if (v370 != (__int128 *)v371)
        {
          do
          {
            v23 = *(_QWORD *)v21;
            v24 = *((_QWORD *)v21 + 1);
            *(_QWORD *)&__dst = *(_QWORD *)v21;
            *((_QWORD *)&__dst + 1) = v24;
            if (v24)
            {
              v25 = (unint64_t *)(v24 + 8);
              do
                v26 = __ldxr(v25);
              while (__stxr(v26 + 1, v25));
              v382.__r_.__value_.__l.__size_ = v24;
              do
                v27 = __ldxr(v25);
              while (__stxr(v27 + 1, v25));
            }
            else
            {
              v382.__r_.__value_.__l.__size_ = 0;
            }
            v382.__r_.__value_.__r.__words[0] = v23;
            sub_20C7C6334((uint64_t)a1, (unint64_t *)&v382, (uint64_t)&v385, 1, (uint64_t)&__str);
            if ((v391 & 7) != 0)
            {
              v28 = (unsigned int *)((unint64_t)v391 & 0xFFFFFFFFFFFFFFF8);
              do
                v29 = __ldxr(v28);
              while (__stlxr(v29 - 2, v28));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__str.__r_.__value_.__r.__words[2] + 1);
            sub_20BFD265C(&__str.__r_.__value_.__r.__words[2]);
            if (__str.__r_.__value_.__l.__size_)
              sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)__str.__r_.__value_.__l.__size_);
            v30 = (std::__shared_weak_count *)v382.__r_.__value_.__l.__size_;
            if (v382.__r_.__value_.__l.__size_)
            {
              v31 = (unint64_t *)(v382.__r_.__value_.__l.__size_ + 8);
              do
                v32 = __ldaxr(v31);
              while (__stlxr(v32 - 1, v31));
              if (!v32)
              {
                ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
                std::__shared_weak_count::__release_weak(v30);
              }
            }
            v33 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
            if (*((_QWORD *)&__dst + 1))
            {
              v34 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
              do
                v35 = __ldaxr(v34);
              while (__stlxr(v35 - 1, v34));
              if (!v35)
              {
                ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
                std::__shared_weak_count::__release_weak(v33);
              }
            }
            ++v21;
          }
          while (v21 != (__int128 *)v22);
          v16 = v380;
        }
        *(_QWORD *)&__dst = &v370;
        sub_20BDE9EB0((void ***)&__dst);
        pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v385);
        if (v16)
        {
          v36 = (unint64_t *)&v16->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
      }
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v361;
      sub_20BDE9EB0((void ***)&__str);
      v9 = v13;
    }
    v38 = *v343;
    v39 = sub_20C957390();
    sub_20C7C6180(v38, (unsigned __int8 *)v39, (uint64_t)&v385);
    v40 = v385;
    for (n = v386; v40 != (std::string *)n; v40 = (std::string *)((char *)v40 + 16))
    {
      v42 = (__int128 *)v40->__r_.__value_.__r.__words[0];
      v43 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v40->__r_.__value_.__l.__size_;
      v370 = (__int128 *)v40->__r_.__value_.__r.__words[0];
      v371 = v43;
      if (v43)
      {
        v44 = (unint64_t *)((char *)v43 + 8);
        do
          v45 = __ldxr(v44);
        while (__stxr(v45 + 1, v44));
        *(_QWORD *)&v361 = v42;
        *((_QWORD *)&v361 + 1) = v43;
        do
          v46 = __ldxr(v44);
        while (__stxr(v46 + 1, v44));
      }
      else
      {
        v361 = (unint64_t)v42;
      }
      pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::ConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)&v365, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&__str);
      sub_20C7C6334((uint64_t)a1, (unint64_t *)&v361, (uint64_t)&__str, 1, (uint64_t)v348);
      if ((v352 & 7) != 0)
      {
        v47 = (unsigned int *)(v352 & 0xFFFFFFFFFFFFFFF8);
        do
          v48 = __ldxr(v47);
        while (__stlxr(v48 - 2, v47));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v351);
      sub_20BFD265C(&v350);
      if (v349)
        sub_20C35C614(v349);
      pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&__str);
      v49 = (std::__shared_weak_count *)*((_QWORD *)&v361 + 1);
      if (*((_QWORD *)&v361 + 1))
      {
        v50 = (unint64_t *)(*((_QWORD *)&v361 + 1) + 8);
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      v52 = (std::__shared_weak_count *)v371;
      if (v371)
      {
        v53 = (unint64_t *)((char *)v371 + 8);
        do
          v54 = __ldaxr(v53);
        while (__stlxr(v54 - 1, v53));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
        }
      }
    }
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v385;
    sub_20BDE9EB0((void ***)&__str);
    v55 = (pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)&v365;
    goto LABEL_81;
  }
  *(_DWORD *)a3 = 1;
  *(_QWORD *)(a3 + 8) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 20));
  *(_QWORD *)(a3 + 24) = 0;
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::~UsdShadeNodeGraph((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)&v365);
LABEL_557:
  if ((v357 & 7) != 0)
  {
    v337 = (unsigned int *)(v357 & 0xFFFFFFFFFFFFFFF8);
    do
      v338 = __ldxr(v337);
    while (__stlxr(v338 - 2, v337));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v356);
  sub_20BFD265C(&v355);
  if (v354)
    sub_20C35C614(v354);
}

void sub_20C7C5478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a66;
  uint64_t a69;
  uint64_t a70;
  uint64_t v70;
  uint64_t v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int *v76;
  unsigned int v77;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v70 - 232));
  if (*(char *)(v70 - 121) < 0)
    operator delete(*(void **)(v70 - 144));
  __cxa_guard_abort(&qword_25498D3B0);
  if (*(char *)(v70 - 185) < 0)
    operator delete(*(void **)(v70 - 208));
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)(v70 - 176));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a66);
  v72 = a69;
  if (a69)
  {
    v73 = (unsigned int *)(a69 + 8);
    do
    {
      v74 = __ldxr(v73);
      v75 = v74 - 1;
    }
    while (__stlxr(v75, v73));
    if (!v75)
      (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
  }
  if ((a70 & 7) != 0)
  {
    v76 = (unsigned int *)(a70 & 0xFFFFFFFFFFFFFFF8);
    do
      v77 = __ldxr(v76);
    while (__stlxr(v77 - 2, v76));
  }
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a37);
  *(_QWORD *)(v70 - 176) = &a39;
  sub_20BDE9EB0((void ***)(v70 - 176));
  sub_20C35C2E0((uint64_t)&a46);
  _Unwind_Resume(a1);
}

void sub_20C7C5A74(uint64_t a1, uint64_t a2)
{
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  float v8;
  int v9;
  int v10;
  int v11;
  int v12;
  _DWORD *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v19;
  int v20;
  int v21;
  uint64_t v22;
  _BYTE v23[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  void (**v29)(pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI *__hidden);
  uint64_t v30;
  uint64_t v31;
  std::type_info v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  sub_20C7C7604(a1, a2);
  if (*(_DWORD *)a1 == 1)
  {
    sub_20C35C4F8((uint64_t)&v32, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v29, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v32);
    v31 = 0;
    v29 = off_24C5400B0;
    if ((v35 & 7) != 0)
    {
      v4 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
      do
        v5 = __ldxr(v4);
      while (__stlxr(v5 - 2, v4));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v34);
    sub_20BFD265C(&v33);
    if (v32.__type_name)
      sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v32.__type_name);
    if (v30
      && (*(_BYTE *)(v30 + 57) & 8) == 0
      && ((unsigned int (*)(pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *))v29[4])((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)&v29))
    {
      v28 = 0;
      sub_20C7C0F74();
      if (sub_20C7C766C((float *)&v28 + 1, a2, (unsigned __int8 *)&qword_25498D328))
      {
        sub_20C7C0F74();
        if (sub_20C7C766C((float *)&v28, a2, (unsigned __int8 *)qword_25498D340))
        {
          v32.__type_name = (std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t)&off_24C51DEB0
                          + 3;
          v32.__vftable = (std::type_info_vtbl *)__PAIR64__(v28, HIDWORD(v28));
          pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI::CreatePosAttr((pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI *)&v29, &v32, 0, (uint64_t)v23);
          if ((v27 & 7) != 0)
          {
            v6 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
            do
              v7 = __ldxr(v6);
            while (__stlxr(v7 - 2, v6));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v26);
          sub_20BFD265C(&v25);
          if (v24)
            sub_20C35C614(v24);
          sub_20BF4C2D8((uint64_t)&v32);
        }
      }
      sub_20C7C0F74();
      if (sub_20C67F73C((_QWORD *)(*(_QWORD *)a2 + 160), (unsigned __int8 *)&qword_25498D208))
      {
        sub_20C7C0FDC((__int128 **)&v32, a2, (unsigned __int8 *)&qword_25498D208);
        v8 = sub_20C95A00C((std::string *)v32.__vftable);
        v10 = v9;
        v12 = v11;
        v32.__type_name = (std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t)&off_24C51E0D8
                        + 2;
        v13 = operator new(0x10uLL);
        *(float *)v13 = v8;
        v13[1] = v10;
        v13[2] = v12;
        v14 = v13 + 3;
        atomic_store(0, v13 + 3);
        v32.__vftable = (std::type_info_vtbl *)v13;
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
        pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI::CreateDisplayColorAttr((pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI *)&v29, &v32, 0, (uint64_t)&v18);
        if ((v22 & 7) != 0)
        {
          v16 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
          do
            v17 = __ldxr(v16);
          while (__stlxr(v17 - 2, v16));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v21);
        sub_20BFD265C(&v20);
        if (v19)
          sub_20C35C614(v19);
        sub_20BF4C2D8((uint64_t)&v32);
      }
    }
    pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI::~UsdUINodeGraphNodeAPI((pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI *)&v29);
  }
}

void sub_20C7C5D10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20C7C5D90(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  unsigned __int8 *v10;
  __int128 *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  void *v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  BOOL v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  _QWORD *exception;
  std::string *v41;
  __int128 v42;
  std::string v43;
  __int128 v44;
  std::string::size_type v45;
  __int128 v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  uint64_t *v49;
  _QWORD *v50[2];

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v50[0] = 0;
  v50[1] = 0;
  v49 = (uint64_t *)v50;
  sub_20C93BF6C(*a1, &v47);
  v4 = *a1;
  v5 = a1[1];
  *(_QWORD *)&v46 = *a1;
  *((_QWORD *)&v46 + 1) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  if (v4)
  {
    do
    {
      sub_20C215CE8(&v49, (unint64_t *)&v46, (uint64_t *)&v46);
      if ((v8 & 1) == 0)
      {
        exception = __cxa_allocate_exception(0x20uLL);
        sub_20C93D684(v46, &v43);
        v41 = std::string::insert(&v43, 0, "Encountered cycle at element: ");
        v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
        v45 = v41->__r_.__value_.__r.__words[2];
        v44 = v42;
        v41->__r_.__value_.__l.__size_ = 0;
        v41->__r_.__value_.__r.__words[2] = 0;
        v41->__r_.__value_.__r.__words[0] = 0;
        sub_20C7C76F4(exception, &v44);
        *exception = &unk_24C54B9A8;
        __cxa_throw(exception, (struct type_info *)&unk_24C54B7E0, (void (*)(void *))sub_20C7C76F0);
      }
      sub_20BDEA72C((char **)a2, &v46);
      v9 = v47;
      sub_20C7C0F74();
      v10 = sub_20C67F73C((_QWORD *)(v46 + 160), (unsigned __int8 *)&qword_25498D0B8);
      if (v10)
        v11 = (__int128 *)(v10 + 40);
      else
        v11 = sub_20C957390();
      v12 = *((unsigned __int8 *)v11 + 23);
      if ((v12 & 0x80u) != 0)
        v12 = *((_QWORD *)v11 + 1);
      if (!v12)
        v11 = sub_20C957390();
      v13 = sub_20C67F73C((_QWORD *)(v9 + 96), (unsigned __int8 *)v11);
      v14 = v13;
      if (v13)
      {
        v15 = (void *)*((_QWORD *)v13 + 5);
        v16 = (std::__shared_weak_count *)*((_QWORD *)v14 + 6);
        if (v16)
        {
          p_shared_owners = (unint64_t *)&v16->__shared_owners_;
          do
            v18 = __ldxr(p_shared_owners);
          while (__stxr(v18 + 1, p_shared_owners));
        }
        if (v15)
        {
          v15 = __dynamic_cast(v15, (const struct __class_type_info *)&unk_24C55B1D8, (const struct __class_type_info *)&unk_24C55AB20, 0);
          if (v15)
            v19 = 0;
          else
            v19 = v16;
          if (v15)
            v20 = v16 == 0;
          else
            v20 = 1;
          if (v20)
          {
            v14 = 0;
            v16 = v19;
          }
          else
          {
            v21 = (unint64_t *)&v16->__shared_owners_;
            do
              v22 = __ldxr(v21);
            while (__stxr(v22 + 1, v21));
            v14 = v16;
          }
        }
        else
        {
          v14 = 0;
        }
      }
      else
      {
        v16 = 0;
        v15 = 0;
      }
      v23 = (std::__shared_weak_count *)*((_QWORD *)&v46 + 1);
      *(_QWORD *)&v46 = v15;
      *((_QWORD *)&v46 + 1) = v14;
      if (!v23)
        goto LABEL_35;
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
        if (v16)
        {
LABEL_36:
          v26 = (unint64_t *)&v16->__shared_owners_;
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 - 1, v26));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
      }
      else
      {
LABEL_35:
        if (v16)
          goto LABEL_36;
      }
    }
    while ((_QWORD)v46);
  }
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v46 + 1);
  if (*((_QWORD *)&v46 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = *(char **)a2;
  v32 = *(_QWORD *)(a2 + 8);
  v33 = (char *)(v32 - 16);
  if (*(_QWORD *)a2 != v32 && v33 > v31)
  {
    do
    {
      v35 = *(_QWORD *)v31;
      *(_QWORD *)v31 = *(_QWORD *)v33;
      *(_QWORD *)v33 = v35;
      v36 = *((_QWORD *)v31 + 1);
      *((_QWORD *)v31 + 1) = *((_QWORD *)v33 + 1);
      *((_QWORD *)v33 + 1) = v36;
      v31 += 16;
      v33 -= 16;
    }
    while (v31 < v33);
  }
  v37 = v48;
  if (v48)
  {
    v38 = (unint64_t *)&v48->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  sub_20C2162E8((uint64_t)&v49, v50[0]);
}

void sub_20C7C60E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24)
{
  uint64_t v24;
  uint64_t v25;

  sub_20C2162E8(v25 - 72, *(_QWORD **)(v25 - 64));
  *(_QWORD *)(v25 - 72) = v24;
  sub_20BDE9EB0((void ***)(v25 - 72));
  _Unwind_Resume(a1);
}

void sub_20C7C6180(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void **v15;
  unsigned __int8 *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v3 = *(uint64_t **)(a1 + 136);
  for (i = *(uint64_t **)(a1 + 144); v3 != i; v3 += 2)
  {
    v8 = *v3;
    v7 = v3[1];
    v24 = *v3;
    v25 = (std::__shared_weak_count *)v7;
    if (v7)
    {
      v9 = (unint64_t *)(v7 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    sub_20C93AF94(v8, &v23);
    if (!(_QWORD)v23)
      goto LABEL_23;
    v11 = (char)a2[23];
    v12 = *((_QWORD *)a2 + 1);
    if (v11 >= 0)
      v12 = a2[23];
    if (v12)
    {
      v13 = *(unsigned __int8 *)(v8 + 47);
      if ((v13 & 0x80u) == 0)
        v14 = *(unsigned __int8 *)(v8 + 47);
      else
        v14 = *(_QWORD *)(v8 + 32);
      if (v14 != v12)
        goto LABEL_23;
      v15 = (const void **)(v8 + 24);
      if (v11 >= 0)
        v16 = a2;
      else
        v16 = *(unsigned __int8 **)a2;
      if ((v13 & 0x80) != 0)
      {
        if (memcmp(*v15, v16, *(_QWORD *)(v8 + 32)))
          goto LABEL_23;
      }
      else if (*(_BYTE *)(v8 + 47))
      {
        while (*(unsigned __int8 *)v15 == *v16)
        {
          v15 = (const void **)((char *)v15 + 1);
          ++v16;
          if (!--v13)
            goto LABEL_22;
        }
        goto LABEL_23;
      }
    }
LABEL_22:
    sub_20BDEA72C((char **)a3, &v23);
LABEL_23:
    v17 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
    if (*((_QWORD *)&v23 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v20 = v25;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
}

void sub_20C7C6304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a11);
  sub_20BDE9EB0((void ***)&a11);
  _Unwind_Resume(a1);
}

void sub_20C7C6334(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  std::__shared_weak_count *v10;
  char *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  const char *Text;
  const char *v17;
  char *v18;
  unsigned int *v19;
  unsigned int v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::string *v25;
  unint64_t *v26;
  unint64_t v27;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v28;
  __int128 *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t i;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v36;
  void *v37;
  __int128 v38;
  unint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v47;
  unint64_t *v48;
  unint64_t v49;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v50;
  uint64_t *v51;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v52;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v53;
  uint64_t v54;
  unsigned int *v55;
  unsigned int v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int *v63;
  unsigned int v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  __int128 *v74;
  __int128 *v75;
  std::string::__raw *v76;
  const char *v77;
  const char *v78;
  char *v79;
  __int128 *v80;
  const char *v81;
  const char *v82;
  char *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  const char *v87;
  const char *v88;
  const char *v89;
  char *v90;
  uint64_t v91;
  int IsCompatible;
  unsigned int *v93;
  unsigned int v94;
  pxrInternal__aapl__pxrReserved__::UsdShadeShader *v95;
  uint64_t *StaticTfType;
  const pxrInternal__aapl__pxrReserved__::TfType *v97;
  uint64_t *SchemaInfo;
  char *v99;
  unsigned int *v100;
  unsigned int v101;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *NameToken;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v103;
  unsigned int *v104;
  unsigned int v105;
  const char *v106;
  const char *v107;
  const char *v108;
  char *v109;
  __int128 **v110;
  const char *v111;
  const char *v112;
  char *v113;
  unsigned int *v114;
  unsigned int v115;
  unsigned int *v116;
  unsigned int v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::string *v121;
  std::__shared_weak_count *v122;
  pxrInternal__aapl__pxrReserved__ *v123;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v124;
  int v125;
  int v126;
  uint64_t v127;
  std::string *v128;
  std::__shared_weak_count *v129;
  __int128 *v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  __int128 *v139;
  uint64_t v140;
  __int128 *v141;
  __int128 v142;
  uint64_t v143;
  __int128 v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  int v148;
  _OWORD __dst[2];
  uint64_t v150;

  v11 = (char *)*a2;
  v10 = (std::__shared_weak_count *)a2[1];
  v121 = (std::string *)*a2;
  v122 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  if (sub_20C7C289C(0))
  {
    v14 = v11 + 48;
    if (v11[71] < 0)
      v14 = (_QWORD *)*v14;
    v15 = sub_20C35C4F8((uint64_t)__dst, (uint64_t *)(a3 + 8), (_DWORD *)(a3 + 16));
    sub_20C348EEC(v15, (int *)&v144);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v144);
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Adding input (%s) to connectable prim: (%s)\n", v17, v18, v14, Text);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v144 + 1);
    sub_20BFD265C(&v144);
    if ((BYTE8(__dst[1]) & 7) != 0)
    {
      v19 = (unsigned int *)(*((_QWORD *)&__dst[1] + 1) & 0xFFFFFFFFFFFFFFF8);
      do
        v20 = __ldxr(v19);
      while (__stlxr(v20 - 2, v19));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__dst[1] + 1);
    sub_20BFD265C(&__dst[1]);
    if (*((_QWORD *)&__dst[0] + 1))
      sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&__dst[0] + 1));
    v11 = (char *)v121;
    v10 = v122;
  }
  *(_QWORD *)&__dst[0] = v11;
  *((_QWORD *)&__dst[0] + 1) = v10;
  if (v10)
  {
    v21 = (unint64_t *)&v10->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  sub_20C7C77E8((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)a3, __dst, (uint64_t)&v123);
  if (v10)
  {
    v23 = (unint64_t *)&v10->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  sub_20C7C7AA0((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v123, (void **)&v121);
  v25 = v121;
  v141 = (__int128 *)v121;
  *(_QWORD *)&v142 = v122;
  if (v122)
  {
    v26 = (unint64_t *)&v122->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  sub_20C7C0F74();
  sub_20C7C0FDC((__int128 **)__dst, (uint64_t)&v141, (unsigned __int8 *)&qword_25498D070);
  if ((*(char *)(*(_QWORD *)&__dst[0] + 23) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(*(_QWORD *)&__dst[0] + 23))
      goto LABEL_29;
    goto LABEL_28;
  }
  if (*(_QWORD *)(*(_QWORD *)&__dst[0] + 8))
LABEL_28:
    pxrInternal__aapl__pxrReserved__::UsdShadeInput::SetDocumentation((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v123, *(const pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&__dst[0]);
LABEL_29:
  v144 = 0uLL;
  v145 = 0;
  sub_20C7C0F74();
  if (sub_20C67F73C(&v25[6].__r_.__value_.__r.__words[2], (unsigned __int8 *)&qword_25498D010))
  {
    sub_20C7C0FDC((__int128 **)&v128, (uint64_t)&v141, (unsigned __int8 *)&qword_25498D010);
    sub_20C95D258(v128, (uint64_t *)__dst);
    sub_20BE7598C((uint64_t *)&v144);
    v144 = __dst[0];
    v145 = *(_QWORD *)&__dst[1];
    memset(__dst, 0, 24);
    v139 = __dst;
    sub_20BDE5038((void ***)&v139);
    if ((_QWORD)v144 != *((_QWORD *)&v144 + 1))
    {
      pxrInternal__aapl__pxrReserved__::UsdProperty::GetPropertyStack(&v123, v28, (uint64_t)__dst, NAN);
      v29 = **(__int128 ***)&__dst[0];
      v139 = v29;
      if (v29)
      {
        do
          v30 = __ldaxr((unsigned int *)v29);
        while (__stlxr(v30 + 1, (unsigned int *)v29));
        v29 = v139;
        v128 = (std::string *)v139;
        if (v139)
        {
          do
            v31 = __ldaxr((unsigned int *)v29);
          while (__stlxr(v31 + 1, (unsigned int *)v29));
        }
      }
      else
      {
        v128 = 0;
      }
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v29, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v139);
      v139 = __dst;
      sub_20BFE69E4((void ***)&v139);
      v150 = 0;
      memset(__dst, 0, sizeof(__dst));
      sub_20C5A0994((uint64_t *)__dst, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v144 + 1) - v144) >> 3));
      v33 = *((_QWORD *)&v144 + 1);
      for (i = v144; i != v33; i += 24)
      {
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v139);
        sub_20C5A2D98((uint64_t)__dst, &v139);
        if ((v139 & 7) != 0)
        {
          v34 = (unsigned int *)((unint64_t)v139 & 0xFFFFFFFFFFFFFFF8);
          do
            v35 = __ldxr(v34);
          while (__stlxr(v35 - 2, v34));
        }
      }
      v36 = sub_20C0AEAB8((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v128);
      pxrInternal__aapl__pxrReserved__::SdfAttributeSpec::SetAllowedTokens(v36, (uint64_t)__dst);
      sub_20C00918C(__dst);
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v37, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v128);
    }
  }
  sub_20C7C0F74();
  sub_20C7C0FDC(&v139, (uint64_t)&v141, (unsigned __int8 *)&qword_25498D220);
  if (*((char *)v139 + 23) < 0)
  {
    v39 = *((_QWORD *)v139 + 1);
    if (!v39)
      goto LABEL_57;
    sub_20BDDBFAC(__dst, *(void **)v139, v39);
  }
  else
  {
    if (!*((_BYTE *)v139 + 23))
      goto LABEL_57;
    v38 = *v139;
    *(_QWORD *)&__dst[1] = *((_QWORD *)v139 + 2);
    __dst[0] = v38;
  }
  v40 = BYTE7(__dst[1]);
  v41 = __dst;
  if (SBYTE7(__dst[1]) < 0)
  {
    v40 = *((_QWORD *)&__dst[0] + 1);
    v41 = *(_BYTE **)&__dst[0];
  }
  for (; v40; --v40)
  {
    if (*v41 == 47)
      *v41 = 58;
    ++v41;
  }
  pxrInternal__aapl__pxrReserved__::UsdProperty::SetDisplayGroup((uint64_t)&v123, (uint64_t (**)(_QWORD, uint64_t))__dst);
  if (SBYTE7(__dst[1]) < 0)
    operator delete(*(void **)&__dst[0]);
LABEL_57:
  sub_20C7C0F74();
  sub_20C7C0FDC((__int128 **)__dst, (uint64_t)&v141, (unsigned __int8 *)&qword_25498D268);
  if ((*(char *)(*(_QWORD *)&__dst[0] + 23) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(*(_QWORD *)&__dst[0] + 23))
      goto LABEL_62;
    goto LABEL_61;
  }
  if (*(_QWORD *)(*(_QWORD *)&__dst[0] + 8))
LABEL_61:
    pxrInternal__aapl__pxrReserved__::UsdObject::SetDisplayName((uint64_t)&v123, *(uint64_t (***)(_QWORD, uint64_t))&__dst[0]);
LABEL_62:
  sub_20C7C5A74((uint64_t)&v123, (uint64_t)&v141);
  *(_QWORD *)&__dst[0] = &v144;
  sub_20BDE5038((void ***)__dst);
  v42 = (std::__shared_weak_count *)v142;
  if (!(_QWORD)v142)
    goto LABEL_66;
  v43 = (unint64_t *)(v142 + 8);
  do
    v44 = __ldaxr(v43);
  while (__stlxr(v44 - 1, v43));
  if (!v44)
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
    if (a4)
      goto LABEL_67;
  }
  else
  {
LABEL_66:
    if (a4)
    {
LABEL_67:
      *(_QWORD *)&__dst[0] = v121 + 2;
      v45 = sub_20C7C92C4((uint64_t **)(a1 + 56), (const void **)&v121[2].__r_.__value_.__l.__data_, (uint64_t)&unk_20CAC184C, (__int128 **)__dst);
      v46 = v45;
      *((_DWORD *)v45 + 14) = (_DWORD)v123;
      v47 = v124;
      if (v124)
      {
        v48 = (unint64_t *)((char *)v124 + 48);
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
      v50 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v45[8];
      v46[8] = (uint64_t)v47;
      if (v50)
        sub_20C35C614(v50);
      sub_20C01A074((int *)v46 + 18, &v125);
      sub_20C01A0C8((int *)v46 + 19, &v126);
      sub_20BF32220(v46 + 10, &v127);
      goto LABEL_73;
    }
  }
  sub_20C7C0F74();
  sub_20C7C0FDC(&v130, (uint64_t)&v121, (unsigned __int8 *)&qword_25498D0D0);
  if (*((char *)v130 + 23) < 0)
  {
    if (!*((_QWORD *)v130 + 1))
      goto LABEL_73;
  }
  else if (!*((_BYTE *)v130 + 23))
  {
    goto LABEL_73;
  }
  v69 = sub_20BDEEBA4(a1 + 56, (const void **)v130);
  if (a1 + 64 != v69)
  {
    v70 = (uint64_t)v121;
    v128 = v121;
    v129 = v122;
    if (v122)
    {
      v71 = (unint64_t *)&v122->__shared_owners_;
      do
        v72 = __ldxr(v71);
      while (__stxr(v72 + 1, v71));
    }
    sub_20C93AF94(v70, &v144);
    v73 = v69 + 56;
    if (!(_QWORD)v144)
      goto LABEL_128;
    sub_20C7C0F74();
    sub_20C7C0FDC(&v141, (uint64_t)&v144, (unsigned __int8 *)&qword_25498D130);
    v74 = v141;
    if (*((char *)v141 + 23) < 0)
    {
      if (!*((_QWORD *)v141 + 1))
      {
LABEL_121:
        sub_20C7C0F74();
        sub_20C7C0FDC(&v141, (uint64_t)&v144, (unsigned __int8 *)&qword_25498CF68);
        v80 = v141;
        if (*((char *)v141 + 23) < 0)
        {
          if (!*((_QWORD *)v141 + 1))
            goto LABEL_128;
        }
        else if (!*((_BYTE *)v141 + 23))
        {
          goto LABEL_128;
        }
        *(_QWORD *)&__dst[0] = "usdMtlx/reader.cpp";
        *((_QWORD *)&__dst[0] + 1) = "_ConnectPorts";
        *(_QWORD *)&__dst[1] = 1126;
        *((_QWORD *)&__dst[1] + 1) = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_NodeGraphBuilder::_C"
                                     "onnectPorts(const mx::ConstElementPtr &, const U &, const D &) [U = pxrInternal__aa"
                                     "pl__pxrReserved__::UsdShadeInput, D = pxrInternal__aapl__pxrReserved__::UsdShadeInput]";
        LOBYTE(v150) = 0;
        if (*((char *)v141 + 23) < 0)
          v80 = *(__int128 **)v141;
        sub_20C348EEC(v69 + 56, (int *)&v139);
        v81 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v139);
        sub_20C348EEC((uint64_t)&v123, &v147);
        v82 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v147);
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)__dst, (pxrInternal__aapl__pxrReserved__ *)"Dropped swizzle %s between <%s> -> <%s>", v83, v80, v81, v82);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v148);
        sub_20BFD265C(&v147);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v139 + 1);
        sub_20BFD265C(&v139);
LABEL_128:
        v84 = (std::__shared_weak_count *)*((_QWORD *)&v144 + 1);
        if (*((_QWORD *)&v144 + 1))
        {
          v85 = (unint64_t *)(*((_QWORD *)&v144 + 1) + 8);
          do
            v86 = __ldaxr(v85);
          while (__stlxr(v86 - 1, v85));
          if (!v86)
          {
            ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
            std::__shared_weak_count::__release_weak(v84);
          }
        }
        if (sub_20C7C289C(0))
        {
          sub_20C348EEC(v69 + 56, (int *)__dst);
          v87 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)__dst);
          sub_20C348EEC((uint64_t)&v123, (int *)&v144);
          v88 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v144);
          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)" - Getting referencedPrim for (%s) under (%s).\n", v89, v90, v87, v88);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v144 + 1);
          sub_20BFD265C(&v144);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__dst + 1);
          sub_20BFD265C(__dst);
        }
        sub_20C348EEC(v69 + 56, &v147);
        sub_20C35C4F8((uint64_t)&v144, (uint64_t *)&v124, &v125);
        sub_20C35C4F8((uint64_t)&v141, (uint64_t *)(v69 + 64), (_DWORD *)(v69 + 72));
        sub_20C3AD22C((uint64_t)&v144, (uint64_t)__dst);
        if (LODWORD(__dst[0]) == (_DWORD)v141
          && *(_OWORD *)((char *)__dst + 8) == v142
          && (v91 = *((_QWORD *)&__dst[1] + 1),
              (*((_QWORD *)&__dst[1] + 1) & 0xFFFFFFFFFFFFFFF8) == (v143 & 0xFFFFFFFFFFFFFFF8)))
        {
          IsCompatible = 0;
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v139, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v141);
          v139 = (__int128 *)off_24C53DD78;
          if (!v140 || (*(_BYTE *)(v140 + 57) & 8) != 0)
            IsCompatible = 0;
          else
            IsCompatible = pxrInternal__aapl__pxrReserved__::UsdTyped::_IsCompatible((pxrInternal__aapl__pxrReserved__::UsdTyped *)&v139);
          pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::~UsdShadeNodeGraph((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)&v139);
          v91 = *((_QWORD *)&__dst[1] + 1);
        }
        if ((v91 & 7) != 0)
        {
          v93 = (unsigned int *)(v91 & 0xFFFFFFFFFFFFFFF8);
          do
            v94 = __ldxr(v93);
          while (__stlxr(v94 - 2, v93));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__dst[1] + 1);
        sub_20BFD265C(&__dst[1]);
        v95 = (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)*((_QWORD *)&__dst[0] + 1);
        if (*((_QWORD *)&__dst[0] + 1))
          sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&__dst[0] + 1));
        if (IsCompatible)
        {
          StaticTfType = pxrInternal__aapl__pxrReserved__::UsdShadeShader::_GetStaticTfType(v95);
          SchemaInfo = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)StaticTfType, v97);
          if (pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)&v144, SchemaInfo, v99))
          {
            sub_20C3AD22C((uint64_t)&v144, (uint64_t)__dst);
            sub_20C348EEC((uint64_t)__dst, (int *)&v139);
            if ((BYTE8(__dst[1]) & 7) != 0)
            {
              v100 = (unsigned int *)(*((_QWORD *)&__dst[1] + 1) & 0xFFFFFFFFFFFFFFF8);
              do
                v101 = __ldxr(v100);
              while (__stlxr(v101 - 2, v100));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__dst[1] + 1);
            sub_20BFD265C(&__dst[1]);
            if (*((_QWORD *)&__dst[0] + 1))
              sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&__dst[0] + 1));
          }
          else
          {
            sub_20C348EEC((uint64_t)&v144, (int *)&v139);
          }
          sub_20C348EEC((uint64_t)&v141, (int *)__dst);
          NameToken = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)__dst);
          pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)&v139, NameToken, &v137);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__dst + 1);
          sub_20BFD265C(__dst);
          sub_20C7C9500((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v141, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v137, (uint64_t)__dst);
          sub_20C348EEC((uint64_t)__dst, &v133);
          sub_20C348EEC(v73, &v131);
          v103 = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v131);
          pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v133, v103, &v135);
          sub_20BFD3EBC(&v147, &v135);
          sub_20BFD3F10(&v148, &v136);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v136);
          sub_20BFD265C(&v135);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v132);
          sub_20BFD265C(&v131);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v134);
          sub_20BFD265C(&v133);
          if ((BYTE8(__dst[1]) & 7) != 0)
          {
            v104 = (unsigned int *)(*((_QWORD *)&__dst[1] + 1) & 0xFFFFFFFFFFFFFFF8);
            do
              v105 = __ldxr(v104);
            while (__stlxr(v105 - 2, v104));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__dst[1] + 1);
          sub_20BFD265C(&__dst[1]);
          if (*((_QWORD *)&__dst[0] + 1))
            sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&__dst[0] + 1));
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v138);
          sub_20BFD265C(&v137);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v139 + 1);
          sub_20BFD265C(&v139);
        }
        if ((pxrInternal__aapl__pxrReserved__::UsdShadeInput::ConnectToSource((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&v123, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v147) & 1) != 0)
        {
          if (!sub_20C7C289C(0))
          {
LABEL_167:
            if ((v143 & 7) != 0)
            {
              v114 = (unsigned int *)(v143 & 0xFFFFFFFFFFFFFFF8);
              do
                v115 = __ldxr(v114);
              while (__stlxr(v115 - 2, v114));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v142 + 3);
            sub_20BFD265C((_DWORD *)&v142 + 2);
            if ((_QWORD)v142)
              sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v142);
            if ((v146 & 7) != 0)
            {
              v116 = (unsigned int *)(v146 & 0xFFFFFFFFFFFFFFF8);
              do
                v117 = __ldxr(v116);
              while (__stlxr(v117 - 2, v116));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v145 + 1);
            sub_20BFD265C(&v145);
            if (*((_QWORD *)&v144 + 1))
              sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v144 + 1));
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v148);
            sub_20BFD265C(&v147);
            v118 = v129;
            if (v129)
            {
              v119 = (unint64_t *)&v129->__shared_owners_;
              do
                v120 = __ldaxr(v119);
              while (__stlxr(v120 - 1, v119));
              if (!v120)
              {
                ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
                std::__shared_weak_count::__release_weak(v118);
              }
            }
            goto LABEL_73;
          }
          v106 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v147);
          sub_20C348EEC((uint64_t)&v123, (int *)__dst);
          v107 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)__dst);
          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"    + Connected <%s> -> <%s>\n", v108, v109, v106, v107);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__dst + 1);
          v110 = (__int128 **)__dst;
        }
        else
        {
          *(_QWORD *)&__dst[0] = "usdMtlx/reader.cpp";
          *((_QWORD *)&__dst[0] + 1) = "_ConnectPorts";
          *(_QWORD *)&__dst[1] = 1164;
          *((_QWORD *)&__dst[1] + 1) = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_NodeGraphBuilder::"
                                       "_ConnectPorts(const mx::ConstElementPtr &, const U &, const D &) [U = pxrInternal"
                                       "__aapl__pxrReserved__::UsdShadeInput, D = pxrInternal__aapl__pxrReserved__::UsdShadeInput]";
          LOBYTE(v150) = 0;
          v111 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v147);
          sub_20C348EEC((uint64_t)&v123, (int *)&v139);
          v112 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v139);
          pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)__dst, (pxrInternal__aapl__pxrReserved__ *)"Failed to connect <%s> -> <%s>", v113, v111, v112);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v139 + 1);
          v110 = &v139;
        }
        sub_20BFD265C(v110);
        goto LABEL_167;
      }
    }
    else if (!*((_BYTE *)v141 + 23))
    {
      goto LABEL_121;
    }
    *(_QWORD *)&__dst[0] = "usdMtlx/reader.cpp";
    *((_QWORD *)&__dst[0] + 1) = "_ConnectPorts";
    *(_QWORD *)&__dst[1] = 1118;
    *((_QWORD *)&__dst[1] + 1) = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_NodeGraphBuilder::_Conne"
                                 "ctPorts(const mx::ConstElementPtr &, const U &, const D &) [U = pxrInternal__aapl__pxrR"
                                 "eserved__::UsdShadeInput, D = pxrInternal__aapl__pxrReserved__::UsdShadeInput]";
    LOBYTE(v150) = 0;
    if (*((char *)v141 + 23) < 0)
      v74 = *(__int128 **)v141;
    sub_20C348EEC(v69 + 56, (int *)&v139);
    v77 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v139);
    sub_20C348EEC((uint64_t)&v123, &v147);
    v78 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v147);
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)__dst, (pxrInternal__aapl__pxrReserved__ *)"Dropped member %s between <%s> -> <%s>", v79, v74, v77, v78);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v148);
    sub_20BFD265C(&v147);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v139 + 1);
    sub_20BFD265C(&v139);
    goto LABEL_121;
  }
  *(_QWORD *)&__dst[0] = "usdMtlx/reader.cpp";
  *((_QWORD *)&__dst[0] + 1) = "_AddInputCommon";
  *(_QWORD *)&__dst[1] = 996;
  *((_QWORD *)&__dst[1] + 1) = "UsdShadeInput pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_NodeGraphBuilder:"
                               ":_AddInputCommon(const mx::ConstValueElementPtr &, const UsdShadeConnectableAPI &, BOOL)";
  LOBYTE(v150) = 0;
  v75 = v130;
  if (*((char *)v130 + 23) < 0)
    v75 = *(__int128 **)v130;
  v76 = (std::string::__raw *)&v121[2];
  if (SHIBYTE(v121[2].__r_.__value_.__r.__words[2]) < 0)
    v76 = (std::string::__raw *)v76->__words[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)__dst, (pxrInternal__aapl__pxrReserved__ *)"No interface name '%s' for node '%s'", v68, v75, v76);
LABEL_73:
  *(_QWORD *)&__dst[0] = a2;
  v51 = sub_20C7C993C(a1 + 80, a2, (uint64_t)&unk_20CAC184C, (_QWORD **)__dst);
  *((_DWORD *)v51 + 12) = (_DWORD)v123;
  v52 = v124;
  v124 = 0;
  v53 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v51[7];
  v51[7] = (uint64_t)v52;
  if (v53)
    sub_20C35C614(v53);
  sub_20BFD3EBC((int *)v51 + 16, &v125);
  sub_20BFD3F10((int *)v51 + 17, &v126);
  if (&v123 != (pxrInternal__aapl__pxrReserved__ **)(v51 + 6))
  {
    v54 = v51[9];
    if ((v54 & 7) != 0)
    {
      v55 = (unsigned int *)(v54 & 0xFFFFFFFFFFFFFFF8);
      do
        v56 = __ldxr(v55);
      while (__stlxr(v56 - 2, v55));
    }
    v51[9] = v127;
    v127 = 0;
  }
  *(_DWORD *)a5 = *((_DWORD *)v51 + 12);
  v57 = v51[7];
  *(_QWORD *)(a5 + 8) = v57;
  if (v57)
  {
    v58 = (unint64_t *)(v57 + 48);
    do
      v59 = __ldxr(v58);
    while (__stxr(v59 + 1, v58));
  }
  sub_20BFD6E54((_DWORD *)(a5 + 16), (_DWORD *)v51 + 16);
  sub_20BFD6EA4((_DWORD *)(a5 + 20), (_DWORD *)v51 + 17);
  v60 = v51[9];
  *(_QWORD *)(a5 + 24) = v60;
  if ((v60 & 7) != 0)
  {
    v61 = (unsigned int *)(v60 & 0xFFFFFFFFFFFFFFF8);
    do
      v62 = __ldxr(v61);
    while (__stxr(v62 + 2, v61));
    if ((v62 & 1) == 0)
      *(_QWORD *)(a5 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  if ((v127 & 7) != 0)
  {
    v63 = (unsigned int *)(v127 & 0xFFFFFFFFFFFFFFF8);
    do
      v64 = __ldxr(v63);
    while (__stlxr(v64 - 2, v63));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v126);
  sub_20BFD265C(&v125);
  if (v124)
    sub_20C35C614(v124);
  v65 = v122;
  if (v122)
  {
    v66 = (unint64_t *)&v122->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
}

void sub_20C7C7184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  sub_20C35C2E0((uint64_t)&a29);
  sub_20C35C2E0(v29 - 176);
  sub_20BFD1A18((_DWORD *)(v29 - 136));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a19);
  sub_20C5BD350((uint64_t)&a15);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a13);
  _Unwind_Resume(a1);
}

void sub_20C7C7450(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void **v15;
  unsigned __int8 *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v3 = *(uint64_t **)(a1 + 136);
  for (i = *(uint64_t **)(a1 + 144); v3 != i; v3 += 2)
  {
    v8 = *v3;
    v7 = v3[1];
    v24 = *v3;
    v25 = (std::__shared_weak_count *)v7;
    if (v7)
    {
      v9 = (unint64_t *)(v7 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    sub_20C93B3CC(v8, &v23);
    if (!(_QWORD)v23)
      goto LABEL_23;
    v11 = (char)a2[23];
    v12 = *((_QWORD *)a2 + 1);
    if (v11 >= 0)
      v12 = a2[23];
    if (v12)
    {
      v13 = *(unsigned __int8 *)(v8 + 47);
      if ((v13 & 0x80u) == 0)
        v14 = *(unsigned __int8 *)(v8 + 47);
      else
        v14 = *(_QWORD *)(v8 + 32);
      if (v14 != v12)
        goto LABEL_23;
      v15 = (const void **)(v8 + 24);
      if (v11 >= 0)
        v16 = a2;
      else
        v16 = *(unsigned __int8 **)a2;
      if ((v13 & 0x80) != 0)
      {
        if (memcmp(*v15, v16, *(_QWORD *)(v8 + 32)))
          goto LABEL_23;
      }
      else if (*(_BYTE *)(v8 + 47))
      {
        while (*(unsigned __int8 *)v15 == *v16)
        {
          v15 = (const void **)((char *)v15 + 1);
          ++v16;
          if (!--v13)
            goto LABEL_22;
        }
        goto LABEL_23;
      }
    }
LABEL_22:
    sub_20BDEA72C((char **)a3, &v23);
LABEL_23:
    v17 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
    if (*((_QWORD *)&v23 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v20 = v25;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
}

void sub_20C7C75D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a11);
  sub_20BDE9EB0((void ***)&a11);
  _Unwind_Resume(a1);
}

__int128 **sub_20C7C7604(uint64_t a1, uint64_t a2)
{
  __int128 **result;
  __int128 *v5;

  sub_20C7C0F74();
  result = sub_20C7C0FDC(&v5, a2, (unsigned __int8 *)&qword_25498CFF8);
  if (*((char *)v5 + 23) < 0)
  {
    if (!*((_QWORD *)v5 + 1))
      return result;
  }
  else if (!*((_BYTE *)v5 + 23))
  {
    return result;
  }
  return (__int128 **)pxrInternal__aapl__pxrReserved__::UsdObject::SetDocumentation(a1, (uint64_t (**)(_QWORD, uint64_t))v5);
}

unsigned __int8 *sub_20C7C766C(float *a1, uint64_t a2, unsigned __int8 *a3)
{
  unsigned __int8 *result;
  const std::string *v7;

  result = sub_20C67F73C((_QWORD *)(*(_QWORD *)a2 + 160), a3);
  if (result)
  {
    sub_20C7C0FDC((__int128 **)&v7, a2, a3);
    *a1 = sub_20C9589D0(v7);
    return (unsigned __int8 *)1;
  }
  return result;
}

_QWORD *sub_20C7C76F4(_QWORD *a1, __int128 *a2)
{
  _QWORD *v3;
  __int128 v4;

  *a1 = &unk_24C54B9D0;
  v3 = a1 + 1;
  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(v3, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    v3[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
  }
  return a1;
}

void sub_20C7C774C(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void sub_20C7C7760(std::exception *a1)
{
  void *v1;

  sub_20C7C77A8(a1);
  operator delete(v1);
}

uint64_t sub_20C7C7774(uint64_t a1)
{
  uint64_t result;

  result = a1 + 8;
  if (*(char *)(a1 + 31) < 0)
    return *(_QWORD *)result;
  return result;
}

void sub_20C7C7794(std::exception *a1)
{
  void *v1;

  sub_20C7C77A8(a1);
  operator delete(v1);
}

void sub_20C7C77A8(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&unk_24C54B9D0;
  if (SHIBYTE(this[3].__vftable) < 0)
    operator delete(this[1].__vftable);
  std::exception::~exception(this);
}

void sub_20C7C77E8(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 *v6;
  __int128 *v7;
  uint64_t v8;
  char v9;
  unsigned int *v10;
  unsigned int v11;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unint64_t *v21;
  unint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  uint64_t v29;

  sub_20C7C0F74();
  v6 = sub_20C67F73C((_QWORD *)(*a2 + 160), (unsigned __int8 *)&qword_25498D1F0);
  if (v6)
    v7 = (__int128 *)(v6 + 40);
  else
    v7 = sub_20C957390();
  v8 = *((unsigned __int8 *)v7 + 23);
  v9 = v8;
  if ((v8 & 0x80u) != 0)
    v8 = *((_QWORD *)v7 + 1);
  if (v8)
  {
    if ((v9 & 0x80) == 0)
      goto LABEL_8;
LABEL_25:
    if (*((_QWORD *)v7 + 1))
      goto LABEL_9;
LABEL_26:
    *(_DWORD *)a3 = 3;
    *(_QWORD *)(a3 + 8) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 20));
    *(_QWORD *)(a3 + 24) = 0;
    return;
  }
  v7 = sub_20C957390();
  v9 = *((_BYTE *)v7 + 23);
  if (v9 < 0)
    goto LABEL_25;
LABEL_8:
  if (!v9)
    goto LABEL_26;
LABEL_9:
  v29 = 0;
  pxrInternal__aapl__pxrReserved__::UsdMtlxGetUsdType((unsigned __int8 *)v7, (uint64_t)&v26);
  v28 = v26;
  if ((v27 & 7) != 0)
  {
    v10 = (unsigned int *)((unint64_t)v27 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::_IsEmpty((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v28))
  {
    v12 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v12)
      v12 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    v28 = *((_QWORD *)v12 + 11);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v26);
    if ((v29 & 7) != 0)
    {
      v13 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
      do
        v14 = __ldxr(v13);
      while (__stlxr(v14 - 2, v13));
    }
    v29 = v26;
  }
  v15 = *a2;
  v16 = (std::__shared_weak_count *)a2[1];
  v26 = v15;
  v27 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  if (v15)
    sub_20C7C3084(v15 + 48, (uint64_t)&v25);
  else
    v25 = 0;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::CreateInput(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v25, (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v28, a3);
  if ((v25 & 7) != 0)
  {
    v19 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stlxr(v20 - 2, v19));
    v16 = v27;
  }
  if (v16)
  {
    v21 = (unint64_t *)&v16->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v29)
  {
    pxrInternal__aapl__pxrReserved__::UsdShadeInput::SetRenderType((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)a3, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v29);
    if ((v29 & 7) != 0)
    {
      v23 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
      do
        v24 = __ldxr(v23);
      while (__stlxr(v24 - 2, v23));
    }
  }
}

void sub_20C7C7A24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  unsigned int *v14;
  unsigned int v15;

  if ((a14 & 7) != 0)
  {
    v14 = (unsigned int *)(a14 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C7C7AA0(pxrInternal__aapl__pxrReserved__::UsdAttribute *a1, void **a2)
{
  char *v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::string *v10;
  std::string *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  char *v16;
  void **v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 *v21;
  void *v22;
  const char *v23;
  char *v24;
  std::string *v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  __int128 *v29;
  void *v30;
  const char *v31;
  char *v32;
  void **v33;
  unint64_t *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  char *v40;
  void **v41;
  __int128 *v42;
  __int128 *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  __int128 *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  void *v55;
  std::__shared_weak_count *v56;
  std::string::size_type v57;
  BOOL v59;
  int *v60;
  int v62;
  int v63;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *size;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  __int128 *v72;
  std::string::size_type *v73;
  std::string::size_type *v74;
  char v75;
  std::string::size_type v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  int v81;
  BOOL v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  unsigned int *v90;
  unsigned int v91;
  uint64_t v93;
  std::__shared_weak_count *v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  _QWORD v97[2];
  uint64_t v98;
  std::__shared_weak_count *v99;
  void *v100[2];
  char v101;
  std::string v102;
  void *__p;
  const char *v104;
  uint64_t v105;
  const char *v106;
  char v107;
  std::string v108;
  std::__shared_weak_count *v109;
  std::__shared_weak_count *v110;
  std::string *v111;
  std::string *v112;
  char v113[8];
  uint64_t v114;
  uint64_t v115;

  v115 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)a2[1];
  __p = *a2;
  v104 = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  pxrInternal__aapl__pxrReserved__::UsdMtlxGetUsdValue((uint64_t)&__p, 0, (uint64_t)v113);
  v7 = (std::__shared_weak_count *)v104;
  if (v104)
  {
    v8 = (unint64_t *)(v104 + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v114)
    pxrInternal__aapl__pxrReserved__::UsdShadeInput::Set(a1, v113, NAN);
  sub_20C7C0F74();
  sub_20C7C0FDC((__int128 **)&v112, (uint64_t)a2, (unsigned __int8 *)&qword_25498D298);
  sub_20C7C0F74();
  sub_20C7C0FDC((__int128 **)&v111, (uint64_t)a2, (unsigned __int8 *)&qword_25498D2B0);
  v10 = v112;
  if (SHIBYTE(v112->__r_.__value_.__r.__words[2]) < 0)
  {
    if (!v112->__r_.__value_.__l.__size_)
      goto LABEL_76;
  }
  else if (!*((_BYTE *)&v112->__r_.__value_.__s + 23))
  {
    goto LABEL_76;
  }
  if ((SHIBYTE(v111->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!*((_BYTE *)&v111->__r_.__value_.__s + 23))
      goto LABEL_76;
LABEL_19:
    sub_20C7C0F74();
    sub_20C7C0FDC((__int128 **)&__p, (uint64_t)a2, (unsigned __int8 *)&qword_25498D1F0);
    pxrInternal__aapl__pxrReserved__::UsdMtlxGetPackedUsdValues(v10, (unsigned __int8 *)__p, (uint64_t *)&v109);
    if (v109 == v110)
    {
      __p = "usdMtlx/reader.cpp";
      v104 = "_CopyValue";
      v105 = 525;
      v106 = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_CopyValue(const UsdShadeInput &, const mx::C"
             "onstValueElementPtr &)";
      v107 = 0;
      v21 = (__int128 *)v112;
      if (SHIBYTE(v112->__r_.__value_.__r.__words[2]) < 0)
        v21 = (__int128 *)v112->__r_.__value_.__r.__words[0];
      v22 = *a2;
      v93 = 0;
      v94 = 0;
      sub_20C93BC54((uint64_t)v22, &v93, (uint64_t)&v102);
      if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v25 = &v102;
      else
        v25 = (std::string *)v102.__r_.__value_.__r.__words[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Failed to parse valuecurve '%s' on '%s';  ignoring",
        v23,
        v24,
        v21,
        v25);
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__p, &v108);
      if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v108.__r_.__value_.__l.__data_);
      if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v102.__r_.__value_.__l.__data_);
      v26 = v94;
      if (v94)
      {
        p_shared_owners = (unint64_t *)&v94->__shared_owners_;
        do
          v28 = __ldaxr(p_shared_owners);
        while (__stlxr(v28 - 1, p_shared_owners));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      goto LABEL_75;
    }
    v11 = v111;
    sub_20BDDC0E4(&__p, "integer");
    pxrInternal__aapl__pxrReserved__::UsdMtlxGetPackedUsdValues(v11, (unsigned __int8 *)&__p, (uint64_t *)&v108);
    if (SHIBYTE(v105) < 0)
      operator delete(__p);
    if (v108.__r_.__value_.__l.__size_ - v108.__r_.__value_.__r.__words[0] == 32)
    {
      v12 = *(unsigned int *)sub_20BFB1BA8((pxrInternal__aapl__pxrReserved__::VtValue *)v108.__r_.__value_.__l.__data_);
      v13 = *(unsigned int *)sub_20BFB1BA8((pxrInternal__aapl__pxrReserved__::VtValue *)(v108.__r_.__value_.__r.__words[0]
                                                                                       + 16));
      if ((int)v13 >= (int)v12)
      {
        v35 = (uint64_t)v109;
        v36 = v110;
        v37 = ((char *)v110 - (char *)v109) >> 4;
        if (v37 == (_DWORD)v13 - (_DWORD)v12 + 1)
        {
          while ((std::__shared_weak_count *)v35 != v36)
          {
            pxrInternal__aapl__pxrReserved__::UsdShadeInput::Set(a1, v35, (double)(int)v12);
            LODWORD(v12) = v12 + 1;
            v35 += 16;
          }
        }
        else
        {
          __p = "usdMtlx/reader.cpp";
          v104 = "_CopyValue";
          v105 = 507;
          v106 = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_CopyValue(const UsdShadeInput &, const m"
                 "x::ConstValueElementPtr &)";
          v107 = 0;
          v38 = *a2;
          v97[0] = 0;
          v97[1] = 0;
          sub_20C93BC54((uint64_t)v38, v97, (uint64_t)v100);
          if (v101 >= 0)
            v41 = v100;
          else
            v41 = (void **)v100[0];
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"valuerange [%d,%d] doesn't match valuecurve size %zd on '%s';  ignoring",
            v39,
            v40,
            v12,
            v13,
            v37,
            v41);
          pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__p, &v102);
          if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v102.__r_.__value_.__l.__data_);
          if (v101 < 0)
            operator delete(v100[0]);
          pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v97);
        }
        goto LABEL_74;
      }
      __p = "usdMtlx/reader.cpp";
      v104 = "_CopyValue";
      v105 = 500;
      v106 = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_CopyValue(const UsdShadeInput &, const mx::C"
             "onstValueElementPtr &)";
      v107 = 0;
      v14 = *a2;
      v98 = 0;
      v99 = 0;
      sub_20C93BC54((uint64_t)v14, &v98, (uint64_t)v100);
      if (v101 >= 0)
        v17 = v100;
      else
        v17 = (void **)v100[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Invalid valuerange [%d,%d] on '%s';  ignoring",
        v15,
        v16,
        v12,
        v13,
        v17);
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__p, &v102);
      if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v102.__r_.__value_.__l.__data_);
      if (v101 < 0)
        operator delete(v100[0]);
      v18 = v99;
      if (!v99)
      {
LABEL_74:
        __p = &v108;
        sub_20BF8CA20((void ***)&__p);
LABEL_75:
        __p = &v109;
        sub_20BF8CA20((void ***)&__p);
        goto LABEL_76;
      }
      v19 = (unint64_t *)&v99->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
    }
    else
    {
      __p = "usdMtlx/reader.cpp";
      v104 = "_CopyValue";
      v105 = 519;
      v106 = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_CopyValue(const UsdShadeInput &, const mx::C"
             "onstValueElementPtr &)";
      v107 = 0;
      v29 = (__int128 *)v111;
      if (SHIBYTE(v111->__r_.__value_.__r.__words[2]) < 0)
        v29 = (__int128 *)v111->__r_.__value_.__r.__words[0];
      v30 = *a2;
      v95 = 0;
      v96 = 0;
      sub_20C93BC54((uint64_t)v30, &v95, (uint64_t)v100);
      if (v101 >= 0)
        v33 = v100;
      else
        v33 = (void **)v100[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Malformed valuerange '%s' on '%s';  ignoring",
        v31,
        v32,
        v29,
        v33);
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__p, &v102);
      if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v102.__r_.__value_.__l.__data_);
      if (v101 < 0)
        operator delete(v100[0]);
      v18 = v96;
      if (!v96)
        goto LABEL_74;
      v34 = (unint64_t *)&v96->__shared_owners_;
      do
        v20 = __ldaxr(v34);
      while (__stlxr(v20 - 1, v34));
    }
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    goto LABEL_74;
  }
  if (v111->__r_.__value_.__l.__size_)
    goto LABEL_19;
LABEL_76:
  v42 = sub_20C7B0904((uint64_t)*a2);
  sub_20C93BF6C((uint64_t)*a2, &__p);
  v43 = sub_20C7B0904((uint64_t)__p);
  v44 = (std::__shared_weak_count *)v104;
  if (v104)
  {
    v45 = (unint64_t *)(v104 + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v47 = *((unsigned __int8 *)v42 + 23);
  if ((v47 & 0x80u) == 0)
    v48 = *((unsigned __int8 *)v42 + 23);
  else
    v48 = *((_QWORD *)v42 + 1);
  if (!v48)
    return sub_20BF4C2D8((uint64_t)v113);
  v49 = *((unsigned __int8 *)v43 + 23);
  v50 = (char)v49;
  if ((v49 & 0x80u) != 0)
    v49 = *((_QWORD *)v43 + 1);
  if (v48 == v49)
  {
    if (v50 >= 0)
      v51 = v43;
    else
      v51 = *(__int128 **)v43;
    if ((v47 & 0x80) != 0)
    {
      if (!memcmp(*(const void **)v42, v51, *((_QWORD *)v42 + 1)))
        return sub_20BF4C2D8((uint64_t)v113);
    }
    else
    {
      if (!*((_BYTE *)v42 + 23))
        return sub_20BF4C2D8((uint64_t)v113);
      while (*(unsigned __int8 *)v42 == *(unsigned __int8 *)v51)
      {
        v42 = (__int128 *)((char *)v42 + 1);
        v51 = (__int128 *)((char *)v51 + 1);
        if (!--v47)
          return sub_20BF4C2D8((uint64_t)v113);
      }
    }
  }
  v52 = (*(uint64_t (**)(void *))(*(_QWORD *)*a2 + 56))(*a2);
  if ((*(char *)(v52 + 23) & 0x80000000) == 0)
  {
    v53 = *(unsigned __int8 *)(v52 + 23);
    if (v53 != 6)
    {
      if (v53 != 8)
        return sub_20BF4C2D8((uint64_t)v113);
      goto LABEL_104;
    }
    if (*(_DWORD *)v52 == 1869377379 && *(_WORD *)(v52 + 4) == 13170)
    {
LABEL_179:
      sub_20C7B0904((uint64_t)*a2);
      pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&__p);
      pxrInternal__aapl__pxrReserved__::UsdAttribute::SetColorSpace(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&__p);
      if ((__p & 7) != 0)
      {
        v90 = (unsigned int *)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8);
        do
          v91 = __ldxr(v90);
        while (__stlxr(v91 - 2, v90));
      }
      return sub_20BF4C2D8((uint64_t)v113);
    }
    v59 = *(_DWORD *)v52 == 1869377379 && *(_WORD *)(v52 + 4) == 13426;
LABEL_122:
    if (!v59)
      return sub_20BF4C2D8((uint64_t)v113);
    goto LABEL_179;
  }
  v54 = *(_QWORD *)(v52 + 8);
  if (v54 == 6)
  {
    v60 = *(int **)v52;
    if (**(_DWORD **)v52 == 1869377379 && *(_WORD *)(*(_QWORD *)v52 + 4) == 13170)
      goto LABEL_179;
    v62 = *v60;
    v63 = *((unsigned __int16 *)v60 + 2);
    v59 = v62 == 1869377379 && v63 == 13426;
    goto LABEL_122;
  }
  if (v54 != 8)
    return sub_20BF4C2D8((uint64_t)v113);
  v52 = *(_QWORD *)v52;
LABEL_104:
  if (*(_QWORD *)v52 == 0x656D616E656C6966)
  {
    v55 = *a2;
    v56 = (std::__shared_weak_count *)*((_QWORD *)*a2 + 29);
    if (v56)
    {
      v56 = std::__shared_weak_count::lock(v56);
      v57 = (std::string::size_type)v56;
      if (v56)
        v56 = (std::__shared_weak_count *)*((_QWORD *)v55 + 28);
    }
    else
    {
      v57 = 0;
    }
    v108.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
    v108.__r_.__value_.__l.__size_ = v57;
    sub_20C93B1B0((uint64_t)v56, &__p);
    sub_20C7C861C((uint64_t *)&__p, &v109);
    v65 = (std::__shared_weak_count *)v104;
    if (v104)
    {
      v66 = (unint64_t *)(v104 + 8);
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
      }
    }
    size = (std::__shared_weak_count *)v108.__r_.__value_.__l.__size_;
    if (v108.__r_.__value_.__l.__size_)
    {
      v69 = (unint64_t *)(v108.__r_.__value_.__l.__size_ + 8);
      do
        v70 = __ldaxr(v69);
      while (__stlxr(v70 - 1, v69));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v71 = (uint64_t)v109;
    if (v109)
    {
      v72 = sub_20C957390();
      sub_20C7C7450(v71, (unsigned __int8 *)v72, (uint64_t)&__p);
      v73 = (std::string::size_type *)__p;
      v74 = (std::string::size_type *)v104;
      if (__p != v104)
      {
        v75 = 0;
        while (1)
        {
          v76 = *v73;
          v77 = (std::__shared_weak_count *)v73[1];
          v108.__r_.__value_.__r.__words[0] = *v73;
          v108.__r_.__value_.__l.__size_ = (std::string::size_type)v77;
          if (v77)
          {
            v78 = (unint64_t *)&v77->__shared_owners_;
            do
              v79 = __ldxr(v78);
            while (__stxr(v79 + 1, v78));
          }
          v80 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v76 + 56))(v76);
          v81 = *(char *)(v80 + 23);
          if (v81 < 0)
          {
            if (*(_QWORD *)(v80 + 8) != 6)
            {
LABEL_161:
              v84 = 0;
              if (v77)
                goto LABEL_164;
              goto LABEL_168;
            }
            v80 = *(_QWORD *)v80;
          }
          else if (v81 != 6)
          {
            goto LABEL_161;
          }
          if (*(_DWORD *)v80 == 1869377379 && *(_WORD *)(v80 + 4) == 13170)
          {
            v84 = 1;
            if (v77)
              goto LABEL_164;
          }
          else
          {
            v84 = *(_DWORD *)v80 == 1869377379 && *(_WORD *)(v80 + 4) == 13426;
            if (v77)
            {
LABEL_164:
              v85 = (unint64_t *)&v77->__shared_owners_;
              do
                v86 = __ldaxr(v85);
              while (__stlxr(v86 - 1, v85));
              if (!v86)
              {
                ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                std::__shared_weak_count::__release_weak(v77);
              }
            }
          }
LABEL_168:
          v75 |= v84;
          v73 += 2;
          if (v73 == v74)
            goto LABEL_172;
        }
      }
      v75 = 0;
LABEL_172:
      v108.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      sub_20BDE9EB0((void ***)&v108);
    }
    else
    {
      v75 = 0;
    }
    v87 = v110;
    if (v110)
    {
      v88 = (unint64_t *)&v110->__shared_owners_;
      do
        v89 = __ldaxr(v88);
      while (__stlxr(v89 - 1, v88));
      if (!v89)
      {
        ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
        std::__shared_weak_count::__release_weak(v87);
      }
    }
    if ((v75 & 1) != 0)
      goto LABEL_179;
  }
  return sub_20BF4C2D8((uint64_t)v113);
}

void sub_20C7C841C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  uint64_t v39;

  if (a33 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a18);
  a34 = (void *)(v39 - 176);
  sub_20BF8CA20((void ***)&a34);
  a34 = (void *)(v39 - 152);
  sub_20BF8CA20((void ***)&a34);
  sub_20BF4C2D8(v39 - 112);
  _Unwind_Resume(a1);
}

void sub_20C7C861C(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  std::string *v4;
  __int128 *v5;
  void *v6;
  uint64_t v7;
  __int128 v8;
  void *v9;
  size_t v10;
  size_t v11;
  void **v12;
  void *v13;
  char *v14;
  size_t v15;
  void **v16;
  char *v17;
  size_t v18;
  void **v19;
  char *v20;
  size_t v21;
  void **v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  void *__s1[2];
  uint64_t v46;
  void *v47;
  std::__shared_weak_count *v48;

  v4 = (std::string *)*a1;
  v5 = sub_20C957390();
  sub_20C950BB4(v4, (uint64_t)v5, 0, (uint64_t *)__s1);
  v6 = __s1[1];
  v47 = __s1[0];
  v48 = (std::__shared_weak_count *)__s1[1];
  if (__s1[0])
  {
    *a2 = __s1[0];
    a2[1] = v6;
    return;
  }
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 56))(*a1);
  if (*(char *)(v7 + 23) < 0)
  {
    sub_20BDDBFAC(__s1, *(void **)v7, *(_QWORD *)(v7 + 8));
  }
  else
  {
    v8 = *(_OWORD *)v7;
    v46 = *(_QWORD *)(v7 + 16);
    *(_OWORD *)__s1 = v8;
  }
  v9 = (void *)strlen(off_25473DF20[0]);
  v10 = (size_t)v9;
  v11 = HIBYTE(v46);
  if ((SHIBYTE(v46) & 0x80000000) == 0)
  {
    if (v9 != (void *)HIBYTE(v46))
    {
      v14 = off_25473DF28[0];
      v15 = strlen(off_25473DF28[0]);
LABEL_18:
      if (v15 != v11)
      {
        v17 = off_25473DF30[0];
        v18 = strlen(off_25473DF30[0]);
LABEL_27:
        if (v18 != v11)
        {
          v20 = off_25473DF38[0];
          v21 = strlen(off_25473DF38[0]);
          goto LABEL_37;
        }
        v19 = __s1;
        v13 = (void *)v11;
        goto LABEL_35;
      }
      v16 = __s1;
      v13 = (void *)v11;
      goto LABEL_25;
    }
    if (v9 != (void *)-1)
    {
      v12 = __s1;
      goto LABEL_14;
    }
LABEL_75:
    sub_20BEB9180();
  }
  v13 = __s1[1];
  if (v9 != __s1[1])
  {
    v14 = off_25473DF28[0];
    v15 = strlen(off_25473DF28[0]);
    goto LABEL_22;
  }
  if (v9 == (void *)-1)
    goto LABEL_75;
  v12 = (void **)__s1[0];
LABEL_14:
  if (!memcmp(v12, off_25473DF20[0], v10))
    goto LABEL_60;
  v14 = off_25473DF28[0];
  v15 = strlen(off_25473DF28[0]);
  if ((v11 & 0x80) == 0)
    goto LABEL_18;
  v13 = __s1[1];
LABEL_22:
  if ((void *)v15 != v13)
  {
    v17 = off_25473DF30[0];
    v18 = strlen(off_25473DF30[0]);
    goto LABEL_32;
  }
  if (v13 == (void *)-1)
    sub_20BEB9180();
  v16 = (void **)__s1[0];
LABEL_25:
  if (!memcmp(v16, v14, (size_t)v13))
    goto LABEL_60;
  v17 = off_25473DF30[0];
  v18 = strlen(off_25473DF30[0]);
  if ((v11 & 0x80) == 0)
    goto LABEL_27;
  v13 = __s1[1];
LABEL_32:
  if ((void *)v18 != v13)
  {
    v20 = off_25473DF38[0];
    v21 = strlen(off_25473DF38[0]);
    goto LABEL_41;
  }
  if (v13 == (void *)-1)
    sub_20BEB9180();
  v19 = (void **)__s1[0];
LABEL_35:
  if (!memcmp(v19, v17, (size_t)v13))
    goto LABEL_60;
  v20 = off_25473DF38[0];
  v21 = strlen(off_25473DF38[0]);
  if ((v11 & 0x80) == 0)
  {
LABEL_37:
    if (v21 == v11)
    {
      v22 = __s1;
      goto LABEL_44;
    }
    goto LABEL_45;
  }
  v13 = __s1[1];
LABEL_41:
  if ((void *)v21 == v13)
  {
    if (v13 == (void *)-1)
      sub_20BEB9180();
    v22 = (void **)__s1[0];
    v11 = (size_t)v13;
LABEL_44:
    if (memcmp(v22, v20, v11))
      goto LABEL_45;
LABEL_60:
    v34 = a1[1];
    v43 = *a1;
    v44 = (std::__shared_weak_count *)v34;
    if (v34)
    {
      v35 = (unint64_t *)(v34 + 8);
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }
    pxrInternal__aapl__pxrReserved__::UsdMtlxGetVersion(&v43, 0);
    sub_20C7C8E90(*a1);
    v41 = 0;
    v42 = 0;
    sub_20C7C8AC8(a1, &v41, a2);
    v31 = v44;
    if (!v44)
      goto LABEL_68;
    p_shared_owners = (unint64_t *)&v44->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    goto LABEL_66;
  }
LABEL_45:
  v23 = a1[1];
  v43 = *a1;
  v44 = (std::__shared_weak_count *)v23;
  if (v23)
  {
    v24 = (unint64_t *)(v23 + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  pxrInternal__aapl__pxrReserved__::UsdMtlxGetVersion(&v43, 0);
  sub_20C7C8E90(*a1);
  v26 = (std::__shared_weak_count *)a1[1];
  v41 = *a1;
  v42 = v26;
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  sub_20C7C8AC8(a1, &v41, a2);
  if (v26)
  {
    v29 = (unint64_t *)&v26->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v31 = v44;
  if (!v44)
    goto LABEL_68;
  v32 = (unint64_t *)&v44->__shared_owners_;
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 - 1, v32));
LABEL_66:
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
LABEL_68:
  if (SHIBYTE(v46) < 0)
    operator delete(__s1[0]);
  v38 = v48;
  if (v48)
  {
    v39 = (unint64_t *)&v48->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
}

void sub_20C7C8A64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a11);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a13);
  if (a20 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v20 - 64));
  _Unwind_Resume(a1);
}

void sub_20C7C8AC8(uint64_t *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  __int128 *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  __int128 *v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  unint64_t *v33;
  unint64_t *v34;
  unint64_t v35;
  int v36;
  __int128 *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void *__p[2];
  char v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  uint64_t Version;
  int v49;
  __int128 v50;

  sub_20C93BF6C(*a1, __p);
  v6 = (unsigned __int8 *)(*a1 + 24);
  v7 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 56))(*a1);
  v8 = a1[1];
  v46 = *a1;
  v47 = (std::__shared_weak_count *)v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  Version = pxrInternal__aapl__pxrReserved__::UsdMtlxGetVersion(&v46, 0);
  v49 = v11;
  v12 = sub_20C7C8E90(*a1);
  sub_20C7C8F18((uint64_t *)__p, a2, v6, v7, (uint64_t)&Version, (uint64_t)v12, &v50);
  v13 = v47;
  if (v47)
  {
    p_shared_owners = (unint64_t *)&v47->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v17 = (unint64_t *)((char *)__p[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v50;
  if ((_QWORD)v50)
    goto LABEL_15;
  v21 = atomic_load((unsigned __int8 *)&qword_25498D370);
  if ((v21 & 1) == 0 && __cxa_guard_acquire(&qword_25498D370))
  {
    sub_20BDDC0E4(__p, "");
    pxrInternal__aapl__pxrReserved__::UsdMtlxGetDocument((uint64_t)__p, &qword_25498D360);
    if (v45 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource, &qword_25498D360, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498D370);
  }
  if (!sub_20C7C91C0(*a1))
    goto LABEL_30;
  v22 = qword_25498D360;
  v23 = sub_20C7C923C(*a1);
  sub_20C7AE380(v22, (unsigned __int8 *)v23, __p);
  v24 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  v25 = (std::__shared_weak_count *)*((_QWORD *)&v50 + 1);
  v50 = v24;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v29 = (unint64_t *)((char *)__p[1] + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v19 = v50;
  if ((_QWORD)v50)
  {
LABEL_15:
    v20 = *((_QWORD *)&v50 + 1);
    *a3 = v19;
    a3[1] = v20;
  }
  else
  {
LABEL_30:
    v31 = (unsigned __int8 *)(*a1 + 24);
    v32 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 56))(*a1);
    v33 = (unint64_t *)a1[1];
    __p[0] = (void *)*a1;
    __p[1] = v33;
    if (v33)
    {
      v34 = v33 + 1;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
    v46 = pxrInternal__aapl__pxrReserved__::UsdMtlxGetVersion((uint64_t *)__p, 0);
    LODWORD(v47) = v36;
    v37 = sub_20C7C8E90(*a1);
    sub_20C7C8F18(&qword_25498D360, a2, v31, v32, (uint64_t)&v46, (uint64_t)v37, a3);
    v38 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v39 = (unint64_t *)((char *)__p[1] + 8);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    v41 = (std::__shared_weak_count *)*((_QWORD *)&v50 + 1);
    if (*((_QWORD *)&v50 + 1))
    {
      v42 = (unint64_t *)(*((_QWORD *)&v50 + 1) + 8);
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
  }
}

void sub_20C7C8E1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_25498D370);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a20);
  _Unwind_Resume(a1);
}

__int128 *sub_20C7C8E90(uint64_t a1)
{
  unsigned __int8 *v2;
  __int128 *v3;
  void *__p[2];
  char v6;

  sub_20BDDC0E4(__p, off_25473DED0[0]);
  v2 = sub_20C67F73C((_QWORD *)(a1 + 160), (unsigned __int8 *)__p);
  if (v2)
    v3 = (__int128 *)(v2 + 40);
  else
    v3 = sub_20C957390();
  if (v6 < 0)
    operator delete(__p[0]);
  return v3;
}

void sub_20C7C8EFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C7C8F18(uint64_t *a1@<X0>, uint64_t *a2@<X1>, unsigned __int8 *a3@<X2>, unsigned __int8 *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t *v12;
  uint64_t *v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  char v19;
  char v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned __int8 *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t Version;
  char v34;
  char v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  void **v40;
  std::__shared_weak_count *v41;
  char v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  _QWORD v45[3];

  *a7 = 0;
  a7[1] = 0;
  sub_20C927EFC(*a1, a3, (uint64_t)v45);
  v12 = (uint64_t *)v45[0];
  v13 = (uint64_t *)v45[1];
  while (v12 != v13)
  {
    v14 = sub_20C7C8E90(*v12);
    if ((sub_20C9401F0(a6, (uint64_t)v14) & 1) == 0)
      goto LABEL_48;
    v15 = *a2;
    if (*a2)
    {
      v16 = v12[1];
      v43 = *v12;
      v44 = (std::__shared_weak_count *)v16;
      if (v16)
      {
        v17 = (unint64_t *)(v16 + 8);
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      v19 = sub_20C94F004(v15, &v43, 0);
      v20 = v19;
      v21 = v44;
      if (!v44)
        goto LABEL_12;
      p_shared_owners = (unint64_t *)&v44->__shared_owners_;
      do
        v23 = __ldaxr(p_shared_owners);
      while (__stlxr(v23 - 1, p_shared_owners));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
        if ((v20 & 1) == 0)
          goto LABEL_48;
      }
      else
      {
LABEL_12:
        if ((v19 & 1) == 0)
          goto LABEL_48;
      }
    }
    v24 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)*v12 + 56))(*v12);
    v25 = v24[23];
    if ((v25 & 0x80u) == 0)
      v26 = v24[23];
    else
      v26 = *((_QWORD *)v24 + 1);
    v27 = a4[23];
    v28 = (char)v27;
    if ((v27 & 0x80u) != 0)
      v27 = *((_QWORD *)a4 + 1);
    if (v26 == v27)
    {
      if (v28 >= 0)
        v29 = a4;
      else
        v29 = *(unsigned __int8 **)a4;
      if ((v25 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v24, v29, *((_QWORD *)v24 + 1)))
          goto LABEL_48;
      }
      else if (v24[23])
      {
        while (*v24 == *v29)
        {
          ++v24;
          ++v29;
          if (!--v25)
            goto LABEL_30;
        }
        goto LABEL_48;
      }
LABEL_30:
      v42 = 0;
      v30 = v12[1];
      v40 = (void **)*v12;
      v41 = (std::__shared_weak_count *)v30;
      if (v30)
      {
        v31 = (unint64_t *)(v30 + 8);
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
      }
      Version = pxrInternal__aapl__pxrReserved__::UsdMtlxGetVersion((uint64_t *)&v40, &v42);
      v35 = v34;
      v36 = v41;
      if (v41)
      {
        v37 = (unint64_t *)&v41->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      if (*(_BYTE *)(a5 + 8))
      {
        if (v42)
        {
          sub_20BDE881C(a7, v12);
        }
        else if (v35)
        {
          goto LABEL_49;
        }
      }
      else if (*(_DWORD *)a5 == (_DWORD)Version && *(_DWORD *)(a5 + 4) == HIDWORD(Version))
      {
LABEL_49:
        sub_20BDE881C(a7, v12);
        break;
      }
    }
LABEL_48:
    v12 += 2;
  }
  v40 = (void **)v45;
  sub_20BDE9EB0(&v40);
}

void sub_20C7C9178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v14;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v14);
  _Unwind_Resume(a1);
}

BOOL sub_20C7C91C0(uint64_t a1)
{
  unsigned __int8 *v2;
  void *__p[2];
  char v5;

  sub_20BDDC0E4(__p, off_25473DEC8[0]);
  v2 = sub_20C67F73C((_QWORD *)(a1 + 160), (unsigned __int8 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  return v2 != 0;
}

void sub_20C7C9220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__int128 *sub_20C7C923C(uint64_t a1)
{
  unsigned __int8 *v2;
  __int128 *v3;
  void *__p[2];
  char v6;

  sub_20BDDC0E4(__p, off_25473DEC8[0]);
  v2 = sub_20C67F73C((_QWORD *)(a1 + 160), (unsigned __int8 *)__p);
  if (v2)
    v3 = (__int128 *)(v2 + 40);
  else
    v3 = sub_20C957390();
  if (v6 < 0)
    operator delete(__p[0]);
  return v3;
}

void sub_20C7C92A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20C7C92C4(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)sub_20BDDE084((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    sub_20C7C936C((uint64_t)a1, a4, (uint64_t)v10);
    sub_20BDDE1B4(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_20C7C9448((uint64_t)v10, 0);
  }
  return v7;
}

_QWORD *sub_20C7C936C@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *result;

  v5 = a1 + 8;
  v6 = operator new(0x58uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_20C7C93D4(v6 + 4, *a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20C7C93BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C7C9448(v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C7C93D4(_QWORD *__dst, __int128 *a2)
{
  __int128 v3;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v3;
  }
  *((_DWORD *)__dst + 6) = 3;
  __dst[4] = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)__dst + 10);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)__dst + 11);
  __dst[6] = 0;
  return __dst;
}

void sub_20C7C9448(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C7C948C((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void sub_20C7C948C(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;

  v2 = *(_QWORD *)(a1 + 48);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 44));
  sub_20BFD265C((_DWORD *)(a1 + 40));
  v5 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 32);
  if (v5)
    sub_20C35C614(v5);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

_DWORD *sub_20C7C9500@<X0>(pxrInternal__aapl__pxrReserved__::UsdProperty *a1@<X0>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2@<X1>, uint64_t a3@<X8>)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v7;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int IsCompatible;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v10;
  _DWORD *result;
  pxrInternal__aapl__pxrReserved__ *v12;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v13;
  char *v14;
  const char *Text;
  pxrInternal__aapl__pxrReserved__ *v16;
  unint64_t v17;
  const char *v18;
  unsigned int *v19;
  unsigned int v20;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  pxrInternal__aapl__pxrReserved__ *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  int v32;
  int v33;
  unint64_t v34;
  const char *v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  double v39;
  pxrInternal__aapl__pxrReserved__ *v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD *v45;

  if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a1, a2) & 1) == 0)
  {
    *(_DWORD *)a3 = 1;
    *(_QWORD *)(a3 + 8) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 16));
    result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 20));
    *(_QWORD *)(a3 + 24) = 0;
    return result;
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1, v6, &v44);
  v7 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(&v44);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v7, a2, (uint64_t)&v39);
  if (!pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v39, v8))goto LABEL_19;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v34, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v39);
  v34 = (unint64_t)off_24C53DD78;
  if (!v35 || (v35[57] & 8) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::~UsdShadeNodeGraph((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)&v34);
  }
  else
  {
    IsCompatible = pxrInternal__aapl__pxrReserved__::UsdTyped::_IsCompatible((pxrInternal__aapl__pxrReserved__::UsdTyped *)&v34);
    pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::~UsdShadeNodeGraph((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)&v34);
    if (IsCompatible)
    {
      *(_DWORD *)a3 = LODWORD(v39);
      *(_QWORD *)(a3 + 8) = v40;
      v40 = 0;
      sub_20BFD38A4((_DWORD *)(a3 + 16), &v41);
      sub_20BFD38DC((_DWORD *)(a3 + 20), &v42);
      *(_QWORD *)(a3 + 24) = v43;
      v43 = 0;
      goto LABEL_42;
    }
  }
  v12 = v40;
  if (!v40 || (*((_BYTE *)v40 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v40, v10);
  if (!**((_QWORD **)v12 + 3))
  {
LABEL_19:
    if ((v43 & 7) != 0)
    {
      v19 = (unsigned int *)(v43 & 0xFFFFFFFFFFFFFFF8);
      do
        v20 = __ldxr(v19);
      while (__stlxr(v20 - 2, v19));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v42);
    sub_20BFD265C(&v41);
    if (v40)
      sub_20C35C614(v40);
    v21 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(&v44);
    v34 = 0;
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v21, a2, (void **)&v34, a3);
    if ((v34 & 7) != 0)
    {
      v22 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
      do
        v23 = __ldxr(v22);
      while (__stlxr(v23 - 2, v22));
    }
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetReferences((pxrInternal__aapl__pxrReserved__::UsdPrim *)a3, (uint64_t)&v34);
    sub_20C348EEC((uint64_t)a1, &v32);
    pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset(&v39, 0.0, 1.0);
    pxrInternal__aapl__pxrReserved__::UsdReferences::AddInternalReference((pxrInternal__aapl__pxrReserved__::UsdObject *)&v34, (uint64_t)&v32, (uint64_t)&v39, 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v33);
    sub_20BFD265C(&v32);
    if ((v37 & 7) != 0)
    {
      v24 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFFFF8);
      do
        v25 = __ldxr(v24);
      while (__stlxr(v25 - 2, v24));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v36 + 1);
    sub_20BFD265C(&v36);
    v26 = (pxrInternal__aapl__pxrReserved__ *)v35;
    if (!v35)
      goto LABEL_32;
    goto LABEL_31;
  }
  v34 = (unint64_t)"usdMtlx/reader.cpp";
  v35 = "_AddReference";
  v36 = 663;
  v37 = (unint64_t)"UsdPrim pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_AddReference(const UsdPrim &"
                          ", const SdfPath &)";
  v38 = 0;
  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
  v16 = v40;
  if (!v40 || (*((_BYTE *)v40 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v40, v13);
  v17 = **((_QWORD **)v16 + 3) & 0xFFFFFFFFFFFFFFF8;
  if (v17)
  {
    v18 = (const char *)(v17 + 16);
    if (*(char *)(v17 + 39) < 0)
      v18 = *(const char **)v18;
  }
  else
  {
    v18 = "";
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v34, (pxrInternal__aapl__pxrReserved__ *)"Can't create node graph at <%s>; a '%s' already exists",
    v14,
    Text,
    v18);
  *(_DWORD *)a3 = 1;
  *(_QWORD *)(a3 + 8) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 20));
  *(_QWORD *)(a3 + 24) = 0;
  if ((v43 & 7) != 0)
  {
    v30 = (unsigned int *)(v43 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
LABEL_42:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v42);
  sub_20BFD265C(&v41);
  v26 = v40;
  if (v40)
LABEL_31:
    sub_20C35C614(v26);
LABEL_32:
  result = v45;
  if (v45)
  {
    v27 = v45 + 2;
    do
    {
      v28 = __ldxr(v27);
      v29 = v28 - 1;
    }
    while (__stlxr(v29, v27));
    if (!v29)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_20C7C9874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::~UsdShadeNodeGraph((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)va);
  sub_20C35C2E0((uint64_t)va1);
  v6 = *(unsigned int **)(v4 - 40);
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_20C7C993C(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t *v11[3];

  v6 = (uint64_t **)(a1 + 8);
  v5 = *(uint64_t **)(a1 + 8);
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = (uint64_t *)*v8;
        v6 = (uint64_t **)v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = (uint64_t *)v8[1];
      if (!v5)
      {
        v6 = (uint64_t **)(v8 + 1);
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = (uint64_t *)(a1 + 8);
LABEL_10:
    sub_20C7C9A04(a1, a4, (uint64_t)v11);
    sub_20BDDE1B4((uint64_t **)a1, (uint64_t)v8, v6, v11[0]);
    v8 = v11[0];
    v11[0] = 0;
    sub_20C7C9AD4((uint64_t)v11, 0);
  }
  return v8;
}

uint64_t sub_20C7C9A04@<X0>(uint64_t a1@<X0>, _QWORD **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t result;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_20C7C9A6C((uint64_t)v6 + 32, *a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20C7C9A54(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C7C9AD4(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20C7C9A6C(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_DWORD *)(a1 + 16) = 3;
  *(_QWORD *)(a1 + 24) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 32));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 36));
  *(_QWORD *)(a1 + 40) = 0;
  return a1;
}

void sub_20C7C9AD4(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C7C9B18((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void sub_20C7C9B18(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;

  v2 = *(_QWORD *)(a1 + 40);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 36));
  sub_20BFD265C((_DWORD *)(a1 + 32));
  v5 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 24);
  if (v5)
    sub_20C35C614(v5);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)a1);
}

void sub_20C7C9B78(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *a4@<X3>, uint64_t a5@<X8>)
{
  unsigned __int8 *v10;
  __int128 *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void *v16;
  char *v17;
  size_t v18;
  size_t v19;
  std::string *v20;
  std::string::size_type size;
  int v26;
  BOOL v27;
  int v28;
  int data;
  size_t v32;
  size_t v33;
  size_t v34;
  __int128 *v35;
  char *v36;
  size_t v37;
  __int128 *v38;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  uint64_t *v53;
  char v54;
  char v55;
  unsigned int *v56;
  unsigned int v57;
  unint64_t v58;
  uint64_t v59;
  void *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::string::size_type v73;
  unsigned int *v74;
  unsigned int v75;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v76;
  unsigned int *v77;
  unsigned int v78;
  char *v79;
  uint64_t v80;
  char *v81;
  void *__p;
  std::__shared_weak_count *v83;
  char v84;
  uint64_t v85;
  void *__dst[2];
  uint64_t v87;
  uint64_t v88;
  void *v89;
  unint64_t v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  std::string v93;
  char **v94;
  char v95;
  const std::string *v96;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v97;
  int v98;
  int v99;
  uint64_t v100;
  uint64_t v101;

  v101 = *MEMORY[0x24BDAC8D0];
  sub_20C7C0F74();
  v10 = sub_20C67F73C((_QWORD *)(*a2 + 160), (unsigned __int8 *)&qword_25498D1F0);
  if (v10)
    v11 = (__int128 *)(v10 + 40);
  else
    v11 = sub_20C957390();
  v12 = *((unsigned __int8 *)v11 + 23);
  if ((v12 & 0x80u) != 0)
    v12 = *((_QWORD *)v11 + 1);
  if (!v12)
    v11 = sub_20C957390();
  memset(&v93, 0, sizeof(v93));
  sub_20C93BF6C(*a2, &__p);
  sub_20C7B042C((uint64_t)__p, (unsigned __int8 *)v11, &v91);
  v13 = v83;
  if (v83)
  {
    p_shared_owners = (unint64_t *)&v83->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (v91)
  {
    sub_20C7C0F74();
    sub_20C7C0FDC((__int128 **)&__p, (uint64_t)&v91, (unsigned __int8 *)&qword_25498D1C0);
    v16 = __p;
    if (*((char *)__p + 23) < 0)
    {
      v19 = *((_QWORD *)__p + 1);
      if (!v19)
        goto LABEL_25;
      v17 = off_25473DCD0[0];
      if (strlen(off_25473DCD0[0]) != v19)
        goto LABEL_25;
      if (v19 == -1)
        goto LABEL_165;
      v16 = *(void **)__p;
    }
    else
    {
      if (!*((_BYTE *)__p + 23))
        goto LABEL_25;
      v17 = off_25473DCD0[0];
      v18 = strlen(off_25473DCD0[0]);
      if (v18 != *((unsigned __int8 *)__p + 23))
        goto LABEL_25;
      v19 = v18;
      if (v18 == -1)
LABEL_165:
        sub_20BEB9180();
    }
    if (!memcmp(v16, v17, v19))
    {
      sub_20C7C0F74();
      sub_20C7C0FDC((__int128 **)&v96, (uint64_t)&v91, (unsigned __int8 *)&qword_25498CFC8);
      std::string::operator=(&v93, v96);
    }
  }
LABEL_25:
  v90 = 0;
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v89);
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
  {
    size = v93.__r_.__value_.__l.__size_;
    if (v93.__r_.__value_.__l.__size_ == 7
      && *(_DWORD *)v93.__r_.__value_.__l.__data_ == 1718777203
      && *(_DWORD *)(v93.__r_.__value_.__r.__words[0] + 3) == 1701011814)
    {
      goto LABEL_86;
    }
    if (v93.__r_.__value_.__l.__size_ == 12)
    {
      if (*(_QWORD *)v93.__r_.__value_.__l.__data_ == 0x6563616C70736964
        && *(_DWORD *)(v93.__r_.__value_.__r.__words[0] + 8) == 1953391981)
      {
        goto LABEL_86;
      }
      size = v93.__r_.__value_.__l.__size_;
    }
    if (size == 6)
    {
      if (*(_DWORD *)v93.__r_.__value_.__l.__data_ == 1970040694
        && *(_WORD *)(v93.__r_.__value_.__r.__words[0] + 4) == 25965)
      {
        goto LABEL_86;
      }
      size = v93.__r_.__value_.__l.__size_;
    }
    if (size != 5)
      goto LABEL_66;
    v20 = (std::string *)v93.__r_.__value_.__r.__words[0];
  }
  else
  {
    v20 = &v93;
    switch(*((_BYTE *)&v93.__r_.__value_.__s + 23))
    {
      case 5:
        break;
      case 6:
        goto LABEL_27;
      case 7:
        v26 = *(_DWORD *)((char *)v93.__r_.__value_.__r.__words + 3);
        v27 = LODWORD(v93.__r_.__value_.__l.__data_) == 1718777203;
        v28 = 1701011814;
        goto LABEL_62;
      case 0xC:
        if (v93.__r_.__value_.__r.__words[0] == 0x6563616C70736964
          && LODWORD(v93.__r_.__value_.__r.__words[1]) == 1953391981)
        {
          goto LABEL_86;
        }
        if (HIBYTE(v93.__r_.__value_.__r.__words[2]) == 5)
          goto LABEL_60;
        if (HIBYTE(v93.__r_.__value_.__r.__words[2]) != 6)
          goto LABEL_66;
LABEL_27:
        if (LODWORD(v93.__r_.__value_.__l.__data_) == 1970040694 && WORD2(v93.__r_.__value_.__r.__words[0]) == 25965)
          goto LABEL_86;
        if (HIBYTE(v93.__r_.__value_.__r.__words[2]) != 5)
          goto LABEL_66;
LABEL_60:
        v20 = &v93;
        break;
      default:
        goto LABEL_66;
    }
  }
  data = (int)v20->__r_.__value_.__l.__data_;
  v26 = v20->__r_.__value_.__s.__data_[4];
  v27 = data == 1751607660;
  v28 = 116;
LABEL_62:
  if (v27 && v26 == v28)
  {
LABEL_86:
    v39 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (v39)
    {
LABEL_88:
      v89 = (void *)*((_QWORD *)v39 + 11);
      goto LABEL_89;
    }
LABEL_87:
    v39 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    goto LABEL_88;
  }
LABEL_66:
  v32 = strlen(off_25473DF20[0]);
  v33 = v32;
  v34 = *((unsigned __int8 *)v11 + 23);
  if (*((char *)v11 + 23) < 0)
  {
    if (v32 != *((_QWORD *)v11 + 1))
    {
      v36 = off_25473DF28[0];
      v37 = strlen(off_25473DF28[0]);
      v34 = *((_QWORD *)v11 + 1);
      goto LABEL_80;
    }
    if (v32 == -1)
      goto LABEL_164;
    v35 = *(__int128 **)v11;
  }
  else
  {
    if (v32 != v34)
    {
      v36 = off_25473DF28[0];
      v37 = strlen(off_25473DF28[0]);
      goto LABEL_77;
    }
    v35 = v11;
    if (v33 == -1)
LABEL_164:
      sub_20BEB9180();
  }
  if (!memcmp(v35, off_25473DF20[0], v33))
    goto LABEL_86;
  v36 = off_25473DF28[0];
  v37 = strlen(off_25473DF28[0]);
  if ((v34 & 0x80) == 0)
  {
LABEL_77:
    v38 = v11;
    if (v37 != v34)
      goto LABEL_84;
    goto LABEL_83;
  }
  v34 = *((_QWORD *)v11 + 1);
LABEL_80:
  if (v37 != v34)
    goto LABEL_84;
  if (v34 == -1)
    sub_20BEB9180();
  v38 = *(__int128 **)v11;
LABEL_83:
  if (!memcmp(v38, v36, v34))
    goto LABEL_86;
LABEL_84:
  if (sub_20BEB90F0(v11, off_25473DF30[0]) || sub_20BEB90F0(v11, off_25473DF38[0]))
    goto LABEL_86;
  v73 = HIBYTE(v93.__r_.__value_.__r.__words[2]);
  if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v73 = v93.__r_.__value_.__l.__size_;
  if (v73)
  {
    v39 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (v39)
      goto LABEL_88;
    goto LABEL_87;
  }
  pxrInternal__aapl__pxrReserved__::UsdMtlxGetUsdType((unsigned __int8 *)v11, (uint64_t)&__p);
  v89 = __p;
  if ((v83 & 7) != 0)
  {
    v74 = (unsigned int *)((unint64_t)v83 & 0xFFFFFFFFFFFFFFF8);
    do
      v75 = __ldxr(v74);
    while (__stlxr(v75 - 2, v74));
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::_IsEmpty((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v89))
  {
    v76 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v76)
      v76 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    v89 = (void *)*((_QWORD *)v76 + 11);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&__p);
    if ((v90 & 7) != 0)
    {
      v77 = (unsigned int *)(v90 & 0xFFFFFFFFFFFFFFF8);
      do
        v78 = __ldxr(v77);
      while (__stlxr(v78 - 2, v77));
    }
    v90 = (unint64_t)__p;
  }
LABEL_89:
  v40 = *a2;
  v41 = (std::__shared_weak_count *)a2[1];
  __p = (void *)*a2;
  v83 = v41;
  if (v41)
  {
    v42 = (unint64_t *)&v41->__shared_owners_;
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
  }
  if (v40)
  {
    sub_20C7C3084(v40 + 48, (uint64_t)&v88);
    if (!v41)
      goto LABEL_100;
  }
  else
  {
    v88 = 0;
    if (!v41)
      goto LABEL_100;
  }
  v44 = (unint64_t *)&v41->__shared_owners_;
  do
    v45 = __ldaxr(v44);
  while (__stlxr(v45 - 1, v44));
  if (!v45)
  {
    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
    std::__shared_weak_count::__release_weak(v41);
  }
LABEL_100:
  v46 = *a3;
  if (*(char *)(*a3 + 71) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)(v46 + 48), *(_QWORD *)(v46 + 56));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)(v46 + 48);
    v87 = *(_QWORD *)(v46 + 64);
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::CreateOutput(a4, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v88, (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v89, a5);
  LODWORD(v96) = *(_DWORD *)a5;
  v47 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a5 + 8);
  v97 = v47;
  if (v47)
  {
    v48 = (unint64_t *)((char *)v47 + 48);
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 1, v48));
  }
  sub_20BFD6E54(&v98, (_DWORD *)(a5 + 16));
  sub_20BFD6EA4(&v99, (_DWORD *)(a5 + 20));
  v50 = *(_QWORD *)(a5 + 24);
  v100 = v50;
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 2, v51));
    if ((v52 & 1) == 0)
      v100 &= 0xFFFFFFFFFFFFFFF8;
  }
  v79 = 0;
  v80 = 0;
  v81 = 0;
  v94 = &v79;
  v95 = 0;
  v79 = (char *)operator new(0x20uLL);
  v80 = (uint64_t)v79;
  v81 = v79 + 32;
  v80 = sub_20C7CA864((uint64_t)&v81, (uint64_t)&v96, (uint64_t)&v101, (uint64_t)v79);
  sub_20C7CA990(&__p, (__int128 *)__dst, (uint64_t *)&v79);
  v53 = (uint64_t *)sub_20C7CA710((uint64_t **)(a1 + 104), (const void **)&__p, (uint64_t)&__p);
  v55 = v54;
  v94 = (char **)&v85;
  sub_20C5BE1A0((void ***)&v94);
  if (v84 < 0)
    operator delete(__p);
  v94 = &v79;
  sub_20C5BE1A0((void ***)&v94);
  if ((v100 & 7) != 0)
  {
    v56 = (unsigned int *)(v100 & 0xFFFFFFFFFFFFFFF8);
    do
      v57 = __ldxr(v56);
    while (__stlxr(v57 - 2, v56));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v99);
  sub_20BFD265C(&v98);
  if (v97)
    sub_20C35C614(v97);
  if (!v55)
  {
    v58 = v53[8];
    if (v58 >= v53[9])
    {
      v59 = sub_20C5CE650(v53 + 7, a5);
    }
    else
    {
      sub_20C37F2BC((uint64_t)(v53 + 9), v53[8], a5);
      v59 = v58 + 32;
      v53[8] = v58 + 32;
    }
    v53[8] = v59;
  }
  if (v90)
    pxrInternal__aapl__pxrReserved__::UsdShadeOutput::SetRenderType((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)a5, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v90);
  v60 = (void *)*a2;
  v61 = (std::__shared_weak_count *)a2[1];
  __p = v60;
  v83 = v61;
  if (v61)
  {
    v62 = (unint64_t *)&v61->__shared_owners_;
    do
      v63 = __ldxr(v62);
    while (__stxr(v63 + 1, v62));
  }
  sub_20C7C5A74(a5, (uint64_t)&__p);
  if (v61)
  {
    v64 = (unint64_t *)&v61->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  if (SHIBYTE(v87) < 0)
    operator delete(__dst[0]);
  if ((v88 & 7) != 0)
  {
    v66 = (unsigned int *)(v88 & 0xFFFFFFFFFFFFFFF8);
    do
      v67 = __ldxr(v66);
    while (__stlxr(v67 - 2, v66));
  }
  if ((v90 & 7) != 0)
  {
    v68 = (unsigned int *)(v90 & 0xFFFFFFFFFFFFFFF8);
    do
      v69 = __ldxr(v68);
    while (__stlxr(v69 - 2, v68));
  }
  v70 = v92;
  if (v92)
  {
    v71 = (unint64_t *)&v92->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v93.__r_.__value_.__l.__data_);
}

void sub_20C7CA498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  unsigned int *v37;
  unsigned int v38;

  if ((a28 & 7) != 0)
  {
    v37 = (unsigned int *)(a28 & 0xFFFFFFFFFFFFFFF8);
    do
      v38 = __ldxr(v37);
    while (__stlxr(v38 - 2, v37));
  }
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a29);
  if (a36 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C7CA5E4(_QWORD *a1, _QWORD *a2, unsigned __int8 **a3)
{
  _QWORD *v3;
  char v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;

  v3 = a1;
  if (a1 != a2)
  {
    v5 = *((_BYTE *)a3 + 23);
    if (v5 >= 0)
      v6 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
    else
      v6 = a3[1];
    if (v5 >= 0)
      v7 = (unsigned __int8 *)a3;
    else
      v7 = *a3;
    do
    {
      v8 = *((unsigned __int8 *)v3 + 55);
      if ((v8 & 0x80u) == 0)
        v9 = (unsigned __int8 *)*((unsigned __int8 *)v3 + 55);
      else
        v9 = (unsigned __int8 *)v3[5];
      if (v9 == v6)
      {
        if ((v8 & 0x80) != 0)
        {
          if (!memcmp((const void *)v3[4], v7, v3[5]))
            return v3;
        }
        else
        {
          if (!*((_BYTE *)v3 + 55))
            return v3;
          v10 = 0;
          while (*((unsigned __int8 *)v3 + v10 + 32) == v7[v10])
          {
            if (v8 == ++v10)
              return v3;
          }
        }
      }
      v11 = (_QWORD *)v3[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v3[2];
          v13 = *v12 == (_QWORD)v3;
          v3 = v12;
        }
        while (!v13);
      }
      v3 = v12;
    }
    while (v12 != a2);
    return a2;
  }
  return v3;
}

uint64_t sub_20C7CA6C8(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 24);
  sub_20C5BE1A0(&v3);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

_OWORD *sub_20C7CA710(uint64_t **a1, const void **a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  _QWORD v9[2];
  char v10;
  uint64_t v11;

  v5 = (void **)sub_20BDDE084((uint64_t)a1, &v11, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x50uLL);
    v9[1] = a1 + 1;
    v6[2] = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_OWORD *)((char *)v6 + 56) = *(_OWORD *)(a3 + 24);
    *((_QWORD *)v6 + 9) = *(_QWORD *)(a3 + 40);
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 40) = 0;
    v10 = 1;
    sub_20BDDE1B4(a1, v11, v7, (uint64_t *)v6);
    v9[0] = 0;
    sub_20C7CA7DC((uint64_t)v9, 0);
  }
  return v6;
}

void sub_20C7CA7DC(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C7CA820((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void sub_20C7CA820(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 24);
  sub_20C5BE1A0(&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t sub_20C7CA864(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v9[3];
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_20C37F2BC(a1, v4, v6);
      v6 += 32;
      v4 = v12 + 32;
      v12 += 32;
    }
    while (v6 != a3);
  }
  v10 = 1;
  sub_20C7CA90C((uint64_t)v9);
  return v4;
}

void sub_20C7CA8F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C7CA90C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C7CA90C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C7CA940((uint64_t *)a1);
  return a1;
}

void sub_20C7CA940(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[1];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *a1;
    do
    {
      v3 -= 32;
      sub_20C5BE224(v5, v3);
    }
    while (v3 != v4);
  }
}

_QWORD *sub_20C7CA990(_QWORD *__dst, __int128 *a2, uint64_t *a3)
{
  __int128 v5;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }
  __dst[3] = 0;
  __dst[4] = 0;
  __dst[5] = 0;
  sub_20C7CAA18(__dst + 3, *a3, a3[1], (a3[1] - *a3) >> 5);
  return __dst;
}

void sub_20C7CA9FC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C7CAA18(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_20BF25370(result, a4);
    result = (_QWORD *)sub_20C7CAA9C((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_20C7CAA7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_20C5BE1A0(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C7CAA9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v9[3];
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_20C37F2BC(a1, v4, v6);
      v6 += 32;
      v4 = v12 + 32;
      v12 += 32;
    }
    while (v6 != a3);
  }
  v10 = 1;
  sub_20C7CA90C((uint64_t)v9);
  return v4;
}

void sub_20C7CAB30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C7CA90C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C7CAB44(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  __int128 *v5;
  const char *Text;
  const char *v7;
  char *v8;
  __int128 *v9;
  const char *v10;
  const char *v11;
  char *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  const char *v16;
  const char *v17;
  const char *v18;
  char *v19;
  unint64_t v20;
  int IsCompatible;
  unsigned int *v22;
  unsigned int v23;
  pxrInternal__aapl__pxrReserved__::UsdShadeShader *v24;
  uint64_t *StaticTfType;
  const pxrInternal__aapl__pxrReserved__::TfType *v26;
  uint64_t *SchemaInfo;
  char *v28;
  unsigned int *v29;
  unsigned int v30;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *NameToken;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v32;
  unsigned int *v33;
  unsigned int v34;
  const char *v35;
  const char *v36;
  const char *v37;
  char *v38;
  char **v39;
  const char *v40;
  const char *v41;
  char *v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  void (**v56)(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *__hidden);
  uint64_t v57;
  __int128 *v58;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  int v64;
  int v65;
  uint64_t v66;
  int v67;
  int v68;
  char *v69;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v70;
  uint64_t v71;
  unint64_t v72;
  char v73;

  sub_20C93AF94(*a1, &v62);
  if (!v62)
    goto LABEL_16;
  sub_20C7C0F74();
  sub_20C7C0FDC(&v58, (uint64_t)&v62, (unsigned __int8 *)&qword_25498D130);
  v5 = v58;
  if ((*((char *)v58 + 23) & 0x80000000) == 0)
  {
    if (!*((_BYTE *)v58 + 23))
      goto LABEL_9;
LABEL_6:
    v69 = "usdMtlx/reader.cpp";
    v70 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"_ConnectPorts";
    v71 = 1118;
    v72 = (unint64_t)"void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_NodeGraphBuilder::_ConnectPor"
                            "ts(const mx::ConstElementPtr &, const U &, const D &) [U = pxrInternal__aapl__pxrReserved__:"
                            ":UsdShadeOutput, D = pxrInternal__aapl__pxrReserved__::UsdShadeInput]";
    v73 = 0;
    if (*((char *)v58 + 23) < 0)
      v5 = *(__int128 **)v58;
    sub_20C348EEC(a2, (int *)&v56);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v56);
    sub_20C348EEC(a3, &v67);
    v7 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v67);
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v69, (pxrInternal__aapl__pxrReserved__ *)"Dropped member %s between <%s> -> <%s>", v8, v5, Text, v7);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v68);
    sub_20BFD265C(&v67);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v56 + 1);
    sub_20BFD265C(&v56);
    goto LABEL_9;
  }
  if (*((_QWORD *)v58 + 1))
    goto LABEL_6;
LABEL_9:
  sub_20C7C0F74();
  sub_20C7C0FDC(&v58, (uint64_t)&v62, (unsigned __int8 *)&qword_25498CF68);
  v9 = v58;
  if (*((char *)v58 + 23) < 0)
  {
    if (!*((_QWORD *)v58 + 1))
      goto LABEL_16;
  }
  else if (!*((_BYTE *)v58 + 23))
  {
    goto LABEL_16;
  }
  v69 = "usdMtlx/reader.cpp";
  v70 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"_ConnectPorts";
  v71 = 1126;
  v72 = (unint64_t)"void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_NodeGraphBuilder::_ConnectPorts"
                          "(const mx::ConstElementPtr &, const U &, const D &) [U = pxrInternal__aapl__pxrReserved__::Usd"
                          "ShadeOutput, D = pxrInternal__aapl__pxrReserved__::UsdShadeInput]";
  v73 = 0;
  if (*((char *)v58 + 23) < 0)
    v9 = *(__int128 **)v58;
  sub_20C348EEC(a2, (int *)&v56);
  v10 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v56);
  sub_20C348EEC(a3, &v67);
  v11 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v67);
  pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v69, (pxrInternal__aapl__pxrReserved__ *)"Dropped swizzle %s between <%s> -> <%s>", v12, v9, v10, v11);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v68);
  sub_20BFD265C(&v67);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v56 + 1);
  sub_20BFD265C(&v56);
LABEL_16:
  v13 = v63;
  if (v63)
  {
    p_shared_owners = (unint64_t *)&v63->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (sub_20C7C289C(0))
  {
    sub_20C348EEC(a2, (int *)&v69);
    v16 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v69);
    sub_20C348EEC(a3, (int *)&v62);
    v17 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v62);
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)" - Getting referencedPrim for (%s) under (%s).\n", v18, v19, v16, v17);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v62 + 1);
    sub_20BFD265C(&v62);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v69 + 1);
    sub_20BFD265C(&v69);
  }
  sub_20C348EEC(a2, &v67);
  sub_20C35C4F8((uint64_t)&v62, (uint64_t *)(a3 + 8), (_DWORD *)(a3 + 16));
  sub_20C35C4F8((uint64_t)&v58, (uint64_t *)(a2 + 8), (_DWORD *)(a2 + 16));
  sub_20C3AD22C((uint64_t)&v62, (uint64_t)&v69);
  if ((_DWORD)v69 == (_DWORD)v58
    && v70 == v59
    && v71 == v60
    && (v20 = v72, (v72 & 0xFFFFFFFFFFFFFFF8) == (v61 & 0xFFFFFFFFFFFFFFF8)))
  {
    IsCompatible = 0;
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v56, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v58);
    v56 = off_24C53DD78;
    if (!v57 || (*(_BYTE *)(v57 + 57) & 8) != 0)
      IsCompatible = 0;
    else
      IsCompatible = pxrInternal__aapl__pxrReserved__::UsdTyped::_IsCompatible((pxrInternal__aapl__pxrReserved__::UsdTyped *)&v56);
    pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::~UsdShadeNodeGraph((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)&v56);
    v20 = v72;
  }
  if ((v20 & 7) != 0)
  {
    v22 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v23 = __ldxr(v22);
    while (__stlxr(v23 - 2, v22));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v71 + 1);
  sub_20BFD265C(&v71);
  v24 = v70;
  if (v70)
    sub_20C35C614(v70);
  if (IsCompatible)
  {
    StaticTfType = pxrInternal__aapl__pxrReserved__::UsdShadeShader::_GetStaticTfType(v24);
    SchemaInfo = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)StaticTfType, v26);
    if (pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)&v62, SchemaInfo, v28))
    {
      sub_20C3AD22C((uint64_t)&v62, (uint64_t)&v69);
      sub_20C348EEC((uint64_t)&v69, (int *)&v56);
      if ((v72 & 7) != 0)
      {
        v29 = (unsigned int *)(v72 & 0xFFFFFFFFFFFFFFF8);
        do
          v30 = __ldxr(v29);
        while (__stlxr(v30 - 2, v29));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v71 + 1);
      sub_20BFD265C(&v71);
      if (v70)
        sub_20C35C614(v70);
    }
    else
    {
      sub_20C348EEC((uint64_t)&v62, (int *)&v56);
    }
    sub_20C348EEC((uint64_t)&v58, (int *)&v69);
    NameToken = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v69);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)&v56, NameToken, &v54);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v69 + 1);
    sub_20BFD265C(&v69);
    sub_20C7C9500((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v58, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v54, (uint64_t)&v69);
    sub_20C348EEC((uint64_t)&v69, &v50);
    sub_20C348EEC(a2, &v48);
    v32 = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v48);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50, v32, &v52);
    sub_20BFD3EBC(&v67, &v52);
    sub_20BFD3F10(&v68, &v53);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v53);
    sub_20BFD265C(&v52);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v49);
    sub_20BFD265C(&v48);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v51);
    sub_20BFD265C(&v50);
    if ((v72 & 7) != 0)
    {
      v33 = (unsigned int *)(v72 & 0xFFFFFFFFFFFFFFF8);
      do
        v34 = __ldxr(v33);
      while (__stlxr(v34 - 2, v33));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v71 + 1);
    sub_20BFD265C(&v71);
    if (v70)
      sub_20C35C614(v70);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v55);
    sub_20BFD265C(&v54);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v56 + 1);
    sub_20BFD265C(&v56);
  }
  if ((pxrInternal__aapl__pxrReserved__::UsdShadeInput::ConnectToSource((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v67) & 1) != 0)
  {
    if (!sub_20C7C289C(0))
      goto LABEL_56;
    v35 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v67);
    sub_20C348EEC(a3, (int *)&v69);
    v36 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v69);
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"    + Connected <%s> -> <%s>\n", v37, v38, v35, v36);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v69 + 1);
    v39 = &v69;
  }
  else
  {
    v69 = "usdMtlx/reader.cpp";
    v70 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"_ConnectPorts";
    v71 = 1164;
    v72 = (unint64_t)"void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_NodeGraphBuilder::_ConnectPor"
                            "ts(const mx::ConstElementPtr &, const U &, const D &) [U = pxrInternal__aapl__pxrReserved__:"
                            ":UsdShadeOutput, D = pxrInternal__aapl__pxrReserved__::UsdShadeInput]";
    v73 = 0;
    v40 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v67);
    sub_20C348EEC(a3, (int *)&v56);
    v41 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v56);
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v69, (pxrInternal__aapl__pxrReserved__ *)"Failed to connect <%s> -> <%s>", v42, v40, v41);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v56 + 1);
    v39 = (char **)&v56;
  }
  sub_20BFD265C(v39);
LABEL_56:
  if ((v61 & 7) != 0)
  {
    v43 = (unsigned int *)(v61 & 0xFFFFFFFFFFFFFFF8);
    do
      v44 = __ldxr(v43);
    while (__stlxr(v44 - 2, v43));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v60 + 1);
  sub_20BFD265C(&v60);
  if (v59)
    sub_20C35C614(v59);
  if ((v66 & 7) != 0)
  {
    v45 = (unsigned int *)(v66 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stlxr(v46 - 2, v45));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v65);
  sub_20BFD265C(&v64);
  if (v63)
    sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v63);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v68);
  return sub_20BFD265C(&v67);
}

void sub_20C7CB1FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  sub_20C35C2E0((uint64_t)va);
  sub_20C35C2E0((uint64_t)va1);
  sub_20BFD1A18((_DWORD *)(v11 - 112));
  _Unwind_Resume(a1);
}

_DWORD *sub_20C7CB398(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  __int128 *v5;
  const char *Text;
  const char *v7;
  char *v8;
  __int128 *v9;
  const char *v10;
  const char *v11;
  char *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  const char *v16;
  const char *v17;
  const char *v18;
  char *v19;
  unint64_t v20;
  int IsCompatible;
  unsigned int *v22;
  unsigned int v23;
  pxrInternal__aapl__pxrReserved__::UsdShadeShader *v24;
  uint64_t *StaticTfType;
  const pxrInternal__aapl__pxrReserved__::TfType *v26;
  uint64_t *SchemaInfo;
  char *v28;
  unsigned int *v29;
  unsigned int v30;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *NameToken;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v32;
  unsigned int *v33;
  unsigned int v34;
  const char *v35;
  const char *v36;
  const char *v37;
  char *v38;
  char **v39;
  const char *v40;
  const char *v41;
  char *v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  void (**v56)(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *__hidden);
  uint64_t v57;
  __int128 *v58;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  int v64;
  int v65;
  uint64_t v66;
  int v67;
  int v68;
  char *v69;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v70;
  uint64_t v71;
  unint64_t v72;
  char v73;

  sub_20C93AF94(*a1, &v62);
  if (!v62)
    goto LABEL_16;
  sub_20C7C0F74();
  sub_20C7C0FDC(&v58, (uint64_t)&v62, (unsigned __int8 *)&qword_25498D130);
  v5 = v58;
  if ((*((char *)v58 + 23) & 0x80000000) == 0)
  {
    if (!*((_BYTE *)v58 + 23))
      goto LABEL_9;
LABEL_6:
    v69 = "usdMtlx/reader.cpp";
    v70 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"_ConnectPorts";
    v71 = 1118;
    v72 = (unint64_t)"void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_NodeGraphBuilder::_ConnectPor"
                            "ts(const mx::ConstElementPtr &, const U &, const D &) [U = pxrInternal__aapl__pxrReserved__:"
                            ":UsdShadeOutput, D = pxrInternal__aapl__pxrReserved__::UsdShadeOutput]";
    v73 = 0;
    if (*((char *)v58 + 23) < 0)
      v5 = *(__int128 **)v58;
    sub_20C348EEC(a2, (int *)&v56);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v56);
    sub_20C348EEC(a3, &v67);
    v7 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v67);
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v69, (pxrInternal__aapl__pxrReserved__ *)"Dropped member %s between <%s> -> <%s>", v8, v5, Text, v7);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v68);
    sub_20BFD265C(&v67);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v56 + 1);
    sub_20BFD265C(&v56);
    goto LABEL_9;
  }
  if (*((_QWORD *)v58 + 1))
    goto LABEL_6;
LABEL_9:
  sub_20C7C0F74();
  sub_20C7C0FDC(&v58, (uint64_t)&v62, (unsigned __int8 *)&qword_25498CF68);
  v9 = v58;
  if (*((char *)v58 + 23) < 0)
  {
    if (!*((_QWORD *)v58 + 1))
      goto LABEL_16;
  }
  else if (!*((_BYTE *)v58 + 23))
  {
    goto LABEL_16;
  }
  v69 = "usdMtlx/reader.cpp";
  v70 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"_ConnectPorts";
  v71 = 1126;
  v72 = (unint64_t)"void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_NodeGraphBuilder::_ConnectPorts"
                          "(const mx::ConstElementPtr &, const U &, const D &) [U = pxrInternal__aapl__pxrReserved__::Usd"
                          "ShadeOutput, D = pxrInternal__aapl__pxrReserved__::UsdShadeOutput]";
  v73 = 0;
  if (*((char *)v58 + 23) < 0)
    v9 = *(__int128 **)v58;
  sub_20C348EEC(a2, (int *)&v56);
  v10 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v56);
  sub_20C348EEC(a3, &v67);
  v11 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v67);
  pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v69, (pxrInternal__aapl__pxrReserved__ *)"Dropped swizzle %s between <%s> -> <%s>", v12, v9, v10, v11);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v68);
  sub_20BFD265C(&v67);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v56 + 1);
  sub_20BFD265C(&v56);
LABEL_16:
  v13 = v63;
  if (v63)
  {
    p_shared_owners = (unint64_t *)&v63->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (sub_20C7C289C(0))
  {
    sub_20C348EEC(a2, (int *)&v69);
    v16 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v69);
    sub_20C348EEC(a3, (int *)&v62);
    v17 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v62);
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)" - Getting referencedPrim for (%s) under (%s).\n", v18, v19, v16, v17);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v62 + 1);
    sub_20BFD265C(&v62);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v69 + 1);
    sub_20BFD265C(&v69);
  }
  sub_20C348EEC(a2, &v67);
  sub_20C35C4F8((uint64_t)&v62, (uint64_t *)(a3 + 8), (_DWORD *)(a3 + 16));
  sub_20C35C4F8((uint64_t)&v58, (uint64_t *)(a2 + 8), (_DWORD *)(a2 + 16));
  sub_20C3AD22C((uint64_t)&v62, (uint64_t)&v69);
  if ((_DWORD)v69 == (_DWORD)v58
    && v70 == v59
    && v71 == v60
    && (v20 = v72, (v72 & 0xFFFFFFFFFFFFFFF8) == (v61 & 0xFFFFFFFFFFFFFFF8)))
  {
    IsCompatible = 0;
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v56, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v58);
    v56 = off_24C53DD78;
    if (!v57 || (*(_BYTE *)(v57 + 57) & 8) != 0)
      IsCompatible = 0;
    else
      IsCompatible = pxrInternal__aapl__pxrReserved__::UsdTyped::_IsCompatible((pxrInternal__aapl__pxrReserved__::UsdTyped *)&v56);
    pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::~UsdShadeNodeGraph((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)&v56);
    v20 = v72;
  }
  if ((v20 & 7) != 0)
  {
    v22 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v23 = __ldxr(v22);
    while (__stlxr(v23 - 2, v22));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v71 + 1);
  sub_20BFD265C(&v71);
  v24 = v70;
  if (v70)
    sub_20C35C614(v70);
  if (IsCompatible)
  {
    StaticTfType = pxrInternal__aapl__pxrReserved__::UsdShadeShader::_GetStaticTfType(v24);
    SchemaInfo = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)StaticTfType, v26);
    if (pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)&v62, SchemaInfo, v28))
    {
      sub_20C3AD22C((uint64_t)&v62, (uint64_t)&v69);
      sub_20C348EEC((uint64_t)&v69, (int *)&v56);
      if ((v72 & 7) != 0)
      {
        v29 = (unsigned int *)(v72 & 0xFFFFFFFFFFFFFFF8);
        do
          v30 = __ldxr(v29);
        while (__stlxr(v30 - 2, v29));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v71 + 1);
      sub_20BFD265C(&v71);
      if (v70)
        sub_20C35C614(v70);
    }
    else
    {
      sub_20C348EEC((uint64_t)&v62, (int *)&v56);
    }
    sub_20C348EEC((uint64_t)&v58, (int *)&v69);
    NameToken = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v69);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)&v56, NameToken, &v54);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v69 + 1);
    sub_20BFD265C(&v69);
    sub_20C7C9500((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v58, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v54, (uint64_t)&v69);
    sub_20C348EEC((uint64_t)&v69, &v50);
    sub_20C348EEC(a2, &v48);
    v32 = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v48);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50, v32, &v52);
    sub_20BFD3EBC(&v67, &v52);
    sub_20BFD3F10(&v68, &v53);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v53);
    sub_20BFD265C(&v52);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v49);
    sub_20BFD265C(&v48);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v51);
    sub_20BFD265C(&v50);
    if ((v72 & 7) != 0)
    {
      v33 = (unsigned int *)(v72 & 0xFFFFFFFFFFFFFFF8);
      do
        v34 = __ldxr(v33);
      while (__stlxr(v34 - 2, v33));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v71 + 1);
    sub_20BFD265C(&v71);
    if (v70)
      sub_20C35C614(v70);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v55);
    sub_20BFD265C(&v54);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v56 + 1);
    sub_20BFD265C(&v56);
  }
  if ((pxrInternal__aapl__pxrReserved__::UsdShadeOutput::ConnectToSource((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v67) & 1) != 0)
  {
    if (!sub_20C7C289C(0))
      goto LABEL_56;
    v35 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v67);
    sub_20C348EEC(a3, (int *)&v69);
    v36 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v69);
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"    + Connected <%s> -> <%s>\n", v37, v38, v35, v36);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v69 + 1);
    v39 = &v69;
  }
  else
  {
    v69 = "usdMtlx/reader.cpp";
    v70 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"_ConnectPorts";
    v71 = 1164;
    v72 = (unint64_t)"void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_NodeGraphBuilder::_ConnectPor"
                            "ts(const mx::ConstElementPtr &, const U &, const D &) [U = pxrInternal__aapl__pxrReserved__:"
                            ":UsdShadeOutput, D = pxrInternal__aapl__pxrReserved__::UsdShadeOutput]";
    v73 = 0;
    v40 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v67);
    sub_20C348EEC(a3, (int *)&v56);
    v41 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v56);
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v69, (pxrInternal__aapl__pxrReserved__ *)"Failed to connect <%s> -> <%s>", v42, v40, v41);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v56 + 1);
    v39 = (char **)&v56;
  }
  sub_20BFD265C(v39);
LABEL_56:
  if ((v61 & 7) != 0)
  {
    v43 = (unsigned int *)(v61 & 0xFFFFFFFFFFFFFFF8);
    do
      v44 = __ldxr(v43);
    while (__stlxr(v44 - 2, v43));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v60 + 1);
  sub_20BFD265C(&v60);
  if (v59)
    sub_20C35C614(v59);
  if ((v66 & 7) != 0)
  {
    v45 = (unsigned int *)(v66 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stlxr(v46 - 2, v45));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v65);
  sub_20BFD265C(&v64);
  if (v63)
    sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v63);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v68);
  return sub_20BFD265C(&v67);
}

void sub_20C7CBA50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  sub_20C35C2E0((uint64_t)va);
  sub_20C35C2E0((uint64_t)va1);
  sub_20BFD1A18((_DWORD *)(v11 - 112));
  _Unwind_Resume(a1);
}

uint64_t *sub_20C7CBBEC(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)sub_20BDDE084((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    sub_20C7CBC94((uint64_t)a1, a4, (uint64_t)v10);
    sub_20BDDE1B4(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_20C7CBD24((uint64_t)v10, 0);
  }
  return v7;
}

_BYTE *sub_20C7CBC94@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  _BYTE *result;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = v6 + 32;
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    result = sub_20BDDBFAC(result, *(void **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    *((_QWORD *)v6 + 6) = *((_QWORD *)v8 + 2);
    *(_OWORD *)result = v9;
  }
  *((_QWORD *)v6 + 7) = 0;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20C7CBD0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C7CBD24(v1, 0);
  _Unwind_Resume(a1);
}

void sub_20C7CBD24(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C7C1EE0((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void sub_20C7CBD68(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20C7CBD68(a1, *a2);
    sub_20C7CBD68(a1, a2[1]);
    sub_20C7CA820((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_20C7CBDB0(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20C7CBDB0(a1, *a2);
    sub_20C7CBDB0(a1, a2[1]);
    sub_20C7C9B18((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_20C7CBDF8(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20C7CBDF8(a1, *a2);
    sub_20C7CBDF8(a1, a2[1]);
    sub_20C7C948C((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t *sub_20C7CBE40(uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_20C7CBE94(a1, *a2, a2 + 1);
  return a1;
}

void sub_20C7CBE7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C7C1E98(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_20C7CBE94(uint64_t *result, const void **a2, const void ***a3)
{
  const void **v4;
  uint64_t **v5;
  uint64_t *v6;
  const void **v7;
  const void ***v8;
  BOOL v9;

  if (a2 != (const void **)a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = sub_20C7CBF18(v5, v6, v4 + 4, (__int128 *)v4 + 2);
      v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = (const void ***)v7;
          v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void ***)v4[2];
          v9 = *v8 == v4;
          v4 = (const void **)v8;
        }
        while (!v9);
      }
      v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_20C7CBF18(uint64_t **a1, uint64_t *a2, const void **a3, __int128 *a4)
{
  const void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  const void **v12;

  v6 = sub_20BDEC0F8(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    sub_20C7CBFAC((uint64_t)a1, a4, (uint64_t)v10);
    sub_20BDDE1B4(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_20C7CBD24((uint64_t)v10, 0);
  }
  return v7;
}

_QWORD *sub_20C7CBFAC@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *result;

  v5 = a1 + 8;
  v6 = operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_20C7CC014(v6 + 4, a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20C7CBFFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C7CBD24(v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C7CC014(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  v5 = *((_QWORD *)a2 + 3);
  __dst[3] = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      __dst[3] &= 0xFFFFFFFFFFFFFFF8;
  }
  return __dst;
}

void sub_20C7CC094(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *__p[2];
  char v5;

  sub_20BDDC0E4(__p, off_25473DF40[0]);
  sub_20C7CC214(a1, (unsigned __int8 *)__p, a2);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_20C7CC0F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C7CC10C(uint64_t a1@<X0>, const void **a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  int v8;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v9;
  int v10;
  int v11;
  uint64_t v12;

  v5 = sub_20BDEEBA4(a1 + 128, a2);
  if (a1 + 136 == v5)
  {
    v8 = 1;
    v9 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v10);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v11);
    v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v8);
    *(_QWORD *)a3 = off_24C53D820;
    if ((v12 & 7) != 0)
    {
      v6 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stlxr(v7 - 2, v6));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
    sub_20BFD265C(&v10);
    if (v9)
      sub_20C35C614(v9);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(v5 + 56));
    *(_QWORD *)a3 = off_24C53D820;
  }
}

void sub_20C7CC200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20C7CC214(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned __int8 *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  __int128 v22;
  _QWORD v23[3];

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v6 = sub_20C957390();
  sub_20C7B04F8(a1, (unsigned __int8 *)v6, (uint64_t)v23);
  v7 = (uint64_t *)v23[0];
  v8 = (uint64_t *)v23[1];
  while (v7 != v8)
  {
    v9 = *v7;
    v10 = v7[1];
    *(_QWORD *)&v22 = *v7;
    *((_QWORD *)&v22 + 1) = v10;
    if (v10)
    {
      v11 = (unint64_t *)(v10 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    v13 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 56))(v9);
    v14 = v13[23];
    if ((v14 & 0x80u) == 0)
      v15 = v13[23];
    else
      v15 = *((_QWORD *)v13 + 1);
    v16 = a2[23];
    v17 = (char)v16;
    if ((v16 & 0x80u) != 0)
      v16 = *((_QWORD *)a2 + 1);
    if (v15 == v16)
    {
      if (v17 >= 0)
        v18 = a2;
      else
        v18 = *(unsigned __int8 **)a2;
      if ((v14 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v13, v18, *((_QWORD *)v13 + 1)))
          goto LABEL_22;
LABEL_21:
        sub_20BDEA72C((char **)a3, &v22);
        goto LABEL_22;
      }
      if (!v13[23])
        goto LABEL_21;
      while (*v13 == *v18)
      {
        ++v13;
        ++v18;
        if (!--v14)
          goto LABEL_21;
      }
    }
LABEL_22:
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
    if (*((_QWORD *)&v22 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v7 += 2;
  }
  *(_QWORD *)&v22 = v23;
  sub_20BDE9EB0((void ***)&v22);
}

void sub_20C7CC374(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDE9EB0((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C7CC3AC(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)sub_20BDDE084((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    sub_20C7CC454((uint64_t)a1, a4, (uint64_t)v10);
    sub_20BDDE1B4(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_20C7CC4E8((uint64_t)v10, 0);
  }
  return v7;
}

_BYTE *sub_20C7CC454@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _BYTE *result;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = v6 + 4;
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    result = sub_20BDDBFAC(result, *(void **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)result = v9;
  }
  v6[8] = 0;
  v6[9] = 0;
  v6[7] = v6 + 8;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20C7CC4D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C7CC4E8(v1, 0);
  _Unwind_Resume(a1);
}

void sub_20C7CC4E8(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C7C1BB4((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t *sub_20C7CC52C(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)sub_20BDDE084((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    sub_20C7CC5D4((uint64_t)a1, a4, (uint64_t)v10);
    sub_20BDDE1B4(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_20C7CC754((uint64_t)v10, 0);
  }
  return v7;
}

uint64_t sub_20C7CC5D4@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t result;
  __int128 *v8;

  v5 = a1 + 8;
  v6 = operator new(0x58uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v8 = *a2;
  result = sub_20C7CC650((uint64_t)v6 + 32, &v8);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20C7CC638(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C7CC754(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20C7CC650(uint64_t a1, __int128 **a2)
{
  __int128 *v3;
  __int128 v4;
  unsigned int *v5;
  unsigned int v6;
  int v8;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v9;
  int v10;
  int v11;
  uint64_t v12;

  v3 = *a2;
  v4 = **a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)*a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_QWORD *)v3 + 1) = 0;
  *((_QWORD *)v3 + 2) = 0;
  *(_QWORD *)v3 = 0;
  v8 = 1;
  v9 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v10);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v11);
  v12 = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(a1 + 24), (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v8);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 24) = off_24C53D618;
  if ((v12 & 7) != 0)
  {
    v5 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
  sub_20BFD265C(&v10);
  if (v9)
    sub_20C35C614(v9);
  return a1;
}

void sub_20C7CC730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_20C35C2E0((uint64_t)&a9);
  if (*(char *)(v9 + 23) < 0)
    operator delete(*(void **)v9);
  _Unwind_Resume(a1);
}

void sub_20C7CC754(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C7C1C3C((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void sub_20C7CC798(uint64_t *a1, uint64_t *a2, unsigned __int8 *a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *i;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  const char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  char *v26;
  __int128 *v27;
  _QWORD *v28;
  char *v29;
  __int128 *v30;
  _QWORD *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  __int128 *v35;
  void **v36;
  const char *v37;
  uint64_t v38;
  const char *v39;
  char v40;
  __int128 *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  uint64_t *v48;
  uint64_t *v49;

  v5 = a2[1];
  v46 = *a2;
  v47 = (std::__shared_weak_count *)v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = sub_20C957390();
  sub_20C94FD38(&v46, a3, (uint64_t)v8, (uint64_t)&v48);
  v9 = v47;
  if (v47)
  {
    p_shared_owners = (unint64_t *)&v47->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v48;
  for (i = v49; v12 != i; v12 += 2)
  {
    v14 = *v12;
    v15 = (std::__shared_weak_count *)v12[1];
    v44 = *v12;
    v45 = v15;
    if (v15)
    {
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    if (sub_20C7C289C(0))
    {
      v20 = (_QWORD *)(v14 + 48);
      if (*(char *)(v14 + 71) < 0)
        v20 = (_QWORD *)*v20;
      if ((a3[23] & 0x80u) == 0)
        v21 = (uint64_t *)a3;
      else
        v21 = *(uint64_t **)a3;
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Adding shaderNode '%s' type: '%s'\n", v18, v19, v20, v21);
    }
    v36 = (void **)v14;
    v37 = (const char *)v15;
    if (v15)
    {
      v22 = (unint64_t *)&v15->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    sub_20C7CCB14(a1, (uint64_t *)&v36, (uint64_t)&v42);
    if (v15)
    {
      v24 = (unint64_t *)&v15->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    if (v43 && (*(_BYTE *)(v43 + 57) & 8) == 0 && ((*(uint64_t (**)(uint64_t *))(v42 + 32))(&v42) & 1) != 0)
      goto LABEL_48;
    sub_20C7C0F74();
    sub_20C7C0FDC(&v41, (uint64_t)&v44, (unsigned __int8 *)&qword_25498D148);
    v27 = v41;
    if (*((char *)v41 + 23) < 0)
    {
      if (*((_QWORD *)v41 + 1))
      {
LABEL_33:
        v36 = (void **)"usdMtlx/reader.cpp";
        v37 = "_TranslateShaderNodes";
        v38 = 2344;
        v39 = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_TranslateShaderNodes(_Context &, const mx::"
              "NodePtr &, const std::string &)";
        v40 = 0;
        v28 = (_QWORD *)(v44 + 48);
        if (*(char *)(v44 + 71) < 0)
          v28 = (_QWORD *)*v28;
        if (*((char *)v41 + 23) < 0)
          v27 = *(__int128 **)v41;
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v36, (pxrInternal__aapl__pxrReserved__ *)"Failed to create shaderNode '%s' to nodedef '%s'", v26, v28, v27);
        goto LABEL_48;
      }
    }
    else if (*((_BYTE *)v41 + 23))
    {
      goto LABEL_33;
    }
    sub_20C7C0F74();
    sub_20C7C0FDC(&v35, (uint64_t)&v44, (unsigned __int8 *)&qword_25498D190);
    v30 = v35;
    if (*((char *)v35 + 23) < 0)
    {
      if (*((_QWORD *)v35 + 1))
      {
LABEL_43:
        v36 = (void **)"usdMtlx/reader.cpp";
        v37 = "_TranslateShaderNodes";
        v38 = 2350;
        v39 = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_TranslateShaderNodes(_Context &, const mx::"
              "NodePtr &, const std::string &)";
        v40 = 0;
        v31 = (_QWORD *)(v44 + 48);
        if (*(char *)(v44 + 71) < 0)
          v31 = (_QWORD *)*v31;
        if (*((char *)v35 + 23) < 0)
          v30 = *(__int128 **)v35;
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v36, (pxrInternal__aapl__pxrReserved__ *)"Failed to create shaderNode '%s' to node '%s'", v29, v31, v30);
      }
    }
    else if (*((_BYTE *)v35 + 23))
    {
      goto LABEL_43;
    }
LABEL_48:
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::~UsdShadeShader((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v42);
    v32 = v45;
    if (v45)
    {
      v33 = (unint64_t *)&v45->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
  }
  v36 = (void **)&v48;
  sub_20BDE9EB0(&v36);
}

void sub_20C7CCAAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  _Unwind_Resume(a1);
}

void sub_20C7CCB14(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  std::string *v6;
  __int128 *v7;
  std::__shared_weak_count *v8;
  std::string::size_type v9;
  unint64_t *v10;
  unint64_t v11;
  std::type_info v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *size;
  unint64_t *v24;
  unint64_t v25;
  std::type_info v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t v31;
  unint64_t *v32;
  unint64_t v33;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v34;
  int v35;
  _BOOL8 v36;
  const char *v37;
  char *v38;
  std::type_info_vtbl *v39;
  uint64_t *EmptyString;
  unsigned int *v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t *v47;
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t v48;
  unint64_t *v49;
  unint64_t v50;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v51;
  uint64_t *j;
  uint64_t v53;
  __int128 *v54;
  unint64_t *v55;
  unint64_t *k;
  std::__shared_weak_count *v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  unsigned __int8 *v62;
  __int128 *v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v68;
  unsigned int *v69;
  unsigned int v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  unint64_t *v77;
  unint64_t v78;
  unsigned int *v79;
  unsigned int v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  uint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  unsigned __int8 *v87;
  __int128 *v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int *v91;
  unsigned int v92;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v93;
  unsigned int *v94;
  unsigned int v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  unsigned int *v100;
  unsigned int v101;
  unint64_t *v102;
  unint64_t v103;
  unsigned int *v104;
  unsigned int v105;
  unint64_t *v106;
  unint64_t v107;
  unsigned int *v108;
  unsigned int v109;
  unsigned int *v110;
  unsigned int v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  __int128 *v116;
  std::string::size_type *m;
  std::string::size_type v118;
  std::string::size_type v119;
  unint64_t *v120;
  unint64_t v121;
  unint64_t v122;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v123;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v124;
  uint64_t v125;
  unsigned int *v126;
  unsigned int v127;
  unsigned int *v128;
  unsigned int v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  std::type_info_vtbl *v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  unint64_t *v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  unint64_t *v150;
  unint64_t v151;
  unsigned int *v152;
  unsigned int v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  std::__shared_weak_count *v157;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v158;
  unint64_t *v159;
  unint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  unint64_t *v167;
  unint64_t v168;
  unsigned int *v169;
  unsigned int v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  uint64_t *v174;
  uint64_t *v175;
  uint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  const void **v183;
  uint64_t *v184;
  unint64_t *v185;
  unint64_t v186;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v187;
  unsigned int *v188;
  unsigned int v189;
  unsigned int *v190;
  unsigned int v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  unsigned int *v195;
  unsigned int v196;
  unsigned int *v197;
  unsigned int v198;
  unint64_t *v199;
  unint64_t v200;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v201;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v202;
  unint64_t v203;
  unsigned int *v204;
  unsigned int v205;
  unsigned int *v206;
  unsigned int v207;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v208;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v209;
  unint64_t v210;
  unsigned int *v211;
  unsigned int v212;
  unsigned int *v213;
  unsigned int v214;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v215;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v216;
  unint64_t v217;
  unsigned int *v218;
  unsigned int v219;
  unsigned int *v220;
  unsigned int v221;
  const pxrInternal__aapl__pxrReserved__::TfToken *v222;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v223;
  const pxrInternal__aapl__pxrReserved__::TfToken *v224;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v225;
  unsigned int *v226;
  unsigned int v227;
  unsigned int *v228;
  unsigned int v229;
  uint64_t n;
  uint64_t v231;
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t v232;
  unint64_t *v233;
  unint64_t v234;
  unint64_t v235;
  unsigned int *v236;
  unsigned int v237;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v238;
  uint64_t v239;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v240;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v241;
  _QWORD *v242;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v243;
  unsigned int *v244;
  unsigned int v245;
  unsigned int *v246;
  unsigned int v247;
  unsigned int *v248;
  unsigned int v249;
  unsigned int *v250;
  unsigned int v251;
  unsigned int *v252;
  unsigned int v253;
  unsigned int *v254;
  unsigned int v255;
  std::__shared_weak_count *type_name;
  unint64_t *v257;
  unint64_t v258;
  unint64_t v259;
  unsigned int *v260;
  unsigned int v261;
  unsigned int *v262;
  unsigned int v263;
  unsigned int *v264;
  unsigned int v265;
  unsigned int *v266;
  unsigned int v267;
  std::__shared_weak_count *v268;
  unint64_t *v269;
  unint64_t v270;
  unint64_t *v271;
  unint64_t v272;
  unsigned int *v273;
  unsigned int v274;
  uint64_t *v275;
  uint64_t v276;
  __int128 *v277;
  uint64_t *v278;
  uint64_t *i;
  std::__shared_weak_count *v280;
  uint64_t v281;
  unint64_t *v282;
  unint64_t v283;
  unint64_t v284;
  unsigned __int8 *v285;
  __int128 *v286;
  uint64_t v287;
  std::__shared_weak_count *v288;
  unint64_t *v289;
  unint64_t v290;
  const void *v291;
  char *v292;
  size_t v293;
  size_t v294;
  const char *v295;
  char *v296;
  _QWORD *v297;
  __int128 *v298;
  unsigned __int8 v299;
  int v300;
  std::string *v301;
  int data;
  int v303;
  size_t v305;
  size_t v306;
  uint64_t v307;
  __int128 *v308;
  std::string *v309;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v310;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v311;
  const pxrInternal__aapl__pxrReserved__::TfToken *v312;
  std::string::size_type v313;
  int v314;
  size_t v316;
  size_t v317;
  __int128 *v318;
  std::string *v319;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v320;
  int v321;
  int v322;
  size_t v324;
  size_t v325;
  __int128 *v326;
  std::string *v327;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v328;
  int v329;
  int v330;
  size_t v332;
  size_t v333;
  __int128 *v334;
  std::string::size_type v335;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v336;
  unsigned int *v337;
  unsigned int v338;
  std::__shared_weak_count *v339;
  unint64_t *v340;
  unint64_t v341;
  unsigned int *v342;
  unsigned int v343;
  uint64_t *v344;
  unint64_t v345;
  std::__shared_weak_count *v346;
  unint64_t *v347;
  unint64_t v348;
  uint64_t *v349;
  uint64_t v350;
  std::string::size_type *v351;
  uint64_t *v352;
  uint64_t *v353;
  uint64_t *v354;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v356;
  int v357;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v358;
  int v359;
  int v360;
  uint64_t v361;
  int v362;
  int v363;
  uint64_t v364;
  std::__shared_weak_count *v365;
  int v366;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v367;
  int v368;
  int v369;
  uint64_t v370;
  std::string::size_type v371;
  std::__shared_weak_count *v372;
  __int128 v373;
  __int128 v374;
  std::string v375;
  uint64_t v376;
  char v377[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v378;
  int v379;
  int v380;
  uint64_t v381;
  int v382;
  int v383;
  uint64_t v384;
  unint64_t v385;
  std::type_info v386;
  __int128 v387;
  __int128 v388;
  const std::string *v389;
  __int128 v390;
  int v391;
  int v392;
  uint64_t v393;
  unsigned __int128 v394;
  uint64_t v395;
  unint64_t v396;
  uint64_t v397;
  _QWORD *v398;
  int v399;
  int v400;
  uint64_t v401;

  v401 = *MEMORY[0x24BDAC8D0];
  v356 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(a1 + 34);
  v5 = a1[35];
  if (!v5
    || (*(_BYTE *)(v5 + 57) & 8) != 0
    || ((*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *))(*(_QWORD *)v356 + 32))(v356) & 1) == 0)
  {
    *(_QWORD *)&v394 = "usdMtlx/reader.cpp";
    *((_QWORD *)&v394 + 1) = "AddShaderNode";
    v395 = 1517;
    v396 = (unint64_t)"UsdShadeShader pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_Context::AddShader"
                             "Node(const mx::ConstNodePtr &)";
    LOBYTE(v397) = 0;
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v394, "_usdMaterial", 0) & 1) == 0)
    {
      sub_20C65D670((uint64_t)&v394);
      *(_QWORD *)pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v394) = off_24C53DB40;
      sub_20C35C2E0((uint64_t)&v394);
      return;
    }
  }
  v6 = (std::string *)*a2;
  v7 = sub_20C957390();
  sub_20C950BB4(v6, (uint64_t)v7, 0, (uint64_t *)&v394);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v394 + 1);
  v386 = (std::type_info)v394;
  if (!(_QWORD)v394)
  {
    v9 = a2[1];
    v375.__r_.__value_.__r.__words[0] = *a2;
    v375.__r_.__value_.__l.__size_ = v9;
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    pxrInternal__aapl__pxrReserved__::UsdMtlxGetVersion((uint64_t *)&v375, 0);
    sub_20C7C8E90(*a2);
    v390 = 0uLL;
    v374 = 0uLL;
    sub_20C7C8AC8(a2, (uint64_t *)&v390, &v394);
    v12 = (std::type_info)v394;
    v394 = 0uLL;
    v386 = v12;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v15 = (std::__shared_weak_count *)*((_QWORD *)&v394 + 1);
    if (*((_QWORD *)&v394 + 1))
    {
      v16 = (unint64_t *)(*((_QWORD *)&v394 + 1) + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v18 = (std::__shared_weak_count *)*((_QWORD *)&v390 + 1);
    if (*((_QWORD *)&v390 + 1))
    {
      v19 = (unint64_t *)(*((_QWORD *)&v390 + 1) + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    if (*((_QWORD *)&v374 + 1))
    {
      v21 = (unint64_t *)(*((_QWORD *)&v374 + 1) + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v374 + 1) + 16))(*((_QWORD *)&v374 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v374 + 1));
      }
    }
    size = (std::__shared_weak_count *)v375.__r_.__value_.__l.__size_;
    if (v375.__r_.__value_.__l.__size_)
    {
      v24 = (unint64_t *)(v375.__r_.__value_.__l.__size_ + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (!v386.__vftable)
    {
      v385 = 0;
      goto LABEL_459;
    }
  }
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v385);
  if (!v385)
  {
LABEL_459:
    LODWORD(v394) = 1;
    *((_QWORD *)&v394 + 1) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v395);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v395 + 1);
    v396 = 0;
    *(_QWORD *)pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v394) = off_24C53DB40;
    if ((v396 & 7) != 0)
    {
      v252 = (unsigned int *)(v396 & 0xFFFFFFFFFFFFFFF8);
      do
        v253 = __ldxr(v252);
      while (__stlxr(v253 - 2, v252));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v395 + 1);
    sub_20BFD265C(&v395);
    if (*((_QWORD *)&v394 + 1))
      sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v394 + 1));
    goto LABEL_464;
  }
  v26 = v386;
  v394 = (unsigned __int128)v386;
  if (v386.__type_name)
  {
    v27 = (unint64_t *)(v386.__type_name + 8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  if (v26.__vftable)
  {
    sub_20C7C3084((uint64_t)&v26.__vftable[3], (uint64_t)&v384);
    if (!v26.__type_name)
      goto LABEL_46;
  }
  else
  {
    v384 = 0;
    if (!v26.__type_name)
      goto LABEL_46;
  }
  v29 = (unint64_t *)(v26.__type_name + 8);
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    (*(void (**)(std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t))(*(_QWORD *)v26.__type_name + 16))(v26.__type_name);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v26.__type_name);
  }
LABEL_46:
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 6), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v384, &v382);
  v350 = (uint64_t)a1;
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::Get(a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v382, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v390);
  v349 = a2;
  if (*((_QWORD *)&v390 + 1)
    && (*(_BYTE *)(*((_QWORD *)&v390 + 1) + 57) & 8) == 0
    && ((*(uint64_t (**)(__int128 *))(v390 + 32))(&v390) & 1) != 0)
  {
    goto LABEL_64;
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::Define(a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v382, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v394);
  v31 = *((_QWORD *)&v394 + 1);
  if (*((_QWORD *)&v394 + 1))
  {
    v32 = (unint64_t *)(*((_QWORD *)&v394 + 1) + 48);
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  v34 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)*((_QWORD *)&v390 + 1);
  *((_QWORD *)&v390 + 1) = v31;
  if (v34)
    sub_20C35C614(v34);
  sub_20C01A074(&v391, &v395);
  sub_20C01A0C8(&v392, (_DWORD *)&v395 + 1);
  if (!*((_QWORD *)&v390 + 1) || (*(_BYTE *)(*((_QWORD *)&v390 + 1) + 57) & 8) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::~UsdShadeShader((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v394);
LABEL_63:
    a2 = v349;
    goto LABEL_64;
  }
  v35 = (*(uint64_t (**)(__int128 *))(v390 + 32))(&v390);
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::~UsdShadeShader((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v394);
  if (v35)
  {
    v36 = sub_20C7C289C(0);
    if (v36)
    {
      v39 = v386.__vftable + 3;
      if (SHIBYTE(v386.__vftable[4].~type_info) < 0)
        v39 = (std::type_info_vtbl *)v39->~type_info;
      if ((v384 & 0xFFFFFFFFFFFFFFF8) != 0)
        EmptyString = (uint64_t *)((v384 & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v36);
      if (*((char *)EmptyString + 23) < 0)
        EmptyString = (uint64_t *)*EmptyString;
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Created shader mtlx %s, as usd %s\n", v37, v38, v39, EmptyString);
    }
    v259 = v385;
    if ((v385 & 7) != 0)
    {
      v260 = (unsigned int *)(v385 & 0xFFFFFFFFFFFFFFF8);
      do
        v261 = __ldxr(v260);
      while (__stxr(v261 + 2, v260));
      if ((v261 & 1) == 0)
        v259 &= 0xFFFFFFFFFFFFFFF8;
    }
    *(_QWORD *)&v394 = v259;
    *((_QWORD *)&v394 + 1) = (char *)&off_24C5207B8 + 1;
    if ((v259 & 7) != 0)
    {
      v262 = (unsigned int *)(v259 & 0xFFFFFFFFFFFFFFF8);
      do
        v263 = __ldxr(v262);
      while (__stxr(v263 + 2, v262));
      if ((v263 & 1) == 0)
        *(_QWORD *)&v394 = v394 & 0xFFFFFFFFFFFFFFF8;
    }
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateIdAttr((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v390, (std::type_info *)&v394, 0, (uint64_t)v377);
    if ((v381 & 7) != 0)
    {
      v264 = (unsigned int *)(v381 & 0xFFFFFFFFFFFFFFF8);
      do
        v265 = __ldxr(v264);
      while (__stlxr(v265 - 2, v264));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v380);
    sub_20BFD265C(&v379);
    if (v378)
      sub_20C35C614(v378);
    sub_20BF4C2D8((uint64_t)&v394);
    if ((v259 & 7) != 0)
    {
      v266 = (unsigned int *)(v259 & 0xFFFFFFFFFFFFFFF8);
      do
        v267 = __ldxr(v266);
      while (__stlxr(v267 - 2, v266));
    }
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::ConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v390, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v394);
    sub_20C35C4F8((uint64_t)&v375, (uint64_t *)&v390 + 1, &v391);
    v268 = (std::__shared_weak_count *)v349[1];
    *(_QWORD *)&v374 = *v349;
    *((_QWORD *)&v374 + 1) = v268;
    if (v268)
    {
      v269 = (unint64_t *)&v268->__shared_owners_;
      do
        v270 = __ldxr(v269);
      while (__stxr(v270 + 1, v269));
    }
    sub_20C7C5A74((uint64_t)&v375, (uint64_t)&v374);
    if (v268)
    {
      v271 = (unint64_t *)&v268->__shared_owners_;
      do
        v272 = __ldaxr(v271);
      while (__stlxr(v272 - 1, v271));
      if (!v272)
      {
        ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
        std::__shared_weak_count::__release_weak(v268);
      }
    }
    if ((v376 & 7) != 0)
    {
      v273 = (unsigned int *)(v376 & 0xFFFFFFFFFFFFFFF8);
      do
        v274 = __ldxr(v273);
      while (__stlxr(v274 - 2, v273));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v375.__r_.__value_.__r.__words[2] + 1);
    sub_20BFD265C(&v375.__r_.__value_.__r.__words[2]);
    if (v375.__r_.__value_.__l.__size_)
      sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v375.__r_.__value_.__l.__size_);
    sub_20C7C5D90((uint64_t *)&v386, (uint64_t)&v374);
    v352 = (uint64_t *)*((_QWORD *)&v374 + 1);
    v275 = (uint64_t *)v374;
    if ((_QWORD)v374 != *((_QWORD *)&v374 + 1))
    {
      do
      {
        v354 = v275;
        v276 = *v275;
        v277 = sub_20C957390();
        sub_20C7C7450(v276, (unsigned __int8 *)v277, (uint64_t)&v373);
        v278 = (uint64_t *)*((_QWORD *)&v373 + 1);
        for (i = (uint64_t *)v373; i != v278; i += 2)
        {
          v281 = *i;
          v280 = (std::__shared_weak_count *)i[1];
          v371 = *i;
          v372 = v280;
          if (v280)
          {
            v282 = (unint64_t *)&v280->__shared_owners_;
            do
              v283 = __ldxr(v282);
            while (__stxr(v283 + 1, v282));
            v364 = v281;
            v365 = v280;
            do
              v284 = __ldxr(v282);
            while (__stxr(v284 + 1, v282));
          }
          else
          {
            v364 = v281;
            v365 = 0;
          }
          sub_20C7C0F74();
          v285 = sub_20C67F73C((_QWORD *)(v281 + 160), (unsigned __int8 *)&qword_25498D1F0);
          if (v285)
            v286 = (__int128 *)(v285 + 40);
          else
            v286 = sub_20C957390();
          v287 = *((unsigned __int8 *)v286 + 23);
          if ((v287 & 0x80u) != 0)
            v287 = *((_QWORD *)v286 + 1);
          if (!v287)
            v286 = sub_20C957390();
          memset(&v375, 0, sizeof(v375));
          sub_20C93BF6C(v281, &v387);
          sub_20C7B042C(v387, (unsigned __int8 *)v286, &v388);
          v288 = (std::__shared_weak_count *)*((_QWORD *)&v387 + 1);
          if (*((_QWORD *)&v387 + 1))
          {
            v289 = (unint64_t *)(*((_QWORD *)&v387 + 1) + 8);
            do
              v290 = __ldaxr(v289);
            while (__stlxr(v290 - 1, v289));
            if (!v290)
            {
              ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
              std::__shared_weak_count::__release_weak(v288);
            }
          }
          if ((_QWORD)v388)
          {
            sub_20C7C0F74();
            sub_20C7C0FDC((__int128 **)&v387, (uint64_t)&v388, (unsigned __int8 *)&qword_25498D1C0);
            v291 = (const void *)v387;
            if (*(char *)(v387 + 23) < 0)
            {
              v294 = *(_QWORD *)(v387 + 8);
              if (!v294)
                goto LABEL_542;
              v292 = off_25473DCD0[0];
              if (strlen(off_25473DCD0[0]) != v294)
                goto LABEL_542;
              if (v294 == -1)
LABEL_669:
                sub_20BEB9180();
              v291 = *(const void **)v387;
            }
            else
            {
              if (!*(_BYTE *)(v387 + 23))
                goto LABEL_542;
              v292 = off_25473DCD0[0];
              v293 = strlen(off_25473DCD0[0]);
              if (v293 != *(unsigned __int8 *)(v387 + 23))
                goto LABEL_542;
              v294 = v293;
              if (v293 == -1)
                goto LABEL_669;
            }
            if (!memcmp(v291, v292, v294))
            {
              sub_20C7C0F74();
              sub_20C7C0FDC((__int128 **)&v389, (uint64_t)&v388, (unsigned __int8 *)&qword_25498CFC8);
              std::string::operator=(&v375, v389);
            }
          }
LABEL_542:
          if (sub_20C7C289C(0))
          {
            v297 = (_QWORD *)(v364 + 48);
            if (*(char *)(v364 + 71) < 0)
              v297 = (_QWORD *)*v297;
            v298 = v286;
            if (*((char *)v286 + 23) < 0)
              v298 = *(__int128 **)v286;
            pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Add shader output %s of type %s\n", v295, v296, v297, v298);
          }
          v299 = HIBYTE(v375.__r_.__value_.__r.__words[2]);
          v300 = HIBYTE(v375.__r_.__value_.__r.__words[2]);
          if (SHIBYTE(v375.__r_.__value_.__r.__words[2]) < 0)
          {
            if (v375.__r_.__value_.__l.__size_ != 7)
              goto LABEL_557;
            v301 = (std::string *)v375.__r_.__value_.__r.__words[0];
          }
          else
          {
            if (HIBYTE(v375.__r_.__value_.__r.__words[2]) != 7)
              goto LABEL_557;
            v301 = &v375;
          }
          data = (int)v301->__r_.__value_.__l.__data_;
          v303 = *(_DWORD *)((char *)v301->__r_.__value_.__r.__words + 3);
          if (data == 1718777203 && v303 == 1701011814)
          {
LABEL_568:
            v310 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
            if (!v310)
              v310 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
            v311 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
            if (!v311)
              v311 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
            v312 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v310 + 208);
            goto LABEL_639;
          }
LABEL_557:
          v305 = strlen(off_25473DF20[0]);
          v306 = v305;
          v307 = *((unsigned __int8 *)v286 + 23);
          if (*((char *)v286 + 23) < 0)
          {
            if (v305 != *((_QWORD *)v286 + 1))
              goto LABEL_565;
            if (v305 == -1)
LABEL_668:
              sub_20BEB9180();
            v308 = *(__int128 **)v286;
          }
          else
          {
            if (v305 != v307)
              goto LABEL_565;
            v308 = v286;
            if (v306 == -1)
              goto LABEL_668;
          }
          if (!memcmp(v308, off_25473DF20[0], v306))
            goto LABEL_568;
LABEL_565:
          if ((v300 & 0x80) != 0)
          {
            if (v375.__r_.__value_.__l.__size_ != 12)
              goto LABEL_579;
            v309 = (std::string *)v375.__r_.__value_.__r.__words[0];
          }
          else
          {
            if (v300 != 12)
              goto LABEL_579;
            v309 = &v375;
          }
          v313 = v309->__r_.__value_.__r.__words[0];
          v314 = v309->__r_.__value_.__r.__words[1];
          if (v313 == 0x6563616C70736964 && v314 == 1953391981)
          {
LABEL_589:
            v320 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
            if (!v320)
              v320 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
            v311 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
            if (!v311)
              v311 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
            v312 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v320 + 32);
            goto LABEL_639;
          }
LABEL_579:
          v316 = strlen(off_25473DF28[0]);
          v317 = v316;
          if ((v307 & 0x80) != 0)
          {
            if (v316 != *((_QWORD *)v286 + 1))
              goto LABEL_586;
            if (v316 == -1)
              sub_20BEB9180();
            v318 = *(__int128 **)v286;
          }
          else
          {
            v318 = v286;
            if (v317 != v307)
              goto LABEL_586;
          }
          if (!memcmp(v318, off_25473DF28[0], v317))
            goto LABEL_589;
LABEL_586:
          if ((v300 & 0x80) != 0)
          {
            if (v375.__r_.__value_.__l.__size_ != 6)
              goto LABEL_600;
            v319 = (std::string *)v375.__r_.__value_.__r.__words[0];
          }
          else
          {
            if (v300 != 6)
              goto LABEL_600;
            v319 = &v375;
          }
          v321 = (int)v319->__r_.__value_.__l.__data_;
          v322 = WORD2(v319->__r_.__value_.__r.__words[0]);
          if (v321 == 1970040694 && v322 == 25965)
          {
LABEL_610:
            v328 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
            if (!v328)
              v328 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
            v311 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
            if (!v311)
              v311 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
            v312 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v328 + 232);
            goto LABEL_639;
          }
LABEL_600:
          v324 = strlen(off_25473DF30[0]);
          v325 = v324;
          if ((v307 & 0x80) != 0)
          {
            if (v324 != *((_QWORD *)v286 + 1))
              goto LABEL_607;
            if (v324 == -1)
              sub_20BEB9180();
            v326 = *(__int128 **)v286;
          }
          else
          {
            v326 = v286;
            if (v325 != v307)
              goto LABEL_607;
          }
          if (!memcmp(v326, off_25473DF30[0], v325))
            goto LABEL_610;
LABEL_607:
          if ((v300 & 0x80) != 0)
          {
            if (v375.__r_.__value_.__l.__size_ != 5)
              goto LABEL_621;
            v327 = (std::string *)v375.__r_.__value_.__r.__words[0];
          }
          else
          {
            if (v300 != 5)
              goto LABEL_621;
            v327 = &v375;
          }
          v329 = (int)v327->__r_.__value_.__l.__data_;
          v330 = v327->__r_.__value_.__s.__data_[4];
          if (v329 == 1751607660 && v330 == 116)
          {
LABEL_637:
            v312 = (const pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C7D0804();
            v311 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
            if (!v311)
              v311 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
LABEL_639:
            pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::CreateOutput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v394, v312, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v311 + 88), (uint64_t)&v366);
            goto LABEL_640;
          }
LABEL_621:
          v332 = strlen(off_25473DF38[0]);
          v333 = v332;
          if ((v307 & 0x80) != 0)
          {
            if (v332 != *((_QWORD *)v286 + 1))
              goto LABEL_628;
            if (v332 == -1)
              sub_20BEB9180();
            v334 = *(__int128 **)v286;
          }
          else
          {
            v334 = v286;
            if (v333 != v307)
              goto LABEL_628;
          }
          if (!memcmp(v334, off_25473DF38[0], v333))
            goto LABEL_637;
LABEL_628:
          v335 = v299;
          if ((v300 & 0x80u) != 0)
            v335 = v375.__r_.__value_.__l.__size_;
          if (v335)
          {
            pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v387);
            v336 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
            if (!v336)
              v336 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
            pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::CreateOutput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v394, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v387, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v336 + 88), (uint64_t)&v366);
            if ((v387 & 7) != 0)
            {
              v337 = (unsigned int *)(v387 & 0xFFFFFFFFFFFFFFF8);
              do
                v338 = __ldxr(v337);
              while (__stlxr(v338 - 2, v337));
            }
          }
          else
          {
            v366 = 3;
            v367 = 0;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v368);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v369);
            v370 = 0;
          }
LABEL_640:
          v339 = (std::__shared_weak_count *)*((_QWORD *)&v388 + 1);
          if (*((_QWORD *)&v388 + 1))
          {
            v340 = (unint64_t *)(*((_QWORD *)&v388 + 1) + 8);
            do
              v341 = __ldaxr(v340);
            while (__stlxr(v341 - 1, v340));
            if (!v341)
            {
              ((void (*)(std::__shared_weak_count *))v339->__on_zero_shared)(v339);
              std::__shared_weak_count::__release_weak(v339);
            }
          }
          if (SHIBYTE(v375.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v375.__r_.__value_.__l.__data_);
          if ((v370 & 7) != 0)
          {
            v342 = (unsigned int *)(v370 & 0xFFFFFFFFFFFFFFF8);
            do
              v343 = __ldxr(v342);
            while (__stlxr(v343 - 2, v342));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v369);
          sub_20BFD265C(&v368);
          if (v367)
            sub_20C35C614(v367);
          if (v365)
          {
            v344 = &v365->__shared_owners_;
            do
              v345 = __ldaxr((unint64_t *)v344);
            while (__stlxr(v345 - 1, (unint64_t *)v344));
            if (!v345)
            {
              ((void (*)(std::__shared_weak_count *))v365->__on_zero_shared)(v365);
              std::__shared_weak_count::__release_weak(v365);
            }
          }
          v346 = v372;
          if (v372)
          {
            v347 = (unint64_t *)&v372->__shared_owners_;
            do
              v348 = __ldaxr(v347);
            while (__stlxr(v348 - 1, v347));
            if (!v348)
            {
              ((void (*)(std::__shared_weak_count *))v346->__on_zero_shared)(v346);
              std::__shared_weak_count::__release_weak(v346);
            }
          }
        }
        v375.__r_.__value_.__r.__words[0] = (std::string::size_type)&v373;
        sub_20BDE9EB0((void ***)&v375);
        v275 = v354 + 2;
      }
      while (v354 + 2 != v352);
    }
    v375.__r_.__value_.__r.__words[0] = (std::string::size_type)&v374;
    sub_20BDE9EB0((void ***)&v375);
    pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v394);
    goto LABEL_63;
  }
LABEL_64:
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::~UsdShadeShader((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v390);
  sub_20C3630C0((uint64_t)v356, &v394);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)&v394, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v384, &v362);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v394 + 1);
  sub_20BFD265C(&v394);
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::Define((uint64_t *)v350, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v362, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)a3);
  sub_20C35C4F8((uint64_t)&v375, (uint64_t *)(a3 + 8), (_DWORD *)(a3 + 16));
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetReferences((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v375, (uint64_t)&v394);
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)&v390, 0.0, 1.0);
  pxrInternal__aapl__pxrReserved__::UsdReferences::AddInternalReference((pxrInternal__aapl__pxrReserved__::UsdObject *)&v394, (uint64_t)&v382, (uint64_t)&v390, 1);
  if ((v396 & 7) != 0)
  {
    v41 = (unsigned int *)(v396 & 0xFFFFFFFFFFFFFFF8);
    do
      v42 = __ldxr(v41);
    while (__stlxr(v42 - 2, v41));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v395 + 1);
  sub_20BFD265C(&v395);
  if (*((_QWORD *)&v394 + 1))
    sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v394 + 1));
  if ((v376 & 7) != 0)
  {
    v43 = (unsigned int *)(v376 & 0xFFFFFFFFFFFFFFF8);
    do
      v44 = __ldxr(v43);
    while (__stlxr(v44 - 2, v43));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v375.__r_.__value_.__r.__words[2] + 1);
  sub_20BFD265C(&v375.__r_.__value_.__r.__words[2]);
  if (v375.__r_.__value_.__l.__size_)
    sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v375.__r_.__value_.__l.__size_);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v394, (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)a3);
  v396 = 0;
  *(_QWORD *)&v394 = off_24C53D618;
  v375.__r_.__value_.__r.__words[0] = *(_QWORD *)(v350 + 256) + 48;
  v45 = sub_20C7CC3AC((uint64_t **)(v350 + 224), (const void **)v375.__r_.__value_.__l.__data_, (uint64_t)&unk_20CAC184C, (__int128 **)&v375);
  v375.__r_.__value_.__r.__words[0] = *a2 + 48;
  v46 = sub_20C7D0AB0((uint64_t **)v45 + 7, (const void **)v375.__r_.__value_.__l.__data_, (uint64_t)&unk_20CAC184C, (__int128 **)&v375);
  v47 = v46;
  v48 = *((_QWORD *)&v394 + 1);
  if (*((_QWORD *)&v394 + 1))
  {
    v49 = (unint64_t *)(*((_QWORD *)&v394 + 1) + 48);
    do
      v50 = __ldxr(v49);
    while (__stxr(v50 + 1, v49));
  }
  v51 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v46[8];
  v47[8] = v48;
  if (v51)
    sub_20C35C614(v51);
  sub_20C01A074((int *)v47 + 18, &v395);
  sub_20C01A0C8((int *)v47 + 19, (_DWORD *)&v395 + 1);
  sub_20BF32220(v47 + 10, &v396);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v394);
  sub_20C7C5D90((uint64_t *)&v386, (uint64_t)&v374);
  v353 = (uint64_t *)*((_QWORD *)&v374 + 1);
  for (j = (uint64_t *)v374; j != v353; j += 2)
  {
    v53 = *j;
    v54 = sub_20C957390();
    sub_20C7C6180(v53, (unsigned __int8 *)v54, (uint64_t)&v373);
    v55 = (unint64_t *)*((_QWORD *)&v373 + 1);
    for (k = (unint64_t *)v373; k != v55; k += 2)
    {
      v58 = *k;
      v57 = (std::__shared_weak_count *)k[1];
      *(_QWORD *)&v388 = *k;
      *((_QWORD *)&v388 + 1) = v57;
      if (v57)
      {
        v59 = (unint64_t *)&v57->__shared_owners_;
        do
          v60 = __ldxr(v59);
        while (__stxr(v60 + 1, v59));
        *(_QWORD *)&v390 = v58;
        *((_QWORD *)&v390 + 1) = v57;
        do
          v61 = __ldxr(v59);
        while (__stxr(v61 + 1, v59));
      }
      else
      {
        v390 = v58;
      }
      sub_20C7C0F74();
      v62 = sub_20C67F73C((_QWORD *)(v58 + 160), (unsigned __int8 *)&qword_25498D1F0);
      if (v62)
        v63 = (__int128 *)(v62 + 40);
      else
        v63 = sub_20C957390();
      v64 = *((unsigned __int8 *)v63 + 23);
      if ((v64 & 0x80u) == 0)
        v65 = *((unsigned __int8 *)v63 + 23);
      else
        v65 = *((_QWORD *)v63 + 1);
      if (v65)
      {
        if ((v64 & 0x80) == 0)
          goto LABEL_97;
      }
      else
      {
        v63 = sub_20C957390();
        v64 = *((unsigned __int8 *)v63 + 23);
        if ((v64 & 0x80) == 0)
        {
LABEL_97:
          if (!v64)
            goto LABEL_115;
          goto LABEL_98;
        }
      }
      if (!*((_QWORD *)v63 + 1))
      {
LABEL_115:
        LODWORD(v394) = 3;
        *((_QWORD *)&v394 + 1) = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v395);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v395 + 1);
        v396 = 0;
        if (!v57)
          goto LABEL_136;
LABEL_132:
        v81 = (unint64_t *)&v57->__shared_owners_;
        do
          v82 = __ldaxr(v81);
        while (__stlxr(v82 - 1, v81));
        if (!v82)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
        goto LABEL_136;
      }
LABEL_98:
      *(_QWORD *)&v387 = 0;
      pxrInternal__aapl__pxrReserved__::UsdMtlxGetUsdType((unsigned __int8 *)v63, (uint64_t)&v375);
      v371 = v375.__r_.__value_.__r.__words[0];
      if ((v375.__r_.__value_.__s.__data_[8] & 7) != 0)
      {
        v66 = (unsigned int *)(v375.__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFF8);
        do
          v67 = __ldxr(v66);
        while (__stlxr(v67 - 2, v66));
      }
      if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::_IsEmpty((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v371))
      {
        v68 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        if (!v68)
          v68 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        v371 = *((_QWORD *)v68 + 11);
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v375);
        if ((v387 & 7) != 0)
        {
          v69 = (unsigned int *)(v387 & 0xFFFFFFFFFFFFFFF8);
          do
            v70 = __ldxr(v69);
          while (__stlxr(v70 - 2, v69));
        }
        *(_QWORD *)&v387 = v375.__r_.__value_.__r.__words[0];
      }
      v72 = (std::__shared_weak_count *)*((_QWORD *)&v390 + 1);
      v71 = v390;
      *(_OWORD *)&v375.__r_.__value_.__l.__data_ = v390;
      if (*((_QWORD *)&v390 + 1))
      {
        v73 = (unint64_t *)(*((_QWORD *)&v390 + 1) + 8);
        do
          v74 = __ldxr(v73);
        while (__stxr(v74 + 1, v73));
      }
      if (v71)
        sub_20C7C3084(v71 + 48, (uint64_t)&v364);
      else
        v364 = 0;
      pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateInput((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)a3, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v364, (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v371, (uint64_t)&v394);
      if ((v364 & 7) != 0)
      {
        v75 = (unsigned int *)(v364 & 0xFFFFFFFFFFFFFFF8);
        do
          v76 = __ldxr(v75);
        while (__stlxr(v76 - 2, v75));
        v72 = (std::__shared_weak_count *)v375.__r_.__value_.__l.__size_;
      }
      if (v72)
      {
        v77 = (unint64_t *)&v72->__shared_owners_;
        do
          v78 = __ldaxr(v77);
        while (__stlxr(v78 - 1, v77));
        if (!v78)
        {
          ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
          std::__shared_weak_count::__release_weak(v72);
        }
      }
      if ((_QWORD)v387)
      {
        pxrInternal__aapl__pxrReserved__::UsdShadeInput::SetRenderType((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&v394, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v387);
        if ((v387 & 7) != 0)
        {
          v79 = (unsigned int *)(v387 & 0xFFFFFFFFFFFFFFF8);
          do
            v80 = __ldxr(v79);
          while (__stlxr(v80 - 2, v79));
        }
      }
      v57 = (std::__shared_weak_count *)*((_QWORD *)&v390 + 1);
      if (*((_QWORD *)&v390 + 1))
        goto LABEL_132;
LABEL_136:
      v83 = (std::__shared_weak_count *)*((_QWORD *)&v388 + 1);
      v84 = v388;
      v387 = v388;
      if (*((_QWORD *)&v388 + 1))
      {
        v85 = (unint64_t *)(*((_QWORD *)&v388 + 1) + 8);
        do
          v86 = __ldxr(v85);
        while (__stxr(v86 + 1, v85));
      }
      sub_20C7C0F74();
      v87 = sub_20C67F73C((_QWORD *)(v84 + 160), (unsigned __int8 *)&qword_25498D1F0);
      if (v87)
        v88 = (__int128 *)(v87 + 40);
      else
        v88 = sub_20C957390();
      v89 = *((unsigned __int8 *)v88 + 23);
      if ((v89 & 0x80u) == 0)
        v90 = *((unsigned __int8 *)v88 + 23);
      else
        v90 = *((_QWORD *)v88 + 1);
      if (v90)
      {
        if ((v89 & 0x80) == 0)
          goto LABEL_147;
      }
      else
      {
        v88 = sub_20C957390();
        v89 = *((unsigned __int8 *)v88 + 23);
        if ((v89 & 0x80) == 0)
        {
LABEL_147:
          if (!v89)
            goto LABEL_165;
          goto LABEL_148;
        }
      }
      if (!*((_QWORD *)v88 + 1))
      {
LABEL_165:
        LODWORD(v375.__r_.__value_.__l.__data_) = 3;
        v375.__r_.__value_.__l.__size_ = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v375.__r_.__value_.__r.__words[2]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v375.__r_.__value_.__r.__words[2] + 1);
        v376 = 0;
        if (!v83)
          goto LABEL_186;
LABEL_182:
        v106 = (unint64_t *)&v83->__shared_owners_;
        do
          v107 = __ldaxr(v106);
        while (__stlxr(v107 - 1, v106));
        if (!v107)
        {
          ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
          std::__shared_weak_count::__release_weak(v83);
        }
        goto LABEL_186;
      }
LABEL_148:
      v371 = 0;
      pxrInternal__aapl__pxrReserved__::UsdMtlxGetUsdType((unsigned __int8 *)v88, (uint64_t)&v390);
      v364 = v390;
      if ((BYTE8(v390) & 7) != 0)
      {
        v91 = (unsigned int *)(*((_QWORD *)&v390 + 1) & 0xFFFFFFFFFFFFFFF8);
        do
          v92 = __ldxr(v91);
        while (__stlxr(v92 - 2, v91));
      }
      if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::_IsEmpty((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v364))
      {
        v93 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        if (!v93)
          v93 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        v364 = *((_QWORD *)v93 + 11);
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v390);
        if ((v371 & 7) != 0)
        {
          v94 = (unsigned int *)(v371 & 0xFFFFFFFFFFFFFFF8);
          do
            v95 = __ldxr(v94);
          while (__stlxr(v95 - 2, v94));
        }
        v371 = v390;
      }
      v97 = (std::__shared_weak_count *)*((_QWORD *)&v387 + 1);
      v96 = v387;
      v390 = v387;
      if (*((_QWORD *)&v387 + 1))
      {
        v98 = (unint64_t *)(*((_QWORD *)&v387 + 1) + 8);
        do
          v99 = __ldxr(v98);
        while (__stxr(v99 + 1, v98));
      }
      if (v96)
        sub_20C7C3084(v96 + 48, (uint64_t)&v389);
      else
        v389 = 0;
      pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::CreateInput(v356, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v389, (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v364, (uint64_t)&v375);
      if ((v389 & 7) != 0)
      {
        v100 = (unsigned int *)((unint64_t)v389 & 0xFFFFFFFFFFFFFFF8);
        do
          v101 = __ldxr(v100);
        while (__stlxr(v101 - 2, v100));
        v97 = (std::__shared_weak_count *)*((_QWORD *)&v390 + 1);
      }
      if (v97)
      {
        v102 = (unint64_t *)&v97->__shared_owners_;
        do
          v103 = __ldaxr(v102);
        while (__stlxr(v103 - 1, v102));
        if (!v103)
        {
          ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
          std::__shared_weak_count::__release_weak(v97);
        }
      }
      if (v371)
      {
        pxrInternal__aapl__pxrReserved__::UsdShadeInput::SetRenderType((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&v375, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v371);
        if ((v371 & 7) != 0)
        {
          v104 = (unsigned int *)(v371 & 0xFFFFFFFFFFFFFFF8);
          do
            v105 = __ldxr(v104);
          while (__stlxr(v105 - 2, v104));
        }
      }
      v83 = (std::__shared_weak_count *)*((_QWORD *)&v387 + 1);
      if (*((_QWORD *)&v387 + 1))
        goto LABEL_182;
LABEL_186:
      pxrInternal__aapl__pxrReserved__::UsdShadeInput::ConnectToSource((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&v394, (const pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&v375);
      if ((v376 & 7) != 0)
      {
        v108 = (unsigned int *)(v376 & 0xFFFFFFFFFFFFFFF8);
        do
          v109 = __ldxr(v108);
        while (__stlxr(v109 - 2, v108));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v375.__r_.__value_.__r.__words[2] + 1);
      sub_20BFD265C(&v375.__r_.__value_.__r.__words[2]);
      if (v375.__r_.__value_.__l.__size_)
        sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v375.__r_.__value_.__l.__size_);
      if ((v396 & 7) != 0)
      {
        v110 = (unsigned int *)(v396 & 0xFFFFFFFFFFFFFFF8);
        do
          v111 = __ldxr(v110);
        while (__stlxr(v111 - 2, v110));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v395 + 1);
      sub_20BFD265C(&v395);
      if (*((_QWORD *)&v394 + 1))
        sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v394 + 1));
      v112 = (std::__shared_weak_count *)*((_QWORD *)&v388 + 1);
      if (*((_QWORD *)&v388 + 1))
      {
        v113 = (unint64_t *)(*((_QWORD *)&v388 + 1) + 8);
        do
          v114 = __ldaxr(v113);
        while (__stlxr(v114 - 1, v113));
        if (!v114)
        {
          ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
          std::__shared_weak_count::__release_weak(v112);
        }
      }
    }
    *(_QWORD *)&v394 = &v373;
    sub_20BDE9EB0((void ***)&v394);
  }
  *(_QWORD *)&v394 = &v374;
  sub_20BDE9EB0((void ***)&v394);
  v115 = *v349;
  v116 = sub_20C957390();
  sub_20C7C6180(v115, (unsigned __int8 *)v116, (uint64_t)&v390);
  v351 = (std::string::size_type *)*((_QWORD *)&v390 + 1);
  for (m = (std::string::size_type *)v390; m != v351; m += 2)
  {
    v118 = *m;
    v119 = m[1];
    *(_QWORD *)&v374 = *m;
    *((_QWORD *)&v374 + 1) = v119;
    if (v119)
    {
      v120 = (unint64_t *)(v119 + 8);
      do
        v121 = __ldxr(v120);
      while (__stxr(v121 + 1, v120));
      v375.__r_.__value_.__r.__words[0] = v118;
      v375.__r_.__value_.__l.__size_ = v119;
      do
        v122 = __ldxr(v120);
      while (__stxr(v122 + 1, v120));
    }
    else
    {
      *(_OWORD *)&v375.__r_.__value_.__l.__data_ = v118;
    }
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v394, v356);
    v396 = 0;
    *(_QWORD *)&v394 = off_24C53D618;
    sub_20C7D0CE8((uint64_t *)&v375, (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v394, (uint64_t)&v357);
    if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v357, v123)&& pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&v357, v124))
    {
      sub_20C7C7AA0((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v357, (void **)&v375.__r_.__value_.__l.__data_);
      v125 = v361;
    }
    else
    {
      if ((v361 & 7) != 0)
      {
        v126 = (unsigned int *)(v361 & 0xFFFFFFFFFFFFFFF8);
        do
          v127 = __ldxr(v126);
        while (__stlxr(v127 - 2, v126));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v360);
      sub_20BFD265C(&v359);
      if (v358)
        sub_20C35C614(v358);
      v357 = 3;
      v358 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v359);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v360);
      v125 = 0;
      v361 = 0;
    }
    if ((v125 & 7) != 0)
    {
      v128 = (unsigned int *)(v125 & 0xFFFFFFFFFFFFFFF8);
      do
        v129 = __ldxr(v128);
      while (__stlxr(v129 - 2, v128));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v360);
    sub_20BFD265C(&v359);
    if (v358)
      sub_20C35C614(v358);
    pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v394);
    v130 = (std::__shared_weak_count *)v375.__r_.__value_.__l.__size_;
    if (v375.__r_.__value_.__l.__size_)
    {
      v131 = (unint64_t *)(v375.__r_.__value_.__l.__size_ + 8);
      do
        v132 = __ldaxr(v131);
      while (__stlxr(v132 - 1, v131));
      if (!v132)
      {
        ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
        std::__shared_weak_count::__release_weak(v130);
      }
    }
    sub_20C7C0F74();
    sub_20C7C0FDC((__int128 **)&v387, (uint64_t)&v374, (unsigned __int8 *)&qword_25498D1A8);
    if (*(char *)(v387 + 23) < 0)
    {
      if (!*(_QWORD *)(v387 + 8))
        goto LABEL_276;
    }
    else if (!*(_BYTE *)(v387 + 23))
    {
      goto LABEL_276;
    }
    sub_20C93BBD0(v374, &v394);
    v133 = (std::type_info_vtbl *)v394;
    sub_20C7C0F74();
    sub_20C7C0FDC((__int128 **)&v375, (uint64_t)&v374, (unsigned __int8 *)&qword_25498D160);
    sub_20C7D0E1C((uint64_t)v133, (unsigned __int8 *)v375.__r_.__value_.__l.__data_, &v373);
    v134 = (std::__shared_weak_count *)*((_QWORD *)&v394 + 1);
    if (*((_QWORD *)&v394 + 1))
    {
      v135 = (unint64_t *)(*((_QWORD *)&v394 + 1) + 8);
      do
        v136 = __ldaxr(v135);
      while (__stlxr(v136 - 1, v135));
      if (!v136)
      {
        ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
        std::__shared_weak_count::__release_weak(v134);
      }
    }
    if ((_QWORD)v373)
    {
      v137 = (std::__shared_weak_count *)*((_QWORD *)&v373 + 1);
      *(_OWORD *)&v375.__r_.__value_.__l.__data_ = v373;
      if (*((_QWORD *)&v373 + 1))
      {
        v138 = (unint64_t *)(*((_QWORD *)&v373 + 1) + 8);
        do
          v139 = __ldxr(v138);
        while (__stxr(v139 + 1, v138));
      }
      sub_20C7CF8E0(v350, (uint64_t *)&v375, (uint64_t)&v394);
      if (!v137)
        goto LABEL_257;
      v141 = (unint64_t *)&v137->__shared_owners_;
      do
        v142 = __ldaxr(v141);
      while (__stlxr(v142 - 1, v141));
    }
    else
    {
      sub_20C93BBD0(v374, &v388);
      v143 = (std::__shared_weak_count *)*((_QWORD *)&v388 + 1);
      *(_OWORD *)&v375.__r_.__value_.__l.__data_ = v388;
      v388 = 0uLL;
      sub_20C7CF980(v350, (uint64_t *)&v375, (uint64_t)&v394);
      if (v143)
      {
        v144 = (unint64_t *)&v143->__shared_owners_;
        do
          v145 = __ldaxr(v144);
        while (__stlxr(v145 - 1, v144));
        if (!v145)
        {
          ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
          std::__shared_weak_count::__release_weak(v143);
        }
      }
      v137 = (std::__shared_weak_count *)*((_QWORD *)&v388 + 1);
      if (!*((_QWORD *)&v388 + 1))
        goto LABEL_257;
      v146 = (unint64_t *)(*((_QWORD *)&v388 + 1) + 8);
      do
        v142 = __ldaxr(v146);
      while (__stlxr(v142 - 1, v146));
    }
    if (!v142)
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
LABEL_257:
    if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v394, v140))
    {
      v147 = (std::__shared_weak_count *)*((_QWORD *)&v374 + 1);
      v388 = v374;
      if (*((_QWORD *)&v374 + 1))
      {
        v148 = (unint64_t *)(*((_QWORD *)&v374 + 1) + 8);
        do
          v149 = __ldxr(v148);
        while (__stxr(v149 + 1, v148));
      }
      sub_20C3630C0((uint64_t)v356, &v371);
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v375, (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)a3);
      v376 = 0;
      v375.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C53D618;
      sub_20C7CF9C4((void (***)(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *__hidden))&v388, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v371, (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v375, (uint64_t)&v394);
      pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v375);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v371 + 1);
      sub_20BFD265C(&v371);
      if (v147)
      {
        v150 = (unint64_t *)&v147->__shared_owners_;
        do
          v151 = __ldaxr(v150);
        while (__stlxr(v151 - 1, v150));
        if (!v151)
        {
          ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
          std::__shared_weak_count::__release_weak(v147);
        }
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v400);
    sub_20BFD265C(&v399);
    sub_20C7C1E98((uint64_t)&v397, v398);
    if ((v396 & 7) != 0)
    {
      v152 = (unsigned int *)(v396 & 0xFFFFFFFFFFFFFFF8);
      do
        v153 = __ldxr(v152);
      while (__stlxr(v153 - 2, v152));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v395 + 1);
    sub_20BFD265C(&v395);
    if (*((_QWORD *)&v394 + 1))
      sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v394 + 1));
    v154 = (std::__shared_weak_count *)*((_QWORD *)&v373 + 1);
    if (*((_QWORD *)&v373 + 1))
    {
      v155 = (unint64_t *)(*((_QWORD *)&v373 + 1) + 8);
      do
        v156 = __ldaxr(v155);
      while (__stlxr(v156 - 1, v155));
      if (!v156)
      {
        ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
        std::__shared_weak_count::__release_weak(v154);
      }
    }
LABEL_276:
    sub_20C7C0F74();
    sub_20C7C0FDC((__int128 **)&v388, (uint64_t)&v374, (unsigned __int8 *)&qword_25498D178);
    if (*(char *)(v388 + 23) < 0)
    {
      if (*(_QWORD *)(v388 + 8))
      {
LABEL_280:
        sub_20C93BBD0(v374, &v373);
        v157 = (std::__shared_weak_count *)*((_QWORD *)&v373 + 1);
        *(_OWORD *)&v375.__r_.__value_.__l.__data_ = v373;
        v373 = 0uLL;
        sub_20C7CF980(v350, (uint64_t *)&v375, (uint64_t)&v394);
        if (v157)
        {
          v159 = (unint64_t *)&v157->__shared_owners_;
          do
            v160 = __ldaxr(v159);
          while (__stlxr(v160 - 1, v159));
          if (!v160)
          {
            ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
            std::__shared_weak_count::__release_weak(v157);
          }
        }
        v161 = (std::__shared_weak_count *)*((_QWORD *)&v373 + 1);
        if (*((_QWORD *)&v373 + 1))
        {
          v162 = (unint64_t *)(*((_QWORD *)&v373 + 1) + 8);
          do
            v163 = __ldaxr(v162);
          while (__stlxr(v163 - 1, v162));
          if (!v163)
          {
            ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
            std::__shared_weak_count::__release_weak(v161);
          }
        }
        if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v394, v158))
        {
          v164 = (std::__shared_weak_count *)*((_QWORD *)&v374 + 1);
          v373 = v374;
          if (*((_QWORD *)&v374 + 1))
          {
            v165 = (unint64_t *)(*((_QWORD *)&v374 + 1) + 8);
            do
              v166 = __ldxr(v165);
            while (__stxr(v166 + 1, v165));
          }
          sub_20C3630C0((uint64_t)v356, &v387);
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v375, (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)a3);
          v376 = 0;
          v375.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C53D618;
          sub_20C7CF9C4((void (***)(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *__hidden))&v373, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v387, (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v375, (uint64_t)&v394);
          pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v375);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v387 + 1);
          sub_20BFD265C(&v387);
          if (v164)
          {
            v167 = (unint64_t *)&v164->__shared_owners_;
            do
              v168 = __ldaxr(v167);
            while (__stlxr(v168 - 1, v167));
            if (!v168)
            {
              ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
              std::__shared_weak_count::__release_weak(v164);
            }
          }
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v400);
        sub_20BFD265C(&v399);
        sub_20C7C1E98((uint64_t)&v397, v398);
        if ((v396 & 7) != 0)
        {
          v169 = (unsigned int *)(v396 & 0xFFFFFFFFFFFFFFF8);
          do
            v170 = __ldxr(v169);
          while (__stlxr(v170 - 2, v169));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v395 + 1);
        sub_20BFD265C(&v395);
        if (*((_QWORD *)&v394 + 1))
          sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v394 + 1));
      }
    }
    else if (*(_BYTE *)(v388 + 23))
    {
      goto LABEL_280;
    }
    v171 = (std::__shared_weak_count *)*((_QWORD *)&v374 + 1);
    if (*((_QWORD *)&v374 + 1))
    {
      v172 = (unint64_t *)(*((_QWORD *)&v374 + 1) + 8);
      do
        v173 = __ldaxr(v172);
      while (__stlxr(v173 - 1, v172));
      if (!v173)
      {
        ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
        std::__shared_weak_count::__release_weak(v171);
      }
    }
  }
  *(_QWORD *)&v394 = &v390;
  sub_20BDE9EB0((void ***)&v394);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v375, v356);
  v376 = 0;
  v375.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C53CE78;
  if (v375.__r_.__value_.__l.__size_)
  {
    if ((*(_BYTE *)(v375.__r_.__value_.__l.__size_ + 57) & 8) == 0)
    {
      if (pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::_IsCompatible((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)&v375))
      {
        v174 = *(uint64_t **)(*v349 + 136);
        v175 = *(uint64_t **)(*v349 + 144);
        if (v174 != v175)
        {
          while (1)
          {
            v176 = *v174;
            v177 = (std::__shared_weak_count *)v174[1];
            *(_QWORD *)&v374 = *v174;
            *((_QWORD *)&v374 + 1) = v177;
            if (v177)
            {
              v178 = (unint64_t *)&v177->__shared_owners_;
              do
                v179 = __ldxr(v178);
              while (__stxr(v179 + 1, v178));
            }
            sub_20C7C0F74();
            v180 = *(unsigned __int8 *)(v176 + 47);
            if ((v180 & 0x80u) == 0)
              v181 = *(unsigned __int8 *)(v176 + 47);
            else
              v181 = *(_QWORD *)(v176 + 32);
            v182 = byte_25498D1EF;
            if (byte_25498D1EF < 0)
              v182 = qword_25498D1E0;
            if (v181 != v182)
              goto LABEL_360;
            v183 = (const void **)(v176 + 24);
            v184 = byte_25498D1EF >= 0 ? &qword_25498D1D8 : (uint64_t *)qword_25498D1D8;
            if ((v180 & 0x80) == 0)
              break;
            if (!memcmp(*v183, v184, *(_QWORD *)(v176 + 32)))
              goto LABEL_332;
LABEL_360:
            if (v177)
            {
              v199 = (unint64_t *)&v177->__shared_owners_;
              do
                v200 = __ldaxr(v199);
              while (__stlxr(v200 - 1, v199));
              if (!v200)
              {
                ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
                std::__shared_weak_count::__release_weak(v177);
              }
            }
            v174 += 2;
            if (v174 == v175)
              goto LABEL_366;
          }
          if (*(_BYTE *)(v176 + 47))
          {
            while (*(unsigned __int8 *)v183 == *(unsigned __int8 *)v184)
            {
              v183 = (const void **)((char *)v183 + 1);
              v184 = (uint64_t *)((char *)v184 + 1);
              if (!--v180)
                goto LABEL_332;
            }
            goto LABEL_360;
          }
LABEL_332:
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v390, v356);
          v393 = 0;
          *(_QWORD *)&v390 = off_24C53CE78;
          *(_QWORD *)&v373 = v176;
          *((_QWORD *)&v373 + 1) = v177;
          if (v177)
          {
            v185 = (unint64_t *)&v177->__shared_owners_;
            do
              v186 = __ldxr(v185);
            while (__stxr(v186 + 1, v185));
          }
          if (v176)
            sub_20C7C3084(v176 + 48, (uint64_t)&v388);
          else
            *(_QWORD *)&v388 = 0;
          v187 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
          if (!v187)
            v187 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
          *(_QWORD *)&v387 = 0;
          pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::CreatePrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)&v390, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v388, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v187 + 80), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v387, -1, (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v394);
          if ((v387 & 7) != 0)
          {
            v188 = (unsigned int *)(v387 & 0xFFFFFFFFFFFFFFF8);
            do
              v189 = __ldxr(v188);
            while (__stlxr(v189 - 2, v188));
          }
          if ((v388 & 7) != 0)
          {
            v190 = (unsigned int *)(v388 & 0xFFFFFFFFFFFFFFF8);
            do
              v191 = __ldxr(v190);
            while (__stlxr(v191 - 2, v190));
          }
          v192 = (std::__shared_weak_count *)*((_QWORD *)&v373 + 1);
          if (*((_QWORD *)&v373 + 1))
          {
            v193 = (unint64_t *)(*((_QWORD *)&v373 + 1) + 8);
            do
              v194 = __ldaxr(v193);
            while (__stlxr(v194 - 1, v193));
            if (!v194)
            {
              ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
              std::__shared_weak_count::__release_weak(v192);
            }
          }
          pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::~UsdGeomPrimvarsAPI((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)&v390);
          sub_20C7C0F74();
          sub_20C7C0FDC((__int128 **)&v373, (uint64_t)&v374, (unsigned __int8 *)&qword_25498D280);
          *((_QWORD *)&v390 + 1) = &off_24C520700;
          sub_20BF77444((unsigned int **)&v390, v373);
          pxrInternal__aapl__pxrReserved__::UsdAttribute::Set((pxrInternal__aapl__pxrReserved__ **)&v394, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v390, NAN);
          sub_20BF4C2D8((uint64_t)&v390);
          if ((v397 & 7) != 0)
          {
            v195 = (unsigned int *)(v397 & 0xFFFFFFFFFFFFFFF8);
            do
              v196 = __ldxr(v195);
            while (__stlxr(v196 - 2, v195));
          }
          if ((v396 & 7) != 0)
          {
            v197 = (unsigned int *)(v396 & 0xFFFFFFFFFFFFFFF8);
            do
              v198 = __ldxr(v197);
            while (__stlxr(v198 - 2, v197));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v395 + 1);
          sub_20BFD265C(&v395);
          if (*((_QWORD *)&v394 + 1))
            sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v394 + 1));
          v177 = (std::__shared_weak_count *)*((_QWORD *)&v374 + 1);
          goto LABEL_360;
        }
      }
    }
  }
LABEL_366:
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::~UsdGeomPrimvarsAPI((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)&v375);
  v201 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v201)
    v201 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetOutput((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)a3, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v201 + 208), (uint64_t)&v394);
  if (pxrInternal__aapl__pxrReserved__::UsdShadeOutput::IsOutput((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)&v394, v202))
  {
    v203 = sub_20C7D0804();
    pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::CreateSurfaceOutput(v356, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v203 + 8), (uint64_t)&v375);
    pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::ConnectToSource((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v375, (uint64_t)&v394);
    if ((v376 & 7) != 0)
    {
      v204 = (unsigned int *)(v376 & 0xFFFFFFFFFFFFFFF8);
      do
        v205 = __ldxr(v204);
      while (__stlxr(v205 - 2, v204));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v375.__r_.__value_.__r.__words[2] + 1);
    sub_20BFD265C(&v375.__r_.__value_.__r.__words[2]);
    if (v375.__r_.__value_.__l.__size_)
      sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v375.__r_.__value_.__l.__size_);
  }
  if ((v396 & 7) != 0)
  {
    v206 = (unsigned int *)(v396 & 0xFFFFFFFFFFFFFFF8);
    do
      v207 = __ldxr(v206);
    while (__stlxr(v207 - 2, v206));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v395 + 1);
  sub_20BFD265C(&v395);
  if (*((_QWORD *)&v394 + 1))
    sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v394 + 1));
  v208 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v208)
    v208 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetOutput((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)a3, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v208 + 32), (uint64_t)&v394);
  if (pxrInternal__aapl__pxrReserved__::UsdShadeOutput::IsOutput((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)&v394, v209))
  {
    v210 = sub_20C7D0804();
    pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::CreateDisplacementOutput(v356, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v210 + 8), (uint64_t)&v375);
    pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::ConnectToSource((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v375, (uint64_t)&v394);
    if ((v376 & 7) != 0)
    {
      v211 = (unsigned int *)(v376 & 0xFFFFFFFFFFFFFFF8);
      do
        v212 = __ldxr(v211);
      while (__stlxr(v212 - 2, v211));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v375.__r_.__value_.__r.__words[2] + 1);
    sub_20BFD265C(&v375.__r_.__value_.__r.__words[2]);
    if (v375.__r_.__value_.__l.__size_)
      sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v375.__r_.__value_.__l.__size_);
  }
  if ((v396 & 7) != 0)
  {
    v213 = (unsigned int *)(v396 & 0xFFFFFFFFFFFFFFF8);
    do
      v214 = __ldxr(v213);
    while (__stlxr(v214 - 2, v213));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v395 + 1);
  sub_20BFD265C(&v395);
  if (*((_QWORD *)&v394 + 1))
    sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v394 + 1));
  v215 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v215)
    v215 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetOutput((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)a3, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v215 + 232), (uint64_t)&v394);
  if (pxrInternal__aapl__pxrReserved__::UsdShadeOutput::IsOutput((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)&v394, v216))
  {
    v217 = sub_20C7D0804();
    pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::CreateVolumeOutput(v356, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v217 + 8), (uint64_t)&v375);
    pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::ConnectToSource((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v375, (uint64_t)&v394);
    if ((v376 & 7) != 0)
    {
      v218 = (unsigned int *)(v376 & 0xFFFFFFFFFFFFFFF8);
      do
        v219 = __ldxr(v218);
      while (__stlxr(v219 - 2, v218));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v375.__r_.__value_.__r.__words[2] + 1);
    sub_20BFD265C(&v375.__r_.__value_.__r.__words[2]);
    if (v375.__r_.__value_.__l.__size_)
      sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v375.__r_.__value_.__l.__size_);
  }
  if ((v396 & 7) != 0)
  {
    v220 = (unsigned int *)(v396 & 0xFFFFFFFFFFFFFFF8);
    do
      v221 = __ldxr(v220);
    while (__stlxr(v221 - 2, v220));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v395 + 1);
  sub_20BFD265C(&v395);
  if (*((_QWORD *)&v394 + 1))
    sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v394 + 1));
  v222 = (const pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C7D0804();
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetOutput((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)a3, v222, (uint64_t)&v394);
  if (pxrInternal__aapl__pxrReserved__::UsdShadeOutput::IsOutput((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)&v394, v223))
  {
    v224 = (const pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C7D0804();
    v225 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v225)
      v225 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::CreateOutput(v356, v224, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v225 + 88), (uint64_t)&v375);
    pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::ConnectToSource((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v375, (uint64_t)&v394);
    if ((v376 & 7) != 0)
    {
      v226 = (unsigned int *)(v376 & 0xFFFFFFFFFFFFFFF8);
      do
        v227 = __ldxr(v226);
      while (__stlxr(v227 - 2, v226));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v375.__r_.__value_.__r.__words[2] + 1);
    sub_20BFD265C(&v375.__r_.__value_.__r.__words[2]);
    if (v375.__r_.__value_.__l.__size_)
      sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v375.__r_.__value_.__l.__size_);
  }
  if ((v396 & 7) != 0)
  {
    v228 = (unsigned int *)(v396 & 0xFFFFFFFFFFFFFFF8);
    do
      v229 = __ldxr(v228);
    while (__stlxr(v229 - 2, v228));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v395 + 1);
  sub_20BFD265C(&v395);
  if (*((_QWORD *)&v394 + 1))
    sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v394 + 1));
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetOutputs((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)a3, 1, (uint64_t *)&v390);
  v231 = *((_QWORD *)&v390 + 1);
  for (n = v390; n != v231; n += 32)
  {
    LODWORD(v394) = *(_DWORD *)n;
    v232 = *(_QWORD *)(n + 8);
    *((_QWORD *)&v394 + 1) = v232;
    if (v232)
    {
      v233 = (unint64_t *)(v232 + 48);
      do
        v234 = __ldxr(v233);
      while (__stxr(v234 + 1, v233));
    }
    sub_20BFD6E54(&v395, (_DWORD *)(n + 16));
    sub_20BFD6EA4((_DWORD *)&v395 + 1, (_DWORD *)(n + 20));
    v235 = *(_QWORD *)(n + 24);
    v396 = v235;
    if ((v235 & 7) != 0)
    {
      v236 = (unsigned int *)(v235 & 0xFFFFFFFFFFFFFFF8);
      do
        v237 = __ldxr(v236);
      while (__stxr(v237 + 2, v236));
      if ((v237 & 1) == 0)
        v396 &= 0xFFFFFFFFFFFFFFF8;
    }
    pxrInternal__aapl__pxrReserved__::UsdShadeOutput::GetBaseName((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)&v394, (uint64_t)&v374);
    v238 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if (!v238)
      v238 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    v239 = v374;
    if ((v374 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v238 + 26) & 0xFFFFFFFFFFFFFFF8))
    {
      v240 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      if (!v240)
        v240 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      v239 = v374;
      if ((v374 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v240 + 4) & 0xFFFFFFFFFFFFFFF8))
      {
        v241 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
        if (!v241)
          v241 = sub_20C5BDBB4(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
        v239 = v374;
        if ((v374 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v241 + 29) & 0xFFFFFFFFFFFFFFF8))
        {
          v242 = (_QWORD *)sub_20C7D0804();
          v239 = v374;
          if ((v374 & 0xFFFFFFFFFFFFFFF8) != (*v242 & 0xFFFFFFFFFFFFFFF8))
          {
            v243 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
            if (!v243)
              v243 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
            pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::CreateOutput(v356, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v374, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v243 + 88), (uint64_t)&v375);
            pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::ConnectToSource((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v375, (uint64_t)&v394);
            if ((v376 & 7) != 0)
            {
              v244 = (unsigned int *)(v376 & 0xFFFFFFFFFFFFFFF8);
              do
                v245 = __ldxr(v244);
              while (__stlxr(v245 - 2, v244));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v375.__r_.__value_.__r.__words[2] + 1);
            sub_20BFD265C(&v375.__r_.__value_.__r.__words[2]);
            if (v375.__r_.__value_.__l.__size_)
              sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v375.__r_.__value_.__l.__size_);
            v239 = v374;
          }
        }
      }
    }
    if ((v239 & 7) != 0)
    {
      v246 = (unsigned int *)(v239 & 0xFFFFFFFFFFFFFFF8);
      do
        v247 = __ldxr(v246);
      while (__stlxr(v247 - 2, v246));
    }
    if ((v396 & 7) != 0)
    {
      v248 = (unsigned int *)(v396 & 0xFFFFFFFFFFFFFFF8);
      do
        v249 = __ldxr(v248);
      while (__stlxr(v249 - 2, v248));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v395 + 1);
    sub_20BFD265C(&v395);
    if (*((_QWORD *)&v394 + 1))
      sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v394 + 1));
  }
  *(_QWORD *)&v394 = &v390;
  sub_20C5BE1A0((void ***)&v394);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v363);
  sub_20BFD265C(&v362);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v383);
  sub_20BFD265C(&v382);
  if ((v384 & 7) != 0)
  {
    v250 = (unsigned int *)(v384 & 0xFFFFFFFFFFFFFFF8);
    do
      v251 = __ldxr(v250);
    while (__stlxr(v251 - 2, v250));
  }
LABEL_464:
  if ((v385 & 7) != 0)
  {
    v254 = (unsigned int *)(v385 & 0xFFFFFFFFFFFFFFF8);
    do
      v255 = __ldxr(v254);
    while (__stlxr(v255 - 2, v254));
  }
  type_name = (std::__shared_weak_count *)v386.__type_name;
  if (v386.__type_name)
  {
    v257 = (unint64_t *)(v386.__type_name + 8);
    do
      v258 = __ldaxr(v257);
    while (__stlxr(v258 - 1, v257));
    if (!v258)
    {
      ((void (*)(std::__shared_weak_count *))type_name->__on_zero_shared)(type_name);
      std::__shared_weak_count::__release_weak(type_name);
    }
  }
}

void sub_20C7CF1EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, pxrInternal__aapl__pxrReserved__::UsdShadeShader *a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,int a51,uint64_t a52,uint64_t a53)
{
  uint64_t v53;
  uint64_t v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int *v60;
  unsigned int v61;

  v55 = *(_QWORD *)(v53 - 216);
  if ((v55 & 7) != 0)
  {
    v56 = (unsigned int *)(v55 & 0xFFFFFFFFFFFFFFF8);
    do
      v57 = __ldxr(v56);
    while (__stlxr(v57 - 2, v56));
  }
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a34);
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::~UsdGeomPrimvarsAPI((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)(v53 - 192));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a37);
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::~UsdGeomPrimvarsAPI((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)&__p);
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::~UsdShadeShader(a19);
  sub_20BFD1A18(&a25);
  sub_20BFD1A18(&a51);
  if ((a52 & 7) != 0)
  {
    v58 = (unsigned int *)(a52 & 0xFFFFFFFFFFFFFFF8);
    do
      v59 = __ldxr(v58);
    while (__stlxr(v59 - 2, v58));
  }
  if ((a53 & 7) != 0)
  {
    v60 = (unsigned int *)(a53 & 0xFFFFFFFFFFFFFFF8);
    do
      v61 = __ldxr(v60);
    while (__stlxr(v61 - 2, v60));
  }
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v53 - 256));
  _Unwind_Resume(a1);
}

void sub_20C7CF8E0(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  sub_20C93BF6C(*a2, &v9);
  sub_20C7D0EE8(a1, (unint64_t *)a2, &v9, a3);
  v6 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_20C7CF96C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C7CF980@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4[2];

  v4[0] = 0;
  v4[1] = 0;
  return sub_20C7D0EE8(a1, v4, a2, a3);
}

void sub_20C7CF9B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C7CF9C4(void (***a1)(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *__hidden this), pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *a3, uint64_t a4)
{
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *NameToken;
  unsigned int *v9;
  unsigned int v10;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v11;
  _QWORD *v12;
  uint64_t *String;
  const char *v14;
  char *v15;
  uint64_t v16;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v17;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v24;
  unsigned int *v25;
  unsigned int v26;
  const void **v27;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v28;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  _QWORD **v35;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v36;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  pxrInternal__aapl__pxrReserved__::UsdMtlxTokens_StaticTokenType *v43;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v44;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v45;
  unint64_t *v46;
  unint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unsigned int *v53;
  unsigned int v54;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v55;
  unsigned int *v56;
  unsigned int v57;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int *v62;
  unsigned int v63;
  const pxrInternal__aapl__pxrReserved__::UsdAttribute *v64;
  std::__shared_weak_count *v65;
  unint64_t *p_shared_owners;
  unint64_t v67;
  unsigned int *v68;
  unsigned int v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  const char *v73;
  char *v74;
  _QWORD *v75;
  unsigned int *v76;
  unsigned int v77;
  void (**v78)(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *__hidden);
  _QWORD *v79;
  const char *v80;
  char *v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int *v84;
  unsigned int v85;
  pxrInternal__aapl__pxrReserved__::UsdMtlxTokens_StaticTokenType *v87;
  uint64_t v88;
  unsigned int *v89;
  unsigned int v90;
  unint64_t v91;
  const char *v92;
  void (**v93)(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *__hidden);
  _QWORD *v94;
  const char *Text;
  char *v96;
  unsigned int *v97;
  unsigned int v98;
  unint64_t v99;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v100;
  uint64_t v101;
  unint64_t v102;
  char v103;
  void (**v104)(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *__hidden);
  std::__shared_weak_count *v105;
  void (**v106)(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *__hidden);
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v107;
  int v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  int v113;
  uint64_t v114;
  __int128 *v115;
  int v116;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v117;
  int v118;
  int v119;
  uint64_t v120;
  int v121;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v122;
  int v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  int v128;
  int v129;
  int v130;
  int v131;
  void (**v132)(pxrInternal__aapl__pxrReserved__::UsdShadeShader *__hidden);
  uint64_t v133;

  sub_20C5DB79C(a4, (uint64_t)&v121);
  sub_20C348EEC((uint64_t)&v121, (int *)&v99);
  NameToken = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v99);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(a2, NameToken, &v130);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v99 + 1);
  sub_20BFD265C(&v99);
  if ((v125 & 7) != 0)
  {
    v9 = (unsigned int *)(v125 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v124);
  sub_20BFD265C(&v123);
  if (v122)
    sub_20C35C614(v122);
  if (sub_20C7C289C(0))
  {
    v12 = *a1 + 6;
    if (*((char *)*a1 + 71) < 0)
      v12 = (_QWORD *)*v12;
    String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v130);
    if (*((char *)String + 23) >= 0)
      v16 = (uint64_t)String;
    else
      v16 = *String;
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"_BindNodeGraph %s - %s\n", v14, v15, v12, v16);
  }
  if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)a4, v11) & 1) != 0)
  {
    sub_20C7C9500((pxrInternal__aapl__pxrReserved__::UsdProperty *)a4, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v130, (uint64_t)&v99);
    if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v99, v17))
    {
      v121 = *(_DWORD *)a4;
      v18 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a4 + 8);
      v122 = v18;
      if (v18)
      {
        v19 = (unint64_t *)((char *)v18 + 48);
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }
      sub_20BFD6E54(&v123, (_DWORD *)(a4 + 16));
      sub_20BFD6EA4(&v124, (_DWORD *)(a4 + 20));
      v21 = *(_QWORD *)(a4 + 24);
      v125 = v21;
      if ((v21 & 7) != 0)
      {
        v22 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 2, v22));
        if ((v23 & 1) == 0)
          v125 &= 0xFFFFFFFFFFFFFFF8;
      }
      sub_20C7CBE40(&v126, (const void ***)(a4 + 32));
      sub_20C348EEC((uint64_t)&v99, &v128);
    }
    else
    {
      sub_20C7C2FDC((uint64_t)&v121);
    }
    if ((v102 & 7) != 0)
    {
      v25 = (unsigned int *)(v102 & 0xFFFFFFFFFFFFFFF8);
      do
        v26 = __ldxr(v25);
      while (__stlxr(v26 - 2, v25));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v101 + 1);
    sub_20BFD265C(&v101);
    if (v100)
      sub_20C35C614(v100);
  }
  else
  {
    sub_20C7C2EC4((uint64_t)&v121, a4);
  }
  if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v121, v24) & 1) != 0)
  {
    sub_20C7C0F74();
    sub_20C7C0FDC((__int128 **)&v99, (uint64_t)a1, (unsigned __int8 *)&qword_25498D1A8);
    v27 = (const void **)v99;
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v128))
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((pxrInternal__aapl__pxrReserved__::UsdObject *)&v121, v28, &v99);
      pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::Get((uint64_t *)&v99, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v128, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v106);
      v29 = v100;
      if (v100)
      {
        v30 = (unsigned int *)((char *)v100 + 8);
        do
        {
          v31 = __ldxr(v30);
          v32 = v31 - 1;
        }
        while (__stlxr(v32, v30));
        if (!v32)
          (*(void (**)(pxrInternal__aapl__pxrReserved__::Usd_PrimData *))(*(_QWORD *)v29 + 8))(v29);
      }
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v106, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v121);
      v106 = off_24C53DD78;
    }
    if (v107 && (*((_BYTE *)v107 + 57) & 8) == 0 && ((unsigned int (*)(_QWORD))v106[4])(&v106))
    {
      pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v99);
      pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetOutput((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)&v106, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v99, (uint64_t)&v116);
      if ((v99 & 7) != 0)
      {
        v33 = (unsigned int *)(v99 & 0xFFFFFFFFFFFFFFF8);
        do
          v34 = __ldxr(v33);
        while (__stlxr(v34 - 2, v33));
      }
      goto LABEL_66;
    }
    v35 = (_QWORD **)sub_20BDEEBA4((uint64_t)&v126, v27);
    if (&v127 != v35)
    {
      if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v128))
      {
        pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((pxrInternal__aapl__pxrReserved__::UsdObject *)&v121, v36, &v99);
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)&v128, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v35 + 7), &v104);
        pxrInternal__aapl__pxrReserved__::UsdShadeShader::Get((uint64_t *)&v99, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v104, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v132);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v104 + 1);
        sub_20BFD265C(&v104);
        v37 = v100;
        if (v100)
        {
          v38 = (unsigned int *)((char *)v100 + 8);
          do
          {
            v39 = __ldxr(v38);
            v40 = v39 - 1;
          }
          while (__stlxr(v40, v38));
          if (!v40)
            (*(void (**)(pxrInternal__aapl__pxrReserved__::Usd_PrimData *))(*(_QWORD *)v37 + 8))(v37);
        }
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::UsdPrim::GetChild((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v121, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v35 + 7), (uint64_t)&v99);
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v132, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v99);
        v132 = off_24C53DB40;
        if ((v102 & 7) != 0)
        {
          v41 = (unsigned int *)(v102 & 0xFFFFFFFFFFFFFFF8);
          do
            v42 = __ldxr(v41);
          while (__stlxr(v42 - 2, v41));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v101 + 1);
        sub_20BFD265C(&v101);
        if (v100)
          sub_20C35C614(v100);
      }
      if (v133 && (*(_BYTE *)(v133 + 57) & 8) == 0 && ((unsigned int (*)(_QWORD))v132[4])(&v132))
      {
        v43 = (pxrInternal__aapl__pxrReserved__::UsdMtlxTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdMtlxTokens);
        if (!v43)
          v43 = sub_20C7B1650(&pxrInternal__aapl__pxrReserved__::UsdMtlxTokens);
        pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetOutput((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v132, v43, (uint64_t)&v116);
        pxrInternal__aapl__pxrReserved__::UsdShadeShader::~UsdShadeShader((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v132);
LABEL_66:
        pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::~UsdShadeNodeGraph((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)&v106);
        if (pxrInternal__aapl__pxrReserved__::UsdShadeOutput::IsOutput((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)&v116, v44))
        {
          v45 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)a1[1];
          v106 = *a1;
          v107 = v45;
          if (v45)
          {
            v46 = (unint64_t *)((char *)v45 + 8);
            do
              v47 = __ldxr(v46);
            while (__stxr(v47 + 1, v46));
          }
          sub_20C7D0CE8((uint64_t *)&v106, a3, (uint64_t)&v99);
          pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::ConnectToSource((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v99, (uint64_t)&v116);
          if ((v102 & 7) != 0)
          {
            v48 = (unsigned int *)(v102 & 0xFFFFFFFFFFFFFFF8);
            do
              v49 = __ldxr(v48);
            while (__stlxr(v49 - 2, v48));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v101 + 1);
          sub_20BFD265C(&v101);
          if (v100)
            sub_20C35C614(v100);
          v50 = (std::__shared_weak_count *)v107;
          if (v107)
          {
            v51 = (unint64_t *)((char *)v107 + 8);
            do
              v52 = __ldaxr(v51);
            while (__stlxr(v52 - 1, v51));
            if (!v52)
            {
              ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
              std::__shared_weak_count::__release_weak(v50);
            }
          }
LABEL_131:
          if ((v120 & 7) != 0)
          {
            v82 = (unsigned int *)(v120 & 0xFFFFFFFFFFFFFFF8);
            do
              v83 = __ldxr(v82);
            while (__stlxr(v83 - 2, v82));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v119);
          sub_20BFD265C(&v118);
          if (v117)
            sub_20C35C614(v117);
          goto LABEL_136;
        }
        sub_20C7C0F74();
        sub_20C7C0FDC(&v115, (uint64_t)a1, (unsigned __int8 *)&qword_25498D178);
        if (*((char *)v115 + 23) < 0)
        {
          if (*((_QWORD *)v115 + 1))
          {
LABEL_82:
            if (*((char *)v27 + 23) < 0)
            {
              if (v27[1])
                goto LABEL_84;
            }
            else if (*((_BYTE *)v27 + 23))
            {
LABEL_84:
              pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v114);
LABEL_85:
              pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v99);
              pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)&v130, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v99, &v112);
              if ((v99 & 7) != 0)
              {
                v53 = (unsigned int *)(v99 & 0xFFFFFFFFFFFFFFF8);
                do
                  v54 = __ldxr(v53);
                while (__stlxr(v54 - 2, v53));
              }
              sub_20C5DB79C(a4, (uint64_t)&v99);
              pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((pxrInternal__aapl__pxrReserved__::UsdObject *)&v99, v55, &v106);
              pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v111);
              pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)&v130, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v111, &v104);
              pxrInternal__aapl__pxrReserved__::UsdShadeShader::Get((uint64_t *)&v106, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v104, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v132);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v104 + 1);
              sub_20BFD265C(&v104);
              if ((v111 & 7) != 0)
              {
                v56 = (unsigned int *)(v111 & 0xFFFFFFFFFFFFFFF8);
                do
                  v57 = __ldxr(v56);
                while (__stlxr(v57 - 2, v56));
              }
              v58 = v107;
              if (v107)
              {
                v59 = (unsigned int *)((char *)v107 + 8);
                do
                {
                  v60 = __ldxr(v59);
                  v61 = v60 - 1;
                }
                while (__stlxr(v61, v59));
                if (!v61)
                  (*(void (**)(pxrInternal__aapl__pxrReserved__::Usd_PrimData *))(*(_QWORD *)v58 + 8))(v58);
              }
              if ((v102 & 7) != 0)
              {
                v62 = (unsigned int *)(v102 & 0xFFFFFFFFFFFFFFF8);
                do
                  v63 = __ldxr(v62);
                while (__stlxr(v63 - 2, v62));
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v101 + 1);
              sub_20BFD265C(&v101);
              if (v100)
                sub_20C35C614(v100);
              if (v133 && (*(_BYTE *)(v133 + 57) & 8) == 0 && ((unsigned int (*)(_QWORD))v132[4])(&v132))
              {
                pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetOutput((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v132, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v114, (uint64_t)&v106);
                if (pxrInternal__aapl__pxrReserved__::UsdShadeOutput::IsOutput((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)&v106, v64))
                {
                  v65 = (std::__shared_weak_count *)a1[1];
                  v104 = *a1;
                  v105 = v65;
                  if (v65)
                  {
                    p_shared_owners = (unint64_t *)&v65->__shared_owners_;
                    do
                      v67 = __ldxr(p_shared_owners);
                    while (__stxr(v67 + 1, p_shared_owners));
                  }
                  sub_20C7D0CE8((uint64_t *)&v104, a3, (uint64_t)&v99);
                  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::ConnectToSource((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v99, (uint64_t)&v106);
                  if ((v102 & 7) != 0)
                  {
                    v68 = (unsigned int *)(v102 & 0xFFFFFFFFFFFFFFF8);
                    do
                      v69 = __ldxr(v68);
                    while (__stlxr(v69 - 2, v68));
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v101 + 1);
                  sub_20BFD265C(&v101);
                  if (v100)
                    sub_20C35C614(v100);
                  v70 = v105;
                  if (v105)
                  {
                    v71 = (unint64_t *)&v105->__shared_owners_;
                    do
                      v72 = __ldaxr(v71);
                    while (__stlxr(v72 - 1, v71));
                    if (!v72)
                    {
                      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                      std::__shared_weak_count::__release_weak(v70);
                    }
                  }
                }
                else
                {
                  v99 = (unint64_t)"usdMtlx/reader.cpp";
                  v100 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"_BindNodeGraph";
                  v101 = 1954;
                  v102 = (unint64_t)"void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_Context::_Bind"
                                           "NodeGraph(const mx::ConstInputPtr &, const SdfPath &, const UsdShadeConnectab"
                                           "leAPI &, const _NodeGraph &)";
                  v103 = 0;
                  v91 = v114 & 0xFFFFFFFFFFFFFFF8;
                  if ((v114 & 0xFFFFFFFFFFFFFFF8) != 0)
                  {
                    v92 = (const char *)(v91 + 16);
                    if (*(char *)(v91 + 39) < 0)
                      v92 = *(const char **)v92;
                  }
                  else
                  {
                    v92 = "";
                  }
                  v93 = *a1;
                  v94 = *a1 + 6;
                  if (*((char *)v93 + 71) < 0)
                    v94 = (_QWORD *)*v94;
                  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v112);
                  pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v99, (pxrInternal__aapl__pxrReserved__ *)"No output \"%s\" for input \"%s\" on <%s>", v96, v92, v94, Text);
                }
                if ((v110 & 7) != 0)
                {
                  v97 = (unsigned int *)(v110 & 0xFFFFFFFFFFFFFFF8);
                  do
                    v98 = __ldxr(v97);
                  while (__stlxr(v98 - 2, v97));
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v109);
                sub_20BFD265C(&v108);
                if (v107)
                  sub_20C35C614(v107);
              }
              else
              {
                v99 = (unint64_t)"usdMtlx/reader.cpp";
                v100 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"_BindNodeGraph";
                v101 = 1960;
                v102 = (unint64_t)"void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_Context::_BindNo"
                                         "deGraph(const mx::ConstInputPtr &, const SdfPath &, const UsdShadeConnectableAP"
                                         "I &, const _NodeGraph &)";
                v103 = 0;
                v73 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v112);
                v75 = *a1 + 6;
                if (*((char *)*a1 + 71) < 0)
                  v75 = (_QWORD *)*v75;
                pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v99, (pxrInternal__aapl__pxrReserved__ *)"Shader not found at <%s> for input \"%s\"", v74, v73, v75);
              }
              pxrInternal__aapl__pxrReserved__::UsdShadeShader::~UsdShadeShader((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v132);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v113);
              sub_20BFD265C(&v112);
              if ((v114 & 7) != 0)
              {
                v76 = (unsigned int *)(v114 & 0xFFFFFFFFFFFFFFF8);
                do
                  v77 = __ldxr(v76);
                while (__stlxr(v77 - 2, v76));
              }
              goto LABEL_131;
            }
            v87 = (pxrInternal__aapl__pxrReserved__::UsdMtlxTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdMtlxTokens);
            if (!v87)
              v87 = sub_20C7B1650(&pxrInternal__aapl__pxrReserved__::UsdMtlxTokens);
            v88 = *(_QWORD *)v87;
            v114 = v88;
            if ((v88 & 7) != 0)
            {
              v89 = (unsigned int *)(v88 & 0xFFFFFFFFFFFFFFF8);
              do
                v90 = __ldxr(v89);
              while (__stxr(v90 + 2, v89));
              if ((v90 & 1) == 0)
                v114 &= 0xFFFFFFFFFFFFFFF8;
            }
            goto LABEL_85;
          }
        }
        else if (*((_BYTE *)v115 + 23))
        {
          goto LABEL_82;
        }
        v99 = (unint64_t)"usdMtlx/reader.cpp";
        v100 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"_BindNodeGraph";
        v101 = 1967;
        v102 = (unint64_t)"void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_Context::_BindNodeGraph("
                                 "const mx::ConstInputPtr &, const SdfPath &, const UsdShadeConnectableAPI &, const _NodeGraph &)";
        v103 = 0;
        if (*((char *)v27 + 23) < 0)
          v27 = (const void **)*v27;
        v78 = *a1;
        v79 = *a1 + 6;
        if (*((char *)v78 + 71) < 0)
          v79 = (_QWORD *)*v79;
        sub_20C3630C0((uint64_t)a3, &v106);
        v80 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v106);
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v99, (pxrInternal__aapl__pxrReserved__ *)"No output \"%s\" for input \"%s\" on <%s>", v81, v27, v79, v80);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v106 + 1);
        sub_20BFD265C(&v106);
        goto LABEL_131;
      }
      pxrInternal__aapl__pxrReserved__::UsdShadeShader::~UsdShadeShader((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v132);
    }
    v116 = 3;
    v117 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v118);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v119);
    v120 = 0;
    goto LABEL_66;
  }
LABEL_136:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v129);
  sub_20BFD265C(&v128);
  sub_20C7C1E98((uint64_t)&v126, v127);
  if ((v125 & 7) != 0)
  {
    v84 = (unsigned int *)(v125 & 0xFFFFFFFFFFFFFFF8);
    do
      v85 = __ldxr(v84);
    while (__stlxr(v85 - 2, v84));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v124);
  sub_20BFD265C(&v123);
  if (v122)
    sub_20C35C614(v122);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v131);
  return sub_20BFD265C(&v130);
}

void sub_20C7D04D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;
  unsigned int *v29;
  unsigned int v30;

  sub_20C5BD350((uint64_t)&a12);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a17);
  sub_20C5BCAB8((uint64_t)&a19);
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::~UsdShadeShader((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)(v27 - 88));
  sub_20BFD1A18(&a24);
  if ((a25 & 7) != 0)
  {
    v29 = (unsigned int *)(a25 & 0xFFFFFFFFFFFFFFF8);
    do
      v30 = __ldxr(v29);
    while (__stlxr(v30 - 2, v29));
  }
  sub_20C5BCAB8((uint64_t)&a27);
  sub_20C7C1E18(v27 - 160);
  sub_20BFD1A18((_DWORD *)(v27 - 96));
  _Unwind_Resume(a1);
}

void sub_20C7D07EC(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20BFD1A18((int *)va);
  JUMPOUT(0x20C7D07F8);
}

unint64_t sub_20C7D0804()
{
  char *v0;
  _QWORD *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int **v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  void **v24;
  char v25;
  unsigned int *v26;
  unsigned int *v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v0 = (char *)atomic_load(&qword_25498D3B8);
  if (!v0)
  {
    v0 = (char *)operator new(0x28uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0, "light", 0);
    v2 = v0 + 8;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 8, "mtlx", 0);
    v3 = *(unsigned int **)v0;
    v26 = v3;
    if ((v3 & 7) != 0)
    {
      v4 = (unsigned int *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v5 = __ldxr(v4);
      while (__stxr(v5 + 2, v4));
      if ((v5 & 1) == 0)
        v26 = v4;
    }
    v6 = (unsigned int *)*v2;
    v27 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v27 = v7;
    }
    *((_QWORD *)v0 + 2) = 0;
    *((_QWORD *)v0 + 3) = 0;
    *((_QWORD *)v0 + 4) = 0;
    v24 = (void **)(v0 + 16);
    v25 = 0;
    v9 = operator new(0x10uLL);
    v10 = 0;
    *((_QWORD *)v0 + 2) = v9;
    *((_QWORD *)v0 + 3) = v9;
    *((_QWORD *)v0 + 4) = v9 + 2;
    do
    {
      v11 = (&v26)[v10];
      *v9 = v11;
      if ((v11 & 7) != 0)
      {
        v12 = (unsigned int *)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8);
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 2, v12));
        if ((v13 & 1) == 0)
          *v9 &= 0xFFFFFFFFFFFFFFF8;
      }
      ++v10;
      ++v9;
    }
    while (v10 != 2);
    v14 = (unsigned int **)&v28;
    *((_QWORD *)v0 + 3) = v9;
    do
    {
      v16 = (uint64_t)*--v14;
      v15 = v16;
      if ((v16 & 7) != 0)
      {
        v17 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
        do
          v18 = __ldxr(v17);
        while (__stlxr(v18 - 2, v17));
      }
    }
    while (v14 != &v26);
    while (!__ldaxr(&qword_25498D3B8))
    {
      if (!__stlxr((unint64_t)v0, &qword_25498D3B8))
        return (unint64_t)v0;
    }
    __clrex();
    v24 = (void **)(v0 + 16);
    sub_20BEEB2B8(&v24);
    if ((*v2 & 7) != 0)
    {
      v20 = (unsigned int *)(*v2 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stlxr(v21 - 2, v20));
    }
    if ((*(_QWORD *)v0 & 7) != 0)
    {
      v22 = (unsigned int *)(*(_QWORD *)v0 & 0xFFFFFFFFFFFFFFF8);
      do
        v23 = __ldxr(v22);
      while (__stlxr(v23 - 2, v22));
    }
    operator delete(v0);
    return atomic_load(&qword_25498D3B8);
  }
  return (unint64_t)v0;
}

void sub_20C7D0A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  _QWORD *v14;
  _QWORD *v15;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;

  sub_20BEEB2B8(&a10);
  v17 = &a14;
  while (1)
  {
    v19 = *--v17;
    v18 = v19;
    if ((v19 & 7) != 0)
    {
      v20 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stlxr(v21 - 2, v20));
    }
    if (v17 == (uint64_t *)&a12)
    {
      if ((*v15 & 7) != 0)
      {
        v22 = (unsigned int *)(*v15 & 0xFFFFFFFFFFFFFFF8);
        do
          v23 = __ldxr(v22);
        while (__stlxr(v23 - 2, v22));
      }
      if ((*v14 & 7) != 0)
      {
        v24 = (unsigned int *)(*v14 & 0xFFFFFFFFFFFFFFF8);
        do
          v25 = __ldxr(v24);
        while (__stlxr(v25 - 2, v24));
      }
      operator delete(v14);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t *sub_20C7D0AB0(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)sub_20BDDE084((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    sub_20C7D0B58((uint64_t)a1, a4, (uint64_t)v10);
    sub_20BDDE1B4(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_20C7CC754((uint64_t)v10, 0);
  }
  return v7;
}

char *sub_20C7D0B58@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  char *result;
  __int128 *v8;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x58uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v8 = *a2;
  result = sub_20C7D0BD4(v6 + 32, &v8);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20C7D0BBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C7CC754(v1, 0);
  _Unwind_Resume(a1);
}

char *sub_20C7D0BD4(char *__dst, __int128 **a2)
{
  __int128 *v3;
  __int128 v4;
  unsigned int *v5;
  unsigned int v6;
  int v8;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v9;
  int v10;
  int v11;
  uint64_t v12;

  v3 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)v3, *((_QWORD *)v3 + 1));
  }
  else
  {
    v4 = *v3;
    *((_QWORD *)__dst + 2) = *((_QWORD *)v3 + 2);
    *(_OWORD *)__dst = v4;
  }
  v8 = 1;
  v9 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v10);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v11);
  v12 = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(__dst + 24), (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v8);
  *((_QWORD *)__dst + 6) = 0;
  *((_QWORD *)__dst + 3) = off_24C53D618;
  if ((v12 & 7) != 0)
  {
    v5 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
  sub_20BFD265C(&v10);
  if (v9)
    sub_20C35C614(v9);
  return __dst;
}

void sub_20C7D0CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_20C35C2E0((uint64_t)&a9);
  if (*(char *)(v9 + 23) < 0)
    operator delete(*(void **)v9);
  _Unwind_Resume(a1);
}

void sub_20C7D0CE8(uint64_t *a1@<X0>, pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *a2@<X1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v5 = (std::__shared_weak_count *)a1[1];
  v16 = *a1;
  v17 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_20C7C77E8(a2, &v16, a3);
  if (v5)
  {
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v10 = *a1;
  v11 = (std::__shared_weak_count *)a1[1];
  v16 = v10;
  v17 = v11;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  sub_20C7C5A74(a3, (uint64_t)&v16);
  if (v11)
  {
    v14 = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_20C7D0DF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  sub_20C5BD350(v9);
  _Unwind_Resume(a1);
}

void sub_20C7D0E1C(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v4 = sub_20C67F73C((_QWORD *)(a1 + 96), a2);
  if (!v4)
  {
    v7 = 0;
    goto LABEL_9;
  }
  v5 = v4;
  v6 = *((_QWORD *)v4 + 5);
  v7 = (std::__shared_weak_count *)*((_QWORD *)v5 + 6);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  if (!v6)
  {
LABEL_9:
    *a3 = 0;
    a3[1] = 0;
    if (!v7)
      return;
    goto LABEL_10;
  }
  sub_20C93B318(v6, a3);
  if (!v7)
    return;
LABEL_10:
  v10 = (unint64_t *)&v7->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_20C7D0ED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C7D0EE8@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v8;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v9;
  _QWORD *v10;
  uint64_t *String;
  const char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t *v27;
  const char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v38;
  std::__shared_weak_count *v39;
  uint64_t v40[2];
  _QWORD v41[14];

  v8 = sub_20C7C2AAC((uint64_t **)(a1 + 104), a2);
  if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v8, v9) & 1) == 0)
  {
    sub_20C7C2BA0((uint64_t)v40);
    if (*a2)
    {
      if (sub_20C7C289C(0))
      {
        v10 = (_QWORD *)(*a2 + 48);
        if (*(char *)(*a2 + 71) < 0)
          v10 = (_QWORD *)*v10;
        String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 40));
        if (*((char *)String + 23) >= 0)
          v14 = (uint64_t)String;
        else
          v14 = *String;
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Add node graph: %s at path %s\n", v12, v13, v10, v14);
      }
      v15 = a2[1];
      v38 = *a2;
      v39 = (std::__shared_weak_count *)v15;
      if (v15)
      {
        v16 = (unint64_t *)(v15 + 8);
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      sub_20BDE881C(v41, (uint64_t *)&v38);
      v18 = v39;
      if (v39)
      {
        p_shared_owners = (unint64_t *)&v39->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *a2;
      v22 = (std::__shared_weak_count *)a2[1];
      v38 = v21;
      v39 = v22;
      if (v22)
      {
        v23 = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      sub_20C7C2C0C((uint64_t)v40, a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 40), &v38);
      if (v22)
      {
        v25 = (unint64_t *)&v22->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
    }
    else
    {
      if (sub_20C7C289C(0))
      {
        v27 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 40));
        if (*((char *)v27 + 23) >= 0)
          v30 = (uint64_t)v27;
        else
          v30 = *v27;
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Add implicit node graph at path %s\n", v28, v29, v30);
      }
      v31 = a3[1];
      v38 = *a3;
      v39 = (std::__shared_weak_count *)v31;
      if (v31)
      {
        v32 = (unint64_t *)(v31 + 8);
        do
          v33 = __ldxr(v32);
        while (__stxr(v33 + 1, v32));
      }
      sub_20BDE881C(v41, (uint64_t *)&v38);
      v34 = v39;
      if (v39)
      {
        v35 = (unint64_t *)&v39->__shared_owners_;
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      sub_20C7C3048((uint64_t)v40, a1, (_DWORD *)(a1 + 40));
    }
    sub_20C7C2CF0((uint64_t)v8, v40);
    sub_20C7C2E38((uint64_t)v40);
  }
  return sub_20C7C2EC4(a4, (uint64_t)v8);
}

void sub_20C7D1134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20C7C2E38((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C7D1160(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void **v15;
  unsigned __int8 *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v3 = *(uint64_t **)(a1 + 136);
  for (i = *(uint64_t **)(a1 + 144); v3 != i; v3 += 2)
  {
    v8 = *v3;
    v7 = v3[1];
    v24 = *v3;
    v25 = (std::__shared_weak_count *)v7;
    if (v7)
    {
      v9 = (unint64_t *)(v7 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    sub_20C93B048(v8, &v23);
    if (!(_QWORD)v23)
      goto LABEL_23;
    v11 = (char)a2[23];
    v12 = *((_QWORD *)a2 + 1);
    if (v11 >= 0)
      v12 = a2[23];
    if (v12)
    {
      v13 = *(unsigned __int8 *)(v8 + 47);
      if ((v13 & 0x80u) == 0)
        v14 = *(unsigned __int8 *)(v8 + 47);
      else
        v14 = *(_QWORD *)(v8 + 32);
      if (v14 != v12)
        goto LABEL_23;
      v15 = (const void **)(v8 + 24);
      if (v11 >= 0)
        v16 = a2;
      else
        v16 = *(unsigned __int8 **)a2;
      if ((v13 & 0x80) != 0)
      {
        if (memcmp(*v15, v16, *(_QWORD *)(v8 + 32)))
          goto LABEL_23;
      }
      else if (*(_BYTE *)(v8 + 47))
      {
        while (*(unsigned __int8 *)v15 == *v16)
        {
          v15 = (const void **)((char *)v15 + 1);
          ++v16;
          if (!--v13)
            goto LABEL_22;
        }
        goto LABEL_23;
      }
    }
LABEL_22:
    sub_20BDEA72C((char **)a3, &v23);
LABEL_23:
    v17 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
    if (*((_QWORD *)&v23 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v20 = v25;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
}

void sub_20C7D12E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a11);
  sub_20BDE9EB0((void ***)&a11);
  _Unwind_Resume(a1);
}

char *sub_20C7D1314(char **a1, __int128 *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  int64x2_t v26;
  char *v27;
  uint64_t v29;
  int64x2_t v30;
  char *v31;
  uint64_t v32;

  v6 = (unint64_t)a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v12 = (v7 - *a1) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      sub_20BDDF694();
    v14 = v5 - (_QWORD)*a1;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    v32 = v4;
    v16 = (char *)sub_20BDEA2F0(v4, v15);
    v18 = &v16[16 * v12];
    v19 = *a2;
    *(_OWORD *)v18 = *a2;
    if (*((_QWORD *)&v19 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v23 = *a1;
    v22 = a1[1];
    if (v22 == *a1)
    {
      v26 = vdupq_n_s64((unint64_t)v22);
      v24 = &v16[16 * v12];
    }
    else
    {
      v24 = &v16[16 * v12];
      do
      {
        v25 = *((_OWORD *)v22 - 1);
        v22 -= 16;
        *((_OWORD *)v24 - 1) = v25;
        v24 -= 16;
        *(_QWORD *)v22 = 0;
        *((_QWORD *)v22 + 1) = 0;
      }
      while (v22 != v23);
      v26 = *(int64x2_t *)a1;
    }
    v11 = v18 + 16;
    *a1 = v24;
    a1[1] = v18 + 16;
    v30 = v26;
    v27 = a1[2];
    a1[2] = &v16[16 * v17];
    v31 = v27;
    v29 = v26.i64[0];
    sub_20BDEA324((uint64_t)&v29);
  }
  else
  {
    *(_QWORD *)v7 = *(_QWORD *)a2;
    v8 = *((_QWORD *)a2 + 1);
    *((_QWORD *)v7 + 1) = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = v7 + 16;
  }
  a1[1] = v11;
  return v11 - 16;
}

uint64_t *sub_20C7D1458(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)sub_20BDDE084((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    sub_20C7D1500((uint64_t)a1, a4, (uint64_t)v10);
    sub_20BDDE1B4(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_20BE7B260((uint64_t)v10, 0);
  }
  return v7;
}

_BYTE *sub_20C7D1500@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _BYTE *result;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x48uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = v6 + 4;
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    result = sub_20BDDBFAC(result, *(void **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)result = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20C7D1578(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BE7B260(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C7D1590(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)sub_20BDDE084((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    sub_20C7D1638((uint64_t)a1, a4, (uint64_t)v10);
    sub_20BDDE1B4(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_20C7D16CC((uint64_t)v10, 0);
  }
  return v7;
}

_BYTE *sub_20C7D1638@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _BYTE *result;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = v6 + 4;
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    result = sub_20BDDBFAC(result, *(void **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)result = v9;
  }
  v6[8] = 0;
  v6[9] = 0;
  v6[7] = v6 + 8;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20C7D16B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C7D16CC(v1, 0);
  _Unwind_Resume(a1);
}

void sub_20C7D16CC(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C7C1FE4((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t *sub_20C7D1710(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)sub_20BDDE084((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    sub_20C7D17B8((uint64_t)a1, a4, (uint64_t)v10);
    sub_20BDDE1B4(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_20C7D184C((uint64_t)v10, 0);
  }
  return v7;
}

_BYTE *sub_20C7D17B8@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _BYTE *result;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = v6 + 4;
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    result = sub_20BDDBFAC(result, *(void **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)result = v9;
  }
  v6[8] = 0;
  v6[9] = 0;
  v6[7] = v6 + 8;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20C7D1834(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C7D184C(v1, 0);
  _Unwind_Resume(a1);
}

void sub_20C7D184C(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C7C1F5C((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void sub_20C7D1890(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void **v15;
  unsigned __int8 *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v3 = *(uint64_t **)(a1 + 136);
  for (i = *(uint64_t **)(a1 + 144); v3 != i; v3 += 2)
  {
    v8 = *v3;
    v7 = v3[1];
    v24 = *v3;
    v25 = (std::__shared_weak_count *)v7;
    if (v7)
    {
      v9 = (unint64_t *)(v7 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    sub_20C93AB5C(v8, &v23);
    if (!(_QWORD)v23)
      goto LABEL_23;
    v11 = (char)a2[23];
    v12 = *((_QWORD *)a2 + 1);
    if (v11 >= 0)
      v12 = a2[23];
    if (v12)
    {
      v13 = *(unsigned __int8 *)(v8 + 47);
      if ((v13 & 0x80u) == 0)
        v14 = *(unsigned __int8 *)(v8 + 47);
      else
        v14 = *(_QWORD *)(v8 + 32);
      if (v14 != v12)
        goto LABEL_23;
      v15 = (const void **)(v8 + 24);
      if (v11 >= 0)
        v16 = a2;
      else
        v16 = *(unsigned __int8 **)a2;
      if ((v13 & 0x80) != 0)
      {
        if (memcmp(*v15, v16, *(_QWORD *)(v8 + 32)))
          goto LABEL_23;
      }
      else if (*(_BYTE *)(v8 + 47))
      {
        while (*(unsigned __int8 *)v15 == *v16)
        {
          v15 = (const void **)((char *)v15 + 1);
          ++v16;
          if (!--v13)
            goto LABEL_22;
        }
        goto LABEL_23;
      }
    }
LABEL_22:
    sub_20BDEA72C((char **)a3, &v23);
LABEL_23:
    v17 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
    if (*((_QWORD *)&v23 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v20 = v25;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
}

void sub_20C7D1A14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a11);
  sub_20BDE9EB0((void ***)&a11);
  _Unwind_Resume(a1);
}

void sub_20C7D1A44(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t **a3@<X2>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a4@<X8>)
{
  char *v8;
  char v9;
  _QWORD *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v15;
  unsigned int *v16;
  unsigned int v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v24;
  unint64_t *v25;
  unint64_t v26;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v27;
  pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *v28;
  uint64_t *v29;
  unsigned int *v30;
  unsigned int v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 *v54;
  const void **v55;
  const void **v56;
  unsigned int *v57;
  unsigned int v58;
  const void **v59;
  const void **v60;
  unsigned int *v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int v67;
  void *__p[2];
  char v69;
  std::string *v70;
  std::__shared_weak_count *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  std::string *__str;
  uint64_t v75;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v76;
  int v77;
  int v78;
  uint64_t v79;
  char *v80;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v81;
  uint64_t v82;
  unint64_t v83;
  char v84;

  sub_20C215CE8(a3, a2, (uint64_t *)a2);
  if ((v9 & 1) == 0)
  {
    v80 = "usdMtlx/reader.cpp";
    v81 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"_AddCollection";
    v82 = 1762;
    v83 = (unint64_t)"UsdCollectionAPI pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_Context::_AddColl"
                            "ection(const mx::ConstCollectionPtr &, std::set<mx::ConstCollectionPtr> *)";
    v84 = 0;
    v10 = (_QWORD *)(*a2 + 48);
    if (*(char *)(*a2 + 71) < 0)
      v10 = (_QWORD *)*v10;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v80, (pxrInternal__aapl__pxrReserved__ *)"Found a collection cycle at '%s'", v8, v10);
    LODWORD(v80) = 1;
    v81 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v82);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v82 + 1);
    v83 = 0;
    v75 = 0;
    sub_20C37A850(a4, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v80, &v75);
    *(_QWORD *)a4 = off_24C537740;
    if ((v75 & 7) != 0)
    {
      v11 = (unsigned int *)(v75 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
    if ((v83 & 7) != 0)
    {
      v13 = (unsigned int *)(v83 & 0xFFFFFFFFFFFFFFF8);
      do
        v14 = __ldxr(v13);
      while (__stlxr(v14 - 2, v13));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v82 + 1);
    goto LABEL_115;
  }
  v15 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08((uint64_t *)a1);
  v75 = 0;
  pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v15, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (void **)&v75, (uint64_t)&v80);
  if ((v75 & 7) != 0)
  {
    v16 = (unsigned int *)(v75 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stlxr(v17 - 2, v16));
  }
  v18 = *a2;
  v19 = (std::__shared_weak_count *)a2[1];
  v72 = *a2;
  v73 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
  }
  if (v18)
    sub_20C7C3084(v18 + 48, (uint64_t)&v70);
  else
    v70 = 0;
  pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::Apply((pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)&v80, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v70, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v75);
  __p[0] = (void *)(*a2 + 48);
  v22 = sub_20C7D2638((uint64_t **)(a1 + 152), (const void **)__p[0], (uint64_t)&unk_20CAC184C, (__int128 **)__p);
  v23 = v22;
  v24 = v76;
  if (v76)
  {
    v25 = (unint64_t *)((char *)v76 + 48);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  v27 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v22[8];
  v23[8] = (uint64_t)v24;
  if (v27)
    sub_20C35C614(v27);
  v28 = (pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)(v23 + 7);
  sub_20C01A074((int *)v23 + 18, &v77);
  sub_20C01A0C8((int *)v23 + 19, &v78);
  v29 = v23 + 10;
  sub_20BF32220(v29, &v79);
  pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::~UsdCollectionAPI((pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)&v75);
  if ((v70 & 7) != 0)
  {
    v30 = (unsigned int *)((unint64_t)v70 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
    v19 = v73;
  }
  if (v19)
  {
    v32 = (unint64_t *)&v19->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::CreateIncludesRel(v28, (pxrInternal__aapl__pxrReserved__::UsdRelationship *)&v75);
  v34 = (std::__shared_weak_count *)a2[1];
  v72 = *a2;
  v73 = v34;
  if (v34)
  {
    v35 = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
  sub_20C7C5A74((uint64_t)&v75, (uint64_t)&v72);
  if (v34)
  {
    v37 = (unint64_t *)&v34->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  if ((v79 & 7) != 0)
  {
    v39 = (unsigned int *)(v79 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stlxr(v40 - 2, v39));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v78);
  sub_20BFD265C(&v77);
  if (v76)
    sub_20C35C614(v76);
  sub_20C7C0F74();
  sub_20C7C0FDC((__int128 **)&__str, (uint64_t)a2, (unsigned __int8 *)&qword_25498D0A0);
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__str->__r_.__value_.__l.__size_)
      goto LABEL_78;
  }
  else if (!*((_BYTE *)&__str->__r_.__value_.__s + 23))
  {
    goto LABEL_78;
  }
  pxrInternal__aapl__pxrReserved__::UsdMtlxSplitStringArray(__str, (uint64_t *)&v72);
  v41 = (unsigned __int8 *)v72;
  v42 = (unsigned __int8 *)v73;
  if ((std::__shared_weak_count *)v72 != v73)
  {
    do
    {
      sub_20C93BF6C(*a2, &v75);
      sub_20C7D28F8(v75, v41, __p);
      v43 = (std::__shared_weak_count *)v76;
      if (v76)
      {
        v44 = (unint64_t *)((char *)v76 + 8);
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      if (__p[0])
      {
        v70 = (std::string *)__p[0];
        v71 = (std::__shared_weak_count *)__p[1];
        if (__p[1])
        {
          v46 = (unint64_t *)((char *)__p[1] + 8);
          do
            v47 = __ldxr(v46);
          while (__stxr(v47 + 1, v46));
        }
        sub_20C7D1A44(&v75, a1, &v70, a3);
        v48 = v71;
        if (v71)
        {
          v49 = (unint64_t *)&v71->__shared_owners_;
          do
            v50 = __ldaxr(v49);
          while (__stlxr(v50 - 1, v49));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
        }
        if (v76 && (*((_BYTE *)v76 + 57) & 8) == 0 && (*(unsigned int (**)(uint64_t *))(v75 + 32))(&v75))
        {
          pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetCollectionPath((pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)&v75, (int *)&v70);
          pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::IncludePath(v28, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v70);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v70 + 1);
          sub_20BFD265C(&v70);
        }
        pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::~UsdCollectionAPI((pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)&v75);
      }
      v51 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v52 = (unint64_t *)((char *)__p[1] + 8);
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v41 += 24;
    }
    while (v41 != v42);
  }
  v75 = (uint64_t)&v72;
  sub_20BDE5038((void ***)&v75);
LABEL_78:
  v54 = sub_20C7D238C(*a2);
  sub_20C7C0F74();
  sub_20C7C0FDC((__int128 **)&v70, (uint64_t)a2, (unsigned __int8 *)&qword_25498D088);
  if (SHIBYTE(v70->__r_.__value_.__r.__words[2]) < 0)
  {
    if (!v70->__r_.__value_.__l.__size_)
      goto LABEL_92;
  }
  else if (!*((_BYTE *)&v70->__r_.__value_.__s + 23))
  {
    goto LABEL_92;
  }
  pxrInternal__aapl__pxrReserved__::UsdMtlxSplitStringArray(v70, (uint64_t *)&v72);
  v55 = (const void **)v72;
  v56 = (const void **)&v73->__vftable;
  if ((std::__shared_weak_count *)v72 != v73)
  {
    do
    {
      pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::CreateIncludesRel(v28, (pxrInternal__aapl__pxrReserved__::UsdRelationship *)&v75);
      pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier((const void **)v54, v55, (uint64_t)__p);
      sub_20C7D24B8(a1, (pxrInternal__aapl__pxrReserved__::UsdRelationship *)&v75, (__int128 *)__p);
      if (v69 < 0)
        operator delete(__p[0]);
      if ((v79 & 7) != 0)
      {
        v57 = (unsigned int *)(v79 & 0xFFFFFFFFFFFFFFF8);
        do
          v58 = __ldxr(v57);
        while (__stlxr(v58 - 2, v57));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v78);
      sub_20BFD265C(&v77);
      if (v76)
        sub_20C35C614(v76);
      v55 += 3;
    }
    while (v55 != v56);
  }
  v75 = (uint64_t)&v72;
  sub_20BDE5038((void ***)&v75);
LABEL_92:
  sub_20C7C0F74();
  sub_20C7C0FDC((__int128 **)&v70, (uint64_t)a2, (unsigned __int8 *)&qword_25498D040);
  if (SHIBYTE(v70->__r_.__value_.__r.__words[2]) < 0)
  {
    if (!v70->__r_.__value_.__l.__size_)
      goto LABEL_106;
LABEL_96:
    pxrInternal__aapl__pxrReserved__::UsdMtlxSplitStringArray(v70, (uint64_t *)&v72);
    v59 = (const void **)v72;
    v60 = (const void **)&v73->__vftable;
    if ((std::__shared_weak_count *)v72 != v73)
    {
      do
      {
        pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::CreateExcludesRel(v28, (pxrInternal__aapl__pxrReserved__::UsdRelationship *)&v75);
        pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier((const void **)v54, v59, (uint64_t)__p);
        sub_20C7D24B8(a1, (pxrInternal__aapl__pxrReserved__::UsdRelationship *)&v75, (__int128 *)__p);
        if (v69 < 0)
          operator delete(__p[0]);
        if ((v79 & 7) != 0)
        {
          v61 = (unsigned int *)(v79 & 0xFFFFFFFFFFFFFFF8);
          do
            v62 = __ldxr(v61);
          while (__stlxr(v62 - 2, v61));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v78);
        sub_20BFD265C(&v77);
        if (v76)
          sub_20C35C614(v76);
        v59 += 3;
      }
      while (v59 != v60);
    }
    v75 = (uint64_t)&v72;
    sub_20BDE5038((void ***)&v75);
    goto LABEL_106;
  }
  if (*((_BYTE *)&v70->__r_.__value_.__s + 23))
    goto LABEL_96;
LABEL_106:
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a4, v28);
  *(_QWORD *)a4 = &unk_24C537498;
  v63 = *v29;
  *((_QWORD *)a4 + 3) = *v29;
  if ((v63 & 7) != 0)
  {
    v64 = (unsigned int *)(v63 & 0xFFFFFFFFFFFFFFF8);
    do
      v65 = __ldxr(v64);
    while (__stxr(v65 + 2, v64));
    if ((v65 & 1) == 0)
      *((_QWORD *)a4 + 3) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)a4 = off_24C537740;
  if ((v83 & 7) != 0)
  {
    v66 = (unsigned int *)(v83 & 0xFFFFFFFFFFFFFFF8);
    do
      v67 = __ldxr(v66);
    while (__stlxr(v67 - 2, v66));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v82 + 1);
LABEL_115:
  sub_20BFD265C(&v82);
  if (v81)
    sub_20C35C614(v81);
}

void sub_20C7D21F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_20C35C2E0((uint64_t)&a26);
  _Unwind_Resume(a1);
}

__int128 *sub_20C7D238C(uint64_t a1)
{
  __int128 *v1;
  std::__shared_weak_count *shared_weak_owners;
  _BOOL4 v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  int v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;

  sub_20BDE70B8(&v13, (_QWORD *)(a1 + 8));
  shared_weak_owners = v13;
  if (v13)
  {
    while (1)
    {
      v3 = sub_20C7D29C4((uint64_t)shared_weak_owners);
      v4 = (uint64_t)v13;
      if (v3)
        break;
      shared_weak_owners = (std::__shared_weak_count *)v13[9].__shared_weak_owners_;
      if (shared_weak_owners)
      {
        shared_weak_owners = std::__shared_weak_count::lock(shared_weak_owners);
        v5 = shared_weak_owners;
        if (shared_weak_owners)
          shared_weak_owners = *(std::__shared_weak_count **)(v4 + 224);
      }
      else
      {
        v5 = 0;
      }
      v1 = (__int128 *)v14;
      v13 = shared_weak_owners;
      v14 = v5;
      if (v1)
      {
        v6 = (unint64_t *)v1 + 1;
        do
          v7 = __ldaxr(v6);
        while (__stlxr(v7 - 1, v6));
        if (!v7)
        {
          (*(void (**)(__int128 *))(*(_QWORD *)v1 + 16))(v1);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v1);
        }
        shared_weak_owners = v13;
      }
      if (!shared_weak_owners)
        goto LABEL_14;
    }
    v1 = sub_20C7D2A40((uint64_t)v13);
    v8 = 0;
  }
  else
  {
LABEL_14:
    v8 = 1;
  }
  v9 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      if (!v8)
        return v1;
      return sub_20C957390();
    }
  }
  if (v8)
    return sub_20C957390();
  return v1;
}

void sub_20C7D24A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

void sub_20C7D24B8(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdRelationship *a2, __int128 *a3)
{
  __int128 *v3;
  pxrInternal__aapl__pxrReserved__::SdfPath *v6;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v7;
  const char *Text;
  char *v9;
  uint64_t v10[4];
  char v11;
  int v12;
  int v13;
  void *v14[2];
  uint64_t v15;

  v3 = a3;
  v14[0] = 0;
  v14[1] = 0;
  v15 = 0;
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsValidPathString(a3, (uint64_t)v14))
  {
    v6 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(&v12, v3);
    v7 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v6);
    pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(v10, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v12, v7, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), 1);
    pxrInternal__aapl__pxrReserved__::UsdRelationship::AddTarget(a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)v10, 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v10 + 1);
    sub_20BFD265C(v10);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  }
  else
  {
    v10[0] = (uint64_t)"usdMtlx/reader.cpp";
    v10[1] = (uint64_t)"_AddGeom";
    v10[2] = 1865;
    v10[3] = (uint64_t)"void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_Context::_AddGeom(const UsdRelation"
                      "ship &, const std::string &) const";
    v11 = 0;
    if (*((char *)v3 + 23) < 0)
      v3 = *(__int128 **)v3;
    sub_20C348EEC((uint64_t)a2, &v12);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v12);
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v10, (pxrInternal__aapl__pxrReserved__ *)"Ignored non-path '%s' on collection relationship <%s>", v9, v3, Text);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  }
  sub_20BFD265C(&v12);
  if (SHIBYTE(v15) < 0)
    operator delete(v14[0]);
}

void sub_20C7D25E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 - 33) < 0)
    operator delete(*(void **)(v17 - 56));
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20C7D2638(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)sub_20BDDE084((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    sub_20C7D26E0((uint64_t)a1, a4, (uint64_t)v10);
    sub_20BDDE1B4(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_20C7D28B4((uint64_t)v10, 0);
  }
  return v7;
}

char *sub_20C7D26E0@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  char *result;
  __int128 *v8;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x58uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v8 = *a2;
  result = sub_20C7D275C(v6 + 32, &v8);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20C7D2744(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C7D28B4(v1, 0);
  _Unwind_Resume(a1);
}

char *sub_20C7D275C(char *__dst, __int128 **a2)
{
  __int128 *v3;
  __int128 v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v10;
  int v11;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v12;
  int v13;
  int v14;
  uint64_t v15;

  v3 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)v3, *((_QWORD *)v3 + 1));
  }
  else
  {
    v4 = *v3;
    *((_QWORD *)__dst + 2) = *((_QWORD *)v3 + 2);
    *(_OWORD *)__dst = v4;
  }
  v11 = 1;
  v12 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v13);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v14);
  v15 = 0;
  v10 = 0;
  *(_QWORD *)sub_20C37A850((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(__dst + 24), (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v11, &v10) = off_24C537740;
  if ((v10 & 7) != 0)
  {
    v5 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  if ((v15 & 7) != 0)
  {
    v7 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
  sub_20BFD265C(&v13);
  if (v12)
    sub_20C35C614(v12);
  return __dst;
}

void sub_20C7D2870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  unsigned int *v5;
  unsigned int v6;
  va_list va;

  va_start(va, a3);
  if ((a3 & 7) != 0)
  {
    v5 = (unsigned int *)(a3 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  sub_20C35C2E0((uint64_t)va);
  if (*(char *)(v3 + 23) < 0)
    operator delete(*(void **)v3);
  _Unwind_Resume(a1);
}

void sub_20C7D28B4(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C7C1D14((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void sub_20C7D28F8(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v4 = sub_20C67F73C((_QWORD *)(a1 + 96), a2);
  if (!v4)
  {
    v7 = 0;
    goto LABEL_9;
  }
  v5 = v4;
  v6 = *((_QWORD *)v4 + 5);
  v7 = (std::__shared_weak_count *)*((_QWORD *)v5 + 6);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  if (!v6)
  {
LABEL_9:
    *a3 = 0;
    a3[1] = 0;
    if (!v7)
      return;
    goto LABEL_10;
  }
  sub_20C93AB5C(v6, a3);
  if (!v7)
    return;
LABEL_10:
  v10 = (unint64_t *)&v7->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_20C7D29B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_20C7D29C4(uint64_t a1)
{
  unsigned __int8 *v2;
  void *__p[2];
  char v5;

  sub_20BDDC0E4(__p, off_25473DCF8[0]);
  v2 = sub_20C67F73C((_QWORD *)(a1 + 160), (unsigned __int8 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  return v2 != 0;
}

void sub_20C7D2A24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__int128 *sub_20C7D2A40(uint64_t a1)
{
  unsigned __int8 *v2;
  __int128 *v3;
  void *__p[2];
  char v6;

  sub_20BDDC0E4(__p, off_25473DCF8[0]);
  v2 = sub_20C67F73C((_QWORD *)(a1 + 160), (unsigned __int8 *)__p);
  if (v2)
    v3 = (__int128 *)(v2 + 40);
  else
    v3 = sub_20C957390();
  if (v6 < 0)
    operator delete(__p[0]);
  return v3;
}

void sub_20C7D2AAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20C7D2AC8(uint64_t **a1, const void **a2, __int128 *a3, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a4)
{
  uint64_t **v7;
  uint64_t *v8;
  uint64_t **v9;
  uint64_t *v11[3];
  uint64_t v12;

  v7 = (uint64_t **)sub_20BDDE084((uint64_t)a1, &v12, a2);
  v8 = *v7;
  if (!*v7)
  {
    v9 = v7;
    sub_20C7D2B68((uint64_t)a1, a3, a4, (uint64_t)v11);
    sub_20BDDE1B4(a1, v12, v9, v11[0]);
    v8 = v11[0];
    v11[0] = 0;
    sub_20C7D28B4((uint64_t)v11, 0);
  }
  return v8;
}

uint64_t sub_20C7D2B68@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  void *v8;
  uint64_t result;

  v7 = a1 + 8;
  v8 = operator new(0x58uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  result = sub_20C7D2BD8((uint64_t)v8 + 32, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_20C7D2BC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C7D28B4(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20C7D2BD8(uint64_t a1, __int128 *a2, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3)
{
  __int128 v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;

  v5 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v5;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(a1 + 24), a3);
  *(_QWORD *)(a1 + 24) = &unk_24C537498;
  v6 = *((_QWORD *)a3 + 3);
  *(_QWORD *)(a1 + 48) = v6;
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    if ((v8 & 1) == 0)
      *(_QWORD *)(a1 + 48) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)(a1 + 24) = off_24C537740;
  return a1;
}

void sub_20C7D2C70(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20C7D2C8C(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v11;

  v6 = (uint64_t **)(a1 + 8);
  v5 = *(uint64_t **)(a1 + 8);
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = (uint64_t **)(a1 + 8);
LABEL_10:
    sub_20C7D2D44(a1, a4, (uint64_t)&v11);
    sub_20BDDE1B4((uint64_t **)a1, (uint64_t)v8, v6, v11);
    return v11;
  }
  return (uint64_t *)v8;
}

_QWORD *sub_20C7D2D44@<X0>(uint64_t a1@<X0>, _QWORD **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  _QWORD *v8;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v8 = *a2;
  result = sub_20C7D2DD8(v6 + 4, &v8);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20C7D2DBC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  char *v2;
  uint64_t v3;

  *v1 = 0;
  sub_20C7D2F28(v3, v2);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C7D2DD8(_QWORD *a1, _QWORD **a2)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v12;
  int v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  int v15;
  int v16;
  uint64_t v17;

  v3 = *a2;
  *a1 = **a2;
  v4 = v3[1];
  a1[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v13 = 1;
  v14 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v16);
  v17 = 0;
  v12 = 0;
  *(_QWORD *)sub_20C37A850((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(a1 + 2), (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13, &v12) = off_24C537740;
  if ((v12 & 7) != 0)
  {
    v7 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  if ((v17 & 7) != 0)
  {
    v9 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
  return a1;
}

void sub_20C7D2EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v3;
  unsigned int *v5;
  unsigned int v6;
  va_list va;

  va_start(va, a3);
  if ((a3 & 7) != 0)
  {
    v5 = (unsigned int *)(a3 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  sub_20C35C2E0((uint64_t)va);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v3);
  _Unwind_Resume(a1);
}

void sub_20C7D2F28(uint64_t a1, char *__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::~UsdCollectionAPI((pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)(__p + 48));
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(__p + 32));
  }
  if (__p)
    operator delete(__p);
}

uint64_t sub_20C7D2F74(uint64_t result, const void ***a2)
{
  const void **v2;
  const void **v3;
  uint64_t v4;
  uint64_t **v5;
  uint64_t *v6;
  char v7;
  unint64_t v8;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    v4 = result;
    v5 = (uint64_t **)(result + 96);
    v6 = (uint64_t *)(result + 72);
    do
    {
      result = (uint64_t)sub_20BE74FC0(v5, v2, (uint64_t)v2);
      if ((v7 & 1) != 0)
      {
        v8 = *(_QWORD *)(v4 + 80);
        if (v8 >= *(_QWORD *)(v4 + 88))
        {
          result = sub_20C7D3444(v6, (__int128 *)v2);
        }
        else
        {
          sub_20C107F98(*(char **)(v4 + 80), (__int128 *)v2);
          result = v8 + 48;
          *(_QWORD *)(v4 + 80) = v8 + 48;
        }
        *(_QWORD *)(v4 + 80) = result;
      }
      v2 += 6;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_20C7D3008(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 80) = v2;
  _Unwind_Resume(a1);
}

void sub_20C7D3010(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  __int128 *v7;
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const void **v12;
  uint64_t *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t **v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char **v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t i;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  __int128 *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char **v42;
  char **v43;
  char **v44;
  char **v45;
  uint64_t *v46;
  const void **v47;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_20C7C0F74();
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v6 = *a2;
  v7 = *(__int128 **)(*a2 + 136);
  v8 = *(__int128 **)(v6 + 144);
  if (v7 == v8)
  {
    v14 = 0;
    goto LABEL_24;
  }
  do
  {
    v9 = *(unsigned __int8 *)(*(_QWORD *)v7 + 47);
    if ((v9 & 0x80u) == 0)
      v10 = *(unsigned __int8 *)(*(_QWORD *)v7 + 47);
    else
      v10 = *(_QWORD *)(*(_QWORD *)v7 + 32);
    v11 = byte_25498D2F7;
    if (byte_25498D2F7 < 0)
      v11 = qword_25498D2E8;
    if (v10 == v11)
    {
      v12 = (const void **)(*(_QWORD *)v7 + 24);
      if (byte_25498D2F7 >= 0)
        v13 = &qword_25498D2E0;
      else
        v13 = (uint64_t *)qword_25498D2E0;
      if ((v9 & 0x80) != 0)
      {
        if (memcmp(*v12, v13, *(_QWORD *)(*(_QWORD *)v7 + 32)))
          goto LABEL_18;
LABEL_17:
        sub_20C7D1314(&v39, v7);
        goto LABEL_18;
      }
      if (!*(_BYTE *)(*(_QWORD *)v7 + 47))
        goto LABEL_17;
      while (*(unsigned __int8 *)v12 == *(unsigned __int8 *)v13)
      {
        v12 = (const void **)((char *)v12 + 1);
        v13 = (uint64_t *)((char *)v13 + 1);
        if (!--v9)
          goto LABEL_17;
      }
    }
LABEL_18:
    ++v7;
  }
  while (v7 != v8);
  v14 = v39;
  if (v39 != v40)
  {
    v15 = v40 - 16;
    if (v40 - 16 > v39)
    {
      do
      {
        v16 = *(_QWORD *)v14;
        *(_QWORD *)v14 = *(_QWORD *)v15;
        *(_QWORD *)v15 = v16;
        v17 = *((_QWORD *)v14 + 1);
        *((_QWORD *)v14 + 1) = *((_QWORD *)v15 + 1);
        *((_QWORD *)v15 + 1) = v17;
        v14 += 16;
        v15 -= 16;
      }
      while (v14 < v15);
      v14 = v39;
    }
  }
LABEL_24:
  v18 = v40;
  if (v14 != v40)
  {
    v19 = (uint64_t **)(a1 + 96);
    do
    {
      sub_20C7C0F74();
      sub_20C7C0FDC((__int128 **)&v47, (uint64_t)v14, (unsigned __int8 *)&qword_25498D2F8);
      sub_20C7C0F74();
      sub_20C7C0FDC(&v38, (uint64_t)v14, (unsigned __int8 *)&qword_25498D2C8);
      sub_20BE74FC0(v19, v47, (uint64_t)v47);
      if ((v20 & 1) != 0)
      {
        v22 = a3[1];
        v21 = a3[2];
        if (v22 >= v21)
        {
          v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *a3) >> 4);
          v25 = v24 + 1;
          if (v24 + 1 > 0x555555555555555)
            sub_20BDDF694();
          v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - *a3) >> 4);
          if (2 * v26 > v25)
            v25 = 2 * v26;
          if (v26 >= 0x2AAAAAAAAAAAAAALL)
            v27 = 0x555555555555555;
          else
            v27 = v25;
          v46 = a3 + 2;
          if (v27)
            v28 = (char **)sub_20BE6D0B4((uint64_t)(a3 + 2), v27);
          else
            v28 = 0;
          v42 = v28;
          v43 = &v28[6 * v24];
          v44 = v43;
          v45 = &v28[6 * v27];
          sub_20C7D3548(v43, (__int128 **)&v47, &v38);
          v44 += 6;
          sub_20BE94AD4(a3, &v42);
          v23 = a3[1];
          sub_20BE94C80((void **)&v42);
        }
        else
        {
          sub_20C7D3548((_QWORD *)a3[1], (__int128 **)&v47, &v38);
          v23 = v22 + 48;
          a3[1] = v23;
        }
        a3[1] = v23;
      }
      v14 += 16;
    }
    while (v14 != v18);
  }
  v29 = *a3;
  v30 = a3[1];
  if (*a3 != v30)
  {
    for (i = v30 - 48; v29 < i; i -= 48)
    {
      v32 = *(_QWORD *)(v29 + 16);
      v33 = *(_OWORD *)v29;
      v34 = *(_QWORD *)(i + 16);
      *(_OWORD *)v29 = *(_OWORD *)i;
      *(_QWORD *)(v29 + 16) = v34;
      *(_OWORD *)i = v33;
      *(_QWORD *)(i + 16) = v32;
      v35 = *(_QWORD *)(v29 + 40);
      v36 = *(_OWORD *)(v29 + 24);
      v37 = *(_QWORD *)(i + 40);
      *(_OWORD *)(v29 + 24) = *(_OWORD *)(i + 24);
      *(_QWORD *)(v29 + 40) = v37;
      *(_OWORD *)(i + 24) = v36;
      *(_QWORD *)(i + 40) = v35;
      v29 += 48;
    }
  }
  v42 = &v39;
  sub_20BDE9EB0((void ***)&v42);
}

void sub_20C7D3348(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BE93030((void ***)va);
  _Unwind_Resume(a1);
}

void sub_20C7D33B4(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  __int128 *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = sub_20C7D3764(a1);
  v8 = 0;
  v9 = 0;
  sub_20C7D35DC(a1, (std::string *)v4, &v8, a2);
  v5 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_20C7D3430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C7D3444(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  void *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x2AAAAAAAAAAAAAALL)
    v9 = 0x555555555555555;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_20BE6D0B4(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[48 * v4];
  v16 = &v10[48 * v9];
  sub_20C107F98(v14, a2);
  v15 = v14 + 48;
  sub_20BE94AD4(a1, &v13);
  v11 = a1[1];
  sub_20BE94C80(&v13);
  return v11;
}

void sub_20C7D3534(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BE94C80((void **)va);
  _Unwind_Resume(a1);
}

_BYTE *sub_20C7D3548(_QWORD *__dst, __int128 **a2, __int128 **a3)
{
  __int128 *v5;
  __int128 v6;
  _BYTE *result;
  __int128 *v8;
  __int128 v9;

  v5 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)v5, *((_QWORD *)v5 + 1));
  }
  else
  {
    v6 = *v5;
    __dst[2] = *((_QWORD *)v5 + 2);
    *(_OWORD *)__dst = v6;
  }
  result = __dst + 3;
  v8 = *a3;
  if (*((char *)*a3 + 23) < 0)
    return sub_20BDDBFAC(result, *(void **)v8, *((_QWORD *)v8 + 1));
  v9 = *v8;
  __dst[5] = *((_QWORD *)v8 + 2);
  *(_OWORD *)result = v9;
  return result;
}

void sub_20C7D35C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_20C7D35DC(uint64_t a1@<X0>, std::string *a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  void *__p[2];
  char v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  v7 = *a3;
  if (*a3)
  {
    v8 = a3[1];
    v24 = *a3;
    v25 = (std::__shared_weak_count *)v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
  }
  else
  {
    sub_20C93D9DC(a1, &v24);
    v7 = v24;
  }
  sub_20C7D38B8(a1, a2, (uint64_t)__p);
  sub_20C7D37EC(v7, (unsigned __int8 *)__p, &v22);
  if (v21 < 0)
    operator delete(__p[0]);
  if (v22)
  {
    v11 = v23;
    *a4 = v22;
    a4[1] = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
  }
  else
  {
    sub_20C7D37EC(v24, (unsigned __int8 *)a2, a4);
  }
  v14 = v23;
  if (v23)
  {
    v15 = (unint64_t *)&v23->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = v25;
  if (v25)
  {
    v18 = (unint64_t *)&v25->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_20C7D3728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a16);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a18);
  _Unwind_Resume(a1);
}

__int128 *sub_20C7D3764(uint64_t a1)
{
  unsigned __int8 *v2;
  __int128 *v3;
  void *__p[2];
  char v6;

  sub_20BDDC0E4(__p, off_25473DD08[0]);
  v2 = sub_20C67F73C((_QWORD *)(a1 + 160), (unsigned __int8 *)__p);
  if (v2)
    v3 = (__int128 *)(v2 + 40);
  else
    v3 = sub_20C957390();
  if (v6 < 0)
    operator delete(__p[0]);
  return v3;
}

void sub_20C7D37D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C7D37EC(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v4 = sub_20C67F73C((_QWORD *)(a1 + 96), a2);
  if (!v4)
  {
    v7 = 0;
    goto LABEL_9;
  }
  v5 = v4;
  v6 = *((_QWORD *)v4 + 5);
  v7 = (std::__shared_weak_count *)*((_QWORD *)v5 + 6);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  if (!v6)
  {
LABEL_9:
    *a3 = 0;
    a3[1] = 0;
    if (!v7)
      return;
    goto LABEL_10;
  }
  sub_20C93A740(v6, a3);
  if (!v7)
    return;
LABEL_10:
  v10 = (unint64_t *)&v7->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_20C7D38A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

void sub_20C7D38B8(uint64_t a1@<X0>, std::string *a2@<X1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *shared_weak_owners;
  __int128 *v6;
  char *v7;
  size_t v8;
  char v9;
  size_t v10;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  int v17;
  int v18;
  unsigned __int8 *v19;
  std::string::size_type size;
  size_t v21;
  BOOL v22;
  char *v23;
  size_t v24;
  size_t v25;
  std::string *v26;
  char *v27;
  int v28;
  const std::string::value_type *v29;
  std::string::size_type v30;
  std::string *v31;
  __int128 v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  size_t v38;
  char *v39;
  std::string::size_type v40;
  uint64_t v41;
  int v42;
  char *v43;
  uint64_t v44;
  std::string *p_p;
  int v46;
  int v47;
  int v48;
  int v49;
  BOOL v51;
  BOOL v52;
  void *v53;
  int v54;
  std::string __p;
  std::__shared_weak_count *v56;
  std::__shared_weak_count *v57;
  char v58;

  sub_20BDE70B8(&v56, (_QWORD *)(a1 + 8));
LABEL_2:
  shared_weak_owners = v56;
  while (1)
  {
    if (!shared_weak_owners)
    {
      v17 = 1;
      goto LABEL_50;
    }
    v6 = sub_20C7D3C88((uint64_t)shared_weak_owners);
    v7 = (char *)v6;
    v8 = *((unsigned __int8 *)v6 + 23);
    v9 = v8;
    v10 = *((_QWORD *)v6 + 1);
    if ((v8 & 0x80u) == 0 ? *((unsigned __int8 *)v6 + 23) : *((_QWORD *)v6 + 1))
      break;
    v12 = v56;
    shared_weak_owners = (std::__shared_weak_count *)v56[9].__shared_weak_owners_;
    if (shared_weak_owners)
    {
      shared_weak_owners = std::__shared_weak_count::lock(shared_weak_owners);
      v13 = shared_weak_owners;
      if (shared_weak_owners)
        shared_weak_owners = (std::__shared_weak_count *)v12[9].__shared_owners_;
    }
    else
    {
      v13 = 0;
    }
    v14 = v57;
    v56 = shared_weak_owners;
    v57 = v13;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
      goto LABEL_2;
    }
  }
  v18 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (v18 >= 0)
    v19 = (unsigned __int8 *)a2;
  else
    v19 = (unsigned __int8 *)a2->__r_.__value_.__r.__words[0];
  if (v18 >= 0)
    size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  else
    size = a2->__r_.__value_.__l.__size_;
  v21 = strlen(off_25473DF68[0]);
  if (size)
    v22 = v21 == 0;
  else
    v22 = 1;
  if (v22)
    goto LABEL_29;
  v36 = &v19[size];
  v37 = v19;
  while (2)
  {
    v38 = v21;
    v39 = off_25473DF68[0];
    do
    {
      if (*v37 == *v39)
      {
        if (v37 == v36 || v37 - v19 == -1)
          goto LABEL_29;
        std::string::basic_string(&__p, a2, 0, v37 - v19, (std::allocator<char> *)&v58);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v40 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v40 = __p.__r_.__value_.__l.__size_;
        v41 = v7[23];
        v42 = (char)v41;
        if ((v41 & 0x80u) != 0)
          v41 = *((_QWORD *)v7 + 1);
        if (v40 == v41)
        {
          if (v42 >= 0)
            v43 = v7;
          else
            v43 = *(char **)v7;
          if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
          {
            v53 = (void *)__p.__r_.__value_.__r.__words[0];
            v54 = memcmp(__p.__r_.__value_.__l.__data_, v43, __p.__r_.__value_.__l.__size_);
            operator delete(v53);
            if (v54)
              goto LABEL_94;
          }
          else if (*((_BYTE *)&__p.__r_.__value_.__s + 23))
          {
            v44 = HIBYTE(__p.__r_.__value_.__r.__words[2]) - 1;
            p_p = &__p;
            do
            {
              v47 = p_p->__r_.__value_.__s.__data_[0];
              p_p = (std::string *)((char *)p_p + 1);
              v46 = v47;
              v49 = *v43++;
              v48 = v49;
              v51 = v44-- != 0;
              v52 = v46 == v48;
            }
            while (v46 == v48 && v51);
LABEL_87:
            if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (v52)
              goto LABEL_90;
LABEL_94:
            v8 = v7[23];
            v10 = *((_QWORD *)v7 + 1);
            v9 = v7[23];
            goto LABEL_29;
          }
LABEL_90:
          if ((SHIBYTE(a2->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            v17 = 0;
            *(_OWORD *)a3 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
            *(_QWORD *)(a3 + 16) = *((_QWORD *)&a2->__r_.__value_.__l + 2);
            goto LABEL_50;
          }
          sub_20BDDBFAC((_BYTE *)a3, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
          goto LABEL_49;
        }
        v52 = 0;
        goto LABEL_87;
      }
      ++v39;
      --v38;
    }
    while (v38);
    if (++v37 != v36)
      continue;
    break;
  }
LABEL_29:
  v23 = off_25473DF68[0];
  if (v9 >= 0)
    v24 = v8;
  else
    v24 = v10;
  v25 = strlen(off_25473DF68[0]);
  v26 = &__p;
  sub_20BDF6BDC((uint64_t)&__p, v24 + v25);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v26 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v24)
  {
    if (v7[23] >= 0)
      v27 = v7;
    else
      v27 = *(char **)v7;
    memmove(v26, v27, v24);
  }
  if (v25)
    memmove((char *)v26 + v24, v23, v25);
  v26->__r_.__value_.__s.__data_[v24 + v25] = 0;
  v28 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (v28 >= 0)
    v29 = (const std::string::value_type *)a2;
  else
    v29 = (const std::string::value_type *)a2->__r_.__value_.__r.__words[0];
  if (v28 >= 0)
    v30 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  else
    v30 = a2->__r_.__value_.__l.__size_;
  v31 = std::string::append(&__p, v29, v30);
  v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  *(_QWORD *)(a3 + 16) = *((_QWORD *)&v31->__r_.__value_.__l + 2);
  *(_OWORD *)a3 = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_49:
  v17 = 0;
LABEL_50:
  v33 = v57;
  if (!v57)
    goto LABEL_54;
  v34 = (unint64_t *)&v57->__shared_owners_;
  do
    v35 = __ldaxr(v34);
  while (__stlxr(v35 - 1, v34));
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
    if (v17)
      goto LABEL_55;
  }
  else
  {
LABEL_54:
    if (v17)
    {
LABEL_55:
      if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
      {
        sub_20BDDBFAC((_BYTE *)a3, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)a3 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
        *(_QWORD *)(a3 + 16) = *((_QWORD *)&a2->__r_.__value_.__l + 2);
      }
    }
  }
}

void sub_20C7D3C50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a15);
  _Unwind_Resume(a1);
}

__int128 *sub_20C7D3C88(uint64_t a1)
{
  unsigned __int8 *v2;
  __int128 *v3;
  void *__p[2];
  char v6;

  sub_20BDDC0E4(__p, off_25473DD10[0]);
  v2 = sub_20C67F73C((_QWORD *)(a1 + 160), (unsigned __int8 *)__p);
  if (v2)
    v3 = (__int128 *)(v2 + 40);
  else
    v3 = sub_20C957390();
  if (v6 < 0)
    operator delete(__p[0]);
  return v3;
}

void sub_20C7D3CF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C7D3D10(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void **v15;
  unsigned __int8 *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v3 = *(uint64_t **)(a1 + 136);
  for (i = *(uint64_t **)(a1 + 144); v3 != i; v3 += 2)
  {
    v8 = *v3;
    v7 = v3[1];
    v24 = *v3;
    v25 = (std::__shared_weak_count *)v7;
    if (v7)
    {
      v9 = (unint64_t *)(v7 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    sub_20C93B0FC(v8, &v23);
    if (!(_QWORD)v23)
      goto LABEL_23;
    v11 = (char)a2[23];
    v12 = *((_QWORD *)a2 + 1);
    if (v11 >= 0)
      v12 = a2[23];
    if (v12)
    {
      v13 = *(unsigned __int8 *)(v8 + 47);
      if ((v13 & 0x80u) == 0)
        v14 = *(unsigned __int8 *)(v8 + 47);
      else
        v14 = *(_QWORD *)(v8 + 32);
      if (v14 != v12)
        goto LABEL_23;
      v15 = (const void **)(v8 + 24);
      if (v11 >= 0)
        v16 = a2;
      else
        v16 = *(unsigned __int8 **)a2;
      if ((v13 & 0x80) != 0)
      {
        if (memcmp(*v15, v16, *(_QWORD *)(v8 + 32)))
          goto LABEL_23;
      }
      else if (*(_BYTE *)(v8 + 47))
      {
        while (*(unsigned __int8 *)v15 == *v16)
        {
          v15 = (const void **)((char *)v15 + 1);
          ++v16;
          if (!--v13)
            goto LABEL_22;
        }
        goto LABEL_23;
      }
    }
LABEL_22:
    sub_20BDEA72C((char **)a3, &v23);
LABEL_23:
    v17 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
    if (*((_QWORD *)&v23 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v20 = v25;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
}

void sub_20C7D3E94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a11);
  sub_20BDE9EB0((void ***)&a11);
  _Unwind_Resume(a1);
}

__int128 *sub_20C7D3EC4(uint64_t *a1, __int128 *a2, uint64_t a3, __int128 *a4, uint64_t a5)
{
  __int128 *v5;
  uint64_t v7;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  __int128 *v21;
  uint64_t v22;
  __int128 *v23;
  __int128 *v24;
  __int128 v25;
  __int128 v26;
  void *v28[5];

  v5 = a2;
  if (a5 >= 1)
  {
    v7 = a3;
    v11 = a1[2];
    v9 = a1 + 2;
    v10 = v11;
    v12 = *(v9 - 1);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v12) >> 4)) >= a5)
    {
      v20 = v12 - (_QWORD)a2;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (_QWORD)a2) >> 4)) >= a5)
      {
        v21 = (__int128 *)(a3 + 48 * a5);
      }
      else
      {
        v21 = (__int128 *)(a3 + 16 * ((uint64_t)(v12 - (_QWORD)a2) >> 4));
        a1[1] = sub_20C7D41F8((uint64_t)v9, v21, a4, *(v9 - 1));
        if (v20 < 1)
          return v5;
      }
      sub_20C7D40D4((uint64_t)a1, v5, v12, (uint64_t)&v5[3 * a5]);
      if (v21 != (__int128 *)v7)
      {
        v22 = (uint64_t)v5;
        do
        {
          sub_20C107E68(v22, (__int128 *)v7);
          v7 += 48;
          v22 += 48;
        }
        while ((__int128 *)v7 != v21);
      }
    }
    else
    {
      v13 = *a1;
      v14 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - *a1) >> 4);
      if (v14 > 0x555555555555555)
        sub_20BDDF694();
      v15 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v13) >> 4);
      v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v13) >> 4);
      v17 = 2 * v16;
      if (2 * v16 <= v14)
        v17 = v14;
      if (v16 >= 0x2AAAAAAAAAAAAAALL)
        v18 = 0x555555555555555;
      else
        v18 = v17;
      v28[4] = v9;
      if (v18)
        v19 = (char *)sub_20BE6D0B4((uint64_t)v9, v18);
      else
        v19 = 0;
      v23 = (__int128 *)&v19[48 * v15];
      v28[0] = v19;
      v28[1] = v23;
      v28[3] = &v19[48 * v18];
      v24 = &v23[3 * a5];
      do
      {
        v25 = *(_OWORD *)v7;
        *((_QWORD *)v23 + 2) = *(_QWORD *)(v7 + 16);
        *v23 = v25;
        *(_QWORD *)(v7 + 8) = 0;
        *(_QWORD *)(v7 + 16) = 0;
        *(_QWORD *)v7 = 0;
        v26 = *(_OWORD *)(v7 + 24);
        *((_QWORD *)v23 + 5) = *(_QWORD *)(v7 + 40);
        *(__int128 *)((char *)v23 + 24) = v26;
        *(_QWORD *)(v7 + 32) = 0;
        *(_QWORD *)(v7 + 40) = 0;
        *(_QWORD *)(v7 + 24) = 0;
        v23 += 3;
        v7 += 48;
      }
      while (v23 != v24);
      v28[2] = v24;
      v5 = (__int128 *)sub_20C7D4148((uint64_t)a1, v28, v5);
      sub_20BE94C80(v28);
    }
  }
  return v5;
}

void sub_20C7D40B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

__int128 *sub_20C7D40D4(uint64_t a1, __int128 *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  __int128 *v9;
  __int128 v10;
  __int128 v11;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (__int128 *)((char *)a2 + v6 - a4);
  v8 = v6;
  if ((unint64_t)v7 < a3)
  {
    v9 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    do
    {
      v10 = *v9;
      *(_QWORD *)(v8 + 16) = *((_QWORD *)v9 + 2);
      *(_OWORD *)v8 = v10;
      *((_QWORD *)v9 + 1) = 0;
      *((_QWORD *)v9 + 2) = 0;
      *(_QWORD *)v9 = 0;
      v11 = *(__int128 *)((char *)v9 + 24);
      *(_QWORD *)(v8 + 40) = *((_QWORD *)v9 + 5);
      *(_OWORD *)(v8 + 24) = v11;
      *((_QWORD *)v9 + 4) = 0;
      *((_QWORD *)v9 + 5) = 0;
      *((_QWORD *)v9 + 3) = 0;
      v8 += 48;
      v9 += 3;
    }
    while ((unint64_t)v9 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return sub_20C7D4294(a2, v7, v6);
}

uint64_t sub_20C7D4148(uint64_t a1, _QWORD *a2, __int128 *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = a1 + 16;
  sub_20BE94B48(a1 + 16, (uint64_t)a3, (uint64_t)a3, *(_QWORD *)a1, *(_QWORD *)a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_20C7D41F8(v7, a3, *(__int128 **)(a1 + 8), a2[2]);
  v9 = *(_QWORD *)a1;
  *(_QWORD *)a1 = a2[1];
  a2[1] = v9;
  v10 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = a2[2];
  a2[2] = v10;
  v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_20C7D41F8(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v11 = a4;
  v10 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  if (a2 != a3)
  {
    do
    {
      v5 = *a2;
      *(_QWORD *)(v4 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v4 = v5;
      *((_QWORD *)a2 + 1) = 0;
      *((_QWORD *)a2 + 2) = 0;
      *(_QWORD *)a2 = 0;
      v6 = *(__int128 *)((char *)a2 + 24);
      *(_QWORD *)(v4 + 40) = *((_QWORD *)a2 + 5);
      *(_OWORD *)(v4 + 24) = v6;
      *((_QWORD *)a2 + 4) = 0;
      *((_QWORD *)a2 + 5) = 0;
      *((_QWORD *)a2 + 3) = 0;
      v4 += 48;
      a2 += 3;
    }
    while (a2 != a3);
    v11 = v4;
  }
  v9 = 1;
  sub_20C2413F0((uint64_t)v8);
  return v4;
}

__int128 *sub_20C7D4294(__int128 *a1, __int128 *a2, uint64_t a3)
{
  __int128 *v6;

  if (a2 != a1)
  {
    v6 = a2;
    do
    {
      v6 -= 3;
      a3 -= 48;
      sub_20C107E68(a3, v6);
    }
    while (v6 != a1);
  }
  return a2;
}

void sub_20C7D42F0(uint64_t a1)
{
  void **v2;
  void **v3;

  v2 = (void **)(a1 + 16);
  sub_20BDECAB8(a1 + 112, *(char **)(a1 + 120));
  v3 = (void **)(a1 + 88);
  sub_20BE93030(&v3);
  sub_20C7D4364(a1 + 64, *(_QWORD **)(a1 + 72));
  v3 = (void **)(a1 + 40);
  sub_20BDE9EB0(&v3);
  v3 = v2;
  sub_20BDE5038(&v3);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)a1);
}

void sub_20C7D4364(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20C7D4364(a1, *a2);
    sub_20C7D4364(a1, a2[1]);
    sub_20BDE9D48((uint64_t)(a2 + 6), (_QWORD *)a2[7]);
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t sub_20C7D43BC(uint64_t a1)
{
  sub_20BDE9D48(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

__int128 **sub_20C7D43E4(__int128 **a1, uint64_t a2)
{
  unsigned __int8 *v3;
  __int128 *v4;
  uint64_t v5;

  v3 = sub_20C67F73C((_QWORD *)(*(_QWORD *)a2 + 160), (unsigned __int8 *)&qword_25498D118);
  if (v3)
    v4 = (__int128 *)(v3 + 40);
  else
    v4 = sub_20C957390();
  v5 = *((unsigned __int8 *)v4 + 23);
  if ((v5 & 0x80u) != 0)
    v5 = *((_QWORD *)v4 + 1);
  if (!v5)
    v4 = sub_20C957390();
  *a1 = v4;
  return a1;
}

uint64_t **sub_20C7D4448(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        return v9;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x48uLL);
    v12 = v11;
    v13 = (*a4)[1];
    v11[4] = **a4;
    v11[5] = v13;
    if (v13)
    {
      v14 = (unint64_t *)(v13 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    v11[8] = 0;
    v11[7] = 0;
    v11[6] = (uint64_t)(v11 + 7);
    sub_20BDDE1B4(a1, (uint64_t)v9, v7, v11);
  }
  return (uint64_t **)v12;
}

uint64_t *sub_20C7D452C(uint64_t **a1, __int128 *a2, __int128 *a3)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t *v8[3];

  sub_20C7D45C4((uint64_t)a1, a2, a3, (uint64_t)v8);
  v4 = (uint64_t **)sub_20C7D4634((uint64_t)a1, &v7, (const void **)v8[0] + 4);
  v5 = *v4;
  if (!*v4)
  {
    sub_20BDDE1B4(a1, v7, v4, v8[0]);
    v5 = v8[0];
    v8[0] = 0;
  }
  sub_20BDDE3A0((uint64_t)v8, 0);
  return v5;
}

void sub_20C7D45AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDDE3A0((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

char *sub_20C7D45C4@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  char *result;

  v7 = a1 + 8;
  v8 = (char *)operator new(0x50uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  result = sub_20C7D46D0(v8 + 32, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_20C7D461C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BDDE3A0(v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C7D4634(uint64_t a1, _QWORD *a2, const void **a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  const void **v9;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v8 = (_QWORD *)v4;
        v9 = (const void **)(v4 + 32);
        if (!sub_20C6A64B0(v7, a3, (const void **)(v4 + 32)))
          break;
        v4 = *v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!sub_20C6A64B0(v7, v9, a3))
        break;
      v5 = v8 + 1;
      v4 = v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

char *sub_20C7D46D0(char *__dst, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  _BYTE *v6;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }
  v6 = __dst + 24;
  if (*((char *)a3 + 23) < 0)
  {
    sub_20BDDBFAC(v6, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v7 = *a3;
    *((_QWORD *)__dst + 5) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v6 = v7;
  }
  return __dst;
}

void sub_20C7D4748(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_20C7D4764(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20C7D4764(a1, *a2);
    sub_20C7D4764(a1, a2[1]);
    sub_20C7D42F0((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t *sub_20C7D47AC(uint64_t a1, unint64_t *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  BOOL v8;
  _QWORD *v9;
  unsigned __int8 v10;

  v4 = *(_QWORD **)(a1 + 56);
  v2 = (_QWORD *)(a1 + 56);
  v3 = v4;
  if (v4)
  {
    v5 = *a2;
    v6 = v2;
    do
    {
      v7 = v3[4];
      v8 = v7 >= v5;
      if (v7 >= v5)
        v9 = v3;
      else
        v9 = v3 + 1;
      if (v8)
        v6 = v3;
      v3 = (_QWORD *)*v9;
    }
    while (*v9);
    if (v6 != v2 && v5 >= v6[4])
      return v6 + 6;
  }
  v10 = atomic_load((unsigned __int8 *)&qword_25498D3D8);
  if ((v10 & 1) != 0)
    return &qword_25498D3C0;
  if (__cxa_guard_acquire(&qword_25498D3D8))
  {
    qword_25498D3D0 = 0;
    qword_25498D3C8 = 0;
    qword_25498D3C0 = (uint64_t)&qword_25498D3C8;
    __cxa_atexit((void (*)(void *))sub_20C7D43BC, &qword_25498D3C0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498D3D8);
  }
  return &qword_25498D3C0;
}

uint64_t sub_20C7D4878(uint64_t a1, uint64_t (**a2)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v8 = 0;
  result = sub_20C7D4AB8(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 272), a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v8);
  if ((v8 & 7) != 0)
  {
    v6 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  return result;
}

_QWORD *sub_20C7D491C(uint64_t **a1, uint64_t *a2, uint64_t a3, _QWORD **a4)
{
  void **v6;
  _QWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v11;

  v6 = (void **)sub_20BF1E63C((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x30uLL);
    v9 = *a4;
    v7[4] = **a4;
    *v9 = 0;
    *((_DWORD *)v7 + 10) = 0;
    sub_20BDDE1B4(a1, v11, v8, v7);
  }
  return v7;
}

uint64_t *sub_20C7D49A8(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;

  v6 = (uint64_t **)sub_20BF1E63C((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    sub_20C7D4A3C((uint64_t)a1, a4, (uint64_t)&v8);
    sub_20BDDE1B4(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

_QWORD *sub_20C7D4A3C@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  v5 = a1 + 8;
  result = operator new(0x30uLL);
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v5;
  v7 = **a2;
  result[4] = v7;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      result[4] &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_DWORD *)result + 10) = 0;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t sub_20C7D4AB8(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, uint64_t (**a3)(_QWORD, uint64_t), const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t (**v11[3])(_QWORD, uint64_t);

  v8 = *(_QWORD *)(a1 + 8);
  if (!v8 || (*(_BYTE *)(v8 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  v9 = *(_QWORD **)v8;
  v11[2] = (uint64_t (**)(_QWORD, uint64_t))&stru_24C51BCF0;
  v11[0] = (uint64_t (**)(_QWORD, uint64_t))&unk_24C54B9F8;
  v11[1] = a3;
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>(v9, (int *)a1, a2, a4, v11);
}

uint64_t sub_20C7D4B44(uint64_t a1, _QWORD *a2)
{
  sub_20C105B3C(a2, *(uint64_t ***)(a1 + 8));
  return 1;
}

uint64_t sub_20C7D4B68(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;

  result = sub_20BFD222C(a2);
  if ((_DWORD)result)
  {
    v5 = *((_QWORD *)a2 + 1);
    if ((v5 & 4) != 0)
      v6 = (uint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8)
                                                                                             + 168))(a2);
    else
      v6 = *(uint64_t **)a2;
    v8 = *v6;
    v7 = v6[1];
    v9 = **(uint64_t ***)(a1 + 8);
    if (v7 - *v6 == *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) - (_QWORD)v9)
    {
      if (v8 == v7)
      {
        return 1;
      }
      else
      {
        v10 = v8 + 8;
        do
        {
          v11 = *v9++;
          result = (*(_QWORD *)(v10 - 8) & 0xFFFFFFFFFFFFFFF8) == (v11 & 0xFFFFFFFFFFFFFFF8);
          v12 = (*(_QWORD *)(v10 - 8) & 0xFFFFFFFFFFFFFFF8) != (v11 & 0xFFFFFFFFFFFFFFF8) || v10 == v7;
          v10 += 8;
        }
        while (!v12);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::Hf_PluginEntry(uint64_t a1, _QWORD *a2, __int128 *a3, int a4)
{
  uint64_t v6;
  __int128 v7;

  *(_QWORD *)a1 = *a2;
  v6 = a1 + 8;
  if (*((char *)a3 + 23) < 0)
  {
    sub_20BDDBFAC((_BYTE *)v6, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v7 = *a3;
    *(_QWORD *)(v6 + 16) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v6 = v7;
  }
  *(_DWORD *)(a1 + 32) = a4;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  return a1;
}

void pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::~Hf_PluginEntry(pxrInternal__aapl__pxrReserved__::Hf_PluginEntry *this)
{
  uint64_t v2;
  _QWORD v3[4];
  char v4;

  if (*((_QWORD *)this + 5))
  {
    v3[0] = "hf/pluginEntry.cpp";
    v3[1] = "~Hf_PluginEntry";
    v3[2] = 48;
    v3[3] = "pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::~Hf_PluginEntry()";
    v4 = 0;
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v3, "_instance == nullptr", 0) & 1) == 0)
    {
      v2 = *((_QWORD *)this + 5);
      if (v2)
        (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    }
  }
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

__n128 pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::Hf_PluginEntry(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  result = *(__n128 *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(__n128 *)(a1 + 8) = result;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  return result;
}

{
  __n128 result;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  result = *(__n128 *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(__n128 *)(a1 + 8) = result;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = a1 + 8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)v4);
  v5 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)v4 = v5;
  *(_BYTE *)(a2 + 31) = 0;
  *(_BYTE *)(a2 + 8) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::GetId@<X0>(pxrInternal__aapl__pxrReserved__::Hf_PluginEntry *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(this);
  return pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a2);
}

std::string *pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::GetDesc(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  std::string *result;
  uint64_t v11;

  pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)a1);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v11);
  v4 = *a2;
  v5 = *a2 & 7;
  if (&v11 == a2)
  {
    if (v5)
    {
      v8 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
      do
        v9 = __ldxr(v8);
      while (__stlxr(v9 - 2, v8));
    }
  }
  else
  {
    if (v5)
    {
      v6 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stlxr(v7 - 2, v6));
    }
    *a2 = v11;
  }
  result = std::string::operator=((std::string *)(a2 + 1), (const std::string *)(a1 + 8));
  *((_DWORD *)a2 + 8) = *(_DWORD *)(a1 + 32);
  return result;
}

void pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::IncRefCount(pxrInternal__aapl__pxrReserved__::Hf_PluginEntry *this, uint64_t a2, char *a3)
{
  uint64_t Factory;
  unint64_t v5;
  const char *v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[4];
  char v12;

  if (!*((_DWORD *)this + 12))
  {
    Factory = pxrInternal__aapl__pxrReserved__::TfType::_GetFactory(this, a2, a3);
    if (Factory && *(_UNKNOWN **)Factory == &unk_24C54BA48)
    {
      v9 = *(_QWORD *)(Factory + 32);
      if (!v9)
        sub_20BE9E974();
      *((_QWORD *)this + 5) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 48))(v9);
    }
    else
    {
      v11[0] = "hf/pluginEntry.cpp";
      v11[1] = "IncRefCount";
      v11[2] = 99;
      v11[3] = "void pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::IncRefCount()";
      v12 = 0;
      pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(this);
      pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v10);
      v5 = v10 & 0xFFFFFFFFFFFFFFF8;
      if ((v10 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        v6 = (const char *)(v5 + 16);
        if (*(char *)(v5 + 39) < 0)
          v6 = *(const char **)v6;
      }
      else
      {
        v6 = "";
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v11, 1, (pxrInternal__aapl__pxrReserved__ *)"Plugin %s is missing TfType registration", v6);
      if ((v10 & 7) != 0)
      {
        v7 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
        do
          v8 = __ldxr(v7);
        while (__stlxr(v8 - 2, v7));
      }
    }
  }
  ++*((_DWORD *)this + 12);
}

_DWORD *pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::DecRefCount(_DWORD *this)
{
  _DWORD *v1;
  int v2;
  int v3;
  _QWORD v4[4];
  char v5;

  v1 = this;
  v2 = this[12];
  if (v2 <= 0)
  {
    v4[0] = "hf/pluginEntry.cpp";
    v4[1] = "DecRefCount";
    v4[2] = 110;
    v4[3] = "void pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::DecRefCount()";
    v5 = 0;
    this = (_DWORD *)pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v4, "_refCount > 0", 0);
    if (!(_DWORD)this)
    {
      v1[12] = 0;
      return this;
    }
    v2 = v1[12];
  }
  v3 = v2 - 1;
  v1[12] = v3;
  if (!v3)
  {
    this = (_DWORD *)*((_QWORD *)v1 + 5);
    if (this)
      this = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 8))(this);
    *((_QWORD *)v1 + 5) = 0;
  }
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<(pxrInternal__aapl__pxrReserved__::TfType *a1, pxrInternal__aapl__pxrReserved__::TfType *a2)
{
  int v2;
  int v3;
  uint64_t TypeName;
  uint64_t v7;
  int v8;
  int v9;
  size_t v10;
  const void *v11;
  size_t v12;
  const void *v13;
  size_t v14;
  int v15;

  v2 = *((_DWORD *)a1 + 8);
  v3 = *((_DWORD *)a2 + 8);
  if (v2 < v3)
    return 1;
  if (v2 > v3)
    return 0;
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(a1);
  v7 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(a2);
  v8 = *(char *)(v7 + 23);
  v9 = *(char *)(TypeName + 23);
  if (v9 >= 0)
    v10 = *(unsigned __int8 *)(TypeName + 23);
  else
    v10 = *(_QWORD *)(TypeName + 8);
  if (v9 >= 0)
    v11 = (const void *)TypeName;
  else
    v11 = *(const void **)TypeName;
  if (v8 >= 0)
    v12 = *(unsigned __int8 *)(v7 + 23);
  else
    v12 = *(_QWORD *)(v7 + 8);
  if (v8 >= 0)
    v13 = (const void *)v7;
  else
    v13 = *(const void **)v7;
  if (v12 >= v10)
    v14 = v10;
  else
    v14 = v12;
  v15 = memcmp(v11, v13, v14);
  if (v15)
    return v15 < 0;
  else
    return v10 < v12;
}

void pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::SetFactory(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = operator new(0x28uLL);
  sub_20C7D5218(v4, a2);
  v7 = v4;
  pxrInternal__aapl__pxrReserved__::TfType::SetFactory(a1, (uint64_t *)&v7, v5);
  v6 = (uint64_t)v7;
  v7 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
}

void sub_20C7D51D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, pxrInternal__aapl__pxrReserved__::TfType::FactoryBase *a9, uint64_t a10)
{
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::TfType::FactoryBase *v12;

  v11 = a10;
  a10 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = a9;
  a9 = 0;
  if (v12)
    sub_20C7D5304((int)&a9, v12);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C7D5218(_QWORD *a1, uint64_t a2)
{
  *a1 = &unk_24C54BA48;
  sub_20BE9E6E8((uint64_t)(a1 + 1), a2);
  return a1;
}

void sub_20C7D524C(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::TfType::FactoryBase *v1;

  pxrInternal__aapl__pxrReserved__::TfType::FactoryBase::~FactoryBase(v1);
  _Unwind_Resume(a1);
}

void sub_20C7D5260(pxrInternal__aapl__pxrReserved__::TfType::FactoryBase *this)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = (char *)this + 8;
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  pxrInternal__aapl__pxrReserved__::TfType::FactoryBase::~FactoryBase(this);
}

void sub_20C7D52B0(pxrInternal__aapl__pxrReserved__::TfType::FactoryBase *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  void *v5;

  v2 = (char *)this + 8;
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  pxrInternal__aapl__pxrReserved__::TfType::FactoryBase::~FactoryBase(this);
  operator delete(v5);
}

void sub_20C7D5304(int a1, pxrInternal__aapl__pxrReserved__::TfType::FactoryBase *this)
{
  pxrInternal__aapl__pxrReserved__::TfType::FactoryBase *v3;
  uint64_t v4;
  void *v5;

  if (this)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::TfType::FactoryBase *)*((_QWORD *)this + 4);
    if (v3 == (pxrInternal__aapl__pxrReserved__::TfType::FactoryBase *)((char *)this + 8))
    {
      v4 = 4;
      v3 = (pxrInternal__aapl__pxrReserved__::TfType::FactoryBase *)((char *)this + 8);
    }
    else
    {
      if (!v3)
      {
LABEL_8:
        pxrInternal__aapl__pxrReserved__::TfType::FactoryBase::~FactoryBase(this);
        operator delete(v5);
        return;
      }
      v4 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
    goto LABEL_8;
  }
}

uint64_t *sub_20C7D5370()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20C7D542C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::HfPluginRegistry::HfPluginRegistry(uint64_t this, const pxrInternal__aapl__pxrReserved__::TfType *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)a2;
  *(_QWORD *)this = off_24C54BAB0;
  *(_QWORD *)(this + 8) = v2;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 56) = 0;
  *(_QWORD *)(this + 48) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 40) = this + 48;
  *(_BYTE *)(this + 64) = 0;
  return this;
}

{
  uint64_t v2;

  v2 = *(_QWORD *)a2;
  *(_QWORD *)this = off_24C54BAB0;
  *(_QWORD *)(this + 8) = v2;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 56) = 0;
  *(_QWORD *)(this + 48) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 40) = this + 48;
  *(_BYTE *)(this + 64) = 0;
  return this;
}

void pxrInternal__aapl__pxrReserved__::HfPluginRegistry::~HfPluginRegistry(pxrInternal__aapl__pxrReserved__::HfPluginRegistry *this)
{
  void **v2;

  *(_QWORD *)this = off_24C54BAB0;
  sub_20BF2B200((uint64_t)this + 40, *((_QWORD **)this + 6));
  v2 = (void **)((char *)this + 16);
  sub_20C7D60B0(&v2);
}

{
  void **v2;

  *(_QWORD *)this = off_24C54BAB0;
  sub_20BF2B200((uint64_t)this + 40, *((_QWORD **)this + 6));
  v2 = (void **)((char *)this + 16);
  sub_20C7D60B0(&v2);
}

{
  void **v2;

  *(_QWORD *)this = off_24C54BAB0;
  sub_20BF2B200((uint64_t)this + 40, *((_QWORD **)this + 6));
  v2 = (void **)((char *)this + 16);
  sub_20C7D60B0(&v2);
  operator delete(this);
}

void pxrInternal__aapl__pxrReserved__::HfPluginRegistry::GetPluginDescs(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[4];
  char v9;

  if (!*(_BYTE *)(a1 + 64))
    pxrInternal__aapl__pxrReserved__::HfPluginRegistry::_DiscoverPlugins((pxrInternal__aapl__pxrReserved__::HfPluginRegistry *)a1);
  if (*a2 != a2[1])
  {
    v8[0] = "hf/pluginRegistry.cpp";
    v8[1] = "GetPluginDescs";
    v8[2] = 60;
    v8[3] = "void pxrInternal__aapl__pxrReserved__::HfPluginRegistry::GetPluginDescs(HfPluginDescVector *)";
    v9 = 0;
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v8, "plugins->empty()", 0) & 1) == 0)
      sub_20C7D6120((uint64_t)a2, *a2);
  }
  sub_20C7D5B1C(a2, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3));
  v4 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(a1 + 24) != v4)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    do
    {
      pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::GetDesc(v4 + v6, (uint64_t *)(*a2 + v5));
      ++v7;
      v4 = *(_QWORD *)(a1 + 16);
      v6 += 56;
      v5 += 40;
    }
    while (v7 < 0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(a1 + 24) - v4) >> 3));
  }
}

void pxrInternal__aapl__pxrReserved__::HfPluginRegistry::_DiscoverPlugins(pxrInternal__aapl__pxrReserved__::HfPluginRegistry *this)
{
  pxrInternal__aapl__pxrReserved__::HfPluginRegistry *v1;
  unint64_t Instance;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t Int;
  unint64_t v8;
  uint64_t v9;
  uint64_t TypeName;
  char *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  BOOL v18;
  pxrInternal__aapl__pxrReserved__::TfType *v19;
  pxrInternal__aapl__pxrReserved__::TfType *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t *v27;
  uint64_t *v28;
  std::__shared_weak_count *v29;
  void *v30[2];
  unsigned __int8 v31;
  uint64_t *v32;
  _QWORD *v33;
  unint64_t v34;
  void *__p;
  const char *v36;
  uint64_t v37;
  const char *v38;
  char v39;

  v1 = this;
  v27 = (uint64_t *)((char *)this + 16);
  if (*((_QWORD *)this + 2) != *((_QWORD *)this + 3))
  {
    __p = "hf/pluginRegistry.cpp";
    v36 = "_DiscoverPlugins";
    v37 = 183;
    v38 = "void pxrInternal__aapl__pxrReserved__::HfPluginRegistry::_DiscoverPlugins()";
    v39 = 0;
    this = (pxrInternal__aapl__pxrReserved__::HfPluginRegistry *)pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&__p, "_pluginEntries.empty()", 0);
  }
  Instance = pxrInternal__aapl__pxrReserved__::PlugRegistry::GetInstance(this);
  v33 = 0;
  v34 = 0;
  v32 = (uint64_t *)&v33;
  pxrInternal__aapl__pxrReserved__::PlugRegistry::GetAllDerivedTypes(*((_QWORD *)v1 + 1), &v32);
  sub_20C7D5FC0(v27, v34);
  v3 = v32;
  if (v32 != (uint64_t *)&v33)
  {
    do
    {
      v4 = v3[4];
      sub_20BDDC0E4(&__p, "displayName");
      pxrInternal__aapl__pxrReserved__::PlugRegistry::GetStringFromPluginMetaData(v4, (const void **)&__p, (uint64_t)v30);
      if (SHIBYTE(v37) < 0)
        operator delete(__p);
      v5 = v3[4];
      sub_20BDDC0E4(&__p, "priority");
      pxrInternal__aapl__pxrReserved__::PlugRegistry::GetDataFromPluginMetaData(v5, (const void **)&__p, (pxrInternal__aapl__pxrReserved__::JsValue *)&v28);
      if (SHIBYTE(v37) < 0)
        operator delete(__p);
      v6 = v31;
      if ((v31 & 0x80u) != 0)
        v6 = (unint64_t)v30[1];
      if (v6 && pxrInternal__aapl__pxrReserved__::JsValue::IsInt((pxrInternal__aapl__pxrReserved__::JsValue *)&v28))
      {
        LODWORD(__p) = 0;
        Int = pxrInternal__aapl__pxrReserved__::JsValue::GetInt(&v28);
        LODWORD(__p) = Int;
        v8 = *((_QWORD *)v1 + 3);
        if (v8 >= *((_QWORD *)v1 + 4))
        {
          v9 = sub_20C7D6738(v27, (uint64_t)(v3 + 4), (uint64_t)v30, (unsigned int *)&__p);
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::Hf_PluginEntry(*((_QWORD *)v1 + 3), v3 + 4, v30, Int);
          v9 = v8 + 56;
          *((_QWORD *)v1 + 3) = v8 + 56;
        }
        *((_QWORD *)v1 + 3) = v9;
      }
      else
      {
        __p = "hf/pluginRegistry.cpp";
        v36 = "_DiscoverPlugins";
        v37 = 208;
        v38 = "void pxrInternal__aapl__pxrReserved__::HfPluginRegistry::_DiscoverPlugins()";
        v39 = 0;
        TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)(v3 + 4));
        if (*(char *)(TypeName + 23) >= 0)
          v12 = TypeName;
        else
          v12 = *(_QWORD *)TypeName;
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__ *)"Plugin %s type information incomplete", v11, v12);
      }
      (*(void (**)(pxrInternal__aapl__pxrReserved__::HfPluginRegistry *, unint64_t, uint64_t *))(*(_QWORD *)v1 + 16))(v1, Instance, v3 + 4);
      v13 = v29;
      if (v29)
      {
        p_shared_owners = (unint64_t *)&v29->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      if ((char)v31 < 0)
        operator delete(v30[0]);
      v16 = (uint64_t *)v3[1];
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (uint64_t *)v3[2];
          v18 = *v17 == (_QWORD)v3;
          v3 = v17;
        }
        while (!v18);
      }
      v3 = v17;
    }
    while (v17 != (uint64_t *)&v33);
  }
  v19 = (pxrInternal__aapl__pxrReserved__::TfType *)*((_QWORD *)v1 + 2);
  v20 = (pxrInternal__aapl__pxrReserved__::TfType *)*((_QWORD *)v1 + 3);
  v21 = 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7 * ((v20 - v19) >> 3));
  if (v20 == v19)
    v22 = 0;
  else
    v22 = v21;
  sub_20C7D686C(v19, v20, (uint64_t)&__p, v22, 1);
  __p = 0;
  v23 = *((_QWORD *)v1 + 2);
  if (*((_QWORD *)v1 + 3) != v23)
  {
    v24 = 0;
    do
    {
      pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::GetId((pxrInternal__aapl__pxrReserved__::Hf_PluginEntry *)(v23 + 56 * v24), (uint64_t)v30);
      sub_20C7D79BC((uint64_t **)v1 + 5, (uint64_t *)v30, (uint64_t *)v30, &__p);
      if (((uint64_t)v30[0] & 7) != 0)
      {
        v25 = (unsigned int *)((unint64_t)v30[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v26 = __ldxr(v25);
        while (__stlxr(v26 - 2, v25));
      }
      v24 = (unint64_t)__p + 1;
      __p = (void *)v24;
      v23 = *((_QWORD *)v1 + 2);
    }
    while (v24 < 0x6DB6DB6DB6DB6DB7 * ((*((_QWORD *)v1 + 3) - v23) >> 3));
  }
  *((_BYTE *)v1 + 64) = 1;
  sub_20BE6100C((uint64_t)&v32, v33);
}

void sub_20C7D5A6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,_QWORD *a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  sub_20BE6100C((uint64_t)&a20, a21);
  _Unwind_Resume(a1);
}

void sub_20C7D5B1C(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_20C7D6190(a1, v4);
  }
  else if (!v3)
  {
    sub_20C7D6120((uint64_t)a1, *a1 + 40 * a2);
  }
}

BOOL pxrInternal__aapl__pxrReserved__::HfPluginRegistry::GetPluginDesc(pxrInternal__aapl__pxrReserved__::HfPluginRegistry *this, uint64_t *a2, uint64_t *a3)
{
  pxrInternal__aapl__pxrReserved__::HfPluginRegistry *v6;
  pxrInternal__aapl__pxrReserved__::HfPluginRegistry *v7;

  if (!*((_BYTE *)this + 64))
    pxrInternal__aapl__pxrReserved__::HfPluginRegistry::_DiscoverPlugins(this);
  v6 = (pxrInternal__aapl__pxrReserved__::HfPluginRegistry *)sub_20C0D8030((uint64_t)this + 40, a2);
  v7 = v6;
  if ((pxrInternal__aapl__pxrReserved__::HfPluginRegistry *)((char *)this + 48) != v6)
    pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::GetDesc(*((_QWORD *)this + 2) + 56 * *((_QWORD *)v6 + 5), a3);
  return (pxrInternal__aapl__pxrReserved__::HfPluginRegistry *)((char *)this + 48) != v7;
}

void pxrInternal__aapl__pxrReserved__::HfPluginRegistry::AddPluginReference(pxrInternal__aapl__pxrReserved__::HfPluginRegistry *this, const std::type_info *a2, char *a3)
{
  pxrInternal__aapl__pxrReserved__::Hf_PluginEntry *EntryForPlugin;
  uint64_t v4;
  char *v5;

  EntryForPlugin = (pxrInternal__aapl__pxrReserved__::Hf_PluginEntry *)pxrInternal__aapl__pxrReserved__::HfPluginRegistry::_GetEntryForPlugin(this, a2, a3);
  if (EntryForPlugin)
    pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::IncRefCount(EntryForPlugin, v4, v5);
}

uint64_t pxrInternal__aapl__pxrReserved__::HfPluginRegistry::_GetEntryForPlugin(pxrInternal__aapl__pxrReserved__::HfPluginRegistry *this, const std::type_info *a2, char *a3)
{
  pxrInternal__aapl__pxrReserved__::TfType *v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v10;
  char *v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  char v15;
  const std::type_info *v16;

  v16 = a2;
  v4 = (pxrInternal__aapl__pxrReserved__::TfType *)sub_20BF4193C((pxrInternal__aapl__pxrReserved__::TfType *)&v16, a2, a3);
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v11);
  if (*(char **)v4 != v11
    || (v11 = "hf/pluginRegistry.cpp",
        v12 = "_GetEntryForPlugin",
        v13 = 237,
        v14 = "Hf_PluginEntry *pxrInternal__aapl__pxrReserved__::HfPluginRegistry::_GetEntryForPlugin(HfPluginBase *)",
        v15 = 0,
        v6 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v11, "!type.IsUnknown()", 0) & 1) != 0))
  {
    pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v4);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v10);
    v5 = sub_20C0D8030((uint64_t)this + 40, &v10);
    if ((_QWORD *)((char *)this + 48) != v5
      || (v11 = "hf/pluginRegistry.cpp",
          v12 = "_GetEntryForPlugin",
          v13 = 244,
          v14 = "Hf_PluginEntry *pxrInternal__aapl__pxrReserved__::HfPluginRegistry::_GetEntryForPlugin(HfPluginBase *)",
          v15 = 0,
          (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v11, "it != _pluginIndex.end()", 0) & 1) != 0))
    {
      v6 = *((_QWORD *)this + 2) + 56 * v5[5];
      if (*(const std::type_info **)(v6 + 40) != v16)
      {
        v11 = "hf/pluginRegistry.cpp";
        v12 = "_GetEntryForPlugin";
        v13 = 250;
        v14 = "Hf_PluginEntry *pxrInternal__aapl__pxrReserved__::HfPluginRegistry::_GetEntryForPlugin(HfPluginBase *)";
        v15 = 0;
        if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v11, "entry.GetInstance() == plugin", 0))v6 = 0;
      }
    }
    else
    {
      v6 = 0;
    }
    if ((v10 & 7) != 0)
    {
      v7 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stlxr(v8 - 2, v7));
    }
  }
  return v6;
}

void sub_20C7D5D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unsigned int *v10;
  unsigned int v11;

  if ((a10 & 7) != 0)
  {
    v10 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::HfPluginRegistry *pxrInternal__aapl__pxrReserved__::HfPluginRegistry::ReleasePlugin(pxrInternal__aapl__pxrReserved__::HfPluginRegistry *this, const std::type_info *a2, char *a3)
{
  if (a2)
  {
    this = (pxrInternal__aapl__pxrReserved__::HfPluginRegistry *)pxrInternal__aapl__pxrReserved__::HfPluginRegistry::_GetEntryForPlugin(this, a2, a3);
    if (this)
      return (pxrInternal__aapl__pxrReserved__::HfPluginRegistry *)pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::DecRefCount(this);
  }
  return this;
}

BOOL pxrInternal__aapl__pxrReserved__::HfPluginRegistry::IsRegisteredPlugin(pxrInternal__aapl__pxrReserved__::HfPluginRegistry *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  if (!*((_BYTE *)this + 64))
    pxrInternal__aapl__pxrReserved__::HfPluginRegistry::_DiscoverPlugins(this);
  return (_QWORD *)((char *)this + 48) != sub_20C0D8030((uint64_t)this + 40, (uint64_t *)a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::HfPluginRegistry::GetPlugin(pxrInternal__aapl__pxrReserved__::HfPluginRegistry *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::PlugRegistry *v4;
  uint64_t v5;
  char *v6;
  uint64_t *v7;
  uint64_t (*v8)(uint64_t *);
  char v9;
  pxrInternal__aapl__pxrReserved__::PlugPlugin *v10;
  char v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  _QWORD v21[4];
  char v22;
  uint64_t v23;
  uint64_t v24;

  if (!*((_BYTE *)this + 64))
    pxrInternal__aapl__pxrReserved__::HfPluginRegistry::_DiscoverPlugins(this);
  v4 = (pxrInternal__aapl__pxrReserved__::PlugRegistry *)sub_20C0D8030((uint64_t)this + 40, (uint64_t *)a2);
  if ((pxrInternal__aapl__pxrReserved__::HfPluginRegistry *)((char *)this + 48) == v4)
    return 0;
  v7 = (uint64_t *)(*((_QWORD *)this + 2) + 56 * *((_QWORD *)v4 + 5));
  if (v7[5])
    goto LABEL_12;
  pxrInternal__aapl__pxrReserved__::PlugRegistry::GetInstance(v4);
  pxrInternal__aapl__pxrReserved__::PlugRegistry::GetPluginForType(*v7, &v23);
  v8 = sub_20BF46110(&v23);
  if (v9 & 1 | (unint64_t)v8
    || (v21[0] = "hf/pluginRegistry.cpp",
        v21[1] = "GetPlugin",
        v21[2] = 147,
        v21[3] = "HfPluginBase *pxrInternal__aapl__pxrReserved__::HfPluginRegistry::GetPlugin(const TfToken &)",
        v22 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v21, "plugin", 0) & 1) != 0))
  {
    v10 = (pxrInternal__aapl__pxrReserved__::PlugPlugin *)sub_20BF444D8(&v23);
    v11 = pxrInternal__aapl__pxrReserved__::PlugPlugin::Load(v10);
    v12 = v24;
    if (v24)
    {
      v13 = (unsigned int *)(v24 + 8);
      do
      {
        v14 = __ldxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    }
    if ((v11 & 1) == 0)
      return 0;
LABEL_12:
    pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::IncRefCount((pxrInternal__aapl__pxrReserved__::Hf_PluginEntry *)v7, v5, v6);
    return v7[5];
  }
  v17 = v24;
  if (v24)
  {
    v18 = (unsigned int *)(v24 + 8);
    do
    {
      v19 = __ldxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  return 0;
}

void sub_20C7D5F7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unsigned int *a16)
{
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;

  if (a16)
  {
    v17 = a16 + 2;
    do
    {
      v18 = __ldxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
      (*(void (**)(unsigned int *))(*(_QWORD *)a16 + 8))(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C7D5FC0(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x492492492492493)
      sub_20BDDF694();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_20BE16B34(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 56 * v6;
    sub_20C7D65E8(a1, v7);
    return sub_20C7D66EC((uint64_t)v7);
  }
  return result;
}

void sub_20C7D6068(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C7D66EC((uint64_t)va);
  _Unwind_Resume(a1);
}

const pxrInternal__aapl__pxrReserved__::HfPluginBase **pxrInternal__aapl__pxrReserved__::HfPluginRegistry::GetPluginId@<X0>(pxrInternal__aapl__pxrReserved__::HfPluginRegistry *this@<X0>, const pxrInternal__aapl__pxrReserved__::HfPluginBase *a2@<X1>, _QWORD *a3@<X8>)
{
  const pxrInternal__aapl__pxrReserved__::HfPluginBase **result;
  const pxrInternal__aapl__pxrReserved__::HfPluginBase **v5;

  result = (const pxrInternal__aapl__pxrReserved__::HfPluginBase **)*((_QWORD *)this + 2);
  v5 = (const pxrInternal__aapl__pxrReserved__::HfPluginBase **)*((_QWORD *)this + 3);
  while (1)
  {
    if (result == v5)
    {
      *a3 = 0;
      return result;
    }
    if (result[5] == a2)
      break;
    result += 7;
  }
  return (const pxrInternal__aapl__pxrReserved__::HfPluginBase **)pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::GetId((pxrInternal__aapl__pxrReserved__::Hf_PluginEntry *)result, (uint64_t)a3);
}

void sub_20C7D60B0(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::~Hf_PluginEntry((pxrInternal__aapl__pxrReserved__::Hf_PluginEntry *)(v4 - 56));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_20C7D6120(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;

  for (i = *(_QWORD *)(a1 + 8); i != a2; i -= 40)
  {
    if (*(char *)(i - 9) < 0)
      operator delete(*(void **)(i - 32));
    v6 = *(_QWORD *)(i - 40);
    v5 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stlxr(v8 - 2, v7));
    }
  }
  *(_QWORD *)(a1 + 8) = a2;
}

void sub_20C7D6190(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 40 * ((40 * a2 - 40) / 0x28) + 40;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x666666666666666)
      sub_20BDDF694();
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x333333333333333)
      v11 = 0x666666666666666;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)sub_20BED4724(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[40 * v8];
    v18 = &v12[40 * v11];
    v14 = 40 * ((40 * a2 - 40) / 0x28) + 40;
    bzero(v16, v14);
    v17 = &v16[v14];
    sub_20C7D62F4(a1, &v15);
    sub_20C7D653C((uint64_t)&v15);
  }
}

void sub_20C7D62E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C7D653C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C7D62F4(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C7D6368((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C7D6368(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    do
    {
      v8 = *(_QWORD *)(a3 - 40);
      a3 -= 40;
      *(_QWORD *)(v7 - 40) = v8;
      *(_QWORD *)a3 = 0;
      v9 = *(_OWORD *)(a3 + 8);
      *(_QWORD *)(v7 - 16) = *(_QWORD *)(a3 + 24);
      *(_OWORD *)(v7 - 32) = v9;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 32);
      v7 = *((_QWORD *)&v15 + 1) - 40;
      *((_QWORD *)&v15 + 1) -= 40;
    }
    while (a3 != a5);
    v10 = v15;
  }
  v13 = 1;
  sub_20C7D6414((uint64_t)v12);
  return v10;
}

uint64_t sub_20C7D6414(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C7D6448((uint64_t *)a1);
  return a1;
}

void sub_20C7D6448(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[8];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v2 = v1[1];
  v14 = v3;
  v15 = v2;
  v16 = v3;
  v17 = v2;
  v4 = *a1;
  v5 = (uint64_t *)a1[1];
  v7 = *v5;
  v6 = v5[1];
  v9 = v7;
  v10 = v6;
  v11 = v7;
  v12 = v6;
  sub_20C7D64BC(v4, (uint64_t)v13, (uint64_t)v8);
}

void sub_20C7D64BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  unsigned int *v6;
  unsigned int v7;

  for (i = *(_QWORD *)(a2 + 32); i != *(_QWORD *)(a3 + 32); *(_QWORD *)(a2 + 32) = i)
  {
    if (*(char *)(i + 31) < 0)
      operator delete(*(void **)(i + 8));
    if ((*(_QWORD *)i & 7) != 0)
    {
      v6 = (unsigned int *)(*(_QWORD *)i & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stlxr(v7 - 2, v6));
    }
    i = *(_QWORD *)(a2 + 32) + 40;
  }
}

uint64_t sub_20C7D653C(uint64_t a1)
{
  sub_20C7D6570(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20C7D6570(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  _QWORD *v5;
  unsigned int *v6;
  unsigned int v7;

  for (i = *(_QWORD *)(a1 + 16); i != a2; i = *(_QWORD *)(a1 + 16))
  {
    v5 = (_QWORD *)(i - 40);
    *(_QWORD *)(a1 + 16) = i - 40;
    if (*(char *)(i - 9) < 0)
      operator delete(*(void **)(i - 32));
    if ((*v5 & 7) != 0)
    {
      v6 = (unsigned int *)(*v5 & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stlxr(v7 - 2, v6));
    }
  }
}

uint64_t sub_20C7D65E8(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C7D665C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C7D665C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v10 = 0;
  v11 = a7 - 56;
  while (a3 + v10 != a5)
  {
    v12 = v11 + v10;
    v10 -= 56;
    pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::Hf_PluginEntry(v12, v10 + a3);
  }
  return a6;
}

uint64_t sub_20C7D66EC(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 56;
    pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::~Hf_PluginEntry((pxrInternal__aapl__pxrReserved__::Hf_PluginEntry *)(i - 56));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20C7D6738(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t *v21;

  v5 = *a1;
  v6 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) > 0x492492492492492)
    sub_20BDDF694();
  v11 = (uint64_t)(a1 + 2);
  v12 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v5) >> 3);
  if (2 * v12 > v7)
    v7 = 2 * v12;
  if (v12 >= 0x249249249249249)
    v13 = 0x492492492492492;
  else
    v13 = v7;
  v21 = a1 + 2;
  if (v13)
    v14 = (char *)sub_20BE16B34(v11, v13);
  else
    v14 = 0;
  v17 = v14;
  v18 = &v14[56 * v6];
  v19 = v18;
  v20 = &v14[56 * v13];
  pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::Hf_PluginEntry(v18, a2, a3, *a4);
  v19 = v18 + 56;
  sub_20C7D65E8(a1, &v17);
  v15 = a1[1];
  sub_20C7D66EC((uint64_t)&v17);
  return v15;
}

void sub_20C7D6858(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C7D66EC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C7D686C(pxrInternal__aapl__pxrReserved__::TfType *a1, pxrInternal__aapl__pxrReserved__::TfType *a2, uint64_t a3, uint64_t a4, char a5)
{
  pxrInternal__aapl__pxrReserved__::TfType *v7;
  pxrInternal__aapl__pxrReserved__::TfType *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  pxrInternal__aapl__pxrReserved__::TfType *v13;
  uint64_t v14;
  uint64_t v15;
  pxrInternal__aapl__pxrReserved__::TfType *v16;
  char v17;
  uint64_t v18;
  char v19;
  int v20;
  uint64_t v21;
  pxrInternal__aapl__pxrReserved__::TfType *v22;
  pxrInternal__aapl__pxrReserved__::TfType *v23;

  v7 = a2;
  v8 = a1;
  v22 = a2;
  v23 = a1;
  while (2)
  {
    v9 = 1 - a4;
LABEL_3:
    v10 = v7 - v8;
    v11 = 0x6DB6DB6DB6DB6DB7 * ((v7 - v8) >> 3);
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v22 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v7 - 56);
        if (pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<((pxrInternal__aapl__pxrReserved__::TfType *)((char *)v7 - 56), v8))sub_20C7D6B54((uint64_t *)&v23, (uint64_t *)&v22);
        return;
      case 3uLL:
        v22 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v7 - 56);
        sub_20C7D6D60(v8, (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v8 + 56), (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v7 - 56));
        return;
      case 4uLL:
        v22 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v7 - 56);
        sub_20C7D7348(v8, (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v8 + 56), (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v8 + 112), (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v7 - 56));
        return;
      case 5uLL:
        v22 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v7 - 56);
        sub_20C7D73E4(v8, (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v8 + 56), (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v8 + 112), (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v8 + 168), (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v7 - 56));
        return;
      default:
        if (v10 <= 1343)
        {
          if ((a5 & 1) != 0)
            sub_20C7D6BBC((uint64_t)v8, (uint64_t)v7);
          else
            sub_20C7D6CA4((uint64_t)v8, v7);
          return;
        }
        if (v9 == 1)
        {
          if (v8 != v7)
            sub_20C7D74AC(v8, (uint64_t)v7, v7, a3);
          return;
        }
        v12 = v11 >> 1;
        v13 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v7 - 56);
        if ((unint64_t)v10 < 0x1C01)
        {
          sub_20C7D6D60((pxrInternal__aapl__pxrReserved__::TfType *)((char *)v8 + 56 * (v11 >> 1)), v8, v13);
          if ((a5 & 1) != 0)
          {
LABEL_11:
            v7 = v22;
            goto LABEL_12;
          }
        }
        else
        {
          sub_20C7D6D60(v8, (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v8 + 56 * (v11 >> 1)), v13);
          v14 = 56 * v12;
          v15 = 56 * v12 - 56;
          v16 = v22;
          sub_20C7D6D60((pxrInternal__aapl__pxrReserved__::TfType *)((char *)v23 + 56), (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v23 + v15), (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v22 - 112));
          sub_20C7D6D60((pxrInternal__aapl__pxrReserved__::TfType *)((char *)v23 + 112), (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v23 + v14 + 56), (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v16 - 168));
          sub_20C7D6D60((pxrInternal__aapl__pxrReserved__::TfType *)((char *)v23 + v15), (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v23 + v14), (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v23 + v14 + 56));
          v21 = (uint64_t)v23 + v14;
          sub_20C7D6E24((uint64_t *)&v23, &v21);
          if ((a5 & 1) != 0)
            goto LABEL_11;
        }
        v17 = pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<((pxrInternal__aapl__pxrReserved__::TfType *)((char *)v23 - 56), v23);
        v7 = v22;
        if ((v17 & 1) == 0)
        {
          v8 = sub_20C7D6E8C(v23, v22);
          goto LABEL_20;
        }
LABEL_12:
        v18 = sub_20C7D7004((uint64_t)v23, v7);
        if ((v19 & 1) == 0)
          goto LABEL_19;
        v20 = sub_20C7D7174((uint64_t)v23, v18);
        v8 = (pxrInternal__aapl__pxrReserved__::TfType *)(v18 + 56);
        if (!sub_20C7D7174(v18 + 56, (uint64_t)v7))
        {
          if (v20)
          {
            v23 = (pxrInternal__aapl__pxrReserved__::TfType *)(v18 + 56);
            goto LABEL_18;
          }
LABEL_19:
          sub_20C7D686C(v23, v18, a3, -v9, a5 & 1);
          v8 = (pxrInternal__aapl__pxrReserved__::TfType *)(v18 + 56);
LABEL_20:
          a5 = 0;
          v23 = v8;
          a4 = -v9;
          continue;
        }
        if ((v20 & 1) == 0)
        {
          v22 = (pxrInternal__aapl__pxrReserved__::TfType *)v18;
          v8 = v23;
          v7 = (pxrInternal__aapl__pxrReserved__::TfType *)v18;
LABEL_18:
          ++v9;
          goto LABEL_3;
        }
        return;
    }
  }
}

void sub_20C7D6B54(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE v4[56];

  v2 = *a1;
  v3 = *a2;
  pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::Hf_PluginEntry((uint64_t)v4, *a1);
  pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator=(v2, v3);
  pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator=(v3, (uint64_t)v4);
  pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::~Hf_PluginEntry((pxrInternal__aapl__pxrReserved__::Hf_PluginEntry *)v4);
}

void sub_20C7D6BA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::~Hf_PluginEntry((pxrInternal__aapl__pxrReserved__::Hf_PluginEntry *)va);
  _Unwind_Resume(a1);
}

void sub_20C7D6BBC(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::TfType *v4;
  uint64_t v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::TfType *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  _BYTE v11[56];

  if (a1 != a2)
  {
    v4 = (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 56);
    if (a1 + 56 != a2)
    {
      v5 = 0;
      v6 = a1;
      do
      {
        v7 = (pxrInternal__aapl__pxrReserved__::TfType *)v6;
        v6 = (uint64_t)v4;
        if (pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<(v4, v7))
        {
          pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::Hf_PluginEntry((uint64_t)v11, v6);
          v8 = v5;
          while (1)
          {
            pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator=(a1 + v8 + 56, a1 + v8);
            if (!v8)
              break;
            v9 = pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<((pxrInternal__aapl__pxrReserved__::TfType *)v11, (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + v8 - 56));
            v8 -= 56;
            if ((v9 & 1) == 0)
            {
              v10 = a1 + v8 + 56;
              goto LABEL_10;
            }
          }
          v10 = a1;
LABEL_10:
          pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator=(v10, (uint64_t)v11);
          pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::~Hf_PluginEntry((pxrInternal__aapl__pxrReserved__::Hf_PluginEntry *)v11);
        }
        v4 = (pxrInternal__aapl__pxrReserved__::TfType *)(v6 + 56);
        v5 += 56;
      }
      while (v6 + 56 != a2);
    }
  }
}

void sub_20C7D6C8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::~Hf_PluginEntry((pxrInternal__aapl__pxrReserved__::Hf_PluginEntry *)va);
  _Unwind_Resume(a1);
}

void sub_20C7D6CA4(uint64_t a1, pxrInternal__aapl__pxrReserved__::TfType *a2)
{
  pxrInternal__aapl__pxrReserved__::TfType *v3;
  pxrInternal__aapl__pxrReserved__::TfType *v4;
  uint64_t v5;
  _BYTE v6[56];

  if ((pxrInternal__aapl__pxrReserved__::TfType *)a1 != a2)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::TfType *)a1;
    v4 = (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 56);
    while (v4 != a2)
    {
      v5 = (uint64_t)v4;
      if (pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<(v4, v3))
      {
        pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::Hf_PluginEntry((uint64_t)v6, v5);
        do
        {
          pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator=((uint64_t)v3 + 56, (uint64_t)v3);
          v3 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v3 - 56);
        }
        while ((pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<((pxrInternal__aapl__pxrReserved__::TfType *)v6, v3) & 1) != 0);
        pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator=((uint64_t)v3 + 56, (uint64_t)v6);
        pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::~Hf_PluginEntry((pxrInternal__aapl__pxrReserved__::Hf_PluginEntry *)v6);
      }
      v4 = (pxrInternal__aapl__pxrReserved__::TfType *)(v5 + 56);
      v3 = (pxrInternal__aapl__pxrReserved__::TfType *)v5;
    }
  }
}

void sub_20C7D6D48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::~Hf_PluginEntry((pxrInternal__aapl__pxrReserved__::Hf_PluginEntry *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C7D6D60(pxrInternal__aapl__pxrReserved__::TfType *a1, pxrInternal__aapl__pxrReserved__::TfType *a2, pxrInternal__aapl__pxrReserved__::TfType *a3)
{
  char v5;
  uint64_t result;
  pxrInternal__aapl__pxrReserved__::TfType **v7;
  pxrInternal__aapl__pxrReserved__::TfType **v8;
  pxrInternal__aapl__pxrReserved__::TfType *v9;
  pxrInternal__aapl__pxrReserved__::TfType *v10;
  pxrInternal__aapl__pxrReserved__::TfType *v11;

  v10 = a2;
  v11 = a1;
  v9 = a3;
  v5 = pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<(a2, a1);
  result = pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<(a3, a2);
  if ((v5 & 1) == 0)
  {
    if (!(_DWORD)result)
      return result;
    sub_20C7D6B54((uint64_t *)&v10, (uint64_t *)&v9);
    if (!pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<(v10, v11))
      return 1;
    v7 = &v11;
    v8 = &v10;
    goto LABEL_9;
  }
  if (!(_DWORD)result)
  {
    sub_20C7D6B54((uint64_t *)&v11, (uint64_t *)&v10);
    if (!pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<(v9, v10))
      return 1;
    v7 = &v10;
    v8 = &v9;
LABEL_9:
    sub_20C7D6B54((uint64_t *)v7, (uint64_t *)v8);
    return 2;
  }
  sub_20C7D6B54((uint64_t *)&v11, (uint64_t *)&v9);
  return 1;
}

void sub_20C7D6E24(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE v4[56];

  v2 = *a1;
  v3 = *a2;
  pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::Hf_PluginEntry((uint64_t)v4, *a1);
  pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator=(v2, v3);
  pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator=(v3, (uint64_t)v4);
  pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::~Hf_PluginEntry((pxrInternal__aapl__pxrReserved__::Hf_PluginEntry *)v4);
}

void sub_20C7D6E78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::~Hf_PluginEntry((pxrInternal__aapl__pxrReserved__::Hf_PluginEntry *)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::TfType *sub_20C7D6E8C(pxrInternal__aapl__pxrReserved__::TfType *a1, pxrInternal__aapl__pxrReserved__::TfType *a2)
{
  pxrInternal__aapl__pxrReserved__::TfType *v4;
  pxrInternal__aapl__pxrReserved__::TfType *v5;
  int v6;
  pxrInternal__aapl__pxrReserved__::TfType *v7;
  uint64_t v8;
  pxrInternal__aapl__pxrReserved__::TfType *v9;
  _BYTE v11[56];
  pxrInternal__aapl__pxrReserved__::TfType *v12;
  pxrInternal__aapl__pxrReserved__::TfType *v13;

  v12 = a2;
  v13 = a1;
  pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::Hf_PluginEntry((uint64_t)v11, (uint64_t)a1);
  if ((pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<((pxrInternal__aapl__pxrReserved__::TfType *)v11, (pxrInternal__aapl__pxrReserved__::TfType *)((char *)a2 - 56)) & 1) != 0)
  {
    v4 = a1;
    do
    {
      v4 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v4 + 56);
      v13 = v4;
    }
    while ((pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<((pxrInternal__aapl__pxrReserved__::TfType *)v11, v4) & 1) == 0);
  }
  else
  {
    v5 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)a1 + 56);
    do
    {
      v4 = v5;
      v13 = v5;
      if (v5 >= v12)
        break;
      v6 = pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<((pxrInternal__aapl__pxrReserved__::TfType *)v11, v5);
      v5 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v4 + 56);
    }
    while (!v6);
  }
  v7 = v12;
  if (v4 < v12)
  {
    do
    {
      v7 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v7 - 56);
      v12 = v7;
    }
    while ((pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<((pxrInternal__aapl__pxrReserved__::TfType *)v11, v7) & 1) != 0);
    v4 = v13;
  }
  if (v4 < v7)
  {
    do
    {
      sub_20C7D6B54((uint64_t *)&v13, (uint64_t *)&v12);
      do
        v13 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v13 + 56);
      while (!pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<((pxrInternal__aapl__pxrReserved__::TfType *)v11, v13));
      do
        v12 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v12 - 56);
      while ((pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<((pxrInternal__aapl__pxrReserved__::TfType *)v11, v12) & 1) != 0);
      v4 = v13;
    }
    while (v13 < v12);
  }
  v8 = (uint64_t)v4 - 56;
  if ((pxrInternal__aapl__pxrReserved__::TfType *)v8 != a1)
    pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator=((uint64_t)a1, v8);
  pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator=(v8, (uint64_t)v11);
  v9 = v13;
  pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::~Hf_PluginEntry((pxrInternal__aapl__pxrReserved__::Hf_PluginEntry *)v11);
  return v9;
}

void sub_20C7D6FD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::~Hf_PluginEntry((pxrInternal__aapl__pxrReserved__::Hf_PluginEntry *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C7D7004(uint64_t a1, pxrInternal__aapl__pxrReserved__::TfType *a2)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::TfType *v4;
  pxrInternal__aapl__pxrReserved__::TfType *v5;
  int v6;
  pxrInternal__aapl__pxrReserved__::TfType *v7;
  pxrInternal__aapl__pxrReserved__::TfType *v8;
  uint64_t v9;
  _BYTE v11[56];
  pxrInternal__aapl__pxrReserved__::TfType *v12;
  pxrInternal__aapl__pxrReserved__::TfType *v13;

  v12 = a2;
  pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::Hf_PluginEntry((uint64_t)v11, a1);
  v3 = 0;
  do
  {
    v13 = (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + v3 + 56);
    v3 += 56;
  }
  while ((pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<(v13, (pxrInternal__aapl__pxrReserved__::TfType *)v11) & 1) != 0);
  v4 = v12;
  if (v3 == 56)
  {
    v7 = (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 56);
    do
    {
      if (v7 >= v4)
        break;
      v4 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v4 - 56);
      v12 = v4;
    }
    while ((pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<(v4, (pxrInternal__aapl__pxrReserved__::TfType *)v11) & 1) == 0);
  }
  else
  {
    v5 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v12 - 56);
    do
    {
      v12 = v5;
      v6 = pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<(v5, (pxrInternal__aapl__pxrReserved__::TfType *)v11);
      v5 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v5 - 56);
    }
    while (!v6);
    v7 = v13;
  }
  v8 = v7;
  if (v7 < v12)
  {
    do
    {
      sub_20C7D6B54((uint64_t *)&v13, (uint64_t *)&v12);
      do
        v13 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v13 + 56);
      while ((pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<(v13, (pxrInternal__aapl__pxrReserved__::TfType *)v11) & 1) != 0);
      do
        v12 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v12 - 56);
      while (!pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<(v12, (pxrInternal__aapl__pxrReserved__::TfType *)v11));
      v8 = v13;
    }
    while (v13 < v12);
  }
  v9 = (uint64_t)v8 - 56;
  if ((pxrInternal__aapl__pxrReserved__::TfType *)((char *)v8 - 56) != (pxrInternal__aapl__pxrReserved__::TfType *)a1)
    pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator=(a1, (uint64_t)v8 - 56);
  pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator=(v9, (uint64_t)v11);
  pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::~Hf_PluginEntry((pxrInternal__aapl__pxrReserved__::Hf_PluginEntry *)v11);
  return v9;
}

void sub_20C7D7148(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::~Hf_PluginEntry((pxrInternal__aapl__pxrReserved__::Hf_PluginEntry *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C7D7174(uint64_t a1, uint64_t a2)
{
  _BOOL8 v4;
  pxrInternal__aapl__pxrReserved__::TfType *v5;
  pxrInternal__aapl__pxrReserved__::TfType *v6;
  int v7;
  uint64_t v8;
  _BYTE v10[56];
  pxrInternal__aapl__pxrReserved__::TfType *v11;
  pxrInternal__aapl__pxrReserved__::TfType *v12;

  v11 = (pxrInternal__aapl__pxrReserved__::TfType *)a2;
  v12 = (pxrInternal__aapl__pxrReserved__::TfType *)a1;
  v4 = 1;
  switch(0x6DB6DB6DB6DB6DB7 * ((a2 - a1) >> 3))
  {
    case 0:
    case 1:
      return v4;
    case 2:
      v11 = (pxrInternal__aapl__pxrReserved__::TfType *)(a2 - 56);
      if (pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<((pxrInternal__aapl__pxrReserved__::TfType *)(a2 - 56), (pxrInternal__aapl__pxrReserved__::TfType *)a1))sub_20C7D6B54((uint64_t *)&v12, (uint64_t *)&v11);
      return v4;
    case 3:
      sub_20C7D6D60((pxrInternal__aapl__pxrReserved__::TfType *)a1, (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 56), (pxrInternal__aapl__pxrReserved__::TfType *)(a2 - 56));
      return v4;
    case 4:
      sub_20C7D7348((pxrInternal__aapl__pxrReserved__::TfType *)a1, (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 56), (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 112), (pxrInternal__aapl__pxrReserved__::TfType *)(a2 - 56));
      return v4;
    case 5:
      sub_20C7D73E4((pxrInternal__aapl__pxrReserved__::TfType *)a1, (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 56), (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 112), (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 168), (pxrInternal__aapl__pxrReserved__::TfType *)(a2 - 56));
      return v4;
    default:
      v5 = (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 112);
      sub_20C7D6D60((pxrInternal__aapl__pxrReserved__::TfType *)a1, (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 56), (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 112));
      v6 = (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 168);
      if (v6 == (pxrInternal__aapl__pxrReserved__::TfType *)a2)
        return 1;
      v7 = 0;
      break;
  }
  while (!pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<(v6, v5))
  {
LABEL_12:
    v5 = v6;
    v6 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v6 + 56);
    if (v6 == v11)
      return 1;
  }
  pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::Hf_PluginEntry((uint64_t)v10, (uint64_t)v6);
  do
  {
    v8 = (uint64_t)v5;
    pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator=((uint64_t)v5 + 56, (uint64_t)v5);
    if (v5 == v12)
      break;
    v5 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v5 - 56);
  }
  while ((pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<((pxrInternal__aapl__pxrReserved__::TfType *)v10, (pxrInternal__aapl__pxrReserved__::TfType *)(v8 - 56)) & 1) != 0);
  pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator=(v8, (uint64_t)v10);
  if (++v7 != 8)
  {
    pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::~Hf_PluginEntry((pxrInternal__aapl__pxrReserved__::Hf_PluginEntry *)v10);
    goto LABEL_12;
  }
  v4 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v6 + 56) == v11;
  pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::~Hf_PluginEntry((pxrInternal__aapl__pxrReserved__::Hf_PluginEntry *)v10);
  return v4;
}

void sub_20C7D7330(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::~Hf_PluginEntry((pxrInternal__aapl__pxrReserved__::Hf_PluginEntry *)va);
  _Unwind_Resume(a1);
}

void sub_20C7D7348(pxrInternal__aapl__pxrReserved__::TfType *a1, pxrInternal__aapl__pxrReserved__::TfType *a2, pxrInternal__aapl__pxrReserved__::TfType *a3, pxrInternal__aapl__pxrReserved__::TfType *a4)
{
  pxrInternal__aapl__pxrReserved__::TfType *v8;
  pxrInternal__aapl__pxrReserved__::TfType *v9;
  pxrInternal__aapl__pxrReserved__::TfType *v10;
  pxrInternal__aapl__pxrReserved__::TfType *v11;

  v10 = a2;
  v11 = a1;
  v8 = a4;
  v9 = a3;
  sub_20C7D6D60(a1, a2, a3);
  if (pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<(a4, a3))
  {
    sub_20C7D6B54((uint64_t *)&v9, (uint64_t *)&v8);
    if (pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<(v9, a2))
    {
      sub_20C7D6B54((uint64_t *)&v10, (uint64_t *)&v9);
      if (pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<(v10, a1))
        sub_20C7D6B54((uint64_t *)&v11, (uint64_t *)&v10);
    }
  }
}

void sub_20C7D73E4(pxrInternal__aapl__pxrReserved__::TfType *a1, pxrInternal__aapl__pxrReserved__::TfType *a2, pxrInternal__aapl__pxrReserved__::TfType *a3, pxrInternal__aapl__pxrReserved__::TfType *a4, pxrInternal__aapl__pxrReserved__::TfType *a5)
{
  pxrInternal__aapl__pxrReserved__::TfType *v10;
  pxrInternal__aapl__pxrReserved__::TfType *v11;
  pxrInternal__aapl__pxrReserved__::TfType *v12;
  pxrInternal__aapl__pxrReserved__::TfType *v13;
  pxrInternal__aapl__pxrReserved__::TfType *v14;

  v13 = a2;
  v14 = a1;
  v11 = a4;
  v12 = a3;
  v10 = a5;
  sub_20C7D7348(a1, a2, a3, a4);
  if (pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<(a5, a4))
  {
    sub_20C7D6B54((uint64_t *)&v11, (uint64_t *)&v10);
    if (pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<(v11, a3))
    {
      sub_20C7D6B54((uint64_t *)&v12, (uint64_t *)&v11);
      if (pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<(v12, a2))
      {
        sub_20C7D6B54((uint64_t *)&v13, (uint64_t *)&v12);
        if (pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<(v13, a1))
          sub_20C7D6B54((uint64_t *)&v14, (uint64_t *)&v13);
      }
    }
  }
}

uint64_t sub_20C7D74AC(pxrInternal__aapl__pxrReserved__::TfType *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::TfType *a3, uint64_t a4)
{
  pxrInternal__aapl__pxrReserved__::TfType *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  pxrInternal__aapl__pxrReserved__::TfType *v11;
  pxrInternal__aapl__pxrReserved__::TfType *v12;
  uint64_t v14;
  pxrInternal__aapl__pxrReserved__::TfType *v15;

  v15 = a1;
  if (a1 != (pxrInternal__aapl__pxrReserved__::TfType *)a2)
  {
    v7 = a1;
    v8 = (a2 - (uint64_t)a1) / 56;
    if (a2 - (uint64_t)a1 >= 57)
    {
      v9 = (unint64_t)(v8 - 2) >> 1;
      v10 = v9 + 1;
      v11 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)a1 + 56 * v9);
      do
      {
        sub_20C7D75C8((uint64_t)v7, a4, v8, v11);
        v11 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v11 - 56);
        --v10;
      }
      while (v10);
    }
    v14 = a2;
    if ((pxrInternal__aapl__pxrReserved__::TfType *)a2 != a3)
    {
      v12 = (pxrInternal__aapl__pxrReserved__::TfType *)a2;
      do
      {
        if (pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<(v12, v15))
        {
          sub_20C7D6B54(&v14, (uint64_t *)&v15);
          sub_20C7D75C8((uint64_t)v15, a4, v8, v15);
        }
        v12 = (pxrInternal__aapl__pxrReserved__::TfType *)(v14 + 56);
        v14 = (uint64_t)v12;
      }
      while (v12 != a3);
      v7 = v15;
    }
    sub_20C7D7738((uint64_t)v7, a2, a4);
    return v14;
  }
  return (uint64_t)a3;
}

void sub_20C7D75C8(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::TfType *a4)
{
  unint64_t v4;
  pxrInternal__aapl__pxrReserved__::TfType *v5;
  int64_t v7;
  int64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[56];

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= 0x6DB6DB6DB6DB6DB7 * (((uint64_t)a4 - a1) >> 3))
    {
      v9 = (0xDB6DB6DB6DB6DB6ELL * (((uint64_t)a4 - a1) >> 3)) | 1;
      v10 = a1 + 56 * v9;
      v11 = 0xDB6DB6DB6DB6DB6ELL * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v11 < a3
        && pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<((pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 56 * v9), (pxrInternal__aapl__pxrReserved__::TfType *)(v10 + 56)))
      {
        v10 += 56;
        v9 = v11;
      }
      if ((pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<((pxrInternal__aapl__pxrReserved__::TfType *)v10, v5) & 1) == 0)
      {
        pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::Hf_PluginEntry((uint64_t)v14, (uint64_t)v5);
        do
        {
          v12 = v10;
          pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator=((uint64_t)v5, v10);
          if (v7 < v9)
            break;
          v13 = (2 * v9) | 1;
          v10 = a1 + 56 * v13;
          v9 = 2 * v9 + 2;
          if (v9 >= a3)
          {
            v9 = v13;
          }
          else if (pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<((pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 56 * v13), (pxrInternal__aapl__pxrReserved__::TfType *)(v10 + 56)))
          {
            v10 += 56;
          }
          else
          {
            v9 = v13;
          }
          v5 = (pxrInternal__aapl__pxrReserved__::TfType *)v12;
        }
        while (!pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<((pxrInternal__aapl__pxrReserved__::TfType *)v10, (pxrInternal__aapl__pxrReserved__::TfType *)v14));
        pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator=(v12, (uint64_t)v14);
        pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::~Hf_PluginEntry((pxrInternal__aapl__pxrReserved__::Hf_PluginEntry *)v14);
      }
    }
  }
}

void sub_20C7D7720(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::~Hf_PluginEntry((pxrInternal__aapl__pxrReserved__::Hf_PluginEntry *)va);
  _Unwind_Resume(a1);
}

void sub_20C7D7738(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  _BYTE v12[56];

  if (a2 - a1 >= 57)
  {
    v5 = (a2 - a1) / 0x38uLL;
    v6 = a2 - 56;
    do
    {
      pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::Hf_PluginEntry((uint64_t)v12, a1);
      v7 = sub_20C7D7844(a1, a3, v5);
      v8 = v7;
      if (v6 == v7)
      {
        pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator=(v7, (uint64_t)v12);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator=(v7, v6);
        pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator=(v6, (uint64_t)v12);
        sub_20C7D78F0(a1, v8 + 56, a3, 0x6DB6DB6DB6DB6DB7 * ((v8 + 56 - a1) >> 3));
      }
      pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::~Hf_PluginEntry((pxrInternal__aapl__pxrReserved__::Hf_PluginEntry *)v12);
      v6 -= 56;
      v11 = __OFSUB__(v5, 2);
      v9 = v5 == 2;
      v10 = (uint64_t)(v5 - 2) < 0;
      --v5;
    }
    while (!(v10 ^ v11 | v9));
  }
}

void sub_20C7D7830(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::~Hf_PluginEntry((pxrInternal__aapl__pxrReserved__::Hf_PluginEntry *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C7D7844(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = 0;
  v6 = a3 - 2;
  if (a3 < 2)
    v6 = a3 - 1;
  v7 = v6 >> 1;
  do
  {
    v8 = a1 + 56 * v5 + 56;
    v9 = (2 * v5) | 1;
    v10 = 2 * v5 + 2;
    if (v10 < a3
      && pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<((pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 56 * v5 + 56), (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 56 * v5 + 112)))
    {
      v8 += 56;
      v9 = v10;
    }
    pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator=(a1, v8);
    a1 = v8;
    v5 = v9;
  }
  while (v9 <= v7);
  return v8;
}

void sub_20C7D78F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5;
  pxrInternal__aapl__pxrReserved__::TfType *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[56];

  if (a4 >= 2)
  {
    v5 = (unint64_t)(a4 - 2) >> 1;
    v6 = (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 56 * v5);
    v7 = a2 - 56;
    if (pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<(v6, (pxrInternal__aapl__pxrReserved__::TfType *)(a2 - 56)))
    {
      pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::Hf_PluginEntry((uint64_t)v9, v7);
      do
      {
        v8 = (uint64_t)v6;
        pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator=(v7, (uint64_t)v6);
        if (!v5)
          break;
        v5 = (v5 - 1) >> 1;
        v6 = (pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 56 * v5);
        v7 = v8;
      }
      while ((pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator<(v6, (pxrInternal__aapl__pxrReserved__::TfType *)v9) & 1) != 0);
      pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::operator=(v8, (uint64_t)v9);
      pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::~Hf_PluginEntry((pxrInternal__aapl__pxrReserved__::Hf_PluginEntry *)v9);
    }
  }
}

void sub_20C7D79A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::Hf_PluginEntry::~Hf_PluginEntry((pxrInternal__aapl__pxrReserved__::Hf_PluginEntry *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C7D79BC(uint64_t **a1, uint64_t *a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t **v7;
  uint64_t *result;
  uint64_t *v9;
  uint64_t v10;

  v7 = (uint64_t **)sub_20BF1E63C((uint64_t)a1, &v10, a2);
  result = *v7;
  if (!*v7)
  {
    sub_20C7D7A40((uint64_t)a1, a3, a4, (uint64_t)&v9);
    sub_20BDDE1B4(a1, v10, v7, v9);
    return v9;
  }
  return result;
}

_QWORD *sub_20C7D7A40@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;

  v7 = a1 + 8;
  result = operator new(0x30uLL);
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = v7;
  v9 = *a2;
  result[4] = *a2;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      result[4] &= 0xFFFFFFFFFFFFFFF8;
  }
  result[5] = *a3;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_20C7D7AC0()
{
  void *__p[2];
  char v1;
  void *v2[2];
  char v3;

  sub_20BDDC0E4(v2, "CameraUtilMatchVertically");
  sub_20BDDC0E4(__p, "MatchVertically");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C54BAD8, 0, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "CameraUtilMatchHorizontally");
  sub_20BDDC0E4(__p, "MatchHotizontally");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C54BAD8, 1, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "CameraUtilFit");
  sub_20BDDC0E4(__p, "Fit");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C54BAD8, 2, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "CameraUtilCrop");
  sub_20BDDC0E4(__p, "Crop");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C54BAD8, 3, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "CameraUtilDontConform");
  sub_20BDDC0E4(__p, "DontConform");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C54BAD8, 4, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
}

void sub_20C7D7C98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

double pxrInternal__aapl__pxrReserved__::CameraUtilConformedWindow(double *a1, unsigned int a2, double a3)
{
  double v4;
  double v5;

  if (a2 == 4)
    return *a1;
  if (a2 >= 2)
  {
    v4 = a1[1];
    v5 = *a1 / v4;
    if (v4 == 0.0)
      v5 = 1.0;
    a2 = (a2 != 2) ^ (v5 > a3);
  }
  if (a2)
    return *a1;
  else
    return a1[1] * a3;
}

{
  double result;
  double v5;
  double v6;
  double v7;

  if (a2 == 4)
    return *a1;
  v5 = a1[2];
  result = *a1;
  v6 = a1[3] - a1[1];
  if (a2 >= 2)
  {
    v7 = (v5 - *a1) / v6;
    if (v6 == 0.0)
      v7 = 1.0;
    a2 = (a2 != 2) ^ (v7 > a3);
  }
  if (!a2)
    return (v5 + result) * 0.5 - v6 * a3 * 0.5;
  return result;
}

void pxrInternal__aapl__pxrReserved__::CameraUtilConformedWindow(uint64_t *a1, unsigned int a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  int8x16_t v5;
  uint64_t v6;

  if (a2 != 4)
  {
    v3 = a1[3];
    v4 = *a1;
    v5 = vextq_s8(*(int8x16_t *)(a1 + 1), *(int8x16_t *)(a1 + 1), 8uLL);
    v6 = v3;
    pxrInternal__aapl__pxrReserved__::CameraUtilConformedWindow((double *)&v4, a2, a3);
  }
}

double pxrInternal__aapl__pxrReserved__::CameraUtilConformedWindow@<D0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>, double result@<D0>)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  int v13;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  double v18;

  v4 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a3 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a3 + 80) = v4;
  v5 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a3 + 96) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a3 + 112) = v5;
  v6 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *(_OWORD *)(a3 + 16) = v6;
  v7 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a3 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a3 + 48) = v7;
  if (a2 != 4)
  {
    v8 = *(double *)(a1 + 40);
    v9 = fabs(v8);
    v10 = *(double *)a1;
    v11 = fabs(*(double *)a1);
    v12 = v9 / v11;
    if (*(double *)a1 == 0.0)
      v12 = 1.0;
    v13 = (a2 != 2) ^ (v12 > result);
    if (a2 < 2)
      v13 = a2;
    if (v13)
    {
      v14 = -v11;
      if (v8 >= 0.0)
        v14 = v11;
      v15 = v14 * result;
      *(double *)(a3 + 40) = v15;
      v16 = 13;
      v17 = 9;
    }
    else
    {
      if (result == 0.0)
        result = 1.0;
      v15 = v9 / result;
      if (v10 < 0.0)
        v15 = -v15;
      *(double *)a3 = v15;
      v16 = 12;
      v17 = 8;
      v8 = v10;
    }
    if (v8 == 0.0)
      v8 = 1.0;
    v18 = v15 / v8;
    *(double *)(a3 + 8 * v17) = v18 * *(double *)(a3 + 8 * v17);
    result = v18 * *(double *)(a3 + 8 * v16);
    *(double *)(a3 + 8 * v16) = result;
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::GfCamera *pxrInternal__aapl__pxrReserved__::CameraUtilConformWindow(pxrInternal__aapl__pxrReserved__::GfCamera *result, unsigned int a2, double a3)
{
  double v3;
  double v4;
  double v5;
  double v6;
  pxrInternal__aapl__pxrReserved__::GfCamera *v9;
  double v10;
  double v11;
  double v12;
  float v13;
  double v14[8];

  if (a2 != 4)
  {
    v14[2] = v6;
    v14[3] = v5;
    v14[6] = v3;
    v14[7] = v4;
    v9 = result;
    v14[0] = pxrInternal__aapl__pxrReserved__::GfCamera::GetHorizontalAperture(result);
    v14[1] = pxrInternal__aapl__pxrReserved__::GfCamera::GetVerticalAperture(v9);
    v10 = pxrInternal__aapl__pxrReserved__::CameraUtilConformedWindow(v14, a2, a3);
    v12 = v11;
    *(float *)&v10 = v10;
    pxrInternal__aapl__pxrReserved__::GfCamera::SetHorizontalAperture((uint64_t)v9, *(float *)&v10);
    v13 = v12;
    return (pxrInternal__aapl__pxrReserved__::GfCamera *)pxrInternal__aapl__pxrReserved__::GfCamera::SetVerticalAperture((uint64_t)v9, v13);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::CameraUtilConformWindow(uint64_t a1, unsigned int a2, double a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a2 != 4)
  {
    *(double *)(a1 + 56) = pxrInternal__aapl__pxrReserved__::CameraUtilConformedWindow((double *)(a1 + 56), a2, a3);
    *(_QWORD *)(a1 + 64) = v4;
    *(_QWORD *)(a1 + 72) = v5;
    *(_QWORD *)(a1 + 80) = v6;
    pxrInternal__aapl__pxrReserved__::GfFrustum::_DirtyFrustumPlanes((pxrInternal__aapl__pxrReserved__::GfFrustum *)a1);
  }
}

double pxrInternal__aapl__pxrReserved__::CameraUtilFraming::CameraUtilFraming(pxrInternal__aapl__pxrReserved__::CameraUtilFraming *this)
{
  double result;

  result = 1.40444743e306;
  *(_OWORD *)this = xmmword_20CA9EF70;
  *((_OWORD *)this + 1) = xmmword_20CAC7C50;
  *((_DWORD *)this + 8) = 1065353216;
  return result;
}

{
  double result;

  result = 1.40444743e306;
  *(_OWORD *)this = xmmword_20CA9EF70;
  *((_OWORD *)this + 1) = xmmword_20CAC7C50;
  *((_DWORD *)this + 8) = 1065353216;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::CameraUtilFraming::CameraUtilFraming(uint64_t result, _OWORD *a2, _OWORD *a3, float a4)
{
  *(_OWORD *)result = *a2;
  *(_OWORD *)(result + 16) = *a3;
  *(float *)(result + 32) = a4;
  return result;
}

{
  *(_OWORD *)result = *a2;
  *(_OWORD *)(result + 16) = *a3;
  *(float *)(result + 32) = a4;
  return result;
}

__n128 pxrInternal__aapl__pxrReserved__::CameraUtilFraming::CameraUtilFraming(float32x2_t *this, int32x2_t *a2)
{
  float32x2_t v2;
  __n128 result;

  v2 = vcvt_f32_s32(vadd_s32(a2[1], (int32x2_t)0x100000001));
  *this = vcvt_f32_s32(*a2);
  this[1] = v2;
  result = *(__n128 *)a2->i8;
  *(_OWORD *)this[2].f32 = *(_OWORD *)a2->i8;
  this[4].i32[0] = 1065353216;
  return result;
}

{
  float32x2_t v2;
  __n128 result;

  v2 = vcvt_f32_s32(vadd_s32(a2[1], (int32x2_t)0x100000001));
  *this = vcvt_f32_s32(*a2);
  this[1] = v2;
  result = *(__n128 *)a2->i8;
  *(_OWORD *)this[2].f32 = *(_OWORD *)a2->i8;
  this[4].i32[0] = 1065353216;
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::CameraUtilFraming::IsValid(pxrInternal__aapl__pxrReserved__::CameraUtilFraming *this)
{
  return *((_DWORD *)this + 6) - *((_DWORD *)this + 4) + 1 >= 1
      && *((_DWORD *)this + 7) - *((_DWORD *)this + 5) + 1 >= 1
      && *(float *)this <= *((float *)this + 2)
      && *((float *)this + 1) <= *((float *)this + 3)
      && *((float *)this + 8) != 0.0;
}

BOOL pxrInternal__aapl__pxrReserved__::CameraUtilFraming::operator==(uint64_t a1, uint64_t a2)
{
  return *(float *)a1 == *(float *)a2
      && *(float *)(a1 + 4) == *(float *)(a2 + 4)
      && *(float *)(a1 + 8) == *(float *)(a2 + 8)
      && *(float *)(a1 + 12) == *(float *)(a2 + 12)
      && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16)
      && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20)
      && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
      && *(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 28)
      && *(float *)(a1 + 32) == *(float *)(a2 + 32);
}

BOOL pxrInternal__aapl__pxrReserved__::CameraUtilFraming::operator!=(uint64_t a1, uint64_t a2)
{
  return !pxrInternal__aapl__pxrReserved__::CameraUtilFraming::operator==(a1, a2);
}

void pxrInternal__aapl__pxrReserved__::CameraUtilFraming::ApplyToProjectionMatrix(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  float32x2_t v5;
  int32x2_t v6;
  float32x2_t v7;
  double v8;
  double v9;
  double v10;
  float32x2_t v11;
  double *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  float64x2_t v22;
  _OWORD v23[2];
  double v24[16];
  float64x2_t v25;
  uint64_t v26;
  _OWORD v27[8];
  _QWORD v28[2];
  float64x2_t v29;
  double v30[16];
  _OWORD v31[8];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;

  v5 = vsub_f32(*(float32x2_t *)(a1 + 8), *(float32x2_t *)a1);
  v6 = *(int32x2_t *)(a1 + 16);
  v7 = vcvt_f32_s32(vadd_s32(vsub_s32(*(int32x2_t *)(a1 + 24), v6), (int32x2_t)0x100000001));
  v8 = v5.f32[0];
  v9 = v5.f32[1];
  v10 = 1.0;
  if (v5.f32[1] != 0.0)
    v10 = v5.f32[0] / v5.f32[1];
  v11 = vsub_f32(vadd_f32(*(float32x2_t *)a1, vmul_f32(v5, (float32x2_t)0x3F0000003F000000)), vadd_f32(vmul_f32(v7, (float32x2_t)0x3F0000003F000000), vcvt_f32_s32(v6)));
  pxrInternal__aapl__pxrReserved__::CameraUtilConformedWindow(a2, a3, (uint64_t)v31, v10 * *(float *)(a1 + 32));
  *(double *)v28 = v8;
  *(double *)&v28[1] = v9;
  __asm { FMOV            V0.2D, #1.0 }
  v22 = _Q0;
  v29 = _Q0;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)v30, (uint64_t)v28);
  v36 = v31[4];
  v37 = v31[5];
  v38 = v31[6];
  v39 = v31[7];
  v32 = v31[0];
  v33 = v31[1];
  v34 = v31[2];
  v35 = v31[3];
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=((double *)&v32, v30);
  memset(v27, 0, sizeof(v27));
  v25 = vcvtq_f64_f32(vmul_f32(v11, (float32x2_t)0xC000000040000000));
  v26 = 0;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetTranslate((uint64_t)v27, (uint64_t)&v25);
  v44 = v36;
  v45 = v37;
  v46 = v38;
  v47 = v39;
  v40 = v32;
  v41 = v33;
  v42 = v34;
  v43 = v35;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=((double *)&v40, v17);
  v23[0] = vdivq_f64(v22, vcvtq_f64_f32(v7));
  v23[1] = v22;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)v24, (uint64_t)v23);
  v18 = v45;
  *(_OWORD *)(a4 + 64) = v44;
  *(_OWORD *)(a4 + 80) = v18;
  v19 = v47;
  *(_OWORD *)(a4 + 96) = v46;
  *(_OWORD *)(a4 + 112) = v19;
  v20 = v41;
  *(_OWORD *)a4 = v40;
  *(_OWORD *)(a4 + 16) = v20;
  v21 = v43;
  *(_OWORD *)(a4 + 32) = v42;
  *(_OWORD *)(a4 + 48) = v21;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=((double *)a4, v24);
}

float32_t pxrInternal__aapl__pxrReserved__::CameraUtilFraming::ComputeFilmbackWindow(float32x2_t *a1, int a2, float a3)
{
  int v6;
  unsigned int v7;
  float v8;
  double v9;
  float64_t v10;
  uint64_t v11;
  uint64_t v12;
  float64x2_t v14[2];
  float64x2_t v15;
  uint64_t v16;
  uint64_t v17;
  float32x4_t v18;

  pxrInternal__aapl__pxrReserved__::GfRange2d::GfRange2d(v14, a1);
  if (a2 == 3)
    v6 = 2;
  else
    v6 = a2;
  if (a2 == 2)
    v7 = 3;
  else
    v7 = v6;
  v8 = a1[4].f32[0];
  v9 = a3 / v8;
  if (v8 == 0.0)
    v9 = 1.0;
  v15.f64[0] = pxrInternal__aapl__pxrReserved__::CameraUtilConformedWindow(v14[0].f64, v7, v9);
  v15.f64[1] = v10;
  v16 = v11;
  v17 = v12;
  pxrInternal__aapl__pxrReserved__::GfRange2f::GfRange2f(&v18, &v15);
  return v18.f32[0];
}

uint64_t pxrInternal__aapl__pxrReserved__::CameraUtilScreenWindowParameters::CameraUtilScreenWindowParameters(uint64_t a1, pxrInternal__aapl__pxrReserved__::GfCamera *this, int a3)
{
  float HorizontalAperture;
  float HorizontalApertureOffset;
  double v8;
  float v9;
  float v10;
  double v11;
  float VerticalAperture;
  float VerticalApertureOffset;
  double v14;
  float v15;
  float v16;
  double v17;
  double v18;
  double v19;
  float v20;
  unsigned __int8 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  double v32[16];
  _OWORD v33[8];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;

  HorizontalAperture = pxrInternal__aapl__pxrReserved__::GfCamera::GetHorizontalAperture(this);
  HorizontalApertureOffset = pxrInternal__aapl__pxrReserved__::GfCamera::GetHorizontalApertureOffset(this);
  v8 = (float)((float)(HorizontalApertureOffset + HorizontalApertureOffset) - HorizontalAperture);
  v9 = pxrInternal__aapl__pxrReserved__::GfCamera::GetHorizontalAperture(this);
  v10 = pxrInternal__aapl__pxrReserved__::GfCamera::GetHorizontalApertureOffset(this);
  v11 = (float)(v9 + (float)(v10 + v10));
  VerticalAperture = pxrInternal__aapl__pxrReserved__::GfCamera::GetVerticalAperture(this);
  VerticalApertureOffset = pxrInternal__aapl__pxrReserved__::GfCamera::GetVerticalApertureOffset(this);
  v14 = (float)((float)(VerticalApertureOffset + VerticalApertureOffset) - VerticalAperture);
  v15 = pxrInternal__aapl__pxrReserved__::GfCamera::GetVerticalAperture(this);
  v16 = pxrInternal__aapl__pxrReserved__::GfCamera::GetVerticalApertureOffset(this);
  *(double *)a1 = v8;
  *(double *)(a1 + 8) = v11;
  *(double *)(a1 + 16) = v14;
  *(double *)(a1 + 24) = (float)(v15 + (float)(v16 + v16));
  *(double *)(a1 + 32) = pxrInternal__aapl__pxrReserved__::GfCamera::GetFieldOfView((uint64_t)this, a3);
  if (pxrInternal__aapl__pxrReserved__::GfCamera::GetProjection(this))
  {
    v17 = 0.1 * 0.5;
    v18 = *(double *)a1;
    v19 = 0.1 * 0.5;
  }
  else
  {
    if (a3)
      v20 = pxrInternal__aapl__pxrReserved__::GfCamera::GetVerticalAperture(this);
    else
      v20 = pxrInternal__aapl__pxrReserved__::GfCamera::GetHorizontalAperture(this);
    if (v20 == 0.0)
      goto LABEL_9;
    v18 = 1.0 / v20;
    v17 = *(double *)a1;
    v19 = v18;
  }
  *(double *)a1 = v18 * v17;
  *(float64x2_t *)(a1 + 8) = vmulq_n_f64(*(float64x2_t *)(a1 + 8), v19);
  *(double *)(a1 + 24) = v19 * *(double *)(a1 + 24);
LABEL_9:
  v21 = atomic_load((unsigned __int8 *)&qword_25498D470);
  if ((v21 & 1) == 0 && __cxa_guard_acquire(&qword_25498D470))
  {
    __asm { FMOV            V1.2D, #1.0 }
    v34 = _Q1;
    v35 = xmmword_20CA53AD0;
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)&xmmword_25498D3F0, (uint64_t)&v34);
    __cxa_guard_release(&qword_25498D470);
  }
  pxrInternal__aapl__pxrReserved__::GfCamera::GetTransform(this, (uint64_t)v32);
  v33[4] = xmmword_25498D430;
  v33[5] = unk_25498D440;
  v33[6] = xmmword_25498D450;
  v33[7] = unk_25498D460;
  v33[0] = xmmword_25498D3F0;
  v33[1] = unk_25498D400;
  v33[2] = xmmword_25498D410;
  v33[3] = unk_25498D420;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=((double *)v33, v32);
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::GetInverse((double *)v33, 0, 0.0, (uint64_t)&v34);
  v22 = v39;
  *(_OWORD *)(a1 + 104) = v38;
  *(_OWORD *)(a1 + 120) = v22;
  v23 = v41;
  *(_OWORD *)(a1 + 136) = v40;
  *(_OWORD *)(a1 + 152) = v23;
  v24 = v35;
  *(_OWORD *)(a1 + 40) = v34;
  *(_OWORD *)(a1 + 56) = v24;
  v25 = v37;
  *(_OWORD *)(a1 + 72) = v36;
  *(_OWORD *)(a1 + 88) = v25;
  return a1;
}

void sub_20C7D863C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498D470);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::PxOsdMeshTopology *pxrInternal__aapl__pxrReserved__::PxOsdMeshTopology::PxOsdMeshTopology(pxrInternal__aapl__pxrReserved__::PxOsdMeshTopology *this)
{
  pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  v2 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
  if (!v2)
    v2 = sub_20C7D9220(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
  v3 = *((_QWORD *)v2 + 6);
  *(_QWORD *)this = v3;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      *(_QWORD *)this &= 0xFFFFFFFFFFFFFFF8;
  }
  v6 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
  if (!v6)
    v6 = sub_20C7D9220(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
  v7 = *((_QWORD *)v6 + 14);
  *((_QWORD *)this + 1) = v7;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      *((_QWORD *)this + 1) &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_BYTE *)this + 368) = 0;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  return this;
}

double pxrInternal__aapl__pxrReserved__::PxOsdMeshTopology::PxOsdMeshTopology(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, __int128 *a5)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  __int128 v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  double result;

  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      *(_QWORD *)a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  v8 = *a3;
  *(_QWORD *)(a1 + 8) = *a3;
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      *(_QWORD *)(a1 + 8) &= 0xFFFFFFFFFFFFFFF8;
  }
  v11 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)a4;
  *(_OWORD *)(a1 + 32) = v11;
  v12 = *(_QWORD *)(a4 + 32);
  *(_QWORD *)(a1 + 48) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 - 16);
    if (*(_QWORD *)(a1 + 40))
      v13 = *(unint64_t **)(a1 + 40);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = *a5;
  *(_OWORD *)(a1 + 72) = a5[1];
  *(_OWORD *)(a1 + 56) = v15;
  v16 = *((_QWORD *)a5 + 4);
  *(_QWORD *)(a1 + 88) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 - 16);
    if (*(_QWORD *)(a1 + 80))
      v17 = *(unint64_t **)(a1 + 80);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  *(_BYTE *)(a1 + 368) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  return result;
}

double pxrInternal__aapl__pxrReserved__::PxOsdMeshTopology::PxOsdMeshTopology(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, __int128 *a5, uint64_t a6)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  __int128 v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  double result;

  v6 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    if ((v8 & 1) == 0)
      *(_QWORD *)a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  v9 = *a3;
  *(_QWORD *)(a1 + 8) = *a3;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      *(_QWORD *)(a1 + 8) &= 0xFFFFFFFFFFFFFFF8;
  }
  v12 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)a4;
  *(_OWORD *)(a1 + 32) = v12;
  v13 = *(_QWORD *)(a4 + 32);
  *(_QWORD *)(a1 + 48) = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 - 16);
    if (*(_QWORD *)(a1 + 40))
      v14 = *(unint64_t **)(a1 + 40);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = *a5;
  *(_OWORD *)(a1 + 72) = a5[1];
  *(_OWORD *)(a1 + 56) = v16;
  v17 = *((_QWORD *)a5 + 4);
  *(_QWORD *)(a1 + 88) = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 - 16);
    if (*(_QWORD *)(a1 + 80))
      v18 = *(unint64_t **)(a1 + 80);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = *(_OWORD *)(a6 + 16);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)a6;
  *(_OWORD *)(a1 + 112) = v20;
  v21 = *(_QWORD *)(a6 + 32);
  *(_QWORD *)(a1 + 128) = v21;
  if (v21)
  {
    v22 = (unint64_t *)(v21 - 16);
    if (*(_QWORD *)(a1 + 120))
      v22 = *(unint64_t **)(a1 + 120);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  result = 0.0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 353) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::PxOsdMeshTopology::PxOsdMeshTopology(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, __int128 *a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  __int128 v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  __int128 v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;

  v8 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      *(_QWORD *)a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  v11 = *a3;
  *(_QWORD *)(a1 + 8) = *a3;
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 2, v12));
    if ((v13 & 1) == 0)
      *(_QWORD *)(a1 + 8) &= 0xFFFFFFFFFFFFFFF8;
  }
  v14 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)a4;
  *(_OWORD *)(a1 + 32) = v14;
  v15 = *(_QWORD *)(a4 + 32);
  *(_QWORD *)(a1 + 48) = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 - 16);
    if (*(_QWORD *)(a1 + 40))
      v16 = *(unint64_t **)(a1 + 40);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v18 = *a5;
  *(_OWORD *)(a1 + 72) = a5[1];
  *(_OWORD *)(a1 + 56) = v18;
  v19 = *((_QWORD *)a5 + 4);
  *(_QWORD *)(a1 + 88) = v19;
  if (v19)
  {
    v20 = (unint64_t *)(v19 - 16);
    if (*(_QWORD *)(a1 + 80))
      v20 = *(unint64_t **)(a1 + 80);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v22 = *(_OWORD *)(a6 + 16);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)a6;
  *(_OWORD *)(a1 + 112) = v22;
  v23 = *(_QWORD *)(a6 + 32);
  *(_QWORD *)(a1 + 128) = v23;
  if (v23)
  {
    v24 = (unint64_t *)(v23 - 16);
    if (*(_QWORD *)(a1 + 120))
      v24 = *(unint64_t **)(a1 + 120);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  sub_20C7D9038(a1 + 136, a7);
  *(_BYTE *)(a1 + 368) = 0;
  return a1;
}

void sub_20C7D8B1C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_20BF5618C(v5);
  sub_20BF5618C(v4);
  sub_20BF5618C(v3);
  sub_20C96C110(v2, v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PxOsdMeshTopology::PxOsdMeshTopology(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, __int128 *a5, uint64_t *a6)
{
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  __int128 v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  v7 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      *(_QWORD *)a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  v10 = *a3;
  *(_QWORD *)(a1 + 8) = *a3;
  if ((v10 & 7) != 0)
  {
    v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 2, v11));
    if ((v12 & 1) == 0)
      *(_QWORD *)(a1 + 8) &= 0xFFFFFFFFFFFFFFF8;
  }
  v13 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)a4;
  *(_OWORD *)(a1 + 32) = v13;
  v14 = *(_QWORD *)(a4 + 32);
  *(_QWORD *)(a1 + 48) = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 - 16);
    if (*(_QWORD *)(a1 + 40))
      v15 = *(unint64_t **)(a1 + 40);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = *a5;
  *(_OWORD *)(a1 + 72) = a5[1];
  *(_OWORD *)(a1 + 56) = v17;
  v18 = *((_QWORD *)a5 + 4);
  *(_QWORD *)(a1 + 88) = v18;
  if (v18)
  {
    v19 = (unint64_t *)(v18 - 16);
    if (*(_QWORD *)(a1 + 80))
      v19 = *(unint64_t **)(a1 + 80);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  sub_20C7D9038(a1 + 136, a6);
  *(_BYTE *)(a1 + 368) = 0;
  return a1;
}

void sub_20C7D8C90(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v6 = v5;
  sub_20BF5618C(v6);
  sub_20BF5618C(v4);
  sub_20BF5618C(v3);
  sub_20C96C110(v2, v1);
  _Unwind_Resume(a1);
}

unint64_t pxrInternal__aapl__pxrReserved__::PxOsdMeshTopology::ComputeHash(pxrInternal__aapl__pxrReserved__ **this)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = pxrInternal__aapl__pxrReserved__::PxOsdSubdivTags::ComputeHash(this + 17);
  v3 = pxrInternal__aapl__pxrReserved__::ArchHash64((pxrInternal__aapl__pxrReserved__ *)this, (const char *)8, v2);
  v4 = pxrInternal__aapl__pxrReserved__::ArchHash64((pxrInternal__aapl__pxrReserved__ *)(this + 1), (const char *)8, v3);
  v5 = pxrInternal__aapl__pxrReserved__::ArchHash64(this[6], (const char *)(4 * (_QWORD)this[2]), v4);
  v6 = pxrInternal__aapl__pxrReserved__::ArchHash64(this[11], (const char *)(4 * (_QWORD)this[7]), v5);
  return pxrInternal__aapl__pxrReserved__::ArchHash64(this[16], (const char *)(4 * (_QWORD)this[12]), v6);
}

uint64_t pxrInternal__aapl__pxrReserved__::PxOsdMeshTopology::operator==(_QWORD *a1, _QWORD *a2)
{
  if ((*a1 & 0xFFFFFFFFFFFFFFF8) == (*a2 & 0xFFFFFFFFFFFFFFF8)
    && (a1[1] & 0xFFFFFFFFFFFFFFF8) == (a2[1] & 0xFFFFFFFFFFFFFFF8)
    && pxrInternal__aapl__pxrReserved__::UsdSkelTopology::operator==((uint64_t)(a1 + 2), (uint64_t)(a2 + 2))
    && pxrInternal__aapl__pxrReserved__::UsdSkelTopology::operator==((uint64_t)(a1 + 7), (uint64_t)(a2 + 7))
    && pxrInternal__aapl__pxrReserved__::operator==(a1 + 17, a2 + 17))
  {
    return pxrInternal__aapl__pxrReserved__::UsdSkelTopology::operator==((uint64_t)(a1 + 12), (uint64_t)(a2 + 12));
  }
  else
  {
    return 0;
  }
}

pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation *pxrInternal__aapl__pxrReserved__::PxOsdMeshTopology::Validate@<X0>(pxrInternal__aapl__pxrReserved__::PxOsdMeshTopology *this@<X0>, pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation *result;
  unsigned __int8 v4;
  unsigned __int8 v5;

  result = a2;
  v4 = atomic_load((unsigned __int8 *)this + 368);
  if ((v4 & 1) != 0)
  {
    *(_QWORD *)result = 0;
  }
  else
  {
    result = (pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation *)pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation::PxOsdMeshTopologyValidation(result, this);
    if (*(_QWORD *)result)
      v5 = **(_QWORD **)result == *(_QWORD *)(*(_QWORD *)result + 8);
    else
      v5 = 1;
    atomic_store(v5, (unsigned __int8 *)this + 368);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::operator!=(_QWORD *a1, _QWORD *a2)
{
  return pxrInternal__aapl__pxrReserved__::PxOsdMeshTopology::operator==(a1, a2) ^ 1;
}

uint64_t sub_20C7D9038(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  __int128 v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  __int128 v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  __int128 v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;

  v2 = *a2;
  *(_QWORD *)result = *a2;
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) == 0)
      *(_QWORD *)result &= 0xFFFFFFFFFFFFFFF8;
  }
  v5 = a2[1];
  *(_QWORD *)(result + 8) = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      *(_QWORD *)(result + 8) &= 0xFFFFFFFFFFFFFFF8;
  }
  v8 = a2[2];
  *(_QWORD *)(result + 16) = v8;
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      *(_QWORD *)(result + 16) &= 0xFFFFFFFFFFFFFFF8;
  }
  v11 = a2[3];
  *(_QWORD *)(result + 24) = v11;
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 2, v12));
    if ((v13 & 1) == 0)
      *(_QWORD *)(result + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  v14 = *((_OWORD *)a2 + 3);
  *(_OWORD *)(result + 32) = *((_OWORD *)a2 + 2);
  *(_OWORD *)(result + 48) = v14;
  v15 = a2[8];
  *(_QWORD *)(result + 64) = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 - 16);
    if (*(_QWORD *)(result + 56))
      v16 = *(unint64_t **)(result + 56);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v18 = *(_OWORD *)(a2 + 9);
  *(_OWORD *)(result + 88) = *(_OWORD *)(a2 + 11);
  *(_OWORD *)(result + 72) = v18;
  v19 = a2[13];
  *(_QWORD *)(result + 104) = v19;
  if (v19)
  {
    v20 = (unint64_t *)(v19 - 16);
    if (*(_QWORD *)(result + 96))
      v20 = *(unint64_t **)(result + 96);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v22 = *((_OWORD *)a2 + 8);
  *(_OWORD *)(result + 112) = *((_OWORD *)a2 + 7);
  *(_OWORD *)(result + 128) = v22;
  v23 = a2[18];
  *(_QWORD *)(result + 144) = v23;
  if (v23)
  {
    v24 = (unint64_t *)(v23 - 16);
    if (*(_QWORD *)(result + 136))
      v24 = *(unint64_t **)(result + 136);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  v26 = *(_OWORD *)(a2 + 19);
  *(_OWORD *)(result + 168) = *(_OWORD *)(a2 + 21);
  *(_OWORD *)(result + 152) = v26;
  v27 = a2[23];
  *(_QWORD *)(result + 184) = v27;
  if (v27)
  {
    v28 = (unint64_t *)(v27 - 16);
    if (*(_QWORD *)(result + 176))
      v28 = *(unint64_t **)(result + 176);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v30 = *((_OWORD *)a2 + 13);
  *(_OWORD *)(result + 192) = *((_OWORD *)a2 + 12);
  *(_OWORD *)(result + 208) = v30;
  v31 = a2[28];
  *(_QWORD *)(result + 224) = v31;
  if (v31)
  {
    v32 = (unint64_t *)(v31 - 16);
    if (*(_QWORD *)(result + 216))
      v32 = *(unint64_t **)(result + 216);
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *sub_20C7D9220(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *result;
  void *v4;

  result = sub_20C7D9268();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType::~PxOsdOpenSubdivTokens_StaticTokenType(result);
    operator delete(v4);
  }
  return (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load(a1);
}

pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *sub_20C7D9268()
{
  pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *v0;

  v0 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)operator new(0x98uLL);
  pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType::PxOsdOpenSubdivTokens_StaticTokenType(v0);
  return v0;
}

void sub_20C7D9294(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20C7D92A8()
{
  void *__p;
  uint64_t v1;
  uint64_t v2;
  void *v3[2];
  char v4;

  sub_20BDDC0E4(v3, "PxOsdMeshTopologyValidation::Code::InvalidScheme");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C54BAE8, 0, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "PxOsdMeshTopologyValidation::Code::InvalidOrientation");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C54BAE8, 1, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "PxOsdMeshTopologyValidation::Code::InvalidTriangleSubdivision");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C54BAE8, 2, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "PxOsdMeshTopologyValidation::Code::InvalidVertexInterpolationRule");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C54BAE8, 3, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "PxOsdMeshTopologyValidation::Code::InvalidFaceVaryingInterpolationRule");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C54BAE8, 4, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "PxOsdMeshTopologyValidation::Code::InvalidCreaseMethod");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C54BAE8, 5, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "PxOsdMeshTopologyValidation::Code::InvalidCreaseLengthElement");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C54BAE8, 6, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "PxOsdMeshTopologyValidation::Code::InvalidCreaseIndicesSize");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C54BAE8, 7, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "PxOsdMeshTopologyValidation::Code::InvalidCreaseIndicesElement");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C54BAE8, 8, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "PxOsdMeshTopologyValidation::Code::InvalidCreaseWeightsSize");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C54BAE8, 9, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "PxOsdMeshTopologyValidation::Code::NegativeCreaseWeights");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C54BAE8, 10, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "PxOsdMeshTopologyValidation::Code::InvalidCornerIndicesElement");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C54BAE8, 11, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "PxOsdMeshTopologyValidation::Code::NegativeCornerWeights");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C54BAE8, 12, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "PxOsdMeshTopologyValidation::Code::InvalidCornerWeightsSize");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C54BAE8, 13, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "PxOsdMeshTopologyValidation::Code::InvalidFaceVertexCountsElement");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C54BAE8, 15, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "PxOsdMeshTopologyValidation::Code::InvalidFaceVertexIndicesElement");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C54BAE8, 16, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "PxOsdMeshTopologyValidation::Code::InvalidFaceVertexIndicesSize");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C54BAE8, 17, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
}

void sub_20C7D9818(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void ***pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation::PxOsdMeshTopologyValidation(void ***this, const pxrInternal__aapl__pxrReserved__::PxOsdMeshTopology *a2)
{
  char *v4;
  char *v5;

  *this = 0;
  pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation::_ValidateScheme(this, a2);
  pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation::_ValidateOrientation(this, a2);
  pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation::_ValidateTriangleSubdivision(this, (unsigned int **)a2);
  pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation::_ValidateVertexInterpolation(this, (unsigned int **)a2);
  pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation::_ValidateFaceVaryingInterpolation(this, (unsigned int **)a2);
  pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation::_ValidateCreaseMethod(this, (unsigned int **)a2);
  pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation::_ValidateCreasesAndCorners(this, a2, v4);
  pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation::_ValidateHoles(this, a2);
  pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation::_ValidateFaceVertexCounts(this, a2);
  pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation::_ValidateFaceVertexIndices(this, a2, v5);
  return this;
}

void sub_20C7D991C(_Unwind_Exception *a1)
{
  void ***v1;

  sub_20C1421A8(v1, 0);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation::_ValidateScheme(void ***this, const pxrInternal__aapl__pxrReserved__::PxOsdMeshTopology *a2)
{
  unsigned __int8 v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation *v8;
  const pxrInternal__aapl__pxrReserved__::PxOsdMeshTopology *v9;
  int v10;
  int v11;
  pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;

  v2 = atomic_load((unsigned __int8 *)&qword_25498D490);
  if ((v2 & 1) == 0)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation *)this;
    v9 = a2;
    v10 = __cxa_guard_acquire(&qword_25498D490);
    a2 = v9;
    v11 = v10;
    this = (void ***)v8;
    if (v11)
    {
      v12 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      if (!v12)
        v12 = sub_20C7D9220(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      v13 = *((_QWORD *)v12 + 7);
      qword_25498D478 = v13;
      if ((v13 & 7) != 0)
      {
        v14 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 2, v14));
        if ((v15 & 1) == 0)
          qword_25498D478 &= 0xFFFFFFFFFFFFFFF8;
      }
      v16 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      if (!v16)
        v16 = sub_20C7D9220(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      v17 = *((_QWORD *)v16 + 8);
      qword_25498D480 = v17;
      if ((v17 & 7) != 0)
      {
        v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 2, v18));
        if ((v19 & 1) == 0)
          qword_25498D480 &= 0xFFFFFFFFFFFFFFF8;
      }
      v20 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      if (!v20)
        v20 = sub_20C7D9220(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      v21 = *((_QWORD *)v20 + 6);
      qword_25498D488 = v21;
      if ((v21 & 7) != 0)
      {
        v22 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 2, v22));
        if ((v23 & 1) == 0)
          qword_25498D488 &= 0xFFFFFFFFFFFFFFF8;
      }
      __cxa_atexit((void (*)(void *))sub_20C7DB0C8, &qword_25498D478, &dword_20BDBC000);
      __cxa_guard_release(&qword_25498D490);
      this = (void ***)v8;
      a2 = v9;
    }
  }
  v3 = *(unsigned int **)a2;
  v24 = v3;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      v24 = v4;
  }
  sub_20C7DB0F8(this, 0, "scheme", &v24, (uint64_t)&qword_25498D478);
  if ((v24 & 7) != 0)
  {
    v6 = (unsigned int *)((unint64_t)v24 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
}

void sub_20C7D9B38(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498D490);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation::_ValidateOrientation(void ***this, const pxrInternal__aapl__pxrReserved__::PxOsdMeshTopology *a2)
{
  unsigned __int8 v2;
  const pxrInternal__aapl__pxrReserved__::PxOsdMeshTopology *v3;
  int v4;
  int v5;
  pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation *v14;

  v2 = atomic_load((unsigned __int8 *)&qword_25498D4A8);
  if ((v2 & 1) == 0)
  {
    v14 = (pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation *)this;
    v3 = a2;
    v4 = __cxa_guard_acquire(&qword_25498D4A8);
    a2 = v3;
    v5 = v4;
    this = (void ***)v14;
    if (v5)
    {
      v6 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      if (!v6)
        v6 = sub_20C7D9220(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      v7 = *((_QWORD *)v6 + 14);
      qword_25498D498 = v7;
      if ((v7 & 7) != 0)
      {
        v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 2, v8));
        if ((v9 & 1) == 0)
          qword_25498D498 &= 0xFFFFFFFFFFFFFFF8;
      }
      v10 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      if (!v10)
        v10 = sub_20C7D9220(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      v11 = *((_QWORD *)v10 + 13);
      qword_25498D4A0 = v11;
      if ((v11 & 7) != 0)
      {
        v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 2, v12));
        if ((v13 & 1) == 0)
          qword_25498D4A0 &= 0xFFFFFFFFFFFFFFF8;
      }
      __cxa_atexit((void (*)(void *))sub_20C7DB1B8, &qword_25498D498, &dword_20BDBC000);
      __cxa_guard_release(&qword_25498D4A8);
      this = (void ***)v14;
      a2 = v3;
    }
  }
  sub_20C7DB1E8(this, (const char *)1, "orientation", (_QWORD *)a2 + 1, (uint64_t)&qword_25498D498);
}

void sub_20C7D9CDC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  v3 = *(_QWORD *)(v1 + 1176);
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  __cxa_guard_abort(&qword_25498D4A8);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation::_ValidateTriangleSubdivision(void ***this, unsigned int **a2)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation *v9;
  const pxrInternal__aapl__pxrReserved__::PxOsdMeshTopology *v10;
  int v11;
  int v12;
  const pxrInternal__aapl__pxrReserved__::PxOsdMeshTopology *v13;
  int v14;
  int v15;
  pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation *v26;
  unsigned int *v27;

  v2 = atomic_load((unsigned __int8 *)&qword_25498D4B8);
  if ((v2 & 1) == 0)
  {
    v9 = (pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation *)this;
    v10 = (const pxrInternal__aapl__pxrReserved__::PxOsdMeshTopology *)a2;
    v11 = __cxa_guard_acquire(&qword_25498D4B8);
    a2 = (unsigned int **)v10;
    v12 = v11;
    this = (void ***)v9;
    if (v12)
    {
      __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_25498D4B0, &dword_20BDBC000);
      __cxa_guard_release(&qword_25498D4B8);
      a2 = (unsigned int **)v10;
      this = (void ***)v9;
    }
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498D4D8);
  if ((v3 & 1) == 0)
  {
    v26 = (pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation *)this;
    v13 = (const pxrInternal__aapl__pxrReserved__::PxOsdMeshTopology *)a2;
    v14 = __cxa_guard_acquire(&qword_25498D4D8);
    a2 = (unsigned int **)v13;
    v15 = v14;
    this = (void ***)v26;
    if (v15)
    {
      v16 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      if (!v16)
        v16 = sub_20C7D9220(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      v17 = *((_QWORD *)v16 + 7);
      qword_25498D4C0 = v17;
      if ((v17 & 7) != 0)
      {
        v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 2, v18));
        if ((v19 & 1) == 0)
          qword_25498D4C0 &= 0xFFFFFFFFFFFFFFF8;
      }
      v20 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      if (!v20)
        v20 = sub_20C7D9220(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      v21 = *((_QWORD *)v20 + 15);
      qword_25498D4C8 = v21;
      if ((v21 & 7) != 0)
      {
        v22 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 2, v22));
        if ((v23 & 1) == 0)
          qword_25498D4C8 &= 0xFFFFFFFFFFFFFFF8;
      }
      qword_25498D4D0 = qword_25498D4B0;
      if ((qword_25498D4B0 & 7) != 0)
      {
        v24 = (unsigned int *)(qword_25498D4B0 & 0xFFFFFFFFFFFFFFF8);
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 2, v24));
        if ((v25 & 1) == 0)
          qword_25498D4D0 &= 0xFFFFFFFFFFFFFFF8;
      }
      __cxa_atexit((void (*)(void *))sub_20C7DB0C8, &qword_25498D4C0, &dword_20BDBC000);
      __cxa_guard_release(&qword_25498D4D8);
      this = (void ***)v26;
      a2 = (unsigned int **)v13;
    }
  }
  v4 = a2[20];
  v27 = v4;
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 2, v5));
    if ((v6 & 1) == 0)
      v27 = v5;
  }
  sub_20C7DB0F8(this, (const char *)2, "triangle subdivision", &v27, (uint64_t)&qword_25498D4C0);
  if ((v27 & 7) != 0)
  {
    v7 = (unsigned int *)((unint64_t)v27 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
}

void sub_20C7D9F68(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  v3 = *(_QWORD *)(v1 + 1216);
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  __cxa_guard_abort(&qword_25498D4D8);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation::_ValidateVertexInterpolation(void ***this, unsigned int **a2)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation *v9;
  const pxrInternal__aapl__pxrReserved__::PxOsdMeshTopology *v10;
  int v11;
  int v12;
  pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation *v13;
  const pxrInternal__aapl__pxrReserved__::PxOsdMeshTopology *v14;
  int v15;
  int v16;
  pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *v31;

  v2 = atomic_load((unsigned __int8 *)&qword_25498D4E8);
  if ((v2 & 1) == 0)
  {
    v9 = (pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation *)this;
    v10 = (const pxrInternal__aapl__pxrReserved__::PxOsdMeshTopology *)a2;
    v11 = __cxa_guard_acquire(&qword_25498D4E8);
    a2 = (unsigned int **)v10;
    v12 = v11;
    this = (void ***)v9;
    if (v12)
    {
      __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_25498D4E0, &dword_20BDBC000);
      __cxa_guard_release(&qword_25498D4E8);
      a2 = (unsigned int **)v10;
      this = (void ***)v9;
    }
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498D510);
  if ((v3 & 1) == 0)
  {
    v13 = (pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation *)this;
    v14 = (const pxrInternal__aapl__pxrReserved__::PxOsdMeshTopology *)a2;
    v15 = __cxa_guard_acquire(&qword_25498D510);
    a2 = (unsigned int **)v14;
    v16 = v15;
    this = (void ***)v13;
    if (v16)
    {
      v17 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      if (!v17)
        v17 = sub_20C7D9220(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      v18 = *((_QWORD *)v17 + 1);
      qword_25498D4F0 = v18;
      if ((v18 & 7) != 0)
      {
        v19 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 2, v19));
        if ((v20 & 1) == 0)
          qword_25498D4F0 &= 0xFFFFFFFFFFFFFFF8;
      }
      v21 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      if (!v21)
        v21 = sub_20C7D9220(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      v22 = *((_QWORD *)v21 + 10);
      qword_25498D4F8 = v22;
      if ((v22 & 7) != 0)
      {
        v23 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 2, v23));
        if ((v24 & 1) == 0)
          qword_25498D4F8 &= 0xFFFFFFFFFFFFFFF8;
      }
      v25 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      if (!v25)
        v25 = sub_20C7D9220(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      v26 = *((_QWORD *)v25 + 9);
      qword_25498D500 = v26;
      if ((v26 & 7) != 0)
      {
        v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 2, v27));
        if ((v28 & 1) == 0)
          qword_25498D500 &= 0xFFFFFFFFFFFFFFF8;
      }
      qword_25498D508 = qword_25498D4E0;
      if ((qword_25498D4E0 & 7) != 0)
      {
        v29 = (unsigned int *)(qword_25498D4E0 & 0xFFFFFFFFFFFFFFF8);
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 2, v29));
        if ((v30 & 1) == 0)
          qword_25498D508 &= 0xFFFFFFFFFFFFFFF8;
      }
      __cxa_atexit((void (*)(void *))sub_20C7DB2A8, &qword_25498D4F0, &dword_20BDBC000);
      __cxa_guard_release(&qword_25498D510);
      this = (void ***)v13;
      a2 = (unsigned int **)v14;
    }
  }
  v4 = a2[17];
  v31 = v4;
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 2, v5));
    if ((v6 & 1) == 0)
      v31 = v5;
  }
  sub_20C7DB2D8(this, (const char *)3, "vertex interpolation rule", &v31, (uint64_t)&qword_25498D4F0);
  if ((v31 & 7) != 0)
  {
    v7 = (unsigned int *)((unint64_t)v31 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
}

void sub_20C7DA27C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498D510);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation::_ValidateFaceVaryingInterpolation(void ***this, unsigned int **a2)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation *v9;
  const pxrInternal__aapl__pxrReserved__::PxOsdMeshTopology *v10;
  int v11;
  int v12;
  pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation *v13;
  const pxrInternal__aapl__pxrReserved__::PxOsdMeshTopology *v14;
  int v15;
  int v16;
  pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int *v43;

  v2 = atomic_load((unsigned __int8 *)&qword_25498D520);
  if ((v2 & 1) == 0)
  {
    v9 = (pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation *)this;
    v10 = (const pxrInternal__aapl__pxrReserved__::PxOsdMeshTopology *)a2;
    v11 = __cxa_guard_acquire(&qword_25498D520);
    a2 = (unsigned int **)v10;
    v12 = v11;
    this = (void ***)v9;
    if (v12)
    {
      __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_25498D518, &dword_20BDBC000);
      __cxa_guard_release(&qword_25498D520);
      a2 = (unsigned int **)v10;
      this = (void ***)v9;
    }
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498D560);
  if ((v3 & 1) == 0)
  {
    v13 = (pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation *)this;
    v14 = (const pxrInternal__aapl__pxrReserved__::PxOsdMeshTopology *)a2;
    v15 = __cxa_guard_acquire(&qword_25498D560);
    a2 = (unsigned int **)v14;
    v16 = v15;
    this = (void ***)v13;
    if (v16)
    {
      v17 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      if (!v17)
        v17 = sub_20C7D9220(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      v18 = *((_QWORD *)v17 + 1);
      qword_25498D528 = v18;
      if ((v18 & 7) != 0)
      {
        v19 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 2, v19));
        if ((v20 & 1) == 0)
          qword_25498D528 &= 0xFFFFFFFFFFFFFFF8;
      }
      v21 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      if (!v21)
        v21 = sub_20C7D9220(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      v22 = *(_QWORD *)v21;
      qword_25498D530 = v22;
      if ((v22 & 7) != 0)
      {
        v23 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 2, v23));
        if ((v24 & 1) == 0)
          qword_25498D530 &= 0xFFFFFFFFFFFFFFF8;
      }
      v25 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      if (!v25)
        v25 = sub_20C7D9220(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      v26 = *((_QWORD *)v25 + 5);
      qword_25498D538 = v26;
      if ((v26 & 7) != 0)
      {
        v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 2, v27));
        if ((v28 & 1) == 0)
          qword_25498D538 &= 0xFFFFFFFFFFFFFFF8;
      }
      v29 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      if (!v29)
        v29 = sub_20C7D9220(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      v30 = *((_QWORD *)v29 + 2);
      qword_25498D540 = v30;
      if ((v30 & 7) != 0)
      {
        v31 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 2, v31));
        if ((v32 & 1) == 0)
          qword_25498D540 &= 0xFFFFFFFFFFFFFFF8;
      }
      v33 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      if (!v33)
        v33 = sub_20C7D9220(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      v34 = *((_QWORD *)v33 + 3);
      qword_25498D548 = v34;
      if ((v34 & 7) != 0)
      {
        v35 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 2, v35));
        if ((v36 & 1) == 0)
          qword_25498D548 &= 0xFFFFFFFFFFFFFFF8;
      }
      v37 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      if (!v37)
        v37 = sub_20C7D9220(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      v38 = *((_QWORD *)v37 + 4);
      qword_25498D550 = v38;
      if ((v38 & 7) != 0)
      {
        v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
        do
          v40 = __ldxr(v39);
        while (__stxr(v40 + 2, v39));
        if ((v40 & 1) == 0)
          qword_25498D550 &= 0xFFFFFFFFFFFFFFF8;
      }
      qword_25498D558 = qword_25498D518;
      if ((qword_25498D518 & 7) != 0)
      {
        v41 = (unsigned int *)(qword_25498D518 & 0xFFFFFFFFFFFFFFF8);
        do
          v42 = __ldxr(v41);
        while (__stxr(v42 + 2, v41));
        if ((v42 & 1) == 0)
          qword_25498D558 &= 0xFFFFFFFFFFFFFFF8;
      }
      __cxa_atexit((void (*)(void *))sub_20C7DB398, &qword_25498D528, &dword_20BDBC000);
      __cxa_guard_release(&qword_25498D560);
      this = (void ***)v13;
      a2 = (unsigned int **)v14;
    }
  }
  v4 = a2[18];
  v43 = v4;
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 2, v5));
    if ((v6 & 1) == 0)
      v43 = v5;
  }
  sub_20C7DB3C8(this, (const char *)4, "face varying interpolation rule", &v43, (uint64_t)&qword_25498D528);
  if ((v43 & 7) != 0)
  {
    v7 = (unsigned int *)((unint64_t)v43 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
}

void sub_20C7DA680(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498D560);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation::_ValidateCreaseMethod(void ***this, unsigned int **a2)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation *v9;
  const pxrInternal__aapl__pxrReserved__::PxOsdMeshTopology *v10;
  int v11;
  int v12;
  const pxrInternal__aapl__pxrReserved__::PxOsdMeshTopology *v13;
  int v14;
  int v15;
  pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation *v26;
  unsigned int *v27;

  v2 = atomic_load((unsigned __int8 *)&qword_25498D570);
  if ((v2 & 1) == 0)
  {
    v9 = (pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation *)this;
    v10 = (const pxrInternal__aapl__pxrReserved__::PxOsdMeshTopology *)a2;
    v11 = __cxa_guard_acquire(&qword_25498D570);
    a2 = (unsigned int **)v10;
    v12 = v11;
    this = (void ***)v9;
    if (v12)
    {
      __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_25498D568, &dword_20BDBC000);
      __cxa_guard_release(&qword_25498D570);
      a2 = (unsigned int **)v10;
      this = (void ***)v9;
    }
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25498D590);
  if ((v3 & 1) == 0)
  {
    v26 = (pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation *)this;
    v13 = (const pxrInternal__aapl__pxrReserved__::PxOsdMeshTopology *)a2;
    v14 = __cxa_guard_acquire(&qword_25498D590);
    a2 = (unsigned int **)v13;
    v15 = v14;
    this = (void ***)v26;
    if (v15)
    {
      v16 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      if (!v16)
        v16 = sub_20C7D9220(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      v17 = *((_QWORD *)v16 + 11);
      qword_25498D578 = v17;
      if ((v17 & 7) != 0)
      {
        v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 2, v18));
        if ((v19 & 1) == 0)
          qword_25498D578 &= 0xFFFFFFFFFFFFFFF8;
      }
      v20 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      if (!v20)
        v20 = sub_20C7D9220(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      v21 = *((_QWORD *)v20 + 12);
      qword_25498D580 = v21;
      if ((v21 & 7) != 0)
      {
        v22 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 2, v22));
        if ((v23 & 1) == 0)
          qword_25498D580 &= 0xFFFFFFFFFFFFFFF8;
      }
      qword_25498D588 = qword_25498D568;
      if ((qword_25498D568 & 7) != 0)
      {
        v24 = (unsigned int *)(qword_25498D568 & 0xFFFFFFFFFFFFFFF8);
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 2, v24));
        if ((v25 & 1) == 0)
          qword_25498D588 &= 0xFFFFFFFFFFFFFFF8;
      }
      __cxa_atexit((void (*)(void *))sub_20C7DB0C8, &qword_25498D578, &dword_20BDBC000);
      __cxa_guard_release(&qword_25498D590);
      this = (void ***)v26;
      a2 = (unsigned int **)v13;
    }
  }
  v4 = a2[19];
  v27 = v4;
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 2, v5));
    if ((v6 & 1) == 0)
      v27 = v5;
  }
  sub_20C7DB0F8(this, (const char *)5, "crease method", &v27, (uint64_t)&qword_25498D578);
  if ((v27 & 7) != 0)
  {
    v7 = (unsigned int *)((unint64_t)v27 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
}

void sub_20C7DA91C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  v3 = *(_QWORD *)(v1 + 1400);
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  __cxa_guard_abort(&qword_25498D590);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation::_ValidateCreasesAndCorners(void ***this, const pxrInternal__aapl__pxrReserved__::PxOsdMeshTopology *a2, char *a3)
{
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float *v18;
  uint64_t v19;
  uint64_t v20;
  float *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int *v25;
  int *v26;
  int v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  int *v31;
  char *v32;
  int v33;
  uint64_t v34;
  int *v35;
  int *v36;
  int v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  int *v41;
  char *v42;
  int v43;
  void *v44;
  char *v45;
  uint64_t v46;
  int v47;
  void *__p[2];
  char v49;

  v5 = *((_QWORD *)a2 + 26);
  if (v5)
  {
    v6 = 0;
    v7 = (int *)*((_QWORD *)a2 + 30);
    while (v7[v6] > 1)
    {
      if (v5 == ++v6)
        goto LABEL_5;
    }
    v47 = 6;
    sub_20BDDC0E4(__p, "Crease lengths must be greater than or equal to 2.");
    sub_20C7DB488(this, (uint64_t)&v47);
    if (v49 < 0)
      operator delete(__p[0]);
    v7 = (int *)*((_QWORD *)a2 + 30);
    v5 = *((_QWORD *)a2 + 26);
    if (v5)
    {
LABEL_5:
      v8 = 0;
      v9 = 4 * v5;
      do
      {
        v10 = *v7++;
        v8 += v10;
        v9 -= 4;
      }
      while (v9);
      goto LABEL_12;
    }
  }
  v8 = 0;
LABEL_12:
  v11 = v8;
  v12 = *((_QWORD *)a2 + 21);
  if (v12 != v8)
  {
    v47 = 7;
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Crease indices size '%zu' doesn't match expected '%zu'.", (const char *)a2, a3, v12, v8);
    sub_20C7DB488(this, (uint64_t)&v47);
    if (v49 < 0)
      operator delete(__p[0]);
  }
  v13 = *((_QWORD *)a2 + 31);
  if (v13 != v11 - v5 && v13 != v5)
  {
    v47 = 9;
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Crease weights size '%zu' doesn't match either per edge '%zu' or per crease '%zu' sizes.", (const char *)a2, a3, v13, v11 - v5, v5);
    sub_20C7DB488(this, (uint64_t)&v47);
    if (v49 < 0)
      operator delete(__p[0]);
  }
  v15 = *((_QWORD *)a2 + 36);
  v16 = *((_QWORD *)a2 + 41);
  if (v15 != v16)
  {
    v47 = 13;
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Corner weights size '%zu' doesn't match expected '%zu'.", (const char *)a2, a3, v15, v16);
    sub_20C7DB488(this, (uint64_t)&v47);
    if (v49 < 0)
      operator delete(__p[0]);
  }
  v17 = *((_QWORD *)a2 + 31);
  if (v17)
  {
    v18 = (float *)*((_QWORD *)a2 + 35);
    v19 = 4 * v17;
    while (*v18 >= 0.0)
    {
      ++v18;
      v19 -= 4;
      if (!v19)
        goto LABEL_31;
    }
    v47 = 10;
    sub_20BDDC0E4(__p, "Negative crease weights.");
    sub_20C7DB488(this, (uint64_t)&v47);
    if (v49 < 0)
      operator delete(__p[0]);
  }
LABEL_31:
  v20 = *((_QWORD *)a2 + 41);
  if (v20)
  {
    v21 = (float *)*((_QWORD *)a2 + 45);
    v22 = 4 * v20;
    while (*v21 >= 0.0)
    {
      ++v21;
      v22 -= 4;
      if (!v22)
        goto LABEL_38;
    }
    v47 = 12;
    sub_20BDDC0E4(__p, "Negative corner weights.");
    sub_20C7DB488(this, (uint64_t)&v47);
    if (v49 < 0)
      operator delete(__p[0]);
  }
LABEL_38:
  v44 = 0;
  v45 = 0;
  v46 = 0;
  sub_20BE8B37C((char *)&v44, *((char **)a2 + 11), *((_QWORD *)a2 + 11) + 4 * *((_QWORD *)a2 + 7), *((_QWORD *)a2 + 7));
  std::__sort<std::__less<int,int> &,int *>();
  v23 = *((_QWORD *)a2 + 36);
  v24 = (char *)v44;
  if (v23)
  {
    if (v45 != v44)
    {
      v25 = (int *)*((_QWORD *)a2 + 40);
      v26 = &v25[v23];
      while (1)
      {
        v27 = *v25;
        v28 = (char *)v44;
        v29 = (v45 - (_BYTE *)v44) >> 2;
        do
        {
          v30 = v29 >> 1;
          v31 = (int *)&v28[4 * (v29 >> 1)];
          v33 = *v31;
          v32 = (char *)(v31 + 1);
          v29 += ~(v29 >> 1);
          if (v33 < v27)
            v28 = v32;
          else
            v29 = v30;
        }
        while (v29);
        if (v28 == v45 || *(_DWORD *)v28 > v27)
          break;
        if (++v25 == v26)
          goto LABEL_53;
      }
    }
    v47 = 11;
    sub_20BDDC0E4(__p, "Corner index element missing from face vertex indices array.");
    sub_20C7DB488(this, (uint64_t)&v47);
    if (v49 < 0)
      operator delete(__p[0]);
    v24 = (char *)v44;
  }
LABEL_53:
  v34 = *((_QWORD *)a2 + 21);
  if (v34)
  {
    if (v45 != v24)
    {
      v35 = (int *)*((_QWORD *)a2 + 25);
      v36 = &v35[v34];
      while (1)
      {
        v37 = *v35;
        v38 = v24;
        v39 = (v45 - v24) >> 2;
        do
        {
          v40 = v39 >> 1;
          v41 = (int *)&v38[4 * (v39 >> 1)];
          v43 = *v41;
          v42 = (char *)(v41 + 1);
          v39 += ~(v39 >> 1);
          if (v43 < v37)
            v38 = v42;
          else
            v39 = v40;
        }
        while (v39);
        if (v38 == v45 || *(_DWORD *)v38 > v37)
          break;
        if (++v35 == v36)
          goto LABEL_68;
      }
    }
    v47 = 8;
    sub_20BDDC0E4(__p, "Crease index element missing from face vertex indices array.");
    sub_20C7DB488(this, (uint64_t)&v47);
    if (v49 < 0)
      operator delete(__p[0]);
    v24 = (char *)v44;
  }
LABEL_68:
  if (v24)
  {
    v45 = v24;
    operator delete(v24);
  }
}

void sub_20C7DAD9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation::_ValidateHoles(void ***this, const pxrInternal__aapl__pxrReserved__::PxOsdMeshTopology *a2)
{
  uint64_t v2;
  _DWORD *v5;
  _DWORD *v6;
  const char *v7;
  char *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  void *__p;
  char v13;
  char v14;

  v2 = *((_QWORD *)a2 + 12);
  if (v2)
  {
    v5 = (_DWORD *)*((_QWORD *)a2 + 16);
    v14 = 0;
    v6 = sub_20C6CC340(v5, &v5[v2]);
    v9 = v7;
    if ((*v6 & 0x80000000) != 0)
    {
      LODWORD(v11) = 14;
      sub_20BDDC0E4(&__p, "Hole indices cannot be negative.");
      sub_20C7DB488(this, (uint64_t)&v11);
      if (v13 < 0)
        operator delete(__p);
    }
    v10 = *((_QWORD *)a2 + 2);
    if (*(_DWORD *)v9 >= (int)v10)
    {
      LODWORD(v11) = 14;
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Hole indices must be less than face count '%zu'.", v7, v8, v10, v11);
      sub_20C7DB488(this, (uint64_t)&v11);
      if (v13 < 0)
        operator delete(__p);
    }
  }
}

void sub_20C7DAEE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation::_ValidateFaceVertexCounts(void ***this, const pxrInternal__aapl__pxrReserved__::PxOsdMeshTopology *a2)
{
  uint64_t v2;
  int *v4;
  uint64_t v5;
  int v6;
  void *__p;
  char v8;

  v2 = *((_QWORD *)a2 + 2);
  if (v2)
  {
    v4 = (int *)*((_QWORD *)a2 + 6);
    v5 = 4 * v2;
    while (*v4 > 2)
    {
      ++v4;
      v5 -= 4;
      if (!v5)
        return;
    }
    v6 = 15;
    sub_20BDDC0E4(&__p, "Face vertex counts must be greater than 2.");
    sub_20C7DB488(this, (uint64_t)&v6);
    if (v8 < 0)
      operator delete(__p);
  }
}

void sub_20C7DAF8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::PxOsdMeshTopologyValidation::_ValidateFaceVertexIndices(void ***this, const pxrInternal__aapl__pxrReserved__::PxOsdMeshTopology *a2, char *a3)
{
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *__p;
  char v16;

  v5 = *((_QWORD *)a2 + 7);
  if (v5)
  {
    v6 = (_DWORD *)*((_QWORD *)a2 + 11);
    v7 = 4 * v5;
    while ((*v6 & 0x80000000) == 0)
    {
      ++v6;
      v7 -= 4;
      if (!v7)
        goto LABEL_8;
    }
    LODWORD(v14) = 16;
    sub_20BDDC0E4(&__p, "Face vertex indices element must be greater than 0.");
    sub_20C7DB488(this, (uint64_t)&v14);
    if (v16 < 0)
      operator delete(__p);
  }
LABEL_8:
  v8 = *((_QWORD *)a2 + 2);
  if (v8)
  {
    LODWORD(v9) = 0;
    v10 = (int *)*((_QWORD *)a2 + 6);
    v11 = 4 * v8;
    do
    {
      v12 = *v10++;
      v9 = v12 + (int)v9;
      v11 -= 4;
    }
    while (v11);
  }
  else
  {
    v9 = 0;
  }
  v13 = *((_QWORD *)a2 + 7);
  if (v13 != v9)
  {
    LODWORD(v14) = 17;
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Face vertex indices size '%zu' does not match expected size '%zu'.", (const char *)a2, a3, v13, v9, v14);
    sub_20C7DB488(this, (uint64_t)&v14);
    if (v16 < 0)
      operator delete(__p);
  }
}

void sub_20C7DB0A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C7DB0C8(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  v1 = result + 24;
  do
  {
    v3 = *(_QWORD *)(v1 - 8);
    v1 -= 8;
    v2 = v3;
    if ((v3 & 7) != 0)
    {
      v4 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
      do
        v5 = __ldxr(v4);
      while (__stlxr(v5 - 2, v4));
    }
  }
  while (v1 != result);
  return result;
}

void sub_20C7DB0F8(void ***a1, const char *a2, char *a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v6;
  unint64_t v7;
  const char *v8;
  void *v9[3];
  char v10;

  v6 = 0;
  v7 = *a4 & 0xFFFFFFFFFFFFFFF8;
  while (v7 != (*(_QWORD *)(a5 + v6) & 0xFFFFFFFFFFFFFFF8))
  {
    v6 += 8;
    if (v6 == 24)
    {
      LODWORD(v9[0]) = (_DWORD)a2;
      if (v7)
      {
        v8 = (const char *)(v7 + 16);
        if (*(char *)(v7 + 39) < 0)
          v8 = *(const char **)v8;
      }
      else
      {
        v8 = "";
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"'%s' is not a valid '%s' token.", a2, a3, v8, a3, v9[0]);
      sub_20C7DB488(a1, (uint64_t)v9);
      if (v10 < 0)
        operator delete(v9[1]);
      return;
    }
  }
}

void sub_20C7DB19C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C7DB1B8(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  v1 = result + 16;
  do
  {
    v3 = *(_QWORD *)(v1 - 8);
    v1 -= 8;
    v2 = v3;
    if ((v3 & 7) != 0)
    {
      v4 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
      do
        v5 = __ldxr(v4);
      while (__stlxr(v5 - 2, v4));
    }
  }
  while (v1 != result);
  return result;
}

void sub_20C7DB1E8(void ***a1, const char *a2, char *a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v6;
  unint64_t v7;
  const char *v8;
  void *v9[3];
  char v10;

  v6 = 0;
  v7 = *a4 & 0xFFFFFFFFFFFFFFF8;
  while (v7 != (*(_QWORD *)(a5 + v6) & 0xFFFFFFFFFFFFFFF8))
  {
    v6 += 8;
    if (v6 == 16)
    {
      LODWORD(v9[0]) = (_DWORD)a2;
      if (v7)
      {
        v8 = (const char *)(v7 + 16);
        if (*(char *)(v7 + 39) < 0)
          v8 = *(const char **)v8;
      }
      else
      {
        v8 = "";
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"'%s' is not a valid '%s' token.", a2, a3, v8, a3, v9[0]);
      sub_20C7DB488(a1, (uint64_t)v9);
      if (v10 < 0)
        operator delete(v9[1]);
      return;
    }
  }
}

void sub_20C7DB28C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C7DB2A8(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  v1 = result + 32;
  do
  {
    v3 = *(_QWORD *)(v1 - 8);
    v1 -= 8;
    v2 = v3;
    if ((v3 & 7) != 0)
    {
      v4 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
      do
        v5 = __ldxr(v4);
      while (__stlxr(v5 - 2, v4));
    }
  }
  while (v1 != result);
  return result;
}

void sub_20C7DB2D8(void ***a1, const char *a2, char *a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v6;
  unint64_t v7;
  const char *v8;
  void *v9[3];
  char v10;

  v6 = 0;
  v7 = *a4 & 0xFFFFFFFFFFFFFFF8;
  while (v7 != (*(_QWORD *)(a5 + v6) & 0xFFFFFFFFFFFFFFF8))
  {
    v6 += 8;
    if (v6 == 32)
    {
      LODWORD(v9[0]) = (_DWORD)a2;
      if (v7)
      {
        v8 = (const char *)(v7 + 16);
        if (*(char *)(v7 + 39) < 0)
          v8 = *(const char **)v8;
      }
      else
      {
        v8 = "";
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"'%s' is not a valid '%s' token.", a2, a3, v8, a3, v9[0]);
      sub_20C7DB488(a1, (uint64_t)v9);
      if (v10 < 0)
        operator delete(v9[1]);
      return;
    }
  }
}

void sub_20C7DB37C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C7DB398(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  v1 = result + 56;
  do
  {
    v3 = *(_QWORD *)(v1 - 8);
    v1 -= 8;
    v2 = v3;
    if ((v3 & 7) != 0)
    {
      v4 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
      do
        v5 = __ldxr(v4);
      while (__stlxr(v5 - 2, v4));
    }
  }
  while (v1 != result);
  return result;
}

void sub_20C7DB3C8(void ***a1, const char *a2, char *a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v6;
  unint64_t v7;
  const char *v8;
  void *v9[3];
  char v10;

  v6 = 0;
  v7 = *a4 & 0xFFFFFFFFFFFFFFF8;
  while (v7 != (*(_QWORD *)(a5 + v6) & 0xFFFFFFFFFFFFFFF8))
  {
    v6 += 8;
    if (v6 == 56)
    {
      LODWORD(v9[0]) = (_DWORD)a2;
      if (v7)
      {
        v8 = (const char *)(v7 + 16);
        if (*(char *)(v7 + 39) < 0)
          v8 = *(const char **)v8;
      }
      else
      {
        v8 = "";
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"'%s' is not a valid '%s' token.", a2, a3, v8, a3, v9[0]);
      sub_20C7DB488(a1, (uint64_t)v9);
      if (v10 < 0)
        operator delete(v9[1]);
      return;
    }
  }
}

void sub_20C7DB46C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C7DB488(void ***a1, uint64_t a2)
{
  void **v3;
  void **v5;
  void *v6;
  uint64_t result;

  v3 = *a1;
  if (!*a1)
  {
    v5 = (void **)operator new(0x18uLL);
    v5[1] = 0;
    v5[2] = 0;
    *v5 = 0;
    sub_20C1421A8(a1, v5);
    v3 = *a1;
  }
  v6 = v3[1];
  if (v6 >= v3[2])
  {
    result = sub_20C7DB568((uint64_t *)v3, a2);
  }
  else
  {
    sub_20C7DB500((uint64_t)v3, a2);
    result = (uint64_t)v6 + 32;
  }
  v3[1] = (void *)result;
  return result;
}

_BYTE *sub_20C7DB500(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _BYTE *result;
  __int128 v5;

  v3 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)v3 = *(_DWORD *)a2;
  result = (_BYTE *)(v3 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    result = sub_20BDDBFAC(result, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(v3 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)result = v5;
  }
  *(_QWORD *)(a1 + 8) = v3 + 32;
  return result;
}

void sub_20C7DB560(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_20C7DB568(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  _BYTE *v12;
  __int128 v13;
  uint64_t v14;
  _QWORD v16[2];
  char *v17;
  char *v18;
  uint64_t *v19;

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 5;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 4 > v5)
    v5 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v19 = a1 + 2;
  if (v9)
    v10 = (char *)sub_20BED2F10(v7, v9);
  else
    v10 = 0;
  v11 = &v10[32 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v17 = v11;
  v18 = &v10[32 * v9];
  *(_DWORD *)v11 = *(_DWORD *)a2;
  v12 = v11 + 8;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_20BDDBFAC(v12, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
    v11 = v17;
  }
  else
  {
    v13 = *(_OWORD *)(a2 + 8);
    *((_QWORD *)v11 + 3) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)v12 = v13;
  }
  v17 = v11 + 32;
  sub_20C7DB674(a1, v16);
  v14 = a1[1];
  sub_20BF2405C((uint64_t)v16);
  return v14;
}

void sub_20C7DB660(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF2405C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C7DB674(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C7DB6E8((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C7DB6E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v8 = a7;
    do
    {
      v9 = *(_DWORD *)(a3 - 32);
      a3 -= 32;
      *(_DWORD *)(v8 - 32) = v9;
      v8 -= 32;
      v10 = *(_OWORD *)(a3 + 8);
      *(_QWORD *)(v8 + 24) = *(_QWORD *)(a3 + 24);
      *(_OWORD *)(v8 + 8) = v10;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 8) = 0;
      v7 -= 32;
    }
    while (a3 != a5);
    *((_QWORD *)&v16 + 1) = v8;
    v11 = v16;
  }
  v14 = 1;
  sub_20C7DB788((uint64_t)v13);
  return v11;
}

uint64_t sub_20C7DB788(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20BF24018(a1);
  return a1;
}

void pxrInternal__aapl__pxrReserved__::PxOsdRefinerFactory::Create(uint64_t *a1@<X0>, unint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9[3];
  void **v10;

  memset(v9, 0, sizeof(v9));
  v3 = *a2;
  v8 = v3;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
    {
      v8 = v3 & 0xFFFFFFFFFFFFFFF8;
      v3 &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  pxrInternal__aapl__pxrReserved__::PxOsdRefinerFactory::Create(a1, v9, (char *)&v8, a3);
  if ((v3 & 7) != 0)
  {
    v6 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v10 = (void **)v9;
  sub_20C642144(&v10);
}

void sub_20C7DB84C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v15;
  unsigned int v16;

  v13 = v11;
  if ((v13 & 7) != 0)
  {
    v15 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  *(_QWORD *)(v12 - 24) = &a11;
  sub_20C642144((void ***)(v12 - 24));
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::PxOsdRefinerFactory::Create@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *v14;
  unint64_t v15;
  pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *v16;
  pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  int v22;
  unint64_t v23;
  const char *v24;
  unint64_t v25;
  const char *v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *v31;
  unsigned int *v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *v36;
  pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *v37;
  unint64_t v38;
  pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *v39;
  pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *v40;
  const char *v41;
  int v42;
  unint64_t v43;
  const char *v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *v48;
  unint64_t v49;
  pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *v50;
  pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *v51;
  pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *v52;
  pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *v53;
  pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *v54;
  const char *v55;
  int v56;
  unint64_t v57;
  const char *v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *v62;
  unint64_t v63;
  pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *v64;
  const char *v65;
  int v66;
  unint64_t v67;
  const char *v68;
  uint64_t v69;
  unsigned int *v70;
  unsigned int v71;
  pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *v72;
  unint64_t v73;
  pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *v74;
  const char *v75;
  int v76;
  unint64_t v77;
  const char *v78;
  unsigned int v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int v86;
  int v87;
  uint64_t v88;
  int *v89;
  int *v90;
  char *v91;
  unint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  _DWORD *v98;
  int v99;
  uint64_t v100;
  int v101;
  unsigned int v102;
  __int16 v103;
  int *v104;
  int v105;
  int v106;
  int v107;
  uint64_t v108;
  unint64_t v109;
  OpenSubdiv::__aapl__::Far::TopologyRefiner *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int *v117;
  pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *v118;
  int *v119;
  uint64_t v120;
  int v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unsigned int *v127;
  uint64_t v128;
  _DWORD *v129;
  unint64_t v130;
  int *v131;
  int v132;
  int *v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t *v140;
  __int128 v141;
  uint64_t v142;
  unint64_t *v143;
  unint64_t v144;
  __int128 v145;
  uint64_t v146;
  unint64_t *v147;
  unint64_t v148;
  __int128 v149;
  uint64_t v150;
  unint64_t *v151;
  unint64_t v152;
  uint64_t v153;
  int v154;
  int *v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  int *v162;
  int v163;
  int v164;
  uint64_t v165;
  _QWORD **v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  unint64_t v171;
  const char *v172;
  int v173;
  unint64_t v174;
  const char *v175;
  unint64_t v176;
  const char *v177;
  unint64_t v178;
  const char *v179;
  __int128 v180;
  uint64_t v181;
  unint64_t *v182;
  unint64_t v183;
  __int128 v184;
  uint64_t v185;
  unint64_t *v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  const char *v192;
  unint64_t v193;
  const char *v194;
  __int128 v195;
  uint64_t v196;
  unint64_t *v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  const char *v204;
  OpenSubdiv::__aapl__::Far::TopologyRefiner *v205;
  OpenSubdiv::__aapl__::Far::TopologyRefiner *v206;
  uint64_t v207;
  uint64_t **v208;
  uint64_t v209;
  uint64_t v210;
  int *v211;
  int v212;
  int v213;
  int v214;
  uint64_t *v215;
  uint64_t v216;
  int v217;
  uint64_t *v218;
  pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  unint64_t v223;
  uint64_t *v224;
  _DWORD *v225;
  OpenSubdiv::__aapl__::Far::TopologyRefiner *v226;
  uint64_t v227;
  int v228;
  uint64_t v229;
  _DWORD *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  void *v235;
  _QWORD *result;
  unsigned int *v237;
  unsigned int v238;
  uint64_t *v239;
  _QWORD *v240;
  uint64_t v241;
  uint64_t v242;
  int v243;
  uint64_t v244;
  uint64_t v245;
  unsigned int v246;
  uint64_t v247;
  uint64_t *v248;
  OpenSubdiv::__aapl__::Far::TopologyRefiner *v249;
  uint64_t v250;
  uint64_t *v251;
  uint64_t *v252;
  __int128 v253;
  __int128 v254;
  uint64_t v255;
  uint64_t v256;
  int *v257;
  _QWORD v258[4];
  char v259;
  __int128 v260;
  __int128 v261;
  uint64_t v262;
  __int128 v263;
  __int128 v264;
  uint64_t v265;
  __int128 v266;
  __int128 v267;
  uint64_t v268;
  __int128 v269;
  __int128 v270;
  uint64_t v271;
  __int128 v272;
  __int128 v273;
  int *v274;

  v5 = *(_QWORD *)a3;
  if ((*(_QWORD *)a3 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v5 &= 0xFFFFFFFFFFFFFFF8;
  }
  v250 = v5;
  if ((v5 & 7) != 0)
  {
    v8 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      v250 &= 0xFFFFFFFFFFFFFFF8;
    v251 = a1;
    v252 = a2;
    do
      v10 = __ldxr(v8);
    while (__stlxr(v10 - 2, v8));
    a1 = v251;
  }
  else
  {
    v251 = a1;
    v252 = a2;
  }
  v11 = *a1;
  if ((*a1 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 2, v12));
    if ((v13 & 1) == 0)
      v11 &= 0xFFFFFFFFFFFFFFF8;
  }
  v14 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
  if (!v14)
    v14 = sub_20C7D9220(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
  v15 = v11 & 0xFFFFFFFFFFFFFFF8;
  if ((v11 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v14 + 7) & 0xFFFFFFFFFFFFFFF8))
  {
LABEL_44:
    v22 = 1;
    goto LABEL_53;
  }
  v16 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
  if (!v16)
    v16 = sub_20C7D9220(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
  if (v15 != (*((_QWORD *)v16 + 8) & 0xFFFFFFFFFFFFFFF8))
  {
    v17 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
    if (!v17)
      v17 = sub_20C7D9220(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
    if (v15 == (*((_QWORD *)v17 + 6) & 0xFFFFFFFFFFFFFFF8))
    {
      v22 = 0;
      goto LABEL_53;
    }
    *(_QWORD *)&v253 = "pxOsd/refinerFactory.cpp";
    *((_QWORD *)&v253 + 1) = "GetType";
    *(_QWORD *)&v254 = 80;
    *((_QWORD *)&v254 + 1) = "OpenSubdiv::Sdc::SchemeType pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Conver"
                             "ter::GetType() const";
    LOBYTE(v255) = 0;
    if (v15)
    {
      v18 = (const char *)(v15 + 16);
      if (*(char *)(v15 + 39) < 0)
        v18 = *(const char **)v18;
    }
    else
    {
      v18 = "";
    }
    v23 = v250 & 0xFFFFFFFFFFFFFFF8;
    if ((v250 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v24 = (const char *)(v23 + 16);
      if (*(char *)(v23 + 39) < 0)
        v24 = *(const char **)v24;
    }
    else
    {
      v24 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v253, (pxrInternal__aapl__pxrReserved__ *)"Unsupported scheme (%s) (%s)", a3, v18, v24);
    goto LABEL_44;
  }
  v19 = v251[2];
  if (v19 << 32)
  {
    v20 = 4 * (int)v19;
    v21 = (_DWORD *)v251[6];
    while (*v21 == 3)
    {
      ++v21;
      v20 -= 4;
      if (!v20)
        goto LABEL_52;
    }
  }
  else
  {
    v21 = (_DWORD *)v251[6];
  }
  if (v21 != (_DWORD *)(v251[6] + 4 * (int)v19))
  {
    *(_QWORD *)&v253 = "pxOsd/refinerFactory.cpp";
    *((_QWORD *)&v253 + 1) = "GetType";
    *(_QWORD *)&v254 = 74;
    *((_QWORD *)&v254 + 1) = "OpenSubdiv::Sdc::SchemeType pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Conver"
                             "ter::GetType() const";
    LOBYTE(v255) = 0;
    v25 = v250 & 0xFFFFFFFFFFFFFFF8;
    if ((v250 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v26 = (const char *)(v25 + 16);
      if (*(char *)(v25 + 39) < 0)
        v26 = *(const char **)v26;
    }
    else
    {
      v26 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v253, (pxrInternal__aapl__pxrReserved__ *)"Can't apply loop subdivision on prim %s, since it has non-triangle face(s).", a3, v26);
  }
LABEL_52:
  v22 = 2;
LABEL_53:
  if ((v11 & 7) != 0)
  {
    do
      v27 = __ldxr((unsigned int *)v15);
    while (__stlxr(v27 - 2, (unsigned int *)v15));
  }
  v28 = *v251;
  if ((*v251 & 7) != 0)
  {
    v29 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFFFF8);
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 2, v29));
    if ((v30 & 1) == 0)
      v28 &= 0xFFFFFFFFFFFFFFF8;
  }
  v31 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
  if (!v31)
    v31 = sub_20C7D9220(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
  v32 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFFFF8);
  if ((v28 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v31 + 6) & 0xFFFFFFFFFFFFFFF8))
  {
    v36 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
    if (!v36)
      v36 = sub_20C7D9220(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
    v33 = *((_QWORD *)v36 + 10);
    if ((v33 & 7) == 0)
      goto LABEL_74;
    v34 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFF8);
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 2, v34));
    goto LABEL_72;
  }
  v33 = v251[17];
  if ((v33 & 7) != 0)
  {
    v34 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFF8);
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 2, v34));
LABEL_72:
    if ((v35 & 1) == 0)
      v33 = (uint64_t)v34;
  }
LABEL_74:
  if (!v33)
    goto LABEL_87;
  v37 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
  if (!v37)
    v37 = sub_20C7D9220(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
  v38 = v33 & 0xFFFFFFFFFFFFFFF8;
  if ((v33 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v37 + 1) & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_95;
  v39 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
  if (!v39)
    v39 = sub_20C7D9220(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
  if (v38 == (*((_QWORD *)v39 + 9) & 0xFFFFFFFFFFFFFFF8))
  {
    v42 = 1;
    goto LABEL_96;
  }
  v40 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
  if (!v40)
    v40 = sub_20C7D9220(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
  if (v38 == (*((_QWORD *)v40 + 10) & 0xFFFFFFFFFFFFFFF8))
  {
LABEL_87:
    v42 = 2;
    goto LABEL_96;
  }
  *(_QWORD *)&v253 = "pxOsd/refinerFactory.cpp";
  *((_QWORD *)&v253 + 1) = "GetOptions";
  *(_QWORD *)&v254 = 114;
  *((_QWORD *)&v254 + 1) = "OpenSubdiv::Sdc::Options pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Converter::"
                           "GetOptions() const";
  LOBYTE(v255) = 0;
  if (v38)
  {
    v41 = (const char *)(v38 + 16);
    if (*(char *)(v38 + 39) < 0)
      v41 = *(const char **)v41;
  }
  else
  {
    v41 = "";
  }
  v43 = v250 & 0xFFFFFFFFFFFFFFF8;
  if ((v250 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v44 = (const char *)(v43 + 16);
    if (*(char *)(v43 + 39) < 0)
      v44 = *(const char **)v44;
  }
  else
  {
    v44 = "";
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v253, (pxrInternal__aapl__pxrReserved__ *)"Unknown vertex boundary interpolation rule (%s) (%s)", a3, v41, v44);
LABEL_95:
  v42 = 0;
LABEL_96:
  v45 = v251[18];
  if ((v45 & 7) != 0)
  {
    v46 = (unsigned int *)(v45 & 0xFFFFFFFFFFFFFFF8);
    do
      v47 = __ldxr(v46);
    while (__stxr(v47 + 2, v46));
    if ((v47 & 1) == 0)
      v45 &= 0xFFFFFFFFFFFFFFF8;
  }
  v246 = v22;
  v243 = v42;
  if (!v45)
    goto LABEL_123;
  v48 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
  if (!v48)
    v48 = sub_20C7D9220(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
  v49 = v45 & 0xFFFFFFFFFFFFFFF8;
  if ((v45 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)v48 & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_134;
  v50 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
  if (!v50)
    v50 = sub_20C7D9220(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
  if (v49 == (*((_QWORD *)v50 + 2) & 0xFFFFFFFFFFFFFFF8))
  {
    v56 = 256;
    goto LABEL_135;
  }
  v51 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
  if (!v51)
    v51 = sub_20C7D9220(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
  if (v49 == (*((_QWORD *)v51 + 3) & 0xFFFFFFFFFFFFFFF8))
  {
    v56 = 512;
    goto LABEL_135;
  }
  v52 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
  if (!v52)
    v52 = sub_20C7D9220(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
  if (v49 == (*((_QWORD *)v52 + 4) & 0xFFFFFFFFFFFFFFF8))
  {
    v56 = 768;
    goto LABEL_135;
  }
  v53 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
  if (!v53)
    v53 = sub_20C7D9220(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
  if (v49 == (*((_QWORD *)v53 + 1) & 0xFFFFFFFFFFFFFFF8))
  {
LABEL_123:
    v56 = 0;
  }
  else
  {
    v54 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
    if (!v54)
      v54 = sub_20C7D9220(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
    if (v49 != (*((_QWORD *)v54 + 5) & 0xFFFFFFFFFFFFFFF8))
    {
      *(_QWORD *)&v253 = "pxOsd/refinerFactory.cpp";
      *((_QWORD *)&v253 + 1) = "GetOptions";
      *(_QWORD *)&v254 = 145;
      *((_QWORD *)&v254 + 1) = "OpenSubdiv::Sdc::Options pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Convert"
                               "er::GetOptions() const";
      LOBYTE(v255) = 0;
      if (v49)
      {
        v55 = (const char *)(v49 + 16);
        if (*(char *)(v49 + 39) < 0)
          v55 = *(const char **)v55;
      }
      else
      {
        v55 = "";
      }
      v57 = v250 & 0xFFFFFFFFFFFFFFF8;
      if ((v250 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        v58 = (const char *)(v57 + 16);
        if (*(char *)(v57 + 39) < 0)
          v58 = *(const char **)v58;
      }
      else
      {
        v58 = "";
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v253, (pxrInternal__aapl__pxrReserved__ *)"Unknown face-varying boundary interpolation rule (%s) (%s)", a3, v55, v58);
LABEL_134:
      v56 = 1280;
      goto LABEL_135;
    }
    v56 = 1024;
  }
LABEL_135:
  v59 = v251[19];
  if ((v59 & 7) != 0)
  {
    v60 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFFFF8);
    do
      v61 = __ldxr(v60);
    while (__stxr(v61 + 2, v60));
    if ((v61 & 1) == 0)
      v59 &= 0xFFFFFFFFFFFFFFF8;
  }
  if (!v59)
    goto LABEL_157;
  v62 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
  if (!v62)
    v62 = sub_20C7D9220(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
  v63 = v59 & 0xFFFFFFFFFFFFFFF8;
  if ((v59 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v62 + 11) & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_157;
  v64 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
  if (!v64)
    v64 = sub_20C7D9220(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
  if (v63 != (*((_QWORD *)v64 + 12) & 0xFFFFFFFFFFFFFFF8))
  {
    *(_QWORD *)&v253 = "pxOsd/refinerFactory.cpp";
    *((_QWORD *)&v253 + 1) = "GetOptions";
    *(_QWORD *)&v254 = 168;
    *((_QWORD *)&v254 + 1) = "OpenSubdiv::Sdc::Options pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Converter"
                             "::GetOptions() const";
    LOBYTE(v255) = 0;
    if (v63)
    {
      v65 = (const char *)(v63 + 16);
      if (*(char *)(v63 + 39) < 0)
        v65 = *(const char **)v65;
    }
    else
    {
      v65 = "";
    }
    v67 = v250 & 0xFFFFFFFFFFFFFFF8;
    if ((v250 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v68 = (const char *)(v67 + 16);
      if (*(char *)(v67 + 39) < 0)
        v68 = *(const char **)v68;
    }
    else
    {
      v68 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v253, (pxrInternal__aapl__pxrReserved__ *)"Unknown creasing method (%s) (%s)", a3, v65, v68);
LABEL_157:
    v66 = 0;
    goto LABEL_158;
  }
  v66 = 0x10000;
LABEL_158:
  v69 = v251[20];
  if ((v69 & 7) != 0)
  {
    v70 = (unsigned int *)(v69 & 0xFFFFFFFFFFFFFFF8);
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 2, v70));
    if ((v71 & 1) == 0)
      v69 &= 0xFFFFFFFFFFFFFFF8;
  }
  v240 = a4;
  if (!v69)
  {
    v76 = 0;
    goto LABEL_184;
  }
  v72 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
  if (!v72)
    v72 = sub_20C7D9220(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
  v73 = v69 & 0xFFFFFFFFFFFFFFF8;
  if ((v69 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v72 + 7) & 0xFFFFFFFFFFFFFFF8))
  {
    v74 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
    if (!v74)
      v74 = sub_20C7D9220(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
    if (v73 == (*((_QWORD *)v74 + 15) & 0xFFFFFFFFFFFFFFF8))
    {
      v76 = 0x1000000;
      goto LABEL_182;
    }
    *(_QWORD *)&v253 = "pxOsd/refinerFactory.cpp";
    *((_QWORD *)&v253 + 1) = "GetOptions";
    *(_QWORD *)&v254 = 186;
    *((_QWORD *)&v254 + 1) = "OpenSubdiv::Sdc::Options pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Converter"
                             "::GetOptions() const";
    LOBYTE(v255) = 0;
    if (v73)
    {
      v75 = (const char *)(v73 + 16);
      if (*(char *)(v73 + 39) < 0)
        v75 = *(const char **)v75;
    }
    else
    {
      v75 = "";
    }
    v77 = v250 & 0xFFFFFFFFFFFFFFF8;
    if ((v250 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v78 = (const char *)(v77 + 16);
      if (*(char *)(v77 + 39) < 0)
        v78 = *(const char **)v78;
    }
    else
    {
      v78 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v253, (pxrInternal__aapl__pxrReserved__ *)"Unknown triangle subdivision rule (%s) (%s)", a3, v75, v78);
  }
  v76 = 0;
LABEL_182:
  if ((v69 & 7) != 0)
  {
    do
      v79 = __ldxr((unsigned int *)v73);
    while (__stlxr(v79 - 2, (unsigned int *)v73));
  }
LABEL_184:
  if ((v59 & 7) != 0)
  {
    v80 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFFFF8);
    do
      v81 = __ldxr(v80);
    while (__stlxr(v81 - 2, v80));
  }
  if ((v45 & 7) != 0)
  {
    v82 = (unsigned int *)(v45 & 0xFFFFFFFFFFFFFFF8);
    do
      v83 = __ldxr(v82);
    while (__stlxr(v83 - 2, v82));
  }
  if ((v33 & 7) != 0)
  {
    v84 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFF8);
    do
      v85 = __ldxr(v84);
    while (__stlxr(v85 - 2, v84));
  }
  if ((v28 & 7) != 0)
  {
    do
      v86 = __ldxr(v32);
    while (__stlxr(v86 - 2, v32));
  }
  v249 = (OpenSubdiv::__aapl__::Far::TopologyRefiner *)operator new(0x78uLL);
  OpenSubdiv::__aapl__::Far::TopologyRefiner::TopologyRefiner((uint64_t)v249, v246, v56 | v243 | v66 | v76);
  sub_20C7DD00C((uint64_t)&v253, v251);
  v87 = v254;
  v88 = v256;
  v89 = v257;
  v90 = (int *)**((_QWORD **)v249 + 6);
  *v90 = v254;
  sub_20BE81ACC((uint64_t)(v90 + 6), 2 * v87);
  v91 = (char *)*((_QWORD *)v90 + 12);
  v92 = *((_QWORD *)v90 + 13) - (_QWORD)v91;
  if (v87 <= v92)
  {
    if (v87 < v92)
      *((_QWORD *)v90 + 13) = &v91[v87];
  }
  else
  {
    sub_20BE83CA8((void **)v90 + 12, v87 - v92);
    v91 = (char *)*((_QWORD *)v90 + 12);
  }
  bzero(v91, *v90);
  v93 = (uint64_t *)*((_QWORD *)v249 + 6);
  if (v87 < 1)
  {
    v95 = 0;
  }
  else
  {
    v94 = 0;
    v95 = 0;
    do
    {
      v96 = *(unsigned int *)(v88 + 4 * v94);
      v97 = *v93;
      v98 = (_DWORD *)(*(_QWORD *)(*v93 + 24) + 8 * v94);
      *v98 = v96;
      if (v94)
        v99 = *(v98 - 1) + *(v98 - 2);
      else
        v99 = 0;
      v100 = (int)v96;
      v98[1] = v99;
      v101 = *(_DWORD *)(v97 + 20);
      if (v101 <= (int)v96)
        v101 = v96;
      *(_DWORD *)(v97 + 20) = v101;
      v102 = *((unsigned __int16 *)v249 + 4);
      if ((v102 & 4) != 0)
        v103 = 4;
      else
        v103 = 4 * ((_DWORD)v96 != ((v102 >> 3) & 7));
      *((_WORD *)v249 + 4) = v103 | v102 & 0xFFFB;
      v104 = v89;
      if ((int)v96 >= 1)
      {
        do
        {
          v106 = *v104++;
          v105 = v106;
          if (v95 <= v106)
            v95 = v105;
          --v96;
        }
        while (v96);
      }
      v89 += v100;
      ++v94;
    }
    while (v94 != v87);
  }
  v107 = v95 + 1;
  v108 = *v93;
  *(_DWORD *)(v108 + 8) = v95 + 1;
  v109 = 2 * (v95 + 1);
  sub_20BE81ACC(v108 + 264, v109);
  sub_20BE81ACC(v108 + 336, v109);
  sub_20BE862B8(v108 + 408, v107);
  sub_20BE862E8(v108 + 432, v107);
  bzero(*(void **)(v108 + 432), 2 * *(int *)(v108 + 8));
  sub_20C7DD290(&v253);
  if (!OpenSubdiv::__aapl__::Far::TopologyRefinerFactoryBase::prepareComponentTopologySizing(v249, v110, v111, v112, v113, v114, v115, v116))goto LABEL_364;
  sub_20C7DD00C((uint64_t)&v253, v251);
  v117 = v257;
  v118 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
  if (!v118)
    v118 = sub_20C7D9220(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
  v119 = (int *)**((_QWORD **)v249 + 12);
  if (*v119 >= 1)
  {
    v120 = 0;
    v121 = 0;
    v122 = *((_QWORD *)&v253 + 1) & 0xFFFFFFFFFFFFFFF8;
    v123 = *((_QWORD *)v118 + 14) & 0xFFFFFFFFFFFFFFF8;
    v124 = **((_QWORD **)v249 + 6);
    v125 = *(_QWORD *)(v124 + 24);
    v126 = *(_QWORD *)(v124 + 48);
    do
    {
      v127 = (unsigned int *)(v125 + 8 * v120);
      v128 = *v127;
      v129 = (_DWORD *)(v126 + 4 * (int)v127[1]);
      if (v122 == v123)
      {
        if ((int)v128 >= 1)
        {
          v133 = &v117[v121];
          v121 += v128;
          do
          {
            v134 = *v133++;
            *v129++ = v134;
            --v128;
          }
          while (v128);
        }
      }
      else
      {
        *v129 = v117[v121++];
        if ((int)v128 >= 2)
        {
          v130 = v128 + 1;
          v131 = &v117[v121];
          do
          {
            v132 = *v131++;
            v129[(v130-- - 2)] = v132;
            ++v121;
          }
          while (v130 > 2);
        }
      }
      ++v120;
    }
    while (v120 < *v119);
  }
  sub_20C7DD290(&v253);
  if (!OpenSubdiv::__aapl__::Far::TopologyRefinerFactoryBase::prepareComponentTopologyAssignment((uint64_t)v249, 0, (void (*)(uint64_t, char *, uint64_t))sub_20C7DCF90, (uint64_t)&v250, v135, v136, v137, v138))goto LABEL_364;
  v140 = v251;
  v141 = *(_OWORD *)(v251 + 23);
  v253 = *(_OWORD *)(v251 + 21);
  v254 = v141;
  v142 = v251[25];
  v255 = v142;
  if (v142)
  {
    v143 = (unint64_t *)(v142 - 16);
    if (*((_QWORD *)&v254 + 1))
      v143 = (unint64_t *)*((_QWORD *)&v254 + 1);
    do
      v144 = __ldxr(v143);
    while (__stxr(v144 + 1, v143));
  }
  v145 = *((_OWORD *)v140 + 14);
  v272 = *((_OWORD *)v140 + 13);
  v273 = v145;
  v146 = v140[30];
  v274 = (int *)v146;
  if (v146)
  {
    v147 = (unint64_t *)(v146 - 16);
    if (*((_QWORD *)&v273 + 1))
      v147 = (unint64_t *)*((_QWORD *)&v273 + 1);
    do
      v148 = __ldxr(v147);
    while (__stxr(v148 + 1, v147));
  }
  v149 = *(_OWORD *)(v140 + 33);
  v269 = *(_OWORD *)(v140 + 31);
  v270 = v149;
  v150 = v140[35];
  v271 = v150;
  if (v150)
  {
    v151 = (unint64_t *)(v150 - 16);
    if (*((_QWORD *)&v270 + 1))
      v151 = (unint64_t *)*((_QWORD *)&v270 + 1);
    do
      v152 = __ldxr(v151);
    while (__stxr(v152 + 1, v151));
  }
  v153 = v272;
  v239 = v140;
  if ((_QWORD)v269 == (_QWORD)v272)
    goto LABEL_248;
  v154 = 0;
  if ((_QWORD)v272)
  {
    v155 = v274;
    v156 = v272;
    do
    {
      v157 = *v155++;
      v154 = v154 + v157 - 1;
      --v156;
    }
    while (v156);
  }
  if ((_QWORD)v269 == v154)
  {
LABEL_248:
    if ((_QWORD)v272)
    {
      v158 = 0;
      v159 = 0;
      v160 = 0;
      v241 = v272;
      v242 = v269 == v272;
      v161 = v269 != v272;
      v162 = v274;
      while (1)
      {
        v163 = v162[v160];
        v164 = v163 <= 1 ? 1 : v162[v160];
        v165 = (v164 - 1);
        if (v164 != 1)
          break;
LABEL_280:
        v158 += v242;
        v159 += v163;
        if (++v160 == v153)
          goto LABEL_287;
      }
      v244 = v160;
      v247 = v159;
      v166 = (_QWORD **)*((_QWORD *)v249 + 12);
      v167 = 4 * v159 + 4;
      while (1)
      {
        v169 = *(unsigned int *)(v255 + v167 - 4);
        v168 = *(unsigned int *)(v255 + v167);
        if ((v169 & 0x80000000) != 0 || (int)v169 >= *((_DWORD *)*v166 + 2))
        {
          *(_QWORD *)&v266 = "pxOsd/refinerFactory.cpp";
          *((_QWORD *)&v266 + 1) = "assignComponentTags";
          *(_QWORD *)&v267 = 321;
          *((_QWORD *)&v267 + 1) = "static BOOL OpenSubdiv::__aapl__::Far::TopologyRefinerFactory<pxrInternal__aapl__pxrR"
                                   "eserved__::(anonymous namespace)::Converter>::assignComponentTags(Far::TopologyRefine"
                                   "r &, const pxr_aapl::Converter &) [MESH = pxrInternal__aapl__pxrReserved__::(anonymou"
                                   "s namespace)::Converter]";
          LOBYTE(v268) = 0;
          v171 = v250 & 0xFFFFFFFFFFFFFFF8;
          if ((v250 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            v172 = (const char *)(v171 + 16);
            if (*(char *)(v171 + 39) < 0)
              v172 = *(const char **)v172;
          }
          else
          {
            v172 = "";
          }
          pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v266, (pxrInternal__aapl__pxrReserved__ *)"creaseIndices[%d] (%d) is out of bounds on %s", v139, v159, v169, v172);
          v170 = 0;
          if ((v168 & 0x80000000) != 0)
            goto LABEL_268;
        }
        else
        {
          v170 = 1;
          if ((v168 & 0x80000000) != 0)
            goto LABEL_268;
        }
        if ((int)v168 < *((_DWORD *)*v166 + 2))
        {
          if (v170)
          {
            v173 = sub_20BE84A3C(*v166, v169, v168);
            if (v173 == -1)
            {
              *(_QWORD *)&v266 = "pxOsd/refinerFactory.cpp";
              *((_QWORD *)&v266 + 1) = "assignComponentTags";
              *(_QWORD *)&v267 = 334;
              *((_QWORD *)&v267 + 1) = "static BOOL OpenSubdiv::__aapl__::Far::TopologyRefinerFactory<pxrInternal__aapl__"
                                       "pxrReserved__::(anonymous namespace)::Converter>::assignComponentTags(Far::Topolo"
                                       "gyRefiner &, const pxr_aapl::Converter &) [MESH = pxrInternal__aapl__pxrReserved_"
                                       "_::(anonymous namespace)::Converter]";
              LOBYTE(v268) = 0;
              v176 = v250 & 0xFFFFFFFFFFFFFFF8;
              if ((v250 & 0xFFFFFFFFFFFFFFF8) != 0)
              {
                v177 = (const char *)(v176 + 16);
                if (*(char *)(v176 + 39) < 0)
                  v177 = *(const char **)v177;
              }
              else
              {
                v177 = "";
              }
              pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v266, (pxrInternal__aapl__pxrReserved__ *)"Set edge sharpness cannot find edge (%d-%d) (%s)", v139, v169, v168, v177);
            }
            else
            {
              *(float *)(*(_QWORD *)(**((_QWORD **)v249 + 6) + 216) + 4 * v173) = fmaxf(*(float *)(v271 + 4 * v158), 0.0);
            }
          }
          goto LABEL_273;
        }
LABEL_268:
        *(_QWORD *)&v266 = "pxOsd/refinerFactory.cpp";
        *((_QWORD *)&v266 + 1) = "assignComponentTags";
        *(_QWORD *)&v267 = 326;
        *((_QWORD *)&v267 + 1) = "static BOOL OpenSubdiv::__aapl__::Far::TopologyRefinerFactory<pxrInternal__aapl__pxrRes"
                                 "erved__::(anonymous namespace)::Converter>::assignComponentTags(Far::TopologyRefiner &,"
                                 " const pxr_aapl::Converter &) [MESH = pxrInternal__aapl__pxrReserved__::(anonymous name"
                                 "space)::Converter]";
        LOBYTE(v268) = 0;
        v174 = v250 & 0xFFFFFFFFFFFFFFF8;
        if ((v250 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          v175 = (const char *)(v174 + 16);
          if (*(char *)(v174 + 39) < 0)
            v175 = *(const char **)v175;
        }
        else
        {
          v175 = "";
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v266, (pxrInternal__aapl__pxrReserved__ *)"creaseIndices[%d] (%d) is out of bounds on %s", v139, (v159 + 1), v168, v175);
LABEL_273:
        v158 += v161;
        v159 = (v159 + 1);
        v167 += 4;
        if (!--v165)
        {
          v162 = v274;
          v160 = v244;
          v159 = v247;
          v163 = v274[v244];
          v153 = v241;
          goto LABEL_280;
        }
      }
    }
  }
  else
  {
    *(_QWORD *)&v266 = "pxOsd/refinerFactory.cpp";
    *((_QWORD *)&v266 + 1) = "assignComponentTags";
    *(_QWORD *)&v267 = 302;
    *((_QWORD *)&v267 + 1) = "static BOOL OpenSubdiv::__aapl__::Far::TopologyRefinerFactory<pxrInternal__aapl__pxrReserve"
                             "d__::(anonymous namespace)::Converter>::assignComponentTags(Far::TopologyRefiner &, const p"
                             "xr_aapl::Converter &) [MESH = pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Converter]";
    LOBYTE(v268) = 0;
    v178 = v250 & 0xFFFFFFFFFFFFFFF8;
    if ((v250 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v179 = (const char *)(v178 + 16);
      if (*(char *)(v178 + 39) < 0)
        v179 = *(const char **)v179;
    }
    else
    {
      v179 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v266, (pxrInternal__aapl__pxrReserved__ *)"Invalid length of crease sharpnesses (%s)\n", v139, v179);
  }
LABEL_287:
  v180 = *((_OWORD *)v239 + 19);
  v266 = *((_OWORD *)v239 + 18);
  v267 = v180;
  v181 = v239[40];
  v268 = v181;
  if (v181)
  {
    v182 = (unint64_t *)(v181 - 16);
    if (*((_QWORD *)&v267 + 1))
      v182 = (unint64_t *)*((_QWORD *)&v267 + 1);
    do
      v183 = __ldxr(v182);
    while (__stxr(v183 + 1, v182));
  }
  v184 = *(_OWORD *)(v239 + 43);
  v263 = *(_OWORD *)(v239 + 41);
  v264 = v184;
  v185 = v239[45];
  v265 = v185;
  if (v185)
  {
    v186 = (unint64_t *)(v185 - 16);
    if (*((_QWORD *)&v264 + 1))
      v186 = (unint64_t *)*((_QWORD *)&v264 + 1);
    do
      v187 = __ldxr(v186);
    while (__stxr(v187 + 1, v186));
  }
  v188 = v266;
  if ((_QWORD)v263 == (_QWORD)v266)
  {
    if ((_QWORD)v266)
    {
      v189 = 0;
      do
      {
        v190 = *(unsigned int *)(v268 + 4 * v189);
        if ((v190 & 0x80000000) != 0 || (int)v190 >= *(_DWORD *)(**((_QWORD **)v249 + 12) + 8))
        {
          *(_QWORD *)&v260 = "pxOsd/refinerFactory.cpp";
          *((_QWORD *)&v260 + 1) = "assignComponentTags";
          *(_QWORD *)&v261 = 372;
          *((_QWORD *)&v261 + 1) = "static BOOL OpenSubdiv::__aapl__::Far::TopologyRefinerFactory<pxrInternal__aapl__pxrR"
                                   "eserved__::(anonymous namespace)::Converter>::assignComponentTags(Far::TopologyRefine"
                                   "r &, const pxr_aapl::Converter &) [MESH = pxrInternal__aapl__pxrReserved__::(anonymou"
                                   "s namespace)::Converter]";
          LOBYTE(v262) = 0;
          v191 = v250 & 0xFFFFFFFFFFFFFFF8;
          if ((v250 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            v192 = (const char *)(v191 + 16);
            if (*(char *)(v191 + 39) < 0)
              v192 = *(const char **)v192;
          }
          else
          {
            v192 = "";
          }
          pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v260, (pxrInternal__aapl__pxrReserved__ *)"Set vertex sharpness cannot find vertex (%d) (%s)", v139, v190, v192);
        }
        else
        {
          *(float *)(*(_QWORD *)(**((_QWORD **)v249 + 6) + 408) + 4 * v190) = fmaxf(*(float *)(v265 + 4 * v189), 0.0);
        }
        ++v189;
      }
      while (v188 != v189);
    }
  }
  else
  {
    *(_QWORD *)&v260 = "pxOsd/refinerFactory.cpp";
    *((_QWORD *)&v260 + 1) = "assignComponentTags";
    *(_QWORD *)&v261 = 362;
    *((_QWORD *)&v261 + 1) = "static BOOL OpenSubdiv::__aapl__::Far::TopologyRefinerFactory<pxrInternal__aapl__pxrReserve"
                             "d__::(anonymous namespace)::Converter>::assignComponentTags(Far::TopologyRefiner &, const p"
                             "xr_aapl::Converter &) [MESH = pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Converter]";
    LOBYTE(v262) = 0;
    v193 = v250 & 0xFFFFFFFFFFFFFFF8;
    if ((v250 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v194 = (const char *)(v193 + 16);
      if (*(char *)(v193 + 39) < 0)
        v194 = *(const char **)v194;
    }
    else
    {
      v194 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v260, (pxrInternal__aapl__pxrReserved__ *)"Invalid length of corner sharpnesses at prim %s\n", v139, v194);
  }
  v195 = *((_OWORD *)v239 + 7);
  v260 = *((_OWORD *)v239 + 6);
  v261 = v195;
  v196 = v239[16];
  v262 = v196;
  if (v196)
  {
    v197 = (unint64_t *)(v196 - 16);
    if (*((_QWORD *)&v261 + 1))
      v197 = (unint64_t *)*((_QWORD *)&v261 + 1);
    do
      v198 = __ldxr(v197);
    while (__stxr(v198 + 1, v197));
  }
  if ((int)v260 >= 1)
  {
    v199 = 0;
    v200 = 4 * v260;
    do
    {
      v201 = *(unsigned int *)(v262 + v199);
      if ((v201 & 0x80000000) != 0 || (int)v201 >= ***((_DWORD ***)v249 + 12))
      {
        v258[0] = "pxOsd/refinerFactory.cpp";
        v258[1] = "assignComponentTags";
        v258[2] = 390;
        v258[3] = "static BOOL OpenSubdiv::__aapl__::Far::TopologyRefinerFactory<pxrInternal__aapl__pxrReserved__::(anony"
                  "mous namespace)::Converter>::assignComponentTags(Far::TopologyRefiner &, const pxr_aapl::Converter &) "
                  "[MESH = pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Converter]";
        v259 = 0;
        v203 = v250 & 0xFFFFFFFFFFFFFFF8;
        if ((v250 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          v204 = (const char *)(v203 + 16);
          if (*(char *)(v203 + 39) < 0)
            v204 = *(const char **)v204;
        }
        else
        {
          v204 = "";
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v258, (pxrInternal__aapl__pxrReserved__ *)"Set hole cannot find face (%d) (%s)", v139, v201, v204);
      }
      else
      {
        v202 = *(_QWORD *)(**((_QWORD **)v249 + 6) + 96);
        *(_BYTE *)(v202 + v201) |= 1u;
        *((_WORD *)v249 + 4) |= 2u;
      }
      v199 += 4;
    }
    while (v200 != v199);
  }
  sub_20BF5618C((uint64_t)&v260);
  sub_20BF5618C((uint64_t)&v263);
  sub_20BF5618C((uint64_t)&v266);
  sub_20BF5618C((uint64_t)&v269);
  sub_20BF5618C((uint64_t)&v272);
  sub_20BF5618C((uint64_t)&v253);
  if (!OpenSubdiv::__aapl__::Far::TopologyRefinerFactoryBase::prepareComponentTagsAndSharpness(v249, v205))goto LABEL_364;
  v207 = *v252;
  v208 = (uint64_t **)v249;
  if (*v252 != v252[1])
  {
    v209 = 0;
    while (1)
    {
      v248 = (uint64_t *)(v207 + 40 * v209);
      v210 = *v248;
      if (*v248)
      {
        v211 = *(int **)(v207 + 40 * v209 + 32);
        v212 = -1;
        do
        {
          v214 = *v211++;
          v213 = v214;
          if (v212 <= v214)
            v212 = v213;
          --v210;
        }
        while (v210);
      }
      else
      {
        v212 = -1;
      }
      v215 = v208[6];
      v216 = *(int *)*v215;
      v217 = sub_20BE86134((_QWORD *)*v215, v212 + 1, (_DWORD *)v249 + 1);
      v218 = v251;
      v219 = (pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      if (!v219)
        v219 = sub_20C7D9220(&pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens);
      v245 = v209;
      if ((_DWORD)v216)
        break;
LABEL_361:
      v209 = v245 + 1;
      v207 = *v252;
      if (v245 + 1 >= 0xCCCCCCCCCCCCCCCDLL * ((v252[1] - *v252) >> 3))
        goto LABEL_362;
    }
    v220 = 0;
    v221 = 0;
    v222 = v218[1] & 0xFFFFFFFFFFFFFFF8;
    v223 = *((_QWORD *)v219 + 14) & 0xFFFFFFFFFFFFFFF8;
    v224 = (uint64_t *)(v207 + 40 * v245 + 32);
    while (1)
    {
      v225 = (_DWORD *)sub_20BE86278(*v208[6], v221, v217);
      v226 = v206;
      if (v220 + (int)v206 > (unint64_t)*v248)
      {
        *(_QWORD *)&v253 = "pxOsd/refinerFactory.cpp";
        *((_QWORD *)&v253 + 1) = "assignFaceVaryingTopology";
        *(_QWORD *)&v254 = 427;
        *((_QWORD *)&v254 + 1) = "static BOOL OpenSubdiv::__aapl__::Far::TopologyRefinerFactory<pxrInternal__aapl__pxrRes"
                                 "erved__::(anonymous namespace)::Converter>::assignFaceVaryingTopology(TopologyRefiner &"
                                 ", const pxr_aapl::Converter &) [MESH = pxrInternal__aapl__pxrReserved__::(anonymous nam"
                                 "espace)::Converter]";
        LOBYTE(v255) = 0;
        if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v253, "ofs + numVerts <= fvIndices.size()", 0))goto LABEL_364;
      }
      if (v222 == v223)
      {
        if ((_QWORD)v226 << 32)
        {
          v231 = 0;
          v232 = *v224;
          if ((unint64_t)(int)v226 <= 1)
            v233 = 1;
          else
            v233 = (int)v226;
          v208 = (uint64_t **)v249;
          do
          {
            v229 = v220 + 1;
            *(_DWORD *)((char *)v225 + (v231 >> 30)) = *(_DWORD *)(v232 + 4 * v220);
            v231 += 0x100000000;
            ++v220;
            --v233;
          }
          while (v233);
          goto LABEL_357;
        }
        v229 = v220;
      }
      else
      {
        v227 = *v224;
        *v225 = *(_DWORD *)(*v224 + 4 * v220);
        v228 = (_DWORD)v226 - 1;
        v229 = v220 + 1;
        if ((int)v226 - 1 >= 1)
        {
          v230 = &v225[v228];
          v208 = (uint64_t **)v249;
          do
          {
            *v230-- = *(_DWORD *)(v227 + 4 * v229++);
            --v228;
          }
          while (v228 > 0);
          goto LABEL_357;
        }
      }
      v208 = (uint64_t **)v249;
LABEL_357:
      ++v221;
      v220 = v229;
      if (v221 == v216)
        goto LABEL_361;
    }
  }
LABEL_362:
  if ((OpenSubdiv::__aapl__::Far::TopologyRefinerFactoryBase::prepareFaceVaryingChannels((OpenSubdiv::__aapl__::Far::TopologyRefinerFactoryBase *)v208, v206) & 1) != 0)
  {
    v234 = (uint64_t)v249;
  }
  else
  {
LABEL_364:
    OpenSubdiv::__aapl__::Far::TopologyRefiner::~TopologyRefiner(v249);
    operator delete(v235);
    v234 = 0;
  }
  result = sub_20C7DD31C(v240, v234);
  if ((v250 & 7) != 0)
  {
    v237 = (unsigned int *)(v250 & 0xFFFFFFFFFFFFFFF8);
    do
      v238 = __ldxr(v237);
    while (__stlxr(v238 - 2, v237));
  }
  return result;
}

void sub_20C7DCDBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  unsigned int *v16;
  unsigned int v17;
  va_list va;

  va_start(va, a15);
  sub_20C7DD290(va);
  if ((a13 & 7) != 0)
  {
    v16 = (unsigned int *)(a13 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stlxr(v17 - 2, v16));
  }
  _Unwind_Resume(a1);
}

void sub_20C7DCF90(uint64_t a1, uint64_t a2, char *a3)
{
  unint64_t v3;
  const char *v4;
  _QWORD v5[4];
  char v6;

  v5[0] = "pxOsd/refinerFactory.cpp";
  v5[1] = "reportInvalidTopology";
  v5[2] = 454;
  v5[3] = "static void OpenSubdiv::__aapl__::Far::TopologyRefinerFactory<pxrInternal__aapl__pxrReserved__::(anonymous nam"
          "espace)::Converter>::reportInvalidTopology(TopologyRefinerFactory<Converter>::TopologyError, const char *, con"
          "st pxr_aapl::Converter &) [MESH = pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Converter]";
  v6 = 0;
  v3 = *(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8;
  if (v3)
  {
    v4 = (const char *)(v3 + 16);
    if (*(char *)(v3 + 39) < 0)
      v4 = *(const char **)v4;
  }
  else
  {
    v4 = "";
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v5, (pxrInternal__aapl__pxrReserved__ *)"%s (%s)", a3, a2, v4);
}

uint64_t sub_20C7DD00C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  __int128 v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unsigned __int8 v22;

  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 2, v5));
    if ((v6 & 1) == 0)
      *(_QWORD *)a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  v7 = a2[1];
  *(_QWORD *)(a1 + 8) = v7;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      *(_QWORD *)(a1 + 8) &= 0xFFFFFFFFFFFFFFF8;
  }
  v10 = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  *(_OWORD *)(a1 + 32) = v10;
  v11 = a2[6];
  *(_QWORD *)(a1 + 48) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 - 16);
    if (*(_QWORD *)(a1 + 40))
      v12 = *(unint64_t **)(a1 + 40);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = *(_OWORD *)(a2 + 7);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 9);
  *(_OWORD *)(a1 + 56) = v14;
  v15 = a2[11];
  *(_QWORD *)(a1 + 88) = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 - 16);
    if (*(_QWORD *)(a1 + 80))
      v16 = *(unint64_t **)(a1 + 80);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v18 = *((_OWORD *)a2 + 7);
  *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
  *(_OWORD *)(a1 + 112) = v18;
  v19 = a2[16];
  *(_QWORD *)(a1 + 128) = v19;
  if (v19)
  {
    v20 = (unint64_t *)(v19 - 16);
    if (*(_QWORD *)(a1 + 120))
      v20 = *(unint64_t **)(a1 + 120);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  sub_20C7D9038(a1 + 136, a2 + 17);
  v22 = atomic_load((unsigned __int8 *)a2 + 368);
  *(_BYTE *)(a1 + 368) = v22 & 1;
  return a1;
}

void sub_20C7DD178(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_20BF5618C(v5);
  sub_20BF5618C(v4);
  sub_20BF5618C(v3);
  sub_20C96C110(v2, v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C7DD1B4(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;

  sub_20BF5618C((uint64_t)(a1 + 24));
  sub_20BF5618C((uint64_t)(a1 + 19));
  sub_20BF5618C((uint64_t)(a1 + 14));
  sub_20BF5618C((uint64_t)(a1 + 9));
  sub_20BF5618C((uint64_t)(a1 + 4));
  v2 = a1[3];
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = a1[2];
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v8 = a1[1];
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  if ((*a1 & 7) != 0)
  {
    v11 = (unsigned int *)(*a1 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  return a1;
}

_QWORD *sub_20C7DD290(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int v6;

  sub_20C7DD1B4(a1 + 17);
  sub_20BF5618C((uint64_t)(a1 + 12));
  sub_20BF5618C((uint64_t)(a1 + 7));
  sub_20BF5618C((uint64_t)(a1 + 2));
  v2 = a1[1];
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  if ((*a1 & 7) != 0)
  {
    v5 = (unsigned int *)(*a1 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  return a1;
}

_QWORD *sub_20C7DD31C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C54BB08;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20C7DD364(_Unwind_Exception *exception_object)
{
  OpenSubdiv::__aapl__::Far::TopologyRefiner *v1;
  void *v3;

  if (v1)
  {
    OpenSubdiv::__aapl__::Far::TopologyRefiner::~TopologyRefiner(v1);
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20C7DD384(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_20C7DD398(uint64_t a1)
{
  OpenSubdiv::__aapl__::Far::TopologyRefiner *v1;
  void *v2;

  v1 = *(OpenSubdiv::__aapl__::Far::TopologyRefiner **)(a1 + 24);
  if (v1)
  {
    OpenSubdiv::__aapl__::Far::TopologyRefiner::~TopologyRefiner(v1);
    operator delete(v2);
  }
}

uint64_t sub_20C7DD3BC(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C54BB58))
    return a1 + 24;
  else
    return 0;
}

unint64_t pxrInternal__aapl__pxrReserved__::PxOsdSubdivTags::ComputeHash(pxrInternal__aapl__pxrReserved__ **this)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v2 = pxrInternal__aapl__pxrReserved__::ArchHash64((pxrInternal__aapl__pxrReserved__ *)this, (const char *)8, 0);
  v3 = pxrInternal__aapl__pxrReserved__::ArchHash64((pxrInternal__aapl__pxrReserved__ *)(this + 1), (const char *)8, v2);
  v4 = pxrInternal__aapl__pxrReserved__::ArchHash64((pxrInternal__aapl__pxrReserved__ *)(this + 2), (const char *)8, v3);
  v5 = pxrInternal__aapl__pxrReserved__::ArchHash64((pxrInternal__aapl__pxrReserved__ *)(this + 3), (const char *)8, v4);
  v6 = pxrInternal__aapl__pxrReserved__::ArchHash64(this[23], (const char *)(4 * (_QWORD)this[19]), v5);
  v7 = pxrInternal__aapl__pxrReserved__::ArchHash64(this[28], (const char *)(4 * (_QWORD)this[24]), v6);
  v8 = pxrInternal__aapl__pxrReserved__::ArchHash64(this[8], (const char *)(4 * (_QWORD)this[4]), v7);
  v9 = pxrInternal__aapl__pxrReserved__::ArchHash64(this[13], (const char *)(4 * (_QWORD)this[9]), v8);
  return pxrInternal__aapl__pxrReserved__::ArchHash64(this[18], (const char *)(4 * (_QWORD)this[14]), v9);
}

void sub_20C7DD78C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;

  if ((a11 & 7) != 0)
  {
    v13 = (unsigned int *)(a11 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  if ((a12 & 7) != 0)
  {
    v15 = (unsigned int *)(a12 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  if ((a13 & 7) != 0)
  {
    v17 = (unsigned int *)(a13 & 0xFFFFFFFFFFFFFFF8);
    do
      v18 = __ldxr(v17);
    while (__stlxr(v18 - 2, v17));
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::operator==(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int *v9;
  uint64_t result;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int *v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;

  v2 = *a1;
  if ((*a1 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) == 0)
      v2 &= 0xFFFFFFFFFFFFFFF8;
  }
  v5 = *a2;
  if ((*a2 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v5 &= 0xFFFFFFFFFFFFFFF8;
  }
  v8 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
  v9 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
  if ((v2 & 0xFFFFFFFFFFFFFFF8) == (v5 & 0xFFFFFFFFFFFFFFF8))
  {
    v11 = a1[1];
    if ((v11 & 7) != 0)
    {
      v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 2, v12));
      if ((v13 & 1) == 0)
        v11 &= 0xFFFFFFFFFFFFFFF8;
    }
    v14 = a2[1];
    if ((v14 & 7) != 0)
    {
      v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 2, v15));
      if ((v16 & 1) == 0)
        v14 &= 0xFFFFFFFFFFFFFFF8;
    }
    v17 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    v18 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    if ((v11 & 0xFFFFFFFFFFFFFFF8) == (v14 & 0xFFFFFFFFFFFFFFF8))
    {
      v19 = a1[2];
      if ((v19 & 7) != 0)
      {
        v20 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 2, v20));
        if ((v21 & 1) == 0)
          v19 &= 0xFFFFFFFFFFFFFFF8;
      }
      v22 = a2[2];
      if ((v22 & 7) != 0)
      {
        v23 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 2, v23));
        if ((v24 & 1) == 0)
          v22 &= 0xFFFFFFFFFFFFFFF8;
      }
      v25 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
      v26 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
      if ((v19 & 0xFFFFFFFFFFFFFFF8) == (v22 & 0xFFFFFFFFFFFFFFF8))
      {
        v27 = a1[3];
        if ((v27 & 7) != 0)
        {
          v28 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 2, v28));
          if ((v29 & 1) == 0)
            v27 &= 0xFFFFFFFFFFFFFFF8;
        }
        v30 = a2[3];
        if ((v30 & 7) != 0)
        {
          v31 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
          do
            v32 = __ldxr(v31);
          while (__stxr(v32 + 2, v31));
          if ((v32 & 1) == 0)
            v30 &= 0xFFFFFFFFFFFFFFF8;
        }
        v33 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
        v34 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
        if ((v27 & 0xFFFFFFFFFFFFFFF8) == (v30 & 0xFFFFFFFFFFFFFFF8))
        {
          v45 = v30;
          v46 = v27;
          v47 = v22;
          v48 = v19;
          v49 = v14;
          v50 = v11;
          result = pxrInternal__aapl__pxrReserved__::UsdSkelTopology::operator==((uint64_t)(a1 + 4), (uint64_t)(a2 + 4));
          if ((_DWORD)result)
          {
            result = pxrInternal__aapl__pxrReserved__::UsdSkelTopology::operator==((uint64_t)(a1 + 9), (uint64_t)(a2 + 9));
            if ((_DWORD)result)
            {
              result = sub_20BF5690C(a1 + 14, (uint64_t)(a2 + 14));
              if ((_DWORD)result)
              {
                result = pxrInternal__aapl__pxrReserved__::UsdSkelTopology::operator==((uint64_t)(a1 + 19), (uint64_t)(a2 + 19));
                if ((_DWORD)result)
                  result = sub_20BF5690C(a1 + 24, (uint64_t)(a2 + 24));
              }
            }
          }
          LOBYTE(v14) = v49;
          LOBYTE(v11) = v50;
          LOBYTE(v22) = v47;
          LOBYTE(v19) = v48;
          LOBYTE(v30) = v45;
          LOBYTE(v27) = v46;
        }
        else
        {
          result = 0;
        }
        if ((v30 & 7) != 0)
        {
          do
            v35 = __ldxr(v34);
          while (__stlxr(v35 - 2, v34));
        }
        if ((v27 & 7) != 0)
        {
          do
            v36 = __ldxr(v33);
          while (__stlxr(v36 - 2, v33));
        }
      }
      else
      {
        result = 0;
      }
      if ((v22 & 7) != 0)
      {
        do
          v37 = __ldxr(v26);
        while (__stlxr(v37 - 2, v26));
      }
      if ((v19 & 7) != 0)
      {
        do
          v38 = __ldxr(v25);
        while (__stlxr(v38 - 2, v25));
      }
    }
    else
    {
      result = 0;
    }
    if ((v14 & 7) != 0)
    {
      do
        v39 = __ldxr(v18);
      while (__stlxr(v39 - 2, v18));
    }
    if ((v11 & 7) != 0)
    {
      do
        v40 = __ldxr(v17);
      while (__stlxr(v40 - 2, v17));
    }
  }
  else
  {
    result = 0;
  }
  if ((v5 & 7) != 0)
  {
    do
      v41 = __ldxr(v9);
    while (__stlxr(v41 - 2, v9));
  }
  if ((v2 & 7) != 0)
  {
    do
      v42 = __ldxr(v8);
    while (__stlxr(v42 - 2, v8));
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::operator!=(uint64_t *a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::operator==(a1, a2) ^ 1;
}

void pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType::~PxOsdOpenSubdivTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;
  void **v49;

  v49 = (void **)((char *)this + 128);
  sub_20BEEB2B8(&v49);
  v2 = *((_QWORD *)this + 15);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *((_QWORD *)this + 14);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v8 = *((_QWORD *)this + 13);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  v11 = *((_QWORD *)this + 12);
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  v14 = *((_QWORD *)this + 11);
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  v17 = *((_QWORD *)this + 10);
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  v20 = *((_QWORD *)this + 9);
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  v23 = *((_QWORD *)this + 8);
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  v26 = *((_QWORD *)this + 7);
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  v29 = *((_QWORD *)this + 6);
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  v32 = *((_QWORD *)this + 5);
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stlxr(v34 - 2, v33));
  }
  v35 = *((_QWORD *)this + 4);
  if ((v35 & 7) != 0)
  {
    v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stlxr(v37 - 2, v36));
  }
  v38 = *((_QWORD *)this + 3);
  if ((v38 & 7) != 0)
  {
    v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stlxr(v40 - 2, v39));
  }
  v41 = *((_QWORD *)this + 2);
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stlxr(v43 - 2, v42));
  }
  v44 = *((_QWORD *)this + 1);
  if ((v44 & 7) != 0)
  {
    v45 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stlxr(v46 - 2, v45));
  }
  if ((*(_QWORD *)this & 7) != 0)
  {
    v47 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v48 = __ldxr(v47);
    while (__stlxr(v48 - 2, v47));
  }
}

pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType::PxOsdOpenSubdivTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::PxOsdOpenSubdivTokens_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int *v53;
  unsigned int v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int *v58;
  unsigned int v59;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  v61 = (uint64_t *)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "all", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v61, "none", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 16, "cornersOnly", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 24, "cornersPlus1", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 32, "cornersPlus2", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 40, "boundaries", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 48, "bilinear", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 56, "catmullClark", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 64, "loop", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 72, "edgeOnly", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 80, "edgeAndCorner", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 88, "uniform", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 96, "chaikin", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 104, "leftHanded", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 112, "rightHanded", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 120, "smooth", 0);
  v2 = *(_QWORD *)this;
  v62 = v2;
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) == 0)
      v62 &= 0xFFFFFFFFFFFFFFF8;
  }
  v5 = *v61;
  v63 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v63 &= 0xFFFFFFFFFFFFFFF8;
  }
  v8 = *((_QWORD *)this + 2);
  v64 = v8;
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v64 &= 0xFFFFFFFFFFFFFFF8;
  }
  v11 = *((_QWORD *)this + 3);
  v65 = v11;
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 2, v12));
    if ((v13 & 1) == 0)
      v65 &= 0xFFFFFFFFFFFFFFF8;
  }
  v14 = *((_QWORD *)this + 4);
  v66 = v14;
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 2, v15));
    if ((v16 & 1) == 0)
      v66 &= 0xFFFFFFFFFFFFFFF8;
  }
  v17 = *((_QWORD *)this + 5);
  v67 = v17;
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 2, v18));
    if ((v19 & 1) == 0)
      v67 &= 0xFFFFFFFFFFFFFFF8;
  }
  v20 = *((_QWORD *)this + 6);
  v68 = v20;
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 2, v21));
    if ((v22 & 1) == 0)
      v68 &= 0xFFFFFFFFFFFFFFF8;
  }
  v23 = *((_QWORD *)this + 7);
  v69 = v23;
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 2, v24));
    if ((v25 & 1) == 0)
      v69 &= 0xFFFFFFFFFFFFFFF8;
  }
  v26 = *((_QWORD *)this + 8);
  v70 = v26;
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 2, v27));
    if ((v28 & 1) == 0)
      v70 &= 0xFFFFFFFFFFFFFFF8;
  }
  v29 = *((_QWORD *)this + 9);
  v71 = v29;
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 2, v30));
    if ((v31 & 1) == 0)
      v71 &= 0xFFFFFFFFFFFFFFF8;
  }
  v32 = *((_QWORD *)this + 10);
  v72 = v32;
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 2, v33));
    if ((v34 & 1) == 0)
      v72 &= 0xFFFFFFFFFFFFFFF8;
  }
  v35 = *((_QWORD *)this + 11);
  v73 = v35;
  if ((v35 & 7) != 0)
  {
    v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 2, v36));
    if ((v37 & 1) == 0)
      v73 &= 0xFFFFFFFFFFFFFFF8;
  }
  v38 = *((_QWORD *)this + 12);
  v74 = v38;
  if ((v38 & 7) != 0)
  {
    v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 2, v39));
    if ((v40 & 1) == 0)
      v74 &= 0xFFFFFFFFFFFFFFF8;
  }
  v41 = *((_QWORD *)this + 13);
  v75 = v41;
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 2, v42));
    if ((v43 & 1) == 0)
      v75 &= 0xFFFFFFFFFFFFFFF8;
  }
  v44 = *((_QWORD *)this + 14);
  v76 = v44;
  if ((v44 & 7) != 0)
  {
    v45 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 2, v45));
    if ((v46 & 1) == 0)
      v76 &= 0xFFFFFFFFFFFFFFF8;
  }
  v47 = *((_QWORD *)this + 15);
  v77 = v47;
  if ((v47 & 7) != 0)
  {
    v48 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 2, v48));
    if ((v49 & 1) == 0)
      v77 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  v50 = operator new(0x80uLL);
  v51 = 0;
  *((_QWORD *)this + 16) = v50;
  *((_QWORD *)this + 17) = v50;
  *((_QWORD *)this + 18) = v50 + 16;
  do
  {
    v52 = *(&v62 + v51);
    *v50 = v52;
    if ((v52 & 7) != 0)
    {
      v53 = (unsigned int *)(v52 & 0xFFFFFFFFFFFFFFF8);
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 2, v53));
      if ((v54 & 1) == 0)
        *v50 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v51;
    ++v50;
  }
  while (v51 != 16);
  v55 = &v78;
  *((_QWORD *)this + 17) = v50;
  do
  {
    v57 = *--v55;
    v56 = v57;
    if ((v57 & 7) != 0)
    {
      v58 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
      do
        v59 = __ldxr(v58);
      while (__stlxr(v59 - 2, v58));
    }
  }
  while (v55 != &v62);
  return this;
}

void sub_20C7DE460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, _QWORD *a11, _QWORD *a12, _QWORD *a13, _QWORD *a14, _QWORD *a15, _QWORD *a16, void **a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int *v80;
  unsigned int v81;

  sub_20BEEB2B8(&a17);
  v45 = (char *)&a35;
  while (1)
  {
    v47 = *((_QWORD *)v45 - 1);
    v45 -= 8;
    v46 = v47;
    if ((v47 & 7) != 0)
    {
      v48 = (unsigned int *)(v46 & 0xFFFFFFFFFFFFFFF8);
      do
        v49 = __ldxr(v48);
      while (__stlxr(v49 - 2, v48));
    }
    if (v45 == &a19)
    {
      if ((*v41 & 7) != 0)
      {
        v50 = (unsigned int *)(*v41 & 0xFFFFFFFFFFFFFFF8);
        do
          v51 = __ldxr(v50);
        while (__stlxr(v51 - 2, v50));
      }
      if ((*v40 & 7) != 0)
      {
        v52 = (unsigned int *)(*v40 & 0xFFFFFFFFFFFFFFF8);
        do
          v53 = __ldxr(v52);
        while (__stlxr(v53 - 2, v52));
      }
      if ((*v39 & 7) != 0)
      {
        v54 = (unsigned int *)(*v39 & 0xFFFFFFFFFFFFFFF8);
        do
          v55 = __ldxr(v54);
        while (__stlxr(v55 - 2, v54));
      }
      if ((*v38 & 7) != 0)
      {
        v56 = (unsigned int *)(*v38 & 0xFFFFFFFFFFFFFFF8);
        do
          v57 = __ldxr(v56);
        while (__stlxr(v57 - 2, v56));
      }
      if ((*v37 & 7) != 0)
      {
        v58 = (unsigned int *)(*v37 & 0xFFFFFFFFFFFFFFF8);
        do
          v59 = __ldxr(v58);
        while (__stlxr(v59 - 2, v58));
      }
      if ((*v36 & 7) != 0)
      {
        v60 = (unsigned int *)(*v36 & 0xFFFFFFFFFFFFFFF8);
        do
          v61 = __ldxr(v60);
        while (__stlxr(v61 - 2, v60));
      }
      if ((*v44 & 7) != 0)
      {
        v62 = (unsigned int *)(*v44 & 0xFFFFFFFFFFFFFFF8);
        do
          v63 = __ldxr(v62);
        while (__stlxr(v63 - 2, v62));
      }
      if ((*v43 & 7) != 0)
      {
        v64 = (unsigned int *)(*v43 & 0xFFFFFFFFFFFFFFF8);
        do
          v65 = __ldxr(v64);
        while (__stlxr(v65 - 2, v64));
      }
      if ((*v42 & 7) != 0)
      {
        v66 = (unsigned int *)(*v42 & 0xFFFFFFFFFFFFFFF8);
        do
          v67 = __ldxr(v66);
        while (__stlxr(v67 - 2, v66));
      }
      if ((*a11 & 7) != 0)
      {
        v68 = (unsigned int *)(*a11 & 0xFFFFFFFFFFFFFFF8);
        do
          v69 = __ldxr(v68);
        while (__stlxr(v69 - 2, v68));
      }
      if ((*a12 & 7) != 0)
      {
        v70 = (unsigned int *)(*a12 & 0xFFFFFFFFFFFFFFF8);
        do
          v71 = __ldxr(v70);
        while (__stlxr(v71 - 2, v70));
      }
      if ((*a13 & 7) != 0)
      {
        v72 = (unsigned int *)(*a13 & 0xFFFFFFFFFFFFFFF8);
        do
          v73 = __ldxr(v72);
        while (__stlxr(v73 - 2, v72));
      }
      if ((*a14 & 7) != 0)
      {
        v74 = (unsigned int *)(*a14 & 0xFFFFFFFFFFFFFFF8);
        do
          v75 = __ldxr(v74);
        while (__stlxr(v75 - 2, v74));
      }
      if ((*a15 & 7) != 0)
      {
        v76 = (unsigned int *)(*a15 & 0xFFFFFFFFFFFFFFF8);
        do
          v77 = __ldxr(v76);
        while (__stlxr(v77 - 2, v76));
      }
      if ((*a16 & 7) != 0)
      {
        v78 = (unsigned int *)(*a16 & 0xFFFFFFFFFFFFFFF8);
        do
          v79 = __ldxr(v78);
        while (__stlxr(v79 - 2, v78));
      }
      if ((*v35 & 7) != 0)
      {
        v80 = (unsigned int *)(*v35 & 0xFFFFFFFFFFFFFFF8);
        do
          v81 = __ldxr(v80);
        while (__stlxr(v81 - 2, v80));
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_20C7DE6FC()
{
  JUMPOUT(0x20C7DE5FCLL);
}

void sub_20C7DE704()
{
  JUMPOUT(0x20C7DE620);
}

void sub_20C7DE70C()
{
  JUMPOUT(0x20C7DE644);
}

void sub_20C7DE714()
{
  JUMPOUT(0x20C7DE668);
}

void sub_20C7DE71C()
{
  JUMPOUT(0x20C7DE68CLL);
}

void sub_20C7DE724()
{
  JUMPOUT(0x20C7DE6B0);
}

void sub_20C7DE72C()
{
  JUMPOUT(0x20C7DE6D4);
}

BOOL pxrInternal__aapl__pxrReserved__::operator==(_QWORD *a1, uint64_t a2, char *a3)
{
  return (*a1 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8)
      && a1[1] == *(_QWORD *)(a2 + 8)
      && a1[2] == *(_QWORD *)(a2 + 16)
      && pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 3), (std::type_info *)(a2 + 24), a3)&& sub_20C7DF048((uint64_t)(a1 + 5), (_QWORD *)(a2 + 40));
}

BOOL pxrInternal__aapl__pxrReserved__::operator!=(_QWORD *a1, uint64_t a2, char *a3)
{
  return !pxrInternal__aapl__pxrReserved__::operator==(a1, a2, a3);
}

BOOL pxrInternal__aapl__pxrReserved__::HdAovHasDepthSemantic(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t *EmptyString;
  pxrInternal__aapl__pxrReserved__::HdAovTokens_StaticTokenType *v3;
  uint64_t *v4;
  const char *v5;
  int v6;
  unint64_t v7;
  size_t v8;
  _BOOL8 v9;
  void **v10;
  void *__p[2];
  unsigned __int8 v13;

  if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
  pxrInternal__aapl__pxrReserved__::TfStringToLowerAscii((unsigned __int8 *)EmptyString, (uint64_t)__p);
  v3 = (pxrInternal__aapl__pxrReserved__::HdAovTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdAovTokens);
  if (!v3)
    v3 = sub_20C7DF0DC(&pxrInternal__aapl__pxrReserved__::HdAovTokens);
  if ((*((_QWORD *)v3 + 1) & 0xFFFFFFFFFFFFFFF8) != 0)
    v4 = (uint64_t *)((*((_QWORD *)v3 + 1) & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v4 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v3);
  if (*((char *)v4 + 23) >= 0)
    v5 = (const char *)v4;
  else
    v5 = (const char *)*v4;
  v6 = (char)v13;
  if ((v13 & 0x80u) == 0)
    v7 = v13;
  else
    v7 = (unint64_t)__p[1];
  v8 = strlen(v5);
  if (v7 >= v8)
  {
    v10 = (void **)__p[0];
    if ((v13 & 0x80u) == 0)
      v10 = __p;
    v9 = strcmp((const char *)v10 + v7 - v8, v5) == 0;
    if (v6 < 0)
      goto LABEL_21;
  }
  else
  {
    v9 = 0;
    if ((char)v13 < 0)
LABEL_21:
      operator delete(__p[0]);
  }
  return v9;
}

void sub_20C7DE9EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::HdAovHasDepthStencilSemantic(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t *EmptyString;
  pxrInternal__aapl__pxrReserved__::HdAovTokens_StaticTokenType *v3;
  uint64_t *v4;
  const char *v5;
  int v6;
  void *v7;
  unsigned __int8 v8;
  unint64_t v9;
  size_t v10;
  _BOOL8 v11;
  void **v12;
  _QWORD v14[2];
  char v15;
  void *__p[2];
  unsigned __int8 v17;

  if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
  pxrInternal__aapl__pxrReserved__::TfStringToLowerAscii((unsigned __int8 *)EmptyString, (uint64_t)__p);
  v3 = (pxrInternal__aapl__pxrReserved__::HdAovTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdAovTokens);
  if (!v3)
    v3 = sub_20C7DF0DC(&pxrInternal__aapl__pxrReserved__::HdAovTokens);
  if ((*((_QWORD *)v3 + 2) & 0xFFFFFFFFFFFFFFF8) != 0)
    v4 = (uint64_t *)((*((_QWORD *)v3 + 2) & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v4 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v3);
  v5 = (const char *)v14;
  pxrInternal__aapl__pxrReserved__::TfStringToLowerAscii((unsigned __int8 *)v4, (uint64_t)v14);
  v6 = v15;
  v7 = (void *)v14[0];
  if (v15 < 0)
    v5 = (const char *)v14[0];
  v8 = v17;
  if ((v17 & 0x80u) == 0)
    v9 = v17;
  else
    v9 = (unint64_t)__p[1];
  v10 = strlen(v5);
  if (v9 < v10)
  {
    v11 = 0;
    if ((v15 & 0x80000000) == 0)
      goto LABEL_21;
    goto LABEL_20;
  }
  v12 = (void **)__p[0];
  if ((v17 & 0x80u) == 0)
    v12 = __p;
  v11 = strcmp((const char *)v12 + v9 - v10, v5) == 0;
  if (v6 < 0)
  {
LABEL_20:
    operator delete(v7);
    v8 = v17;
  }
LABEL_21:
  if ((v8 & 0x80) != 0)
    operator delete(__p[0]);
  return v11;
}

void sub_20C7DEB20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdParsedAovToken::HdParsedAovToken(uint64_t this)
{
  *(_QWORD *)this = 0;
  *(_BYTE *)(this + 8) &= 0xF8u;
  return this;
}

{
  *(_QWORD *)this = 0;
  *(_BYTE *)(this + 8) &= 0xF8u;
  return this;
}

pxrInternal__aapl__pxrReserved__::HdParsedAovToken *pxrInternal__aapl__pxrReserved__::HdParsedAovToken::HdParsedAovToken(pxrInternal__aapl__pxrReserved__::HdParsedAovToken *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t *EmptyString;
  pxrInternal__aapl__pxrReserved__::HdAovTokens_StaticTokenType *v5;
  uint64_t *v6;
  pxrInternal__aapl__pxrReserved__::HdAovTokens_StaticTokenType *v7;
  uint64_t *v8;
  pxrInternal__aapl__pxrReserved__::HdAovTokens_StaticTokenType *v9;
  uint64_t *v10;
  size_t v11;
  std::string::size_type v12;
  std::string::size_type v13;
  size_t v14;
  size_t v15;
  const void *v16;
  const void *v17;
  std::string::size_type v19;
  std::string::size_type v20;
  size_t v21;
  size_t v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  const void *v28;
  std::string::size_type v30;
  std::string::size_type v31;
  size_t v32;
  size_t v33;
  const void *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  const void *v39;
  uint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  char v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int v51;
  std::string v53;
  uint64_t v54;
  char v55;

  *(_QWORD *)this = 0;
  *((_BYTE *)this + 8) &= 0xF8u;
  if ((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
  v5 = (pxrInternal__aapl__pxrReserved__::HdAovTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdAovTokens);
  if (!v5)
    v5 = sub_20C7DF0DC(&pxrInternal__aapl__pxrReserved__::HdAovTokens);
  if ((*((_QWORD *)v5 + 14) & 0xFFFFFFFFFFFFFFF8) != 0)
    v6 = (uint64_t *)((*((_QWORD *)v5 + 14) & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v6 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v5);
  v7 = (pxrInternal__aapl__pxrReserved__::HdAovTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdAovTokens);
  if (!v7)
    v7 = sub_20C7DF0DC(&pxrInternal__aapl__pxrReserved__::HdAovTokens);
  if ((*((_QWORD *)v7 + 15) & 0xFFFFFFFFFFFFFFF8) != 0)
    v8 = (uint64_t *)((*((_QWORD *)v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v8 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v7);
  v9 = (pxrInternal__aapl__pxrReserved__::HdAovTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdAovTokens);
  if (!v9)
    v9 = sub_20C7DF0DC(&pxrInternal__aapl__pxrReserved__::HdAovTokens);
  if ((*((_QWORD *)v9 + 16) & 0xFFFFFFFFFFFFFFF8) != 0)
    v10 = (uint64_t *)((*((_QWORD *)v9 + 16) & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v10 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
  v11 = *((unsigned __int8 *)EmptyString + 23);
  if (*((char *)EmptyString + 23) < 0)
    v12 = EmptyString[1];
  else
    v12 = *((unsigned __int8 *)EmptyString + 23);
  v13 = *((unsigned __int8 *)v6 + 23);
  if (*((char *)v6 + 23) < 0)
  {
    v14 = v6[1];
    if (v12 <= v14)
      goto LABEL_41;
  }
  else
  {
    v14 = *((unsigned __int8 *)v6 + 23);
    if (v12 <= v13)
      goto LABEL_41;
  }
  if ((v11 & 0x80) != 0)
  {
    v16 = (const void *)*EmptyString;
    if (EmptyString[1] >= v14)
      v15 = v14;
    else
      v15 = EmptyString[1];
  }
  else
  {
    if (v11 >= v14)
      v15 = v14;
    else
      v15 = *((unsigned __int8 *)EmptyString + 23);
    v16 = EmptyString;
  }
  if ((v13 & 0x80u) == 0)
    v17 = v6;
  else
    v17 = (const void *)*v6;
  if (!memcmp(v16, v17, v15) && v15 == v14)
  {
    if ((v13 & 0x80) != 0)
      v13 = v6[1];
    std::string::basic_string(&v53, (const std::string *)EmptyString, v13, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v55);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v54);
    v24 = *(_QWORD *)this;
    v25 = *(_QWORD *)this & 7;
    if (&v54 == (uint64_t *)this)
    {
      if (v25)
      {
        v45 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
        do
          v46 = __ldxr(v45);
        while (__stlxr(v46 - 2, v45));
      }
    }
    else
    {
      if (v25)
      {
        v26 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
        do
          v27 = __ldxr(v26);
        while (__stlxr(v27 - 2, v26));
      }
      *(_QWORD *)this = v54;
      v54 = 0;
    }
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v53.__r_.__value_.__l.__data_);
    v47 = *((_BYTE *)this + 8) | 1;
    goto LABEL_125;
  }
LABEL_41:
  if ((v11 & 0x80) != 0)
    v19 = EmptyString[1];
  else
    v19 = v11;
  v20 = *((unsigned __int8 *)v8 + 23);
  if (*((char *)v8 + 23) < 0)
  {
    v21 = v8[1];
    if (v19 <= v21)
      goto LABEL_70;
  }
  else
  {
    v21 = *((unsigned __int8 *)v8 + 23);
    if (v19 <= v20)
      goto LABEL_70;
  }
  if ((v11 & 0x80) != 0)
  {
    v23 = (const void *)*EmptyString;
    if (EmptyString[1] >= v21)
      v22 = v21;
    else
      v22 = EmptyString[1];
  }
  else
  {
    if (v11 >= v21)
      v22 = v21;
    else
      v22 = v11;
    v23 = EmptyString;
  }
  if ((v20 & 0x80u) == 0)
    v28 = v8;
  else
    v28 = (const void *)*v8;
  if (!memcmp(v23, v28, v22) && v22 == v21)
  {
    if ((v20 & 0x80) != 0)
      v20 = v8[1];
    std::string::basic_string(&v53, (const std::string *)EmptyString, v20, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v55);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v54);
    v35 = *(_QWORD *)this;
    v36 = *(_QWORD *)this & 7;
    if (&v54 == (uint64_t *)this)
    {
      if (v36)
      {
        v48 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
        do
          v49 = __ldxr(v48);
        while (__stlxr(v49 - 2, v48));
      }
    }
    else
    {
      if (v36)
      {
        v37 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
        do
          v38 = __ldxr(v37);
        while (__stlxr(v38 - 2, v37));
      }
      *(_QWORD *)this = v54;
      v54 = 0;
    }
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v53.__r_.__value_.__l.__data_);
    v47 = *((_BYTE *)this + 8) | 2;
    goto LABEL_125;
  }
LABEL_70:
  if ((v11 & 0x80) != 0)
    v30 = EmptyString[1];
  else
    v30 = v11;
  v31 = *((unsigned __int8 *)v10 + 23);
  if ((*((char *)v10 + 23) & 0x80000000) == 0)
  {
    v32 = *((unsigned __int8 *)v10 + 23);
    if (v30 <= v31)
      goto LABEL_99;
    goto LABEL_77;
  }
  v32 = v10[1];
  if (v30 > v32)
  {
LABEL_77:
    if ((v11 & 0x80) != 0)
    {
      v34 = (const void *)*EmptyString;
      if (EmptyString[1] >= v32)
        v33 = v32;
      else
        v33 = EmptyString[1];
    }
    else
    {
      if (v11 >= v32)
        v33 = v32;
      else
        v33 = v11;
      v34 = EmptyString;
    }
    if ((v31 & 0x80u) == 0)
      v39 = v10;
    else
      v39 = (const void *)*v10;
    if (memcmp(v34, v39, v33) || v33 != v32)
      goto LABEL_99;
    if ((v31 & 0x80) != 0)
      v31 = v10[1];
    std::string::basic_string(&v53, (const std::string *)EmptyString, v31, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v55);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v54);
    v41 = *(_QWORD *)this;
    v42 = *(_QWORD *)this & 7;
    if (&v54 == (uint64_t *)this)
    {
      if (v42)
      {
        v50 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
        do
          v51 = __ldxr(v50);
        while (__stlxr(v51 - 2, v50));
      }
    }
    else
    {
      if (v42)
      {
        v43 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
        do
          v44 = __ldxr(v43);
        while (__stlxr(v44 - 2, v43));
      }
      *(_QWORD *)this = v54;
      v54 = 0;
    }
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v53.__r_.__value_.__l.__data_);
    v47 = *((_BYTE *)this + 8) | 4;
LABEL_125:
    *((_BYTE *)this + 8) = v47;
    return this;
  }
LABEL_99:
  sub_20BF32220(this, a2);
  return this;
}

void sub_20C7DEFE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;
  unsigned int *v17;
  unsigned int v18;

  if (a15 < 0)
    operator delete(__p);
  if ((*v15 & 7) != 0)
  {
    v17 = (unsigned int *)(*v15 & 0xFFFFFFFFFFFFFFF8);
    do
      v18 = __ldxr(v17);
    while (__stlxr(v18 - 2, v17));
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_20C7DF048(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _BOOL8 v4;
  _QWORD *v5;
  char *v6;

  if (*(_QWORD *)(a1 + 24) != a2[3])
    return 0;
  v3 = (_QWORD *)(a1 + 16);
  do
  {
    v3 = (_QWORD *)*v3;
    v4 = v3 == 0;
    if (!v3)
      break;
    v5 = sub_20BF2B2B4(a2, v3 + 2);
    if (!v5)
      break;
  }
  while ((v3[2] & 0xFFFFFFFFFFFFFFF8) == (v5[2] & 0xFFFFFFFFFFFFFFF8)
       && (pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)(v3 + 3), (std::type_info *)(v5 + 3), v6) & 1) != 0);
  return v4;
}

pxrInternal__aapl__pxrReserved__::HdAovTokens_StaticTokenType *sub_20C7DF0DC(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::HdAovTokens_StaticTokenType *result;
  void *v4;

  result = sub_20C7DF124();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::HdAovTokens_StaticTokenType::~HdAovTokens_StaticTokenType(result);
    operator delete(v4);
  }
  return (pxrInternal__aapl__pxrReserved__::HdAovTokens_StaticTokenType *)atomic_load(a1);
}

pxrInternal__aapl__pxrReserved__::HdAovTokens_StaticTokenType *sub_20C7DF124()
{
  pxrInternal__aapl__pxrReserved__::HdAovTokens_StaticTokenType *v0;

  v0 = (pxrInternal__aapl__pxrReserved__::HdAovTokens_StaticTokenType *)operator new(0xA0uLL);
  pxrInternal__aapl__pxrReserved__::HdAovTokens_StaticTokenType::HdAovTokens_StaticTokenType(v0);
  return v0;
}

void sub_20C7DF150(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdBasisCurvesReprDescTokens_StaticTokenType::~HdBasisCurvesReprDescTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::HdBasisCurvesReprDescTokens_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  void **v13;

  v13 = (void **)((char *)this + 32);
  sub_20BEEB2B8(&v13);
  v2 = *((_QWORD *)this + 3);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *((_QWORD *)this + 2);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v8 = *((_QWORD *)this + 1);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  if ((*(_QWORD *)this & 7) != 0)
  {
    v11 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
}

pxrInternal__aapl__pxrReserved__::HdBasisCurvesReprDescTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::HdBasisCurvesReprDescTokens_StaticTokenType::HdBasisCurvesReprDescTokens_StaticTokenType(unsigned int **this)
{
  unsigned int **v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int **v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int *v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v2 = (unsigned int **)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "surfaceShader", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2, "surfaceShaderUnlit", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 2, "hullColor", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 3, "pointColor", 0);
  v3 = *this;
  v26 = v3;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      v26 = v4;
  }
  v6 = *v2;
  v27 = v6;
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    if ((v8 & 1) == 0)
      v27 = v7;
  }
  v9 = this[2];
  v28 = v9;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      v28 = v10;
  }
  v12 = this[3];
  v29 = v12;
  if ((v12 & 7) != 0)
  {
    v13 = (unsigned int *)((unint64_t)v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 2, v13));
    if ((v14 & 1) == 0)
      v29 = v13;
  }
  this[4] = 0;
  this[5] = 0;
  this[6] = 0;
  v15 = (unsigned int *)operator new(0x20uLL);
  v16 = 0;
  this[4] = v15;
  this[5] = v15;
  this[6] = v15 + 8;
  do
  {
    v17 = (&v26)[v16];
    *(_QWORD *)v15 = v17;
    if ((v17 & 7) != 0)
    {
      v18 = (unsigned int *)((unint64_t)v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 2, v18));
      if ((v19 & 1) == 0)
        *(_QWORD *)v15 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v16;
    v15 += 2;
  }
  while (v16 != 4);
  v20 = (unsigned int **)&v30;
  this[5] = v15;
  do
  {
    v22 = (uint64_t)*--v20;
    v21 = v22;
    if ((v22 & 7) != 0)
    {
      v23 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
      do
        v24 = __ldxr(v23);
      while (__stlxr(v24 - 2, v23));
    }
  }
  while (v20 != &v26);
  return (pxrInternal__aapl__pxrReserved__::HdBasisCurvesReprDescTokens_StaticTokenType *)this;
}

void sub_20C7DF434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;

  sub_20BEEB2B8(&a10);
  v21 = &a16;
  while (1)
  {
    v23 = *--v21;
    v22 = v23;
    if ((v23 & 7) != 0)
    {
      v24 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
      do
        v25 = __ldxr(v24);
      while (__stlxr(v25 - 2, v24));
    }
    if (v21 == (uint64_t *)&a12)
    {
      if ((*v19 & 7) != 0)
      {
        v26 = (unsigned int *)(*v19 & 0xFFFFFFFFFFFFFFF8);
        do
          v27 = __ldxr(v26);
        while (__stlxr(v27 - 2, v26));
      }
      if ((*v18 & 7) != 0)
      {
        v28 = (unsigned int *)(*v18 & 0xFFFFFFFFFFFFFFF8);
        do
          v29 = __ldxr(v28);
        while (__stlxr(v29 - 2, v28));
      }
      if ((*v17 & 7) != 0)
      {
        v30 = (unsigned int *)(*v17 & 0xFFFFFFFFFFFFFFF8);
        do
          v31 = __ldxr(v30);
        while (__stlxr(v31 - 2, v30));
      }
      if ((*v16 & 7) != 0)
      {
        v32 = (unsigned int *)(*v16 & 0xFFFFFFFFFFFFFFF8);
        do
          v33 = __ldxr(v32);
        while (__stlxr(v33 - 2, v32));
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_20C7DF514()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::HD_ENABLE_REFINED_CURVES))
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<int>((uint64_t)&pxrInternal__aapl__pxrReserved__::HD_ENABLE_REFINED_CURVES);
    atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::HD_ENABLE_REFINED_CURVES);
  }
}

pxrInternal__aapl__pxrReserved__::HdRprim *pxrInternal__aapl__pxrReserved__::HdBasisCurves::HdBasisCurves(pxrInternal__aapl__pxrReserved__::HdBasisCurves *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  pxrInternal__aapl__pxrReserved__::HdRprim *result;

  result = pxrInternal__aapl__pxrReserved__::HdRprim::HdRprim(this, a2);
  *(_QWORD *)result = off_24C54BB80;
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::HdBasisCurves::GetBuiltinPrimvarNames(pxrInternal__aapl__pxrReserved__::HdBasisCurves *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v1 = atomic_load((unsigned __int8 *)&qword_25498D5B0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498D5B0))
  {
    v3 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdTokens);
    if (!v3)
      v3 = sub_20C7DFC58(&pxrInternal__aapl__pxrReserved__::HdTokens);
    v4 = *((_QWORD *)v3 + 57);
    v20 = v4;
    if ((v4 & 7) != 0)
    {
      v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 2, v5));
      if ((v6 & 1) == 0)
        v20 = (uint64_t)v5;
    }
    v7 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdTokens);
    if (!v7)
      v7 = sub_20C7DFC58(&pxrInternal__aapl__pxrReserved__::HdTokens);
    v8 = *((_QWORD *)v7 + 52);
    v21 = v8;
    if ((v8 & 7) != 0)
    {
      v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 2, v9));
      if ((v10 & 1) == 0)
        v21 &= 0xFFFFFFFFFFFFFFF8;
    }
    v11 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdTokens);
    if (!v11)
      v11 = sub_20C7DFC58(&pxrInternal__aapl__pxrReserved__::HdTokens);
    v12 = *((_QWORD *)v11 + 82);
    v22 = v12;
    if ((v12 & 7) != 0)
    {
      v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 2, v13));
      if ((v14 & 1) == 0)
        v22 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_20C374970(qword_25498D598, &v20, 3uLL);
    v15 = &v23;
    do
    {
      v17 = *--v15;
      v16 = v17;
      if ((v17 & 7) != 0)
      {
        v18 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
        do
          v19 = __ldxr(v18);
        while (__stlxr(v19 - 2, v18));
      }
    }
    while (v15 != &v20);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, qword_25498D598, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498D5B0);
  }
  return qword_25498D598;
}

void sub_20C7DF75C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498D5B0);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::HdBasisCurves::_reprDescConfig(pxrInternal__aapl__pxrReserved__::HdBasisCurves *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_25498D5D0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498D5D0))
  {
    qword_25498D5B8 = 0;
    unk_25498D5C0 = 0;
    qword_25498D5C8 = 0;
    __cxa_guard_release(&qword_25498D5D0);
  }
  return &qword_25498D5B8;
}

BOOL pxrInternal__aapl__pxrReserved__::HdBasisCurves::IsEnabledForceRefinedCurves(pxrInternal__aapl__pxrReserved__::HdBasisCurves *this)
{
  _DWORD *v1;

  v1 = (_DWORD *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::HD_ENABLE_REFINED_CURVES);
  if (!v1)
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<int>((uint64_t)&pxrInternal__aapl__pxrReserved__::HD_ENABLE_REFINED_CURVES);
    v1 = (_DWORD *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::HD_ENABLE_REFINED_CURVES);
  }
  return *v1 == 1;
}

_QWORD *pxrInternal__aapl__pxrReserved__::HdBasisCurves::ConfigureRepr(pxrInternal__aapl__pxrReserved__::HdBasisCurves *a1, int *a2)
{
  _DWORD *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  _QWORD *result;
  unsigned int *v9;
  unsigned int v10;
  int v11;
  unsigned int *v12;

  v4 = (_DWORD *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::HD_ENABLE_REFINED_CURVES);
  if (!v4)
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<int>((uint64_t)&pxrInternal__aapl__pxrReserved__::HD_ENABLE_REFINED_CURVES);
    v4 = (_DWORD *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::HD_ENABLE_REFINED_CURVES);
  }
  if (*v4 == 1)
    *a2 = 2;
  pxrInternal__aapl__pxrReserved__::HdBasisCurves::_reprDescConfig(a1);
  v11 = *a2;
  v5 = (unsigned int *)*((_QWORD *)a2 + 1);
  v12 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v12 = v6;
  }
  result = sub_20C7DF984(&qword_25498D5B8, (uint64_t *)a1, (uint64_t)&v11);
  if ((v12 & 7) != 0)
  {
    v9 = (unsigned int *)((unint64_t)v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  return result;
}

_QWORD *sub_20C7DF984(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  _QWORD v11[2];
  uint64_t v12;

  v4 = *a1;
  v5 = a1[1];
  if (*a1 == v5)
  {
LABEL_4:
    sub_20C7E0054((uint64_t)v11, a2, a3);
    result = (_QWORD *)sub_20C7DFCE0(a1, (uint64_t)v11);
    if ((v12 & 7) != 0)
    {
      v7 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stlxr(v8 - 2, v7));
    }
    if ((v11[0] & 7) != 0)
    {
      v9 = (unsigned int *)(v11[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    while ((*(_QWORD *)v4 & 0xFFFFFFFFFFFFFFF8) != (*a2 & 0xFFFFFFFFFFFFFFF8))
    {
      v4 += 24;
      if (v4 == v5)
        goto LABEL_4;
    }
    *(_DWORD *)(v4 + 8) = *(_DWORD *)a3;
    return sub_20BF32220((_QWORD *)(v4 + 16), (_QWORD *)(a3 + 8));
  }
  return result;
}

void sub_20C7DFA4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  unsigned int *v13;
  unsigned int v14;

  if ((a12 & 7) != 0)
  {
    v13 = (unsigned int *)(a12 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  sub_20C96B3E4(&a10);
  _Unwind_Resume(a1);
}

unint64_t *pxrInternal__aapl__pxrReserved__::HdBasisCurves::_GetReprDesc@<X0>(pxrInternal__aapl__pxrReserved__::HdBasisCurves *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::HdBasisCurves::_reprDescConfig(this);
  return sub_20C7DFAB4((char **)&qword_25498D5B8, this, a2);
}

unint64_t *sub_20C7DFAB4@<X0>(char **a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  char *v5;
  const char *v6;
  unint64_t v7;
  const char *v8;
  unint64_t *result;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  char *v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  char v23;

  v5 = *a1;
  v6 = a1[1];
  v19 = *a1;
  v20 = v6;
  while (v5 != v6)
  {
    if ((*(_QWORD *)*sub_20C7E00C8(&v19) & 0xFFFFFFFFFFFFFFF8) == (*a2 & 0xFFFFFFFFFFFFFFF8))
    {
      result = sub_20C7E00C8(&v19);
      v10 = *result;
      *(_DWORD *)a3 = *(_DWORD *)(*result + 8);
      v11 = *(_QWORD *)(v10 + 16);
      *(_QWORD *)(a3 + 8) = v11;
      if ((v11 & 7) == 0)
        return result;
      v12 = v11 & 0xFFFFFFFFFFFFFFF8;
      do
        v13 = __ldxr((unsigned int *)v12);
      while (__stxr(v13 + 2, (unsigned int *)v12));
      if ((v13 & 1) != 0)
        return result;
LABEL_29:
      *(_QWORD *)(a3 + 8) = v12;
      return result;
    }
    sub_20C7E0150(&v19);
    v5 = v19;
    v6 = v20;
  }
  v19 = "hd/rprim.h";
  v20 = "Find";
  v21 = 329;
  v22 = "DescArray pxrInternal__aapl__pxrReserved__::HdRprim::_ReprDescConfigs<pxrInternal__aapl__pxrReserved__::HdBasisC"
        "urvesReprDesc>::Find(const TfToken &) const [DESC_TYPE = pxrInternal__aapl__pxrReserved__::HdBasisCurvesReprDesc, N = 1]";
  v23 = 0;
  v7 = *a2 & 0xFFFFFFFFFFFFFFF8;
  if (v7)
  {
    v8 = (const char *)(v7 + 16);
    if (*(char *)(v7 + 39) < 0)
      v8 = *(const char **)v8;
  }
  else
  {
    v8 = "";
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, 1, (pxrInternal__aapl__pxrReserved__ *)"Repr %s not found", v8);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  result = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesReprDescTokens);
  if (!result)
    result = (unint64_t *)sub_20C7E01D0(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesReprDescTokens);
  v12 = *result;
  if ((*result & 7) == 0)
  {
    *(_DWORD *)a3 = 0;
    goto LABEL_29;
  }
  v14 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
  do
    v15 = __ldxr(v14);
  while (__stxr(v15 + 2, v14));
  if ((v15 & 1) == 0)
    v12 &= 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = v12;
  if ((v12 & 7) != 0)
  {
    v16 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 2, v16));
    if ((v17 & 1) == 0)
      *(_QWORD *)(a3 + 8) = v16;
    do
      v18 = __ldxr(v16);
    while (__stlxr(v18 - 2, v16));
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *sub_20C7DFC58(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *result;
  void *v4;

  result = sub_20C7DFCA0();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType::~HdTokens_StaticTokenType(result);
    operator delete(v4);
  }
  return (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load(a1);
}

pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *sub_20C7DFCA0()
{
  pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *v0;

  v0 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)operator new(0x2C0uLL);
  pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType::HdTokens_StaticTokenType(v0);
  return v0;
}

void sub_20C7DFCCC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C7DFCE0(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD v16[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_20BDDF694();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)sub_20BDE4FF4(result, v12);
    v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *(_QWORD *)v14 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    *((_DWORD *)v14 + 2) = *(_DWORD *)(a2 + 8);
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    sub_20C7DFE1C(a1, v16);
    v8 = a1[1];
    result = sub_20C7DFFC4((uint64_t)v16);
  }
  else
  {
    *(_QWORD *)v7 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_DWORD *)(v7 + 8) = *(_DWORD *)(a2 + 8);
    *(_QWORD *)(v7 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 24;
    a1[1] = v7 + 24;
  }
  a1[1] = v8;
  return result;
}

void sub_20C7DFE08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C7DFFC4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C7DFE1C(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C7DFE90((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C7DFE90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      v8 = *(_QWORD *)(a3 - 24);
      a3 -= 24;
      *(_QWORD *)(v7 - 24) = v8;
      *(_QWORD *)a3 = 0;
      *(_DWORD *)(v7 - 16) = *(_DWORD *)(a3 + 8);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)(a3 + 16) = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_20C7DFF30((uint64_t)v11);
  return v9;
}

uint64_t sub_20C7DFF30(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C7DFF64(a1);
  return a1;
}

uint64_t sub_20C7DFF64(uint64_t result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;

  v1 = *(_QWORD **)(*(_QWORD *)(result + 16) + 8);
  v2 = *(_QWORD **)(*(_QWORD *)(result + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1[2];
    if ((v3 & 7) != 0)
    {
      v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v5 = __ldxr(v4);
      while (__stlxr(v5 - 2, v4));
    }
    if ((*v1 & 7) != 0)
    {
      v6 = (unsigned int *)(*v1 & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stlxr(v7 - 2, v6));
    }
    v1 += 3;
  }
  return result;
}

uint64_t sub_20C7DFFC4(uint64_t a1)
{
  sub_20C7DFFF8(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20C7DFFF8(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  while (1)
  {
    v2 = *(_QWORD *)(result + 16);
    if (v2 == a2)
      break;
    v3 = (uint64_t *)(v2 - 24);
    *(_QWORD *)(result + 16) = v2 - 24;
    v4 = *(_QWORD *)(v2 - 8);
    if ((v4 & 7) != 0)
    {
      v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
    v7 = *v3;
    if ((v7 & 7) != 0)
    {
      v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
      do
        v9 = __ldxr(v8);
      while (__stlxr(v9 - 2, v8));
    }
  }
  return result;
}

uint64_t sub_20C7E0054(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;

  v3 = *a2;
  *(_QWORD *)result = *a2;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      *(_QWORD *)result &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_DWORD *)(result + 8) = *(_DWORD *)a3;
  v6 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(result + 16) = v6;
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    if ((v8 & 1) == 0)
      *(_QWORD *)(result + 16) &= 0xFFFFFFFFFFFFFFF8;
  }
  return result;
}

_QWORD *sub_20C7E00C8(_QWORD *result)
{
  char *v1;
  char *v2;
  _QWORD v3[4];
  char v4;
  int v5;

  if (*result == result[1])
  {
    v1 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/iterator.h", 47);
    v3[0] = sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/iterator.h", (uint64_t)v1, 0x2Fu);
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<std::pair<pxrInternal__aapl__pxrRes"
            "erved__::TfToken, std::array<pxrInternal__aapl__pxrReserved__::HdBasisCurvesReprDesc, 1>>>>::operator->() [T"
            " = const std::vector<std::pair<pxrInternal__aapl__pxrReserved__::TfToken, std::array<pxrInternal__aapl__pxrR"
            "eserved__::HdBasisCurvesReprDesc, 1>>>, Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", v2);
  }
  return result;
}

_QWORD *sub_20C7E0150(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<std::pair<pxrInternal"
            "__aapl__pxrReserved__::TfToken, std::array<pxrInternal__aapl__pxrReserved__::HdBasisCurvesReprDesc, 1>>>>::o"
            "perator++() [T = const std::vector<std::pair<pxrInternal__aapl__pxrReserved__::TfToken, std::array<pxrIntern"
            "al__aapl__pxrReserved__::HdBasisCurvesReprDesc, 1>>>, Reverse = false]";
    v4 = 0;
    v5 = 1;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 24;
  }
  return a1;
}

unsigned int **sub_20C7E01D0(unint64_t *a1)
{
  unsigned int **result;
  void *v4;

  result = sub_20C7E0218();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::HdBasisCurvesReprDescTokens_StaticTokenType::~HdBasisCurvesReprDescTokens_StaticTokenType((pxrInternal__aapl__pxrReserved__::HdBasisCurvesReprDescTokens_StaticTokenType *)result);
    operator delete(v4);
  }
  return (unsigned int **)atomic_load(a1);
}

unsigned int **sub_20C7E0218()
{
  unsigned int **v0;

  v0 = (unsigned int **)operator new(0x38uLL);
  pxrInternal__aapl__pxrReserved__::HdBasisCurvesReprDescTokens_StaticTokenType::HdBasisCurvesReprDescTokens_StaticTokenType(v0);
  return v0;
}

void sub_20C7E0244(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchemaTokens_StaticTokenType::~HdBasisCurvesSchemaTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchemaTokens_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  void **v10;

  v10 = (void **)((char *)this + 24);
  sub_20BEEB2B8(&v10);
  v2 = *((_QWORD *)this + 2);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *((_QWORD *)this + 1);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  if ((*(_QWORD *)this & 7) != 0)
  {
    v8 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
}

pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchemaTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchemaTokens_StaticTokenType::HdBasisCurvesSchemaTokens_StaticTokenType(unsigned int **this)
{
  unsigned int **v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int **v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v2 = (unsigned int **)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "basisCurves", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2, "topology", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 2, "geomSubsets", 0);
  v3 = *this;
  v23 = v3;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      v23 = v4;
  }
  v6 = *v2;
  v24 = v6;
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    if ((v8 & 1) == 0)
      v24 = v7;
  }
  v9 = this[2];
  v25 = v9;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      v25 = v10;
  }
  this[3] = 0;
  this[4] = 0;
  this[5] = 0;
  v12 = (unsigned int *)operator new(0x18uLL);
  v13 = 0;
  this[3] = v12;
  this[4] = v12;
  this[5] = v12 + 6;
  do
  {
    v14 = (&v23)[v13];
    *(_QWORD *)v12 = v14;
    if ((v14 & 7) != 0)
    {
      v15 = (unsigned int *)((unint64_t)v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 2, v15));
      if ((v16 & 1) == 0)
        *(_QWORD *)v12 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v13;
    v12 += 2;
  }
  while (v13 != 3);
  v17 = (unsigned int **)&v26;
  this[4] = v12;
  do
  {
    v19 = (uint64_t)*--v17;
    v18 = v19;
    if ((v19 & 7) != 0)
    {
      v20 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stlxr(v21 - 2, v20));
    }
  }
  while (v17 != &v23);
  return (pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchemaTokens_StaticTokenType *)this;
}

void sub_20C7E04BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;

  sub_20BEEB2B8(&a9);
  v18 = &a14;
  while (1)
  {
    v20 = *--v18;
    v19 = v20;
    if ((v20 & 7) != 0)
    {
      v21 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
      do
        v22 = __ldxr(v21);
      while (__stlxr(v22 - 2, v21));
    }
    if (v18 == (uint64_t *)&a11)
    {
      if ((*v16 & 7) != 0)
      {
        v23 = (unsigned int *)(*v16 & 0xFFFFFFFFFFFFFFF8);
        do
          v24 = __ldxr(v23);
        while (__stlxr(v24 - 2, v23));
      }
      if ((*v15 & 7) != 0)
      {
        v25 = (unsigned int *)(*v15 & 0xFFFFFFFFFFFFFFF8);
        do
          v26 = __ldxr(v25);
        while (__stlxr(v26 - 2, v25));
      }
      if ((*v14 & 7) != 0)
      {
        v27 = (unsigned int *)(*v14 & 0xFFFFFFFFFFFFFFF8);
        do
          v28 = __ldxr(v27);
        while (__stlxr(v28 - 2, v27));
      }
      _Unwind_Resume(a1);
    }
  }
}

void pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchema::GetTopology(pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchema *this@<X0>, _QWORD *a2@<X8>)
{
  unsigned int **v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v4 = (unsigned int **)atomic_load(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchemaTokens);
  if (!v4)
    v4 = sub_20C7E0F30(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchemaTokens);
  v5 = v4[1];
  v13 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v13 = v6;
  }
  sub_20C7E0698((uint64_t *)this, &v14);
  sub_20C7E0E2C(a2, &v14);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if ((v13 & 7) != 0)
  {
    v11 = (unsigned int *)((unint64_t)v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
}

void sub_20C7E065C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  unsigned int *v4;
  unsigned int v5;
  va_list va;

  va_start(va, a3);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  if ((a3 & 7) != 0)
  {
    v4 = (unsigned int *)(a3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  _Unwind_Resume(a1);
}

void sub_20C7E0698(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  v3 = *a1;
  if (v3)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v3 + 24))(&v7);
    sub_20C7E0B14((uint64_t)&v7, a2);
    v4 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

void pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchema::GetGeomSubsets(pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchema *this@<X0>, _QWORD *a2@<X8>)
{
  unsigned int **v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v4 = (unsigned int **)atomic_load(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchemaTokens);
  if (!v4)
    v4 = sub_20C7E0F30(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchemaTokens);
  v5 = v4[2];
  v13 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v13 = v6;
  }
  sub_20C7E0698((uint64_t *)this, &v14);
  sub_20C7E0E2C(a2, &v14);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if ((v13 & 7) != 0)
  {
    v11 = (unsigned int *)((unint64_t)v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
}

void pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchema::BuildRetained(uint64_t *a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t *v5;
  unsigned int **v7;
  unint64_t v8;
  unsigned int **v9;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  __int128 v15;
  _OWORD v16[2];
  uint64_t v17[2];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v17[0] = 0;
  v17[1] = 0;
  memset(v16, 0, sizeof(v16));
  v5 = &v18;
  if (*a1)
  {
    v7 = (unsigned int **)atomic_load(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchemaTokens);
    if (!v7)
      v7 = sub_20C7E0F30(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchemaTokens);
    sub_20BF32220(v17, v7 + 1);
    sub_20BDE881C(v16, a1);
    v8 = 1;
  }
  else
  {
    v8 = 0;
  }
  if (*a2)
  {
    v9 = (unsigned int **)atomic_load(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchemaTokens);
    if (!v9)
      v9 = sub_20C7E0F30(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchemaTokens);
    sub_20BF32220(&v17[v8], v9 + 2);
    sub_20BDE881C(&v16[v8++], a2);
  }
  pxrInternal__aapl__pxrReserved__::HdRetainedContainerDataSource::New(v8, v17, (uint64_t *)v16, &v15);
  *a3 = v15;
  for (i = 1; i != -1; --i)
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v16[i]);
  do
  {
    v12 = *--v5;
    v11 = v12;
    if ((v12 & 7) != 0)
    {
      v13 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v14 = __ldxr(v13);
      while (__stlxr(v14 - 2, v13));
    }
  }
  while (v5 != v17);
}

void sub_20C7E09A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  char *v16;
  uint64_t i;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;

  for (i = 16; i != -16; i -= 16)
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(&a11 + i));
  while (1)
  {
    v20 = *((_QWORD *)v16 - 1);
    v16 -= 8;
    v19 = v20;
    if ((v20 & 7) != 0)
    {
      v21 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
      do
        v22 = __ldxr(v21);
      while (__stlxr(v22 - 2, v21));
    }
    if (v16 == &a16)
      _Unwind_Resume(a1);
  }
}

void pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchema::GetFromParent(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *p_shared_owners;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *a1;
  if (!*a1)
  {
    v14 = 0;
    v15 = 0;
    sub_20C7E0E2C(a2, &v14);
    v8 = v15;
    if (!v15)
      return;
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    goto LABEL_16;
  }
  if (!atomic_load(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchemaTokens))
    sub_20C7E0F30(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchemaTokens);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v3 + 24))(&v12, v3);
  sub_20C7E0B14((uint64_t)&v12, &v14);
  sub_20C7E0E2C(a2, &v14);
  v5 = v15;
  if (v15)
  {
    v6 = (unint64_t *)&v15->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = v13;
  if (v13)
  {
    v9 = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
LABEL_16:
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void *sub_20C7E0B14@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  result = *(void **)a1;
  if (result
    && (result = __dynamic_cast(result, (const struct __class_type_info *)&unk_24C54BBE0, (const struct __class_type_info *)&unk_24C54BBF0, 0)) != 0)
  {
    v5 = *(_QWORD *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

unsigned int **pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchema::GetSchemaToken(pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchema *this)
{
  unsigned int **result;

  result = (unsigned int **)atomic_load(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchemaTokens);
  if (!result)
    return sub_20C7E0F30(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchemaTokens);
  return result;
}

void *pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchema::GetDefaultLocator(pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchema *this)
{
  unsigned __int8 v1;
  unsigned int **v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25498D610);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498D610))
  {
    v3 = (unsigned int **)atomic_load(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchemaTokens);
    if (!v3)
      v3 = sub_20C7E0F30(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchemaTokens);
    pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HdDataSourceLocator((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&unk_25498D5D8, (const pxrInternal__aapl__pxrReserved__::TfToken *)v3);
    __cxa_atexit((void (*)(void *))sub_20C7E0C54, &unk_25498D5D8, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498D610);
  }
  return &unk_25498D5D8;
}

void sub_20C7E0C3C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498D610);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchema::GetTopologyLocator(pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchema *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchema *v3;
  unsigned int **v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498D650);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchema *)__cxa_guard_acquire(&qword_25498D650);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchema::GetDefaultLocator(v3);
      v4 = (unsigned int **)atomic_load(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchemaTokens);
      if (!v4)
        v4 = sub_20C7E0F30(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchemaTokens);
      pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::Append((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&unk_25498D5D8, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v4 + 1), dword_25498D618);
      __cxa_atexit((void (*)(void *))sub_20C7E0C54, dword_25498D618, &dword_20BDBC000);
      __cxa_guard_release(&qword_25498D650);
    }
  }
  return dword_25498D618;
}

void sub_20C7E0D00(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498D650);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchema::GetGeomSubsetsLocator(pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchema *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchema *v3;
  unsigned int **v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498D690);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchema *)__cxa_guard_acquire(&qword_25498D690);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchema::GetDefaultLocator(v3);
      v4 = (unsigned int **)atomic_load(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchemaTokens);
      if (!v4)
        v4 = sub_20C7E0F30(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchemaTokens);
      pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::Append((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&unk_25498D5D8, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v4 + 2), dword_25498D658);
      __cxa_atexit((void (*)(void *))sub_20C7E0C54, dword_25498D658, &dword_20BDBC000);
      __cxa_guard_release(&qword_25498D690);
    }
  }
  return dword_25498D658;
}

void sub_20C7E0DC0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498D690);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchema::Builder::SetTopology(_QWORD *a1, uint64_t *a2)
{
  sub_20BDE881C(a1, a2);
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchema::Builder::SetGeomSubsets(uint64_t a1, uint64_t *a2)
{
  sub_20BDE881C((_QWORD *)(a1 + 16), a2);
  return a1;
}

void pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchema::Builder::Build(pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchema::Builder *this@<X0>, _OWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchema::BuildRetained((uint64_t *)this, (uint64_t *)this + 2, a2);
}

_QWORD *sub_20C7E0E2C(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a1 = v3;
    a1[1] = v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *a1 = v3;
    a1[1] = 0;
  }
  return a1;
}

uint64_t sub_20C7E0EB0(uint64_t a1)
{
  unsigned int v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  unsigned int *v6;
  unsigned int v7;

  v2 = *(_DWORD *)(a1 + 52);
  v3 = (_QWORD *)a1;
  if (v2 >= 7)
    v3 = *(_QWORD **)a1;
  v4 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v4)
  {
    v5 = &v3[v4];
    do
    {
      if ((*v3 & 7) != 0)
      {
        v6 = (unsigned int *)(*v3 & 0xFFFFFFFFFFFFFFF8);
        do
          v7 = __ldxr(v6);
        while (__stlxr(v7 - 2, v6));
      }
      ++v3;
    }
    while (v3 != v5);
    v2 = *(_DWORD *)(a1 + 52);
  }
  if (v2 >= 7)
    free(*(void **)a1);
  return a1;
}

unsigned int **sub_20C7E0F30(unint64_t *a1)
{
  unsigned int **result;
  void *v4;

  result = sub_20C7E0F78();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchemaTokens_StaticTokenType::~HdBasisCurvesSchemaTokens_StaticTokenType((pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchemaTokens_StaticTokenType *)result);
    operator delete(v4);
  }
  return (unsigned int **)atomic_load(a1);
}

unsigned int **sub_20C7E0F78()
{
  unsigned int **v0;

  v0 = (unsigned int **)operator new(0x30uLL);
  pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchemaTokens_StaticTokenType::HdBasisCurvesSchemaTokens_StaticTokenType(v0);
  return v0;
}

void sub_20C7E0FA4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopology *pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopology::HdBasisCurvesTopology(pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopology *this)
{
  pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  pxrInternal__aapl__pxrReserved__::HdPerfLog *Instance;
  pxrInternal__aapl__pxrReserved__::HdPerfTokens_StaticTokenType *v11;

  *(_QWORD *)this = off_24C54BC18;
  v2 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdTokens);
  if (!v2)
    v2 = sub_20C7DFC58(&pxrInternal__aapl__pxrReserved__::HdTokens);
  v3 = *((_QWORD *)v2 + 43);
  *((_QWORD *)this + 1) = v3;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      *((_QWORD *)this + 1) &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_QWORD *)this + 2) = 0;
  v6 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdTokens);
  if (!v6)
    v6 = sub_20C7DFC58(&pxrInternal__aapl__pxrReserved__::HdTokens);
  v7 = *((_QWORD *)v6 + 51);
  *((_QWORD *)this + 3) = v7;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      *((_QWORD *)this + 3) &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_QWORD *)this + 24) = 0;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  Instance = (pxrInternal__aapl__pxrReserved__::HdPerfLog *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::HdPerfLog>::_instance);
  if (!Instance)
    Instance = (pxrInternal__aapl__pxrReserved__::HdPerfLog *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::HdPerfLog>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::HdPerfLog>::_instance);
  v11 = (pxrInternal__aapl__pxrReserved__::HdPerfTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdPerfTokens);
  if (!v11)
    v11 = sub_20C7E2084(&pxrInternal__aapl__pxrReserved__::HdPerfTokens);
  pxrInternal__aapl__pxrReserved__::HdPerfLog::IncrementCounter(Instance, (pxrInternal__aapl__pxrReserved__::HdPerfTokens_StaticTokenType *)((char *)v11 + 8));
  return this;
}

void sub_20C7E1114(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  v2 = *(_QWORD *)(v1 + 16);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *(_QWORD *)(v1 + 8);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopology *pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopology::HdBasisCurvesTopology(pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopology *this, const pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopology *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  __int128 v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  pxrInternal__aapl__pxrReserved__::HdPerfLog *Instance;
  pxrInternal__aapl__pxrReserved__::HdPerfTokens_StaticTokenType *v29;

  *(_QWORD *)this = off_24C54BC18;
  v3 = *((_QWORD *)a2 + 1);
  *((_QWORD *)this + 1) = v3;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      *((_QWORD *)this + 1) &= 0xFFFFFFFFFFFFFFF8;
  }
  v6 = *((_QWORD *)a2 + 2);
  *((_QWORD *)this + 2) = v6;
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    if ((v8 & 1) == 0)
      *((_QWORD *)this + 2) &= 0xFFFFFFFFFFFFFFF8;
  }
  v9 = *((_QWORD *)a2 + 3);
  *((_QWORD *)this + 3) = v9;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      *((_QWORD *)this + 3) &= 0xFFFFFFFFFFFFFFF8;
  }
  v12 = *((_OWORD *)a2 + 3);
  *((_OWORD *)this + 2) = *((_OWORD *)a2 + 2);
  *((_OWORD *)this + 3) = v12;
  v13 = *((_QWORD *)a2 + 8);
  *((_QWORD *)this + 8) = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 - 16);
    if (*((_QWORD *)this + 7))
      v14 = (unint64_t *)*((_QWORD *)this + 7);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = *(_OWORD *)((char *)a2 + 72);
  *(_OWORD *)((char *)this + 88) = *(_OWORD *)((char *)a2 + 88);
  *(_OWORD *)((char *)this + 72) = v16;
  v17 = *((_QWORD *)a2 + 13);
  *((_QWORD *)this + 13) = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 - 16);
    if (*((_QWORD *)this + 12))
      v18 = (unint64_t *)*((_QWORD *)this + 12);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = *((_OWORD *)a2 + 8);
  *((_OWORD *)this + 7) = *((_OWORD *)a2 + 7);
  *((_OWORD *)this + 8) = v20;
  v21 = *((_QWORD *)a2 + 18);
  *((_QWORD *)this + 18) = v21;
  if (v21)
  {
    v22 = (unint64_t *)(v21 - 16);
    if (*((_QWORD *)this + 17))
      v22 = (unint64_t *)*((_QWORD *)this + 17);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v24 = *(_OWORD *)((char *)a2 + 152);
  *(_OWORD *)((char *)this + 168) = *(_OWORD *)((char *)a2 + 168);
  *(_OWORD *)((char *)this + 152) = v24;
  v25 = *((_QWORD *)a2 + 23);
  *((_QWORD *)this + 23) = v25;
  if (v25)
  {
    v26 = (unint64_t *)(v25 - 16);
    if (*((_QWORD *)this + 22))
      v26 = (unint64_t *)*((_QWORD *)this + 22);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  Instance = (pxrInternal__aapl__pxrReserved__::HdPerfLog *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::HdPerfLog>::_instance);
  if (!Instance)
    Instance = (pxrInternal__aapl__pxrReserved__::HdPerfLog *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::HdPerfLog>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::HdPerfLog>::_instance);
  v29 = (pxrInternal__aapl__pxrReserved__::HdPerfTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdPerfTokens);
  if (!v29)
    v29 = sub_20C7E2084(&pxrInternal__aapl__pxrReserved__::HdPerfTokens);
  pxrInternal__aapl__pxrReserved__::HdPerfLog::IncrementCounter(Instance, (pxrInternal__aapl__pxrReserved__::HdPerfTokens_StaticTokenType *)((char *)v29 + 8));
  *((_QWORD *)this + 24) = sub_20C7E1448((uint64_t *)this + 4, (uint64_t *)this + 9);
  return this;
}

void sub_20C7E13FC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_20BF5618C(v7);
  sub_20BF5618C(v6);
  sub_20BF5618C(v5);
  sub_20BF5618C(v4);
  sub_20C96C1F0(v3, v1, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_20C7E1448(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  int *v3;
  int v4;
  int *v5;
  uint64_t v6;
  int *v7;
  int v8;
  int v9;
  BOOL v10;
  uint64_t result;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *a2;
  if (*a2)
  {
    v3 = (int *)a2[4];
    if (v2 != 1)
    {
      v5 = v3 + 1;
      v4 = *v3;
      v6 = 4 * v2 - 4;
      v7 = v3 + 1;
      do
      {
        v9 = *v7++;
        v8 = v9;
        v10 = v4 < v9;
        if (v4 <= v9)
          v4 = v8;
        if (v10)
          v3 = v5;
        v5 = v7;
        v6 -= 4;
      }
      while (v6);
    }
    return *v3 + 1;
  }
  else
  {
    v13 = *a1;
    if (*a1)
    {
      result = 0;
      v14 = (int *)a1[4];
      v15 = 4 * v13;
      do
      {
        v16 = *v14++;
        result += v16;
        v15 -= 4;
      }
      while (v15);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopology::HdBasisCurvesTopology(uint64_t a1, uint64_t *a2, char *a3, uint64_t *a4, uint64_t a5, __int128 *a6)
{
  uint64_t v9;
  _QWORD *v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  _QWORD *v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  __int128 v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *v28;
  pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *v29;
  unint64_t v30;
  const char *v31;
  pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *v32;
  unsigned int *v33;
  unsigned int v34;
  pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *v35;
  pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *v36;
  pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *v37;
  unsigned int *v38;
  unsigned int v39;
  pxrInternal__aapl__pxrReserved__::HdPerfLog *Instance;
  pxrInternal__aapl__pxrReserved__::HdPerfTokens_StaticTokenType *v41;
  char *v43;
  const char *v44;
  uint64_t v45;
  const char *v46;
  char v47;

  *(_QWORD *)a1 = off_24C54BC18;
  v9 = *a2;
  *(_QWORD *)(a1 + 8) = *a2;
  v10 = (_QWORD *)(a1 + 8);
  if ((v9 & 7) != 0)
  {
    v11 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 2, v11));
    if ((v12 & 1) == 0)
      *v10 &= 0xFFFFFFFFFFFFFFF8;
  }
  v13 = *(_QWORD *)a3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)a3;
  v14 = (_QWORD *)(a1 + 16);
  if ((v13 & 7) != 0)
  {
    v15 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 2, v15));
    if ((v16 & 1) == 0)
      *v14 &= 0xFFFFFFFFFFFFFFF8;
  }
  v17 = *a4;
  *(_QWORD *)(a1 + 24) = *a4;
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 2, v18));
    if ((v19 & 1) == 0)
      *(_QWORD *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  v20 = *(_OWORD *)(a5 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)a5;
  *(_OWORD *)(a1 + 48) = v20;
  v21 = *(_QWORD *)(a5 + 32);
  *(_QWORD *)(a1 + 64) = v21;
  if (v21)
  {
    v22 = (unint64_t *)(v21 - 16);
    if (*(_QWORD *)(a1 + 56))
      v22 = *(unint64_t **)(a1 + 56);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v24 = *a6;
  *(_OWORD *)(a1 + 88) = a6[1];
  *(_OWORD *)(a1 + 72) = v24;
  v25 = *((_QWORD *)a6 + 4);
  *(_QWORD *)(a1 + 104) = v25;
  if (v25)
  {
    v26 = (unint64_t *)(v25 - 16);
    if (*(_QWORD *)(a1 + 96))
      v26 = *(unint64_t **)(a1 + 96);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  v28 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdTokens);
  if (!v28)
    v28 = sub_20C7DFC58(&pxrInternal__aapl__pxrReserved__::HdTokens);
  if ((*v10 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v28 + 43) & 0xFFFFFFFFFFFFFFF8))
  {
    v29 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdTokens);
    if (!v29)
      v29 = sub_20C7DFC58(&pxrInternal__aapl__pxrReserved__::HdTokens);
    v30 = *v10 & 0xFFFFFFFFFFFFFFF8;
    if (v30 != (*((_QWORD *)v29 + 14) & 0xFFFFFFFFFFFFFFF8))
    {
      v43 = "hd/basisCurvesTopology.cpp";
      v44 = "HdBasisCurvesTopology";
      v45 = 96;
      v46 = "pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopology::HdBasisCurvesTopology(const TfToken &, const TfToke"
            "n &, const TfToken &, const VtIntArray &, const VtIntArray &)";
      v47 = 0;
      if (v30)
      {
        v31 = (const char *)(v30 + 16);
        if (*(char *)(v30 + 39) < 0)
          v31 = *(const char **)v31;
      }
      else
      {
        v31 = "";
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v43, (pxrInternal__aapl__pxrReserved__ *)"Curve type must be 'linear' or 'cubic'.  Got: '%s'", a3, v31);
      v32 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdTokens);
      if (!v32)
        v32 = sub_20C7DFC58(&pxrInternal__aapl__pxrReserved__::HdTokens);
      sub_20BF32220(v10, (_QWORD *)v32 + 43);
      if ((*v14 & 7) != 0)
      {
        v33 = (unsigned int *)(*v14 & 0xFFFFFFFFFFFFFFF8);
        do
          v34 = __ldxr(v33);
        while (__stlxr(v34 - 2, v33));
      }
      *v14 = 0;
    }
  }
  v35 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdTokens);
  if (!v35)
    v35 = sub_20C7DFC58(&pxrInternal__aapl__pxrReserved__::HdTokens);
  if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v35 + 43) & 0xFFFFFFFFFFFFFFF8))
  {
    v36 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdTokens);
    if (!v36)
      v36 = sub_20C7DFC58(&pxrInternal__aapl__pxrReserved__::HdTokens);
    if ((*a2 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v36 + 14) & 0xFFFFFFFFFFFFFFF8))
    {
      v43 = "hd/basisCurvesTopology.cpp";
      v44 = "HdBasisCurvesTopology";
      v45 = 101;
      v46 = "pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopology::HdBasisCurvesTopology(const TfToken &, const TfToke"
            "n &, const TfToken &, const VtIntArray &, const VtIntArray &)";
      v47 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v43, (pxrInternal__aapl__pxrReserved__ *)"Basis 'linear' passed in to 'cubic' curveType.  Converting 'curveType' to 'linear'.", a3);
      v37 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdTokens);
      if (!v37)
        v37 = sub_20C7DFC58(&pxrInternal__aapl__pxrReserved__::HdTokens);
      sub_20BF32220(v10, (_QWORD *)v37 + 43);
      if ((*v14 & 7) != 0)
      {
        v38 = (unsigned int *)(*v14 & 0xFFFFFFFFFFFFFFF8);
        do
          v39 = __ldxr(v38);
        while (__stlxr(v39 - 2, v38));
      }
      *v14 = 0;
    }
  }
  Instance = (pxrInternal__aapl__pxrReserved__::HdPerfLog *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::HdPerfLog>::_instance);
  if (!Instance)
    Instance = (pxrInternal__aapl__pxrReserved__::HdPerfLog *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::HdPerfLog>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::HdPerfLog>::_instance);
  v41 = (pxrInternal__aapl__pxrReserved__::HdPerfTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdPerfTokens);
  if (!v41)
    v41 = sub_20C7E2084(&pxrInternal__aapl__pxrReserved__::HdPerfTokens);
  pxrInternal__aapl__pxrReserved__::HdPerfLog::IncrementCounter(Instance, (pxrInternal__aapl__pxrReserved__::HdPerfTokens_StaticTokenType *)((char *)v41 + 8));
  *(_QWORD *)(a1 + 192) = sub_20C7E1448((uint64_t *)(a1 + 32), (uint64_t *)(a1 + 72));
  return a1;
}

void sub_20C7E18A4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_20BF5618C(v6 + 40);
  sub_20BF5618C(v6);
  sub_20BF5618C(v5);
  sub_20BF5618C(v4);
  sub_20C96C1F0(v3, v1, v2);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopology::~HdBasisCurvesTopology(pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopology *this)
{
  pxrInternal__aapl__pxrReserved__::HdPerfLog *Instance;
  pxrInternal__aapl__pxrReserved__::HdPerfTokens_StaticTokenType *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;

  *(_QWORD *)this = off_24C54BC18;
  Instance = (pxrInternal__aapl__pxrReserved__::HdPerfLog *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::HdPerfLog>::_instance);
  if (!Instance)
    Instance = (pxrInternal__aapl__pxrReserved__::HdPerfLog *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::HdPerfLog>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::HdPerfLog>::_instance);
  v3 = (pxrInternal__aapl__pxrReserved__::HdPerfTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdPerfTokens);
  if (!v3)
    v3 = sub_20C7E2084(&pxrInternal__aapl__pxrReserved__::HdPerfTokens);
  pxrInternal__aapl__pxrReserved__::HdPerfLog::DecrementCounter(Instance, (pxrInternal__aapl__pxrReserved__::HdPerfTokens_StaticTokenType *)((char *)v3 + 8));
  sub_20BF5618C((uint64_t)this + 152);
  sub_20BF5618C((uint64_t)this + 112);
  sub_20BF5618C((uint64_t)this + 72);
  sub_20BF5618C((uint64_t)this + 32);
  v4 = *((_QWORD *)this + 3);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  v7 = *((_QWORD *)this + 2);
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  v10 = *((_QWORD *)this + 1);
  if ((v10 & 7) != 0)
  {
    v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
}

{
  void *v1;

  pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopology::~HdBasisCurvesTopology(this);
  operator delete(v1);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopology::operator==(_QWORD *a1, _QWORD *a2)
{
  if ((a1[1] & 0xFFFFFFFFFFFFFFF8) == (a2[1] & 0xFFFFFFFFFFFFFFF8)
    && (a1[2] & 0xFFFFFFFFFFFFFFF8) == (a2[2] & 0xFFFFFFFFFFFFFFF8)
    && (a1[3] & 0xFFFFFFFFFFFFFFF8) == (a2[3] & 0xFFFFFFFFFFFFFFF8)
    && pxrInternal__aapl__pxrReserved__::UsdSkelTopology::operator==((uint64_t)(a1 + 4), (uint64_t)(a2 + 4))
    && pxrInternal__aapl__pxrReserved__::UsdSkelTopology::operator==((uint64_t)(a1 + 9), (uint64_t)(a2 + 9))
    && pxrInternal__aapl__pxrReserved__::UsdSkelTopology::operator==((uint64_t)(a1 + 14), (uint64_t)(a2 + 14)))
  {
    return pxrInternal__aapl__pxrReserved__::UsdSkelTopology::operator==((uint64_t)(a1 + 19), (uint64_t)(a2 + 19));
  }
  else
  {
    return 0;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopology::operator!=(_QWORD *a1, _QWORD *a2)
{
  return pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopology::operator==(a1, a2) ^ 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopology::ComputeHash(pxrInternal__aapl__pxrReserved__ **this)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v2 = pxrInternal__aapl__pxrReserved__::ArchHash64((pxrInternal__aapl__pxrReserved__ *)(this + 2), (const char *)8, 0);
  v3 = pxrInternal__aapl__pxrReserved__::ArchHash64((pxrInternal__aapl__pxrReserved__ *)(this + 1), (const char *)8, v2);
  v4 = pxrInternal__aapl__pxrReserved__::ArchHash64((pxrInternal__aapl__pxrReserved__ *)(this + 3), (const char *)8, v3);
  v5 = pxrInternal__aapl__pxrReserved__::ArchHash64(this[8], (const char *)(4 * (_QWORD)this[4]), v4);
  return pxrInternal__aapl__pxrReserved__::ArchHash64(this[13], (const char *)(4 * (_QWORD)this[9]), v5);
}

void sub_20C7E1E1C(_Unwind_Exception *a1)
{
  char v1;
  unsigned int *v2;
  char v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  if ((v3 & 7) != 0)
  {
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  if ((v1 & 7) != 0)
  {
    do
      v6 = __ldxr(v2);
    while (__stlxr(v6 - 2, v2));
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopology::CalculateNeededNumberOfControlPoints(pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopology *this)
{
  return *((_QWORD *)this + 24);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopology::CalculateNeededNumberOfVaryingControlPoints(pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopology *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *v5;
  unsigned int *v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *v12;
  unsigned int *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *v19;
  unsigned int *v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  uint64_t result;
  int *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;

  v2 = *((_QWORD *)this + 1);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) == 0)
      v2 &= 0xFFFFFFFFFFFFFFF8;
  }
  v5 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdTokens);
  if (!v5)
    v5 = sub_20C7DFC58(&pxrInternal__aapl__pxrReserved__::HdTokens);
  v6 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
  v7 = *((_QWORD *)v5 + 43) & 0xFFFFFFFFFFFFFFF8;
  if ((v2 & 7) != 0)
  {
    do
      v8 = __ldxr(v6);
    while (__stlxr(v8 - 2, v6));
  }
  if (v6 == (unsigned int *)v7)
    return *((_QWORD *)this + 24);
  v9 = *((_QWORD *)this + 3);
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      v9 &= 0xFFFFFFFFFFFFFFF8;
  }
  v12 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdTokens);
  if (!v12)
    v12 = sub_20C7DFC58(&pxrInternal__aapl__pxrReserved__::HdTokens);
  v13 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
  v14 = *((_QWORD *)v12 + 55);
  if ((v9 & 7) != 0)
  {
    do
      v15 = __ldxr(v13);
    while (__stlxr(v15 - 2, v13));
  }
  v16 = *((_QWORD *)this + 2);
  if ((v16 & 7) != 0)
  {
    v17 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 2, v17));
    if ((v18 & 1) == 0)
      v16 &= 0xFFFFFFFFFFFFFFF8;
  }
  v19 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdTokens);
  if (!v19)
    v19 = sub_20C7DFC58(&pxrInternal__aapl__pxrReserved__::HdTokens);
  v20 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
  v21 = *((_QWORD *)v19 + 5) & 0xFFFFFFFFFFFFFFF8;
  if ((v16 & 7) != 0)
  {
    do
      v22 = __ldxr(v20);
    while (__stlxr(v22 - 2, v20));
  }
  if (v20 == (unsigned int *)v21)
    v23 = 3;
  else
    v23 = 1;
  v24 = *((_QWORD *)this + 4);
  if (!v24)
    return 0;
  result = 0;
  v26 = (int *)*((_QWORD *)this + 8);
  v27 = 4 * v24;
  do
  {
    v28 = *v26;
    if (*v26 >= 1)
    {
      if (v13 == (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8))
      {
        LODWORD(v29) = v28 / v23;
        if ((int)v29 <= 1)
          v29 = 1;
        else
          v29 = v29;
      }
      else
      {
        if (v28 <= 4)
          v28 = 4;
        v29 = (v28 - 4) / v23 + 2;
      }
      result += v29;
    }
    ++v26;
    v27 -= 4;
  }
  while (v27);
  return result;
}

void sub_20C7E205C(_Unwind_Exception *a1)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;

  if ((v1 & 7) != 0)
  {
    v2 = (unsigned int *)(v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::HdPerfTokens_StaticTokenType *sub_20C7E2084(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::HdPerfTokens_StaticTokenType *result;
  void *v4;

  result = sub_20C7E20CC();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::HdPerfTokens_StaticTokenType::~HdPerfTokens_StaticTokenType(result);
    operator delete(v4);
  }
  return (pxrInternal__aapl__pxrReserved__::HdPerfTokens_StaticTokenType *)atomic_load(a1);
}

pxrInternal__aapl__pxrReserved__::HdPerfTokens_StaticTokenType *sub_20C7E20CC()
{
  pxrInternal__aapl__pxrReserved__::HdPerfTokens_StaticTokenType *v0;

  v0 = (pxrInternal__aapl__pxrReserved__::HdPerfTokens_StaticTokenType *)operator new(0x150uLL);
  pxrInternal__aapl__pxrReserved__::HdPerfTokens_StaticTokenType::HdPerfTokens_StaticTokenType(v0);
  return v0;
}

void sub_20C7E20F8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens_StaticTokenType::~HdBasisCurvesTopologySchemaTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  void **v19;

  v19 = (void **)((char *)this + 48);
  sub_20BEEB2B8(&v19);
  v2 = *((_QWORD *)this + 5);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *((_QWORD *)this + 4);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v8 = *((_QWORD *)this + 3);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  v11 = *((_QWORD *)this + 2);
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  v14 = *((_QWORD *)this + 1);
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  if ((*(_QWORD *)this & 7) != 0)
  {
    v17 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v18 = __ldxr(v17);
    while (__stlxr(v18 - 2, v17));
  }
}

pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens_StaticTokenType::HdBasisCurvesTopologySchemaTokens_StaticTokenType(unsigned int **this)
{
  unsigned int **v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int **v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int *v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v2 = (unsigned int **)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "topology", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2, "curveVertexCounts", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 2, "curveIndices", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 3, "basis", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 4, "type", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 5, "wrap", 0);
  v3 = *this;
  v32 = v3;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      v32 = v4;
  }
  v6 = *v2;
  v33 = v6;
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    if ((v8 & 1) == 0)
      v33 = v7;
  }
  v9 = this[2];
  v34 = v9;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      v34 = v10;
  }
  v12 = this[3];
  v35 = v12;
  if ((v12 & 7) != 0)
  {
    v13 = (unsigned int *)((unint64_t)v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 2, v13));
    if ((v14 & 1) == 0)
      v35 = v13;
  }
  v15 = this[4];
  v36 = v15;
  if ((v15 & 7) != 0)
  {
    v16 = (unsigned int *)((unint64_t)v15 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 2, v16));
    if ((v17 & 1) == 0)
      v36 = v16;
  }
  v18 = this[5];
  v37 = v18;
  if ((v18 & 7) != 0)
  {
    v19 = (unsigned int *)((unint64_t)v18 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 2, v19));
    if ((v20 & 1) == 0)
      v37 = v19;
  }
  this[6] = 0;
  this[7] = 0;
  this[8] = 0;
  v21 = (unsigned int *)operator new(0x30uLL);
  v22 = 0;
  this[6] = v21;
  this[7] = v21;
  this[8] = v21 + 12;
  do
  {
    v23 = (&v32)[v22];
    *(_QWORD *)v21 = v23;
    if ((v23 & 7) != 0)
    {
      v24 = (unsigned int *)((unint64_t)v23 & 0xFFFFFFFFFFFFFFF8);
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 2, v24));
      if ((v25 & 1) == 0)
        *(_QWORD *)v21 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v22;
    v21 += 2;
  }
  while (v22 != 6);
  v26 = (unsigned int **)&v38;
  this[7] = v21;
  do
  {
    v28 = (uint64_t)*--v26;
    v27 = v28;
    if ((v28 & 7) != 0)
    {
      v29 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
      do
        v30 = __ldxr(v29);
      while (__stlxr(v30 - 2, v29));
    }
  }
  while (v26 != &v32);
  return (pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens_StaticTokenType *)this;
}

void sub_20C7E24AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;

  sub_20BEEB2B8(&a10);
  v25 = &a18;
  while (1)
  {
    v27 = *--v25;
    v26 = v27;
    if ((v27 & 7) != 0)
    {
      v28 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
      do
        v29 = __ldxr(v28);
      while (__stlxr(v29 - 2, v28));
    }
    if (v25 == (uint64_t *)&a12)
    {
      if ((*v23 & 7) != 0)
      {
        v30 = (unsigned int *)(*v23 & 0xFFFFFFFFFFFFFFF8);
        do
          v31 = __ldxr(v30);
        while (__stlxr(v31 - 2, v30));
      }
      if ((*v22 & 7) != 0)
      {
        v32 = (unsigned int *)(*v22 & 0xFFFFFFFFFFFFFFF8);
        do
          v33 = __ldxr(v32);
        while (__stlxr(v33 - 2, v32));
      }
      if ((*v21 & 7) != 0)
      {
        v34 = (unsigned int *)(*v21 & 0xFFFFFFFFFFFFFFF8);
        do
          v35 = __ldxr(v34);
        while (__stlxr(v35 - 2, v34));
      }
      if ((*v20 & 7) != 0)
      {
        v36 = (unsigned int *)(*v20 & 0xFFFFFFFFFFFFFFF8);
        do
          v37 = __ldxr(v36);
        while (__stlxr(v37 - 2, v36));
      }
      if ((*v19 & 7) != 0)
      {
        v38 = (unsigned int *)(*v19 & 0xFFFFFFFFFFFFFFF8);
        do
          v39 = __ldxr(v38);
        while (__stlxr(v39 - 2, v38));
      }
      if ((*v18 & 7) != 0)
      {
        v40 = (unsigned int *)(*v18 & 0xFFFFFFFFFFFFFFF8);
        do
          v41 = __ldxr(v40);
        while (__stlxr(v41 - 2, v40));
      }
      _Unwind_Resume(a1);
    }
  }
}

void pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchema::GetCurveVertexCounts(pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchema *this@<X0>, _QWORD *a2@<X8>)
{
  unsigned int **v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;

  v4 = (unsigned int **)atomic_load(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens);
  if (!v4)
    v4 = sub_20C7E30C0(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens);
  v5 = v4[1];
  v10 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v10 = v6;
  }
  sub_20C7E26A4((uint64_t *)this, a2);
  if ((v10 & 7) != 0)
  {
    v8 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
}

void sub_20C7E26A4(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  v3 = *a1;
  if (v3)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v3 + 24))(&v7);
    sub_20C7E3148((uint64_t)&v7, a2);
    v4 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

void pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchema::GetCurveIndices(pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchema *this@<X0>, _QWORD *a2@<X8>)
{
  unsigned int **v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;

  v4 = (unsigned int **)atomic_load(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens);
  if (!v4)
    v4 = sub_20C7E30C0(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens);
  v5 = v4[2];
  v10 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v10 = v6;
  }
  sub_20C7E26A4((uint64_t *)this, a2);
  if ((v10 & 7) != 0)
  {
    v8 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
}

void pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchema::GetBasis(pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchema *this@<X0>, _QWORD *a2@<X8>)
{
  unsigned int **v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;

  v4 = (unsigned int **)atomic_load(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens);
  if (!v4)
    v4 = sub_20C7E30C0(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens);
  v5 = v4[3];
  v10 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v10 = v6;
  }
  sub_20C7E28BC((uint64_t *)this, a2);
  if ((v10 & 7) != 0)
  {
    v8 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
}

void sub_20C7E28BC(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  v3 = *a1;
  if (v3)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v3 + 24))(&v7);
    sub_20C7E31B4((uint64_t)&v7, a2);
    v4 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

void pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchema::GetType(pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchema *this@<X0>, _QWORD *a2@<X8>)
{
  unsigned int **v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;

  v4 = (unsigned int **)atomic_load(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens);
  if (!v4)
    v4 = sub_20C7E30C0(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens);
  v5 = v4[4];
  v10 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v10 = v6;
  }
  sub_20C7E28BC((uint64_t *)this, a2);
  if ((v10 & 7) != 0)
  {
    v8 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
}

void pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchema::GetWrap(pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchema *this@<X0>, _QWORD *a2@<X8>)
{
  unsigned int **v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;

  v4 = (unsigned int **)atomic_load(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens);
  if (!v4)
    v4 = sub_20C7E30C0(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens);
  v5 = v4[5];
  v10 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v10 = v6;
  }
  sub_20C7E28BC((uint64_t *)this, a2);
  if ((v10 & 7) != 0)
  {
    v8 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
}

void pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchema::BuildRetained(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, _OWORD *a6@<X8>)
{
  uint64_t *v11;
  unsigned int **v13;
  unint64_t v14;
  unsigned int **v15;
  unsigned int **v16;
  unsigned int **v17;
  unsigned int **v18;
  uint64_t i;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  __int128 v24;
  _OWORD v25[5];
  _OWORD v26[2];
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v27 = 0;
  memset(v26, 0, sizeof(v26));
  memset(v25, 0, sizeof(v25));
  v11 = &v28;
  if (*a1)
  {
    v13 = (unsigned int **)atomic_load(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens);
    if (!v13)
      v13 = sub_20C7E30C0(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens);
    sub_20BF32220(v26, v13 + 1);
    sub_20BDE881C(v25, a1);
    v14 = 1;
  }
  else
  {
    v14 = 0;
  }
  if (*a2)
  {
    v15 = (unsigned int **)atomic_load(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens);
    if (!v15)
      v15 = sub_20C7E30C0(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens);
    sub_20BF32220((_QWORD *)((unint64_t)v26 | (8 * v14)), v15 + 2);
    sub_20BDE881C(&v25[v14++], a2);
  }
  if (*a3)
  {
    v16 = (unsigned int **)atomic_load(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens);
    if (!v16)
      v16 = sub_20C7E30C0(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens);
    sub_20BF32220((_QWORD *)v26 + v14, v16 + 3);
    sub_20BDE881C(&v25[v14++], a3);
  }
  if (*a4)
  {
    v17 = (unsigned int **)atomic_load(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens);
    if (!v17)
      v17 = sub_20C7E30C0(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens);
    sub_20BF32220((_QWORD *)v26 + v14, v17 + 4);
    sub_20BDE881C(&v25[v14++], a4);
  }
  if (*a5)
  {
    v18 = (unsigned int **)atomic_load(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens);
    if (!v18)
      v18 = sub_20C7E30C0(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens);
    sub_20BF32220((_QWORD *)v26 + v14, v18 + 5);
    sub_20BDE881C(&v25[v14++], a5);
  }
  pxrInternal__aapl__pxrReserved__::HdRetainedContainerDataSource::New(v14, (uint64_t *)v26, (uint64_t *)v25, &v24);
  *a6 = v24;
  for (i = 4; i != -1; --i)
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v25[i]);
  do
  {
    v21 = *--v11;
    v20 = v21;
    if ((v21 & 7) != 0)
    {
      v22 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
      do
        v23 = __ldxr(v22);
      while (__stlxr(v23 - 2, v22));
    }
  }
  while (v11 != (uint64_t *)v26);
}

void sub_20C7E2D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  char *v21;
  uint64_t i;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;

  for (i = 64; i != -16; i -= 16)
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(&a11 + i));
  while (1)
  {
    v25 = *((_QWORD *)v21 - 1);
    v21 -= 8;
    v24 = v25;
    if ((v25 & 7) != 0)
    {
      v26 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
      do
        v27 = __ldxr(v26);
      while (__stlxr(v27 - 2, v26));
    }
    if (v21 == &a21)
      _Unwind_Resume(a1);
  }
}

void pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchema::GetFromParent(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v3 = *a1;
  if (*a1)
  {
    if (!atomic_load(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens))
      sub_20C7E30C0(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens);
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v3 + 24))(&v14, v3);
    sub_20C7E0B14((uint64_t)&v14, &v16);
  }
  else
  {
    v16 = 0;
    v17 = 0;
  }
  sub_20C7E0E2C(a2, &v16);
  v5 = v17;
  if (v3)
  {
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v8 = v15;
    if (v15)
    {
      v9 = (unint64_t *)&v15->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        v11 = v8;
LABEL_22:
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  else if (v17)
  {
    v12 = (unint64_t *)&v17->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      v11 = v5;
      goto LABEL_22;
    }
  }
}

void sub_20C7E2ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a11);
  if (v11)
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

unsigned int **pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchema::GetSchemaToken(pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchema *this)
{
  unsigned int **result;

  result = (unsigned int **)atomic_load(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens);
  if (!result)
    return sub_20C7E30C0(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens);
  return result;
}

void *pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchema::GetDefaultLocator(pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchema *this)
{
  unsigned __int8 v1;
  unsigned int **v3;
  unsigned int **v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498D6D0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498D6D0))
  {
    v3 = (unsigned int **)atomic_load(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchemaTokens);
    if (!v3)
      v3 = sub_20C7E0F30(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchemaTokens);
    v4 = (unsigned int **)atomic_load(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens);
    if (!v4)
      v4 = sub_20C7E30C0(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens);
    pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HdDataSourceLocator((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&unk_25498D698, (const pxrInternal__aapl__pxrReserved__::TfToken *)v3, (const pxrInternal__aapl__pxrReserved__::TfToken *)v4);
    __cxa_atexit((void (*)(void *))sub_20C7E0C54, &unk_25498D698, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498D6D0);
  }
  return &unk_25498D698;
}

void sub_20C7E2FD0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498D6D0);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchema::Builder::SetCurveVertexCounts(_QWORD *a1, uint64_t *a2)
{
  sub_20BDE881C(a1, a2);
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchema::Builder::SetCurveIndices(uint64_t a1, uint64_t *a2)
{
  sub_20BDE881C((_QWORD *)(a1 + 16), a2);
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchema::Builder::SetBasis(uint64_t a1, uint64_t *a2)
{
  sub_20BDE881C((_QWORD *)(a1 + 32), a2);
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchema::Builder::SetType(uint64_t a1, uint64_t *a2)
{
  sub_20BDE881C((_QWORD *)(a1 + 48), a2);
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchema::Builder::SetWrap(uint64_t a1, uint64_t *a2)
{
  sub_20BDE881C((_QWORD *)(a1 + 64), a2);
  return a1;
}

void pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchema::Builder::Build(pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchema::Builder *this@<X0>, _OWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchema::BuildRetained((uint64_t *)this, (uint64_t *)this + 2, (uint64_t *)this + 4, (uint64_t *)this + 6, (uint64_t *)this + 8, a2);
}

unsigned int **sub_20C7E30C0(unint64_t *a1)
{
  unsigned int **result;
  void *v4;

  result = sub_20C7E3108();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens_StaticTokenType::~HdBasisCurvesTopologySchemaTokens_StaticTokenType((pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens_StaticTokenType *)result);
    operator delete(v4);
  }
  return (unsigned int **)atomic_load(a1);
}

unsigned int **sub_20C7E3108()
{
  unsigned int **v0;

  v0 = (unsigned int **)operator new(0x48uLL);
  pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens_StaticTokenType::HdBasisCurvesTopologySchemaTokens_StaticTokenType(v0);
  return v0;
}

void sub_20C7E3134(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_20C7E3148@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  result = *(void **)a1;
  if (result
    && (result = __dynamic_cast(result, (const struct __class_type_info *)&unk_24C54BBE0, (const struct __class_type_info *)&unk_24C54BC70, 0)) != 0)
  {
    v5 = *(_QWORD *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void *sub_20C7E31B4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  result = *(void **)a1;
  if (result
    && (result = __dynamic_cast(result, (const struct __class_type_info *)&unk_24C54BBE0, (const struct __class_type_info *)&unk_24C54BC88, 0)) != 0)
  {
    v5 = *(_QWORD *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::HdBprim *pxrInternal__aapl__pxrReserved__::HdBprim::HdBprim(pxrInternal__aapl__pxrReserved__::HdBprim *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  _DWORD *v4;

  *(_QWORD *)this = off_24C54BCB0;
  v4 = (_DWORD *)((char *)this + 12);
  sub_20BFD6E54((_DWORD *)this + 2, a2);
  sub_20BFD6EA4(v4, (_DWORD *)a2 + 1);
  return this;
}

void pxrInternal__aapl__pxrReserved__::HdBprim::~HdBprim(pxrInternal__aapl__pxrReserved__::HdBprim *this)
{
  *(_QWORD *)this = off_24C54BCB0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 3);
  sub_20BFD265C((_DWORD *)this + 2);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdBufferArray::HdBufferArray(uint64_t result, uint64_t *a2, uint64_t *a3, int a4)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unint64_t v10;

  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = off_24C54BCF8;
  *(_BYTE *)(result + 24) = 0;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_QWORD *)(result + 64) = 850045863;
  *(_OWORD *)(result + 72) = 0u;
  *(_OWORD *)(result + 88) = 0u;
  *(_OWORD *)(result + 104) = 0u;
  *(_QWORD *)(result + 120) = 0;
  v4 = *a2;
  *(_QWORD *)(result + 128) = *a2;
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 2, v5));
    if ((v6 & 1) == 0)
      *(_QWORD *)(result + 128) &= 0xFFFFFFFFFFFFFFF8;
  }
  v7 = *a3;
  *(_QWORD *)(result + 136) = *a3;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      *(_QWORD *)(result + 136) &= 0xFFFFFFFFFFFFFFF8;
  }
  do
    v10 = __ldaxr(&qword_25498D6D8);
  while (__stlxr(v10 + 1, &qword_25498D6D8));
  *(_QWORD *)(result + 144) = v10;
  *(_QWORD *)(result + 152) = 1;
  *(_DWORD *)(result + 160) = a4;
  return result;
}

void pxrInternal__aapl__pxrReserved__::HdBufferArray::~HdBufferArray(std::mutex *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t sig;
  unsigned int *v6;
  unsigned int v7;
  std::__shared_weak_count *v8;
  void **v9;

  this->__m_.__sig = (uint64_t)off_24C54BCF8;
  v2 = *(_QWORD *)this[2].__m_.__opaque;
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  sig = this[2].__m_.__sig;
  if ((sig & 7) != 0)
  {
    v6 = (unsigned int *)(sig & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  std::mutex::~mutex(this + 1);
  v9 = (void **)&this->__m_.__opaque[24];
  sub_20BE12C54(&v9);
  v8 = *(std::__shared_weak_count **)&this->__m_.__opaque[8];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdBufferArray::IncrementVersion(uint64_t this)
{
  unint64_t v1;

  do
    v1 = __ldaxr(&qword_25498D6D8);
  while (__stlxr(v1 + 1, &qword_25498D6D8));
  *(_QWORD *)(this + 144) = v1;
  return this;
}

BOOL pxrInternal__aapl__pxrReserved__::HdBufferArray::TryAssignRange(uint64_t a1, _QWORD *a2)
{
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;

  v4 = (unint64_t *)(a1 + 56);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = *(_QWORD *)(a1 + 152);
  if (v5 >= v6)
  {
    atomic_store(v6, v4);
  }
  else
  {
    std::mutex::lock((std::mutex *)(a1 + 64));
    v7 = *(_QWORD *)(a1 + 32);
    if (v5 >= (*(_QWORD *)(a1 + 40) - v7) >> 4)
    {
      sub_20C7E3538((uint64_t *)(a1 + 32), v5 + 1);
      v7 = *(_QWORD *)(a1 + 32);
    }
    v8 = (_QWORD *)(v7 + 16 * v5);
    v10 = *a2;
    v9 = a2[1];
    if (v9)
    {
      v11 = (unint64_t *)(v9 + 16);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    v13 = (std::__shared_weak_count *)v8[1];
    *v8 = v10;
    v8[1] = v9;
    if (v13)
      std::__shared_weak_count::__release_weak(v13);
    std::mutex::unlock((std::mutex *)(a1 + 64));
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 128))(*a2, a1);
    *(_BYTE *)(a1 + 24) = 1;
  }
  return v5 < v6;
}

void sub_20C7E3524(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20C7E3538(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;

  v3 = a1[1];
  v4 = (v3 - *a1) >> 4;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      v5 = *a1 + 16 * a2;
      while (v3 != v5)
      {
        v6 = *(std::__shared_weak_count **)(v3 - 8);
        if (v6)
          std::__shared_weak_count::__release_weak(v6);
        v3 -= 16;
      }
      a1[1] = v5;
    }
  }
  else
  {
    sub_20C7E3920(a1, a2 - v4);
  }
}

void pxrInternal__aapl__pxrReserved__::HdBufferArray::RemoveUnusedRanges(pxrInternal__aapl__pxrReserved__::HdBufferArray *this)
{
  unint64_t *v1;
  unint64_t v2;
  unint64_t v4;
  const pxrInternal__aapl__pxrReserved__::TfToken *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count **v9;
  std::__shared_weak_count *v10;
  __int128 v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  pxrInternal__aapl__pxrReserved__::HdPerfLog *Instance;

  v1 = (unint64_t *)((char *)this + 56);
  v2 = atomic_load((unint64_t *)this + 7);
  if (v2)
  {
    v4 = 0;
    v5 = (pxrInternal__aapl__pxrReserved__::HdBufferArray *)((char *)this + 136);
    do
    {
      v6 = *((_QWORD *)this + 4);
      v7 = v6 + 16 * v4;
      v10 = *(std::__shared_weak_count **)(v7 + 8);
      v9 = (std::__shared_weak_count **)(v7 + 8);
      v8 = v10;
      if (!v10 || v8->__shared_owners_ == -1)
      {
        --v2;
        v11 = *(_OWORD *)(v6 + 16 * v2);
        v12 = *(_QWORD *)(v6 + 16 * v2 + 8);
        if (v12)
        {
          v13 = (unint64_t *)(v12 + 16);
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
          v8 = *v9;
        }
        *(_OWORD *)(v6 + 16 * v4) = v11;
        if (v8)
          std::__shared_weak_count::__release_weak(v8);
        v15 = (_QWORD *)(*((_QWORD *)this + 4) + 16 * v2);
        v16 = (std::__shared_weak_count *)v15[1];
        *v15 = 0;
        v15[1] = 0;
        if (v16)
          std::__shared_weak_count::__release_weak(v16);
        Instance = (pxrInternal__aapl__pxrReserved__::HdPerfLog *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::HdPerfLog>::_instance);
        if (!Instance)
          Instance = (pxrInternal__aapl__pxrReserved__::HdPerfLog *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::HdPerfLog>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::HdPerfLog>::_instance);
        pxrInternal__aapl__pxrReserved__::HdPerfLog::IncrementCounter(Instance, v5);
      }
      else
      {
        ++v4;
      }
    }
    while (v4 < v2);
  }
  atomic_store(v2, v1);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdBufferArray::GetRange@<X0>(uint64_t this@<X0>, unint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4;
  unint64_t v6;
  __int128 v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD v10[4];
  char v11;

  v4 = this;
  v6 = atomic_load((unint64_t *)(this + 56));
  if (v6 <= a2)
  {
    v10[0] = "hd/bufferArray.cpp";
    v10[1] = "GetRange";
    v10[2] = 133;
    v10[3] = "HdBufferArrayRangePtr pxrInternal__aapl__pxrReserved__::HdBufferArray::GetRange(size_t) const";
    v11 = 0;
    this = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v10, "idx < _rangeCount", 0);
  }
  v7 = *(_OWORD *)(*(_QWORD *)(v4 + 32) + 16 * a2);
  *a3 = v7;
  if (*((_QWORD *)&v7 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return this;
}

void pxrInternal__aapl__pxrReserved__::HdBufferArray::_SetRangeList(uint64_t a1, uint64_t **a2)
{
  std::mutex *v4;
  _QWORD *v5;
  __int128 i;

  v4 = (std::mutex *)(a1 + 64);
  std::mutex::lock((std::mutex *)(a1 + 64));
  sub_20BE12C94((uint64_t *)(a1 + 32));
  sub_20C7E3B58(a1 + 32, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  atomic_store((uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 4, (unint64_t *)(a1 + 56));
  for (i = *(_OWORD *)a2; (_QWORD)i != *((_QWORD *)&i + 1); sub_20C7E3898(&i))
  {
    v5 = (_QWORD *)sub_20C7E3808((uint64_t *)&i);
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 128))(*v5, a1);
  }
  std::mutex::unlock(v4);
}

void sub_20C7E37F0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C7E3808(uint64_t *a1)
{
  uint64_t result;
  char *v3;
  char *v4;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v3 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/iterator.h", 47);
    v5[0] = sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/iterator.h", (uint64_t)v3, 0x2Fu);
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<std::shared_ptr<pxrInternal__aapl__"
            "pxrReserved__::HdBufferArrayRange>>>::operator*() [T = const std::vector<std::shared_ptr<pxrInternal__aapl__"
            "pxrReserved__::HdBufferArrayRange>>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", v4);
  }
  return result;
}

_QWORD *sub_20C7E3898(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<std::shared_ptr<pxrIn"
            "ternal__aapl__pxrReserved__::HdBufferArrayRange>>>::operator++() [T = const std::vector<std::shared_ptr<pxrI"
            "nternal__aapl__pxrReserved__::HdBufferArrayRange>>, Reverse = false]";
    v4 = 0;
    v5 = 1;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 16;
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdBufferArray::GetMaxNumElements(pxrInternal__aapl__pxrReserved__::HdBufferArray *this)
{
  return *((_QWORD *)this + 19);
}

void sub_20C7E3920(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  void *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - *a1;
    v9 = a2 + (v8 >> 4);
    if (v9 >> 60)
      sub_20BDDF694();
    v10 = v8 >> 4;
    v11 = v5 - *a1;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    v18 = v4;
    if (v12)
      v13 = (char *)sub_20BDEA2F0(v4, v12);
    else
      v13 = 0;
    v14 = v13;
    v15 = &v13[16 * v10];
    v17 = &v13[16 * v12];
    bzero(v15, 16 * a2);
    v16 = &v15[16 * a2];
    sub_20C7E3A20(a1, &v14);
    sub_20BE13378(&v14);
  }
}

void sub_20C7E3A0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BE13378((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C7E3A20(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C7E3A94((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C7E3A94(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _OWORD *v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v8 = (_OWORD *)(a7 - 16);
    do
    {
      v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((_QWORD *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    v10 = v15;
  }
  v13 = 1;
  sub_20C7E3B24((uint64_t)v12);
  return v10;
}

uint64_t sub_20C7E3B24(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20BE13338(a1);
  return a1;
}

void sub_20C7E3B58(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  char v20;
  char v21;

  v8 = a1 + 16;
  v9 = *(_QWORD **)a1;
  if (a4 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4)
  {
    sub_20C7E3CA8((uint64_t *)a1);
    if (a4 >> 60)
      sub_20BDDF694();
    v10 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
    v11 = v10 >> 3;
    if (v10 >> 3 <= a4)
      v11 = a4;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    sub_20BE90F0C((_QWORD *)a1, v12);
    v13 = sub_20C7E3CE0(v8, a2, a3, *(_QWORD **)(a1 + 8));
    goto LABEL_11;
  }
  v14 = (uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 4;
  if (v14 < a4)
  {
    v15 = &a2[2 * v14];
    sub_20C7E3DE8((uint64_t)&v20, a2, v15, v9);
    v13 = sub_20C7E3CE0(v8, v15, a3, *(_QWORD **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v13;
    return;
  }
  sub_20C7E3DE8((uint64_t)&v21, a2, a3, v9);
  v17 = v16;
  v18 = *(_QWORD *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      v19 = *(std::__shared_weak_count **)(v18 - 8);
      if (v19)
        std::__shared_weak_count::__release_weak(v19);
      v18 -= 16;
    }
    while (v18 != v17);
  }
  *(_QWORD *)(a1 + 8) = v17;
}

void sub_20C7E3C98(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20C7E3CA0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20C7E3CA8(uint64_t *a1)
{
  if (*a1)
  {
    sub_20BE12C94(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

_QWORD *sub_20C7E3CE0(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD v9[3];
  char v10;
  _QWORD *v11;
  _QWORD *v12;

  v4 = a4;
  v12 = a4;
  v11 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  if (a2 != a3)
  {
    do
    {
      *v4 = *a2;
      v5 = a2[1];
      v4[1] = v5;
      if (v5)
      {
        v6 = (unint64_t *)(v5 + 16);
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      a2 += 2;
      v4 += 2;
    }
    while (a2 != a3);
    v12 = v4;
  }
  v10 = 1;
  sub_20C7E3D74((uint64_t)v9);
  return v4;
}

uint64_t sub_20C7E3D74(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C7E3DA8(a1);
  return a1;
}

void sub_20C7E3DA8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v3;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    v3 = *(std::__shared_weak_count **)(v1 - 8);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
    v1 -= 16;
  }
}

uint64_t *sub_20C7E3DE8(uint64_t a1, uint64_t *a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      v8 = *v5;
      v7 = v5[1];
      if (v7)
      {
        v9 = (unint64_t *)(v7 + 16);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      v11 = (std::__shared_weak_count *)a4[1];
      *a4 = v8;
      a4[1] = v7;
      if (v11)
        std::__shared_weak_count::__release_weak(v11);
      v5 += 2;
      a4 += 2;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

_QWORD *pxrInternal__aapl__pxrReserved__::HdBufferArrayRange::HdBufferArrayRange(_QWORD *this)
{
  *this = off_24C54BD70;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::operator<<(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a1);
  return a1;
}

void pxrInternal__aapl__pxrReserved__::HdBufferArrayRangeContainer::Set(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::HdPerfLog *Instance;
  pxrInternal__aapl__pxrReserved__::HdPerfTokens_StaticTokenType *v9;
  _QWORD v10[4];
  char v11;

  if ((a2 & 0x80000000) != 0)
  {
    v10[0] = "hd/bufferArrayRange.cpp";
    v10[1] = "Set";
    v10[2] = 49;
    v10[3] = "void pxrInternal__aapl__pxrReserved__::HdBufferArrayRangeContainer::Set(int, const HdBufferArrayRangeSharedPtr &)";
    v11 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Index negative in HdBufferArrayRangeContainer::Set()");
  }
  else
  {
    v6 = a2;
    v7 = *a1;
    if (a2 >= (unint64_t)((a1[1] - *a1) >> 4))
    {
      Instance = (pxrInternal__aapl__pxrReserved__::HdPerfLog *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::HdPerfLog>::_instance);
      if (!Instance)
        Instance = (pxrInternal__aapl__pxrReserved__::HdPerfLog *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::HdPerfLog>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::HdPerfLog>::_instance);
      v9 = (pxrInternal__aapl__pxrReserved__::HdPerfTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdPerfTokens);
      if (!v9)
        v9 = sub_20C7E2084(&pxrInternal__aapl__pxrReserved__::HdPerfTokens);
      pxrInternal__aapl__pxrReserved__::HdPerfLog::IncrementCounter(Instance, (pxrInternal__aapl__pxrReserved__::HdPerfTokens_StaticTokenType *)((char *)v9 + 32));
      sub_20C7E3FC0((uint64_t)a1, a2 + 1);
      v7 = *a1;
    }
    sub_20BDE881C((_QWORD *)(v7 + 16 * v6), a3);
  }
}

void sub_20C7E3FC0(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = (v3 - *(_QWORD *)a1) >> 4;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      v5 = *(_QWORD *)a1 + 16 * a2;
      while (v3 != v5)
        pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v3 - 16));
      *(_QWORD *)(a1 + 8) = v5;
    }
  }
  else
  {
    sub_20C7E419C((char **)a1, a2 - v4);
  }
}

void *pxrInternal__aapl__pxrReserved__::HdBufferArrayRangeContainer::Get(pxrInternal__aapl__pxrReserved__::HdBufferArrayRangeContainer *this, unsigned int a2)
{
  unsigned __int8 v3;

  if ((a2 & 0x80000000) == 0 && a2 < (unint64_t)((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 4))
    return (void *)(*(_QWORD *)this + 16 * a2);
  v3 = atomic_load((unsigned __int8 *)&qword_25498D6F0);
  if ((v3 & 1) != 0 || !__cxa_guard_acquire(&qword_25498D6F0))
    return &unk_25498D6E0;
  __cxa_atexit((void (*)(void *))pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource, &unk_25498D6E0, &dword_20BDBC000);
  __cxa_guard_release(&qword_25498D6F0);
  return &unk_25498D6E0;
}

void pxrInternal__aapl__pxrReserved__::HdBufferArrayRangeContainer::Resize(pxrInternal__aapl__pxrReserved__::HdBufferArrayRangeContainer *this, unsigned int a2)
{
  pxrInternal__aapl__pxrReserved__::HdPerfLog *Instance;
  pxrInternal__aapl__pxrReserved__::HdPerfTokens_StaticTokenType *v5;
  _QWORD v6[4];
  char v7;

  if ((a2 & 0x80000000) != 0)
  {
    v6[0] = "hd/bufferArrayRange.cpp";
    v6[1] = "Resize";
    v6[2] = 79;
    v6[3] = "void pxrInternal__aapl__pxrReserved__::HdBufferArrayRangeContainer::Resize(int)";
    v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v6, 1, (pxrInternal__aapl__pxrReserved__ *)"Size negative in HdBufferArrayRangeContainer::Resize()");
  }
  else
  {
    Instance = (pxrInternal__aapl__pxrReserved__::HdPerfLog *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::HdPerfLog>::_instance);
    if (!Instance)
      Instance = (pxrInternal__aapl__pxrReserved__::HdPerfLog *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::HdPerfLog>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::HdPerfLog>::_instance);
    v5 = (pxrInternal__aapl__pxrReserved__::HdPerfTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdPerfTokens);
    if (!v5)
      v5 = sub_20C7E2084(&pxrInternal__aapl__pxrReserved__::HdPerfTokens);
    pxrInternal__aapl__pxrReserved__::HdPerfLog::IncrementCounter(Instance, (pxrInternal__aapl__pxrReserved__::HdPerfTokens_StaticTokenType *)((char *)v5 + 32));
    sub_20C7E3FC0((uint64_t)this, a2);
  }
}

void sub_20C7E419C(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  int64x2_t v20;
  char *v21;
  uint64_t v22;
  int64x2_t v23;
  char *v24;
  uint64_t v25;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - *a1;
    v9 = a2 + (v8 >> 4);
    if (v9 >> 60)
      sub_20BDDF694();
    v10 = v8 >> 4;
    v11 = v5 - *a1;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    v25 = v4;
    if (v12)
      v13 = (char *)sub_20BDEA2F0(v4, v12);
    else
      v13 = 0;
    v14 = &v13[16 * v10];
    v15 = &v13[16 * v12];
    v24 = v15;
    bzero(v14, 16 * a2);
    v16 = &v14[16 * a2];
    v23.i64[1] = (uint64_t)v16;
    v18 = *a1;
    v17 = a1[1];
    if (v17 == *a1)
    {
      v20 = vdupq_n_s64((unint64_t)v17);
    }
    else
    {
      do
      {
        v19 = *((_OWORD *)v17 - 1);
        v17 -= 16;
        *((_OWORD *)v14 - 1) = v19;
        v14 -= 16;
        *(_QWORD *)v17 = 0;
        *((_QWORD *)v17 + 1) = 0;
      }
      while (v17 != v18);
      v20 = *(int64x2_t *)a1;
      v16 = (char *)v23.i64[1];
      v15 = v24;
    }
    *a1 = v14;
    a1[1] = v16;
    v23 = v20;
    v21 = a1[2];
    a1[2] = v15;
    v24 = v21;
    v22 = v20.i64[0];
    sub_20BDEA324((uint64_t)&v22);
  }
}

unint64_t pxrInternal__aapl__pxrReserved__::HdBufferSource::ComputeHash(pxrInternal__aapl__pxrReserved__::HdBufferSource *this)
{
  uint64_t v2;
  char v3;

  v2 = 0;
  v3 = 0;
  sub_20C7E4638((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v2, (uint64_t)this);
  return bswap64(0x9E3779B97F4A7C55 * v2);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdBufferSource::HasPreChainedBuffer(pxrInternal__aapl__pxrReserved__::HdBufferSource *this)
{
  return 0;
}

void pxrInternal__aapl__pxrReserved__::HdBufferSource::GetPreChainedBuffer(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdBufferSource::HasChainedBuffer(pxrInternal__aapl__pxrReserved__::HdBufferSource *this)
{
  return 0;
}

void pxrInternal__aapl__pxrReserved__::HdBufferSource::GetChainedBuffers(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdBufferSource::IsValid(pxrInternal__aapl__pxrReserved__::HdBufferSource *this)
{
  return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::HdBufferSource *))(*(_QWORD *)this + 104))(this);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdComputedBufferSource::ComputeHash(pxrInternal__aapl__pxrReserved__::HdComputedBufferSource *this)
{
  return 0;
}

void *pxrInternal__aapl__pxrReserved__::HdComputedBufferSource::GetName(pxrInternal__aapl__pxrReserved__::HdComputedBufferSource *this)
{
  uint64_t v1;
  unsigned __int8 v3;

  v1 = *((_QWORD *)this + 2);
  if (v1)
    return (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  v3 = atomic_load((unsigned __int8 *)&qword_25498D700);
  if ((v3 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_25498D700))
    {
      __cxa_atexit((void (*)(void *))sub_20C20ACA4, &unk_25498D6F8, &dword_20BDBC000);
      __cxa_guard_release(&qword_25498D700);
    }
  }
  return &unk_25498D6F8;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdComputedBufferSource::GetData(pxrInternal__aapl__pxrReserved__::HdComputedBufferSource *this)
{
  uint64_t v1;
  _QWORD v3[4];
  char v4;

  v1 = *((_QWORD *)this + 2);
  if (v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
  v3[0] = "hd/bufferSource.cpp";
  v3[1] = "GetData";
  v3[2] = 104;
  v3[3] = "virtual const void *pxrInternal__aapl__pxrReserved__::HdComputedBufferSource::GetData() const";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"HdComputedBufferSource::GetData() called without setting the result.");
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdComputedBufferSource::GetTupleType(pxrInternal__aapl__pxrReserved__::HdComputedBufferSource *this)
{
  uint64_t v1;
  _QWORD v3[4];
  char v4;

  v1 = *((_QWORD *)this + 2);
  if (v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 56))(v1);
  v3[0] = "hd/bufferSource.cpp";
  v3[1] = "GetTupleType";
  v3[2] = 115;
  v3[3] = "virtual HdTupleType pxrInternal__aapl__pxrReserved__::HdComputedBufferSource::GetTupleType() const";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"HdComputedBufferSource::GetTupleType() called without setting the result.");
  return 0xFFFFFFFFLL;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdComputedBufferSource::GetNumElements(pxrInternal__aapl__pxrReserved__::HdComputedBufferSource *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 2);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 64))(result);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdNullBufferSource::ComputeHash(pxrInternal__aapl__pxrReserved__::HdNullBufferSource *this)
{
  return 0;
}

void *pxrInternal__aapl__pxrReserved__::HdNullBufferSource::GetName(pxrInternal__aapl__pxrReserved__::HdNullBufferSource *this)
{
  unsigned __int8 v1;
  _QWORD v3[4];
  char v4;

  v3[0] = "hd/bufferSource.cpp";
  v3[1] = "GetName";
  v3[2] = 139;
  v3[3] = "virtual const TfToken &pxrInternal__aapl__pxrReserved__::HdNullBufferSource::GetName() const";
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"HdNullBufferSource can't be scheduled with a buffer range");
  v1 = atomic_load((unsigned __int8 *)&qword_25498D710);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498D710))
  {
    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &unk_25498D708, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498D710);
  }
  return &unk_25498D708;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdNullBufferSource::GetData(pxrInternal__aapl__pxrReserved__::HdNullBufferSource *this)
{
  _QWORD v2[4];
  char v3;

  v2[0] = "hd/bufferSource.cpp";
  v2[1] = "GetData";
  v2[2] = 147;
  v2[3] = "virtual const void *pxrInternal__aapl__pxrReserved__::HdNullBufferSource::GetData() const";
  v3 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v2, 1, (pxrInternal__aapl__pxrReserved__ *)"HdNullBufferSource can't be scheduled with a buffer range");
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdNullBufferSource::GetTupleType(pxrInternal__aapl__pxrReserved__::HdNullBufferSource *this)
{
  _QWORD v2[4];
  char v3;

  v2[0] = "hd/bufferSource.cpp";
  v2[1] = "GetTupleType";
  v2[2] = 155;
  v2[3] = "virtual HdTupleType pxrInternal__aapl__pxrReserved__::HdNullBufferSource::GetTupleType() const";
  v3 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v2, 1, (pxrInternal__aapl__pxrReserved__ *)"HdNullBufferSource can't be scheduled with a buffer range");
  return 0xFFFFFFFFLL;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdNullBufferSource::GetNumElements(pxrInternal__aapl__pxrReserved__::HdNullBufferSource *this)
{
  return 0;
}

uint64_t sub_20C7E4638(pxrInternal__aapl__pxrReserved__::Tf_HashState *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__ *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD v13[2];

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
  v5 = v4;
  v7 = v6;
  v13[0] = v4;
  v13[1] = v6;
  v8 = (pxrInternal__aapl__pxrReserved__ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
  v9 = pxrInternal__aapl__pxrReserved__::HdDataSizeOfTupleType(v5, v7);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes(a1, v8, (char *)(v10 * v9));
  v11 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  return sub_20C7E46F0((uint64_t)a1, v11, (uint64_t)v13);
}

uint64_t sub_20C7E46F0(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;

  v3 = *a2 & 0xFFFFFFFFFFFFFFF8;
  if (*(_BYTE *)(a1 + 8))
    v3 += (*(_QWORD *)a1 + v3 + (*(_QWORD *)a1 + v3) * (*(_QWORD *)a1 + v3)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v3;
  return sub_20C7E4730(a1, (int *)a3, (_QWORD *)(a3 + 8));
}

uint64_t sub_20C7E4730(uint64_t result, int *a2, _QWORD *a3)
{
  uint64_t v3;

  v3 = *a2;
  if (*(_BYTE *)(result + 8))
    v3 += (unint64_t)(*(_QWORD *)result + v3 + (*(_QWORD *)result + v3) * (*(_QWORD *)result + v3)) >> 1;
  else
    *(_BYTE *)(result + 8) = 1;
  *(_QWORD *)result = v3;
  *(_QWORD *)result = *a3 + ((unint64_t)(v3 + *a3 + (v3 + *a3) * (v3 + *a3)) >> 1);
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::HdBufferSpec::IsSubset(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;

  v2 = *a1;
  v3 = a1[1];
  if (*a1 == v3)
    return 1;
  v4 = a2[1];
  do
  {
    if (*a2 == v4)
    {
      v5 = *a2;
    }
    else
    {
      v5 = *a2;
      while ((*(_QWORD *)v5 & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)v2 & 0xFFFFFFFFFFFFFFF8)
           || *(_DWORD *)(v5 + 8) != *(_DWORD *)(v2 + 8)
           || *(_QWORD *)(v5 + 16) != *(_QWORD *)(v2 + 16))
      {
        v5 += 24;
        if (v5 == v4)
        {
          v5 = a2[1];
          break;
        }
      }
    }
    result = v5 != v4;
    if (v5 == v4)
      break;
    v2 += 24;
  }
  while (v2 != v3);
  return result;
}

char *pxrInternal__aapl__pxrReserved__::HdBufferSpec::ComputeUnion@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, int64x2_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *result;
  char *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;

  a3->i64[0] = 0;
  a3->i64[1] = 0;
  a3[1].i64[0] = 0;
  v5 = *a1;
  v6 = a1[1];
  if (*a1 == v6)
  {
    result = 0;
  }
  else
  {
    result = 0;
    do
    {
      v8 = result;
      if ((char *)a3->i64[0] != result)
      {
        v8 = (char *)a3->i64[0];
        while ((*(_QWORD *)v8 & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)v5 & 0xFFFFFFFFFFFFFFF8)
             || *((_DWORD *)v8 + 2) != *(_DWORD *)(v5 + 8)
             || *((_QWORD *)v8 + 2) != *(_QWORD *)(v5 + 16))
        {
          v8 += 24;
          if (v8 == result)
          {
            v8 = result;
            break;
          }
        }
      }
      if (v8 == result)
      {
        if ((unint64_t)result >= a3[1].i64[0])
        {
          result = sub_20C7E4E08(a3, (uint64_t *)v5);
        }
        else
        {
          v9 = *(_QWORD *)v5;
          *(_QWORD *)result = *(_QWORD *)v5;
          if ((v9 & 7) != 0)
          {
            v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
            do
              v11 = __ldxr(v10);
            while (__stxr(v11 + 2, v10));
            if ((v11 & 1) == 0)
              *(_QWORD *)result &= 0xFFFFFFFFFFFFFFF8;
          }
          *(_OWORD *)(result + 8) = *(_OWORD *)(v5 + 8);
          result += 24;
        }
        a3->i64[1] = (uint64_t)result;
      }
      v5 += 24;
    }
    while (v5 != v6);
  }
  v13 = *a2;
  v12 = a2[1];
  while (v13 != v12)
  {
    v14 = result;
    if ((char *)a3->i64[0] != result)
    {
      v14 = (char *)a3->i64[0];
      while ((*(_QWORD *)v14 & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)v13 & 0xFFFFFFFFFFFFFFF8)
           || *((_DWORD *)v14 + 2) != *(_DWORD *)(v13 + 8)
           || *((_QWORD *)v14 + 2) != *(_QWORD *)(v13 + 16))
      {
        v14 += 24;
        if (v14 == result)
        {
          v14 = result;
          break;
        }
      }
    }
    if (v14 == result)
    {
      if ((unint64_t)result >= a3[1].i64[0])
      {
        result = sub_20C7E4E08(a3, (uint64_t *)v13);
      }
      else
      {
        v15 = *(_QWORD *)v13;
        *(_QWORD *)result = *(_QWORD *)v13;
        if ((v15 & 7) != 0)
        {
          v16 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
          do
            v17 = __ldxr(v16);
          while (__stxr(v17 + 2, v16));
          if ((v17 & 1) == 0)
            *(_QWORD *)result &= 0xFFFFFFFFFFFFFFF8;
        }
        *(_OWORD *)(result + 8) = *(_OWORD *)(v13 + 8);
        result += 24;
      }
      a3->i64[1] = (uint64_t)result;
    }
    v13 += 24;
  }
  return result;
}

void sub_20C7E49FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C7E4DAC((void ***)va);
  _Unwind_Resume(a1);
}

char *pxrInternal__aapl__pxrReserved__::HdBufferSpec::ComputeDifference@<X0>(char *result@<X0>, uint64_t *a2@<X1>, int64x2_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;

  a3->i64[0] = 0;
  a3->i64[1] = 0;
  a3[1].i64[0] = 0;
  v3 = *(_QWORD *)result;
  v4 = *((_QWORD *)result + 1);
  if (*(_QWORD *)result != v4)
  {
    result = 0;
    do
    {
      v8 = *a2;
      v7 = a2[1];
      if (*a2 != v7)
      {
        while ((*(_QWORD *)v8 & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)v3 & 0xFFFFFFFFFFFFFFF8)
             || *(_DWORD *)(v8 + 8) != *(_DWORD *)(v3 + 8)
             || *(_QWORD *)(v8 + 16) != *(_QWORD *)(v3 + 16))
        {
          v8 += 24;
          if (v8 == v7)
          {
            v8 = a2[1];
            break;
          }
        }
      }
      if (v8 == v7)
      {
        v9 = result;
        if ((char *)a3->i64[0] != result)
        {
          v9 = (char *)a3->i64[0];
          while ((*(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)v3 & 0xFFFFFFFFFFFFFFF8)
               || *((_DWORD *)v9 + 2) != *(_DWORD *)(v3 + 8)
               || *((_QWORD *)v9 + 2) != *(_QWORD *)(v3 + 16))
          {
            v9 += 24;
            if (v9 == result)
            {
              v9 = result;
              break;
            }
          }
        }
        if (v9 == result)
        {
          if ((unint64_t)result >= a3[1].i64[0])
          {
            result = sub_20C7E4E08(a3, (uint64_t *)v3);
          }
          else
          {
            v10 = *(_QWORD *)v3;
            *(_QWORD *)result = *(_QWORD *)v3;
            if ((v10 & 7) != 0)
            {
              v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
              do
                v12 = __ldxr(v11);
              while (__stxr(v12 + 2, v11));
              if ((v12 & 1) == 0)
                *(_QWORD *)result &= 0xFFFFFFFFFFFFFFF8;
            }
            *(_OWORD *)(result + 8) = *(_OWORD *)(v3 + 8);
            result += 24;
          }
          a3->i64[1] = (uint64_t)result;
        }
      }
      v3 += 24;
    }
    while (v3 != v4);
  }
  return result;
}

void sub_20C7E4B8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C7E4DAC((void ***)va);
  _Unwind_Resume(a1);
}

unint64_t pxrInternal__aapl__pxrReserved__::HdBufferSpec::Hash(pxrInternal__aapl__pxrReserved__::HdBufferSpec *this)
{
  uint64_t v2;
  char v3;

  v2 = 0;
  v3 = 0;
  sub_20C7E46F0((uint64_t)&v2, this, (uint64_t)this + 8);
  return bswap64(0x9E3779B97F4A7C55 * v2);
}

void pxrInternal__aapl__pxrReserved__::HdBufferSpec::Dump(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  void **v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  void *__p[2];
  unsigned __int8 v14;

  sub_20BDDC1C8(MEMORY[0x24BEDB318], (uint64_t)"BufferSpecVector\n", 17);
  if ((int)(-1431655765 * ((a1[1] - *a1) >> 3)) >= 1)
  {
    v2 = 0;
    v3 = 0;
    do
    {
      v4 = (_QWORD *)std::ostream::operator<<();
      v5 = sub_20BDDC1C8(v4, (uint64_t)" : ", 3);
      v6 = pxrInternal__aapl__pxrReserved__::operator<<(v5, (_QWORD *)(*a1 + v2));
      v7 = sub_20BDDC1C8(v6, (uint64_t)", ", 2);
      pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_24C54BFE0, *(unsigned int *)(*a1 + v2 + 8), (uint64_t)__p);
      if ((v14 & 0x80u) == 0)
        v8 = __p;
      else
        v8 = (void **)__p[0];
      if ((v14 & 0x80u) == 0)
        v9 = v14;
      else
        v9 = (uint64_t)__p[1];
      v10 = sub_20BDDC1C8(v7, (uint64_t)v8, v9);
      sub_20BDDC1C8(v10, (uint64_t)" (", 2);
      v11 = (_QWORD *)std::ostream::operator<<();
      sub_20BDDC1C8(v11, (uint64_t)"), ", 3);
      v12 = (_QWORD *)std::ostream::operator<<();
      sub_20BDDC1C8(v12, (uint64_t)"\n", 1);
      if ((char)v14 < 0)
        operator delete(__p[0]);
      ++v3;
      v2 += 24;
    }
    while (v3 < (int)(-1431655765 * ((a1[1] - *a1) >> 3)));
  }
}

void sub_20C7E4D90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C7E4DAC(void ***a1)
{
  void **v1;
  char *v2;
  char *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v3 = (char *)v1[1];
    v4 = **a1;
    if (v3 != v2)
    {
      do
      {
        v6 = *((_QWORD *)v3 - 3);
        v3 -= 24;
        v5 = v6;
        if ((v6 & 7) != 0)
        {
          v7 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
          do
            v8 = __ldxr(v7);
          while (__stlxr(v8 - 2, v7));
        }
      }
      while (v3 != v2);
      v4 = **a1;
    }
    v1[1] = v2;
    operator delete(v4);
  }
}

char *sub_20C7E4E08(int64x2_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t i64;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  char *v21;
  uint64_t v23;
  int64x2_t v24;
  char *v25;
  int64x2_t *v26;

  v3 = a1->i64[0];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1->i64[1] - a1->i64[0]) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20BDDF694();
  i64 = (uint64_t)a1[1].i64;
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[1].i64[0] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v26 = a1 + 1;
  if (v9)
    v10 = (char *)sub_20BDE4FF4(i64, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v12 = &v10[24 * v9];
  v25 = v12;
  v13 = *a2;
  *(_QWORD *)v11 = *a2;
  if ((v13 & 7) != 0)
  {
    v14 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 2, v14));
    if ((v15 & 1) == 0)
      *(_QWORD *)v11 &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_OWORD *)&v10[24 * v4 + 8] = *(_OWORD *)(a2 + 1);
  v16 = v11 + 24;
  v24.i64[1] = (uint64_t)(v11 + 24);
  v18 = a1->i64[0];
  v17 = a1->u64[1];
  if (v17 == a1->i64[0])
  {
    v20 = vdupq_n_s64(v17);
  }
  else
  {
    do
    {
      v19 = *(_QWORD *)(v17 - 24);
      v17 -= 24;
      *((_QWORD *)v11 - 3) = v19;
      v11 -= 24;
      *(_QWORD *)v17 = 0;
      *(_OWORD *)(v11 + 8) = *(_OWORD *)(v17 + 8);
    }
    while (v17 != v18);
    v20 = *a1;
    v16 = (char *)v24.i64[1];
    v12 = v25;
  }
  a1->i64[0] = (uint64_t)v11;
  a1->i64[1] = (uint64_t)v16;
  v24 = v20;
  v21 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v12;
  v25 = v21;
  v23 = v20.i64[0];
  sub_20C7E4F68((uint64_t)&v23);
  return v16;
}

uint64_t sub_20C7E4F68(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  void *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  while (v3 != v2)
  {
    v5 = *(_QWORD *)(v3 - 24);
    v3 -= 24;
    v4 = v5;
    *(_QWORD *)(a1 + 16) = v3;
    if ((v5 & 7) != 0)
    {
      v6 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stlxr(v7 - 2, v6));
      v3 = *(_QWORD *)(a1 + 16);
    }
  }
  v8 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v8);
  return a1;
}

void pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType::~HdCameraTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int *v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int v85;
  uint64_t v86;
  unsigned int *v87;
  unsigned int v88;
  uint64_t v89;
  unsigned int *v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int *v93;
  unsigned int v94;
  uint64_t v95;
  unsigned int *v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int *v99;
  unsigned int v100;
  unsigned int *v101;
  unsigned int v102;
  void **v103;

  v103 = (void **)((char *)this + 272);
  sub_20BEEB2B8(&v103);
  v2 = *((_QWORD *)this + 33);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *((_QWORD *)this + 32);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v8 = *((_QWORD *)this + 31);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  v11 = *((_QWORD *)this + 30);
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  v14 = *((_QWORD *)this + 29);
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  v17 = *((_QWORD *)this + 28);
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  v20 = *((_QWORD *)this + 27);
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  v23 = *((_QWORD *)this + 26);
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  v26 = *((_QWORD *)this + 25);
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  v29 = *((_QWORD *)this + 24);
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  v32 = *((_QWORD *)this + 23);
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stlxr(v34 - 2, v33));
  }
  v35 = *((_QWORD *)this + 22);
  if ((v35 & 7) != 0)
  {
    v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stlxr(v37 - 2, v36));
  }
  v38 = *((_QWORD *)this + 21);
  if ((v38 & 7) != 0)
  {
    v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stlxr(v40 - 2, v39));
  }
  v41 = *((_QWORD *)this + 20);
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stlxr(v43 - 2, v42));
  }
  v44 = *((_QWORD *)this + 19);
  if ((v44 & 7) != 0)
  {
    v45 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stlxr(v46 - 2, v45));
  }
  v47 = *((_QWORD *)this + 18);
  if ((v47 & 7) != 0)
  {
    v48 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stlxr(v49 - 2, v48));
  }
  v50 = *((_QWORD *)this + 17);
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stlxr(v52 - 2, v51));
  }
  v53 = *((_QWORD *)this + 16);
  if ((v53 & 7) != 0)
  {
    v54 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFF8);
    do
      v55 = __ldxr(v54);
    while (__stlxr(v55 - 2, v54));
  }
  v56 = *((_QWORD *)this + 15);
  if ((v56 & 7) != 0)
  {
    v57 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
    do
      v58 = __ldxr(v57);
    while (__stlxr(v58 - 2, v57));
  }
  v59 = *((_QWORD *)this + 14);
  if ((v59 & 7) != 0)
  {
    v60 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFFFF8);
    do
      v61 = __ldxr(v60);
    while (__stlxr(v61 - 2, v60));
  }
  v62 = *((_QWORD *)this + 13);
  if ((v62 & 7) != 0)
  {
    v63 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFFFF8);
    do
      v64 = __ldxr(v63);
    while (__stlxr(v64 - 2, v63));
  }
  v65 = *((_QWORD *)this + 12);
  if ((v65 & 7) != 0)
  {
    v66 = (unsigned int *)(v65 & 0xFFFFFFFFFFFFFFF8);
    do
      v67 = __ldxr(v66);
    while (__stlxr(v67 - 2, v66));
  }
  v68 = *((_QWORD *)this + 11);
  if ((v68 & 7) != 0)
  {
    v69 = (unsigned int *)(v68 & 0xFFFFFFFFFFFFFFF8);
    do
      v70 = __ldxr(v69);
    while (__stlxr(v70 - 2, v69));
  }
  v71 = *((_QWORD *)this + 10);
  if ((v71 & 7) != 0)
  {
    v72 = (unsigned int *)(v71 & 0xFFFFFFFFFFFFFFF8);
    do
      v73 = __ldxr(v72);
    while (__stlxr(v73 - 2, v72));
  }
  v74 = *((_QWORD *)this + 9);
  if ((v74 & 7) != 0)
  {
    v75 = (unsigned int *)(v74 & 0xFFFFFFFFFFFFFFF8);
    do
      v76 = __ldxr(v75);
    while (__stlxr(v76 - 2, v75));
  }
  v77 = *((_QWORD *)this + 8);
  if ((v77 & 7) != 0)
  {
    v78 = (unsigned int *)(v77 & 0xFFFFFFFFFFFFFFF8);
    do
      v79 = __ldxr(v78);
    while (__stlxr(v79 - 2, v78));
  }
  v80 = *((_QWORD *)this + 7);
  if ((v80 & 7) != 0)
  {
    v81 = (unsigned int *)(v80 & 0xFFFFFFFFFFFFFFF8);
    do
      v82 = __ldxr(v81);
    while (__stlxr(v82 - 2, v81));
  }
  v83 = *((_QWORD *)this + 6);
  if ((v83 & 7) != 0)
  {
    v84 = (unsigned int *)(v83 & 0xFFFFFFFFFFFFFFF8);
    do
      v85 = __ldxr(v84);
    while (__stlxr(v85 - 2, v84));
  }
  v86 = *((_QWORD *)this + 5);
  if ((v86 & 7) != 0)
  {
    v87 = (unsigned int *)(v86 & 0xFFFFFFFFFFFFFFF8);
    do
      v88 = __ldxr(v87);
    while (__stlxr(v88 - 2, v87));
  }
  v89 = *((_QWORD *)this + 4);
  if ((v89 & 7) != 0)
  {
    v90 = (unsigned int *)(v89 & 0xFFFFFFFFFFFFFFF8);
    do
      v91 = __ldxr(v90);
    while (__stlxr(v91 - 2, v90));
  }
  v92 = *((_QWORD *)this + 3);
  if ((v92 & 7) != 0)
  {
    v93 = (unsigned int *)(v92 & 0xFFFFFFFFFFFFFFF8);
    do
      v94 = __ldxr(v93);
    while (__stlxr(v94 - 2, v93));
  }
  v95 = *((_QWORD *)this + 2);
  if ((v95 & 7) != 0)
  {
    v96 = (unsigned int *)(v95 & 0xFFFFFFFFFFFFFFF8);
    do
      v97 = __ldxr(v96);
    while (__stlxr(v97 - 2, v96));
  }
  v98 = *((_QWORD *)this + 1);
  if ((v98 & 7) != 0)
  {
    v99 = (unsigned int *)(v98 & 0xFFFFFFFFFFFFFFF8);
    do
      v100 = __ldxr(v99);
    while (__stlxr(v100 - 2, v99));
  }
  if ((*(_QWORD *)this & 7) != 0)
  {
    v101 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v102 = __ldxr(v101);
    while (__stlxr(v102 - 2, v101));
  }
}

pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType::HdCameraTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int *v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int v85;
  uint64_t v86;
  unsigned int *v87;
  unsigned int v88;
  uint64_t v89;
  unsigned int *v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int *v93;
  unsigned int v94;
  uint64_t v95;
  unsigned int *v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int *v99;
  unsigned int v100;
  uint64_t v101;
  unsigned int *v102;
  unsigned int v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int *v107;
  unsigned int v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int *v112;
  unsigned int v113;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;

  v150 = *MEMORY[0x24BDAC8D0];
  v115 = (uint64_t *)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "projection", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v115, "horizontalAperture", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 16, "verticalAperture", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 24, "horizontalApertureOffset", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 32, "verticalApertureOffset", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 40, "focalLength", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 48, "clippingRange", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 56, "clipPlanes", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 64, "fStop", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 72, "focusDistance", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 80, "focusOn", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 88, "dofAspect", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 96, "splitDiopter:count", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 104, "splitDiopter:angle", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 112, "splitDiopter:offset1", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 120, "splitDiopter:width1", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 128, "splitDiopter:focusDistance1", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 136, "splitDiopter:offset2", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 144, "splitDiopter:width2", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 152, "splitDiopter:focusDistance2", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 160, "shutterOpen", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 168, "shutterClose", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 176, "exposure", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 184, "windowPolicy", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 192, "standard", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 200, "fisheye", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 208, "lensDistortion:type", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 216, "lensDistortion:k1", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 224, "lensDistortion:k2", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 232, "lensDistortion:center", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 240, "lensDistortion:anaSq", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 248, "lensDistortion:asym", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 256, "lensDistortion:scale", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 264, "lensDistortion:ior", 0);
  v2 = *(_QWORD *)this;
  v116 = v2;
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) == 0)
      v116 &= 0xFFFFFFFFFFFFFFF8;
  }
  v5 = *v115;
  v117 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v117 &= 0xFFFFFFFFFFFFFFF8;
  }
  v8 = *((_QWORD *)this + 2);
  v118 = v8;
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v118 &= 0xFFFFFFFFFFFFFFF8;
  }
  v11 = *((_QWORD *)this + 3);
  v119 = v11;
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 2, v12));
    if ((v13 & 1) == 0)
      v119 &= 0xFFFFFFFFFFFFFFF8;
  }
  v14 = *((_QWORD *)this + 4);
  v120 = v14;
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 2, v15));
    if ((v16 & 1) == 0)
      v120 &= 0xFFFFFFFFFFFFFFF8;
  }
  v17 = *((_QWORD *)this + 5);
  v121 = v17;
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 2, v18));
    if ((v19 & 1) == 0)
      v121 &= 0xFFFFFFFFFFFFFFF8;
  }
  v20 = *((_QWORD *)this + 6);
  v122 = v20;
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 2, v21));
    if ((v22 & 1) == 0)
      v122 &= 0xFFFFFFFFFFFFFFF8;
  }
  v23 = *((_QWORD *)this + 7);
  v123 = v23;
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 2, v24));
    if ((v25 & 1) == 0)
      v123 &= 0xFFFFFFFFFFFFFFF8;
  }
  v26 = *((_QWORD *)this + 8);
  v124 = v26;
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 2, v27));
    if ((v28 & 1) == 0)
      v124 &= 0xFFFFFFFFFFFFFFF8;
  }
  v29 = *((_QWORD *)this + 9);
  v125 = v29;
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 2, v30));
    if ((v31 & 1) == 0)
      v125 &= 0xFFFFFFFFFFFFFFF8;
  }
  v32 = *((_QWORD *)this + 10);
  v126 = v32;
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 2, v33));
    if ((v34 & 1) == 0)
      v126 &= 0xFFFFFFFFFFFFFFF8;
  }
  v35 = *((_QWORD *)this + 11);
  v127 = v35;
  if ((v35 & 7) != 0)
  {
    v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 2, v36));
    if ((v37 & 1) == 0)
      v127 &= 0xFFFFFFFFFFFFFFF8;
  }
  v38 = *((_QWORD *)this + 12);
  v128 = v38;
  if ((v38 & 7) != 0)
  {
    v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 2, v39));
    if ((v40 & 1) == 0)
      v128 &= 0xFFFFFFFFFFFFFFF8;
  }
  v41 = *((_QWORD *)this + 13);
  v129 = v41;
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 2, v42));
    if ((v43 & 1) == 0)
      v129 &= 0xFFFFFFFFFFFFFFF8;
  }
  v44 = *((_QWORD *)this + 14);
  v130 = v44;
  if ((v44 & 7) != 0)
  {
    v45 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 2, v45));
    if ((v46 & 1) == 0)
      v130 &= 0xFFFFFFFFFFFFFFF8;
  }
  v47 = *((_QWORD *)this + 15);
  v131 = v47;
  if ((v47 & 7) != 0)
  {
    v48 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 2, v48));
    if ((v49 & 1) == 0)
      v131 &= 0xFFFFFFFFFFFFFFF8;
  }
  v50 = *((_QWORD *)this + 16);
  v132 = v50;
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 2, v51));
    if ((v52 & 1) == 0)
      v132 &= 0xFFFFFFFFFFFFFFF8;
  }
  v53 = *((_QWORD *)this + 17);
  v133 = v53;
  if ((v53 & 7) != 0)
  {
    v54 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFF8);
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 2, v54));
    if ((v55 & 1) == 0)
      v133 &= 0xFFFFFFFFFFFFFFF8;
  }
  v56 = *((_QWORD *)this + 18);
  v134 = v56;
  if ((v56 & 7) != 0)
  {
    v57 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
    do
      v58 = __ldxr(v57);
    while (__stxr(v58 + 2, v57));
    if ((v58 & 1) == 0)
      v134 &= 0xFFFFFFFFFFFFFFF8;
  }
  v59 = *((_QWORD *)this + 19);
  v135 = v59;
  if ((v59 & 7) != 0)
  {
    v60 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFFFF8);
    do
      v61 = __ldxr(v60);
    while (__stxr(v61 + 2, v60));
    if ((v61 & 1) == 0)
      v135 &= 0xFFFFFFFFFFFFFFF8;
  }
  v62 = *((_QWORD *)this + 20);
  v136 = v62;
  if ((v62 & 7) != 0)
  {
    v63 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFFFF8);
    do
      v64 = __ldxr(v63);
    while (__stxr(v64 + 2, v63));
    if ((v64 & 1) == 0)
      v136 &= 0xFFFFFFFFFFFFFFF8;
  }
  v65 = *((_QWORD *)this + 21);
  v137 = v65;
  if ((v65 & 7) != 0)
  {
    v66 = (unsigned int *)(v65 & 0xFFFFFFFFFFFFFFF8);
    do
      v67 = __ldxr(v66);
    while (__stxr(v67 + 2, v66));
    if ((v67 & 1) == 0)
      v137 &= 0xFFFFFFFFFFFFFFF8;
  }
  v68 = *((_QWORD *)this + 22);
  v138 = v68;
  if ((v68 & 7) != 0)
  {
    v69 = (unsigned int *)(v68 & 0xFFFFFFFFFFFFFFF8);
    do
      v70 = __ldxr(v69);
    while (__stxr(v70 + 2, v69));
    if ((v70 & 1) == 0)
      v138 &= 0xFFFFFFFFFFFFFFF8;
  }
  v71 = *((_QWORD *)this + 23);
  v139 = v71;
  if ((v71 & 7) != 0)
  {
    v72 = (unsigned int *)(v71 & 0xFFFFFFFFFFFFFFF8);
    do
      v73 = __ldxr(v72);
    while (__stxr(v73 + 2, v72));
    if ((v73 & 1) == 0)
      v139 &= 0xFFFFFFFFFFFFFFF8;
  }
  v74 = *((_QWORD *)this + 24);
  v140 = v74;
  if ((v74 & 7) != 0)
  {
    v75 = (unsigned int *)(v74 & 0xFFFFFFFFFFFFFFF8);
    do
      v76 = __ldxr(v75);
    while (__stxr(v76 + 2, v75));
    if ((v76 & 1) == 0)
      v140 &= 0xFFFFFFFFFFFFFFF8;
  }
  v77 = *((_QWORD *)this + 25);
  v141 = v77;
  if ((v77 & 7) != 0)
  {
    v78 = (unsigned int *)(v77 & 0xFFFFFFFFFFFFFFF8);
    do
      v79 = __ldxr(v78);
    while (__stxr(v79 + 2, v78));
    if ((v79 & 1) == 0)
      v141 &= 0xFFFFFFFFFFFFFFF8;
  }
  v80 = *((_QWORD *)this + 26);
  v142 = v80;
  if ((v80 & 7) != 0)
  {
    v81 = (unsigned int *)(v80 & 0xFFFFFFFFFFFFFFF8);
    do
      v82 = __ldxr(v81);
    while (__stxr(v82 + 2, v81));
    if ((v82 & 1) == 0)
      v142 &= 0xFFFFFFFFFFFFFFF8;
  }
  v83 = *((_QWORD *)this + 27);
  v143 = v83;
  if ((v83 & 7) != 0)
  {
    v84 = (unsigned int *)(v83 & 0xFFFFFFFFFFFFFFF8);
    do
      v85 = __ldxr(v84);
    while (__stxr(v85 + 2, v84));
    if ((v85 & 1) == 0)
      v143 &= 0xFFFFFFFFFFFFFFF8;
  }
  v86 = *((_QWORD *)this + 28);
  v144 = v86;
  if ((v86 & 7) != 0)
  {
    v87 = (unsigned int *)(v86 & 0xFFFFFFFFFFFFFFF8);
    do
      v88 = __ldxr(v87);
    while (__stxr(v88 + 2, v87));
    if ((v88 & 1) == 0)
      v144 &= 0xFFFFFFFFFFFFFFF8;
  }
  v89 = *((_QWORD *)this + 29);
  v145 = v89;
  if ((v89 & 7) != 0)
  {
    v90 = (unsigned int *)(v89 & 0xFFFFFFFFFFFFFFF8);
    do
      v91 = __ldxr(v90);
    while (__stxr(v91 + 2, v90));
    if ((v91 & 1) == 0)
      v145 &= 0xFFFFFFFFFFFFFFF8;
  }
  v92 = *((_QWORD *)this + 30);
  v146 = v92;
  if ((v92 & 7) != 0)
  {
    v93 = (unsigned int *)(v92 & 0xFFFFFFFFFFFFFFF8);
    do
      v94 = __ldxr(v93);
    while (__stxr(v94 + 2, v93));
    if ((v94 & 1) == 0)
      v146 &= 0xFFFFFFFFFFFFFFF8;
  }
  v95 = *((_QWORD *)this + 31);
  v147 = v95;
  if ((v95 & 7) != 0)
  {
    v96 = (unsigned int *)(v95 & 0xFFFFFFFFFFFFFFF8);
    do
      v97 = __ldxr(v96);
    while (__stxr(v97 + 2, v96));
    if ((v97 & 1) == 0)
      v147 &= 0xFFFFFFFFFFFFFFF8;
  }
  v98 = *((_QWORD *)this + 32);
  v148 = v98;
  if ((v98 & 7) != 0)
  {
    v99 = (unsigned int *)(v98 & 0xFFFFFFFFFFFFFFF8);
    do
      v100 = __ldxr(v99);
    while (__stxr(v100 + 2, v99));
    if ((v100 & 1) == 0)
      v148 &= 0xFFFFFFFFFFFFFFF8;
  }
  v101 = *((_QWORD *)this + 33);
  v149 = v101;
  if ((v101 & 7) != 0)
  {
    v102 = (unsigned int *)(v101 & 0xFFFFFFFFFFFFFFF8);
    do
      v103 = __ldxr(v102);
    while (__stxr(v103 + 2, v102));
    if ((v103 & 1) == 0)
      v149 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_QWORD *)this + 34) = 0;
  *((_QWORD *)this + 35) = 0;
  *((_QWORD *)this + 36) = 0;
  v104 = operator new(0x110uLL);
  v105 = 0;
  *((_QWORD *)this + 34) = v104;
  *((_QWORD *)this + 35) = v104;
  *((_QWORD *)this + 36) = v104 + 34;
  do
  {
    v106 = *(&v116 + v105);
    *v104 = v106;
    if ((v106 & 7) != 0)
    {
      v107 = (unsigned int *)(v106 & 0xFFFFFFFFFFFFFFF8);
      do
        v108 = __ldxr(v107);
      while (__stxr(v108 + 2, v107));
      if ((v108 & 1) == 0)
        *v104 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v105;
    ++v104;
  }
  while (v105 != 34);
  v109 = &v150;
  *((_QWORD *)this + 35) = v104;
  do
  {
    v111 = *--v109;
    v110 = v111;
    if ((v111 & 7) != 0)
    {
      v112 = (unsigned int *)(v110 & 0xFFFFFFFFFFFFFFF8);
      do
        v113 = __ldxr(v112);
      while (__stlxr(v113 - 2, v112));
    }
  }
  while (v109 != &v116);
  return this;
}

void sub_20C7E5FD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, _QWORD *a11, _QWORD *a12, _QWORD *a13, _QWORD *a14, _QWORD *a15, _QWORD *a16, _QWORD *a17, _QWORD *a18, _QWORD *a19, _QWORD *a20,_QWORD *a21,_QWORD *a22,_QWORD *a23,_QWORD *a24,_QWORD *a25,_QWORD *a26,_QWORD *a27,_QWORD *a28,_QWORD *a29,_QWORD *a30,_QWORD *a31,_QWORD *a32,_QWORD *a33,_QWORD *a34,void **a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a71;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int *v88;
  unsigned int v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int *v92;
  unsigned int v93;
  unsigned int *v94;
  unsigned int v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int *v98;
  unsigned int v99;
  unsigned int *v100;
  unsigned int v101;
  unsigned int *v102;
  unsigned int v103;
  unsigned int *v104;
  unsigned int v105;
  unsigned int *v106;
  unsigned int v107;
  unsigned int *v108;
  unsigned int v109;
  unsigned int *v110;
  unsigned int v111;
  unsigned int *v112;
  unsigned int v113;
  unsigned int *v114;
  unsigned int v115;
  unsigned int *v116;
  unsigned int v117;
  unsigned int *v118;
  unsigned int v119;
  unsigned int *v120;
  unsigned int v121;
  unsigned int *v122;
  unsigned int v123;
  unsigned int *v124;
  unsigned int v125;
  unsigned int *v126;
  unsigned int v127;
  unsigned int *v128;
  unsigned int v129;
  unsigned int *v130;
  unsigned int v131;
  unsigned int *v132;
  unsigned int v133;
  unsigned int *v134;
  unsigned int v135;
  unsigned int *v136;
  unsigned int v137;
  unsigned int *v138;
  unsigned int v139;
  unsigned int *v140;
  unsigned int v141;
  unsigned int *v142;
  unsigned int v143;
  unsigned int *v144;
  unsigned int v145;
  unsigned int *v146;
  unsigned int v147;
  unsigned int *v148;
  unsigned int v149;
  unsigned int *v150;
  unsigned int v151;
  unsigned int *v152;
  unsigned int v153;

  sub_20BEEB2B8(&a35);
  v81 = (char *)&a71;
  while (1)
  {
    v83 = *((_QWORD *)v81 - 1);
    v81 -= 8;
    v82 = v83;
    if ((v83 & 7) != 0)
    {
      v84 = (unsigned int *)(v82 & 0xFFFFFFFFFFFFFFF8);
      do
        v85 = __ldxr(v84);
      while (__stlxr(v85 - 2, v84));
    }
    if (v81 == &a37)
    {
      if ((*v77 & 7) != 0)
      {
        v86 = (unsigned int *)(*v77 & 0xFFFFFFFFFFFFFFF8);
        do
          v87 = __ldxr(v86);
        while (__stlxr(v87 - 2, v86));
      }
      if ((*v76 & 7) != 0)
      {
        v88 = (unsigned int *)(*v76 & 0xFFFFFFFFFFFFFFF8);
        do
          v89 = __ldxr(v88);
        while (__stlxr(v89 - 2, v88));
      }
      if ((*v75 & 7) != 0)
      {
        v90 = (unsigned int *)(*v75 & 0xFFFFFFFFFFFFFFF8);
        do
          v91 = __ldxr(v90);
        while (__stlxr(v91 - 2, v90));
      }
      if ((*v74 & 7) != 0)
      {
        v92 = (unsigned int *)(*v74 & 0xFFFFFFFFFFFFFFF8);
        do
          v93 = __ldxr(v92);
        while (__stlxr(v93 - 2, v92));
      }
      if ((*v73 & 7) != 0)
      {
        v94 = (unsigned int *)(*v73 & 0xFFFFFFFFFFFFFFF8);
        do
          v95 = __ldxr(v94);
        while (__stlxr(v95 - 2, v94));
      }
      if ((*v72 & 7) != 0)
      {
        v96 = (unsigned int *)(*v72 & 0xFFFFFFFFFFFFFFF8);
        do
          v97 = __ldxr(v96);
        while (__stlxr(v97 - 2, v96));
      }
      if ((*v80 & 7) != 0)
      {
        v98 = (unsigned int *)(*v80 & 0xFFFFFFFFFFFFFFF8);
        do
          v99 = __ldxr(v98);
        while (__stlxr(v99 - 2, v98));
      }
      if ((*v79 & 7) != 0)
      {
        v100 = (unsigned int *)(*v79 & 0xFFFFFFFFFFFFFFF8);
        do
          v101 = __ldxr(v100);
        while (__stlxr(v101 - 2, v100));
      }
      if ((*v78 & 7) != 0)
      {
        v102 = (unsigned int *)(*v78 & 0xFFFFFFFFFFFFFFF8);
        do
          v103 = __ldxr(v102);
        while (__stlxr(v103 - 2, v102));
      }
      if ((*a11 & 7) != 0)
      {
        v104 = (unsigned int *)(*a11 & 0xFFFFFFFFFFFFFFF8);
        do
          v105 = __ldxr(v104);
        while (__stlxr(v105 - 2, v104));
      }
      if ((*a12 & 7) != 0)
      {
        v106 = (unsigned int *)(*a12 & 0xFFFFFFFFFFFFFFF8);
        do
          v107 = __ldxr(v106);
        while (__stlxr(v107 - 2, v106));
      }
      if ((*a13 & 7) != 0)
      {
        v108 = (unsigned int *)(*a13 & 0xFFFFFFFFFFFFFFF8);
        do
          v109 = __ldxr(v108);
        while (__stlxr(v109 - 2, v108));
      }
      if ((*a14 & 7) != 0)
      {
        v110 = (unsigned int *)(*a14 & 0xFFFFFFFFFFFFFFF8);
        do
          v111 = __ldxr(v110);
        while (__stlxr(v111 - 2, v110));
      }
      if ((*a15 & 7) != 0)
      {
        v112 = (unsigned int *)(*a15 & 0xFFFFFFFFFFFFFFF8);
        do
          v113 = __ldxr(v112);
        while (__stlxr(v113 - 2, v112));
      }
      if ((*a16 & 7) != 0)
      {
        v114 = (unsigned int *)(*a16 & 0xFFFFFFFFFFFFFFF8);
        do
          v115 = __ldxr(v114);
        while (__stlxr(v115 - 2, v114));
      }
      if ((*a17 & 7) != 0)
      {
        v116 = (unsigned int *)(*a17 & 0xFFFFFFFFFFFFFFF8);
        do
          v117 = __ldxr(v116);
        while (__stlxr(v117 - 2, v116));
      }
      if ((*a18 & 7) != 0)
      {
        v118 = (unsigned int *)(*a18 & 0xFFFFFFFFFFFFFFF8);
        do
          v119 = __ldxr(v118);
        while (__stlxr(v119 - 2, v118));
      }
      if ((*a19 & 7) != 0)
      {
        v120 = (unsigned int *)(*a19 & 0xFFFFFFFFFFFFFFF8);
        do
          v121 = __ldxr(v120);
        while (__stlxr(v121 - 2, v120));
      }
      if ((*a20 & 7) != 0)
      {
        v122 = (unsigned int *)(*a20 & 0xFFFFFFFFFFFFFFF8);
        do
          v123 = __ldxr(v122);
        while (__stlxr(v123 - 2, v122));
      }
      if ((*a21 & 7) != 0)
      {
        v124 = (unsigned int *)(*a21 & 0xFFFFFFFFFFFFFFF8);
        do
          v125 = __ldxr(v124);
        while (__stlxr(v125 - 2, v124));
      }
      if ((*a22 & 7) != 0)
      {
        v126 = (unsigned int *)(*a22 & 0xFFFFFFFFFFFFFFF8);
        do
          v127 = __ldxr(v126);
        while (__stlxr(v127 - 2, v126));
      }
      if ((*a23 & 7) != 0)
      {
        v128 = (unsigned int *)(*a23 & 0xFFFFFFFFFFFFFFF8);
        do
          v129 = __ldxr(v128);
        while (__stlxr(v129 - 2, v128));
      }
      if ((*a24 & 7) != 0)
      {
        v130 = (unsigned int *)(*a24 & 0xFFFFFFFFFFFFFFF8);
        do
          v131 = __ldxr(v130);
        while (__stlxr(v131 - 2, v130));
      }
      if ((*a25 & 7) != 0)
      {
        v132 = (unsigned int *)(*a25 & 0xFFFFFFFFFFFFFFF8);
        do
          v133 = __ldxr(v132);
        while (__stlxr(v133 - 2, v132));
      }
      if ((*a26 & 7) != 0)
      {
        v134 = (unsigned int *)(*a26 & 0xFFFFFFFFFFFFFFF8);
        do
          v135 = __ldxr(v134);
        while (__stlxr(v135 - 2, v134));
      }
      if ((*a27 & 7) != 0)
      {
        v136 = (unsigned int *)(*a27 & 0xFFFFFFFFFFFFFFF8);
        do
          v137 = __ldxr(v136);
        while (__stlxr(v137 - 2, v136));
      }
      if ((*a28 & 7) != 0)
      {
        v138 = (unsigned int *)(*a28 & 0xFFFFFFFFFFFFFFF8);
        do
          v139 = __ldxr(v138);
        while (__stlxr(v139 - 2, v138));
      }
      if ((*a29 & 7) != 0)
      {
        v140 = (unsigned int *)(*a29 & 0xFFFFFFFFFFFFFFF8);
        do
          v141 = __ldxr(v140);
        while (__stlxr(v141 - 2, v140));
      }
      if ((*a30 & 7) != 0)
      {
        v142 = (unsigned int *)(*a30 & 0xFFFFFFFFFFFFFFF8);
        do
          v143 = __ldxr(v142);
        while (__stlxr(v143 - 2, v142));
      }
      if ((*a31 & 7) != 0)
      {
        v144 = (unsigned int *)(*a31 & 0xFFFFFFFFFFFFFFF8);
        do
          v145 = __ldxr(v144);
        while (__stlxr(v145 - 2, v144));
      }
      if ((*a32 & 7) != 0)
      {
        v146 = (unsigned int *)(*a32 & 0xFFFFFFFFFFFFFFF8);
        do
          v147 = __ldxr(v146);
        while (__stlxr(v147 - 2, v146));
      }
      if ((*a33 & 7) != 0)
      {
        v148 = (unsigned int *)(*a33 & 0xFFFFFFFFFFFFFFF8);
        do
          v149 = __ldxr(v148);
        while (__stlxr(v149 - 2, v148));
      }
      if ((*a34 & 7) != 0)
      {
        v150 = (unsigned int *)(*a34 & 0xFFFFFFFFFFFFFFF8);
        do
          v151 = __ldxr(v150);
        while (__stlxr(v151 - 2, v150));
      }
      if ((*v71 & 7) != 0)
      {
        v152 = (unsigned int *)(*v71 & 0xFFFFFFFFFFFFFFF8);
        do
          v153 = __ldxr(v152);
        while (__stlxr(v153 - 2, v152));
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_20C7E64F8()
{
  JUMPOUT(0x20C7E6170);
}

void sub_20C7E6500()
{
  JUMPOUT(0x20C7E6194);
}

void sub_20C7E6508()
{
  JUMPOUT(0x20C7E61B8);
}

void sub_20C7E6510()
{
  JUMPOUT(0x20C7E61DCLL);
}

void sub_20C7E6518()
{
  JUMPOUT(0x20C7E6200);
}

void sub_20C7E6520()
{
  JUMPOUT(0x20C7E6224);
}

void sub_20C7E6528()
{
  JUMPOUT(0x20C7E6248);
}

void sub_20C7E6530()
{
  JUMPOUT(0x20C7E626CLL);
}

void sub_20C7E6538()
{
  JUMPOUT(0x20C7E6290);
}

void sub_20C7E6540()
{
  JUMPOUT(0x20C7E62B4);
}

void sub_20C7E6548()
{
  JUMPOUT(0x20C7E62D8);
}

void sub_20C7E6550()
{
  JUMPOUT(0x20C7E62FCLL);
}

void sub_20C7E6558()
{
  JUMPOUT(0x20C7E6320);
}

void sub_20C7E6560()
{
  JUMPOUT(0x20C7E6344);
}

void sub_20C7E6568()
{
  JUMPOUT(0x20C7E6368);
}

void sub_20C7E6570()
{
  JUMPOUT(0x20C7E638CLL);
}

void sub_20C7E6578()
{
  JUMPOUT(0x20C7E63B0);
}

void sub_20C7E6580()
{
  JUMPOUT(0x20C7E63D4);
}

void sub_20C7E6588()
{
  JUMPOUT(0x20C7E63F8);
}

void sub_20C7E6590()
{
  JUMPOUT(0x20C7E641CLL);
}

void sub_20C7E6598()
{
  JUMPOUT(0x20C7E6440);
}

void sub_20C7E65A0()
{
  JUMPOUT(0x20C7E6464);
}

void sub_20C7E65A8()
{
  JUMPOUT(0x20C7E6488);
}

void sub_20C7E65B0()
{
  JUMPOUT(0x20C7E64ACLL);
}

void sub_20C7E65B8()
{
  JUMPOUT(0x20C7E64D0);
}

pxrInternal__aapl__pxrReserved__::HdCamera *pxrInternal__aapl__pxrReserved__::HdCamera::HdCamera(pxrInternal__aapl__pxrReserved__::HdCamera *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  pxrInternal__aapl__pxrReserved__::HdSprim *v3;
  pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  v3 = pxrInternal__aapl__pxrReserved__::HdSprim::HdSprim(this, a2);
  *(_QWORD *)v3 = off_24C54C000;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)v3 + 16, 1.0);
  *((_OWORD *)this + 11) = 0u;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0xFF7FFFFF7F7FFFFFLL;
  *((_OWORD *)this + 12) = 0u;
  *((_BYTE *)this + 208) = 0;
  *((_DWORD *)this + 53) = 1065353216;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((_DWORD *)this + 66) = 0;
  v4 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
  if (!v4)
    v4 = sub_20C7E7984(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
  v5 = *((_QWORD *)v4 + 24);
  *((_QWORD *)this + 34) = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      *((_QWORD *)this + 34) &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_QWORD *)this + 35) = 0;
  *((_QWORD *)this + 36) = 0;
  *(_OWORD *)((char *)this + 296) = xmmword_20CA9B1C0;
  *((_QWORD *)this + 39) = 0x200000000;
  return this;
}

void sub_20C7E66AC(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::HdSprim *v1;
  void **v2;
  void **v3;
  void *v5;

  v3 = v2;
  v5 = *v3;
  if (*v3)
  {
    *((_QWORD *)v1 + 23) = v5;
    operator delete(v5);
  }
  pxrInternal__aapl__pxrReserved__::HdSprim::~HdSprim(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdCamera::~HdCamera(pxrInternal__aapl__pxrReserved__::HdCamera *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  void *v5;

  *(_QWORD *)this = off_24C54C000;
  v2 = *((_QWORD *)this + 34);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = (void *)*((_QWORD *)this + 22);
  if (v5)
  {
    *((_QWORD *)this + 23) = v5;
    operator delete(v5);
  }
  pxrInternal__aapl__pxrReserved__::HdSprim::~HdSprim(this);
}

{
  void *v1;

  pxrInternal__aapl__pxrReserved__::HdCamera::~HdCamera(this);
  operator delete(v1);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdCamera::Sync(pxrInternal__aapl__pxrReserved__::HdCamera *this, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *a2, pxrInternal__aapl__pxrReserved__::HdRenderParam *a3, unsigned int *a4)
{
  uint64_t result;
  int v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *v14;
  pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *v15;
  pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *v16;
  pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *v17;
  pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *v18;
  pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *v19;
  pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *v20;
  pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *v21;
  pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *v22;
  pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *v23;
  pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *v24;
  pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *v25;
  pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *v26;
  pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *v27;
  pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *v28;
  pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *v29;
  pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *v30;
  pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *v31;
  pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *v32;
  pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *v33;
  pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *v34;
  pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *v35;
  _QWORD *v36;
  pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *v37;
  pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *v38;
  pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *v39;
  pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *v40;
  pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *v41;
  pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *v42;
  pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *v43;
  pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *v44;
  pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *v45;
  uint64_t v46;
  uint64_t v48;
  int v49;
  _QWORD v50[2];
  _QWORD v51[2];
  _QWORD v52[2];
  _QWORD v53[2];
  _QWORD v54[2];
  _QWORD v55[2];
  _QWORD v56[2];
  _QWORD v57[2];
  _QWORD v58[2];
  _QWORD v59[2];
  _QWORD v60[2];
  _QWORD v61[2];
  _QWORD v62[2];
  _QWORD v63[2];
  _QWORD v64[2];
  _QWORD v65[2];
  _QWORD v66[2];
  _QWORD v67[2];
  _QWORD v68[2];
  _QWORD v69[2];
  _QWORD v70[2];
  _QWORD v71[2];
  _QWORD v72[2];
  _QWORD v73[2];
  _QWORD v74[2];
  _QWORD v75[2];
  _QWORD v76[2];
  _QWORD v77[2];
  _QWORD v78[2];
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;

  v87 = *MEMORY[0x24BDAC8D0];
  result = sub_20BEB59B0((uint64_t)&v48, (uint64_t)"hd", (uint64_t)"virtual void pxrInternal__aapl__pxrReserved__::HdCamera::Sync(HdSceneDelegate *, HdRenderParam *, HdDirtyBits *)");
  if (a2
    || (*(_QWORD *)&v79 = "hd/camera.cpp",
        *((_QWORD *)&v79 + 1) = "Sync",
        *(_QWORD *)&v80 = 86,
        *((_QWORD *)&v80 + 1) = "virtual void pxrInternal__aapl__pxrReserved__::HdCamera::Sync(HdSceneDelegate *, HdRende"
                                "rParam *, HdDirtyBits *)",
        LOBYTE(v81) = 0,
        result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v79, "sceneDelegate != nullptr", 0),
        (result & 1) != 0))
  {
    v8 = *a4;
    if ((*a4 & 1) != 0)
    {
      result = (uint64_t)(*(_QWORD *(**)(__int128 *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *))(*(_QWORD *)a2 + 72))(&v79, a2, (char *)this + 8);
      v9 = v84;
      *((_OWORD *)this + 5) = v83;
      *((_OWORD *)this + 6) = v9;
      v10 = v86;
      *((_OWORD *)this + 7) = v85;
      *((_OWORD *)this + 8) = v10;
      v11 = v80;
      *((_OWORD *)this + 1) = v79;
      *((_OWORD *)this + 2) = v11;
      v12 = v82;
      *((_OWORD *)this + 3) = v81;
      *((_OWORD *)this + 4) = v12;
    }
    if ((v8 & 2) != 0)
    {
      if (!atomic_load(&pxrInternal__aapl__pxrReserved__::HdCameraTokens))
        sub_20C7E7984(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      (*(void (**)(__int128 *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *))(*(_QWORD *)a2 + 296))(&v79, a2, (char *)this + 8);
      if (*((_QWORD *)&v79 + 1))
        *((_DWORD *)this + 36) = *(_DWORD *)sub_20C7E75F4((pxrInternal__aapl__pxrReserved__::VtValue *)&v79);
      v14 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      if (!v14)
        v14 = sub_20C7E7984(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      (*(void (**)(_QWORD *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *, uint64_t))(*(_QWORD *)a2 + 296))(v78, a2, (char *)this + 8, (uint64_t)v14 + 8);
      if (v78[1])
        *((_DWORD *)this + 37) = *(_DWORD *)sub_20BF7D934((pxrInternal__aapl__pxrReserved__::VtValue *)v78);
      v15 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      if (!v15)
        v15 = sub_20C7E7984(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      (*(void (**)(_QWORD *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *, uint64_t))(*(_QWORD *)a2 + 296))(v77, a2, (char *)this + 8, (uint64_t)v15 + 16);
      if (v77[1])
        *((_DWORD *)this + 38) = *(_DWORD *)sub_20BF7D934((pxrInternal__aapl__pxrReserved__::VtValue *)v77);
      v16 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      if (!v16)
        v16 = sub_20C7E7984(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      (*(void (**)(_QWORD *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *, uint64_t))(*(_QWORD *)a2 + 296))(v76, a2, (char *)this + 8, (uint64_t)v16 + 24);
      if (v76[1])
        *((_DWORD *)this + 39) = *(_DWORD *)sub_20BF7D934((pxrInternal__aapl__pxrReserved__::VtValue *)v76);
      v17 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      if (!v17)
        v17 = sub_20C7E7984(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      (*(void (**)(_QWORD *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *, uint64_t))(*(_QWORD *)a2 + 296))(v75, a2, (char *)this + 8, (uint64_t)v17 + 32);
      if (v75[1])
        *((_DWORD *)this + 40) = *(_DWORD *)sub_20BF7D934((pxrInternal__aapl__pxrReserved__::VtValue *)v75);
      v18 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      if (!v18)
        v18 = sub_20C7E7984(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      (*(void (**)(_QWORD *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *, uint64_t))(*(_QWORD *)a2 + 296))(v74, a2, (char *)this + 8, (uint64_t)v18 + 40);
      if (v74[1])
        *((_DWORD *)this + 41) = *(_DWORD *)sub_20BF7D934((pxrInternal__aapl__pxrReserved__::VtValue *)v74);
      v19 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      if (!v19)
        v19 = sub_20C7E7984(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      (*(void (**)(_QWORD *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *, uint64_t))(*(_QWORD *)a2 + 296))(v73, a2, (char *)this + 8, (uint64_t)v19 + 48);
      if (v73[1])
        *((_QWORD *)this + 21) = *(_QWORD *)sub_20C7E765C((pxrInternal__aapl__pxrReserved__::VtValue *)v73);
      v20 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      if (!v20)
        v20 = sub_20C7E7984(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      (*(void (**)(_QWORD *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *, uint64_t))(*(_QWORD *)a2 + 296))(v72, a2, (char *)this + 8, (uint64_t)v20 + 64);
      if (v72[1])
        *((_DWORD *)this + 50) = *(_DWORD *)sub_20BF7D934((pxrInternal__aapl__pxrReserved__::VtValue *)v72);
      v21 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      if (!v21)
        v21 = sub_20C7E7984(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      (*(void (**)(_QWORD *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *, uint64_t))(*(_QWORD *)a2 + 296))(v71, a2, (char *)this + 8, (uint64_t)v21 + 72);
      if (v71[1])
        *((_DWORD *)this + 51) = *(_DWORD *)sub_20BF7D934((pxrInternal__aapl__pxrReserved__::VtValue *)v71);
      v22 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      if (!v22)
        v22 = sub_20C7E7984(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      (*(void (**)(_QWORD *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *, uint64_t))(*(_QWORD *)a2 + 296))(v70, a2, (char *)this + 8, (uint64_t)v22 + 80);
      if (v70[1])
        *((_BYTE *)this + 208) = *(_BYTE *)sub_20BFB0910((pxrInternal__aapl__pxrReserved__::VtValue *)v70);
      v23 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      if (!v23)
        v23 = sub_20C7E7984(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      (*(void (**)(_QWORD *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *, uint64_t))(*(_QWORD *)a2 + 296))(v69, a2, (char *)this + 8, (uint64_t)v23 + 88);
      if (v69[1])
        *((_DWORD *)this + 53) = *(_DWORD *)sub_20BF7D934((pxrInternal__aapl__pxrReserved__::VtValue *)v69);
      v24 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      if (!v24)
        v24 = sub_20C7E7984(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      (*(void (**)(_QWORD *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *, uint64_t))(*(_QWORD *)a2 + 296))(v68, a2, (char *)this + 8, (uint64_t)v24 + 96);
      if (v68[1])
        *((_DWORD *)this + 54) = *(_DWORD *)sub_20BFB1BA8((pxrInternal__aapl__pxrReserved__::VtValue *)v68);
      v25 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      if (!v25)
        v25 = sub_20C7E7984(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      (*(void (**)(_QWORD *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *, uint64_t))(*(_QWORD *)a2 + 296))(v67, a2, (char *)this + 8, (uint64_t)v25 + 104);
      if (v67[1])
        *((_DWORD *)this + 55) = *(_DWORD *)sub_20BF7D934((pxrInternal__aapl__pxrReserved__::VtValue *)v67);
      v26 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      if (!v26)
        v26 = sub_20C7E7984(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      (*(void (**)(_QWORD *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *, uint64_t))(*(_QWORD *)a2 + 296))(v66, a2, (char *)this + 8, (uint64_t)v26 + 112);
      if (v66[1])
        *((_DWORD *)this + 56) = *(_DWORD *)sub_20BF7D934((pxrInternal__aapl__pxrReserved__::VtValue *)v66);
      v27 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      if (!v27)
        v27 = sub_20C7E7984(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      (*(void (**)(_QWORD *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *, uint64_t))(*(_QWORD *)a2 + 296))(v65, a2, (char *)this + 8, (uint64_t)v27 + 120);
      if (v65[1])
        *((_DWORD *)this + 57) = *(_DWORD *)sub_20BF7D934((pxrInternal__aapl__pxrReserved__::VtValue *)v65);
      v28 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      if (!v28)
        v28 = sub_20C7E7984(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      (*(void (**)(_QWORD *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *, uint64_t))(*(_QWORD *)a2 + 296))(v64, a2, (char *)this + 8, (uint64_t)v28 + 128);
      if (v64[1])
        *((_DWORD *)this + 58) = *(_DWORD *)sub_20BF7D934((pxrInternal__aapl__pxrReserved__::VtValue *)v64);
      v29 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      if (!v29)
        v29 = sub_20C7E7984(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      (*(void (**)(_QWORD *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *, uint64_t))(*(_QWORD *)a2 + 296))(v63, a2, (char *)this + 8, (uint64_t)v29 + 136);
      if (v63[1])
        *((_DWORD *)this + 59) = *(_DWORD *)sub_20BF7D934((pxrInternal__aapl__pxrReserved__::VtValue *)v63);
      v30 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      if (!v30)
        v30 = sub_20C7E7984(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      (*(void (**)(_QWORD *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *, uint64_t))(*(_QWORD *)a2 + 296))(v62, a2, (char *)this + 8, (uint64_t)v30 + 144);
      if (v62[1])
        *((_DWORD *)this + 60) = *(_DWORD *)sub_20BF7D934((pxrInternal__aapl__pxrReserved__::VtValue *)v62);
      v31 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      if (!v31)
        v31 = sub_20C7E7984(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      (*(void (**)(_QWORD *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *, uint64_t))(*(_QWORD *)a2 + 296))(v61, a2, (char *)this + 8, (uint64_t)v31 + 152);
      if (v61[1])
        *((_DWORD *)this + 61) = *(_DWORD *)sub_20BF7D934((pxrInternal__aapl__pxrReserved__::VtValue *)v61);
      v32 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      if (!v32)
        v32 = sub_20C7E7984(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      (*(void (**)(_QWORD *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *, uint64_t))(*(_QWORD *)a2 + 296))(v60, a2, (char *)this + 8, (uint64_t)v32 + 160);
      if (v60[1])
        *((_QWORD *)this + 31) = *(_QWORD *)sub_20BF78F24((pxrInternal__aapl__pxrReserved__::VtValue *)v60);
      v33 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      if (!v33)
        v33 = sub_20C7E7984(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      (*(void (**)(_QWORD *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *, uint64_t))(*(_QWORD *)a2 + 296))(v59, a2, (char *)this + 8, (uint64_t)v33 + 168);
      if (v59[1])
        *((_QWORD *)this + 32) = *(_QWORD *)sub_20BF78F24((pxrInternal__aapl__pxrReserved__::VtValue *)v59);
      v34 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      if (!v34)
        v34 = sub_20C7E7984(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      (*(void (**)(_QWORD *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *, uint64_t))(*(_QWORD *)a2 + 296))(v58, a2, (char *)this + 8, (uint64_t)v34 + 176);
      if (v58[1])
        *((_DWORD *)this + 66) = *(_DWORD *)sub_20BF7D934((pxrInternal__aapl__pxrReserved__::VtValue *)v58);
      v35 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      if (!v35)
        v35 = sub_20C7E7984(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      (*(void (**)(_QWORD *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *, uint64_t))(*(_QWORD *)a2 + 296))(v57, a2, (char *)this + 8, (uint64_t)v35 + 208);
      if (v57[1])
      {
        v36 = (_QWORD *)sub_20BFB46E8((pxrInternal__aapl__pxrReserved__::VtValue *)v57);
        sub_20BF32220((_QWORD *)this + 34, v36);
      }
      v37 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      if (!v37)
        v37 = sub_20C7E7984(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      (*(void (**)(_QWORD *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *, uint64_t))(*(_QWORD *)a2 + 296))(v56, a2, (char *)this + 8, (uint64_t)v37 + 216);
      if (v56[1])
        *((_DWORD *)this + 70) = *(_DWORD *)sub_20BF7D934((pxrInternal__aapl__pxrReserved__::VtValue *)v56);
      v38 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      if (!v38)
        v38 = sub_20C7E7984(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      (*(void (**)(_QWORD *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *, uint64_t))(*(_QWORD *)a2 + 296))(v55, a2, (char *)this + 8, (uint64_t)v38 + 224);
      if (v55[1])
        *((_DWORD *)this + 71) = *(_DWORD *)sub_20BF7D934((pxrInternal__aapl__pxrReserved__::VtValue *)v55);
      v39 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      if (!v39)
        v39 = sub_20C7E7984(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      (*(void (**)(_QWORD *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *, uint64_t))(*(_QWORD *)a2 + 296))(v54, a2, (char *)this + 8, (uint64_t)v39 + 232);
      if (v54[1])
        *((_QWORD *)this + 36) = *(_QWORD *)sub_20BF9D9F0((pxrInternal__aapl__pxrReserved__::VtValue *)v54);
      v40 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      if (!v40)
        v40 = sub_20C7E7984(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      (*(void (**)(_QWORD *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *, uint64_t))(*(_QWORD *)a2 + 296))(v53, a2, (char *)this + 8, (uint64_t)v40 + 240);
      if (v53[1])
        *((_DWORD *)this + 74) = *(_DWORD *)sub_20BF7D934((pxrInternal__aapl__pxrReserved__::VtValue *)v53);
      v41 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      if (!v41)
        v41 = sub_20C7E7984(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      (*(void (**)(_QWORD *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *, uint64_t))(*(_QWORD *)a2 + 296))(v52, a2, (char *)this + 8, (uint64_t)v41 + 248);
      if (v52[1])
        *(_QWORD *)((char *)this + 300) = *(_QWORD *)sub_20BF9D9F0((pxrInternal__aapl__pxrReserved__::VtValue *)v52);
      v42 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      if (!v42)
        v42 = sub_20C7E7984(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      (*(void (**)(_QWORD *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *, uint64_t))(*(_QWORD *)a2 + 296))(v51, a2, (char *)this + 8, (uint64_t)v42 + 256);
      if (v51[1])
        *((_DWORD *)this + 77) = *(_DWORD *)sub_20BF7D934((pxrInternal__aapl__pxrReserved__::VtValue *)v51);
      v43 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      if (!v43)
        v43 = sub_20C7E7984(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      (*(void (**)(_QWORD *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *, uint64_t))(*(_QWORD *)a2 + 296))(v50, a2, (char *)this + 8, (uint64_t)v43 + 264);
      if (v50[1])
        *((_DWORD *)this + 78) = *(_DWORD *)sub_20BF7D934((pxrInternal__aapl__pxrReserved__::VtValue *)v50);
      sub_20BF4C2D8((uint64_t)v50);
      sub_20BF4C2D8((uint64_t)v51);
      sub_20BF4C2D8((uint64_t)v52);
      sub_20BF4C2D8((uint64_t)v53);
      sub_20BF4C2D8((uint64_t)v54);
      sub_20BF4C2D8((uint64_t)v55);
      sub_20BF4C2D8((uint64_t)v56);
      sub_20BF4C2D8((uint64_t)v57);
      sub_20BF4C2D8((uint64_t)v58);
      sub_20BF4C2D8((uint64_t)v59);
      sub_20BF4C2D8((uint64_t)v60);
      sub_20BF4C2D8((uint64_t)v61);
      sub_20BF4C2D8((uint64_t)v62);
      sub_20BF4C2D8((uint64_t)v63);
      sub_20BF4C2D8((uint64_t)v64);
      sub_20BF4C2D8((uint64_t)v65);
      sub_20BF4C2D8((uint64_t)v66);
      sub_20BF4C2D8((uint64_t)v67);
      sub_20BF4C2D8((uint64_t)v68);
      sub_20BF4C2D8((uint64_t)v69);
      sub_20BF4C2D8((uint64_t)v70);
      sub_20BF4C2D8((uint64_t)v71);
      sub_20BF4C2D8((uint64_t)v72);
      sub_20BF4C2D8((uint64_t)v73);
      sub_20BF4C2D8((uint64_t)v74);
      sub_20BF4C2D8((uint64_t)v75);
      sub_20BF4C2D8((uint64_t)v76);
      sub_20BF4C2D8((uint64_t)v77);
      sub_20BF4C2D8((uint64_t)v78);
      result = sub_20BF4C2D8((uint64_t)&v79);
    }
    if ((v8 & 8) != 0)
    {
      v44 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      if (!v44)
        v44 = sub_20C7E7984(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      (*(void (**)(__int128 *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *, uint64_t))(*(_QWORD *)a2 + 296))(&v79, a2, (char *)this + 8, (uint64_t)v44 + 184);
      if (*((_QWORD *)&v79 + 1))
        *((_DWORD *)this + 79) = *(_DWORD *)sub_20C7E76C4((pxrInternal__aapl__pxrReserved__::VtValue *)&v79);
      result = sub_20BF4C2D8((uint64_t)&v79);
    }
    if ((v8 & 4) != 0)
    {
      v45 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      if (!v45)
        v45 = sub_20C7E7984(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
      (*(void (**)(__int128 *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *, uint64_t))(*(_QWORD *)a2 + 296))(&v79, a2, (char *)this + 8, (uint64_t)v45 + 56);
      if (*((_QWORD *)&v79 + 1))
      {
        v46 = sub_20C7E772C((pxrInternal__aapl__pxrReserved__::VtValue *)&v79);
        if ((pxrInternal__aapl__pxrReserved__::HdCamera *)((char *)this + 176) != (pxrInternal__aapl__pxrReserved__::HdCamera *)v46)
          sub_20C2B2718((char *)this + 176, *(char **)v46, *(_QWORD *)(v46 + 8), (uint64_t)(*(_QWORD *)(v46 + 8) - *(_QWORD *)v46) >> 5);
      }
      result = sub_20BF4C2D8((uint64_t)&v79);
    }
    *a4 = 0;
  }
  while (v49--)
    result = pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v48);
  return result;
}

void sub_20C7E7358(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEB24F4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C7E75F4(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;
  uint64_t result;

  if ((sub_20C7E7A0C(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_20C7E7A84, (uint64_t)&stru_24C54C040);
  v2 = *((_QWORD *)a1 + 1);
  result = (uint64_t)a1;
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  return result;
}

uint64_t sub_20C7E765C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;
  uint64_t result;

  if ((sub_20C7E7AD0(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_20C7E7B08, (uint64_t)&stru_24C51C060);
  v2 = *((_QWORD *)a1 + 1);
  result = (uint64_t)a1;
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  return result;
}

uint64_t sub_20C7E76C4(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;
  uint64_t result;

  if ((sub_20C7E7B5C(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_20C7E7BD4, (uint64_t)&stru_24C54BAD8);
  v2 = *((_QWORD *)a1 + 1);
  result = (uint64_t)a1;
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  return result;
}

uint64_t sub_20C7E772C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_20C7E7C20(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_20C7E7C98, (uint64_t)&stru_24C54C050);
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

void pxrInternal__aapl__pxrReserved__::HdCamera::ComputeProjectionMatrix(pxrInternal__aapl__pxrReserved__::HdCamera *this@<X0>, uint64_t a2@<X8>)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  void *__p;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13[8];
  _BYTE v14[160];
  void *v15;
  void *v16;

  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)v13, 1.0);
  v12 = 0x497424003F800000;
  __p = 0;
  v10 = 0;
  v11 = 0;
  pxrInternal__aapl__pxrReserved__::GfCamera::GfCamera((uint64_t)v14, v13, 0, &v12, (uint64_t)&__p, 20.955, 15.2908, 0.0, 0.0, 50.0, 0.0, 0.0);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
  LODWORD(v13[0]) = *((_DWORD *)this + 36) == 1;
  pxrInternal__aapl__pxrReserved__::GfCamera::SetProjection((uint64_t)v14, v13);
  v4 = *((float *)this + 37) / 0.1;
  pxrInternal__aapl__pxrReserved__::GfCamera::SetHorizontalAperture((uint64_t)v14, v4);
  v5 = *((float *)this + 38) / 0.1;
  pxrInternal__aapl__pxrReserved__::GfCamera::SetVerticalAperture((uint64_t)v14, v5);
  v6 = *((float *)this + 39) / 0.1;
  pxrInternal__aapl__pxrReserved__::GfCamera::SetHorizontalApertureOffset((uint64_t)v14, v6);
  v7 = *((float *)this + 40) / 0.1;
  pxrInternal__aapl__pxrReserved__::GfCamera::SetVerticalApertureOffset((uint64_t)v14, v7);
  v8 = *((float *)this + 41) / 0.1;
  pxrInternal__aapl__pxrReserved__::GfCamera::SetFocalLength((uint64_t)v14, v8);
  pxrInternal__aapl__pxrReserved__::GfCamera::SetClippingRange((uint64_t)v14, (_QWORD *)this + 21);
  pxrInternal__aapl__pxrReserved__::GfCamera::GetFrustum((pxrInternal__aapl__pxrReserved__::GfCamera *)v14, (uint64_t)v13);
  pxrInternal__aapl__pxrReserved__::GfFrustum::ComputeProjectionMatrix((pxrInternal__aapl__pxrReserved__::GfFrustum *)v13, a2);
  pxrInternal__aapl__pxrReserved__::GfFrustum::~GfFrustum((pxrInternal__aapl__pxrReserved__::GfFrustum *)v13);
  if (v15)
  {
    v16 = v15;
    operator delete(v15);
  }
}

void sub_20C7E7934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50)
{
  pxrInternal__aapl__pxrReserved__::GfFrustum::~GfFrustum((pxrInternal__aapl__pxrReserved__::GfFrustum *)&a13);
  if (__p)
  {
    a50 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdCamera::GetInitialDirtyBitsMask(pxrInternal__aapl__pxrReserved__::HdCamera *this)
{
  return 15;
}

pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *sub_20C7E7984(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *result;
  void *v4;

  result = sub_20C7E79CC();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType::~HdCameraTokens_StaticTokenType(result);
    operator delete(v4);
  }
  return (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load(a1);
}

pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *sub_20C7E79CC()
{
  pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *v0;

  v0 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)operator new(0x128uLL);
  pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType::HdCameraTokens_StaticTokenType(v0);
  return v0;
}

void sub_20C7E79F8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C7E7A0C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000020CB0CF82 & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C54C040);
}

_DWORD *sub_20C7E7A84@<X0>(_QWORD *a1@<X8>)
{
  _DWORD *result;

  result = operator new(4uLL);
  *result = 0;
  *a1 = result;
  a1[1] = sub_20C7E7AC4;
  a1[2] = &stru_24C54C040;
  return result;
}

void sub_20C7E7AC4(void *__p)
{
  if (__p)
    operator delete(__p);
}

uint64_t sub_20C7E7AD0(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 83)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C51C060);
  else
    return 0;
}

double sub_20C7E7B08@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  v2 = operator new(8uLL);
  result = -1.40444743e306;
  *v2 = 0xFF7FFFFF7F7FFFFFLL;
  *a1 = v2;
  a1[1] = sub_20C7E7B50;
  a1[2] = &stru_24C51C060;
  return result;
}

void sub_20C7E7B50(void *__p)
{
  if (__p)
    operator delete(__p);
}

uint64_t sub_20C7E7B5C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000020CB12A5ELL & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C54BAD8);
}

_DWORD *sub_20C7E7BD4@<X0>(_QWORD *a1@<X8>)
{
  _DWORD *result;

  result = operator new(4uLL);
  *result = 0;
  *a1 = result;
  a1[1] = sub_20C7E7C14;
  a1[2] = &stru_24C54BAD8;
  return result;
}

void sub_20C7E7C14(void *__p)
{
  if (__p)
    operator delete(__p);
}

uint64_t sub_20C7E7C20(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000020CB12D7CLL & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C54C050);
}

_QWORD *sub_20C7E7C98@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = operator new(0x18uLL);
  result[1] = 0;
  result[2] = 0;
  *result = 0;
  *a1 = result;
  a1[1] = sub_20C7E7CDC;
  a1[2] = &stru_24C54C050;
  return result;
}

void sub_20C7E7CDC(void **__p)
{
  void *v2;

  if (__p)
  {
    v2 = *__p;
    if (v2)
    {
      __p[1] = v2;
      operator delete(v2);
    }
    operator delete(__p);
  }
}

void pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType::~HdCameraSchemaTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int *v59;
  unsigned int v60;
  void **v61;

  v61 = (void **)((char *)this + 160);
  sub_20BEEB2B8(&v61);
  v2 = *((_QWORD *)this + 19);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *((_QWORD *)this + 18);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v8 = *((_QWORD *)this + 17);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  v11 = *((_QWORD *)this + 16);
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  v14 = *((_QWORD *)this + 15);
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  v17 = *((_QWORD *)this + 14);
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  v20 = *((_QWORD *)this + 13);
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  v23 = *((_QWORD *)this + 12);
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  v26 = *((_QWORD *)this + 11);
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  v29 = *((_QWORD *)this + 10);
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  v32 = *((_QWORD *)this + 9);
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stlxr(v34 - 2, v33));
  }
  v35 = *((_QWORD *)this + 8);
  if ((v35 & 7) != 0)
  {
    v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stlxr(v37 - 2, v36));
  }
  v38 = *((_QWORD *)this + 7);
  if ((v38 & 7) != 0)
  {
    v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stlxr(v40 - 2, v39));
  }
  v41 = *((_QWORD *)this + 6);
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stlxr(v43 - 2, v42));
  }
  v44 = *((_QWORD *)this + 5);
  if ((v44 & 7) != 0)
  {
    v45 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stlxr(v46 - 2, v45));
  }
  v47 = *((_QWORD *)this + 4);
  if ((v47 & 7) != 0)
  {
    v48 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stlxr(v49 - 2, v48));
  }
  v50 = *((_QWORD *)this + 3);
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stlxr(v52 - 2, v51));
  }
  v53 = *((_QWORD *)this + 2);
  if ((v53 & 7) != 0)
  {
    v54 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFF8);
    do
      v55 = __ldxr(v54);
    while (__stlxr(v55 - 2, v54));
  }
  v56 = *((_QWORD *)this + 1);
  if ((v56 & 7) != 0)
  {
    v57 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
    do
      v58 = __ldxr(v57);
    while (__stlxr(v58 - 2, v57));
  }
  if ((*(_QWORD *)this & 7) != 0)
  {
    v59 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v60 = __ldxr(v59);
    while (__stlxr(v60 - 2, v59));
  }
}

pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType::HdCameraSchemaTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int *v65;
  unsigned int v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int *v70;
  unsigned int v71;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;

  v94 = *MEMORY[0x24BDAC8D0];
  v73 = (uint64_t *)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "camera", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v73, "projection", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 16, "horizontalAperture", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 24, "verticalAperture", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 32, "horizontalApertureOffset", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 40, "verticalApertureOffset", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 48, "focalLength", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 56, "clippingRange", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 64, "clippingPlanes", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 72, "fStop", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 80, "focusDistance", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 88, "shutterOpen", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 96, "shutterClose", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 104, "exposure", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 112, "focusOn", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 120, "dofAspect", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 128, "splitDiopter", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 136, "lensDistortion", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 144, "perspective", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 152, "orthographic", 0);
  v2 = *(_QWORD *)this;
  v74 = v2;
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) == 0)
      v74 &= 0xFFFFFFFFFFFFFFF8;
  }
  v5 = *v73;
  v75 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v75 &= 0xFFFFFFFFFFFFFFF8;
  }
  v8 = *((_QWORD *)this + 2);
  v76 = v8;
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v76 &= 0xFFFFFFFFFFFFFFF8;
  }
  v11 = *((_QWORD *)this + 3);
  v77 = v11;
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 2, v12));
    if ((v13 & 1) == 0)
      v77 &= 0xFFFFFFFFFFFFFFF8;
  }
  v14 = *((_QWORD *)this + 4);
  v78 = v14;
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 2, v15));
    if ((v16 & 1) == 0)
      v78 &= 0xFFFFFFFFFFFFFFF8;
  }
  v17 = *((_QWORD *)this + 5);
  v79 = v17;
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 2, v18));
    if ((v19 & 1) == 0)
      v79 &= 0xFFFFFFFFFFFFFFF8;
  }
  v20 = *((_QWORD *)this + 6);
  v80 = v20;
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 2, v21));
    if ((v22 & 1) == 0)
      v80 &= 0xFFFFFFFFFFFFFFF8;
  }
  v23 = *((_QWORD *)this + 7);
  v81 = v23;
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 2, v24));
    if ((v25 & 1) == 0)
      v81 &= 0xFFFFFFFFFFFFFFF8;
  }
  v26 = *((_QWORD *)this + 8);
  v82 = v26;
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 2, v27));
    if ((v28 & 1) == 0)
      v82 &= 0xFFFFFFFFFFFFFFF8;
  }
  v29 = *((_QWORD *)this + 9);
  v83 = v29;
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 2, v30));
    if ((v31 & 1) == 0)
      v83 &= 0xFFFFFFFFFFFFFFF8;
  }
  v32 = *((_QWORD *)this + 10);
  v84 = v32;
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 2, v33));
    if ((v34 & 1) == 0)
      v84 &= 0xFFFFFFFFFFFFFFF8;
  }
  v35 = *((_QWORD *)this + 11);
  v85 = v35;
  if ((v35 & 7) != 0)
  {
    v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 2, v36));
    if ((v37 & 1) == 0)
      v85 &= 0xFFFFFFFFFFFFFFF8;
  }
  v38 = *((_QWORD *)this + 12);
  v86 = v38;
  if ((v38 & 7) != 0)
  {
    v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 2, v39));
    if ((v40 & 1) == 0)
      v86 &= 0xFFFFFFFFFFFFFFF8;
  }
  v41 = *((_QWORD *)this + 13);
  v87 = v41;
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 2, v42));
    if ((v43 & 1) == 0)
      v87 &= 0xFFFFFFFFFFFFFFF8;
  }
  v44 = *((_QWORD *)this + 14);
  v88 = v44;
  if ((v44 & 7) != 0)
  {
    v45 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 2, v45));
    if ((v46 & 1) == 0)
      v88 &= 0xFFFFFFFFFFFFFFF8;
  }
  v47 = *((_QWORD *)this + 15);
  v89 = v47;
  if ((v47 & 7) != 0)
  {
    v48 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 2, v48));
    if ((v49 & 1) == 0)
      v89 &= 0xFFFFFFFFFFFFFFF8;
  }
  v50 = *((_QWORD *)this + 16);
  v90 = v50;
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 2, v51));
    if ((v52 & 1) == 0)
      v90 &= 0xFFFFFFFFFFFFFFF8;
  }
  v53 = *((_QWORD *)this + 17);
  v91 = v53;
  if ((v53 & 7) != 0)
  {
    v54 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFF8);
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 2, v54));
    if ((v55 & 1) == 0)
      v91 &= 0xFFFFFFFFFFFFFFF8;
  }
  v56 = *((_QWORD *)this + 18);
  v92 = v56;
  if ((v56 & 7) != 0)
  {
    v57 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
    do
      v58 = __ldxr(v57);
    while (__stxr(v58 + 2, v57));
    if ((v58 & 1) == 0)
      v92 &= 0xFFFFFFFFFFFFFFF8;
  }
  v59 = *((_QWORD *)this + 19);
  v93 = v59;
  if ((v59 & 7) != 0)
  {
    v60 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFFFF8);
    do
      v61 = __ldxr(v60);
    while (__stxr(v61 + 2, v60));
    if ((v61 & 1) == 0)
      v93 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  v62 = operator new(0xA0uLL);
  v63 = 0;
  *((_QWORD *)this + 20) = v62;
  *((_QWORD *)this + 21) = v62;
  *((_QWORD *)this + 22) = v62 + 20;
  do
  {
    v64 = *(&v74 + v63);
    *v62 = v64;
    if ((v64 & 7) != 0)
    {
      v65 = (unsigned int *)(v64 & 0xFFFFFFFFFFFFFFF8);
      do
        v66 = __ldxr(v65);
      while (__stxr(v66 + 2, v65));
      if ((v66 & 1) == 0)
        *v62 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v63;
    ++v62;
  }
  while (v63 != 20);
  v67 = &v94;
  *((_QWORD *)this + 21) = v62;
  do
  {
    v69 = *--v67;
    v68 = v69;
    if ((v69 & 7) != 0)
    {
      v70 = (unsigned int *)(v68 & 0xFFFFFFFFFFFFFFF8);
      do
        v71 = __ldxr(v70);
      while (__stlxr(v71 - 2, v70));
    }
  }
  while (v67 != &v74);
  return this;
}

void sub_20C7E86FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, _QWORD *a11, _QWORD *a12, _QWORD *a13, _QWORD *a14, _QWORD *a15, _QWORD *a16, _QWORD *a17, _QWORD *a18, _QWORD *a19, _QWORD *a20,void **a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int *v88;
  unsigned int v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int *v92;
  unsigned int v93;
  unsigned int *v94;
  unsigned int v95;
  unsigned int *v96;
  unsigned int v97;

  sub_20BEEB2B8(&a21);
  v53 = (char *)&a43;
  while (1)
  {
    v55 = *((_QWORD *)v53 - 1);
    v53 -= 8;
    v54 = v55;
    if ((v55 & 7) != 0)
    {
      v56 = (unsigned int *)(v54 & 0xFFFFFFFFFFFFFFF8);
      do
        v57 = __ldxr(v56);
      while (__stlxr(v57 - 2, v56));
    }
    if (v53 == &a23)
    {
      if ((*v44 & 7) != 0)
      {
        v58 = (unsigned int *)(*v44 & 0xFFFFFFFFFFFFFFF8);
        do
          v59 = __ldxr(v58);
        while (__stlxr(v59 - 2, v58));
      }
      if ((*v52 & 7) != 0)
      {
        v60 = (unsigned int *)(*v52 & 0xFFFFFFFFFFFFFFF8);
        do
          v61 = __ldxr(v60);
        while (__stlxr(v61 - 2, v60));
      }
      if ((*v51 & 7) != 0)
      {
        v62 = (unsigned int *)(*v51 & 0xFFFFFFFFFFFFFFF8);
        do
          v63 = __ldxr(v62);
        while (__stlxr(v63 - 2, v62));
      }
      if ((*v50 & 7) != 0)
      {
        v64 = (unsigned int *)(*v50 & 0xFFFFFFFFFFFFFFF8);
        do
          v65 = __ldxr(v64);
        while (__stlxr(v65 - 2, v64));
      }
      if ((*v49 & 7) != 0)
      {
        v66 = (unsigned int *)(*v49 & 0xFFFFFFFFFFFFFFF8);
        do
          v67 = __ldxr(v66);
        while (__stlxr(v67 - 2, v66));
      }
      if ((*v48 & 7) != 0)
      {
        v68 = (unsigned int *)(*v48 & 0xFFFFFFFFFFFFFFF8);
        do
          v69 = __ldxr(v68);
        while (__stlxr(v69 - 2, v68));
      }
      if ((*v47 & 7) != 0)
      {
        v70 = (unsigned int *)(*v47 & 0xFFFFFFFFFFFFFFF8);
        do
          v71 = __ldxr(v70);
        while (__stlxr(v71 - 2, v70));
      }
      if ((*v46 & 7) != 0)
      {
        v72 = (unsigned int *)(*v46 & 0xFFFFFFFFFFFFFFF8);
        do
          v73 = __ldxr(v72);
        while (__stlxr(v73 - 2, v72));
      }
      if ((*v45 & 7) != 0)
      {
        v74 = (unsigned int *)(*v45 & 0xFFFFFFFFFFFFFFF8);
        do
          v75 = __ldxr(v74);
        while (__stlxr(v75 - 2, v74));
      }
      if ((*a11 & 7) != 0)
      {
        v76 = (unsigned int *)(*a11 & 0xFFFFFFFFFFFFFFF8);
        do
          v77 = __ldxr(v76);
        while (__stlxr(v77 - 2, v76));
      }
      if ((*a12 & 7) != 0)
      {
        v78 = (unsigned int *)(*a12 & 0xFFFFFFFFFFFFFFF8);
        do
          v79 = __ldxr(v78);
        while (__stlxr(v79 - 2, v78));
      }
      if ((*a13 & 7) != 0)
      {
        v80 = (unsigned int *)(*a13 & 0xFFFFFFFFFFFFFFF8);
        do
          v81 = __ldxr(v80);
        while (__stlxr(v81 - 2, v80));
      }
      if ((*a14 & 7) != 0)
      {
        v82 = (unsigned int *)(*a14 & 0xFFFFFFFFFFFFFFF8);
        do
          v83 = __ldxr(v82);
        while (__stlxr(v83 - 2, v82));
      }
      if ((*a15 & 7) != 0)
      {
        v84 = (unsigned int *)(*a15 & 0xFFFFFFFFFFFFFFF8);
        do
          v85 = __ldxr(v84);
        while (__stlxr(v85 - 2, v84));
      }
      if ((*a16 & 7) != 0)
      {
        v86 = (unsigned int *)(*a16 & 0xFFFFFFFFFFFFFFF8);
        do
          v87 = __ldxr(v86);
        while (__stlxr(v87 - 2, v86));
      }
      if ((*a17 & 7) != 0)
      {
        v88 = (unsigned int *)(*a17 & 0xFFFFFFFFFFFFFFF8);
        do
          v89 = __ldxr(v88);
        while (__stlxr(v89 - 2, v88));
      }
      if ((*a18 & 7) != 0)
      {
        v90 = (unsigned int *)(*a18 & 0xFFFFFFFFFFFFFFF8);
        do
          v91 = __ldxr(v90);
        while (__stlxr(v91 - 2, v90));
      }
      if ((*a19 & 7) != 0)
      {
        v92 = (unsigned int *)(*a19 & 0xFFFFFFFFFFFFFFF8);
        do
          v93 = __ldxr(v92);
        while (__stlxr(v93 - 2, v92));
      }
      if ((*a20 & 7) != 0)
      {
        v94 = (unsigned int *)(*a20 & 0xFFFFFFFFFFFFFFF8);
        do
          v95 = __ldxr(v94);
        while (__stlxr(v95 - 2, v94));
      }
      if ((*v43 & 7) != 0)
      {
        v96 = (unsigned int *)(*v43 & 0xFFFFFFFFFFFFFFF8);
        do
          v97 = __ldxr(v96);
        while (__stlxr(v97 - 2, v96));
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_20C7E8A28()
{
  JUMPOUT(0x20C7E8898);
}

void sub_20C7E8A30()
{
  JUMPOUT(0x20C7E88BCLL);
}

void sub_20C7E8A38()
{
  JUMPOUT(0x20C7E88E0);
}

void sub_20C7E8A40()
{
  JUMPOUT(0x20C7E8904);
}

void sub_20C7E8A48()
{
  JUMPOUT(0x20C7E8928);
}

void sub_20C7E8A50()
{
  JUMPOUT(0x20C7E894CLL);
}

void sub_20C7E8A58()
{
  JUMPOUT(0x20C7E8970);
}

void sub_20C7E8A60()
{
  JUMPOUT(0x20C7E8994);
}

void sub_20C7E8A68()
{
  JUMPOUT(0x20C7E89B8);
}

void sub_20C7E8A70()
{
  JUMPOUT(0x20C7E89DCLL);
}

void sub_20C7E8A78()
{
  JUMPOUT(0x20C7E8A00);
}

void pxrInternal__aapl__pxrReserved__::HdCameraSchema::GetProjection(pxrInternal__aapl__pxrReserved__::HdCameraSchema *this@<X0>, _QWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;

  v4 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  if (!v4)
    v4 = sub_20C7EAA68(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  v5 = (unsigned int *)*((_QWORD *)v4 + 1);
  v10 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v10 = v6;
  }
  sub_20C7E28BC((uint64_t *)this, a2);
  if ((v10 & 7) != 0)
  {
    v8 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
}

void pxrInternal__aapl__pxrReserved__::HdCameraSchema::GetHorizontalAperture(pxrInternal__aapl__pxrReserved__::HdCameraSchema *this@<X0>, _QWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;

  v4 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  if (!v4)
    v4 = sub_20C7EAA68(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  v5 = (unsigned int *)*((_QWORD *)v4 + 2);
  v10 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v10 = v6;
  }
  sub_20C7E8C14((uint64_t *)this, a2);
  if ((v10 & 7) != 0)
  {
    v8 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
}

void sub_20C7E8C14(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  v3 = *a1;
  if (v3)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v3 + 24))(&v7);
    sub_20C7EAAF0((uint64_t)&v7, a2);
    v4 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

void pxrInternal__aapl__pxrReserved__::HdCameraSchema::GetVerticalAperture(pxrInternal__aapl__pxrReserved__::HdCameraSchema *this@<X0>, _QWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;

  v4 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  if (!v4)
    v4 = sub_20C7EAA68(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  v5 = (unsigned int *)*((_QWORD *)v4 + 3);
  v10 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v10 = v6;
  }
  sub_20C7E8C14((uint64_t *)this, a2);
  if ((v10 & 7) != 0)
  {
    v8 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
}

void pxrInternal__aapl__pxrReserved__::HdCameraSchema::GetHorizontalApertureOffset(pxrInternal__aapl__pxrReserved__::HdCameraSchema *this@<X0>, _QWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;

  v4 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  if (!v4)
    v4 = sub_20C7EAA68(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  v5 = (unsigned int *)*((_QWORD *)v4 + 4);
  v10 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v10 = v6;
  }
  sub_20C7E8C14((uint64_t *)this, a2);
  if ((v10 & 7) != 0)
  {
    v8 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
}

void pxrInternal__aapl__pxrReserved__::HdCameraSchema::GetVerticalApertureOffset(pxrInternal__aapl__pxrReserved__::HdCameraSchema *this@<X0>, _QWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;

  v4 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  if (!v4)
    v4 = sub_20C7EAA68(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  v5 = (unsigned int *)*((_QWORD *)v4 + 5);
  v10 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v10 = v6;
  }
  sub_20C7E8C14((uint64_t *)this, a2);
  if ((v10 & 7) != 0)
  {
    v8 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
}

void pxrInternal__aapl__pxrReserved__::HdCameraSchema::GetFocalLength(pxrInternal__aapl__pxrReserved__::HdCameraSchema *this@<X0>, _QWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;

  v4 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  if (!v4)
    v4 = sub_20C7EAA68(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  v5 = (unsigned int *)*((_QWORD *)v4 + 6);
  v10 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v10 = v6;
  }
  sub_20C7E8C14((uint64_t *)this, a2);
  if ((v10 & 7) != 0)
  {
    v8 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
}

void pxrInternal__aapl__pxrReserved__::HdCameraSchema::GetClippingRange(pxrInternal__aapl__pxrReserved__::HdCameraSchema *this@<X0>, _QWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;

  v4 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  if (!v4)
    v4 = sub_20C7EAA68(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  v5 = (unsigned int *)*((_QWORD *)v4 + 7);
  v10 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v10 = v6;
  }
  sub_20C7E9084((uint64_t *)this, a2);
  if ((v10 & 7) != 0)
  {
    v8 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
}

void sub_20C7E9084(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  v3 = *a1;
  if (v3)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v3 + 24))(&v7);
    sub_20C7EAB5C((uint64_t)&v7, a2);
    v4 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

void pxrInternal__aapl__pxrReserved__::HdCameraSchema::GetClippingPlanes(pxrInternal__aapl__pxrReserved__::HdCameraSchema *this@<X0>, _QWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;

  v4 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  if (!v4)
    v4 = sub_20C7EAA68(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  v5 = (unsigned int *)*((_QWORD *)v4 + 8);
  v10 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v10 = v6;
  }
  sub_20C7E91D4((uint64_t *)this, a2);
  if ((v10 & 7) != 0)
  {
    v8 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
}

void sub_20C7E91D4(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  v3 = *a1;
  if (v3)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v3 + 24))(&v7);
    sub_20C7EABC8((uint64_t)&v7, a2);
    v4 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

void pxrInternal__aapl__pxrReserved__::HdCameraSchema::GetFStop(pxrInternal__aapl__pxrReserved__::HdCameraSchema *this@<X0>, _QWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;

  v4 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  if (!v4)
    v4 = sub_20C7EAA68(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  v5 = (unsigned int *)*((_QWORD *)v4 + 9);
  v10 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v10 = v6;
  }
  sub_20C7E8C14((uint64_t *)this, a2);
  if ((v10 & 7) != 0)
  {
    v8 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
}

void pxrInternal__aapl__pxrReserved__::HdCameraSchema::GetFocusDistance(pxrInternal__aapl__pxrReserved__::HdCameraSchema *this@<X0>, _QWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;

  v4 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  if (!v4)
    v4 = sub_20C7EAA68(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  v5 = (unsigned int *)*((_QWORD *)v4 + 10);
  v10 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v10 = v6;
  }
  sub_20C7E8C14((uint64_t *)this, a2);
  if ((v10 & 7) != 0)
  {
    v8 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
}

void pxrInternal__aapl__pxrReserved__::HdCameraSchema::GetShutterOpen(pxrInternal__aapl__pxrReserved__::HdCameraSchema *this@<X0>, _QWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;

  v4 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  if (!v4)
    v4 = sub_20C7EAA68(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  v5 = (unsigned int *)*((_QWORD *)v4 + 11);
  v10 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v10 = v6;
  }
  sub_20C7E94B4((uint64_t *)this, a2);
  if ((v10 & 7) != 0)
  {
    v8 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
}

void sub_20C7E94B4(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  v3 = *a1;
  if (v3)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v3 + 24))(&v7);
    sub_20C7EAC34((uint64_t)&v7, a2);
    v4 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

void pxrInternal__aapl__pxrReserved__::HdCameraSchema::GetShutterClose(pxrInternal__aapl__pxrReserved__::HdCameraSchema *this@<X0>, _QWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;

  v4 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  if (!v4)
    v4 = sub_20C7EAA68(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  v5 = (unsigned int *)*((_QWORD *)v4 + 12);
  v10 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v10 = v6;
  }
  sub_20C7E94B4((uint64_t *)this, a2);
  if ((v10 & 7) != 0)
  {
    v8 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
}

void pxrInternal__aapl__pxrReserved__::HdCameraSchema::GetExposure(pxrInternal__aapl__pxrReserved__::HdCameraSchema *this@<X0>, _QWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;

  v4 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  if (!v4)
    v4 = sub_20C7EAA68(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  v5 = (unsigned int *)*((_QWORD *)v4 + 13);
  v10 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v10 = v6;
  }
  sub_20C7E8C14((uint64_t *)this, a2);
  if ((v10 & 7) != 0)
  {
    v8 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
}

void pxrInternal__aapl__pxrReserved__::HdCameraSchema::GetFocusOn(pxrInternal__aapl__pxrReserved__::HdCameraSchema *this@<X0>, _QWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;

  v4 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  if (!v4)
    v4 = sub_20C7EAA68(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  v5 = (unsigned int *)*((_QWORD *)v4 + 14);
  v10 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v10 = v6;
  }
  sub_20C7E9794((uint64_t *)this, a2);
  if ((v10 & 7) != 0)
  {
    v8 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
}

void sub_20C7E9794(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  v3 = *a1;
  if (v3)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v3 + 24))(&v7);
    sub_20C7EACA0((uint64_t)&v7, a2);
    v4 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

void pxrInternal__aapl__pxrReserved__::HdCameraSchema::GetDofAspect(pxrInternal__aapl__pxrReserved__::HdCameraSchema *this@<X0>, _QWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;

  v4 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  if (!v4)
    v4 = sub_20C7EAA68(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  v5 = (unsigned int *)*((_QWORD *)v4 + 15);
  v10 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v10 = v6;
  }
  sub_20C7E8C14((uint64_t *)this, a2);
  if ((v10 & 7) != 0)
  {
    v8 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
}

void pxrInternal__aapl__pxrReserved__::HdCameraSchema::GetSplitDiopter(pxrInternal__aapl__pxrReserved__::HdCameraSchema *this@<X0>, _QWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v4 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  if (!v4)
    v4 = sub_20C7EAA68(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  v5 = (unsigned int *)*((_QWORD *)v4 + 16);
  v13 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v13 = v6;
  }
  sub_20C7E0698((uint64_t *)this, &v14);
  sub_20C7E0E2C(a2, &v14);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if ((v13 & 7) != 0)
  {
    v11 = (unsigned int *)((unint64_t)v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
}

void sub_20C7E99CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  unsigned int *v4;
  unsigned int v5;
  va_list va;

  va_start(va, a3);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  if ((a3 & 7) != 0)
  {
    v4 = (unsigned int *)(a3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdCameraSchema::GetLensDistortion(pxrInternal__aapl__pxrReserved__::HdCameraSchema *this@<X0>, _QWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v4 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  if (!v4)
    v4 = sub_20C7EAA68(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  v5 = (unsigned int *)*((_QWORD *)v4 + 17);
  v13 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v13 = v6;
  }
  sub_20C7E0698((uint64_t *)this, &v14);
  sub_20C7E0E2C(a2, &v14);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if ((v13 & 7) != 0)
  {
    v11 = (unsigned int *)((unint64_t)v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
}

void pxrInternal__aapl__pxrReserved__::HdCameraSchema::BuildRetained(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, uint64_t *a7@<X6>, uint64_t *a8@<X7>, _OWORD *a9@<X8>, uint64_t *a10, uint64_t *a11, uint64_t *a12, uint64_t *a13, uint64_t *a14, uint64_t *a15, uint64_t *a16, uint64_t *a17, uint64_t *a18)
{
  _OWORD *v24;
  pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *v26;
  unint64_t v27;
  pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *v28;
  pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *v29;
  pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *v30;
  pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *v31;
  pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *v32;
  pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *v33;
  pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *v34;
  pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *v35;
  pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *v36;
  pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *v37;
  pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *v38;
  pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *v39;
  pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *v40;
  pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *v41;
  pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *v42;
  pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *v43;
  uint64_t i;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  __int128 v51;
  _OWORD v52[17];
  _OWORD v53[8];
  uint64_t v54;
  _QWORD v55[3];

  v55[1] = *MEMORY[0x24BDAC8D0];
  v54 = 0;
  memset(v53, 0, sizeof(v53));
  memset(v52, 0, sizeof(v52));
  v24 = v55;
  if (*a1)
  {
    v26 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    if (!v26)
      v26 = sub_20C7EAA68(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    sub_20BF32220(v53, (_QWORD *)v26 + 1);
    sub_20BDE881C(v52, a1);
    v27 = 1;
  }
  else
  {
    v27 = 0;
  }
  if (*a2)
  {
    v28 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    if (!v28)
      v28 = sub_20C7EAA68(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    sub_20BF32220((_QWORD *)((unint64_t)v53 | (8 * v27)), (_QWORD *)v28 + 2);
    sub_20BDE881C(&v52[v27++], a2);
  }
  if (*a3)
  {
    v29 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    if (!v29)
      v29 = sub_20C7EAA68(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    sub_20BF32220((_QWORD *)v53 + v27, (_QWORD *)v29 + 3);
    sub_20BDE881C(&v52[v27++], a3);
  }
  if (*a4)
  {
    v30 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    if (!v30)
      v30 = sub_20C7EAA68(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    sub_20BF32220((_QWORD *)v53 + v27, (_QWORD *)v30 + 4);
    sub_20BDE881C(&v52[v27++], a4);
  }
  if (*a5)
  {
    v31 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    if (!v31)
      v31 = sub_20C7EAA68(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    sub_20BF32220((_QWORD *)v53 + v27, (_QWORD *)v31 + 5);
    sub_20BDE881C(&v52[v27++], a5);
  }
  if (*a6)
  {
    v32 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    if (!v32)
      v32 = sub_20C7EAA68(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    sub_20BF32220((_QWORD *)v53 + v27, (_QWORD *)v32 + 6);
    sub_20BDE881C(&v52[v27++], a6);
  }
  if (*a7)
  {
    v33 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    if (!v33)
      v33 = sub_20C7EAA68(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    sub_20BF32220((_QWORD *)v53 + v27, (_QWORD *)v33 + 7);
    sub_20BDE881C(&v52[v27++], a7);
  }
  if (*a8)
  {
    v34 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    if (!v34)
      v34 = sub_20C7EAA68(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    sub_20BF32220((_QWORD *)v53 + v27, (_QWORD *)v34 + 8);
    sub_20BDE881C(&v52[v27++], a8);
  }
  if (*a10)
  {
    v35 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    if (!v35)
      v35 = sub_20C7EAA68(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    sub_20BF32220((_QWORD *)v53 + v27, (_QWORD *)v35 + 9);
    sub_20BDE881C(&v52[v27++], a10);
  }
  if (*a11)
  {
    v36 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    if (!v36)
      v36 = sub_20C7EAA68(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    sub_20BF32220((_QWORD *)v53 + v27, (_QWORD *)v36 + 10);
    sub_20BDE881C(&v52[v27++], a11);
  }
  if (*a12)
  {
    v37 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    if (!v37)
      v37 = sub_20C7EAA68(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    sub_20BF32220((_QWORD *)v53 + v27, (_QWORD *)v37 + 11);
    sub_20BDE881C(&v52[v27++], a12);
  }
  if (*a13)
  {
    v38 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    if (!v38)
      v38 = sub_20C7EAA68(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    sub_20BF32220((_QWORD *)v53 + v27, (_QWORD *)v38 + 12);
    sub_20BDE881C(&v52[v27++], a13);
  }
  if (*a14)
  {
    v39 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    if (!v39)
      v39 = sub_20C7EAA68(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    sub_20BF32220((_QWORD *)v53 + v27, (_QWORD *)v39 + 13);
    sub_20BDE881C(&v52[v27++], a14);
  }
  if (*a15)
  {
    v40 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    if (!v40)
      v40 = sub_20C7EAA68(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    sub_20BF32220((_QWORD *)v53 + v27, (_QWORD *)v40 + 14);
    sub_20BDE881C(&v52[v27++], a15);
  }
  if (*a16)
  {
    v41 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    if (!v41)
      v41 = sub_20C7EAA68(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    sub_20BF32220((_QWORD *)v53 + v27, (_QWORD *)v41 + 15);
    sub_20BDE881C(&v52[v27++], a16);
  }
  if (*a17)
  {
    v42 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    if (!v42)
      v42 = sub_20C7EAA68(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    sub_20BF32220((_QWORD *)v53 + v27, (_QWORD *)v42 + 16);
    sub_20BDE881C(&v52[v27++], a17);
  }
  if (*a18)
  {
    v43 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    if (!v43)
      v43 = sub_20C7EAA68(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    sub_20BF32220((_QWORD *)v53 + v27, (_QWORD *)v43 + 17);
    sub_20BDE881C(&v52[v27++], a18);
  }
  pxrInternal__aapl__pxrReserved__::HdRetainedContainerDataSource::New(v27, (uint64_t *)v53, (uint64_t *)v52, &v51);
  *a9 = v51;
  for (i = 16; i != -1; --i)
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v52[i]);
  do
  {
    v46 = *((_QWORD *)v24 - 1);
    v24 = (_OWORD *)((char *)v24 - 8);
    v45 = v46;
    if ((v46 & 7) != 0)
    {
      v47 = (unsigned int *)(v45 & 0xFFFFFFFFFFFFFFF8);
      do
        v48 = __ldxr(v47);
      while (__stlxr(v48 - 2, v47));
    }
  }
  while (v24 != v53);
}

void sub_20C7EA13C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;

  for (i = 256; i != -16; i -= 16)
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(&a13 + i));
  while (1)
  {
    v18 = *(_QWORD *)(v13 - 8);
    v13 -= 8;
    v17 = v18;
    if ((v18 & 7) != 0)
    {
      v19 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v20 = __ldxr(v19);
      while (__stlxr(v20 - 2, v19));
    }
    if (v13 == v14 - 240)
      _Unwind_Resume(a1);
  }
}

_QWORD *pxrInternal__aapl__pxrReserved__::HdCameraSchema::Builder::SetProjection(_QWORD *a1, uint64_t *a2)
{
  sub_20BDE881C(a1, a2);
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdCameraSchema::Builder::SetHorizontalAperture(uint64_t a1, uint64_t *a2)
{
  sub_20BDE881C((_QWORD *)(a1 + 16), a2);
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdCameraSchema::Builder::SetVerticalAperture(uint64_t a1, uint64_t *a2)
{
  sub_20BDE881C((_QWORD *)(a1 + 32), a2);
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdCameraSchema::Builder::SetHorizontalApertureOffset(uint64_t a1, uint64_t *a2)
{
  sub_20BDE881C((_QWORD *)(a1 + 48), a2);
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdCameraSchema::Builder::SetVerticalApertureOffset(uint64_t a1, uint64_t *a2)
{
  sub_20BDE881C((_QWORD *)(a1 + 64), a2);
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdCameraSchema::Builder::SetFocalLength(uint64_t a1, uint64_t *a2)
{
  sub_20BDE881C((_QWORD *)(a1 + 80), a2);
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdCameraSchema::Builder::SetClippingRange(uint64_t a1, uint64_t *a2)
{
  sub_20BDE881C((_QWORD *)(a1 + 96), a2);
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdCameraSchema::Builder::SetClippingPlanes(uint64_t a1, uint64_t *a2)
{
  sub_20BDE881C((_QWORD *)(a1 + 112), a2);
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdCameraSchema::Builder::SetFStop(uint64_t a1, uint64_t *a2)
{
  sub_20BDE881C((_QWORD *)(a1 + 128), a2);
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdCameraSchema::Builder::SetFocusDistance(uint64_t a1, uint64_t *a2)
{
  sub_20BDE881C((_QWORD *)(a1 + 144), a2);
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdCameraSchema::Builder::SetShutterOpen(uint64_t a1, uint64_t *a2)
{
  sub_20BDE881C((_QWORD *)(a1 + 160), a2);
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdCameraSchema::Builder::SetShutterClose(uint64_t a1, uint64_t *a2)
{
  sub_20BDE881C((_QWORD *)(a1 + 176), a2);
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdCameraSchema::Builder::SetExposure(uint64_t a1, uint64_t *a2)
{
  sub_20BDE881C((_QWORD *)(a1 + 192), a2);
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdCameraSchema::Builder::SetFocusOn(uint64_t a1, uint64_t *a2)
{
  sub_20BDE881C((_QWORD *)(a1 + 208), a2);
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdCameraSchema::Builder::SetDofAspect(uint64_t a1, uint64_t *a2)
{
  sub_20BDE881C((_QWORD *)(a1 + 224), a2);
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdCameraSchema::Builder::SetSplitDiopter(uint64_t a1, uint64_t *a2)
{
  sub_20BDE881C((_QWORD *)(a1 + 240), a2);
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdCameraSchema::Builder::SetLensDistortion(uint64_t a1, uint64_t *a2)
{
  sub_20BDE881C((_QWORD *)(a1 + 256), a2);
  return a1;
}

void pxrInternal__aapl__pxrReserved__::HdCameraSchema::Builder::Build(pxrInternal__aapl__pxrReserved__::HdCameraSchema::Builder *this@<X0>, _OWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::HdCameraSchema::BuildRetained((uint64_t *)this, (uint64_t *)this + 2, (uint64_t *)this + 4, (uint64_t *)this + 6, (uint64_t *)this + 8, (uint64_t *)this + 10, (uint64_t *)this + 12, (uint64_t *)this + 14, a2, (uint64_t *)this + 16, (uint64_t *)this + 18, (uint64_t *)this + 20, (uint64_t *)this + 22, (uint64_t *)this + 24, (uint64_t *)this + 26, (uint64_t *)this + 28, (uint64_t *)this + 30, (uint64_t *)this + 32);
}

void pxrInternal__aapl__pxrReserved__::HdCameraSchema::GetFromParent(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *p_shared_owners;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *a1;
  if (!*a1)
  {
    v14 = 0;
    v15 = 0;
    sub_20C7E0E2C(a2, &v14);
    v8 = v15;
    if (!v15)
      return;
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    goto LABEL_16;
  }
  if (!atomic_load(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens))
    sub_20C7EAA68(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v3 + 24))(&v12, v3);
  sub_20C7E0B14((uint64_t)&v12, &v14);
  sub_20C7E0E2C(a2, &v14);
  v5 = v15;
  if (v15)
  {
    v6 = (unint64_t *)&v15->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = v13;
  if (v13)
  {
    v9 = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
LABEL_16:
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::HdCameraSchema::GetSchemaToken(pxrInternal__aapl__pxrReserved__::HdCameraSchema *this)
{
  pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *result;

  result = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  if (!result)
    return sub_20C7EAA68(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  return result;
}

void *pxrInternal__aapl__pxrReserved__::HdCameraSchema::GetDefaultLocator(pxrInternal__aapl__pxrReserved__::HdCameraSchema *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25498D750);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498D750))
  {
    v3 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    if (!v3)
      v3 = sub_20C7EAA68(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HdDataSourceLocator((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&unk_25498D718, v3);
    __cxa_atexit((void (*)(void *))sub_20C7E0C54, &unk_25498D718, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498D750);
  }
  return &unk_25498D718;
}

void sub_20C7EA680(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498D750);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::HdCameraSchema::GetShutterOpenLocator(pxrInternal__aapl__pxrReserved__::HdCameraSchema *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::HdCameraSchema *v3;
  pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498D790);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::HdCameraSchema *)__cxa_guard_acquire(&qword_25498D790);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::HdCameraSchema::GetDefaultLocator(v3);
      v4 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
      if (!v4)
        v4 = sub_20C7EAA68(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
      pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::Append((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&unk_25498D718, (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)((char *)v4 + 88), dword_25498D758);
      __cxa_atexit((void (*)(void *))sub_20C7E0C54, dword_25498D758, &dword_20BDBC000);
      __cxa_guard_release(&qword_25498D790);
    }
  }
  return dword_25498D758;
}

void sub_20C7EA740(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498D790);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::HdCameraSchema::GetShutterCloseLocator(pxrInternal__aapl__pxrReserved__::HdCameraSchema *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::HdCameraSchema *v3;
  pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25498D7D0);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::HdCameraSchema *)__cxa_guard_acquire(&qword_25498D7D0);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::HdCameraSchema::GetDefaultLocator(v3);
      v4 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
      if (!v4)
        v4 = sub_20C7EAA68(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
      pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::Append((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&unk_25498D718, (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)((char *)v4 + 96), dword_25498D798);
      __cxa_atexit((void (*)(void *))sub_20C7E0C54, dword_25498D798, &dword_20BDBC000);
      __cxa_guard_release(&qword_25498D7D0);
    }
  }
  return dword_25498D798;
}

void sub_20C7EA800(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498D7D0);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdCameraSchema::BuildProjectionDataSource(pxrInternal__aapl__pxrReserved__::HdCameraSchema *this@<X0>, _QWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *v5;
  pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *v6;
  unsigned __int8 v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;

  v5 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  if (!v5)
    v5 = sub_20C7EAA68(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v5 + 18) & 0xFFFFFFFFFFFFFFF8))
  {
    v7 = atomic_load((unsigned __int8 *)&qword_25498D7E8);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_25498D7E8))
    {
      sub_20C7EA9FC((uint64_t *)this, &qword_25498D7D8);
      __cxa_atexit((void (*)(void *))pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource, &qword_25498D7D8, &dword_20BDBC000);
      __cxa_guard_release(&qword_25498D7E8);
    }
    v8 = unk_25498D7E0;
    *a2 = qword_25498D7D8;
    a2[1] = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
  }
  else
  {
    v6 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    if (!v6)
      v6 = sub_20C7EAA68(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v6 + 19) & 0xFFFFFFFFFFFFFFF8))
    {
      v11 = atomic_load((unsigned __int8 *)&qword_25498D800);
      if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_25498D800))
      {
        sub_20C7EA9FC((uint64_t *)this, &qword_25498D7F0);
        __cxa_atexit((void (*)(void *))pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource, &qword_25498D7F0, &dword_20BDBC000);
        __cxa_guard_release(&qword_25498D800);
      }
      v12 = *(_QWORD *)algn_25498D7F8;
      *a2 = qword_25498D7F0;
      a2[1] = v12;
      if (v12)
      {
        v13 = (unint64_t *)(v12 + 8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
    }
    else
    {
      sub_20C7EA9FC((uint64_t *)this, &v15);
      *(_OWORD *)a2 = v15;
    }
  }
}

void sub_20C7EA9D4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498D800);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C7EA9FC@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  v4 = operator new(0x10uLL);
  v5 = *a1;
  *v4 = &unk_24C54C0E8;
  v4[1] = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v4[1] = v6;
  }
  return sub_20C7EADF8(a2, (uint64_t)v4);
}

pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *sub_20C7EAA68(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *result;
  void *v4;

  result = sub_20C7EAAB0();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType::~HdCameraSchemaTokens_StaticTokenType(result);
    operator delete(v4);
  }
  return (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load(a1);
}

pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *sub_20C7EAAB0()
{
  pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *v0;

  v0 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)operator new(0xB8uLL);
  pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType::HdCameraSchemaTokens_StaticTokenType(v0);
  return v0;
}

void sub_20C7EAADC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_20C7EAAF0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  result = *(void **)a1;
  if (result
    && (result = __dynamic_cast(result, (const struct __class_type_info *)&unk_24C54BBE0, (const struct __class_type_info *)&unk_24C54C060, 0)) != 0)
  {
    v5 = *(_QWORD *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void *sub_20C7EAB5C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  result = *(void **)a1;
  if (result
    && (result = __dynamic_cast(result, (const struct __class_type_info *)&unk_24C54BBE0, (const struct __class_type_info *)&unk_24C54C078, 0)) != 0)
  {
    v5 = *(_QWORD *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void *sub_20C7EABC8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  result = *(void **)a1;
  if (result
    && (result = __dynamic_cast(result, (const struct __class_type_info *)&unk_24C54BBE0, (const struct __class_type_info *)&unk_24C54C090, 0)) != 0)
  {
    v5 = *(_QWORD *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void *sub_20C7EAC34@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  result = *(void **)a1;
  if (result
    && (result = __dynamic_cast(result, (const struct __class_type_info *)&unk_24C54BBE0, (const struct __class_type_info *)&unk_24C54C0A8, 0)) != 0)
  {
    v5 = *(_QWORD *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void *sub_20C7EACA0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  result = *(void **)a1;
  if (result
    && (result = __dynamic_cast(result, (const struct __class_type_info *)&unk_24C54BBE0, (const struct __class_type_info *)&unk_24C54C0C0, 0)) != 0)
  {
    v5 = *(_QWORD *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void sub_20C7EAD0C(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *a1)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;

  *(_QWORD *)a1 = &unk_24C54C0E8;
  v1 = *((_QWORD *)a1 + 1);
  if ((v1 & 7) != 0)
  {
    v2 = (unsigned int *)(v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(a1);
}

void sub_20C7EAD40(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *a1)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  void *v4;

  *(_QWORD *)a1 = &unk_24C54C0E8;
  v1 = *((_QWORD *)a1 + 1);
  if ((v1 & 7) != 0)
  {
    v2 = (unsigned int *)(v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(a1);
  operator delete(v4);
}

uint64_t sub_20C7EAD84@<X0>(uint64_t result@<X0>, unsigned int **a2@<X8>)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(unsigned int **)(result + 8);
  *a2 = v2;
  a2[1] = (unsigned int *)((char *)&off_24C5207B8 + 1);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)((unint64_t)v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) == 0)
      *a2 = v3;
  }
  return result;
}

uint64_t sub_20C7EADC0()
{
  return 0;
}

uint64_t sub_20C7EADC8@<X0>(uint64_t result@<X0>, unsigned int **a2@<X8>)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(unsigned int **)(result + 8);
  *a2 = v2;
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)((unint64_t)v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) == 0)
      *a2 = v3;
  }
  return result;
}

_QWORD *sub_20C7EADF8(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C54C138;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20C7EAE40(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_20C7EAE64(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20C7EAE78(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20C7EAE90(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C54C188))
    return a1 + 24;
  else
    return 0;
}

void pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens_StaticTokenType::~HdCapsuleSchemaTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  void **v28;

  v28 = (void **)((char *)this + 72);
  sub_20BEEB2B8(&v28);
  v2 = *((_QWORD *)this + 8);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *((_QWORD *)this + 7);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v8 = *((_QWORD *)this + 6);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  v11 = *((_QWORD *)this + 5);
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  v14 = *((_QWORD *)this + 4);
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  v17 = *((_QWORD *)this + 3);
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  v20 = *((_QWORD *)this + 2);
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  v23 = *((_QWORD *)this + 1);
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  if ((*(_QWORD *)this & 7) != 0)
  {
    v26 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v27 = __ldxr(v26);
    while (__stlxr(v27 - 2, v26));
  }
}

pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens_StaticTokenType::HdCapsuleSchemaTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens_StaticTokenType *this)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t *)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "capsule", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2, "height", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 16, "radius", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 24, "radiusTop", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 32, "radiusBottom", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 40, "axis", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 48, "X", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 56, "Y", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 64, "Z", 0);
  v3 = *(_QWORD *)this;
  v41 = v3;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      v41 &= 0xFFFFFFFFFFFFFFF8;
  }
  v6 = *v2;
  v42 = v6;
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    if ((v8 & 1) == 0)
      v42 &= 0xFFFFFFFFFFFFFFF8;
  }
  v9 = *((_QWORD *)this + 2);
  v43 = v9;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      v43 &= 0xFFFFFFFFFFFFFFF8;
  }
  v12 = *((_QWORD *)this + 3);
  v44 = v12;
  if ((v12 & 7) != 0)
  {
    v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 2, v13));
    if ((v14 & 1) == 0)
      v44 &= 0xFFFFFFFFFFFFFFF8;
  }
  v15 = *((_QWORD *)this + 4);
  v45 = v15;
  if ((v15 & 7) != 0)
  {
    v16 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 2, v16));
    if ((v17 & 1) == 0)
      v45 &= 0xFFFFFFFFFFFFFFF8;
  }
  v18 = *((_QWORD *)this + 5);
  v46 = v18;
  if ((v18 & 7) != 0)
  {
    v19 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 2, v19));
    if ((v20 & 1) == 0)
      v46 &= 0xFFFFFFFFFFFFFFF8;
  }
  v21 = *((_QWORD *)this + 6);
  v47 = v21;
  if ((v21 & 7) != 0)
  {
    v22 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 2, v22));
    if ((v23 & 1) == 0)
      v47 &= 0xFFFFFFFFFFFFFFF8;
  }
  v24 = *((_QWORD *)this + 7);
  v48 = v24;
  if ((v24 & 7) != 0)
  {
    v25 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 2, v25));
    if ((v26 & 1) == 0)
      v48 &= 0xFFFFFFFFFFFFFFF8;
  }
  v27 = *((_QWORD *)this + 8);
  v49 = v27;
  if ((v27 & 7) != 0)
  {
    v28 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 2, v28));
    if ((v29 & 1) == 0)
      v49 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  v30 = operator new(0x48uLL);
  v31 = 0;
  *((_QWORD *)this + 9) = v30;
  *((_QWORD *)this + 10) = v30;
  *((_QWORD *)this + 11) = v30 + 9;
  do
  {
    v32 = *(&v41 + v31);
    *v30 = v32;
    if ((v32 & 7) != 0)
    {
      v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 2, v33));
      if ((v34 & 1) == 0)
        *v30 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v31;
    ++v30;
  }
  while (v31 != 9);
  v35 = &v50;
  *((_QWORD *)this + 10) = v30;
  do
  {
    v37 = *--v35;
    v36 = v37;
    if ((v37 & 7) != 0)
    {
      v38 = (unsigned int *)(v36 & 0xFFFFFFFFFFFFFFF8);
      do
        v39 = __ldxr(v38);
      while (__stlxr(v39 - 2, v38));
    }
  }
  while (v35 != &v41);
  return this;
}

void sub_20C7EB3EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;

  sub_20BEEB2B8(&a9);
  v30 = &a20;
  while (1)
  {
    v32 = *--v30;
    v31 = v32;
    if ((v32 & 7) != 0)
    {
      v33 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
      do
        v34 = __ldxr(v33);
      while (__stlxr(v34 - 2, v33));
    }
    if (v30 == (uint64_t *)&a11)
    {
      if ((*v28 & 7) != 0)
      {
        v35 = (unsigned int *)(*v28 & 0xFFFFFFFFFFFFFFF8);
        do
          v36 = __ldxr(v35);
        while (__stlxr(v36 - 2, v35));
      }
      if ((*v27 & 7) != 0)
      {
        v37 = (unsigned int *)(*v27 & 0xFFFFFFFFFFFFFFF8);
        do
          v38 = __ldxr(v37);
        while (__stlxr(v38 - 2, v37));
      }
      if ((*v26 & 7) != 0)
      {
        v39 = (unsigned int *)(*v26 & 0xFFFFFFFFFFFFFFF8);
        do
          v40 = __ldxr(v39);
        while (__stlxr(v40 - 2, v39));
      }
      if ((*v25 & 7) != 0)
      {
        v41 = (unsigned int *)(*v25 & 0xFFFFFFFFFFFFFFF8);
        do
          v42 = __ldxr(v41);
        while (__stlxr(v42 - 2, v41));
      }
      if ((*v24 & 7) != 0)
      {
        v43 = (unsigned int *)(*v24 & 0xFFFFFFFFFFFFFFF8);
        do
          v44 = __ldxr(v43);
        while (__stlxr(v44 - 2, v43));
      }
      if ((*v23 & 7) != 0)
      {
        v45 = (unsigned int *)(*v23 & 0xFFFFFFFFFFFFFFF8);
        do
          v46 = __ldxr(v45);
        while (__stlxr(v46 - 2, v45));
      }
      if ((*v22 & 7) != 0)
      {
        v47 = (unsigned int *)(*v22 & 0xFFFFFFFFFFFFFFF8);
        do
          v48 = __ldxr(v47);
        while (__stlxr(v48 - 2, v47));
      }
      if ((*v21 & 7) != 0)
      {
        v49 = (unsigned int *)(*v21 & 0xFFFFFFFFFFFFFFF8);
        do
          v50 = __ldxr(v49);
        while (__stlxr(v50 - 2, v49));
      }
      if ((*v20 & 7) != 0)
      {
        v51 = (unsigned int *)(*v20 & 0xFFFFFFFFFFFFFFF8);
        do
          v52 = __ldxr(v51);
        while (__stlxr(v52 - 2, v51));
      }
      _Unwind_Resume(a1);
    }
  }
}

void pxrInternal__aapl__pxrReserved__::HdCapsuleSchema::GetHeight(pxrInternal__aapl__pxrReserved__::HdCapsuleSchema *this@<X0>, _QWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens_StaticTokenType *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;

  v4 = (pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens);
  if (!v4)
    v4 = sub_20C7EC1EC(&pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens);
  v5 = (unsigned int *)*((_QWORD *)v4 + 1);
  v10 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v10 = v6;
  }
  sub_20C7E94B4((uint64_t *)this, a2);
  if ((v10 & 7) != 0)
  {
    v8 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
}

void pxrInternal__aapl__pxrReserved__::HdCapsuleSchema::GetRadius(pxrInternal__aapl__pxrReserved__::HdCapsuleSchema *this@<X0>, _QWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens_StaticTokenType *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;

  v4 = (pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens);
  if (!v4)
    v4 = sub_20C7EC1EC(&pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens);
  v5 = (unsigned int *)*((_QWORD *)v4 + 2);
  v10 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v10 = v6;
  }
  sub_20C7E94B4((uint64_t *)this, a2);
  if ((v10 & 7) != 0)
  {
    v8 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
}

void pxrInternal__aapl__pxrReserved__::HdCapsuleSchema::GetRadiusTop(pxrInternal__aapl__pxrReserved__::HdCapsuleSchema *this@<X0>, _QWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens_StaticTokenType *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;

  v4 = (pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens);
  if (!v4)
    v4 = sub_20C7EC1EC(&pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens);
  v5 = (unsigned int *)*((_QWORD *)v4 + 3);
  v10 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v10 = v6;
  }
  sub_20C7E94B4((uint64_t *)this, a2);
  if ((v10 & 7) != 0)
  {
    v8 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
}

void pxrInternal__aapl__pxrReserved__::HdCapsuleSchema::GetRadiusBottom(pxrInternal__aapl__pxrReserved__::HdCapsuleSchema *this@<X0>, _QWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens_StaticTokenType *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;

  v4 = (pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens);
  if (!v4)
    v4 = sub_20C7EC1EC(&pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens);
  v5 = (unsigned int *)*((_QWORD *)v4 + 4);
  v10 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v10 = v6;
  }
  sub_20C7E94B4((uint64_t *)this, a2);
  if ((v10 & 7) != 0)
  {
    v8 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
}

void pxrInternal__aapl__pxrReserved__::HdCapsuleSchema::GetAxis(pxrInternal__aapl__pxrReserved__::HdCapsuleSchema *this@<X0>, _QWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens_StaticTokenType *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;

  v4 = (pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens);
  if (!v4)
    v4 = sub_20C7EC1EC(&pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens);
  v5 = (unsigned int *)*((_QWORD *)v4 + 5);
  v10 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v10 = v6;
  }
  sub_20C7E28BC((uint64_t *)this, a2);
  if ((v10 & 7) != 0)
  {
    v8 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
}

void pxrInternal__aapl__pxrReserved__::HdCapsuleSchema::BuildRetained(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, _OWORD *a6@<X8>)
{
  uint64_t *v11;
  pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens_StaticTokenType *v13;
  unint64_t v14;
  pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens_StaticTokenType *v15;
  pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens_StaticTokenType *v16;
  pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens_StaticTokenType *v17;
  pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens_StaticTokenType *v18;
  uint64_t i;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  __int128 v24;
  _OWORD v25[5];
  _OWORD v26[2];
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v27 = 0;
  memset(v26, 0, sizeof(v26));
  memset(v25, 0, sizeof(v25));
  v11 = &v28;
  if (*a1)
  {
    v13 = (pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens);
    if (!v13)
      v13 = sub_20C7EC1EC(&pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens);
    sub_20BF32220(v26, (_QWORD *)v13 + 1);
    sub_20BDE881C(v25, a1);
    v14 = 1;
  }
  else
  {
    v14 = 0;
  }
  if (*a2)
  {
    v15 = (pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens);
    if (!v15)
      v15 = sub_20C7EC1EC(&pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens);
    sub_20BF32220((_QWORD *)((unint64_t)v26 | (8 * v14)), (_QWORD *)v15 + 2);
    sub_20BDE881C(&v25[v14++], a2);
  }
  if (*a3)
  {
    v16 = (pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens);
    if (!v16)
      v16 = sub_20C7EC1EC(&pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens);
    sub_20BF32220((_QWORD *)v26 + v14, (_QWORD *)v16 + 3);
    sub_20BDE881C(&v25[v14++], a3);
  }
  if (*a4)
  {
    v17 = (pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens);
    if (!v17)
      v17 = sub_20C7EC1EC(&pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens);
    sub_20BF32220((_QWORD *)v26 + v14, (_QWORD *)v17 + 4);
    sub_20BDE881C(&v25[v14++], a4);
  }
  if (*a5)
  {
    v18 = (pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens);
    if (!v18)
      v18 = sub_20C7EC1EC(&pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens);
    sub_20BF32220((_QWORD *)v26 + v14, (_QWORD *)v18 + 5);
    sub_20BDE881C(&v25[v14++], a5);
  }
  pxrInternal__aapl__pxrReserved__::HdRetainedContainerDataSource::New(v14, (uint64_t *)v26, (uint64_t *)v25, &v24);
  *a6 = v24;
  for (i = 4; i != -1; --i)
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v25[i]);
  do
  {
    v21 = *--v11;
    v20 = v21;
    if ((v21 & 7) != 0)
    {
      v22 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
      do
        v23 = __ldxr(v22);
      while (__stlxr(v23 - 2, v22));
    }
  }
  while (v11 != (uint64_t *)v26);
}

void sub_20C7EBBF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  char *v21;
  uint64_t i;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;

  for (i = 64; i != -16; i -= 16)
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(&a11 + i));
  while (1)
  {
    v25 = *((_QWORD *)v21 - 1);
    v21 -= 8;
    v24 = v25;
    if ((v25 & 7) != 0)
    {
      v26 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
      do
        v27 = __ldxr(v26);
      while (__stlxr(v27 - 2, v26));
    }
    if (v21 == &a21)
      _Unwind_Resume(a1);
  }
}

void pxrInternal__aapl__pxrReserved__::HdCapsuleSchema::GetFromParent(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v3 = *a1;
  if (*a1)
  {
    if (!atomic_load(&pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens))
      sub_20C7EC1EC(&pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens);
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v3 + 24))(&v14, v3);
    sub_20C7E0B14((uint64_t)&v14, &v16);
  }
  else
  {
    v16 = 0;
    v17 = 0;
  }
  sub_20C7E0E2C(a2, &v16);
  v5 = v17;
  if (v3)
  {
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v8 = v15;
    if (v15)
    {
      v9 = (unint64_t *)&v15->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        v11 = v8;
LABEL_22:
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  else if (v17)
  {
    v12 = (unint64_t *)&v17->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      v11 = v5;
      goto LABEL_22;
    }
  }
}

void sub_20C7EBD74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a11);
  if (v11)
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::HdCapsuleSchema::GetSchemaToken(pxrInternal__aapl__pxrReserved__::HdCapsuleSchema *this)
{
  pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens_StaticTokenType *result;

  result = (pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens);
  if (!result)
    return sub_20C7EC1EC(&pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens);
  return result;
}

void *pxrInternal__aapl__pxrReserved__::HdCapsuleSchema::GetDefaultLocator(pxrInternal__aapl__pxrReserved__::HdCapsuleSchema *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens_StaticTokenType *v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25498D840);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498D840))
  {
    v3 = (pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens);
    if (!v3)
      v3 = sub_20C7EC1EC(&pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens);
    pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HdDataSourceLocator((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&unk_25498D808, v3);
    __cxa_atexit((void (*)(void *))sub_20C7E0C54, &unk_25498D808, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498D840);
  }
  return &unk_25498D808;
}

void sub_20C7EBE50(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498D840);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdCapsuleSchema::BuildAxisDataSource(pxrInternal__aapl__pxrReserved__::HdCapsuleSchema *this@<X0>, _QWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens_StaticTokenType *v5;
  pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens_StaticTokenType *v6;
  pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens_StaticTokenType *v7;
  unsigned __int8 v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20;

  v5 = (pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens);
  if (!v5)
    v5 = sub_20C7EC1EC(&pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens);
  if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v5 + 6) & 0xFFFFFFFFFFFFFFF8))
  {
    v8 = atomic_load((unsigned __int8 *)&qword_25498D858);
    if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_25498D858))
    {
      sub_20C7EA9FC((uint64_t *)this, &qword_25498D848);
      __cxa_atexit((void (*)(void *))pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource, &qword_25498D848, &dword_20BDBC000);
      __cxa_guard_release(&qword_25498D858);
    }
    v9 = unk_25498D850;
    *a2 = qword_25498D848;
    a2[1] = v9;
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
  }
  else
  {
    v6 = (pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens);
    if (!v6)
      v6 = sub_20C7EC1EC(&pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens);
    if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v6 + 7) & 0xFFFFFFFFFFFFFFF8))
    {
      v12 = atomic_load((unsigned __int8 *)&qword_25498D870);
      if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_25498D870))
      {
        sub_20C7EA9FC((uint64_t *)this, &qword_25498D860);
        __cxa_atexit((void (*)(void *))pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource, &qword_25498D860, &dword_20BDBC000);
        __cxa_guard_release(&qword_25498D870);
      }
      v13 = *(_QWORD *)algn_25498D868;
      *a2 = qword_25498D860;
      a2[1] = v13;
      if (v13)
      {
        v14 = (unint64_t *)(v13 + 8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
    }
    else
    {
      v7 = (pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens);
      if (!v7)
        v7 = sub_20C7EC1EC(&pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens);
      if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v7 + 8) & 0xFFFFFFFFFFFFFFF8))
      {
        v16 = atomic_load((unsigned __int8 *)&qword_25498D888);
        if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_25498D888))
        {
          sub_20C7EA9FC((uint64_t *)this, &qword_25498D878);
          __cxa_atexit((void (*)(void *))pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource, &qword_25498D878, &dword_20BDBC000);
          __cxa_guard_release(&qword_25498D888);
        }
        v17 = unk_25498D880;
        *a2 = qword_25498D878;
        a2[1] = v17;
        if (v17)
        {
          v18 = (unint64_t *)(v17 + 8);
          do
            v19 = __ldxr(v18);
          while (__stxr(v19 + 1, v18));
        }
      }
      else
      {
        sub_20C7EA9FC((uint64_t *)this, &v20);
        *(_OWORD *)a2 = v20;
      }
    }
  }
}

void sub_20C7EC0DC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498D888);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::HdCapsuleSchema::Builder::SetHeight(_QWORD *a1, uint64_t *a2)
{
  sub_20BDE881C(a1, a2);
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdCapsuleSchema::Builder::SetRadius(uint64_t a1, uint64_t *a2)
{
  sub_20BDE881C((_QWORD *)(a1 + 16), a2);
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdCapsuleSchema::Builder::SetRadiusTop(uint64_t a1, uint64_t *a2)
{
  sub_20BDE881C((_QWORD *)(a1 + 32), a2);
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdCapsuleSchema::Builder::SetRadiusBottom(uint64_t a1, uint64_t *a2)
{
  sub_20BDE881C((_QWORD *)(a1 + 48), a2);
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdCapsuleSchema::Builder::SetAxis(uint64_t a1, uint64_t *a2)
{
  sub_20BDE881C((_QWORD *)(a1 + 64), a2);
  return a1;
}

void pxrInternal__aapl__pxrReserved__::HdCapsuleSchema::Builder::Build(pxrInternal__aapl__pxrReserved__::HdCapsuleSchema::Builder *this@<X0>, _OWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::HdCapsuleSchema::BuildRetained((uint64_t *)this, (uint64_t *)this + 2, (uint64_t *)this + 4, (uint64_t *)this + 6, (uint64_t *)this + 8, a2);
}

pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens_StaticTokenType *sub_20C7EC1EC(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens_StaticTokenType *result;
  void *v4;

  result = sub_20C7EC234();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens_StaticTokenType::~HdCapsuleSchemaTokens_StaticTokenType(result);
    operator delete(v4);
  }
  return (pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens_StaticTokenType *)atomic_load(a1);
}

pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens_StaticTokenType *sub_20C7EC234()
{
  pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens_StaticTokenType *v0;

  v0 = (pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens_StaticTokenType *)operator new(0x60uLL);
  pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens_StaticTokenType::HdCapsuleSchemaTokens_StaticTokenType(v0);
  return v0;
}

void sub_20C7EC260(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdCategoriesSchemaTokens_StaticTokenType::~HdCategoriesSchemaTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::HdCategoriesSchemaTokens_StaticTokenType *this)
{
  unsigned int *v2;
  unsigned int v3;
  void **v4;

  v4 = (void **)((char *)this + 8);
  sub_20BEEB2B8(&v4);
  if ((*(_QWORD *)this & 7) != 0)
  {
    v2 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
}

{
  unsigned int *v2;
  unsigned int v3;
  void **v4;

  v4 = (void **)((char *)this + 8);
  sub_20BEEB2B8(&v4);
  if ((*(_QWORD *)this & 7) != 0)
  {
    v2 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
}

pxrInternal__aapl__pxrReserved__::HdCategoriesSchemaTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::HdCategoriesSchemaTokens_StaticTokenType::HdCategoriesSchemaTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::HdCategoriesSchemaTokens_StaticTokenType *this)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "categories", 0);
  v3 = *v2;
  if ((*v2 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      v3 &= 0xFFFFFFFFFFFFFFF8;
  }
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  v6 = operator new(8uLL);
  *((_QWORD *)this + 1) = v6;
  *((_QWORD *)this + 2) = v6;
  *v6 = v3;
  v7 = v6 + 1;
  *((_QWORD *)this + 3) = v6 + 1;
  if ((v3 & 7) != 0)
  {
    v8 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      *v6 &= 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = v7;
    do
      v10 = __ldxr(v8);
    while (__stlxr(v10 - 2, v8));
  }
  else
  {
    *((_QWORD *)this + 2) = v7;
  }
  return this;
}

void sub_20C7EC400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v13;
  unsigned int v14;

  v11 = v10;
  sub_20BEEB2B8(&a9);
  if ((v11 & 7) != 0)
  {
    v13 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  sub_20C96B3E4(v9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdCategoriesSchema::GetIncludedCategoryNames(pxrInternal__aapl__pxrReserved__::HdCategoriesSchema *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unsigned int (***v15)(void **, float);
  std::__shared_weak_count *v16;
  uint64_t *v17;
  uint64_t *v18;

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v3 = *(_QWORD *)this;
  if (v3)
  {
    (*(void (**)(uint64_t **__return_ptr))(*(_QWORD *)v3 + 16))(&v17);
    sub_20C5A0994((uint64_t *)a2, v18 - v17);
    v5 = v17;
    v6 = v18;
    while (v5 != v6)
    {
      (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t *))(**(_QWORD **)this + 24))(&v13, *(_QWORD *)this, v5);
      sub_20C7EACA0((uint64_t)&v13, &v15);
      v7 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      if (v15 && (*v15)[4]((void **)v15, 0.0))
        sub_20C5A2F6C(a2, v5);
      v10 = v16;
      if (v16)
      {
        v11 = (unint64_t *)&v16->__shared_owners_;
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      ++v5;
    }
    v15 = (unsigned int (***)(void **, float))&v17;
    sub_20BEEB2B8((void ***)&v15);
  }
}

void sub_20C7EC594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  _QWORD *v14;

  a12 = (void **)&a14;
  sub_20BEEB2B8(&a12);
  sub_20C00918C(v14);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::HdCategoriesSchema::IsIncludedInCategory(pxrInternal__aapl__pxrReserved__::HdCategoriesSchema *this, unsigned int **a2)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int *v4;
  unsigned int v5;
  _BOOL8 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unsigned int *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v11 = *a2;
  if (((unint64_t)*a2 & 7) != 0)
  {
    v2 = (unsigned int *)((unint64_t)*a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stxr(v3 + 2, v2));
    if ((v3 & 1) == 0)
      v11 = v2;
  }
  sub_20C7E9794((uint64_t *)this, &v12);
  if ((v11 & 7) != 0)
  {
    v4 = (unsigned int *)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  v6 = v12 && ((*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v12 + 32))(v12, 0.0) & 1) != 0;
  v7 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v6;
}

void sub_20C7EC6B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdCategoriesSchema::BuildRetained(pxrInternal__aapl__pxrReserved__::HdCategoriesSchema *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X2>, uint64_t *a3@<X1>, uint64_t *a4@<X3>, _OWORD *a5@<X8>)
{
  unsigned __int8 v9;
  unsigned __int8 v10;
  pxrInternal__aapl__pxrReserved__::HdCategoriesSchema *v11;
  char *v12;
  char *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  char **v24;
  _QWORD *v25;
  _QWORD *v26;
  char *v27;
  __int128 v28;
  int64x2_t v29;
  uint64_t v30;
  const pxrInternal__aapl__pxrReserved__::TfToken *v31;
  char *v32;
  char *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  char **v44;
  _QWORD *v45;
  _QWORD *v46;
  char *v47;
  __int128 v48;
  int64x2_t v49;
  uint64_t v50;
  uint64_t *v51;
  pxrInternal__aapl__pxrReserved__::HdCategoriesSchema *v52;
  uint64_t *v53;
  _QWORD *v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned int v57;
  char *v58;
  __int128 v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  _OWORD *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  __int128 *v70;
  _QWORD *v71;
  _QWORD *v72;
  char *v73;
  __int128 v74;
  int64x2_t v75;
  uint64_t v76;
  const pxrInternal__aapl__pxrReserved__::TfToken *v77;
  uint64_t *v78;
  _QWORD *v79;
  uint64_t v80;
  unsigned int *v81;
  unsigned int v82;
  char *v83;
  __int128 v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  _OWORD *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char *v93;
  uint64_t v94;
  __int128 *v95;
  _QWORD *v96;
  _QWORD *v97;
  char *v98;
  __int128 v99;
  int64x2_t v100;
  uint64_t v101;
  __int128 v103;
  uint64_t *v105;
  __int128 v106;
  char *v107;
  _QWORD *v108;
  unint64_t v109;
  int64x2_t v110;
  _QWORD v111[2];
  _BYTE v112[24];
  uint64_t v113;
  _QWORD *v114;

  v9 = atomic_load((unsigned __int8 *)qword_25498D8A0);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(qword_25498D8A0))
  {
    v112[0] = 1;
    pxrInternal__aapl__pxrReserved__::HdRetainedTypedSampledDataSource<BOOL>::New(v112, (uint64_t *)&xmmword_25498D890);
    __cxa_atexit((void (*)(void *))pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource, &xmmword_25498D890, &dword_20BDBC000);
    __cxa_guard_release(qword_25498D8A0);
  }
  v10 = atomic_load((unsigned __int8 *)&qword_25498D8C0);
  if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_25498D8C0))
  {
    v112[0] = 0;
    pxrInternal__aapl__pxrReserved__::HdRetainedTypedSampledDataSource<BOOL>::New(v112, (uint64_t *)&xmmword_25498D8B0);
    __cxa_atexit((void (*)(void *))pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource, &xmmword_25498D8B0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498D8C0);
  }
  v110 = 0uLL;
  v111[0] = 0;
  if (a3 && this && !a2)
  {
    sub_20BE0ECB0((char **)&v110, (unint64_t)this);
    v11 = 0;
    v12 = (char *)xmmword_25498D890;
    do
    {
      v13 = (char *)*((_QWORD *)&xmmword_25498D890 + 1);
      v107 = v12;
      v108 = (_QWORD *)*((_QWORD *)&xmmword_25498D890 + 1);
      if (*((_QWORD *)&xmmword_25498D890 + 1))
      {
        v14 = (unint64_t *)(*((_QWORD *)&xmmword_25498D890 + 1) + 8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      v16 = v110.i64[1];
      if (v110.i64[1] >= v111[0])
      {
        v18 = (v110.i64[1] - v110.i64[0]) >> 4;
        v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 60)
          sub_20BDDF694();
        v20 = v111[0] - v110.i64[0];
        if ((v111[0] - v110.i64[0]) >> 3 > v19)
          v19 = v20 >> 3;
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0)
          v21 = 0xFFFFFFFFFFFFFFFLL;
        else
          v21 = v19;
        v114 = v111;
        v22 = (char *)sub_20BDEA2F0((uint64_t)v111, v21);
        v24 = (char **)&v22[16 * v18];
        *v24 = v12;
        v24[1] = v13;
        v25 = (_QWORD *)v110.i64[1];
        v26 = (_QWORD *)v110.i64[0];
        if (v110.i64[1] == v110.i64[0])
        {
          v29 = vdupq_n_s64(v110.u64[1]);
          v27 = &v22[16 * v18];
        }
        else
        {
          v27 = &v22[16 * v18];
          do
          {
            v28 = *((_OWORD *)v25 - 1);
            v25 -= 2;
            *((_OWORD *)v27 - 1) = v28;
            v27 -= 16;
            *v25 = 0;
            v25[1] = 0;
          }
          while (v25 != v26);
          v29 = v110;
        }
        v17 = v24 + 2;
        v110.i64[0] = (uint64_t)v27;
        v110.i64[1] = (uint64_t)(v24 + 2);
        *(int64x2_t *)&v112[8] = v29;
        v30 = v111[0];
        v111[0] = &v22[16 * v23];
        v113 = v30;
        *(_QWORD *)v112 = v29.i64[0];
        sub_20BDEA324((uint64_t)v112);
        v12 = (char *)xmmword_25498D890;
      }
      else
      {
        *(_QWORD *)v110.i64[1] = v12;
        *(_QWORD *)(v16 + 8) = v13;
        v17 = (_QWORD *)(v16 + 16);
      }
      v110.i64[1] = (uint64_t)v17;
      v11 = (pxrInternal__aapl__pxrReserved__::HdCategoriesSchema *)((char *)v11 + 1);
    }
    while (v11 != this);
    pxrInternal__aapl__pxrReserved__::HdRetainedContainerDataSource::New((unint64_t)this, a3, (uint64_t *)v110.i64[0], v112);
LABEL_49:
    *a5 = *(_OWORD *)v112;
    goto LABEL_109;
  }
  if (!this && a2 && a4)
  {
    v105 = a4;
    sub_20BE0ECB0((char **)&v110, (unint64_t)a2);
    v31 = 0;
    v32 = (char *)xmmword_25498D8B0;
    do
    {
      v33 = (char *)*((_QWORD *)&xmmword_25498D8B0 + 1);
      v107 = v32;
      v108 = (_QWORD *)*((_QWORD *)&xmmword_25498D8B0 + 1);
      if (*((_QWORD *)&xmmword_25498D8B0 + 1))
      {
        v34 = (unint64_t *)(*((_QWORD *)&xmmword_25498D8B0 + 1) + 8);
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
      }
      v36 = v110.i64[1];
      if (v110.i64[1] >= v111[0])
      {
        v38 = (v110.i64[1] - v110.i64[0]) >> 4;
        v39 = v38 + 1;
        if ((unint64_t)(v38 + 1) >> 60)
          sub_20BDDF694();
        v40 = v111[0] - v110.i64[0];
        if ((v111[0] - v110.i64[0]) >> 3 > v39)
          v39 = v40 >> 3;
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0)
          v41 = 0xFFFFFFFFFFFFFFFLL;
        else
          v41 = v39;
        v114 = v111;
        v42 = (char *)sub_20BDEA2F0((uint64_t)v111, v41);
        v44 = (char **)&v42[16 * v38];
        *v44 = v32;
        v44[1] = v33;
        v45 = (_QWORD *)v110.i64[1];
        v46 = (_QWORD *)v110.i64[0];
        if (v110.i64[1] == v110.i64[0])
        {
          v49 = vdupq_n_s64(v110.u64[1]);
          v47 = &v42[16 * v38];
        }
        else
        {
          v47 = &v42[16 * v38];
          do
          {
            v48 = *((_OWORD *)v45 - 1);
            v45 -= 2;
            *((_OWORD *)v47 - 1) = v48;
            v47 -= 16;
            *v45 = 0;
            v45[1] = 0;
          }
          while (v45 != v46);
          v49 = v110;
        }
        v37 = v44 + 2;
        v110.i64[0] = (uint64_t)v47;
        v110.i64[1] = (uint64_t)(v44 + 2);
        *(int64x2_t *)&v112[8] = v49;
        v50 = v111[0];
        v111[0] = &v42[16 * v43];
        v113 = v50;
        *(_QWORD *)v112 = v49.i64[0];
        sub_20BDEA324((uint64_t)v112);
        v32 = (char *)xmmword_25498D8B0;
      }
      else
      {
        *(_QWORD *)v110.i64[1] = v32;
        *(_QWORD *)(v36 + 8) = v33;
        v37 = (_QWORD *)(v36 + 16);
      }
      v110.i64[1] = (uint64_t)v37;
      v31 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v31 + 1);
    }
    while (v31 != a2);
    pxrInternal__aapl__pxrReserved__::HdRetainedContainerDataSource::New((unint64_t)a2, v105, (uint64_t *)v110.i64[0], v112);
    goto LABEL_49;
  }
  v51 = a4;
  v107 = 0;
  v108 = 0;
  v109 = 0;
  sub_20BFC9A6C(&v107, (unint64_t)this + (_QWORD)a2);
  sub_20BE0ECB0((char **)&v110, (unint64_t)this + (_QWORD)a2);
  if (a3 && this)
  {
    v52 = 0;
    do
    {
      v53 = &a3[(_QWORD)v52];
      v54 = v108;
      if ((unint64_t)v108 >= v109)
      {
        v58 = sub_20BFCA068(&v107, v53);
      }
      else
      {
        v55 = *v53;
        *v108 = *v53;
        if ((v55 & 7) != 0)
        {
          v56 = (unsigned int *)(v55 & 0xFFFFFFFFFFFFFFF8);
          do
            v57 = __ldxr(v56);
          while (__stxr(v57 + 2, v56));
          if ((v57 & 1) == 0)
            *v54 &= 0xFFFFFFFFFFFFFFF8;
        }
        v58 = (char *)(v54 + 1);
      }
      v108 = v58;
      v59 = xmmword_25498D890;
      if (*((_QWORD *)&xmmword_25498D890 + 1))
      {
        v60 = (unint64_t *)(*((_QWORD *)&xmmword_25498D890 + 1) + 8);
        do
          v61 = __ldxr(v60);
        while (__stxr(v61 + 1, v60));
      }
      v62 = v110.i64[1];
      if (v110.i64[1] >= v111[0])
      {
        v103 = v59;
        v64 = (v110.i64[1] - v110.i64[0]) >> 4;
        v65 = v64 + 1;
        if ((unint64_t)(v64 + 1) >> 60)
          sub_20BDDF694();
        v66 = v111[0] - v110.i64[0];
        if ((v111[0] - v110.i64[0]) >> 3 > v65)
          v65 = v66 >> 3;
        if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF0)
          v67 = 0xFFFFFFFFFFFFFFFLL;
        else
          v67 = v65;
        v114 = v111;
        v68 = (char *)sub_20BDEA2F0((uint64_t)v111, v67);
        v70 = (__int128 *)&v68[16 * v64];
        *v70 = v103;
        v71 = (_QWORD *)v110.i64[1];
        v72 = (_QWORD *)v110.i64[0];
        if (v110.i64[1] == v110.i64[0])
        {
          v75 = vdupq_n_s64(v110.u64[1]);
          v73 = &v68[16 * v64];
        }
        else
        {
          v73 = &v68[16 * v64];
          do
          {
            v74 = *((_OWORD *)v71 - 1);
            v71 -= 2;
            *((_OWORD *)v73 - 1) = v74;
            v73 -= 16;
            *v71 = 0;
            v71[1] = 0;
          }
          while (v71 != v72);
          v75 = v110;
        }
        v63 = v70 + 1;
        v110.i64[0] = (uint64_t)v73;
        v110.i64[1] = (uint64_t)(v70 + 1);
        *(int64x2_t *)&v112[8] = v75;
        v76 = v111[0];
        v111[0] = &v68[16 * v69];
        v113 = v76;
        *(_QWORD *)v112 = v75.i64[0];
        sub_20BDEA324((uint64_t)v112);
      }
      else
      {
        *(_QWORD *)v110.i64[1] = v59;
        *(_QWORD *)(v62 + 8) = *((_QWORD *)&v59 + 1);
        v63 = (_OWORD *)(v62 + 16);
      }
      v110.i64[1] = (uint64_t)v63;
      v52 = (pxrInternal__aapl__pxrReserved__::HdCategoriesSchema *)((char *)v52 + 1);
    }
    while (v52 != this);
  }
  if (v51 && a2)
  {
    v77 = 0;
    do
    {
      v78 = &v51[(_QWORD)v77];
      v79 = v108;
      if ((unint64_t)v108 >= v109)
      {
        v83 = sub_20BFCA068(&v107, v78);
      }
      else
      {
        v80 = *v78;
        *v108 = *v78;
        if ((v80 & 7) != 0)
        {
          v81 = (unsigned int *)(v80 & 0xFFFFFFFFFFFFFFF8);
          do
            v82 = __ldxr(v81);
          while (__stxr(v82 + 2, v81));
          if ((v82 & 1) == 0)
            *v79 &= 0xFFFFFFFFFFFFFFF8;
        }
        v83 = (char *)(v79 + 1);
      }
      v108 = v83;
      v84 = xmmword_25498D8B0;
      if (*((_QWORD *)&xmmword_25498D8B0 + 1))
      {
        v85 = (unint64_t *)(*((_QWORD *)&xmmword_25498D8B0 + 1) + 8);
        do
          v86 = __ldxr(v85);
        while (__stxr(v86 + 1, v85));
      }
      v87 = v110.i64[1];
      if (v110.i64[1] >= v111[0])
      {
        v106 = v84;
        v89 = (v110.i64[1] - v110.i64[0]) >> 4;
        v90 = v89 + 1;
        if ((unint64_t)(v89 + 1) >> 60)
          sub_20BDDF694();
        v91 = v111[0] - v110.i64[0];
        if ((v111[0] - v110.i64[0]) >> 3 > v90)
          v90 = v91 >> 3;
        if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF0)
          v92 = 0xFFFFFFFFFFFFFFFLL;
        else
          v92 = v90;
        v114 = v111;
        v93 = (char *)sub_20BDEA2F0((uint64_t)v111, v92);
        v95 = (__int128 *)&v93[16 * v89];
        *v95 = v106;
        v96 = (_QWORD *)v110.i64[1];
        v97 = (_QWORD *)v110.i64[0];
        if (v110.i64[1] == v110.i64[0])
        {
          v100 = vdupq_n_s64(v110.u64[1]);
          v98 = &v93[16 * v89];
        }
        else
        {
          v98 = &v93[16 * v89];
          do
          {
            v99 = *((_OWORD *)v96 - 1);
            v96 -= 2;
            *((_OWORD *)v98 - 1) = v99;
            v98 -= 16;
            *v96 = 0;
            v96[1] = 0;
          }
          while (v96 != v97);
          v100 = v110;
        }
        v88 = v95 + 1;
        v110.i64[0] = (uint64_t)v98;
        v110.i64[1] = (uint64_t)(v95 + 1);
        *(int64x2_t *)&v112[8] = v100;
        v101 = v111[0];
        v111[0] = &v93[16 * v94];
        v113 = v101;
        *(_QWORD *)v112 = v100.i64[0];
        sub_20BDEA324((uint64_t)v112);
      }
      else
      {
        *(_QWORD *)v110.i64[1] = v84;
        *(_QWORD *)(v87 + 8) = *((_QWORD *)&v84 + 1);
        v88 = (_OWORD *)(v87 + 16);
      }
      v110.i64[1] = (uint64_t)v88;
      v77 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v77 + 1);
    }
    while (v77 != a2);
  }
  pxrInternal__aapl__pxrReserved__::HdRetainedContainerDataSource::New(((char *)v108 - v107) >> 3, (uint64_t *)v107, (uint64_t *)v110.i64[0], v112);
  *a5 = *(_OWORD *)v112;
  *(_QWORD *)v112 = &v107;
  sub_20BEEB2B8((void ***)v112);
LABEL_109:
  *(_QWORD *)v112 = &v110;
  sub_20BDE9EB0((void ***)v112);
}

void sub_20C7ECE20(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498D8C0);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdCategoriesSchema::GetFromParent(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v3 = *a1;
  if (*a1)
  {
    if (!atomic_load(&pxrInternal__aapl__pxrReserved__::HdCategoriesSchemaTokens))
      sub_20C7ED0E8(&pxrInternal__aapl__pxrReserved__::HdCategoriesSchemaTokens);
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v3 + 24))(&v14, v3);
    sub_20C7E0B14((uint64_t)&v14, &v16);
  }
  else
  {
    v16 = 0;
    v17 = 0;
  }
  sub_20C7E0E2C(a2, &v16);
  v5 = v17;
  if (v3)
  {
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v8 = v15;
    if (v15)
    {
      v9 = (unint64_t *)&v15->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        v11 = v8;
LABEL_22:
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  else if (v17)
  {
    v12 = (unint64_t *)&v17->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      v11 = v5;
      goto LABEL_22;
    }
  }
}

void sub_20C7ECFF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a11);
  if (v11)
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

unint64_t pxrInternal__aapl__pxrReserved__::HdCategoriesSchema::GetSchemaToken(pxrInternal__aapl__pxrReserved__::HdCategoriesSchema *this)
{
  unint64_t result;

  result = atomic_load(&pxrInternal__aapl__pxrReserved__::HdCategoriesSchemaTokens);
  if (!result)
    return sub_20C7ED0E8(&pxrInternal__aapl__pxrReserved__::HdCategoriesSchemaTokens);
  return result;
}

void *pxrInternal__aapl__pxrReserved__::HdCategoriesSchema::GetDefaultLocator(pxrInternal__aapl__pxrReserved__::HdCategoriesSchema *this)
{
  unsigned __int8 v1;
  const pxrInternal__aapl__pxrReserved__::TfToken *v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25498D900);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498D900))
  {
    v3 = (const pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCategoriesSchemaTokens);
    if (!v3)
      v3 = (const pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C7ED0E8(&pxrInternal__aapl__pxrReserved__::HdCategoriesSchemaTokens);
    pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HdDataSourceLocator((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&unk_25498D8C8, v3);
    __cxa_atexit((void (*)(void *))sub_20C7E0C54, &unk_25498D8C8, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498D900);
  }
  return &unk_25498D8C8;
}

void sub_20C7ED0D0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498D900);
  _Unwind_Resume(a1);
}

unint64_t sub_20C7ED0E8(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::HdCategoriesSchemaTokens_StaticTokenType *v2;
  pxrInternal__aapl__pxrReserved__::HdCategoriesSchemaTokens_StaticTokenType *v3;
  unsigned int *v5;
  unsigned int v6;
  void **v8;

  v2 = sub_20C7ED170();
  v3 = v2;
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)v2, a1))
      return (unint64_t)v3;
  }
  __clrex();
  if (v2)
  {
    v8 = (void **)((char *)v2 + 8);
    sub_20BEEB2B8(&v8);
    if ((*(_QWORD *)v3 & 7) != 0)
    {
      v5 = (unsigned int *)(*(_QWORD *)v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
    operator delete(v3);
  }
  return atomic_load(a1);
}

pxrInternal__aapl__pxrReserved__::HdCategoriesSchemaTokens_StaticTokenType *sub_20C7ED170()
{
  pxrInternal__aapl__pxrReserved__::HdCategoriesSchemaTokens_StaticTokenType *v0;

  v0 = (pxrInternal__aapl__pxrReserved__::HdCategoriesSchemaTokens_StaticTokenType *)operator new(0x20uLL);
  pxrInternal__aapl__pxrReserved__::HdCategoriesSchemaTokens_StaticTokenType::HdCategoriesSchemaTokens_StaticTokenType(v0);
  return v0;
}

void sub_20C7ED19C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 pxrInternal__aapl__pxrReserved__::HdChangeTracker::HdChangeTracker(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this)
{
  _OWORD *v1;
  uint64_t v2;
  _OWORD *v3;
  uint64_t i;
  _OWORD *v5;
  uint64_t j;
  _OWORD *v7;
  uint64_t k;
  _OWORD *v9;
  uint64_t m;
  __n128 result;

  *(_QWORD *)this = off_24C54C1B0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 1065353216;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_DWORD *)this + 20) = 1065353216;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_DWORD *)this + 30) = 1065353216;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_DWORD *)this + 40) = 1065353216;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((_DWORD *)this + 50) = 1065353216;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((_DWORD *)this + 60) = 1065353216;
  *(_OWORD *)((char *)this + 264) = 0u;
  *((_DWORD *)this + 70) = 1065353216;
  v1 = (_OWORD *)((char *)this + 816);
  v2 = 824;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  do
  {
    *(_QWORD *)((char *)this + v2) = 0;
    v2 += 24;
  }
  while (v2 != 872);
  *(_OWORD *)((char *)this + 536) = 0u;
  *(_OWORD *)((char *)this + 520) = 0u;
  *(_OWORD *)((char *)this + 504) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 776) = 0u;
  *(_OWORD *)((char *)this + 792) = 0u;
  *(_OWORD *)((char *)this + 744) = 0u;
  *(_OWORD *)((char *)this + 760) = 0u;
  *(_OWORD *)((char *)this + 712) = 0u;
  *(_OWORD *)((char *)this + 728) = 0u;
  *(_OWORD *)((char *)this + 680) = 0u;
  *(_OWORD *)((char *)this + 696) = 0u;
  *(_OWORD *)((char *)this + 648) = 0u;
  *(_OWORD *)((char *)this + 664) = 0u;
  *(_OWORD *)((char *)this + 616) = 0u;
  *(_OWORD *)((char *)this + 632) = 0u;
  *(_OWORD *)((char *)this + 584) = 0u;
  *(_OWORD *)((char *)this + 600) = 0u;
  *(_OWORD *)((char *)this + 552) = 0u;
  *(_OWORD *)((char *)this + 568) = 0u;
  __dmb(0xBu);
  *((_QWORD *)this + 36) = 0;
  __dmb(0xBu);
  *((_QWORD *)this + 101) = 0;
  *v1 = 0u;
  *((_OWORD *)this + 52) = 0u;
  *((_OWORD *)this + 53) = 0u;
  *((_QWORD *)this + 37) = v1;
  __dmb(0xBu);
  v3 = (_OWORD *)((char *)this + 1400);
  *((_QWORD *)this + 36) = 1;
  for (i = 1408; i != 1456; i += 24)
    *(_QWORD *)((char *)this + i) = 0;
  *((_OWORD *)this + 86) = 0u;
  *((_OWORD *)this + 85) = 0u;
  *((_OWORD *)this + 84) = 0u;
  *((_OWORD *)this + 83) = 0u;
  *((_OWORD *)this + 82) = 0u;
  *((_OWORD *)this + 81) = 0u;
  *((_OWORD *)this + 80) = 0u;
  *((_OWORD *)this + 79) = 0u;
  *((_OWORD *)this + 78) = 0u;
  *((_OWORD *)this + 77) = 0u;
  *((_OWORD *)this + 76) = 0u;
  *((_OWORD *)this + 75) = 0u;
  *((_OWORD *)this + 74) = 0u;
  *((_OWORD *)this + 73) = 0u;
  *((_OWORD *)this + 72) = 0u;
  *((_OWORD *)this + 71) = 0u;
  *((_OWORD *)this + 70) = 0u;
  *((_OWORD *)this + 69) = 0u;
  *((_OWORD *)this + 68) = 0u;
  *((_OWORD *)this + 67) = 0u;
  *((_OWORD *)this + 66) = 0u;
  *((_OWORD *)this + 65) = 0u;
  *((_OWORD *)this + 63) = 0u;
  *((_OWORD *)this + 64) = 0u;
  *((_OWORD *)this + 61) = 0u;
  *((_OWORD *)this + 62) = 0u;
  *((_OWORD *)this + 59) = 0u;
  *((_OWORD *)this + 60) = 0u;
  *((_OWORD *)this + 57) = 0u;
  *((_OWORD *)this + 58) = 0u;
  *((_OWORD *)this + 55) = 0u;
  *((_OWORD *)this + 56) = 0u;
  __dmb(0xBu);
  *((_QWORD *)this + 109) = 0;
  __dmb(0xBu);
  *((_QWORD *)this + 174) = 0;
  *v3 = 0u;
  *(_OWORD *)((char *)this + 1416) = 0u;
  *(_OWORD *)((char *)this + 1432) = 0u;
  *((_QWORD *)this + 110) = v3;
  __dmb(0xBu);
  v5 = (_OWORD *)((char *)this + 1984);
  *((_QWORD *)this + 109) = 1;
  for (j = 1992; j != 2040; j += 24)
    *(_QWORD *)((char *)this + j) = 0;
  *(_OWORD *)((char *)this + 1704) = 0u;
  *(_OWORD *)((char *)this + 1688) = 0u;
  *(_OWORD *)((char *)this + 1672) = 0u;
  *(_OWORD *)((char *)this + 1656) = 0u;
  *(_OWORD *)((char *)this + 1640) = 0u;
  *(_OWORD *)((char *)this + 1624) = 0u;
  *(_OWORD *)((char *)this + 1608) = 0u;
  *(_OWORD *)((char *)this + 1592) = 0u;
  *(_OWORD *)((char *)this + 1576) = 0u;
  *(_OWORD *)((char *)this + 1560) = 0u;
  *(_OWORD *)((char *)this + 1544) = 0u;
  *(_OWORD *)((char *)this + 1528) = 0u;
  *(_OWORD *)((char *)this + 1512) = 0u;
  *(_OWORD *)((char *)this + 1496) = 0u;
  *(_OWORD *)((char *)this + 1480) = 0u;
  *(_OWORD *)((char *)this + 1464) = 0u;
  *(_OWORD *)((char *)this + 1944) = 0u;
  *(_OWORD *)((char *)this + 1960) = 0u;
  *(_OWORD *)((char *)this + 1912) = 0u;
  *(_OWORD *)((char *)this + 1928) = 0u;
  *(_OWORD *)((char *)this + 1880) = 0u;
  *(_OWORD *)((char *)this + 1896) = 0u;
  *(_OWORD *)((char *)this + 1848) = 0u;
  *(_OWORD *)((char *)this + 1864) = 0u;
  *(_OWORD *)((char *)this + 1816) = 0u;
  *(_OWORD *)((char *)this + 1832) = 0u;
  *(_OWORD *)((char *)this + 1784) = 0u;
  *(_OWORD *)((char *)this + 1800) = 0u;
  *(_OWORD *)((char *)this + 1752) = 0u;
  *(_OWORD *)((char *)this + 1768) = 0u;
  *(_OWORD *)((char *)this + 1720) = 0u;
  *(_OWORD *)((char *)this + 1736) = 0u;
  __dmb(0xBu);
  *((_QWORD *)this + 182) = 0;
  __dmb(0xBu);
  *((_QWORD *)this + 247) = 0;
  *v5 = 0u;
  *((_OWORD *)this + 125) = 0u;
  *((_OWORD *)this + 126) = 0u;
  *((_QWORD *)this + 183) = v5;
  __dmb(0xBu);
  v7 = (_OWORD *)((char *)this + 2568);
  *((_QWORD *)this + 182) = 1;
  for (k = 2576; k != 2624; k += 24)
    *(_QWORD *)((char *)this + k) = 0;
  *((_OWORD *)this + 159) = 0u;
  *((_OWORD *)this + 158) = 0u;
  *((_OWORD *)this + 157) = 0u;
  *((_OWORD *)this + 156) = 0u;
  *((_OWORD *)this + 155) = 0u;
  *((_OWORD *)this + 154) = 0u;
  *((_OWORD *)this + 153) = 0u;
  *((_OWORD *)this + 152) = 0u;
  *((_OWORD *)this + 151) = 0u;
  *((_OWORD *)this + 150) = 0u;
  *((_OWORD *)this + 149) = 0u;
  *((_OWORD *)this + 148) = 0u;
  *((_OWORD *)this + 147) = 0u;
  *((_OWORD *)this + 146) = 0u;
  *((_OWORD *)this + 145) = 0u;
  *((_OWORD *)this + 144) = 0u;
  *((_OWORD *)this + 143) = 0u;
  *((_OWORD *)this + 142) = 0u;
  *((_OWORD *)this + 141) = 0u;
  *((_OWORD *)this + 140) = 0u;
  *((_OWORD *)this + 139) = 0u;
  *((_OWORD *)this + 138) = 0u;
  *((_OWORD *)this + 137) = 0u;
  *((_OWORD *)this + 136) = 0u;
  *((_OWORD *)this + 135) = 0u;
  *((_OWORD *)this + 134) = 0u;
  *((_OWORD *)this + 133) = 0u;
  *((_OWORD *)this + 132) = 0u;
  *((_OWORD *)this + 131) = 0u;
  *((_OWORD *)this + 130) = 0u;
  *((_OWORD *)this + 129) = 0u;
  *((_OWORD *)this + 128) = 0u;
  __dmb(0xBu);
  *((_QWORD *)this + 255) = 0;
  __dmb(0xBu);
  *((_QWORD *)this + 320) = 0;
  *v7 = 0u;
  *(_OWORD *)((char *)this + 2584) = 0u;
  *(_OWORD *)((char *)this + 2600) = 0u;
  *((_QWORD *)this + 256) = v7;
  __dmb(0xBu);
  v9 = (_OWORD *)((char *)this + 3152);
  *((_QWORD *)this + 255) = 1;
  for (m = 3160; m != 3208; m += 24)
    *(_QWORD *)((char *)this + m) = 0;
  *(_OWORD *)((char *)this + 2872) = 0u;
  *(_OWORD *)((char *)this + 2856) = 0u;
  *(_OWORD *)((char *)this + 2840) = 0u;
  *(_OWORD *)((char *)this + 2824) = 0u;
  *(_OWORD *)((char *)this + 2808) = 0u;
  *(_OWORD *)((char *)this + 2792) = 0u;
  *(_OWORD *)((char *)this + 2776) = 0u;
  *(_OWORD *)((char *)this + 2760) = 0u;
  *(_OWORD *)((char *)this + 2744) = 0u;
  *(_OWORD *)((char *)this + 2728) = 0u;
  *(_OWORD *)((char *)this + 2712) = 0u;
  *(_OWORD *)((char *)this + 2696) = 0u;
  *(_OWORD *)((char *)this + 2680) = 0u;
  *(_OWORD *)((char *)this + 2664) = 0u;
  *(_OWORD *)((char *)this + 2648) = 0u;
  *(_OWORD *)((char *)this + 2632) = 0u;
  *(_OWORD *)((char *)this + 3112) = 0u;
  *(_OWORD *)((char *)this + 3128) = 0u;
  *(_OWORD *)((char *)this + 3080) = 0u;
  *(_OWORD *)((char *)this + 3096) = 0u;
  *(_OWORD *)((char *)this + 3048) = 0u;
  *(_OWORD *)((char *)this + 3064) = 0u;
  *(_OWORD *)((char *)this + 3016) = 0u;
  *(_OWORD *)((char *)this + 3032) = 0u;
  *(_OWORD *)((char *)this + 2984) = 0u;
  *(_OWORD *)((char *)this + 3000) = 0u;
  *(_OWORD *)((char *)this + 2952) = 0u;
  *(_OWORD *)((char *)this + 2968) = 0u;
  *(_OWORD *)((char *)this + 2920) = 0u;
  *(_OWORD *)((char *)this + 2936) = 0u;
  *(_OWORD *)((char *)this + 2888) = 0u;
  *(_OWORD *)((char *)this + 2904) = 0u;
  __dmb(0xBu);
  *((_QWORD *)this + 328) = 0;
  __dmb(0xBu);
  *((_QWORD *)this + 393) = 0;
  *v9 = 0u;
  *((_OWORD *)this + 198) = 0u;
  *((_OWORD *)this + 199) = 0u;
  *((_QWORD *)this + 329) = v9;
  __dmb(0xBu);
  *((_QWORD *)this + 328) = 1;
  result.n128_u64[0] = 0x100000001;
  result.n128_u64[1] = 0x100000001;
  *(__n128 *)((char *)this + 3208) = result;
  *(__n128 *)((char *)this + 3224) = result;
  *((_QWORD *)this + 405) = 0x100000001;
  *((_QWORD *)this + 406) = 0;
  return result;
}

void pxrInternal__aapl__pxrReserved__::HdChangeTracker::~HdChangeTracker(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this)
{
  uint64_t v3;
  int v4;

  *(_QWORD *)this = off_24C54C1B0;
  sub_20BEB59B0((uint64_t)&v3, (uint64_t)"hd", (uint64_t)"virtual pxrInternal__aapl__pxrReserved__::HdChangeTracker::~HdChangeTracker()");
  while (v4--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v3);
  sub_20C7F11D0((unint64_t *)this + 328);
  sub_20C7F11D0((unint64_t *)this + 255);
  sub_20C7F11D0((unint64_t *)this + 182);
  sub_20C7F11D0((unint64_t *)this + 109);
  sub_20C7F11D0((unint64_t *)this + 36);
  sub_20BF20BCC((uint64_t)this + 248);
  sub_20BF20BCC((uint64_t)this + 208);
  sub_20C7F0E64((uint64_t)this + 168);
  sub_20C7F0E64((uint64_t)this + 128);
  sub_20C7F0E64((uint64_t)this + 88);
  sub_20C7F0E64((uint64_t)this + 48);
  sub_20C7F0E64((uint64_t)this + 8);
}

{
  void *v1;

  pxrInternal__aapl__pxrReserved__::HdChangeTracker::~HdChangeTracker(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::HdChangeTracker::_LogCacheAccess(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  pxrInternal__aapl__pxrReserved__::HdPerfLog *Instance;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;

  Instance = (pxrInternal__aapl__pxrReserved__::HdPerfLog *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::HdPerfLog>::_instance);
  if ((_DWORD)a3)
  {
    if (!Instance)
      Instance = (pxrInternal__aapl__pxrReserved__::HdPerfLog *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::HdPerfLog>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::HdPerfLog>::_instance);
    v10 = 0;
    pxrInternal__aapl__pxrReserved__::HdPerfLog::AddCacheHit(Instance, this, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v10);
    if ((v10 & 7) != 0)
    {
      v6 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stlxr(v7 - 2, v6));
    }
  }
  else
  {
    if (!Instance)
      Instance = (pxrInternal__aapl__pxrReserved__::HdPerfLog *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::HdPerfLog>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::HdPerfLog>::_instance);
    v10 = 0;
    pxrInternal__aapl__pxrReserved__::HdPerfLog::AddCacheMiss(Instance, this, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v10);
    if ((v10 & 7) != 0)
    {
      v8 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v9 = __ldxr(v8);
      while (__stlxr(v9 - 2, v8));
    }
  }
}

_QWORD *pxrInternal__aapl__pxrReserved__::HdChangeTracker::RprimInserted(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, int a3)
{
  const char *Text;
  const char *v7;
  char *v8;
  _QWORD *result;
  _DWORD *v10;

  if (sub_20C7ED838(22))
  {
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Rprim Added: %s\n", v7, v8, Text);
  }
  v10 = a2;
  result = sub_20C7F13DC((uint64_t)this + 8, (unsigned int *)a2, (uint64_t)&unk_20CAC184C, &v10);
  *((_DWORD *)result + 6) = a3;
  ++*((_DWORD *)this + 807);
  ++*((_DWORD *)this + 803);
  return result;
}

BOOL sub_20C7ED838(int a1)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v5;
  uint64_t v6;

  v2 = sub_20C7F1350();
  v3 = atomic_load((unsigned int *)(v2 + 4 * a1));
  if (!v3)
  {
    v5 = v2;
    v6 = sub_20C7F1350();
    pxrInternal__aapl__pxrReserved__::TfDebug::_InitializeNode((void *)(v6 + 4 * a1), off_24C54C1D0[a1]);
    v3 = atomic_load((unsigned int *)(v5 + 4 * a1));
  }
  return v3 == 2;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::RprimRemoved(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  const char *Text;
  const char *v5;
  char *v6;
  uint64_t result;

  if (sub_20C7ED838(24))
  {
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Rprim Removed: %s\n", v5, v6, Text);
  }
  result = sub_20C7F168C((_QWORD *)this + 1, (unsigned int *)a2);
  ++*((_DWORD *)this + 807);
  ++*((_DWORD *)this + 803);
  return result;
}

void pxrInternal__aapl__pxrReserved__::HdChangeTracker::MarkRprimDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::HdChangeTracker *v3;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  unint64_t v5;
  const pxrInternal__aapl__pxrReserved__::TfToken *v6;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v7;
  pxrInternal__aapl__pxrReserved__::HdChangeTracker *v8;
  pxrInternal__aapl__pxrReserved__::HdChangeTracker *v9;
  pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  _QWORD v17[2];
  std::__shared_weak_count *v18;
  int v19;
  int v20;
  uint64_t v21;
  void *v22[4];
  char v23;
  uint64_t v24;
  _QWORD v25[58];

  v3 = (pxrInternal__aapl__pxrReserved__::HdChangeTracker *)MEMORY[0x24BDAC7A8](this, a2, a3);
  v25[57] = *MEMORY[0x24BDAC8D0];
  if ((_DWORD)v5)
  {
    v6 = (const pxrInternal__aapl__pxrReserved__::TfToken *)v5;
    v7 = v4;
    v8 = v3;
    if (*((_QWORD *)v3 + 406))
    {
      v9 = (pxrInternal__aapl__pxrReserved__::HdChangeTracker *)(v5 & 0x7F800003);
      if ((v6 & 0x7F800003) != 0)
        pxrInternal__aapl__pxrReserved__::HdChangeTracker::_MarkRprimDirty(v3, v4, v9);
      if ((v6 & 0x807FFFFC) != 0)
      {
        (*(void (**)(_QWORD *__return_ptr, _QWORD, const pxrInternal__aapl__pxrReserved__::SdfPath *, pxrInternal__aapl__pxrReserved__::HdChangeTracker *))(**((_QWORD **)v8 + 406) + 16))(v17, *((_QWORD *)v8 + 406), v7, v9);
        v25[56] = 0x800000000;
        pxrInternal__aapl__pxrReserved__::HdDirtyBitsTranslator::RprimDirtyBitsToLocatorSet((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)v17, v6, (pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *)v25, v10);
        if (!pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::IsEmpty((pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *)v25))
        {
          v11 = *((_QWORD *)v8 + 406);
          sub_20C7F0F04(&v19, v7, (uint64_t)v25);
          v24 = 0x1000000001;
          sub_20C7F16D8((uint64_t)&v19, (uint64_t)v22, (uint64_t)v22);
          (*(void (**)(uint64_t, void **))(*(_QWORD *)v11 + 56))(v11, v22);
          sub_20C7F17EC(v22);
          sub_20C7F1148((uint64_t)&v21);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
          sub_20BFD265C(&v19);
        }
        sub_20C7F1148((uint64_t)v25);
        v12 = v18;
        if (v18)
        {
          p_shared_owners = (unint64_t *)&v18->__shared_owners_;
          do
            v14 = __ldaxr(p_shared_owners);
          while (__stlxr(v14 - 1, p_shared_owners));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        if ((v17[0] & 7) != 0)
        {
          v15 = (unsigned int *)(v17[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v16 = __ldxr(v15);
          while (__stlxr(v16 - 2, v15));
        }
      }
    }
    else
    {
      if ((v5 & 0x40) != 0)
        v5 = v5 | 0x8820;
      else
        v5 = v5;
      pxrInternal__aapl__pxrReserved__::HdChangeTracker::_MarkRprimDirty(v3, v4, (pxrInternal__aapl__pxrReserved__::HdChangeTracker *)v5);
    }
  }
  else
  {
    v22[0] = "hd/changeTracker.cpp";
    v22[1] = "MarkRprimDirty";
    v22[2] = (void *)114;
    v22[3] = "void pxrInternal__aapl__pxrReserved__::HdChangeTracker::MarkRprimDirty(const SdfPath &, HdDirtyBits)";
    v23 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v22, 1, (pxrInternal__aapl__pxrReserved__ *)"MarkRprimDirty called with bits == clean!");
  }
}

void sub_20C7EDB5C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20BDC12F4(a1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdChangeTracker::_MarkRprimDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::HdChangeTracker *a3)
{
  _QWORD *v6;
  int v7;
  const char *Text;
  const char *v9;
  char *v10;
  void **v11;
  const char *v12;
  const char *v13;
  char *v14;
  char *v15;
  void *__p[2];
  uint64_t v17;
  const char *v18;
  char v19;

  v6 = sub_20C0AD934((_QWORD *)this + 1, (unsigned int *)a2);
  if (v6
    || (__p[0] = "hd/changeTracker.cpp",
        __p[1] = "_MarkRprimDirty",
        v17 = 158,
        v18 = "void pxrInternal__aapl__pxrReserved__::HdChangeTracker::_MarkRprimDirty(const SdfPath &, HdDirtyBits)",
        v19 = 0,
        v12 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2),
        v15 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"%s\n", v13, v14, v12), (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)__p, "it != _rprimState.end()", v15) & 1) != 0))
  {
    v7 = *((_DWORD *)v6 + 6);
    if (((~v7 | 0xC0000) & a3) != 0)
    {
      if ((_DWORD)a3 == 1)
      {
        *((_DWORD *)v6 + 6) = v7 | 1;
        return;
      }
      if ((v7 & 2) == 0)
      {
        if (sub_20C7ED838(34))
        {
          Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
          pxrInternal__aapl__pxrReserved__::HdChangeTracker::StringifyDirtyBits(a3, __p);
          if (v17 >= 0)
            v11 = __p;
          else
            v11 = (void **)__p[0];
          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"New Varying State %s: %s\n", v9, v10, Text, v11);
          if (SHIBYTE(v17) < 0)
            operator delete(__p[0]);
        }
        LODWORD(a3) = a3 | 2;
        ++*((_DWORD *)this + 802);
      }
      *((_DWORD *)v6 + 6) = a3 | v7;
      ++*((_DWORD *)this + 807);
      if (((unsigned __int16)a3 & 0x400) != 0)
      {
        ++*((_DWORD *)this + 808);
        if ((a3 & 0x20000) == 0)
        {
LABEL_15:
          if ((a3 & 0x80000) == 0)
            goto LABEL_17;
          goto LABEL_16;
        }
      }
      else if ((a3 & 0x20000) == 0)
      {
        goto LABEL_15;
      }
      ++*((_DWORD *)this + 809);
      if ((a3 & 0x80000) == 0)
      {
LABEL_17:
        if ((a3 & 0xC0000) != 0)
          ++*((_DWORD *)this + 803);
        return;
      }
LABEL_16:
      ++*((_DWORD *)this + 810);
      goto LABEL_17;
    }
  }
}

void sub_20C7EDD7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_DWORD *sub_20C7EDD98(_DWORD *a1)
{
  sub_20C7F1148((uint64_t)(a1 + 2));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);
  return sub_20BFD265C(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::HdChangeTracker::StringifyDirtyBits@<X0>(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this@<X0>, _QWORD *a2@<X8>)
{
  unsigned int v2;
  unint64_t v4;
  const char *v5;
  BOOL v6;
  uint64_t v7;
  _QWORD v8[2];
  _QWORD v9[11];
  char v10;
  uint64_t v11;

  if (!(_DWORD)this)
    return sub_20BDDC0E4(a2, "Clean");
  v2 = this;
  sub_20BDDBD68((uint64_t)v8);
  if ((v2 & 2) != 0)
    sub_20BDDC1C8(v9, (uint64_t)"<Varying> ", 10);
  if ((v2 & 1) != 0)
    sub_20BDDC1C8(v9, (uint64_t)"<InitRepr> ", 11);
  if ((v2 & 4) != 0)
    sub_20BDDC1C8(v9, (uint64_t)" PrimID ", 8);
  if ((v2 & 8) != 0)
    sub_20BDDC1C8(v9, (uint64_t)"Extent ", 7);
  if ((v2 & 0x10) != 0)
    sub_20BDDC1C8(v9, (uint64_t)"DisplayStyle ", 13);
  if ((v2 & 0x20) != 0)
    sub_20BDDC1C8(v9, (uint64_t)"Points ", 7);
  if ((v2 & 0x40) != 0)
    sub_20BDDC1C8(v9, (uint64_t)"Primvar ", 8);
  if ((v2 & 0x80) != 0)
    sub_20BDDC1C8(v9, (uint64_t)"MaterialId ", 11);
  if ((v2 & 0x100) != 0)
    sub_20BDDC1C8(v9, (uint64_t)"Topology ", 9);
  if ((v2 & 0x200) != 0)
    sub_20BDDC1C8(v9, (uint64_t)"Transform ", 10);
  if ((v2 & 0x400) != 0)
    sub_20BDDC1C8(v9, (uint64_t)"Visibility ", 11);
  if ((v2 & 0x800) != 0)
    sub_20BDDC1C8(v9, (uint64_t)"Normals ", 8);
  if ((v2 & 0x1000) != 0)
    sub_20BDDC1C8(v9, (uint64_t)"DoubleSided ", 12);
  if ((v2 & 0x2000) != 0)
    sub_20BDDC1C8(v9, (uint64_t)"CullStyle ", 10);
  if ((v2 & 0x4000) != 0)
    sub_20BDDC1C8(v9, (uint64_t)"SubdivTags ", 11);
  if ((v2 & 0x8000) != 0)
    sub_20BDDC1C8(v9, (uint64_t)"Widths ", 7);
  if ((v2 & 0x10000) != 0)
    sub_20BDDC1C8(v9, (uint64_t)"Instancer ", 10);
  if ((v2 & 0x20000) != 0)
    sub_20BDDC1C8(v9, (uint64_t)"InstanceIndex ", 14);
  if ((v2 & 0x40000) != 0)
    sub_20BDDC1C8(v9, (uint64_t)"Repr ", 5);
  if ((v2 & 0x80000) != 0)
    sub_20BDDC1C8(v9, (uint64_t)"RenderTag ", 10);
  if ((v2 & 0x100000) != 0)
    sub_20BDDC1C8(v9, (uint64_t)"ComputationPrimvarDesc ", 23);
  if ((v2 & 0x200000) != 0)
    sub_20BDDC1C8(v9, (uint64_t)"Categories ", 11);
  if ((v2 & 0x400000) != 0)
    sub_20BDDC1C8(v9, (uint64_t)"VolumeField ", 12);
  if ((v2 & 0x800000) != 0)
  {
    sub_20BDDC1C8(v9, (uint64_t)"NewRepr ", 8);
LABEL_53:
    sub_20BDDC1C8(v9, (uint64_t)"CustomBits:", 11);
    v4 = 0x1000000;
    do
    {
      if ((v4 & v2) != 0)
        v5 = "1";
      else
        v5 = "0";
      sub_20BDDC1C8(v9, (uint64_t)v5, 1);
      v6 = v4 >= 0x20000001;
      v4 *= 2;
    }
    while (!v6);
    goto LABEL_59;
  }
  if (v2 >= 0x800000)
    goto LABEL_53;
LABEL_59:
  std::stringbuf::str();
  v8[0] = *MEMORY[0x24BEDB7F0];
  v7 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v8 + *(_QWORD *)(v8[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v9[0] = v7;
  v9[1] = MEMORY[0x24BEDB848] + 16;
  if (v10 < 0)
    operator delete((void *)v9[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return (_QWORD *)MEMORY[0x212B92EB0](&v11);
}

void sub_20C7EE1BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDDBE98((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdChangeTracker::ResetVaryingState(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this)
{
  const char *v2;
  char *v3;
  uint64_t v4;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  if (sub_20C7ED838(34))
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Resetting Rprim Varying State: varyingStateVersion (%d -> %d)\n", v2, v3, *((unsigned int *)this + 802), (*((_DWORD *)this + 802) + 1));
  ++*((_DWORD *)this + 802);
  v7 = *((_QWORD *)this + 3);
  v8 = 0;
  if (v7)
  {
    do
    {
      if ((*(_DWORD *)(*sub_20C7EE278(&v7, (uint64_t)v2, v3) + 24) & 0xFFFFFFFD) == 0)
      {
        v6 = sub_20C7EE278(&v7, v4, v5);
        *(_DWORD *)(*v6 + 24) &= ~2u;
      }
      sub_20C7EE2F0((uint64_t)&v7);
    }
    while (v7 != v8);
  }
}

_QWORD *sub_20C7EE278(_QWORD *result, uint64_t a2, char *a3)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::TfHashMap<pxrIntern"
            "al__aapl__pxrReserved__::SdfPath, unsigned int, pxrInternal__aapl__pxrReserved__::SdfPath::Hash>>::operator-"
            ">() [T = pxrInternal__aapl__pxrReserved__::TfHashMap<pxrInternal__aapl__pxrReserved__::SdfPath, unsigned int"
            ", pxrInternal__aapl__pxrReserved__::SdfPath::Hash>, Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

uint64_t sub_20C7EE2F0(uint64_t a1)
{
  _QWORD v3[4];
  char v4;

  if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::TfHas"
            "hMap<pxrInternal__aapl__pxrReserved__::SdfPath, unsigned int, pxrInternal__aapl__pxrReserved__::SdfPath::Has"
            "h>>::operator++() [T = pxrInternal__aapl__pxrReserved__::TfHashMap<pxrInternal__aapl__pxrReserved__::SdfPath"
            ", unsigned int, pxrInternal__aapl__pxrReserved__::SdfPath::Hash>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *(_QWORD *)a1 = **(_QWORD **)a1;
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::ResetRprimVaryingState(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  const char *Text;
  const char *v5;
  char *v6;
  uint64_t result;
  uint64_t v8;
  const char *v9;
  const char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;

  if (sub_20C7ED838(34))
  {
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Resetting Rprim Varying State: %s\n", v5, v6, Text);
  }
  result = (uint64_t)sub_20C0AD934((_QWORD *)this + 1, (unsigned int *)a2);
  v8 = result;
  if (result
    || (LOBYTE(v14) = 0,
        v9 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2),
        v12 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"%s\n", v10, v11, v9, "hd/changeTracker.cpp", "ResetRprimVaryingState", 247, "void pxrInternal__aapl__pxrReserved__::HdChangeTracker::ResetRprimVaryingState(const SdfPath &)", v14), result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v13, "it != _rprimState.end()", v12), (result & 1) != 0))
  {
    *(_DWORD *)(v8 + 24) &= ~2u;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::MarkRprimClean(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, int a3)
{
  const char *Text;
  const char *v7;
  char *v8;
  uint64_t result;
  uint64_t v10;
  _QWORD v11[4];
  char v12;

  if (sub_20C7ED838(23))
  {
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Rprim Cleaned: %s\n", v7, v8, Text);
  }
  result = (uint64_t)sub_20C0AD934((_QWORD *)this + 1, (unsigned int *)a2);
  v10 = result;
  if (result
    || (v11[0] = "hd/changeTracker.cpp",
        v11[1] = "MarkRprimClean",
        v11[2] = 263,
        v11[3] = "void pxrInternal__aapl__pxrReserved__::HdChangeTracker::MarkRprimClean(const SdfPath &, HdDirtyBits)",
        v12 = 0,
        result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v11, "it != _rprimState.end()", 0),
        (result & 1) != 0))
  {
    *(_DWORD *)(v10 + 24) = *(_DWORD *)(v10 + 24) & 2 | a3;
  }
  return result;
}

int32x2_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::InstancerInserted(int32x2_t *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, int a3)
{
  const char *Text;
  const char *v7;
  char *v8;
  int32x2_t result;
  _DWORD *v10;

  if (sub_20C7ED838(17))
  {
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Instancer Added: %s\n", v7, v8, Text);
  }
  v10 = a2;
  *((_DWORD *)sub_20C7F13DC((uint64_t)&this[6], (unsigned int *)a2, (uint64_t)&unk_20CAC184C, &v10) + 6) = a3;
  result = vadd_s32(this[403], (int32x2_t)0x100000001);
  this[403] = result;
  return result;
}

int32x2_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::InstancerRemoved(int32x2_t *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  const char *Text;
  const char *v5;
  char *v6;
  int32x2_t result;

  if (sub_20C7ED838(19))
  {
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Instancer Removed: %s\n", v5, v6, Text);
  }
  sub_20C7F168C(&this[6], (unsigned int *)a2);
  result = vadd_s32(this[403], (int32x2_t)0x100000001);
  this[403] = result;
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::HdChangeTracker::AddInstancerRprimDependency(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  return pxrInternal__aapl__pxrReserved__::HdChangeTracker::_AddDependency((uint64_t)this, (uint64_t *)this + 36, (unsigned int *)a2, a3);
}

_QWORD *pxrInternal__aapl__pxrReserved__::HdChangeTracker::_AddDependency(uint64_t a1, uint64_t *a2, unsigned int *a3, pxrInternal__aapl__pxrReserved__::SdfPath *a4)
{
  uint64_t v6;
  char v7;
  uint64_t v8;

  v6 = 0;
  v7 = 0;
  v8 = 0;
  sub_20C7EEC70(a2, (uint64_t)&v6, a3);
  sub_20C0A7BE0((uint64_t **)(v8 + 24), a4, a4);
  v8 = 0;
  return sub_20BEBF29C(&v6);
}

void sub_20C7EE654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  a11 = 0;
  sub_20BEBF29C(&a9);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::HdChangeTracker::RemoveInstancerRprimDependency(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  return pxrInternal__aapl__pxrReserved__::HdChangeTracker::_RemoveDependency((uint64_t)this, (uint64_t *)this + 36, (unsigned int *)a2, a3);
}

_QWORD *pxrInternal__aapl__pxrReserved__::HdChangeTracker::_RemoveDependency(uint64_t a1, uint64_t *a2, unsigned int *a3, const pxrInternal__aapl__pxrReserved__::SdfPath *a4)
{
  uint64_t v7;
  char v8;
  uint64_t v9;

  v7 = 0;
  v8 = 0;
  v9 = 0;
  if ((sub_20C7EE974(a2, (uint64_t)&v7, a3) & 1) != 0)
  {
    sub_20C137B08((uint64_t **)(v9 + 24), a4);
    if (!*(_QWORD *)(v9 + 40))
      sub_20C7F1FE0(a2, (uint64_t)&v7);
  }
  v9 = 0;
  return sub_20BEBF29C(&v7);
}

void sub_20C7EE6F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  a11 = 0;
  sub_20BEBF29C(&a9);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::HdChangeTracker::AddInstancerInstancerDependency(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  return pxrInternal__aapl__pxrReserved__::HdChangeTracker::_AddDependency((uint64_t)this, (uint64_t *)this + 182, (unsigned int *)a2, a3);
}

_QWORD *pxrInternal__aapl__pxrReserved__::HdChangeTracker::RemoveInstancerInstancerDependency(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  return pxrInternal__aapl__pxrReserved__::HdChangeTracker::_RemoveDependency((uint64_t)this, (uint64_t *)this + 182, (unsigned int *)a2, a3);
}

_QWORD *pxrInternal__aapl__pxrReserved__::HdChangeTracker::AddSprimSprimDependency(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  _QWORD *v6;

  v6 = pxrInternal__aapl__pxrReserved__::HdChangeTracker::_AddDependency((uint64_t)this, (uint64_t *)this + 255, (unsigned int *)a2, a3);
  return pxrInternal__aapl__pxrReserved__::HdChangeTracker::_AddDependency((uint64_t)v6, (uint64_t *)this + 328, (unsigned int *)a3, a2);
}

_QWORD *pxrInternal__aapl__pxrReserved__::HdChangeTracker::RemoveSprimSprimDependency(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  _QWORD *v6;

  v6 = pxrInternal__aapl__pxrReserved__::HdChangeTracker::_RemoveDependency((uint64_t)this, (uint64_t *)this + 255, (unsigned int *)a2, a3);
  return pxrInternal__aapl__pxrReserved__::HdChangeTracker::_RemoveDependency((uint64_t)v6, (uint64_t *)this + 328, (unsigned int *)a3, a2);
}

uint64_t *pxrInternal__aapl__pxrReserved__::HdChangeTracker::RemoveSprimFromSprimSprimDependencies(uint64_t *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t *v5;
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  BOOL v11;
  uint64_t *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v2 = this[320];
  __dmb(0xBu);
  if (v2)
  {
    v4 = this;
    v5 = this + 255;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    if (sub_20C7EE974(this + 255, (uint64_t)&v18, (unsigned int *)a2))
    {
      v6 = *(unsigned int **)(v20 + 24);
      v7 = (unsigned int *)(v20 + 32);
      if (v6 != (unsigned int *)(v20 + 32))
      {
        do
        {
          pxrInternal__aapl__pxrReserved__::HdChangeTracker::MarkSprimDirty((pxrInternal__aapl__pxrReserved__::HdChangeTracker *)v4, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v6 + 7), 0xFFFFFFFFLL);
          pxrInternal__aapl__pxrReserved__::HdChangeTracker::_RemoveDependency(v8, v4 + 328, v6 + 7, a2);
          v9 = (unsigned int *)*((_QWORD *)v6 + 1);
          if (v9)
          {
            do
            {
              v10 = v9;
              v9 = *(unsigned int **)v9;
            }
            while (v9);
          }
          else
          {
            do
            {
              v10 = (unsigned int *)*((_QWORD *)v6 + 2);
              v11 = *(_QWORD *)v10 == (_QWORD)v6;
              v6 = v10;
            }
            while (!v11);
          }
          v6 = v10;
        }
        while (v10 != v7);
      }
      sub_20C7F1FE0(v5, (uint64_t)&v18);
    }
    v20 = 0;
    sub_20BEBF29C(&v18);
    v18 = 0;
    v19 = 0;
    v12 = v4 + 328;
    v20 = 0;
    v13 = sub_20C7EE974(v12, (uint64_t)&v18, (unsigned int *)a2);
    if ((_DWORD)v13)
    {
      v14 = *(unsigned int **)(v20 + 24);
      v15 = (unsigned int *)(v20 + 32);
      if (v14 != (unsigned int *)(v20 + 32))
      {
        do
        {
          v13 = (uint64_t)pxrInternal__aapl__pxrReserved__::HdChangeTracker::_RemoveDependency(v13, v5, v14 + 7, a2);
          v16 = (unsigned int *)*((_QWORD *)v14 + 1);
          if (v16)
          {
            do
            {
              v17 = v16;
              v16 = *(unsigned int **)v16;
            }
            while (v16);
          }
          else
          {
            do
            {
              v17 = (unsigned int *)*((_QWORD *)v14 + 2);
              v11 = *(_QWORD *)v17 == (_QWORD)v14;
              v14 = v17;
            }
            while (!v11);
          }
          v14 = v17;
        }
        while (v17 != v15);
      }
      sub_20C7F1FE0(v12, (uint64_t)&v18);
    }
    v20 = 0;
    return sub_20BEBF29C(&v18);
  }
  return this;
}

void sub_20C7EE950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  a11 = 0;
  sub_20BEBF29C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C7EE974(uint64_t *a1, uint64_t a2, unsigned int *a3)
{
  if (*(_QWORD *)(a2 + 16))
  {
    sub_20BEBF2D0(a2);
    *(_QWORD *)(a2 + 16) = 0;
  }
  return sub_20C7F188C(a1, 0, a3, 0, a2, 1, (uint64_t (*)(uint64_t, unsigned int *, uint64_t))sub_20C7F1BC4, 0);
}

void pxrInternal__aapl__pxrReserved__::HdChangeTracker::MarkSprimDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3)
{
  uint64_t v3;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  const pxrInternal__aapl__pxrReserved__::TfToken *v5;
  const pxrInternal__aapl__pxrReserved__::TfToken *v6;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v7;
  pxrInternal__aapl__pxrReserved__::HdChangeTracker *v8;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  _QWORD v17[2];
  std::__shared_weak_count *v18;
  int v19;
  int v20;
  uint64_t v21;
  void *v22[4];
  char v23;
  uint64_t v24;
  _QWORD v25[58];

  v3 = MEMORY[0x24BDAC7A8](this, a2, a3);
  v25[57] = *MEMORY[0x24BDAC8D0];
  if ((_DWORD)v5)
  {
    v6 = v5;
    v7 = v4;
    v8 = (pxrInternal__aapl__pxrReserved__::HdChangeTracker *)v3;
    v9 = *(_QWORD *)(v3 + 3248);
    if (v9)
    {
      (*(void (**)(_QWORD *__return_ptr, uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *))(*(_QWORD *)v9 + 16))(v17, v9, v4);
      v25[56] = 0x800000000;
      pxrInternal__aapl__pxrReserved__::HdDirtyBitsTranslator::SprimDirtyBitsToLocatorSet((pxrInternal__aapl__pxrReserved__::HdDirtyBitsTranslator *)v17, v6, (pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *)v25, v10);
      if (!pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::IsEmpty((pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *)v25))
      {
        v11 = *((_QWORD *)v8 + 406);
        sub_20C7F0F04(&v19, v7, (uint64_t)v25);
        v24 = 0x1000000001;
        sub_20C7F16D8((uint64_t)&v19, (uint64_t)v22, (uint64_t)v22);
        (*(void (**)(uint64_t, void **))(*(_QWORD *)v11 + 56))(v11, v22);
        sub_20C7F17EC(v22);
        sub_20C7F1148((uint64_t)&v21);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
        sub_20BFD265C(&v19);
      }
      sub_20C7F1148((uint64_t)v25);
      v12 = v18;
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      if ((v17[0] & 7) != 0)
      {
        v15 = (unsigned int *)(v17[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v16 = __ldxr(v15);
        while (__stlxr(v16 - 2, v15));
      }
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::HdChangeTracker::_MarkSprimDirty(v8, v4, (int)v5);
    }
  }
  else
  {
    v22[0] = "hd/changeTracker.cpp";
    v22[1] = "MarkSprimDirty";
    v22[2] = (void *)608;
    v22[3] = "void pxrInternal__aapl__pxrReserved__::HdChangeTracker::MarkSprimDirty(const SdfPath &, HdDirtyBits)";
    v23 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v22, 1, (pxrInternal__aapl__pxrReserved__ *)"MarkSprimDirty called with bits == clean!");
  }
}

void sub_20C7EEBF0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20BDC12F4(a1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C7EEC70(uint64_t *a1, uint64_t a2, unsigned int *a3)
{
  if (*(_QWORD *)(a2 + 16))
  {
    sub_20BEBF2D0(a2);
    *(_QWORD *)(a2 + 16) = 0;
  }
  return sub_20C7F188C(a1, 1, a3, 0, a2, 1, (uint64_t (*)(uint64_t, unsigned int *, uint64_t))sub_20C7F2134, 0);
}

_QWORD *pxrInternal__aapl__pxrReserved__::HdChangeTracker::TaskInserted(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, int a3)
{
  const char *Text;
  const char *v7;
  char *v8;
  _QWORD *result;
  _DWORD *v10;

  if (sub_20C7ED838(32))
  {
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Task Added: %s\n", v7, v8, Text);
  }
  v10 = a2;
  result = sub_20C7F13DC((uint64_t)this + 88, (unsigned int *)a2, (uint64_t)&unk_20CAC184C, &v10);
  *((_DWORD *)result + 6) = a3;
  ++*((_DWORD *)this + 807);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::TaskRemoved(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  const char *Text;
  const char *v5;
  char *v6;
  uint64_t result;

  if (sub_20C7ED838(33))
  {
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Task Removed: %s\n", v5, v6, Text);
  }
  result = sub_20C7F168C((_QWORD *)this + 11, (unsigned int *)a2);
  ++*((_DWORD *)this + 807);
  return result;
}

void pxrInternal__aapl__pxrReserved__::HdChangeTracker::MarkTaskDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, int a3)
{
  _QWORD *v6;
  int v7;
  const char *Text;
  const char *v9;
  char *v10;
  char *v11;
  _QWORD v12[4];
  uint64_t v13;

  if (a3)
  {
    v6 = sub_20C0AD934((_QWORD *)this + 11, (unsigned int *)a2);
    if (v6
      || (LOBYTE(v13) = 0,
          Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2),
          v11 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"Task Id = %s", v9, v10, Text, "hd/changeTracker.cpp", "MarkTaskDirty", 422, "void pxrInternal__aapl__pxrReserved__::HdChangeTracker::MarkTaskDirty(const SdfPath &, HdDirtyBits)", v13), (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v12, "it != _taskState.end()", v11) & 1) != 0))
    {
      v7 = *((_DWORD *)v6 + 6);
      if ((a3 & 0x10) != 0 && (v7 & 0x10) == 0)
        ++*((_DWORD *)this + 811);
      *((_DWORD *)v6 + 6) = v7 | a3;
      ++*((_DWORD *)this + 807);
    }
  }
  else
  {
    v12[0] = "hd/changeTracker.cpp";
    v12[1] = "MarkTaskDirty";
    v12[2] = 417;
    v12[3] = "void pxrInternal__aapl__pxrReserved__::HdChangeTracker::MarkTaskDirty(const SdfPath &, HdDirtyBits)";
    LOBYTE(v13) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"MarkTaskDirty called with bits == clean!");
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::GetTaskDirtyBits(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  _QWORD *v2;
  uint64_t result;
  char v4;
  _QWORD v5[4];
  char v6;

  v2 = sub_20C0AD934((_QWORD *)this + 11, (unsigned int *)a2);
  if (v2)
    return *((unsigned int *)v2 + 6);
  v5[0] = "hd/changeTracker.cpp";
  v5[1] = "GetTaskDirtyBits";
  v5[2] = 438;
  v5[3] = "HdDirtyBits pxrInternal__aapl__pxrReserved__::HdChangeTracker::GetTaskDirtyBits(const SdfPath &)";
  v6 = 0;
  v4 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v5, "it != _taskState.end()", 0);
  result = 0;
  if ((v4 & 1) != 0)
    return *((unsigned int *)v2 + 6);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::MarkTaskClean(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, int a3)
{
  uint64_t result;
  uint64_t v5;
  _QWORD v6[4];
  char v7;

  result = (uint64_t)sub_20C0AD934((_QWORD *)this + 11, (unsigned int *)a2);
  v5 = result;
  if (result
    || (v6[0] = "hd/changeTracker.cpp",
        v6[1] = "MarkTaskClean",
        v6[2] = 447,
        v6[3] = "void pxrInternal__aapl__pxrReserved__::HdChangeTracker::MarkTaskClean(const SdfPath &, HdDirtyBits)",
        v7 = 0,
        result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v6, "it != _taskState.end()", 0),
        (result & 1) != 0))
  {
    *(_DWORD *)(v5 + 24) = *(_DWORD *)(v5 + 24) & 2 | a3;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::GetRenderTagVersion(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this)
{
  return *((unsigned int *)this + 810);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::GetTaskRenderTagsVersion(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this)
{
  return *((unsigned int *)this + 811);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::GetInstancerDirtyBits(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  _QWORD *v2;
  uint64_t result;
  char v4;
  _QWORD v5[4];
  char v6;

  v2 = sub_20C0AD934((_QWORD *)this + 6, (unsigned int *)a2);
  if (v2)
    return *((unsigned int *)v2 + 6);
  v5[0] = "hd/changeTracker.cpp";
  v5[1] = "GetInstancerDirtyBits";
  v5[2] = 473;
  v5[3] = "HdDirtyBits pxrInternal__aapl__pxrReserved__::HdChangeTracker::GetInstancerDirtyBits(const SdfPath &)";
  v6 = 0;
  v4 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v5, "it != _instancerState.end()", 0);
  result = 0;
  if ((v4 & 1) != 0)
    return *((unsigned int *)v2 + 6);
  return result;
}

void pxrInternal__aapl__pxrReserved__::HdChangeTracker::MarkInstancerDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3)
{
  uint64_t v3;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  const pxrInternal__aapl__pxrReserved__::TfToken *v5;
  const pxrInternal__aapl__pxrReserved__::TfToken *v6;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v7;
  pxrInternal__aapl__pxrReserved__::HdChangeTracker *v8;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  _QWORD v17[2];
  std::__shared_weak_count *v18;
  int v19;
  int v20;
  uint64_t v21;
  void *v22[4];
  char v23;
  uint64_t v24;
  _QWORD v25[58];

  v3 = MEMORY[0x24BDAC7A8](this, a2, a3);
  v25[57] = *MEMORY[0x24BDAC8D0];
  if ((_DWORD)v5)
  {
    v6 = v5;
    v7 = v4;
    v8 = (pxrInternal__aapl__pxrReserved__::HdChangeTracker *)v3;
    v9 = *(_QWORD *)(v3 + 3248);
    if (v9)
    {
      (*(void (**)(_QWORD *__return_ptr, uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *))(*(_QWORD *)v9 + 16))(v17, v9, v4);
      v25[56] = 0x800000000;
      pxrInternal__aapl__pxrReserved__::HdDirtyBitsTranslator::InstancerDirtyBitsToLocatorSet((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)v17, v6, (pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *)v25, v10);
      if (!pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::IsEmpty((pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *)v25))
      {
        v11 = *((_QWORD *)v8 + 406);
        sub_20C7F0F04(&v19, v7, (uint64_t)v25);
        v24 = 0x1000000001;
        sub_20C7F16D8((uint64_t)&v19, (uint64_t)v22, (uint64_t)v22);
        (*(void (**)(uint64_t, void **))(*(_QWORD *)v11 + 56))(v11, v22);
        sub_20C7F17EC(v22);
        sub_20C7F1148((uint64_t)&v21);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
        sub_20BFD265C(&v19);
      }
      sub_20C7F1148((uint64_t)v25);
      v12 = v18;
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      if ((v17[0] & 7) != 0)
      {
        v15 = (unsigned int *)(v17[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v16 = __ldxr(v15);
        while (__stlxr(v16 - 2, v15));
      }
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::HdChangeTracker::_MarkInstancerDirty(v8, v4, (int)v5);
    }
  }
  else
  {
    v22[0] = "hd/changeTracker.cpp";
    v22[1] = "MarkInstancerDirty";
    v22[2] = (void *)482;
    v22[3] = "void pxrInternal__aapl__pxrReserved__::HdChangeTracker::MarkInstancerDirty(const SdfPath &, HdDirtyBits)";
    v23 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v22, 1, (pxrInternal__aapl__pxrReserved__ *)"MarkInstancerDirty called with bits == clean!");
  }
}

void sub_20C7EF280(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20BDC12F4(a1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::_MarkInstancerDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, int a3)
{
  uint64_t result;
  uint64_t v7;
  int v8;
  int v9;
  pxrInternal__aapl__pxrReserved__::HdChangeTracker *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char *v30;
  const char *v31;
  uint64_t v32;
  const char *v33;
  char v34;

  result = (uint64_t)sub_20C0AD934((_QWORD *)this + 6, (unsigned int *)a2);
  v7 = result;
  if (result
    || (v30 = "hd/changeTracker.cpp",
        v31 = "_MarkInstancerDirty",
        v32 = 504,
        v33 = "void pxrInternal__aapl__pxrReserved__::HdChangeTracker::_MarkInstancerDirty(const SdfPath &, HdDirtyBits)",
        v34 = 0,
        result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v30, "it != _instancerState.end()", 0), (result & 1) != 0))
  {
    v8 = *(_DWORD *)(v7 + 24);
    if ((a3 & ~v8) != 0)
    {
      *(_DWORD *)(v7 + 24) = v8 | a3;
      ++*((_DWORD *)this + 807);
      v9 = a3 & 0x200;
      if ((a3 & 0x20000) != 0)
      {
        v10 = (pxrInternal__aapl__pxrReserved__::HdChangeTracker *)(v9 | 0x30000u);
        ++*((_DWORD *)this + 809);
      }
      else
      {
        v10 = (pxrInternal__aapl__pxrReserved__::HdChangeTracker *)(v9 | 0x10000u);
      }
      v30 = 0;
      LOBYTE(v31) = 0;
      v32 = 0;
      if (sub_20C7EF5B4((uint64_t *)this + 182, (uint64_t)&v30, (unsigned int *)a2))
      {
        v11 = *(_QWORD **)(v32 + 24);
        v12 = (_QWORD *)(v32 + 32);
        if (v11 != (_QWORD *)(v32 + 32))
        {
          do
          {
            pxrInternal__aapl__pxrReserved__::HdChangeTracker::_MarkInstancerDirty(this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v11 + 28), v10);
            v13 = (_QWORD *)v11[1];
            if (v13)
            {
              do
              {
                v14 = v13;
                v13 = (_QWORD *)*v13;
              }
              while (v13);
            }
            else
            {
              do
              {
                v14 = (_QWORD *)v11[2];
                v15 = *v14 == (_QWORD)v11;
                v11 = v14;
              }
              while (!v15);
            }
            v11 = v14;
          }
          while (v14 != v12);
        }
      }
      v27 = 0;
      v28 = 0;
      v29 = 0;
      if (sub_20C7EF5B4((uint64_t *)this + 36, (uint64_t)&v27, (unsigned int *)a2))
      {
        v16 = *(_QWORD **)(v29 + 24);
        v17 = (_QWORD *)(v29 + 32);
        if (v16 != (_QWORD *)(v29 + 32))
        {
          do
          {
            pxrInternal__aapl__pxrReserved__::HdChangeTracker::_MarkRprimDirty(this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v16 + 28), v10);
            v18 = (_QWORD *)v16[1];
            if (v18)
            {
              do
              {
                v19 = v18;
                v18 = (_QWORD *)*v18;
              }
              while (v18);
            }
            else
            {
              do
              {
                v19 = (_QWORD *)v16[2];
                v15 = *v19 == (_QWORD)v16;
                v16 = v19;
              }
              while (!v15);
            }
            v16 = v19;
          }
          while (v19 != v17);
        }
      }
      v24 = 0;
      v25 = 0;
      v26 = 0;
      if (sub_20C7EF5B4((uint64_t *)this + 109, (uint64_t)&v24, (unsigned int *)a2))
      {
        v20 = *(_QWORD **)(v26 + 24);
        v21 = (_QWORD *)(v26 + 32);
        if (v20 != (_QWORD *)(v26 + 32))
        {
          do
          {
            pxrInternal__aapl__pxrReserved__::HdChangeTracker::_MarkSprimDirty(this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v20 + 28), (int)v10);
            v22 = (_QWORD *)v20[1];
            if (v22)
            {
              do
              {
                v23 = v22;
                v22 = (_QWORD *)*v22;
              }
              while (v22);
            }
            else
            {
              do
              {
                v23 = (_QWORD *)v20[2];
                v15 = *v23 == (_QWORD)v20;
                v20 = v23;
              }
              while (!v15);
            }
            v20 = v23;
          }
          while (v23 != v21);
        }
      }
      v26 = 0;
      sub_20BEBF29C(&v24);
      v29 = 0;
      sub_20BEBF29C(&v27);
      v32 = 0;
      return (uint64_t)sub_20BEBF29C(&v30);
    }
  }
  return result;
}

void sub_20C7EF568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a12 = 0;
  sub_20BEBF29C(&a10);
  a16 = 0;
  sub_20BEBF29C(&a14);
  a20 = 0;
  sub_20BEBF29C(&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_20C7EF5B4(uint64_t *a1, uint64_t a2, unsigned int *a3)
{
  if (*(_QWORD *)(a2 + 16))
  {
    sub_20BEBF2D0(a2);
    *(_QWORD *)(a2 + 16) = 0;
  }
  return sub_20C7F188C(a1, 0, a3, 0, a2, 0, (uint64_t (*)(uint64_t, unsigned int *, uint64_t))sub_20C7F1BC4, 0);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::_MarkSprimDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, int a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t result;
  char *v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  char v17;

  v6 = sub_20C0AD934((_QWORD *)this + 16, (unsigned int *)a2);
  if (v6
    || (v13 = "hd/changeTracker.cpp",
        v14 = "_MarkSprimDirty",
        v15 = 630,
        v16 = "void pxrInternal__aapl__pxrReserved__::HdChangeTracker::_MarkSprimDirty(const SdfPath &, HdDirtyBits)",
        v17 = 0,
        result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v13, "it != _sprimState.end()", 0),
        (result & 1) != 0))
  {
    *((_DWORD *)v6 + 6) |= a3;
    v13 = 0;
    LOBYTE(v14) = 0;
    v15 = 0;
    if (sub_20C7EF5B4((uint64_t *)this + 255, (uint64_t)&v13, (unsigned int *)a2))
    {
      v7 = *(_QWORD **)(v15 + 24);
      v8 = (_QWORD *)(v15 + 32);
      if (v7 != (_QWORD *)(v15 + 32))
      {
        do
        {
          pxrInternal__aapl__pxrReserved__::HdChangeTracker::MarkSprimDirty(this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v7 + 28), 0xFFFFFFFF);
          v9 = (_QWORD *)v7[1];
          if (v9)
          {
            do
            {
              v10 = v9;
              v9 = (_QWORD *)*v9;
            }
            while (v9);
          }
          else
          {
            do
            {
              v10 = (_QWORD *)v7[2];
              v11 = *v10 == (_QWORD)v7;
              v7 = v10;
            }
            while (!v11);
          }
          v7 = v10;
        }
        while (v10 != v8);
      }
    }
    ++*((_DWORD *)this + 807);
    v15 = 0;
    return (uint64_t)sub_20BEBF29C(&v13);
  }
  return result;
}

void sub_20C7EF740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  a12 = 0;
  sub_20BEBF29C(&a10);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::MarkInstancerClean(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, int a3)
{
  const char *Text;
  const char *v7;
  char *v8;
  uint64_t result;
  uint64_t v10;
  _QWORD v11[4];
  char v12;

  if (sub_20C7ED838(18))
  {
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Instancer Cleaned: %s\n", v7, v8, Text);
  }
  result = (uint64_t)sub_20C0AD934((_QWORD *)this + 6, (unsigned int *)a2);
  v10 = result;
  if (result
    || (v11[0] = "hd/changeTracker.cpp",
        v11[1] = "MarkInstancerClean",
        v11[2] = 567,
        v11[3] = "void pxrInternal__aapl__pxrReserved__::HdChangeTracker::MarkInstancerClean(const SdfPath &, HdDirtyBits)",
        v12 = 0,
        result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v11, "it != _instancerState.end()", 0), (result & 1) != 0))
  {
    *(_DWORD *)(v10 + 24) = *(_DWORD *)(v10 + 24) & 2 | a3;
  }
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::HdChangeTracker::SprimInserted(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, int a3)
{
  const char *Text;
  const char *v7;
  char *v8;
  _QWORD *result;
  _DWORD *v10;

  if (sub_20C7ED838(29))
  {
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Sprim Added: %s\n", v7, v8, Text);
  }
  v10 = a2;
  result = sub_20C7F13DC((uint64_t)this + 128, (unsigned int *)a2, (uint64_t)&unk_20CAC184C, &v10);
  *((_DWORD *)result + 6) = a3;
  ++*((_DWORD *)this + 807);
  ++*((_DWORD *)this + 804);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::SprimRemoved(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  const char *Text;
  const char *v5;
  char *v6;
  uint64_t result;

  if (sub_20C7ED838(30))
  {
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Sprim Removed: %s\n", v5, v6, Text);
  }
  result = sub_20C7F168C((_QWORD *)this + 16, (unsigned int *)a2);
  ++*((_DWORD *)this + 807);
  ++*((_DWORD *)this + 804);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::GetSprimDirtyBits(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  _QWORD *v2;
  uint64_t result;
  char v4;
  _QWORD v5[4];
  char v6;

  v2 = sub_20C0AD934((_QWORD *)this + 16, (unsigned int *)a2);
  if (v2)
    return *((unsigned int *)v2 + 6);
  v5[0] = "hd/changeTracker.cpp";
  v5[1] = "GetSprimDirtyBits";
  v5[2] = 599;
  v5[3] = "HdDirtyBits pxrInternal__aapl__pxrReserved__::HdChangeTracker::GetSprimDirtyBits(const SdfPath &)";
  v6 = 0;
  v4 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v5, "it != _sprimState.end()", 0);
  result = 0;
  if ((v4 & 1) != 0)
    return *((unsigned int *)v2 + 6);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::MarkSprimClean(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, int a3)
{
  uint64_t result;
  uint64_t v5;
  _QWORD v6[4];
  char v7;

  result = (uint64_t)sub_20C0AD934((_QWORD *)this + 16, (unsigned int *)a2);
  v5 = result;
  if (result
    || (v6[0] = "hd/changeTracker.cpp",
        v6[1] = "MarkSprimClean",
        v6[2] = 651,
        v6[3] = "void pxrInternal__aapl__pxrReserved__::HdChangeTracker::MarkSprimClean(const SdfPath &, HdDirtyBits)",
        v7 = 0,
        result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v6, "it != _sprimState.end()", 0),
        (result & 1) != 0))
  {
    *(_DWORD *)(v5 + 24) = a3;
  }
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::HdChangeTracker::AddInstancerSprimDependency(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  return pxrInternal__aapl__pxrReserved__::HdChangeTracker::_AddDependency((uint64_t)this, (uint64_t *)this + 109, (unsigned int *)a2, a3);
}

_QWORD *pxrInternal__aapl__pxrReserved__::HdChangeTracker::RemoveInstancerSprimDependency(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  return pxrInternal__aapl__pxrReserved__::HdChangeTracker::_RemoveDependency((uint64_t)this, (uint64_t *)this + 109, (unsigned int *)a2, a3);
}

_QWORD *pxrInternal__aapl__pxrReserved__::HdChangeTracker::BprimInserted(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, int a3)
{
  const char *Text;
  const char *v7;
  char *v8;
  _QWORD *result;
  _DWORD *v10;

  if (sub_20C7ED838(0))
  {
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Bprim Added: %s\n", v7, v8, Text);
  }
  v10 = a2;
  result = sub_20C7F13DC((uint64_t)this + 168, (unsigned int *)a2, (uint64_t)&unk_20CAC184C, &v10);
  *((_DWORD *)result + 6) = a3;
  ++*((_DWORD *)this + 807);
  ++*((_DWORD *)this + 805);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::BprimRemoved(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  const char *Text;
  const char *v5;
  char *v6;
  uint64_t result;

  if (sub_20C7ED838(1))
  {
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Bprim Removed: %s\n", v5, v6, Text);
  }
  result = sub_20C7F168C((_QWORD *)this + 21, (unsigned int *)a2);
  ++*((_DWORD *)this + 807);
  ++*((_DWORD *)this + 805);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::GetBprimDirtyBits(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  _QWORD *v2;
  uint64_t result;
  char v4;
  _QWORD v5[4];
  char v6;

  v2 = sub_20C0AD934((_QWORD *)this + 21, (unsigned int *)a2);
  if (v2)
    return *((unsigned int *)v2 + 6);
  v5[0] = "hd/changeTracker.cpp";
  v5[1] = "GetBprimDirtyBits";
  v5[2] = 696;
  v5[3] = "HdDirtyBits pxrInternal__aapl__pxrReserved__::HdChangeTracker::GetBprimDirtyBits(const SdfPath &)";
  v6 = 0;
  v4 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v5, "it != _bprimState.end()", 0);
  result = 0;
  if ((v4 & 1) != 0)
    return *((unsigned int *)v2 + 6);
  return result;
}

void pxrInternal__aapl__pxrReserved__::HdChangeTracker::MarkBprimDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3)
{
  uint64_t v3;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  const pxrInternal__aapl__pxrReserved__::TfToken *v5;
  const pxrInternal__aapl__pxrReserved__::TfToken *v6;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v7;
  pxrInternal__aapl__pxrReserved__::HdChangeTracker *v8;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  _QWORD v17[2];
  std::__shared_weak_count *v18;
  int v19;
  int v20;
  uint64_t v21;
  void *v22[4];
  char v23;
  uint64_t v24;
  _QWORD v25[58];

  v3 = MEMORY[0x24BDAC7A8](this, a2, a3);
  v25[57] = *MEMORY[0x24BDAC8D0];
  if ((_DWORD)v5)
  {
    v6 = v5;
    v7 = v4;
    v8 = (pxrInternal__aapl__pxrReserved__::HdChangeTracker *)v3;
    v9 = *(_QWORD *)(v3 + 3248);
    if (v9)
    {
      (*(void (**)(_QWORD *__return_ptr, uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *))(*(_QWORD *)v9 + 16))(v17, v9, v4);
      v25[56] = 0x800000000;
      pxrInternal__aapl__pxrReserved__::HdDirtyBitsTranslator::BprimDirtyBitsToLocatorSet((unint64_t)v17, v6, (pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *)v25, v10);
      if (!pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::IsEmpty((pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *)v25))
      {
        v11 = *((_QWORD *)v8 + 406);
        sub_20C7F0F04(&v19, v7, (uint64_t)v25);
        v24 = 0x1000000001;
        sub_20C7F16D8((uint64_t)&v19, (uint64_t)v22, (uint64_t)v22);
        (*(void (**)(uint64_t, void **))(*(_QWORD *)v11 + 56))(v11, v22);
        sub_20C7F17EC(v22);
        sub_20C7F1148((uint64_t)&v21);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
        sub_20BFD265C(&v19);
      }
      sub_20C7F1148((uint64_t)v25);
      v12 = v18;
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      if ((v17[0] & 7) != 0)
      {
        v15 = (unsigned int *)(v17[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v16 = __ldxr(v15);
        while (__stlxr(v16 - 2, v15));
      }
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::HdChangeTracker::_MarkBprimDirty(v8, v4, (int)v5);
    }
  }
  else
  {
    v22[0] = "hd/changeTracker.cpp";
    v22[1] = "MarkBprimDirty";
    v22[2] = (void *)705;
    v22[3] = "void pxrInternal__aapl__pxrReserved__::HdChangeTracker::MarkBprimDirty(const SdfPath &, HdDirtyBits)";
    v23 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v22, 1, (pxrInternal__aapl__pxrReserved__ *)"MarkBprimDirty called with bits == clean!");
  }
}

void sub_20C7EFDD8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20BDC12F4(a1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::_MarkBprimDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, int a3)
{
  uint64_t result;
  uint64_t v6;
  _QWORD v7[4];
  char v8;

  result = (uint64_t)sub_20C0AD934((_QWORD *)this + 21, (unsigned int *)a2);
  v6 = result;
  if (result
    || (v7[0] = "hd/changeTracker.cpp",
        v7[1] = "_MarkBprimDirty",
        v7[2] = 727,
        v7[3] = "void pxrInternal__aapl__pxrReserved__::HdChangeTracker::_MarkBprimDirty(const SdfPath &, HdDirtyBits)",
        v8 = 0,
        result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v7, "it != _bprimState.end()", 0),
        (result & 1) != 0))
  {
    *(_DWORD *)(v6 + 24) |= a3;
    ++*((_DWORD *)this + 807);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::MarkBprimClean(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, int a3)
{
  uint64_t result;
  uint64_t v5;
  _QWORD v6[4];
  char v7;

  result = (uint64_t)sub_20C0AD934((_QWORD *)this + 21, (unsigned int *)a2);
  v5 = result;
  if (result
    || (v6[0] = "hd/changeTracker.cpp",
        v6[1] = "MarkBprimClean",
        v6[2] = 737,
        v6[3] = "void pxrInternal__aapl__pxrReserved__::HdChangeTracker::MarkBprimClean(const SdfPath &, HdDirtyBits)",
        v7 = 0,
        result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v6, "it != _bprimState.end()", 0),
        (result & 1) != 0))
  {
    *(_DWORD *)(v5 + 24) = a3;
  }
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsRprimDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return (pxrInternal__aapl__pxrReserved__::HdChangeTracker::GetRprimDirtyBits(this, a2) & 0xFFFFFFFD) != 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::GetRprimDirtyBits(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  _QWORD *v2;
  uint64_t result;
  char v4;
  _QWORD v5[4];
  char v6;

  v2 = sub_20C0E70D0((_QWORD *)this + 1, (unsigned int *)a2);
  if (v2)
    return *((unsigned int *)v2 + 6);
  v5[0] = "hd/changeTracker.cpp";
  v5[1] = "GetRprimDirtyBits";
  v5[2] = 1079;
  v5[3] = "HdDirtyBits pxrInternal__aapl__pxrReserved__::HdChangeTracker::GetRprimDirtyBits(const SdfPath &) const";
  v6 = 0;
  v4 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v5, "it != _rprimState.end()", 0);
  result = 0;
  if ((v4 & 1) != 0)
    return *((unsigned int *)v2 + 6);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsTopologyDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  pxrInternal__aapl__pxrReserved__::HdChangeTracker *RprimDirtyBits;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v4;

  RprimDirtyBits = (pxrInternal__aapl__pxrReserved__::HdChangeTracker *)pxrInternal__aapl__pxrReserved__::HdChangeTracker::GetRprimDirtyBits(this, a2);
  return pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsTopologyDirty(RprimDirtyBits, a2, v4);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsTopologyDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  __int16 v4;
  pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;

  v4 = (__int16)this;
  v5 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdTokens);
  if (!v5)
    v5 = sub_20C7DFC58(&pxrInternal__aapl__pxrReserved__::HdTokens);
  v6 = (v4 & 0x100) == 0;
  v7 = (unsigned __int16)(v4 & 0x100) >> 8;
  v8 = v6;
  pxrInternal__aapl__pxrReserved__::HdChangeTracker::_LogCacheAccess((pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)((char *)v5 + 600), a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v8);
  return v7;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsDoubleSidedDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  pxrInternal__aapl__pxrReserved__::HdChangeTracker *RprimDirtyBits;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v4;

  RprimDirtyBits = (pxrInternal__aapl__pxrReserved__::HdChangeTracker *)pxrInternal__aapl__pxrReserved__::HdChangeTracker::GetRprimDirtyBits(this, a2);
  return pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsDoubleSidedDirty(RprimDirtyBits, a2, v4);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsDoubleSidedDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  __int16 v4;
  pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;

  v4 = (__int16)this;
  v5 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdTokens);
  if (!v5)
    v5 = sub_20C7DFC58(&pxrInternal__aapl__pxrReserved__::HdTokens);
  v6 = (v4 & 0x1000) == 0;
  v7 = (unsigned __int16)(v4 & 0x1000) >> 12;
  v8 = v6;
  pxrInternal__aapl__pxrReserved__::HdChangeTracker::_LogCacheAccess((pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)((char *)v5 + 128), a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v8);
  return v7;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsCullStyleDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  pxrInternal__aapl__pxrReserved__::HdChangeTracker *RprimDirtyBits;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v4;

  RprimDirtyBits = (pxrInternal__aapl__pxrReserved__::HdChangeTracker *)pxrInternal__aapl__pxrReserved__::HdChangeTracker::GetRprimDirtyBits(this, a2);
  return pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsCullStyleDirty(RprimDirtyBits, a2, v4);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsCullStyleDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  __int16 v4;
  pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;

  v4 = (__int16)this;
  v5 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdTokens);
  if (!v5)
    v5 = sub_20C7DFC58(&pxrInternal__aapl__pxrReserved__::HdTokens);
  v6 = (v4 & 0x2000) == 0;
  v7 = (unsigned __int16)(v4 & 0x2000) >> 13;
  v8 = v6;
  pxrInternal__aapl__pxrReserved__::HdChangeTracker::_LogCacheAccess((pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)((char *)v5 + 120), a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v8);
  return v7;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsDisplayStyleDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  pxrInternal__aapl__pxrReserved__::HdChangeTracker *RprimDirtyBits;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v4;

  RprimDirtyBits = (pxrInternal__aapl__pxrReserved__::HdChangeTracker *)pxrInternal__aapl__pxrReserved__::HdChangeTracker::GetRprimDirtyBits(this, a2);
  return pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsDisplayStyleDirty(RprimDirtyBits, a2, v4);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsDisplayStyleDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  char v4;
  pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;

  v4 = (char)this;
  v5 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdTokens);
  if (!v5)
    v5 = sub_20C7DFC58(&pxrInternal__aapl__pxrReserved__::HdTokens);
  v6 = (v4 & 0x10) == 0;
  v7 = (v4 & 0x10) >> 4;
  v8 = v6;
  pxrInternal__aapl__pxrReserved__::HdChangeTracker::_LogCacheAccess((pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)((char *)v5 + 160), a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v8);
  return v7;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsSubdivTagsDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  pxrInternal__aapl__pxrReserved__::HdChangeTracker *RprimDirtyBits;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v4;

  RprimDirtyBits = (pxrInternal__aapl__pxrReserved__::HdChangeTracker *)pxrInternal__aapl__pxrReserved__::HdChangeTracker::GetRprimDirtyBits(this, a2);
  return pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsSubdivTagsDirty(RprimDirtyBits, a2, v4);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsSubdivTagsDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  __int16 v4;
  pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;

  v4 = (__int16)this;
  v5 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdTokens);
  if (!v5)
    v5 = sub_20C7DFC58(&pxrInternal__aapl__pxrReserved__::HdTokens);
  v6 = (v4 & 0x4000) == 0;
  v7 = (unsigned __int16)(v4 & 0x4000) >> 14;
  v8 = v6;
  pxrInternal__aapl__pxrReserved__::HdChangeTracker::_LogCacheAccess((pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)((char *)v5 + 576), a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v8);
  return v7;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsTransformDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  pxrInternal__aapl__pxrReserved__::HdChangeTracker *RprimDirtyBits;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v4;

  RprimDirtyBits = (pxrInternal__aapl__pxrReserved__::HdChangeTracker *)pxrInternal__aapl__pxrReserved__::HdChangeTracker::GetRprimDirtyBits(this, a2);
  return pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsTransformDirty(RprimDirtyBits, a2, v4);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsTransformDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  __int16 v4;
  pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;

  v4 = (__int16)this;
  v5 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdTokens);
  if (!v5)
    v5 = sub_20C7DFC58(&pxrInternal__aapl__pxrReserved__::HdTokens);
  v6 = (v4 & 0x200) == 0;
  v7 = (unsigned __int16)(v4 & 0x200) >> 9;
  v8 = v6;
  pxrInternal__aapl__pxrReserved__::HdChangeTracker::_LogCacheAccess((pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)((char *)v5 + 624), a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v8);
  return v7;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsVisibilityDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  pxrInternal__aapl__pxrReserved__::HdChangeTracker *RprimDirtyBits;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v4;

  RprimDirtyBits = (pxrInternal__aapl__pxrReserved__::HdChangeTracker *)pxrInternal__aapl__pxrReserved__::HdChangeTracker::GetRprimDirtyBits(this, a2);
  return pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsVisibilityDirty(RprimDirtyBits, a2, v4);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsVisibilityDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  __int16 v4;
  pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;

  v4 = (__int16)this;
  v5 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdTokens);
  if (!v5)
    v5 = sub_20C7DFC58(&pxrInternal__aapl__pxrReserved__::HdTokens);
  v6 = (v4 & 0x400) == 0;
  v7 = (unsigned __int16)(v4 & 0x400) >> 10;
  v8 = v6;
  pxrInternal__aapl__pxrReserved__::HdChangeTracker::_LogCacheAccess((pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)((char *)v5 + 648), a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v8);
  return v7;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsExtentDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  pxrInternal__aapl__pxrReserved__::HdChangeTracker *RprimDirtyBits;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v4;

  RprimDirtyBits = (pxrInternal__aapl__pxrReserved__::HdChangeTracker *)pxrInternal__aapl__pxrReserved__::HdChangeTracker::GetRprimDirtyBits(this, a2);
  return pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsExtentDirty(RprimDirtyBits, a2, v4);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsExtentDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  char v4;
  pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;

  v4 = (char)this;
  v5 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdTokens);
  if (!v5)
    v5 = sub_20C7DFC58(&pxrInternal__aapl__pxrReserved__::HdTokens);
  v6 = (v4 & 8) == 0;
  v7 = (v4 & 8) >> 3;
  v8 = v6;
  pxrInternal__aapl__pxrReserved__::HdChangeTracker::_LogCacheAccess((pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)((char *)v5 + 248), a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v8);
  return v7;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsPrimIdDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  pxrInternal__aapl__pxrReserved__::HdChangeTracker *RprimDirtyBits;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v4;

  RprimDirtyBits = (pxrInternal__aapl__pxrReserved__::HdChangeTracker *)pxrInternal__aapl__pxrReserved__::HdChangeTracker::GetRprimDirtyBits(this, a2);
  return pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsPrimIdDirty(RprimDirtyBits, a2, v4);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsPrimIdDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  char v4;
  pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;

  v4 = (char)this;
  v5 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdTokens);
  if (!v5)
    v5 = sub_20C7DFC58(&pxrInternal__aapl__pxrReserved__::HdTokens);
  v6 = (v4 & 4) == 0;
  v7 = (v4 & 4) >> 2;
  v8 = v6;
  pxrInternal__aapl__pxrReserved__::HdChangeTracker::_LogCacheAccess((pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)((char *)v5 + 512), a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v8);
  return v7;
}

BOOL pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsAnyPrimvarDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  pxrInternal__aapl__pxrReserved__::HdChangeTracker *RprimDirtyBits;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v4;

  RprimDirtyBits = (pxrInternal__aapl__pxrReserved__::HdChangeTracker *)pxrInternal__aapl__pxrReserved__::HdChangeTracker::GetRprimDirtyBits(this, a2);
  return pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsAnyPrimvarDirty(RprimDirtyBits, a2, v4);
}

BOOL pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsAnyPrimvarDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  __int16 v4;
  pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *v5;
  BOOL v6;
  _BOOL8 v7;
  uint64_t v8;

  v4 = (__int16)this;
  v5 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdTokens);
  if (!v5)
    v5 = sub_20C7DFC58(&pxrInternal__aapl__pxrReserved__::HdTokens);
  v6 = (v4 & 0x8860) == 0;
  v7 = (v4 & 0x8860) != 0;
  v8 = v6;
  pxrInternal__aapl__pxrReserved__::HdChangeTracker::_LogCacheAccess((pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)((char *)v5 + 504), a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v8);
  return v7;
}

BOOL pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsPrimvarDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  pxrInternal__aapl__pxrReserved__::HdChangeTracker *RprimDirtyBits;
  const pxrInternal__aapl__pxrReserved__::TfToken *v6;

  RprimDirtyBits = (pxrInternal__aapl__pxrReserved__::HdChangeTracker *)pxrInternal__aapl__pxrReserved__::HdChangeTracker::GetRprimDirtyBits(this, a2);
  return pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsPrimvarDirty(RprimDirtyBits, a2, a3, v6);
}

BOOL pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsPrimvarDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  int v6;
  pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *v7;
  pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *v8;
  pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *v9;
  pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *v10;
  pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *v11;
  pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *v12;
  int v13;
  BOOL v14;
  _BOOL8 v15;
  uint64_t v16;

  v6 = (int)this;
  v7 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdTokens);
  if (!v7)
    v7 = sub_20C7DFC58(&pxrInternal__aapl__pxrReserved__::HdTokens);
  if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v7 + 57) & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_21;
  v8 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdTokens);
  if (!v8)
    v8 = sub_20C7DFC58(&pxrInternal__aapl__pxrReserved__::HdTokens);
  if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v8 + 80) & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_21;
  v9 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdTokens);
  if (!v9)
    v9 = sub_20C7DFC58(&pxrInternal__aapl__pxrReserved__::HdTokens);
  if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_21;
  v10 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdTokens);
  if (!v10)
    v10 = sub_20C7DFC58(&pxrInternal__aapl__pxrReserved__::HdTokens);
  if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v10 + 50) & 0xFFFFFFFFFFFFFFF8))
  {
LABEL_21:
    v13 = 32;
  }
  else
  {
    v11 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdTokens);
    if (!v11)
      v11 = sub_20C7DFC58(&pxrInternal__aapl__pxrReserved__::HdTokens);
    if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v11 + 52) & 0xFFFFFFFFFFFFFFF8))
    {
      v13 = 2048;
    }
    else
    {
      v12 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdTokens);
      if (!v12)
        v12 = sub_20C7DFC58(&pxrInternal__aapl__pxrReserved__::HdTokens);
      if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v12 + 82) & 0xFFFFFFFFFFFFFFF8))
        v13 = 0x8000;
      else
        v13 = 64;
    }
  }
  v14 = (v13 & v6) == 0;
  v15 = (v13 & v6) != 0;
  v16 = v14;
  pxrInternal__aapl__pxrReserved__::HdChangeTracker::_LogCacheAccess(a3, a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v16);
  return v15;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsInstancerDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  int v4;
  pxrInternal__aapl__pxrReserved__::HdInstancerTokens_StaticTokenType *v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;

  v4 = (int)this;
  v5 = (pxrInternal__aapl__pxrReserved__::HdInstancerTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdInstancerTokens);
  if (!v5)
    v5 = sub_20C7F221C(&pxrInternal__aapl__pxrReserved__::HdInstancerTokens);
  v6 = (v4 & 0x10000) == 0;
  v7 = (v4 & 0x10000u) >> 16;
  v8 = v6;
  pxrInternal__aapl__pxrReserved__::HdChangeTracker::_LogCacheAccess((pxrInternal__aapl__pxrReserved__::HdInstancerTokens_StaticTokenType *)((char *)v5 + 8), a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v8);
  return v7;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsInstanceIndexDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  int v4;
  pxrInternal__aapl__pxrReserved__::HdInstancerTokens_StaticTokenType *v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;

  v4 = (int)this;
  v5 = (pxrInternal__aapl__pxrReserved__::HdInstancerTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdInstancerTokens);
  if (!v5)
    v5 = sub_20C7F221C(&pxrInternal__aapl__pxrReserved__::HdInstancerTokens);
  v6 = (v4 & 0x20000) == 0;
  v7 = (v4 & 0x20000u) >> 17;
  v8 = v6;
  pxrInternal__aapl__pxrReserved__::HdChangeTracker::_LogCacheAccess((pxrInternal__aapl__pxrReserved__::HdInstancerTokens_StaticTokenType *)((char *)v5 + 32), a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v8);
  return v7;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsReprDirty(unsigned int a1)
{
  return (a1 >> 18) & 1;
}

void pxrInternal__aapl__pxrReserved__::HdChangeTracker::MarkPrimvarDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  unsigned int v5;

  v5 = 0;
  pxrInternal__aapl__pxrReserved__::HdChangeTracker::MarkPrimvarDirty((pxrInternal__aapl__pxrReserved__::HdChangeTracker *)&v5, (unsigned int *)a3, a3);
  pxrInternal__aapl__pxrReserved__::HdChangeTracker::MarkRprimDirty(this, a2, v5);
}

pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::HdChangeTracker::MarkPrimvarDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, unsigned int *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *result;
  int v6;

  result = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdTokens);
  if (!result)
    result = sub_20C7DFC58(&pxrInternal__aapl__pxrReserved__::HdTokens);
  if ((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)result + 57) & 0xFFFFFFFFFFFFFFF8))
  {
    v6 = 32;
  }
  else
  {
    result = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdTokens);
    if (!result)
      result = sub_20C7DFC58(&pxrInternal__aapl__pxrReserved__::HdTokens);
    if ((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)result + 52) & 0xFFFFFFFFFFFFFFF8))
    {
      v6 = 2048;
    }
    else
    {
      result = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdTokens);
      if (!result)
        result = sub_20C7DFC58(&pxrInternal__aapl__pxrReserved__::HdTokens);
      if ((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)result + 82) & 0xFFFFFFFFFFFFFFF8))
        v6 = 0x8000;
      else
        v6 = 64;
    }
  }
  *(_DWORD *)this |= v6;
  return result;
}

void pxrInternal__aapl__pxrReserved__::HdChangeTracker::MarkAllRprimsDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, uint64_t a2)
{
  uint64_t *v4;
  char v5;
  int v6;
  int v7;
  _QWORD v8[4];
  char v9;

  if (!(_DWORD)a2)
  {
    v8[0] = "hd/changeTracker.cpp";
    v8[1] = "MarkAllRprimsDirty";
    v8[2] = 978;
    v8[3] = "void pxrInternal__aapl__pxrReserved__::HdChangeTracker::MarkAllRprimsDirty(HdDirtyBits)";
    v9 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v8, 1, (pxrInternal__aapl__pxrReserved__ *)"MarkAllRprimsDirty called with bits == clean!");
    return;
  }
  v4 = (uint64_t *)*((_QWORD *)this + 3);
  if (*((_QWORD *)this + 406))
  {
    for (; v4; v4 = (uint64_t *)*v4)
      pxrInternal__aapl__pxrReserved__::HdChangeTracker::MarkRprimDirty(this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v4 + 2), a2);
    return;
  }
  if (v4)
  {
    v5 = 0;
    do
    {
      while (1)
      {
        v6 = *((_DWORD *)v4 + 6);
        if (((~v6 | 0xC0000) & a2) == 0)
          break;
        v7 = v6 | a2;
        *((_DWORD *)v4 + 6) = v7;
        if ((v7 & 2) != 0)
          break;
        *((_DWORD *)v4 + 6) = v7 | 2;
        v4 = (uint64_t *)*v4;
        v5 = 1;
        if (!v4)
          goto LABEL_15;
      }
      v4 = (uint64_t *)*v4;
    }
    while (v4);
    if ((v5 & 1) == 0)
      goto LABEL_16;
LABEL_15:
    ++*((_DWORD *)this + 802);
  }
LABEL_16:
  ++*((_DWORD *)this + 807);
  if ((a2 & 0x400) != 0)
  {
    ++*((_DWORD *)this + 808);
    if ((a2 & 0x20000) == 0)
    {
LABEL_18:
      if ((a2 & 0x80000) == 0)
        goto LABEL_20;
      goto LABEL_19;
    }
  }
  else if ((a2 & 0x20000) == 0)
  {
    goto LABEL_18;
  }
  ++*((_DWORD *)this + 809);
  if ((a2 & 0x80000) != 0)
LABEL_19:
    ++*((_DWORD *)this + 810);
LABEL_20:
  if ((a2 & 0xC0000) != 0)
    ++*((_DWORD *)this + 803);
}

_QWORD *pxrInternal__aapl__pxrReserved__::HdChangeTracker::AddCollection(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  char *v3;
  _QWORD *result;
  uint64_t *v5;

  v3 = (char *)this + 248;
  result = sub_20BF2B388((_QWORD *)this + 31, a2);
  if (!result)
  {
    v5 = (uint64_t *)a2;
    result = sub_20BF2B728((uint64_t)v3, a2, (uint64_t)&unk_20CAC184C, &v5);
    *((_DWORD *)result + 6) = 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::MarkCollectionDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t result;
  const char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  const char *v9;
  char *v10;
  char *v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;

  result = (uint64_t)sub_20BF2B388((_QWORD *)this + 31, a2);
  v7 = result;
  if (result)
    goto LABEL_2;
  v11 = "hd/changeTracker.cpp";
  v12 = "MarkCollectionDirty";
  v13 = 1108;
  v14 = "void pxrInternal__aapl__pxrReserved__::HdChangeTracker::MarkCollectionDirty(const TfToken &)";
  LOBYTE(v15) = 0;
  v8 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
  if (v8)
  {
    v9 = (const char *)(v8 + 16);
    if (*(char *)(v8 + 39) < 0)
      v9 = *(const char **)v9;
  }
  else
  {
    v9 = "";
  }
  v10 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"Collection %s not found\n", v5, v6, v9, v11, v12, v13, v14, v15);
  result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v11, "it != _collectionState.end()", v10);
  if ((result & 1) != 0)
  {
LABEL_2:
    ++*(_DWORD *)(v7 + 24);
    ++*((_DWORD *)this + 807);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::GetCollectionVersion(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  _QWORD *v4;
  unint64_t v6;
  const char *v7;
  _QWORD v8[4];
  char v9;

  v4 = sub_20BF2B2B4((_QWORD *)this + 31, a2);
  if (v4)
    return (*((_DWORD *)this + 803) + *((_DWORD *)v4 + 6));
  v8[0] = "hd/changeTracker.cpp";
  v8[1] = "GetCollectionVersion";
  v8[2] = 1123;
  v8[3] = "unsigned int pxrInternal__aapl__pxrReserved__::HdChangeTracker::GetCollectionVersion(const TfToken &) const";
  v9 = 0;
  v6 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
  if (v6)
  {
    v7 = (const char *)(v6 + 16);
    if (*(char *)(v6 + 39) < 0)
      v7 = *(const char **)v7;
  }
  else
  {
    v7 = "";
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v8, 1, (pxrInternal__aapl__pxrReserved__ *)"Change Tracker unable to find collection %s", v7);
  return *((unsigned int *)this + 803);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::GetVisibilityChangeCount(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this)
{
  return *((unsigned int *)this + 808);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::GetInstanceIndicesChangeCount(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this)
{
  return *((unsigned int *)this + 809);
}

_QWORD *pxrInternal__aapl__pxrReserved__::HdChangeTracker::AddState(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  char *v3;
  _QWORD *result;
  int v5;
  uint64_t *v6;

  v3 = (char *)this + 208;
  result = sub_20BF2B388((_QWORD *)this + 26, a2);
  if (result)
  {
    v5 = *((_DWORD *)result + 6) + 1;
  }
  else
  {
    v6 = (uint64_t *)a2;
    result = sub_20BF2B728((uint64_t)v3, a2, (uint64_t)&unk_20CAC184C, &v6);
    v5 = 1;
  }
  *((_DWORD *)result + 6) = v5;
  return result;
}

void pxrInternal__aapl__pxrReserved__::HdChangeTracker::MarkStateDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  _QWORD *v3;
  unint64_t v4;
  const char *v5;
  _QWORD v6[4];
  char v7;

  v3 = sub_20BF2B388((_QWORD *)this + 26, a2);
  if (v3)
  {
    ++*((_DWORD *)v3 + 6);
  }
  else
  {
    v6[0] = "hd/changeTracker.cpp";
    v6[1] = "MarkStateDirty";
    v6[2] = 1161;
    v6[3] = "void pxrInternal__aapl__pxrReserved__::HdChangeTracker::MarkStateDirty(const TfToken &)";
    v7 = 0;
    v4 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
    if (v4)
    {
      v5 = (const char *)(v4 + 16);
      if (*(char *)(v4 + 39) < 0)
        v5 = *(const char **)v5;
    }
    else
    {
      v5 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v6, 1, (pxrInternal__aapl__pxrReserved__ *)"Change Tracker unable to find state %s", v5);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::GetStateVersion(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  _QWORD *v3;
  unint64_t v5;
  const char *v6;
  _QWORD v7[4];
  char v8;

  v3 = sub_20BF2B2B4((_QWORD *)this + 26, a2);
  if (v3)
    return *((unsigned int *)v3 + 6);
  v7[0] = "hd/changeTracker.cpp";
  v7[1] = "GetStateVersion";
  v7[2] = 1173;
  v7[3] = "unsigned int pxrInternal__aapl__pxrReserved__::HdChangeTracker::GetStateVersion(const TfToken &) const";
  v8 = 0;
  v5 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
  if (v5)
  {
    v6 = (const char *)(v5 + 16);
    if (*(char *)(v5 + 39) < 0)
      v6 = *(const char **)v6;
  }
  else
  {
    v6 = "";
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 1, (pxrInternal__aapl__pxrReserved__ *)"Change Tracker unable to find state %s", v6);
  return 0;
}

void pxrInternal__aapl__pxrReserved__::HdChangeTracker::DumpDirtyBits(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this)
{
  _QWORD *v2;
  void **v3;
  uint64_t v4;
  _QWORD *v5;
  void *__p[2];
  unsigned __int8 v7;

  v2 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)"DirtyBits:", 10);
  pxrInternal__aapl__pxrReserved__::HdChangeTracker::StringifyDirtyBits(this, __p);
  if ((v7 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v7 & 0x80u) == 0)
    v4 = v7;
  else
    v4 = (uint64_t)__p[1];
  v5 = sub_20BDDC1C8(v2, (uint64_t)v3, v4);
  sub_20BDDC1C8(v5, (uint64_t)"\n", 1);
  if ((char)v7 < 0)
    operator delete(__p[0]);
}

void sub_20C7F0E40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::_SetTargetSceneIndex(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 3248) = a2;
  return result;
}

uint64_t sub_20C7F0E64(uint64_t a1)
{
  void *v2;

  sub_20C7F0E9C(a1, *(_DWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C7F0E9C(uint64_t a1, _DWORD *a2)
{
  _DWORD *v2;
  _DWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = *(_DWORD **)v2;
      sub_20C7F0ED8(v2 + 4);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

_DWORD *sub_20C7F0ED8(_DWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);
  return sub_20BFD265C(a1);
}

_DWORD *sub_20C7F0F04(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v6;

  v6 = sub_20BFD6E54(a1, a2);
  sub_20BFD6EA4(v6 + 1, a2 + 1);
  sub_20C7F0F64(a1 + 2, a3);
  return a1;
}

void sub_20C7F0F50(_Unwind_Exception *a1)
{
  _DWORD *v1;

  sub_20BFD1A18(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C7F0F64(_DWORD *a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;

  a1[113] = 8;
  v4 = *(unsigned int *)(a2 + 448);
  v5 = a1;
  if (v4 >= 9)
  {
    v5 = malloc(56 * v4);
    *(_QWORD *)a1 = v5;
    a1[113] = v4;
  }
  a1[112] = v4;
  if (*(_DWORD *)(a2 + 452) >= 9u)
    v6 = *(_QWORD *)a2;
  else
    v6 = a2;
  sub_20C7F0FE4(v6, v6 + 56 * *(unsigned int *)(a2 + 448), (uint64_t)v5);
  return a1;
}

uint64_t sub_20C7F0FE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    v6 = 0;
    do
    {
      sub_20C7F1078((_DWORD *)(a3 + v6), a1 + v6);
      v6 += 56;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

void sub_20C7F1040(void *a1)
{
  uint64_t v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  for (; v2; v2 -= 56)
  {
    sub_20C7E0EB0(v1);
    v1 += 56;
  }
  __cxa_rethrow();
}

void sub_20C7F1064(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_DWORD *sub_20C7F1078(_DWORD *a1, uint64_t a2)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;

  v3 = a1;
  a1[13] = 6;
  v4 = *(unsigned int *)(a2 + 48);
  if (v4 <= 6)
  {
    a1[12] = v4;
    v5 = *(uint64_t **)a2;
    v6 = *(unsigned int *)(a2 + 48);
    if (*(_DWORD *)(a2 + 52) < 7u)
      v5 = (uint64_t *)a2;
    v7 = &v5[v6];
    if (!(_DWORD)v6)
      return v3;
    do
    {
LABEL_9:
      v9 = *v5;
      *(_QWORD *)a1 = *v5;
      if ((v9 & 7) != 0)
      {
        v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 2, v10));
        if ((v11 & 1) == 0)
          *(_QWORD *)a1 &= 0xFFFFFFFFFFFFFFF8;
      }
      ++v5;
      a1 += 2;
    }
    while (v5 != v7);
    return v3;
  }
  a1 = malloc(8 * v4);
  *(_QWORD *)v3 = a1;
  v3[12] = v4;
  v3[13] = v4;
  v5 = *(uint64_t **)a2;
  v8 = *(unsigned int *)(a2 + 48);
  if (*(_DWORD *)(a2 + 52) < 7u)
    v5 = (uint64_t *)a2;
  v7 = &v5[v8];
  if ((_DWORD)v8)
    goto LABEL_9;
  return v3;
}

uint64_t sub_20C7F1148(uint64_t a1)
{
  sub_20C7F1184(a1);
  if (*(_DWORD *)(a1 + 452) >= 9u)
    free(*(void **)a1);
  return a1;
}

uint64_t sub_20C7F1184(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = result;
  if (*(_DWORD *)(result + 452) >= 9u)
    result = *(_QWORD *)result;
  v2 = *(unsigned int *)(v1 + 448);
  if ((_DWORD)v2)
  {
    v3 = 56 * v2;
    do
    {
      result = sub_20C7E0EB0(result) + 56;
      v3 -= 56;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_20C7F11D0(unint64_t *a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t result;

  v2 = *a1;
  __dmb(0xBu);
  __dmb(0xBu);
  a1[65] = 0;
  v3 = sub_20BEB4B94(v2);
  do
  {
    v4 = 0;
    v5 = v3;
    v6 = a1[v3 + 1];
    if (v3-- > 1)
      v8 = v5;
    else
      v8 = 1;
    do
    {
      v9 = v6 + 24 * v4;
      v12 = *(_QWORD *)(v9 + 16);
      v11 = (_QWORD *)(v9 + 16);
      v10 = (_QWORD *)v12;
      if (v12 >= 0x40)
      {
        do
        {
          *v11 = *v10;
          sub_20C7F129C((uint64_t)a1, (uint64_t)v10);
          v10 = (_QWORD *)*v11;
        }
        while (*v11 > 0x3FuLL);
      }
      ++v4;
    }
    while (!(v4 >> v8));
    result = sub_20C7F12CC((uint64_t)a1, v5);
  }
  while (v5);
  __dmb(0xBu);
  *a1 = 1;
  return result;
}

uint64_t sub_20C7F129C(uint64_t a1, uint64_t a2)
{
  void *v3;

  sub_20C7F1318(a2 + 16);
  return tbb::internal::deallocate_via_handler_v3(a2, v3);
}

uint64_t sub_20C7F12CC(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  _QWORD *v4;
  uint64_t v5;

  v2 = a1 + 8 * a2;
  v5 = *(_QWORD *)(v2 + 8);
  v4 = (_QWORD *)(v2 + 8);
  result = v5;
  if (a2 < 8)
  {
    if (!a2)
      return result;
    if (a2 == 1)
      result = tbb::internal::deallocate_via_handler_v3(result, (void *)1);
  }
  else
  {
    result = tbb::internal::deallocate_via_handler_v3(result, (void *)a2);
  }
  *v4 = 0;
  return result;
}

_DWORD *sub_20C7F1318(uint64_t a1)
{
  sub_20BFD7C28(a1 + 8, *(_QWORD **)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));
  return sub_20BFD265C((_DWORD *)a1);
}

uint64_t sub_20C7F1350()
{
  unsigned __int8 v0;
  _OWORD *v2;

  v0 = atomic_load((unsigned __int8 *)&qword_25473DBE8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25473DBE8))
  {
    v2 = operator new(0x8CuLL);
    *(_OWORD *)((char *)v2 + 124) = 0u;
    v2[6] = 0u;
    v2[7] = 0u;
    v2[4] = 0u;
    v2[5] = 0u;
    v2[2] = 0u;
    v2[3] = 0u;
    *v2 = 0u;
    v2[1] = 0u;
    qword_25473DBE0 = (uint64_t)v2;
    __cxa_guard_release(&qword_25473DBE8);
  }
  return qword_25473DBE0;
}

void sub_20C7F13C4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25473DBE8);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C7F13DC(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD v21[3];

  v6 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v4 = v6;
      if (v6 >= v7)
        v4 = v6 % v7;
    }
    else
    {
      v4 = v6 & (v7 - 1);
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == *(_QWORD *)a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v4)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  sub_20C66293C(a1, v6, a4, (uint64_t)v21);
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    sub_20BDEC6E0(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v4 = v6 % v7;
      else
        v4 = v6;
    }
    else
    {
      v4 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v18)
  {
    *(_QWORD *)v21[0] = *v18;
    *v18 = v21[0];
  }
  else
  {
    *(_QWORD *)v21[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v21[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v21[0])
    {
      v19 = *(_QWORD *)(*(_QWORD *)v21[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7)
          v19 %= v7;
      }
      else
      {
        v19 &= v7 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v19) = v21[0];
    }
  }
  v10 = (_QWORD *)v21[0];
  v21[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C7F1648((uint64_t)v21, 0);
  return v10;
}

void sub_20C7F1630(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C7F1648((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_20C7F1648(uint64_t a1, uint64_t a2)
{
  _DWORD *v2;

  v2 = *(_DWORD **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C7F0ED8(v2 + 4);
    operator delete(v2);
  }
}

uint64_t sub_20C7F168C(_QWORD *a1, unsigned int *a2)
{
  uint64_t result;
  _BYTE v4[24];

  result = (uint64_t)sub_20C0AD934(a1, a2);
  if (result)
  {
    sub_20BEB587C(a1, (_QWORD *)result, (uint64_t)v4);
    sub_20C7F1648((uint64_t)v4, 0);
    return 1;
  }
  return result;
}

uint64_t sub_20C7F16D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a1 == a2)
    return a1;
  v5 = a2;
  v6 = 0;
  do
  {
    sub_20BFD6E54((_DWORD *)(a3 + v6), (_DWORD *)(a1 + v6));
    sub_20BFD6EA4((_DWORD *)(a3 + v6 + 4), (_DWORD *)(a1 + v6 + 4));
    sub_20C7F0F64((_DWORD *)(a3 + v6 + 8), a1 + v6 + 8);
    v6 += 464;
  }
  while (a1 + v6 != v5);
  return v5;
}

void sub_20C7F1774(void *a1, uint64_t a2)
{
  _DWORD *v2;
  _DWORD *v3;
  _DWORD *v4;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v4);
  sub_20C96C264(v3, a1, a2, v2);
  __cxa_rethrow();
}

void sub_20C7F17A4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_DWORD *sub_20C7F17B8(_DWORD *a1)
{
  sub_20C7F1148((uint64_t)(a1 + 2));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);
  return sub_20BFD265C(a1);
}

void **sub_20C7F17EC(void **a1)
{
  sub_20C7F1828(a1);
  if (*((_DWORD *)a1 + 1857) >= 0x11u)
    free(*a1);
  return a1;
}

_DWORD *sub_20C7F1828(_DWORD *result)
{
  _DWORD *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = result;
  if (result[1857] >= 0x11u)
    v1 = *(_DWORD **)result;
  v2 = result[1856];
  if (v2)
  {
    v3 = 464 * v2;
    do
    {
      sub_20C7F1148((uint64_t)(v1 + 2));
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v1 + 1);
      result = sub_20BFD265C(v1);
      v1 += 116;
      v3 -= 464;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_20C7F188C(uint64_t *a1, int a2, unsigned int *a3, uint64_t a4, uint64_t a5, int a6, uint64_t (*a7)(uint64_t, unsigned int *, uint64_t), _QWORD *a8)
{
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v32;
  unint64_t v33;
  tbb::spin_rw_mutex_v3 *v35;
  char v36;
  uint64_t v37;

  v33 = 0;
  v13 = bswap64(0x9E3779B97F4A7C55* (a3[1]+ ((a3[1] + (unint64_t)*a3 + (a3[1] + (unint64_t)*a3) * (a3[1] + (unint64_t)*a3)) >> 1)));
  v14 = *a1;
  __dmb(0xBu);
  v32 = (uint64_t)(a1 + 72);
  while (1)
  {
    sub_20C7F1D60((uint64_t)&v35, (uint64_t)a1, v14 & v13, 0);
    v15 = (_QWORD *)(v37 + 16);
    do
      v15 = (_QWORD *)*v15;
    while ((unint64_t)v15 >= 0x40 && *(_QWORD *)a3 != v15[2]);
    if (a2)
      break;
    if (v15)
    {
      v16 = 1;
LABEL_10:
      v17 = (uint64_t)a8;
      if (!a5)
        goto LABEL_51;
      goto LABEL_11;
    }
    v26 = *a1;
    __dmb(0xBu);
    if (v14 == v26 || !sub_20BECF7E4((uint64_t)a1, v13, v14, v26))
    {
      sub_20BEBF29C(&v35);
      return 0;
    }
LABEL_34:
    sub_20BEBF29C(&v35);
    v14 = v26;
  }
  if (v15)
  {
LABEL_7:
    v16 = 0;
    goto LABEL_10;
  }
  if (!a8)
    a8 = (_QWORD *)a7(v32, a3, a4);
  if (!v36)
  {
    v36 = 1;
    if ((tbb::spin_rw_mutex_v3::internal_upgrade(v35) & 1) == 0)
    {
      v15 = (_QWORD *)(v37 + 16);
      while (1)
      {
        v15 = (_QWORD *)*v15;
        if ((unint64_t)v15 < 0x40)
          break;
        if (*(_QWORD *)a3 == v15[2])
        {
          if (!v36)
            goto LABEL_7;
          v27 = (unint64_t *)v35;
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 + 3, v27));
          v16 = 0;
          v36 = 0;
          goto LABEL_10;
        }
      }
    }
  }
  v26 = *a1;
  __dmb(0xBu);
  if (v14 != v26)
  {
    if (!sub_20BECF7E4((uint64_t)a1, v13, v14, v26))
      goto LABEL_36;
    goto LABEL_34;
  }
  v26 = v14;
LABEL_36:
  v33 = sub_20BECF26C((uint64_t)a1, v37, a8, v26);
  v17 = 0;
  v16 = 1;
  v15 = a8;
  if (!a5)
  {
LABEL_51:
    sub_20BEBF29C(&v35);
    goto LABEL_46;
  }
LABEL_11:
  if ((sub_20BECF35C(a5, (tbb::spin_rw_mutex_v3 *)(v15 + 1), a6) & 1) == 0)
  {
    sched_yield();
    v18 = 2;
    while ((sub_20BECF35C(a5, (tbb::spin_rw_mutex_v3 *)(v15 + 1), a6) & 1) == 0)
    {
      sched_yield();
      v19 = v18 < 16;
      v18 *= 2;
      if (!v19)
      {
        v20 = (unint64_t *)v35;
        v35 = 0;
        if (v36)
        {
          while (1)
          {
            v21 = *v20;
            v22 = *v20 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              while (1)
              {
                v23 = __ldaxr(v20);
                if (v23 != v21)
                  break;
                if (!__stlxr(v22, v20))
                  goto LABEL_25;
              }
              __clrex();
              do
                v24 = __ldxr(v20);
              while (__stxr(v24, v20));
            }
            while (v24 == v21);
            sched_yield();
          }
        }
        do
          v25 = __ldaxr(v20);
        while (__stlxr(v25 - 4, v20));
LABEL_25:
        sched_yield();
        v26 = *a1;
        __dmb(0xBu);
        a8 = (_QWORD *)v17;
        goto LABEL_34;
      }
    }
  }
  sub_20BEBF29C(&v35);
  *(_QWORD *)(a5 + 16) = v15;
  *(_QWORD *)(a5 + 24) = v13;
LABEL_46:
  if (v33)
    sub_20C7F1BCC(a1, v33, v32, 0);
  if (v17)
    sub_20C7F129C((uint64_t)a1, v17);
  return v16;
}

void sub_20C7F1BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20BEBF29C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C7F1BC4()
{
  return 0;
}

void sub_20C7F1BCC(uint64_t *a1, unint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v7;
  _QWORD *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  int64x2_t v17;
  char *v18;
  uint64x2_t v19;
  uint64x2_t v20;
  int8x16_t v21;
  int64x2_t v22;
  uint64x2_t v23;
  int8x16_t v24;

  if (a2 < 8)
  {
    v9 = (char *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x17D0);
    v10 = v9;
    if ((a4 & 1) != 0)
    {
      bzero(v9, 0x17D0uLL);
    }
    else
    {
      v14 = -6096;
      do
      {
        v15 = &v9[v14];
        *((_QWORD *)v15 + 763) = 0;
        *((_QWORD *)v15 + 764) = 3;
        v14 += 24;
      }
      while (v14);
    }
    v16 = 0;
    v17 = (int64x2_t)xmmword_20CA59F60;
    v18 = v10 - 48;
    v19 = (uint64x2_t)vdupq_n_s64(7uLL);
    v20 = (uint64x2_t)vdupq_n_s64(1uLL);
    v21 = (int8x16_t)vdupq_n_s64(0x7FFFFFFFFFFFFFFEuLL);
    v22 = vdupq_n_s64(2uLL);
    v13 = 255;
    do
    {
      v23 = (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v16), (int8x16_t)xmmword_20CA59F70);
      v24 = vandq_s8((int8x16_t)vshlq_u64(v20, (uint64x2_t)v17), v21);
      if ((vmovn_s64((int64x2_t)vcgtq_u64(v19, v23)).u8[0] & 1) != 0)
        a1[v16 + 2] = (uint64_t)&v18[24 * v24.i64[0]];
      if ((vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(7uLL), v23)).i32[1] & 1) != 0)
        a1[v16 + 3] = (uint64_t)&v18[24 * v24.i64[1]];
      v16 += 2;
      v17 = vaddq_s64(v17, v22);
    }
    while (v16 != 8);
  }
  else
  {
    v7 = (_QWORD *)tbb::internal::allocate_via_handler_v3((tbb::internal *)(24 << a2));
    v8 = v7;
    if ((a4 & 1) != 0)
    {
      bzero(v7, 24 << a2);
    }
    else
    {
      v11 = 1 << a2;
      v12 = v7 + 2;
      do
      {
        *(v12 - 1) = 0;
        *v12 = 3;
        v12 += 3;
        --v11;
      }
      while (v11);
    }
    a1[a2 + 1] = (uint64_t)v8;
    v13 = (2 << a2) - 1;
  }
  __dmb(0xBu);
  *a1 = v13;
}

void sub_20C7F1D50(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8 * v2 + 8) = 0;
  _Unwind_Resume(a1);
}

uint64_t sub_20C7F1D60(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  unint64_t v8;
  uint64_t v9;
  tbb::spin_rw_mutex_v3 *v10;
  uint64_t v11;
  tbb::spin_rw_mutex_v3 *v12;

  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  v8 = sub_20BECF614(a2, a3);
  *(_QWORD *)(a1 + 16) = v8;
  v9 = *(_QWORD *)(v8 + 16);
  __dmb(0xBu);
  if (v9 == 3
    && (v10 = (tbb::spin_rw_mutex_v3 *)(*(_QWORD *)(a1 + 16) + 8),
        *(_BYTE *)(a1 + 8) = 1,
        tbb::spin_rw_mutex_v3::internal_try_acquire_writer(v10)))
  {
    *(_QWORD *)a1 = v10;
    v11 = *(_QWORD *)(a1 + 16);
    if (*(_QWORD *)(v11 + 16) == 3)
      sub_20C7F1E38(a2, v11, a3);
  }
  else
  {
    v12 = (tbb::spin_rw_mutex_v3 *)(*(_QWORD *)(a1 + 16) + 8);
    *(_BYTE *)(a1 + 8) = a4;
    *(_QWORD *)a1 = v12;
    if (a4)
      tbb::spin_rw_mutex_v3::internal_acquire_writer(v12);
    else
      tbb::spin_rw_mutex_v3::internal_acquire_reader((unint64_t *)v12);
  }
  return a1;
}

void sub_20C7F1E24(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20BEBF29C(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C7F1E38(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v5;
  char v6;
  BOOL v7;
  unsigned int v8;
  char v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  tbb::spin_rw_mutex_v3 *v15;
  char v16;
  uint64_t v17;

  __dmb(0xBu);
  *(_QWORD *)(a2 + 16) = 0;
  if (a3)
  {
    v5 = HIDWORD(a3);
    if (!HIDWORD(a3))
      v5 = a3;
    v6 = 32 * (HIDWORD(a3) != 0);
    if (v5 >= 0x10000)
    {
      v5 >>= 16;
      v6 = (32 * (HIDWORD(a3) != 0)) | 0x10;
    }
    if (v5 >= 0x100)
    {
      v5 >>= 8;
      v6 |= 8u;
    }
    if (v5 >= 0x10)
    {
      v5 >>= 4;
      v6 |= 4u;
    }
    v7 = v5 >= 4;
    if (v5 >= 4)
      LODWORD(v5) = v5 >> 2;
    v8 = (v5 >> 1) & 1;
    if (v7)
      v6 += 2;
    v9 = v8 + v6;
  }
  else
  {
    v9 = -1;
  }
  v10 = ~(-1 << v9);
  sub_20C7F1D60(&v15, a1, v10 & a3, 0);
  v11 = (unint64_t *)(v17 + 16);
  v12 = *(_QWORD *)(v17 + 16);
  __dmb(0xBu);
  if (v12 >= 0x40)
  {
    v13 = (2 * v10) | 1;
    while ((bswap64(0x9E3779B97F4A7C55* (*(unsigned int *)(v12 + 20)+ ((*(unsigned int *)(v12 + 20)+ (unint64_t)*(unsigned int *)(v12 + 16)+ (*(unsigned int *)(v12 + 20) + (unint64_t)*(unsigned int *)(v12 + 16))* (*(unsigned int *)(v12 + 20) + (unint64_t)*(unsigned int *)(v12 + 16))) >> 1))) & v13) == a3)
    {
      if (v16 || (v16 = 1, (tbb::spin_rw_mutex_v3::internal_upgrade(v15) & 1) != 0))
      {
        *v11 = *(_QWORD *)v12;
        *(_QWORD *)v12 = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a2 + 16) = v12;
LABEL_24:
        v12 = *v11;
        if (*v11 <= 0x3F)
          return sub_20BEBF29C(&v15);
      }
      else
      {
        v11 = (unint64_t *)(v17 + 16);
        v12 = *(_QWORD *)(v17 + 16);
        __dmb(0xBu);
        if (v12 < 0x40)
          return sub_20BEBF29C(&v15);
      }
    }
    v11 = (unint64_t *)v12;
    goto LABEL_24;
  }
  return sub_20BEBF29C(&v15);
}

void sub_20C7F1FCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEBF29C((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL sub_20C7F1FE0(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD v14[3];

  v4 = *(_QWORD **)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *a1;
  __dmb(0xBu);
  while (1)
  {
    sub_20C7F1D60((uint64_t)v14, (uint64_t)a1, v6 & v5, 1);
    v7 = (_QWORD *)(v14[2] + 16);
    do
    {
      v8 = v7;
      v7 = (_QWORD *)*v7;
      if (v7)
        v9 = v7 == v4;
      else
        v9 = 1;
    }
    while (!v9);
    if (v7)
      break;
    v10 = *a1;
    __dmb(0xBu);
    if (v6 == v10 || !sub_20BECF7E4((uint64_t)a1, v5, v6, v10))
    {
      if (*(_QWORD *)(a2 + 16))
      {
        sub_20BEBF2D0(a2);
        *(_QWORD *)(a2 + 16) = 0;
      }
      sub_20BEBF29C(v14);
      return v7 != 0;
    }
    sub_20BEBF29C(v14);
    v6 = v10;
  }
  *v8 = *v4;
  v11 = (unint64_t *)(a1 + 65);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  sub_20BEBF29C(v14);
  if (!*(_BYTE *)(a2 + 8))
  {
    *(_BYTE *)(a2 + 8) = 1;
    tbb::spin_rw_mutex_v3::internal_upgrade(*(tbb::spin_rw_mutex_v3 **)a2);
  }
  if (*(_QWORD *)(a2 + 16))
  {
    sub_20BEBF2D0(a2);
    *(_QWORD *)(a2 + 16) = 0;
  }
  sub_20C7F129C((uint64_t)a1, (uint64_t)v4);
  return v7 != 0;
}

void sub_20C7F211C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEBF29C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C7F2134(uint64_t a1, _DWORD *a2)
{
  _DWORD *v3;

  v3 = a2;
  return sub_20C7F2164(a1, (uint64_t)&unk_20CAC184C, &v3);
}

uint64_t sub_20C7F2164(uint64_t a1, uint64_t a2, _DWORD **a3)
{
  uint64_t v5;
  _DWORD *v6;
  void *v7;
  uint64_t v9[2];

  v5 = tbb::internal::allocate_via_handler_v3((tbb::internal *)0x30);
  v9[1] = a1;
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  v6 = *a3;
  sub_20BFD6E54((_DWORD *)(v5 + 16), v6);
  sub_20BFD6EA4((_DWORD *)(v5 + 20), v6 + 1);
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 24) = v5 + 32;
  v9[0] = 0;
  sub_20C7F21EC(v9, v7);
  return v5;
}

uint64_t *sub_20C7F21EC(uint64_t *a1, void *a2)
{
  uint64_t v3;

  v3 = *a1;
  if (v3)
    tbb::internal::deallocate_via_handler_v3(v3, a2);
  return a1;
}

pxrInternal__aapl__pxrReserved__::HdInstancerTokens_StaticTokenType *sub_20C7F221C(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::HdInstancerTokens_StaticTokenType *result;
  void *v4;

  result = sub_20C7F2264();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::HdInstancerTokens_StaticTokenType::~HdInstancerTokens_StaticTokenType(result);
    operator delete(v4);
  }
  return (pxrInternal__aapl__pxrReserved__::HdInstancerTokens_StaticTokenType *)atomic_load(a1);
}

pxrInternal__aapl__pxrReserved__::HdInstancerTokens_StaticTokenType *sub_20C7F2264()
{
  pxrInternal__aapl__pxrReserved__::HdInstancerTokens_StaticTokenType *v0;

  v0 = (pxrInternal__aapl__pxrReserved__::HdInstancerTokens_StaticTokenType *)operator new(0x88uLL);
  pxrInternal__aapl__pxrReserved__::HdInstancerTokens_StaticTokenType::HdInstancerTokens_StaticTokenType(v0);
  return v0;
}

void sub_20C7F2290(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::HdCommandArgDescriptor::HdCommandArgDescriptor(_QWORD *this)
{
  *this = 0;
  this[2] = 0;
  return this;
}

{
  *this = 0;
  this[2] = 0;
  return this;
}

double pxrInternal__aapl__pxrReserved__::HdCommandDescriptor::HdCommandDescriptor(pxrInternal__aapl__pxrReserved__::HdCommandDescriptor *this)
{
  double result;

  *((_QWORD *)this + 6) = 0;
  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return result;
}

{
  double result;

  *((_QWORD *)this + 6) = 0;
  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return result;
}

void pxrInternal__aapl__pxrReserved__::HdConeSchemaTokens_StaticTokenType::~HdConeSchemaTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::HdConeSchemaTokens_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  void **v22;

  v22 = (void **)((char *)this + 56);
  sub_20BEEB2B8(&v22);
  v2 = *((_QWORD *)this + 6);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *((_QWORD *)this + 5);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v8 = *((_QWORD *)this + 4);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  v11 = *((_QWORD *)this + 3);
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  v14 = *((_QWORD *)this + 2);
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  v17 = *((_QWORD *)this + 1);
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  if ((*(_QWORD *)this & 7) != 0)
  {
    v20 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v21 = __ldxr(v20);
    while (__stlxr(v21 - 2, v20));
  }
}

pxrInternal__aapl__pxrReserved__::HdConeSchemaTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::HdConeSchemaTokens_StaticTokenType::HdConeSchemaTokens_StaticTokenType(unsigned int **this)
{
  unsigned int **v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int **v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int *v40;
  unsigned int *v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v2 = (unsigned int **)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "cone", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2, "height", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 2, "radius", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 3, "axis", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 4, "X", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 5, "Y", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 6, "Z", 0);
  v3 = *this;
  v35 = v3;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      v35 = v4;
  }
  v6 = *v2;
  v36 = v6;
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    if ((v8 & 1) == 0)
      v36 = v7;
  }
  v9 = this[2];
  v37 = v9;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      v37 = v10;
  }
  v12 = this[3];
  v38 = v12;
  if ((v12 & 7) != 0)
  {
    v13 = (unsigned int *)((unint64_t)v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 2, v13));
    if ((v14 & 1) == 0)
      v38 = v13;
  }
  v15 = this[4];
  v39 = v15;
  if ((v15 & 7) != 0)
  {
    v16 = (unsigned int *)((unint64_t)v15 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 2, v16));
    if ((v17 & 1) == 0)
      v39 = v16;
  }
  v18 = this[5];
  v40 = v18;
  if ((v18 & 7) != 0)
  {
    v19 = (unsigned int *)((unint64_t)v18 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 2, v19));
    if ((v20 & 1) == 0)
      v40 = v19;
  }
  v21 = this[6];
  v41 = v21;
  if ((v21 & 7) != 0)
  {
    v22 = (unsigned int *)((unint64_t)v21 & 0xFFFFFFFFFFFFFFF8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 2, v22));
    if ((v23 & 1) == 0)
      v41 = v22;
  }
  this[7] = 0;
  this[8] = 0;
  this[9] = 0;
  v24 = (unsigned int *)operator new(0x38uLL);
  v25 = 0;
  this[7] = v24;
  this[8] = v24;
  this[9] = v24 + 14;
  do
  {
    v26 = (&v35)[v25];
    *(_QWORD *)v24 = v26;
    if ((v26 & 7) != 0)
    {
      v27 = (unsigned int *)((unint64_t)v26 & 0xFFFFFFFFFFFFFFF8);
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 2, v27));
      if ((v28 & 1) == 0)
        *(_QWORD *)v24 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v25;
    v24 += 2;
  }
  while (v25 != 7);
  v29 = (unsigned int **)&v42;
  this[8] = v24;
  do
  {
    v31 = (uint64_t)*--v29;
    v30 = v31;
    if ((v31 & 7) != 0)
    {
      v32 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
      do
        v33 = __ldxr(v32);
      while (__stlxr(v33 - 2, v32));
    }
  }
  while (v29 != &v35);
  return (pxrInternal__aapl__pxrReserved__::HdConeSchemaTokens_StaticTokenType *)this;
}

void sub_20C7F26E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;

  sub_20BEEB2B8(&a9);
  v26 = &a18;
  while (1)
  {
    v28 = *--v26;
    v27 = v28;
    if ((v28 & 7) != 0)
    {
      v29 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
      do
        v30 = __ldxr(v29);
      while (__stlxr(v30 - 2, v29));
    }
    if (v26 == (uint64_t *)&a11)
    {
      if ((*v24 & 7) != 0)
      {
        v31 = (unsigned int *)(*v24 & 0xFFFFFFFFFFFFFFF8);
        do
          v32 = __ldxr(v31);
        while (__stlxr(v32 - 2, v31));
      }
      if ((*v23 & 7) != 0)
      {
        v33 = (unsigned int *)(*v23 & 0xFFFFFFFFFFFFFFF8);
        do
          v34 = __ldxr(v33);
        while (__stlxr(v34 - 2, v33));
      }
      if ((*v22 & 7) != 0)
      {
        v35 = (unsigned int *)(*v22 & 0xFFFFFFFFFFFFFFF8);
        do
          v36 = __ldxr(v35);
        while (__stlxr(v36 - 2, v35));
      }
      if ((*v21 & 7) != 0)
      {
        v37 = (unsigned int *)(*v21 & 0xFFFFFFFFFFFFFFF8);
        do
          v38 = __ldxr(v37);
        while (__stlxr(v38 - 2, v37));
      }
      if ((*v20 & 7) != 0)
      {
        v39 = (unsigned int *)(*v20 & 0xFFFFFFFFFFFFFFF8);
        do
          v40 = __ldxr(v39);
        while (__stlxr(v40 - 2, v39));
      }
      if ((*v19 & 7) != 0)
      {
        v41 = (unsigned int *)(*v19 & 0xFFFFFFFFFFFFFFF8);
        do
          v42 = __ldxr(v41);
        while (__stlxr(v42 - 2, v41));
      }
      if ((*v18 & 7) != 0)
      {
        v43 = (unsigned int *)(*v18 & 0xFFFFFFFFFFFFFFF8);
        do
          v44 = __ldxr(v43);
        while (__stlxr(v44 - 2, v43));
      }
      _Unwind_Resume(a1);
    }
  }
}

void pxrInternal__aapl__pxrReserved__::HdConeSchema::GetHeight(pxrInternal__aapl__pxrReserved__::HdConeSchema *this@<X0>, _QWORD *a2@<X8>)
{
  unsigned int **v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;

  v4 = (unsigned int **)atomic_load(&pxrInternal__aapl__pxrReserved__::HdConeSchemaTokens);
  if (!v4)
    v4 = sub_20C7F320C(&pxrInternal__aapl__pxrReserved__::HdConeSchemaTokens);
  v5 = v4[1];
  v10 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v10 = v6;
  }
  sub_20C7E94B4((uint64_t *)this, a2);
  if ((v10 & 7) != 0)
  {
    v8 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
}

void pxrInternal__aapl__pxrReserved__::HdConeSchema::GetRadius(pxrInternal__aapl__pxrReserved__::HdConeSchema *this@<X0>, _QWORD *a2@<X8>)
{
  unsigned int **v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;

  v4 = (unsigned int **)atomic_load(&pxrInternal__aapl__pxrReserved__::HdConeSchemaTokens);
  if (!v4)
    v4 = sub_20C7F320C(&pxrInternal__aapl__pxrReserved__::HdConeSchemaTokens);
  v5 = v4[2];
  v10 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v10 = v6;
  }
  sub_20C7E94B4((uint64_t *)this, a2);
  if ((v10 & 7) != 0)
  {
    v8 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
}

void pxrInternal__aapl__pxrReserved__::HdConeSchema::GetAxis(pxrInternal__aapl__pxrReserved__::HdConeSchema *this@<X0>, _QWORD *a2@<X8>)
{
  unsigned int **v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;

  v4 = (unsigned int **)atomic_load(&pxrInternal__aapl__pxrReserved__::HdConeSchemaTokens);
  if (!v4)
    v4 = sub_20C7F320C(&pxrInternal__aapl__pxrReserved__::HdConeSchemaTokens);
  v5 = v4[3];
  v10 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v10 = v6;
  }
  sub_20C7E28BC((uint64_t *)this, a2);
  if ((v10 & 7) != 0)
  {
    v8 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
}

void pxrInternal__aapl__pxrReserved__::HdConeSchema::BuildRetained(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t *v7;
  unsigned int **v9;
  unint64_t v10;
  unsigned int **v11;
  unsigned int **v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  __int128 v18;
  _OWORD v19[3];
  uint64_t v20[3];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  memset(v20, 0, sizeof(v20));
  memset(v19, 0, sizeof(v19));
  v7 = &v21;
  if (*a1)
  {
    v9 = (unsigned int **)atomic_load(&pxrInternal__aapl__pxrReserved__::HdConeSchemaTokens);
    if (!v9)
      v9 = sub_20C7F320C(&pxrInternal__aapl__pxrReserved__::HdConeSchemaTokens);
    sub_20BF32220(v20, v9 + 1);
    sub_20BDE881C(v19, a1);
    v10 = 1;
  }
  else
  {
    v10 = 0;
  }
  if (*a2)
  {
    v11 = (unsigned int **)atomic_load(&pxrInternal__aapl__pxrReserved__::HdConeSchemaTokens);
    if (!v11)
      v11 = sub_20C7F320C(&pxrInternal__aapl__pxrReserved__::HdConeSchemaTokens);
    sub_20BF32220(&v20[v10], v11 + 2);
    sub_20BDE881C(&v19[v10++], a2);
  }
  if (*a3)
  {
    v12 = (unsigned int **)atomic_load(&pxrInternal__aapl__pxrReserved__::HdConeSchemaTokens);
    if (!v12)
      v12 = sub_20C7F320C(&pxrInternal__aapl__pxrReserved__::HdConeSchemaTokens);
    sub_20BF32220(&v20[v10], v12 + 3);
    sub_20BDE881C(&v19[v10++], a3);
  }
  pxrInternal__aapl__pxrReserved__::HdRetainedContainerDataSource::New(v10, v20, (uint64_t *)v19, &v18);
  *a4 = v18;
  for (i = 2; i != -1; --i)
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v19[i]);
  do
  {
    v15 = *--v7;
    v14 = v15;
    if ((v15 & 7) != 0)
    {
      v16 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v17 = __ldxr(v16);
      while (__stlxr(v17 - 2, v16));
    }
  }
  while (v7 != v20);
}

void sub_20C7F2C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  char *v17;
  uint64_t i;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;

  for (i = 32; i != -16; i -= 16)
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(&a11 + i));
  while (1)
  {
    v21 = *((_QWORD *)v17 - 1);
    v17 -= 8;
    v20 = v21;
    if ((v21 & 7) != 0)
    {
      v22 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
      do
        v23 = __ldxr(v22);
      while (__stlxr(v23 - 2, v22));
    }
    if (v17 == &a17)
      _Unwind_Resume(a1);
  }
}

void pxrInternal__aapl__pxrReserved__::HdConeSchema::GetFromParent(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v3 = *a1;
  if (*a1)
  {
    if (!atomic_load(&pxrInternal__aapl__pxrReserved__::HdConeSchemaTokens))
      sub_20C7F320C(&pxrInternal__aapl__pxrReserved__::HdConeSchemaTokens);
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v3 + 24))(&v14, v3);
    sub_20C7E0B14((uint64_t)&v14, &v16);
  }
  else
  {
    v16 = 0;
    v17 = 0;
  }
  sub_20C7E0E2C(a2, &v16);
  v5 = v17;
  if (v3)
  {
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v8 = v15;
    if (v15)
    {
      v9 = (unint64_t *)&v15->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        v11 = v8;
LABEL_22:
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  else if (v17)
  {
    v12 = (unint64_t *)&v17->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      v11 = v5;
      goto LABEL_22;
    }
  }
}

void sub_20C7F2DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a11);
  if (v11)
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

unsigned int **pxrInternal__aapl__pxrReserved__::HdConeSchema::GetSchemaToken(pxrInternal__aapl__pxrReserved__::HdConeSchema *this)
{
  unsigned int **result;

  result = (unsigned int **)atomic_load(&pxrInternal__aapl__pxrReserved__::HdConeSchemaTokens);
  if (!result)
    return sub_20C7F320C(&pxrInternal__aapl__pxrReserved__::HdConeSchemaTokens);
  return result;
}

void *pxrInternal__aapl__pxrReserved__::HdConeSchema::GetDefaultLocator(pxrInternal__aapl__pxrReserved__::HdConeSchema *this)
{
  unsigned __int8 v1;
  unsigned int **v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25498D940);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498D940))
  {
    v3 = (unsigned int **)atomic_load(&pxrInternal__aapl__pxrReserved__::HdConeSchemaTokens);
    if (!v3)
      v3 = sub_20C7F320C(&pxrInternal__aapl__pxrReserved__::HdConeSchemaTokens);
    pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HdDataSourceLocator((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&unk_25498D908, (const pxrInternal__aapl__pxrReserved__::TfToken *)v3);
    __cxa_atexit((void (*)(void *))sub_20C7E0C54, &unk_25498D908, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498D940);
  }
  return &unk_25498D908;
}

void sub_20C7F2EC8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498D940);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdConeSchema::BuildAxisDataSource(pxrInternal__aapl__pxrReserved__::HdConeSchema *this@<X0>, _QWORD *a2@<X8>)
{
  unsigned int **v5;
  unsigned int **v6;
  unsigned int **v7;
  unsigned __int8 v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20;

  v5 = (unsigned int **)atomic_load(&pxrInternal__aapl__pxrReserved__::HdConeSchemaTokens);
  if (!v5)
    v5 = sub_20C7F320C(&pxrInternal__aapl__pxrReserved__::HdConeSchemaTokens);
  if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) == ((unint64_t)v5[4] & 0xFFFFFFFFFFFFFFF8))
  {
    v8 = atomic_load((unsigned __int8 *)&qword_25498D958);
    if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_25498D958))
    {
      sub_20C7EA9FC((uint64_t *)this, &qword_25498D948);
      __cxa_atexit((void (*)(void *))pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource, &qword_25498D948, &dword_20BDBC000);
      __cxa_guard_release(&qword_25498D958);
    }
    v9 = unk_25498D950;
    *a2 = qword_25498D948;
    a2[1] = v9;
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
  }
  else
  {
    v6 = (unsigned int **)atomic_load(&pxrInternal__aapl__pxrReserved__::HdConeSchemaTokens);
    if (!v6)
      v6 = sub_20C7F320C(&pxrInternal__aapl__pxrReserved__::HdConeSchemaTokens);
    if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) == ((unint64_t)v6[5] & 0xFFFFFFFFFFFFFFF8))
    {
      v12 = atomic_load((unsigned __int8 *)&qword_25498D970);
      if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_25498D970))
      {
        sub_20C7EA9FC((uint64_t *)this, &qword_25498D960);
        __cxa_atexit((void (*)(void *))pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource, &qword_25498D960, &dword_20BDBC000);
        __cxa_guard_release(&qword_25498D970);
      }
      v13 = *(_QWORD *)algn_25498D968;
      *a2 = qword_25498D960;
      a2[1] = v13;
      if (v13)
      {
        v14 = (unint64_t *)(v13 + 8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
    }
    else
    {
      v7 = (unsigned int **)atomic_load(&pxrInternal__aapl__pxrReserved__::HdConeSchemaTokens);
      if (!v7)
        v7 = sub_20C7F320C(&pxrInternal__aapl__pxrReserved__::HdConeSchemaTokens);
      if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) == ((unint64_t)v7[6] & 0xFFFFFFFFFFFFFFF8))
      {
        v16 = atomic_load((unsigned __int8 *)&qword_25498D988);
        if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_25498D988))
        {
          sub_20C7EA9FC((uint64_t *)this, &qword_25498D978);
          __cxa_atexit((void (*)(void *))pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource, &qword_25498D978, &dword_20BDBC000);
          __cxa_guard_release(&qword_25498D988);
        }
        v17 = unk_25498D980;
        *a2 = qword_25498D978;
        a2[1] = v17;
        if (v17)
        {
          v18 = (unint64_t *)(v17 + 8);
          do
            v19 = __ldxr(v18);
          while (__stxr(v19 + 1, v18));
        }
      }
      else
      {
        sub_20C7EA9FC((uint64_t *)this, &v20);
        *(_OWORD *)a2 = v20;
      }
    }
  }
}

void sub_20C7F3154(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498D988);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::HdConeSchema::Builder::SetHeight(_QWORD *a1, uint64_t *a2)
{
  sub_20BDE881C(a1, a2);
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdConeSchema::Builder::SetRadius(uint64_t a1, uint64_t *a2)
{
  sub_20BDE881C((_QWORD *)(a1 + 16), a2);
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdConeSchema::Builder::SetAxis(uint64_t a1, uint64_t *a2)
{
  sub_20BDE881C((_QWORD *)(a1 + 32), a2);
  return a1;
}

void pxrInternal__aapl__pxrReserved__::HdConeSchema::Builder::Build(pxrInternal__aapl__pxrReserved__::HdConeSchema::Builder *this@<X0>, _OWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::HdConeSchema::BuildRetained((uint64_t *)this, (uint64_t *)this + 2, (uint64_t *)this + 4, a2);
}

unsigned int **sub_20C7F320C(unint64_t *a1)
{
  unsigned int **result;
  void *v4;

  result = sub_20C7F3254();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::HdConeSchemaTokens_StaticTokenType::~HdConeSchemaTokens_StaticTokenType((pxrInternal__aapl__pxrReserved__::HdConeSchemaTokens_StaticTokenType *)result);
    operator delete(v4);
  }
  return (unsigned int **)atomic_load(a1);
}

unsigned int **sub_20C7F3254()
{
  unsigned int **v0;

  v0 = (unsigned int **)operator new(0x50uLL);
  pxrInternal__aapl__pxrReserved__::HdConeSchemaTokens_StaticTokenType::HdConeSchemaTokens_StaticTokenType(v0);
  return v0;
}

void sub_20C7F3280(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdContainerDataSourceEditor::_GetNode(uint64_t **this@<X0>, const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t *v6;
  _OWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t ElementCount;
  uint64_t i;
  uint64_t *Element;
  uint64_t *v17;
  _QWORD *v18;
  _QWORD *v19;
  _OWORD *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _OWORD *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  __int128 v38;
  __int128 v39;

  v6 = *this;
  if (!*this)
  {
    v7 = operator new(0x20uLL);
    *v7 = 0u;
    v7[1] = 0u;
    sub_20C7F4870(&v38, (uint64_t)v7);
    sub_20BDE82DC((uint64_t)this, &v38);
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
    if (*((_QWORD *)&v38 + 1))
    {
      v9 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v6 = *this;
  }
  v11 = this[1];
  *a3 = v6;
  a3[1] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 1);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  ElementCount = pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::GetElementCount(a2);
  if (ElementCount)
  {
    for (i = 0; i != ElementCount; ++i)
    {
      Element = (uint64_t *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::GetElement(a2, i);
      v17 = *a3;
      v18 = sub_20C7F3594(*a3, Element);
      if ((_QWORD *)v17[1] == v18)
      {
        v24 = operator new(0x20uLL);
        *v24 = 0u;
        v24[1] = 0u;
        sub_20C7F4870(&v38, (uint64_t)v24);
        sub_20BDE82DC((uint64_t)a3, &v38);
        v25 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
        if (*((_QWORD *)&v38 + 1))
        {
          v26 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 - 1, v26));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        v38 = 0uLL;
        v28 = a3[1];
        *(_QWORD *)&v39 = *a3;
        *((_QWORD *)&v39 + 1) = v28;
        if (v28)
        {
          v29 = (unint64_t *)(v28 + 1);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
        }
        v31 = sub_20C7F3610(v17, Element);
        sub_20BDE82DC((uint64_t)v31, &v38);
        sub_20BDE82DC((uint64_t)(v31 + 2), &v39);
        v32 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
        if (*((_QWORD *)&v39 + 1))
        {
          v33 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        v35 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
        if (*((_QWORD *)&v38 + 1))
        {
          v36 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
      }
      else
      {
        v19 = v18 + 3;
        sub_20BDE881C(a3, v18 + 3);
        if (!*a3)
        {
          v20 = operator new(0x20uLL);
          *v20 = 0u;
          v20[1] = 0u;
          sub_20C7F4870(&v38, (uint64_t)v20);
          sub_20BDE82DC((uint64_t)a3, &v38);
          v21 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
          if (*((_QWORD *)&v38 + 1))
          {
            v22 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
            do
              v23 = __ldaxr(v22);
            while (__stlxr(v23 - 1, v22));
            if (!v23)
            {
              ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
              std::__shared_weak_count::__release_weak(v21);
            }
          }
          sub_20BDE881C(v19, (uint64_t *)a3);
        }
      }
    }
  }
}

void sub_20C7F3558(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v1;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C7F3594(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *result;
  _QWORD *v6;

  v3 = (_QWORD *)a1[3];
  if (v3)
  {
    v4 = sub_20BF2B388(v3, a2);
    if (v4)
      return (_QWORD *)(*a1 + 40 * v4[3]);
    else
      return (_QWORD *)a1[1];
  }
  else
  {
    result = (_QWORD *)*a1;
    v6 = (_QWORD *)a1[1];
    if ((_QWORD *)*a1 != v6)
    {
      while ((*result & 0xFFFFFFFFFFFFFFF8) != (*a2 & 0xFFFFFFFFFFFFFFF8))
      {
        result += 5;
        if (result == v6)
          return (_QWORD *)a1[1];
      }
    }
  }
  return result;
}

_QWORD *sub_20C7F3610(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v15[2];
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  v2 = *a2;
  v15[0] = v2;
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) == 0)
      v15[0] = (uint64_t)v3;
  }
  v15[1] = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v5 = sub_20C7F4988(a1, v15);
  v6 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if ((v15[0] & 7) != 0)
  {
    v12 = (unsigned int *)(v15[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  return v5 + 1;
}

void sub_20C7F3784(_Unwind_Exception *a1, uint64_t a2, ...)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  sub_20C7F4794((uint64_t *)va1);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v2);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdContainerDataSourceEditor::Set(uint64_t a1, pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *this, uint64_t *a3)
{
  uint64_t *v6;
  uint64_t *LastElement;
  _QWORD *v8;
  uint64_t v9;
  __int128 v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  _QWORD *v20;
  _QWORD *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t *v25;
  std::__shared_weak_count *v26;
  __int128 v27[3];
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  if (!*((_DWORD *)this + 12))
    return a1;
  pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::RemoveLastElement(this, (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)v27);
  pxrInternal__aapl__pxrReserved__::HdContainerDataSourceEditor::_GetNode((uint64_t **)a1, (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)v27, &v25);
  sub_20C7E0EB0((uint64_t)v27);
  v6 = v25;
  LastElement = (uint64_t *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::GetLastElement(this);
  v8 = sub_20C7F3610(v6, LastElement);
  v9 = (uint64_t)v8;
  if (*a3)
  {
    sub_20BDE881C(v8, a3);
  }
  else
  {
    v20 = operator new(8uLL);
    *v20 = &unk_24C54C3B8;
    *(_QWORD *)&v27[0] = v20;
    v21 = operator new(0x20uLL);
    *v21 = &unk_24C54C3F0;
    v21[1] = 0;
    v21[2] = 0;
    v21[3] = v20;
    *((_QWORD *)&v27[0] + 1) = v21;
    sub_20BDE82DC(v9, v27);
    v22 = (std::__shared_weak_count *)*((_QWORD *)&v27[0] + 1);
    if (*((_QWORD *)&v27[0] + 1))
    {
      v23 = (unint64_t *)(*((_QWORD *)&v27[0] + 1) + 8);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
  }
  if (*(_QWORD *)(a1 + 16))
  {
    if (!*a3)
      goto LABEL_11;
    sub_20C7E0B14((uint64_t)a3, v27);
    v10 = v27[0];
    if (!*((_QWORD *)&v27[0] + 1))
      goto LABEL_10;
    v11 = (unint64_t *)(*((_QWORD *)&v27[0] + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (v12)
    {
LABEL_10:
      if (!(_QWORD)v10)
        goto LABEL_12;
      goto LABEL_11;
    }
    (*(void (**)(_QWORD))(**((_QWORD **)&v10 + 1) + 16))(*((_QWORD *)&v10 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v10 + 1));
    if ((_QWORD)v10)
LABEL_11:
      sub_20C7F5200(a1 + 32, (uint64_t)this);
  }
LABEL_12:
  v27[0] = 0uLL;
  sub_20BDE82DC(v9 + 16, v27);
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v27[0] + 1);
  if (*((_QWORD *)&v27[0] + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v27[0] + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  return a1;
}

void sub_20C7F39E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase *v11;
  void *v13;

  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(v11);
  operator delete(v13);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C7F3A28@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;

  v2 = operator new(8uLL);
  *v2 = &unk_24C54C3B8;
  return sub_20C7F5128(a1, (uint64_t)v2);
}

uint64_t **pxrInternal__aapl__pxrReserved__::HdContainerDataSourceEditor::Overlay(uint64_t **a1, pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *this, uint64_t *a3)
{
  BOOL v4;
  uint64_t *v7;
  uint64_t *LastElement;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t *v14;
  std::__shared_weak_count *v15;
  _BYTE v16[56];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)this + 12))
    v4 = *a3 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::RemoveLastElement(this, (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)v16);
    pxrInternal__aapl__pxrReserved__::HdContainerDataSourceEditor::_GetNode(a1, (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)v16, &v14);
    sub_20C7E0EB0((uint64_t)v16);
    v7 = v14;
    LastElement = (uint64_t *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::GetLastElement(this);
    v9 = sub_20C7F3610(v7, LastElement);
    sub_20BDE881C(v9, a3);
    v10 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  return a1;
}

void sub_20C7F3B5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20C7E0EB0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdContainerDataSourceEditor::Finish(pxrInternal__aapl__pxrReserved__::HdContainerDataSourceEditor *this@<X0>, _OWORD *a2@<X8>)
{
  char *v4;
  unsigned __int8 v5;
  pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *v6;
  pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _QWORD v37[30];

  v37[29] = *MEMORY[0x24BDAC8D0];
  v4 = (char *)this + 16;
  if (!*((_QWORD *)this + 2))
  {
    sub_20C7F4024((uint64_t *)this, &v35);
    *a2 = v35;
    return;
  }
  if (!*((_DWORD *)this + 64))
  {
    sub_20C7F4024((uint64_t *)this, &v34);
    sub_20C7F3F5C(&v34, (uint64_t)v4, &v35);
    *a2 = v35;
    v35 = 0uLL;
    v27 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
    if (!*((_QWORD *)&v34 + 1))
      return;
    v30 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
    do
      v29 = __ldaxr(v30);
    while (__stlxr(v29 - 1, v30));
    goto LABEL_45;
  }
  v5 = atomic_load((unsigned __int8 *)&qword_25498D9A0);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_25498D9A0))
  {
    sub_20C7F3A28(&xmmword_25498D990);
    __cxa_atexit((void (*)(void *))pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource, &xmmword_25498D990, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498D9A0);
  }
  v6 = (pxrInternal__aapl__pxrReserved__::HdContainerDataSourceEditor *)((char *)this + 32);
  v7 = (pxrInternal__aapl__pxrReserved__::HdContainerDataSourceEditor *)((char *)this + 32);
  if (*((_DWORD *)this + 65) >= 5u)
    v7 = *(pxrInternal__aapl__pxrReserved__::HdDataSourceLocator **)v6;
  v8 = *((unsigned int *)this + 64);
  *(_QWORD *)&v35 = sub_20C7F4108;
  v9 = 126 - 2 * __clz(v8);
  if ((_DWORD)v8)
    v10 = v9;
  else
    v10 = 0;
  sub_20C7F5538((uint64_t)v7, (unint64_t)v7 + 56 * v8, (uint64_t (**)(uint64_t, uint64_t))&v35, v10, 1);
  v35 = 0u;
  v36 = 0u;
  v37[28] = 0x400000000;
  if (*((_DWORD *)this + 65) >= 5u)
    v6 = *(pxrInternal__aapl__pxrReserved__::HdDataSourceLocator **)v6;
  v11 = *((_DWORD *)this + 64);
  if (v11)
  {
    v12 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)((char *)v6 + 56 * v11);
    do
    {
      v34 = xmmword_25498D990;
      if (*((_QWORD *)&xmmword_25498D990 + 1))
      {
        v13 = (unint64_t *)(*((_QWORD *)&xmmword_25498D990 + 1) + 8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      pxrInternal__aapl__pxrReserved__::HdContainerDataSourceEditor::Set((uint64_t)&v35, v6, (uint64_t *)&v34);
      v15 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
      if (*((_QWORD *)&v34 + 1))
      {
        v16 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      v6 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)((char *)v6 + 56);
    }
    while (v6 != v12);
  }
  sub_20C7F4024((uint64_t *)this, &v32);
  sub_20C7F4024((uint64_t *)&v35, &v34);
  v31 = v34;
  sub_20C7F413C(&v32, (uint64_t)&v31, (uint64_t)v4, &v33);
  *a2 = v33;
  v33 = 0uLL;
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
  if (*((_QWORD *)&v31 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
  if (*((_QWORD *)&v32 + 1))
  {
    v22 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  sub_20C7F47E8((uint64_t)v37);
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
  if (*((_QWORD *)&v36 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
  if (*((_QWORD *)&v35 + 1))
  {
    v28 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
LABEL_45:
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
}

void sub_20C7F3EEC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498D9A0);
  _Unwind_Resume(a1);
}

void sub_20C7F3F5C(__int128 *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;

  v6 = operator new(0x90uLL);
  v10 = *a1;
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  pxrInternal__aapl__pxrReserved__::HdOverlayContainerDataSource::HdOverlayContainerDataSource(v6, &v10, a2);
  sub_20C7F5460(a3, (uint64_t)v6);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
  if (*((_QWORD *)&v10 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_20C7F3FF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

void sub_20C7F4024(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v4 = operator new(0x18uLL);
  v5 = *a1;
  v6 = (std::__shared_weak_count *)a1[1];
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    *v4 = off_24C54C2F8;
    v4[1] = v5;
    v4[2] = v6;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  else
  {
    *v4 = off_24C54C2F8;
    v4[1] = v5;
    v4[2] = 0;
  }
  sub_20C7F5388(a2, (uint64_t)v4);
  if (v6)
  {
    v10 = (unint64_t *)&v6->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_20C7F40F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_20C7F4108(pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *a1, pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *a2)
{
  unint64_t ElementCount;

  ElementCount = pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::GetElementCount(a1);
  return ElementCount < pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::GetElementCount(a2);
}

void sub_20C7F413C(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;

  v8 = operator new(0x90uLL);
  v12 = *a1;
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  pxrInternal__aapl__pxrReserved__::HdOverlayContainerDataSource::HdOverlayContainerDataSource(v8, &v12, a2, a3);
  sub_20C7F5460(a4, (uint64_t)v8);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_20C7F41E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::HdContainerDataSourceEditor::_FinishWithNoInitialContainer@<D0>(pxrInternal__aapl__pxrReserved__::HdContainerDataSourceEditor *this@<X0>, _OWORD *a2@<X8>)
{
  double result;
  __int128 v4;

  sub_20C7F4024((uint64_t *)this, &v4);
  result = *(double *)&v4;
  *a2 = v4;
  return result;
}

void sub_20C7F4248(uint64_t a1)
{
  sub_20C7F47E8(a1 + 32);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::HdContainerDataSourceEditor::_NodeContainerDataSource::_NodeContainerDataSource(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *a2;
  v2 = a2[1];
  *result = off_24C54C2F8;
  result[1] = v3;
  result[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *a2;
  v2 = a2[1];
  *result = off_24C54C2F8;
  result[1] = v3;
  result[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

char *pxrInternal__aapl__pxrReserved__::HdContainerDataSourceEditor::_NodeContainerDataSource::GetNames@<X0>(char *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v3 = (uint64_t **)*((_QWORD *)this + 1);
  if (v3)
  {
    v4 = *v3;
    v5 = v3[1];
    if (*v3 != v5)
    {
      this = 0;
      do
      {
        if (v4[1] || v4[3])
        {
          if ((unint64_t)this >= *(_QWORD *)(a2 + 16))
          {
            this = sub_20BFCA068((char **)a2, v4);
          }
          else
          {
            v6 = *v4;
            *(_QWORD *)this = *v4;
            if ((v6 & 7) != 0)
            {
              v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
              do
                v8 = __ldxr(v7);
              while (__stxr(v8 + 2, v7));
              if ((v8 & 1) == 0)
                *(_QWORD *)this &= 0xFFFFFFFFFFFFFFF8;
            }
            this += 8;
          }
          *(_QWORD *)(a2 + 8) = this;
        }
        v4 += 5;
      }
      while (v4 != v5);
    }
  }
  return this;
}

void sub_20C7F4398(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdContainerDataSourceEditor::_NodeContainerDataSource::Get(pxrInternal__aapl__pxrReserved__::HdContainerDataSourceEditor::_NodeContainerDataSource *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;

  v5 = (_QWORD *)*((_QWORD *)this + 1);
  if (!v5)
    goto LABEL_28;
  v6 = sub_20C7F3594(v5, a2);
  if (*(_QWORD **)(*((_QWORD *)this + 1) + 8) == v6)
    goto LABEL_28;
  v7 = v6;
  v8 = v6 + 1;
  sub_20C7E0B14((uint64_t)(v6 + 1), &v28);
  if (!(_QWORD)v28)
  {
    if (*v8)
    {
      v14 = v7[2];
      *a3 = *v8;
      a3[1] = v14;
      if (v14)
      {
        v15 = (unint64_t *)(v14 + 8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      goto LABEL_16;
    }
    v21 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
    if (*((_QWORD *)&v28 + 1))
    {
      v22 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v25 = v7[3];
    v24 = v7 + 3;
    if (v25)
    {
      sub_20C7F4578(v24, &v28);
      *(_OWORD *)a3 = v28;
      return;
    }
LABEL_28:
    *a3 = 0;
    a3[1] = 0;
    return;
  }
  v10 = v7[3];
  v9 = v7 + 3;
  if (v10)
  {
    sub_20C7F4578(v9, &v26);
    sub_20C7F3F5C(&v26, (uint64_t)&v28, &v27);
    *(_OWORD *)a3 = v27;
    v27 = 0uLL;
    v11 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
    if (*((_QWORD *)&v26 + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  else
  {
    v17 = *((_QWORD *)&v28 + 1);
    *a3 = v28;
    a3[1] = v17;
    v28 = 0uLL;
  }
LABEL_16:
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
  if (*((_QWORD *)&v28 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_20C7F4554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a13);
  _Unwind_Resume(a1);
}

void sub_20C7F4578(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v4 = operator new(0x18uLL);
  v5 = *a1;
  v6 = (std::__shared_weak_count *)a1[1];
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    *v4 = off_24C54C2F8;
    v4[1] = v5;
    v4[2] = v6;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  else
  {
    *v4 = off_24C54C2F8;
    v4[1] = v5;
    v4[2] = 0;
  }
  sub_20C7F5388(a2, (uint64_t)v4);
  if (v6)
  {
    v10 = (unint64_t *)&v6->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_20C7F4648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

void sub_20C7F465C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C54C2F8;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase((pxrInternal__aapl__pxrReserved__::HdDataSourceBase *)a1);
}

void sub_20C7F468C(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_24C54C2F8;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase((pxrInternal__aapl__pxrReserved__::HdDataSourceBase *)a1);
  operator delete(v2);
}

void sub_20C7F46C0(void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 5;
        sub_20C7F4744((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_20C7F4744(uint64_t a1, _QWORD *a2)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v3;
  unsigned int *v4;
  unsigned int v5;

  v3 = (pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a2 + 1);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a2 + 3));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v3);
  if ((*a2 & 7) != 0)
  {
    v4 = (unsigned int *)(*a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
}

_QWORD *sub_20C7F4794(_QWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = (pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 1);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 3));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v2);
  if ((*a1 & 7) != 0)
  {
    v3 = (unsigned int *)(*a1 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  return a1;
}

uint64_t sub_20C7F47E8(uint64_t a1)
{
  sub_20C7F4824(a1);
  if (*(_DWORD *)(a1 + 228) >= 5u)
    free(*(void **)a1);
  return a1;
}

uint64_t sub_20C7F4824(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = result;
  if (*(_DWORD *)(result + 228) >= 5u)
    result = *(_QWORD *)result;
  v2 = *(unsigned int *)(v1 + 224);
  if ((_DWORD)v2)
  {
    v3 = 56 * v2;
    do
    {
      result = sub_20C7E0EB0(result) + 56;
      v3 -= 56;
    }
    while (v3);
  }
  return result;
}

_QWORD *sub_20C7F4870(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C54C340;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20C7F48C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  a10 = 0;
  if (v10)
    sub_20C7F4940((uint64_t)&a10, v10);
  _Unwind_Resume(exception_object);
}

void sub_20C7F48E4(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_20C7F48F8(uint64_t a1)
{
  sub_20C7F4940(a1 + 24, *(_QWORD *)(a1 + 24));
}

uint64_t sub_20C7F4900(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C54C390))
    return a1 + 24;
  else
    return 0;
}

void sub_20C7F4940(uint64_t a1, uint64_t a2)
{
  void **v3;

  if (a2)
  {
    sub_20BF2B064((uint64_t *)(a2 + 24), 0);
    v3 = (void **)a2;
    sub_20C7F46C0(&v3);
    operator delete((void *)a2);
  }
}

_QWORD *sub_20C7F4988(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  _QWORD *v9;
  char v10;
  unsigned int *v11;
  unsigned int v12;
  _QWORD *result;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24[2];
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;

  v4 = a1[3];
  if (v4)
  {
    v5 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
    v6 = *a2;
    if ((*a2 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v6 &= 0xFFFFFFFFFFFFFFF8;
    }
    v24[0] = v6;
    v24[1] = v5;
    v9 = sub_20BF2D7C8(v4, v24, v24);
    if ((v24[0] & 7) != 0)
    {
      v11 = (unsigned int *)(v24[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
    if (!v10)
      return (_QWORD *)(*a1 + 40 * v9[3]);
    goto LABEL_17;
  }
  result = (_QWORD *)*a1;
  v14 = (_QWORD *)a1[1];
  if ((_QWORD *)*a1 != v14)
  {
    while ((*result & 0xFFFFFFFFFFFFFFF8) != (*a2 & 0xFFFFFFFFFFFFFFF8))
    {
      result += 5;
      if (result == v14)
        goto LABEL_17;
    }
  }
  if (result == v14)
  {
LABEL_17:
    sub_20C7F4F50(v24, a2, a2 + 1);
    sub_20C7F4BA8(a1, v24);
    v15 = v26;
    if (v26)
    {
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v18 = v25;
    if (v25)
    {
      v19 = (unint64_t *)&v25->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    if ((v24[0] & 7) != 0)
    {
      v21 = (unsigned int *)(v24[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v22 = __ldxr(v21);
      while (__stlxr(v22 - 2, v21));
    }
    v23 = a1[1];
    if (0xCCCCCCCCCCCCCCCDLL * ((v23 - *a1) >> 3) >= 8)
    {
      sub_20C7F4FC8(a1);
      v23 = a1[1];
    }
    return (_QWORD *)(v23 - 40);
  }
  return result;
}

void sub_20C7F4B6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C7F4794((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_20C7F4BA8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  void *result;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  void *v15;
  uint64_t *v16;
  uint64_t *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - *a1) >> 3);
    if (v10 + 1 > 0x666666666666666)
      sub_20BDDF694();
    v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *a1) >> 3);
    v12 = 2 * v11;
    if (2 * v11 <= v10 + 1)
      v12 = v10 + 1;
    if (v11 >= 0x333333333333333)
      v13 = 0x666666666666666;
    else
      v13 = v12;
    v19 = v4;
    if (v13)
      v14 = (char *)sub_20BED4724(v4, v13);
    else
      v14 = 0;
    v15 = v14;
    v16 = (uint64_t *)&v14[40 * v10];
    v18 = &v14[40 * v13];
    sub_20C7F4CC8(v16, a2);
    v17 = v16 + 5;
    sub_20C7F4D40(a1, &v15);
    v9 = a1[1];
    result = sub_20C7F4EDC(&v15);
  }
  else
  {
    result = sub_20C7F4CC8(*(uint64_t **)(v4 - 8), a2);
    v9 = v7 + 40;
    a1[1] = v7 + 40;
  }
  a1[1] = v9;
  return result;
}

void sub_20C7F4CB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C7F4EDC((void **)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C7F4CC8(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = *a2;
  *result = *a2;
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) == 0)
      *result &= 0xFFFFFFFFFFFFFFF8;
  }
  v5 = a2[2];
  result[1] = a2[1];
  result[2] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = a2[4];
  result[3] = a2[3];
  result[4] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  return result;
}

uint64_t sub_20C7F4D40(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C7F4DB4((uint64_t)(a1 + 2), a1[1], (uint64_t *)a1[1], *a1, (uint64_t *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C7F4DB4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t *v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 5;
      sub_20C7F4CC8((uint64_t *)(v7 - 40), v9);
      v7 = *((_QWORD *)&v15 + 1) - 40;
      *((_QWORD *)&v15 + 1) -= 40;
    }
    while (v9 != a5);
    v10 = v15;
  }
  v13 = 1;
  sub_20C7F4E58((uint64_t)v12);
  return v10;
}

uint64_t sub_20C7F4E58(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C7F4E8C((uint64_t *)a1);
  return a1;
}

void sub_20C7F4E8C(uint64_t *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = *(_QWORD **)(a1[2] + 8);
  v2 = *(_QWORD **)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      sub_20C7F4744(v3, v1);
      v1 += 5;
    }
    while (v1 != v2);
  }
}

void **sub_20C7F4EDC(void **a1)
{
  sub_20C7F4F0C(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_20C7F4F0C(_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 40;
    sub_20C7F4744(v4, (_QWORD *)(i - 40));
  }
}

uint64_t *sub_20C7F4F50(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = *a2;
  *result = *a2;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      *result &= 0xFFFFFFFFFFFFFFF8;
  }
  v6 = a3[1];
  result[1] = *a3;
  result[2] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = a3[3];
  result[3] = a3[2];
  result[4] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20C7F4FC8(uint64_t *a1)
{
  uint64_t *v1;
  _OWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12[2];

  v1 = a1 + 3;
  if (!a1[3])
  {
    v3 = operator new(0x28uLL);
    *v3 = 0u;
    v3[1] = 0u;
    *((_DWORD *)v3 + 8) = 1065353216;
    sub_20BDEC6E0((uint64_t)v3, 8uLL);
    sub_20BF2B064(v1, (uint64_t)v3);
    v4 = *a1;
    if (a1[1] != *a1)
    {
      v5 = 0;
      do
      {
        v6 = *v1;
        v7 = *(_QWORD *)(v4 + 40 * v5);
        if ((v7 & 7) != 0)
        {
          v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
          do
            v9 = __ldxr(v8);
          while (__stxr(v9 + 2, v8));
          if ((v9 & 1) == 0)
            v7 &= 0xFFFFFFFFFFFFFFF8;
        }
        v12[0] = v7;
        v12[1] = v5;
        sub_20BF2D7C8(v6, v12, v12);
        if ((v12[0] & 7) != 0)
        {
          v10 = (unsigned int *)(v12[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v11 = __ldxr(v10);
          while (__stlxr(v11 - 2, v10));
        }
        ++v5;
        v4 = *a1;
      }
      while (v5 < 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3));
    }
  }
}

void sub_20C7F50D0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = (void *)sub_20BF20BCC(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_20C7F5114(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *a1)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(a1);
  operator delete(v1);
}

_QWORD *sub_20C7F5128(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C54C3F0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20C7F5170(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_20C7F5194(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20C7F51A8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20C7F51C0(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C54C440))
    return a1 + 24;
  else
    return 0;
}

_DWORD *sub_20C7F5200(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  _DWORD *result;

  v4 = *(_DWORD *)(a1 + 224);
  v5 = *(_DWORD *)(a1 + 228);
  if (v4 == v5)
  {
    sub_20C7F5270(a1, v4 + (v4 >> 1) + 1);
    v5 = *(_DWORD *)(a1 + 228);
  }
  v6 = a1;
  if (v5 >= 5)
    v6 = *(_QWORD *)a1;
  result = sub_20C7F1078((_DWORD *)(v6 + 56 * *(unsigned int *)(a1 + 224)), a2);
  ++*(_DWORD *)(a1 + 224);
  return result;
}

void sub_20C7F5270(uint64_t a1, unsigned int a2)
{
  void *v4;
  void *v5;

  v4 = malloc(56 * a2);
  v5 = (void *)a1;
  if (*(_DWORD *)(a1 + 228) >= 5u)
    v5 = *(void **)a1;
  sub_20C7F52F4((uint64_t)v5, (uint64_t)v5 + 56 * *(unsigned int *)(a1 + 224), (uint64_t)v4);
  sub_20C7F4824(a1);
  if (*(_DWORD *)(a1 + 228) >= 5u)
    free(*(void **)a1);
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 228) = a2;
}

uint64_t sub_20C7F52F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    v6 = 0;
    do
    {
      sub_20C7F1078((_DWORD *)(a3 + v6), a1 + v6);
      v6 += 56;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

void sub_20C7F5350(void *a1)
{
  uint64_t v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  for (; v2; v2 -= 56)
  {
    sub_20C7E0EB0(v1);
    v1 += 56;
  }
  __cxa_rethrow();
}

void sub_20C7F5374(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *sub_20C7F5388(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C54C468;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20C7F53D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_20C7F53F4(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20C7F5408(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20C7F5420(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C54C4B8))
    return a1 + 24;
  else
    return 0;
}

_QWORD *sub_20C7F5460(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C54C4E0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20C7F54A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_20C7F54CC(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20C7F54E0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20C7F54F8(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C54C530))
    return a1 + 24;
  else
    return 0;
}

uint64_t sub_20C7F5538(uint64_t result, unint64_t a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4, char a5)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  char *v18;
  char v19;
  int v20;
  uint64_t (*v21)(uint64_t, uint64_t);
  char *v22;
  unint64_t v23;
  char *v24;

  v7 = a2;
  v8 = result;
  v23 = a2;
  v24 = (char *)result;
  while (2)
  {
    v9 = 1 - a4;
LABEL_3:
    v10 = v7 - v8;
    v11 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v7 - v8) >> 3);
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v21 = *a3;
        v23 = v7 - 56;
        result = ((uint64_t (*)(void))v21)();
        if ((_DWORD)result)
          return sub_20C7F5828((uint64_t *)&v24, (uint64_t *)&v23);
        return result;
      case 3uLL:
        v23 = v7 - 56;
        return sub_20C7F5B90(v8, v8 + 56, v7 - 56, a3);
      case 4uLL:
        v23 = v7 - 56;
        return sub_20C7F6528(v8, v8 + 56, v8 + 112, v7 - 56, a3);
      case 5uLL:
        v23 = v7 - 56;
        return sub_20C7F65DC(v8, v8 + 56, v8 + 112, v8 + 168, v7 - 56, a3);
      default:
        if (v10 <= 1343)
        {
          if ((a5 & 1) != 0)
            return sub_20C7F58F8(v8, v7, a3);
          else
            return sub_20C7F5A58(v8, v7, a3);
        }
        if (v9 == 1)
        {
          if (v8 != v7)
            return sub_20C7F66B8(v8, v7, v7, a3);
          return result;
        }
        v12 = v11 >> 1;
        v13 = v7 - 56;
        if ((unint64_t)v10 < 0x1C01)
        {
          sub_20C7F5B90(v8 + 56 * (v11 >> 1), v8, v13, a3);
          if ((a5 & 1) != 0)
          {
LABEL_11:
            v7 = v23;
            goto LABEL_12;
          }
        }
        else
        {
          sub_20C7F5B90(v8, v8 + 56 * (v11 >> 1), v13, a3);
          v14 = 56 * v12;
          v15 = 56 * v12 - 56;
          v16 = v23;
          sub_20C7F5B90((uint64_t)(v24 + 56), (uint64_t)&v24[v15], v23 - 112, a3);
          sub_20C7F5B90((uint64_t)(v24 + 112), (uint64_t)&v24[v14 + 56], v16 - 168, a3);
          sub_20C7F5B90((uint64_t)&v24[v15], (uint64_t)&v24[v14], (uint64_t)&v24[v14 + 56], a3);
          v22 = &v24[v14];
          sub_20C7F5C68((uint64_t *)&v24, (uint64_t *)&v22);
          if ((a5 & 1) != 0)
            goto LABEL_11;
        }
        v17 = ((uint64_t (*)(char *))*a3)(v24 - 56);
        v7 = v23;
        if ((v17 & 1) == 0)
        {
          result = sub_20C7F5D38((uint64_t)v24, v23, (unsigned int (**)(_QWORD *))a3);
          v8 = result;
          goto LABEL_20;
        }
LABEL_12:
        v18 = sub_20C7F5F2C((uint64_t)v24, v7, (uint64_t (**)(void))a3);
        if ((v19 & 1) == 0)
          goto LABEL_19;
        v20 = sub_20C7F6114((uint64_t)v24, (uint64_t)v18, a3);
        v8 = (uint64_t)(v18 + 56);
        result = sub_20C7F6114((uint64_t)(v18 + 56), v7, a3);
        if (!(_DWORD)result)
        {
          if (v20)
          {
            v24 = v18 + 56;
            goto LABEL_18;
          }
LABEL_19:
          result = sub_20C7F5538(v24, v18, a3, -v9, a5 & 1);
          v8 = (uint64_t)(v18 + 56);
LABEL_20:
          a5 = 0;
          v24 = (char *)v8;
          a4 = -v9;
          continue;
        }
        if ((v20 & 1) == 0)
        {
          v23 = (unint64_t)v18;
          v8 = (uint64_t)v24;
          v7 = (unint64_t)v18;
LABEL_18:
          ++v9;
          goto LABEL_3;
        }
        return result;
    }
  }
}

uint64_t sub_20C7F5828(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  _QWORD v7[6];
  int v8;
  unsigned int v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = *a2;
  sub_20C7F1078(v7, *a1);
  if (v2 != v3)
  {
    if (*(_DWORD *)(v3 + 52) >= 7u)
      v4 = *(char **)v3;
    else
      v4 = (char *)v3;
    sub_20C7F6360(v2, v4, &v4[8 * *(unsigned int *)(v3 + 48)]);
  }
  if (v7 != (_QWORD *)v3)
  {
    if (v9 >= 7)
      v5 = (char *)v7[0];
    else
      v5 = (char *)v7;
    sub_20C7F6360(v3, v5, &v5[8 * v8]);
  }
  return sub_20C7E0EB0((uint64_t)v7);
}

void sub_20C7F58DC(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C7F58F8(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;
  _QWORD *v13;
  char *v14;
  _QWORD v15[6];
  int v16;
  unsigned int v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (result != a2)
  {
    v4 = (_QWORD *)result;
    v5 = result + 56;
    if (result + 56 != a2)
    {
      v7 = 0;
      v8 = result;
      do
      {
        v9 = v8;
        v8 = v5;
        result = (*a3)(v5, v9);
        if ((_DWORD)result)
        {
          sub_20C7F1078(v15, v8);
          v10 = v7;
          while (1)
          {
            v11 = *(_DWORD *)((char *)v4 + v10 + 52) >= 7u ? *(char **)((char *)v4 + v10) : (char *)v4 + v10;
            sub_20C7F6360((uint64_t)v4 + v10 + 56, v11, &v11[8 * *(unsigned int *)((char *)v4 + v10 + 48)]);
            if (!v10)
              break;
            v12 = (*a3)((uint64_t)v15, (uint64_t)v4 + v10 - 56);
            v10 -= 56;
            if ((v12 & 1) == 0)
            {
              v13 = (_QWORD *)((char *)v4 + v10 + 56);
              goto LABEL_13;
            }
          }
          v13 = v4;
LABEL_13:
          if (v13 != v15)
          {
            if (v17 >= 7)
              v14 = (char *)v15[0];
            else
              v14 = (char *)v15;
            sub_20C7F6360((uint64_t)v13, v14, &v14[8 * v16]);
          }
          result = sub_20C7E0EB0((uint64_t)v15);
        }
        v5 = v8 + 56;
        v7 += 56;
      }
      while (v8 + 56 != a2);
    }
  }
  return result;
}

void sub_20C7F5A38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C7E0EB0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C7F5A58(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t i;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  char v10;
  char *v11;
  _QWORD v12[6];
  int v13;
  unsigned int v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (result != a2)
  {
    v4 = result;
    for (i = result + 56; v4 + 56 != a2; i = v4 + 56)
    {
      v7 = v4;
      v4 = i;
      result = (*a3)(i, v7);
      if ((_DWORD)result)
      {
        sub_20C7F1078(v12, v4);
        v8 = (_QWORD *)v4;
        do
        {
          if (*((_DWORD *)v8 - 1) >= 7u)
            v9 = (char *)*(v8 - 7);
          else
            v9 = (char *)(v8 - 7);
          sub_20C7F6360((uint64_t)v8, v9, &v9[8 * *((unsigned int *)v8 - 2)]);
          v10 = (*a3)((uint64_t)v12, (uint64_t)(v8 - 14));
          v8 -= 7;
        }
        while ((v10 & 1) != 0);
        if (v8 != v12)
        {
          if (v14 >= 7)
            v11 = (char *)v12[0];
          else
            v11 = (char *)v12;
          sub_20C7F6360((uint64_t)v8, v11, &v11[8 * v13]);
        }
        result = sub_20C7E0EB0((uint64_t)v12);
      }
    }
  }
  return result;
}

void sub_20C7F5B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C7E0EB0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C7F5B90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(uint64_t, uint64_t))
{
  char v7;
  uint64_t result;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v12 = a2;
  v13 = a1;
  v11 = a3;
  v7 = (*a4)(a2, a1);
  result = (*a4)(a3, a2);
  if ((v7 & 1) == 0)
  {
    if (!(_DWORD)result)
      return result;
    sub_20C7F5828(&v12, &v11);
    if (!(*a4)(v12, v13))
      return 1;
    v9 = &v13;
    v10 = &v12;
    goto LABEL_9;
  }
  if (!(_DWORD)result)
  {
    sub_20C7F5828(&v13, &v12);
    if (!(*a4)(v11, v12))
      return 1;
    v9 = &v12;
    v10 = &v11;
LABEL_9:
    sub_20C7F5828(v9, v10);
    return 2;
  }
  sub_20C7F5828(&v13, &v11);
  return 1;
}

uint64_t sub_20C7F5C68(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  _QWORD v7[6];
  int v8;
  unsigned int v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = *a2;
  sub_20C7F1078(v7, *a1);
  if (v2 != v3)
  {
    if (*(_DWORD *)(v3 + 52) >= 7u)
      v4 = *(char **)v3;
    else
      v4 = (char *)v3;
    sub_20C7F6360(v2, v4, &v4[8 * *(unsigned int *)(v3 + 48)]);
  }
  if (v7 != (_QWORD *)v3)
  {
    if (v9 >= 7)
      v5 = (char *)v7[0];
    else
      v5 = (char *)v7;
    sub_20C7F6360(v3, v5, &v5[8 * v8]);
  }
  return sub_20C7E0EB0((uint64_t)v7);
}

void sub_20C7F5D1C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

unint64_t sub_20C7F5D38(uint64_t a1, unint64_t a2, unsigned int (**a3)(_QWORD *))
{
  unint64_t v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  _QWORD v16[6];
  int v17;
  unsigned int v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v14 = a2;
  v15 = a1;
  sub_20C7F1078(v16, a1);
  if ((((uint64_t (*)(_QWORD *, unint64_t))*a3)(v16, a2 - 56) & 1) != 0)
  {
    v6 = a1;
    do
    {
      v6 += 56;
      v15 = v6;
    }
    while ((((uint64_t (*)(_QWORD *, unint64_t))*a3)(v16, v6) & 1) == 0);
  }
  else
  {
    v7 = a1 + 56;
    do
    {
      v6 = v7;
      v15 = v7;
      if (v7 >= v14)
        break;
      v8 = ((uint64_t (*)(_QWORD *, unint64_t))*a3)(v16, v7);
      v7 = v6 + 56;
    }
    while (!v8);
  }
  v9 = v14;
  if (v6 < v14)
  {
    do
    {
      v9 -= 56;
      v14 = v9;
    }
    while ((((uint64_t (*)(_QWORD *, unint64_t))*a3)(v16, v9) & 1) != 0);
    v6 = v15;
  }
  if (v6 < v9)
  {
    do
    {
      sub_20C7F5828((uint64_t *)&v15, (uint64_t *)&v14);
      do
        v15 += 56;
      while (!(*a3)(v16));
      do
        v14 -= 56;
      while ((((uint64_t (*)(_QWORD *))*a3)(v16) & 1) != 0);
      v6 = v15;
    }
    while (v15 < v14);
  }
  if (v6 - 56 != a1)
  {
    if (*(_DWORD *)(v6 - 4) >= 7u)
      v10 = *(char **)(v6 - 56);
    else
      v10 = (char *)(v6 - 56);
    sub_20C7F6360(a1, v10, &v10[8 * *(unsigned int *)(v6 - 8)]);
  }
  if ((_QWORD *)(v6 - 56) != v16)
  {
    if (v18 >= 7)
      v11 = (char *)v16[0];
    else
      v11 = (char *)v16;
    sub_20C7F6360(v6 - 56, v11, &v11[8 * v17]);
  }
  v12 = v15;
  sub_20C7E0EB0((uint64_t)v16);
  return v12;
}

void sub_20C7F5EF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20C7E0EB0((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_20C7F5F2C(uint64_t a1, unint64_t a2, uint64_t (**a3)(void))
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t (*v10)(void);
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  unint64_t v19;
  unint64_t v20;
  _QWORD v21[6];
  int v22;
  unsigned int v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v19 = a2;
  sub_20C7F1078(v21, a1);
  v5 = 0;
  do
  {
    v20 = a1 + v5 + 56;
    v5 += 56;
  }
  while (((*a3)() & 1) != 0);
  v6 = v19;
  if (v5 == 56)
  {
    v9 = a1 + 56;
    do
    {
      if (v9 >= v6)
        break;
      v10 = *a3;
      v6 -= 56;
      v19 = v6;
    }
    while ((((uint64_t (*)(unint64_t, _QWORD *))v10)(v6, v21) & 1) == 0);
  }
  else
  {
    v7 = v19 - 56;
    do
    {
      v19 = v7;
      v8 = ((uint64_t (*)(unint64_t, _QWORD *))*a3)(v7, v21);
      v7 -= 56;
    }
    while (!v8);
    v9 = v20;
  }
  v11 = v9;
  if (v9 < v19)
  {
    do
    {
      sub_20C7F5828((uint64_t *)&v20, (uint64_t *)&v19);
      do
        v20 += 56;
      while (((*a3)() & 1) != 0);
      do
        v19 -= 56;
      while (!(*a3)());
      v11 = v20;
    }
    while (v20 < v19);
  }
  v12 = (char *)(v11 - 56);
  if (v11 - 56 != a1)
  {
    v13 = *(char **)(v11 - 56);
    v15 = v11 - 8;
    v14 = *(unsigned int *)(v11 - 8);
    if (*(_DWORD *)(v15 + 4) >= 7u)
      v16 = v13;
    else
      v16 = v12;
    sub_20C7F6360(a1, v16, &v16[8 * v14]);
  }
  if (v12 != (char *)v21)
  {
    if (v23 >= 7)
      v17 = (char *)v21[0];
    else
      v17 = (char *)v21;
    sub_20C7F6360((uint64_t)v12, v17, &v17[8 * v22]);
  }
  sub_20C7E0EB0((uint64_t)v21);
  return v12;
}

void sub_20C7F60E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C7F6114(uint64_t a1, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  _BOOL8 v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  char *v12;
  char *v13;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[6];
  int v18;
  unsigned int v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v15 = a2;
  v16 = a1;
  v6 = 1;
  switch(0x6DB6DB6DB6DB6DB7 * ((a2 - a1) >> 3))
  {
    case 0:
    case 1:
      return v6;
    case 2:
      v7 = *a3;
      v15 = a2 - 56;
      if (((unsigned int (*)(uint64_t))v7)(a2 - 56))
        sub_20C7F5828(&v16, &v15);
      return v6;
    case 3:
      sub_20C7F5B90(a1, a1 + 56, a2 - 56, a3);
      return v6;
    case 4:
      sub_20C7F6528(a1, a1 + 56, a1 + 112, a2 - 56, a3);
      return v6;
    case 5:
      sub_20C7F65DC(a1, a1 + 56, a1 + 112, a1 + 168, a2 - 56, a3);
      return v6;
    default:
      v8 = a1 + 112;
      sub_20C7F5B90(a1, a1 + 56, a1 + 112, a3);
      v9 = a1 + 168;
      if (v9 == a2)
        return 1;
      v10 = 0;
      break;
  }
  while (!(*a3)(v9, v8))
  {
LABEL_20:
    v8 = v9;
    v9 += 56;
    if (v9 == v15)
      return 1;
  }
  sub_20C7F1078(v17, v9);
  do
  {
    v11 = (_QWORD *)v8;
    if (*(_DWORD *)(v8 + 52) >= 7u)
      v12 = *(char **)v8;
    else
      v12 = (char *)v8;
    sub_20C7F6360(v8 + 56, v12, &v12[8 * *(unsigned int *)(v8 + 48)]);
    if (v8 == v16)
      break;
    v8 -= 56;
  }
  while (((*a3)((uint64_t)v17, (uint64_t)(v11 - 7)) & 1) != 0);
  if (v11 != v17)
  {
    if (v19 >= 7)
      v13 = (char *)v17[0];
    else
      v13 = (char *)v17;
    sub_20C7F6360((uint64_t)v11, v13, &v13[8 * v18]);
  }
  if (++v10 != 8)
  {
    sub_20C7E0EB0((uint64_t)v17);
    goto LABEL_20;
  }
  v6 = v9 + 56 == v15;
  sub_20C7E0EB0((uint64_t)v17);
  return v6;
}

void sub_20C7F6340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20C7E0EB0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C7F6360(uint64_t a1, char *a2, char *a3)
{
  char *v4;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  unsigned int *v10;
  unsigned int v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;

  v4 = a2;
  v6 = *(_DWORD *)(a1 + 52);
  v7 = (_QWORD *)a1;
  if (v6 >= 7)
    v7 = *(_QWORD **)a1;
  v8 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v8)
  {
    v9 = &v7[v8];
    do
    {
      if ((*v7 & 7) != 0)
      {
        v10 = (unsigned int *)(*v7 & 0xFFFFFFFFFFFFFFF8);
        do
          v11 = __ldxr(v10);
        while (__stlxr(v11 - 2, v10));
      }
      ++v7;
    }
    while (v7 != v9);
    v6 = *(_DWORD *)(a1 + 52);
  }
  *(_DWORD *)(a1 + 48) = 0;
  v12 = (unint64_t)(a3 - a2) >> 3;
  if (v6 < v12)
  {
    sub_20C7F645C(a1, (unint64_t)(a3 - a2) >> 3);
    v6 = *(_DWORD *)(a1 + 52);
  }
  v13 = (_QWORD *)a1;
  if (v6 >= 7)
    v13 = *(_QWORD **)a1;
  while (v4 != a3)
  {
    v14 = *(_QWORD *)v4;
    *v13 = *(_QWORD *)v4;
    if ((v14 & 7) != 0)
    {
      v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 2, v15));
      if ((v16 & 1) == 0)
        *v13 &= 0xFFFFFFFFFFFFFFF8;
    }
    v4 += 8;
    ++v13;
  }
  *(_DWORD *)(a1 + 48) = v12;
}

void sub_20C7F645C(uint64_t a1, unsigned int a2)
{
  _QWORD *v4;
  _QWORD *v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  unsigned int *v13;
  unsigned int v14;

  v4 = malloc(8 * a2);
  v5 = v4;
  v6 = *(_DWORD *)(a1 + 52);
  v7 = (_QWORD *)a1;
  if (v6 >= 7)
    v7 = *(_QWORD **)a1;
  v8 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v8)
  {
    v9 = 8 * v8;
    v10 = v4;
    do
    {
      *v10++ = *v7;
      *v7++ = 0;
      v9 -= 8;
    }
    while (v9);
  }
  v11 = (_QWORD *)a1;
  if (v6 >= 7)
    v11 = *(_QWORD **)a1;
  if ((_DWORD)v8)
  {
    v12 = &v11[v8];
    do
    {
      if ((*v11 & 7) != 0)
      {
        v13 = (unsigned int *)(*v11 & 0xFFFFFFFFFFFFFFF8);
        do
          v14 = __ldxr(v13);
        while (__stlxr(v14 - 2, v13));
      }
      ++v11;
    }
    while (v11 != v12);
    v6 = *(_DWORD *)(a1 + 52);
  }
  if (v6 >= 7)
    free(*(void **)a1);
  *(_QWORD *)a1 = v5;
  *(_DWORD *)(a1 + 52) = a2;
}

uint64_t sub_20C7F6528(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(uint64_t, uint64_t))
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v13 = a2;
  v14 = a1;
  v11 = a4;
  v12 = a3;
  sub_20C7F5B90(a1, a2, a3, a5);
  result = (*a5)(a4, a3);
  if ((_DWORD)result)
  {
    sub_20C7F5828(&v12, &v11);
    result = (*a5)(v12, a2);
    if ((_DWORD)result)
    {
      sub_20C7F5828(&v13, &v12);
      result = (*a5)(v13, a1);
      if ((_DWORD)result)
        return sub_20C7F5828(&v14, &v13);
    }
  }
  return result;
}

uint64_t sub_20C7F65DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (**a6)(uint64_t, uint64_t))
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v16 = a2;
  v17 = a1;
  v14 = a4;
  v15 = a3;
  v13 = a5;
  sub_20C7F6528(a1, a2, a3, a4, a6);
  result = (*a6)(a5, a4);
  if ((_DWORD)result)
  {
    sub_20C7F5828(&v14, &v13);
    result = (*a6)(v14, a3);
    if ((_DWORD)result)
    {
      sub_20C7F5828(&v15, &v14);
      result = (*a6)(v15, a2);
      if ((_DWORD)result)
      {
        sub_20C7F5828(&v16, &v15);
        result = (*a6)(v16, a1);
        if ((_DWORD)result)
          return sub_20C7F5828(&v17, &v16);
      }
    }
  }
  return result;
}

uint64_t sub_20C7F66B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v17;
  uint64_t v18;

  v18 = a1;
  if (a1 != a2)
  {
    v6 = a2;
    v7 = a1;
    v8 = a2 - a1;
    v9 = (a2 - a1) / 56;
    if (a2 - a1 >= 57)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = a1 + 56 * v10;
      do
      {
        sub_20C7F681C(v7, a4, v9, v12);
        v12 -= 56;
        --v11;
      }
      while (v11);
    }
    v17 = v6;
    if (v6 == a3)
    {
      a3 = v6;
    }
    else
    {
      v13 = v6;
      do
      {
        if ((*a4)(v13, v18))
        {
          sub_20C7F5828(&v17, &v18);
          sub_20C7F681C(v18, a4, v9, v18);
        }
        v13 = v17 + 56;
        v17 = v13;
      }
      while (v13 != a3);
      v7 = v18;
      v8 = v6 - v18;
    }
    if (v8 >= 57)
    {
      v14 = v8 / 0x38uLL;
      do
      {
        sub_20C7F6A08(v7, v6, (unsigned int (**)(uint64_t, uint64_t))a4, v14);
        v6 -= 56;
      }
      while (v14-- > 2);
      return v17;
    }
  }
  return a3;
}

uint64_t sub_20C7F681C(uint64_t result, uint64_t (**a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  int64_t v10;
  uint64_t v11;
  int64_t v12;
  _QWORD *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  _QWORD v17[6];
  int v18;
  unsigned int v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v6 = result;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= 0x6DB6DB6DB6DB6DB7 * ((a4 - result) >> 3))
    {
      v10 = (0xDB6DB6DB6DB6DB6ELL * ((a4 - result) >> 3)) | 1;
      v11 = result + 56 * v10;
      v12 = 0xDB6DB6DB6DB6DB6ELL * ((a4 - result) >> 3) + 2;
      if (v12 < a3 && (*a2)(result + 56 * v10, v11 + 56))
      {
        v11 += 56;
        v10 = v12;
      }
      result = (*a2)(v11, v5);
      if ((result & 1) == 0)
      {
        sub_20C7F1078(v17, v5);
        do
        {
          v13 = (_QWORD *)v11;
          if (v5 != v11)
          {
            if (*(_DWORD *)(v11 + 52) >= 7u)
              v14 = *(char **)v11;
            else
              v14 = (char *)v11;
            sub_20C7F6360(v5, v14, &v14[8 * *(unsigned int *)(v11 + 48)]);
          }
          if (v7 < v10)
            break;
          v15 = (2 * v10) | 1;
          v11 = v6 + 56 * v15;
          v10 = 2 * v10 + 2;
          if (v10 >= a3)
          {
            v10 = v15;
          }
          else if ((*a2)(v6 + 56 * v15, v11 + 56))
          {
            v11 += 56;
          }
          else
          {
            v10 = v15;
          }
          v5 = (uint64_t)v13;
        }
        while (!(*a2)(v11, (uint64_t)v17));
        if (v13 != v17)
        {
          if (v19 >= 7)
            v16 = (char *)v17[0];
          else
            v16 = (char *)v17;
          sub_20C7F6360((uint64_t)v13, v16, &v16[8 * v18]);
        }
        return sub_20C7E0EB0((uint64_t)v17);
      }
    }
  }
  return result;
}

void sub_20C7F69E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C7E0EB0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C7F6A08(uint64_t result, uint64_t a2, unsigned int (**a3)(uint64_t, uint64_t), uint64_t a4)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  char *v10;
  char *v11;
  char *v12;
  _QWORD v13[6];
  int v14;
  unsigned int v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (a4 >= 2)
  {
    v7 = result;
    sub_20C7F1078(v13, result);
    v8 = (_QWORD *)sub_20C7F6B68(v7, a3, a4);
    v9 = v8;
    if (v8 == (_QWORD *)(a2 - 56))
    {
      if (v8 != v13)
      {
        if (v15 >= 7)
          v12 = (char *)v13[0];
        else
          v12 = (char *)v13;
        sub_20C7F6360((uint64_t)v8, v12, &v12[8 * v14]);
      }
    }
    else
    {
      if (*(_DWORD *)(a2 - 4) >= 7u)
        v10 = *(char **)(a2 - 56);
      else
        v10 = (char *)(a2 - 56);
      sub_20C7F6360((uint64_t)v8, v10, &v10[8 * *(unsigned int *)(a2 - 8)]);
      if ((_QWORD *)(a2 - 56) != v13)
      {
        if (v15 >= 7)
          v11 = (char *)v13[0];
        else
          v11 = (char *)v13;
        sub_20C7F6360(a2 - 56, v11, &v11[8 * v14]);
      }
      sub_20C7F6C3C(v7, (uint64_t)(v9 + 7), (uint64_t (**)(uint64_t, uint64_t))a3, 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v9 - v7 + 56) >> 3));
    }
    return sub_20C7E0EB0((uint64_t)v13);
  }
  return result;
}

void sub_20C7F6B4C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C7F6B68(uint64_t a1, unsigned int (**a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = a1 + 56 * v6 + 56;
    v10 = 2 * v6;
    v6 = (2 * v6) | 1;
    v11 = v10 + 2;
    if (v10 + 2 < a3 && (*a2)(v9, v9 + 56))
    {
      v9 += 56;
      v6 = v11;
    }
    if (a1 != v9)
    {
      if (*(_DWORD *)(v9 + 52) >= 7u)
        v12 = *(char **)v9;
      else
        v12 = (char *)v9;
      sub_20C7F6360(a1, v12, &v12[8 * *(unsigned int *)(v9 + 48)]);
    }
    a1 = v9;
  }
  while (v6 <= v8);
  return v9;
}

uint64_t sub_20C7F6C3C(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4)
{
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  char *v11;
  char *v12;
  _QWORD v13[6];
  int v14;
  unsigned int v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v6 = result;
    v7 = v4 >> 1;
    v8 = result + 56 * (v4 >> 1);
    v9 = a2 - 56;
    result = (*a3)(v8, a2 - 56);
    if ((_DWORD)result)
    {
      sub_20C7F1078(v13, v9);
      do
      {
        v10 = (_QWORD *)v8;
        if (v9 != v8)
        {
          if (*(_DWORD *)(v8 + 52) >= 7u)
            v11 = *(char **)v8;
          else
            v11 = (char *)v8;
          sub_20C7F6360(v9, v11, &v11[8 * *(unsigned int *)(v8 + 48)]);
        }
        if (!v7)
          break;
        v7 = (v7 - 1) >> 1;
        v8 = v6 + 56 * v7;
        v9 = (uint64_t)v10;
      }
      while (((*a3)(v8, (uint64_t)v13) & 1) != 0);
      if (v10 != v13)
      {
        if (v15 >= 7)
          v12 = (char *)v13[0];
        else
          v12 = (char *)v13;
        sub_20C7F6360((uint64_t)v10, v12, &v12[8 * v14]);
      }
      return sub_20C7E0EB0((uint64_t)v13);
    }
  }
  return result;
}

void sub_20C7F6D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C7E0EB0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdContainerSchema::GetNames@<X0>(pxrInternal__aapl__pxrReserved__::HdContainerSchema *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = *(_QWORD *)this;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

double pxrInternal__aapl__pxrReserved__::HdContainerSchema::BuildRetained@<D0>(unint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, _OWORD *a4@<X8>)
{
  double result;
  __int128 v6;

  pxrInternal__aapl__pxrReserved__::HdRetainedContainerDataSource::New(a1, a2, a3, &v6);
  result = *(double *)&v6;
  *a4 = v6;
  return result;
}

pxrInternal__aapl__pxrReserved__::HdCoordSys *pxrInternal__aapl__pxrReserved__::HdCoordSys::HdCoordSys(pxrInternal__aapl__pxrReserved__::HdCoordSys *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  pxrInternal__aapl__pxrReserved__::HdSprim *v4;

  v4 = pxrInternal__aapl__pxrReserved__::HdSprim::HdSprim(this, a2);
  *(_QWORD *)v4 = off_24C54C558;
  sub_20C7F6E2C(a2, (uint64_t)v4 + 16);
  return this;
}

void sub_20C7F6E18(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::HdSprim *v1;

  pxrInternal__aapl__pxrReserved__::HdSprim::~HdSprim(v1);
  _Unwind_Resume(a1);
}

void sub_20C7F6E2C(pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *Name;
  pxrInternal__aapl__pxrReserved__::TfToken *v4;
  uint64_t *EmptyString;
  const char *v6;
  int v7;
  unint64_t v8;
  size_t v9;
  size_t v10;
  const char *v11;
  __int128 v12;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v13;
  unint64_t v14;
  const char *v15;
  pxrInternal__aapl__pxrReserved__::TfToken *v16;
  uint64_t *v17;
  std::string __p;
  std::string __dst;

  Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName(a1);
  v4 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C7F742C();
  if ((*((_QWORD *)v4 + 1) & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*((_QWORD *)v4 + 1) & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v4);
  if (*((char *)EmptyString + 23) >= 0)
    v6 = (const char *)EmptyString;
  else
    v6 = (const char *)*EmptyString;
  v7 = *((char *)Name + 23);
  v8 = Name[1];
  if (v7 >= 0)
    v9 = *((unsigned __int8 *)Name + 23);
  else
    v9 = Name[1];
  v10 = strlen(v6);
  if (v9 < v10)
    goto LABEL_14;
  v11 = (const char *)*Name;
  if (v7 >= 0)
    v11 = (const char *)Name;
  if (!strcmp(&v11[v9 - v10], v6))
  {
    v13 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
    if (!v13)
      v13 = sub_20C14397C(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
    v14 = *((_QWORD *)v13 + 10) & 0xFFFFFFFFFFFFFFF8;
    if (v14)
    {
      v15 = (const char *)(v14 + 16);
      if (*(char *)(v14 + 39) < 0)
        v15 = *(const char **)v15;
    }
    else
    {
      v15 = "";
    }
    pxrInternal__aapl__pxrReserved__::TfStringGetBeforeSuffix((uint64_t)Name, *v15, &__dst);
  }
  else
  {
LABEL_14:
    if (v7 < 0)
    {
      sub_20BDDBFAC(&__dst, (void *)*Name, v8);
    }
    else
    {
      v12 = *(_OWORD *)Name;
      __dst.__r_.__value_.__r.__words[2] = Name[2];
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v12;
    }
  }
  v16 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C7F742C();
  if ((*(_QWORD *)v16 & 0xFFFFFFFFFFFFFFF8) != 0)
    v17 = (uint64_t *)((*(_QWORD *)v16 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v17 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v16);
  pxrInternal__aapl__pxrReserved__::SdfPath::StripPrefixNamespace(&__dst, (uint64_t)v17, &__p);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_20C7F6FB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdCoordSys::Sync(uint64_t this, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *a2, pxrInternal__aapl__pxrReserved__::HdRenderParam *a3, unsigned int *a4)
{
  uint64_t v6;
  unsigned __int8 v7;
  std::string *v8;
  _QWORD *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  pxrInternal__aapl__pxrReserved__::HdCoordSysSchema *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  pxrInternal__aapl__pxrReserved__::HdCoordSysSchemaTokens_StaticTokenType *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  std::string *p_p;
  std::string::size_type v23;
  std::string::size_type v24;
  unsigned int *v25;
  unsigned int v26;
  _QWORD v27[3];
  void **v28;
  uint64_t v29;
  uint64_t v30;
  std::string __p;
  const char *v32;
  char v33;
  uint64_t v34;

  v6 = this;
  v34 = *MEMORY[0x24BDAC8D0];
  if (a2
    || (__p.__r_.__value_.__r.__words[0] = (std::string::size_type)"hd/coordSys.cpp",
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)"Sync",
        __p.__r_.__value_.__r.__words[2] = 70,
        v32 = "virtual void pxrInternal__aapl__pxrReserved__::HdCoordSys::Sync(HdSceneDelegate *const, HdRenderParam *con"
              "st, HdDirtyBits *const)",
        v33 = 0,
        this = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&__p, "sceneDelegate", 0),
        (this & 1) != 0))
  {
    if ((*(_BYTE *)a4 & 1) != 0)
    {
      v7 = atomic_load((unsigned __int8 *)&qword_25498D9B0);
      if ((v7 & 1) == 0)
      {
        v14 = (pxrInternal__aapl__pxrReserved__::HdCoordSysSchema *)__cxa_guard_acquire(&qword_25498D9B0);
        if ((_DWORD)v14)
        {
          v15 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::HdCoordSysSchema::GetSchemaToken(v14);
          v29 = v15;
          if ((v15 & 7) != 0)
          {
            v16 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
            do
              v17 = __ldxr(v16);
            while (__stxr(v17 + 2, v16));
            if ((v17 & 1) == 0)
              v29 &= 0xFFFFFFFFFFFFFFF8;
          }
          v18 = (pxrInternal__aapl__pxrReserved__::HdCoordSysSchemaTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCoordSysSchemaTokens);
          if (!v18)
            v18 = sub_20C7F76D8(&pxrInternal__aapl__pxrReserved__::HdCoordSysSchemaTokens);
          v19 = *((_QWORD *)v18 + 1);
          v30 = v19;
          if ((v19 & 7) != 0)
          {
            v20 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
            do
              v21 = __ldxr(v20);
            while (__stxr(v21 + 2, v20));
            if ((v21 & 1) == 0)
              v30 &= 0xFFFFFFFFFFFFFFF8;
          }
          sub_20C374970(v27, &v29, 2uLL);
          pxrInternal__aapl__pxrReserved__::SdfPath::JoinIdentifier(v27, &__p);
          pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&unk_25498D9A8);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v28 = (void **)v27;
          sub_20BEEB2B8(&v28);
          p_p = &__p;
          do
          {
            v24 = p_p[-1].__r_.__value_.__r.__words[2];
            p_p = (std::string *)((char *)p_p - 8);
            v23 = v24;
            if ((v24 & 7) != 0)
            {
              v25 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
              do
                v26 = __ldxr(v25);
              while (__stlxr(v26 - 2, v25));
            }
          }
          while (p_p != (std::string *)&v29);
          __cxa_atexit((void (*)(void *))sub_20C20ACA4, &unk_25498D9A8, &dword_20BDBC000);
          __cxa_guard_release(&qword_25498D9B0);
        }
      }
      (*(void (**)(std::string *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, uint64_t, void *))(*(_QWORD *)a2 + 120))(&__p, a2, v6 + 8, &unk_25498D9A8);
      if (sub_20BFB5E50((pxrInternal__aapl__pxrReserved__::VtValue *)&__p))
      {
        if ((__p.__r_.__value_.__s.__data_[8] & 4) != 0)
          v8 = (std::string *)(*(uint64_t (**)(std::string *))((__p.__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFF8)
                                                                       + 168))(&__p);
        else
          v8 = &__p;
        sub_20BF32220((_QWORD *)(v6 + 16), v8);
      }
      else
      {
        sub_20C7F6E2C((pxrInternal__aapl__pxrReserved__::SdfPath *)(v6 + 8), (uint64_t)v27);
        v9 = (_QWORD *)(v6 + 16);
        if (v27 == (_QWORD *)(v6 + 16))
        {
          if ((v27[0] & 7) != 0)
          {
            v12 = (unsigned int *)(v27[0] & 0xFFFFFFFFFFFFFFF8);
            do
              v13 = __ldxr(v12);
            while (__stlxr(v13 - 2, v12));
          }
        }
        else
        {
          if ((*v9 & 7) != 0)
          {
            v10 = (unsigned int *)(*v9 & 0xFFFFFFFFFFFFFFF8);
            do
              v11 = __ldxr(v10);
            while (__stlxr(v11 - 2, v10));
          }
          *v9 = v27[0];
        }
      }
      this = sub_20BF4C2D8((uint64_t)&__p);
    }
    *a4 = 0;
  }
  return this;
}

void sub_20C7F72C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  unsigned int *v21;
  unsigned int v22;

  if ((a13 & 7) != 0)
  {
    v21 = (unsigned int *)(a13 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  __cxa_guard_abort(&qword_25498D9B0);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdCoordSys::~HdCoordSys(pxrInternal__aapl__pxrReserved__::HdCoordSys *this)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;

  *(_QWORD *)this = off_24C54C558;
  v1 = *((_QWORD *)this + 2);
  if ((v1 & 7) != 0)
  {
    v2 = (unsigned int *)(v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  pxrInternal__aapl__pxrReserved__::HdSprim::~HdSprim(this);
}

{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;

  *(_QWORD *)this = off_24C54C558;
  v1 = *((_QWORD *)this + 2);
  if ((v1 & 7) != 0)
  {
    v2 = (unsigned int *)(v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  pxrInternal__aapl__pxrReserved__::HdSprim::~HdSprim(this);
}

{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  void *v4;

  *(_QWORD *)this = off_24C54C558;
  v1 = *((_QWORD *)this + 2);
  if ((v1 & 7) != 0)
  {
    v2 = (unsigned int *)(v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  pxrInternal__aapl__pxrReserved__::HdSprim::~HdSprim(this);
  operator delete(v4);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdCoordSys::GetInitialDirtyBitsMask(pxrInternal__aapl__pxrReserved__::HdCoordSys *this)
{
  return 3;
}

unint64_t sub_20C7F742C()
{
  char *v0;
  _QWORD *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int **v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  void **v24;
  char v25;
  unsigned int *v26;
  unsigned int *v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v0 = (char *)atomic_load(&qword_25498D9B8);
  if (!v0)
  {
    v0 = (char *)operator new(0x28uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0, "coordSys", 0);
    v2 = v0 + 8;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 8, "binding", 0);
    v3 = *(unsigned int **)v0;
    v26 = v3;
    if ((v3 & 7) != 0)
    {
      v4 = (unsigned int *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v5 = __ldxr(v4);
      while (__stxr(v5 + 2, v4));
      if ((v5 & 1) == 0)
        v26 = v4;
    }
    v6 = (unsigned int *)*v2;
    v27 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v27 = v7;
    }
    *((_QWORD *)v0 + 2) = 0;
    *((_QWORD *)v0 + 3) = 0;
    *((_QWORD *)v0 + 4) = 0;
    v24 = (void **)(v0 + 16);
    v25 = 0;
    v9 = operator new(0x10uLL);
    v10 = 0;
    *((_QWORD *)v0 + 2) = v9;
    *((_QWORD *)v0 + 3) = v9;
    *((_QWORD *)v0 + 4) = v9 + 2;
    do
    {
      v11 = (&v26)[v10];
      *v9 = v11;
      if ((v11 & 7) != 0)
      {
        v12 = (unsigned int *)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8);
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 2, v12));
        if ((v13 & 1) == 0)
          *v9 &= 0xFFFFFFFFFFFFFFF8;
      }
      ++v10;
      ++v9;
    }
    while (v10 != 2);
    v14 = (unsigned int **)&v28;
    *((_QWORD *)v0 + 3) = v9;
    do
    {
      v16 = (uint64_t)*--v14;
      v15 = v16;
      if ((v16 & 7) != 0)
      {
        v17 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
        do
          v18 = __ldxr(v17);
        while (__stlxr(v18 - 2, v17));
      }
    }
    while (v14 != &v26);
    while (!__ldaxr(&qword_25498D9B8))
    {
      if (!__stlxr((unint64_t)v0, &qword_25498D9B8))
        return (unint64_t)v0;
    }
    __clrex();
    v24 = (void **)(v0 + 16);
    sub_20BEEB2B8(&v24);
    if ((*v2 & 7) != 0)
    {
      v20 = (unsigned int *)(*v2 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stlxr(v21 - 2, v20));
    }
    if ((*(_QWORD *)v0 & 7) != 0)
    {
      v22 = (unsigned int *)(*(_QWORD *)v0 & 0xFFFFFFFFFFFFFFF8);
      do
        v23 = __ldxr(v22);
      while (__stlxr(v23 - 2, v22));
    }
    operator delete(v0);
    return atomic_load(&qword_25498D9B8);
  }
  return (unint64_t)v0;
}

void sub_20C7F763C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  _QWORD *v14;
  _QWORD *v15;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;

  sub_20BEEB2B8(&a10);
  v17 = &a14;
  while (1)
  {
    v19 = *--v17;
    v18 = v19;
    if ((v19 & 7) != 0)
    {
      v20 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stlxr(v21 - 2, v20));
    }
    if (v17 == (uint64_t *)&a12)
    {
      if ((*v15 & 7) != 0)
      {
        v22 = (unsigned int *)(*v15 & 0xFFFFFFFFFFFFFFF8);
        do
          v23 = __ldxr(v22);
        while (__stlxr(v23 - 2, v22));
      }
      if ((*v14 & 7) != 0)
      {
        v24 = (unsigned int *)(*v14 & 0xFFFFFFFFFFFFFFF8);
        do
          v25 = __ldxr(v24);
        while (__stlxr(v25 - 2, v24));
      }
      operator delete(v14);
      _Unwind_Resume(a1);
    }
  }
}

pxrInternal__aapl__pxrReserved__::HdCoordSysSchemaTokens_StaticTokenType *sub_20C7F76D8(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::HdCoordSysSchemaTokens_StaticTokenType *result;
  void *v4;

  result = sub_20C7F7720();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::HdCoordSysSchemaTokens_StaticTokenType::~HdCoordSysSchemaTokens_StaticTokenType(result);
    operator delete(v4);
  }
  return (pxrInternal__aapl__pxrReserved__::HdCoordSysSchemaTokens_StaticTokenType *)atomic_load(a1);
}

pxrInternal__aapl__pxrReserved__::HdCoordSysSchemaTokens_StaticTokenType *sub_20C7F7720()
{
  pxrInternal__aapl__pxrReserved__::HdCoordSysSchemaTokens_StaticTokenType *v0;

  v0 = (pxrInternal__aapl__pxrReserved__::HdCoordSysSchemaTokens_StaticTokenType *)operator new(0x28uLL);
  pxrInternal__aapl__pxrReserved__::HdCoordSysSchemaTokens_StaticTokenType::HdCoordSysSchemaTokens_StaticTokenType(v0);
  return v0;
}

void sub_20C7F774C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdCoordSysSchemaTokens_StaticTokenType::~HdCoordSysSchemaTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::HdCoordSysSchemaTokens_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int v6;
  void **v7;

  v7 = (void **)((char *)this + 16);
  sub_20BEEB2B8(&v7);
  v2 = *((_QWORD *)this + 1);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  if ((*(_QWORD *)this & 7) != 0)
  {
    v5 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
}

pxrInternal__aapl__pxrReserved__::HdCoordSysSchemaTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::HdCoordSysSchemaTokens_StaticTokenType::HdCoordSysSchemaTokens_StaticTokenType(unsigned int **this)
{
  unsigned int **v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int **v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v20;
  unsigned int *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v2 = (unsigned int **)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "coordSys", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2, "name", 0);
  v3 = *this;
  v20 = v3;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      v20 = v4;
  }
  v6 = *v2;
  v21 = v6;
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    if ((v8 & 1) == 0)
      v21 = v7;
  }
  this[2] = 0;
  this[3] = 0;
  this[4] = 0;
  v9 = (unsigned int *)operator new(0x10uLL);
  v10 = 0;
  this[2] = v9;
  this[3] = v9;
  this[4] = v9 + 4;
  do
  {
    v11 = (&v20)[v10];
    *(_QWORD *)v9 = v11;
    if ((v11 & 7) != 0)
    {
      v12 = (unsigned int *)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 2, v12));
      if ((v13 & 1) == 0)
        *(_QWORD *)v9 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v10;
    v9 += 2;
  }
  while (v10 != 2);
  v14 = (unsigned int **)&v22;
  this[3] = v9;
  do
  {
    v16 = (uint64_t)*--v14;
    v15 = v16;
    if ((v16 & 7) != 0)
    {
      v17 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stlxr(v18 - 2, v17));
    }
  }
  while (v14 != &v20);
  return (pxrInternal__aapl__pxrReserved__::HdCoordSysSchemaTokens_StaticTokenType *)this;
}

void sub_20C7F7960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  _QWORD *v14;
  _QWORD *v15;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;

  sub_20BEEB2B8(&a10);
  v17 = &a14;
  while (1)
  {
    v19 = *--v17;
    v18 = v19;
    if ((v19 & 7) != 0)
    {
      v20 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stlxr(v21 - 2, v20));
    }
    if (v17 == (uint64_t *)&a12)
    {
      if ((*v15 & 7) != 0)
      {
        v22 = (unsigned int *)(*v15 & 0xFFFFFFFFFFFFFFF8);
        do
          v23 = __ldxr(v22);
        while (__stlxr(v23 - 2, v22));
      }
      if ((*v14 & 7) != 0)
      {
        v24 = (unsigned int *)(*v14 & 0xFFFFFFFFFFFFFFF8);
        do
          v25 = __ldxr(v24);
        while (__stlxr(v25 - 2, v24));
      }
      _Unwind_Resume(a1);
    }
  }
}

void pxrInternal__aapl__pxrReserved__::HdCoordSysSchema::GetName(pxrInternal__aapl__pxrReserved__::HdCoordSysSchema *this@<X0>, _QWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::HdCoordSysSchemaTokens_StaticTokenType *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;

  v4 = (pxrInternal__aapl__pxrReserved__::HdCoordSysSchemaTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCoordSysSchemaTokens);
  if (!v4)
    v4 = sub_20C7F76D8(&pxrInternal__aapl__pxrReserved__::HdCoordSysSchemaTokens);
  v5 = (unsigned int *)*((_QWORD *)v4 + 1);
  v10 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v10 = v6;
  }
  sub_20C7E28BC((uint64_t *)this, a2);
  if ((v10 & 7) != 0)
  {
    v8 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
}

void pxrInternal__aapl__pxrReserved__::HdCoordSysSchema::BuildRetained(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::HdCoordSysSchemaTokens_StaticTokenType *v4;
  unint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  __int128 v8;
  uint64_t v9[2];
  uint64_t v10[2];

  v10[1] = *MEMORY[0x24BDAC8D0];
  v9[1] = 0;
  v10[0] = 0;
  v9[0] = 0;
  if (*a1)
  {
    v4 = (pxrInternal__aapl__pxrReserved__::HdCoordSysSchemaTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCoordSysSchemaTokens);
    if (!v4)
      v4 = sub_20C7F76D8(&pxrInternal__aapl__pxrReserved__::HdCoordSysSchemaTokens);
    sub_20BF32220(v10, (_QWORD *)v4 + 1);
    sub_20BDE881C(v9, a1);
    v5 = 1;
  }
  else
  {
    v5 = 0;
  }
  pxrInternal__aapl__pxrReserved__::HdRetainedContainerDataSource::New(v5, v10, v9, &v8);
  *a2 = v8;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v9);
  if ((v10[0] & 7) != 0)
  {
    v6 = (unsigned int *)(v10[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
}

void sub_20C7F7BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13)
{
  unsigned int *v14;
  unsigned int v15;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a11);
  if ((a13 & 7) != 0)
  {
    v14 = (unsigned int *)(a13 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdCoordSysSchema::GetFromParent(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v3 = *a1;
  if (*a1)
  {
    if (!atomic_load(&pxrInternal__aapl__pxrReserved__::HdCoordSysSchemaTokens))
      sub_20C7F76D8(&pxrInternal__aapl__pxrReserved__::HdCoordSysSchemaTokens);
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v3 + 24))(&v14, v3);
    sub_20C7E0B14((uint64_t)&v14, &v16);
  }
  else
  {
    v16 = 0;
    v17 = 0;
  }
  sub_20C7E0E2C(a2, &v16);
  v5 = v17;
  if (v3)
  {
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v8 = v15;
    if (v15)
    {
      v9 = (unint64_t *)&v15->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        v11 = v8;
LABEL_22:
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  else if (v17)
  {
    v12 = (unint64_t *)&v17->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      v11 = v5;
      goto LABEL_22;
    }
  }
}

void sub_20C7F7D04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a11);
  if (v11)
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::HdCoordSysSchemaTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::HdCoordSysSchema::GetSchemaToken(pxrInternal__aapl__pxrReserved__::HdCoordSysSchema *this)
{
  pxrInternal__aapl__pxrReserved__::HdCoordSysSchemaTokens_StaticTokenType *result;

  result = (pxrInternal__aapl__pxrReserved__::HdCoordSysSchemaTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCoordSysSchemaTokens);
  if (!result)
    return sub_20C7F76D8(&pxrInternal__aapl__pxrReserved__::HdCoordSysSchemaTokens);
  return result;
}

void *pxrInternal__aapl__pxrReserved__::HdCoordSysSchema::GetDefaultLocator(pxrInternal__aapl__pxrReserved__::HdCoordSysSchema *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::HdCoordSysSchemaTokens_StaticTokenType *v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25498D9F8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498D9F8))
  {
    v3 = (pxrInternal__aapl__pxrReserved__::HdCoordSysSchemaTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCoordSysSchemaTokens);
    if (!v3)
      v3 = sub_20C7F76D8(&pxrInternal__aapl__pxrReserved__::HdCoordSysSchemaTokens);
    pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HdDataSourceLocator((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&unk_25498D9C0, v3);
    __cxa_atexit((void (*)(void *))sub_20C7E0C54, &unk_25498D9C0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498D9F8);
  }
  return &unk_25498D9C0;
}

void sub_20C7F7DE0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498D9F8);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::HdCoordSysSchema::Builder::SetName(_QWORD *a1, uint64_t *a2)
{
  sub_20BDE881C(a1, a2);
  return a1;
}

void pxrInternal__aapl__pxrReserved__::HdCoordSysBindingSchemaTokens_StaticTokenType::~HdCoordSysBindingSchemaTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::HdCoordSysBindingSchemaTokens_StaticTokenType *this)
{
  unsigned int *v2;
  unsigned int v3;
  void **v4;

  v4 = (void **)((char *)this + 8);
  sub_20BEEB2B8(&v4);
  if ((*(_QWORD *)this & 7) != 0)
  {
    v2 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
}

{
  unsigned int *v2;
  unsigned int v3;
  void **v4;

  v4 = (void **)((char *)this + 8);
  sub_20BEEB2B8(&v4);
  if ((*(_QWORD *)this & 7) != 0)
  {
    v2 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
}

pxrInternal__aapl__pxrReserved__::HdCoordSysBindingSchemaTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::HdCoordSysBindingSchemaTokens_StaticTokenType::HdCoordSysBindingSchemaTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::HdCoordSysBindingSchemaTokens_StaticTokenType *this)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "coordSysBinding", 0);
  v3 = *v2;
  if ((*v2 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      v3 &= 0xFFFFFFFFFFFFFFF8;
  }
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  v6 = operator new(8uLL);
  *((_QWORD *)this + 1) = v6;
  *((_QWORD *)this + 2) = v6;
  *v6 = v3;
  v7 = v6 + 1;
  *((_QWORD *)this + 3) = v6 + 1;
  if ((v3 & 7) != 0)
  {
    v8 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      *v6 &= 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = v7;
    do
      v10 = __ldxr(v8);
    while (__stlxr(v10 - 2, v8));
  }
  else
  {
    *((_QWORD *)this + 2) = v7;
  }
  return this;
}

void sub_20C7F7FAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v13;
  unsigned int v14;

  v11 = v10;
  sub_20BEEB2B8(&a9);
  if ((v11 & 7) != 0)
  {
    v13 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  sub_20C96B3E4(v9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdCoordSysBindingSchema::GetCoordSysBindingNames@<X0>(pxrInternal__aapl__pxrReserved__::HdCoordSysBindingSchema *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = *(_QWORD *)this;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

void pxrInternal__aapl__pxrReserved__::HdCoordSysBindingSchema::GetCoordSysBinding(pxrInternal__aapl__pxrReserved__::HdCoordSysBindingSchema *this@<X0>, unsigned int **a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;

  v7 = *a2;
  if (((unint64_t)*a2 & 7) != 0)
  {
    v3 = (unsigned int *)((unint64_t)*a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) == 0)
      v7 = v3;
  }
  sub_20C7F80A0((uint64_t *)this, a3);
  if ((v7 & 7) != 0)
  {
    v5 = (unsigned int *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
}

void sub_20C7F80A0(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  v3 = *a1;
  if (v3)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v3 + 24))(&v7);
    sub_20C7F837C((uint64_t)&v7, a2);
    v4 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

double pxrInternal__aapl__pxrReserved__::HdCoordSysBindingSchema::BuildRetained@<D0>(unint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, _OWORD *a4@<X8>)
{
  double result;
  __int128 v6;

  pxrInternal__aapl__pxrReserved__::HdRetainedContainerDataSource::New(a1, a2, a3, &v6);
  result = *(double *)&v6;
  *a4 = v6;
  return result;
}

void pxrInternal__aapl__pxrReserved__::HdCoordSysBindingSchema::GetFromParent(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v3 = *a1;
  if (*a1)
  {
    if (!atomic_load(&pxrInternal__aapl__pxrReserved__::HdCoordSysBindingSchemaTokens))
      sub_20C7F83E8(&pxrInternal__aapl__pxrReserved__::HdCoordSysBindingSchemaTokens);
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v3 + 24))(&v14, v3);
    sub_20C7E0B14((uint64_t)&v14, &v16);
  }
  else
  {
    v16 = 0;
    v17 = 0;
  }
  sub_20C7E0E2C(a2, &v16);
  v5 = v17;
  if (v3)
  {
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v8 = v15;
    if (v15)
    {
      v9 = (unint64_t *)&v15->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        v11 = v8;
LABEL_22:
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  else if (v17)
  {
    v12 = (unint64_t *)&v17->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      v11 = v5;
      goto LABEL_22;
    }
  }
}

void sub_20C7F8288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a11);
  if (v11)
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

unint64_t pxrInternal__aapl__pxrReserved__::HdCoordSysBindingSchema::GetSchemaToken(pxrInternal__aapl__pxrReserved__::HdCoordSysBindingSchema *this)
{
  unint64_t result;

  result = atomic_load(&pxrInternal__aapl__pxrReserved__::HdCoordSysBindingSchemaTokens);
  if (!result)
    return sub_20C7F83E8(&pxrInternal__aapl__pxrReserved__::HdCoordSysBindingSchemaTokens);
  return result;
}

void *pxrInternal__aapl__pxrReserved__::HdCoordSysBindingSchema::GetDefaultLocator(pxrInternal__aapl__pxrReserved__::HdCoordSysBindingSchema *this)
{
  unsigned __int8 v1;
  const pxrInternal__aapl__pxrReserved__::TfToken *v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25498DA38);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498DA38))
  {
    v3 = (const pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCoordSysBindingSchemaTokens);
    if (!v3)
      v3 = (const pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C7F83E8(&pxrInternal__aapl__pxrReserved__::HdCoordSysBindingSchemaTokens);
    pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HdDataSourceLocator((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&unk_25498DA00, v3);
    __cxa_atexit((void (*)(void *))sub_20C7E0C54, &unk_25498DA00, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498DA38);
  }
  return &unk_25498DA00;
}

void sub_20C7F8364(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498DA38);
  _Unwind_Resume(a1);
}

void *sub_20C7F837C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  result = *(void **)a1;
  if (result
    && (result = __dynamic_cast(result, (const struct __class_type_info *)&unk_24C54BBE0, (const struct __class_type_info *)&unk_24C54C598, 0)) != 0)
  {
    v5 = *(_QWORD *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

unint64_t sub_20C7F83E8(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::HdCoordSysBindingSchemaTokens_StaticTokenType *v2;
  pxrInternal__aapl__pxrReserved__::HdCoordSysBindingSchemaTokens_StaticTokenType *v3;
  unsigned int *v5;
  unsigned int v6;
  void **v8;

  v2 = sub_20C7F8470();
  v3 = v2;
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)v2, a1))
      return (unint64_t)v3;
  }
  __clrex();
  if (v2)
  {
    v8 = (void **)((char *)v2 + 8);
    sub_20BEEB2B8(&v8);
    if ((*(_QWORD *)v3 & 7) != 0)
    {
      v5 = (unsigned int *)(*(_QWORD *)v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
    operator delete(v3);
  }
  return atomic_load(a1);
}

pxrInternal__aapl__pxrReserved__::HdCoordSysBindingSchemaTokens_StaticTokenType *sub_20C7F8470()
{
  pxrInternal__aapl__pxrReserved__::HdCoordSysBindingSchemaTokens_StaticTokenType *v0;

  v0 = (pxrInternal__aapl__pxrReserved__::HdCoordSysBindingSchemaTokens_StaticTokenType *)operator new(0x20uLL);
  pxrInternal__aapl__pxrReserved__::HdCoordSysBindingSchemaTokens_StaticTokenType::HdCoordSysBindingSchemaTokens_StaticTokenType(v0);
  return v0;
}

void sub_20C7F849C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdCubeSchemaTokens_StaticTokenType::~HdCubeSchemaTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::HdCubeSchemaTokens_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int v6;
  void **v7;

  v7 = (void **)((char *)this + 16);
  sub_20BEEB2B8(&v7);
  v2 = *((_QWORD *)this + 1);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  if ((*(_QWORD *)this & 7) != 0)
  {
    v5 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
}

pxrInternal__aapl__pxrReserved__::HdCubeSchemaTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::HdCubeSchemaTokens_StaticTokenType::HdCubeSchemaTokens_StaticTokenType(unsigned int **this)
{
  unsigned int **v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int **v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v20;
  unsigned int *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v2 = (unsigned int **)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "cube", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2, "size", 0);
  v3 = *this;
  v20 = v3;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      v20 = v4;
  }
  v6 = *v2;
  v21 = v6;
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    if ((v8 & 1) == 0)
      v21 = v7;
  }
  this[2] = 0;
  this[3] = 0;
  this[4] = 0;
  v9 = (unsigned int *)operator new(0x10uLL);
  v10 = 0;
  this[2] = v9;
  this[3] = v9;
  this[4] = v9 + 4;
  do
  {
    v11 = (&v20)[v10];
    *(_QWORD *)v9 = v11;
    if ((v11 & 7) != 0)
    {
      v12 = (unsigned int *)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 2, v12));
      if ((v13 & 1) == 0)
        *(_QWORD *)v9 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v10;
    v9 += 2;
  }
  while (v10 != 2);
  v14 = (unsigned int **)&v22;
  this[3] = v9;
  do
  {
    v16 = (uint64_t)*--v14;
    v15 = v16;
    if ((v16 & 7) != 0)
    {
      v17 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stlxr(v18 - 2, v17));
    }
  }
  while (v14 != &v20);
  return (pxrInternal__aapl__pxrReserved__::HdCubeSchemaTokens_StaticTokenType *)this;
}

void sub_20C7F86B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  _QWORD *v14;
  _QWORD *v15;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;

  sub_20BEEB2B8(&a10);
  v17 = &a14;
  while (1)
  {
    v19 = *--v17;
    v18 = v19;
    if ((v19 & 7) != 0)
    {
      v20 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stlxr(v21 - 2, v20));
    }
    if (v17 == (uint64_t *)&a12)
    {
      if ((*v15 & 7) != 0)
      {
        v22 = (unsigned int *)(*v15 & 0xFFFFFFFFFFFFFFF8);
        do
          v23 = __ldxr(v22);
        while (__stlxr(v23 - 2, v22));
      }
      if ((*v14 & 7) != 0)
      {
        v24 = (unsigned int *)(*v14 & 0xFFFFFFFFFFFFFFF8);
        do
          v25 = __ldxr(v24);
        while (__stlxr(v25 - 2, v24));
      }
      _Unwind_Resume(a1);
    }
  }
}

void pxrInternal__aapl__pxrReserved__::HdCubeSchema::GetSize(pxrInternal__aapl__pxrReserved__::HdCubeSchema *this@<X0>, _QWORD *a2@<X8>)
{
  unsigned int **v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;

  v4 = (unsigned int **)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCubeSchemaTokens);
  if (!v4)
    v4 = sub_20C7F8B70(&pxrInternal__aapl__pxrReserved__::HdCubeSchemaTokens);
  v5 = v4[1];
  v10 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v10 = v6;
  }
  sub_20C7E94B4((uint64_t *)this, a2);
  if ((v10 & 7) != 0)
  {
    v8 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
}

void pxrInternal__aapl__pxrReserved__::HdCubeSchema::BuildRetained(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  unsigned int **v4;
  unint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  __int128 v8;
  uint64_t v9[2];
  uint64_t v10[2];

  v10[1] = *MEMORY[0x24BDAC8D0];
  v9[1] = 0;
  v10[0] = 0;
  v9[0] = 0;
  if (*a1)
  {
    v4 = (unsigned int **)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCubeSchemaTokens);
    if (!v4)
      v4 = sub_20C7F8B70(&pxrInternal__aapl__pxrReserved__::HdCubeSchemaTokens);
    sub_20BF32220(v10, v4 + 1);
    sub_20BDE881C(v9, a1);
    v5 = 1;
  }
  else
  {
    v5 = 0;
  }
  pxrInternal__aapl__pxrReserved__::HdRetainedContainerDataSource::New(v5, v10, v9, &v8);
  *a2 = v8;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v9);
  if ((v10[0] & 7) != 0)
  {
    v6 = (unsigned int *)(v10[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
}

void sub_20C7F88F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13)
{
  unsigned int *v14;
  unsigned int v15;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a11);
  if ((a13 & 7) != 0)
  {
    v14 = (unsigned int *)(a13 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdCubeSchema::GetFromParent(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v3 = *a1;
  if (*a1)
  {
    if (!atomic_load(&pxrInternal__aapl__pxrReserved__::HdCubeSchemaTokens))
      sub_20C7F8B70(&pxrInternal__aapl__pxrReserved__::HdCubeSchemaTokens);
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v3 + 24))(&v14, v3);
    sub_20C7E0B14((uint64_t)&v14, &v16);
  }
  else
  {
    v16 = 0;
    v17 = 0;
  }
  sub_20C7E0E2C(a2, &v16);
  v5 = v17;
  if (v3)
  {
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v8 = v15;
    if (v15)
    {
      v9 = (unint64_t *)&v15->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        v11 = v8;
LABEL_22:
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  else if (v17)
  {
    v12 = (unint64_t *)&v17->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      v11 = v5;
      goto LABEL_22;
    }
  }
}

void sub_20C7F8A54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a11);
  if (v11)
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

unsigned int **pxrInternal__aapl__pxrReserved__::HdCubeSchema::GetSchemaToken(pxrInternal__aapl__pxrReserved__::HdCubeSchema *this)
{
  unsigned int **result;

  result = (unsigned int **)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCubeSchemaTokens);
  if (!result)
    return sub_20C7F8B70(&pxrInternal__aapl__pxrReserved__::HdCubeSchemaTokens);
  return result;
}

void *pxrInternal__aapl__pxrReserved__::HdCubeSchema::GetDefaultLocator(pxrInternal__aapl__pxrReserved__::HdCubeSchema *this)
{
  unsigned __int8 v1;
  unsigned int **v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25498DA78);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498DA78))
  {
    v3 = (unsigned int **)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCubeSchemaTokens);
    if (!v3)
      v3 = sub_20C7F8B70(&pxrInternal__aapl__pxrReserved__::HdCubeSchemaTokens);
    pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HdDataSourceLocator((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&unk_25498DA40, (const pxrInternal__aapl__pxrReserved__::TfToken *)v3);
    __cxa_atexit((void (*)(void *))sub_20C7E0C54, &unk_25498DA40, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498DA78);
  }
  return &unk_25498DA40;
}

void sub_20C7F8B30(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498DA78);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::HdCubeSchema::Builder::SetSize(_QWORD *a1, uint64_t *a2)
{
  sub_20BDE881C(a1, a2);
  return a1;
}

unsigned int **sub_20C7F8B70(unint64_t *a1)
{
  unsigned int **result;
  void *v4;

  result = sub_20C7F8BB8();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::HdCubeSchemaTokens_StaticTokenType::~HdCubeSchemaTokens_StaticTokenType((pxrInternal__aapl__pxrReserved__::HdCubeSchemaTokens_StaticTokenType *)result);
    operator delete(v4);
  }
  return (unsigned int **)atomic_load(a1);
}

unsigned int **sub_20C7F8BB8()
{
  unsigned int **v0;

  v0 = (unsigned int **)operator new(0x28uLL);
  pxrInternal__aapl__pxrReserved__::HdCubeSchemaTokens_StaticTokenType::HdCubeSchemaTokens_StaticTokenType(v0);
  return v0;
}

void sub_20C7F8BE4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens_StaticTokenType::~HdCylinderSchemaTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  void **v28;

  v28 = (void **)((char *)this + 72);
  sub_20BEEB2B8(&v28);
  v2 = *((_QWORD *)this + 8);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *((_QWORD *)this + 7);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v8 = *((_QWORD *)this + 6);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  v11 = *((_QWORD *)this + 5);
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  v14 = *((_QWORD *)this + 4);
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  v17 = *((_QWORD *)this + 3);
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  v20 = *((_QWORD *)this + 2);
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  v23 = *((_QWORD *)this + 1);
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  if ((*(_QWORD *)this & 7) != 0)
  {
    v26 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v27 = __ldxr(v26);
    while (__stlxr(v27 - 2, v26));
  }
}

pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens_StaticTokenType::HdCylinderSchemaTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens_StaticTokenType *this)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t *)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "cylinder", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2, "height", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 16, "radius", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 24, "radiusTop", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 32, "radiusBottom", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 40, "axis", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 48, "X", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 56, "Y", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 64, "Z", 0);
  v3 = *(_QWORD *)this;
  v41 = v3;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      v41 &= 0xFFFFFFFFFFFFFFF8;
  }
  v6 = *v2;
  v42 = v6;
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    if ((v8 & 1) == 0)
      v42 &= 0xFFFFFFFFFFFFFFF8;
  }
  v9 = *((_QWORD *)this + 2);
  v43 = v9;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      v43 &= 0xFFFFFFFFFFFFFFF8;
  }
  v12 = *((_QWORD *)this + 3);
  v44 = v12;
  if ((v12 & 7) != 0)
  {
    v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 2, v13));
    if ((v14 & 1) == 0)
      v44 &= 0xFFFFFFFFFFFFFFF8;
  }
  v15 = *((_QWORD *)this + 4);
  v45 = v15;
  if ((v15 & 7) != 0)
  {
    v16 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 2, v16));
    if ((v17 & 1) == 0)
      v45 &= 0xFFFFFFFFFFFFFFF8;
  }
  v18 = *((_QWORD *)this + 5);
  v46 = v18;
  if ((v18 & 7) != 0)
  {
    v19 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 2, v19));
    if ((v20 & 1) == 0)
      v46 &= 0xFFFFFFFFFFFFFFF8;
  }
  v21 = *((_QWORD *)this + 6);
  v47 = v21;
  if ((v21 & 7) != 0)
  {
    v22 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 2, v22));
    if ((v23 & 1) == 0)
      v47 &= 0xFFFFFFFFFFFFFFF8;
  }
  v24 = *((_QWORD *)this + 7);
  v48 = v24;
  if ((v24 & 7) != 0)
  {
    v25 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 2, v25));
    if ((v26 & 1) == 0)
      v48 &= 0xFFFFFFFFFFFFFFF8;
  }
  v27 = *((_QWORD *)this + 8);
  v49 = v27;
  if ((v27 & 7) != 0)
  {
    v28 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 2, v28));
    if ((v29 & 1) == 0)
      v49 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  v30 = operator new(0x48uLL);
  v31 = 0;
  *((_QWORD *)this + 9) = v30;
  *((_QWORD *)this + 10) = v30;
  *((_QWORD *)this + 11) = v30 + 9;
  do
  {
    v32 = *(&v41 + v31);
    *v30 = v32;
    if ((v32 & 7) != 0)
    {
      v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 2, v33));
      if ((v34 & 1) == 0)
        *v30 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v31;
    ++v30;
  }
  while (v31 != 9);
  v35 = &v50;
  *((_QWORD *)this + 10) = v30;
  do
  {
    v37 = *--v35;
    v36 = v37;
    if ((v37 & 7) != 0)
    {
      v38 = (unsigned int *)(v36 & 0xFFFFFFFFFFFFFFF8);
      do
        v39 = __ldxr(v38);
      while (__stlxr(v39 - 2, v38));
    }
  }
  while (v35 != &v41);
  return this;
}

void sub_20C7F9114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;

  sub_20BEEB2B8(&a9);
  v30 = &a20;
  while (1)
  {
    v32 = *--v30;
    v31 = v32;
    if ((v32 & 7) != 0)
    {
      v33 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
      do
        v34 = __ldxr(v33);
      while (__stlxr(v34 - 2, v33));
    }
    if (v30 == (uint64_t *)&a11)
    {
      if ((*v28 & 7) != 0)
      {
        v35 = (unsigned int *)(*v28 & 0xFFFFFFFFFFFFFFF8);
        do
          v36 = __ldxr(v35);
        while (__stlxr(v36 - 2, v35));
      }
      if ((*v27 & 7) != 0)
      {
        v37 = (unsigned int *)(*v27 & 0xFFFFFFFFFFFFFFF8);
        do
          v38 = __ldxr(v37);
        while (__stlxr(v38 - 2, v37));
      }
      if ((*v26 & 7) != 0)
      {
        v39 = (unsigned int *)(*v26 & 0xFFFFFFFFFFFFFFF8);
        do
          v40 = __ldxr(v39);
        while (__stlxr(v40 - 2, v39));
      }
      if ((*v25 & 7) != 0)
      {
        v41 = (unsigned int *)(*v25 & 0xFFFFFFFFFFFFFFF8);
        do
          v42 = __ldxr(v41);
        while (__stlxr(v42 - 2, v41));
      }
      if ((*v24 & 7) != 0)
      {
        v43 = (unsigned int *)(*v24 & 0xFFFFFFFFFFFFFFF8);
        do
          v44 = __ldxr(v43);
        while (__stlxr(v44 - 2, v43));
      }
      if ((*v23 & 7) != 0)
      {
        v45 = (unsigned int *)(*v23 & 0xFFFFFFFFFFFFFFF8);
        do
          v46 = __ldxr(v45);
        while (__stlxr(v46 - 2, v45));
      }
      if ((*v22 & 7) != 0)
      {
        v47 = (unsigned int *)(*v22 & 0xFFFFFFFFFFFFFFF8);
        do
          v48 = __ldxr(v47);
        while (__stlxr(v48 - 2, v47));
      }
      if ((*v21 & 7) != 0)
      {
        v49 = (unsigned int *)(*v21 & 0xFFFFFFFFFFFFFFF8);
        do
          v50 = __ldxr(v49);
        while (__stlxr(v50 - 2, v49));
      }
      if ((*v20 & 7) != 0)
      {
        v51 = (unsigned int *)(*v20 & 0xFFFFFFFFFFFFFFF8);
        do
          v52 = __ldxr(v51);
        while (__stlxr(v52 - 2, v51));
      }
      _Unwind_Resume(a1);
    }
  }
}

void pxrInternal__aapl__pxrReserved__::HdCylinderSchema::GetHeight(pxrInternal__aapl__pxrReserved__::HdCylinderSchema *this@<X0>, _QWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens_StaticTokenType *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;

  v4 = (pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens);
  if (!v4)
    v4 = sub_20C7F9F14(&pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens);
  v5 = (unsigned int *)*((_QWORD *)v4 + 1);
  v10 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v10 = v6;
  }
  sub_20C7E94B4((uint64_t *)this, a2);
  if ((v10 & 7) != 0)
  {
    v8 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
}

void pxrInternal__aapl__pxrReserved__::HdCylinderSchema::GetRadius(pxrInternal__aapl__pxrReserved__::HdCylinderSchema *this@<X0>, _QWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens_StaticTokenType *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;

  v4 = (pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens);
  if (!v4)
    v4 = sub_20C7F9F14(&pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens);
  v5 = (unsigned int *)*((_QWORD *)v4 + 2);
  v10 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v10 = v6;
  }
  sub_20C7E94B4((uint64_t *)this, a2);
  if ((v10 & 7) != 0)
  {
    v8 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
}

void pxrInternal__aapl__pxrReserved__::HdCylinderSchema::GetRadiusTop(pxrInternal__aapl__pxrReserved__::HdCylinderSchema *this@<X0>, _QWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens_StaticTokenType *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;

  v4 = (pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens);
  if (!v4)
    v4 = sub_20C7F9F14(&pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens);
  v5 = (unsigned int *)*((_QWORD *)v4 + 3);
  v10 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v10 = v6;
  }
  sub_20C7E94B4((uint64_t *)this, a2);
  if ((v10 & 7) != 0)
  {
    v8 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
}

void pxrInternal__aapl__pxrReserved__::HdCylinderSchema::GetRadiusBottom(pxrInternal__aapl__pxrReserved__::HdCylinderSchema *this@<X0>, _QWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens_StaticTokenType *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;

  v4 = (pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens);
  if (!v4)
    v4 = sub_20C7F9F14(&pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens);
  v5 = (unsigned int *)*((_QWORD *)v4 + 4);
  v10 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v10 = v6;
  }
  sub_20C7E94B4((uint64_t *)this, a2);
  if ((v10 & 7) != 0)
  {
    v8 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
}

void pxrInternal__aapl__pxrReserved__::HdCylinderSchema::GetAxis(pxrInternal__aapl__pxrReserved__::HdCylinderSchema *this@<X0>, _QWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens_StaticTokenType *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;

  v4 = (pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens);
  if (!v4)
    v4 = sub_20C7F9F14(&pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens);
  v5 = (unsigned int *)*((_QWORD *)v4 + 5);
  v10 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v10 = v6;
  }
  sub_20C7E28BC((uint64_t *)this, a2);
  if ((v10 & 7) != 0)
  {
    v8 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
}

void pxrInternal__aapl__pxrReserved__::HdCylinderSchema::BuildRetained(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, _OWORD *a6@<X8>)
{
  uint64_t *v11;
  pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens_StaticTokenType *v13;
  unint64_t v14;
  pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens_StaticTokenType *v15;
  pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens_StaticTokenType *v16;
  pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens_StaticTokenType *v17;
  pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens_StaticTokenType *v18;
  uint64_t i;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  __int128 v24;
  _OWORD v25[5];
  _OWORD v26[2];
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v27 = 0;
  memset(v26, 0, sizeof(v26));
  memset(v25, 0, sizeof(v25));
  v11 = &v28;
  if (*a1)
  {
    v13 = (pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens);
    if (!v13)
      v13 = sub_20C7F9F14(&pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens);
    sub_20BF32220(v26, (_QWORD *)v13 + 1);
    sub_20BDE881C(v25, a1);
    v14 = 1;
  }
  else
  {
    v14 = 0;
  }
  if (*a2)
  {
    v15 = (pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens);
    if (!v15)
      v15 = sub_20C7F9F14(&pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens);
    sub_20BF32220((_QWORD *)((unint64_t)v26 | (8 * v14)), (_QWORD *)v15 + 2);
    sub_20BDE881C(&v25[v14++], a2);
  }
  if (*a3)
  {
    v16 = (pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens);
    if (!v16)
      v16 = sub_20C7F9F14(&pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens);
    sub_20BF32220((_QWORD *)v26 + v14, (_QWORD *)v16 + 3);
    sub_20BDE881C(&v25[v14++], a3);
  }
  if (*a4)
  {
    v17 = (pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens);
    if (!v17)
      v17 = sub_20C7F9F14(&pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens);
    sub_20BF32220((_QWORD *)v26 + v14, (_QWORD *)v17 + 4);
    sub_20BDE881C(&v25[v14++], a4);
  }
  if (*a5)
  {
    v18 = (pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens);
    if (!v18)
      v18 = sub_20C7F9F14(&pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens);
    sub_20BF32220((_QWORD *)v26 + v14, (_QWORD *)v18 + 5);
    sub_20BDE881C(&v25[v14++], a5);
  }
  pxrInternal__aapl__pxrReserved__::HdRetainedContainerDataSource::New(v14, (uint64_t *)v26, (uint64_t *)v25, &v24);
  *a6 = v24;
  for (i = 4; i != -1; --i)
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v25[i]);
  do
  {
    v21 = *--v11;
    v20 = v21;
    if ((v21 & 7) != 0)
    {
      v22 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
      do
        v23 = __ldxr(v22);
      while (__stlxr(v23 - 2, v22));
    }
  }
  while (v11 != (uint64_t *)v26);
}

void sub_20C7F9918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  char *v21;
  uint64_t i;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;

  for (i = 64; i != -16; i -= 16)
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(&a11 + i));
  while (1)
  {
    v25 = *((_QWORD *)v21 - 1);
    v21 -= 8;
    v24 = v25;
    if ((v25 & 7) != 0)
    {
      v26 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
      do
        v27 = __ldxr(v26);
      while (__stlxr(v27 - 2, v26));
    }
    if (v21 == &a21)
      _Unwind_Resume(a1);
  }
}

void pxrInternal__aapl__pxrReserved__::HdCylinderSchema::GetFromParent(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v3 = *a1;
  if (*a1)
  {
    if (!atomic_load(&pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens))
      sub_20C7F9F14(&pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens);
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v3 + 24))(&v14, v3);
    sub_20C7E0B14((uint64_t)&v14, &v16);
  }
  else
  {
    v16 = 0;
    v17 = 0;
  }
  sub_20C7E0E2C(a2, &v16);
  v5 = v17;
  if (v3)
  {
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v8 = v15;
    if (v15)
    {
      v9 = (unint64_t *)&v15->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        v11 = v8;
LABEL_22:
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  else if (v17)
  {
    v12 = (unint64_t *)&v17->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      v11 = v5;
      goto LABEL_22;
    }
  }
}

void sub_20C7F9A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a11);
  if (v11)
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::HdCylinderSchema::GetSchemaToken(pxrInternal__aapl__pxrReserved__::HdCylinderSchema *this)
{
  pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens_StaticTokenType *result;

  result = (pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens);
  if (!result)
    return sub_20C7F9F14(&pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens);
  return result;
}

void *pxrInternal__aapl__pxrReserved__::HdCylinderSchema::GetDefaultLocator(pxrInternal__aapl__pxrReserved__::HdCylinderSchema *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens_StaticTokenType *v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25498DAB8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25498DAB8))
  {
    v3 = (pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens);
    if (!v3)
      v3 = sub_20C7F9F14(&pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens);
    pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HdDataSourceLocator((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&unk_25498DA80, v3);
    __cxa_atexit((void (*)(void *))sub_20C7E0C54, &unk_25498DA80, &dword_20BDBC000);
    __cxa_guard_release(&qword_25498DAB8);
  }
  return &unk_25498DA80;
}

void sub_20C7F9B78(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498DAB8);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdCylinderSchema::BuildAxisDataSource(pxrInternal__aapl__pxrReserved__::HdCylinderSchema *this@<X0>, _QWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens_StaticTokenType *v5;
  pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens_StaticTokenType *v6;
  pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens_StaticTokenType *v7;
  unsigned __int8 v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20;

  v5 = (pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens);
  if (!v5)
    v5 = sub_20C7F9F14(&pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens);
  if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v5 + 6) & 0xFFFFFFFFFFFFFFF8))
  {
    v8 = atomic_load((unsigned __int8 *)&qword_25498DAD0);
    if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_25498DAD0))
    {
      sub_20C7EA9FC((uint64_t *)this, &qword_25498DAC0);
      __cxa_atexit((void (*)(void *))pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource, &qword_25498DAC0, &dword_20BDBC000);
      __cxa_guard_release(&qword_25498DAD0);
    }
    v9 = *(_QWORD *)algn_25498DAC8;
    *a2 = qword_25498DAC0;
    a2[1] = v9;
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
  }
  else
  {
    v6 = (pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens);
    if (!v6)
      v6 = sub_20C7F9F14(&pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens);
    if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v6 + 7) & 0xFFFFFFFFFFFFFFF8))
    {
      v12 = atomic_load((unsigned __int8 *)&qword_25498DAE8);
      if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_25498DAE8))
      {
        sub_20C7EA9FC((uint64_t *)this, &qword_25498DAD8);
        __cxa_atexit((void (*)(void *))pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource, &qword_25498DAD8, &dword_20BDBC000);
        __cxa_guard_release(&qword_25498DAE8);
      }
      v13 = unk_25498DAE0;
      *a2 = qword_25498DAD8;
      a2[1] = v13;
      if (v13)
      {
        v14 = (unint64_t *)(v13 + 8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
    }
    else
    {
      v7 = (pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens);
      if (!v7)
        v7 = sub_20C7F9F14(&pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens);
      if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v7 + 8) & 0xFFFFFFFFFFFFFFF8))
      {
        v16 = atomic_load((unsigned __int8 *)&qword_25498DB00);
        if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_25498DB00))
        {
          sub_20C7EA9FC((uint64_t *)this, &qword_25498DAF0);
          __cxa_atexit((void (*)(void *))pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource, &qword_25498DAF0, &dword_20BDBC000);
          __cxa_guard_release(&qword_25498DB00);
        }
        v17 = *(_QWORD *)algn_25498DAF8;
        *a2 = qword_25498DAF0;
        a2[1] = v17;
        if (v17)
        {
          v18 = (unint64_t *)(v17 + 8);
          do
            v19 = __ldxr(v18);
          while (__stxr(v19 + 1, v18));
        }
      }
      else
      {
        sub_20C7EA9FC((uint64_t *)this, &v20);
        *(_OWORD *)a2 = v20;
      }
    }
  }
}

void sub_20C7F9E04(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25498DB00);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::HdCylinderSchema::Builder::SetHeight(_QWORD *a1, uint64_t *a2)
{
  sub_20BDE881C(a1, a2);
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdCylinderSchema::Builder::SetRadius(uint64_t a1, uint64_t *a2)
{
  sub_20BDE881C((_QWORD *)(a1 + 16), a2);
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdCylinderSchema::Builder::SetRadiusTop(uint64_t a1, uint64_t *a2)
{
  sub_20BDE881C((_QWORD *)(a1 + 32), a2);
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdCylinderSchema::Builder::SetRadiusBottom(uint64_t a1, uint64_t *a2)
{
  sub_20BDE881C((_QWORD *)(a1 + 48), a2);
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdCylinderSchema::Builder::SetAxis(uint64_t a1, uint64_t *a2)
{
  sub_20BDE881C((_QWORD *)(a1 + 64), a2);
  return a1;
}

void pxrInternal__aapl__pxrReserved__::HdCylinderSchema::Builder::Build(pxrInternal__aapl__pxrReserved__::HdCylinderSchema::Builder *this@<X0>, _OWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::HdCylinderSchema::BuildRetained((uint64_t *)this, (uint64_t *)this + 2, (uint64_t *)this + 4, (uint64_t *)this + 6, (uint64_t *)this + 8, a2);
}

pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens_StaticTokenType *sub_20C7F9F14(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens_StaticTokenType *result;
  void *v4;

  result = sub_20C7F9F5C();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens_StaticTokenType::~HdCylinderSchemaTokens_StaticTokenType(result);
    operator delete(v4);
  }
  return (pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens_StaticTokenType *)atomic_load(a1);
}

pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens_StaticTokenType *sub_20C7F9F5C()
{
  pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens_StaticTokenType *v0;

  v0 = (pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens_StaticTokenType *)operator new(0x60uLL);
  pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens_StaticTokenType::HdCylinderSchemaTokens_StaticTokenType(v0);
  return v0;
}

void sub_20C7F9F88(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdContainerDataSource::Get(pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *this@<X1>, _QWORD *a2@<X0>, __int128 *a3@<X8>)
{
  __int128 *v3;
  uint64_t ElementCount;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t Element;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;

  v3 = a3;
  if (*a2)
  {
    ElementCount = pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::GetElementCount(this);
    if (ElementCount)
    {
      v7 = ElementCount;
      v42 = 0uLL;
      v8 = a2[1];
      *(_QWORD *)&v41 = *a2;
      *((_QWORD *)&v41 + 1) = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      v11 = 0;
      v12 = ElementCount - 1;
      while (1)
      {
        v13 = v41;
        Element = pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::GetElement(this, v11);
        (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v13 + 24))(&v40, v13, Element);
        v15 = v40;
        v40 = 0uLL;
        v16 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
        v42 = v15;
        if (v16)
        {
          p_shared_owners = (unint64_t *)&v16->__shared_owners_;
          do
            v18 = __ldaxr(p_shared_owners);
          while (__stlxr(v18 - 1, p_shared_owners));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
        v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
        if (*((_QWORD *)&v40 + 1))
        {
          v20 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 - 1, v20));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
        v22 = v42;
        if (!(_QWORD)v42)
          break;
        if (v11 < v12)
        {
          sub_20C7E0B14((uint64_t)&v42, &v40);
          v23 = v40;
          v40 = 0uLL;
          v24 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
          v41 = v23;
          if (v24)
          {
            v25 = (unint64_t *)&v24->__shared_owners_;
            do
              v26 = __ldaxr(v25);
            while (__stlxr(v26 - 1, v25));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
              std::__shared_weak_count::__release_weak(v24);
            }
          }
          v27 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
          if (*((_QWORD *)&v40 + 1))
          {
            v28 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
            do
              v29 = __ldaxr(v28);
            while (__stlxr(v29 - 1, v28));
            if (!v29)
            {
              ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
              std::__shared_weak_count::__release_weak(v27);
            }
          }
          if (!(_QWORD)v41)
            goto LABEL_33;
        }
        if (++v11 == v7)
        {
          v22 = v42;
          break;
        }
      }
      v30 = *((_QWORD *)&v42 + 1);
      *(_QWORD *)v3 = v22;
      *((_QWORD *)v3 + 1) = v30;
      v3 = &v42;
LABEL_33:
      *(_QWORD *)v3 = 0;
      *((_QWORD *)v3 + 1) = 0;
      v31 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
      if (*((_QWORD *)&v41 + 1))
      {
        v32 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      v34 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
      if (*((_QWORD *)&v42 + 1))
      {
        v35 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
    }
    else
    {
      v37 = a2[1];
      *(_QWORD *)v3 = *a2;
      *((_QWORD *)v3 + 1) = v37;
      if (v37)
      {
        v38 = (unint64_t *)(v37 + 8);
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
      }
    }
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *((_QWORD *)a3 + 1) = 0;
  }
}

void sub_20C7FA228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdGetMergedContributingSampleTimesForInterval(uint64_t a1, uint64_t *a2, uint64_t a3, float a4, float a5)
{
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  float *v13;
  float *v14;
  float *v16;
  float *v17;
  float *v18;
  __int128 v20;
  uint64_t v21;
  void *__p;
  float *v23;
  uint64_t v24;
  float *v25;

  if (a1)
  {
    v9 = a1;
    v10 = 0;
    while (1)
    {
      v11 = *a2;
      if (!*a2)
        goto LABEL_13;
      __p = 0;
      v23 = 0;
      v24 = 0;
      v12 = (*(uint64_t (**)(uint64_t, void **, float, float))(*(_QWORD *)v11 + 24))(v11, &__p, a4, a5);
      v13 = (float *)__p;
      if ((v12 & 1) == 0)
        goto LABEL_11;
      v14 = v23;
      if (__p == v23 || a3 == 0)
        break;
      v16 = *(float **)a3;
      v17 = *(float **)(a3 + 8);
      if (*(float **)a3 == v17)
      {
        if (v16)
        {
          *(_QWORD *)(a3 + 8) = v16;
          operator delete(v16);
          *(_QWORD *)a3 = 0;
          *(_QWORD *)(a3 + 8) = 0;
          *(_QWORD *)(a3 + 16) = 0;
          v13 = (float *)__p;
          v14 = v23;
        }
        *(_QWORD *)a3 = v13;
        *(_QWORD *)(a3 + 8) = v14;
        *(_QWORD *)(a3 + 16) = v24;
        v10 = 1;
        goto LABEL_13;
      }
      v20 = 0uLL;
      v21 = 0;
      sub_20C7FAB48(v16, v17, (float *)__p, v23, (uint64_t)&v20, &v25);
      v18 = *(float **)a3;
      if (*(_QWORD *)a3)
      {
        *(_QWORD *)(a3 + 8) = v18;
        operator delete(v18);
        *(_QWORD *)a3 = 0;
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = 0;
      }
      *(_OWORD *)a3 = v20;
      v13 = (float *)__p;
      *(_QWORD *)(a3 + 16) = v21;
      v10 = 1;
      if (v13)
      {
LABEL_12:
        v23 = v13;
        operator delete(v13);
      }
LABEL_13:
      a2 += 2;
      if (!--v9)
        return v10 & 1;
    }
    v10 |= __p != v23;
LABEL_11:
    if (__p)
      goto LABEL_12;
    goto LABEL_13;
  }
  v10 = 0;
  return v10 & 1;
}

void sub_20C7FA384(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::HdDebugPrintDataSource(_QWORD *a1, _QWORD *a2, int a3)
{
  unint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  void *p_p;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  size_t v28;
  uint64_t v29;
  void *p_b;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  void *v41;
  uint64_t v42;
  _QWORD *v43;
  void *v44;
  uint64_t v45;
  _QWORD *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  void *__p;
  std::__shared_weak_count *v58;
  unsigned __int8 v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  void *__b;
  char *v63;
  unsigned __int8 v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  _QWORD v67[3];

  v67[2] = *MEMORY[0x24BDAC8D0];
  sub_20C7E0B14((uint64_t)a2, &v65);
  if (v65)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v65 + 16))(&__b);
    v6 = 126 - 2 * __clz((v63 - (_BYTE *)__b) >> 3);
    if (v63 == __b)
      v7 = 0;
    else
      v7 = v6;
    sub_20C7FAD70((uint64_t)__b, (uint64_t *)v63, (uint64_t)&v60, v7, 1);
    v8 = (char *)__b;
    v9 = v63;
    if (__b != v63)
    {
      do
      {
        (*(void (**)(uint64_t *__return_ptr, uint64_t, char *))(*(_QWORD *)v65 + 24))(&v60, v65, v8);
        if (v60)
        {
          sub_20BDDC468(&__p, a3, 9);
          if ((v59 & 0x80u) == 0)
            p_p = &__p;
          else
            p_p = __p;
          if ((v59 & 0x80u) == 0)
            v11 = v59;
          else
            v11 = (uint64_t)v58;
          v12 = sub_20BDDC1C8(a1, (uint64_t)p_p, v11);
          v13 = sub_20BDDC1C8(v12, (uint64_t)"[", 1);
          v14 = pxrInternal__aapl__pxrReserved__::operator<<(v13, v8);
          sub_20BDDC1C8(v14, (uint64_t)"]\n", 2);
          if ((char)v59 < 0)
            operator delete(__p);
          v55 = v60;
          v56 = v61;
          if (v61)
          {
            p_shared_owners = (unint64_t *)&v61->__shared_owners_;
            do
              v16 = __ldxr(p_shared_owners);
            while (__stxr(v16 + 1, p_shared_owners));
          }
          pxrInternal__aapl__pxrReserved__::HdDebugPrintDataSource(a1, &v55, (a3 + 1));
          v17 = v56;
          if (v56)
          {
            v18 = (unint64_t *)&v56->__shared_owners_;
            do
              v19 = __ldaxr(v18);
            while (__stlxr(v19 - 1, v18));
            if (!v19)
            {
              ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
              std::__shared_weak_count::__release_weak(v17);
            }
          }
        }
        v20 = v61;
        if (v61)
        {
          v21 = (unint64_t *)&v61->__shared_owners_;
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
        v8 += 8;
      }
      while (v8 != v9);
    }
    __p = &__b;
    sub_20BEEB2B8((void ***)&__p);
  }
  else
  {
    sub_20C7FA9D0((uint64_t)a2, &__p);
    if (__p)
    {
      v26 = (*(uint64_t (**)(void *))(*(_QWORD *)__p + 16))(__p);
      if (v26)
      {
        v27 = 0;
        v28 = a3;
        v29 = (a3 + 1);
        do
        {
          sub_20BDDC468(&__b, v28, 9);
          if ((v64 & 0x80u) == 0)
            p_b = &__b;
          else
            p_b = __b;
          if ((v64 & 0x80u) == 0)
            v31 = v64;
          else
            v31 = (uint64_t)v63;
          v32 = sub_20BDDC1C8(a1, (uint64_t)p_b, v31);
          sub_20BDDC1C8(v32, (uint64_t)"[", 1);
          v33 = (_QWORD *)std::ostream::operator<<();
          sub_20BDDC1C8(v33, (uint64_t)"]\n", 2);
          if ((char)v64 < 0)
            operator delete(__b);
          (*(void (**)(uint64_t *__return_ptr, void *, uint64_t))(*(_QWORD *)__p + 24))(&v53, __p, v27);
          pxrInternal__aapl__pxrReserved__::HdDebugPrintDataSource(a1, &v53, v29);
          v34 = v54;
          if (v54)
          {
            v35 = (unint64_t *)&v54->__shared_owners_;
            do
              v36 = __ldaxr(v35);
            while (__stlxr(v36 - 1, v35));
            if (!v36)
            {
              ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
              std::__shared_weak_count::__release_weak(v34);
            }
          }
          ++v27;
        }
        while (v27 != v26);
      }
    }
    else
    {
      sub_20C7FAA3C((uint64_t)a2, &v60);
      if (v60)
      {
        sub_20BDDC468(&__b, a3, 9);
        if ((v64 & 0x80u) == 0)
          v37 = &__b;
        else
          v37 = __b;
        if ((v64 & 0x80u) == 0)
          v38 = v64;
        else
          v38 = (uint64_t)v63;
        v39 = sub_20BDDC1C8(a1, (uint64_t)v37, v38);
        (*(void (**)(_QWORD *__return_ptr, float))(*(_QWORD *)v60 + 16))(v67, 0.0);
        v40 = (_QWORD *)pxrInternal__aapl__pxrReserved__::operator<<((uint64_t)v39, (uint64_t)v67);
        sub_20BDDC1C8(v40, (uint64_t)"\n", 1);
        sub_20BF4C2D8((uint64_t)v67);
      }
      else if (*a2)
      {
        sub_20BDDC468(&__b, a3, 9);
        if ((v64 & 0x80u) == 0)
          v41 = &__b;
        else
          v41 = __b;
        if ((v64 & 0x80u) == 0)
          v42 = v64;
        else
          v42 = (uint64_t)v63;
        v43 = sub_20BDDC1C8(a1, (uint64_t)v41, v42);
        sub_20BDDC1C8(v43, (uint64_t)"UNKNOWN\n", 8);
      }
      else
      {
        sub_20BDDC468(&__b, a3, 9);
        if ((v64 & 0x80u) == 0)
          v44 = &__b;
        else
          v44 = __b;
        if ((v64 & 0x80u) == 0)
          v45 = v64;
        else
          v45 = (uint64_t)v63;
        v46 = sub_20BDDC1C8(a1, (uint64_t)v44, v45);
        sub_20BDDC1C8(v46, (uint64_t)"NULL\n", 5);
      }
      if ((char)v64 < 0)
        operator delete(__b);
      v47 = v61;
      if (v61)
      {
        v48 = (unint64_t *)&v61->__shared_owners_;
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
      }
    }
    v50 = v58;
    if (v58)
    {
      v51 = (unint64_t *)&v58->__shared_owners_;
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
  }
  v23 = v66;
  if (v66)
  {
    v24 = (unint64_t *)&v66->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
}

void sub_20C7FA8DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a20);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a14);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a28);
  _Unwind_Resume(a1);
}

void *sub_20C7FA9D0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  result = *(void **)a1;
  if (result
    && (result = __dynamic_cast(result, (const struct __class_type_info *)&unk_24C54BBE0, (const struct __class_type_info *)&unk_24C54C5B0, 0)) != 0)
  {
    v5 = *(_QWORD *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void *sub_20C7FAA3C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  result = *(void **)a1;
  if (result
    && (result = __dynamic_cast(result, (const struct __class_type_info *)&unk_24C54BBE0, (const struct __class_type_info *)&unk_24C54BC58, 0)) != 0)
  {
    v5 = *(_QWORD *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::HdDebugPrintDataSource(uint64_t *a1, int a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v2 = (std::__shared_weak_count *)a1[1];
  v8 = *a1;
  v9 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  pxrInternal__aapl__pxrReserved__::HdDebugPrintDataSource(MEMORY[0x24BEDB318], &v8, a2);
  v5 = v9;
  if (v9)
  {
    v6 = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_20C7FAB34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

float *sub_20C7FAB48@<X0>(float *a1@<X0>, float *a2@<X1>, float *a3@<X2>, float *a4@<X3>, uint64_t a5@<X4>, float **a6@<X8>)
{
  float *v8;
  float *result;
  float *v12;
  uint64_t v13;

  v8 = a1;
  v13 = a5;
  if (a1 == a2)
  {
LABEL_8:
    result = (float *)sub_20C7FAD10(a3, a4, a5);
    a4 = result;
  }
  else
  {
    while (a3 != a4)
    {
      if (*a3 >= *v8)
      {
        a3 += *v8 >= *a3;
        sub_20C7FAC24(&v13, v8++);
      }
      else
      {
        sub_20C7FAC24(&v13, a3++);
      }
      if (v8 == a2)
      {
        a5 = v13;
        v8 = a2;
        goto LABEL_8;
      }
    }
    result = (float *)sub_20C7FAD10(v8, a2, v13);
    v8 = result;
  }
  *a6 = v8;
  a6[1] = a4;
  a6[2] = v12;
  return result;
}

uint64_t *sub_20C7FAC24(uint64_t *a1, _DWORD *a2)
{
  uint64_t v4;
  _DWORD *v5;
  _QWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  int v16;

  v4 = *a1;
  v5 = *(_DWORD **)(*a1 + 8);
  v6 = (_QWORD *)(*a1 + 16);
  if ((unint64_t)v5 >= *v6)
  {
    v8 = *(_DWORD **)v4;
    v9 = ((uint64_t)v5 - *(_QWORD *)v4) >> 2;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62)
      sub_20BDDF694();
    v11 = *v6 - (_QWORD)v8;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)sub_20BDE1330((uint64_t)v6, v12);
      v8 = *(_DWORD **)v4;
      v5 = *(_DWORD **)(v4 + 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = &v13[4 * v12];
    *(_DWORD *)v14 = *a2;
    v7 = v14 + 4;
    while (v5 != v8)
    {
      v16 = *--v5;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(_QWORD *)v4 = v14;
    *(_QWORD *)(v4 + 8) = v7;
    *(_QWORD *)(v4 + 16) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v5 = *a2;
    v7 = v5 + 1;
  }
  *(_QWORD *)(v4 + 8) = v7;
  return a1;
}

_DWORD *sub_20C7FAD10(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v6;

  v3 = a1;
  v6 = a3;
  if (a1 == a2)
    return a1;
  v4 = a2;
  do
    sub_20C7FAC24(&v6, v3++);
  while (v3 != v4);
  return v4;
}

uint64_t sub_20C7FAD70(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  char v19;
  BOOL v20;
  uint64_t v21;

  v8 = (uint64_t *)result;
LABEL_2:
  v9 = a2 - 1;
  v10 = v8;
LABEL_3:
  v11 = 1 - a4;
  while (2)
  {
    v8 = v10;
    v12 = v11;
    v13 = (char *)a2 - (char *)v10;
    v14 = a2 - v10;
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = sub_20BF1E6D8(a3, a2 - 1, v10);
        if ((_DWORD)result)
        {
          v21 = *v10;
          *v10 = *v9;
          *v9 = v21;
        }
        return result;
      case 3uLL:
        return sub_20C03596C(v10, v10 + 1, a2 - 1, a3);
      case 4uLL:
        return sub_20C035FCC(v10, v10 + 1, v10 + 2, a2 - 1, a3);
      case 5uLL:
        return sub_20C03607C(v10, v10 + 1, v10 + 2, v10 + 3, a2 - 1, a3);
      default:
        if (v13 <= 191)
        {
          if ((a5 & 1) != 0)
            return sub_20C7FB0B4((uint64_t)v10, a2, a3);
          else
            return sub_20C7FB228((uint64_t)v10, a2, a3);
        }
        if (v12 != 1)
        {
          v15 = v14 >> 1;
          v16 = &v10[v14 >> 1];
          if ((unint64_t)v13 < 0x401)
          {
            sub_20C03596C(&v10[v14 >> 1], v10, a2 - 1, a3);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            sub_20C03596C(v10, &v10[v14 >> 1], a2 - 1, a3);
            sub_20C03596C(v10 + 1, v16 - 1, a2 - 2, a3);
            sub_20C03596C(v10 + 2, &v10[v15 + 1], a2 - 3, a3);
            sub_20C03596C(v16 - 1, v16, &v10[v15 + 1], a3);
            v17 = *v10;
            *v10 = *v16;
            *v16 = v17;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if ((sub_20BF1E6D8(a3, v10 - 1, v10) & 1) == 0)
          {
            result = (uint64_t)sub_20C7FB380(v10, a2, a3);
            v10 = (uint64_t *)result;
            goto LABEL_17;
          }
LABEL_12:
          v18 = sub_20C7FB554(v10, a2, a3);
          if ((v19 & 1) == 0)
            goto LABEL_15;
          v20 = sub_20C7FB730(v10, v18, a3);
          v10 = v18 + 1;
          result = sub_20C7FB730(v18 + 1, a2, a3);
          if (!(_DWORD)result)
          {
            v11 = v12 + 1;
            if (v20)
              continue;
LABEL_15:
            result = sub_20C7FAD70(v8, v18, a3, -v12, a5 & 1);
            v10 = v18 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v12;
            goto LABEL_3;
          }
          a4 = -v12;
          a2 = v18;
          if (v20)
            return result;
          goto LABEL_2;
        }
        if (v10 != a2)
          return (uint64_t)sub_20C7FB988(v10, a2, a2, a3);
        return result;
    }
  }
}

uint64_t sub_20C7FB0B4(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;

  if ((uint64_t *)result != a2)
  {
    v4 = (uint64_t *)result;
    v5 = (uint64_t *)(result + 8);
    if ((uint64_t *)(result + 8) != a2)
    {
      v7 = (uint64_t *)result;
      do
      {
        v8 = v5;
        result = sub_20BF1E6D8(a3, v5, v7);
        if ((_DWORD)result)
        {
          v18 = *v8;
          *v8 = 0;
          v9 = v8;
          while (1)
          {
            v10 = v7;
            if ((*v9 & 7) != 0)
            {
              v11 = (unsigned int *)(*v9 & 0xFFFFFFFFFFFFFFF8);
              do
                v12 = __ldxr(v11);
              while (__stlxr(v12 - 2, v11));
            }
            *v9 = *v7;
            *v7 = 0;
            if (v7 == v4)
              break;
            --v7;
            result = sub_20BF1E6D8(a3, &v18, v10 - 1);
            v9 = v10;
            if ((result & 1) == 0)
              goto LABEL_13;
          }
          v10 = v4;
LABEL_13:
          if (&v18 == v10)
          {
            v15 = v18;
          }
          else
          {
            if ((*v10 & 7) != 0)
            {
              v13 = (unsigned int *)(*v10 & 0xFFFFFFFFFFFFFFF8);
              do
                v14 = __ldxr(v13);
              while (__stlxr(v14 - 2, v13));
            }
            v15 = 0;
            *v10 = v18;
            v18 = 0;
          }
          if ((v15 & 7) != 0)
          {
            v16 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
            do
              v17 = __ldxr(v16);
            while (__stlxr(v17 - 2, v16));
          }
        }
        v5 = v8 + 1;
        v7 = v8;
      }
      while (v8 + 1 != a2);
    }
  }
  return result;
}

uint64_t sub_20C7FB228(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;

  if ((uint64_t *)result != a2)
  {
    v4 = (uint64_t *)result;
    v5 = (uint64_t *)(result + 8);
    if ((uint64_t *)(result + 8) != a2)
    {
      do
      {
        v7 = v5;
        result = sub_20BF1E6D8(a3, v5, v4);
        if ((_DWORD)result)
        {
          v17 = *v7;
          *v7 = 0;
          v8 = v7;
          do
          {
            v9 = v4;
            if ((*v8 & 7) != 0)
            {
              v10 = (unsigned int *)(*v8 & 0xFFFFFFFFFFFFFFF8);
              do
                v11 = __ldxr(v10);
              while (__stlxr(v11 - 2, v10));
            }
            *v8 = *v4;
            *v4-- = 0;
            result = sub_20BF1E6D8(a3, &v17, v9 - 1);
            v8 = v9;
          }
          while ((result & 1) != 0);
          if (&v17 == v9)
          {
            v14 = v17;
          }
          else
          {
            if ((*v9 & 7) != 0)
            {
              v12 = (unsigned int *)(*v9 & 0xFFFFFFFFFFFFFFF8);
              do
                v13 = __ldxr(v12);
              while (__stlxr(v13 - 2, v12));
            }
            v14 = 0;
            *v9 = v17;
            v17 = 0;
          }
          if ((v14 & 7) != 0)
          {
            v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
            do
              v16 = __ldxr(v15);
            while (__stlxr(v16 - 2, v15));
          }
        }
        v5 = v7 + 1;
        v4 = v7;
      }
      while (v7 + 1 != a2);
    }
  }
  return result;
}

uint64_t *sub_20C7FB380(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v18;

  v4 = a2;
  v18 = *a1;
  *a1 = 0;
  if ((sub_20BF1E6D8(a3, &v18, a2 - 1) & 1) != 0)
  {
    v6 = a1;
    do
      ++v6;
    while ((sub_20BF1E6D8(a3, &v18, v6) & 1) == 0);
  }
  else
  {
    v7 = a1 + 1;
    do
    {
      v6 = v7;
      if (v7 >= v4)
        break;
      v8 = sub_20BF1E6D8(a3, &v18, v7);
      v7 = v6 + 1;
    }
    while (!v8);
  }
  if (v6 < v4)
  {
    do
      --v4;
    while ((sub_20BF1E6D8(a3, &v18, v4) & 1) != 0);
  }
  while (v6 < v4)
  {
    v9 = *v6;
    *v6 = *v4;
    *v4 = v9;
    do
      ++v6;
    while (!sub_20BF1E6D8(a3, &v18, v6));
    do
      --v4;
    while ((sub_20BF1E6D8(a3, &v18, v4) & 1) != 0);
  }
  v10 = v6 - 1;
  if (v6 - 1 != a1)
  {
    if ((*a1 & 7) != 0)
    {
      v11 = (unsigned int *)(*a1 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
    *a1 = *v10;
    *v10 = 0;
  }
  if (&v18 == v10)
  {
    if ((v18 & 7) != 0)
    {
      v15 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stlxr(v16 - 2, v15));
    }
  }
  else
  {
    if ((*v10 & 7) != 0)
    {
      v13 = (unsigned int *)(*v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v14 = __ldxr(v13);
      while (__stlxr(v14 - 2, v13));
    }
    *v10 = v18;
  }
  return v6;
}

void sub_20C7FB51C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unsigned int *v10;
  unsigned int v11;

  if ((a10 & 7) != 0)
  {
    v10 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  _Unwind_Resume(a1);
}

